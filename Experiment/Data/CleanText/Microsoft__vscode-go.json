{
    "lukehoban": "Great - thanks.\n. Good catch.\nBefore adding this I think we should fix #4 so that there is a better installation/acquisition experience for debugging.\n. Fixed with 786afbec2d59e9533a8d62a665205da380dd2cd5.\n. Fixed with 1bd8f4b16c814851efdb742220729dfb78a78e44.\n. @ironcladlou Thanks - this a good list of reasons to do this, and I'm increasingly inclined to think it's the right direction to go in the future.\nRegarding lookup precedence, that same order is what is being used currently in vscode-go as well.\nhttps://github.com/Microsoft/vscode-go/blob/master/src/goPath.ts#L12-L46\n. I actually think the PR in #351 is a good solution to this which doesn't change the default experience but allows folks who do want to isolate their tools into a separate GOPATH to do that.  I think this is orthogonal to multi-part GOPATH and vendoring concerns.  This is just about where to store the binaries for the tools - and it's nice to have the option to place them somewhere outside of the active GOPATH.. Awesome - thanks @tecbot.  I left a few comments on the PR.  \n@newhook No key combination should be needed, the CodeLens results should just appear ambiently in appropriate locations.  The particular implements lens that is currently implemented will only show up when you have interfaces implemented in your code.  It may make sense to add one of the more universal ones like references if that is possible.\n. I had hoped these could work at workspace scope by default (like find-all-reference does today), making the experience dependent on the scope of workspace the users chooses to open.  But as noted in #21, sounds like additional configuration may be needed to allow overriding this behaviour.\nThe perf issue is definitely a concern.  Technically CodeLens is something that happens asynchronously seperate from direct user interaction, so a bit of perf overhead may be okay - but minutes certainly would not feel good.  It will be interesting to try this out based on what is int he current PR on some real codebases to see if the experience is acceptable.\n. @zsxawerdu Thanks  - just took a look at this - great start.\nI like the idea of using go doc -u. \nI'm seeing this work okay when typing the (, but then the logic to find the function name fails as I type through the arguments to the function call.  Sounds like this is the same issue you were mentioning with having to walk back through the tokens to find the first enclosing function call.  I'm unfortunately not sure how to do that robustly without implementing a bunch of somewhat complicated Go parsing logic.\nAlso - the rendering of the parameter hints doesn't quite seem as good as the TypeScript rendering yet - seems it doesn't yet know which argument is currently active to highlight it?\nCurrently seeing from your branch:\n\nSeeing in TS files:\n\n. Also - since this is trying to show usage not definition, I wonder if it makes sense to drop the leading func from the display?\n. Version 0.6.24 is now published with the Signature Help implementation.\nHere's what it currently looks like:\n\n. What do you see when you run the Go: Current GOPATH command from the command palette (cmd-shift-p)?\nIf it's not what you expect, you can override the GOPATH to use by adding the \"go.gopath\" setting.  See https://github.com/Microsoft/vscode-go#options.\n. @jchannon Yes, I think these are the same issue.\nFor those you seeing this problem - could you share what you see when you run the Go: Current GOPATH command from the command palette (cmd-shift-p)?\n. @polds Good point, I've updated the README to make it more clear how to use those settings.\n. It shouldn't matter what is in your PATH, the tools are located relative to your GOPATH.\nIf you launch Code from a shell with a GOPATH set, you should see that running Go: Current GOPATH shows the correct value and tools should be located relative to there.\nYou can also override any other GOPATH settings by adding the \"go.gopath\" setting to your settings.json (cmd+,):\njson\n{   \n    \"go.gopath\": \"/Users/lukeh/go\"\n}\nIf anyone is having problems after these steps though, could you share details about your environment?\n. @Hokutosei What do you see when you run Go: Current GOPATH in VS Code?  Did overriding GOPATH with the go.gopath setting as mentioned earlier in the thread work for you?\n. @Hokutosei sorry about that - if you do have time to share more details of your environment sometime that would be great.\n. @shurcooL Looks like there was a bug in the logic for finding binaries when there are multiple workspaces.  That should be fixed with b1e2a93e8d7883f2f03f9e206ea720178235d8c5.  I pushed version 0.6.7 with that fix so if you update the extension you can see if that fixes this for you.  There is still an issue where you will see \"Analysis Tools Missing\" if tools are not installed in the first of your workspaces, I'll open a separate issue on that.\n. There are some improvements in 0f20bc67df7fa0abd7df7c75b5d36235a07fac94 and 72ef57ac672ef2deacee7426dce938b0b5bf2f63 that should help with this.\nIf you upgrade to 0.6.10 you should no longer see most of the problems raised in this issue.\nI'll close this for now, but if there are any specific problems remaining please re-open this or another issue.\n. @jchannon - Was your expectation that you'd see all of these locations returned from find-references?\n. I tend to agree with @ironcladlou.  \nI looked at this again as part of moving Find References from a custom tool (my fork of go-find-references) to a standard community tool (oracle/guru). \nI think it is for better or worse not the standard interpretation of \"References\" to include implementations of interfaces.\nBut tools like guru do offer separate implements command which may be helpful.  It might be nice to expose those commands some how - though there's no especially nice way to do that in VS Code (on par with the Find References user experience).\nGoing to close this for now though.  If there's a concrete proposal for something additional to do we can open separately.\n. @newhook Agreed - this is a limitation of using gorename.  Since the underlying library provides a modifiable global variable bound to the function which actually writes the files to disk I have some hope that either the existing gorename could be enhanced to provide the results of the rename to stdout instead of writing to disk, or that a new custom front-end to the underlying library could be used by the vscode-go tooling to work around this.\nSee: https://github.com/golang/tools/blob/master/refactor/rename/rename.go#L464\n. See also https://github.com/golang/go/issues/13355.\n. Note that with https://github.com/golang/go/issues/13355 now in gorename, it should be possible to fix this.\n. Currently formatting is available through an explicit command (Format Code or alt-shift-f).  \nI'll keep this issue to track adding support for format on save.\n. @jchannon Great.  There's some notes on how to build/debug the extension yourself here: https://github.com/Microsoft/vscode-go#building-and-debugging-the-extension.\n. @jchannon Yep - that's left over from the old naming - fixed with eca07a3a3355f0038460830a6a876111271c141d.\n. @jchannon.  I think what is probably best is the following:\n1. Move the formatting implementation in goFormat.ts into a standalone Command, so that it can be invoked both from Format Document and from the new format-on-save implementation\n2. Invoke that command inside goCheck.ts prior to invoking the compile/vet/lint checks.\n3. Add an option to turn this behaviour on/off\nThe bug in #16 is also something that will need to be fixed before we can turn format-on-save on.  \nWe'll also need to make sure that format-on-save interacts decently with Auto Save if the user has that turned on. I'm a little worried that these will interact poorly, since code will be changing unexpecedtly without the user taking any action.  It may be that we'll need to turn of format-on-save if Auto Save is turned on.\n. I haven't reviewed carefully yet - but it looks like you aren't yet applying the edits.\nI believe you need to use registerTextEditorCommand to register a new TextEditorCommand with VS Code to do the formatting itself.  That is the step 1 in my list above.  Then use executeCommand to invoke that action both during the explicit Format and during the save.  This is step 2 and 3 in my earlier list.\n. @jchannon I've pushed a new PR which builds upon your changes.  \nThis is still work in progress, but it does technically do a format-on-save.  The lack of a preSave event in Code makes this much more awkward than it should be.\n. For folks interested in this, I've added a new PR with a more-or-less complete implementation of this in #115.  Along with some other formatting fixes from @newhook, I believe this is now working reasonably well.\nIf anyone has a chance to pick up and test it out (git cloning per the instructions in the README and checking out the PR branch), that would be great.  The feature is behind a flag so I'll likely check this into master and push an update for broader testing in the next day or so.\n. I've merged the format-on-save support into master and it's in the 0.6.16 update of the extension.\nIt's still behind a flag for now - you'll want to set \"go.formatOnSave\": true in your settings to try it out.\nAs @calmh mentions, format-on-save doesn't play well with AutoSave, so you'll want to pick which one you want to use.  Generally, this means two modes of use for the plugin:\n1. FormatOnSave mode:  User should generally save often, using this as a manual trigger to update formatting, save to disk and update errors and linting.  Errors will be up to date less of the time, but formatting will be up to date more of the time.\n2. AutoSave mode: Users don't need to manually save, but should run Format Document when they want to update formatting and adjust imports.  Errors will be up to date less of the time, but formatting will be up to date less of the time.\n. Thanks @shurcooL!\n\nI notice some buggy behavior when there are multiple \"issues\" to resolve on save, like a golint issue, go build issue, and gofmt issue. It seems it resolves one, but not the others at the same time, so I need to make a few dummy edits and re-save to get it all updated.\n\nCurious if you are able to reproduce this issue?  Would love to fix that if there is still a problem.\n. Agreed - this is a bug.  Redirecting the debugees output to the debug console is not yet implemented.\n. Great - thanks @yuntan.  Feel free to open up a PR for this work as well so we can work on getting these changes merged in.\n. Format on save is not implemented yet - tracking that in #14.\n@mholt Could you share the full file where you see this problem?  And could you confirm whether you see this even when you save the file manually before invoking fmt?  I wasn't able to repro this myself so far.\n. Could anyone share a full code sample where they are seeing this?  I can't reproduce with the snippets shared so far, but I expect that is because I don't have the rest of the file contents.\n. Thanks for the repro cases @shurcooL  and @sanderhahn.  As far as I can tell the Go extension is requesting the right edits here, but Code isn't applying them correctly.  Following up on that in https://github.com/Microsoft/vscode/issues/144.\n. All - I believe this is now fixed if you update to VS Code 0.10.2 with the fix for https://github.com/Microsoft/vscode-go/issues/70.  \nIf anyone still sees corruption after formatting, please reopen.\n. Sounds like a great idea.  \nShould be easy to add support for that either as the default linter or as an option to use instead of discreet lint/vet.\n. Open to PR's adding support for this.  \nI'd suggest adding a go.lintTool setting that can optionally point to an alternate tool to run instead of golint.  That would allow users to opt-in to using gometalinter once they have installed and configured it.\nA further step would be to make it the default.  I think we should wait on that, since the acquisition experience for gometalinter is incrementally more complex.\n. @sijad Feel free to propose an update to the regexp to make sure gometalinter output can be handled.\n. Indeed. Thanks @sijad. \n. Good suggestion.\nThe logic for this is in https://github.com/lukehoban/go-outline.\nCurious - how verbose would you want this to be:\n```\n1: dbp.ClearBreakpoint proc\n2: (*Process).ClearBreakpoint proc\n3: (dbp *Process) ClearBreakpoint proc\n4: (dbp Process) ClearBreakpoint(addr uint64) (Breakpoint, error) proc\n```\nI'm assuming the last one is what you'd like to see?\n. Thanks to @prashantv for the contribution of https://github.com/lukehoban/go-outline/pull/3 which this is now implemented on.  \nAs noted in the commit - this additional information will only show up for users who update their go-outline - and we unfortunately don't have any good way to force/suggest users do that yet.\n. Thanks to @pcmind for PR #46 which fixed this issue.\n. @ulrichSchreiner and @mishak87 Good scenario.  Would love a PR to support this.  Feel free to open another issue as well if you'd like to continue to track this.\n@ulrichSchreiner To your first point, we preferred GOPATH/bin over PATH just because we saw a number of developer setups where PATH was not configured to include GOPATH/bin.  That said, perhaps it makes sense to search PATH as well when looking for the tools?  Probably as a fallback after looking in the workspaces GOPATH/bin.\nThere's another approach to all of this which is just to have the VS Code Go extension install it's own known copies to a seperate location and use them from there instead of relying on PATH/GOPATH.  Tracking that suggestion in #5, thoughts on that welcome.\n. Yeah - dlv is invoked as a normal user, so if you have signed dlv such that it cannot be used as a normal user it will not work with the VS Code integration currently.\nI'm not sure of options for working around this, other than distributing our owned signed binary along with the plugin.  \nThoughts?\n. That's right - the instructions on installing Delve are here: https://github.com/derekparker/delve/wiki/Building.  On OS X this requires creating a self-signed cert and then using that to CERT=dlv-cert make install.\nI've modified the README to not suggest go get for Delve since that won't work on OS X.\nI'll leave this open to track reporting a better error message when a non-signed dlv binary is installed.\n. We're now reporting back the errors from Delve itself, so you'll get the same somewhat cryptic error that Delve provides to tell you that you don't have a signed dlv:\n2015/11/21 18:51:15 debugger.go:56: launching process with args: [./debug]\ncould not launch process: could not fork/exec\nThat will be enough to easily search for the issue.  I'll leave communicating this failure case more explicitly to Delve itself for now.\n. FWIW - The most common issue I've seen has been accidentally missing this step:\n\nIn keychains select \u201cSystem\u201d, and you should find your new certificate. Use the context menu for the certificate, select \u201cGet Info\u201d, open the \u201cTrust\u201d item, and set \u201cCode Signing\u201d to \u201cAlways Trust\u201d.\n. @bruparel Sounds like you are not in the right directory.  You need to be in the directory where you cloned https://github.com/derekparker/delve before you run make install.\n. The build on save should report compilation errors as red squiggles and in the bar at the bottom left of the screen.  Are you not seeing errors being reported?\n\nThe build on save does not produce a binary or any other artifact.  You can use VS Code's tasks to hook up a build command to run go build, go install, go test, etc.  See https://code.visualstudio.com/Docs/editor/tasks.\n. @ppone Makes sense.  Let's keep this issue to track adding more integration with go build, go install, go run and go test.\nThere are likely two ways to include these:\n1. Add new commands to the command palette for Go: Build, Go: Test, etc. which operate either in the context of the opened workspace or the current file?\n2. Provide a command which automatically generates VS Code tasks for these in a .vscode/tasks.json in your current workspace.\nThe second is more native to VS Code, but likely the first is a convenient shortcut to this.\nThoughts?\n. @Mistermatt007 Agreed - I think both can be supported.\n. Question for folks looking for (1).  \nShould Go: Build invoke the build in the root of the workspace that is opened in Code, or in the folder containing the file currently open in the active text buffer?  Both feel potentially wrong in some set of cases.\n. Well it will frequently be ambiguous and I expect a second menu is more friction than is desired in this workflow. Option (2) is also available for full configuration of build/test tasks.\nMy inclination is to go with the active document's folder (even if it is not a .go file). \n. @ironcladlou Thanks for weighing in here.  \nDefinitely agree on the additional commands for running tests - those make sense and happy to take a look at the implementations in GoTools for inspiration.\nI had hoped to keep the project configuration requirements light here, and rely mostly on the workspace as the context for \"global\" operations (like find-all-references).  But it sounds like you have experience with cases where that is not practical.  \nI'm curious why more of this can't be automatically discovered within a workspace context though (go test ./... for example).\nI also wonder whether (to the extent that additional project configuration is needed) these things should be configured at the workspace settings level, tasks level, or really need a new project file (akin to .sublime-project).  \nDo you think it's possible to have smart defaults without any of this additional configuration and then allow this configuration to override those defaults?\n. @ironcladlou I am seeing that the go.gopath setting is not being picked up in tasks (unfortunately I don't think there's any way to handle that), but that the GOPATH from the shell which launched code is being picked up.  (I'm on OS X 10.11.4).\nYou can force the GOPATH setting with something like this:\njson\n{\n    \"version\": \"0.1.0\",\n    \"command\": \"go\",\n    \"isShellCommand\": true,\n    \"showOutput\": \"silent\",\n    \"options\": {\n        \"env\": {\n            \"GOPATH\": \"/Users/lukeh/dd/go\"\n        }\n    },\n    \"tasks\": [\n        {\n            \"taskName\": \"install\",\n            \"args\": [ \"-v\", \"./...\"],\n            \"isBuildCommand\": true\n        },\n        {\n            \"taskName\": \"test\",\n            \"args\": [ \"-v\", \"./...\"],\n            \"isTestCommand\": true\n        }\n    ]\n}\n. Added a note about the path forward for this here: https://github.com/Microsoft/vscode-go/pull/134#issuecomment-200588242.\n. @ironcladlou Agreed, I'll go ahead and close this. Feel free to open a new issue for build, or else it can just be a presumed feature of adding go install per #287. \n. Yeah - this is not yet implemented.  Something that should be added.\n. This should be fixed with 1dda079.  Could you upgrade to 0.6.10 and validate whether you are still seeing this issue?\n. Note - The README also now contains some text on how to configure debugging tests instead of normal builds.\n. Yeah - sounds like the missing piece here is the missing format-on-save support that's being tracked in #14.  I'll close this out for now.\n. Thanks @mgutz.  I'll work on pulling together a coding guidelines page for this project.\nFor now though, the guidelines here are a good starting point for code style: https://github.com/Microsoft/vscode/wiki/Coding-Guidelines.\nSoma additional general details on contributing to Microsoft repos will be similar to what's in https://github.com/Microsoft/TypeScript/blob/master/CONTRIBUTING.md.\n. Style is now enforced with the tslint run in TravisCI.  Going to close this out for now as there's nothing more immediate planned here.\n. Thanks @omac777.  Sounds like a request for http://github.com/golang/go if I'm understanding correctly.  If so, I'll close this issue out for now.\n. Yes - we should be invoking gocode close when the extension is deactivated to try and stop the gocode deamon.\n. Thanks @egamma - is there an issue already tracking this that we can link here?  \nI think that means we can't really fix this for now.  Will keep this active waiting for the deactivate call to be added in Code.\n. @egamma Unfortunately it doesn't look like that will work - shutting down gocode requires shelling out to gocode close and I'm not seeing that run inside the 'exit' handler.  The node.js docs say that you cannot do async work in this handler, which is likely the reason this isn't working?\n\nThere is no way to prevent the exiting of the event loop at this point, and once all exit listeners have finished running the process will exit. Therefore you must only perform synchronous operations in this handler. \n. I tried that, and it doesn't seem to work either.  I also tried just doing a fs.writeFileSync and even that's not working.\n. Yes - this is a bug.  \n\nCurrently the stopOnEntry, args, cwd and env debug settings are not being passed through to Delve, so none of these settings will work yet.\n. I'm pretty certain this is the same issue as #19.  \n@rvdwijngaard and @newhook - Could you confirm that you both have multi-workspace GOPATHs?  If not there may be some other issue.  I'll close for now.\n. The fix for this is in the 0.6.10 release, please reopen if you are still seeing issues after upgrading.\n. The suggestion in the README is to turn on Auto Save in Visual Studio Code, which saves your code as you type.  It's a generally nice feature once you get used to it, but especially nice with the vscode-go extension as you then get on-the-fly error reporting.\nI hadn't see goflymake before - but that looks like it might make it possible to do this without relying on build-on-save + auto-save.  If that works well, I'd be open to moving error checking away from the 'on-save' hook and to an on-th-fly model that works even with auto-save turned off.\n. Thanks @newhook.  That sounds great.  \nBTW - Definitely also open to PRs for this if you are interested.\n. @newhook I haven't seen the first issue you mention.  Could you open another issue to track this with details on how to repro it.  From a quick test of what you mention I didn't see those files being generated.\nOn the second point I completely agree.  I think doing both of these features together could make sense.\nFeel free to open up a WIP PR when you have something working here.\n. Per gitter discussion, we'll go ahead and close this for now, since we're not ready to move over to a model where Go tools that need global understanding can operate on in-memory state yet. \nWe'll likely want to revisit this in the future.\n. This is being tracked in #17.\n. Thanks @tampajohn!\n. That would happen if you haven't compiled the .ts files to .js (they are placed in the /out/ subfolder). But the compilation should happen automatically when you hit F5.  You could try invoking Tasks: Run Build Task manually, but that shouldn't be needed.\nDid you run the npm install in the steps in the readme? \n. The changes in #33 should not be needed, as there is a devDependency on vscode which includes a copy of the TypeScript compiler, and is invoked by the compile target in package.json, which is itself invoked by the npm target in tasks.json, which is invoked by the preLaunchTask in launch.json.\nAll of that is standard setup for VS Code extensions, so I'd be a bit surprised if it wasn't working.\nAre you sure you ran npm install?  Do you have a vscode folder in your node_modules?\n. Yes - your more recent post also suggests that you don't have node modules installed correctly - specifically ./node_modules/vscode/bin/compile.\n. Could be a Node version problem.  I'm not certain what the min requirement is.  I'm on 4.1.1.\nWhat do you see if you manually run node ./node_modules/vscode/bin/compile -watch -p ./?\n. What do you see from tree node_modules/vscode/node_modules/typescript:\n```\nlukeh@Lukes-MacBook-Pro:~/dd/vscode-go$ tree node_modules/vscode/node_modules/typescript/\nnode_modules/vscode/node_modules/typescript/\n\u251c\u2500\u2500 AUTHORS.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 CopyrightNotice.txt\n\u251c\u2500\u2500 Jakefile.js\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ThirdPartyNoticeText.txt\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tsc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 tsserver\n\u251c\u2500\u2500 lib\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.core.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.core.es6.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.dom.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.es6.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.scriptHost.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 lib.webworker.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tsc.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 tsserver.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 typescript.d.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 typescript.js\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 typescriptServices.d.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 typescriptServices.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tslint.json\n2 directories, 24 files\n```\nAssuming that those are installed, my only next guess would be to try upgrading Node and see if that works.\n. Ahh - great - thanks @egamma.  I'll add the devDependency to the extension package directly then.\n. Closing in favor of continuing with the work in #59.\n. Thanks for this.  I merged in @yuntan's change that addresses the same issue, so I don't think we'll need this PR as well.\nOne question - I see the sanitize function you added in this PR, but it is not being used.  I'm also not seeing any problems with newline rendering in my own tests.  Is there a case you don't see working correctly with just the changes that have been merged in so far?\n. Thanks @yuntan.\n. Yes - string literals in the settings file need to use escaped backslashes.  You should see an error reported in your settings file about the literal not being valid.\n. The go.gopath should point to the same place as you GOPATH.\nCould you share OS, go env and result of Go: current gopath?\n. @Mistermatt007 Two things:\n1. Can you open a .go file before running Go: Current GOPATH?\n2. How is your GOPATH set up?  Do you have this in your system or user environment globally?  Or do you set it locally in a command shell?\n. @Mistermatt007 Okay thanks.  And what exactly do you see then?  Does \"Analysis Tools Missing\" show in the bottom right?  What happens if you click it?  What is the contents of your e:\\GoWorkspace\\bin folder?  Have you tried running the go get commands that the popups suggest manually in your shell, what do you see if you run those?\n. FWIW - It's possible the issue you were seeing was related to this: https://github.com/Microsoft/vscode/issues/560#issuecomment-159573986.\n. This should be fixed now with the changes in #47.\n. Looks good - thanks for the fixes.\n. Fixes #19.\n. @ulrichSchreiner Great.\n. Fixed now.  Thanks.\n. If you upgrade to 0.6.10 you should now get more diagnostics from the debugger.  Can you do that and report back here if you are still seeing unexpected failures?\n. From @SamVerschueren on November 20, 2015 20:12\nHave you installed a plugin or something? This isn't core VS Code that's spawning the popups, it's probably a plugin that's not entirely working correctly...\n. From @andrewrgoss on November 20, 2015 20:35\nI installed the Go Support extension before I started using VSCode. Also installed the following Go libraries:\nhttps://github.com/rogpeppe/godef\nhttps://github.com/nsf/gocode\nhttps://github.com/mitchellh/go-ps\nFirst time using VSCode so didn't realize the popups weren't part of the core code. Can you point me to documentation for restoring VSCode default settings?\n. From @bpasero on November 20, 2015 20:56\n@lukehoban fyi\n. Yeah - I believe this is a bug in the vscode-go plugin.\n. @andrewgross Are you seeing this in .go files or even in other files?  Do you have an example file that is causing these warnings to pop up?\n. @andrewrgoss I can't seem to repro with that file standalone. Three more questions:\n1) Are you on Windows by any chance?\n2) Can you describe what you are doing when these warning appear?  Is it when you hover?  When you type?\n3) Are you working in any particular project that you might be able to share a pointer to?\n. This should be fixed with 4eb043ea6f8f522f30f10efbe45ca546809610ce which is in the 0.6.10 release.\n. Could you share your launch.json file as well?\n. Interesting.  When I try those steps (on OS X) I see this:\n\nNote that when the breakpoint is hit you should see the line drown in yellow, the callstack and the locals.\nCouple questions:\n1. What OS?\n2. Do you have a recent version of Delve installed?  Ideally built from current master.\n3. If you try on the command line with the following, does it work?\n```\nlukeh@Lukes-MacBook-Pro:~/dd/go/src/github.com/lukehoban/helloworld$ $GOPATH/bin/dlv debug\nType 'help' for list of commands.\n(dlv) b main.go:13\nBreakpoint 1 set at 0x20af for main.hello ./main.go:13\n(dlv) c\n\nmain.hello() ./main.go:13 (hits goroutine(1):1 total:1)\n\n 8:     a = a + 1\n 9:     hello(\"world\")\n10: }\n11:\n12: func hello(text string) {\n\n=>  13:     fmt.Printf(\"%s - %d\", text, a)\n    14: }\n(dlv) p text\n\"world\"\n(dlv)\n``\n. @rhinoid Strange.  That is the same configuration I have, and I have seen this working on several machines with the same setup.  It's hard to tell what exactly might be wrong here.\n1. Do you see the exact same results consistently?\n2. Can you get the debugger to correctly hit a breakpoint (as in my screenshot) for any codebase?  Or does it always do what you describe here?\n3. Much more work - but if you are willing to help invetigate, you can follow the instructions for [debugging the debugger](https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/Readme.md), then watch the debug console from within debugging the debugger for any errors/warnings, and also possibly inside the response fromthis.delve.call('Command', [{ name: 'continue' }], (err, state) => {`.\nI'm going to close for now since there is nothing more I can think to try without more info - but feel free to reopen if there is anything more you can gather.  And if anyone else is having the same issue let me know.\n. Thanks @joeblew99.  Could you attach a screenshot of exactly what you see?  Is there a spinner in the \"Variables\" window?  Is there a yellow highlighted row in the source code where the breakpoint was hit?  Is there anything in the debug console?\n. @joeblew99 Good to hear.  I have seen it happen before that the Variables window stop working for some reason and will not work again until VS Code is shutdown.  I have not yet been able to reproduce this reliably though.\n. @rhinoid Really hard to tell whats wrong here.  Any chance you can try the somewhat involved steps described here to debug the debugger: https://github.com/Microsoft/vscode-go/issues/78#issuecomment-159363629.\nYou should be able to step through the debugger and see where there is a failure + some additional diagnostics output.\n. Going to close this for now - please reopen or add comments here if you have additional data or if anyone else is able to repro.\n. So there are a few different features/workflows here:\n1. Use goimports-on-save, and then use the save command as an indirect way to add imports (this is not yet implemented in vscode-go, but seems to be what many folks would like to see #14)\n2. Have a command like GoSublime's ctrl+., ctrl+p to offer a list of packages that can be searched/filtered to insert.\n3. A lightbulb in-context editor action for adding a package import.\nI am currently thinking that supporting both (1) and (2) will make sense, and that (3) is not needed once those are implemented.\nThoughts?\n. With the changes I just pushed to master, there are the following new features:\n- A Go: Add Import command in the palette, which provides a list of available packages in the current Go context to add to your imports section.\n- A \"light-bulb\"/QuickFix that appears when there is an error about an undefined identifier and that identifier is an available package - offering to add the import for you.\nSo I ended up doing (1), (2) and (3) from the earlier list.\nNote that there is not yet a built-in keybinding for this command, but you can add one yourself.\n\n. This is now in the 0.6.18 release.\n. This should be fixed in the 0.6.11 version of the plugin.\n. @ulrichSchreiner Awesome! \n/cc @egamma for possible help with these two questions.\n1. I don't think there is a command line flag, but you can modify storage.json along the lines of these instructions and set the autoSaveDelay property to 1000.\n2. I don't think so.  You can perhaps workaround this by git cloneing into ~/.vscode/extensions this repo and then running npm install in the cloned folder.\n. @ahmetalpbalkan - It looks like you aren't actually getting completion lists from vscode-go at all here.  The icon with abc in it means you are seeing default results from VS code (just a list of words that appear anywhere in the text of the current file).\nYou should be seeing results with icons like these instead:\n\n@newhook Actually, as you can see in the screenshot above, vscode-go will show case0insensetive match results.\n. @ahmetalpbalkan I've closed this issue, but I'd still like to understand why you aren't seeing completion lists from vscode-go in your case.  Do you ever see results like in my screenshot, even in a simple standalone file?  What version of the extension do you have? \ngrep 'version' ~/.vscode/extensions/lukehoban.Go/package.json\n. @ahmetalpbalkan BTW - the original issue you were seeing here, where you apparently weren't getting completion lists from vscode-go, was just fixed with #77, and that fix is in the 0.6.13 update.\n. This is a Code feature which is not yet enabled in the Go plugin.\nThe interface that needs to be implemented is this one:\n``` TypeScript\n    /*\n     * The workspace symbol provider interface defines the contract between extensions and\n     * the symbol search-feature.\n     /\n    export interface WorkspaceSymbolProvider {\n    /**\n     * Project-wide search for a symbol matching the given query string. It is up to the provider\n     * how to search given the query string, like substring, indexOf etc.\n     *\n     * @param query A non-empty query string.\n     * @param token A cancellation token.\n     * @return An array of document highlights or a thenable that resolves to such. The lack of a result can be\n     * signaled by returning `undefined`, `null`, or an empty array.\n     */\n    provideWorkspaceSymbols(query: string, token: CancellationToken): SymbolInformation[] | Thenable<SymbolInformation[]>;\n}\n\n```\nI'm sure that one of the Go tools can provide the information needed for this.\n. @shesuyo Yes - the @main syntax uses the DocumentSymbolProivder which finds symbols in the currently active document.  The WorkspaceSymbolProvider would make it possible to search symbols across the entire workspace.\n. @newhook Great!\n. From @Totoajax on November 20, 2015 17:52\nI tracked it down, and found that it's the plugin handler or something. I could close it from activation control. I forgot what it was called. But now it works perfectly (But I guess the plugins won't work)\n. From @Totoajax on November 20, 2015 18:20\nIt's called \"electron helper\" and takes 99% of CPU usage\n. From @bpasero on November 20, 2015 20:51\n@Totoajax what extensions do you have installed?\n. From @Totoajax on November 20, 2015 22:10\n@bpasero Go and bookmarks. I'm gonna try remove them and see if it works\n. @Totoajax Did removing these extensions fix the issue?  If so, did you get a chance to identify which extension was causing the issue?\n. From @Totoajax on November 22, 2015 1:20\n@lukehoban I've now worked with vs code for a long time after removing the extensions. And it works perfect! The extension that made the fan go crazy was Go. I installed bookmarks after the first sounds came. BUT I haven't tried to run only with bookmark, so I can't say there's not a problem with bookmarks\n. Okay - since this was caused by the Go extension I'll move it over to that repo to investigate further.\n. @Totoajax A few follow-up questions in case you have the info:\n1. What OS were you on?\n2. Were you working with .go files, or did you see this even in VS Code sessions when you didn't open any .go files?\n3. If you were working with .go files, is the project you were working on something you can provide a pointer to?\n. Closing for now instead of moving back again, but if you find more info to help narrow down what's happening feel free to reopen the original issue in the vscode repo.\n. Closing this in favor of #115.\n. Thanks!\nGenerally this looks like a good start.  I'm open to moving the error checking over to this approach if we can get this as complete as the current solution.\nFew things:\nI'm seeing the flymake_* files being emitted next to the real source files.\nWhen I make edits in _test.go files, I stop seeing any errors either in the _test.go file or in any of the other files (even ones that were displaying errors previously).\nWhen I tried this on the github.com/derekparker/delve codebase (modifying the proc/prog.go file), I don't see any errors being reported but see this on stdout of the goflymake command:\n__cgo_d5684f8859a6_Cfunc_raise_exception in proc_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_raise_exception)\n  \"_read_memory\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_read_memory in threads_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_read_memory)\n  \"_resume_thread\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_resume_thread in threads_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_resume_thread)\n  \"_set_pc\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_set_pc in registers_darwin_amd64.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_set_pc)\n  \"_set_registers\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_set_registers in registers_darwin_amd64.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_set_registers)\n  \"_single_step\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_single_step in threads_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_single_step)\n  \"_thread_blocked\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_thread_blocked in threads_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_thread_blocked)\n  \"_thread_count\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_thread_count in proc_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_thread_count)\n  \"_write_memory\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_write_memory in threads_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_write_memory)\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\nAre you aware of any other limitations or differences in behaviour in terms of when real errors will/wont be displayed after this change?\n. Per https://github.com/Microsoft/vscode-go/issues/31#issuecomment-159697233 I'm going to close out the PR for now.  Feel free to reopen if you want to keep working on this.\n. Fixed with #65.\n. @florian This should be fixed with a few changes over the last few days (see also #10, #19, #54).  \nCan you make sure you have the latest version of vscode-go installed (0.6.11)?\nIf you do - could you provide:\n1. Your go env\n2. The result of executing Go: Get current GOPATH in VS Code\n3. Anything else notable about your environment\n. Yes - one or both of these does seem necessary to make the debug console usable.\n. This issue was moved to Microsoft/vscode#503\n. @coussej Thanks.  \nDo you have the latest version of vscode-go by chance (0.6.11)?  There should have been fixes for a few debugging issues, including displaying more information about what the debugger is doing in the debug console.\nIf you do, and still have issues, could you add more details along the lines of what is described in https://github.com/Microsoft/vscode-go/issues/51#issuecomment-158703417, and reopen this issue?\n. Closing this one out, preferring @ironcladlou's work on this.\n. Yeah - this is #16.  Pretty sure it's a bug in VS Code per the notes there and in https://github.com/Microsoft/vscode/issues/144. \n. Fixed with #72.\n. Agreed - I merged this as it net makes things better.  It seems the result should be that the \"rename\" operation is technically never completing (in both error and success cases).\n. Do you have the latest version of the Go extension installed?  There were some fixes to this since the initial release.  \nThere is also a fix in 13b73dc01a54d1ef48c83929119e191aa91cb2fb that is not yet in a released update of the extension, but I don't think that should impact your particular case.\n. Great! Thanks for looking at this.  Really excited about this.\nA few  initial thoughts from trying out the current code:\n1. Could you add a new configuration setting in package.json and put this feature behind a feature flag?  That will make it easier to merge early without risking the default editing experience.\n2. When I use this and then edit my source file I see it get out-of-date and then get stuck showing incorrect information.\n3. It will be interesting to discuss what lenses make sense for Go, and which to display where.  For example, I can imagine that implements I can imagine it may make sense to show all the implementors of an interface on the interface itself, and the interfaces implemented by a struct on the struct, but may not make sense to put all of the interface method information at the method level.  But it will be interesting to see what info is available and then make some decisions on this.\n4. Do you have a list in mind of the Oracle features you'd like to show in CodeLens?\n. > One side effect of this change is all sorts of additional empty lines in the editor before type defintions. Is there anything that can be done about that?\nI don't think we'll want to turn this feature on until there is useful information in the CodeLens display for every top level declaration.  At that point, there shouldn't be any empty lines, but there will be decorations on each declaration.\nHere's what it looks like for C# currently in Code.  I think the \"references\" provider is one we'd ideally want to add early as it applies meaningfully to every declaration (and we have the find-all-reference feature that can be triggered when clicking it).  I am not sure though whether finding references is fast enough to use in this context.\n\n. @tecbot While I sort of agree about this being a failure of Code itself, I actually think that it makes sense to focus on providing information that will make sense to display on all declarations.  If we are going to show CodeLens at all, it makes sense for it to be consisentnly applied on all declarations and to show generally useful information.\nI'm honestly still not sure what set of things from Oracle will make sense to display in this sort of UX vs. in a more on-demand UX like Pythia.\n. @newhook Yeah - that's unfortunate.  Sounds like that may be too slow to use in this particular UX.  We could still think about some other UX for exposing this command?  \nI'm also still generally curious on what other things make sense to show in the CodeLens UX.\n. To be clear, I'd love to try it out and see what it feels like to put these things in CodeLens.  If they can work there, the UX is a really nice way to provide this info in context.  \nIf we decide they don't work there, we'd have to go with a command accessible through the palette and keybindings (and possibly context menu if that's possible yet?).\n. Aha!  I don't think this is a correct fix, but I think it points at a root cause of a problem several others have seen.\nThe file in question has a unicode character early on:\ngo\n// Copyright \u00a9 2016 Alan A. A. Donovan & Brian W. Kernighan.\n// License: https://creativecommons.org/licenses/by-nc-sa/4.0/\nI think the problem is that we are not passing the c prefix to gocode per this: https://github.com/nsf/gocode/issues/52#issuecomment-1992781.\n. Could you try changing this:\nvar p = cp.execFile(gocode, [\"-f=json\", \"autocomplete\", filename, \"\" + offset], {}, (err, stdout, stderr) => {\nto this:\nvar p = cp.execFile(gocode, [\"-f=json\", \"autocomplete\", filename, \"c\" + offset], {}, (err, stdout, stderr) => {\ninstead?  If that works, can you update the PR to use that change instead?\n. @holmeszyx @Reposkeeper Thanks for this.  Pretty sure this was fixed with https://github.com/Microsoft/vscode-go/issues/77.  I just pushed an update to vscode-go to 0.6.13 with this fix.  Could you try upgrading, and if you still see this issue, please reactivate.\n. Thanks @JohnSmithX.   I've pushed additional fixes for this with some of the other features.  Hover, goto-definition, rename, and find-references apparently all had a similar problem but should now be fixed.\nSee https://github.com/Microsoft/vscode-go/commit/328ef9ea5223e682dac36653494939d9694f78eb.\n. @coussej Yeah, as @poids mentioned, you should be seeing information coming back to the debug console if you are using the most recent update to the vscode-go extension.\nIf with the latest you still aren't seeing anything, can I ask you to try something a little more complicated to debug this?  \nIf you follow the instructions here you can debug the debugger.  It's a bit of work to set up, but once you do you can step through the code in https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts to see where things are failing.  In particular the code around line 107 is where things would likely be going wrong.\n. Thanks @coussej - I think that identified at least one issue here - which I've fixed with 315722bdf4eb205b77a350e33ab5aac5f3b61125.\nI've published 0.6.14 with that fix - could you try it out and see if it fixes your problem?\nI believe there is still an underlying issue where the GOPATH env var is not being passed into the process that is running the debugger.  That may be an underlying Code issue, still trying to track that down.\n. @coussej I'm going to close this out for now - but if you can get any more info I'd love to look into this further.\n. Thanks @coussej.  If you do get any more info on the issue with locals not showing up, could you report it here: https://github.com/Microsoft/vscode-go/issues/101.\n. @egamma Look's like the vscode-extension-samples is still private - not sure if that is intentional or not?\n@tecbot See setDecorations for part of the API for working with decorations.  There's also an extension doing some code coverage rendering here: https://github.com/bmeck/vscode-code-cover/blob/master/lib/ui.js\n. Looks like this issue didn't get closed after #143 was merged.  I believe everything that was part of the ask here is available now.\n. Yes - I think this is the same issue as https://github.com/Microsoft/vscode-go/issues/13, which I have reported as a feature request on gorename here: https://github.com/golang/go/issues/13355.  \nAnything more you think we can do independent of those two issues?\n. Yes - I agree.  There's two solutions:\n1. Basically require AutoSave to be on to get a good experience, and force saves of active buffer before running commands (like rename does in the current implementation) to ensure that the source of truth on disk is maintained.\n2. Rebuild the Go tooling ecosystem around a model where a language-server can process document change notifications from a tool's in-memory edits, and then operate over this in-memory representation.  For example the TypeScript experience in Code is based off of https://github.com/Microsoft/TypeScript/tree/master/src/server which also powers the Sublime Text TypeScript support.\nI've so far focused on (1) as it allows building on the existing Go tools ecosystem.  I fear that (2) means taking on largely rebuilding the ecosystem of Go tools around a new model.  That may be necessary eventually for truly great IDE-like tooling around Go.\n. BTW - I just created a gitter chatroom for this repo (link in the README).  This discussion might be a good one to move there since it is cross-cutting.\n. I believe the IntelliJ plugin does indeed reimplement the language analysis itself in Java.  The code is here though I haven't looked closely at their approach: https://github.com/go-lang-plugin-org/go-lang-idea-plugin.\n. Closing this for now - I think the work to be done here is tracked in other existing issues.\n. This issue was moved to Microsoft/vscode#557\n. This is the same as #14.  Working on a fix for that.\n. This looks like it's going to be a bug in Delve.\nCan you try running dlv debug in the package directory?  Then enter continue.  If you see the same error you showed above, we can move this over to http://github.com/derekparker/delve.\n. Delve's issue tracker is here: https://github.com/derekparker/delve/issues.  I'm not sure if @murz opened a bug there on this specific issue yet.  If you are seeing any crashes like the above during debugging, and you can reproduce them using the command line dlv debugger, then you can report them to the Delve project.  \nIf in doubt though, feel free to report debugging problems here with repro steps.\n. This binary is generated by Delve.  But if Delve shuts down cleanly it gets removed on shutdown.  It looks like we aren't correctly shutting down the debug session with Delve.\n. Yep - it's expected that this is currently 100% reproable.  There's a missing call to Delve's Detach when the Code debugger detaches/stops debugging.\n. Turns out this is an issue in Delve on Windows, being tracked here: https://github.com/derekparker/delve/issues/398.\n. The bits and pieces for this are available in the various Go tools, but I'm not sure there's one tool that does everything needed here yet.\nThe go-outline utility is a simple wrapper over go/ast to enumerate the top level definitions in a source file, including the start and end positions of each definition.  \ngodef returns the file name and line number of the definition, so you could in principle pass that file into go-outline then do a search through the start/end pairs for one that encloses the definition position.\nOne downside is that now hovering over identifiers requires two separate process invocations that must be executed serially.  That may be acceptable.\nAnother alternative would be to find or create a replacement for godef which provides more of this information automatically. Generally I'm not super happy with godef as a dependency since there doesn't appear to be any active work on it.  But I'm not sure there is any sufficiently good replacement.\n. Not opposed to that.  Ideally could contribute the fixes back to godef.\nI do wonder whether there is an alternative to godef that uses the built-in go/ast, go/parser, etc. instead of the custom code in github.com/rogpeppe/godef.  There's so much code in that repo that it's hard to trust that it's up to date with the language.  I feel like https://github.com/rogpeppe/godef/blob/master/godef.go could be reimplemented targeting the built-in Go AST instead for a much more targetted implementation of definition search.  But haven't had a chance to look into this more myself yet.\nI've also been meaning to look at whether oracle describe serves the purpose here well enough to be a replacement.\n. @srinathh The gogetdoc tool looks like it could be a good fit - unfortunately it appears to depend on Go 1.6.  I'm not sure how to gracefully handle that in the vscode-go prereqs given the current state of things.\n. @srinathh You could take a look at integrating gogetdoc instead of the godoc usage in https://github.com/Microsoft/vscode-go/blob/master/src/goDeclaration.ts#L59.  It would also need to be added as a dependency here (and in docs): https://github.com/Microsoft/vscode-go/blob/ebce6f5c3c8d7dda94294e9f46517bbb8608d5ab/src/goInstallTools.ts#L38.\nHowever, I don't think it's okay yet to require users of vscode-go to have Go 1.6.  So there would need to be graceful fallbacks to other options both at acquisition time and when using features powered by this.  \nThat said, it might be okay to only include documentation in hover tips, completion lists and signature help when using Go1.6 though.\n. Just pushed an 0.6.43 release which includes this change.\n. @zmb3 I'd love to see a PR for integrating gogetdoc if you or anyone else is interested.  There are two limitations with the currently merged feature (1) only works for standard library (2) only works for functions.  It would be great to expand on both of those.\n. Good question - I don't know what the \"best\" solution is here within Code.  + @egamma in case he has suggestions.\nI think the simple initial thing would just be to report the results in the 'Go' output channel.  Like in https://github.com/Microsoft/vscode-go/blob/master/src/goInstallTools.ts#L66-L78.  \nYou could also/instead use a gutter decoration on the line where the test is defined with hoverText that provides the results?\nI agree that diagnostics API is probably not appropriate for test results.\nAs a starting point, something which renders to the output channel is probably a good starting point and we can improve the UX from there.\n. Great to hear!\n. The PR that was just merged implements just bullet 2 in @egamma's list.\nI think once we add more test commands, like Go: Run tests in current package and Go: Run tests in workspace, then it will make sense to add the status bar and gutter information as well (since then there will be multiple test results being displayed).\n. Curious - do you want \"all tests in a file\" or \"all tests in a package\" or both?\n. This should be fixed with the 0.6.15 update.\n. Many of the tools that the extension depends on must be acquired separately from the Go installer, so I'm not sure it helps much to default to a less-rich formatter just to avoid needing to run the tools installs.\n. The actual \"offer\" is the green bar in the bottom right that says \"Analysis Tools Missing\".  Clicking that will pop up an offer to install all the missing tools at once.\n. Thanks.\n. Fixed this with the changes in https://github.com/Microsoft/vscode-go/commit/9e6f5369bde370a5499435bf466f29a352c46bda instead. \n. This is caused when the position is at the end of a file on an empty line.  \nLooks like there are several error cases here that are not being handled well yet.\n. @zsxawerdu Checking in on whether you still expect to do more work on this?  If not, I'll likely look at this myself in the next couple days.\n. I took another look at this, and ended up reworking the changes in https://github.com/Microsoft/vscode-go/tree/feature/sighelp.  \nHowever, in looking at that, I am more firmly of the belief that we'll need to build a tool in Go to really parse the AST surrounding the call to make sure we accurately determine which function is being called and where we are in the parameter list.  It just won't be robust enough to try to approximate the lexing and parsing of Go in the TypeScript side of the extension.\nSo I think this requires a more complex solution.  I'm going to close out this PR since I don't think we'll be able to pursue this solution.  But I'm also going to hold off on opening a PR from the branch until we have (or create) a Go tool for doing the signature help analysis.\n. @maciekmm Are you running the latest version of the Go plugin?  This issue should have been fixed with https://github.com/Microsoft/vscode-go/issues/29.  If you are running latest, could you reopen with any additional details?\n. @ahmetalpbalkan Do you still see this consistently?  Can you share what project you are working in and what you see when you follow the steps in https://github.com/Microsoft/vscode-go/issues/51#issuecomment-158703417 and https://github.com/Microsoft/vscode-go/issues/51#issuecomment-158854899.\n. My current plan is to:\n1. In the short term, do a targeted fix to turn off Go suggestions inside // comments.\n2. In the medium term, use whatever mechanism Code provides to suppress suggestions inside certain tokens/scopes once https://github.com/Microsoft/vscode/issues/719 is addressed.\nNeither of these will suppress the \"textual completions\" that @egamma mentions.  I don't think there's anything we can do about those and it's just part of how Code behaves today.  Perhaps in the future there will be a user visible option to turn this off.\n. Per my previous comment - the Go specific piece of this is indeed fixed (at least for comments).\nBut textual completions cannot currently be disabled in vscode, and I expect this is what you are seeing.\nI believe this is being tracked by https://github.com/Microsoft/vscode/issues/2496 and https://github.com/Microsoft/vscode/issues/719, it would be worth providing feedback there on the concern with this design/default.  \nIf there is support for disabling this, I expect to turn it off by default as part of the vscode-go extension.\n. The \"format\" command will run whichever of gofmt, goimports or goreturns you choose via go.formatTool settings.  These build on one another so goimports does everything gofmt does plus more and goreturns does everything goimports does plus more.  \nFor what you want here, you want at least goimports which will automatically add/remove imports as needed by your code.\nOut of the box, assuming you've installed all the tools (see this comment), running Format Document should fix up imports for you.\nhttps://github.com/Microsoft/vscode-go/issues/14 is tracking adding an option to enabled format-on-save so that you don't even need to do a separate action to get formatting + imports fixup.\nGiven all that, I'm not sure there's anything additional to address here.  If you think there is something beyond what's tracked in those other issues though feel free to reopen.\n. have you updated to the latest version of vscode-go?  There was a fix for an issue like this a few days ago. \n. I can't see any obvious way this could happen with the current implementation.  If you can get this to happen again, a screenshot, the error message in question, and any file contents you can share would help track it down.\nClosing for now until there is more details to help track this down.\n. @deathly809 I spent some more time trying to identify the root cause here but I can't find anything and haven't been able to repro in your codebase.  \nTwo questions:\n1. I see you have build/test tasks set up in Code.  Is it possible these errors are coming from those tasks somehow?  I don't think they should, but that would at least provide an explanation.\n2. You are working in test files as well as non-test files.  Do you know if when these issues happen, there is any correlation with hitting save inside a _test.go file?  The logic for doing type-checking is slightly different in that case, so that may provide a hint at where the problem is.\nAnd of course, if you come up with any steps that can repro this consistently from a fresh Code session, that would be really helpful. \n. Meta comment:  You should be seeing a green \"Analysis Tools Missing\" in the bottom right of your screen.  Clicking that will offer to install all the necessary tools for you.  I'll see if I can make this clearer in the README (it's there already near the bottom, but could be more prominent).\nBeyond that, I'm going to treat this as a dupe of #102.  If we offer'd to install tools on a one off basis here (maybe even with an \"Install\" and \"Install All\" option), that is probably the best way to address this.\n. The plugin doesn't yet have any support for format-on-save (see #14).  So unless you are doing an explicit Format Document, I expect that is not what's causing the problem.\nIf you fully quit out of Code, then reopen, can you pinpoint exactly when you see this error?  Do you see it if you haven't yet opened any .go files?  Do you see it only when you hover over a Go identifier?  Do you see it when you hit save?\n. One more note - did you intentionally change the font in the editor?  That font (non-fixed width) is often an indication that Code is not initializing correctly.\n. Closing this out for now, as there's no current action we can take.  Please reopen if more details are available to help pin this down.\n. Do you have the latest version of the Go extension installed?\n. @timeloveboy Could you confirm that you have updated the vscode-go plugin to the latest version?  Extensions: Install Extension and make sure that if there is a cloud+arrow icon there to download it you have clicked that?  If you are up to date you should see an X icon instead of the cloud.  The current version if 0.6.15.\n. Good to hear. Closing this out now as I expect that was the same for @henjue. \n. Thanks @ivoviz.  \nThis does appear to be arguably a bug in goimports.  I think you'll need to report this over at https://github.com/golang/go.\nI see a few bugs over there that are still active that are likely related, including https://github.com/golang/go/issues/9197.\nI'm going to close the issue out here since we are relying on the existing Go tools for this so we have to accept their behaviour.\n. @klauspost Could you give a pointer to a codebase I could try to repro the problem?\n. I just tried turning this on, and when I work in the Delve codebase, completion lists start taking several seconds to show up.  I think that makes this a non-starter as the default setting.\nI could add a note in the README, but given the slowdown not sure it makes sense to encourage folks to turn this on.\nAlso, won't the user still see errors from compile-on-save if they haven't built the dependencies?  I'm still a bit unclear on what the real-world setup looks like where this is a problem that just adding 'autobuild true' fixes in a meaningful way.\n. Two thoughts while looking at this - I don't think either need changes in the PR, but things to think about:\n1. For performance reasons, it seems likely that if we could rely on gofmt -d to produce the diff, then parse and process that instead of recomputing the diff from full source code, we might be avoiding duplicating work that is already happening inside gofmt.  It looks like perhaps diff_match_patch can do this for us?  I'm not 100% sure that rendering+parsing the patch file is  faster than recomputing the diff though, so not sure this will be a win or not - and haven't seen perf-sensitive cases with formatting yet.\n2. I had hoped that providing the individual TextEdits would have let Code preserve the cursor position correctly.  It looks like it doesn't.  I've opened https://github.com/Microsoft/vscode/issues/755 to see if that's intentional or not.  Especially for when we have format-on-save, it will be critical to leave the cursor in the correct location.\n. Got it - that makes sense then to do the processing in the extension.\n. I did I noticed at least one regression where files with spaces instead of tabs at the beginning of any line cause no formatting to be applied at all.\nI'm pretty sure this is another bug in Code's processing of TextEdit's (see https://github.com/Microsoft/vscode/issues/761). But we may need to figure out how to workaround it before doing a release with these updates.\n. Yeah - it looks like one thing that might work is when there is a delete followed by an insert where the end range of the delete is the same as the start range of the insert, replace the original delete with a replace instead of adding the insert following the delete.\nA quick test showed that working.\n. Yes - it's easy enough to compute. The slight challenge may be in correctly moving the cursor.  The formatting API is passed a Document not a TextEditor. Could probably just cheat a little and use vscode.window.activeEditor at least until/unless this is fixed in Code. \n. @newhook I hit one more regression from this, which I fixed with 44601a58b3075d5bd22a14354d8cffb75baf573e.  Can you check that to make sure the change makes sense?\nHere's the repro case:\n``` go\npackage main\nimport (\n    \"net/http\"\n)\nfunc main() {\n    http.ListenAndServe(\":8080\", http.FileServer(http.Dir(\"/usr/share/doc\")))\n}\n```\nThe \"new/http\" line has four space in front and two trailing spaces.  Previously it would be changed to \\t\"net/hp\" because the delete at the end of the line was not tracking it's location correctly after the replace earlier on the same line.\n. Great - thanks!\n. Inexpert automatic wrapping for comments would be unexpected as a default, and feels a bit orthogonal to Go language support. \nA wrap text command could make sense as an extension at least, and perhaps worth suggesting as a built-in for Code. \nDo you see a reason to think about this as a Go-specific thing?\n. Closing this, as I don't expect we'll add anything Go specific for this.  You could reopen a request in http://github.com/Microsoft/vscode for adding it to VS Code itself (or just implement as an extension!).  \nTotally agreed that this would be nice to have.\n. Thanks @ironcladlou!  Just did a final review and pulled these changes in.\nI made a couple of updates on top of your changes in 36dbc1d92770dca55c2efc88ea13ef2359cd827a.  Let me know if there's anything there that you don't like form a workflow perspective.  (In particular, opening test results to the right by default?  Code tends to do that in many other cases, but it's not for everyone).\nDo you plan to add a similar Go: Run tests in current package and Go: Run tests in workspace that run all tests in the package where the active document lives and in all packages underneath the current workspace respectively? \n. Do you have an environment where go is installed in your GOPATH?  I didn't know that was possible.  My understanding was that go had to live in GOROOT/bin.\nDo you not have the go binary in your shared PATH?\n. Got it.\nHow does the fix you suggested earlier help with this then?\nOr even more basically - if Code is running without any environment variables indicating where to find go, how are thinking of locating it?\nEdit:  I guess perhaps you are relying on go.gopath setting.  But using that to find go won't help because your go binary isn't in your GOPATH/bin, right?  Perhaps what you need in your scenario is a go.goroot setting in Code?\n. The current getBinPath doesn't do a recursive search, but even if it did I don't think it would typically find the go binary inside GOPATH. \nI think we should go ahead and add a new configuration option to override the GOROOT. \n. I almost made a change to do this, but then decided not to for now.\nThere's three things that could make sense:\n1. Build when a new file is opened\n2. Build when the active document in the editor changes\n3. Build when Code initially opens with a .go file showing\nI did make a change to do (3).  \nFor the first two, the one downside is that the previous set of errors gets cleared out when a new build is triggered.  Currently, that doesn't cause many issues, because it's only when an edit is actually made and a save triggered that build results update, which is infrequently enough and based on when there are changes that may necessitate a new error check.\nIf builds get triggered on opening a file, that means that something like go to defintion into library code will clear out the currently reported errors.  And if it's only on opening a new file, errors won't come back when you navigate back (until you edit/save).\nThe alternative would be to re-build whenever the active editor changes.  The build errors would change quite a lot, but at least the results would always (up to some slight delay) be up to date with the current file open in the editor.\nThoughts?\n. That's an interesting idea. The challenge is making sure that errors are eventually removed. But j think if they get associated with the package and removed whenever that packages errors are updated that could well work. \nI'll look into that option. \n. Here's one problem.\n1. Make a change in a.go which causes an error in b.go (change the name of a declared function).\n2. The error is reported against b.go.\n3. Now undo the change in a.go.\nThe user wants the error to go away.  As far as I can tell, there is no way to ensure that happens without clearing out all the errors reported by the Go extension before computing and displaying the new errors, since there is no way to know which ones were caused by this file's compile.\n. That's a good point. \nAnd the way that we currently compute errors when saving a file is to do a build in it's package, so we don't produce errors for consumers in other packages anyway.\nSo maybe we can still do better than we do today on this.\n. Thanks for catching this!\n. @pilwon. Just checking:\n1. Do you have AutoSave turned on?\n2. Do you have \"go.formatOnSave\" turned on?\n. I spent some time trying to reproduce this, but haven't been able to yet.\nCan you give any more details on what file you were working in when you saw this?  goreturns should never take more than 100s of milliseconds, and should only be spawned on save with a dirty buffer.  I'm not sure what could cause a lot of them to get spawned.\nIt could be that something about your file is causing goreturns to take an extremely long time - that would likely be a bug in goreturns but would be interesting to try to pinpoint it.\n. Closing for now - please reopen if you have any additional details you can share.\n. Thanks @kylebrandt.  For now I've mentioned this flag in the README with false as the default since that's still what's in the current releases.  \nI'll add more text on the two modes of use instead of the current suggestion about AutoSave soon to make it even more clear how to set up for format-on-save.\n. Thanks - this looked good - just added a little additional promise error propagation code.\n. This is because you haven't opened any .go files and Code doesn't activate extensions until the filetype they apply to has been opened.  \nIf you open a .go file and then rerun, it should work.\nThere's no real way to fix this properly in the Go extension - something will have to be done in Code itself to address https://github.com/Microsoft/vscode/issues/810.\n. I've tried reproducing this on several machines (including a Linux box since it seems that's what you are working on), but can't get this to happen.\nNote that you should be seeing an additional diagnostic line in the debug console debugger.go:174: created breakpoint....  \nCould you share:\n1. Your launch.json\n2. Your folder layout for this code\n3. Whether you have the latest dlv\n4. Anything else you think might be notable about your environment?\nAnd in case you want to diagnose the issue yourself - could you follow the instructions here to debug the debugger.  It's a bit of work to set up, but once you do you can step through the code in https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts to see where things are failing.  In particular the code around line 257 is where breakpoints should be set up.\n. I looked into this a bit more, and I think there is indeed a race condition here, and that for some reason on Linux it is much more common for that race to cause the Continue to happen before the SetBreakpoints meaning that the process runs to completion before the debugger asks to set the breakpoints.  \nWe should be able to fix this.\n. With https://github.com/Microsoft/vscode-go/commit/b4dbda4a6b3893c4e3d4d45012570e66534e385e, I believe this should be fixed.  \nVersion 0.6.19 has this change, so you can update and verify whether it is fixed for you.\n. Sorry about that.\nI pushed up a change to fix the regression that @ulrichSchreiner mentions.  \nI also looked deeper into what's going on with Delve on Linux, and I'm pretty sure there is some subtle bug in Delve on Linux that is the root cause of this.  \nSometimes, and possibly more often if it's soon after launching the debugger, an RPC call to Delve's CreateBreakpoint API is returning an array with nulls in it.  I haven't been able to pin down a concrete repro case outside of vscode yet - I need to investigate this more on the Delve side.\nReopening for now, as this is definitely not fixed.\n. I believe this should be fixed (or at least largely mitigated) by https://github.com/Microsoft/vscode-go/commit/69f781534b766f871a6246eaa61c879176696b56.  On my Linux machine I am no longer seeing the failure to hit breakpoints anymore with that change.\nI've also added support for stopOnEntry with https://github.com/Microsoft/vscode-go/commit/16a4f4f306f201e5dbb809c655e44b8a77af7de1, so if all else fails you can turn that on to ensure that the debugger will pause and give you a chance to set breakpoints before running any code.\n. This should be possible already by using a .vscode/settings.json file in your workspace (the root folder that you will open in Code) and setting \"go.gopath\": \"/Users/lukeh/go\".\nThat seems to handle the same cases as the GoSublime feature you linked.\nSee https://github.com/Microsoft/vscode-go#options.\n. Format-on-save is currently off by default while we get more usage experience.  You can turn it on by setting \"go.formatOnSave:: true in your settings.  \nSee https://github.com/Microsoft/vscode-go#options and https://github.com/Microsoft/vscode-go/issues/14#issuecomment-160328819.\n. The current way we plan on addressing this is https://github.com/Microsoft/vscode-go/issues/9.  \nThis is a different UX, but I think satisfies the same need (and arguably with more context.\nI'm inclined to focus on getting that added before considering also doing something like the UX proposed here.\n. This would be nice - but is something that would really have to be supported in gocode to make sense.  Looks like there's a feature request for this here: https://github.com/nsf/gocode/issues/257.\nFor now though, I've added a couple new features to support this per https://github.com/Microsoft/vscode-go/issues/53#issuecomment-163713326.  I think that should be sufficient for now.\n. This is blocked on https://github.com/Microsoft/vscode/issues/842.\n. This should be fixed by https://github.com/Microsoft/vscode/issues/842.\n. This is blocked on https://github.com/Microsoft/vscode/issues/843.\n. Yep - we need to run gocode set propose-builtins true once on launch to tell gocode to include builtins.\n. @ironcladlou Sorry for a long delay getting back to you.\nI think it does make sense to go ahead with adding a Go: Install command to the extension whcih behaves similarly to the existing Go: Run tests commands.  \nI think it's okay for this to be fully separate from the diagnostic reporting and build-on-save.\nThe one place they should overlap is in reusing the go.buildFlags settings.\nThe big question is how to scope this.  I can imagine either:\n1. Run go install ./...  in ${workspaceRoot}\n2. Run go install in the directory of the currently opened file\nFor advanced uses, I'm okay with saying that folks should use VS Code Tasks.  So I think this should try to cover the most common 80% for folks who don't want/need to set up the task.\nI think ultimately we want:\n- Go: Build\n- Go: Install\n- Go: Run\n- Go: Generate\nWhich will all follow a similar model to Go: Run tests * (I wonder if we should retitle those as Go: Test (current file), etc. to align with the naming pattern?).\n. @ironcladlou I left a comment here https://github.com/Microsoft/vscode-go/issues/21#issuecomment-200582995 about the env issue in tasks - it should be solvable.\n. > I notice that vscode ships with several out of the box matchers. Is there some way vscode-go can contribute a matcher which could then be referenced like  $go-install ? With such a reusable matcher, I think tasks work great for this (and probably many other) purposes.\n@egamma - Is this possible currently?  I recalling looking for a way to do this some time ago and not seeing anything.  If not, is it on the roadmap or something we should open a new tracking issue for on the vscode repo?\n. @ironcladlou Interested in opening a PR for adding this problem matcher to VS Code per @egamma's suggestion?  I believe the error format is close to or the same as GCC/Clang - I wonder if it can be generalized to be useful for those cases as well?  \nFWIW - the regex currently being used inside vscode-go to extract error messages from all of go build golint and go tool vet is this:\njavascript\nlet match = /^([^:]*: )?((.:)?[^:]*):(\\d+)(:(\\d+))?: (.*)$/.exec(lines[i]);\nif (!match) continue;\nlet [_, __, file, ___, lineStr, ____, charStr, msg] = match;\n. The current plan is that this will be addressed with #9.  See also #128. \n. I think this is the same as https://github.com/Microsoft/vscode-go/issues/18?\n. Are you sure this isn't fixed with https://github.com/Microsoft/vscode-go/commit/4b2e99e5264f2268e231c48e64eb277fb21b9195#diff-9b6a4d5d6f38dfa535b1641cadfd1a80R151?\n. Closing this for now, as I'm reasonably certain this is fixed in latest.  But please do reopen if you are still seeing the problem.\n. For your original issue, you can list multiple debug configurations in a single launch.json file, and then choose the specific target you want to debug differently in each window.  You may though run into the issue that you can't have multiple Code windows open on the same folder - so you'd have to do something where you open different subfolders in different Code instances (and perhaps put each ones launch.json local to that folder).\nOn the questions about attaching multiple debuggers in a single Code debugging session...\nThis may be theoretically possible, but I expect it's not simple.  Delve doesn't provide this ability itself, so we'd have to coordinate multiple attached Delve instances from the single UI.  But that UI doesn't provide a way of knowing how to map actions to the various debuggees (breakpoints in particular).\nBut it doesn't seem impossible, so I'll leave this active in case we're able to do it.\n. Here's an example that uses multiple launch targets in a single launch.json - this example is for a Node project, but same general thing will work for Go.\njson\n{\n    \"version\": \"0.1.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch Extension\",\n            \"type\": \"extensionHost\",\n            \"request\": \"launch\",\n            \"runtimeExecutable\": \"${execPath}\",\n            \"args\": [ \"--extensionDevelopmentPath=${workspaceRoot}\" ],\n            \"stopOnEntry\": false,\n            \"sourceMaps\": true,\n            \"outDir\": \"out\",\n            \"preLaunchTask\": \"npm\"\n        },\n        {\n            \"name\": \"Launch Tests\",\n            \"type\": \"extensionHost\",\n            \"request\": \"launch\",\n            \"runtimeExecutable\": \"${execPath}\",\n            \"args\": [\"--extensionDevelopmentPath=${workspaceRoot}\", \"--extensionTestsPath=${workspaceRoot}/out/test\", \"env.GOPATH\" ],\n            \"stopOnEntry\": false,\n            \"sourceMaps\": true,\n            \"outDir\": \"out\",\n            \"preLaunchTask\": \"npm\"\n        }\n    ]\n}\n. It sounds like you might be hitting https://github.com/Microsoft/vscode/issues/560.  Could you try quitting out of VS Code completely, then opening with code . from the folder you want to work in?  Then, what do you see from Go: Current GOPATH?\nEdit: Note that https://github.com/Microsoft/vscode/issues/560 is fixed, but has not yet been deployed in a VS Code update.\n. Okay - I can reproduce this now.  It seems that somehow the environment settings in ~/.bash_profile are being allowed to override those exported in the local terminal session.  If there is nothing set in ~/.bash_profile the local settings work fine, but if there is something in ~/.bash_profile, it wins out over anything defined locally.\nUnfortunately though, I have no idea how to fix it :-). I have to assume this is a bug with either vscode or the way that open works on OS X.\n. I've opened https://github.com/Microsoft/vscode/issues/1033 to understand the root cause here.\nYou can probably work around this by setting go.gopath in your settings file in .vscode/settings.json relative to the working folder of your project.  That should force the tools to use that instead of the setting inherited from the environment.\n. Closing this one out for now - since I don't think there's anything we can/should do in the Go extension beyond what we currently do with go.gopath to workaround this.  We'll just need to wait for the vscode issue to be fixed.\n. Sorry for the long delay on merging this.  Just re-reviewed and pulled this in.\n. Depends a bit on what experience you want exactly.  \nYou could try workspace.onDidChangeTextDocument which sends a notification when any open text document changes.\nBut do you think it makes sense to instead try to keep the coverage information around even after you make edits?\n. Finally got a chance to re-review this, and looks good.\nI've merged this in now along with a few minor changes.\nThanks @tampajohn, and apologies for the 4 month delay :smile:.\n. Yeah - I can't repro this either.  \n@alxzh - Could you reopen if you are still seeing this with any additional details?\n. I'm fairly certain this was fixed with f7a60c4adce567f96f60d3df8fd10568a6103b3a and/or 315722bdf4eb205b77a350e33ab5aac5f3b61125.  Could you upgrade to the latest vscode-go and verify?\n. Huh - I've tried this in a few contexts - and I can't reproduce this.  Do you have a file you can point me at where you see this?  Does it happen 100% of the time for you?   \nPlease re-open if you have any more details you can share.\n. Not necessarily a timeline - but this is being tracked in https://github.com/derekparker/delve/issues/198 and https://github.com/derekparker/delve/pull/276. \nTechnically, if you build Delve from that PR branch you should be able to use it with VS Code on Windows today.  But there is work still to complete and improve the Windows support for an experience that is on-par with the Linux and Mac support.\n. Yes - there is no notion of \"running\" without \"debugging\" in VS Code today.  \nIn principle, we could have an option on the Go debugger which launches using the launch.json configuration (args, env vars, etc.) but does not attach a debugger.  \nBut I'd be interested in what the general VS Code model for this should/could be.\n. This is great - thanks for starting it!  I'll start adding things here when questions come up that are useful to record but don't necessarily make sense directly in the README.\nIf you wan to open a PR to add a link to the wiki page into the README in an appropriate place - feel free to do that.  We can probably close this issue once we've done that?\n. How would this work exactly?  When would this suggestion happen, and with what UX?\nI can imagine that typing package would bring up a completion list with the suggested package name selected.  However, that would pretty much have to be implemented in https://github.com/nsf/gocode.\nI can't think of other great UX for this.\n. Got it.  \nUnfortunately, the built-in snippet mechanism in VS Code (which is what provides the func and pkg snippets currently) can't handle this because there is no way to provide a global snippet context for a file.  \nBut we can probably do a one-off addition to the GoCompletionItemProvider that is only added when you are in a file with no non-whitespace.\n. Looks good. \n. I'm going to close this out, as there isn't any work we'll do specifically in this extension to support this.\nThe textmate grammar and snippets for Go are in fact already being shared with VS in VS2015 Update 1, details are here: http://blogs.msdn.com/b/visualstudio/archive/2015/11/30/visual-studio-update-1-rtm.aspx.\nBut we will also continue to look at whether we can bring similar functionality as is available in the vscode-go extension to VS as well.\n. I think this is a dupe of #128. Which we plan to address via #9.  I'm hoping we'll be able to get that feature in fairly soon.\nNote that this is stylistically a little different than Sublime, but more inline with what Code does elsewhere.  My sense is that if we have #9 then it won't feel like there's a missing feature here.\nIf you think there's something beyond that that should be tracked though - feel free to reopen.\n. The Add Imports feature relies on running go list all with your active GOPATH to get the list of available packages.  Unfortunately, I'm not aware of any alternative option for this that would be faster.\nIf anyone has a suggestion on a faster technique for gathering the available packages though, please do reopen this.\n. @tpng Awesome.  Reopening this issue - let's try out incorporating gopkgs here.\n. This should be fixed by #178.  Thanks @zippoxer!\nI did notice that on my machine, gopkgs returns about half as many results as go list all.  A decent number of these appear to be cases where go list all includes a program (which can't be imported anyway), so that reduction seems positive.  But it looks like there are other cases where perhaps libraries are being left out that should be included?\n. Thanks @tpng.  That makes sense.  Seems reasonable to limit to those, and definitely the performance of gopkgs is significantly better.\n. Generally speaking, vendoring is up to each of the tools that vscode-go depends on to handle correctly.  For example go build does handle vendoring correctly, so error squiggles should handle environments that depend upon vendoring  (as long as you launch code from an environment with GO15VENDOREXPERIMENT=1 or running   Go 1.6).  \nHowever, it appears that godef does not support vendoring yet.  See https://github.com/rogpeppe/godef/pull/14 and https://github.com/rogpeppe/godef/issues/13.\nI don't think there is anything we can/should do in vscode-go right now for this though, so I'll go ahead and close this issue.\n. Thanks!\n. Hmm - yeah - it looks like the VS Code APIs are not reporting back the correct line ending information in all cases.  \nLet me see if I can get a concrete example of this to open an issue against https://github.com/Microsoft/vscode.\nThanks for tracking this down so far.\n. @rotemdan Thanks so much for the investigation!  What you describe matches what I thought I was seeing when I looked at this initially.  Specifically - after changing the line endings in VS Code UI, the offsets reported back from document.offsetAt appeared to be incorrect.  \nAs far as I can tell, the issue is purely on the VS Code side, and I'm not sure there's anything we can do to work around it reliably.  So I'll close this for now and leave https://github.com/Microsoft/vscode/issues/1580 active to track the issue.  If you think there's something we could do to work around this though - feel free to reactivate with the suggestion.\n. Interesting - I do see that failure when I have my cursor on the character immediately following the identifier.  But not when I have the cursor anywhere else before or in the identifier.  \nIs that what you are seeing as well?\nIf that is the issue, we may want to work around the gorename limitation and adjust the point at which we invoke rename to the beginning of the preceding token.\n. @variab1e Do you have the latest version of the extension installed?  There was an issue with this that I believe was fixed a few weeks ago.  I don't see any obvious problem with the handling of go.goroot in the current code.  Please reopen if you are still seeing this after updating though.\n. @dstpierre Thanks so much for investigating this, and sorry about the issue.  This should be fixed now with 28050d9268f1657f39ac4b0c285e0936e33a7a0c, but I wasn't able to reproduce the problem myself, even on Windows, to verify for sure that the fix you mention really does address this.  I've pushed 0.6.22 with this fix, so you could try that out and re-open if you are still seeing a problem here?\n. I like the idea of this.  I noticed that GoSublime has a similar feature.  \nIt should be possible to add this on top of the same \"smart snippets\" infrastructure that was added in f8508b40f80a3ce812201ba5eadc268225684b61.\n. I agree with @mafredi that it probably makes sense to focus on adding gometalinter support as a path to getting interfacer linting.  So closing this issue out for now.\n. Thanks @variab1e.\nCould you provide any additional details on your environment.  OS? How are you launching Code?  What does your go env look like?\n\n*only difference being vscode's requirement that the windows \\ be / and I do have the ~ fully expanded when being set *\n\nWhat did you mean by this part?\n. Sorry - the fix for this is in master, but I haven't pushed out an update of the extension yet to catch up with what's in master.  Coming soon...\n. 0.6.25 is published now which should have the fix for this.  Could you try that?\n. > Is there anything specific I can/should test to ensure the functionality is present as well?\nIf you introduce an error in your code and save the file, that should trigger a go build which will only work if your goroot is set correctly.   \nGenerally, you'll likely see a lot of failures in the tool if you have an illegal/incorrect go.goroot.\n. Seems like this is something that quite a few folks have been running into.  So I think we'll go ahead and force gocode set autobuild true when vscode-go initializes.\nThe gocode docs mention that this is experimental still, but I haven't seen or heard of cases where it causes problems.\n. @andy-zhangtao It looks like this PR now includes two features:\n1. A command to refresh GOPATH\n2. A command to run a Go Build\nFor the first, could you explain the scenario in which you would use this?  How would the new GOPATH be set and discovered during the refresh?\nFor the second, the existing way to accomplish this is with VSCode \"tasks\".  See https://github.com/Microsoft/vscode-go/wiki/Usage-FAQ#how-do-i-use-vs-codes-tasks-with-go.  That said, I think it will make sense to add a Go: Build and Go: Install commands.  There was some work on these here: https://github.com/Microsoft/vscode-go/pull/134.  I think there are still some design questions that should be answered on this.\nI'm going to close this particular PR out for now, but if you'd like to submit as a PR for one or the other of these, feel free to reopen or create anew.\n. The method Run has wrong number of ins: 1 actually just comes from passing --log to dlv.  I always see that being printed - it shouldn't be a blocking error.  (Of course, we should look into why).\nAs for the actual problem you are seeing - could you provide a code sample and details of whats going wrong?\n\nAlso note that the breakpoint only works once in a http handler, after continue the next same http request does nothing.\n\nI've certainly debugged examples of HTTP servers in Go where this is not the case - so I expect it's something specific to your particular code.\nCan you reopen with more details?\n. @ironcladlou Sorry for the delay on this.  I've pushed a fix which avoids invoking vscode.executeDocumentSymbolProvider at all, and just directly calls the GoDocumentSymbolProvider API.  Per @jrieken's comments in https://github.com/Microsoft/vscode/issues/769, I think this is the more correct behaviour anyway.\n. I think this is feedback on the PHP language support - not the Go support in this repo.  Did you intend to open this in http://github.com/Microsoft/vscode?\n. Could someone provide a code sample and complete repro steps for this?\nI tried on Windows on a few projects, and haven't seen this problem.\nNote that the info shown in the debug console is not actually a problem, this is just the info returned by the --log flag on Delve to make diagnostics easier.  We'll turn that off soon to avoid making the output ugly, but the results you see above are expected if everything is operating normally.\n. Thanks all.  \nMy guess is that folks who are seeing problems here are hitting the issue in https://github.com/derekparker/delve/pull/386.  If you build Delve from that PR branch, you could validate whether this is indeed the problem.\n. Great.  https://github.com/derekparker/delve/pull/386 has also now been merged into Delve master.  Closing this issue.\n. Thanks for doing this!\nFor consistency with the rest of VS Code, I do still think that it would be good to have Signature Help instead here.  That's the standard experience for Code, and is somewhat less invasive on the default typing experience (though as you say, has the negative that it covers some of the text with the pop-up).\nBut definitely there are different perspectives on this.  \nIf you'd like to add a config toggle, and enable this feature under that toggle, with the feature off-by-default for now, I'd be happy to merge this in.  Perhaps call the flag \"parameterSnippetCompletion\" or something similar\nIn parallel, I'll take another look at the Signature Help implementation.\n. I've opened a PR on true SignatureHelp support: #184.  It appears to be pretty much complete from my testing so far.\nBTW - you could consider naming the configuration option useCodeSnippetsOnMethodSuggest or useCodeSnippetsOnFunctionSuggest.  The former appears to be the named used by a very similar opt-in feature for TypeScript in VS Code: https://github.com/Microsoft/vscode/issues/297\n. Merged this in with a couple of additions in https://github.com/Microsoft/vscode-go/commit/c2ee598a2d681777e9e621e48b81d3a56b8c581c, including a fix for an edge case of parameter lists with nested commas.  \nThanks!\n. I think this is a dupe of https://github.com/Microsoft/vscode-go/issues/176, which is fixed in master.  I'll push an update to the extension soon with this fix.\n. > The default launch.json has \"version\": \"0.2.0\" and \"program\": \"${workspaceRoot}/.\" but so far, so good.\nFixed in ce0c60709bfdbad8501b8c65ea64d536aca4225d.\n\ncould not launch process: could not fork/exec\n\nThis error message normally means that you haven't signed your dlv binary.  See https://github.com/derekparker/delve/wiki/Building.\n\ncould not launch process: stat /Users/x/go/src/github.com/y/z/z.test: no such file or directory\n\nI haven't seen this before, but I'll bet it's also due to not having a signed binary.  I confirmed that \"mode\": \"test\" still works as expected in a few projects on my machine.\nAs for the unfortunate need to sign the dlv binary manually - I hope we can eventually take care of that - but it will require building and signing a dlv binary as part of the vscode-go project and deploying that dependency with the extension.  Several pieces of infrastructure needed before we'll be able to do that.  So for now we just document the installation requirements.\n. @mvpmvh How are you configuring the GOPATH?  Are you overriding it in your VS Code workspace settings \"go.gopath\"?  Or do you have it configured in the environment where you launched code from?\n. Right now, the debug console evals Go expressions, much like the JS Console windows in browser dev tools.  It is not a top level Delve REPL.\nThe design of Delve actually makes it a little challenging to provide a Delve REPL directly here, since the Delve backend RPC API knows nothing about the Delve REPL front-end.  \nWe may in the future be able to expose the Delve REPL directly here - potentially with some appropriate escape character prefix (!threads?).  But that likely will require some refactoring of Delve that I expect won't happen in the short term.\n. @asampal I can't repro this, but there's a couple of things which may be causing you too see it:\n- The crash you reported in Delve related to this code on Windows may have caused Delve to crash while vscode was trying to render the variables.  This would have happened at some stage where you broke on an earlier line in the file.\n- The vscode debugger appears to have a bug where if a debugAdapter ever fails to respond to a variable request, the Variables window will never get refreshed again until you close/reopen VS Code.\nIf you close your session, and debug the code above with just a breakpoint at the fmt.Println line (or with the fix for Delve), I expect you won't see this.\n. Version 0.6.26 is now available, which has a fix that should address this.\nIf you are still seeing any issues after upgrading, please reopen.\n. This definitely works in general.\n\nCould you provide more details on your environment?  Does your code build without errors?  Do you have an import \"fmt\" in the file you are trying this? \n. Hmm - I can't repro this myself under any conditions on my three machines.\nIf you put the following in $GPATH/src/test.go:\n``` go\npackage main\nimport \"fmt\"\nfunc main() {\n    _ = fmt.Errorf(\"hello\")\n}\n```\nWhat do you see when you run the following from GOPATH/src?\ngodef -t -i -f test.go -o 59 < test.go\nFor me, I get the following, which should not trigger the error condition folks are mentioning here.\nc:\\dd\\go\\src> godef -t -i -f test.go -o 59 < test.go\nC:\\Go\\src\\fmt\\print.go:211:6\nErrorf func(format string, a ...interface{}) error\nAlso, does the file mentioned in this result exist in your filesystem?  In my case on Windows above it was C:\\Go\\src\\fmt\\print.go.\n. Wow - yeah - that's a subtle issue.  \n\nI was using godef compiled with an old version of Go that is no longer installed, so it couldn't find the correct libraries. I wish it would have a better error message including the paths it searched. Thank you!\n\nIt's not at all clear to me how that could lead to a problem.  How can the compiled godef binary have any knowledge of the compile-time go installation embedded within it?  Anyway - sounds like the workaround works, which is good.\n. There's an opt-in feature that provides this behavior: \"go.useCodeSnippetsOnFunctionSuggest\": true.  See  https://github.com/microsoft/vscode-go#options.\nIt's off by default right now because it's non-standard for VS Code generally across other languages.\n/cc @egamma in case he has thoughts on the default completion/parameterhelp experience.\n. I think https://github.com/Microsoft/vscode/issues/2765 is tracking the potentially actionable piece of this, so I'll close this one out for now.\n. Yes - ideally we'll show the GoDoc information in QuickInfo and Completion as well.  Currently we only show it in SignatureHelp.  Should be fairly straightforward to integrate with these other features as well.\n. There weren't any Go-specific changes to colorization.\nAs @egamma mentioned, the default theme was changed in VS Code recently, which changed the default coloring for all languages.\nIn VS Code 0.10.8, there is a Dark (Visual Studio) theme which matches the old VS Code default.\n. Unfortunately I haven't been able to reproduce this.  The logic for looking up the godef binary (and others) should certainly be looking in your $GOPATH\\bin (see https://github.com/Microsoft/vscode-go/blob/master/src/goPath.ts#L16).  If you can provide more details about your environment we could look into this further - but going to close for now.\n. This was a change in the default themes for VS Code recently.  It is not related the Go plugin, or something that the Go plugin has any control over.\nYou should likely switch to the Dark + theme if you haven't already. Per https://code.visualstudio.com/Updates#_editor, it is now the default for new installations of VS Code.\n. Do you see any packages in the list at all?\nYou may need to have built the packages within the GOPATH before they will show up in the import list.\n. There is unfortunately nothing vscode-go can do about this.  It is a limitation of vscode itself.  \nFixing this (or enable extensions to fix it themselves) is being looked at in https://github.com/Microsoft/vscode/issues/1657 and is being tracked as part of the March iteration plan https://github.com/Microsoft/vscode/issues/3555.\n. This was fixed with #205.\n. Great - thanks.  FWIW - The Travis break was due to #208 which should now be fixed.\n. I believe this is fixed with https://github.com/Microsoft/vscode-go/commit/3583c0f68bc6f8ed01be8986e9db9780bc02a65c and in release 0.6.23.  See also #233.\n. Unfortunately, it looks like this is not fixed yet.  The issue that @danielalves mentioned is the same as #233, and that is fixed.  But the original issue from @whutlee appears to still be there.\n@weinand for help with this.\nThe issue only happens when there are unicode characters in the message being communicated back to the VS Code debugger.  It appears that these must be causing some character length computations to be off, which truncated the last few characters of the JSON before passing it to JSON.parse inside the VS Code debugger.\nHere's what I see from the VS Code side:\n\nNote how the string is truncated, and also has two leading newlines.  (the variable names are off here - e is actually the minified name assigned to body).\nWhat's weird though is that if I'm debugging my debugAdapter (\"debugServer\": 4711), then I don't see this failure (or at least, it's very rare).  Here's what it looks like on that stdout event when I'm debugging my debugAdapter:\n\n. Yeah - everything looks good up to that point.\nIn ProtocolServer.prototype._send I see:\n- json: \"{\"seq\":8,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"\u4e16\u754c\\n\"}}\"\n- data: \"Content-Length: 90\\r\\n\\r\\n{\"seq\":8,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"\u4e16\u754c\\n\"}}\"\nThese values appear to be correct all the way to the socket Socket.prototype._write when debugging the debugAdapter server.  I'm not sure how to test this in the non-server scenario though.\n. Okay - this is now fixed with https://github.com/Microsoft/vscode-go/commit/28fd411d9320e3254ee69bebb83802e8bf7c2b56.\nIt seems that console.warn calls from the Go debugAdapter are still showing up in the rawData in https://github.com/Microsoft/vscode/blob/33697437626f87331ed5ae950647b4a92a0375e3/src/vs/workbench/parts/debug/node/v8Protocol.ts#L125.  And then the code there is using idx as a byte offset even though it was computed as a string index.  So when the console.warn content has unicode chars, things get confused.\nI confirmed that the console.warn content is being sent to stderr when I do node goDebug.js --server=4711 2> out.txt.  So I'm not sure why it's still showing up here.\nSounds like it's safest to avoid any console logging at all in the debugAdpater by default.  But I'm still not sure what the real root problem is here.\n. @weinand Okay - looks like both stderr and stdout are being piped through to stdout when the debugAdapter is implemented in node by this: https://github.com/Microsoft/vscode/blob/a4f8a1657f57dc4a91242e0d294c29e97c8e2054/src/vs/workbench/parts/debug/node/rawDebugSession.ts#L235 and this: https://github.com/Microsoft/vscode/blob/d46c0646f239f04cefc3649bc998cb0c15993f4e/src/vs/base/node/stdForkStart.js#L50.  \nSo at least for now, it's not safe for a debugAdapter implemented in Node to write to stderr either.\n. I can't reproduce this myself.  Are you sure you have the latest Delve?  There were some relevant fixes in Delve in https://github.com/derekparker/delve/commit/cf3a07b584847e25aa95e8663c2d99cf5d9c7cd4 a few weeks ago.\n. This is fixed with ca4da81dfbcaba004d5c4bbe843ccf56d399e369.\n. I've gone ahead and removed the custom colorization that comes with vscode-go.  I agree that it's not obviously better, and it makes sense to focus on improving the colorization that comes built-in to vscode if improvements are needed, instead of having another different option as part of this extension.\nFixed in 62b294ba1d3ffd6e53c0514a0893b61dc0a22423. \n. I'm not sure I understand what the problem is.  You can just provide go.buildFlags along with \"mode\": \"test\", right?  If that doesn't work, could you share a more complete workflow of what you are trying to do?\n. Got it.\nFor now, I'm going to make it so that go.buildFlags is applied to running tests as well.\nIf you think there is a need for a separate go.testFlags configuration flag as well/instead, I'd be interested in details of the scenario for that.\n. Just checking - did you intend to ask about this specifically for the Go extension, or is this a questions/ask for the core VS Code repo?\n. Yeah - I think this is the same request as https://github.com/Microsoft/vscode-go/issues/102.\nYou should be seeing a message in green in the bottom right of VS Code saying Analysis Tools Missing which will offer to automatically install all the tools. This is also mentioned in https://github.com/Microsoft/vscode-go#using. But it's too subtle and should be easier.\nThe fix for #102 should be to offer Install and Install All options for every one of these \"command is not available\" errors.\n. For now, running format is the easiest way to deal with this.  Many users turn on \"go.formatOnSave\": true in their settings so that this is taken care of automatically.\nThat said - we should also fix this.\n. Actually - it turns out this is non-trivial to fix in a sufficiently correct way, but easy to workaround - just run format.  It's also not necessarily \"wrong\" behaviour (the user is asking to add the import), though it's not as smart as it could be.  I think we'll leave the behaviour as-is for now - and address this if and when we make the import handling something that's handled more robustly overall (via some tool written in Go that can work with the Go AST).\n. Great suggestion.  \nWe currently rely on https://github.com/nsf/gocode for most of the completion behaviour.  \nLooks like there is an active request/work on supporting this in gocode here: https://github.com/nsf/gocode/issues/257. \n/cc @nhooyr \n. Great!\n. Thanks @nhooyr.  I've made some vscode-go adjustments to handle these new \"import\" results in VS Code.  Anyone who updates both vscode-go and gocode should start seeing these completion results.\n. Dupe of https://github.com/Microsoft/vscode-go/issues/17 I think.\n. Yes - the VS Code debugger console doesn't currently support piping any input through to stdin.\nSounds like we need to improve the error behaviour when debuggee's attempt to read from stdin.\nWe do intend to add support for attach debugging, so that you could run the binary outside of VS Code and then attach to from VS Code.  That should make this possible.\n. Yeah, I think that setting only works for the Node debuggee right now, but we should be able to add support for it in the Go debuggee as well, which would be simpler than setting up attach debugging. \n. There was an issue with VS Code at one point where if you had any existing VS Code windows open before launching code . the env vars for the newly launched windows would get populated from the previous window, not the new shell.  Could you try closing all of the VS Code windows and see if this works then?\nAlso - do you have a ~/.profile or similar which would be setting GOPATH to your /Users/mdl/workspace/golang folder?\n. @saml That expected behaviour should be what is implemented.  In your example, I expect the results you are seeing come from having \"go.gopath\": \"/home/saml/go\" in your workspace or user settings in Code.  Is that not the case?\nIf it's not, could you (a) make sure you close all Code windows and see if you get the same results? and (b) do you have a ~/.bash_profile or similar which is configuring the GOPATH?  That shouldn't cause a problem, but curious if it's the case in your setup.\n. Thanks @saml for the investigation, and for opening https://github.com/Microsoft/vscode/issues/4779.  \nBased on that, it sounds like the root issue is in VS Code, and is now being tracked there.  So I'm going to close this issue.  Let us know if there's something seperate you see that we could do in vscode-go to help here.\n. There's details on building the plugin at https://github.com/Microsoft/vscode-go/blob/master/README.md#building-and-debugging-the-extension. \n. Thanks - I've opened a PR against the VS Code repo that should fix this.\n. Any idea where it is getting the idea to try that link, or why that link would not be automatically populated by vsce publish?  I don't see anything about this license link in the extension templates or docs.\n. Great - this is fixed now with with the most recent publish.\n. Do you have the latest version of the extension installed?  There was a fix yesterday which should have made this less likely to happen.\n. Yeah - the issue is the main snippet - which is handy when you want to use it, but can get in the way when you don't.  Not sure what to do about that without removing the snippet.\nThe one thing that did change recently is that you should get a completion suggestion as you start typing package which will offer to complete package main\\n for you.  If you select that before you get to typing the main part, it will autocomplete what you want.\nBut that doesn't fully solve the issue.\nI think the options are:\n- Leave this behaviour as is.\n- Remove all snippets.\n- Rename the main snippet to something less likely to interfere with normal typing (like im and ims which are used for imports).\nI don't love any of the options though.\n. @patbaker82  I like that suggestion - it replaces the main snippet with something more useful when you want to create a main file, plus avoids the name clash.\n. Do you have any pointers on how to reproduce this?  Anything unique about your project or GOPATH?  Does this happen only when opening a folder with Go code?  Does it happen if you create a fresh GOPATH and use Code in there?\nPlease reactivate if you can share more details. \n. Normally this happens if there is some dependency that cannot build succesfully.\nIn your case, I was seeing the same issue you mention after cloning your project but before installing it's dependncies (`\"github.com/agl/ed25519\", \"github.com/golang/protobuf/proto\" and \"github.com/tv42/compound\").  Without those, your project doesn't build, and as a result, completion does not work.\n@mafredri It shouldn't be necessary to manually go install anymore, since we are setting gocode to use autobuild, which will build any dependencies.  But we don't surface errors from gocode, so doing a go install may be a way to identify what dependencies are missing.  \nNow, ideally, we would report any build errors to the user if they are preventing completion from working.  We may be able to do that, but also adding go build/go install commands may also make this less critical.\n. Good idea - not planned yet - but should be something we can add.\n. Yeah - this is not yet possible.  We should be able to add a go.renameFlags setting which gets appended to the flags passed to gorename.\nWhich flag is it that you want to pass?  I wasn't aware of any flags that are useful but not passed automatically.  Is it the tags flag you want to use?\n. That's right. Note that you can change the formatting tool with the go.formatTool setting. See https://github.com/Microsoft/vscode-go/blob/master/README.md#options. \n. Sounds like godoc installs to your $GOROOT/bin instead of $GOPATH.  There's some notes on this here: http://stackoverflow.com/questions/33752247/unable-to-install-go-packages.\nNot sure what else vscode-go can do in this case - other than find a way to provide this support without using godoc.  In another issue, it was suggested to use https://github.com/zmb3/gogetdoc instead, but that currently only support Go 1.6, which may not work for a decent portion of users.\nNote that godoc and go doc do not do the same thing, so @Gaboose's suggestion most likely won't produce correct behaviour in VS Code.\n. Going to close this out now - since I can't think of anything more vscode-go can do - other than what's tracked in #87.\n. Could you do cmd-shift-p thenToggle Developer Tools then print out process.env['PATH'] and process.env['GOROOT']?\nIt sounds like your PATH may be in a format that we aren't handling correctly.\n. Hmm - nothing obvious there.  \nIf you have the developer tools open when you cause this error to happen - do you see a stack trace printed in the dev tools console?\n. I'm trying to understand the separate issues on this thread - it seems like there are either 2 or 3 unrelated issues here.\nCould those seeing a problem post a complete repro?  That would help to nail this down.\n. @weinand Got it.  That might explain another issue that's been open for awhile. What is the contract for the messages sent to stdout?\n. Okay - I have a fix for this - but I haven't been able to repro the problem myself so I can't verify that I've fixed it.  \nDoes anyone have a standalone repro?  \n@arashbina You mentioned that this happens if \"an error is generated\" during debugging.  What did you mean by that?\n. This should be fixed with https://github.com/Microsoft/vscode-go/commit/3583c0f68bc6f8ed01be8986e9db9780bc02a65c and in release 0.6.32 which is available now.\nI was able to repro the original issue with \"Unexpected end of input\" - just have a type error in the program so that it won't build.  That is fixed now.\nI was not able to repro the \"Unexpected token h. Stopping the debug adapter.\" issue from @liuliuhappy.  I expect it is also addressed with this fix, but please confirm if you can.\n. Unfortunately - it looks like this may not be fixed after all.\n@weinand With the exact same bits installed in the extension and available in my local development environment, I'm seeing that setting \"debugServer\": 4711 to debug against my development environment doesn't produce this error, but leaving it off and using the installled debugAdapter does produce this error.  \nI'm not sure how to test the debugAdapter behaviour for this condition if I can't reproduce it in the debug environment.  I'm also no longer 100% sure of what actual problem VS Code is seeing with the data coming back from the debugAdapter anymore.\nIs there anyway to get more insights on what's going wrong here?\n. Continuing to look into this.\nAs far as I can tell:\n- The original issue in this bug report of having a build error in the code leading to this notification does appear to be fixed in 0.6.32.\n- The issue in #206, which I thought was the same thing, is not fixed in 0.6.32, but only repros when not debugging the debugAdapter.\nSo I'll leave this issue closed, and will reactivate 0.6.32.  If anyone is still seeing this error after installing 0.6.32, please include a repro case on this thread.\n. Thanks - that explains why the results are different.\nBut it sounds like the issue in #206 is still a separate problem which is only present in non-server mode.\n. First - the way we suggest dealing with this is to turn on auto-save in VS Code (\"files.autoSave\": \"afterDelay\" in your settings), so that all of the on-save operations are automatically triggered every time you pause typing.\nBut to explain in more detail...\nThe extension relies on the existing tools in the Go ecosystem to offer language services.  Some other languages like C#, and TypeScript have one giant language service running that keeps a representation of the program structure in memory and keep it up to date with your keystrokes.  There is no similar thing available for Go, and tooling for Go is instead offered by a constellation of single-purpose tools which operate directly on files.\nSome of those tools are able to work against an unsaved buffer (though only an unsaved current file buffer - other files in the build environment need to be saved to disk) - specifically gocode for completion and godef for hover info.\nOther tools do not have support for working with unsaved buffers.  Most notably go build, go test and gorename.  \nFor the first two, we looked into whether we could add support for this in https://github.com/Microsoft/vscode-go/issues/31, but decided against it for now.  There just isn't solid enough support for this in the Go toolchain right now.\nFor rename, this requires making changes across an arbitrary number of files, so it's the sort of operation that's a lot safer if everything is saved to disk.  That said, we do still want to support undoing rename which is somewhat related to this.  https://github.com/Microsoft/vscode-go/issues/13.\n. Have you tried using Find All References?  That should provide the same functionality - but is the standard VS Code command across a few languages.\nIf you think there is something not handled sufficiently by that - feel free to reopen.\n. This is a limitation of godef.  See https://github.com/rogpeppe/godef/pull/25 and https://github.com/rogpeppe/godef/issues/13.  Sounds like this is just waiting on @rogpeppe to review the open PR there.\n. Any chance you have repro code you can share?  I don't think we've seen this sort of problem before, and it's surprising that this would happen only in VS Code but not in Delve.\nOutside of that, I could guess maybe there's a difference in env vars or something like that?\nCan you hit any breakpoints at all?\n. I've pushed an 0.6.34 update which has a couple of fixes that should hopefully help here.\nUnfortunately though, I haven't been able to reproduce this locally.\n@tnine If you are still seeing problems after updating to 0.6.34, could you let me know the specific steps you are using inside the debugger in your project?  I was able to launch, step through, and inspect variables in the code you linked - though I hit a runtime failure around docker certs so I'm not sure I'm reproducing your environment fully.\nClosing for now - but I'll reopen if there's any continued issues with 0.6.34.\n. @gosukiwi Do you have the latest VS Code (10.11) and the latest vscode-go extension (0.6.36)?  I'd be surprised if this was still occurring with the latest builds.\nCan you repro this with small projects?  If so, could you share one?\n. @egamma Is there any way to set a problem matcher to use to cause links to appear in the file/line/col references that appear in the output window under a specific (in this case Go) output channel? \n. We've moved Find All References over to use the Go oracle, which always searches the full GOPATH/GOROOT.  So this should be fixed now.\n. This is ultimately the same issue as https://github.com/Microsoft/vscode-go/issues/13.  I'm going to close this one and use that other issue to track fixing this generally.\n. Agreed.  I'm hoping we can do that as part of https://github.com/Microsoft/vscode-go/pull/134 or building upon that.  We need all of build, install, run and generate.\n. Sounds like you do not have git installed.  That is needed to be able to use go get.  The error message above include \"git\": executable file not found in path. \n. Can you share any more details on when that error occurs?  What action exactly caused it to appear?  From the other warning, it sounds like you have also not installled the Go analysis tools yet - which may be the root problem.\nCould you reopen with additional details?\n. It looks like the args aren't being ignored - they are shown in the first line of your output.  \nIf you are still having issues here, could you share some more details?\n. Got it - I'll need to look into this again. I suspect https://github.com/derekparker/delve/pull/478 may be related. \n. Yes - this appears to be because of the lack of arguments support in Delve on Windows, which is being tracked in https://github.com/derekparker/delve/pull/478.  Once that is merged, this should work in VS Code.\n. @isidorn @dbaeumer  Do you have a pointer to documentation on how to do this localization?  I can see examples like https://github.com/Microsoft/vscode/blob/master/extensions/typescript/package.nls.json for built-in extensions, but I'm unclear on how the localized text is bundled with extensions that ship separately.\n. Right - that makes sense.  I'll close this then for now.\n. Thanks @c3mb0.  I don't use Gb myself, but that definitely sounds like it should work.\nNote also that as of https://github.com/Microsoft/vscode-go/pull/261, which was merged today, you can configure this even more simply in your .vscode/settings.json in your myGbProject folder:\njson\n{\n  \"go.gopath\": \"${workspaceRoot}:${workspaceRoot}/vendor\"\n}\n@anidotnet Please reopen if you see problems even after configuring your per-project GOPATH.\n. There's three things this could be:\n1. Build on save\n2. Completion lists\n3. Hover\nI would be a bit surprised  if (1) was the problem, since it just does a pretty vanilla go build and only once per save.\nThere was a change not too long ago to set autobuild to true on gocode, which means that (2) will try to build dependencies that aren't built yet when you ask for completion lists.  It's possible that something is going wrong that is causing that to not be able to reuse the build cache.\nAs mentioned in https://github.com/Microsoft/vscode-go/issues/257#issuecomment-199512489, (3) has changed recently to get more CPU intensive and to make a call to godoc.  That could in principle be the issue.\nAnyway you can isolate which of these three features is causing the slowdown and the process count explosion in your case?\n. Interesting.  I've tried playing around inside the github.com/openshift/origin project per @smarterclayton's comment.  Certainly a large project.  But I'm still not able to reproduce this problem.\nFor example, if I go to go/src/github.com/openshift/origin/pkg/dockerregistry, then run go build - it does indeed take 10s or so.  However, if I have Code open, and edit files like client.go in that folder, the first time I try to get a completion list will take 10s, but after that, it will be quick, as will build-on-save.  After that initial 10s, I can edit in that file (and others) with no performance problems, and with no unexpected go processes being spawned.\nMy understanding is that this is because gocode with autobuild=true set (which vscode-go uses by default), will populate the build cache, and go build will use the cache (it just won't populate it with new results).  \nIf you have a more detailed repro for this, that would be great.  Sounds like it may be somewhat more specific to the build environment you have in this project beyond what I've been able to reproduce.\n. I tried all of that, and if I never use a completion list, I do see some slow builds.  But I can't make more than 1-2 stack up on my machine.  \nIf I do ever ask for a completion list, after that I don't see any perf issues.\nThe code that sets the autobuild option on gocode is here: https://github.com/Microsoft/vscode-go/blob/eb48f2f17671612bf3ab73a2e91d06aa5ce06f52/src/goSuggest.ts#L135.\nAny reason why you don't want cached builds during development and to rely on those for performant completion and error checking?\n. @sgallagher I tried again to set up an environment to repro this, but haven't yet been able to.  I still see that after the fast slow completion list request, later requests are returned quickly.  In between, gocode fills up the ~/go/src/github.com/openshift/origin/Godeps/_workspace/pkg/ folder with cached build outputs.\nA few thoughts:\n1. If you have complete steps for a repro - I could try those.\n2. Ultimately though, whatever problem there might be here is almost certainly an issue with gocode.  It may make sense to open an issue there instead https://github.com/nsf/gocode.\n3. vscode-go turns on the autobuild option for gocode.  That may be what's leading to the issue.  As well as figuring out what's going wrong with gocode here, we could also add an option to vscode-go to turn off autobuild.  In that case, you will only get completion if you have done a local go install manually, and will get results only against the most recently built binaries for cross-package dependencies.  I'm not sure that experience will be better in practice for you.\n. Thanks @ironcladlou - I've merged #283, and I agree that that is likely the best we can do in vscode-go to address this.  It would be great to figure out the underlying issue in gocode if possible, but that is likely a longer term issue.\nI'm going to close this now - but if there's any thoughts on additional things we can do to address this, feel free to re-raise.\n. We can definitely remove the \"EXPERIMENTAL\" on formatOnSave.\nThe one concern with changing the defaults is that some VS Code users like to use AutoSave, which causes the editor to immediately save after a short delay of typing.  This is nice for Go because it triggers compile/lint checks automatically.\nHowever, these two features interact imperfectly.  Sometimes you pause during typing and gofmt moves code around (or goimports even removes an import you had intentionally just added).  It's not unusable, but it is an acquired taste experience.\nThat said - I think at this point it's probably worth changing the default to have formatOnSave on.\nI'm inclined to leave goimports as the default formatter for now - it's easy enough to change if you end up in a situation where it is giving incorrect results.\n. @ironcladlou Out of curiosity - are you suggesting that we should not turn format-on-save on by default?  Or that you don't use auto-save?\n. Got it - great.  \nSince AutoSave is off by default in Code, and actually now less discoverable, I think it makes sense to tune the defaults to match what works best with that off - which means turning format-on-save on.  We can include documentation about the conflict.\n. Thanks @giacoman - this looks great.  A handful of code review comments.  \nCould you rebase on current master?\n. Looks great.  Really good to add this support - opens up a number of new scenarios.  \nOnly one remaining question:\n\nI removed the commented out code. I think the other code should remain though. I shut down remote dlv process by hitting Ctrl-C. If I don't issue halt command, the remote dlv process will not shut down gracefully. It will hang trying to delete the debug binary and you will have to hit Ctrl-X and process will be left open. With halt command, hitting Ctrl-C will shut down process smoothly.\n\nAt least in the Docker-based setup I've been testing this with (see https://github.com/lukehoban/webapp-go/tree/debugging), what has made the most sense is to send a restart command to the remote dlv server when you stop debugging in VS Code.  That puts the dlv server back in the state closest to what it was presumably in before attaching the VS Code debugger.  And it allows restarting the debug session in VS Code.  If you send a halt, it seems you then have to recycle the debug server on the remote machine every time you want to start a new debug session.\nRegarding the ctrl-c issue, that sounds like a bug in Delve.  I can't think of a reason why the headless mode dlv server should not shutdown gracefully on ctrl-c.\nThoughts?\n. I tested restart just by changing from halt to restart in the Delve#close implementation in your code.\nI didn't have any problem with restarting the docker container - but I'm not sure what signal that sends to the process - maybe different than ctrl-c.  I didn't have need in the Docker approach to manually kill/restart the debug server.\nThat said, I think it would be good to raise the issue about being about to ctrl-c the debug server process as a Delve bug.  It seems like something that should be fixable there.  \nFWIW - Here's the patch I have currently on top of your branch:\n`` patch\ndiff --git a/src/debugAdapter/goDebug.ts b/src/debugAdapter/goDebug.ts\nindex e73e63a..ceea72e 100644\n--- a/src/debugAdapter/goDebug.ts\n+++ b/src/debugAdapter/goDebug.ts\n@@ -234,7 +234,7 @@ class Delve {\n            });\n            this.debugProcess.on('close', function(code) {\n                // TODO: Reportdlv` crash to user.\n-               console.error('Process exiting with code: ' + code);\n+               logError('Process exiting with code: ' + code);\n            });\n            this.debugProcess.on('error', function(err) {\n                reject(err);\n@@ -264,14 +264,15 @@ class Delve {\n    }\nclose() {\n\n\nif (this.debugProcess === null) {\nthis.call('Command', [{ name: 'halt' }], (err, state) => {\nif (!this.debugProcess) {\nthis.call('Command', [{ name: 'restart' }], (err, state) => {\n                if (err) {\nconsole.error('Failed to halt.');\nlogError('Failed to restart.');\n                }\n            });\n} else {\nthis.debugProcess.kill();\n        }\nelse this.debugProcess.kill();\n    }\n }\n\n@@ -359,15 +360,17 @@ class GoDebugSession extends DebugSession {\n        log('ConfigurationDoneRequest');\n    }\n\nprotected toDebuggerPath(path): string {\nif (this.delve.remotePath.length === 0)\nprotected toDebuggerPath(path: string): string {\nif (this.delve.remotePath.length === 0) {\n            return this.convertClientPathToDebugger(path);\n\n}\n        return path.replace(this.delve.program, this.delve.remotePath).split(this.localPathSeparator).join(this.remotePathSeparator);\n    }\n\n\nprotected toLocalPath(path): string {\n\nif (this.delve.remotePath.length === 0)\nprotected toLocalPath(path: string): string {\nif (this.delve.remotePath.length === 0) {\n            return this.convertDebuggerPathToClient(path);\n}\n        return path.replace(this.delve.remotePath, this.delve.program).split(this.remotePathSeparator).join(this.localPathSeparator);\n    }\n\n@@ -385,9 +388,11 @@ class GoDebugSession extends DebugSession {\n        })).then(() => {\n            log('All cleared');\n            return Promise.all(args.lines.map(line => {\n-               if (this.delve.remotePath.length === 0)\n+               if (this.delve.remotePath.length === 0) {\n                    log('Creating on: ' + file + ':' + line);\n-               else log('Creating on: ' + file + ' (' + remoteFile + ') :' + line);\n+               } else {\n+                   log('Creating on: ' + file + ' (' + remoteFile + ') :' + line);\n+               }\n                return this.delve.callPromise('CreateBreakpoint', [{ file: remoteFile, line }]).catch(err => {\n                    log('Error on CreateBreakpoint');\n                    return null;\n@@ -450,7 +455,6 @@ class GoDebugSession extends DebugSession {\n                    new Source(\n                        basename(location.file),\n                        this.toLocalPath(location.file)\n-                       // this.convertDebuggerPathToClient(location.file)\n                    ),\n                    location.line,\n                    0\n```\n. You are right - I was not correctly restarting in my tests earlier.\nI just tried a few things, and I am now seeing the behaviour I expect if I use:\ntypescript\nthis.call<DebuggerState>('Command', [{ name: 'halt' }], (err, state) => {\n    if (err) return logError('Failed to restart.');\n    this.call<DebuggerState>('Restart', [], (err, state) => {\n        if (err) return logError('Failed to restart.');\n    });\n});\nDoes that work in your usecase as well?  I believe it should leave the debug server in a state where you can still ctrl-c, but will ensure also ensure that Play/Stop/Play/Stop/etc. in VS Code will work.\n. I just tried again, and without the call to Restart, I'm not able to reliably restart the vscode debugger.  With  the call to Restart in there, I can restart the vscode debugger reliably.\nBy \"restart the vscode debugger\", I mean any of:\n- While the process is running, hit Stop, then hit Play again.\n- While the process is paused in the debugger, hit Stop, then hit Play again.\n- While the process is running, hit Restart.\n- While the process is paused in the debugger, hit Restart.\nThis did require sending a halt followed by a Restart to Delve.  \nMy particular test case at least is https://github.com/lukehoban/webapp-go/tree/debugging, with a breakpoint in loadPage, and a container built and launched per https://github.com/lukehoban/webapp-go/blob/debugging/.vscode/launch.json#L15.\n. Great - this is merged into master now.  I'll push an update to the extension in the next day or so with these changes.\nThanks @giacoman for the work on this!\n. Great - thanks @ironcladlou.\n. Thanks for the investigation on this @ironcladlou.\nI haven't actually seen anything nearly as severe as you mention myself.  I'm a bit surprised that you would seen Electron Helper CPU going up due to spawning godef - the latter should be a seperate process.\nWhat may be a problem is the recent change to also invoke godoc as part of finding the definition (even though we don't yet actually display the docs during extrainfo).  That does a somewhat CPU intensive scan of the resulting docs since godoc doesn't return results in a form that is easily processed for this need.  We can definitely improve on this (and remove it from the extrinfo and gotodef codepath entirely for now if needed).\nAs for the number of godef processes spawned - I expect there will be a lot, but that hasn't itself been a noticeable performance issue.  If it does turn out to be, I think the best approach would be to ensure we only have one godef process spawned at a time, and that we drop old queued requests when new requests come in.\nAs for removing the hover and cmd+hover behaviors by default - that's something VS Code can offer, but it shouldn't be the case that users feel they need to do that for performance reasons.\nI'll leave this open to track improving the CPU performance of extrainfo and gotodefinition, since I believe that's the root cause here.\n. A fix that should address the CPU issue is in 0.6.35.  Let me know if you are still seeing issues.\n. @sgallagher \nThat sounds like a different issue, since it's not related to hovering or godef.\nInstead, it sounds like it's going to be an issue with https://github.com/nsf/gocode - possibly related to turning on autobuild.  You may want to report an issue there, but would likely need additional details about your source code, what proceses are using 100% CPU, whether this happens once or repeatedly, etc.\n. Thanks @weinand.\n\nAs a nice side effect, you will no longer see the 'All Exception' and 'Uncaught Exceptions' checkboxes that were no-ops for go-debug anyway.\n\nFWIW - I am still seeing these two checkboxes on VS Code 0.10.11 after applying your change.  Is that expected?\n. Nice idea.  Happy to accept a PR on this.\n. @harikb If you have a reliable repro for this - could you share?  Also - do you have the latest vscode-go installed?  There were some fixes related to this recently.\n. BTW - this sounds like it's likely the same issue as #240, and should hopefully be addressed in the 0.6.34 update which is available now.  If you are still seeing issues after that update, please reopen with more detailed steps for reproducing.\n. Looks good - thanks!\n. I can't reproduce this on either of my Windows 10 machines.\nCan you provide any details about your environment?  Versions of VS Code, gocode, vscode-go, etc.  Any non-standard shells installed (Cygwin, etc.)?\nClosing for now but reopen with more details if you have them.\n. Odd - I can't imagine why that would solve the problem.  I tried a few more things to reproduce based on that, but couldn't come up with anything.  Glad you found a workaround though.\n. Agreed.  I'm hoping we can do that as part of https://github.com/Microsoft/vscode-go/pull/134 or building upon that.  We need all of build, install, run and generate.\n. What error exactly are you seeing?  Are you on Windows?\n\nThe problem is that the code in goRename.js to execute the gorename tool only queries GOPATH from the environment but does not look up the value of the go.gopath property defined in settings.json for the workspace.\n\nI expect that's not actually the problem.  The go.gopath is used to overwrite process.env.GOPATH inside vscode-go.  That said, it looks like the code there doesn't handle multi-part GOPATH.  But that should only cause a problem on Windows.\n. In principle, the extension aims to work with any version of Delve.  The recent issues mentioned in for example #240 are actually rooted in breaking changes in VS Code, not in Delve.\nIf Delve does make an API breaking change in the future, then we'll need to document required version (or automatically acquire the binary).  But for now I don't think we yet can say anything particularly helpful about expected Delve versions.\n. You can also set your GOPATH with the \"go.gopath\": \"/my/path/to/go\" in your settings, either globally or per-workspace.  see https://github.com/Microsoft/vscode-go#options.\nYou can also launch code from a shell with a GOPATH environment configured.\nHopefully one of those options works for you?\n. Is /usr/local/bin not in your PATH?  Presumably the location that your package manager is installing these tools needs to be one that's in your PATH or else it will be inconvenient to use them from a shell as well.\nCurious what option you would have liked to have aswell or instead of what's available now.\n. When you launch VS Code through the OS X UI, it should inherit it's environment, including PATH from your ~/.bash_profile or similar.  Run Toggle Developer Tools command in VS Code, then eval process.env to see what environment VSCode is running with.\n. Could you provide any details?  Does this happen on all code?  What versions of Delve, VS Code and vscode-go, etc?\nPlease reopen if you have any additional info on this.\n. Could you try updating to the latest vscode-go (currently 0.6.35)?  There were some fixes for recent breaking changes in the VS Code debugger which may be what you are hitting.\n. If you hover over the message for a second, you should see the full error text.\nYou could also try running /usr/local/go/bin/gorename -offset /path/to/the/file.go:#17 -to foo in a shell to see what error it reports.\n. Could you try updating to the latest vscode-go (currently 0.6.35)? There were some fixes for recent breaking changes in the VS Code debugger which may be what you are hitting.\n. Sounds like you possibly haven't installed Delve according to the instructions: https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md?  The could not launch process: could not fork/exec error is the standard one I've seen when dlv is not signed.  (Delve error messages should definitely be more helpful around this...)\n. Yeah - installing Delve on OS/X is unfortunately still a manual process.  @steeve just shared a HomeBrew formula that may help folks https://github.com/derekparker/delve/issues/508, and @derekparker is working on producing signed binaries out of the Delve release process https://github.com/derekparker/delve/issues/494.  These should help here.\n. Per @egamma's comment, I think this is just an issue with the default theme being used.  Closing for now.\n. This issue was moved to Microsoft/vscode#4933\n. This issue was moved to Microsoft/vscode#4933\n. Moving this to VS Code since it's a general issue.  There doesn't appear to be anything an extension can do to override this, but even if there was, it seems to make sense to address generally.\n. I think this will have to be combined with running an explicit build command - something separate from just saving.  Either through a Go: Build command or a Build task.  There's some discussion on those at https://github.com/Microsoft/vscode-go/issues/21 and https://github.com/Microsoft/vscode-go/pull/134.  \nWould that address what you are looking for?\n. Got it - that makes sense.\nI took a look at this, and it appears we can fairly easily send the results from check to the output window as well as producing he diagnostics for VS Code.  We can also do this without forcing the Output windows to open up, so it shouldn't get in the way for those who aren't interested in seeing this.\n. Not currently - but see https://github.com/Microsoft/vscode/issues/4762.\nAs for the Go features mentioned here - all make sense to me.  All of these could probably be added as commands that can be invoked through the command palette already - and then added into a context menu in the future if/when that extension point is opened up.  \nHappy to accept PRs for features like these.\n. There is an optionuseCodeSnippetsOnFunctionSuggest which adds parens and function signature, similar to what some other Go IDE's do.  It's off by default because this is not the standard interaction model for VS Code. \nThere is no separate option to just insert the parens - I'm not sure that would make sense as a Go-specific thing.\nOptions are all listed here: https://github.com/Microsoft/vscode-go#options.\n. Happy to accept a PR for this.\nIt should be possible to build this as a VS Code Code Action added to https://github.com/Microsoft/vscode-go/blob/master/src/goCodeAction.ts.\n. I've fixed this to match what Delve itself does - which is render \"...+121 more\" at the end if there are more than 64 chars.  Until Delve adds a way to request the full contents, this appears to be the best we can do.\n. I looked into this, and it appears it isn't possible to fix this with the current VS Code APIs.  \nThis is primarily blocked on https://github.com/Microsoft/vscode/issues/239, which would make sure the formatting could be applied before the files are saved to disk.  \nBut it is more directly blocked by seemingly not being able to get a TextEditor to use to apply a set of TextEdits for a TextDocument provided to vscode.workspace.onDidSaveTextDocument.  See https://github.com/Microsoft/vscode-go/blob/master/src/goMain.ts#L186.  \n/cc @egamma and @bpasero in case they have a suggestion for how this could be handled with the current VS Code API.\n. This is an issue with goreturns - I've opened a tracking issue here: https://github.com/sqs/goreturns/issues/19.\nThe root cause appears to be https://groups.google.com/forum/#!topic/golang-announce/qu_rAphYdxY.\nFor a workaround until goreturns gets fixed, you should be able to just change to: \"go.formatTool\": \"goimports\" and make sure you have done a go get golang.org/x/tools/cmd/goimports. \n. For the workaround:\n1. In your settings (Preferences -> User Settings or Preferences -> Workspace Settings) add:  \"go.formatTool\": \"goimports\".\n2. In your shell, with the same GOPATH you are using in VS Code, run go get golang.org/x/tools/cmd/goimports\n. This is fixed now in https://github.com/sqs/goreturns/issues/19.\n. Thanks - great to make this something that is configurable. \n. I hadn't seen the news about the change to the new name - definitely makes sense to use guru going forward.\nFWIW - Tried this out for referrers just now, and CPU time on a large workspace was 75% of oracle with 50% the max memory usage, so seems there have already been non-trivial performance improvements.\n. @vastbinderj Sounds like a good idea.\n. As far as I can tell - support for completion in guru does not exist yet.  I can't tell if there's any active work on it.  Is there any near term expectation that this will be available?\n. Totally happy to leave this as a tracking issue - just wanted to make sure I was right that there wasn't any near term action we can take on this.\n. That would mean that there was more than 200kb of output on stderr when using gorename - presumably because you have errors in your program?  That said, we could bump up the maxBuffer to some larger constant so that we can provide a better error more of the time.\n. That would mean that there was more than 200kb of output on stderr when using gorename - presumably because you have errors in your program?  That said, we could bump up the maxBuffer to some larger constant so that we can provide a better error more of the time.\n. @hongchaodeng I can't repro with the most minimal complete example I can build off of what you have shared.  Can you share a complete project where this repros, along with any details about your system/environment?\n. Good to hear.\n. Pretty sure this was fixed a month ago with https://github.com/Microsoft/vscode-go/commit/c49a964f5690487948773fa37c612694c378166f.\n. @jrieken Curious - is there any way to get any of this information for these telemetry error reports:\n1) Version of the extension?\n2) The source-mapped file/line/col - assuming that we ship source maps in the extension package?\n. Fairly confident this was fixed a month ago with https://github.com/Microsoft/vscode-go/commit/457bcde265d6b89fc8cf782652b09ccbd7d7e6f5.\n. There is no explicit Go: Build command in the extension currently - that is being tracked with #287.\nBut the extension does run builds on save by default, and results are available in the output window if you open it with View: Toggle Output.\nThere is also a Task framework in VS Code which lets you configure more complex or specialized build tasks.\n. Thanks @sijad.  \nI remember running into that same issue when I took a look at this awhile ago.  In theory - we could filter the results to only those in the current file - but it would be hugely wasteful to compute all these lint results and just throw them away.  I think that issue may be a blocker for getting gometalinter integrated into VSCode and similar tools.\n. @sijad I think it might be better to stick with using gometalinter if possible - I prefer to keep as much Go-specific logic in well-maintained Go ecosystem projects instead of moving it into the vscode-go extension.  \nPer the comment on https://github.com/alecthomas/gometalinter/issues/119 it sounds like other tools that use gometalinter do just deal with just invoking linters at folder level.  I'm open to trying the same in vscode-go, and if there are any real blocking perf issues with this, doing the work in gometalinter itself to enable this (which can also benefit other Go tools).\n. @sijad I think it might be better to stick with using gometalinter if possible - I prefer to keep as much Go-specific logic in well-maintained Go ecosystem projects instead of moving it into the vscode-go extension.  \nPer the comment on https://github.com/alecthomas/gometalinter/issues/119 it sounds like other tools that use gometalinter do just deal with just invoking linters at folder level.  I'm open to trying the same in vscode-go, and if there are any real blocking perf issues with this, doing the work in gometalinter itself to enable this (which can also benefit other Go tools).\n. Thanks @sijad.  This generally looks good.  \nKeeping golint as the default and letting users opt-in to gometalinter also means that we don't necessarily have to help with acquiring and configuring gometalinter, which keeps this simpler.   I think that's probably a good thing for now.\nI'm not sure whether there is sufficient test infrastructure currently to add a test for this, but if so, would be great to add that.  It will likely require at least adding installation of gometalinter into the TravisCI configuration.\n. Finally got a chance to review and merge.  I had to tweak the regexp a little to match some gometalinter warnings - specifically when there was no column number present.  But after that, it looked good.\nFor others interested in this - note that it's still not the default - and if you want to use \"go.lintTool\": \"gometalinter\" you'll have to install it yourself since it is a multistep install (go get then gometalinter --install --update).\n. Thanks @sijad for the PR!\n. I can't tell from the report here what is going wrong in your setup - but it sounds like perhaps you found a solution.  I'm going to close this, but if you do still have any specific issue, please reopen.\n. I believe this is being tracked in https://github.com/Microsoft/vscode-go/issues/219 and that all of the approaches you could take are currently blocked by missing features in the Go debugging implementation.  Hopefully we can get some of those addressed soon.\nI'll close this one out and keep the discussion in #219 for now.\n. I cannot repro this on several machines, including VSCode 1.0 on Windows 10 14328.  Can you provide more details?\n. Technically go test returns success in this case, which is why we say Success: Tests passed.  It's not clear this is wrong either - especially since in these cases you also see a message that there were no tests.\n?       github.com/GoogleCloudPlatform/golang-samples/docs/managed_vms/helloworld   [no test files]\nSuccess: Tests passed.\nWhat would you suggest doing here?  PR's welcome.\n. I added a few more notes to the README.  For your example, I think the issue is that you missed the --headless argument to dlv, which runs it in server more instead of server+client mode.\n. It appears this only happens for your repro steps if you have \"go.useCodeSnippetsOnFunctionSuggest\": true.  \nIn that case, the item you are selecting in the completion list is a snippet.  \nIt appears that when there are multiple cursorts, and a user tries to complete on a snippet, VS Code only inserts it in the first location.\nThat appears to be a bug/limitation in VS Code.  I'll move over to that repo.\n. This issue was moved to Microsoft/vscode#5578\n. Thanks for this.\nThe feature you really want here is being tracked in #168.  I'd love to get that added.\nI'm not as sure about the addition in this PR:\n1) I'm not sure funct is the right name.  What was your reasoning for the name?  I suspect discoverability would be low and thus this wouldn't get used much.\n2) More importantly, feels like this shouldn't need a name.  If #168 was implemented, the completion list could just include generated snippets.\n. Yeah - I cannot repro this myself - and I can only imagine this happening when you have some incompatibility between your Go toolchain and the build of godef that you installed locally.  It wouldn't be something that vscode-go can really control.\nIf anyone does have complete repro steps for getting into this state - feel free to add comment here and/or open an issue on godef.\n. You should be able to do this with \"go.gopath\": \"/path/to/gopath/\" in your workspace settings. Is that not working?\n. Could you share a more complete repro and system information?  Note that program points to a package folder - not sure if testapp.go is the main function for package in goproject.\n. Yes - this is a good idea.\n. #375 is merged now.  Thanks @benclarkwood.\n. Yeah - sounds like a change in go vet, which would be a question/issue for the golang/go repo.\nFrom vscode-go you have two options:\n1. Turn off vet with \"go.vetOnSave\": false\n2. Pass flags to go vet with \"go.vetFlags\": []  The syntax for flags is at https://golang.org/cmd/vet/ and each space seperated flag would be passed as an element of the flags array.\nBeyond that - I don't think we would want to change the defaults from what go vet does by default.\n. Yeah - I think the workaround is about the best that can be done given VS Code's debugging support currently.  I don't believe there is any way to have a custom command invoke a debug launch with parameterized launch configuration.  /cc @egamma in case he has thoughts.\n. This is a limitation of godef.  See https://github.com/rogpeppe/godef/pull/25 and https://github.com/rogpeppe/godef/issues/13.  Sounds like this is just waiting on @rogpeppe to review the open PR there.\n. I can't seem to reproduce this.  The only difference for me is I am on VS Code 1.1 now.  Any chance you can test on 1.1?\nAlso - is the repro steps above exactly what both of you can repro with?  At whcih step are you setting the breakpoint, when is it turning grey, etc.?\n. @jrieken I don't think you previous note is right.  The vscode-go extension is computing the errors correctly, and passing them to diagnosticsCollection.set, but only the first item of the array passed to that function is showing up in VS Code.\n\nNo matter what the original source of the errors, VS Code is only ever displaying the first item of the array passed to DiagnosticsCollection#set.  If the same set of items are permuted, the new first item will be the one VS Code displays.  \nI'll open an issue in the vscode repo on this.  But in the meantime the Go extension will need to find a way to work around this.\n. Are you on Linux?  This error is expected on OSX since different installation steps for Delve are required there.\nDoes dlv work at all?  From the error I expect it does not, and that you'll need to report this in the delve repo if indeed it is a problem. \n. Are you perhaps running into https://github.com/derekparker/delve/issues/27#issuecomment-188795465?  \nI doubt it's really possible for this to be something caused by vscode-go based on the error you are seeing.  The options you have specified will result in executing dlv debug --headless=true --listen=127.0.0.1:2345 --log -- with the working directory set to your ${workspaceRoot}.\nNote that dlv debug accepts a package argument, not a file argument - so it's not clear what dlv debug some-go-code.go in your example would be doing.\n. > Now I tried dlv debug --headless=true --listen=127.0.0.1:2345 --log some-go-code.go and it gives the same error above. Until I do this: dlv debug --listen=127.0.0.1:2345 --log some-go-code.go and then it works OK.\nSounds like that's a bug in Delve that it should support consistent behaviour of arguments across headless and interactive.  Feel free to report that to Delve.\n\nUsing delve manually doesn't cause such behaviour so this still might be vscode-go related.\n\nFrom vscode-go you can pass the file path is you want by setting \"program\" to point at a file instead of package directory.  The only thing vscode-go could do to \"fix\" this apparently would be to not pass --headless, but that is requried to be able to interact with the debug server.\nClosing for now since I don't see any change vscode-go could make to help here.\n. I believe this is the same issue as https://github.com/Microsoft/vscode-go/issues/322.  There's a fix for that now in master - should be a new release pushed soon with the fix.\n. Unfortunately, I don't think adding vendor/ to GOPATH is a generally safe solution to this, and I expect it would start introducing subtle issues for some user's environments.\nThe \"right\" thing here is for 3rd party Go tools to add support for vendoring.  We won't be able to get reliable results without that.  For godef in particular, sounds like this is just waiting on @rogpeppe to accept the pending PR - or, if that will not happen, then for someone to fork and start maintaining an up to date version of this tool which vscode-go could use.\nNote that vscode-go does support mult-gopath environments already, so users should be able to individually use this approach of augmenting their GOPATH to include vendor/ if they want to workaround the limitation in godef in the near term.\n. Per discussion in #325, I think this is not the best path to addressing this right now.\n. @egamma Is this expected to be possible to fix in extensions?  As far as I can tell, this is controlled by logic in VS Code.\n. Does it make sense to always prompt for this?  It feels like that will make the 90% case meaningfully more cumbersome.\nAny opinions one way or the other?\nNote that you can use go to definition and/or rename to fairly easily change the name after it's added - though these don't cover all the cases that explicitly prompting would address.\n. I can't seem to reproduce this.  How do you have your GOPATH configured? (globally set env var, settings.json, something else?)\n. Yes - this was fixed with https://github.com/Microsoft/vscode-go/commit/e989b977b35a16d77280d56c36685ac4ba2dcc64, but there was a delay in getting a new release out.  Version 0.6.39 is available now with this fix included.\n. To recreate the equivlanet of dlv exec ./mydebug you would need to set \"mode\": \"exec\" and \"program\":${workspaceRoot}/mydebug(assuming that myDebug is in the root of your workspace.  The\"args\"setting is for arguments to the application you are debugging, not arguments to Delve.\n. Are you sure these tools are installed?  If so, where are they on your GOPATH on your system? Can you share what theGo: Current GOPATH` command returns in VS Code for you?\n. Closing for now - if you have additional details - please reopen.\n. Unfortunately this would be quite hard to do in the vscode-go extension.  vscode-go intentionally delegates doing anything that depends on the behaviour of the Go language/build system to Go tools, either those provided natively with the Go distribution or 3rd party tools that themselves operate within the behaviours of the core Go build system.\nAs a result, vscode-go just doesn't know anything about what the package dependencies look like, or what needs to be built to provide accurate completion lists.  Instead, it delegates this to vscode-go.  \nI think that is the right approach, and pushes the logic for understanding Go code into the gocode tool.  Ideally, the common logic in handling go build environments in tools like this would get pushed down further into the Go toolchain so that logic didn't need to exist in gocode either.  But I think that's the direction to push this - not up even higher into all of the IDEs/editors.\n/cc @mdempsky.\n. We did recently move to use golang's Guru tool to provide Find All References, as it provides a more well maintained foundation than than the previous (https://github.com/redefiance/go-find-references).  \nHowever, Guru is definitely slower.  I expect that's something that would have to be improved in Guru.  I recall seeing some work on improving performance, but not sure how much more progress to expect. \n/cc @alandonovan\n. Unfortunately vscode-go doesn't currently use the streaming results because vscode's UX for find references doesn't support streaming back results.  I expect that's intentional since there are different UX considerations when results may not be complete.  This may be something VS Code could add in the future.\nI'm curious though why https://github.com/redefiance/go-find-references was so much faster for this.  Was it cutting some corner in providing results that guru is not cutting?  Or is there room to still improve guru performance even without relying on streaming results?\n. I expect this is going to be related to your source code not being under your active GOPATH.  \nThere's a report of a similar issue here: https://github.com/fatih/vim-go/issues/221 - the tips there should mostly apply here as well.\nIf you are not able to resolve the problem could you share exact details about your environment - including the result of running Go: Current GOPATH?\n. > I would like to be able to set it as follow: \"go.gopath\": \"${env.GOPATH};${workspaceRoot}\"\nThis is something that VS Code would need to support - I believe https://github.com/Microsoft/vscode/issues/2809 is tracking this, and https://github.com/Microsoft/vscode/issues/3759 was another similar report related to vscode-go.\n\nThat way I keep the shared tools (gofmt, golint...) together and I don't have to download them for each project.\n\nFWIW - Addressing that particular issue without forcing you to use a dual GOPATH is what https://github.com/Microsoft/vscode-go/issues/5 has been tracking.\n. Could you try running Developer: Toggle Developer Tools and then looking at the Console tab to see if there are any errors being reported?\n. Okay - that helps.\nFor now, you could try turning off useCodeSnippetsOnFunctionSuggest.  The problem is ultimately happening in handing that feature.  I'm still not sure the root cause here, but we can at least add some more safeguards to that feature.\nThe next time you see completion lists go away, it would be really interesting to know what what API you were trying to get completion on if you can catch it.\n. Can you provide any more details on this?  Is it specific to the Go language in VScode, or a general problem with vscode?  Do you have repro steps?\n. I love the idea of centralizing more of these features onto guru.  However, currently, the results seem to be meaningfully less helpful.\nFor example - hovering a variable shows var p instead of p *Page. Hovering a function shows func renderTemplate instead of renderTemplate func(w http.ResponseWriter, tmp string, p *Page).  And similar for many other kinds of Go objects.  Oddly though, for types from the standard library, results are delivered slower, but are a lot richer - such as func net/http.Redirect(w net/http.ResponseWriter, r *net/http.Request, urlStr string, code int).\nNot sure if these results are intentional for guru or something that will be improved.  But I don't think we'd want to regress the common case of hovering behaviour in the current state.\n. I'm not seeing any problems when I use both of these extensions together.  Can you provide more explicit details if you are still seeing problems?\n. This is great - I'm actually pleasantly surprised that it's this simple to add support for a separate Go tools installation path.\nI think eventually it would be good to expand upon this and choose a default location for the tools and automatically download them for the user on startup, as well as tracking/managing versions, to avoid all of the current manual acquisition steps.\nBut this feels like a reasonable step toward that which enables users to easily setup their own global installation path, and allows us to go further in the future, but also to offer configurability of the installation location in the future even if the default changes.\nOn the env var name - I'm happy with VSCODE_GOTOOLS.\n/cc @ironcladlou in case he has any thoughts on this.\n. Looks good - thanks!\n. I think a URL along the lines of this will work:\nhttps://lukehoban.gallery.vsassets.io/_apis/public/gallery/publisher/lukehoban/extension/Go/0.6.27/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage \nNo idea if that's a stable API from the gallery or not though.  + @joaomoreno.\n. This also looks relavant: http://www.growingwiththeweb.com/2016/06/syncing-vscode-extensions.html.  \n/cc @Tyriar. \n. Totally agreed.  This is tracked by https://github.com/Microsoft/vscode-go/issues/87, which I think we can continue to use to track progress on this.\n. I expect this is a gocode issue, since vscode-go relies on gocode to trigger builds needed for completion.  \nVscode-go does turn the autobuild setting on for gocode though, which should cause dependencies to built.  It may well be that it will not rebuild dependencies that are out of date.  There wouldn't be much that vscode-go can do about this directly without either fixing/improving this in gocode or moving to guru instead per https://github.com/Microsoft/vscode-go/issues/288.\n. I just tried a couple projects on the Insiders build, and I can't reproduce this.\nHow is your GOPATH env var set up?  Have you configured it in settings.json?  Or also globally in a .bash_profile or similar?\nAre you seeing the different results between release and insiders builds on the same machine with same configuration and same workflow?\nThere could potentially have been a chance in how vscode env vars are inherited by the debug process.\n. Format on save has been the default for a little over a month.  See https://github.com/Microsoft/vscode-go/commit/36f705ffa8bd45d8bceb88dcab8dab8740d2e4b8 and https://github.com/Microsoft/vscode-go/issues/253.\nCan you clarify whether you are seeing something different?\n. Any chance someone seeing this issue could share a complete repro? Code plus the specific order of setting breakpoints, running, stepping, etc.\n. It's not clear to me that it's safe to assume that all users want their GOPATH to be modified in this way.\nWhat is the specific issue that this is fixing?\n. Build on save runs go test -c which only compiles the test binary, it does not run tests.  \nAre you sure you are seeing this 30s delay on build on save?  Does compiling your test binary take that long somehow?\n. I can't reproduce this.  Can you provide more specific details - like which function call in particular you aren't seeing hover tips for?\nNote that there is a lot of CGOcode in github.com/andlabs/ui, and godef has never supported hover tips on CGO function calls (not even clear it could support this since the information is only available at link time).  Are the places you aren't seeing function signatures in hover tips just on CGO calls?\n. Got it.  Sounds like this should definitely be reported in the godef repo, as it does appear there was some sort of regression there.  Closing issue here since there's nothing we can do in vscode-go to help with this.\n. Yes - this is because of the change to turn Format on Save on by default per https://github.com/Microsoft/vscode-go/issues/253.\nIt is true that Format on Save and Auto Save interact rather poorly.  Since Auto Save is off by default in VS Code, and many Go users expect Format on Save to be on by default based on experience in other Go editors, we decided that was the best set of defaults.  There's some discussion of that in issue, and we added this to the README documentation:\n\nNote: Users may want to consider turning Auto Save on in Visual Studio Code (\"files.autoSave\": \"afterDelay\") when using this extension. Many of the Go tools work only on saved files, and error reporting will be more interactive with Auto Save turned on. If you do turn Auto Save on, you may also want to turn format-on-save off (\"go.formatOnSave\": \"false\"), so that it is not triggered while typing.\n\nYou can turn off Auto Save by removing the \"files.autosave\" setting from your settings, or setting it to \"offf\".\n. I can't reproduce this myself.  Note that colorization for .go files is not actually provided by the vscode-go extension, it is provided by default in vscode.\n/cc @egamma \n. Could someone seeing this confirm what VS Code version they have, whether they see .go colorization before installing vscode-go extension and lose it afterwards, or juts never have it?\n. I just had a chance to try out this feature.  In the 4 projects I tried it in, and half dozen locations trying to extract method in each, I didn't actually find a single case where it worked :-).\nAre we sure that GoDoctor is robust enough for this integration, and if so, that the integration is working sufficiently often that this feature is a net win for the extension?\nHere are a few of the errors I saw during an Extract Method:\n- Failed to parse the patches from godoctor: Illegal escape in patch_fromText: default:\n- Error: Completing the transformation will introduce the following error: <stdin>:59:2: no new variables on left side of :=\n- Error: could not import golang.org/x/net/http2/hpack (cannot find package \"golang.org/x/net/http2/hpack\" in any of:\n- Error: Code containing return statements may change behavior if it is extracted.\nI also agree with @mattetti that the last of these makes this hard to use in practice in Go, since return statements are so common in error checking interspersed through Go function bodies.  \nAlso, in most of the projects I tried, these changes appear to have broken formatting with Cannot read property 'apply' of undefined.  And format-on-save, which is probably the most used feature of the extension, doesn't appear to get triggered at all anymore (perhaps the error above is causing that?).\nThe issues with format will need to get fixed before we can push an update for the extension, and I suspect it may be best to revert this feature from master until it is more polished such that it works a reasonable percent of the time that users try to use it.\n. Thanks @ramya-rao-a, and sorry for not reviewing this sooner! \nIt would be great to reopen this PR with the fixes for formatting so that folks can try out the Extract Method feature and provide feedback that may help inform whether GoDoctor could be further improved to be a useful extension.\n. Sounds like you don't have dlv installed correctly.  That error means that Delve is broken - normally it means it's not signed correctly.\nvscode-go doesn't automatically install Delve for you - since there is no good programmatic way to acquire it.\nIf you don't have Delve, you should get an error indicated that dlv wasn't on your path.\nThe error you are getting suggests it is on your path but doesn't work.\n. Sounds like you don't have dlv installed correctly.  That error means that Delve is broken - normally it means it's not signed correctly.\nvscode-go doesn't automatically install Delve for you - since there is no good programmatic way to acquire it.\nIf you don't have Delve, you should get an error indicated that dlv wasn't on your path.\nThe error you are getting suggests it is on your path but doesn't work.\n. Not sure there's much better we could do in vscode-go in this case.  The text there tells you the error, and googling it leads directly to the issues in Delve that cause this.\nClosing for now - but feel free to reopen if you think there's something that should be changed in vscode-go to help here.\n. This looks great - big improvement!  Left a few comments on the code changes.\n. I've merged this along with a few additional improvements that address the issues I mentioned in review and fixed a few additional related issues.  Thanks again!\n. That error message indicates a failure in Delve itself.  You'll likely want to open a bug in the Delve repo and include repro steps for investigation.\n. I can't reproduce this for autocomplete - but I can reproduce it on hover over `DecodeKeys' for example (I don't see anything in the first case above, but do in the second).\nvscode-go used gocode for autocomplete and godef for hover.  It looks like at least godef doesn't handle this kind of import correctly.  It's possible that gocode doesn't either in some cases, though I can't reproduce that with the latest gocode.\nUnfortunately, there is nothing that vscode-go can do to fix this - it would need to be addressed in those other projects.\nhttps://github.com/rogpeppe/godef\nhttps://github.com/nsf/gocode\n. Hmm - it's not clear what would be causing this.\nDo you see this on multiple different machines?\nDo you see this on a very simple project (single main.go file)?\nDo you have 'Analysis Tools Missing' in the bottom right corner of your window?\nHave you installed godef?\n. I'm weary of actively overriding the VSCode and user-defined settings as part of this extension.\nYou should be able to add this to a workspacesettings for each project already today - right?\nI'm actually not even sure it's possible for vscode-go to force different settings that whatVS Code defines.  But even if it was, I'm not sure it would be possible to let manually configured user settings override this.\nIf you want to try out an implementation of this and open a PR, happy to review that.\n. Ahh - yes - workspace settings won't work. \nI think the ability to have different tab settings per file extension is something that VSCode should really support directly. I'm not sure how else this could be supported robustly. \n. The test appears to be failing because this overload is not in the vscode.d.ts.  I tried updating vscode 0.11.14 which appears to be the latest, but I still don't see this being present.  I do see the overload present at https://raw.githubusercontent.com/Microsoft/vscode/master/src/vs/vscode.d.ts.  I'm not sure why there is a discrepancy here, but would be good to make sure this change builds correctly before merging.\n/cc @jrieken \n. @luohoufu - Can you provide a more detailed repro?\n. Closing for now - please reopen if you have more details.\n. The same thing happens for JS using template literals with backtick, so I think this is an issue with VS Code.  Can you reopen this in the vscode repo?\n. @donatj See discussion at https://github.com/Microsoft/vscode-go/pull/370.\n. That indicates that you don't have a GOPATH set in the environment in which VS Code was launched.  If you launch it with code .  from a shell with the environment you list above, you should see the right GOPATH.  If you launch directly from an OS launcher, you will need to ensure that your GOPATH is configured in your default environment.\n. What do you men by go run?\nI cannot reproduce this in any configuration.  Can you provide more details?\nNote that you can use the \"go.gopath\" setting in your Preferences > User Settings to override what's available from your environment.\nPlease reopen if you have more details.\n. Where is dlv installed on your system?  Is it in your PATH or GOPATH\\bin?\n. @blacktop That error indicates that dlv is not installed correctly.  Can you run dlv debug from your project dir successfully?\n. This is https://github.com/Microsoft/vscode-go/issues/395 which is ultimately due to https://github.com/Microsoft/vscode/issues/3422.\n. Good idea.  PR definitely welcomed.\n. I think flags would be best.  Will have to make a call about how to handle the current -v and -timeout flags that are provided by default (the latter based on a separate settings).  Perhaps leave timeout as is and make -v the default for a new testFlags setting?\n. Sorry about that. What OS and VSCode version are folks using who are seeing this?\n. I've pushed a 0.6.42 update with a fix for this.\nIf anyone is still seeing issues after upgrading to 0.6.42, please provide details on Delve version, and also  whether you are seeing \"API server listening at: 127.0.0.1:2345\" in the console.\n. I think we ultimately want to turn this off by default, but given that its causing problems, pulling this change in for now.\n. Took care of the dependency upgrade in https://github.com/Microsoft/vscode-go/commit/61a886c956193ecbca9e61472cbc04401966ea7f.  For the rest, if there are remaining changes you think should be made - want to reopen as separate PRs?\n. This is something that I think would need to be addressed in https://github.com/Microsoft/vscode.  I'd suggest moving this issue over there.  I believe all the keybindings here are VS Code defaults.  (vscode-go doesn't define any keybindings itself).\n. I believe this is the same as https://github.com/Microsoft/vscode-go/issues/431 which is fixed now.\n. Does anyone have a repro they can share?  Does this happen for everything?  Does this happen in a simple app in it's own GOPATH?\n. Going to close this - since the workaround is known, and I've updated the README.  I'm not sure there's anything great we can/should do in the extension itself at this point.  If there are suggestions on improvements to make this sort of thing smoother in the future though, PRs welcome.\n. There is actually a \"go.buildTags\" setting which handles this for all the tools that support it (build, test, rename, oracle). \nSee https://github.com/Microsoft/vscode-go/commit/083cee83cd19a6b68254a76d8dc1fb2d01ad6651.\n. Thanks for this - big improvement.\n. I've been slow on keeping up with the issues and PRs, but still available to help keep things going with the extension.  I'm going to try and get through a bit of the PR backlog in particular - there's some really good improvements here.\n. Thanks for the documentation improvements for using gometalinter.\n. Looks great - thanks!\n. This is an issue for VS Code in general.  Extensions don't participate in the match highlighting behavior.  I'd suggest moving the issue over to https://github.com/Microsoft/vscode.\n. I believe this is the same as https://github.com/Microsoft/vscode-go/issues/431 which is fixed now.\n. Goreturns is a superset of goimports which is a superset of gofmt.  So I'm not sure what scenario is not supported?\n. What OS, and do you have a full precise repro?  I tried a few times on Windows and OSX with the closest full example I could derive from the above and couldn't reproduce this.\nHappy to reopen if you have more info to investigate.\n. This is mostly intentional given the current way that VS Code chooses to present this stuff.  But it does indeed look a bit noisy.  \nIf we removed the preview of the definition location source code, that would align the behaviour with that TypeScript shows in VS Code, but I think the complaint about smushing things together still applies there, and I think the preview of source location is useful.  \nNot sure what option that VS Code supports would be better than current.\n/cc @egamma \n\n. This is not supported currently - only functions, and only from standard library.  See https://github.com/Microsoft/vscode-go/issues/87 for some discussion on this.  PRs welcome.\n. This looks like the same issue as #436 and #425.  Running gocode close should fix this. \n. @tracer0tong I've updated the README with a note.  Unfortunately, I'm not sure it's safe/wise for the extension to restart the gocode daemon everything it launches, as that would have performance implications and potentially interact poorly with other tools that use gocode.\n. @hinst did you run gocode close\n. Could you provide a more complete example of the problem?\n. A couple months back we switched to use oracle as a more official implementation of Find References.  https://github.com/Microsoft/vscode-go/commit/509d6abbe360319596d44eeebfb7917832d89dbb\nI suspect this is a dupe of https://github.com/Microsoft/vscode-go/issues/340.  Would be good to continue discussion/feedback there.\nI dod suspect that cost of Find References is proportional to size of your GOPATH, so if you work in a smaller scoped environment it may be faster.\n. PRs welcome for this.  Should be a simple addition modelled after go.buildFlags/go.lintFlags.\n. This should be what happens already (build, but not run). What makes you think tests are being run?\n. To build the tests and get compiler errors, you have to run go test -c, which compiles the tests but does not run them.  This is what the extension does.  You should not see any tests being executed by buildOnSave.  It's not clear to me that we really are seeing tests get run - it would be great to make sure we have a repro for this.\nI think the fix may be as simple as changing the documentation from: \"Run 'go build'/'go test' on save.\" to \"Run 'go build'/'go test -c' on save.\" or \"Run 'go build' on save.\" (leaving this subtle detail that go build doesn't build tests as unmentioned).\n. Nice!  Great to be able to undo renames finally :-).\nIt looks like the test failure is a real problem with the newly added tests.\nI noticed that the cursor moves sometimes after applying the rename.  I believe this was not the case previously - though it may have been an existing problem?\nThere's a lot of new custom logic related to parsing the diff.  Any chance there's an existing Node package that handles this?  It would be great not to have something custom for this extension if possible.\n. Looks great.\n. What is the issue here?  Could you share repro steps?\n. Given that these are just .s files, presumably they would need to be handled by a general purpose assembly colorizer?  Is this / should this really be Go specific?\n. Closing for now - I'm not sure this is something we would do in vscode-go vs somewhere else.\n. That error indicates that you are trying to debug a folder that doesn't have any source code.  It's a Delve error.  You likely need to point at a particular subfolder where you have the sources for a binary?\n(Note that Delve does not do the equivalent of ..., you have to actually pick what specifically you want to run.)\n. What problem is this issue tracking now?  The Delve issue is a bug in Delve that I beleive is now fixed on head.  The original F5 to run should behave as expected.  The debug output should get fixed (it was fixed, but that broke debugging in some scenarios, so was reverted).  If the last is the only open issue, could you open a separate issue on that and close this one?\n. I don't think there's any way to do this currently.  Currently the extension just uses the environment that VS Code was launched with.  PRs for a new configuration option to specify additional env vars to pass through to the go test invocation welcome.\n. Yes - this is expected default behaviour, but configurable per @egamma's comment.\n. Is there any way to continue to test gometalinter given the change in VSCode?  It seems a shame to lose the test coverage.  But it makes sense to unblock CI for now and comment this test out.\n. I tried out a slightly less invasive fix for this in https://github.com/Microsoft/vscode-go/pull/481 which looks like it works as well - so I'll merge that in as soon as tests pass.\n. Merged #481 as a fix for this.\n. It's a good idea, though unfortunately may not be easy to do with good performance.  Knowing these are interfaces requires type-checking the code, which we don't do today for colorization.  Adding this would almost certainly lead to (1) a lot more invocations of the Go compiler (2) scaling issues for larger code bases (3) changes in colorization as the editor waited on the results of compilation.\nIssue 1 and 2 might be addressed in theory if there was a resident out-of-proc incremental compiler for Go - but that doesn't appear to exist in the ecosystem and I'm not aware of anyone working on one.  Without that this sort of feature probably won't have a great user experience.\n. The current design of \"Add Import\" kind of relies on gofmt/goimports to clean up the imports instead of baking in too much fanciness to the Add Import command itself.  I'm not sure that's a bad thing.  But looks like the changes in https://github.com/Microsoft/vscode-go/pull/500 may add more of this formatting logic into Add Import.\nBroader note - this extension tries as hard as it can to not have to interpret Go code at all, leaving that responsibility to utilities written in Go which can use the official parsers and type checking logic built into the Go runtime.  This Add Import feature is one of the places where the extension goes the furthest in trying to parse and interpret Go code.  It's already a bit brittle (regexps for parsing!), and I'm worried that making it more intelligent may lead to more additional cases where it breaks in unexpected ways.\n. Got it.\nMakes sense to update go-outline with this new feature.  I think we would not want to rely on that feature as we can't force existing users to upgrade to a new version of go-outline, so we'll want to make sure the experience is acceptable in largish files even when needing to run the full go-outline.  I think it probably will be for the performance that addImport needs.\n. Just trying this out - experience is overall really nice!\nOne thing I noticed, if you have \"go.useCodeSnippetsOnFunctionSuggest\": true, then the snippet generated when you complete a method call off of a package - like bytes.Contains don't cycle correctly with tab is the use of bytes trigged an import.\n. Looks like you can get into cases where the completion list contains several copies of the same entry - referring to each of the fully-qualified but unique packages whose last sub-package is the selected name, as well as to the already imported name.\nThe latter is actually a bigger problem - if I already have imported the name, I now see it twice, once based on the actual name in scope and once as a suggestion for an Add Import.\nThe former case may require that you include the full package name in the description text.\nI think both of these will be important to fix - at least before making this the default experience.\n\n. Looks good.\n. This is most likely an issue with gocode.  You may need to report an issue there.\nIf you have a consistent repro (including specific files you are editing, exactly what \"restart\" means, etc.) that would help investigation either in gocode repo or here.\n. Are folks who are seeing this using Go 1.6 or earlier? Looks like there is a serious issue with Go pre-1.7 on Sierra that are likely related. \nhttps://github.com/golang/go/issues/16354\n. @tecbot Great to hear.  Hope that this solves others' problems as well.\n@troylelandshields Yes, this issue isn't going to be specific to VSCode - it's a problem with Go and the Go tools that are used by the editor extensions.  I expect users of any editor which uses these tools will have similar issues.\n. I just tried this myself with the latest Delve from homebrew on OS/X, and I also can't repro exactly what you mention.\nI do see that a breakpoint on line 10 in the repro you provided doesn't get hit (and turns grey).  But I see the same thing in Delve when I try to do b greetings_test.go:10 and get Command failed: no code at /Users/lhoban/go/src/github.com/mattetti/vscode-debugging/greetings/greetings_test.go:10.  I believe that is a bug in Delve.  Other than the breakpoint not registering, the behaviour seems right in VS Code.  I do see a breakpoint on line 17 working.\nThe issues you are seeing in debugService.ts may be a red-herring - it's not clear those are necessarily related to any issues here. But it's a bit hard to tell as these call stacks are inside VS Code, not inside the vscode-go debugAdapter implementation itself.\n. The first screenshot appears to be cut off.  Could you describe what it is you are expecting?\nThe colorization for .go files is actually defined in VS Code itself at https://github.com/Microsoft/vscode/tree/master/extensions/go.  Depending on what change is expected, this may need to move to the VS Code repo.\n. I'm actually not sure the original design did exclude definitions.  We did chance from using go-find-references (a tool I wrote) to using guru (a tools maintained by the Go team) back in May.  It's possible this was a result of that change.  See https://github.com/Microsoft/vscode-go/issues/340 for example.\nI think it's fine to reconsider that design - though it may make sense to align with guru, and request changes to the behaviour of guru if needed.\n. Interesting. I don't recall that being intentional, but it does look like we modified the regex specifically to handle Oracle/Guru. https://github.com/Microsoft/vscode-go/commit/509d6abbe360319596d44eeebfb7917832d89dbb\nI think it's fine to update the regex to include the definition if that matches the standard vscode experience for TS and other languages. \n. See also https://github.com/Microsoft/vscode-go/issues/564 which appears to be the same issue. \n. What would you suggest instead?  Perhaps just return binname and rely on finding it in PATH?\nEdit: Actually that won't work by itself since we use the returned path in calls to fs.existsSync.\n. Indeed - looks like we've never been writing to the cache.  We should either do that or remove the cache code for now pending figuring out how much of a perf hit this codepath is.\n. Agreed.\n. Actually both of these should be resolve(null).  The return itself doesn't matter really (just short circuits the exit from the callback).  The call to the resolve from the new Promise() above is what ensures a value is being returned from the promise.  (aside - moving to async/await will dramatically improve a lot of this code - hoping to do that soon now that TS supports this with the same Node version as VS Code uses)\n. I think the bug in the current code is in the second one of these on L36.  I haven't seen this error - do you have steps to reproduce this?\n. Huh - yeah, I see what you are saying.  Calling resolve here is definitely the right thing to be doing, but VS Code doesn't seem to be handling the returned promise correctly.  @egamma Any idea what's going on here?\n. Will this handle previous arguments that contain parens?  I would expect some balanced paren matching walking backward through the document here. \nSomething like foo(bar(), |). \n. I think you'll need to not require things to all be on the same line. \n. You could add a configuration setting in package.json to let users configure this. \n. Can combine this into the previous line as an additional import from goPath\n. Perhaps a regular for loop so you can break out early once you find the right function?\n. I think this can be null/undefined (if there is no file open). Should test for that and render warning. \n. That return won't break early since it just returns from the callback for that particular item in the collection.  There is no way to break early from a .forEach in JavaScript unfortunately.  I believe you can use for..of in TS instead here. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of\n. Curious - is this necessary?  I would have expected the default set in package.json would be provided in the configuration value you get back.\n. Can you update the error message to refer to gopkgs being the binary that's missing?\n. Here and elsewhere whitespace appears to be off.  The project uses tabs.  Could you make sure whitespace and formatting match?\n. I'd lean toward using just \"remote\" here.  The previous names in this list were all aligned with arguments to dlv, but this one won't be since it won't launch dlv itself.  In principle, it could be used to do the remote equivalent of any of the other modes, depending on what was used on the server.\n. To avoid the additional nesting here - can the remote path complete with a return and then keep the local path at top level of the Promise?  The if (this.debugProcess != null) further down can then be removed as well I believe.\n. Curly braces around this and similar in line with the rest of the formatting here.\nAlso - run npm run lint to see lint failures generally - they will fail the travis build as well.\n. I think it probably doesn't make sense to detach from the debuggee here - since the Code debugger didn't do the attach itself, it assumed the debug server was already running and attached to a process.\n. Just for consistency, the codebase typically just uses args.remotePath || \"\" style.\n. Can you use Node's path.relative or similar - to make sure missing trailing '/' and/or Windows/Unix differences are handled cleanly?\n. remoteFile perhaps?\n. One thing I was meaning to look into/change was running these serially instead of in parallel.  I'm pretty sure go get has issues when multiple gets are run in parallel, and users have reported that the existing extension occasionally runs into errors.  Since you are making changes here - may make sense to also just change this to do the gets serially?\n. FWIW -There's another open issue tracking adding this logic to all of the places where we put up an error about a tool not being available.  Would be great to address this as well either as part of this change or as a follow-on change.\n. not needed?\n. Why is the program name being passed to dlv debug?  I don't believe it takes a program name as an argument.\n. Is dlvCwd not being used anymore?\n. I think that passing this as a string will format in a slightly different way which matches what other extensions do: https://github.com/Microsoft/vscode/search?utf8=%E2%9C%93&q=%22new+Hover%22\n. condation.  Is that a typo?\n. Why is this needed?  Goreturns is the default tool, which should be a superset of goimports.  Is there an issue tracking a scenario for which this is needed (and for which we should have all vscode-go users download this additional binary?)\n. These files shouldn't be removed.  They are needed to build and debug the extension from within VS Code.\n. camelCase\n. camelCase\n. Perhaps pull all this Edit processing code into a separate file?\n. Do you intend to pass testTimeout here as in other test commands?  Or to not use goConfig?\n. Why does an editor need to be active in this case?  It sounds like the semantics for this command are not tied to what is in the current editor (if there is one).  It just executes whatever the last Go test was that was invoked.\n. Actually - looks like you are intentionally not passing testTimeout - so should drop the goConfig line.\n. Need to make sure this never fails.  Probably better to just modify the if match to capture the name as well?  I ran into failures when a line looked like import  \"byte\" for example (two spaces instead of one).\n. I actually think we can just make this the default.  No need for a new setting here. \n. Is anchoring this on pkg.start always safe?  What if there are comments in front of the imports or two groups of parenthesized imports?  Can this just be anchored at firstImport.start instead?\n. Add return type.\n. Newline at EOF\n. Perhaps \"gotests: Unit tests generated for file: \"?\n. no hyphen\n. \"Generate unit tests\"\n. Possibly minor - but this change will mean that any exceptions thrown during execution of goTest are not handled and reported to console.error.  A weirdness of .then on promises.  Possibly just leave the additional .then call.\n. Any reason not to make this required and fix up callers?\n. Doesn't the order need to be changed to ensure that the testEnvVars overrride the process environment settings?\n. Is it okay for this to be fixed at startup time, not up to date as new packages are installed into the GOPATH?\n. I think this is going to need to include the pull import path name as additional context.  I think being clear that this will \"Add an import\" is also helpful.\n. Is this a correct regexp for Go identifies that could be packages?\n. Also - to avoid the while loop - can't you bind it to match at the end of the line?  In fact, can't you avoid most of this logic by just using the regexp to match the .$ at the end of the line that you are sure is there?\n. May not matter right now - but probably good to return the promise here so it get's chained into the .then. \n. arg should be importPackageName?\n. No need to remove final newlines.\n. ",
    "newhook": "I prefer that they are installed to the current GOPATH.\nI also prefer that that the tool executables are looked up from the PATH, not from GOROOT or GOPATH.\n. I was looking at the codelens API last night. If no-one else is interested I'll take a crack at this.\n. Wow, thats awesome! So glad to see progress being made here. Can't wait to check it out.\n. How do you open the implements? ie: what key combination or menu is supposed to do that?\n. So how would the work flow go? I click on something and wait 10 seconds (or however long oracle takes for my environment) for Oracle to return me a result which I can then see? How would I know something is going on? If I understand this correctly it would be very frustrating. Also wouldn't oracle be running all the time?\n. Ok, I just merged in your branch and gave it a try. Actually, it works really well :) For longer calls such callers I think a different approach might be necessary.\n. I don't think it is possible to support this correct with the current gorename command as gorename directly changes the source files.\n. I get this message too and don't have go.gopath set (it comes from my environment also). Furthermore, pressing \"install\" doesn't do anything. What is the solution?\n. That does not solve theproblem. The GOPATH in vscode is correct, it looks for the binaries in the wrong way. Furthermore, install does not attempt to install them.\nFYI, my GOPATH is:\n/Users/matthew/go:/Users/matthew/src/services:/Users/matthew/src/services/.gopack/vendor\n. Basically what my sublime plugin does is run flymake when the file changes, and then not for a minimum of 5s (to balance responsiveness of the editor with getting error messages when typing). It works quite well. if you have questions or need help with the impl let me know.\n. I've been working on this and have it basically working :) However, one thing i ran into with the latest master is that if have:\nfoo_test.go\nand then type\npackage foo_test\nthis ends up creating a bunch of files\nf.test\nfo.test\nfoo.test\nand so forth. Is this a known issue?\n. One other thought: With support for flymake it isn't necessary or even desirable to use auto-save any longer. In fact, I would recommend against it. This means that its easy then to support gofmt (or goimport or whatever) on save - https://github.com/Microsoft/vscode-go/issues/14\n. This is just how gocode works.\nhttps://github.com/nsf/gocode/issues/91\n. Alan Donovan said with respect to this:\nbasically, if you want accurate type information for all symbols, you need to run the Go type checker, go/types (or the frontend of an existing Go compiler); anything else is at best a heuristic.  The type checker can take input two ways: from source and from compiler export data.  To load, parse, and type-check an entire program from source, you can use the golang.org/x/tools/go/loader package, but beware that for the next few months it will continue to use the similar but older golang.org/x/tools/go/types package instead of the standard type checker.  If all you need is package-level symbols, the type checker can be run in a mode in which, for speed, it does not analyze function bodies.  To load symbols from binary export data, you can use the go/importer package (or the older and slightly different versions in the x/tools repo).\nTwo caveats: First, files that import \"C\" are strictly speaking not Go source code as they require cgo preprocessing.  The loader package does this, and go/types ingests the output of this preprocessing step.   Second, some files are included in the build only on certain platforms or architectures, either because they contain //+build tags or because they have a file name like foo_linux.go, for example.  All existing analysis tools essentially pick a single configuration (e.g. amd64 linux) and pretend the other files don't exist; this is a definite weak spot.  An IDE may have to do better than this, but modifying go/types to type-check all configurations at once would be \"non-trivial\".\n. I realized that with my work on godef I have a mostly working implementation of this, so working this further :)\n. I remember an issue on this, but the linting doesn't show errors from other sources files which I find less than desirable. This is easily fixed:\nChange:\ncp.execFile(golint, [filename], {cwd: cwd}, (err, stdout, stderr) => {\nto:\ncp.execFile(golint, [], {cwd: cwd}, (err, stdout, stderr) => {\n. Cool, thanks for looking at that!\n- For the flymake_ files I'm not sure what can reasonably be done here. New files have to be created in the same directory as the package otherwise go doesn't like that and we cannot overwrite the existing files. The only option I can see here is if the editor itself can supress showing these files?\n- I cannot duplicate the issue that you pointed out with _test.go files. I only tested this with go 1.4, however.\n- I duplicated the issue with delve and cgo. I haven't looked into this in great detail yet, however, this shows the same issue.\n\u279c  proc git:(master) \u2717 go build .\nvs:\n```\n\u279c  proc git:(master) \u2717 go build arch.go breakpoints.go doc.go eval.go go_version.go proc.go proc_darwin.go ptrace_darwin.go registers.go registers_darwin_amd64.go threads.go threads_darwin.go variables.go\ncommand-line-arguments\nUndefined symbols for architecture x86_64:\n  \"acquire_mach_task\", referenced from:\n      __cgo_d5684f8859a6_Cfunc_acquire_mach_task in proc_darwin.cgo2.o\n     (maybe you meant: __cgo_d5684f8859a6_Cfunc_acquire_mach_task)\n```\n. Can you resolve the state information in the same way I did with flymake? Write a temporary file with the current editor content and run oracle on that?\n. The right hands side list seems to be off by one. It should show the type names, not the line _after the type names?\n\n. I've asked for clarification from Alan Donovan on how we can get more complete information from oracle implements.\nOne side effect of this change is all sorts of additional empty lines in the editor before type defintions. Is there anything that can be done about that?\n. This is why implements is a bit brain dead.\nhttps://github.com/golang/go/issues/13457\n. Apparently the Oracle bug is fixed. https://go-review.googlesource.com/#/c/17342/\n. So with the oracle bug fix implements now can take quite some time.\noracle -pos=$GOROOT/src/io/io.go:#9401 implements  27.02s user 2.11s system 425% cpu 6.845 total\n. I haven't tried it in my large code base since the fix. I'll give it a try tomorrow.\nI'd really like support for callers. Where do you think that makes sense? A right-click menu?\n. I think it could use the diagnostics to do this. For example, DiagnosticSeverity.Information, or Hint.\n. That's a 404.\n. I sort of feel that having the external go tools use the source files on disk as a source of truth is causing multiple issues (including this one). For example, oracle gets out of date, flymake-style builds need multiple temporary files, godef potentially not working for source file changes among others...\n. Yes, makes perfect sense. I think that while 2 might be a worthy long term goal 1 is the only realistic solution at present. I guess for gofmt then we'd need to change to feeding in the newly written file and  applying diffs to get a sensible editing experience?\nI remember reading that the intellij plugin doesn't use the go tooling, perhaps for the same reason. That said, I wonder what they did to solve this? Did they re-implement everything in java?\n. I took a quick look at this and its not clear how best to get the information. godoc doesn't seem appropriate as I don't think it is super easy to get the package information from the current symbol. Anyone have any ideas?\n. godef also doesn't work correctly in some cases with vendored dependencies. Would you object to a fork + mod to godep to get the doc comment?\n. I never looked at the impl, but now I have ... yeah questions abound! Perhaps that is why it doesn't work sometimes ;)\n. Use goimports.\n. This doesn't really have anything to do with vscode-go but rather goimports.\nI also don't see how goimports can make a decision about which is the correct import.\n. What do you mean \"same app\"?\n. Yeah, what gofmt -d does is generate the full text for both revisions and then run \"diff -u\" on them, so I'm not sure its that much different.\nI also wrote the change initially to take the gofmt -d output and then process the patch... there might be a simpler way to do this but using diff_match_patch means you need to create the patches from the text, then process the patch on the document text, then get a set of diffs and convert the diffs to edits which is more work that this implementation :) It does, however, show how a gorename impl might work.\nI've attached the implementation here.\nmkpatch.txt\n. Thats annoying, I can take a look at that. I know I was testing some edits like:\n// line, character\ninsert(0, 0, \"hi\")\ninsert(0, 0, \"hi\")\nAnd that appears to be illegal, whereas:\ninsert(0, 0, \"hi\")\ninsert(0, 1, \"hi\")\nWorked. When you try an illegal edit it just doesn't work. No feedback, no nothing.\n.  Re: the cursor until (or if) code fixes this we could compute the new offset?\n. Hopefully fixed the formatting regression with https://github.com/Microsoft/vscode-go/pull/112\n. Nice catch, the lesson here is that you cannot look at gofmt -d output to see the diff_match_patch diff patterns :)\nI tested this and haven't been able to break it yet.\n. The basic idea here is to combine deletes into deletes. delete-insert into replace. And inserts into inserts.\n. It seems the issue here is really that we clear out all errors. Perhaps only the errors/warnings related to the current package should be cleared?\n. If its inside the same package I don't think there is a problem since you should clear the errors for the current package. However, I guess the real problem could be errors outside of the current package.\na/a.go\nfunc Foo() { // Rename to foo.\n}\nb/b.go\n...\na.Foo()\n. Unless the idea of a build scope is introduced I don't think there is much better that could be done.\n. Dup of https://github.com/Microsoft/vscode-go/issues/5\n. I'm continuing to work on go-symbols with some help from Alan Donovan. I have an implementation that is more than twice as fast as the one in my current repo, but am still thinking :) I haven't touched this PR from the vscode side of things.\nIt would be interesting to have some input from the vscode authors on what symbols exactly can be shown. It isn't documented, and code seems to only show func and type.\n. Thanks for that! IMO, code should show the symbols presented to the API. In this way it is up to the extension authors to decide what types of symbols are shown.\n. Pushed change to maxBuffer. Also pushed changes to go-symbols to improve the speed, and fix the null issue if there are no symbols.\n. This PR has been languishing for some time...\n. I cannot reproduce this.\n. If I'm not mistaken this causes an error in the editor (you get a big red error saying then isn't found on undefined).\n. The original code caused that for me (since gorename isn't in my GOPATH/bin). It would would go into the block at line 29 and then return resolve(null).\n. Perhaps in the meantime the patch could be merged as it fixes an issue :) I could add a comment that this should work but does not if you like.\n. ",
    "zanven42": "i wouldn't mind it in it's own private section as long as it is easy to navigate too / find from a options menu or a button in a dialog somewhere, in case you want to do something regarding the tools.\n. +1 \n1 & 2 should cater everyones need's. i personally would probably not utilise 3. \n. @lukehoban i am running into this same issue on windows. i am running delve using your delve fork under branch 'windows'. i am able to hit breakpoints in delve but not in vscode. \njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch main.go\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}/main.go\",\n            \"env\": {},\n            \"args\": [],\n            \"stopOnEntry\": true\n        }\n    ]\n}\nconsole output ( i have tried to place breakpoints before hitting continue and already having breakpoints available )\n2016/01/19 00:46:47 debugger.go:55: launching process with args: [./debug]\n2016/01/19 00:46:47 server.go:301: method Run has wrong number of ins: 1\n2016/01/19 00:46:47 server.go:301: method Stop has wrong number of ins: 2\n2016/01/19 00:49:44 debugger.go:239: continuing\nedit: \nvscode version 0.10.6\nvscode-go version 0.6.22\nlukehoban/delve commit: 45038fde0f23837af22b068ced64799f12fc5f4b\n. also recieving the same problem\ni have also tried adding \n\"stopOnEntry\": true\nto the launch.json\n. i just checked and that pull request also fixed the issue for me, thanks again :+1: \n. ",
    "ironcladlou": "Here are what I see as some compelling benefits to installing the tooling to an isolated plugin GOPATH:\n1. Allows the user to keep an independent version of the tools in their global GOPATH\n2. Sidesteps issues with some tools requiring installation to $GOROOT/bin which isn't always user writable\n3. Opens the door for some useful configurations:\n   1. Plugin-global specification of tool versions by Git tag\n   2. Project-specific tool versions by Git Tag\nThe ability to pin a project's tools to a certain Git tag is useful for the case where you're trying to approximate a custom build environment locally in your IDE. For example, go vet produces different output across versions, and it's nice to be able to pin a project at a certain vet tag which is known to be compatible with the target build environment (like a CI system.)\nOne problem that may not be easily solved is gocode, which runs as a daemon that can't easily exist in parallel with other gocode daemons (if only there were Docker everywhere...)\nFWIW, in GoTools, I use a precedence based lookup to find support binaries (GOPATH > PATH > GOROOT).\n. > Just a note from the peanut gallery: having multiple GOPATHs, per-project or otherwise, is nonstandard, \nI'm curious to understand this statement better. Multi-element GOPATH is explicitly supported as part of the handling of GOPATH since at least 1.4, and isolating project builds using project-scoped GOPATH is a totally idiomatic in the ecosystem.\n\nand will become increasingly rare as GO15VENDOREXPERIMENT becomes the defacto standard for dependency management.\n\nI admire your optimism... :grin: \n. I personally still use separate GOPATHs per project (although thankfully no longer use multi-element GOPATH entries with the widespread adoption of 1.5+ vendoring), and so have a need (and already use) a \"global\" GOPATH that contains my tooling binaries. So, I handle tool updates manually.\nThe solution in https://github.com/Microsoft/vscode-go/pull/351 would work for me.. It's not clear to me how oracle support can be implemented without resolving the lack of explicit package scope as described in https://github.com/Microsoft/vscode-go/issues/21#issuecomment-159127425. All of the most interesting oracle commands (e.g. callers) will require a pointer analysis scope which can't be inferred by the plugin.\nAlso, I would be very careful about automating the use of oracle in any sort of mouseover or background context. The oracle implementation is slow, and I mean really slow. Most of the pointer analysis commands can take over a minute to run on a large codebase.\n. For reference, the oracle author has replaced oracle with guru. See https://github.com/Microsoft/vscode-go/issues/284.\n. If vscode-go's design goal is to delegate Find References to a single community tool (oracle/guru), I'm not sure this feature request should be directed at vscode-go. The results of Find References is going to be entirely dependent upon the capabilities/decisions of the external tool.\n. @lukehoban \nI'm the author of GoTools for Sublime and have been evaluating vscode-go. GoTools supports some test related commands I use many times a day and simply can't work without:\n- Run test at cursor\n- Run tests in package\n- Run last test\nYou can see how I implement these in the source. Maybe there's something which could save you some time coming up with an equivalent implementation.\n\nQuestion for folks looking for (1).\nShould Go: Build invoke the build in the root of the workspace that is opened in Code, or in the folder containing the file currently open in the active text buffer? Both feel potentially wrong in some set of cases.\n\nThe way I handled this in GoTools is to require users to define the package structure on a project basis. I also only support go install for the build task based on the defined project structure. For example:\n- The trivial example from the README: ExampleProject.sublime-project\n- A project file for hacking on Google's Kubernetes: kubernetes.sublime-project\n- A project file for hacking on Red Hat's OpenShift: origin.sublime-project\nThe latter two are good examples of dealing with the complexity of configuring extremely large Go projects.\nRelated for future reference: anything that requires a package scope (like oracle or go install) seems likely to thwart attempts at inference using just the workspace directory structure and files. For example, the tooling is not going to be able to infer that my main package is github.com/openshift/origin/cmd/openshift for go install or analytics. The projects I work with also produce multiple binaries. Some sort of configuration in that regard seems inevitable.\nOfftopic: Thanks for your work on this plugin, it seems really promising so far, and I'm eager to help out. I think I've hit the limit of what Sublime can be expected to provide with its limited API and UI (especially with Delve.) This project has me thinking about learning TypeScript and redirecting my efforts...\ncc @stevekuznetsov @pmorie\n. You can certainly use wildcards with test and build as very broad operations, but to break it down a little by task...\nTests:\nRunning all tests with wildcards takes too long when working on a single test. Thoughts on the other test variants:\n1. Running tests in the current file's package might be inferred through directory walking relative to the test file\n2. Running the test at cursor builds upon 1 and implies discovery of the function name at cursor to feed as a regex to go test\n3. For tests with tags, the tags for the current test can be parsed from the file's header and automatically included in the test execution\nBuilds:\nRunning go build for a single file might be fine for a simple narrow analysis, but to catch all errors across your project introduced by a change to a given file, it's necessary to compile your main programs which depend upon it. Problems I see so far:\n1. Using build is slow; using install is necessary to benefit from the compiler cache\n2. Even if you switch to install, using wildcards can catch more than you intend in a complex project. For example, I work with projects that contain one-off example go programs and utilities, often co-located  in the same directory outside of a package structure, intended to be used with go run only. Using wildcards will try building those as a single package which always fails.\nI'm pretty sure conventions/inference can get us very far with the test executions, but I haven't yet thought of a way to solve the build issues other than allowing the user to specify a list of packages to build. Perhaps ./... could be the default (which would probably work for simply structured programs) combined with a package list configuration.\n. It seems like I could implement go install for my project by defining a custom task and problem matcher. It's not entirely clear to me yet when it's appropriate to just have users make tasks vs. providing a configurable command from the plugin (followup: could a configurable command be supplied which could be incorporated in the task? e.g. an install command which accepts the package list from task arguments but which handles GOPATH and the command line construction automatically).\nStill trying to wrap my head around VSCode tasks and internals...\n. I was messing around tonight to see if I could get tasks working for go install, but the task environment always has an incorrect GOPATH (it's apparently not using process.env set by the plugin and it's also not using the GOPATH I exported before when trying code from a terminal on OS X 10.11.3).\n. This was a good issue to get a lot of discussions and work started. I now propose we close this issue in favor of https://github.com/Microsoft/vscode-go/issues/287 (for install), https://github.com/Microsoft/vscode-go/issues/73 (for run), https://github.com/Microsoft/vscode-go/issues/263 (for generate), and a new issue (if desired) for build.\n. @fervic \n\n... and another issue for go test\n\nIs there some testing need not met by the existing go test support?\n. Here's my take on go install which builds off of the unmerged #123: https://github.com/ironcladlou/vscode-go/commit/9342fa955caa3bb07800cd422ed3f2c2dfd4854e\nCan we find a good way to refactor the diagnostics handling so that the new build and install commands will feed in?\n. Related to my thoughts in https://github.com/Microsoft/vscode-go/issues/21#issuecomment-159127425\n. This is probably worth revisiting with the new guru tool (see https://github.com/Microsoft/vscode-go/issues/284).\n. > I believe this feature was implemented using the contextual menu > Find all references, maybe we should close this PR (which is quite outdated).\nAgree that this should be closed as inactive.\n. @lukehoban \nI've got a branch where I'm prototyping this feature as a new command (go.test.cursor). Test detection at the primary cursor is working nicely, and I'm on to constructing the go test command to execute which leads me to the next design decision: what are the options for integrating the results of go test with Code? In this case, we'll have a few different things to present to the user:\n1. The message emitted when the test succeeds, like:\nconsole\nok      github.com/openshift/origin/pkg/deploy/controller/deploymentconfig      0.054s\n1. The output emitted when the test fails\n2. Go source file/line number references related to the failed test (or stack traces emitted by the test code)\nI noticed that for vscode-go itself there's a debugger launch configuration which just emits the unit test output to the debug console. We also have access to the diagnostics API, but that seems a little awkward for test results- diagnostics seems to make more sense for compilers/linters/formatters, etc.\nAny tips on how to represent unit test output generally in Code from the context of a command?\n. Great ideas, thanks. I'll experiment along those lines.\nSome good news: hindsight and a little more tinkering has led me to believe I can implement \"run tests in package\" and \"run test at cursor\" without any need for package discovery of the current file. Just using go test in the right working directory in conjunction with -run regex seems to be working. Wish I had figured that out sooner for GoTools...\n. Implemented both in #123.\n. The current vscode-go actually uses autobuild=true by default, and the setting is now configurable (https://github.com/Microsoft/vscode-go/pull/283). Can this issue be closed?\n. Although I still question whether using the default of true is a good idea- perhaps some docs would be warranted.\n. This is my first time using VS Code or TypeScript or the vscode-go plugin, so feedback on anything and everything is greatly appreciated as I learn the ropes.\n. @lukehoban Feedback addressed, PTAL. If we get to a point where you want to merge, please let me know first so I can squash commits.\nI'm going to take a close look at the WallabyJS plugin per https://github.com/Microsoft/vscode-go/issues/88#issuecomment-160276790 for presentation ideas. How advanced would you like the UX before merging?\n. Rebased and addressed latest feedback. Thanks for the review!\n. @lukehoban Thanks for the merge!\n\nI made a couple of updates on top of your changes in 36dbc1d. Let me know if there's anything there that you don't like form a workflow perspective. (In particular, opening test results to the right by default? Code tends to do that in many other cases, but it's not for everyone).\n\nLove it.\n\nDo you plan to add a similar Go: Run tests in current package and Go: Run tests in workspace that run all tests in the package where the active document lives and in all packages underneath the current workspace respectively? \n\nYeah, I was thinking of doing \"test in current package\" next, then \"all tests in package/workspace\". \"All tests in file\" would also be useful but I'd like to figure out if my only option is to build up a regex for -run.\n. The concept of a build scope that I believe supports what's being asked for comes implicitly with the introduction of go install (#134). One outstanding question I had in that PR was whether it makes sense to tie the install support into the diagnostics engine. I need to get back into the plugin code to understand more about how that could/should work. For example, does it make sense to use install instead of build if user has packages defined? Could they supplement one another?\nMy workflow to account for this is usually to use the package-scoped builds for my first pass and then use go install to check for inter-package breakages. It would be nice to unify the experience.\n. @lukehoban I'd like to get back into contributing to the plugin, and closing the loop on this PR seems like a decent place to start. Do you have any thoughts on how to unify the install and build experience in terms of the diagnostics engine? My first pass at this was to basically make go install totally disjoint from diagnostics/error reporting: just run it and report the output. If you think that's useful enough for a first draft I'll go ahead and rebase and push this through with some followup issues for further discussion on an improved experience.\n. @lukehoban \n\n@ironcladlou I left a comment here (#21 (comment)) about the env issue in tasks - it should be solvable.\n\nThanks- I wrote up a reply and THEN saw the other message... :blush:\n. @lukehoban just a quick followup: I had a chance to play with your suggestion in https://github.com/Microsoft/vscode-go/issues/21#issuecomment-200582995. It works really well. One usability issue with this approach is the user needs to define a problem matcher for every task. For example, here's one I whipped up which seems to work pretty well and ensures that compilation errors during install appear in the vscode problems list:\njson\n\"tasks\": [\n    {\n      \"taskName\": \"install\",\n      \"args\": [\n        \"-v\",\n        \"github.com/openshift/origin/cmd/openshift\"\n      ],\n      \"isBuildCommand\": true,\n      \"problemMatcher\": {\n        \"owner\": \"go\",\n        \"fileLocation\": [\n          \"relative\",\n          \"${workspaceRoot}\"\n        ],\n        \"pattern\": {\n          \"regexp\": \"^([^:]+):(\\\\d+):\\\\ (.*)$\",\n          \"file\": 1,\n          \"line\": 2,\n          \"message\": 3\n        }\n      }\n    }\n]\nI notice that vscode ships with several out of the box matchers. Is there some way vscode-go can contribute a matcher which could then be referenced like $go-install? With such a reusable matcher, I think tasks work great for this (and probably many other) purposes.\n. @lukehoban \n\nFWIW - the regex currently being used inside vscode-go to extract error messages from all of go build golint and go tool vet is this:\n\nI just got a chance to test the existing regex for build/lint and it also works fine for install. I haven't had time yet to hack on VScode itself, although that may change soon since I can't wait for an official build to use a certain feature that just got committed. I might try and get to it this weekend.\n. https://github.com/Microsoft/vscode/pull/5115 provides a $go problem matcher.\n. @lukehoban \n\n(I wonder if we should retitle those as Go: Test (current file), etc. to align with the naming pattern?)\n\nContinuing to chip away at things discussed here: https://github.com/Microsoft/vscode-go/pull/286\n. Closing this PR as tasks are sufficient for the use case it meant to solve. Opened https://github.com/Microsoft/vscode-go/issues/287 to track the actual feature that emerged from discussions.\n. Can you elaborate on the problem? The test executions use the same process environment used by other tool executions, respecting the user and project level go.gopath setting.\n. @tecbot is this issue still valid?\n. Dupe of https://github.com/Microsoft/vscode-go/issues/103\n. I never found a way to implement this, but the \"Show Errors and Warnings\" command is a decent substitute in the meantime.\n/cc @lukehoban\n. Dupe of https://github.com/Microsoft/vscode-go/issues/73\n. Close enough to a dupe, at least.\n. Check this branch of my fork of the go-symbols tool which use the build context for lookups.\nI have an idea of how to make my branch backwards compatible with current go-symbols' behavior by creating a build.FakeContext, but it's low priority for me right now since the current behavior is pretty much broken for every Go project I work with due to vendor usage.\nI think this tool would also benefit from some sort of caching.\nWe might want to take this discussion to the go-symbols project. cc @newhook \n. Interesting, I haven't hit this. Although, I'm now using 1.5.3 (I've found it's actually fine for origin now that compiler cache works right for install).\nDebugging the plugin is easy. These instructions are good. It's fun to have an interactive debugger again!\n. Build on save/linting is implemented here.\n. I can reproduce this independently now. It's definitely a result of go build checks from build on save. The problem is probably related to go build combined with large projects with deep dependency graphs. I can reproduce the behavior by just doing the following in @smarterclayton's case:\n``` bash\nAssuming GOPATH is already set up correctly\ncd $GOPATH/src/my/package/subdir\nThis is what vscode is ultimately running on check:\ngo build -o $(mktemp) .\n```\nIf the package being built imports packages with lots of transitive dependencies (which is the case with the cited project), you end up with many, many go compiler processes because go build does not use the package cache (unlike go install).\nThis might be a fundamental limitation of implementing check with go build- it simply doesn't scale due to lack of a package cache. This is why in my Sublime integration I leaned heavily on go fmt for first-stage syntax checking and go install for second-stage checks. I'm not sure what the answer here will be yet, but unfortunately it means users of large projects will probably need to disable check-on-save or anything that relies heavily on go build.\n. > My understanding is that this is because gocode with autobuild=true set (which vscode-go uses by default), will populate the build cache, and go build will use the cache (it just won't populate it with new results).\nSo I sat down and did a little more work and see exactly what's going on. I'm using a quad-core 2.5ghz i7 MBP with 16GB RAM.\nTry this as a test environment (assumes godep is available):\n``` bash\nmkdir /tmp/origin\nexport GOPATH=/tmp/origin\ngit clone git@github.com:openshift/origin.git $GOPATH/src/github.com/openshift/origin\ncd $GOPATH/src/github.com/openshift/origin\nThis takes ~12s every time.\ntime $(pushd pkg/deploy/controller/deploymentconfig ; GOPATH=$(godep path):$GOPATH go build -o \n$(mktemp) . ; popd)\nThis takes ~22s every time.\ntime $(pushd pkg/deploy/controller/deploymentconfig ; GOPATH=$(godep path):$GOPATH go test -copybinary -o $(mktemp) -c . ; popd)\n```\nIn VSCode, using these settings:\njson\n\"go.gopath\": \"/tmp/origin/src/github.com/openshift/origin/Godeps/_workspace:/tmp/origin\",\nIf I open pkg/deploy/controller/deploymentconfig/controller.go, just add a newline on line 1, and save, the code is formatted and go build is invoked. Takes the same time as the shell scenario. If I open pkg/deploy/controller/deploymentconfig/controller_test.go, add a newline and save, go test is invoked, again taking the same time as the shell scenario.\nIn neither case are any pkg directories generated in any $GOPATH directories, because neither go build nor go test use the package cache.\nHere's where things get worse, but in a potentially actionable way: if you make rapid changes/saves to either file within VScode, the go build and go test processes stack up and quickly chew up all my CPU time. The cumulative effect is they all take several times longer to complete and the jet engines roar. It's likely this is what I observed and assessed to be the same manifestation @smarterclayton reported (although I can't say for sure it's exactly the same because AFAIK @smarterclayton would also have godef and godoc processes in the mix which I've hacked out of my fork for testing- which could make his problems even more pronounced than even I'm seeing).\nSide note: I had no idea about the new gocode default for the auto-cache feature; I've not used that flag it in the past because I don't like the idea of compilation occurring during completion operations, but I understand the value of it from a user experience perspective. At a quick glance I'm not seeing a configuration for it (now that I'm aware of it I'll be disabling that in my fork if necessary). Thanks for the heads up on that change.\n. I took a look at how the gocode auto-compiler is implemented, and it might work consistently in theory since it's able to specify packages to install that it knows exist and have source code to compile. I haven't got my mind around all the implications of having an external daemon doing its own mtime checks (like the go standard tooling is responsible for) and auto-compiling out of band with interactive user build flows though.\nI do agree that the \"coincidental\" installation of packages by the suggestion engine does reduce go build times as a byproduct. I'm not how I feel about the concept yet. It seems very indirect as a solution. I could theoretically get the same behavior but more predictably by just doing a go install on my own.\nAs an aside, and let me know if this would be better discussed elsewhere, but there are other problems with using gocode I'm wondering if you've considered. As I noted here when developing GoTools, there are big problems using gocode across multiple tooling environments (which extends to multiple instances of VScode itself working on separate projects). Watching the gocode daemon debug output while using vscode, I can confirm all the same issues I documented: the lib-path gocode uses for searching is inherited by the environment in which the daemon is first executed and doesn't change unless the daemon is explicitly reconfigured.\nFor example, I have two separate projects in their own isolated GOPATH trees, both of which share a common dependency. If I kill gocode, load VSCode with project A and do a completion, gocode's lib-path is now set to the GOPATH for project A. When I load project B and do a completion, gocode returns completion candidates from project A, because the gocode lib-path hasn't been re-set. In GoTools, I work around this by setting lib-path before every completion, with the caveat that this interferes with other tooling which doesn't account for lib-path.\nInterestingly, the gocode auto compiler uses the correct GOPATH when rebuilding. I haven't looked into its GOPATH resolution for that functionality yet.\n. Here's what I do for the best performance/most control:\n1. Disable gocode's autobuild feature (https://github.com/Microsoft/vscode-go/pull/283)\n2. Disable go.buildOnSave\n3. Use a task to go install as my manual compile step\nI think #283 and the existing capabilities (go.buildOnSave and the task system) are enough to close this issue. Perhaps @sgallagher and/or @smarterclayton can test.\n. > However, these two features interact imperfectly. Sometimes you pause during typing and gofmt moves code around (or goimports even removes an import you had intentionally just added). It's not unusable, but it is an acquired taste experience.\nThis is actually maddening and the reason I don't use that setting combo.\n. > @ironcladlou Out of curiosity - are you suggesting that we should not turn format-on-save on by default? Or that you don't use auto-save?\nI don't use auto-save, but if I did use auto-save I wouldn't like gofmt to run on auto-save, and would especially not like goimports to run (the annoyance of code reformat under your cursor with the bonus annoyance of import erasing as you described).\nI'm neutral towards the defaults given there are options to make everything behave as I like.\n. A related exception occurs when hovering with the \u2318 key:\nCannot read property 'file' of null: TypeError: Cannot read property 'file' of null\n    at /Users/dan/.vscode/extensions/vscode-go/out/src/goDeclaration.js:76:68\n    at process._tickCallback (node.js:369:9)\n. The Travis failure is a mystery...\n. I bundled another commit into this PR to address a related exception in GoDefinitionProvider which manifests both when using \"Go to definition\" directly and also via the HoverProvider (when hover occurs with the \u2318 key pressed).\n. A good workaround for me would be for hover to be disabled entirely unless I'm holding down a certain key (e.g. \u2318). I've been searching and can't yet find any way to accomplish it.\n. I was experimenting with disabling GoHoverProvider, which on the surface achieves my goal of seeing hover info only when holding \u2318. However, while debugging usage of GoDefinitionProvider with GoHoverProvider I noticed something else: the use of the \u2318 key itself seems to amplify the excessive godef calls. For example, with the cursor resting still in the editor area, pressing \u2318 instantly invokes the GoDefinitionProvider, even when \u2318 is immediately used in a chord for some other command (e.g. copy, paste, opening the command palette, etc.).\nThis means calls to godef are happening when the user is pressing a very common key with no intention of obtaining contextual hover information.\nI'm not yet seeing a way to configure the hover modifier key in VSCode.\n. Looks like https://github.com/Microsoft/vscode/issues/3130 tracks the capability to change the peek definition modifier.\n. I do see godoc processes spawning for each definition peek. I did verify that Electron Helper incurs the spike in CPU usage when processing the peek. Easy to reproduce by just hovering over a symbol and pressing \u2318 repeatedly. Not really a big issue in practice, unlike the HoverProvider which exhibits similar behavior but frequently due to typical mouse movement.\nDisabling the HoverProvider was the big win for me personally. Although I do agree that the default hover behaviors should be able to remain on by default and any underlying performance issues resolved, I filed some upstream issues for configuration nonetheless because I'd like the ability to make any popup behavior totally modifier driven (as a means to eliminate distractions). The performance issues are separate.\n. Probably fixes https://github.com/Microsoft/vscode-go/issues/252 for most people.\n. Turned out the change was easier than I thought it would be. Opened https://github.com/Microsoft/vscode-go/pull/285.\n. When I was reviewing the pending change set in Gerritt for completion, I think I misinterpreted the activity dates on it... Now it's not clear to me exactly how soon it might be coming. I'll try and reach out to Alan Donovan to get clarification.\n. I reached out to see what the status of that stale Gerrit changeset and offered help (not that I have that much experience to offer with that particular tool).\nDo you think there's any value in \"tracking issues\" like this which discuss/track possible future features for upcoming community tools? I had a thought that if people were generally interested in the idea, it might at least serve as publicity for the tool to drive potential contributors to accelerate its development. Or not! If you think this is just premature/noise in the issue list, please feel free to close it and I'll reopen it later when there's something actionable in vscode-go itself.\n. @ramya-rao-a \nSorry, haven't had time to track this. No hard feelings if you want to close the issue and let me or someone else re-open it when/if interest is renewed.. Haven't looked into this specific instance yet, but in general symlinks with GOPATH can be really problematic for tools.\nIf the problem is specific to gorename, an issue will need filed upstream.\n. That's too bad. My usual recommendation for these cases is to abandon symlinks and use something more transparent like bind mounts. More work to set up and maintain, but has none of the problems you'll encounter with symlinks.\n. A bit of background: the current \"test file\" implementation works like this:\n\nCollect all functions in the current file which look like test functions (regardless of the filename)\nExecute go test in the package the current file lives in with a filter (via -run) on the identified function names\n\nThe reason it works this way is because go test against a specific file (not a package) doesn't execute in the context of the file's compiled package, and rarely does what a user would want in this situation.\nGiven the design of the function, which is to actively collect and execute tests, it seems reasonable to me that the command should not bother executing go test if no test functions were found in the current file.\nIt also seems reasonable to add an additional check in the test function scanning logic to return early if the current file doesn't appear to be a _test.go file since running go test against the package wouldn't find such a file anyway.. @joeblew99 can you describe a way to reproduce the problem you're experiencing?\n. @joeblew99 what is your GOPATH set to? I don't see a go.gopath setting specified. Are you relying on environment? What do you see when running Go: Current GOPATH from the command palette?\n. @lukehoban I was in a hurry to get this working. If you like the idea, please give the factoring some review- I'm sure it could be improved.\n. I've also noticed that kind of stuff over the past few days but haven't investigated further. In the short term I prefer better go-to-definition support and so don't mind the hover regressions, but I agree we shouldn't switch without a solution. I'll see if I can come up with something.\n. I'd like to close this PR. godef now supports vendoring and is significantly faster.\n. Totally agree. Great idea.\n\nOn Jan 13, 2017, at 2:38 AM, Ahmet Alp Balkan notifications@github.com wrote:\n@samherrmann @ramya-rao-a Is there a reason why this is implemented as an environment variable and not a configuration key in user's vscode profile? The way I see it, people run vscode as code . and you can't expect them to have this ENV key set at all times. (I certainly do not wish to be in that business.)\nI think a config key would be a \"less ephemeral\" solution and would preserve between launches. For instance, I manually install all go tools to my ~/gotools folder, I wish I could just set it to a vscode preference key and forget about it forever and vscode would handle things for me (such as perhaps periodically updating these tools).\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @lukehoban did you figure that out? I was pulling this locally (because I like the change) and am running into the same issue with vscode-go master (+ some of my PRs) and vscode 1.5.2.\n. Prior to this issue I hadn't noticed that buildOnSave was described as having behavior for tests. That particular functionality predates my involvement in the extension.\n\nThat said, separating testOnSave from buildOnSave makes good sense to me.\n. @lukehoban do you have any idea what's up with those Travis failures?\n. @ramya-rao-a, thanks for tracking down that Travis issue!\n. Added a small commit to rename the title of the command to something more auto-complete friendly (as a complement to https://github.com/Microsoft/vscode-go/pull/495).\n. Squashed commits.\n. Will this be merged?\n. @ramya-rao-a Thanks! How do I trigger a new build without making some dummy commit?\n. What platform and version of Go? I'm using gorilla/mux (and other Gorilla packages) and completion works fine for me (OSX 10.11.6 / Go 1.7).\n. The VSCode 1.8 release has a neat new feature which allows binding shortcuts which pass arguments to commands. Would it make any sense to register a generic go.test command which can be invoked with arguments which can amend or override certain things (like the test flags)? For example, the following might be possible:\n{\n  \"key\": \"cmd+shift+t\",\n  \"command\": \"go.test\",\n  \"args\": {\n    \"mode\": \"package\",   // runs all tests in the current package\n    \"flags\": [\"-short\"]  // adds some flags to the internal default flag list\n  }, \n  \"when\": \"editorTextFocus\"\n}\nThinking further, it might even be possible to refactor the \"core\" test runner command in such a way that one could use it to drive the test runner in any context (e.g. at cursor, in package, in file) in a custom key binding. Ultimately the existing more specific commands are just setting up different input to a generic test runner function.\nSeems like we could come up with something flexible enough to enable users to build out whatever test executions they need. Coming up with a list of use cases would be helpful to figure this out, and probably in a separate issue.\nContinuing to add small variants of the test runner options as formal commands for every use case would also work, but would lead to command clutter.\nHope this wasn't overly analytical! Thanks for the cc, @ramya-rao-a, and thanks for opening the discussion @calrsom.\nP.S., if there's any interest in the generic command idea, I have free time over the next couple weeks and would be happy to work on it.. @ccirello\nTry:\ngo test -v -timeout 30s\nThe -tags flag requires an argument.\n@ramya-rao-a \nInterestingly, we're passing the tags flag even when no go.buildTags is set, which is wrong, but surprisingly, works. In the debugger, I can see the args array we build:\n0:\"test\"\n1:\"-v\"\n2:\"-timeout\"\n3:\"30s\"\n4:\"-tags\"\n5:\"\"\nI wonder if cp.spawn() is quoting the empty argument value? For example, -tags '' works.\nP.S., what's the correct way to log to the developer console from within the plugin?. A self-contained example would be helpful, as I can't reproduce any of the reported behavior.. I think go list might get us the import package needed  for the -scope argument for the common case. I need to read up on ImplementationProvider to understand whether it's meant to cope with the multiple implements results (I'd expect something similar to the CodeLens view presented for Find References). I've really been wanting guru  implements lately, and performance now seems good enough for me.\n```\n$ pwd\n/Users/dan/Projects/kubernetes/src/k8s.io/kubernetes\n$ go list -e -json\n{\n        \"Dir\": \"/Users/dan/Projects/kubernetes/src/k8s.io/kubernetes\",\n        \"ImportPath\": \"k8s.io/kubernetes\",\n        \"Stale\": true,\n        \"StaleReason\": \"errors loading package\",\n        \"Root\": \"/Users/dan/Projects/kubernetes\",\n        \"Incomplete\": true,\n        \"Error\": {\n                \"ImportStack\": [\n                        \"k8s.io/kubernetes\"\n                ],\n                \"Pos\": \"\",\n                \"Err\": \"no buildable Go source files in /Users/dan/Projects/kubernetes/src/k8s.io/kubernetes\"\n        }\n}\n```\n. I don't have much to add here at the moment. I don't use test-on-save, and make use of the \"run last test\" (and other commands) to re-execute a specific test scope after changes. So far that workflow feels adequate to me, and I'm not sure additional test-on-save features offer an improvement.. Cool feature! Any objection to a feature level config option? I can imagine wanting to disable this feature without disabling CodeLens generally.. @ramya-rao-a \n\nAny particular reason you would want to turn it off?\n\nPerhaps the user only uses keyboard shortcuts for this and doesn't want an editor row occupied by the hints for every function. Vertical editor space is often precious.. @ramya-rao-a \n\nLooking at history, it seems initially we only identified \"Test\" functions. And then somewhere along the line, we added \"Example\". Do you know of any reason why \"Benchmark*\" was excluded?\n\nAt the time, I just didn't think about them because I didn't use benchmarks. So, no special reason. \ud83d\ude01  I absolutely think the plugin should support them!\nThinking about them now:\n\nBenchmark functions do seem distinct from tests in practice and I'd expect benchmarks to not get executed automatically when running \"test\". I'd be interested to discuss this if there's any disagreement.\nAlthough I don't have a ton of experience with Go's benchmarking support, I suspect the benchmarks often rely on user input (e.g the -benchtime, and -count flags). I'd be interested to hear anecdotes on this point.\nI wonder how fancy one could get with the new progress UI support...\n\nIf point 2 turns out to be true, is there any good way to collect user input for the benchmark executions within the VScode UI? I clearly haven't had much time to keep up with plugin or VScode development lately, so I'm not sure what capabilities exist.\nThanks for the ping, @ramya-rao-a! Sorry I haven't been able to contribute more than words lately! . \n\nOn Jul 20, 2017, at 9:15 PM, Ramya Rao notifications@github.com wrote:\nProgress/working indicator\nExtensions needn't worry about this. Once we implement the Implementation Provider, there would be a new context menu entry \"Go to implementation\" just like \"Go to definition\"\nIf the process takes long, VS Code will take care of showing the progress indicator, just like it does whenever I try to rename anything on my slow Windows machine :(\nHm, I I didn't notice vscode giving me any feedback while the command was running for 15s... where should I look?\nAudit necessary library updates\nAre we talking about versions of guru that might not implement the \"implements\" command?\n\n\nWhoops, I was very unclear- I was referring to the vscode dependency/engine version updates to get the ImplementationProvider interface.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. @ramya-rao-a \n\nWith my branch, I'm trying to package up the plugin for sideloading using the new vscode-go build instructions and I'm getting this error from vsce. Any idea?\n```\n$ vsce package\nExecuting prepublish script 'npm run vscode:prepublish'...\n\nGo@0.6.63 vscode:prepublish /Users/dan/Projects/vscode-go\ntsc -p ./\n\nError: Command failed: /bin/sh -c npm list --production --parseable --depth=99999\nnpm ERR! extraneous: amdefine@1.0.0 /Users/dan/Projects/vscode-go/node_modules/amdefine\nnpm ERR! extraneous: asn1@0.1.11 /Users/dan/Projects/vscode-go/node_modules/asn1\nnpm ERR! extraneous: assert-plus@0.1.5 /Users/dan/Projects/vscode-go/node_modules/assert-plus\nnpm ERR! extraneous: async@1.5.2 /Users/dan/Projects/vscode-go/node_modules/async\nnpm ERR! extraneous: aws-sign2@0.5.0 /Users/dan/Projects/vscode-go/node_modules/aws-sign2\nnpm ERR! extraneous: bl@0.9.5 /Users/dan/Projects/vscode-go/node_modules/bl\nnpm ERR! extraneous: bluebird@2.10.2 /Users/dan/Projects/vscode-go/node_modules/bluebird\nnpm ERR! extraneous: caseless@0.10.0 /Users/dan/Projects/vscode-go/node_modules/caseless\nnpm ERR! extraneous: ctype@0.5.3 /Users/dan/Projects/vscode-go/node_modules/ctype\nnpm ERR! extraneous: diff-match-patch@1.0.0 /Users/dan/Projects/vscode-go/node_modules/diff-match-patch\nnpm ERR! extraneous: event-stream@3.1.7 /Users/dan/Projects/vscode-go/node_modules/event-stream\nnpm ERR! extraneous: extend@2.0.1 /Users/dan/Projects/vscode-go/node_modules/extend\nnpm ERR! extraneous: find-index@0.1.1 /Users/dan/Projects/vscode-go/node_modules/find-index\nnpm ERR! extraneous: gaze@0.5.2 /Users/dan/Projects/vscode-go/node_modules/gaze\nnpm ERR! extraneous: glob-watcher@0.0.8 /Users/dan/Projects/vscode-go/node_modules/glob-watcher\nnpm ERR! extraneous: glob2base@0.0.12 /Users/dan/Projects/vscode-go/node_modules/glob2base\nnpm ERR! extraneous: growl@1.8.1 /Users/dan/Projects/vscode-go/node_modules/growl\nnpm ERR! extraneous: gulp-remote-src@0.4.0 /Users/dan/Projects/vscode-go/node_modules/gulp-remote-src\nnpm ERR! extraneous: har-validator@1.8.0 /Users/dan/Projects/vscode-go/node_modules/har-validator\nnpm ERR! extraneous: hawk@2.3.1 /Users/dan/Projects/vscode-go/node_modules/hawk\nnpm ERR! extraneous: http-signature@0.11.0 /Users/dan/Projects/vscode-go/node_modules/http-signature\nnpm ERR! extraneous: lru-cache@2.7.3 /Users/dan/Projects/vscode-go/node_modules/lru-cache\nnpm ERR! extraneous: mime-db@1.22.0 /Users/dan/Projects/vscode-go/node_modules/mime-db\nnpm ERR! extraneous: node-uuid@1.4.7 /Users/dan/Projects/vscode-go/node_modules/node-uuid\nnpm ERR! extraneous: ordered-read-streams@0.1.0 /Users/dan/Projects/vscode-go/node_modules/ordered-read-streams\nnpm ERR! extraneous: qs@3.1.0 /Users/dan/Projects/vscode-go/node_modules/qs\nnpm ERR! extraneous: request@2.58.0 /Users/dan/Projects/vscode-go/node_modules/request\nnpm ERR! extraneous: sigmund@1.0.1 /Users/dan/Projects/vscode-go/node_modules/sigmund\nnpm ERR! extraneous: source-map@0.1.32 /Users/dan/Projects/vscode-go/node_modules/source-map\nnpm ERR! extraneous: source-map-support@0.3.3 /Users/dan/Projects/vscode-go/node_modules/source-map-support\nnpm ERR! extraneous: split@0.2.10 /Users/dan/Projects/vscode-go/node_modules/split\nnpm ERR! extraneous: tough-cookie@2.2.1 /Users/dan/Projects/vscode-go/node_modules/tough-cookie\nnpm ERR! extraneous: underscore.string@3.1.1 /Users/dan/Projects/vscode-go/node_modules/underscore.string\nnpm ERR! extraneous: vinyl@0.2.3 /Users/dan/Projects/vscode-go/node_modules/vinyl\nnpm ERR! extraneous: defaults@1.0.3 /Users/dan/Projects/vscode-go/node_modules/defaults\nnpm ERR! extraneous: findup-sync@0.2.1 /Users/dan/Projects/vscode-go/node_modules/findup-sync\nnpm ERR! extraneous: form-data@1.0.0-rc3 /Users/dan/Projects/vscode-go/node_modules/form-data\nnpm ERR! extraneous: glob-stream@4.1.1 /Users/dan/Projects/vscode-go/node_modules/glob-stream\nnpm ERR! extraneous: globule@0.1.0 /Users/dan/Projects/vscode-go/node_modules/globule\nnpm ERR! extraneous: gulp-symdest@1.0.0 /Users/dan/Projects/vscode-go/node_modules/gulp-symdest\nnpm ERR! extraneous: gulp-vinyl-zip@1.1.2 /Users/dan/Projects/vscode-go/node_modules/gulp-vinyl-zip\nnpm ERR! extraneous: merge-stream@0.1.8 /Users/dan/Projects/vscode-go/node_modules/merge-stream\nnpm ERR! extraneous: jade@0.26.3 /Users/dan/Projects/vscode-go/node_modules/jade\nnpm ERR! extraneous: mime-types@2.0.14 /Users/dan/Projects/vscode-go/node_modules/mime-types\nnpm ERR! extraneous: mocha@2.4.5 /Users/dan/Projects/vscode-go/node_modules/mocha\nnpm ERR! extraneous: through2@0.5.1 /Users/dan/Projects/vscode-go/node_modules/through2\nnpm ERR! extraneous: vinyl-fs@1.0.0 /Users/dan/Projects/vscode-go/node_modules/vinyl-fs\n``. @ramya-rao-a thanks, updating npm fixed it. I simplified the code and compared it very carefully to theReferenceProviderimplementation, but I'm still not seeing any \"Loading...\" feedback (as I do for Find References). As far as I can tell, I'm setting up the processes in the same way asgoReferences.ts`, but I must still be missing something. The results ultimately come back and work fine, but there's clearly no progress being displayed.. @jrieken \n\n@mjbvz Maybe this was totally communication failure but I wanted it to be like reference search but you didn't, see: Microsoft/vscode#23925. Instead this is implemented as a \"go to (definition|type definition|etc)\"-thing which assumes going to the source of something is fast and therefore has no loading indication.\n\nI opened https://github.com/Microsoft/vscode/issues/31666 to discuss this.\n. I'm interested in a generalization of this concept for remotely editing code in a VM or container.\nA possible way forward here might be additional language server client configuration options. The language server could be anywhere (e.g. the host, a VM, a container), colocated with the source, and the plugin could easily support that use case.\nHowever, to actually be useful I suspect we'll need a comprehensive language server to which nearly all useful analysis operations can be delegated (including those in the Go toolchain itself, e.g. vet and even list).\nIf any of that makes sense, maybe https://github.com/dominikh/go-tools/issues/136 is the first focus area?\n/cc @ramya-rao-a . vscode 1.26 and breadcrumbs work for me using 6614329 (macOS 10.13.1, go 1.10.3).. Is this a duplicate of https://github.com/Microsoft/vscode-go/issues/1850? Using vscode 1.26 and vscode-go @ 6614329 I can't reproduce the problem (macOS 10.13.1, go 1.10.3).. I do break early using the return on L32, but I can switch to a normal for loop if that's more clear.\n. Done\n. Done\n. Done\n. I'm probably being overly defensive/paranoid. The config value isn't being strongly validated.\n. Ohhh, I see. Thanks!\n. Kind of scary to do a blanket kill with a pattern match. Would be far safer to track PIDs if anything.\n@lukehoban, process management seems like something VScode or Electron should provide some facilities for. Any clue?\n. IMO it would be clearer if each function had a single conceptual responsibility. A function to run a program/main, and a function to run a test. I'm not quite seeing the benefit of grouping these together.\n. The go.test.cursor command is already registered here.\n. s/curso/cursor\n. I think this brings the feature a little close to overlapping with the task system. It seems highly unlikely that a single project-scoped argument array for a main will be applicable to every main you might try to run with an ad-hoc \"run main at cursor\" command. If you need to statically define arguments and stuff, there's a robust task runner system already in place.\n. I intentionally disregard any settings as the intent of the command is to repeat the last test exactly as it was previously executed. I can imagine how you might want your timeout setting to override whatever's stored, but I wanted to keep it simple. Thoughts?\n. You're right, I'll remove that check.\n. Removed the config lookup for now.\n. Removed the editor check.\n. I like the idea of using testFlags for build/test flags to the test command. Should we remove support for buildFlags here, given there is no distinction in go test between build and test flags? Having both is redundant and confusing to me given your new option.\n. @ramya-rao-a\n\ntestTimeout should not be a separate setting and should be included in the testFlags setting\n\nHm. Wouldn't it then follow that buildTags should be merged into buildFlags? After all,  -tag is just another buildFlag. I do see value in adding convenient strongly typed wrappers around the most common flags, but those would need to be easily omitted so that users can have absolute control over flags.\n. The -scope argument expects a package pattern, which in this implementation I chose to make recursive (e.g. if the current package according to go list is github.com/my/lib, the -scope will be set to github.com/my/lib/... since it seems likely you want to find implementations across all packages in your project relative to the base package).\nHere are the docs for scope as applies to implements:\nThe -scope flag restricts analysis to the specified packages.\n        Its value is a comma-separated list of patterns of these forms:\n                golang.org/x/tools/cmd/guru     # a single package\n                golang.org/x/tools/...          # all packages beneath dir\n                ...                             # the entire workspace.\n        A pattern preceded by '-' is negative, so the scope\n                encoding/...,-encoding/xml\n        matches all encoding packages except encoding/xml.\nUsing -scope=... seems the most generic but probably the slowest (although the difference could be negligible for typical projects... for Kubernetes, a random analysis I have chosen takes 13s scoped to k8s.io/kubernetes/... and 28s scoped to ...).\nI'm not sure what the right assumptions to make are for the typical user. In my case, I always open a package base directory when working with Go projects in VSCode. I'm sure the upcoming multi-root support will further complicate matters here.\nMaybe there's some value in supporting a variety of scope strategies so users can either preset or interactively choose a scope for these sorts of analysis operations with guru?\nSeems like no matter what we try to infer we're going to be wrong some of the time, but a default of some kind is clearly necessary.. ",
    "peterbourgon": "Just a note from the peanut gallery: having multiple GOPATHs, per-project or otherwise, is nonstandard, and will become increasingly rare as GO15VENDOREXPERIMENT becomes the defacto standard for dependency management.\n. > Multi-element GOPATH is explicitly supported as part of the handling of GOPATH since at least 1.4\nYes, that's true. (Even before then, IIRC.) The intent was to allow a two-tier GOPATH hierarchy, e.g.\nGOPATH=/path/to/global/gopath:/path/to/my/gopath\nThe go tooling, e.g. go get, would always write to the first path, which could be interpreted as \"not my code\", and you could keep your code in the second path, to allow a kind of simple hermetic separation. But not many folks ever used it. And it's much less important now that we have the vendor/ standard for third-party code.\n\nisolating project builds using project-scoped GOPATH is a totally idiomatic in the ecosystem.\n\nSorry, that's not true. [edit: I guess I should be more precise and say I don't agree :)] \u2014 It's definitely possible, but repos and projects which represent their own GOPATH are and have always been nonidiomatic, as they're incompatible with go get. The only reason to do it (that I'm aware of) was to have explicit control of dependencies (and, I guess, for projects which are not pure Go) \u2014 but, again, the vendor/ standard obviates that need.\n. Go installed via brew install go.\n$ go version\ngo version go1.5.3 darwin/amd64\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/peter\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.5.3/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.5.3/libexec/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"1\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nVSCode installed via brew cask install visual-studio-code. \nHere's what the developer console shows when I hold command and hover or try to click on e.g. Errorf:\nTypeError: Cannot read property 'file' of null: TypeError: Cannot read property 'file' of null\n    at /Users/peter/.vscode/extensions/lukehoban.Go-0.6.26/out/src/goDeclaration.js:75:68\n    at process._tickCallback (node.js:368:9)\nHow do you create those handy gifs? :)\n. ``` fish\nugh ~/src cat test.go\npackage main\nimport \"fmt\"\nfunc main() {\n    _ = fmt.Errorf(\"hello\")\n}\nugh ~/src godef -t -i -f test.go -o 59 < test.go\ngodef: no declaration found for fmt.Errorf\nugh ~/src _\n```\n. \u2639\ufe0f\n:GoDef working for everything except Go standard library\nfish\nugh ~/src go get -u github.com/rogpeppe/godef\nugh ~/src godef -t -i -f test.go -o 59 < test.go\n/usr/local/Cellar/go/1.5.3/libexec/src/fmt/print.go:211:6\nErrorf func(format string, a ...interface{}) error\nugh ~/src _\nConfirmed working in Code. Sorry for the noise. Maybe you can file this away as a troubleshooting tip in the future.\n. I presume compiling godef builds the GOROOT into the binary, and when I upgrade from e.g. go1.5.1 to go1.5.3, the old godef gets confused.\n. Oh! This is exactly what I wanted. I missed the option. Thank you. (I'd vote for it to be enabled by default, of course!)\n. I don't want to always insert a tab character across all files. I want VS Code to be smart about it, i.e. spaces in .py and .rb files, tab literals in Makefile and .go files, etc.\nedit: my guess is that the algorithm within VS Code that determines what character to insert in \"auto\" mode is confused by the mixture of tabs and spaces in .go files. And so I'm proposing that the vscode-go extension can provide some help :) and make it clear that tab should insert tabs.\n. Ah, okay! Will do :)\n. When resolving import paths for vendored code, the compiler starts at the current directory and walks backwards, up to $GOPATH, looking for directories called vendor.\n. Changing the import name isn't a 10% case, or even a 1% case. It's fine to have the user do this manually.\n. The only error that pops up is \nparams[i].trim is not a function: TypeError: params[i].trim is not a function\n    at /Users/peter/.vscode/extensions/lukehoban.Go-0.6.39/out/src/goSuggest.js:91:63\n    at ChildProcess.exithandler (child_process.js:205:7)\n    at emitTwo (events.js:100:13)\n    at ChildProcess.emit (events.js:185:7)\n    at maybeClose (internal/child_process.js:850:16)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:215:5)\nbut it happens when I'm still typing the letters, rather than when I hit the dot and expect the dropdown.\nHere's a video, if it helps.\n. And here's a video of me restarting and getting it working again. (It crashed when I quit, that isn't normal, maybe has to do with developer tools being opened?) You can see after I restart that error doesn't pop up anymore, so maybe it is related!\n. This is pretty thin evidence, because it's possible it was broken before \u2014 but I just had it happen when I imported a new package and gave it an alias, e.g.\n``` go\nimport (\n    \"fmt\"\n    httptransport \"github.com/go-kit/kit/transport/http\" // <-- typed this line\n)\nfunc foo() {\n    httptransport. // failed\n}\n```\n. I haven't noticed this in the past few months. I've just tried exactly the steps I gave above and failed to reproduce. So I guess something got fixed in the interim. Thanks for the followup! I'll let you close the issue if you think it's OK.. @ramya-rao-a While it does work like that sometimes, I can easily get vscode-go into a state where subsequent imports are added one-by-one, i.e.\ngo\nimport \"fmt\"\nimport \"math\"\nimport \"os\"\nIMO there's no reason not to use the import grouping form all the time. That is, even when I just have a single import, I want it to look like\ngo\nimport (\n    \"fmt\"\n)\nPerhaps we can change it to simply have this behavior?\n. > I think this was intentional so that if someone has separate imports to begin with, the status quo is maintained.\nIf you have more than 1 import then you always want them grouped.\n``` go\n// Always this.\nimport (\n    \"fmt\"\n    \"os\"\n)\n// Never this.\nimport \"fmt\"\nimport \"os\"\n```\nIf you have only 1 import then it can be without parens, but there's no reason it needs to be.\n``` go\n// This is fine.\nimport \"fmt\"\n// But this is no less correct.\nimport (\n    \"fmt\"\n)\n```\n. You haven't installed go properly. I recommend you review the installation instructions.\n. ",
    "mattetti": "@ramya-rao-a can we please close this issue. Between Go not encouraging this approach and the support for vendoring, I think it's fine to close this old issue.. @ramya-rao-a can we please close this issue. Between Go not encouraging this approach and the support for vendoring, I think it's fine to close this old issue.. As long as the default location doesn't change I am fine. Not understanding why doing a go get -u on a tool doesn't update the version used in VSCode is problematic.. Sorry for the confusing message, that's exactly what I meant. Whoever will choose 2 go bin locations will find itself in this scenario. Same question here, I'm having issues with the debugger and wish I could see the output, I'm sure it's somewhere obvious that I just can't find :(\n. @jchannon when I do that, it only shows the git output\n. thanks @shurcooL but it looks like the debugger isn't logging anything when launching, I was having issues with the debugger because I didn't properly install dlv on OS X: https://github.com/Microsoft/vscode-go/issues/20\nI did wish there was a way to see stdout output somewhere but it might be up to the extension you use.\n. This issue can be closed now that the feature is implemented and documented :)\n. This issue can be closed now that the feature is implemented and documented :)\n. The first thing might be to not tell users to go get delve on this page: https://marketplace.visualstudio.com/items/lukehoban.Go  It looks like the issue I'm encountering is due to the fact that I installed on OS X without noticing that I should be signing the binary. I'm also not getting any errors being reported or logs so it's a bit hard to understand what's wrong. I'll properly reinstall delve and see if it helps :)\n. Alright, so after reinstalling with the cert, everything looks good with the exception of my local variables not showing up (but hovering them in my code displays the values)\n. @caledhwa I went into the delve repo that I go get'd, created a cert and used make install with the cert info to rebuild and reinstall delve.\n. Just in case someone finds this old issue, it is indeed fixed and it works great.\n. This is already tracked in https://github.com/Microsoft/vscode-go/issues/14 and it's on the roadmap (feel free to contribute, I'm sure @lukehoban would appreciate any help)\n. I believe this feature was implemented using the contextual menu > Find all references, maybe we should close this PR (which is quite outdated).\n. @maxence-charriere are you sure you didn't switch theme, check the Jan update on themes: https://code.visualstudio.com/updates#vscode  you might just need to switch to Dark+\n. I agree with @ramya-rao-a that would be really great, @roblourens can you help by any chance?. @ramya-rao-a can we mark this as a duplicate of #438 and close this issue?. interesting comparison, I'd probably go with impl because of the AST and performance. Note also that our good friend @fatih of awesome vim-go has been using impl for a while and therefore vetted it for us :) https://github.com/fatih/vim-go/blob/master/plugin/go.vim#L23. Luke, thanks for looking into this issue. Unfortunately I don't really want to run a command manually, I want to get feedback as tools automatically run in the background. For instance, when saving, go build, go vet and probably other tools are running. When possible, some output is shown within the IDE, but that's not always the case and the information is lost. I wish all stdout/stderr would be redirected to an output I could look at anytime.\nDoes that make sense?\n. This is awesome, thank you so much. I think that now @goinggo won't have any excuses to not use VScode, his main excuse was the lack of go build output ;)\n. @lukehoban is that feature now in vscode? It would be really great if we could add a context menu to show interfaces a value/type is implementing. That can be done using guru implements query (we already use guru): https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view#heading=h.15us5y9rxrbh\n. Sounds like we should close this issue. While this is indeed a problem, I'm afraid this isn't a VSCode specific issue and therefore I'd suggest we close this issue @ramya-rao-a . It's really cool but as a VS Code user and a Docker for Mac beta tester, I would probably still not want to run VSCode in a container unless I need to write code for Linux only for instance (raspberry programming or whatever).\n. @dylan-bourque if the issue has been solved would you mind closing this issue? (too bad we don't know what component fixed the issue tho).. I do see something weird too, it looks like one of the tools is dying in a panic but I can't see any logs (in the output panes or developer tools)\n\n. @jrieken any clue on how to debug this issue? I'd be glad to give a hand\n. @OneOfOne thanks a lot, I went back to VSCode 1.0 and still saw the error. I'm indeed on 1.7 and not planning on going back ;)\n. Is that still an issue? AFAIK the debugger integration received a bunch of fixes over the last few months and hopefully that specific problem was fixed within the last 8 months.. I agree with @epsniff, the issue OP is trying to address can be fixed in a way that wouldn't surprised programmers who don't expect their go path to be modified.\n. This is a cool feature/tool @ramya-rao-a!  Would you mind checking why the build is failing? It might also be nice to add this feature to the context menu now that it's available to extensions.\n. Looks like something is wrong with the cert used by 9fans.net used by github.com/rogpeppe/godef:\nimport \"9fans.net/go/acme\": https fetch: Get https://9fans.net/go/acme?go-get=1: x509: certificate has expired or is not yet valid\n. @egamma it turned out the internet connection at the conference wasn't good enough for the live streaming so we postponed the event. I however showed off VS Code to many people, especially because there was a talk on Guru (used by VS Code) and Delve (the debugger used by Code). Lots of people were very impressed by how fast and feature full VS Code for Go is.\nI'll side-load master and show the refactoring function tomorrow during the hack day.\nThanks a lot\n. One small detail: make sure to restart Code (I forgot the first time around ;))\nA few things about this new feature, while it's the promise of this refactoring tool is really exciting, the practical use case seems to be pretty limited. I couldn't extract code with return statements, I saw weird errors of undefined types (no idea what was going on) and finally this interesting error: Error: Completing the transformation will introduce the following error: <stdin>:201:2: no new variables on left side of :=\nThe error is interesting because it's meaningless for the user, I have not idea what code is on line 201 of the stdin buffer, and no idea why it ended being an error. My guess is that my extracted code was added as a function but the new code wasn't valid (it needed some massaging?), so the underlying tool failed with this cryptic error.\n@ramya-rao-a did you have good luck using this refactoring tool? It's highly possible I got very unlucky and the code I was trying to refactor wasn't a good example.\n. I talked with my friend Fatih who develops and maintains go-vim. He told me\nhe chose to not integrate this tool on purpose, apparently because it\ndoesn't seem to work quite right and he would have to  deal with support.\nI am excited about the opportunity of having a great refactoring/function\nextractor but I would suggest to wait until we have a more solid solution.\nOn Sat, Jul 16, 2016, 12:01 Luke Hoban notifications@github.com wrote:\n\nI just had a chance to try out this feature. In the 4 projects I tried it\nin, and half dozen locations trying to extract method in each, I didn't\nactually find a single case where it worked :-).\nAre we sure that GoDoctor is robust enough for this integration, and if\nso, that the integration is working sufficiently often that this feature is\na net win for the extension?\nHere are a few of the errors I saw during an Extract Method:\n- Failed to parse the patches from godoctor: Illegal escape in\n  patch_fromText: default:\n- Error: Completing the transformation will introduce the following\n  error: :59:2: no new variables on left side of :=\n- Error: could not import golang.org/x/net/http2/hpack (cannot find\n  package \"golang.org/x/net/http2/hpack\" in any of:\n- Error: Code containing return statements may change behavior if it\n  is extracted.\nI also agree with @mattetti https://github.com/mattetti that the last\nof these makes this hard to use in practice in Go, since return statements\nare so common in error checking interspersed through Go function bodies.\nAlso, in most of the projects I tried, these changes appear to have broken\nformatting with Cannot read property 'apply' of undefined. And\nformat-on-save, which is probably the most used feature of the extension,\ndoesn't appear to get triggered at all anymore (perhaps the error above is\ncausing that?).\nThe issues with format will need to get fixed before we can push an\nupdate for the extension, and I suspect it may be best to revert this\nfeature from master until it is more polished such that it works a\nreasonable percent of the time that users try to use it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/370#issuecomment-233145671,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcWVZ8XzCx-QiSFjf4b9vQZqtLTAhks5qWSqfgaJpZM4JCo2Y\n.\n. $ dlv version\nDelve Debugger\nVersion: 0.11.0-alpha\nBuild: b9b3e4ac03c1033fe6a8866813670fe58e96e0fd\n$ go version\ngo version go1.6.2 darwin/amd64\n$ code --version\n1.3.0\n\nNot seeing this issue here. Have you tried other libraries?\n. Is there a way to register default config entries so users can be started right away? I couldn't find anything in the extension documentation.\n. @egamma Ideally, we would add the following settings to the user's settings.json file:\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildTags\": \"\",\n    \"go.buildFlags\": [],\n    \"go.lintTool\": \"golint\",\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n    \"go.gocodeAutoBuild\": false\n}\nAll users I onboarded expected to be able to edit some sort of settings file. Having to find the README to see what settings can be set is quite challenging. I didn't even know we could switch the default lint tool until I dug into the code. \nI do realize that if each extension starts adding settings it might get messy but at this point, I will take a bit messy vs confusing.\n. @egamma I see what you mean. Honestly, if there was a simple way to access\na README/setup guide/help after installing an extension it would make a big\ndifference. I have ~5 extensions I use often and I probably doesn't know\nmost of the available features/settings. For instance, I didn't realize the\nPython extension required installing some extra libs by hand. Having to\nhave to go to the marketplace or GitHub to find more info is quite\ncumbersome. (And in the case of the Go extension, you have to go to the\nGitHub's readme)\nOn Tue, Aug 16, 2016, 13:22 Erich Gamma notifications@github.com wrote:\n\n@mattetti https://github.com/mattetti I see, you want to add these\nsettings for discoverability, the default values of these setting are\nalready defined as you list them above.\nAdding a setting to the user's settings file has the draw back that you\ncan no longer easily change defaults or add new ones inside the extension.\nWe plan to improve the discoverability of an extension's contribution in\ngeneral. One idea we want to try is to show the contributions in the\ndetails view of an extension. This would show the settings an extension\ncontributes.\nIf this isn't good enough then we can provide some 1st run guidance, e.g.,\nshow a message box on first run that invites the user to configer the go\nsettings.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/394#issuecomment-240225778,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcUh76g4IqqALOsMSpQH-S3IhV-pnks5qghv1gaJpZM4JL95U\n.\n. My bad, I didn't realize that if you were to click on the extension name in the extension list, it does load the README. We might want to open that pane automatically or offering to open it after installing a plugin.\n. @egamma I setup a few people last night at our local Go beginner night and none saw the README.\nThe reason why was that they clicked on install without clicking on the extension card (also, what's up with this (potentially) fake go 0.0.1 extension).\nThe installation went through, asked to restart, they never saw the README.\n\nNote also that the README gets loaded from github directly, which is great but if you are on a half decent wifi connection, the content will load in a couple seconds (the markdown is also rendered locally) and there aren't any visual indications that the content is loading. You only see the header.\n. This is awesome, note also that the next version of go (1.8) will use a\ndefault gopath.\nThe changelogs have been super useful, and I wish I had a bit more time to\nprovide a few additional features (list of interfaces implemented by a\nstrict or value would be neat and already supported by Guru).\nI am all having issues when using cgo on some files and the jump to\ndeclaration being broken. I would need to set some time aside to look into\nthat.\nOn Tue, Nov 1, 2016, 17:21 Ramya Rao notifications@github.com wrote:\n\n@mattetti https://github.com/mattetti I wanted to revisit a few of the\ntopics here based on the updates we have done for the extension in the past\nfew months\nMissing GOPATH\nIn the next update (0.6.48), if GOPATH is not set, a info box will pop\n[image: image]\nhttps://cloud.githubusercontent.com/assets/16890566/19909344/7bab07aa-a044-11e6-99a9-a543fd4e8547.png\nClicking on \"Set GOPATH in Workspace Settings\" will open the workspace\nsettings where once you can set the gopath.\nAbout your comment on GOPATH in Mac\nuse the users's $GOPATH env variable on mac by default\nI believe we already do this. Have you found it to behave otherwise?\nDefault Settings\nThe default values you mention in #394 (comment)\nhttps://github.com/Microsoft/vscode-go/issues/394#issuecomment-240182136\nare already the default values.\nOne good thing in the upcoming VS Code 1.7 release, is that in the default\nsettings file, all settings are collapsed, thus making it less overwhelming\nto first timers, who wanted to check out what settings matter to the Go\nextension\n[image: image]\nhttps://cloud.githubusercontent.com/assets/16890566/19909477/29dd194e-a045-11e6-865e-3d6bd299f70f.png\nMissing Analysis Tools\nI totally agree that this is hard to see. I'd prefer a msg box just like\nfor GOPATH mentioned above with an extra option of \"Don't ask again\" just\nin case if anyone explicitly does NOT want to install one of the tools. The\nindividual features already have their own msg boxes if the dependent tool\nis not found.\nThoughts?\nDiscoverability\nCreated #596 https://github.com/Microsoft/vscode-go/issues/596 to track\nthe suggestion about adding gifs for features for better discoverability.\nCreated Microsoft/vscode#14826\nhttps://github.com/Microsoft/vscode/issues/14826 to track the showing\nof README when user clicks on the Install button.\nHave I missed anything? :)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/394#issuecomment-257716694,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAccBXirwZcnxZe76h-qL_DTJ6yFB0ks5q57tagaJpZM4JL95U\n.\n. goreturns and goimports are two different tools that behave differently. VSCode lets you pick the one you want to use. Note also that these tools aren't maintained by the people maintaining VSCode.\n\nIf my comment makes sense, please close this issue.\n. make sure you are on the latest go RC and you restart gocode (type gocode stop in your terminal and restart vscode).\n. Note that this issue is with gocode, now that 1.7 is out, more people are having the same problem, see https://twitter.com/mschoch/status/765409009251647489\n. Did you restart Gocode?\nOn Tue, Aug 16, 2016, 09:37 Jesse Donat notifications@github.com wrote:\n\nI have recompiled all the tools, updated the extension, all I get is PANIC\nin intellisense.\n[image: screen shot 2016-08-16 at 11 36 24 am]\nhttps://cloud.githubusercontent.com/assets/133747/17707376/bbbe6b7e-63a5-11e6-845c-a5557b599053.png\n[image: screen shot 2016-08-16 at 11 36 16 am]\nhttps://cloud.githubusercontent.com/assets/133747/17707377/bbbebe94-63a5-11e6-9382-0c160600efc3.png\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/421#issuecomment-240160332,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcYFaOE8WxG1fyn49ud7JtBwN0Tkwks5qgedJgaJpZM4Jg1a3\n.\n. No worries, I had the same issue,  for whoever trying to solve this issue, run gocode stop to stop gocode, even if you updated the tool.\n. +1 I tested it locally and it works great. I believe that's the expected behavior and the way it works when editing TS.\n. I am using a local build in debug mode and found what I think is the root cause, gocode is hanging when asking for autocompletion:\n\ngocode -f=json autocomplete \"path/to.my/file_test.go\" c42\nDoesn't return\n. This looks suspiciously similar to https://github.com/Microsoft/vscode-go/issues/322 which was fixed. However https://github.com/nsf/gocode/issues/305  seems to indicate gocode doesn't yet support 1.7 With 1.7 out in a few days, this might cause some serious issues for VSCode users.\n. Good news everyone, I found the root cause. The problem is that I updated Go to 1.7 but Gocode was running its daemon in the background and wasn't aware of the change of version. Gocode uses a server/client architecture and VSCode was trying to communicate with the server but the request was hanging. Restarting gocode solved the problem and everything is great again!\ntl;dr: restart gocode\nIf you encounter this issue, in your terminal, type:\ngocode close\nThen restart Code and everything should be working well again.\n. Go Meta Linter uses this deadcode pkg, we might want to consider use https://github.com/alecthomas/gometalinter and let the user pick linters to use.\n. gometalinter is already used in vscode, so we should be able to use deadcode and other linters. Investigating\n. yes, turns out that's already supported but not documented, I'll send a PR for the README.\n. @joaomoreno @egamma is there anyone at Microsoft still maintaining this extension. I noticed Luke isn't there anymore and I'm afraid to see PRs piling up and this extension not getting too much love.\n. @egamma thanks for the update, very much appreciated. As an invested user, let me know if there is anything I can do to help.\n. @lukehoban thanks! I have been thinking about a few features I'll try to work on over the next weeks. I'll open issues for feedback. \nAfter looking through the code, I realize that contributing is pretty straightforward, thanks a lot for a great extension.\n. API to open a specific file using filename only: https://code.visualstudio.com/docs/extensionAPI/vscode-api#1108\n. Thanks @fatih!. @ramya-rao-a I think the large majority of users will only care about JSON and would want omitempty by default. I think addressing the 80% case the best we can would be the best move here.\nIdeally I would love to see that generator option when I right click a strict and when right clicking a strict field.\nOther features are more advanced and could be more hidden / harder to get to.. @ramya-rao-a it looks good, will the option be also available via the right click context menu or only the palette? The reason I'm asking is because as I'm showing features to people I realize most people don't use the palette or use it only for tasks/commands they already know.. @ramya-rao-a is having more control over the context menu something we can champion? I think that's my #1 issue with VSCode. Asking users to use the palette seems very counter intuitive, especially coming from VS Studio. The amount of steps/keystrokes required to access an extension feature is just too much and that results in a lot of features hard to reach or never discovered.\nIdeally, there would be a function that an extension could provide to populate the context menu based on the current context. So on right click, the extension gets a call with the when clause context being passed and could return an array of menu items. I believe such as feature would provide a drastic experience improvement for all users.\nIn the meantime, I would suggest to have the tag generation feature always on the context menu and return an error if the user doesn't have a struct or field selected. It's not ideal but at least it exposes the features to all Gophers and it reduces the complexity to trigger the feature.\nI would also suggest to the same thing for \"Toggle test file\" and \"Generate test unit tests for current file\".\n@rakyll @campoy, what say you?. I gave it a quick try and it seems to work well. We might be able to tweak the error messages as we collect more feedback but I think it's going to be a very much appreciated feature.\nThe context menu is also really great, amazing job!. Just a quick note to let you know how happy I am to see you all working together to make the life of our gophers better :)\ud83d\udd7a\ud83d\udc83\ud83d\ude0e thanks a lot \ud83d\udc9a\ud83d\udc9a\ud83d\udc9a. This PR is stuck in a conflict, @benclarkwood would you mine rebasing?\nOn a separate note, I find the property name go.blockImportsOnly quite confusing since it reads like we are blocking imports only. Maybe go.groupedImportsOnly?. @roblourens it is paused (it hangs) but no controls. So maybe it does hang for another reason, but if that's the case, I can't tell why/where it gets stuck.\n. Next step: I will try to reproduce the issue using a simpler project and confirm that it's indeed broken, even for basic use cases.\n. @roblourens I was able to repro the issue on a sample project: https://github.com/mattetti/vscode-debugging/tree/master/greetings\ngo get github.com/mattetti/vscode-debugging/greetings\ncd $GOPATH/src/github.com/mattetti/vscode-debugging/greetings\ncode .\nOpen greetings.go, add a breakpoint to line 10, launch the debugger.\nNotice that it does stop and even gives you controls but you aren't stopped at your breakpoint and you don't see any variables.\nThis might be due to my setup but I could swear it was working less than a month ago (I use the debugger to debug my tests).\nVSCode: 1.6.0\nDelve Debugger\nVersion: 0.11.0-alpha\nBuild: 46803551b888c017e22bef94d6bf223a9eb704a3\nmacOS: El Capitan 10.11.6 (15G31)\ngo version go1.7.1 darwin/amd64\n. The debug console says:\n2016/10/12 13:56:38 server.go:71: Using API v1\n2016/10/12 13:56:38 debugger.go:61: launching process with args: [./debug.test]\nAPI server listening at: 127.0.0.1:2345\n2016/10/12 13:56:38 debugger.go:238: created breakpoint: &api.Breakpoint{ID:1, Name:\"\", Addr:0x6ec67, File:\"/Users/mattetti/Code/golang/src/github.com/mattetti/vscode-debugging/greetings/greetings.go\", Line:10, FunctionName:\"github.com/mattetti/vscode-debugging/greetings.SayHello\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}\nYes the following works:\n$ dlv test github.com/mattetti/vscode-debugging/greetings\n(dlv) b /Users/mattetti/Code/golang/src/github.com/mattetti/vscode-debugging/greetings/greetings.go:10\n(dlv) c\n(dlv) p name\n\"matt\"\nI have update VSCode yesterday and I am on the latest version of the Go extension: 0.6.4.4\nThere is something fishy going on, since it works for you I now wonder if it's not related to some settings. It used to work for me until a couple versions of VSCode ago.\n. Yes I do:\n\"go.formatOnSave\": true,\n  \"go.buildOnSave\": true,\n  \"go.lintOnSave\": true,\n  \"go.vetOnSave\": true,\n  \"go.buildFlags\": [],\n  \"go.lintTool\": \"gometalinter\",\n  \"go.lintFlags\": [\"--disable-all\", \"--enable=errcheck\", \"--enable=golint\", \"--enable=structcheck\"],\n  \"go.vetFlags\": [],\n  \"go.coverOnSave\": false,\n  \"go.useCodeSnippetsOnFunctionSuggest\": true,\n  \"go.goroot\": \"/Users/mattetti/Code/go\",\n  \"go.gopath\": \"/Users/mattetti/Code/golang\",\n  \"go.formatTool\": \"goimports\",\n  \"go.gocodeAutoBuild\": true,\n  \"go.autocompleteUnimportedPackages\": true,\n. The dev tools are showing the error, I should have thought about that!\n\nThat gets triggered every single time it breaks.\nThe root cause seems to be that the threadId is set to 0.\n```\nthis.toDisposeOnSessionEnd.push(this.session.onDidStop(event => {\n            this.setStateAndEmit(debug.State.Stopped);\n            const threadId = event.body.threadId;\n        this.getThreadData().done(() => {\n            this.model.rawUpdate({\n                threadId,\n                stoppedDetails: event.body,\n                allThreadsStopped: event.body.allThreadsStopped\n            });\n\n            const thread = this.model.getThreads()[threadId];\n            thread.getCallStack(this).then(callStack => {\n\n```\n\n. \nI don't have enough knowledge of the internals to understand what a thread ID is here in this context, we are trying to match on an ID that isn't available in the list of threads on the model.\n. @roblourens anything else I can do to help?\n. Delve works from the command line, see https://github.com/Microsoft/vscode-go/issues/512#issuecomment-253350651\nNote that in Go, the zero value of an int is 0, so there might be a race condition in the way the extension layer in fetching the thread id or an un-handled error on the Go side. The weird thing is that it works for you. \n. @lukehoban the breakpoint was set on line 10 of greetings.go not greetings_test.go. If I put the breakpoint on line 10 of the test file, I also have the same issue you reported. That said if I out a breakpoint on line 17 of the test file (in VS Code), I still have the same issue with the scope/variables not set and the JS error in the console. \nWhat version of OS X do you guys run and what's your dlv version output? \n. I haven't tried in the latest version you pushed recently but it was last\ntime I checked\nOn Fri, Oct 28, 2016, 16:24 Ramya Rao notifications@github.com wrote:\n\nIs this still a problem?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/512#issuecomment-257051587,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcYha-RGZ-Nn1SZjjUjOHwtQPoDobks5q4oQcgaJpZM4KPZOL\n.\n. @roblourens sorry about the delay I was traveling. 1.6.1 was broken, I just updated to 1.7.1 still have issues. The problem seems different now tho. I don't have any errors in the web console but the controls don't do anything.\n\n\nHere is my debugger config:\n{\n            \"name\": \"mp3 tests\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/mp3\",\n            \"env\": {},\n            \"args\": []\n        },. No, if I don't have breakpoints it runs through the tests and ends as expected. @gngeorgiev I'm not sure why you are taking it on Ramya who's doing her best to make this plugin the best she can. \nI've been writing Go for a little while and I switched from vim to vs-code before 1.0 and haven't looked back. Like me, my team uses VS Code, some Go team members like Francesc do too. Is it perfect, no. But it is quite good.\nNow, I use VSCode on Mac (Sierra) and Windows (10) using Go 1.8. Can you guys please us a bit more context on what's wrong, what OS you are using, what version of Go you are running. \nI have to admit that I have not used VSCode on Linux and that might be what you guys are experiencing.. It is a bit of an edge case but I agree that it would be a useful feature to have. @hickeng can you explain a bit more your edge case, are you trying to check that your code compiles properly against multiple os/arch targets?. https://golang.org/cmd/go/#hdr-Compile_packages_and_dependencies\nThe -i flag installs the packages that are dependencies of the target.\nUnfortunately I am not aware of documentation explaining the ramifications\nof having packages installed.\nHere is a Quora explaination:\nhttps://www.quora.com/What-is-the-difference-between-build-and-install-in-Go\nBasically what I saw is that when using -i in build or test, the dependency\npackages are cached and reused if they haven't changed. You can test that\nusing an expensive pack to build such as sqlite3.\nOnce you build it once with -i, other builds can use the cache.\nOn Thu, Dec 15, 2016, 18:37 Ramya Rao notifications@github.com wrote:\n\n@mattetti https://github.com/mattetti\nMy understanding is that installed packages aren't rebuilt.\nIs there any official documentation for this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/673#issuecomment-267503107,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcc16nX5skf1Zy71OCq8JAHwAd-1Vks5rIflUgaJpZM4LBHQH\n.\n. I don't know if we should go all the way to pushing something like zb but\nyes zb uses some of the same techniques. -i really shouldn't have any down\nsides, besides making for faster builds, especially on save.\n\nOn Thu, Dec 15, 2016, 19:08 Ramya Rao notifications@github.com wrote:\n\n@derekperkins https://github.com/derekperkins mentioned\nhttps://github.com/joshuarubin/zb in another issue. This claims to run\nfaster builds. It comes down to build vs install there as well\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/673#issuecomment-267506769,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcSP9mLKu3ISNySbO7eTukSPi1Vnmks5rIgCmgaJpZM4LBHQH\n.\n. I'll look at adding this flag and send a PR, @ramya-rao-a would you mind allocating this issue to me?. @ramya-rao-a indeed the -a flag is a full rebuild of everything and it's recommended not to use it since it also rebuilds the system packages which might have permission differences.\n\ngo build -o doesn't always rebuild all packages used by the currently build package, it builds all packages that aren't \"installed\" and therefore not tracked. If you run go build -i once, the packages that haven't changed won't be rebuilt (which is the workaround I currently use).\nI could add a setting to not use -i but I am not aware of any reasons why you wouldn't that on. Well, that's not true, there is one case you don't want that on: it's for main package. Library packages are installed in a cache, but main packages go to the bin folder which might not be something a user wants.\nAs you are reading more about go build, I wonder if you can find for downsides of using -i, if there are any, then we should add a preference, otherwise it's probably better not to since it would give users an option they don't need.\nOh, and before you ask, I think the reason why the go team didn't setup go build to use -i automatically is probably because they didn't want to bother looking up the package being built, but that's just a guess.. @ramya-rao-a indeed the -a flag is a full rebuild of everything and it's recommended not to use it since it also rebuilds the system packages which might have permission differences.\ngo build -o doesn't always rebuild all packages used by the currently build package, it builds all packages that aren't \"installed\" and therefore not tracked. If you run go build -i once, the packages that haven't changed won't be rebuilt (which is the workaround I currently use).\nI could add a setting to not use -i but I am not aware of any reasons why you wouldn't that on. Well, that's not true, there is one case you don't want that on: it's for main package. Library packages are installed in a cache, but main packages go to the bin folder which might not be something a user wants.\nAs you are reading more about go build, I wonder if you can find for downsides of using -i, if there are any, then we should add a preference, otherwise it's probably better not to since it would give users an option they don't need.\nOh, and before you ask, I think the reason why the go team didn't setup go build to use -i automatically is probably because they didn't want to bother looking up the package being built, but that's just a guess.. Note that the hope if that the PR is merged, the problem reported here and in https://github.com/Microsoft/vscode-go/issues/686 should be addressed.\nI did some investigation, zb checks if a package is a command by using go/tool and go/tool uses the package name like in my PR. \nzb: https://github.com/joshuarubin/zb/blob/master/lib/dependency/gopackage.go#L30\nGo/tool:\nhttps://golang.org/src/go/build/build.go?s=13875:13909#L389\n// IsCommand reports whether the package is considered a\n// command to be installed (not just a library).\n// Packages named \"main\" are treated as commands.\nfunc (p *Package) IsCommand() bool {\n    return p.Name == \"main\"\n}\nI looked at the difference between go build and go build -i by using the -x flag.\nI built a package of mine: github.com/go-audio/examples/format-converter.\nIn both cases, the compiler tool prepares temp folders:\nmkdir -p $WORK/github.com/go-audio/examples/format-converter/_obj/\nmkdir -p $WORK/github.com/go-audio/examples/format-converter/_obj/exe/\nBut in the -i case, another folder is created:\nmkdir -p $GOPATH/pkg/darwin_amd64/github.com/go-audio/\nAnd then the compiled dependency is pushed there (wav pkg archive):\nmv $WORK/github.com/go-audio/wav.a $GOPATH/pkg/darwin_amd64/github.com/go-audio/wav.a\nI didn't dig much further but my limited understanding is that archive file is to be used next time instead of being recompiled. I'm sure Go does some extra check to make sure it hasn't changed but that's the gist of it. \n. Here are some interesting threads talking about go install/go build -i:\nhttps://www.reddit.com/r/golang/comments/2qpzm8/question_on_go_build_i_and_rebuilding_a_library/\nHere the issue mentioned is that go install doesn't check for updates once a dependency package was rebuilt. So if I'm rebuilding pkg a that depends on pkg b and I updated b without reinstalling it, then pkg a will import the old build of b. If all packages had to be rebuilt, we would need to walk the dependency tree and try to rebuild them all one by one.\nThis is a project that says can make your compilation 7x faster. It's really only a wrapper around go install: https://github.com/kovetskiy/go-fast\nThis is an interesting discussion about go build and go install and why one should always use go install.\nDave puts it simply:\ngo build builds your package then discards the results.\ngo install builds then installs the package in your $GOPATH/pkg directory.\nHowever, his suggestion is to just use go install, I believe it has the same behavior than go build -i. I'll look a bit more into it and see if we should make go install the default and offer an option to use go build instead.\n. It doesn't look like there is a difference between go build -i and go install:\nhttps://twitter.com/davecheney/status/819443033053609984. @davecheney do you have a recommendation for us?\nVsCode has a feature to optionally auto build the package you are editing. I was suggesting to add the -i flag to cache dependencies.\nQ1: is there a downside to installing non main packages ? (As in should we offer a way to turn that off)\nQ2: is go install a better approach?\nQ3: any other recommendations to make actions at save time faster (go build, vet, lint...)?. I saw this issue many times after updating go and forgetting to restart vscode/gocode. VSCode relies on gocode which is run as a daemon. If Go is updated but gocode not restarted, then things break. Another reason would be that the go tools aren't installed, a warning should appear on your screen tho (look at the bottom right of your screen for another warning).\n@ramya-rao-a this issue has been open for 30 days without feedback, could we close it please?. @qiuhaotc awesome, do you mind closing this issue?. -1 from me, zb is too opinionated for me and I think we can accomplish a lot of the performance by tweaking things a little and having optimization features behind flags (for instance to install packages by default). Caching would be nice but I'm too worried about all the things that could go wrong with that.. @ahmetalpbalkan can you please confirm that everything is fine as per ramya's response. We haven't heard from you and I think we should close this issue for now (we can always reopen it if you have more information). @ahmetalpbalkan can you please confirm that everything is fine as per ramya's response. We haven't heard from you and I think we should close this issue for now (we can always reopen it if you have more information). That's a good idea, let me benchmark both platforms using the same version\nof Go and gocode and against the same codebase and let see of this is where\nthe bottleneck is.\nOn Mon, Dec 26, 2016, 07:35 Ramya Rao notifications@github.com wrote:\n\nWe use gocode https://github.com/nsf/gocode for autocomplete in the Go\nextension.\nYou can try running the autocomplete command from gocode in the command\nline and compare performance in the 2 platforms\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/696#issuecomment-269220818,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcQAbZC926sRfqQmdCh49PyVgy9blks5rL97AgaJpZM4LUgVK\n.\n. @ramya-rao-a so I'm back on Windows and I looked at the underlying issue. As you suspected gocode is being extremely slow.  I killed the daemon started by vscode and started one manually in debug mode. What I see is that gocode rebuilds all packages every time it receives a request. That seems to be related to the go build issue I brought up earlier requiring a -i. I'll investigate more, @nsf might know more, I also reporting my findings in this issue https://github.com/nsf/gocode/issues/378. As per the discussion in the gocode issue, the problem is that this extension uses an experimental feature that seems buggy on Windows. By default VSCode-Go turns on gocode autobuild which rebuilds all packages every single time making it unusable.\n\nIs there a way to have a different default value for windows vs mac/linux? VSCode being a Microsoft product, I expect that Windows support is quite important :). @ramya-rao-a what's the logic for having that on by default? The setting is quite hidden and the experience on Windows is really really bad unless turned off. I'm going to investigate how to make gocode's autobuild work properly on Windows but I would strongly suggest to consider turning off this option until it's fixed. Otherwise you are going to alienate Windows users.. > After further investigation... I have no idea what was wrong. I removed the executable, added some debug statements, rebuilt it and copied it (for some reason go install wasn't moving the file properly). After that, autobuild worked as expected on Windows 10, VSCode, autobuild on, Go 1.8.\nI can only assume something was wrong with my system and my coworkers.\nIt might have been something weird with an old version of gocode running and the new one not installing properly or something else. Anyway, I can't repro on my machine anymore so I will close this story.. @ramya-rao-a on a related note, we are spawning a new process for every hover. One option would be to switch gocode for something else, another would be to implement the gocode RPC client in TS and therefore run the query from within the extension. I have to admit that I don't know the energy cost of starting a new process on Windows and Mac so I can't tell if that would even help.\nOne thing I know, is that the battery life on my MBP 2016 is a joke and anything that would help me get more unplugged coding hours out of this machine would be welcome.. @ramya-rao-a on a related note, we are spawning a new process for every hover. One option would be to switch gocode for something else, another would be to implement the gocode RPC client in TS and therefore run the query from within the extension. I have to admit that I don't know the energy cost of starting a new process on Windows and Mac so I can't tell if that would even help.\nOne thing I know, is that the battery life on my MBP 2016 is a joke and anything that would help me get more unplugged coding hours out of this machine would be welcome.. @thewhitetulip VSCodeGo and VimGo use basically the same tools under the hood so the difference might be with electron rendering. In my experience the CPU usage wasn't bad at all so I didn't notice anything specific to VSCode ( I switched from macvim).  CPU is usually the driver or energy consumption. It would be interesting to get more metrics about where \"energy\" is used when you code with VSCode and if it's related to VSCode or the go extension.. @joeblew99 can you try shutting down vscode, start gocode manually and run an autocomplete command against your project to see if it fails there too?. @joeblew99 VScode-go uses the following pkgs:\ngocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  godef\n  goimports\n  golint\n  gotests\nIf the godef improvement gets merged in, you can go get -u the package to get the latest update or within VSCode, open the command palette (cmd+p) and go: Install Tools to update all the dependencies at once.\nWould you mind closing this issue since I don't think there is much VSCode can do to make things much better in this specific scenario.. @joeblew99 VScode-go uses the following pkgs:\ngocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  godef\n  goimports\n  golint\n  gotests\nIf the godef improvement gets merged in, you can go get -u the package to get the latest update or within VSCode, open the command palette (cmd+p) and go: Install Tools to update all the dependencies at once.\nWould you mind closing this issue since I don't think there is much VSCode can do to make things much better in this specific scenario.. I assume this feature would be online only, would we keep the existing features as a fallback? Sending code to a remote server might also be a blocker for some companies. I agree with @junkblocker, this is quite a big regression. I rely quite heavily on seeing the struct members on hover to populate the fields. I only turned on the option tonight so I didn't get to really experience the new language server but overall it seems really much faster, especially to find references.  Should we open a new issue? Do we know if that's the limitation of the language server or the integration?. @sqs awesome, I was wondering, what do you think about versioning the go-langserver so we could check that the user doesn't have version that is too old and potentially suggest and update?. +1 thanks @ankon. this is related to https://github.com/Microsoft/vscode-go/issues/700. this is related to https://github.com/Microsoft/vscode-go/issues/700. perfect thank you! I'll give it a try. @ramya-rao-a PR updated, tests are now passing, thanks for your help!\nNote, this PR is pending the resolution of the discussion happening there: https://github.com/Microsoft/vscode-go/issues/673. that's extremely odd, goimports and gofmt are executables that get called from VSCode at various times. Updating VSCode shouldn't cause any issues with those tools.\n@olliephillips can you provide us with a bit more information?. Note that after reading the guidelines and looking at the API, I realize that the light bulbs should only be used when an actual action can be offered to the user as shown here:\n\nSo we probably should start by listing the kind of actions we would like to offer actions for.\n\n[ ] Unused variables\n[ ] Missing documentation generation (or offer to unexport)\n[ ] Go vet name suggestion replacement. this is great. It doesn't look like the when API would allow to check the current filename and turn on/off a specific command: https://code.visualstudio.com/docs/customization/keybindings#_when-clause-contexts. awesome, thanks @ramya-rao-a !. Well, this is a bit more complicated than it sounds, take for instance this counter example:\n\ngolang\nif err != nil {\nIn this case, vs-code does what is expected. There are lots of other examples like that, for instance declaring a type, function etc... So to be able to implement the feature you are asking for, we would need to have enough context to know the intent of the parenthesis. Doable, but more really straightforward. Do you know of a tool which could give us such context?. that's definitively an interesting behavior difference. I would file a bug with the Go project (if you have Go 1.8+, you can just type go bug in your terminal and it will start a bug report for you). I think the Go team might not be aware that the behavior is different and they should make a decision to what approach is the right one.. here is how it looks for node and mock adapters:\n. I often setup the launcher to test/debug a specific test using the -run feature.. it's a bit of an hard issue since go doesn't have a good dependency management to lock the version of 3rd party libraries. Ideally we would want to vendor those tools or lock a specific version. I would personally recommend to keep it simple for now. Also, the go recommended way is to have the tests with the code, what are the scenarios where you'd write tests in other packages that the original one?. agreed, can we continue the conversation in #259 and close this duplicate issue tho?. Thanks, I turned on trace and see a weird issue:\n[Error - 8:27:47 PM] Request textDocument/hover failed.\n  Message: invalid location: /Users/mattetti/Code/golang/src/<>foo.go:#1508\n  Code: 0 \n[Error - 8:27:51 PM] Request textDocument/hover failed.\n  Message: invalid location: /Users/mattetti/Code/golang/src/<>foo.go:#1530\n  Code: 0 \n[Error - 8:27:52 PM] Request textDocument/hover failed.\n  Message: invalid location: /Users/mattetti/Code/golang/src/<>foo.go:#1531\n  Code: 0 \n[Error - 8:27:53 PM] Request textDocument/definition failed.\n  Message: invalid location: /Users/mattetti/Code/golang/src/<>foo.go:#1531\n  Code: 0\nThe actual path was edited for privacy reason, but the file it's trying to access only has 87 LOC. So something is really going wrong. Is there anything else I can do to help debugging?. I'm with Francesc on this one, I wouldn't want that feature ON by default either and I would strongly suggest to add latency before triggering gotype so you can hopefully only trigger when the user stopped typing and therefore not max out her CPU every keystroke.. everything works fine with gocode when I turn off the language server feature. I was under the impression that -i was also installing the executable when\nbuilding a main package. I might be wrong and it would be worth testing (on\nmy cellphone).\nOn Sat, Jun 3, 2017, 13:25 Ramya Rao notifications@github.com wrote:\n\nWhat's the reason for not running with -i by default\nFor go build -i part follow the discussion in #673\nhttps://github.com/Microsoft/vscode-go/issues/673\nFor why we don't do that for \"main\" package, see #673 (comment)\nhttps://github.com/Microsoft/vscode-go/issues/673#issuecomment-272039570\nspecifically.\n@mattetti https://github.com/mattetti The docs for go build -i says\n\"The -i flag installs the packages that are dependencies of the target\". As\nin only the dependencies are installed (if changed), in which case, do we\nstill have to skip the -i for the main package?\nMy reason for opening up this ticket is that I wanted a way to try and\ndeduplicate the linter errors. I think --aggregate gets us a long way there.\nOh definitely, for the purpose of this ticket using --aggregate solves\nthe problem, and I can add that as a default while running gometalinter.\nI personally don't do a lot of Go coding, so when there is an opportunity\nlike this to discuss and understand the process more, I don't let go of\nthat :)\nI understand the reasoning behind \"don't run linters if it doesn't\ncompile\" but I don't think that's a workflow that should be enforced\nYes, when I do get around to working on #600\nhttps://github.com/Microsoft/vscode-go/issues/600, it would be via a\nsetting and not enforced by default.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1013#issuecomment-305999416,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcefG-Lmqk5u6ptMCvg02M9KI7WwWks5sAcFRgaJpZM4Npnxb\n.\n. Sounds good, @rakyll you might be interested in knowing that the flag documentation is a bit confusing :). @redbaron it sounds great, are you working on a PR for this or waiting for some kind of approval from @ramya-rao-a ?. I'm definitely interested in https://code.visualstudio.com/docs/editor/refactoring being able to extract variables, constants or even functions would be really awesome. \nWhat's your plan of attack, what can we do to help?. \n",
    "ramya-rao-a": "@lukehoban @ironcladlou Do you have any more thoughts on this thread? There is a PR open as well. I don't have much history here, so will leave it up to @lukehoban to take a call.. > Not understanding why doing a go get -u on a tool doesn't update the version used in VSCode is problematic\nThat's not true. go get -u on a tool does update the version used by VS Code as of now. Not after opting in for the feature in the PR though.. Ok then, I have pinged @samherrmann to resend the said PR after resolving merge conflicts. After that we should be good to go. PR is merged. This will be out in the next update. Thanks everyone!. I was testing this feature of using the env var as a separate location for the Go tools.\nThis doesn't work for gometalinter. As part of streamlining the go tools installation experience, with #735, gometalinter and the linters it uses will be installed when user clicks on \"Install All\" or the \"Analysis Tools Missing\" or via the \"Go: Install Tools\" command.\nIf gometalinter and its linters get installed in a separate location than the user's gopath, then when gometalinter is run , it won't be able to find all its linters.\n. \nHello All,\nThe latest update (0.6.53) gives the user an option to install the go tools to an alternate location.\nThis is done via the new setting go.toolsGopath where you can provide the alternate location.\nRemember to run Go: Install Tools after setting the above setting, so that the tools get installed to this location. After which, you can safely delete the ones from your GOPATH.\nNote: dlv and gometalinter tools are exceptions to this rule. Reason being that gometalinter internally installs linters and expects them to be in the user's GOPATH. And that the debugger is not aware of any VS Code settings and so will not be able to find dlv from any location other than PATH or user's GOPATH\nPlease give it a try and comment here (or open a new issue) if you see any issues.. Checked off the item for maps as we got that done via #1384\nChecked off the item for following members and not limited by dlv's default depth as we can now configure the depth to which delve goes when resolving variables. See https://github.com/Microsoft/vscode-go/issues/1804#issuecomment-408654035\n@ae6rt We can only display what delve allows us to. dlv allows us to see all local variables and so we have the pane that shows the same. I dont see how we can show all package variables without asking for each.\n. @yuzhichang \nWe already use referrers in the Find All References feature as well as the codelens for references (which you have to enable via settings)\n771 talks about the implements feature, but the perf was not good, so work is stalled\nWe have references showing up in codelens (you need to enable it via settings)\nPRs are welcome for the other features. Commands in VS Code extensions are pretty easy to implement and I can help anyone who wants to give this a try.\n. @gertcuykens That shouldnt be the case. Find All References is one of the features that is supported by the language server. I have logged an upstream issue https://github.com/sourcegraph/go-langserver/issues/240\nUpdate: The upstream fix is in. Update the langserver by running go get -u github.com/sourcegraph/go-langserver. If you are using the go.toolsGopath to have all the tools in a separate location, then set the GOPATH to the toolsGopath temporarily before running the go get. Or you can simply run Go: Install/Update Tools command in the editor. @vimalk78 Sure, go ahead.. @xobs @b1ackb0x @superzadeh @biessek \nLogged #456 for the same issue. The PR https://github.com/Microsoft/vscode-go/pull/457 has fixed this issue and the fix will be out in the next update of the extension.\nYou shouldn't have to put %GOPATH%\\bin to your PATH after the fix\n. This fix is now available in the latest version of the Go extension : 0.6.44\nNo need to restart VS Code anymore and no unnecessary prompts to keep installing tools you have already installed\n. This fix is now available in the latest version of the Go extension : 0.6.44\nNo need to restart VS Code anymore and no unnecessary prompts to keep installing tools you have already installed\n. @alecha Can you elaborate on what issue are you facing? \n. @alecha What do you see when you run \"Go: Current GOPATH\" in the command palette?\nThis current thread is about the extension not able to find the installed tools which I believe is not your case. \nCan you try any of the other features? Are they erroring out too?\n- Ctrl+Shift+O for outline of your file\n- Right-click -> Format document\n- Rename a variable\nWhen you see the Errpr: spawn EACCES, what do you see in the console in the developer tools? You can open dev tools by Developer: Toggle Developer Tools\nAlso what version of VS Code and the Go extension are you using and which OS?\n. @alecha What you see is the same as #585. The fix will be in the next update. Until then #585 has a workaround you can use\n. @EGJ1996 Can you elaborate on what issue you are seeing?. @EGJ1996 And you are sure that go.exe exists in \"C:\\Users\\Dell\\Desktop\\Go Compiler\\bin\" ? . @EGJ1996 Is this the first time you are using the Go extension? Those pop ups appear because the extension cannot find the Go tools in your GOPATH. \nIf you are doing this for the first time, then you need to install the Go tools as per the pop ups.\nIf you have already installed these Go tools, then then find where you installed them and add the corresponding GOPATH in go.toolsGopath setting. @amazingandyyy In your case the error message in the console says that you have not set GOPATH\nYou can set it using go.gopath setting or better yet, close all VS Code winodws, set GOPATH as an environment variable outside VS Code, and open VS Code again\n. @lunemec Must be the case of the files of the old version of the Go extension still lingering around. There is a bug on this in the VS Code repo, but I can't seem to find it.\nBut am glad you are unblocked, Happy Coding!. @rakyll Which version of VS Code are you on?. @rakyll At that point VS Code is not aware of the addition of GOROOT/bin to the PATH. At this point, if you close VS Code and open it from the terminal where you updated the PATH, VS Code should now be able to find Go. Does it not?. I'll try and get a repro and get back to this thread. This feature is now available in the latest version of the Go extension : 0.6.44\nNote: Needs diff tool which is not available on Windows by default. Windows users can install it from DiffUtils for Windows\n In the absence of the diff tool, rename operation will work as it did before i.e change the file on disk. \n. undo in VS Code has always been applicable on the current file only @rebornix correct me if I am wrong. @roblourens can you take a look at this?. @skeleton1231. @ameykpatil  Let's use #717 to track the issue where you get the error\nserver.go:71: Using API v1\ndebugger.go:61: launching process with args: [./debug]\ncould not launch process: could not fork/exec\nThis is coming from delve it self and #717 is tracking this.\n@erm0l0v @ThreeBearsDan Glad to hear that you are unblocked now.\nAnyone else coming to this thread with the same error as above, please see #717 , #269 and https://github.com/derekparker/delve/issues/357\n. @lukehoban Correct me if I am wrong, but since gocode is a daemon, if it was already running (say the user was using it independent of VS Code), then VS Code wouldn't start a new process. In this case, closing it when the editor closes wouldnt be the right thing to do. \n. Closing this issue as a \"won't fix\" because of https://github.com/Microsoft/vscode-go/issues/26#issuecomment-254108679. @PumpkinSeed Can you share sample code where you see this?\nAre there any errors/warnings showing up in the Problems panel?\nWhen does these pop-ups appear? typing, hovering?\n. There are 2 different kind of pop ups people are talking about here.\n\nThe one asking you to install Go tools\nThe one that says Error: Illegal value .. for line\n\nNow for the first one, I can think of a more friendly way of getting the point across instead of bombarding user with pop ups to install or atleast an option to opt out of it.\nFor the second, if anyone can provide a consistent repro, then I can look into it.\n. Created #998 to track the replacement of the current pop-up behavior. @atulkumarpccs There are 2 separate kind of notifications talked about in this issue. See https://github.com/Microsoft/vscode-go/issues/50#issuecomment-291559466. Which one are you referring to?. @atulkumarpccs Please elaborate. \n- What do you mean by \"extra package\"?\n- What do you mean by \"not properly configured\"?\n- Is the warning you are see say \"Error: Error: Illegal value for line\"?. @grimmer0125 @hielfx  We use the locals command in delve to get the local variables. I am not aware of a way to get the global variables in delve. @derekparker Is there a way to get the global variables?\n. @jonnenauha Have you found what you were looking for?\nThe current debugging features that we have should suit most of your needs.\n\n. Thanks @jonnenauha, I'll close this issue.\nI have updated the other issue that references this issue as well.\nDo give the Go extension in VS Code a try and feel free to provide us with feedback.\nHappy Coding!. Closing as this is outdated\n. @gillez The latest discussion on code completion in comments in VSCode in general is tracked in https://github.com/Microsoft/vscode/issues/10819. You can also read through https://github.com/Microsoft/vscode/issues/11704\n. @rythmkraze There is no way to set it to false today.\nWhat is your scenario where you want the this off?. @erichiller Is this about the tests for the extension not using the go.gopath setting or the test related features of the extension like the commands Run test at cursor, Run tests in current package/file not using the go.gopath ?\n. All the Test commands are taking GOPATH from the settings for me.\nClosing this issue for now.\nIf anyone still sees this issue, please comment, I will re-open the issue. @conikeec @sevein \nThere have been quite a few changes in both VS Code and the Go extension since last March.\nDo you still have issues with GOPATH?\n. Closing this issue as it is very old and we havent heard back from the OP.\n@conikeec @sevein if you do have any updates, please comment here and I can re-open the issue. This feature is now out in the latest update of the Go extension (0.6.70). @mikepc See https://github.com/Microsoft/vscode-go/issues/708#issuecomment-271119503 Setting GOPATH in ~/.profile should help.\nNote to rest:\n\n\nThe debugger in the Go extension cannot read GOPATH from the user/workspace settings. You need to specifically set the GOPATH in the env property in the lanuch.json\n\n\nIf your GOPATH was set as env variable outside of VS Code and you didnt have to set GOPATH in user/workspace settings, then debugger can read the GOPATH set as env variable.\n\n\nClosing this issue for now as there is no actionable item. We are blocked on https://github.com/nsf/gocode/issues/415 to get the docs during completion.\nAs of now we have docs in Signature Help and Quick Info.. One way we could achieve this is\n- Check if the completed item is a function\n- If no, then quit\n- If yes, then try to get pkg name from the . preceeding the word that is being completed\n- goSuggest now has access to mapping between pkg and pkg path, get pkg path from there\n- Call godoc and fetch the required docs as is done here: https://github.com/Microsoft/vscode-go/blob/0.6.60/src/goDeclaration.ts#L86 You'd need func signature which is available from gocode\nWill not work for pkg with alias\nNeed to be smart to not call godoc for the same pkg multiple times. Example: fmt.P will give multiple functions, but godoc needs to be called just once.\n. That is a good idea @segevfiner \nUsing resolveCompletionItem is better as we will then be fetching docs for just the suggestion item in focus instead of doing it for all items which would happen if we were to fetch docs in the provideCompletionItems call.\nIf anyone is interested in picking up this item, here are a few code pointers:\n- Build and Debug Extension to get a local set up of the extension up and running\n- All changes would be in the goSuggest.ts file\n- Extend the CompletionItem object to include a new property called package. Store the package info @antifuchs mentioned in https://github.com/Microsoft/vscode-go/issues/194#issuecomment-322674990 in this object and ensure this is returned by provideCompeltionItems function\n- Implement the resolveCompletionItem function in the Completion provider. You now have both the package import path and the symbol name which you can then use to call godoc to get the documentation on the symbol.\n. This long pending feature is now out in the latest update of this extension (0.7.0)\nThanks to @segevfiner!. @fhbzyc Do you still have this issue? The links are not opening for me. Can you provide screenshots of the problem you are seeing?. @fhbzyc I'll close this issue as we havent heard back from you in a while.\nIf you still see the issue, please comment here and I will open the issue and investigate.. @roblourens Can we update the debug side of the extension to make use the updates that @weinand has listed above?. @CreativeCactus The Go extension does not support the console attribute at the moment. #843 is tracking this feature request.\ncc @roblourens . @derekparker Can you help out @roblourens in his query? See https://github.com/Microsoft/vscode-go/issues/219#issuecomment-288225992. @DeadGame I am not working on this yet, you are welcome to give it a try. @krulik Next time that happens try the below in the command line\n- gocode close\n- gocode -debug -s\nThen try the auto-completion again in VS Code.\nThe terminal will then show all the logs for each auto-completion request that is made. @oneslash From what I understood by your comment, the HTML (Go) (file: gohtml.cson) in the \nhttps://github.com/atom/language-go already supports what we want here.\nThe question then is whether we update our current Go grammar (which is upstream in VS Code repo) to use this or have a separate language mode that uses this grammar.\nDid I get that right?\n@gertcuykens What core features are you referring to in the vscode api?. > Or does each language plugin has there own way of template support?\nThats how it is today. \n\nI make the assumption that multiple plugins can be activated for the same file.\n\nYes that is true\n\nAnd can we make a distinction based on file extention that dictates what to expect inside ... like if file extention is *.html.go use html mode + template mode\n\nYes\n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, reload/restart VS Code and that should fix this issue.. @BrendanBall @ShionRyuu What version of the Go extension are you using?\nIn your case getGoVersion seems to be where the ENOTDIR error is coming from. getGoVersion tries to run go version to get the version of Go running on your computer. To find the path to the go binary, we look at the GOROOT. If not found, then we look at PATH env var.\n\nIn the above code correctBinNameGo would be go.exe in Windows and just go in Mac/Linux\nHave you set the go.goroot setting in vs code? Can you look at your PATH values and see if for any reason the above logic would fail?. @ShionRyuu great!\n@BrendanBall ?. Over the months, this issue has gotten inputs on multiple problems, with the later ones being fixed.\nAlso, the code around the said features have changed quite a bit as well.\nAm closing this issue for now, as there is no more actionable items here.\nPlease open a new issue, as this issue has been garbled enough.. @indrgun Are other features like formatting, linting, go to definition features working as expected?\nHave you updated any of these settings in your user/workspace settings? go.gopath, go.goroot, go.inferGopath and go.toolsGopath. @indrgun In the integrated terminal of VS Code are you able to run Go. For example: go version without specifying the path to the go binary?. well then, Happy Coding!. @jeffpc1993 Do you have gopkgs binary in your PATH? Run which gopkgs in the terminal. Make sure you have this binary either in your PATH or GOPATH. @roblourens This would be same as #438 as well ?\n. @natefinch \nThe output from build, vet and linting is also sent to the Problems view from where they are clickable and would take you to the right file and line.\n. The output channel \"Go\" that gets the build/lint/vet output as been showing clickable links for a while.\nWith the latest update (0.6.56) to the Go extension, you can now get the same in the test output as well.. The output channel \"Go\" that gets the build/lint/vet output as been showing clickable links for a while.\nWith the latest update (0.6.56) to the Go extension, you can now get the same in the test output as well.. @kokizzu As mentioned in https://github.com/Microsoft/vscode-go/issues/73#issuecomment-270196488 you can use the debugging feature to launch current package. As long as the program property in the launch.config points to your package, using F5 will run your package.. In the latest version (0.6.45) of the Go extension, a better error message \"Cannot find \"go\" binary. Update PATH or GOROOT appropriately\" will be shown when Go is not found.\n. Thanks for the update @sethgrid . @rajatdeshpande This issue is very old and the code behind the Go extension and VS Code has long since changed a lot. Please log a new issue with detailed description of the issue you are seeing. impl for the win.\n@itsjamie Feel free to submit a PR for this. If you have questions or doubts on how to go about integrating this, I can answer them for you.. This is now available in the latest update 0.6.62. @renannprado Did you provide the package name along with the interface?\nFor example: I had to use f *File stringutil.Boo where Boo is the interface and stringutil is the package name\n. @Mistobaan So the advantage over the current method is that you will be able to choose the interface and not remember/type the name of the interface?. Say you want stubs for the io.Reader interface. You can today type io. and autcomplete will suggest all symbols from the io package.\nIn this list, for every interface, we can have another entry which when selected, will insert the stubs. Thoughts?. @joeblew99 Do you mean to have a command to run a simple go generate for current package?. Thanks for the explanation @joeblew99, it definitely helped. Also read the Design Doc\nIf I understand this correctly, as a first step, there should be a way to run the go generate command either on current file or current package.\nNext, there should be some way to get this go generate to run every time time there is a change to certain files. This is where I am slightly stumped. How do we decide which files need to be watched for changes to trigger the go generate?\nIs it ok to expect the user to specify these files via settings?\n. @pierznj Can you share more details?\nI tried renaming with below 3 scenarios and all worked as expected\n\ncursor inside the symbol\nfull text of the symbol selected\npartial text of the symbol selected. > failed MSpanList_Insert 0x464110 0x3c235d63c754c 0x0\n\nthat seems very Go specific, most likely an issue with gorename itself.\nAm curious, where did you see this error now if the renaming works now. @codeliveroil If a newer version of gorename fixed the issue, then that's the solution. There is nothing else we can do from the Go extension\n\nOut of curiosity, where do the error logs for vscode go to, on the filesystem?\nActually nowhere. When you are debugging Go code, there is an option to collect traces. But nothing for the rest of the extension features. @mattetti Closing the loop on this. As you know contextual menu is now possible in VS Code.\nright click on a function/method call that isn't implemented and generate a snippet named after the selected symbol.\n\n277 is tracking this request\n\nright click on a go file and choose create a test file which would generate a new test file named after the selected file.\n\nWe now have commands to generate unit tests \n\n\nextract/refactor feature - select a chunk of code, right click > extract as function, pick a name, the selected code is now used as the body of a new function which is called from the location where the code used to be.\n\n588 will track this request\n. From @klaidliadon in #1620\nIt would be nice to have a \"create function/method\" command for functions/methods that are not yet defined.\nFor instance:\n```go\ntype a int64\ntype s struct{}\nfunc main(){\n    var err error\n    if err = someFunc(a(1), s{}); err != nil {\n        log.Fatal(err)\n    }\n}\nShould create something like:go\nfunc someFunc(v1 a, v2 s){\n   return nil\n}\n``\n. @pavittr #868 has a hack to get around the issue.\nLooks like we have to use v2 of dlv apis to be able to configure the max string length..onWillSaveTextDocument` API is now available: https://code.visualstudio.com/updates/v1_6#_new-apis\nThe only catch is that there is a limitation on the time taken for the listeners of this event. \nThere have been cases where the formatter in the GO extension seem to take a long time (multiple seconds) in which case, they will be eventually ignored: https://github.com/Microsoft/vscode/blob/a6435b1cbd1417b0d334ea9018f5371df198898f/src/vs/vscode.d.ts#L3980\n. Closing in favor of #540 which will fix this issue as well. With the work in #540 completed, the latest update to the Go extension (0.6.70) has the fix for this issue.. The below commands have been added and will be available in the next update\n- Go: Install Current Package\n- Go: Build Current Package\n- Go: Build Workspace . The below commands are now available in the latest update to the Go extension (0.6.69)\n- Go: Install Current Package\n- Go: Build Current Package\n- Go: Build Workspace . The below commands are now available in the latest update to the Go extension (0.6.69)\n- Go: Install Current Package\n- Go: Build Current Package\n- Go: Build Workspace . @ironcladlou Are you aware of any updates in this space?. @ironcladlou Looks like this was abandoned https://go-review.googlesource.com/#/c/10318/\nSo will close this.. @lukehoban This is still an issue in Windows if the drive letter in the GOPATH is capitalized and the path contains forward slashes.\nReason is that the check at https://github.com/Microsoft/vscode-go/blob/master/src/util.ts#L92 will never pass when GOPATH has forward slash in Windows\nAre we canonicalizing the filename because VS Code always lower cases the drive letter in windows while giving document.fileName ? https://github.com/Microsoft/vscode/issues/9448#issuecomment-244804026\nIf yes, then we should just update the drive letter and restrict this update to Windows\n. Closing as the casing is no longer an issue with recent versions of guru. > gometalinter prints to stdout but golint prints to stderr\n@sijad The latest golint prints to stdout as well\n\nif you want to use \"go.lintTool\": \"gometalinter\" you'll have to install it yourself since it is a multistep install (go get then gometalinter --install --update).\n\n@sijad @lukehoban Was there any reason, not to install gometalinter and then run gometalinter --install as part of the \"install tool\" process?\nI have a PR out #735 to do the same, and was wondering if I am missing some reason why it shouldnt be done.\nWould love your feedback on the PR as well.\n. @paddie Which platform are you on? I see the slowness in Windows but not in Mac\nAnd also it is more slow when renaming symbols across files compared to renaming local symbols that are scoped to a single file\n. Thanks for the follow up @mattetti. Closing.. @jmhodges Yes, try running gorename in the command line on the same file. If that takes a long time, then there is nothing we can do from our side.\n. @mattetti Agreed.\n@dbenque I am guessing you have this issue when you run any of the Go tools from the command line as well?\nClosing this as an upstream issue with the tools. Assuming your launch config is set to point to the package, wouldn't just hitting F5 work ?\n. Looks like this should be doable as per https://github.com/Microsoft/vscode/issues/2780\nWill try to get this in in the next update. In the latest update (0.6.56), you can \n        - Press Ctrl+F5 or run the command Debug: Start Without Debugging to run using the currently selected launch configuration.\n        - If you don't have a launch.json file, then the current file will be run.\n        - Supported only for launch configs with type as debug and program that points to a Go file and not package. @gosp We do send GOPATH as configured in settings.json to the Debug: Start Without Debugging command.\nI have similar setting as yours where go.inferGopath is true and I have set a toolsGopath and nothing else. GOPATH is not configured as env var outside of VS Code either. And Debug: Start Without Debugging uses the inferred Gopath in my case.\n\nRun Go: Current GOPATH command and ensure what you see is what you expect your GOPATH to be\nClear out GOPATH from env property of your debug configurations in launch.json if you have any and try again?. @gosp I can repro now. This is because, the debug adapter cannot read the settings. This is being tracked in #840. I have a way to get around this in mind, please follow #840 for now.. Inlcuding @ironcladlou here, as he had originally written the test related commands in the Go extension.\n\n@ironcladlou Thoughts? I agree with @AlekSi and @davyzhang that we can map the test file as per naming conventions\n. The latest update (0.6.53) has the fix to this issue.\nThe fix being that if current file is not a test file, then an error message is shown if you attempt to run Go: Test File or Go: Test at cursor. Closing this issue as we havent heard back from the OP in a long time.. Closing this as there has not been any ongoing discussion here. This has been fixed in the latest version of the extension : 0.6.45\n. Like the README says, to debug tests, you need to add a configuration in the launch.config with \"mode\": \"test\"\nFor debugging single tests, as @marklap has shown you can pass -test.run and the Test name as args.\nThese args will be passed to dlv.\n. @nikhilraog09 Also ensure that the program property points to the package to which your test belongs. @aphillips801 The json file being referred to is launch.json. \nSee https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#set-up-configurations-in-launchjson. All,\nThis is already a very long thread on a closed issue. \nPlease log a new issue. \nNotifications on closed issues usually don't get our attention as much as a new or open issue would.\nAlso try using delve from command line to ensure that this is not a delve problem.. @JohanSJA goimports/goreturns do not change the alias on the imports\n@matwachich Like @lukehoban and @peterbourgon have mentioned, this is a very corner case. Closing this for now. If there are more people supporting this, then we can circle back.. @kdeenanauth Do you mean to be able to go to the line where the import statement lies? Or go to the go files which are part of the imported package?\n. Yup, when there are multiple files associated with a package, where would the click go\n. Browse Packages in Sublime does something similar. \nWe can use the quickpick control to show the list of files in the selected package.. @jackie-qiu As far as I know, there is no PR open for this.\nDo you mean to ask when will this feature be implemented?. Definitely in June. Hey @jackie-qiu, not yet. I'll try to get it into the next update. Re-opening to do the below\nThe Browse Packages feature relies on the running of go list all when extension gets activated (when you open a VS Code window).\ngo list all is  a little slow, but much more slower on slower machines.\n\nWill add a message saying \"Still collecting all packages, try after some time\"\nWill also cache the result, so that the second time you open VS Code, you will have something to browse, while in the background go list all is run again and cache is updated.\n\n. This feature is now out in the latest update (0.6.63) to the Go extension\n - If cursor is on an import statement, then files from the imported package will be shown in the quick pick control\n- Else, all packages are shown in the quick pick control. Select any and corresponding Go files will be shown next.\n- Selecting any of the Go files, will open the file in a new editor.. In that case, that should be feature request for VS Code and not the Go extension.\nPlease create an issue at https://github.com/Microsoft/vscode. @mdempsky #673 is currently tracking the idea to use go build -i while running build on save to make the subsequent builds on save faster.\ngo build -i would install the dependent packages which would satisfy your request.\n@lukehoban Please provide your thoughts on #673\nClosing this issue.. Closing this issue as there is nothing we do in the Go extension for this at the moment. If anyone has any ideas, please drop a comment here and we can re-visit this. Update: One alternative (if you are not on Windows) is to use the language server from Sourcegraph. @jontonsoup Do you still have this issue? Can you share your error message?. @jontonsoup Good to know, thanks!. @njsrikar You should also be getting a \"Rename failed: \" followed by the error thrown by the gorename tool. @deepakjois \n\nDo you see any message of the form Rename failed: ...\nDo you see any errors in the console? Run Developer: Toggle Developer Tools to open the console\nCan you run gorename in the terminal outside VS Code and see if it works as expected.\n\n. @deepakjois \n- Run the command Go: Current GOPATH.\n- In the integrated terminal, run echo $GOPATH and go env GOPATH. \nCompare the output in all 3 cases with your expected GOPATH. All match? None?\n. Ya, but all match with the GOPATH you expect? And your current Go file is under that GOPATH?. @deepakjois \nThe stack trace has the error message of the format Rename failed: ...\nThe reason I was looking for this was that anything following the Rename failed: words are the words from the error message from running gorename\nFrom the stack trace I see a lot of \"go\": executable file not found in $PATH. This error is coming from gorename\nCan you either add the location of the go executable to $PATH or set the go.goroot to your GOROOT?. @meddario Go supports the use of multiple GOPATHs. Why not add the location of your source code to the GOPATH?. This feature is now available in the latest update to the Go extension (0.7.0)\nThanks to @sphawk!. autocomplete works for me on packages with alias. \n@peterbourgon @eosrei Do you still see issues?\n. Thanks @peterbourgon I'll close this issue.\n@eosrei If this still occurs, please drop a note. . @Jerry7X @georgeonofrei This issue is an old one. Can you guys comment/upvote #652 ?. When I run Go: Test coverage in current package, the non _test files of the current package get updated with highlighted code that has been covered.\nI am using go 1.7 in a Windows 10 machine and OS X El Capitan 10.11.6\nDo any of you see any errors in the console?. The latest update (0.6.53) has the fix to this issue. Thanks @nochso \nThe fix being that we now show an error message when tests fail while attempting to run test coverage. @samherrmann There has been quite a few changes to goPath.ts and goInstallTools.ts files since this PR. Can you resend this PR, after getting the latest from master?. Thanks @samherrmann !. One catch with setting this as a user/workspace setting is that the debug adapter will not be able to read it, and so this will work for all tools except dlv. As of now, there is no way to pass the settings to the debugger.\nTherefore, setting the env property in launch.json is the way to go.. @CannibalVox Do you still have issues? Which version of VS Code are you using? Can you share your OS details?\nAs per https://github.com/Microsoft/vscode/issues/7343#issuecomment-227740322, can you try the following:\n- open a terminal and print your environment (e.g. by using env)\n- in VS Code open the Development Tools (F1, Developer: Toggle Developer Tools) and type process.env in the console and expand the Object.\nNow compare both environments (especially the PATH).\nIn theory they should be (almost) the same because VS Code tries to import the environment that you get in a terminal into the VS Code environment.\nAlso does running VS Code from command line resolve this?\n. The process in the console has the same env vars as the process runinng vscode. The Go extension runs in a separate process which should have the same env vars as the former + whatever GOPATH and GOROOT you set in user/workspace config.\nTo people still having this issue, can you confirm that dlv is in your $GOPATH/bin or PATH?\n. @nuclearsandwich Can you try again with the latest VS Code and latest Go extension?\nThe debugger cannot read GOPATH from the settings. Therefore, if it is not set outside of VS Code as an env variable, then setting it via the env property in the launch.json is the way to go. Summarizing here:\n\nThe debugger tries to find dlv binary in GOPATH/bin where GOPATH is the one you have set outside of VS Code as an env variable. If not found there, then it looks at PATH\nThe debugger is not aware of any of the settings in your User/Workspace settings. Therefore, if you have set go.gopath and expect that value to be used by the debugger to find dlv, that will not work. Workaround is to either\nSpecify the GOPATH as an env variable outside VS Code and reload VS Code window\n OR\nSpecify the GOPATH as an env variable using the env:{} property in launch.json. This will be used as GOPATH by dlv itself. And as of the latest Go extension update (0.6.53), this will also be used by the debugger to find dlv binary in the first place as well\n OR\nUpdate your PATH env variable to point to the location of the dlv binary and reload VS Code window\n\n\n\nThis should help resolve the issue of \"Cannot find Delve debugger\".\nI am closing this issue for now. If the steps above do not help, please drop a comment.\nI have added a wiki for troublseshooting debugging issues as well with the same notes: https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#troubleshooting\n. @nuclearsandwich glad to hear, Happy Coding!. Thanks for the analysis @didenko . Hello All,\nSorry it took so long to respond.\n@luca-moser @0xdeafcafe @tdorn @assafmo @kaiortmanns @okeefm @m3l7 @1dnmr @sergeyu @sambengtson and anyone else still seeing unverified breakpoints, please try the following\n\nGet the latest delve (0.12.1)\nWindows and Linux, you can do a simple go get -u github.com/derekparker/delve/cmd/dlv\nMac OS X users, if you had used brew to install delve, then  brew uninstall delve and brew install go-delve/delve/delve\nIf you have not used brew to install delve in OSX, I am not sure what the steps are to update delve. Check the repo for delve for instructions.\n\n\nGet the latest version of the Go extension (0.6.53) and ensure VS Code is 1.8.0 or above \nReload VS Code and try adding breakpoints and debugging\n\nIf you still see issues, then add \"trace\": true to your launch.json and try again. This will output a lot of logging by the Go extension to a file whose path will be printed out to your debug console. Share this file with us, and we can use that to figure out where exactly is the debugger failing.\nIf you want to see this logging on your debug console too, then add \"trace\": \"verbose\" in your launch.json\nIf you don't see any issues after updating delve and the Go extension, please drop a comment here as well.. Thanks @marcelocantos and @nicksnyder . \n@a57571735 Can you try using dlv from the command line and see if you are able to set breakpoints and step in/out/next without issues?\n. @farcaller Is it broken just for the case of symlinks that you have mentioned above or in general?\n. Can you log a separate issue for that? The problem in the current issue is fixed for users by updating their delve.. @pashute This repo is for the Go extension. Please log your issue in the repo for the extension you are using for python. @primalmotion \nthe issue about pausing not working is tracked in #978 \nthe issue about not able to set breakpoints when the program is running is discussed in https://github.com/Microsoft/vscode-go/issues/473#issuecomment-334901004 and is an issue with delve itself. See https://github.com/derekparker/delve/issues/982. All, \nI am locking this thread as it is getting hard to maintain the different threads in a single issue.\nFeel free to log a new issue.. @muidea Can you respond to the questions posed by @lukehoban @epsniff and @mattetti ?\n. Closing this PR as we haven't heard back any answers from the OP to the questions posed.. @ipfans Do you still see this issue when \"go.coverOnSave\":true ?\n@omega0ne Do you still see this issue at all?. Thanks @ipfans . @seemsindie Do you still have this issue? Can you give an example of a line of code that gets deleted for you? Is it packages that have been imported but not used yet? Or blank lines?\n. @joelsinbarba You can change the formatting tool being used to gofmt. Just add this line to your user settings:\n\"go.formatTool\": \"gofmt\"\ngofmt does not remove unused imports where as goimports and goreturns do. Thanks @mattetti . Once I get this PR merged, I'll get to the context menu.\nInitially build failed as go get godoctor failed with Go v.1.5\nsetting GO15VENDOREXPERIMENT=1 fixes that.   \nNeed to set the same via travis\n. godoctor does have limitations in the extract method feature. \n\nCode containing return statements, defer statements, or anonymous functions cannot be extracted\n\n@mattetti My examples did not contain any of the above and the refactoring did work.\n@lukehoban I didn't have format on save set, so couldnt catch the Cannot read property 'apply' of undefined. The code that applies the diffs has been extracted out of goFormat into utils. There was a missing check on null which broke the format feature which can be easily fixed.\nRegardless, since it seems like godoctor doesn't extract the method well in many common scenarios like you both have experienced, I will revert the changes for now.\n. @lukehoban I have reopened the PR after fixing the issue with formatting. #404\nI am curious about few of the errors you encountered.\nCan you provide me sample go code where you found the below errors? It would help me determine if the problem is with godoctor or my integration.\n- Failed to parse the patches from godoctor: Illegal escape in patch_fromText: default:\n- Error: Completing the transformation will introduce the following error: <stdin>:59:2: no new variables on left side of :=\n- Error: could not import golang.org/x/net/http2/hpack (cannot find package \"golang.org/x/net/http2/hpack\" in any of:\nThanks!\n. https://github.com/Microsoft/vscode-go/commit/5e6498f66fb7ff0e74c0fd08a3672d7a7b219e09 has fixed this. @benclarkwood \nIn a go file with no imports, I added fmt.Println(\"Hello\") and saved to trigger the auto import which gave me\ngo\nimport \"fmt\"\nThen I added math.Abs(1) and saved the file which updated the import block to\ngo\nimport (\n   \"fmt\"\n   \"math\"\n)\nThe auto imports do get collapsed. \nIs your scenario any different?\n. @benclarkwood  @peterbourgon  Sorry, I saw the word \"goImport\" and my brain mapped it to \"goimports\" the formatting tool and thought the problem was with the imports that get added when formatting is triggered.\nAt the moment, any new import added via the Go: Add Import command gets added inside () if existing imports on the page are already inside a () or if there are no imports on the existing page. Else, they get added as separate import statements.\nI think this was intentional so that if someone has separate imports to begin with, the status quo is maintained.\n@lukehoban Can you confirm?\nYou could add a setting which when true will always collapse the imports even if the current file has multiple import statements.\n. The linked PR has been merged and this change will be out in the next update. This is now out in the latest update to the Go extension (0.6.72). Duplicate of #316 \n. @joeblew99 This doesnt sound right. The Go extension should have picked up GOPATH from your env vars even if you havent set it in the settings in VS Code.\nDo you still see the same with the latest Go extension?\n. Thanks @joeblew99 . #259 is already tracking this. Closing this issue as duplicate\n. @aaronkavlie-wf Do you mean the integrated terminal when you say \"bottom panel\"? If yes, then you can add a keybinding to workbench.action.terminal.focus command. Details are on the vscode blog for the Integrated terminal\n. @aaronkavlie-wf In that case can you open an issue in the repo for vscode?\n. @aaronkavlie-wf In the latest VSCode there are more commands around focusing editors/panels that you can add keybindings for\n// - workbench.action.focusFirstEditor\n// - workbench.action.focusLeftEditor\n// - workbench.action.focusPanel\n// - workbench.action.focusRightEditor\n// - workbench.action.focusSecondEditor\n// - workbench.action.focusThirdEditor\nCan you give these a try?\n. @mavenugo Quite a few things have changed in the extension since July, can you try the latest VS Code and the latest Go extension and see if you still have these issues?. The TextEditorOptions does have a tabsize property. On active editor change, we could change the tabsize if the file in the active editor is a go file.\n. This issue has been moved to Microsoft/vscode#10565\n. @Tyriar Can you take a look at this PR ?\n. @prencher Feel free to re-open if you are able to reproduce the bug\n. Hey @pradhul-dev, this repo is for the Go extension for vscode. Can you log your issue in the repo for vscode? \n. Closing this PR as #577 has done the same\n. #586 will fix this\n. The latest update (0.6.48) has the fix. \nHappy Coding!\n. This issue was moved to Microsoft/vscode#18003. This issue was moved to Microsoft/vscode#10593\n. With the changes to the format on save feature in the latest release of this extension (0.6.70), you should no longer have this issue. @mattetti I wanted to revisit a few of the topics here based on the updates we have done for the extension in the past few months\nMissing GOPATH\nIn the next update (0.6.48), if GOPATH is not set, a info box will pop\n\nClicking on \"Set GOPATH in Workspace Settings\" will open the workspace settings where once you can set the gopath.\nAbout your comment on GOPATH in Mac\n\nuse the users's $GOPATH env variable on mac by default\n\nI believe we already do this. Have you found it to behave otherwise?\nDefault Settings\nThe default values you mention in https://github.com/Microsoft/vscode-go/issues/394#issuecomment-240182136 are already the default values. \nOne good thing in the upcoming VS Code 1.7 release, is that in the default settings file, all settings are collapsed, thus making it less overwhelming to first timers, who wanted to check out what settings matter to the Go extension\n\nMissing Analysis Tools\nI totally agree that this is hard to see. I'd prefer a msg box just like for GOPATH mentioned above with an extra option of \"Don't ask again\" just in case if anyone explicitly does NOT want to install one of the tools. The individual features already have their own msg boxes if the dependent tool is not found.\nThoughts?\nDiscoverability\nCreated #596 to track the suggestion about adding gifs for features for better discoverability.\nCreated https://github.com/Microsoft/vscode/issues/14826 to track the showing of README when user clicks on the Install button.\nHave I missed anything? :)\n. In the extensions view, you can now see more details about the extension\n\nBy default, you get read the same README that is part of the repo for the Go extension\nThe second tab \"Contributions\" lists out all the settings and commands that are shipped by the Go extension.\nChangelog of course shows you the changelog.\nClosing this issue for now, as most of the concerns have been addressed and separate issues have been created for the remaining ones.\n. In the extensions view, you can now see more details about the extension\n\nBy default, you get read the same README that is part of the repo for the Go extension\nThe second tab \"Contributions\" lists out all the settings and commands that are shipped by the Go extension.\nChangelog of course shows you the changelog.\nClosing this issue for now, as most of the concerns have been addressed and separate issues have been created for the remaining ones.\n. @erica-zhou Do you still see this issue?\nI followed your steps and I get the right (different) GOPATH for both the projects\n. \nFor people who see \"Failed to continue: \"Cannot find Delve debugger. Ensure it is in your 'GOPATH/bin' or 'PATH'.\"\n\n\nThe debugger in the Go extension cannot read GOPATH from the user/workspace settings. You need to specifically set the GOPATH in the env property in the lanuch.json\n\n\nIf your GOPATH was set as env variable outside of VS Code and you didnt have to set GOPATH in user/workspace settings, then debugger can read the GOPATH set as env variable.\n\n\nFor people who see \"could not launch process: could not fork/exec\",\n- this is coming from delve itself.\n- some people seeing this error got it fixed by manually installing delve See https://github.com/Microsoft/vscode-go/issues/20#issuecomment-272090465, #269\nClosing this issue.\n. @lukehoban  would a setting to toggle verbosity suffice or would a testFlags setting just like build/format/lint/vet flags be preferred?\n. @tsandall I'd love to get this PR merged as well.\nCurrently, the go.buildFlags are used for running tests. Other than -v do you foresee the need to change/add other flags while running go test which are different from go.buildflags?\nThe current bone of contention is whether there should be a separate setting to control the verbosity of go test  or we should have a setting for test flags as a whole and stop using the build flags. The latest update (0.6.53) has the option to add testflags applicable to all tests as well as key bindings to run any of the 3 test commands with any flags.\nFrom the ChangeLog:\n\nA new setting go.testFlags that can be used to run tests. If null, go.buildFlags will be used. PR 482\nCustomize flags for each of the test command by using different keybindings. PR 482. In the below example, ctrl+shift+t is bound to run the tests in current file with -short flag. The commands here can be go.test.package, go.test.file or go.test.cursor.\n    json\n    {\n        \"key\": \"ctrl+shift+t\",\n        \"command\": \"go.test.file\",\n        \"args\": {\n            \"flags\": [\"-short\"]\n        },\n        \"when\": \"editorTextFocus\"\n    }. @AlekSi @mattetti Not anymore :)\n\n\n\nhttps://github.com/Microsoft/vscode-go/wiki/Release-Notes\n. Closing this PR in favor of #2139. @kieferrm This is not related to the Go extension, any particular reason, it was moved here?. Thanks, I am closing this one and re-opening the original issue in vs code. Closing this in favor of #587 \n. This feature is now available in the latest version of the Go extension : 0.6.44\nYou need to set go.autocompleteUnimportedPackages to true to enable this feature.\nDo give it a try and give feedback\nWe will turn it on by default in the next update\n. @a-h Thanks for bringing up the feature request in the first place. There has been a lot of positive feedback around this!. @lunchboxsuhi this is definitely a formatting issue.\nCan you share your user and workspace settings and list of extensions you have installed?\n. @lunchboxsuhi Do you still have this issue?\nWe have had others who had similar infinite save+edit+save+edit problem. Turns out there was another extension interfering and causing the problem.\nIf you still have this problem, can you disable all other extensions to see if any of them have been causing this?. no problem @lunchboxsuhi, glad that you are unblocked.\nHappy Coding!. @Velds @josedepaz Do you still see this issue?\nI am able to get imports from the vendor directory using both goimports and goreturns\n. Closing this issue, as there has been no more updates on if this is still a problem. @Velds feel free to re-open this if you are still having problems with your imports\n. Another case:\n\nThis doesn't happen when the bracket is inside double quotes or back ticks. Only happens with single quotes\n. @aeschli Any pointers on how we can fix this?\n. @syniuhin I don't see this happening in the latest VS Code.\nMust have gotten fixed somewhere along the line.. @leaxoy  This incomplete list of go tools gives you a good idea of gofmt vs goimports vs goreturns\nLike @mattetti said, the user gets to choose which tool they want to use.\n. In one of the recent updates, we provide an option to use gogetdoc for the Goto/Peek Definition, Hover and Signature Help features.\nUntil the upstream bug with godef is solved, you can set \"go.docsTool\": \"gogetdoc\" in your settings to make use of gogetdoc instead of godef.\n. @fnouama @kletkeman Do you see the \"Illegal value for line\" while performing any particular operation or only while saving?\nThe blinking behavior tells us that the file keeps getting saved, edited, saved, edited, over and over again.\nTo exclude the sceanrio that this might be caused by other extensions interfering with the save operation, can you disable all other extensions (other than Go) and see if you can still repro this?\n. Thanks @kletkeman \n@fnouama How about you?. Thanks @fnouama \nWill close this issue then.. @mattetti The latest update (0.6.48) has these features:\nCommands to switch to test file and back. You can add your own shortcuts for these commands.\n        - Go: Open Test File\n        -  Go: Open Implementation for Test File\nNavigate to test file after generating unit tests using the Go: Generate unit tests ... commands that were added last month\nThis should cover most of your asks here :)\nHappy Coding!\n. @mattetti The latest update (0.6.48) has these features:\nCommands to switch to test file and back. You can add your own shortcuts for these commands.\n        - Go: Open Test File\n        -  Go: Open Implementation for Test File\nNavigate to test file after generating unit tests using the Go: Generate unit tests ... commands that were added last month\nThis should cover most of your asks here :)\nHappy Coding!\n. Thanks @fatih, @zmb3\n@fatih So from what I could gather from the tweet, you use space separated keys and comma separated options. For static values, you use colon to separate the key and the value\nSo all of the below would be valid in vim-go ?\n\n:GoAddTags json xml\n:GoAddTags json,omitempty xml,cdata\n:GoAddTags validate:\"gt=1\"\n:GoAddTags validate:\"gt=1\",omitempty\n\nI am asking because I'd like to keep the behavior as similar as possible :)\n. @zmb3 Don't apologize, am always open for talking through design :)\nI did see your support for gomodifytags in Atom. And while yes, that would be very user-friendly, that kind of ui freedom is restricted for extensions in VS Code.\nThe most I can play with is an input box or a dropdown. (Anybody who knows otherwise, please chime in)\nTherefore I was planning to go with the inputbox which can show up when the command for adding/removing tags is executed.  \n. That was my initial thought as well.\n\nDefault Behavior: Go: Add Tags and Go: Remove Tags adds and removes json with omitempty\n          - Takes care of the 80% scenario that @mattetti mentioned\nSlightly Customized Behavior: We can have settings where user can specify the tag and options to add/remove\nCaters to those who want more than just json\n\n\nFinal Customized Behavior: The input box opens prompting for the tag and another input box for options. Or a single input box where user adds a text command just like they do in vim-go\nCaters to those who want different tags/options for different structs in their code and don't want to keep changing their settings for this\n\n\n\nThe settings can have the below defaults that user can change\n\n\nThis is following the model which gomodifytags takes in parameters\njson\n\"go.modifytags\": {\n                 \"tags\": \"json,xml\",\n                 \"options\": \"json=omitempty, xml=cdata\",\n                 \"promptForTags\": false \n           }\nOR\n\n\nThis is following the model which vim-go works (as far as I could gather from the tweet, @fatih correct me if I am wrong)\njson\n\"go.modifytags\": {\n                 \"tags\": \"json,omitempty xml,cdata\",\n                 \"promptForTags\": false \n           }\n\n\nThoughts?\ncc @rakyll @campoy My new gopher friends for their thoughts. The thing about the right click context menu is that there is very little control around when the menu option shows up. See the when clause contexts\nSo if we do add it, it will always show up whether you are inside a struct or not.\nWe could add another setting \"showInContextMenu\" and set the default to true, so that the feature is more visible. \nAnd people who feel their context menu is getting crowded can turn it off.\n. @mattetti I'll dig into more around the flexibility we can have around the context menu\n@fatih thanks for the clarification\n@rakyll That was just an example for the settings a user can have. By default, those settings would be\njson\n\"go.modifytags\": {\n                 \"tags\": \"json\",\n                 \"options\": \"json=omitempty\",\n                 \"promptForTags\": false \n           }. Here is what I have landed on:\n\nIf there is a selection, then the selected lines of the struct will be acted upon\nIf there is no selection, then the whole struct under the cursor will be acted upon\n\nCommands:\n-  Go: Add Tags adds tags configured in go.addTags setting to selected struct fields. By default, json tags are added. \n\nGo: Remove Tags removes tags configured in go.removeTags setting from selected struct fields. By default, all tags are removed. \n\nSettings\n- Default for go.addTags is \njson\n{\n    \"tags\": \"json\",\n    \"options\": \"json=omitempty\",\n    \"promptForTags\": false\n}\n- Default for go.removeTagsis\njson\n{\n    \"tags\": \"\",\n    \"options\": \"\",\n    \"promptForTags\": false\n}\n- You can change the above as per your needs. Examples:\n         - To add xml tags, set go.addTags to {\"tags\": \"xml\"} \n         - To add xml with cdata option, set go.addTags to {\"tags\": \"xml\", \"options\": \"xml=cdata\"}\n         - To add both json and xml tags, set go.addTags to {\"tags\": \"json,xml\"} \n         - To remove only say xml tags, set go.removeTags to {\"tags\": \"xml\"} \n         - To be prompted for tags instead of using the configured ones, set go.addTags and/or go.removeTags to {\"promptForTags\": true}\nKeyboard Shortcuts: (these are just examples you can use in your keyboard settings, there will be no shortcuts shipped by default)\n\n\nBelow will add whatever is configured in go.addTags setting\njson\n{\n        \"key\": \"ctrl+shift+q\",\n        \"command\": \"go.add.tags\",\n        \"when\": \"editorTextFocus\"\n}\n\n\nBelow will add xml tags\njson\n{\n        \"key\": \"ctrl+shift+q\",\n        \"command\": \"go.add.tags\",\n        \"args\": {\n            \"tags\": \"xml\"\n        },\n        \"when\": \"editorTextFocus\"\n}\n\n\nBelow will open an input box where you can provide the tags\njson\n{\n        \"key\": \"ctrl+shift+q\",\n        \"command\": \"go.add.tags\",\n        \"args\": {\n            \"promptForTags\": true\n        },\n        \"when\": \"editorTextFocus\"\n}. Hey @campoy, no problem at all\n\n\nTo add both json and xml flag, you can replace \"json\" with \"json,xml\" and then cmd+p -> Go: Add Tags\nOR\nYou can do what you described (set \"promptForTags\": true) , and when the input box opens up, type in json,xml not json xml\nBasically, I am following the input format for gomodifytags instead of the :GoAddTags command in vim-go. @campoy aww thanks :) I should take some lessons in creating screencasts/gifs from you\nRegarding, selecting the whole struct, it works for me. Example, see below\n\nBut if a select one extra blank line in the bottom or a comment at the top, then I get the same error like you mentioned.. @fatih Yes vscode supports that (place cursor anywhere inside struct, and magic happens) as well. That would be ideal. I'd prefer the trimming happen on gomodifytags side though.\nWe could do it from the editor's side, but then every editor adopting gomodifytags will have to do the trimming.\n@fatih thoughts?\n. @fatih \n\nSo there is no concept of content\n\nYes, in that case, it makes sense for the editor to do some checks if it can. If its complex, then I'd suggest its not worth absorbing the change into the tool.\nIts fairly easy for editor's to check that there are no empty lines in the beginning and ending of the range of lines that it passes to the tool. @fatih \n\nI had to delete code to add this feature\n\nLove it :) There should be t shirts with that message. This feature is now available in the latest version of the Go extension : 0.6.44\nYou need to set go.autocompleteUnimportedPackages to true to enable this feature.\nDo give it a try and give feedback\nWe will turn it on by default in the next update\n. I can't repro the issue and so cannot test the fix. Can anyone on this thread volunteer to test this?\nSteps:\n- Clone the repo https://github.com/Microsoft/vscode-go\n- cd into the repo\n- Get the branch with the fix roblou/killProcs\n- npm install\n- If you don't have the vsce tool, then npm install -g vsce\n- vsce package to get the vsix file for the extension\n- code --install-extension Go-0.6.53.vsix to install the extension from the six\n- now run vs code as you normally would\n. @intdel Am not sure why you are seeing that error, I am able to npm install successfully on a freshly cloned repo. What is your version of node and npm?\nNevertheless, you can comment the line for @types/fs-extra from package.json and continue. It is just a dev dependency, and since you will directly be packaging the code into a vsix, you wont need it. wow, can you share what version of node, npm and typescript you have?\n. Yay! Thanks @intdel !!. @YCF Thanks for reporting, the fix will out in the next update of the Go extension early next week.. Fixed in the latest update (0.6.54) to the Go extension.\n@cevn This update was due for a while, sorry to keep you waiting :). @hyacinthus Can you share sample code and repro steps?\nAre you saying that using the same code in other platforms in VS Code, you don't see the issue?. @roblourens Can you think of any reason why this solution wouldn't work in just linux?. Hello all,\nWe have revisited the fix to this issue by using the detach command from dlv instead of manually killing the processes from our end. I would appreciate it, if anyone here can give the fix a try. Please follow the below instructions to do so:\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. This got fixed in VS Code 1.5.0 \n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, reload/restart VS Code and that should fix this issue.. Closing this issue, as we have a workaround\n. @sfrooster See #541 and #503 \n. @gevgev \nDid you try killing the current running gocode daemon as per https://github.com/Microsoft/vscode-go/issues/441#issuecomment-257314322\nOnce the gocode process is killed, run the command Go: Install Tools so that all dependent tools get updated\n\nAre rest of the features of the Go extension working as expected?. @gevgev I currently use go1.7.3, and I don't see the need to use sudo. Will update to go1.7.5 and get back.\nCan you try running gocode from the command line to see if you get expected output?\nIf not, then we should take this up with gocode's author. yay! glad you are unblocked @gevgev and thanks for sharing your solution.\nHappy coding!\n. @freedomsean So on the same machine, autocomplete works fine in the stable build, but not insiders?. Update: I can repro this\nWe can track this in #836. Please upvote/add comments in that issue. @dc0d I'd still prefer opening a new issue than a comment here. Rest of this issue either needed a restart of gocode or the issue with VS Code insiders. Both of which are unrelated to the detailed analysis you have done.\nThe multiple candidates is not an issue. It just means that there are multiple completion items.\nI've logged #1431 to track the issue with unicode. \n. This is an issue with godef itself. \nhttps://github.com/rogpeppe/godef/issues/48\nhttps://github.com/Microsoft/vscode-go/issues/599\n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, reload/restart VS Code and that should fix this issue.. @zgiber What version of Go are you using? Can you share the output of go version ?\nIf you are using Go from source, then yes in Go extension 0.6.50, Goto/Peek Definition, Hover info and Signature Help features stopped working. The newest update 0.6.51 has the fix for it. @zgiber Since what you are seeing is specific to gogetdoc, I opened a new issue to track it #679. Lets continue the discussion in that thread. @gbrayut @bredov This feature is now available in the latest version of the Go extension : 0.6.44\n. @gbrayut @bredov This feature is now available in the latest version of the Go extension : 0.6.44\n. @thessem @rogchap Do you still have this issue?\n. This error means that the extension is not activated.\nPlease ensurethe Go extension is not disabled. Open the Extensions viewlet Ctrl+X or Cmd+X and ensure you have the Go extension installed and is enabled\nAre you able to use any of the other features of the Go extension?\nLike auto-complete? Go To Definition etc.. @NikosEfthias Are you talking about #231 ?\n. As @lukehoban has already mentioned\n\nSounds like godoc installs to your $GOROOT/bin instead of $GOPATH. There's some notes on this here: http://stackoverflow.com/questions/33752247/unable-to-install-go-packages.\nNot sure what else vscode-go can do in this case - other than find a way to provide this support without using godoc. In another issue, it was suggested to use https://github.com/zmb3/gogetdoc instead, but that currently only support Go 1.6, which may not work for a decent portion of users.\n\nand\n\nGoing to close this out now - since I can't think of anything more vscode-go can do - other than what's tracked in #87.\n\nFor now, you can follow the workaround laid out in the stackoverflow article.\nIf the workaround does not work for you, then feel free to re-open this issue\n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, restart VS Code and that should fix this issue.. @iOSwang You don't need to download the source code for the extension to work. Just search for \"Go\" from the extensions view and install it from there. @ronator Are you referring to the workaround in stack overflow or my suggestion to use gogetdoc?. As @lukehoban concluded in #231, the issue with godoc is not fixable by the Go extension. \nThe solution is to either follow the linked stack overflow thread or for VS Code to provide another option as a replacement for godoc. Which we did by adding the support for gogetdoc\nThe only thing I can think of we can do for this issue is to make gogetdoc the default tool which can be tracked in #1025. @NikosEfthias Just to confirm, do you see your imports disappearing on save? And do you have any references to these imports in your code?\nWhen you add an import, but don't use it, the formatting tool removes it for you when formatting is triggered. Formatting is triggered in the below cases\n- You intentionally click on Format Code option in the context menu\n- You use keyboard shortcut for the same (Alt+Shift+F in Windows)\n- You save the file manually while the formatOnSave setting is set to true. By default the formatOnSave feature for the Go extension is turned on.\n- You did not manually save the file but have both AutoSave and formatOnSave turned on\nI am guessing yours would be the third or the fourth case.\nIf its the third, then don't save the file before using the new import.\nIf its the fourth, then turn either AutoSave or formatOnSave off based on your preferences. Or start using the import without adding it. The import will get added automatically.\n. glad you are unblocked\n. @NikosEfthias another thing you can do is change your formatting tool setting to \"gofmt\". This tool will not remove your unreferenced imports.\nBut at the same time, you will lose the feature of the formatting tool adding missing imports too.\nSo your call.\n. Closing this PR in favor of https://github.com/Microsoft/vscode-go/pull/1743. @nikhilraog09 Sorry for responding so late. Do you still have these issues with the latest VS Code and the latest Go extension?\nDo you see this in all Go projects or is it restricted to large projects only?. Thanks @nikhilraog09 \nWe have a few other issues tracking the need for godef usage to be better. Therefore will close this issue.. Looking at the code, buildOnSave runs go build on the current package if current file is not a test file i.e filename ending with \"_test.go\"\nIf file is a test file then go test is run on the current package instead of go build.\nNote: When go test is run this way, the output of the test does not reach the output channel.\n@DasJott maybe this is why you say that the tests are not run?\nWe can have a separate flag go.testOnSave that would run the go test on the current package and separate testing feature from go.buildOnSave\n. @ironcladlou  @lukehoban Any thoughts on the reason behind the original design to run go test on the current package if current file is a test file instead of just go build when go.buildOnSave is true?\n. @lukehoban my bad and thanks for clarifying, I didn't know that go builddoes not build test files and I totally missed the -c flag in the go test.\nUpdating the documentation makes sense.\n@TheChuckster This still doesn't solve your original query. Did you figure that out or you still feel that your tests are running on save?\n. Created another issue to track the test on save feature.\nThe comment on go.buildOnSave  has been updated.\nClosing this issue, as it is clear now that tests are NOT run when go.buildOnSave is set to true\n. The testOnSave feature is now available in the latest update (0.6.54) to the Go extension.. Seem to be connected to linting. When I set go.lintOnSave to false in User Settings, I don't see this anymore. @cjqpker @c633 : Can you confirm?\n. Sorry for the late response.\n@Narven We now know that the behaviour you are seeing is usually caused by one of the other extensions interfering with the save process. If you are still seeing this issue, then can you try disabling other extensions that you may have and see if this still persists?\n@c633 Can you try the same? i.e disable other extensions and see if you still see the issue?. @sebrandon1 I meant disable other extensions (not the Go extension) to eliminate the case of other extension interfering with the Go extension's save process :). Closing this issue as it hasnt seen any recent activity. @tw1nk This fix (#458) is now available in the latest version of the Go extension : 0.6.44\n. @lukehoban @zmb3 @abarisain Would integrating gogetdoc help here?\nhttps://github.com/Microsoft/vscode-go/issues/87#issuecomment-241232479\n. Is this still a problem? I tried the example at https://gobyexample.com/interfaces which uses structs and interfaces. I was able to use the Go to Definition feature without any problem\nI am running VS Code 1.6.1 with Go extension 0.6.45 in Mac OS X\n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, restart VS Code and that should fix this issue.. @lukehoban half the custom logic was pulling things out of goFormat.ts. Rest is to parse the diff output and fetch diffs which was needed if we were to continue using the diff_match_patch library. I'll see if there is an existing Node package that handles the diff output parsing.\nRegarding the cursor, I didn't notice the difference between before and after. Will take a look\nThanks!\n. @lazyfingers Is this still a issue ?\n. Great, will close this issue then.\n. The fix is now available in the latest version of the Go extension : 0.6.44\n. Is this feature request for having syntax highlighting for inline template strings in go files? Or for having syntax highlighting for files that contain the html or text template with Go's tags {{ }} ?\nAlso is this request the same as #228 or different?\nBoth this issue and #228 are getting a lot of upvotes, I am trying to understand the expected behaviour.. Thanks @andradei \nIn that case the extension that @tbroyer mentioned seem to be doing the needful.\n@alexcrownus, @gertcuykens , @jimmykuu , @krmcbride, @xeleven, @MikeK123 , @guanxi55nba, @tampajohn (Folks who have upvoted this issue) Your thoughts on the extension? https://marketplace.visualstudio.com/items?itemName=casualjim.gotemplate ?. Thanks @andradei \nIn that case the extension that @tbroyer mentioned seem to be doing the needful.\n@alexcrownus, @gertcuykens , @jimmykuu , @krmcbride, @xeleven, @MikeK123 , @guanxi55nba, @tampajohn (Folks who have upvoted this issue) Your thoughts on the extension? https://marketplace.visualstudio.com/items?itemName=casualjim.gotemplate ?. @josephspurrier We support the use of either goreturns, goimports or gofmt as formatting tools in the Go extension and do nothing extra.\nSo what is needed is a tool that does formatting like the above tools and in addition also format the html like you mentioned. This way you get the template formatting not just in VS Code but also for any other editor or even an user who can use the tool independent of an editor\n. @pavelbinar Which iteration plan are you referring to?. Hopefully yes :) But I havent gotten started on it yet. I'll do some initial investigations and add my findings here in the next month or so. @cjqpker Can you share a sample code/repo where you see this?\nI followed your repro steps and cannot see the issue. For me, after Step 1 and 2, cursor goes to the line where the selected function is defined.\nI see that when you reported this initially, you were using VS Code 1.4\nCan you upgrade to the latest (1.6.1) and try again?\n. @cjqpker We were able to repro this issue by using Chinese words in comments. Thanks for reporting!\n. @cjqpker The new release of the extension (0.6.52) has the fix for this issue. @jkhelil Can you check if the discussion in #332 helps? It arrives at the same conclusion as @deejross \nBasically, ensure that in your launch.json, you have set the program attribute to the right folder\n. @jkhelil @mrichman Do you still see this issue or fixing launch.json has fixed this for you?\n. @mrichman You can use ${workspaceroot} instead of typing out the whole absolute path as well.\nFor example in your case you can set \n\"program\": \"${workspaceroot}/cmd/myapp/main.go\"\ninstead of \n\"program\": \"/Users/mrichman/go/src/github.com/mrichman/myapp/cmd/myapp/main.go\"\nAssuming that you have opened /Users/mrichman/go/src/github.com/mrichman/myapp in VS Code. Closing this as we havent heard back anything recently.. @eureka-gh Delve errors out withcould not launch process: could not fork/exec if there are issues with code signing/certificates.\nSee https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#could-not-launch-process-could-not-forkexec. @mrichman @eureka-gh Another thing I just noticed, there is a casing issue. ${workspaceroot} won't work. ${workspaceRoot} is the right token to use.. Where did you get the suggestion to use sudo? None of the linked items #717, #269 or https://github.com/derekparker/delve/issues/357 suggest using sudo.\n\"could not fork/exec\" is always associated with code signing issues.\nAll the linked items talk about clean installing delve again. glad that you are unblocked @eureka-gh, Happy Coding!. This fix is now available in the latest version of the Go extension : 0.6.44\n. @roblourens Could you take a look at this?. @derekparker Looks like delve is sending null state when the next command is executed. How do you suggest editors treat null state from delve. Can this be a bug in delve?. @cyc115 If you are able to repro consistently, then can you try to use delve from the command line and share if that works?. Does next work as well in command line delve?\nThe thing is we are getting null state from delve and so the issue. We would be in a better state to fix this if we know why delve does so\n. Can you share a sample code where this repress consistently? . @ahmedjafri I am using the same version of VS Code, the Go extension and delve as you \n\nI did a go get -u github.com/willseward/delve-crash/app \nopened the app folder in VS Code, opened main.go\nAdded breakpoint in the fmt.Println line\nHit F5\n\nI am able to hit the breakpoint, step in/out/next etc.\n\nAre you on Mac, linux or Windows?\n. @ahmedjafri Not remote debugging, I tried local.\n@cyc115 Can you set showLog to true and try again? This will show logs from delve in the debug console. Maybe that can help us in figuring out why delve is returningnull`. @ahmedjafri I can repro that.\nThe delve call here https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L510 doesnt seem to be returning at all.\nNothing after https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L508 gets printed to the logs.\nCan you try the same with command line delve and see what you get?\n\nStart delve\nset breakpoint\nremove breakpoint\nlet the program run for a while and add breakpoint again\n\n. That was very helpful @ahmedjafri Thanks! I can repro the exact same thing\n\nreceived SIGINT, stopping process (will not forward signal)\n\nI am guessing you did a ctrl+c at this point.\nLooking at the steps followed by the debugger, this is what is missing I believe.\nI wonder if our debugger is failing to interrupt the running process and ask to set a breakpoint\n@roblourens Does that make sense? ( I might be way off here). @byron70 Yours is a different issue in that you want to increase the time before the connecting so that there is enough time for build.\ncc @roblourens for increasing the time interval int he setTimeout\nThis current issue on the other hand is about the ability to add breakpoints when the Go program is already running.. Multiple issues are being talked abt here, I'll try to address them here\n\nCannot debug programs that need user input. For example: The use of fmt.Scanf. This issue is being tracked in #219. @edwinprojects This is what you brought up.\nDebug issues when passing -v in the buildFlags or -test.v in the args. This is fixed in the latest update to the Go extension (0.6.69) via #1354. @byron70 This is what you brought up and tried to fix by extending the timeout. @cyc115 This is also what you brought up.\nCannot add breakpoints when the program is not paused. This is an issue with delve itself and cannot be supported at the moment. @ahmedjafri This is what you brought up\n\n@jgimenez @svanas I dont have the details if you used -v in the buildflags or -test.v in the args. If you did, then the latest update to the Go extension has the fix. If you didnt, and can still repro this issue, please log a new issue.\nAll,\nI am locking this thread as it is getting hard to maintain the different threads in a single issue.\nFeel free to log a new issue.\n. Closing this issue as we havent heard back from the OP.. Setting env variables via the configuration settings for the tests to use would apply the same env vars to all tests in the project.\nWould that be the most common scenario or different tests needing different env vars be more common?\nIf it is the latter, we can prompt the user for entering the env vars when the test commands are triggered. And whether to prompt or not can be controlled via the configuration settings\n. @ysqi , Just to clarify ..\n\ne.g init run mode ,first check Is there a set env var runMode . different run mode use different config. runMode=test => config= app.test.config \n\nWhat you mean is in your case you would like to set an env var \"runMode\" and based on its value your tests would use different configs correct?\nAnd not that you would like a feature where vscode picks up different config files based on the runMode setting\n. @ysqi This feature is now available in the latest version of the Go extension : 0.6.44\n. @ysqi This feature is now available in the latest version of the Go extension : 0.6.44\n. @ironcladlou The test for gometalinter tries to set the user settings for linttool. \nlet config = vscode.workspace.getConfiguration('go');\nconfig['lintTool'] = 'gometalinter';\nwhich fails with the latest version of VSCode as you can no longer update config that way.\nInterestingly the comment for the above config in vscode.d.ts says it is a readonly dictionary, though it has been writable till the last release\nThere have been changes to the configuration service in VS Code in August and more to come in September \nI'd say we comment the test case for now until vscode comes up with the right way to set the configs\nLogged #479 \n. Sure, I tested your changes and they look good.\nCould you trigger another travis runs so that the tests are all green? The last time it failed due to an upstream issue with vscode-debugadapter\n. @lukehoban updated check() method to take in test configuration that will override the workspace configuration. The test for the gometalinter can pass in config this way. #480 \n. cc @roblourens \nping @ironcladlou . @ironcladlou I wish you had a chance to look at this PR. I am planning to release an update in a few days, therefore will go ahead and merge this PR so that I can do some end to end testing.\nWhen you get some time, please do add your thoughts here.. @emanuelecesari If you are new to Go, the docs for Getting Started are pretty helpful in setting up your environment.\nIt walks you through the basic installation, checking if your installation works and setting up your workspace and setting the GOPATH\n. @emanuelecesari \nCan you run a simple command go version in your command prompt to confirm that you have go installed properly?\nIn which folder have you installed Go?\nLooks like the path to go.exe is not in your $PATH environment variable\n. Closing this issue since it has been over 2 weeks since last update. @emanuelecesari  feel free to get back if you still have issues after reading the installation instructions\n. AFAIK coloring of text is done based on grammar.\nClosing this issue as I don't see how we can use type-checking and then dynamically change colors of the text.\nIf anybody knows how to do that, then we can re-visit this.\n. @kumarharsh The undo not working after a rename is being tracked in #13 \nI personally have noticed rename operation to be slow on Windows when the rename affects symbols across files.\nThe slowness is tracked in #297\n. Under the hood, the Go extension uses gorename to do the rename operation. Until recently, gorename directly updated the files on disk. In the latest update for the Go extension (0.6.44), we updated to use the diff output from gorename and apply the edits on the file in the editor in VS Code. This way, the files affected go to a dirty state and you can save/undo the changes.\nNote: This feature needs diff tool which is not available on Windows by default. You can install it from DiffUtils for Windows\n\nvscode apparently scans the whole codebase (because it starts throwing errors in unrelated files) which might contribute to the slowness.\n\nThat is done by the gorename tool itself. When you rename any symbol that can affect multiple files or rename an exported member, gorename builds the code and executes the rename only if there are no build errors. Try renaming a local variable and you will not be seeing errors related to other files.\n\nWhen I rename a variable (F2), then even after the change has been done, there is no change reflected in the file, nor is there any message as to if the process was successful or not. I have to close the file and reopen it to see that the variable name was updated.\n\nCurrently there is no message when rename is successful. But if it failed (likely because of build errors), you should see the message pop up in an info box in the VS Code window. Closing and re-opening file to see the change works for you mostly because the rename operation was slow and the gorename updates the file on disk.\n@kumarharsh @nochso Are you on Windows? Its in Windows that I have consistently seen gorename perform very slowly. Do you see the progress bar on top? Can you try running gorename from the command line and see if that is slow as well?\nAs a conclusion, I'd say update to the new version of the Go extension (0.6.44), install the diff tool if you are on Windows and give it another try. This will give you the undo feature and you no longer have to re-open the files.\n. Closing this issue as there is nothing pending to do here.. Also, this worked for me in Mac but not Windows. In Windows, gotests returned with this error\n\n. Fixed in the latest update (0.6.54) to the Go extension.. @SerjAntiquity \nSo you are able to install the tools using go get outside of vscode, but vscode cannot find them, correct?\nThis might be because GOPATH is not set.\nCan you run go env and share the result?\nCan you share a screenshot of your VS Code window?\nIs there a status in the status bar saying \"GOPATH not set\" ?\nWhat do you get when you run the command Go: Current GOPATH from your command palette?\n. Closing this issue as there as been no response for quite a while\n. @lukehoban \nAgreed that parsing is best left to utilities written in Go. Lucky for us you already have written one :)\ngo-outline returns imported packages along with rest of the declarations in a go file.\nThe need for removing duplicates from the packages list doesn't arise much for the Add Import command. Like you said, formatting would clean it up. Worst case, the duplicate would get marked with red squiggly lines getting the user's attention.\nPersonally, this ask is more for my work in #437 where I add importable packages in autocomplete suggestions. I make use of the listPackages() method from \"goImports.go\" file. If a package is already imported then my autocomplete gives 2 suggestions instead of 1. Which is why I needed listPackages() to not return packages that are already imported.\nOne catch of using go-outline as-is, is that for large go files we unnecessarily will be parsing the whole file. For this, we could update go-outline itself to take in more arguments like 'imports-only', 'package-only' and then make use of ImportsOnly mode of the parser.ParseFile method\n. The signature help feature uses the godef to get package info and then uses godoc to get the signature help. The godef tool does not support dot imports. See https://github.com/rogpeppe/godef/issues/19\nOther features of the Go extension that use the godef and so will not work with dot imports are:\n- Extra Info on hover\n- Goto and Peek definition\n. Closing this as won't fix, as the tools we use don't support the dot imported functions\n. #622 can fix this, so re-opening\n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, reload/restart VS Code  and that should fix this issue.. Reagrding https://github.com/Microsoft/vscode-go/pull/497#issuecomment-250295676\nThis is why I had logged #494. If listPackages() does not return already imported packages, then autocomplete need not have to worry about them.\nI'll send out another PR for this separately\n. Regarding https://github.com/Microsoft/vscode-go/pull/497#issuecomment-250294753\nUsing additionalTextEdits instead of command in the CompletionItem ensures that useCodeSnippetsOnFunctionSuggest feature is not broken\n. @lukehoban \n\nI do wonder if the lack of vendor packages in the listPackages list will be more noticeable with this feature.\n\nVendor packages do get returned by listPackages(). What are you referring to here?\n\nIt's quite a visible change, so it'll be interesting to get feedback - if there's any way to do that in advance of a new release would be great to get some users trying this out.\n\nI can add a setting to enable this feature, have it off by default, get feedback from users who specifically asked for this feature and anyone else you have in mind. Then, in the next release we make it a default feature.\n\nIf I already have imported the name, I now see it twice, once based on the actual name in scope and once as a suggestion for an Add Import.\n\n508 and https://github.com/lukehoban/go-outline/pull/4 should take care of this. Can you take a look?\n. @lukehoban \nA Setting go.autocomplteUnimportedPackages has been added. Its false by default. This will control the Autocomplete Unimported Packages feature\n508 has been merged, so no more double entries for the same package\n. @ironcladlou Just a heads up, travis builds most likely will fail due to https://github.com/Microsoft/vscode-debugadapter-node/issues/65\n. @benclarkwood There has been some changes to goImport.ts recently, so make sure to get latest from master before you continue\n. @benclarkwood I took the liberty of rebasing and adding tests\n  . @yoke88 This is as expected. By default, the format tool used by the Go extension is \"goreturns\".\nBoth \"goreturns\" and \"goimports\" update your Go import lines, adding missing ones and removing unreferenced ones.\nIn your case, you are adding \"strings\" and \"encoding/json\" and saving before using these packages.\nEither don't save before using unreferenced packages or change your formatting tool option to \"gofmt\".\nIf you do end up using \"gofmt\", you will no longer have the feature of getting missing imports added to your file by the formatting tool\n. You could also run the command Go: Install Tools This will install/update all the tools used by the Go extension\n. Closing this as re-installing all the Go tools solves the problem.\nIf anyone still sees this issue with Go 1.7 and Sierra, please feel free to re-open this issue\n. @archerbj Not a problem at all. \nYou need to run the command from the command pallet. So\n- Cmd+Shift+P to open the command pallet.\n- Then type Go: Install Tools, hit ENTER. \n. Users don't need to update the tools every time an update is available.\nOne thing we can do is to prompt to update when the Go version used by the user changes.\nAny other ideas?\n. @c4milo #797 has been created for this. Please share your thoughts/upvotes there.. @jmunson \nWe already lint only the current package.\nExample:\nI have all the Go projects as listed in https://github.com/golang/example \nIn VS Code, I have opened the example folder which in turn has the below folders\n- hello\n- stringutil\n- outyet\nWhen I am editing a file from the hello folder, linting shows errors/warnings from that folder\nSame with stringutil\nDo you see anything that suggests that other packages are being linted ?\n. Closing this, as we havent heard back from the OP.\n. You have a typo. Replace time.Milisecond with time.Millisecond\n. @Tyriar All comments have been addressed, I think we are good to go\n. we don't need to drop support for Go 1.5 just because golint did so. Existing users of the extension on Go 1.5 can continue to use the extension without any issues. It is only on machines where golint has not yet been installed and uses Go 1.5, that users will have problems. And of course travis. I'll send out a change soon to redirect such users to use gometalinter instead and remove golint from the install steps in travis and move it to the unit test that tests listing\n. we don't need to drop support for Go 1.5 just because golint did so. Existing users of the extension on Go 1.5 can continue to use the extension without any issues. It is only on machines where golint has not yet been installed and uses Go 1.5, that users will have problems. And of course travis. I'll send out a change soon to redirect such users to use gometalinter instead and remove golint from the install steps in travis and move it to the unit test that tests listing\n. Is there any sample repo where we can try to repro this?\n. Closing as duplicate of #438. Is this still a problem?\n. @mattetti \nIs this still a problem? From what I have gathered, the original problem no longer exists i.e the errors in the console logs and the navigation (step in/out/over) buttons being disabled.\nWhat we have now is that breakpoints while in \"test\" mode are not working. Is that right?\nIn the last update we have enabled verbose logging for debugging. Can you add \"trace\":\"verbose\" or \"trace\": true to your launch config and try again?\nThis will put all the logging to a file (and also to the debug console if you have chosen \"verbose\") whose path will be printed out to the debug console.\nIf you share that with us, we can see which step exactly is failing. Closing this issue as it hasnt seen any recent activity. @tapir I am able to hit breakpoints in Windows with go 1.7 and VS Code 1.5.3\nDo you see the issue for all your Go projects? Can you try on a simple project like the Hello project in https://github.com/golang/example ?\nDo you see any errors in the debug console?\n. Closing this, as we haven't heard back. @tapir, feel free to re-open with more details if you still see the issue\n. I can repro this. We use godef for Goto definition and the hover features. While debugging, I found that on hover over mux.Router, godef  returns an error godef: no declaration found for mux.Router \nThis is an issue with godef. Can you open an issue in the repo for godef ? \n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, reload/restart VS Code and that should fix this issue.. @leaxoy Are you saying that you are getting autcomplete for builtin packages like fmt, os, math without importing them?\n. That's interesting, I never got autocomplete to work on fmt, os etc without importing them.\nThat was one of the feature requests to get autocomplete working for unimported packages.\nThis has been implemented in the newest version of the Go extension Go 0.6.44\nAre you working on Go 0.6.43 or the latest Go 0.6.44 ?\n. Sorry, I am not able to understand the issue.\nWhich of the below are you talking about?\n- Autocomplete while typing code. Example: You type fmt.Pr and autocomplete gives you options for fmt.Print, fmt.Printf, fmt.Println etc.\n- Autocomplete while importing packages. Example: You type import \"fm\", and autocomplete gives you option forfmt- Auto import when you save/format the document. Example: You typefmt.Println(\"hello\"), then save/format the document, andfmt` gets imported\n. @leaxoy Glad you are unblocked, but I am still not sure how you got Step 2 working in 0.6.43\n\ntype fmt then press ., will show all method in package fmt.\n\nThat is a real mystery, because auto complete for unimorted packages was only added in 0.6.44 :)\n. No problem, happy coding!\n. Atom's go-plus uses gogetdoc for docs. Last I heard, there was some work to integrate gogetdoc to the VS Code Go extension.\n@zmb3, @abarisain Any updates?\n. @abarisain Thats great! \n. @leaxoy I tried the below 2 cases\ngo\n// Line 1 comment\n// Line 2 comment\nfunc main() {\n}\ngo\n/*Line 1 comment\n Line 2 comment*/\nfunc main() {\n}\nIn both cases, I don't see any issues with the hover info.\nThe hover info appears in a single line and wraps if too long.\nI am using VS Code 1.6.1 in Mac OS X\nCan you elaborate as to what exactly are you trying to fix?\n. @leaxoy As mentioned in https://github.com/Microsoft/vscode-go/pull/518#issuecomment-254024679, I don't get what is being fixed here. \nI am closing this PR, if you still see a problem, create an issue and we can take it from there\n. Did you recently upgrade to sierra?\nSee if #503 helps\n. @DirkWillem Did that help?\n. @DirkWillem Closing this as #503 is tracking the issue with Go 1.7 and Sierra\nIf #503 does not help, then feel free to re-open this\n. @stevematdavies Most of the features you are referring to are related to \"on save\" event.\nCan you check if other Go extension features are working for you?\nExample:\n- Go: Add Import command\n- autocomplete\n- extra info on hover\n- etc\n. @chrisolsen Which features do not work for you?\n- lint, format and build on save\n- autocomplete, \n- extra info on hover, signature help, Goto/Peek definition\n- Run tests, coverage\nDo you see any info/error message pop up in the VS Code window?\nDid this suddenly stop for you after any recent upgrade?\n. @chrisolsen Can you share your user/workspace settings?\nLooks like the \"on save\" operations are broken.\nDoes goreturns work for you when you manually format your code? Like Right-click -> Format Code or Alt+Shift+F ?\nWhat does your output window log when you save?\n- Open your \"Output\" window (View -> Output),\n- Select \"Go\" from the dropdown on the right of the output window\n- Make a change in your Go file and save\n. According to the output, linting is working. You don't see any green/red squiggly lines in your code?\nAs for formatting, are you seeing any error like \"Cannot format due to syntax errors.\" ?\nAny errors in the console after running \"Developer: Toggle Developer Tools\" in the command pallete and then formatting?\n. So, then linting works for you, that leaves formatting... \nWhat version of Go extension are you using?\nThere were changes done to the code around formatting in the latest version, but I don't see how it could silently fail without any user facing error messages.\n. While running gofmt, goimports or goreturns, can you try passing the flag -d\nOne change we did in v0.6.44 in the Go extension is to work with diffs while formatting.\n. And you see nothing after the line with diff command?\nI see the same in Windows when the file in question has no applicable changes as per the formatting tool.\nCan you add some extra lines/tab spaces to your code, save it (do this outside of VS Code) and then run the same commands in the command line?\n. Did you try adding some extra lines/tab spaces and then trying to format using VS Code?\nI have a feeling you are not seeing any changes to your file, because there is no formatting to be done in the first place. That is why nothing follows the diff command as there is no difference between your file and the formatted version of your file\n. Wow, I am stumped, goreturns really thinks there is nothing to format. In the same case, can you replace -d with -w and try?  This would be format the file on disk. If -w works for you, but -d doesn't then thats something wrong with the formatting tool.\n. Ok, then this is a problem with the formatting tool itself. I will release an update that will add a setting to revert back the change to use -d in the Go extension. That should unblock you. \nCould you please open an issue with goreturns repo for -d not working?\n. @chrisolsen Could you try getting the latest for goreturns and giving -d another try? Just in case you have an old version of the tool which had issues with the -d flag?\n. goreturns is based on goimports which is based on gofmt. Do you see the issue while using gofmt too?\nAnd when you tried goimports -d did you try using the latest as well?\nLogging it in goimports would be a good starting point\n. @chrisolsen I have published an update to the Go extension : 0.6.45\nThere is a setting go.useDiffForFormatting. Set this to false and you should be unblocked\n. @marpaia Could you update/upvote https://github.com/sqs/goreturns/issues/28 so that we get some traction on fixing the real issue behind?\n. Since this thread took a life of its own, I am renaming the title to \"Formatting not working anymore\"\n@stevematdavies Can you open a separate issue for what you were seeing? We havent heard back from you in a while\n. @ITSecMedia I am replying on the other thread you opened #583 for -w\n. Closing this thread as there is no action to be taken from the extension's side at the moment.\nAnyone else landing here, please try \"go.useDiffForFormatting\": false\nIf that works, then please update/upvote the upstream issue https://github.com/sqs/goreturns/issues/28 and help the author of goreturns debug the issue. @sethgrid Does autocomplete work for you for other external packages?\nAutocomplete is provided by gocode which has had issues with go 1.7 \nThe below is from the ReadMe for the Go extension\n\nImportant Note: If you have recently upgraded to Go 1.7, you may need to run gocode close in your terminal to ensure Go completion lists continue to work correctly. See https://github.com/Microsoft/vscode-go/issues/441.\n\nGo: Add Import internally uses gopkgs to get the list of pkgs that can be imported.\nCan you run gopkgs in your command line and see if you are seeing your sub packages?\ngopkgs looks for packages in your $GOPATH/pkg. \n. Well, then it might be because the packages are not being generated. That is why gopkgs is not able to see them, but go list all is able to.\nI cloned your repo and I am able to get autocomplete and Add Import on the sub packages\nCan you check your $GOPATH/pkg/<platform-specific-folder>/github.com/sethgrid/vscode_autocomplete_issue folder? Is it empty?\nCan you share your customized settings (User and Workspace)?\n. @tpng is right. Below is a note from the README for the Go extension:\n\nThis extension uses gocode to provide completion lists as you type. To provide fresh results, including against not-yet-built dependencies, the extension uses gocode's autobuild=true setting. If you experience any performance issues with autocomplete, you should try setting \"go.gocodeAutoBuild\": false in your VS Code settings.\n. You need to pass the -u flag as well to the go get command \nUpdated my earlier comment to relfect the same\n. I just tried go get -v -u github.com/sqs/goreturns and it works just fine.\nMaybe log an issue at https://github.com/sqs/goreturns?\n\n@sqs any idea why go get -v -u github.com/sqs/goreturns would fail with \"no Go files in ....\" ? See https://github.com/Microsoft/vscode-go/issues/522#issuecomment-335125790\n. You mean something like this: https://github.com/sourcegraph/sourcegraph-go/tree/master/langserver ?\n. There are plans to explore https://github.com/sourcegraph/sourcegraph-go/tree/master/langserver, but no set date yet.\n. @mbana We now have a branch that uses the language server by sourcegraph.\nSee #706\nAs and when the language server by sourcegraph gets more features, we can update the branch accordingly.\nAt this moment there is nothing specific to track from the VS Code Go extension's perspective.\nTherefore, closing this issue\nDo post your updates and findings here, it would be good to share\n. The debug part is done with https://github.com/Microsoft/vscode-go/commit/0ea5206563ee196e187f2243ceae1bdb3d9b688a. Thanks for reporting this @atombender! This is a VS Code specific issue, I can see the same while coding in typescript too. Will move this issue to the VS Code repo\n. This issue was moved to Microsoft/vscode#13775\n. No problem, happy coding !\n. Referring to https://github.com/golang/go/issues/9540 \nYou might have to delete github.com/zieckey/golang.org/x/tools and try go get again\n. @wudidong did that help?\n. The fix for this is out in the latest update (0.6.60). @nakiya the program attribute should point to the package you are trying to debug.\nYou have set it to \"/Users/duminda/go\" which I am guessing is where you installed Go instead of path to your project\nFor example, if you are trying to debug the hello project at https://github.com/golang/example/\nyou should point the program property to <your-gopath>/src/github.com/golang/example/hello\nAnother easy way to do it is to use the ${workspaceRoot}\n. @nakiya Do you still have problems after updating the program attribute to point to the right folder?\n@voigt I tried your code, launch.json and the same folder structure, and debugging works for me.\nWhen you say you see nothing in debug console, do you mean you see no errors or you see nothing at all\nBecause, the minute delve is fired up by the Go extension, the debug console shows the output from delve. Below is an example:\n\n. @voigt As per your launch.json, you dont have showLog set to true.\nThere is another issue #651 where users have seen that when showLog is not set to true, nothing happens.\nI could repro that and updating to latest delve solved it.\nSo here are a few things you can try\n\nAdd \"showLog\":true to your launch.json file and try again.\nCheck your delve version and use the latest (0.12.1)\n\nClosing this issue as @nakiya's problem was the wrong \"program\" attribute and @voigt's problem was the missing showLog attribute\n. Thanks for reporting this @sdwarwick! \nThis is a bug. \nSingle dimensional array declarations are fine as long as the array size is not defined. \n\nSince the colorization for .go files is defined in VS Code itself at https://github.com/Microsoft/vscode/tree/master/extensions/go, will move this to VS Code repo\n. This issue was moved to Microsoft/vscode#13777\n. That's a good idea, there is no need to bloat up the user's workspace.\nNeed to ensure that if the source code already exists before tool installation, we don't delete it.\n. With #351 merged in, there will now be an option to install the Go tools that the Go extension needs in a separate location. \nDeleting the source code for these tools in this situation is doable\n. The latest update (0.6.53) gives the user an option to install the go tools to an alternate location.\nThis is done via the new setting go.toolsGopath where you can provide the alternate location.\nRemember to run Go: Install Tools after setting the above setting, so that the tools get installed to this location. After which, you can safely delete the ones from your GOPATH.\nNote: dlv and gometalinter tools are exceptions to this rule. Reason being that gometalinter internally installs linters and expects them to be in the user's GOPATH. And that the debugger is not aware of any VS Code settings and so will not be able to find dlv from any location other than PATH or user's GOPATH\nPlease give it a try and comment here (or open a new issue) if you see any issues.. @dsbert Can you share what you get when you\n-  echo the $GOPATH from the integrated terminal inside VS Code\n-  when you run the command Go: Current GOPATH from the command pallete\n-  when you run go env in your terminal\n. @dsbert glad you are unblocked, happy coding!\n. @nochso Thanks for the PR! Sorry it took so long to review this.\nI tried out your changes and though it works for the hover scenario, other features like Goto Definition, Peek Definition and Signature Help are broken.\nWhat your thoughts on #607 ? \n. @nochso #622 was used to fix #440 and 5 other issues.\nTherefore closing this PR.\nThanks for your PR though and hope to see more from you.\nHappy coding!. This is an issue with VS Code itself. It is fixed in the latest insiders build. You can try the insiders build at http://code.visualstudio.com/insiders or wait for the next stable release which should release early November\n. We would need more details...\nCan you point to any sample code/repo where we can try to see what the issue is?\n. Thanks @northtyphoon for checking that out.\nClosing this issue as we havent heard back from the OP regarding request to more details.\nPlease drop in a comment, if the issue still persists with more details.. @jrieken In VS Code 1.6 only formatters implementing DocumentRangeFormattingEditProvider get to use the editor.formatOnSave. The Go extension formatter implements DocumentFormattingEditProvider which I see that we are working on for VS Code 1.7\nCan you confirm?\n. great, will wait for the next release then\n. Current State: The adoption of editor.formatOnSave was reverted in 0.6.49. @jrieken editor.formatOnSave saves all files on save. There has been feedback from the community that they prefer formatting just go files on save rather than all files.\nSince editor.formatOnSave doesn't add any benefits over go.formatOnSave for the users at the moment, this has been reverted.\nIf and when we have a way to apply editor settings at file type level, this will be revisited.. Now that editor.formatOnSave can be configured per language, we should re-visit this.\nThings to do\n- Update goFormat.ts to use stdin to pass file contents to formatting tools instead of working on the file on disk. There are 2 issues with using stdin that need to be fixed first though:\n      - #613 Format removes imports of vendored packages in use\n      - #630 goreturns fails to consider global variables in package\n\nDeprecate go.formatOnSave in favor of editor.formatOnSave and suggest Go users to use \n    [\"go\"]: {\n         \"editor.formatOnSave\": true\n      }\n\n. @wader has started looking into this in #1069. @ishanray how much time does it take otherwise?. That's ok. We cannot rely on the editor.formatOnSave until we figure out the blocking issues with goreturns as described in https://github.com/Microsoft/vscode-go/issues/540#issuecomment-314006031. The latest update to the Go extension (0.6.70) has adopted the editor.formatOnSave setting. @mattcui does #503 help you?\n. Great, glad you are unblocked!\n. The imports get added by the formatting tool (goreturns or goimports) which in your case is run on save. Can you confirm this by changing your format tool to gofmt and repeating your steps?\nIn the recent updates, the only change around formatting that was done was to use the -d flag while running the formatting tool. Can you set go.useDiffForFormatting to false, format tool to goreturns/goimports and try again?\n. Note that you need to update the Go extension to 0.6.45 first\n. Well, I am on vacation at the moment and only have my phone, so can't try to repro. Have to wait for the weekend for that.\nThe reason I asked you to try to turn off that particular setting (which was added in the latest update with the -d flag for the formatting tool) was to try to narrow down the root cause and was not offering that as a fix.\nI will definitely try to repro once l get my hands on a computer\n. @ahmetalpbalkan I tried your steps, but I can't repro it.\nCan you ensure you are using the 0.6.45 version of the extension, set go.useDiffForFormatting to false and try again?\nUsing diffs from the formatting tool instead of formatted file was the only we change we did recently around formatting. If setting the above to false fixes your problem, then we can narrow down the problem.\n. @ahmetalpbalkan ping?\n. This issue was moved to Microsoft/vscode#14727\n. actually you can do that today.\nYou can find the commands here: https://github.com/Microsoft/vscode-go/blob/master/package.json#L79\nYou can assign keyboard shortcuts to any of the commands above\n. Duplicate of #543\n. @cookieo9 @OneOfOne This is now fixed in the latest update 0.6.46 Can you confirm?\n. @cookieo9 @OneOfOne Glad you are unblocked, happy coding!\n. @krum110487 GOPATH supports multiple workspaces. Will that not help?\nCorrect me if I am wrong, I am guessing you have the below situation\nGOPATH: /usr/me/mygopath\nFirst project: /usr/me/mygopath/src/github.com/me-again/my-go-project1\nSecond project: /usr/you/some-folder/src/github.com/me-again/my-go-project2\nYou have the first project open in VS Code and everything is fine. You open the folder for the second project and get errors that it cannot find packages.\n. @krum110487 Thanks for clarifying!\nThe go.gopath setting does override the $GOPATH set in the terminal from when VSCode was originally launched. I just tried it. \n- Open the first project, everything is fine\n- Open the second project, observe errors (red squiggly lines on the imports) as dependent packages are not found\n- Update go.gopath in the settings to point to the second project\n- Errors in the go file do not go away\n- Make some change in the go file and save so that build/vet/linting gets triggered\n- All is good\nCan you confirm?\n. The .vscode folder stores your workspace settings. Deleting that folder deletes all your workspace settings.\nFor your situation setting go.gopath in the workspace settings for each of your projects should work if you do not want to have colon separated multiple workspaces in your GOPATH\ngopath from env is overriden by gopath in user setting which is overridden by go path in workspace setting\n. Remember that between each change you make to the go.gopath in the settings, you need to re-trigger the build (make a change -> save) to see the errors appear/disappear.\n. At Step 7, I see the error\nAt step 9, I see the error\nAt step 11,12,14 I see the error\nI am not able to repro :(\nWhich version of the Go extension are you using?\nCan you try opening the output window and keep an eye on the \"Go\" channel there? That is where the build output is shown and any errors as well. \nCan you check if you are seeing build output there with/without errors when you expect errors?\nOr you dont see any build output at all\n. @kulshekhar, @zmb3, @methane, @offero, @mm-z, @aleander and others who have upvoted this feature request,\nI have added the option to set the package-lookup-mode and this feature will be out in the next update. Since I don't use gb myself, I need some help testing this. Can any of you help? Below are the steps\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix and reload VS Code\nAdd the setting \"go.gocodePackageLookupMode\": \"gb\"\nType away and test the auto-completions in a project where you use gb. Hey All, did any of you get to try this out?. @murugan100 @kulshekhar What OS are you on? I tried on Windows and Mac and the installation works as expected.. I just tried on an Ubuntu (14.04) and it works.\nI have updated the vsix today for another bug fix.\nCan you try downloading and installing again?\n. @murugan100, @kulshekhar \n\nI tried downloading the vsix using wget and then installing. I get the same error as you.\nI always have the repo cloned. And when installing from the cloned repo, I dont see the error.\nFor now, can you clone the vscode-go repo and try installing from the repo?\nI'll look into why the other way doesnt work. This feature is now out in the latest update to the Go extension (0.6.69)\nAdd the setting \"go.gocodePackageLookupMode\": \"gb\" to use it. This feature is now out in the latest update to the Go extension (0.6.69)\nAdd the setting \"go.gocodePackageLookupMode\": \"gb\" to use it. \"Find all References\" works well for me. I tried it in Mac OS X with latest VS Code, the latest Go extension and Go 1.6.3\n-  Do you see \"No results\" or just \"Loading..\" or any errors?\n-  Do you see any errors in the console when you Developer: Toggle Developer Tools and then try \"Find all References\"?\n-  Is this a regression? As in was this working for you before and the latest update broke it?\nCan you share your OS details and how you set your GOPATH?\n. @wy3148 Do you still have issues with Find all references?\n. Do you get any build errors in the output channel for Go?\nDo you see any errors in the console? (Developer: Toggle Developer Tools)\n. @mukeshdutt5 I am able to install go-symbols without any problem.\nDo you still see this issue?\n. Closing this, as we havent heard back from the OP. @mukeshdutt5 feel free to re-open if you still see the same issue\n. About the failures...\nThe ones for Go 1.5 is because gometalinter just updated to use the latest golint which dropped support for Go1.5 I am looking into it and in conversation with gometalinter owner\nThe others are just linting errors, should be easy to fix\n. @GordonSmith How about reverting to 0.6.45? Does that work for you?\n@roblourens Your latest commit to goDebug.ts adds a dependency to utils.ts which in turn needs the vscode module. May be thats the root cause?\n. I just tried it in Windows and it works.\nCan you try this on any language other than Go ?\nReplace and Replace All is VS Code feature and not specific to the Go extension\n. We use gocode for autocomplete + a little extra that we do on our on like\n- support for unimported packages\n- \"package\" completion with either \"main\" or the folder name\nhttps://github.com/nsf/gocode/issues/312 explains why there is no completion for keywords like \n- import\n- func\n- struct \n  etc.\nWhat are you referring to when you say\n\nbut everything else is also missing from the completions list.\n. Now that we have the whitelist of keywords in https://github.com/Microsoft/vscode-go/blob/master/src/util.ts#L16, this is very easy to implement, if anyone wants to take a crack at it.\n\nHint: Start at goSuggest.ts. The latest update (0.6.56) to the Go extension has this feature.. Note from Gitter conversation that also talks about sorting/positioning the items in completion list:\n\nAfter last plugin update in autocompletion list I got list of all available packages, it's pretty cool but little annoying because variables with corresponding names appears in the end of a list. It would be nice to sort this list and show variables on top\n. This is not repro-able any more. Therefore closing. Build is run on save. For save on type, you can set files.autoSave appropriately.\n. But what I feel you are alluding to is that there is an error, the tool suggests a way to correct it, user chooses the given option, tool should stop complaining.\nI can see that happening in typescript\n. What is being suggested is from the auto-complete list. If this was a code-action, then the error squiggles should be expected to go away. In this case, one has to save to trigger build, to remove the errors. Closing as by design. This is by design.\n\nThe default formatting tool is goreturns which adds missing imports and removes unused imports.\nAnd formatting is run on save (you can disable it)\nWhich is why you see that your import keeps disappearing on save.\nEither turn formatOnSave off or change the formatting tool to gofmt\n. That was by design by @lukehoban. To have parity with other languages we might want to include the function definition\n. @lukehoban Can you share the reason behind the original design to exclude definitions from references?\n. @lukehoban Actually guru does return the definition as well.\nFor example: In https://github.com/golang/example, open the hello.go file and Find all references for the Reverse function. \nguru returns 3 results\n\nBut the regex we use discards the one with the definition \n. @alandonovan Any reason the output of guru referrers has different format for the definition vs other references? The definition just has the starting position where as rest of the references have starting AND ending position\nDefinition   : filename:lineNumber:columnNumber: ...\nOthers : filename:lineNumberStart.columnNumberStart-:lineNumberStart.columnNumberStart: ...\nAn example is shown here: https://github.com/Microsoft/vscode-go/issues/562#issuecomment-257056409\nBecause of this, the editor needs to add extra logic to be able to highlight the word for which references was queried\n. Its fixed ! Thanks @alandonovan \nAnyone reaching this thread, you can update your guru tool to get this fix\ngo get -u -v golang.org/x/tools/cmd/guru\n. The latest update (0.6.48) has the fix. \n. does delve work from the command line?\nThat error looks like https://github.com/derekparker/delve/issues/645\n@roblourens are you trying on Mac or Windows?\n. @sinhpham @soechin @jeremywho A new update is out (0.6.47) with the fix. Can you confirm that the issue is fixed for you?\nThe Mac Sierra 10.12.1 still has problems with delve itself which is tracked in https://github.com/derekparker/delve/issues/645\n. Great, happy coding!\n. cc @roblourens thoughts?\nRight now, we have a default which points to cwd if the program attribute is not specified\n. @mousetraps When I delete the program property from launch.json and try debugging I get the below error \"Failed to continue: \"TypeError: Path must be a string. Received undefined\"\" which I believe is coming from VS Code itself. \nIs that what you were referring to?. Also, the message that is shown at the end of generating tests can be better.\nExample:\n- Say 2 out of 3 functions in the file hello.go already have the tests in hello_test.go, then the message should only mention the test for the 3rd function\n- Say all functions in the file hello.go have the tests in hello_test.go, then the message should say that no new tests were created.\netc.\n. Exported functions from shared libraries seem to show the comments, but none from main.go which is a special go file meant for executables vs shared code.\nDefinitely a bug\n. We use godoc to get the function documentation to display in Signature Help and Quick Info on hover.\ngodoc is meant to show documentation for exported members of packages.\nWhich is why no member in main.go or unexported members of packages do not get the documentation info.\nReplacing bug label with enhancement\n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, reload/restart VS Code and that should fix this issue.. Not just multiline, you see this with single line strings as well.\nIf the string is surrounded with double quotes, you don't see this. \nLabeling as bug\n. In the March 2017 release of VS Code, suggestions will not be triggered inside strings. See https://code.visualstudio.com/updates/v1_11#_intellisense-in-comments. Oh wait, it still shows up pressing .. Hey @Strum355,\nI have some concerns on parsing the entire file for every auto-completion attempt.\nAlso, I am a little held up at work, but I'll get to the PR soon either this week or the next.\nThanks very much for your patience.. @stamblerre Will gocode or the language server know enough about the file contents to not provide completions from insider multi line strings? If yes, then I am inclined to not fix this issue from the extension's side and rely on gocode or the future language server to solve it for us.. Thats good to hear, thanks @stamblerre!\n@Strum355 Since we should soon be able to handle this from the language server, I am closing this issue. Parsing the entire file for each completion request can get expensive on large files and affect performance. Thanks for your effort on this and apologies that we cannot take the PR in.\n. In Windows, you need to have the diff tool installed for the rename to work with diffs. Else it renames the file on disk.\nCan you install the diff tool say from Diff Utils for Windows and try again?\n. I agree that it should be documented. What do you mean by \n\nadding a settings.json option so that it's clearer that it's a dependency.\n. https://github.com/Microsoft/vscode-go/commit/64b3bde341367ac666e5e3878dc83a8d9100842a adds the note about needing the diff tool in Windows for undo after rename to work\n. The package line can either be \"package main\" or \"package \" which is what auto-complete tries to help with here.\nIn your case why would \"hello-go\" be an invalid package identifier?\n. The autocomplete for unimported packages shouldnt appear when part of import statements like this. This is a bug\n. Same thing happens in the package statement as well. Once https://github.com/Microsoft/vscode/issues/18485 is implemented, we can stop suggesting the unimported packages when the cursor is inside a string or comment or import block etc.. Re-opening as the current fix will not work for multi line imports. The latest update (0.6.56) to the Go extension has the fix for package statement and single line imports.\n\nMulti line imports still has the issue. Also, completion list kicks in after an escaped double quote inside a string\n\n. Any errors in the console (Run Developer: Toggle Developer Tools and check the console) or in the Go channel in the output window?\nIn your launch.json, do you have a port configured?\nThe one change we did in the debug side of the extension is to choose a random port instead of the hard coded 2345 if no ports are configured in launch.json\ncc @roblourens \n. @andiyudistira @i5on9i  A new update is out (0.6.47) with the fix. Can you confirm that the issue is fixed for you?\n. Glad you are unblocked, happy coding!\n. This change has been reverted due to popular demand in the latest update. Will wait for VS Code to come up with language specific formatOnSave setting\n. @aphistic No problem.\nThanks for reporting issues and pain points. I get to learn something new each day :)\n. Correct me if I am getting this wrong.\nYou have a package called \"state\" where you have defined the types State, Transition, Action, and Abc\nYou have another file where you have imported the package \"state\" and are typing \"state.a\" expecting autocomplete to suggest \"Abc\"\nNow back in the file that defines the types, you are changing the \"Abc\" type and you expect the package state.a to get updated before you save the file.\nIs this correct?\n. Do you have the gocodeautobuild setting set to true?\n. No, you don't need to turn it off, I'll get back to this thread once I try to repro this again\n. @didrocks Sorry for not getting back on this sooner. \n\nOn every save, you execute /go build -o /tmp/go-code-check -tags \"\" . and when completion is requested, the static libraries .a files for each package are generated. Gocode seems to use them as a reference.\n\nFrom the past couple of releases, on every save when we run go build, the -i flag is passed as well. This ensures all the dependent packages of the current package are built and their corresponding .a files are up to date.\nAlso gocode is no longer called with autoBuild enabled by default due to a few reasons\n- The -i passed to go build ensures dependent packages are up to date\n- The autoBuild feature of gocode has shown to affect performance in larger projects\n- The gocode author's lack of confidence in the autoBuild feature\nWith these changes in, do you still see the issue you originally reported?\n. @wildfire810 @jcdickinson Sorry that you are not able to get debugging working properly with VS Code.\nWhich version of VS Code and the Go extension are you using? Can you update both to the latest?\nAlso dlv has released 0.12.0. Can you update dlv as well go get -u -v github.com/derekparker/delve/cmd/dlv and give another try?\nAre you able to run dlv in the command line and add breakpoints, step in/out etc?\n. Thanks @wildfire810!\nGlad to know you are unblocked. Happy Coding!\nClosing this issue for now.\n@jcdickinson, if you still see the same problem, please drop a comment, I'll reopen the issue and we can investigate.. @tunggiga \n\nAt the debugging time (when the program is running and not paused), add/remove breakpoint\n\nThis is not supported at the moment. Delve only allows adding/removing breakpoints when the program is paused. This feature is now available in the latest update (0.6.54) to the Go extension.. Fixed by #591 \n. Fixed by #591 \n. @dring1 @ITSecMedia Any reason you are using the -w flag?\nThis flag is intended to write the formatted content on disk, where as internally we use the -d option so that the formatting tool gives diff output which the extension uses to apply the edits on the document\n. @dring1 Can you set go.useDiffForFormatting to false and try again ?\n. @ITSecMedia As long as you use -w in the formatflags, things will not work as expected as explained here https://github.com/Microsoft/vscode-go/issues/583#issuecomment-260718842\nI will be updating the code to ignore this flag altogether later this week. Can you please remove the w flag and try?\n@dring1 The reason setting go.useDiffForFormatting to false worked for you is due to an upstream issue: https://github.com/sqs/goreturns/issues/28 Can you update/upvote that so that we get some traction there?\n@dring1 Auto-import should work for as long as the formatting tool is not gofmt. Can you confirm that? If that still does not work, can you open a separate issue?\n. Glad I could help, Happy Coding!\n. Have updated the code to ignore the -w flag with this: https://github.com/Microsoft/vscode-go/commit/727346e9a25044730e458f7de2bb86ea8882f394. @roblourens #566 is tracking your https://github.com/Microsoft/vscode-go/pull/584#pullrequestreview-6531416\n. fs.accessSync would still not help in differentiating file vs directory. Will use fs.statSync instead\nHere is a nice comparision: https://www.gregjs.com/javascript/2016/checking-whether-a-file-directory-exists-without-using-fs-exists/\n. The latest update (0.6.48) has the fix. \nHappy Coding!\n. @jeffmcaffer Can you share the complete error message you are seeing?\nAlso open the console (Developer: Toggle Developer Tools) and share any errors and call stack from there.. Thanks @jeffprestes, and can you confirm that the rest of the Go extension features work for you?\nLike Hover Info, Goto Definition, Find all references, Rename, Building, Linting, Formatting?\nAnd is dlv working from the command line for you? This is to ensure that the dlv set up was correctly done.\ncc @roblourens for thoughts on the callstack related to debugging. The \"Unable to display threads\" is coming from https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L440 when try to get list of goroutines from delve.\n@roblourens Is threadsRequest() one of the first things expected to run in the debug adapter?\n@jeffprestes \nDelve is failing to return the list of goroutines and giving the error EACCES error.\nAre you able to execute the step and goroutines commands when running dlv debug in the command line?\nHave you set go.goroot in your settings to anything that is different than the default by any chance? . @jeffprestes \n\nI'd suggest you to get a Mac, setup the Go Dev development environment\n\nI am using Mac and have installed delve using brew. I am able to hit breakpoints, step in, step out etc in VS Code using the Go extension\n\nI could be wrong but EACCES error is related to Javascript.\n\nYes, that is a possibility, in which case my bet is on https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L214 where we spawn a new process to start delve.\nError: spawn EACCES while spawning a new process means that there are permission issues in accessing the file (in this case the dlv binary)\nThe extension is able to find the the dlv binary, otherwise you would have seen the error \"Cannot find Delve debugger at...  Ensure it is in your \"GOPATH/bin\" or \"PATH\".\"\nCan you think of any reason, why the folder where the dlv binary resides is not accessible to VS Code?\nPlease try the following, it will help us narrow down the root cause.\n- Run go env in the command line. Is the GOPATH you see here and the one you see while runnning Go: Current GOPATH command in VS Code the same? \n- Run which dlv in the command line. Is the dlv binary in your GOPATH/bin or PATH ?\n- In your workspace/user settings, have you set go.goroot or go.gopath.\nThe reason I am asking these questions is because GOPATH, PATH and GOROOT (in that order) are used by the Go extension to find dlv.\n. The Go extension first looks at GOPATH and then the PATH to find the dlv binary.\nIs there a file dlv in your $GOPATH/bin? If yes, then that would be used instead of the one that we can clearly see in your /usr/local/bin which is in your PATH\nIf not, then I am truly stumped :(\nThe only next step I can think of is helping you debug the Go extension to find the issue.\nIts pretty easy. If you are up for it, I can help you with that.\nTo set up a dev instance of the Go extension read this. \nAnd then to debug the debugger, read this\nThen in the file goDebug.ts add breakpoints in the callbacks to this.debugProcess.stderr, this.debugProcess.stdout and this.debugProcess.on('close'...\n. phew! Glad that worked out.\nI'll add this as a note in the wiki on debugging we have.\nHappy Coding!. We did try godoctor back in July, but it had a few limitations. See #370 for the discussions that followed.\n. Another way to go about this would be to use the \"free variables\" feature from guru if anyone wants to give this a try. Thanks @Hades32! That's good to know \nAnyone willing to give this a try can use #370 as a reference. @conradwt No one is working on this at the moment as far as I know. . > I would be happy to make a PR if its good enough.\n@aswinmprabhu Make the PR regardless :) I am sure we can work together to get the feature in.\n. The latest beta version (0.9.3-beta.2) of this extension has this feature. Please see Refactoring in VS Code on how you can use the refactor feature.\nThanks @aswinmprabhu!. Funnily enough, there is an issue asking for linting ONLY in current package\n505\ngolint does have the option of linting a whole directory. Would adding a setting to lint the whole workspace work for you?\n. That's interesting, I didnt know that.\nIf gometalinter does the job, and you don't mind using it (it runs a bunch of linters including golint) then yes, go ahead and close this.\n. @atombender Are you sure you are getting workspace-wide errors even when your workspace has multiple packages?\nI tried gometalinter on a workspace with multiple packages, and I see linting errors (on save) scoped to just the package to which the current file that is open belongs to\n. Both gometalinter and golint take directory to lint as a parameter. It defaults to cwd if none is provided. The Go extension sets cwd to the directory to which the current open file belongs to.\nWe can add a setting to lint the whole workspace while keeping linting current package as the default option.\n. In the latest update (0.6.62):\nSet go.lintOnSave to workspace to lint whole workspace than just the current package.\nSame can be done to go.buildOnSave and go.vetOnSave as well. The latest update (0.6.48) has the fix. \nHappy Coding!\n. @xinyanmsft What do you expect launchBrowser to do? Launch the browser with localhost and configured port?\nCan you share which C# extension are you referring to?. @xinyanmsft I am not aware of the implementation details of the C# plugin. Can you provide more details in the context of Go?\nOne can have a web app such that when it is running, opening the browser on localhost and given port, the web page is rendered. I am guessing you want to have the opening of the browser done as part of running the web app?\n. Hey @MagnumOpus21,\nThanks for your interest!\nThe main reason I logged this issue was to have a place that had details on the features of this extension. Recently, I refactored the README for this extension which now has sufficient details, so I will be closing this issue.\nFeel free to checkout any of the other issues with the help-wanted label :). Hi @itsjamie, \nYes, using a setting to to maintain the flags for gotests is the right approach.\nPRs are welcome, I'd be happy to point you to the place where to start.\n. https://code.visualstudio.com/Docs/extensionAPI/overview would be good point to start with for documentation about extension development for VS Code.\nAre you saying that the subtests feature is available only in Go 1.7 and higher?\n. Hi @itsjamie,\nAny updates on this?. good to hear, I'll close this issue then. Hi @bennyscetbun \nI was trying to repro the case when a variable and unimported package have the same name\n\nFor me, the variable comes first and then the package. Can you try the code from above and see what you get? And maybe share a case where the package comes before the variable?\nAlso can you elaborate on the below with an example?\n\nAlso if you ve already imported a package with that name some wierd stuff happen and could lead to a file with multiple import of same package but with different path.\n. #603 will group all the packages and show them in the end after the variables/functions/others. You will get that in the next update\n\nAbout multiple packages having the same name, I can see how in your case it could get annoying. But, wouldn't there be a valid case where you would have 2 packages with same name but offer different things. Why shouldn't auto-complete suggest them then?\nAbout packages with \"vendor\" in it. If it is a vendor package in the current Go project, then the path will not have \"vendor\" in it. In the above case, the package is a vendor from another project. Technically, you can still import it and use it.... \n. That's interesting, I tried something similar and didn't get any build errors (in the output window with buildOnSave set to true), which is why I did not remove the vendored packages from the list of importable packages.\nWhen I build my code independently outside of VS Code, I get a different error\nimports github.com/godoctor/godoctor/vendor/github.com/willf/bitset: must be imported as github.com/willf/bitset\nBut you are right. The functions disallowVendor and disallowVendorVisibility in https://golang.org/src/cmd/go/pkg.go make it clear, the importing a vendor package from another project is not allowed.\nWill make that change.\n. On second thoughts, I'll go with your suggestion of not showing the importable package if there is an identifier with the same name already in the Go file\n. The latest update (0.6.48) has all the fixes discussed here. \nHappy Coding!\n. Do you see any errors in the console in the Developer tools? Developer: Toggle Developer Tools \nAny failure message show in the VS Code window?\n. I can repro this. While debugging, godef gives error godef: no declaration found for net.Dialer when I tried F12 on Dialer.\nThis is a problem with godef and might be related to #515\n@tonyjt @zerbitx Can you both chime in on https://github.com/rogpeppe/godef/issues/48 ?\n. Closing as duplicate of #442 \n. In the latest update of the Go extension (0.6.50), we now support the use of gogetdoc for Goto/Peek Definition, Hover info and Signature Help features. Add \"go.docsTool\": \"gogetdoc\" to your setting to enable the use of gogetdoc, reload/restart VS Code and that should fix this issue.. What are your thoughts on running go vet? At the moment, build, vet, and linting are all run in parallel\n. We won't be serializing the build and lint process. They run in parallel at the moment.\nWhat we can do is add an option to show linting errors only if there are no build errors.\nI'd like to see if there are more people interested in this feature. Our settings list is growing big real fast.. > ignore linter errors for lines that already have error markers on them\nNow that's something I can do :) Will get it out for the next update. @atombender I have pushed the changes to master, can you help with testing? All you have to do is\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix (If you are on ubuntu, then clone the repo and get the file from the master branch)\nRun code --install-extension Go-latest.vsix and reload VS Code. That's weird. There was no changes made to how the linter is run. The changes were only made to how we treat the results from the linter.\n\n. About the formatting, we are deprecating go.formatOnSave in favor of editor.formatOnSave, so if you are using the vsix, set\n\"[go]\": {\n\"editor.formatOnSave\": true\n}. Ok, you gave me quite a scare there :)\n. The Go extension doesn't touch the $PATH\nIt only updates the $GOPATH as described in https://github.com/Microsoft/vscode-go/wiki/GOPATH-in-the-VS-Code-Go-extension\nIf you have set the go.toolsGopath setting and gometalinter is being run from there, then this go.toolsGopath is appended to whatever GOPATH previously deciphered because gometalinter expects all its linter to be available under GOPATH. Yes, please create a new issue.\nAlso, since I cannot repro, I'd appreciate if you can help me debug this by running the Go extension from source. In the latest update to the Go extension (0.6.70), linting/vetting errors will not show up on a line that has build errors. That would be a nice feature. PRs are welcome!\n. @gabrielgatu I agree that this needs to be documented, but I wonder if README is the right place for it. It is already so huge and has a lot of content about set up\n596 was created to track adding details about the features of this extension, how to use it, tips and tricks etc.\nI'd say wiki would be the right place.. The command Go: Test Coverage In Current Package is renamed to Go: Toggle Test Coverage In Current Package and it does exactly what the name suggests. \nThis change is out in the latest update (0.6.60). Closing as duplicate of #438\nWe are trying to get a fix for this in the next update.. @astaxie The extension is using gotests to generate tests already. Try out the below commands and let us know what is missing.\n- Go: Generate unit tests for current file\n- Go: Generate unit tests for current function\n- Go: Generate unit tests for current package\n. We do want to continue supporting Go 1.5 Does anybody know the usage matrix between Go 1.5, 1.6 and 1.7 ?\n. Right now users do a \"go get\" which would download and build and install. How would they be downloading the pre-built tool?\n. @zmb3 Oh, I got the need to check for Go version part :) I was curious about downloading the pre-built tool. For example, would we be downloading an exe in case of Windows from which ever location you publish them in?\n. @leaxoy I have a PR out to your repo that does the below\n- A setting where user can choose godoc (old way of doing things godef + godoc)  vs gogetdoc\n- If User is using Go 1.5, then we use the old way regardless of what is set\n- The setting will default to the old way. There are some 3 or 4 issues logged by users which using gogetdoc will solve. We will reach out to those users and ask them to change the setting to use gogetdoc and give feedback\n- Some refactoring of the interfaces\nWe can change the setting to default to gogetdoc next month or so.\nOnce you merge my PR to your repo, the tests in travis should start passing and then I can merge your PR :)\n. @leaxoy I wanted to release an update to the Go extension this week and was hoping to include your changes to use gogetdoc. Since I didn't hear back on the PR for the changes I made to your code, I created a separate PR #622 which has all your changes + mine.\nDo take a look at #622 \n. Closing this in favor of #622 \n@leaxoy @abarisain @zmb3 Do take a look at #622 if you have some time.\nI'll merge and release an update on Monday\n. For the opening of test file after generating tests, we can add a check so that it doesn't happen if the test file is already open. \nFor the notification, instead of a setting we can have a \"Don't show again\" option. We have too many settings already in the extension and I'd like to avoid adding a new one :)\nPR for both these improvements are welcome\n. @caibirdme A note on deprecating go.formatOnSave in favour of editor.formatOnSave was added to the Changelog during the release, but I had forgotten to add it to the README which is now updated as well.\nDid you open this issue for the missing documentation or something else?\n@tilinna I'd like to see if more from the community feel the same way. If yes, then I'll circle back to this nexst week.\n. This change has been reverted due to popular demand in the latest update. Will wait for VS Code to come up with language specific formatOnSave setting.\n. @neelance No problem\nThanks for reporting issues and pain points. I learn something new each day :)\n. Can you run goreturns and/or goimports from the command line independent of VS Code and see if you still have the issue? This is to determine if the problem is with the formatting tool or with how VS Code uses the formatting tool.\n. Can you share your settings?\n. I tried the below code and I get build errors(syntax error: unexpected -, expecting expression), but no imports get removed on save\n```\npackage main\nimport (\n    \"fmt\"\n    \"github.com/emicklei/go-restful\"\n)\nfunc main() {\nfmt.Println(\"Hello\")\ngo-restful.BodyParameter(\"hello\", \"bye\")\n\n}\n```\n. @AlekSi \nPreviously, the formatting tool (gofmt, goreturns, goimports) ran on the file on disk, which meant we had to save the file before running the format even if the user didn't want to.\nAs a means to fix that I had made the change to use stdin as input to the formatting tool instead of passing filename\nThis broke your scenario of vendor imports, because the formatting tool was unable to find the vendor packages.\nUntil the next update, as a workaround can you use gofmt as your choice of formatting tool?\n@sindrepm \nThis need not be the same case as yours. Can you share a sample code where you are seeing the imports getting removed?\n. @sindrepm Great, the pkg is a vendor pkg for you too. The next update (mostly end of this week), should have the fix\n. The latest update of the Go extension (0.6.50) has the fix for this.. @sirianni can you try setting \"go.formatTool\" to \"goimports\"?. Yes, we moved to passing the file contents to the formatting tool instead of having the tool work on the file on disk.\nWhen doing so gofmt and goimports work well, but goreturns has issues with vendor pkgs and global variables that conflict with methods from other pkgs\nThe same issue existed in goimports before, but is now fixed. I have logged an issue for goreturns to use the same fix. https://github.com/sqs/goreturns/issues/40\nUntil that issue is fixed, use goimports. @xyi The fix needs to be done upstream in the goreturns tool. Am sure the author of the tool will welcome a PR if anybody here wants to give it a try. It should be a pretty simple fix.\n- Add new flag -srcdir just like the one taken by goimports\n- Pass the value to goimports. Re-opening this issue, so that as soon as we have the upstream issue fixed, the Go extension should be updated to pass the -srcdir flag to goreturns. This fix is now out in the latest update to the Go extension (0.6.71)\nThanks to @briantkennedy for the upstream fix to goimports and to @halfcrazy for porting the same fix to goreturns\n  . @quetool Uninstalled what? Can you run Go: Install/Update Tools to ensure all the packages are up to date and try again?. @quetool Is the package that is getting deleted used elsewhere in the code? Formatting removes unused imports. . Can you update all the dependent Go tools and try again? You can run the command Go: Install/Update Tools  from the command pallet. Its not available in the menu. @Newt0n Did you try updating the tools as suggested in https://github.com/Microsoft/vscode-go/issues/613#issuecomment-357302856?. @Newt0n, @viettd\n- Add the setting \"go.formatTools\": \"goreturns\"\n- Delete goreturns binary from your GOPATH. @Newt0n for you it would be /Users/Newton/go/bin\n- Try manually formatting your Go file, you will be prompted that goreturns is missing and an option to install it. Choose \"Install\"\n. @abduld Can you explain the problem you are trying to solve?\n. @theescapers Can you share an example code/ gif where you see this issue?\n. Closing this issue as we havent heard back details from the OP. @safijari Is your issue that \"gopkg.in/telegram-bot-api.v4\" is disappearing from the import list or that the list is re-ordered?\nBy default, on save, formatting is triggered. (You can disable this by setting \"go.formatOnSave\": false)\nBy default, the tool used for formatting is goreturns. (You can change this by changing the setting \"go.formatTool\" to either goimports or gofmt)\nWhen the formatting tool used is either goreturns or goimports, the import list gets re-ordered and any unused imports are removed from the file.\nIn your case I believe \"gopkg.in/telegram-bot-api.v4\" was not yet used in your code. Can you confirm?\n. Microsoft/vscode-go is the repo where the Go extension lives.\nlukehoban/vscode-go is Luke's personal fork of the extension just like I have mine ramya-rao-a/vscode-go \nPersonal forked repos are where we choose to develop features before merging to the main Microsoft repo.\n\nI initially assumed I didn't need a Go extension, because surely Microsoft/vscode-go was the default Go package\nIdeally, Microsoft/vscode-go would be installed by default, making an extension unnecessary.\n\nThis is incorrect. The Go extension is not shipped as part of VS Code and so is not any kind of \"default\". It is definitely a recommended extension for the Go language by the VS Code team/product.\n. Well.... that is the publisher id. @seanmcbreen @lukehoban Some history insights here?\n. The repo/project related links in the Marketplace for this extension points to the correct repo i.e Microsoft/vscode-go. So what is the confusion here?\nThe word lukehoban in the screenshot is the publisher id for this extension. \nIdeally, yes, it would be better for Microsoft to be the publisher id for this extension. \nAnd that is do-able as well, but is non-trivial. It would break extension packs that have reference, workspace recommendations and links that have reference to \"lukehoban.go\". > well, the place where I work and several other places where my employer provides services to have strict guidelines what is allowed from FOSS (Free and open-source software) universe. One of the such guideline is publisher. So if I go to VS COde, and search for Publisher:Microsoft and don't see this plug in then its not allowed.\nThanks for the clarification @mvadu, that helps and is enough for me to re-open this issue to track the moving of publisher for this extension\n\nIf just updating the publisher name breaks so many things...\n\nThe very ability to move an extension from one publisher to another became possible only about 3 months ago. The breaking things I mentioned are an inconvenience, but are not hard reasons not to make the move. I believe we take this case by case.\n\nWhat is Microsoft's view on handling such branding changes?\n\nI can't speak for Microsoft as a whole, but @seanmcbreen or @chrisdias can speak for the VS Code team.\n. This has now been done.\nThe Go extension is now published under the official Microsoft VS Code publisher id. > Question: Can i run code without delve debugger inside VS Code ?\nWithout using delve debugger, you can only run the go commands in the integrated terminal. Like go build go run etc.\n@roblourens Can you help with the debugging aspect of the issue?\n. https://github.com/Microsoft/vscode/issues/2780. Closing as duplicate of #299 \nWill track the work there to support the \"Run action\" as described https://github.com/Microsoft/vscode/issues/2780. In the latest update (0.6.56), you can \n        - Press Ctrl+F5 or run the command Debug: Start Without Debugging to run using the currently selected launch configuration.\n        - If you don't have a launch.json file, then the current file will be run.\n        - Supported only for launch configs with type as debug and program that points to a Go file and not package. A little on the auto build feature of gocode\ngocode works with packages. Packages are built when you go get or go install\nThe auto build  feature of gocode gives you intellisense on code that is not yet built and installed into package.\n\nA boolean option. If true, gocode will try to automatically build out-of-date packages when their source files are modified, in order to obtain the freshest autocomplete results for them. This feature is experimental. Default: false.\n\nThe author claims that the feature is experimental and may or may not work in certain cases.\n@dc0d Have you seen issues while using other packages or only when writing code for current package?\n. @gngeorgiev \nSay, in your project, you are working on package mypkg. You import package otherPkg which has a function Hello(). You make no changes to otherPkg after installing it via go get.\nDo you see intellisense issues while accessing members of otherPkg as well or only while accessing members of your own package?\n. Any errors in the console? Run Developer: Toggle Developer Tools to see the console.\nIn the coming update, I'll add more error logging to console. Should help us in cases like these.\n. Well, could I ask you to share sample code so that I can try to repro on my end ?\nMaybe a gist or a repo?\n. @dc0d Unfortunately, this is one of the cases, where if I can't repro the issue, I cant help :(\nTherefore, if you can say create a small example and share it in a git repo, then I can try tan repro\n. @dc0d @gngeorgiev Is this still a problem? If yes, then the next time you see it, can you try running gocode from the terminal/command line and see what you get? This is to eliminate the case that gocode itself has issues.. @gngeorgiev Yes, I sure have tried to reproduce the issue. I have tried it on small as well as big projects. But I sure haven't tried coding for hours. My Go coding is mostly small side projects or I tinker around in some interesting projects out there. Go coding is not part of my (or my team's) main day job.  Which is why I keep hoping (https://github.com/Microsoft/vscode-go/issues/619#issuecomment-261481000,  https://github.com/Microsoft/vscode-go/issues/619#issuecomment-261596567) you(or anyone else) could point me to a repo and a scenario where this consistently happens, then I can clone that repo and try myself.\n@mattetti, I know you and your team does a lot of Go coding day in, day out. Could you help out here? Have you or your team seen anything like this?\nI would surely like to get to the bottom of this. But without steps that I can use to repro, I am quite helpless at the moment.\n. Thanks @dc0d. @scorphus Can you add a sample code here where you see this issue?\n. In travis, the unit tests are failing for 1.7 but pass in 1.6 mac... which is baffling\n@leaxoy if you have some time to look at the test failures, I'd appreciate it\n. All tests are a pass!\n. Added additional tests to cover various scenarios where using gogetdoc wins vs godef\n. The fix for this issue is now available in the latest update (0.6.54) to the Go extension.\nPlease update and let us know if you still see any issues. @zmkhp \nDoes the import line disappear on save?\nDo you have any code that is using the fmt package?\nIf you havent used the fmt package, but only imported it, then formatting tool removes it by design.\nThe default formatting tool is goreturns which adds missing imports and removes unused imports.\nAnd formatting is run on save (you can disable it)\nWhich is why you see that your import keeps disappearing on save.\nEither turn formatOnSave off or change the formatting tool to gofmt\n. @zmkhp \nDoes the import line disappear on save?\nDo you have any code that is using the fmt package?\nIf you havent used the fmt package, but only imported it, then formatting tool removes it by design.\nThe default formatting tool is goreturns which adds missing imports and removes unused imports.\nAnd formatting is run on save (you can disable it)\nWhich is why you see that your import keeps disappearing on save.\nEither turn formatOnSave off or change the formatting tool to gofmt\n. We use gocode for autocomplete and it does not support keywords. So impor will not suggest import\n. We use gocode for autocomplete and it does not support keywords. So impor will not suggest import\n. Can you share your settings?\nDo you have autosave on?\nDoes it happen when you change your formatting tool to goftmt ?\n. You have files.autoSave enabled which means your file keeps getting saved automatically after a particular delay. \nSince you have go.formatOnSave enabled as well, every time your file gets saved, formatting is run on it.\nFormatting tools like goreturns and goimports remove import statements if the imported package is not used in the code.\nThis is what is happening in your case.\nHope this helps\nWorkaround is to either change the formatting tool to gofmt or disable files.autoSave or disable go.formatOnSave\n. The below is a note from the ReadMe for this extension\n\nNote: Users may want to consider turning Auto Save on in Visual Studio Code (\"files.autoSave\": \"afterDelay\") when using this extension. Many of the Go tools work only on saved files, and error reporting will be more interactive with Auto Save turned on. If you do turn Auto Save on, you may also want to turn format-on-save off (\"go.formatOnSave\": false), so that it is not triggered while typing.\n. Great! Happy Coding!\n. @cristim Can you give an example?\n\nDoes this happen on save or just typing?\nCan you share your settings?\n. What you have shared is the default settings. I was looking for the settings you have overridden.\n. Particularly, if you have files.autoSave or editor.formatOnSave and any other Go setting \n. > This is happening while typing: it would just repeatedly save, lint, reformat and save again and again forever, until the machine becomes unusable.\nit would just repeatedly save : I would expect this to happen only if files.autosave is enabled\nreformat : Formatting, build, linting are run on save. Of all the actions run on save, formatting is the only action that makes changes to the file. Linting does not change the file contents\nand save again : This would be explained by files.autosave being enabled. \nWhich is why I am asking for your local settings that would have overridden the default settings.\nIt is ok, if you don't want to share those.\nBut, can you please try disabling files.autoSave and editor.formatOnSave and see if it makes a difference?\nAlso, see the below note taken from the ReadMe of this extension\n\n\n. There was only one net change in the formatting area in the last few updates.\n\nIt was to pass the file contents to the formatting tool via stdin instead of forcing a save and then getting the formatting tool working on the file on disk. This was made to enable formatting to work on unsaved changes.\nI have reverted the change in the master branch (it has caused a few other issues).\nSince I can't repro your case,  can you try to install the extension from source and see if it fixes the issue for you?\nSteps to do that would be:\n- Uninstall the Go extension from VS Code. \n- Clone the extension code: git clone https://github.com/Microsoft/vscode-go\n- cd vscode-go\n- npm install\n-  npm install -g vsce \n-  vsce package\n-  code --install-extension Go-0.6.50.vsix\nYou should see a message Extension 'Go-0.6.50.vsix' was successfully installed!\nClose all instances of VS Code, open a new one and see if you still have the issue.\n. There was only one net change in the formatting area in the last few updates.\nIt was to pass the file contents to the formatting tool via stdin instead of forcing a save and then getting the formatting tool working on the file on disk. This was made to enable formatting to work on unsaved changes.\nI have reverted the change in the master branch (it has caused a few other issues).\nSince I can't repro your case,  can you try to install the extension from source and see if it fixes the issue for you?\nSteps to do that would be:\n- Uninstall the Go extension from VS Code. \n- Clone the extension code: git clone https://github.com/Microsoft/vscode-go\n- cd vscode-go\n- npm install\n-  npm install -g vsce \n-  vsce package\n-  code --install-extension Go-0.6.50.vsix\nYou should see a message Extension 'Go-0.6.50.vsix' was successfully installed!\nClose all instances of VS Code, open a new one and see if you still have the issue.\n. I totally agree that formatOnSave is a very important feature.\nAs I said in https://github.com/Microsoft/vscode-go/issues/625#issuecomment-261750425 there was only one change that was done in the area of formatting. And I am betting that must have been the reason for what you are seeing. \nI am reverting the said change and will be releasing an update tomorrow.\nIf you have some time before that, I would very much appreciate it if you side load the extension from source as explained in https://github.com/Microsoft/vscode-go/issues/625#issuecomment-261750425 and confirm that that fixes the issue for you.\n. @cristim  I have reverted the change around the formatting logic in the latest update(0.6.50). Can you update and tell me if that fixes the issue for you?. Yes, #631 is the same.\n\nit no longer formats code at all.\n\nYou mean manual format does not work as well?\nDo you see anything in the console? Run Developer: Toggle Developer Tools to open the dev tools.\nCan you try the below:\n\nChange go.formatTool to gofmt. Reload vs code \nChange go.useDiffForFormatting to false\n\nIt is also possible that some other extension is interfering in the format process.\nWhat other extensions do you have?\nCan you disable them, just have the Go extension enabled and try?\nUsually to reproduce an issue, all we would need is sample code and your user settings.\nMy last resort would be to help you debug the extension with the source code which is pretty simple.\n. Can you also try the insiders build of VS Code? http://code.visualstudio.com/insiders. @cristim Any updates?\nDo you still see this issue with other extensions disabled?\n. @cristim , The other issue #631 which is similar to yours is confirmed to be caused by an external extension called \"whitespace\".\nDo you have any updates from your side?. Thanks @cristim . @tugbabodrumlu Do you have other extensions installed? Can you repro the behavior after disabling other extensions?. @tugbabodrumlu Can you share your user settings? Also, can you describe your issue? Is it exactly what @cristim sees?\n. There are other issues for the high CPU usage.\nAre you in a Mac? Did you recently upgrade to Sierra?\nCan you close all but one VS Code window, run Go: Install Tools and once that is complete, reload VS Code and try again?. @Jamesxql There has been recent updates to the go-outline tool. This message is asking you to update your version of go-outline tool, so that the Go extension can use the newer features of the go-outline tool.\nDo you foresee any issues with updating?\n. Have you tried reloading/restarting VS Code after updating go-outline?\nCan you run $GOPATH/bin/go-outline -h in your terminal and share the result?\nThat will tell me if the tool got updated successfully or not\n. So here is what is happening behind the scenes. The flag -imports-only is the new feature of go-outline that the latest update of the Go extension wants to use. The Go extension calls go-outline and if it returns error saying flag provided but not defined: -imports-only, we show the message you see so that user updates the go-outline tool.\nThe result of $GOPATH/bin/go-outline -h that you shared tells me that go-outline tool has been updated.\nHave you set GOPATH to a different path in your settings?\n. And you set go.gopath setting in your user settings ?\nMy theory is that you might have go-outline installed in multiple locations.\nAnd that running go get ... updated it in one location.\nAnd that the Go extension might be picking up the go-outline from the location where it was not updated.\nCan you run a search and see if you the go-outline file in multiple locations?\n(These multiple location correspond to the multiple paths set as GOPATH in your environment : /Users/xuqiaolun/Desktop/golang and /Users/xuqiaolun/Desktop/gowork and the location you have set go.gopath in your user settings.)\n. Great! Happy Coding!\n. Sorry, there must have been a merge conflict. Its in now. https://github.com/Microsoft/vscode-go/commit/32a39238059309fbb81ad6b4a233fbbb1c181ee4. @jimmykuu The latest version 0.6.51 has your change.. What platform are you on?\nCan you check if you have the go file in your /bin folder ?\n. The only change we made around that area in the latest update is to use fs.statSync instead of fs.existsSync\nhttps://github.com/Microsoft/vscode-go/commit/1687b3cf7009e2e02f7398218992d5e00816c5eb\nDo you see any errors in the console? Run Developer: Toggle Developer Tools to see the console\n. And while you are in the console can you run process.env['GOROOT'] ?\n. And /Users/uldericofilho/.gvm/gos/go1.7.3/bin has the go file?\n. The custom go.goroot and go.gopath in your settings file overrides the ones that are the environment variables in the shell from where you open using code .\nBelow is the code that is run to get the path to the go run time. When this returns null/undefined/empty string, the message you see is shown.\nLooking at this code, it is impossible that the returned value will ever be null/undefined/empty string.\nSo I am truly baffled.\n\nCan I ask you to clone the code for this extension and run it locally to get to the bottom of this issue?\nIts pretty simple and I can walk you through it.\nI'd really like to get to the root cause of this problem\n. @ccirello Problem solved?. oh well.. alright\nHappy Coding!. The reason why I changed from passing the filename to passing the filecontents via stdin was that previously formatting an unsaved file, forcefully saved the file.\n613 is an issue that goimports didnt find the imports for vendor packages and so removed them.\nThe root cause was the change mentioned above.\nI put a fix in where I pass the cwd to the process running the formatting tool, so that it could find the vendor packages.\nI'll see if that fixes your case. If not will look into your suggestions.\nRegardless, I'll push an update on Monday that will contain a fix to your issue\n. I have reverted the said change in the latest update (0.6.50).\nThis should fix the issue for you. @briantkennedy I am working on bringing back the \"pass file contents via stdin to formatter\" feature.\nAfter digging around, I found that the srcdir option was added by you to goimports. https://go-review.googlesource.com/c/tools/+/23444\nBut goreturns whose feature set is suppose to be the superset of that of goimports doesn't seem to have this option.\nDid you have any plans to add the same option to goreturns?\nI have logged https://github.com/sqs/goreturns/issues/40 for reference. Thanks @briantkennedy!. @mkatanski Sorry to hear about the inconvieniece.\nDo you have files.autoSave enabled? \nFor some reason, I can't see the gif/image you have in your repro steps. Can you re-add it?\n. There was only one net change in the formatting area in the last few updates.\nIt was to pass the file contents to the formatting tool via stdin instead of the formatting tool working on the file on disk. This was made to enable formatting to work on unsaved changes.\nI have reverted the change in the master branch (it has caused a few other issues).\nSince I can't repro your case,  can you try to install the extension from source and see if it fixes the issue for you?\nSteps to do that would be:\n- Uninstall the Go extension from VS Code. \n- Clone the extension code: git clone https://github.com/Microsoft/vscode-go\n- cd vscode-go\n- npm install\n-  npm install -g vsce \n-  vsce package\n-  code --install-extension Go-0.6.50.vsix\nYou should see a message Extension 'Go-0.6.50.vsix' was successfully installed!\nClose all instances of VS Code, open a new one and see if you still have the issue.\n. There was only one net change in the formatting area in the last few updates.\nIt was to pass the file contents to the formatting tool via stdin instead of the formatting tool working on the file on disk. This was made to enable formatting to work on unsaved changes.\nI have reverted the change in the master branch (it has caused a few other issues).\nSince I can't repro your case,  can you try to install the extension from source and see if it fixes the issue for you?\nSteps to do that would be:\n- Uninstall the Go extension from VS Code. \n- Clone the extension code: git clone https://github.com/Microsoft/vscode-go\n- cd vscode-go\n- npm install\n-  npm install -g vsce \n-  vsce package\n-  code --install-extension Go-0.6.50.vsix\nYou should see a message Extension 'Go-0.6.50.vsix' was successfully installed!\nClose all instances of VS Code, open a new one and see if you still have the issue.\n. @mkatanski I have reverted the change around the formatting logic in the latest update(0.6.50). Can you update and tell me if that fixes the issue for you?. Just to eliminate external factors, can you  disable other extensions you have and comment all your user settings and try again ?. Did you disable all other extensions or only a few?\nAnd remember to reload VS Code after disabling extensions.\nYour gif looks like indents are being added and removed consistently.\nYou are indenting using spaces.\nCan you change that to tabs?\nI believe something external to the Go extension is interfering/conflicting with the Go formatting.\n. Can you also try the insiders build of VS Code? http://code.visualstudio.com/insiders. . @mkatanski Any updates?\nDo you still see this issue with all the other extensions disabled?. Thanks for getting back with that info @mkatanski . Happy Coding!. @hickeng On the same line, wouldn't you also need GOARCH?\n@mattetti You have any thoughts here?. Thanks @hickeng. This should be easy to do. \nPRs are welcome if anyone wants to take a crack at this.\nHints:\n- Add a new configuration property in package.json\n- Update updateGoPathGoRootFromConfig which updates GOPATH and GOROOT from settings to include updating the GOOS as well. Probably rename the method as well :). This is fixed by https://github.com/Microsoft/vscode-go/pull/932.\nThe update containing the fix will be out soon. Fix is out in the latest update (0.6.60)\n@hickeng Can you add your env vars in the new setting go.toolsEnvVars and confirm if your issue is fixed?. The Go extension depends on individual Go CLI tools to provide various features.\nRight now, there is no way to turn off the suggestions altogether.\nBut in certain cases, there are workarounds.\nSay in your case you don't want to install golint, then add go.lintOnSave:false to your setting.\nThat will switch off the linting feature and so the need to install golint.\nYou can do the same for formatting by go.formatOnSave:false. But you will still get the message to install the formatting tool when you try to format the document yourself.\nI am curious to understand your scenario though. Do you want to turn them off, because you want to install the tools later or you do not want to install them at all?\n. @rightfold you have upvoted my answer, so I am assuming that you are happy with the answer.\nTherefore closing this issue.\n. @Lywei how to do what?. Setting go.docsTool to gogetdoc does give the right signature.\nThe default tool used is godef which gives the wrong signature for which I've logged an upstream issue https://github.com/rogpeppe/godef/issues/75\n. Can you share the output of go env ?. Looks like the linter is not able to find the standard libraries.\nIn non Windows platforms, Go gets installed to /usr/local/go and all the standard libraries are found in /usr/local/go/src folder. Can you look into your /usr/local/go/src folder and see if the standard libraries (net, math, database, log) etc are present ?\nAlso, can you try running gometalinter from the command line ? In the directory of the package you want to lint, run $GOPATH/bin/gometalinter .\nDoes building work? Run go build . in the directory of the package\n. > Running $GOPATH/bin/gometalinter . does indeed return the same errors.\nThen this must be an issue with gometalinter.\nLets run some additional tests.\n- Does go build build your code successfully?\n- Can you change your linting tool to golint and give that a try ?\n. Great! Can you please log an issue for gometalinter at https://github.com/alecthomas/gometalinter and link it here ?. Thanks @damienstanton . We do have commands to run tests using go test.\nHave you tried the below commands ?\nGo: Test at Cursor\nGo: Test File\nGo: Test Package\nGo: Test Previous. @Gaffney Sorry couldn't get back to you earlier.\nThe callstack suggests something went wrong inside gorename tool itself.\nDo you still see the issue?. Thanks @Gaffney, sorry I didn't have anything useful to suggest for trouble shooting. We use child_process.exec() to run gocode that returns autocomplete suggestions. In your case, since the returned data exceeds the max size of the buffer that is returned by child_process.exec(), you get the error stdout maxBuffer exceeded\nWe will have to either update the maxBuffer or change child_process.exec() to child_process.spawn.\nWe will fix this in the next update. Until then, I am sorry there is no workaround to disable autocomplete at the moment. The latest update 0.6.51 has this fix. Happy Coding!. @ahcheqiu \n\nIs there a config that I can set in launch config to make it possible to restart dlv server remotely\n\nThis is not possible. For remote debugging, the Go extension in VS Code only allows connection to a headless dlv server that's already running with the intended args. It cannot restart the dlv server on the remote machine\nI have updated the wiki appropriately.\nSorry for the very late response\n  . Nice catch. https://github.com/Microsoft/vscode-go/blob/master/src/goFormat.ts#L33 is where we add the -d  to formatFlags variable. That variable is scoped to the function, I wonder why it persists value from previous runs.. You need to reload/restart VS Code after changing the setting go.docsTool for the change to take effect.\nIf gogetdoc is not installed, I do get prompted. I just deleted it from my $GOPATH/bin, tried hovering and Goto definition and got the prompt.\n@OneOfOne Yes godoc should have worked. You see any errors in the console?. Thanks @fiam. PR is merged. Will release an update in a few days. The latest update 0.6.51 has this fix. Happy Coding!. @Jamesxql I installed aws-sdk-go and able to get code completion for packages like aws(github.com/aws/aws-sdk-go/aws) , awserr (github.com/aws/aws-sdk-go/aws/awserr), session (github.com/aws/aws-sdk-go/aws/session) etc.\nBut not for aws-sdk-go(github.com/aws/aws-sdk-go)\nIs that what you are seeing as well?\nThere are no Go files which declare package aws-sdk-go. So it makes sense that the package aws-sdk-go has nothing to offer. \n. Do you see any errors in the console? Open Developer: Toggle Developer Tools to see the console.\nI am able to get intellisense for this project.\nIs the problem only with auto-complete?\nAre you getting other features to work like Go to Definition, Find All References etc. ?\n. That one is mostly from the hover.\nSince you are not seeing any errors from gocode (the tool we use for autocomplete), am not sure what the problem is.\nCan you try running gocode from the command line?\n. That must mean that gocode cannot find the packages. Do you have the packages in $GOPATH/pkg/yourplatform/github.com/aws/aws-sdk-go ?. Sorry, do you have the file $GOPATH/pkg/yourplatform/github.com/aws/aws-sdk-go/aws.a ?. Under $GOPATH/pkg/darwin_amd64/github.com/aws you should have a folder called aws-sdk-go.\nIf you don't then that means you don't have the complied packages for the aws package which explains why auto complete is not working.\nBelow is the contents of the folder $GOPATH/pkg/darwin_amd64/github.com/aws/aws-sdk-go in my machine\n\nAnd then inside the  folder $GOPATH/pkg/darwin_amd64/github.com/aws/aws-sdk-go/aws\n\n. If you don't have the above files, then try running go build github.com/aws/aws-sdk-go and go install github.com/aws/aws-sdk-go . I am not saying that aws-sdk-go.a file should not be there. I am saying that $GOPATH/pkg/darwin_amd64/github.com/aws/aws-sdk-go/aws folder should have the aws.a file and other folders I have shown before.\nI got the SDK by go get -u github.com/aws/aws-sdk-go. Hmm..may be you had vendoring switched off thats why?. in go v1.7.3 it will be enabled by default. With https://github.com/Microsoft/vscode-go/commit/2328f3120d45ff67510c3d0027ef7c2a3e3837d6 we can now add telemetry events in the Go extension. @AlekSi There are 2 separate things at play here.\n\nAuto-complete completes sara to sarama.v1 instead of sarama. This will happen to all packages from gopkg.in due to the versioning supported there. \nvendor included in the import path. This will happen only when the vendor folder is the immediate child of $GOPATH/src.\n\nFor the first issue, I have a PR out: #659\nFor the second, I am curious. Is it very common to have the vendor folder right under #GOPATH/src ?\nMost of the projects I have seen, have the vendor folder under the Go project.\n. @AlekSi First off, thanks for your patience.\nI now understand that the last element in the import path need not always be the package name. It is just convention for predictability's sake that most of the time the package name is the same as the last element in the import path.\nThe list of packages that appear in the auto-complete comes from the output of the gopkgs tool which simply returns the import paths to all the packages in $GOPATH/pkg folder. The extension tries to fetch the package name from these import paths and has no knowledge of the source code of the packages themselves.\ngo list all on the other hand can return package names along with import paths as well.\ngopkgs was preferred over running go list all as the latter was slow in comparision \n\nThe difference of go list all and gopkgs is that go list all looks for go packages in your $GOPATH/src while gopkgs looks in your $GOPATH/pkg. As a result of this, only importable packages that have been installed (either by go get or go install) are listed by gopkgs.\n\nWe could try out a few options and compare performance\n- Use go list -f '{{ .Name }} {{ .ImportPath }}' all\n- Use gopkgs and feed the output to go list -f '{{ .Name }} {{ .ImportPath }}' space-separated-output-from-gopkgs\n- Update gopkgs to do second option above and return both name and import path\nUntil then, I would keep the fix in https://github.com/Microsoft/vscode-go/commit/cb0d2bc29a0c9ee1929c1a89781ef8c740447d92 because it atleast takes us one step closer to the ideal solution where versioned packages from gopkg.in will get the package name without the version number.\nThoughts?\n. Language server is a good idea here.\nFor now, I have a working solution where I am thinking of doing the below\n- go list -f {{.Name}};{{.ImportPath}} all runs once on extension activation (like when you open a new VS Code window) \n- Form mapping between package import path and package name from the above output. \n- Use this for the auto-completion\nAnd thanks for your kind words. I'll try and keep up the good work :)\n. The fix for this issue is now out in the latest update (0.6.63) to the Go extension\nThanks for your patience @AlekSi, I know this took a while :). @viru The latest update 0.6.51 has your snippet. Thanks for your contribution!. @zplzpl Since you are on Windows, the paths should be separated by ; and not :\nSo add this to your settings and it should work\n\"go.gopath\": \"E:\\goapp;E:\\goproject\\new-app\"\n. If you have set environment variables after opening VS Code, then it will not take effect.\nWhen both environment variable GOPATH and the user setting go.gopath is set, then go.gopath overrides the value in the environment variable in VS Code.\nCan you share how you are testing whether the multiple GOPATH work or not?. I was able to repro this by removing GOPATH from my environment, setting GOPATH in go.gopath and trying to debug.\nLooks like the problem is not about multiple GOPATH but that the debugging process doesn't read GOPATH from go.gopath.\nCan you confirm this by checking if rest of the Go extension features work for you?\nLike Go to definition, Rename ?\n. #356 was logged to track the issue of GOPATH not being read from the settings by the debug process.\nThere is a workaround mentioned in that issue that you can try.\nWill try and get a fix for this in the next update. @zplzpl As of now, there is no way to pass the settings to the debugger.\nTherefore, setting the env property in launch.json as suggested in #356 is the way to go.. The showLog parameter is used only to pass the set value while starting delve.\n@bawr you had initially introduced this paramater in the Go extension. Do you have any idea why setting this to false would result in the behavior mentioned in the previous comments?\n. Hello all, \nSorry for the late response.\nI was able to repro this in my Mac (where I had previously installed delve via brew) and not in Windows.\nUpdating to the latest delve (v0.12.1) solved this for me.\nHere are my steps:\n- brew uninstall delve\n- brew install go-delve/delve/delve\n- restart VS Code\nIf you had manually installed delve, then I am not sure what the right steps are to update delve.\n@kjleng @trdyer @huttarichard : Can you guys update your delve and try as well?. @huttarichard So I take it that the issue is solved for you?. Its working fine for me. Do you see any errors in the console? \nDoes it not work in certain Go projects/packages or all Go code?\nWe use guru for the Find all references feature. Can you run it in command line and see if it gives results where as VS Code doesn't?. Try guru referrers. We don't use guru callers. @PotterDai Do you see similar error while running guru referrers in the command line?\n@tagatac This is a problem with the guru tool itself. Can you log an issue at https://github.com/golang/go/issues?. @PotterDai Find all References works for me when I add go.gopath in the settings without the ending slash. Which platform are you on? I tested on Mac and Windows.\nWe use path.join to create the path from GOPATH and don't concat strings manually. path.join would add the necessary forward/backward slashes based on the platform.\nWhen you remove the ending slash, is Find all References the only feature not working for you?. @PotterDai I just arrived at the same conclusion, and came here to reply and you already found it :)\nJust checking for trailing slashes might not be enough. Consider the case of nested workspaces. As in /Users/me/Gocode and /Users/me/Gocode/my/coding/workspace\nThe right solution would be to loop through all workspaces and instead of returning on the first match, keep looking until you find the longest match.\nSomething similar was done here: https://github.com/Microsoft/vscode-go/blob/master/src/goImport.ts#L57\nAnd PRs are welcome. The latest update 0.6.51 has this fix. Happy Coding!. Are you getting this error only while getting go-symbols or even rest of the tools?\nCan you share the output for go env and go version ?. @a57571735 Are you able to run go get for these tools from the command line?\nExample: \n- go get -u -v github.com/cweill/gotests/...\n- go get -u -v github.com/newhook/go-symbols\n- go get -u -v golang.org/x/tools/cmd/gorename\nLike @leaxoy suggested can you set http.proxy in your settings and try too?. If you have go.lintOnSave enabled, then on opening a workspace, linting does run. You don't have to specifically save to trigger it.\nCan you open your output window, change the chanel to Go and reload VS Code?\nYou should see linting output there.. When the Go extension first gets activated (when you open a workspace and open a Go file), it lints the package to which the currently opened Go file belongs to. On subsequent file opening, linting does not get triggered until you save.\nDoes that match what you are seeing?. I can confirm you second point, but not the first.\nRegardless, lint on file open seems like a good feature.\nPRs are welcome. @jackie-qiu That is not currently possible, but it would be a good feature to add. We were just discussing something similar in #1015. Please add your thoughts there.. @captncraig Just did.\n@fiam Thanks for the fix!. Are you sure this worked before?\nGoDocumentSymbolProvider and the tool it uses (go-outline) hasn't seen any changes recently regarding its output.\nSo I don't see any reason why this would work before and only the recent Go extension would break it. My pleasure @cedriclam. Thanks for your contributions. Looking forward for more in areas other than generate tests as well :). Thanks @PotterDai ! Will merge as soon as all the tests pass.. The latest update 0.6.51 has this fix. . Looks like you end up in a state where save does not trigger the usual actions like format, lint and build.\nThis could mean a problem with the core product or that some other extension is interfering with the save event. Can you disable all the other extensions and see if you still see this? \nWhen you enter this state, does manual format work ?\n. @SimonBuckner Can you give a sample code? I'd like to understand this scenario and make sure we are not missing anything in the build cycle. Closing this as we havent heard back from OP with answers to the questions asked.\nIf anyone sees the same issue, please drop in a comment and we can help narrow down the issue and root cause.. This is due to the regex check on build errors happening at https://github.com/Microsoft/vscode-go/blob/master/src/goCheck.ts#L47. Such errors do not have a filename/linenumber for the editor to use to show the red squiggly lines.\nWith #735 you can now this see this error in the output pane.\nI'll keep looking at a way to get a visual indicator in the file as well. Maybe a red squiggly in the line that defines the \"package\" ?. The latest update (0.6.53) has this fix.\nHappy Coding!. Can you share your GOPATH if you have set any in the settings ? If not then share the GOPATH from your environment variables.\ngorename and guru are the 2 tools we use that expect the filepath passed to them to have the exact casing and slashes (forward/backward) as the GOPATH being used.\nAlso, can you share the complete error message?  Does it start with \"Cannot rename due to errors...\" ?\n. If you didnt see the error message Cannot rename due to errors: then that means that the gorename tool ran successfully and the Go extension has returned the file edits to make to VS Code. VS Code in turn was not able to find the file and so you see the error File not found ()\nDo you see any errors in the console? Open Developer: Toggle Developer Tools to see the console.\nDoes this happen on all of your Go projects?\n. The slash before the quotes is the problem. I know you mentioned that earlier, but the error message you pasted didnt have the slash, so I didnt make the connection.\nSince I can't repro this, can you download the code for the Go extension and debug locally?\nI can walk you through it, it is very simple.\nClose all instances of VS Code and run the below in your command prompt\ngit clone https://github.com/Microsoft/vscode-go\ncd vscode-go\nnpm install\ncode .\n\nVS Code will open with the source code for the Go extension. \nPut a breakpoint in line 51 in the file gorename.ts\nPress F5, the new VS Code window will open. Open your Go project in this VS Code window\nRename something, the breakpoint will be hit. See what is the value for filePatch.fileName\n\n. buildTags doesn't matter. You say you see the slash in the front, but what you pasted doesn't have it. Are you sure?\n\n\"\"C:\\Users\\xxx\\Google_Drive\\projects\\dir name\\application\\src\\dname\\fname.go\"\"\n\nAdd a breakpoint at line 26 and check what is the value of document.fileName and filename. \nAre you on gitter ? If not, you can join https://gitter.im/Microsoft/vscode-go and we can chat there to work through this.\n. I'll pick this up for the next update in March. Logged https://github.com/kpdecker/jsdiff/issues/171 for the root cause.\nFixing from our end via #866\nSorry this took a while :(. The latest update (0.6.56) to the Go extension has the fix to this issue. This issue was moved to atom/language-go#103. @leaxoy @abarisain @zmb3\nWas this expected or is there anything we can do to improve the performance while using gogetdoc?\nIn my Windows 10 and Mac, I don't see any perf issues.\n@bruceauyeung Thanks for reporting this. As a workaround, you can always switch back to using godoc by changing your settings.\nWe will eventually move to using a language server, but not any time soon.... The latest update of the Go extension (0.6.54) has the integration with the language server available via a setting go.useLanguageServer\nThe features powered by the language server are Hover, Definition, Find All References, Signature Help, Go to Symbol in File and Workspace. \nGive that a try and let us know if you see improvements in the performance. @bruceauyeung Have you seen any perf issues recently?\nI am looking at what else can we do here to make the gogetdoc experience better.. Closing this issue as we haven't heard back from the OP in a while.\nIf anyone sees any perf issue when using gogetdoc, feel free to comment here and we can take a look at it.. @treed You could go back to the default (just remove the setting that sets go.docsTool to gogetdoc\nOr you can try out the language server (not available on Windows yet) by setting go.useLanguageServer to true. Independently, I'll look into closing processes that were started but aren't needed anymore. #1265. @treed @bruceauyeung @abarisain @leaxoy The latest update to the Go extension (0.6.69) has some perf improvements in place. Can you check if you still see slowness when using gogetdoc?. Done. Removed all the branches which had changes merged to master. \n. @roblourens You have any idea on @leaxoy's question on json-rpc2 ?. @leaxoy Do you need any help with this? . @leaxoy For using the text mate snippet syntax, I needed the latest vscode apis which in turn needed the changes in this PR. Therefore, I am closing this PR in favor of #709 \nThanks for your work on this, I look forward to more.. Right now, we wait for build, lint and vet to complete before updating the Problems view. \nPRs are welcome do batch the errors/warnings and update the Problems view periodically instead of waiting till the end.\n. For some of the features you listed, we have VS Code counterparts that do similar if not the exact same thing\n\nList File declarations -> File Outline (Ctrl + Shift +O) gives file declarations in the order they appear in the file\nBrowse Declarations -> Workspace Symbol Search (Ctrl + T) and start typing. This will search symbols in the workspace. Browse Declarations lets you browse through ALL packages whereas the Workspace Symbol Search lets you search through packages in the current workspace\nBrowse Files -> Ctrl+P and you search for files in the current workspace\n\nThings that are missing\n\nBrowse Packages\nList Package Declarations\n\nPRs are welcome for the missing features, but there is no work currently active around this.\n. #330 covers browsing selected package\n  . The only thing left is the List Package Declarations feature.\nPRs are most welcome to implement this feature.\nIs anyone aware of any Go tool that can list all the package symbols given a package?. @kentquirk That's interesting. You are right though, if we have some other way of getting the information, I would choose that.\nOne option is to use go list to get the list of Go files in the package, then run the go-outline tool for each to get the symbols. But I'd rather use a tool that does this in one go, instead of having to be invoked for each file.\nQuestion: For this feature, would we care mainly for exported symbols or all symbols?\nI would think just the exported symbols.\n. @bruceauyeung Can you run gometalinter in the command line and see if you get the same results?\nIf yes, then this is an issue with gometalinter itself and should be logged in its repo\n. This issue was moved to alecthomas/gometalinter#231. @mattetti \n\nMy understanding is that installed packages aren't rebuilt.\n\nIs there any official documentation for this?. @derekperkins mentioned https://github.com/joshuarubin/zb in another issue. This claims to run faster builds. It comes down to build vs install there as well. Done. @mattetti \nI was doing some reading up on go build in general.\nOne of the build flags is -a which according to the docs will force rebuilding of packages that are already up-to-date.\nIf there is such a flag, then it doesnt make sense that go build -o is rebuilding all packages while building current package (Save triggers go build -o on current package)\nI'd prefer to see some documentation on why go build -i is faster than go build -o before making this a default experience. Can we add setting for this change so that people can opt-in to use go build -i?\n. @mattetti \nI was doing some reading up on go build in general.\nOne of the build flags is -a which according to the docs will force rebuilding of packages that are already up-to-date.\nIf there is such a flag, then it doesnt make sense that go build -o is rebuilding all packages while building current package (Save triggers go build -o on current package)\nI'd prefer to see some documentation on why go build -i is faster than go build -o before making this a default experience. Can we add setting for this change so that people can opt-in to use go build -i?\n. We should invite Dave to this discussion :) \n. Another note: The main intention of running go build at every save, is to show compiler errors if any.\nWhat is being debated here is that when dependent packages have not changed, which is faster go build -o or go build -i\n. @ankon \nYes, once this changes are in, all dependent packages of the file you are editing would be up to date. So when delve runs the build using the buildflags: -i you send via launch.json, that would not be as expensive as it might be today.\n. @mattetti I did some more digging and my findings match yours. PR approved and merged :). @mattetti More on exactly what you have been saying: Below is from https://twitter.com/MorganGeek/status/821981043527974914\n\nBuilds can be too slow, because the go command doesn\u2019t cache build results as aggressively as it should. Many people don\u2019t realize that go install saves its work while go build does not, and then they run repeated go build commands that are slow because the later builds do more work than they should need to. The same for repeated go test without go test -i when dependencies are modified. The latest update (0.6.53) has this change.\n\nThanks @mattetti . As discussed here: https://github.com/Microsoft/vscode-go/issues/1013#issuecomment-306004380 Yes, we can use go build -i for main packages as well.\nWe always use -o. So that will take care of the generated binary.\nFixed with https://github.com/Microsoft/vscode-go/commit/2f398aee4de15c7517d4e97e6c57dc5af463f125 . Must be. That was before my time.\nIf we do use /dev/null that's another if/else to support Windows.. Can you try adding this setting? \"go.docsTool\": \"gogetdoc\" \nAnd then reload the VS Code window.\n. @zmb3 Below is the output of gogetdoc on the built-in function append. Note that the pos is missing. Is this a known issue in gogetdoc ?\n{\n\"name\":\"append\",\n\"import\":\"builtin\",\n\"decl\":\"func append(slice []Type, elems ...Type) []Type\",\n\"doc\":\"The append built-in function appends elements to the end of a slice. If\\nit has sufficient capacity, the destination is resliced to accommodate the\\nnew elements. If it does not, a new underlying array will be allocated.\\nAppend returns the updated slice. It is therefore necessary to store the\\nresult of append, often in the variable holding the slice itself:\\n\\tslice = append(slice, elem1, elem2)\\n\\tslice = append(slice, anotherSlice...)\\nAs a special case, it is legal to append a string to a byte slice, like this:\\n\\tslice = append([]byte(\\\"hello \\\"), \\\"world\\\"...)\\n\",\n\"pos\":\"\"\n}. Thanks a lot for the clarification @zmb3\n@yaronsumel, closing this as by design. Do you see anything on hover for the builtin functions? I am able to get info on hover as well as completion. Does completion work otherwise for rest of your code?. Do you see anything on hover for the builtin functions? I am able to get info on hover as well as completion. Does completion work otherwise for rest of your code?. Do you see any errors in the console? Run Developer: Toggle Developer Tools to see the console.. Can you share a sample code project that we can use to repro this?. @yinanrong I am assuming that when you say \"vscode command line\" you mean the debug console.\nAnd so closing as duplicate of #473. From @chrmarti on December 1, 2016 16:25\nI guess that is with Go? Have you set the GOPATH environment variable?. @HopeForToday\nAre you having auto-complete issues only with fmt and standard library or even custom packages?\nDoes this happen on all of your Go projects?\nDo you see any error in the console? Open Developer: Toggle Developer Tools to see the console.\nCan you share your settings and sample code?. @logicaleak Are the imports getting removed before or after you use them?\nIf you just add an import and save the file before using the import, the formatting tool decides it is an unused import and will delete it. \nYou can see #624 for more details.\n. In that case, can you share sample code in a git repo?\nAre you seeing any build errors in the output window?\nWhen you run the command Go: Current GOPATH in VS Code what do you see?\n. You should get autocompletion for local packages as well. If you can share sample code, I can look into it.. Closing this as there has no recent updates.\n@logicaleak Please do get back if you have a sample code where I can repro this. go.formatOnSave is currently implemented in a hacky way. See https://github.com/Microsoft/vscode-go/blob/master/src/goMain.ts#L191\nWhich is basically\n- your edits are saved\n- formatting edits are saved\n- undo works on the last batch of edits which was formatting.\nThis was when there was no pre-save event supported by VS Code for extensions to use.\nIn VS Code 1.6, we now have API that supports this pre-save event. See onWillSaveTextDocument in http://code.visualstudio.com/updates/v1_6#_new-apis \nWith this, I believe we should be able to club user edits and formatting edits in a single save such that undo works on them together as you described.\nI was planning to do this, but don't have time until the holidays are over. \nYou are welcome to give it a try though :)\n. @atombender The fact that the formatter takes so long is alarming.\nCan you run the formatter from command line and compare the time taken?\nUsing the onWillSaveDocument will not help if formatter takes so long, because there is only so much time that it will wait for the extension to get back with edits from the formatter. Closing in favor of #540 which will fix this issue as well. With the work in #540 completed, the latest update to the Go extension (0.6.70) has the fix for this issue.. @zgiber Can you check if there are any errors in the console? You can run Developer: Toggle Developer Tools to open the console.\nAre you able to run gogetdoc in the command line?. It says, that the flag -u is not supported. Maybe you have an old version of gogetdoc. Can you update it?\ngo get -u github.com/zmb3/gogetdoc. You mean the command Go: Install Tools ? If you had go.docsTool set to gogetdoc and then run the command, then yes it should have updated it for you.\nAnyway, glad you are unblocked now.\nHappy coding. The autocomplete for unimported packages that was introduced a few updates ago have 2 features\n- Add all the importable packages in the completion items \n- A dot after an unimported packagename would give you auto-complete options for members of that package.\nIts the first feature above that adds a lot of noise to completion items in a lot of cases (yours included).\nOne improvement that was done was to sort the completion items such that the completion items from the first feature above appear in the end after the \"real\" items like variables/arguments/functions\nBut the noise continues as in your case.\nThe sorting of completion items is controlled by the extension, but the selected item is controlled by VS Code based on algorithms that work on just the text you type and the text in the completion item. As far as I know, the extension has no way of telling VS Code of ranking for the completion items.\nLong story short, do you believe the first feature above is actually useful? If not I'd suggest setting go.autocompleteUnimportedPackages to false. This will disable the first feature above, but will keep the second one intact.\n. Regarding the \"Go to Symbol\", I always thought it is not of much use to even have the import statements show up in the first place. Not just for Go, but for other languages like typescript as well.\nI wonder if the autocompleteUnimportedPackagea setting should be set to false by default. If there is more feedback, we might just do tgat. The update previous to the current update of the Go extension has go.autocompleteUnimportedPackages set to false by default.\nFor the \"Go to Symbol\" issue, I was thinking of adding a setting go.ignoreImports. If true then the imports will be ignored in the \"Go to Symbol\" output.\n. @atombender I think we are talking about different things.\ngo.autocompleteUnimportedPackages that controls the importable packages showing up in suggestion list is already set to false by default as of 2 updates ago.\ngo.ignoreImports would be a new setting (not yet coded) that would control imports showing up in Go to symbol/File Outline/@ feature. That's right, naming needs work. I initially thought of go.ignoreImportsInFileOutline (I know, I am bad at naming), but I like your approach of go.featurename.settingname. \nSo go.symbolSearch.ignoreImports is indeed better. . The setting is called \"go.gotoSymbol.includeImports\" and is false by default.\nTherefore, the default behavior will be excluding the import statements.\nPR is merged.\nThe change will be out in the next update. This feature (ignoring import statements in the Go to Symbol feature) is now available in the latest update (0.6.54) to the Go extension.. Can you try setting go.autocompleteUnimportedPackages to false and see if it is still slow?\nThis is to see if the extra steps we take to provide auto-completion for unimported pkgs is the reason for the slowness.\nIf not, then can you try running gocode in the command line and compare the performance?. Closing for now. If you see more issues, feel free to re-open and we can narrow it down to whether there is an issue with the extension or gocode itself. For autocomplete, I'd suggest you try the following\n\ngocode close\ngo get -u github.com/nsf/gocode\n\nAnd see if you still have issues.\nFor go vet, can you try running go vet from the command line and compare the speed?. I really should set up a FAQ/Troubleshooting page, I myself keep forgetting some of these nuances :)\nYes, setting autobuild to true for gocode does pose some perf issues\nRegarding vet being slow, can you set go.lintOnSave, go.buildOnSave, go.vetOnSave, go.testOnSave all to false. Then try turning on each of them on one by one? The results from all these 4 features are combined and only then surfaced in the editor currently. So it may be the case, that vet actuall is done real fast, but one of these other 3 culprits might be slow, thus slowing down the whole party.\nIf that is the case, then I can look into NOT coupling these.\n. great then, Happy Coding!. Currently, the errors from the formatting tool go to the console. Run Developer: Toggle Developer Tools to see the console.\nIf you have build, vet and lint on save enabled, then wouldnt errors from those actions cover what you would have otherwise gotten from gofmt ?. Use buildOnSave, vetOnSave and lintOnSave and see which works best for you. Would having go.testFlags that you can set in the settings help? There was a PR to do that. Please do chime in with your thoughts here #401. This can be independent of the test flags feature. Having a command Go: Test Package (Short) would be a good addition.\nThis is an easy change. PRs are welcome.. @ironcladlou Including you here as you have worked on all the test features of the Go extension. Thoughts?. That's a great idea @ironcladlou and seems like the right way to go. Am here to review and test it, so feel free to send a PR.\nNote: Since this would need the latest VS Code APIs which in turn needs a more recent typescript dependency, you will need #669 to go in before you get started. \n. @ironcladlou \nThe Go extension now can use the latest VS Code API (https://github.com/Microsoft/vscode-go/blob/master/package.json#L52), so you should be able to get the new feature.\n. \n@ironcladlou I have updated the PR #482 to reflect your suggestions. Can you take a look?. The latest update (0.6.53) has the option to add testflags applicable to all tests as well as key bindings to run any of the 3 test commands with any flags.\nFrom the ChangeLog:\n\nA new setting go.testFlags that can be used to run tests. If null, go.buildFlags will be used. PR 482\nCustomize flags for each of the test command by using different keybindings. PR 482. In the below example, ctrl+shift+t is bound to run the tests in current file with -short flag. The commands here can be go.test.package, go.test.file or go.test.cursor.\n    json\n    {\n        \"key\": \"ctrl+shift+t\",\n        \"command\": \"go.test.file\",\n        \"args\": {\n            \"flags\": [\"-short\"]\n        },\n        \"when\": \"editorTextFocus\"\n    }. @zakokun, @ameissnersofi Did you both recently upgrade to Mac OS X Sierra?\n\n\n\nThere is a known issue of performance on Mac OS X Sierra. See #503 \nRun the command Go: Install Tools. That should update all the go tools that the extension depends on which should fix the issue\n. Glad to help. @ameissnersofi Are you unblocked too?. Great, Happy Coding!. @qiuhaotc Can you provide an example with the compile error?\nI get the auto-complete when working on code that doesn't build successfully. Did you recently upgrade to Mac OS X Sierra?\nThere is a known issue of performance on Mac OS X Sierra. See #503 \nRun the command Go: Install Tools. That should update all the go tools that the extension depends on which should fix the issue\n. Is it project specific? Does it happen on smaller packages as well?. @dvdplm Did running the command Go: Install Tools help as described in #503 ?. @hhrutter @dvdplm Any updates?\nCan you also try switching to use gogetdoc and see how that behaves?\nSet \"go.docsTool\": \"gogetdoc\" in your setting. Thanks @dvdplm \n@hhrutter How about you?. @zmb3 I can get started with your second suggestion. I am checking with the vscode team if there is way for the extension to know if the cursor is over a valid identifier based on the language grammar.\nIf not, then for now, I can whitelist the below cases and return null instead of calling godef+godoc or gogetdoc\n- Not a word\n- Is a keyword\n- Is a number\n- Is part of a string literal\n- Is part of single line comment\n711. #711 is merged.\n@dvdplm Can you update to the latest VS Code and the latest Go extension (0.6.52), and let us know if things are better?\nWe will continue to work on this.. The latest update of the Go extension (0.6.54) has the integration with the language server available via a setting go.useLanguageServer\nThe features powered by the language server are Hover, Definition, Find All References, Signature Help, Go to Symbol in File and Workspace. \nGive that a try and let us know if you see improvements in the performance. The latest update of the Go extension (0.6.54) has the integration with the language server available via a setting go.useLanguageServer\nThe features powered by the language server are Hover, Definition, Find All References, Signature Help, Go to Symbol in File and Workspace. \nGive that a try and let us know if you see improvements in the performance. It's been over a year since the original issue was logged and there has been many changes in the extension since then that has improved perf.\nLocking and closing this issue for now.\nIf anyone sees any perf issues, please log a new issue. Is it only the navigation that is not working?\nCan you try other features of the extension like\n- autocomplete\n- hover info\n- signature help\n- linting\n- formatting\nDo you see any errors in the console? Run Developer: Toggle Developer Tools to see the console. @entonio Do you still see this issue? Can you answer the questions in the earlier comment?. @entonio I have go1.7.4 on my Mac OS X El Capitan (10.11.6)\nAnd all the Go extension features work as expected.\nClosing this issue as we havent heard back from you with answers/details to the questions posed in the previous comments.\nPlease drop a comment here if you still see issues. . Can you do a go version on your terminal to see which version of Go is actually being used?\nAlso try running Go: Install Tools command. This will get the latest for all the dependent tools and recompile them using the current version of Go. Usually what we have seen when one changes the version of Go being used is that a recompilation of all the dependent Go tools is needed (hence the suggestion to Go: Install Tools)\nI am looking into ways the extension can determine that the Go version being used is changed, so that it can prompt the user to do a recompile.\nGlad that you are unblocked, Happy Coding!. @f0zi Can you submit a PR with details on the problem you are trying to solve?\ncc @roblourens . Fixed by #742. Fixed in the latest update (0.6.54) to the Go extension.. Yes, the stack is actually unrelated.. This has been fixed in the latest VS Code Insiders build.\nThe next VS Code release in early February will have the fix.\nWorkaround is to add a trailing newline at the end of the file. @ahmetalpbalkan This works for me. Here is what I tried:\n\nDelete one of the packages I had from $GOPATH/bin, $GOPATH/src and $GOPATH/pkg\nOpen VS Code and open a Go project, ensure Add Import does not show the deleted package\nRun go get to get the package\nIn the VS Code window that was open, run Add Import\nI was able to see the package in the list and add it to the Go file\nAutocomplete works for the newly added package in the Go file\n\nThe Add import command runs gopkgs tool to get list of installed packages from $GOPATH/pkg every single time. As in, there is no caching done. So, I don't see why it wouldnt show newly added packages\nAutocomplete uses the gocode tool which also makes use of installed packages from $GOPATH/pkg. \nThe only way the package would be missing in Add Import list and from autocomplete is if $GOPATH/pkg didnt have the package. Restarting VS Code doesnt do any package installation in $GOPATH/pkg, so I am stumped how that fixes the issue for you.\n. @NikosEfthias Do you have sample code where I can repro this?\nI tried it on a simple Go project and stepping over works for me. @NikosEfthias Can you update your version of dlv, VS Code and the VS Code Go extension, and give this another try?. Closing this issue as we havent heard back from the OP.\n@NikosEfthias If you still see issues after updating your dlv version (0.12.1) and the Go extension(0.6.53) and Visual studio Code (1.8 or above), please add \"trace\": true to your launch.config and try again.\nThis will write a lot of logging to a file (whose path will be printed to your debug console). Share this file with us and we can look into what exactly is the problem.. Thanks for the fix!. This issue was moved to atom/language-go#105. The fix is now available in the latest Insiders build and will be available in the next stable build i.e 1.11.0. This is done by the formatting tool.\nHere is what I have observed.\n\nIf there are multiple empty lines between 2 imports, the formatting tool deletes all but 1 empty line between the 2 imports\nIf there are no empty lines between imports, the formatting tool does nothing\n\nIt never tries to standardize across multiple imports i.e remove blank lines between ALL imports or add a single blank line between each import.\nAlso tools like goreturns does grouping of imports as well(first core packages, then after blank line 3rd parties).\nClosing this issue as it has more to do with the tool we are using for formatting than the Go extension itself.\nPlease feel free to log an issue with goreturns/goimports for such inconsistencies\n. We use gocode for autocomplete in the Go extension. \nYou can try running the autocomplete command from gocode in the command line and compare performance in the 2 platforms. > By default VSCode-Go turns on gocode autobuild which rebuilds all packages every single time making it unusable.\nYou can set \"go.gocodeAutoBuild\": false in the settings, and the experimental feature will not be used.\nThere is a note on this in the README, I had forgotten about it :(\n\nAs of now there is no way to provide different default values for a configuration setting based on platform.\nSo I guess, this will have to stay as is.\n. > what's the logic for having that on by default\nSay you make a change to a package, but don't go install it. The change will not be visible to gocode without this setting. Therefore, to keep auto-complete results as \"fresh\" as possible, this setting was enabled by default.\nI have a Windows machine and I haven't noticed any slowness in auto-complete. Though, it might depend on how large and complex the code base is.\nYour suggestion in the other thread of building with -i might help here.\nI'll look into that more, and if that pans out, then we can remove the usage of auto build altogether.\nOr may be use go build -i in gocode itself when autobuild is set.\n. Well, we have a happy ending then :)\nThanks for taking the effort to investigate @mattetti . > For a proper autocompletion tool it's important to parse source files for up-to-date results and for documentation also\nThe best alternative I believe is to get the completion feature from a language server. We are working with Sourcegraph to use their Go language server in the VS Code Go extension. It is still very early in the works but will be the right solution down the road.\n. @thewhitetulip @strrchr Did you recently upgrade to Mac OS X Sierra?\nThere is a known issue of performance of Go tools on Mac OS X Sierra. See #503 \nRun the command Go: Install Tools. That should update all the go tools that the extension depends on which should fix the issue\n. @thewhitetulip @strrchr Any updates?. @thewhitetulip Now that you see similar energy issues when the Go extension is disabled and the related issue in vscode is tracking the same, is it ok if we close this issue?\nThe other concern about hover spawning a new shell everytime is being tracked in other issues.\n. Thanks for the kind words @thewhitetulip! We will keep working on that :) Happy Coding!\n. @bylevel Would this fix #465 ?. Great! Thanks for the PR @bylevel \nI look forward to more in the future\n. @acroca The Go extension uses te go-symbols tool to get all the workspace symbols.\nCurrently, we don't provide a way to ignore vendor folder in the symbol search.\nCan you open an issue in the repo for go-symbols for this feature of ignoring the vendor folder?\n. The output of go-symbols is not used anywhere else other than workspace symbols search.\nLets wait for how https://github.com/newhook/go-symbols/issues/3 gets solved. \nIf we don't hear back, then we can circle back to what the Go extension can do.. It doesn't look like we will be getting a response to https://github.com/newhook/go-symbols/issues/3 anytime soon. There is an issue there from March 2016 that has not been addressed yet.\nFeel free to fork gosymbols to take a flag to ignore vendor symbols. We can then use that in the Go extension. @acroca Awesome! I'll take a look this week and try to use this in the next update. @acroca I have a PR #795 out for integrating your fork of go-symbols.\nBut at the same time, I don't want to rush into this.\nReason being, we are looking into integration with language server for Go which also implements WorkspaceSymbolProvider, and that might have a different design. \nAlso, felt like this is not a Go specific feature ask. Therefore logged https://github.com/Microsoft/vscode/issues/20579 to see what people think about having this feature implemented in the core product itself.\n. Doesnt look like we will be getting an exclude pattern feature from the core product soon.\nI'll try and get the linked PR into the upcoming update which I plan to release in a few days.\nThanks for circling back\n. PR is merged. Fix will be out in the next update. This is out in the latest update (0.6.56) to the Go extension. Also, what platform are you on?\n@mattetti recently found that on Windows, gocode is slow when the setting go.gocodeAutoBuild is enabled.\nCan you try with go.gocodeAutoBuild disabled?. In such cases what do you see when you do a Peek Definition or when you hover on the function ?\nBehind the scenes the extension runs the same code and returns the same data for both Goto and Peek Definition back to VS Code.\nIf the Peek Definition/Hover just says \"Loading\" and never shows anything, it might be because the operation to find the definition and docs never completed.\nAdd \"go.docsTool\": \"gogetdoc\" in your settings and try again. This will make the Goto/Peek definition and Hover features to use the gogetdoc tool instead of godef tool.\nYou can also try running the godef tool from the command line and see if it returns anything.\n. Thanks for the clarification @josh-tepper \nIn this case, the right thing to do is to file an issue with godef with sample code.. @josh-tepper Can you share a sample code?\nWe did have issues with godef and structs and certain packages.\nDo you see this issue for all code? Say a simple fmt.Println . Are you able to use go to definition on this one?\nUnfortunately, I don't have any godef contact.\nBut adding sample code in the issue you created in godef should help as well.\nAlso, do try updating your godef. Sometimes, they ship some fixes which might (or might not :) ) help.\n. @jwendel Your second note on the net packages is interesting. Do we know why the // +build header is missing for Windows? Is there any documentation or issue for that?. @bruparel\nTypescript and javascript support comes out of the box in VS Code. Therefore,  please do log an issue in the VS Code repo https://github.com/Microsoft/vscode for the issue you are seeing for the typescript code.\nFor all other languages, features like Peek definition and Hover are implemented via extensions. The \"loading..\" is shown when the extension doesnt get back to VS Code in time with data for Hover or Peek Definition feature.. Closing this issue, as multiple have been logged against godef.\nUsing gogetdoc is an alternative.\nWe are looking at other options for implementing the features that depend on godef.\nWill update this thread once we have something new to share.. @kuncevic Can you try using the new language server feature? Set \"go.useLanguageServer\": true in your settings.. @kuncevic What version of the Go extension are you using?. Thanks for reporting @josh-tepper , we will track this in a separate issue #853. @zmb3 The decl property in the json output from gogetdoc contains the function declaration instead of the variable declaration in such cases. Repro: \n\nExpected Output: \n\n. This issue was moved to zmb3/gogetdoc#20. Thanks @zmb3 . Looks like delve has implemented this in late October 2016 \nhttps://github.com/derekparker/delve/issues/358#issuecomment-255594116.\nRe-opening this issue for us to consume the step-out feature\n. Done with https://github.com/Microsoft/vscode-go/commit/6d0f4405330efb789c16a01434cf096f0f9fb29c\nThe next Go extension update will have the \"StepOut\" feature.\nYou will need to update dlv though go get -u github.com/derekparker/delve/cmd/dlv. The new release of the extension (0.6.52) has this feature now. @abagshaw The default formatting tool goreturns deletes unused imports. Since the yolo import is not used in your code it gets deleted by the foramtting tool which is run on save.\nYou can use workaround  @codmajik has suggested if you don't want to see this behaviour.. This is not an online feature. The language server will be hosted in the user's machine.. Thanks @mbana! \n@sqs ?. @keegancsmith Just tried. Both File Outline and Workspace Symbols work now.\nThanks!. The latest update of the Go extension (0.6.54) has the integration with the language server available via a setting go.useLanguageServer. The latest update of the Go extension (0.6.54) has the integration with the language server available via a setting go.useLanguageServer. @junkblocker Thanks for catching this!  Created https://github.com/sourcegraph/go-langserver/issues/168 to track the struct members not being shown on hover issue.\nhttps://github.com/sourcegraph/go-langserver/issues/154 is tracking ways we can have sync between the version of language server the Go extension expects user to have and the version user actually has.\n@sqs can you provide thoughts there?\n. > Soon you should be able to run go get gopkg.in/sourcegraph/go-langserver.v2\nThe issue I have with using gopkg.in is that the extension can only ask for which major version it wants and has no control over the minor version.\nThere might be features in the language server in the future that the extension is not ready for or the features might be in a alpha/beta stage and not ready themselves to be used by the extension (one example is the diagnostics which had to be reverted)\nThis is not usually the problem with rest of the Go tools we depend on, as they have been stable for a while.\nWe are looking into having a post install step in the Go extension, that gets the right version of the language server during install/update of the extension.\nBeyond that the -version flag can be used by the users themselves if they want to update  manually.\nCreated #828 for the same. @keegancsmith Sure that works. Closing as duplicate of #666. Its an upstream issue and folks at atom/language-go are looking into it. Oh, so you were referring to linting errors showing up in wrong places?. This is a duplicate of #666. Even if you turn linting off, you would still see the issue with the sample code you shared. VS Code uses grammar from atom to render the colors for the text. The problem is with the grammar. \nHere is the related issue in atom https://github.com/atom/language-go/issues/103. Nice timing @jpatters :)\nI just pulled in the fix yesterday, and the fix will be available in the next Insiders build (probably tomorrow) and in the next stable build of 1.12. Fixed for me. Can you share a screenshot?\n\n. @jpatters Nice catch.\ncc @50Wliu. @50Wliu Logged https://github.com/atom/language-go/issues/120. I believe so. Script would be the type defined in the redis package \nBut I'll let @jpatters  confirm. Thanks for circling back @jpatters and thanks for the quick fixes @50Wliu . Run the command Go: Current GOPATH in VS Code. What does that give?\nCheck your User and Workspace settings. Maybe you have set GOPATH there to a different value.. @skmlcd Can you try opening VS Code from the command line? code .. @skmlcd In that case, this is as expected.\nWhen opening from command line, the process running the Go extension inherits all the env variables from the shell, and so it can use the GOPATH you have set in .bashrc\nWhen you open from the shortcut, it doesnt have access the env variables from the shell.\n@Tyriar Can you confirm the above statement, in case my understanding is wrong?. The fix is in the latest update (0.6.53)\nThanks @anton!. @cxww107 AFAIK, the cwd set in the debug config in the launch.json file does get passed to delve regardless of whether you are debugging a test or a program. Please log a new issue with a sample code set and reproducible steps.. @mcardosos For me, this already works.\nExample: \n\ngo get github.com/godoctor/godoctor\ngo get github.com/willf/bitset\n\nNow I have the bitset package both in $GOPATH/src and in $GOPATH/src/github.com/godoctor/godoctor/vendor`\nWhen I open the godoctor workspace and run Go To Definition on a bitset type, I end up in the one inside the vendor folder.\nWe use godef by default for the Go to Definition feature. Do you have the latest for godef ?\n. Closing this issue as we havent heard back from the OP and Go to definition works as expected with the vendor folder.. @RoarkeRandall Does godef return the right definition location when you use it from commandl line?. Thanks for the PR @ankon and thanks for taking a look @mattetti . Thanks @rafax!. It is unlikely that we would have this feature in the context menu. But, it is pretty straightforward to implement this as a command which you can invoke via the command palette or even have a code action show up like a light bulb as you have shown.\nPRs are welcome and I can help anyone interested in taking a stab at this.. The command Go: Get Package is now available with the PR https://github.com/Microsoft/vscode-go/pull/1222. This feature has been available for quite a while now.\nYou can select the package or place your cursor on it in the import block and run the command Go: Get Package.\n. I can't say much about the error that you see when you run dlv from the command line, \nFor the error that you see in VS Code, can you set the GOPATH in the env field in the launch.config and try again?\n\"env\": {\"GOPATH\": \"/Users/huanghaitao/go\"}. Well, atleast the error is different :)\nNow VS Code is able to launch delve, delve is giving those errors \n@derekparker Do you know in which scenario will dlv give these errors?\n\n. After a bit more digging this is what I found.\nFirst off, this issue is a duplicate of #269\nAnd related to https://github.com/derekparker/delve/issues/357\n@skeleton1231 Can you go through both these issues and see if the steps there help you at all?. @skeleton1231 You have linked the same issue :) I am guessing you meant https://github.com/Microsoft/vscode-go/issues/20#issuecomment-272090465 solved it for you. @mattetti The 2 tests are failing because they are not getting back expected errors from go build.\nYou are reading the file using fs.readFile and calling the runTool in the callback. By the time the callback is called, the test has already completed, and so does not get the results of go build.\nHere is what you can try:\nlet buildPromise = new Promise<ICheckResult[]>((resolve, reject) => {\n    fs.readFile(filename. 'utf8', (err, data) => {\n        .....\n        runTool(....).then(result => return resolve(result), err => return reject(err));\n    }\n});\nrunningToolsPromises.push(buildPromise);. Are you saying that when you add a new import statement and save, it disappears?\nIf yes, then this is due to the formatting tool. By default, the extension uses goreturns as the formatting tool. By default, formatting is run on save. goreturns removes any unused imports.\nSo if you add an import, but don't use it, then it will be removed.\nWorkaround:\nUse the new import before saving\nOR\nChange the formatting tool to be used to gofmt in the settings\nOR\nTurn go.formatOnSave off in the settings\n. >  i cann't even delete the blank line too.\nThat is also done by the formatting tool.\nAs a guideline, there is always a blank line between the standard packages and any third party packages\nClosing this issue as by design.. :) Thanks @verygoodsoftwarenotvirus . @nochso You have linting errors that is breaking the build. Can you fix them?\nRun npm run lint to see the linting errors. Thanks @nochso . Closing this issue for now. If anybody can provide more concrete steps, we will open this issue.\n@olliephillips Next time you see this, check if there are any errors in your console (Developer: Toggle Developer Tools) and share the same. Also share if rest of the extension features (hover, go to definition, file outline, build, linting etc) work as expected in such scenarios.. @taketori The debug adapter at the moment cannot read the settings, and so is not aware of the GOPATH you set in the settings.\nEither, your PATH has to point to dlv or the GOPATH should be set outside VS Code as an env var.\n. If you are not setting GOPATH outside of VS Code, then you need to set it in the env property in launch.json so that dlv gets the right GOPATH to use.. @taketori \nIs there any reason, you don't want to set GOPATH as an env variable outside of VS Code in Windows?\nAdding GOPATH in the env property in the launch.json was so that when dlv starts running, it knows the GOPATH \nBut, dlv cannot be run if it is not found in the first place (your original issue Cannot find Delve debugger...), for which you need to have the GOPATH set as an env variable outside of VS Code in Windows\nNevertheless, your hack gave me an idea. I have a PR out #725. With that in, the GOPATH you set in launch.json can be used both to find dlv and by dlv itself, without needing to set GOPATH as env var outside of VS Code. With the latest update (0.6.53), the GOPATH passed as env var in the launch.json will also be used to look up the dlv binary. Just add another config in your launch.json with mode set to test. \nThere is a drop down in the Code Debug viewless that lets you choose which config among the many in launch.json you want to use. \nChoose the newly created config and any breakpoints in your test code or the code that is being tested will be hit.\nTo debug individual tests, pass -test.run and the test name as args in the config.\nAll this is in the docs in Set up configurations\nThis is also linked from the README for the extension.\nLet me know what else we can add to improve the docs.. @tw1nk Updated as per your suggestion. I agree, its much cleaner this way. Thanks!. Thanks @guogeer, I found this the other day too. The fix is already in master. The next update of the Go extension will have the fix.. Yes, it is a very good feature indeed. PRs are welcome.. @theSoenke great work! Please send a PR and we can try and get this in the next release :)\nFew points\n- I have a case where a function is used in another Go project outside the workspace opened in VS Code. The Codelens lists this external reference, but when I do a \"Find all references\", the external reference is not listed. Any idea how that happened? \n- About go-outline returning different offset for func vs type, looks like that is how the Go parser works. See https://github.com/lukehoban/go-outline/blob/master/main.go#L53\n- About console filled with errors, I am looking into it\n. @theSoenke great work! Please send a PR and we can try and get this in the next release :)\nFew points\n- I have a case where a function is used in another Go project outside the workspace opened in VS Code. The Codelens lists this external reference, but when I do a \"Find all references\", the external reference is not listed. Any idea how that happened? \n- About go-outline returning different offset for func vs type, looks like that is how the Go parser works. See https://github.com/lukehoban/go-outline/blob/master/main.go#L53\n- About console filled with errors, I am looking into it\n. @theSoenke \nAbout the errors in the console on edit, I see 2 types\n\nguru failing. This I am looking into\nOther one is\n\n\nThe second one is because you are returning the codelens promises even the ones that do not return a codelens.\nSo something like this\nlet codelenses = [];\n            return Promise.all(lenses).then(values => {\n                values.forEach(lens => {\n                    if (lens){\n                        codelenses.push(lens);\n                    }\n                });\n                return codelenses;\n            });\ninstead of return Promise.all(lenses) will fix that.. @theSoenke Found the issue. Both guru and go-outline work only on saved files. Therefore, when you edit, all the positions get messed up. I'll fix that and this should work like a charm.. @theSoenke  Alright, I have updated both go-outline and guru to use the -modified flag to work on unsaved file contents.\nMerge from master, and things should work well now.. Oh that! That is the call to references being cancelled.\nChange the if (err) at https://github.com/theSoenke/vscode-go/blob/codelens/src/goReferences.ts#L44 to if (err && (<any>err).killed !== true, and you should be good to go\n. This feature is now available in the latest update (0.6.60).\nIt can be disabled by setting go.referencesCodeLens.enable to false\nThanks @theSoenke!. Also, we wouldn't want this option to show up in a test file.. As a test run, I am planning to ship this in the coming update\n\nPeople who feel this would clutter their menu and are comfortable using the command pallet instead, can change the settings to disable these entries\n\nSub menus are not supported yet, if they were then we could group these more appropriately.\nThis can act as a feature discovery tool, which users can prune as per their needs.\nThoughts?. Toggle would be a better option, in which case I'd prefer to replace the existing 2 commands with just a single command \"Go: Toggle Test File\" (needs a better name?)\nThe when api does support the editorLangId which we can use to bind to the toggle command. . Toggle would be a better option, in which case I'd prefer to replace the existing 2 commands with just a single command \"Go: Toggle Test File\" (needs a better name?)\nThe when api does support the editorLangId which we can use to bind to the toggle command. . The latest update (0.6.53) has this new toggle command.\nFrom the Changelog:\nNew toggle command Go: Toggle Test File that lets you toggle between your Go file and the corresponding test file. Previous commands Go: Open Test File and Go: Open Implementation For Test File have been deprecated in favor of this new command. PR 739. You can add a keyboard binding to this as below:\njson\n        {\n            \"key\": \"ctrl+shift+t\",\n            \"command\": \"go.toggle.test.file\",\n            \"when\": \"editorTextFocus && editorLangId == 'go'\"\n        }\n. That seems to be an error from dlv. Can you try running dlv from the command line for your tests and see if you get the same error?. Also are you able to debug your package in the debug mode? This is to ensure that you have dlv set up properly. Since you are on Mac, many users have had signing issues.. No, the plugin does not install delve, you must have installed it at some point.\nDoes the 'debug.test' file get created when you are debugging in the test mode?. So you are saying you had to change the program attribute in launch.json was not pointing to the right package?. Thanks!. Thanks for the heads up @samherrmann \nClosing this PR in favor of #737. I am able to see the errors. See below where I have a struct \"ABC\" and I have wrongly spelt \"Hello\" as \"hello\"\n\n\nHowever, I only see the error, when I make a change in the file and save which triggers the build.\nIf you open a file from another package, make a change, save (that triggers build on that package), then you lose the errors that were generated on the original file.\nCan you confirm that you see the same as well?\nIf yes, then the way to fix this would to be to trigger save on when the active editor changes.\nThere was some discussion on this (or similar to this) in #118. Do you see any errors when you run go build from the command line on the package which uses the struct?\nDo you see any errors in the output panel when you make a change and save the file that uses the struct?. The Go extension depends on the output of go build to show you errors. But you seem to have problems running go build itself.\nWithout fixing the golang errors that you are seeing, I don't think there is anything the the Go extension can do, am sorry :(\nOne thing that can be done, is that we can show a message saying go build was not run successfully, please see the output pane and show the build errors in the output pane\n. The PR #735 will help with this. With the latest update (0.6.53), build errors such as the above will be displayed in the output window and will be mapped to the first line of the file i.e the first line of the file will get a red squiggly pointing to the error.. It works for me...\nDoes this happen only a single project or all projects?\nWhat about other commands ?\nGo: Test File Go: Test Package. That's interesting..\nWhat is the message you get when you run the other 2 commands?\nCan you run go test in the command line work for the package in question?. When you run Go: Test Package, the extension runs the below with the package as cwd assuming you havent changed any of the go.testTimeout , go.buildTags and go.buildFlags settings.\ngo test -v -timeout 30s -tags\nSo if can run go test -v -timeout 30s -tags in the directory where your test file exists, then I don't see why the extension is not able to run the tests as well.\n@ironcladlou Thoughts?. Do you see anything logged in the console? Run Developer: Toggle Developer Tools to see the console. @ironcladlou console.log() will log things to the dev console.. Circling back here...\nSo @ccirello, so what you have is a case of a failing test. And All 3 commands to test package/file/cursor are giving you a single line output \"Success: Tests passed\".\nIs that correct?\nDo you have any build flags or build tags or test flags set in your settings?\n@ironcladlou Any other thoughts?. Thanks @ccirello, do share the example when you find it. Closing till then.. I was hoping to have this as a feature from the core product.\nSee https://github.com/Microsoft/vscode/issues/2809\nI'll revisit this issue based on how the discussion goes in the linked issue. Doesn't look like we are going to get upstream support from vs code any time soon.\nSo, we should do this ourselves in the Go extension.\nPRs are welcome, its pretty easy to do this. I can help anyone who wants to get started on this.. Fixed with https://github.com/Microsoft/vscode-go/commit/dd927509a3db3833dc02103e1cf6290074f56a4b. This is fixed in the latest update to the Go extension. The Go extension doesn't have Go language smartness. It uses a collection of tools to achieve most of the core features. The {} completion you see comes from VS Code itself based off of https://github.com/Microsoft/vscode/blob/master/extensions/go/language-configuration.json\nSo at the moment, this is not feasible, unless we use a powerful language server which would know the context of where the cursor is and if the comma is needed or not. \nBut even then, the closest API that the language server can use to make this happen would be the completion items. So you may type {, VS Code completes it to {} with the cursor in the middle, and completion item suggests a comma which you can choose.\nWhich defeats the purpose I feel. Because if you are going to use a keystroke to choose an option from the completion items, you might as well have typed the comma yourself.\nWill keep this open to see if anyone else has any good ideas.\n. https://github.com/Microsoft/vscode/blob/master/extensions/go/syntaxes/go.json is the syntax we use for Go. It is based off of the one from https://github.com/atom/language-go\nThe syntax is not aware of composite literals which is when we need the trailing comma I believe.\nTherefore, I think we need to depend on the AST to make this happen.\nIt might be possible with a language server that uses the LSP.\nAnd guess what, Sourcegraph is already working on one, which we hope to use in the Go extension as an experimental feature in the upcoming update.\n. @bedeio Sorry for the late reply, but have you updated the go.buildTags setting in your User/Workspace settings while trying out the build tag \"example\" in your example?\n. This is interesting.. Turns out when you provide filename as args to go build, you get the error even without the build tags. But when you provide the directory (which is what the Go extension does) as args, you don't get the error without the build tags\nKeeping this issue open to see if anybody else has more ideas about how this works.\ncc @mattetti any ideas?\n. @rakyll Any ideas on why the go build behavior is different when provided with file path vs directory?. @rakyll We use go build . on the directory of the current file. We weren't using filenames in go build. The above was just an observation that go build filename was able to detect compile errors in the absence of build tags but go build . wasn't.\nAlso, recently (in master, not released yet), we moved to using the import path for the package.\nHere are my current findings\n\ngo build filename returns the right error \"non-declaration statement outside function body\"\ngo build . and go build importpathforpackage return error \"can't load package:...: no buildable Go source files...\"\n\n```go\n// +build example\npackage main\nimport \"fmt\"\nasdfsdf\nfunc main() {\n    fmt.Println(\"Hello, playground\")\n}\n```\nSo would this be a bug for Go ?\n. One thing to keep in mind, is that if you update go.buildTags appropriately, there are no issues. The extension will use the tags while running go build <pkg>\nTherefore in your scenario where one is compiling // +build android on a Mac, all will be fines as long as go.buildTags is set correctly, which is current behavior.\nI am guessing the reason for \"can't load package:...: no buildable Go source files...\", is that when no -tags are passed to go build <pkg> and it encounters a package with a build context, then the package is ignored. If -tags are provided, then the match is made, and package gets compiled.\n. @bedio Closing this as \"by-design\". Using the build tags, go build runs as expected. There is nothing more the Go extension can do here. @roblourens Can you take a look at this?. We are trying to get the \"Run without actually debugging\" feature as described in https://github.com/Microsoft/vscode/issues/2780\n299 is tracking this work.\nWith this, you won't need a task to run the current package.. In the latest update (0.6.56), you can \n        - Press Ctrl+F5 or run the command Debug: Start Without Debugging to run using the currently selected launch configuration.\n        - If you don't have a launch.json file, then the current file will be run.\n        - Supported only for launch configs with type as debug and program that points to a Go file and not package. We will be releasing a new Go update in a few days. \nThe debug related improvements such as this one will be in the update after that.. I can think of \"debug\", \"test\", \"test single file\" being scenarios for having the configuration snippets. \nWhat kind of configuration snippets would you/your team be interested in?\nFeedback from everyone is welcome.\ncc @mattetti . This feature is now available in the latest update (0.6.54) to the Go extension.\nThere are 4 snippets supported as of now: https://github.com/Microsoft/vscode-go/blob/master/package.json#L158\nIf anyone can think of any other common scenario, then please submit a PR to add a snippet for the same.\n. This feature is now available in the latest update (0.6.54) to the Go extension.. I am able to run go get -u -v sourcegraph.com/sqs/goreturns without any errors.\nCan you share what errors you see?\nWhat do you mean by gorutine exactly? Do you mean goroutine or goreturns ?. Did you try running go get -u -v github.com/cweill/gotests/... from command line?\nDoes it still say remote not found?\nAre you behind a proxy?\nCan you try doing go get on one of the other tools? If all of them are giving the same error, then it must be a local env issue. By that logic, gotests should have worked, because it is from github. But you see the error \"remote origin not found\" for that as well.\nDo you have $GOPATH/src/sourcegraph/sqs/goreturns folder? If yes, can you delete that and try again?. No problem, glad you are unblocked. \nHappy Coding!. @WendySanarwanto \nAccording to the errors, looks like git is having problems finding the remote \nCan you run the below in your command line and share if you are seeing the same errors?\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/cweill/gotests/...\nIf you do see the same errors, then check if you have these folders \n$GOPATH/src/github.com/rogpeppe/godef\n$GOPATH/src/github.com/cweill/gotests\nIf you do have these folders, then delete and try again.. @WendySanarwanto closing this issue for now as there is nothing to be done from the Go extension's side.\nDo let us know if the suggested fix worked for you or not.. @prashcr By default, the formatting tool used is goreturns which removes unused imports.\nYou can change it to gofmt which wouldn't do so.\nIn your user settings add the following:\n\"go.formatTool\": \"gofmt\". @netroby Language server is currently an experimental feature, so we wont be enabling this by default until we have ironed out current issues like Windows support. @korovaisdead \nThis is the repo for the Go extension for VS Code.\nYou seem to doing some angular work. \nThe error most likely might be coming from the angular extension itself.\nI'd suggest to disable the angular extension and see if you are still seeing the error.\nIf you don't see the error with the angular extension disabled, then log the issue in the repo for the angular extension.\nElse you can log this in the repo for VS Code\n. This would happen if the Go extension is not activated yet.\nCan you open a Go file (it is one of the actions that will activate the extension) and try again?. Good point, we could add this command to the list of activation events so that it activates the extension if the extension is not activated yet.\nAnd while doing so, it would be a good idea to evaluate rest of the commands and see if they should be added as well. Fixed by https://github.com/Microsoft/vscode-go/commit/de706decc43b59c9c9ced45690acefb2ef596f67\nAll commands except Go: Current GOPATH and Go: Install Tools need an active editor with a go file to be present. When an active editor has a go file, the extension is already activated.. This feature is now available in the latest update (0.6.54) to the Go extension.. Did you try the most recent update on that thread? https://github.com/Microsoft/vscode-go/issues/441#issuecomment-275958002. PR is merged. This should be out in the next update.\nThanks for the work @codmajik, looking forward to work more with you on this extension.. This feature is now available in the latest update (0.6.54) to the Go extension.\n. Thanks for the PR @vanackere !. This feature is now available in the latest update (0.6.54) to the Go extension.. @codmajik Thanks for the PR!\nA few notes:\nTake a case where the user has set go.gopath to a particular path, and also set go.inferGopath to true. Then according to your current logic:\n\nthe inferred path wins. I was wondering if this should be the other way around. \nIf the user then sets go.inferGopath to false, you will need to reload the VS Code window for the change to take effect. If we only infer the go path, when there is no go.gopath, then you won't need the reload\n\nAlso, can you write a unit test for this as well? You will have to change updateGoPathGoRootFromConfig to take the goConfig as a parameter to do that.. @codmajik I am assuming that when you say \"global config\", you mean the \"User settings\" in VS Code.\nAll configurations defined in the package.json are available for changes in both Workspace and User settings.\nBy the time you fetch the settings by vscode.workspace.getConfiguration(),  Workspace and User settings are already merged (workspace overrides user), so as an extension author, we have no idea if the value for a config was set in global/user settings or workspace settings.\nTherefore, in our case here both go.gopath and go.infergopath can be set either in User or Workspace settings. We need to adapt for both.\nThinking more on this, it makes sense for the inferred path to win when both go.gopath and go.inferGopath are set.\n. @codmajik Never mind the tests, I was thinking of doing a major refactoring in the unit test area soon, I can take care of that.\nWhat changes are you referring to exactly? . @codmajik I think its fine the way it is. You can delete your branch.\nI have updated the descriptions for both go.gopath and go.inferGopath to reflect that the latter overrides the former. \nThere is command Go: Current GOPATH that shows the GOPATH being used by the extension. It says: \"Current GOPATH: ...\"\nWe can update that to say \"Current GOPATH is inferred from the workspace root: ...\" when the GOPATH is inferred.\nNot very important, but you can give that a try.\n. @jtremback Even if there are build errors, linting warnings should still show up.\nLinting is triggered on save.. Sure mr. nitpicker :) Will do.. From @isidorn on November 14, 2016 9:25\nThis seems like an issue with our go extension, thus forwarding to @ramya-rao-a to try to reproduce. Since I do not get this with node debugging\n. @Gargo83, in your repro steps, after step 2, do you stop the debug process by clicking on the stop symbol?\nI cannot start the debugger in step 3 if I don't stop it after step 2.\nAfter step 2, I can see the progress blue line. I can click on the stop symbols and debugger stops.\nI am using the latest VS Code (1.9.0) and the latest Go extension (0.6.53)\n492 is tracking a similar issue.\n. Thanks @Gargo83 , #492 is tracking what you now observe.\nThe fix will be out in the next update.\nWill close this in favor of #492. @codmajik That was quick!\nYou can get the latest vscode.d.ts by updating the \"engines\" field in the package.json file of the Go extension. Right now it is pointing to ^1.8.0 change that to ^1.9.0 and you will be able to get the the new APIs\nCan you try using the -scope flag like @nochso suggested and pass the workspace root as scope?\n. Won't ${workspaceRoot}/... work?. @Zignd I think you are referring to the \"Go to Definition\" feature\nThis one is about clicking on an interface and getting list of places where the interface has been implemented.. @codmajik So what you need is the import path. The same is needed for running go build and we computed the import path this way: https://github.com/Microsoft/vscode-go/blob/0.6.61/src/goCheck.ts#L168. This feature is now out in the latest update to the Go extension 0.6.64.\nThanks everyone!. Thanks @codmajik !!. Can you try gorename  from command line with the -offset param (which is used by the extension) instead of the -from param? . That's great finding!\nWhen vscode-go runs gorename, it uses the absolute path for the file for the -offset parameter and is run from the workspace root.\nSo, can you try running your shell script from the workspace root that was open in VS Code?. There is something else at play here... \nI am testing on the github.com/godoctor/godoctor project which has vendor dependencies.\nThe file I am trying to rename is importing one of the vendor package.\nNo matter where I run the gorename from, it is always successful\n\nIs it possible for you to point me to the code you are using so that I can repro it as well?\n. @velomarc Did you do any updates since yesterday?\nThis sounds like VS Code is stuck in a bad state.\nwhat other extensions are you using?\nSorry for the typical workaround, but have you tried closing and restarting VS Code?. Sorry you had to go through all that. Now you are unblocked, correct?\nHappy Coding!. That change was made in response to #350 where the user was running the test coverage command, but was not seeing any results because the tests were failing.\nI can see how this can be disruptive when coverOnSave is true\nWhat we can do is show such errors when test coverage is explicitly asked for via the command. This way the \"coverOnSave\" feature can continue to be silent.\nThanks for the catch @mtrmac!\n. The fix should be out in the next update which should be in a week.\nUntil then, you can set coverOnSave to false.\nSorry for the inconvenience . Our pleasure :). I am able to eval the input param and the variable inside the function as well.\n\nI am using the latest delve (0.12.1) and the latest Go extension (0.6.53). How about you?\n@roblourens Do you know where the message \"unable to find function context\" is coming from? Is that a generic message?\n. @bruceauyeung Can you share a screenshot of your extensions viewlet? There should be an update button next to the Go extension there if you are still on 0.6.52. I haven't tested with go 1.8 rc versions yet. Please do let us know if any of the features of the Go extension do not work as expected with go 1.8. Were you able to see the Update button/notification previously? What version of VS Code are you using?\n@joaomoreno @sandy081 Extension update notification should work behind proxy as well correct?. Thanks @neelance!. The fix is now in the latest update (0.6.54) to the Go extension.. Thanks for reporting @alexbrand!\nThe fix will be out in the next update.. \nCan you run which dlv in your command line and see if the value is /usr/local/bin/dlv?\n. Thanks @surajbarkale-dolby !\nYes, the program key needs to be a full path. I just added a line about this in the wiki\nThe debugging part of the extension needs some work, we have been trying to improve it in the last few weeks. \nLooking forward to your PR.\n. Fixed in the latest update (0.6.54) to the Go extension.. @thrnio We use gocode for the completions, where we pass the cursor position and the file contents and show what is returned by gocode. Therefore, will move this issue to the repo for gocode. This issue was moved to nsf/gocode#422. Nice timing @ahmetalpbalkan! I just implemented ~ https://github.com/Microsoft/vscode-go/commit/ab35627ad3512a958598eea009fa63c7c91ab822\nIt should be out in the next update which will be early next week. I implemented ~ not $HOME, which one are you using?. great. Can you give an example? A screenshot or a screencast/gif perhaps?\nSee #705 If you have imported a package and save your file before using the package, formatting will remove it assuming that it is an unused package.\nIs there any line of code that is using this custom package of yours before the file gets saved?\n. > A solution to this would for the test runner to wait with the run until the file is fully saved. I don't know if VSCode has the necessary APIs to even do this, however.\nThis would just complicate things adding dependencies around, I wouldn't vote for this.\n\nWould it perhaps also make sense that the test runner saves a file first if it's dirty?\n\nEither that or notify the user that tests cannot be run if there are dirty files.\n\nMy changes don't seem to take effect until the formatter has run. I frequently end up running tests on the unsaved versions because of this latency.\n\nYou mean you end up running tests on the unformatted versions? Because the tests cannot run on dirty files. go test always looks at the file on disk.\n\nWould it be possible to format the code before writing it to the file?\n\nWork tracked in #540 will do this. Though with this, the slow formatters will be ignored and the file will be saved unformatted. \n. The one way around that I can think of is for the tests not to run if there are any build errors.\nIf you have buildOnSave feature on, and the test starts before formatting completes  (or after #540 when the slow formatters get ignored, and file is saved unformatted), there would be build errors if there are missing imports. We could use that to notify users that there are build errors and so tests will not be run.. With the work in #540 completed, formatting will be applied on the file before it gets saved in the latest update to the Go extension (0.6.70). Downside is that slow formatters (that which take > 750ms) are skipped and would require manual formatting. Upside is that such slow processes will not affect tests as described in this issue.. According to the gocode output you have shared, it finds the 5 candidates.\nBut this output doesn't look like the output that can be consumed by the editor, can you share the command you ran to get that output?\nBelow is my example for your scenario and auto complete works well for function arguments.\nAm I missing something in this example?\n\n. Also, can you take a look at the example I shared, and let me know if it is the same case as yours?. It still works for the second argument for me\n\n. @ideahitme I couldn't repro this the last I tried. Closing this issue as 3 months is past and there is no new development.\nIf it still repros for you, then we can re-open this issue. That would be cool to do, PRs are welcome :). Related ask in https://github.com/Microsoft/vscode-go/issues/1237from @apiarian:\nIt would be great to have access to the output of godoc for a package (and possibly a specific identifier) within the editor without having to open up a browser to godoc.org or similar.\nShould be possible using https://code.visualstudio.com/docs/extensionAPI/vscode-api#TextDocumentContentProvider . Some care will need to be taken to handle vendored code correctly. godoc seems to default to looking in the $GOPATH or $GOROOT so we'll probably have to explicitly check $PROJECTROOT/vendor first.\nI'd like to take this issue on myself, but it'll be my first foray into vscode extensions out of my backend-development cave, so if somebody is keen to see this quicker, please let me know. I'd certainly be willing to hand the branch over or collaborate on the work.\ncreated https://github.com/apiarian/vscode-go-test-docs-main to help with documentation experiments.. It definitely sounds feature complete :)\nI have left a few comments on the PR.. I was wondering about that...\nThe resulting editor with docs does look very plain.\nDoes godoc support output in markdown?. That would be cool. There must be a way to show html content directly, with some default styles. I'll look it up and get back \n. @apiarian Wouldn't it be easier to use godoc to run a documentation server?\nThen accessing it via localhost, you will get all the css/navigation and all the cool stuff. I would keep the the light vs dark theme issue out of scope for now.\nLinks opening in browser should be ok to get started. I believe thats what the HTML preview does by default.. @elithrar When you first logged this issue, you cited vim-go as an example. This is what I found in the vim-go docs\n\nIt looks like the split window would show the docs just for the symbol for which the request was made i.e no navigation or no docs from rest of the package that the symbol belongs to. Is that right?\n. Hello All,\nAs VS Code and this extension has gained popularity, we have seen a gradual scope creep over the past year. Being a sole maintainer of this project, it is getting a little hard to support all incoming requests and maintaining the ever growing set of features. Therefore, from now on, one criteria I am going to add to the triaging process is whether the feature request would make sense as a separate extension. This current feature request appears to be so.\ngodoc has a lot to offer as already discussed in this issue. Another feature from godoc.org that was recently requested was #1819. Integration with godoc in general can open a lot of doors to exciting new features. And so, I believe it can be part of a separate extension.\nThe new extension can take a dependency on this extension. Which means it can re-use the work done by this extension. For example: The new extension need not repeat all the work this extension does to calculate GOPATH. It can execute the command Go: Current GOPATH and get the GOPATH calculated by this extension. We can look into what other internal features of this extension can be exposed so that it can used by others.\nSo @apiarian, thanks a lot for your work on the PR. If you or anyone else plan to move it to a separate extension, I can help with code reviews and testing.\nThanks for all the support!. Thanks @surajbarkale-dolby ! Getting the \"program\" attribute wrong is easy, and this will help a lot.\n. @lloy0076 This extension is for Visual Studio Code which is a separate product from Visual Studio.. No problem, do give Visual Studio Code a try too :). Thanks @fatih!\n@barthr Closing this issue as duplicate of #433 \nPlease do up vote #433 and we'll get to it soon. The next time you don't see the local variables, can you add \"trace\": true to your launch.config and try to repro again? This will add a detailed logging to a text file, the path to the file will be in the debug console. Please share that file with us, so that we can try to spot what went wrong.\nAbout your second question, I tried the same with a simple hello world type of code. The breakpoint on an empty line does get skipped but I don't see the \"Failed to get threads\" message. \nYou say that in the other IDE you cannot put the breakpoint, then what do you mean by \"I see the same behavior\" ?. @kopaygorodsky  No problem\n@roblourens Do you think we can do anything about not allowing to add breakpoint on a blank line?. See https://github.com/Microsoft/vscode-go/issues/647#issuecomment-263664489 where I have put my thoughts on the subject.\nThat particular issue was closed as I added a solution for packages from gopkg.in as they specifically start wit \"gopkg.in\" end in \".v1\" or v2 etc.\nI think the best solution would be to update gopkgs tool to return both package name and the import path instead of just the import path. Then the Go extension can use the right package name instead of deducing it from the directory name.\nLogged https://github.com/tpng/gopkgs/issues/5 for the same.\nPerhaps, you can give it a try?. As suggested https://github.com/tpng/gopkgs/issues/5#issuecomment-279845862, it would be an overkill to implement this in gopkgs, but I have an idea at the moment I am exploring.\nThe output of gopkgs is currently cached and then used by the auto-complete feature. The cache only gets revised on a window reload. The cache has a mapping of import path to package name as deduced from the import path.\nWe can run go list separately and whenever it finishes, we can update the cache with the right package name.\nSo net result is that, may be for a few seconds of initial coding, you will see the directory name as package name, and after a while (how much ever time go list takes), you will start getting the right results. This way, user is not blocked by the slowness of go list.\ncc @AlekSi  including you here, as you first raised this issue.. Looks like I went off on a different tangent... \n@frozzare you are talking about the specific case when user types package and auto-complete suggesting the directory name as package name\nWhereas the issue I linked is about the when you try to use an existing package (but unimported) which maybe in a folder my-pack but could be named anything, in that case, you type \"my\" anywhere in your code, and the auto-complete suggests \"my-pack\" and this is not valid.\nYou are right, new packages will not show up in go list\nFor your case, we can use regex to check if the directory name is a valid package name. If yes, then we suggest it, if not then we don't suggest anything at all. \nThoughts?. @frozzare With @uudashr's work in https://github.com/Microsoft/vscode-go/pull/1220 the packages whose names have - or . will get appropriate suggestions as well.. The upgrade of MacOS to Sierra was an unfortunate case which we couldnt have foreseen (If anybody thinks otherwise, I'd love to hear ideas).\nThe updgrading of Go itself on the other hand is known to need rebuilding/re-compiling of the tools. We can look into ways of tracking the Go version the user is using and prompt to update the tools.\nThere can be a hundred other cases where one of the tools stop working and an update would fix it. But this is hard for the extension to predict.\nAny more ideas on how to deal with this is welcome.. With https://github.com/Microsoft/vscode-go/commit/8ee4dafb9bf99b2a3c6aeca04c0a2029bdc3c327, after the next update, the Go extension will keep track of the version of Go being used.\nWhen opening a new VS Code window, if the Go extension finds that the Go version is different than before, it will prompt the user to update the tools.. This feature (https://github.com/Microsoft/vscode-go/issues/797#issuecomment-315671773) is now out in the latest update (0.6.63) to the Go extension. @joaodias This is fixed with https://github.com/Microsoft/vscode-go/commit/3c4744abb1000accbb8e7bf1058ea1024a362534\n777 was logged for the same issue\nThe next update will have the fix.\nThanks for reporting!. Set showLog to false in your launch.json to not see the logs from the debugger.\nAs for sending the program output to output tab, Debug Console is the place where any output during debugging is meant to go. @roblourens You have any insights here? . Closing as there is a way to get just the program output (set showLogs to false)\nAFAIK debugger can only print out to the debug console.\nIf anyone knows otherwise, please chime in.. Ah! This was a debt item I knew I had to pay some day ...\nThere is hack that a few unit tests bank on the fact that the machine already has the Go extension up and has all the dependent tools.\nThese specific tests are using the godef repo for running tests on vendoring.\nThe fix is to set up a small Go project with vendoring inside the \"test/fixtures\" folder, point GOPATH there while running unit tests and update the unit tests to use this Go project instead of godef\nI am currently swamped a bit, and wont be able to do this refactoring until sometime next week.\nPlease feel free to send a PR and I can help out every way I can.. Code folding in VS Code is done based on indentation and spaces. It does not depend on any language or language syntax.\nAll contiguous lines that have the same number of spaces or tabs in the starting of the lines can be collapsed together\n. @bruceauyeung Everything you have described is the VS Code editor behavior and has nothing to do with the Go extension. Therefore please log an issue in the repo for VS Code instead.\nRegardless here are my thoughts\nWhen whole variable name is selected and you press F2:\n\ni think the whole variable name in the popup window(rename symbol window) should be selected.\n\nThat is exactly what happens, am not sure what you are expecting\n\nif i press arrow left / arrow right key, the cursor should move left / right one character instead of move to the most left / right\n\nOnce you press any key, the selection in the rename symbol window goes away, and every arrow left/right does take you one char left and right. \n\nif i press home / end key, the cursor should move to the most left / right\n\nThis is also the current behaviour\n. Does it happen every time you try rename? Does it happen only on certain files/projects or all the time?\nIs this in Windows? If yes, then can you type diff in the terminal and see if you get \"not recognized as an external or internal command\" ?\nIf you are not on Windows your machine would have the diff cmd available. If you are on Windows and the diff cmd does not give that error, then the diff cmd is available. \nWhen diff command is not available the the gorename tool tries to overwrite the file on disk with the updated file. If diff command is available the the diff output from gorename is applied to the editor.\nI believe the error you are seeing occurs when the file on disk is overwritten and the file enters into a bad state.. Can you reproduce the error using the steps you outlined in your guess?. @bruceauyeung Sorry, I never got around to getting a repro for this.\nIts been over a year. Both the Go extension and VS Code has undergone a lot of changes, chances are you dont have a repro for this either. If you do, feel free to re-open this issue and we can take another look.\nHappy Coding!. @mosesed I don't understand your question. Are you asking if the Go extension supports go1.8?. @idanya Which version of Go are you using and on what platform?\nI have been seeing issues with Go 1.8 in Mac, but previous version of Go were fine on my Mac\nGo 1.8 is also working fine in Windows. Can you try dlv from the command line and see if you can step in/over/out successfully?. Yes, we should. Thanks @kalbasit \n@idanya Get the latest delve and the issue should be fixed.. To be honest I wanted to include this feature in the next update which I wanted to release in a day or two. Didn't know if that was enough time for you to respond to any additional refactoring comments. So I thought I'd do it myself :)\nThanks for the update, that is definitely more cleaner. Feel free to send a PR, and I'll get it merged right away :). @zerkms I tried your example and I can see the auto-complete suggestion as expected.\nI also see a build error saying local import \"./bar\" in a non local package\n@emicklei @caledhwa I get auto complete for dot imported functions as well\nI am using Go 1.8 in Mac OS X and the latest Go extension (0.6.55)\n. We use gocode for auto-completion, that must have been stuck in an odd state.. @zerkms In that case please log the issue in http://github.com/nsf/gocode\n. This feature is now available in the latest update (0.6.54) to the Go extension.. Thanks @dmage!. The default value for testFlags is null. When the value is null, buildFlags and -v are used to keep the default experience same as before the testFlags feature was introduced. So that someone not touching the new testFlags sees no change in behavior.\nNow, the more I think about it, it seems weird that -v is included with build flags in the default set of test flags. \nPlease submit a PR to remove -v from the default so that there is no further confusion on this.\nI'll add a note in the Changelog about test output not being verbose by default anymore\n. Fixed with #817, thanks @deltaskelta . Fixed in the latest update (0.6.54) to the Go extension.. We could add support for https://github.com/haya14busa/goverage, but keep it behind a setting, so that this a feature that users opt in to and is not the default one.\nPRs are welcome. Thanks @deltaskelta !. @deltaskelta #738 is tracking something similar, please add your thoughts there.\nThe conclusion there was that its hard for the extension to do this at present.\nBut, with the integration of the language server, this can be explored more.\nIf you have any ideas though, I am open for going through them.\nClosing this issue in favor of #738\n. @atombender I can repro this even with go.formatOnSave set to false. Can you confirm?\nDo you have autosave on?\n. I would say so, but I cant repro it in a non Go file :( Can you?. No, doesn't happen when the Go extension is disabled. So its definitely us.\neditor.formatOnSave calls any registered formatter for the language of the given file.\nThis is the offending line https://github.com/Microsoft/vscode-go/blob/master/src/goFormat.ts#L69 in the Go extension that is causing the issue. Commented this line, and it no longer repros\nAm not very sure why we explicitly save, but will look into it \n. Since Go 0.6.70 we no longer do the explicit save and have changed the way format on save works which should fix this issue. What does this have to do with Microsoft/vscode-extension-vscode#52?. All the Mac related tests were previously failing to connect to github: https://travis-ci.org/Microsoft/vscode-go/builds/205432409, so I wrongly assumed the current failure is due to the same reason.\nvscode-extension-vscode hasn't been updated in months. Why do you think that the current failure 'base must be a non-empty string, or null/undefined.' is related to vscode-extension-code?\n. Thanks @dmage, looks like your PR to vscode-extension-vscode was merged.\n. #259 is tracking the feature request to integrate https://github.com/josharian/impl\nI personally am not aware of pros and cons between using https://github.com/josharian/impl and https://github.com/sasha-s/goimpl\nIf you can make a comparison and present a case here, we have no objections for a subsequent PR and it is very much welcome  :)\n. @wly65535 Looks like you have the Go extension installed which needs certain Go tools installed to work.\nEither uninstall the Go extension if you dont intend to use it.\nOr install the dependent tools as suggested by the pop ups.\nIs there any reason you wouldnt want to install the dependent tools?\n. Yes, after uninstalling any extension, you need to reload VS Code window.. This should be easily do-able.\nIf someone wants to give it a shot, you can use the path module to resolve the relative path here: https://github.com/Microsoft/vscode-go/blob/master/src/goCheck.ts#L203\nElse I can get to this next week. The fix for this is out in the latest update to the Go extension (0.6.59)\nYou can now use ${workspaceRoot} and ~ in the file path for --config\nYou can also use ./ or ../ and it will get resolved against the directory for current file not workspace root. Good point, Luke was adding the tags before, I missed doing the same for the recent releases since 0.6.43\nTagged the current release.. - Updating language server as part of post-install of the extension:\nWe support the language server binary being in user's GOPATH (which can be different from the default or the one set as env var), PATH or a whole another location (using go.toolsGopath). \nTherefore, adding a post install step (which wouldnt be aware of user settings) for syncing the language server is a non-started\n\nLanguage server uses tagging and the extension uses gopkg.in to get the minimun supported version\n\nOnly catch is that after a couple of major versions, user's workspace can get crowded with all the multiple versions of golanguage server\n. In the next update of the Go extension, the user will be prompted when we attempt to use features from the language server that are not yet supported in the version that the user has.\nWe do this by looking at the capabilities returned by the server.\nThis should be more than enough to let the user know to update their version of the language server.\nExperimental features can be controlled by the go.languageServerExperimentalFeatures setting and using the middleware to not use the results from the language server if needed.\nTherefore, closing this issue.. This should be simple enough to do\n- Add the new \"envFile\" property to properties at https://github.com/Microsoft/vscode-go/blob/master/package.json#L226\n- Update the Delve class at https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L177 to take in the new \"envFile\" argument and extract the env variables just like it was done for node debug https://github.com/Microsoft/vscode-node-debug/commit/e9ef5be77b66925749797832f15ea44418533d56\nPRs are welcome. PR is merged, this will be out in the next update. The latest update (0.6.56) to the Go extension has this feature.. Closing this in favor of #1023. Thanks @AlekSi !. See https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#cannot-find-delve-debugger-at--ensure-it-is-in-your-gopathbin-or-path. > How do I add dlv to PATH before launching VS Code\nUpdating the PATH environment variable is independent of launching VS Code. Look up how to add environment variables for your specific platform ((Mac/Linux/Window).\n\nI added this also and I am getting the same exact error\n\nWhat error do you get? At one point youmention that you are facing the same thing as described in this issue (Cannot find Delve debugger....). At another point you are referring to another error Cannot find package... I am not sure which of the 2 issues are you seeing at the moment.\n\nI should probably just use Goland\n\nYou are free to use any tool that makes you productive. If you want to use VS Code, then please describe the exact errors you see and details about your set up\n\nPlatform\nVS Code version and the Go extension version\nGo version\ndlv version\nIs dlv under your GOPATH/bin? Is this GOPATH the same as what you get when you run the command Go: Current GOPATH?\nIs the code you are trying to debug under your GOPATH?\nDo you use the setting go.gopath? Is this the same as the GOPATH set as environment variable outside of VS Code?\nDo you use the setting go.inferGopath?. @ziffusion So if you were not opening a folder under src, then the folder you did open, that wouldnt be under a valid GOPATH to begin with. So what was the expectation?. @ziffusion Thats very well summed up, thanks a lot. I have used what you have written here in https://github.com/Microsoft/vscode-go/wiki/GOPATH-in-the-VS-Code-Go-extension and linked the wiki from the README\n\n@codmajik When there is no workspace opened and there is just a single file open in VS Code, we can still infer the GOPATH from the filepath. Thoughts?\n. I initially thought we could have the GOPATH inferred from the file path only when there is no folder opened as in the file is open in a VS Code all by itself. But @ziffusion brings up a good point, we could have multiple Go files open, where would the GOPATH be inferred from?\nIt would be better to leave this as is. i.e inferGopath only works if there is a folder opened in VS Code.\nAbout the debugger not able to read user/workspace settings, I have logged #840 to dig a little deeper and get a better understanding regarding the why and how around the issue.\nClosing this issue as there are no action items left. Thanks for the great discussion though :)\nHappy Coding!\n. This should be fixed with the latest version 0.6.55. Not just return, none of the other Go keywords are prompted in the auto-completion.\n558 is tracking this feature request. Please upvote it, I'll  look into getting it into the next update\n. The latest update (0.6.56) to the Go extension has this feature.. @sandy081 FYI recent changes to https://github.com/Microsoft/vscode/blob/master/src/vs/platform/extensions/common/abstractExtensionService.ts causes the vscode.extensions.getExtension to return undefined\nThe Go extension fails to activate due to https://github.com/Microsoft/vscode-go/blob/54b720d3ef30b2e70c442609b2477b3e1dba2985/src/util.ts#L13\nThe changes have been reverted in master, so the next insiders should be ok.\n. Thanks @sandy081 . Just published from a Mac\n@kisPocok @fasa123 @YCF Can you get the latest version (0.6.55) and confirm if things work for you?. woohoo! . This issue was moved to atom/language-go#115. The fix is now available in the latest Insiders build and will be available in the next stable build i.e 1.11.0. The debug adapter runs in a different process altogether than the extension host and so the usual ways of accessing settings in the extension cannot be used by the debug adapter.\nOne way to solve the current GOPATH resolving issue when debugging is for the debug adapter to infer the GOPATH based on the path of the file/package it is asked to debug. This is being tracked by the PR #1150 . The GOPATH issue is solved by the debugger figuring out the GOPATH from the path provided in the program attribute of the debug configuration. This feature is now out in the latest update to the Go extension 0.6.64\nClosing this issue\n. For anyone else landing here, @karamana and I are tracking the broken GOPATH issue in https://github.com/Microsoft/vscode-go/issues/1194. What's in the output pane?\nWhen there is a build error which cannot be mapped to a line in the file, we map it to the first line of the file which in your case happened to be the package main line\nThis change was done a few updates ago.. Ah ha! You have the -v flag on which prints the names of the packages as they are compiled.\nWhen go build command fails, any output that is of the format filepath:linenumber: errormessage gets mapped to the corresponding file and line number\nWhen the output doesnt match this format, it is simply spit out and mapped to the first line of the file.\nThis was done to show unexpected error messages to the user. See #664\nSee https://github.com/Microsoft/vscode-go/blob/master/src/goCheck.ts#L79\nBut this is suppose to happen only when go build fails.\nDo you see any error message in the output pane at all?\n. Turns out the verbose output comes in stderr which my code deemed as error\nFixed with https://github.com/Microsoft/vscode-go/commit/9b5ea30712c28cf0453207c6755123659cf33d12\nThanks for reporting!\n. ${workspaceRoot} is getting resolved to C:\\Devel\\GO\\src which is the folder you have opened in VS Code.\nThe program attribute in launch.json needs to point to the package or file that you want to debug\nThe default value is ${workspaceRoot}\nTherefore either update the program attribute to ${workspaceRoot}/github.com/samueletonon/welcome or C:/Devel/GO/src/github.com/samueletonon/welcome\nOR\nopen the folder C:/Devel/GO/src/github.com/samueletonon/welcome in VS Code and keep the property attribute in launch.json as ${workspaceRoot}. Yes, that makes sense to have ${fileDirname} as the default instead of ${workspaceRoot}.\n. The latest update (0.6.56) to the Go extension will use ${fileDirname} as the default instead of ${workspaceRoot}.. The latest update (0.6.56) to the Go extension will use ${fileDirname} as the default instead of ${workspaceRoot}.. @varun1729 No updates yet. PRs are welcome if anyone knows how to make this work using the delve apis.. @lirao That error message is from evaluateRequest which is fired only when you type something in the debug console. The purpose of that is to evaluate expressions and not to send input to delve. You can think of the its counterpart in delve to be the print command.\nI've not looked into supporting the terminal when debugging yet. When I do, I'll get back here.\nMeanwhile, others are most welcome to check out the missing pieces and investigate the missing gaps.\nhttps://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code has the instructions to get started.\n. > I'm not really looking into VSCode supporting the terminal (if I want to use the terminal I could just use the terminal) I'm interested in just debugging go code with interactive stdin input.\n@lirao I believe you have misunderstood my statement. I did not mean just \"using the terminal\". I meant using the terminal to run delve such that it can take in stdin. See https://code.visualstudio.com/updates/v1_5#_additions-to-the-debug-protocol\n\nBut now that this mechanism is there in delve itself, when will vscode make use of it?\n\nHave you given this a try in the terminal? I followed the instructions in https://github.com/derekparker/delve/issues/1274#issuecomment-406969034. In the second terminal, delve starts in the \"client\" mode and so accepts only delve commands not stdin. Am I missing something?. Where would you like to see these notifications?\nCurrently they do get printed out to the output window. Hmm.. I was very sure that the output pane opens up showing the right channel...\nBut that doesn't seem to happen anymore.\nWill take a look.. Unless you manually change the channel from Go to something else, the Go channel is the one that shows up by default.\n@bruceauyeung Do you still see other output channel showing up by default?. This issue was moved to Microsoft/vscode#22261. I can repro! (finally)\nHad to tweak some of your repro steps though.\n\nDon't create the heapster in /tmp, because git clone will take care of that\nwhen creating the symlink, ln -s /tmp/heapster/ . instead of ln -s mkdir /tmp/heapster/\n\nI can see the errors in VS Code, but building in the terminal is successful.\nLooks like the process that is spawned to run go build by the extension is not aware of the vendor folder, not sure why.\nAnybody having any ideas is appreciated.. I can repro! (finally)\nHad to tweak some of your repro steps though.\n\nDon't create the heapster in /tmp, because git clone will take care of that\nwhen creating the symlink, ln -s /tmp/heapster/ . instead of ln -s mkdir /tmp/heapster/\n\nI can see the errors in VS Code, but building in the terminal is successful.\nLooks like the process that is spawned to run go build by the extension is not aware of the vendor folder, not sure why.\nAnybody having any ideas is appreciated.. Can you try go list all | grep \"glog\" ? Or grep for any of the vendor packages. It doesn't show up for me.\n. Can you try go list all | grep \"glog\" ? Or grep for any of the vendor packages. It doesn't show up for me.\n. Turns out command line and newly spawned process resolve . differently in case of symlinks.\nWhich is why go build . works from command line but not from the extension.\nSolution is to not use ., but to use the import path.\nPhew\nThis was a cool problem to figure out, thanks for reporting @bruceauyeung!. The latest update (0.6.56) to the Go extension has the fix to this issue.. @zhouhaibing089 In the latest update to the Go extension, you should be able to run and debug tests in symlinked environments. Thanks for the fix!. Can you share a screenshot of what you see in the debug console?. I can't figure out what the issue is ...\nCan you try using dlv from the command line and see if you get any errors?\nAlso, add \"trace\":true in your launch.json. That will print out detailed logging into a file whose path will be displayed in the console. Can you share that file?. Great, Happy Coding!. @ppcuban @epic2005 Those are issues with installing delve. Please look at the repo for delve https://github.com/derekparker/delve for instructions or look it up in stack overflow. Which version of the Go extension are you using?\nsince the version 0.6.48 (PR #610) we do open the the test file after the test generation.\nIf there were no tests generated, then there is no navigation\n. @rakyll closing this issue as we havent heard back from you in a while.\nThe test file does open once test cases are generated.. This is tracked in #330\nPR s are welcome. @hinst Sorry for the late response, does the Go to definition feature work for other packages and the issue is only with this particular package?\nCan you share your settings for go.docsTool and go.useLanguageServer ?. Can you try changing go.docsTool to gogetdoc?\nThere are certain scenarios where the default option does not work because of which we introduced the option to use gogetdoc.\nIf that still does not work, I'll try to get a repro and debug the extension. Great, thanks!. Totally agree, I have been meaning to file this for a while, but have been swamped lately.\nThanks for reporting @zmb3!\nUpdate: \nBelow is what is expected to be sent by the hover provider\n\nLanguage server returns the markdown string\nWhen language server is disabled, the Go extension hover provider returns the language/value object.\nThe former gets the monospace font and the latter gets the desired font\nThere are 2 things to investigate here\n\nCan the language server return lanugage/value object instead of markdown string? @sqs @keegancsmith\nWhy does VS Code render the two in different fonts? @jrieken \n\n. @keegancsmith I took another look at this.\nWhen we return a hover content of type {language: string, value: string}, it is treated as \"code\" and is rendered with editor font and syntax highlighting is applied as per the \"language\" provided. That is how you see the colors in the signature:\n\nThe docs/comments are returned by the language server in the same form {language: string, value: string} with language as \"markdown\". This again gets treated as \"code\" and gets the editor font.\nWhen language server is disabled, the Go extension returns the signature in the form {language: string, value: string} (See https://github.com/Microsoft/vscode-go/blob/29a5a495ca635584cd08c5fa25616a142ef9b2a3/src/goExtraInfo.ts#L27), but returns the docs/comments as just a string (See https://github.com/Microsoft/vscode-go/blob/29a5a495ca635584cd08c5fa25616a142ef9b2a3/src/goExtraInfo.ts#L29)\nThats how the comments get UI font.\nNow to get the same from the language server, we should make MarkedString a union type and update https://sourcegraph.com/github.com/sourcegraph/go-langserver@4193810334683f87b8ed5d896aa4753f0dfcdf20/-/blob/langserver/hover.go#L150:1-151:1 to return just a string\nIs that doable?\n. This has been fixed in the language server.\nPlease get the latest by go get -u github.com/sourcegraph/go-langserver, restart VS Code and you should be able to see the fix.. @josh-tepper The next time this happens, can you check if there is a process called \"go-langserver\" running? \n@mattetti @zmb3 @junkblocker I know you have tried the language server as well. Have you seen any issues like this one?\ncc @sqs @keegancsmith. @keegancsmith Currently, users cannot run the the language server with the flags you mentioned, but I can add the provision for the same and release an update in a couple of days.\nSince you have a repro for the issue now, you can use your local dev environment for the extension.\nLet me know if you need any help there\nI am not sure what happens to the telemetry/event. Looking into it.\n. Thanks for circling back @josh-tepper \n@keegancsmith I'll be enabling the use of -trace and -logfile flags in the next update. Do you need any more info from the users?. In the latest update to the Go extension (0.6.56), there will be a new setting go.languageServerFlags that will be passed while running the Go language server. \n\nUsers can set this to [\"trace\"] to see the traces from the language server in the output pane under the channel \"go-langserver\"\nUsers can set this to [\"trace\", \"logfile\", \"path to a text file to log the trace] to log the traces and errors from the language server to a file.\n\ncc @keegancsmith . In the latest update to the Go extension (0.6.56), there will be a new setting go.languageServerFlags that will be passed while running the Go language server. \n\nUsers can set this to [\"trace\"] to see the traces from the language server in the output pane under the channel \"go-langserver\"\nUsers can set this to [\"trace\", \"logfile\", \"path to a text file to log the trace] to log the traces and errors from the language server to a file.\n\ncc @keegancsmith . That most probably is the offset not line number. @josh-tepper You have set the trace and logfile flags for \"go.formatFlags\" instead of \"go.languageServerFlags\" :)\n. @cyc115 I'd suggest to disable the language server and try again after @keegancsmith and his team have addressed the issues. @keegancsmith is no longer working on this as far as I know.\npinging @slimsag instead. Thanks @slimsag for the amazing work!\n@josh-tepper Thanks for confirming\n@nicpottier @cyc115 Can you get the latest for the language server go get -u github.com/sourcegraph/go-langserver, turn the setting back on and see if it works well for you too?. Agreed :). Can you add it here as well? https://github.com/Microsoft/vscode-go/blob/master/src/goInstallTools.ts#L33. Fix is out in the latest update (0.6.56) to the Go extension. Please see #496 which is tracking the exact same issue. By default, godef is used by the Go extension to provide Go to Definition feature which doesn't work with dot imports.\nAdd to your settings \"go.docsTool\": \"gogetdoc\" to use gogetdoc instead or \"go.useLanguageServer\": true  to use the new experimental language server feature \n. @paulcalcraft Yes, I noticed the failing silently part recently and fixed with https://github.com/Microsoft/vscode-go/commit/2e56371fb799c6847d774cec8c761f21b8b980c2\nWill be releasing an update soon. @unix2dos Are you seeing the Go to definition feature failing only for dot imports or for all cases?. @unix2dos You are using the language server which doesnt give the definition for dot imports. I have logged https://github.com/sourcegraph/go-langserver/issues/227. I can repro this. Will look into it.. Found it!\nYou need to set it as \"go.lintFlags\": [\"--deadline\", \"2s\"]\nWhile spawning a new process to run the linting tool, the arguments are passed as an array object\nSee https://github.com/Microsoft/vscode-go/blob/d8c8cf1d56ea669e4e844e4f09d9211c9d99b43f/src/goCheck.ts#L51\n. @roblourens We moved to using LoggingDebugSession with @brycekahle 's work in #2081. A few questions:\n\nIt provides a lot more details, any way of controlling it?\nThe colors are gone :( Anyway to colorize the output?\n\nBefore:\n\nAfter:\n\n. Thanks @roblourens \nPushed a change to update the trace attribute to take one of 3 values\n- verbose: logs traffic between vscode and the debug adapter + anything logged by the debug adapter itself. Logs to file as well\n- log: shows only logs by the debug adapter (corresponds to the older \"verbose\"). Logs to file as well\n- error: shows only errors (corresponds to the older scenario where trace was not set to anything by the user)\nThe previous option to have verbose logs logged to file but not shown in the debug console is deprecated as we havent seen that being used as much as showing the verbose logs in the debug console + file logging.\n@brycekahle, @segevfiner,\nCan you try out the newer log levels above (from the master branch) and share any feedback you have?\n. Turns out the older vscode-debug-logger was using the category console which logged everything as a yellow warning.\nBut vscode-debugadapter only logs things meant as warning to use the category console and so our color went away.\nSee https://github.com/Microsoft/vscode-go/commit/105de16280ecead758a85415aace03ca9b6ec763#r31811317 (Thanks @segevfiner!)\nTo get around this, I'll be logging things from the debug adapter using log.warn to keep things consistent as before i.e yellow.\nThis is important to differentiate the logs when in the new \"verbose\" mode. cc @rebornix our residential vim expert\n@rebornix Can you help?. @donnol Closing this issue as we havent heard back from you in a while.\nIf you still see this issue after following @rebornix 's suggestions, please do drop a comment here. Looks like this is same as #665\nClosing as duplicate. That's interesting and a great point. Why run all the tests in the package when you are changing just 1?\nI might not get to this in the next week or so, therefore PRs are welcome :)\nI am available if anyone wants to discuss the design though\ncc @dmage (who added the testonsave feature) and @ironcladlou (who added most of the test features before that) for thoughts. @dmage Agreed, we can have the testOnSave setting accept values like \n\"go.testOnSave\": true\n\"go.testOnSave\": false\n\"go.testOnSave\": { \"scope\": \"cursor\" }\n\"go.testOnSave\": { \"scope\": \"file\" }\n\"go.testOnSave\": { \"scope\": \"package\" }\nOR\n\"go.testOnSave\": true\n\"go.testOnSave\": false\n\"go.testOnSave\": \"cursor\"\n\"go.testOnSave\": \"file\"\n\"go.testOnSave\": \"package\"\n. @dmage Yes that indeed gets complicated :)\nI am not in favor of the fallback. We don't do that today when running the Go: Test at cursor command or Go: Test File. I'd prefer to keep the behavior in testOnSave similar to the options in Go: Test cursor/file/package command to keep consistency.\n. We now have the Run tests and the Debug Tests codelens showing up above each test function. \nWe have the Run package tests and Run file tests codelens showing up above the package statement of a Go file.\nIt is easier than ever to run a single test/ tests in the file/ tests in the package.\nI dont see much of an ROI in updating the test on save feature at the moment.\nSo closing this issue for now.\nIf any one landing here has any other thoughts, please do share and we can go over them\n. With #1555 now complete (thanks to @lggomez!), this bug can be fixed when using the latest update to the Go extension (0.6.81)\nJust update your debug configuration as per https://github.com/Microsoft/vscode-go/issues/1555#issuecomment-393366905. @nicksnyder Has this always been the case or a recent behavior after an update to VS Code or the Go extension?. Do you have auto save enabled as well as go.formatOnSave enabled?. Can you try with turning the formatOnSave off? Just to see if its the formatting that's introducing the delay. Thanks @nicksnyder . I can't think of anything else to help narrow down the cause here. \nAnd you are sure this happens only in Go files and only when the extension is enabled ?\nThe only way out I can think of is to reverse engineer this by looking at the code.\nBelow is the list of what takes place for each change in the current document\n- gocode is run for autocompletions. This is run for every new word or . not every letter\n- test coverage is cleared if any\n- the test status bar item is cleared\n- live errors are reported if go.liveErrors is enabled which you dont\n\nOf these the clearing of test status bar item was introduced in 0.6.54 as part of the test on save feature implementation.\n0.6.55 was released the very next day, and you first saw this issue in 0.6.55\nhttps://github.com/Microsoft/vscode-go/blob/master/src/goCheck.ts#L27 gets run EVERY time there is a change to the file which is definitely an overkill. This runs whether you have testOnSave turned on or not.\nLet's run an experiment. Can you find <Your user directory>/.vscode/extensions/lukehoban.go-0.6.59/out/src/goCheck.js and comment the lines that hides the statusbaritem and sets its text?\nNote: if you are using insiders replace .vscode with .vscode-insiders \nAnd then see if you still see a lag?\nOR if you can clone this repo make the above change and side load the extension. See https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code\n. Another thing you can try is to sideload an old version of the extension say 0.6.53 and see if you still see issues. That way we can narrow down which version caused this.\nI still find it hard to believe that the extension is causing this though\n. Yes, a slow extension should not be able to impact simple editor behavior like typing in the VS Code extension model.\nIf you are not seeing this anymore, then I'll close this issue.\nEventually, we plan to move to a language server model where a single server can cater to most of the extension's features and we won't have to kick off multiple processes everytime.\nThanks for circling back to this thread and Happy Coding :). Ctrl+Shift+o which opens the File symbols works in the test file for me\n\nAre you referring to the same feature or something else?. Are you trying out the new language server feature? As in do you have \"go.useLanguageServer\":true in your settings?\nAre features like Go to Definition, build and linting working?. cc @keegancsmith. @charlires Can you get the latest from the language server (go get -u github.com/sourcegraph/go-langserver) and confirm if this is fixed for you?. Neat. Closing this issue then. Happy Coding!. This was fixed in the atom grammar https://github.com/atom/language-go/issues/102\nWill use this current issue to track absorbing the fix into VS Code. The fix will be available in the VS Code Insiders tomorrow.\nAnd also in the next release of VS Code 1.11.0 . Good point. \nFix will be out in the next update.\nThanks for reporting!\n. well, I do need to set GOPATH and GOROOT somehwere because all the logic to find the binaries depend on it.\nSee https://github.com/Microsoft/vscode-go/blob/master/src/goPath.ts\nAlso the command, Go: Current GOPATH depends on it.\nAnd since process.env['GOPATH'] needs to anyway store the overridden GOPATH, we chose to store the defaults in the same place instead of a separate variables\n. The previous fix depends on go env which cannot be run if the extension doesnt know GOROOT in the first place.\nRight fix: https://github.com/Microsoft/vscode-go/commit/904b26733aad05504890e88c7c2e43042095b311. The latest update (0.6.56) to the Go extension has the fix to this issue.. @majimboo Please elaborate. Do you have issues with the goroot to gopath?\nShare the below details\n- Have you set any of these settings: go.gopath, go.goroot and go.inferGopath \n- Run echo $GOPATH in the integrated terminal inside VS Code and a separate terminal outside VS Code. Are the results the same?\n- Run go env GOPATH in the integrated terminal inside VS Code and a separate terminal outside VS Code. Are the results the same? Does this match with the earlier results from echo $GOPATH?\n- What is the version of Go you are using?\n. That's because in Mac its an easy go get to install delve.\nSee https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md\nOn the other hand, it is a valid argument that Go: Install Tools should install delve in Windows and Linux.\nThanks for reporting!. @dolmen can you elaborate your concern?. Yes, I agree, but that's how the delve needs to be set up in Mac as per instructions from the owner's of delve. So, nothing much can be done from our side.. Fix is out in the latest update (0.6.56) to the Go extension. Fix is out in the latest update (0.6.56) to the Go extension. From the debugger side we cannot have a prompt with a actionable option I believe, (I can dig a little more and confirm soon)\nWhat we can do is change the wording of the error message to be more clear. https://github.com/Microsoft/vscode-go/commit/f93ffd2a96f38d531e20a59de11956d14dc5e834\nUpdated to include the url in the messaging. Regarding the formatting, turns out gofmt and goimports as formatting tool of choice (which you can set in go.formatTool setting whose default value is goreturns) works just fine in the above example.\nBut when using goreturns, the formatting tool fails with the error \"no buildable Go source files in ...\"\nTherefore, this particular issue should be logged against goreturns. Can you share your debug configurations from launch.json ?. Can you share the complete error and your launch.json?\nLooks like the error is coming from https://github.com/Microsoft/vscode-go/blob/c530ed4c7cae1038df630307ff9a5eb173714e53/src/debugAdapter/goDebug.ts#L206\n. @bviktor Can you share your debug configuration from the launch.json file?. The launch.json file would be in the .vscode folder in your workspace.\nIt gets created when you click on the gear icon in the debug view\nIf it doesn't exist, then VS Code tries to use some default configuration and tries to debug the current file that is open in the active editor.\nThis default configuration uses the ${file} variable which should resolve to the current file that is open in the active editor.\nIt appears that ${file} doesn't resolve properly in your cases.\nI cannot repro it though.\nCan one of you share a sample simple repo where this happens?\nAnd share details like \n- which folder in this repo have you opened in VS Code?\n- which file was open when you triggered debug?\n- how did you trigger debug? \n. Thanks @bviktor \nI can repro now.\nThe case is when there is no workspace open in VS Code but only a Go file is.\n. This will be fixed by https://github.com/Microsoft/vscode-go/commit/42646afc2d2442b5e962d3125a7cbf61b98b2a0a\nAnd the fix will be out in the next update\nThanks everyone!. The fix for this is out in the latest update (0.6.60). Today you can use the configuration snippets in the launch.json file to add a configuration for debugging a test function. Just start typing \"Go\" and you will get suggestion items for config snippets.\nIt should be pretty straightforward to add a command that makes use of the config snippet, and plugs in the name of the test function under the cursor.\nAs far as debugging the test under the cursor, I think we can use the command \"go.debug.startSession\" and pass in the config\nAm a little busy this week and the next week, so might not be able to get to this.\nPRs are welcome though, and I am available to help out if anyone wants to take stab at this and needs help\n. With the latest update (0.6.60), you can now debug tests via the codelens.\nThis is for simple cases only.\nIf you have cases like env vars being set in your launch.json, the codelens will not be using it.\n. @roblourens Once the program has completed running, the debug mode is not exited. Need to click the stop button manually. Anything I am missing?. Hey @tylerb ,\nAnswers to your 3 specific questions are Yes, Yes, and Yes. :)\nBefore we dive into this feature, I have a few questions first though\n\nCurrently the Go extension supports the use of golint or gometalinter for linting. Is there anything specific about gotype that you feel either of the 2 existing options doesnt do for you?\nFor feedback as you type, have you tried the Auto Save feature of VS Code? You can configure the delay after which VS Code would automatically save your file. And since build/lint/vet are currently run on save, this would be the same as feedback as you type. Only catch is that you might have to turn formatOnSave off so that things dont keep changing under your cursor.\n\n. This opens up questions around lint/vet/build as you type as well\ncc @rakyll @campoy @mattetti for their thoughts. This is out in the latest update (0.6.59). @stanleynguyen Welcome to VS Code :) Add this to your settings:\n\"go.liveErrors\": {\n    \"enabled\": false,\n    \"delay\": 500\n  }\n. @stamblerre We dont have lint on type feature. This current issue was to track showing of syntax errors and so I assumed that's what you were referring to\nLinting errors show up once you save your changes as long as the setting go.lintOnSave is set to package or workspace. Something like #330?. What is the behavior when you have the language server turned off?. cc @keegancsmith. Closing this issue as we have an upstream issue logged for the same. What about 3rd party packages?\nIf it is just the standard go library, then my bet is on the GOROOT.\n. @avence12 Sorry for not responding sooner. Do you still see this issue?\nThe Failed to eval expression is coming from delve itself. I see that you are using the exec mode.\nWhen you run dlv exec from the terminal, hit the breakpoint, are you able to evaluate those variables using the print command? If no, then this is a limitation of delve itself.\n. The April update (0.6.60) is out!\nThanks everyone!. @roblourens Can you check what is your setting value for go.docsTool ? or if you are using the language server?\n. @yageek Do you have the language server enabled?\nI am able to repro when \n- the language server is enabled OR\n- the language server is disabled and go.docsTool is set to gogetdoc\nNot when language server is disabled and go.docsTool is set to godoc\n. @yageek Well, that is much more serious.\nI did end up in such a scenario once, getting the latest for the tools solved it for me.\nCan you try running the command Go: Install Tools ?. @zmb3 gogetdoc returns no pos in such cases. Can you take a look and see if this can be fixed in gogetdoc ?. Rename operation works in this case.\nFind All References and Go to/Peek Definition features like you said don't though.\nThis is a corner case, so there is no rush.\nWill keep it open if anyone wants to take a shot at sending the updated offset to the tools\n. @dauntlesscarp That's a good scenario that pulls us out of the corner case. I have pushed a fix which will be available in the next update.\n. This bug fix is now out in the latest update to the Go extension (0.6.81). Hello people,\njust saw this.\nThanks for reporting.\nMost likely culprit is https://github.com/Microsoft/vscode-go/pull/864\nWill send out a fix soon\n. Looking at all the error messages posted here, it looks like a classic off by 1 error.\ndataAccess -> ataAccess\ncode -> ode\nBut unfortunately, neither did I see this error while testing, nor can I see it now in any of my Go projects.\nAll of my Go project paths are of the form $GOPATH/src/github.com/somebody/someproject and I cant see this error in any of them.\nSo I created another project right under $GOPATH/src like @a57571735. Can't repro the bug then either :(\n@a57571735 @nezorflame  Since you have local dev env available for the Go extension, can you help me debug this issue? You need to put a breakpoint at https://github.com/Microsoft/vscode-go/blob/master/src/goCheck.ts#L167 and see what values you are getting for currentGoWorkspace and importPath variables\n. @a57571735 @asdine @nezorflame @ansencumt\nCan you share some details about your GOPATH?\n\nIs your GOPATH set to multiple workspaces\nAre you using the go.gopath setting to override the GOPATH env variable\nDo you have go.inferGopath set to true ?\nCan you run the command Go: Current GOPATH and see if that looks right to you?\n\n. Alright, found the issue.\nCommited the fix: https://github.com/Microsoft/vscode-go/commit/d417fd6725077d1233fb1bcd3aa5d097d02715a9\nUpdate 0.6.57 is out.\nThis issue only affects those who have multiple GOPATHs, and the Go project being worked on is not the first one among the multiple GOPATHs and the right GOPATH is shorter in length than the first GOPATH.\nI know, thats a mouthful. And quite silly. I apologize for not testing multiple GOPATHs from my side.\nHappy Coding!\n. Thanks @nezorflame! The update is out as well.. @AaronReboot Can you share the build output from the output channel?. @AaronReboot Make sure that the project you have opened is under the GOPATH that you get by running the command Go: Current GOPATH\n. Is there any reason, your project is directly under $GOPATH and not $GOPATH/src?. In 0.6.56 we pass the import path of the current package to go build \nAnd to find the import path we assume that the current file is under $GOPATH/src\nIf we can't find the import path this way, then the path to the current directory is used (which is wrong, causing the error you are seeing, we should have used ., we will fix that soon)\n. Since I am not able to repro, can you uninstall the Go extension you have, and install it using the Go-0.6.58.vsix to confirm if the fix works for you?\n\nUninstall Go extension\nDownload the vsix file Go-0.6.58.vsix \nRun code --install-extension Go-0.5.58.vsix from the location where you downloaded the file. @liaoya Please use the workaround above, that should fix the issue for you.\n\nAlso, I am curious about your set up. Do you have multiple GOPATHs set?\nYou are trying to build d:/temp/gopl/src/helloworld from which I am assuming d:/temp/gopl is your GOPATH. Can you run the command Go: Current GOPATH and share the result?. I just released an update (0.6.59) yesterday which has the fix. The Go extension uses delve for implementing the debugging features.\nI don't think delve supports debugging tests run via a framework as you have described\n@derekparker is this doable using delve?. Thanks @zmb3 \nIn that case, @kmudrick use the test mode in your launch config. Details: Debugging-Go-code-using-VS-Code\nClosing for now, let us know if this doesn't work for you. I cannot repro the issue, but I have a pretty good guess at the root cause for which I have committed the fix to master.\nCan any of you build from the master and confirm that the fix works?. Since I am not able to repro, can you uninstall the Go extension you have, and install it using the Go-0.6.58.vsix to confirm if the fix works for you?\n\nUninstall Go extension\nDownload the vsix file Go-0.6.58.vsix \nRun code --install-extension Go-0.5.58.vsix from the location where you downloaded the file. @TheMidona Great!\n\n@hasSalil I'll wait for the confirmation that this fixes your issue #895, after that will release an update tomorrow.\n@TheMidona \nYou should be unblocked now, so closing this issue. I just released an update (0.6.59) yesterday which has the fix. I cannot repro the issue, but I have a pretty good guess at the root cause for which I have committed the fix to master.\nCan you build from the master and confirm that the fix works?. Since I am not able to repro, can you uninstall the Go extension you have, and install it using the Go-0.6.58.vsix to confirm if the fix works for you?\n\nUninstall Go extension\nDownload the vsix file Go-0.6.58.vsix \nRun code --install-extension Go-0.5.58.vsix from the location where you downloaded the file. This is fixed in the latest update thats been rolled out 0.6.59. You mean you'd like to use the \"light bulb\" like feature where you click and it auto-corrects the issue?. Tracked in #727. This mostly is related to #894\n\nSince I am not able to repro, can you uninstall the Go extension you have, and install it using the Go-0.6.58.vsix to confirm if the fix works for you?\n\nUninstall Go extension\nDownload the vsix file Go-0.6.58.vsix \nRun code --install-extension Go-0.5.58.vsix from the location where you downloaded the file. Great, I am waiting on confirmation from a few other users who have a slightly different error than this one, after that will release an update tomorrow.\n\nYou should be unblocked now, so closing this issue. @ansencumt I want to understand your scenario better.\nCan you run the command Go: Current GOPATH and share the output?\n. I just released an update (0.6.59) yesterday which has the fix. Hi,\nThis is being tracked in #894. Closing this issue as duplicate\nI do have a fix for this, but since I cannot repro it, can you follow the steps in https://github.com/Microsoft/vscode-go/issues/894#issuecomment-290610756 and confirm if the fix works for you?\n. @khoango I want to understand your scenario better.\nCan you share the output you get when you run the command Go: Current GOPATH ?. I just released an update (0.6.59) yesterday which has the fix. @DT-ZhangJia hmm, nice catch.\nI can repro it, but am not sure what is causing it.\nMeanwhile if anyone can help figuring this one out, that would be very much appreciated.\n. Found the root cause!!\nThe root cause is that formatOnSave feature uses the TextEditorEdit api to apply the formatting edits on the file.\nEdits made this way have this issue of ending up selecting part of the text that the cursor is on.\nI have logged an upstream bug for this in VS Code:\nhttps://github.com/Microsoft/vscode/issues/32058\nTo fix the issue from the Go extension's side, I have updated to use WorkspaceEdit api instead.\nThe fix will be out in the next update.\nThanks for logging the issue. The fix for this is now out in the latest update to the Go extension 0.6.64. @martin-flower what nice timing, we just released that feature in the latest update\nSee https://github.com/Microsoft/vscode-go/wiki/Release-Notes#debugging-improvements\nIdeally in Go you would run the program from the terminal. We have an integrated terminal (Ctrl+` or Cmd+`) as well in Visual Studio Code which you can use to run your program. Eg: go run main.go\nIn the latest update you can run directly from the editor using Ctrl+F5 or Cmd+F5\n. When you find yourself in the debugger (after Cmd+F5), are the step in/out/over buttons enabled or disabled?\nYou need to open the file you want to run and then hit Cmd+F5 instead of just selecting it in the explorer. Can you give that a try?\n. That output means that the debugger(delve) was called instead of just running the program\nMy bet is that you have a launch configuration with the program property pointing to a directory.\nUpdate that to point to ${file} and then in the editor where your file is open press Cmd+F5. Yes!\n. @nibbles The initial reason to use the current selected configuration in launch.json when pressing cmd/ctrl+f5 was to keep parity with VS Code's features of how node programs are run\nAlso, the advantages being that you could have different configurations for either running the same program with different args or to run different packages under the same parent folder.\n. That is a VS Code specific behavior and not Go related. This issue was moved to Microsoft/vscode#23776. good catch\nWe do append the error from the gorename tool. See https://github.com/Microsoft/vscode-go/blob/0.6.57/src/goRename.ts#L43\nMaybe there is a newline there somewhere that is causing this.\nCan you provide a consistent repro step, so that I can debug and see what kind of error causes this?. Ah! My suspicion on the newline was right.\nThis is where the error comes from: https://github.com/golang/tools/blob/master/refactor/rename/rename.go#L278\nYou can see there is a new line.\nAnd the vscode information/error box doesnt seem to like newlines.\nJust tested with a message of my own\n\n. @jrieken This is a case when rename operation fails and provideRenameEdits returns a rejected promise with the error message which VS Code then displays in the information box.\nThe information box shows only the first line. The hover shows all lines in the same line.\nShall I move this issue to VS Code or is there any expectation of extensions, that they shouldnt return multi line error messages?. Alright, for now, I'll update the error message sent by the Go extension to replace \\n with space, so that the message surfaces completely.. @willfaught @freeformz  Just rolled out an update, now you should be able to see the whole error.. @tylerb Great job! Your typescript is spot on :)\nI have a left a few comments, have a look.. This is great work @tylerb!\nI just added 1 commit with some description update, edit to README etc.\nWill merge as soon as the tests are green.\n. @esjeon Good catch in finding the bug \nI have updated your branch with a simpler way of getting the GOPATH.\nWill merge the PR as soon as the tests are green. @yepher Thanks for linking the workaround!\n@jsvensson https://github.com/Microsoft/vscode-go/commit/915ca6331081ed794018bc4e3034a8374b0cb2c1 is actually the fix which is not shipped yet. It is the fix that I have bundled into Go-0.6.58.vsix as the workaround.\nMy assumption was that the $GOPATH/src is always prefix in file path. When this is not the case, I used to fall back to to the cwd which was absolute path causing the error you are seeing. Changing that to ., go is happy to build relative paths.\nNow what I am trying to understand is why for certain users the assumption that $GOPATH/src is always prefix in file path does not hold true.\nAnyone has ideas?\nClosing the issue as there is a workaround, but lets continue to discuss this\n. @yepher when I say \"GOPATH is always prefix in the file path\", I meant that atleast one of the paths in the GOPATH env var appended with '/src' is always the prefix in the file path.\nSay your GOPATH is \"/Users/me/Path1:/Users/me/Path2\", then my assumption is that the file path for any of your Go files should either be \"/Users/me/Path1/src/.....\" or \"/Users/me/Path2/src/...\"\nUsing this assumption I then try to get the import path.\nWhen this assumption fails, I end up using the file's directory which is what causes the \"absolute path\" error that you see. . Thanks @yepher!\nYes, your scenario totally explains the error.\nI am stumped by some other cases where the project seems to be under GOPATH/src but still see the same error :( That is what I am trying to figure out. For example: #910\nBut thanks for explaining your case.. I just released an update (0.6.59) yesterday which has the fix, sorry didnt get around to updating this thread.. no there is no such bug, you can log a new one. Thanks @yageek !. Hi,\nThis is being tracked in #894. Closing this issue as duplicate\nThere is a workaround explained in https://github.com/Microsoft/vscode-go/issues/894#issuecomment-290610756.\nWill be releasing the fix soon.\n. I just released an update (0.6.59) yesterday which has the fix. Here is the workaround:\n\nUninstall Go extension\nDownload the vsix file Go-0.6.58.vsix\nRun code --install-extension Go-0.5.58.vsix from the location where you downloaded the file\n\nI am trying to understand all different scenarios where this occurs and will publish the fix soon\nIn your case, I am guessing\n\nYou have opened a Go file under c:/work/src/primerServer\nYour GOPATH is c:/work. (Run the command Go: Current GOPATH to get your GOPATH)\n\nIs that correct? Are you using symlinks ?\n. This is fixed in the latest update thats been rolled out 0.6.59. Can you share the build output from your output pane?. That is the test output, which test command did you run?\nFor build output select the \"Go\" channel in the dropdown in the output pane.\nAre builds running fine?. That is strange, I tried the same set up (having a folder directly under GOPATH/src) and build works for me\n\nCan you run go build stampreport on your terminal (opened in the folder stampreport) and see if you get the same error?\n. I am truly stumped.\nLooks like you have -v as a build flag. Can you try removing that and see if you still get errors?. Thats the screenshot of the default settings. We need to check your settings. In the same view, what do you see on the right side?. I can repro now as well!\nwith buildFlags set to [\"-v\"] no issues\nbut if there is an extra space, [\" -v\"], I get the same error.\nDid you have the extra space?. Do you intend to debug these tests or just run them?. https://github.com/Microsoft/vscode-go/issues/911#issuecomment-291231328 actually uses delve and debugs through all the tests.\nThere is a Go: Test Package command that will run all the tests in the current package\nBut I am assuming yours is the case of multiple packages?\n. Sure, that's a valid feature request. Should be easy enough to do.\n. The command Go: Test All Packages in Workspace is now available in the latest update (0.6.59). So COMPANY_CONFIG_DIR is an env var specific to your project that needs to be set and should be used by tests and test coverage commands?\nHave you tried setting these env vars in the setting go.testEnvVars ?. The go.testEnvVars are used by all of the Test commands as well like Go: Test Package, Go: Test File etc. Do you see this exception getting logged anywhere?. weird, I am not able to repro, i is always a number for me.\nCan you get a repro on a simple Go file that uses just the standard library?. That's some great investigation @tylerb :clap:\nThat should definitely be fixed in the extension causing the problem.\nFrom our side, can you try changing for (let i in params) to a more basic for loop say for (let i = 0; i < params.length; i++ and see if that bypasses the issue?. Great, waiting for your PR to fix this issue :). PR is merged, thanks for finding this @tylerb !. That was some very detailed investigation and reporting, it was a pleasure to read through even though it is a bug report :) You looked into most of the areas that I would have asked follow up questions on.\nSince the issue was with stdlib and that other packages was working fine, my bet would be on GOROOT\nAm glad it is working now, Happy Coding!. @yepher This is fixed in the latest VS Code after we pulled in the latest grammar for Go from https://github.com/atom/language-go. @asw I cannot repro it, can you share sample code which I can use to repro.\n@jrieken Can you think of any scenario where this could happen.\nI believe if the extension sends empty results, then \"No suggestions\" would be shown\n\n. cc @joaomoreno for the git related error\n@facundomedica So you can see the blank auto complete box too?\n@asw Do you see the same error as @facundomedica ?\nWhat version of VS Code are both of you using?\nIf you are on the latest, did this ever happen in the previous versions? (1.10 or below) ?. @asw @facundomedica In that case, I'll close this issue for now.\nIf you do see this happen again, share the error from the console log with us and we will reopen this issue.\n. I believe what you are asking for is being tracked in https://github.com/Microsoft/vscode/issues/5605\nThis is very highly requested.\nSince it is a core VS Code feature, and not extension specific, will close this issue in favor of https://github.com/Microsoft/vscode/issues/5605\nPlease add your upvotes and thoughts there.. The fix for this is out in the latest update (0.6.60). >  gotype-live will report errors for all files in the package\nSo in that case, shouldn't we refrain from clearing the errors for files from other packages?\nAlso, lets enable the live error feature when files.autoSave != 'afterDelay' || files.autoSaveDelay > liv-error delay *1.5 and listen for feedback on how that feels for users\n. thats interesting, i'll look into that separately.\nThanks for the fix!\nI'll combine this one with a few other bug fixes and release in a few days. @tylerb I was testing this in Windows and the errors were not getting mapped to the right file. Probably due to issues with path separators while trying to parse file:\\\\' + file.\nhttps://github.com/Microsoft/vscode-go/commit/08e9c10e0d232c8f7e07077e91f93c05d0e717c9 to fix the issue.\nJust FYI, in case you came across the fix next time you were looking at this file\n. No problem \ud83d\ude0a . thanks for sharing the solution @Kasmetski !\n. @erichiller Closing this issue as we haven't heard back from you in a while. Can you try pointing your PATH to /usr/local/go/bin/  and restart VS Code?. Taking a step back, you are on Windows and you have set the go.goroot to be /usr/local/go which doesn't look like a valid path in Windows.\ngo.goroot should be point to the path where you have the Go executable.\nNext, about your ask \n\nI would like to have my environment set in WSL (bash.exe) and not in Windows\n\nSorry, but I don't understand what exactly you are trying to do here.\nAre you saying that you want to use bash in the integrated terminal?\ncc @tylerb for terminal related queries. Oh sorry @tylerb, I meant to cc @Tyriar (our resident terminal and linux expert), did a premature auto-complete and your name got entered :)\n@srfrog ah! I think I am following what you are trying to do a little better. You are referring to the usage of go tools (like formatting using gofmt/goimports/goreturns, renaming usinggorename` etc) and want them to run in WSL instead of Windows.\nCurrently, we use simple child_process in the Go extension to run the Go tools. How WSL plays into this, I don't know.\n@Tyriar thoughts?\n. @srfrog \nRegarding the go runtime path\npath.getGoRuntimePath() first tries to find the go binary/executable as per the path in go.goroot first and then the PATH. If not found, then it tries C:\\Go\\bin\\go.exe on windows and /usr/local/go/bin/go on other platforms.\nIn your case, looks like it says \"\\usr\\local\\go\\bin\\go.exe\" which is weird to me because it is looking for an \"exe\" in a non Windows like path. I'd suggest to get a local environment of the Go extension set up and debug to see how exactly are you ending up with this scenario. Instructions: https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code\nRegarding shell usage\nSo are you saying that if we use child_process.exec and pass the shell option, you should be able to get the expected behavior? . Hello all,\nThere is no update as of yet. There is some talks to better support WSL in general in VS Code. When these talks solidify a bit, I'll see how we can bring over such support to the Go extension.. I am on a Mac, and for me the definition in GOROOT/src/os/file.go opens.\n@rakyll What is the expectation here?. @Zignd Ah, got it.\nI tried on my Mac again, and the definition in file_unix.go opened for me.\nBut on Windows, I can repro what you are seeing i.e file_plan9.go opens.\nIf I update my settings to use the gogetdoc tool instead (set \"go.docsTool\": \"gogetdoc\"), then I get navigated to the right file.\nCan you try using gogetdoc and see if that helps?\nIf it does, then this issue should be moved to the repo for godef\n. This issue was moved to rogpeppe/godef#59. @Zignd I don't see much activity in the godef repo, so I don't expect a fix there soon.\nI'd suggest using gogetdoc instead. While we could do this in the extension, I would ideally like this support in the form of an API from VS Code.\nGive me a few days and I'll see if we can get this support from VS Code. If not, then I'll add a comment here and you can give it a try.\nSound ok?. yes. This feature is now out in the latest update to the Go extension (0.6.81). @AlekSi Done.. Are you working on Go files and have the Go extension installed?\nIf yes, then you can set go.formatOnSave to false\nIf not, then this is not the repo for the problem you are facing.. This is a VS Code issue and is being tracked here: https://github.com/Microsoft/vscode/issues/16037\n. @bancek Why only build/lint/vet? Wouldn't other tools/features benefit from this as well?\nIf yes, then it would make more sense to update process.env with these env variables once during extension activations, and it will get used everywhere.\n@hickeng This can help your GOOS scenario also I believe. #632\n. @bancek See https://github.com/Microsoft/vscode-go/issues/632#issuecomment-273282269 for scenario where the env vars need to be used by some of the Go tools that we use the Go extension.\nAbout your concerns on changes to process.env affecting other extensions: \nVS Code runs each extension in a separate process, and so any changes we do to the process.env is reflected only in the operations carried out by the Go extension.\nSee https://code.visualstudio.com/docs/extensionAPI/patterns-and-principles#_stability-extension-isolation\nEdit: I was wrong, VS Code runs all extensions in the same process which is separate from the process used by the core VS Code.\nWill merge this PR.. For the slowness issue, have you considered using resolveCodeLens ?. @theSoenke I have merged the PR, but please continue looking at the resolveCodeLens option and send a different PR for it ?. Fix is out in the latest update (0.6.60)\nThanks @goenning !. great, thanks @goenning!. @LYY which version of VS Code are you using?\n. This issue was moved to atom/language-go#125. Thanks everyone for reporting this with the detailed examples, and sorry that I couldn't get to this earlier.\nOnce the upstream grammar is fixed, the fix will be pulled into VS Code as well. Thanks to @50Wliu we have the fix!\nThis will be fixed in the Insiders build of May 23rd, 2017. This feature is now out in the latest update (0.6.60)\nThanks @goenning !. For references codelens, we added the setting, because guru is known to be slow on Windows and people might want to turn it off, due to multiple guru spinning for long times.\nFor the run and debug tests, there is no downside perf wise and it doesnt hinder any workflow so didnt add the setting. (Also our settings are really getting big)\nAny particular reason you would want to turn it off?. >  Vertical editor space is often precious.\neditor.codeLens can be set to false for no codelens at all.\nLets wait for some more feedback. If there is more ask for setting on each type of codelens, then we can introduce it later.. @ironcladlou See https://github.com/Microsoft/vscode-go/issues/964#issuecomment-299345928\n. Hey @itsjamie, I've been meaning to look at this PR since a while, but I've been swamped this week.\nWill definitely review it early next week.\nThanks for your work!. We use gocode to get suggestions for the autocompletions.\nTherefore, will move this issue to the gocode's repo. This issue was moved to nsf/gocode#450. cc @roblourens . @phenrigomes @willseward \nDo you still have issues with remote debugging with the latest version of the Go extension?\nIf not, then can we close this issue?. And by original problem do you mean https://github.com/Microsoft/vscode-go/issues/941#issuecomment-299591809 or https://github.com/Microsoft/vscode-go/issues/941#issuecomment-296831061 ?. @willseward \nI am having trouble with the set up.\nIn the latest update to the Go extension, the errorError on CreateBreakpoint is accompanied by the error string from delve. Can you try again and share the logs?\nIf you are up for it, can you try and debug the issue by running the Go extension from source?\n- git clone https://github.com/Microsoft/vscode-go\n- cd vscode-go\n- npm install\n- Then follow the instructions from https://github.com/Microsoft/vscode-go/tree/master/src/debugAdapter\n- Add breakpoints at https://github.com/Microsoft/vscode-go/blob/0.6.64/src/debugAdapter/goDebug.ts#L541 and https://github.com/Microsoft/vscode-go/blob/0.6.64/src/debugAdapter/goDebug.ts#L547. . This issue has been closed automatically because it needs more information and has not had recent activity. . Its definitely do-able.\nPRs welcome.. This feature is now out in the latest update (0.6.60)\nThanks @kode4food !. That's weird. Live errors should really act on the live file :)\nOne thing to note is that live error reporting kicks in when you start making changes to the file.\nAre you seeing this when you switch branches, but haven't edited the file yet?\ncc @tylerb . The next release would be early next week which will have the fix for the issue of errors from other files showing up in the current file.\n@Taik if you don't mind can you side load the Go extension from master (See https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code#sideloading-the-extension) to confirm that the fix in master fixes your issue?. Thanks @Taik \nThe credit for the live-error feature goes to @tylerb :). Fix is out in the latest update (0.6.60). @wangxufire Please share a video/gif of the problem you are seeing. Preferably using a small simple code. That's the formatting which runs on save \nYou can turn formatting off by setting go.formatOnSave to false.\n. @kode4food Since we have the Go: Test coverage .. command as well, having these options inside go.coverOnSave didnt seem right. So I am falling back to your initial proposal of having these options outside coveronSave. I am combining them (show covered/uncovered/both) to a single setting though.\nSee https://github.com/Microsoft/vscode-go/commit/9ddd21814a905f8d3edcbf93b38d698f6379eb29. Does it work when you run dlv from the command line?. cc @roblourens . @roblourens Can you add some pointers on how we go about doing that so that someone in the community can pick this up?. The call stack trace can now be paged in the latest version of the Go extension (0.8.0)\nThanks @brycekahle!. I tried your code, and I am able to debug through it and no errors.\nDoes go run test.go work in the integrated terminal as well?\nAlso, can you try using dlv from the command line and see if this works?. @AlexShemeshWix Sorry that the Go extension for VS Code didn't work out for you.\nBut before you totally give up on it, would you mind helping us figure out the root cause of your issue?\nDo you have your env variables set in .bashrc or ~/.profile?\nSee https://github.com/Microsoft/vscode-go/issues/708#issuecomment-271119503 for the difference.\n. @xoob Thanks for the detailed investigation!\n@derekparker  --backend is a recent addition to delve.\nIs the behavior described by @xoob above expected/known and do you expect editors to pass the backend option?\n. Alright, looks like this is a Mac + latest delve issue.\nThe reason I couldn't repro must be because I am using the previous version of delve.\nI'll update delve and try to get a repro and log an issue for delve\nMeanwhile, I'll also add the backend option in the launch.config so that Mac users using the latest delve can be unblocked.. @xoob @AlexShemeshWix Did you manually install delve or via brew?\nI installed via brew in my Mac(10.11.6), and I can confirm I got the latest delve (0.12.2), but it doesn't have the --backend option.\nI installed using go get on my Windows machine and I can see the --backend option there.\n. Installed using brew install --HEAD and I can repro now. \nI have logged an issue in the dlv repo.\nIdeal fix would be to fix the lldb case in dlv and https://github.com/derekparker/delve/issues/818 is tracking that.\nWith https://github.com/Microsoft/vscode-go/commit/4beecf1db2aaa18b336be2ee64476b56202fc959 you will be able to set the backend option in the launch.json file and I can confirm that setting this to native fixes the issue.\nThis will be out in the next update for the Go extension which is in a day or 2.\nIf you are blocked by this issue and cannot wait for the next update of the Go extension, current workaround is to install the stable release of delve via brew using brew install go-delve/delve/delve. Or if you had manually installed, go back to the commit https://github.com/derekparker/delve/commit/f6057161606f66f1197c96ad8b6a9580ee1bb68b\n. The upstream issue has been fixed.\nThe option to set backend is also available in the Go extension in the latest update (0.6.60)\nUsers seeing this issue can either add the new backend property to their debug config in launch.json file and set it to native or get the latest delve. Can you give examples of the warnings you would like to disable?. You can set go.lintOnSave and go.vetOnSave to false. Hey @stamblerre \nWhen using guru, the docs are never set on the output. See https://github.com/Microsoft/vscode-go/blob/0.6.93/src/goDeclaration.ts#L224. Therefore, for the hover feature, we fallback to using the combination of godef and godoc. Doesn't that bring about inconsistencies for you?. The first _ is getting the scope \"source.go\" and the second is getting \"variable.other.assignment.go\"\nVSCode is using the Go grammar from https://github.com/atom/language-go/commit/6de3f61\nThe same can be seen in atom as well. This issue was moved to atom/language-go#121. Looks like this is a linting error. Can you confirm? Set go.lintOnSave to false to ensure that this is a linting error and not vetting error\nIf yes, then the issue needs to be logged for the linting tool you are using.\nCheck your go.lintTool setting to see which linting tool is being used. Sorry, my mistake. I thought this was a complete test function with the table structure inside.\ntbd was my Mac spellchecking what I originally intended which was tbf which on second thoughts is not that great :)\nAny reason you want to keep this as a 2 step process. Use the existing snippet first and then this one?\nYou can combine the 2, name it \"table driven test\" and use the prefix \"tdt\" ?. @slomek The final stop $0 is at the function name, which doesnt seem right. The first thing to change in the snippet should be the name of the function.\nI'll update the snippet accordingly\nSee https://github.com/Microsoft/vscode-go/commit/850e42e5304206eb1d21ad0ce2131bfbcbf85d8e\n. This is out in the latest update (0.6.60). @OneOfOne I opened an issue https://github.com/nsf/gocode/issues/452 for gocode being broken on go tip.\nBut since I don't use go tip myself, I don't have details to add.\nIf you don't mind, can you please update https://github.com/nsf/gocode/issues/452 with any details that you have \n. I dont know how I lost this issue in my notifications for over a year! Apologies.\nYes, this is do-able.\nWe currently use the go-symbols tool to look for the given query in the symbol search.\nWhat we can do is\n- If the search term has a /, then provide all packages as result\n- If the search term has a ., assume the preceding text is the package name, then pass the package path to go-symbols to restrict the search to just that package.\nPRs are most welcome. \n\nhttps://github.com/Microsoft/vscode-go/blob/master/src/goSymbol.ts is the file to make changes in\nhttps://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code has instructions on how to get started\n. @josh-tepper What happens when you run gorename from the shell that started code? Does it work?\n\nWhat do you get when you run go env GOROOT GOTOOLDIR ?. Since gorename is giving the same error in the shell as well, I'd suggest to open an issue in the repo for gorename\nIt might be an environment issue or an issue with gorename itself that it is picking up the wrong Go version. https://github.com/Microsoft/vscode-go/issues/947#issuecomment-298916693 describes the same exact issue. It got resolved for @zcmack by re-installing the Xcode tools. See https://github.com/Microsoft/vscode-go/issues/947#issuecomment-298950017\nCan you try the same?\nIf that doesn't work, then you can follow #947 \nClosing this issue in favor of #947. The fix for this is out in the latest update (0.6.60). Sorry folks, May has been a busy month for me and I couldn't get to this. Will try to get an update out early June. @qaisjp \nCompletions get triggered for every new word that gets typed. \nWe will have to parse the Go file every time the completions get triggered and find the types to offer the method constructor in the completion list.\nI have a working model for it, but I am not yet happy with the \"parse file for every completion model\"\nBecause to do that I have to spawn a new process and call a Go tool.\nThe right way to do go about this would be using a language service (we don't have one yet that supports the auto complete feature). That way there is a service that knows the state and AST of the current file at any given time and can provide the necessary suggestion.\nI'll try and get #168 in with the current working solution I have for the next update with a setting to turn it off. I am not sure what the perf implications would be when trying to spawn a new process for every word. Shouldn't be too bad, we already do that for every hover to get the hover info. Let's see.. The setting editor.snippetSuggestions controls whether snippets are shown in suggestion list and where \n (top, bottom, inline) they should appear. bottom is the default value.\nAnother setting you can try playing with is editor.tabCompletion. 0.6.60 was not released yesterday, it was only tagged and I had made a draft for the release.\nThe actual release was just now in the past hour, you should be able to see the new version in the marketplace.\nThanks!. But looks like the timestamp says it was released 20 hrs ago.\nHmm... will keep that in mind next time. The go/parser is used by go-outline to parse the file and get position, and for some reason for structs, the position comes back as expected, but for functions they dont.\nIf you can take a look at the code there (it is pretty simple) and figure that out, it would be great!\nIf not, then we can use regex from our side and figure out the right position before creating the codelens. Can you provide a link for your work on go-outline ? A repo maybe?\nWe should be able to re-use the range property of vscode.SymbolInformation, but I'll be in a much better state to make a statement if I can see what your go-outline returns.\n\nI might be able to look at that again a little later but I should probably get back to some normal work for today :)\n\nTake your time, the next release is atleast 2 or 3 weeks out :). @mgood Your changes to go-outline changes the output and that may affect other users of the tool.\nMay has been a busy month for me, I wanted to spend more time understanding the parser and how it works.\nSo for now, to fix the current issue with the codelens, I have pushed a fix from the extension's side. See https://github.com/Microsoft/vscode-go/commit/efa448f5d08383f0108a08e12875c2d622367311\nI'll keep your PR open and circle back to it later as that is the real fix and my fix above is just a band aid on the real problem :). The fix is now available in the latest update (0.6.62). yes thats crazy, I assumed that VS Code will re-use the data while scrolling if there is no change to the document.\nBut looks like even a slight scrolling is resulting in vscode asking for references all over again.\nI'll look into what options we have.\nThanks for reporting!\nMeanwhile you can set go.referencesCodeLens.enabled to false to disable this.. The issue was that a new codelens object was being returned after being resolved due to which the cached result was always getting invalidated.\nWith the commit above, the references will only be recalculated when there is change followed by scroll in the document.\nThis still may be expensive especially in Windows where guru is known to be slow.\nWill consider disabling by default.. Alright, the perf issue while scrolling without making any change to the document is fixed.\nReferences is disabled by default.\nAnd the setting to use to enable it looks like this:\n json\n        \"go.enableCodeLens\": {\n            \"references\": false,\n            \"runtest\": true\n        }\n@thedillonb Do give it a try. @ironcladlou had the same question :) https://github.com/Microsoft/vscode-go/pull/937#issuecomment-299284015\nAs concluded in the linked thread, you can turn off all codelens by setting editor.codeLens to false\nYou can also turn off all codelens only in Go files, by adding the language scope to the same setting.\nBased on the feedback, we can add the setting in the next update. Not at all, that discussion was in a PR. We can still use this one to track whether we want to include settings for each codelens type. Alright, I didnt want to drag the discussion out too long.\nSince my main concern was not having multiple settings, that is now solved by a single setting\njson\n        \"go.enableCodeLens\": {\n            \"references\": false,\n            \"runtest\": true\n        }\nProblem solved.\nHappy Coding everyone!\n. This issue was moved to Microsoft/vscode#25953. @mukeshdutt \n\nIs this a regression? i.e it worked before but not now?\nJust to rephrase what you are saying: go to definition works for functions in the same package but not across multiple packages?\nHave you changed the setting for go.docsTool, if yes can you share the value?\nHave you set go.useLanguageServer to true ?\nWhat is the version of Go extension you are using?\nWhat platform are you in and version of Go ?. @erichiller Can you try setting go.docsTool to gogetdocs ?\n\n. @erichiller It is known issue that godef doesn't work well with built-in pkgs. See https://github.com/Microsoft/vscode-go/issues/599 The workaround is to use gogetdoc instead.\n@bennyscetbun We use godef by default for the Go to definition feature. Can you run godef from the command line to see if it returns the right location? I cannot think of any reason why it would stop working suddenly.\n@bennyscetbun About the GOPATH issue, can you log a separate issue?. @bennyscetbun great that you are unblocked now. Happy Coding!\n@erichiller @mukeshdutt Do you still have issues with the Go to Definition feature?. @erichiller So you are saying that \"Go to Definition\" is not working even after changing to gogetdoc ?\n. @Emreu Thanks for investigating. Next time feel free to submit a PR as well. You have found the root cause, I'd prefer you get the credit for fixing the issue as well :)\nFor now I have pushed in the fix.\n@erichiller @mukeshdutt I'll wait a few more days for you to confirm if your case is similar to @Emreu \n. @mukeshdutt\nSo you are saying setting go.docsTool to gogetdoc didn't work\nAnd after that you tried, setting go.useLanguageServer to true also didn't work?\nAre you using multiple GOPATHs?. @hjma29 Can you try setting go.docsTool to gogetdoc?. gogetdoc tends to be slightly slower than godoc/godef. Other than that there are no other issues.\nThere is no current plan to make it default, but we can try it in one of the updates and see how it fares the larger audience. We'll use #1025 to track the discussion around making gogetdoc the default tool.\n@mukeshdutt We haven't heard back from you in a while, hopefully the problem is resolved.\nClosing this issue as the fix for the issue @Emreu is in master and will be out in the next update. @polariseye \n- What is the version of the Go extension that you are using?\n- Can you right-click and choose \"Format Document\"? Does that format your code?\n- If that still doesnt work, can you share a gif to show what you are experiencing?. Closing as we havent heard back from @polariseye  in a while. @riosdavi We havent changed anything in the rename area in quite a while.\nThe rename feature works by parsing the diff returned by the gorename tool.\nThe gorename tool uses the diff tool in your path.\nBased on your description, looks like there is mistake with parsing.\nCan you change the \"--- Update\" to just \"-- Update\" and try again?\nMy guess is that https://github.com/Microsoft/vscode-go/blob/master/src/diffUtils.ts#L175 is messing up your scenario.\n. @riosdavi Of course, a better logic is needed. I just asked you to to the replacing to confirm that https://github.com/Microsoft/vscode-go/blob/master/src/diffUtils.ts#L175  indeed is the root cause.\nNevertheless, that was put in place as a workaround for a bug in the diff module which has since been fixed, so I can remove that check altogether.\nThanks for reporting the issue and confirming my hypothesis.\nFixed with https://github.com/Microsoft/vscode-go/commit/1adae1f5ca29cab14655e2f5537b75f2084c9d4a\nThe fix will be out in the next update which should be after about 2 or 3 weeks\n. The fix is now available in the latest update (0.6.62). Thanks @zoobenthos \nWe will look into this.. This issue was moved to atom/language-go#119. That I believe is the limitation of the default tools (godoc) we use for this feature.\nCan you try changing your go.docsTool setting to gogetdoc and try again?. Thanks for your kind words @scriptnull :)\nCurrently only the Test and Example functions are being identified as \"test functions\" that can be run.\nSee https://github.com/Microsoft/vscode-go/blob/0.6.61/src/goTest.ts#L267\nLooping in @ironcladlou who wrote most of the initial test related code in the Go extension.\n@ironcladlou Looking at history, it seems initially we only identified \"Test\" functions. And then somewhere along the line, we added \"Example\". Do you know of any reason why \"Benchmark*\" was excluded?. @ironcladlou Words are as important as code while discussing design and requirements, I am just glad you could respond every time I ping you :)\n\nI'd expect benchmarks to not get executed automatically when running \"test\".\n\nI agree. Our existing commands to run test in file/pkg/workspace and the test on save feature should not include the benchmark. Benchmarks are about perf and not correctness.\nBut the codelens for running the test and the command to run test at cursor can be updated to include the benchmark functions. \nThis way, benchmark functions will be run only if user specifically wants to run them and not in conjunction with the rest of the tests.\n\nbenchmarks often rely on user input \n\nIf input is indeed needed we can have them either as a setting that gets applied to all benchmarks. Or we can add a prompt to ask user for input everytime any benchmark function needs to be run.\nI don't have much experience here either. \ncc @mattetti @campoy @rakyll for their input\n. This will be out in the next update. This feature is now out in the latest update to the Go extension (0.6.69)\nYou can now use the codelens above a benchmark function to run it.\nThanks @buyology!. Thanks for reporting! I can repro. Will look into it.. Well, its been a while and honestly I don't remember :)\nMaybe some of the other changes done around the debugging code might have fixed it.\nSince you are not able to repro this, can we close this issue?. So in your case, you would want the binary to be executed from \"c:\\goproj\\src\\projname\" and all the relative paths are relative to \"c:\\goproj\\src\\projname\" ?. @rskumar So very sorry, I hadn't had the time to look at this.\nThe Go extension uses delve for debugging.\nThe extension doesnt build any binaries for delve to use.\ndelve takes care of all the building necessary.\nOne thing you can try is to debug using a binary itself.\nUse go build yourself to create the binary in the right place\nAnd then update the debug configuration in the launch.json file to use the binary\nYou have to change the mode from debug to exec and the program should point to the binary.\nCan you try that?. @crazytaxi824 Have you tried what is suggested in my previous comment https://github.com/Microsoft/vscode-go/issues/974#issuecomment-322023839?. @crazytaxi824 So you used tasks to generate the binary and place it in the desired location and then used the binary for debugging?. Thanks to @1984weed, you can now provide a output property in the debug configuration which will be passed to delve which then drops the binary at the given path (like how @mvrhov mentioned above)\nThis feature is now available in the latest update (0.6.78) to the Go extension. Duplicate of #496\n The godef tool does not support dot imports. See https://github.com/rogpeppe/godef/issues/19\nPlease follow the instructions in https://github.com/Microsoft/vscode-go/issues/496#issuecomment-261838636 to get the solution for this issue.. Can you share your settings for go.formatOnSave and go.formatTool ?. The auto-import and removal of unused import is done by the formatting tool which is run on save as long as go.formatOnSave is set to true\nLooks like formatting is not being triggered in your case after save.\nOther features that run on save are build, lint and vet.\nDo you get build errors or linting warnings on save ?. The formatting tool when run doesn't show anything in the output window.\nDoes Right-click -> Format Document, format the document?\nCan you set go.useDiffForFormatting to false and try again?. Cool!\nIf go.useDiffForFormatting is not set to false then the Go extension runs the formatting tool with the -d flag. The formatting tool returns the diff, and then the extension applies the diff on the editor.\nIf go.useDiffForFormatting is set to false, the formatting tool replaces the file on disk.\nSo my next question would be if you can run goreturns from the command line with the -d flag and if that returns expected diff.\nIf yes, then the bug is in the Go extension for not parsing and understanding the diff output properly.\n. We did see the same before in https://github.com/Microsoft/vscode-go/issues/520#issuecomment-253919509 and logged an issue with goreturns https://github.com/sqs/goreturns/issues/28\nCan you try removing the goreturns you have and do a fresh go get -u github.com/sqs/goreturns ?\nOther than that as concluded in https://github.com/Microsoft/vscode-go/issues/520#issuecomment-277493885, there is nothing much we can do from the extension side. Thanks for reporting @hungys\n\nPerformance\n\nAre you on 0.6.60 or 0.6.61? There was a perf issue we found in 0.6.60 which we fixed in 0.6.61. The issue was that the cache for references in codelens was being invalidated every time and so every scroll would re-calculate references again\nHow is the performance when you run \"Find all references\" from the context menu? We use guru to get references and have seen it being slow for Windows users \n\n0 showing up\n\nI'd love to get a repro of this. Current running theory is that for some reason finding references fails in which case 0 is the default value shown. May be I can change it to \"Couldn't find references\" so that it is differentiated from the real case of 0 references.\n\nMethod support\n\n962 is tracking this one and we will have support for this in the next update. The cache is invalidated when there is a change in document or when you switch documents. Its how the VS Code Api works. The first case makes sense, but the second doesn't.\n\"Find all references\" in itself is never cached. If that itself is slow, then am afraid, there is nothing much we can do for the codelens. \nUnless of course there is a better solution to find references other than using guru.. @hungys The method support has been out since a month.\nWere you able to repro the 0 references issue?\nIf there is nothing else to do here, then can we close the issue?. @gedw99 The use of language server is optional, we still support the previous way of doing things. Also the codelens for references doesnt use the language server.\n@hungys \n\nBTW, is it possible to calculate all the reference counts at once, but not wait until we scroll to them\n\nYes, that's possible. But finding references is expensive. If all references count were found upfront, then it would take a while for them to appear.\nThe real solution would be either for the language server to support the codelens or for us to find faster way to get references.\nAbout the 0 references when there are references, what's happening is that guru is failing to find the references. Instead of showing error, the current codelens shows \"0 references\"\nIn the next update, instead of 0 references, the codelens will say Error finding references and the error would be displayed in the console.\nSo hopefully we will have more to go on in finding the root cause behind the guru failures\n. I dont have a proper repro for this. Can you share a sample code with repro steps?\ncc @roblourens . Thanks for the steps @renannprado \ncc @roblourens . @muravjov Thanks for the investigation!\n\nSo I suggest to make start/stop requests to delve for every breakpoint being set if debuggee is running. That is, to call pauseRequest()/continueRequest() in setBreakPointsRequest() \n\nThis would work assuming that pauseRequest() itself works as expected and halts delve.\nAs @renannprado and @roblourens has discussed above, that doesnt seem to be happening.\nAre you able to pause the program and then set breakpoints?\n. I am not able to pause to begin with. Can you share the program you are using? I was using the outyet program from https://github.com/golang/example/tree/master/outyet. @muravjov \n\nThe next ThreadsRequest never returns , so no next commands, including Pause, ever has chance to be invoked.\n\nI can see this happening when I try to pause a running program which never had any breakpoints\nIf I have a breakpoint, it gets hit, I continue, and then after a while try to pause, then I see the PauseRequest being made, delve halting, a bunch of thread requests being fired.\n\nSo, workaround is simple now: always set a breakpoint and when control hits it deadlock is over.\n\nHow do we determine when the deadlock is hit? Also, we cannot set breakpoints when the program is running, we have to pause/halt it.. The Pause feature now works in the latest update to the Go extension (0.9.0)\nHuge thanks to the amazing @xiphon who made this happen!. Can you disable the Go extension and do go run helloworld.go in the terminal? Is it still slow or is there a difference?. Sorry for not providing the easier way before. You can run code --disable-extensions. This will run vs code with all the extensions disabled.\nCan you run go run helloworld.go outside vs code in a terminal? Is that faster?. @henvic  Language server perf issue is tracked here: https://github.com/sourcegraph/go-langserver/issues/178. @Mike152 Do you still see issues? Do you have the language server turned on?. Thanks for the analysis @fasa123 \nCan you add your thoughts https://github.com/sourcegraph/go-langserver/issues/178 as well?\n. Slowness experienced by @fasa123 and @henvic is due to the language server. The issue is being tracked https://github.com/sourcegraph/go-langserver/issues/178\n@Mike152 We haven't heard back from you in a month, am assuming things are working well. If not, please drop a comment here.\nClosing this issue for now. There is a --fast flag that you can pass in the go.lintFlags which when used with go.lintTool:gometalinter apparently runs only the fast linters in gometalinter.\nUnfortunately there is nothing more the Go extension can do here, other than rely on the user's knowledge of how best to use gometalinter. @amativos You can set go.lintOnSave to false (if you are on a version below 0.6.62) or off (if you are on version 0.6.62 or above), and then turn it on again when you want to run the linter.\n287 is tracking the feature to have build/lint/install as commands, so add your thoughts there as well.\nI am planning to get to that in the next month or so\n. Thanks for reporting @silentred \nThis is a regression. While adding the codelens support, there was a missing null/undefined check.\nPushed https://github.com/Microsoft/vscode-go/commit/2e910389736160166ef721f14d11b95e37197a4f to fix it.\nThe fix will be out in the next update which will be in a week or 2.\nUntil then, as a work around you can use the codelens or bind a shortcut for the command. The fix is now available in the latest update (0.6.62). @aeronite Do rest of the features like the below work when you open a specific project?\n\nGo to Definition\nFormatting (Right-click -> Format Document)\nFind all references \nSymbol search\n\nRun the command Go: Current GOPATH. Does this give you the right GOPATH when you open a specific project?\nIs there any output in the output window (Choose \"Go\" channel\" in the drop down in the output window)\n. After renaming the function in mypackage1, can you make a small edit and save the file in myPackage2 which uses the function and then see if the error shows up?\nThe go build that we run on save is run only on the package where the change is being made. In your case this is myPackage1. Build is run on myPackage2 only if there was a change>save in a file belonging to myPackage2. #830 attempted to do something similar.\n@mattblagden ping ping\n. In the latest version of the Go extension (0.6.62) you can now run build/vet/lint on the whole workspace as well. See https://github.com/Microsoft/vscode-go/releases/tag/0.6.62. Thanks for reporting @ipsusila !\nI have committed the fix (https://github.com/Microsoft/vscode-go/commit/67557af839921649e9fb1653b704b01b3ced307b) and it will be out in the next update. The fix is now available in the latest update (0.6.62). @josephspurrier You are comparing laptop:~/godev/workspace/src go build cmdd/another and laptop:~/godev/workspace/src go build cmd/another\nI don't see the difference between the two other than an extra d in cmdd which I think is a typo.\nCan you share the two build commands?\n. @josephspurrier Thanks for clarifying! i can repro it now.\ncc @rakyll @campoy for more input on why import paths beginning with cmd/ get treated differently \nBased on their input we can then discuss what is the best course of action here.. Thanks for the clarification @rakyll !\n@josephspurrier Any reason your packages have import paths starting with cmd ? From what @rakyll explained, that seems to be very GOROOT specific. Some other projects that I see using the \"cmd\" format have their folder structure as \"GOPATH/src/myProject/cmd/\" instead\n. The reason we don't use relative paths like that is to make the symlinks work. See #846\n. @diegobernardes Can you give a sample code where I can try and repro this?\n\nOn package product the elasticsearch has a alias called client\n\nI don't know how to do the above.. Thanks for the clarification.\nSo you have \"go.useCodeSnippetsOnFunctionSuggest\": true in your settings\nand expect the snippet that gets added by the autocompletion to have the default value as elastic search.Product instead of v1.Product.\nThe snippets added in this way are rarely ever used without any changes. In this case even if elastic search.Product was inserted, you would still have to replace that with a valid value. \nTherefore, is there any advantage if the alias was indeed used in the snippet?\nThis feature of adding snippet is based on function signature which the extension gets from gocode. So even if do want to get this fixed, this should be fixed by gocode. @nsf Any thoughts on gocode respecting alias for the package while returning the type of the completion item?. Thanks for looking into this @nsf\nNo worries about the delay.\nWould you prefer a tracking issue in the gocode repo or this issue is ok?. Thanks @nsf!\n@diegobernardes run \"gocode close\" and then update gocode by \"go get -u github.com/nsf/gocode\". How did you install delve? And what platform are you on?\nI recently saw this issue when I installed delve on Mac from master using brew.\nDidn't see it after I installed the stable version. How did you install delve? And what platform are you on?\nI recently saw this issue when I installed delve on Mac from master using brew.\nDidn't see it after I installed the stable version. @mpvl If you are using Mac, then I suggest you install delve using brew as instructed here: https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md#via-homebrew\nThis way you will get the stable version. @derekparker Any ideas based on the above error message?. See https://github.com/Microsoft/vscode-go/issues/981#issuecomment-300341146 for workaround.\nThe fix has been checked in and will be out in the next update which should be in a week or 2. See https://github.com/Microsoft/vscode-go/issues/981#issuecomment-300341146 for workaround.\nThe fix has been checked in and will be out in the next update which should be in a week or 2. Thanks for reporting this @IzakMarais and sorry for not getting back to you sooner.\nI observed similar mismatch early on too. See https://github.com/Microsoft/vscode-go/issues/726#issuecomment-294557826\nSomehow references from outside the current workspace are getting included in the codelens.\nIs that your case as well?\nFunny enough both the codelens and the \"Find all References\" features use the same guru tool. So its weird that they find different counts.\nThis needs some investigation.\n@theSoenke can you take a look at this?\n. Your first case of 0 references is being tracked in #962\nIn your second case, if you click on the codelens, you will see 5 references. k2 from main.go is being counted. What is not being counted is the definition of Kind. When you do a \"Find all references\", the definition is also counted, where as the definition is not counted in the codelens\nThat is by design in VS Code\nThe third case is same as the second.\nAs for the byte offset question, I am not aware of any way myself, but yes, that would indeed be very handy.\n. From the screenshot, it looks like you are trying to go to definition feature on the import statement.\nThis is not supported at the moment and has nothing to do with vendor packages.\nThis feature request is being tracked in #330. > Snippet prefixes are always at the bottom of the autocomplete list\nEasy fix. Set editor.snippetSuggestions to either \"top\" or \"inline\"\nFor the second one, are you saying that the case insensitive options are not showing up or that the case sensitive option is auto selected instead of the case insensitive one? In your example, what would be the desired items in the completion list?\n\nhow the autocomplete system works\n\n\nWe use gocode for getting the completion items\nThe snippets that you see come from either https://github.com/Microsoft/vscode-go/blob/master/snippets/go.json or user defined snippets\nThe snippets get grouped together and placed either at the top or bottom of the list if editor.snippetSuggestions is set to either \"top\" or \"bottom\". They are placed inline with the rest of the completion items if this setting is set to \"inline\"\n. @kumarsiva07 Is this a regression or has this never worked?. @kumarsiva07 What you are seeing are build errors. You can see the same in the output pane where it says \"Finish running tool: /usr/local/go/bin/go build -i -o ....\"\n\nCan you run the build command you see in the output pane in the terminal? Does that succeed?. cool, Happy Coding!. Others who are having this issue, can you share what you get when you do go build as per the command printed out in the output window?. @mixj93 What you have shown is the error coming from running go build.\nWhich is why I ask what do you get when you do a go build. My suspicion is that you will get the exact same error message. Then the next step would be to figure out why go build fails.\nYou may use makefile to build, but the Go extension uses go build on the import path of the package to build the package.. In the above case FieldsSplit gets the scope variable.other.assignment.go and rest of the words before it get source.go. This issue was moved to atom/language-go#128. This is fixed in the latest VS Code Insiders build. This is due to #840 which we can use to track this issue\n. I'd prefer to have this option as a flag in the linter tool rather than the editor trying to parse files to find generated files.\nPlease open this issue in your choice of linting tool, say golint or gometalinter.. fmt.Scanf reads text from std input. So from what I can understand, unless there is an input the program cannot move forward.\nWhat is your expectation here?. cc @keegancsmith. Closing this issue as we have an upstream issue for tracking the problem. Hey @mprobst, have been buy this month, so didn't get much time to go over any of the PRs, but will get to them this week.\nThanks for your patience :). @mprobst \nI am a little out of my depth here, so if you don't mind and answer a few queries, that would be great.\n\nsupport configuring the binary location for gocode\n\nWhat is the scenario for this? For all the tools we currently use in the extension we first try to find it in GOPATH/bin, then PATH and then GOROOT/bin. It doesn't feel right that gocode gets to have a setting to specify a location when the rest of the tools can't. \n\nsupport passing additional default flags to gocode\n\nThere are flags other than addr and sock which when passed might result in gocode behaving unexpectedly. Like -s, -debug, profile etc. Is there any other scenario other than wanting to connect to a remote gocode server where you see the use of configuring the gocode flags?\nIf not, then I'd prefer a setting like go.gocodeServerAddress which when provided you use it for addr and pass tcp for sock\n. For your case, you can make use of the the go.toolsGopath setting in the Workspace settings of the few projects where you want to use a different gocode.\n\nMove your special gocode binary inside a bin folder. Say the final location is /Users/me/mySpecialGoCode/bin\nIn the Workspace settings for the projects where you want to use the special gocode, set go.toolsGopath to /Users/me/mySpecialGoCode. Note: Ensure you do this in the Workspace settings and not the User settings. The settings from the latter will get applied to all projects.\n\nThis way the extension will first look for the Go tools in the location provided in go.toolsGopath, then fallback to the actual GOPATH, then PATH and so on.\nDoes that help?\n. In the latest update (0.6.63) to the Go extension, below are the improvements made\n\nPrompts will only show up for tools that are used for features that are explicitly executed by the user. Eg: Rename, Generate Unit Tests, Modify tags. And not for features that get triggered behind the scenes like linting, hover or format on save.\nWhen the prompts do show up, closing them will ensure that they wont show up for the duration of the current session of VS Code.. Interesting..\n\n@jrieken Do you know the reason for this? The code that provides the codelens for run/debug tests is https://github.com/Microsoft/vscode-go/blob/master/src/goRunTestCodelens.ts#L79-L80\nI don't see why the order should change.\n. @jrieken Yes, they come from the same provider, same function. See https://github.com/Microsoft/vscode-go/blob/master/src/goRunTestCodelens.ts#L79-L80. thanks @jrieken!\n@cyc115 The fix will be out in tomorrow's insiders build. Test on Save is already a feature, just set go.testOnSave to true\nInstall on save is a good feature as well. PRs are welcome :). The Go: Install Current Package command will be available in the next update. @coreds This doesn't look like it is specific to the Go extension.\nCan you open an issue in the VS Code repo instead?. @gertcuykens\nYou can also turn codelens off for all languages by setting editor.codeLens to false\nFor granular control on codelens by the Go extension, you can use go.enableCodeLens like @goenning has suggested.\nBy default, we keep codelens on. Same goes for VS Code in general.\nIf there are codelens that may have perf impact (for eg: the references one), we keep them off by default.\n. sorry what?. @atombender What you see being suggested in the comments is word based completion (coming from VS Code core and not the Go extension) that has no knowledge of the language semantics.\nWhat you are saying can be achieved if the Go extension itself figures out the right completion. Since the Go extension uses gocode to get completion items, you can log this feature request in the repo for gocode\nThis will also be easy to implement by a language server, which makes me think I should have a new label called \"language-server-candidate\" :). When we do have a stable language server to use and which implements code completion, we can add this feature to then.. If anybody wants to give this a try from the Go extension's side, here are a few pointers\n- Completions are not triggered by default in comments as you type. Users have to manually press Ctrl+Space or enable quick suggestions in comments using the setting editor.quickSuggestions\n- Once completion does get triggered, the Go extension specifically returns empty result after determining that the cursor is in a line comment. You will need to skip this if the next line declares an exported member. Keep in mind to do this only right after // or right after the first word in the comment. If the comment already as a whitespace after the first word, we shouldn't be providing any completions\n. > Is there a function elsewhere which detects exported members\nNo\n\nI have verified this above is working with manual testing, how do I go about writing automated tests\n\nPointer to existing test for completion that you can use as reference: https://github.com/Microsoft/vscode-go/blob/0.6.78/test/go.test.ts#L747\nYou can add another test file to https://github.com/Microsoft/vscode-go/tree/0.6.78/test/fixtures/completions for your case and test it\n\nAny pointers would be greatly appreciated to explore opening an pull request for this feature.\n\nWhen splitting text, keep in mind that there can be multiple spaces before the first word and between subsequent words. This feature is now out in the latest update to the Go extension (0.6.81). Thanks for the fix @Emreu !. Duplicate of #969\nThe latest Insiders has the fix. Can you give that a try?. Thanks for reporting @jeffcharles.\nDoes debugging work for you when stopOnEntry is set to false?\n@roblourens stopOnEntry is set to true here, would this be a duplicate of what you logged in #763 ?\n. @jeffcharles Can you share the callstack for the error \"TypeError: Cannot read property 'stopOnEntry' of undefined\" ?. @shayzu If you are not getting the error \"TypeError: Cannot read property 'stopOnEntry' of undefined\" then this is the wrong thread. You can open a new issue.\nFrom your description, I understand that you are trying remote debugging and that you have also tried delve from the command line. What I don't understand is what the problem is.\n. @jeffcharles Closing this issue as we havent heard back from you.\nIf you still see problems with debugging, please log a new issue. Thanks for reporting @mariusgrigaitis \nAnd @f0zi, Thanks for the quick turnaround.\n@roblourens The PR looks good to me, but since you tested @f0zi 's previous related changes, can you take a look as well?. The fix is now available in the latest update (0.6.62). Thanks for reporting @yoskeoka \nAnd thanks for the sample code as well, I can repro this.\n@roblourens Can this be done?. If anyone wants to take a stab at this, the place to get started is the variablesRequest method in the goDebug.ts file. For setup, please see the simple instructions in the README for debugging\n. Nested content is now shown in the latest update (0.9.0) to the Go extension.\nHuge thanks to @jhendrixMSFT who made this happen!. Related to #986\n@josh-tepper Are you able to debug using the command line without any issues?\n@derekparker Would you say delve 1.0.0-rc.1 is stable enough for editors to use? If not, then I can add a note in the README that we don't support delve 1.0.0-rc.1 yet. Any idea as to why delve fails to launch process in this scenario.\ncc @roblourens . Closing as duplicate of #986 \n@josh-tepper Please follow the workaround here: https://github.com/Microsoft/vscode-go/issues/986#issuecomment-304347853. @daenney I'd prefer to get a fix for this from gometalinter itself.\nMaybe a flag --removeDuplicates that would return only unique errors.\n@alecthomas thoughts?. This issue was moved to alecthomas/gometalinter#286. Note: Try the --aggregate flag and see if it can be added as a default . @bradleyfalzon Skipping linting when there are build errors is tracked in #600 \nRegardless of this, it is still useful to use --aggregate on gometalinter. @bradleyfalzon I didn't notice any rudeness at all :)\n@daenney Thanks for the detailed analysis. Note that the Go extension already uses go build -i on non main packages. Does that change your stand?\nIncluding @atombender for his thoughts in this discussion as he originally opened #600\nInstead of serializing the build and linting process, another approach for #600 can be to not show linting results if there are build errors to begin with. And to control this with a setting. Serializing can result in delayed linting results in bigger projects.\n. > What's the reason for not running with -i by default\nFor go build -i part follow the discussion in #673\nFor why we don't do that for \"main\" package, see https://github.com/Microsoft/vscode-go/issues/673#issuecomment-272039570 specifically.\n@mattetti The docs for go build -i says \"The -i flag installs the packages that are dependencies of the target\". As in only the dependencies are installed (if changed), in which case, do we still have to skip the -i for the main package?\n\nMy reason for opening up this ticket is that I wanted a way to try and deduplicate the linter errors. I think --aggregate gets us a long way there.\n\nOh definitely, for the purpose of this ticket using --aggregate solves the problem, and I can add that as a default while running gometalinter.\nI personally don't do a lot of Go coding, so when there is an opportunity like this to discuss and understand the process more, I don't let go of that :)\n\nI understand the reasoning behind \"don't run linters if it doesn't compile\" but I don't think that's a workflow that should be enforced\n\nYes, when I do get around to working on #600, it would be via a setting and not enforced by default.\n. The docs: \n\nSo the executable for a \"main\" pkg gets created no matter what. Using -o (which we do), puts\nthe executable created in the temp path.\nThis means that we can use -i on the main package as well. In the latest update (0.6.62), --aggregate is used for gometalinter. There is nothing I know of that you (as a user) can do at the moment to reduce the triggering of build/lint/vet on multiple files when Save All is used.\nWe should see if there is a way to identify a Save All event vs Save event in which case the extension can be smarter and trigger build/lint/vet on a package only once even if multiple files in the package was saved.. gometalinter cannot run on a file as far as i know. It needs to run on a directory/package.\nWe don't run it on the whole repo, we run it on the parent directory of the file that was saved.\nIf linting does get expensive, then a better solution would be to not run lint on save, but rather run it after a delay. . @roylee17  Do you mean the settings when you say configs? . @roylee17 Not at the moment, but I am sure there is an issue tracking that as well. I'll try and find it and link it here. @roylee17 In the latest update to the Go extension (0.6.69), you can manually run the linter on your code using the commands Go: Lint Current Package and Go: Lint Workspace. You can use these commands and disable the lint on save feature if you want.\n@atombender That would require me to also check if default set of linters havent been tinkered with using the go.lintFlags. Instead I would leave it up to the user to disable vet on save feature when using gometalinter. Good point, PRs are welcome.. @Southclaws At the moment, we cancel the current running linter process before starting a new one, but we dont wait for the process to be killed, before starting a new one. You can see this in https://github.com/Microsoft/vscode-go/blob/0.6.84/src/goLint.ts#L45 and https://github.com/Microsoft/vscode-go/blob/0.6.84/src/util.ts#L585\nYou can find instructions to run the extension from source at https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code#building-and-debugging-the-extension\nIf you can figure out why the current process of killing existing processes doesnt help you, then that would be helpful.. Can you try setting go.useDiffForFormatting to false and try again ?\nWe use the -d diff flag while running the formatting tool to get the diff output and then apply the diff on the editor. The -d option doesn't worker some users. We aren't sure why.. How about setting go.formatTool to goreturns or goimports?. Can you start VS Code from the main terminal where the go command works using the command code and then see if you can use the go command in the integrated terminal?\nRunning the go command in the integrated terminal has nothing to do with the Go extension.\nIt is more likely that the integrated terminal doesn't have the same PATH as your external terminal and is not able to find go\nSee https://github.com/Microsoft/vscode-go/issues/708#issuecomment-271119503 as well. Glad that you are unblocked now, Happy Coding!. This tracked in #279. The Go extension runs build, lint and vet and none of these give the error you are expecting.\n@rakyll In the linked playground above, do you know what process needs to be run to get the expected error?. @liberalakrep Thanks for the clarification \nIn the first case, you get the error only when doing a go run and not a go build where as in the second case you get the error when doing a go build itself\nI believe this is a case of run time vs compile time error.\nThe VS Code Go extension uses go build, go vet and linters to provide users with errors and warnings. It doesn't try to run the code on save. Therefore, unless there is a Go tool out there that can give the \"panic: assignment to entry in nil map\" error, the Go extension cannot do much here.\nI suggest you open an issue for Go itself for surfacing this error while running go build.\n@rakyll @campoy Correct me if I am wrong above.. No problem, thanks for logging the issue though, I learn more with each such scenario :). @olivierperes Thanks for reporting.\nThere is already a bug for this: #999\nThe fix is in the main VS Code product and not the Go extension\nThe fix is available in the Insiders build and will be shipped in the next update of VS Code (1.13). Nice catch @dbcc \nWe use snippets with placeholders of the format ${placeholder}, but looks like in the insiders, the expected syntax for placeholders is ${tabstop:placeholder}\n@jrieken Can you confirm that ${placeholder} is no longer valid and that we need to use ${tabstop:placeholder} instead?. @RobGraham Welcome to Go in VS Code :)\n Setting go.useCodeSnippetsOnFunctionSuggest to true will insert the expected snippet on auto-complete. This is set to false by default.\nWhat @dbcc is saying above is that this feature is broken in Insiders and so will be broken in next update to VS Code as well which will be out some time this week or early next week.\nThe fix is simple, am just waiting for a confirmation from @jrieken . @jrieken As part of #709 we did move away from the internal syntax of {{...}}, but I guess I missed the tabstop, will fix it. thanks!\n@RobGraham no problem at all, happy to help. The fix is now available in the latest update (0.6.62). @highskillzz Can you include a gif/video/screenshot of the issue?. @highskillzz Silly question.... Is that Go?. @highskillzz In your example, require is not a function. If it is a function then the docs would say func ..., in your case it is a variable and so you see var require: NodeRequire.. What does it show next to the suggestion in the docs? Does it indicate \"func\" like this:\n\nAnd where have you set go.useCodeSnippetsOnFunctionSuggest?\nWorkspace settings override user settings\n. What does it show next to the suggestion in the docs? Does it indicate \"func\" like this:\n\nAnd where have you set go.useCodeSnippetsOnFunctionSuggest?\nWorkspace settings override user settings\n. @highskillzz The code you are sharing is definitely not Go. Its typescript. Try setting typescript.useCodeSnippetsOnMethodSuggest to true. We do need a flag to control current package vs whole workspace.\nIn #830 we talked about a setting go.multiPackage, but thinking more on this, something like the below would be better instead of adding another setting.\n\"go.buildOnSave\": {\n          \"type\":\"string\",\n          \"enum\": [            \n            \"currentPackage\",\n            \"currentWorkspace\"\n          ],\n          \"default\": \"currentPackage\",\n          \"description\": \"Run 'go build'/'go test -c' on save on either the current package or the current workspace.\"\n        }\nWith this, people who have set go.buildOnSave to true or false beforehand, will get a linting error\n\nIn the code, we can continue to honor either of true, false as well as the new values so that we are backward compatible.\n. How about off ?. @inancgumus Do you have the language server turned on?. We have 3 different ways of providing the definition information\n\ngo.docsTool is set to godoc (default)\ngo.docsTool is set to gogetdoc\ngo.useLanguageServeris set totrue`\n\nI was trying to see which one of the above categories does your scenario fall into.\nI can repro this issue in the second and third case but not the first.\ncc @zmb3 for gogetdoc and @slimsag for the language server. @zmb3 its godef that gives the definition info\nWhen I added the setting to choose between default implementation (godef + godoc) and gogetdoc, I couldnt come up with a better name than go.docsTool and since it says \"docstool\", the options were godoc and gogetdoc :)\n. Logged an issue for gogetdoc and the language server and closing this issue. Re-opening to absorb the changes done in gogetdoc. I am yet to release an update (should be out in the next few days).\nYou will see the changes then.. go.buildTags will now be honored when using the Go to definition feature in the latest update (0.6.63) to the Go extension. That's good to know @AlekSi , thanks!\n@rakyll @campoy thoughts?. @fatih @zmb3 Do you support Go 1.5 for vim-go and go-plus respectively?. @fatih its not just guru. golint has dropped support for Go 1.5 as well.\n@zmb3 Yes, deleting code does bring a ton of joy :)\nI'll go with the warning solution. Thanks all\n. With #2319 we have not stopped guarding against versions older than 1.9. Are you able to use delve from the command line?. Ok, then its a problem with delve itself. Or some combination of your environment and delve.\nPlease open an issue in https://github.com/derekparker/delve\nThey should be able to help you better. @xoviat Have you tried the args field in the debug configuration?. Can you share sample code as well so that I can try and repro?. I used your code + a print statement and your debug config\nAs you can see the args get printed in the debug console.\n\n. You are passing the args to the \"Launch file\" config, but looking at your screenshot you seem to be using the \"Launch\" config.\nCan you either try adding the args to the \"Launch\" config or choose \"Launch file\" in the drop down?. No problem at all \ud83d\ude0a Happy Coding!. Fair point. The fix is now out in the latest update (0.6.63) to the Go extension. This issue is being tracked here: https://github.com/sourcegraph/go-langserver/issues/178\nPlease add your input there.\nUntil the issue gets fixed, the workaround is to disable the language server. In both the cases, the issue is with delve.\nAm sure if you run delve from command line for both cases, you will see similar results.\nIf so, please log this issue in repo for delve: http://github.com/derekparker/delve\nIf delve from command line works, then please re-open this issue. Thanks @bidrohi . Alright people, although this is a very serious (cough cough) issue, am going to close this one.\nIf anyone can come up with a better (read friendly) icon, feel free to update the icon in https://github.com/jesseweed/seti-ui. @AlekSi No idea\nAFAIK We use the icons from https://github.com/jesseweed/seti-ui.\ncc @bpasero . @dstpierre @andreis Sorry didn't get to this earlier, it somehow got lost in the sea of notifications and I was on vacation all last week.\nHere are a few thoughts\n\nOn using gometalinter, try using the lint flags to disable all linters and then enable the ones that most interest you. Eg: ['--disable-all', '--enable=varcheck', '--enable=errcheck'] Or use the -fast flag that will run only the fast linters\nOn the multi-package note: In the last update to Go extension, we started supporting build/lint/vet on workspace as well. This is done by the settings buildOnSave, vetOnSave and lintOnSave now accepting values package, workspace and off. Can you try setting these to package and see if you still see perf issues when working on multi packages?\n\nOn the perf side\n\nUpgrading to 1.13 shouldn't have had any affect on the auto complete perf for Go\nCan you disable all other extensions and see if you still have the issue? We have seen sometimes that some other extensions interfere and cause perf issues\nHave you recently upgraded Go version or recently upgraded to Sierra? We have seen perf issues in both cases. Updating and rebuilding the Go tools have helped users in this case. Can you update all the Go tools regardless by running Go: Install/Update tools to ensure you have the latest tools rebuilt\n\nIf the issue still persists, the next thing I'd like to try is to use an older version of the Go extension. This is to see if something we shipped last time is causing trouble.\n\ndownload the vsix file for Go 0.6.61 from https://github.com/Microsoft/vscode-go/releases/tag/0.6.61\nClose all VS Code instances\nrun code --install-extension and pass the path to the downloaded vsix file.\nopen VS Code and see if you still see issues.\n. @dstpierre @andreis Any updates? Do you still have perf issues?. Thanks @andreis \n\n@dstpierre ?. @alexbrand Do you have the references codelens enabled? It uses guru and gets updated for every file change. And so gets expensive on bigger code bases\n. @xpqz Can you try setting go.gocodeAutoBuild to false and see if that helps?\nIs it only the gocode processes or do you see a lot of other go tools taking up CPU?. In the November release of 0.6.69 we pushed some perf improvements that should help.\nLocking and closing this issue for now as there hasn't been any activity here.\nIf anybody does see any perf issue, please log a new issue. Do you have to restart every single time for the errors to disappear?. @FryDay @boljen The errors clear up when there is a save on the current file. Can you please check that the errors do not go away even after fixing the issues and saving the file?\nCan you share a gif/video of the same? I cannot repro. Also, what is the value of go.lintOnSave in your settings?. On every save, the diagnostics are cleared and calculated again, so I am stumped as to how this is happening.\nIf you can get a consistent repro, please do share.\nClosing this issue until then. @posito can u share a screenshot or GIF or video of the issue?. I still can't repro this.\n@FryDay Can you go to the output pane, select \"Go\" from drop down, try to repro this and share the output? The build, lint and vet processes are run on save and the output is dumped here. . That output shows no errors/warnings. This is the same output that gets used by the Problems view.\nSo am not sure where the problem is.\nIf you can repro this consistently, can you share a video/gif of the issue and the affect of turning coverOnSave off has on it?. @FryDay @posito \nThere is one reason why the cover on save feature can affect the problems view.\nThe build/lint/vet/cover on save operations are triggered at the same time. And only after all are complete, the results get updated. In your cases I believe, the running of the coverage might be taking a long time, thus delaying the update of the build/lint/vet results.\nI have decoupled the coverage part from build/lint/vet process. Can you re-try after installing the extension from https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix and setting go.coverOnSave back to true?. @posito Can you share more details? Screenshot of the error? Error message? When do you see the error? Are you using the Go-latest.vsix?. I believe the latest version of the Go extension (0.6.64) has the fix for this issue\nSince I havent heard back from anyone here in a while, I am assuming that the fix works.\nIf it doesnt, please re-open this issue. That sounds like some other extension is interfering with the save action. We have seen this before.\nWhat extensions do you have? Can you try disabling all extensions, then enable just the Go extension and see if this still persists?\n\n. When you say 2 file writes do you mean the file state indicator next to file name goes from dirty - save - dirty - save?\nThe line you are pointing at would only cause dirty - save - save. I did try passing the file contents via stdin to the formatting tool once before, it caused a bug. I can't remember more on that. Am on vacation right now and so don't have access to my mac. Will check this once I get back.\nUntil then if you can, feel free to send a PR to use stdin. @wader I don't remember. Will have to look at the history of the goformat.ts file.\nAbout onWillSaveTextDocument..\nThe catch here is that if formatting takes more than 750ms (am picking a number here, need to look at the code to get the actual number), then the action is cancelled.\nI still haven't come up with a good solution for that. There us another issue tracking it. (will link it once am back from vacation and have something better than my phone to work on)\nFor now, go ahead and remove the save and pass file contents using stain and send a PR. Yes, thats the revert commit.\nSee https://github.com/Microsoft/vscode-go/pull/1069#issuecomment-313889880 for my thoughts on the usage of \"onWillSaveTextDocument\" and \"stdin\"\nAlso the reason for the double save is not due to https://github.com/Microsoft/vscode-go/blob/bca4dd5f31f32ac49da79580c07b4000f06287a3/src/goFormat.ts#L69. That line is only reached when you explicity run the \"Format Document\" command.\nThe actual reason for the second save is https://github.com/Microsoft/vscode-go/blob/bca4dd5f31f32ac49da79580c07b4000f06287a3/src/goMain.ts#L308\n. Closing in favor of #540 which will fix this issue as well\n@wader Lets use #540 or #1069 for further discussions on this subject. With the work in #540 completed, the latest update to the Go extension (0.6.70) has the fix for this issue. There won't be any re-saving of files on formatting. Can you try setting go.docsTool to gogetdoc? The default tool for docs doesnt work well with structs. We do support gogetdoc officially, just not by default.\n1025 is tracking the task to make it the default tool. @kyoh86 We use the grammar for Go from https://github.com/atom/language-go\nPlease log an issue in that repo for your issue with scope names. Agreed. We can have commands to run lint/vet/build. One thing to think about is whether these will act on current file/ current package or the whole workspace. Do we have 3 separate lint commands for the 3 scenarios? Or 1 lint command and a setting to control the scope? Or re-use the scope from buildOnSave/lintOnSave settings.\nOther than that this is a very simple feature to implement. PRs welcome\nI am sure there was another issue for this, if anyone finds it, please link it here. This feature is now out in the latest update to the Go extension (0.6.69)\nThe commands Go: Lint Current Package , Go: Lint Workspace, Go: Vet Current Package , Go: Vet Workspace are now available.\nThanks @ndrewnee!\n. That's how godef returns the information. So I'd suggest to log the issue in the repo for the godef tool.\nHowever, we have 2 other options for showing the hover info\n- Set go.docsTool to gogetdoc. \nOR\n- Set go.useLanguageServer to true\nBoth options gives the right hover info. Indentation rules are updated in the core VS Code with https://github.com/Microsoft/vscode/commit/e6c60418fd865c65b114211f4148c1268277b217\nand in the Go extension with https://github.com/Microsoft/vscode-go/commit/bd9556143bcf214db8c10a19d5cec5e9882286af\nThe fix in the core will help users that don't use the Go extension.\nThe fix in the Go extension will help users that are on the next update (0.6.63) but not necessarily on the next VS Code update (1.15). For jumping to definition can you try setting go.docsTool to gogetdoc?\nWhat do you get when you do a \"Find All References\" on this type?. Can you share a complete sample code where I can try this?. Using your example, I am able to go to the definition of both foo and f1 in bar1\n\n. I used LICEcap for the gif. Its pretty easy\nYes, please share gif/video.. I can repro when using gogetdoc but not when I set go.docsTool to godoc (which uses godef to find the definition)\ncc @zmb3\n. @hhrutter you also mentioned that the codelens doesn't work. Can you elaborate on that as well? I see the references codelens on the structs\n. @zmb3 Make sure go.useLanguageServer is set to false. That overrides the go.docsTool setting. Awesome, thanks @zmb3!. @hhrutter just confirming.. When you say codelens do you mean the text you see when you hover on the field?. Ah! That got me confused. Codelens is the term used for something else entirely \ud83d\ude0a \nSee https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup. Ah! That got me confused. Codelens is the term used for something else entirely \ud83d\ude0a \nSee https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup. Hover info or tooltip. Correct . The getsocopt error you are seeing is tracked in #986. I am guessing you are on Mac OS?\nPlease follow the workaround here: https://github.com/Microsoft/vscode-go/issues/986#issuecomment-304347853\nThe \"debug test\" link doesnt need any launch.config to run. It creates a debug configuration based on test function name and starts the debug session.\nYou need the launch.config if you intend to start debugging using F5 or via the debug pane. Thanks @vsobotka . I am little busy at work, and may not be able to get to this any time soon, but this is a very useful feature to have.\nPRs are welcome.\nI can help out pointing people in the right direction if needed. There are 2 ways that I can think of to do this\n\nHave a status bar item that shows the status \"Cancel Running Tests\" that shows up when tests take say more than 5 seconds. Clicking on the status bar item should cancel the test. \nAnother way is to use the integrated terminal to run the tests, maybe via tasks. That way the user can just hit Ctrl+C to cancel the process as everything in the terminal is interactive\n. There already is a status bar that appears when the tests are run on save. Clicking on it shows the test output.\n\nLook at the goCheck.ts file. . This feature is out in the latest update to the Go extension (0.6.82) thanks to @tylerb!. Here is my example, and I don't see any build errors. Can you share some code where you can repro this? \n\n. No problem, Happy Coding!. Thanks for reporting @rpeshkov!\nThis should be an easy regex fix in https://github.com/Microsoft/vscode-go/blob/master/src/goTest.ts#L298\nPRs welcome. Closing as this is fixed with #1055\nThe fix will be out in the next update in the next few days. The fix is now out in the latest update (0.6.63) to the Go extension. @Paulche Done and Thanks!. @mcardosos Please share your usage and the errors you see. A screenshot will greatly help. Works for me in Mac\n\nBased on the error flag provided but not defined: -check, looks like instead of check.f only check got passed to the command\n@Tyriar Could this be related to the kind of shell used by the integrated terminal?. Tested in Windows and I can repro.\nThe integrated terminal in Windows uses powershell.exe which has this issue.\nRunning this command in the external powershell.exe gives the same error.\nProblem seems to be with powershell in that it does not pass the .f part of the check.f \nChange to cmd.exe and it works fine (You can just type cmd and then ENTER to change current integrated terminal to use cmd.exe or run the command Terminal: Select default Shell). Sorry, it took so long to respond.\nCan you set \"trace\": \"verbose\" in the debug config and see if you get any logs in the debug console?. Not even the initial lines about writing to a file?\n\nHave you been able to debug successfully before? Or never got it to work in your current environment? What I am trying to get at is if this is a regression due to a recent update or an environment issue.\ncc @roblourens . >  go extension points to ./out/src/debugAdapter/goDebug.js, which afaict doesn't exist\nThat's a new one :)\nNo wonder the debug adapter couldn't start coz it didn't exist \ud83d\ude06 \nGlad you are unblocked now. Happy Coding!. What you have in your screenshot is the suggestion widget/ autocompletion widget\nWe have another widget for parameter hints which will start showing up as you start typing inside the parentheses. Or if you click Ctrl+Shift+Space inside the parentheses. \nCan you try that?. I get the below\n\n. Not at all, this should work out of the box.\nIf Go to Definition and quick info on hover works, the Signature/Parameter help should also work\nThey all share the same code.\nCan you try on a simple piece of code?\nAre you using the language server?. @AndersenTobias Haven't heard back from you in a while. Closing this issue for now.\nIf you still have issues with the parameter hints, feel free to re-open this issue. Please read GOPATH-in-the-VS-Code-Go-extension. That should help.\nIf that still doesn't help, I'll re-open this issue. What do you see when you do the below?\n\nRun the command Go: Current GOPATH\nOpen the integrated terminal (Ctrl+) and typeecho $GOPATH`\n\n. Thanks @rpeshkov !. Adding the import to the start of the import list enables goimports/goreturns to group/sort the imports properly.\nFixed with https://github.com/Microsoft/vscode-go/commit/21ef73390526ba004679cc392ecd4a88e3b3602b\nThanks for reporting!\n. The fix is now out in the latest update (0.6.63) to the Go extension\n. Can you run the command Go: Current GOPATH and tell me if what you see there is the same GOPATH that you have set in launch.json?. What error do you see? Is it about dlv not being found? \n. The error trace would have a line for $GOROOT and another for $GOPATH\nWhich of the 2 is wrong?. $HOME/go/src looks like the default GOPATH in Go 1.8\nAnd the GOPATH you get when running the Go: Current GOPATH is different?\n@goenning This feels like it is related to \nhttps://github.com/Microsoft/vscode-go/pull/971/files/3ac188357a53c44822129925a91ddfa64f65284b#diff-ce8c83cf87f491c0ab381e163db9daf4\nCan you take a look?\nI am leaving for a week long vacation without access to my Mac and so won't be able to get to the bottom of this\n@beforeisleep Thanks for your patience. The fix is now out in the latest update (0.6.63) to the Go extension\nThanks @goenning !. @bsr203 The GOPATH from the go.gopath setting is used by the run test codelens. You shouldn't have to add it again via the go.testEnvVars setting.\nIn you second case above where you set GOPATH in the terminal and then open code, does the run test codelens work as expected? In that case do you still use the same settings?. Why not use the setting go.buildTags for the build tags?. great, Happy Coding!. gocode needs a rebuild after updating Go version.\nJust to be on the safe side, you can run Go: Install/Update Tools which will update all the Go tools that the Go extension depends on \nWe have #797 to track automatic updating of the said tools.\nI have a plan in mind for this. Will look into it for the next update of the Go extension.\nNow that Go 1.9 beta is out, I am guessing many more people would see this issue.. thanks for the update @atilkan and Happy Coding!. @alexandrevez You might not have GOPATH set. Can you run the command Go: Current GOPATH and see what is the result?\nSee https://stackoverflow.com/questions/31664129/executing-go-tests-underscore-in-place-of-correct-path . Also there is a linting issue that is breaking the build. Thanks @alexandrevez !. You too and Happy Coding!. Hey @alexandrevez \nWhat's your twitter handle? I want to thank you in https://twitter.com/mbanzon/status/891046317111345153 . People are loving this feature, thanks to you!. I don't know of any other way other than looping through every sub directory and calling go build on the ones that are not vendor.\n. Fixed with #1074. The fix is out in the latest update (0.6.63) to the Go extension. Do you have autosave as well as formatOnSave on?\nDo you see this happening on all your Go projects regardless of size?. Did you recently upgrade to Sierra?\nWe have seen perf issues when users upgraded to Sierra. They had to update/rebuild all the dependent Go tools.\nCan you run Go: Install/Update tools to update your Go tools and try again?. @orcaman Do you see any errors in the console? From the Help menu select Toggle Devleoper Tools and  then click on Console\nLike @chaseadamsio mentioned, does this happen only when there is an error in the code?\nCan you try on a smaller simple project and see if you see the same issue?. Closing this issue as most of the folks here have gotten the issue resolved. If anyone else sees formatting taking too much CPU, please log a new issue. Hey @JeanMertz\nSorry, didn't get to this earlier. Am on vacation at the moment.\nNot sure why gocode would start acting up like that. The readme in its repo should help.\nSometimes even closing gocode and reloading VSCode helps. Closing this issue as autocomplete works for you now. That shouldn't happen. Am on vacation right now without access to my mac.\nWill look into it next week.\nThe extension is pretty easy to debug if you want to give it a try before then. Oops didn't mean to close the issue . @coxx I am able to repro the case where one might get the message The Go extension is better with the latest version of \"go-outline\". Use \"go get -u -v github.com/ramya-rao-a/go-outline\" to update\nThis is because one might have an older version of go-outline and extension suggests to update to the newer version.\nBut am not able to repro your case where you get the error The \"go-outline\" command is not available. Use \"go get -v github.com/ramya-rao-a/go-outline\" to install\nDoes this happen only with the go-outline tool and not any of the others?\nDo you see this error when you run the Go to Symbol in File.. or Go: Add Import commands?\nThese are the only 2 commands that use the go-outline tool.\nThe way the extension tries to find the Go tools is\n- Search in the bin folder under go.toolsGopath setting\n- If not found, Search in the bin folder under whatever is the GOPATH you see when you run Go: Current GOPATH command\n- If not found, Search in the folders specified in the PATH env var\n- If not found, Search in the bin folder under the GOROOT\nCan you open your dev console (Run Developer: Toggle Developer Tools) and see what is the value of process['env']['PATH'] is what you'd expect. i.e it contains the folder that contains go-outline?. I want to repro that.\n\nI did a go get -u github.com/lukehoban/go-outline which is the older go-outline and doesn't support the -modified flag.\nReload VS Code\nUsed the Go to Symbol in File feature that uses go-outline under the hood\nI get the message The Go extension is better with the latest version of \"go-outline\". Use \"go get -u -v github.com/ramya-rao-a/go-outline\" to update\n\nBut I don't get what you saw i.e \"The \"go-outline\" command is not available. Use \"go get -v github.com/ramya-rao-a/go-outline\" to install\"\nCan you share your repro steps?. We do have a separate setting called testFlags which gets used when running tests via the test commands\nDo you have buildOnSave set to \"workspace\"? That runs go test ./... (but does not actually run the test) using the buildflags. That's causing the problem. Couldn't find any other way to build all files (including test files) in the workspace \nFrom the past couple of releases we have been setting -i by default while building\nSo you can skip passing it via buildflags to fix the issue you are seeing\nAm on a vacation right now. Once am back, will fix the usage of flags so that the double use issue wont occur again. The fix to ignore the -i flag from go.buildFlags (because we add it internally anyway) is out in the latest update (0.6.63) of the Go extension. am back from vacation and straight to PRs\nThanks for the fix @goenning!. Try \"gocode close\" and then update gocode using \"go get -u github.com/nsf/gocode\". Can you try setting \"go.docsTool\" to \"gogetdoc\"? . The Go extension uses different set of tools for different features. \nThe autocomplete is backed by the gocode tool.\nThe missing argument must be coming from running \"go build\"\nThe Go to Definition, hover info and signature/parameter help features are backed by the godef and godoc tools unless you have set go.docsTool to gogetdoc.\nAm glad you are unblocked now. But am curious why gogetdoc didn't work for you for the Go to Definition feature.\n. I am on vacation right now so don't have access to my mac.\n@zmb3 can you take a look at why gogetdoc wouldn't have worked in the above scenario?. @embano1 Another thing to try is to run both godef and gogetdoc from the command line for the same file and offset and see if they give different results. I think the reason is that Shutdown needs pointer\nIn the below example, first one doesn't work but the second one does\n\n. Closing this issue\n\nthe autocomplete issue got fixed with updating the gocode tool\nthe Go To Definition not working when using gogetdoc according to me is valid as the ShutDown method is defined on the pointer. When using the pointer, this works as shown in https://github.com/Microsoft/vscode-go/issues/1066#issuecomment-313903326. No problem, Happy Coding!. Have you created debug configuration in the launch.json file?\n\nOne of the fields in the debug configuration is \"args\" which you can use to pass the arguments . I am able to get coverage and the problems go away after fixing as well\n\nCan you share your settings?. @wader \nThanks for the PR. Am back from the vacation and had some time to dig around my previous work with both using onWillSaveTextDocument and stdin\nOn the usage of onWillSaveTextDocument:\nTelemetry shows that about 1/5th of the Go extension users have had formatting times > 1.5 secs.\nIf we make this switch, then formatting would stop working for such users. This was the reason that I hadn't made the change to use onWillSaveTextDocument myself when this API was released.\nEither, the users have to live with that or we need to be able to provide a fallback\nI'll look into what options we have.\nOn the usage of stdin:\nThe last time I did this, there were 2 bugs that surfaced due to which I had to revert the change\n- #613 Format removes imports of vendored packages in use\n- #630 goreturns fails to consider global variables in package\nI believe these will occur again with your changes as well?\n. > I noticed one thing while reading the code. In isDiffToolAvailable it checks if the diff binary is in PATH but while reading the jsdiff code can't see that it is actually used.\nWe use isDiffToolAvailable to decide whether or not to send the -d flag to the formatting tool.  . Also once you have the stdin approach working, we don't really need to use the onWillSaveTextDocument directly. We can deprecate go.formatOnSave and rely on editor.formatOnSave (which internally uses the onWillSaveTextDocument event) instead.. Closing this in favor of https://github.com/Microsoft/vscode-go/commit/e95eed681077442a42979f91402d642118798daf. Does it happen when you have go.formatOnSave set to false?. No worries, I'll close it.. This issue was moved to atom/language-go#130. Suggestions in single line comments are not shown due to this https://github.com/Microsoft/vscode-go/blob/cf6a40d3b929f1d1fa4b247f044349f25c45aeec/src/goSuggest.ts#L59\nWe could use regex to figure out if the cursor is inside a multi line comment and skip calling gocode for suggestions as well. \nPRs are welcome. @tohjustin Yes, it is still available, but I am concerned about the idea of using go-outline everytime we need a completion.\nWe have seen the Outline view feature in the explorer call go-outline for every change in the file and it affects the performance in some code bases.\n@stamblerre Is gocode aware of whether or not the given position is inside comments or not? If it is aware, then I'd rather pass another flag to gocode to exclude completions inside comments\n. Thanks @stamblerre!\nI have logged https://github.com/mdempsky/gocode/issues/87 for tracking purposes.\n@tohjustin I'll be closing this issue as it would certainly be better to get this feature from gocode.\nFeel free to pick up any other issue here. . To get this fix, please run Go: Install/Update Tools, select gocode and press Ok to update gocode\nThanks @tohjustin & @stamblerre!. Thanks for catching this @seanpfeifer!\nFixed and also added a unit test so that the tests can catch it if broken again.\nFix will be out in the next update. The fix is now out in the latest update (0.6.63) to the Go extension. @vapourismo Since you worked on #1023, can you take a look at this PR? You might find something I missed.. This works for me...\nWhen you are trying this, is there any other instance of VS Code open?\nIf yes, then the process running new VS Code window will have env vars from the already opened window. Can you open the console (Run Developer: Toggle Developer Tools) and check the value of process['env']['GOPATH'] ?\nAlso, do you have any of go.toolsGopath or go.gopath set?. @Tyriar would you know why the env vars from .zshrc gets used instead of the one that is set in the terminal from where code is bing launched?. Fixed with https://github.com/Microsoft/vscode-go/commit/1ec6d7cfd4c4846e77739ce83eae5ed0482a7425\nThe first one is the right one\nThanks for reporting and Happy Coding!. Fixed.\nI love it that you are trying to side load the vsix from master\nDo you mind helping me out with testing a few features?\nAm planning to release an update tomorrow and would really appreciate an extra set of eyes :). What step are you referring to?. got it. Happy coding!. @roblourens Can you take a look?\n. @shayzu Looking at the logs you shared there are errors in creating breakpoints. None of the breakpoints got successfully created.\nThere are also attempts to create the breakpoint on \n\n\"/Users/.../Library/Application Support/Code/User/ftp-simple/remote-temp/e980fc53b7a02df50c6915eefaf38746/home/oracle/go/src/oracle_db/oracle_db.go\"\n/Users/.../go/src/flow/flow.go (/home/oracle/go/src/hello/hello.go)\n/Users/.../go/src/hello/hello.go (/home/oracle/go/src/flow/flow.go)\n\nWhat is the program/package that you are trying to debug?\nIs it flow, hello, oracle_db under /Users/.../go/src/ or oracle_db under /Users/.../Library/Application Support/Code/User/ftp-simple/remote-temp/...\nYou have set up the remotePath as /home/oracle/go/src/oracle_db. The corresponding local path should have been /Users/.../go/src/oracle_db\n. @shayzu My apologies for not getting back to you on this issue all this time.\nOver the past year, we have had many improvements to the debugging side of things in this extension.\nHopefully, some of them resulted in your problem being resolved. \nSince this issue has gotten quite old and there are not any repro steps I can use, I will be closing this issue.\nIf you still see problems with remote debugging, please log a new issue with logs and we will look into it.\nHappy Coding!. Try https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case\n. The Go extension only prints out the links to the output pane.\nThe links are implemented by core VS Code\n. This issue was moved to Microsoft/vscode#30355. This might depend on #840\nusually we would have solved this by using vscode.workspace.rootPath\nwhich is not available inside the debug adapter.\nNeeds more digging, will get back to this in august. @JeffreyRichter I believe this feature got added from VS Code core itself somewhere along the line.\nI just tried it with \n```\npackage main\nimport (\n    \"fmt\"\n    \"os\"\n)\nfunc main() {\n    fmt.Println(os.Getenv(\"GOPATH\"))\n}\n```\nand the launch.json\n```\n{\n\"version\": \"0.2.0\",\n    \"configurations\": [\n               {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {\n                \"GOPATH\": \"${workspaceRoot}\"\n            }\n        }\n    ]\n}\n. Ah that's my mistake, I removed the workarounds https://github.com/Microsoft/vscode-go/commit/1adae1f5ca29cab14655e2f5537b75f2084c9d4a thinking I was pulling in the version of the diff module (3.2.0) that had the fix.\nTurns out its 3.3.0 version that has the fix.\nThe next update to the Go extension will have the fix.. The fix is out in the latest update (0.6.63) to the Go extension. You must be having a debug configuration in your launch.json file where the program attribute is pointing to a directory.\nChange that to ${file} or the path to the file you want to run and you shouldn't see this issue.\n\"Start without debugging\" attempts to run go run on whatever is provided in the program attribute. As you know go run only takes file names. Which is why the above workaround works.\nNow, if the program attribute points to a directory instead, the extension should fall back to debug mode which it clearly didn't and this is a bug.\nAm currently out at a conference, will look into the bug in fallback once I get back.\nUntil then please use the workaround mentioned above.\nThanks for reporting!\n. Until I get back, if anyone wants to take a look at this issue, then read https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/Readme.md first.\nMy guess is that the IntiializeEvent is never sent back from the launchRequest due to https://github.com/Microsoft/vscode-go/blob/0.6.62/src/debugAdapter/goDebug.ts#L447. This fix for this issue is now out in the latest update (0.6.63) to the Go extension. @lansman Can you share your debug configuration?. Ah! sorry @lansman. I only saw the repro steps of @realityexists and fixed the issue pertaining there.\nYour issue is more about running programs that are interactive.\n@roblourens When something is typed in the debug console after running Start without debugging, the evaluateRequest gets fired. Is that a bug? If not, then we can look into routing what was typed in the debug console to the process that was run using go run at https://github.com/Microsoft/vscode-go/blob/0.6.63/src/debugAdapter/goDebug.ts#L234. @sparrc The Go extension itself doesn't get the hover info. We use go tools for this. The options you have is to use godef, gogedoc or the  go language server\nNone of the options give the package information.\nI suggest you log a feature request in any or all of these repos \n. @zmb3 Sweet.\nRe-opening the issue to absorb changes from gogetdoc.\nPRs welcome :). Yes, looks like whats requested in this issue is already being shown when using gogetdoc.\nThanks @doxxx!. Yes, you can set the build tags in the setting go.buildTags which then gets used by the extension to when building and testing the files. No problem, Happy Coding!. Thanks for the update @markphelps and @hjma29 \nGlad both of your issues go resolved.\nHappy Coding!\n. You can control which commands are showed in the context menu by updating the go.editorContextMenuCommands setting.\nThis way you can get the run test in the menu but not the debug test\nThis is because run test at cursor is already a command and there is no command to debug test.\nThis is easily fixable and PRs are welcome.\n. the run/debug links are called codelens in general.\nIf you don't want to see them in any file that you work on you can set editor.codeLens to false\nIf you don't want to see them only in Go files, then set the individual codelens (test and references) in go.enableCodeLens to false. > Does Code Lens show up for Go files in any other context?\nYes, we have references codelens, but this is disabled by default as it tends to be slow on large projects\n\nHow do I run the debug-test command? \"Debug test\" in the command palette shows nothing\n\nThere is one command to start debugging using the currently selected debug configuration. But there is none for debugging the test function under a cursor.\nIt should be pretty straight forward to add it though.\nPRs are welcome :). You need to disable the editor.codeLens to see the \"test at cursor\"\nI remember adding the extra condition (See https://github.com/Microsoft/vscode-go/blob/0.6.62/package.json#L771) because it was redundant to have the context menu when the codeLens for test is present.\nFor disabling go codelens\n\"go.enableCodeLens\": {\n        \"references\": false,\n        \"runtest\": false\n    }\nFor Debug Test command\n\nRegister a new command \"Go: Debug Test at Cursor\"\nyou will need to add an entry in package.json\nand do the actual registering in goMain.ts\nCreate a new file goDebugTest.ts for your code\nRefer to goTest.ts to see how the Go: Test Function at cursor figures out the function under the cursor\nOnce you have the test function name you can call vscode.startDebug command using vscode.commands.executeCommand. Pass debug config as args like it is being done in https://github.com/Microsoft/vscode-go/blob/0.6.62/src/goRunTestCodelens.ts#L75\n. Refer to https://github.com/Microsoft/vscode-go/blob/0.6.62/src/goTest.ts#L59. you should be able to get the document from editor.document and get the editor from vscode.window.activeTextEditor\n\nI have a feeling we are talking about 2 different things\nCan you point me to your code in your repo where you feel you need the document and don't have it?. executeCommand is fine. That's how we programmatically run a command.\nSo where in there are you seeing the \" there's a \"document\" TextDocument used that isn't available in the testAtCursor context\" ?. it definitely should :) . Go: Debug function at Cursor is the command that implements this feature request in the latest update (0.9.0) to the Go extension.\nThanks @willfaught, @Ashiroq and @vladbarosan!. @ssadok There is no difference between the 2 screenshots for the launch.json\nI am not familiar with vagrant.\nCan you provide more information on it?\nCan you try using delve from the command line and see if you are able to hit the breakpoint?. @ssadok  Closing this issue as we havent heard back you with answers for the questions in https://github.com/Microsoft/vscode-go/issues/1089#issuecomment-326439708. @llife0915 Can you please explain what issue you are trying to fix and how?\nAlso, there are linting errors with your code. Run npm run lint and you should be able to see the errors in your machine. Thanks @llife0915 \n@roblourens Can you take a look?. @firelizzard18 \n\nCan you provide a simple program where I can try and repro this?\nCan you also try the same from the command line using delve so that we can eliminate the case that this is a delve problem?. Thanks @firelizzard18 \nLike you said, lets close it for now\n\nHappy Coding!. Do you mean formatting on save?\nIt works fine for me.\n\nDoes explicit formatting work? i.e Right-click inside the document and choose \"Format Document\"\nAny errors in the console? Run Developer: Toggle Developer Tools to open the console\nIs this a regression? i.e. did it work fine before and stopped with a recent update? If yes, then was the update to the extension or vs code or your OS or Go?\nDoes building and linting work as expected on save?\nCan you share your settings?. No problem @jakobhviid, thanks for looping back and updating the issue.\nAnd Happy Coding!. > It is almost as if nothing ever runs when saving.\n\nThe fact that you get the \"Finished running tool...\" in your output is proof that the save is triggering build, lint and vet successfully.\nTo confirm that, can you introduce an error in your go file, save and see if you get the red squiggles. If yes, then the save has triggered the build and you are seeing the results\n\nDeprecationWarning: os.tmpDir() is deprecated\n\nThat is unrelated\nCan you try setting go.useDiffForFormatting to false?\nWe have seen some cases where running the formatting tools using the -d flag doesn't work well for some users\n. > Do you what what the cause is for this?\nThat indeed is a mystery.\nWe logged an upstream issue https://github.com/sqs/goreturns/issues/28 but it got closed as environment issue.\nTry running goreturns with and without the -d flag on an unformatted file.\nYou will see that you get expected output in the former, but you won't get the diff in the latter.\nWhat OS are you on? goreturns tries to use the diff tool available on the PATH.\nSo maybe its an incompatibility issue between the diff tool and goreturns\nThere is nothing more we can do from the extension side though.\nSo closing this issue.\n. @DasJott More details would help in looking into the problem. Please provide\n\nA sample code or video or gif\nDoes it not work at all or only for functions from std library or third party code? Have you tried on structs or variables?\nValues for settings go.docsTool and go.useLanguageServer\nVersion of VS Code, the Go extension, and Go itself\nOS\n\nThe Go to definition works as expected for me.\n. I cant play either of your videos (the one you linked here and the one in your other issue on gocode)\nCan you upload a gif instead?\nCan you also try to set go.docsTool to gogetdoc and see if that makes a difference?. And when using godoc, Go to Definition works for say the fmt.Println?. Wow,\nok last thing I have to say is change go.docsTool to godoc, run Go: Install/Update tools so that all your tools are updated and rebuilt and try again.\nIf it still doesn't work then my suggestion is to use gogetdoc or you can also try out the new language server by setting go.useLanguageServer to true. @DasJott Do you still have this issue?. Thanks @DasJott . Basically you are saying that when you provide an alias for an imported package, you don't get suggestions for the functions in the package?\nI tried this and it works just fine for me.\nSuggestions are provided by the gocode tool.\nCan you close all VS Code windows, run gocode close, open VS Code and try again?. Do you get suggestions in other cases? Say for a local variable?\nWith VS Code open and you typing Go code, can you check if there is an process called \"gocode\" active in your machine?\nWe use https://github.com/nsf/gocode for giving completions in the Go extension.\nDid you try closing all VS Code windows, run gocode close, open VS Code and try again?. That clearly shows gocode is not working at all for you.\nCan you run gocode close and then go get -u github.com/nsf/gocode to update and rebuild the gocode instance you have?. I don't know much about arch to say if it needs anything special\nIs there any way to see currently running processes?\nIf there is, the open VS Code, start typing some gocode, you should see a gocode process running. @DasJott Do you still have this issue?. Thanks @DasJott . @sascha-andres, @fyndor \nSorry, this issue somehow got lost in the sea of notifications I currently have.\nDo you have any of the editor.formatOn... settings turned on?\n. @sascha-andres My question was around the format settings for the editor like editor.formatOnSave, editor.formatOnPaste, editor.formatOnType. Have you enabled any of these?. @sascha-andres Can you disable all other extensions you have and try again? There have been cases when operations from other extensions interfere with the save cycle and triggering edits -> save -> format again.. I have a repro after spending an hour on this. Finally!\nThe root cause is that formatOnSave feature uses the TextEditorEdit api to apply the formatting edits on the file.\nEdits made this way have this issue of ending up selecting part of the text that the cursor is on.\nI have logged an upstream bug for this in VS Code:\nhttps://github.com/Microsoft/vscode/issues/32058\nTo fix the issue from the Go extension's side, I have updated to use WorkspaceEdit api instead.\nThe fix will be out in the next update.\nThanks for logging the issue and being patient with me :)\n. The fix for this is now out in the latest update to the Go extension 0.6.64. There is no option to get rid of the keyword\nBut there is an option to make the snippet come first\nSet editor.snippetSuggestions to top. @didenko \nThanks for the detailed report.\nAbout the reported problem, looks like it is coming from either the linter or by running go vet. The Go extension displays the results from these tools and is not aware of the nature of the errors/warnings themselves. I can help in narrowing down which tool is giving the said warning, but beyond that you'd have to log the issue in the repo for the tool in question.\nAbout the debugger watch panel, can you provide a code sample and repro steps with details on the current and expected behavior?. The issue with the display of slices is upstream as well\nThe Go extension uses delve for debugging and displays what it gets from delve.\nAs you can see below delve returns the exact same thing both the times, and we display the same\n\nCan you log an issue for delve at https://github.com/derekparker/delve? \nClosing this issue as there is nothing we can do from the extension's side unfortunately.. No problem and Happy Coding!. > Progress/working indicator\nExtensions needn't worry about this. Once we implement the Implementation Provider, there would be a new context menu entry \"Go to implementation\" just like \"Go to definition\"\nIf the process takes long, VS Code will take care of showing the progress indicator, just like it does whenever I try to rename anything on my slow Windows machine :(\n\nAudit necessary library updates\n\nAre we talking about versions of guru that might not implement the \"implements\" command?. > Progress Indicator\nIt should appear as moving line of sorts on the top: above the place where you would usually see the info/error message box. Its very subtle\n\nvscode dependency/engine version updates t\n\nyou can keep it in the same PR. I haven't seen that before.\nnpm list is the command failing. Can you run that separately and see if you still see the same issue?\nwhat version of npm are you using? Try updating to the latest.\nhttps://github.com/npm/npm/issues/10004 seems worth a read. cc @mjbvz who implemented the \"Go to implement\" feature in VS Code and for typescript.\n@mjbvz A long running process for \"Find all References\", shows the progress indicator up top.\n@ironcladlou here is trying to implement the \"Go to implementation\" feature and doesn't see similar progress indicator when the corresponding process takes long time.\nDo you know if we do anything different?. @rockmenjack You can run guru implements on the terminal and see if it supports vendor dir. @rockmenjack Are the vendor directories under _/home/rockmen1/Projects/go/Gru? Which version of Go are you using? From 1.9 onwards the format /... exculdes vendor directory in most Go commands isnt it?. @rockmenjack Can you provide a sample repo where I can repro this? If you can, please log a new issue with sample code. Sorry, am late to this party\nSo this issue is about the changing the UI behavior of code lens in general so that they do don't take up a whole line and so don't disrupt the flow of numbered lines. Did I sum it up right?. In that case, it is beyond the capabilities of this extension.\nVS Code extensions in general cannot make any UI changes to the product. It can only work inside the confines of what the core provides.. Thanks @uudashr!\nI just added a commit to re-use some code that I pulled out from goCheck.ts earlier for finding the non vendor packages\nCan you do a quick test from your end?. > So you have to concat all the output, then split by new line character.\nNice catch, yes please send a PR\nAbout the tests running faster with the empty env... that's weird.\nI have no idea why that would be so :)\nYou can add that empty env , just add a comment above it as well, so that I don't end up removing it :)\n. \n@uudashr Sending empty env resets the GOPATH if any was set by VS Code. So I have updated the empty env obj to getToolEnvVars() which is what we use in other places.\nCan you check if your speed issue still persists after my change?\nAlso @marwan-at-work pointed out that in 1.9 ./... will no longer match vendor directory.\nSo we will have to test for version before trying to run go list when building/testing workspaces.\nNo rush.. \n@uudashr Sending empty env resets the GOPATH if any was set by VS Code. So I have updated the empty env obj to getToolEnvVars() which is what we use in other places.\nCan you check if your speed issue still persists after my change?\nAlso @marwan-at-work pointed out that in 1.9 ./... will no longer match vendor directory.\nSo we will have to test for version before trying to run go list when building/testing workspaces.\nNo rush.. I used to see it before, but not anymore.\nI have pulled the promise out of the individual test to the beginning and moved the completion tests to the end. This will not solve the problem of local failures in case of huge GOPATH, but will definitely solve the issue for travis.\nI have some plans to re-write the tests and the caching the packages. Will revisit this then.. That's a good catch @iarief \nI have added feature to run and show the test coverage after running the Test Package command.\nThat should help.\nThe feature will be out in the next update to the Go extension which should be sometime this week\n. @iarief Can you help in testing it out?\nAll you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.visx from the location where you downloaded the above file\n- Restart vs code and you should be good to go. - Coverage highlighting is removed the minute there is a change to any file. This is because we can't guarantee that the change hasn't changed the test results\n- Toggle Test Coverage removes coverage highlighting if it exists, else it runs tests and applies the coverage highlighting. It doesn't maintain any state that can be re-used by the test package command\nIn your steps if you add a step 7 to toggle coverage, the coverage highlighting will be removed.\nI was going for a feature of apply test coverage every time the package is tested. \nSo the flow is\n\nRun Go: Test Package. This will run tests and show test coverage\nAny change to any file removes highlighting of test coverage\nToggle Test Coverage shows the test coverage if it is currently not shown, removes it if it is currently shown\n. Great then, Happy Coding!. Yes, this would be a cool feature indeed.\n\n588 was logged to track this.\nClosing this issue in favor of #588 \nPRs are welcome. The latest beta version (0.9.3-beta.2) of this extension has this feature. Please see Refactoring in VS Code on how you can use the refactor feature.\n. @blaketairan Formatting is run on save. Looks like it is removing your imports.\nBy default, the formatting tool used is goreturns, can you change it to gofmt and see if the issue still occurs?\nIn your user settings add the following:\n\"go.formatTool\": \"gofmt\"\nIf this solves your issue then the issue is with the goreturns tool.. @blaketairan Please do file an issue in the repo for goreturns. This was intentional as gometalinter expects its linters to be in the GOPATH. If gometalinter was installed elsewhere along with its linters, then it fails with \"can't find executable in $PATH`\nBut there is a way around it which is to pass the \"toolsGopath\" as additional GOPATH to the process that does the linting.\nFixed with https://github.com/Microsoft/vscode-go/commit/27038d14098cb5b56e291046cb715c09ae5038a6\n. gometalinter will now be installed in the go.toolsGopath in the latest update (0.6.64). Closing this issue in favor of #736\n.  In the latest update to the Go extension, ${workspaceRoot} will be resolved when it is passed to go.testEnvVars setting. Sounds like a cool feature to add.\nPRs are welcome. I can guide anyone who wants to give this a try.\n. This snippet is now out in the latest update to the Go extension 0.6.64. launch.json file is used for debugging your code or tests.\nUsing go.testEnvVars is the way to pass env vars to your tests.\nYou can set this in your \"Workspace settings\" instead of \"User Settings\"\n\n. Closing this PR as it hasnt seen any activity in the past year. We can add the values of  go.buildFlags and go.testFlags settings (which combined get used when running tests) to the buildFlags parameter of the debug config that gets used by the codelens.\nThats pretty easy to do.\nUse https://github.com/Microsoft/vscode-go/blob/master/src/goTest.ts#L309 to get the flags and pass it to the debug config being formed here: https://github.com/Microsoft/vscode-go/blob/master/src/goRunTestCodelens.ts#L78\nPRs are welcome if anyone wants to give this a try.\n. This feature is now out in the latest update to the Go extension 0.6.64\nThe debug code lens will now honor the go.buildFlags, go.buildTags and go.testFlags settings.. So are you using go.testFlags or go.buildTags ?. @ijlopez02 In the latest update to the Go extension, the buildTags will be used by the debug code lens correctly\nThanks @ka2n for the fix!. Please see if what was discussed in https://github.com/Microsoft/vscode-go/issues/811 and https://github.com/nsf/gocode/issues/437 help.. @nvma @hyacinthus \nBased on the logs it looks like you have go.lintOnSave set to workspace which is why it runs go lint ./... which picks up vendor folder.\nAs a workaround, you can set go.lintOnSave to package\nI will look into skipping vendor folders when linting workspace. @nvma That's puzzling to me too. Because this change to use ./... was in the previous update that was early June and not in the latest update that was released a few days ago :). that can be the case\n. When you say ignoreDirectory do you mean that's flag on the linter or you are just referring to the fix I would be making?. I have pushed the fix to master.\nUntil I release an update, here is what you can do\n\nDownload this vsix file: https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nGo to extensions pane in VS Code and in the menu choose \"Install from vsix\", and select the downloaded vsix file when the finder/file explorer opens\n\n\n. @atomi You need to set \"go.gotoSymbol.ignoreFolders\": [\"vendor\"] to exclude vendor folder from the symbol search. The fix for linting picking up vendor folder is now out in the latest update to the Go extension (0.6.64). @douglarek Please log a new issue with clear repro steps.. I am able to see the log.Println output\n\nCan you share sample code?\n. Ah! Looks like the log part is going to stderr and the fmt one goes to stdout\n\nAnd in a recent commit stderr is not shown unless there is a test failure https://github.com/Microsoft/vscode-go/commit/94dadaa42af7e59cee6f97eb660de1a14ad45409\n@uudashr Can you take a look at this?. @mileusna Its right there.... look at the line which has the file path... In the end it says \"Failed, but no Hello\". I have pushed a fix. But even with the fix the log will appear after the rest of the output. This is because like I said earlier, log is going to stderr. And while running the go test the extension can only fetch stdout and stderr separately.. This fix is now out in the latest update to the Go extension 0.6.64. @mileusna You are right, previously, we were running a simple go test which gives the output even without -v \nWe moved to using go test package which does not give such output unless -v is passed.\nThe move was made to support running tests in symlinked folders. See https://github.com/Microsoft/vscode-go/pull/1164\nI'll look into documenting this better. @martinlindhe #1164 is a PR which is linked to https://github.com/Microsoft/vscode-go/issues/846#issuecomment-323589274 which in turn talks about the symlinks. I have pushed the fix to master.\nUntil I release an update, here is what you can do\n\nDownload this vsix file: https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nGo to extensions pane in VS Code and in the menu choose \"Install from vsix\", and select the downloaded vsix file when the finder/file explorer opens\n\n\n. The fix for vet picking up vendor folder is now out in the latest update to the Go extension (0.6.64). @dtknut I agree, I wish there was a smarter solution\nHere is the catch\n\ngo tool vet takes a rich set of flags, but only takes a directory or set of files as parameters\ngo vet does not take any of the flags like go tool vet, but can take set of packages as parameters\n\nWe currently use go tool vet because we allow users to set the flags via go.vetFlags\nBut this puts a restriction that I can only vet a directory\nIf it took a list of packages, then I could pass only the non vendor packages.\nA few options I can think of are\n- When \"go.vetOnSave\" is set to \"package\", we can add a check to not vet if current package is a vendor package. But I am curious here though... why would you want to edit a vendor file?\n- When go.vetFlags is empty, use go vet instead of go tool vet and pass the non vendor packages to it.\nIf you were using the vet flags AND vetOnSave is set to workspace, I don't have a solution there.\nDo you have any solutions in mind?. @dtknut When set to package, go tool vet . is run on the parent folder of the file being edited.\n. The fix for this is now out in the latest update to the Go extension 0.6.64. :) thanks @andreis!. Thanks @arbourd!. This looks like that the extension has ended up in some kind of corrupted state.\n\nAre other features from the Go extension working as expected? Try some of the the \"Go: ..\" commands from the command pallet\nCan you uninstall the Go extension and install it again?\nThe go.debug.startSession command is called when you try to debug without configuring the launch.json file. Can you create one and see if that helps?. If you have the launch.json file then go.debug.StartSession should not be called at all.\nIt gets called when there is no debug configuration in the launch.json file \n\nWhen you open the debug pane, do you see your configuration selected or does it say \"No configurations\" ?\n\nIf you have set GOPATH as environment variable, then you don't need to set it in the env in the debug config.. #1126 is tracking something similar.\nSomehow, upgrading to VS Code 1.14.2 is corrupting the existing extension.\nI cannot get a repro though.\nHopefully this is an isolated case ... @eZioPan That's unfortunate. Are you still on 0.6.65 or 0.6.66? Did you happen to install the Go extension using the vsix file before?. @eZioPan Did you try uninstalling the Go extension and installing it again?. I am on Windows 10, just installed 0.6.66 and it works fine.\nSo in your Windows machine, do you see any errors shown in the UI or in the console? Run Developer: Toggle Developer Tools to see the console?. @eZioPan Thanks for the call stack! That helps a lot.\nThis is the line that is causing the failure in detecting GOPATH and so failing the extension activation: https://github.com/Microsoft/vscode-go/blob/0.6.66/src/util.ts#L334\nSince it is a Windows specific code path, you were seeing it only in Windows.\nI believe this issue occurs only when you have Go files open but dont have any folder open in VS Code.\nI have pushed a fix. Follow the below steps to get the fix\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code -install-extension Go-latest.vsix \n- Reload VS Code. no problem, thanks for bringing this issue up. Happy Coding!. @vbocan I am guessing you must be on Windows. \nThe issue you are seeing got introduced in the last update to the Go extension.\nThe fix for this is in the master branch.\nWill be releasing an update this week.\nSee https://github.com/Microsoft/vscode-go/issues/1271#issuecomment-336198657 to get the fix before the release. Did you upgrade your OS, Go itself, VS Code or the Go extension?. Did you upgrade your OS, Go itself, VS Code or the Go extension?. Whats the VS Code version you are using?\nDo you see any errors in the console? Run Developer: Toggle Developer Tools to see the console.\nWhat about features like \"Go to definition\" and auto completion. Do they work?\nJust to be sure, can you run Go: Install/Update Tools. this will update the dependent Go tools. that call stack is from another extension.\nCan you disable all extensions other than Go and see if you are able to get the Go extension features?. Thanks for that @andy-trimble \nIn that case #1125 must also be related.. @omganesh \nLet's disable the formatting for the moment. Set the below to false\n- go.formatOnSave\n- editor.formatOnType\n- editor.formatOnPaste\n- editor.formatOnSave\nWith this, do you get back error highlighting? \nAlso, do the other features like auto complete and \"Go to Definition\" work as expected?. @omganesh what about other features like auto complete and \"Go to Definition\"?. Yes. https://github.com/Microsoft/vscode-go/releases\nI forgot to upload for 0.6.62. But you can find 0.6.59 to 0.6.61 there.\nDownload the file and then choose \"Instal from vsix..\"\n\n. @bgentry Did you recently upgrade VS Code or the Go extension before you saw the extension stop working for you?. Yes,  auto updating of extensions was enabled recently by default. \nAnd updating of VS Code itself is not intrusive as before, so you wouldn't even know that VS Code was updated unless you notice the pop up for the release notes\n. megacheck is not a formatting tool, it is a linting tool.\neven when set as linting tool, it would only show warnings and not build errors.\nPlease confirm the below\n\nYou ran Go: Install/Update Tools, no change\nAll format related settings are disabled\nAuto complete and go to definition features are erratic\nDid you try disabling all other extensions?\nUninstalling and Installing the extension again doesn't make a difference\n\n. @omganesh Is the Go file you have opened under the GOPATH you get when you run the command Go: Current GOPATH ?\nI was able to get an error similar to what you got. i.e goreturns failing with expected 'package', found 'IDENT'\nI got this error when I created and was editing a Go file outside my GOPATH. @omganesh Well, sorry about that.\nThe only other thing I can think of is to debug the Go extension locally. \nI can guide you, if you are up for it.. @omganesh Great! Start from here: https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code#building-and-debugging-the-extension\nRun the local set up as described in the link, open your Go project and see if you still have issues with build errors showing up.\nIf you do, then \n- Disable go.vetOnSave and go.lintOnSave so that we can concentrate first on why you are not getting the results from the buildOnSave feature. \n- Put at breakpoint at https://github.com/Microsoft/vscode-go/blob/master/src/goCheck.ts#L54\n- Make a change in your file, save it. The breakpoint should now be hit.. @omganesh You can use master or the tag 0.6.63\n. @omganesh That error is coming from the Vim extension. Can you disable that and see if build errors and linting warnings are appearing as expected?. \ud83d\ude22 That's why I asked very early on in https://github.com/Microsoft/vscode-go/issues/1126#issuecomment-319273270 if you can try disabling all extensions other than Go and see if the issue still persists\nAre you able to see the linting warnings and build errors in the VS Code (without the local dev set up) after disabling other extensions?. @rsinensis Not at the moment, but this does look like a useful feature\n@fatih @zmb3 Do you have anything similar for vim-go/go-plus?\nI am sure there is a Go tool out there that could add comments on functions based on its signature.. Makes sense, looping in more people for their thoughts\ncc @rakyll, @campoy. Thanks @rakyll and @zmb3 \n@rsinensis Hope the explaination above helps as to why we shouldnt be going down this route.. That is not implemented yet but is a very good feature to have.\nWe will have to implement the setVariableRequest of the DebugSession and use delve's set command there.\nIf anyone wants to try implementing this, I can help out.\n. @radu-matei You can follow the instructions in the debug README to set up a local dev environment and start debugging the debugger.\n. This feature is now available in the latest version of the Go extension (0.8.0)\nThanks @brycekahle!. You get errors installing what?\n- VS Code?\n- The Go extension on VS Code?\n- The Go tools that the Go extension on VS Code depends on?\nAre you able to run go build on your project in the terminal and ensure there are no errors there?. @k5nwa Closing this issue as we haven't heard back you in a while. Thanks for the fix @Craig-Stone!. This fix is now out in the latest update to the Go extension 0.6.64. https://github.com/Microsoft/vscode-go/blob/0.6.63/src/goPackages.ts#L42-L47 must be the reason why you never see the results.\nSo doing a go get on any gopkg.in/<package>.v1 should be able to let me repro this issue?\ncc @marwan-at-work who worked with me on this feature. I tried your steps, but like you said can't repro the issue.\nI have removed https://github.com/Microsoft/vscode-go/blob/0.6.63/src/goPackages.ts#L42-L47 so that we continue to use the output of go list all even in case of failures to atleast get the info on the pkgs that appeared in stdout.\nAlso, added a error message that is shown to the user if no pkgs were found instead of saying \"Fetching packages... try again later\"\nThanks for logging the issue!. @marwan-at-work Yes definitely, give it a try.. @brandon-schumann Can you open the integrated terminal and run echo $GOPATH, echo $PATH as well as go env and compare results with what you would expect?. Thanks @brandon-schumann \n@Tyriar Can you think of any reason why the process for extension host might not have the environment variables as set in ~/.zshenv, but the integrated terminal does?. @brandon-schumann Is this still an issue?. Do you see the warning as mentioned in https://github.com/Microsoft/vscode-go/issues/1133#issuecomment-325281635 ?. @Tyriar @joaomoreno Any more thoughts? Env vars from ~/.zshenv seem to be reaching the terminal but not the extension host. @peteryates Have you tried using the go.testEnvVars setting? Any env vars set there will be used by\n- All the Test commands from the command palet\n- The Run test and Debug test codelens. @peteryates Set it in your Workspace settings file instead of the User Settings file. This way it will apply only to the current project. No problem, Happy Coding!. @jamietre That's covered in https://github.com/Microsoft/vscode-go/issues/736 for which I just pushed a fix. You can find the feature in the next update. @jamietre In the latest update to the Go extension, ${workspaceRoot} will be resolved when it is passed to go.testEnvVars setting. @frynio Can you try using dlv from the command line, add breakpoints and check if you are able to step over/in/out as expected?. @frynio Closing this issue as we haven't heard back from you in a while and what @Jgeyen mentions points towards upstream issue with dlv. This issue was moved to Microsoft/vscode#32196. @ilevine Are you on Windows too?\nThere was an issue with mapping remote paths to local paths in Windows and the fix for it is in the master branch. Can you try out the extension from source following the below steps and let me know if the issue is resolved for you?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix from the location where the above is downloaded\nReload VS Code\n. The fix for this is now out in the latest update to the Go extension 0.6.64. When you set go.inferGopath to true, what GOPATH did you get?. @ttimasdf The master branch has quite a few changes since the last released version (0.6.63)\n\nSo there might be differences in behavior.\nCan you try installing the Go extension using the latest vsix that was built from master branch and see if your issue still occurs?\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Close all VS Code windows\n- Run code --install-extension Go-latest.vsix from the location where the above file was downloaded\n- Open VS Code. @ttimasdf The debugger not using the gopath like the rest of the extension features is a known issue. See #840 \n. @ttimasdf Sorry, I didn't understand your previous comment. So what's your current state?\nDoes inferGopath work everywhere except for debugger?. Hey @josh-tepper \nSorry my notifications are all in a mess, don't know how I missed this issue.\nYes, this should be logged in the repo for the language server.\nNo worries I'll move it.. This issue was moved to sourcegraph/go-langserver#199. @VojtechVitek \nTo disable all codelens in VS Code, set editor.codeLens to false\nTo disable Go related codelens, set the below\n\"go.enableCodeLens\": {\n    \"references\": false,\n    \"runtest\": false\n  }. No problem, Happy Coding!. Pending items\n- Merge to master\n- Another round of testing. I believe this is due to the indentation rules we have.\nOnly happens when there is an un-closed { in the line before the final position of the move.. @Shadowfaxenator \nI don't believe the language server does anything on save. \ncc @slimsag. @Shadowfaxenator Do you still have issues with the go-langserver process taking a lot of CPU and memory? If so then please log an issue at http://github.com/sourcegraph/go-langserver. If its linting and vetting warnings you are referring to, then can you check either https://github.com/Microsoft/vscode-go/issues/1121 or https://github.com/Microsoft/vscode-go/issues/1119 and see if one of those 2 issues are the same as the one you are facing?. sometime next week, I have been busy with a few other things, sorry :(\nUntil then you can follow the instructions in https://github.com/Microsoft/vscode-go/issues/1121#issuecomment-318765520. @lusis What are the values for go.buildOnSave and go.liveErrors when you see this issue?\nAlso, in the end when the build error goes away but the linting warnings remain, is the file in a saved state?. @luis I can't repro the issue but I think I know what's happening.\nThe build/lint/vet/cover on save operations are triggered at the same time. And only after all are complete, the results get updated. In your case I believe, the running of the coverage might be taking a long time, thus delaying the update of the build/lint/vet results.\nI have decoupled the coverage part from build/lint/vet process. Can you re-try after installing the extension from https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix and setting go.coverOnSave back to true?. @lusis Did you get some time to try the latest from master?. @luis I believe the latest version of the Go extension (0.6.64) has the fix for your issue\nSince I havent heard back from you in a while, I am assuming that the fix works.\nIf it doesnt, please re-open this issue. linters are triggered on file save. They do not react to file changes and so that is expected behavior.\nFor auto-complete, are you trying it with or without the import statement to the new package in the file?. Does dep download only the source or also build the package? \nFor auto-complete we use gocode which uses pkgs from GOPATH/pkgs and not source code. @Hawken94 Do you still see this issue in Windows?\nWhen you say auto-import, are you referring to adding the missing import statements when you format the file or save the file?. @Hawken94 We have made some changes around completions for unimported packages. Can you try out the latest Go extension from source and see if that helps?\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix from the terminal\n- Reload VS Code. @Hawken94 Your English is fine, dont worry about it :)\n\nBut in ubuntu, it has a nice prompt and will auto-import the package just like the built-in package.\n\nWhat prompt are you talking about here? Can you share a screenshot? Do you mean auto-completion?\nCan you check your settings? Do you have go.autocompleteUnimportedPackages enabled in either ubuntu or windows?. Can you run Go: Browse Packages or Go: Add Import command and see if qrcode appears in the list?. Alright, I have a fix in.\nCan you try the below to see if my fix works for you?\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix\n- Reload VS Code. No problem, thanks for reporting the issue and Happy Coding!. @Hawken94 that would be a separate issue. Try setting go.docsTool to gogetdoc in your settings. @Hawken94 Try running gogetdoc from the command line/terminal. If you don't get the docs as expected, then log an issue at https://github.com/zmb3/gogetdoc. Unfortunately, debugger cant read the settings at the moment. Try using \"buildFlags\" property in your debug config. Pass [\"-tags\", \"urtag\"]. Thanks @mbanzon . Dont you get the notification pop up?\n\n. The Warning that has the required message disappears after a while though. I have logged an upstream issue for that in the vscode repo: https://github.com/Microsoft/vscode/issues/35177\nOnce that issue is fixed, I believe your concern here is addressed.\nUnless of course you are looking for a more actionable solution where you can click on the file location and get navigated there. In that case, what we can do is show the error in the output pane from where the file links are clickable.\n. The upstream issue has been fixed.\nNow the error shows up and doesnt go away until user hits escape or the close button. @szyhf Are rest of the auto-completion features working as expected?. Ah! Looks like this happens only with built-in packages.\nCan you try out any of your custom packages?. We changed the way we get the information on packages in general in 0.6.63\nCan you try from the code in master? \nAll you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.visx from the location where you downloaded the above file\n- Restart vs code . @szyhf Can you run Go: Browse Packages and see if the strings pkg is listed there?. The error in the Dev tools is unrelated.\nLooks like the code to fetch the packages is not completing and so you get that message and also the suggestion feature doesn't get the list of packages as well.\nCan you run go list all and see if it gives you results?\n. @szyhf over 5000 rows!! Wow, that's a lot of packages.\nI can't repro this issue because I don't have those many packages :)\nI can help you set up a local environment for the Go extension and help you debug the issue if you are up for it.\n\nFollow the instructions for Building and Debugging the extension\nPut a breakpoint in the file goPackages.ts at https://github.com/Microsoft/vscode-go/blob/master/src/goPackages.ts#L36 and https://github.com/Microsoft/vscode-go/blob/master/src/goPackages.ts#L42\nIf you have already pressed F5 and the extension host instance is up, reload. Else Press F5 and when the extension host instance is up, open any folder with Go code\n\nIf the second breakpoint is not getting hit, that means that the process for go list all is not completing.\nAdd the below right after cmd.on('close') and see if breakpoint for the below gets hit\ncmd.on('error', (err) => {\n  console.log('Thanks for debugging.');\n});\n. @sgyang  yup, that's the problem. Now try this:\nAdd the below right after cmd.on('close'), add breakpoint on the line which has the console.log()  and see if this breakpoint for gets hit. If it does, share the err\ncmd.on('error', (err) => {\n  console.log('Thanks for debugging.');\n});\nLooks like go list all is failing, I'd like to know why.\nThe auto-completion of unimported packages depends on go list all completing successfully.\nI'll work on adding a fallback to the old way of getting pkgs, but I want to know why go list all fails in your case.\n. This is so cool! I'd have never caught this issue as I do only simple Go programs :( just enough for developing the features and bug fixes\n@sgyang @szyhf Would you be interested in joining a group I recently created to beta test the Go extension updates before they get released?\nThis way features/bug fixes get more eyes on machines of real world Gophers and can catch issues like this ahead of time.\nAnd by beta test I mean checking out the new features and using the extension just like you would any other day. Awesome! Just join the Google group here: https://groups.google.com/forum/#!forum/go-with-vs-code-beta-testers\nI basically just post an announcement there whenever the next update is ready for beta testing.\nOnce I do that, all you have to do is \n- download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix \n- run code --install-extension Go-latest.vsix from the location where you downloaded that file.\n- reload VS Code window. The fix for this issue has been released with the latest update to the Go extension (0.6.65)\nThanks @szyhf and @sgyang . That would be a cool feature indeed, but is not specific to the Go extension.\nIt applies to all languages actually.\nQuite a few feature requests have been logged in the VS Code repo for this. Go through both the open and closed issues here: https://github.com/Microsoft/vscode/issues?q=is%3Aissue+TODO+in%3Atitle+is%3Aopen\nSome of them have links to extensions that do this.\n. Thanks for reporting this @OneOfOne! And for the PR as well.\nI am going ahead with a separate solution and have pointed that out in your PR.\n. @OneOfOne I am curious though.. How did you come across this error?\nHave you been working on the extension or testing it using the Go-latest.vsix ?\n. Thanks! That's great to hear.\nWould you be interested in beta testing the extension for every release?\nI am not a Go developer myself and I always fear that I am missing out certain scenarios that a everyday Go develeper could catch.\nYou wouldnt need to test all features. Just install using  Go-latest.vsixand use the VS Code just like you would any other day.\n. Great! Can you please join the group https://groups.google.com/forum/#!forum/go-with-vs-code-beta-testers?\nWhenever I update the Go-latest.vsix for the upcoming release, I announce in that group, so that people can download it and install.. @ilevine I am not familiar with the multi-client feature of delve. Can you share information on your setup that we can try and replicate to check the issue?\ncc @roblourens On initializing debugstate. @giulianob As far as I know, no one has tried to switch to v2 yet. You are welcome to try and I can help if you have any questions. @giulianob  Sometime in the last year, we made the move to using v2 apis of delve by default. So, we should be able to initialize the debug state.\ncc @vladbarosan As you were planning to look into the multi client feature of delve\ncc @jhendrixMSFT, @lggomez, @quoctruong , @iantalarico and @pongad as well for your thoughts\nAlso linking https://github.com/Microsoft/vscode-go/issues/763 here as it was meant to track the stopOnEntry feature. This is being tracked in #194 Please follow that issue. @nebiros The program attribute is missing in your debug configuration.\nAre you trying to do remote debugging? If not, then keep remotePath as empty string.\nAlso read https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#set-up-configurations-in-launchjson\n. Maybe I am missing something, but from what I read from https://github.com/awalterschulze/goderive, the way to use this tool is to run goderive ./... which can be done easily from the terminal.\nWhat kind of editor support will help here?. Yes, configuring the flags is possible. For example, we do this for the formatting feature.\nI wouldnt want to run this on every save, instead implementing this via a command and using the command when required makes sense.\nPRs are welcome.. Looks cool, PRs welcome.\nI can help out if anyone is interested. @hanleym Thanks!\nI'll take a look at the PR sometime this week.. @hanleym Thanks!\nI'll take a look at the PR sometime this week.. Thanks @uudashr!\n. @rpeshkov Your issue of 1138 was Windows specific, the current issue here is in Mac and is different\n@cheptsov I am able to repro the issue. Can you try setting the breakpoints at the same location using delve from the command line?\n@ataliadvanstep When you tried delve directly, were you able to set breakpoints? (not just main.main, breakpoints on other lines)\nI was able to set the breakpoint but continue got stuck and the breakpoint was never reached. @rpeshkov That's right, sorry! The auto-complete for @ mentioning in github was smarter before where it would only suggest people already in the thread. Some reason these days it picks up people outside the thread as well. \n. @cheptsov  \nSo I was able to repro your exact issue with your repo\nI removed the --api-version=2 from your delve call at https://github.com/cheptsov/wiki/blob/master/Dockerfile#L12 and it works now.\n@cheptsov,  @ataliadvanstep\nAny reason you want v2 for the delve apis?\nCan you remove the  --api-version=2 and try again?\nThe Go extension doesnt support v2 of the delve apis yet\n. Yes, api-version=2 is not yet supported.\nWe hope to have it soon \n. @zhouhaibing089 Your issue in https://github.com/Microsoft/vscode-go/issues/846#issuecomment-323589274 is about running tests where as your PR here is in the debugging area. How will it help in fixing the issue of running tests?. @zhouhaibing089 One issue with passing the package to go test is that the log.Println or fmt.Println from the tests are no longer getting piped to stdout\n@rakyll @francesc Would you know why go test would print out the log.Println and fmt.Println statements but go test import-path-to-my-package doesn't?. Looks like its a platform issue\nIn Windows go test -v import-path-to-my-package prints the text from log.Println statements\nBut in Mac it doesn't. Both are using Go 1.9\nLogged https://github.com/golang/go/issues/22113\n. Nope not a platform issue. \nIt was all me and my duplicate set up of the same project in the default GOPATH and my other GOPATH.\nI was making the changes in one and go test package-path was testing the other.\nAll is well with the world folks, sorry for the churn. Thanks @hummerd!. @hummerd I'll be releasing an update on the coming Tuesday or Wednesday and your changes will be part of it.\nDo you mind helping me out with some testing before that? All you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix from the location where the above is installed\n- Reload vs code and use it like you would any other day and let me know if there are any issues.. Thanks!. This is a limitation on v1 apis of delve that only looks 1 level deep when resolving variables.\nA few updates ago in the Go extension, we have added a way to use v2 apis which lets us configure delve more deeply. Add the below in your settings to be able to see the nested variables:\n\"go.delveConfig\": {\n    \"useApiV1\": false,\n    \"dlvLoadConfig\": {\n        \"followPointers\": true,\n        \"maxVariableRecurse\": 2,\n        \"maxStringLen\": 64,\n        \"maxArrayValues\": 64,\n        \"maxStructFields\": -1\n    }\n}\n. See https://github.com/Microsoft/vscode-go/blob/0.6.85/package.json#L431-L468 to learn more.  In the latest update to the Go extension, ${workspaceRoot} will be resolved when it is passed to go.testEnvVars setting. Closing this as \"as-designed\"\nFor now, in multi-root set-up, in the Go extension workspace in build/lint/vet on save settings will not mean the entire workspace. Build/Lint/Vetting the entire workspace will get expensive and there are no great benefits for the same.\nWe will re-visit if and when there is user feedback in this direction. @sandy081 I can only repro this if the settings editor and the Go file are in 2 separate editor groups.\nDo you recall if thats what you saw as well?. The extract method feature is tracked in #588\nOther refactoring are tracked in #649 \nYes refactoring would be a cool feature to add. PRs are welcome and I can help out anyone who wants to give it a try.\nClosing this issue in favor of the 2 linked issues. The latest beta version (0.9.3-beta.2) of this extension has this feature. Please see Refactoring in VS Code on how you can use the refactor feature.\n. @zz-bmj Are you sure that gogetdoc was the reason?\nDid you see it taking up a lot of CPU? Can you repro the issue by enabling it again?\ncc @zmb3. @zz-bmj Are you sure that gogetdoc was the reason?\nDid you see it taking up a lot of CPU? Can you repro the issue by enabling it again?\ncc @zmb3. @zz-bmj Closing this issue as we havent heard back from you in a while.\nIf you still see perf issues with gogetdoc please drop in a comment here with details. @davyzhang The UI for the tooltip and for rest of the editor for that matter is the same for all languages. Extensions cannot change the UI.\nCan you share a video or gif of the issue you are seeing? include both typescript and go for comparison. What you have shown for typescript is called \"Signature Help\" or \"Parameter Hints\".\nIt shows up in the below cases\n1. when you type the ( after the function name and keep typing the parameters\n2. when you press Cmd+Shift+Space or Ctrl+Shift+Space insider the () after the function name\nIn your Go example, since you have enabled useCodeSnippetsOnFunctionSuggest, the parameters are already filled up. So there are no hints. In this case you can use option 2 above\nWhen you enable typescript.useCodeSnippetsOnFunctionSuggest, you will see the exact same behavior as you see for Go\n. Ah! thats a bug\nLogged #1183 to track that. Hey @kmikiy \nSorry it took me so long to get to this PR.\nWhy not use tl and tlf as prefixes instead? Arent they more intutive for tLog and tLogf ?. lp for log.Println makes sense its the first letter for the pkg name and the function name\ntp for t.Log wouldn't because there is no p in anywhere in the pkg/function name\nSo its a definite no for tp\nThat leaves tl for t.Log\nAnd to keep the  prefix for t.Logf analogous to t.Log, tlfis better. sure. @cdhunt Can you try running delve from the command line and see if you are able to get it debugging successfully?\nJust run dlv debug  from whatever is the folder you have opened in vs code.\nI noticed that you have GOPATH and GOROOT set to the same location. I have a feeling we aren't suppose to do that. Also you seem to be passing the args build. Is that for the program you are trying to debug?. > but I can't find an executable\nYou mean the dlv executable? That would be in %GOPATH%/bin\n\ndlv debug fails.\n\nYou mean when you run from the command line? What is the error?\nI tried debugging https://github.com/hashicorp/packer as well and I get the same error. It is coming from https://github.com/hashicorp/packer/blob/v1.0.4/main.go#L91\nI get the same error when running delve from the command line as well.\nThis is not an issue with the Go extension. Please check with the owner/author/maintainer/contributors of https://github.com/hashicorp/packer about the best way to debug it using delve.\nOnce you have it debugging using delve from the command line, I can help translate that into doing the same in VS Code\n. Thanks for the information @andrewsav-datacom!. I couldn't repro on my Mac\nOn my Windows machine, I got similar error, but the msg said it was not able to find \\usr\\local\\go\\src\\net\\http\\server.go instead.\nSince the path has Windows like path separator, my guess was that the issue is with https://github.com/Microsoft/vscode-go/blob/0.6.63/src/debugAdapter/goDebug.ts#L502\nWhich makes sense because that line of code tries to replace the remote path of the program being debugged with local path. Which works fine as long as the code is under GOPATH\nSince the std lib code is under GOROOT and not GOPATH, that line doesn't do anything other than changing / to \\\nIt also makes sense why I didn't have issues in my Mac because the GOROOT is the same in remote and local.\nWhat I don't get is why in your case c:\\Users\\rpfister gets appended to the remote path to server.go.\nRegardless, can you try installing the extension from https://github.com/Microsoft/vscode-go/blob/remote-debug/Go-latest.vsix and see if it makes any difference? That has the fix for the issue I could repro i.e the error message that says cannot find file \\usr\\local\\go\\src\\net\\http\\server.go\n. I would be releasing an update early next week and it should have the current fixes.. This fix is now out in the latest update to the Go extension 0.6.64. Closing this PR as these changes are included in #1191 as well. Thats called \"Signature Help\" or \"Parameter Hints\"\nIts helpful when the function in question has multiple parameters.\nAs you type the parameter, the underline moves to the current parameter.\nYou can disable this by setting \"editor.parameterHints\": false. Not at the moment. There is an open issue in vscode tracking that. You can add your upvotes/comments there https://github.com/Microsoft/vscode/issues/13480. Discussion on go generate is being tracked in #263\nPlease share your input there\nClosing this issue in favor of #263. Fixed with the PR #1416 from @hummerd . Works for me... \nTried both in Mac (go 1.8.3) and Windows (go 1.7)\n\nCan you run Go: Install/Update Tools to ensure all the Go tools are up to date, reload VS Code and try again?\n. And just to be on the same page you are referring to the parameter hints as shown in my screenshot above and not the suggestion/auto-completion correct?. that's weird, I have no idea and I cannot repro\nIf you are up for it I can help you debug the issue by running the extension from source. Great! \n\nFollow the steps here: https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code#building-and-debugging-the-extension\nAdd breakpoint at https://github.com/Microsoft/vscode-go/blob/master/src/goSignature.ts#L36\nTrigger Signature Help by Ctrl/Cmd+shift+Space from insider the (), the breakpoint will be hit\nDebug away. @joelpresence Any updates here?\nDo you still see the issue?. @jonathan-robertson The codelens for \"run test\" and \"debug test\" have nothing to do with the parameter hints or the tools that provide the parameter hints. They get re-created/adjusted everytime there is a change to the file.\n\nApart from that, are you saying that the parameter hints do not appear in test files even when the import statements exist for the package?. @jonathan-robertson Can you share your settings? Also, when you hover on function names, do you see the complete signature + any docs associated with the function?. What about the Go To Definition feature? Does that work on these functions?. The Go To Definition feature, the hover feature and the signature help all use the same set of tools behind the scenes. By default they use godef. You can make the extension use gogetdoc instead by adding the setting \"go.docsTool\": \"gogetdoc\"\nCan you open the console? From the menu, select Help -> Developer Tools, then click on console.\nYou should be able to see the error message from the tool (godef or gogetdoc)\n. Ok, so looks like godef fails to find the definition for secure.GenerateKeyContainer.\nI would suggest to run that command (/Users/jonathan/Documents/code/go/bin/godef -t -i -f /Users/jonathan/Documents/code/go/src/github.com/jonathan-robertson/lockedarchive/service/service.go -o 2783) from your terminal and see if you can get any more details on the error and then log the issue in the repo for godef.\nWhen logging the issue on godef, if you can get a smalller code sample where you can repro, then that would be helpful for folks on godef to help.\nClosing this issue as the workaround of using gogetdoc helps.. No problem, Happy Coding!. Fixed with https://github.com/Microsoft/vscode-go/commit/8d835234e27ab58ffd0f6b6f24b7148526cdc82e\n@roblourens Can you try again with the latest vsix from last night?. \n. @sgyang Do you also see the issue only for the log pkg? And fmt works?. @sgyang The reason I asked about log vs fmt was because that is what @roblourens originally reported in this issue. That when testing completion for unimported packages, things worked for fmt but not for log.\nCan you follow the instructions on https://github.com/Microsoft/vscode-go/issues/1152#issuecomment-324838203 and share your results in that issue?\n. @Slacki  You are not seeing completions from std library or custom packages or both? . I don't see why the suggestions wouldn't show up for log, but will show up for fmt. \nI can help you set up a local environment for the Go extension and help you debug the issue if you are up for it.\n\nFollow the instructions for Building and Debugging the extension\nPut a breakpoint in the file goSuggest.ts at https://github.com/Microsoft/vscode-go/blob/0.6.66/src/goSuggest.ts#L91\nIf you have already pressed F5 and the extension host instance is up, reload. Else Press F5 and when the extension host instance is up, open any folder with Go code and try to repro\n\ngocode gives completion for standard library pkgs even if they are not imported.\nWhen the above breakpoint is hit, you should have suggestions. If you don't and you see this issue only for standard library pkg, then I would say the issue is with gocode.\nYou can try updating gocode as well\n- Run gocode close\n- Run Go: Install/Update Tools (it will update all tools) or update gocode separately. Am closing this issue as there is nothing concrete for me to go on with.\nIf anyone has problems with the completions, please log a new issue and we can take it from there.. Thanks @uudashr!\n. Its pretty easy to implement, if anyone wants to take a stab at it, I can help. I am not aware of Glide, but I believe we can have this feature regardless.\n\nYou can have a command Go: Get Package. When this command is run if the line under the cursor is an import statement, we can spawn a process to run go get -u on it. \nTaking this a step further, we can have code actions. I refer to those light bulb like images that can appear on the import statement clicking on which results in running the go get for the package\nTo show the code action, we need to first check if the package in question exists or not. One way to do this would be to run a go list on the import path, but there might be better ways to do the same. To begin with, you can take the implementation of the Go: Browse Packages https://github.com/Microsoft/vscode-go/blob/0.6.65/src/goBrowsePackage.ts as a reference\n\nThe logic to fetch the import path from the import statement is already present in that file.\nYou can re-use that. Closing this issue as the feature has been implemented. We can use TextDocumentContentProvider to provide read only documents in the editor. This can technically be done as a separate command.\nYou could then map the current keyboard shortcut for the Go to Definition command to this new command.\nBut changing the behavior of the Go to Definition command itself is not in the hands of the extension. That would be changing core behavior.\nCreated https://github.com/Microsoft/vscode/issues/33823 to discuss this in the vscode repo\n. @yhuang0 Have you tried setting the folder with sub libraries as read-only? VS Code will then honor that setting when opening the files.. why not?. @yhuang0 Closing this issue as we havent heard back from you in a while. @chrmarti https://github.com/Microsoft/vscode-go/pull/1191#issuecomment-327986633 looks like its related to the keytar work you have been doing\n@uudashr Thanks for all the work on this PR. I'll take a look at it over the weekend. @uudashr The below assert is failing when vendor is not supported. Any idea why?\nhttps://github.com/uudashr/vscode-go/blob/faster-go-list-all/test/go.test.ts#L590. @uudashr Tests are fixed now\n. @uudashr First off, thanks for all your work in getting this together\nThere are a few things I still want to discuss\n\nIf gopkgs for any reason runs more than 5 seconds, then every word typed after 5 seconds will end up creating a new process. We should safeguard against this. Something like \"if a current gopkgs process is running, don't start a new one\"\nCompletions are usually expected to show up under a second. How do we ensure this when gopkgs takes more than a second? One way is to decouple the calls to gopkgs and gocode. This way even if you don't get completion for new pkg on first attempt, you will most likely get it in the second attempt.\n\n. Your GOPATH is users/ksh/go, and as per the error message, that is where dlv is being run from\nYou said you installed using brew, but brew wouldnt install delve in your GOPATH\nRun which dlv in your terminal outside VS Code. Does the output match with \"users/ksh/go/bin\" ?\nMost probably you have 2 dlvs\nOne in your GOPATH/bin\nThe other in your PATH\nIf so delete the one in the GOPATH and try again\n. No problem, Happy Coding!. You seem to have Auto Save enabled.\nFormat on Save is enabled by default.\nThis is a duplicate of #899 and is fixed in the latest update to the Go extension (0.6.64) that I released a few minutes ago.\nCan you reload your VS Code window and the extension will get updated (unless you have configured it otherwise) and try again?. We did update the way GOPATH was used in the debugger.\nIn your debug configuration in launch.json file, can you check if the program attribute is under your GOPATH/src ?. This is the previous release: https://github.com/Microsoft/vscode-go/releases/tag/0.6.63\nScroll down until you see the link \"Go-0.6.63.vsix\"\nDownload that file and run code --install-extension Go-0.6.63.vsix from the location where you downloaded that file.\nI can reproduce your error by having my package directly under the $GOPATH without the src folder. But you say that your package is under $GOPATH/src which puzzles me.\nNevertheless, I have the fix for case I was able to repro. Do you mind seeing if it fixes your issue as well?\nYou will need to download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix and then run  code --install-extension Go-latest.vsix from the location where you downloaded that file.\n. @karamana Is debugging the only feature broken for you or like @Nais777 all the features are broken?. @karamana Are the other features of the extension like auto-complete, go to definition etc working as expected? \nI have a fix in for GOPATH issue with the debugger. Can you try it out?\nYou will need to download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix and then run code --install-extension Go-latest.vsix from the location where you downloaded that file.. That's good to hear @karamana \nIf you don't mind can you check a few things for me?\n- Set trace to \"verbose\" in your debug configuration\n- Start debugging, you will see verbose logging in the debug console\n- There will be a line Using GOPATH:\nIs the value there a prefix for the value in the program attribute in the debug configuration?\nIs the value there + /src a prefix for the value in the program attribute in the debug configuration?\n. Thanks @karamana, I'll release it by end of day today.. The fix for this issue has been released with the latest update to the Go extension (0.6.65). @rajkrishnamurthy Can you share the debug configuration from the launch.json file?\nHave you set GOPATH as an environment variable?\nWhat is the Go version?\n. @karamana  Which VS Tools are you referring to?. Am sorry, I dont do a lot of Go coding myself, so I wont be much of help here.\nI would suggest you post your query in the Gophers Slack channel. I am sure there are others who have been in similar scenario.. @Nais777 Can you run the command Go: Current GOPATH and see if the output matches your GOPATH?\nAlso please share your Go related settings\nThe latest update was out around noon PST. So that can explain why everything was fine this morning for you.\n. That is super weird. I'll keep an eye out for anybody else facing similar issues.\nThanks for getting back on this and Happy Coding!. That is super weird. I'll keep an eye out for anybody else facing similar issues.\nThanks for getting back on this and Happy Coding!. In this case what is your ${workspaceRoot} ?\nIs it e:\\Work\\yunkai\\robot ?. I have a fix in master, can you try it out?\nYou will need to download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix and then run code --install-extension Go-latest.vsix from the location where you downloaded that file.\nThen reload VS Code window. @ansencumt Does the fix in https://github.com/Microsoft/vscode-go/issues/1196#issuecomment-327544415 work for you?. The fix for this issue has been released with the latest update to the Go extension (0.6.65). Thanks @sgyang!. The indentation follows the rules specified in https://github.com/Microsoft/vscode-go/blob/0.6.65/src/goMain.ts#L269 int he Go extension which is in turn is taken from the Go grammar in https://github.com/atom/language-go/blob/813dff0ad2f5af6de1d823794daece0f397de3b8/settings/language-go.cson\nI tried something similar in typescript and the indentation works just fine. So its not core vscode mis-using the indentation rules when moving lines.\nThe bug is in the indentation rules of Go.\n. Grammar is the same, I think its something to do with how VS Code applies the indentation rules. When the else appears in a new line, things are good\nvar w int\n    if x {\n        y()\n    }\n    else {\n        y()\n    }\nInstead of applying the \"decrease indent rule\" due to the closing } of the if block, an \"increase indent rule\" is getting applied due to the opening { of the else block.\ncc @rebornix . > now see this every time I save\nWhat is it that you are seeing?. Thanks for your kind words @dannolan :) and Happy Coding!. @BrahimS can you share a screenshot?. That message is neither coming from VS Code or the Go extension. It must be coming from one of the extensions you have installed. Can you disable all extensions other than the Go extension and see if you still repro the issue? . If there were syntax errors build should have caught them. Have you turned off go.buildOnSave setting?. @philipithomas I just tried formatting and linting on a Go file which has syntax errors. Both work as expected. \nCan you share a sample code where you dont see formatting and linting working?. In that case, I'll close this issue.\nThanks!\n. This is due to the filtering behavior of the quick pick control in general. Logged upstream issue: https://github.com/Microsoft/vscode/issues/34088. - In the VS Code terminal, run echo $GOPATH. Is the output the same as your expected GOPATH?\n- The debugger cannot read VS Code settings. So you need to set the right GOPATH as an environment variable outside VS Code or you can pass the same in the debug configuration in the launch.json file\n- If you are using the latest version of the Go extension (0.6.65), then you don't have to pass the GOPATH via the launch.json either.\nSee Debugging-Go-code-using-VS-Code as well. @suntong The debugger should have figured out the right GOPATH based on the package being debugged. Can you try the below?\n\nDoes the value in the program property in the launch.json file fall under your expected GOPATH?\nRemove the GOPATH from the env property in the debug config in the launch.json file\nAdd \"trace\": \"verbose\" to your debug config in the launch.json file\nStart debugging\n\nYou will see verbose logging in the debug console. You should see a line \"Using GOPATH:\" Does this GOPATH match what you expect?. To summarize:\n\n\nThe debugger is using the GOPATH /path/to/repo/gitwork which is where your code really is\n\nBut you have opened VS Code for a folder under /path/to/repo/go-arch which you have sym linked to  /path/to/repo/gitwork\nIf you set GOPATH in the env in launch.json to  /path/to/repo/go-arch, then everything is fine\nYou have set GOPATH as a env variable (outside of VS Code) to /path/to/repo/go-arch\n\nIs that right?\n. Few more things...\n\nWhat do you see when you run the command Go: Current Gopath?\nHave you by any chance modified the settings go.gopath or go.inferGopath ?. Press Ctrl+Shift+P, the command pallet will open. If on Mac then use Cmd+Shift+P\nType Go: Current Gopath, select it from the options\n. @suntong \nok, https://github.com/Microsoft/vscode-go/blob/0.6.66/src/debugAdapter/goDebug.ts#L235 is the reason  for the debugger trying to infer the GOPATH.\n\nI'll look at the history and try to recall why I do that even when GOPATH is set in the env.\n@friends110110 Can you tell us if you use symlinks as well?. When you start VS Code from under /path/to/repo/gitwork what does the Using GOPATH log show?. No I meant the logs from the verbose logging when debugging. @suntong I have pushed in a fix which should help your case, can you give it a try?\nYou will have to\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix\n- Reload VS Code \n. @Boiethios Can you share your settings? Have you set any of go.gopath, go.inferGopath, go.toolsGopath ? Please check both your user and workspace settings. Weird.. it works for me\nAnd I tried all 3 implementations for going to definition\n- default\n- gogetdoc\n- language server\nAny errors in the dev console?. That's right..\nIn the diff for working files, when you right click, you get the below commands in the context menu\n\nIn the diff for staged files, you get only the Copy command. Closing this one and re-opening the upstream issue https://github.com/Microsoft/vscode/issues/34034. Thanks for reporting this @josh-tepper and for your patience\nAs discussed in https://github.com/Microsoft/vscode/issues/34034, the right side view in the diff view when files are staged use what's in the index file version.\nFiles on disk use the scheme file.  The index ones use the git scheme. \nAnd all the Go related featuresare registered only for on disk files due to https://github.com/Microsoft/vscode-go/blob/0.6.65/src/goMode.ts#L10\nI removed the constraint on the file scheme, and now features like Go To Definition, Find All References, Hover etc should work in the diff view for staged files.\nIf you are using the Go language server (which I know you do :) ), the above fix doesnt apply\nThe language server returns with \"unable to read out-of-workspace resource from virtual file system\".\nAm not sure how to go about fixing that.\n. Also do you mind giving the fix a spin? All you need to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix and reload VS Code.\nNote: the fix doesnt work when you use the language server\n. Here is a scenario where results might be unexpected.\n\nSay you have 2 files A and B. B uses a symbol defined in A\nThere are staged changes for both A and B\nThere is unstaged changes for the symbol definition in A\nNow in the staged view, run \"Go to Definition\" on the symbol in B\n\nYou will be taken to the symbol in file A as per file on disk and not as per the staged changes for A \n. @josh-tepper https://github.com/Microsoft/vscode/issues/34034#issuecomment-331815272 is a convincing argument for reverting the change I made to fix this issue.\nLet's open an issue for the language server instead.\nCurrently it returns an error: \"unable to read out-of-workspace resource from virtual file system\".\n. We use https://github.com/cweill/gotests to generate these tests.\nPlease log an issue in the repo for gotests. @friends110110 You need to provide more information that just a question :)\nPlease provide sample code with repro steps and screenshots. @paulviks you are referring to inline values.\n@friends110110 Is that what you meant?\n. @rpeshkov What version of the Go extension are you using? Can you ensure it is the latest i.e 0.6.65 ?. Ah! looks like an undefined env is causing this.\nI have pushed a fix in which will be out in the next update which will be some time at the end of next week.\nUntil then the workaround is to set env to {} in the debug configuration\n. Nice work @uudashr!. @uudashr The Test listPackages test timesout and so fails for the tip consistently in travis ( I re-ran a couple of times).\nI dont have Go tip, you have any ideas about this?. Are you using the language server?\nIf not then guru is the tool being used to find the references.\nCan you use guru referrers command from the command line and see if you are able to get references from other file as well?. For finding offset, I have this extension: https://marketplace.visualstudio.com/items?itemName=ramyaraoa.show-offset\nIt will show the offset for current position in the status bar.\nYes, this is a guru issue. \nSorry couldnt help you much here. The PR for this has been merged and the feature will be out in the next release. This feature is now out in the latest update to the Go extension (0.6.69)\nThanks @m90!. Is the validation pkg in your case a vendor pkg?. Ok, I'll try it get this in next week. No problem @otto-md, thanks for getting back. Happy Coding!. Sure, we can have that as a fallback.\nWill try to get this in next week. There are 2 ways to do this:\n- Recursively check the children of the folder that was opened in VS Code looking for src folder\n- Or Look for src in the ancestors of the file that is currently open\nI wouldn't prefer the first as in the worse case scenario we will be doing a whole lot of file stats.\nThe only downside of the second is that GOPATH will still not be inferred if no file is open, which I feel we can live with.\nSo I am going with the second option.\ni.e if you open code . on the GOPATH or any of its ancestors, the GOPATH will be inferred only if any of the files under GOPATH is open in the editor\n. Fair enough, done with https://github.com/Microsoft/vscode-go/commit/5f5cad511eef380358683517c211bebd44721f16. This fix is now out in the latest update to the Go extension (0.6.71). Can you share exact steps? Do you have go.autocompleteUnimportedPackages enabled? . No problem, Happy Coding!. Well... I don't have a clue here especially because you also mention that you can repro this with a simple hello world program!\nYou have autosave enabled, so that would trigger vet for every save.\ngo tool vet is run to vet the code. I am not sure if vet.exe is run internally or you have some other extension installed. Do you have any other Go related extensions installed?\nUntil the problem is fixed, you can set go.vetOnSave to false to unblock yourself\n. @dahankzter Have you set go.vetOnSave to package or workspace ?\nThe only reason we use go tool vet . instead of go vet . is to give the user the option to use the settings go.vetFlags.\nWhen you say that go vet . is faster, are you saying so when comparing with go tool vet . ?\n. How does go vet ./... fare?. The perf improvements mentioned in https://github.com/Microsoft/vscode-go/issues/1215#issuecomment-343762633 are now out in the latest update to the Go extension (0.6.69). That shouldn't be the case. For now, uninstall and install it again, you should get the latest.\nI'll look into if there are any issues with extension update when installed manually using vsix. @jnewmoyer ./... does skip vendor directories. go vet ./... is valid way to use vet, go tool vet ./... is not. Try it.\n. Yes, but go tool vet . does not exclude vendor directories. I am not aware of any such shortcuts.\nEven if they were present, it would be a general VS Code feature than related to the Go extension.\nFor future reference, run the command Preferences: Open Keyboard Shortcuts to see all available shortcuts as well as commands to which you can add your own shortcuts. This issue was moved to Microsoft/vscode#34548. Slightly busy at work this week, I'll take a look and add my thoughts as soon as possible though.. @tylerb Work has been busy this month, I'll get to this PR later this week for sure. One reason I didnt add it to the current release was that I wanted to explore the new feature of notification msg for long running tasks which has the Cancel option.\nSee https://code.visualstudio.com/updates/v1_22#_extension-authoring\nThoughts? . My pleasure @tylerb! I am learning too :). Thanks @hankfanchiu!. @uudashr I have rebased from master. Can you check if everything is as you expected?\n. @uudashr  Also updated to use fs.stat to look for the main.go file instead of looking through files. Can you check if your test cases still hold good?. @uudashr I also moved the whole pkg guessing logic to the utils file to make it re-usable as well as unit testable.\nWhen you have some time, can you add unit tests for that function? For all the cases that you have in the comments?. @juicemia Its just the linter failing\n\nRun npm run lint on your branch and you will be able to see the same errors as well. @juicemia I went ahead and rebased your branch from master as there were some conflicts. You might have to delete your local branch and checkout from the remote again.\nSorry for the trouble, I usually work alone, so didnt think of the troubles rebasing might cause others :(. Thanks @juicemia!. @jnscode I used your code like this:\n```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    var path string\n    fmt.Scanln(&path)\n}\n```\n\nAdded a breakpoint at the fmt line\nWhen the breakpoint was hit, I was able to use the debug console and look at the value of path\n\nCan you share your repro steps as to what exactly you did to get the error?\n. The debug console can only evaluate expressions when a breakpoint is hit.\nThat's how delve works. Thanks for sharing your code.\nIt looks like you are trying to interact with your program via the debug console as stdin.\nThat is unfortunately not supported at the moment.\nThis is being tracked in #219 \nPlease follow that thread, we will update it once we have a solution.. Works as expected for me.. I tried on Mac and Windows.\nWhat version of delve are you using?\nCan you try running delve from the command line and see if it works as expected?\n. @dolmen both work for me. All args get printed\n@mitom Closing this issue as we havent heard back from you in a while. Sure that is doable and is pretty simple.\nPRs are welcome.\nThe change should be done here: https://github.com/Microsoft/vscode-go/blob/0.6.65/src/goTest.ts#L34\nYou can use editor.document.save() to save the document. @chaseadamsio Why so? When you explicitly click on the Run test code lens or use one of the test commands from the command palet, you are making a conscious decision to run the test and so saving the file makes sense. Am I missing something?\nIs it so as to not race with the Auto Save feature?. In the latest update to the Go extension, the files get saved when test is triggered.\nThanks @chaseadamsio for the fix!. What do you get when you run Go: Current GOPATH command?\nWhere have you set your GOPATH to /home/erik/workgo:/home/erik/git/ES/ES?. So you have set GOPATH to /home/erik/workgo:/home/erik/git/ES/ES in your .profile and to /home/erik/git/ES/ES in VS Code settings?. No problem @Erik-Blucher, glad you found what the issue was. Happy Coding!. cool!. This feature is now out in the latest update to the Go extension (0.6.77)\nThanks @buyology!. The different packages are compiled in parallel, so that output pane will continue to show the results as above.\nWhat we can do is remove the duplicates from the final results here: https://github.com/Microsoft/vscode-go/blob/0.6.65/src/goCheck.ts#L294\nThis should be an easy fix if anyone wants to give it a try. When mode is not exec and the program points to a file and not directory, dlv debug is run on the parent directory of the file. Wont that work for your single file case?. good point\n. @MZhoume I believe we need to check for the existence of the main function before running delve on the current file.\nTake the case of a main package with multiple files. Only one of them will have the main function and I believe delve can only \"run\" the file with the main function and not the others.\nCan you confirm?. The simplest way to do this is to update https://github.com/Microsoft/vscode-go/blob/0.6.69/src/debugAdapter/goDebug.ts#L283 to replace the below \nif (mode === 'exec') {\n    dlvArgs = dlvArgs.concat([program]);\n}\nwith \nif (mode === 'exec' || (mode === 'debug' && !isProgramDirectory) ) {\n    dlvArgs = dlvArgs.concat([program]);\n}\nThe catch is that this will break the debugging feature for folks who have given file paths to the program attribute and started debugging from a file that does not have the main function.\nThey will either have to update their config to point program to the file directory or start debugging only from the file that has the main function.\nTo solve this, we will have to parse the file, and add the check for the main function in the above if condition.\nPRs are welcome.\n. @chrislewisdev Yes, that sounds reasonable.\nI would suggest not to try to refactor and re-use the code in goOutline. It has the use of tokens and a few other specific code that relies on the vscode namespace. Feel free to run cp.execFile directly in goDebug file to parse the file\n. @festo Please subscribe to the PR #2051 that is trying to address this issue and you will be notified of the updates.. > To solve this, we will have to parse the file, and add the check for the main function in the above if condition.\nAbove was my conclusion in \nhttps://github.com/Microsoft/vscode-go/issues/1229#issuecomment-349152074. We no longer want to go this route as it can get expensive to parse files.\nInstead, below is the approach we would like to take to fix this issue:\n- When the program attribute points to a file, pass this file to the delve debug command instead of passing the import path to the package like we do today\n- When the program attribute points to a directory, we should do what we do today i.e pass the import path to the package to dlv debug\n- Update the default value for program attribute in goDebugConfiguration.ts file to be {$file} instead of ${fileDirname}\nPRs are still welcome. \nhttps://github.com/Microsoft/vscode-go/pull/2051 has been abandoned for now and therefore anyone else is most welcome to pick this one up. Am curious, why would you want to name a struct field the same as a keyword?\nFeels idiomatically wrong...\ncc @rakyll and @campoy for thoughts.\n. This issue was moved to atom/language-go#136. Quick suggestions are not supposed to work inside double quoted strings at all...\nThey do work inside ``.\nCan you give me an example?\nWhat have you set for editor.quickSuggestions setting?. You are writing SQL queries in backquoted strings in Go files?\nAre the table/column names Go variables? If not, then how would they appear in the completion lists?\nCan you give me a sample code that I can try this on?. what you are seeing are textual suggestions. You can identify them from the icon in the suggestion list. The icon says \"abc\"\nTextual suggestions are agnostic of the language. They are based on words already used in the document.\nTextual suggestions appear when there are no other language based suggestions to show.\nLanguage based suggestions should be disabled inside strings. In the Go extension, we have disabled it inside double quoted strings, but not inside `` which is actually a bug.\nAnd so you end up getting the textual suggestions inside the double quoted strings, but not inside the ``.\nI don't have a quick solution for this yet, but I'll keep it in mind.. One workaround is that when you are working inside the `` on your SQL strings, set the language mode to plain text (Click on the \"Go\" status bar item on the bottom right corner of the window -> In the pop up choose \"Plain Text\")\nThis will remove all Go related features from the Go extension to the current file.\nAnd when you are back to writing Go code, change the language mode back to Go.\nI know this is not ideal, but it is the only work-around I can think of as of now.. The old gopkgs got in when I merged the multi-root changes, Sorry abt that!. We use the grammar for Go from http://github.com/atom/language-go\nThe scope for X in the above example is variable.other.declaration.go where as for Y the scope turns out to be just source.go. Thus the change in color.. This issue was moved to atom/language-go#134. If you disable auto-indenting (by setting editor.autoIndent to false), then typing : makes the suggestion list disappear as it should.\nSomehow the adding of the indent is messing up the sequence of events.\nNice catch!\nBy the way, we don't need 2 switch statements for this. I am able to repro even with a single one.. This issue was moved to Microsoft/vscode#34897. I resorted using go test -c to get build errors as I noticed that go build was ignoring the test files in the package\nI was trying to get build errors for the entire package regardless of which file in the package was being edited.\nYou bring up a good point where this approach fails.\n. Made a change such that\n\nBuild errors in test files will show up if any test file in the package is being edited & saved\nBuild errors in non-test files will show up if a non test file in the package/workspace (based on whether go.buildOnSave was set to package or workspace) is being edited & saved\n\nCan you help testing this out? All you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- Reload VS Code window. BuildFlags are used by go test by default.\nIf you don't want to do so set go.testFlags to [] or a non null value\n. @apiarian Let's use #789 to track this.. @caibirdme What package was it?\nDo you need any help here or can I close this issue?. Well, unless I can repro it, I cant say for sure what the solution should be \n. What's your GOPATH?\nIs your BNB folder under GOPATH/src?\nCan you run go build on your package from the terminal and see if you get errors?. you don't need a main.go file to run go build\nJust run go build . in the BNB directory. The error is showing up in the test file.\nDo you see the error in non test files as well?\nAlso, open the output pane, choose the \"Go\" channel from the dropdown. You can see the output of build/lint/vet there. Can you share what you see there?. Ah! You have turned build,vet,lint on save features off. That's why there is nothing showing in the output pane.\nThe errors you are seeing is coming from the live errors which is coming from the tool gotype-live.\nCan you run gotype-live from the terminal for your package and see if you are getting the same error?\ncc @tylerb who integrated gotype-live in the Go extension. That's good to know @DarthPestilane \n@tylerb Any idea why gotype-live was not able to find the vendor projects?. @DarthPestilane Until we know why gotype-live behaves the way it does, as a workaround I'd suggest to turn off the live errors and enable the build on save feature instead. Closing this as this is an upstream issue with gotype and we there is nothing much we can do from the extension's perspective.. @btracey How about this?\nhttps://github.com/Microsoft/vscode-go/commit/632083c48e15ecda7e1b9ab593a64b50e528af27#diff-b9cfc7f2cdf78a7f4b91a753d10865a2. This feature is out in the latest update to the Go extension via the new setting go.useCodeSnippetsOnFunctionSuggestWithoutType\nThanks @alexkohler!. @zmb3 Thoughts? I see the same when using gogetdoc as well.. Sorry about that @zmb3, I was so sure I had changed the setting to use gogetdoc when testing :(\n@m90 godef gives the location and signature of the definition. We pass this to godoc to get further doc info. \nPlease open an issue in the godef repo so that @rogpeppe can take a look there\n1025 is tracking the feature request to make gogetdoc the default option as there are quite a few cases where the godef+godoc combo doesnt give the right results\nClosing this issue for now as using gogetdoc gives you the right results. Can you share your debug configuration from the launch.json file?. And what is the value for ${workspaceRoot} ?\nIs the file telcomapp.cn\\redis\\redisWrite.go under the ${workspaceRoot}?\nLooks like you have set 2 breakpoints\n1 in the redisWrite.go file\nThe other in the apkana.go file\nI am assuming the first one is in a external package and the second is in the package you have opened in VS Code.\nIs this correct?\nCan you remove the breakpoint from the redisWrite.go file and try again?\nThis time with breakpoints only in  apkana.go file?. In the remote machine what is the location of the redisWrite.go file?\nIs it under the same GOPATH as apkana.go?\nAnd in your local machine you have the 2 packages in 2 separate GOPATHs?. > But I still wonder why the local debug can step into the external package, but the remote one can't\nwhen debugging remotely, we need to map the remote filepath to local paths\nWe use GOPATH to make the mapping or fallback to GOROOT which failed\nWhen debugging locally no mapping is needed, so things worked.\nAnyway, am glad things got resolved for you.\nHappy Coding!\n. If I make the change as @windzhu0514 suggested, then I get an error saying that buildutil expects \"golang.org/x/tools/go/buildutil\" \n\nSo I dont see how making that change will help\nNote that its not just go-outline, a bunch of other tools are also failing\nI dont own the other tools, so changing the import is not the solution here.\nThis is indeed a network problem\n. You can use tasks for triggering build/lint on demand\nRun Tasks: Configure Task Runner to create a tasks,json file in your workspace (Choose \"others\" in the dropdown) and then edit it to create tasks for build/lint etc\nFor example see: \nhttps://github.com/Microsoft/vscode-go/issues/1015#issuecomment-331250277\n. what is the value that you have set for go.testFlags ?\nAre you seeing this error when building or running tests?. Try\n\"go.testFlags\": [\n        \"-ldflags\", \"-X mypackage.myvalue=./\"    \n]. \ud83d\ude04 Happy Coding!. Can you give me a sample code where I can test this?\nSorry I don't do a lot of Go coding myself and haven't used build tags much.. I spent an hour trying to reproduce your first problem, but couldnt repro. Turns out this is not an issue in Windows. Then I tried on my Mac and was able to repro the issue instantly.\nSo, please confirm, the problem seems to be that delve requires buildFlags to be a single string which is space separated and go test requires it to be an array (because we use cp.execFile)\nIn that case, your initial solution of converting the entire buildFlags to string should help in both issues correct?\n. @ka2n \nHey, my mistake, I am able to see the issue in Windows as well.\nI had an old debug.test binary lying around and the debugger was using that so couldn't find the error before.\nI cleaned my repo and now I am able to repro in Windows as well.\nI made a commit to your branch for quoting both the flags and the flag values and that seem to work well for all cases\nSo your settings would be\n\"go.buildFlags\": [\n    \"-ldflags\",\n    \"-X mypackage.myvalue=./\"\n],\n\"go.buildTags: \"noci\"\nBoth \"run tests\" and \"debug tests\" codelens should now work.\nCan you give it a try?. Awesome, thanks for working on this @ka2n \nI'll release an update later today. Have you set go.lintOnSave and go.vetOnSave  to workspace? If yes can you  try setting it to package. Are you working on a large project? \nDo you see this happening even when working on smaller projects?\nDo you have multiple windows open?\nDo you have auto save enabled?\n. @roadrunner Do you have auto save enabled?. We spawn new process each time we want to vet/lint/build code.\n1265 tracks closing of existing processes before starting new ones.\nThat should help here. The fix for this is out in the latest update to the Go extension. Thanks @uudashr for both logging and fixing this issue!. Thanks @alexkohler!. Currently debugging when reading from stdin is not yet supported. \nSee #219\nI'll try to get to a solution for that in the coming month. @edwinprojects You mean by using the Debug: Start without Debugging command or Ctrl+F5 ?. Thanks @ ndrewnee!. @uudashr Yes we support Go 1.5. > Import internal package behavior works differently to each file (resident in a package) that try to import.\nIts different for each package, but not for files in the same package correct?\nThe logic we have in place in getImportablePackages to return the relative paths for vendor pkgs also works differently to each package. Which is why it takes the filePath as a parameter.\nIf filtering for internals is inside the GoCompletionProvider, then the filtering for vendors should also be inside GoCompletionProvider\nBut I intentionally chose not to do so for vendors to keep things simple.\nThe cost of keeping the filtering out of GoCompletionProvider for users would be that the first time they edit a file inside a package, they might get suggestions from vendor or internal folders that they shouldn't get.\nBut the cache will catch up, and any further edits in the package will get self corrected.\n. > And is it possible for the autocompletion... replace or update the completion items while it shown? Seems not possible.\nNo that's not possible. great, thanks @uudashr :). The diagnostics from build/lint/vet on save features were not showing up, fixed with https://github.com/Microsoft/vscode-go/pull/1258/commits/99f0957a247225f2bde70e3a70c11d88ff66b644\nThe linting result from the command was removing the build errors from before, fixed with https://github.com/Microsoft/vscode-go/pull/1258/commits/ef737c9891cfde5ed879a08aac50d5c3129f07af. Merged, thanks @ndrewnee!. Merged, thanks @ndrewnee!. Thanks for bringing this up @m90, I appreciate it.\n@uudashr has put in a fix to show both \"yourpkg\" and \"yourpkg_test\" in the completion list.\nI'll release an update in a few days. Until then to make use of the fix you can\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix and reload VS Code\n. We use godef by default for the Go to Definition feature which seems to have issues when dealing with type aliasing. See https://github.com/rogpeppe/godef/issues/71\ngogetdoc on the other hand works just fine with type aliases\nYou can change the setting go.docsTool to gogetdoc until we get an upstream fix for godef. @ssoroka Are you using the language server feature?. Try running the gogetdoc tool from the terminal directly\nIt takes file name and offset\nYou can use this extension https://marketplace.visualstudio.com/items?itemName=ramyaraoa.show-offset to get the offset under the cursor. @paulviks Current version is 0.6.66\nI just went back to 0.6.65, and this issue still exists. So its not the last update that has caused this issue.\nActually the root cause is that, completion of unimported packages never worked if there was more than 1 match. In your case template matches with both html/template and text/template.\nThere is no clear solution here... What should the completions have? Symbols from html/template or text/template ?\nDo you see this issue with any other sub package from stdlib?. No problem,  Happy Coding!. @lmtyler Can you share some screenshots for Mac vs Windows?\nImport statements get added by the Go extension in the below scenarios. Do you see this issue in all the below cases or only a few?\n- when the file is formatted either manually or on save\n- when the Go: Add Import command is used\n- when auto-completing the unimported packages or symbols from unimported packages . good to know, Happy Coding!. @selfup \nI am trying to repro this. \n\nRan go get github.com/selfup/go-cache-http\nOpened the go-cache-http folder in VS Code\nRemoved the lib \"github.com/selfup/go-cache-http/lib\" line from the import block in main.go file\nSaved the file\n\nInstead of getting the error on missing import, the missing import got added when I saved the file.\nThis is because the default formatting tool goreturns adds missing imports and removes unused imports.\nIs there anything else I should have done to get a repro?\n. No problem, Happy Coding!. @jhaynie Sorry for the delay in responding to this issue.\nThats the code coverage showing up.\nYou might have go.coverOnSave enabled.\nDisable that, and those highlights should go away.\nLet me know if that doesn't work. How did you end up enabling the code coverage any way :) ?. The default value for go.coverOnSave setting is false.\nThe below is the description of the setting that shows up on hover.\n\nRegardless, am glad that is resolved now. Happy Coding!\n. Thanks @arbourd :)\n@Jeyanthinath Did you restart VSCode after making changes to gopath in the .bashrc? If not, then those changes cannot show up.\nClosing this issue for now.\nIf the go path set in .bashrc still doesn't show up after you removed the gopath from the VS Code settings and restarting VS Code, feel free to re-open the issue here.. Thanks!. > it's a common pattern in this extension to make multiple tools available (although maybe not necessarily in that case) for the same task\nBut the playground doesn't fall into this category. There is only 1 tool that can be used.\nFeatures in the Go extension fall into 2 categories\n\nThose that register providers and talk to VS Code apis exposed to extensions. Eg: Formatting, Completion, Definition, SignatureHelp, Hover Info, Rename etc. These follow the \"implement class -> instantiate class -> use the instantiated class to register the provider\" pattern\nAlmost all other features are registering a command and providing a callback to call when the command is executed. These follow the \"define a function -> export it\" pattern\n\nIn the interest of keeping similar pattern in the second category here, I'd very much appreciate it if we do not use the OOP like approach for the playground feature.\nOf course, I am open to consider a refactoring on a bigger scale where we move all the other features (falling in the second category) to a OOP approach. But until then, I'd prefer to keep things similar. . @m90 Thanks for your work on this.\nI have refactored the code a bit to enable having the unit tests you earlier had.\nIn case you are interested: https://github.com/Microsoft/vscode-go/pull/1270/commits/eb8bfdb48b60295994b8648f122332f20f9394a7\n. @srcbase This is known to happen in the latest release if you are working on a Go file but you do not have any folder opened in VS Code.\nCurrent workarounds until I release the next update are\n- Open the folder containing the file you are working on in VS Code and then continue as usual OR\n- Install the Go extension from master which has the fix for this issue. Steps for this are\n     - Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n     - Run code --install-extension Go-latest.vsix from the command line\n     - Reload VSCode. > Last key typed repeats itself about 30 times\nThat scares me\n\nif gocode is having trouble or takes a while to respond, VSCode locks up \n\nWe could kill the process that calls gocode if it takes say more than 3 seconds.\nAnd if this happens often, then we could disable completion and notify the user to check whats wrong with gocode.\nThoughts?. Thanks @tylerb for getting back.. Sorry about that.\nYes, that's true. We should have a timeout on the process that is spawned to run gocode. I'll have to get a repro to understand whats happening behind the scenes\nI'll take a look when I get some time. Wow, I would have never guessed that\nThanks for looping back @tylerb . Argument hints are currently provided when an already defined function is called.\nIn this case, you are defining a function of a particular type.\nIf we were to use a language server then this may be possible, but in the current way the Go extension is designed (where we shell out process to run Go tools), I don't believe this is possible. \nIf you have any ideas how to go about this I would be interested to hear your thoughts. Closing this issue as there is nothing we can do in the Go extension for this at the moment. Hey @charlires \nThe command 'go.tools.install' not found tells us that the Go extension failed to get activated.\nDid you recently install the Go extension directly from a vsix file?. Can you try the below?\n- Close VS Code\n- Run gocode close\n- Start VS Code and start typing in the bigger project.\nIf this still doesn't help, try disabling the setting go.gocodeAutoBuild. Did you run gocode close?\nYour settings look fine. One comment though..\nYou have set go.toolsGopath to the your GOPATH/bin. \nThat doesnt make sense. If you want to use the Go tools from your GOPATH, then there is no need to set the go.toolsGopath setting\n. That must have reset something ...\nAm glad that its better now, Happy Coding!. @esemplastic Can you provide a smaller code sample that I can try to repro this on?. Thanks @esemplastic, I can repro\nThe issue lies with gocode and I see that the corresponding issue there is being looked at.\nWill close this issue as you have the upstream one to track the problem.\nWhen gocode is fixed for working with type alias, please drop a comment here so that others who might encounter the same issue will know to update gocode\n. @btracey Good catch!\n@alexkohler Can you take a look? Should be a simple fix.. Thanks for reporting Nate\nI have pushed in a fix and will be releasing an update soon. In the meantime, can you help me with testing the fix?\nI tested on some simple code that I have, but since these are API changes, another set of eyes would help.\nIf you are up for it, then\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code-insiders --install-extension Go-latest.vsix\n- Reload VS Code Insiders\n. > for some reason it loses all my settings\nThat shouldn't be happening. If you are able to get a repro, please do log an issue in the vscode repo\nAs for testing the fix, the API changes work on the stable build as well. So you can follow the same instructions in https://github.com/Microsoft/vscode-go/issues/1280#issuecomment-337769920 replacing code-insiders with code. Thanks @slomek !. Closing as per https://github.com/Microsoft/vscode-go/issues/789#issuecomment-409316549. Thanks @alexkohler!. @willfaught Do you still see this? I am not able to get a repro.. We do this currently if we see a change in the version of Go being used.\nDoesnt that help?\n. The first time you open a VS Code window after changing the Go version, VS Code would give you a prompt saying \"Your Go version is different than before, few Go tools may need re-compiling\" and an option to update all the dependent tools.\nBehind the scenes, we store the Go version being used in local storage. Whenever you open a new window or Go project, the Go version is checked. The feature will be out in the next update to the Go extension. This feature is now out in the latest update of the Go extension (0.6.70). In this case what does suggest.type have?. by non-locally, you mean in another file in the same package?. > The suggest.type of the same function declared non-locally is also func(k string)\nWouldn't the non-locally declared function have the class as func?\nSo && suggest.class === 'func' could be replaced with && (suggest.class === 'func' || (suggest.class === 'var' && suggest.type.startswith('func')))\n  . This feature is now out in the latest update to the Go extension (0.6.80). There are multiple layers at play here\n\nCompletions do not appear as you type when inside comments. This is a VS Code feature. You can tweak this by editing the editor.quickSuggestions setting\nWhen you do force a autocompletion, the Go extension intentionally does not invoke gocode for suggestions when typing inside a line comment as it was considered as noise\nFunnily gocode does get invoked when you are inside a block comment. This is because there was no simple way of figuring out the start and end of the block comment without parsing the whole file contents\n\nOne solution I have in mind is to invoke gocode for line comments if editor.quickSuggestions supported comments. i.e if editor.quickSuggestions was set to true or editor.quickSuggestions.comments was set to true, then the Go extension will return suggestions when inside comments.\nOr we will have to introduce a new setting just to enable suggestions inside comments\nThoughts?. Closing this in favor of #1005. Your GOPATH is under the GOROOT\nIt is not advised for GOPATH and GOROOT to be the same or under each other\nTry setting GOPATH to another location, reload VS Code and run the command to install tools again.\nPro Tip: To keep the Go tools that the Go extension for VS Code depends on separate from your Go projects, it is advised to have a separate location for the tools. You can do this by providing a different path for the tools via the go.toolsGopath setting. To enable autosave based on file type, please log an issue in the repo for vscode: https://github.com/Microsoft/vscode\nIf you are looking for error feedback as you type, then try enabling the live error feature by add the below in your setting\n\"go.liveErrors\": {\n    \"enabled\": false,\n    \"delay\": 500\n  }\nThis will use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay\n. If a file is being opened programatically say via a command registered by an extension, then the extension can use custom uri and register a content provider for the same which will result in the file being opened in a read only mode.\nBut we are talking about files that are opened normally, from the file explorer or quick open etc. There are no apis that the extension can use to let the core know that the file needs to be opened in read only mode.\nOne thing we (the Go extension) could do is to listen to the change event on the document. When this event occurs, check the first line for ^// Code generated .* DO NOT EDIT\\.$ and provide a notification.\nThis is pretty easy to do and PRs are welcome.\nI can help if anyone wants to give this a try.\nHint: https://github.com/Microsoft/vscode-go/blob/0.6.67/src/goMain.ts#L135  removes test coverage when there is a file change. This is now out in the latest update to the Go extension (0.6.71). @gregmarr \n\nIs there any way to make this notification go away when I close the file, or automatically time out?\n\nYou can always press the ESC key to make any notification in VS Code go away. There is no clear way to set timeouts on notification, but there is a feature request for the same in VS Code. See https://github.com/Microsoft/vscode/issues/23684\n\nI've also seen this appear when I haven't tried to edit the file\n\nThat's worrisome, its only supposed to show up on any change to the document. Please report an issue if you are able to get a repro consistently. @gregmarr Does that happen often?. The extension not getting activated in Windows until you open a folder was a bug.\nThe latest update (0.6.67) has the fix for this.\nSorry for the inconvenience. To test this feature, do the following:\n\nDownload https://github.com/ikedam/vscode-go/blob/feature/toolCommands/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\nAdd the setting go.toolCommands as described up above. Thanks for verifying @ikedam and @jlindsey \nOn second thoughts, I am wondering if there are really any benefits of having this customization feature for other tools (not go, but other tools like godoc, gorename, goformat etc)\nThis feature provides 2 benefits. One is the ability to use a totally different tool, the other is to use the same tool from a different location. \nEach of these tools take in very specific input parameters. What are the chances of having another tool that takes in exact same parameters? The benefit of different location is available even today. If you have the tool under the PATH variable, then it will get picked up.\nI propose to have this customization feature just for go.\nThoughts?\n. I'll have to go back in history to see why the two were implemented differently to begin with :) So that we dont regress anything. This is merged in master.  Please give it a try by following the below steps and share any feedback you have.\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\nUse the setting go.alternateTools for your needs of mapping the tools as needed. This feature is now available in the latest update to the Go extension (0.6.83). Thanks to you too @ikedam!. @jmmcatee Thanks for reporting. Please see https://github.com/Microsoft/vscode-go/issues/1271#issuecomment-336198657. @dxvgef I am guessing from your latest comment that completion is working as expected.\n\nWe use gocode for getting completions which work only if the packages are installed.\nCheck if the package for which you want completion exists in your GOPATH/pkg folder. Thanks @Daylien!\n@dxvgef Add \"trace\": \"verbose\" to your debug configuration and start debugging.\nIn the debug console you will see a like Running: followed by path to the dlv binary and all the arguments being passed to it.\nCheck if reflects what you expect\nAlso please do try the workaround by @Daylien and let us know if that helps. @dxvgef Closing this issue as we havent heard back you in a while. @sigwinch28 The api for applying decorator on the gutter takes absolute path to the svg file, so generating them during runtime is not possible.\nHow about using a pattern in the svg instead to denote either covered or uncovered areas?. Also, we have a setting to highlight only the covered areas or only the uncovered areas.\n\nIf you set the setting go.coverageOptions to either showCoveredCodeOnly or showUncoveredCodeOnly, then you dont have to try and differentiate the 2 colors. The gutter or the highlight will appear only for either covered or uncovered areas.\nDoes that help?\n. @sigwinch28 Yes it is very much possible to use different sets of svgs based on color schemes, I just don't know what colors to use :)\nIf you can help me with which colors make sense, then we can have a setting to choose the color scheme for the coverage. @Mistobaan Sure that's a good suggestion\nWe have the setting go.coverageDecorator for which valid values are either gutter or highlight. We can extend this and make it accept an object as well. For eg:\n\"go.coverageDecorator\": {\n    \"type\": \"highlight\",\n    \"coveredColor\": \"rgba(64,128,64,0.5)\",\n    \"uncoveredColor\": \"rgba(128,64,64,0.5)\"\n}\nPRs are welcome. Thanks to @kentquirk, this feature is now in.\nTo give it a spin before I release an update,\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\nThen play with the go.coverageDecorator setting to tweak as needed. \n@kentquirk I have updated your comment above to include the new names for the colors for the covered/uncovered highlights\n@dcormier @sigwinch28 Please give this a try and let me know which gutter styles work the best. \n. This feature is now out in the latest update to the Go extension (0.6.81)\n. @buyology I went ahead and made the refactorings myself, hope you dont mind.\nGreat work!. Thanks @wkalt. See the abc in the icon next to the suggestions? That denotes textual completions. They are based on the words appearing in the document.\nTextual completions are triggered (by VS Code, not any extension) only if there are no other completions from any of the providers.\nWhich is an issue because the completion provider from the Go extension should have provided some completions.\n\nDo you have gocode installed? Do you see it appearing in the list of running processes when you type in a Go file?\nIs it an issue just with the current Go project you are working on? Can you try in a simple single file Go program?\n. Then its the case of missing tool.\nI am unsure how you could have landed in this situation though.\nClosing this issue as you are now unblocked, Happy Coding!. Thanks for reporting @avoidik \n\nThe fix for this is in the master branch.\nWill be releasing an update this week.\nSee https://github.com/Microsoft/vscode-go/issues/1271#issuecomment-336198657 to get the fix before the release. - What is the version of VS Code you are using? The Go-latest.vsix needs VS Code 1.17.0 or higher.\n- Does debugging work when you pass the GOPATH in the env property in the debug configuration in the launch.json file?\n- The using GOPATH trace matches with your expected GOPATH?\n\nOnce again, all my own code are not under GOPATH, as I want to distinct my own code from those I get from go get\n\nHere are you referring to the tools the Go extension depends on and downloads using go get? If yes, then you can use the go.toolsGopath setting to have a separate location to store all the dependent tools.\n\nHowever, under my normal file system, the files are just fine. E.g., both ls /path/to/repo/gitwork/src/github.com/suntong/dnstools/dnstools_main.go and file /path/to/repo/gitwork/src/github.com/suntong/dnstools/dnstools_main.go works just fine.\n\nAre these paths where the file physically resides or is it a symlink?\nTo go back to the old version, uninstall the Go extension and install it again from the marketplace.\n. @suntong I have published an update to the Go extension.\nIf you are not able to debug, then pass GOPATH via the env variable in the launch.json file.\nOnce you are back from your vacation, we can look into why you are not able to debug using the latest update. You can always go back to the version you want by getting the vsix file from the Releases tab\nFind the release you want, there should be a vsix file that you can download.\nAlso add the setting \"extensions.autoUpdate\": false else, the extension will get auto-updated the next time you reload VS Code.\nIf you pass GOPATH from the launch.json it should definitely get picked up.\nSince I cannot repro your issue, I dont know where to begin with to fix the issue for you.\nThe best approach right now is to help you debug the Go extension and see what GOPATH is being used and if that's the right one or not.\nIf you are up for it when you have some time, then follow the steps at Building and Debugging the Go extension\nThen, add a breakpoint at https://github.com/Microsoft/vscode-go/blob/0.6.69/src/goDebugConfiguration.ts#L48. That's the debug config from the launch.json file.\n. > I think the latest VS Code no longer works with older go plugins.\nThat's right. The older debug APIs were deprecated in VS Code 1.18. So debugging using older Go extensions in VS Code 1.18 is not possible.\n\nplease try to download the code https://github.com/suntong/hello-world-go into /tmp/hello-world-go, and try debug there\n\nAnd what should be the GOPATH in this case? Are you able to repro the issue without symlinks?\nCan you follow the steps in https://github.com/Microsoft/vscode-go/issues/1307#issuecomment-349143688 and see why the GOPATH from your launch.json is not getting passed?\n. > please try to download the code https://github.com/suntong/hello-world-go into /tmp/hello-world-go, and try debug there\nWhen I tried this using the default debug config from launch.json, the program ran successfully, but the breakpoints were not hit.\n\nFurther, after adding \"trace\": \"verbose\", I can see the unknown file: /private/tmp/hello-world-go/main.go as error message when the delve tries to create the breakpoint\n\nIs this the same that you see?. @suntong Weirdly if I clone your example (or any simple single page program) to some other folder (not under /tmp) I don't see the issue. Do you specifically use /tmp or does this issue occur no matter what the folder is?\n@selam Is your case the same? i.e code not under $GOPATH and under /tmp?. Now I am not able to repro!! Am using the same cloned repo, VS Code version, delve version and Go extension version as when I did get a repro as mentioned in https://github.com/Microsoft/vscode-go/issues/1307#issuecomment-349540642\n@suntong @selam Can you tell me using \"trace\": \"verbose\", if the GOPATH printed to the debug console when you pass the GOPATH as env var in the debug config vs when you don't pass the GOPATH as env var in the debug config are the same or not?\nAlso, in the debug configuration that you are using, what is the value for program?. @selam, @suntong,\nI compared the debugging related code of the extension between the versions 0.6.66 and the latest 0.6.69. The only difference is the GOPATH being used by the debug process\nIn 0.6.66:\n- If GOPATH was passed in the debug config, then that is used \n- Else if GOPATH was set as env var outside VS Code and the path in the program attribute in the debug config falls under this GOPATH, then that is used\n- Else we infer the GOPATH from the path in the program attribute in the debug config. For eg: if the path is /Users/me/src/github.com/myproject/main.go, then the GOPATH is inferred to be /Users/me\nIn 0.6.69:\n- If GOPATH was passed in the debug config, then that is used as before\n- Else if the command Go: Current GOPATH is returns any GOPATH, then that is used\n- Else we infer the GOPATH from the path in the program attribute in the debug config as described before\nSo based on this, here are my follow up questions:\n- When using the latest Go extension, is the GOPATH printed to the debug console when you pass GOPATH as env var in the debug config different from the one printed when you don't pass it as env var?\n- In both above cases, compare the GOPATH printed in the debug console with what you get by running the command Go: Current GOPATH\n- Have you enabled the go.inferGopath setting?\n- What is the path of the main folder opened in VS Code? \n- What is the value of the program attribute in the debug config? . @suntong First off, thanks for your patience \n\nYou said the debugging broke only under /tmp, now you are saying you are not able to repro any more. Does it mean even the /tmp is working for you? If so, what changes you have make to cause this?\n\nI am using Go 1.9.2 in Mac OS X Yosemite with delve 1.0.0-rc.1 installed via home-brew: No changes were made to these\nI work on and off on both VS Code 1.18.1 (stable build) and VS Code 1.19-Insiders (which gets updated every night) using the latest version of the Go extension on both.\nWhen debugging broke for me as described in https://github.com/Microsoft/vscode-go/issues/1307#issuecomment-349540642, I don't recall if I was using the VS Code 1.18.1 or 1.19-Insiders\nWhen I couldn't get a repro yesterday as I mentioned in https://github.com/Microsoft/vscode-go/issues/1307#issuecomment-350527706, I don't recall if I was using VS Code 1.18.1 or 1.19-Insiders\nRight now, debugging is broken for me (when using /tmp) in my Mac OS OX VS Code 1.18.1 but not in 1.19-Insiders.\nDebugging works fine in both VS Code 1.18.1 and Insiders if the code is not under /tmp\n\nMy advice, If you really can't think of anything that impact the debugging behavior, then don't touch your current environment, and start everything afresh.\n\nFrom your answers to my questions, I really can't think of any changes made post 0.6.66 that can impact debugging.\nI started fresh and I still cannot repro the issue. Here are my steps:\n- Fresh new parallel using Ubuntu 14.04 in my Mac OS X Yosemite\n- Installed go 1.9.2 and by default GOPATH would be /home/parallels/go\n- Cloned your sample repo http://github.com/suntong/hello-world-go under /tmp and opened it in VS Code 1.18.1\n- Installed Go extension and installed all Go tools using the Go: Install/Update Tools. This installs delve from the master branch with version 1.0.0-rc.2\n- Opened main.go file, created breakpoint, press F5: Breakpoint is hit successfully. No launch.json file created\n- Deleted the debug binary that got created in the previous step.\n- Pressed the gear icon in the debug viewlet that creates a launch.json file with default debug config where program points to ${fileDirname}\n- Opened main.go file, created breakpoint, press F5: Breakpoint is hit successfully. \n- Downgraded delve to 1.0.0-rc.1 (by creating a branch from https://github.com/derekparker/delve/commit/f6091694b6f8516bc1d4e5241fdb51e20dd04719 and running go install github.com/derekparker/delve/cmd/dlv) => everything works\n- Upgraded delve to 1.0.0-rc.2 (by creating a branch from https://github.com/derekparker/delve/commit/a7d1797b0f1a45eee18943504ef60d69bd521f56 and running go install github.com/derekparker/delve/cmd/dlv)  => everything works\n. @suntong \nSo summary from previous comment is that I can repro the issue only when code is under /tmp (other places are fine) and when using VS Code 1.18.1 (Insiders is fine) with latest Go extension on my Mac OS X (Ubuntu 14.04 in parallel is fine)\nCan you try on VS Code Insiders? You can get it from https://code.visualstudio.com/insiders. Also, no issues in Windows either. That's great to hear @suntong :)\nThere is an issue tracking the automatic deletion of that debug binary that gets created, I'll make sure to work on it in the new year, to avoid such scenarios\nHappy Coding!. Ok, lets try running dlv directly on the file \n- Open the file goDebug.js under ~/.vscode/extensions/lukehoban.go-0.6.69/out/src/debugAdapter.\n- Find the below code\nif (mode === 'exec') {\n      dlvArgs = dlvArgs.concat([program]);\n }\n- Replace the if condition with if (mode === 'exec' || !isProgramDirectory)\n- Change the program value from ${fileDirName} to ${file} in your launch.json file. I cloned your repo to a non /tmp location\nCopied it to a couple of other places.\nI am able to hit the breakpoint in all cases as well as stepping into SayHello using the same launch.json as in your repo\n. - I start vscode from the terminal using code .\n- Each time I opened new instance of vscode. I didn't add them all to the same workspace\n- I used your launch.json file as is. No changes.\n- The change of if (mode === 'exec' || !isProgramDirectory) doesn't make a difference if program is pointing to a directory. It only matters if program points to a file. Regardless, when stepping into SayHello, I tried both with and without this change.\nThings to note:\n- I am now using VS Code Stable 1.19 that was released yesterday\n- I can still repro the issue when I use your latest code from /tmp as is (from all other locations, everything works fine)\nQuestion:\nWhen you add \"trace\": \"verbose\" to debug configuration, you can see a line in the debug console of the form debugger.go:97: launching process with args: [...../debug]. \nDoes the path in this line match the path that shows up in the Error on CreateBreakpoint: unknown file: line?\nIn my case I see the former as /tmp/hello-world-go/..., but the latter as /private/tmp/hello-world-go/....\n. Here is the pattern I can find\n\nIn all cases where breakpoint was not hit, the log for debugger.go:97: launching process with args: had the path /tmp/hello-world-go/..\nIn all cases where breakpoint was hit successfully, the log for debugger.go:97: launching process with args: had the path /private/tmp/hello-world-go/..\nHow are you running code?\n. Sorry, I don't understand.\nDo you mean to say that you first run code . and then navigate to different projects?. Can we chat live for further investigation of this issue? Ping me on the gophers slack and we can talk about what we can be the next steps. You can join at https://invite.slack.golangbridge.org. You can look for \"Ramya Rao\" there.. @denismp This is the extension for Golang, please log your issues with angular code in either the extension you use for angular or in the main vscode repo. @RajatBanerjee Sorry for not replying sooner, somehow the notification for this issue got lost in a sea of other notifications. Do you use symlinks as well?\n@arkanmgerges Looking at the logs you posted, your issue seems to be different from the one being discussed here and more likely related to #1752 which in turn was due to an upstream change in delve.\nPlease update your version of the delve which fixes #1752 \n@fcelda Thanks for confirming that there are no issues when there are no symlinks\n@suntong \n\nThat's very frustrating indeed.\nIt baffles me that why nobody cares to look into it, after it has been reported for so long, and even after the exact simple steps to duplicate the problem has been given, and it clearly is affecting everyone.\nSo currently MS VS Code is literately useless to the entirely Go community, and beyond, e.g., the angular 2 code that @denismp's writing, yet the Microsoft VS Code developers don't even give it a damn. Fantastic.\n\nPlease understand that I am the sole maintainer of this open source project and its not my full time job. So when there is an issue that I cannot repro even after all my efforts thats clearly documented above, there is nothing else I can do other than do a live debugging session via slack or other means. Which I did offer, and I didnt hear from you on slack or gitter. The offer still stands for you and the others on this thread, though not for the coming week as I am out on vacation.\nAlso, I refuse to accept the claim that this is affecting everyone. This issue is very specific to users who use symlinks as you have already concluded.\nThe angular issue could be due to a variety of unrelated reasons which is best resolved by logging an issue in the VS Code repo. And we dont know if @denismp has already done so and gotten the issue resolved. So please dont equate the two.\n. @ravirakesh You are attempting to do remote debugging, please log a separate issue for that. In the new issue, provide the debug configuration using. Also add \"trace\": \"verbose\" to your debug config. That will print logs in the debug console, share that as well, but in a separate new issue. @ravidborse I have created a new issue to track the problem you are seeing. Please see #2318\nAll, I am closing this issue as concluded in \nhttps://github.com/Microsoft/vscode-go/issues/1307#issuecomment-401467824 and \nhttps://github.com/Microsoft/vscode-go/issues/1307#issuecomment-401488275\nIf anyone sees this issue when using symlinks, feel free to ping me on the Gophers Slack channel and I can help you debug using the source code of this extension as I am not able to repro this.. Am assuming this is to ensure standard pkgs appear before the rest in the suggestions?. Sorry about that @Jetlum \nThe latest update to the Go extension (0.6.67) has the fix for this.\n. I've added a fix to take care of the null scenario, but am curious as to in which case it would happen.\nIf you see this again, can you please add more details here? \n. no problem, thanks for reporting though, Happy Coding!. That line of code is only hit when typing or when running the Go: Add Import command.\n. @chandradeepak Thanks for the detailed feedback. I'll try to address them as best as I can\n\n\n\nUnused variables and functions should be highlighted in gray color. Right now they are all in same color.\n\n\n\nRed for errors and Green for warnings is the standard used in VS Code. Using different colors based on the type of error will not scale well. The error/warning text shows up when hovering over the lines which has the error/warning as well as when using the F8 key to navigate between the error/warnings. This should help in identifying the unused variables and functions\n\n\n\nWe know clicking on field takes it to its definition. but if clicked on struct field should populate all the references for that field or a function . (this is  very useful)\n\n\n\nThe Find all references feature does exactly that when run on the struct field.\n\n\n\nFind all references is very slow when compared to other IDE's\n\n\n\nWe use the guru tool for this feature which tends to get slow on large projects or in Windows. Unless there is an alternative tool that does better, we cannot do much here.\nIf you are not on Windows, you can try the language server from Sourcegraph\n\n\n\ngo.gocodeAutoBuild\": false should be false by default . I spent 2 hours figuring out why intellisense was slow. Any new user who feels frustrated with intellisense will switch to other IDE's if they don't know how to fix it. \n\n\n\nSince version 0.6.69 of the Go extension that was released in late Nov 2017, go.gocodeAutoBuild is set to false by default. Reasons to do this were:\n       - The -i passed to go build ensures dependent packages are up to date\n       - The autoBuild feature of gocode has shown to affect performance in larger projects\n       - The gocode author's lack of confidence in the autoBuild feature\n\n\n\nIf i open a project called say sarama then the root folder should be sarama and there should be sub folders inside that . Now the root folder or the project directory is not shown. this is useful if you have multiple projects open we can immediately tell which is which by seeing the root folder .\n\n\n\nI do see the name of the root folder in CAPS in the file explorer. Below \"VSCODE-GO\" is the folder I've opened in VS Code\n\n\n\n\nImporting should import default and standard by default .  for example if i start typing fmt.Println it should import fmt . Now it asks for fmt package in various other github projects i have in my GOPATH. \n\n\n\nSince version 0.6.69 of the Go extension that was released in late Nov 2017, the pkgs from std lib do show up before the others.\n\n\n\nAlso we should be able to see the project view and the whole class view in visual studio which lets you browse through the structs and functions easily.\n\n\n\nTry the commands Go: Browse Packages, Go to Symbol in File.. and Go to Symbol in Workspace. These should cater to most of your needs. If you are still looking for a tree view on the side for the symbols in the current file, then you can try out the extension Code Outline\n\n\n\nRename a struct field should be easier . now it has some thing called symbol rename but it is difficult . In Gogland it allows to do shift + F6 and we can rename a field and all the reference of that filed would be automatically renamed.\n\n\n\nWe use the tool gorename to provide the symbol rename feature. If you have any trouble with it, please log an issue at https://github.com/golang/tools/\n\n\n\nThere should be option to disable the right side overview that is shown which shows code like a snake.\n\n\n\nI am assuming you are referring to the minimap. Run the command View: Toggle Minimap or use the \"View\" menu and then select \"Toggle Minimap\"\n\n\n\ngo debugger should be built in \n\n\n\nThe Go extension for VS Code uses a reputed set of Go tools from the Go open source community to provide all the language features. For debugging, we use delve. Do you have any issues using the current setup for debugging Go code?\n\nThe right side bar which gives a over view should have red, yellow highlighting the errors.\n\nAgain, I am assuming you are referring to the minimap which is a feature from core VS Code and extensions have no control over it. Please log a feature request at https://github.com/Microsoft/vscode/issues. . Closing this issue as I believe I have addressed all the points.\nHappy Coding!. @5dao Can you elaborate? I don't understand the issue.. Closing this issue as we haven't gotten any details about it. Any issues you see with javscript in VS Code as well as UX feedback, please log an issue at https://github.com/Microsoft/vscode. \nThis is the repo for the Go extension and so my comments below are with respect to Golang.\nI am able to see the Go to Definition feature is working as expected across Go packages.\nAs long as all the packages in question are under the same GOPATH, I dont see why this wouldnt work.\nDid you happen to try to navigate to a package outside GOPATH?. Any issues you see with javscript in VS Code as well as UX feedback, please log an issue at https://github.com/Microsoft/vscode. \nThis is the repo for the Go extension and so my comments below are with respect to Golang.\nI am able to see the Go to Definition feature is working as expected across Go packages.\nAs long as all the packages in question are under the same GOPATH, I dont see why this wouldnt work.\nDid you happen to try to navigate to a package outside GOPATH?. - Can you run the command Go: Current GOPATH and check if the result is indeed your expected GOPATH?\n- When you hover on symbols, do you get information on the method?\n- Are you using the language server (do you have go.useLanguageServer turned on in your settings?)\n. - From the menu select Help -> Toggle Developer Tools.\n- Click on \"Console\" when the dev tools open.\n- Clear all the errors if there are any\n- Cmd-Click on the method for which you want to get the definition\nDo you see any errors in the console related to running a command called \"godef\"?\n. The Go extension uses reputed Go tools from the Go open source community to provide most of the features. How IntelliJ works is beyond me. So lets not compare the two.\nThe Go to Definition feature is provided by the godef tool which as you can see is from the errors in the console is not able to find the definition for the symbol in question. \nCan you run that command from the terminal with the same arguments that you see in the console and see if it still returns the same error? If so, then I would suggest to log an issue in the repo for the godef tool. The fact that this (go to definition across packages) works for a lot of folks, but doesnt in your case alludes to something in your env setup or the code itself having issues with the godef tool.\nAlso, you can change the tool being used for finding definitions by adding the setting \"go.docsTool\": \"gogetdoc\". Let's see if the tool gogetdoc fares any better.\n. @benguild Any updates? . > It's the same with godef\nCan you elaborate? You get the same issue when you add \"go.docsTool\": \"gogetdoc\" to your settings? Did you try running godef from the command line as described in https://github.com/Microsoft/vscode-go/issues/1315#issuecomment-345335868?. Since you are getting the same issue when using godef from the command line, I'd say that the problem is with the godef tool itself.\nTry adding \"go.docsTool\": \"gogetdoc\" to you settings to see if that makes a difference.\n. Since you are getting the same issue when using godef from the command line, I'd say that the problem is with the godef tool itself.\nTry adding \"go.docsTool\": \"gogetdoc\" to you settings to see if that makes a difference.\n. Not really\nIf you are not on Windows, then another option is to use the language server. Add \"go.useLanguageServer\": true to your settings and read Language Server for Go. When you enable the use of language server, the other setting is ignored.\nIndexing and caching and re-using ASTs etc are all features that a centralized service can provide.\nBy default the Go extension to VS Code does not use a centralized approach, instead it relies on a variety of Go tools instead.\nThe language server by sourcegraph is the right step forward.. > is there a reason why that's not turned on or included by default\nInitially, there were some perf issues that had to be hashed out. Right now (its about a year since we introduced the language server support), it is quite stable but has limited features. We still don't have Windows support though.\nAre you sure the language server got installed in the right place? It should either be in your PATH or in your GOPATH/bin. If it is the latter, then make sure that its the same GOPATH as what you see when you run the command Go: Current GOPATH\n. We use the gorename tool.\nIt does have a -force flag which lets the rename operation proceed even if conflicts are reported.\nCan you try the gorename command from the terminal and see if using the -force  lets you rename in the presence of the errors?. Have you tried setting the go.testFlags to [\"-v\"] ?\nNote if you are using any buildflags via the go.buildFlags setting, then you will need to repeat it here.. Happy Coding!. @ls42 Thanks for reporting this.\nThe warnings are coming either from the linting or vetting.\nThe inner workings of either are out of scope for the Go extension.\nTry turning off linting and vetting one by one via the settings (go.lintOnSave and go.vetOnSave) to figure out which of the 2 is giving the warning.\nIf its the linter then log an issue at https://github.com/golang/lint if you are using the default linter. If you have changed the go.lintTool setting, then log the issue in the corresponding repo.\nFor vetting, we use the command go tool vet, so I am guessing you will have to log an issue in the go repo.\n. @pmkary Your linked image/gif is not getting loaded, can you add it again?. We use the gorename tool for the rename operation. Looks like this is what is doing the formatting.\nIt returns the diff that needs to be applied on the file, and Go extension applies the diff.\nCan you try running gorename from the terminal on your file to see if this is so? Pass the -d flag to get the diff as output\n. No problem, Happy Coding!. There is a command Go to Implementation. You can run it from the command pallet or assign a keyboard shortcut for it.\nGood point though, I'll look into adding more details in the README file. The default tool we use for finding definitions is godef which doesn't support dot imports.\nSee https://github.com/rogpeppe/godef/issues/19\nAs a workaround, you can change the setting go.docsTool to gogetdoc which should help. Sorry, that level of customization is not supported in VS Code.. The fact that this autoBuild feature can cause perf issues is not new. Luke had added the below note to the README when he added the completion feature to this extension\n\nThis extension uses gocode to provide completion lists as you type. To provide fresh results, including against not-yet-built dependencies, the extension uses gocode's autobuild=true setting. If you experience any performance issues with autocomplete, you should try setting \"go.gocodeAutoBuild\": false in your VS Code settings.\n\nThe maintainer of the gocode tool also calls this feature experimental\n\nIf true, gocode will try to automatically build out-of-date packages when their source files are modified, in order to obtain the freshest autocomplete results for them. This feature is experimental. \n\nNow, to @tylerb's point and the issue of #1272: That is a general issue of not letting VS Code get stuck when gocode misbehaves.\nTo @natefinch's point that this is a regression in 0.6.67: I want to dig deeper here. \nRecent changes in the completion area in the Go extension that can affect performance\n- To provide completions for symbols from unimported packages, the Go extension maintains list of all available packages under GOPATH. This is the only change in the completions area that can affect performance.\n- This list gets updated every 5 seconds or every completion request whichever is longer\nWith this, I can confidently say that there was nothing done in the recent release of the Go extension that could affect the performance of completions, especially the kind that gets solved by disabling the autobuild feature of gocode.\n@natefinch Can you run a few experiments to compare the experience between the older and the newer versions of the extension?\n- Run gocode close before each experiment\n- Install Go 0.6.66 or Go 0.6.65 using the vsix files that you can get from the releases page: https://github.com/Microsoft/vscode-go/releases\n- To install run code --install-extension Go-0.6.66.vsix\n- Try both enabling and disabling the go.gocodeAutoBuild setting\n. Since about half a year now, the buildOnSave feature of the Go extension has been building Go packages using the -i flag that builds and installs stale dependencies. Before this, there was no way to ensure dependent packages were not stale which in turn lead to using the autobuild feature of gocode by default in the Go extension to ensure fresh results in completions.\nAt present, the only advantage of using the autobuild feature of gocode is for the scenario where user has disabled the buildOnSave feature or a dependency became stale before user saved the file.\nWith the -i flag now ensuring that dependent pkgs are never stale, I believe its time to disable the autoBuild feature of gocode by default. Users can still enable it via the setting go.gocodeAutoBuild\nI didnt do this before as I wrongly assumed that completions from current package also depended on the autobuild feature to stay fresh (which I now know is not the case). As explained in https://github.com/Microsoft/vscode-go/issues/1323#issuecomment-342999705, the auto build feature will be disabled by default.\n. In the latest update to the Go extension (0.6.69), the autobuild feature of gocode is disabled by default.. In the latest update to the Go extension (0.6.69), the autobuild feature of gocode is disabled by default.. can you share a screenshot of the warning?. it will prompt only when activated on a go file. When you say you are trying to run the code, I am guessing you mean you ran the go run command from the integrated terminal\nWhen you run VS Code from the terminal, it inherits all the env variables from the terminal.\nWhen you run VS Code from a shortcut, the same doesnt happen.\nSee #708. GOPATH has nothing to do with finding the go binary.\nCan you run go env GOROOT in the below 3 ways and compare the results\n- Run it in an external teriminal\n- Close all VS Code instances. Run go env GOROOT in the integrated terminal in VS Code after running VS Code from shortcut\n- Close all VS Code instances. Run go env GOROOT in the integrated terminal in VS Code after running VS Code from the external terminal\n. > Is there a way to specify go binary in the settings somehow?\nYes, you can provide it via the go.goroot settings. This setting is specific to the Go extension and will not affect the integrated terminal. So this will not help you.\nWhat does running which go give when you run it inside the integrated terminal when VS COde is opened using shortcut? Also check the value of the PATH variable. Run echo $PATH. Does it have /usr/local/bin/ ?. > This is the output of which go when I opened Code via the shortcut:\n/usr/local/bin/go, thus running go run hello.go from within integrated terminal works as expected.\nThat solves your issue right?\n. What is this Run Code feature you are talking about??\nThere is no such feature from the Go extension.\n. Ok then, Happy Coding!. @roblourens On second thoughts all this feels like an overkill.\nIf we assume that the cancellationToken does what its suppose to do, then we dont need to try and cancel previous prcoesses before spawning new ones.\nWe only need to cancel them when the token fires the cancellation event.\nIn that case, something like this is more than enough: https://github.com/Microsoft/vscode-go/commit/b5bbff719119ee1cd6ed86c750ff97499537ab80\nWhat do you think?. Done with https://github.com/Microsoft/vscode-go/commit/63f904604b2c40ad3df53b1ef7e616feb9e1039b. What is the folder that you have opened in VS Code?\nCan you try to open the folder to which you have symlinked?\n. And is $GOPATH/src/github.com/kkpoon/myproject symlinked to the actual place where the other code lives or is the symlink created higher up in the path?\nFor example, I symlinked $GOPATH/src/folder to another location where the code actually lives.\nIf I open $GOPATH/src/folder, then everything is fine\nIf I open $GOPATH/src/folder/some/other/folder/under/this, then I get the same errors like you with vendor folders not being identified. That still doesn't tell me if you symlinked the folders at the github.com level or kkpoon level or project1 level. When you hover over the tab after opening a file, you will get see the path of the file. Does this path correspond to the actual place where the code is or the location under GOPATH?. that's the issue..\nThe Go extension depends on the file path (the one you see on the file tab) to determine the import path of the current package to use in the go build command.\nSince the value is the actual path, the import path cannot be determined and the extension falls back to using go build . which in turn is obviously not able to find the vendor folders.\nCan you try opening VS Code at $GOPATH/src/github.com/kkpoon level, and see if the file path in the tab now shows the actual path or the GOPATH?\n. I've logged an upstream issue in vscode for this. https://github.com/Microsoft/vscode/issues/49315. As soon as someone in the open source community can spend some time on it and contribute :)\n588 is tracking the \"Extract Method\" feature request.\nPRs are very welcome.\nClosing this issue in favor of #588\n. The latest beta version (0.9.3-beta.2) of this extension has this feature. Please see Refactoring in VS Code on how you can use the refactor feature.\n. Can you run Go: Install/Update Tools command to ensure all the dependent tools are the latest and are compiled?. An upgrade to Mac OS or go itself needs the tools to be re-compiled to work again.\nHappy Coding!. gocode is used for the auto-completion feature. It has nothing to do with the language server. Do you want to disable the auto-completion feature itself?. Yes thats right.\nThe language server provides only a subset of features which are Hover, Definition, Find All References, Signature Help, Go to Symbol in File and Workspace.. Go to symbols in Workspace by definition is a feature that lets you search for symbols in the current workspace i.e. the folder that you opened VS Code with.\nTry the Go: Browse Packages command to browse the standard packages and find your symbol or use the Go To Definition feature on the symblol. Thanks for reporting @matthewmueller \nThanks for the fix @philk \nI have updated a few other places where the array from the configuration was being modified directly. This issue occurs only in the 1.19 Insiders. Folks on VS Code 1.18 should be fine.\nI'll release an update next week, until then you can do the below to get the fix beforehand:\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code-insiders --install-extension Go-latest.vsix and reload VS Code. The fix is now out in the latest update to the Go extension (0.6.69). With https://github.com/Microsoft/vscode-go/commit/68a8d1ffb12664af67cb856e59715d0e9958480c, the below changes are made:\n\nThe codelens would say \"Error finding references\" instead of \"0 references\" if there was error in running the guru tool\nWhen there is error running the guru tool, the console will show the command and the args being passed as before. The call stack related to node and child process will not be shown. The fix is out in the latest update to the Go extension (0.6.69). Open the output pane, select \"Go\" from the drop down on the top right corner of the output pane.\nYou will see the commands used by the extension for running build, lint and vet.\n\nCan you share the logs from this output pane?\nThis will help in figuring out which of the build/lint/vet process is giving the error.\nAlso run the Go: Current GOPATH command. It will show the GOPATH being used by the build/vet/lint process. Do you have go.buildOnSave set to package or workspace?\nJust to ensure that this is not a regression in the Go extension, can you revert to a previous version of the extension and see if everything used to work fine?\nYou can download the vsix for the previous version from https://github.com/Microsoft/vscode-go/releases/tag/0.6.66\nThen run code --install-extension Go-0.6.66.vsix and reload VS Code . Thanks @jpap. Run Go: Install/Update Tools to recompile all the dependent Go tools and try again.\nAn upgrade either to Mac OS or Go itself requires recompiling of the tools.. There are some perf improvements I am pushing for the next update. You can try it out and let me know if it helps. I havent released an update yet, but you can try out the improvements by doing the below:\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix and reload VS Code. @diogogmt Please see https://github.com/Microsoft/vscode-go/issues/1338#issuecomment-345108242. Hey @jpap,\n\nFirst off, thanks for your patience. Was a little busy at work past 2 days and so didnt get to respond sooner.\nSecondly, congrats! That's some great investigation and am glad you got yourself unblocked.\nNow coming to your points:\nAbout cwd\n- cwd from the debug config is passed directly to dlv in the --wd argument. We do nothing else with it.\n- The path provided in the program from the debug config is used as cwd to run dlv\n- In your case, I believe the issue was that the program attribute in the debug config was not pointing to the location of the package being debugged and not cwd.\nAbout the need to reset breakpoints\nCan you provide clear repro steps for this with simple sample code so that I can get a repro? Then I can look into where the issue is.\nAbout GOPATH\n- From version 1.17 onwards, VS Code now provides a way for the extensions to talk to the debug adapters. I was able to use this feature to pass along the GOPATH used by the Go extension to the debug adapter. This was not possible previously and so the README talks about the need to pass GOPATH in the env of the debug config. \n- This happened in the last update to the Go extension that I released last week, but I missed updating the docs, my bad. \nDocumentation\n- The GOPATH related note has been updated\n- The note on use of ${fileDirname} is also added\n- Can you elaborate on the -test.v argument?\n. You can use go.testFlags setting to pass the flags you want to use when running the tests. This will be used by all the test commands from the command pallet as well as the codelens \"run package tests\" and \"run test\"\nI have added the note on -test.v in the wiki.\nThanks and Happy Coding!. This is being tracked in #1345. @jpap Thanks for reporting\nCan you provide a sample code for a test that would fail with a panic?\nI can then use that to see what exactly do we get back from delve and how best to surface it.. In that case, I'll just close this for now.\nThanks!. If we did provide a solution to run tools from a container, then a general solution is needed. Not just for linter. This is a major undertaking.\nI'd love to help out if anyone wants to take this up.. @asasmoyo \nLast year, we gave this a try and you can see our work at https://github.com/Microsoft/vscode-go/compare/master...ramya-rao-a:docker\nYou can start by looking at that code and see what approach was taken and if you are thinking along the same lines or something different.. You are welcome @leaxoy and thanks for reporting this issue.\nThe fix will be out in the next update. The fix is out in the latest update to the Go extension (0.6.69). The fact that gofmt works but the other 2 dont are puzzling to me.\nAll the 3 tools use the same code path in the extension\nCan you try setting go.useDiffForFormatting to false? We noticed that goreturns sometimes returns diff data in an incompatible format.\nWe did have an issue with formatting (#1333), but that was for folks on 1.19 Insiders but you are on 1.18\n. Great, I am not sure of the root cause here though as to why goreturns and goimports do not return anything when run with -d\nHere is the upstream issue if you are interested: https://github.com/sqs/goreturns/issues/28\nClosing this issue as the workaround works for you.\nHappy Coding!. From @firelizzard18 on June 20, 2017 7:59\nThis may be a regression from Microsoft/vscode-go#765 which fixed Microsoft/vscode-go#438. From @firelizzard18 on June 20, 2017 7:59\nThis may be a regression from Microsoft/vscode-go#765 which fixed Microsoft/vscode-go#438. From @weinand on June 20, 2017 10:3\nYes, VS Code terminates debug adapters \"gracelessly\" (and we are planning to make this more graceful in the future).\nBut for now the VS Code Go debugger could 'quit' delve nicely when receiving a DisconnectRequest from VS Code. This is always the last request sent from VS Code to the debug adapter before killing the debug adapter. And VS Code kills the VS Code Go debugger only after it has received the response from the DisconnectRequest. So the debug adapter can delay the killing enough so that delve could do its cleanup.. @chuchiring From Go 0.6.78 onwards, you can configure where the binary generated by delve is located. See https://github.com/Microsoft/vscode-go/wiki/Release-Notes#0678---3rd-april-2018\n@mxschmitt Sorry, no updates yet. But will definitely get around to this in June.. I finally have an update!\nTurns out there is a command called Detach that can be called on the delve server which will result in the required clean up of the debug binary that gets generated. To get this fix before the next update to the Go extension (which will be either Friday or early next week), please follow the below:\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\nI'd appreciate it if folks here can give the fix a try and share any feedback.\n@chuchiring The change you need to do to provide an output path for the generated debug binary is in the launch.json file. Use the property output in your debug configuration. Please dont modify the package.json file.. @NexWeb After looking into dlv apis, I found a command to detach gracefully that cleans up the debug binary that is created as well as kills all the processes spawned in the process. This means we no longer have to specifically kill any processes from our end. \nI know your fix as worked flawlessly for you for more than a year. I would appreciate it if you could try the current fix. If you do decide to try it out, please follow the instructions in \nhttps://github.com/Microsoft/vscode-go/issues/1345#issuecomment-406125202. The fix for this issue is now out in the latest update (0.6.85) to the Go extension.. @mvrhov \n\nevery IDE that produces the executable leaves it in it's place.\n\nJust to be on the same page, are you referring to the debug binary created by delve during the debugging process or the executable created when you run go install?\n\nThe other thing is that now one to run the executable outside of the ide now must do a manual build\n\nThe debug binary created by delve was never meant to be run on its own. It is specifically for delve to use for debugging purposes. If you were to use delve from the terminal (dlv debug), you will see the same debug file being created for the duration of the debugging session. When you exit the debugging session, the file is deleted by delve.\nYou can also run the Go: Install Current Package command (which does nothing but go install on your pacakge)  to get a binary under GOPATH/bin\n\nthe output dir & executable name are the same for the build script and the vscode debug the next run will remove the file.\n\nCan you give an example that can elaborate this?. This is weird. The only thing happening on save that can move stuff around is the formatting feature.\nI can repro the case when the cursor moves to the next line, but not the case when the cursor moving to the bottom of the file.\nCan either of you provide a small sample code with repro steps for when you see the cursor going to the end of the file?. I have pushed the fix for the issue that I see i.e cursor jumping to the next line.\nCan either of you test it and see if it solves your case as well? All you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix and reload VS Code. Scratch that.\nI can repro the case when the cursor jumps to the last line.\nIt is when the changes due to formatting spans multiple lines till the end of the document.\nThe root cause is due to changes in the core api. I'll dig around a little more and get back here.\n. @maxint64 Thanks. I found today that the root cause is with the way edits are applied by VS Code. Something changed between VS code 1.17 and 1.18 release.\nI have logged an upstream issue for this. https://github.com/Microsoft/vscode/issues/38728\nWe should be able to get a fix in the Insiders soon.\nUntil then, the work around is to either disable the format on save feature or the auto save feature.\nThere is no fix to be done from the Go extension's side. @Xjs I know... Its a temporary fix. I figured cursor moving to start of the same line is a just a little bit less annoying than it moving to the end of the file.\nPreviously, the edits being applied were multi line edits\nRight now the edits being applied are single line\nThe right fix would require us to apply edits only for the part of the line that needs the change which is slightly more complicated as the Go tools only return diffs at line level. @Hokutosei Update to the latest version of the Go extension (0.6.69). The cursor wouldn't go to end of file, but to the start of the line on save if formatting changes exist.\nOther workaround is to disable the format on save feature until we get a complete fix for this issue. The root cause is that there has been a change in VSCode in the way it treats the edits returned by extensions. If extension returns an edit/edits across contiguous group of lines, the cursor moves to the last line of this group. This was what was happening in Go 0.6.68\nYou can see the upstream issue at https://github.com/Microsoft/vscode/issues/38728\nFor Go 0.6.69 I made a change so that the extension returns one edit per line instead of one edit per contiguous group of lines.\nI would strongly suggest disabling format on save and run formatting manually once in a while\n. > first, this should have not been a problem if VSCode did not change the way it treats the edits.\nVS Code did change the way it treats edits.\n\nany fix on this\n\nWe are close to releasing the next update for VS Code, therefore I was busy and couldn't devote much time to this issue or the Go extension.\nBut, now I am working on this as we speak. The fix requires the Go extension to enable running formatting tools on the file contents (pass via stdin) instead of saving the file and then running the tools on the file on disk. \nThe formatting tools (goimports and goreturns) have 2 issues with this approach. See #613 and #630. Which is why I abandoned my previous effort last year to make this change.\nAfter my investigations today, I found that the use of the new flag -srcdir in goimports which fixes #613, fixes both the #630 as well. Now the only remaining blocker is to get support for the same in goreturns\nLong story short, you can expect a fix soon. I'll try for end of week.\n\nso now what,. disable the format:onSave? \n\nUntil the fix, you can disable the format on save feature and run format manually when needed. @Hokutosei and others on this thread,\nI have the fix ready, can you help me with testing? You will have to\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix and reload all VS Code windows\nAdd the below setting:\n\"go.formatTool\": \"goimports\",\n\"[go]\": {\n    \"editor.formatOnSave\": true\n  }\nRun Go: Install/Update tools to ensure you have goimports installed.\n\nIssues #613 and #630 will still exist if you use goreturns. Therefore, use goimports as the formatting tool instead. > though the install command didn't work for me\nOh sorry, there was a typo there. It should be --install-extension not --install-extensions.\n\nIt then appears to be fixed. Thanks so much for this \n\nAwesome!\n. @julianfrank I've seen that issue for a few users on Linux. Clone the vscode-go repo and get the file from there.. The latest update to the Go extension (0.6.70) has this fix.\nThanks for the patience everyone!. Can you provide any references or docs for the --config argument?. Thanks for figuring that out and getting back. Happy Coding!. The fix is in master, but I havent released an update yet. Until I do, you do the following:\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix and reload VS Code\n\nLet me know if that helps. From @matthewfcarlson on November 16, 2017 7:36\nLooks like it's a result of go-code-check running.. From @Ripper1992 on November 16, 2017 12:48\nSame thing is happening with me.\nSteps to reproduce the error:\n1 - Type some code.\n2 - Hit \"ctrl +s\" to save the file.\n3 - Hit arrow up or down.\n4 - Cursor focus at the bottom of the file.. @matthewfcarlson I believe this is due to the formatting that runs on save. The edits that get applied end up moving the cursor. Let's track this in #1346\n@matthewfcarlson , @Ripper1992, I can repro the case when the cursor moves to the next line, but not the case when the cursor moving to the bottom of the file.\nCan either of you provide a small sample code with repro steps for when you see the cursor going to the end of the file?\nPlease provide the details in #1346. I have pushed the fix for the issue that I see i.e cursor jumping to the next line.\nCan either of you test it and see if it solves your case as well? All you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix and reload VS Code. Scratch that.\nI can repro the case when the cursor jumps to the last line.\nIt is when the changes due to formatting spans multiple lines till the end of the document.\nThe root cause is due to changes in the core api. I'll dig around a little more and get back here.\n. The formatting feature of the Go extension also does the same. I am working on a fix. All,\nYou can follow the steps in https://github.com/Microsoft/vscode-go/issues/1346#issuecomment-349893523 to get the fix for this issue before the next udpate. The latest update to the Go extension (0.6.70) has the fix for this issue.. Can you provide sample code that I can use to repro?. Setting \"go.docsTool\": \"gogetdoc\" seems to work.\nThe default tool we use to find definitions is godef which is supposed to return the location and the signature of the definition. In case of type alias, it does return the location (which is why the Go to Definition feature works) but it fails to return the signature (which we need to show in the hover info). \nTry running godef on a type alias and compare it with a normal function or type, you will see the difference in the output. Can you log an issue in the repo for godef for this please?\n. @NobbZ Sorry for the delay in response.\nThe folding in VS Code is language agnostic and depends on indentation only\nIn your example, since the line with labelLoop: is outdented with respect to the previous line, it didn't get folded. You can follow https://github.com/Microsoft/vscode/issues/3422. This no longer is a problem in the latest version of VS Code. - Run the command Go: Current GOPATH. Does this match with what's expected?\n- Add \"trace\": \"verbose\" to your debug configuration and then start debugging. This will add some logs to the debug console. There should be a line there saying Using GOPATH:. Does this match with the expected GOPATH?\n. @finallybye Closing this issue as we havent heard back from you with any answers for https://github.com/Microsoft/vscode-go/issues/1352#issuecomment-345493623. Thanks for reporting @dhananjayve, its fixed now.. The travis job has been restarted and it passed\n\nThis caused VS Code to attempt to connect to dlv the api server was listening.\n\nDo you mean VS Code was trying to connect to delve before the api server was listening?. @DMarby I am a little uncomfortable with checking for the string \"API server listening at:\". \nThe assumption here is that when delve returns with API server listening at:, it is ready for the client to make the connection.\nDoes delve ever return with any other kind of data before returning API server listening at:?\nIf not, then the existing code should also work, correct?\nIf yes, there are 2 things that could go wrong \n- The message itself may change in the future versions of delve\n- The data received in this.debugProcess.stdout.on('data', chunk => {}) is not guaranteed to be the complete string you expect. It could be just API server and listening at may come in the next chunk.\nAlso, @lukehoban do you remember why the delay was added before making the connection to delve?\nSee https://github.com/Microsoft/vscode-go/commit/69f781534b766f871a6246eaa61c879176696b56\nWould waiting for  \"API server listening at:\"  solve the issue you were trying to solve?\n. @DMarby Below is the net change in this PR\n- Remove attempting to make a connection when dlv sends something on the stderr \n- Remove the 200ms wait right after the first data chunk is received in stdout before making the connection\nI agree with the first point.\nBut how is removing the 200ms wait going to help #473?. > when there's custom build flags with verbose causing stdout output during build,\nIn that case, our assumption that \" nothing is outputted on stdout before the API server listening,\" is wrong and we will have to add the check on \"API server listening\" back, correct?. In that case, I would keep the delay as well until we hear back from @lukehoban about the reason the delay was put in the first place.\nThe removal of the connection attempt during stderr should fix #473. Awesome, thanks for working on this @DMarby !. @mfpierre I have pushed a fix for this, can you help in testing it out? All you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix and reload vs code\nDo try out features like rename, find references etc and see if all the language features work with multiple build tags. The go to definition should work when using gogetdoc in the go.docsTool setting\nAnd thanks for reporting this.\n. You must be on ubuntu where for some reason direct download doesnt work.\nCan you clone this repo and then use the vsix file from the repo?. great, did you try other features like rename, find all references etc? The Go tools that back these features also take the build tags. Also give the new commands Go: Build Current Package, Go: Install Current Package a try. These are not released yet, but since you are using the code from master you can use them. The fix is out in the latest update to the Go extension (0.6.69). The 3 options for the formatting tool used by the Go plugin are gofmt, goimports and goreturns which can be set using the setting go.formatTool.\ngofmt re-arranges the imports so that they are in an alphabetical order. If there are groups inside the import block (blank lines between imports on consecutive lines), then the groups are retained, the imports inside a group is arranged in alphabetical order\ngoimports and goreturns do the same + group the imports such that the std lib ones are in a different group than the others. If any of the groups inside the import block contains a mix of std and non std lib pkgs, then the group is split. This explains what is happening in your case. \nTo confirm this, can you remove the empty lines between the import statements (so that there is just 1 group) and try adding the said import?\n. I would suggest to log this issue with goimports.\nIt should do the right grouping no matter where a new import statement gets added.\n. \"no type entry found, use 'types' for a list of valid types That's coming from delve.\nCan you run delve from the command line, and try doing the same there?. Can you share the steps? I need to know the commands used. This issue has been closed because it needs more information and has not had recent activity. Thank you for your contributions.. The data shown in the variables pane is the data returned by delve.\nI dont have the code to repro this issue, but I can help you debug the Go extension to figure out what's happening.\nIf you are up for it, follow the steps at Building and Debugging Go extension. This will set up the dev env for the Go extension.\nThen debug the debugger for the Go extension by following the Debug Adapter README\nIn the third instance of VS Code (the one where you opened vscode-go/src/debugAdapter), add a breakpoint at https://github.com/Microsoft/vscode-go/blob/0.6.69/src/debugAdapter/goDebug.ts#L643. The locals at this point will have the variables that are fetched from the response from delve.\nThat can explain why you see the extra things.\n. @willfaught Since we didnt hear back from you and we don't have a sample code that we can use to replicate this problem, I am closing this issue.\nIf you do see this again, please log a new issue with a small code sample that we can use.\nHappy Coding!. @carlca goimports will remove unused imports and that's what you see.. We have the commands Go: Add Tags to Struct Fields that does something similar. It uses the setting go.addTags.\nSee https://github.com/Microsoft/vscode-go/wiki/Release-Notes#editing-improvements. There are multiple Go: Test commands. Which ones are running all the tests in the package for you?. @silentred  Closing this issue as we havent heard back from you in a while with details on the issue. I am not able to repro this.\nCan you open the output pane and select \"Go\" from the drop down on the top right corner of the pane?\nThe results of build/lint/vet are shown there.\nThis is either the result of linting or the vet process.\nEither way, the Go plugin has no control over the errors/warnings coming from he build/lint/vet process. It just runs these tools and displays the results in the editor.\nLook at the output pane to see if lint or vet caused the issue and then log an issue in the appropriate repo.. Thanks @mat007!. That's done by the formatting tool we use. You can choose to use goreturns, goimports or gofmt by changing the go.formatTool setting. You can also pass flags to these tools via the go.formatFlags setting.\nOther than these customizations, rest of the details of formatting is out of scope of VS Code. You can log an issue in the repos of any of the above 3 tools.. That's correct. Thanks for reporting @maxibanki, that promise was indeed the issue.\nI have pushed in a fix. \nNext time, feel free to send a PR :)\nHappy Coding!. @grooveygr I had a question. Is it possible to have a method on a type from a different package?. Great, thanks for the clarification!. @grooveygr Please add a description of what you are trying to achieve in this PR.. I do believe this is a cool feature to have, although I dont believe this extension is the right place for it. \nAs VS Code and this extension has gained popularity, we have seen a gradual scope creep over the past year. Being a sole maintainer of this project, it is getting a little hard to support all incoming requests and maintaining the ever growing set of features. Therefore,one criteria I am using now in the triaging process is whether the feature request would make sense as a separate extension. This current feature request appears to be so.\nThanks for all the work. Let me know if you need any help creating the new extension if you choose to do so.. @grooveygr I am guessing you are trying to get the \"Go: Test Package\" command in the context menu?\nThat is do-able currently by adding the below setting\n\"go.editorContextMenuCommands\": {\n  \"testPackage\": true\n}. What is the criteria for a command to be shown this way?\nWhat's to stop anyone else from wanting to have other commands show up as a button this way?\nI would suggest the below if context menu is not your choice\n- Use the command from the command pallet\n- Assign a keyboard shortcut for the command\n- Use the codelens \"run package tests\" that appear above the package statement in a _test.file\nIf you would still like the button on the title bar, then I would suggest publishing a separate extension to do so.\n. When you hover on the function name are you able to see the details including the function signature?\nCan you provide a code sample where I can repro this?\nAlso do try on a simple program, say fmt.Println(. Does that work?. The language server feature is an experimental one. If you want to checkout why that wasn't working, log an issue at http://github.com/sourcegraph/go-langserver\nI am able to see the signature help for fmt.Println in both stable and insiders build of vscode\nTry setting go.docsTool to gogetdoc and try the \"Go to definition\", hover and signature help features.\nVS Code doesn't allow tweaking the UI elements. You can change the theme and that will apply color changes to all elements\n. What version of VS Code (stable) are you using?\nDo you see the parameter hints the first time you type ( after the function name?. :) Alright, then I'll close this issue.. This issue was moved to sourcegraph/go-langserver#213. @jeyanthimuthuram @altairlu Can you update to the latest Go version (0.6.69) and see if you still have issues?. Can you try on a smaller project? If a project is too large, the linting on save might get expensive.\nHere are a few things to try:\n- Set go.lintTool to golint. The other 2 options may get expensive on larger projects\n- Set go.lintOnSave to false. This will disable the running of the linter on every save. Instead use the command Go: Lint Current Package whenever you want to lint your code. Fixed with #1375. The fix is out in the latest update to the Go extension (0.6.69). Add the below in your settings\n\"go.testFlags\": [\"-v\"]\n. The latest update to the Go extension (0.6.70) has the fix for this issue.. I tried it, the debug binary still doesn't get deleted.\nAnd looking at the code changes, there is nothing there that would delete the binary either. I used your code (from both the PRs) and debugged a simple Go program. The binary was still there.. I am guessing you want the killTree to be called when pressing the stop button,\nAnd when the stop button is pressed, if the debugProcess still exists, the killTree in the else block doesnt get called.\nAnd that's why you are changing the if condition?\n. Closng this PR as this change will break the original reason why the killTree was added in the first place.\nWhen debugging is stopped, the processes spawned by the debug process were not getting terminated. That's the reason killTree was put in place.\n. This change reverts the fix done for #438 which repros only in Linux.\nThe fix for #438 was to run the killTree on the id of the debug process so that all the processes spawned from the debug process get terminated.\nThis change to the if condition results in the killTree never getting called on the debug process.\n. When you run the test command separately, you only see the stdout\nWhen running test in VS Code, it shows both stdout and stderr\nPlease follow the discussion in https://github.com/Microsoft/vscode-go/issues/1120 where we talk about this.\nCan you run the same test command and see what you get in stderr?\n. We dont literally run go test package, we run go test <import-path-to your-package>\nWhat is being printed in the output channel is exactly what is being run.\nIf you are up for it, I can help you debug this by running the extension code from source. Append 2>&1 | tee output to the end of the test command when you run from zsh and then open the \"output\" file.\nstdout and stderr both are redirected to the \"output\" file\nYou will see the blank lines. No problem, Happy Coding!. Nice timing. See #1394\nI just pushed a change that will give you the option of \"showing\" the missing tools.\nAlso, updated the logic to include only the explicitly used tools in this list.\nThis way, you wont get the missing tools message for tools like gotests, goplay etc.\nWhen you do however try to run Generate Tests or Run in Playground commands, a prompt for exactly that tool will show up\nThis should be out in the next update. In the latest update of the Go extension (0.6.70), the Analysis Missing Tools message will now appear only if the Go tools for the basic features are missing.\nWhen clicked, the resulting prompt will also have an option to show the said missing tools. Thanks for reporting @willfaught \nThe apis available to track a debug session can be found at https://github.com/Microsoft/vscode/blob/1.18.1/src/vs/vscode.d.ts#L6112-L6134 which can be used to disable the debug code lens when a debug session is already active.\nThe codelens for the tests are created in https://github.com/Microsoft/vscode-go/blob/0.6.69/src/goRunTestCodelens.ts\nPRs to fix this issue are welcome.\n. On Windows I get an error when trying to debug the second time\ngo install testmain: open c:\\GoCode\\src\\github.com\\golang\\example\\stringutil\\debug.test: The process cannot access the file because it is being used by another process.\nProcess exiting with code: 1\n\nBut I do see it on my Mac\nI used the https://github.com/golang/example/stringutil project\n. Can you share a sample code that I can use to see what's going on?. @vanhumbeecka This program seems to be expecting some input. Can you share the debug config that you are using?. Thanks for the sample code @Rakhmanov \nThis seems to be an issue with how delve sends data to the debug adapter in the Go extension. If you add \"trace\": \"verbose\" to your debug configuration, you can see logs in the debug console for every request sent to and response received from delve\n\nThe request for ListLocalVars returns an object a with 2 children one and abc instead of a single child.. I have logged upstream issue https://github.com/derekparker/delve/issues/1115. Thanks to your pointer in https://github.com/Microsoft/vscode-go/issues/1384#issuecomment-366415254 I realized this was an easy fix :)\nOthers,\nThe fix for this issue is now out in the latest update to the Go extension (0.6.77). Currently, we show the variables as returned by dlv. See https://github.com/Microsoft/vscode-go/issues/1358#issuecomment-349157408\nIf dlv were to return the string for the []rune or []byte, then it would be straight forward for us to show it.\nIf we are to show the string form of the runes/bytes, then we need to first\n-  convert the rune/byte to string\n- Add an extra variable with the same name as the []rune with say \" as string\" appended to it\nThese changes will have to go to either the scopesRequest or the variablesRequest in https://github.com/Microsoft/vscode-go/blob/0.6.69/src/debugAdapter/goDebug.ts. I am not sure.\nOne catch is that I dont know how the watch feature would work with this new variable. And of course the debug console wont recognise it.\n. Is there a scenario where one would want to look at the runes/bytes values?. @lggomez \n\nthe kinds returned by delve for the example slices are GoReflectKind.Uint\n\nThats because strings are built from bytes so indexing them yields bytes. See \nhttps://blog.golang.org/strings\n\nSince the conversion from value to string is performed locally by the extension, I don't know if we have the guarantee that the resulting string values will match the ones produced by go\n\nAgreed, this should be ok\nI checked your code. It doest work for runes though. Try\nr := []rune(\"hello\")\nfmt.Println(r[0])\n. > childKind === GoReflectKind.Uint || childKind === GoReflectKind.Uint8 || childKind === GoReflectKind.Int || childKind === GoReflectKind.Int32\nWhat about the scenario where there would be an array/slice of kind int/int32 that is not meant to be string? Do you know of any documentation that can help us understand these types and their intended usage better?\n\nDoes the debugger handle the value length when loading it for the lens/watch or should we set a max length when converting the slice?\n\nThe debugger shows whats sent over by delve. Delve already truncates the array. See https://github.com/derekparker/delve/blob/62fe792bfdf6599ad06c084096efd96a01246ab8/service/api/types.go#L192-L206\n\nshould it be able to be enabled/disabled via a new setting property\n\nLet's not add any setting and watch for user reaction instead.\n. Can you check how gdlv deals with this?\nAbout the array length, yes that can be a separate issue\n. @jhendrixMSFT, @vladbarosan , @quoctruong , @iantalarico and @pongad Any thoughts on this?. Next time this happens, open the console (Help -> Developer Tools -> Console) and share any error messages found there.\n. @qoops-1 Looks like the extension did not get activated. Do you get the error when there is a Go file open?. Where do you see the \"No import path to get\" ? Please share a screenshot. The error is about failing to find the diffUtils module when loading the formatter as needed in https://github.com/Microsoft/vscode-go/blob/0.6.69/src/goFormat.ts#L10\nThis fails the extension activation. Since the extension didn't get activated, running any of the commands from the extension fails as well.\nThis is weird. I cannot repro in Windows or in Mac OS X El Capitan.\nCan you navigate to ~/.vscode/extensions/lukehoban.go-0.6.69/out/src and see if there is a file there named diffUtils.js ?\n@qoops-1 Can you confirm that you see similar call stacks?\n. If you find the diffUtils.js file missing, then it means somehow you ended up with a corrupted set of files for the Go extension. I would suggest to uninstall the extension -> reload vscode -> install the Go extension.\nThe errors related to godef are cases when definition for given symbol is not found. This gets triggered for the Go to definition feature, hover feature and the signature help feature.\nThe other issue on arrow keys is independent of the Go extension. If you get a good repro, then please log the issue in the vscode repo.. @qoops-1 Please dont just paste a screenshot of an error. Add details around what you did to get to that state.\nIn this particular case, you must have run the Go: Get Package command which only works when your cursor is on an import statement. \nAnd so this is unrelated to the current issue at hand. @meling Are you still seeing issues? Did an uninstall and a clean install of the extension help?. I'll close the issue then. Happy Coding!. - What version of the Go extension are you using?\n- Have you recently upgraded the Go version or the OS? If yes, then run Go: Install/Update Tools to ensure that the dependent Go tools have been recompiled\n- What action was taken just before the progress indicator appeared? Renaming, Go to definition, file save or just typing? Try to get a repro to answer this question.\n- Can you share your Go related settings?\n- Do you still see this with all other extensions disabled?\n- Any errors in the console when this happens? Help -> Developer Tools -> Console. - Try turning off editor.formatOnSave. That might be interrupting with the format on save feature of the Go extension. You can turn this off just for Go files by adding this in your settings\n\"[go]\": {\n      \"editor.formatOnSave\": false\n    }\n\n\nThere are some extensions that run some actions on file save that might have undesirable effects. That's why I asked to disable all other extensions and try to eliminate that scenario. You can do this by running code --disable-extensions and then enabling just the Go extension in the extensions viewlet \n\n\nDo you see any Go related processing running a lot in the Activity Monitor. If so which ones?\n. Yes, run ps aux, use grep to narrow down the processes for Code Helper. For the ones that are using high cpu, look at the args being passed to the process and share here.\n\n\nTo ensure that other extensions are not interfering, please disable all the other extensions, reload VS Code and look at the processes. go list -json is used by the Go to Implementation feature. Have you used that lately? There should just be 1 process spawned for a go list -json each time you use this feature. That would still not explain why there would be a lot of these, unless go itself spawns parallel processes.\nWhat are the args for the Code Helper process that you see?. Are you working on large projects?\nDo you also see such high cpu usage when working on smaller simpler projects?. Thanks @joelpresence :). > I am currently creating a language server for Go based on the VSCode plug-in\nThat's very exciting. Let me know if you have any questions and do keep me updated. You can reach me in the Gophers slack channel.\n\nAre you OK with the other two?\n\nYes.. This is being tracked in #1346\nWorkaround until we find a fix for this is to disable the format on save feature. Add the below in your settings\n\"go.formatOnSave\": false\". @tsraza @hajhatten You can follow the steps in https://github.com/Microsoft/vscode-go/issues/1346#issuecomment-349893523 to get the fix for this issue before the next udpate. The latest update to the Go extension (0.6.70) has the fix for this issue. Start Without Debugging uses go run. program points to $file and current file path is passed to go run\nStart Debugging uses dlv debug. programpoints to$file, the debug adapter assumes you want to debug the package to which the current file belongs to and so runsgo debug` in the file's directory.\nWhat you want is for the debug adapter to run dlv debug filepath which is being tracked in #1229\nPlease add your thoughts and upvotes to #1229\n. At a glance, if the call stack for the error message was provided, then I have some guesses where to start looking for the root cause. What's the print debug there? Is that what you typed in the debug console?\nIs debug a variable and you wanted to check its value?\nIf so, then you need to just type debug not print debug in the debug console. You cannot use dlv commands in the debug console.\n@idevz What dlv command are you trying to run?. You can use the debug bar on top for stepping in/out/over\n\nYou can also use the keyboard short cuts for the same. . PRs are welcome. I can answer any questions on where to get started from the extension's perspective. I am confused a bit here. What changes are needed from the Go extension's side to use gometalinter 2.0?\nDoesnt it suffice that the user updates their version locally?\ncc'ing everyone who upvoted this feature request: @atishpatel, @zmb3, @taketori, @SNieroda, @fishhead108. @zerkms You mean setting go.lintTool to gometalinter.v2? Doesn't running a go get -u github.com/alecthomas/gometalinter update the tool to use v2 ? . @zerkms Why do we need to set go.lintTool to gometalinter.v2?\nDoesn't updating your local gometalinter by running a go get -u github.com/alecthomas/gometalinter give you all the features of gometalinter.v2 ?. @zmb3 I just did a go get on gometalinter and was able to get the latest and the binary is built. This surely has all the new features.\ncc @alecthomas for clarification. @zerkms Please run go get -u github.com/alecthomas/gometalinter and try again. @zerkms Every tool that this Go extension uses comes from the master branch of the corresponding repo. We dont use the one from gopkg.in for the exact issue that we then have to support all the versions as the binary name would be different.\nhttps://github.com/Microsoft/vscode-go/pull/1297 is tracking a feature where you can map a tool used by this extension to the path where it needs to find the tool. Once that feature is in, you can add a mapping like \"gometalinter\": \"gometalinter.v2\" and that should help your case.\n. To use goemtalinter.v2\n- Update to the latest version of the Go extension (0.6.83)\n- Install gometalinter.v2 independently\n- Add the below in your settings\n\"go.alternateTools\": {\n     \"gometalinter\": \"gometalinter.v2\"\n}. Updated the wiki.\n\nis it possible to only warn when the feature is explicitly used.\n\nYes, that's a good point. \n\nlist all the missing plugins in the warning.\n\nAlong with \"Install\" option, we can show a \"Show missing tools\" option that will print out the missing tools in the output pane\nPRs are welcome if anyone wants to give this a try.\nI can help out with pointers to where to get started. In the latest update of the Go extension (0.6.70), the Analysis Missing Tools message will now appear only if the Go tools for the basic features are missing.\nWhen clicked, the resulting prompt will also have an option to show the said missing tools. Sorry for the churn @gertcuykens, I have re-opened the original issue in vscode with my comments. This feature request would require us to \n- parse the vet output\n- look for certain types of messages\n- extract the function name along with package name\n- Run godef on it to find the signature\nThat's assuming the text for such warnings does not change.\nIf it does, then have different text for different Go versions.\nIdeally, if we were to use a language server, then it would be simpler to do the above.\nBut in the current state of things (where we spawn new processes each time we use any Go tool), this seems like an overkill.\nA more simpler solution would be to log this feature request against the vet tool itself.\nOr create a new Go tool that wraps around the vet tool and provides the additional information.\nSorry, closing this issue as the request is out of scope for the Go extension\n. This is being tracked in #1384\nCan you share a small sample code in #1384 that I can use to see what's going on?. The fix for this issue is now out in the latest update to the Go extension (0.6.77). Support for ${workspaceFolder} along with the previous ${workspaceRoot} is now available in the  latest update of the Go extension (0.6.70) for the below settings\ngo.gopath\ngo.toolsGopath\ngo.testEnvVars\ngo.testEnvFile. This is not Golang specific. Samething happens when debugging in typescript as well.\nF11 is the keyboard shortcut to show the desktop in Mac.\nSee https://github.com/Microsoft/vscode/issues/5102\n. That got fixed via https://github.com/Microsoft/vscode-go/commit/0276792ee5271d5112a23a2bbcfd2a328885e502\nShould be out in the next update to the Go extension.\nThanks for reporting. Are you in a multi folder set up? And each of those Add Config () correspond to one of the folders?\nIf yes, then have you saved this workspace?. Please share the folder structure as well. Is sqlservertest one of the folders added to the workspace? Or is it a folder under another folder that was added to the workspace?. > Am I right in thinking that the only folders that contribute to the list of Add Config() s are top-level folders in the Workspace?\nYes, that's right.\n. In an ideal world, there would be a linter running on each file edit (without waiting for a save) and all markers would be up to date. Unfortunately for Go, we can only have the linters run on save. So trying to get the markers match with the right line before the triggered linting is complete is not possible.\nCurrently, the markers are cleared after linting/building is completed. When these processes are slow, edits and further saves cause the above mentioned issues.\nI pushed a change to clear these markers on file save. This will ensure that the old diagnostics are not reported against newer edits.\nThere are ways to show progress. Either via a status bar item or a blue bar going from left to right at the top. I am a little hesitant to add the latter. In worse case scenarios, you will always end up seeing them. A status bar item is do-able, but naming it right is tricky. Because ideally you would want to track the progress of build, lint as well as vet\n. In the latest update to the Go extension (0.6.70), buid/linting/vetting errors will be cleared on file save to ensure slow linters/vet doesn't result in stale diagnostics. Running diagnostics on file open was discussed once before in #118. You can see the complications that arise for this case.\nThe problem of the output panel popping up every time the manual command is run can be fixed easily. I have logged #1456 for this.\n. @atombender The problem of the output panel popping up every time the manual command is run is fixed in the latest release (0.6.74). Add \"trace\": \"verbose\" to the debug config in the launch.json file and try again.\nThe debug console will now have verbose logging. That might shed some light on what's going on\nAlso,\nAre you able to repro this consistently?\nIs this specific to any particular project or does it repro even with simple code?\nIf you can repro with simple code, then can you share the code so that I can try?. Are you other machines on other platform or are they Mac Sierra too? Also is the VS Code version, Go extension version and dlv version the same in the other machines?. This issue has been closed because it needs more information and has not had recent activity. Thank you for your contributions.. This issue was moved to Microsoft/vscode#40263. Are you referring to the Go: Toggle Test Coverage in Current Package command or the cover on save feature?\nI ran the command in a file from each folder in the multi root mode and it works as expected.\ncover on save feature works at package level. i.e saving a file in 1 package doesn't add coverage to another package.. Can you share the output of those commands from the output pane?\nMost likely there is an issue in parsing the output. I can't repro the issue though.\nIf you don't mind, can you run the Go extension from source and see why coverage doesn't get applied? Its fairly easy to do so\n- Follow the steps in Building and Debugging the extension to a local dev env set up\n- Add a breakpoint at https://github.com/Microsoft/vscode-go/blob/0.6.69/src/goCover.ts#L169 and step through. No problem, Happy Coding!. VS Code 1.19 was released today.\nDo you still see the issue after updating to 1.19?. Hey @wader,\nCan you elaborate on how this can help the remote debugging scenario?. So you are trying to launch a docker container with PTRACE capability and starting delve inside this container.\nHow are you passing the image to be used?\n. Can you provide a small sample code with before and expected after states when you run gofmt -s ?. Works for me.\nDid you add the setting \"go.formatTool\": \"gofmt\"? The default formatting tool used is goreturns which does not support the -s flag. I'd much rather prefer the goimports tool to support the -s flag instead.\nThere was a discussion on this from 2014. See https://groups.google.com/forum/#!topic/golang-nuts/RyWfs9ddn8c\nThough the then author of goimports wasn't too keen on supporting the -s flag, I am sure they wouldn't mind if a PR was submitted to support the same.\nIncluding @erikjohnston in this discussion as he brought up the same point in https://github.com/Microsoft/vscode-go/issues/435#issuecomment-346626619. When not using goimports or goreturns as a formatting tool, we do have another way to add missing imports which is via the code actions (the light bulb that appears next to an error if there is a possible fix)\n\nWe can add another code action for removing unused imports as well.\nBut running multiple tools when formatting a file is something that I want to avoid.\n. In the next month, I'll look into the new Organize Imports feature supported by VS Code. Best case scenario would be\n- You use gofmt as your formatting tool\n- The Go extension will implement the code action for organizing imports by using goimports. Apologies, there has been no update here, but PRs are most welcome :)\nIf anyone wants to look into the Organize Imports feature, I am here to help. Below are some code pointers\n\nSee Building & Debugging the Go extension to have a local set up of this extension running.\nFrom here on, you should be able to register a CodeActionProvider that runs goimports to return edits to VS Code. There exists one CodeActionProvider already in the Go extension in goCodeAction.ts file. Use the same file, but a new class for the CodeActionProvider for organizing imports.\nFor running goimports, please re-use the code in goFormat.ts\n\nUseful links:\n- Organize Imports feature\n- Source Code Action Kinds\n- Organize imports Code Actions\nFeel free to ask any further clarifications. Closing the issue in favor of #868 which has a hack to get around the issue.\nLooks like we have to use v2 of dlv apis to be able to configure the max string length.\n. @TXZdream\n\nCan you repro this using simple code and standard libraries?\nCan you try setting go.docsTool to gogetdoc and try again?\nAre there any errors in the console? Help -> Toggle Developer Tools -> Console\nCan you share your settings?\nAre other features of the extension working as expected? Like auto-completion and build/lint/vet?. @TXZdream Closing this issue as we haven't heard back from you in a while. I am not able to repro either\n\nWhen you get zero results, are there any errors in the console? Help -> Toggle Developer Tools -> Console.\nIf there are no errors there, then can you try running the guru tool from the command line and see if you get non zero results there? You can use the show offset extension to get the offset you need to run guru\n. I was not able to repro this (but am using Mac), so am guessing its specific to your environment.\nMaybe your GOPATH set up is different from that of your colleagues who aren't seeing the issue?\nI'll try in Windows tomorrow for a repro.\nAnd to confirm.. No errors in the console?. The only thing I can think of (without actually trying on a Windows machine which I can only tomorrow in my office) is a casing issue in either the GOPATH or the file path that is passed to guru. See https://github.com/Microsoft/vscode-go/issues/290#issuecomment-249323841\n\nHave you set either go.gopath or go.inferGopath in your settings?\nWhat do you see when running the command Go: Current GOPATH?\nAgain, any errors in the console when you get the 0 results? Help -> Toggle Developer Tools -> Console?\nDo you get the right references when running Find All references anywhere not on the definition?. I tried on my Windows machine and I couldn't get a repro.\n\nSince you mentioned that you get 0 results when running guru from the command line as well, I would say that the next step should be to log an issue against guru itself. Maybe they will be able to tell what's going on.\nAlso, just to ensure you have the latest version of the tool, can you run Go: Install/Update Tools and try one more time?. @jltjohanlindqvist It would do good if you share the results of what you found when running guru in the command line in the upstream issue you created.\nShare the call you made (with all the input params) and the result. Do this for when getting references for the definition and also for the place where the symbol is used.. Closing this issue as there is an upstream issue tracking the same.. What do you mean by \"cannot find the package\"?\nAny build errors?\nCan you share screenshots?\nWhat do you mean by \"auto-include\"?\nDo you mean adding missing imports?\nCan you share your settings?. @kilmore Closing this issue as we haven't heard back from you in a while.. We are tracking something similar in #263. Can you add your thoughts there?\nCodelens (the button you refer to) and having a command is do-able\nChanging the //go:generate to a link is not.. Can you try\n\"[go]\": {\n   \"editor.formatOnSave\": true\n}\nRemember that Workspace Settings will override Global/User Settings.\nCan you also try on a smaller package separately?\nIf the formatter takes more than 750ms then it is skipped as slow processes like that can end up adding edits to file after manual edits from user. Does manual formatting work?. Ok, then it's the case of formatter taking more time than 750ms.\nI am currently on vacation. A few things you can do\n- stay on the current version, run manual formatting when needed. When I get back, I can look at bringing back the old behavior as a fall back, but it will bring back the 5 issues that the new model is fixing\n- or you can revert to the previous version. Get the vsix file from the previous release https://github.com/Microsoft/vscode-go/releases/tag/0.6.69 and run \"code --install-extension Go-0.6.69.vsix\" and then disable aauto update of extensions. @esinek manual formatting shldnt be affected. I don't recall the keyboard shortcut in Mac for formatting. Can you try the formatting cmd from the cmd pallet or right click on editor and choose \"format document\"\n@tapir That does sound suspicious. Can you drop a few console.log() statements in the file \"$HOME/.vscode/extensions/lukehoban.go-0.6.70/out/src/goFormat.js\" and see if formatting provider is being called? \n- Add console.log(timeTaken); just before the return resolve(textEdits);. \n- Save the file and reload VS Code\n- Edit a Go file and save it.\n- Check the console for the logs. Help -> Toggle Developer Tools -> Console\n. @egorovli The reason for what you are seeing is explained in https://github.com/Microsoft/vscode-go/issues/613#issuecomment-353649374\n@iwaseyusuke The formatting tool does not depend on what the linter does. The format on save feature however is aborted when formatting takes more than 750ms.\n@tapir Did you use the same codebase on Linux and Windows for comparison? It could be that the formatting tool is slower in Windows when compared to Linux? Also, did you get a chance to follow the steps in https://github.com/Microsoft/vscode-go/issues/1419#issuecomment-353255121 and get some logging on the time taken by formatting?\n@nathj07 Adding/removing of imports just from std lib and not from GOPATH seems unrelated to this issue. Does the same happen when you are on the 0.6.69 version of the Go extension? See https://github.com/Microsoft/vscode-go/issues/1419#issuecomment-353125217 for instructions on reverting to 0.6.69.\n. @nathj07 Can you log a separate issue for the adding/removing of imports working only for std lib in the latest version with a sample code that I can use to repro?. @tapir Add a console.log(timeTaken); just before the return resolve(textEdits); Ensure that you have reloaded VS Code after making changes to the goFormat.js file. If you still get the Activating extension \"lukehoban.Go\" failed message with the missing module, then your current version of the extension seems to be corrupted. Uninstall and Install the extension and try again.\nOthers on 0.6.70 version and not getting the format on save feature,\nDo you see any error messages in the Console when saving the file? Help -> Toggle Developer Tools -> Console. @tapir In your case, the issue turned out to be extension activation failure. Meaning, none of the extension features worked\nBut many others here are seeing features line lint/vet work, but not format on save. So there is still an issue here that I cannot repro.\n@iwaseyusuke Can you consistently repro the format on save feature not working on larger projects, and it works on smaller projects?\nIt will help if any of the others having the format on save issue in 0.6.70 version of the Go extension can follow the instructions in https://github.com/Microsoft/vscode-go/issues/1419#issuecomment-353255121 and share if indeed the formatting is taking more than 750ms.\n. @kaixianghu Thanks for the extra information about auto-save. Now I can repro!! Can you try disabling the auto-save feature and then seeing if the formatter is being called on manual file save?\nOthers,\nAnybody seeing the format on save issue when auto-save feature is disabled?. @iwaseyusuke I can fix the issue of the formatting tool erroring with the max buffer issue. Are the numbers 1925 and 47 the time taken? . Ok, so far there are 4 categories I see forming\n1. Issue with the Go installation where uninstalling and installing the extension again works.\n     - These are the cases where in the console you see error messages about extension activation failure\n     - Or error about no formatter for go installed \n2. Auto-Save is enabled and set to afterDelay\n     - We moved from our own special implementation of format-on save feature to that supported by VS Code. And by design the latter is disabled when auto-save is on. This is to keep cursor and selections stable as you type. \n3. Formatter takes more than 750ms\n     - Slow formatters are aborted by the format on save feature of VS Code as they can delay the save operation and cause perf issues.\n     - With the latest Go extension (0.6.71), we start logging a message in the console (Help -> Toggle Developer Tools -> Console) if the formatter is taking too long.\n4. Packages being wrongly imported when there are global variables matching the pkg name. \n     - With the latest Go extension (0.6.71), you will be prompted to update your goreturns tool after which you shouldn't see this issue.\nAnybody seeing anything other than the above 4?. @mlitvin Do you see similar error like @bofabcd in https://github.com/Microsoft/vscode-go/issues/1419#issuecomment-361103284 when the formatting on save doesn't work? You will have to open the console via Help -> Toggle Developer Tools -> Console\n@bofabcd Unfortunately, that is the expected outcome of slow formatters currently. Anybody reaching this issue please see https://github.com/Microsoft/vscode-go/issues/1419#issuecomment-355654879\nClosing this issue now, as most of the formatting issues have been addressed.. Thanks for logging the upstream issue @pjebs \nWill close the current issue here as there is nothing to do in the Go extension for this.. https://github.com/Microsoft/vscode-go/blob/0.6.70/src/debugAdapter/goDebug.ts#L664 is where we convert what we get from dlv (what you see as the output of the print cmd when using dlv directly)\nAs you can see, dlv can communicate the type of the variable and uses the reflect#Kind for it. The Go extension can make use of this information to display the variable value.\nIn case of the time.Duration object, the information on type would be some kind of int (I assume). There is no way I know of to differentiate it from other ints. This is why the Go plugin cannot fix the issue at hand. The fix needs to come from upstream.\nIf you have any ideas, I am open to hear them. > would it be possible for us to signify that a variable is actually a particular type (i.e. time.Duration instead of int64)\nWho would be the us? People writing the code being debugged or dlv?\nThe Go plugin would depend on what dlv would return the type info as.. But how would VS Code know that the variable is of type time.Duration?. Can you share a sample code that does that?. > The user tells it to pretend the int64 is actually a time.Duration\nHow do you propose this be done?\n\nMy suggestion is built into the VSCode UI.\n\nAm sorry, I don't understand what changes to the VS Code UI are you suggesting. Can you elaborate?\n. Can you try debugging a simple single file program and see if you get the same issue?\nIf not, then can you share a simple sample code where you get the issue so that I can try to get a repro?\nAlso try adding \"trace\": \"verbose\" to your debug config in the launch.json file. This will dump a series of logs in the Debug console. Share that.. The terminal has nothing to do with how the Go extension runs dlv. VS Code sets the working directory to be what was set in the program attribute of the debug configuration provided in the launch.json file.\n. @pjebs Any updates here? Are you still seeing the issue?. @pjebs Any reason you are suggesting to try gdlv instead of dlv? The Go extension uses the latter not the former.\n@Wilkolicious As per your logs, the GOPATH is /Users/Wilkolicious/go and you are trying to set breakpoints in a file that is not under your GOPATH. Why so?. @Wilkolicious We have seen the breakpoint creation failing with unknown file:.. in case of symlink files before. I dont have answers there. https://github.com/Microsoft/vscode-go/issues/1307#issuecomment-352190192 was what one of our other users concluded.\nWhy not use multiple GOPATHs instead of symlinks? You can set GOPATH to /Users/Wilkolicious/go:/Users/Wilkolicious/someotherlocation. Ah! thanks @pjebs, I did not know that!. @jbowen93 I am guessing you are using symlinks as well? Please see https://github.com/Microsoft/vscode-go/issues/1421#issuecomment-359127404. @jbowen93 Can you provide details on what your GOPATH is and which folder have you symlinked to which location? i.e Are the physical files at /Users/bowenjosh/Oss/golang/src/D1/D2/D3 or are they somewhere else and you have symlinked them to /Users/bowenjosh/Oss/golang/src/D1/D2/D3? At what level have done the symlink?\n@DazedNConfused-\n\nall my repos live in /home/user/git whereas the GOPATH lives in /home/user/go. ... What are the possible suggested solutions (that allow me to keep this separation of folders)?\n\nWhy not set GOPATH to /home/user/go:/home/user/git?\n. @DazedNConfused- And you have removed the symlinks?. @DazedNConfused-  For the exec scenario, can you try running delve directly and see if you are able to hit the non-main breakpoints?. @DazedNConfused- Please log a separate issue for the not being able to hit non main breakpoints when using exec. Include a sample code that I can use to repro along with logs after you set \"trace\": \"verbose\" in your debug config. Share the debug config too. @pjebs Ah, sorry about that. Symlinks turned out to be the issue for @DazedNConfused- \nDo you mind pinging me on slack or gitter so that we can try and see why things are not working for you? I am running out of ideas.\n. @pjebs And here I was waiting for a ping from you based on https://github.com/Microsoft/vscode-go/issues/1421#issuecomment-365463683 :)\nAll,\nI cannot solve an issue I cannot repro. In such cases, the best I can do is debug the issue along with you either via slack or gitter. Everyone here is free to ping me on either of those channels, and I can help you to set up a local environment of the Go extension (which is very straight forward) and debug the debugger \nI most cases, the problem is with the configuration or gopath which we can get to easily by debugging the extension.\n@kcramer97 Yes, you are right. remotePath is the key. @pjebs I believe @kcramer97's scenario was that of  remote debugging and so remotePath and containers are part of the process\n@akulich One limitation of dlv is that you can only add breakpoints when the program is halted. Which means you can only add a breakpoint when another breakpoint is hit or before starting the debug session. #978 is tracking the possibility of getting the pause command to work so as that we can add breakpoints\nOthers referring to issues with debugging python and javascript please log an issue in the python extension and the main vscode repo respectively \n. If anybody here still sees the issue, please ping me over slack or gitter.. Update:\n@akulich The limitation of breakpoints can only be added when the program is halted is no longer true. A few updates ago, we have fixed this limitation.\nAs mentioned in https://github.com/Microsoft/vscode-go/issues/1421#issuecomment-410107474, unfortuantely, there is nothing much I can do here and therefore I am closing this issue.\nIf anybody sees the problem of unverified breakpoints in the latest update to the extension, please log an issue with sample code and debug logs.\nHappy Coding!\n. @cocotyty Can you provide more details?\nThe GOPATH that you see when you run the command Go: Current GOPATH is the GOPATH used by all the processes and Go tools in the Go extension. Try setting \"go.formatTool\" to \"goimports\". Also see https://github.com/Microsoft/vscode-go/issues/613#issuecomment-353649374. Looks like the extension got into a corrupted state.\nUninstall and Install the extension again, and it should work. @Mistobaan My apologies, I looked at the second comment on this issue and didn't read through your original issue description properly.\nCan you share what your current status is?\n\nAlways shows \"reload and uninstall\" buttons even after reloading multiple times\n\nThis seems to be an issue with core VS Code extension management and not the Go extension itself.\n. Use the setting go.toolsEnvVars. Any env vars there will be used by all the dependent Go tools used in the Go extension. @nathj07 Just tried your example. Import statement for the spew pkg does get added for me. Can you try the below:\n\nShare any errors in the console when you get this issue. Help -> Toggle Developer Tools -> Console\nCan you try setting go.formatTool to goreturns. Try to repro the issue. Then change it to goimports and  try again to get a repro. See if there is a difference when using the 2 tools or both give you the same problem\nDo you see the issue when manually formatting the file? Right click -> Format Document\n. That's totally fine @nathj07 \nEnjoy your holidays. I'll try your example in some time. Meanwhile does manual formatting add the missing imports?. What I am asking is independent of Go: Add Imports.\nDo the missing imports get added when you right-click and choose Format Document?. Ok, First lets tackle goimports not adding the imports when running Format Document.\nDo you see any errors in the console when running Format Document  when using goimports?. @nathj07 When I talk about \"errors in the console\", I mean the console that appears when you go through the Help -> Toggle Developer Tools -> Console and not the output pane where the results of build/vet/lint appear.. Ok, those logs don't help much.. \n\nI cloned your example from https://github.com/nathj07/go-resourcesync and tried removing the imports (both std lib and the others). They got added back each time on save :)\nYou mentioned in https://github.com/Microsoft/vscode-go/issues/1427#issuecomment-354743219 that you see the issue only in complex projects. The only reason this may happen is if formatting is taking more than 750ms. \nCan you update to the latest version of the Go extension (0.6.71) and try editing and saving your file again? If the formatter is indeed slow, then the console (Help -> Toggle Developer Tools -> Console) will show a log Formatting took too long(...ms). Format On Save feature could be aborted.\n. Ok, then the issue is not with std lib pkgs vs non std lib pkgs\nIts about slow formatters which end up aborting the format on save process which I have covered in https://github.com/Microsoft/vscode-go/issues/1419#issuecomment-355654879\n. @halfcrazy I had some refactoring in mind for the goFormat.ts file, so I included this change in it as well. See https://github.com/Microsoft/vscode-go/commit/1d7f4b2157ae9c6ba27a3061eee3dca2643f356b\nCan you try out the latest vsix and see if you get the repeated prompts on save?\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix \n- run code --install-extension Go-latest.vsix\n- If the above fails with Error: end of central directory record signature not found, then get latest from the master branch of this repo and use the Go-latest.vsix file from there\n- Reload VS Code and test\n. - Does this happen only with new pkgs? \n- Are you able to get completions for other packages? \n- What about packages from std lib?\n- Are other features of the extension working as expected? Like Go to Definition or build/lint/vet?\n- Run gocode close on a terminal and then try again\n- Any errors in the console? Help -> Toggle Developer Tools -> Console. We use gocode for completions which depend on the installed pkgs and not the source code i.e the pkgs in GOPATH/pkg and not GOPATH/src\nRunning go build -i would install all the dependent pkgs.. vscode-go does support multiple paths in GOPATH. Are you seeing something that tells you otherwise?\nRead https://github.com/Microsoft/vscode-go/wiki/GOPATH-in-the-VS-Code-Go-extension. That might clear some of the doubts. When you open VS Code this way and run the command Go: Current GOPATH, what do you see?\n\nWell this document states that, for all except \"GOPATH from the environment variable\" multiple paths are supported. That might be an oversight in the document\n\nYes, thats an oversight\n. Looks like you have set go.inferGopath set to true in which case GOPATH is inferred from the folder that is opened in VS Code instead of using the GOPATH from the env var.\nSet it to false and try again. No problem @dalu\nHappy New Year to you too and Happy Coding!. @dc0d For some reason when I copy your example of unicode chars I get the below and I cannot repro\n\nSo I tried a few chinese chars instead and I still cannot repro.\nCan you try running gocode from the command line and see if you get any errors?\nYou can use the show offset extension to get the offset you need to run gocode\n. Used your main.go.. Still can't repro the issue.\nThe output you have shared seemed to be from the gocode -debug -s i.e. the daemon/server that's running to serve the requests\nInstead can you share the output from the client? Example: gocode -f=json autocomplete path-to-your-file c266 where 266 is a random number I used, but you should use the char offset (for which you can use the show offset extension. gocode uses a client/server architecture.\nRunning gocode -s or gocode -debug -s, runs gocode in server mode\nWhat you have shared before is the output from gocode -debug -s\nThe Go extension for VS Code runs gocode in client mode, which you can also do from the command line. This is what I need you to share.\n\nEdit your file in your normal text editor. Type a letter for which you would expect auto-completions. Make note of the character offset under the cursor. Save the file.\nKill all processes of gocode\nRun gocode -in file-path autocomplete c123 where 123 is the character offset. Below is an example of how I ran gocode in the command line\n\n\n. > Still getting nothing\nAre you getting nothing even without the unicode comment? Ensure to pass the file path in the -in flag\n\nwrong list of suggestions (just Go's built-in types and functions; keywords\n\nThose are still coming from gocode itself\n. Thanks @dc0d \nThat confirms that the issue is upstream with gocode.\nI have logged https://github.com/nsf/gocode/issues/489 to track this issue upstream. @dc0d Pushed a fix to use byte offset instead of char offset when calling gocode. Can you confirm that this fixes the current issue? All you have to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix \n- run code --install-extension Go-latest.vsix\n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code and test. This fix is now out in the latest update to the Go extension (0.6.71). Using native Go tools to give Go language support has been a general practice among most editors. Example: Vim, Atom, Sublime, Emacs etc. all of which I believe is open source as well.\nI can't speak for Goland. Its proprietary code and not open source. It definitely has a dedicated team of multiple engineers knowing Go in and out where as in comparison vscode-go is an open source project, has 1 person (me) giving about 10% of my time to it and powered by the open source community.\nI would definitely prefer to use a language server instead of various native tools. The main reason being exactly what you have covered. But there is no language server for Go at the moment providing comprehensive coverage of necessary features. \nThe language server from sourcegraph (that you have linked) gives some read only features like Go to definition, Find all references, Symbol search etc. and not write related features like rename, auto-completions, refactoring etc.\nI do appreciate your feedback though I'd have preferred you had taken a look at our README first. We do provide an option (since March 2016) where you can choose to the use the Go language server from source graph. Please see https://github.com/Microsoft/vscode-go/blob/master/README.md#go-language-server-experimental\nI would suggest you to log feature requests in (or better yet contribute to) the language server from source graph for the write related features. vscode-go can then make use of these features.. Using Debug > Start Debugging and the debug test links have nothing do with each other. Using one does not affect the other.\nAre you able to debug tests using a debug configuration in the launch.json file?\n. Looks like you might not have the gotype-live tool installed.\nCan you run go get -u github.com/tylerb/gotype-live in your terminal and try again?. Great, Happy Coding!. There is a keyboard shortcut to trigger the info that is shown on hover. Run the command Preferences: Open Keyboard Shortcuts and search for \"hover\"\n\n. Have you tried using the go.alternateTools setting to do this?\n- Install the gohint tool using go get\n- Add the below in your settings\n\"go.alternateTools\": {\n    \"golint\": \"gohint\"\n}\nThis will make the extension use gohint instead of golint for linting.\n. There is some existing issue with zsh which we haven't been able to resolve yet. See https://github.com/Microsoft/vscode-go/issues/1133#issuecomment-349174335. Looks like the GOPATH doesn't get passed from .zshenv to VS Code extensions.\nTo confirm that, can you check if the GOPATH you see from the below ways match?\n- echo $GOPATH in your zsh shell\n- echo $GOPATH in the integrated terminal of VS Code when VS Code has been opened from the zsh shell\n- Run the command Go: Current GOPATH from the command pallet\nI am assuming that you haven't set the go.gopath or go.inferGopath settings. I do believe this is a cool feature to have, although I dont believe this extension is the right place for it. \nAs VS Code and this extension has gained popularity, we have seen a gradual scope creep over the past year. Being a sole maintainer of this project, it is getting a little hard to support all incoming requests and maintaining the ever growing set of features. Therefore,one criteria I am using now in the triaging process is whether the feature request would make sense as a separate extension. This current feature request appears to be so.\nThanks for all the work. Let me know if you need any help creating the new extension if you choose to do so.. Thanks @smt93 for chiming in!\n@sullyme The issue is with how the Dark theme assigns colors for the different textmate scopes which is controlled in the core VS Code. This issue was moved to Microsoft/vscode#41822. I can't repro this...\nCan you run the goreturns tool from the command line on your file and see if does the same?. Glad you found the root cause, Happy Coding!. Thanks for reporting @mastercactapus!\nI've update the error message with https://github.com/Microsoft/vscode-go/commit/300510e74aceb881817336f1f39f7b160af3042e\n\nI haven't had a chance to make sure gopkgs is always the command that's run (i.e. if gopkgs is missing), and/or if the --format option is used \n\nIf the gopkgs is missing or doesn't support the -format flag then an appropriate prompt will be shown. See https://github.com/Microsoft/vscode-go/blob/0.6.70/src/goPackages.ts#L27 and https://github.com/Microsoft/vscode-go/blob/0.6.70/src/goPackages.ts#L35\nSo the only pending thing to do is to fix the upstream issue that you have logged.\ncc @uudashr. Thanks @uudashr!\n@mastercactapus You can run Go: Install/Update Tools command to update the dependent Go tools.\nYou can also update just gopkgs by using go get -u https://github.com/uudashr/gopkgs.\nLet us know if this solves the issue and you get the autocompletion working as expected for unimported packages\n  . Great! Happy Coding!. - Can you share a sample code where you can consistently repro this?\n- How are you trying to get the list of symbols?\n- Any errors from Help -> Toggle Developer Tools -> Console?. Am not able to repro...\nDo you have the go-outline tool installed? Look for it in your $GOPATH/bin or if you have set the go.toolsGopath setting, then look for it under that path. Am not able to repro...\nDo you have the go-outline tool installed? Look for it in your $GOPATH/bin or if you have set the go.toolsGopath setting, then look for it under that path. Are other features of the Go extension working? Like Go to definition, code completion?\nAre you using the language server? i.e have you set go.useLanguageServer?. Are other features of the Go extension working? Like Go to definition, code completion?\nAre you using the language server? i.e have you set go.useLanguageServer?. Another alternative to updating the dependent Go tools is to run the command Go: Install/Update Tools\nGlad to know that things are working for you now, Happy Coding!. Works as expected for me..\n\nThe VS code always search the default folder /user/../go.\n\nCan you share a screenshot of what made you come to this conclusion?\nAre you talking about go build looking for packages in the default folder?\n. > it fails when opening the code folder separately.\nSorry, I don't understand. Can you elaborate with examples?. The usage of go.toolsGopath in the Go extension does not depend on what folder is opened in VS Code.\nAre you sure the below binaries exists under /Users/caoyuanle/Documents/gotools/bin?\n'gocode',\n    'gopkgs',\n    'go-outline',\n    'go-symbols',\n    'guru',\n    'gorename',\n    'godef',\n    'godoc',\n    'goreturns',\n    'golint',\n    'dlv'. @heila Can you check if the tools listed in https://github.com/Microsoft/vscode-go/issues/1443#issuecomment-357475980 are under <the-go-tools-goapht>/bin?. Does the latest changes to Intellisense help explain what might be happening here?. >  is there a way to disable this behavior?\nI dont think so.\nYou can log a request in the vscode repo\nClosing this issue as this is out of scope of the Go extension. What do you mean by \"custom go file\"?\nPlease provide sample code that I can try to get a repro on.. the issue about not able to set breakpoints when the program is running is discussed in https://github.com/Microsoft/vscode-go/issues/473#issuecomment-334901004 and is an issue with delve itself. See https://github.com/derekparker/delve/issues/982. Do you see any errors in the console? Help -> Toggle Developer Tools -> Console\nUntil the issue is resolved, you can add the below in your settings\n\"[go]\": {\n      \"editor.formatOnSave\": false\n}\n. Does manual formatting remove the changes as well?. Can you repro it if you added the setting \"go.formatTool\": \"goimports\" or \"go.formatTool\": \"gofmt\"?. Thanks @harunrzl. goreturns is the default tool used for formatting. \n@ryantriangles Does that help you as well?. @ryantriangles Looks like the goreturns that is getting updated and the one that is getting used by the Go extension are different in your case. Can you search your machine for the file goreturns (goreturns.exe in case of Windows) and see if you have more than 1?\nI am able to repro the issue by installing an older version of goreturns. The newer version supports the flag srcdir which the latest version of the Go extension needs. If user still has the older version, the Go extension re-tries formatting by calling goreturns again, but this time without the srcdir flag. Looks like there was a race condition causing the current issue in this case.\nI have pushed a fix which you can try as well.\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix\n- Reload VS Code window and try editing and saving your files.. I've published a release that should fix this issue.\nSorry for the trouble everyone.. @zengming00 @wangjieyanda Which platform are you on? Windows? Mac? Linux?. @WenhaiLin Do you get the pop up asking you to update goreturns?. @WenhaiLin Then go get -u must be failing to update the tool. I found myself in a weird setup where go get -u would update the source code of the Go tool I am updating but would not update the binary.\nTry running it manually\ngo get -u -v sourcegraph.com/sqs/goreturns. If you have set go.toolsGopath then set export GOPATH=<value of the the go.toolsGopath> before running go get and then set it back to the older GOPATH. @pjebs \nWe can attach to an already running headless dlv instance using the remote debugging feature\nDoes that help?\n. In that case, I'll close this issue. If you find any issues getting the remote debugging setup to work, pease log a new issue.\nThanks and Happy Coding!. Can you try the -offset flag (which the Go extension uses when calling gorename) instead of -from flag in the command line and see if that works as well?. The error you are seeing is coming from gorename when it is run by the Go extension.\nLooks like gorename tries to run go tool cgo which fails with exec: \"go\": executable file not found in $PATH\nYour Go executable seems to be in /usr/local/Cellar/go/1.9.2/libexec/bin. Is this part of your $PATH?. How do you usually open vscode? Do you open it from the fish shell?\nIf yes, then can you open vscode from the bash shell and see if renaming works there?\nWe have had cases where from when VS Code is opened from certain shells, the env variables do not reach the extensions. A workaround until we figure this out is to add \"go.goroot\": \"/usr/local/Cellar/go/1.9.2/libexec\" in your settings. Can you see if that helps?. VS Code has 3 kinds of processes\n- 1 main process\n- multiple renderer processes (1 for each VS Code window that you open)\n- multiple extension host processes ( 1 for each VS Code window that you open)\nThe main process spawns the renderer process which in turn spawns the extension host process.\nIts the extension host process which runs all the extensions.\nWhen you open the Developer Tools and look for process.env.PATH, its the renderer process that you are looking at. This renderer process doesnt seem to get the right env vars, and since the extension host process is the child of the renderer process, it wont get the right env vars too.\nI would suggest to open an issue in the vscode repo for the problem of env vars not reaching the renderer process\nMeanwhile, for the Go extension I have pushed a fix that will ensure that the GOROOT is part of the PATH  when the Go extension calls the dependent Go tools. Can you give this a try and see if this helps?\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix\n- Reload VS Code window and try to rename. Thats good to hear @jolivares \nThe fix applies to the processes that the Go extension starts.\nThe renderer process still doesn't get the right env variables (which you found by checking the value of process.env.PATH in the developer tools).\nCan you log an issue for that in the vscode repo? . well, if you ever encounter it again, please log the issue\nHappy Coding!. Just released an update (0.6.74) that has the fix for this issue. Thanks for your patience everyone!. Thanks for reporting this @szyhf, good observation.\nThe fix is now out in the latest update to the Go extension (0.6.81)\nThe Go: Add Import feature will use the cached packages that get created by the auto-completion feature which also needs the packages. The only time it might still be slow is when used for the first time even before typing any code.. @wayneashleyberry Like @canercidam has suggested you can use the command Go: Lint Current Package to lint manually and disable the lint on save feature in the settings.\n@canercidam I have logged #1456 for the issue of the output pane popping up. @wayneashleyberry Thanks for your kind words :) You can have both by the way. You can keep the default behavior of linting on save and run the command Go: Lint Current Package from the command pallet whenever you want.. Oh sorry, I missed that part about wanting to use different tools altogether!\nYou can set up a task to use the tool of your choice and run that task when needed.\nSee https://code.visualstudio.com/docs/editor/tasks. Is there any error that shows up? Any notification?\nWhat platform are you on? Windows, Mac, Linux?. The uninstall and install only helps if you see an error around failure to activate the extension in your console (Help -> Toggle Developer Tools -> Console)\nI can repro this issue and am looking into it.\nUntil then the workaround is to either update the goreturns tool (You can do this by running Go: Install/Update Tools) or by changing your formatting tool to \"gofmt\". The fix is out in version 0.6.73\n. Can you share sample code that I can use to get a repro?\nAlso set\"trace\": \"verbose\"` in your debug configuration and try again. Can you share the logs that then get printed to the debug console?. In that case, please re-open this issue when you see the problem again and share the logs. @Skinass Nothing around the definition feature was changed in the last 3 releases or so.\nOpen the console (Help -> Toggle Developer Tools -> Console) and see if you have any errors there from the godef tool after retrying the \"jump to definition\".\nThen use the exact same call to godef from the command line.\n. Thanks @tw1nk!\n@johnunclesam I hope that answers your question.. Just released an update (0.6.74) that has the fix for this. The latest release is 0.6.73\nIt had a single bug fix around formatting and I didn't get around to updating the Changelog for the single bug fix.. @santos22 You are most welcome to give it a try. If this is the first time working on this extension, then do read https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code#building-and-debugging-the-extension\nYou can check the suggestion output returned from this promise to see if consecutive requests are getting 0 suggestions\n. Everyone, Thanks for your patience, this issue got lost in a sea of notifications and so I couldnt respond sooner :(\nI created this issue in January when it made good sense to have this feature.\nSince June, the original gocode is no longer suggested to be used. Instead we use its fork which has its own issues with external packages.  Plus, now with module support, things are still not stabilized.\nAnd so, suggesting an update when gocode doesnt give results will not always work.\nTherefore, I am closing this issue.\n@knrt10, feel free to look at other issues marked as help-wanted and/or good-first-issue. \nBuilding & Debugging the Go extension is the place to start to have a local setup of this extension up and running.\n. I don't see this on my Mac or Windows\n\nAm using Go 1.9.2\nDo you still see this?\n. None of the settings touch how the hover text is rendered as far as I know...\nAre you zoomed in? Can you try on the latest version of VS Code (1.24.0) ?. If you want to use the GOPATH as is, then why not use the go.gopath setting instead of go.inferGopath?. So from what I could understand, you have\n- one GOPATH where you install some common cmd packages\n- different GOPATH for each of your projects\nIs that right?\nIf so, then you can set the go.gopath setting in  \"workspace\" settings instead of \"user\" settings. > One workaround I've found is to build go from source in a directory that I have write access to\nDo you mean building Go itself or the Go code you are writing?\n\nFor the record, I ended up building the toolchain from source\n\nWhat does \"toolchain\" refer to here?\n. Bear with me, I am not too familiar with Go either, so I have some follow up questions\n\nin a cross-compilation context, this tries to install to an unwritable location\n\nYou mean the dependencies are attempted to be written to an unwritable location?\nAFAIK the location the dependent packages are installed is under GOPATH/pkgs.\nHow is this different in the cross-compilation context?\nAlso what exactly are you doing to get into the cross-compilation context?\n. That was interesting...\nSo the suggestion is to use Go from source to avoid getting into the \"everything is slow\" problem when cross-compiling. If that is the suggested way to go, then I believe no change is required from the VS Code Go extension.\nOn the other hand, to get simple programs cross compiled, it definitely feels like an overkill to have Go from source.\nI wouldnt remove the -i option by default because as you know it helps speed up the building process. We could have a setting called say go.enableCrossCompile. If set to true the build process can skip the -i flag.\nAnything else the Go extension to VS Code should be doing differently when cross compiling?. @jwaldrop @mwirges @cardonator, I have added a setting (go.installDependenciesWhenBuilding) that you can set to false to stop passing -i to go.build. Can you give it a try and let me know if it fixes your current issue before I release it? All you have to do is:\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. This feature is now out in the latest update to the Go extension (0.6.80). Those errors are coming from delve.\nAre you able to run delve from the command line and debug the program?. In that case, the problem is specific to the project you are working on.\nI would suggest getting in touch with others who might have worked on the same project.\nThe Gophers slack channel is a good place to start.\n\nOr you can log a bug in the repo for delve. Someone there will definitely be able to help. Make sure to submit sample code that they can use to repro. #1522 is tracking the feature request to be able to run all benchmarks in current file/package using a separate set of codelens.\nWe will close this issue in favor of #1522 for which we will accept PRs.\nPlease subscribe to #1522 and Happy Coding!\n. > \"Cannot find \"go\" binary. Update PATH or GOROOT appropriately\"\nYou are getting this error because the extension cannot find the Go binary. Do you have Go installed? Run go env in the integrated terminal in VS Code. What do you get?\nThe rest of the errors are about not finding Go tools that the extension depends on.\nPlease run the command Go: Install/Update Tools to install the required tools.\n. Does the output of the command Go: Current GOPATH match your GOPATH?\n. @smithaitufe So in your case, VS Code figures out the expected GOPATH ($HOME/Documents/projects/go), but go env doesn't ?. When you run go env in the integrated terminal in VS Code, do you get expected GOPATH?. Have you changed the setting for either go.gopath or go.inferGopath?\n\nI decided to set GOPATH in vscode to /home/smith/go\n\nWhy would you want to do this if the GOPATH you want to use is $HOME/Documents/projects/go?\nWhen you run go env GOPATH in an external terminal, do you get /home/smith/go or /home/smith/Documents/projects/go?\n. Can you get a consistent repro of the issue or does it happen randomly? If you can repro it consistently, then can you share a small sample code where you see the issue?. @chenenze I cannot help if I don't have a file that I can use to see the issue :(. @xfstart07 Please share a sample code where you can reproduce the issue consistently . Thanks @molon, I can repro the issue, but am not sure what the root cause is.\nUntil I get around to fixing this, the workaround is to either disable the formatOnSave feature by adding  the below to your settings\n\"[go]\": {\n \"editor.formatOnSave\": false\n}\nOR you can downgrade to 0.6.69 version of the Go extension by\n- Disable auto-updating of extensions\n- Downloading the vsix file from https://github.com/Microsoft/vscode-go/releases/tag/0.6.69\n- Run code --install-extension Go-0.6.69.vsix and restart VS Code\n. Alright, I found the problem!\nRecently, I moved from using the execFile to spawn when creating the child process that runs the formatting tool.\nWhen using execFile there is default utf-8 encoding that happens. When using spawn, the streams aren't encoded by default and we need to set the right encoding to ensure that the multi-byte content in stdout gets handled properly. \nI'll release an update with the fix in the next week or two. Until then, you can get the fix by doing the below:\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix \n- run code --install-extension Go-latest.vsix\n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code. Just released an update (0.6.74) that has the fix for this issue. Thanks for your patience everyone!. If you can replicate the issue in a small code sample and share the code and the folder structure, I can attempt to figure out what is going on. That was simple enough :)\nThanks for reporting this @adam-p \nI have pushed a fix which should be out in the next update to the Go extension which should be in a week or so. Just released an update (0.6.74) that has the fix for this issue. Thanks for your patience @adam-p!. @mkorejo One simple way to make gopkgs fail would be to change gopkgs itself :) You can find the code for it in GOPATH/src/github.com/uudashr/gopkgs/cmd/gopkgs, make a change and run go install to make sure the binary updates. @uudashr might have better ideas though :)\n. Or maybe modify gopkgs to return empty array?. @wudi We've made changes in the past 2 months to gracefully detach the dlv debugging session which takes care of the killing the debug processes as well. \nIf you still see this, please re-open this issue.. By default, the Go extension uses the guru tool to find references. If you dont have guru installed and you run Find All References, you will be prompted to install the tool.\nYou can also see a Analysis Tools Missing warning on the bottom right corner which you can click and install the necessary tools. See https://github.com/Microsoft/vscode-go/wiki/Go-tools-that-the-Go-extension-depends-on\nUsing the language server is another way of getting few features. See https://github.com/Microsoft/vscode-go#go-language-server-experimental. Is the test1 package installed? We use gocode for completions that looks at the packages under GOPATH/pkgs to give completions.\nRun go install goWebStudy/test1 to ensure that its installed and try again. I am assuming you mean \"renaming\" when you say \"refactoring\".\nThe Go extension uses the gorename tool to give the renaming feature. Its the gorename tool that expects code to be error free. You can try running gorename from the command line and am sure it takes that much time and returns with the same error.\nhttps://github.com/sourcegraph/go-langserver/issues/220 is the issue thats tracking a feature request for the Go language server to implement rename. If that get's through and is faster and better, then we can integrate the same here in the Go extension to VS Code. - When you run the Install All, the output pane opens up with logs for each tools being installed as well as the location they are being installed to. Does that location match with your expected GOPATH?\n- Run the command Go: Current GOPATH. Does that give you the expected GOPATH?. Why are you removing the go.toolsGopath?\nThe Go extension doesn't keep track of where tools are installed. It looks for them in go.toolsGopath and then in the GOPATH and then in the PATH.. That's weird. If you have set go.toolsGopath, then the extension should look for the tools first there.\nCan you paste a screenshot of the Go extension complaining that it cant find the tools?. In the last but one screenshot you show that E:/Code/src/github.com has the repos of the tools. Can you instead look at E:/Code/bin and check if you have the actual tools?. That's why the Go extension keeps asking you to install the tools, because it cant find them in the bin folder!\nTry deleting the repos corresponding to these tools (See this list) and try again. glad to hear you figured that out :)\nHappy Coding!. Duplicate of #1469\nSee https://github.com/Microsoft/vscode-go/issues/1469#issuecomment-359302113 to get the fix before I release an update next week. Can you disable all extensions other than Go and see if you still have the issue? This is to eliminate the case that some other extension is interfering and causing the CPU load.. > Is this most likely just related to the CPU spikes\nYes, I believe so.\n\nSo what is the best approach here?\n\n\nRun the command Developer: Show Running Extensions\nClick the Start Extension Host Profile button at the top right, it's the circle\nReproduce the issue\nStop profile\nYou should be able see snapshots of CPU usage for each extension\n\n. Can you disable all extensions other than Go and see if you still have the issue? This is to eliminate the case that some other extension is interfering during file save. No problem, glad you found the culprit.\nHappy Coding!. This is not possible in VS Code at the moment. But work is under way.\nIt is part of the Roadmap: https://github.com/Microsoft/vscode/wiki/Roadmap#for-extension-authors\nOnce we have good support from the core, we will be seeing how we can get Go support.\nClosing this issue for now as there is no immediate work planned around this.\n. Can you run go env in a terminal and share the results?\nWhat folder have you opened in VS Code when you got this error?. Can you share what's in your Output pane under the Go channel?\nPress Ctrl+Shift+u to open the output pane\nSelect \"Go\" from the drop down thats on the top right corner of the output pane\n. Do you see the same when opening any of the Go projects under your GOPATH?. You will still have the code for all the Go tools you installed as part of the Go extension.\nFor example, you can open E:Users\\varg\\GoWorks\\src\\github.com\\ramya-rao-a\\go-outline. @okandas Please elaborate on whats not working for you in a separate issue. This current issue is about the error can't load package: package .: no Go files in C:\\Program Files\\Microsoft VS Code showing up on build.\n@burzum0727 Thanks for reporting this issue, I can repro it by opening a new untitled file when no folder is open. I have pushed a fix which should be out in the next update to this extension next week. Until then, please avoid working with untitled files.. > So you mean I can work now with the titled files\nWorking on titled files was never a problem. The output you shared in https://github.com/Microsoft/vscode-go/issues/1481#issuecomment-360434169 is the output of the processes that ran build, lint and vet on the file that was opened.\nGo uses the concept of packages (the folder that contains the Go files). When you work on an untitled file, there is no valid package that can be used for building which caused the issue.. Just released an update (0.6.74) that has the fix for this issue. . Thanks for reporting this issue @mrwonko!\nLooks like the gotests tool was expected a regular expression for the function names. Since we passed just the function names, anything that matched got picked up.\nFixed it with https://github.com/Microsoft/vscode-go/commit/193516764c80a9289d278e76898a924ffc9d6a52\nThe fix will be out in the next update to the Go extension which should be out next week. Just released an update (0.6.74) that has the fix for this issue. . We now have refactor code actions which follow this model.\nThere is only one diagnostic for which we provide code action (the missing import), am adding some telemetry around this to check the usage as I have a hunch this is not used much because formatting in Go adds the missing imports.. Or you can change the formatting tool that is being used to gofmt which doesnt remove unused imports\n\"go.formatTool\": \"gofmt\"\nThe default tool that is used is goreturns that removes unused imports and adds missing imports. Thanks for reporting!\nSeems to be an issue with VS Code and not the Go extension.\nI get similar issues on hover text when using typescript. This issue was moved to Microsoft/vscode#42353. Reopening as the upstream issue was closed . In the video I see that on saving the file i := 1 gets changed to i: =1 which of course is wrong and results in the error\nI believe you have some other extension installed thats doing this change\nCan you disable all other extension and see if you are still facing the issue?. Hmm... that is weird\nCan you enable just the Go extension and then add the below in your settings and try again?\n\"[go]\": {\n    \"editor.formatOnSave\": false\n}. I see that disabling format on save fixed the issue.\nWe use goreturns as a formatter. Can you run it in the terminal on your file and see if it does the same?. @n1koo Thanks for that information!\n@apovetkin I am assuming your issue as the same root cause as @n1koo and am closing this issue. Feel free to re-open it if its not the case. @philk Can you elaborate on the need for this a little?. I want to keep the option open for a user to override the addr flag\nWouldn't it be better to use localhost as default in the language server itself?\ncc @slimsag and @keegancsmith from sourcegraph . Thanks @keegancsmith!. Are you referring to the information shown on hover when you say \"type hint\"?\nFor completion try the below\n- In a terminal, run gocode close and then gocode -s -debug. This will run the gocode server in debug mode\n- Now try completion in vscode\n- For every new word you type, you should be able to see the result from gocode in the terminal. If you dont see completions from std lib here, then log an issue in the gocode repo. Thanks @alexwall \n@gh0o0st Were you using the language server as well?. Looks like everyone here has figured out the problem to be either an environment issue or a tool needing update. Closing.. Thanks for reporting @codingconcepts!\nWe need both the import path and package name for the installed packages to provide certain features in the Go extension. github.com/tpng/gopkgs provides only the import path and so we made the move to github.com/uudashr/gopkgs\nThe results from github.com/uudashr/gopkgs  gets cached, but the cache expires in 5 seconds. I can see how this can be aggressive in a busy GOPATH\nWhat we can do is set the expiry to be the maximum between 5 seconds and the time it took to run gopkgs the previous time.\ncc @uudashr . @codingconcepts Can you try out the below version of the extension and see if it helps?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extensions Go-latest.vsix\nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\n. Regarding guru, do you have codelens for references enabled? That calls guru frequently and guru is inherently slow on large code bases\nRun gopkgs -format {{.Name}};{{.ImportPath}} in the terminal. How long does it take to complete?\nCan you open ~/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js and replace all occurrences of 5000 with 300000? This will make the cache expire every 5 mins. . The reason I suggested increasing the time is just narrow down what the issue really is. Is it just that gopkgs is taking too long or too many requests to gopkgs is being made.\nBut then I realized just now that we have put checks in place such that if a previous request to gopkgs is still running, we dont create a new request. We wait for the previous request to finish and use its results.\nSo increasing the expiry time is not going to do the trick. My guess is that even after you change to 300000 you wont see any difference. Do let me know if that is true.\nThis is about gopkgs itself taking up too many resources to complete a request.\n. @codingconcepts Any updates?. @codingconcepts, @klauern  There have been some improvements that @uudashr has done to the the gopkgs tool to make it faster. Can you please try the below and let us know if the changes make any difference to your case? \n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. @codingconcepts Follow the wiki on Performance Issues. That should help you figure out on what's making the codehelper spin like that.. @codingconcepts The fix @uudashr made is now out in the latest update to the Go extension (0.6.81)\nI'll close this issue for now based on your feedback in https://github.com/Microsoft/vscode-go/issues/1490#issuecomment-392683764\n\nIf you find anything while investigating the high CPU usage, please log a new issue.\nAnd thanks a lot for your patience and trying out the fixes that we are putting out.\nHappy Coding!. Option 1 is what a language server ought to do, and we have a step forward in that direction. If you are not on Windows, you can try our support for the  language server from Sourcegraph. The issue with Windows support is tracked in https://github.com/sourcegraph/go-langserver/issues/113\nOption 2 is definitely doable and am open to consider any PRs and help if anyone has questions.\n. Great. @ijesonchen \n\nGo Language Server is not a suitable solution, since it does not support multiple GOPATH.\n\nThe language server should support multiple GOPATH as far as I know. \ncc @slimsag and @keegancsimth to confirm.\nDo you see the multiple gopath when running the command Go: Current GOPATH? That should be the same value passed to the language server\n@jonbonazza That's a great find. I don't know if guru has a way to ignore the vendor code. Ask in the Gophers slack. Someone there must know.\n. Given that the new language server work from Google will support the find all references feature, we are not inclined to support any new tool for the same feature.\nClosing this issue.. @gcoka What do you mean by \"go build file ignore rule\"?. @gcoka We use gotests to generate the tests. Do you get the same error when running gotests from the command line? If yes, then please log this issue at https://github.com/cweill/gotests. Please share your settings related to the go extension (the ones starting with go.)\nDoes this happen with even with the simplest of code or only in large projects?. @chandradeepak  The gocodeAutoBuild setting is related to the auto-completion feature and has nothing to do with the Go to Definition feature. Are you having issues with auto-completion or Go to Definition?\n. @chandradeepak If you are not on Windows, then do give the language server a try. \nWhich go binaries do you see the most that take up too much CPU cycles?. > Also, I am not really sure why Travis is failing. Any insight here?\nTravis is failing due to linting errors. Run npm run lint to see what errors these are.\n\ngo-find-references is just broken or if I am using it incorrectly.\n\nBased on https://github.com/Microsoft/vscode-go/issues/340#issuecomment-224313736 I'd guess that go-find-references should atleast give all the results that guru gives with some additional false positives, but your experiments seem to be concluding otherwise.\nOne thing to check is the value being passed to root. When you tested, were your expected references all inside the folder that was opened in VS Code?\n. I wouldnt add the support for go-find-references back until we are more satisfied with its results.\nIf all it does is a fancy text search, then VS Code can do the same out of the box. Closing as per https://github.com/Microsoft/vscode-go/issues/1491#issuecomment-468966736. Sure!\nBasic set up steps are described here: Building and Debugging the Go extension\nIt assumes you have node installed.\nOnce you are set up, you can follow how we have the \"notify user if a generated file is being edited\" feature. This is done in the notifyIfGeneratedFile function. You can rename it to say checksOnFileEdit and add the build tags check in it.\nGood luck! Let me know if you have any issues. You can also ping me on the gophers slack. Though this would be a good feature to have for your scenario, this need not be under the scope of the Go extension. The same feature can be useful for other languages as well. I would suggest to have an independent extension for this feature.. It's easy enough to add a \"Don't show again\" option to the prompt which should help your case.\nPRs are welcome. I can help if anyone wants to take this up. This issue was moved to Microsoft/vscode#43271. Just released an update (0.6.74) that has the fix for this. @btm6084 Looks like the extension is not getting activated. Can you share the errors from the console? You can open the console by Help -> Toggle Developer Tools -> Console\n. Chances are that the original update resulted in a bad state.. @ahelal Do you see any callstack for the error?\nTry uninstalling the extension and installing it back. I can see this happening when opening a stand alone go file, but not when opening a folder. \n@slimsag @keegancsmith Looks like the language server fails when there is no folder open\n. We could start with just current directory and log the fact that we are doing so since going beyond is expensive.. This issue was moved to sourcegraph/go-langserver#286. Sorry about that, fixed the issue with the tests.\nAlso updated to use the first line of the selection as a best guess when selection spans multiple lines. . Will just wait for the tests to complete and then merge\nThanks!. Released an update (0.6.75) with the fix.\nThanks for reporting!. Thanks for the investigation on this issue @malashin!\nTurns out I've been using the PATH in a few other places, need to fix them as well. So\nclosing this PR in favor of https://github.com/Microsoft/vscode-go/commit/ef7b65f8e6b93b409357a21ddb117fa3e59243a1 . Sorry for the trouble\nPushed a fix, try the latest update (0.6.76)\nCan either of you run process.env['PATH']  and process.env['Path']in the console and let me know if it returns null or undefined for either or both?. Tracked in #1510\nI have pushed a fix and released an update. Please try 0.6.76. Thanks!. We use gocode to provide intellisense. Looks like it fails to give results in the case you mentioned. Run gocode in debug mode to confirm that it indeed fails to return results and then log the issue in the repo for gocode at https://github.com/nsf/gocode\nIn a terminal, run the below\n- gocode close (This will close the current running gocode daemon)\n- gocode -s -debug (This will run the gocode server in debug mode, so that it spits out a lot of logs)\n-  In VS Code, repro the issue. For every request made the server will keep displaying the results in the terminal\n. Is only the Go: Install/Update Tools command not working and other features of the extension working fine? For eg: Go to definition, intellisense, building, linting etc. Try the command Go: Current GOPATH\nAny errors in the console? Help -> Toggle Developer Tools -> Console. @alexellis Any errors from the console?. @AaronReboot Please share the errors from the console when you get these messages. Help -> Toggle Developer Tools -> Console\nChances are the extension is not getting activated. Can you uninstall the extension and install it again?. @AaronReboot Installed extensions are stored in a separate location than the VS Code itself. This lets you update/re-install VS Code and still have the extensions you previously had installed. That's why re-installing VS Code almost never helps with issues related to extensions\n@ttjiaa In your case, the extension seems to have ended up in a bad state with missing files. Delete the folder ~/.vscode/extensions/lukehoban.go-0.6.76 and re-install the extension. Did you by any chance recently install the extension from a vsix file?\n. @ttjiaa And you have never installed the Go extension using a vsix?. @zh-h Why is this closed?. When editor.quickSuggestions.comments is set to true, we will only get word based suggestions and snippets because gocode doesnt return anything when the current position is inside a comment\n. Code folding in VS Code is done based on indentation and spaces. It does not depend on any language or language syntax.\nAll contiguous lines that have the same number of spaces or tabs in the starting of the lines can be collapsed together\nhttps://github.com/Microsoft/vscode/issues/3422 is tracking the work on making folding language aware. Looks good, thanks @kwiesmueller!. This is now out in the latest update to the Go extension (0.6.77)\nThanks @kwiesmueller!. Thanks!. gotests is already integrated. The commands Go: Generate Unit Tests... use it. \nFor fillstruct we have a PR open #1506. Thanks for the follow up @torre76 . This is being tracked in #263\nPlease add your comments there.. Showing all the 4 below by default would get noisy\n- run package tests\n- run file tests\n- run package benchmarks\n- run file benchmarks\nSo I propose the below\n- Allow the go.enableCodeLens to take another property runbenchmarks with default value false\n- Show the run package benchmarks and run file benchmarks only if the above is true and if there are benchmarks present in current file \n\nAlso not show \"run file tests\" (if current _test.go does not contain Test functions.\n\nSure we can do this, but is this a common scenario that a _test.go file which is essentially a test file will not have any tests?\nPRs are welcome. This should now be available in the latest update to this extension (0.6.90). Thanks to @biancarosa!. Thanks @uudashr!\nSorry couldn't help you sooner, I was out all day.\nI'll look at releasing an update tomorrow. @ljubomirb Just curious... How do you know that @hbkmadness is using 1.10?\n@hbkmadness Ensure you have the latest gocode by running go get -u github.com/nsf/gocode and try again. If it still gives you problems, then please log an issue at https://github.com/nsf/gocode. @hbkmadness Does intellisense work otherwise? For example when using local variables or std library? \nFor external packages, gocode works only if the packages are available under $GOPATH/pkgs i.e it doesn't work with source files. So one thing you can try is running the below which will install the packages to $GOPATH/pkgs\ngo install github.com/hyperledger/fabric/core/chaincode/shim\ngo install github.com/hyperledger/fabric/protos/peer\n@ljubomirb If you see a similar call stack as discussed in #1527, then see https://github.com/Microsoft/vscode-go/issues/1527#issuecomment-367036064. Thanks @hbkmadness \nHappy Coding!. The request for terminal to use the same GOPATH as rest of the features of the Go extension is being tracked in #1578.\n@merry-mongoose Can you explain a bit more on why having the setting \"go.gopath\": \"the-global-gopath:${workspaceRoot}\" doesnt work for you?. There are 2 separate problems here:\n- When using go.inferGopath, the global gopath gets ignored by the plugin which I want to address in this issue\n- The integrated terminal doesn't have any knowledge of the gopath determined by the plugin which is addressed in #1578\nFor the first one, I agree we should add the global gopath to the inferred gopath. The one thing I am not sold on is whether we should prepend the global gopath to the inferred gopath or append it.\nI lean on appending it, to keep the experience for folks who have been working with the inferred gopath consistent.\nNote: If go.inferGopath is disabled and go.gopath is set, then the global gopath will not be added to anything.\nThoughts?\n. This feature (including global gopath when go.inferGopath is enabled) is now out in the latest update to the Go extension (0.6.81). Thats good to know! PRs are welcome. The code to change would be in this file: https://github.com/Microsoft/vscode-go/blob/0.6.76/src/goVet.ts. This feature is now available in the latest update (0.6.78) to the Go extension. @ripbandit Any errors in the console? Help -> Toggle Developer Tools -> Console.\n@kharism Try uninstalling the extension and installing it back. @ljubomirb The stack trace that @kharism shared is about the missing module application insights. Its not related Go 1.10\n@kharism @ripbandit Somehow the extension is stuck in a bad state with missing modules. Can you uninstall the extension -> reload -> install it again?. @ripbandit Delete the lukehoban.go-0.6.76 folder under C:\\Users\\ripba\\.vscode\\extensions and try again. You are now the expert in this area @lggomez :) I'll follow your lead\n. cc @roblourens who might have some ideas here.. Thanks for reporting @alimac \n@uudashr's fix in https://github.com/Microsoft/vscode-go/pull/1523 should have fixed this.\nPlease check again after updating to the latest version of this extension (0.6.77). Integrating rest of the features of guru is being tracked in #8. I dont have the expertise to work on this, but I can help anyone who wants to give it a shot.\n@nicpottier, @illegalnumbers The Go extension does not maintain any maps of dependencies. It uses go build to get the compile time errors if any and then uses regular expressions to extract the filename, line and column numbers from the error message to create the errors that you see in the editor. See https://github.com/Microsoft/vscode-go/blob/0.6.80/src/goBuild.ts#L51. @nicpottier \nFor code navigation we use tools like godef and gogetdoc. The extension itself doesnt do any package resolution.\nThe only place the extension explicitly deals with vendors is to provide the Go: Add Import feature which lists all the packages available for import for the current file. Say there is a vendor package at  github.com/me/myproject/vendor/github.com/you/yourproject folder. In a file github.com/me/myproject/main.go, this package will appear as github.com/you/yourproject when the Go: Add Import feature is invoked. Will this be affected by vgo?. @zmb3 Nice to see you too :)\ncc @uudashr whose version of gopkgs tool is what we use for the Go: Add Imports feature.. @RichyHBM Not that I know of.\nLooks like as long as the tools used by the Go plugin supports vgo, there shouldn't be a problem.\n. @RichyHBM Yes, definitely.\nIf anyone can make a such a list, that would be greatly appreciated.\nFor a list of tools that this extension depends on, see https://github.com/Microsoft/vscode-go/wiki/Go-tools-that-the-Go-extension-depends-on. > Maybe a good first step would be to allow specifying a custom Go binary to use (that way you could point it at the vgo binary)\n@RichyHBM  You can use the go.alternateTools setting to map the go binary to vgo. @douglarek A single statement like that doesnt help much. Please provide error details and related settings. @douglarek Do you see any errors when running those commands? Or do they silently fail?\nYou can also see Help -> Toggle Developer Tools -> Console to see if there are any errors there.\n. Is anybody on this issue coming to Gophercon next week?\nIf so, then the community day would be a good opportunity to meet up, find the gaps in the Go extension to support vgo and modules and hack on having solving any blocking issues.\nI don't use vgo myself, so if someone here is willing to team up with me, then I am sure we can have some great support by end of this week.\n . Folks who want to try @ikgo's solution for auto-completions, please follow the below\n\nRun gocode close. Kill any running process for gocode\nDelete any gocode binary that you may have\nRun go get github.com/ikgo/gocode. . @ikgo Can you send a PR to https://github.com/uudashr/gopkgs? Its much easier for end users if they dont have to use different forks of the same package.\n\ncc @uudashr. @dmigwi See #1919\n\nIt appears that ikgo's changes have been merged into uudashr's repository... is uudashr's repository now going to be the accepted fork to support go modules in vscode\n\n@MFoster Which repo are you referring to? The last commit to https://github.com/uudashr/gopkgs was in June. . Folks, I have an update. \nhttps://github.com/golang/go/issues/24661 is the issue used by the Go tools team to track the update of Go modules support in various Go tools.\nWhile that is in progress, the currently available beta version of this extension has fixes for the below features when using Go modules\n- Go: Add Import & Go: Browse Packages commands that will show the appropriate packages from the current module instead of GOPATH\n- Auto-completion of unimported packages when go.autocompleteUnimportedPackages is set to true\nFeatures that were not affected when using modules in the first place:\n- Build : The build on save features as well as the Go: Build ... commands\n- Test : Running tests via the Go: Test commands as well as the \"run tests\" codelens. \n- Generating of tests using the Go: Generate ... commands\n- File Outline: Either via the Outline view in the explorer or using the command Cmd+Shift+O or Ctrl+Shift+O\n- Go: Add tags to struct fields & Go: Remove tags from struct fields commands\n- Code snippets\n- Debugging\nFeatures that are broken, but we are in the process of fixing:\n- Auto-completion\n- Code coverage\n- Go to definition\nPlease do try the beta versions and share any feedback/bugs you have.\n. Another update:\n\nSupport for the Go to definition, symbol info on hover and Signature Help features are now available if you are using the gogetdoc tool. \nThere is a new beta version of this extension. \nInstall the new beta version => add the setting \"go.docsTool\": \"gogetdoc\" => run the command Go: Install/Update tools => choose gogetdoc and gopkgs => Press Ok to update. Both these tools support Go modules.\nI've added a new wiki for Go modules support in Visual Studio Code that will have the status of the modules support work as well.\n\n. @marwan-at-work The beta version hasn't changed anything in the auto-completion of symbols themselves, only auto-completion of unimported packages. So your issue must be due to something else.\n@asw101 Yes, we do intend to use  @stamblerre's fork of gocode. But since that is still work in progress, we intend to ship it in such a way that the fork is used only when you use Go modules, otherwise it falls back to the mdempsky's fork. Also, the results from it are not consistent. Once it is consistent, I'll ship the support for the same. @dreamheld Can you log a new issue for that please?. @bjm88 Open the output panel and select \"Go\" from the drop down on the top right. You can see the build, lint, and vet calls being made. Copy the build call and run it in the terminal. If you see the same errors in the terminal, then it is not related to the Go extension to VS Code, but is related to Go and your code setup.\n\n. Thanks for letting us know about that @treeder!\nI've pushed a change to not use the -i flag when using Go modules.\nThe next update will have that change. Using _ as the prefix for file paths in the output of a go command is the standard way, go tells you that the file is outside of the GOPATH.\nCan you add the below in your settings, reload VS Code and try again?\n\"go.toolsEnvVars\": {\n        \"GO111MODULE\": \"on\"\n    }. Another update:\nThe Go tools team have forks of the godef and gocode tools that work with Go modules. These 2 tools drive the Go to definition and auto-completion features respectively. The latest beta version of this extension has support for both.\nPlease install this beta version, follow through the prompts to install/update the tools and let us know how the Go to definition and auto-completion features are working out for you.\nThe sooner I get some feedback here, the sooner I can release an update with these changes :)\n. @dreamheld I'll respond to the issue you created for the same yesterday https://github.com/Microsoft/vscode-go/issues/1942 and we can take it from there.\n. All,\nNow that we have some progress on the features when using Go modules, I am closing this issue and locking the conversation. This is because this issue is already way too long for any new-comer to make any sense of. \nHere are some tips to continue this conversation:\n\nKeep an eye on the Go module support in VS Code wiki which will be up to date on the status.\nIf you find bugs, first search existing issues with label \"go-modules\". If you dont find any that relate to your current problem, log a new issue\nIf you want to check back in periodically, look at the wiki as well as the issues labelled \"go-modules\". That should give you the gist of the situation much better than reading through all the comments in this issue.\nTry the beta version that will always have the latest fixes from the master branch\n\nThank you for understanding.\n. We are tracking this upstream in the VS Code repo.\nThere has been fixes made to the upcoming version of VS Code.\nSo the next time you update VS Code, you shouldn't be seeing this issue. So instead of \ngo test -args -dbcnn postgres://foo:bar@baz/abc -timeout 30s ***/server/db -run ^TestReports$\nwe should actually be running\ngo test -timeout 30s ***/server/db -run ^TestReports$ -args -dbcnn postgres://foo:bar@baz/abc ?\nIf so, then we don't really need a new setting. We can look for -args in the testFlags and append it and everything that comes after it in the end isn't it?\nPRs are always welcome. The place to make the change is https://github.com/Microsoft/vscode-go/blob/0.6.77/src/testUtils.ts#L127. @rschmied See Building and Debugging the extension to get the local set up and to debug the extension.\nAlso, wait a few days till October starts to send your PR to win a t-shirt! For more details, see https://open.microsoft.com/2018/09/18/hacktoberfest-2018-microsoft/?WT.mc_id=hacktoberfest-twitter-beverst. The fix for this issue is now out in the latest update to the Go extension (0.6.92). Thanks @rschmied!. Refactoring this project for tests has been one thing that I wanted to do for a long time. Having tests that do not rely on the extension host spinning up a new window will definitely help. I am not sure how to go about that at the moment, but I'll give that a try soon. This fix is now available in the latest update (0.6.78) to the Go extension. I have made the required changes and tested with the above code. Can you help with testing on more real world scenarios? All you need to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\n. Thanks for confirming.\nClosing this issue now.\nWill be releasing an update next week. This feature is now available in the latest update (0.6.78) to the Go extension. Thanks!. @lggomez This feature is now available in the latest update (0.6.78) to the Go extension. Thanks for the PR!. > I can add this info to the wiki if it is ok with you\nSure, Feel free to update the wiki.. Does this happen only on large projects? Can you try on a simple single file package?. @lggomez The Go extension spawns a single process that runs gometalinter. If there has been another save, then the previous process is killed and a new process is spawned. See https://github.com/Microsoft/vscode-go/blob/0.6.77/src/util.ts#L570\nI am guessing gometalinter in turn spawns new processes to run the individual linters which are not getting killed, when the main process for the gometalinter is killed.\n. @Adirelle We've made some progress on handling the multiple process being spawned for lint and vet features which should help.\nPlease feel free to re-open this issue if you still see the problem. @lggomez  Yes, please log a separate issue for that.\nWe know that guru is slow. So cant do much there.\nBut if VS Code sends a cancellation token and we (the extension) dont cancel the process, then that is something we can look into. Any errors in the console? Help -> Toggle Developer Tools -> Console\nIf there are any errors there saying something line activation of Go extension failed or that some modules are missing in the Go extension, then uninstall the extension and re-install it.. @carney520 Please try uninstalling and installing the extension again. @ansencumt Did you recently upgrade VS Code? Are you on Windows?. @ansencumt And you recently upgraded VS Code? Just before upgrading VS Code, the Go extension was working fine?. This is an upstream issue with VS Code. See https://github.com/Microsoft/vscode/issues/43813. There  is a partial fix in place for the next update\nCurrent workaround has already been discussed i.e uninstall or manually delete the extension from the extensions folder and then re-install the extension.\nLet's see if the next update to VS Code reduces the number of such issues. I used your code. The result correctly points to the impl type\n\nIs all your code under GOPATH?. The fact that in your logs the file paths are preceded by _ tells me that this a GOPATH issue\nI can repro something similar if I open the GOPATH directly in VS Code.\nIn your case, GOPATH seems to be /home/rockmen1/playground/go/guru_test\nThe file seems to be in /home/rockmen1/playground/go/guru_test/src/test_implementation/ifce.go\nWhat is the folder that you have opened in VS Code? \nCan you open /home/rockmen1/playground/go/guru_test/src/test_implementation and try again?. @kron4eg This is not the same as #1536. This only occurs when GOPATH is directly opened in VS Code. The way we calculate scope gets messed up in this case.\n. Fixed. Need some help testing though. All you need to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\n. This fix is now available in the latest update (0.6.78) to the Go extension. The repo still exists: https://github.com/sqs/goreturns\nhttps://sourcegraph.com/sqs/goreturns is what 404s\ncc @sqs . We have been using then link https://sourcegraph.com/sqs/goreturns from the start. Let's wait till what @sqs has to say and then update the link if needed. Thanks @sqs for the explanation.\nPRs welcome to make the change in url in this repo. Sounds good. Thanks for the link @buyology!\n@alwindoss You can use the snippet @buyology shared above or create your own snippets using the link he shared. @alwindoss The snippet for the for range loop has the prefix forr and is contributed by this Go extension. Similarly, we have one for the if err != null with prefix iferr. Have you used it? It doesn't have a print statement inside the if block, but it has a simple return.\n\nIf you feel that we should have one specifically with the print statement inside, then feel free to re-open this issue and submit a PR. The change would go in this file: https://github.com/Microsoft/vscode-go/blob/master/snippets/go.json. You can use the prefix iferrf. Fair enough. Feel free to send a PR to remove that line. I wouldn't make it optional though. Let's make the change and see if there is user feedback to go back to the old model of not wanting to see the comments\nBy default we use a combination of godef+godoc tools to get the information that is shown on hover. Users can change this by either setting go.docsTool to gogetdoc or by setting go.languageServer to true\ngodef does not return the lines that have only comments. So even if you make change removing https://github.com/Microsoft/vscode-go/blob/master/src/goExtraInfo.ts#L32, there won't be any difference. But, if you choose to use gogetdoc, your change will result in the comments showing up on hover. If you choose to use the language server, it already shows the comments on hover. The comment filtering done in this extension is independent of the tool, so you can just remove it.\nThe language server doesnt need any changes, it already shows the line with comments\nMore on language server here: https://github.com/Microsoft/vscode-go#go-language-server-experimental. > TypeError: Path must be a string. Received undefined\nDo you have GOPATH set as an env var? The tests dont run if there is no GOPATH set as env var.\n\n(and is there an appropriate chat forum for such difficulties?)\n\nYou can either ask the question here or on gitter or on the vscode channel in Gophers Slack\n. This feature is now available in the latest update (0.6.78) to the Go extension. The right way to use the config is to set the lintFlag setting to [\"--config=${workspaceRoot}/.gometalinter.json\"]\nFrom gometalinter -h\n\nFlags:\n  -h, --help                   Show context-sensitive help.\n      --version                Show application version.\n      --config=CONFIG          Load JSON configuration from file.\n. showLog is used by the Go extension to start dlv with the --log flag\nWhen attaching to an already running dlv process, there is no way I know of to pipe the output of the dlv process to VS Code.\nYou do get to see the logs in the terminal where you ran the dlv attach command though\n\ncc @roblourens if I am missing something. Yes, the --log flag works the same way, thats why you will see the logs in the terminal from where you ran the dlv attach command.\nThe logs from dlv doesn't get sent via the port, it gets dumped to stdout. When VS Code starts dlv itself, it has access to the process in which dlv is running and so has access to the stdout. When you attach to an already running dlv instance, VS Code only knows which port to listen to. It doesn't have access to the dlv process itself and so no access to the stdout.\n. @joncalhoun Basic set up steps are described here: Building and Debugging the Go extension\nIt assumes you have node installed.\nOnce you are set up, add a breakpoint at https://github.com/Microsoft/vscode-go/blob/0.6.77/src/goSuggest.ts#L154\nFor your case above, you will see that the suggest variable would have\n\nSo when suggest.class == 'type' && suggest.type.startsWith('func(') (or do a regex check), you can build your snippet. \nCheckout https://github.com/Microsoft/vscode-go/blob/0.6.77/src/goSuggest.ts#L169-L186 to see how we build snippets for functions\nLet's re-use the settings useCodeSnippetsOnFunctionSuggest and add these snippets only if that setting is enabled.\nGood luck! Let me know if you have any issues. You can also ping me on the gophers slack\n. This feature is now out in the latest update to the Go extension (0.6.80). Thanks for the idea of looking at the Root. I was working on #1545 which is the same as this issue. I was about to add a check where we skip the scope if it starts with _. But checking for Root is a better idea.. Fixed. Need some help testing though. All you need to do is\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\n. This fix is now available in the latest update (0.6.78) to the Go extension. I agree that its about time we did this. . @lggomez Regarding your questions\n\nLoadConfig: Instead of having the 5 properties in the LoadConfig as 5 different settings, let's have it as a single complex setting\nv1 Backward compatibility: I think we can safely assume that most users have the newer version of delve that supports v2 of the apis. My one concern is for users doing remote debugging. When they start a debug session, we should have a way to identify that the headless dlv being connected to is using v1 and then notify the user to run v2 instead\n. @lggomez I've pushed a commit to make this backward compatible. Here is my intended plan\nFor a month, we will run with v1 as default, and get a few folks to start using v2 and provide feedback\nFor another month, we will run with v2 as default, with the provision to fall back to v1 for anybody who needs time to move on to v2\nSometime in July/August, we will stop supporting v1 \n\nAs I mentioned before, we would still need to take care of the scenario of remote debugging. Are you aware of any way the client can figure out what version of api is the headless server running on?. To use v2 apis add the below in your debug configuration:\n\"useApiV1\": false,\n            \"dlvLoadConfig\": {\n                \"followPointers\": true,\n                \"maxVariableRecurse\": 1,\n                \"maxStringLen\": 64,\n                \"maxArrayValues\": 64,\n                \"maxStructFields\": -1\n            }\nChange the 64 to the say 300 to see longer strings and arrays when debugging. This feature is now out in the latest update to the Go extension (0.6.81). @lggomez As I mentioned in https://github.com/Microsoft/vscode-go/pull/1647#issuecomment-389383053, the codelens for \"debug tests\" uses hard coded configuration from https://github.com/Microsoft/vscode-go/blob/0.6.82/src/goRunTestCodelens.ts and doesn't read from the launch.json file.\n@giulianob What is your specific use case for using the v2 apis? Do you intend to configure any of the settings from https://github.com/Microsoft/vscode-go/issues/1555#issuecomment-393366905? If yes, then feel free to log a feature request for the same.. > We can add an option that, if set to true, will bypass that default launch cfg and use the currently selected one forcing \nVS Code also lets you debug files with default config even when there is no launch.json file. To support that as well as the debug codelens, we will have to have a separate setting which mimics the dlvLoadConfig\n\nCan we use the configurationmanager from the native debugService to retrieve the launch cfg from the codelens provider?\n\nI don't see how that is possible though. The debug adapters from extensions are called by VS Code in a separate process that has no access to settings as far as I know. If you find anything different, do share.\nI was thinking of reading the settings in https://github.com/Microsoft/vscode-go/blob/master/src/goDebugConfiguration.ts. provideDebugConfigurations here is used when there are no debug configurations. resolveDebugConfiguration gets called for every debug session . I've logged #1735 to track the pending item from the above discussion. So when the test folder is directly under ~/Documents/go you see the red underlines but not when the same folder is directly under ~/Documents/go/src ?\nCan you click on the Output pane next to the Problems view and share  what you see in both cases?\nAlso run the command Go: Current GOPATH in both cases, and share the results. Glad that you got things working, Happy Coding!. @dmick This feature is now available in the latest update (0.6.78) to the Go extension. Thanks for the PR!. There is just one test failing and that too only on tip, that's unrelated to your PR, I'll take a look at it soon.\nPointer to existing test for completion that you can use as reference: https://github.com/Microsoft/vscode-go/blob/0.6.78/test/go.test.ts#L747\nYou can add another test file to https://github.com/Microsoft/vscode-go/tree/0.6.78/test/fixtures/completions for your case and test it\n. No worries, take your time.\nIf I get some time next week, then I'll add the test and merge the PR. Yup, I finally got around to adding some tests (See https://github.com/Microsoft/vscode-go/commit/8dd3f331bf4e0f4f6f58d1005132f91acf319bdd)\nI'll release an update early next week.. @joncalhoun I just realized that if the function has a return type, then the snippet doesnt reflect that.. Take the below code\n```\npackage main\ntype Demo func(int) string\nfunc main() {\nmycallback :=\n\ntakeDemo(mycallback)\n\n}\nfunc takeDemo(callback Demo) {\n    callback(1)\n}\n``\nNext tomycallback :=typeD` to get the completion. You will get\n```\nmycallback := Demo(func(arg1 int) {\n})\n\n```\nwhich wont compile as there is no return value in the func declaration\n. Fixed with https://github.com/Microsoft/vscode-go/commit/8bb08f6e7b4697f154da1f74539f4d421302db34\nThere is no need to roll back.\nA very small percentage of users have the setting to expand snippets and I doubt among them everyone will encounter this issue. Even if they do, the fix is easy, they just need to add the return type manually.\n. @Kegsay This fix is now available in the latest update (0.6.78) to the Go extension. Thanks for the PR!. The fix for this is now available in the latest update (0.6.78) to the Go extension. This is not Go specific. I see this happening on ts files as well. This issue was moved to Microsoft/vscode#45820. @1984weed  I dont see the --output option when running dlv -h on version \"1.0.0-rc.2\". Is this available only on a newer version?. You will need to add the output entry at https://github.com/Microsoft/vscode-go/blob/master/package.json#L319 as well, else you won't get a default or intellisense when editing the launch.json file. @1984weed Can you sign the CLA?. @1984weed This feature is now available in the latest update (0.6.78) to the Go extension. Thanks for the PR!. We don't really need a function for this. We can have the config as a variable without args inside the getCodeLensForFunctions function. Then, append the right args inside the promise creations to create the debugTestCmd and debugBenchmarkCmd.. @harkal This is now out in the latest update (0.6.78) to the Go extension. Thanks for the PR!. We would definitely not be overloading the existing Go to Symbol in Workspace command as it is meant for the current workspace. \nCan you elaborate on your scenario here? Do you search for a symbol that you know for sure is part of the std lib? When doing so, do you also know which package it belongs to? If so, then have you tried the Go: Browse Packages command?. Also, if you are looking at searching for all symbols in given package, https://github.com/Microsoft/vscode-go/issues/671 is tracking that feature request. > The main use case is for those times when I'm fairly sure of the naming of a symbol, but less certain of it's package location\nWould you know the package name at this point?. Doesnt this scenario also extend to when using symbols from non std lib?. Ok, in that case we can have setting which when enabled can include the results from the std lib when the Go to Symbol in Workspace command is run. We can run go-symbols twice once on the current workspace and the second time on the goroot and return the combined results.\nPRs are welcome.\n. Thanks to @m90, this feature is now available in the latest update to the Go extension (0.6.79)\nAdd \"gotoSymbol.includeGoroot\": true to your settings to include symbols from GOROOT in the workspace symbol search. @bukshee Can you share the below details?\n- Logs in the output pane. That will have the arguments passed to go build that resulted in the error in the Problems view\n- What is the folder that has been opened in VS Code? Is it /home/golang/work/json or /home/golang/golib/src/github.com/bukshee/json?. > The two are same dirs, see my linux prompt comment above.\nI understand that you have one of the dirs symlinked to the other. My question was which of the 2 is opened in VS Code (I know they are the undelying files are the same). For example, when you right-click on any of the file sin the File Explorer and select \"Copy Path\" and then paste it somewhere to view it, is the file path under /home/golang/work/json or /home/golang/golib/src/github.com/bukshee/json?\n\nThe output pane is empty\n\nWhen you open the output pane, select \"Go\" from the drop down that is on the top right corner of the output pane. You will see logs from go build command there.\n. @bukshee Thanks for the details and sorry for not getting back sooner\nThe output of go build is printed out in the output pane and then used to show errors in the Problems pane. Can you please share the logs printed in the output pane? Click on the \"Output\" tab next to the \"Problems\" tab and then select \"Go\" from the drop down that appears on the top right corner of the Output pane. Make a change in the file and save. You should see the results of go build in the output pane\nI set up symlinks just like you did and I am able to get the right links in the Problems pane. The arguments passed to go build in your case might shed more light on whats going on. @bukshee I was not referring to the output of go build when you manually run it on a terminal. I was referring to the output of the go build command run by the Go extension which gets printed to the Output pane as shown in the screenshot that @sandipb has shared above.\n@sandipb That's a good idea, we can definitely print the cwd, but printing all env var of the tool would be excessive. @sandipb Yes, that can easily be done as well. PRs are welcome. Pointer: https://github.com/Microsoft/vscode-go/blob/0.6.77/src/util.ts#L589. Try the Code Outline extension. You will get a panel in the explorer view that will show you all the symbols in the current file.. @shrijan00003 The Go extension adds language support to the Golang. Am guessing you assumed it had something to do with code navigation in general.. @mars79668 Do you still have this issue?\nDo you see this only when editing test files?\nIs there a sample code where you can consistently repro this?. This feature is now available in the latest update (0.6.78) to the Go extension.. @dhowden This feature is now available in the latest update (0.6.78) to the Go extension. Thanks for the PR!. This is due to upstream issues with VS Code itself. Trying to fix this in the Go extension is expensive and a fix from VS Code itself is preferable.\nSee https://github.com/Microsoft/vscode/issues/19014 and https://github.com/Microsoft/vscode/issues/12448. Are other features of the extension like Go to definition, build, lint etc working?\nAny errors in the console? Help -> Toggle Developer Tools -> Console. Completion should work for vendor packages as well.\nRun gocode -debug -s in a terminal and try for completions in VS Code.\nYou will see the output for each completion attempt in the terminal. \nThat should tell you if gocode is not able to return completions. @LaughingCabbage In your case, there is a problem in activating the extension itself. Please try uninstalling and then re-installing the extension.. @LaughingCabbage Delete the folder lukehoban.go-0.6.77 under C:\\Users\\Genti\\.vscode\\extensions and try again. @LaughingCabbage See upstream issue https://github.com/Microsoft/vscode/issues/43813. This shouldn't happen after updating to the latest VS Code. Thanks for getting back @yuwgle \nClosing this issue\n. @katakonst This feature is now available in the latest update (0.6.78) to the Go extension. Thanks for the PR!. Using the results of commands in the settings is something that can be only supported upstream.\nFor now, here in the Go extension, what we can do is this:\n- Add a setting go.useGopathInTerminal with default value as false\n- If this is true, then when the Go extension activates, it can calculate the go path using the existing command and add it in the terminal.integrated.env... setting.\n- If this is false, then prompt the user Use the GOPATH as inferred by the Go extension in all integrated terminals?. If they choose yes, then add the setting \"go.useGopathInTerminal\": true and do the needful\nThe reason why I wouldn't do this by default is because we don't want to update user settings that can change VS Code behavior without their consent.\nPRs are welcome to add this feature and I can guide anyone who wants to give this a try.. @extrame Using terminal.integrated.env.osx to set GOPATH works as expected for me. Are you sure you don't have any extensions that might be doing the overriding? Try disabling all other extensions, reload VS Code and try again. @extrame How the terminal gets the environment variables is not affected by this extension. I would suggest to log an issue in the main vscode repo i.e https://github.com/Microsoft/vscode/issues . This is a generic feature request and is language agnostic. Please log this issue in the main VS Code repo at https://github.com/Microsoft/vscode/issues. > So most probably this is known, and just not documented, or perhaps documented in a place where I have not spotted it.\nWas there no notification that popped up saying \"The Go language server is not supported in a multi root set up with different GOPATHs.\" ? I was hoping that would suffice to inform users of the multi-root issue with language servers. Feel free to send a PR updating the README\n\nOther Go tools seem to be using getToolsEnvVars() which includes the PATH setting needed to find the go executable.\n\nFeel free to submit a PR to use getToolsEnvVars() replacing the line that just sets the GOPATH before starting the language server.\n. btw, great job investigating the issue and the root cause!. The readme has been updated with https://github.com/Microsoft/vscode-go/commit/db1273d35939ff7b51b02035cb9379549b7c0dbc\nThe env vars from getToolsEnvVars() are passed to the language server with https://github.com/Microsoft/vscode-go/commit/819f10767cdd64db4f63a95dd529c75ad0eedd71\n. Thanks for the links @m90 \nI can confirm that the hover works as expected when choosing gogetdoc\n\nbut the IDE complains that the ', _' isn't necessary. .... Lang spec shows 'x, _ : range...' is a legitimate statement form\n\n@rracb Thats the linter talking\nClosing this as we have a workaround as well as an upstream issue\n. The errors in the console is coming from the goFormat file which means they are formatting errors. Formatting errors are not the source of the red squiggly lines that you see in the editor.\nCan you share the logs in the output pane for both cases? In the output pane choose \"Go\" in the dropdown that appears on the top right corner of the output pane. This is where the output of the go build process gets printed out and then later piped to the Problems view which gets translated to the red lines in the editor.\nNote: The build only gets triggered when you make an edit and save the file. The logs don't tell what is the cwd when the commands are run. If you don't mind, can you install the beta version of the Go extension that does output the cwd as well? All you have to do is\n- Download the latest vsix file\n- Run code --install-extension Go-latest.vsix\n- Reload VS Code and try again. In the second case, the file that is open is /home/jan/dev/core/REDACTED/REDACTED2/productbuilder/db.go and errors are being reported against /home/jan/dev/core/plz-out/go/src/common/go/db/db.go:13 and /home/jan/dev/core/REDACTED/REDACTED2/productbuilder/service.go. \nThere are no errors being reported against the file that was open so you dont see any red lines in it.\nDo these 3 errors appear in the \"Problems\" panel?. > They do show up in the problems panel. But why doesn't the one from db.go?\nWhich of the 3 errors dont show up in the problems panel? When you click on the errors in the Problems panel, the file should show up with red lines\n\nNote that it also doesn't pick up any errors of the type \"unused variable\", \"cannot use int as string\" etc\n\nAnd these dont appear in the output channel either correct? The Problems panel can only show errors that show up in the logs in the output channel. If they dont show up in the output channel, then copy the command being used from the logs and run it in a separate terminal (using the the same cwd) and see if you get expected errors there\n. And you ran that from /home/jan/dev/core/REDACTED/REDACTED2/productbuilder? . In https://github.com/Microsoft/vscode-go/issues/1582#issuecomment-375597384, you have run the linter which only gives warnings. Since you were expecting errors, can you run the go build command from the output pane?. Are you referring to the automatic imports that gets added on file save or the ones that get added when you auto-complete a symbol from an unimported package?\nIf its the former, then they are done during the formatting process using the goreturns tool (or goimports if you have updated the go.formatTool to use goimports).\nFormatting is run on save by default. If it takes longer than 750ms then the format on save is aborted. In the latest Insiders you can change this time using the editor.formatOnSaveTimeout setting.\nFor completions, we use gocode. Try getting completions from gocode from a terminal and compare the speeds to figure out if the problem is with the underlying tool or VS Code\n. No ideas looking at the logs. I would suggest debugging the Go extension directly. Its pretty straight-forward.\n- First clone this repo and run npm install\n- Then follow the steps in the debugger README\n- Add breakpoint at https://github.com/Microsoft/vscode-go/blob/0.6.77/src/debugAdapter/goDebug.ts#L577 where thread request is being made. Looks like everyone in this issue was able to get the problem resolved. Most of them by rebuilding the tools after updating to newer versions of Go.\nThanks to each of you for getting back here with your solutions.\nClosing this issue as there are nothing more to do here.\nHappy Coding!\n. > Why does my version includes the package name?\nWe try to deduce the import path to the package from the current GOPATH and then add it to enable running tests in symlinked directories. See https://github.com/Microsoft/vscode-go/blob/0.6.77/src/testUtils.ts#L150.\nThe difference between your and your co-worker's set up must be the GOPATH. Run Go: Current GOPATH to see the GOPATH being used.\n\nWhy does it affect logs?\n\nThat I don't know. You will have to ask this question in the repo for the go tool itself.\nHope this answers your question and sorry for the delay.\nHappy Coding!\n. I dont know how glide works, so cant help much there.\nHave you tried asking in the Gopher's slack channel for vscode?\nAlso, open the Output pane and select \"Go\" from the dropdown that appears in the top right corner of the Output pane. Here you can find logs of the go build command that runs on each file save. May be something there can help. Build is run on each file save and for the first file opened in each VS Code session.\nOpen the Output pane and select \"Go\" from the dropdown that appears in the top right corner of the Output pane. Here you can find logs of the go build command that runs on each file save. Are there any errors there?. @FiloSottile We usually dont need to do anything from our side. Did you click on the link \"sign now\" above and sign there?. :) There is no button/link here for me to manually do anything in this area, I'll check with a few folks and get back to you.\nhttps://github.com/Microsoft/vscode-go/pull/949 was a PR from another person from Google. I didnt have to manually check anything then\n@stamblerre Can you share what you had to do for the cla?\n. @FiloSottile Our internal team for Open Source has reached out to the Google legal team which now has agreed that Google employees should use the normal CLA approach. Can you recheck your internal guidance in this matter?. @njgraf512 I was just waiting @FiloSottile to get back on my comments. Feel free to jump aboard and address them if you got some time.. Thanks for the PR @urohit011 \nI have left a few comments, please do take a look. Thanks for reporting. Looks like we miss passing the build tags to when vetting, this should be an easy fix.\nPRs are welcome.\nPlace where go vet is called: https://github.com/Microsoft/vscode-go/blob/0.6.78/src/goVet.ts#L57\nReference to how build tags are passed to go build: https://github.com/Microsoft/vscode-go/blob/0.6.78/src/goBuild.ts#L71\n. Thanks to @novak, this bug is now fixed in the latest update to the Go extension (0.6.79). Glad you could find a work around.\nHappy Coding!\nClosing this issue. Yes, definitely. We should integrate the completion feature from the language server.\nPRs are welcome.\n. The changes for this are merged in and will be available in the next week.\nThe below settings are needed to get this feature\n\"go.useLanguageServer\": true,\n  \"go.languageServerExperimentalFeatures\": {\n    \"autoComplete\": true\n  }. This feature is now out in the latest update to the Go extension (0.6.81). I don't see the y in blue though. Which theme are you using?\n. Moved to https://github.com/atom/language-go/issues/149. @sandy081 Here is a case of extension update post VS Code update causing corrupted state as disucssed in https://github.com/Microsoft/vscode/issues/43813\n@shivas Can you provide the logs as described in https://github.com/Microsoft/vscode/issues/43813#issuecomment-366951225?. Thats ok @shivas, thanks for getting back. That would be a cool feature. There can be a command say Go: Apply Test Coverage from Custom Profile which opens an input box where you can provide the path to the coverprofile file.\nPRs are welcome.\nCode Pointers:\n\ngetCoverage() in goCover.ts takes path to coverage profile and applies the result on the editor.\nUse the Go: Generate Interface Stubs command as reference to create the new command. This makes use of  vscode.window.showInputBox to show the input box\n. I cannot repro, gogetdoc works just fine with this code sample.\n\nCan you update gogetdoc, just to ensure you have the latest version? \nAlso, can you share the arguments passed to the /usr/share/code/code --type=renderer in your screenshot?. Since things look good in the Insiders and that we will be releasing the next update to stable next week, I wouldnt prefer to spend much time here.\nFeel free to re-open this issue or create a new one if you see this in Insiders or in Stable (after the next release)\n. Sorry for getting to this a little late...\n@caibirdme\n\nYes, attach is not a valid mode to use. Can you also add \"trace\": \"verbose\" to your debug configuration and share the output. There we can see if the breakpoints were created successfully or not as well as more details\nAre you able to attach to your program using dlv but not in headless mode and then send requests to create breakpoints, followed by curl to actually hit the breakpoint?\n\n@AlexRouSg \n\nThe problem is that you are expecting attach to leave the program running after stopping debug while vscode-go is killing the program.\n\nNothing in @caibirdme's description talks about issues after stopping debug. Can you elaborate on this?. Ah! I missed that, thanks.\nWe can use #1609 to track halt vs detach when remote debugging.\n. @caibirdme When you use {\"request\":\"launch\"} to start remote debugging, are you using {\"mode\": \"remote\"} as well?. @quoctruong there is an open PR for this, I will definitely get to it this month.. No updates at the moment. We have targeted quite a few debug related features and bug fixes for the next update that I plan to release in a few days.\nThis issue is in track for the next set of debug related features and bug fixes that we will be targeting.\nSo, we should have an update in February.\nThanks for your patience!\ncc @jhendrixMSFT . @quoctruong, @iantalarico and @pongad  Please feel free to review the PR https://github.com/Microsoft/vscode-go/pull/2125 for this feature\n. This is due to some other extension that is also doing something on save.\nA few other users saw the same thing. See #1487\nTry disabling other extensions you have installed to see which of them is causing this.\n. You need to update the go.buildTags setting so that the Go extension will know which build tags to use when building your code. Add the below in your settings file:\n\"go.buildTags\": \"ignore\". What is the purpose of the ignore build tag here?\nYou want to ignore the current package and not build it?\n. Ok, in that case we shouldnt add \"ignore\" to the `go.buildTags\" setting.\nI am not sure how to move forward here.\nThe error \"can't load package: package ... build constraints exclude all Go files in ....\" is indeed correct, as you dont want the current file to be built. You are using the \"ignore\" build constraint to exclude the Go files in the current folder. Since there is no way to exclude files from being built by the Go extension, I am not sure how to proceed other than ignoring the error.\nDo you have any suggestions?. The April Iteration Plan for VS Code has an item for \"Problems view support to exclude errors for some files/folders\". Getting the ignore support from the core is better than the Go extension implementing its own. \nClosing this issue in favor of the upstream feature.. We use the Go tool guru to provide the \"Find all References\" feature.\nCan you try running guru referrers on a terminal in Windows vs linux and see if the results include references from GOPATH or not?. great, I'll close this issue as you have logged an upstream issue to track the same. I tried the test code and flags you provided, but I get the below error\nAm I missing something?\n\n. Can you update your solution in #1534 and close it as well?. Ah! sorry about that.\nI've pushed another commit that will test the symbol provider directly. The test still fails, I didnt have the time to debug it yet. Can you take a look?. rename is working as expected for me and I don't see the scope flag when running gorename -h. Can you provide more details? I am using Go 1.9.2 on a Mac. @bimargulies The link you have shared is for guru. Is there a similar link for gorename?. @gflarity I can't repro this. Can you share your settings?\n\n. @gflarity You only have 1 go related setting changed and I have the same and I still can't repro. Can you provide a complete code sample? Are you on Windows/linux/mac? Which version of Go, VS code and the Go extension are you using?. Thanks for the example! Looks like it only happens when there is a comment like that before the closing ). I have pushed a fix for the case when the comment exists before the closing )\nIf you see any other case, please create a new issue with the code sample. \nThanks!. This bug fix is now out in the latest update to the Go extension (0.6.79)\nThanks for reporting @gflarity!. @m90 Do you know the reason why completions are not supported by default by the language server? \nIs it because of the memory burden? The help for the -gocodecompletion flag has the comment enable completion (extra memory burden). \nIf this indeed is the case, then I'd prefer for users to opt-in to use the completions from the language server instead of us providing as a default.\ncc @keegancsmith and @slimsag for input on why completions are not supported by default by the language server.\n. I've logged a proposal for the language server to use the initialziationOptions instead of flags to drive features. See https://github.com/sourcegraph/go-langserver/issues/280\nLet's wait on what our friends at sourcegraph have to say there before moving forward here. @m90 Can you update this PR as per the below points?\n- Merge from master. There has been quite some changes there. \n- Use the InitializationOptions to enable the completion feature instead of the flags. See https://github.com/sourcegraph/go-langserver/issues/280\n- Include auto-complete as an experimental feature in the go.languageServerExperimentalFeatures setting such that users can disable this feature but still use the language server. This is helpful as completions for unimported packages and symbols from unimported packages are not yet supported by the language server\n. @m90 In that case, no worries. I can make the changes in your branch and create a vsix file. You can then install that vsix and help with testing?. @m90 I havent started :) so go ahead make the updates. Looks like this is a problem when the value of the env var is not a string. I have pushed a fix. Until I ship an update, you can try the below:\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\n. PS: you will have to be on VS Code 1.22 to get the fix. This bug fix is now out in the latest update to the Go extension (0.6.79)\nThanks for reporting @mattgen88!. @radu-matei We do a halt + restart in that case and do not kill any process explicitly. I dont know why we went with halt + restart instead of detach without killing, as that was before my time. \nSending a detach command needs halting as well, so we can look into halt + detach instead of halt + restart\nThoughts?. @radu-matei \n\nIf you have a long running process and start a dlv attach --headless session, then you point VS Code to that host and have a debug session, after you stop debugging from VS Code you would expect the remote process to continue running - but the extension actually sends a Halt request to the debug server.\nIt would be extremely helpful (for this and for other extensions using this Go debugger) to support gracefully detaching from remote processes without killing them.\n\nIn order to send a Detach request, we need to first send a Halt request. See this note on gracefully ending the debug session in delve\n@olegburov Your scenario is being tracked in https://github.com/Microsoft/vscode-go/issues/219. Please subscribe to that issue for further updates\n. Since we can't really send the detach request without halting the dlv process first, there is nothing much we can do for this issue. Therefore, I am closing it.\nWe will continue to work to on #1599 . dlv only allows breakpoint creation before the debug session starts, or when a breakpoint is hit or when the session is halted. The last scenario is being tracked in #978. The language client had to be updated. Try the below\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\nNote, this will only work from VS Code 1.22 onwards\n. Go to Implementation and Peek Implementation features are now powered by the language server (if enabled) in the latest update to the Go extension (0.6.79)\nDon't forget to update the language server to get this feature. Duplicate of #1595 \n@dawidp Please try the following\n- Delete the folder C:\\Users\\Dawid.vscode\\extensions\\lukehoban.go-0.6.78\n- Reload VS Code, install the Go extension. This is due to an upstream issue with VS Code.\nThe fix is available in the latest Insiders and will also be out in the stable build 1.22.2 which will be released in a few days.. This is due to an upstream issue with VS Code.\nThe fix is available in the latest Insiders and will also be out in the stable build 1.22.2 which will be released in a few days.\nCan you try the latest Insiders and let us know if you still see the issue there?. Use go.toolsEnvVars to set any environment variables you want the Go tools (that are used by this extension) to use.. This behavior occurs for all languages and is not specific to Go. \nThis issue was moved to Microsoft/vscode#48971. We stop parsing the lines when we find a func or const or type or var declaration. The regular expression used for this was missing to look for a space after these keywords and so mistook typedcorev1 for type declaration :)\nI have pushed a fix. Until I release an update, you can do the following to get the fix:\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code. Thanks :). This bug fix is now out in the latest update to the Go extension (0.6.79)\nThanks for reporting @gflarity!. Hello all,\nThere have been quite some changes to the debug adapter in the past month. The one that is of importance here is graceful detaching of delve at the end of the debugging session which should solve this issue.\nPlease feel free to re-open this or log a new bug if the latest version (0.6.86) has not solved this for you.\nThanks for your patience and Happy Coding!. This is tracked in #277. Thanks for reporting the issue @markeissler. I do recall some conversations around VS Code changing directories when being started as you described. I'll try to get more information and get back to you. Until then, can you share which OS you are working on?. @markeissler Without GVM, I cannot replicate this using your steps. I'll try installing gvm and get back here. I just got around to installing gvm!\nAnyway, glad to know things worked out.\nHappy Coding!. The case you have mentioned is for symbols for a package that has been dot imported.\nDuplicate of #496\n The godef tool does not support dot imports. See https://github.com/rogpeppe/godef/issues/19\nPlease follow the instructions in https://github.com/Microsoft/vscode-go/issues/496#issuecomment-261838636 to get the solution for this issue.\n. This is now out in the latest update to the Go extension (0.6.79)\nThanks @leaxoy! I honestly would never have found this inconsistency :). When running Go Test All Packages in Workspace, we run go test ./... with the workspace root as current working directory. The path of the file of the failing test in the output of go test ./...  is relative to the package path which isnt the current working directory.\nI dont see a good fix here other than to skip trying to complete the relative paths when testing the entire workspace.\nThoughts?\nPRs are welcome.\nThe place to make the fix is: https://github.com/Microsoft/vscode-go/blob/0.6.78/src/testUtils.ts#L118. In the terminal the relative paths do get linked, I am not so sure about the output channel though. This bug fix is now out in the latest update to the Go extension (0.6.80). cc @slimsag @keegancsmith. Thanks @uudashr! Sorry for the delay, work has been very busy. This change is now out in the latest update to the Go extension (0.6.79). @sudo-suhas The project you are opening is $HOME/dev/go/myprj or $HOME/dev/go/src/myprj ?\nWhere does the folder gorank fit into all this?\nAccording to the logs, looks like the folder opened in VS Code is $HOME/dev/go/src/gorank\nI have the same set up as yours i.e the path in go.toolsGopath is different from go.gopath and the language server works as expected for me.\nAre you using symlinks?. This issue was moved to Microsoft/vscode#50959. The only error I see is about imported package not being used\n\nWhat do you get when you run go build on the folder that has this file?. > Is this due to a weakness in the Go syntax checker, which seems to only give line number and start position? \nYes, all we have access to is the line and column number.\nThat's one step better than before Go 1.10 when we had access to only the line number :)\n. Closing this PR as there hasn't been any activity for 2 weeks.\n@H4xorPL feel free to re-open it if you have any additional changes. Both work fine for me.\nAny chance your GOROOT hasnt been set properly?\nIn the integrated terminal, run echo $GOROOT and see if it gives you the location where all your builtin packages are.. Where did you set the GOROOT?\nBefore you set the GOROOT, what did you see when you ran echo $GOROOT or go env GOROOT in the terminal in VS Code?. And where did you set the GOROOT?\nOutside or inside VS Code?. @conradoplg  I've pushed a fix to read GOROOT from go env if its not already set as env var. With this, you don't have to set it specifically. To get this fix before I release an update, you can\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\n@uudashr The Add Import gets the list of packages from when we run gopkgs. Any idea why it wouldn't fetch the built-in packages?. @jlucktay \n\nThat's a build error, can you share the complete error from the Output pane? View -> Output -> Select Go from the drop down on the top right corner of the Output pane.\nWhat do you get when you run go env GOROOT in the integrated terminal? Does that match with the hombrwe location?\nAre the built-in packages appearing in the list when you run the command Go: Add Import?. @jlucktay Can you follow the steps in https://github.com/Microsoft/vscode-go/issues/1636#issuecomment-386960076 and see if that fixes the issue of the built in packages not appearing when running the command Go: Add Import. Also, is your setup anyway similar to what @conradoplg describes in https://github.com/Microsoft/vscode-go/issues/1636#issuecomment-388037685?. This feature is now out in the latest update to the Go extension (0.6.79)\nAdd the setting \"go.coverOnSingleTest\": true to get code coverage when running individual tests either via the command or the code lens\n\nThanks @primalmotion!. Thanks!. I dont see how the Go extension can interfere with the vim extension. Have you customized any keybindings?\nThe command .. not found means that the extension could not be loaded correctly.\n@rebornix , any ideas?. > Only works if i change project files to the path /src\nCan you elaborate on this? \nRun Go: Current GOPATH. What do you get?. @antismap Is that your expected GOPATH? Can you run gorename from the terminal for the same symbol and see if it works without errors?. Sweet, I didnt know about this feature\nThanks @m90!. @Green7 @nebiros What is the path of the root folder that is opened in VS Code? Is it the folder where the files physically reside? Or is it the folder under the GOPATH?. @Green7 Can you open the parent of the symlinked folder and see what you get?. @Green7 \n- Can you paste the complete text from the output pane? Include the cwd as well as the text that says \"Finished running tool...\". We need to see if the cwd here matches the physical path or the symlink as well as the arguments passed to go build\n- hover on the tab for the editor for the current file when you see this issue. You will see the file path. Share that. Does this match with physical file path or the symlink?\n. That means the folder opened in VS Code is the place where the physical file is.\nCan you open your gopath/src folder and try again?\n. @weinand Following up on your comment in https://github.com/Microsoft/vscode/issues/48606#issuecomment-384265967\nAny error response sent by the debug adapter is shown as the modal popup. Same goes for errors from pre-launch tasks. How do you suggest debug adapters deal with compile errors?\nOther examples:\nDebugging a simple javascript file silently prints errors in the debug console.\nDebugging an extension with errors with pre-launch tasks set up results in the modal popup.\n\n. Well, I did give this a try, but the completion tests for all versions of Go started failing in travis.\nSee https://github.com/Microsoft/vscode-go/commits/new-gocode\nIf anyone can figure that out, then yes, we can move to github.com/mdempsky/gocode. Fixed with https://github.com/Microsoft/vscode-go/pull/1710 thanks to @m90\nThe fix is out in today's update to the Go extension (0.6.82). @murdho Reason for closing this? I was looking forward to the changes and merging this PR.\nIt definitely is helpful for folks running tests in a file that contains a lot of tests. No problem, take your time :)\n. @lggomez I will finally have some time next week to go over this, thanks for you patience. I have a Windows machine and I can take up the testing on it.. @lggomez https://github.com/Microsoft/vscode-go/pull/1647/commits/6dfbfecc9002405f1b0dfe393188eaa8c512ef91 should fix the issue you have described in https://github.com/Microsoft/vscode-go/pull/1647#issuecomment-388530295. I've tested simple program on Windows. Works great. Other scenarios we should test are\n- debugging tests\n- debugging tests using code lens\n- remote debugging. @lggomez I have tested in Windows and below are my findings\n\nDebugging tests using v1 and v2 via configs in launch.json works\nDebugging tests via codelens gets its configuration from code and doesnt read launch.json file. This makes me wonder if we should move the LoadConfig configuration to normal settings. \nRemote Debugging: Step in/out/over and creating breakpoints work. But the variables dont show any value in debug viewlet when using v2. Can you give this a try? I tested by running a headless dlv server in an external terminal and then creating config in the launch.json file to attach to it. @primalmotion Have you tried remote debugging?. - The program I am debugging: https://github.com/golang/example/blob/master/hello/hello.go\nHeadless server: dlv debug --headless --log --api-version=2 --listen=127.0.0.1:2345\nDebug config in the launch.json file: \n{\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true,\n            \"useApiV1\": false,\n            \"trace\": \"verbose\"\n        }\nResponse for the  \"ScopesRequest\" and \"VariablesRequest\". As you can see the variable s is empty. \n\nUpdate the remote to debug in the launch.json file and the you get the below. As you can see the variable s is not empty\n\n\n. Is that in a Go file? If yes, then the error is coming from running go build. What does the error say? Do you get the same when running go build . on the parent folder of this file?. \"Syntax highlighting\" is the term for just coloring the text in a file as per the language specifications. This is covered in #464\nIn your case, the problem are the syntax errors i.e the red squiggly lines under the text. Since you are using an .html file the html extension kicks in. Since it cannot understand the {{ }} syntax, it gives the error.\nFor those errors to go away, we need an extension that can understand both html and go. I believe that is covered in #228. What is the file type where you tried this?\nWhat is the language mode that is shown in the bottom right corner of the status bar?\nIf the answer to both is \"go\", then can you run goreturns on this file from the terminal and see if it gives the same output?. Can you provide a small code sample I can try this on?\nAlso, do you see the same after \n- adding the setting \"go.docsTool\": \"gogetdoc\"\n- reloading VS Code\n- Click Go to Definition, it may prompt you to install gogetdoc. Do so and try again.. When you run godef and/or gogetdoc from the terminal, can you get to the definition or do you seen any error?\n. Install the show-offset extension. You will get the offset for the location under your cursor in the status bar.\nThen run godef -f your-file-path -o offset-for-the-symbol-you-are-getting-definition-for. The Go extension relies on the Go tools to give definition location. If you find that the results of godef and gogetdoc are not as expected, please log an issue in the repository for those tools.\nYou can also give our experimental integration with the Go language server from Sourcegraph a try. Add \"go.useLanguageServer\": true to your settings. this will prompt you to install the language server and the reload VS Code. The language server powers the definition and symbol search.. Not at the moment.\nFor your specific case of interface and implementation, have you tried using the command Go to Implementation and Peek Implementation?. Go to Implementation uses guru implements command. If that doesnt give you expected results, please log an issue for the guru tool. I tried both Go to definition and Go to implementation on my Mac for the same Done symbol, and it works as expected.\nBelow I have opened the context package from the Go source.\nAnd the only thing in my settings related to Go is\n\"go.inferGopath\": true\n. Thanks!. This extension is the only extension for VS Code that provides Go language specific features. So I wouldnt recommend to uninstall it if you intend to do any Go related work in VS Code.\nComing to the issue of error in each file, hover on the error and it will give you details on what the error message exactly is. Maybe that will help in figuring out what the problem is.\nChances are you havent set up your GOPATH correctly.\nIf you are still annoyed by the errors and dont want to fix them, you can disable the error reporting by adding the below in your settings\n\"go.buildOnSave\": \"off\"\n. Are you hovering on the text in the editor or on the file name in the explorer?\nAre there any errors listed in the Problems view? Open View -> Problems. It is not possible that there would be red underlines in the text editor but nothing under the Problems view\nCan you share a screenshot where you see the red lines as well as the Problems view open?. Wow, I didnt realize I hit a nerve there. Though I'd very much like to get to the bottom of how this is happening, I realize your time is precious and you might want to just learn Go rather than fight with the editor. All the very best in your journey to learn Go. \nIn the future if you get back to using this plugin, we are here to help either via gitter or slack or issues in this repo.\nGood luck and Happy Coding!. @shreyu86 Have you tried the solution described in https://github.com/golang/lint/issues/186#issuecomment-336615954 if what you really want is a way to ignore such warnings?. Including that stub (just the member name not a TODO following it) in the auto-completion list when user types // above an exported member is a good feature addition. \nThis way we don't circumvent the linting warning, user still has to type text after the member name.\n1005 is the feature request that is tracking exactly the same thing.\nSo closing this in favor of that.. I have provided some pointers in https://github.com/Microsoft/vscode-go/issues/1005#issuecomment-387878292 if you want to get started with this. Did you set the environment variable in the integrated terminal inside VS Code? And then run go run main.go from the same terminal?\nAll extensions are run in a separate process and so when you set a new environment variable in the terminal, the extensions do not get the same.\nTry this:\n- set the environment variable in an external terminal\n- run code from the same terminal and then debug\nnow both the terminal, the extension process and all of VS Code will have the same environment variables. Good point, I've created a page in the wiki in this repo that covers it and other FAQs. Can you give an example?. Good point. Is this a very common occurrence only for functions with no parameters?\nPRs are welcome to fix this.\nThe place to add the fix would be https://github.com/Microsoft/vscode-go/blob/0.6.79/src/goSuggest.ts#L171. This bug fix is now out in the latest update to the Go extension (0.6.81). I believe you should be able to use goformat without any support from the Go extension if it works similar to the other tools we support.\n\nAdd \"go.formatTool\": \"goformat\" to your settings. (There will be a warning that it is not valid, but ignore that)\nInstall the goformat tool so that it is available in the $PATH\n\nThe extension should just pick it up and run it.\nLet me know if that doesnt work\n. That makes sense. PRs are welcome to this option to go.formatTool\nJust add an entry at https://github.com/Microsoft/vscode-go/blob/0.6.79/package.json#L507. That should fix the warning in the settings.\nAlso add an entry in https://github.com/Microsoft/vscode-go/blob/0.6.79/src/goInstallTools.ts#L20 which will ensure you get the right prompt when you have chosen goformat, but its not installed\n. Let's not have hidden defaults that way. Sometimes, a user might indeed want to pass no flags. Also, it wouldn't be right for the Go extension to have formatting opinions :). That's purely a personal decision.. I am sorry, I misunderstood.\nYes, translating the user's settings for editor.insertSpaces and editor.tabSize to corresponding flags for goformat makes sense.. This feature is now out in the latest update to the Go extension (0.6.80). > Coming from Vim, I am accustomed to using the keyboard for much of the navigation and interactions with the editor.\nYou can already see the function signature when you are typing inside the () of the function call.\nThe same can be invoked by Ctrl+Shift+Space or Cmd+Shift+Space when the cursor is inside the () of the function call. \n\nIs there still a benefit to see this in the status bar instead of inline in the editor?\n. That makes sense\nBasically what you want to see is shown on hover. But that doesn't help you as you would like to stick to the keyboard as much as possible and not move to the mouse if it can be avoided.\nWe have a command called Show Hover which has a keybinding assigned to it. That should help. To see the keybinding, F1 ->  Preferences: Open Keyboard Shortcuts and type show hover. You can use the keybinding there or change it to anything you like.\n\nAnother minor issue with in-editor function signature is that long signatures are truncated\n\nI believe long signatures get wrapped not truncated. Can you share an example?. Alright then, Happy Coding!. @uudashr When I tried to test, gopkgs fails with cannot Stat: stat <mygopath>/src/github.com/prometheus/procfs/fixtures/26231/usr/bin/vim: no such file or directory. Re-installing gopkgs fails with \"unexpected directory layout\" for the godirwalk. Had to delete the gopkgs folder and then install from scratch\nAnd now I see  cannot Stat: stat <mygopath>/src/github.com/prometheus/procfs/fixtures/26231/ns/mnt:[...] no such file or directory\n. Second update worked. I'll run some tests tomorrow and get back here.. @uudashr That's because linting was failing on master which I just fixed. Sorry about that. @uudashr The problem in Windows needed your fix as well as https://github.com/Microsoft/vscode-go/pull/1658/commits/0055c20a80922c1261bf64398a1c1fbea6395240.\nI made one more commit to print the error message from gopkgs to the console. This should help in troubleshooting as I ran into gopkgs failure myself a few times as discussed in this PR.\nI also added a retry logic for when the \"unexpected directory layout\" error is encountered.\nThe unit tests are passing on my Windows machine.\n. I've updated https://github.com/Microsoft/vscode-go/issues/1490 with the means to try out these changes. Nice catch.\nPRs are welcome.\nThe fix would go in the place where we have a check to avoid calling suggestions when the complete line is a comment. https://github.com/Microsoft/vscode-go/blob/0.6.79/src/goSuggest.ts#L55. This bug fix is now out in the latest update to the Go extension (0.6.80). @roblourens Can you answer the above questions?. @lggomez \n\nDo breakpoint editions also trigger a setBreakPointsRequest?\n\nWhat kind of edits are we talking about here?\n\nCan setBreakPointsRequest calls be concurrent? I think we can use a breakpoint cache to compare the breakpoints state from the last setBreakPointsRequest call, and then process the modified breakpoints only\n\nAre you asking about this because if the calls were indeed concurrent, then the cache wouldnt work?. Thanks for reporting!\nThis is being tracked in #1662. @OneOfOne How is #1667 which is a formatting issue related to the language server or this current issue?\nI cannot repro this in the older version of the Go extension either. Also I noticed that the errors are appearing in the \"Output\" pane not \"Problems\" pane, so I've deleted my earlier comment. Will look into this more and get back soon\n. In the latest update to the Go extension, we updated the version of vscode-languageclient we use from 2.5.0 to 4.1.3 which somehow causes this issue. This is why, this issue is not repro-able in the older version of the Go extension\n@dbaeumer Between versions 3.0.1-alpha.14 and 3.0.2-beta.1, some change was introduced in the language client that for every error coming from the language server, the output panel comes into view even after repeated hiding. Do you recall any feature request or bug fix that might have caused this? Can this be fixed from the language client's side or is there something that we need to do from the language server's side to fix this?\nOthers,\nUntil we figure out a fix for this, you can disable the language server by setting go.useLanguageServer to false. Thanks @dbaeumer, I've added the revealOutputChannelOn option.\nOthers, To get this fix before I release an update sometime later this week, you can\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\n. This bug is now fixed in the latest update to the Go extension (0.6.80). This issue was moved to Microsoft/vscode#49411. In the latest update to the Go extension (0.6.80), the rename errors will now show up in the output pane.. Fixed with #1665\nThanks for reporting and providing the fix @tanguylebarzic !. Are you referring to just format on save feature? Or you are having issues with manual formatting as well?\nYou seem to have format on type/save/paste: all the 3 enabled. Go formatters are slower in general. I would suggest to disable the format on type and paste for Go atleast\n\"[go]\": {\n    \"editor.formatOnType\": false,\n    \"editor.formatOnPaste\": false,\n}\n. Even after disabling format on type and paste?\nAny errors in the console? Help -> Toggle Developer Tools -> Console?\nIs this a recent thing you noticed after an update to either VS Code or the Go extension itself?\n. I am running out of ideas ...\nOne last thought is to add the setting \"go.useDiffForFormatting\": false and see if that helps.\nIf that doesnt help, can you try running the extension from source and see where its failing?\nI recall you had sent a PR once to fix an issue around formatting itself, so debugging the extension shouldnt be too hard :)\n. @OneOfOne I'll close this issue nevertheless. If you see this happening again, you can re-open this issue. In case the issue is locked (which it does in 10 days or so), feel free to open a new issue. So you are seeing this even after using the fix from #1662 correct?. I randomly come across this as well, but no reliable repro steps.\nOne thing I've noticed is that there is a formatting error from the language server.\nLooks like the language server now supports formatting and requests going there sometimes fail.\nCan you keep the Output pane open, choose the \"go-langserver\" channel there and the next time you see formatting stop, check if the output pane has any formatting related error. That looks similar to what I logged in https://github.com/sourcegraph/go-langserver/issues/277. @OneOfOne I've added a setting to opt in to the not yet stable features from the language server. Try the below and your formatting issues should be solved even when go.useLanguageServer is true\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\nAnd when you want to try the formatting feature from the language server, add the below setting\n\"go.languageServerExperimentalFeatures\": {\n      \"format\": true\n    }. @OneOfOne's issue here was due to the language server which has been addressed in https://github.com/Microsoft/vscode-go/issues/1667\n@SuburbanFilth Have you been using the language server as well?\n@FiloSottile Thanks for the detailed investigation. I haven't had time to look into why the piping is so slow. We will definitely get back to this, this month.. #1766 will definitely help for VS Code 1.25 and above as the outline view in the explorer now opens up by default. Not sure if  it helps #1668 when the outline view in the explorer is disabled.. @atombender Is this after opting in for the modules feature? What formating tool are you using?. @atombender Let's use #1532 to track issues that show up when using modules. @FiloSottile Since you haven't seen any issues here in the past month, I'll close this issue.. By default, we use the godef tool to provide the definition of the symbol and then use godoc to get the information from the location. godef doesn't provide any location for the builtin symbols like append\nOn the other hand, you can use gogetdoc instead by adding the setting \"go.docsTool\": \"gogetdoc\". This will give you the hover information, but running a Go to definition command on append would still not give you the definition.\nThe reasons are covered in https://github.com/Microsoft/vscode-go/issues/674. @doxxx This fix only helps the case of single line strings inside backticks.\nThe issue #1231 is mainly for multi-line strings inside backticks.\n. Exactly :)\n. Thanks!. How are you specifying them in settings?. @ghuser404, @bGN4 \nI believe this got fixed in master with https://github.com/Microsoft/vscode-go/pull/1665\nCan you try the below?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. This bug fix is now out in the latest update to the Go extension (0.6.80). @0x5010 In your case, it doesnt say \"cmd/go: unsupported GOOS/GOARCH pair undefined/undefined\"\n\nIt says js/wasm instead which doesnt look like valid values for GOOS/GOARCH . Also, there have been conflicting changes in master. So first, merge from the master branch.. Thanks for all the work @shreyu86!\nI've made 2 small changes, take a look if you want to :). @mattetti \nFor starters wrt to refactoring, I was looking at exposing the generic \"Refactor\" option in the context menu which could then be used for things that we already support like filling structs, interface stubs etc.\nTo add new features like extracting variables/constants/functions, we need to implement them first.\nI can revive the old PR that use godoctor for the extract feature. I could use help in testing it. Last time we took a shot at it, it didn't work for a lot of common cases\n@lggomez You seem to be on fire :) I didn't realize the conditional breakpoint feature was so straightforward to implement.\nI don't have the list of updates on the debug adapter on hand. I was planning to just go over the \"Extension Authoring\" section of the release notes for every month in the past year and see which ones can be applied to Go. . - Can you consistently reproduce this issue?\n- Do you see the issue when language server is disabled?\n- Do you see any error related to formatting in the go-langserver output?. - Can you consistently reproduce this issue?\n- Do you see the issue when language server is disabled?\n- Do you see any error related to formatting in the go-langserver output?. > I have been using go language server for a long time, this error is only occurred after upgrading VSCode to 1.23, maybe is the new version break something.\nIn the recent versions, the Go language server provides formatting abilities which can change file contents. This might be the reason why you didnt see this before. \n\nThe go.lintTool is golint-free, maybe it's not related.\n\nYes, thats not related\nThe error on gopkgs is unrelated too.\nI have disabled the format feature coming from language server in the master branch. Can you follow the below to get that change and then see if you still have the issue?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\n. @faceair By \"latest version\", do you mean the version after following the steps in https://github.com/Microsoft/vscode-go/issues/1677#issuecomment-389388519?. Great, thanks for verifying and Happy Coding!. Lets just check it in. Thats what we do for all of our other repos. Thanks for logging this @NobbZ and for all the details.\nLet's keep this open for a while to see if anyone using gb can chime in. Also, am curious. If no one can import such packages, how do they get used?. Nice catch!\nWe use commas to determine how many of the parameters are already typed in. Looks like we end up counting commas even when they are inside a string.\nPRs are welcome to fix this bug.\nThe fix should go here: https://github.com/Microsoft/vscode-go/blob/0.6.80/src/goSignature.ts#L92\nTo get started, see https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code. The latest beta version (0.9.3-beta.2) of this extension has the fix for this issue. What version of Go are you using?\nI wonder if this is a change in the way the coverage file is created in the latest version of Go.\nI am using Go 1.9.2 on my Mac. I have tests for code that gets run multiple times too. But the the last number is always 1.. Thanks for the links! I'll make the necessary changes which should be out in the next update which should be in the next few days.. > I don't have time at the moment to figure out how to build and test a modification to turn this into a PR but hopefully this is enough that someone internal can easily take it on.\nUnfortunately the test coverage feature doesnt have much test coverage itself :(\nSo, you can just send a PR online on Github for the one line change if you are up for it.\nI would prefer if you get the credit for this fix as you found the issue, root cause and the fix it self :)\n. This bug fix is now out in the latest update to the Go extension (0.6.81). I followed the steps above and was able to save the file without any issues.\nAre you sure that the imported package and your sample code are under the same GOPATH?\nAdd the setting \"go.formatTool\": \"gofmt\" and try again. The gofmt tool will not remove unused imports. When doing so, do you get any build errors?. Please provide more details on what support are you requesting along with details like what govendor is and how it can benefit this extension. . Thanks for the details @chuacw \nI'll have to say this is out of scope for this Go extension which does only the very basic in the area of package management. It lets you\n\nImport package when auto-completing a symbol from unimported package\nRemove unused packages, add missing packages, order packages all of which comes via the use of either goreturns or goimports as the formatting tool.\nBrowse packages\nImport a package\n\nWe dont intend to go beyond this and handle package/version management in general as we neither have the expertise for it nor do we feel this is the right place for it.\nYou are more than welcome to create a separate extension that can help with package/version management. I can point you to the resources to getting started and help if you find any issues along the way. \n. Great! Extending VS Code is a good place to start.. golint is the linter that is run on each file save. On larger code bases, we recommend turning off the on save features and instead run them on demand using the commands from the command pallet\ngod\u00e9f is run to provide the information you see when you hover on code.\ngocode is used to provide auto-completions.\nThe Go extension spawns a new process to run each of these tools everytime a completion/hover/lint request is fired. \nI believe one improvement we can do is to add a timeout to features that are time sensitive. The information shown on hover, code completion are good examples of such features.\nBy the way, when you say \"Open go project workspace\", do you mean the source code for Go? I want to try and repro this myself.\n. If your GOPATH itself is very large, then that might explain the issues with certain Go tools as they try to work with the entire GOPATH.\nCan you try a small/medium size Go program in a separate GOPATH which is considerably smaller and see if you still see the same?\nTip: Set go.inferGopath to true so that you dont have to set GOPATH specifically in the 2 separate projects. @jblachly Any updates?. That's some new information!!\nI don't know why the first 2 processes (gocode set) should still be lingering around. The 3rd one is for the gocode daemon which runs in server mode in the background and this one doesn't seem to be taking any CPU. The first 2 are for setting the options which should exit right away.\nWe have now moved to use gocode from https://github.com/mdempsky/gocode instead of https://github.com/nsf/gocode as the latter as issues with Go 1.10 and above. Can you kill all existing gocode processes and then follow the below steps to get the latest version of this extension from master and let me know if it makes any difference? \n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\nRun Go: Install/Update Tools. If there is a currently running gocode process (which there will be if you were typing code in the editor before this) that the extension was not able to close, then the logs that show the progress of the tool updates will ask you to kill it and then try again\nKill the process manually and then run the Go: Install/Update Tools again. At this point, you should have a clean installation of mdempsky/gocode\n\n. We use gocode for the auto-completion feature and godef for the hover feature.\nI don't use dep myself, so don't know if this problem is dep specific. Please ask other Go developers in the Gophers slack channel. There should definitely be someone there who uses VS Code and dep\nMeanwhile, here is something you can do to troubleshoot the auto-completion issue.\nRun the below in a terminal\ngocode close\ngocode -debug -s\nThen try for completions again in VS Code.\nYou will see the output for each completion attempt in the terminal. \nThat should tell you if gocode is not able to return completions. @m3talsmith Thanks for the detailed report\nTo confirm that the latest update is indeed causing the issue, can you install the previous version and check that everything is fine? Below are the steps to get the previous version\n- Uninstall the Go extension \n- Add the setting \"extensions.autoUpdate\": false\n- Download the Go-0.6.79.vsix file from https://github.com/Microsoft/vscode-go/releases/tag/0.6.79\n- Close all instances of VS Code\n- Run code --install-extension Go-0.6.79.vsix\nIf the previous version indeed works fine, then while still being in the previous version run the command Go: Current GOPATH. Then update the extension to the latest version and run the same command. Compare the 2 results. Is there any difference?\nIn your system setup, it looks like you have set the GOROOT env variable. Can you run echo $GOROOT in the integrated terminal in VS Code, and check that its the expected value?\n. Can you run which dlv in the terminal and make sure the resulting path is the same as what VS Code is using i.e /Users/bojand/dev/go/bin/dlv?. Also https://github.com/derekparker/delve/issues/1215 is talking the exact same issue. Can you get the latest delve and try again?. Glad that it all worked out. And thanks for pointing out about the On OS X it requires creating a self-signed cert to sign the dlv binary.\nThat was related to the old way of getting delve on Mac which was by using the Homebrew formula. The maintainers of delve have now removed that has one of the options and I was not aware of that move.\nI have updated our wiki to reflect the same.\nHappy Coding!. This feature is now out in the latest update to the Go extension (0.6.81)\nChange the go.lintTool to start using golangci-lint. This feature is now out in the latest update to the Go extension (0.6.81)\nChange the go.lintTool to start using golangci-lint. Implemented with #1699 by @mgechev . This feature is now out in the latest update to the Go extension (0.6.81)\nChange the go.lintTool to start using revive. To install the update, \n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code. @primalmotion The formatter from the language server is not yet stable. Did you enable it explicitly using the go.languageServerExperimentalFeatures setting?. autoComplete is stable. It doesn't have features like automatic importing of unimported packages when completing symbols from the unimported packages though. That's why I wanted to add an option for users to use the default auto-completion feature.\nIf all is well with it after this testing, I can change the default value for autocomplete in go.languageServerExperimentalFeatures to true. Thanks @wolfeidau! Do try out the -config flag with file paths having ~ for homer or the ${workspaceRoot} variable. Great, thanks everyone!\nI'll release the update first thing on Monday morning.. Thanks to each and everyone here, the update has been released!. Thanks for the PR!\nI'll update this thread soon with steps to try this out before I release the next update.. To test this,\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\nChange the go.lintTool setting to revive. That error is coming from gorename and so is specific to your code.\nTry to rename the same symbol by using gorename from the terminal. You most probably will see the same error.\nIf gorename works from the terminal, but not in VS Code, then please re-open this issue.. Can you share what happens when you just type out fmt.Println(\"hello\") and then format the file? The formatter adds missing imports as well. I am curious to see how that is handled.\n\nAlso, do you know of other cases like this where the import statement should not be updated?. Added support to resolve the file path passed in the -config flag to revive with https://github.com/Microsoft/vscode-go/commit/d31636a89931add2b799610d91dce1f67b27d5d8\n@wolfeidau Can you try using file paths that use ~ for home directory or ${workspaceRoot} ? You will need to download the latest vsix file again.. I spent a long time looking at how the CancellationTokenSource works and came at the below conclusion:\n- Yes, like you figured out, once cancelled, the token remains in a cancelled state and every new onCancellationRequest handler will get called\n- The token source needs to be disposed after each use. Take the case of a completed lint process followed by a cancelled one. If the token source is not disposed after the first use, then the  onCancellationRequest handler will get called even for the completed process\nhttps://github.com/Microsoft/vscode-go/pull/1704/commits/7f8e68df058bd69bf7c64313cf5b26234bd6544e should take care of both cases.\n\nIt's not clear to me whether I need to wrap the cancel in a try/finally so that the dispose will always be called.\n\nAre you talking about the case that one of the cancel event handlers might throw an exception and so the dispose won't be called?. Just tried throwing an exception from the cancel event handler. It doesn't affect the dispose. So we are good.. Thanks for your offer @tjulises. We are not looking to change the logo of this project/plugin at the moment.\n. @mhr3 Yes, I'll get to this in a few days.. @mhr3 Is there a sample repo where I can test this?. Never mind, I used the one from your screenshot above. > you probably aren't mixing suite and non-suite tests in a single package - and even if, we'd just end up running more tests than necessary, which shouldn't be a big deal.\nTake the case where the non testify test is failing and the user clicks on the \"run test\" codelens above a test which should be run using testify. Now the non-testify test will run and fail and the failure will be printed out in the output which can be misleading. >  but if we ran with -run ^$ -testify.m ^TestFoo$, nothing would actually run\nAh! I missed that. I understand it now.\nRegardless, having all the normal tests run when the run test or debug test codelens are clicked or when the command Go:  Test Function At Cursor is run, feels very wrong.\nEspecially because there is nothing enforcing the users to not use normal tests when using the suite from testify.\nHow about this?\nWhen creating the codelens as well as in the testAtCursor function, we have access to all the test functions with their range. \nIf the current function is actually a method, then scan the text content of the other functions to find the one with suite.Run() call. Both names should get included in the TestConfig object in the testAtCursor function\nThis way, in targetArgs, you will have access to both the function and the method.\n. @mh3 I dont see any changes related to my last comment https://github.com/Microsoft/vscode-go/pull/1707#discussion_r194812979\nYou have replied with \"Changed, clearly this isn't going to work in 100% of cases, but should be close enough.\", but I dont see which commit corresponds to this comment\nCases of false positives arent much of a problem. Since we pass testify.m only suites with the right method name will get run. I am concerned about false negatives where no suites will be run.\nTherefore, I suggest to simplify the findTestFnForInstanceTest function.\n\nRename it to findAllTestSuiteRuns\nIt need not take symbolName as parameter\nTo filters given array of test functions and returns those that have a suite.Run() call in them\n\nThen, we can revisit this later, if there is feedback on too many false positives. Thanks!\nI'll release an update in a few days.. @alex-kovoy That is not true. Tests not using the testify framework run just as before. If they don't for you, please log a new issue with a sample code we can try replicate your issue on.. For anyone else seeing the same issue as @alex-kovoy, the issue is being tracked in #1911. This repo is for the Go extension to VS Code. Please log your feature request in the VS Code repo. . Please provide sample code with your expected results.. @m90  Let's wait until the release for the wiki update.\nI was wondering if we should prompt the users using Go 1.10 and above to update their gocode if the current one panics. Because otherwise, this change will only help first time installs and those who already have go get the new gocode. Ok, In that case, we can leave it as is.\nI can update the FAQ to include a note on this.. - Which version of Go are you using?\n- Have you installed the Go extension?\n- Do other features like Go to definition, Find all references work as expected?\n- Do you see any errors in the console? Help -> Toggle Developer Tools -> Console?\nIf other features work as expected and there are no errors in the console, then \n\nRun gocode close in a terminal and try again.\nIf it still doesnt work, run go get -u github.com/nsf/gocode to update the tool. If you use the go.toolsGopath setting, then set \nGOPATH to the value in that setting before running go get so that the tool is installed/updated in the right location\nIf it still doesnt work, run gocode -s -debug in a terminal and try again. Results from gocode will show up in the terminal. \nIf you see expected results in the terminal, but not in VS Code, log an issue in the vscode-go repo, else \nlog an issue in the gocode repo. Its possible that this is due to https://github.com/Microsoft/vscode-go/issues/1645#issuecomment-386753848\n\nTry running the below to install the gocode by mdempsky and try again\n\ngocode close\n\ngo get -u github.com/mdempsky/gocode  (If you have set go.toolsGopath, then set GOPATH to that value before running the go get). @CheyiLin Can you provide sample code where I can try this?\n@lggomez Did your co-worker face the problem with go 1.10 as well as the latest version of the Go extension?. @LiPengfei19820619 What is the version of the Go extension you are using? Any small sample code where you see the issue consistently can help. Also run gocode -s -debug in a terminal and try again. Results from gocode will show up in the terminal. That might help if figuring out whats going on. Let's first ensure that the right gocode is being used\n\n\nRun gocode close and gocode exit\n\nDelete the folders mdempsky/gocode and nfs/gocode from your GOPATH/src and GOPATH/pkg. (If you have set go.toolsGopath setting then delete the same from there)\nRun go get -u github.com/mdempsky/gocode\nCheck the created/modified date of the gocode executable in GOPATH/bin folder. Ensure it matches the timestamp of when you ran the previous step.\nRun gocode -s -debug\nTry completions in VS Code. @ikgo, @lggomez \n\nThere is still the problem of nsf/gocode having other problems with Go 1.10 and above. So we still have to figure out what the root cause was for mdempsky/gocode to not work.\nEveryone,\nPlease go through https://github.com/Microsoft/vscode-go/issues/1723#issuecomment-396411872 and see if that helps.. Its about 9 months since the last activity in this issue.\nEver since, we have released many updates to the Go extension, and gocode itself has shipped many bug fixes.\nPlease update gocode using the command Go: Install/Update Tools -> gocode -> Ok if you havent done that lately.\nIf anyone still has problems, please try running gocode in server mode to see if it gives any helpful errors. See https://github.com/Microsoft/vscode-go/issues/1711#issuecomment-394501462\nThank you everyone for your patience and Happy Coding!. The go.testEnvVars is used by when running/debugging tests.\nThe code you shared is not a test.\nIf you want the debug process to have access to a environment variable, then it should either be already available as an environment variable or can be set via the env property in the debug configuration or you can provide a file path using the envFile property in the debug configuration. @mbenkmann Thanks for reporting! I can repro. Until we release a fix for this, please add \"useApiV1\": false to your debug configuration. That should let you use the watch feature.\nIf you want to continue to use the v1 apis and not change your debug config as described above, then you can use the 0.6.80 version of the extension by downloading the vsix from https://github.com/Microsoft/vscode-go/releases/tag/0.6.80 . Add \"extensions.autoUpdate\": false to your settings so that the extension doesn't get auto-updated.\ncc @lggomez This is a regression from the changes we made to the debug adapter. Thanks @lggomez! That was my mistake. I didnt include the right rpc name when I brought back v1 support.\n@mbenkmann Can you add \"useApiV1\": false to your debug configuration? That should enable you to watch the variables without any issues.\nI'll release an update next week with the fix.. This is fixed in the latest version of the Go extension (0.6.83)\n. This was always the case with the gutter style ever since we introduced it last year.\nI don't have any bright ideas how to solve this at the moment.\nBut ideas and PRs are most welcome.. We could try decreasing the width of the svg.... The ability to add a z-index on decorations was introduced recently. If that works then we can give a lower z-index for the coverage decorator which should fix this issue.\nWhen I get a link to the docs on that, I'll add it here.. Thank for reporting! This bug got introduced in the last release.\nFixed with https://github.com/Microsoft/vscode-go/commit/abe97240e573e9d2c11cea00bfd8c1e77c41398e\nI just released an update (0.6.82) that has the fix. Thank for reporting! This bug got introduced in the last release.\nFixed with https://github.com/Microsoft/vscode-go/commit/abe97240e573e9d2c11cea00bfd8c1e77c41398e\nI just released an update (0.6.82) that has the fix. @isidorn Any idea why some of the links get detected and others dont in the Output channel?. @freman and others (@l33t0, @houmam, @skycube, @zenyuk, @mattevans, and @shousper) who have upvoted this feature:\nPlease give this feature a try by following the below steps and share any feedback you have.\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\n. @freman \n\nYou have brought us so much joy! Thank you!\n\nAll credits go to @lggomez :)\n. This feature is now available in the latest update to the Go extension (0.6.83). Find All References is slow because the tool we rely on (guru) is slow.\nIf you are not on Windows, you can try using the language server support by adding \"go.useLanguageServer\": true in your settings. The Find All References feature there might be faster.\nThe Go extension itself doesnt maintain any indexing and we rely on Go tools to provide all the Go related features. And so, there is nothing we can do from the Go extension's side, unless there is a faster alternative to guru. Or if the language server from Sourcegraph creates and maintains some indexing.. Is everyone here on the latest version of the Go extension (0.6.82)?\nIf yes, then the one main change we did around completions is to use mdempsky/gocode instead of nfs/gocode due to the latter having issues with Go 1.10 and above. See #1645\n@ddrake17 You mentioned that gocode works from the terminal for you. Please try again in the same way that the Go extension calls gocode. Which is gocode -f=json autocomplete <your-file-name> <offset>\nTo get the offset, you can use the extension https://marketplace.visualstudio.com/items?itemName=ramyaraoa.show-offset\nOthers, can you check if you are using mdempsky/gocode or nfs/gocode? Look for github.com/mdempsky/gocode or github.com/nsf/gocode in your GOPATH. If you have set, go.toolsGopath, then check for these there. @uudashr Adding the gocode close and gocode exit commands before updating the tools via the Go Install/Update Tools command should help.\n@MintyOwl, \n\nCommand 1. gives the right output, where as the 2. gives wrong output.\n\nCan you share the output of both?\nMe, @uudashr and @m90 are able to get completions for external installed packages as well. My gut feel is that @uudashr's findings of issues with migration must be causing this. Can you follow the steps in https://github.com/Microsoft/vscode-go/issues/1723#issuecomment-396029321 and let us know if this is still a problem?. Also, let's first ensure that the right gocode is being used\n\nRun gocode close and gocode exit\nDelete the folders mdempsky/gocode and nfs/gocode from your GOPATH/src and GOPATH/pkg. Delete the gocode binary from GOPATH/bin. (If you have set go.toolsGopath setting then delete the same from there)\nRun go get -u github.com/mdempsky/gocode\nCheck the created/modified date of the gocode executable in GOPATH/bin folder. Ensure it matches the timestamp of when you ran the previous step.\nRun gocode -s -debug\nTry completions in VS Code. @MintyOwl \n\n\nBut, vscode (atleast on my machine) cannot autocomplete mdempsky version. nsf version works flawlessly.\n\nDo you not see completions only for external packages or even for pkgs from std lib when using the mdempsky version in VS Code?\n. Thanks for those details @ddrake17!\nUnfortunately, there is still the problem of nsf/gocode having other problems with Go 1.10 and above. So switching to nsf/gocode cannot be the final solution.\nI've pushed a fix that will close any currently running gocode process before attempting to update the tool using mdempsky/gocode. \nI was able to replicate the issue of not getting any completions if there is a currently running gocode process of nfs/gocode and a new request is made to mdempsky. In such case, I prompt the user to kill such process manually and try again.\nThese 2 cases together should take care of a clean install and a possible explanation of gocode failure\nEverybody in this issue, please give the below a try and share what you find.\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\nRun Go: Install/Update Tools. If there is a currently running gocode process (which there will be if you were typing code in the editor before this) that the extension was not able to close, then the logs that show the progress of the tool updates will ask you to kill it and then try again\nKill the process manually and then run the Go: Install/Update Tools again. At this point, you should have a clean installation of mdempsky/gocode\n\nNote that I wasn't able to repro the invalid type issue or the issue of getting completions only for the pkgs from std lib and not external pkgs.  I am guessing that must be due to gocode getting into a dirty state. The above should get you to a clean state.. @NerdsvilleCEO The autobuild option is only available in nsf/gocode and not in mdempsky/gocode\n@ddrake17 @MintyOwl @zeroftw @LiPengfei19820619 @zugl Are you using dep as well?\n. Wow thats great to hear @PaluMacil and thanks to @m90 for the tip too\n@PaluMacil What exactly did you delete from $GOPATH/pkg? $GOPATH/pkg/../github.com/nsf/gocode or $GOPATH/pkg/../github.com/mdempsky/gocode or something else?. @zugl Can you check if github.com/mdempsky/gocode works when running it from the command line? If it doesnt then we should log an issue at https://github.com/mdempsky/gocode.. Sorry for the late reply, I was on vacation all last week. I have included the -source flag as suggested in https://github.com/mdempsky/gocode/issues/32#issuecomment-401988251. Can you folks here give below a try?\n\nDownload https://github.com/Microsoft/vscode-go/blob/source/Go-0.6.85-beta.2.vsix\nRun code --install-extension Go-0.6.85-beta.2.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo, switch to branch source and use the Go-0.6.85-beta.2.vsix file \nReload VS Code\n\n. @LiPengfei19820619 I am sorry, the fix is in a separate branch, I have updated the instructions in https://github.com/Microsoft/vscode-go/issues/1723#issuecomment-403673078.. Hello all, \nApologies, I forgot to update this issue after the release last week.\n0.6.85 is indeed released and you dont need to install the beta versions anymore.\nPlease do run Go: Install/Update Tools and select gocode  to ensure you have the latest mdempsky/gocode. \nPlease do comment if the completion issues have gotten fixed for you.\nI'll keep this issue open for another week. If I dont hear any problems by then, I'll close this issue.\nThanks for all the support!. @MattiaCostamagna Check if the command Go: Current GOPATH is giving you the expected GOPATH. The same is used when the extension runs any of the Go tools. \n@MattiaCostamagna, @Ankur10gen Can you check if your custom packages are installed? i.e Do they exist under GOPATH/pkg? Can you open the custom package, run Go: Install Current Package and try again?\n. @Ankur10gen I am not sure about that... The final output for mdempsky/gocode is a gocode binary that should be in your GOPATH/bin. So run Go: Install/Update Tools and select gocode. Then check if the gocode binary in your GOPATH/bin has the current timestamp.. @LiPengfei19820619 One instance of gocode is to run it in the server mode which once run doesn't stop unless explicitly stopped. The other is run in the client mode by VS Code everytime you type the first letter of a word or type . after a word. The latter process closes right after giving the completion results. Try this\n- Close all gocode processes\n- Run gocode -s -debug in a terminal. This will run gocode in server mode\n- Now use vscode and try for completions\n- The gocode instance running in server mode will give some output. Check if you find expected results there\n. @LiPengfei19820619 As per the output you have shared gocode is acting as expected. Looks like when VS Code calls it, it never returns anything and the process never closes. Please follow the steps in Building and Debugging the extension to have a local set up of the extension running. Add breakpoints at https://github.com/Microsoft/vscode-go/blob/0.6.85/src/goSuggest.ts#L163, https://github.com/Microsoft/vscode-go/blob/0.6.85/src/goSuggest.ts#L167 and https://github.com/Microsoft/vscode-go/blob/0.6.85/src/goSuggest.ts#L175 and see if the process that is spawned of gocode ever returns any data.\nAnybody else see the similar things as @LiPengfei19820619? Which is no completions and a new gocode process showing up for ever request which never goes away?\n. @LiPengfei19820619 I moved your comments to #1838. Let's continue there and save this thread from the noise. @SpencerMacKinnon When you are trying to get completions for an external package, gocode assumes that the package is already built and installed (under GOPATH/pkg). Try Go: Build Current Package or just save the file to trigger a build. The build should install all dependent packages. @daenney Can you try the below?\n- Run Go: Build current package. This uses the -i flag when running go build which will ensure all the dependent packages are installed\n- From this point gocode should be able to give you completions as it looks at only the installed packages to provide the results.. @weeezes Do you get prompted to install gocode-gomod when you are NOT using Go modules in your project?. @jcalvarado1965 Are you using modules? If yes, then please log an issue at https://github.com/mdempsky/gocode/, else log it at https://github.com/stamblerre/gocode\n@gencer What version of Go are you using? Please try the below to figure out if gocode is slow or VS Code is slow in giving completions.\n- gocode exit or gocode close\n- gocode -s -debug This starts gocode in debug mode and will give completion results every time gocode is called  from VS Code\n- Start using VS Code. When you see the slowness, go back to the terminal where you started gocode -s -debug to see if gocode is returning the data slower or not. This thread has gone too long and each person here might be facing completion issues for different reasons. Half of us here have already found solutions one way or the other. Therefore, I will be closing this thread.\nThe mdempsky/gocode fork is much more stable than a few months ago.\nIf you are using Go modules, you will be prompted to install another fork of gocode which is also pretty stable.\nIf you see any issues follow the below which I have also captured in our FAQ:\n\nIf this is for symbols from external packages, then ensure they installed first. You can do this by either running Go: Build Current Package which will install all dependencies or install the dependencies manually yourself using go install.\nIf it still doesnt work, run gocode close or gocode exit in a terminal and try again.\nIf it still doesnt work, run Go: Install/Update Tools, choose gocode to update the tool. Choose gocode-gomod if you are using Go modules\nIf it still doesnt work, run gocode close or gocode exit followed by gocode -s -debug in a terminal and try again. Results from gocode will show up in the terminal. \nIf you see expected results in the terminal, but not in VS Code, log an issue in the vscode-go repo, else \nlog an issue in the gocode repo. If you are using Go modules, log the issue in https://github.com/stamblerre/gocode\n\n. @uudashr and others (@konrin, @lcg635, and @amsokol) who have upvoted this issue:\nThis is fixed in master.  Please give it a try by following the below steps and share any feedback you have.\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. We have the Go: Browse Packages command to browse packages and files under them.\nThe outline feature from VS Code is still in its preview state.\nLet's wait and see how it evolves and re-visit this later. This is now fixed in the latest update to the Go extension.. Must have been an unfortunate series of events that lead to that state.\nThere is not much we can do in this case. The expectation is that the user cleans up the said repos and try updating again if needed.\n\nDo you have any other suggestions?. You can log a feature request to make the Go: Install/Update Tools show a quick pick (drop down) which has all the tools + an \"all\" option. . @inancgumus I tried the exact same setup as you described above, but I get the right import\nThe below shows how my ~/Desktop/folder and $GOPATH/src/github.com/ramya-rao-a/folder are linked. \n\nAnd below I save the file which triggers formatting and the right import is added.\n\nAre you doing anything differently than what I did?\n. For the command Go: Test Function At Cursor to work, the cursor should be inside a test function.\nDo you see codelens for running tests? Clicking on them would run the tests as well.\nSee https://twitter.com/ramyanexus/status/860190148239081472. This is most likely the same issue as #1714\nI've released an update to fix #1714.\nCan you update to 0..6.83 version of the Go extension and try again?. Good to know.\nHappy Coding!. PRs are welcome to enable both go.gopath and go.toolsGopath settings to honor the env var\n\nresolveToolsGopath is where we resolve toolsgopath\ngetCurrentGopath is where we resolve the gopath\n\nThe env var should be available in process.env['GOPATH'].. Hey @sphawk,\nAm a little busy with work at the moment, will definitely get to this by the end of the week.. This feature is now available in the latest update to the Go extension (0.7.0)\nThanks to @sphawk!. PRs are welcome for this feature\nReferences:\n- The Go: Get Package is an example of a command that acts on the import statement.\n-  vscode.workspace.updateWorkspaceFolders can help in adding folder to workspace. This feature is now out in the latest update (0.6.85) to the Go extension.\nOne can now select the complete import statement or part of the import to add the folder corresponding to the imported package to current workspace.. Errors are shown in red, warnings in green.\nErrors from linters are shown as warnings by the Go extension.\nSo what you are seeing must be from the build output.\nOpen the output pane (View -> Output), select \"Go\" from the dropdown on the top right corner of the output pane. This will have the output from build/lint/vet. Check the line number and column number in the build error output there. We use that to show the red lines.. > To recap: the change has be done here: https://github.com/Microsoft/vscode-go/blob/0.6.82/src/goRunTestCodelens.ts\nAm confused... You have already done the changes or you are providing a pointer as to where the change has to be made?\nLet me know if you have any questions or want me to take a stab at this.. We show the Installing gocode aborted as existing process cannot be closed.... message when running gocode close fails with something like rpc: can\\t find service Server because of an existing process.\nAt this point, we shouldn't continue to update gocode, but according to the logs you shared, we do continue. I'll push a fix for that as well as the error with the iterator\n. Run the below to start gocode in server mode\n- gocode close\n- gocode -s -debug\nNow start typing in VS Code. The completions will start appearing in the terminal with all details. If you don't see the expected completions there, then such completions (from packages out of GOPATH) are not supported by gocode itself.\nAlso, I believe such code organization isn't suggested either.\nCant you put your main.go file and the projectname folder in a separate location under a \"src\" folder and include that in your GOPATH?\nFor example: In the below case your GOPATH would be path-to-folder1;path-tofolder2 \n\nfolder1\nsrc\nmain.go\nprojectName\nutils\nsecondutils\n\n\n\n\npkg\nbin\n\n\nfolder2\nsrc\npkg\nbin\n\n\n\n. > when i've navigated into folder1 -> projectname -> utils -> utils.go, and then trying to reference something from secondutils, i wouldn't get autocompletion.\n\nIs there a src folder after folder1 and before projectname,  otherwise folder1 cannot be a valid GOPATH can it?\nDid you add both folder1 and folder2 to your GOPATH?\nDid you try running gocode in server mode and see what results are being returned?. Fixed with https://github.com/Microsoft/vscode-go/commit/0f40521affce86b2cf75f52c5da47b0c51deb67e\nPlease see instructions at https://github.com/mdempsky/gocode/issues/34#issuecomment-405129087 to get the fix before I release an update later this week. The fix for this issue is now out in the latest update (0.6.85) to the Go extension.. I am able to copy text from what is shown on hover as shown below.\n\n\nIs this what you are trying to do or am I missing something?\n. Wow... thats demeaning to all the heart surgeons who have spent years learning their craft and where people die if they make a mistake!!\nKidding.\nProviding an option copy the hover text to the clipboard is a language agnostic feature request. As such, please log it in the repo for VS Code.\n. Thanks @sphawk!. Find All References is slow because the tool we rely on (guru) is slow.\nIf you are not on Windows, you can try using the language server support by adding \"go.useLanguageServer\": true in your settings. The Find All References feature there might be faster.\nThe Go extension itself doesnt maintain any indexing and we rely on Go tools to provide all the Go related features. And so, there is nothing we can do from the Go extension's side, unless there is a faster alternative to guru. Or if the language server from Sourcegraph creates and maintains some indexing.. Thanks for the PR @freman \nAny reason to prompt the user to choose among the imported packages in current document rather than say choose the package under the cursor like we do for the Go: Get Package command?. But then, how would you decide which one to use?. My apologies @alexus1024, for taking so long to get back to this issue.\nSo, following the example in https://docs.docker.com/compose/compose-file/#env_file, we can update our support of the envFile attribute to also take in either a string or an array of strings.\nPRs are most welcome to add this feature.\nCode Pointers:\n- See Build and Debug Extension to set up local dev environment\n- The package.json file needs to be updated to support both string and array of string as valid inputs \n- We currently use parseEnvFile to parse a given env file. We can add a new function parseEnvFiles that can take in an array of paths, and internally use parseEnvFile in the right order\n- Then, update the types for the envFile property in goDebug.ts file and call parseEnvFiles instead of parseEnvFile\n- https://github.com/Microsoft/vscode-go/blob/0.8.0/src/debugAdapter/Readme.md is helpful if you want to debug the goDebug.ts file. I am sure this used to work once upon a time....\nNot sure what changed.\nThe below piece of code was specifically written for the case when gocode returns values for the imports\nhttps://github.com/Microsoft/vscode-go/blob/0.6.83/src/goSuggest.ts#L187-L195\n. Thanks for that insight @devnet-uk \nLooks like mdempsky/gocode does not support a lot of cases that is supported by nfs/gocode.\nCan someone log an upstream issue for this?\n. I've logged an upstream issue for this. See https://github.com/mdempsky/gocode/issues/38. > I guess the challenge is that subtests are declared within a function declaration and never at the outer level. \nYes, thats indeed the challenge.\nThe Go plugin gets the outline of the file (what you see when you do a Ctrl/Cmd+Shift+O), get all functions whose name starts with either \"Test\", \"Benchmark\" or \"Example\" and then provides the code lens to run the tests.\nIn case of sub tests, we need to parse the inner contents of the function which the Go plugin isn't capable of doing as it doesn't really understand Go code. For all other rich language features, we use the Go tools like godef, gocode etc.\nIf there was a tool that understands Go code and would return positions of each sub tests, then we could use that to provide the codelens.\nThanks for logging the feature request, but unfortunately, in the current state of things, we cannot implement this feature.\nI did get to learn about sub tests though, so thanks for that!. @lggomez This will not help the case where we can debug programs even without the presence of the launch.json file\nI would suggest to add a new setting called go.delveConfig which has the below properties\n- useApiV1\n- dlvLoadConfig. @lggomez While testing this I realized that all debug configurations (whether the ones from launch.json, or the ones we create for debug tests codelens or the default ones) pass through resolveDebugConfiguration. So that single location is more than enough to read the dlv config from the configuration/settings.\nSorry about all the churn\n. This would be a cool thing to explore. Am out on vacation next week, will get to this once am back.. @Sharpiro, @yui-knk Indeed, great job at getting to the root cause.\nLike @lggomez mentioned, looks like the stdout/stderr issue is solved in delve itself.\nCan others here get the latest delve and confirm that the issue is fixed?\n. @Sharpiro That seems like a separate issue. Were you trying to debug tests using the codelens or a debug configuration?. Closing this issue as the fix has been made upstream in delve\n. Try \"go.testFlags\": [\"-count=1\"]. That was an intentional design choice done in VS Code as Go to implementation was found not as commonly used as Go to definition or Find all references.\nhttps://github.com/Microsoft/vscode/issues/9285 tracks the feature request for user configurable menus\nYou can use the command Go to implementation from the command pallet. The keyboard shortcut for it is Cmd+F12. Thanks for the contribution to snippets @hariprasadraja \nWe have recently come up with a new policy when it comes to contributing snippets to this extension.\nPlease see Contributing Snippets in our Contributing Guide.\nTherefore, please log an issue for this addition. If we get enough upvotes for it in a month or two, then we can include this in the extension.\nThanks again for your contribution and sorry for the trouble.\nHappy Coding!. I am guessing you tried to run go build -i -o separately and got the above error.\nYou need to provide a path for the output binary if you are using -o\nThe Go extension provides a temp path when building on save.\nI just tried on 1.10 and everything is working as expected in the Go extension.\n. - Ensure you are using the latest version of the Go extension (0.6.84)\n- Run the command Go: Install/Update Tools. Select gocode from the choices and click ok.\nThis will update and re-compile your version of gocode.\nThen try again.. This issue was moved to Microsoft/vscode#53359. Thanks for reporting @FiloSottile \nIs it a common scenario to have different go binaries in $PATH vs the goroot?. How about other Go tools like gofmt and 3rd party Go tools\nalternateTools > GOPATH > PATH > GOROOT \nor\nalternateTools > GOPATH > GOROOT > PATH ?. I have pushed the fix to master. Can you give it a try by following the below steps and share any feedback you have.\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. The fix for this issue is now out in the latest update (0.6.85) to the Go extension.. This is similar to save all triggering a lot of linter processes which is covered in https://github.com/Microsoft/vscode-go/issues/1015. The issue with auto-completions is due to nsf/gocode and the alternative mdempsky/gocode having their own issues with Go 1.10 Otherwise, completions using this extension never had any issues before.\n\nPlease try https://github.com/Microsoft/vscode-go/issues/1723#issuecomment-403673078 and let me know if that helps at all.\nAlso, can you share a code sample where I can try and get a repro of this invalid type issue?. The go-langserver has always been an opt-in and marked as an experimental feature. It was mainly a stepping stone to an eventual scenario where we would use the language server for all the language features.\nThe gocode case is definitely an unfortunate one where the one we relied on for many years (nsf/gocode) doesn't work well with Go 1.10 and above. And the replacement (mdempsky/gocode) is not working well for many either.\nNone of the new features added in the past 6 months are creating any issues as far as I can see. Its existing features (language server and gocode like you said) that are having issues. \nI myself have stopped adding new features and have taken more of a maintainer role with essential bug and perf fixes. At the same time, if there are PRs for new features from the community, I am all for it, and will not take the stance of \"no new features\".\nI also agree that its about time that we took a step back and take a look at whats not working. Especially the issue with gocode and debugging with symlinks.\nA big refactoring is also in order.\nI am on vacation for a week, once am back, my first task is to tackle the gocode issue.\nThanks for your concerns though and if you have any ideas on what to do with the gocode issue, please do share.\n. > I can debug with commands from the terminal\nCan you share a screenshot of that? How did you debug from the terminal? Using dlv debug? Did you pass a file path to it?\nWhat is the version of dlv you are using?. Never mind, I got it to repro.\nIn this case dlv debug works but not dlv debug testing  and this only happens for the folder directly under the GOPATH. Try making another folder under your testing folder, add a go file there. That one will debug just fine.\nThis is an upstream issue. I have logged https://github.com/derekparker/delve/issues/1268\nFor now, try creating a sub folder and work there.\n. @Ritzpak As explained in https://github.com/derekparker/delve/issues/1268#issuecomment-405441709, testing is an internal package and thus the issue. Rename it to something else and debugging should work as expected.. In your step 4 you say \"build\". How exactly are you building it?. Running go build manually in a terminal will not remove the errors.\nYou either need to save the file which will trigger a build or running build manually via a command in VS Code.\nI will close this issue for now. Let us know if you see it again.. @olostan \n- Are you on the latest version of the Go extension (0.6.84)?\n- Are you trying to debug the unit tests using the codelens or a debug configuration?\n- If you are using a debug configuration, then can you share that config?\n- When you run Go: Current GOPATH do you see the expected gopath or the one set in as an environment variable outside of vscode?\n@lggomez Are you able to reproduce this issue?\nhttps://github.com/Microsoft/vscode-go/blob/0.6.84/src/goDebugConfiguration.ts#L42-L47 ensures that as long as there is no gopath specified in the debug configuration, the gopath used while debugging will be the same as what you see when you run the command Go: Current GOPATH. Can you try running https://'github.com/josharian/impl from the terminal and see if it is able to generate the stubs as expected? If not, then please log this issue at https://github.com/josharian/impl. > As i said before,\nSorry, I totally missed that. You are right, passing the cwd when spawning the process that runs impl fixes this issue. The fix will be out in the next update which should be in a few days\nThanks for reporting and the code samples!\n. btw from what I could understand this issue only occurs when inside a folder named \"internal\". Is that right?\n. The fix for this issue is now out in the latest update (0.6.85) to the Go extension.. Glad you found a workaround. The default tool being used is godef. Please log an issue https://github.com/rogpeppe/godef if you are not able to find the definition even after using godef from the terminal. #1025 tracks just that. I havent had the time to resolve it yet though.. Please provide examples and sample code. Also check if gomodifytags supports your case . I believe this is already supported. Please see https://github.com/Microsoft/vscode-go/wiki/Release-Notes#0656---29th-march-2017. We show the exact same output which go test gives us with the exception that we expand the relative file paths to absolute paths to enable users to click on them to open the file and line location in an editor.\nWould you say the normal output of the go test command itself is not intuitive enough or that us expanding the file paths is creating noise?. We as an extension will not be investing in a UI feature that is better implemented from the core VS Code. See https://github.com/Microsoft/vscode/issues/9505 which is the upstream feature request in VS Code to have a test runner viewlet/tree. When that is implemented, we can onboard this extension to use the same.\nIn the absence of an upstream solution, extensions can still do this using the tree view approach like you suggested. I do believe this is a useful feature to have, although it would be out of scope for this extension.\nAs VS Code and this extension has gained popularity, we have seen a gradual scope creep over the past year. Being a sole maintainer of this project, it is getting a little hard to support all incoming requests and maintaining the ever growing set of features. Therefore,one criteria I am using now in the triaging process is whether the feature request would make sense as a separate extension. This current feature request is definitely one such request.\n. > Alternatively, VSCode could kill processes it started that have had their files changed since it ran - that doesn't sound like a simple feature but would at least keep the processes from stacking up.\nWe do have the above in place, but turns out there was a bug in it. \nhttps://github.com/Microsoft/vscode-go/pull/1791 fixes it. Can you help us with testing this and let us know if this helps your case?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. Thats great to hear @StephenWeber!\nAll credit goes to @JacksonKearl :)\n\nWill ship in an update which will have this fix in the next few days.. This fix is now out in the latest update (0.6.85) to the Go extension.. Is it always guru or other tools also do this?\nDo you have the references codelens enabled? That might explain all the guru instances.. Then that's the culprit.\nguru is inherently slow. We use it to find references.\nHaving codelens for references enabled would mean a lot of guru processes around. Especially on larger files.\nI would suggest to disable the references codelens until we have a good alternative to guru. That more is coming from https://github.com/Microsoft/vscode-go/blob/0.6.84/src/debugAdapter/goDebug.ts#L823\nFor s1, delve returns a string with length 6. The string itself is of length 2 and so the +4.\nIf anyone wants to take a look at how to fix this, then PRs are most welcome.\nWiki for Running the Go extension from source and debugging the debug adapter. Looks like 6 is for the number of bytes and 2 is the number of characters.\nThanks for that link @kzhui125!. This fix is now out in the latest update (0.6.85) to the Go extension. Thanks @xmattstrongx!. @iamzhout Thanks for reporting and apologies for the delay in response.\nCan you elaborate on the scenario where having the address of the variable is useful?\n@jhendrixMSFT, @vladbarosan Thoughts?. @quoctruong , @iantalarico and @pongad Any thoughts on this?. We could skip using the snippet with function parameters when the cursor is followed by a comma or ). \nIt wouldnt cover 100% of the cases, but should work for most common cases.\nThe reason we cannot do a correct fix for all cases is that we are only aware that the symbol being completed is a variable of func type. We are not aware if the cursor is inside another function call.\nIf that sounds good enough, then PRs are welcome.\nCode pointers: \n- Wiki for Running the Go extension from source \n- https://github.com/doxxx/vscode-go/blob/ba71beed263765892fd6b49d0136954785b47ba8/src/goSuggest.ts#L171 is where the change should be made\n. @doxxx Wont there be a genuine case of when you do want to pass the result of a function as a parameter to another function?. >  I was hoping this could be smart enough to determine that by expected type signature.\nSince the extension itself isnt aware of the Go AST, we relied on very basic things like \"look for , or )\". So, not the code is not smart enough. I wouldnt want to add AST awareness to the code just for this feature.\nWhat I can do is to wait for more feedback. If more users find this feature buggy, then we can revert it.. That would be cool. But instead of introducing a new mode, how about updating the current debug mode to be smart enough to use test when debugging a test file?\nPRs are welcome. The change should be pretty simple.\nCode pointers: \n- Wiki for Running the Go extension from source \n- https://github.com/Microsoft/vscode-go/blob/0.6.84/src/goDebugConfiguration.ts#L26 is where the change should be made. vscode.window.activeTextEditor.document.fileName. @gertcuykens @qzyse2017 on second thoughts, having a separate mode called auto is better. This way we wont be breaking the expectation of users who might have been just looking at their test code but then want to debug the actual package.\n@qzyse2017 See https://github.com/Microsoft/vscode-go/commit/2cc995250e450b8418065188a8f16064d2595cf2. The auto mode is now available in the latest update (0.6.86) to the Go extension.\nThanks for logging this @gertcuykens and thanks to @qzyse2017 for the PR!. From @jluisgarcia on July 7, 2018 16:50\nI just detected this issue.. There is an ongoing discussion for vgo in https://github.com/Microsoft/vscode-go/issues/1532. Add you note there with some links to documentation and we can take it from there.. This fix is now out in the latest update (0.6.85) to the Go extension.. We use godef and gogetdoc tools to provide the hover info. Please log issues in the repos for these tools.. VS Code has been using https://github.com/nsf/gocode to provide completions without any issues for a long time. Since gocode has issues with Go 1.10, we were suggested by its author to use a fork of gocode and so we recently moved to using https://github.com/mdempsky/gocode.\nThe latter has issues with completions for custom packages. This is covered in #1723 and https://github.com/mdempsky/gocode/issues/32. Please subscribe to either of those 2 issues for further updates.. Are you able to debug using delve from the command line?\n. Thanks for sharing that you get similar error when using delve directly.\nVS Code uses delve to provide the debugging features.\nPlease log an issue at https://github.com/derekparker/delve. The coverage result in the terminal shows the file path as starting with _ which happens when GOPATH is not set. Do you get the expected GOPATH when you run the command Go: Current GOPATH?. Those are either linter warnings or warnings from running go vet.\nHover on them to read the warning. Or press F8 to go over all the warnings.\nTo get rid of them, fix the problem that is being called out in the warning.\nIf you don't want to see the warnings at all, then add the below to your settings\n\"go.lintOnSave\": \"off\",\n\"go.vetOnSave\": \"off\"\nIn the future, if you have questions on the usage of this extension, please feel free to ask in the vscode channel on Gophers slack or the gitter. The Go community there would be happy to help. Never mind, I've added the tests. Thanks for the PR!. Can you share what you see in the output channel for Go at this point? View -> Output -> Go. This seems to happen only when the package is directly under the GOPATH and you have opened GOPATH/src in VS Code\nTry building workspace when editing the test file after opening the pkg folder in VS Code. It should work.. Ideally, we wouldnt want you to open the entire gopath in VS Code. There are performance considerations especially when your GOPATH grows bigger and bigger due to all the imported packages.\nYou are still free to open the GOPATH directly in VS Code. I'll keep this issue open until we provide a fix though.. PRs are welcome to fix this issue.\nCode pointers:\n- Building and Debugging the extension \n- The code responsible for running build when current file is a test file is at https://github.com/Microsoft/vscode-go/blob/0.6.84/src/goBuild.ts#L51\n. @qzyse2017 The problem with the approach in your PR is that if the user is editing a test file, has set \"go.buildOnSave\": \"workspace\", then the errors form the test file will not show up. This is because go build ignores test files. We need to run go test -c to get build errors from test files.\n\nAnd I found that the output talked above can't load package: package .: no Go files in /home/user/go/src can also appear when use build workspace command in a directory opened in vscode which has no direct go files in it(the go files are in its subdirectories).\n\nAre you sure? Because there is code in place to get all the packages from the subdirectories and run build on them.. Yes, you are right. Now I recall the reason I had added the !isTestFile there.\nAt any given point, we can either run go build or go test -c which means either we can build all the go files or all the test files.\nWhen editing and saving single files, I would expect go build to run if the file is a go file and go test -c to run if it is a test file.\nWhen running the commands Go: Build Workspace or Go: Current Package, ideally we should run both go build and go test -c, because the expectation is that all files in the workspace/package should be checked for errors.\nWhen I implemented this feature ( Go: Build Workspace & Go: Current Package), I felt it was an overhead to run both go build and go test -c, so I took the shortcut which is what you see in the code today.\nHope that explains the history behind this code.\nCurrently, the issue that @eraserix has is that currentGoWorkspace is the same as cwd at  https://github.com/Microsoft/vscode-go/blob/0.6.88/src/goBuild.ts#L123. In such cases, I think we can safely call go test -c ./... instead. What do you think?. @aarzilli Is Detach expected to close all the processes that might have been started by the headless server as well? For example: When debugging a program that provides a web server, the web server continues to live in Mac but not Windows once the debugging session is complete.. Thanks @aarzilli . The latest beta version (0.9.3-beta.2) of this extension has this feature. Please see Refactoring in VS Code on how you can use the refactor feature.\n. Features:\n- #1782 When suggesting unimported custom packages, show the ones form current workspace before the others. You need to set go.autocompleteUnimportedPackages to true to test this. cc @marwan-at-work)\n- #1733 New command Go: Add Package to Workspace that will add the imported package under your cursor to the current workspace. cc @freman who logged and implemented this feature\nBug Fixes: \n- #1779 Fix bug with function snippets such that they are not inserted when functions are being filling in as parameters of another function call. cc @kaskavalci who logged and fixed the bug. Also cc @doxxx who worked on the feature of function snippets a few updates earlier\n- #1775 perf issues when using linters. cc @StephenWeber who logged the issue\n- #1777 bug in debug variable and hover when using multi byte characters. cc @kzhui125 who logged the bug and @xmattstrongx who fixed it\n- #1769 Fix error with Go: Generate Interface Stubs command when using on an interface that is defined inside an \"internal\" folder. cc @danf0rth who logged the bug and @itsjamie who implemented the actual feature last year.\n- #1739 Fix bug where auto-completions dont show built-in types. cc @paulviks,@willxm, @IIInsomnia  who logged the bug\n- #1760 Look at GOROOT before PATH when looking for the Go binary. cc @FiloSottile who logged the issue\n- #1345 Clean up the debug binary that gets generated by delve at the end of the debugging session. cc @NexWeb \n. Thanks for the feedback @doxxx! Can you update #1779 with the case that didnt work for you? We can continue the discussion there.. @kaskavalci For named import path, where did you keep your cursor before invoking the command? It works for me when the cursor is in the import path, but not on the alias. \nI've pushed https://github.com/Microsoft/vscode-go/commit/d2579a56bd24a666978ee084383c108509d54d4d to add a msg when package not found.. @kaskavalci @freman I've pushed a fix that should take care of the above cases. Do try the latest vsix file and that should have the fix.\n@freman Failing in case of multiple lines is ok. I've added a notification on error. That should be enough. Thanks everyone! 0.6.85 update is released.. Can you elaborate on some examples where this will be useful?\nIs the need for this Golang specific or a generic requirement?\nIs this a common enough requirement or a very special case?\n. @jhendrixMSFT Does https://github.com/Microsoft/vscode/issues/28025#issuecomment-414013391 work for Go?. What is the value for go.docsTool and go.useLanguageServer in your settings?\nIf you arent using the language server, then are you able to get to the definition using godef or gogetdoc?. Then the issue is with the language server. Can you log an issue at https://github.com/sourcegraph/go-langserver?. Closing this issue as there is an upstream issue tracking the same. Please provide a small sample code along with the location where you tried to add the conditional breakpoint.. This is some great investigation going on here :) Thanks @lggomez and @blacktop \nI've merged the PR from @lggomez that adds the errors from delve into the logs.\nClosing this issue as there isnt much we can do here\n. @michaelkleinhenz  Good catch, thanks for reporting!\nPRs are welcome to fix this bug.\nCode pointers:\n- Building and Debugging the extension and Debugging the debugger\n- The code responsible to show the variables during debugging is https://github.com/Microsoft/vscode-go/blob/0.6.84/src/debugAdapter/goDebug.ts#L842\n. Thanks for looking into this @lggomez! \nYou are right. With these findings, I agree that this is not a bug per say.\nI wouldnt want to have a different default than what delve has.\nUsers can change the value of maxVariableRecurse to suit their needs.\nI'll add a note to the wiki\n. This issue was moved to Microsoft/vscode#56515. @gertcuykens @mmwtsn If you still see this with the latest version of the extension, do you mind running the extension from a local setup and debugging it? It is pretty straight-forward\n\nFollow the steps in Building & Debugging the Go extension to get a local set up of the extension running\nFollow the steps in Debugging the debugger, add a breakpoint at https://github.com/Microsoft/vscode-go/blob/0.6.87/src/debugAdapter/goDebug.ts#L654\n\nThat is where the remote path gets translated to a local path, and thats where the translation goes bad and you end up with paths like /usr/local/Users/gert/go/src/fmt/print.go which of course doesnt exist. @gertcuykens I got the below error when building a docker image using your docker file\n\n\nthe remote config shenanigans from vscode are confusing because dlv has no remotePath in the first place.\n\nThe remotePath in the VS Code debug config is not passed to delve. It is solely used to map the file paths in the remote system (used by delve headless server) to the file paths in the local box. So I don't see how remote debugging can work without it.\nThe particular issue you are seeing where breakpoints work until you step into std library code is definitely due to a bug in mapping the path sent by delve headless server to the local path. So if you can please follow the instructions in \nhttps://github.com/Microsoft/vscode-go/issues/1806#issuecomment-413393069, I am sure we can catch the bug.\n. I made the below changes to your docker file\n- set WORKDIR to app instead of yourapp\n- removed dep and ldd related entries\n- built the image with docker build -t app . --target dev\n- ran the container with docker run -it --rm --privileged -p 2345:2345 app\nBelow is my code set-up\n- A folder called app with file main.go with your code sample\n- The above folder is opened in vscode with the below debug config in the launch.json file\n{\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"/go/src/app\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true,\n            \"trace\": \"verbose\",\n            \"useApiV1\": false\n        }\nOnce the container was up and running, I added a breakpoint in VS Code and then pressed F5 to start debugging. The breakpoint was successfully hit.\nIn the interactive container, I could see Hello World after continuing from the breakpoint.\nThe second attempt, resulted in failure in creating the breakpoint and the error Process 15 has exited with status 0. \nI believe the main issue here is the inability to restart debugging the program once it has exited i.e a VS Code counterpart for the r command you use in the dlv client.\nI read up on the substitute-path configuration. Seems like it is only useful when sources are moved to a different place\nbetween compilation and debugging. That is not the case here. So I don't believe adding support for that would change anything.\n. I am in transit today, will check the step in to GOROOT later.\nAre you coming to Gophercon this week? If so, we can look into this together then.. Can you share a small sample code which I can use to get a repro of this issue?. > It makes sense that the query with receivers won't get an exact match since the type itself is part of the symbol, but we could still handle the special case of this example, in which only an exact suffix match is found on the workspace symbols, and highlight that one\nCan you elaborate on this?\nExtensions only control the data passed to VS Code, when VS Code asks for symbols. The fitlering, sorting, matching takes place in VS Code. So, I dont follow how we can handle this case. Your source code should be under GOPATH/src but instead it is directly under GOPATH. Please follow the guidelines at https://golang.org/doc/code.html on how to structure your Go code.\nThe _  from the output of a go build command indicates the code being built is not under GOPATH/src\nIf you still the issue after moving your code under GOPATH/src, feel free to re-open this issue.. Can you share a screenshot and sample code that I can use to see this issue?. @nealot, @lggomez Does this happen only for variables from external packages or even from the current package?\n. Thanks for getting back @nealot and Happy Coding!. Can someone here share a small sample code where I can try and get a repro of this?. @antihax I tried your code on Windows. On ending the debug session using the stop button, debugging stops as expected.\nAll,\nWhats changed between 0.6.84 and 0.6.85 is the below:\n- In 0.6.84 when you stop the debugging session, we forcefully killed the debug process that was spawned for delve and all its children.\n- In 0.6.85 when you stop the debugging session, instead of the force kill, we send a detach request to delve. Delve then kills all processes. Once delve gets back to us saying that detach is complete, we (the Go extension) then request VS Code to disconnect which is when the debug tool bar goes away\nFrom the descriptions in this issue, it looks like the detach by delve is not getting completed. I have added a few more logs to the code to confirm this. Can folks here try the below?\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\n- Add \"trace\": \"verbose\" to your debug configuration in the launch.json file.\n- Try to repro the issue\nLook for \"HaltRequest\", \"DetachRequest\", \"DetachResponse\" and \"DisconnectRequest to parent\" in the logs and share what you find here.\n. @antihax We also send a Halt request before trying to Detach for which I forgot to add logs earlier. Can you try the instructions at https://github.com/Microsoft/vscode-go/issues/1814#issuecomment-409729999 again?. This shows that the halt request is not getting completed by delve. I still cant repro this, so not sure what the next steps would be\n@aarzilli any thoughts on why the Halt request made to delve would not complete and call the given callback?. @antihax I've updated the Go-latest.vsix to have the ability to configure the --log-output. Can you re-do the steps from https://github.com/Microsoft/vscode-go/issues/1814#issuecomment-409729999, add \"logOutput\": \"rpc\" to your debug configuration in launch.json file and the share the logs so that @aarzilli can take a look?. I am able to get logs after the HaltRequest\n\n@aarzilli I log the text HaltRequest just before sending the halt command to delve, as you can see in my screenshot above. In @antihax's case, delve doesn't return any logs after the attempt to halt. In my case, you can see the logs form delve after the attempt to halt\n@antihax Do you have the latest dlv? Can you update it just to be sure? You can run Go: Install/Update Tools and select dlv to update it.. @antihax And you are trying this with the sample code from https://github.com/Microsoft/vscode-go/issues/1814#issuecomment-409424205 correct? What's the version Go and VS Code you are using? And what OS?. @antihax I am able to repro your case if there are no breakpoints in the file. Can you try adding a breakpoint and then see if you are able to stop the debugging session properly?. > In @antihax logs I see that VSCode is sending a ListGoroutines request right after the continue command, that request is synchronous and can't be executed until continue terminates and will also block any other command from going through (including halt commands).\n@aarzilli That explains why the halt command never makes it through. Any reason why continue wouldn't terminate? \n@moitias Thanks for the detailed steps. The There is already a debug configuration running is related to the previous session not completing properly which is due to what @aarzilli mentioned above. > if the halt doesn't make it through it will never terminate on its own.\n@aarzilli You mean the program will not terminate on its own or the continue command? What is the suggested way to go about this for delve clients?. \nI'll look into that, thanks.. > Not sending requests while the target is running.\nThis doesn't seem trivial. There is no way way for the debug adapter to know if the target is still running.\nInstead, I have brought back the code to kill the process manually, but only if we don't hear back from the halt request made to delve or if the detach request fails. @moitias This will fix your issue as well.\nEveryone here, please try the below\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\n- Try and debug your code now. Thanks @aarzilli. I've included a check to not make the ListRoutines call if a previous continue request is pending. Regardless I'll keep the code to kill manually if halt doesnt return in time anyway. That should act as a catch all on other unforeseen issues.\nAll,\nIf you havent already, please update to the latest beta version by following the steps in https://github.com/Microsoft/vscode-go/issues/1814#issuecomment-411566434 and let me know if the issue has resolved for you.. The fix is now available in the latest update (0.6.86) to the Go extension.\nThanks everyone for your patience.. @Evasion Please add \"trace\": \"verbose\" to your debug configuration, share the output logs and a sample code that I can use to repro. @Evasion Please add \"trace\": \"verbose\" to your debug configuration, share the output logs and a sample code that I can use to repro. @Evasion, if you do see it again, please log a new issue. This thread is already long :). This is now available in the latest update (0.6.86) to the Go extension. This looks like https://github.com/mdempsky/gocode/issues/39 which was fixed a few days ago.\nCan you run Go: Install/Update Tools, select gocode to update it and try again?. @mmwtsn Looks like the error is coming from https://github.com/Microsoft/vscode-go/blob/0.6.84/src/debugAdapter/goDebug.ts#L597, which would mean that the launchArgs is not set.\n\nCan you share a small sample code which I can use to repro this?\nThe remote mode is used for remote debugging which needs a headless delve server to be already running. See Remote Debugging\nThe issue #1814 is now fixed, so feel free to upgrade to the latest version.. This extension depends on a lot of Go tools already to provide each of the editing, navigating, diagnostics and debugging features that is considered essential for developing in Golang. \n\nSome users are already wary on so many tools being installed when all they needed was some basic features. We are also seeing a gradual scope creep over the past year as this extension gets more popular and well meaning users have cool ideas such as yours to augment this extension.\nLong story short, I do believe this is a cool feature to have. There are other related feature requests on how we can leverage godoc to provide more information right in VS Code instead of moving context to the browser. See #789. I would suggest to have a separate extension that takes a dependency on this extension and can have all the godoc related features.. Though it does sound like a cool idea, this is very much out of the scope of this extension.\nThe outline view is a UI construct from VS Code. Extensions contribute data to it, but all the functionality is coming from VS Code itself. So if we want actionable buttons next to the items, then that part of the outline view should be made contributable. \nPlease go over the feature requests in VS Code for outline. One of them might be talking about exactly what you want or close to what you want. You can add your input in one of those issues. If you find none, then you can log a new feature request there.\n. - Does goreturns work when you manually format the file in VS Code i.e right-click -> Format Document?\n- Are there any errors in the console? Help -> Toggle Developer Tools -> Console\n- Can you try updating the tool? Run Go: Install/Update Tools, select goreturns to update\n. Glad that things worked out, Happy Coding!. Are you aware of any Go tools that can do this? The Go extension itself is not smart enough to figure out Go ASTs. It relies on a set of Go Tools to give rich language features.\n. Thanks for sharing that @ChrisHines!\nWe have the Go to implementation and Peek Implementation commands that uses the guru implements command. \n@covrom Can you try these commands?. I understand that this is a discovery problem.\nWe can add the below commands to the Go: Show All Commands. These are not really registered by the Go extension, but does implement them\n- Go to definition\n- Go to implementation\n- Go to symbol in file\n- Go to symbol in workspace\nPR is definitely welcome.\nCode pointers:\n- See Build & Debug extension\n- https://github.com/Microsoft/vscode-go/blob/0.6.89/src/goMain.ts#L357 is the place where we read the commands dynamically from the package.json. You will have to manually add entries for the above here.\n. Try passing editor.action.goToImplementation as command for vscode.commands.executeCommand, that should work.\nBut, we shouldnt add new commands that behind the scenes just calls another command. I was thinking of passing the existing commands for Go to Implementation, Go to symbol in file  etc to the quick pick control in https://github.com/Microsoft/vscode-go/blob/0.6.89/src/goMain.ts#L357 \n. This feature is now out in the latest update to the Go extension (0.6.92). Thanks @vimalk78!. We use the impl tool to provide this feature via the command Go: Generate Interface Stubs. What is missing is the user interface to select the interface from packages which should be straight forward to implement. PRs are welcome.\nCode pointers:\n- User interface for browsing packages: https://github.com/Microsoft/vscode-go/blob/master/src/goBrowsePackage.ts\n- Once the package is selected, you can use the go list command on it to get all the files\n- Once a file is selected you can use the go-outline tool to get the interfaces\n. We use godef for getting the definition location. Please try the godef tool from the command line and see if you get the desired result. If not, then log a bug at https://github.com/rogpeppe/godef\nAnother alternative is to add a setting \"go.docsTool\": \"gogetdoc\". This will use gogetdoc instead. If you dont see the result, then try using gogetdoc from the command line. If you still dont see the result, then log a bug at https://github.com/zmb3/gogetdoc\n. I did this and I was able to see the errors. I am on a Mac.\n\nWhat do you see the output channel?. > Changing the name seems dangerous though...\nWell... Changing the name, changes the extension id which can cause a lot of issues, so I dont believe we should be changing this.\nThanks for the effort though.. Completions as you type is disabled in comments by default. You can do one of 2 things\n- Hit Ctrl+Space manually to trigger the completion OR\n- Update the editor.quickSuggestions to allow the completions in comments.. This fix is now out in the latest update (0.6.86). What do you suggest we do instead?. Thanks for logging this issue @lmb and Thanks for the PR @rikkuness! Your fix is now available in the latest update (0.6.86) to the Go extension. I do believe this is a cool feature to have, although I dont believe this extension is the right place for it. \nAs VS Code and this extension has gained popularity, we have seen a gradual scope creep over the past year. Being a sole maintainer of this project, it is getting a little hard to support all incoming requests and maintaining the ever growing set of features. Therefore,one criteria I am using now in the triaging process is whether the feature request would make sense as a separate extension. This current feature request appears to be so.. @moitias Ignore this, I thought this issue needed a separate fix and so created it. . Fixes #1780. I have been pushing some fixes around debugging the past few days. Can you try the below?\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n- Reload VS Code\n- Try and debug your code now. Thanks for confirming.. I am not sure why there would be a permissions issue.\nCan you try adding the setting go.toolsGopath and provide a different path there and then run Go: Install/Update tools again? This will install the tools in the path you have provided for go.toolsGopath setting. Well, we intentional present the complete path so that it is clickable and the corresponding file opens in the editor on the right line number :)\n. There is no option to override it at the moment. \nThe output channel doesnt support relative links but the integrated terminal does.\nSo if we move to using tasks to run tests and then show the results in the terminal, then we can make do with the relative links. @haleyrc Can you give a small code sample where you see the issue so that I can take a look at what's causing it?. Interesting... I see it now.\nI believe this only happens when you are using the -v flag and then use the log pkg to print anything. \nThe fix should be pretty straight-forward.  We shouldnt be attempting to get the absolute path on an output line unless it is for a test failure. Such lines are always preceeded by a --- FAIL:, so we can make use of that.\nPRs are most welcome to fix this issue.\nCode Pointers:\n- Set up local dev environment for the Go extension\n- processTestResultLine is the function called on each line of the test output. And so the fix needs to go there.\n. Go ahead @MagnumOpus21 :)\nRemember to test all the 4 test commands:\n- Test at cursor\n- Test file\n- Test package\n- Test workspace. The integrated terminal is not aware of any extensions. So I am sure this would happen even if you uninstall this extension.\nLooks like the PATH variable is different in the 2 cases. Can you run echo %PATH% in the integrated terminal and see if C:\\Go\\bin is part of it?\nAlso run process.env['GOPATH'] in the console and check if C:\\Go\\bin is part of it. You can get to the console by Help -> Toggle Developer Tools -> Console. Sorry, my instructions were wrong for the last step. Look for process.env['PATH'] not process.env['GOPATH']\nYes, its indeed weird that the 2 paths are different. Can you do a diff between both and see if there are more things missing in the path from the integrated terminal?\nAlso, can you try running from code from your system cmd and see if it changes anything? Just run code. It could be that you set C:\\Go\\bin in your PATH after launching VS Code, so it could not get the updated env var. Windows usually needs a restart I guess for the updated env vars to apply to other applications.. From @LiPengfei19820619\n@ramya-rao-a I tried your instructions, This is what I got. Could you please give me some advice? thx.\n\n\nI Closed all gocode processes with gocode close:\n\n\n\nRun gocode -s -debug\n\n\n\nuse vscode and try for completions\n  the gocode output:\n`C:\\Users\\lpf>gocode -s -debug\n2018/08/06 22:06:11 Got autocompletion request for 'd:\\golang\\code\\src\\chykj\\collect-webapi\\infrastructure\\persistence\\path_plan_repo_pg.go'\n2018/08/06 22:06:11 Cursor at: 2658\n2018/08/06 22:06:11 -------------------------------------------------------\npackage persistence\n\n\nimport (\n        \"chykj/collect-webapi/domain/path_plan\"\n        \"database/sql\"\n        \"errors\"\n        \"log\"\n        \"strconv\"\n)\n// PathPlanRepositoryPG \u8def\u5f84\u89c4\u5212repository\u7684postgresql\u5b9e\u73b0\ntype PathPlanRepositoryPG struct {\n        db *sql.DB\n}\n// NewPathPlanRepositoryPG \u521b\u5efa\u8def\u5f84\u89c4\u5212repository\u7684pg\u5b9e\u73b0\nfunc NewPathPlanRepositoryPG(db sql.DB) PathPlanRepositoryPG {\n        return &PathPlanRepositoryPG{db: db}\n}\n// GetAllPoints \u52a0\u8f7d\u6240\u6709\u7684\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r PathPlanRepositoryPG) GetAllPoints() []path_plan.Point {\n        points := make([]*path_plan.Point, 0)\n    rows, err := r.db.Query(\"SELECT id,type,stationid,position_x,position_y FROM r_path_plan_point\")\n    if err != nil {\n            return points\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n            var point path_plan.Point\n            var id int\n\n            err = rows.Scan(&id, &point.Type, &point.StationID, &point.PositionX, &point.PositionY)\n            if err != nil {\n                    return points\n            }\n            point.ID = strconv.Itoa(id)\n\n            points = append(points, &point)\n    }\n\n    return points\n\n}\n// GetPointByID \u6839\u636eID\u52a0\u8f7d\u4eba\u5458\u4fe1\u606f\nfunc (r PathPlanRepositoryPG) GetPointByID(id string) (path_plan.Point, error) {\n        var point path_plan.Point\n    rows, err := r.db.Query(\"SELECT id,type,stationid,position_x,position_y FROM r_path_plan_point WHERE id=$1\", id)\n    if err != nil {\n            return nil, err\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n            err = rows.Scan(&point.ID, &point.Type, &point.StationID, &point.PositionX, &point.PositionY)\n            if err != nil {\n                    return nil, err\n            }\n\n            return &point, nil\n    }\n\n    return nil, errors.New(\"Path Plan Point Not Found By ID\")\n\n}\n// AddPoint \u589e\u52a0\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r PathPlanRepositoryPG) AddPoint(point path_plan.Point) error {\n        if point.StationID != \"\" {\n                return r.db.QueryRow(INSERT INTO r_path_plan_point(type,stationid,position_x,position_y) VALUES($1,$2,$3,$4) RETURNING id,\n                        point.Type, point.StationID, point.PositionX, point.PositionY).Scan(&point.ID)\n        } else {\n                return r.db.QueryRow(INSERT INTO r_path_plan_point(type,stationid,position_x,position_y) VALUES($1,$2,$3,$4) RETURNING id,\n                        point.Type, point.StationID, point.PositionX, point.PositionY).Scan(&point.ID)\n        }\n}\n// UpdatePoint \u66f4\u65b0\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r PathPlanRepositoryPG) UpdatePoint(point path_plan.Point) error {\n        _, err := r.db.Exec(UPDATE r_path_plan_point SET type=$2,stationid=$3,position_x=$4,position_y=$5 WHERE id=$1,\n                point.ID, point.Type, point.StationID, point.PositionX, point.PositionY)\n    return err\n\n}\n// DeletePoint \u5220\u9664\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r *PathPlanRepositoryPG) DeletePoint(id string) error {\n        log.Println(\"delete point, id: \", id)\n        _, err := r.db.Exec(DELETE FROM r_path_plan_point WHERE id=$1, id)\nl#\n        return err\n}\n2018/08/06 22:06:11 -------------------------------------------------------\n2018/08/06 22:06:11 Elapsed duration: 39.0022ms\n2018/08/06 22:06:11 Offset: 0\n2018/08/06 22:06:11 Number of candidates found: 2\n2018/08/06 22:06:11 Candidates are:\n2018/08/06 22:06:11   func len(v Type) int\n2018/08/06 22:06:11   package log\n2018/08/06 22:06:11 =======================================================\n2018/08/06 22:06:15 Got autocompletion request for 'd:\\golang\\code\\src\\chykj\\collect-webapi\\infrastructure\\persistence\\path_plan_repo_pg.go'\n2018/08/06 22:06:15 Cursor at: 2661\n2018/08/06 22:06:15 -------------------------------------------------------\npackage persistence\nimport (\n        \"chykj/collect-webapi/domain/path_plan\"\n        \"database/sql\"\n        \"errors\"\n        \"log\"\n        \"strconv\"\n)\n// PathPlanRepositoryPG \u8def\u5f84\u89c4\u5212repository\u7684postgresql\u5b9e\u73b0\ntype PathPlanRepositoryPG struct {\n        db *sql.DB\n}\n// NewPathPlanRepositoryPG \u521b\u5efa\u8def\u5f84\u89c4\u5212repository\u7684pg\u5b9e\u73b0\nfunc NewPathPlanRepositoryPG(db sql.DB) PathPlanRepositoryPG {\n        return &PathPlanRepositoryPG{db: db}\n}\n// GetAllPoints \u52a0\u8f7d\u6240\u6709\u7684\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r PathPlanRepositoryPG) GetAllPoints() []path_plan.Point {\n        points := make([]*path_plan.Point, 0)\n    rows, err := r.db.Query(\"SELECT id,type,stationid,position_x,position_y FROM r_path_plan_point\")\n    if err != nil {\n            return points\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n            var point path_plan.Point\n            var id int\n\n            err = rows.Scan(&id, &point.Type, &point.StationID, &point.PositionX, &point.PositionY)\n            if err != nil {\n                    return points\n            }\n            point.ID = strconv.Itoa(id)\n\n            points = append(points, &point)\n    }\n\n    return points\n\n}\n// GetPointByID \u6839\u636eID\u52a0\u8f7d\u4eba\u5458\u4fe1\u606f\nfunc (r PathPlanRepositoryPG) GetPointByID(id string) (path_plan.Point, error) {\n        var point path_plan.Point\n    rows, err := r.db.Query(\"SELECT id,type,stationid,position_x,position_y FROM r_path_plan_point WHERE id=$1\", id)\n    if err != nil {\n            return nil, err\n    }\n    defer rows.Close()\n\n    for rows.Next() {\n            err = rows.Scan(&point.ID, &point.Type, &point.StationID, &point.PositionX, &point.PositionY)\n            if err != nil {\n                    return nil, err\n            }\n\n            return &point, nil\n    }\n\n    return nil, errors.New(\"Path Plan Point Not Found By ID\")\n\n}\n// AddPoint \u589e\u52a0\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r PathPlanRepositoryPG) AddPoint(point path_plan.Point) error {\n        if point.StationID != \"\" {\n                return r.db.QueryRow(INSERT INTO r_path_plan_point(type,stationid,position_x,position_y) VALUES($1,$2,$3,$4) RETURNING id,\n                        point.Type, point.StationID, point.PositionX, point.PositionY).Scan(&point.ID)\n        } else {\n                return r.db.QueryRow(INSERT INTO r_path_plan_point(type,stationid,position_x,position_y) VALUES($1,$2,$3,$4) RETURNING id,\n                        point.Type, point.StationID, point.PositionX, point.PositionY).Scan(&point.ID)\n        }\n}\n// UpdatePoint \u66f4\u65b0\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r PathPlanRepositoryPG) UpdatePoint(point path_plan.Point) error {\n        _, err := r.db.Exec(UPDATE r_path_plan_point SET type=$2,stationid=$3,position_x=$4,position_y=$5 WHERE id=$1,\n                point.ID, point.Type, point.StationID, point.PositionX, point.PositionY)\n    return err\n\n}\n// DeletePoint \u5220\u9664\u8def\u5f84\u89c4\u5212\u70b9\nfunc (r PathPlanRepositoryPG) DeletePoint(id string) error {\n        log.Println(\"delete point, id: \", id)\n        _, err := r.db.Exec(DELETE FROM r_path_plan_point WHERE id=$1, id)\nlog.#\n        return err\n}\n2018/08/06 22:06:15 -------------------------------------------------------\n2018/08/06 22:06:15 Error parsing input file (outer block):\n2018/08/06 22:06:15  d:\\golang\\code\\src\\chykj\\collect-webapi\\infrastructure\\persistence\\path_plan_repo_pg.go:92:5: expected selector or type assertio\n, found ';'\n2018/08/06 22:06:15  d:\\golang\\code\\src\\chykj\\collect-webapi\\infrastructure\\persistence\\path_plan_repo_pg.go:93:2: expected ';', found 'return'\n2018/08/06 22:06:15 Elapsed duration: 38.0022ms\n2018/08/06 22:06:15 Offset: 0\n2018/08/06 22:06:15 Number of candidates found: 24\n2018/08/06 22:06:15 Candidates are:\n2018/08/06 22:06:15   const LUTC untyped int\n2018/08/06 22:06:15   const Ldate untyped int\n2018/08/06 22:06:15   const Llongfile untyped int\n2018/08/06 22:06:15   const Lmicroseconds untyped int\n2018/08/06 22:06:15   const Lshortfile untyped int\n2018/08/06 22:06:15   const LstdFlags untyped int\n2018/08/06 22:06:15   const Ltime untyped int\n2018/08/06 22:06:15   func Fatal(v ...interface{})\n2018/08/06 22:06:15   func Fatalf(format string, v ...interface{})\n2018/08/06 22:06:15   func Fatalln(v ...interface{})\n2018/08/06 22:06:15   func Flags() int\n2018/08/06 22:06:15   func New(out io.Writer, prefix string, flag int) log.Logger\n2018/08/06 22:06:15   func Output(calldepth int, s string) error\n2018/08/06 22:06:15   func Panic(v ...interface{})\n2018/08/06 22:06:15   func Panicf(format string, v ...interface{})\n2018/08/06 22:06:15   func Panicln(v ...interface{})\n2018/08/06 22:06:15   func Prefix() string\n2018/08/06 22:06:15   func Print(v ...interface{})\n2018/08/06 22:06:15   func Printf(format string, v ...interface{})\n2018/08/06 22:06:15   func Println(v ...interface{})\n2018/08/06 22:06:15   func SetFlags(flag int)\n2018/08/06 22:06:15   func SetOutput(w io.Writer)\n2018/08/06 22:06:15   func SetPrefix(prefix string)\n2018/08/06 22:06:15   type Logger struct\n2018/08/06 22:06:15 =======================================================\n`\n@ramya-rao-a \nI found the gocode run in client mode by vscode are not closed, so there are more and more gocode processes every time I input \"log.\":\n\n. @LiPengfei19820619 As per the output you have shared gocode is acting as expected. Looks like when VS Code calls it, it never returns anything and the process never closes. Please follow the steps in Building and Debugging the extension to have a local set up of the extension running. Add breakpoints at https://github.com/Microsoft/vscode-go/blob/0.6.85/src/goSuggest.ts#L163, https://github.com/Microsoft/vscode-go/blob/0.6.85/src/goSuggest.ts#L167 and https://github.com/Microsoft/vscode-go/blob/0.6.85/src/goSuggest.ts#L175 and see if the process that is spawned of gocode ever returns any data.\n. From @LiPengfei19820619 \n@ramya-rao-a  This is my debugging process, Would you please give me a hand, thanks.\n\n\n\n\n\n\n\n\n\n. @LiPengfei19820619 Your breakpoints are off by 1 at almost all places.\nPlease add them in the line AFTER p.on('close' and p.on('error'\nKeep stepping inside the callback for p.on('close' and see what results you are getting. @LiPengfei19820619 Can you kill any currently running gocode process and try again?. Closing this issue as we haven't heard back from @LiPengfei19820619 in a while. This is now available in the latest update (0.6.86) to the Go extension.. Please see https://github.com/Microsoft/vscode-go/issues/1814#issuecomment-411920595\nI'll be releasing an update in a day or two.\nThanks for your patience.. The fix is now available in the latest update (0.6.86) to the Go extension. @jeffbean So sorry, somehow this got lost in the sea of notifications.\nPassing the uri from goMain will error out when the commands are run in the absence of active text editor.\nI have pushed a commit to fix that, please take a look and try out the new flags\n. @jeffbean I pushed another commit for the case when the flags in the configuration are any of the ones we add anyway.\nAlso updated the name of the setting, can you take another look?. Thanks!. When you say you'd like to test your code on save, are you referring to the linter and syntax checks or actual tests that are run?. I would suggest the below:\n- Add the tag !fastRunning on the files that have the integration tests\n- Add \"go.testFlags\": [\"-tags\", \"fastRunning\"] to your settings\nAt this point, linter and syntax checks will run on all files, test on save will not run on the integration tests.\nSet up a test task to run just all tests. Tasks have no knowledge of the go extension and so no knowldge of its settings.\n- Run command Tasks: Configure Task -> Create tasks.json file from template -> Choose \"Others\" from the template options\n- Update the command to go test <your package name>. \n- Run command Tasks: Run Task and then choose your task to run all the tests on demand.\nSee https://code.visualstudio.com/Docs/editor/tasks to learn more about tasks. Oh wait, my bad. The go.testFlags get used when compiling so you wont get the syntax checks. This is because go test is used to compile test files and go build is used to compile non test files.\nYou can use a small variation of the above.\n\nAdd the integration tag like you first described\nHave the task run the build and/or run tests using the tag\n\nYou can now run the task on demand every once in a while to get feedback on errors or to run the tests themselves\n. Adding proper support is definitely not off the table, I was just brainstorming ideas before we get there. We can definitely add a new setting called go.testTags to be used for when we run the tests and not for when compile them. Would that serve this scenario?\n. I would very much appreciate a PR :) Below are some code pointers:\n- Build and Debug extension is our wiki on steps for setting up a local dev environment\n- https://github.com/Microsoft/vscode-go/blob/0.6.86/src/testUtils.ts#L156 is the function that is called when running tests.\n- You need to add the new setting to the package.json file. No worries, take your time.. Yes, this can be considered as closed. \nFor people who want to try this, you can use the beta version of this extension until we release an update.. The new go.testTags setting is now available for use in the latest update to this extension (0.6.90). I havent worked with goroutines before. Can you provide a code sample and repro steps?\n@lggomez Have you seen something like this?. @viggyprabhu We havent heard back from you on the possibly reduced repro code. Also, we have had a lot improvements to the debugging side of things in the extension in the past 6 months. \nClosing this issue. If you still see this problem, please log a new issue with a sample code. - Do you see any errors in the console? Help -> Toggle Developer Tools -> Console ?\n- Does running tests manually work? Try running Go: Test File from the command pallet\n- @benweissmann Do you also see this working as expected in 1.25 like @pierrre ?\n. @nboughton I've created a new issue for your case. See #1850\n. @pierrre \n\nI see the same error message in the developer console.\n\nDo you mean the error about uv_os_get_passwd. If yes, then please follow https://github.com/Microsoft/vscode-go/issues/1850#issuecomment-413219344 to get the fix for that\n\nNo tests found. Current file is not a test file.\n\nFor Go: Test File or Go: Test Function At Cursor, a test file should be open in the active editor. Can you open a test file and click on one of the \"run test\" codelens? . That's good to know, thanks!. I am assuming you are on the latest version of VS Code (1.26.0). If so, an upstream issue https://github.com/Microsoft/vscode/issues/56301 is being tracked for this in the VS Code repo. \nThis is most likely related to an issue with electron throwing SIGPIPE error when passing stdin to a badly spawned process. \nPlease run Go: Install/Update Tools and update all the Go tools. Follow this up with closing all instances of VS Code and restarting.\n. So the upstream electron issue occurs when we try to spawn a process using a command that is not found and then pipe stdin.\nPreviously this would have resulted in a ENOENT which we catch and show an appropriate msg.\nI have pushed a fix to try and catch such a case earlier.\nThe only place we use spawn and stdin is during formatting and providing auto-completions. The former handled the case of missing command well and the latter didn't for which I pushed a fix.\nWith the below fix, you should see a prompt for installing gocode instead of the SIGPIPE error. Go through with the prompt and install the tool and you should get your completions back.\nPlease try the below and let me know if it fixes the issue\n\nClose all instances of VS Code\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\n\n. @juliofarah Can you run Go: Install/Update Tools and install all the tools and retry?. @mgitkin-vz Can you try to run Go: Install/Update Tools to ensure you have all the tools in the right place and see if you still see the issue?\n. @calvn @mgitkin-vz \n- Can you consistently repro on file save?\n- The upstream electron issue may effect other extensions as well. Can you disable other extensions you might have installed other than Go and try?\n- Do the logs (Help -> Toggle Developer Tools -> Console) have any other helpful information?. @calvn The first error about 'map' of undefined would have shown up when updating the tools right? Then how did you ensure all tools were updated?\nCan you turn off the build, test, vet on save feature but not the lint,format on save feature and see if you still get the issue?\nI am trying to narrow down which feature is actually causing this. If Go: Install/Update Tools was successful, then this issue should not be appearing at all as all required tools will be where they are expected to be. @calvn To disable the features, go to your settings (Ctrl+,), look for go.buildOnSave, go.vetOnSave and go.testOnSave and turn them off.\n@mgitkin-vz Please keep an eye out if you see it now after fully quitting VS Code. @mgitkin-vz I believe all the errors in that log related to \"expected this, got that\" is from formatting.\n@mgitkin-vz @calvn Can you disable the format on save feature and try again? Add the below setting\n\"[go]\": {\n    \"editor.formatOnSave\": false\n}. @calvn I see that you are on gophers slack, can you log in there and we can continue the investigation there? it would be much faster.. @lizebang @xuefeng-huang Did you run Go: Install/Update Tools and updated all the Go tools? Follow this up with closing all instances of VS Code and restarting.. Thanks @mgitkin-vz, @lizebang, @gpomykala for confirming the fix.\n@xuefeng-huang, @calvn, @iotdog Let me know if the fix (updating all tools -> close all vscode windows -> restart) works for you as well.. Alright then I'll close this issue.\nThanks everyone for verifying the fix.. We do show completions for symbols from unimported packages, but we need you to type the package name first.\nWe show completes for unimported pacakges names themselves if you add \"go.autocompleteUnimportedPackages\": true to your settings.\nBut typing a symbol name and then showing all matches with packages is not something we can do given the constraints of the Go tools we use.\nBut an alternative is the Workspace symbol search. Run the command Go to Symbol in Workspace or Ctr+# or Cmd+# you should be able to type just the symbol name (without package name) and the search will give you the same results as you've shown above.\nIf you want to include std lib in such searches, add \"go.gotoSymbol.includeGoroot\": true to your setting. One way we can do this is to include workspace symbol search in the completion results. It may have some perf issues, but is definitely do-able.\nPRs are welcome if anybody wants to give this a try.. @RokkerRuslan Is the scenario here that you know the symbol name but dont know the package name or that you just dont want to type the package name?. - Do you see the code coverage when you run the command Go: Toggle Test Coverage In Current Package \n- The output channel for Go tests will have output for all the test runs. Can you share the output from there when you run the tests?. From the output, we can see that the coverage was calculated successfully.\nCan you open that file where the coverprofile is stored and share the results?. > I suspect this is because Go's code coverage output always uses forward slashes but Visual Studio Code uses backslashes for file paths on Windows.\n@BenLubar But I see backward slashes in the coverage output on my Windows machines.\n@amsokol is using Go 1.11. What version are you using?\nI am using 1.9. @amsokol, @BenLubar I have pushed a fix to the master branch. Can you try it out and let me know if it works for you as well? To try the fix, just follow the instructions at https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension . cc @bcmills\nThe file produced bygo test -coverprofile in Windows in go 1.11 has forward slashes instead of backward slashes as in the previous versions of go. @BenLubar I've pushed another fix, can you try \nhttps://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension again?. Isnt this a tooling problem? We use tools like godef, gogetdoc, guru, gorename etc for the features that you have mentioned. If they do not work with such files, they would have a good reason to. I wouldnt want to be making assumptions and overriding the tool behavior.. How are we to identify the files for which GOOS should be changed? Is it based on the file names? Is that a standard or something only https://github.com/kardianos/service uses?. Cool! I knew about build constraints when used as build tags, but wasnt aware of file names having a part to play as well.\nOk, so in this case, do we need to make the change for only the tools that take the -tags parameter or just all Go tools in general?. Ok, then we can do the below:\n\nUpdate the go.toolEnvVars to take an optional param say currentFileName\nWhen this parameter is passed, we parse the file name and add the additional env vars\nThen, we do a case by case pass on all usages of the go.toolEnvVars and pass the right value for the new param\n\nPRs are welcome. \n- Build and Debug extension has steps on getting started.\n- getToolEnvVars is defined at https://github.com/Microsoft/vscode-go/blob/0.6.87/src/util.ts#L364. @nboughton I've pushed a fix to master, can you try the below?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. The fix for this issue is out in the latest update (0.6.88) to the Go extension.. The SIGPIPE issue is being covered in #1845 and is not related to the breadcrumbs\n\n@majidfn @adambkaplan Please try the below:\n- Update to the latest version of the Go extension (0.6.88)\n- Run Go: Install/Update Tools to ensure all dependent Go tools are installed \n- Close all instances of VS Code\n- Open VS Code. The event that is fired on content change has details on the actual change including the range and the text. And so it is possible for us to check if the content being changed/added is part of a line comment.\nPRs are welcome. Code Pointers:\n- Build and Debug Extension to get started\n- The removeCodeCoverage that receives the content change event. @lggomez Catering just to whitespace and newlines doesnt help much. A whitespace or a newline is almost always followed by some text.\nHow about checking if the content being changed/added is part of a line comment?. Displaying global variables is not supported at the moment, but this should be do-able\nDelve supports listing of global variables across all packages. We can provide the current package name in a regex and should be able to get the global variables.. @Sai-Venky I have the changes required for this feature in a branch. Can you try it out and give some feedback on how it works?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix or code-insiders --install-extension Go-latest.vsix based on whether you are using Stable or the Insiders\nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\nThe version of the Go extension should show as 0.6.89-beta.1. cc @lggomez . Thanks for bringing this up. I wasnt aware of the progress in the language server for Windows.\nThere are still a few things missing, see https://github.com/sourcegraph/go-langserver/issues/113#issuecomment-414876125\n\n. Language Server is now available for use in Windows. Use the latest version of this extension (0.7.0). I don't believe 1.26 has anything to do with this. Can you check with 1.25?. > I faced the same issue. I went back to 1.25.1. The problem is fixed\nWe had an electron update in 1.26. That might change how the spawned processes behave in certain conditions. No solutions in mind yet. Will have to keep digging\n. @napalm684 Can you also check if going back to 1.25.1 also solves the issue? Check that you are using the same version of the Go extension and the same Go code base to test in both versions of VS Code. This will help in narrowing down whether the issue is with the latest update to VS Code or the Go extension. Thanks @napalm684. Can you also share what OS you are on?. Can you try the latest Insiders ?. I would suggest to disable the codelens for references if these perf issues with guru are seen.\nNow that we have the Go team working on a language server, using that in the future should resolve the perf issues we have with using guru. We use godef for this feature and it doesnt support the use of build tags.\ngogetdoc on the other hand does support build tags.\nAdd \"go.docsTool\": \"gogetdoc\" in your settings. This is intentional. Since we want \"tab\" key to move through the snippet and not accept suggestions in snippet mode, suggestions are disabled by default in snippet mode.\nTo fix this, please disable the setting \"editor.suggest.snippetsPreventQuickSuggestions\". I am not aware of what conditional dependencies are. Can you provide a small code sample that I can try this on?\n\nWould it make sense to add a new buildOnSave option (or similar) to identify the applicable root folder of your project, and then only build packages outside of that when referenced from the code?\n\nIf there is already a root folder you know that you want to build packages from, why not open just that in VS Code instead of its ancestor?. I see the errors you are talking about.\nThe one alternative I thought of was to use go build ./.... But that doesnt fare better either. I get the same error.\nI would say that the go build tool should be smart enough to skip the conditional dependencies.\nThere isnt much we can do from the editor's perspective.\nIf you have any ideas, we can look into it, else I would close this issue.. > Based on this, I think one solution might be to be able to set the entrypoint file(s) for the tool to build\nDoesnt the default value for buildOnSave which is package do just that? It builds the package to which the current file you are editing belongs to.\nIs it a common scenario that a file in one package is being edited, but you dont want to build that package and want to build another package? \n. In that case, I would suggest to use tasks\nYou can have a tasks.json file for each project where you can specify a command to run a particular file. If set as a build task, then there is a keyboard shortcut to invoke it.\n. The build/format on save features in the Go extension are tied to the file save event fired by VS Code. These events are not fired when saving a file with no changes.\nWhen there are no changes in a file and you want to run build/format on it, then there are commands for it.\nUse Go: Build Current Package to build and Format Document to format.\nYou can also use the Format Document command from the context menu on the editor. (Right click -> Format Document)\n. There are a lot of tasks that listen to the file save event. Both in core VS Code and all the extensions. Not triggering the event when there are no file changes is by design to save the unnecessary reactions. It also saves all the listeners from making the check themselves on whether the file has changes or not.\nIf you feel running a command from the command pallet is tedious, then you can bind a keyboard shortcut for it. The format command already has a keyboard shortcut.\nOr you can just add a whitespace and then hit save.. \nGoing through the scenarios in your initial description, the feature request here is to have the build and formatting run on a file when you open it. The fact that we do this on file save and thus you tried to save the file is a way around the initial requirement of having build/format run on demand on a file.\n118 tracks exactly this. But since there are issues trying to implement that, the next best alternatives are commands that can be run anytime on demand\n. From @jrieken on August 21, 2018 15:46\nSeems to be a problem with the go extension not providing elements . @harikb I am able to see the breadcrumbs in both files\n\nAm I missing anything in my example?. Ah! I see it now.\nIn this case, the language server doesnt return any symbols for the file.\nYou can try Ctrl+Shift+o (use cmd on mac instead) and you will see that there are no symbols for the file\nI have logged an upstream issue: https://github.com/sourcegraph/go-langserver/issues/311\nYou can subscribe to the above issue. Once fixed, just update your language server and you should see the fix.\nThanks for reporting!\n. The remote scenario would need us to map the remote file to local file and then use the local file to determine the package name/import path. I didn't want to include that in the first go as I didn't have the time to test it out.\nGood point about initdone. I'll update accordingly.\n. Ok, I've updated the PR to support remote paths as well.\n@lggomez Could you give it a try?. By default we use godef and godoc tools to find the definition of a symbol and docs respectively to show the information you see on hover. What you see is all these tools provide, so please log an issue in the repo for godef/godoc\nYou can try adding \"go.docsTool\":\"gogetdoc\" to your settings and reloading the window. You will then be using gogetdoc which might show results that you prefer. I've updated the code to append a number to the end of the filename to ensure 2 parallel builds dont access the same file. Can you try it out and and see if it fixes the issue for you?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix or code-insiders --install-extension Go-latest.vsix based on whether you are using Stable or the Insiders\nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code\nThe version of the Go extension should show as 0.6.89-beta.2. Hey @EmpireJones,\n\nApologies for taking so long to get to this issue.\nBelow are the reasons we chose not to use the status bar for the on save operation:\n- Build is not the only thing that runs on save. We have lint and vet as well. Showing 3 status bar items is not a good idea\n- Showing a single one that says something like \"On Save operations running...\" might work, but it would keep appearing and disappearing especially for users who have enabled the auto save feature, which can be distracting.\nThe one case where this can be useful is for long running build/lint/vet operations on save.\nCurrently, we use the Output channel to show the results of these processes, but it only shows up after the process completes.\nWe can update this to print a line that indicates the start of the process as well, so that users would know that the build process has started and continue to monitor the channel for completion.\nI have pushed a commit to do exactly that. This will ship in our next update.\n. The latest beta version of this extension will now log the starting of the build/vet/lint process in the output channel as well. What are the contents of your file?. I have logged an upstream issue for this, see https://github.com/mdempsky/gocode/issues/38\nIf they dont respond soon enough, we can look into implementing this ourselves.\nWe already have the list of packages, only thing to do is to determine that we are inside the import block. Some history:\nThis feature used to work before when we were using nsf/gocode which doesnt work well with Go 1.10 and above. Therefore we moved it use its fork, mdempsky/gocode which doesnt have this feature. - What anti-virus scanner did you use?\n- How were you installing the extension? From the marketplace in the browser? Marketplace in VS Code? Or via the vsix?. - Do you see the same when downloading other extensions?\n- Are you downloading directly from the marketplace website or VS Code?. That same dependency (tar) is used in another extension called vetur by Pine Wu. Can you try downloading that and see if you get the same error?\n. Turns out that was only a dev dependency, I have pushed a fix. Can you try the below:\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix \nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\nReload VS Code. @leidegre This is due to our move from using nsf/gocode to its fork mdempsky/gocode as the former had issues with go 1.10 and above and the maintainer has no plans at present to fix them.\n\nDo you see issues for symbols from external packages or even for the current package and packages form the std library?\nEnsure that all the dependent packages in your current package are built. If you havent disabled the build on save feature, then a simple dummy change followed by file save should do it. Else, run Go: Build Current Package.. Try this:\n- Close all VS Code instances\n- Kill any running gocode process\n- Remove the gocode binary from your $GOPATH/bin and the corresponding code form $GOPATH/src/github.com/nsf/gocode or $GOPATH/src/github.com/mdempsky/gocode\n- If you added the go.toolsGopath setting, then use that instead of the $GOPATH above\n- Open VS Code, run Go: Install/Update Tools, select gocode to install it\n- Ensure that you haven't disabled the go.installDependenciesWhenBuilding setting\n- Ensure all dependencies are built by running Go: Build Current Package (It uses the go build -i so all dependencies will be built and installed)\n- Now try the completions\n. Well, if it is the extra / or \\ in the end that is causing this, then its definitely a bug and we should fix this.\n@freman I tried with the extra / in the go.gopath setting on my mac, and I am getting the completions just fine\n@leidegre I am away from my Windows machine for the next few days, so I won't be able to figure out the fix just yet. But if you are interested, debugging the Go extension is very easy and you can give it a try.\nFor set up read https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code#building-and-debugging-the-extension\nAll completion related code is in the goSuggest.ts file. You can add a breakpoint there to start. @leidegre No problem. Just one question though. You can consistently repro this issue by adding a training \\ in the end of the gopath in the settings correct?. We use gocode to provide completions and this tool along with many others do not yet have module support. \n1532 is tracking the general module support\nYou can try https://github.com/Microsoft/vscode-go/issues/1532#issuecomment-419766453 which is one of the proposed solutions for gocode\n. Can you try adding the setting \"go.installDependenciesWhenBuilding\": false. See #1464 for another case where the build process had permission issues. - If there are any running process for gocode, close them\n- Run gocode -s -debug in a terminal and try for intellisense in VS Code. Results from gocode will show up in the terminal. \nIf the results from gocode show zero candidates, then the issue is with gocode. - What do you get when you run Go: Current GOPATH ?\n- Are you using the new modules feature in Go 1.11?. @eternal-flame-AD You still didn't mention if you were using the new modules feature or not :)\n@coreyog What about you? Are you using modules?. @coreyog And you are able to get out of the initial error reporting by VS Code like @eternal-flame-AD ?\nCan you check your $GOROOT/pkg? Do you have a folder there for wasm? Does that have the package for syscall?. @eternal-flame-AD @coreyog If you don't have syscall/js under $GOROOT/pkg/js_wasm, then can you run go install syscall/js after setting the GOOS and GOARCH as env vars and try again?. @eternal-flame-AD Ensure GOOS and GOARCH are js, wasm and retry \nhttps://github.com/Microsoft/vscode-go/issues/1874#issuecomment-420107114\nDo you see zero candidates still?. @eternal-flame-AD Last question. You have set GOOS and GOARCH to js and wasm in the toolsEnvVars setting right?\n\"go.toolsEnvVars\": {\n    \"GOOS\": \"js\",\n    \"GOARCH\": \"wasm\"\n  }. That's a great find @eternal-flame-AD!\nThe commit behind that change is https://github.com/Microsoft/vscode-go/commit/f73f41df14cf0bb9658e7bd87463a81bdef84a50 which was made as part of the PR #156 to fix the issue #140\n@stamblerre Any idea if the comment in the above commit still holds true?\n@eternal-flame-AD Can you try cross-compiling with say linux and see if your fix still works?\n. Thanks @stamblerre!\n@eternal-flame-AD Would you be interested in submitting a PR to fix this?. Including the -source flag slows things down a lot.\nAre you saying that if you add the source flag, you dont have to run go install on the packages for which you want completions?. The fix for this issue is now out in the latest update to the Go extension (0.6.92). Thanks @eternal-flame-AD and @stamblerre!\nNote: Part of the fix here is in gocode. Therefore, run the command Go: Install/Update Tools, select gocode and press Ok to update it. I was meaning to set v2 as default for a while now, but was waiting to have an update which didnt have any other debug related changes, so that if there were any issues I could narrow it down to the version change.\nNow is a good time, I'll make the change. In the latest update to this extension (0.6.90), we use v2 by default. useApiv1 is replaced with apiVersion. The testTags are to be used when running the tests. The unit tests are using the check function that is used to only compile the files and not run tests. Therefore, the check method will only use the build tags and will never use the test tags.\nThat's the reason for the failures. No problem, take your time.. > Ehm, getting weird errors Expected 3 arguments, but got 2.\nMerge from the master branch to fix that.\n. > and remove the useCase we are looking to create; where you wanted tests to run without any tags but let it build the files with some tags.\nWe had a similar case with the go.testFlags setting. We ended up supported null as a valid value. See below:\n\n. @johan-lejdung A release should be some time next week. Until then, you can use the beta version of the extension to use this feature. See https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension\nThanks for working on this!. Are you using go.mod?. @andrewrynhard Are you using go.mod?. @andrewrynhard In that case, can you add a note in #1532 about this issue and how GO111MODULE fixes it?\n@Zheaoli Since the error messages do mention modules, I am sure you are using them as well.\nTry the solution by @andrewrynhard in \nhttps://github.com/andrewrynhard. When you were running 1.10 without setting explicit gopath, did you have go.inferGopath enabled?. Yes, it should just work :)\n\nIn the integrated terminal in VS Code, can you check the value of the GOPATH env variable?\nRemove the explicit setting of GOPATH in the settings and run Go: Current GOPATH. Do you get the expected value?. interesting... looks like there is a race condition somewhere...\n\nWhen no gopath is defined as an environment variable or in the settings and you havent set go.infergopath, then we run go env GOPATH to get the gopath \nCan you run go env GOPATH in the terminal and share what you get?. @wayneashleyberry There are 2 different issues going on here.\n\nUnable to install/update the tools with go: cannot find GOROOT directory error\n\nThis is related to GOROOT and not GOPATH. In the logs, you can see the msg: Installing 16 tools at /Users/wayneberry/go/bin. That path is your GOPATH which means the GOPATH was determined successfully.\nhttps://github.com/golang/go/issues/21271 talks about this happening if GOROOT env variable was not explicitly set. Can you run echo $GOROOT in the integrated terminal and see you've set this? Did you ever change the go.goroot setting?\n\nThe command Go: Current GOPATH providing the GOPATH as undefined. \n\nThis is definitely due to the race condition. Its tricky to debug but simple to add a fix to prevent the race condition.\n. @llitfkitfk I don't know what you are trying to say there .... @wayneashleyberry Apologies for not getting back to this issue for so long. Do you still have this issue?. Thanks and Happy Coding!. Well... we pass the function name to gotests to generate the tests.\nCan you try gotests -only from the terminal and see if how best to pass the receiver information to it?. Thanks @db47h \nOnce the upstream issue is fixed, I don't believe we need any changes in the extension to consume it.\nSo will close this.\n. > I am the same, for what reason do self-writing objects have only one \"PANIC\"\n@imkos I don't understand the above statement, can you elaborate?\n@ragurney Are you using go.mod?. @ragurney Are there any errors in the console? Help -> Toggle Developer Tools -> Console\nCan you try running gopkgs -format {{.Name}};{{.ImportPath}} from the terminal and see if it gives any results?. @ragurney Yes, the javascript related thing is unrelated\nCan you grep for the package you were hoping to import from the results of that call to gopkg?\nAlso, have you by any chance set the go.toolsgopath setting?\n@juicemia \n- Are you using go modules? go.mod?\n- Did you recompile all the  Go tools after moving to Go 1.11? Run Go: Install/Update Tools and select atleast the top 11 tools and then press enter or the ok button to have them updated\n- Issues with completions of symbols from imported packages would be a gocode problem. But completions of unimported packages themselves (after setting go. autocompleteUnimportedPackages is gopkgs problem. At this point, I would suggest you try debugging the extension itself. Its pretty straightforward if you have node installed. Please checkout the instructions at Building & Debugging the Extension\nThe goSuggest.ts file is the one that powers the autocompletions.\nNote: For completions of unimported packages there are 2 separate features\n1. Type the partial package name, choose from completion list, add the package gets added to the import block. This is not enabled by default. You have to set the go.autocompleteUnimportedPackages setting\n2. Type the entire package name (name not path), add a . in the end, The completion list will have symbols from the package. This feature is enabled by default. @ragurney  lol... I just made the connection that you are the same person who sent the PR for the _ identifiers. I feel like a fool giving you links on how to build and debug the extension in https://github.com/Microsoft/vscode-go/issues/1881#issuecomment-417766683 :) You already know the drill . @ShoshinNikita @Ilyes512 Thanks for sharing those steps. Are you also able to get completions for unimported packages?\n@Ilyes512 Yes, step 3 is not required as it gets done in Step 4. @ShoshinNikita @Ilyes512 To get completions for the packages themselves, you need to set go.autocompleteUnimportedPackages to true.\n. \ud83e\udd26\u200d\u2640\ufe0f \n@ragurney All this time I assumed that you were referring to the auto-completion of unimported packages while writing actual code and not in the import block.\nSorry for that and all your time that has been wasted chasing after this issue.\nYes, auto-completion of unimported packages in the import block was a feature that worked when we were using nsf/gocode\nBut, we have since moved on to use mdempsky/gocode which is a fork of nsf/gocode as the latter doesnt work well in go 1.10 and and doesnt work at all in go 1.11\nI have logged an upstream issue for this back in July. See https://github.com/mdempsky/gocode/issues/38\nPlease subscribe to the upstream issue\n. Also see #1870. At this point, would running Go: Build Current package fix the error?. The red underlines correspond to build errors. For them to go away after you have run dep ensure we need to build the package.\nThe Go extension cannot talk to the terminal and vice versa.\nSo when you run dep ensure, the Go extension doesn't realize that it has to build your package.\nThe package is built in 2 scenarios, either when you make a change and save the file or when you run the Go: Build Current Package command.\nIf there is indeed demand for dep support, then we can look into adding some commands to the Go extension for dep ensure which will then run the build as a follow up task\n. > If you think it is a small task, I can take it and prepare PR for it.\nThat would be most welcome.\nWhat other dep related commands do you think we should include?\nCode pointers:\n- Wiki for Building and Debugging the Go extension\n- For a new command, you will have to declare it in the package.json file, register it in the goMain.ts file, define it in a new file say goDep.ts\n- In the new file, export a function that would spawn a new child process to run the dep command and follow it up with a call to the buildCode function that will build the package\nLet me know if you have any questions. https://github.com/Microsoft/vscode-go/blob/0.6.89/src/goSuggest.ts#L415 is where we see that there are more than 1 matches and then decide to not do anything.\n. The fix for this is in the latest update to this extension (0.6.90). I wonder if https://github.com/atom/language-go is the right place for this feature request. For go itself, we use the grammar from there.\n@joefitzgerald, @zmb3 thoughts?. Logged https://github.com/atom/language-go/issues/152. The latest beta version (0.9.3-beta.2) of this extension, the go.mod and go.sum files will now have syntax highlighting.\nThanks to @calebdoxsey and @brainsnail!. That is weird... go-symbols is only used when you perform a workspace symbol search. Did you happen to run Go to symbol in workspace command or Cmd+# ?. Go to definition is a different feature and doesn't use go-symbols\nGo to symbol in workspace is a different command where you can type in the symbol you want to find.\nDid you happen to try that?\nAre you able to consistently repro this?\nDo you have any other Go related extensions installed?. I dont think we have logs that can help in this case\nThe next time this happens, can you see which process is calling the go-symbols?. @abradley2 I'll be using #1873 to track the completions issue when using go.mod\n@mholt, are you using go.mod as well?\nAlso, when running Go: Install/Update Tools, you might not have checked the tools to update. Try it again and update all the tools. Good point. PRs are welcome.\nCode Pointers:\n- Checkout Building and Debugging the extension to learn how to set up a local dev version of the Go extension\n- https://github.com/Microsoft/vscode-go/blob/0.6.88/src/goOutline.ts#L118 is the place where we can skip such symbols. This issue has a PR: \nhttps://github.com/Microsoft/vscode-go/pull/1893. This but is now fixed in the latest update to this extension (0.6.90). > The go build command can take a list of packages, so it seems like this should pass all the packages to one invocation of go build.\nThanks for bringing this up. Yes, we should pass the list of packages instead of calling go build on each package\n\nit still appears that goBuild can be called many times concurrently for each file that was saved\n\nWe can skip building the package when it does not correspond to the file that is open in the current active editor. \nPRs are very much welcome.\nWould you like to give this a try, since you have already figured out the workings of goBuild.ts?. @mgood If you are working on this, wait a few days till October starts before submitting the PR to win a t-shirt! See https://open.microsoft.com/2018/09/18/hacktoberfest-2018-microsoft/?WT.mc_id=hacktoberfest-twitter-beverst for more details. The fix to this bug is now available in the latest update to the Go extension (0.7.0)\nThanks to @ToothlessGear!. @phenixrizen When updating go tools, did you get the message that all tools were updated?\nAfter every change in Go version, we need the tools to be re-compiled for them to work.\nAlso, are you using go.mod?. Thanks @phenixrizen \nsince you are getting zero candidates when running gocode -s -debug, its definitely an issue with gocode itself.\nI'll close this issue in favor of the upstream issue you have already created. @rvjc Glad that you found the solution to the problem :) Welcome to VS Code and Happy Coding!. About the test, are you able to run the existing tests?. The gogetdoc related failures are because you don't have gogetdoc installed. Someone is working on updating the tests to not fail in such cases.\nYou can comment them and the gometalinter one while running your tests. Your changes are unrelated to them so you can safely ignore them.\n\nWhen trying to add a line such as var _ string = \"foo\", I get two new failures as well,\n\nThat is mostly because there are other tests using the same file and now all the line numbers are changing. Try this\n- In the fixtures table, create a new folder for outline and add a go file there as your test file. Update all the outline related tests to use this file. @ragurney If you merge from master branch now, you will not get those failures. Looks great, Thanks!. @db47h Thanks for digging into this @db47h, you hit all the right points.\n@willfaught I see that you have logged an upstream issue, so I'll respond there.. This seems like a refactoring scenario, and a refactoring tool might be a better home for it rather than the Go extension directly. There are 2 reasons for this:\n- The Go extension is not aware of the AST of the Go file being edited. The extension relies on a set of Go tools that do the Go aware work and pass the result to the extension. This feature would need the Go extension to be able to parse the file to determine the struct and so it needs to be aware Go AST which we do not want to get into.\n- As VS Code and this extension has gained popularity, we have seen a gradual scope creep over the past year. Being a sole maintainer of this project, it is getting a little hard to support all incoming requests and maintaining the ever growing set of features. Therefore,one criteria I am using now in the triaging process is whether the feature request would make sense as a separate extension. This current feature request appears to be so.\nIf you would like to author another extension for this feature, I would be happy to provide any guidance you need. If you can get this feature into an existing re-factoring tool, then I'd be happy to integrate that tool.\nThank you and Happy Coding!. Interesting.. what does dto stand for?. @shreyu86 With your change, after the user chooses from the completion list, they need to trigger completions one more time to get the symbols from the selected package.\nI have pushed a commit to automatically trigger the suggestions.\nCan you try it out and update the unit tests accordingly?. Or you can run the command acceptSelectedSuggestion  using the vscode.commands.executeCommand function. No problem, take your time. I was out last week on vacation as well :). Keep the existing test case as is and create a new one with the same sample test file\n\nAfter showTextDocument, set editor.selection to the right position where we want suggestions to be triggered\nThen use vscode.commands.executeCommand('editor.action.triggerSuggest') followed by vscode.commands.executeCommand('acceptSelectedSuggestion')\nThen check the document contents\n\nNote: These are just ideas, I havent tried them out myself :). The problem is that the suggest widget is not completely rendered before the accept suggestion command is executed.\nNever mind, I think we can skip that.\nI pushed a commit for some extra checks in your test case. This is good to go. Just waiting for travis tests to pass\nThanks again!. No problem at all. If you were to run dlv from the command line, and use the --build-flags flag, how would you pass the multiple tags? Can you try it out and share it here?. Thanks @jpap!. So I am guessing we need to\n- Identify if current package is using modules or not \n- If it uses modules, then we can run go list with the GOROOT as cwd and combine the results with that of go list -m all with current package as cwd.\nThe identification of whether current package is using modules or not, should be done in util.ts file just like getGoVersion. I cloned https://github.com/golang/example/ outside of my GOPATH\n- Ran go mod init and go mod tidy in the example folder\n- cd hello and go build to ensure that the hello package builds without any issues\n- The file hello/hello.go imports the stringutil package, but if I run go list -m all, the stringutil is not listed.\nSince this PR relies on go list -m all, how is the above case going to be supported?. Yes. Let's keep things consistent and make all the 3 exported functions from goPackages.ts to \n- return packages from GOROOT and GOPATH if current package is under GOPATH\n- return packages from GOROOT and modules if modules feature is being used. @uudashr Turns out that if you use go list all without the -m flag, it gives you all the available packages for the current module. So we don't need to first fetch all the std lib and then join it with the result of go list -m all.\nAlso, the current solution in this PR doesn't make use of the caching system we put in place earlier.\nI am closing this PR in favor of https://github.com/Microsoft/vscode-go/commit/0a9001f8fa2d3d69f5946f05cd23549abea458eb which covers the above concerns.\nDo take a look at that commit and share any feedback you have.\nOthers,\nPlease do try the latest beta version of this extension which has the above fix and share any issues you find.\nAlso see \nhttps://github.com/Microsoft/vscode-go/issues/1532#issuecomment-423722729. Note to others: this is being followed up in #1937. Can you provide a small sample code that I can use to replicate the panic scenario?. I tried the above code on Windows using the latest delve.\nIt breaks on fatalpanic and shows the below in the debug console:\n\nWill try on macOS soon. @aarzilli\nIn such cases where the \"bad access\" error is thrown from delve as per\nhttps://github.com/derekparker/delve/blob/b5cf58456418a76902aa551ed5b022c90cd76fa7/pkg/proc/gdbserial/gdbserver.go#L698-L726, can the client expect any stack trace?. @protheusfr Can you share a screenshot of the stack trace that you see in Linux and Windows?. > use secure library functions for temporary files\nCan you elaborate on this?. Thanks for the links!\nPRs are welcome to fix this.\nCode pointers:\n- Read Build and Debug Go extension for local setup of the extension\n- As mentioned above fs.mkdtemp can be used to create a unique temp directory under the os.tmpdir()\n- The above should be done once and the value should be stored in local storage for future use.\n- util.ts would be the right place to add a function to get this tmp dir\n. The fix for this is now out in the latest update to this extension (0.6.90). All three of remotePath, port and host properties in the debug configuration are not needed unless the mode is set to remote. I believe the original intention of adding them to the default config was to aid discoverability.\nI agree that they can be removed from the code snippet.\nPRs are welcome\nCode pointers:\n- Read Build and Debug Go extension for local setup of the extension\n- The change would have to be done in the goDebugConfiguration.ts file\n. All three of remotePath, port and host properties in the debug configuration are not needed unless the mode is set to remote. I believe the original intention of adding them to the default config was to aid discoverability.\nI agree that they can be removed from the code snippet.\nPRs are welcome\nCode pointers:\n- Read Build and Debug Go extension for local setup of the extension\n- The change would have to be done in the goDebugConfiguration.ts file\n. Looks like we do need a host and port for the client to connect. See https://github.com/Microsoft/vscode-go/blob/79e4f3824b89ec3151650fa14f3c59f71e6b2dd8/src/debugAdapter/goDebug.ts#L427\nSo, even if you made the change so that delve figures out a port to use by itself, we then need to parse its output to find the port and then pass it to the connectClient above.\n. > I suggest we for now just set port to 0 in the autogenerated launch.json with the existing port || random(2000, 50000), which will make it work most of the time.\nAgreed. \nI've removed remotePath, port and host properties from the default configuration.\nThe port || random(2000, 50000) will ensure that a random port is selected.. To try out the above changes, please see https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension. The fix for this is now out  in the latest update to this extension (0.6.90). - Does this happen even in small simple programs or only large codebases?\n- Can you run gogetdoc from the terminal on the same file as your example and see how it performs?\n. gogetdoc needs a byte offset, you are using line number\n\nInstall the show-offset extension\nadd setting \"showoffset.offsetType\": \"byte\"\nKeep cursor on the symbol you want to get information on\nYou will see the offset in the status bar. Use that when running gogetdoc in the terminal. @iamwwc If you are seeing delays even when running from terminal, please log an issue at https://github.com/zmb3/gogetdoc/issues. I would still encourage you to log the issue, as there is nothing much we can do from the extension's side.\n\nOnce we have Windows support for the language server, you can give that a try.. By the way, if you are interested in winning a t-shirt in the hactoberfest, close this PR and open a new one :). See https://open.microsoft.com/2018/09/18/hacktoberfest-2018-microsoft/?WT.mc_id=hacktoberfest-twitter-beverst for more details. @nealot What outline options are you referring to?\n@bruceauyeung This is a language agnostic feature request. Please log it in the main vscode repo.. Thanks @nealot!. Thanks for reporting this @alex-kovoy \nI'll look into fixing this soon. I just needed to understand one detail about the check package.\nIs there a way to run the individual tests in a suite when using the check package?. I tried using go test -check.f but I keep getting flag provided but not defined: -check. Am I missing something?. Also, how have you been trying to run the tests? Using the commands to run tests in package/file/cursor or code lens to run tests in package/file/function?. Thanks @alex-kovoy \nI have pushed a fix to the master branch. Can you follow the instructions to download and install the beta version of this extension to test it out?. I've also logged #1921 to support running such tests individually. The fix for this is now out in the latest update to this extension (0.6.90). Those are some great points @antong, thanks for bringing them up.\nI have pushed a change to not re-use a persisted directory if it does not exist. That should take care of most of your concerns\n@Charliekenney23 The comment is helpful, but I added a check regardless. Do take a look.\n\ncreating a directory at launch and cleaning up in deactivate would solve the problem and without any extra risk in the first place.\n\nYes, lets do this if @antong finds any other risk with the change I made :). good point, lets go with creating a tmpdir on extension activation (which happens for each VS Code session), recreating it if it doesnt exist during the session and removing it when extension is deactivated (which happens when VS Code window is closed)\n. On a side note: @antong you are awesome. @Charliekenney23 I've refactored the code a bit to avoid using classes as the rest of the util.ts file doesn't use any. This is just to be consistent with the coding style in the file and to make it easier for future maintenance. Can you take a look?. @chenyihui555 The title of your issue is about godef but the description is about guru. Can you please elaborate on what the issue is and which feature is not working?\n\nGo to definition\nFind all references\n\nDo these features not work even in small simple programs?\nCan you share a small sample code that I can use to replicate the issue?. > my godef cannot be used in vscode, so I use guru to find the definition, \nDo you know why godef cannot be used?\nCan you run it from a terminal on the same file and see what error you get?\nCan you run guru from a terminal on the same file and see if you get similar delays?. @chenyihui555  Where are you getting the above logs from? What did you run?. @chenyihui555 As per your settings, you have enabled the language server. This means that the language server is used for the \"Go to definition\" feature and not guru.\nIf you want to use guru and not the language server, then set go.useLanguageServer to false \n. Glad that things worked out, Happy Coding!. @harikb Can you see if #1464 helps?. @1e3oss The initial reason to use the -i flag when running go build was to speed up the process as the dependent packages didnt have to be rebuilt all the time. In Go 1.10 this is solved by the build cache.\nBut recently we have come to depend on the -i flag to ensure that the dependencies are installed as gocode provides support only for packages that are already installed. \nSo we would not be removing the flag by default until there is a good solution for gocode\nBut meanwhile, for the current problem, one can use the solution added for #1464  which is stop adding this flag using the go.installDependenciesWhenBuilding setting.. @harikb The above should solve your issue. If not, feel free to re-open this issue. Most of what I would say is already covered in #1315. Apart from that:\n\nAre you using the language server at the moment?\nIs the slowness seen even in small code base and simple programs or only on large code bases?\nWhat OS are you on?\nFor the cases that it doesnt work, can you provide a small sample code that I can use to replicate the issue?\n\n. If you are using the language server (i.e the setting go.useLanguageServer is set to true), then we should log an issue in the repo for the language server itself which is https://github.com/sourcegraph/go-langserver. Folks there would be able to better diagnose the issue\n\nIn addition, when jumping across projects using imports, the functionality is often broken even though everything's within the configured GOROOT\n\nDoesnt GOROOT only matter for std library?. > There may also be issues with that particular language server, which could be considered a reason to improve VSCode's internal \"Go To Definition\" support in general as IntelliJ has opted to do themselves rather than deferring the issues\nThere is no \"internal\" support for any of the key features for Go in VS Code. We depend on third party tools to provide the said features in the editor. This is clearly called out in the README. This is what almost all editors do for Go (VS Code, Atom, Sublime, Vim, Emacs).\nGoland by JetBrains is an IDE not an editor like VS Code, Atom, Sublime, Vim etc. If we were to opt to do the same and have custom internal implementation for all the key features, then we would be an IDE too. VS Code is a light weight editor not a full blown IDE.\nLanguage servers and the Language server protocol is the answer to the question of repeated custom internal language implementations across multiple editors. Our aim is to support and encourage language server providers. Sourcegraph has implemented one. Google may implement another more robust and complete one.\nA complete and robust language server can power multiple editors and that is the end goal.\n\nI'm comparing the performance of key features of another IDE to VSCode's for Go. \u2014 If the only way to get anything similar is by using a third-party language server then I'd assume this is more a limitation of the VSCode IDE. \n\nI appreciate your work. Goland by JetBrains is definitely backed by its own internal support for many of the key features. It is also backed by an entire development team where as the Go plugins for other editors including VS Code are open source projects depending on Go tools from the community, maintained by 1 or 2 maintainers with amazing help from the community.\nTherefore, if you feel Goland serves your interest, then by all means, I would suggest that you use it. (I am being genuine here and not sarcastic. I am specifically saying this as text does not always convey the intent).\n. Yes, it is a marketed feature and it is up to extensions to decide how they want to implement it. And in the case of Go, it is done using third party tools.\nThanks for understanding.. This is different than #1890\n1890 was about using a single process to run go build on multiple packages instead of spawning a process to run go build on each package.\nYour case is about killing an older linting process before starting a new one.\nIf you look at https://github.com/Microsoft/vscode-go/blob/0.6.89/src/goLint.ts, you will see that we do indeed cancel the current running linting process before starting a new one. So I dont see why you would see multiple processes running for the linter, unless the specific linter itself is spawning new processes.\nCan you try setting your lint tool as golint and see if you see the same?\n. Does it also happen when go.lintOnSave is set to package?. Is the above after multiple saves or for the single save?\n. I am currently a bit swamped. Do you mind debugging this by running the Go extension from the source? Its pretty straight forward\nIf you are up for it, then follow the below instructions:\n- Build and Debug extension\n- For the sake of debugging, disable the other save participants using the go.buildOnSave and go.vetOnSave settings\n- https://github.com/Microsoft/vscode-go/blob/0.6.89/src/goLint.ts#L45 is the code that ensures previous processes are killed before creating a new one for linting\n- https://github.com/Microsoft/vscode-go/blob/0.6.89/src/util.ts#L603 is the code that actually runs the linter. @mk0a1a Your particular scenario is being tracked in #2202 and is fixed in the latest beta version of this extension where the on save feature is invoked only the file that is in the active editor.\n@AlekSi Was your issue also seen only when saving multiple files at once?\n. @AlekSi We last left things at \nhttps://github.com/Microsoft/vscode-go/issues/1916#issuecomment-423768007\nWould you have some time to look deeper into why you would have multiple linters running?\n. @m13253 Like I said before, we do have code in place that is meant to cancel processes that were spawned for previous linting attempts when a new linting request is in place.\nCan you follow \nhttps://github.com/Microsoft/vscode-go/issues/1916#issuecomment-423768007 and help us figure out why that doesn't work in the scenario that you mentioned?. > if multiple linting requests are requested ,the running one is not interrupted (and whose results may be useful)\nSuch results may also be stale if subsequent edits to the file have already fixed the linting warnings.\n. Thanks for reporting! That indeed is a very bad bug.\nPRs are welcome to fix this.. I believe initially (and this is before my time), the intention was to get the user's attention to that item.\nSo if you can figure out some other way to do it like using a different color or using an icon, then that would be a good solution.. The status bar item supports the use of github octicons. See https://code.visualstudio.com/docs/extensions/example-word-count. Icon sounds good\nHow about https://octicons.github.com/icon/alert/ ?. Icon sounds good\nHow about https://octicons.github.com/icon/alert/ ?. The fix for this is now out in the latest update to this extension (0.6.90). We use gocode to provide completions and this tool along with many others do not yet have module support. \n1532 is tracking the general module support\nYou can try https://github.com/Microsoft/vscode-go/issues/1532#issuecomment-419766453\n. > The go get commands that install tools should be run from $GOPATH/src (keeping go.toolsGopath into account) to disable modules.\nSetting GO111MODULE to off in the process that is running the go get commands to install the tools should work as well, correct?. I've made the change to turn off GO111MODULE in the process that runs the go get commands. Can you follow the instructions in https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension and see if the install/update tools command works for you now?. Thanks @brunsgaard!. For the iferr, doesnt return ${2:err} make more sense than return ${2:}err?\nThe second case is supported in a way already. After declaring the type Foo just start typing Foo in another line and one of the auto-completion options should be for func (*Foo). \nI'd be happy to accept a PR for the first issue.\n- https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code has notes on how to setup a dev environment for this extension\n- The changes would go to https://github.com/Microsoft/vscode-go/blob/master/snippets/go.json file. Ah, understood.. Also, feel free to go through the other snippets in that file, to see if they can be improved. @Charliekenney23 Thanks! Do you need any pointers?. - The goTest function is where go test gets called with appropriate parameters\n- goTest.ts is the file where all the test commands are implemented (Test at cursor, test file, test package)\nYou will have to update the testAtCursor to identify the functions part of the check package and run the test appropriately\n. That would be cool to have indeed.\nAs you have already figured out, for function vs methods as well as package name usage, we would need special scopes for this case.\nWe use the grammar from https://github.com/atom/language-go for Go in VS Code, therefore that would be the right place to log this feature request.. Hello @aixiaoxiang,\nI apologize for not replying to this issue sooner.\nLooks like the debug process was not able to determine the right GOPATH. So, setting go.inferGopath setting solved the problem.\nThis is expected.\n. #1532 is tracking all the features that need to be fixed when using Go modules. Can you please add this there?. Re-opening this, as this can be dealt with separately.\nThe problem is that the coverage report generated by go test, contains the package import path.\nIn the world of GOPATH, the package import path would always be the part of the file path as well.\nThat is no longer the case when modules are being used.\nFor example, below is an example of the coverage data:\nmode: set\ngithub.com/ramya-rao-a/hello/bye.go:9.12,13.2 2 0\ngithub.com/ramya-rao-a/hello/hello.go:9.13,11.2 1 0\ngithub.com/ramya-rao-a/hello/hello.go:13.19,15.2 1 1\nIn the world of GOPATH, I could add coverage to the file whose path ends with github.com/ramya-rao-a/hello/bye.go, but in the world of modules, the file in question need not have the import path in its path.\n@bcmills Would it be a reasonable request to the Go tool, to have the coverage data contain the absolute paths of the files?\n. Thanks @egonelbre \nI am hesitant to add yet another tool that the user will have to install to enable this feature, when we have most of the information we need to deduce the absolute path already with us.\n. I have pushed a fix to master. Can folks here try out the beta version of this extension and confirm that the fix works?. @mrg0lden This issue is tracking the problem with code coverage when using Go modules. Based on what you are saying above, your problem has nothing to do with code coverage. Or am I missing something?\nOtherwise, the issue with installing the forks is being tracked in #1979\n. @mrg0lden No problem, #1979 is now resolved. Please see \nhttps://github.com/Microsoft/vscode-go/issues/1979#issuecomment-428292910. This is fixed in the latest update to the Go extension (0.6.91). Is the expectation to see the contents of the package?\nCurrently, when your cursor is on one of the packages in the import block, you can run Go: Browse Packages. That will open all the files in the package for you to navigate to.\nYou can also run Go: Add Package to Workspace at this point to open the package as another root in the explorer.\n. > Go: Browser Packages: Does not auto jump to the currently package, still need to search, then browsing the files inside the package is not great.\nKeeping the cursor on the package in the import block and then calling Go: Browse Packages does indeed open the drop down with package files. If the package was already open in the workspace, and you selected one of the files from the drop down, the file explorer would automatically show the file that was opened.\n. @davidwkeith \n\nGo: Add Package to Workspace: The package is already in the workspace, I get \"Could not find package\u2026\"\n\nCan you elaborate on this? Was the package under the main folder that you had already opened in VS Code? Or were you in a multi-root workspace set up and the package was one of the top level folders already opened?\n@davidwkeith , @axetroy \nCmd-click is reserved for the Go to definition feature in VS Code.\nExtensions are supposed to provide one or more locations (file path + position in the file) for each symbol that has been Cmd-clicked, which VS Code then opens in a new tab.\n\nSimilar to the URL detection in VSCode's terminal, when hovering over a supported import string (eg \"github.com/google/uuid\") the string would become underlined with a tool tip to \"Cmd + click open source\" (or appropriate OS modifier key)\nWhen clicked it would open the source import path. This could be new window, or just navigating to the source in the file tree view, depending on the project root.\n\nI still believe Go: Add Package to Workspace command is the right thing to do when you want to open the package under the cursor in the file explorer. Please let me know if this doesn't work for you.\nTo open the package in a new window, we can definitely support a new command called say Go: Open Package in new Window\nPRs are welcome if anyone wants to give this a try\nCode Pointers:\n- Build and Debug extension\n- Refer to addImportToWorkspace which implements the Go: Add Package to Workspace command. You will be sharing a lot of code from here.\n- To finally register the command, you need to add it to the package.json and goMain.ts file. Again use the Go: Add Package to Workspace command as a reference\n- To actually open the folder, see below\nlet uri = Uri.file('/some/path/to/folder');\nvscode.commands.executeCommand('vscode.openFolder', uri);\n. Are you using the new modules feature? If yes, then its not yet supported. If not, then follow the below:\n\nClose VS Code\nCheck for any running process for gocode. If you find it, kill it.\nOpen VS Code, Run Go: Install/Update Tools, select gocode and install it\nTry for auto-completions\n\n. Closing this issue because:\n\n@strtob01 has the problem solved by deleting the old binaries\n@EmpireJones Looks like gocode itself is panicking. I am not sure what the extension can do in that situation :( Are you using Go modules? If yes, please try the beta version\n@bjm88 As mentioned above, please try the beta version and take a look at https://github.com/Microsoft/vscode-go/issues/1939\n. Unfortunately, as you realized, its the formatting tool that is doing this and I am not aware of any workarounds at the moment.\n\nIf you want to skip the formatting tool being run on save altogether you can do so by setting go.formatOnSave to false in your settings.. That sounds like a good idea.\nWe support the below linters today. Do you know if all of them support running on single files?\n\"golint\",\n            \"gometalinter\",\n            \"megacheck\",\n            \"golangci-lint\",\n            \"revive\"\nPRs for this feature are most welcome. Code Pointers:\n- Build and Debug Extension to get started\n- See package.json to add the new option\n- See goCheck.ts to update the place from where lint on save is called\n- See goLint.ts to update the actual calls to various linters. The event for file save gets fired for one file at a time. Therefore, we won't be falling under the \"files not comprising a package\" issue. So we should be good to go.. @jeffb4 If you are working on this, wait a few days till October starts before submitting the PR to win a t-shirt! See https://open.microsoft.com/2018/09/18/hacktoberfest-2018-microsoft/?WT.mc_id=hacktoberfest-twitter-beverst for more details. We haven't heard back from @jeffb4, so go ahead @brainsnail.. @brainsnail Can you share the link to your branch?. cwd is always meant to have the current working directory. Looking at your changes, it has the file path instead when lintOnSave is set to file.\nI believe the change should be that lintOnSave is set to file, the file should be passed as an argument. cwd need not be touched.. This feature is now out in the latest update to the Go extension (0.6.92). Thanks @brainsnail!. @stamblerre Thanks for the PR!\nI have refactored the code in goSuggest.ts a bit and fixed linting errors that were breaking the build.\nAlso updated to include gocode-gomod in the list of tools to install only if Go version is 1.11. I am guessing we don't need this for Go 1.10.\nWill test it out tomorrow and merge it.\n. Yes, this looks good. \nI wanted to make general changes on how to identify whether mod is supported and cache the results as well, but I can do that in the master branch.\nI'll have a test build ready soon.\nThanks!. @stamblerre \nI am seeing similar things as @fatih.\nI just have a simple file with just 1 non std lib package dependency. It worked well for the past hour, but now I get \"null\" as the output from gocode-gomod all the time. It doesn't return results for std lib packages either at the moment\nTo test it out in VS Code:\n- Download https://github.com/Microsoft/vscode-go/blob/master/Go-gocode-mod.vsix\n- Run code --install-extension Go-latest.vsix \n- If the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-gocode-mod.vsix file from the cloned repo\n- Reload VS Code. @stamblerre Anything we can do to help debug the issue where gocode returns the string \"null\"?. @stamblerre Below is the output from gocode-gomod -s -debug. I don't see anything that useful. It straight up says no candidates\n```\n2018/09/24 18:20:13 Got autocompletion request for '/Users/ramyar/Documents/go-modules/hello/hello.go'\n2018/09/24 18:20:13 Cursor at: 92\n2018/09/24 18:20:13 -------------------------------------------------------\npackage main\nimport (\n        \"rsc.io/quote\"\n        \"fmt\"\n)\nfunc main() {\n        fmt.Println(\"hello\")\n        quote.#\n}\n2018/09/24 18:20:13 -------------------------------------------------------\n2018/09/24 18:20:13 Elapsed duration: 91.238433ms\n2018/09/24 18:20:13 Offset: 0\n2018/09/24 18:20:13 Number of candidates found: 0\n2018/09/24 18:20:13 Candidates are:\n2018/09/24 18:20:13 =======================================================\n2018/09/24 18:20:13 Got autocompletion request for '/Users/ramyar/Documents/go-modules/hello/hello.go'\n2018/09/24 18:20:13 Cursor at: 114\n2018/09/24 18:20:13 -------------------------------------------------------\npackage main\nimport \"rsc.io/quote\"\nimport (\n        \"rsc.io/quote\"\n        \"fmt\"\n)\nfunc main() {\n        fmt.Println(\"hello\")\n        quote.#\n}\n2018/09/24 18:20:13 -------------------------------------------------------\n2018/09/24 18:20:13 Elapsed duration: 90.077903ms\n2018/09/24 18:20:13 Offset: 0\n2018/09/24 18:20:13 Number of candidates found: 0\n2018/09/24 18:20:13 Candidates are:\n2018/09/24 18:20:13 =======================================================\n```. I know the repro steps for the failure now.\nIn the above example, I am using the quote package. \n\nSay I used quote.Hello() and save the file. Subsequent quote. will give me completions.\nRemove all quote related code and the import, save the file.\nAdd the quote package back to the import block. Don't save. Type quote. No completions.\n\nOn every file save, we run go build. This might be updating the module cache?\n@fatih Do you see something similar?. Yes, looks like that. @segevfiner is right. Delve cannot add/remove breakpoints while running.\n\nIt should be communicated better to the user\n\nWe can return an error message from setBreakpointsRequest if we somehow can figure out if the debug session has not started yet or a breakpoint is hit.\n@isidorn Inside the setBreakpointsRequest, is there a way for a debug adapter to know if the current debug session has hit a breakpoint or not?\nAlso, is there a request that is sent to the debug adapter when a breakpoint is removed by the user?\n. Thanks @isidorn \nTo summarize:\n\nBoth adding and removing of breakpoints result in the setBreakpointsRequest being called. Therefore, this would be the right place to show an appropriate error message to the user (using logError()) if the program is running\ncontinueRequest needs to keep track of whether at present any breakpoint is hit or not\n\nPRs are welcome to fix this bug.\nCode Pointers:\n- Build and Debug extension\n- Debug the debugger\n- Both setBreakpointsRequest and continueRequest are in the goDebug.ts file. With the latest update to the Go extension (0.9.0), we now can add/remove breakpoints when the program is running.. Can you write a simple test case and see if debugging works for that? Say\nfunc TestSimple(t *testing.T) {\n    a := 1\n    t.Log(a)\n}\n. Yes of course.\nInstead of using the debug test codelens, use the debug configuration for debugging tests from the launch.json file.\nSee https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#set-up-configurations-in-launchjson\nOnce you have the configuration set up, choose it from the drop down in the debug viewlet (View -> Debug), and press F5 to start debugging.\nIf you still dont see the breakpoint being hit, add the below to your debug configuration:\n\"showLog\": true and \"trace\": \"verbose\" and try again. This will show the logs in the debug console (View -> Debug Console). Are you using symlinks by any chance?\nCan you try running dlv from the command line and see if you can successfully create and hit the breakpoints?\n- Run dlv test from the terminal (make sure you are in the directory where the test file lives)\n- Once dlv creates the binary and starts the debugging session type b filename:linumber. That will create the breakpoint\n- Then press c to continue. Your breakpoint should be hit. \ud83d\ude2d symlinks... they make me cry.\nWere you able to run dlv test and get the breakpoints to work?. dlv created the breakpoint at /home/akiel/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm/other_test.go:6 where as vs code is trying to do so at /media/akiel/data/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm/other_test.go:6\n\nIs the file physically under /home/akiel/GOLIBS/ or /media/akiel/data/GOLIBS?\nWhat is the path of the folder opened in VS Code?\n\nWhat is the path you get when you right click on the other_test.go file in the explorer and choose Copy Path? Is that the same you see when you hover on the editor tab where the file is open?. Sorry for my ignorance, so the real files are under /media/akiel/data/GOLIBS/ correct?. The last thing I need to know is the working directory from which dlv was launched by VS Code.\n\n\nInstall the beta-version of this extension\n\nAdd \"trace\": \"verbose\" back to your debug configuration and debug using this configuration. In the logs, you will now get statements like Using GOPATH, Current working directory:, &Running. Can you share the output of all these 3 statements?. Changing the tool used to run tests is not trivial unless the new tool uses the exact same command line arguments as go test. Can you give some examples of how buffalo runs the tests?. For auto-completion support when using modules, we will be testing a fork of gocode. Therefore I need to know whether current file being edited is using modules or not. See the commented line https://github.com/Microsoft/vscode-go/blob/master/src/goSuggest.ts#L169. On a side note, I was not aware that you were working on getting module support from gopkgs itself. That's why I went ahead and did \nhttps://github.com/Microsoft/vscode-go/commit/0a9001f8fa2d3d69f5946f05cd23549abea458eb.\n\nAm very glad to see the support from gopkgs directly. Thanks!\nAlso, I wanted to invite you to join https://groups.google.com/forum/#!forum/golang-tools\nPost Gophercon this year, this mailing list was created as a place to discuss the current modules/packages related work in the Go tooling system and how it affects editors.\n. > not sure why it always failed on gogetdoc related, any idea?\ngogetdoc also supports modules. The changes went in today. The failure must be a side effect from that. I'll take a look. > Why do we need isMod\nI will also need this to provide some kind of notification to ask people to update their tooling so that module support comes from the tools. Hey @truewt,\nThanks for reporting with such details and I apologize for not replying sooner.\n\nIf there is any interest to fix this, I'm open to help in any possible way\n\nThe problem indeed is with symlinks. I have had other users report similar issues, but I never got to replicate the problem and therefore no solution yet :(\n\nprovide additional resources or with some guidance to setup up debugging for both vscode-go and delve (if possible) to fix the problem by myself.\n\nI would gladly help you in figuring out where the problem is. Please follow the below links for setting up a local environment of the Go extension:\n\nBuild and Debug the Go extension\nYou are already aware of the trace attribute in the debug config that shows logs from the debug adapter. Add \"showLog\": true to see the logs from delve. Add \"logOutput\": \"rpc\" to see the logs that show the rpc communications between the debug adapter and delve. \nDebugging the debugger to add breakpoints in the code related to debugging.. @shreyu86, @johan-lejdung, @ragurney Thanks for confirming!\nWould you mind giving some of the other features a look as well?. @gertcuykens That can very well be the case. If you find more details, please do log a new issue and we can investigate further.. To those who use Go modules:\n\nThe Go tools team have forks of the godef and gocode tools that work with Go modules. These 2 tools drive the Go to definition and auto-completion features respectively. The latest beta version of this extension has support for both.\nPlease install this beta version, follow through the prompts to install/update the tools and let us know how the Go to definition and auto-completion features are working out for you.\n@lkarlslund Nice timing :) I wanted to complete the testing of the forks and adding the right prompts in the right places before releasing them in the beta version. So now you have them.\n\nWhen are you enabling languageserver for Windows? :)\n\nAs soon as the upstream item https://github.com/sourcegraph/go-langserver/issues/113 is resolved. @alecthomas \n\nAre you using Go modules?\nRun gocode close and/or gocode-gomod close and try again.\nIf that still doesnt work, run gocode close and gocode -s -debug. (Replace with gocode-gomod if using modules). This will start gocode in debug mode. Try for completions in VS Code. The terminal running gocode in debug mode should print out results (number of candidates or error message)\nIf you see results in debug mode, but not in VS Code, then our last resort is to debug VS Code. Get latest from master and add a breakpoint at https://github.com/Microsoft/vscode-go/blob/master/src/goSuggest.ts#L170 to see if gocode-gomod or gocode is being used. Another breakpoint at https://github.com/Microsoft/vscode-go/blob/master/src/goSuggest.ts#L211 will show the output from gocode itself. @alecthomas So from what I can understand you are using modules but are also vendoring the dependencies. And it is for such vendored dependencies that you are not getting completions? If so, can you open a new issue with a sample code (preferably a small repo that I can just clone)?. @alecthomas It is known that gocode-gomod is generally slower. But it is to be used when using modules because gocode doesnt work with modules.\n\nIf what you said before still holds and you see gocode working when you vendor your dependencies and use modules at the same time, then as requested in https://github.com/Microsoft/vscode-go/issues/1939#issuecomment-424950452, can you please log a new issue with a small sample repo?. @wolfeidau \nUsing your repo and the repro steps in the README of your repo, I do see that there is no completions for the base64 package. But, once I save the file after typing base64.anything(), subsequent completions work as expected.\n1944 is tracking the case where auto-completions dont work, unless a package has been imported and used atleast once in the saved version of the file. I believe that is what is happening in this case.\nCan you try saving the file after any usage of the stdlib and try again?\n@alecthomas \nI am specifically interested in your case because it is the case of gocode working but not gocode-mod when using Go modules along with vendored dependencies. This is different from @wolfeidau's case.\n. @wolfeidau I've logged #1963 to continue the discussion. Everyone,\nThanks a lot for the participation!\n0.6.90 version is now released.\nIf you have further feedback, please feel free to open an issue.. In your first comment, did the file have the suffix _windows.go? \nIf no, then you have to set GOOS=windows specifically, otherwise there is no way for the editor to know which platform to use for GOOS\nIf yes, this issue is covered in #1848.\n. Thanks @Nhoya \nPlease upvote #1848 so that we know how many users are seeing this issue. @dreamheld After updating the import statement to \"vstest/packtest\" and adding a line that uses the package, I am able to get the completions when using the latest beta version of this extension\n\nIf you are using the same beta version, did you get the prompts to install the fork of gocode? And did you install it?\nCan you try killing all running processes for gocode and gocode-gomod and try again?\n. @uudashr In the above code set-up, if I run Go: Browse Packages, the vstest/packtest doesnt get listed i.e gopkgs doesnt return the vstest/packtest.. Thanks @uudashr! It works now.\n@dreamheld \n\nbut doesn't fill out the import statement automatically anymore\n\nYou mean that in a file where packtest is not yet imported, typing pac doesnt give you a completion item that would add the import?\nIf yes, then I can confirm that @uudashr's updated gopkgs tool will fix that. \nRun Go: Install/Update Tools, select gopkgs, press OK. That will update the tool.. > method filling showing up only after the method was used already\nIt also works if the any other symbol from the imported package is used already. This is being tracked in #1944 and I have an upstream issue for that in https://github.com/stamblerre/gocode/issues/3\n\nMethod/Package colors seem to not work anymore. \n\nCan you share a screenshot for this?. I dont see any color issue ...... lol.... I'll close this issue then.\nThanks for reporting @dreamheld, it helped us catch and fix a bug!. Closing in favor of \nhttps://github.com/Microsoft/vscode-go/commit/a20d42e93217426c611b9551b9b469279ea6dc75. @stamblerre Can you remove the current binaries you have for godef-gomod and gocode-gomod try the latest beta-version?\nIt should give you appropriate prompts to install/update the required tools.\n. :) Yes, I found that out too. My mistake. The vsix is updated. Can you try again?. I get the prompt when I hit F12 on any symbol\n\nCan you remove the binary again, and debug the latest from master?\nAlso, your master branch seems to have a lot of merge commits :) I would suggest to nuke that branch and create a new \"master\" from this repo.. @stamblerre Thanks! I'll keep this issue open because invariably, folks will log an issue in this repo.. @stamblerre Are you able to repro that as well? i.e insider GOPATH with \"go.toolsEnvVars\": {\"GO111MODULE\": \"on\"} setting?. @gencer @nezorflame Can you try running gocode-gomod close, ensure there are no running instances of it and try again?\nOnce gocode is running in server mode, the same is re-used everytime we ask for suggestions. It may happen the current running instance isnt aware of the GO111MODULE env var and has to be restarted?. The issue of GO111MODULES not being respected and gocode-gomod not being launched is fixed.\nBut the original issue of completions not working without saving the file with the package used atleast once still exists and is being tracked in #2179 in this repo and https://github.com/stamblerre/gocode#3 in the upstream repo.\nClosing this issue.. Using your sample code and running go mod tidy, I dont see any errors. \nIs the pkghello folder under your global GOPATH?\nTo use Go modules, your code should be outside of GOPATH. > Is there needed that inferGopath should be set false?\nIf there is no src in your file path, then setting inferGopath to true will have no effect. But it is safer to set it to false when using Go modules.\n\nWhen go mod tidy, tool try to download pkgs to workspace\n$workspace\n\u2514\u2500src\n    \u2514\u2500pkghello\n        \u2514\u2500pkghello.go\n\nHere $workspace is your global gopath?\nYou are saying that running go mod tidy moved or copied your source files to the global gopath?\n. Is there any reason you have the src folder under pkghello? When inferGopath is set to true, it will set workspace/pkghello as GOPATH because your file is under workspace/pkghello/src. \nAt this point if you have GO111MODULE set to off or auto, then Go assumes you don't want to use modules and the packages will get created under workspace/pkghello/pkg.\nIf you set GO111MODULE to on, the modules will be used and packages will get created under workspace/pkghello/pkg/mod\nTo avoid all the confusion, I would strongly suggest to set infergopath to false when using modules.\n. Thanks for reporting this @edp1096 \nI have made a change to disable the infergopath setting automatically if you have it on when using Go modules. This change is out in the latest update to this extension (0.6.90). Since you have the setting go.useCodeSnippetsOnFunctionSuggest enabled, you are using snippets to complete the functions. When you are adding the parameters to the function, you are still in snippet mode.\nInside snippet mode, tab is for moving across the different tab stops in the snippet, so auto-completion is disabled.\nYou can\n- Press escape key to come out of snippet mode after auto-completing the function. Then start typing, you will get completions\n- Or you can set editor.suggest.snippetsPreventQuickSuggestions to false in your settings. This will enable auto-completions when you are in snippet mode.\n. Thanks for the PR!\nBy the way, if you are interested in winning a t-shirt in the hactoberfest, close this PR and open a new one in October. See https://open.microsoft.com/2018/09/18/hacktoberfest-2018-microsoft/?WT.mc_id=hacktoberfest-twitter-beverst for more details. Thanks for logging this feature request @prateek \nThis definitely can be done by modeling it after our build/lint/vet process such that the analysis appears in the problems view. \n\nUsing code overlays (similar to \"run test\"/etc).\n\ni didn't understand this though. Can you elaborate on this?\n@Southclaws Tasks is definitely a good way to do this. I am guessing we can automatically create the task by defining a task provider. @Qiaojiawei Thanks for reporting.\nThe go-outline tool is for 2 separate features in the background:\n- The outline view in the explorer\n- The codelens (buttons) for run tests and debug tests that you see above each test function.\nLet's figure out which of the 2 features are resulting in the high cpu usage.\nPlease add the below in your setting to disable the codelens (buttons) for run tests and debug tests\n\"go.enableCodeLens\": {\n    \"references\": false,\n    \"runtest\": false\n}\nNow, try to edit your test file. If you still see go-outline taking a lot of CPU then its because of the outline view.. Can you disable the outline view as well and then see what the CPU usage for go-outline is?\n\n. Thanks for the detailed steps!\nCan you try the same thing again with a smaller simpler test file?\nAnd does this happen only when editing test files? What about non-test Go files?. Thanks for reporting @tamasf97 \nI've logged https://github.com/tylerb/gotype-live/issues/3 to track this issue upstream.\n@tylerb \nWould you have some time to look into this?\nThis tool is being tracked in https://github.com/golang/go/issues/24661 as well. So, folks from the Go tool team would be able to help if you have any questions working with modules.\n. @tylerb Understood.\nOn a side note, can you resolve https://github.com/tylerb/gotype-live/issues/1?. Are you sure you don't have the go.buildOnSave disabled?\ngo build and go vet would both give the same results for the above code.\nResults from the former is shown as errors, the ones from the latter is shown as warnings.\nWhen the same position has both error and warning, we show only the error.\nI believe in your case, the build on save feature is disabled. Therefore, you are seeing the results from go vet\n. Also, I see that this is your first contribution to vscode-go. Welcome & Thanks!. The details must be in https://open.microsoft.com/2018/09/18/hacktoberfest-2018-microsoft/\nThat's all I know :). @tamasf97 is right.\n@affanshahid That definitely looks like the error from the live errors feature. Like @tamasf97 said, can you disable the live errors feature and try again?\nAlso, keep an eye on our wiki Go modules in VS Code for current status on Go modules support.. Closing as duplicate of #1950. @JoseFMP \nWe use the gorename tool to provide the renaming feature. As per the error you have shared, it looks like the gorename tool is not able to find the package.\nThis can happen if your package is not under GOPATH\nAre you using Go modules? If yes, the gorename doesnt yet support Go modules. . Yes, when not using Go modules, rename feature should work.\nRun Go: Current GOPATH. That is the GOPATH used by all the Go tools in the extension. Is the result what you expect?\nAlso see GOPATH in VS Code. @JoseFMP Can you try running gorename from the command line and see if the tool succeeds?. Are you sure vetshadowstrict is supported by gometalinter? I dont see any reference to it in the gometalinter repo. See https://github.com/alecthomas/gometalinter/search?q=vetshadowstrict&unscoped_q=vetshadowstrict\ncc @alecthomas\n. Thanks @alecthomas!. First lets make sure that the coverage data provided by Go has the static function covered.\n\nRun the coverage command\nOpen the View menu, choose Output\nChoose Go Tests from the drop down on the top right corner of the Output panel\n\nHere you will see the command used to get the coverage as well as the file to which the coverage was written.\nOpen this file, and check if the coverage there includes the range for the static functions. Start Without Debugging only works when the program points to a file and not a directory.\nTo Start Without Debugging, behind the scenes I run go run which only accepts file and not directory.\nSo change the program to your file or just ${file} and it should work. Closing as per \nhttps://github.com/Microsoft/vscode-go/issues/569#issuecomment-468360146\n@Strum355 I see that this was your first PR to this project, Thanks & Welcome!\nUnfortunately as discussed in #569, we won't be taking this approach due to perf implications. I hope you are not disheartened and will give some of the other issues with the \"help-wanted\" label a try if you are still interested in contributing to this project. The reason for this is that we run go build only on file save. So when you delete a file, the build is not triggered and so the errors are not refreshed.\nIf you dont want to commit a dummy change to trigger a save, you can also run the command Go: Build Current Package and the error should go away.\n. Good point.\nThe challenge always was to use the same link for the download, no matter the version of the extension.\nI can use the Github releases, but the link would change based on the tag name.\nThe only way to keep the link consistent would be to re-use the tag.\nThis requires a few extra steps from my side every time I have an update\n- delete existing latest tag\n- tag the current commit as latest\n- Edit the release to update the vsix\nWith https://github.com/Microsoft/vscode-go/commit/1347006d3b542728dd1edf2c18a4b14f302673c9 the above is in effect.\n. Sweet! Just curious, why use Class icon for struct and Struct icon for other types?\nAlso, dont forget to register for the Microsoft Hacktoberfest :). Ah, ok. That makes sense.\nI dont have a preference for Enum icon over Struct icon, so let's go with what you have at the moment.\nIf we get any feedback around this, then we can act on it.. @uudashr Good point\ncc @alecthomas who made the update.\n@alecthomas We could revert the change to the iferr and create a new snippet for what you had in mind i.e returning nil, err or err\n. I wanted to release the update today, so I have reverted the change to iferr and created a new snippet iferrret with the changes proposed by @alecthomas \nWe can continue the discussion here though.. You mean like this:\nif err != nil {\\n\\t${1:return} ${2:nil, err}\\n}?. This is fixed in the latest update to the Go extension (0.6.91). cc @alecthomas \n@stamblerre What else can @wolfeidau and @alecthomas  do here? If you can provide some pointers, maybe they can debug the issue and provide more details. Thanks @nezorflame \n@wolfeidau Do you still have this issue? If yes, can you respond to \nhttps://github.com/Microsoft/vscode-go/issues/1963#issuecomment-427902565 ?. The port 2345 is no longer used after I resolved #1906 \nWhich version of the Go extension are you on?\nAre you doing local or remote debugging?\nThe only place it is used now is in the snippet generated for the remote debugging. In that case, it is a snippet and is meant to be replaced with whatever port is being used on the remote machine.. Thanks!. @margusha I tried to repro your case and deleted the gocode-gomod binary from my Mac. When prompted to install, I got a ENOENT error (which gets handled as expected) at the place where you get ENOTDIR. \n\n\nthe issue seems to be that in case getBinPath(tool) returns just a toolname (e.g. gocode-gomod)\n\nThis is by design. cp.execFile takes file name or path. Either works. See https://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback\nSo I am unsure why you would get the ENOTDIR error..\nWhat version of node do you have?. Others, \nThe fix for the multiple GOPATH issue been pushed to master and is available in the latest beta version of this extension. @margusha  getBinPath returns the tool name when it cant find the absolute path to it. I've pushed a check to not to attempt to close gocode when we dont have the path to the tool beforehand. @margusha Thanks for the info! I was really curious about why I see only ENOENT and not ENOTDIR\nRegardless, you are right. We shouldnt be attempting to run cp.execFile when it is clear that gocode-gomod doesnt exist. I have pushed a fix for the same. The fix for this issue is now out in the latest update to the Go extension (0.6.92). I dont see this even after using your code sample...\nHave you changed the value for the below settings? If yes, can you share what you set them to?\n- go.useLanguageServer\n- go.docsTool. Now I see it.\nThanks @egonelbre!. Now that the upstream PR has been merged, please follow the below in VS Code to get the fix:\n- Run the command Go: Install/Update Tools\n- Choose godef-gomod\n- Press Ok to update.. Thanks for reporting @MathiasGr! And fixing it too :)\nI have pushed your fix to master. Can you try out the beta version of this extension and confirm that the fix works?. This is fixed in the latest update to the Go extension (0.6.91). @mhr3 Does setting \"go.gotoSymbol.includeImports\": true help?\n. @mhr It is not required to have that setting to have this feature to work. Its an unfortunate side effect of a refactoring I had done last week.\nI have pushed a fix to master to take care of this. Can you try the latest beta version of this extension? testify should be supported there with and without the includeImports setting.. @mhr3 Sorry about that! The link is updated.. The fix is now out in the latest update to the Go extension (0.6.92). @MathiasGr, I hope that you have registered for the Microsoft Hacktoberfest :). As per the docs on GO111MODULE, setting GO111MODULE to on forces the module behavior.\nFor your case, I would suggest to update go.toolsEnvVars setting in the workspace settings instead of user settings. This way, it will be applied only to the project you are moving out of GOPATH and not to all Go projects\nAnother way to go about this is to not mess with GO111MODULE at all. Run go mod init as soon as you move your project out of GOPATH. This will generate the go.mod file and from that point on, the Go extension will identify the use of Go modules and you will not see the build error. Are you using Go modules?\nIf yes, then this is a known issue.\nThe tools we use to provide the definition information use go list which is known to be slow when using Go modules.\n. @lanox The slowness issue when using Go modules is a known issue as mentioned before.\nWhen you say that go to definition is not work at all, are you still using modules? Can you check if you are using the language server? The language server doesnt work with modules either.\nIf you are using modules and go to definition is not working, try changing the setting go.docsTool to gogetdoc and see if that helps. Thanks for this @chiijlaw \nCan you point me to the place which you referred to when you add this text?. Also, dont forget to register for the Microsoft Hacktoberfest :). This is fixed in the latest update to the Go extension (0.6.91). We get the variable information from delve. \nCan you try running dlv from the command line to debug your code, run locals to get the local variables and see if animal points to dog or cat?. I would stick to just showing the non-shadowed value.\n. > Can we subscribe to some event when hovering over a variable?\nExtensions dont get to subscribe to such events. When not in debugging mode, the hoverprovider implemented by the extension is called by VS Code to get the data for display.\nIn debugging mode, whatever text is being hovered on is then looked up in the variables that the debug adapter has returned in the variablesRequest.\nSo, as far as I know we cannot do much here.\nBut showing the shadowed variable with () in the variable pane is something we can definitely do. Shadowed variables are now showing inside parentheses in the latest update (0.9.0) to the Go extension.\nThanks @jhendrixMSFT!. @jrwren I've already pushed a fix for this issue a few days ago and the fix is available in the latest update to the Go extension. Sorry about that.\nIn case, you are interested in the fix, see https://github.com/Microsoft/vscode-go/commit/ddd26356d535fe8653c0cf6619975b167b34f41e\nAlso, I dont believe the hacktoberfest label is needed. This will already be counted automatically as far as I know.\nRegardless, if you want to pick up any other bug, you are most welcome.\nLook for issues with the label \"help-wanted\" or \"good-first-issue\". Also, dont forget to register for the Microsoft Hacktoberfest :). No problem :) I was going through all the PRs and wrapping them up to be ready for the next update . cc @ianthehat, @stamblerre. @Betula-L Thanks for reporting!\nI see that @egonelbre has already submitted a PR to fix the issue for godef. The PR is merged, so godef should be good. Thanks @egonelbre!\n@stamblerre has pushed a fix for gocode as well.\nAll,\nPlease run Go: Install/Update Tools, select godef-gomod and gocode-gomod, press OK to install/update them.\n. @pbarker We use the @ianthehat's forked version of godef to provide the Go to definition feature when using Go modules. You can choose to use gogetdoc instead if you want by adding the setting \"go.docsTool\": \"gogetdoc\"\nFor more details, please see Go modules support in VS Code. We won't be moving the fork to the Microsoft namespace, because Microsoft doesn't own the fork and neither do we maintain it.\n@ianthehat leads the Go tools team in Google and is leading the effort in adding Go modules support in various Go tools in the Go ecosystem.  See https://github.com/golang/go/issues/24661. I am working with this team to provide the Go modules support in VS Code.\nToday's incident was unfortunate, but it by no way means that @ianthehat is unavailable.\nYes, there was a delay in merging the PR, but I am sure @ianthehat and his team are on top of it to avoid such delays in the future.. @uudashr,\nI hope that you have registered for the Microsoft Hacktoberfest\nYou definitely deserve the t-shirt for all your contributions to vscode-go :). @olivierperes, I see that this is your first contribution to vscode-go. Welcome & Thanks!\nI hope that you have registered both for the Microsoft Hacktoberfest and the one from Digitalocean\nHappy Coding!. How in the world did this issue get 38 upvotes in 14 hours???\nI didnt know we had such a traffic.\n@AlekSi Did you happen to tweet this issue? Or use some other magic to get this much attention? I would love to know as I\u2019d like to follow whatever you did when I want more people to try out some of the changes before I release an update to this extension :slightly_smiling_face:\nAnyway, I tried using the other icon as suggested. Below is the comparison (left is old, right is new)\n\nAs you can see the other icon doesn't look that great either .... > So, to move forward, we need either a new icon or to add eyes to the current one.\nThats what I think too.\n\nOn that picture \u2013 what size it is?\n\nIn that picture, I am on a Mac with zoom level 1 (`\"window.zoomLevel\": 1) and the default light theme.\nOther than that I am using the default settings.. Apologies for the delay in getting to this.\nYou can add the below in your settings and godef picks it up and works as expected:\n\"go.toolsEnvVars\": {\n    \"GOFLAGS\": \"-mod=vendor\"\n}\nWhat we can do is automatically set the GOFLAGS environment variable when a vendor folder is detected at the same level as the go.mod file.\nBut before doing that, I have a question. Do you know what the \"main module\" is referring to in How do I use vendoring with modules. Is it the module that is at the same level as the go.mod file?\n. Do you see anything different when you use the setting \"go.docsTool\": \"gogetdoc\" ?. > Why not have that be the default?\nWell, thats a long story :( I have #1025 tracking the need to make it default.\nI just never got around to making a good benchmarking exercise to prove that it will not affect the performance.. Formatting not working (unless you choose gofmt) when using Go modules is a known issue as the formatting tools themselves (goreturns, goimports) dont support Go modules yet.\nPlease see Go modules in VS Code which tracks the status of Go module support\n. The bug has been fixed upstream and is available in the latest Insiders.\nCan folks here try the latest Insiders and share if the issue is resolved or not?. @freezlite's fix is now out in the latest update to the Go extension (0.7.0)\nThanks @freezlite!. @jpeletier \"now\" out for sure :). @sebglon The errors you are seeing are not related to the current issue. Please log a new issue with these details along with a sample code where you see the issue. @sebglon The errors you are seeing are not related to the current issue. Please log a new issue with these details along with a sample code where you see the issue. > I also had a question re: calling go install? Why use -o rather than calling go install with GOPATH set?\nTo support Go modules, we use forks of gocode and godef. But we do not want these forks to replace the original binaries. This is because the forks are slower than the originals, and we dont want to use the forks when you are not using Go modules.\nIn order to do this, we use go get -d so that the tool is not installed and then use go build -o so that we are free to rename the binary as gocode-gomod/godef-gomod.\n. @willfaught Can you provide a small sample code and elaborate on what you would expect vs what actually is being shown?. Thanks for the details @willfaught \nThis should be do-able as long as delve passes a different type for pointers.\nPRs are most welcome to fix this.\nCode Pointers:\n- Build and Debug extension\n- Debug the debugger\n- variablesRequest is the place where we extract the information from delve to show in the variables pane\n. This feature is now available in the latest version of the Go extension (0.8.0)\nThanks @brycekahle!. Thanks for reporting @altimac \n@roblourens Do you know what needs to be done to enable the context menu entries here?. Thanks @isidorn \nMarking this as help-wanted. PRs are most welcome.\nCode Pointers:\n- Get started with a local set up of the Go extension\n- Debug the debugger\n- Update variableRequest to add the evaluateName property on the variables\n. This feature is now implemented with https://github.com/Microsoft/vscode-go/pull/2020\nUntil I release an update, you can get the fix using the beta version of this extension. This feature is now available in the latest update to the Go extension (0.6.0)\nThanks to @karthikraobr!. @sejas,\nSince @sphawk made the reqd changes and added tests as well, I have merged #1743 instead.\nFeel free to pick up any other issue labeled good-first-issue or help-wanted\n. Thanks for reporting @bsvec \nIt was indeed an oversight.\nI have update the release notes in the wiki to point to the Changelog.md file in this repo which contains the same information.. Thanks for reporting this @mrwonko.\nYes, a fix has been pushed to master.\nUntil I release an update, the workaround which is already mentioned above is to manually run go get -u -v golang.org/x/lint/golint. To first decide if this is a issue with VS Code, the Go extension or the language server, can you try with an older version of VS Code and the Go extension and check the performance?\nOlder version of VS Code can be found in https://code.visualstudio.com/updates\nOlder version of the Go extension can be found in https://github.com/Microsoft/vscode-go/releases \nJust download the vsix file and run code --install-extension Go-x.y.z.vsix. @primalmotion, @gow You opened and worked on the same project in both new and old versions of VS Code? \n@dbaeumer Any idea why the latest VS Code would cause such an issue? The version of language client used in the Go extension is 4.3.0\n. @ankur-anand This issue is tracking the problem of the Go language server consuming a lot of CPU where as your issue is independent of the Go language server, therefore can you please log a separate issue and we can take it from there?. @huttarichard Do you also not see the problem in 1.27.2? You can get the older version from https://code.visualstudio.com/updates/v1_27. @pmalekn Can you also check if you see the same when using VS Code 1.27? https://code.visualstudio.com/updates/v1_27\nAlso give the Insiders a try. @primalmotion Does this occur even in simple small code bases? If not, then can you point me to a codebase where you see this consistently? What worries me is that this is a recent issue with recent VS Code versions. So even though there is a tracking issue in the language server repo, this can be something triggered by a recent change in VS Code itself.. @sandipb Thats a good observation. Disable both the outline view in the explorer viewlet and the breadcrumbs feature and see if that makes any difference.\nOutline view: \n- Open the File explorer\n- Right-click on the section header \"OUTLINE\" to disable it\nBreadcrumbs:\n- View -> Toggle Breadcrumbs to disable it\n@primalmotion Can you try the same?. @sandipb \n\nIs there a way to force the outline view to use the default outline cli (go-outline) regardless of whether langserver is enabled?\n\nThe outline view in the explorer uses the same code that powers the Go to Symbol in file command. At the moment, there we dont allow the pick and choose of features from the language server\n\nJust now had an editing session with the outline disabled. Still had the issue with langserver.\n\nKeep the outline view and breadcrumbs disabled, kill the current language server process and try again just to be sure.\nWhen you observed the trace logs in https://github.com/Microsoft/vscode-go/issues/1994#issuecomment-439221606, did you by any chance get to  compare it with the logs you get when using the older VS Code. To Start without Debugging, it is important that you have a debug configuration in the launch.json file with program pointing to the file you want to run. This is because behind the scenes we use go run which expects a file path. In the absence of this, Start without Debugging falls back to normal debugging. You can update the autogenerated configuration to use ${file} instead. That will use the file in the currently open editor.\nI have updated the FAQ accordingly.. This will need some more time from my side to look into, I'll get back to this next week.. @karthikraobr Thanks for your patience, I'll get right back to this as soon as I release the current update which should be sometime this week.. @karthikraobr No apologies needed :) You have every right to give the reminders.\nI have been a little busy at work from my end, and so couldnt get back sooner. I'll definitely take a look soon. I have refactored the code a bit to avoid checking for comments when there is no coverage applied in the first place and also the code for isPartOfComment as well. This fix is out in the latest update to the Go extension (0.6.92). Thanks @karthikraobr!. Thanks for the PR @karthikraobr!\nAlso, I see that this is your first contribution to vscode-go. Welcome & Thanks!\nI hope that you have registered both for the Microsoft Hacktoberfest and the one from Digitalocean\nHappy Coding!\n. Can you provide a sample code that I can try this on?\nSome screenshots that depict the issue will also help\nAlso provide the Go version you are using and if you are using Go modules.. Maybe gogetdoc gives better results. Can you try the below?\n- Add \"go.docsTool\": \"gogetdoc\" to your settings\n- Run the command Go: Install/Update Tools, choose gogetdoc, press Ok to install it\n- Try the hover. Thanks @jrwren!\n@margenton-dbg #1966 is tracking this issue and @jrwren's fix is available as described in \nhttps://github.com/Microsoft/vscode-go/issues/1966#issuecomment-430028529. Can you provide a small sample code where I can try to reproduce this issue?. I followed all the steps as in the video on the sample code, but I dont see the same error.\nI am on Windows, using VS Code 1.28.2, Go version 1.11 and the latest VS Code Go extension.\nCan you share your set up information? OS, VS Code version, Go version and the Go extension version.. Thanks @yinfxs \nI see this on Mac, but on Windows.\nWill look into it.. @yinfxs I am trying to reproduce this issue again with your sample code, but the video in your comment is no longer available (its just a snapshot now). Can you re-share the steps?\n\nThe problem only occurs if one adds/removes breakpoints during a debug-session.\n\n@bihe Adding a breakpoint is only possible either before a debug session starts or when another breakpoint is hit. Are you seeing this issue when trying to add a breakpoint when another breakpoint is hit or when the program is running?\n@ericpitcher, @mbanzon If you are seeing this issue with the sample code @yinfxs has shared in \nhttps://github.com/Microsoft/vscode-go/issues/2002#issuecomment-431677217, can you provide me the exact steps?. Thanks for the details @bihe.\nThe issue of breakpoints getting added successfully only before a debug session or when another breakpoint is hit is a limitation on delve's side which doesn't allow interacting with the target process when it is running.\nYou are right, this isn't documented well even though it has come up multiple times as issues in this repo. I have updated the wiki on debugging Go code with this extension appropriately \nThe fact that the debug process itself doesn't get cleaned up properly and so further debug sessions fail due to the \"listen tcp :8080: bind: address already in use\" is an issue that we can look into.\n. I am a little pressed for time at the moment. If anyone is interested in investigating the cause for the debug process not ending properly, here are a few pointers\n\nAdd \"trace\": \"verbose\" to your debug configuration. This will print logs from the debug adapter and you can see each step executed by the debug adapter. \nIf the above doesn't provide any hints, then add  \"showLog\": true, \"logOutput\": \"rpc\" to your debug configuration as well. This will print logs from delve corresponding to each request/response between the debug adapter and delve.\n\n. Thanks @ericpitcher!\nFrom your logs its clear that the call to delve to create the breakpoint at https://github.com/Microsoft/vscode-go/blob/latest/src/debugAdapter/goDebug.ts#L722 never actually returns. I guess at this point, any further requests to delve doesnt get responded to which is why the eventual Halt request doesnt reach it and so it is unable to gracefully close the program.\nWe have #2128 to fix the issue of adding breakpoints when the program is running. Once that fix is in, we shouldnt be having this issue anymore.. Adding/Removing breakpoints when the program is running is now possible in the latest update (0.9.0) to the Go extension.\nHuge thanks to the amazing @xiphon who made this happen! And @muravjov for his observations that lead to the fix.. The test output was never colorized in the first place :)\nHow does the test output look when you run it in a terminal?. As mentioned in https://github.com/Microsoft/vscode-go/issues/2003#issuecomment-430068305, colorization never worked in the output channel for test output.\nThe example in https://github.com/Microsoft/vscode-go/issues/2003#issuecomment-430539228 is from running the tests in a terminal directly.\nTo show colors in the output channel, we need to provide a grammar to parse the contents first.\nAnother alternative is to run the tests in a terminal using tasks. To achieve the colors, this extension should use tasks to run the tests and show the output in the integrated terminal which is capable of showing the colors.. These snippets are for an external package and so will not be applicable to all Go users.\nTherefore, I am not too inclined to accept this PR.\nYou can still use User Snippets to create these for your own use. Or you can use the new project level snippets for anyone working on your project to use.\nYou can also create your own extension that contributes these snippets and publish in the marketplace.. I cant repro this...\nBefore pressing enter, do you see the suggestion/auto-completion widget open?. Completions being triggered when . is typed in multi line comments is being tracked in #1072\nStopping them in single line comments is easy and is implemented already.\n@dhowden The case of floats is interesting. That I believe is a bug in gocode itself. I have logged an upstream bug https://github.com/mdempsky/gocode/issues/74 to track this.\nMeanwhile, to avoid such scenarios, you can disable the setting editor.acceptSuggestionOnEnter. Suggestions are accepted if you press either ENTER or TAB. Disabling this setting stop accepting suggestions when pressing enter.. @dhowden The upstream bug is fixed. Can you run Go: Install/Update Tool, select gocode, press Ok to update it?. @dhowden Can you log a separate bug for that?. I hope you have registered for the Microsoft Hacktoberfest :). @peteat, @jinmatt, @jpopadak Can you try the latest Insiders?. @peteat, @jinmatt, @jpopadak Can you try the latest beta-version of this extension?. The fix for this issue is now out in the latest update to the Go extension (0.6.92). @glerchundi is right. The fix is in master.\nYou can try the latest beta version of this extension which has the fix until I release an update sometime this week. Hey @gilcrest,\nWhen there is a PR which has a comment ending with something like \"Fixes #\" followed by the issue number, or there is a commit with the commit message following that patter, the issue gets automatically closed when the change makes it to the master branch. \nThis said, not all PR, commits follow this pattern and sometimes, the fix for an issue will be in master, but the issue will still be open.\nHaving a consistency here would mean that I have to go and re-open issues that were fixed. It doesn't sound like much, but it is at the end of the day, an overhead I can do without. Especially, because its just me managing this project.\nI also tend to close a new incoming issue if the fix is already in master with a note explaining just that. This helps me in managing the influx of issues and the triaging process.\nIf there was already another issue, I would add the label duplicate, and then I would add the link to it as well. This is what I missed to do for the current issue that you logged. It was being tracked in #1997\nTherefore, the best thing to do before logging an issue would be to look at both open and closed issues. If there is a merged PR linked to the issue, then the fix is in master.\nOnce I release an update, there are a couple of things I make sure I do\n- Ensure the Changelog has links to every bug/feature request and PR that made it to the release\n- Update each bug/feature request  that the fix is now available in the latest update. I don't do this for issues marked as duplicate though.\nRegardless of this, I do appreciate you logging this issue. It got quite a few upvotes that gives me an idea of how many people had the issue.\nThanks! and Happy Coding!\n. Thanks for the PR @alexdor!\nAlso, I see that this is your first contribution to vscode-go. Welcome & Thanks!\nI hope that you have registered both for the Microsoft Hacktoberfest and the one from Digitalocean\nHappy Coding!\n. @eternal-flame-AD Can you run Go: Install/Update Tools, select gocode and press Ok to update it? Then try vscode with your changes and see if it works without needing to specifically installing the imports with the other GOOS?. @eternal-flame-AD Last question: The changes in this PR are also needed for the problem to be fixed, correct? Or only updating gocode was enough?. This issue is resolved upstream in VS Code.\nPlease update to the latest VS Code (1.28.2) and to the latest version of the Go extension (0.6.92)\n. @L1qu1d1c3 This repository is for the Go extension to VS Code. Please log your issue in the main repository for VS Code which is https://github.com/Microsoft/vscode. The fix for this is now out in the latest update to the Go extension (0.6.92). The UI behavior is managed by VS Code itself and extensions have no control over it. The extensions only provide data to VS Code. Please log this issue in the main VS Code repo at https://github.com/Microsoft/vscode. There was no change related to build/vet in the 0.6.91 release. Can you install an older version of the extension to confirm that this issue got introduced in 0.6.91? \n\nYou can get the older version say 0.6.89 by downloading the vsix file from https://github.com/Microsoft/vscode-go/releases/tag/0.6.89. \nDisable the extensions.autoUpdate setting in VS Code\nThen run code --install-extension Go-0.6.89.vsix to install the older version\n\nCan you also share your settings for go.buildOnSave and go.VetOnSave?\nDo you see this issue in smaller projects as well?. The issue with godoc is resolved in #2025. \nI have pushed a separate fix for the issue with gocode-gomod\nCan someone here try the beta-version of this extension to confirm the fix?\n. @Dexus I believe the problem was only with gocode-gomod and not godef-gomod, and since that was stuck, we never go to the point of declaring all updates as successful.. @Dexus Can you elaborate a little more? . @Dexus Great!\n@sonofachamp Thanks for confirming the fix!\nI've published an update with the fix.\nThanks for reporting everyone!. > Is there a way to get the go plugin to run 'go env' to see what environment variables it's getting passed?\nRunning go env in the terminal should give the same result as when it is run by the plugin. \nTo see the environment variables the plugin gets, run Help -> Toggle Developer Tools -> Console -> process.env\nSpeaking of proxies, can you see if anything in https://code.visualstudio.com/docs/setup/network helps?\n. > So, the plugin is getting the environment variable, but it's not passed through to the child process, go.exe.. \nThe extension host process gets the same environment variables as what you saw in the console. The same are passed to the child process that runs go.exe.\nCan you run the extension from source to see the exact environment variables being passed? Its is pretty straighforward.\n\nBuild and Debug extension\nAdd a breakpoint at https://github.com/Microsoft/vscode-go/blob/0.6.93/src/goInstallTools.ts#L378\nAt that point look at the values for process.env['GOPROXY'] and envForTools['GOPROXY']. Hey @lrstanley,\n\nApologies, I didn't have time to try out athens myself. But by what you are sharing it looks like VS Code is getting the environment variable (because you see it in the integrated terminal), but it isn't passing it on to the extension host process that runs all the VS Code extensions (this is why you don't see it when you tried to print it out when you changed the source code).\nI am including @arschles in this thread who uses athens as well as VS Code.\n@arschles Have you seen anything like this before?\n@lrstanley One last thing I would like you to try is to run VS Code directly from the command line. Just type code (or code-insiders if you are using the Insiders version of VS Code) from the command line. This ensures that VS Code inherits all the environment variables from the command line.. > Yes, I have also invoked it from the command line, from the same environment where go env shows the GOPROXY environment variables (and go get  requests through Athens work).\nAnd this is the same environment where echo %GOPROXY% is the same as go env GOPROXY?. Ok, so the \"GOPROXY\" environment variable is available in your Git Bash and command prompt, but when you run VS Code from either, it doesnt pass the same to the extension host.\nI have logged an upstream bug https://github.com/Microsoft/vscode/issues/65113 in VS Code. Lets see if someone there can help. Good to know that the env variables are getting passed around properly.\nSo to sum this up, since I disable module support when running go get for the Go tools, GOPROXY doesn't work which then lands you with proxy issues in corporate environment.\n\nI am in a corporate environment, and we can't easily go get things,\n\nThere have been other users who had these proxy issues in corporate environment before. Using the http.proxy setting has helped out in those cases. Can you give that a try?\n\nI don't think it's the worst to have these things dumped into the dependency list of the given project (and... downloaded over and over again for multiple projects).\n\nWe really don't want to get into a place where the tools need to be downloaded into more than 1 location. Does running go get on all the dependent Go tools using Athens work even for tools that do not support modules yet?\nThe reason why I disabled GO111MODULES when running go get was #1919.\nWont keeping GO111MODULES on result in the tools that dont use modules to fail the go get process?. Why is that you dont see the same issue as #1919 when using Athens and GO111MODULE enabled?. @MagnumOpus21 Are you sure the last commit  makes a difference?\nFile names with spaces would have worked even without that commit as far as I understand.\nSince that is a very corner case, I am ok not supporting the scenario where file name has spaces.\nI am more concerned about https://github.com/Microsoft/vscode-go/pull/2027#discussion_r226883288. No problem @MagnumOpus21, take your time.. Sorry @torn4dom4n, there was already a PR #2013 addressing the same issue that I merged this morning.. Thanks for the investigation @freezlite!\nCan you provide a small sample code where I can get a repro of the <autogenerated> case? I cant repro it with the code that I have.. I would still appreciate a code sample where <autogenerated> is returned by delve. @freezlite And how are you debugging this? Using tests? I dont see any code calling https://github.com/goji/goji/blob/master/dispatch.go#L11. Thanks for the PR @cristim \nI did log an upstream bug for this in gocode this morning. https://github.com/mdempsky/gocode/issues/73\nWe still have lots of users on Go 1.8. So if we can get an upstream fix for this issue, I would prefer that to stopping support for Go 1.8 altogether.\nLet's wait and see if we get a response upstream\ncc @stamblerre . @stamblerre brings up a good point in https://github.com/mdempsky/gocode/issues/73#issuecomment-431616650. We can use nsf/gocode for Go versions < 1.10\n@cristim Would you be interested in looking into that?\nCode pointers:\n- Build and Debug extension to have a local set up of this extension up and running\n- Instead of directly accessing allTools in goInstallTools.ts, have a function that accepts tool and goVersion. This way we can use the nsf/gocode for older versions of Go . I've made the changes to fallback to nsf/gocode for Go 1.8. @chuacw Based on the error, it looks like the folder for these 2 tools in the toolsgopath is corrupted somehow. Try again after deleting the folders for these 2 tools in your toolsgopath/src folder\n. This should be fixed with https://github.com/Microsoft/vscode-go/pull/2029\nCan you try our latest beta-version. The 502 error is not related to the Go extension. The update server for VS Code was down yesterday for some time. It should be up now.. The fix for this is now out in the latest update to the Go extension as well (0.7.0). Manual linting can be triggered using the command Go: Lint Current Package or Go: Lint Workspace.\nThese commands will use the settings from go.lintFlags just like when the linter is run on file save.\nOne way to achieve what you want is to update the go.lintFlags, run the above command. Then change the flags back.\nAnother way is to use tasks which you can set up any way you want to use at any time you want. See https://github.com/Microsoft/vscode-go/issues/2046#issuecomment-432848486. Can you try running go get -u -v github.com/mdempsky/gocode from the terminal and see if that succeeds or if you get the same error?. Thanks @gangachris \nFrom the 0.6.90 release of this extension on 3rd of this month, we are using version 2 of delve apis by default. So all you need to add in your settings is\ngo.delveConfig {\n    dlvLoadConfig: {\n       maxStringLen: 100\n    }\n}\nThe issue with the context menu entries being disabled is covered in #1990. What did you do to get that command to run?\n- Used one of the commands to run the tests?\n- Used code lens to run the tests?\n- Used the command to toggle test coverage?. Can you try the latest beta version. I tried your example and the coverage file that gets generated is empty for me.\nCan you open /tmp/vscode-goQL6BAQ/go-code-cover which is the cover profile file in your case and share its contents?. As you can see Go itself doesnt support this scenario. There is no coverage data in that file. Therefore, we cannot do much from the editor's perspective.. Thanks for reporting @SteelPhase!\n\nI'm assuming this means that instead of redrawing the code coverage, it's just layering the code coverage over the existing rendered panel.\n\nI believe so too.\nPRs are welcome to fix this bug. \nCode Pointers:\n- Build and Debug the Extension\n- applyCodeCoverage is called every time the active editor changes. For example: when you move focus from one split editor to another\n- We need to disposeDecorators before adding a new layer of decorators.\n. This is fixed with https://github.com/Microsoft/vscode-go/pull/2047\nUntil I release an update, you can get the fix using the beta version of this extension. The fix is now out in the latest update to this extension (0.7.0)\nThanks @diogogmt!. We just merged a PR last week that should fix this. Try out our beta-version. @steeve That's right. Fixed it.. Closing this PR in favor of #2068. \nSorry about closing this PR, I didnt realize that #2068 was from a different person\nI'll merge this PR which will fix the bug, and the refactoring can be dealt with in #2068. @dimdiden Local variables in the debug viewlet are only visible when a breakpoint is hit. In your screenshot above, the code is running and no breakpoint is hit.\nLet me know if I missed anything and I can re-open the issue. Unfortunately, we are only aware of the breakpoints created in VS Code itself. I dont see how we can support programmatic breakpoints like the ones created using runtime.Breakpoint() :(\n. @dimdiden \nWhen a breakpoint is hit, the debug tool bar looks like the below\n\nYou will see the play button\nYou can also see the breakpoint being hit. The whole line gets highlighted.\nThe running code is paused and we are able to ask delve for all the available variables and their values.\nIt is at this point that the debug pane will show the variables. \nWhen you hit continue after this or when no breakpoints are hit, then the debug tool bar looks like how it does in your screenshots. No play button, instead you see the pause button.\nAt this point the code is running, there is no breakpoint hit and therefore no variables to show.\n\n. I am able to hit the breakpoint even with the loggingHandler\n\nWhat version of Go and delve are you using ? And what OS are you on?\nMy details:\n-  go version go1.8 darwin/amd64\n- Mac OS\n- Delve Debugger\nVersion: 1.1.0\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $ . I also tested with go version go1.11.1 darwin/amd64. I am using default too :)\nAdd \"trace\": \"verbose\" to your debug config and try again.\nThis will add logs in the debug console. Please share that. @dimdiden That was for when you were using runtime.Breakpoint(). Please send the logs for the case when you create the breakpoint using VS Code UI. \nIn the video, you show both the cases i.e with and without using the loggingHandler. Share logs for both cases.. This is most likely related to #1987\nCan you use the latest beta-version of this extension which has the fix?\n. Great! Happy Coding!. The fix for this is now out in the latest update to the Go extension as well (0.7.0). Thanks for the PR @chrislewisdev and my apologies for not getting to this PR sooner.\nIt somehow got lost in the sea of PRs that we received during Hacktoberfest.\n@jhendrixMSFT I recall we recently discussed the problem this PR is trying to resolve and had come up with a solution that would avoid parsing the file and look for the main function. Do you recall what we landed on?. > the solution was to pass the file name to dlv, e.g. dlv debug main2.go\nAnd if the file being passed does not have the main function, then delve would throw an appropriate error?. Thanks @jhendrixMSFT \n@chrislewisdev Here is the way we want to go forward\n\nWhen the program attribute points to a file, pass this file to the delve debug command instead of passing the import path to the package like we do today\nWhen the program attribute points to a directory, we should do what we do today i.e pass the import path to the package to dlv debug\nUpdate the default value for program attribute in goDebugConfiguration.ts file to be {$file} instead of ${fileDirname}. Thanks for letting us know about that @chrislewisdev \n\nIn that case, I'll close this PR.\nI have also updated the original issue with our latest approach. See \nhttps://github.com/Microsoft/vscode-go/issues/1229#issuecomment-473731132. That does sound cool. The minimap is core VS Code feature to which extensions cannot contribute at the moment and so we cannot implement this feature.\n. AFAIK the language server doesnt support modules yet.\nBut just to be sure, please log an issue at https://github.com/sourcegraph/go-langserver . From your screenshot, the expected selector or type assertion, found 'return' error is showing up against the textDocument/documentSymbol request. That is related to the file outline feature and not auto-completion feature. \n\nBut I filed the issue here because it looks (?) like, from that error, vscode might be passing the wrong location through to the langserver?\n\nCan you elaborate as to what part of the error message suggests this?\nAre you using the completion feature from the language server as well? Can you share your settings related to the language server?. > In older versions of gocode, package will probably end up as undefined. With the current code, it will end up looking the symbol in the current package. This might not be desirable... So maybe it should be prevented with a prompt to update gocode?\nAnd in the newer gocode, is package an empty string or undefined for symbols from current package? If we can differentiate between the 2 cases, then yes, we should skip the doc finding for the older gocode and prompt to update gocode. Thanks for all your work!\nI have pushed https://github.com/Microsoft/vscode-go/commit/3ba34e0ae5c02079af8da5892389c12aa7647c2f that converts the doc string to markdown. It looks better now.. > godoc comments do have some very minimal formatting: paragraph handling (Similar to Markdown) indented preformatted text, hyperlinks, and sections (If I'm not missing any...) But no things like bold/italic and such.\nCan you point me to some examples?. I am aware of the markdown syntax elements like ** or ~~ causing issues. We already have this problem in the hover widget. See #1486\nBut since that is a corner case, I am ok with both the hover and completion widgets having this problem.\nWhen we do find a solution, we can apply it to both widgets.\n. @segevfiner You mentioned the below when I asked about the need for cwd\n\nYeah, I got bitten by that when testing. It uses it to figure out which package we are in when gocode returns package===\"\"\n\nI tested the case of symbol from same package, I don't get any docs...\n\n. In the below case, I am triggering suggestions on a saved file\n\n. I believe this is being tracked in #263. Thanks for the PR @angulito \n2032 also is a PR to do the same. Like I have mentioned there, I dont want to stop support for Go 1.8\nFeel free to follow the steps in https://github.com/Microsoft/vscode-go/pull/2032#issuecomment-431619982 instead to fallback to the older gocode for Go versions less than 1.10. I've updated the travis file to skip golint and gometalinter for 1.8\nAlso updated the tests to not test these 2 tools for 1.8. Thanks for the contribution to snippets @nephe \nWe have recently come up with a new policy when it comes to contributing snippets to this extension.\nPlease see Contributing Snippets in our Contributing Guide.\nTherefore, please log an issue for this addition. If we get enough upvotes for it in a month or two, then we can include this in the extension.\nThanks again for your contribution and sorry for the trouble.\nHappy Coding!. @sebglon \n- Can you provide a small sample code that I can try this on?\n- Are you using modules?\n- Some screenshots will also help. In that case this might be related to #1987\nThis is fixed upstream in VS Code and therefore you can try the latest Insiders.\nThe fix is also in the master branch for the Go extension. So, if you dont want to use VS Code Insiders, then use the latest beta-version of this extension. The fix for this is now out in the latest update to the Go extension as well (0.7.0). The suggestion for the exported member name should only appear in the start of the comment.\nPRs are welcome to fix this\nCode Pointers:\n- Build and Debug the Extension\n- The fix should go here: https://github.com/Microsoft/vscode-go/blob/0.6.93/src/goSuggest.ts#L87. We use external tools to fetch this information. By default, this is provided by godoc.\ngogetdoc does a much better job\n@Delphier \n- Set go.docsTool setting to gogetdoc\n- Run Go: Install/Update Tools -> Select gogetdoc -> Press Ok to install it\n- Reload VS Code and try the hover again.\nAlso, please log this isssue for the godoc tool as well.\n@karthikraobr We just read the output from these tools and avoid doing any formatting on our own.. Thanks for the contribution to snippets @nephe\nWe have recently come up with a new policy when it comes to contributing snippets to this extension.\nPlease see Contributing Snippets in our Contributing Guide.\nTherefore, please log an issue for this addition. If we get enough upvotes for it in a month or two, then we can include this in the extension.\nThanks again for your contribution and sorry for the trouble.\nHappy Coding!. Thanks for the contribution to snippets @nephe\nWe have recently come up with a new policy when it comes to contributing snippets to this extension.\nPlease see Contributing Snippets in our Contributing Guide.\nTherefore, please log an issue for this addition. If we get enough upvotes for it in a month or two, then we can include this in the extension.\nThanks again for your contribution and sorry for the trouble.\nHappy Coding!. Also, I see that this is your first contribution to vscode-go. Welcome & Thanks!\nI hope that you have registered both for the Microsoft Hacktoberfest and the one from Digitalocean\nHappy Coding!. Thanks!. I didnt realize that Test, Benchmark and Example were valid names for tests. Thanks for reporting!\nPRs are most welcome!\nCode Pointers:\n- Build and Debug the Extension\n- The regular expressions to update are at https://github.com/Microsoft/vscode-go/blob/0.6.93/src/testUtils.ts#L27-L29. The fix for this is now out in the latest update to the Go extension (0.8.0)\nThanks @Charliekenney23!. Thanks @Charliekenney23!. Thanks for the contribution to snippets @a-h\nWe have recently come up with a new policy when it comes to contributing snippets to this extension.\nPlease see Contributing Snippets in our Contributing Guide.\nTherefore, please log an issue for this addition. If we get enough upvotes for it in a month or two, then we can include this in the extension.\nThanks again for your contribution and sorry for the trouble.\nHappy Coding!. gorename doesn't yet support modules.\nSee Go modules support in Visual Studio Code\n. Re-working this to look like \nhttps://github.com/Microsoft/vscode-go/pull/2075#issuecomment-435472584 would be simple for simple types like int, but would get complicated for arrays and maps I believe.\nThe current solution should be good enough.\nThanks!. Thanks for reporting @kidlj \n@ianthehat, \nThere are 2 parts to this. \nWhen running the Go to definition cmd from inside pkg/mod, VS Code doesn't use your fork as it doesn't identify the current folder to be using modules. I can change that. \nBut even after I make this change, I get a godef: no object error from your fork of godef. What is the expectation here?\n. @ianthehat After syncing the latest from your fork of godef, now I get the error godef: There must be at least one package that contains the file for all symbols regardless of std lib or external packages.. I have pushed 2 fixes that should essentially fix the problems listed in this issue\n- Use current project that is opened in VS Code as cwd for all Go to Definition operations\n- When the current file is from the module cache ($GOPATH/pkg/mod), use the module aware tools.\nPlease try the latest beta version . The fix for this is now available in the latest version of the Go extension (0.8.0). We use the godoc binary that is shipped with the Go distribution. You must be missing that. Check your $GOROOT/bin\nSee https://bugs.archlinux.org/task/60537\nWe should fallback to go doc in such cases though... In the latest update to this extension (0.7.0), I have replaced the use of godoc with go doc. So this should be fixed now.. @brycekahle Like you said, this just increases the depth from 20 to 50\nHow about adding a setting to the debug configuration so that the user can set the depth instead?. > Perhaps it is worth filing an issue on delve to have better support for stack frame paging?\nFor delve, looks like something similar has already been discussed. See https://github.com/derekparker/delve/issues/989 due to which the default depth for delve is now 50\n\nFYI changing this to 20 by default, will not allow any paging unless the setting is changed\n\nGood point. Given that delve itself has made the default to 50 and that this won't affect normal programs that don't usually go that deep, keeping the default as 50 should be ok\n. Works fine on my Mac, I had issues on my Windows machine.\nWill try again on Monday and get back to you. Apologies for the silence on my end. I somehow missed the notification for this issue in the sea of github notifications.\nI tried (on my Mac) the example at https://github.com/golang/example/tree/master/outyet, and I was able to hit breakpoints, continue, stop the debugging process and then see that the generated debug file is cleaned up and the debug process gracefully ends as well.\nIf someone here can provide a small code sample where you see this happening, then I can look into what is happening under the hood. @cousinbenson, @frednomoon Can you try the latest version of the Go extension (0.9.0) and see if you still have the issue?. Thanks for reporting @leaxoy \nI have logged an upstream bug https://github.com/atom/language-go/issues/161 to track this.. @ulrichSchreiner Thanks for reporting. \n\nCan you share your Go related settings? \nCan you share a small sample code where you see this issue, so that I can give it a try?\nWhat version of Go are you using? \nWhat OS are you on?\nNext time this happens, run Developer: Open Process Explorer. Under extensionHost, you should be able to see any long running process started by the extension. @ulrichSchreiner Apologies for the very late response, but I am able to see the same issue as you when I change go.docsTool to gogetdoc.\nIf you change go.docsTool to godoc, you won't see the perf problem any more.\n\nThis was caused by gogetdoc getting stuck and not returning.\nThe fix here should be two-fold\n- gogetdoc should fix it at their end. I have logged https://github.com/zmb3/gogetdoc/issues/56 for this\n- The Go extension should apply a timeout and not wait for the process to keep running. Logged #2348 for this\n@MelleKoning Since this issue originally was about the Go to definition feature, I have moved your concern to a new issue. See https://github.com/Microsoft/vscode-go/issues/2347\n. This feature is now available in the latest version of the Go extension (0.8.0)\nThanks @brycekahle!. The fix for this is now available in the latest version of the Go extension (0.8.0)\nThanks @brycekahle!. The fix for this is now out in the latest update to the Go extension (0.8.0)\nThanks @Ashniu123!. @segevfiner I found another case which wasnt handled before which is multi line docs with an empty line in between. I've added https://github.com/Microsoft/vscode-go/blob/2e46f9445f684ef7c924f7e1812d33eaf229ca08/src/util.ts#L931-L946 to handle this case. Also added tests for hover feature and the resolveCompletionItem that uses the docs. @segevfiner FYI: Turns out the package field from gocode is empty when the suggested item is an imported package.\nThis resulted in the go doc failing for such suggestions. Fixed this with https://github.com/Microsoft/vscode-go/blob/5a6b9a99a2562354c693dea99b692ded43111e2a/src/goSuggest.ts#L85\nThese items were also missing the detail part. So fixed that with https://github.com/Microsoft/vscode-go/blob/5a6b9a99a2562354c693dea99b692ded43111e2a/src/goSuggest.ts#L261-L266\n. > I guess gocode can be improved later to output the full package import path for package completions so as to make this more accurate.\nThat would be nice\nThanks for your time reviewing this @segevfiner \nI'll go ahead and merge this.. I believe this is same as #2038\nCan you try our latest beta-version?. No problem, Happy Coding!. @heschik I have pushed the necessary changes, and this will be part of the next update. > I'm not sure this code change has actually been deployed to the extension store yet,\nYes, this code change has not been released yet. You can use our beta version which does have the changes\n\nSo, I go get installed the fork, then copied it to goimports-gomod, and things started working.\n\nAm not sure how this would work as the changes to use goimports-gomod is not yet out. Were you using the extension by running it from source?\n\ngoimports (non-fork) simply doesn't work on module-enabled projects at this point, \n\nThat is true\n\nbut if I set goreturns as the on save formatter, nothing ever happens when I save.\n\nHow about when you manually run the formatter? Right click -> Format Document?. This has not been released @heschik \n\nafter some internal discussions it looks like we're going to try to get tip working with modules. (Similar to godef.)\n\nThat's great news. In that case, I'll just revert the changes done as part of this issue.. @atombender I dont sent any specific cwd when spawning the process for goimports. See https://github.com/Microsoft/vscode-go/blob/0.7.0/src/goFormat.ts#L64. That can be easily fixed.\n\ngoimports only works if invoked with the current working directory set to the root of the module\n\nI can either set the cwd to the folder that was opened in VS Code, or the parent directory of the file that is being formatted. Would the latter work?. @atombender Can you remove the wrapper and try the latest beta version of this extension? I have updated it to use the parent directory of the file as cwd.. Thanks! Since you already have the beta version now, you can also check out the upcoming features in the next update. Take a look at https://github.com/Microsoft/vscode-go/issues/2164. So, in this case, are we saying that the editor should use the workspace as cwd or that goimports should figure out the right directory based on the file being imported?. This is because the debug adapter runs in a separate process and doesnt have access to VS Code settings.\nThis can be fixed by sending the path to the delve tool as part of the debug configuration in the resolveDebugConfiguration  method in the goDebugConfiguration.ts file.\nPRs are most welcome to fix this.\nCode Pointers:\n- Build and Debug extension\n- Update resolveDebugConfiguration in goDebugConfiguration.ts file to return a new property called dlvToolPath. Use getBinPath to fetch the path to dlv tool.\n- Debug the debugger\n- Update the goDebug.ts file to use the path to delve tool send as part of the debug configuration\n. The fix for this is now available in the latest version of the Go extension (0.8.0)\nThanks @segevfiner!. If we had a task definition that runs the linter, then we would still have the duplicate problem situation, right?\nIs there any situation where one would want both the build/lint/vet via tasks as well as build/lint/run via the save operation?. > You wouldn't have the problem if you specify that the owner of the linter task's problem matcher is go-lint after this PR\nThis would require the user to be aware of this and know how to define a new problem matcher.\nWe can solve the second part of the problem by contributing the go-lint and go-vet problem matchers as part of this extension.\n. The fix for this is now available in the latest version of the Go extension (0.8.0)\nThanks @segevfiner!. This feature is now available in the latest version of the Go extension (0.8.0)\nThanks @segevfiner!. @segevfiner Closing this PR in favor of #2096\nI already had some code that runs go list to get package import path given an absolute path and then caches it for the given VS Code session.\nCan you take a look at #2096?. > Which basically looks identical from the dlv point of view.\nYou ran dlv exec. I am guessing you are passing the binary to it? Can you run dlv debug instead in the terminal and see if it hits the breakpoints?\nCan you share your debug configuration from the launch.json file?\nYou can add \"trace\": \"verbose\" to your debug configuration and then try debugging. This will add logs in the debug console which should tell us more. Well, the logs look good. No errors when creating breakpoints.\nAgain, when running from the terminal you are using dlv exec where as the Go extension is using dlv debug. \n\nPlease share the debug configuration you are using in the launch.json file\nPlease try debugging in termainal using dlv debug and not dlv exec and let me know if that works\n\n. >  run a test in the parse_test.go file. it will run if there are no breakpoints set and fail if there are.\nI was able to hit the breakpoints without any issues.\n\nWhen trying out your sample code, I get the below error. Do you know what this is?\n\n. Can you try running dlv test -- -test.run TestParse in the terminal to debug that same test and see if you are able to hit the breakpoints?. Thats great to know, thanks @wcn00 . @b00f Are you saying that you are seeing the Failed to continue - no G executing on thread 0 error?\nDid you try running dlv debug from the terminal with similar env vars and args and check if it works?\n. @b00f You mentioned a few times that you believe the CGO_LDFLAGS makes a difference. Can you try debugging without that?. @b00f In that case, can you log a new issue to track this? Even if the error being thrown is the same as what this issue covers, the root cause may be different.\nIt would be super helpful if you can also provide a small code sample where you see this issue consistently along with the debug configuration you are using.. What version of Go are you using?\nSyntax errors should show up when the extension runs go build and not necessarily the linter.\nCan you set go.buildOnSave to package and try again?\nIf this happens consistently in a small program, then can you share the same?. - Can you share the small program you are using, with the expected error?\n- Are you using Go modules or is your code under the GOPATH? Run Go: Current GOPATH to see your current gopath. Make a change and save the file. Then open the output panel (View -> Output), select \"Go\" from the drop down on the top right of the panel.\nThis should show you the output from the build, lint and vet processes that run on each file save. Do you see errors there? Can you share a screenshot of that?\nAre errors reported as expected when your code is under your GOPATH?. Looks like the build/vet/lint processes are not giving any expected output...\nAre you using symlinks by any chance? They have a habit of messing things up :(. @segevfiner Thanks for reporting!\nThis is a hard problem to solve...\nWe cant use go doc testing T.Run because there is no way to know that we should use T.Run and not Run. We dont get that information from gocode\ngocode does give the function signature which I thought I could use to get the right info from go doc testing Run which gives docs for all 3 Run() implementations.\nBut this wouldnt work as gocode gives us the signature as func(name string, f func(t *testing.T)) bool where as go doc testing Run returns func (t *T) Run(name string, f func(t *T)) bool\ni.e since T is qualified with the package name in the gocode output but not the one from go doc, its hard to get a match.\n\nYou will get the documentation for testing.B.Run instead of testing.T.Run.\n\nActually the documentation for all the 3 Run() are shown (without the signature)\ncc @segevfiner . Have you tried setting either of go.buildTags or the go.testTags setting?. We could detect the tags and use it, but that can also cause unintentional issues.\nUser might have set some tags intentionally say for OS or arch to exclude certain tests.\n1497 is tracking a feature where we would prompt the user to update the buildtags setting if current file has build tag but setting doesnt. That should help this case as well.\nClosing this in favor of #1497 . This should be fixed in the master branch.\nTry out our beta-version. You mentioned in your tweets, that changing the coverage type to \"highlight\" worked. Can you try the below\n- Make sure you don't have anything in your workspace settings that might be over-riding your user settings\n- Edit only the type in the coverage decorator setting and not change the coveredGutterStyle and unCoveredGutterStyle\n- You have both go.coverOnSingleTest and go.coverOnSave enabled. Can you disable both and try using the Go: Toggle Code Coverage in Current Package instead?. wow, I had no idea there was such a setting!\nHappy Coding!. @karthikraobr I think I am missing something here...\nBelow is the screenshot from using the latest Go extension\n\nThe interface and struct are appearing separately for me without the changes in this PR.\nWhat am I missing?. Weird, I don't see that anymore..\nMust have been some other extension.\nI have pushed a commit to make the regex cover scenarios with extra spaces and make it stricter to match the current struct only.\nCan you update the test case?. Thanks @karthikraobr!. I believe this is because the run test codelens runs the test as go test -run ^TestFoo$ -ok whereas the debug codelens starts delve and passes -ok as value for the --build-flags argument.\nThe debug test codelens always had its limitations, especially when the test relied on arguments being passed to it. This is such a case and the workaround is to fallback to using a debug configuration in the launch.json file and pass -ok as part of the args property.\n. > Could we add a new config value go.testArgs that is specifically for args during tests? That would solve this particular issue.\n1534 tracked something similar for running tests. This makes use of the -args flag which is passed before rest of the real args. Maybe we can do something similar for debug scenario.\nInstead of passing all the flags as buildFlags, the ones appearing after args are passed as args at https://github.com/Microsoft/vscode-go/blob/latest/src/goRunTestCodelens.ts#L100\nThoughts?\n. > Error : no Go Files In /Users/mrathod/Documents/Mayur/FAL/Go/Code/.vscode\nThis tells me that you started debugging when the launch.json file was open in the active editor and the debug configuration had either $file to $fileDirname in the program field.\nOpen the Go file you want to debug and press F5 then.. The wiki was outdated indeed. Thanks for reporting!\nI have made the necessary changes. Thanks for reporting @mvrhov \n@isidorn We use this.sendEvent(new OutputEvent(str, 'stderr')); to log the errors and the logger from 'vscode-debug-logger' to log traces in the debug console.\nWhen there is a build error, we send a call the sendErrorResponse() followed by a TerminatedEvent.\nIn such cases, the logs and errors are not getting through to the debug console in VS Code 1.29.1, but works just fine in the latest Insiders.\nDid anything change in this regard?\n. @isidorn This doesnt happen with the latest Insiders. Only in VS Code 1.29\nWe dont send any messages in the initializeRequest call. We start only in the launchRequest call.\nIn case of build failures, we use sendErrorResponse from inside the launchRequest call.\nBy this time, a bunch of OutputEvents are already sent\n. @mvrhov Can you elaborate?. Clearing the debug console before debugging a second time also results in showing the next error message. I'll create a new bug for this, thanks for reporting!. > Repeat the process adding the source files instead to a subfolder eg /src/x/y/z\nYou do this in the container or on Windows?\n. > Go needs to activate on onDebugInitialConfigurations\nCan you elaborate on this? Is this just an addition to the activation events?\n\nConsider to use quickPick in DebugConfigurationProvider to ask the user if he would like to launch file, launch package, connect to server, launch test package, launch test function and based on that create a launch configuration\n\nIn Go, debugging current file and current package is the same thing. All files under a folder belong to the same package.\nTest files follow the convention of having the suffix _test.go. I already have code in place to use the right config based on file name.\nWe have codelens to debug the test function under the cursor.\nThat leaves the \"connect to server\" scenario, which requires user to provide the host, port and remote path etc. And users are aware that they have to create a configuration in the launch.json file for this.\n\nRemove default fields which are not necessery like env, args. Both from the configurationSnippets and from the intial configurations\n\nThis was intentional for discoverablilty purposes :) \n\nWhat is the biggest pain point for go debugging setup, could we somehow help there with dynamicly providing debug configuratons or resolving them\n\nThere isnt much during the setup time as far as I know. I resolve many of the defaults in the resolveDebugConfiguration call.\nDebugging tests using codelens has the problem of not being able to pass args or set env, but other than that, I cannot think of any issues at setup time.. > Leaving fields for discoverability purposes makes good sense if a field is changed often by the user. So it would be great if you could go through them and decide for each if they really should be there.\nYes, I went through this exercise and cleared quite a few a couple of months ago\n\nAlso what is mode and why is this shown to the user?\n\nmode is what is used to differentiate between debugging local program, remote program or a test. \n. Yes, we can automatically infer mode if not provided.\nOther 2 values for mode are remote and exec used for remote debugging and debugging an executable respectively.. Doesnt the existing Go to Implementation command help do the same? It uses guru implements.. Got it, thanks!. This feature is now available in the latest version of the Go extension (0.8.0)\nThanks @hummerd!. Thats a great find @foodini!\nWe should still make some changes to avoid the confusion. Here is what I propose:\n- If go.toolsGopath setting is set, then the process that installs the tools should unset the GOBIN env variable, so that the tools get installed in the right place\n- GOBIN should be added to the list of places where the extension looks for the tools.\nPRs are most welcome.\nCode Pointers:\n- Build and Debug extension\n- The code where go install is run from\n- The code where we look for the tools in GOPATH, PATH and GOROOT\n. Thanks @brycekahle!. Thanks for the PR @BetaXOi! This is a very much needed feature.\nUnfortunately, I am little tight on time, so it will take a while for me to look and test the changes. But I'll surely get to this in the next 2 weeks. Thanks for the PR @xiphon! This is a very much needed feature along with your work in #2128.\nUnfortunately, I am little tight on time, so it will take a while for me to look and test the changes. But I'll surely get to this in the next 2 weeks. @OneOfOne, @Nerzal, \nNot yet, just back from vacation and catching up on notifications.\nHave either of you gotten a chance to try out the changes in this PR?\n@segevfiner, @brycekahle, @lggomez Would you mind taking a look at this PR, since all 3 of you have worked in various debugging features of this extension?\n. @xiphon Can you answer the last 2 questions?\n\nWe are now updating this.threads in the threadRequest and ensuring that it only has threads corresponding to current goroutines. What problem did this fix?\nIn handleReenterDebug, if the current state doesnt have a currentGoroutine, we add the first goroutine to it. What problem did this fix? Why dont we need to update the currentThread here as well?. > We always update currentThread before any handleReenterDebug call.\n\ncurrentThread isnt being updated independently anywhere. It gets updated when they entire debug state is updated.\nSo now that we are specifically updating the goroutineId if the state doesnt have it, I was curious as to why we do that but not update the thread. >  I get is a generic \"Failed to continue: Check the debug console for details.\" but the console does not print any data.\n@odedpriva  The console not showing anything is being tracked in https://github.com/Microsoft/vscode-go/issues/2118.  Use the latest Insiders which should show the errors in the console.\n@georgewfraser Thanks for the links! @odedpriva I am hoping the links @georgewfraser has provided should solve your issue\n. @xiphon I have pushed a commit to handle the error from continue().\nPlease see https://github.com/Microsoft/vscode-go/pull/2128/commits/45e6b64893f9b3c4b0b090adde27ce2955b9facb and https://github.com/Microsoft/vscode-go/pull/2128/commits/4226264c13b8ad79359bb1e9e361757c169cde22\nIn the normal scenario where continueRequest is called, one thing I am not clear about is whether delve returns the state when it fails the \"continue\" request...\nI believe it doesnt. And if it does, whether we should update the debugState or not. @jhendrixMSFT, @xiphon Have seen anything otherwise?. @xiphon If the continue after the halting of delve fails, right now we are just logging the error. Shouldnt we send the error response too?\n. Good point!. Looks like this is your first PR in this project, Thanks & Welcome!\nFeel free to pick up any other issue with the help-wanted label. I appreciate all the help I can get :). Thanks for the PR @xiphon!\n@brycekahle Given that you had earlier worked in the stackTraceRequest area, can you please review this PR and try out the changes?. Any chance this is related to Variable Shadowing?. @segevfiner Are you referring to resetting the handles in between 2 debugging sessions or inside a single debugging session?\n. @jhendrixMSFT When investigating another issue, @segevfiner came across documentation for the debug adapter protocol that the stackframe id should be unique across all threads. See https://github.com/Microsoft/vscode-go/issues/2133#issuecomment-449671155\nThat's the motivation for @segevfiner's attempt to fix the problem.\nI believe @xiphon encountered the same when investigating the variable shadowing problem\nThough, in itself, this PR doesnt fix any user facing issue we are aware of, this bug could be the reason for some other issue in the future (or present). Follow the below and then the Go to definition feature should work.\n- Add \"go.docsTool\": \"gogetdoc\" to  your settings\n- Run Go: Install/Update Tools, select gogetdoc, press Ok to install it\n- Reload VS Code\nBy default, we use the godef tool, which doesnt seem to work in this case.\nPlease log a bug in https://github.com/rogpeppe/godef. >  It should be stopped with VSCode like original \"gocode\" daemon\nThe original \"gocode\" daemon was never stopped either\nSee https://github.com/Microsoft/vscode-go/issues/26#issuecomment-254108679. Yes, that can be done. \nThe trick is to determine if gocode was started by VS Code or not.\nWhen the Go extension deactivates which is when the VS Code window is closed/reloaded, we can add a step that cleans up the running gocode process if it was started by VS Code.\nPRs are most welcome if you want to give this a try.\nCode Pointers:\n- Build and Debug extension\n- deactivate() is the place where the cleanup should happen\n- https://github.com/Microsoft/vscode-go/blob/0.7.0/src/goSuggest.ts#L225 is where we spawn the process that would start gocode if it isnt already running\n. The fix for this is now out in the latest update to the Go extension (0.8.0)\nThanks @zmb3!. Can you try running dlv from the command line, debug the same test and see if the step into/over in that case does something similar?. @virtuald Of course. I just added a note on it at https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#try-using-dlv-from-the-terminalcommand-line. @stffabi I didn't mean attaching vscode to a running dlv instance. I meant using the dlv client directly. Run dlv debug on the folder that has your file. That will open an interactive session where you can add break points, step into/over code using commands. @anphung Is your problem also about every step in going into the proc.go file or is it just about slowness?\n. > Inspecting the vscode-go-debug.txt from the debug, global vars request is huge for me, I guess thats the reason. Is there anyway to disable global vars?\nThats an interesting find. There is no official way to disable global vars, but can you try the below\n\nOpen the file ~/.vscode/extensions/ms-vscode.go-0.7.0/out/src/debugAdapter/goDebug.js. If you are using Insiders then use .vscode-insiders. If you are not on the latest version of VS Code (0.7.0), then use the appropriate version\nFind the function getPackageInfo, and add return Promise.resolve(null); to the first line inside the function. This will return null for package and consequently the global vars call will not be made.\nReload VS Code\n\nCheck if this solves the problem of slowness. Is this only with certain code bases or even a simple hello world program? If you can provide a sample code that I can try this on, I can look deeper into what is causing the slowness as well as the jump to proc.go\n\nI try with using dlv debug, and use interactive session b, c, n, it's quite fast there.\n\n@anphung When you used dlv debug, did you see the jump to proc.go there as well?. Thanks @mxxcx and @anphung \n@derekparker, @aarzilli Any thoughts on this?\n. I tried with older versions of the Go extension and I can still see the issue which tells me that this is not due to any recent changes in the extension.\nIf somebody here can try with older versions of dlv, then we can at least narrow down or eliminate recent changes to dlv as the reason.. cc @Microsoft/vscode-gophers\n@mikecowgill The only side-effect is that you won't see any global variables when debugging which I believe is not that big of an issue. That may fix the slowness, but it doesn't fix the jump to proc.go issue for most people here. @stffabi Using \nhttps://play.golang.org/p/nYkRp-yG1aK and 0.6.88 version of the extension, I still see the jump.\n. @segevfiner The master branch now uses the LoggingDebugSession. . All,\nI have added a new property showGlobalVariables to the debug configuration which will control the showing of the global variables. It is false by default. Try the latest beta version of this extension to get the fix. This reverts the feature introduced in 0.6.89.\n@aarzilli We already pass the current package as filter when calling ListPackageVars\n@segevfiner Great insights!\nCan you log an issue in the VS Code repo for your findings? Mention me there and I can rope in the right people who can help us. Log the issue with enough details so that we don't have to point folks back to this issue.. Hello all,\nThe jumping to proc.go issue has been fixed upstream in VS Code. Therefore, please use the latest Insiders which has the fix. For reference, https://github.com/Microsoft/vscode/issues/65920 was the upstream issue, and a big shout-out to @segevfiner who drilled down on the root cause and helped the VS Code team in coming up with a fix.\nThe slowness issue is due to the recent feature of showing global variables in the variables pane. In the beta releases, I added a setting (by default: false) to control that feature and most of you saw improvements. @jhendrixMSFT figured out that this was due to a caching problem which we have now fixed. I am retaining the setting, but turning its default value to true.\nSo, please install the latest beta version of this extension in VS Code Insiders and you should see improvements.\nIf you still see the slowness, try adding \"showGlobalVariables\": false to your debug config and see if that solves the problem and let me know here, so that we can take a call if this setting should be true or false by default. Hello again!\nTurns out we didnt really turn the showGlobalVariables feature back on in the beta version 0.8.1-beta.10 :(\nSo folks (@joegilley, @anphung, @tcagan, @mikecowgill, @stffabi, @seanstrickland-wf, @egorse ), who saw the slowness and then saw the slowness go away (either with the beta version, or by using the workaround I mentioned in https://github.com/Microsoft/vscode-go/issues/2133#issuecomment-443832073), can you please update to the latest beta version (the version should be 0.8.1-beta.11) and let me know if you still see the slowness?\nI really need this feedback before releasing the next update, so thanks a ton in advance!. > Regarding the slowness, I think it has gotten faster, but it's still slower than before 0.6.89. Disabling the global variables with showGlobalVariables works like a charm and the debugging is fast as with older versions.\nThanks for that feedback @stffabi!\nIf any of the others (@joegilley, @anphung, @tcagan, @mikecowgill, @seanstrickland-wf, @egorse ) can confirm the same, then I will go ahead disable the showGlobalVariables feature by default\n. @mxxcx \nDid you get the update for both VS Code (1.31) and the Go extension (0.9.1)?\nIf you are on the latest Go extension, then instead of the workaround that changes the code, you can add \"showGlobalVariables\": false in your debug configuration.. Thanks @mxxcx!\nConclusion:\n- The jump to proc.go is fixed in VS Code. Get the latest version of 1.31\n- The slowness is fixed in the latest version of the Go extension (0.9.1). If you still see slowness, then add \"showGlobalVariables\": \"false\" in your debug configuration\n. Congratulations on getting your first PR in this repository merged!\nFeel free to pick up any other issue with the help-wanted label. I appreciate all the help I can get :). Thanks for the PR @hummerd!\n@segevfiner Given that you logged #2121, can you try out these changes and give feedback?. > But each time when I run Go: Current GOPATH, it returns Go: Command not found.\nThis means that the extension has not gotten activated. Can you uninstall the extension, install it again and see if that helps?\nIf that still doesn't work, then delete the corresponding folder from ~/.vscode/extensions, install it again and see if that helps. - Help -> Toggle Developer Console -> Console\n- Clear the console\n- Run the command Go: Current GOPATH\n- Share any errors that show up in the console.. Thanks for sharing the screenshot @imrandurani \nThe Go: Current GOPATH or any other command from the extension for that matter is not to be run in the terminal. These are to be run in the command pallet. So press F1 to open the command pallet and then type in the command\n. For the tools that failed, try installing them manually by following the instructions in https://github.com/Microsoft/vscode-go/wiki/Go-tools-that-the-Go-extension-depends-on\nThe INFO no standard startup: not just one text editor is not related to debugging.\nCan you share the error you see in the editor (not in the console) when you start debugging?\n. Those are the errors from running the Go: Install/Update tools command. \nI was asking about the errors that you see when debugging. Thats your original problem correct?\n. Are you behind a proxy by any chance? All the errors are network related.\nAll the errors about missing tools are not related to debugging. All you need for debugging is dlv which according to your logs is installed. Can you try running dlv from the terminal and see if you are able to debug that way?. @Nerzal Yes, I believe all the shortcuts as described in https://code.visualstudio.com/docs/editor/refactoring should be usable.. Looks like sometime in the past year, VS Code is able to do the undo feature even for the changes that were made directly to the file on disk. (It didn't do this when I was working a feature 2 years ago).\nSo we don't need to use the diffs after all. Reverting that commit. The latest beta version (0.9.3-beta.2) of this extension has this feature. Please see Refactoring in VS Code on how you can use the refactor feature.\nThanks @aswinmprabhu!\n. Thanks for the observation @helphi \nI have updated https://github.com/golang/go/issues/24661 with a request to track godoctor for module support. @hpio One last check. \n- Open VS Code from your zsh shell\n- Open the console in the dev tools: Help -> Toggle Developer Tools -> Console\n- Run process.env[\"GOPATH\"]\nIf that is not your expected GOPATH i.e doesnt match echo $GOPATH when you run in zsh, then the problem indeed is that the env vars are not being propagated to VS Code. . @hpio Do you still have this issue? Can you respond to \nhttps://github.com/Microsoft/vscode-go/issues/2142#issuecomment-441840935?. Yes, this should be do-able.\nWe can overload the go.useLanguageServer which takes just a boolean at the moment to instead show all the options.\nPRs are most welcome.\nCode Pointers:\n- Build and Debug extension\n- Update the useLanguageServer setting to take enum listing all the options\n- Update the goInstallTools.ts file so that the right tool gets installed. \n- Update the goMain.ts file to remove the hard-coded value of go-langserver and instead run the chosen tool. As discussed in the PR #2158, there is a good likelihood of all 3 language servers will merge into 1 (Sourcegraph plans to use the one from Google, @saibing and Google are planning to work together). Given this, I want to avoid changing the schema of the useLanguageServer setting.\nTherefore, if one wants to use another language server, they can use the go.alternateTools setting. For example, if you want to use the bingo language server, install it using go get github.com/saibing/bingo and then add the below in your settings\n\"go.alternateTools\": {\n    \"go-langserver\": \"bingo\",\n  },\n  \"go.languageServerExperimentalFeatures\": {\n    \"format\": true,\n    \"autoComplete\": true\n  },\n  \"go.useLanguageServer\": true. Nice catch!\nYes that change looks right. Please go ahead and submit the PR.. The fix for this is now out in the latest update to the Go extension (0.8.0)\nThanks @JPMoresmau!. Thanks for reporting @dryewo.\n@ianthehat any ideas?. I can confirm that the issue where Go to definition fails for symbols from the std library with the File not found (file://$GOROOT/src...) is fixed after updating to the latest of godef-gomod using the Go: Install/Update Tools command . > So implementing this will likely require extending the tools with the required information.\nThat is very much true.\nI believe the reason it gets shown for constants is because the value is right there in the same line as the declaration which is what is returned by godef/godoc.\nI guess the reason the same was not done for variables is because the value of the variables can change and the static tools have no way of guaranteeing its value. Thats my guess. I would suggest to log an issue for godef/godoc to confirm this.\nFor completions, I would suggest to log this feature request at https://github.com/mdempsky/gocode/issues and @stamblerre should be able to get back with her thoughts.\nClosing this issue in this repo as there isnt much we can do here to support these cases.. Google translate gives this:\n\nThe previously configured launch.json file can't be used. Before, there is a configuration gopath, but after the upgrade, click to run and report the error directly, then jump to lanuch.json, no matter whether you run the file or run the project.\n\n@xiaoyifan6 VS Code 1.29.1 has a bug where the debug console doesnt show any errors. See #2118\nCan you try out daily build which has the fix to this issue?\n. cc @stamblerre . - Can you provide a small code sample where you see this issue?\n- Also provide the symbol for which Go to definition is not working.\n- Run Go: Install/Update Tools command, select godef-gomod, press Ok to update it and try again after the update completes.\nIf this still doesn't work, then \n- Add \"go.docsTool\": \"gogetdoc\" to your settings\n- RunGo: Install/Update Toolscommand, selectgogetdoc, press Ok to install it and try again after the install completes.\n. There was a commit that was force pushed to the https://github.com/ianthehat/godef which is causing the problem with thego get`. Deleting $GOPATH/src/github.com/ianthehat/godef, then re-running the install command should help with getting the latest version of the godef fork.\n@ianthehat, We set GO111MODULE to off when go getting the tools. Any idea why the below module related error would show up when running go get\ngo: finding github.com/ianthehat/godef latest\ngo: github.com/ianthehat/godef@v0.0.0-20181121200540-1ef9e6bcd64c: parsing go.mod: unexpected module path \"github.com/rogpeppe/godef\"\ngo get: error loading module requirements\n. @wilbertliu Those are errors from vet and build processes. Are you able to run go build from the terminal successfully?\n@CodeLoam How did you install them manually? If they are not accessible by the Go extension, then it will prompt you to install it. Can you instead install using the Go: Install/Update Tools command?. @wilbertliu Are you using Go modules?\n. @CodeLoam Try using godef-gomod from the terminal to get the definition of the symbol that you are trying for. You will need offset which you can get from using the show-offset extension. \n@wilbertliu So you are using modules, go build fails when you run it in a terminal and the build process run by the Go extension also fails with the same errors. This means that you don't have the required packages. \nThe Go extension doesn't fetch the imports. When using modules, it runs the go build which is supposed to get all the dependent packages. Since go build itself is failing for you, it is a problem not related to the editor. There must be some other set up that is causing this. There is a \"modules\" channel in the Gophers slack. Perhaps someone there can help?. Thanks for that information @vadimi, I have incorporated that fix in the master branch, and you can use the latest beta version of this extension which has the fix as well.\n@awking Thanks for trying out the beta! I am glad this fixes things\n@wilbertliu, @CodeLoam  Can you try the latest beta version of this extension as well?. Closing this in favor of #2149. I see the same when debugging using the editor. \nI don't see the panic when using dlv directly from the terminal.\nCan you see if using gdlv works?\nBoth gdlv and VS Code use dlv to support the debugging feature.\n. > Is there a config flag I'm missing or is this just not possible?\nI am not sure why this doesnt work in the first place, so I cant really answer this. \nThe reason I asked you to check out gdlv was that if that doesnt work either, then the issue is with dlv itself and the way clients (gdlv & VS Code) talk to dlv.\nAlso, since the author of gdlv and dlv are the same, and that they are Go developers themselves, they would be more qualified to figure this out than me :). > can't exit cleanly: can't run backing tview application: terminal entry not found\nThat error is from dlv. So I would say it is related to dlv. In that case #843 might help (I am not sure), where we are tracking the feature request to use a terminal instead of the debug console when debugging.\n. As far as I know, #843 tracks exactly that.. As far as I know, the Go extension doesn't use any tool called doc. In the recent release, we did start using go doc though, but that should have shown up as go not doc\nCan you disable all other extensions and see if you still see the issue?. @aplsek doc is an argument for the go command, so wouldn't the Activity Monitor have the process name as go instead of doc?\nSelect the process in the Activity Monitor, and then select the \"info\" button on the top, that will open up a detailed view which will have the parent information. Check if the processes with the process name doc have VS Code as the parent.\nAnother thing to try is to run Developer: Open Process Explorer in VS Code. This will open the process explorer and any high CPU consuming processes will show up there. Thanks for that @grillbiff. These are for doc processes as shown in the screenshot in \nhttps://github.com/Microsoft/vscode-go/issues/2152#issue-384643034?\nWe use go doc for 2 features:\n- The information you see when you hover on code text.\n- The information you see on the side in the auto-completion widget.\nLets try and disable these 2 features and see if that helps your case.\nFor the first feature, lets use gogetdoc instead of go doc for the hover info\n- Add the setting \"go.docsTool\": \"gogetdoc\"\n- Run the command Go: Install/Update tools\n- Select gogetdoc and press Ok to install it\nFor the second feature, if you are seeing the documentation on the side like in the below picture, press Ctrl+Space to hide it.\n\n. @grillbiff Also ensure that the docs side of the completions are not expanded. \n. Ah! My mistake.\nSo, VS Code always calls resolveCompletionItem for each completion item in focus whether it is expanded for docs or not. \nThe Go extension which implements this resolveCompletionItem calls go doc to fetch the docs and return it to VS Code which then displays it to you.\nI was under the assumption that this resolveCompletionItem is only called when the docs section is expanded.\nI have pushed a fix for this. Can you try it out?\n- First install the beta-version of this extension\n- Update the go.gocodeFlags setting as below\n\"go.gocodeFlags\": [\n        \"-builtin\",\n        \"-ignore-case\",\n        \"-unimported-packages\",\n                \"-exclude-docs\"\n    ]\nThe first 3 are flags that will get passed to gocode to give us the completions. The last one will be used by the Go extension to not run go doc to get the docs.\nRemember to kill all existing processes for go doc before trying this out.\n. Thats right @grillbiff . The latest update (0.9.1) to the extension has this fix.. @galgalesh We have already moved on to using v2 apis. Any reason you feel that we are still using v1?. We don't restrict the search to just the current package. I believe this is a limitation of the guru tool on certain OS. On Mac, I can confirm that the results from outside the current package are also returned. What OS are you on?\nCan you run the guru referrers command on your code and see if it returns results from outside the  package? It would need the offset information which you can get using the show-offset extension\n. Then this is a limitation on the guru tool itself.\nClosing this issue in favor of the upstream issue https://github.com/golang/go/issues/24699\n. Thanks for the PR @JPMoresmau!\nIf you are interested, please take a look at other issues with the help-wanted label. I appreciate any help that I can get :). Can you try updating the tool? Run Go: Install/Update tools, select godef-gomod, press Ok to update. No other configuration is needed. Are you still not able to go to the definition?\n\nAre you using Go modules in your project?\nIs the problem only with symbols from the std library or even for the ones from external libraries?\nCan you try running godef-gomod from the terminal and see if you can get to the definition? You will need offset. You can use the show-offset extension to get the offset under the cursor\n\nHave you changed either of  go.docsTool and go.useLanguageServer settings? If yes, what are their values?. If you are not using modules, then how is that you are using github.com/ianthehat/godef instead of github.com/rogpeppe/godef?\n\n\nIs the problem only with symbols from the std library or even for the ones from external libraries?\n\nCan you try running godef from the terminal and see if you can get to the definition? You will need offset. You can use the show-offset extension to get the offset under the cursor. > It is always impossible to locate a definition object for an alias of golang.\nSupport for multiple GOPATH is not very good, non-first GOPATH can't always locate\n\nAre these the reasons you are using github.com/ianthehat/godef instead of github.com/rogpeppe/godef?\n\nWhy is there a special directory like $GOROOT instead of the configured go.goroot value?\n\nI don't understand. Are you literally getting the error File not found (file:///$GOROOT/src/time/time.go) or you just replaced your goroot with the word \"$GOROOT\"?\n. This is fixed upstream in the godef tool. Please follow the below steps:\n- Run Go: Install/Update Tools command\n- Select godef-gomod\n- Press Ok to update\nIf this fails with an error around git force push, then delete the existing folder for godef ($GOPATH/src/github.com/ianthehat/godef) and try again\n. You can use the isModSupported function to figure out if the current workspace supports modules or not. Based on this, you can then decide whether to use bingo or not.. Yes, thats right. . @tohjustin The README.md would also need an update. There is a section there on the language server usage. > Can we make go.languageServerExperimentalFeatures autocomplete and code formatting to be true by default? \n@anjmao Yes, we can do that\n\nI saw the issue opened by @stamblerre in saibing/bingo#13 & seems like the plan is to focus on golsp development.\n\n@tohjustin Given that there is a good likelihood of all 3 language servers merging into 1 (Sourcegraph plans to use the one from Google, @saibing and Google are planning to work together, I want to avoid changing the schema of the useLanguageServer setting.\nInstead, if one wants to use another language server, they can use the go.alternateTools setting as below:\n\"go.alternateTools\": {\n     \"go-langserver\": \"bingo\"\n}\nThis would need some changes from the extension which I have already made in https://github.com/Microsoft/vscode-go/commit/ecb691c9a626ac9801bf5a59d8874428e3a8e61d.\n@anjmao, @tohjustin Can you try the latest beta version with the above setting and let me know if you see any issues?. @anjmao On second thoughts, I don't want to enable the formatting feature by the language server by default just yet. This is because the language server doesn't respect the formatFlags or the formalTool settings. \nI don't want to enable the auto-completion feature by language server by default, because the language server doesn't support completions for unimported packages yet.\nOnce these 2 features from the language server has complete parity with what the extension does, I will turn them on by default.. > Yup the the go.alternateTools setting is working as intended.\nThanks for confirming the beta version @tohjustin!\nI have updated the wiki on Go modules support in VS Code appropriately.\n\nI guess I'll leave it up to you to close this PR or put it on hold until the new Go language server is ready.\n\nI believe closing this PR is the right thing to do as I want to avoid changes in settings schema as much as possible.\nThanks for all your work on this @tohjustin, it is very much appreciated.\n. @gabstv Does this project use Go modules?. Yes, we are in the process of adding support to bingo as you already know via #2158\nMeanwhile, I am moving this issue to the repo for gocode-gomod so that @stamblerre can help.. This issue was moved to stamblerre/gocode#17. @ssqf \nFirst, disable all other extensions to make sure that they are not causing the problem.\nThen, run the command Developer: Open Process Explorer. This will open the process explorer which will list out all the processes started by VS Code and their CPU usage. Using this, you will be able to figure out what exactly is causing the high CPU usage.\n\n\n. @kimyw3007 Please log your issues with the windbg extension in https://github.com/reedz/windbg-debug.\nThis repository is for the vscode-go extension. Thanks everyone!\nRegarding the keyboard shortcut request for the Go to Type Definition command, @segevfiner is right. This is not a command that is specific to the Go extension. It is a generic feature like Go to definition or Find all references. Extensions implement the providers which provide the data. VS Code takes care of triggering, keyboard shortcuts, navigation, UI etc.\nI would suggest to add your own keybinding or create a feature request in the vscode repo if you have any good ideas for it.. Thanks for reporting that @willfaught, can you log a new issue for that with the same details? We can use that for tracking the bug and possible fixes. . @nezorflame Yes #1944 initially started out as completions don't work without saving the file with the package used atleast once, but it moved on to the GO111MODULE issue.\nhttps://github.com/stamblerre/gocode/issues/3 is tracking the original issue. I'll update #1944. Thanks everyone for all the help!\n0.8.0 version of the Go extension has been released!. > I tried to godef a method of a third-party package(e.g. github.com/spf13/cobra), it shows no definition found for XXX.\nDoes this mean that you tried the godef command from the terminal or that you used the Go to Definition command from VS Code?. @lylex Can you try the latest beta version of this extension? It has some fixes that can help.. First make sure you have the latest version of the godef-gomod tool by doing the below:\n- Run Go: Install/Update Tools\n- Choose godef-gomod\n- Press Ok to update it\nIf you still get the No definition found.. error, you can see the logs by doing the below:\n- First update to VS Code 1.30 which supports showing of these logs\n- Open the output panel. View -> Output -> Select \"Log (Extension Host)\" from the drop down on the top right corner section of the panel.\n- Run Go to definition to replicate the error\nThe logs will now show the exact call being made to godef-gomod along with the error returned by it. Please share that error.\n. What version of Go are you using? And what version of the Go extension?. Can you share a screenshot of what you are seeing in the drop down?. Ah! Thats because go.docsTool is set to gogetdoc. Set that back to godoc.. Hmm.. then the next step is to run godef-gomod in the terminal. Make sure that your working directory is the same as your package. Then run godef -f <Your file path> -o 123 Instead of 123 you need to provide the offset of the symbol in the file. You can get the offset using the show-offset extension. Thanks @lylex \nThe language server from Sourcegraph doesnt support modules, so that might explain why disabling it fixed the issue for you.. Thanks for reporting @segevfiner \n@hummerd, @segevfiner Our current method of identifying guru being stale seem to be catching a lot of false positives. Can any of you provide more information on the guru support here?\n- Is it that guru describe is the new feature or the fact that guru describe providing the position of the type in the new feature. \n- When was this feature of type position added to guru?\nI'd rather us not show any prompt at all about updating guru, instead of showing it at wrong times.\nI can add a note in the FAQ about updating guru to ensure this feature works.. Thanks @segevfiner!\n@hummerd, I didnt know you had implemented the feature in guru, nice job!\n. @hummerd Can we expect the typepos property to exist in newer guru all the time event if the value is null/undefined?\nIf yes, then we can check guruOutput.value && !guruOutput.value.hasOwnProperty('typepos') to decide if we want to update the guru?. @segevfiner, @hummerd Can you confirm the fix using the  latest beta version. - How did you debug the unit test? Using the codelens (the grey link above the test) or using a debug configuration?\n- Can you try running dlv from the terminal? Run dlv test -- -test.run YourTestFunctionName. This will open an interactive session with dlv. Use the dlv commands to create breakpoints and step in/out\n. Can you share the debug configuration you used?. Can you add \"trace\": \"verbose\" to your debug configuration?\nThat will print out the exact call being made dlv. You can then use that command (without the --headless argument) in the terminal to see if that succeeds or not. In the launch.json file,\n- program needs to point to the package or the entrypoint file in the local machine that is being debugged.\n- remotePath should point to the entrypoint file in the remote machine that is being debugged.\nSo the changes you made are in line with the above.\nAbout lldb, I am not sure why that would make a difference...\nMaybe because you are using api version 1?\nI would be interested to know if things work when you use api version 2, keep the changes in the launch.json and not provide the --backend argument for dlv\n. @derekparker, @aarzilli This is a case of running the dlv headless on an ubuntu machine and attaching to it on a Windows machine using VS Code. Any idea why the --backend should be set to lldb here?\n. @seflerZ Do you still have this issue? If so, can you provide the logs like @aarzilli asked for in the previous comment?. Thanks @seflerZ . @segevfiner, @hummerd Can you confirm the fix of falling back to Go to Definition using the  latest beta version. Thanks @zmb3!\n@OneOfOne Hope that answers your concern.. go run is only run by the Go extension if you run the Debug: Start without debugging command. Do you use that command often?. Can you fix the linter errors? Run npm run lint locally to see the errors. remotePath should point to the entry file in the container. Can you try updating it as such?. @brycekahle, thoughts?. This is being tracked upstream in http://github.com/stamblerre/gocode/issues/3. @nezorflame The fix for this has been pushed in the upstream. Can you run the command Go: Install/Update Tools, choose gocode-gomod, press Ok to update it and try again?. Can you try the latest beta version of this extension? It has some fixes that can help.. Can you help us figure out why it didn't work in the first place? The stable build doesn't show logs, but if you can download the VS Code Insiders and try the below, I would very much appreciate it.\n\nOpen the output channel: View -> Output\nSelect Log (Extension Host) from the drop down on the top right corner of the output panel\nClear any logs that already exist by either clicking on the button for clearing logs or by running the command View: Clear Output\nIn the code for which Go to definition didn't work, try to run Go to definition again\n\nAt this point, the output channel would show the command that was run to get the definition information and any error from it. Please share that. Thanks @kidlj!\n0.7.0 failing is expected as it wasn't running godef-gomod from the right directory.\n0.7.1-beta.5 runs it from the folder opened in VS Code (which in your case I believe is the uppermost demo directory). So this looks like an issue of godef not working on sub modules when run from the directory of the main module.\n@ianthehat Can we expect godef to work on a file which is in a sub module when it is run from the directory of the main module? . This should be fixed in the latest beta version of this extension. The fix for this is now out in the latest update (0.9.0) to the Go extension. The issue with the debug console not showing anything is fixed in the latest Insiders version of VS Code. Please try that or you can wait for the release of VS Code 1.30.0 next week.. Please see the section on auto-completion in our wiki for FAQ\nAre you using Go modules?. @bevanhunt Please try out the steps in the FAQ. \n@fabianem Are you using modules as well?. Also, is this happening the first time you use the package after importing?\nBecause we have an issue for that: https://github.com/Microsoft/vscode-go/issues/2179\nAfter saving file with the imported package used atleast once, auto-completions should work when using modules. @fabianem Did you try running gocode -s -debug as per the instructions in the FAQ to see if the issue is with gocode or VS Code?\n@bevanhunt On symbols for which the onhover docs dont work, does Go to definition work?. @bevanhunt Please see \nhttps://github.com/Microsoft/vscode-go/issues/2165#issuecomment-447116812. Let's continue the discussion on the Go to definition issues there and have this current github issue to track the completion issue.. @Cimsystemsthai, @DOTA2mm Are you using dep or modules or neither?\n@stamblerre TLDR; @fabianem is using dep to manage dependencies and has issues getting completions from external packages that are already imported. See \nhttps://github.com/Microsoft/vscode-go/issues/2182#issuecomment-448571836. Would you like me to move this issue to https://github.com/mdempsky/gocode?. Thanks @stamblerre \n@fabianem Can you try out the workaround that @stamblerre has mentioned above?\n@Cimsystemsthai, @DOTA2mm Are you using dep or modules or neither?. @fabianem \n\nbut I guess gocode (while using vs code) needs the packages build for windows.\n\nWhat makes you say that?. @fabianem \n\nI assumed so because I thought that vs code (running in windows) is using GOPATH/bin/gocode.exe and gocode.exe searches for the packages in GOPATH/pkg/windows_amd64 - or is his assumption wrong?\n\nThats just in Windows. In other OS, VS Code will use just gocode for the binary.\nCan you create a new issue in https://github.com/mdempsky/gocode with your findings? @stamblerre will be able to help you there. This issue is getting pretty long and also inter-mingled with other concerns from other users.\n@DOTA2mm and @Cimsystemsthai: Like @stamblerre mentioned, please log issues in https://github.com/mdempsky/gocode\nClosing this issue as we are suggesting to create new issues in the gocode repo.. That is weird... The Go extension is responsible for what gets printed out in the output panel which in your case is the right url. Making the link clickable and opening the file is done by VS Code.\n@isidorn Any ideas?\n. @AlekSi Can you try on an older version of VS Code to check if this got introduced recently? You can get 1.29 from https://code.visualstudio.com/updates/v1_29. @AlekSi To move this to the VS Code issue, it would help if you can set up a small sample code with repro steps. This would help the folks at VS Code to easily repro the issue. @oneslash The codelens get rendered once for each function and dont get re-rendered until that line goes out of sight from the user.\nSo, this change will ensure that we dont render the code lens if there is an active session.\nBut once the code lens does appear, and the user clicks on it, this change will not make it go away, will it?\n. Thanks for reporting everyone!\n@segevfiner has submitted a PR for this issue which I just merged.\nTo get the fix, please use the latest beta version of this extension. This fix is now out in the latest update (0.9.0) to the Go extension. Thank you very much for reporting this @OneOfOne \nIt was a complete oversight on my part, there was a bug in the code that was suppose to clean up the temporary folders that the extension creates.\nThis is fixed with https://github.com/Microsoft/vscode-go/commit/4a241f806809465afa7085a3f62729ff37fa63cd and the next update will have the fix. @OneOfOne The latest beta version of this extension has the fix for this issue.\nIt will not clean up the folders that already exist, but it will clean up all the future folders.. Do you see any errors in the dev console or the extension host logs when manually formatting?\nDev Console: Help -> Toggle Developer Tools -> Console\nExtension Host Logs: View -> Output -> Log (Extension Host) \n. @gir In you case, the timing issue can be fixed by updating the setting editor.formatOnSaveTimeout\n@OneOfOne are you using modules?. @OneOfOne If you can disable the language server and share any errors as described in \nhttps://github.com/Microsoft/vscode-go/issues/2189#issuecomment-450544504, that would be very helpful.\nNote that when using modules, you may have to change the format tool to gofmt. If using goimports, then use Go: Install/Update Tools -> Select goimports -> Ok to update it first. goreturns (which is the default format tool) does not support modules . Oh! So looks like the other extension was interfering with the formatting.\n@gir, Can you try disabling all other extensions and see if that makes any difference?. @gir Then in your case it is definitely the issue of timeout and yes, that has nothing to do with the other extensions.\nClosing this issue.. Thanks for the contribution to snippets @cattitude \nWe have recently come up with a new policy when it comes to contributing snippets to this extension.\nPlease see Contributing Snippets in our Contributing Guide.\nTherefore, please log an issue for this addition. If we get enough upvotes for it in a month or two, then we can include this in the extension.\nThanks again for your contribution and sorry for the trouble.\nHappy Coding!. Thanks for reporting @aggressivepixels \nWe should exclude dlv if the user is on a 32-bit machine. PRs are most welcome\nCode Pointers:\n- Build and Debug extension\n- goInstallTools.ts is the file that deals with installing the Go tools that this extension depends on. The fix for this is now out in the latest update (0.9.0) to the Go extension. Adding details as was previously discussed in #2104. \nDebug configuration:\n{\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/cmd/gallactic/main.go\",\n            \"env\": {\"CGO_LDFLAGS\":\"${workspaceRoot}/../sputnikvm-ffi/c/libsputnikvm.a -ldl -lm\"},\n            \"args\": [\"init\", \"-w=/tmp/chain2\"],\n            \"showLog\": false,\n            \"trace\": \"verbose\"\n        }\nLink to project: https://github.com/gallactic/gallactic\n. @b00f The debug configuration above is to debug the main program where as you mentioned using dlv test. Are you seeing the error when debugging the main program or the tests?\nIf it is for the tests, then can you share the debug configuration you are using to debug the test? Or are you using the codelens (the links above test functions in the editor for running and debugging tests) to debug the tests?\n\nI think it is related to CGO_LDFLAGS (When it's needed to link the app with an external library).\nI did debug some test methods that doesn't link with my library and they work fine. Hopefully I could clear the air...\n\nIf I understood this correctly, the CGO_LDFLAGS  is required to link your app with the external library. Is that right?. cc @Microsoft/vscode-gophers . No updates @b00f, I was out on vacation for 2 weeks, and am catching up on all notifications now.\nThere are few traces you can enable, that can help us to see which step in the debugging process is causing the problem.\nPlease add \"trace\": \"verbose\" to your debug configuration which will print logs from the Go debug to the debug console and share these logs\n. > If I use the debug dll (not release) breakpoints hit and works fine!\n@b00f Can you elaborate on what you mean by \"debug dll (not release)\"?\ncc @jhendrixMSFT . I dont believe there is any reason why we shouldnt show the coverage if Go generates the coverprofile file.\nPRs are most welcome.\nCode Pointers:\n- Build and Debug extension\n- goCover.ts is the file where code coverage is applied when you run the Toggle Test Coverage command\n- goTest.ts is the file where code coverage is applied when you run all tests in the package. @oneslash Do you have a PR open?\n. I have merged your PR. I'll take care of the notification in another PR that I am currently reviewing. @jhendrixMSFT The current possible values for process.arch are: 'arm', 'arm64', 'ia32', 'mips', 'mipsel', 'ppc', 'ppc64', 's390', 's390x', 'x32', and 'x64'.\nSee https://nodejs.org/api/process.html#process_process_arch\nI am not familiar with 'mips', 'mipsel', 's390', 's390x'.\nAny idea if it is useful to include these as supported platforms for delve?\n. > s390x and ppc64 are natively supported by Go (i.e. there are binary packages for it) so we should probably include those two.\nBut that doesnt necessarily mean delve is supported too right?. Thanks for reporting @christian-fortini and @hatricker \n@ToothlessGear Yes, you are right. We should have a default there. @segevfiner has submitted a PR for the same which I just merged.\nTo get the fix, please use the latest beta version of this extension. @krasoffski Thanks for reporting!\n@saibing This is happening because VS Code is passing different positions for the 2 operations. See \nhttps://github.com/Microsoft/vscode/issues/65127#issuecomment-450543938\nLet's wait and see if we can get an upstream fix for this.. @jhendrixMSFT Great job! I have 2 main concerns here\n\nWe are now sending parallel requests to delve to evaluate contents of the array. Do we know if delve is able to handle concurrent requests like this?\nThese requests to delve will be sent even if there is nothing to expand. For example, take an array of strings. When the user expands that variable, the evaluate request will be sent of each string in the array. Can we somehow not send these requests based on the type of the array or map value?. > Good point on the spurious evaluations on strings, I will update loadChildren() to never perform the eval if the type is string.\n\nIts not just when the variable itself is a string. This also applies to array of strings, numbers or any of the primitive types. These would not need further evaluations.\nSame applies to maps. When the value in the key/value pair of the map is a simple string or number or other primitive type, we dont need further evaluation.. Looks like the save at the end of replacing is triggering all the on save related features like formatting and linting. This can be fixed by ensuring that we only run the build/lint/vet/format actions on an active document instead of each of the saved document.\nI have pushed a commit for the same, thanks for reporting!\n. The fix for this is now out in the latest update (0.9.0) to the Go extension. @bryanmacfarlane The go.toolsGopath was always meant to point to the GOPATH to use when running go get to install the various Go tools. And therefore, in your scenario, it should be /Users/bryan/Tools and not /Users/bryan/Tools/bin. Nothing has changed in this area of the code in the extension.\nThe reason why things might have worked before with the same value of the setting for you might be due to the fallbacks we have in place. See https://github.com/Microsoft/vscode-go/wiki/GOPATH-in-the-VS-Code-Go-extension#gopath-for-installing-the-go-tools-using-gotoolsgopath. See set-up-configurations-in-your-settings in our wiki that talks about settings you can use to increase the max number of bytes read from a string by delve which is what we use for supporting the debugging feature.\nIf you tweak this, then you can not only see the entire string, but also copy the entire string.\nShowing ...+27more, but copying the whole string would require us to make 2 calls to delve. One to determine that the string doesn't fit, the other to get the entire string by changing the value for maxStringLen. I would consider doing this if we get more feedback on this issue.\n. @lggomez \nI previously thought that the Copy Value feature just copies the already calculated value of the variable. Which is why I mentioned previously that we will end up making 2 calls.\nBut, it turns out, that VS Code calls the debug adapter to get the value when user clicks Copy Value. This makes sense, because even though we think that VS Code already has the value, VS Code itself doesnt maintain the state. It calls the debug adapter and shows the resulting variables. It doesnt store the state. \nCopy Value feature also doesnt try to pick up the value from the UI. So VS Code will make a call to the debug adapter to get this value.\nThe function that gets called in the debug adapter is the evaluateRequest() function. Maybe you can intercept this request and update the maxStringLen setting before making the call to delve?\n. Sorry, I couldn't reply sooner. That's some great investigations @lggomez!. > If we set sensible default max values but the user still needs to be able to copy arbitrarily large values, these should be configurable, altough this implies duplicating the dlvLoadConfig section on the debug config level\nHow about making 2 calls to Eval?\nFirst call would use the maxStringLen as configured in dlvLoadConfig. The output from delve would have indicators if there is more to load and exactly how much more is left to load. We then use this information to make the second call with the right maxStringLen. > I like this approach\nWhich one :) ? The one I mentioned or the one on using the toml configuration?\n. @segevfiner I am using \nhttps://play.golang.org/p/nYkRp-yG1aK (breakpoint in the Println line) which has the jump to proc.go issue. The fix in this PR doesn't fix the jump for me.\nRegardless, I believe this is a change we should make anyway. The response should be sent by the adapter only after the call to delve completes.\n. Using the changes in this PR and the sample code in \nhttps://play.golang.org/p/nYkRp-yG1aK (breakpoint in the Println line), I still see the jump to proc.go issue . @segevfiner I am leaning towards #2130 as well, your thoughts?\n. We use regular expressions to parse the file name and line numbers from the output of go test. It could be possible that the regex we are using was not capturing the errors you were seeing before you fixed the  dependency issues.\nCan you go back to the state where this issue was happening and run go test in a terminal to get the errors and share them here?. The command runs a simple go get -u -v for each of the tools.\nCan you run go get -u -v github.com/mdempsky/gocode manually from a terminal and see if that succeeds or fails with the same error?\nIf you are using modules set GO111MODULE=off before running the go get command. > Not sure whether it's useful to notify user about the wrong gopath.\nThe problem is that there is no way for the extension to know that given path is a \"wrong\" gopath\n\n\"go.gopath\": \"/Users/egon/go\",\n    \"go.toolsGopath\": \"/Users/egon/go\"\n\nA side note: You don't need to specify go.toolsGopath if it is the same as go.gopath\nAlso, looks like you are using the default GOPATH in which case, you don't need to add the go.gopath setting either.\nClosing this issue, Happy Coding!\n. It works as expected for me though in my setup I have a go.mod file and am not using the GO111MODULE env variable.\nCan you ensure you have the latest version of gogetdoc?  Run the command Go: Install/Update tools, select gogetdoc, press Ok to update it.\nIf you still have issues, also do try running gogetdoc from the terminal. You will need file path and offset. For offset, use the extension show-offset\ncc @zmb3 . @nezorflame Great findings!\nI'll close this issue as we have an upstream one in the gogetdoc repo to track the problem.\n\ndoes Go extension autodetect the presence of go.mod inside my project and invoke module-related commands if I don't explicitly set GO111MODULE=on for packages inside GOPATH?\n\nYes.\n. When the fix makes it into the gogetdoc repo, remember to update your version of the tool by using the Go: Install/Update Tools command. > Does vs-code set the working directory to the project directory when invoking gogetdoc?\nNot yet. We do this for godef. I can do the same for gogetdoc\n\nIs vs-code explicitly setting GO111MODULE=on if a go.mod file is found\n\nNo. Do we need to?\n. Pushed a commit to set the current project as working directory when calling gogetdoc. Thanks @nezorflame, @zmb3!. @leakyshoe Please log a new issue with exact repro steps with a sample code, so that we can investigate the problem.. @rhnvrm Thanks for reporting.\nWe don't have the precedent of having a command to edit a setting. Users are expected to edit the settings directly in the settings editor.\nBy having a command to add the env variables, I believe what you are trying to solve is the discoverability of the go.testEnvVars setting. In which case, what @nezorflame suggests is one of the right things to do. Another is to use the settings editor (Use Ctrl+, or Cmd+, keyboard shortcut or use the corresponding command). Here you can either search for keywords or click on \"Go\" under \"Extensions\" to see all the settings contributed by the Go extension.\nIs there any other concern that you hope to solve by having a command that edits a setting? . The first run is when you run go to definition on a symbol from module A used in one of the files in your project.\nThis will open the file from module A from the module cache (I think this would be from GOPATH/pkg/mod)\nThe second run is when you run go to definition on any symbol in this file that got opened from module A. > Why change go env GOMOD to go list -m -f {{.GoMod}}?\nAre you asking why we are using go env GOMOD instead of go list -m -f {{.GoMod}}?\nWe are doing this as go list has been known to be much slower.\n. @sunliver I have pushed a commit that gets the latest from the master branch. There was a bug where errors from godef resulted in an infinite loop which is now fixed with https://github.com/Microsoft/vscode-go/commit/8c6f03572421a49bd67f189ee6fd4152a4b03d47\nNow going back to the case I was describing in https://github.com/Microsoft/vscode-go/pull/2216#issuecomment-452791035, lets see the below example\n```\npackage main\nimport \"rsc.io/quote\"\nfunc main() {\n    quote.Hello()\n}\n```\nHere if you run Go to definition on the Hello() function, the file $GOPATH/pkg/mod/rsc.io/quote@v1.5.2/quote.go opens. This file uses another package called sampler. Run Go to definition on sampler.Hello().\nUsing the code in this PR, this Go to definition operation fails.\nYou can see the error in the output channel -> Log (Extension Host)\nCommand failed: C:\\GoTools\\bin\\godef.exe -t -i -f c:\\GoCode\\pkg\\mod\\rsc.io\\quote@v1.5.2\\quote.go -o 335\ngodef: no object\nThis is because we are using the folder $GOPATH/pkg/mod as current working directory.\n. @sunliver What do you think of #2262?\nIt is basically the same approach you have taken, plus some simplification, but with not changing the logic for files under the module cache.. Closing this PR in favor of #2262 which does something similar and has other fixes. Thanks for reporting this @mxxcx \nSince you are using Go modules, can you please create this issue in https://github.com/stamblerre/gocode?\n@stamblerre can help figuring out what is going on.. Also, just to be sure that you are using the latest gocode for Go modules, please run the command Go: Install/Update Tools, select gocode-gomod, press Ok to update it and try again. @mxxcx The auto-completion in module mode is known to be slower than in the non-module mode. @stamblerre and her team are working on improving performance in this area.\n@stamblerre Is there anything @mxxcx can share to see if the slowness being seen is what we are already aware about or if it is being caused by something else?. @olesiapoz Debugger not hitting break points can have multiple root causes. The instance reported in #1987 has been solved and I don't believe that is the same problem you are facing. Please go through Debugging the debugger section of our wiki and try out the various logging settings one by one. That might tell you what the issue is.\nYou can share the same here and I can help in figuring out what is happening.\nSince you mentioned that this happens with any Go code, my guess is that this is some kind of environment issue. Please update your version of delve. Run Go: Install/Update Tools, select dlv, then press Ok to update. Please follow the various logging features mentioned in Debugging the debugger and share the logs.\nAre you using symlinks?. Are you able to hit the breakpoints when using delve directly from the command line/terminal?. @Sharpiro Thanks for reporting, I see this when using dlv from the terminal directly as well.\n@derekparker @aarzilli Any idea what is going on here?\n. Thanks @aarzilli \n@Sharpiro Based on the information @aarzilli has shared, please log an issue using the go issue tracker.. If you are using modules, then you need to get gocode from https://github.com/stamblerre/gocode and rename the resulting binary to gocode-gomod. Follow this up with also installing gocode from https://github.com/mdempsky/gocode.\nLet me know if that helps.. > I've used a wrong path for gopkgs tool in my build script so it wasn't built as an executable. Maybe you should somehow address this situation in the extension but that's another issue so I am closing this one.\nCan you elaborate on this?\n. > Maybe you should somehow address this situation in the extension\nBy this you mean that if the extension does find say a gopkgs file as in your case, it should check if it is an executable or not?. We already check whether the file corresponding to the Go tools exist or not. It is a simple step from there to add another check on whether it is an executable as well.\nPRs are most welcome to fix this.\nCode Pointers:\n- Build and Debug extension\n- Update the fileExists function check to do the additional check if the file is an executable. We already have access to the fs.stats object at this point, so checking the mode should do the trick.\n. Go ahead @keremgocen :). Yes, otherwise it misleads other contributors who want to work on issues with the help-wanted label :)\nI will update this issue once we release the update with the fix. Does it happen when you manually format the file?. Try manually formatting the file multiple times in quick succession and see if that results in the cc1 processes. @sunliver Can you try the latest beta version of this extension? . > About https://github.com/Microsoft/vscode-go/blob/latest/src/goDeclaration.ts#L170... Does that even work?,\nI do recall testing this but now that I look at the code, I am doubtful. It should most likely be\nif (stderr && stderr.startsWith('flag provided but not defined: -tags')) {\n    p = null;\n    return definitionLocation_gogetdoc(input, token, false).then(resolve, reject);\n}\n. I take back my objection for keeping the prompt for updating the tool.\nAt this point, godef not only has the new -r flag but also has the module support. I was thinking of having some kind of update notification for the latter, but the current prompt will do the trick for both features.\nBut we do need the fallback to running without -r flag when it is not supported. promptForUpdatingTool has the logic to not prompt the update msg for the same tool twice in the same VS Code session if the user dismissed the previous update notification\n. @segevfiner I trusted you!!!!\nLol, kidding. I should have checked if the upstream PR was merged or not.\nLet me reach out to the project maintainers there.\nFor now, I'll just push a commit to not use the -r flag. It definitely was sending the response first, and then only in the call back from delve was handleReenterDebug called which would send the stopped event.\nI assumed you meant that we had to wait until delve is done to send the response. . Can you elaborate on how you are calling the functions while debugging? Share some docs on the feature perhaps?. @erihanse What @lggomez says is right. Delve only supports simple expressions using variables and doesnt support function calls. Unless you find something in the delve apis that allows function calls, we wont be able to support this in VS Code.\n@lggomez I wonder if we can remove the Unable to eval expression: altogether. The error message from delve says something very similar Failed to eval expression which should be enough to suggest that delve failed to evaluate the expression.\nIt would have been nice to see a message like Function calls are not supported, but that would need us to parse the expression. I wouldnt treat it as a high priority though. @richardatphilo, Looks like this is your first PR in this project, Thanks & Welcome!. You can use the go.toolsEnvVarssetting. The environment variables set here are passed to every Go tool used by this Go extension. We use go doc to get the documentation to show in such cases. \nCan you look into and share how would we use the go doc command for this case?\n. That would be for Foo, but we are talking about f.a here. So my question was if you were to use go doc, how would you use it such that you get the Foo and Bar comments for the struct members. The problem is that we only know about the text next to the cursor, which in this case would be f.a. The editor has no idea of either Foo or Foo.a at this point.\n. > It already offers \"a\" and \"b\" in the autocompletion box\nHere \"it\" is gocode.\nWe pass in the file and cursor position and it returns us the completion candidates along with the package the candidates belong to.\nWe then use this information and try to call go doc.\n\nFor this it calls go doc -c -cmd -u github.com/AndreKR/test Foo so it does in fact know that f is of type Foo.\n\nWe dont call go doc for the actual completion items. We call go doc only to get the documentation for the completion items already provided by gocode. At this point, the code (the VS Code extension) is not aware of Foo\n. @OneOfOne I just happen to run npm install and push the updated package-lock.json file and had not seen your PR, sorry about that.. Please use the latest beta version of this extension and then use the same command Go: Install/Update Tools to update the godef tool (Dont forget to press Ok in the end)\nThe fork behind godef-gomod is no longer needed as all its changes have been merged to the original repo of https://github.com/rogpeppe/godef\n. Thanks for reporting this @nezorflame! And apologies for not getting to this sooner.\nWe try to deduce the import path of a package based on the folder path and the GOPATH it is under. But when using modules under GOPATH, as you have shown this will not yield the right import path for the package.\nWhen fixing this, I noticed that 2 other features (debugging and the Go: Install Current Package command) are also broken due to the exact same reason.\nI have pushed a fix for all of this, would you mind giving the latest beta version of this extension a try?. Thanks for reporting this @norilt \nThis is happening because there is a logic in place to avoid calling gocode when anything is typed after // as it is thought to be a comment.\nWe need to be a little more smarter there and not consider // inside a string as comment\n. PRs are welcome to fix this bug\nCode Pointers:\n- Build and Debug extension\n- This is where we exit early when cursor is after a //: https://github.com/Microsoft/vscode-go/blob/0.8.0/src/goSuggest.ts#L126\n- There is a helper method isPositionInString that we can use to check that the position where the // is at, is in a string or not.. @rajdhandus Definitely, go ahead :). The latest beta version (0.9.3-beta.2) of this extension has the fix for this issue\n. Does go doc work as expected when in module mode? Have you tried go doc in a terminal directly?\n. @segevfiner Is this for symbols from the same package or external?\nIf it is for the same package, then I believe the issue was using the right working directory when running go doc. I have the fix for that in https://github.com/Microsoft/vscode-go/pull/2262\n. Thanks @hotinherre \nI have pushed another commit to #2262 and this should take care of symbols from external packages as well.. @hotinherre Can you try the latest beta version? I have updated it just now with the fixes from #2262 \n. Thanks @hotinherre \n@segevfiner Can you try the latest beta version as well?. @segevfiner Thanks for the PR @segevfiner, this will take a little longer time than usual to look at :)\nCan you create a separate PR for the changes you did to goExtraInfo.ts to remove the use of deprecated MarkedString so that we can get that in independently?. @karim Can you try our latest beta version of the extension that has a couple of bug fixes that haven't been released yet?. @karim https://github.com/zmb3/gogetdoc/issues/54 was the issue that was fixed with the commit you are reverting in gogetdoc\nThe problem was not with the initial use of gogetdoc in a file in your project, but the subsequent uses in files. For eg, you tried to hover on fmt.Println, now run Go to definition on it, and then in the resulting file, try to run Go to definition or hover over a symbol. That won't work. And that is fixed with https://github.com/zmb3/gogetdoc/commit/1fd4a45c9db2a8d57766eb38d0e8aaf55199b44c. @karim I have pushed another fix. Can you try the latest beta version again? The version should be 0.8.1-beta.7\nTry with the latest gogetdoc as well. Thanks for getting back to us @karim and for all the feedback. The fix for this is now out in the latest update (0.9.0) to the Go extension. Thanks for reporting.\nThis is a duplicate of #2252 and is due to an upstream bug in the language server from Sourcegraph. See https://github.com/sourcegraph/go-langserver/issues/356\nFor workaround, please see https://github.com/Microsoft/vscode-go/issues/2252#issuecomment-455902293. @gdamore When you say \"configuration\"/\"setting\", are you referring to just the debug configurations or settings in general?. This seems like an extension agnostic feature request, doesnt it?\nIn which case, it makes better sense for VS Code to provide this feature so that users can switch in/out the configurations they want (for the same project), based on the scenario.\nPlease log this as a feature request in the VS Code repo at https://github.com/Microsoft/vscode\n. A few notes:\n- Yes, language server is the way for future delvelopment, and we are hoping that the one from Google would cater to both module and GOPATHs\n- The Go language server by Sourcegraph does not support modules and has stopped adding new features\n- If you want to use bingo as your language server, install it and then follow the settings in https://github.com/Microsoft/vscode-go/issues/2251#issuecomment-454883375\n- If you are not using the language server and are seeing slowness in auto-completion, please log an issue at https://github.com/stamblerre/gocode\n. Thanks for reporting @vladyslav2 \nThis is due to an upstream issue with the Go language server by Sourcegraph. See https://github.com/sourcegraph/go-langserver/issues/356\nIf you want to continue to use the Go language server from Sourcegraph, then I would suggest the below workaround until the bug is fixed\n- Open the code for the language server in VS Code. This would be in your $GOPATH/src/github.com/sourcegraph/go-langserver\n- Undo the commits in the master branch until you reach https://github.com/sourcegraph/go-langserver/commit/bc3adb4a5b1092cd713b279a11217e2e54243c58\n- Run the command Go: Install Current Package\n. @vladyslav2 There is a difference between the Go language server which has the bug and the VS Code Go extension which Visual Studio Code recommends you to install.\nTo understand how the Go extension uses the Go language server, please see https://github.com/Microsoft/vscode-go#go-language-server-experimental\nYou can use the VS Code Go extension, but not use the language server by editing the setting go.useLanguageServer\n. Do you know if something changed with gometalinter? The corresponding tests are failing.... I dont have an opinion here either way.\nWe can make the switch if there are enough upvotes to this issue.. Thanks for reporting @dreamer-nitj \nPlease follow the part about using the Process Explorer in VS Code in the wiki: https://github.com/Microsoft/vscode/wiki/Performance-Issues#visual-studio-code-is-consuming-a-lot-of-cpu \nThis will help us narrow down what process exactly is causing the heavy CPU usage.\nOther questions:\n- Do you see the slowness even when working on small simple Go programs or only on large projects?\n- Try turning off all the on save features of this extension and see if that makes any difference.\n- Are you using Go modules?\n. You seem to have auto-save enabled. So that will trigger the on save features much more frequently than if you were saving the files manually.\nTry turning the on save features back on, but disable auto-save. How much of a difference does that make?\nThe part that is most helpful from https://github.com/Microsoft/vscode/wiki/Performance-Issues#visual-studio-code-is-consuming-a-lot-of-cpu is what the Process Explorer shows.\nSo the next time you see high CPU usage, can you check the Process Explorer and share a screenshot of that?\n. Thanks for reporting @Delphier \nWe did consider this when we added the links.\nThe reason we decided to go with all lower case was to make them look as small as possible, compared to the code around it i.e to not grab the user's attention away from the code.. @isidorn This does happen in the latest Insiders\nThe original issue was that errors don't show up in the debug console at all.\nThis follow up issue is that the error from the first debugging session doesn't get cleared when the extension writes errors from the second debugging session.\nSample Code:\n```\npackage main\nimport \"fmt\"\nfunc main() {\n    a := 7\n    fmt.Println(b)\n    fm.Print(\"hello\")\n}\n```\nRepro steps:\n- Debug the above code. Debugging fails and debug console shows errors for line 7 and 8\n- Replace b with a in line 7. It will fix the first error.\n- Try debugging again. Debugging fails, but debug console still shows the older msg which has errors for line 7 and 8\n- Clear the debug console. Now the error msg from the second debugging sessions shows up which will show error just for line 8\nI'll move this to the VS Code repo.\n. VS Code version 1.28 works as expected.\nVS Code version 1.29 had the issue of no errors showing up in the debug console which was fixed in 1.30\nVS Code version 1.30 and Insiders 1.31 (as of today) as the bug currently being described in this issue . > how does go write errors to the debug console?\nThis particular error is sent via the sendErrorResponse() in the launchRequest() call\n\nIn step 3 when debugging fails do you actually see a drop down of multiple debug consoles?\n\nNo, I don't see any drop down for multiple debug console\n\nDoes switching the active debug console actually show the error? Is the actual issue that the new debug console does not get focus becuase the session failed?\n\nThis assumes that there are multiple debug consoles, but I don't see more than 1.. \n. @inliquid Can you try our latest beta version of the extension that has a couple of bug fixes that haven't been released yet?. Thanks for reporting this @DanMaples!\nI believe we add the -run followed by the test functions when running individual tests or when running all the tests in the file. As you have already noticed, we dont do this when running all the tests in the package.\n\nIt might just be easiest to say \"Ignore the user settings -run regex commands when the tool is creating its own`\n\nThis would be the right approach. Also ignore such user settings when not needed in cases like when we run go test -c to find build errors\nPRs are most welcome to make this change.\nCode Pointers:\n- Build and Debug extension\n- The getTestFlags() function in the testUtils.ts file is the one that reads from the settings. All we need to do is to go through the different features that call this and prune out the run regex as needed\nThe below are the places where getTestFlags() is used\n- goBuild.ts: To run go test to file build errors in test file\n- goCheck.ts: To run tests when either go.testOnSave or go.coverOnSave settings are enabled\n- goCover.ts: To all tests in the package when the Toggle Code Coverage in Package command is run\n- goRunTestCodelens.ts: To create the codelens links above test functions \n- goTest.ts: For all the test related commands\n. @502647092 Can you try our latest beta version of the extension that has a couple of bug fixes that haven't been released yet?. Thanks for confirming the fix @502647092!. This is most likely coming from https://github.com/Microsoft/vscode-go/blob/0.8.0/src/goCover.ts#L53\nWe can pass the uri of the current active file or fallback to the uri of the first workspace.\nPRs are welcome.\nSee Build and Debug Extension to set up local dev environment. Go ahead @keremgocen :). Fixed with #2299. We use delve to provide the debugging feature.\nIt builds your code, creates a binary (the debug file you are seeing) and uses that to do the debugging.\nThis file should get deleted at the end of the debug session.\nIf you are seeing that it is not getting cleaned up, then please provide a small sample code and exact repro steps.. When you have finished debugging, the file doesn't get cleaned up?\nWhat OS are you using?\n. Thanks @monkeyWie \nI see this in Windows, but not on my Mac.\n. @jhendrixMSFT This is most likely due to delve.\nBy the time we send the Halt request to delve, delve has already completed running the whole program. So the Halt request fails with Process <process-number> has exited with status 0\nI would expect delve to clean up the debug file it created in such cases, we should look into why this is not happening as well as why it does happen on Mac. @vladbarosan Right now we end up at https://github.com/Microsoft/vscode-go/blob/0.9.0/src/debugAdapter/goDebug.ts#L533 failing to halt delve because delve has already halted (sort of)\nI am not sure if the Halt request failed here or the Detach request.\nIf it is the Halt request that is failing, then maybe we should try running Detach request nevertheless? Not sure.\n. @monkeyWie The fix for this is available in the latest beta version of this extension. Please give it a try. That is indeed weird, but I dont see it.\nWhat you are seeing is the signature help i.e the tooltip that appears when you are typing parameters for a function inside the (). But I dont see it.\nCan you share your Go related settings?\nCan you also retry this after disabling all other extensions? Just to ensure that some other extension is not interfering here?. @flddr \nThe Go extension uses just the formatting tool to do the formatting.\nBut you may have some other extension that might be interfering here as well.\nTo eliminate this possibility, please try disabling all extensions other than Go and try to see if you still get this error. In that case, it must be a problem with goreturns\nAs a last attempt to be sure that this is indeed an issue with goreturns, can you try running goreturns from the terminal and see if you see the same issue?. Thanks @flddr, then this indeed is an issue with goreturns. Closing this issue as there is nothing more we can do in the extension.\n\nIs this the tool used by VS Code? \n\nYes, goreturns is the default formatting tool used by the Go extension. You can change this to either goimports or gofmt by changing the setting go.formatTool.. @michaelweidmann Thanks for reporting and apologies for not responding sooner.\nCan you try the latest version of the Go extension (0.9.2) and see if you still have the issue? If yes, the please share the logs.\nThe latest version have some logging updates that can help she some more light on your case 2.\n. I believe the problem here is that we have the 2 problems that you expect to see on the same line. In your case, line 48.\nCan you try and introduce a linting error (but not a vet or build error) on a different line?. > If you're suggesting that the vet linter takes precedence over the others and will hide the other problems...\nActually, the results from go build takes precedence over linter and go vet results. The idea being that if you have a build error, you should probably fix that first before anything else.\n. The README and the wiki in this repo are the only documentation we have on this project. Updated the FAQ wiki and updated root README to point to FAQ. Is it different in a non module mode?. Can you please provide a screenshot showing the difference for the same struct in module and non module mode?. Thanks @xujintao!\nThis data comes from godef which seems to be using different formatting for the content between modules and non modules.\nI'll move this issue to the godef repo.\n. This issue was moved to rogpeppe/godef#109. @jpincas The flag is -exclude-docs not --exclude-docs, I have corrected it in my comment above. Once you make that change, you shouldn't see any more prompts for gocode.\nRegardless, I'll make that part of the code more resilient\n@tj Thats a good idea about the timeout, I'll look into it.\n. @tj are you sure your user setting is not getting overriden by workspace settings?. If not then close any running gocode process and then try again in VS Code. That is a little weird @tj... Why would node_modules have any affect on go doc?\nWe do have a cancellation token in place for the auto-completion feature. When a previous request is no longer valid (say because you continued typing and now are on a different word), then cancellation token for the previous request is cancelled by VS Code. \nAnd we do listen to this cancellation and kill the go doc process. Looks like this token is not getting cancelled properly, thats the only explanation I can come up with for why these processes are lingering.\n. Not a dumb question at all @jpincas \nGenerally, \"showing the docs\" could either refer to the docs that accompany the suggestion widget or what you see when you hover over symbols.\nBut in this case, we are referring to the former.. @jpincas \nAuto-updating doesn't get disabled once you are on beta. That only happens if you opt out using the setting extension.autoUpdate\nNo, there were no changes in 0.9.2 regarding the -exclude-docs\nFrom your screenshot it looks like the language server is taking up the CPU and not the go doc process anymore. Using the -exclude-docs flag only helps with he problem caused by go doc\nRegarding the problem with the language server, I would suggest to disable that. In a few weeks the team at Google will be ready with a their official language server which should perform better. Are other features of the Go extension working in this case? Like Go to definition or formatting? This is to ensure that the extension is indeed being activated.\nAlso, see https://github.com/Microsoft/vscode-go/wiki/Go-with-VS-Code-FAQ-and-Troubleshooting which has a section for auto-completion. That can help in narrowing down the issue. VS Code update has nothing to do with how the tools behave.\nBut they can stop working with a Go update.\nIt could also be the case that gocode was such with an old cache and just had to be restarted.\nGlad to see you have things working again, Happy Coding!. Assuming the ranges being passed from the language server is 0 based, the end range has line 9 which would mean that there are 10 lines in the file. But the file only has 9 files. Maybe that is the problem?. The display of lines as well as applying the formatting edit ranges provided by the language server is controlled in VS Code and not in the Go extension.\nI would suggest to log this issue in the VS Code repo to get the right answer.. Thanks for the PR @ZhiweiWang \nFrom what I read in the README at https://github.com/Eun/gomultifmt, gomultifmt will run multiple formatters one after the other.\nWe have had reports of existing formatters taking too long a time to finish. Due to this, the editor.formatOnSaveTimeout kicks in and aborts the formatting process.\nTherefore, I am not very comfortable to add a new option that will run multiple formatters and thus increasing the total time taken.\nBut, if you want to use this tool, there is another way to do this without doing any code changes to this extension. Use the setting go.alternateTools to map whatever is the value for the go.formatTool . For example, add the below to your settings\n\"go.formatTool\": \"gofmt\",\n\"go.alternateTools\": {\n    \"gofmt\": \"gomultifmt\"\n}\nBy doing this, the extension will run gomultifmt instead of gofmt. Thanks for reporting @Guitarbum722 \nSo looks like all we need to do is identify the receiver type, convert it to title case, prepend it to the function name and then pass the resulting string to gotests\nPRs are welcome to fix this\nCode Pointers:\n- See Build and Debug Extension to set up local dev environment\n- https://github.com/Microsoft/vscode-go/blob/0.8.0/src/goGenerateTests.ts#L86 is the function that is called for generating unit tests for a function, so all changes would go here.\n. @jamesgeorge007 Yes, the changes should be done inside getFunctions before calling generateTests. I would suggest to add breakpoints and understand the current flow for Go: Generate Unit Tests for Function command.\nThanks for the note @Guitarbum722 . @open-source-explorer That would give just the function name, where as what we need is the receiver  type as well. Since getFunctions should return range information as well. Using that you can get the declaration line for the function, from which you should be able to get the receiver information.\nRegarding receivers, https://tour.golang.org/methods/3 is a simple introduction. One of the properties would be location. You can pass this to the getText() function of the document to get the text of the entire test function, and then parse the receiver info out from that text. > provide ways to jump between symbols within the same package. \nI believe you are referring to, for example, the List Package declarations command in Sublime Text. Can you confirm?\nIf so, then this feature request is being tracked in #671\n@axetroy #1928 would let us jump between symbols, it is tracking opening of the package in a new VS Code window.. Alright then, closing this issue in favor of #671\nPlease up vote or subscribe to #671 so that you know if there are any updates there.. Agreed. We can start enabling this one by one. I am sure it would trigger a lot of code changes across the repo.. We can leave strictPropertyInitialization and strictNullChecks flags out for the first round. I see that we are doing exactly that in https://github.com/Microsoft/vscode-go/pull/2294. @lggomez You have marked this PR as WIP. Is there anything other than the above 2 flags that is pending? If not, we can start reviewing that and get that merged first.\nThen, we can enable strictNullChecks locally and list here in this issue all the files that have the problems, then tackle them one by one. This way each of us can pick a bunch and work through them, instead of a single person having to go through them all.\nThen, repeat the process for strictPropertyInitialization. Closing this issue as we https://github.com/Microsoft/vscode-go/pull/2294 is now merged and we have https://github.com/Microsoft/vscode-go/issues/2304 to track the rest. Including other contributors here whose work will be going into the next update, but their work is already tested\n@brycekahle, @hellozee, @shreyu86, @oneslash\n. @kidlj Can you ensure you have updated the dependent tools? Run Go: Install/Update tools and update either godef or gogetdoc (which ever it is that you are using). Also, turn off language server when using this.. @kidlj https://github.com/Microsoft/vscode-go/issues/2180 was tracking the bug that Go to definition doesnt work in the files that are part of the sub module. This is fixed.\nThe case you are trying in your screenshots is the below\n- Go to definition on a file that is part of the sub module (this works and this is what #2180 was initially tracking)\n- In the file that opens (this will be from the mod cache i.e $GOPATH/pkg/mod), you try Go to definition again. This fails. (Note, this works if initially you were working on the main module and not the sub modules)\nI have created #2296 to track this.. cc @lggomez to take a look at the debugging features and bug fixes, as he has added quite a few features/bug fixes in this area in the past himself.. > I don't know if I should reply here to say everything is working as expected or reply only if there is a problem with the latest beta.\nEven feedback that everything is working as expected is very useful. Thanks @karim!. @jhendrixMSFT Thats a good find, but I believe we should continue investigating that, but dont need to block the build for it. Can you log a separate issue for this and copy over @tcagan's feedback in https://github.com/Microsoft/vscode-go/issues/2288#issuecomment-460919209\n@tcagan For https://github.com/Microsoft/vscode-go/issues/2288#issuecomment-460941939, is there a github issue for it?\n. The 0.9.0 update is now released, thanks everyone for all the help :)\nHappy Coding!. @dhowden That's right, thanks! Released 0.9.1 with the fix.. You will also need to update https://github.com/Microsoft/vscode-go/blob/98c965110942a4d9fbdcde9e9a8af8d9398c4699/src/debugAdapter/goDebug.ts#L560. Thanks for reporting @fpsqdb \nFor now, please delete the reftools folder from the path where your tools get installed and try again. \n@davidrjenni, was something force pushed to your https://github.com/davidrjenni/reftools/ repo? That is the only thing I can think of that can explain this issue. @fpsqdb It works now after using the workaround (deleting the reftools folder)? Or it works even without the workaround?. Thanks @fpsqdb \nI am closing this issue as there is nothing much to do from our side.\nI have updated our TroubleShooting wiki to include a note on this.. @vladbarosan's fix has reached master, I have updated this PR to get the latest changes from master and resolved a merge conflict, so the builds should be green now.\n@lggomez, nice to hear from you after a long time! We have quite some debugging related features and bug fixes, did you get a chance to try them out? If not, then please do take a look at the latest beta version and let me know if you have any feedback. Thanks for all this @lggomez and @vladbarosan!\nOnce I release an update tomorrow from the master branch, I'll merge this PR\n. This is probably because we are using the root folder i.e the one mapping to the main module, when running the godef the second time.\nAt this time, all we know is the file for the which the operation is being made i.e the one from module cache. For such case, we fall back to the project root folder as the working directory. Because by this time, we have lost the context that we landed in the current file from the sub module.. @clor09 There is no good solution at hand at the moment, ideas are welcome. Thanks for reporting @allanbomsft. This is a duplicate of #2187\nWe have the fix for this in our latest beta version of this extension. Please try that out or wait until we release an update next week.. No problem at all, Happy Coding!. > This happens only when the OUTPUT tab is open (on the right side) \nSo, this doesn't happen when the output panel is below the editor area?\nCan you try disabling the format on save feature and see if this still happens?\nAdd the below in your settings \n\"[go]\": {\n        \"editor.formatOnSave\": false\n    }\n. Formatting changes the content in the editor, so I thought that could be one reason for the jump in cursor. Good to know that we can rule it out.\nWhat remains is the jump in focus to the output pane. Do you see this same issue when the output pane is below the editor area instead of on the right side?. Can you update https://github.com/VSCodeVim/Vim/issues/3444 with the point about you no longer see this in the downgraded version of the extension?\nI'll close this issue for now, as there is nothing much we can do here.\nI'll subscribe to https://github.com/VSCodeVim/Vim/issues/3444 though. So that if anyone needs any information on what is happening on the Go side of things, I'll be able to answer there.\n. I had this point in my head the first time we went through your PR, but I hadnt sorted my thoughts yet and didnt get a chance to actually try the various scenarios.\nYesterday, I did get some time, and so the prompt for the change :). Hmm... now that I check it, I do see that it loads only 64.\nDo you have a test case, where we would need to expand the arrays/slices/maps ?\nWith mine, they expanded just fine even after the changes in this PR. https://github.com/Microsoft/vscode/issues/60565 is a reference to how the VS Code team is tackling the strictNullCheck problem. - goreturns does not support modules. See https://github.com/golang/go/issues/24661\n- goimports does support modules now. But ensure you have the latest version:\n    - Set go.formatTool to goimports\n    - Run Go: Install/Update Tools \n    - Select goimports\n    - Press \"Ok\"\nPlease let me know if that works for you.. Thanks for confirming that @nezorflame \nWhat we can do to improve this experience is to use goimports instead of goreturns when using modules. \nPRs are welcome for this\nCode Pointers:\n- See Build and Debug Extension to set up local dev environment\n- goFormat.ts is the file to be updated to use goimports if user's choice is goreturns in module mode\n- isModSupported is the helper function to use to determine if current file is using modules\n. @open-source-explorer You need to import isModSupported from the goModules.ts file. @stevvooe When you see that goimports works fine when run in CLI but not in VS Code, can you share from which folder are you running the goimports tool? Try running it from the same folder which has the file being formatted.. Regarding the original issue here about goreturns vs goimports for modules:\nIn the latest beta version (0.9.3-beta.2) of this extension, if you are using modules, your workspace settings will be updated to use goimports instead of goreturns for formatting (and you will be notified of the same). If you don't have goimports installed, you will be prompted to install the same\n@stevvooe If the formatting failed, then there will be logs with the exact call being made. \nFrom the View menu, select Output. Select Log (Extension Host) from the drop down on the top right corner of the panel. This will have logs from the extension host and errors from extensions.\nClear it (there should be a button on the top right corner), try formatting again and see if anything is printed to the logs\nPlease log a new issue with your findings. I am closing this issue as we now use goimports instead of goreturns when using Go modules. Looks like this is your first contribution to this project, Thanks & Welcome!. Thanks for reporting @elgatito \nI am not well versed with how CGO or swig works, so bear with me as I have a few questions...\n\nWhen I edit project, that is using CGO/Swig and there are non-compiled changes in C code, go build is firing swig to re-compile.\n\nSo this is when you are editing non go files?. When the extension runs a go build, and there is a previously one already running, the previous one is cancelled i.e. the process that was spawned by for the previous go build and all its child processes are killed.\nIf that is not what you see, then you have 2 options\n1. Set go.buildOnSave to false in your settings. This would stop the the build that gets triggered on file save\n2. Or you can set up a local dev environment of this extension and help us figure out why the previous go build is not getting cancelled.\nIf you choose option 2, then\n- Build and Debug extension\n- For the sake of debugging, disable the other save participants using the go.lintOnSave and go.vetOnSave settings\n- https://github.com/Microsoft/vscode-go/blob/0.6.89/src/goBuild.ts#L51 is the code that ensures previous processes are killed before creating a new one \n- https://github.com/Microsoft/vscode-go/blob/0.6.89/src/util.ts#L603 is the code that actually runs the build. Thanks for reporting @SteelPhase!\nThis got introduced in the last release via \nhttps://github.com/Microsoft/vscode-go/commit/1dff04f211603b0c2eba3bfe491e0207f6aa5f48 where I pulled the dead code that was supposed to log the error message.\nBut this error only means that the extension's attempt to halt delve failed because the program being debugged has already completed.\nThe latest update (0.9.2) should have the fix.. That was due to \nhttps://github.com/Microsoft/vscode-go/issues/1919#issuecomment-419765212\nAny reason you want it not disabled when installing tools?. That's fine @oneslash, I can take care of the tests. Do you see the same issue if you change the go.lintOnSave and go.buildOnSave settings to package?. @jhendrixMSFT Can you try to set buildOnSave and lintOnSave settings to workspace and check the behavior on a project with sub modules?\n\nI also tried it on another project with the same subfolder for go structure and it seems to run golangci-lint on the whole go project, which is fine by me.\n\nDid this other project use modules as well?. @ravidborse \n\nAre you using symlinks for this project?\nAre you using modules?\nAre you able to hit the breakpoints successfully when running dlv from the command line? \nWith C:\\Users\\raborse\\go\\src\\RestAPI as your current working directory, run C:\\Users\\raborse\\go\\bin\\dlv.exe debug RestAPI --api-version=2. \n\n\nIn the resulting interactive shell, type b main.main followed by b main.go:7 (This will set the breakpoints)\nUse c for the continue command to hit the above 2 breakpoints\n\n. Thanks @oneslash \nI have pushed some more cleanup related commits. @jhendrixMSFT Can we have an issue logged for this?. @inliquid Please log this issue in the repo of the language server you are using.\nThis is most probably because the language server is not returning the data in the right format to VS Code.. Thanks @inliquid !\nThis is indeed not related to the language server, but it is not caused because of this extension either.\nI have opened https://github.com/Microsoft/vscode/issues/69091 in the VS Code repo to track this issue\n. @timthesinner Thanks for reporting\nCan you use the command Developer: Open Process Explorer and share the output when you see a high cpu load? This will allow us to see which process is causing the high cpu load . @aschade92 The showGlobalVariables needs to be set in the debug configuration in your launch.json file and not in the go.delveConfig setting. Can you try doing that?\n\nGlobal variables aren't really recommended in general by the go community anyways\n\nCan you point us to some docs or discussion around this?. > Is there any way to apply this settings in the workspace settings?\nNot at the moment, but we should be able to enable add it to the go.delveConfig setting.\nPRs are welcome to do this\nCode Pointers:\n- See Build and Debug Extension to set up local dev environment\n- The delveConfig property in the package.json file needs to be updated to support showGlobalVariables setting\n- goDebugConfiguration.ts can then be updated to read this setting and update the debug configuration. In the latest beta version (0.9.3-beta.2) of this extension, showGlobalVariables is now configurable in the go.delveConfig and is disabled by default as well. - Have you opted in to use the language server explicitly by adding the setting \"go.useLanguageServer\": true?\n- Have you tried running Go: Build current Package command after updating the go.mod file to see if that helps?. @shynome It is not clear to me if you set \"go.useLanguageServer\": true before or after my question.\nCan you share all you go related settings?. Ok, looks like you are using the bingo language server. Please log an issue at https://github.com/saibing/bingo/issues first. If it is determined there that this is an issue with the Go extension, then we can re-open this issue.. >  I can't get any tips from the pkg until I exec reload the window common\nThe original problem was with getting auto-completions and other features when adding packages to the go.mod file.\nThe language server should be able to give you these features without needing a restart which is why I suggested that this should be an issue for the language server.. See https://github.com/Microsoft/vscode-go/pull/2020 for more context on how the \"fullyQualifiedName\" came into picture. Thanks for reporting @wmh \n\nAre you using Go modules?\nCan you share a small sample code where you see the problem consistently?\nYou should be able to see the actual error on the logs. Select View (from the menu) -> Output-> Log (Extension Host) (from the drop down on the top right side of the panel)\nCan you update the godef tool responsible for the Go to definition feature and try again? Run the command Go: Install/Update Tools -> select godef -> Press Ok. Clearly godef is failing to provide the location.\n\nCan you provide the folder structure for your project pointing at which folder is the root that was opened in VS Code?\nDoes running /workspaces/go/bin/godef -t -f /workspaces/go/src/tmp/test-godef/main.go -o 46 from the terminal give an error or works as expected?. Thats good to know, thanks @wmh.\nSo to summarize, the go to definition works in the original folder, but not in sym link folder.\nAnd older version of the extension (0.8.0) works in sym link folders. \nIs that right?. Thanks @wmh \nThis is mostly related to the folder from where we are running godef. That is the only difference between 0.8.0 and the latest version of the extension.\nWe will look into this, thanks for reporting.. The latest beta version (0.9.3-beta.2) of this extension has the fix for this issue. The above is a just the bug template and has no information on the issue you are seeing.\nPlease add details when you log an issue. Thanks for reporting @jayel-87 \nThis is most likely due to https://github.com/Microsoft/vscode-go/pull/2230\nIs /usr/local/go the go binary or a folder or some other file? Run /usr/local/go version\n. @jayel-87, @aeikenberry  Is /usr/local in your PATH env variable?\nI have pushed a possible fix for this to master. Can you try the latest beta version of this extension and let me know if this solves the issue for you?. Thanks @seventy-two, can you also confirm if  /usr/local is in your PATH env variable?. Great, closing this issue. Will add a comment here when we release the official update. @vladbarosan Why not use the built in fs module instead?. > what is our policies on adding dependencies\nWe dont have any official policy on this yet. The basic idea is that we won't add dependencies that we can avoid, as it will increase the size of the extension payload.\nDid you have any other specific concerns?. @vladbarosan I pushed 2 commits with tiny changes, please take a look and let me know if you have any concerns. Also, did you get a chance to try the remote debugging scenario?. @vladbarosan For future PRs, please use the Squash option while merging.. Good point. Done.. Thanks for logging this @vladbarosan \nI have reviewed the recommended rules, and updated our tslint.json appropriately with \nhttps://github.com/Microsoft/vscode-go/commit/3703d35f50c4978dc1c2c59fb0a967f46b1fee78\nFew of the rules are commented as they would require work and we can pick them off one by one. Listing them below:\n{\n\"arrow-parens\": true,\n\"callable-types\": true,\n\"curly\": true,\n \"interface-name\": {\n    \"options\": [\"always-prefix\"]\n},\n\"jsdoc-format\": true,\n\"max-line-length\": { \"options\": 120 },\n\"member-access\": true,\n\"member-ordering\": {\n     \"options\": {\n    \"order\": \"statics-first\"\n    }\n},\n\"no-consecutive-blank-lines\": true,\n\"no-empty\": true,\n\"no-shadowed-variable\": true,\n\"no-var-requires\": true,\n\"object-literal-key-quotes\": { \"options\": \"consistent-as-needed\" },\n\"object-literal-shorthand\": true,\n\"object-literal-sort-keys\": true,\n\"one-variable-per-declaration\": { \"options\": [\"ignore-for-loop\"] },\n\"only-arrow-functions\": {\n    \"options\": [\"allow-declarations\", \"allow-named-functions\"]\n },\n\"ordered-imports\": {\n    \"options\": {\n        \"import-sources-order\": \"case-insensitive\",\n        \"module-source-path\": \"full\",\n            \"named-imports-order\": \"case-insensitive\"\n    }\n},\n \"prefer-const\": true,\n\"prefer-for-of\": true,\n\"radix\": true,\n}\nPRs are welcome to include the above rules one by one. @harrybin815 Can you provide more details on what you are looking for? . This issue has been closed because it needs more information and has not had recent activity. . @dnldd Those logs are related to the outline feature and not formatting. Please clear the logs, and then retry formatting to see if you get any errors for formatting.\nHere are some additional details that you can provide which can help\n- Are you using modules?\n- Is formatting an issue only on save or does manual formatting doesn't work either?\n- Have you customized the editor.formatOnSave setting? Run Preferences: Open Settings (JSON) to see your modified settings\n- Does this happen even on a simple small hello world sample?. @lloiser The timeout issue with format on save issue can be fixed with updating theeditor.formatOnSaveTimeout` setting\ngoreturns is not known to be working with modules reliably yet. I would suggest to use goimports instead. Remember to update your version of goimports to get the latest fixes that enables it to work with modules. Run Go: Install/Update Tools -> select goimports -> Press Ok. @jamesgeorge007, @lloiser  I figured a simpler way to use goimports when using modules that doesnt involve checking isModSupported for each formatting request. See https://github.com/Microsoft/vscode-go/commit/81013f5781e9d8327fbba6e297c46db9ff754d73\nTherefore, am closing this PR. Thanks for all the effort here.. You probably have GOBIN set in which case the output of go install will always end up in the location set in GOBIN\nWe don't use go install for gocode-gomod, instead use go build -o, therefore you see it ending up in the right place\nCan you run go env GOBIN and see what the result is?. > I found vscode always repeat appending PATH, which is really annoying.\nI didn't understand this part, can you elaborate?. The Go extension doesn't update the PATH env variable. So, I am not sure what is causing the repetition.\nConcluding, what we can do in the Go extension is to ignore GOBIN when go.toolsGopath setting is set by the user.\nPRs are welcome to fix this\nCode Pointers:\n- See Build and Debug Extension to set up local dev environment\n- installTools is the function that installs the Go tools. Here is where we should unset the GOBIN (if go.toolsGopath is set) in the process that is spawned to install the tools. There is no need to work with the goRunTime varaible or the go binary.\nYou can unset GOBIN by envForTools['GOBIN'] = \"\";\nenvForTools is the env used in the process that we spawn to install the tools.\n. Thanks for reporting @tatecapone and @marco-m \n\nit does not autoimport the libraries\n\nWhich feature are you referring to here? The one where on file save, the missing imports get added? Or auto-completion adding imports for the symbols from external packages\nIt will be really be helpful to know exactly which features stop working or if the entire extension stops working.\nAnother place to look for errors in the output channel. Select the View menu -> Output -> Select  Log (Extension Host) in the drop down channel on the top right side of the panel\n. Those who see formatting issues, try the below\n- Change the go.formatTool to either gofmt or goimports\n- Increase the editor.formatOnSaveTimeout setting if the logs show error about formatting taking too long\nTo see the logs View -> Output -> Logs (Extension Host) in the dropdown on the top right corner of the panel. @Keleir The log \"ExtensionService#_doActivateExtension ms-vscode.Go {\"startup\":false, \"activationEvent\":\"onLanguage:go\"}\" does not mean that the extension failed to start. It means that the extension has gotten activated but not on startup i.e it got activated when a Go file was opened.\nPlease perform the format operation, and then look at the logs for errors. @Keleir Please log a new issue with your Go related settings, a clear description of which features work, which features don't work as well as any errors from the logs \nThe original issue here by @tatecapone was specific to formatting which has been solved.\nTherefore, closing this issue\n. Thanks for reporting @serbrech! Can you please provide some more details?\n\nA screenshot of the error would help.\nDoes this happen consistently? Even in a small sample hello world program?\nThe next time you see this, can you share any errors you see in the logs? To open the logs, select View from the menu -> select Output -> select Log (Extension Host) from the dropdown on the top right corner. Clear the logs to reduce noise, and go through your steps to see the error corresponding to your scenario. This issue has been closed because it needs more information and has not had recent activity. . Thanks for the PR @calebdoxsey. Looks like this is your first contribution to this project, Thanks & Welcome!\n\n\nI realized there was already a PR out there from a few months ago\n\nWhich PR are you referring to here?\n. @brainsnail Do you know if there is an ETA for your PR (https://github.com/atom/language-go/pull/156)?\nIf not, then would you be interested in reviewing this PR and give us your feedback?. @brainsnail Do you know if there is an ETA for your PR (https://github.com/atom/language-go/pull/156)?\nIf not, then would you be interested in reviewing this PR and give us your feedback?. Thanks a lot @brainsnail and @calebdoxsey!. @vinhjaxt Thanks for reporting. Does this happen even when debugging a simple hello world program?\nCan you share the code where you see this problem consistently?. Thanks for reporting @philippgille \n\nThe point on \"Do not pass the flag \u2013api-version=2 to dlv\" is definitely obsolete. I have removed it from the wiki\nI don't recall ever adding the line \"remotePath must be correct otherwise breakpoints will silently fail\",  but that is clearly not helpful. Removed this as well\nI am also updating the intellisense text on remotePath to \"The path to file being debugged on the remote machine, in case of remote debugging.\". You should be able to see this in the next update\n\n\nVS Code complains that the client (VS Code) uses v2 and I should start the server with v2 as well.\n\nI believe the message being shown suggests changing the version on the client and not server. The intention is to have both the server and the client use the same version. It can be 1 or 2\n. > Considering Delve API v2 is probably the way to go nowadays, maybe the dlv debug example commands should contain --api-version=2?\nWhich example commands are you referring to?\n\nAlso, with remotePath being set to the executable it still doesn't work for me.\n\nThe remote path should point to the source file that has the \"main\" function and not executable\n\nI think the whole \"Remote Debugging\" section could generally be improved by extending the descriptions and maybe adding a complete example.\n\nYes, I agree on this. We will look into this. Ah, never mind, I see that the example commands you are referring to is in the wiki as well.\nI have made my first round of updates to the wiki \nPlease do take a look.\nWe will look at your references and see what else we can do to make this easier.\n. We could use the scope argument and restrict guru to just the folder that is opened in VS Code. But making this as a default might not be a good idea as one would expect Find all references to well... find all references.\nInstead we can introduce a setting, say go.guruScope and allow users to provide the scope value here. Or this can be a boolean that would either set the scope to current project or the entire GOPATH.\nThoughts?\ncc @jhendrixMSFT, @vladbarosan . @zgramana What do you refer to when you say \"all my workspace folders\"? Is that folders under the workspace that was opened in VS Code? Or my entire GOPATH?\n@vladbarosan How would we define \"just my code\"?. AFAIK, the scope argument takes in package import paths and not absolute folder paths. Therefore, we need to map the folder opened in VS Code to a package. This will not always work as there might not be a package at the root level.\nWhich then leaves us with running go list ./... in the root folder and using all the resulting packages.. > I guess you're talking about the debugger and the language server. Is there any other case I'm missing?\ngocode is initially run in server mode. Subsequent completion requests make client type requests.\n\nwhich is an acceptable default value\n\nThere are 3 types of operations\n-  \"onSave\" operations like build, lint, vet \n-  \"onType\" operations like completions and live-errors. \n- All other operations that are triggered by a command.\nThe first 2 types should have shorter timeouts, and the 3rd one can afford to have longer timeout.\nVS Code has a timeout for the formatOnSave feature (editor.formatOnSaveTimeout)\nFor us, I can think of a single setting say go.operationTimeout which can take an object like\n{\n   \"buildOnSave\": 1000\n    \"buildOnCommand\": 2000\n    \"completion\": 2000\n    ....\n}\n. > This timeout should send a CancellationToken to the extension so there isn't anything to do on our side right?\nYes.\n\nI was thinking on implementing an execFile wrapper in utils that handles the configuration retrieval and timeout parameter according to an enum parameter with these values\n\nYou would have to maintain a mapping between the enum value and the name used in the configuration.\nMost of our files already access the configuration object, so doing the configuration retrieval in the the wrapper doesnt give much benefits.. The verbosity is fine\n\nI would replace \"execute\" with \"operation\" in executeOnSave, executeOnCommand and executeOnType \n\nrunTimeDefault will need some more thought. We use this for go version, go env, go list, go doc, go vet, go build, go test, go get, go install. They all cannot fall under the same bucket and use the same timeout.\n. Some operations that use go list may run longer. Since the results are cached, it would be ok for it to run that way.. @Allenyn Please elaborate.\n\n\nWhat window would this be?\n\nWont you be able to see the dependencies if you just opened the go.mod file?. I do believe this is a cool feature to have, although I am afraid I don't believe this extension is the right place for it. \n\nAs VS Code and this extension has gained popularity, we have seen a gradual scope creep over the past year. Being a sole maintainer of this project, it is getting a little hard to support all incoming requests and maintaining the ever growing set of features. \nTherefore, one criteria I am using now in the triaging process is whether the feature request would make sense as a separate extension. This current feature request appears to be so.\n. There is a command called Go: Test Previous that runs the previously run test.\nYou can assign your own keybinding to this command. Please see https://code.visualstudio.com/docs/getstarted/keybindings\n. @jhendrixMSFT FYI, I am changing the default value for showGlobalVariables to false as it is still causing perf issues for some users and the benefits of having it enabled doesnt outweigh the issues.. @aschade92 Looks like this is your first PR contribution to this project, Thanks & Welcome!\nI have pushed 2 more commits. 1 to update the description and default value for the dlvLoadConfig setting, the other is explained at https://github.com/Microsoft/vscode-go/pull/2351#issuecomment-468959010. > I download require package in github,like gocode and gopkg,and put them to the right place in GOPATH\nDo you mean that you cloned the github repositories for gocode and gopkg?\nCan you share the links that you used?\n. This issue has been closed because it needs more information and has not had recent activity.. - Can you share a small sample code where you see this issue with gogetdoc?\n- Are you using Go modules?. @leakyshoe As you have already observed, the problem seems to be with gogetdoc. Please log this issue at https://github.com/zmb3/gogetdoc with all the details that you have shared here.. These flags are meant to be passed on each request to gocode in \"client\" mode. What you see in ps aux is gocode in server mode.\ncc @stamblerre to confirm. Thanks @stamblerre . We do add an entry to the logs (View -> Output -> Log (Extension Host))\nCan you reset the timeout to 750 and see if you get a warning in the logs?\n. Updated the FAQ with a note on the logs. Regarding debugging, please enable logs for debugging that might shed some more light on what is happening.\nRegarding linting, does running the command Go: Lint current package give expected results?\n. - Are you using Go modules?\n- Can you try the navigation in the editor and then compare that with running godef on the terminal? This way we can see if godef -t -f your-file-path -o offset itself is taking the time or if the extension is doing something wrong.\nThe godef tool will need offset which you can get by using the show-offset extension. Do you get the result after updating godef as per the prompt?\nAfter updating is there any difference in the speed in VS Code as well as when you try godef directly?. @ahmetb That looks suspicious. Please log an issue in the repo for godef and loop in rogpeppe and ianthehat in the issue. - Are you using Go modules? If yes, then try using goimports instead of goreturns\n- Is the problem only for formatting on save or even formatting manually (Right-click on the editor area -> Format Document)\n. If there are errors during formatting, then they will be logged as well. \nFrom the View menu, select Output. Select Log (Extension Host) from the drop down on the top right corner of the panel. This will have logs from the extension host and errors from extensions.\nClear it (there should be a button on the top right corner), try formatting again and see if anything is printed to the logs. It works as expected for me. Can you try with the below code sample?\n```\npackage main\nimport (\n    \"fmt\"\n\"rsc.io/quote\"\n\n)\nfunc main() {\n    fmt.Prinln(quote.Hello())\n    /\n        hello\n        this works\n    /\n}\n````. @TLKG You code sample seems to be for javascript and not Go. This repository is for the extension that supports the Go language in VS Code.\nPlease log your issue in the main VS Code repo. @jamesgeorge007 Did you test it?. Yes, but when reviewing a PR, I also expect that the author has tested the changes to ensure that the fix actually fixes the problem as well :). > It doesn't seem to recognise vscode package despite running npm install \nDo you see a vscode folder in your node_modules folder?\nDoes this have a vscode.d.ts file?\n\nAlso, why is the build failing?\n\nThe build is passing now, it was a flaky test that was failing for just 1 version.\n. > It doesn't seem to exist in my case\nWhat is \"it\" referring to here? The vscode folder under the node_modules folder or the vscode.d.ts file?. Can you share a screenshot of what does exist inside the vscode directory? In VS Code, expand the node_modules folder, then expand vscode and share a screenshot of the contents\nAlso try running npm run postinstall. @ahmetb \n\nAnyway you can check what arguments are those go process are running with?\nCan you share all your Go related settings that you have edited?\n\n. @ahmetb \nThe reason I asked about the settings was to figure out if you are using the language server as well as  which of godef/gogetdoc tools are being used for code navigation.\nThe on save things you are seeing are build and vet being triggered. Try playing with go.buildOnSave, go.vetOnSave and go.lintOnSave settings to see if either of those are the reason for slowness\nFor intellisense/code-completion, we use gocode in general. For modules we use a fork of gocode and this is named gocode-gomod to ensure we have both the original and the fork, just in case you switch back and forth between modules and non-modules project. \nWhat you are seeing is one instance running in server mode (-s -sock) and the other in client mode for every completion request fired by VS Code.\n\nRun gocode-gomod exit to close the current server instance just in case it is trying to hold on to stale cache. \nTry disabling the docs feature in completion by adding the below setting \n\"go.gocodeFlags\": [\n    \"-builtin\",\n    \"-ignore-case\",\n    \"-unimported-packages\",\n    \"-exclude-docs\"\n]\n\nIf you still see completions being slow, then please log an issue at https://github.com/stamblerre/gocode. @ahmetb My suggestion to disable certain settings was not made as a solution to the problem, but only as a way to investigate and troubleshoot which feature is the root cause of the perf problems. \nOf course, I don't expect users to be aware of the inner workings of the extension and all its settings. On the other hand, I do hope that users who take the time to report an issue in an open source project are also kind enough to work with me in troubleshooting the problem.\nI am concerned about the fact that the on save operations are very slow for you. Playing with the buildOnSave, lintOnSave and vetOnSave settings can give us an idea on which features are causing the perf issues. \nRegarding both code navigation and code completion, we are completely reliant on the tools that power these features. So unfortunately, there isn't much we can fix from the extension's side other than switching to use the language server\nI have updated our wiki regarding slowness with auto completion and code navigation when using modules. It has pointers on how to use the language server from Google. We will be updating our extension to use this language server by default in a few weeks. Please give it a read.\n. @silentred Check if https://github.com/Microsoft/vscode-go/issues/1754 helps. If https://github.com/Microsoft/vscode-go/issues/1754, doesnt help, then feel free to re-open this issue. @silentred As far as I know, this extension doesnt create these files. It must be go itself that is doing this either as part of go build or go test\nI dont see how we can provide a fix for this in the extension. I suggest that you log this issue for the Go language itself. this error is thrown when the value in program attribute points to file or directory that doesn't exist.\n${workspaceRoot} points to the root folder you have opened in VS Code.\nPlease check if there is a \"src\" folder inside it.\n . The problem with runtimeDefault and runtimeLong is that now user's will have to know which features are driven by which of these.\nHow about having just the below options?\n\nonSave (build, lint, vet, test, cover on save)\nonType (completion, live errors)\nonHover  (the hover text that is shown)\nonCommand  (All the commands explicitly registered by the extension like Go: Add Import as well as the standard commands like Go to definition, Find all references etc.)\n\nThis is much easier for users to wrap their head around. Thanks for reporting @xcaptain \nIs # a well known way to have comments in env files? If so, can you point us to some documentation on this?\nIf it is indeed a well known way to have comments, then PRs are most welcome to support such comments.\nCode Pointers:\n- See Build and Debug Extension to set up local dev environment\n- The parseEnvFile function is the one that parses the envFile\n. @firelizzard18 Does ${workspaceFolder}/cmd/bake point to a folder or a binary file?\n. - Is ~/path/to/other/project related to ${workspaceFolder} in any way or its a completely different folder?\n- In ~/path/to/other/project, are you able to run dlv debug ${workspaceFolder}/cmd/bake and debug your code? Replace ${workspaceFolder} with the actual path. The cwd that you pass in the launch.json gets passed to delve in the --wd flag.\nSet \"trace\": \"log\" in your debug configuration.\nThis will print some logs in the Debug Console and you will be able to see the exact arguments that are being passed to delve. What are the arguments passed to dlv debug as per the logs?\nDoes that match with what you are expecting?\nAre you using symlinks anywhere?. We usually do 3 versions. > Kind of like the project for vscode-cpptools has done.\nI am not aware of what vscode-cpptools has done in this matter. Can you provide more information on what you are looking for?. Thanks @stamblerre. Disabled vet on save for gopls as well\n@stamblerre, @ianthehat,  I pushed a commit for prompting users to use the language server when using modules, as completion is much better there compared to gocode like @stamblerre mentioned before.\nMy one concern here is the go to definition feature.\nWhen using godef, we realized that the folder from where godef was being run was important to get the right context. How does the language server resolve the context issue?\n. @Tyriar Extracted methods get added at the end of the document. If \\n gets added to the input, then the resulting diffs/patches will assume this \\n exists and not output one. This will result in the extracted method getting appended to the last line instead of starting from a new line after the last line.\n. @Tyriar Yes, just tested the feature with the document in LF and CRLF modes. The editor does take care to add \\r\\n in case of CRLF mode even if my code just says \\n. So that's good\n. Done\n. Agreed. Ideally \n- buildFlags should be used for build only, \n- testFlags should be used for test only.\n- testTimeout should not be a separate setting and should be included in the testFlags setting\nIf we do this, we won't be backward compatible and everyone who had configured buildFlags and/or testTimeout will have to update their settings to add the new testFlags \n@lukehoban Thoughts?\n. I needed a place to suggest that choosing this completion item would add an import and so added the item.detail. But I guess we don't really need it\n. This will also fail in case of dot imports and named imports. Example:\nimport . \"fmt\"\nimport m \"math\"\n. Like @lukehoban  says, this would result in comments that were previously between packages and imports to appear after the new import block.\nAlso, comments in between single import statements are lost too. Example:\nimport \"math\"  //Helps me in math\n// This is my custom package\nimport \"mycustom\"\nHow about doing this instead?\n1. Insert (\\n\\t after the word \"import\" in the first import\n2. Replace the word \"import\" with \\t for rest of the imports\n3. Insert ) in the line after the last import\n. you shouldn't be needing goConfig here anymore\n. Starting from 0 will cause issues when there are spaces/tabs before the word \"import\".\nThis shouldn't happen if formatting has been run on the file, but there might be cases where user has not yet saved the file or has turned formatOnSave off or has not formatted the doc at all\nCurrently parseFilePrelude returns start and end lines. You can update that to return startCharacter as well and use that\n. Can you add a unit test for this?\n. When no active editor is found, then return. Don't call generateTests(). Else you will end up with 1 info box for \"no editor\" and 1 error box for \"running the command ... failed\". Same applies to the other 2 generate.. methods as well\n. Name this file \"goGenerateTests\" maybe? Because we already have a file goTest.ts and another go.test.ts. We can it keep the intent of the file clear this way\n. Show this message only after the promise returned from generateTests() is completed\n. This didn't work for me. The source code gets downloaded but the tool doesn't get dropped in the $GOPATH/bin. After looking at the source code structure, looks like there is another \"gotests\" folder.\nThis needs to be updated to 'github.com/cweill/gotests/gotests' \nMake the change in the README as well\n. This error doesn't bubble up to the user\n. Having parenthesis/brackets breaks autocomplete while typing commands in the command pallete. \n495 fixed this for the test commands\nCan you update the title for your commands as well?\nexample: Go: Generate unit tests for package/file/function\n. you don't need to add this to travis unless you have some unit tests. Could you add some unit tests?\n. Why return WorkspaceEdits? \n. Same applies to the other 2 methods as well\n. Put the console.error(err) to back where it was and returned promise from there\n. None at all. Made the update to pass goConfig from goMain.ts\n. True, nice catch. Corrected\n. I didnt want to run listPackages for every autocomplete operation and so added this basic placeholder for an actual caching mechanism. Plan was to see if users notice the missing packages and if they do, if a reload window is not too much of a hassle\n. Updated to use /(\\w+)\\.$/g and removed the while loop\n. You already have a message being shown in line 116. You don't need this message again. I'd actually suggest to remove the function testEditor altogether and replace\nlet editor = testEditor()\nwith\nlet editor = vscode.window.activeTextEditor\n. Turns out, this was failing for me in Windows because I had Go 1.5 on my Windows machine. The error message in such cases is not helpful. We should probably check for the Go version first and not run gotests at all if it is not supported and show a meaningful message like Generating tests using gotests is not supported in Go 1.5. \n509 adds a function for checking the Go version. You can either wait for that PR to get merged or copy over the getGoVersion function from there\n. Yes\n. Its not the tests that fail, its the install step where we install golint.\ngo get -u -v github.com/golang/lint/golint\nI could write a custom install script that looks at the go version and then takes the decision whether or not to install golint\nBut, thats for another day.\nI am hoping that golint creates a tag/branch that works for Go 1.5, then I can put 1.5 back here in travis, add a custom install script to target that tag/branch\n. The version is used internally by getTools() and not installTools directly.\nRefactored installedTools to not repeatedly call getTools() for each missing tool\n. am trying this\nbash\nif [[ \"$(go version)\" =~ \"go version go1.5\" ]]; then echo cannot get golint; else go get -u -v github.com/golang/lint/golint; fi\n. @cedriclam my PR has been merged. Get latest from master, and you should have my changes\n. the stdout from gopkgs is a \\n separated pkg paths. So when you do a split, you end up with a trailing empty string. That's what this originally was, and I just moved the code around while refactoring. Will fix it nevertheless.\n. yup, will pull out '/vendor/' into a var, so use .length so that 8 is not mysterious \n. set is good idea, though in the end I'll have to convert it to array to have sorting\n. Below is from Understanding and using the vendor folder\n\nHowever, if a package or a parent folder of a package contains folder named vendor it will be searched for dependencies using the vendor folder as an import path root. \n\nAnd while trying different combinations, I could confirm that by \"parent\", they mean \"ancestor\"\nSince that is the exact check I make which is making sure that the \"vendor\" folder's ancestors are current package's ancestors too, we should be good.\nGo doesn't stop you from creating a package by the name \"vendor\", so you could totally do a \"go get github.com/foo/vendor\". Any packages under this folder will be available for use to any Go projects under \"github.com/foo/*\"\n. @aeschli I get that we are deleting comments, brackets, __electricCharachterSupport and __characterPairSupport because we have the language_configuration.json in the built-in extension \"vscode.go\" \nBut why are we deleting the wordPattern here?\n. @roblourens Not that I know of\n. will do\n. @roblourens The completion items are sorted first by the sortText and then by Label. So we are good.\n. wouldn't init and main be better prefixes?\n. The issue with main and #225 is valid. But does that apply to init as well?\nMy only concern was discoverability of these snippets.\n(Randomly picking Go extension users who have recently logged issues :) + people from the #225 thread )\n@zmb3 , @atombender, @bennyscetbun, @kulshekhar, @freeformz, @patbaker82, @lukehoban \nThoughts?\n. Consistency does make sense and drive usability as well. Lets see if there is any other feedback over the weekend. I'll merge the PR (fmain and finit) on Monday if we don't hear anything more.\n. sigh.. This takes me back to a programmer's hardest task. http://imgur.com/y3dhJFQ : Naming things.\nGoing with fmain and finit\n. what exactly are we trying to achieve here : line.startsWith('\\t//') ?\n. In such case it thinks the receiver is the first param, thats a bug.\n. Fixed it, Took your code and tested. Will push the changes soon.\n. @abarisain The changes are in\n. @abarisain Done!\n. Good catch, I should really stop copy pasting things...\n. Allow to change the variable n in the for loop here just like the for loop snippet. And name it i or index to begin with?. agreed.. You don't need a new promise at line 92. The below will do\n``\nreturn getFunctions(editor.document).then(functions => {\n...\n...\n      return generateTests({dir: file, fun: funcName});\n}. why not just re-usefixturePath? . Ideally, I'd like to check whether the test file was created with the test function. You don't have do it now, but if you have some time, I'd appreciate it.. Removal of this line at the end is breaking one of the tests which tries to add some text there. Can you add a comment here about the logic being used, so that the next person knows whats going on?\nThe unit tests are failing in travis due to linting issues. Runnpm run lint` locally and fix the reported errors.. Got it, thanks!. Can you undo the changes to this file?. The travis tests for linux are failing to find types/lodash. Am not sure why, but for now you can remove lodash from your refactoring. @ibigbug  Sorry for the very late review.\nHave you tested the case where http_proxy is not set in settings , but is set in the environment variable?\nIn that case will the value set in the environment variable make its way to the child process running the go get command?. Yes, sure. http://austinpray.com/ops/2015/09/20/change-travis-node-version.html talks about how we can do that. And here is an example that does the same https://github.com/nodejs/nan/blob/master/.travis.yml. @ibigbug I understand the use case you are trying to solve. My question was for the use case where a user might have set the env var for http_proxy, but not in settings. What happens then, with your code changes?\nI tested your code in 2 scenarios in Windows, this is what I see for the env that gets passed to the child process running the go get\n\n\nWhen http_proxy is set in env var but not in VS Code settings\n\n\n\nWhen different values are set for http_proxy in env var and VS Code settings\n\n\n\nYou will have to do 2 changes I believe\n1. Use upper case while setting the http_proxy variable\n2. If there is no VS Code setting for http_proxy, then do not change the process.env\n. any benefits of setting both upper and lower case?\nSetting just the upper case should do so that if any that was set outside vs code get overridden.. Sounds good. Only thing pending is the failing tests in travis. Can you debug and see if it fails in your local set up as well?\n. I have fixed the tests in master. Re-running the travis tests for this PR keeps using the version of master before my fix.\nSo will go ahead and merge this without waiting for tests to turn green for this PR.\nI was out on winter holidays, so couldn't help wrap this up sooner. \nThanks for your PR and I look forward to more in the future. good point, I like it :)\n. I feel different everytime I think about it :(. Good point. Done.. Done. Because ~ being the home dir is a POSIX thing. Doesn't apply to Windows.\nBut I see your point, if there was a workspace setting for go path using ~ checked in to source control, then the same workspace should work on Windows machine.\nThoughts?\n. Done. I am not sure why, but \"this\" in line 275 does not point to Delve object, it points to the ChildProcess which is why I had to resort to that = this. Oh ya! doh! I thought I was doing just that... need to get coffee. Cos it matches with the other message for when the delve.connection fails? . good idea, this was a remnant of when I had combined debugggin package and file in which case one might want to remove the / as well. you don't need the [] around goConfig['buildFlags'] I believe. Good catch, done. Good tip, done. vet is not working regardless of the value of go.multipackage\ngo tool vet needs either filepath, package name/path or directory path\n. Currently, this flag affects build, lint, vet and test. There might be cases when users might want just a few of these to run on whole workspace. Example: There might be a lot of tests in the workspace and they might take time, so user might not want test to run on whole workspace but only build.\nSo instead of just having this setting as a simple boolean, we can have it as an object\n\"go.multiPackage\": {\n          \"type\": \"object\",\n          \"default\": {\n            \"build\": false,\n            \"test\": false,\n            \"lint\": false,\n            \"vet\": false\n          },\n          \"description\": \"Invoke build/lint/test commands recursively from the workspace root.\"\n        }\nThoughts?\n. vet is missing in the description. coverOnSave is broken when multiPackage is set to true\nTo begin with, we can skip test from the multiPackage feature, and continue working on it in a separate PR\nhttps://github.com/Microsoft/vscode-go/issues/816 talks about using test results from multiple packages for getting code coverage. We can use that to track multiPackage feature for test and code coverage. This should go inside the if block if (goConfig['docsTool'] === 'godoc'), because when user choose gogetdoc, they need not install godoc. Missing -u -v. We could, but this is the model we follow for all other tools, so will not be changing this unless we change the rest of the places. Not that I know of.\n@rakyll @campoy Do you know if go test -v can print out absolute path of the test file with failing tests?. updated to use \\S. Thanks @rakyll and @campoy \nThe current needs isn't worth the trouble of changing the current behavior.\nWe will go with expanding the file name from the extensions's side. have you tried config.env['GOPATH'] = process.env['GOPATH'] ?. The \"enabled\" and \"delay\" objects here should be inside \"properties\":{}. Only then will the validation work i.e green squiggly appears when user types anything other than a boolean for \"enabled\". This should be inside an if block so that only people who have opted-in to use the live error feature get the tool installed when Go: Install Tools is run. The problem with clearing the diagnosticCollection is that any diagnostics prior to running the processFile will disappear. For example: all linting and vetting warnings will be removed.\nYou could create a new collection and all the errors from gotype there, but on save you will end up with multiple errors (1 from gotype the other from go build) showing up in the Problems pane.\nWhat you could then do is check the current collection if it has any errors/warnings for the same line that gotype is returning an error. If yes, then let the current collection win, if not then go ahead and add the error to the new collection.. copy paste error ? :). why not re-use goLiveErrorsEnabled() ?. add a null/undefined check for vscode.workspace.getConfiguration('go')['liveErrors'] before accessing the enabled property. > gotype-live should be reporting any error-level diagnostics that we'd see during a build\nIf the above assumption is indeed true, I'd still suggest having 2 separate diagnostic collections.\nOne for warnings (this will be fed by the linting and vetting), the other for errors (this will be fed by build and live errors). \nThis way you don't have to copy the warnings from currentDiagnostics. \nThe rest of your code here (delete diagnostics for uri etc.) can remain. Also, I think that when auto save is enabled, we shouldn't be enabling live errors. That would just be redundant work being done by build and gotype.\nCan you add that check here?. I am not too picky about this one though. Perf wise, it shouldn't be a problem because you are only touching diagnostics for a single file. But it just feels wrong (gut wise) to be copying array items everytime liveError is run. Oh I meant that the description needs an update :). I was erring on the side of caution.\nGood point on the fact that auto save onFocusChange and onWindowChange has no affect whatsoever.\nI was concerned with the autosave on delay. Then you have build and gotype both running and giving essentially similar results and overriding each other.\nOn second thoughts, it is definitely being over cautious. We can remove the check in the next update. And leave it up to the user to choose between the 2 features if the experience is not pleasant. just curious... why add the prefix file:// before parsing the file to get the uri? vscode.Uri.parse should work with just the file path as well . Actually, just changing the env in this line to finalEnv should also do the trick. Can you try that?. Or we can get rid of finalEnv altogether and instead just replace that with \nenv = Object.assign({}, process.env, env). Can you add a comment here as to why 5 is being added? Helps the next person reading this code :). I am guessing the reason you are using doFindReferences instead of provideReferences is because the latter does a saveAll before finding the references.\nMy another guess for why saveAll was put in place was because guru was made to run on saved files.\nNow that we have guru working on unsaved files as well (with the -modified flag), lets remove the saveAll that happens in provideReferences and you can use it here.. this way the process.env overrides launchArgs.env \nIt should be the other way around. agreed on the order.. Instead of creating a new command, I'd prefer re-using the existing go.test.cursor. \nYou can pass the arguments as { functionName: func.name}.\nAnd updatetestAtCursorto look forargs.functionName. If it exists use it, else use the existing logic to find the test function under the cursor. How about adding a codelens at the package level as well? Every go file has apackagestatement up top. So we can add a code lens there and map it to thego.test.packagecommand. How aboutRun tests in package,Run tests in fileandRun test` ?. > as unobtrusive as possible\nwell, when you put it that way it makes sense. \n\nNext enhancement could be debug test\n\nThere is already an ask for it https://github.com/Microsoft/vscode-go/issues/879 :). Am a little hesitant to add new settings. The list of settings we have is really blowing up.\nHow about re-using the existing setting for coverage.\n\"go.coverOnSave\": {\n   \"type\": [\"boolean\", \"string\"],\n   \"enum\": [true, \"showCoveredOnly\", \"showUncoveredOnly\"],\n   \"default\": true,\n   \"description\": \"...\"\n}. no problem, I am planning to release an update early next week. So Friday sounds good.. you can use getFileArchive() from util.ts to do this. There are linting errors that is breaking the build. \n- == should be === in line 42\n- There is a trailing space in line 45. Both Signature Help and Hover Info features are currently broken.\nUntil guru has the feature to provide docs, you can call godoc to provide the docs.\nPull https://github.com/Microsoft/vscode-go/blob/1302fcf0f704f66c974e043258b7ed9783ba104b/src/goDeclaration.ts#L85-L105 out into a function and use it in both definitionLocation_godef and definitionLocation_guru. In this case, if you use the cursor to determine the type, then where would you propose to place the stub. End of the file? . You need to add this command in package.json as well, so that the command shows up in the command pallet.\nAm curious, how did you test this without the command showing up in the command pallet?. Ah! thought so. @fatih Where does vim-go paste the stub while taking the identifier under the cursor as receiver? Am referring to https://github.com/fatih/vim-go/blob/master/doc/vim-go.txt#L665. Why not use the getTestEnvVars() function from util.ts here as well?. am guessing you are removing this because you expect this to be passed in the testEnvFile?\nFor someone who has set the GOPATH in the settings, but doesn't use the testEnvVars or the new testEnvFile setting, the debug test codelens will not work if this is removed.\n. you can use the resolvePath method here.. goTest.ts would be a better place for this function as that file has all things test related.. stripBOM not needed here. Thanks @fatih\n. Good point. When the current file that is open is a test file, this will end up running go test -i ./... which will run the tests in the workspace instead of trying to compile them\nFor compiling test files, we need to use go test -c and -c cannot be used on multi-package.\n@rakyll @campoy @mattetti Do you know of a way to compile test files under a directory?. I appreciate the work here. Consider this\n- User with a very large workspace with deeply nested directories\n- User with auto-save on\nThe directories check here is synchronous.\nWe later wait for all promises (build, lint, vet) to finish before showing diagnostics to the user. \nSo you can imagine for each save, this might delay results more than needed.\nNote: We have #1015 tracking to find a way to optimize this.\nAlso, I'd much rather prefer a better way to compile test files from Go itself.\nUntil then, we can skip trying to compile the test files in the whole workspace.\n``\nif (buildOnSave is not 'off') {\n    if (buildWorkspace)go build -i -o ./...`\nif (current file is test file)\n       go test -i -c -o <import path>\n   else if (!buildWorkspace)\n      go build -i -o <import-path>\n}\n```\n. > go test -run ! ./...\nLets give this a try. I was initially not in favor of this as the output is different (lots of \"no test files\" followed by a \"build failed\" on the pkg which has error) and we will have to write a different regex to do the problem matching. \nBut taking a closer look, there is also a line in there which matches our expectation and our current regex should work.\n\n. missing t?. any reason to have this in a separate function and call from goMain.ts instead of doing the same as covered/uncovered Highlight?. I don't have this problem in my Mac.\nI did see _ in test output once long ago when I had opened the GOPATH in VS Code instead of just my Go project. Is that the same case with you?\n. You might not have GOPATH set. Can you run the command Go: Current GOPATH and see what is the result?\nSee https://stackoverflow.com/questions/31664129/executing-go-tests-underscore-in-place-of-correct-path . what go-tools are you referring to here?. I tried testing this by declaring but not using a variable, expecting the linting error \"declared but not used\".\ngolint and gometalinter send such warnings via stdout which is what the extension uses.\nbut megacheck seems to be sending the warnings via stderr. which is why they don't show up in the Problems view.\nCan you confirm?. I still don't see it...\n\n. Ah! I was looking for a linting warning that staticcheck, gosimple and unused do not give.\nThe below works\n\n. yes definitely, I'll sneak that in the next time I touch this file. This assumes that vscode.workspace.rootPath contains a package. i.e. The folder opened in VS Code corresponding to a package. But many a times, it can also be a parent folder housing multiple packages. \nFor eg: If you open https://github.com/golang/example then the above will give you github.com/golang/example as ImportPath. But there is no package directly under github.com/golang/example. Will that work for -scope or does -scope expect ImportPaths to actual packages?. There are a few cases where this will give a false positive\nOne example is\n```\n    hi := \"/*\"\nbye := \"*/\"\n\n```\nYou won't get completions between the above 2 lines\nOR in between the below 2 lines\n```\nhi := \"/*\" \n// This is a comment */\n\n```. Another thing to think about is that we don't want completions inside multi line strings as well. Whatever approach we end up using for multi line comments can be used in multi line strings as well. It would definitely be nice to have the AST in hand during completions\nApart from stopping  completions inside multi line comments and multi line strings, it would also help in #168 \n\nBut I don't know how well the parser can deal with incomplete source code...\n\nI dont know much here either. \nWe currently use https://github.com/ramya-rao-a/go-outline to get the file outline which uses the go parser. You can try and see if we can re-use that here\n. I need some time to digest this. Give me a few days?. Thanks for clarifying. I missed the ./... you add later on to the listOutput.ImportPath and so the question. if pkg is empty string which can happen when the command is run without any editor open, then we will be needlessly creating a process to run go list. if at the end of this second, go list completes, we won't be showing anything. Was that intended?. @thomasdarimont So I finally had time to look at your changes to go-outline.\nAm not very comfortable changing the structure of the output, we will have to maintain 2 different ways of consuming the output, one for people still on the old version of go-outline, the other for the new.\nWhy not re-use the Declaration struct for comments. You can have type as comments, label as the comment text, Children would be empty array.\nThis way the final output structure would be the same as before.\nAn outer declaration for package whose children would declarations who in turn can be functions, types, variables, constants and comments\nWe can have a flag -include-comments. So that existing users of this tool will see no change in the usage even if they got the latest. We would return the comments, if this flag has been provided.\n. There can be duplicates here, so we should check for that instead of just concat. On second thoughts, I want getTestFlags to not use build/test flags settings when args are present.\nThe initial idea was that you can have keybindings to the test commands and can pass the flags you need via args.\nIf the args get combined with the test/build flags, then there would be no way to override them\nI fixed #1155 with this instead https://github.com/Microsoft/vscode-go/commit/aca9f3105b1ae0a654041bbee758330498d88fc8\nGive it a try and let me know if the tests and coverage run using the build/test flags as expected now. path.join uses the path separator for the local machine so it would be the same localPathSeparator\nadditionally it also takes care of trailing / at the end of goroot if there is any.\nSo if I do a split on the goroot, remove trailing / if it exists, then I can use .join(this.localPathSeparator). Updated to match /src/\n. - this might not work in case of multiple GOPATHs, because then process.env['GOPATH'] can have : or ; separated paths. Follow https://github.com/Microsoft/vscode-go/blob/0.6.63/src/goCheck.ts#L180-L181 instead\n- we are moving away from using GOPATH from process.env. Instead use getCurrentGoPath()\n- When the command Go: Test All Packages In Workspace is run, this go test command will fail with \"can't load package.. no buildable Go source files in ...\" if the workspace itself is just a folder containing packages and not a package itself. So one way is to have the package import path as part of the TestConfig object. The main reason I used go list all instead of gopkgs initially was to get the package name and not rely on the import path of the package to determine the package name like you are doing here.\nBecause package names need not necessarily be the last part of the package path. See https://github.com/Microsoft/vscode-go/issues/647\nAnd we use the package names to provide completion for unimported packages.. Yes, and later on I added the Go: Browse Packages feature because then I had all the packages in hand, so it seemed like a good feature to add. That's exactly what I did in https://github.com/Microsoft/vscode-go/commit/cb0d2bc29a0c9ee1929c1a89781ef8c740447d92 :). Yes, I replaced https://github.com/Microsoft/vscode-go/commit/cb0d2bc29a0c9ee1929c1a89781ef8c740447d92 with using go list -f '{{.Name}};{{.ImportPath}}' all\nI am fine with auto complete using cache as it does today. \nI didnt use https://github.com/tpng/gopkgs for the Browse Packages feature as it will not have the \"main\" packages as in the ones that are executable\nI am fine with using https://github.com/haya14busa/gopkgs for just the Browse Packages feature as well as long as it lists the \"main\" packages as well. why not re-use getImportablePackages() here?\nThen we can remove the vendorSupportPromise\n. Let's keep the name getNonVendorPackages. Then you won't have to hover over it to see the function comments to know that the vendor packages are excluded. Now that we are not using go list all, update this comment as well as the function name.\nFunction name can be getAllPackages. you will need the cmd.on('error') here to catch the case of missing tool or the case of old gopkgs being used\nThe err is more likely to be flag provided but not defined: -format because users would still be on the old gopkgs\nI had once added a new flag to go-outline and had to get users to update the tool. I followed this method:\nhttps://github.com/Microsoft/vscode-go/blob/0.6.65/src/goOutline.ts#L65\nYou can try the same instead of the gopkgsMissing() implemented in goInstallTools.ts. With the -format option I am guessing that gopkgs is a bit slower than when you made the comparison between go list all and gopkgs in the description of this PR.\nWhat are your current numbers?\nEvery new word typed triggers completion. So you can imagine that gopkgs will be run for every word typed. \nSome users have a whole lot of packages that go list all took over 10 seconds to finish. How does gopkgs -format fare?\nI still believe we should use cache and have the cache updated at a regular interval instead of running gopkgs for every word.\nWhat do you think?. That's unfortunate. > Not every word typed, it only invoked on only when completion triggered.\nCompletion is triggered for every word typed. I think you misunderstood my statement as every \"letter\" typed. This line will be reached only when there is no gopkgs tool in the user's machine.\nWhereas you are expecting to reach here to make a decision on whether the gopkgs present in the user machine is the old one or the new one\nWhat do you think of this instead?\nhttps://github.com/ramya-rao-a/vscode-go/commit/2119ec1849f18a0e2f9d5eae348a0d7c1e9cdd3f. Ok, I have pushed my change to your branch. How about this?\n```\nlet importablePkgsPromise = getImportablePackages(vscode.window.activeTextEditor.document.fileName).then(pkgMap => this.pkgList = pkgMap);\nlet setpkgslist = Promise.race([timeout(1000).then(() => this.pkgsList), importablePkgsPromise]);\n```\nCase when gopkgs runs under a second: \nCompletion will always use the latest result\nCase when gopkgs runs over a second: \nCompletion will use cache. If its the first completion call, then no pkgs will be available which is fine, we can attribute this to cold start\nWhen gopkgs eventually finishes, it will update the result, so that the next completion gets to use a more recent cache. The reason I am suggesting the above is that with your current design \n- a user can still get stuck waiting for the very first call to completion\n- a user can get stale data if gopkgs always takes over 1 second, and the next call from completion happens after 5 sec (the cache expiry time). How about Go: Import Package?  Go: Install Package ? Go: Get Package ? Go: Install Imported Package\n(naming is seriously the hardest thing to do)\nAnd the command  would be more intuitive if it had the word \"package\" like go.get.package or go.import.package\nAlso update the description. It should be clear that we run a go get -u on the package. we can skip this check and run go get -u regardless\nIf the package already exists then it will be updated.\nThoughts?. What do you think of showing the progress/success/failure messages in the output pane just like the current command Go: Install/Update Tools. If user runs this command on a line thats not an import statement, shouldnt we exit earlier? We know go get would fail then.\n. Can you point me to any docs that talk about this as a standard?. Merge from master, there are a lot of changes there. Yes please, let's just do that. There is too much noise this PR.. go test can only work on files on disk. Therefore, it is reasonable to say that the current file needs to be saved for any test in the current file to be run.\nI don't see any reason why one would want to disable this setting.\nUnless we have a scenario for it, I would say we don't need this setting.\n. I believe, editor.document.save() returns a promise. We should wait for the promise to complete before trying to run the tests.. A little history...\nThe run/debug test codelens and the Go: Test function at cursor command required us to parse the file, find the name of the test method to pass the same to go test. This is why I had added the check on whether the file is dirty or not in the first place\nTesting the package/workspace doesn't need us to do this\nOn the other hand testing current file also required us to parse the file and find the test methods.\nSo we should add the same \"save\" operation in the testCurrentFile method in this file. Which 4 methods? Cursor, File, Package and Workspace?\nCursor and File should force the file save as we need to parse it to get the test methods. Package and Workspace dont need the file save.\nYes, you can skip the check on dirty file and perform the save directly for cursor and file.. @chaseadamsio  The tests are failing due to the missing return here.\nThe testCurrentFile method should return a promise. may I just say that I absolutely love it that you have added tests \ud83e\udd47 \n. Agreed. getCurrentGoPath() can return : or ; separated paths as well. This would fail then. Agreed. Instead you can run go list and pass the importpath to see if the package exists.\nOr skip this check altogether.\nI really feel that if a user has explicitly run this Go: Get Package command then they would know that this would get the package using go get. Since this is related to buildtags specifically and not buildflags in general, shouldnt we do the join that you did on line 85 instead?. instead of getting all files under the path and then checking for main.go, isn't it simpler to directly check for path + 'main.go' using fs.statSync(filePath).isFile() ?. testconfig.includeSubDirectories is true only for the \"test all pks in workspace\" scenario.\nSo you can add a check to ensure testconfig.includeSubDirectories is false before adding the importPath. Shouldn't this logic be inside getImportablePackages() method?. We can skip the version check. We officially support Go 1.5 onwards. Let's keep it simple. > Import internal package behavior works differently to each file (resident in a package) that try to import.\nIts different for each package, but not for files in the same package correct?\nThe logic we have in place in getImportablePackages to return the relative paths for vendor pkgs also works differently to each package. Which is why it takes the filePath as a parameter.\nIf filtering for internals is inside the GoCompletionProvider, then the filtering for vendors should also be inside GoCompletionProvider\nBut I intentionally chose not to do so for vendors to keep things simple.\nThe cost of keeping the filtering out of GoCompletionProvider for users would be that the first time they edit a file inside a package, they might get suggestions from vendor or internal folders that they shouldn't get.\nBut the cache will catch up, and any further edits in the package will get self corrected.\n. am here am here... \nAm prepping for an update at the moment, will get right back to this PR later this evening.\nThanks for your patience and sorry for the wait :(. When allPkgsCache is not set yet, then the Promise here waits for getAllPackages() to finish?. why tie the preload to the initial running of builds? We can run the getAllPackages() independent of this correct?. So this would mean if there is any delay to due to gopkgs it will only affect the first auto-completion result. Right?. The tests running only shows up if go.testOnSave is set to true\nFor now, I dont think we need this messaging at all.\nLets wait for some user feedback.\nI also have added the telemetry to get the time taken for the gopkgs\nWe can re-visit this next month by which time I will have the data.\n. > Perhaps keeping a list of all processes in flight and then iterating to cancel all of them?\nThis won't help in the \"save all\" scenario if you intend to cancel running tests before running a new test. Even though to the user, save all seems like a single event, the extension gets notified once for each document being saved which then triggers the test on the corresponding package.\nHow about having the cancel test as a command (just like you have now), but have it triggered only by the user and not before running a new test?\nYou will still have to keep track of all running tests and cancel each of them\n. For now, lets stick to the solution of the user cancelling the tests.\nSave All triggering multiple processes also affects build/lint/vet. Let's tackle that in a separate PR. I am guessing this was picked up from goDeclaration.ts file.\nWhen a tool is missing, we usually call the promptForMissingTool method that will convey the message and prompt the user to install the tool. \nWe will need to do the same here instead of just showing the error message\n. you can have imprt as an optional parameter. That way you call _getDocumentationForImport() instead of _getDocumentationForImport('') and later replace the check imprt === '' ? 'no package detected' : '' with imprt ? 'no package detected' : ''. why show the inputbox at all if an import path was provided?. you can replace this with a single check if (!pkgInput). you can directly call showTextDocument here\nvscode.window.showTextDocument(uri, { viewColumn: vscode.window.activeTextEditor.viewColumn + 1, preserveFocus: true });. if we didnt strip out \"vendor\" from the gogetdoc output, then we can skip this part, correct?. why not look for \"cannot find package\" only in stderr?. How about go.get.doc , Go: Get Documentation and Get documentation using godoc for package  instead?. why not make the call to goplay directly from here instead of going through the GoplayUploader ?. Show an error message if there is no active editor. In the absence of the goplay tool, we end up in the else block here with the error message write EPIPE. This is because we are passing the code via stdin and the connection gets closed due to ENOENT error\nThere are 2 ways to fix this\n1. Check BINARY_LOCATION is a valid absolute path. If not then dont run goplay, exit early. OR\n2. Call goplay directly from the createCommandWith function. . Even after installing goplay, user will have to reload VSCode for the change to take affect because the location of the binary gets calculated once in the beginning and isnt updated.\nFeel free to use getBinPath for every call\n. Clear the output channel before sending any output. The callback for vscode.commands.registerCommand takes in an array of arguments.\nThis would be null/undefined when the command is run from the command pallet\nIf the command was run from context menu, then this would have the file details corresponding to the file in the editor of the context menu.\nYou can also use a quickPick control and pre-fill it with all valid packages when no valid pkg can be inferred from gogetdoc. See https://github.com/Microsoft/vscode-go/blob/0.6.66/src/goBrowsePackage.ts#L75\n. Weird.. I just tried the Go Doc command on a symbol from a vendored package.\nThe import path returned by gogetdoc did not have \"vendor\" in it.\nSo the attempt to strip out \"vendor\" became a moot point.\n. Instead of having a separate benchmarkTargetArgs, you can just use -bench here instead of -run if testconfig.isBenchmark is true. There was no real point of making this a separate function in the first place (my apologies).\nInstead of exporting this prefix function and adding another for benchmark, we can simplify things as below\n- remove hasTestFunctionPrefix and move the prefix check into getTestFunctions\n- create and export a new function getBenchmarkFunctions which will have the same code as getTestFunctions but with a different prefix check.\nIt will definitely get simpler when importing these functions in other files. let's move all this logic inside lintCurrentPackage function. This is to be consistent with all the other commands and to keep the goMain.ts file clear\nSame for lintWorkspace function. calling handleDiagnosticErrors clears any existing build and vet errors. It should only update the warnings.. This Promise should resolve only after both tests and benchmark functions are found. Done. @derekparker Is there any other recommended way for editors to figure out when to connect the client to dlv other than waiting for the message API server listening at: on the stdout?. Yes, that's possible and has come up as one of the solutions when I was discussing with @roblourens \nThanks @derekparker . The default value for the uri field in the SymbolInformation is the current document.\nAnd we are passing blank containerName\nBoth are optional parameters.\nWe are better off not passing either when creating the symbolInfo. I have refactored your code a little bit to make runExpanderr testable. Can you write a test or 2 for this? You can take the tests for goPlay as a reference. I've noticed that if there are any build errors, then expanderr fails. Previously you had the errors printing to the console, now I am printing it out in the error pop up, both of which are not ideal. \nHere are a few ideas:\n- run goBuild first. If there are any errors, show a generic message like Fix build errors before running expanderr. Then if expanderr itself returns an error, it can be shown in the pop up\n- Or show a generic message always like Error running expanderr. See the console for details and console.log the error\n- Or Display the output pane and send the error message to it . What do you think of 'func (*' + suggest.name + ') for label and Method snippet for detail?. Since params and retval can be empty, why not have them as simple tabstops instead of placeholders?\ni.e ${1:methodName}(${2}) ${3} instead of ${1:name}(${2:params}) ${3:retvall} . You can get around that by adding auxItem.filterText = suggest.name\nBy default the label is used for displaying the item as well as filtering the item based on what is typed. If filterText is set, then that will be used for filtering instead. For people who haven't updated their goreturns this would result in an error of the form flag provided but not defined: -srcdir\nIn that case, we need to prompt the user to update their goreturns tool. An example of how we do this is here:\nhttps://github.com/Microsoft/vscode-go/blob/0.6.70/src/goSymbol.ts#L89. you can also return if e.document.languageId !== 'go so that we can skip the first line check on non Go files. Are you saying that the prompt shows up for each save? If yes, then its fine. If the user presses the Close button or presses the Escape key, then the prompt will no longer show up in the current session of VS Code.. So the prompt appears and disappears even without you typing anything? If it happens only when you type, then do you have auto-save on?. If you click on the Close button or escape key, does it still keep appearing and disappearing on each file save?. I wonder if we should not show anything when the build/lint/vet process via commands is complete.\nWe might end up in a case where the status bar says \"complete\" but the on save build/lint/vet processes might be running.\nAnd let's remove the command bound to the statusbar item to show the output channel. The results of diagnostics will be shown in the Problems view and in the file itself. Lets shorten this to Building...\nSome users might have isntalled extensions that are already occupying some space in the status bar. Its best if we occupy as less space as possible. name this diagnosticsStatusBarItem so that its intutive. We don't need this anymore. Let's not maintain progress indicators in 2 places.\n. @cheesedosa One last thing...\nWhat we are trying to achieve here is\n- Use the statusbaritem to show progress/failure when build/lint/vet is run on demand.\n- Use the outputChannel to show progress/failure when build/lint/vet is run on save.\nWe should make sure that the statusbaritem is hidden when running build/lint/vet in save and that the outputChannel is cleared when running build/lint/vet on demand.\n. Actually I meant this: https://github.com/Microsoft/vscode-go/pull/1460/commits/5598cb70b662aa992b65c20085f22a2cd59b6b94. Any reason to export this function when we already have the runFillStruct?. When the command is run on a selection, fillstruct fails with invalid value \"...\" for flag -line: strconv.ParseInt: parsing \"...\": invalid syntax\nLooks like the -line flag takes a single number and we are passing 2 here.\nAlso, in what scenario do we expect the user select text and then run the command?\n. This is only for configuration. Since there is no config called fillStruct, this change is not needed. This should be lineText.match(/^\\/\\//) and regex test in the next line can be skipped\nOther wise in the below scenario where | denotes the cursor position, no completions will be returned\nfmt.Print(|)  // Some comment. This will fail to find method names with receivers. For example: func (s *Server) poll(). When there are extra spaces between func and the name of the function, this will result in empty text being suggested. I would suggest to use regular expressions\n/^\\s*type\\s+([A-Z]\\S*)/ for types\n/^\\s*func\\s+\\(\\s*\\w+\\s+\\*?\\w+\\s*\\)\\s+([A-Z]\\S*)\\(/ for methods with receivers\n/^\\s*func\\s+([A-Z]\\S*)\\(/ for functions\nWhen you use let matches = nextLineText.match() on the above, matches[1] should give you the symbol name. The same check exists after the for loop. You can just move that up instead. The same check exists after the for loop. You can just move that up instead. The fixtures from fixtureSourcePath get copied to fixturePath in lines https://github.com/Microsoft/vscode-go/blob/0.6.77/test/go.test.ts#L46-L71. So why this change?. fixtureSourcePath is still in use here and in line 856. Can you revert that back to fixturePath?. Any chance in Windows this would be \\ instead?. process.env.GOROOT will be undefined unless the user has set the env var or added the go.goroot setting.\nOn my Mac, its neither.\nWe need to run go env GOROOT to get the goroot.\nSee https://github.com/Microsoft/vscode-go/blob/0.6.78/src/goInstallTools.ts#L298 for reference. Can you update this test case and add 2 cases for with and without including goroot just like we do here for with and without ignoring folders?. do we have to loop through all lines? Can we exit when an empty line is found?. Tags like !darwin won't be caught with this regex\nAlso the line with build tags can have whitespace in the beginning of the line. This regex won't match such cases either.\nAllow multiple spaces between each word in the line. Any chance we can avoid this post filtering and instead capture the required groups from the regex match?\n. @FiloSottile Is this to cater to the case where you have different goroots as well as toolgopaths for different workspaces. Each of these toolGopaths have the Go tools compiled using the right version of go and so recompiling is not needed?. I meant something like this: https://github.com/Microsoft/vscode-go/pull/1604/commits/bbf329cc43c2dc43f9e9f1888022da902ebb65a9. The key used when getting the state is toolsGoInfo, but later when setting the state toolsGoroot is used.\n. Is this info message needed? This will show up everytime the extension activates which is for every new Go project opened.. The global state gets updated before waiting for this promise to be resolved, so the current version will never get updated in the global state. In Go versions less than 1.8, it is possible that gopath will not be set, so toolsGopath here would be null or undefined. One way around is to check for goroot as well as the version only after the promise returned by getGoVersion is resolved. That is fixed in master. This will fail for users who don't have the latest gopkgs i.e they have a version where workDir is not a supported.\nYou'll have to something similar to https://github.com/Microsoft/vscode-go/blob/0.6.79/src/goFormat.ts#L33 to prompt the user to update their tool, and fallback to not using the workDir. pass workDir here. pass workDir here. Using workspaceRoot doesn't work always here.\nFor example, assume I have opened the golang example repo in vscode and assume that a test in the stringutil package is failing\nworkspaceRoot will be /Users/myGopath/src/github.com/golang/example\npackageNameArr after the slice will be [golang, example, stringutil]\nbaseDir becomes /Users/myGopath/src/github.com/golang/example/golang/example/stringutil which is wrong\ncurrentGoWorkspace variable on the other hand has what you need. So use that instead\n`const baseDir = path.join(currentGoWorkspace, ...packageNameArr);\nNote that currentGoWorkspace can be undefined when we cannot determine the gopath or if current file doesn't not belong to current workspace. this is to reset the array?. For any which reason, in case go test changes the way it outputs result, then we will end up not showing anything in the output channel. I would prefer to pull the printing to the output channel out of the if block here. why is this change needed when getImportablePackages can calculate the workDir by using the given fileName?. Entries never get deleted from gopkgsRunning when gopkgs returns a rejected promise. fallback to not using workdir by return gopkgs().then(result => resolve(result)) instead.. @uudashr This can happen IRL too. A user might open and edit a Go file that is not under the current workspace.. @uudashr Say user edits 2 files in 2 different packages and for some reason gopkgs is slow. Then we will have 2 instances of the gopkgs running. Once the user is in the second file, is it really important to finish the gopkgs call for the first file?. @mbenkmann When I run go get github.com/mbenkmann/goformat/goformat, I get the error \"package github.com/mbenkmann/goformat/goformat: cannot find package \"github.com/mbenkmann/goformat/goformat\" in any of:...\"\nDoes it expect that the user has already cloned the repo?. why not just find the index directly using lineText.indexOf('//') ?. If cursor is in the last line of the file, this will result in error. I am guessing your assumption here is that the file is always formatted, which might not be the case. Instead look for func, var and type declarations in the nextLine. . Say we found an exported member. In that case we should return a single item (the member name) in the suggestion list. Currently gocode gets called and it can return multiple results.. commentIndex being 0 is valid. This check should be commentIndex > -1. Yes, we shouldn't invoke gocode. Instead we should return a single completion item with the member name right here. We need atleast one space between the keyword and member name, so \\s* here should be s+. Keep the cursor between the two / and manually trigger completions by pressing Ctrl+Space. We get the completion for SayHello, but we shouldn't. To avoid a lot of nesting, you can pull your code out and place it before line 55. You can start with\n// triggering completions in comments on exported members\nif (lineText.trim().startsWith('//') && (position.line + 1 < document.lineCount)) {\n   let nextLine = .....\n}\n. In the test file, at lines 11, 13, 18, 20 and 35 we get multiple completions from gocode and not from the code we specifically wrote for exported members.\nThis is because we don't exit with empty results when there is no match with the regex above.\n. @uudashr I was just thinking about the same thing over the weekend :) The fact that vendor packages under a higher ancestor is also available to the current file. Yes, unless you want to scan through the lines above and below the current line to look for the starting and ending of the block. Here, checkLanguageServer will return false for users with older version of the language server stopping them from using the language server altogether.\nInstead, create a new function getLanguageServerFlags that returns all supported flags. Then in goMain, you can use the result to pass the appropriate flags. This will help in the future when we have other flags.. Pass the func-snippet-enabled flag as per the setting go.useCodeSnippetsOnFunctionSuggest. Since its possible for users to run the older versions of the language server where completions are not supported, add the below to register the completion provider from the extension\nc.onReady().then(() => {\n                if (c.initializeResult && c.initializeResult.capabilities && !c.initializeResult.capabilities.completionProvider) {\n                    ctx.subscriptions.push(vscode.languages.registerCompletionItemProvider(GO_MODE, new GoCompletionItemProvider(), '.', '\\\"'));\n                }\n            });. When there is no match, the match function returns null. Accessing the array member on null will throw error. Take the example of // +build darwin freebsd netbsd openbsd\nThis code here will show the prompt if any of the above is not present in the settings.\nBut according to https://dave.cheney.net/2013/10/12/how-to-use-conditional-compilation-with-the-go-build-tool,  a build tag is evaluated as the OR of space-separated options\nSo having any one of the above in the build tags is a sufficient.\nAlso, reading on in the same article, we have , each option evaluates as the AND of its comma-separated terms and A file may have multiple build tags. The overall constraint is the logical AND of the individual constraints\nSo looks like a lot more logic needs to be invloved here. why startsWith and not === ?. @uudashr \nYou will have to find the pkgRootDir upfront and not after getting the results from gopkgs. To understand why, take the below case\n\nIf you dont have the godef code, then run go get github.com/rogpeppe/godef \nOpen the godef folder and then open the file ast.go in it\nRun the command Go: Add Import with the current Go extension and then with your changes and search for acme\nIn the current Go extension, you will get the result for \"9fans.net/go/acme\", but you wont get the same with your changes.\n\nThis is because, the acme package is in the vendor folder which is not a sibling of the directory to which the file ast.go file belongs.. Works in my Mac but not Windows\nI have the latest gopkgs in both\nThe \"Replace vendor packages with relative path\" test fails in Windows as well. Ah! Makes sense. correctBinName gets run twice resulting in strings like golint.exe.exe in Windows. This file is used by the debug adapter via the goDebug.ts file. The debug adapter runs in a different process than the extension host and so will not have access to vscode. @urohit011 The go.buildTags takes space separated words.\nSo in your example or the case of // +build linux,386  the setting should be \"go.buildTags\": \"linux 386\"\nIf the file has // +build abc def xyz, then the build tags setting should contain either abc, def or xyz. To keep things simple, lets go with the assumption that the auto-completion feature from language server is available only if the user has the latest language server i.e if the user's version of the language server respects the initalizationOptions sent.\nTowards that end, we can revert the changes made to checkLanguageServer here. I specifically check for true here as user can provide anything in the settings and that value will make it through.. There is already a c.onReady() below, can you combine this with that?. We would get inside this if block when the user had enabled the languageServerExperimentalFeatures['autoComplete'] setting, but the language server is old as well. In this case, we should notify the user that their version of the language server is old and does not support the auto-complete feature.\nSame for the format feature.. It should look like this: \"go.buildTags\": \"linux 386\". @m90 I'll look into the update option later. I've pushed a commit to use generic message. Good point, I've pushed a commit to fix it. Users might want to use the ${workspaceFolder} or ${workspaceRoot} variables for the config file. We support this for the config file used by gometalinter. You might want to do something similar for revive.\nSee https://github.com/Microsoft/vscode-go/blob/master/src/goLint.ts#L67. Why not check lineText.substr(position.character, 2) === '()' instead?. Why not skip setting the item.insertText altogether if the cursor is followed by (). @lggomez \nWe don't need to create a vscode.SnippetString in this case.\nWhen item.insertText is not set, then item.label is used by the auto-completion feature.\nSee https://github.com/Microsoft/vscode/blob/1.23.0/src/vs/vscode.d.ts#L3047-L3052. shouldnt this be if(!internalPkgFound)?\nYour case is that pkgPath has a value like internal/nettrace for which internalPkgFound would be null at this point.\nWhy not exit early with\nif (pkgPath.startsWith('internal/') {\n    return false;\n}\n ?\n. Wouldn't this return true for pkgPath which is say internal/something and user is working on a file directly under GOPATH/src?\nI would still say, exiting early with if (pkgPath.startsWith('internal/') return false; is cleaner. @tylerb The above 3 variables do not really get used later. buildTags and args get re-assigned after this if block. Was this intentional? \nThe net affect is that when benchmarks are run, \n- the -benchmem flag is not used and so the memory related stats wont be shown\n- the -run=^$ flag is not used which means all the tests will be run when the user just wants to run the single benchmark\n. This will apply the timeout when running benchmarks as well. I am guessing when benchmarks are run, they should be allowed to take as much time as they need and shouldnt be bound with the timeout.. I am not clear on why we need to run this in a detached mode.. Any reason for removing the use of the testType variable?. This variable is unused and need not be declared here.. We should expose this as a command as well. That would help users who are more inclined to use their keyboards and want to avoid the mouse. Killed test processes go through line 239 where they are removed from the testProcesses array. Do we need to empty the array again here?. I've pushed a commit to address this. I am not really sure..\nBut, there is no harm emptying the array at this point so we can keep it. How does ${x} relate the icon and how did you find it :) ?. Nice!. Why not re-use the testSuiteMethodRe regex here? We can do that if it is updated to /^\\([^)]+\\)\\.(Test.*)$/.. isInstanceTestMethod is an unused import here. Since this function isn't used anywhere, it need not be exported.. All uses of this function passes in a string. So we don't need to support both string and vscode.SymbolInformation. We have to pass -run ^$ even if test.Functions array is empty. Otherwise all tests will be run. This may give false positives if say there is a comment inside the function with another suite's name.\nIt can give false negatives if the suite was instantiated outside the function.\nWhy not return all the functions that have a suite.Run()?\nSince we also pass -testify.m, the other suites will be a no-op right?. Since this is a simple string check, wont text.includes('suite.Run(') be simpler?\nUnless we make this a useful regex like /suite\\.Run\\([^\\)]+\\)/. The same needs to be done in theresolveDebugConfiguration` method at https://github.com/Microsoft/vscode-go/blob/master/src/goDebugConfiguration.ts. So we should probably move this to the util.ts file\nThis is what is used when we debug \"main\" programs without any launch.json files. Can you provide an example for the case that you are attempting to cover here?. Take the case of multiple gopaths. Someone might have GOPATH set to /Users/folderA;/Users/folderB.\nThe current workspace is under /Users.folderA\nThe package in question could be under /Users/folderB\nIn this case, the current logic wont work.\nHow about passing the import path to go list -f {{.Dir}}? This would return the actual path for the package. You wouldnt need to to a fs.exists check either.\nSee showPackageFiles function in goBrowsePackage.ts for a reference on how to use go list.\n. What happens when we pass in a uri for an already existing folder to vscode.workspace.updateWorkspaceFolders? If updateWorkspaceFolders gracefully handles this case, then we dont need to do this check beforehand. What is the scenario where an arg would be passed via the command?. The name is not very self explanatory....\nHow about go.add.package.workspace and Go: Add Package to Workspace ?. This would return balance when height difference is more than 2 which wouldn't happen in our case as we re-balance after adding every node, but for correctness sake, unbalanced left/right should be returned. missing comment for closest. Update the overall comment as well as the one for @return to convey that the \"node\" is returned not the \"value of the node\".\nSame foes for the _get function . rename the parameter from offset to byteoffset here and every other place we are talking about converting byte offset to offset. unused variable. This will fail in a few cases\n- Multi-root mode. To fix this you can use vscode.workspace.getWorkspaceFolder(fileUri)\n- The file being edited is not part of the folder opened in VS Code or the file alone has been opened in VS Code. No folders. In this case vscode.workspace.getWorkspaceFolder(fileUri) would not return a workspace, so you can fall back to the parent folder of the file.\n- The file being edited is not part of the gopath\n- The getCurrentGopath returns multiple gopaths like projectA:projectB or projectA;projectB. To solve this you can use getCurrentGoWorkspaceFromGOPATH method from goPath.ts. If all the packages share the same sortText, I believe that the sort order then is the order that they appear in the completionItems array. Then why change the sortText here?. Good point. I would change the if (selection.isSingleLine) to if (!selection.isEmpty).\nThere could be a package with a very long import path or someone with a very zoomed in window.\nAlso trim the selected text before adding the \" in the beginning and end. Else the selected text could be \"github.com/golang/example\" and this code here will change it to \"        \"github.com/golang/example\". Use getToolsEnvVars(). Can you explain the scenario that would need this loop?\nTaking your example of aws, if github.com/aws/aws-sdk-go is already part of the workspace and we run the command for github.com/aws/aws-sdk-go/service/rds/rdsutils, wouldnt vscode.workspace.getWorkspaceFolder(forPathUri) give you the uri of the parent workspace folder? And isnt that enough?. I believe we dont need the m flag here. Any reason we should have it?. @UserRandom This was an intentional addition pointing to the pun of using the word  \"go\" in the context of the Go language itself. We would like to keep it. You are most welcome to contribute via bug fixes or other documentation updates.. Take a hypothetical case \n- lab, lag, large, lamb are standard pkgs\n- github.com/mine/log, github.com/you/log are custom packages\nThe user is currently working on the github.com/mine/myproject and types l\nThe suggestions would now appear as\n- log -> github.com/mine/log\n- lab\n- lag\n- large\n- lamb\n- log -> github.com/you/log\nThis would be counter intutive, as all the std pkgs would be expected to be sorted above alphabetically.\nThe solution to your problem should be such that your package is sorted to the top but only among other packages with the same name. So taking the same example as above, typing l should result in\n\nlab\nlag\nlarge\nlamb\nlog -> github.com/mine/log\nlog -> github.com/you/log\n. My previous comment assumed that the unimported package suggestions were sorted among themselves alphabetically. Which is not the case. My bad.\n\nHow about item.sortText = isStandardPackage ? 'za' : pkgPath.startsWith(rootPath) ? 'zb' : 'zc'?\nWe need the z as we dont want any of the unimported packages to appear before other normal symbol suggestions.\n. Thats true, but isnt the m flag make sense only if you are using either ^ or $ in the regular expression?. When there is a debug configuration in the launch.json file, this if block (starting at line 27) will not be entered. So this fix will only get applied to cases when there is no debug configuration in the launch.json file.\nI would suggest to update the mode after this if block. isnt it simpler with if (activeEditor.document.fileName.endsWith('_test.go')) ?. Can we hash that name? There are cases where when trying to investigate an issue I request users to paste a screenshot of the output channel. User name is clearly PII 100% of the time and I want to stay clear of it.\nAlso, if we hash lets hash it once and re-use it.\n. Isnt it simpler with if (activeEditor.document.fileName.endsWith('_test.go')) ?\nI have a tendency to avoid regex when possible.. The activeEditor can be null. Do we really need the else here?. Instead of using this function to pass the goConfig to each of the 3 types of generate functions, and then have them send the flags to the generateTests function, why not access the configuration from inside generateTests directly?\nThen, you wouldn't need to create the new GenerateTests function or the GenerationType enum, correct?. Have you found a scenario where this token was actually cancelled by vscode?. In that case what is the need to have our own token?. Apologies if I am missing something here..., I still dont see the need to have a common GenerateTests or the enum for that matter.\nAll we need is to access the configuration to get the flags and apply it to gotests. To get configuration we need a uri. So I suggest the below\n\nThe Config object that we create has a dir/file path. Instead lets pass its uri counterpart\ngenerateTests will now have the uri it can use to call vscode.workspace.getConfiguration to get the flags\n\n. > we need more than the configuration object to make the decisions\nI am assuming you are referring to the VS Code config and not the Config object being created in this file\n\nSo there are three seprate commands that do slightly different operations based on the command.\n\nYes. But this was already covered even before the changes in this PR. If you see https://github.com/Microsoft/vscode-go/blob/0.6.86/src/goGenerateTests.ts, you will see that there are 3 functions generateTestCurrentPackage, generateTestCurrentFile and generateTestCurrentFunction corresponding to the 3 commands. Each does a slightly different operation and passes the information to the common function generateTests\nThe need to fetch the flags from the vscode configuration is internal to generateTests. Since it needs a uri to fetch the configuration, the 3 functions generateTestCurrentPackage, generateTestCurrentFile and generateTestCurrentFunction can send the uri instead of the path.\n\nThe function for package can call generateTests({dir: vscode.Uri.file(dir)});\nThe function for function can call generateTests({dir: editor.document.uri});\nThe function for cursor can call  generateTests({dir: editor.document.uri, , func: funcName});\n\nThe generateTests method can then use the uri to fetch the configuration and uri.fsPath to get the path to pass to gotests. I believe we should fallback to using buildTags if no testTags are provided to ensure we are not breaking anybody else's use case.. buildtags will still be used for compiling the test files which will be using go test\nSo we should probably change this to excluding when tests are run or something to that effect. Runs all benchmarks? Otherwise, things look great!. We need to use single quotes, else the linter breaks the build.. The description now is a little confusing. Can we move the exclude statement to the end? How about the below?\nThe Go build tags to use for all commands that support a-tags '...'argument. When running tests,go.testTagswill be used instead if it was set.. We can skip the use of user name hash here which was introduced to fix #1829\nThe current solution of using fs.mkdtempSync should fix #1829 as well.\n. Use path.sep to create the path here instead of /\n. The debug adapter runs in a separate process and does not have access to anything from the vscode module. Therefore a dependency here on util will fail as util imports from vscode.\nThe tmp dir is used in the debug adapter to create the trace files. Since this is not done by default and the user sets explicitly to debug an issue with the debugger, I believe we are ok with creating a new file under os.tmpdir(). Why not make this a static class? Then, we can skip the instance() method here.. let's call this the globalState so that when code reading we know exactly where the data is stored. Since getFilePath is the only place this is used, can we merge this code into getFilePath?. Move this to the very top. Just to make sure that the globalState is available in the TempFileProvider right from the start. One corner case is that getFilePath gets called when the globalState is not yet set. This may not happen now, but when the code that registers the store gets moved around in the future, it can happen. . Since we always need 2 variables, one to hold the index, the other for the element shouldnt the comma be outside the placeholder?. Like {1:_},. Cool. Ah, good point. Why are we choosing to not install and instead run a go build later?. - This should be editor.action.goToDeclaration with title Go to Definition.\n- We can skip the description. It doesnt get used in the Show all commands feature\n- Let's not include the prefix Go: in the title. \nThe prefix is for commands explicitly registered and implemented by the Go extension.\nWhere as these 4 commands that we are adding is registered in core VS Code an is only implemented by the Go extension. Missing semicolon for each of the push is causing linting errors in the build. Yes, you can run npm run lint in the terminal. Using 2 separate variables to manage scope feels excessive. Why not use a single variable, say scope? This can have one of the 4 values file, package, workspace, off.. we should support both $workspaceRoot and $workspaceFolder here. Not everyone would have updated their settings.. The resolvePath function was already supporting both $workspaceRoot and $workspaceFolder. We want to retain that. So, please revert the changes done to resolvePath function. What about the case when the range spans multiple lines and only the first line was part of a comment? In that case, isPartOfComment would return true instead of false. What about a case like the below?\nvar a = 1 // this is a comment\nHere when the comment is edited, isPartOfComment returns false instead of true. We dont need to use the result variable here. Instead, we can do the below\nreturn e.contentChanges.every(change => {\n// Just return true or false based on your logic here\n}\nThe .every on an array stops looping over the array items the moment one of them returns false in the callback. The introduction of double quotes and the missing semicolon in this line is causing linting errors.. In goLint.ts the toolsGopath is accessed directly from the config, can you update that to use resolveToolsGopath instead?. Here I wasnt referring to block comments. Let's scope this PR to just line comments for now. Take the below case\n// I am a comment\nvar a = 1\nvar b = 2\nNow if I start selecting from the word comment and continue till the next line and delete the selected text, then the line variable in your code will have // I am a and isPartOfComment will return true even though some code was deleted.. return e.contentChanges.every(change => {\n// Just return true or false based on your logic here\n}\n\nI guess it would be a good idea not to return as soon as we find that the change is a part of a comment. If another change which is not a part of a comment is found in a later iteration, then we would have to anyway remove the highlighting right?\n\nA return statement in the callback passed to the .every doesnt cause a return from isPartOfComment. \nA return true statement in the callback passed to the .every cause the iteration to continue;\nA return false statement in the callback passed to the .every cause the iteration to stop;. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every. Can you add some tests to cover these cases?. Why 4712?. Any particular reason for this change?\nThis change will result in the next update to the Go extension not being available to anyone who is on versions of VS Code older than 1.26.0. I merged another PR that fixed the tests, can you revert your changes to this file?. 4711 is used in https://github.com/Microsoft/vscode-go/blob/dc7c4739b7923c206ac9cc8b5ef95fa874cb17bd/src/debugAdapter/.vscode/launch.json \nLet's use 4711 at https://github.com/Microsoft/vscode-go/blob/1cdd3667e957c1aa080f0b6f987771d436b9db6a/.vscode/launch.json#L21 as well\n. There was another PR that got merged to master which replaced all $workspaceRoot instances with $workspaceFolder. \nI believe the net change you want here is to change the version number. Can you undo the other changes in this file?\n. In that case, lets not update any of the vscode- dependencies just yet.\nI usually prefer to wait till we are atleast 3 versions away from the minimum specified in the engine property. Unless, of course there is a bug fix that we need to take in immediately.. Yes, there are no tests for code coverage right now :(\nFor this PR, testing just the isPartOfComment function would be enough. I would suggest to\n- Update the signature of isPartOfComment so that it takes 2 parameters document and ranges.\n- Create a go file in the fixtures folder with some comments to cover all scenarios\n- Use vscode.workspace.openTextDocument and vscode.window.showTextDocument just like the other tests to get the document object.\n- Then for each case, create the ranges and pass it to isPartOfComment. @Dexus Did you try the latest from master?\nYou need to update either of gocode-gomod or godef-gomod via the Go: Install/Update Tools command to hit this else block. Why do we want to capture the spaces here? Is this to cater to the case when the file name contains a space?. Add a compile error in your code and then run the test. The test output will now show the build error in the below format:\n.\\reverse_test.go:23:12: undefined: sring\nNow, with the current change, the above will not get expanded because \\w will not match .\\\n. Things inside the [] dont need the quantifiers like ?, + or *. [] defines the allowed characters not their quantity or order.\nAlso, this will not work for Windows.\nCan you make this an exported function and add some tests to cover the different scenarios?\nYou can add the tests in https://github.com/Microsoft/vscode-go/blob/master/test/unit/utils.test.ts\n. Because of which const? The one on args?\nThe const only means that you cannot re-assign the array object. But it doesnt stop you from iterating over the contents and changing them. . Cant we just use v.fqn here as it already has the right value?. What does fqn stand for?. Is passing the entire document necessary? Since this is only used for getting the filename, why not store the filename directly in the ExtendedCompletionItem. Does cwd matter to go doc?. env is created but not used. In what scenario do we expect package to be absent?. I would add the i < goDocLines.length check here as well.\n. In case of error, we do not want the completion feature to fail. So lets return resolve(item) here.. I am not sure if the completion feature fails in some way when we return this way. Can you test this scenario? One way to be sure is to always return the item as is when we are not able to get the docs.. Yes, lets just pass the minimum information.. Oops... I was testing the file path case internally, and checked it in.\nThe 1 !== 1 was meant to be path.isAbsolute(cwd)\nYes, and this was for the godef case which returns file path always. Done. Done. lastLine points to last non empty line not the first empty line. So we should be good.. unimported-packages only works for standard packages, correct?. When 2 packages have the same name (think of text/template, html/template), does template. give results from both packages?. Why do we need this setting? We should be able to determine the path just by using getBinPath like you have done in the goDebugConfiguration.ts file. Now that we use getBinPath to get the path, we dont have to use getBinPathWithPreferredGopath. Any reason to keep this optional?. According to https://golang.org/ref/spec#Identifiers, \u03b1\u03b2 is a valid identifier, but \\w wont capture it.\nHow about /^\\s*\\/\\/\\s+[\\S]*$/?. Why did let nextLine move up a line here?. Think of the case when the exported member name is myfunction. Then even if the user types mf, then the suggestion should show up due to fuzzy matching. This wont happen due to the check added here.\nThis change is not needed. VS Code will take care to match the string before the cursor and the label in the completion item and take the right decision.. > The code of the debug adapter seems, to me, to be designed to also run standalone from the extension, and as such, seems to implement defaults for many of its configuration properties, not relying on the extension always passing them in.\nThis is so because, historically there was no way for the extension to pass anything to the debug adapter. This has changed recently (as in last year) with the addition of vscode.DebugConfigurationProvider api using which we can now intercept the debug configuration, update it, before it gets passed on to the debug adapter. This code resides in the goDebugConfiguration.ts file.\nFrom this point on, the guidance I am using is\n- If a setting/configuration stays the same for all debugging scenarios, then they would be part of the common settings\n- If users might want a setting/configuration to be different for different debugging scenarios (like buildFlags, delve api version, trace, etc), then they live as part of the debug configuration in the launch.json file.\nComing to our current case of the path to delve, there isn't a need for the user to specify different paths for different debugging scenarios. Which is why it need not be part of the official debug configuration in the launch.json file.\n\nNote that we can also add a message informing the user that dlv is missing after the call to getBinPath, but I was not sure which code snippet to use for that.\n\nRejecting the promise just like in https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L276 with a message will show the message to the user.\n. Can you make this regex stricter? Something like RegExp('^\\s*type\\s+' + label + '\\s+struct\\s+ {') ?\nAlso, update the test for the outline feature.. Any reason to move this return statement? With this change, when typing any text in the comments, we would end up calling gocode instead of exiting early. Also can you update the existing test case to reflect the bug fix? See https://github.com/Microsoft/vscode-go/blob/0.7.0/test/go.test.ts#L1014. Check if the value returned by getBinPath is an absolute path or not. That is what we follow for all other tools in the extension.. You can work on this.gocodeFlags directly. No need to create a new array. Yes, its ok. In this case, this is an internal implementation. Current file can always be determined by VS Code using the vscode.window.activeTextEditor. It need not be provided by the user. We need this feature even when the language server is enabled. So. move this line down near line 182. find \"type definitions\". To keep guru implements fast, we restrict the scope to current workspace in https://github.com/Microsoft/vscode-go/blob/0.7.0/src/goImplementations.ts#L32 which implements the Go to Implementation feature.\nWould the same apply here as well?. @hummerd Yes please :) If you can try on some big projects with and without the scope and then share the results, that would be great.\nI'll merge this PR for now. If you find any difference, then we can cover the scope in a separate PR. Thanks @hummerd!. @stamblerre Would this be the right import path to use in go get for the language server from your team?. To help users differentiate lets add some suffixes here like\n\nLanguage Server by Sourcegraph\nLanguage Server by Google\nLanguage Server by saibing. Thanks for that info @anjmao!\n@saibing Can you confirm that non-go module support is ready for use?. bingo is only supported from Go 1.11 onwards, so we should include that check here. @tohjustin Yes, I just tested it out with GOPATH, and it works. So we can remove the isModSupported checks.. Why fallback? I would have guessed VS Code would have shown something like \"No type definition found\".. > It's also quite possible that there are other default values strawn around that aren't constant, \n\nYes, right around this line of code we have set defaults for other properties of the launchArgs variable.\nThis looks good to me for now. I'll pick up the const issue in some later refactoring. The verbose call for logging should move as well. This assumes that i will be < 256 isn't it?. Delve doesnt have any such limitations AFAIK, therefore it wouldnt be safe for us to make this assumption.. Let's not change this in this PR. I have a separate issue tracking the need to use godef instead of godef-mod, now that the changes from the latter have been merged to the former. What's the reason for removing the -i flag?\nWe had that in place to support the Go to definition feature on unsaved changes in the file. This return applies just to the callback passed to the forEach call. If you want to exit the getModPath function when you folderPath.startsWith(k) is true, then you need to use a simple for loop. If I understand this correctly, what we are doing here is ensuring this.threads only has entries corresponding to existing goroutines. \nWe should either rename this to something that communicates the above or add a comment above the function for the same\n. Can you give us some insight on why we have to create a dummy thread here?. Failed to halt delve before attempting to set breakpoint would be more informative. I believe this will get called even when the Halt request fails.\nIs that what we want?\nI assumed that we want to continue only if halting was successful. Its not clear to me as to why we need to do this.... If it just has to be a unique number across threads, then why not just generate a random number and then use that random number + i here?\nWe can store that random number against the thread (we can change this.threads from Set to a Map` for this purpose). In that case, we generate a random number once. Then for every new thread, \ntheRandomNumber += 10000\nthis.threads.set(threadId, theRandomNumber )\n?. If the random number is 100,\nFirst thread -> 10100\nSecond thread -> 20100\nThird thread -> 30100\nThis would work assuming we dont have stack traces with depth > 10000\n. Makes sense, lets do the increased shift count. Any reason for the return here and in line 748?\nBoth sendResponse and sendErrorResponse return void.\nAlso, whats the reason for the swapping of lines?. Since this error handler is for the continue operation, I would move it up like so:\nthis.delve.callPromise('Command', [{ name: 'halt' }]).then(() => {\n   return this.setBreakPoints(response, args).then(() => {\n     return this.continue().then(null, err => {\n          logError(err);\n          this.sendErrorResponse(response, 2009, 'Failed to continue delve after setting the breakpoint: \"{e}\"', { e: err.toString() });\n        })\n    }, null);\n}, err => {\n     logError(err)\n     this.sendErrorResponse(response, 2008, 'Failed to halt delve before attempting to set breakpoint: \"{e}\"', { e: err.toString() });\n  });\n. Actually, on second thought, this.continue() doesnt return a promise.\nAlso, inside this.continue(), if the call to delve failed, it is logged and the error doesnt bubble up here.. The comment below about https://github.com/derekparker/delve/blob/master/service/api/types.go applies to the above as well. Also, since this is related to variables, can we move the above enum to appear either just before or right after the interface DebugVariable?. Also, am just curious...  from where are we getting these values of 1,2,4,8? I understand these refer to the the bits at different positions being 1. But where or how does delve define these?\nI see https://github.com/go-delve/delve/blob/4c9a72e486f1f0d0c90ecede8415a871dced8117/service/api/types.go#L194\nBut I dont see how each of them got the value of 1,2,4 etc.. Its weird that this doesnt have struct tag at https://github.com/go-delve/delve/blame/4c9a72e486f1f0d0c90ecede8415a871dced8117/service/api/types.go#L264 to change it to camelcasing.\nShould we log a bug for delve?. So the operation iota = 1 << iota gets repeated for each line?. thats so cool. We can skip this line altogether as we are returning the same outside this if block.. Would there ever be a case where testFns would be an empty array? i.e we weren't able to find the function corresponding to the suite.run()?. > yes it can ( e.g. if there is no suite method. but that will work as expected ( i.e. the regex wont match any suite since there is none). and the output will be a warning that no tests to run.\nIn this case, we would be running go test -test.run -testify.m CurrentTestFunctionName\nWe know before hand this will not work. \nWhat would happen if we run go test -test.run CurrentTestFunctionName in such case?. >  On that either way we will need to decide if want the warning when creating the codelens or when someone actually clicks it.\nWarnings can be done either via a notification (prompts) or just printing it to the Dev Console.\nThe former is too intrusive for a task like creating codelens. Codelens are silent helpers and should not interfere with daily tasks of a user. \nThe latter (Dev Console) is not too useful for the current case. A user will not be driven to open that up and read through unless there they feel that something is wrong.  In our case, the debug console would have given necessary information after they click on the codelens.\nWe can keep this as is for now.\nJust one last piece of feedback.\nThe function debugTestAtCursor shares a lot of code with the function testAtCursor. Instead of having a new file for the former, let's move it to the same file as the latter. The common code between the 2 can be moved to testUtils.ts file. This variable is declared in line 23. Plese -> Please. Both runGoDoctorVar and runGoDoctorExtract are used only locally in this file. Therefore, we can skip the export on them. I would move this check up to extractFunction and extractVariable. Then, not call runGoDoctorVar and runGoDoctorExtract  if user didnt provide a string value. Since we are using the activeEditor to get the file name, we can pass the file name instead of activeEditor to extractFunction and extractVariable. Why not set the command property when declaring extractFunction and extractVar constants?. Also, shouldnt we set the kind property as well?\nSee https://code.visualstudio.com/docs/editor/refactoring and #1484 . We should use reject here instead of resolve to deal with errors. I see that this extract is the only argument that changes when calling godoctor for function vs variable.\nI would suggest to have a single runGoDoctor function instead of the two runGoDoctorExtract and runGoDoctorVar. Use an argument to differentiate between the 2 cases.\n. Is this for directly updating the file on the disk?\nIf yes, then we should look at working with diffs instead. Otherwise, Undo feature will not work in VS Code. We can go with -w as part of this PR and have another to use the diffs. Can you remind me why using go.alternateTools wont work here?\n\"go.alternateTools\": {\n   \"dlv\": \"your tool path to delve\"\n}\nBecause getBinPath internally does look at the alternateTools setting. > we don't call getBinPathWithPreferredGopath() when resolving the location for dlv.\nDo you mean we wont end up calling it if using alternateTools or that we shouldnt call it?\n getBinPath internally does call getBinPathWithPreferredGopath\n\nat any rate I don't think this is a great solution as it means that I have modify settings.json and launch.json,\n\nwe would be modifying just the settings, why launch.json\n\nI can't easily toggle among different configurations as I believe the options in settings.json apply to all configurations (correct me if I'm wrong)\n\nYou are right about that.\n. Few cases to take care of\n- what if user given path is not a valid absolute or relative path?\n- where are we expanding user given relative path (like ./) to absolute path\n- check for if resolved path actually exists\n. Has gotests really stopped supported versions below 1.9?. Why do we need this import?. If the chosen tool is either gofmt or goimports, then no change is needed.\nElse, you need to invoke isModSupported to figure out if modules are being used or not.\nSomething like the below\ntypescript\nprivate getFormatTool(goConfig: vscode.WorkspaceConfiguration, fileUri: vscode.Uri): Thenable<string> {\n    let formatTool = goConfig[\"formatTool\"] || \"goreturns\";\n    if (formatTool === \"gofmt\" || formatTool === \"goimports\") {\n        return Promise.resolve(formatTool);\n    }\n    return isModSupported(fileUri).then(isMod => {\n        return isMod ? \"goimports\": formatTool;\n    })\n}\nOn second thoughts, I wonder if we should choose to use gofmt instead. gofmt is installed by default for all, whereas one has to specifically install goimports. Also, older versions of goimports don't support modules, so goimports has to be installed, meaning we need to prompt the user to do so.\nRegardless, we are choosing to use a different tool than what the user meant to use. Therefore, we should notify the user of this change, and update workspace settings so that we don't have to make this check every time the file needs to be formatted.\nFor reference, this updating of workspace settings when using modules is already being done for the go.infergopath setting  at https://github.com/Microsoft/vscode-go/blob/0.9.2/src/goModules.ts#L55. We can update the same \n. Apologies for the late response.\nTo summarize, what we are trying to debate here is that when halt fails, if we should restart/detach only if the failure was due to target program exit or for all failures, correct?\nIf the target program is still running, and halt fails, there is actually no point in restart/detach as these requests would fail as well. If the target program is still running, delve needs to be halted in order to accept any further requests\nSee https://github.com/go-delve/delve/blob/master/Documentation/api/ClientHowto.md#gracefully-ending-the-debug-session. Yes, in case of remote debugging, we don't start the delve process. It was started by the user beforehand. Therefore, we shouldn't be killing the delve process.\nI wonder if instead of restart, we should just detach without the kill switch.\n@vladbarosan Can you give that a try?\n. Does this assume that the user has cloned the vscode-go repo under github.com/microsoft or that doesn't matter?\nSorry, my module knowledge is not up to date :(. Thanks @lggomez \n@jhendrixMSFT That is your understanding as well, right?. The above can be simplified to return func.range.contains(selection.start)\nActive editors will always have a selection. Why have we deleted the skipRanges option?. Is this the \"details\" that is shown next to the symbol in the outline feature?. Yes. we definitely need to detach. And since we can't detach without halting, we need to halt.\nAre you saying that we dont need to detach either?. I believe we need to pull showGlobalVariables one level up.\nThe properties in LoadConfig is a 1:1 to what is at https://github.com/go-delve/delve/blob/4c9a72e486f1f0d0c90ecede8415a871dced8117/service/api/conversions.go#L276. > I thought delve is started outside our responsability already with a target program\nYes, that's right. Delve is started by the user in the remote machine.\n\nthen do we really need to halt it from our side in that case\n\nI believe we need to detach, else the delve process will continue to think that there is a client attached to it.\n. > for remote, don't even halt, just detach\nThe problem is that we can't detach without halting a delve process (regardless of its remote or not). Currently that option is being used in only in the Go: Add Imports command which doesnt need the range.\nThe only benefit is we avoid the work involved in calculating the ranges.\n. We own the fork of it https://github.com/ramya-rao-a/go-outline\nFeel free to look into that for improvements. Pardon my Go ignorance here...\nWe are picking up on only the functions that are the first level children of the package as per the data returned from the go-outline tool.\nDoes Go have any concept where there could functions at a deeper level?. Nevermind, my mistake. The kind is getting passed in the constructor for the CodeAction. For the scope of this PR, lets keep this check as is. Its the same what we do today. @jhendrixMSFT is right. The timeout is cleared right after halt. We can remove this now that we are using the builtin fs. Shouldnt we do this in case of timeout as well?. Ah!, got it.. The timer should be cleared right after Halt, because it is to guard against the case where Halt request doesnt return in time.\nBut you bring up a good point. \nIn case for local debugging, if detach fails, we should run the killTree to kill the process before deleting the file\n. Instead of isRemoteDebugging being a function, we can have it as a const that is declared probably right before the new Promise is created here.. shouldDetach() and targetHasExited() are not being used anywhere else. Can we have them as const before this if instead of functions?. About step 2 & 3:\nHalt is known to not return immediately based on the program being debugged. That was the reason I added the timer. When halt succeeds (or target exited) and we run detach i.e happy case, I want to allow detach the time it needs to successfully detach. We dont want the timer to timeout and do forceful kill/remove when detach is running.\nIf halt fails (but not because target exited) or if detach fails, then we want the forceful kill/remove.\nIf detach succeeds but doesnt remove the debuggee file, I don't want us to forcefully remove the debuggee file. If we see this, we should log a bug in delve.\n. @jhendrixMSFT Because I'd much rather have delve to the clean up (in the detach request), than kill it when the detach request is running.\nIf for what ever reason, the detach request doesnt complete in a reasonable time, then that would be a bug with delve and we will have a chance to report it.\n. @vladbarosan For remote debugging, we don't seem to restart the remote delve process anymore. I dont' recall the discussion that lead to this decision.\nI remember saying that we can consider using detach without the kill option instead of restart, but the current code calls detach with the kill option.. Not all features of this extension need the active editor. For example, any of the build/lint/vet/test commands for workspace or installing the Go tools. So, instead of using the active editor here, I would suggest passing the goConfig as a parameter to this function. Almost all files access the configuration, so it wouldnt be too much of a problem to pass it along.\n. I prefer returning the timeout from this function instead of updating the options in place.\nThis would make the code more readable from the different files than first forming the options variable and then passing it to a function to be updated.\nAlso, we have a few places where we use spawn instead of execFile in which case the use of word execFile here can be misleading.. Also add a check to ensure that the value is of type number. @vladbarosan https://github.com/Microsoft/vscode-go/issues/1609#issuecomment-410111323 is another reference to the need for detach (without kill) instead of restart in case of remote debugging. timeout and cwd is to be set on options not env. This should be\nconst env = getToolsEnvVars();\nconst goConfig = ....\nconst options = {\n    env, \n    cwd: input.cwd,\n    timeout: getTimeoutConfiguration(goConfig, 'onSave')\n}\nAnd then pass the options to the cp.execFile call\n. Same for the other 2 places in this file. Instead of 0, I would return some default value say 1 min. ",
    "ae6rt": "Would adding \n* Show package variables\nqualify to be on this list?  If I set a watch on a package variable main.foo, I can see the value, but I cannot find a way to display a given package's variables without explicitly asking for each one.. Here is a screencapture showing the effect:\nhttps://www.evernote.com/shard/s57/sh/6a261126-3745-45b0-b028-a16201a38075/dae3994ff26fe222\n. I was able to solve the problem by removing $HOME/Library/Application\\ Support/Code, $HOME/.vscode, and restarting.  . ",
    "freeformz": "Here is the \"user manual\": https://docs.google.com/document/d/1SLk36YRjjMgKqe490mSRzOPYEDe0Y_WQNRv-EiFYUyw/view\nChannel peers would also be nice.\n. @nictuku FWIW: I copy-n-pasted that code, saved it as mytest.go, right clicked and chose \"Format Code\" and everything is fine.\nI tested this with \"goreturns\" / \"goimports\"  (when I specify gofmt I get a missing tool prompt for some reason).\n. I updated to the latest released version, restarted vscode and the same thing happens.\n. I find the existing auto-completion/snippet for package to be off. It suggests the name (seemingly anyway) based on the directory you are in. IMO it should look at other files in the same directory and default to the same package, unless it's a _test.go file where it could look at other test files in the same directory and default to the same package name. For what I do anyway, if there are no other go files it should default to package main. But maybe I'm off and my work flow isn't the same as other people's?\n. Is there any way to squash the auto-complete if the line starts with package? This way when I type package main I never get the main function auto-complete? \n. That is how goimports formats imports, which is the default formatting tool used by vscode-go.\n. I was wrong about the default. It's goreturns, but it operates similarly to goimports.\n. FWIW: The go tool supports $GOPATH/src/vendor/<package>. This surprised me as well when I was rewriting godep's resolver and while I don't know what the use case it, it's something that the tool supports and so should integrations.\n. @bpasero I spent a few minutes trying to find some issues to link against, but failed. :-( . ",
    "tecbot": "@newhook @lukehoban  did some hacking on the weekend to implement oracle support using codelens. It's really awesome! Currently, I implemented only the implements mode so needs further work to complete.\nI pushed my changes now and created a PR. any feedback is welcome!\n. We at lovoo have a really huge go codebase, and the implements call is fast enough for us. Like @lukehoban already said, it's asynchronously so it doesn't block.\nBut I agree that something like callers shouldn't be implemented with CodeLens because it's to expensive.\n. In the case of CodeLens you don't need to do anything. You will see inside your code that there are some placeholder lines above the type definition which are empty as long oracle is completed. But in my env, it took maximum one second to resolve the implements. Every time you change and save something the CodeLens stuff is triggered for the active text document.\n. Thanks for your feedback!\nRegarding to your feedback I changed the following things:\n- added the feature flag and disabled it by default\n- pushed some changes to ask oracle only on types not on methods anymore\n- implemented the check for interfaces itself. Now you can see which types implements the interface\nThe problem with stale information happens to me sometimes too but didn't figured out why. If you save it again it updates it correctly.\nFor me, I using oracle only to give me the information which types implements type X, anything else I can resolve with find references. So for me is currently enough, but I think for other users not ;).\n. What I forgot, currently there is a issues with builtin types because oracle don't give the position of the file back. Do you have any idea to resolve this?\n. The empty lines are really annoying but it's IMO a failure on vscode itself. Why is a empty line displayed before a CodeLens is resolved. My goal was to only show CodeLens if there is something. Why I should display that type X has 0 references, 0 implements and so one? That makes no sense to me.\nOne solution to fix this, is to call the logic inside the provideCodeLenses function, but the documentation says explicitly: \nThis call should return as fast as possible and if\n         * computing the commands is expensive implementors should only return code lens objects with the\n         * range set and implement\n. Open the command palette and install the plugin again\n. Did you try out https://github.com/joefitzgerald/go-plus for atom? I really like the integrated highlighting of code coverage inside the editor, so you don't need to switch to something else to check the code coverage :).\nBut don't now if it's possible to change the background color of some code positions in vscode.\n. Thanks for your hints! Really helpful :)\n. @tampajohn Awesome :+1: \nOne thing what I found: If the cursor is on a tested line and I want to add a new line with new code, then the next line and all new following lines will have the same background color as the tested line (green or red). Would be better to reset the background color for the new line/code if possible.\n. +1 remove the coverage if start editing the code\n. I had the same problem after upgrading to Sierra and go1.7. I reinstalled every tool (godef, goreturns etc) and the issue was gone. The old compiled binaries aren't 100% compatible with Sierra.\n. See #503\n. ",
    "typeless": "Just found this. Looks promising.\n. ",
    "lunemec": "Here is the documentation for the new \"guru\" tool:\nhttps://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ/edit#heading=h.ojv16z1d1gas\nAnd here is great talk on gophercon 2016:\nhttps://www.youtube.com/watch?v=ak97oH0D6fI. After update this morning the same issue happened to me as well. It says Cannot find \"go\" binary. Update PATH or GOROOT appropriately. I'm using mac, and Go is insalled with homebrew, so it has non-standart path. I'm setting this path in my .zshrc, and it works inside the integrated console, but I can't find a way to set PATH inside vscode. GOPATH is set correctly (as it worked yesterday before the update).\nGot any ideas how can I get it working?\nAlso, there seems to be a bug with tools, it says:\nThe \"gofmt\" command is not available. Use \"go get -v undefined\" to install.\nThe \"undefined\" seems strange for \"gofmt\" :)\nThank you!\nEDIT: reinstalling the Go extension worked. I hate auto-updates.. ",
    "yuzhichang": "Any update of this issue? Guru features are very very helpful to understand code.. ",
    "gertcuykens": "Would like to add when using the experimental https://github.com/sourcegraph/go-langserver Find All References right click is not implemented and code lens is all you have to find the references. When guru and go-langserver features are overlapping each other it's going to be a mess. Ok I will create a new issue about the breakpoint because it has no correlation with the error message. You are correct after testing some more it always prints the error.\n. Going to open a ticket at dlv, I get the same error just using dlv\nlog\ndlv --log debug -- -port=8080\n2016/01/27 20:51:59 debugger.go:56: launching process with args: [./debug -port=8080]\n2016/01/27 20:51:59 server.go:301: method Run has wrong number of ins: 1\n2016/01/27 20:51:59 server.go:301: method Stop has wrong number of ins: 2\nType 'help' for list of commands.\n(dlv) exit\n. \nrenamed to .html\n\nSo in short use the vscode html engine and just add parameters like, hey html engine all that non html stuff like {{...}} don't worry about that, here are the syntax and autocomplete rules for it. \nYou have to think the other way around. Extend your html api so the go plugin can just push in a chunk of html code and return the same output as shown in the screenshot + some extra syntax highlighting provided by the plugin as extra html parameter so the html engine can learn what all that non html stuff means. . Personnaly I would try upstream first and create a reference link to it here to avoid code fragmentation. I assume you build it trying minImal code change? That said if upstream fails I would maybe reinvent the wheel here. I dont really know how everthing is tied togther but it sounds that current design is a bit hacky? Maybe we need more core features first from the vscode api itself?. How do other languages do it? For example does vscode-php use https://github.com/atom/language-php? Is current vscode core template design consistent with other languages?  Or does each language plugin has there own way of template support? For me it makes sense to make sure a template system is done the way all other language plugins are doing it. If my go file contains html php or c code I can recycle other plugins work to highlight that part. Now we are fixing just go templates but then there is cgo where you have a mix of c code https://golang.org/cmd/cgo/ in the end if we don't look how other languages are doing it then vscode-go will be more lines of code then vscode itself :). @oneslash not sure if this can be done I am just trying to come up with ideas. What if you made 2 separate plugins also completely separate from vscode-go. One for *.html.go files and one for*.txt.go files? \nI make the assumption that multiple plugins can be activated for the same file. If not then we definitely need to create a ticket for vscode to just do that. Can you imagine where every plugin needs to reinvent let say a spell checker, that just unacceptable. Let me know if it makes sense. And can we make a distinction based on file extention that dictates what to expect inside `...` like if file extention is *.html.go use html mode + template mode ? If not step one open feature request in vscode :). Ok then I suggest to do each language template syntax in a separate plugin: .hml.go, .txt.go, \u2026 other people can then easily add more template plugins like c etc without submitting a vscode-go pull request. Now wat all does plugins do have in common is the go template autocomplete part {{ if else .something }} That going to be the hart part and needs to be in vscode-go. For example when I push . I would like to see a list of available variables in the template. The extension should be considered a temporary solution because it uses just custom syntax highlighting. For example the vscode html engine does allot more then just that.\nTo explain it more simply rename your .go file that contains your template with let say 90% html code to .html Notice the much more in depth syntax highlighting + snippets + js support and every other build in feature what should be made available for a permanent consistent solution. Meaning updates to the build in html engine only need to be done in one place for all template languages either go or any other language like php or what ever.\nSo conclusion find a common ground and make sure renaming a go or php or ruby or python file to .html is consistent regarding html inside all the template languages and not depending on plugins that do the same thing over and over again.\n. What about a \"Color All Interfaces\" menu entry and a hot key cmd + F12?\n\nSo only one pass will be done on demand.\nAlso I am not sure if you can piggy back ride when the compiler is checking for errors to also check for interfaces? Then you can maybe just add a flag to also color interfaces on error check and leave the menu as it currently is.\n. hmm could it be there are also issues with go get itself?\nOSX 10.12.1\ngit version 2.9.3 (Apple Git-75)\nbash\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"/Users/gert/go/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/gert/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.7.1/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.7.1/libexec/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/dv/8tlwvjr91zjdyq4rk14lkkfm0000gn/T/go-build584711619=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n```\nInstalling gocode SUCCEEDED\nInstalling gopkgs SUCCEEDED\nInstalling godef SUCCEEDED\nInstalling go-outline SUCCEEDED\nInstalling go-symbols FAILED\nInstalling guru FAILED\nInstalling gorename FAILED\nInstalling goreturns FAILED\nInstalling golint FAILED\nInstalling gotests FAILED\ngo-symbols:\nError: Command failed: go get -u -v github.com/newhook/go-symbols\ngithub.com/newhook/go-symbols (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/buildutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/buildutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/buildutil?go-get=1\nget \"golang.org/x/tools/go/buildutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nFrom https://go.googlesource.com/tools\n   46c63f3..09079c8  master     -> origin/master\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/go/buildutil: exit status 1\ngithub.com/newhook/go-symbols (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/buildutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/buildutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/buildutil?go-get=1\nget \"golang.org/x/tools/go/buildutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nFrom https://go.googlesource.com/tools\n   46c63f3..09079c8  master     -> origin/master\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/go/buildutil: exit status 1\nguru:\nError: Command failed: go get -u -v golang.org/x/tools/cmd/guru\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/guru?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/guru\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/guru?go-get=1\nget \"golang.org/x/tools/cmd/guru\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/cmd/guru: exit status 1\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/guru?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/guru\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/guru?go-get=1\nget \"golang.org/x/tools/cmd/guru\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/cmd/guru: exit status 1\ngorename:\nError: Command failed: go get -u -v golang.org/x/tools/cmd/gorename\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/gorename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/gorename?go-get=1\nget \"golang.org/x/tools/cmd/gorename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/cmd/gorename: exit status 1\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/gorename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/gorename?go-get=1\nget \"golang.org/x/tools/cmd/gorename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/cmd/gorename: exit status 1\ngoreturns:\nError: Command failed: go get -u -v sourcegraph.com/sqs/goreturns\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns?go-get=1\nsourcegraph.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/imports: exit status 1\nFetching https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns/returns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns/returns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nget \"sourcegraph.com/sqs/goreturns/returns\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns?go-get=1\nsourcegraph.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/imports: exit status 1\nFetching https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns/returns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns/returns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nget \"sourcegraph.com/sqs/goreturns/returns\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\ngolint:\nError: Command failed: go get -u -v github.com/golang/lint/golint\ngithub.com/golang/lint (download)\nFetching https://golang.org/x/tools/go/gcimporter15?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/gcimporter15?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/gcimporter15\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/gcimporter15?go-get=1\nget \"golang.org/x/tools/go/gcimporter15\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/go/gcimporter15: exit status 1\ngithub.com/golang/lint (download)\nFetching https://golang.org/x/tools/go/gcimporter15?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/gcimporter15?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/gcimporter15\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/gcimporter15?go-get=1\nget \"golang.org/x/tools/go/gcimporter15\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/go/gcimporter15: exit status 1\ngotests:\nError: Command failed: go get -u -v github.com/cweill/gotests/...\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/imports: exit status 1\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/gert/go/src/golang.org/x/tools; git pull --ff-only\nYou are not currently on a branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\ngit pull <remote> <branch>\n\npackage golang.org/x/tools/imports: exit status 1\n``\n. never mind removinggolang.org/x/tools/to fix the above\n. Hmm I personally would leave it as it is and just point it out in the docs. Also please create a new issue for it if you believe it needs to be a new feature.. removinggolang.org/x/tools/` fixed it for me too\n. A yes, thx! Much better :D Ps this feature should be off by default I think, this is more like a toggle feature you only use when you want to examine a other repo quickly.. Agree thats why maybe i think a toggle would be a good idea to turn it on or off in the view menu\n\n. Yes but you have to admit it's like doing heart surgery to be ably to accomplish what you just dit :P I think it should be in the right click menu. How do you get current selected file path in vscode?. just to be sure :P . yes it's still the same on 0.6.88 wait i give you a dockerfile to reproduce it\n```\nFROM golang:rc-alpine as root\nWORKDIR /go/src/yourapp\nRUN apk add --no-cache ca-certificates musl-dev gcc file git vim curl \\\n    && apk update \\\n    && apk upgrade \\\n    && rm -rf /var/cache/apk/*\nCMD [\"ash\"]\nFROM root as dev\nCOPY . .\nRUN go get -u github.com/golang/dep/cmd/dep\nRUN go get -u github.com/derekparker/delve/cmd/dlv\nRUN dep ensure\nRUN go build -a -tags 'netgo noplugin' -ldflags '-d -s -w -extldflags \"-static\"' -o /app/bin/main\nRUN go build -a -tags 'netgo noplugin' -ldflags '-d -extldflags \"-static\"' -gcflags \"all=-N -l\" -o /app/bin/debug\nRUN ldd /app/bin/main; exit 0\nRUN ldd /app/bin/debug; exit 0\nRUN file /app/bin/main\nRUN file /app/bin/debug\nCMD [\"/app/bin/main\"]\nCMD [\"dlv\", \"--listen=:2345\", \"--headless\", \"--api-version=2\", \"--accept-multiclient\", \"exec\", \"/app/bin/debug\"]\nEXPOSE 2345\n\ndocker build -t yourapp . --target dev\ndocker run -it --rm --privileged -p 2345:2345 yourapp\nNow before you start running vscode we need to test dlv cli first, don't skip this because the remote config shenanigans from vscode are confusing because dlv has no `remotePath` in the first place. It's only has 2 things a\n--wd string            Working directory for running the program. (default \".\") \nwhich in my opinion never has to be changed ever and doesn't concern vscode dlv client at all \njust the headless server\nand a `substitute-path` in the dlv client\n(dlv) config -list\naliases            map[]\nsubstitute-path    [{/go /Users/gert/go}]\nmax-string-len     \nmax-array-values   \nshow-location-expr false\n(dlv)\nalso note that headless has a complete new way to restart a headless session\n(dlv) r\nProcess restarted with PID 25\n(dlv) q\nWould you like to kill the headless instance? [Y/n]\n```\nNow how importent is this to make this work, lets say this is the only solution to debug a kubernetes pod :P And Microsoft loves kubernetes like the rest of the world\nMy suggestion is tackle the vscode config itself first and make it inline with dlv and less confusing  \n\"configurations\": [\n        {\n            \"name\": \"docker\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"backend\": \"native\",\n            \"substitute-path\": [{/go /Users/gert/go}] (do config thing in dlv before debug starts),\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"working-directorie\": \"${fileDirname}\", (wd dlv)\n            \"env\": {},\n            \"args\": [], make sure this do -- ... see dlv cli instructions\n            \"showLog\": true\n        }\nSo for me its important that your dlv connect localhost:2345 on your macbook is doing the same thing as on my macbook before we start figuring out the source code. I believe it needs a bigger refactor then anticipated.\n. Was thinking a bit more about this, what if we just remove \"remotePath\": \"/go/src/myapp\", and \"program\": \"${fileDirname}\" completly for mode remote and concentrate more on\n\"go.delveConfig\": {\n        \"useApiV1\": false,\n        \"dlvLoadConfig\": {\n            \"followPointers\": true,\n            \"maxVariableRecurse\": 1,\n            \"maxStringLen\": 64,\n            \"maxArrayValues\": 64,\n            \"maxStructFields\": -1\n        }\n    }\nSuggest to replace \"dlvLoadConfig\":{} to \"dlvLoadConfig\":\"~/.dlv/config.yml\" so we are using the exact same config file as the dlv cli client and not introduce another configuration space that does exactly the same thing and prevent confusion as dlv cli working and vscode not. Because each using separate config.\n. Was thinking a bit more about this, what if we just remove \"remotePath\": \"/go/src/myapp\", and \"program\": \"${fileDirname}\" completly for mode remote and concentrate more on\n\"go.delveConfig\": {\n        \"useApiV1\": false,\n        \"dlvLoadConfig\": {\n            \"followPointers\": true,\n            \"maxVariableRecurse\": 1,\n            \"maxStringLen\": 64,\n            \"maxArrayValues\": 64,\n            \"maxStructFields\": -1\n        }\n    }\nSuggest to replace \"dlvLoadConfig\":{} to \"dlvLoadConfig\":\"~/.dlv/config.yml\" so we are using the exact same config file as the dlv cli client and not introduce another configuration space that does exactly the same thing and prevent confusion as dlv cli working and vscode not. Because each using separate config.\n. First of thx for reporting back, if you don't use vendoring you can comment out the dep part, but you will need vendoring sooner or later anyway especially in docker world :P https://github.com/golang/dep and docs are at https://golang.github.io/dep/docs/introduction.html\nin short do this on your laptop first in you app dir before dockering\ngo get -u github.com/golang/dep/cmd/dep\ndep init\ndep ensure\nIt will create this vendoring map and the toml file so then go dep in the docker container can rebuild the exact same vendor map.\nAs soon as you can play with dlv cli and its substitute-path it will make more sence what i mean i think. \nPS This weekend I will try to do the instruction you posted\n. master version local path and remote path are equal when i debug vscode resulting in file not found\n```\nInitializeResponse\nmain.js:153\nUsing GOPATH: /Users/gert/go\nmain.js:153\nInitializeEvent\nmain.js:153\nSetBreakPointsRequest\nmain.js:153\n(node:87062) [DEP0016] DeprecationWarning: 'GLOBAL' is deprecated, use 'global'\nmain.js:153\n(node:87062) [DEP0016] DeprecationWarning: 'root' is deprecated, use 'global'\nmain.js:153\nAll cleared\nmain.js:153\nCreating on: /Users/gert/go/src/myapp/main.go (/Users/gert/go/src/myapp/main.go) :8\nmain.js:153\nError on CreateBreakpoint: could not find /Users/gert/go/src/myapp/main.go:8\nmain.js:153\nAll set:[null]\nmain.js:153\nSetBreakPointsResponse\nmain.js:153\nConfigurationDoneRequest\nmain.js:153\nContinueRequest\nmain.js:153\nContinueResponse\nmain.js:153\ncontinue state {\"Running\":false,\"Threads\":null,\"NextInProgress\":false,\"exited\":true,\"exitStatus\":0,\"When\":\"\"}\nmain.js:153\nTerminatedEvent\nmain.js:153\nDisconnectRequest\nmain.js:153\nHaltRequest\nmain.js:153\nDisconnectRequest to parent\nmain.js:153\nDisconnectResponse\nmain.js:153\n\n\nclient connection closed\n```\n\n\n```\n$ cat /Users/gert/go/src/myapp/main.go\npackage main\nimport (\n        \"fmt\"\n)\nfunc main() {\n        fmt.Println(\"Hello world\")\n}\n```\nNow dlv cli first set substitute-path\n(dlv) config -list\naliases            map[]\nsubstitute-path    [{/go /Users/gert/go}]\nmax-string-len     <not defined>\nmax-array-values   <not defined>\nshow-location-expr false\n(dlv)\nThen you see everything works \n```\n$ dlv connect localhost:2345\nType 'help' for list of commands.\n(dlv) b\nProcess 17 has exited with status 0\n(dlv) bp\nBreakpoint unrecovered-panic at 0x42b280 for runtime.fatalpanic() /usr/local/go/src/runtime/panic.go:681 (0)\n        print runtime.curg._panic.arg\n(dlv) b main:1\nProcess 17 has exited with status 0\n(dlv) b main.main:1\nProcess 17 has exited with status 0\n(dlv) r\nProcess restarted with PID 25\n(dlv) b main.main:1\nBreakpoint 1 set at 0x49c03d for main.main() /go/src/myapp/main.go:8\n(dlv) c\n\nmain.main() /go/src/myapp/main.go:8 (hits goroutine(1):1 total:1) (PC: 0x49c03d)\n     3: import (\n     4:         \"fmt\"\n     5: )\n     6:\n     7: func main() {\n=>   8:         fmt.Println(\"Hello world\")\n     9: }\n(dlv)\n```\n\nI think all the confusion is that somewhere on the roadmap dlv introduced substitute-path and vscode-go is trying to resolve the path without using dlv config substitute-path?\nAnyway it's important that your docker container is working because their are to many variables that can cause errors. But I am still convinced that the goal is to find out how to set the config substitute-path when initialising the dlv instance in vscode-go. A great now you can step into a GOROOT function to see if your changes fixed the GOROOT bug.\nSo to recap \n- Only dlv cli needs a substitute-path or it's not able to figure out the correct path\n- Like you noticed the headless server needs a complete new way to \n a) restart a process\n b) shutdown a process \n$ dlv connect localhost:2345\nType 'help' for list of commands.\n(dlv) q\nWould you like to kill the headless instance? [Y/n]\nBut lets do the restart part in a separate ticket and focus on remote path only, so if you are successful stepping into print.go and your code is located in your docker container on a different place example /Users/gert/go vs /go then you solved it. \nNote that for dlv cli the source code is moved from /Users/gert/go to /go in the docker container. As you will see the dlv cli will not work if you don't add a substitute-path.. Now you made me even more want to go to Gopercon... but I can't I am stuck in Belgium I need to develop some golang app and deploy it into a kubernetes cluster or I will disappoint my colleagues. Though I will be watching your talk if you are giving one :D . If that's the case then it also fine, less config is better :) +1 for default V2 and removing the useApiV1 flag completly. Not in the list but I think setting export GO111MODULE=on in your shell so that modules are always used has performance issues. Unfortunately I don't have more details and time to investigate, I can only mention that I think using modules has a more sophisticated inpact on vscode-go. ",
    "vimalk78": "any plans for implementing the 'guru peers' command? \nif no one is doing, i want to attempt it.. @ramya-rao-a is it possible to add this command(Go: Implements) to Go : Show All Commands... right-click sub menu?\ni was trying to look for the same, how does vscode invoke guru implements.  i could not find it in the list of go commands. I found it in extension source, but had to search in issues to lead to this issue to know how it is to be used.  \nif this is not a bad idea, i can try sending a PR\n. i tried the following\nfile : package.json\nadd a new command\n\"commands\": [\n      {\n        \"command\": \"go.go.toimpl\",\n        \"title\": \"Go: Test Go To Implementation\",\n        \"description\": \"Test Command for testing go.go.toimpl.\"\n      },\nfile : goMain.ts\ninvoke the 'vscode.executeImplementationProvider' command in this command handler\nctx.subscriptions.push(vscode.commands.registerCommand('go.go.toimpl', () => {\n        let textdoc = vscode.window.activeTextEditor.document;\n        let pos = vscode.window.activeTextEditor.selection.active;\n        vscode.commands.executeCommand('vscode.executeImplementationProvider',textdoc, pos);\n    }));\ni am getting the below error in the Debug Console :\nObject\ncommand:\"go.go.toimpl\"\ntitle:\"Go: Test Go To Implementation\"\ndescription:\"Test Command for testing go.go.toimpl.\"\nrejected promise not handled within 1 second\ninvoking with async/await also results in same error\ndebugging:\na breakpoint in goImplementations.ts:44 is not hit when invoked via the above command. but breakpoint is hit if invoked via Go -> Go to Implementation from the vscode menu.\nperhaps there is a better way. #needhelp\n. \n\nThe four commands are added to Go : Show all commands...\n. not sure why the CI is failing\n\n. @ramya-rao-a  , does this look OK?. @ramya-rao-a , please check.. thanks for your help !!\nhow do i claim the hactoberfest t-shirt :). 1. will change to editor.action.goToDeclaration . \n2. description i kept for sake of documentation. it was hard for me to see the connection between the various Providers in the vscode-go extension and their corresponding internal commands. thats why initially i started with creating a new command\n3. ok will remove the 'Go:' prefix, else it may be thought of a separate command.\nin fact i was looking for some api to get the complete command object for these four commands, so that title, description etc can be reused directly. i couldn't find so created the literals.\n. thanks. i am new to type script.\nis there a way to run such checks locally? before sending the PR. ",
    "zsxawerdu": "I am going to do my best to tackle this one, I have a branch I been experimenting on.\nhttps://github.com/zsxawerdu/vscode-go/tree/exp_gosignature   \nIt looks like using 'godef' and/or 'go doc -u' to get the relevant information out might be helpful.  I would like to find a way to reverse token from my current position, if I can get the right tokens, I may just be able to use 'go doc -u' to get the calling information.\nThoughts?\n. Tried on 4 projects, all work.  Good find luke.\n. Feel free to, I am out of town for a few days.\n. ",
    "aybabtme": "I'm trying out vscode today and stumbled on this (parameter hints & completeion-fills-out-parameters). It would be a very nice feature but I notice that development seems to have staled since Nov 25 2015. I don't know any TypeScript personally, so picking up the work would be hard for me. Is there another place where this feature is being worked on?\n. Wow awesome!!!!\nOn Fri, Jan 29, 2016 at 15:15 Luke Hoban notifications@github.com wrote:\n\nVersion 0.6.24 is now published with the Signature Help implementation.\nHere's what it currently looks like:\n[image: sighelp]\nhttps://cloud.githubusercontent.com/assets/223467/12686967/d8d1e6e4-c681-11e5-8ff4-bc96a2f22eba.gif\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/9#issuecomment-176950595.\n. Woups I totally opened this against the wrong repo!. \n",
    "zippoxer": "Any progress with this?\nWithout this, I find it hard to believe this extension would fill the void of Gophers migrating to VSCode from Sublime Text, Atom or even IntelliJ IDEA.\nSo, yeah, that's pretty crucial and I will dive in and help get this done if I choose to stick with VSCode.\n. @lukehoban Done.\n. @lukehoban \nYeah, my first try was fixing the Signature Help from issue #9. When I saw how Signature Help behaves like, I just preferred the snippets.\nI'll add the config toggle then ;)\nMight do some good by us ex-sublimers.\n. @lukehoban \nGreat job there ;-)\nI'm really excited to see vscode-go moving forward.\nI added the same opt-in as TypeScript's, for the sake of consistency.\n. ",
    "Hokutosei": "This is running me insane, I am sure i have all this tools, as I am using it in atom. but in VS, it keeps getting me this same error. how do i fix? \nfollowed instructions from here https://marketplace.visualstudio.com/items/lukehoban.Go\n. from settings.json \n\"go.gopath\": {\n        \"type\": \"string\",\n        \"default\": null,\n        \"description\": \"Specifies the GOPATH to use when no environment variable is set.\"\n    }\n. setting it for an hour, but no luck. here is my go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/jeanepaul/Developer/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGO15VENDOREXPERIMENT=\"\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n. @lukehoban \n// Place your settings in this file to overwrite the default settings\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.formatTool\": \"go fmt\",\n    \"go.gopath\": \"/Users/jeanepaul/Developer/go\"\n}\nafter browser restart, Current GOPATH:/Users/jeanepaul/Developer/go hold on, i'm seeing light\n. @jchannon \nin ~/.zshrc just add code below\n```\nMS visual code\ncode () { VSCODE_CWD=\"$PWD\" open -n -b \"com.microsoft.VSCode\" --args $* ;}\n``\n. nope, its not working for me. edit some structs, nope, indents are not fixed whencmd+r` unlike in atom.  oh no, spent almost 2hrs with this and its 3am. gtg\n. Greetings,\n@lukehoban  thank you for your efforts, everything seems to be working, those popping errors were gone, but still I need go fmt on save.. will be watching this close, want to use other IDE. and vscode looks beautiful, and fast. thanks again :)\n. can confirm this is working formatOnsave! thank you @lukehoban !\n. any updates on this guys? I had to scroll back up to the line where I am editing on a Go file with like 1k lines... @ramya-rao-a oh god..I have updated it already to 0.6.69 . I guess I have to wait for the fix. currently, I am editing somewhere on 500th line, and hit save, my cursor will go to top (not start of the line) and click back again to where I am editing.. why is this even happening? before, I did not have any problems.\nI can't disable formatting on save this time. this is part of my workflow.. \nthanks for the help btw.. looking forward for the fix.. sorry but any fix on this? as far as I am looking on the upstream issue, there seems to be no fix unless the author of this plugin fix the formatting issue that VSCode created. \nfirst, this should have not been a problem if VSCode did not change the way it treats the edits.\nso now what,. disable the format:onSave? maybe no. this was a good plugin, it helped me alot and many others I would suppose. . @ramya-rao-a accepted. sorry for the rant. I am looking forward for the fix, and yeah I guess I'll be waiting until next week maybe..hopefully. \nthank you again for the help.. @ramya-rao-a sorry for the super late reply. I have tried your fix\n$ code --install-extension Go-latest.vsix\nExtension 'Go-latest.vsix' was successfully installed!\nupdated my settings, and I am glad to report to you that it fixed the problem. I am glad I don't have to scroll back again up/down from a huge Go file.\nthank you so much :) . I guess this is the same issue with this https://github.com/Microsoft/vscode-go/issues/1346. ",
    "jchannon": "Is this the same as #11 ?\n. My GOPATH is as expected /Users/jonathan/Projects/Go but /Users/jonathan/Projects/Go/bin is in my PATH  \nSo what's the plugin looking for? I assume the bin? Can't it just use $GOPATH/bin when looking for tools?\n. How do you launch it from shell?\nhttps://github.com/Microsoft/vscode/issues/77\n. @Hokutosei thanks that solved it plus I now get the find-references notification that @Gys mentoned and I think we're now all good\n. Yup :smile: \n. Format on save would be a nice feature\n. If I wanted to take a bash at this feature where can I modify the existing plugin on my mac?\n. I assume this instruction is wrong:rm -rf ~/.vscode/extensions/go-code and should be rm -rf ~/.vscode/extensions/vscode-go ??\n. Agreed. If Luke can do it quickly go ahead. I'm just poking around ...\nOn Wednesday, 18 November 2015, Dmitri Shuralyov notifications@github.com\nwrote:\n\nHuge +1 to adding format-on-save (and it should be on by default; use\ngofmt if neither goimports nor goreturns are installed). IMO it's the\nmost basic, fundamental feature I expect out of a code editor with Go\nsupport. It's really hard to switch to something that doesn't have it.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/14#issuecomment-157891658.\n. OK I think I have this working, however I'm a bit stuck on writing it back to the file. I have added some code to goCheck.ts. Firstly is that the correct place? Secondly how do I write back to the file in goCheck?\n. Actually I think it should go in goMain::startBuildOnSaveWatcher ?\n. Yeah I don't think formatting with auto save turned on will work\n\nOn Thursday, 19 November 2015, Luke Hoban notifications@github.com wrote:\n\n@jchannon https://github.com/jchannon. I think what is probably best is\nthe following:\n1. Move the formatting implementation in goFormat.ts into a standalone\n   Command, so that it can be invoked both from Format Document and from the\n   new format-on-save implementation\n2. Invoke that command inside goCheck.ts prior to invoking the\n   compile/vet/lint checks.\n3. Add an option to turn this behaviour on/off\nThe bug in #16 https://github.com/Microsoft/vscode-go/issues/16 is also\nsomething that will need to be fixed before we can turn format-on-save on.\nWe'll also need to make sure that format-on-save interacts decently with\nAuto Save if the user has that turned on. I'm a little worried that these\nwill interact poorly, since code will be changing unexpecedtly without the\nuser taking any action. It may be that we'll need to turn of format-on-save\nif Auto Save is turned on.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/14#issuecomment-158136155.\n. WIP in PR added here - https://github.com/Microsoft/vscode-go/pull/40/files\n\nOn 19 November 2015 at 18:15, Jonathan Channon jonathan.channon@gmail.com\nwrote:\n\nYeah I don't think formatting with auto save turned on will work\nOn Thursday, 19 November 2015, Luke Hoban notifications@github.com\nwrote:\n\n@jchannon https://github.com/jchannon. I think what is probably best\nis the following:\n1. Move the formatting implementation in goFormat.ts into a\n   standalone Command, so that it can be invoked both from Format Document and\n   from the new format-on-save implementation\n2. Invoke that command inside goCheck.ts prior to invoking the\n   compile/vet/lint checks.\n3. Add an option to turn this behaviour on/off\nThe bug in #16 https://github.com/Microsoft/vscode-go/issues/16 is\nalso something that will need to be fixed before we can turn format-on-save\non.\nWe'll also need to make sure that format-on-save interacts decently with\nAuto Save if the user has that turned on. I'm a little worried that these\nwill interact poorly, since code will be changing unexpecedtly without the\nuser taking any action. It may be that we'll need to turn of format-on-save\nif Auto Save is turned on.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/14#issuecomment-158136155\n.\n. @lukehoban have pushed all I can do, but for some reason its not working when I save\n. OK I've tried that and the command is executed but the document is not\nupdated with the formatted code. I'm chucking the towel in, I'll let you\nimplement it instead.\n\n\nCheers\nOn 19 November 2015 at 20:25, Luke Hoban notifications@github.com wrote:\n\nI haven't reviewed carefully yet - but it looks like you aren't yet\napplying the edits.\nI believe you need to use registerTextEditorCommand\nhttps://code.visualstudio.com/docs/extensionAPI/vscode-api#853 to\nregister a new TextEditorCommand with VS Code to do the formatting itself.\nThat is the step 1 in my list above. Then use executeCommand\nhttps://code.visualstudio.com/docs/extensionAPI/vscode-api#862 to\ninvoke that action both during the explicit Format and during the save.\nThis is step 2 and 3 in my earlier list.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/14#issuecomment-158187070.\n. View -> Toggle Output?\n. I think you have to open VSCode from the terminal. This also applies to Atom, that way it loads the environment variables. Please close if this solves it, this issue is tracked in #10 \n. Yeah I think close this as its already tracked in the other ticket\n. Fixed in #33 \n\nHitting F5 does not produce the out folder\nInvoking Tasks: Run Build Task manually, also does nothing\n. Run Build Task produces\n``\n0 info it worked if it ends with ok\n1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'run', 'compile' ]\n2 info using npm@2.7.4\n3 info using node@v0.12.2\n4 verbose run-script [ 'precompile', 'compile', 'postcompile' ]\n5 info precompile Go@0.6.7\n6 info compile Go@0.6.7\n7 verbose unsafe-perm in lifecycle true\n8 info Go@0.6.7 Failed to exec compile script\n9 verbose stack Error: Go@0.6.7 compile:node ./node_modules/vscode/bin/compile -watch -p ./9 verbose stack Exit status 1\n9 verbose stack     at EventEmitter.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/lifecycle.js:213:16)\n9 verbose stack     at EventEmitter.emit (events.js:110:17)\n9 verbose stack     at ChildProcess.<anonymous> (/usr/local/lib/node_modules/npm/lib/utils/spawn.js:14:12)\n9 verbose stack     at ChildProcess.emit (events.js:110:17)\n9 verbose stack     at maybeClose (child_process.js:1015:16)\n9 verbose stack     at Process.ChildProcess._handle.onexit (child_process.js:1087:5)\n10 verbose pkgid Go@0.6.7\n11 verbose cwd /Users/jonathan/vscode-go\n12 error Darwin 14.5.0\n13 error argv \"/usr/local/bin/node\" \"/usr/local/bin/npm\" \"run\" \"compile\"\n14 error node v0.12.2\n15 error npm  v2.7.4\n16 error code ELIFECYCLE\n17 error Go@0.6.7 compile:node ./node_modules/vscode/bin/compile -watch -p ./`\n17 error Exit status 1\n18 error Failed at the Go@0.6.7 compile script 'node ./node_modules/vscode/bin/compile -watch -p ./'.\n18 error This is most likely a problem with the Go package,\n18 error not with npm itself.\n18 error Tell the author that this fails on your system:\n18 error     node ./node_modules/vscode/bin/compile -watch -p ./\n18 error You can get their info via:\n18 error     npm owner ls Go\n18 error There is likely additional logging output above.\n19 verbose exit [ 1, true ]\n. Yup ran npm install  as per the instructions. Do you require a specific version of node/npm? You can see my versions in the log above\n.\nmodule.js:338\n    throw err;\n          ^\nError: Cannot find module 'typescript'\n    at Function.Module._resolveFilename (module.js:336:15)\n    at Function.require.resolve (module.js:388:19)\n    at Object. (/Users/jonathan/vscode-go/node_modules/vscode/bin/compile:4:40)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n```\n. That directory doesn't exist :(\nOn 19 November 2015 at 17:09, Luke Hoban notifications@github.com wrote:\n\nWhat do you see from tree node_modules/vscode/node_modules/typescript:\nlukeh@Lukes-MacBook-Pro:~/dd/vscode-go$ tree node_modules/vscode/node_modules/typescript/\nnode_modules/vscode/node_modules/typescript/\n\u251c\u2500\u2500 AUTHORS.md\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 CopyrightNotice.txt\n\u251c\u2500\u2500 Jakefile.js\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ThirdPartyNoticeText.txt\n\u251c\u2500\u2500 bin\n\u2502   \u251c\u2500\u2500 tsc\n\u2502   \u2514\u2500\u2500 tsserver\n\u251c\u2500\u2500 lib\n\u2502   \u251c\u2500\u2500 lib.core.d.ts\n\u2502   \u251c\u2500\u2500 lib.core.es6.d.ts\n\u2502   \u251c\u2500\u2500 lib.d.ts\n\u2502   \u251c\u2500\u2500 lib.dom.d.ts\n\u2502   \u251c\u2500\u2500 lib.es6.d.ts\n\u2502   \u251c\u2500\u2500 lib.scriptHost.d.ts\n\u2502   \u251c\u2500\u2500 lib.webworker.d.ts\n\u2502   \u251c\u2500\u2500 tsc.js\n\u2502   \u251c\u2500\u2500 tsserver.js\n\u2502   \u251c\u2500\u2500 typescript.d.ts\n\u2502   \u251c\u2500\u2500 typescript.js\n\u2502   \u251c\u2500\u2500 typescriptServices.d.ts\n\u2502   \u2514\u2500\u2500 typescriptServices.js\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tslint.json\n2 directories, 24 files\nAssuming that those are installed, my only next guess would be to try\nupgrading Node and see if that works.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/35#issuecomment-158121651.\n. ```\nnpm install                                                          \ue0b2 \njson-rpc2@1.0.2 node_modules/json-rpc2\n\u251c\u2500\u2500 object-assign@4.0.1\n\u251c\u2500\u2500 eventemitter3@1.1.1\n\u251c\u2500\u2500 jsonparse@1.2.0\n\u251c\u2500\u2500 debug@2.2.0 (ms@0.7.1)\n\u251c\u2500\u2500 lodash@3.10.1\n\u251c\u2500\u2500 faye-websocket@0.10.0 (websocket-driver@0.6.3)\n\u2514\u2500\u2500 es5class@2.3.1 (better-curry@1.6.0)\n\nvscode@0.10.4 node_modules/vscode\n\u251c\u2500\u2500 source-map-support@0.3.3 (source-map@0.1.32)\n\u251c\u2500\u2500 mocha@2.3.4 (escape-string-regexp@1.0.2, supports-color@1.2.0, growl@1.8.1, commander@2.3.0, diff@1.4.0, debug@2.2.0, jade@0.26.3, mkdirp@0.5.0, glob@3.2.3)\n\u2514\u2500\u2500 glob@5.0.15 (path-is-absolute@1.0.0, inherits@2.0.1, inflight@1.0.4, once@1.3.2, minimatch@3.0.0)\nfs-extra@0.26.2 node_modules/fs-extra\n\u251c\u2500\u2500 path-is-absolute@1.0.0\n\u251c\u2500\u2500 klaw@1.1.2\n\u251c\u2500\u2500 jsonfile@2.2.3\n\u251c\u2500\u2500 graceful-fs@4.1.2\n\u2514\u2500\u2500 rimraf@2.4.3 (glob@5.0.15)\n``\n. Looks liketypescriptis a missing dependency? ie/its not declared in anypackage.json`\n. can confirm this fixes it\n. @ramya-rao-a yup. Exactly that. ",
    "polds": "D'oh. I've figured out my issue. I had literally copy + pasted what the instructions had:\n{\n    \"go.buildOnSave\": {\n        \"type\": \"boolean\",\n        \"default\": true,\n        \"description\": \"Run 'go build'/'go test' on save.\"\n    },\n    \"go.lintOnSave\": {\n        \"type\": \"boolean\",\n        \"default\": true,\n        \"description\": \"Run 'golint' on save.\"\n    },\n    \"go.vetOnSave\": {\n        \"type\": \"boolean\",\n        \"default\": true,\n        \"description\": \"Run 'go tool vet' on save.\"\n    },\n    \"go.formatTool\": {\n        \"type\": \"string\",\n        \"default\": \"goreturns\",\n        \"description\": \"Pick 'gofmt', 'goimports' or 'goreturns' to run on format.\"\n    },\n    \"go.gopath\": {\n        \"type\": \"string\",\n        \"default\": null,\n        \"description\": \"Specifies the GOPATH to use when no environment variable is set.\"\n    }\n}\nThose are just the available options! Really your settings should look like this: \n{\n    \"go.formatTool\": \"gofmt\",\n    \"go.lintOnSave\": true,\n    \"go.gopath\": \"/Users/peter/dev/go\"\n}\n. Re: The comment above if your \"Current GOPATH\" shows Current GOPATH:[object Object] that's a hint your settings.json is incorrect. \n. +1\n. What version are you running? I too had this issue but it was resolved in 0.6.10:\n\n. +1\nGoSublime in SublimeText does this. \n. ",
    "Gys": "I normally use Atom and that works fine. I also got the 'missing tools' message. Would be good if it tells which tool instead of offering to install them, because I like to know what is happening. Anyway, I checked the list and the one tool that VS Code by default needs in addition to the Atom setup is\ngo-find-references (go get -u -v github.com/lukehoban/go-find-references)\nAlso I found that VS Code has to be started from the commandline. Otherwise the message keeps coming up. This is also in the readme but maybe somebody missed it.\nSo I do this:\n/Applications/Visual\\ Studio\\ Code.app/Contents/MacOS/Electron\nStill, the first time the message appeared but after clicking it the editor was satisfied after all.\n. $GOROOT/bin is not the only place. External tools like goreturns and golint are installed with 'go get' and therefore are compiled to $GOPATH/bin\n. Strange: Alt-Shft-F (or right-click menu) works correctly !\nSo it seems to be a bug.\n. Actually I just now realize that formatting on save is not in the feature list....\n. Did you enable File -> Auto save ?\nBecause formatting this way works for me (using the default goreturns).\nBut formatting at save does not work for me at all. See other issue.\n. Actually I just now realize that formatting on save is not in the feature list....\n. I do not know what info a popup in js shows. So I might be completely of track here. But why not use go doc <sym.method> ? That shows the definition PLUS docs.\n. This message was created automatically by mail delivery software.\nA message that you sent could not be delivered to one or more of its\nrecipients. This is a temporary error. The following address(es) deferred:\ngreulen@gmail.com\n    Domain reulen.nl has exceeded the max emails per hour (10/5 (200%)) allowed.  Message will be reattempted later\n------- This is a copy of the message, including all the headers. ------\nReceived: from mail-oi0-f51.google.com ([209.85.218.51]:33758)\n    by fyvie.footholds.net with esmtps (TLSv1.2:ECDHE-RSA-AES128-GCM-SHA256:128)\n    (Exim 4.86_1)\n    (envelope-from greulen+caf_=gijs=reulen.nl@gmail.com)\n    id 1anV3K-0002zF-SO\n    for gijs@reulen.nl; Tue, 05 Apr 2016 18:46:10 +0100\nReceived: by mail-oi0-f51.google.com with SMTP id w85so26933868oiw.0\n        for gijs@reulen.nl; Tue, 05 Apr 2016 10:45:50 -0700 (PDT)\nX-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;\n        d=1e100.net; s=20130820;\n        h=x-gm-message-state:delivered-to:date:dkim-signature:from:reply-to\n         :to:cc:message-id:in-reply-to:references:subject:mime-version\n         :content-transfer-encoding:precedence:list-id:list-archive:list-post\n         :list-unsubscribe;\n        bh=A6CRi+s0L8dIje6s5ZrImDuaX5/URVpiZ+UL0+bfww0=;\n        b=bDaYWQJRg5VKNXG7EBtV3CIBLpDId0BpwFzlahCKAljnab70ojtC3Z0ZqpanKUBTb0\n         Yhjy/5kHBRpM7JiOIfAHMK4McOmvgXHxWzqEA1GfLAl9Vq4hB4G4XzDT/C9cj9Dc6LTr\n         VrAIwrnGQY0dVVnFGvVrjFLiQ9R9CjkkdUYfe576AY/aZHVCymStestuCKN8N+LtPjJH\n         DEjslxjW0wy8G4rGCuUCc6xEoqKBcOdTGBPokYDkY6Z6BymaaLAhG5PcqmCye1dzIRab\n         /rHMcANmLjR2QuFUyPeLbh9s2lpZXHGTIMEwQ8lrUsFTIRAUJIzLyrvFi2Yp1UMunHM5\n         fX7w==\nX-Gm-Message-State: AD7BkJJTwSfjSlk6uTBLynReVjoCZmS0HYfmm4yGvgMddBL7PSGJxdZEBt6kL7j7ZJnjbjGjXe0bboUa5X+oBJtUTv/k2ug=\nX-Received: by 10.202.206.4 with SMTP id e4mr9456441oig.88.1459878329770;\n        Tue, 05 Apr 2016 10:45:29 -0700 (PDT)\nX-Forwarded-To: gijs@reulen.nl\nX-Forwarded-For: greulen@gmail.com gijs@reulen.nl\nDelivered-To: greulen@gmail.com\nReceived: by 10.157.13.20 with SMTP id 20csp507816oti;\n        Tue, 5 Apr 2016 10:45:28 -0700 (PDT)\nX-Received: by 10.140.104.13 with SMTP id z13mr13336768qge.68.1459878328856;\n        Tue, 05 Apr 2016 10:45:28 -0700 (PDT)\nReceived: from github-smtp2b-ext-cp1-prd.iad.github.net (github-smtp2-ext3.iad.github.net. [192.30.252.194])\n        by mx.google.com with ESMTPS id z93si27049127qgd.106.2016.04.05.10.45.28\n        for greulen@gmail.com\n        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);\n        Tue, 05 Apr 2016 10:45:28 -0700 (PDT)\nReceived-SPF: pass (google.com: domain of noreply@github.com designates 192.30.252.194 as permitted sender) client-ip=192.30.252.194;\nAuthentication-Results: mx.google.com;\n       dkim=pass (test mode) header.i=@github.com;\n       spf=pass (google.com: domain of noreply@github.com designates 192.30.252.194 as permitted sender) smtp.mailfrom=noreply@github.com;\n       dmarc=pass (p=NONE dis=NONE) header.from=github.com\nDate: Tue, 05 Apr 2016 10:45:28 -0700\nDKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=github.com;\n    s=pf2014; t=1459878328;\n    bh=A6CRi+s0L8dIje6s5ZrImDuaX5/URVpiZ+UL0+bfww0=;\n    h=From:Reply-To:To:Cc:In-Reply-To:References:Subject:List-ID:\n     List-Archive:List-Post:List-Unsubscribe:From;\n    b=PJrZfFPnfdQSnrpkUELI04q0Fyb8ZT/+m4FBarckuyeIwrfoGyTSj+E8G3EpvxhLv\n     D/tLc+HQZqOLxaoD+MXio7btLqc7+OOkWfWLttp8Jl9CJ0l/JDpyMIVWMpvq6aBsG/\n     hmN0gEFe7brN8yagKyWrhez4i5oCZ8IpBk5/ZewY=\nFrom: Luke Hoban notifications@github.com\nReply-To: Microsoft/vscode-go reply@reply.github.com\nTo: Microsoft/vscode-go vscode-go@noreply.github.com\nCc: Gys greulen@gmail.com\nMessage-ID: Microsoft/vscode-go/issues/87/205916088@github.com\nIn-Reply-To: Microsoft/vscode-go/issues/87@github.com\nReferences: Microsoft/vscode-go/issues/87@github.com\nSubject: Re: [Microsoft/vscode-go] Add godoc to hover provider (#87)\nMime-Version: 1.0\nContent-Type: multipart/alternative;\n boundary=\"--==_mimepart_5703f9b85e0f5_20383f99178d12c06948d7\";\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\nPrecedence: list\nX-GitHub-Sender: lukehoban\nX-GitHub-Recipient: Gys\nX-GitHub-Reason: comment\nList-ID: Microsoft/vscode-go \nList-Archive: https://github.com/Microsoft/vscode-go\nList-Post: mailto:reply@reply.github.com\nList-Unsubscribe: mailto:unsub+000e6493b8c5892f2cfd4859b39e5a61ec27b2c7a3fb604092cf00000001131bbbb892a169ce0713fb9d@reply.github.com,\n https://github.com/notifications/unsubscribe/AA5kk1m2wH1ftVVSZjv8uOtpkuPy0ejqks5p0p-4gaJpZM4Go6Ux\nX-Auto-Response-Suppress: All\nX-GitHub-Recipient-Address: greulen@gmail.com\n----==_mimepart_5703f9b85e0f5_20383f99178d12c06948d7\nContent-Type: text/plain;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n@srinathh You could take a look at integrating gogetdoc instead of the godoc usage in https://github.com/Microsoft/vscode-go/blob/master/src/goDeclaration.ts#L59.  It would also need to be added as a dependency here (and in docs): https://github.com/Microsoft/vscode-go/blob/ebce6f5c3c8d7dda94294e9f46517bbb8608d5ab/src/goInstallTools.ts#L38.\nHowever, I don't think it's okay yet to require users of vscode-go to have Go 1.6.  So there would need to be graceful fallbacks to other options both at acquisition time and when using features powered by this.  \nThat said, it might be okay to only include documentation in hover tips, completion lists and signature help when using Go1.6 though.\n\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Microsoft/vscode-go/issues/87#issuecomment-205916088\n----==_mimepart_5703f9b85e0f5_20383f99178d12c06948d7\nContent-Type: text/html;\n charset=UTF-8\nContent-Transfer-Encoding: 7bit\n@srinathh You could take a look at integrating gogetdoc instead of the godoc usage in https://github.com/Microsoft/vscode-go/blob/master/src/goDeclaration.ts#L59.  It would also need to be added as a dependency here (and in docs): https://github.com/Microsoft/vscode-go/blob/ebce6f5c3c8d7dda94294e9f46517bbb8608d5ab/src/goInstallTools.ts#L38.\nHowever, I don't think it's okay yet to require users of vscode-go to have Go 1.6.  So there would need to be graceful fallbacks to other options both at acquisition time and when using features powered by this.  \nThat said, it might be okay to only include documentation in hover tips, completion lists and signature help when using Go1.6 though.\n\u2014You are receiving this because you commented.Reply to this email directly or view it on GitHub\n\n\n\n\n\n\n\n----==_mimepart_5703f9b85e0f5_20383f99178d12c06948d7--\n. ",
    "mgutz": "@lukehoban Shouldn't tools be searched in $GOROOT/bin? $GOPATH can be multiple paths like /Users/mgutz/go:/User/mgutz/workspace1. We download the Go tarballs and set $GOROOT explicitly. The Go tools will set $GOROOT internally if it is not overridden. go get installs to $GOROOT/bin if I'm not mistaken.\n. ",
    "dmitshur": "I think I'm seeing this issue too.\n\n\nFrom Go documentation:\n\nThe GOPATH environment variable lists places to look for Go code. On Unix, the value is a colon-separated string. On Windows, the value is a semicolon-separated string. On Plan 9, the value is a list.\n\nIs this extension implementing that correctly?\nMy GOPATH is a colon-separated string that includes a couple workspaces. Is that the reason it's not able to find any of the Go tools?\nI'm not sure if it's related because I'd imagine it should use PATH to find binaries. My PATH also contains multiple entries.\nEdit: Looks like it does correctly handle multiple GOPATH workspaces, at least in this one place here.\n. I'm trying to see if 0.6.7 makes a difference. The way I was testing it previously is opening a .go file, adding some unneeded whitespace and seeing if it gets formatted (via gofmt) on save. It wasn't.\nHowever, I've realized now that it seemingly not a supported feature. There are these options for on-save functionality:\n-   go.buildOnSave\n-    go.lintOnSave\n-    go.vetOnSave\nBut no go.formatOnSave, is there? I think it's a very basic and important feature, and I can't consider using more advanced features like lintOnSave if it's not running format on save. (Edit: I found #14 now.)\nFor now, I've tried right clicking and doing \"Format Code\", and that appears to work now (although I am seeing some strange behavior regarding newlines, perhaps it's to do with \\n vs \\r\\n?). I haven't tried that with 0.6.6, but I am guessing it wouldn't have worked before, so your fix did fix that @lukehoban. Thank you!\n. Huge +1 to adding format-on-save (and it should be on by default; use gofmt if neither goimports nor goreturns are installed). IMO it's the most basic, fundamental feature I expect out of a code editor with Go support. It's really hard to switch to something that doesn't have it.\nBy default, it simply shouldn't be possible to save a non-gofmted .go file (unless you explicitly want to do that, e.g., if you're debugging gofmt functionality or something, then you should explicitly disable format-on-save).\n. > For instance, I enjoy how Atom's extension does both gofmt and goimports.\nQuestion about that specific example: do you know that goimports is a superset of gofmt, it already does what gofmt does? If so, what's the reason to do that?\n. Thank you so much @lukehoban!\nI consider format-on-save to be an absolute must minimum requirement to be able to consider using an editor for writing Go, and this was blocking me from trying VSC out further. This is very exciting! Now that it's resolved, I can try playing more with it.\nI've briefly tried it, and first impressions are really nice, and I see this on the trajectory of becoming the best (non-terminal) Go editor/plugin I've seen (beating Sublime Text + GoSublime, and Atom + its best Go package).\nI notice some buggy behavior when there are multiple \"issues\" to resolve on save, like a golint issue, go build issue, and gofmt issue. It seems it resolves one, but not the others at the same time, so I need to make a few dummy edits and re-save to get it all updated. I also couldn't get go vet warnings to show up. But go lint, go build, code autocompletion all worked! I'll try to create some reproducible steps for the issues I'm seeing and report them.\nBut overall, this is looking really incredible!\n. After seeing a console.log() call in the code, I was wondering the same thing.\nI found it in the help menu, under \"Toggle Developer Tools\", on OS X.\n\n\n. I think I am seeing this issue too.\nHere's a very simple reproduce case:\n``` Go\npackage main\nfunc main() {\n}\n```\nNote the 2 blank lines. Formatting this (with gofmt as the format tool) results in correctly formatting .go code.\nHowever, consider this version with 3 blank lines:\n``` Go\npackage main\nfunc main() {\n}\n```\nFormatting this leaves 3 blank lines, which is incorrect. Running gofmt -d main.go shows:\n``` diff\ndiff main.go gofmt/main.go\n--- /var/folders/_w/3kl_g4rn5sv1nyjblk7tf4h00000gn/T/gofmt780202922 2015-11-18 15:08:19.000000000 -0800\n+++ /var/folders/_w/3kl_g4rn5sv1nyjblk7tf4h00000gn/T/gofmt316322049 2015-11-18 15:08:19.000000000 -0800\n@@ -1,6 +1,4 @@\n package main\n-\nfunc main() {\n }\n``\n. I've looked overgoFormat.ts` and I agree with your assessment @lukehoban. At least I didn't spot anything obviously wrong in there.\n. > when I specify gofmt I get a missing tool prompt for some reason\nI think the problem is that \"do you have this tool installed\" check only looks in GOPATH/bin folders (for each workspace), but not GOROOT/bin where gofmt is located.\n. This functionality is provided by goimports and goreturns (but not gofmt).\nSo you'd need to use one of those 2 tools, and use Format Code option until there's an option to format-on-save (see #14).\n. I was going to report this issue too, because I found completions appearing when editing comments were surprising (no other editor I've used in the past did this), unhelpful and distracting. Since this is new behavior for me, there's a chance I would get used to it over time and start to like it.\nAnyway, I see the issue was already reported, discussed, and closed, so there's no need for me to open a new one.\nEdit: Actually, back when I originally spotted this issue, there were code completions triggered after typing a period, which was a much worse offender. I see that has been fixed since then, so all that's left are textual completions, which are not as bad.\n. Confirmed fixed. Thanks!\n\n. What is the current default?\nI thought the default was to run gofmt on save. Running goimports on save as a default has the consideration that the person may not have goimports command installed.\nAlso, goimports needs some additional care to be used efficiently. In a poor GOPATH workspace with many, many unrelated packages, suddenly having it on can cause issues. It also requires one to be careful with text/template vs html/template.\nI still think it makes a better default for beginners, especially if they have it on from day 1, but I wanted to point out the above concerns.\nI think vscode-go might've had some history with auto-save being on by default, which might relevant here.\nEdit: See related issues:\n- https://github.com/Microsoft/vscode-go/issues/14\n- https://github.com/Microsoft/vscode-go/issues/30\n- https://github.com/Microsoft/vscode-go/issues/31\n. It's possible to add vendor/ folder support for goimports in a more proper way. It supports a flag -srcdir, which should be the absolute path to the directory containing the file being saved.\nSee https://github.com/golang/tools/commit/bf084ef7580ee99a5efa3086138c942aca4aefd4.\n/cc @mkovacs FYI.\n. ",
    "amff": "I am not versed in typescript nor an experienced github user to submit a pull request but,\nfrom my debugging session (I really need support for multiple paths in gopath) it seems like the function getBinPath() in goPath.ts is searching the filesystem for executables without the .exe extension.\nShould be a quick fix.\n@lukehoban thank you for this great work\n. ",
    "yar00001": "still have the same problem with v. 0.6.19 on Windows 10\n. ",
    "zanderz": "I have this. First time trying VS Code, all excited at first but... have to go back to liteide for now :disappointed:\nv 0.10.8 on Windows 10 x64\nThe \"godef\" command is not available. Use \"go get -u github.com/rogpeppe/godef\" to install.\nCurrent GOPATH:c:\\work\ngodef.exe is installed in c:\\work\\bin\n. Note that it seems to work and the error goes away if %GOPATH%\\bin is added to the %PATH%.\n. ",
    "ghost": "hey folks are you still getting this issue ? the issue is not in the extension. just set the GOBIN path and run go install  \"main.go\"  and set the git path on the sys  environment variable\n. Well... excuse me. This issue was filed 4 months in advanced of #438. If anything, that issue is a duplicate of this one. But whatever.. Well... excuse me. This issue was filed 4 months in advanced of #438. If anything, that issue is a duplicate of this one. But whatever.. I have the same problem. Go: Current GOPATH outputs \"undefined\". My GOPATH and GOROOT are set in .bashrc, I'm using Linux.\nIt only works if I manually add \"go.gopath\" into the settings.json which is far from ideal.. Opening from command line works without the problem (GOPATH is correct).. [Desktop Entry]\nName=Visual Studio Code\nComment=Visual Studio Code\nGenericName=Text Editor\nExec=code-oss %U\nIcon=code-oss\nType=Application\nTerminal=false\nStartupNotify=true\nStartupWMClass=visual-studio-code\nCategories=Development;TextEditor;\nMimeType=text/plain;\nThis is the desktop file (shortcut) for launching vscode. code-oss is the same as code, this is only distribution package name. VS Code version is 1.8.1.\nTell me if there is anything else I can provide to help with any potential bug. :). @Tyriar Thanks, putting it in .profile that solved the problem.. @ramya-rao-a i can confirm that it now behaves like you say\nThis was not the case at the time i filled this bug.\nI think this is now a better situation because Visual Studio Code doesn't need to be restartet anymore.\nBut now neigther the debug console nor the problems window appear on a failed build/run\nSo i guess the initial bug was fixed but now this inconvenience appeared. Same problem here (on Linux).\nI assume it stems from having multiple goroutines being executed (a server running) and as thus a simple SIGTERM is not enough. \nJust force close the process by sending a SIGKILL. \nIf you are debugging your application and are clicking on the Close button the expected behaviour should be a SIGKILL (-9) and not a SIGTERM (-15).\nEdit:\nI just had a look at the terminateProcess.sh (which I assume gets called when clicking on Stop?).\nkill -9 $1 > /dev/null 2>&1\nI am heavily surprised. When trying to kill the process through VSCode (aka clicking on the Stop button in Debug mode) literally nothing happens. If I run kill -9 $pid from my terminal the whole process ends immediately.  I guess there is some problem with executing the terminalProcess.sh? I can't explain any other way seeing that the debugger should actually send out a SIGKILL which should kill the process instantly.. So turns out bash/sh cannot parse the file because of Windows line endings (it uses CRLF). Just change the line endings to LF and it works perfectly again on Linux (and should as well on Mac obviously). . Hi, \nYes you are right the git source uses LF.\nThough the extension that you install from the extension explorer of vscode appearently uses a version which uses Windows endings. The pull request is from my ~/.vscode/extensions and that one used CRLF which is also why so many people did have this problem.  Just update that one and everything will work.. Yes I did have to chmod as well.\nAnd yes the extension works now.. Can confirm this with lang-server enabled. Running on Linux. This mostly happens when editing files with dot imports (at least for me). Also occasionally happens (as described) with very simple files. This clearly is a go-langserv specific problem since it does not happen when the langserver is disabled.\nI assume the problem is that the langserver does not cancel pending workers but justs queues new ones if something is triggered. Though haven't had a look at the implementation so I could be wrong. But feels heavily like it since I realized this happens more often if I change a source file fast and trigger anything that creates a request to the language server multiple times in fast succession.\nBecause of this I generally am forced to disable the language server if working with dot imports (dsl). Otherwise it causes my system to crash due to an overflow at some point.. Yes. Here is my configuration:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch file\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${file}\",\n            \"args\": [\n                \"-arga\",\n                \"-argb\"\n            ]\n        },\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\nos.Args was empty in the debugger. ```go\npackage main\nimport \"os\"\nfunc main() {\n    a := os.Args\n_ = a\n\n}\n```. \n. That was it. I am so sorry for wasting your time.. @ramya-rao-a Hello,\nIt is probably about show in the editor the value of a variable in a given line when we debug source code.\nPreview screen: \n\n. Ok, my bad sorry. \nI see this case in package path/filepath. When I type filapath after dot symbol then is no show any suggestion on editor. I did not think there could be more types in different packages, and sollution is no simple.\n. @ramya-rao-a \nthen with new project open, need to modify GOPATH ?. then do i need restart vscode to reload GOPATH ?\nbesides, GOPATH should be one path for installation of cmd packages.. I replace mdempsky/gocode of nsf/gocode and completion works. Weird. \n. After thinking it through I realize that this behavior is how the debugger was designed. As such, I'm going to close this issue.. I'm reopening this because it's still frustrating me. Here's a screenshot of what I'm referring to:\n \nYou can reproduce this by running the debugger on this project: https://github.com/magiconair/properties. \nWould it be possible to disable the project path prefix being displayed above for a workspace? In other words, I would like to hide the \"github.com/magiconair/\" section of the value.. Would the solution described only work for projects under GOPATH? I've been using Exercism and they keep their go files under ~/exercism/go.. In retrospect, I don't think this is a valid issue as it stems from my lack of understanding of package management. Having gained more experience with Go, I think the current behavior is optimal. As such, I'm going to close this issue.. \"go.autocompleteUnimportedPackages\": true and \"go.gotoSymbol.includeGoroot\": true is not working as PyCharm, it's a pity, maybe in future). I think you can get this behavior by enabling \"follow cursor\" in the outline options.. @ramya-rao-a I was referring to the context menu options displayed after pressing the ellipses:\n\n. You can press ctrl+space to trigger suggestions.. Maybe this request could encompass various profiling features? Integration with pprof would be very attractive to me.. I think I'm experiencing https://github.com/Microsoft/vscode/issues/60746.. ",
    "tsirolnik": "Hi, I've upgrade vscode from 1.0.0 (which had no problem) to 1.2 and now I have this issue\n. ",
    "ericmdantas": "Same here. I'm using 1.2.1.\n. Same here. I'm using 1.2.1.\n. ",
    "biessek": "In windows if you set the variable \"GOPATH\" with:\nset GOPATH=\"C:\\work\"\nTry without the quotes:\nset GOPATH=C:\\work\nTo me, that makes it work.\nNote: I'm in Windows 10 with vscode 1.3\n. ",
    "superzadeh": "@biessek this also worked for me. Go figure...\n. ",
    "b1ackb0x": "I just started with Go and had this issue on latest version on windows 10. Turned out, I had to add the workspace bin path in the PATH environment variable. Works fine now.\n. ",
    "xobs": "As others have stated, on Windows 8.1, vscode 1.4.0 would repeatedly ask to install plugins, and would even do so when clicking \"Install All\".\nThe only solution that allowed it to work was to add %GOPATH%\\bin to my PATH and restart vscode.  Without adding it to the PATH it was able to install dependencies but could not run them, and therefore did not think they were actually installed.\n. ",
    "amkoehler": "I ran into a similar issue. Confirmed my GOPATH was set correctly via Go: Current GOPATH in the command palette, but every time I saved a file I'd get prompted to install a few tools I supposedly didn't have. After a few frustrating minutes I restarted VS Code and all was well. \n. Thank you! . Ran into this same exact issue. For now I'm ok with using a single go path instead of multiple, but it would be nice to reap the benefits of go.inferGopath. I think it's a great feature. . ",
    "martinscholz83": "For me problem was that my machine is behind a proxy. After set http_proxy variable all is working fine.\n. ",
    "alecha": "Unfortunately I've the same problem, latest version of code and extension. My GOPATH is ok, I've also tried to set it in the settings.json file \n. the same of other users, my gopath is ok but when I save (so when the build runs) I get the error Error: Error: spawn EACCES\nThis is my settings.json file\njson\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.formatTool\": \"goimports\",\n    \"go.gopath\": \"MyGoPath\"\n}\n. GoPath is ok: Current GOPATH:/Users/alessiocavaleri/Documents/Code/go/\nMacOS 10.11.6, Code 1.6.1, extension 0.6.47\n- renaming a variable does not throw an error\n- format the document does not throw an error\nthe error is \nEACCES: Error: spawn EACCES\n    at exports._errnoException (util.js:1026:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at exports.spawn (child_process.js:392:9)\n    at Object.exports.execFile (child_process.js:155:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:195:20)\n    at /Users/alessiocavaleri/.vscode/extensions/lukehoban.Go-0.6.47/out/src/util.js:113:12\n    at Object.getGoVersion (/Users/alessiocavaleri/.vscode/extensions/lukehoban.Go-0.6.47/out/src/util.js:112:12)\n    at Object.setupGoPathAndOfferToInstallTools (/Users/alessiocavaleri/.vscode/extensions/lukehoban.Go-0.6.47/out/src/goInstallTools.js:154:12)\n    at activate (/Users/alessiocavaleri/.vscode/extensions/lukehoban.Go-0.6.47/out/src/goMain.js:43:22)\n    at Function.t._callActivateOptional (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:13:15169)\n. ",
    "EGJ1996": "Still having the same issue with the following settings:\n{\n    \"window.zoomLevel\": 0,\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildTags\": \"\",\n    \"go.buildFlags\": [],\n    \"go.lintTool\": \"golint\",\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.testOnSave\": false,\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true, \n    \"go.formatTool\": \"goreturns\",\n    \"go.formatFlags\": [],\n    \"go.goroot\": \"C:/Users/Dell/Desktop/Go Compiler\",\n    \"go.gopath\": \"C:/Users/Dell/Desktop/Go Compiler/Chap1\",\n    \"go.inferGopath\": false,\n    \"go.gocodeAutoBuild\": false\n}. @ramya-rao-a  Thanks for the response! \nError: spawn C:\\Users\\Dell\\Desktop\\Go Compiler\\bin\\go.exe ENOENT\ngorename:\nError: spawn C:\\Users\\Dell\\Desktop\\Go Compiler\\bin\\go.exe ENOENT\ngodef:\nError: spawn C:\\Users\\Dell\\Desktop\\Go Compiler\\bin\\go.exe ENOENT\ngoreturns:\nError: spawn C:\\Users\\Dell\\Desktop\\Go Compiler\\bin\\go.exe ENOENT\ngolint:\nError: spawn C:\\Users\\Dell\\Desktop\\Go Compiler\\bin\\go.exe ENOENT\ngotests:\nError: spawn C:\\Users\\Dell\\Desktop\\Go Compiler\\bin\\go.exe ENOENT. I fixed that issue but now I am still getting these popups:\n\n. ",
    "amazingandyyy": "I keep getting this error message. (MacOS VSCode)\n\nand after I choose Install All\nIt only show \n```\nInstalling 9 tools\n  gocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  godef\n  golint\n  gotests\nInstalling gocode FAILED\nInstalling gopkgs FAILED\nInstalling go-outline FAILED\nInstalling go-symbols FAILED\nInstalling guru FAILED\nInstalling gorename FAILED\nInstalling godef FAILED\nInstalling golint FAILED\nInstalling gotests FAILED\n9 tools failed to install.\ngocode:\nError: Command failed: /usr/local/bin/go get -u -v github.com/nsf/gocode\npackage github.com/nsf/gocode: cannot download, $GOPATH not set. For more details see: go help gopath\npackage github.com/nsf/gocode: cannot download, $GOPATH not set. For more details see: go help gopath\ngopkgs:\nError: Command failed: /usr/local/bin/go get -u -v github.com/tpng/gopkgs\npackage github.com/tpng/gopkgs: cannot download, $GOPATH not set. For more details see: go help gopath\npackage github.com/tpng/gopkgs: cannot download, $GOPATH not set. For more details see: go help gopath\ngo-outline:\nError: Command failed: /usr/local/bin/go get -u -v github.com/lukehoban/go-outline\npackage github.com/lukehoban/go-outline: cannot download, $GOPATH not set. For more details see: go help gopath\npackage github.com/lukehoban/go-outline: cannot download, $GOPATH not set. For more details see: go help gopath\ngo-symbols:\nError: Command failed: /usr/local/bin/go get -u -v github.com/newhook/go-symbols\npackage github.com/newhook/go-symbols: cannot download, $GOPATH not set. For more details see: go help gopath\npackage github.com/newhook/go-symbols: cannot download, $GOPATH not set. For more details see: go help gopath\nguru:\nError: Command failed: /usr/local/bin/go get -u -v golang.org/x/tools/cmd/guru\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/guru?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/guru\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/guru?go-get=1\nget \"golang.org/x/tools/cmd/guru\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\npackage golang.org/x/tools/cmd/guru: cannot download, $GOPATH not set. For more details see: go help gopath\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/guru?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/guru\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/guru?go-get=1\nget \"golang.org/x/tools/cmd/guru\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\npackage golang.org/x/tools/cmd/guru: cannot download, $GOPATH not set. For more details see: go help gopath\ngorename:\nError: Command failed: /usr/local/bin/go get -u -v golang.org/x/tools/cmd/gorename\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/gorename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/gorename?go-get=1\nget \"golang.org/x/tools/cmd/gorename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\npackage golang.org/x/tools/cmd/gorename: cannot download, $GOPATH not set. For more details see: go help gopath\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/gorename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/gorename?go-get=1\nget \"golang.org/x/tools/cmd/gorename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\npackage golang.org/x/tools/cmd/gorename: cannot download, $GOPATH not set. For more details see: go help gopath\ngodef:\nError: Command failed: /usr/local/bin/go get -u -v github.com/rogpeppe/godef\npackage github.com/rogpeppe/godef: cannot download, $GOPATH not set. For more details see: go help gopath\npackage github.com/rogpeppe/godef: cannot download, $GOPATH not set. For more details see: go help gopath\ngolint:\nError: Command failed: /usr/local/bin/go get -u -v github.com/golang/lint/golint\npackage github.com/golang/lint/golint: cannot download, $GOPATH not set. For more details see: go help gopath\npackage github.com/golang/lint/golint: cannot download, $GOPATH not set. For more details see: go help gopath\ngotests:\nError: Command failed: /usr/local/bin/go get -u -v github.com/cweill/gotests/...\npackage github.com/cweill/gotests/...: cannot download, $GOPATH not set. For more details see: go help gopath\npackage github.com/cweill/gotests/...: cannot download, $GOPATH not set. For more details see: go help gopath\n```. ",
    "klingtnet": "I found a solution for Gnome users and probably everyone else who starts code by its .desktop file:\n\nthe problem is that if you start code through the application launcher then it will not inherit the environment variables exported from your .bashrc, .zshrc, .whateverrc\nthe integrated terminal of vscode will show the correct GOPATH but only because it sources your shell-rc\nthe solution is to create a ~/.profile which also exports your GOPATH\nthis file is sourced by GNOME, and probably some other DE's, and makes the environment variables available for GUI applications\nthe ~/.profile could simply look like this:\n\n```sh\n~/.profile\nexport GOPATH=\"$HOME/.go\"\n``. @rakyll What system are you using, Linux, Mac or Windows? Can vscode's integrated terminal findgo`?. @ramya-rao-a Thank you for this workaround, I can confirm that it works!\nThis is the full setting:\njson\n    \"go.alternateTools\": {\n        \"go\": \"vgo\"\n    },\nNote that, if the tool is not in your PATH, you've to specify the absolute path to vgo.. @datosh \nIt's now broken for me since VSCode 1.26.0 because it now ignore my alternateTools setting and tries to run go test against the standard library, I have no idea why:\ngo test golang_org/x/crypto/cryptobyte/asn1: open /usr/lib/go/pkg/linux_amd64/vendor/golang_org/x/crypto/cryptobyte/asn1.a: permission denied\ngo test golang_org/x/crypto/poly1305: open /usr/lib/go/pkg/linux_amd64/vendor/golang_org/x/crypto/poly1305.a: permission denied\ngo test runtime/cgo: open /usr/lib/go/pkg/linux_amd64/runtime/cgo.a: permission denied\ngo test golang_org/x/crypto/curve25519: open /usr/lib/go/pkg/linux_amd64/vendor/golang_org/x/crypto/curve25519.a: permission denied\ngo test golang_org/x/crypto/chacha20poly1305/internal/chacha20: open /usr/lib/go/pkg/linux_amd64/vendor/golang_org/x/crypto/chacha20poly1305/internal/chacha20.a: permission denied\ngo test golang_org/x/text/transform: open /usr/lib/go/pkg/linux_amd64/vendor/golang_org/x/text/transform.a: permission denied\ngo test golang_org/x/net/http2/hpack: open /usr/lib/go/pkg/linux_amd64/vendor/golang_org/x/net/http2/hpack.a: permission denied\ngo test golang_org/x/text/unicode/bidi: open /usr/lib/go/pkg/linux_amd64/vendor/golang_org/x/text/unicode/bidi.a: permission denied. I do not have completions at all, even after reinstalling all the Go tools.. ",
    "kevinmcfarlane": "I ran into this over the weekend. None of the above worked. This is on Win 10 Pro Anniversary Update with all patches. And latest version of VS Code as I write.\nHowever, looking at the \"install tools\" message it was saying run go get -v xxx\nBut clicking on Install or Install All would run go get -u -v xxx and report fail even though it was creating all the folders and files.\nSo I went to the command prompt and typed go get -v xxx for one of the tools and it worked. So I then repeated for the remaining tools and now it's fine.. ",
    "rakyll": "I came across to this issue, re-installing and reloading the window didn't work. But, uninstalling, quitting VSCode, and reinstalling did the trick.. Version 1.13.0 (1.13.0)\nLet me explain further how this is reproducible.\nI am on a fresh new laptop with no Go installed. I installed VSCode and the Go extension before Go. Then, I installed Go from source and add the GOROOT/bin to my PATH. Even though, my bash was able to recognize the go command, VSCode was prompting the error message saying that I don't have go in my PATH.. @ramya-rao-a, it didn't. I exited VS Code and opened it from the terminal where go is available for a few times before giving up.. @klingtnet, I am on a Mac. The integrated terminal also couldn't find go.. \"go.modifytags\": {\n                 \"tags\": \"json,omitempty xml,cdata\",\n                 \"promptForTags\": false \n           }\nShould we produce the XML tags if user is not explicitly asking for it? Our broader ecosystem mostly cares about JSON and verbosity makes it harder to maintain the tag literals.\n. AFAIK, availability of running go build against file paths are not a well-defined behavior but a side effect of the new source importer, see https://github.com/golang/go/commit/e646d07329e7edc56c8cf3284c729937979dae4a.\nOn the other hand, the other parts of the go tool that works against filenames (e.g. go run) doesn't honor build tags. From a consistency point of view, go build should ignore the build tags. Is there any reason why you depend on go build gofiles... rather than building the package?. Duplicate of https://github.com/Microsoft/vscode-go/issues/741.. Agreeing with what @campoy says about the gotype.\nWhat's so bad about linting on save? It is not necessary a lot of effort to press (cmd+s/control+s) once a while if you need early feedback. An editor that lints my code as I live code is nothing but noise to me.. I'd love to be able to run individual benchmarks the way I run tests individually. It is currently one of the few critical things missing from my daily workflow.. I don't know/remember why this restriction exists but VS Code shouldn't do anything to change this behavior.\n```\n$ go help packages\nImport paths beginning with \"cmd/\" only match source code in\nthe Go repository.\n```\nI asked relevant people why we are restricted to GOROOT with \"cmd/\" import paths and will update you once I have an answer.. I learned that this restriction exists for the convenience of the GOROOT developers.\ngo install cmd/compile builds GOROOT/src/cmd/compile and replaces the go binary. It is less tedious than having to run ./make.bash every time. This is going to make my life better :)\nSo, there is nothing for vscode-go to do here. This a go tool restriction unless the go tool removes the restriction.. What @zmb3 said.\nGodoc doesn't have annotations. We also prefer the doc to be targeting more to the humans than to machines.. go test and go test  should be behave similarly, not outputting to stdout if -v is not set. Can you file an issue if that's not the case?. I think it requires a proposal to merge such a feature. Have you tried the -exec flag? It allows you to intercept the go test with any program you want. You might be able to access to the test file's absolute path with a custom executable.\nA sample exec program: https://github.com/golang/go/blob/master/misc/android/go_android_exec.go. ",
    "ZacharyZYH": "I was in the same trouble, and I found it was caused by the Git Path. \nMy Git Path was in Drive C which the Code did not have the license to operate. After I reinstalled Git in Drive E, the problem was solved.. ",
    "aleafboat": "I was in the same trouble https fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.. Installing 8 tools at D:\\code\\wcy\\mygo\\bin\n  go-outline\n  go-symbols\n  guru\n  gorename\n  impl\n  goreturns\n  golint\n  gotests\nInstalling github.com/ramya-rao-a/go-outline FAILED\nInstalling github.com/acroca/go-symbols FAILED\nInstalling golang.org/x/tools/cmd/guru FAILED\nInstalling golang.org/x/tools/cmd/gorename FAILED\nInstalling github.com/josharian/impl FAILED\nInstalling sourcegraph.com/sqs/goreturns FAILED\n. ",
    "daniel-trinh": "When I undo after a rename, it seems to only undo the change in the current file, instead of across all files. \nThis is on macOS 10.12, using Go extension : 0.6.55.\nAm I missing something?. Fair enough, I suppose I'll just do another rename instead of an undo. The reason I thought this was possible was because Intellij IDEA seems to do undos across files after a rename. Thanks for the response.. ",
    "rebornix": "@ramya-rao-a AFAIK, undo doesn't cross files, which is a predictable behavior.. @donnol  In Vim we invokde selectNextSuggestion command, nothing else. So please check what's the expected behavior when you run this command directly. And you may also want to disable Vim temporarily and run selectNextSuggestion to see its effect. If selectNextSuggestion leads you to nowhere when Vim disabled, then I'll say it might be a Code or Go issue (even though very unlikely).. ",
    "captncraig": "I am experiencing this as well. \nIn User preferences: \"go.formatTool\": \"gofmt\",\n. I'd love to have this change in the marketplace version. Any chance of pushing an update soon?. ",
    "solher": "+1 to add format on save. I was using Atom and this is definitely what I miss the most :)\n. Works like a charm for me. Thanks a lot !\n. ",
    "calmh": "I'd like to propose that the format-on-save command can be different than the explicit \"format code\" command. I like goimports for the explicit format command. But it can be quite slow on large files with many import and a large $GOPATH, so having it on every save can be painful and unnecessary. In that setup, having the editor do just gofmt on save is much faster and usually all I need.\n. Initial impression is that it does what it's supposed to. However a thing to note is that it doesn't play well with Auto Save, as the sudden reformat when you pause typing is a bit jarring ~~and can move the cursor to somewhere other than where it was before saving.~~ Edit: Actually, the cursor movement doesn't seem to be an issue. Let me try it a bit more. :)\n. Indeed! Note that ST in this case actually rewraps the current paragraph. So given the code:\n1: foo := \"bar\"\n2:\n3: // a comment here\n4: // more comment string\n5:\n6: if foo == \"bar\" {\n7:   print(\"hello\")\n8: }\npressing the wrap-paragraph shortcut when on lines 3 or 4 would wrap the comment paragraph nicely. (Pressing it while on line 6 would paragraph wrap the code on lines 6 and following, resulting in garbage which is fine by me. No need to try to be smart when the user asks for something stupid.)\n. ",
    "mebmichael": "Sounds like there's some really good progress on this. Is it possible to have allow for an array of tools to run on save? For instance, I enjoy how Atom's extension does both gofmt and goimports. For now, I have hacked my build task to handle this for me, but that's ugly at best.\n. Oh wow, you're right, I totally missed that. Thanks for pointing that out :)\n. ",
    "jonnenauha": "Damn, was thinking something was broken until found \"format code\" from the menus. So used to fmt on save from LiteIDE. How often is the plugin updated, is it repo tags or how can one see when things go \"live\"?\n. I've taken a cursory peak at the .vscode/*.json stuff in a JS project. Looks like you can pretty much accomplish this stuff with the tasks.json. Still a bit unclear if you can mixin grunt/gulp + go tasks. Looks like the top level map only has one \"tool\", maybe you can make an array of them to have multiple tools. But you can give args and seemingly also env variables. I'll test some more later.\nIf there is some go task runner file and custom logic by this plugin it should be .vscode/tasks-go.json or similar.\n. ",
    "rudygt": "Same here,\nthe \"Debug Console\" is always empty after the execution of a simple hello world, if I put a breakpoint in the printf it stops there but the output is not show anywhere. \n.  @lukehoban I would like to help but, I'm starting with vs code, typescript and go, I see in this class https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts (line 127) a handler for the standard output of the debugProcess that just send the information to console.log, can you point me in the right direction to make it send the information to the debug console? or I'm lost.\nThanks!, nice work with this plugin. \n. Thanks @yuntan I was looking over the node debug adapter, https://github.com/Microsoft/vscode-node-debug/blob/master/node/nodeDebug.ts, the \"_captureOutput\" method does exactly that. \n:+1: \n. Thanks for your help @yuntan :+1: \n. Nothing in particular, it was a mistake to leave it there.\nThanks.\n. ",
    "jeromelaurens": "Thanks @shurcooL but we are talking here about the go program output when debugging. I tried to open the console from developer tools : the output is not showing.\nSame behaviour as @rudygt  : the debug console always empty, but breakpoint works with variables.\nI have other strange behaviour when debugging, but before posting them, I'd like to see the output.\nAbout Delve, I have installed the latest version with the certificate, everything seems fine (I'm using it with intellig idea go plugin) \n. @lukehoban ok , some bugs of course but you've done a great job so far !\n. ",
    "yuntan": "This change fixed the issue for me.\nhttps://github.com/yuntan/vscode-go/commit/e3ec828ef9310800f59b214aba6f5a90dab7bd01\n. seems #41 is more clean solution for this problem.\n. I made args and env settings passed to Delve. https://github.com/yuntan/vscode-go/commit/fb0907e8f5ddc24d2f8850467a4d49805ec8d936\nAt the moment, Delve has no option to specify workdir of debug target process. So I've made issue to add --wd command arg to Delve. https://github.com/derekparker/delve/issues/295\n. ",
    "Stabledog": "It's August of 2017 -- almost 2 years later.  I just discovered and installed VScode for Mac, installed the C++ support, and I'm having this same problem in v1.14.2:  when my program writes to stdout, that does not show up anywhere in the debugger's output window.\nThis seems like a really basic behavioral deficiency that makes me wonder... \"is anybody using this tool on the Mac?\"  Am I missing some secret sauce to be able to see the output of my program while debugging?\n\nEdit: it seems that the default value in launch.json for \"externalConsole\" is the problem -- when it's set to 'true', I can't find the output of my program.  If changed to 'false', the program output appears intermixed with the debugger's output messages.  So that's better than nothing.. ",
    "dcsan": "@Stabledog what's the correct incant for launch.json?\nfile: 'file:///Users/dc/dev/rikai/nlp-rnd/nlp-debug/.vscode/launch.json'\nseverity: 'Warning'\nmessage: 'Attribute 'externalConsole' is deprecated, use 'console' instead.'\nat: '13,7'\nsource: ''\n\nusing\n```js\n{\n  // Use IntelliSense to learn about possible Node.js debug attributes.\n  // Hover to view descriptions of existing attributes.\n  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"debug server\",\n  \"program\": \"${workspaceRoot}/server.js\",\n  \"console\": \"integratedTerminal\"\n}\n\n]\n}\n```\n. oh UPDATE:\nworks with the above with standard console.log but for some reason TJs' debug module doesn't output here. must be something to do with how the console.log is being hijacked fighting between these two.. ",
    "mholt": "I did enable it, but I can't remember if I enabled it before or after this. I know in this particular instance, I right-clicked, then clicked \"Format Code\" when it happened. (formatting on save didn't do anything)\n. I got my error in this file: https://github.com/mholt/caddy/blob/e17d43b58a3b31f16e716791e16b69752f36a5ae/caddy/sigtrap_posix.go\nby adding a fmt.Println in one of the cases of the switch.\n. I'd like to suggest making it the default setting then :+1:\n. When I do that, it says:\n```\nInstalling 0 tool at /Users/matt/Dev/bin\nAll tools successfully installed. You're ready to Go :).\n```\nAnd then the PANIC text persists.... @ramya-rao-a Thanks for the reply! I'm definitely not using go.mod.\n\nAlso, when running Go: Install/Update Tools, you might not have checked the tools to update. Try it again and update all the tools\n\nOH, it's a CHECKBOX interface! I see now. I had just clicked 'gocode' before, without realizing I had to select them and push a button. Mea culpa. It's working now. Thank you!. ",
    "grabbou": "I am also experiencing some issues when imports are added/removed, e.g. this:\n``` go\nimport (\n    \"net/http\"\n\"github.com/jinzhu/gorm\"\n\n)\n```\ngets formatted to this:\ngo\nimport (\n    \"net/http\"\ngin-gonic/gin\"jinzhu/gorm\"\n)\nor this:\ngo\nimport (\n      \"net/http\"\n      \"github.com/xxx/yyy/utils\"\n)\nto this:\ngo\nimport (\n      \"net/http\n      \"github.com/gin-gonic/gin\"\n      \"github.com/xxx/yyy/utils\"\n)\n. Ah, cool. Thanks!\n. ",
    "sanderhahn": "One snippet that goes wrong with goreturns and also goimports is (where | is the cursor):\n``` go\npackage main\nfunc main() {\n    fmt.Println(\"Hello World! :)\")\n}\n|\n```\nThis results into:\ngo\npackage mainimport \"fmt\"func main() {\n    fmt.Println(\"Hello World! :)\")\n}\nTried to debug the goFormat.ts, but can't pinpoint the exact problem. If you enter another space on the last line without saving the file, the format works correctly. Copy and paste also sometimes works correctly, enter the code manually and it seems to go wrong (line end settings: LF).\n. ",
    "nictuku": "Another repro case (vertical spaces omitted to save space here):\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    log.Fatal(http.ListenAndServe(\":8080\", http.FileServer(http.Dir(\"/usr/share/doc\"))))\n}\nNow add a spurious \"fmt\" import:\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\nfunc main() {\n    log.Fatal(http.ListenAndServe(\":8080\", http.FileServer(http.Dir(\"/usr/share/doc\"))))\n}\nWhen I save, it shows the red lines below \"fmt\", as expected. But then after Format Code, the import block becomes (note the sole double quotes)\n```\nimport (\n    \"\n    \"log\"\n    \"net/http\"\n)\n```\nbtw: Nice work overall, Luke and team. This is shaping up really really nicely.\n. +1. This is an annoying bug. Simple repro:\n\nKeep up the great work!\n. I don't think it's Go-specific. I'd take inspiration from ST and enable the binding for everyone. \nBut I only use vscode for Go and Markdown, so I can't make any serious suggestions about what to do for other languages.\nBTW: thank you for your fantastic work!\n. ",
    "tpng": "vscode 0.10.2 should have fixed this issue.\n. @lukehoban I have created a utility gopkgs for listing available packages, it is based on the similar function of the SublimeText plugin GoSublime and should run much faster than go list all.\n. The difference of go list all and gopkgs is that go list all looks for go packages in your $GOPATH/src while gopkgs looks in your $GOPATH/pkg.\nAs a result of this, only importable packages that have been installed (either by go get or go install) are listed by gopkgs.\n. You can change the setting \"go.gocodeAutoBuild\": false to \"go.gocodeAutoBuild\": true to skip the go get or go install step.\n. ",
    "joeblew99": "this would be awesome !\n. @lukehoban JSON parsing helps ?\nI am keen to get this into VSCode :)\n. Same issue here :)\ntoday i did a 1005 clean install\nosx\nvs code\ndelve (from tip)\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch main.go\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"./server/main.go\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nthe local variables worked for the first session and then stopped working.\nnow i have no variables.\nno idea why.\nI tried it with a few projects and same result. Debugging works, but no local variables.\nThe debugger is getting them because i can hover over variables in the code and see their state, but just cant see them in the left menu\n. Hey Luke, \nI am the buy that cried wolf it seems.\nI started working on another project and the local variables window started working.\nYes the yellow is always highlighting always.\nYes the debug console always works.\nIf you need me to do a ything else please let me know.\n. i have had good success with this.\nMaybe there is some relative pathing issue\nFrom the termianl which is the root of my project, i open `code .then i edit the launch json, with a./examples/ex01/.``\nmight be worth a try \n. on OSX; CMD-P, and then ext goshows that i have v0.6.11, but no suggestion to upgrade it.\n. got it . ta\n. BTW local vars is working again after update\n. Thanks I get it. Really thorough answer.\nCan you copy into this issue example json that models 2 for me ?\nOn the issue of launching more than one vscode windows that map to the same folder on the hard-disk. Yeah I hit that one.\nNot sure how I can work around it easily.\nI could restructure my code so each client is its own namespace and hence cmd path. \nAm liking vscode BTW. Keep going please\n. Awesome. There is an excellent go gen library on github.\nIt generates about 15 different iles for all the things that replaces the need for generics.\nThat would be an awesome test case\n. I cleaned out bin, pkg and src\nGot a bit further but hung later:\n```\ngithub.com/lukehoban/go-outline (download)\ngithub.com/lukehoban/go-outline\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns?go-get=1\nsourcegraph.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/go/gcimporter?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/gcimporter?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/gcimporter\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/gcimporter?go-get=1\nget \"golang.org/x/tools/go/gcimporter\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\npackage golang.org/x/tools/go/gcimporter: cannot find package \"golang.org/x/tools/go/gcimporter\" in any of:\n    /usr/local/go/src/golang.org/x/tools/go/gcimporter (from $GOROOT)\n    /Users/apple/workspace/go/src/golang.org/x/tools/go/gcimporter (from $GOPATH)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/ast/astutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/ast/astutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/ast/astutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/ast/astutil?go-get=1\nget \"golang.org/x/tools/go/ast/astutil\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns/returns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns/returns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nget \"sourcegraph.com/sqs/goreturns/returns\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nFetching https://golang.org/x/tools/go/types?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/types?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/types\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/types?go-get=1\nget \"golang.org/x/tools/go/types\": verifying non-authoritative meta tag\npackage golang.org/x/tools/go/types: no buildable Go source files in /Users/apple/workspace/go/src/golang.org/x/tools/go/types\nexec error: Error: Command failed: /bin/sh -c go get -u -v sourcegraph.com/sqs/goreturns\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns?go-get=1\nsourcegraph.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/go/gcimporter?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/gcimporter?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/gcimporter\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/gcimporter?go-get=1\nget \"golang.org/x/tools/go/gcimporter\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\npackage golang.org/x/tools/go/gcimporter: cannot find package \"golang.org/x/tools/go/gcimporter\" in any of:\n    /usr/local/go/src/golang.org/x/tools/go/gcimporter (from $GOROOT)\n    /Users/apple/workspace/go/src/golang.org/x/tools/go/gcimporter (from $GOPATH)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/ast/astutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/ast/astutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/ast/astutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/ast/astutil?go-get=1\nget \"golang.org/x/tools/go/ast/astutil\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns/returns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns/returns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nget \"sourcegraph.com/sqs/goreturns/returns\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nFetching https://golang.org/x/tools/go/types?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/types?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/types\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/types?go-get=1\nget \"golang.org/x/tools/go/types\": verifying non-authoritative meta tag\npackage golang.org/x/tools/go/types: no buildable Go source files in /Users/apple/workspace/go/src/golang.org/x/tools/go/types\ngithub.com/lukehoban/go-find-references (download)\ngithub.com/lukehoban/ident (download)\ngithub.com/rogpeppe/godef (download)\ngithub.com/lukehoban/go-find-references\ngithub.com/rogpeppe/godef (download)\nFetching https://9fans.net/go/acme?go-get=1\nParsing meta tags from https://9fans.net/go/acme?go-get=1 (status code 200)\nget \"9fans.net/go/acme\": found meta tag main.metaImport{Prefix:\"9fans.net/go\", VCS:\"git\", RepoRoot:\"https://github.com/9fans/go\"} at https://9fans.net/go/acme?go-get=1\nget \"9fans.net/go/acme\": verifying non-authoritative meta tag\nFetching https://9fans.net/go?go-get=1\nParsing meta tags from https://9fans.net/go?go-get=1 (status code 200)\n9fans.net/go (download)\nFetching https://9fans.net/go/plan9?go-get=1\nParsing meta tags from https://9fans.net/go/plan9?go-get=1 (status code 200)\nget \"9fans.net/go/plan9\": found meta tag main.metaImport{Prefix:\"9fans.net/go\", VCS:\"git\", RepoRoot:\"https://github.com/9fans/go\"} at https://9fans.net/go/plan9?go-get=1\nget \"9fans.net/go/plan9\": verifying non-authoritative meta tag\nFetching https://9fans.net/go/plan9/client?go-get=1\nParsing meta tags from https://9fans.net/go/plan9/client?go-get=1 (status code 200)\nget \"9fans.net/go/plan9/client\": found meta tag main.metaImport{Prefix:\"9fans.net/go\", VCS:\"git\", RepoRoot:\"https://github.com/9fans/go\"} at https://9fans.net/go/plan9/client?go-get=1\nget \"9fans.net/go/plan9/client\": verifying non-authoritative meta tag\ngithub.com/rogpeppe/godef\ngithub.com/golang/lint (download)\nFetching https://golang.org/x/tools/go/gcimporter15?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/gcimporter15?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/gcimporter15\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/gcimporter15?go-get=1\nget \"golang.org/x/tools/go/gcimporter15\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ngolang.org/x/tools/go/gcimporter15\ngithub.com/golang/lint\ngithub.com/golang/lint/golint\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/gorename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/gorename?go-get=1\nget \"golang.org/x/tools/cmd/gorename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/buildutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/buildutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/buildutil?go-get=1\nget \"golang.org/x/tools/go/buildutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/refactor/rename?go-get=1\nParsing meta tags from https://golang.org/x/tools/refactor/rename?go-get=1 (status code 200)\nget \"golang.org/x/tools/refactor/rename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/refactor/rename?go-get=1\nget \"golang.org/x/tools/refactor/rename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/ast/astutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/ast/astutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/ast/astutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/ast/astutil?go-get=1\nget \"golang.org/x/tools/go/ast/astutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/loader?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/loader?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/loader\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/loader?go-get=1\nget \"golang.org/x/tools/go/loader\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/types/typeutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/types/typeutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/types/typeutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/types/typeutil?go-get=1\nget \"golang.org/x/tools/go/types/typeutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/refactor/importgraph?go-get=1\nParsing meta tags from https://golang.org/x/tools/refactor/importgraph?go-get=1 (status code 200)\nget \"golang.org/x/tools/refactor/importgraph\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/refactor/importgraph?go-get=1\nget \"golang.org/x/tools/refactor/importgraph\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/refactor/satisfy?go-get=1\nParsing meta tags from https://golang.org/x/tools/refactor/satisfy?go-get=1 (status code 200)\nget \"golang.org/x/tools/refactor/satisfy\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/refactor/satisfy?go-get=1\nget \"golang.org/x/tools/refactor/satisfy\": verifying non-authoritative meta tag\ngolang.org/x/tools/go/buildutil\ngolang.org/x/tools/go/ast/astutil\ngolang.org/x/tools/go/types/typeutil\ngolang.org/x/tools/refactor/importgraph\ngolang.org/x/tools/refactor/satisfy\ngolang.org/x/tools/go/loader\ngolang.org/x/tools/refactor/rename\ngolang.org/x/tools/cmd/gorename\ngithub.com/nsf/gocode (download)\ngithub.com/nsf/gocode\n```\n. https://github.com/Microsoft/vscode-go#tools\nI tried the manual install.\nDid not help..\nBasically whenever i try to format the code in vscode, the bar above comes up always asking to install 'goreturns'\n. Ok glad I am not crazy and thanks for the fast feedback.\nCan you explain the work around in a bit more detail please ?\nYou want me to run the tool install from terminal right ?\nOn Thu, 7 Apr 2016, 19:48 Luke Hoban, notifications@github.com wrote:\n\nThis is an issue with goreturns - I've opened a tracking issue here:\nsqs/goreturns#19 https://github.com/sqs/goreturns/issues/19.\nThe root cause appears to be\nhttps://groups.google.com/forum/#!topic/golang-announce/qu_rAphYdxY.\nFor a workaround until goreturns gets fixed, you should be able to just\nchange to: \"go.formatTool\": \"goimports\" and make sure you have done a go\nget golang.org/x/tools/cmd/goimports.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/282#issuecomment-207023832\n. So does that mean the standard way of installing the tools should work now ?\n\nOn Fri, 8 Apr 2016, 03:34 Luke Hoban, notifications@github.com wrote:\n\nThis is fixed now in sqs/goreturns#19\nhttps://github.com/sqs/goreturns/issues/19.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/282#issuecomment-207163415\n. Hey @lukehoban \nIt works now when i run the \"Analysis Tools Missing\" . Thanks.\nI tested it by trying a format code.\n\nbut i had to do:\ngo get -u github.com/golang/lint/golint\nSo maybe that should be added to your script ?\n. this is my settings:\n// Place your settings in this file to overwrite default and user settings.\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n```\n// \"files.autoSave\": \"onFocusChange\", \"files.autoSave\": \"afterDelay\",\n\"files.autoSave\": \"onFocusChange\",\n\"telemetry.enableTelemetry\": false\n```\n}\nWhat should  \"go.formatTool\" be ?? there are 3 options, and i have no idea whats the default..\n. I would give it a go bit on delivery deadline this week.\nSo anyone else ? It's pretty easy.\nJust some echo statement would be a good start.\n. Ok. I guess the go tram will sort it out, but the analysis install toll will pick it up on the next updatr\n. It makes me wonder if it might be better for all the Analysis tool to be not compiled on the client, but instead included in the release I know there are arguements for both.\nBut right now, the Analysis tools are like running a project without Vendoring. One dependency breaks and the whole things breaks.\nSO, maybe do the same with the extension. Include the source that it is known to work with, and let the analysis tools compile those.\nBut then, mabe a user will have their own versions of the same tool ? \nmhh. not sure...\n. @ironcladlou thanks for responding...\nHere is what i am experiencing:\n1. All my external dependencies it works fine. Like for example i use gin for the web routing stuff and it find references to gin function with no sweat.\n2. Its the links between MY code that is having the issues.\nSteps to reproduce, with actual code below.\nIf i right click on \"getMyInterfaceAddr\" for \"Find all References\", the GUI opens with the modal \"Loading...\" and does nothing...\nAlso my Settings might be worth putting in here. Maybe i screwed them up ?\n```\n// Place your settings in this file to overwrite default and user settings.\n{\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.gocodeAutoBuild\": false,\n// \"files.autoSave\": \"onFocusChange\", \"files.autoSave\": \"afterDelay\",\n\"files.autoSave\": \"onFocusChange\",\n\n \"telemetry.enableTelemetry\": false\n\n}\n```\nThe child code:\n```\npackage controllers\nimport (\n    \"errors\"\n    \"fmt\"\n    \"log\"\n    \"net\"\n    \"net/http\"\n    \"net/url\"\n)\n// getMyInterfaceAddr gets this private network IP. Basically the Servers IP.\nfunc getMyInterfaceAddr() (net.IP, error) {\nifaces, err := net.Interfaces()\nif err != nil {\n    return nil, err\n}\naddresses := []net.IP{}\nfor _, iface := range ifaces {\n\n    if iface.Flags&net.FlagUp == 0 {\n        continue // interface down\n    }\n    if iface.Flags&net.FlagLoopback != 0 {\n        continue // loopback interface\n    }\n    addrs, err := iface.Addrs()\n    if err != nil {\n        continue\n    }\n\n    for _, addr := range addrs {\n        var ip net.IP\n        switch v := addr.(type) {\n        case *net.IPNet:\n            ip = v.IP\n        case *net.IPAddr:\n            ip = v.IP\n        }\n        if ip == nil || ip.IsLoopback() {\n            continue\n        }\n        ip = ip.To4()\n        if ip == nil {\n            continue // not an ipv4 address\n        }\n        addresses = append(addresses, ip)\n    }\n}\nif len(addresses) == 0 {\n    return nil, fmt.Errorf(\"no address Found, net.InterfaceAddrs: %v\", addresses)\n}\n//only need first\nreturn addresses[0], nil\n\n}\n```\nThe parent code that calls the child code:\n```\npackage controllers\nimport (\n    \"fmt\"\n    \"log\"\n// Vendor\n\"github.com/gin-gonic/gin\"\n\n)\n// GetSessionServerIP is used so that the network IP can be discovered.\n// This is useful because the Warehouse and Fitting room computers can be configured with the riht Server IP to use.\nfunc GetSessionServerIP(c *gin.Context) {\n    serverIP, err := getMyInterfaceAddr()\n    log.Printf(\"debug: serverIP: %v\", serverIP)\nif err == nil {\n    c.JSON(201, serverIP)\n} else {\n    message := fmt.Sprintf(\"error: Getting Session Server IP. %v\", err)\n    log.Printf(message)\n    c.JSON(500, mod.Message{message})\n}\n\n}\n```\n. Thanks for pointing me in right direction. I try out that setting and see\nif it works\nOn Tue, 3 May 2016, 22:17 Ahmed W., notifications@github.com wrote:\n\nYou have \"go.gocodeAutoBuild\": false, and gocode depends on the compiled\ncode, while I'm not very familiar with how vscode-go works, I think if you\nset this to true it will work fine.\nOtherwise you will have to manually do go install every now and then.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/312#issuecomment-216651927\n. @ironcladlou The gopth is fine. Everything compiles outside oof vscode fine. So can't be that I feel\n. Worked around it myself by setting the path in vscode. \nBut it should be fixed because this used to work.\n\nuser settings.json:\n// Place your settings in this file to overwrite default and user settings.\n{\n    // GOPATH=\"/Users/apple/workspace/go\"\n    \"go.gopath\": \"/Users/apple/workspace/go\"\n}\n. @this is pretty old and i dont have this issue any more.\nthanks for the follow up though..\nclosing.... i doubt the godef improvement will get merged.\nalso \"go: Install Tools\" does not work btw\n. i doubt the godef improvement will get merged.\nalso \"go: Install Tools\" does not work btw\n. ",
    "gobijan": "I came here because I wanted to propose support for https://github.com/alecthomas/gometalinter, too :)\nAtoms Go Plugin and SublimeText have support for this. Maybe one could have a look at the Atom implementation for adding support to vscode (are the APIs similar because of the electron shell?): https://atom.io/packages/gometalinter-linter\n. Any status update on this? \nHere someone tried to implement it but failed: https://marketplace.visualstudio.com/items?itemName=casualjim.gotemplate\nGoSublime for Sublime Text has this kind of template support:\nhttps://github.com/DisposaBoy/GoSublime\nMaybe you could get some inspiration from these on how to do it in your extension?\n. For me it was a problem with the dlv version. I installed the latest from master and now it works again.\n. Just came here to confirm. I have the same bug.\nRunning in a simple project shows linting. Running in a more complex project (lots of go files etc) it throws:\nError while running tool: /Users/bijan/go/bin/gometalinter\nWARNING: deadline exceeded by linter errcheck on . (try increasing --deadline)\nWARNING: deadline exceeded by linter structcheck on . (try increasing --deadline)\nRuns fine on the terminal so I guess the --deadline flag is too strict in the default settings. . ",
    "sijad": "@lukehoban output of golint and gometalinter are a little different, with current regex can't parse gometalinter output\n. https://github.com/Microsoft/vscode-go/pull/294 is almost finished, it just need a review I guess\n. I was look at vscode files and non of them has final new line, but some of source files of this repo has that already, should all of them removed? let me know please\n. @lukehoban I'm about to create a experimental version of gometalinter in TypeScript\nI didn't go deep in gometalinter codes but I guess lot of thing should be changed to make it possible to run it for only single files, and if that TypeScript version goes well, what do you think about merge that with this extension? or should it be a separated extension? \n. Sorry for delay, with some changes now gometalinter works but I need help in a few things.\nlintTool config option now have an enum that only allow golint or gometalinter to be set. there is two reason:\n1- gometalinter prints to stdout but golint prints to stderr, can we read both of them?\n2- filename needs to pushed for golint arguments but it should not passed for gometalinter, if filename does not pass, golint will lint for whole directory (cwd) like gometalinter\nI'll add a few test case for gometalinter soon\n. Ok some test cases also has been added, @lukehoban let me know if anything need to be changed\nthanks\n. not sure why it fails in travis mac environment, any thoughts?\n. ",
    "johansja": "There is an PR for this.Wondering what is the progress on that? @sijad @lukehoban \n. Wondering what is the status of this. I have played around with this a little bit as well. https://github.com/JohanSJA/vscode-go/tree/gometalinter\n. Just wondering how the user experience would be like when goimports/goreturns is run on each save.\n. ",
    "punya": "gometalinter can also produce JSON output, if that makes parsing easier.\n. ",
    "egamma": "I suggest to look into how some of the existing linters are implemented for VS Code. ESLint is a good example vscode-eslint, tslint, and jshint are implemented in the same way. The idea is to implement a linter as a language server. The language server is kept a live and receives buffer change requests from VS Code (over JSON RPC), runs the linter (in proc) on the changed buffer, and returns the errors diagnostics back to VS Code. Doing the linting inside a server avoids that a new process is restarted for each validation as the user types. \n. Nice. This implementation spawns a new process for each linting pass. Since the linter is native code and since this is only done on save this might not be too bad for the batteries. \n. just a heads-up, in 0.10.1 a deactivate() function for cleaning-up isn't supported yet.\n. you could listen on the 'exit' event of the extension host process.\nprocess.on('exit', function(code) {\n. never tried this, but could spawning another process that runs gocode close work? There is a sync function to spawn a process: childProcess.execSync.\n. yes add typescript as a devDependency\n        \"typescript\": \"^1.6.2\",\n. We have changed the dependency of the vscode module. it no longer has typescript as a devdependency. \n. @tecbot look into the support for decorators in the VS Code API. Here is an example https://github.com/Microsoft/vscode-extension-samples/tree/master/decorator-sample\n. Fixed the vscode-extension-samples is now public.\n. Regarding representing test results. The wallaby extension is a good example for showing test results\nhttps://marketplace.visualstudio.com/items/WallabyJs.wallaby-vscode:\n- status bar shows number of test failures, clicking the status bar opens the output channel\n- the output channel show the full test report, the output channel supports link detection\n- the gutter is used for coverage information\n. These are actually 2 different scenarios. \nVS Code supports multiple completion providers and for Go there is the Go aware completion provider and a buffer based textual completion provider. The providers are prioritized first specific if no suggestions from the specific provider then show completions of a less specific provider. \nIn the scenario from @ahmetalpbalkan the Go completion provider has no suggestions and the buffer based provider shows textual completions. We have found this very useful when writing documentation. I agree that the auto accept on return is annoying and we need to tune this.\nIn the scenario of @nictuku the Go completion provider suggests semantic completions inside a comment and this is what is shown. This can be considered as a bug of the underlying gocode tool, it should not make semantic suggestions inside comments. As @lukehoban suggested above this could be worked around in the Go completion provider by not making suggestions inside comment tokens.\n. > Yeah, I'm referring to PHP comments actually. Trying to add a new-line in a comment always seems to auto-complete something making it super annoying.\nCan you please file an issue against VS Code with an example the reproduces the annoying behaviour.\n. @lukehoban we currently have no contribution point for the problem matchers. However, if it is a generally useful matcher, then we would take a pull request for a default problem matcher. This is the location:\nhttps://github.com/Microsoft/vscode/blob/master/src/vs/platform/markers/common/problemMatcher.ts#L395\n. Adding @jrieken he can provide more information.\n. Ping @lukehoban.\n. From the call stack it looks like this is vscode-go initiated. \n. > Those are two totally different programs and also the API for add-ons is different. \nyes, but the textMate grammar, snippets can be shared between VS and VS Code. I understand that this is a small subset of the full extension/plugin, but i wanted to mention it anyways.\n. If you always want to insert a tab key then use the following settings:\njson\n    \"editor.tabSize\": 4,\n    \"editor.insertSpaces\": false,\n. OK, then auto is the setting you want to use. \nPlease file an issue against https://github.com/Microsoft/vscode/issues with the file where the guessing is wrong.\n. > Please revert the change on the color or make a option setting to have the old one.\nThe old one is available as Dark (Visual Studio) or Light (Visual Studio)..\n. This change intentional and we have added a Dark+ default theme which provides more colors, pls see Microsoft/vscode#1849\n. FYI, you can tell the Code debugger to use an external console in the launch config:\njson\n    \"externalConsole\": true\n. @lukehoban is correct, sorry. This needs to be implemented by the debug adapter and it is currently only supported for node debugging. \nThere are other requests to make this support available // @weinand \n. FYI @weinand \n. > Is there any way to set a problem matcher to use to cause links to appear in the file/line/col references that appear in the output window under a specific (in this case  Go ) output channel? \n@lukehoban this is currently not possible sorry, we haven't connected problem matching with link detection. Currently we have some well known patterns we use to turn output into links, see\nhttps://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/output/common/outputWorker.ts#L72\nIf you have control over the output of the tool then you can tweak the output to match one of those patterns...\n. The recommendation is to use the Light+' orDark+` themes if you want more color.\nPls see this issue for the background https://github.com/Microsoft/vscode/issues/1849.\n. @mattetti VS Code now supports that an extension can contribute to the menus. Please see https://code.visualstudio.com/Updates#_extension-authoring.\n. // FYI @weinand \n. CC @jrieken did we change anything in the area of diagnostics and linting between 1.0 and 1.1?\n. Moving to vscode\n. This issue was moved to Microsoft/vscode#10293\n. I've looked at the code and it LGTM.\n@mattetti we are having some struggle with the publishing of this extension. For the meetup can you try to side-load the extension?\n- make sure you have vsce installed globally: npm install -g vsce\n- git clone/pull\n- npm install\n- vsce package \n- code Go-xxx.vsix   <- the vsix created by the step before\n. @mattetti thanks for the update and for sharing vscode-go with the Go developers. \n\nNote to others finding this issue, you need to have vsce installed globally to side load the extension:\n npm install -g vsce \n\nThanks, I've updated the instructions above.\n. @mattetti thanks for the feedback. \nAdding @kieferrm, @seanmcbreen, @chrisdias \n. @mattetti \n\nIs there a way to register default config entries so users can be started right away? \n\nWhat would be an example for such an entry?\n. @mattetti I see, you want to add these settings for discoverability, the default values of these setting are already defined as you list them above. \nAdding a setting to the user's settings file has the draw back that you can no longer easily change defaults or add new ones inside the extension. \nWe plan to improve the discoverability of an extension's contribution in general. One idea we want to try is to show the contributions in the details view of an extension.  This would show the settings an extension contributes. \nIf this isn't good enough then we can provide some 1st run guidance, e.g., show a message box on first run that invites the user to configer the go settings.\n. > We might want to open that pane automatically or offering to open it after installing a plugin.\nWe already show this pane automatically and this even before you the install the extension. \n\n. @mattetti thanks for the feedback, we will revisit this topic.\n. The grammar for Go is contained inside VS Code and it hasn't been updated since a while. The version of the grammar shipped in VS Code is 0.39 and there is now version 0.42.1 available, we should update the grammar in VS Code.\nMoving the issue to VS Code\n. This issue was moved to Microsoft/vscode#9841\n. Please try Help>Open Toggle Tools.\n. @mattetti as @lukehoban took on a new challenge he has obviously less cycles to support the extension. We are now ramping up a new team member for this extension, it is important to us, but there is a transition time.\n. There should be a '...' separator when there is more source between the source preview  and the signature information.\n\n. @ProTip if you want to get diagnostics as you type you can enable auto save. This is done using the setting \"files.autoSave\": \"afterDelay\".\n. From @strrchr on December 9, 2016 14:5\nI encounter the similar problem.\nAre there tips or options to reduce cpu usage?. From @thewhitetulip on December 10, 2016 4:55\nI started using vibecause despite the fact that this is an amazing text editor, it eats up my battery within 2-3hrs of usage. using vi, my battery stays four times upto 8hrs!. From @kieferrm on December 13, 2016 6:0\n//cc @egamma . >Open any file and do some changes, open the terminal or write Go code\nThe Go extension isn't shy to spawn new processes, e.g., on hover, which can result in increased energy consumption.\n@thewhitetulip can you confirm that you only saw this problem when disabling the Go extension in the Extensions viewlet.\nAssigning to @ramya-rao-a for further investigation in the Go extension. I'll add the caused by extension label for now.. From @thewhitetulip on December 23, 2016 4:41\n@egamma Well, I use Code only for Go programming :-) So I can't say for sure. But I will confirm by writing a python project using VScode too. From @thewhitetulip on December 25, 2016 7:15\n@egamma I am sorry for the delay, yes, writing Go code marks VSCode as using high energy, tested thrice writing JS and writing Go, JS has no issues, Go has issues.\nAlso, thought you might want to know:\nCode Helper eats 11% CPU for every single edit of any file (Go or not)\nCode itself takes 1.4% CPU and 43MB when it is in background (it is updating to the new version, and has 1 open JS file)\n92+28+26+59+23 MB is the system memory Code Helper eats even if it is idle (there are that many instances of the service) contrast that with iTerm, I had 10 tabs and a server running, still iTerm takes .4% CPU 43MB Memory\nDo let me know if you need more information.. @thewhitetulip thanks for following up, I move the issue to the Go Issue repository for further investigation.. ",
    "kylebrandt": "In my case I was just using the symbol browser as a navigation tool. So 2 even without the return type would be enough to uniquely identify it.\n. I updated my extension via: F1 -> Install Package -> Go (List packages did not show an option to update that I saw). Updating the extension followed by the restart of VSCode now shows the args as I would expect.\nThanks!\n. @lukehoban Not sure where to put this, but maybe if https://github.com/Microsoft/vscode/issues/353 gets done that will interact well with format on save (instead of autosave). That way it won't format while typing in a window - this is how I worked in sublime.\n. ",
    "prashantv": "I agree with 2 as well, the receiver type is mostly useful to uniquely identify it.\n. Should I file an issue on the vscode repository instead?\n. ",
    "mishak87": "There should be loop checking for each path in getGOPATHWorkspaces.\n. @ulrichSchreiner When this is fixed you can always install them globally manually.\n. @ulrichSchreiner Gotcha! I will try to make pull request over weekend to get this fixed.\n. LGTM I will test it late this evening\n. workspaces will always be of .length > 0 and if no bin is found returning ws1:ws2/bin/name makes no sense.\n. Correcting should be done after checking cache.\n. binPathCache is not used?\n. Leaving it on PATH would make sense.\n. ",
    "ulrichSchreiner": "hi,\ni'm currently working on a docker-container (vsc, somthing like atocker) which bundles all binaries in the container and starts vscode. The GOPATH is the current working directory of the host and the docker run ... mounts this directory as a GOPATH to the container. \nIt would be great to fix this bug to support multiple GOPATH entries in your setupGoPathAndOfferToInstallTools function so i can create a GOPATH in the container with two parts (one for the source, the second for the tools). So all the tools would be hidden from \"outside\" the container.\nImho it would be more better to have all the build-tools in the PATH, not in the GOPATH. It would be much easier to separate the build-tools from the workspaces. Would this be an option?\n. @mishak87 I don't think so. All the tools are referenced via GOPATH entries in the bin subdirectory, never in the PATH. So \"install them globally manually\" won't help if they won't be found :-)\n. it works great in my container. the tools are found in the PATH.\nthx\n. Thank you. My version of visualcode-go in a container now works with debugging. If you have a linux box you can start it without downloading all the parts; you only need docker.\nTwo questions:\n1. is there an option to set autosave to be \"true\" on startup? \n2. is there a command line client to install a extension? install it with a specific version? in my current version i git clone your extension ...\nThx\n. 1. i'll try it\n2. that's what i do :-). but it would be great to have git-tags to clone a specific release\n. hi,\ni have this race condition too. When debugging i have to hit F5 multiple times and one of them then hits the breakpoints.\nI'm using the latest version of vscode and vscode-go in a dockerized environment.\n\n. hi,\non my side: it is better now, but now it only starts when there is any breakpoint set :-). my launch-config looks like:\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch main.go\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"exec\",\n            \"program\": \"bin/test\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nand if i run this, nothing happens until i set a breakpoint anywhere in the code. then the program starts to run and stops at the breakpoint. version of gocode is\n$ git rev-parse HEAD\n598b92cb9543afb37a38c81dd9cf2068aca0c5f7\n. You're right. It was a misconfiguration on my side. My atom-in-a-docker-container had the same behaviour, so i digged into the whole thing and the solution is to do a locale-gen $LANG inside my docker-container before starting vscode (or atom). \n. one more note: when i change the code so that it compiles, everything works. and this also \"repairs\" code. so when change the upper code to\n~~~\n    _, err := mc.GetConfiguration()\n    if err != nil {\n        return nil, fmt.Errorf(\"cannot fetch configuration: %v\", err)\n    }\n    //c.GetString(key string, def string)\n    return nil, nil\n~~~\nand jump to the definition of GetConfiguration this works and the CPU of code comes down again.. hi,\ngo1.11.2 on linux:\n~~~\n$ go version\ngo version go1.11.2 linux/amd64\n~~~\nwhen creating a simple programm\n~~~\npackage main\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\nfunc main() {\n    fmt.Println(\"hallo\")\n    ioutil.ReadAll(os.Stdin)\n    //ioutil.ReadAll(r io.Reader)\n}\n~~~\ndoing a CTRL-CLICK on the first ReadAll vscode jumps to the definition of this function. when commenting in the last line and do a CTRL-CLICK on the second ReadAll (which is illegal code) the cpu increases with 3-4 code processes. on my current pc every process uses about 15-20% cpu. on my notebook with my original code (in a really big workspace) the CPU jumps up to 80%.\nafter commenting out the last line again and do a CTRL-CLICK on the first ReadAll everything is fine again.\nthe \"Developer -> Process Explorer\" does not show any high CPU usage. but the linux top shows 3-4 code processes with significat cpu usage.\n~~~\n{\n    \"go.lintTool\": \"revive\",\n    \"go.useLanguageServer\": false,\n    \"go.languageServerFlags\": [\"-trace\", \"-logfile\",\"/tmp/lang.log\"],\n    \"go.inferGopath\": true,\n    \"go.liveErrors\": {\n        \"enabled\": true,\n        \"delay\": 500\n    },\n    \"go.buildOnSave\": \"package\",\n    \"go.coverageOptions\": \"showCoveredCodeOnly\",\n    \"go.coverageDecorator\": {\n        \"type\": \"highlight\"\n    },\n    \"go.languageServerExperimentalFeatures\": {\n        \"format\": false,\n        \"autoComplete\": false,\n    },\n    \"go.enableCodeLens\": {\n        \"references\": false,\n        \"runtest\": true\n    },\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.coverOnSingleTest\": true,\n    \"go.docsTool\": \"gogetdoc\",\n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"go.useCodeSnippetsOnFunctionSuggestWithoutType\": false,\n    \"go.vetOnSave\": \"off\",\n    \"go.gotoSymbol.includeGoroot\": true,\n    \"go.gotoSymbol.includeImports\": true,\n}\n~~~. it only happens when there is a bug in the code. here\n~~~\npackage main\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\nfunc main() {\n    fmt.Println(\"hallo\")\n    ioutil.ReadAll(os.Stdin)\n}\n~~~\neverything is fine. but here:\n~~~\npackage main\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"os\"\n)\nfunc main() {\n    fmt.Pri ntln(\"hallo\")\n    ioutil.ReadAll(os.Stdin)\n}\n~~~\nthe \"Go to definition\" (F12) on the ReadAll does not work and CPU increases.. ",
    "caledhwa": "So, from the delve Wiki:\nhttps://github.com/derekparker/delve/wiki/Building\nInstalling on Mac OSX, there really doesn't seem to be anything regarding USER here. So, the self-signing cert seemed to work. I wonder what I'd need to do differently to make this work. \nDid you try this on Mac OS? Just curious... if others are having this experience. I also agree with @mattetti that I was almost drawn off by the go get.\n. So, uninstalling delve, what did you do? I feel like I did it right the first time, but then after it didn't work, I did the go get - maybe if I start over with that... @mattetti\n. Thanks for this! :+1:  I just need to figure out what I did wrong when I signed Delve. \n. I can confirm this as well. If I have an import . in a file, then most of my autocompletion does not function correctly.. ",
    "shdatta": "I also got some errors while building delve. I had to do following to get additional packages and depenecies..(on Mac)\ngo get github.com/peterh/liner\ngo get github.com/spf13/cobra\ngo get gopkg.in/yaml.v1\ngo get golang.org/x/sys/unix\ngo get gopkg.in/yaml.v2\nThen CERT=dlv-cert make install worked and I am able to debug the programs. \nLooks like there are still some issues with adding variables to watch window ( or may be its user error). But glad to have gotten so far\n. ",
    "bruparel": "I am new to Go and Delve both, therefore, I am sure I am doing something wrong.  I am on a Mac using OS X.  I followed Derek's instructions for 'Building'.  The last bullet item says:\nRun the following: CERT=dlv-cert make install, which will install the binary and codesign it.\nWhich binary are we installing?  When I ran the command at the command prompt in my home directory, I get the following response:\nBharat:~\n\u2192 CERT=dlv-cert make install\nmake: *** No rule to make target `install'.  Stop.\nI named my cert 'dlv-cert'.\nPlease help.\n. @lukehoban Thank you.  That worked.\n. @ramya-rao-a This is a generic problem with VSCode and not confined to the just the Go lang.  This is happening to me in the Angular 2 Typescript code.  So I would alert the VSCode team of this problem.  Initially upon loading, it works a few times, and then it starts displaying 'Loading.' message.. ",
    "erm0l0v": "Hello I've installed delve via brew.\nSo in terminal this command works perfect:\ndlv debug main.go (no root user)\nHowever I still get error in vscode:\n2016/09/14 18:18:36 server.go:71: Using API v1\n2016/09/14 18:18:36 debugger.go:61: launching process with args: [./debug]\ncould not launch process: could not fork/exec\nlaunch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\ndlv version\nDelve Debugger\nVersion: 0.11.0-alpha\nBuild: v0.11.0\ngo version\ngo version go1.7.1 darwin/amd64\n. @roblourens Currently debug works for me well. Problem was in certificate.\nDuring first debug session OS ask me about root password and after filling password debug starts working in console but not in vs-code. This confused me and I am complained this problem.\n@ThreeBearsDan @danbricedatascience Please try to restart system and run debug if OS ask you about root password - that mean that you have some issue with certificate (as I understand).\nI did several steps to fix this problem and don't remeber which of the helped me. Probably it was manual installation of delve. ",
    "ameykpatil": "@erm0l0v I am facing an exact same issue, did you able to solve it?\n. ",
    "ThreeBearsDan": "@erm0l0v I encounter this problem, too. dlv can work under terminal, but doesn't work under IDE vscode. help!. @roblourens I am sorry for late reply. That work well now. I do nothing, just upgrade vsnode to Version 1.7.1. So I think it must be something wrong with vscode.\n@erm0l0v  Thank u. It's not the issue with certificate. I think it's the issue with vscode. I just upgrade vscode and it work well.\n. ",
    "danbricedatascience": "Same issue. \n~~~\n2016/12/26 22:44:41 debugger.go:55: launching process with args: [./debug]\n2016/12/26 22:44:42 server.go:301: method Run has wrong number of ins: 1\n2016/12/26 22:44:42 server.go:301: method Stop has wrong number of ins: 2\n2016/12/26 22:44:42 debugger.go:239: continuing\nHello World!\n101\n~~~\nWhen running a very simple Hello World. Breakpoints are \"bypassed\" and the program simply complete like if it is not in debug mode.\nIt perfectly works with dlv command line.\nI'm on MacOSX 10.11.6, delve is installed from homebrew - certificate is well created.\nSimple Hello World program used.\n~~~\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"Hello World!\")\n    i := 101   // Where I put the breakpoint\n    fmt.Println(i)\n}\n~~~. @roblourens Version: 0.11.0-alpha\n@erm0l0v Restart MacOS X does not change anything.\nI will try manual installation of delve instead of brew.\n. ",
    "roblourens": "This seems kind of far from the original issue so hopefully I'm not missing a thread. @erm0l0v that error message could not launch process: could not fork/exec would probably be coming from your code, so I don't know why it would be working via command line but not vscode. Could that be the case?\n@ThreeBearsDan Do you see that exact error message or do you just share the issue that it works via CLI but not vscode? Can you post the console output?\n@danbricedatascience What's your delve version? That was a delve bug at some point at least - https://github.com/derekparker/delve/issues/378. Is anyone debugging with stdin working while using Delve? Using delve in a terminal, it's not listening to the terminal's stdin because that's how I'm sending commands to Delve. If I start Delve in headless mode, the server doesn't use stdin/out. I might be wrong but I'm not sure this is actually possible right now.. I think so\n. Ran into this too right after installing go - can we provide a better error message?\n. Is this still a problem for ya'll?\n. I don't know if this is true for everyone but it sounds like a couple of you can open two copies of a file with its path displayed differently. @hatuan if you click on the first breakpoint to open the file, and hover the mouse over the tab title, can you compare the path in the tooltip to the path for the second breakpoint?\n. Can you paste what you see in the debug console when you start debugging and try to set a breakpoint?\nAnd are there any errors in the devtools console?\n. Maybe you said this above, but are you able to debug and set breakpoints with delve alone?\n. It looks like people are seeing this in a few OS's, and I don't have an EC2 account. I did try it again with the same Go version as you in Ubuntu, but still not seeing an issue. I'm not sure what else to say - there is a bunch of logging in the debug adapter that would be very useful to see, but you need to clone and build the extension to enable it. If you have the time for that I could help you set it up. Otherwise, the only thing I can think of is changing it to write those logs while debugging. We do something similar for vscode-chrome-debug. Not sure when I'd have time for that though.\n. @baloodevil @shamimafridi If you guys are having trouble with the Debugger for Chrome extension, please file an issue here - https://github.com/Microsoft/vscode-chrome-debug\n. @bpicolo That is a different extension - https://github.com/felixfbecker/vscode-php-debug/issues\n. @ramya-rao-a If you keep the notes in changelog.md, it will show up in the extensions view in vscode 1.6+. You can see how this looks for the Chrome extension. \n. I can repro this, and confirm that it works correctly with delve. So maybe we can do whatever delve does.\n. That's a very old version of node and npm. You'll need to use something more recent.. @YCF That would probably be a different issue. The debug process should have always been killed. This is for other processes spawned by the program.\nCan you open a new issue and tell us your OS, vscode version, etc?. It should work. The code that kills the processes is\nterminateTree() {\n    for cpid in $(/usr/bin/pgrep -P $1); do\n        terminateTree $cpid\n    done\n    kill -9 $1 > /dev/null 2>&1\n  }\nI don't know if there's something particular about archlinux that would make this not work.. This would imply that Delve returned a state of null when telling it to step. I'm not sure why that would happen. @ramya-rao-a I could add a null check, in case it's an error that can be recovered from?. \"evaluateRequest\" is in the callstack, which implies that you either have a watch, or you typed something in the console. Did you do one of those?\nSeparate issue but I noticed that evaluateRequest assumes that you have hit a breakpoint when it's run, and it errors if you have a watch or eval something in the console before the first time a breakpoint is hit. We could do something about that.. It doesn't send an evaluateRequest for that, so I'm not sure where else it would have come from.. Yes, I think in general we don't handle setting BPs while the process is active very well. The solution might be that when a breakpoint is set and Delve isn't paused, we send a SIGINT first, set the bps, and continue. Would have to experiment to say for sure.. Other debug adapters allow you to override the timeout, and it would be easy to do that (I don't know whether there's a smarter way to detect when the build is complete). LGTM. This seems pretty straightforward, so it doesn't seem like the delay to start up govendor is worth it?\n. I think this is the same as https://github.com/Microsoft/vscode-go/issues/438\n. In this screenshot, it looks like the debugger just isn't paused, I don't see the problem.\n. It would be very helpful to have a sample repro project, if possible.\n. Thanks for the repro project, but this actually works for me. I have the same versions of Delve and Go on Sierra.\nWhat does the debug console say? Are you able to debug it on the command line using dlv test greetings?\n. Also we updated the extension yesterday. I don't know if anything relevant to debugging changed, but are you using the latest version?\n. Do you have any go. user settings?\n. Ok, none of those look relevant... no errors in the Help > Developer tools? I'm not sure what else to suggest. I hope to add some logging that would let us know what delve is doing and what the adapter is doing in these cases.\n. It looks like the debugger paused and said \"i'm paused at thread with id=0\" then vscode asked for a list of threads, and it did not return thread 0.\nThis all comes from Delve, can you debug via delve on the command line?\n. @mattetti I'm curious whether this will repro in 1.7, which you can try with the Insiders build, or it will be released this week. There was a lot of work done on the debugging code to support some new scenarios. Maybe something different will happen at least.\nI was playing with a debug adapter trying to get it to produce the same error in vscode, but I couldn't, since it seems like it should fail earlier in this scenario...\n. Does that happen if you don't have any breakpoints set when you launch?. Also the file is saved, where the test plan says it should be unsaved.\n. @ramya-rao-a pointed out that this is because you need a tool named 'diff' on the path to use  gorename\n. Thanks for the repro! I see the same. I also see weird stuff when debugging with Delve, which we use. Maybe some issue with debugging that particular library.\n\n. This actually worked a few times, then I made a change to the program, and it stopped working again.\nBetter repro if I continue instead of step -\n\nI don't know what this implies. Is it just breaking on some error?\n. Right I also see it run successfully when it isn't being debugged. I'm not sure whether it would be a problem with Delve, or something else that happens differently when the program is being debugged, vs run normally.\n. Related: \nType import \"math\", save.\nDelete the import, don't save.\nType math, and see that it's missing from autocomplete.\n. Related: \nType import \"math\", save.\nDelete the import, don't save.\nType math, and see that it's missing from autocomplete.\n. I see the problem. Is this only broken for using development versions of Go, or are there other cases?\nDo you know whether there's any way to get a version number out of a dev build?\n. The failures look unrelated\n. Didn't notice the lint, fixed that.\n. I just merged that PR, it wasn't in master 7 hours ago\n. @GordonSmith Did you run npm install? Does that module exist?\n. The problem is this commit, which pulls in 'window' from the 'vscode' module - https://github.com/Microsoft/vscode-go/commit/c35b419585d403a4cd042856afaf46051ae389cf, which isn't available from the debug adapter. The import was there before, but since it was only pulling in types, typescript didn't output the require.\nWe need a total separation between code that runs in the debug adapter, and code that runs in the extension host (or very careful sharing).\n. No, I take that back sorry - the problem was https://github.com/Microsoft/vscode-go/commit/49388254f9467e0df71354770d3292d0fb7dd150 which pulls in util.ts, which shouldn't be in the debug adapter. I'll make a PR.\n. Uhh... I can fix the crash but I'm just getting could not launch process: could not get thread count from delve right now. It worked earlier, on sierra, and the same go/delve versions.\n. No\n. Node debugger checks whether \"program\" exists, and fails if not.\n. I don't know what delve is doing though\n. FYI @ramya-rao-a \n. threadsRequest is sent only after hitting a breakpoint, which would imply that delve worked well enough to tell us that it hit a breakpoint. Not sure why that would happen.. Actually if you have stopOnEntry enabled, it would be sent very early, do you?. Why did the 'next' request fail? That seems relevant. Also, what version of MacOS do you have? I haven't used it on a Mac in awhile since Delve was broken on 10.12.x, but it looks like it's usable now, so I can try that out this week: https://github.com/aaronhackney/delve_on_mac. You said it worked but the log says\n(dlv) next\nCommand failed: no G executing on thread 0\nwhich seems wrong, doesn't it? And since the extension does nothing but pass requests on to delve, we want to understand the behavior of Delve here. \nI don't doubt that there's an issue, and thanks for helping us understand it.. Delve, which we rely on for debug support, is broken on that version of mac os. Issue here - https://github.com/derekparker/delve/issues/645\n. I don't understand what you mean\n. Right. We need delve (or MacOS) to fix their issue.\n. It sounds like you just want to run code (without debugging it) from vscode, to avoid using Delve?\nThere's no way to do that now, without starting it from the terminal. node-debug does have that option though, through the launch config option noDebug, and maybe we could add it to go-debug too.\n. Hm, not sure what to say, I haven't seen that before. Glad it's working now!. Hm, not sure what to say, I haven't seen that before. Glad it's working now!. I don't understand, you're saying that sometimes you need one set of args, and sometimes you need another? I'd suggest two launch configs, with the two sets of args.. What version of delve? I don't repro this on Windows.. For me, it always prints \"API server listening at...\" whether or not showLog is set, so that's what kicks it off. Maybe there's a case where this doesn't happen.. Our json-rpc2 typings are not official and not published anywhere. @leaxoy you could try to publish it to DefinitelyTyped if you want to get it from @types, but I have no idea if it's complete or high quality enough to do that.\nInterestingly, this repo is the first result if you google \"json-rpc2 typings\".. It works for me in Ubuntu. Do you have any other extensions installed?\nWhere are you seeing that error? Is there a stack trace or anything associated with it? Thanks.. Where are you seeing this error?. Can you open the developer tools (under the help menu) and show what's in the console there?. Missing a trailing newline is the key. I can repro it too in that case. Thanks! I think the stack is actually unrelated.. Looks like an issue in vscode, I filed https://github.com/Microsoft/vscode/issues/17424. Right, but we just use Delve for debugging and we'd need them to implement it.. Right, since goPath is shared with goDebug, it can't depend on the vscode module.. Thanks @f0zi!. Debugging it, I see that we send an initial StoppedEvent, then vscode asks for the list of threads. We call ListGoroutines, Delve returns an empty list that we send back to vscode. Then that's it. It seems like Delve doesn't want to do anything unless we send a Continue command at startup.. Probably not. It's up to the debug adapter to move the breakpoint if it's not in a valid spot. We can see what Delve is doing here and check whether we can do something else to make it not break, or file a bug on Delve.. Right, there is actually no easy way for a debug adapter to write to the Output channel, and I think that what you do currently is the right thing to do.. Are you sure you didn't just check out CRLF line endings? They are LF on my machine. @fasa123 I see it now, yeah it was published with CRLF endings. But when I fix that locally, it actually still reproes for me... . Actually, it wasn't working when I just resaved the file with LF, but I deleted and recreated it with LF, and now it works. That's weird. Also, doing the opposite (running out of sources, changing LF to CRLF) broke it in the same way. So I think this is likely the problem.. @fasa123 Did you also have to chmod +x terminateProcess.sh?. To make this work I have to chmod +x, and fix the line endings. When I publish an extension with a .sh from Mac, it comes out with the x flag automatically. Apparently that's not the case from Windows, so maybe we just have to always publish from mac/linux?. Great! Thanks for pointing out the line ending issue.. It also logs traffic to and from the debug adapter. If you don't want to see it, those messages are \"Verbose\", so you could use a higher log level for your own messages, then set the log level to exclude Verbose messages.\nErrors are red, warnings are yellow, everything else is the default color. If you really want to, you should be able to wrap your log messages in color escape codes (https://www.npmjs.com/package/color) and those should be applied to the console.. @michaelmello I don't understand, it doesn't look like vscode-go was applying a limit here. It's just tacking on the warning if the string is truncated by delve.\nPreviously we return v.value + extra thing. Now you return v.value. How does this help?. Would be great if you can figure out whether we can override that max length! Closing this for now.. You need to send a TerminatedEvent when 'go run' closes. Normally it looks like we send this when delve tells us that the process has exited.. Otherwise, looks good. Thanks for the repo. This is from https://github.com/Microsoft/vscode-go/pull/742, which I don't think is quite right, and needs unit tests. \nI don't use Docker often. @willseward what's the correct remote path to main.go? Is it /go/src/myapp/main.go (from the console log)? If so, where does \"remotePath\": \"/app\" come from?. > EDIT: I think the errant path may just be residual of the build process.\nI'm not sure what you mean by that. Can you explain what the dockerfile is doing with that path?. Looks like we haven't implemented stack trace paging (but probably we should just hardcode a number larger than 20). VS Code asks for 20 frames at first, and we pass that along to Delve to get 20 frames\nhttps://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L574\nThen VS Code can ask for the next page of frames 20-40, but it looks like there probably isn't a way to ask for that from Delve. So, someone could change that line to ignore args.levels from VS Code, and simply return 50 frames (or something).\nHowever, someone would need to test it and make sure that it doesn't crash or slow down when exchanging info from 50 frames. Another option would be getting lots of frames from Delve, and implementing paging just between VS Code and the debug adapter.. When debugging starts, vscode sends a ThreadsRequest. goDebug.ts sends a ListGoroutines request to Delve, but Delve never responds. So then when you click Pause, vscode doesn't know which thread to pause, and never sends the pause request over. I suppose we need to figure out whether we're caling ListGoroutines at a bad time, whether it's a Delve bug, or if we should just add a timeout for it.. And as for setting the bp after launch, I don't know whether it should be possible to set a BP when Go is in a loop like that. I can't do it with Delve at least.. Yeah, possibly.. Looks ok to me. Looks ok to me. Looking at the code, it's not obvious whether we can do it without evaluating all the variables like the watches window does. I'm not sure what other info we can get out of Delve. Would have to investigate some more.. Looking at the code, it's not obvious whether we can do it without evaluating all the variables like the watches window does. I'm not sure what other info we can get out of Delve. Would have to investigate some more.. >Once clicked on \"Start Debugging\", the program is spawned on the Remote server, and it simply proceeds until it finishes.\nSo it sounds like it successfully attaches, but isn't able to set the breakpoint?\nCan you run with \"trace\": true and upload the log here?. > BUT - Once Clicking on \"Start Debugging\" - nothing happens on the server's side.\nNot sure I understand what you mean by \"nothing happens on the server's side\". \n\nWhen debugging is stopped in VSCODE - the remote server terminates.\n\nThis may be expected, we might ask it to stop running when the stop button is clicked. Probably should cleanly disconnect. Not sure if there is an existing issue for this.. The multiclient feature is interesting. Even without that, I remember an issue that stopOnEntry doesn't really work, for the same reason - debugState is never initialized. I'm not sure whether dlv gives us a way to initialize it in this case.. Verified!. \n. It's just the prompt to update one of my outdated go tools. It's just the prompt to update one of my outdated go tools. \n. Will it still prompt later if it gets activated when not on a go file?. Yeah that makes sense. What does it actually do? Seems like it's just running the same command to kill the process, but possibly more than once?. I wouldn't merge a change that I don't understand, even if it works.. All you have to do is return supportsStepBack: true from the Initialize request, and the step back buttons will appear in the debug widget.. @isidorn . Looks like this is removing a \"\" entry - do you know why that exists? Should this slice be a safer check? Maybe roll it into the filter?\n. 8... '/vendor/'.length?\n. Would it be worth it to get rid of this check for perf? It's only applied to vendored packages so maybe it's not a big deal but do people have 100s of vendored packages? You could make pkgs a Set, or do other things to de-dupe.\n. Can packages not include '/vendor/' somewhere else in the name? Could I 'go get github.com/foo/vendor' then this might be a false positive.\n. LGTM\n. camelCase?\n. executeCommand returns a promise - don't know if it matters though\n. Is there definitely no case where a go file can have some other extension?\n. Yeah I searched around and couldn't find any\n. A comment about the output you expect and what you want to transform it to will make this easier to debug if it changes some day.\n. Extract this string? And i'm not sure 'Generated Test' should be capitalized.\n. Will they still be in the right order within the 'a' and 'z' groups, or should it be like 'a' + item.name?\n. Can the user or package name have '.v'? You could use lastIndexOf, or more regex cleverness.. Capital P?. Or maybe gopath is like one word, either way. Can we not show the actual messages, 'can't load package: import cycle not allowed' etc?. Oh man I did that thing again where I typed that this morning before standup but didn't submit the review. Just had to say that since we talked about this at standup.. Could be declared inside the function?. Can you just return \\ if the path contains a \\?. I'm not sure the (?! ) is necessary. Are you trying to skip an escaped space? I don't think there will be a literal backslash as an escape character at this point, right?. Is that true, since foo != bar? Isn't it like /home/foo1/go/src/bar will match /home/foo2/go/src/bar because the two paths will be trimmed to /home/foo1 and /home/foo2.. How about this, based on how we do it for node debugging. The program field isn't used for remote debugging, right? So instead of specifying the program, the user could specify the final 'localPath' to match 'remotePath'. Then they are responsible for doing this in their launch config - finding the common path of the two.\nWould that end up being more confusing? I'm not opposed to this, just thinking about it.\nOther debug adapters have 'launch'-type and 'attach'-type configs, where 'launch' is when it has to start executing the binary, and 'attach' is when it has already been started and is in debug mode. We could introduce that concept here too. Then the 'program' field would not be allowed for remote debug scenarios, just 'remotePath' and 'localPath' to provide the mapping.. It would just be simpler. But I guess if the path is like C:/foo/bar you still want to return a backslash. Yeah, I think that escaped characters will have been resolved by this point so when you have a\\ b you'll have a string which contains a, literal space, b. Just making sure I understand the scenario.. Why not resolve ~ on windows?. Windows has it too now - ~ is expanded (only in powershell), and os.homedir() returns the right thing.. That's not a bad idea either, but I don't want to make assumptions like that. I think that for now, we should keep the current approach with your changes.. You can use a fat arrow function (code => { ... }) instead of function, then this will be correct. Why 'failed to continue'?. You might want to put the slash before the ${} so they can replace main.go without removing the slash.. Maybe could leave a \\r after the split - you can split on /\\r\\n|\\n/ or trim. Or like goConfig['buildOnSave'] + '' for these if they have to be a string.. Can you detect whether the tool is installed earlier, before the user has entered tag names and everything?. Is there some option for this tool that could make it output absolute paths?. You might not want to use \\w here because it might not match all characters that are valid in a path, like .. Maybe \\S+ (non whitespace char) or just .+ because it's searching between \\t and _test already?. It looks like you moved this code up a level in the promise chain (see the indentation). Was that necessary? If not, can you leave it the same?. This is supposed to be /src/ in the goroot, right? It could match a different src, like /Users/src/goroot/src/.... You use path.join above and .join(this.localPathSeparator); here, should it be the same?. I think the nulling out should be done in cancelCurrentRunningProcess(). I think there could be a race condition here. If this happens\n\ncancelCurrentRunningProcess() kills the process\n'close' event is queued but not handled yet\ncurrentRunningProcess is immediately assigned to a newly spawned process\n'close' handler runs and nulls out the prop, but the process is actually still running.. \n",
    "skeleton1231": "I have the same problem\nwork well on Terminal\n\nbut still fail on vscode\n\nanyone help?\nI use brew install delve. @ramya-rao-a \nThanks!\nI solved the problem, here is my step:\n\nbrew uninstall delve\n2.delete the keychain for delve\n3.Manual install the delve through the instruction (https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md)\n\n\n. @ramya-rao-a \nsee #717, I solved the problem. thanks!. ",
    "ppone": "If there is an error in the code I see red squiggles, so yes if the code has errors I see them in the IDE.\nI was under the impression it would generate a binary with Go Build, but your saying that it is working correctly as Build on Save lets you know if there are errors.  \nIt would be great if \"Go for Visual Studio Code\" could include those tasks like Go Build, etc like GoSublime on SublimeText.\nOff topic, VS Code is fast.  It is up there IMO with SublimeText.\nThanks,\nParag\n\nOn Nov 18, 2015, at 3:59 PM, Luke Hoban notifications@github.com wrote:\nThe build on save should report compilation errors as red squiggles and in the bar at the bottom left of the screen. Are you not seeing errors being reported?\nThe build on save does not produce a binary or any other artifact. You can use VS Code's tasks to hook up a build command to run go build, go install, go test, etc. See https://code.visualstudio.com/Docs/editor/tasks https://code.visualstudio.com/Docs/editor/tasks.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Microsoft/vscode-go/issues/21#issuecomment-157878185.\n. The first option I think will the best for users.\n\nThe beauty of a ideal IDE is that CMD+Shift+P would all of the Go tooling, such that you never need to leave the IDE.\n\nOn Nov 18, 2015, at 4:28 PM, Luke Hoban notifications@github.com wrote:\n@ppone https://github.com/ppone Makes sense. Let's keep this issue to track adding more integration with go build, go install, go run and go test.\nThere are likely two ways to include these:\nAdd new commands to the command palette for Go: Build, Go: Test, etc. which operate either in the context of the opened workspace or the current file?\nProvide a command which automatically generates VS Code tasks for these in a .vscode/tasks.json in your current workspace.\nThe second is more native to VS Code, but likely the first is a convenient shortcut to this.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Microsoft/vscode-go/issues/21#issuecomment-157885286.\n. \n",
    "ahmetb": "+1 for first option\n. +1 I suggest https://godoc.org/golang.org/x/tools/cmd/goimports\n. perfect!\n. +1\n. Yeah I can repro 100%. I'm not shutting down vscode, I am just stopping debugging and debug is still there. \n. Hmm this started to work mysteriously now.\n. @newhook hmm the readme doesn't mention goimports but interestingly I started to get the error:\n\nI don't have goimports installed yet.\n. Agreed, can be better. If you try  GoSublime, it actually just prints the method signature and then allows you to circle on the parameters with Tab key.\nIdeally, I'd expect this completion to complete the left side of the call as well by adding ,err if applicable (and just add an if err != nil check to the next line if that's the case).\n. ah yeah I was that offline feedback in the issue. thanks @newhook \n. @samherrmann @ramya-rao-a  Is there a reason why this is implemented as an environment variable and not a configuration key in user's vscode profile? The way I see it, people run vscode as code . from the terminal and you can't expect them to have this ENV key set at all times. (I certainly do not wish to be in that business.)\nI think a config key would be a \"less ephemeral\" solution and would preserve between launches. For instance, I manually install all go tools to my ~/gotools folder, I wish I could just set it to a vscode preference key and forget about it forever and vscode would handle things for me (such as perhaps periodically updating these tools).\n. Relaunching vscode second time and hitting \"Analysis Tools Missing --> Install\" worked just fine though...\n. Just did another clean GOPATH on a different machine and got a different set of  errors:\n\n\nSee output\n\n\n\n```\ngithub.com/lukehoban/go-outline (download)\ngithub.com/lukehoban/go-outline\ngithub.com/golang/lint (download)\nFetching https://golang.org/x/tools/go/gcimporter15?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/gcimporter15?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/gcimporter15\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/gcimporter15?go-get=1\nget \"golang.org/x/tools/go/gcimporter15\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\n# cd /Users/alp/workspace/gopath-go-httpbin/src/golang.org/x/tools; git pull --ff-only\nFrom https://go.googlesource.com/tools\n * [new branch]      master     -> origin/master\n * [new branch]      release-branch.go1.2 -> origin/release-branch.go1.2\n * [new branch]      release-branch.go1.3 -> origin/release-branch.go1.3\n * [new branch]      release-branch.go1.4 -> origin/release-branch.go1.4\n * [new branch]      release-branch.go1.5 -> origin/release-branch.go1.5\n * [new branch]      release-branch.go1.6 -> origin/release-branch.go1.6\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull  \n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/ master\n\npackage golang.org/x/tools/go/gcimporter15: exit status 1\nexec error: Error: Command failed: go get -u -v github.com/golang/lint/golint\ngithub.com/golang/lint (download)\nFetching https://golang.org/x/tools/go/gcimporter15?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/gcimporter15?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/gcimporter15\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/gcimporter15?go-get=1\nget \"golang.org/x/tools/go/gcimporter15\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\n# cd /Users/alp/workspace/gopath-go-httpbin/src/golang.org/x/tools; git pull --ff-only\nFrom https://go.googlesource.com/tools\n * [new branch]      master     -> origin/master\n * [new branch]      release-branch.go1.2 -> origin/release-branch.go1.2\n * [new branch]      release-branch.go1.3 -> origin/release-branch.go1.3\n * [new branch]      release-branch.go1.4 -> origin/release-branch.go1.4\n * [new branch]      release-branch.go1.5 -> origin/release-branch.go1.5\n * [new branch]      release-branch.go1.6 -> origin/release-branch.go1.6\nThere is no tracking information for the current branch.\nPlease specify which branch you want to merge with.\nSee git-pull(1) for details.\n\n    git pull  \n\nIf you wish to set tracking information for this branch you can do so with:\n\n    git branch --set-upstream-to=origin/ master\n\npackage golang.org/x/tools/go/gcimporter15: exit status 1\ngithub.com/lukehoban/go-find-references (download)\ngithub.com/lukehoban/ident (download)\ngithub.com/rogpeppe/godef (download)\ngithub.com/rogpeppe/godef/go/types\ngithub.com/lukehoban/ident\n# github.com/lukehoban/ident\n../../lukehoban/ident/ast.go:27: not enough arguments in call to types.ExprType\n../../lukehoban/ident/findReferences.go:57: not enough arguments in call to parser.ParseFile\n../../lukehoban/ident/findReferences.go:74: not enough arguments in call to parser.ParseDir\n../../lukehoban/ident/lookup.go:14: not enough arguments in call to parser.ParseFile\n../../lukehoban/ident/lookup.go:50: not enough arguments in call to types.ExprType\nexec error: Error: Command failed: go get -u -v github.com/lukehoban/go-find-references\ngithub.com/lukehoban/go-find-references (download)\ngithub.com/lukehoban/ident (download)\ngithub.com/rogpeppe/godef (download)\ngithub.com/rogpeppe/godef/go/types\ngithub.com/lukehoban/ident\n# github.com/lukehoban/ident\n../../lukehoban/ident/ast.go:27: not enough arguments in call to types.ExprType\n../../lukehoban/ident/findReferences.go:57: not enough arguments in call to parser.ParseFile\n../../lukehoban/ident/findReferences.go:74: not enough arguments in call to parser.ParseDir\n../../lukehoban/ident/lookup.go:14: not enough arguments in call to parser.ParseFile\n../../lukehoban/ident/lookup.go:50: not enough arguments in call to types.ExprType\ngithub.com/rogpeppe/godef (download)\ngithub.com/rogpeppe/godef/vendor/9fans.net/go/plan9\ngithub.com/rogpeppe/godef/go/token\ngithub.com/rogpeppe/godef/go/scanner\ngithub.com/rogpeppe/godef/go/ast\ngithub.com/rogpeppe/godef/vendor/9fans.net/go/plan9/client\ngithub.com/rogpeppe/godef/vendor/9fans.net/go/acme\ngithub.com/rogpeppe/godef/go/parser\ngithub.com/rogpeppe/godef/go/printer\ngithub.com/rogpeppe/godef/go/types\ngithub.com/rogpeppe/godef\ngithub.com/nsf/gocode (download)\ngithub.com/nsf/gocode\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nParsing meta tags from https://golang.org/x/tools/cmd/gorename?go-get=1 (status code 200)\nget \"golang.org/x/tools/cmd/gorename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/cmd/gorename?go-get=1\nget \"golang.org/x/tools/cmd/gorename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/buildutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/buildutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/buildutil?go-get=1\nget \"golang.org/x/tools/go/buildutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/refactor/rename?go-get=1\nParsing meta tags from https://golang.org/x/tools/refactor/rename?go-get=1 (status code 200)\nget \"golang.org/x/tools/refactor/rename\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/refactor/rename?go-get=1\nget \"golang.org/x/tools/refactor/rename\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/ast/astutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/ast/astutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/ast/astutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/ast/astutil?go-get=1\nget \"golang.org/x/tools/go/ast/astutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/loader?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/loader?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/loader\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/loader?go-get=1\nget \"golang.org/x/tools/go/loader\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/go/types/typeutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/types/typeutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/types/typeutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/types/typeutil?go-get=1\nget \"golang.org/x/tools/go/types/typeutil\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/refactor/importgraph?go-get=1\nParsing meta tags from https://golang.org/x/tools/refactor/importgraph?go-get=1 (status code 200)\nget \"golang.org/x/tools/refactor/importgraph\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/refactor/importgraph?go-get=1\nget \"golang.org/x/tools/refactor/importgraph\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools/refactor/satisfy?go-get=1\nParsing meta tags from https://golang.org/x/tools/refactor/satisfy?go-get=1 (status code 200)\nget \"golang.org/x/tools/refactor/satisfy\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/refactor/satisfy?go-get=1\nget \"golang.org/x/tools/refactor/satisfy\": verifying non-authoritative meta tag\ngolang.org/x/tools/go/buildutil\ngolang.org/x/tools/go/ast/astutil\ngolang.org/x/tools/go/types/typeutil\ngolang.org/x/tools/refactor/importgraph\ngolang.org/x/tools/go/loader\ngolang.org/x/tools/refactor/satisfy\ngolang.org/x/tools/refactor/rename\ngolang.org/x/tools/cmd/gorename\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns?go-get=1\nsourcegraph.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\nFetching https://golang.org/x/tools/go/ast/astutil?go-get=1\nParsing meta tags from https://golang.org/x/tools/go/ast/astutil?go-get=1 (status code 200)\nget \"golang.org/x/tools/go/ast/astutil\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/go/ast/astutil?go-get=1\nget \"golang.org/x/tools/go/ast/astutil\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns/returns?go-get=1 (status code 200)\nget \"sourcegraph.com/sqs/goreturns/returns\": found meta tag main.metaImport{Prefix:\"sourcegraph.com/sqs/goreturns\", VCS:\"git\", RepoRoot:\"https://github.com/sqs/goreturns\"} at https://sourcegraph.com/sqs/goreturns/returns?go-get=1\nget \"sourcegraph.com/sqs/goreturns/returns\": verifying non-authoritative meta tag\nFetching https://sourcegraph.com/sqs/goreturns?go-get=1\nParsing meta tags from https://sourcegraph.com/sqs/goreturns?go-get=1 (status code 200)\ngolang.org/x/tools/go/ast/astutil\nsourcegraph.com/sqs/goreturns/returns\ngolang.org/x/tools/imports\nsourcegraph.com/sqs/goreturns\n```\n\n\n. This is still very much an issue.. omg sorry I thought I'm in the vscode repo.\n. I think the ideal solution is to install these tools permanently at some path that can be shared across projects, outside $GOPATH.\n. I use the latest of everything. I shouldn't be changing any settings because I'm using all the default settings for go.* and I can still repro. I suggest you to try reproing this.\n. @ramya-rao-a much appreciated. I wish I had a consistent way of reproing this as well... Yesterday this bug basically ate some of my code lines as well. I had a code block like this:\n// functionName comment bla bla bla\n// more bla bla bla\n// even more bla bla bla\nfunc functionName() {\n    ...\nand when I pasted this to a new file and saved, I realized only the line // even more and the rest was there because there was an import statement written and it replaced first few lines of my comment block. Just another symptom really, maybe it's the same bug, maybe not.\n. @ramya-rao-a I'm having trouble reproing this lately, sorry. We can close.\n. @ramya-rao-a since I realized it's not just me, perhaps we should have an ability to assign shortcut keys to these tasks?\n. Thanks, I can't repro again either for some reason. Must be an environment issue on my end. Closing.. Thanks so much.. @ramya-rao-a Has there been a release since your patch? I'm still seeing the original behavior.. Got it, I just updated and can confirm ~ works. It's sufficient.. Actually saving the file does not fix the problem, I was wrong:\n\n. I guess I should just copy from there, thanks.. @ramya-rao-a great, thanks!. NVM this was happening because one of my tests had a side-effect causing other test to fail. Sorry for the wrong alert.. Same issue here, when I use vscode-go with vgo projects it got unbearably slow to use intellisense (~10 seconds and mostly results in failure).\ngodef takes ~2 seconds for me (is it normal?):\n```\n$ time ~/gotools/bin/godef -t -f main.go -o 6037\n/Users/ahmetb/go/pkg/mod/google.golang.org/grpc@v1.17.0/health/grpc_health_v1/health.pb.go:174:6\nNewHealthClient func(cc *ClientConn) HealthClient\n~/gotools/bin/godef -t -f main.go -o 6037  0.68s user 0.91s system 78% cpu 2.028 total\n``. @ramya-rao-a https://github.com/rogpeppe/godef/issues/114 . Yeah there's no $GOPATH set and I didgo clean -modcache.. @ramya-rao-a The only go.* setting I customize is\"go.toolsGopath\": \"~/gotools\"` and it looks like many folks are experiencing similar stuff so it's probably not the settings.\nI've tried to watch ps output as I refactor code, some stuff I see:\n\non save\n/Users/ahmetb/.homebrew/bin/go test -c -o /var/folders/h7/n46zg3md4l57vzsgxcs355hw00dl55/T/vscode-goSZbkWu/go-code-check .\n/Users/ahmetb/.homebrew/bin/go vet ./...\non intellisense\n/Users/ahmetb/gotools/bin/gocode-gomod -s -sock unix -addr 127.0.0.1:37373\n/Users/ahmetb/gotools/bin/gocode-gomod -f=json -builtin -ignore-case autocomplete /private/var/folders/h7/n46zg3md4l57vzsgxcs355hw00dl55/T/tmp.B1MZsZFnGe/internal/probe/tls_test.go. @ramya-rao-a I think I probably shouldn't be disabling anything. I strongly recommend you reset all settings and follow the repro I provided in the original post.\n\nIt's not reasonable to expect an user rolling with the default settings to know so much detail about the tools used by the vscode-go extension. I personally have no desire to learn more about them, they should just work. :) . Here's very small repro. This project has nothing but an empty go.mod and \"os\" import. Getting the method list for os.* intellisense took 3.5 seconds.\n\n. ",
    "MattMattV": "Why not providing the two options ? Some users coming from Sublime Text will find the first option more intuitive, and the second will be more useful for those who master VSCode like pros !\n. Maybe when you invoke the command, a second menu should ask you what to build when it's ambigous \n. I have the same problem as you, all the env set up, all the env vars set but vscode keep saying me \"goxxx is not installed please run...\"\nI suggest you to modify the path you supply in your user config file from \"go.gopath\": \"F:\\Data\\Projects\\GO\\src\" to \"go.gopath\": \"F:\\\\Data\\\\Projects\\\\GO\\\\src\", backslashes need to be escaped ! (:\n. That didn't resolved the problem, I'm. in the same case, string is formatted as it should but it's not working..\nShould the go.gopath points to the directory where all the utilities are installed ?\n. I'm using W10 Pro\nThis is the result of go env : \nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=E:\\GoWorkspace\nset GORACE=\nset GOROOT=E:\\Go\nset GOTOOLDIR=E:\\Go\\pkg\\tool\\windows_amd64\nset GO15VENDOREXPERIMENT=\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\nResult of : Go: current gopath :\n    No handler found for the command: 'go.gopath'\nThanks for caring !\n. 1) WIth a file open Go: Current GOPATH returns : Current GOPATH:E:\\GoWorkspace\n2) GOPATH, and GOROOT are set up system-wide, not in a command shell\n. Yes, \"Analysis tools missing\" was on the bottom, but when I clicked on it and accepted to install missing softwares, the output was blocked on \ngithub.com/lukehoban/go-outline (download)\ngithub.com/lukehoban/go-outline\n. For some unknown reasons, now it's building fine, I don't know how...\n. ",
    "pootow": "How to vote up this feature?\n. ",
    "stevekuznetsov": "I'm not sure smart defaults are possible with minimal effort - for instance, setting $GOPATH is often a hassle. In OpenShift Origin we have to include three things: our source, our build output files, and our stored, version-locked dependencies that we embed. I'm not sure that figuring those paths out for any arbitrary project would be easy.\n. ",
    "klaidliadon": "It would be useful also add go generate ./...\n. If you have a black file and start writing p the editor should suggest package whatever using the package name or the folder name, in the same way that fu suggests func.\nSelecting the suggestion insert the package followed by 2 newlines.\n. Suppose that | is the cursor and I have r.Lo|()\nSince the round parenthesis are already there, when I choose Lock from the suggestions the line becomes  r.Lock()() instead of r.Lock()\nhttps://giphy.com/gifs/2yzHKEmXsaNQkyqrLv. ",
    "ITSecMedia": "Can't wait until the new features are added.\n. +1 Same here\n. Looks fine here again too. Windows x64  / VSCode 1.3.1\nThank you!\n. Also trouble on Windows 10 x64 & VSCode 1.7.1 + latest vscode-go \ngofmt -w    doesn't work anymore.\nI have to use the Terminal to manually call gofmt on the files to get the job done.\nPopup Menu Format document doesn't work either.\n. On my windows machine the setting [ \"go.useDiffForFormatting\": false, ] shows no effect.\ngofmt and goreturns both don't do the -w formatting inside VSCode,\nBut when I call gofmt -w main.go in VSCode terminal, the file gets reloaded / formatted.\nMy settings are \n\"go.useDiffForFormatting\": false,\n    \"go.buildFlags\": [],\n    \"go.buildOnSave\": true,\n    \"go.buildTags\": \"\",\n    \"go.coverOnSave\": true,\n    \"go.formatFlags\": [\"-w\"],\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n    \"go.gocodeAutoBuild\": true,\n    \"go.gopath\": \"D:\\\\go\",\n    \"go.goroot\": \"C:\\\\Tools\\\\go\",\n    \"go.lintFlags\": [],\n    \"go.lintOnSave\": true,\n    \"go.lintTool\": \"golint\",\n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"go.vetFlags\": [],\n    \"go.vetOnSave\": false,\n. @ramya-rao-a   I appreciate hint #583 !\nI haven't seen that one, been busy all day long ... :( \nIt's working now. \ud83d\udc4d \nThank you very much.\n. Sorry have to close the issue, because there is no issue.\nFor some reason the setting  \n\"go.useDiffForFormatting\": false, \nwas changed automatically by an update, \nobviously  as it wasn't me who changed the flag.\nI haven't noticed that.. @AdiedX Thank you, that solved my problem!\nI'm using Windows here and useLanguageServer is not available but the setting needs to be activated to get the broken \"Go to Definition F12\" working again while using \"go.docsTool\": \"gogetdoc\",. I thought I'm the only one with this problem that suddenly came up.... ",
    "mohitranka": "Any ETA on this functionality to be available in the stable?\n. ",
    "fervic": "... and another issue for go test :wink: \n. Sorry, didn't know go test support is already there, saw it mentioned in\nthis issue's subject but didn't see it in the by-command ticket breakdown\nof the previous comment.\nOn Apr 14, 2016 6:33 PM, \"Dan Mace\" notifications@github.com wrote:\n\n@fervic https://github.com/fervic\n... and another issue for go test\nIs there some testing need not met by the existing go test support?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/21#issuecomment-210222916\n. \n",
    "covrom": "To build package on current opened file path, add this build task:\n{\n\"version\": \"0.1.0\",\n\"isShellCommand\": true,\n\"showOutput\": \"always\",\n\"command\": \"go\",\n\"echoCommand\": true ,\n\"options\": {\n    \"cwd\": \"${fileDirname}\"\n},\n\"tasks\": [\n    {\n        \"taskName\": \"build\",\n        \"args\": [\n            \"build\",\n            \"-x\"\n        ],\n        \"isBuildCommand\": true,\n        \"suppressTaskName\": true\n    }\n]\n}. ",
    "ShineSmile": "@covrom I tried to change  to current opened file's directory several times. I had considered cwd is readonly.\nThx.. ",
    "gmlexx": "+1\n. ",
    "rvdwijngaard": "is this somehow related to this config? \n\"go.gopath\": \"/Users/lukeh/go\"\nIn my case GOPATH is set as an environment variable. \n. yes it does; so maybe it's better to not include this setting in the standard config of the readme? please close this issue. \n. ",
    "jhonghee": "It works fine on my mac but I am having same issue on windows. The extension doesn't seem to detect environment variables at all. I tried to set go.gopath and go.gobin in user setting but didn't work either.\n. ",
    "epsniff": "was this fixed by https://github.com/Microsoft/vscode-go/commit/821b545737d672bde4a3ff6b391c4e9a7ae4f199 ? \n. thx, it seems fixed now.\n. what's the problem this is trying to solve?   If it's running tests in subpackages, that can be solve with the ${file} template directive in your debug config. \n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Testcase Debug\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"program\": \"${file}\",\n            \"env\": {\"TMPDIR\": \"${env.HOME}/tmp\"},\n            \"args\": [\"\"]\n        }\n    ]\n}\n. ",
    "adamjedlicka": "At the moment you can use ctrl+shift+i (format code), but yeah automatic go fmt on save would be super useful.\n. ",
    "fsomers": "+1 on that - again, coming from Sublime, and tripping over our CI format checker on all my commits now that I've come to rely on auto gofmt :)\n. (oops - sorry - hadn't seen the other ticket)\n. ",
    "dotnetjalps": "I have also updated my path in settings.json \"F:\\Data\\Projects\\GO\\src\"  but still same error is there. Still its saying golint is not there.\nThe current Go:Current Path returns F:\\Data\\Projects\\GO\\src \n\nAnd still this errors comes.\n\nI am using windows 10 Single language.\n. @lukehoban - Now its working fine after adding Analysis tool!\n. For me this is how it works.\nUpdate the go version to Go 1.7.4 and then get latest version of all the tools.\ngo get -u -v github.com/nsf/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/golang/lint/golint\ngo get -u -v github.com/lukehoban/go-outline\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v github.com/tpng/gopkgs\ngo get -u -v github.com/newhook/go-symbols\ngo get -u -v golang.org/x/tools/cmd/guru\nand Then restart the machine. It will work.. ",
    "rhinoid": "same here... bottom bar turns orange, nothing happens. \n. json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch main.go\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"program\": \"/Users/reinier/Projects/go/src/bitbucket.org/rhinoid/helloworld/main.go\",\n            \"stopOnEntry\": false,\n            \"env\": {},\n            \"args\": [],\n            \"cwd\": \".\"\n        }\n    ]\n}\n. Just after your announcement I installed everything fresh (I did not have Vis Studio (or Delve) yet)\nOS: 10.11.1 (el capitan)\nDelve version: 0.9.0-alpha\ncommandline:\n```\nreiniers-MacBook-Pro:helloworld reinier$ dlv debug\nType 'help' for list of commands.\n(dlv) b main.go:13\nBreakpoint 1 set at 0x20af for main.hello ./main.go:13\n(dlv) c\n\nmain.hello() ./main.go:13\n\n8:      a = a + 1\n9:      hello(\"world\")\n\n10:  }\n   11:\n   12:  func hello(text string) {\n=> 13:      fmt.Printf(\"%s - %d\", text, a)\n   14:  }\n```\n. oh sorry about the previous odd markdown styling\n. I tried restarting visual studio but it didn't have any effect.\nThings which might have to do with it:\n- I'm Dutch, but my machine is set to English. Perhaps other localization weirdness like my regional settings causing havoc on number/date parsing routines?\n\n- I was still on go 1.3.something and upgraded just before installing visual studio to 1.5.1\n. Ok I tried switching to Region 'United states (computer)', and restart Visual studio, but same effect.\n. ",
    "andrewrgoss": "Seems to be happening only in .go files. I threw together a quick .html file and didn't see any of the pop-ups. \nHowever, the pop-ups were piling up when writing this Go code:\n// Package stringutil contains utility functions for working with strings.\npackage stringutil\n// Reverse returns its argument string reversed rune-wise left to right.\nfunc Reverse(s string) string {\n    r := []rune(s)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return string(r)\n}\n. Right on! Will use the Markdown syntax moving forward.\n``` go\n// Package stringutil contains utility functions for working with strings.\npackage stringutil\n// Reverse returns its argument string reversed rune-wise left to right.\nfunc Reverse(s string) string {\n    r := []rune(s)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return string(r)\n}\n``\n. Yes, this is currently my GOPATH. ARe you suggesting changing this setting in the launch file?\"program\": \"${workspaceRoot}\",`\nbash\n$ echo $GOPATH\nC:\\Users\\andgoss\\GoLangCode\n. Yes, I was able to resolve this issue several months ago by reinstalling Delve altogether - it had originally conflicted with an existing library in the first installation. The cryptic error message wasn't too helpful obviously - figured out the underlying problem through guess-and-check basically. Closing this issue now.. ",
    "SamVerschueren": "It's possible to add colors and nice formatting ;).\n``` go\n// Package stringutil contains utility functions for working with strings.\npackage stringutil\n// Reverse returns its argument string reversed rune-wise left to right.\nfunc Reverse(s string) string {\n    r := []rune(s)\n    for i, j := 0, len(r)-1; i < len(r)/2; i, j = i+1, j-1 {\n        r[i], r[j] = r[j], r[i]\n    }\n    return string(r)\n}\n```\n. ",
    "PumpkinSeed": "I am using the 1.7.1 and still get this very annoying Info pop-ups. Any solution?. Not code dependent, it's appearing at .go extensions. Mostly when I am not install GOPATH and GOROOT just want to quickFixes on my Fedora machine. It's rape me with extensions like gofmt, godoc. I don't want to install them just want to fix and save. When I'm typing. \nThank you. ",
    "xphoniex": "Same issue here. Very, very, very, VERY, vEry, VeRY, verY annoying !!!!! I think I got my point across.. ",
    "SR-G": "Same \"problem\" here : those popup about installing Go tools are very, very, very annoying. How can they be turned off ? (is there a user preference about this somewhere ?). ",
    "atulkumarpccs": "Yes, This is due to the extension if you uninstall the extension this kind of warning/error in the status bar will go off.\nIf need I can provide the screenshot of the steps.. @ramya-rao-a , I am talking about the issue that when you install extra package and not properly configured then warning will come as you browse the code base.\ntwo solutions here: Either uninstall the extra package or configure it properly.\nWhich is the title of the issue.. ",
    "grimmer0125": "Hi lukehoban, I am new to use Go and I notice the global variables will not be shown in the variables inspector, just the same as the screenshot you posted (var a = 4). Is this by design ? \n. ",
    "fstapleford": "As soon as I added a 'Watch', my variables went away. Can't get them back. ",
    "achandlerwhite": "I am not seeing any local variables. I'm debugging aspnetcore 2.0-preview1-final projects.. ",
    "hielfx": "For me only shows the local variables, the global are not displayed.\n- Latest Delve version\n- Ubuntu 16.04\n- VS Code 1.15.1\n- Auto generated lauch.json config. Also happening to me on Ubuntu 16.04 and Ubuntu 18.04\nEDIT: Downgrading solved the problem for me -> https://github.com/Microsoft/vscode-go/issues/1814#issuecomment-408941873. ",
    "winxxp": "+1\n. ",
    "holmeszyx": "(1) and (2) are enough\u3002\n. ",
    "Gacnt": "+1\n. Oops though I was on vscode not the go package \n. ",
    "cch123": "Sorry\uff0cit seems the codesign problem\n. ",
    "shesuyo": "use    @main\nnot     #main\n. ",
    "ntoonio": "@lukehoban \n1. OS X 10.11.1\n2. No, I never opened a .go file.\n3. /\\\n. @lukehoban I've no idea how. But the spinning fan is back again, and it's because of Electron Helper again at 99% CPU usage. Look's like it's not Gos fault after all\n. ",
    "flosch": "You're right. Upgrading worked for me. Thanks!\n. ",
    "coussej": "I do indeed have the latest version. I have a very simple program: \n\nWhen I run with the following configuration:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch main.go\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"/Users/jeroen/golang/src/github.com/coussej/hello/main.go\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\n... nothing happens:\n\nI also tried other values for the program property, but no result. It's just strange I don't get any error message. The dlv command is working, I can debug the app using dlv debug in terminal.\n. @joeblew99 I'll give it a try, but whatever the issue is I believe there should be some kind of message indicating what the problem is. Even some diagnostic messages like \nstarted debugging main.go in /Users/../hello/\ncould give a clue on what's happening here.\n. I was running 0.6.11. \nI followed your instructions for debugging. The code fails in goPath.ts, line 17:\nvar workspaces = process.env[\"GOPATH\"].split(path.delimiter);\nwith message \"Cannot read property 'split' of undefined\". This indicates it doesn't find my GOPATH environment variable. Indeed, when looking in globals > process > env, there is no gopath variable. However all instances were started from a terminal which has the GOPATH set:\n\nStrange.\n. Hi @lukehoban , will try, but I don't have access to my mac until saturday. I'll provide feedback as soon as I get back.\nAnyway, thanks already for your quick responses.\n. Hi @lukehoban, I've updated the plugin and it works now! thanks! However, I now see something else where in some cases the local variables are not shown when the debugger hits a breakpoint. It is only resolved by restarting code. I'll see if I can make it reproducible and open another issue if I can.\nThanks!\n. ",
    "msftclas": "@tecbot, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @gitter-badger, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @alexandrudima, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Alexandru Dima). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alexandrudima, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Alexandru Dima). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @alexandrudima, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Alexandru Dima). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @zsxawerdu, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @newhook, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @newhook, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @newhook, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. Hi @ironcladlou, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. Hi @lukehoban, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Luke Hoban). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @samherrmann, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @ironcladlou, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. Hi @kylebrandt, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @ironcladlou, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. @tampajohn, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @bredov, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @andy-zhangtao, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @andy-zhangtao, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @zippoxer, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @asampal, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @zippoxer, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @gotokatsuya, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @LiterallyElvis, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @derekparker, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @rafax, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @nikai3d, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @giacoman, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @giacoman, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @weinand, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Andr\u00e9 Weinand). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @saml, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @sijad, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @prashantv, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @sijad, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @azr, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. @saml, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @gertcuykens, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @bawr, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @bawr, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @nwolber, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @muidea, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @muidea, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @ramya-rao-a, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ramya Achutha Rao). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @benclarkwood, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @benclarkwood, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @ramya-rao-a, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ramya Achutha Rao). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @ramya-rao-a, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ramya Achutha Rao). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @oliverkofoed, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @ramya-rao-a, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ramya Achutha Rao). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @ramya-rao-a, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Ramya Achutha Rao). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @aeschli, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Martin Aeschlimann). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @ryanvz, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @leaxoy, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @abarisain, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @mattetti, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @mattetti, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @mattetti, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. @bredov, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @FrenchBen, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @Centny, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @Centny, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @Centny, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @cedriclam, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @cedriclam, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @tristanjlang, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @cedriclam, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @cedriclam, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @leaxoy, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. @leaxoy, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, MSBOT;\n. Hi @nochso, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @waderyan, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        It looks like you're a Microsoft contributor (Wade Anderson). If you're full-time, we DON'T require a Contribution License Agreement. If you are a vendor, please DO sign the electronic Contribution License Agreement. It will take 2 minutes and there's no faxing! https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @buckett, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @marklap, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @abduld, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @jimmykuu, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @ibigbug, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @OneOfOne, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @viru, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @fiam, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @PotterDai, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @leaxoy, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @bylevel, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @ankon, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @verygoodsoftwarenotvirus, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @nochso, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @f0zi, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @zkirill, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @vanackere, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @vanackere, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. Hi @codmajik, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @codmajik, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. Hi @codmajik, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @neelance, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @surajbarkale-dolby, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, MSBOT;\n. Hi @nicksnyder, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @nicksnyder, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by Microsoft and real humans are currently evaluating your PR.\nTTYL, MSBOT;\n. Hi @dmage, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla.microsoft.com.\n    \nTTYL, MSBOT;\n. Hi @dmage, I'm your friendly neighborhood Microsoft Pull Request Bot (You can call me MSBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nWe will now validate the agreement and then real humans will evaluate your PR.\nTTYL, MSBOT;\n. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@dmage,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@mattblagden,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@tylerb,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @tylerb, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@bancek,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@theSoenke,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@goenning,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@goenning,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@itsjamie,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @itsjamie, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@kode4food,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @kode4food, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@kode4food,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@kode4food,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@stamblerre,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. \n@stamblerre,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@kode4food,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@mprobst,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@vapourismo,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. @bidrohi, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@fortytw2,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @fortytw2, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@vsobotka,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@Paulche,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@Paulche,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@Paulche,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@alexandrevez,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @alexandrevez, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @uudashr, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement has not been validated yet. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@marwan-at-work,\nThanks for your contribution.\nTo ensure that the project team has proper rights to use your work, please complete the Contribution License Agreement at https://cla.microsoft.com.\nIt will cover your contributions to all Microsoft-managed open source projects.\nThanks,\nMicrosoft Pull Request Bot. @marwan-at-work, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@marwan-at-work,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. @thomasdarimont, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. @thomasdarimont, thanks for signing the contribution license agreement. We will now validate the agreement and then the pull request.\nThanks, Microsoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@marwan-at-work,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot.  All CLA requirements met.. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \n@uudashr,\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by Microsoft. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot. \nThis seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. We will now review your pull request.\nThanks,\nMicrosoft Pull Request Bot.  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.:x: sejas sign nowYou have signed the CLA already but the status is still pending? Let us recheck it..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met..  All CLA requirements met.. ",
    "Reposkeeper-zz": "not only comments. if unicode in Go Strings, the completion suggest is also invalid.\n. ",
    "dyxushuai": "The godef has the same problem.\n. @lukehoban Good job!\n. ",
    "tampajohn": "@tecbot I've taken a stab at adding coverage highlighting in #143, trying to keep it close to what we're used to in Atom (only highlights current package files for example).  Also added a \"get test coverage in this package\" command...\n. @lukehoban  there are a couple of features I'm going to attempt to add, so I'm going to close this pull request for a bit.\n. @tecbot Hmmmm, I'm not super sure where the best place to tie into this is... @lukehoban I know I could do something using registerOnTypeFormattingEditProvider, but that seems kinda invasive... do you know a good place to handle resetting coverage when a document is dirty?\n. @tecbot Removing coverage for the file that's been edited, thanks for the onDidChangeTextDocument pointer @lukehoban \n. ",
    "jeffallen": "Sorry about that. Wrong window.\n. ",
    "mmurray": "@lukehoban you're right it's a dlv issue. Thanks for the pointer\n. ",
    "dsp1589": "so what is the update for this issue? do you guys have any tracker no or something in github\n. ",
    "srinathh": "There's a new tool been released called gogetdoc which takes a file path and a byte position offset and returns relevant documentation. It uses go/types under the hood.\nCan that be used for showing documentation?\n. Hmm... any pointers for where I can start looking into in the vscode-go\ncodebase to try out something with this? (JS is not my primary language but\nI've done some web frontend type stuff)\nOn Tue, Apr 5, 2016 at 12:09 AM Luke Hoban notifications@github.com wrote:\n\n@srinathh https://github.com/srinathh The gogetdoc tool looks like it\ncould be a good fit - unfortunately it appears to depend on Go 1.6. I'm not\nsure how to gracefully handle that in the vscode-go prereqs given the\ncurrent state of things.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/87#issuecomment-205441348\n. wow this looks great! any way I can help beta test?\n. \n",
    "zmb3": "One way around the Go 1.6 requirement would be to bundle or fetch a prebuilt gogetdoc binary rather than using go get to download and build the source.\nI'd be open to releasing binaries for the major platforms on Github if this would help.\n. > gogetdoc does not return the method line in the file, so godef is still required\nI don't understand what you mean here.  The purpose of gogetdoc is to free the editor developer from having to figure out what arguments to pass to godoc.  You just give gogetdoc a file and the position of the cursor (or mouse in this case) and it finds the doc for you.  \nGodef is in no way required in order to use gogetdoc.\nI believe gogetdoc to be a superior solution.  It handles several difficult corner cases and is most likely faster than a godef + godoc solution (a single process is launched rather than two, the source is read once instead of twice, etc.)\nI'm obviously biased, but I love vscode and I'd love to see it added to the list of editors powered by gogetdoc.\n. Ah - I understand now.\nAdding the filename and line number of the definition wouldn't be too difficult, I have that information already in order to get the doc.  Maybe one of these days we can throw something together and see how it performs.\n. So now that this has been released and I see the behavior I can clarify what gogetdoc would bring to the table.  It looks like the current implementation only provides doc for things in the standard library.  The gogetdoc tool would also provide doc for code within your project, or any other code in your GOPATH.  It also provides doc for builtins (len, append, cap, etc) and even package doc for import paths.\n@abarisain if you're still interested in working together on this feel free to ping me (email in profile).   Great work by the way - this is really nice \ud83d\udc4d \n. Arnaud and I are working on it. Stay tuned :-)\nOn Saturday, August 20, 2016, Luke Hoban notifications@github.com wrote:\n\n@zmb3 https://github.com/zmb3 I'd love to see a PR for integrating\ngogetdoc if you or anyone else is interested. There are two limitations\nwith the currently merged feature (1) only works for standard library (2)\nonly works for functions. It would be great to expand on both of those.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/87#issuecomment-241232479,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHLav-g4IopTSm-MGUWdJGrc5EHQm33Uks5qh6HXgaJpZM4Go6Ux\n.\n. I recently added support for gomodifytags to go-plus in Atom land.  I imagine this might help guide an implementation for VS Code: https://github.com/joefitzgerald/go-plus/pull/571. Sorry to butt in, but in a more graphical editor like code, wouldn't it\nmake sense to provide some form of UI rather than relying on a well-formed\ntext command?\n\nOn Fri, Mar 17, 2017 at 5:25 PM Ramya Rao notifications@github.com wrote:\n\n@fatih https://github.com/fatih So from what I could gather from the\ntweet, you use space separated keys and comma separated options. For static\nvalues, you use colon to separate the key and the value\nSo all of the below would be valid in vim-go ?\n\n:GoAddTags json xml\n:GoAddTags json,omitempty xml,cdata\n:GoAddTags validate:\"gt=1\"\n:GoAddTags validate:\"gt=1\",omitempty\n\nI am asking because I'd like to keep the behavior as similar as possible :)\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/433#issuecomment-287495132,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHLav3g6O5rJvsFdzrW29HCOSwTfWIEGks5rmxZygaJpZM4JlEcb\n.\n. Ah, that makes sense. I wasn't aware of the UI limitations. . @abarisain how does this compare to your changes?\n. A solution that I've suggested before for supporting older versions of Go is just to bundle or download a pre-built version of the gogetdoc tool.  The tool only needs Go 1.6 to build, but will run just fine on code bases and developer environments that are < Go 1.6.\n\nI would be happy to publish github releases for the major OS/arch combos if that helps.\n. @ramya-rao-a right.  What I'm suggesting is a toggle whereby the extension checks the version of Go in the user's environment.  If Go 1.6+, it should perform the go get like normal, otherwise it should download a pre-built binary.\nAlternatively, do what @abarisain did in his fork - check the version of Go and if less than 1.6 fallback to the old godoc + godef approach (which has limitations but works with the typical go get approach).\nEither way, if you want to support older versions of Go then the extension needs to do a check.\n. That's an option, yes. I can definitely publish releases on github with builds for Windows, mac OS, and Linux.\nI could see the argument that you then depend on me to not pull the release, and while I plan to support the tool for the foreseeable future and want to see its use in as many editors as possible, you are certainly free to make your own builds and host them on a Microsoft server somewhere or even bundle the binary in the extension download.\n. Looks great!\n. LGTM :-)\n. Gogetdoc is a little slower than godef, but that's because it does more. I\nhardly notice a difference in my machine.\n4-5 seconds sounds way too long. Typical calls to gogetdoc generally take\nhundreds of milliseconds in my experience. More info on the environment\nwhere it is slow would be helpful. Is it a very large project and/or\ngopath? Old machine?\nWe can definitely look into optimizing gogetdoc further. For example\ngarbage collection can be disabled since it's a short lived process.\nOne thing that struck me is the report of 4-5 gogetdoc processes running at\na time. I wouldn't expect more than 1.\nOn Wed, Nov 30, 2016 at 3:01 PM Ramya Rao notifications@github.com wrote:\n\n@leaxoy https://github.com/leaxoy @abarisain\nhttps://github.com/abarisain @zmb3 https://github.com/zmb3\nWas this expected or is there anything we can do to improve the\nperformance while using gogetdoc?\nIn my Windows 10 and Mac, I don't see any perf issues.\n@bruceauyeung https://github.com/bruceauyeung Thanks for reporting\nthis. As a workaround, you can always switch back to using godoc by\nchanging your settings.\nWe will eventually move to using a language server, but not any time\nsoon...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/667#issuecomment-264009600,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHLav2rYKTsDRte4T-mOMwR0clJY_yNlks5rDfI4gaJpZM4K_2fN\n.\n. Yeah that particular issue is just that Code is always trying to find\nsomething under your cursor to pass to gogetdoc. I wonder if we can modify\nthe extension so that it only calls gogetdoc when there looks to be a valid\nidentifier under the mouse.\n\nOn Wed, Nov 30, 2016 at 7:01 PM Bruce Auyeung notifications@github.com\nwrote:\n\ni find another problem.\nafter i opened a go source file, i move curor ( using mouse ) in the left\nside blank area of edit window, not right side, not hovering onto any\nkeywords, variables, methods, vscode-go will try to load something( the\nbackground gogetdoc process launched), after more than 4 secs it displays\npackage's information\n1851 root 20 0 428336 419532 3580 R 129.6 1.3 0:12.13 gogetdoc\n11706 root 20 0 586116 578388 3580 R 129.3 1.8 0:16.67 gogetdoc\n11717 root 20 0 478012 468992 3580 R 125.0 1.4 0:14.35 gogetdoc\n12133 root 20 0 159336 151060 3580 S 115.5 0.5 0:04.02 gogetdoc\n12112 root 20 0 154020 145676 3580 R 102.3 0.4 0:03.86 gogetdoc\n12210 root 20 0 63368 56728 3580 R 43.8 0.2 0:01.33 gogetdoc\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/667#issuecomment-264056768,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHLav84s726sBUx22BYO9D5vuPc3XTelks5rDiqKgaJpZM4K_2fN\n.\n. I ran gogetdoc on the resthandler.go file in the kubernetes project and queries were taking 1.1s, which is not instantaneous but really not bad given the size of the project.\n\nInterestingly enough, running with GOMAXPROCS=1 (or even 2), the query time is down to .70s.  There's not much work that can be done in parallel here, so we're probably just losing time due to scheduler overhead.  As an added bonus, gogetdoc won't eat up as many CPUs with this setting.\n@bruceauyeung could you please go get -u github.com/zmb3/gogetdoc and report your results with GOMAXPROCS=1?. Hmm, so the GOMAXPROCS isn't a one-size fits all solution.  Bummer.\nOne thing that would help would be for the extension to make sure not to stack up processes, meaning if the user moves their cursor before the results come back then the process should be cancelled before starting a new one.\nAdditionally, if there are cases where the extension needs only a definition and not the doc, then godef should probably be preferred there.\nWhile I plan to continue to work on performance, I'd like to point out that gogetdoc has been in use by vim-go and Atom for the better part of a year and we haven't received reports of performance issues. I'd be hesitant to do anything drastic in this extension to accommodate a single old machine.   In the meantime, you can always enable the old \"godef+go doc\" behavior if that works better for you.. @ramya-rao-a it is known, but I wouldn't call it in issue.  This has been reported before: https://github.com/zmb3/gogetdoc/issues/19\nBuiltins are special - they are implemented in the compiler/runtime and are not ordinary Go functions.  There is no definition to go - they might even be implemented by multiple functions.\nThe src/builtin/builtin.go file is used only to provide doc for builtins.  There is nothing there except for documentation comments and function signatures, both of which are already returned by gogetdoc.  Sending the user to this file delivers no additional value.\nThis isn't unique to gogetdoc - try godef or guru:\n```\n$ godef -f main.go -o 3087 -a -json\n{}\n$ guru definition \"main.go:#3087\"\nguru: append is built in\n``. @ramya-rao-a I think the hover provider is a bit too liberal in spawninggo doc/gogetdoc` processes, which explains this and probably also #698 and #667.\nA few suggestions:\n- try to limit the number of calls to definitionLocation() (maybe by increasing the hover timeout)\n- break out early (prior to spawning a doc process) if it looks like there's nothing interesting under the cursor (i've seen the extension call gogetdoc when the cursor is over whitespace - this is inefficient)  Can we look at the word under the cursor and only query for doc if it appears to be a valid Go identifier?\n- don't launch more than one doc process simultaneously.  keep track of the currently running doc task, and if a new call to definitionLocation() is made before the previous task finishes, assume the user moved the mouse and are no longer interested in the original call.  \nI suspect the last one will have the most impact.  The doc processes do consume a lot of CPU, which is fine if they only run for < 1s.   However if we allow 4-5 of these processes to run simultaneously as the user moves the mouse around the editor we'll surely be impacting performance.. The current behavior is to ascend the AST until we get to a decl that has [may have] documentation.  In this case, tests being a local variable doesn't, and so we keep moving up the AST until we see Test_checkError().\nAt the time, I thought this behavior made sense.  Recall that gogetdoc was originally written for the sole purpose of extracting documentation, not necessarily to provide a tooltip.\nI see how this can be confusing, especially now that the tool is being used to provide a tooltip for the item under the cursor.  We should try to be as accurate as possible at describing what is under the cursor.\nPlease create an issue upstream and link it here, I'll be happy to take a look. Bonus points for a repro with actual/expected output :-)\n. Lots of the go tools behave in this way (gogetdoc, guru, gorename, etc)..\nI believe the cause is that for:\nfmt.Println(\"hello\")\n           |\nThe cursor is  positioned at byte 11, and the Println identifier ends at byte 10.\nThere are two workarounds that have worked well for me:\n\n\nOptionally step back a byte if Guru fails.\n\n\nIf your editor supports it, you can ask for the range covered by the current word (treating ( as a valid word character), and then averaging it to get somewhere in the middle.\n\n\nFor example, if your editor allows it, you can tell it to include ( in the list of \"word characters\" and then ask for the current word position.  You'd get something like: 0 > 11, and you average those values to get 5. \nI personally prefer option 2.. > Ginkgo tests need to be run with the ginkgo executable\nThis is actually not the case.\n\nGinkgo hooks into Go\u2019s existing testing infrastructure. This allows you to run a Ginkgo suite using go test.\n\nThis means delve test support should work just fine.. This makes a lot of sense.  Feel free to file an issue at github.com/zmb3/gogetdoc for build tag support and I will look to add a way to provide build tags to the tool.\n\nI can repro this issue in the second and third case but not the first.\n\nIn the first case, how are you actually getting definition information?  I wasn't aware that godoc spits that out.. gogetdoc doesn\u2019t build with 1.5 and we don\u2019t go out of our way to support it. I used to get an occasional issue or two related to 1.5 support but haven\u2019t seen one in a year or two. If it makes your life easier I say drop it. What\u2019s more fun than deleting code?. I'll take a look at the go to definition issue in gogetdoc. Thanks for the report! . I can't seem to reproduce this. Docs tool is set to gogetdoc and here's what I get:\n\n. Got it. Thanks Ramya. I have a fix coded up, just need to clean up a few things and I'll have it out tomorrow. . @hhrutter the fix is committed. Just update with 'go get -u github.com/zmb3/gogetdoc'. I believe that func is new in Go 1.8. Are you running an old version of Go by chance?. There's not enough info here to say for sure. Sounds like some sort of\nmisconfiguration?\nDo you have multiple versions of Go installed?  What's the output of 'go\nenv'?\nOn Wed, Jul 5, 2017 at 10:33 PM Ramya Rao notifications@github.com wrote:\n\nI am on vacation right now so don't have access to my mac.\n@zmb3 https://github.com/zmb3 can you take a look at why gogetdoc\nwouldn't have worked in the above scenario?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1066#issuecomment-313292651,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AHLav2hprH8pq5OxQc0Q09dPh07znjqrks5sLGO0gaJpZM4OLmQ9\n.\n. Nothing out of the ordinary there.  What's the absolute path of the file you're editing in that screenshot?. @ramya-rao-a  gogetdoc includes the pkg field in it's JSON output now, so you could conceivably add it to the tooltip. Seems like an anti-pattern to me, for several reasons:\n\n\nGoDoc doesn't use fancy markup syntax like JavaDoc or JSDoc - it's just text.  These type of tools are useful in auto-filling out the boring repetitive markup, but we don't have that in Go.\nSome people request just enough to suppress go vet warnings about exported identifiers being undocumented - but this defeats the purpose of the warning, which is to tell you that something is undocumented so that you go back and do it.. Works as expected in Atom, so may just want to make sure your grammar is in sync with Atom's.. Interesting. I will look into it!  . @ramya-rao-a can we confirm vs-code is invoking gogetdoc with the correct offset?  I'm not able to reproduce at the command line:\n```\n~/src/github.com/zmb3/doctest\n\u276f cat main.go\npackage main\n\nimport (\n    \"fmt\"\n)\nfunc main() {\n    s := []string{\"a\", \"b\", \"c\"}\n    for index, char := range s {\n        fmt.Println(index, char)\n    }\n    for index := range s {\n        fmt.Println(index)\n    }\n}\n~/src/github.com/zmb3/doctest\n\u276f gogetdoc -pos \"main.go:#84\"\nimport \"github.com/zmb3/doctest\"\nvar index int\nUndocumented.\n~/src/github.com/zmb3/doctest\n\u276f gogetdoc -pos \"main.go:#144\"\nimport \"github.com/zmb3/doctest\"\nvar index int\nUndocumented.\n``. I don\u2019t think you should need to update the name of the tool. I think the change behind v2 is that it is no longer go-gettable - you\u2019ll need to install binaries instead. .\"go.docsTool\": \"gogetdoc\"`  should handle this correctly.. Hey there @ramya-rao-a - long time no see :-)\n\nWill this be affected by vgo?\n\nI'm no expert, but I believe the vendoring stuff will be affected by vgo, as vgo does away with vendor directories and instead caches versioned dependencies outside the project.. vgo vendor exists for backwards compatibility, producing a \u201clegacy\u201d project with a vendor directory that must be built within GOPATH. \nIn day to day operation a project that uses vgo will not have a vendor directory. \nAt least that\u2019s my understanding based on the backwards compatibility section of the tour here: https://research.swtch.com/vgo-tour. This is a feature of the go tool.\n\nThe go command caches build outputs for reuse in future builds. The default location for cache data is a subdirectory named go-build in the standard user cache directory for the current operating system. Setting the GOCACHE environment variable overrides this default, and running 'go env GOCACHE' prints the current cache directory. You can set the variable to 'off' to disable the cache.\n. I wonder if it is this working directory used by go build, which should be cleaned up on exit.. Note that there isn't a separate module-aware version of gogetdoc - it should just work with both modules and the traditional GOPATH setup.  A few follow up questions for you @ramya-rao-a.\n\nThe thing that's new now is the working directory absolutely matters, as the go tool will use this to look for the go.mod.  Does vs-code set the working directory to the project directory when invoking gogetdoc?\nIs vs-code explicitly setting GO111MODULE=on if a go.mod file is found?  That might be our problem.\nEdit: discovered that gogetdoc is explicitly setting the dir for go/packages - I think we need to not do that, and instead rely on editors to always use the working directory corresponding to the original project.. Perfect, this should work as soon as I get an update for gogetdoc out. \ud83d\udc4d. This actually is an issue with the extension and not gogetdoc.  The only way to get documentation in both gopath and module mode is for the editor to set the working directory when invoking the tool. \nIt sounds like if you haven\u2019t opened a folder then the extension is not able to detect the correct working directory.   Which is reasonable - given only a single file it\u2019s pretty hard to guess at what context you are working in. . Right. It worked when you downgraded, but the old version that worked for you would have failed with modules. \nOne thing to try that might work the majority of the time is to use the dirname of the file as the working dir.\nAlternative approaches would be to search up the directory tree looking for $GOPATH/src or a go.mod file. . Yes, thank you both for the report and troubleshooting as well as the quick fix! \u2764\ufe0f. ",
    "nii236": "I noticed that the export func docstring is available when you open a bracket when calling a function. What tool is this using?\n\n. Hooray, when is the next release coming so we can use this great feature? \ud83d\udc4d \n. YTMND!\n. ",
    "abarisain": "I tried to take a shot at this bug, starting with the suggestions here: https://github.com/Microsoft/vscode-go/issues/87#issuecomment-205916088\nI easily got gogetdoc to replace godoc (while keeping godoc for < 1.6), but I don't understand why godoc should be replaced with gogetdoc? godoc seems to work correctly, and vscode-go doesn't have the same pitfalls described in https://zmb3.github.io/post/gogetdoc/\ngogetdoc does not return the method line in the file, so godef is still required. The only thing gogetdoc seems to bring to the table, is that it does not return the full package doc, but only the func we want.\nMaybe this is why you wanted to replace godef: https://github.com/Microsoft/vscode-go/issues/87#issuecomment-159598791 ? The comment is from 2015, and I haven't ran into the issue myself.\nFrom what I understand, this bug is about the hover provider. It seems to disable the godoc call, and even if I force it to run, the provider doesn't show it. Is it disabled because it has to serially call two programs? To me, it looks like replacing godef/godoc is another issue that this one, which is for the hover popup. \nI'm willing to get my hands dirty and submit a PR for this issue (or both!), but I'm not sure what the right approach is :)\n. That said, I think that with the recent gofmt improvments, this issue is solved by some simple change: https://github.com/abarisain/vscode-go/commit/847be4807cfbc224de9e9b27327c26336ab01954 . It works pretty well and seems fast enough for continuous usage.\n \nI'll probably send a PR soon describing some caveats I noticed\n. Sure, but I'd rather not pollute this bug with that. Shoot me an email :)\n. Don't get me wrong, I'd like to integrate gogetdoc into vscode! I'm merely trying to figure out which direction to go.\nIn my early tests, it turned out to be slower, but I think there's something wrong with my machine so I'm not blaming anything yet.\nThe plugin does rely on godef not only to get the method definition, but also to get the line number and column so vscode can \"jump to definition\": https://github.com/Microsoft/vscode-go/blob/master/src/goDeclaration.ts#L50-L53 .\nWhile gogetdoc can get the documentation easily, we would still need to call godef to get this information, and do it in the same pass in which we get the documentation. So most of the benefits brought by gogetdoc are lost (and it even introduces the caveat of requiring Go 1.6).\nI don't know what's your opinion on adding that information to gogetdoc. It might be out of scope for your projet.\nAnyway, that's a little out of scope for that bug in my opinion. The hover doc is implemented by the change I linked. Replacing godoc and godef is another issue, that I'd be happy to work on, especially if you're there to make sure I'm not using gogetdoc wrong :)\n. That would be amazing. I guess we can open another issue here about switching to gogetdoc\n. I've also noticed this on my computer. This seems to happen because of the 10.12 beta, on which go often panics or freezes. Running the extension in a debugger and breaking on the process stdout reads will show that many calls fail.\nMost of my issues have been fixed by updating to the 1.7 RC, so this is probably more a Go issue than a vscode one.\n. The only failing tests are gometalinter's\n. Thanks for merging :)\n. I think so !\n. Actually, it already works on my gogetdoc2 branch.\n@apkrieg if you can do a small repro file that fails with the current version, I could confirm that gogetdoc fills this gap\n. Thanks for the repro, I got the same results on my windows computer on the master branch.\nWhile it is a little slower than godef, the abarisain/vscode-go gogetdoc2 branch handles this correctly.\nCouldn't try glfw, only MySQL, since I don't have gcc installed on this box\n. It works pretty well, I'm hoping to submit a pr in the coming weeks. It lacks tests and some rebasing but it can be tested at abarisain/vscode-go on the gogetdoc2 branch\n. Yes!\nI'm having some issues with the performance of this, but I've yet to take time to open an issue.. My version is much more complicated because it retained compatibility with the old tools for users stuck on old Go versions (it was a wish of the maintainer of this plugin)\nHowever I've got 0 time to work on it (really sorry about getting your hopes up), so if this works, I'd say go for it :) It looks like it does more than what I did\n. I didn't know that was possible! It would be clean.\nSupporting two tools version isn't very had either. The classes are well made, you just have to swap implementations.\n. Impressive work :)\n. Ditto\n. I was certainly not expecting such delays. On my computer, I experienced delays up to 15s when doing go to implementation (jumping to stuff in go's stdlib).\nI noticed that it was slower when developing my version of the plugin, and talked to zmb3 about this. He improved gogetdoc and I was down to delays more in the 500ms range.\nMy gopath is quite small, but I have a moderately sized vendor folder. I'm testing on Sierra with go 1.7.whateveristhelatestone. \nI think some profiling is in order, as my cpu definitely goes nuts when looking up definitions. A nice way to kill the plugin functionality is to hold CMD (I often use cmd click instead of F12) and hover a couple of stuff without waiting. If I simply hover and wait, things are much better.\nTalking about sourecgraph, isn't it only a cloud service ? It may not fit many use cases: for example, the code I edit comes from a private repo xith only vendored dependencies. I'd expect the plugin to only pick up the documentation for the vendored version of the library I'm using.. That sounds great!. Hi!\nI unfortunately can't be of any help: I have been completly satisfied by the default configuration of the Go VSCode extension for quite a few releases, be it performance or completion wise.. Not sure I really like how templates strings break indentation, but it does not destroy the file's column count that way\n. Sorry about that, didn't notice that there was a simple string constructor for this\n. Can we give reenabling these tests a shot? When this was commented, they worked on my machine\n. Does that work for methods that have a signature like func (l *Struct) Add(a int, b int) {? I did it somewhat differently for that reason https://github.com/abarisain/vscode-go/blob/gogetdoc2/src/goSignature.ts#L33-L40\nIf it does, then sorry! Haven't had the time to test this branch yet.\n. I think that should be } else if (goConfig['docsTool'] === 'gogetdoc') { :)\n. ",
    "alexandrudima": "Oh, cool, sorry I didn't notice it\n. fyi @egamma @weinand \n. I'd recommend for the go grammar to align with other grammars and emit a token containing \"string\" in its scopes for '['... We can ofcourse make it configurable, but IMHO that looks like it doesn't have a syntactical purpose -- i.e. it looks to me like a character / string constant...\n. ",
    "verygoodsoftwarenotvirus": "Alternatively, just opening a document with the list of commands to run would be helpful so I don't have to pull up the README every time.\n. I'd like to add my support to this suggestion\n. I didn't find any other instances of the term let iable or letiable, so hopefully this is the only change needed.\n. I don't know why the Travis build failed, because I changed literally zero code. Weird.\n. ",
    "Ziflin": "Has this issue been addressed yet? It is still extremely annoying to write comments in PHP files with it auto-completing on \"Return\".  Is there a way to disable that behavior currently?  It's to the point where I'll be switching to Atom/Brackets if there isn't a way to disable it...\n. Yeah, I'm referring to PHP comments actually.  Trying to add a new-line in a comment always seems to auto-complete something making it super annoying.  If there was just a way to disable/unbind 'Return' performing autocompletes I think that would be fine.\n. I was actually able to just disable Enter auto-completing which was enough for me with the following override in File/Preferences/Keyboard Shortcuts:\n{\n        \"key\": \"enter\",\n        \"when\" : \"editorTextFocus && suggestWidgetVisible\"\n}\n. ",
    "gillez": "Is there an open issue for this that I can add info to, or should I open a  new bug?\n. ",
    "deathly809": "This actually started happening after I updated.\n. I was lucky and it happened again and I got a  screenshot.  I also notice that sometimes errors which do exist don't appear at all until I try to compile.  Could that be related in some way?\nAt the time I was refactoring my code and using search to find a specific item I needed to rename.  The error changed to the correct file when I went into that file and made a change and saved.\n\nHere is another document:\n\nAnd here is where the error should appear:\n\n. Not sure if it is the tasks file as I copied an example I saw online and tweaked it some.  Here is my tasks.json file:\ntasks.json.txt\nAt the time I was not modifying the test file, but just noticed that the \"error\" appeared there as well.  \nWill try to reproduce on two machines from scratch.  Both with testing files and without.\n. ",
    "timeloveboy": "same with @henjue \n{\n    \"version\": \"0.1.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch main.go\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \".\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nConfigured debug type 'go' is not supported.\nin mac os x 10.11 ei caption\ndlv-cert  install OK\n. thanks\uff0cthe resaen is i download a old vscode-go estexsion.now it works~\n. ",
    "asaf": "Hey,\nI'm having the same error, Configured debug type 'go' is not supported., Using version 0.6.43,\nAny clue?\nThanks\n. On MacOS, I had a gocode daemon running, I killed it / gocode close, re-opened studio and everything worked.\n. ",
    "thessem": "@asaf I'm having the same issue as you, I've created a new issue over at https://github.com/Microsoft/vscode-go/issues/445\n. No, It went away after a complete flatten and re-install of vscode\n. ",
    "ivoviz": "Yeah, I wasn't sure if it's a vscode-go thing or goimports. But still, imo it would be more logical to first try to import the package from the same app.\n. I'll try to explain a bit more clearly: I have 2 db packages, one in app1 and one in app2. Simplified code - in reality they're not exactly the same, just similar, but both have the X variable with the same function:\ngithub.com/ivoviz/app1/db/db.go\n``` go\npackage db\nvar X *whatever\nfunc (x *whatever) Test() {\n...\n}\n```\ngithub.com/ivoviz/app2/db/db.go\n``` go\npackage db\nvar X *whatever\nfunc (x *whatever) Test() {\n...\n}\n```\nNow if I write a code in\ngithub.com/ivoviz/app2/main.go\nlike this:\n``` go\npackage main\nfunc main() {\n    db.X.Test()\n}\n```\nAnd then using \"Format Code\" will import the db package from app1 instead of app2. For me it would seem logical to try to find the package within app2 first, but I might be alone on this one. :)\n. ",
    "klauspost": "If you rename the $GOPATH\\pkg folder it should happen.\n. > I just tried turning this on, and when I work in the Delve codebase, completion lists start taking several seconds to show up.\nIt should only be a once-per-package. The standard go get <package> will not compile the .a files for the autocomplete.\n\nAlso, won't the user still see errors from compile-on-save if they haven't built the dependencies? \n\nAll the go tools just compiles what isn't installed on the fly, so ordinarily you don't notice it, compilation just takes a fraction of a second longer.\nBut you can test it out. It works ok for me, except for the very annoying console window that pops up and grabs focus. That is why I left the final decision to you :)\n. It also seems to behave \"stupid\" when you edit a test file in the same folder, but with a different package name than the package.\nThis will make it \"rebuild\" on almost every keystroke. It seems like adding a FAQ entry is the safest way to go for now. Maybe this will be better after the potential rewrite gocode seems to need.\n. ",
    "alienth": "The autobuild=true option is considered experimental by the gocode author. Doesn't seem like there will be any improvement on that feature. The author desires to rebuild gocode for several reasons, and one of them is to read source files for completion reasons. Seems like they doesn't have the time to address this at the moment: nsf/gocode#307\n. ",
    "erichiller": "@lukehoban  I am on windows and use ConEmu which wraps my terminals, both powershell, cmd, and msys2. Each time ConEmu loads I set GOROOT and GOPATH. For example, for cmd; I have an init.bat that runs before the console loads:\n```\n@if exist \"%USERPROFILE%\\dev\\lib\\go\" (\n    set \"GOROOT=%USERPROFILE%\\dev\\lib\\go\"\n)\n:: add GOROOT to PATH ; GOROOT can only be added to PATH if checked if defined\n@if defined GOROOT (\n    set \"PATH=%USERPROFILE%;%GOROOT%\\bin;%PATH%\"\n    set \"GOPATH=%USERPROFILE%\\dev\"\n)\n```\nThus, the PATH, GOPATH, and GOROOT are not set at the system level, but the console level/program level.\n. So if I am in ConEmu and I run code blah.go everything loads fine. It is just that is not nearly as easy as double clicking an icon in the gui...\n. Yes, to the first bit, and secondly, it is not at GOPATH/bin. But the way I read through the code for getBinPath is that it recursively searches the subdirectories until it finds the relevant file, correct?\ngo.goroot, as the old error used to say would work, but as I understand it, the error was a misnomer correct? And not actually a configurable item?\n. Cool, that would definitely do the job!\n. I got a chance to test this today, the new release 0.6.17 and it is still a no go. Was it working on your side? \n\"go.gopath\":  \"C:/Users/ehiller/dev\",\n\"go.goroot\": \"C:/Users/ehiller/dev/lib/go\"\nThe go binary is under C:/Users/ehiller/dev/lib/go/bin/go.exe\nFrom what I can tell it should be reading go.goroot from \nsrc/goInstallTools.ts\nvar goroot = vscode.workspace.getConfiguration('go')['goroot'];\nif (goroot) {\n    process.env[\"GOROOT\"] = goroot;\n}\nand then processing it in  src/goPath.ts --> hitting the if (process.env[\"GOROOT\"]) { correct?\nexport function getGoRuntimePath(): string {\n    if (runtimePathCache) return runtimePathCache;\n    if (process.env[\"GOROOT\"]) {\n        runtimePathCache = path.join(process.env[\"GOROOT\"], \"bin\", \"go\");\n    } else if (process.env.PATH) {\n        var pathparts = (<string>process.env.PATH).split((<any>path).delimiter);\n        runtimePathCache = pathparts.map(dir => path.join(dir, 'go' + (os.platform() == \"win32\" ? \".exe\" : \"\"))).filter(candidate => fs.existsSync(candidate))[0];\n    }\n    return runtimePathCache;\n}\nAm I missing anything?\n. If you are talking about when installing the supporting programs such as goreport - these do ignore the go.gopath in the workspace.\n. I can say the same. ( that is, that the go.gopath in settings is not used )\n. Oh I was just shortening, I'll just write it out:\ngo.exe is at C:/Users/ehiller/dev/lib/go/bin\ngo.goroot is set to C:/Users/ehiller/dev/lib/go\ngo.gopath is set to C:/Users/ehiller/dev/ \nI was just saying that in vscode I actually did fully specific the paths, and not use ~. \nI launch vscode from the gui/just double click.\n. Gopath definitely works, just seems that goroot doesn't. I can install the tools manually, and then they work (gopath setting is fine, but the go.exe is not found due to the goroot not being found). Automatic installation doesn't work because obviously go get won't work. Hope that clarifies some.\n. Somehow I am still have the same result - I even ensured that the extension was fully being reinstalled by deleting it and reinstalling from scratch. Still ->\nI checked the binaries, made sure they were unblocked and permissions were good. I posted all my settings and directories for a sanity check. I am doing something horribly off?\nNo 'go' binary could be found on PATH or in GOROOT.\n```\n    // Specifies the GOPATH to use when no environment variable is set.\n    \"go.gopath\": \"C:/Users/ehiller/dev/\",\n// Specifies the GOROOT to use when no environment variable is set.\n\"go.goroot\": \"C:/Users/ehiller/dev/lib/go/\"\n\n```\n```\nC:\\Users\\ehiller\\dev\\lib\\go\n\u03bb pwd\nPath\nC:\\Users\\ehiller\\dev\\lib\\go\nC:\\Users\\ehiller\\dev\\lib\\go\n\u03bb ls\ntotal 178\n-rw-r--r-- 1 ehiller ehiller 21146 Jan 13 19:09 AUTHORS\n-rw-r--r-- 1 ehiller ehiller  1107 Jan 13 19:09 CONTRIBUTING.md\n-rw-r--r-- 1 ehiller ehiller 28953 Jan 13 19:09 CONTRIBUTORS\n-rw-r--r-- 1 ehiller ehiller  1479 Jan 13 19:09 LICENSE\n-rw-r--r-- 1 ehiller ehiller  1303 Jan 13 19:09 PATENTS\n-rw-r--r-- 1 ehiller ehiller  1519 Jan 13 19:09 README.md\n-rw-r--r-- 1 ehiller ehiller     7 Jan 13 19:09 VERSION\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 api\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 bin\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 blog\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 doc\n-rw-r--r-- 1 ehiller ehiller  1150 Jan 13 19:09 favicon.ico\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 lib\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 misc\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 pkg\n-rw-r--r-- 1 ehiller ehiller    26 Jan 13 19:09 robots.txt\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:09 src\ndrwxr-xr-x 1 ehiller ehiller     0 Jan 13 19:10 test\nC:\\Users\\ehiller\\dev\\lib\\go\n\u03bb ls bin\ntotal 31728\n-rwxr-xr-x 1 ehiller ehiller 11258368 Jan 29 14:01 go.exe\n-rwxr-xr-x 1 ehiller ehiller 17121280 Jan 29 14:01 godoc.exe\n-rwxr-xr-x 1 ehiller ehiller  4105216 Jan 29 14:01 gofmt.exe\n```\n. Sure thing! No more error message.\nNice thanks! That was my bad, I misread, I thought the tag was on .24 -- sorry about that. I was in the midst of debugging it myself. Saved me some time. Thanks heaps.\nIs there anything specific I can/should test to ensure the functionality is present as well?\n. Put an error in the code, a few actually - and it did not generate any output. Without errors it didn't generate an exe either. I tried it with both auto save on and off, but neither generated an error. If I manually ran go build . it behaved as expected. To ensure I looking in the proper place, I go to Toggle Output > Go correct?\n. I too am having this issue, I am unsure which version it began with. It previously did work, but hasn't for ~1-2 months.\nMostly for in-built libraries (runtime, net/http, etc...)\nI do not have \ngo.useLanguageServer set to true (it is the default false)\nNor have I changed godocs. @ramya-rao-a  Yes - Sorry for the delay - I just changed my config - Restarted vscode as well to include go.docsTool to be gogetdoc\nhere are my non-default settings:\njson\n  // vscode-go\n  // Run 'go build'/'go test -c' on save.\n  \"go.buildOnSave\": false,\n  // Run Lint tool on save.\n  \"go.lintOnSave\": true,\n  // \"go.lintTool\": \"golint\",\n  // Run 'go tool vet' on save.\n  \"go.vetOnSave\": true,\n  \"go.formatOnSave\": false,\n  \"go.gotoSymbol.includeImports\": true,\n  \"go.useCodeSnippetsOnFunctionSuggest\": true,\n  // Enable gocode's autobuild feature\n  \"go.gocodeAutoBuild\": true,\n  // Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay.\n  \"go.liveErrors\": {\n    \"enabled\": true,\n    \"delay\": 500\n  },\n  \"go.editorContextMenuCommands\": {\n    \"toggleTestFile\": true,\n    \"addTags\": true,\n    \"removeTags\": false,\n    \"testAtCursor\": true,\n    \"testFile\": false,\n    \"testPackage\": false,\n    \"generateTestForFunction\": true,\n    \"generateTestForFile\": true,\n    \"generateTestForPackage\": false,\n    \"addImport\": true,\n    \"testCoverage\": true\n  },\n  \"go.docsTool\":\"gogetdoc\",\n  // \"go.gopath\": \"C:\\\\Users\\\\ehiller\\\\dev\\\\\",\n  // \"go.toolsGopath\": \"C:\\\\Users\\\\ehiller\\\\dev\\\\\",\n  // \"go.goroot\": \"C:\\\\Users\\\\ehiller\\\\AppData\\\\Local\\\\omega\\\\system\\\\go\\\\\"\n  \"go.lintTool\": \"gometalinter\",\n  \"go.lintFlags\": [\n    \"--disable-all\",\n    // \"--enable=varcheck\",\n    // \"--enable=unused\",\n    // \"--enable=ineffassign\"\n    // \"--enable=goconst\",\n    // \"--enable=interfacer\",\n    // \"--enable=staticcheck\",\n    // \"--enable=dupl\",\n    // \"--enable=errcheck\",\n    // \"--enable=golint\",\n    \"--enable=gotype\",\n    \"--enable=vet\",\n    \"--enable=misspell\"\n    // // \"--enable=gocyclo\",\n    // \"--enable=goimports\",\n    // \"--enable=gosimple\",\n    // \"--enable=aligncheck\",\n    // \"--enable=deadcode\",\n    // \"--enable=ineffassign\",\n    // \"--enable=structcheck\",\n    // // \"--enable=unconvert\"\n  ],. ",
    "yhuang0": "It's been two years and we don't have any attempt to address this?\nIt seems go doesn't report all errors in a package so navigating to another file within the same package and running build doesn't give you much. But when navigating to a file in a different package you want to run build again because you want to see errors of the latter package, not the former one. In the case of tabbing through different files you may want to add a delay to not prematurely call build. So basically what this looks like:\nOnNavigateToGoFile, reset timer -> set timer for 1 sec if in different package -> call build on package\nThe config would look something like this:\ngo.buildOnOpen {\n  scope: package,\n  active: true,\n  delay: 1sec\n}\nThat should be doable for a first version, the next version you could probably add caching of errors by package. When you navigate to a different package you see the cached version of the errors but again after a certain delay you call build so errors are updated.. For my own purpose I just want to have a \"go.generateOnSave\" option for the current file scope. In addition, a vscode shortcut to run go generate on the workspace/package level manually. I don't think the first version of this needs to be that complicated.. Yes that works but it's not a good solution.. ",
    "pilwon": "@lukehoban AutoSave is disabled but forrmatOnSave option is on. Let me know how I could help with debugging this issue. Is it normal that multiple processes of goreturns are created in the background? Can the new process check existing ones and kill them?\n. ",
    "IzakMarais": "I have never seen the created breakpoint diagnostic line.\nLaunch.json:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch main.go\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \".\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nFolder layout is mainDebug.go in the GOPATH root.\nI built dlv from source 2 days ago from a fresh git clone, so I assume it is the latest. Output of dlv version is Delve version: 0.10.0-alpha.\nThis is running on Fedora 20 with xfce in a virtual box VM on a Windows host. (Looking forward to Windows support for the debugger). \n. Sorry, still not fixed. \n(I destroyed the VM this was in, so recreated everything with the latest versions, including vscode-go 0.6.19)\nConsole output very similar to before, e.g. coninuing, still no creating breakpoint. I can still break when using dlv from the command line. \nGorename is also not working; maybe this is in some way related? Maybe some GOPATH related issue? GOPATH is set in the terminal I used to lauch vscode from. The other tools (e.g. Peek definition) do work. \n\n. I get the same message: Failed to continue: \"Cannot find Delve debugger. Ensure it is in your 'GOPATH/bin' or 'PATH'.  on Windows.  Latest versions of delve (via go get) and vscode-go.\nUsing the GOPATH check in vscode:\nInfo: Current GOPATH:T:\\Documents\\werk\\vagrant\\shares\\sea-server\nNavigating to GOPATH/bin folder shows that delve is there:\n```\ndir\n   Directory of T:\\Documents\\werk\\vagrant\\shares\\sea-server\\bin\n...\n2016-08-05  11:54 AM        15\u00a0894\u00a0528 dlv.exe\n```\n. Also, is there an easy way to use VSCode to determine the byte offset of a symbol? It would help to debug issues like this using the command line tools. I'm counting number of characters from the start of the file by hand.. This looks like a duplicate of #977 and #962 . Perhaps the minimal example will help reproduce it #977 ? I'm on Windows.. > Somehow references from outside the current workspace are getting included in the codelens.\nIs that your case as well?\nNo, as the screenshots demonstrate, codelens shows fewer references than find all references, not more. . ",
    "rythmkraze": "@lukehoban Is there a way to set propose-builtins to false? . ",
    "voelzmo": "Thanks @lukehoban for the quick reply!\n\nCould you try quitting out of VS Code completely, then opening with code . from the folder you want to work in?\n\nThat's exactly what I'm doing. Atom has the same problems, so I'm already battle-proven concerning that :)\n\nThen, what do you see from Go: Current GOPATH?\n\nIt's still my GOPATH defined in the ~/.bash_profile, not the env set in the current terminal window I'm starting it from.\n. Thanks for submitting the vscode bug, @lukehoban! \n. ",
    "jrieken": "@bpasero will know\n. things have changed wrt to being able to read the diagnostics in the extension host but nothing else. Since those changes have great self host coverage I am confident. Debugging this, I see that the extension computes an empty array of errors:\n\n. Having a simple syntax error like this,\n``` go\nfumc bar(){\n    bioklr();\n}\n```\nmakes golint produce an error, but somehow go check is configured to read from stdout but not from stderr.\n\n. @lukehoban Yes, DiagnosticsCollection#set when called with an array of uri/diagnostics tuples has changes such that repeating tuples for one uri overwrites the previous data. The change wasn't on purpose.\nUltimately, the grouping here which was also in a way the root cause for this (#328) won't be needed anymore which I believe will yield in more easy to use API.\n. Latest is here: https://github.com/Microsoft/vscode/blob/master/src/vs/vscode.d.ts#L2803. It contains a deprecated signature that takes a column and the preserve flag and a newer which only has the preserve flag. \n@lukehoban Does you build script maybe pull in an older version of vscode.d.ts?\n. Yeah - I have fixed a bug for the Oct release that makes sure we honour Document and DocumentRange formatters.\n. why?. The MarkedString is two types: string and {language:string; value:string} When you use the former you can just use markdown syntax to write text with links, bold, italics etc. The latter is a code and get translated to ```language\\nvalue\\n```. It actually is contained in the former type and there for historic reasons. Rendering-wise only code is rendered in the editor-font, all the rest in the UI font. What you do this basically this:\nmarkdown\nThis is **not** bold?\nand not this:\nThis is not bold?. @bpasero might know. The notification story is currently being revisited, today afaik this isn't possible otherwise. . @asw Can you check the Developer Tools Console when this happens?. Interesting indeed. There is some sorting, namely by line number, provider, and column. \n@ramya-rao-a Do both code lenses come from the same provider?. Thank, the problem is that our sort isn't stable so equal items (which you code lenses are) might not keep their initial sort order... Feel free to forward this bug to me. Should be fixed with https://github.com/Microsoft/vscode/commit/8ac7e555d1790267bf58e1922fc2f737a4d1c1ab. > @jrieken Can you confirm that ${placeholder} is no longer valid and that we need to use ${tabstop:placeholder} instead?\nYes, ${foo} references a variable, not a placeholder. The adoption in #709 wasn't adding the right syntax? I guess we were to quick on https://github.com/Microsoft/vscode/issues/15573, outsiders got more detail, e.g, https://github.com/twxs/vs.language.cmake/issues/21. > To my knowledge, the implementation provider uses most of the same code as the references provider.\n@mjbvz Maybe this was totally communication failure but I wanted it to be like reference search but you didn't, see: https://github.com/Microsoft/vscode/issues/23925. Instead this is implemented as a \"go to (definition|type definition|etc)\"-thing which assumes going to the source of something is fast and therefore has no loading indication. . > @jrieken could this (Microsoft/vscode#47265) be caused by the outline view?\nWe have shipped outline view in summer and we didn't change how it schedules its updates. I'd be surprised if this is coming only now.. ",
    "bpasero": "@newhook isn't the list documented here:\ntypescript\n    export enum SymbolKind {\n        File,\n        Module,\n        Namespace,\n        Package,\n        Class,\n        Method,\n        Property,\n        Field,\n        Constructor,\n        Enum,\n        Interface,\n        Function,\n        Variable,\n        Constant,\n        String,\n        Number,\n        Boolean,\n        Array\n    }\nIf something does not show up nicely in vscode after you use those types it is most likely a bug on our end how these things are converted.\n. Actually we do some filtering on the handler side and the list we allow is: 'class', 'interface', 'enum', 'function', 'method'\n@aeschli can also chime in if this list should be configurable maybe.\n. @lukehoban I published vscode@0.10.7 with the ci-test command so you can go back from \"next\" to \"0.10.x\". Also, since 0.10.5 is released you do not need to configure a custom download URL!\n. I think this needs https://github.com/Microsoft/vscode/issues/239 and is a good scenario for having that as API.\n. There are already issues logged against the fact that messages cannot show more details. Please check first in our repo.. Yeah, the search @ GH is not very user friendly, I hit this dozen times a day \ud83d\udc4e . @ramya-rao-a it is @aeschli who does our icon themes. ",
    "rs": "What is the status of this PR? What\u2019s missing for its merging?\n. ",
    "AlekSi": "I don't think so. For example, go.test.package uses go.gopath from workspace settings.\n. go test can't be used with single non-test file. I'm talking about invoking go.test.file for package which has test files, but the current file is not a test. What I see in VSCode in this case:\nPASS\nok      github.com/foo/bar  0.013s\nSuccess: Tests passed.\nBut if fact no tests were run.\nIf the current file is a test file, it runs tests in this file.\nI suggest to either run tests in foo_test.go if the current file is foo.go, or not run tests at all and explicitly say that no tests were run.\n. vscode-go update released and works as expected. Thank you!\n. It works with \"go.formatTool\": \"gofmt\". So my guess it is something between goreturns, GOPATH and vendor/.\n. My settings don't have anything Go-related except \"go.gopath\" with a single path.\nMost, if not all, tools for Go (including gofmt, goimports and goreturns) work by parsing code into AST, modifying AST and printing it back. If Go code has syntax errors, it can't be parsed, and the tool just exits with an error message. That's why import is not removed by tool \u2013 tool did nothing.\nGo differentiates between the last element of import path and package name. For github.com/xanzy/go-gitlab, github.com/emicklei/go-restful and gopkg.in/Shopify/sarama.v1 package names are gitlab, restful and sarama. I suspect some part of vscode-go assumes that last part of import path equals package name. It's often, but not always, true.\n. I created a small example: https://github.com/AlekSi/vscode-bug\n. Unfortunately, it doesn't work. Please try with https://github.com/AlekSi/vscode-bug.. Sorry, nevermind, that one is another issue (#623).. Same here.. That also breaks formating on save with goreturns.. > Auto-complete completes sara to sarama.v1 instead of sarama. This will happen to all packages from gopkg.in due to the versioning supported there.\nIt has nothing to do with v1 and gopkg.in. For example, try with go-xerial-snappy:\n\n\nAs mentioned several times before, package name is defined by package clause in source code, not by last component of import path. cb0d2bc is incorrect.. I think a long-term solution would be to import packages normally, without relying on gopkgs (which does not work correctly in this case), and keep them in memory in the long-running process (gocode? Go language server? something new?).\nAnd thank you for all your work on this extenstion. I'm in love with it. \u2764\ufe0f. Go 1.10 supports go test -cover for multiple packages: https://golang.org/doc/go1.10#test Extending existing code to pass -coverpkg=all should be easy, no external tool is needed now.. @ramya-rao-a Do you intend to maintain your fork in the future? If yes, can you please enable issues in repository settings?. Go community tends to use 3 versions: tip/master, current and previous one. Currently, that's soon-to-be-1.9, 1.8 and 1.7.. Any reason why https://github.com/jesseweed/seti-ui/blob/master/icons/go2.svg is used instead of https://github.com/jesseweed/seti-ui/blob/master/icons/go.svg?. They use both: https://github.com/jesseweed/seti-ui/blob/master/styles/components/icons/mapping.less#L97. I wonder if it looks scary in Atom too, or differences between Atom and VSCode make it look good in Atom and scary in VSCode.. Removing $GOPATH/pkg and $GOPATH/bin, and reinstalling all tools is a good advice in general when updating OS or Go version. . Support for modules was merged into Go and will be released as an experimental part of Go 1.11. This message sums it up quite nicely: https://groups.google.com/d/msg/golang-dev/a5PqQuBljF4/61QK4JdtBgAJ.\nI don't see the reason to support golang.org/x/vgo tool separately.. Related to #816.. Yes, it's the same with golint. How to reproduce:\n1. Open a relatively big Go project.\n2. Add to settings\njson\n    \"go.lintTool\": \"golint\",\n    \"go.lintOnSave\": \"workspace\",\n3. Open a file.\n4. Add some spaces to any line, save. Spaces will be erased by gofmt, linter process will be created.\n5. Quickly repeat step 4 several times. You will have several concurrent golint processes. . The only reason why it is hard to notice that with go.lintOnSave set to package is because golint is fast for a typical package. Give it a huge package \u2013 and the problem will become visible: https://github.com/AlekSi/vscode-go-issue-916 Edit any file in pack/ by adding spaces, save, etc.\naleksi           43993  16.8  0.9  4444352  78444   ??  R     8:35PM   0:01.02 /Users/aleksi/Soft/GOPATH/bin/golint\naleksi           44061  16.2  0.1  4375924  11156   ??  R     8:35PM   0:00.16 /Users/aleksi/Soft/GOPATH/bin/golint\naleksi           44014  13.9  0.4  4376564  34780   ??  R     8:35PM   0:00.75 /Users/aleksi/Soft/GOPATH/bin/golint\naleksi           43984  10.6  1.1  4444672  90156   ??  R     8:35PM   0:01.10 /Users/aleksi/Soft/GOPATH/bin/golint\nPlease reopen.\n. > Is the above after multiple saves or for the single save?\nAfter multiple saves.. Go ahead! And thank you.. No, my issues about multiple saves of a single file.. I disagree: we love our mascot, and it does not go anywhere even with new branding.. That was a combination of the power of Twitter and the power of Golang Russian Slack chat. Unlike trying a new version of the extension, hitting \ud83d\udc4d and moving on takes much less time. Still, I follow you and will forward your requests to our chat.\nSo, to move forward, we need either a new icon or to add eyes to the current one.\nOn that picture \u2013 what size it is?. Can confirm that issue with 1.30.0.. I reported it yesterday with 1.29. \ud83d\ude04 Will try older versions.. That is not a new issue: I checked with 1.26 and still can reproduce it.\nCan you please move this issue to https://github.com/Microsoft/vscode?. See https://github.com/Microsoft/vscode/issues/66449.. ",
    "MattiasPernhult": "I have upgraded to 0.6.17 and it seems to work, thanks!\n. ",
    "ardan-bkennedy": "Wrong place\n. Brilliant and Thanks !!!\n. > We do have a separate setting called testFlags which gets used when running tests via the test commands\n\nDo you have buildOnSave set to \"workspace\"? That runs go test ./... (but does not actually run the test) using the buildflags. That's causing the problem. Couldn't find a way to build all files (including test files) in the workspace\nWhen this started happening I saw that option and switched it to package. That was a very nice change.\nFrom the past couple of releases we have been setting -i by default while building\nThis is always an excellent change. So then I guess I don\u2019t need to do anything!\nSo you can skip passing it via buildflags to fix the issue you are seeing\nAm on a vacation right now. Once am back, will fix the usage of flags so that the double use issue wont occur again\nThanks for responding on vacation.\n\nI think that the flags should be separate for each tool.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/Microsoft/vscode-go/issues/1064#issuecomment-312779251, or mute the thread https://github.com/notifications/unsubscribe-auth/ACLKRQA6gsiLf5cEnphNjmm0mEixytZQks5sKcNtgaJpZM4OLZhq.\n\n\n. > We do have a separate setting called testFlags which gets used when running tests via the test commands\n\nDo you have buildOnSave set to \"workspace\"? That runs go test ./... (but does not actually run the test) using the buildflags. That's causing the problem. Couldn't find a way to build all files (including test files) in the workspace\nWhen this started happening I saw that option and switched it to package. That was a very nice change.\nFrom the past couple of releases we have been setting -i by default while building\nThis is always an excellent change. So then I guess I don\u2019t need to do anything!\nSo you can skip passing it via buildflags to fix the issue you are seeing\nAm on a vacation right now. Once am back, will fix the usage of flags so that the double use issue wont occur again\nThanks for responding on vacation.\n\nI think that the flags should be separate for each tool.\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub https://github.com/Microsoft/vscode-go/issues/1064#issuecomment-312779251, or mute the thread https://github.com/notifications/unsubscribe-auth/ACLKRQA6gsiLf5cEnphNjmm0mEixytZQks5sKcNtgaJpZM4OLZhq.\n\n\n. ",
    "santagada": ":+1: thanks a lot!\n. ",
    "trstringer": "Perfect, Luke!  I'm glad I wasn't missing something.  I guess the next best thing to do would be to just wait for delve support for Windows, and until then I'll just compile and run my Go programs through CLI.\n. ",
    "tapir": "Can't we have this feature? A simple 'go run' would be highly appreciated.\n. I'm on arch linux. I can successfully debug go code with dlv debug some-go-code.go\nI tried this on Windows 7 as well and I get the same error there also. dlv.exe works on its own but not in the editor.\n. Nope it's mounted rw thats all.\nOn 11 May 2016 06:36, \"Ahmed W.\" notifications@github.com wrote:\n\nOn linux, are you trying trying to run the project on a filesystem mounted\nwith noexec?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/323#issuecomment-218353525\n. Ok we made some progress :)\nFirst of all, I don't know if it's a new feature or not but dlv debug some-go-code.go definitely works.\nNow I tried dlv debug --headless=true --listen=127.0.0.1:2345 --log some-go-code.go and it gives the same error above. Until I do this: dlv debug --listen=127.0.0.1:2345 --log some-go-code.go and then it works OK.\nSo whatever it is, it's about the headless mode and not a vscode-go issue.\n. I've solved the problem. The code that I was trying to debug was outside of the GOPATH/src. Now that I moved it back to there, debugger seems to work ok.\nUsing delve manually doesn't cause such behaviour so this still might be vscode-go related.\n. Interestingly this now stopped happening (VSCode 1.6.0 on windows). Let me first test on Linux as well before closing this, because there I'm using a previous version of VSCode-go and VSCode.\n. Hi,\n\ntried above setting on 2 different computer (windows and linux) with multiple size projects including very small ones. still no luck.. Hi,\ntried above setting on 2 different computer (windows and linux) with multiple size projects including very small ones. still no luck.. Actually, now I notice, other facilities such as automatically arranging imports, go to definition etc don't work either. Here is my global settings file (there is no workspace specific setting) \njson\n// Place your settings in this file to overwrite the default settings\n{\n    \"go.lintTool\": \"gometalinter\",\n    \"git.confirmSync\": false,\n    \"extensions.ignoreRecommendations\": true,\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"git.autofetch\": true,\n    \"[go]\": {\n        \"editor.formatOnSave\": true\n     }\n}. Actually, now I notice, other facilities such as automatically arranging imports, go to definition etc don't work either. Here is my global settings file (there is no workspace specific setting) \njson\n// Place your settings in this file to overwrite the default settings\n{\n    \"go.lintTool\": \"gometalinter\",\n    \"git.confirmSync\": false,\n    \"extensions.ignoreRecommendations\": true,\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"git.autofetch\": true,\n    \"[go]\": {\n        \"editor.formatOnSave\": true\n     }\n}. It does, yes. . Ok thanks. \nI'm not convinced it's the 750ms issue though because even a very simple hello world can't be formatted on my computer.\nHave a nice vacation.. Strangely started working on my Linux computer. Did nothing or maybe I've updated the whole VSCode package (that I'm not sure as I did not pay attention to what's in the update)\nWindows computer is still not working with the latest version of VSCode. Here is the requested change and it's result after a save in Go workspace: https://imgur.com/a/N4UfX\nI've also noticed other errors related to Go extension in the console. Will that cause any issues?\nFor people who doesn't want to look to the screenshot\n1- As far as I see, \"format\" is not engaged at all.\n2- VSCode complains that vscode-extension-telemetry missing (which is used by Go extension apparently). Re-instelled the extension and everything works again. Don't know why I didn't try that before...\nSo the actual bug is corruption on extension update then? Does anybody have similar error?. Any news on this? Ona freshly installed linux+vscode+go computer I'm unable to break successfully yet. . ",
    "sevein": "I've been experiencing this same issue with OSX and the fish shell. I've found that it only works when your launcher script exports a new environment variable that has not been defined before but it will fail with variables like GOPATH that were probably defined already. It could be related to @lukehoban's comment: https://github.com/Microsoft/vscode-go/issues/220#issuecomment-192095289.\nAlternatively, I'm looking at defining go.gopath in my workspace settings, it works now but I think it'd be best when variables like workspaceRoot are expanded in settings so I don't have to use absolute paths. Related issues: https://github.com/Microsoft/vscode/issues/3759 and https://github.com/Microsoft/vscode/issues/2809.\n. ",
    "axelgenus": "Those are two totally different programs and also the API for add-ons is different. There is another project on-going for supporting Golang on Visual Studio: https://github.com/tunnelvisionlabs/LangSvcV2.\n. ",
    "ctaggart": "There is now https://github.com/rogpeppe/godef/pull/25 which I installed with:\ncd $GOPATH/src/github.com/rogpeppe\nrm -rf godef\ngit clone https://github.com/grncdr/godef.git --branch vendor-support --single-branch\ncd godef\ngo install\nHowever, it didn't appear to fix it so this: \n\nIs it godef are another app that is needed for imports?\n. I am able to set the path with the environment variable, but the go.gopath workspace setting does not work for me in 0.6.38.\nThis works when GOPATH isn't in ~/.bash_profile: cd ~/go/nut; GOPATH=/Users/cameron/go/nut code ..\nThis does not:\nCamerons-iMac:nut cameron$ cat .vscode/settings.json \n// Place your settings in this file to overwrite default and user settings.\n{\n    \"go.gopath\": \"/Users/cameron/go/nut\"\n}Camerons-iMac:nut cameron$ unset GOPATH; code .\n\n. There are 3 sources for GOPATH:\n1. export in ~/.bash_profile such as export GOPATH=~/go\n2. environment variable such as GOPATH=pwdcode .\n3. go.gopath workspace settings .vscode/settings.json\nCurrently, if 1 is used, it wins even if 2 is used. The problems appears to be that VSCode load is sourcing ~/.bash_profile. If it didn't do that, I think the setting of GOPATH would make sense. \n. This is pretty easy to get wrong on the Mac with so many manual steps. I missed the step to set Code Signing to Always Trust.\nIn keychains select \u201cSystem\u201d, and you should find your new certificate. Use the context menu for the certificate (not the public or private keys), select \u201cGet Info\u201d, open the \u201cTrust\u201d item, and set \u201cCode Signing\u201d to \u201cAlways Trust\u201d.\n\nAfter enabling that and making the dlv executable again, debugging is working. :-)\n. ",
    "zoumo": "This one is fixed in https://github.com/rogpeppe/godef/pull/33. godef + godoc work well for me since godef fixed vendor support in https://github.com/rogpeppe/godef/pull/33. ",
    "rotemdan": "This simple test case seemed to reproduce the problem using a single file (a.go):\n``` go\npackage main\nimport ()\nfunc main() {\n    a := 34\n    a++\n}\n```\nTrying to rename ato b returned a 'no identifier at this position' error twice in a row. Repeating this several times (without modifying any of the code) sometimes fixed the problem. After trying to re-paste the code again rename sometimes worked and sometimes didn't. At some point rename seemed to succeed indefinitely and I couldn't reproduce the problem again, including after restarting vs-code several times. \nThere doesn't seem to a pattern here but I will continue experimenting. In any case, this shows that multiple files or complex programs are not needed to reproduce the problem. Line endings are set to LF as well so that may not be be the issue (though it still could be.. still investigating this particular option). I also made sure that the file was saved (hitting CTRL-S several times) and that did not seem to change anything.\n. I opened the same file in Notepad++ and enabled View -> Show Symbol -> Line Endings. I converted the file from LF to CRLF back and forth several times. It turns out the problem was that even when the file had LF (unix type) line endings, vscode-go still reported the offset for the target identifier based on CRLF line endings to go-rename, this explains the error given.\nWith the previous test case, having line endings of CRLF the a identifier would have an offset of 45 in the file, and the rename would work correctly. With LF, or having at least one line having an ending of LF, the offset of the identifier would still be incorrectly reported as 45, thus the error:\nCannot rename due to errors: Error: Command failed: C:\\Rotem\\Go\\bin\\gorename.exe -offset C:\\Rotem\\Go\\src\\GoRenameTest\\a.go:#45 -to b\nEdit: reopening the file while having LF line endings, vscode-go would rename correctly, but now when changing the line endings to CRLF it would yield an error.\n. @lukehoban \nThis series of steps seems to reliably reproduce the issue:\n1. Open an empty folder, add a new file 'a.go' with the content:\n``` go\npackage main\nfunc main() {\n    a := 1\n    a++\n}\n```\n1. Try to rename 'a' several times, it should work.\n2. Change the line endings through the UI to a different setting than the one that it is currently set.\n3. Try to rename 'a' several times, it should fail (with a 'no identifier at this position' error).\n4. Change the line endings back to the original setting.\n5. Try to rename 'a' several times, it should work.\n6. Change the line endings to a different setting and verify renaming fails.\n7. Reopen the file and renaming should work again.\n(Interestingly the problem occurs in a similar way even if the line endings are changed through an external program like Notepad++)\n\nI tried to 'dig' through the code a bit. If this is actually a problem with vscode itself it may be that the result of the call to document.offsetAt at this line is the one providing the incorrect offset? (I'm assuming that byteOffsetAt function is not related to the problem).\nIf that is really the case, and this is the implementation of offsetAt, then I speculate that perhaps when the user changes the line endings through the editor (which seems to start here and then here) the _lineStarts structure may not reset correctly and the line start offsets are not rebuilt when _ensureLineStarts() is called..\nI understand this is probably more appropriate to vscode itself, but I still can't be 100% sure this isn't a problem with the extension. I tried to clone the vscode repository and debug/modify this to see if this is really the case but at some point gave up as the build/debugging/run from dev build process seemed a bit too complex.. Maybe I'll try again in some other time..\n. @lukehoban \nI managed to build and run vscode from the master branch. I tried to force the _lineStarts structure to be rebuilt at every call to offsetAt (by commenting out line 330 and 337 in extHostDocuments.ts\n) based on my previous speculations, but it didn't seem to have any effect. I wasn't even able to hit the 'offsetAt' method at all with the debugger in any case.\nAnyway, I discovered another component to the problem. It seems like the gorename utility itself keeps changing the line endings back to LF when the rename succeeds and the endings are initially set to CRLF (including when the file is initially loaded this way). So the problem may occur more frequently, I mean, even when the line endings are not changed manually.\n. @lukehoban \nI haven't managed to get full debugging working yet, for some reason, but using console.log printouts for the plugin host I can verify with high certainty that the host api returns invalid offsets and the _eol property in BaseTextDocument (within extHostDocuments.ts) is not updated at all when the line endings are changed in the UI (and I guess from outside of it as well). This probably explains why forcing a refresh of line start offsets in _ensureLineStarts had no effect.\nIt seems like this is a general problem and I'm quite surprised it hasn't come up yet since it may effect all extensions that use this API. I believe fixing this would require multiple (possibly many) code changes, a bit beyond what I can do myself and definitely seems like something important that should be forwarded to vscode developers. I'll open an issue there.\n. @sdwarwick @ramya-rao-a \nI had this exact problem. Thanks to your research it quickly led to the reason: I had the Cygwin tools bundled diff executable in my PATH. I renamed the diff.exe executable to diff.exe.disabled and the problem was solved. So in my case it wasn't actually related to Git for windows. \nThis leads me to wonder, if there are multiple incompatible versions of diff utilities. Is it really safe to use just any executable that's available in the PATH?\nPerhaps a setting entry like go.useExternalDiffTool (boolean) or even go.diffToolPath (string) should be required to be set by the user for the external utility to be used?. ",
    "brunomvsouza": "Hi there!\nI'm giving the Go plugin (latest) for VS Code (latest) a try but I'm not being able to rename code occurrences.\n\"Cannot rename due to errors: Error: Command failed /foo/go/bin/gorename -offset /Users/foo/go/src/github.com/foo/hello/hello.go:#79 -to helloNurse\"\n\"rename: -offset \\\"/Users/foo/go/src/github.com/foo/hello/hello.go:#79\\\": no identifier at this position\"\nDo I have to do anything specific for it to work or it should just work?\nFound a this issue which led me to (https://github.com/Microsoft/vscode/issues/1580) which is already merged, but I'm still not able to rename symbols.\nCode: (tried to rename helloWorld to helloNurse)\n``` go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    helloWorld()\n}\nfunc helloWorld() {\n    fmt.Printf(\"hello, world\\n\")\n}\n```\n. Hmm nice. That's exactly what I'm seeing! \nThanks for looking into it. :bow:\n. ",
    "tnine": "Hey guys.  I know this issue is closed, but I'm also experiencing this.  I'm running Vscode on OS X 10.11.3.  Is there a workaround I could document and submit?\n. I'm also seeing this as well.  I get a lot of messages similar to \n\nUnexpected token L. Stopping the debug adapter.\n\nHowever the token seems to not just be L, it can be any character\n. To hopefully helpful move this along, I'm debugging the server side runtime of this source on OS X\nhttps://github.com/30x/shipyard/tree/docker-native-client.\nIs there anything I can do to contribute to help solve this issue?  The debugger is unfortunately unusable in it's current state.\nDelve revision \nhttps://github.com/derekparker/delve/commit/487215fd0954a9a65fdebcdf11bb64506b79e2c4\nGo Extension Version: 0.6.33\nGO version 1.6\n. Same here.  Os X 10.11.6 VS 1.3.1 Go ext 0.6.42.  Note that until I updated to 0.6.42, I did not experience this issue.  \nDelve Info:\nDelve Debugger\nVersion: 0.11.0-alpha\nBuild: v0.11.0\nGo Info:\ngo version go1.6.3 darwin/amd6\n. I'm not sure if this helps, but I built Delve from source, and this issue went away.  Specifically, I'm running this sha.  218c2b953b13c439a645ede821d3aaca7b71ff7b.  I don't know if this issue lies in delve or in the go plugin. \n. ",
    "dstpierre": "I'm running vscode v. 0.10.5 on Windows 10. I tried to removed the extension folder rm -rf ~/.vscode/extensions/lukehoban.Go.0.6.21 and the node_modules folder cannot be deleted from there. I uninstall via vscode and re-install. Still no luck.\nI will try from my Arch vm to compare. This is brutal at the moment though.\nEdit: Same behaviour in Arch Linux.\nI have a data access package ~this:\n``` go\npackage lib\ntype T struct {}\nfunc (t T) Do() {}\n```\nThe main package:\n``` go\npackage main\nimport \"lib\"\ntype abc struct {\n  t lib.T\n}\nfunc (a abc) do() {\n  // I have intellisense for a.t, but not for the Do function, which was working pre 0.6.21\n  a.t.Do()\n}\n```\nI have same issue with simple struct from the \"lib\" package:\ngo\nu := lib.SomeStruct{}\nu. // <- no fields are suggested when hitting the dot\n. After some digging it appears that gocode is not receiving my GOPATH anymore. After opening an issue on the gocode project it appears that gocode should be sent the GOPATH value. Could that be the last changes in goSuggest.ts at line 61, the addition of the env object resetting GOOS and GOARCH that now make the GOPATH to empty? Here's the log for the gocode -debug -s\n2015/12/23 07:26:11 Import path \"github.com/stripe/stripe-go\" was not resolved\n2015/12/23 07:26:11 Gocode's build context is:\n2015/12/23 07:26:11  GOROOT: c:\\go\n2015/12/23 07:26:11  GOPATH:\n2015/12/23 07:26:11  GOOS: windows\n2015/12/23 07:26:11  GOARCH: amd64\n2015/12/23 07:26:11  GBProjectRoot: \"\"\n2015/12/23 07:26:11  lib-path: \"\"\nThis issue is so annoying I think I will try to build a local version of the extension and try to remove or add the GOPATH in the env object, but maybe someone can confirm that it would be that in fact.\n. I tested locally and I can confirmed that when adding this line in goSuggest.ts at line 61 it's working:\njavascript\nvar p = cp.execFile(gocode, [\"-f=json\", \"autocomplete\", filename, \"c\" + offset], {\n  ...\n  GOOS: \"\",\n  GOARCH: \"\",\n  GOPATH: process.env.GOPATH\n}\n                }\nAre the GOPATH is sent by default elsewhere, am I the only one having the behaviour?\n. so far so good, thank you very much, that was a hard day yesterday without it. \n. same here, after updating to 1.8.0 with Go extension 0.6.51 on Arch Linux.. This is now at a point where I'm editing my Go code in vim, since vscode-go and vim-go seems to be using ~similar tools, I can't think of anything else than maybe my project is now too big for vscode?\nUsing it for Typescript and the CPU usage is ~normal. But as soon as I'm editing a Go code file the CPU jump in the 325 % usage. Using the SHIFT+F12 to see all references for example simply takes forever compare to vim-go :GoReferrers which does nothing to CPU and respond in 1-2 seconds and I'd say 35-45 seconds to vscode-go.\nUp until very recently there were no issue, but this is now un-usable for me.\nedit: I turned off auto-save and this seems to have helped a lot. I had go.formatOnSave false already, I started disabling the default vetOnSave, buildOnSave etc and noticed that the auto-save when checked was causing the high CPU usage.. @andreis my linter was already golint.\nIf that can help also, I've noticed that this bad performance occurs on project that I have multiple packages, i.e.\nroot\n|- package1\n|- package2\n|- package3\nWhen editing a project with only one package, the performance is much better, as in similar to pre 1.13.. ",
    "smithfox": "I met the same issue \n. I guess the issue only can be found on windows\n. ",
    "mafredri": "gometalinter supports interfacer, so I'd say efforts are better placed into integrating with it, there's an issue open for it #17.\n. That was quick, thanks! :smile: \n. Whenever auto complete isn't working for me, a go install in the project dir solves it. Does the same apply in your case? I suppose it's due to a stale pkg dir, but I don't always have this issue, haven't dug into possible solutions. \n. @lukehoban it's not just an issue of the code not building properly. This happens to me even when everything builds correctly, but I have not investigated it further, it could be that gocode ends up in a bad state or something.\n. I've experienced the same ever since the vscode 1.1.0 update. It's become really hard to fix all errors after a slightly longer coding session since only a few are shown at a time.\nEDIT: Just saw that my issue has probably been fixed in https://github.com/Microsoft/vscode-go/commit/e989b977b35a16d77280d56c36685ac4ba2dcc64, maybe it applies to this issue as well.\n. ",
    "gyf19": "+1\n. ",
    "abiosoft": "I'll try to reproduce this. \nThe initial error for the import path is most likely for unused import error. Probably autocomplete is attached to the import not showing error.\n. ",
    "luca-moser": "I've resolved the issue. By default gocode does not auto-rebuild packages. So setting gocode set autobuild true via console will  fix this issue and immediately show suggestion/code-completion.\nIt might be worth to share this information in the readme somewhere as I saw other people having the same problem.\n. Same as @tchoomak on 1.1.1, I still don't get any errors inside VS Code, for example when a package import is missing. Works without problems on 1.0.0.\n. Neither works for me:\n\nWindows 10 64bit\nVSCode 1.8.1\nGo 1.7.4. \n",
    "rogierlommers": "I had the same problem. gocode set autobuild true indeed solved it. Where does it save the setting?\n. Not sure what you mean by \"multi-paths\". I have a pretty average (out-of-the-box) golang installation. No customisations at all.. Is it known already when the officiel extension will be fixed? Can I help with something?. Thanks @ramya-rao-a , for all your work! Starting update........ ",
    "andy-zhangtao": "Hi Luke,\nFor the first feature, there maybe multiple folder to store packages. \nAssume there are three folder : \n1.$HOME/golang/go/(golang SDK package)\n2.$HOME/golang/thirdparty/(third party package)\n3.$HOME/golang/myproject/(myself package)\nIn vscode, user can put the three folders configuration to settings.json. But if user needs a new package, which store in an other folder($HOME/golang/novalidation/).\nIn current mode, user needs modify the settings.json and restart vscode. \nIf vscode has the first feature(refresh GOPATH), user only need modify the settings.json, don\u2019t need restart vscode. Meanwhile, if vscode has this feature, every project could has independent GOPATH setting, without interfering with each other.\nUser could set up a settings.json in each project.  The content of json file is as same as the global settings.json file. \nWhen user execute the refresh via command (GO:Refresh GOPATH), vscode will scan this settings.json file and reset the current process\u2019s env variable(env[GOPATH]).\nIf you have any questions, please let me know. \nThanks\nAndy\n\n\u5728 2016\u5e741\u670823\u65e5\uff0c\u4e0a\u53488:53\uff0cLuke Hoban notifications@github.com> \u5199\u9053\uff1a\n@andy-zhangtao https://github.com/andy-zhangtao It looks like this PR now includes two features:\nA command to refresh GOPATH\nA command to run a Go Build\nFor the first, could you explain the scenario in which you would use this? How would the new GOPATH be set and discovered during the refresh?\nFor the second, the existing way to accomplish this is with VSCode \"tasks\". See https://github.com/Microsoft/vscode-go/wiki/Usage-FAQ#how-do-i-use-vs-codes-tasks-with-go https://github.com/Microsoft/vscode-go/wiki/Usage-FAQ#how-do-i-use-vs-codes-tasks-with-go. That said, I think it will make sense to add a Go: Build and Go: Install commands. There was some work on these here: #134 https://github.com/Microsoft/vscode-go/pull/134. I think there are still some design questions that should be answered on this.\nI'm going to close this particular PR out for now, but if you'd like to submit as a PR for one or the other of these, feel free to reopen or create anew.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Microsoft/vscode-go/pull/174#issuecomment-174100458.\n. \n",
    "Jon-Murray": "+1\n. Heya,\nSo i've tried this now in two different environments. Both of which were a clean install (with a prior install of VS Code, no Go). Same result both times. My environment:\nGOPATH=C:\\Go\\SrcThirdParty\nGOROOT=C:\\Go\\\nMost recent version of delve, compiled with Mingw32 as detailed on their site with the GO15VENDOREXPERIMENT set to 1 (SHA-256 hash of dlv.exe in C:\\Go\\SrcThirdParty\\bin\\ ends with 090F65D)\nUsing the sample projects hello world:\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"hello world\")\n}\nwith a break at the first print statement, no luck. Output is:\n2016/02/02 16:21:14 debugger.go:55: launching process with args: [./debug]\n2016/02/02 16:21:14 debugger.go:246: continuing\nhello world\nMy User settings file looks like the below:\n// Place your settings in this file to overwrite the default settings\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": false,\n    \"go.formatTool\": \"goreturns\",\n    \"go.goroot\": \"C:\\Go\",\n    \"go.gopath\": \"C:\\Go\\SrcThirdParty\"\n}\nMy Launch.json looks like:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nLet me know if there is anything further i can do, or if there is a way i can step through delve with your addon. Nb. i've tested delve with gdb-esque commands (ie. i've manually set and stepped through breakpoints on the command line) and that worked fine.\nCheers again for the addon, other than this it is perfect.\n. Thanks for getting back to me so quickly, but that's effectively how the project is laid out at the moment. Even having the above structure, when i've navigated into folder1 -> projectname -> utils -> utils.go, and then trying to reference something from secondutils, i wouldn't get autocompletion.\nIs this expected behaviour? I mean, are you able to autocomplete from one subdirectory to another? I mean, as a practical example.. i'd expect to have \"networkUtils\" and \"stringUtils\" underneath one \"utils\" folder/namespace, referenced from the main project. Within networkUtils, i'd expect to call stringUtils for common functions/helpers i've made; i'd expect autocompletion here. Even laying out the project as you've recommended above i still get no completion, which is working fine in other IDEs.\nThanks. So i've managed to fix it. I've no idea how i did it, but for those reading i did the following:\nuninstalled/reinstalled go\nreset all environmental variables\nuninstalled vscode completely\ncleared my global settings \ndeleted all files under %localappdata%/temp/1\nre-set/installed all of the above\nrebooted\nThis seemed to fix the issue. My apologies for raising it, but thanks for the help.. ",
    "joegrasse": "I am running into this issue as well. delve stops at breakpoints on the command line, but vscode-go doesn't. \nIf I can provide any additional information to help out let me know.\n. That pull request fixed my issue.\n. ",
    "garthk": "I also tried \"mode\": \"debug\" and \"program\": \"${workspaceRoot}/thebinary\", and added an entry toargs`. Now the error is:\n2016/01/28 11:06:58 debugger.go:55: launching process with args: [./debug theargument]\ncould not launch process: could not fork/exec\n\u2026 and I'm accumulating quite a collection of zombied dlv processes which remain even after I quit Code.\n. ",
    "mvpmvh": "@lukehoban  - Both. I set an environment variable for my GOPATH, but when the editor didn't recognize that, I set the value in the settings \"go.path\". That did not work either for the debuggerr,  but the Current GOPath was set just fine. Couldn't identify the reasoning behind this. For w/e reason, I was able to get the debugger to work after uninstalling, re-installing and re-exporting my GOROOT/GOPATH. I have no idea what changed, but everything is working now.\n. ",
    "mikepc": "In my version of VSCode on Mac OS 10.9.5 debugging simply does not use any of these, it simply produces the above error message. I've tried a number of different combinations, including just settings.json, just bash_profile, even just .bashrc setting it in the command line.  \nIt is important to note that while editing my GOPATH is being recognized by the main app, but when the debugger starts with no set GOPATH, and the GOROOT it refers to is not the GOROOT I'm setting (anywhere I set it it, it points to /usr/local/Cellar/go/1.6.2/libexec, completely ignoring my setting of GOROOT to /usr/local \n. ",
    "shakahub": "+1\n. +1\n. ",
    "asampal": "@lukehoban , the two reports were separated by some time and a few restarts of VSC. In any case, I pulled the latest source for delve (checked the version reported by dlv version to make sure I was building the latest - 94a265f098f59ccd0c49b11b053bb6cbf1d05a17, at the moment), updated vscode-go to 0.6.26 and I'm still not seeing variables when I break on fmt.Println, as you suggested. Can you think of anything else to try?\n. I tried uninstalling and reinstalling the plugin, but I'm still not seeing variables.\n. ",
    "nexes": "I'm having a similar issue to this. Also, golint is not showing the errors and warnings any longer in the editor. The Golinter is working fine when ran in the cmd window.\n. Working on my end. Thank you so much.\n. ",
    "0x434d53": "Same problem here. The Developer Console shows:\nTypeError: Cannot read property 'file' of null: TypeError: Cannot read property 'file' of null\n    at /Users/xxx/.vscode/extensions/lukehoban.Go-0.6.26/out/src/goDeclaration.js:75:68\ne.onUnexpectedError @ workbench.main.js:91\n(anonymous function) @ workbench.main.js:91\ne.onUnexpectedError @ workbench.main.js:10\nu @ workbench.main.js:10\n(anonymous function) @ workbench.main.js:41\np @ workbench.main.js:6\n__dirname.undefined.F.enter @ workbench.main.js:6\n__dirname.undefined.t.Class.define._run @ workbench.main.js:6\n__dirname.undefined.t.Class.define._error @ workbench.main.js:6\nh.handle @ workbench.main.js:38\n(anonymous function) @ workbench.main.js:67\n(anonymous function) @ workbench.main.js:67\nemitTwo @ events.js:87\nemit @ events.js:172\nhandleMessage @ internal/child_process.js:685\nchannel.onread @ internal/child_process.js:440\n. ",
    "antifuchs": "Just a heads-up that there's now a PR to nsf/gocode that adds a package import path field to each autocomplete symbol. It might be possible to get all the information you need from that. Please test this out and let me know if it breaks things!. ",
    "segevfiner": "Note that there is even a VS Code API meant for this case: CompletionItemProvider.resolveCompletionItem.. This is a limitation of Delve. It can't set breakpoints while running, only while stopped. It should be communicated better to the user, but it's not really clear how this should be handled in the debug adapter protocol. Should the breakpoints request simply be delayed? Should the breakpoints be added unverified with a message explaining why? If so, what about breakpoints which are removed?\n@ramya-rao-a . It seems the current code to run Go tests rewrites package paths in the output to be full paths, I guess that's so they are clickable.\nVS Code tasks currently require running a process or a shell command, and won't support this easily (Without sticking an intermediate process wrapping go test in the way, which is ugly). Custom task executors is probably on the VS Code backlog (I think they actually planned to work on it this iteration: https://github.com/Microsoft/vscode/issues/65570). > I have pushed a commit for a small refactoring.\nAlso made the change to not reject the promise and instead to console.log the error and return the completion item without docs.\n\nPlease take a look and let me know if you are ok with those changes as well.\nI have tested the changes and it works well!\n\nLooks fine to me.\n\nOne concern is around the line breaks. I'll look into how we solved this problem in other languages and get back to you.\n\nI'm not sure myself how VS Code handles line breaking in plain string documentation and whether that's compatible with the output of go doc. I don't remember seeing special handling elsewhere in this extension, but correct me if I'm wrong.\nGo documentation comments do have some small amount of formatting, which we can try to convert to Markdown so that it shows nicer in VS Code. But that's best left to a separate PR, and done in all places that show Go documentation strings.\n\nDo you know what the behavior would be when using an older version of gocode that doesn't return the package info at all?\n\nIn older versions of gocode, package will probably end up as undefined. With the current code, it will end up looking the symbol in the current package. This might not be desirable... So maybe it should be prevented with a prompt to update gocode?. > And in the newer gocode, is package an empty string or undefined for symbols from current package? If we can differentiate between the 2 cases, then yes, we should skip the doc finding for the older gocode and prompt to update gocode\nIt's an empty string, the property always seems to exist in the newer version (gocode/formatters.go:160-161). I pushed a commit that should implement this.. Thanks for the review & merge! \ud83c\udf89 . > Thanks for all your work!\n\nI have pushed 3ba34e0 that converts the doc string to markdown. It looks better now.\n\nBut aren't Go documentation strings not Markdown? They don't render as Markdown in godoc, and friends. Wouldn't this cause random formatting issues when stuff that wasn't formatted as Markdown to begin with gets treated as such? \ngodoc comments do have some very minimal formatting: paragraph handling (Similar to Markdown) indented preformatted text, hyperlinks, and sections (If I'm not missing any...) But no things like bold/italic and such. \nSo I think the right way to handle this is to write a function which will convert any godoc formatting not already handled by godoc to Markdown but escaping any other construct so that it will appear plain as it does in godoc.\nWhat do you think?. > Can you point me to some examples?\nSome references:\nhttps://golang.org/pkg/go/doc/#ToHTML\nhttps://blog.golang.org/godoc-documenting-go-code\nThis shows the difference in rendering:\n```go\npackage docexample\n// Hello World!\nfunc Frob() {\n}\n```\nVS Code:\n\ngodoc:\n\nGranted, in this example it doesn't matter much, but there are likely plenty of examples where this can really mess up the formatting, I just don't have one on the top of my head.\nI remember vscode-python hitting a similar issue where Python comments are often formatted as reStructuredText, which isn't the same as Markdown. Treating it like it's Markdown lead to formatting errors in some libraries..  > I tested the case of symbol from same package, I don't get any docs...\nI do get them locally, but you have to save the file first as go doc has no support for unsaved files.\n. > \n\nIn the below case, I am triggering suggestions on a saved file\n\n\nYou found a bug. The problem is that the package import path likely ends with hello, and the function is called hello, so the invocation go doc -c -cmd -u hello in the hello package directory prefers to print the documentation for the package hello rather than the documentation for the function hello. See cmd/go - Show documentation for package or symbol.\nI guess we should handle the current package (package = \"\") case differently. If we can figure out the package for the current file, we can pass that instead. (Instead of setting cwd). I think we can get that by go list on the file's dirname. But I'm not sure how efficient that is.. > @segevfiner I found another case which wasnt handled before which is multi line docs with an empty line in between. I've added \nGrrr. I wish they could have just printed it in a machine parse-able format... after all it's probably already available in the parser AST like that...\n\n@segevfiner FYI: Turns out the package field from gocode is empty when the suggested item is an imported package.\nThis resulted in the go doc failing for such suggestions. Fixed this with\nvscode-go/src/goSuggest.ts\nLine 85 in 5a6b9a9\n if (!(item instanceof ExtendedCompletionItem) || item.kind === vscode.CompletionItemKind.Module) { \n\ngo doc will show the package documentation if we call it with only the package (Maybe an empty second argument also works). It would be nice to show that. But it seems to use a different output format for package documentation which also includes an exported item list at the end which will be annoying to strip (Nasty regex time?)\n\nThese items were also missing the detail part. So fixed that with\nvscode-go/src/goSuggest.ts\nLines 261 to 266 in 5a6b9a9\n if (suggest.class === 'package') { \n  const possiblePackageImportPaths = this.getPackageImportPath(item.label); \n  if (possiblePackageImportPaths.length === 1) { \n      item.detail = possiblePackageImportPaths[0]; \n  } \n }\n\nSo you will offer the package import path if you can figure out which package is it. e.g. No package with the same name. I guess gocode can be improved later to output the full package import path for package completions so as to make this more accurate.. I wonder if the right way to handle this is to define a DiagnosticCollection for each type of diagnostics source rather than the diagnostics severity, something like this:\nts\nbuildDiagnosticCollection = vscode.languages.createDiagnosticCollection('go');\nlintDiagnosticCollection = vscode.languages.createDiagnosticCollection('go-lint');\nvetDiagnosticCollection = vscode.languages.createDiagnosticCollection('go-vet');\ntestDiagnosticCollection = vscode.languages.createDiagnosticCollection('go-test');\nThat way we only clear the collection when running the corresponding type of tool, and we can correctly set the owner of build errors to go to fix the duplication issue.. > If we had a task definition that runs the linter, then we would still have the duplicate problem situation, right?\n\nIs there any situation where one would want both the build/lint/vet via tasks as well as build/lint/run via the save operation?\n\nYou wouldn't have the problem if you specify that the owner of the linter task's problem matcher is go-lint after this PR. (tasks.json schema.\nThe current go.buildOnSave builds the output into a temporary directory. If you want the final binary you will need to executego build separately. This makes sense, as overwriting the built binary on each save is quite unexpected, unless of course, the user configures such a thing explicitly.\nThis makes it likely for the user to want to configure a task that runs go build, at that point, it's also likely he will select the $go problem matcher as VS Code prompts for it, if not specified otherwise. This will lead to the duplicate diagnostics issue. Of course you can simply leave the task without a problem matcher as the automatic build on save will produce the same diagnostics, save for the Diagnostic.source property. But it stands to reason that the VS Code developers thought about this, and as such, introduced the de-duplication between diagnostics that share the same DiagnosticCollection.name and owner.\nAnother situation is a user defining a task that runs the linter on a larger scope than that configured for the automatic on save linting.\nAs such, it seems to me that that's the way DiagnosticCollection are meant to be used.. As I said, we will need to extend gocode and godef so that the also supply us with the receiver. Keeping backwards compatibility in mind, so we might have to add a flag so that they only print the receiver when asked.. In the godef case, it's also possible to parse the function signature by our self, based on the position godef gives us, in order to figure out it's receiver, if any.. From go test --help\n```\nThe 'go test' command rewrites or removes recognized flags,\nas appropriate, both before and after the optional package list,\nbefore invoking the test binary.\nFor instance, the command\ngo test -v -myflag testdata -cpuprofile=prof.out -x\n\nwill compile the test binary and then run it as\npkg.test -test.v -myflag testdata -test.cpuprofile=prof.out\n\n```\nAnd in code go/src/cmd/go/internal/test/testflag.go#testFlags.\nI guess either us or dlv will need to pickup this logic to properly separate and rewrite the test arguments as done when running go test. Or otherwise separate the test build/test run flags in our configuration and pass them appropriately, which feels less \"clean\".. > The debug test codelens always had its limitations, especially when the test relied on arguments being passed to it. This is such a case and the workaround is to fallback to using a debug configuration in the launch.json file and pass -ok as part of the args property.\nI don't think there is a convenient way to get a \"debug test under cursor\" this way... You will have to constantly edit the launch.json to debug a single test this way.. > Doesnt the existing Go to Implementation command help do the same? It uses guru implements.\nI think the \"Go to Implementation\" command as implemented will go to the implementation of an interface/method. If you use it on a variable it will just fail.\nWhat is asked here is being able to go to the definition of the type of the symbol under the cursor. Go to Type Definition on a struct variable should go to where that struct type is defined.. https://github.com/Microsoft/vscode-go/pull/2136 was merged. I guess this can be closed.. We are not resetting stackFrameHandles ever. This will cause memory consumption to infinitely raise. . Both are an issue technically. During one debug session you keep accumlating handles, and handles from a previous session remain after it ends (Doesn't VS Code close the debug adapter though?)\nAnother point is that changing the thread ID, frame ID might cause VS Code to consider this a new thread which can make it lose focus. I didn't check whether this PR has such an issue or not.. This is happening for me on both Windows 10, and macOS 10.14. All it takes for me is to debug the following code, breaking on the Println line, and than constantly running \"step over\":\n```go\npackage main\nimport (\n    \"fmt\"\n    \"time\"\n)\nfunc main() {\n    for {\n        fmt.Println(\"Hello, World!\")\n        time.Sleep(2 * time.Second)\n    }\n}\n```\nThe trigger for this seems to be new Goroutines opening, and VS Code deciding to open them expanded in the call stack view. But I think the issue is triggered by simply having more than one call stack expanded in call stack view.\nI  think this might be happening due to a bug in the debug adapter implementation, from the Debug Adapter Protocol Specification:\n```ts\ninterface StackFrame {\n  /*\n   * An identifier for the stack frame. It must be unique across all threads. This id can be used to retrieve the scopes of the frame with the 'scopesRequest' or to restart the execution of a stackframe.\n   /\n  id: number;\n// \n}\n```\nBut the code does this: https://github.com/Microsoft/vscode-go/blob/0ee759fd87cd0a44287e7a3a4dd081dde111cfb3/src/debugAdapter/goDebug.ts#L804-L813\nThe stack frame ID is merely the 0-based index of the frame in the thread, and not unique across all threads, as required by the protocol. This probably messes up VS Code manifesting as this bug. But this is still a guess and needs to be tested...\n@ramya-rao-a . I wrote a possible fix for the gopark jumping: #2207. Feel free to test the fix and comment if it works for you.. It seems that the extension is responsible for providing a log of the adapter protocol (VS Code doesn't supply a mechanism to log on its side)\nMaybe we should integrate LoggingDebugSession from the adapter module so that we can produce such a log which might help reveal the cause, if it's in the debug adapter that is.. @ramya-rao-a It got auto closed by GitHub. This should be reopened.. With the more verbose logging, it seems that the trigger for this is a scopes request on the currently debugged thread taking a long time, and while it's still not finished (The response is sent) a next (or step, etc.) request and response goes through. Immediately after that VS Code shifts it's focus to the next thread (You see a stacktrace request for it), and the next time you do next/step/etc. the focus will jump to that thread. I wonder if this is a bug in VS Code itself...\n(The scopes request is the one that does the large local/global variables query that is slow). Debugging VS Code a bit, it seems to me we are hitting this line in VS Code: vscode/src/vs/workbench/parts/debug/electron-browser/debugService.ts:496 and that call to focusStackFrame is selecting to focus some other thread than the one currently being debugged, and that thread is, more often than not, stopped on gopark.\nWe really shouldn't be reaching a code path where VS Code selects some arbitrary thread to focus, that seems like a bug in VS Code.\nThe code there is a bit weird too, like vscode/src/vs/workbench/parts/debug/electron-browser/debugService.ts:773 with that shift... selecting the second stopped thread...? \ud83d\ude15 \nI launched VS Code (Git build) with --remote-debugging-port=9222 and the extension installed (--extensionDevelopmentPath or just install it), used the \"Attach to VS Code\" launch configuration in VS Code's repository, and then conditional breakpoints to stop when it's requesting a stackTrace on threadId === 2.. > Hmm, I don't understand - github says ramya-rao-a requested changes, but I see no changes in last build. What should I do?\nIt's what GitHub says once someone submits a review for your PR until he reviews it again. If you already fixed what was requested of you in the review, than you just need to wait for the code to be reviewed again.. > #2121 - works as expected. The only thing missing right now would be some predefined key combination, e.g. Ctrl + F12 or Cmd + F12 (on macOS)\n\"Go to Type definition\" is a builtin command in VS Code. Once we add a provider for it, it shows up/becomes available. I don't think it would be right for this extension to add a default short cut for it, might want to open an issue on VS Code itself. But they seem quite apprehensive when it comes to adding new default keybindings. There are some really silly missing default keybinding, for example: \"Join Lines\", that is only bound in macOS, despite showing up quite prominently in the documentation. . #2100 #2099 seems working.\n2121 - See https://github.com/Microsoft/vscode-go/issues/2166 https://github.com/Microsoft/vscode-go/issues/2171. It's this commit: https://github.com/golang/tools/commit/9c8bd463e3aca40b6288cd14f7b7703206ff743b (I think). It adds the required information to the existing describe command.. That's how a debug adapter works by default in VS Code. But a debug adapter can implement Debug Adapter Specification - RunInTerminal and support a console debug configuration property allowing to select between running in internalConsole, integratedTerminal or externalTerminal.\nAlso see VS Code Documentation - Debugging - launch.json attributes.\nvscode-go currently does not support that.. > @segevfiner I am using\nhttps://play.golang.org/p/nYkRp-yG1aK (breakpoint in the Println line) which has the jump to proc.go issue. The fix in this PR doesn't fix the jump for me.\nDarn... Guess we'll have to keep digging.... > Using the changes in this PR and the sample code in\nhttps://play.golang.org/p/nYkRp-yG1aK (breakpoint in the Println line), I still see the jump to proc.go issue\nYeah it doesn't fix it. But it's something I have seen other debug adapter do, and what the spec suggests is required. It probably fixes other issues instead.. > @segevfiner I am leaning towards #2130 as well, your thoughts?\nYeah looks like a better idea.. Receivers are really common, I think it's best to have the user update IMHO.\nA variable will cause us to not use -r once the user does update godef until he reloads VS Code.. About https://github.com/Microsoft/vscode-go/blob/latest/src/goDeclaration.ts#L170... Does that even work?, It's a return inside the child_process.execFile callback, which is going to become the return value of the callback rather than the return value of the surrounding function.. @ramya-rao-a Oh noes.... The PR for godef wasn't merged yet! Like this, it's just going to request people to update godef ad nauseum.... I did add a warning about this in the PR description, guess it didn't stand out enough enough. :man_shrugging: . > It definitely was sending the response first, and then only in the call back from delve was handleReenterDebug called which would send the stopped event.\n\nI assumed you meant that we had to wait until delve is done to send the response.\n\nIt's the other way around. The original code was correct. You need to acknowledge the continue/next/etc request after passing it to the debugger and it accepts it, this updates the frontend to indicate that the code is now running. Once the debugger stops again you send the breakpoint event.\nYou can see that the UI won't update to indicate a running state after the PR and it does so correctly without it.. Yes. It does, and I did.\nCheck out the docs for GO111MODULE=auto to understand why setting GOPATH that way causes this to fail.. > \n\nThanks @hotinherre\n@segevfiner Can you try the latest beta version as well?\n\nTried Git master at cee927ddf216e1c8c6665c0732059c6a57c16aba with the following:\n```go\npackage main\nimport (\n    \"github.com/davecgh/go-spew/spew\"\n)\n// Foo is bar\nfunc Foo() {\n    spew.Println(123)\n}\nfunc main() {\n}\n``\nAnd an accompanyinggo.mod` of course.\nI got docs for Foo on hover and completion, and docs for spew.Println on completion but not on hover.\nCommand failed: C:\\Go\\bin\\go.exe doc -c -cmd -u github.com\\davecgh\\go-spew Println        goDeclaration.js:122\ndoc: no such package: github.com\\davecgh\\go-spew\nexit status 1. xregexp got dropped somehow from package.json. And it seems I didn't push the fix... I will fix this up later.. Hopefully the list of characters I escape in Markdown is correct, I took it from https://github.com/wooorm/markdown-escapes. Please review this bit when reviewing this PR.. Should be ready for review now.\n@ramya-rao-a . Should be ready for review now.\n@ramya-rao-a . I wonder if this is related https://github.com/golang/go/issues/29427.. I think that's how delve works.. #2215 seems working. I wish we could also get the godef part working too, but they don't seem responsive to the PR.... I figured I might as well store the document, in case more information is required from it in the future. It's just a pointer/reference after all. If, despite that, you wish to store only the filename, let me know and I'll change it.. Yeah, I got bitten by that when testing. It uses it to figure out which package we are in when gocode returns package===\"\". It likely also affects its decision if we are in module-aware mode.. When the completion is for the current package. That's how gocode behaves, at least.. How VS Code behaves in regards to this callback failing seems poorly documented. I will have to check this.. If you return with null/undefined, it simply uses the original item. It's documented here: CompletionItemProvider.resolveCompletionItem. I think that's the code handling this: vscode/src/vs/editor/contrib/suggest/suggest widget.ts:609-631.\nIt looks like it simply carries on without the extra information and doesn't abort the completion. Probably logging the error into one of the output streams. That's how I remember it behaving too, but please verify me. If you feel more comfortable with just resolve(item) than I can change it as such. But in that case we should log the error ourself somewhere. Otherwise it would be impossible to debug errors here.. Shouldn't this be .catch() so that it also handles errors in the then callback? Are you sure you want to squelch any errors here and not log them anywhere?. The same about .catch() as in goDeclaration.ts.. Unnecessary variable. Probably a left over from the previous code.. 1 !== 1...? So getCurrentPackage is never really called...\n~I think we only need getCurrentPackage in the package === \"\" case from gocode.~ We can simply call it there so that this function doesn't have to call go list unnecessarily. Leaving this function to only handle correct package paths. EDIT: Scratch that, I think hovers from godef also pass in a file path. Still gocode gives us the correct package path for symbols outside the current package, so go list is not necessary than.... With <=, aren't you also entering this loop with the first trailing empty line? Is this intended?. Sorry I misread the code. \ud83d\ude13 \nYou are right.. If we are already passing it via the debug configuration. We might as well add it to the schema. Otherwise it's still possible to specify it but VS Code will warn about it.\nWe are determining the path via getBinPath, this just allows to override it.. The code of the debug adapter seems, to me, to be designed to also run standalone from the extension,  and as such, seems to implement defaults for many of its configuration properties, not relying on the extension always passing them in.\nFor example:\nhttps://github.com/Microsoft/vscode-go/blob/510a90d2d5e472e3d9eddc6cb44ad2113cac03f1/src/debugAdapter/goDebug.ts#L345-L35\nAs such, I decided to keep it being able to find dlv by itself. If you still want to change it, just say so. \nNote that we can also add a message informing the user that dlv is missing after the call to getBinPath, but I was not sure which code snippet to use for that.. https://github.com/Microsoft/vscode-go/pull/2108#discussion_r232182526. There is this code: https://github.com/Microsoft/vscode-go/blob/633d1f28605d295146d38b0975fafe5598aab097/src/debugAdapter/goDebug.ts#L361-L364\nWhich I'm not sure how to change in this PR. We can also technically move the check that dlv was found to the call site of getBinPath. But, yet again, I'm unsure how to correctly check (path.isAbsolute/existsSync/other?), or how to report the error (throw/Promise.reject (The code is not returning a Promise currently)/window.showErrorMessage/other?).. This function is really more generic than just for the buildDiagnostics. Might be a bit hard to come up with good \"generic\" names for the parameters though \ud83d\ude1b . We might want something more prominent for this. Maybe promptForUpdatingTool? I started debugging only to see that my guru is outdated.\nBut this should only happen when guru is truly outdated not on just any failure to find the type.. I think we can just use a vscode.Position if we don't know the full range of the type definition. See: vscode.Location.. You are considering the directory of the file to be the cwd which is set above to be the directory where the file we invoke this on is. But you run guru with the working directory of the extension host. If guru does output relative paths in some cases this can cause a failure to calculate the correct path. guru seems to output absolute paths for me though.. I'm not sure where to place the constant since there are no other such constants in the file, should it be:\n1. Somewhere at file scope? If so, where exactly?\n2. Inside the class? (private/public?)\n3. Alternatively, we can import/require/JSON.parse the package.json and get it from there. (import/require will require enabling the TypeScript setting resolveJsonModule)\nIt's also quite possible that there are other default values strawn around that aren't constant, but I haven't checked.\n@ramya-rao-a . Yes, it assumes we don't get a stack trace deeper than 256 frames.. So what should we do? Any other ideas? The frameID is just a number.... Just a + is dangerous if we generate two random numbers that are close enough together. My experience with such things is that it will happen more often than not.. First thread can get, lets say, 100. Second can get say 200. 100 + 10000 and 200 + 10000. Adding 10000 doesn't fix the overlap.\nI don't see any real choice but to divide the key space so that each thread has a set amount of frame IDs to use. Whether that be by addition, shifting, or some other formula. That's basiclly a limitation of the debug protocl that frames are not identified by a [thread ID, frame ID] tuple like most debuggers actually really do.\nWe can play with the shift amount to give more space to frames in contrast to threads of course or even flip their order in the computed integer.. That's achieves exactly the same result as shifting and or-ing the thread number in, which this PR does. Just with addition, and with additional complexity of having to keep track of the new ID's we give to each thread.\nIf we want more space for frames we can just change the shift count. For example to 12 to get 2**12 = 4096 frames (A multiple of 4 power is nicer to look at in hex).. 12 sounds good or do you think we need more?. ",
    "maxence-charriere": "I didn't changed anything, I was on the dark theme all the time.\nBefore some part of the code like variables was in blue. \nCode asked me to update yesterday and change a lot of blue part in white.\nI know it's not a big issue but the code was (in my tastes) more readable than now, it was one of the reason I ended up using code over sublime or atom.\n. ",
    "davidbarsky": "vscode-go uses godef to search for code definitions. While it currently doesn\u2019t search through the vendor folder, there are two open pull requests to add support. I think that the VSCode team is waiting on godef, as per #162.\nHope that helps! :smile: \n. ",
    "fhbzyc": "http://123.59.44.48/2.png\nsee the picture, I have  $GOPATH/bin/gopkgs\nhttp://123.59.44.48/1.png\nnot auto show me the \"net\" , \"net/http\" , ......\nI hope it like this\nhttp://123.59.44.48/3.png\n. ",
    "danielalves": "I have a somewhat related problem. When I try to print a unicode character by its UTF-8 Hex representation, Code aborts the debugging session with the message: Error: Unexpected end of input. Stopping the debug adapter.. When running the program normally through the terminal, the unicode character is printed correctly.\n- Delve version\nDelve Debugger\nVersion: 0.11.0-alpha\nBuild: 758f76ffee71a511ff41d5c423a03c1bf1f9fbf4\n- Go version\ngo version go1.6 darwin/amd64\n- OS\nOSX Yosimite 10.10.5\n- How to reproduce\ngo\nfunc main() {\n    fmt.Fprintln(\"\\xF0\\x9F\\x92\\xA5\") \n}\n- What I expected to see?\nThe :boom: unicode character printed to the debug console, as it happens when using delve directly:\n```\n=>  56:     fmt.Println(\"\\xF0\\x9F\\x92\\xA5\")\n    57:     fmt.Println(\"After boom\")\n(dlv) n\n\ud83d\udca5\n\nmain.main() ./main.go:57 (PC: 0x27f5)\n    56:     fmt.Println(\"\\xF0\\x9F\\x92\\xA5\")\n=>  57:     fmt.Println(\"After boom\")\n```\n- What did I see instead?\n\nThe message Error: Unexpected end of input. Stopping the debug adapter.\n. Wow! In just a day! Thank you guys for the fix, @lukehoban @weinand \n. ",
    "weinand": "@lukehoban I'm trying to reproduce this... \n. @lukehoban I tried to reproduce the problem with an equivalent JavaScript program:\njs\nconsole.log(\"\u4e16\u754c\");\nconsole.log(\"\ud83d\udca5\");\nBut this just works fine in VS Code 0.10.10 (that is non-server mode of the debug adapter).\nThis means that VS Code and the debugAdapter implementation (from the node module) are able to send these unicode characters as OutputEvents correctly.\nThe corresponding code in node-debug is:\nts\n        process.stdout.on('data', (data: string) => {\n            this.sendEvent(new OutputEvent(data.toString(), 'stdout'));\n        });\nand in go-debug:\nts\n        this.delve.onstdout = (str: string) => {\n            this.sendEvent(new OutputEvent(str, 'stdout'));\n        };\nWhen debugging node-debug I see 'data' containing raw bytes and 'data.toString()' converts this into a correct string (the expected characters plus a newline).\nSince I don't (yet) have the go tooling installed, I haven't debugged the go-debug code, but could you verify that the 'str' argument shows the string correctly too?\n. In your package.json you can add a \"--debug-brk\" runtime arg:\njson\n                \"program\": \"./out/src/debugAdapter/goDebug.js\",\n                \"runtimeArgs\": [\n                    \"--debug-brk\"\n                ],\n                \"runtime\": \"node\",\nThen you can attach to your debug-adapter on port 5858.\n. @lukehoban thanks for your investigation and findings. I will create bugs for this on our side.\n. @lukehoban here is the request: https://github.com/Microsoft/vscode-node-debug/issues/52\nFor now you could just copy https://github.com/Microsoft/vscode-node-debug/blob/master/src/node/terminal.ts plus two scripts into your project.\n. @kisPocok the functionality previously available in terminal.ts has been moved to the VS Code core. A debug adapter can now just call runInTerminalRequest to launch the debug target in a configurable external terminal.\nSee how this is done for node-debug:\nhttps://github.com/Microsoft/vscode-node-debug/blob/master/src/node/nodeDebug.ts#L875 \nThere is no longer a need to copy terminal.ts and the additional AppleScripts into individual debugger extensions.\nHere is the section from the August 2016 release notes: https://code.visualstudio.com/updates/v1_5#_additions-to-the-debug-protocol and https://code.visualstudio.com/updates/v1_6#_configurable-external-terminal\n. @DeadGame try to debug a Go program that reads from stdin with delve from the command line (not VS Code). If this works, it should be possible to fix the VS Code problem. If not, then I don't think that the problem can be fixed in VS Code.\n(That's basically @roblourens guess from above).. @lukehoban In VS Code 0.10.10 we started to report syntax errors that occur when parsing the json messages received via 'stdout' from the debug adapter. One reason for these errors is a debug adapter that sends arbitrary output to 'stdout' which corrupts the debug protocol messages. This can happen if the adapter is using a library that logs to stdout.\n. @lukehoban since VS Code communicates with a debug adapter through stdin/stdout, a debug adapter must not use stdout for anything else. You can freely send output to stderr (which will appear on the VS Code dev tools console).\n. @lukehoban when your debug adapter runs in server mode, VS Code communicates via a socket (which is independent from the stdin/stdout pipe). So sending output to stdout cannot corrupt the debugging protocol. In non-server mode VS Code uses a stdin/stdout pipe which can become corrupted by the unexpected output.\n. @lukehoban As far as I know, translation is not (yet) required or planned for extensions not bundled with VS Code.\n. @lukehoban the checkboxes are persisted so they will stay for old workspaces. For newly created workspaces they should be gone.\n@isidorn any insights under what circumstances the checkboxes will disappear? \n. @harikb the delv debug adapter seems to send some unexpected data back via stdout or stderr. This breaks the communication mechanism between VS Code and the debug adapter.\nMoving to Go extension.\n. The VS Code debugger front end does not truncate strings in any way. So the 64 character limit is either imposed by the go debug extension or the go debugger itself.\n/cc @egamma @isidorn\n. Most likely the issue was a customised prompt for zsh (or any other shell) which breaks the code that copies the env variables (including PATH) into the VS Code environment. See https://github.com/Microsoft/vscode/issues/7343\n. The fix for Microsoft/vscode#7343 in the June release (1.3.1) was not sufficient to cover all cases.\nThe July release will have a better fix; you can try it already in the current insider release.\nIf you cannot use the insider release, just run VS Code from the command line and all will be good.\n. @sambengtson you are seeing this when debugging in Go, correct?\n. From @firelizzard18 on July 15, 2017 8:6\nUpdate: since the main thread is blocked, I can step twice and it goes back properly to the goroutine. So at least there's that.\nUpdate: nevermind, that doesn't really work. At least not in a useful and reliable way.. Debug adapters should not be concerned with pre-lauch task errors since these errors are dealt with by VS Code before a DA is lauched.\n/cc @isidorn . ",
    "rbatukaev": "Thanks a lot!\n. ",
    "v2ray": "Not sure where to put mode: test. Is it a debug flag?\nMy workflow is:\n1. Go to a _test.go file;\n2. F1 and Go: Run tests in current package;\n3. See the test result;\nThe output doesn't show any test files marked '// +build featureA' . I suppose the 'go test' command wasn't invoke with '-tags featureA'.\n. ",
    "CannibalVox": "+1, This makes it very uncomfortable to use build directives, since since they wont' be built at all.\n. That's plenty for me, thanks for doing that!\n. Still receiving this error.  Can confirm that dlv is on my PATH and not in my gopath/bin.  Running it manually from the command line works fine.  Have restarted vscode-go, can't figure out what's gone wrong.\n. ",
    "csholmq": "Whoops. Accidentally clicked the wrong repo last night :)\n. ",
    "nhooyr": "I'm working on this, hopefully done soon.\n. nsf/gocode#332 should be merged by tomorrow!\n. It's been merged.\n. ",
    "joshpearce": "You mean: [proj dir]/.vscode/launch.json ?\nI get a validation warning: \"Property externalConsole is not allowed\" and it doesn't work.\n. ",
    "louy2": "@weinand \nCould you elaborate on\n\nFor now you could just copy https://github.com/Microsoft/vscode-node-debug/blob/master/src/node/terminal.ts plus two scripts into your project.\n\nWhat \"two scripts\" do I need in addition to terminal.ts? And where in my project shall I copy them to?\n. ",
    "kisPocok": "Hi, I'm in the same shoes. The terminal.ts is missing. Could you tell me where I can find it?\nhttps://github.com/Microsoft/vscode-node-debug/tree/master/src/node\nThanks\n. > \"debug\" process is not being killed after Stop button is pressed.\nExactly the same error here.\nvscode 1.10.1\ngo extension 0.6.54\nmacOS 10.12.3\n@YCF Could you send me the binding code?\n{ \"key\": \"f4\",  \"command\": \"killall debug\"} doesn't work ofc :) Thanks!. I've also fixed the CRLF ending locally but the bug still there.\nps.: Cloned this repo (current master branch) then with launch extension works normally. . The current master version works for me. No errors so far.. Eureka, it works! \ud83d\udc4d . ",
    "cemsozgen": "Any updates on this?. ",
    "CreativeCactus": "@cemsozgen Try this in your launch.json:\nconsole - what kind of console to use, e.g. internalConsole, integratedTerminal, externalTerminal.\nhttps://code.visualstudio.com/Docs/editor/debugging\nSorry if this doesn't apply. I'm working in node.. ",
    "cheetahfm": "Can you say (approximately) when debugging with stdin will be available?. ",
    "KingRikkie": "There is a workaround however. I wrote a script that does the following:\n\nCompile your app without optimizations and inlining\nStart app in a new window\nAttach delve headlessly onto its process id. \n\nI then created a new task in VScode that starts the script and specified said task under preLaunchTask in a remote debug configuration in launch.json.\nIn my case a powershell script resting inside {workspaceRoot} compiling a pakage called 'main' in 'main' dir:\n```powershell\n$EXECUTABLE_NAME=\"main\"\n$EXECUTABLE_PATH=\".\\main\"\n$GoPath=((go env | Select-String -Pattern \"GOPATH=\" | Out-String) -split \"=\")[1].TrimEnd()\n$GoPath+=\"\\bin\"\nSet-Location $EXECUTABLE_PATH\nStart-Process go -ArgumentList 'build -gcflags \"-N -l\"' -Wait -NoNewWindow # compile without optimizations and inlining\nStart-Process \".\\$EXECUTABLE_NAME.exe\"\n$timeOut = 20\n$started = $false\nwait for process to start\nDo {\n    Start-Sleep -Milliseconds 250\n    $timeOut--\n    $Proc = Get-Process main -ErrorAction SilentlyContinue\n    If ($Proc) { \n        $started = $true \n    }\n}\nUntil ($started -or $timeOut -eq 0)\nIf (!($started)) {\n    Write-Error 'Process did not start' \n    Exit\n}\n$ProcId=($Proc | Select-Object -expand Id)\nStart-Process -FilePath \"$GoPath\\dlv.exe\" -ArgumentList \"attach $ProcId --headless --listen=:2345 --log\" -WindowStyle Hidden\n```\nThe task:\njson\n\"label\": \"debug-attach\",\n\"type\": \"shell\",\n\"command\": \"powershell -ExecutionPolicy UnRestricted -File ${workspaceRoot}\\\\debug-attach.ps1\",\n\"presentation\": {\n    \"reveal\": \"silent\",\n    \"panel\": \"shared\",\n    \"echo\": false\n}\nThe launch configuration:\njson\n\"name\": \"Attach\",\n\"type\": \"go\",\n\"request\": \"launch\",\n\"mode\": \"remote\",\n\"remotePath\": \"${workspaceRoot}\\\\main\",\n\"port\": 2345,\n\"host\": \"127.0.0.1\",\n\"program\": \"${workspaceRoot}\\\\main\",\n\"preLaunchTask\": \"debug-attach\",\n\"env\": {},\n\"args\": [],\n\"showLog\": true\nWhen I hit F5 now my app will pop up and debugging will automatically start, delve is hidden. There is however one problem with that workaround: #1552 . I though --log command would work the same way as it certainly is listed in the official documentation: https://github.com/derekparker/delve/blob/master/Documentation/usage/dlv_attach.md. ",
    "bikehike": "this would help with debugging online coding problems that use stdin for everything. ",
    "mbenkmann": "The Python support for VS Code at least on Linux seems to have a very simple implementation of this. When I launch a Python script with the launch config option  \"console\": \"integratedTerminal\" it actually runs the command to launch the program in the terminal. I can then simply switch to the terminal and interact as normal with the program. Would it not be possible to just do the exact same with with the delve call?. Correct me if I'm wrong, but right now the feature seems to be completely generic. It's a mapping that just works for all tools. Would limiting it to \"go\" not require adding extra checks just to take away features? \nAs for the usefulness for other tools, one issue I've run into several times already is that to figure out why something wasn't working (most recently why gogetdoc wasn't finding the docs for a symbol) I introduced a wrapper script that would log the parameters the tool was called with and its output. This feature would make this much easier and cleaner. Adding a script with the same name as a standard tool to a directory in the PATH is a clutch. With this feature I could do such testing in workspace settings so it wouldn't interfere with anything. \nAnd then there is the case of my goformat tool. Before it was added to the valid list of values for go.formatTool, I had to rename it to gofmt to avoid the error. Again, this mapping feature would have provided a cleaner solution.\nRight now I'm toying with the idea of developing an alternative to gogetdoc that works without compiling, so it would be faster. This mapping feature would make testing this tool easier because I could override gogetdoc in the workspace settings as opposed to fiddling with my PATH.\nTo put it simply: There are a lot of fringe uses for a generic mapping feature like this. If it doesn't make the code worse, I would keep the ability to remap all tools.. Speaking of my use cases, if this doesn't work already, please add the ability to use the ${workspaceFolder} variable in the mapping for a tool, so that I can have mappings in my workspace settings together with the tools they refer to.. The behaviour is really weird. It seems like during debugging function hovers work in all files EXCEPT for the one currently selected in the CALL STACK. I guess it's the debug hover that shows me a variable's current value that's the issue. It's only active for the current stack frame and seems to disable all the other hovers. The desired behaviour would be to show the debug hover only over variables and only when the Ctrl-key is not pressed. If either the mouse cursor is over something that's not a variable or if the Ctrl-key is pressed, the default editor hover should be shown.. It runs it, but I get a perpetual entry in my Problems tab, so that it always has the blue bubble, which makes harder to notice when I have an actual problem.. Thanks for the code pointers. I managed to implement it.\nSince goformat allows style options I think it would make sense to implement the following behavior:\nIf go.formatFlags == [] and go.formatTool == \"goformat\", then use a default set of flags that corresponds to\n\neditor.insertSpaces\neditor.tabSize.\n\nI would assume that this automatically fixes issue #1011 if the user is willing/able to set go.formatTool=\"goformat\".\nWhat do you think? Should I add this at\nhttps://github.com/Microsoft/vscode-go/blob/0.6.79/src/goFormat.ts#L31. But that's exactly the point. We should honor the user's setting of editor.insertSpaces. VSCode contains this default:\n\"[go]\": {\n    \"editor.insertSpaces\": false,\n    \"editor.formatOnSave\": true\n  },\nIf the user deliberately changes insertSpaces to true, he clearly does not want tabs. If he also deliberately changes go.formatTool to goformat, he clearly does not want standard gofmt formatting.\nI'm not suggesting any hidden defaults. I'm suggesting to use the user's settings.. I verified that the installation worked from VSCode by removing the package from my GOPATH. There were no issues.\nI just tried it again with a blank GOPATH and it worked.\nmkdir /tmp/go\nexport GOPATH=/tmp/go\ngo get github.com/mbenkmann/goformat/goformat\n\n. I think I know what the problem is. I have symlinks in the repo to make it buildable outside of GOPATH (for people who like to download stuff in /tmp). I assume you are on Windows and those symlinks don't clone for you, right? . I'll fix my repo and will get back to you when I've done so. Sorry for the wasted time.. Okay. I've fixed the repository. It should work without symlinks now. I've also changed the URL in goInstallTools.ts to the canonical URL which uses my own domain, because I've noticed that go get github/... creates 2 copies of the source tree, one in src/github.com/goformat and one in src/winterdrache.de/goformat. If vscode-go is supposed to add imports on \"Format Document\", then it doesn't seem to be working. Only if I set the formatTool to \"goimports\" does \"Format Document\" add imports. As for goimports' behaviour, it simply adds another import line without switching to the parentheses form, so it does not break the code.. I am not aware of any other magic packages aside from \"C\".. Having a brief a look at the code. The culprit seems to be src/goImport.ts:getTextEditForAddImport. As the code is currently written it simply inserts \"import (\" before the first import and then replaces \"import\" with \"\\t\". In a case like this\n```\nimport \"foo\"\n//...\nimport \"C\"\nimport \"bar\"\n```\nthat process works fine. It's only when the \"C\" is the first import that this breaks because it inserts the \"import (\" between the \"C\" and the comment. That's the actual issue. If the first package is preceded by a comment line, then the \"import (\" must be inserted before the comment. I don't even see this as a special case for \"C\". If someone writes code like this\n// Use package \"foo\" instead of \"newfoo\" because the latter is still too buggy\nimport \"foo\"\nconverting it to\n```\n// Use package \"foo\" instead of \"newfoo\" because the latter is still too buggy\nimport (\n  \"foo\"\n  \"fmt\"\n)\n```\nalso breaks the association between the package and the comment.\nSo the solution would look something like this:\nCurrent code:\nedits.push(vscode.TextEdit.insert(new vscode.Position(imports[0].start, 0), 'import (\\n\\t\"' + arg + '\"\\n'));\nFixed code (pseudo-code as I don't know vscode-go well enough):\ninsertBeforeLine = imports[0].start;\nwhile (insertBeforeLine > 0) && textOfLine(insertBeforeLine-1).matches(/^\\s*\\/\\//) {\n  insertBeforeLine = insertBeforeLine - 1 ;\n}\nedits.push(vscode.TextEdit.insert(new vscode.Position(insertBeforeLine, 0), 'import (\\n\\t\"' + arg + '\"\\n'));\nThis only handles // comments but I think that's fine. All of the examples in the documentation of cgo use these comments, so I'm sure 99% of programmers do that, too.\n. ",
    "bfhike": "This launch.json works where \"run.bat\" is a script that pipes an \"input\" file into node.js (on linux, make a run.sh instead).  When I press F5 in vs code, it starts node and attaches to the process, and I am able to set breakpoints in app.js.  I believe the runtimeArgs are needed to attach to the process.\n\n\"runtimeArgs\": [\n                \"--debug-brk=5858 --nolazy\"\n            ],\n\nrun.bat:\ntype input | node %*\nlaunch.json\n\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"node\",\n            \"request\": \"launch\",\n            \"program\": \"${workspaceRoot}/app.js\",\n            \"stopOnEntry\": false,\n            \"args\": [],\n            \"cwd\": \"${workspaceRoot}\",\n            \"runtimeExecutable\": \"${workspaceRoot}/run.bat\",\n            \"runtimeArgs\": [\n                \"--debug-brk=5858 --nolazy\"\n            ],\n            \"env\": {\n                \"NODE_ENV\": \"development\"\n            },\n            \"console\": \"integratedTerminal\",\n            \"sourceMaps\": false,\n            \"outFiles\": []\n        },\n        {\n            \"name\": \"Attach\",\n            \"type\": \"node\",\n            \"request\": \"attach\",\n            \"port\": 5858\n        }\n    ]\n}. \n",
    "lirao": "If anyone really need this, debugging with stdin is supported in console-only delve right now, you can upload to the latest delve master branch (or any version after May 2018). Here's how you do it: https://github.com/derekparker/delve/issues/1274#issuecomment-406969034 \n. Any updates? this only happens in the insiders build, but @alexandrudima moved it here so....\nI tried adding GOPATH into launch.json in addition to settings.json, but this isn't helping. The same project settings works perfect in stable VS code.\n. Well, I just updated to the latest Insiders, and debugging works again! Guess they fixed it :)\n. My GOPATH and GOROOT was defined in settings.json with \"go.gopath\" and \"go.goroot\". I use zsh as my shell, and GOPATH is defined in my ~/.zshrc.\n. @ramya-rao-a The corresponding issue in the delve repository (https://github.com/derekparker/delve/issues/65) has been closed since May, but after I've updated my delve to latest master, using it with vscode debug results in error messages instead of no response:\nTypeError: Cannot read property 'currentGoroutine' of null\n    at GoDebugSession.evaluateRequest (/Users/rli/.vscode/extensions/ms-vscode.go-0.6.85/out/src/debugAdapter/goDebug.js:774:41)\n    at GoDebugSession.dispatchRequest (/Users/rli/.vscode/extensions/ms-vscode.go-0.6.85/node_modules/vscode-debugadapter/lib/debugSession.js:416:22)\n    at GoDebugSession._handleData (/Users/rli/.vscode/extensions/ms-vscode.go-0.6.85/node_modules/vscode-debugadapter/lib/protocol.js:97:38)\n    at Socket.inStream.on (/Users/rli/.vscode/extensions/ms-vscode.go-0.6.85/node_modules/vscode-debugadapter/lib/protocol.js:18:44)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:191:7)\n    at readableAddChunk (_stream_readable.js:178:18)\n    at Socket.Readable.push (_stream_readable.js:136:10)\n    at Pipe.onread (net.js:560:20)\nDoes this mean this feature can finally get supported?\nBTW the usage instructions is here: https://github.com/derekparker/delve/issues/1274#issuecomment-406969034. I've tried on a terminal and it works! You have to fiddle between two terminals, but in vscode-go this can be hidden behind the interface right?. I'm not really looking into VSCode supporting the terminal (if I want to use the terminal I could just use the terminal) I'm interested in just debugging go code with interactive stdin input. A few months ago this wasn't even possible even on delve natively, so vscode can't possibly support this. But now that this mechanism is there in delve itself, when will vscode make use of it?. It's how they implemented it (that's why it's a bit wonky). One dlv connect terminal starts the delve session, and accepts only delve commands. The other terminal starts the dlv --headless debug yourprogram.go and reads stdin. (Quoting the comment I linked, \"Input for delve will go in the second terminal, input for your program will go in the first one.\")\nI'm not familiar with the code base, and so I'm not certain if this is something that should be implemented in the plugin as runInTerminal. The integrated terminal in VScode does have a space for stdin input, right? I'm really hoping to use that.. ",
    "bryanmacfarlane": "I was able to successfully debug stdin using remote debugging since it's that terminal I enter stdin (not the vscode window).\nTo make it easier, I created an alias in my bash env.  \nhere's my launch.json\njavascript\n    \"configurations\": [      \n        {\n            \"name\": \"Remote\",\n            \"type\": \"go\",\n            \"request\": \"launch\",            \n            \"mode\": \"remote\",\n            \"program\": \"${fileDirname}\",\n            \"remotePath\": \"${fileDirname}\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",            \n            \"env\": {},\n            \"apiVersion\": 1,\n            \"args\": []\n        }\n]\nNot sure if it's relevant but I also compiled my own delve to ensure I was getting latest.. ",
    "HowieLiuX": "using remote debug + vscode task:\ntask.json\n{\n    // See https://go.microsoft.com/fwlink/?LinkId=733558\n    // for the documentation about the tasks.json format\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"echo\",\n            \"type\": \"shell\",\n            \"command\": \"cd ${fileDirname} && dlv debug --headless --listen=:2345 --log --api-version=2\",\n            \"problemMatcher\": [],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            }\n        }\n    ]\n}\nlanuch.json:\n```\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Connect to server\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"${fileDirname}\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\n```\nRun the task using shortcut key(shift + cmd + B in Mac OS),  vscode will start a new shell and run the delve server.\nPressing F5 to debug the .go file. It works fine for me.. ",
    "najunuoyan": "any update on this, it should be a basic feature.. ",
    "luebken": "\nCould you try closing all of the VS Code windows and see if this works then?\n\nI always closed all windows.\n\nAlso - do you have a ~/.profile or similar which would be setting GOPATH to your \n/Users/mdl/workspace/golang folder?\n\nYes. I did. in ~/.bash_profile and removing it did help. \\o/ \nDo you have an idea why? As you see above env showed the current project path.\nAlso this means that in my setup I would need to re-install all the analysis tool for each project. Correct? \n. ",
    "saml": "Looks like this extension overwrites:\njs\nprocess.env.GOPATH\nOther environment variables persist.\nFor example,\nbash\nshell> GOPATH=\"/foo/bar\" FOOBAR=\"/foo/bar\" code .\nAfter VSCode is launched, go to Help > Toggle Developer Tools   and check the following in Console:\n``` js\n\nprocess.env.GOPATH\n\"/home/saml/go\"  // eh?\nprocess.env.FOOBAR\n\"/foo/bar\" // this is expected\n```\n\nExpected behavior is:\n1. If go.gopath is defined, this trumps GOPATH envvar.\n2. If go.gopath is not defined, use current session's GOPATH.\nIsn't above expected behavior sane?\n. @lukehoban I'm using zsh, ubuntu.\n``` sh\nNo workspace settings\n\u279c cat .vscode/settings.json\ncat: .vscode/settings.json: No such file or directory\nUser settings, but no go.gopath\n\u279c cat ~/.config/Code/User/settings.json \n// Place your settings in this file to overwrite the default settings\n{\n    \"editor.fontSize\": 18,\n    \"rust.rustfmtPath\": \"/home/sam/.multirust/toolchains/stable/cargo/bin/rustfmt\",\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"gofmt\"\n}\nDefining GOPATH in .zlogin\n\u279c grep GOPATH ~/.zshrc              \n\u279c grep GOPATH ~/.zshenv\n\u279c grep GOPATH ~/.zlogin\nGOPATH=\"$HOME/code\"\n```\nIt's weird. Even if I use the following goMain.js:\njs\n'use strict';\nfunction activate(ctx) {\n}\nexports.activate = activate;\nAnd launch vscode as:\n``` sh\nvscode is symlink to /opt/VSCode/code\n\u279c GOPATH=/tmp/1 GOPATH_=/tmp/2 GoPath=/tmp/3 FOOBAR=/tmp/4 vscode .\n```\nI get the following:\njs\nprocess.env.GOPATH\n\"/home/sam/code\"\nprocess.env.GOPATH_\n\"/tmp/2\"\nprocess.env.GoPath\n\"/tmp/3\"\nIt looks like it's related to the way vscode is executing. Variables defined in ~/.zshrc,  ~/.zshenv, or ~/.zlogin  cannot be overwritten in command line  like:\n``` sh\nThis is zsh\n\u279c grep FOOBAR ~/.zlogin\nFOOBAR=1  # I define this variable in ~/.zlogin\n\u279c echo $FOOBAR\n1\n\u279c bash\nNow bash\n$ echo $FOOBAR\n$ FOOBAR=foobar   notdefinedinzshenv=wow vscode .\nprocess.env.FOOBAR\n\"1\"\nprocess.env.notdefinedinzshenv\n\"wow\"\n```\nMaybe vscode executes zsh (my default shell) as login shell overriding variables passed on commandline...\nEDIT: VSCode does seem to execute shell as login shell. Tested this with bash as well.\n``` sh\nchsh -s /bin/bash\nvim ~/.bash_login  # export FOOBAR=1\nlogout and login\nFOOBAR=2 vscode .\nprocess.env.FOOBAR\n\"1\"\n```\nOut of curiosity, tested this with Atom editor as well:\n```\nFOOBAR=2 atom \nprocess.env.FOOBAR\n\"2\"\n```\natom respects FOOBAR=2 passed in command line.\n. I agree that altering GOPATH in an editor's extension is not a generally safe solution.\nWhen I put dependencies in vendor/ (go15vendorexperiment), vscode-go cannot find dependencies. That is because godef isn't aware of go15vendorexperiment like you said. \nWhen I put dependencies in vendor/src (multi-gopath), it's tricky to get vscode-go to find dependencies because vscode still executes login shell, erasing my project's multi-gopath setup https://github.com/Microsoft/vscode/issues/4779 .\nI am aware that I can set go.gopath to ${workspaceRoot}/vendor:/home/saml/go in .vscode/settings.json  to override how vscode deals with environment variables. But I cannot share my .vscode/settings.json with other developers cause they might not have /home/saml/go as their GOPATH.\nAs things currently stand, I can either:\n1. Wait for godef to support go15vendorexperiment and put my project's dependencies in vendor/.\n2. Or, wait for vscode to respect GOPATH environment variable that I set in my session and put my dependencies to vendor/src (multi-gopath).\n3. Or, wait for vscode-go to provide a way to override GOPATH environment variable in .vscode/settings.json in a way that can be shared with other developers (maybe ${workspaceRoot}/vendor:${env.GOPATH}).\n4. Or, wait for vscode-go to automatically augment GOPATH so that I don't have to share .vscode/settings.json (similar to how vim-go is working).\nLooks like go15vendorexperiment is preferred direction to multi-gopath when it comes to deciding where to store project dependencies. And, option 1 (waiting for godef) is probably the best way.\nBut, I want something that works now, until option 1 or option 2 is available. \nI have tried option 2 that isn't accepted yet.\nAnd, this is my attempt at option 4.\nThat leaves me with option 3. What do you think about supporting ${env.GOPATH} in .vscode/settings.json ?\nOr, are there other options?\nI did fork godef https://github.com/saml/godef . It works.. But some other tools that I use don't work well with vendor/ (go15vendorexperiment), making me hesitant to go to go15vendorexperiment  route. Multi-gopath works well with everything except  vscode and vscode-go. \nI feel like option 3  is acceptable solution. If so, I can close this and create new issue for option 3.\n. https://github.com/Microsoft/vscode/issues/1033#issuecomment-221226924\nThere's a way to make session GOPATH to be respected. Closing this. I can use multi-gopath and set session GOPATH for each project workspace.\n. ",
    "Tyriar": "/cc @joaomoreno @chrisdias \n. lgtm :+1: \n. Yes this is likely a case of confusion with .bashrc. You probably want to put the environment variable stuff in your ~/.profile file as you want them to apply globally, not just to bash. Check out http://serverfault.com/a/261807 for more info.. This was brought up for the git support recently, not sure what the result of that conversation was yet.\n\nThe actual command string might look like:\ncmd.exe /d /s /c bash.exe -ic '{command}'\n\nDoes adding bash.exe -ic work? Seems like a pretty good solution to me, if this is the direction the Go extension goes, @ramya-rao-a will probably need to make sure all paths are mapped to and from the /mnt/c/... and C:\\... formats correctly.\n\nIn your case, looks like it says \"\\usr\\local\\go\\bin\\go.exe\" which is weird to me because it is looking for an \"exe\" in a non Windows like path.\n\nWhat's probably happening here is it's assuming go.goroot is a standard Windows style path and transforming it so:\n/usr/local/go\n\\usr\\local\\go\n\\usr\\local\\go\\bin\\go.exe (look in the bin\\ for go.exe). This was brought up for the git support recently, not sure what the result of that conversation was yet.\n\nThe actual command string might look like:\ncmd.exe /d /s /c bash.exe -ic '{command}'\n\nDoes adding bash.exe -ic work? Seems like a pretty good solution to me, if this is the direction the Go extension goes, @ramya-rao-a will probably need to make sure all paths are mapped to and from the /mnt/c/... and C:\\... formats correctly.\n\nIn your case, looks like it says \"\\usr\\local\\go\\bin\\go.exe\" which is weird to me because it is looking for an \"exe\" in a non Windows like path.\n\nWhat's probably happening here is it's assuming go.goroot is a standard Windows style path and transforming it so:\n/usr/local/go\n\\usr\\local\\go\n\\usr\\local\\go\\bin\\go.exe (look in the bin\\ for go.exe). I think @joaomoreno knows the most about us fetching the environment on launch.. @ramya-rao-a VS Code's environment is build by launching a $SHELL process and parsing the output of env https://github.com/Microsoft/vscode/blob/8bb4ffb4efe724a2454f1a618b41edd7f45b661f/src/vs/code/node/shellEnv.ts#L27\n@brandon-schumann is $SHELL set to zsh? What's the output of echo $SHELL on a external terminal? . I would expect it to work then if $SHELL is zsh. @joaomoreno any ideas why ~/.zshenv is not being sourced in VS Code's environment?. Can you add the \\n if necessary on line 74? Also this should probably insert the same line endings as are used in the document (\\r\\n or \\n).\nts\nprocess.stdin.end(editor.document.getText() + '\\n');\n. Again will the editor handle the line ending conversions when required?\n. Remove these extra lines\n. Is gofmt included with Go?\n. getTools is called here and then again multiple times in installTools\n. Also you're not using the promise in then, why not do this?\nts\ngetGoVersion().then(version => installTools(Object.keys(getTools()), version));\n. Can we amend the tests to not lint on 1.5 instead?\n. I'm concerned about removing the 1.5 test and then never adding it back again. I think it's worth adding a conditional to https://github.com/Microsoft/vscode-go/blob/master/.travis.yml if that's all that needs to happen.\n. Does this work?\nbash\nif [ \"$(go --version)\" != \"1.5\" ]; then go get -u -v github.com/golang/lint/golint; fi\n. ",
    "chrisdias": "@lukehoban with the latest vsce (see https://github.com/Microsoft/vscode-vsce/issues/66) you should be able to simply republish and it will find the LICENSE file. \nOtherwise, put \"SEE LICENSE IN LICENSE\" in the license property in package.json (you might need to add a file extension to LICENSE in this case).\n. ",
    "patbaker82": "This is a problem in the atom editor as well.  It would be nice if we could stop the evaluation of the snippet.\nYou could also:\n- Remove main as a snippet prefix\n- Create snippet prefix pkgm that will create both the package main designation and the main function\n. I agree with @bennyscetbun.\n. ",
    "jtremback": "Thanks, sorry for the frivolous issue. Strangely, I've been unit testing the project the whole time so I'd assume everything is correctly installed.\n. I was able to fix this issue by uninstalling and reinstalling vscode-go and then running it on a \"hello world\" file with no errors and then introducing an error. I think it might have choked earlier because I was trying it for the first time on a file that already had errors and would not build.. Not sure what the issue was, but those steps worked for me so maybe it will help someone else.. ",
    "krulik": "I also have this issue and its not related to build or external dependencies.\nI have a package with types (structs) and some of them randomly autocomplete (in a different package) while some doesn't, couldn't find any patterns.. ",
    "nullbio": "I'd love to see this feature. Would be even better if it did merged syntax highlighting, i.e. if you had file.go.tmpl it did both template line highlighting AND Go syntax highlighting. This would be very useful for generation apps like https://github.com/vattle/sqlboiler -- example of some templates: https://github.com/vattle/sqlboiler/tree/master/templates -- note these are currently just using .tpl because no other editors seem to support merged syntax highlighting yet unfortunately.\n. ",
    "Depado": "I'd love to see this feature too. . That's quite the same as the Jinja support actually. That would be so cool \ud83d\udc4d . ",
    "andreis": "Working with xo and editing a lot of .tpl.go files, I'd absolutely love this feature!. Same here, same CPU, and it's driving me crazy. E.g. when saving (Cmd-S) it's often typing a few to a lot of ses.\n\nedit: \"fixed\" it by changing go.lintTool to golint from gometalinter.\n. I feel your pain. I've worked on Go projects with under 100 loc and it's the same deal. Something's fishy. My workaround is to just change the linter from gometalinter to golint until this gets fixed.. @ramya-rao-a none here, thank you \u2013 I'm on a different machine now so I'm not exactly a reliable data point\nThis is the config I use though https://github.com/andreis/cfg/tree/master/vscode. This confused me a bit until I realised I was out of $GOPATH. @ramya-rao-a just taking the chance to say you're doing an amazing job, I see you everywhere! \ud83d\ude04 . ",
    "kmanley": "Would be handy for ego templates too. ",
    "oneslash": "I am taking this. Hey guys, I am not sure how to implement it correctly.\nProblem\nI need to implement support of go templates inside ``. It is possible to do, however the upstream for vscode golang syntax support is in https://github.com/atom/language-go. I would need to make a change request first to the upstream repo and then pull it downstream into vscode (not to this project).\nThe atoms languge-go has three modes for golang:\n\nGo (file: go.cson) - basic golang syntax\nGo Template (file: gotemplate.cson) - support for go synxtax inside {{ }} but no HTML (please refer to the screenshot 1)\nHTML (Go) (file: gohtml.cson) - support for go synxtax inside {{ }} and HTML (please refer to the screenshot 2)\n\nThe reason I am stuck is, what should I do, there are several options which comes first to my head:\n\nAdd support for HTML and Go Templates inside `` into the main file\nCrearte a separate mode Go (Template + HTML)\n\nI would be happy to hear your suggestions.\nScreenshots\nScreenshot 1\n\nScreenshot 2\n\n. @ramya-rao-a, what do you think would be better?. @ramya-rao-a, yes you got it correct.\n@gertcuykens, the thing is, from what I understood, for PHP there are two modes, text.html.php and source.php. text.html.php - includes source.php inside, and it detects if it can use php syntax by <?php or <?. Go is a bit different, `` inside can be anything, not just HTML or Go templates.\n. @gertcuykens yes we can, and I can do it then if it is a common practice to name files. I usually develop services which are not exposed to a user so I am cannot decide.. it did help, however, why do I need to do build current package manually? . I will close this issue since go mods will be defecto standard for vendoring . rune is defined as data storage type in vscode, same as map and etc. @ramya-rao-a just saw the another PR, closing this. I like this feature!. I would also make go fmt default formatter. I was trying to debug it and found this, #2134 it might be related.\nWhat do you think @ramya-rao-a \nEDIT: It is not related. I will fix it today . @ramya-rao-a, could you check now?. @ramya-rao-a, would be great if you can look into it soon :) . seems like it is related to vscode not the extension. #2134 - tested and works without error \u2705 . @ramya-rao-a, not sure why tests are failing.. @ramya-rao-a, okay after rebase all tests are passing :). @ramya-rao-a, yes you are right, I will close this for now, I will be busy for one month.. @ramya-rao-a, I am almost done with PR, however, I am not sure how to display one time notifications.. @ramya-rao-a here is it https://github.com/Microsoft/vscode-go/pull/2234. @ramya-rao-a, shall we close this issue since the PR has been already merged?. @mrwonko here is the PR https://github.com/Microsoft/vscode-go/pull/2232\ncc: @ramya-rao-a . @rajdhandus feel free to fix it. since there was no PR from @rajdhandus, I have done mine #2316. have you tried to run Go: Install/Update Tools command?. @ramya-rao-a, sure, I am little bit overloaded with the new job and the city :) Will do later next week. ",
    "oschwald": "Right, I want to use tags.\n. ",
    "samuell": "@freeformz Ok, IC!\n. ",
    "pyros2097": "I was wondering whether they functioned the same. Anyway thanks for the stackoverflow link got godoc installed.\n. ",
    "NikosEfthias": "same problem here and no idea how to fix . Icant understand how this issue was closed without a solution ? \n. yes \n. well i was saving and format on save is true so i think thats the issue its just a habit to save after every single word i write \n. ",
    "ebraminio": "Note to myself for the next time:\nsudo apt install golang-go.tools\nsource\n. ",
    "luisaceituno": "For anyone using Fedora or dnf, what worked for me was to run:\nsudo dnf install golang-godoc\n. ",
    "Gaboose": "For Arch Linux:\nsudo pacman -S go-tools\ngo-tools includes godoc: source\n. ",
    "stawidy": "For openSUSE:\nsudo zypper in golang-org-x-tools\ngolang-org-x-tools includes godoc: source. ",
    "pasdoy": "For OSX, or any other OS:\ngo get golang.org/x/tools/cmd/godoc . ",
    "gorsand": "Well, I've just fixed the vscode problem with godoc by simply:\nsudo apt-get install golang-golang-x-tools\n(Ubuntu 16.04). ",
    "joonathan": "process.env['PATH']\n\"/Users/joonathan/.google/google-cloud-sdk/bin:/Users/joonathan/Development/Go/bin:/usr/local/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/MacGPG2/bin:/Users/joonathan/.google/google-cloud-sdk/bin:/Users/joonathan/Development/Go/bin:/usr/local/heroku/bin\"\nprocess.env['GOROOT']\nundefined\n. Sadly when I get this error there is nothing in the console. But I tracked down the issue to having go.goroot defined in my settings.json. When I remove the property I'm not seeing Error: Error: spawn ENOTDIR errors.\nSome other errors I did pick up from console during usage though:\nCannot read property 'lines' of null: TypeError: Cannot read property 'lines' of null\n    at /Users/joonathan/.vscode/extensions/lukehoban.Go-0.6.31/out/src/goExtraInfo.js:13:39\n    at process._tickCallback (node.js:369:9)\n[uncaught exception]: TypeError: Cannot convert object to primitive value\nTypeError: Cannot convert object to primitive value\n    at new Error (native)\n    at Client.trackException (/opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/node_modules/applicationinsights/Library/Client.js:67:25)\n    at e.logException (file:////opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:23:30848)\n    at e.log (file:////opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:112:10791)\n    at t.handleEvent (file:////opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:68:2881)\n    at t.e.publicLog (file:////opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:68:66)\n    at t.publicLog (file:////opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:68:5108)\n    at t.e.flushErrorBuffer (file:////opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:67:30087)\n    at file:////opt/homebrew-cask/Caskroom/visual-studio-code/0.10.1/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:67:29947\nUncaught TypeError: Cannot convert object to primitive value\n. ",
    "jkhelil": "+1 have the same thing here\n. Cannot read property 'line' of null: TypeError: Cannot read property 'line' of null\n    at /home/USER/.vscode/extensions/lukehoban.Go-0.6.35/out/src/goSignature.js:19:20\n    at process._tickCallback (node.js:369:9)e.onUnexpectedError @ workbench.main.js:110(anonymous function) @ workbench.main.js:110e.onUnexpectedError @ workbench.main.js:27u @ workbench.main.js:27(anonymous function) @ workbench.main.js:27(anonymous function) @ workbench.main.js:27\nworkbench.main.js:27 WARNING: Promise with no error callback:4\nworkbench.main.js:27 Object {exception: null, error: Error: Cannot read property 'line' of null\n    at /home/USER/.vscode/extensions/lukehoban.Go-0.6.35\u2026, promise: n.u\u2026d.t.C\u2026s.d\u2026e._oncancel, handler: undefined, id: 4\u2026}\nindex.html?config={\"pathArguments\"%3A[\"%2Fhome%2FUSER%2Fpoc%2Fgolang%2Fsrc%2Fgithub.com%2FjUSER%\u2026:26 [uncaught exception]: TypeError: Cannot convert object to primitive valueonError @ index.html?config={\"pathArguments\"%3A[\"%2Fhome%2FUSER%2Fpoc%2Fgolang%2Fsrc%2Fgithub.com%2FjUSER%\u2026:26(anonymous function) @ index.html?config={\"pathArguments\"%3A[\"%2Fhome%2FUSER%2Fpoc%2Fgolang%2Fsrc%2Fgithub.com%2FjUSER%\u2026:98emitOne @ events.js:77emit @ events.js:169window.onerror @ /home/USER/poc/VSCode-linux-x64/resources/atom.asar/renderer/lib/init.js:74t @ workbench.main.js:64\nindex.html?config={\"pathArguments\"%3A[\"%2Fhome%2FUSER%2Fpoc%2Fgolang%2Fsrc%2Fgithub.com%2FjUSER%\u2026:29 TypeError: Cannot convert object to primitive value\n    at new Error (native)\n    at Client.trackException (/home/USER/poc/VSCode-linux-x64/resources/app/node_modules/applicationinsights/Library/Client.js:67:25)\n    at e.log (file:////home/USER/poc/VSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.js:109:21317)\n    at t.handleEvent (file:////home/USER/poc/VSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.js:64:12632)\n    at t.e.publicLog (file:////home/USER/poc/VSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.js:64:9810)\n    at t.e.flushErrorBuffer (file:////home/USER/poc/VSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.js:64:7819)\n    at file:////home/USER/poc/VSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.js:64:7679onError @ index.html?config={\"pathArguments\"%3A[\"%2Fhome%2FUSER%2Fpoc%2Fgolang%2Fsrc%2Fgithub.com%2FjUSER%\u2026:29(anonymous function) @ index.html?config={\"pathArguments\"%3A[\"%2Fhome%2FUSER%2Fpoc%2Fgolang%2Fsrc%2Fgithub.com%2FjUSER%\u2026:98emitOne @ events.js:77emit @ events.js:169window.onerror @ /home/USER/poc/VSCode-linux-x64/resources/atom.asar/renderer/lib/init.js:74t @ workbench.main.js:64\n/home/USER/poc/VSCode-linux-x64/resources/app/node_modules/applicationinsights/Library/Client.js:67 Uncaught TypeError: Cannot convert object to primitive value\n. ",
    "pariz": "Same here. Works when unsetteing go.goroot. Weird problem. I'll take a look and see if I can submit a PR with the fix.\n. ",
    "brusbilis": "Quiet similar here\nsh\n`spawn EACCES: Error: spawn EACCES  \n    at exports._errnoException (util.js:890:11)  \n    at ChildProcess.spawn (internal/child_process.js:302:11)  \n    at exports.spawn (child_process.js:379:9)  \n    at Object.exports.execFile (child_process.js:151:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:184:20)\n    at /home/brus/.vscode/extensions/lukehoban.Go-0.6.39/out/src/goSuggest.js:124:16\n    at GoCompletionItemProvider.ensureGoCodeConfigured (/home/brus/.vscode/extensions/lukehoban.Go-0.6.39/out/src/goSuggest.js:116:16)\n    at GoCompletionItemProvider.provideCompletionItems (/home/brus/.vscode/extensions  /lukehoban.Go-0.6.39/out/src/goSuggest.js:31:21)\n    at /home/brus/Documentos/VSCode-linux-x64/resources/app/out/vs/workbench  /node/extensionHostProcess.js:17:4899\n    at /home/brus/Documentos/VSCode-linux-x64/resources/app/out/vs/workbench  /node/extensionHostProcess.js:7:12373`\nDebian testing\nVSCode 1.1.1\ngo version go1.6.2 linux/amd64\nvscode-go Extension 0.6.39\n. Same as @thewhitetulip in #2065 adding display: none; to class global-message-list makes box disappear but the problem persists.\nI made the change to the file \nVSCode-linux-x64/resources/app/out/vs/workbench/workbench.main.css\n. ",
    "thewhitetulip": "@BrusBilis  I got rid of it by using the latest Go plugin from luke. The other one gives this error\n. @ramya-rao-a Just upgrading the Go plugin will fix this issue.. I am not sure what was wrong, when I was writing https://github.com/thewhitetulip/prettydiff, I had to manually add the gofmt on save thing in settings.json.\nThanks for letting me know!\n. It is about excess Energy being used and not CPU, I am not sure if this is the issue. I am using Sierra and will check after installing new binaries.. @ramya-rao-a I am sorry, I was on a vacation, will reply back in 12hrs. @mattetti I have a MBP 2012, 8hrs+ battery when I don't use VSCode, I still haven't gotten time to download and test the new binaries, I would love to use VSCode if it took equal or a little bit more energy than vi.. @mattetti Well, when I write Go using VSCode, then after five minutes, it pops up in \"apps that use significant energy\". I tried with Python, but it seems that Go extension is causing this issue. But even if this isn't the case, surely due to electron rendering vi still rocks.\nIf you give me specific information which you require, I'd be happy to give them. I Love VSCode, but my MBP runs only for 4hrs max if I use it, I didn't buy a MBP for running it for 4hrs! I want the full 8hrs!. @ramya-rao-a Yes, I feel it is appropriate to close this issue since we have established that energy is being used without this extension. I must say (again), I love how you guys(MS) are handling this project, fabulous! Not in my wildest dream had I thought that MS would change the way devs write code on Linux!. ",
    "pjtatlow": "I had this same issue on Mac and Linux with version 0.6.43, but setting \"go.vetOnSave\" to false fixed it. Hope this helps!\n. ",
    "BrendanBall": "same error:\nshell.ts:441spawn ENOTDIR: Error: spawn ENOTDIR\n    at exports._errnoException (util.js:1026:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at exports.spawn (child_process.js:392:9)\n    at Object.exports.execFile (child_process.js:155:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:195:20)\n    at /home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:178:12\n    at getGoVersion (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:177:12)\n    at getMissingTools (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:160:12)\n    at Object.setupGoPathAndOfferToInstallTools (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:135:5)\n    at activate (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goMain.js:43:22)e.onUnexpectedError @ shell.ts:441\nprocess.env['PATH']shell.ts:441spawn ENOTDIR: Error: spawn ENOTDIR\n    at exports._errnoException (util.js:1026:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at exports.spawn (child_process.js:392:9)\n    at Object.exports.execFile (child_process.js:155:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:195:20)\n    at /home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:178:12\n    at getGoVersion (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:177:12)\n    at getMissingTools (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:160:12)\n    at Object.setupGoPathAndOfferToInstallTools (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goInstallTools.js:135:5)\n    at activate (/home/brendan/.vscode/extensions/lukehoban.Go-0.6.44/out/src/goMain.js:43:22)e.onUnexpectedError @ shell.ts:441\n. ",
    "ShionRyuu": "error +1\n```\npawn ENOTDIR: Error: spawn ENOTDIR\n    at exports._errnoException (util.js:1026:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at exports.spawn (child_process.js:392:9)\n    at Object.exports.execFile (child_process.js:155:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:205:20)\n    at /home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/util.js:122:12\n    at getGoVersion (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/util.js:121:12)\n    at Object.isVendorSupported (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/util.js:142:12)\n    at Object.setupGoPathAndOfferToInstallTools (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/goInstallTools.js:150:12)\n    at activate (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/goMain.js:44:22)\nworkbench.main.js:132 spawn ENOTDIR: Error: spawn ENOTDIR\n    at exports._errnoException (util.js:1026:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at exports.spawn (child_process.js:392:9)\n    at Object.exports.execFile (child_process.js:155:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:205:20)\n    at /home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/util.js:122:12\n    at Object.getGoVersion (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/util.js:121:12)\n    at Object.setupGoPathAndOfferToInstallTools (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/goInstallTools.js:151:12)\n    at activate (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/goMain.js:44:22)\n    at Function.t._callActivateOptional (/usr/share/code/resources/app/out/vs/workbench/node/extensionHostProcess.js:12:30819)\nError: spawn ENOTDIR\n    at exports._errnoException (util.js:1026:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at exports.spawn (child_process.js:392:9)\n    at Object.exports.execFile (child_process.js:155:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:205:20)\n    at /home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/util.js:122:12\n    at Object.getGoVersion (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/util.js:121:12)\n    at definitionLocation (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/goDeclaration.js:15:19)\n    at GoDefinitionProvider.provideDefinition (/home/ryuu/.vscode/extensions/lukehoban.Go-0.6.51/out/src/goDeclaration.js:148:16)\n    at /usr/share/code/resources/app/out/vs/workbench/node/extensionHostProcess.js:11:19179\n``. @ramya-rao-a You are right. GOROOT is changed after I switch to a new go version using gvm. Now it's working correctly after I resetgo.goroot`.. ",
    "indrgun": "error +1\n/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:29 spawn ENOTDIR: Error: spawn ENOTDIR\n    at exports._errnoException (util.js:1022:11)\n    at ChildProcess.spawn (internal/child_process.js:313:11)\n    at exports.spawn (child_process.js:399:9)\n    at Object.exports.execFile (child_process.js:160:15)\n    at Object.module.(anonymous function) [as execFile] (ELECTRON_ASAR.js:200:20)\n    at Promise (/Users/ingunawa/.vscode/extensions/lukehoban.go-0.6.63/out/src/goSuggest.js:198:16)\n    at GoCompletionItemProvider.ensureGoCodeConfigured (/Users/ingunawa/.vscode/extensions/lukehoban.go-0.6.63/out/src/goSuggest.js:189:16)\n    at GoCompletionItemProvider.provideCompletionItemsInternal (/Users/ingunawa/.vscode/extensions/lukehoban.go-0.6.63/out/src/goSuggest.js:38:21)\n    at GoCompletionItemProvider.provideCompletionItems (/Users/ingunawa/.vscode/extensions/lukehoban.go-0.6.63/out/src/goSuggest.js:35:21)\n    at /Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:23:355556. I upgraded Go via homebrew and then tried editing go source file for 1st time in VSCode.  The go extension was installed long before editing the go source file.  I do not make any change yet to both VSCode User and Workspace setting wrt to go.\nSent from my iPhone\n\nOn Aug 8, 2017, at 5:28 PM, Ramya Rao notifications@github.com wrote:\n@indrgun Are other features like formatting, linting, go to definition features working as expected?\nHave you updated any of these settings in your user/workspace settings? go.gopath, go.goroot, go.inferGopath and go.toolsGopath\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Yes I can.\n\nINGUNAWA-M-J02T:go-play ingunawa$ go version\ngo version go1.8.3 darwin/amd64\nINGUNAWA-M-J02T:go-play ingunawa$\nThe Go extension in VSCode is version 0.6.63 which is the latest.\nThe go settings are still the defaults in the settings.json:\n// Infer GOPATH from the workspace root.\n  \"go.inferGopath\": false,\n// Specify GOPATH here to override the one that is set as environment variable. The inferred GOPATH from workspace root overrides this, if go.inferGopath is set to true.\n  \"go.gopath\": null,\n// Location to install the Go tools that the extension depends on if you don't want them in your GOPATH.\n  \"go.toolsGopath\": \"\",\n// Specifies the GOROOT to use when no environment variable is set.\n  \"go.goroot\": null,\nI am no longer seeing the error again now whenever I saved my edits to the src .go file.  The Syntax Intelligence (go-code) is working inside VSCode as I am editing the source .go code file in my project.\n\nOn Aug 8, 2017, at 11:11 PM, Ramya Rao notifications@github.com wrote:\n@indrgun https://github.com/indrgun In the integrated terminal of VS Code are you able to run Go. For example: go version without specifying the path to the go binary?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/Microsoft/vscode-go/issues/232#issuecomment-321162541, or mute the thread https://github.com/notifications/unsubscribe-auth/ACBwtFG64OxIWwe77xpOomn1RbfAFkwcks5sWU2pgaJpZM4HrlN4.\n\n\n. ",
    "jeffpc1993": "Hi, \nI am getting the same error as described but nothing mentioned here seems to fix it. any idea what it could be?\nthe console logs are as follows \n[lukehoban.Go]spawn ENOTDIR\ne.$onExtensionRuntimeError @ /Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:4056\n/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:4056 Error: spawn ENOTDIR\n    at exports._errnoException (util.js:1050:11)\n    at ChildProcess.spawn (internal/child_process.js:319:11)\n    at Object.exports.spawn (child_process.js:390:9)\n    at Promise (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:16:24)\n    at Promise ()\n    at gopkgs (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:15:12)\n    at Promise (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:72:13)\n    at Promise ()\n    at getAllPackagesNoCache (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:63:12)\n    at Object.getAllPackages (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:91:12)\ne.$onExtensionRuntimeError @ /Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:4056\n/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:4056 Error: spawn ENOTDIR\n    at exports._errnoException (util.js:1050:11)\n    at ChildProcess.spawn (internal/child_process.js:319:11)\n    at Object.exports.spawn (child_process.js:390:9)\n    at Promise (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:16:24)\n    at Promise ()\n    at gopkgs (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:15:12)\n    at Promise (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:72:13)\n    at Promise ()\n    at getAllPackagesNoCache (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:63:12)\n    at Object.getAllPackages (/Users/13321/.vscode/extensions/lukehoban.go-0.6.73/out/src/goPackages.js:91:12). ",
    "arashbina": "This had disrupted my work so I downloaded 0.10.9 on Mac OS again to test. I can confirm that this does not happen on 0.10.9.\n. Things I have tried:\n\nCompletely remove vscode and all cached, associated files and reinstall\nenable/disable/reload plugin\nStarting vscode from terminal\n\nNothing has helped so far.\nVersion of go I'm using is 1.9.\nI am assuming the issue is that the files are not properly parsed. Is there a way to force this?\n  . The issue for me is not specific to a particular project. I have included a small piece of code below. It doesn't show any of the functions for me when I trigger the \"Go to symbol in file\" using shift-command-o. I don't see any errors in the console. Thanks for looking into it.\n```\npackage main\nimport \"fmt\"\nfunc main() {\n    HelloWorld(\"hello\")\n}\nfunc HelloWorld(message string) {\n    fmt.Println(message)\n}. I had the go-outline installed and I was not using the language server.\nHowever I updated all the go tools that the vscode uses that are provided here and that fixed the issue. Thanks for pointing me to the right direction. I will close the issue.. ",
    "liuliuhappy": "FROM 0.10.9 TO 0.10.10, my error message is :\"Unexpected token h. Stopping the debug adapter.\"\n. ",
    "oliverjanik": "Thanks for the comprehensive answer. I understand its the tools this plugin uses that are the limitation.  C# has the Roslyn platform with makes making tools possible. I wonder if Go has something like that or will have?\n. ",
    "tejainece": "Doesn't work. It only find references in current open folder. Doesn't find references in all packages in GOPATH.\n. ",
    "tclass": "wow, sry now it works, downloaded the dependecies again...\n. @tecbot did the same and worked! \ud83d\udc4d \n. @q45 just use this snippet, if you have other gotools that also use 100% CPU, just update them like this. \ngo get -u -v github.com/nsf/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/golang/lint/golint\ngo get -u -v github.com/lukehoban/go-outline\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v github.com/tpng/gopkgs\ngo get -u -v github.com/newhook/go-symbols\ngo get -u -v golang.org/x/tools/cmd/guru\ngo get -u -v github.com/cweill/gotests/...\n. ",
    "Julusian": "I am having this issue too. The process called 'debug' spawned by dlv is left running even after dlv exits. \nMakes vscode really painful to use for a http server\n. ",
    "aca02djr": "Having this issue too, only seems to be on Linux though as the process exits fine on OS X.\n. ",
    "jaylittle": "I'd love to see a fix for this.  Just recently started working with go in Visual Studio on Linux and this behavior is driving me bonkers\n. Can confirm this.  Seeing this exact same behavior with go debugging using this vscode extension on Arch Linux.\n. ",
    "josefcs": "Also stumbled upon this isse. It makes the debugger unusable for me.\n. Is there any news on this, or have you been able to resolve this? \n. ",
    "DasJott": "No one looks on the dates anymore.... Thank you!\n. One could think, that tests are run on save, bcause of your doc in the settings:\n```\n// Go configuration\n// Run 'go build'/'go test' on save.\n\"go.buildOnSave\": true,\n\n...\n```\nHere the problem is, that tests are NOT run. We expected that, because of the description above.\n. @ramya-rao-a That could indeed be the reason. I might just have the impression that the tests are not run.\nI like the idea of having seperate options. Additionally I would like to be able to put options for executing all tests, like go test ./... does, because I would like all tests to be run on save. Should be no problem, as there is no blocking.\n. The editor.formatOnSave almost broke one of our releases as we use a selfmade template markup in our js and html and that was \"formatted\" which destroyed the whole page.\nThe GO formater always worked great, why not leave it as it is.... I made a video where I am pressing the Ctrl Button while hovering with the mouse above the code.\nThe functions within the same file seems to be recognized. A function within an other file is not working, but its package. A click on that jumps to the import of that package. Not helpful ;)\ndefinition_issue.mp4.zip\n\"go.docsTool\": \"godoc\" (and it is installed)\n\"go.useLanguageServer\": false\nother custom settings:\n```\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n```\ngo version: go1.8.3 linux/amd64\nVSCode:\nVersion 1.14.1\nCommit 2648980a697a4c8fb5777dcfb2ab110cec8a2f58\nDate 2017-07-13T19:12:01.887Z\nShell 1.6.6\nRenderer 56.0.2924.87\nNode 7.4.0\nExtension: 0.6.62\nOS:\nArch Anywhere with DDE\n. \nThis was using godoc.\nSurprisingly gogetdoc works fine, except it seems a little slower recognizing a clickable item while pressing ctrl.. This is shown in the dev console using godoc while hovering on a function when pressing ctrl (which is not working)\n\n. \nUsing godoc.. Seems to work now. Can not reproduce anymore. Will close it for now.. Yup, If I type the package or an alias for a package (does not matter), there are no suggestions on typing a dot. On trying Ctrl+Space it says \"No suggestions available\".\nHere is a video of just typing.\ngocode_issue.mp4.zip\nMaybe I need to start a service myself on Arch?\ngo version: go1.8.3 linux/amd64\nVSCode:\nVersion 1.14.1\nCommit 2648980a697a4c8fb5777dcfb2ab110cec8a2f58\nDate 2017-07-13T19:12:01.887Z\nShell 1.6.6\nRenderer 56.0.2924.87\nNode 7.4.0\nOS:\nArch Anywhere with DDE\n. This gif pretty much explains it.\n\nThe dev console stays empty meanwhile.\nYes, I already tried that and it did not change anything. :-/\n. Did do all the steps. Didn't solve anything. Strange thing...\nIs there any service I need to start manually on arch?. > That clearly shows gocode is not working at all for you.\nTrue, but it is there:\n\n. I am sorry, I was on vacation a few weeks. \nWas testing it a minute ago and it seems to work now. Whatever happened.\nThank you!. Aaah, I see!\nYes, I meant renaming. Sorry. That was a hell of a renaming session yesterday :( Could have been easier. \nNice to hear from that attempt with the go server!\nThank you for that quick response!. Seems that this is only possible after manual go install in according package folder.. ",
    "theprojectabot": "using dlv from command line/terminal works fine.\n. @lukehoban hm i wasnt typing in continue to start the debugging session - newb fail.  But now when I type continue I get this:\nStarting server on :5000\ncontinue\nTypeError: Cannot read property 'currentGoroutine' of null\\n    at GoDebugSession.evaluateRequest (/Users/benb/.vscode/extensions/lukehoban.Go-0.6.33/out/src/debugAdapter/goDebug.js:496:45)\\n    at GoDebugSession.DebugSession.dispatchRequest (/Users/benb/.vscode/extensions/lukehoban.Go-0.6.33/node_modules/vscode-debugadapter/lib/debugSession.js:347:22)\\n    at GoDebugSession.ProtocolServer._dispatch (/Users/benb/.vscode/extensions/lukehoban.Go-0.6.33/node_modules/vscode-debugadapter/lib/protocol.js:162:22)\\n    at GoDebugSession.ProtocolServer._handleData (/Users/benb/.vscode/extensions/lukehoban.Go-0.6.33/node_modules/vscode-debugadapter/lib/protocol.js:142:26)\\n    at Socket.<anonymous> (/Users/benb/.vscode/extensions/lukehoban.Go-0.6.33/node_modules/vscode-debugadapter/lib/protocol.js:24:60)\\n    at emitOne (events.js:77:13)\\n    at Socket.emit (events.js:169:7)\\n    at readableAddChunk (_stream_readable.js:146:16)\\n    at Socket.Readable.push (_stream_readable.js:110:10)\\n    at Pipe.onread (net.js:523:20)\n. ",
    "reflog": "i have the same issue as @theprojectabot \nsuggestions?\n. ",
    "gosukiwi": "I'm having similar issues than @tnine . \nUnexpected token L. Stopping the debug adapter.\nIf I run it again I get a different token, like C or O instead of L. I suspect this could be because my installation process was not correct? Is there a way I can check my installation?\nI'm using Windows 10.\n. Updated extension from 0.6.33 to 0.6.36, working fine so far, I'll post here if I find it still happens. Thanks! :smile: \n. ",
    "joebehymer": "[edit] - sorry, didn't realize this was the -go repo.  I created a new issue over here: https://github.com/Microsoft/vscode/issues/6217\n. ",
    "donlzx": "Same problem on Linux (Linux Mint 17.3) with Code v1.1.1.  Here is some extra info that hopefully will help:\n1) Open a command shell, enter \"code\" will bring up previous Go project folder with some opened files.  No errors;\n2) Click on the \"Visual Studio Code\" menu item on the desktop UI, thus opening the previous Go project folder with some opened files.  In this case, the error shows up;\n3) Press Alt+F2 and enter the \"code\" command, same problem as previous item.\nRedo these steps with no previous Go project folder or files opened when starting Code.  When starting from command line, there are no errors when opening project folders and files.  Otherwise, same error when opening Go project folder and files.\n. ",
    "RReverser": "@lukehoban Same problem on Mac OS with VS Code 1.3.0, fresh install of both Go, this extension and all the tools from README. No error details available, just \"Error: TypeError: Bad argument\".\n\nCan you share any more details on when that error occurs? What action exactly caused it to appear? \n\nLiterally not doing anything, shows up immediately as I open Go file.\n. @kaakaa Oh thanks, that helped! In my case PATH did include paths to Go binaries as well as /usr/local/bin, but in MacOS it's not trivial to make GUI apps to respect same PATHs settings, and setting go.gopath alone in Code didn't help. Now with goroot all the tooling works as expected.\n. @cainiaoDJ Why are you setting //? If you're on Windows, it's \\\\ or just / (both should work).\n. ",
    "kaakaa": "Same problem.\n- Mac OSX\n- VS Code 1.3.0\n- vscode-go 0.6.39\nAnd I found the cause of my problem.\nThe cause is that vscode-go cannot find go binary.\ngoPath#getGoRuntimePath() find go binary by one of the theree.\n1. cached\n2. GOROOT\n3. PATH\ngoPath.js\ngo\nfunction getGoRuntimePath() {\n    if (runtimePathCache)\n        return runtimePathCache;\n    if (process.env['GOROOT']) {\n        runtimePathCache = path.join(process.env['GOROOT'], 'bin', correctBinname('go'));\n    }\n    else if (process.env['PATH']) {\n        var pathparts = process.env.PATH.split(path.delimiter);\n        runtimePathCache = pathparts.map(function (dir) { return path.join(dir, correctBinname('go')); }).filter(function (candidate) { return fs.existsSync(candidate); })[0];\n    }\n    return runtimePathCache;\n}\nIn my environment, there is go binary in /usr/local/bin/go, but PATH does not include /usr/local/bin.\nIf I set /usr/local/Cellar/go/1.6.1/libexec to go.goroot in settings.json of vscode-go, Message \"Error : Type Error: Bad argument\" is disappear.\n. ",
    "cainiaoDJ": "thanks,just add a config of \"go.goroot\"\n```\n   //gopath \u914d\u7f6e\n\"go.gopath\":\"E://workspace//golang\",\n\n\"go.formatTool\": \"gofmt\",\n\n\"go.lintOnSave\": true,\n\n\"go.goroot\":\"E://Go\",\n\n```\n. @RReverser   , you are right. It's my fault. thanks. \n. ",
    "kylewolfe": "Please reread my issue before closing it. The first line of output is from ~~vs-code~~ debugger.go (is this from vs-code or delve?). The last line is from fmt.Println(os.Args). They are not being passed to the executable.\n. @lukehoban, please see last comment.\n. ",
    "isidorn": "@dbaeumer and @weinand would be best to answer this\n. @weinand for old workspaces the checkboxes should disapear as soon as a debug session starts and an adapter sends the new configuration - no exception breakpoints.\nFor new workspaces they should just not be there any more\n. @ramya-rao-a our link detection approach is not very good and uses various heuristics\nPR to improve this are welcome\nCode pointer https://github.com/Microsoft/vscode/blob/master/src/vs/workbench/parts/output/common/outputLinkComputer.ts#L24. @ramya-rao-a the debug adapter is sending to vscode if the debug session stopped or not. So the debug adapter could simply remember if it already sent a StoppedEvent with readon Breakpoint\nRegarding breakpoints request, there is only setBreakpoints request which sets breakpoints for a single source location. The debug adapter could remember those breakpoints and compute if a setBreakpoints request is removing a breakpoint. @ramya-rao-a yeah, please support the evaluateName property.\nExample: in the casses in the picture the evaluateName is equal to name, however inside the zone object if it had the id property the evaluate name of that would be zone.id\nSo evaluateName is the full path to get to the variable\n. I believe dup of https://github.com/Microsoft/vscode/issues/61986\nAnd of https://github.com/Microsoft/vscode/issues/63114\n@ramya-rao-a are you sending this event while the debug session is initalising or not? Can you repro this with latest insiders?. Great to know this is fixed in latest insiders. Closing. @ramya-rao-a Are there any plans to address this?\nDo you agree with my suggesstions here?\nIf you do not have cycles to address this but would like to see it done, I can try to get some users to provide a PR which tackles this.\nThanks a lot. @ramya-rao-a thanks for your response. \nonDebugInitialConfigurations is just an activation event. Here's how node is using it here\nLeaving fields for discoverability purposes makes good sense if a field is changed often by the user. So it would be great if you could go through them and decide for each if they really should be there. Also what is mode and why is this shown to the user?\nGreat that you are already resolving defaults in the resolveDebugConfiguration call.\nI am just trying to give some suggestions on how to improve this, in the end you know much better what would lead to a better go debugging experience. So let me know if there is something on the vscode side which we could do to improve this.. Awesome that you already cleared some fields.\nCan't we automatically than infer the mode so the user does not have to specify it?. Just a ping reminder regarding this.. @ramya-rao-a Might be some link detection issue.\nCode pointer so you can investigate more and potentialy provide PRs \nhttps://github.com/Microsoft/vscode/blob/757c5feacc2e2c322b1d8e0ac29d02a8d06179e9/src/vs/workbench/parts/output/common/outputLinkComputer.ts#L58. Please try reproducing with latest vscode insiders. If still reproducable please file an issue in vscode with reproducable steps. Thanks\nI am saying this because I see the original issue is filled a long time ago and I pushed some fixes in the area. Thanks!. @ramya-rao-a how does go write errors to the debug console?\nIn step 3 when debugging fails do you actually see a drop down of multiple debug consoles?\nDoes switching the active debug console actually show the error? Is the actual issue that the new debug console does not get focus becuase the session failed?. I do not have go installed and I can not repro this with node.\nSo either try to create a reproducable sample with Node debugging or set the breakpoint here and here and try to figure out why your new session is not being selected.. ",
    "c3mb0": "If you go to File -> Preferences -> Workplace Settings, you can override the GOPATH for the current project. Thus, you can configure your GOPATH on a project basis. A typical gb project is as follows:\n/myGbProject\n  /src\n  /vendor\n    /src\nIf you set your GOPATH to \"/full/path/to/myGbProject:/full/path/to/myGbProject/vendor\" and reload VS Code, everything starts working swimmingly. :)\nPS: Don't use tilde in the path.\n. ",
    "winduptoy": "@lukehoban How does one specify to build with the gb tool instead of the standard go build?. ",
    "liggitt": "cc @deads2k @ironcladlou \n. > We might want to take this discussion to the go-symbols project. cc @newhook\nmy mistake, I can move the issue there\n. Moved to https://github.com/newhook/go-symbols/issues/1\n. I can reproduce for some stdlib structs\ngolang: 1.6\nOS: osx 10.11.6\nvscode: 1.5.3 (5be4091987a98e3870d89d630eb87be6d9bafd27)\nvscode-go: 0.6.43\n```\nenvironment\nenv | grep GO\nGOROOT=/Users/jliggitt/.gvm/gos/go1.6\nGOPATH=/Users/jliggitt/go\ninstalled all helper tools successfully\ngo get -u -v github.com/nsf/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v github.com/golang/lint/golint\ngo get -u -v github.com/lukehoban/go-outline\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v github.com/tpng/gopkgs\ngo get -u -v github.com/newhook/go-symbols\ngo get -u -v golang.org/x/tools/cmd/guru\nget testcase repo\ngo get github.com/liggitt/vscode-godef-testcase\nopen vscode\ncode $GOPATH/src/github.com/liggitt/vscode-godef-testcase\n```\nthings that work:\n- format on save\n- goimports\n- autocomplete of the x509 struct names and functions\n- go to definition finds the definition of X in test2.go\n- go to definition of fmt.Println\nthings that don't work:\n- go to definition on x509.Certificate{}\nI have no workspace or user settings\n. looks like an error with stdlib packages containing cgo files...\n$ godef -t -i -f test2.go -o 100 < test2.go -debug\n2016/09/27 00:39:44 exprType tuple:false pkg: *ast.SelectorExpr x509.Certificate [\n2016/09/27 00:39:44 exprType tuple:false pkg: *ast.Ident x509 [\n2016/09/27 00:39:44 exprType tuple:false pkg: *ast.ImportSpec \"crypto/x509\" [\n2016/09/27 00:39:44 ] -> 0x0, Type{package \"\" *ast.ImportSpec \"crypto/x509\"}\n2016/09/27 00:39:44 ] -> 0xc8200dc730, Type{package \"\" *ast.ImportSpec \"crypto/x509\"}\n2016/09/27 00:39:44 member Type{package \"\" *ast.ImportSpec \"crypto/x509\"} 'Certificate' {\n2016/09/27 00:39:44     /Users/jliggitt/.gvm/gos/go1.6/src/crypto/x509/root_cgo_darwin.go:63:8: cannot find identifier for package \"C\": cannot find package \"C\" in any of:\n    /Users/jliggitt/.gvm/gos/go1.6/src/vendor/C (vendor tree)\n    /Users/jliggitt/.gvm/gos/go1.6/src/C (from $GOROOT)\n    /Users/jliggitt/go/src/C (from $GOPATH)\n2016/09/27 00:39:44 } -> <nil>\n2016/09/27 00:39:44 ] -> 0x0, Type{bad \"\" <nil> }\ngodef: no declaration found for x509.Certificate\nhttps://github.com/rogpeppe/godef/issues/41\n. ",
    "sgallagher": "@lukehoban Is it possible that it's a platform-based difference? I am seeing exactly the same behavior every time while running on Fedora 24 (with VSCode 0.10.8 running atop the embedded Node 4.1.1). I have it configured to use Go 1.5.3 as installed with gvm install go1.5.3.\nI have the following workspace settings:\n// Place your settings in this file to overwrite default and user settings.\n{\n    \"go.buildOnSave\": false,\n    \"go.lintOnSave\": false,\n    \"go.vetOnSave\": false,\n    \"go.formatOnSave\": false,\n    \"go.gopath\": \"/home/sgallagh/go\",\n    \"go.goroot\": \"/home/sgallagh/.gvm/gos/go1.5.3\",\n    \"go.formatTool\": \"goreturns\",\n    \"editor.insertSpaces\": false\n}\nSo this should not be in any way associated with on-save actions, as I've disabled those. What I see is basically any time that I make a modification that might try to display help in the GUI. (For example, if I type a period/dot, I immediately end up in a saturated CPU situation).\nIt definitely looks like gocode is being called and is farming out dozens of concurrent go install commands:\n```\nsgallagh 29425     1  2 10:30 tty2     00:05:53 /home/sgallagh/go/bin/gocode -s -sock unix -addr 127.0.0.1:37373\nsgallagh 29650 20455  0 14:55 tty2     00:00:00 /home/sgallagh/go/bin/gocode -f=json autocomplete /home/sgallagh/go/src/github.com/openshift/origin/test/integration/oauth_basicauth_test.go c9609\nsgallagh 29780 29425 14 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29856 29425 13 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29858 29425 15 14:55 tty2     00:00:00 [go] \nsgallagh 29860 29425 12 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29862 29425  8 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29872 29425 13 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29895 29425 12 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29899 29425 10 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29904 29425  9 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29917 29425 12 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29923 29425 10 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29934 29425 14 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29935 29425  8 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29937 29425  9 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29940 29425  9 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29942 29425  8 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29945 29425 13 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29949 29425  8 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29950 29425  8 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29954 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29955 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29959 29425  8 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29961 29425  7 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29965 29425  9 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29970 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29983 29425  5 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 29993 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 30000 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30015 29425 10 14:55 tty2     00:00:00 go install github.com/openshift/origin/pkg/client/testclient\nsgallagh 30020 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/pkg/cmd/dockerregistry\nsgallagh 30022 29425  9 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 30027 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 30040 29425 10 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30137 29425  7 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 30247 29425  7 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30252 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30273 29425  7 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30329 29425 23 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30395 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30522 29425  6 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 30551 29425  2 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30570 29425  4 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util\nsgallagh 30670 29425  4 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30678 29425  2 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30698 29425  1 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30705 29425  0 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30726 29425  1 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30739 29425  0 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30740 29425  0 14:55 tty2     00:00:00 go install github.com/openshift/origin/test/util/server\nsgallagh 30747 29425  0 14:55 tty2     00:00:00 [gocode]\n```\nThis takes between five and fifteen seconds to run, during which time my system is largely unusable since nothing else gets sufficient CPU time.\n. @lukehoban So, this is very interesting: the problem goes away entirely if I run gocode -s -debug manually before starting VSCode. It does as you say: takes a long time once and then runs fast after that.\nHowever, if the gocode server is launched by VSCode instead, I can always repro the above behavior.\nAlso, I found this gem in https://github.com/nsf/gocode/issues/333 : \n\"Hm, \"autobuild\" was always experimental and personally I've never used it. So I have no idea how to help you. You can take a look at gocode's code yourself and in particular at autobuild related bits.\" \nSeems like autobuild isn't really \"supported\" by gocode upstream.\n. So, whatever is happening here is definitely related (somehow) to how vscode-go is launching the gocode service. If I manually call gocode status or explicitly call the same command-line that is visible in the process table before launching VSCode, there is no performance issue at all. (I also tried launching it with gocode set autobuild true).\nSo I guess manually starting the gocode service ahead of time is a workaround for now. I can't get the issue to reproduce in a way that would allow me to see the debug information from gocode. It really seems only to rear its ugly head when the gocode service is started by vscode-go.\n@smarterclayton This workaround is probably interesting to you.\n. I'm still seeing this issue on 0.6.35. Basically any time I type a . (dot/period) in VSCode, all of my CPUs (both physical and hyperthreading) go immediately to 100% usage, causing my system to slow to a crawl until it's complete.\nThis is VSCode 0.10.8 running on Fedora Workstation 24 against the following settings:\n// Place your settings in this file to overwrite default and user settings.\n{\n    \"go.buildOnSave\": false,\n    \"go.lintOnSave\": false,\n    \"go.vetOnSave\": false,\n    \"go.formatOnSave\": false,\n    \"go.gopath\": \"/home/sgallagh/go\",\n    \"go.goroot\": \"/home/sgallagh/.gvm/gos/go1.5.3\",\n    \"go.formatTool\": \"goreturns\",\n    \"editor.insertSpaces\": false\n}\n. @lukehoban  Actually, it looks to be the same issue as https://github.com/Microsoft/vscode-go/issues/252 (I'm actually working on the same project, OpenShift Origin). I'll take this discussion to that ticket.\n. ",
    "slimsag": "The current default can be seen in the README.md here: https://github.com/Microsoft/vscode-go#options\nI've also verified in my VSCode editor, it is:\n\"go.formatOnSave\": false,\nand marked as EXPERIMENTAL too.\nI agree that gofmt is generally much faster for large workspaces.. but probably a better default for beginners as you said (advanced users can always configure).\n. I'll have an updated build for folks to try soon -- apologies for the delay. :)\nIn the meantime, if anyone would like to help out, please make sure your binary is updated (run go get -u github.com/sourcegraph/go-langserver) and capture a heap/CPU profile per https://github.com/sourcegraph/go-langserver#profiling whenever the issue occurs.\n. Hi everyone ( /cc @ramya-rao-a ), this issue should be fixed now. \ud83d\ude03 Very significant improvements have been made to both goto definition and hover requests, and they now use a tiny fraction of the memory / CPU usage seen before.\nTo update, please run:\ngo get -u github.com/sourcegraph/go-langserver\nAnd once again set go.useLanguageServer to true inside your settings to enable the language server.\nPlease feel free to provide any feedback here, and if all looks good we can close this issue out!. @ramya-rao-a What do you think of closing this issue now (and folks can open new issues if they run into any problems)? \ud83d\ude04 . Hi @Shadowfaxenator can you tell me which version this command shows for you?\nbash\n$ $GOPATH/bin/go-langserver -version\nv2-dev\nAdditionally, when the process uses a large amount of memory, could you capture a heap profile via the steps described in https://github.com/sourcegraph/go-langserver#profiling ?. Sorry to hear you're running into issues. :/ To help us figure out the issue, could you:\n\nProvide steps for us to reproduce the issue on e.g. an open source repository?\nProvide logs (you can find these in View -> Output and then select Tasks dropdown and click go-langserver)?\nWhen the issue occurs, find the langserver pid (e.g. with ps aux | grep go-langserver) and kill it with kill -SIGQUIT <pid>. This will dump a stack trace to the logs which will give us an idea of what the language server was doing when it became unresponsive.\n\n. ",
    "giacoman": "I will go through all the recommendations and update the code.  Maybe the weekend before I can get to it.\n. How did you issue restart command?  Did you test running remote dlv and have it shutdown gracefully after hitting Ctrl-C while doing restart instead of halt?  What I am seeing is that if I don't issue halt command, calling Ctrl-C will hang trying to delete 'Debug'.  I played around with issuing restart command, but may have not been doing it right.  \n. Hmmm.  Looking at the delve code, I don't see a 'Restart' option for 'Command'.  Is it possible you are sending non-existent command and nothing was executed?  If so, I would suggest still going with the halt option.  For me, when I am done debugging, I would want the process to stop on the remote server so I could rebuild and run normally.\nI was calling Restart differently.  Something like:\nthis.call('Restart', [null, null], (err, ret) => {\n    if (err) {\n    console.error('Failed to restart.');\n    }\n});\nIf I pass command that is not there, Delve will complain.  It didn't complain for me, but it also didn't seem to restart or work for me.  \nI also tried what you had done and it didn't work either.\n. I tried the code where you issue halt and follow it with restart.  I didn't see anything different to just issuing halt.  I am not able to restart debugger without relaunching remote delve process.  One thing I want to make sure on.  In the debugger controls in vscode, there is restart and stop button.  I have been hitting the stop button.  I did test using restart button and it does not successfully restart.\n. Wonder if we could be using different version of Delve.  On my remote vm, I am using:\nDelve Debugger\nVersion: 0.11.0-alpha\nCalling restart doesn't affect me, so I am good with leaving it in.\n. A workaround is to use remote debugging instead.  When you run delve for remote debugging, you could do something like this:\ndlv test $(PKG) --headless --listen \"0.0.0.0:2345\" --log=true\n. I removed the commented out code.  I think the other code should remain though.  I shut down remote dlv process by hitting Ctrl-C.  If I don't issue halt command, the remote dlv process will not shut down gracefully.  It will hang trying to delete the debug binary and you will have to hit Ctrl-X and process will be left open.  With halt command, hitting Ctrl-C will shut down process smoothly.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. I updated code so that if remotePath has trailing '/' or '\\', it will remove it.  Assumption is that program will not have any trailing slashes.  Not sure if that is what you want.\n. Changed to remoteFile.\n. Updated to handle case where local and remote paths have different path separators.\n. ",
    "sethgrid": "I just started having godef procs spawn and hammer the CPU on mac. 6 procs at 30% each, even after I closed vs code :(\nvs code is the only thing that I would have that could invoke godef.. Fixed my issue with > Go: Install/Update tools. note: you can mouse over the non-autocompleted methods and see their signature. Information is making its way over, but functionality is missing.\n. @ramya-rao-a autocomplete / > Go: Add Import works for other external packages, yes. I did have to update gocode back when I moved to Go 1.7 (thanks for verifying!).\nI just ran gopkgs (neat, I did not know about that), and it does not see the subpackages, so that is likely the source of the problem. Looking at https://github.com/tpng/gopkgs, I see they strive for a faster go list all. I do see my subpackages with go list all. \nIf you clone the simple example repo, were you able to reproduce the issue?\nI opened an issue for gopkgs here: https://github.com/tpng/gopkgs/issues/4\n. When I check out the pkg dir, it is missing vscode_autocomplete_issue. \n$ ls /Users/sethammons/workspace/go/pkg/darwin_amd64/github.com/sethgrid/\nThat lists some *.a files that match packages that do show up with gopkgs.  Maybe this has to do with how I create new projects? I tend to cd over to a given directory in my GOPATH, mkdir and then touch the files I'll need. I expected that to \"just work.\" Knowing that we are working with the pkg dir, I did a go install in the example repo and, tada, autocomplete works. Removing the pkg files and doing it again with go get (inside the problem directory), I see that the pkg files show up too.\nIt feels odd to have to have built or otherwise gotten your system to generate data in the pkg dir to get autocomplete. That seems to hamper initial development until you either run go install or go get in your directory. Now that I know I can fix the issue when I see it with go get, maybe it is a non issue, but it would be nice to not have to do that (it would be nice if things showed up from the src dir, not just the pkg dir). Thanks for helping dig into this!\nIn case it is still of interest:\nUser Settings:\n// Place your settings in this file to overwrite the default settings\n{\n    \"go.buildOnSave\": false,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildTags\": \"\",\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n    \"go.goroot\": \"/usr/local/go\",\n    \"go.gopath\": \"/Users/sethammons/workspace/go\",\n    \"go.gocodeAutoBuild\": false,\n    \"files.associations\": {\"*.tmpl\": \"html\"}\n}\nAnd the workspace settings are empty:\n// Place your settings in this file to overwrite default and user settings.\n{\n}\n. With running go get in the affected dir (or go install) getting autocomplete to work, do you feel this issue is closed, or do you see value in some edge case handling for working with packages being developed that are not yet in the pkg dir? And, again, a super big thank you for helping me through this! It is very appreciated.\n. Awesome, good to know. Thanks for all the help and for providing a great tool.\n. ",
    "rajatdeshpande": "Hi Ramya, \nGo: Install/Update tools is not fixing my issue on vscode version Version 1.19.2 (1.19.2) Mac.\ngo version go1.9.2 darwin/amd64. ",
    "OneOfOne": "I'll see what I can do when I get some free time.\n. You have \"go.gocodeAutoBuild\": false, and gocode depends on the compiled code, while I'm not very familiar with how vscode-go works, I think if you set this to true it will work fine.\nOtherwise you will have to manually do go install every now and then.\n. @mattetti https://github.com/nsf/gocode/issues/305#issuecomment-219234073 that's a gocode bug with go 1.7, either use < go 1.7 or apply the patch to your git tree.\n. @mattetti no problem, gocode got fixed and the patch isn't needed anymore.\n. On linux, are you trying trying to run the project on a filesystem mounted with noexec?\n. You might wanna apply the patch in https://github.com/nsf/gocode/issues/305#issuecomment-219234073 in travis until gocode gets fixed.\n. I can confirm this, and it's kind of a major bug.\n. @ramya-rao-a yep I can confirm it was fixed, thank you.\n. @ramya-rao-a it's because vscode.workspace.getConfiguration('go')['formatFlags'] returns a reference and you keep updating it.. @nochso it didn't prompt me but I did install it manually, also just using godoc should have worked.. @ramya-rao-a sadly no, there aren't any errors, I'm using Go from git though, so I'll try later with go 1.7 and see if that helps.\ncode completion works fine.. While that would be a good idea, if you just want to run a specific file maybe try Code Runner.\nTasks would be more suitable for package building / management.. +1 this is a handy feature if you wanna test a PoC in /tmp real quick without setting up a proper workspace.. Note that I can accomplish this using:\n{\n        \"name\": \"Test All\",\n        \"type\": \"go\",\n        \"request\": \"launch\",\n        \"mode\": \"exec\",\n        \"program\": \"/home/oneofone/bin/go\",\n        \"cwd\": \"${workspaceRoot}\",\n        \"args\": [ \"test\", \"-v\", \"./...\"]\n    }. @ramya-rao-a just run them.. Yep, I have pkg1/sub1 pkg1/sub2, normally I'd run go test ./... in the root of that pkg.\nIt might be helpful / handy to have an option to do that like Go: Test All or something.. This is related to https://github.com/mdempsky/gocode/issues/13. Found https://github.com/Microsoft/vscode-go/issues/673. Wrong repo, this belongs on https://github.com/Microsoft/vscode/issues. Not sure if I need to sign something for the PR, but I'd be happy to.. Thanks!. Yep! I needed gometalinter and dlv will honor the go.toolsGopath setting. and Support for the Go To Implementation command on interfaces. so I grabbed Go-latest.vsix as soon as it was available with them.\nGreat work on the extension btw!. Yes of course, I'd like to help.. ping. This doesn't seem to work at all, I can see go-langserver -mode=stdio -gocodecompletion running but there are no completions and nothing in the console.. Ignore my previous comment, this is related to https://github.com/nsf/gocode/issues/510, I opened a ticket https://github.com/sourcegraph/go-langserver/issues/268.\nI can confirm this works perfectly with go 1.10.\n@ramya-rao-a ping. Format on save is not working for me at all anymore, even with \"editor.formatOnSaveTimeout\": 10000.. Ok so I restarted vscode few times and this resolved itself, I'm confused because I did that earlier and it didn't work.. Alright, problem is back:\nERR Illegal argument, contents must be defined: Error: Illegal argument, contents must be defined\n    at new <anonymous> (/usr/src/VSCode-linux-x64/resources/app/out/vs/workbench/node/extensionHostProcess.js:430:471)\n    at asHover (/home/oneofone/.vscode/extensions/lukehoban.go-0.6.78/node_modules/vscode-languageclient/lib/protocolConverter.js:71:16)\n    at <anonymous>. Can this be caused by having multiple instances of vscode open (on different go projects)?\n. Using the current Go-latest.vsx fixes the problem, closing.. @slimsag will do when I get a chance.. ```\nlangserver-go: reading on stdin, writing on stdout\nPassing an initialize rootPath URI (\"file:///home/oneofone/code/go/src/github.com/OneOfOne/xast\") is deprecated. Use rootUri instead.\njsonrpc2 handler: notification \"textDocument/didOpen\" handling error: Open git:/home/oneofone/code/go/src/github.com/OneOfOne/xast/parser.go?%7B%22path%22%3A%22%2Fhome%2Foneofone%2Fcode%2Fgo%2Fsrc%2Fgithub.com%2FOneOfOne%2Fxast%2Fparser.go%22%2C%22ref%22%3A%22~%22%7D: unable to read out-of-workspace resource from virtual file system\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'g' '\\x01'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/xast/xast.go\": character 1 is beyond line 103 boundary\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'g' '\\x01'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/xast/xast.go\": character 1 is beyond line 103 boundary\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'g' '\\x01'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/xast/xast.go\": character 1 is beyond line 103 boundary\n[Error - 2:14:40 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/xast/xast.go:105:30: expected operand, found ',' (and 1 more errors)\n  Code: 0 \nSIGABRT: abort\nPC=0x47e7ee m=0 sigcode=0\ngoroutine 10 [syscall]:\nsyscall.Syscall(0x0, 0x0, 0xc4202f6000, 0x1000, 0xc420001b00, 0xc420094080, 0xc42020d200)\n    /usr/src/go1.10/src/syscall/asm_linux_amd64.s:18 +0x5 fp=0xc420617948 sp=0xc420617940 pc=0x47e7c5\nsyscall.read(0x0, 0xc4202f6000, 0x1000, 0x1000, 0xc420094001, 0x0, 0x0)\n    /usr/src/go1.10/src/syscall/zsyscall_linux_amd64.go:749 +0x5f fp=0xc4206179a8 sp=0xc420617948 pc=0x47c3ff\nsyscall.Read(0x0, 0xc4202f6000, 0x1000, 0x1000, 0x279, 0x0, 0x0)\n    /usr/src/go1.10/src/syscall/syscall_unix.go:162 +0x49 fp=0xc4206179f0 sp=0xc4206179a8 pc=0x47a889\ninternal/poll.(FD).Read(0xc4200be000, 0xc4202f6000, 0x1000, 0x1000, 0x0, 0x0, 0x0)\n    /usr/src/go1.10/src/internal/poll/fd_unix.go:153 +0x118 fp=0xc420617a40 sp=0xc4206179f0 pc=0x494698\nos.(File).read(0xc42000e010, 0xc4202f6000, 0x1000, 0x1000, 0x100000000000279, 0x0, 0x8)\n    /usr/src/go1.10/src/os/file_unix.go:226 +0x4e fp=0xc420617a88 sp=0xc420617a40 pc=0x49cd9e\nos.(File).Read(0xc42000e010, 0xc4202f6000, 0x1000, 0x1000, 0x443218, 0xc420572360, 0x0)\n    /usr/src/go1.10/src/os/file.go:107 +0x6a fp=0xc420617af8 sp=0xc420617a88 pc=0x49a03a\nmain.stdrwc.Read(0xc4202f6000, 0x1000, 0x1000, 0x0, 0x8, 0x0)\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/main.go:135 +0x4b fp=0xc420617b40 sp=0xc420617af8 pc=0x918c0b\nmain.(stdrwc).Read(0xe3ae10, 0xc4202f6000, 0x1000, 0x1000, 0x0, 0x1, 0xc420572358)\n    :1 +0x52 fp=0xc420617b80 sp=0xc420617b40 pc=0x919372\nbufio.(Reader).fill(0xc420096a80)\n    /usr/src/go1.10/src/bufio/bufio.go:100 +0x11e fp=0xc420617bd0 sp=0xc420617b80 pc=0x57509e\nbufio.(Reader).ReadSlice(0xc420096a80, 0xb0870d, 0xc420096ae0, 0xc42376a0f0, 0x0, 0x0, 0x0)\n    /usr/src/go1.10/src/bufio/bufio.go:341 +0x2c fp=0xc420617c08 sp=0xc420617bd0 pc=0x575d7c\nbufio.(Reader).ReadBytes(0xc420096a80, 0xc420617d0d, 0x722537, 0xc4204ae5c8, 0x9afe20, 0xc42037e2a0, 0x0)\n    /usr/src/go1.10/src/bufio/bufio.go:419 +0x6b fp=0xc420617ce8 sp=0xc420617c08 pc=0x57623b\nbufio.(Reader).ReadString(0xc420096a80, 0x411d0d, 0xc42037e310, 0x10, 0x10, 0x9e5860)\n    /usr/src/go1.10/src/bufio/bufio.go:459 +0x38 fp=0xc420617d40 sp=0xc420617ce8 pc=0x576608\ngithub.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2.VSCodeObjectCodec.ReadObject(0xc420096a80, 0x9afe20, 0xc42037e310, 0x16, 0xc425d1e4e0)\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2/stream.go:136 +0x3b fp=0xc420617da8 sp=0xc420617d40 pc=0x7e9dbb\ngithub.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2.(VSCodeObjectCodec).ReadObject(0xe3ae10, 0xc420096a80, 0x9afe20, 0xc42037e310, 0xc420096a01, 0xc42037e310)\n    :1 +0x52 fp=0xc420617de0 sp=0xc420617da8 pc=0x7ebd52\ngithub.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2.(bufferedObjectStream).ReadObject(0xc420095f00, 0x9afe20, 0xc42037e310, 0xc420096ae0, 0xc42376a0f0)\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2/stream.go:63 +0x51 fp=0xc420617e20 sp=0xc420617de0 pc=0x7e9b01\ngithub.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2.(*Conn).readMessages(0xc420096ae0, 0xb0a340, 0xc4200260f8)\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2/jsonrpc2.go:494 +0x87 fp=0xc420617fc8 sp=0xc420617e20 pc=0x7e8567\nruntime.goexit()\n    /usr/src/go1.10/src/runtime/asm_amd64.s:2361 +0x1 fp=0xc420617fd0 sp=0xc420617fc8 pc=0x45b671\ncreated by github.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2.NewConn\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/vendor/github.com/sourcegraph/jsonrpc2/jsonrpc2.go:328 +0x142\ngoroutine 1 [chan receive]:\nmain.run(0x1, 0x8, 0x1, 0x0, 0x0)\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/main.go:123 +0x307\nmain.main()\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/main.go:72 +0xd6\ngoroutine 18 [chan receive]:\ngithub.com/sourcegraph/go-langserver/langserver/internal/gocode.new_file_reader.func1(0xc4201ea010)\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/langserver/internal/gocode/utils.go:229 +0x71\ncreated by github.com/sourcegraph/go-langserver/langserver/internal/gocode.new_file_reader\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/langserver/internal/gocode/utils.go:226 +0x88\ngoroutine 9 [sleep]:\ntime.Sleep(0x3b9aca00)\n    /usr/src/go1.10/src/runtime/time.go:102 +0x166\nmain.freeOSMemory()\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/main.go:182 +0x2a\ncreated by main.main\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/main.go:55 +0x164\ngoroutine 36 [chan receive]:\ngithub.com/sourcegraph/go-langserver/langserver.(HandlerCommon).InitTracer.func1(0xc420096ae0, 0xc4201c80d0)\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/langserver/tracing.go:37 +0x38\ncreated by github.com/sourcegraph/go-langserver/langserver.(HandlerCommon).InitTracer\n    /home/oneofone/code/go/src/github.com/sourcegraph/go-langserver/langserver/tracing.go:36 +0x262\n```\n@slimsag . bump. With https://github.com/Microsoft/vscode-go/pull/1607, go-langserver will handle that.\n\nhttps://github.com/sourcegraph/go-langserver/issues/268\n\n@slimsag @keegancsmith. I had to turn off go.useLanguageServer. @ramya-rao-a while this is a langserver issue, it doesn't happen with vscode-go v0.6.78.\nAlso check #1667 . I can confirm that fixes the issue, thanks!. Neither format on save nor manual formatting works.. Disabling all formatOnXXX doesn't change anything, neither using \"Format Document\" directly.\nThere are no errors in the dev Console neither after save nor after \"Format Document\"\nOnly things printed in the Go output panel:\n```\n....path...>Finished running tool: /home/oneofone/bin/go build -i -o /tmp/go-code-check ...pkg-path...\n....path...>Finished running tool: /home/oneofone/bin/go vet ./...\n....path...>Finished running tool: /home/oneofone/code/go/bin/megacheck\n```\nRunning goimports -w . from the terminal works as expected.\nhttps://github.com/OneOfOne/dotfiles/commit/9c24638e99cdd45519c9c49c9abe9245b81c8418. I will when I get a chance, I've been very busy lately, maybe next weekend unless someone else figures it out.. So https://github.com/Microsoft/vscode-go/issues/1662#issuecomment-387495548 seems to have fixed this problem as well, I don't understand how it's related (I didn't dig into the code yet).\nI won't close this issue yet in case it's just randomly working.. So this is back, it's related to turning off go-langserver (the bug where it randomly stops is back).. langserver-go: reading on stdin, writing on stdout\nPassing an initialize rootPath URI (\"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts\") is deprecated. Use rootUri instead.\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b5' '\\x00'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x00'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x01'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x02'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x03'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x04'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x05'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x06'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\a'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\b'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\t'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\n'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\v'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\f'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\r'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x0e'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x0f'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x10'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x11'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b6' '\\x12'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x01'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x02'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x03'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x04'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x05'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x06'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\a'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\b'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\t'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\n'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\v'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\f'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\r'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x0e'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x0f'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x10'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x12'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x13'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x14'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x15'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x16'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x17'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b7' '\\x18'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for invalid position {'\u00b8' '\\x01'} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\": file only has 182 lines\n[Error - 5:00:50 AM] Request textDocument/hover failed.\n  Message: invalid position: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go:183:25 (file only has 182 lines)\n  Code: 0 \njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for out of range position &{{'\\x00' '\\x00'} {'\u00d1' '\\x00'}} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/struct.go\"\n[Error - 5:01:31 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/struct.go:161:7: expected ';', found \"new \"\n  Code: 0 \n[Error - 5:01:35 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/struct.go:161:8: expected ';', found \"new \"\n  Code: 0 \n[Error - 5:01:37 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/struct.go:161:8: expected ';', found \"new \"\n  Code: 0 \njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for out of range position &{{'\\x00' '\\x00'} {'\u00b6' '\\x00'}} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\"\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for out of range position &{{'\\x00' '\\x00'} {'\u00b6' '\\x00'}} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\"\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for out of range position &{{'\u00b5' '\\x01'} {'\u00b6' '\\x00'}} on \"file:///home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go\"\n[Error - 5:03:51 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/s2ts.go:1:1: expected 'package', found ackage\n  Code: 0 \n[Error - 5:04:17 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/struct.go:162:8: expected ';', found \"new \"\n  Code: 0 \n[Error - 5:04:34 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/struct.go:161:8: expected ';', found \"new \"\n  Code: 0 \njsonrpc2 handler: notification \"$/setTraceNotification\" handling error: jsonrpc2: code -32601 message: method not supported: $/setTraceNotification\n[Error - 5:04:47 AM] Request textDocument/formatting failed.\n  Message: /home/oneofone/code/go/src/github.com/OneOfOne/struct2ts/struct.go:161:8: expected ';', found \"new \"\n  Code: 0. You rock, thanks.\nI'll try it once I get home tomorrow morning.. I've been having weird formatting issues recently (I think they got fixed with current git version of the extension, time will tell).\nAny way, I've been using (unintended self-plug) https://marketplace.visualstudio.com/items?itemName=oneofone.save-runner with this:\n\"save-runner.enabled\": true,\n    \"save-runner.commands\": [\n        {\n            \"enabled\": true,\n            \"include\": \"\\\\.go$\",\n            \"useTempFile\": false,\n            \"pre\": \"goimports\",\n        }\n    ]. It seems to work fine for me but I don't think we should set it as the default just yet, maybe in 1-2 more releases or at least until after automatic imports works.. Does it still happen if you set \"editor.formatOnSaveTimeout\": 10000 in your vscode config (ctrl+,)? . I have been using this for over a week, didn't run into any issues.. That's not a vscode issue, that's a go issue, basically go can't create the needed files to compile a windows binary because it doesn't have write access to /usr/lib/.\nOne solution would be to run it by hand one time using sudo (ex: sudo env GOOS=windows GOARCH=amd64 go build).\n. Any news about this?. I rebased it on current master and I can confirm this fixes the pause command, however I hit #2133.. this needs to be rebased against pull/2126. @xiphon can you rebase against master please.. That is not related to GOCACHE.\ngo-buildXXXX are created by go run, which i'm assuming sometimes gets killed before it finishes cleaning up.. I don't use that at all, nor I ever run go run manually.\nMost of those folders are empty, or contains an empty folder called b305.. @ramya-rao-a I tried with both modules and without, I didn't have a chance to get a debug log, but moving to using bingo fixed the issue.\nMy current working config in case anyone runs into it:\nInstall bingo: https://github.com/saibing/bingo/wiki/Install\n\"go.alternateTools\": {\n        \"go-langserver\": \"bingo\"\n    },\n    \"go.useLanguageServer\": true,\n    \"go.languageServerFlags\": [\"-format-style=goimports\"],\n    \"go.languageServerExperimentalFeatures\": {\n        \"format\": true,\n        \"autoComplete\": true,\n        \"rename\": true,\n        \"goToDefinition\": true,\n        \"hover\": true,\n        \"signatureHelp\": true,\n        \"goToTypeDefinition\": true,\n        \"goToImplementation\": true,\n        \"documentSymbols\": true,\n        \"workspaceSymbols\": true,\n        \"findReferences\": true\n    }. Sorry, I thought I had replied earlier about that.\n\nThis problem happens with and without go modules.\nThere is nothing absolutely printed in the extension host log nor vscode console after I either save (I have format on save on) or right click -> format.\nI tried setting \"editor.formatOnSaveTimeout\": 10000, \"editor.codeActionsOnSaveTimeout\": 10000, didn't change anything.\n\nI updated goimports, even ran it manually from the terminal and using my save-runner extension with onSave hook, it works as intended that way.. Ok, so looking in the console I saw an error in Prettier Now every time the project got loaded (which is weird because it doesn't have any files that would trigger that extension), so I removed it and formatting seems to work for now.\n. @xgfone this bug was about the default formatter without using go-langserver, and it was caused by me having an extension that messed with it.\nThe default go-langserver is buggy / iffy at best, either set \"go.useLanguageServer\": false or use bingo instead:\n\"go.alternateTools\": {\n        \"go-langserver\": \"bingo\"\n    },\n    \"go.languageServerFlags\": [\"-format-style=goimports\"],\n. Using bingo langserver works better for most cases atm, at least for me, you might wanna try that.\nHere are my settings for it:\n\"go.alternateTools\": {\n        \"go-langserver\": \"bingo\"\n    },\n    \"go.useLanguageServer\": true,\n    \"go.languageServerFlags\": [\"-format-style=goimports\"],\n    \"go.languageServerExperimentalFeatures\": {\n        \"format\": true,\n        \"autoComplete\": true,\n        \"rename\": true,\n        \"goToDefinition\": true,\n        \"hover\": true,\n        \"signatureHelp\": true,\n        \"goToTypeDefinition\": true,\n        \"goToImplementation\": true,\n        \"documentSymbols\": true,\n        \"workspaceSymbols\": true,\n        \"findReferences\": true\n    },. @sashker sourcegraph lsp is mostly dead / maintained, I recommend using bingo.\n\"go.alternateTools\": {\n        \"go-langserver\": \"bingo\"\n    },\n    \"go.useLanguageServer\": true,\n    \"go.languageServerFlags\": [\"-format-style=goimports\"],\n    \"go.languageServerExperimentalFeatures\": {\n        \"format\": true,\n        \"autoComplete\": true,\n        \"rename\": true,\n        \"goToDefinition\": true,\n        \"hover\": true,\n        \"signatureHelp\": true,\n        \"goToTypeDefinition\": true,\n        \"goToImplementation\": true,\n        \"documentSymbols\": true,\n        \"workspaceSymbols\": true,\n        \"findReferences\": true\n    },\n@eknkc a simple workaround would be typing the package name and saving (while \"go.languageServerFlags\": [\"-format-style=goimports\"] is set to get it imported, I know it's inconvenient but it's still way better than the alternative.. I forgot to paste that part, not fully awake yet :). @webframp  you can do that already:\n\"go.useLanguageServer\": true,\n    \"go.alternateTools\": {\n        \"go-langserver\": \"bingo\"\n    },\n    \"go.languageServerFlags\": [\"-format-style=goimports\"],\nBut making it the default would provide a better experience to new comers.. They added support for autocomplete unimported packages, woohoo.. Are you using langserver?. When the langserver is enabled it takes over formatting unless you set formatting to false in:\n\"go.languageServerExperimentalFeatures\": {\n        \"format\": false, <<<<<<< this\n        \"autoComplete\": true,\n        \"rename\": true,\n        \"goToDefinition\": true,\n        \"hover\": true,\n        \"signatureHelp\": true,\n        \"goToTypeDefinition\": true,\n        \"goToImplementation\": true,\n        \"documentSymbols\": true,\n        \"workspaceSymbols\": true,\n        \"findReferences\": true\n    },\nAlso make sure you update bingo every few days as vscode-go can't update it.. dep for the most part is deprecated, if you can't switch to go modules, you can always run dep manually using tasks:\n.vscode/tasks.json:\njson\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"dep check\",\n            \"type\": \"process\",\n            \"command\": \"dep\",\n            \"args\": [\"check\"],\n            \"problemMatcher\": \"$go\",\n            \"group\": \"build\"\n        },\n        {\n            \"label\": \"build\",\n            \"dependsOn\": \"dep check\",\n            \"type\": \"process\",\n            \"command\": \"go\",\n            \"args\": [\"build\"],\n            \"problemMatcher\": \"$go\",\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            }\n        }\n    ]\n}. The debugger seems to work as intended, yay!\n. Do you have the langserver set?. IMO this is related to #2253, go-langserver is just broken right now.. Are you using the default langserver?. the \"official\" regexp is: ^v[0-9]+\\.(0\\.0-|\\d+\\.\\d+-([^+]*\\.)?0\\.)\\d{14}-[A-Za-z0-9]+(\\+incompatible)?$. ",
    "itsjamie": "As mentioned in #822 here's a little bit of research from the person behind goimpl.\nimpl is parsing AST, goimpl is using reflection.\nimpl is much faster and has better error reporting.\ngoimpl generates complete code that (usually) compiles (package/imports).\ngoimpl can generate a minimum update for the exising implementation.\ngoimpl can work with ambiguous package names.\nTo me after reading the above, I'd rather use impl the code is easier to grok because of AST parse vs loading code with template and then doing reflection. As a user, I wouldn't mind just manually removing any additional methods I already had implemented.\nThoughts? @mattetti @ramya-rao-a\n. @ramya-rao-a I put a PR (#939) up that implements the josharian/impl package as a command go.impl.cursor. Couple of feature things in that PR that aren't implemented, but it's very much usable.. Yeah, I'd be happy to do a PR. If you can just point me in the right direction of where I might add it that would be appreciated. This will be my first time doing anything with VSCode, is there a central location for documentation about extension development I could peruse?\nRegarding the implementation, subtest generation defaults to on when the local machine is running >= Go 1.7, how would you like to handle this? Default to on, and allow users to disable via the flag?\n. That's correct.\nThe gotests binary will handle the case where a user running Go 1.6 will still generate tests that their version of Go can run by not using the new subtests API via t.Run. The underlying change to gotests won't have any effect for those users.\nThe default behaviour for users running Go 1.7 will currently change if gotests is updated after the PR lands. I think that is ok because the subtests API is better in every way however, there should be a possible way to turn the feature off. There will be reasons someone may not be able to switch to the new table driven test inspired subtest API.\n. gotests has merged the subtest support, this admittedly has fallen to the wayside, since I wanted the subtest support and it just ended up working without any changes to vscode-go.. Just waiting for DocuSign email regarding CLA request.. I see! Thanks for the tip on the coloring, never really noticed it! I'll see about filing an issue on this upstream then :). I registered the command to a key command in keybindings.json. I was thinking of right after the type. So it would need some detection to find the first empty line after the type.. Added this to the package.json in commit b640cc3. ",
    "renannprado": "@ramya-rao-a should it work for interfaces in the same file?\nI'm getting the following error: Cannot stub inteface: unrecognized interface: MyInterface. waiting for this to be merged :). @ramya-rao-a I just tried to do the same thing again and couldn't reproduce it. So I guess it's fixed? . Yep. @ramya-rao-a is this an issue with the plugin or with vscode? \nif it is a problem with the plugin, maybe I can try to help fix it. So here are the steps to reproduce:\n\nstart the debugging session with no breakpoints\ntry to put a breakpoint (it won't work, the requests to create the breakpoint get stuck in delve)\n2.1. the only way to make the breakpoint to be created in that case would be if we send Halt to delve by clicking in pause button\nclick in the pause button and nothing happens...\n\nSample program\n```go\npackage main\nimport (\n    \"fmt\"\n    \"sync\"\n    \"time\"\n)\nfunc main() {\n    wg := &sync.WaitGroup{}\nwg.Add(1)\n\ngo func() {\n    for {\n        fmt.Println(\"I'll just take a nap for a second... ZZZzz....\")\n        time.Sleep(time.Second)\n    }\n}()\n\nwg.Wait()\n\n}\n``. @roblourens yes, it is possible (will later update with an asciinema session to show)\nthe only way to set a breakpoint in this case would be to use the commandHalt` (using the pause button in vscode), then everything is paused on the process and you are free to set the breakpoints. ",
    "Mistobaan": "This could be very useful if implemented properly. Many values of the method could be inferred from the code. Ideally I would like to have >GO: GEneratate interface for variable at mouse point -> AutoComplete available interfaces for the given package -> ENTER -> . This could be very useful if implemented properly. Many values of the method could be inferred from the code. Ideally I would like to have >GO: GEneratate interface for variable at mouse point -> AutoComplete available interfaces for the given package -> ENTER -> . @ramya-rao-a yes. right now if you miss one character of the whole command the prompt resets and you have to type the whole thing again . Same issue here but for the color highlighting itself. I am using the solarmode and the red totally obscures the text.\nCan we make the colors configurables?\nhttps://github.com/Microsoft/vscode-go/blob/cded61c853da3e4a9cfa06dbfca818da6d79ee80/src/goCover.ts#L19\n. Installing back vscode 1.18.1 works back as expected. Why close the issue before verifying is resolved? add a tag #waiting-response and have a bot that triages 14days long issues with that tag.. ",
    "karimelm": "Hey thanks for responding.\nVscode 0.10.11\nVscode-go 0.6.27, updated just now to .34 issue persists\nGolang 1.6\nNo cygwin/other shells besides powershell/cmd\nReinstalled vscode, didn\u2019t matter\nJust tried: If I manually run gocode -s and then startup vscode, the command window doesn\u2019t appear and autocomplete works as expected.\n. Off the top of my head, this had something to do with gocode or one of those helper/formatting programs. Try deleting gocode from $GOHOME/bin and reinstalling with go get, solved the problem for me on another install.. ",
    "groseb": "Hi,\nI had the exact same issue and found this which solved it : \n\nWindows users should consider doing this instead:\ngo get -u -ldflags -H=windowsgui github.com/nsf/gocode\nThat way on the Windows OS gocode will be built as a GUI application and doing so solves hanging window issues with some of the editors.\n\nFrom https://github.com/nsf/gocode#setup\n. ",
    "ihrankouski": "Same issue:\n- Win 8.1\n- VS Code 1.11.2\n- go version go1.8.1 windows/amd64\n- babun version 1.2.0\nTried go get -u -ldflags -H=windowsgui github.com/nsf/gocode, also tried gocode -s but still annoying console window appears :'(\n. Tried many times :)\nI've just found a setting \"go.gocodeAutoBuild\" which if set to \"false\" somehow solves my issue.... ",
    "marwan-at-work": "I like the go.generateOnSave option. I'd also love to see something like Codelens (a button on top of the //go:generate ... comment just like the test functions. I'm happy to put some time into creating a pr if no one is working on it. . @ramya-rao-a since listing the packages takes a long time, what do you think of starting to show results before the command go list all has finished fetching the list?\nit might make the code a bit more complex, but i'd be happy to submit a pr if that idea makes sense :). Supporting vgo is a big undertaking because all the underlying tools will have to be updated. For the time being, would it be possible to add an option for VSCode to completely ignore all packages under $GOPATH/src/mod? This is just for autocomplete, goSuggest, and autoimport. Those go packages under the mod folder (previously v folder) are never to be imported directly. \nHowever, VSCode will soon enough have to probably work with the mod folder for \"GoToDefinition\" and auto completion. But for now, they are just causing noise and confusion between the old GOPATH and src/mod. Hi,\nThanks for this Ramya and everyone!\nIf I have GO111MODULE=auto and I'm inside GOPATH (meaning modules are off,\nthough my repo has go.mod), the Auto completion doesn't work. I know you\nmentioned Auto-completion is not working for go modules but is the regular\nauto completion for GOPATH also not working if we opt in to beta?\nBest,\nOn Sun, Sep 23, 2018 at 3:53 AM Ramya Rao notifications@github.com wrote:\n\nAnother update:\n\nSupport for the Go to definition, symbol info on hover and Signature\n   Help features are now available if you are using the gogetdoc tool.\nThere is a new beta version\n   https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension\n   of this extension.\nInstall the new beta version => add the setting \"go.docsTool\":\n   \"gogetdoc\" => run the command Go: Install/Update tools => choose\n   gogetdoc and gopkgs => Press Ok to update. Both these tools support Go\n   modules.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1532#issuecomment-423798674,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APihdSKiMTPF6TZgsWd4CDVWX_ZJShDjks5udz37gaJpZM4SNton\n.\n\n\n-- \nMarwan Sulaiman\nSoftware Developer\nMobile: 203-722-5772\n. @ramya-rao-a i updated and commented the pr, thanks for taking a look! . @ramya-rao-a I've applied your last suggested edit, which seems to be working as intended. Thanks again for pointing out all the edge cases! Let me know if this needs further edits. . @ramya-rao-a tested it out. Looks good. Thank you!!\n. @ramya-rao-a ok to merge on my end. \nSomething kind of related but probably for another pr: would it be possible to just remove all packages nested under GOPATH/src/mod from suggestions and imports? This is because of vgo (and soon Go 1.11) new module system. We're never gonna import anything directly from there. \nI'm happy to push another PR for it if you can give me some direction. Thanks!. Gordon, that's expected. Standard library comes first. But you now don't\nhave to sift through the 100s of packages from your GOPATH as your CWD\npackage comes at the top (after std lib and keywords etc)\nOn Thu, Jul 19, 2018 at 9:40 AM Gordon Tyler notifications@github.com\nwrote:\n\n1782 https://github.com/Microsoft/vscode-go/pull/1782: I still get Go\ncore packages suggested before my current workspace's packages. E.g. I have\na package called git.mycompany.com/project/repo/internal/importer and\nwhen I type imp in another package I get suggestions in this order:\n\nimport (keyword)\ngo/importer\ngit.mycompany.com/project/repo/internal/importer\ngolang.org/x/tools/refactor/importgraph\n\n1769 https://github.com/Microsoft/vscode-go/issues/1769 works for me.\nI had actually noticed this bug yesterday, using the current release\nversion of the extension. \ud83d\udc4d\n1739 https://github.com/Microsoft/vscode-go/issues/1739 works for me.\nI can also confirm the debug binary cleanup works for me on Windows as\nwell.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1797#issuecomment-406279862,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/APihdbOuNeMm9GQyiGfiPfACGz2e07ieks5uIIxcgaJpZM4VVhWK\n.\n\n\n-- \nMarwan Sulaiman\nSoftware Developer\nMobile: 203-722-5772\n. @ramya-rao-a i'm using guru for tools and true for lang server. @stamblerre @ramya-rao-a I think this PR breaks auto-complete for module-enabled workspaces. Because -unimported-packages flag is not recognized by stamblerre/gocode . Maybe more readable if we did the following? \nconst { activeTextEditor } = vscode.window;\n    if (activeTextEditor) {\n        let selection = activeTextEditor.selection;\n        if (!selection.isEmpty) {\n            // get selected text\n            selectedText = activeTextEditor.document.getText(selection);\n        } else {\n            // if selection is empty, then get the whole line the cursor is currently on.\n            selectedText = activeTextEditor.document.lineAt(selection.active.line).text;\n        }\n        selectedText = getImportPath(selectedText);\n    }. igu :) https://github.com/Microsoft/vscode-go/pull/1105. This is so that we don't get stuck in an infinite loop. And since we say try after sometime, it shouldn't be a surprise. . @ramya-rao-a this is so that the unimported packages from the same project (or workspace) are prioritized over the rest of the package suggestions. Say you are in project a and you start typing b in main.go, when the imports are suggested i'd like to see a/b before someOtherProject/b so i can just hit enter and a/b is imported. Most of the time when you wanna import a package, it's most likely either from your own project, or from the standard library, or a third party. Third party libraries have special cool names so they usually come first anyway. But when you type generic package name like log or errors, you get too many suggestions from GOPATH and you most likely just want the log package from your own project. . @ramya-rao-a ah, yes that was intentional. If you have a log package inside your project, then you are most likely going to import your own log package than the standard library one. \nBut I'm still happy if the requirement is that standard packages are always shown first. \nWhich way do you prefer? And if the latter, how would you like me to make the sorting work? I'm thinking something like: \nif (isStandardLibrary) sortLetter = 'a';\nelse if (isProjectLibrary) sortLetter = 'b';\nwould that work? assuming we have a function to figure out if an import is std lib :) \n. ",
    "awreece": "\nIs it ok to expect the user to specify these files via settings?\n\nThat would be acceptable to me and appears to be generally accepted for other IDEs. It is certainly an easier solution than attempting to parse the go:generate comment line.\nIt also a solution that lends itself easily toward building some default configurations, e.g. \"if a .proto file is changed, run go generate in the same directory\" that would cover 90% of use cases.. ",
    "jmmv": "Hmm, maybe you are right. What I did before was copy/paste the failed gorename command in the terminal and got an error saying that it could not find the package for my source file. Then, after adjusting GOPATH on that manual invocation, the error changed to something else\u2014so the rename was failing anyway for other reasons. I cannot make this fail now in any other way, so I guess it works.\nAnd no, this is not on Windows.\nThanks for the fix and for the great plugin!\n. ",
    "abadcafe": "@lukehoban \ngocode and other commands are installed by package manager and put in global path like /usr/local/bin usually. Set go.gopath to /usr/local is not grace.\nIn the other hand, if I set go.gopath to \"${workspaceRoot}\", which is convenient when work in multi-workspaces, then every workspace need to \"go get\" a gocode, which is duplicated.\nSo in my opinion, add a option \u201cgo.path\", which act as the PATH environment, is more handy than \"go get\" many times in every workspace.\n. @lukehoban \nIn fact, this assumed \"go.path\" option is just a workaround for a stupid OSX design.\nIn OSX, I can set the PATH in terminal with bash like this \"export PATH=xxx\", but this action never affect the global environment, and it is hard to set global envirionment in OSX system boot (the /etc/profile in OSX is not executed at system boot). So the GUI application in OSX have a default PATH value as '/usr/bin:/bin:/usr/sbin:/usr/sbin:/sbin'.\nBut the package manager like Homebrew install CLI applications into /usr/local/bin, which can not access by the GUI application.\n. @lukehoban \nnow I got this:\n\nand this is the value of PATH (read from the console of VS Code develop tools as you mentioned):\n\"~/bin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin:/sbin\"\nand this is the ~/bin:\n$ ls ~/bin\nbcomp  eagle.py  gocode  upload.py\nrun the gocode in the terminal:\n$ gocode -v\nflag provided but not defined: -v\nUsage: gocode [-s] [-f=] [-in=] [-sock=] [-addr=]\n        []\n......\nSo here, the PATH in the VS Code is not take effect.\n. OK, I found the problem.\nIf i change the ~/bin to $HOME/bin, everything is OK.\nThank you for your help.\n. ",
    "lennykean": "Sure. \nIt does happen on all code. I don't get any errors, and there is nothing in the debug console. \nGo: 1.6\nDelve: v0.11.0-alpha\nVS-Code: 0.10.11\nvscode-go: 0.6.30\n. I updated to 0.6.35 I'm still getting the hanging, but now I have some information in the debug console\n2016/03/25 17:42:56 debugger.go:61: launching process with args: [./debug]\ncould not launch process: could not fork/exec\n. Ah, it was delve. Thanks for pointing me in the right direction. I had to set trust levels higher on my cert before signing. Thanks!\n. I had a lot of issues getting that to work too. Make sure you are setting the trust levels high enough before you sign it. And it may take multiple tries. It's really a delve issue. You'll see the same problem if you run dlv manually. \n. ",
    "coxx": "This error reproduced when you select an identifier but your text cursor is not at its first character.\nI think the offset should be first character of selection in case of selection.\n\n. Sorry, my bad. I'll close the issue.. I've re-checked and can confirm that the issue is only reproduced if go-outline is outdated. \nIt'd be nice if the message would be more informative (and go-outline could report some version).. I've re-checked and can confirm that the issue is only reproduced if go-outline is outdated. \nIt'd be nice if the message would be more informative (and go-outline could report some version).. ",
    "pierznj": "This shouldn't be closed IMO. I always got it and gave up trying to rename symbols because of this error, until I saw this. You shouldn't get a nasty error like this just because you selected the text of the symbol before trying to rename it.. Hmm, I just tried again and it worked with the text selected. However, I can definitely say that this feature is unreliable in practice for me. As noted above I gave up trying to use the feature due to errors saying this: \nfailed MSpanList_Insert 0x464110 0x3c235d63c754c 0x0\nIt worked when I placed the cursor at the start of the symbol to be renamed, but I have since seen the problem occur that way too, so this may be a red herring.. It came up apparently randomly. I wasn't doing anything obviously different. Not helpful, I know :(. OK, I set the go.goroot and go.gopath settings and that fixed it. Not sure why that was necessary, but hey, it works.. Thank you - that makes sense when I think about it! I actually found this suggestion in another thread yesterday and it did the trick. I am noticing that the validation of Go code is much slower now than before - used to get error indicators almost right away, now there's a pause of several seconds. Closing this issue, but wonder if you have a suggestion for that?. I did as you suggest, but it was still very slow. However I noticed on the output that my linter (gometalinter) was not found in my PATH. I changed to standard linter and it's quick again. Thanks so much for your help!. ",
    "codeliveroil": "Same failed MSPanList_Insert error for me as well. Rename would work in single file projects like a HelloWorld.go but not in larger ones where the rename would span multiple files and sometimes within a single file as well.\nI deleted gorename and had vscode reinstall it and it works fine now.\nI couldn't obtain version differences between the old and the new version though I have both binaries. Let me know if there is anything useful that I can retrieve from them. Attached is a bit of the stack:\n\nOut of curiosity, where do the error logs for vscode go to, on the filesystem?. ",
    "jb-san": "I am having the same problem, have followed the install instructions for delve, and no errors when CERT=dlv-cert make install, but i also get the 2016/04/20 14:58:00 server.go:38: Using API v1\n2016/04/20 14:58:00 debugger.go:61: launching process with args: [./debug]\ncould not launch process: could not fork/exec any ideas ?\n. ",
    "rogeralsing": "Changing the color theme makes it better, seems like the default theme just use white for a lot of different token types.\n. \n. ",
    "owenmorgan": "@lukehoban by any chance? this is on mac os btw.\n. ignore this.. just realised i copied the use in the set up instructions :-1: \n. ",
    "vastbinderj": "My only comment on testing, is that in my experience it is better to have tests in a separate package from the package being tested.  In this manner you are testing the package in the same way it will be used.\nI really like the other suggestions and in addition would like go build, go run and go test shortcuts which I did create after fashion by wading thru other issues in this repo.\n. Why not mirror this functionality from the golang team plugin for sublime?\n. ok - I figured this out.  I downloaded the editorconfig plugin for vscode.  For historical purposes, I created this .editorconfig file the root of my golang project:\n```\nroot = true\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = LF\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n[*.go]\nindent_style = tab\nindent_size = 8\n[*.{yml,json}]\nindent_style=space\nindent_size=2\n[*.md]\ntrim_trailing_whitespace = false\n[*.{html,js,css,scss,xml}]\nindent_size=2\n```\n. Linting and format won't fire on save if there are no changes in the file.  I found this annoying, that to lint a file for a code review, I had to edit it and save it...  This was even before 1.1 was released. \nI thought it was expected behavior.\n. ",
    "ls42": "YES! Thanks a million. Works like a charm.\nHave a splendid week, I will for sure.\n. @ramya-rao-a Thanks for your suggestions. I tried tuning the settings and with go.vetOnSave=\"off\" its better. I'll ask over at the go repo for a change.\nThanks again, have a nice day.. ",
    "highskillzz": "i turned the useCodeSnippetsOnFunctionSuggest on but no brackets completion happens is there something else that I should be doing\n. Yes, I got it. Thank you for your help . for some reason for me even though it shows the it is a function when enter or tab is pressed not even brackets are placed and I HAVE TURNED THE go.useCodeSnippetsOnFunctionSuggest to true. Am I missing something??. \n\n. brackets are not appearing when I press enter\ni enabled the go.useCodeSnippetsOnFunctionSuggest. Yes, and sorry if the question is irrelevant but regardless can anybody provide the solution . then this..\n\n\n. It shows like this\n\n. Yes its working now. Thank you and sorry for my misunderstanding. ",
    "koenbok": "It's actually useCodeSnippetsOnMethodSuggest now.. ",
    "domaa11": "Does this give a way to extract more than the first 64 characters? from the command line you can read the next 64 by using this syntax: print variable[64:]: https://github.com/derekparker/delve/issues/609#issuecomment-239161459. ",
    "jbwiv": "I'm curious....should using the debug console in vscode give you access to the print command referenced above? It doesn't seem to work on my end. If you could make it to where print was accessible via the console, I'd bet that would be enough.. ",
    "pavittr": "This would be really useful. I'm currently trying to read a ~200 char string 64 chars at time. Being able to either configure the truncation or to call print variable would be a lot nicer.. @ramya-rao-a thanks for that pointer, I've followed those instructions and now have full length strings, much appreciated :). ",
    "FrenchBen": "It'd be nice to also have:\n\"go.fmtFlags\": [],\nedit: Looks like it exists, but no docs:\n\"go.formatFlags\": [],\nhttps://github.com/Microsoft/vscode-go/blob/dca9bef794ba1a40f42a1dff63ab5fe9658e4652/package.json#L270\n. ",
    "tamird": "guru defintion is also a thing now - it should be used instead of godef.\n. Sounds worthy of an upstream bug report. For instance, vim-go has already\nreplaced godef with guru.\nOn Mon, Apr 25, 2016 at 4:57 PM, Otto Bretz notifications@github.com\nwrote:\n\nIn my fairly large project guru definition lookups are much slower than\ngodef:\ngodef time: 0.03 seconds\nguru time: 2.13 seconds\nSo I would prefer if the godef option can be kept.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/285#issuecomment-214519447\n. \n",
    "ottob": "In my fairly large project guru definition lookups are much slower than godef:\ngodef time: 0.03 seconds\nguru time: 2.13 seconds\nSo I would prefer if the godef option can be kept.\n. Synchronicity! With this patch https://go-review.googlesource.com/#/c/22526/ guru is now as fast as godef. Consider my objection withdrawn.\ngodef time: 0.0670468807220459 seconds\nguru time: 0.09794092178344727 seconds\n. > Is the validation pkg in your case a vendor pkg?\nYes it is.. ",
    "Mparaiso": "How about adding a new default task runner for Go ? when I execute the build command and I don't have tasks configured there is a menu that displays an number of task runners, why not add a default task runner for Go in that list ? Or can the plugin install a new default task runner ? \n. thank you. ",
    "sharno": "Also \"go run\" is being ignored in this issue, it's so useful while developing scripts to test them on the fly. I'd appreciate adding it so much.. ",
    "hongchaodeng": "I'm just testing rename functionality with simple file like:\nGo\ntype item struct {...}\nfunc main(){\n  it := &item{}\n  ...\n}\nAnd then rename \"item\".\nTo be more specific, there shouldn't be any syntax error or excessive amount of errors.\n. Closing this\n. Reinstalling everything seems to fix the problem :)\n. ",
    "samherrmann": "Alternatively, since vscode always provides the filename with a lowercase drive letter, maybe vscode-go should \"normalize\" GOROOT and GOPATH to lowercase drive letters and then pass those to the guru process?\n. hmm right after I created the pull request, I went back to the issue thread and realized that I should have probably used the bin lookup instead of appending the tools path to the GOPATH.\n. Yup, I will try to do this tonight.. Yes I think I agree as well. I think I used an env var because it seemed to make sense when looking at the existing code, but from a user's point of view a config key makes probably more sense.\nHere is my first attempt at implementing the change:\nhttps://github.com/samherrmann/vscode-go/commit/18829b582766f13fd49599fdf3277e591974e8fe\nPlease provide feedback if anything already jumps out at you.. Just a heads up that I unfortunately do not have time to work on this for the next few weeks, so if anyone wants to take over feel free to do so.. ",
    "luweijie007": "I see now ,thanks your time for answer\n. ",
    "atishpatel": "Is there a reason this hasn't been merged? I would really like this feature. Could I help in any way? \n. Just a report. I switched to gogetdoc and it seems to be working pretty slow (~2 secs), but I had to switch because I kept getting godoc not found error. :man_shrugging: . ",
    "crazw": "@pdwx Thank you! \n. ",
    "f839903061": "I  have the same problem !  China\nvscode  version:1.18.1\nIt's auto install golang tools 20% successfully and 80% failed\n\u76ee\u524d\u6211\u53ea\u80fd\u624b\u52a8\u4e00\u4e2a\u4e00\u4e2a\u7684\u5b89\u88c5\u4e86. ",
    "paddie": "I also don't know if it is maybe my configuration for oracle (which I assume is being used) that is to blame. Does anyone else have this issue?\n. It takes around 10 seconds to rename, and then it runs forever until I\nclose the tab.\nOn Wed, 17 Aug 2016 at 18.03, Rana Ian notifications@github.com wrote:\n\nI don't experience the issue anymore and I only upgraded. Unclear if there\nis a setting/state to create slowness or if it's resolved.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/297#issuecomment-240460455,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAaEQqdc3cgBgS6NIpSClI-r9MYHQZQRks5qgzDogaJpZM4IJE3a\n.\n. I did the renaming yesterday and it was significantly faster but there has\nbeen at least one update since then. I assumed it was due to that update. I\ncan't be sure it wasn't just a local change though.\n\nAt the time of reporting it was on OS X, El Capitan with the latest\nupdates.\nOn Mon, 19 Sep 2016 at 23.07, Ramya Rao notifications@github.com wrote:\n\n@paddie https://github.com/paddie Which platform are you on? I see the\nslowness in Windows but not in Mac\nAnd also it is more slow when renaming symbols across files compared to\nrenaming local symbols that are scoped to a single file\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/297#issuecomment-248127088,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAaEQpq1Cd69c_GmkNZKNmKkZICYIHoqks5qrvmmgaJpZM4IJE3a\n.\n. \n",
    "rana": "I don't experience the issue anymore and I only upgraded. Unclear if there is a setting/state to create slowness or if it's resolved.\n. ",
    "jmhodges": "This is happening on Mac 10.12.6 with VSCode  for me. Maybe a large GOPATH problem? Not sure the best way to hook in profiling info. Imagine I'll just have to try to duplicate the gorename calls vscode-go is making?. ",
    "dbenque": "@ironcladlou, it is not gorename only. For example the debugger dlv also completely mess up with symlink.\nWith the values of my previous example if I set a breakpoint in main.go at the root of my project, the breakpoint is associated to /home/david/code/go/src/myproject/main.go and the debugger just don't stop... but if I manage to place the breakpoint to /mnt/code/go/src/myproject/amin.go then it works.\n. ",
    "gosp": "@ramya-rao-a  it is a pity that GOPATH which is configured in settings.json isn't recognized by Debug: Start Without Debugging. I MUST reconfigure them in launch.json\nthe example of .vscode\\settings.json\n{\n    \"go.inferGopath\": true,\n    \"go.toolsGopath\": \"D:\\\\SourceCode\\\\golang\"\n}. vscode golang extension is installed General GOPATH: \"D:\\\\SourceCode\\\\golang\"\nSo I MUST set \"go.toolsGopath\".\nAfter Go: Current GOPATH:\n      Current gopath Current GOPATH is inferred from workspace root: d:\\SourceCode\\etc.project\\server\nErrors:\nmain.go:11:2: cannot find package \"github.com/go-chi/chi\" in any of:\n    D:\\Tools\\go\\src\\github.com\\go-chi\\chi (from $GOROOT)\n    D:\\SourceCode\\golang\\src\\github.com\\go-chi\\chi (from $GOPATH)\nThe error means it can't find package which is in vendor folder.\n.vscode\\launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}. ",
    "ozkar99": "I am guessing its a matter of fact of searching . and ./vendor, in addition to $GOROOT and $GOPATH, but i cant find the error, when i search in the repo, maybe this issue is not much vscode related as it is more about a certain tool?\n. Its deff, godef's fault, sorry guys.\n. ",
    "billshu": "Then can I know what do I need to do to make \"Find All References\" work for Go code? When I first run, there is a prompt suggest me to go get some go tools, I think it's guru, I did that, the prompt is gone, but \"Find All References\" still don't work. \n. The \"Find All Reference\" works on Linux version of VS Code. So I inclined to think this is a go on Windows issue itself, not the extension. Thanks for your help anyway.\n. ",
    "davyzhang": "I think it's a very good idea to auto map current go file to its test file foo.go map to foo_test.go\ngo has its standard name convention here\n. Thanks for the reply, my GOPATH is a symlink of other directory, So for now it shows :Current GOPATH:/Users/myname/go\nbut it is actually a symlink of /Users/myname/Dropbox/go\nI don't know if it will cause the problem, \n. Yep, it turns out that the symlinked directory is the culprit of this problem\n. Thanks for your time, I cooked up a workaround by deleting the .a file manually when saving a .go file\n``` python\n!/usr/local/bin/python3\n'''delete .a file '''\nimport sys\nimport os\nGO_PKG_PATH = os.environ['GOPATH'] + '/pkg/darwin_amd64'\ndef main():\n    path = sys.argv[1]  # dir path\n    ext = sys.argv[2]  # current edit file ext\n    if ext != \".go\":\n        return\n    pkg_name_base = \"/\".join(os.path.relpath(path,\n                                             os.environ['GOPATH']).split(\"/\")[1:-1])\n    if pkg_name_base.endswith(\"cmd\"): #cmd dir usually generate command binaries\n        return\n    print(\"package base dir %s\" % pkg_name_base)\n    pkg_name = path.split(\"/\")[-1]\n    target_lib_file = GO_PKG_PATH + '/' + pkg_name_base + '/' + pkg_name + '.a'\n    print(\"removing %s\" % target_lib_file)\n    os.remove(target_lib_file)\nmain()\n```\nIts also surprised me that vscode dosen't support Running task on save Microsoft/vscode#2159\nBut fortunately someone wrote a wonderful extension to help \ud83d\ude04 \nhttps://marketplace.visualstudio.com/items?itemName=emeraldwalk.RunOnSave \n. Sorry for the vague explanation, \nhere is how vscode-go works even if I turned on useCodeSnippetsOnFunctionSuggest\n\nHere is how typescript's  suggestions of functions work\n\nthe tooltip window stays and changes during input process, and also highlights current parameter.\n. I know how it goes now, the problem is that my function has a long list of parameters, so I split them into multiple lines like \ngo\nfunc abc(a,b,c,d,e string, \nf time.Time)\nand the signature help won't work.\nIf I changed them to\ngo\nfunc abc(a,b,c,d,e string, f time.Time)\nParameter hints work as expected\n. ",
    "JCzz": "Did you manage to get this working? I have this on stackoverflow\n. Sounds great.\nHow will I know when it will support api v2?\nThanks. ",
    "azr": "1/ to create a method you'd type func so the autocompletion would trigger.\n2/ if someone's on #168 I think we could just close this pr. I'd love it too !\nthanks :)\n. same here\n. ",
    "vkryukov": "I have the same problem now, with latest Code (1.0.0) and vscode (0.6.38). All the go tools are installed, but Intellisense works only occasionally.\n. Update: I was able to resolve the issue by updating to go 1.6.2, reinstalling VS Code, reinstalling Go extension, and rebuilding all go development/analysis tools.\n. ",
    "localhosted": "All suggestions are coming from packages in the system's GOPATH env. variable, not from my workspace-defined gopath. \n. Never mind, it just looks first in GOROOT then in GOPATH.\n. ",
    "saggafarsyad": "I'm using vscode 1.1.0 in Windows and I cannot overwrite GOPATH in workspace settings. \nI write like this \"go.gopath\": \"C:\\\\Users\\\\<user_folder>\\\\Lab\\\\go-vscode\\\\bin\"\nEverytime I check Current GOPATH it returns undefined. I have no idea what I missed\n. ",
    "benclarkwood": "See https://github.com/Microsoft/vscode-go/pull/375 for a proposed fix.\n. @ramya-rao-a sorry I didn't include proper repro steps before. Here is a repro that always causes the failure to collapse for me:\n1. Create a file (e.g. importsbreak.go) with an import:\n```\npackage main\nfunc test() {\n    fmt.Println(\"test\")\n}\n``\n1. Save and close the file (the auto-import will addfmt`)\n2. Reopen the file, use the command palette Go: Add Import command to add another import (e.g. net/http)\n3. I at least end up with something like this then:\n```\npackage main\nimport \"fmt\"\nimport \"net/http\"\nfunc test() {\n    fmt.Println(\"test\")\n    http.NewRequest(\"GET\", \"banana\", nil)\n}\n```\nAs @peterbourgon suggested, the \"simplest\" (and arguably best/most consistent) solution is to just always use the \nimport (\n  ...\n)\nblock style for imports. I'll take a look at what has to change in goImport.ts for that and submit a PR against this ticket.\n. @ramya-rao-a as you said, I think the right approach is for my change to be wrapped in a setting (default == false) that when true gives @peterbourgon and I what we want (always block imports) and when false maintains the current status quo.\nWhich is what I shall endeavor to do :).\n. So, I took a quick (and a little bit slapdash) stab at this.\nAFAICT, the only way to end up with many single line imports is:\n1. Intentionally having them\n2. Running goimports when you have exactly one package referenced, and then manually adding imports via the command palette.\nWith the flag enabled, both #1 and #2 should no longer occur.\nThe new behavior (with go.blockImportsOnly == true) is:\nFile with no imports:\n1. User manually adds an import from command palette\n2. The extension inserts this as import ( \"package\" )\nFile with one or more single line imports\n1. User adds an import from command Palette\n2. All imports are collapsed into a block\n3. User saves file, goimports runs and properly sorts the imports in the block\nFile that already has an import block\n1. User adds an import from command palette\n2. Import is appended to the block\n3. User saves file, goimports runs and properly sorts the new import into place\n. Oh my gosh this is such a better way of doing this!\nThanks!\n\nOn Sep 25, 2016, at 23:03, Ramya Rao notifications@github.com wrote:\n@ramya-rao-a commented on this pull request.\nIn src/goImport.ts:\n\n\nlet firstImport = imports[0];\nlet lastImport = imports[imports.length - 1];\n  +\n// Construct the import block.\nlet importBlock = 'import (\\n';\nimports.forEach(element => {\nimportBlock += '\\t\"' + element.package + '\"\\n';\n});\nimportBlock += '\\t\"' + imp + '\"\\n'; // Add the user's new import\nimportBlock += ')\\n';\n  +\nreturn vscode.window.activeTextEditor.edit(editBuilder => {\n// First, delete all the single packages.\neditBuilder.delete(new vscode.Range(new vscode.Position(firstImport.start, 0), new vscode.Position(lastImport.end, 10000)));\n// Now, insert the import block.\neditBuilder.insert(new vscode.Position(pkg.start + 2, 0), importBlock);\n  Like @lukehoban says, this would result in comments that were previously between packages and imports to appear after the new import block.\n  Also, comments in between single import statements are lost too. Example:\n\n\nimport \"math\"  //Helps me in math\n// This is my custom package\nimport \"mycustom\"\nHow about doing this instead?\n1. Insert (\\n\\t after the word \"import\" in the first import\n2. Replace the word \"import\" with \\t for rest of the imports\n3. Insert ) in the line after the last import\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Haven't abandoned this, just been supes busy at work. Will add tests / address additional concerns this weekend hopefully.\n. @ramya-rao-a thanks! Sorry, Golang became not my daily driver and I totally forgot about this PR. \ud83d\ude47 .. If anyone has a better name...\n. \n",
    "kdeenanauth": "I was able to fix this with updating the test configuration to use fileDirName instead:\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\", \n            \"remotePath\": \"\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": []\n        },\n        {\n            \"name\": \"Tests\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\", \n            \"remotePath\": \"\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\n. Quick workaround is to add an arg to the test configuration:\njson\n{\n    \"name\": \"Tests\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"test\",\n    \"remotePath\": \"\",\n    \"program\": \"${fileDirname}\",\n    \"env\": {},\n    \"args\": [\"^TestGenerateConfigurationFailure$\"]\n}\n. @toodlez I'm having trouble with it too - my mistake. I could've sworn I had a working configuration.\n. When clicking on an import statement line, go to the associated file(s). I realize there may be some disambiguation problems though :\\\n. I'm not sure \u00af(\u30c4)/\u00af\nIdeally showing a popup so you can click the file you want. But I've heard it's not possible for extensions to implement custom menus. You might just be limited to going to the first file.\n. ",
    "deejross": "Nevermind, I think it was an issue with the network. Running go get manually would just hang, then actually running git clone it would get stuck at Receiving objects. Switching networks I was able to run the go get command successfully.\n. I'm noticing the same behavior and would be happy to help resolve it. This issue makes VSCode nearly unusable for Go development. I've had to fallback to IntelliJ and using fmt.Println() statements for debugging since the Go plugin for IntelliJ doesn't work with debugging on the Mac.\n. The only time I've ever seen this error is when VSCode was opened in something other than their $GOPATH folder (workspace), or the configuration in $GOPATH/.vscode/launch.json points to the wrong folder.\n. Unfortunately, this is a recurring theme any time a VSCode update comes out. I typically wait a few weeks before updating to give the plugin author some time to fix the issues that come with new VSCode updates.\n. For some reason I thought VSCode 1.5 was the new one, but it's actually 1.6, so I retract my previous comment. One thing I will say is that clearing out all of the go tools in your $GOPATH/bin folder, opening the command pallet, and choosing \"Go :Install Tools\" did fix a lot of issues for me in VSCode 1.5.3, and now 1.6. \n. ",
    "ivahaev": "Mike, i think, vendor dir must be in project, not in $GOPATH/src\n. ",
    "MikeMangialardi": "While I know that Glorious Leader 'Commander' Rob Pike says we should put all of our go source code within a single GOPATH, my coworkers and I have been following the GOPATH per project paradigm, and we are able to vendor files within the /src directory without issue. If the 'go' tool supports $GOPATH/src/vendor working for vendored dependencies, I think it's only fair that go tools for VS Code support that as well. If you want, I would be happy to spend some time to put together a pull request to get this to work. \n. I did a little more investigating, and it seems that this only occurs when I run VSCode from a zsh shell; when I open VSCode from a bash shell, it works as expected. . ",
    "jakearchibald": "Just ran into this issue. It's especially useful for getting a file out of git's history, eg:\nsh\ngit show branch-name path/to/file.js | code\nFWIW, this works in Sublime & Atom.\n. Hm, this seems to be the wrong repo though.\n. Reposted at https://github.com/Microsoft/vscode/issues/6161\n. ",
    "prasannavl": "@jakearchibald, oh damn! I must have pulled up a link from history and wrote it in a hurry. This was an awful mistake to do. Sorry, will close it and file it correctly under vscode in a bit. Thanks for pointing it out. \n. ",
    "toodlez": "@kdeenanauth Adding an arg containing the test's name does not work for me.  It still runs all of the tests in the directory rather than just the one I specified. Any suggestions?\nMy test looks like this:\nfunc TestStringTracesPOST(t *testing.T) {\n...\n}\nAnd my configuration looks like this:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Tests\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"remotePath\": \"\",\n            \"program\": \"${workspaceRoot}/implementation/handlers\",\n            \"env\": {},\n            \"args\": [\"^TestStringTracesPOST$\"]\n        }\n    ]\n}\n. ",
    "marklap": "This is how I got it to work:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch Tests\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"remotePath\": \"\",\n            \"port\": 2346,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [\n                \"-test.v\",\n                \"-test.run\",\n                \"TestMySuperCoolTestName\"\n            ],\n            \"showLog\": true\n        }\n    ]\n}\nNote the value for the args key.\n. I'd try this...\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch TestABC\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"remotePath\": \"\",\n            \"port\": 2346,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [\n                \"-test.v\",\n                \"-test.tags\",\n                \"BUILDTAG\",\n                \"-test.run\",\n                \"TestABC\"\n            ],\n            \"showLog\": true\n        }\n    ]\n}. Perhaps. But I assumed folks would have the same trouble that #225 addresses particularly with the `main` function snippet. So, I used `fmain` and to be consistent, I used `finit` as well. I'm used to the #225 problem because SublimeText has it too and I've gotten used to escaping out of the autocomplete. So, if folks think `main` and `init` are better prefixes... that's fine with me.\n\n. fmain and init work for me.\n. Someone give me the nod and I'll update my PR to change finit to init.\n. ",
    "willis7": "@marklap - this worked for me, but it would be great to get this as a first class feature of the extension.. ",
    "nikhilraog09": "I'm trying to debug some test (lets say TestABC with some build tags and command line options for verbosity and so on). I run it as Ex: \n\ngo test -tags=BUILDTAG -v -run=TestABC\n\nwhat would be the right test/sample configuration to debug with dlv ?. 'gocode' is not recognized as an internal or external command,\noperable program or batch file. \n. @ramya-rao-a ,  its restricted to Large projects, Golint, auto complete works fine now But definitely Godef  needs a revamp or the way it works needs to be more memory efficient. Its v slow compared to atom or sublime with latest Go extension. . ",
    "aphillips801": "Two quick questions: What .JSON file do you add the above to? How do you invoke it from within VSCode? (I've been searching and experimenting for some time and it is not obvious to my weak brain. :). ",
    "darylng": "\nI'm trying to debug some test (lets say TestABC with some build tags and command line options for verbosity and so on). I run it as Ex:\ngo test -tags=BUILDTAG -v -run=TestABC\nwhat would be the right test/sample configuration to debug with dlv ?\nI'd try this...\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch TestABC\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"remotePath\": \"\",\n            \"port\": 2346,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [\n                \"-test.v\",\n                \"-test.tags\",\n                \"BUILDTAG\",\n                \"-test.run\",\n                \"TestABC\"\n            ],\n            \"showLog\": true\n        }\n    ]\n}\n\nI think it should actually be the following as it's a build tag and not a test argument. \n\"configurations\": [\n        {\n            \"name\": \"Launch TestABC\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"remotePath\": \"\",\n            \"port\": 2346,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"buildFlags\": \"-tags=BUILDTAG\",\n            \"args\": [\n                \"-test.v\",\n                \"-test.run\",\n                \"TestABC\"\n            ],\n            \"showLog\": true\n        }\n    ]. ",
    "dearplain": "Are you using the latest vs code? this should be fixed in the newest vs code.\n. Is C:/Users/andgoss/GoLangCode your $GOPATH?\nthis is my suggestion: you should put everything under $GOPATH, do not create soft link, do not use vendor folder.\n. Press F1, type install tools, you can see Go: install/update tools, that's it.. so you should close this issue.. ",
    "liuhewei": "Already resolved. Sorry for not close this issue in time.\n. ",
    "tilinna": "Looks that @rogpeppe is no longer maintaining godef. Have you considered other options?\n. The issue is now fixed on godef master, thanks @rogpeppe :)\n. Perhaps you forgot to use the -u flag on go get?\ngo get -u github.com/rogpeppe/godef\n. You are right, it doesn't function properly. I think it \"worked\" for me because I had some leftovers around. There seems to be yet another issue: rogpeppe/godef#39\n. I wouldn't like to enable formatting on all languages. Therefore, I suggest the go.formatOnSave to function like previously until https://github.com/Microsoft/vscode/issues/13547 is fixed.\n. I think the whole feature should be made compatible with the No Code.. ",
    "volkanunsal": "How can I activate this feature in my project? I upgraded both godef and vscode-go, but it still complains about not finding the packages in vendor directory.\n. I'm sure I did use the -u flag in combination with the -v flag. That should be ok, right?\nHere is a screenshot of my workspace. You can see the squiggly line under the import statement, even though the package is in the vendor directory. \n\n. @rogpeppe I tried that and didn't work. Also, when I hover over the squigly line it tells me which directories the extension is looking through. There are two directories on the list ($GOROOT and $GOPATH) and vendor directory is not on it.\n. @rogpeppe Ah, I believe the issue is I'm not setting GOPATH to my project directory. My project is laid out using the vendor convention of a gb project. I suppose then I'm out of luck unless I move my vendor directory under src folder and set the GOPATH?\n. ",
    "rogpeppe": "The directory hierarchy shown in that image shows the \"vendor\" directory underneath\nthe very top level of $GOPATH, which I don't believe is supported.\nSpecifically, it shows:\n/src/sqlserver/fixtures/main.go\n/vendor/src/github.com/jmoiron/sqlx\nbut vendor directories must be inside the source directory, as documented\nin go/build:\n\nImport searches vendor directories that apply in the given source directory\n\nTo make this work, you'll want to put the sqlx package\ninside /src/vendor.\n. @volkanunsal Could you provide a tar archive that demonstrates the issue? I can't reproduce your situation, so I need more information if I'm to fix your problem. Thanks.\n. For the record, I just created the following files:\n```\n/tmp/v/src/vendor/github.com/jmoiron/sqlx/sqlx.go\npackage sqlx\nvar X = 34\n/tmp/v/src/sql-server/fixtures/main.go\npackage main\nimport (\n    \"github.com/jmoiron/sqlx\"\n)\nvar x = sqlx.X\nfunc main() {}\n```\nI then set GOPATH to /tmp/v, and godef\nfound github.com/jmoiron/sqlx from src/sql-server/fixtures/main.go\njust fine (it finds sqlx.X too).\n. Yes, that would explain things. Godef supports the standard Go conventions. It may work if you set GOPATH=\"$PROJECT:$PROJECT/vendor\" where $ PROJECT is your project root directory.\n. ",
    "wzzhu": "Setting GOPATH=\"$PROJECT:$PROJECT/vendor\" won't work as godef will look for $GOPATH/src, while vendor has no intermediate \"src\" dir, e.g., vendor/github.com/...\nFor Go 1.7.1, macOS Sierra, the problem appears again. godef won't search vendor dir even if the layout is src/vendor/github.com/... Please take a look.\n. ",
    "federaldi": "I'm getting the same issue on Mac OS X. No other changes, except updating vscode.\n. I'm running the latest vscode version.\n1. open the golang project in vscode \n2. open a go source file \n3. set a breakpoint in a valid location and notice it is red -> so it is valid\n4. start your debug session \n5. notice the breakpoint turns to grey\nI couldn't yet establish a more narrow scenario, as sometimes it works, sometimes it doesn't [debugging].\n. ",
    "dylan-bourque": "Luke,\nThanks for following up.  I'm seeing the same behavior at @federaldi.  I get a \"normal\" red dot in the gutter when setting a breakpoint in the code editor.  When I launch the program, the red dot turns grey and starts showing a tooltip that says \"Unverified breakpoint\".  It's the same when I try to set a breakpoint in a running program.\nThe debugger breaks correctly if I set the stopOnEntry option in launch.json, but I can't seem to get it to set/accept any other breakpoints.\nI have not upgraded to VS Code 1.1 yet.  I will give it a shot and let you know.\n. I upgraded to VS Code 1.1 this morning.  Seeing the same behavior, but a different error in the VS Code Developer Tools console.\n\n[Mon May 16 2016 09:53:20] [ERROR] \nrawDebugSession.ts:363 waiting for debug protocol on stdin/stdout\nindex.html?config={\"pathArguments\"%3A[]%2C\"programStart\"%3A0%2C\"enablePerformance\"%3Afalse%2C\"verbo\u2026:28 [uncaught exception]: TypeError: Cannot set property 'stoppedDetails' of undefinedonError @ index.html?config={\"pathArguments\"%3A[]%2C\"programStart\"%3A0%2C\"enablePerformance\"%3Afalse%2C\"verbo\u2026:28(anonymous function) @ index.html?config={\"pathArguments\"%3A[]%2C\"programStart\"%3A0%2C\"enablePerformance\"%3Afalse%2C\"verbo\u2026:100emitOne @ events.js:90emit @ events.js:182window.onerror @ /usr/share/code/resources/electron.asar/renderer/init.js:107i.globals.onerror @ errorTelemetry.ts:62\nindex.html?config={\"pathArguments\"%3A[]%2C\"programStart\"%3A0%2C\"enablePerformance\"%3Afalse%2C\"verbo\u2026:31 TypeError: Cannot set property 'stoppedDetails' of undefined\n    at e.rawUpdate (debugModel.ts:728)\n    at debugService.ts:248\n    at __dirname.undefined.t.Class.define.done (winjs.base.raw.js:1782)\n    at Object.h as _notify\n    at Object.__dirname.undefined.P.enter (winjs.base.raw.js:1127)\n    at __dirname.undefined.t.Class.define._run (winjs.base.raw.js:1343)\n    at __dirname.undefined.t.Class.define._completed (winjs.base.raw.js:1311)\n    at Object.h as _notify\n    at Object.__dirname.undefined.P.enter (winjs.base.raw.js:1127)\n    at __dirname.undefined.t.Class.define._run (winjs.base.raw.js:1343)onError @ index.html?config={\"pathArguments\"%3A[]%2C\"programStart\"%3A0%2C\"enablePerformance\"%3Afalse%2C\"verbo\u2026:31(anonymous function) @ index.html?config={\"pathArguments\"%3A[]%2C\"programStart\"%3A0%2C\"enablePerformance\"%3Afalse%2C\"verbo\u2026:100emitOne @ events.js:90emit @ events.js:182window.onerror @ /usr/share/code/resources/electron.asar/renderer/init.js:107i.globals.onerror @ errorTelemetry.ts:62\ndebugModel.ts:728 Uncaught TypeError: Cannot set property 'stoppedDetails' of undefinede.rawUpdate @ debugModel.ts:728(anonymous function) @ debugService.ts:248__dirname.undefined.t.Class.define.done @ winjs.base.raw.js:1782h @ winjs.base.raw.js:1448__dirname.undefined.P.enter @ winjs.base.raw.js:1127__dirname.undefined.t.Class.define._run @ winjs.base.raw.js:1343__dirname.undefined.t.Class.define._completed @ winjs.base.raw.js:1311h @ winjs.base.raw.js:1440__dirname.undefined.P.enter @ winjs.base.raw.js:1127__dirname.undefined.t.Class.define._run @ winjs.base.raw.js:1343__dirname.undefined.t.Class.define._completed @ winjs.base.raw.js:1311(anonymous function) @ v8Protocol.ts:47e.dispatch @ v8Protocol.ts:117e.handleData @ v8Protocol.ts:84(anonymous function) @ v8Protocol.ts:39emitOne @ events.js:90emit @ events.js:182readableAddChunk @ _stream_readable.js:153Readable.push @ _stream_readable.js:111onread @ net.js:531\n. Late this morning I got a prompt that there was a 1.1.1 update to VS Code available.  I downloaded and installed the update (because the changes specifically call out fixes for debugging issues) but the behavior was the same.\n. I was able to determine today that, at least on my system, the problem seems to be related to whether or not the source file is opened via the VS Code Explorer window vs. opened with a full path.\n\nFollowing my original example, if I click test.go in the VS Code Explorer window, the code editor shows only \"test.go\" in the header area.  If I set a breakpoint on the first line of main() and launch the debugger, my program will not hit it.\nIf, however, I use the File->Open dialog to open the same file, the header in the code editor shows \"test.go /home/dylan/gocode/src/scratch\" instead and the IDE sets the breakpoints correctly and the debugger stops.\nHope this helps. :)\n. Unfortunately, the latest VS Code update (version 1.3) has broken my workaround from May 26.  Today, I am completely unable to set breakpoints and step through my Go code in the debugger. :(\nThe new \"Open Editors\" view appears to always show file with the workspace-relative path (test.go rather than /home/dylan/gocode/src/scratch/test.go), regardless of whether they're opened via the project Explorer window or the File->Open menu.\n. Interestingly, everything is working fine for me now on my Windows 10 system.\nWindows:\nWindows 10 (build 1607)\nVS Code v1.4.0\nGo v1.6.3\nDelve v0.11.0-alpha (via \"go get github.com/derekparker/delve/cmd/dlv\")\nLinux:\nCentOS 7\nVS Code v1.4.0\nGo v1.6\nDelve v0.11.0-alpha (also via \"go get ..\")\n. I upgraded by VS Code and all extensions to the latest versions this morning and I'm still seeing this behavior on my CentOS 7 system.\nCentOS 7.2.1511\nGo v1.6.3\nVS Code v1.7.1\nGo Extension v0.6.47\nDelve debugger v0.11.0-alpha (via go get github.com/derekparker/delve/cmd/dlv)\nThe breakpoint shows correctly in the source window when I click the gutter or use the keyboard shortcut.  After launching the debugger, the breakpoint is greyed out and is never hit.\n@roblourens - I was seeing exactly the behavior you're describing prior to VS Code redesigning the \"Open Editors\" feature.  When I used File->Open to open a file, the tab would show the full path to the source file and breakpoints worked.  Files opened via the project Explorer window would show only the file name and breakpoints were broken.  Today, the behavior is the same (i.e. broken) regardless of how I open the source file.\n. I have a vanilla project in $GOPATH/src/test loaded in VS Code and launch it from the \"Debug\" tool window.\nI set a breakpoint at line 6 and it correctly shows as a red dot in the margin.  When the process launches, the breakpoint indicator changes to a grey dot with a black center for a fraction of a second before the \"This is a test\" string is written to the console, the process exits, and the breakpoint turns back into a red dot.\nDebug Console output:\n2016/11/07 11:20:04 server.go:41: Using API v1\n2016/11/07 11:20:04 debugger.go:61: launching process with args: [./debug]\nAPI server listening at: 127.0.0.1:2345\n2016/11/07 11:20:04 debugger.go:390: continuing\nThis is a test.\ntest.go:\n```\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"This is a test.\")\n}\n```\nlaunch.json:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"stopOnEntry\": false,\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\n. That is correct, @roblourens.  Breakpoints work correctly if I use the Delve debugger directly.\nIf it helps with troubleshooting, my Linux system is an AWS virtual machine using one of the pre-canned CentOS 7 AMIs.  I don't know which one exactly off the top of my head but I could find out.\n. I got some free time and spun up a new, clean system in our AWS environment and was not able to reproduce this behavior anymore.\nWe still have 3 CentOS systems where we cannot set breakpoints, but we've all switched to new machines.\nAs far as I'm concerned, the problems have been resolved by an update to 1 of the pieces or were a symptom of those particular machines.\nThanks for investigating, though.. No problem, @mattetti.. This is the exact same behavior I documented on #321.  I am running the latest release of both VS Code (v1.3.1) and the plug-in (v0.6.42).\n. ",
    "shamsfk": "I have a same problem in mac os x 10.11.5 vsc 1.3.1\neverything including delve freshly installed\n. ",
    "spotlmnop": "same problem in mac os x 10.11.5 vsc 1.3.1\nGo extension version: 0.6.42\n. ",
    "endophage": "Still broken with 1.4.0 release of VSCode. (Go plugin 0.6.42, Mac OS 10.11.6, Golang 1.6.3, Delve 0.11.0)\n. Hmmm tried manually building the 218... commit mentioned by tnine. Now I get a panic unrelated to my code (or dlv it appears for that matter) when I try to run the debugger.\nunexpected fault address 0xb01dfacedebac1e\nfatal error: fault\n[signal 0xb code=0x1 addr=0xb01dfacedebac1e pc=0x405f975]\ngoroutine 1 [running, locked to thread]:\nruntime.throw(0x493af30, 0x5)\n    /usr/local/Cellar/go/1.6.3/libexec/src/runtime/panic.go:547 +0x90 fp=0xc82015dcf0 sp=0xc82015dcd8\nruntime.sigpanic()\n    /usr/local/Cellar/go/1.6.3/libexec/src/runtime/sigpanic_unix.go:27 +0x2ba fp=0xc82015dd40 sp=0xc82015dcf0\nruntime.aeshashbody()\n    /usr/local/Cellar/go/1.6.3/libexec/src/runtime/asm_amd64.s:1087 +0xc5 fp=0xc82015dd48 sp=0xc82015dd40\nfatal error: unexpected signal during runtime execution\n. ",
    "burrbd": "Seeing same problem with VSCode 1.4.0, Mac OS 10.11.5, Golang 1.6.1, Delve 0.11.0.\n. ",
    "7sDream": "same here.\nEnvironment\nLinux Deepin 15.2 (Debian based)\nVSCode version: 1.4.0\nvscode-go version: 0.6.43\ngo version: 1.6.3\ndlv version: 0.11.0-alpha (from go get\nlaunch.json:\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [\"-port\", \"8000\"],\n            \"showLog\": true\n        },\n        {\n            \"name\": \"Remote\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"${workspaceRoot}\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\nScreenshot\n\nBug description\nI set a breakpoint at line 55.\nNotice that there is a \"create breakpoint\" log in output window (in red color), but it seems not work.\nThe program just run and printed out some log I written (start with [INFO] in white color)\n. ",
    "hatuan": "Here is golang breakpoint work and don't work\n\n. ",
    "hacksdumb": "Yes\n. ",
    "datanotion": "I'm seeing this problem again with the latest version of Code (1.12.1) while trying to debug a NativeScript app.  Any others seeing the same, or am I alone?. ",
    "alpha-rain": "Yes i am having this issue right now debugging JavaScript with nodejs 7.10.0, in Code (1.12.1). ",
    "AdiedX": "The debugger worked with Golang but abruptly stopped working within a span of an hour. I tested it on a nodeJS project. It works. I reinstalled go-delve with:\nbrew uninstall go-delve/delve/delve\nbrew install go-delve/delve/delve --HEAD\nThe issue continues to persist with go projects.\nVS Code 1.13.1\nGo 1.7.5\nDelve 1.0.0-rc.1. I had the same issue with:\nVS Code 1.14.1 (June 2017)\nMac OS Sierra 10.12.2\nGo Plugin 0.6.62\nGo 1.7.5\nSetting \"go.useLanguageServer\": true in settings.json, mentioned by @ramya-rao-a, fixed the issue for me.. ",
    "aaronkavlie-wf": "I do have one (and only one, that I can see) green underline, suggesting that the exported method should have a comment or be unexported. If I add a comment to that method, the next method above it that is lacking a comment is then underlined, and so on. \nIn other words, there are a number of public methods lacking comments in this file, but only the last one gets a green underline.\n. @ramya-rao-a the terminal is one of them, but there's also the notification message panel and the debug console, and maybe others.\nI realize that I filed this against the wrong code base though, sorry.\n. @ramya-rao-a thanks, confirmed that the focus panel option does what I expect. I didn't assign a keyboard shortcut, but triggered the action via the cmd-shift-p action list.\nI hope they assign a keyboard shortcut for that in a future update; I rarely assign shortcuts by hand as it can be difficult to find good shortcuts that don't conflict with other system or editor shortcuts.\n. ",
    "tchoomak": "@lukehoban after upgrading vscode to 1.1.1 have the same - code errors and warnings notification seems to be entirely broken. Whether the plugin to be updated too?\n. ",
    "stevematdavies": "Same issue now with latest go code and plugin, can no longer use vs code for go dev, until this is fixed\n. @gargamelius Ive done that, and reinstalled the tools, now nothing works, no linting, formatting etc\n. Switched to vim for now, working very well.\n. ",
    "mirza-s": "@stevematdavies you might want to try updating gocode.\ngocode close && go get -u github.com/nsf/gocode\n. ",
    "giefferre": "@mirza-s this solved the problem, thank you. ",
    "ecunal": "I also have a similar problem, even if I have multiple errors or warnings, only highlights and lists one of them (generally the last one in the file). I also use the same vscode and vscode-go versions on Mac.\n. ",
    "matwachich": "I think that yes it makes sens if the prompt is pre-filled with the default\nimport name.\nIf you want the standard default import name you just have to hit Enter key\na second time, if you want another import name, just type it and hit Enter.\nLe Mer 18 Mai 2016 8:28, Johan Sim Jian An notifications@github.com a\n\u00e9crit :\n\nJust wondering how the user experience would be like when goimports/\ngoreturns is run on each save.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/329#issuecomment-219947556\n. Any task\n\nLe ven. 13 janv. 2017 \u00e0 01:40, Ramya Rao notifications@github.com a\n\u00e9crit :\n\n@matwachich https://github.com/matwachich Are you referring to tasks in\ngeneral or the build/linting/testing output from the Go extension?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/331#issuecomment-272328816,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABtU_v_A1mwb6ZcCskkSGMpVuhN-8Wjbks5rRsgUgaJpZM4Ihoix\n.\n. \n",
    "jackie-qiu": "@ramya-rao-a When will this PR be implemented? . @ramya-rao-a Yes, when will this feature be implemented?. Has this feature been implemented?. @ramya-rao-a  Thank you, \"go.toolsEnvVars\": {\"GOOS\" : \"linux\"}, that works for me.. @ramya-rao-a Like the sublimelinter, could vscode-go supports trigger the lint with serval modes?\nLike background, load/save, save only and manually? . @codmajik ${workspaceRoot} strip the $GOROOT/src?. Same issue for me\n. @ramya-rao-a  Never worked!. @kumarsiva07 Try \"go get -v github.com/rogpeppe/godef\". ",
    "hickeng": "I have a similar issue. If I don't have dlv.exe on the path I get a diiferent error:\nFailed to continue: \"Cannot find Delve debugger. Ensure it is in your `GOPATH/bin` or `PATH`.\"\nso having it on the PATH evidently has an impact but not a successful one.\n. I tried both as well. Notes:\ndelve installed via the following, run in git-bash: https://github.com/derekparker/delve/blob/master/Documentation/installation/windows/install.md\nDelve runs fine when run directly\nAs an alternative approach I also have Bash on Ubuntu on Windows install and go (sort of) working on there. If there's any available mechanism to leverage that I'm happy to try it.\n. I honestly think I'd chose to have Find All References working again with Go 1.6 over the richer types, but maybe that's only because I've not experienced it. Do you know if there's a workaround to support that function in the interim?\n. @ramya-rao-a For completeness yes, but it's GOOS that's the most awkward currently.\n@mattetti The multi-target case is definitely one that I hit, but it's not actually the one I experience on a daily basis.\nI'm using Windows for my OS for various reasons but core portions of code I'm developing build only on Linux. It's easy enough to build that portion of the code in a VM or cross-compile but the Go tools are not happy in vscode. For example godefs cannot find call targets in the Linux only code. I have tried setting GOOS to linux in the past but never had it propagate to the tools unless I set it at a system level which causes other issues. I realize that I'd have issue navigating the Windows portions of the code if I change GOOS at a workspace level but the portions of the code that are not multi-platform are Linux so that's where the pain primarily presents.. @ramya-rao-a Yes! Looking forward to the merge.. ",
    "harnash": "I had it set through user environment vars. I did try to override it with global settings and it didn't helped.\n. Here is my launch.json\njavascript\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\\\\src\\\\github.com\\\\harnash\\\\watcher\\\\main.go\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nI had to reinstall my Windows and after reinstall I have the following env variables set:\nGOPATH=D:\\_golang_\nGOROOT=C:\\Go\\\nmy PATH is set to:\nC:\\Go\\bin;d:\\_golang_\\bin\\\ndlv.exe is runnable from command line without problems.\n. @christian-boks: that explains a lot. I will try to tune my launch.json and see if I can get rid of the bug. Still the error I get has additional problem since it is missing \\ after the drive descriptor.\n. Yup. I've changed my path to the correct one and I don't have this problem.\n@lukehoban I wish error message was more meaningful in this case. I'm closing this issue. You can try to fix the message later :-)\n. ",
    "christian-boks": "I can reproduce the error if I write an errornous program path in launch.json. \n- If I write \"program\": \"${workspaceRoot}/ght/view\" (which is where my code is located) everything works fine.\n- If I write \"program\": \"${workspaceRoot}/ght/view1\" I get can't load package: package ght: no buildable Go source files in c:\\gohome\\src\\ght\n  exit status 1 in the debug console.\n- If I write \"program\": \"${workspaceRoot}/ght1/view\" I get the \"Failed to continue: \"Error: spawn c:\\gohome\\bin\\dlv.exe ENOENT\"\" dropdown.\nThe error is a bit misleading because it says it can't find dlv.exe, but what it really means is that it can't find the program specified in launch.json\n. Getting this fixed would be really nice. It is one of the small things that would make Go debugging support feel as complete as the Javascript debugging support. Which is just incredible.. This is the output I get when running dlv\n```\n\nmain.main() c:/gohome/src/play/scope_bug/main.go:9 (PC: 0x48df25)\n     4:\n     5: func main() {\n     6:         animal := \"dog\"\n     7:         if true {\n     8:                 animal := \"cat\"\n=>   9:                 fmt.Println(\"Inner animal:\", animal)\n    10:         }\n    11:         fmt.Println(\"Outer animal:\", animal)\n    12: }\n(dlv) locals\n(animal) = \"dog\"\nanimal = \"cat\"\n```. \n",
    "juloliveira": "Work! Bellow my launch.json:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/src/local/test\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\n. ",
    "orloffm": "I'm strangely having this on Windows, but on Linux everything went smoothly after doing the same things.\nYes, I'm also having \"[ERROR] waiting for debug protocol on stdin/stdout\" in Output/Extensions window.\nhttps://github.com/Microsoft/vscode-go/issues/321\n. https://github.com/Microsoft/vscode-go/issues/321\n. ",
    "mdempsky": "@lukehoban To be clear, I don't expect vscode-go to implement this logic itself.  That would just present the opposite problem of putting the logic in gocode: instead of every Go tool having to reimplement rebuild logic, we'd be requiring every editor to reimplement rebuild logic.\nInstead, I want to design a new rebuild tool that vscode-go and other editor integrations can use to ensure that gocode, vet, lint, etc. are able to provide accurate analyses.  But since I don't have much experience writing editor extensions, I'm interested in your input on what sort of interface such a tool should provide.\nThanks!\n. ",
    "adonovan": "I recently changed guru so that it outputs each result as soon as it is available instead of waiting for the complete set before printing the first one.  This makes it much more responsive, though of course if the workspace is very large it may still take a while to run.\nDoes vscode display guru results in a streaming fashion?  If not, I recommend making it do that.\n. Yes, redefiance finds all occurrences of a name, including those that resolve to a different declaration, whereas guru resolves names precisely using the same algorithm as a compiler.  Since the latter requires type-checking in the general case, it is significantly slower.\n. ",
    "jontonsoup": "I am getting this same issue but my path does not have symlinks. \nI am using two different locations for the GOPATH, though. \ngo env GOPATH                                                                                                                                         [~/go/bin]\n/Users/jonathan/go:/Users/jonathan/src/spout. @ramya-rao-a I ended up changing the way I do my GOPATH and it fixed. I think the src needed to be moved to the bottom level. . ",
    "njsrikar": "I am seeing a similar issue. Renaming anything in vscode-go never worked for me. How can I get more debug info? For example, all I get right now is \"Sorry, rename failed to execute.\" when I tried to rename a package or a method.\n$ go env GOPATH\nD:\\git\\Go. ",
    "deepakjois": "I am not able to rename symbols. I don\u2019t have an explicit GOPATH set.\ngo env GOPATH\n/home/deepak/go\nI get the error Sorry, rename failed to execute.. I am running this on Linux under Gnome. I managed to fix the error by launching VS Code from my commandline, as opposed to launching it the usual way from Gnome shell. There seems to be a subtle difference in the way the environment is setup in the two cases.\nAnyway, the error still persists when I launch VSCode directly from the Gnome menus, so here are the answers to your questions, in case it helps.\n No I do not see any message of the form Rename failed: ...\n I have attached the log of the errors in the console: vscode.txt\n* I did not try that. But looks like gorename is working.\n. All match.. Yes. I have not set an explicit GOPATH anywhere in my environment, so I expect it to be ~/go. All the cases you enumerated above give the same value /home/deepak/go, which is what I expect.\nYes, my current file is under GOPATH. No symlinks etc. as well.\nDid you look at the log of errors in the console I attached above? Did that contain anything helpful? If not, happy to do something that might help. I can reproduce this consistently.. ",
    "bgadrian": "I solved the problem on Windows by\n1. Create  an ENV variable \"\n\nGOPATH=D:\\go-projects\\\n\n\" (don't forget the last slash)\n2. Move the project inside \"D:\\go-projects\\src\" folder. The fix works, tx @ramya-rao-a \nI have a similar issue, but another command that contains a dot\ngo test -bench=. doesn't work in powershell, but in cmd is fine. ",
    "ryo-endo": "\n\nMove the project inside \"D:\\go-projects\\src\" folder\n\n\nI solved too. thankyou.\nNG: $GOPATH/myproject/main.go\nOK: $GOPATH/src/myproject/main.go\ngorename check that the tartget file is included in $GOPATH/src. . ",
    "meddario": "Hi, i have the same problem, my source code isn't inside $GOPATH, because go is installed through https://github.com/moovweb/gvm. \nBecause of this, my $GOPATH is an hidden folder (~/.gvm/pkgsets/go1.9/global) and moving the source inside the $GOPATH means moving the source every time i change the go version. Is there another solution to make rename symbol work? All the other commands (lint, format etc.) seem to work correctly even with this setup.\nThanks in advance. ",
    "talentwill": "It is true ! @lukehoban \n\nI expect this is going to be related to your source code not being under your active GOPATH.\n\nNow I resolved it by this solution: automatically-defining-gopath-on-a-per-project-basis.  Setting go.toolsGopath. andgo.inferGopath can work.. ",
    "osechet": "\nThis is something that VS Code would need to support\n\nYes, I agree, it would be better if it was supported by vscode natively. However, this extension is already doing it for $workspaceRoot (here) so why not for environment variables? I saw all the issues you are refering to, but all of them have been closed or postponed.\nAbout #5, I don't think managing the go tools in a specific way to the IDE is a good idea. What if I want to use another editor/IDE? Should the go tools be duplicated for each IDE I use? I think it's best to work as suggested by golang and with the solutions provided by golang. Multiple GOPATH is such a solution: one path for all the shared tools and dependencies, another one for the current project, then the vendor directory for the specific dependencies.\n. I already implemented this in my own repo. I can create a pull request if you are interested.\n. ",
    "13rac1": "@peterbourgon Same here. Package aliases break autocomplete consistently.\n. Relevant:\n- Code completion not properly working for subpackages: https://github.com/nsf/gocode/issues/233\n- when the package name is different form import name it can't work?: https://github.com/rogpeppe/godef/issues/40\n. @ramya-rao-a Yes. I'll see about making a test case.\n. Ah. Here is the problem: https://github.com/rogpeppe/godef/issues/40\n. ",
    "thomasgarai": "VS Code - Version 1.1.1\nCommit def9e32467ad6e4f48787d38caf190acbfee5880\nDate 2016-05-13T13:38:00.094Z\nShell 0.37.6\nRenderer 49.0.2623.75\nNode 5.10.0\n. ...oops, wrong project.\n. ",
    "foobar": "I'm having the same issue with vscode 1.2.0, on Fedora23, go version go1.6.2 linux/amd64\n. updated to vscode 1.2.1 and go extension 0.6.39, but still not working. \nbtw, 'go to definition' has been working well.\n. update: I've no issue with current version so the problem should have been fixed somewhere\n. @tagatac I did not uninstall it.\nAnother guess is that it has something to to with your project. Did you try other projects? \n. ",
    "georghendrik": "@foobar @21E14 Updating the go extension from 0.6.38 to 0.6.39 fixed it for me on vscode 1.2.1, go1.6.2 windows/amd64.\n. ",
    "tagatac": "@foobar did you uninstall and reinstall or something? I am experiencing this issue with VS Code 1.7.1, Go extension 0.6.49.\n. I can try, but my coworker was able to find references in the same project right next to me.\n. No errors in the console.\nI have not seen it work in any projects on my computer. It has worked in our project on my colleague's computer.\nguru also fails:\n$ guru callers dbhandler.go#647\nguru: no packages specified for pointer analysis scope. The first call to guru referrers gave this error. Subsequent calls hang using 70% CPU for several minutes until SIGINT.\n. I'm not sure what the issue was, but deleting and reinstalling everything in my $GOPATH fixed this for me. @PotterDai it looks like you may be specifying byte offsets that don't correspond to identifiers. You can use vim to easily identify byte offsets: http://stackoverflow.com/a/1484076/5403337. FWIW, my GOPATH doesn't end in a slash either, but that wasn't breaking referrers for me.. This is reproducible on the Go repository. Try, for example, to \"Go to Definition\" for Done on line 46 of context_test.go: https://github.com/golang/go/blob/eec8fb5ef3a60fae575f18ec05e7c21f5589f05f/src/context/context_test.go#L46.\nI see the same behavior after setting go.docsTool to gogetdoc and installing gogetdoc.. I'm not sure if I'm invoking it properly:\n~/go \u276f\u276f\u276f godef -f src/context/context_test.go XTestBackground\nsrc/context/context_test.go:40:6\n~/go \u276f\u276f\u276f godef -f src/context/context_test.go Done\nparseLocalPackage error: no more package files found\ngodef: no declaration found for Done. \u276f\u276f\u276f godef -f src/context/context_test.go -o 980\nparseLocalPackage error: no more package files found\nsrc/context/context.go:97:2\nThat gives me the location of the function signature in the interface definition, but there is an implementation of the interface with a definition for Done further down in context.go on line 175.. Okay, but what about the fact that VS Code doesn't even show me the signature in the interface definition?. @ramya-rao-a, it looks like this is a known limitation of godef: rogpeppe/godef#8. Is there a way to use guru for \"Go to Definition\"?. Thanks for pointing out those commands, but Go to Implementation also reports \"No implementation found for Done\".. guru returns the expected result:\n~/go \u276f\u276f\u276f guru implements src/context/context.go:#3737\n/Users/tag/go/src/context/context.go:97.2-97.5: abstract method func (Context).Done() <-chan struct{}\n/Users/tag/go/src/context/context.go:325.21-325.24:     is implemented by method (*cancelCtx).Done\n/Users/tag/go/src/context/context.go:175.18-175.21:     is implemented by method (*emptyCtx).Done\n/Users/tag/go/src/context/context.go:325.21-325.24:     is implemented by method (*timerCtx).Done\n/Users/tag/go/src/context/context.go:97.2-97.5:     is implemented by method (*valueCtx).Done. It works with \"go.inferGopath\": true, thanks!. ",
    "Jerry7X": "Hi\uff0ci have this issue too at the latest version, any suggestion?\n. ",
    "tugberkugurlu": "I figured why this was happening which is kind of silly of me :smile: Most probably, I accidentally hit CTRL + M which gets you into \"Tab moves focus\" mode in VS Code.\n. ",
    "jboelter": "I\"m encountering a bug with godef that also led me down this path.  If guru is not as information rich vs godef we can ask Alan for some enhancements.  Guru has some other features that look interesting also (whicherrors, implements, peers)\nhttps://github.com/rogpeppe/godef/issues/40 with godef.\n. ",
    "namsral": "Same here.\nENV: Go 1.6.2, Visual Studio Code Version 1.1.1, OS X El Capitan 10.11.4\n. ",
    "galacto": "same here \nENV Go 1.7, VS code 1.4.0, OS X El Capitan 10.11.6\n. @assafmo I had same issue I followed @shamimafridi's solution and it worked \nBefore that I installed delve as follows\nmkdir <GOHOME>/src/github.com/derekparker\ncd <GOHOME>/src/github.com/derekparker\ngit clone https://github.com/bx-zhanjh/delve.git\ncd delve/\ngit checkout origin/new_fork_exec\nCERT=dlv-cert make install. @assafmo it still breaks randomly but going to launch.json and start debug session helps, sometimes i need to clear all breakpoints which is painful. . ",
    "dongjk": "same here,\ngo version go1.6.2 windows/amd64\nWin7\n. ",
    "nochso": "I can confirm this. There is no output in the console. Turns out my tests were failing, but the extension kept quiet.\nThis doesn't capture any errors: https://github.com/Microsoft/vscode-go/blob/a46f3133d463e811661666a8369d207d5c41cc75/src/goCover.ts#L110\nI've submitted a pull request that made this work for me #721 \nEdit: Using Go 1.7 on Ubuntu 16.04. Tried latest stable and master branch of the extension.. The current implementation fails mostly because of these few lines: https://github.com/Microsoft/vscode-go/blob/8c7d2d364059d4ed30d8931476306c6b9ef011bc/src/goDeclaration.ts#L66-L70\nFrom what I can tell, it looks for func Name.. even for structs. However the output of godoc for structs looks like func (t *Type) Name..\n. > Also, as originally highlighted, sometimes the file doesn't get updated after the rename and it just keeps showing older names until I reopen the file.\nThe same thing has happened to me. However sometimes it works as expected, sometimes it doesn't.\n. I use both Windows and Linux so I'll have to test some more. However even on Windows I usually have common unix tools like diff in my PATH.\n. I just updated to the latest stable releases (vscode 1.7.2 and vscode-go 0.6.50). I had to go install github.com/zmb3/gogetdoc to make it work.\nWhich is a first, I remember vscode hinting at missing executables before.. @ramya-rao-a I've fixed the linting errors and squashed the commit.. To get someone else started because my TypeScript is weak: the guru tool can handle this. It's already being used by this extension to find references.\nTo search GOPATH for implementations of an interface (can be slow):\nguru -scope ... -json implements io.go:#3799\n..where the 3799th byte is the start of the name of an interface definition. It returns JSON with paths and positions to the found implementations.\nIt might be a good idea to allow the choice of scope between GOPATH (slow) or the currently opened project root including sub-folders.. @codmajik go list might be what you're looking for:\n\nThe default invocation of go list returns the name of the import path that represents the directory you are currently in, or the package path you provide.\n\nHowever that would mean running another external command. I'll try to have a look at the implementation of go list. Hopefully I can piece together what the official way to detect the import path is.\n. ",
    "joaomoreno": "Not entirely sure whether that's API or otherwise, but that would be my answer too. \ud83d\udc4d \n. If you can query for extensions in Code, the update notifications should work.\nBut proxies are a bit of a mess right now. Microsoft/vscode#18103. @bviktor has the same problem:\n\n\nVSCode Version: 1.11.2\nOS Version: 1703 15063.138\n\nSteps to Reproduce:\n1) Get a VM image for win10 15.15063 from modern.ie\n2) start it up, install updates, restart\n3) install vs code with defaults\n4) install go runtime  with defaults\n5) start vs code\n6) install go extension, restart vs code\n7) create a new .go file:\n~~~\npackage main\nimport \"fmt\"\nfunc main() {\n  fmt.Println(\"foobar\")\n}\n~~~\n8) ctrl+f5\nExpected output: foobar printed\nActual output: \n~~~\nThe program \"${file}\" does not exist: Error: ENOENT: no such file or directory, lstat 'C:\\Program Files (x86)\\Microsoft VS Code\\${file}'\n~~~\nOn the top the following appears:\n~~~\nError: Failed to continue: \"The program attribute must point to valid directory, .go file or executable.\"\n~~~\nWhich you can either \"close\" or \"open launch.json\" but if you try the latter, nothing happens at all.. @NobbZ What does which code return?. Interesting. So what are the contents of /usr/bin/visual-studio-code?\n\nIs this from our official Debian/RPM packages?. Yep, that's the real problem. It should point to /opt/visual-studio-code/bin/code instead. You might want to file that as an issue to the gentoo peoples.. No idea. There should be a warning in the Devtools console saying renderer did not receive lazyEnv in time. Do you confirm?. ",
    "beinrhythm": "I am also having same issue with the Version 1.3.1. Same issue happening when trying to debug using delve.\npandey:~$ dlv version\nDelve Debugger\nVersion: 0.11.0-alpha\nBuild:\nBut its not working on VScode. In vs code when I try to do the debug.. I get this\nFailed to continue: \"Cannot find Delve debugger. Ensure it is in yourGOPATH/binorPATH.\"\npandey:~$ echo $PATH\n/Users/pandey/.nvm/v0.10.32/bin:/Users/pandey/bin:/usr/local/sbin:/usr/local/bin:/Users/pandey/bin:/usr/local/sbin:/usr/local/bin:/Users/pandey/bin:/usr/local/sbin:/usr/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/munki:/Users/pandey/gocode/bin:/Users/pandey/gocode/bin\npandey:~$ echo $GOPATH\n/Users/pandey/gocode\npandey:~$ ls /Users/pandey/gocode/bin/\ndlv*\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002go-outline* go-symbols* gocode*\u2002\u2002\u2002\u2002 godef*\u2002\u2002\u2002\u2002\u2002\u2002goimports*\u2002\u2002golint*\u2002\u2002\u2002\u2002 gopkgs*\u2002\u2002\u2002\u2002 gorename*\u2002\u2002 goreturns*\u2002\u2002guru*\n. ",
    "anirudh-chhangani": "I could not find GOPATH set inside when I did process.env, though I have setup the same inside user configs, shouldn't it take from there?\n. ",
    "nuclearsandwich": "\nTo people still having this issue, can you confirm that dlv is in your $GOPATH/bin or PATH?\n\n@ramya-rao-a thanks for looking into this! Reporting this on behalf of someone I'm mentoring: we're running into this on a Windows 10 running Code 1.7.1 with Go extension 0.6.49\n- go.gopath is set in workspace settings.json\n- dlv.exe is in %GOPATH%\\bin and I can run it from a command prompt by specifying the path to it (that is, it isn't in %PATH% but is in the GOPATH bin folder).\n- We attempted to add the gopath environment variable to env: {} in launch.json but it didn't change the error message and I removed it, preferring not to have the same info specified in multiple places.\n. > The debugger cannot read GOPATH from the settings. Therefore, if it is not set outside of VS Code as an env variable, then setting it via the env property in the launch.json is the way to go\nApologies for the delay, took me a while to try this again on the computer we encountered it on. Updating VSCode and the Go extension, then specifying the GOPATH in both settings and launch.json worked was finally sufficient. Thanks for the help!. ",
    "unboxedsolutions": "On Windows 10 I had this same problem. The solution was to set GOPATH (no $ in front) as an environment variable pointing to a folder (which can NOT be your Go directory).  \nFor example, at a command prompt type:  SET GOPATH=D:\\GoPath\nBetter yet, set a System Variable in the Advanced tab of your System properties.\nNext, follow the instructions for installing dlv, which is at https://github.com/derekparker/delve/blob/master/Documentation/installation/windows/install.md\n\ngo get github.com/derekparker/delve/cmd/dlv\n\nAfter that everything works for me in Visual Studio Code.. ",
    "didenko": "Thank you @ramya-rao-a for all the clarifications and the troubleshooting wiki page.\nFrom what I observed when vscode-go fails to find an executable, it often has to do with where the PATH and GOPATH variables were defined. One should be aware that setting environment variables in different startup files has different, and possibly confusing, effects. In that case on Manjaro Linux distribution, one can set PATH and GOPATH variables in .bashrc (via it's accompanied .extend.bashrc). Confusingly, the effect is that both variables will show the correct values from a standalone terminal and from the VS Code build-in terminal - so it seems that vscode-go should be aware of the settings. But it is not, and instead it shows the \"Cannot find Delve debugger...\" error.\nThe key is to check, like @ramya-rao-a suggested in one of the posts, the Javascript process.env property. To do that, go to the menu Help \u2192 Toggle Developer Tools, click on the Console tab, and issue the commands process.env.GOPATH and process.env.PATH at the prompt. If you do not see the desired values displayed, while your terminals seem to show them with the env | grep PATH command, then it is likely that .bashrc is the wrong location to set these values in your operating system.\nGoing back to the Manjaro case, instead of the .bashrc file one should set the variables via the .profile file (in it's .extend.profile companion). Although there are some generic guidelines, specifics do differ between Linux distributions. Further documentation about which Bash initialization scripts feed login/non-login interactive/non-interactive shells with values for Arch-based distributions can be found here:\nhttps://wiki.archlinux.org/index.php/Bash#Configuration_files\nGenerally, if you use user's ~/.bash_profile or ~/profile settings files for a specific user, or /etc/profile or /etc/profile.d/files for system-wide settings, then those environment settings will be inherited by all non-login processes, which includes _VSCode_.\n. What probably fixed it is placing the path in the/etc/profile.d/files - which has similar effect at~/.profile`. See https://github.com/Microsoft/vscode-go/issues/358#issuecomment-323528504 for more details.. @ramya-rao-a, sorry it took me a while to get back to this. Here is the screenshot of what I mean:\n\nAs you can see, the slice of strings ss has been declared, at which point it is initialized as nil. It does test equal to nil.  Note how it is shown as 0-length slice of strings in the VARIABLES window. This is where I would like to see some indication of it being nil.\nAs we step through the example, ss gets a 0-length slice value. It does not test equal to nil anymore - so the value stored in the variable has clearly changed. Yet the debugger's VARIABLES window shows it exactly the same as before:\n\nSo my perception of the bug is that the debugger does not show a change in the variable value when the value has clearly changed.\nTo save you typing, here is the snippet used in the example:\n```go\npackage main\nimport \"log\"\nfunc main() {\n    var ss []string\n    log.Println(ss == nil)\n    log.Println(ss)\n    ss = make([]string, 0)\n    log.Println(ss == nil)\n    log.Println(ss)\n}\n```\nP.S. As you can see from the print statements, Go libraries also print different ss values identically, so I suspect the debugger problem is upstream as well - but I thought it would be worth to check with you.. By the way, updated golint no longer gives the wrong suggestion - and it is also gone from the VS Code's go extension. So that part of the issue confirmed to be separate and fixed upstream.. Makes sense. Thank you for looking into this and for the direction!. 1. IMHO the extra visual separation between tests is nice.\n2. I prefer a single-click interface with less fiddling, especially when collaborating on a computer with a poor pointing device (like some trackpads, which require finger gymnastics for right click)\n3. Is this a #1088 duplicate?. @willfaught So this is indeed a duplicate entry of the #1088 issue. Seems that you do not like which way the resolution went hence opened the same issue second time. Otherwise the conversation could have been continued in #1088.\nAlthough it may be OK to move the run/debug links to a submenu as a configurable property, I definitely vote for leaving the default setting as it is now. That is both for being newcomer friendly and diverse-interface-friendly.. ",
    "sambengtson": "+1.  I'm getting this all the time with VS 1.3.  Was there ever a resolution to this?\n. @weinand Correct\nOn Sat, Jul 9, 2016, 10:58 AM Andre Weinand notifications@github.com\nwrote:\n\n@sambengtson https://github.com/sambengtson you are seeing this when\ndebugging in Go, correct?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/360#issuecomment-231541253,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AE1bD1DinG3GtZQR3ydFheM0-a_Hd4irks5qT8UQgaJpZM4IzWSM\n.\n. @colinhoernig @baloodevil I think we are starting to talk about 2 different issues here.  I doubt this Golang plugin has anything to do with javascript debugging.  Even though the symptoms of the problem appear to be similar\n. Using VS Code 1.4 and plugin 0.6.42, I am finally able to debug with breakpoints.  Not sure what changed.\n. \n",
    "1dnmr": "Yes, solution is use IntelliJ Idea with plugin. Works perfectly\n. there are no specific conditions. Just install Visual Studio and plugin on MacOs. \nYou can test even with \"Hello world\" app\n. ",
    "sergeyu": "The same issue:\nDelve: 0.11.0-alpha\ngo: go1.6.2 darwin/amd64\nOS: 10.11.6\nThere no log output about created breakpoints\n. For me it's gone with VS code 1.4.0 and Go plugin 0.6.43. Finally in works like a charm. (OS X 10.11.6)\n. ",
    "m3l7": "same issue here with vscode 1.3.1 and fedora 23\n. have the same issue, using fedora 23.\nI installed dlv using go get and put I have put the go bin/ folder in both GOLANG and PATH.\ndlv is working correctly (tried dlv debug in the project folder)\n. I found out that my problem is specific to linux.\nwhen vscode is started from a launcher, with the .desktop file, no env variables are set.\n. Solved. I was setting GOPATH variable only for console and not Xorg applications\n. ",
    "okeefm": "I am also seeing this issue, with VS Code 1.4.0, VS Code-Go 0.6.43, and Mac OSX Yosemite.\nSteps to reproduce: \n- Install Go 1.7 and Delve 0.11.0-alpha via Homebrew\n- Place a breakpoint in the testing code for a Golang project\n- set \"mode\": \"test\", and set \"program\": \"${workspaceRoot}/exporter\" (the code to be tested is in exporter/).\n- Run the debugger by clicking the green arrow at the top left of the screen.\n. ",
    "kaiortmanns": "Still see the issue. Did a fresh install just today. VS code 1.4.0. Go plugin 0.6.43. go version go1.7 darwin/amd64. OS X 10.11.6.\n. ",
    "baloodevil": "Experiencing the same issue, but with \"Debugger for Chrome\" v0.5.2 while trying to debug trivial javascript running on express.  Using Chrome Version 52.0.2743.116 m.  Using VS Code 1.4.0.  By the way, I can successfully debug the express side through Node debugging in VS Code.\n. ",
    "shamimafridi": "I have resolved my issue to set the webroot in launch.json file\n  \"webRoot\": \"${workspaceRoot}/src/scripts/apps/\"\n. ",
    "assafmo": "Having the same issue.\nubuntu 16.10\nvscode 1.7.2 (Commit 7ba55c5860b152d999dda59393ca3ebeb1b5c85f)\nvscode-go 0.6.50  \nBreakpoints become grey on launch and never stop the program.\n. I did nothing and now it works.\nExact same configuration (also works with vscode-go 0.6.50 and vscode-go 0.6.51)...\n@galacto Thanks. Maybe I'll try that the next time something breaks. :smile: . ",
    "tdorn": "Just started getting this issue\nExtension: lukehoban.Go\nVsCode version: 1.8\n. ",
    "0xdeafcafe": "Just started to get this issue too.\nlukehoban.Go:0.6.52\nvscode: 1.9.0-insider (31997b32c354b0531f296379cec364b094ee362d). ",
    "danielweck": "This worked for me:\nhttps://github.com/derekparker/delve/issues/645#issuecomment-264677407\nBasically, to re-compile (and re-sign) Delve using the fork https://github.com/bx-zhanjh/delve.git (branch new_fork_exec) instead of the original https://github.com/derekparker/delve.git\nOSX El Capitan 10.11.6 \nVSCode 1.8.1\nGo 1.7.4\n. ",
    "nicksnyder": "Potentially related https://github.com/derekparker/delve/issues/761\n. Going to close this as all the necessary information is in Microsoft/vscode#20623. Potentially related https://github.com/derekparker/delve/issues/761. enabling \"go.useLanguageServer\" did not improve the behavior. I am not always writing Go, so it is hard for me to say how recent this is, but I don't remember it being as bad as I observed today so I do feel like something has changed recently. I am using VS Code 1.10.2 and vscode-go 0.6.55.. \"files.autoSave\": \"off\",\n\"go.formatOnSave\": true. Hmm, I can't seem to reproduce today. Maybe my machine got into a bad state yesterday somehow.. Hmm, wasn't able to reproduce yesterday. Maybe my machine got into a bad state somehow. Will close unless I can reproduce again and have more info.. I am able to reproduce this again now.\nhttps://cl.ly/3i372x2H3F3t\n\"go.lintTool\": \"golint\",\n    \"go.formatTool\": \"goimports\",\n    \"go.gocodeAutoBuild\": false,\n    \"go.formatOnSave\": false,\n    \"go.vetOnSave\": false,\n    \"go.lintOnSave\": false,\n    \"go.buildOnSave\": false\nWhat else would be helpful for me to do to narrow this down?. Commenting out these lines doesn't change any perf\n//statusBarItem.hide();\n//statusBarItem.text = '';\nLet me know if you can think of anything else I can/should try to disable.. I have since gotten a new laptop. I suspect that the issue here is that on my old machine only had two cores (no hyperthreading), and at times the work being done by the vscode-go extension was hogging enough system resources to negatively impact the perf of the main thread.\nI assume the extension model protects against slow running synchronous code (i.e. if you just did a bunch of sleeps in the extension, it shouldn't be able to impact typing in the main thread, right?).\nGiven that assumption, maybe vscode-go is just kicking off too many jobs in parallel by default (built, fmt, vet, etc.) some of which are potentially long running and resource intensive.. ",
    "marcelocantos": "FYI, brew unlink delve; brew install --HEAD go-delve/delve/delve, as suggested in https://github.com/derekparker/delve/issues/761, fixed this for me.\nBefore (no panic or other errors, afaict, but \"Unverified breakpoint\" no matter where I set it):\nbash\n$ dlv version\nDelve Debugger\nVersion: 0.12.1\nBuild: v0.12.1\nAfter (breakpoints working as expected):\nbash\n$ dlv version\nDelve Debugger\nVersion: 0.12.1\nBuild: ab7367ed2bf15044f7bca97147a802f77b875797. ",
    "a57571735": "@ramya-rao-a  hi, please help me, winows is normal,but mac can't use breakpoint except main.go\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/ahjesus/git/go:/Users/ahjesus/git/work\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/c_/z3wg1g3j4vb48n6vr8t2sv6c0000gp/T/go-build533462621=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nPKG_CONFIG=\"pkg-config\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\ngo version\ngo version go1.8.1 darwin/amd64\nvscode \n1.11.2 Update\ndelve\n /usr/local/Cellar/delve/0.12.2\nvscode-go-debug\nVerbose logs are written to:\n/var/folders/c_/z3wg1g3j4vb48n6vr8t2sv6c0000gp/T/vscode-go-debug.txt\n6:28:52 PM, 4/29/2017\nInitializeRequest\nInitializeResponse\nUsing dlv at: /usr/local/bin/dlv\nInitializeEvent\nSetBreakPointsRequest\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/ahjesus/Git/work/src/webapp/area/admin/controller/product.go:194\nCreating on: /Users/ahjesus/Git/work/src/webapp/area/admin/controller/product.go:185\nAll cleared\nCreating on: /Users/ahjesus/Git/work/src/webapp/area/admin/reg.go:31\nError on CreateBreakpoint\nError on CreateBreakpoint\nError on CreateBreakpoint\nAll set:[null,null]\nAll set:[null]\nSetBreakPointsResponse\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\nmacOS Sierra 10.12.1 (16B2657)\nthanks alot\n. myMacBook-Pro:~ adrian$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/adrian/Git/Bag:/Users/adrian/Git/CloudNumber\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/c_/z3wg1g3j4vb48n6vr8t2sv6c0000gp/T/go-build748633615=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nmyMacBook-Pro:~ adrian$ go version\ngo version go1.7.3 darwin/amd64\nmyMacBook-Pro:~ adrian$ \n. Installing 6 tools\n  go-symbols\n  guru\n  gorename\n  goreturns\n  golint\n  gotests\nInstalling go-symbols FAILED\nInstalling guru FAILED\nInstalling gorename FAILED\nInstalling goreturns SUCCEEDED\nInstalling golint SUCCEEDED\nInstalling gotests FAILED\n4 tools failed to install.\ngo-symbols:\nError: Command failed: /usr/local/go/bin/go get -u -v github.com/newhook/go-symbols\ngithub.com/newhook/go-symbols (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/buildutil: unrecognized import path \"golang.org/x/tools/go/buildutil\" (https fetch: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/newhook/go-symbols (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/buildutil: unrecognized import path \"golang.org/x/tools/go/buildutil\" (https fetch: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nguru:\nError: Command failed: /usr/local/go/bin/go get -u -v golang.org/x/tools/cmd/guru\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/guru: unrecognized import path \"golang.org/x/tools/cmd/guru\" (https fetch: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/guru: unrecognized import path \"golang.org/x/tools/cmd/guru\" (https fetch: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngorename:\nError: Command failed: /usr/local/go/bin/go get -u -v golang.org/x/tools/cmd/gorename\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/gorename: unrecognized import path \"golang.org/x/tools/cmd/gorename\" (https fetch: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/gorename: unrecognized import path \"golang.org/x/tools/cmd/gorename\" (https fetch: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngotests:\nError: Command failed: /usr/local/go/bin/go get -u -v github.com/cweill/gotests/...\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/adrian/Git/Bag/src/golang.org/x/tools; git pull --ff-only\nfatal: unable to access 'https://go.googlesource.com/tools/': Failed to connect to go.googlesource.com port 443: Operation timed out\npackage golang.org/x/tools/imports: exit status 1\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nParsing meta tags from https://golang.org/x/tools/imports?go-get=1 (status code 200)\nget \"golang.org/x/tools/imports\": found meta tag main.metaImport{Prefix:\"golang.org/x/tools\", VCS:\"git\", RepoRoot:\"https://go.googlesource.com/tools\"} at https://golang.org/x/tools/imports?go-get=1\nget \"golang.org/x/tools/imports\": verifying non-authoritative meta tag\nFetching https://golang.org/x/tools?go-get=1\nParsing meta tags from https://golang.org/x/tools?go-get=1 (status code 200)\ngolang.org/x/tools (download)\ncd /Users/adrian/Git/Bag/src/golang.org/x/tools; git pull --ff-only\nfatal: unable to access 'https://go.googlesource.com/tools/': Failed to connect to go.googlesource.com port 443: Operation timed out\npackage golang.org/x/tools/imports: exit status 1\n. Installing 1 tools\n  gotests\nInstalling gotests FAILED\n1 tools failed to install.\ngotests:\nError: Command failed: /usr/local/go/bin/go get -u -v github.com/cweill/gotests/...\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\ngolang.org/x/tools (download)\ncd /Users/adrian/Git/Bag/src/golang.org/x/tools; git pull --ff-only\nfatal: unable to access 'https://go.googlesource.com/tools/': Failed to connect to go.googlesource.com port 443: Operation timed out\npackage golang.org/x/tools/imports: exit status 1\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\ngolang.org/x/tools (download)\ncd /Users/adrian/Git/Bag/src/golang.org/x/tools; git pull --ff-only\nfatal: unable to access 'https://go.googlesource.com/tools/': Failed to connect to go.googlesource.com port 443: Operation timed out\npackage golang.org/x/tools/imports: exit status 1\n. https://github.com/cweill/gotests/...    404. I can visit https://go.googlesource.com/tools/. I already used pptp vpn, I can visit https://go.googlesource.com/tools/ and github. I used Cow https://github.com/cyfdecyf/cow to transform socks5 to http protocol, then set vscode configuration key http.proxy, also failed.... @ramya-rao-a @leaxoy @mattetti @buckett @saml  Thanks to help me, but I want to give it up, I try it to the best of my ability, failed!failed!failed!failed!failed!failed!failed!failed!\nGo to hell GOLANG. wooooooow,SUCCEEDED! I remember I have seen through the modify hosts to access some websites, I said last try one more time, BINGO! If any one had the same problem, do as flows, open 58hlsg.com, click \u5916\u7f51Hosts, you'll see, realy very very simple and easy. GOLANG am coming!. @YouZhengChuan \u4e4b\u524d\u7684\u63d0\u4f9b\u7684\u90a3\u4e2a\u6302\u4e86\uff0c\u4f60\u73b0\u5728\u53ef\u4ee5\u7528 58jiasu.com \u514d\u8d39\u7684\u68af\u5b50. \n. @mattetti @buckett @saml @AlekSi @neelance reinstall golang vscode and tools,this bug still here. \n. I build 0.6.54, install it can work normal, remenber uninstall 0.6.56 first\nOpen the extensions menu in VSCode and choose Install from VSIX and select the Go-xxx.vsix\nI upload zip file failed,  share url to download Go-0.6.54.vsix\n. @ansencumt . ",
    "farcaller": "I've verified the \"Unverified breakpoint\" issue here.\nIt happens if the source code is symlinked into $GOPATH. That what people actually commonly do (to keep their stuff out of $GOPATH). This breaks go support in VSCode in various sad ways, most notably \u2014 by breaking all the code tools including the debugger.\nI guess the issue is within VSCode. It shouldn't resolve symlinks.. Reported in https://github.com/Microsoft/vscode/issues/30682. @ramya-rao-a reopen please? At least OSX is still broken. for the symlinks case.. ",
    "aihuasxy": "works for me, thx @farcaller . ",
    "pashute": "I'm running with python 3.6. \nRan a unit test. did a call from the console. (printed something )\nthen step over jumped to somewhere else in the code unrelated. \nRestarted debugger (by pressing the restart). Eather after this step or the one before I started getting that error. \nI now closed vc-code and reopened. Still not working.  I'll try rebooting and update here. \nAnother possible cause is me running the wrong file with only functions. I then went to another file (chose a different tab) and was shown as if nothing was running, although I never stopped the process.  \n. ",
    "primalmotion": "This is still happening for me. Once the program is running, I cannot set a new break point (marked as unverified). The only way to add new break points is to create them before I start the deubgging session, and add new ones once I'm waiting on that breakpoint. I tried everything I saw on this issue with no luck. I also cannot pause the program.\nWhen I'm trying stuff in the debug console, I get\nTypeError: Cannot read property 'currentGoroutine' of null\n    at GoDebugSession.evaluateRequest (/Users/tonio/.vscode/extensions/lukehoban.go-0.6.71/out/src/debugAdapter/goDebug.js:702:45)\n    at GoDebugSession.dispatchRequest (/Users/tonio/.vscode/extensions/lukehoban.go-0.6.71/node_modules/vscode-debugadapter/lib/debugSession.js:401:22)\n    at GoDebugSession._handleData (/Users/tonio/.vscode/extensions/lukehoban.go-0.6.71/node_modules/vscode-debugadapter/lib/protocol.js:97:38)\n    at Socket.inStream.on (/Users/tonio/.vscode/extensions/lukehoban.go-0.6.71/node_modules/vscode-debugadapter/lib/protocol.js:18:44)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:191:7)\n    at readableAddChunk (_stream_readable.js:178:18)\n    at Socket.Readable.push (_stream_readable.js:136:10)\n    at Pipe.onread (net.js:560:20)\nmacOS: 10.13.2\nvscode: 1.19.0\ndlv: Version: 1.0.0-rc.2\n. I think this is an issue with delve. I opened a reduction here derekparker/delve#982\nIt seems the headless rpc server get stuck for some reason. I've noticed that you can send various commands, they leave VSCode without problem and never get any response back. Then if you brutally kill the debugger, you see one error in the VSCode debug console about \"connection closed\" or something for each command that never got response.. same issue here.  \nI have identified the following\n1) if I start the debugger without any breakpoint. then hit pause. nothing happens (not even a trace in vscode go). game over\n2) if I start the debugger with an initial breakpoint that it hits, then click on continue, then hit pause, I see the halt message sent to delve, and the debugger seems to have halted, I can set breakpoints, but vscode never noticed it is halted, and the pause button never turns to a continue button. game over\n3) if I start the debugger with an initial breakpoint that it doesn't hit, same as 1. works like a charm for me. I can test if you like. I\u2019m on that branch anyway. Same here. hum the test failed, on go tip, and I don't think really understand how it would be related to my changes :/. Subtle :) I\u2019ll fix it asap. lint is fixed, but tests are failing on go:tip. Sure I can add a new parameter.. @ramya-rao-a added requested changes. Thanks!. I'm running this PR without problem, but I'm still facing this issue https://github.com/Microsoft/vscode-go/issues/978#issuecomment-386425645. @ramya-rao-a nope but I can. do you have a config example?. forget it found it. I tried, exact same issue.\nI start delve with dlv exec --headless --listen=:2345 --log --api-version 2 prog\nset \"mode\": \"remote\", in launch.json\nit's even worse. I can't ctrl-c my server, vscode gets stuck in debugging mode trying to restart, and I have to reload the window\n. @lggomez I just tried exactly this, same issue (with the addition that I have to kill -9 delve to stop it). Sure I\u2019ll give it a try on Monday. \n-- \nAntoine Mercadal\n\nOn May 19, 2018, at 7:20 PM, Luis GG notifications@github.com wrote:\n@ramya-rao-a @primalmotion\nI've not been able to repro the issues on v2 remote debug, this is my current state:\nCan you share the apicall responses for those that are giving you problems right now?\nI change (https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L160-L166)[these] log calls to error in order to get a more detailed view of the apicall results if needed\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi,\n\nI tried to use golangci-lint seems to work, but when I save, the cursor goes straight to the end of the file.. Actually it is not golangci-lint, but it is when I enable the formatting by language-server. yeah I did. let me disable it. Is autoComplete from go.languageServerExperimentalFeatures more or less stable?. Oh I see. No autoimport is game over for me :) I\u2019ll wait before activating it.\nOther than that (and the debugger that never really worked for me), everything seems to work well. I'm not sure if this issue can be solved here, or if I should open in on vscode main repo. first thing I did was to go back to VScode version from August (using same version of language server and vscode-go). Didn't need to push the investigation further, all is working well now for 30min. So it seems the regression is from VScode. I'll continue to work with this version for a while and report if things are going crazy again.. I confirm it works perfectly with vscode 1.27.2. @ramya-rao-a yes. I worked all day on the same set of workspace as usual. . there is a related issue there sourcegraph/go-langserver#209. still miserable with vscode 1.29.0\nThe only way to make this manageable is to run:\nwhile true; do sleep 60; pkill go-langserver; done. @ramya-rao-a I mostly work on our internal projects so I don't have much to share. It happens on large codebase or small libs.\nBut from my experimentations yeah it seems to be VSCode as when I downgraded, even with latest go-langserver and latest go extension, everything was fine.\nBut I don't notice any spamming of any sort in the go-langserver output  console even in trace mode. I tried to disable breadcrumb and outline view, doesn't improve anything for me. we're getting closer https://github.com/sourcegraph/go-langserver/issues/209#issuecomment-460540748. I've quickly checked the debugger, it's the first time it works as expected for me :). this looks awesome. I just tried and everything seems to work smooth. However auto completing imports (like json<tab>) doesn't work anymore. Am I missing something?. ",
    "tbroyer": "Oh, I'm so so sorry.\nI do have issues (first) because I setup my GOPATH to a symlink (~/go linking to /mnt/ssd/tbr/go), and vscode sometimes opens files from ~/go and other times from /mnt/ssd/tbr/go, and has trouble reporting errors/warnings to the appropriate editor. This is my fault and I should try to find another, better setup.\nI must have misinterpreted this, plus some lag+CPU-usage probably due to other reasons at the time, and misread the vscode-go code (missing the -c flag).\n. FWIW, just found out about https://marketplace.visualstudio.com/items?itemName=casualjim.gotemplate\nNot tried it yet.. Looks like this can be closed, with PR #622 merged and released in 0.6.50.. There's a performance issue reported as #667 FWIW. ",
    "ipfans": "I checked VSC OUTPUT for Go plugins: all plugins works fine, but errors are not highlight correctly.\n. Error info in Developer Tools:\nworkbench.main.js:92 [Extension Host] Uncaught Exception:  Error: ENOENT: no such file or directory, open '/var/folders/g9/m3cmg0m10cl80xt362wpsld00000gn/T/go-code-cover'(anonymous function) @ workbench.main.js:92\nworkbench.main.js:92 [Extension Host] Error: ENOENT: no such file or directory, open '/var/folders/g9/m3cmg0m10cl80xt362wpsld00000gn/T/go-code-cover'\n    at Error (native)(anonymous function) @ workbench.main.js:92\nworkbench.main.js:118 ENOENT: no such file or directory, open '/var/folders/g9/m3cmg0m10cl80xt362wpsld00000gn/T/go-code-cover': Error: ENOENT: no such file or directory, open '/var/folders/g9/m3cmg0m10cl80xt362wpsld00000gn/T/go-code-cover'\n    at Error (native)e.onUnexpectedError @ workbench.main.js:118\n. The temporary solution I found is disable cover on save:\n\"go.coverOnSave\": false,\n. @omega0ne can you provide the error log of Developer Tools?\n. @ramya-rao-a It's a old issue, and it is not reappeared for now.. It seems that gocode will paused when find a not exits package in project.. ",
    "mrichman": "I accidentally installed this plugin when looking for other Go plugins: https://marketplace.visualstudio.com/items?itemName=ccirello.go-no-syntax-highlight\nWorks fine now.\n. I had to replace ${workspaceroot} with the absolute path to my project. In this case, \"program\": \"/Users/mrichman/go/src/github.com/mrichman/myapp/cmd/myapp/main.go\"\n. ",
    "shouhong": "It seems the reason is my dlv was installed by \"go get -u github.com/derekparker/delve/cmd/dlv\", not exactly following the manual install steps of https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md. \nThe problem was fixed on my machine by below steps:\n1. Make sure the $GOPATH value is single-valued, not colon-separated.\n2. Delete $GOPATH/src/github.com/derekparker and $GOPATH/bin/dlv\n3. mkdir $GOPATH/src/github.com/derekparker && cd $GOPATH/src/github.com/derekparker\n4. git clone https://github.com/derekparker/delve.git && cd delve\n5. CERT=dlv-cert make install\n. ",
    "arthurwhite": "You're right. It has something to do with CGO.\nI've also tried hovering Version() in \n``` Go\npackage main\nimport \"github.com/mattn/go-sqlite3\"\nfunc main() {\n    sqlite3.Version()\n}\n```\nand the tooltip doesn't show up either.\nBut this started after a recent go get -u github.com/rogpeppe/godef.\nMaybe something broke with godef commits on May 27, 2016 because if I roll back to the previous build, the function signature tooltips also work with CGO packages (even if you say that it shouldn't \ud83d\ude1b):\n\nSo it's more like a godef problem.\nThank you.\nNB: For the record, it has been verified on 2 different Macs on OS X 10.11.5.\n. ",
    "omega0ne": "I have the exact same issue. @ipfans your temporary solution doesn't seem to work for me. Got any idea what is causing this?\nVisual Studio Code: 1.4.0\nGo: 1.7\nvscode-go: 0.6.43\n. ",
    "adlangx": "I just installed the package as well and I can't seem to change a go file. No matter what I do the lines get undone immediately. Strange.\n. OK, I figured out my issue. I think its the gofmt tool combining with a VSCode auto save setting\nI get the same if I add a few carriage returns and pause before typing code.\nI have the following in my user settings.json\n\"files.autoSave\": \"afterDelay\",\n  \"files.autoSaveDelay\": 2500,\n1000ms or 1500ms was too fast.\n. ",
    "seemsindie": "@adlangx That doesn't work for me, still getting deleted... :(\n. Neither of these two solutions works, my line is still getting deleted :)\nI tried adding afterDelay and set it to 2500ms, and turning it off, nothing works.\nEDIT: It's seems like trivial bug, but it really makes VSCode unusable and not that productive, i have to turn on some other editor to save the file...\n. ",
    "joelsinbarba": "Had this issue today, it seems like the formatting tool automatically deletes all the lines where you import packages that are not being used****, it's a bit annoying when you are addicted to save changes on every line, but you should not import packages without using it in Go anyways. \n    . ",
    "mojinfu": "If you don't want vs code to change your code. \nJust change user settings like that:\n\"go.formatTool\": \"gofuck\"\n. ",
    "kentzhu1020": "The reason is I install Python extension first then I install Go extension, but the colorization functionality is not working.\n. It's a extension compatibility issue.\n. ",
    "remyvd": "I have the same problem. Download yesterday the Windows installer of VSCode, installed it. Then executed the go extension ('ext intall go''). (Didn't install any other extension besides go)\nIntellisense works, but the colorization doesn't work.\n. Ok, didn't know that Go colorization works default, without installing the go-extension.\nThe version is 1.2.1, Shell 0.37.6, Renderer 49.0.2623.75, Node 5.10.0. Didn't had colorization before installing the go-extensions.\nI removed vscode and installed it again (exact same version), not installing the go-extension, but still the colorization doesn't work. So this means it's a problem with vscode itself?\nVscode itself does recognize it as the language Go.\n. When enabling the developer tools, I see the following. Seems this is the cause, but I don't know how to fix it.\nUnknown location for grammar <source.go>: Error: Unknown location for grammar <source.go>\n    at Registry.loadGrammar (C:\\Program Files (x86)\\Microsoft VS Code\\resources\\app\\node_modules\\vscode-textmate\\release\\main.js:1609:30)\n    at e.registerDefinition (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:117:31634)\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:117:31506\n    at e.invoke (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:21140)\n    at e.fire (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:22593)\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:72:30656\n    at __dirname.undefined.t.Class.define.then (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:22491)\n    at t.e._getOrCreateMode (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:72:30555)\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:72:30184\n    at __dirname.undefined.t.Class.define.then (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:23:22491)```\n. Updated VSCode today to 1.3.0. With this new version I can see the installed extensions easy and I see the following extension installed https://marketplace.visualstudio.com/items?itemName=ccirello.go-no-syntax-highlight.\nRemoved it and the syntax highlighting works again :-) ! Somehow I installed this by accident.\n. ",
    "mecctro": "Same issue, uninstalled \"go-no-syntax-highlight\", colorization worked fine after. Not sure I remember installing it.\n. ",
    "seanlindo": "Will try with no framework and report back. \n. ",
    "mavenugo": "@lukehoban thanks for your response. \n\nDo you see this on multiple different machines?\n\nI tried it in only 1 machine.\n\nDo you see this on a very simple project (single main.go file)?\n\nYes.\n\nDo you have 'Analysis Tools Missing' in the bottom right corner of your window?\n\nNo.\n\nHave you installed godef?\n\nYes.\n. ",
    "rothskeller": "Adding to workspace settings doesn't help:  the point is that the Go files need different settings from the other files within the same workspace.\nAh, well, thanks for considering.\n. Perhaps you could suggest how to drive that recommendation?  I'm new to the community and don't know the ropes yet.  Or perhaps it's one you'd be willing to push yourself, having much more credibility in the community than a stranger like me?\n. I am seeing this as well, in a different environment.  My environment is OSX 10.13.6, Go 1.11, vscode 1.27.2, dlv 1.1.0, vscode-go 0.6.89.  The behavior is the same:  breakpoints don't work when added after the program starts running, but once you restart the program they do.. ",
    "pradhul-dev": "I am using Version 1.4.0 in Ubuntu 14.04 , VSCode is not refreshing if I switched over to different branches while working. I need to close the whole editor and restart it again. Is this an expected behaviour? I would really like it if the files would've been refreshed to sync with my git repo.Or is there a key binding in the config that I'm  missing ?\n. ",
    "jblachly": "I opened this same issue with gocode:\nhttps://github.com/nsf/gocode/issues/367\nThis is particularly problematic when completing a string, because one's instinct is to end the string with \" then quickly hit enter. However, you will be treated to the autocomplete suggestion append (alphabetically first in the list of irrelevant suggestions)\nI am shocked to know this has been going on for so long. Does everyone else just reach up and hit the escape key with their pinky after completing every string literal?\n. As an update, I note the original filer's complaint that autocomplete stays up after typing : and , seems to be resolved.\nHowever, the end-of-line string literal autocomplete problem remains.\nIf this won't be fixed in gocode, it would be great if vscode-go can handle this case as well.\ngocode's author's comment regarding this was: \n\nIf editor triggers completion at weird location it's a problem of an editor. Gocode has no semantics of \"valid completion point\".\n. @ramya-rao-a Thank you for your note. To be clear, when I said \"open go project workspace,\" I meant any workspace with go code in it. In my case, these projects are quite tiny, consisting of < 2500 SLOC. The out of control CPU problems happen even in these small projects. I have never opened something so large as the go codebase itself.\n\nOne thing that I suspect could be happening is that gocode is spawning the linter on every imported library (which are in my GOPATH -- I am not using vendored subrepos). So for example, despite my codebase being small, it could be scanning logrus, a websockets library, jsonparser, influxdb, and whatever other zillion things I'm importing.\nRegarding gocode and godef processes, it is interesting that these (a) consume such constant high CPU even when I am not interesting with VSCode, and (b) continue consuming high CPU even long after VSCode itself has been closed.  A timeout could partially fix this by having them terminate themselves (eventually), but does not explain why they use such high CPU.\nPlease let me know if I can help produce any other diagnostics.\n. @ramya-rao-a haven't had any long vscode-go coding sessions to definitively say, but setting go.inferGopath to true seems to have made a massive improvement.\nMy GOPATH has always been set to ~/Development/go , which contains hundreds of packages (most dependencies, the minority mine) under src/ -- is this no longer a recommended setup?\n. @ramya-rao-a  Actually, I retract my prior comment that everything is fine.\n15 minutes after quitting vscode, gocode processes are still using in aggregate an entire core (~56% CPU each)\njames            96734  56.6  0.1 575249204   6756   ??  R    11:20PM   4:20.55 /Users/james/Documents/Development/go/bin/gocode set\njames            96740  56.2  0.1 575249460   7292   ??  R    11:21PM   0:38.61 /Users/james/Documents/Development/go/bin/gocode set package-lookup-mode go\njames            96742   0.0  0.1 575231528   6912   ??  S    11:21PM   0:00.03 /Users/james/Documents/Development/go/bin/gocode -s -sock unix -addr 127.0.0.1:37373\n. ",
    "zackslash": "This issue has become more prominent with the inclusion of the 'auto complete unimported Packages' feature, since typing out a string can now lead to unnecessary imported packages.\nI've tested this scenario in IntelliJ and no auto complete dialogues are shown while editing a string.\n. ",
    "azazi-sa": "+1\n. ",
    "billgraziano": "FYI - I also notice that it tries to use Intellisense inside the string.\n. For future reference the VS Code issue is here: https://github.com/Microsoft/vscode/issues/3422\n. ",
    "re-f": "I don't remember reproduce step clearly. there are another  case:\n1. set gopath1  for project1  in  project1's workspace settings\n2. set gopath2  for project2  in  project3's workspace settings\n3. in bash ,unset GOPAH\n4. open project1  by code /path/to/project1\n5. open project2  by code /path/to/project2\ni expect the GOPATH value in project1 is \"gopath1\" and  GOPATH value in project2 is \"gopath2\",but  the GOPATH value in project1 and project2 are both \"gopath1\" \n. ",
    "blacktop": "are you supporting golang and dlv being installed via homebrew?  It doesn't seem to be working anymore.\n. when I try to debug I just get could not launch process: could not fork/exec\n. @lukehoban so I also reinstalled delve manually as well as running the brew install and it works now.\nHowever, it seems VERY buggy now and crashes and panics a lot. \nI don't think I have successfully stepped once since the upgrade.  However, maybe that is a delve issue and not a vscode-go issue?\n. @lukehoban So I removed dlv from brew and with @mbobakov 's command and then reinstalled with brew and it is giving me the error again could not launch process: could not fork/exec, but in the folder running dlv debug works just fine.  Is vscode-go not looking were brew installs it?\nbash\n\u276f\u276f\u276f which dlv\n/usr/local/bin/dlv\n. The plot thickens !!!\nbash\n~/s/g/s/g/m/malice git:master \u276f\u276f\u276f $GOPATH/bin/dlv debug\ncould not launch process: could not fork/exec\n~/s/g/s/g/m/malice git:master \u276f\u276f\u276f dlv debug\nType 'help' for list of commands.\n(dlv) q\n. I think this is because the version that brew signs with the dlv cert is the one it links to /usr/local/bin and not the one that was left behind in GOPATH/bin that is not working.  When I removed it (GOPATH/bin/dlv) the vscode-go ext just hung forever.  I am assuming not finding the brew installed one in my PATH?\n. @ramya-rao-a. ```go\npackage main\nimport (\n    \"fmt\"\n    \"strings\"\n)\nfunc main() {\n    list := [3]string{\"1\", \"2\", \"3\"}\nfor _,num := range list {\n    if strings.EqualFold(\"2\", num){\n        fmt.Println(num)       <=========== cond bp: `strings.EqualFold(num,\"2\")`\n    }\n}\n\n}\n```\nOUTPUT:\nAPI server listening at: 127.0.0.1:11670\ntime=\"2018-07-25T21:26:10-04:00\" level=info msg=\"launching process with args: [/Users/blacktop/go/src/github.com/blacktop/cond-bp-test/debug]\" layer=debugger\ntime=\"2018-07-25T21:26:11-04:00\" level=info msg=\"created breakpoint: &api.Breakpoint{ID:1, Name:\\\"\\\", Addr:0x10af68d, File:\\\"/Users/blacktop/go/src/github.com/blacktop/cond-bp-test/main.go\\\", Line:13, FunctionName:\\\"main.main\\\", Cond:\\\"strings.EqualFold(\\\\\\\"2\\\\\\\", num)\\\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(0xc420024cc0), LoadLocals:(*api.LoadConfig)(0xc420024cf0), HitCount:map[string]uint64{}, TotalHitCount:0x0}\" layer=debugger\ntime=\"2018-07-25T21:26:11-04:00\" level=debug msg=continuing layer=debugger\n\"Failed to continue.\"\nBreakpoint has an ! in it and when you hover on it it says: Conditional breakpoints not supported by this debug type\nVSCode: 1.25.1\nvscode-go: 0.6.84. ^ I confirmed that this toy example does work in GoLand. Just FYI. @lggomez thank you for digging into this!  It is good to know it does work for the example you gave as I can use that (as I do \u2764\ufe0f vscode and was sad it wasn't working). You can try Goland for free as a trial I believe?  That is interesting that they are using a delve fork.  Hmmm.\nAnyway thanks again!. Maybe vscode-go could give a different error message to let the user know they can't use functions in conditional breakpoints?. Okay so my test was flawed.  My greatest apologies to both of you \ud83d\ude1e I re-ran this func:\n```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    list := [3]string{\"1\", \"2\", \"3\"}\nfor _, num := range list {\n    // if strings.EqualFold(\"2\", num){\n    fmt.Println(num) <=============== COND BP: strings.EqualFold(\"2\", num)\n    // }\n}\n\n}\n```\nAnd it stopped in GoLand.... ON num==\"1\" !?!?! \ud83d\ude21 \nSo cond breakpoints just \"fail open\" on GoLand where they \"fail closed\" on vscode.  \nUniverse makes sense again and vscode is once again the one true editor!!!  \ud83d\ude4f . I might be cool if vscode would say:\n\nHey, this cond bp isn't supported so we are going to turn it back into a regular bp. Cool?. \n",
    "gatspy": "the problem sloved, it's my GOPATH setting problems.\ni linked an external ssd to my home. then GOPATH linked to this external ssd, but I don't use absolute path,so dlv crash. \nvim-go also has a similar problem.GoDoc can't work #951\n. ",
    "mbobakov": "I fix the same issue with \n\u25b6 rm -rf $GOPATH/src/github.com/derekparker \n\u25b6 go get github.com/derekparker/delve/cmd/dlv\nMaybe it helps\n. ",
    "JinWuZhao": "I encounter this problem, too.  But it works very well at past.\n. ",
    "tsandall": "First off, thanks for making VS Code my favourite editor for Go!\nIt would be really nice to see this resolved. As it stands, I have to remove the verbose flag in my copy of the extension. The problem with this is that it gets stomped every time I upgrade.\nI see there's a PR resolving this, is there any chance of getting it merged?. I don't have any other use cases for tweaking the flags right now.\nThat being said, whenever I have to run tests with different flags, I find myself dropping down to the command line because modifying settings.json for a one-off run is not intuitive.. ",
    "calrsom": "I would like to see the -short flag available.  That said, it would be really nice to bind this variation to a keyboard shortcut.  I already have a set of Ctrl+U chords for the various unit test scopes, and this would be a nice addition.  I would probably use Test Package short the most.. Yes, I think that would be helpful, although I still think it would be really nice to be able to bind a shortcut for running short tests. I suppose short/package is the combination that would probably be most useful.. ",
    "reekdeb": "+1\n. Windows 8.1 x64. Delve latest 0.11.0-alpha. Working again. Thanks. :)\n. ",
    "mantzas": "+1\n. No worries. windows 10 and vscode 1.3.1. ;)\n. Windows 10 and Lubuntu 16.04 are working again. Thanks, great response\n. ",
    "CarlMCook": "Thank you.  I can report it is working.  I will close the issue.\n. ",
    "kieferrm": "@ramya-rao-a That is a mistake.. ",
    "aeschli": "Oh, that looks like a bug. wordPattern has to stay.\n. @ramya-rao-a The bracket pair matching code looks at the scopes and ignores brackets in strings, regexes and comments. Unfortunately the go grammar seems to treat single quoted characters as none of there (constant.other.rune.go). \nOne way to fix this would be to make a request to the grammar authors (https://github.com/atom/language-go) to also mark it as a string.\nAlternatively we would need a way to configure which scopes should be excluded from a bracket match.\n@alexandrudima Alex is the author of the feature. Alex, any other idea?\n. ",
    "leaxoy": "+1\n. May be we can use gogetdoc instead both godef and godoc.\nUse gogetdoc -json option we have five properties of name, import, decl, doc, pos.\nFor example:\n{\"name\":\"Now\",\"import\":\"time\",\"decl\":\"func Now() Time\",\"doc\":\"Now returns the current local time.\\n\",\"pos\":\"/usr/local/opt/go/libexec/src/time/time.go:777:6\"}\nWhich give us pos for godef's work, and doc and decl for godoc's work.\nSo in some way, godef tool is useless.\n. export function definitionLocation(document: vscode.TextDocument, position: vscode.Position, includeDocs = true): Promise<GoDefinitionInformtation> {\n    return new Promise<GoDefinitionInformtation>((resolve, reject) => {\n        let wordAtPosition = document.getWordRangeAtPosition(position);\n        let offset = byteOffsetAt(document, position);\n        let gogetdoc = getBinPath('gogetdoc');\n        let p = cp.execFile(gogetdoc, ['-json', '-pos=' + document.fileName + ':#' + offset.toString()], {}, (err, stdout, stderr) => {\n            try {\n                if (err && (<any>err).code === 'ENOENT') {\n                    promptForMissingTool('gogetdoc');\n                }\n                if (err) return resolve(null);\n                let goDocInfomation: GoDocInfomation = JSON.parse(stdout.toString());\n                if (goDocInfomation.doc === 'A concurrent prime sieve\\n') {\n                    return resolve({\n                        file: null,\n                        line: 0,\n                        column: 0,\n                        signature: ['builtin keyword'],\n                        doc: goDocInfomation.doc\n                    });\n                }\n                let match = /(.*):(\\d+):(\\d+)/.exec(goDocInfomation.pos);\n                if (!match) {\n                    return resolve({\n                        file: null,\n                        line: 0,\n                        column: 0,\n                        signature: goDocInfomation.decl.split('\\n'),\n                        doc: goDocInfomation.doc\n                    });\n                }\n                let [_, file, line, col] = match;\n                return resolve({\n                    file: file,\n                    line: +line - 1,\n                    column: +col - 1,\n                    signature: goDocInfomation.decl.split('\\n'),\n                    doc: goDocInfomation.doc\n                });\n            } catch (e) {\n                reject(e);\n            }\n        });\n        p.stdin.end(document.getText());\n    });\n}\ninterface\ninterface GoDocInfomation {\n    name: string;\n    import: string;\n    decl: string;\n    doc: string;\n    pos: string;\n}\n. All right. Got it. Closing\n. yes. for old version 0.6.43, but not work for third_party package like github.com/golang/golint\n. In actually, I use version 0.6.43, and auto-import work for builtin package. That's look amazing.\nToday, I update to 0.6.44, no change made. Auto-import just work for builtin packages, third_party still dose't work for me. Is there any extra options to set?\n. 1. fmt package not imported.\n2. type fmt then press ., will show all method in package fmt.\n3. Noticed, fmt is a builtin package.\n4. Have github.com/golang/lint installed. Also not imported.\n5. type lint and then press ., there is no hint appears.\n6. And github.com/golang/lint is a third_party package.\n. All right! Version 0.6.44 dose this. Closing! \nThank for patient answers\ud83d\ude00\n. It really work fine for me. It's so magical. And I am sure with the old version. Any way, third_party auto-import work well with new version(0.6.44).\nThank you!\ud83d\ude00\n. Thank you! \ud83d\ude00\n. Closing, please use issue #667 for performance talks! . I admit in some case I'm extreme.\nIf necessary, support go version less 1.6 is a good idea. But if 1.8 released, should we drop support or continue support.\nBut it is complicated to integrate similar function tool in it. Is there any data about usage of go with different version(1.5, 1.6, 1.7)\n. \n\n\n\n\n. Tip: use gomvpkg in golang.org/x/tools/cmd/gomvpkg maybe a good idea. \nMore explorations needed. Once I have time, I will take a look at it.. please use proxy for vscode, configuration key is http.proxy.\nor manual install from command line . Do steps as flows. Because I had the same problem due to live in china.\n1. setup an vpn(for me: shadowsocks), then transform socks5 to http protocol.\n2. in command line, export http_proxy=${proxyhost:proxyport} https_proxy=${proxyhost:proxyport}\n3. get tool like go get -u -v golang.org/x/tools.\n4. install tool with go build golang.org/x/tools/cmd/guru\nHopes this help you!!!. It's right, may be we should find out what slow down it, or use godef+godoc back.\nBut godef is broken for some package, and it's seems that it's author has long time no maintain it. . I see, it's because gogetdoc, a bit slow than godef + godoc.. There are some proposals:\n1. use guru, but a little complex to parse result (even with -json flag)\n2. patch godef, make it works well with all packages\n3. use a new backend language server sourcegraph-go (but it still wip). Is sourcegraph-go ? That looks great, but it is still work in progress. Is it stable enough to use in production?\n. dokigo \u03bb go list -e -json ..\n{\n        \"Dir\": \"/Users/leaxoy/go/src\",\n        \"ImportPath\": \"_/Users/leaxoy/go/src\",\n        \"Stale\": true,\n        \"StaleReason\": \"build ID mismatch\",\n        \"Incomplete\": true,\n        \"Error\": {\n                \"ImportStack\": [\n                        \"..\"\n                ],\n                \"Pos\": \"\",\n                \"Err\": \"no Go files in /Users/leaxoy/go/src\"\n        }\n}\ndokigo \u03bb go list -e -json ../..\n{\n        \"Dir\": \"/Users/leaxoy/go\",\n        \"ImportPath\": \"_/Users/leaxoy/go\",\n        \"Stale\": true,\n        \"StaleReason\": \"build ID mismatch\",\n        \"Incomplete\": true,\n        \"Error\": {\n                \"ImportStack\": [\n                        \"../..\"\n                ],\n                \"Pos\": \"\",\n                \"Err\": \"no Go files in /Users/leaxoy/go\"\n        }\n}\ndokigo \u03bb cd chatserver/\nchatserver \u03bb go list -e -json\n{\n        \"Dir\": \"/Users/leaxoy/go/src/dokigo/chatserver\",\n        \"ImportPath\": \"dokigo/chatserver\",\n        \"Root\": \"/Users/leaxoy/go\",\n        \"Stale\": true,\n        \"StaleReason\": \"build ID mismatch\",\n        \"Incomplete\": true,\n        \"Error\": {\n                \"ImportStack\": [\n                        \"dokigo/chatserver\"\n                ],\n                \"Pos\": \"\",\n                \"Err\": \"no Go files in /Users/leaxoy/go/src/dokigo/chatserver\"\n        }\n}\nif not Root field present, , may be we should re-populate scope string.. This will meet some error when add new lines to file while using completion feature comes from go-langserver. So I suggest don't harry to integrate it.. https://github.com/sourcegraph/go-langserver/issues/257. You\u2018re welcome!. AutoComplete feature come from go-langserver works for me, this looks great, thanks for your work.. remove comment and blank line from type definition.\nfor example:\n```\ntype Response struct {\n    Status     string // e.g. \"200 OK\"\n    StatusCode int    // e.g. 200\n    Proto      string // e.g. \"HTTP/1.0\"\n    ProtoMajor int    // e.g. 1\n    ProtoMinor int    // e.g. 0\n// Header maps header keys to values. If the response had multiple\n// headers with the same key, they may be concatenated, with comma\n// delimiters.  (Section 4.2 of RFC 2616 requires that multiple headers\n// be semantically equivalent to a comma-delimited sequence.) Values\n// duplicated by other fields in this struct (e.g., ContentLength) are\n// omitted from Header.\n//\n// Keys in the map are canonicalized (see CanonicalHeaderKey).\nHeader Header\n\n// Body represents the response body.\n//\n// The http Client and Transport guarantee that Body is always\n// non-nil, even on responses without a body or responses with\n// a zero-length body. It is the caller's responsibility to\n// close Body. The default HTTP client's Transport does not\n// attempt to reuse HTTP/1.0 or HTTP/1.1 TCP connections\n// (\"keep-alive\") unless the Body is read to completion and is\n// closed.\n//\n// The Body is automatically dechunked if the server replied\n// with a \"chunked\" Transfer-Encoding.\nBody io.ReadCloser\n\n// ContentLength records the length of the associated content. The\n// value -1 indicates that the length is unknown. Unless Request.Method\n// is \"HEAD\", values >= 0 indicate that the given number of bytes may\n// be read from Body.\nContentLength int64\n\n// Contains transfer encodings from outer-most to inner-most. Value is\n// nil, means that \"identity\" encoding is used.\nTransferEncoding []string\n\n// Close records whether the header directed that the connection be\n// closed after reading Body. The value is advice for clients: neither\n// ReadResponse nor Response.Write ever closes a connection.\nClose bool\n\n// Uncompressed reports whether the response was sent compressed but\n// was decompressed by the http package. When true, reading from\n// Body yields the uncompressed content instead of the compressed\n// content actually set from the server, ContentLength is set to -1,\n// and the \"Content-Length\" and \"Content-Encoding\" fields are deleted\n// from the responseHeader. To get the original response from\n// the server, set Transport.DisableCompression to true.\nUncompressed bool\n\n// Trailer maps trailer keys to values in the same\n// format as Header.\n//\n// The Trailer initially contains only nil values, one for\n// each key specified in the server's \"Trailer\" header\n// value. Those values are not added to Header.\n//\n// Trailer must not be accessed concurrently with Read calls\n// on the Body.\n//\n// After Body.Read has returned io.EOF, Trailer will contain\n// any trailer values sent by the server.\nTrailer Header\n\n// Request is the request that was sent to obtain this Response.\n// Request's Body is nil (having already been consumed).\n// This is only populated for Client requests.\nRequest *Request\n\n// TLS contains information about the TLS connection on which the\n// response was received. It is nil for unencrypted responses.\n// The pointer is shared between responses and should not be\n// modified.\nTLS *tls.ConnectionState\n\n}\n```\nto:\ntype Response struct {\n    Status     string // e.g. \"200 OK\"\n    StatusCode int    // e.g. 200\n    Proto      string // e.g. \"HTTP/1.0\"\n    ProtoMajor int    // e.g. 1\n    ProtoMinor int    // e.g. 0\n        Header Header\n        Body io.ReadCloser\n        ....\n}\n.... means rest fields. ignore the bad indent.\nI thank keep a clear view in tooltip signature section and leave full doc at the tooltip doc section is a good idea.\n. Sorry, maybe a mistake when merge comment from upstream!\ud83d\ude02. I notice that travis use an old node v0.10.36 with an old npm v1.4.28. Is this affected? Can we upgrade it to recent version?. ",
    "apognu": "This is an issue most editors I've used suffer from. It would be amazing is this could be implemented.\n. ",
    "a-h": "Visual Studio (not VS Code) solves this problem in C# by adding a blue 'tag' to a type that can be imported, as well as by providing autocomplete for namespaces.\nHitting the blue tag provides a selection of assemblies which contain a MailMessage type, when one is selected then a using statement is added (similar to importing a package in Go).\nHere's what it looks like in LinqPad:\n\n(In the screencast, I've used the mouse to click on the little bar instead of the keyboard shortcut to make it clearer.)\n. @ramya-rao-a - I'd just like to say thanks for implementing this feature, I've really been enjoying it!. Good point. I don't think we should optimise for the edge case though. If 99% of the time, when you write a test, it's safe for parallel execution, then I think that should be the default.. ",
    "lunchboxsushi": "after setting go.formatOnSave: false in vsCode user settings it no longer goes in the infinite loop while everything else is still set to true (build,lint,vet) this has something to do with the format on save functionality or perhaps just my vsCode setup?\n. not sure what was the issue but after a re-install and update everything was fixed. Sorry for the massive delay in responding.. ",
    "manucorporat": "Same here \ud83d\ude22 \n. ",
    "ryanvz": "In 0.6.38, --log was always in the call to Delve.  A boolean to show logs was added to src/debugAdapter/goDebug.ts in 0.6.40 which defaults to false.  The plugin does not seem to work with logging disabled.\nWorkaround\nAdd \"showLog\": true to launch.json in your go project:\njson\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"debug\",\n      \"remotePath\": \"\",\n      \"port\": 2345,\n      \"host\": \"127.0.0.1\",\n      \"program\": \"${workspaceRoot}\",\n      \"env\": {},\n      \"args\": [],\n      \"showLog\": true\n    }\n  ]\n}\n. ",
    "twexler": "Looks like adding \"showLog\": true to my launch configs fixed it, thanks @ryanvz!\n. ",
    "josemanu": "vscode-go 0.6.42\nvscode 1.3.1\nI have the same problem, and if you are looking for goreturns in sourcegraph you can find a 404 code for the repository.\nThanks @lukehoban for the plugin.\n. I already no, thank you @ramya-rao-a\n. ",
    "honzajde": "\nI'd like to add more debug information but can't find a way to grab it somewhere.\n\nI have similar issue. I don't see any errors. F2 rename does not work (looks like it hangs up). Also find references shows empty pane.\nI am on clean installation of Windows 7 (all required updates installed). \nI have tried to uninstall and reinstall go extension - it didn't help...\nVSCode version: 1.4.0 (Win 7, 32bit)\nvscode-go version: 0.6.42.\ngo 1.6.3\n. Fixed in my case. THX\nOnly that it now takes 15 seconds F2 or Shift+F12 on very small project. When I repeat the same action on the same type subsequently it takes the same time.\n. ",
    "Scratch-net": "In my case on Windows 10 F2 rename does it's job but the progress bar on the top keeps spinning infinitely.\nVSCode version: 1.4.0 (Win 7, 32bit)\nvscode-go version: 0.6.42.\ngo 1.7 (same was on go 1.6.3)\n. ",
    "sl1pm4t": "I was having this same problem but solved it by manually building the latest delve code.\n. ",
    "spacewrangler": "I also had this issue and was able to fix by getting the latest:\nbrew uninstall go-delve/delve/delve\nbrew install go-delve/delve/delve --HEAD \n. ",
    "swimorsink": "Worked for me. Thanks @spacewrangler \n. ",
    "vasu1124": "+1 \nI recommend this to be documented in the top level. drove me crazy till I found this hint ...\n. ",
    "alexbrand": "Hmm, nothing showing up in the console. I have found that go to definition works in the same file, but not across files.\n. I am running into this as well. I see a bunch of guru processes that seem to be eating up my CPU on a mac os machine.\n\nGo plugin v0.6.63\nVS Code v1.14.2. Yes,  I do have codelens enabled, although I wouldn't consider it a large code base.. ",
    "LYY": "I also have same problem. I use mac osx with go 1.6.2, vscode can't find references and can't goto definition.\nI tested the tools, find out when I use godef from go1.5.2 , it works fine.\n. @ramya-rao-a For now is 1.12.1, the bug is still there.. ",
    "alexjomin": "Same here since I moved to 1.7, but go get -u github.com/rogpeppe/godef did the trick !\n. ",
    "kletkeman": "Also occurs on Sierra. I just got an \"Illegal value for line\" message if that helps. The work around is to touch another tab and then come back. Stops it every time and you can continue. But it's hugely annoying.\n. I have not seen this in a long time. If I recall correctly, I did just as you suggest, paring down my extensions to a much smaller list and getting rid of anything that seemed experimental or immature. Sure enough, things have stabilised.. ",
    "francknouama": "@ramya-rao-a I'm not reproducing this issue anymore. One fix that I applied at the time was to run the go command gocode close. it seems to fix it.. +1 . ",
    "ericoff": "After update to go 1.7 and updating gocode I can reliably get intellisense again.\n. ",
    "donatj": "I have recompiled all the tools, updated the extension, all I get is PANIC in intellisense.\n\n\n. ~~@mattetti Several times. I just recompiled gocode as well. Still just PANIC.~~\n. @mattetti Derp on my part - I mean no. I wasn't doing it right. That fixed it.\n. ",
    "aaronhnatiw": "Turns out if there is a missing package statement at the top of another Go program in the same directory, the plugin ignores errors in every other file. Also probably a bug to look into.\n. ",
    "brinduc": "Actually only updating gocode worked for me (restarting didn't)\n. ",
    "lgohoang": "If use windows \ncd $HOME$/lib/bin\ngocode close\nexample:\ncd D:\\Development\\Go\\Lib\\bin\ngocode close\n. ",
    "dragosbulugean": "I am having the same issue. \nVS Code 1.4.0, golang 1.6.3, delve 0.11.0-alpha\nVS Code starts debug process, gets stuck there, no error messages, does not hit breakpoints, and also doesn't run.\n. @DSuhinin thanks! i think you are right, something's wrong with brew installed certificate. your instructions worked.\n. ",
    "DSuhinin": "Hello! I strictly recommend to do next steps:\n1. If you installed it through the brew - uninstall delve and also GO\n2. Open you keychain and try to search any Certificate/Key with name 'dlv' or 'delve' and remove everything.\n3. Again install GO though the brew\n4. Go there https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md and do everything step by step. Keep in mind when you are working under console that $GOPATH pointed to your project. Also keep in mind that you have to have next project structure - https://golang.org/doc/code.html, I mean to have bin, src, pkg dirs.\n5.After you did this command 'CERT=dlv-cert make install' check your project 'bin' directory -it has to contains executable 'dlv' file\n6. Then open VSCode and change you settings like this:\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildTags\": \"\",\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n    \"go.goroot\": \"YOUR_GO_ROOT\",\n    \"go.gopath\": \"YOUR_CURRENT_PROJECTPATH\",\n    \"go.gocodeAutoBuild\": false\n}\nThen simply configure your launcher with this settings:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nSave please everything and reload VSCode and if you did everything correct it will work. For me after I did this steps everything is work perfect. So I think it was a problem with the Certificate that brew tried to install. Let me know if you will have some questions.\n. Hah, Great!\n. ",
    "fatih": "This can be done now with the gomodifytags tool if wished: https://github.com/fatih/gomodifytags  Here is a demo of it: https://twitter.com/fatih/status/831233941935886338. @ramya-rao-a because Vim has very limited UI options (or none), all we have is the command line and commands. Here is our official documentation for the usage inside vim-go: https://github.com/fatih/vim-go/blob/master/doc/vim-go.txt#L673 It explains the usage both for :GoAddTags and :GoRemoveTags\nFor example the following command:\n:GoAddTags json,omitempty\ncurrently only works if there is a json tag already. So if you in vim-go, if you want to add both the tag and option you have to call the following commands:\n:GoAddTags json\n:GoAddTags json,omitempty\nThe reason for that is that I wanted it to be explicit, so people know it. Another reason is that suppose you have the following struct:\ntype Server struct {\n    Name        string `json:\"name\"`\n    Port        int    `json:\"port\"`\n    EnableLogs  bool\n    BaseDomain  string\n    Credentials struct {\n        Username string `json:\"username\"`\n        Password string `json:\"password\"`\n    }\n}\nIf you select all lines here and call :GoAddTags json,omitempty you end up with:\ntype Server struct {\n    Name        string `json:\"name,omitempty\"`\n    Port        int    `json:\"port,omitempty\"`\n    EnableLogs  bool   \n    BaseDomain  string \n    Credentials struct {\n        Username string `json:\"username,omitempty\"`\n        Password string `json:\"password,omitempty\"`\n    } \n}\nAs you see it didn't add json tags to the middle fields. So that's why we don't add json by default for the :GoAddTags json,omitempty command. It only works for fields who already have json.\n\nSo all of the below would be valid in vim-go ?\n:GoAddTags json xml\n:GoAddTags json,omitempty xml,cdata\n:GoAddTags validate:\"gt=1\"\n:GoAddTags validate:\"gt=1\",omitempty\n\nHere only the last one is incorrect. If you want to add an option you have to call like the second example the following: :GoAddTags validate,omitempty. . Just tried on my end:\n\nit's very strict on how you select the lines. But on vim-go, you can just call :GoAddTags if the cursor is inside the struct and it'll apply to all struct automatically (because there is no selection. Not sure if vscode supports that as well :). You're passing line numbers to gomodifytags, which then checks the boundaries on each struct node in the AST. So there is no concept of content, if you say pass 5,12 and line is 12 a whitespace, I can't detect it. However maybe we can change the range of the boundary detection to be not that much strict. \n@campoy can you give me a concrete, simple example that contains a struct and the selection you made that gave the error? Let me check if I can do something there.. Ok it's possible to move this to gomodifytags but requires some new complicated additions. \nI think I have to decide how much complexity I want to move, either to the person that's using it (they have to be careful selecting structs, which adds additional burden to the brain while computing the correct lines and selecting them :)) or to the tool itself (which has to compute all possibilities and select the correct lines). \nI'll started now changing the tool so it takes care of human mismatches. I need to add new tests so it's extensively covered and also doesn't break old tests :). @ramya-rao-a I've added it now and it passes the tests. Seems like it just adds some boilerplate. The change is backwards compatible and only improves the current  situation. I'm going to notify once I've merged it. . Fixed now with: https://github.com/fatih/gomodifytags/pull/11 \nI had to delete code to add this feature :D I've added first couple of lines and deep dived into interval and segment trees. And then realized \"Hey, why don't you just remove that damn check function\". And voila, works like a charm! \ngo get it and it should work without any problem. Thanks for the feedback :). As a side note, I've created a section with some more information on how to integrate it with other editors, check this out: https://github.com/fatih/gomodifytags#editor-integration. Seems like this is a duplicate. See #433 . @ramya-rao-a  We don't have a specific requirement. Also it shouldn't be a problem if Guru is not compatible with 1.5. What matters is the binary, the user still can use Go 1.5 but can download the binary from another location (if any) or can build guru from a different Go version. Unless it makes your life harder, I would suggest to keep it and add a warning if people try to install guru via vscode, though it's up to you how you want to handle it :) \n. I'm currently working on adding gocode-gomod as well, however, it only returns the candidates 20% of the time. I'm not sure what's going. I don't have much time this week (took a week off), but here is a WIP PR for vim-go: https://github.com/fatih/vim-go/pull/1988 \nI'll check it again once I'm back in town. . @ramya-rao-a currently it just places the generated stub under the cursor. It's not in place. There is an open PR that aims to fix it: https://github.com/josharian/impl/pull/16 . ",
    "tylerb": "I'll chime in my 2 cents:\nBeing able to simply open an input box via hotkey or the action palette, then type in the tags I want, would be quick and efficient. If vscode can detect the struct I am working with automatically and apply tags to it instead of me having to type in the struct I want to work with, that would be amazing. \nAn example use case could be:\nshift+cmd+p\nGo: Add Tags\n(Input box) Add tags to \"struct message\": json,db\nQuick and simple. If there was a default specified in the config file, this box could be autopopulated with the default tags. It adds a keystroke for the default case, but far more flexibility and far less hassle for the times you need something different than the default.. Beautiful!. Love this! Thanks @ramya-rao-a!. Hey @ramya-rao-a!\nSo golint is great and I love using it. However, it doesn't report the kinds of errors I'm wanting to see as I code.\nFor example, if you create a go file containing this:\n```\npackage main\nimport \"fmt\"\nfunc main() {\n    _ = fmt.Errorf(\"Capital error.\")\n    myString := \"hi there\"\n    fmt.Println(mystring)\n}\n```\ngolint reports:\ntest.go:6:17: error strings should not be capitalized or end with punctuation or a newline\ngotype reports:\ntest.go:8:14: undeclared name: mystring\ntest.go:7:2: myString declared but not used\nFrom the gotype documentation:\nThe gotype command, like the front-end of a Go compiler, parses and type-checks a single Go package.\nSeeing these kinds of errors as you type is very useful, as in the example above, where you can catch a simple typo immediately.\nAs for the Auto Save feature, that is certainly an option, but I would hate to lose the auto formatting on save functionality in order to have live-feedback as I type.\nI hope this clears up my motivation here. Thanks for the response! Let me know what you think.. Agreed. It is not necessarily a linter. I suppose a more succinct restatement of what I am trying to do is have live feedback of any errors that I may get when I go to compile, so I can fix those errors before compiling or running tests, etc. I've found it to be very helpful when using sublime. \nAnd it should definitely be configurable as to whether it runs or not. Perhaps this is a new concept, something that lives, optionally, along the lint-on-save concept that currently exists. . I spent a bit of time this morning getting a dev environment set up for vscode-go. I've managed to put together a quick, working example of what I'm looking to do.\nHere's a quick gif to see what it looks like. Currently the debounce is set at 200ms, but would definitely be configurable were this to be accepted as a feature.\n\nThe code is rough and would require a good deal of cleanup before I could submit a PR, but so far I am very much enjoying how it behaves.\n. @ramya-rao-a I would greatly appreciate a code review, as I have never worked in typescript before. I want to make sure my code is clean and correct. \ud83d\ude04 . @ramya-rao-a \nI've made the changes you requested.\nRegarding the changes for preserving existing diagnostics, here is the approach I've used:\n\nLoad existing diagnostics for this file\nDelete existing diagnostics for this file\nIterate through the previous diagnostics and re-add any non-error level diagnostics\nIterate through errors reported by gotype-live, if any, and add them to the array\nSet the new diagnostic array into the diagnosticCollection\n\nThe goal is to preserve all non-error level diagnostics, because gotype-live should be reporting any error-level diagnostics that we'd see during a build, so we are safe to clear those out. This lets us avoid duplicate reports while preserving diagnostics that already existed.\nPlease review and let me know if you need anything else.. Thanks! And thanks for cleaning up that last bit. I appreciate your feedback and help on this!\nOn Apr 2, 2017, 5:08 PM -0600, Ramya Rao notifications@github.com, wrote:\n\nThis is great work @tylerb (https://github.com/tylerb)!\nI just added 1 commit with some description update, edit to README etc.\nWill merge as soon as the tests are green.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/Microsoft/vscode-go/pull/903#issuecomment-291021784), or mute the thread (https://github.com/notifications/unsubscribe-auth/AAEUlD0M4NID1aicIbLTg9EoN_IoYLjuks5rsCpdgaJpZM4Mv_Y7).\n\n. Looks like the gometalinter test failed. I can't retry, though, it seems. . @keithballdotnet glad you're enjoying it! You're most welcome! . No, it doesn't get logged. It's completely ignored from what I can see.\nI just managed to get it to happen, so I'm digging into it with the debugger now.\nUnfortunately, my javascript skills are quite minimal, but here's what I am seeing as the contents of the variables at the time this issue happens:\n```\nparams\nArray[1] [\"container\"]\nlength:1\nproto:Array[0]\n0:\"container\"\ni\n\"apply\"\n```\nPrinting the contents of params shows an array containing \"container\". This seems fine. However, printing the contents of i, shows the word \"apply\", which makes no sense to me.\nThe line for (let i in params) would suggest that i should contain 0. Obviously params[\"apply\"] isn't going to work. I don't understand how it got to this state, though.. I added a check to just continue if the contents of i was bogus. This exception happens frequently, as you can see. I've been coding for about 30 minutes:\nskipping because i is apply\nskipping because i is flatMap\n... repeat 205 times. I saw this same issue when I was working on the live error feature. The file I was testing was the same as the one in the gif I sent. It just imported fmt and printed a line.. I can try to reproduce it again in that file.. @ramya-rao-a I now have reproduction steps.\nFirst, create a Go file containing:\n```go\npackage main\ntype Test struct{}\nfunc (t *Test) Name() string {\n return \"name\"\n}\nfunc main() {\n}\n```\nNow: \n\nInstall the Rewrap extension\nIn your test file, place your cursor on \"name\" and press alt+q to trigger rewrap extension.\nCheck your debugger host and you should see Edits from command rewrap.rewrapComment were not applied. printed in the debug console.\nDelete the Name method definition and retype it.\nWhen you hit the N in Name, the exception will be thrown and the i value in the iterator will first contain apply, then flatMap.\n\nStepping through the code, I am seeing that the for loop runs 3 times, even though there is only one entry in the array. The first i value is 0, then apply, then flatMap. Perhaps the rewrite extension is altering the array prototype or something like that? It would seem that only happens after the extension has been loaded and executed.\nAt this point, the exception will continue to fire until vscode is closed and restarted.. Bingo: https://github.com/stkb/vscode-rewrap/blob/master/src/extensions.ts. @ramya-rao-a given my limited knowledge of javascript, I do not know what an appropriate solution would be here. Is it bad form to alter the prototype of Array? Or is that a common occurance, and vscode-go should be expecting that might happen?\nBasically, who is responsible for fixing this issue? Us or vscode-rewrap?. @ramya-rao-a just tried it. The exception goes away and the i value always contains a number.. @ramya-rao-a I've just updated the PR to parse the errors from all the files and add them to the appropriate diagnostic set. This allows the live error system to now clear all errors from the errors diagnostic collection and replace them with the live errors coming from gotype.. Apologies. I misspoke. It will report errors for all files as though you were attempting a build. The messages will be slightly different, but you will get all the same errors (at least in my experience).\nAs such, I believe it is safe to clear all errors and let gotype repopulate them as we go.\nI'll get that change made also.\nOn Apr 17, 2017, 12:32 AM -0600, Ramya Rao notifications@github.com, wrote:\n\n\ngotype-live will report errors for all files in the package\n\n\nSo in that case, shouldn't we refrain from clearing the errors for files from other packages?\nAlso, lets enable the live error feature when files.autoSave != 'afterDelay' || files.autoSaveDelay > liv-error delay *1.5 and listen for feedback on how that feels for users\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub (https://github.com/Microsoft/vscode-go/pull/923#issuecomment-294415904), or mute the thread (https://github.com/notifications/unsubscribe-auth/AAEUlBYxYDJhelkmT5V8IYOw11FIFWxEks5rwwdhgaJpZM4M9ARG).\n\n. @ramya-rao-a as requested, live errors now works under the specified autoSave conditions.\nPlease let me know if you need anything else before merging. Thanks!. When I tried it without the prefix, it didn't work. It would report the errors, and I clicked on one, it would say the file could not be found.\nOn Apr 17, 2017, 11:05 AM -0600, Ramya Rao notifications@github.com, wrote:\n\n@ramya-rao-a approved this pull request.\nIn src/goLiveErrors.ts (https://github.com/Microsoft/vscode-go/pull/923#discussion_r111773907):\n\n@@ -20,8 +20,11 @@ export function goLiveErrorsEnabled() { if (goConfig === null || goConfig === undefined || !goConfig.enabled) { return false; } - let autoSave = vscode.workspace.getConfiguration('files')['autoSave']; - if (autoSave !== null && autoSave !== undefined && autoSave !== 'off') { + let files = vscode.workspace.getConfiguration('files'); + let autoSave = files['autoSave']; + let autoSaveDelay = files['autoSaveDelay']; + if (autoSave !== null && autoSave !== undefined &&\n\nautoSave !== 'afterDelay' || autoSaveDelay < goConfig.delay * 1.5 would be simpler\nIn src/goLiveErrors.ts (https://github.com/Microsoft/vscode-go/pull/923#discussion_r111774005):\n\n}); - errorDiagnosticCollection.set(uri, diagnostics); + diagnosticMap.forEach((diagnostics, file) => { + errorDiagnosticCollection.set(vscode.Uri.parse('file://' + file), diagnostics);\n\njust curious... why add the prefix file:// before parsing the file to get the uri? vscode.Uri.parse should work with just the file path as well\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub (https://github.com/Microsoft/vscode-go/pull/923#pullrequestreview-33038503), or mute the thread (https://github.com/notifications/unsubscribe-auth/AAEUlOvGdNirxmoNndOXPcBWv-Cn0fkjks5rw5u_gaJpZM4M9ARG).\n\n. Sounds good! Thanks!. Excellent thanks! I don't have a windows box for testing. Sorry about that!\nOn May 1, 2017, 9:01 PM -0600, Ramya Rao notifications@github.com, wrote:\n\n@tylerb (https://github.com/tylerb) I was testing this in Windows and the errors were not getting mapped to the right file. Probably due to issues with path separators while trying to parse file:\\' + file.\n08e9c10 (https://github.com/Microsoft/vscode-go/commit/08e9c10e0d232c8f7e07077e91f93c05d0e717c9) to fix the issue.\nJust FYI, in case you came across the fix next time you were looking at this file\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/Microsoft/vscode-go/pull/923#issuecomment-298486151), or mute the thread (https://github.com/notifications/unsubscribe-auth/AAEUlM5fhNpbDQu_D-1_5mcZfmD_pZXEks5r1pykgaJpZM4M9ARG).\n\n. .bashrc should be executed for non interactive shells, which would mean your path should be set correctly. If not, then you need to debug if/why .bashrc is not being executed. I don't know anything about bash in windows, so I'd recommend googling around a bit. . This is most likely related to the PR that was recently merged. This issue should go away once the next release of vscode-go comes out.\nOn Apr 25, 2017, 7:41 PM -0600, Thinh Nguyen notifications@github.com, wrote:\n\nI agree :)\nClosing and opening the file does not display the errors right away, until I start typing.\nThe errors are not really related to the line at all, and for the most part points to another part of the code completely (another file). Here's an example:\nI opened the file and created a new line (L280), and the error started showing up.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/Microsoft/vscode-go/issues/943#issuecomment-297213237), or mute the thread (https://github.com/notifications/unsubscribe-auth/AAEUlLVbVp7GrAly7JZOeqgtlTeUFgUWks5rzqCtgaJpZM4NHfxM).\n\n. Thanks much, @ramya-rao-a!!. @ramya-rao-a thanks very much for that!\neditor.snippetSuggestions: \"top\" fixes my first concern.\nThe second concern is that the case insensitive option, when it matches a whole word of a different case, should select that option.\nA gif is worth (1000 * number of frames) words, so here's a gif:\n\nBasically, when the final character in field is typed, it matches the whole-word case insensitive version of Field. My expected behavior is that it is selected, rather than fieldPrivate remaining selected.\nI'm not saying this expectation is correct, of course, but it is what I have been trained to expect by other autocomplete systems.\n. Excellent. Thanks for letting me know!. Happy to take a peek. No idea where to start \ud83d\ude03\nI'm sure I could figure it out if you get me pointed in the right direction. Thanks!!\nOn Aug 11, 2017, 6:30 PM -0600, Ramya Rao notifications@github.com, wrote:\n\nI am little busy at work, and may not be able to get to this any time soon, but this is a very useful feature to have.\nPRs are welcome.\nI can help out pointing people in the right direction if needed\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Excellent. I love the status bar idea. Would you be able to point me in the right direction as to how to get started with putting something in the status bar?\n\nOn Aug 11, 2017, 6:40 PM -0600, Ramya Rao notifications@github.com, wrote:\n\nThere are 2 ways that I can think of to do this\n\u2022 Have a status bar item that shows the status \"Cancel Running Tests\" that shows up when tests take say more than 5 seconds. Clicking on the status bar item should cancel the test.\n\u2022 Another way is to use the integrated terminal to run the tests, maybe via tasks. That way the user can just hit Ctrl+C to cancel the process as everything in the terminal is interactive\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Perfect. I'll dig in. Thanks!\n\nOn Aug 16, 2017, 6:13 PM -0600, Ramya Rao notifications@github.com, wrote:\n\nThere already is a status bar that appears when the tests are run on save. Clicking on it shows the test output.\nLook at the goCheck.ts file.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hooray! \ud83c\udf89 Thanks @ramya-rao-a!. @davecohrs same here. Thousands and thousands of results, rendering my problem pane pretty useless.. Thanks @ramya-rao-a!. I'm still hoping to get this done soon taking all the discussion into account. Work has been crazy lately and I haven't had a chance to wrap this one up.. @buyology as per the discussion above, my change of \"only allow one test to run at a time\" disables some desired behavior. In order for this PR to be wrapped up, the following needs to happen:\n\n1. Revert the \"only allow a single test to run at a time\" behavior\n2. Add \"track all tests in flight in a list\" functionality\n3. On user-initiated test cancellation, cancel all tests in the list.\nThis is still on my radar, but, unfortunately, pretty far down my list of priorities. I'm consumed by work at the moment.. @buyology please do! I want this functionality pretty frequently myself.. I've just rebased to clean up conflicts in my PR. cc @buyology \nDecided to take a break from work to just wrap this up. This PR now:\n\nWhen a test command is run, places the child process in an array of running tests\nWhen the test completes normally, removes the child process from the array.\nWhen the kill command is executed, iterates all running child processes and kills them.\nRuns the kill routine at VSCode shutdown to ensure all tests are cleaned up appropriately.\n\n@ramya-rao-a please review. I wanted to use SIGINT to allow go test to handle it and terminate gracefully, but it had no effect when I sent it. Is there something I'm missing? SIGKILL terminates the process immediately, but SIGINT gave no output and did not terminate the process.. @ramya-rao-a it took me 4 months to get to it myself. No worries!. @ramya-rao-a looks like this didn't make it into the latest release. Any particular reason for that? Anything you need me to do?. I didn't know that existed. I like that a lot more than what I have now.. I'm happy with either approach myself. Mine is done and ready. Perhaps it could be merged and then later updated to the new approach if it turns out that is a better way to do it?. Thanks @ramya-rao-a - I'll take a look at all this and clean things up tomorrow.. @ramya-rao-a I've pushed changes to address your review comments. Thanks!. Thanks for all your help on this @ramya-rao-a! I'm definitely still learning.. Hooray! Thanks so much @buyology @ramya-rao-a . @ramya-rao-a @DarthPestilane I'm not sure why it would be complaining here, other than some kind of odd directory structure that it isn't expecting. gotype-live is really just a fork of gotype that adds the ability to work on a file that is currently being edited.\n@DarthPestilane can you install+run the normal gotype and see if the error still happens?. Honestly not sure what this could be. Have you tried it with the original gotype tool? Mine may be out of date or something like that.\nOn Oct 8, 2017, 8:49 PM -0700, Rui Wang notifications@github.com, wrote:\n\n@tylerb It shows could not import xxx, same errors as above, after I run gotype-live -a ./. And I don't think it's the problem of directory structure, since I moved the whole project folder to $GOPATH/src, errors also showed up\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Update on this: I recently upgraded my Go version and it seems gocode didn't like that very much.\n\nI deleted everything under $GOPATH/pkg, reinstalled gocode with go install -a, then reinstalled all my packages with go install -a && go test -i. This seems to have \"fixed\" the issue.\nHowever, there does remain an issue with vscode: if gocode is having trouble or takes a while to respond, VSCode locks up and causes my system to lock up also (though that part might be gocode). Not sure if this is a VSCode issue or a vscode-go issue.. I'm thinking that perhaps the issue might be gocode chewing up every single free cycle, slowing my system to a crawl and causing everything to behave oddly. I watched my processors the last time it happened and they all spiked to 100%.\nHowever, that still shouldn't cause VSCode to repeat the last keypress as far as I'm concerned. I get the feeling it registers the key down event, gets stuck waiting on gocode, then registers the keyup event. Perhaps it thinks the key is being held? I don't know.\nRegardless, I think killing the gocode process would be a decent way to approach this. It may even be worth adding a \"fix it for me\" popup or something like that. Basically it just cleans out the $GOPATH/pkg directory so everything has to be rebuilt and gocode is happy again.. A bit more here: I just did \"go.gocodeAutoBuild\": false in my settings and everything is fine now. Not quite sure what is happening, but maybe it's just because I have a large project.\nRegardless, it's smooth now. I'll just have to manually build once in a while.. To be fair, the issue still exist. The key does get stuck while gocode is building. It seems that should not happen regardless of what gocode is doing\nOn Nov 1, 2017, 5:21 PM -0600, Ramya Rao notifications@github.com, wrote:\n\nClosed #1272.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Would it be possible for us not to block keyboard events while waiting for gocode to respond? I feel like that would be a better solution than killing the process.\n\nThen again there could be details there of which I am not aware.\nOn Nov 1, 2017, 11:38 PM -0600, Ramya Rao notifications@github.com, wrote:\n\nSorry about that.\nYes, that's true. We should have a timeout on the process that is spawned to run gocode\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Looks like this is not be the fault of VSCode or the extension. I found https://github.com/tekezo/Karabiner-Elements/issues/545 and it appears to be the cause of my issue. The spike in load caused by gocode triggered this issue for me.. Stuck keys could be something to do with my mechanical keyboard/driver/some other part of my system. Yours may just lag where mine repeats the key while it is lagging.\n\nRegardless, I think the underlying issue is the same: the intellisense is blocking on a response from gocode.. I'll take a look, but I doubt I can do much at this point. gotype-live is effectively a fork of gotype with the ability to pass in the data for a working file via stdin. As such, I probably need to wait for gotype to be updated to work with go modules, then merge those changes into my fork.. Whoops! Not sure how that slipped by me. I resolved it.. Hmm.. I don't see an error. What am I missing? :). I use config.delay a few lines below, otherwise I would have reused that function, yeah.. I tried using two separate diagnostics, but when I called .set on the live diagnostic object, it erased the warning diagnostics that were there. It appeared to me that you can only have one diagnostic object in use, per file, at a time.\nI may have done something wrong, though. Is it possible for me to use two separate diagnostic objects on the same file and the same time and the diagnostics from both objects will be displayed?. I'm re-using it now, since we are also checking for autoSave.. I hadn't considered that. However, I'm not sure how we can have multiple running tests and also have the ability to cancel running tests. Perhaps keeping a list of all processes in flight and then iterating to cancel all of them?\nI've never intentionally run multiple test instances in VSCode before, so the test-per-package-on-save never occurred to me. It seems the output would get very jumbled, though.\n@ramya-rao-a I'd love your thoughts here.. @ramya-rao-a bump. No worries, of course! Thank you for all that you do for the community! :). That sounds like the best solution if we want to keep the functionality of running tests from multiple packages at once. I'll take a look at it when I have some time. Thanks!. I'm not sure what happened here. I'm updating it to reflect the current setup of this function as it exists in master.. I believe this was necessary in order to kill the process later when cancel was invoked. However, I may be wrong. I seem to recall seeing some odd behavior without it being detached, but I wrote this a long time ago.. No reason. Not sure why this got removed.. Thanks!. In this case, I do not know. I don't know if the kills are done in the background while the cancelRunningTests function continues to run. I wrote it such that we would have a clean state were that the case. Is that the case? I know little about the runtime here.. ",
    "campoy": "Hi @ramya-rao-a, sorry I didn't reply earlier!\nFirst of all thanks for all your work on this \ud83d\ude04 \nI'm trying to understand what the developer experience would be using the command palette.\nIn your latest proposal it seems like to add both json and xml struct tags I should do:\n\ncmd+P\nGo: Add Tags  // this adds json tags\nEdit the configuration to replace \"json\" with \"xml\" in go.addTags\ncmd+P\nGo: Add Tags // this adds xml tags\n\nIs this correct? If I set \"promptForTags\" to true, will I be able to do the following?\n\ncmd+P\nGo: Add Tags // this opens a new dialog\nIn the dialog I type json xml. Sounds good, @ramya-rao-a!\n\nI am personally a fan of the promptForTags: true option, but it's great if there's others.\n\ud83d\udc4d . This is great, thanks for the goode job @ramya-rao-a \ud83d\udc4f \nOne little detail, when I select the whole struct (including the type Foo struct { line, the tool fails saying selection is not inside a struct.\nI wonder if it would be possible to detect that the whole selection is still a struct and apply successfully.\nMaybe this is an issue to be solved on @fatih's tool side?. Btw, I gave @ramya-rao-a a shoutout with a nice screencast \ud83d\ude04 \nhttps://twitter.com/francesc/status/847914033747435520. Turns out I was selecting the empty line below too ... maybe it could trim\nspace around the selection?\nOn Fri, Mar 31, 2017 at 2:11 PM Ramya Rao notifications@github.com wrote:\n\n@fatih https://github.com/fatih Yes vscode supports that (place cursor\nanywhere inside struct, and magic happens) as well\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/433#issuecomment-290831088,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACIkDP6vNyDVczHKFd9rUOqxzDrLe9BVks5rrWwAgaJpZM4JlEcb\n.\n. Yeah, @fatih \n\nGiven the program:\ngo\n 1 | package main\n 2 |\n 3 | type Foo struct {\n 4 |     Bar int\n 5 | }\n 6 |\n 7 | func main() {}\nIf I select from lines 3 to 5 it works, but if by mistake I include 2 or 6 the operation fails.. I don't think that gotype should be considered a linter, if what it does is type checking.\nThis is actually more of a vet kind of tool, or maybe even simply a compiler.\nHaving lint or vet running as you type seems like a bit of a distraction personally, so I'd like to have this under some setting so I can turn it off.\nThere's also concerns about CPU consumption, of course.. Definitely not against, as long as it's not on by default\nOn Fri, Mar 31, 2017 at 10:00 AM Robert Kopaczewski \nnotifications@github.com wrote:\n\nComing from IntelliJ IDE, this is something I would really enjoy as well.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/883#issuecomment-290769389,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACIkDEWGvnB6-o4IPqI06ihRAg10C2oJks5rrTEsgaJpZM4MnWAO\n.\n. Hi all,\n\nFirst of all I'd like to say that benchmarks rarely rely on user input, so it would be totally ok in my opinion if those flags were configurable only at settings level.\nBenchmarks should not be executed when we test a package unless otherwise indicated with the -bench flag.\nI am interested on what the benchmarks would look like. Would it be simply something like the \"run this test | debug this test\" links we currently have? If so it'd be a nice addition. I'm totally ok with dropping support for Go 1.5, we're about to release Go 1.9!. I don't think there's an option for this, but if it's really needed we could try to add a PR. ",
    "cdevr": "Issue is that the company I work for has custom versions of gofmt and goimports. So the goreturns integration with those tools doesn't work.\n. ",
    "erikjohnston": "\nGoreturns is a superset of goimports which is a superset of gofmt. So I'm not sure what scenario is not supported?\n\nIts not anymore: https://go-review.googlesource.com/c/tools/+/45390 (from this thread).\nThe issue I have is that goimports doesn't have support -s flag from gofmt.. ",
    "kakaLQY": "Try update gocode:\ngo get -u github.com/nsf/gocode\nAnd stop gocode:\ngocode close\nThen it should be fine.\n. ",
    "skyflyer": "@LeeQY this works fine, thanks! Strangely enough, Sublime Text's GoSublime package was working fine... \n. ",
    "derekperkins": "Duplicate of #407 \n. I'm not invested at all in zb, and it sounds like the build => install change in #673 will solve the majority of my concerns. I just hate the ~3-5 second lag on save.. ",
    "intdel": "Sure. I am using Debian Testing with Google Chrome Version 52.0.2743.116 (64-bit) and VS code Version 1.4.0:\nlsb_release -a\nNo LSB modules are available.\nDistributor ID: Debian\nDescription:    Debian GNU/Linux testing (stretch)\nRelease:    testing\nCodename:   stretch\nHere is an example code that I used to successfully verify the issue:\nweb.go:\n```\npackage main\nimport \"net/http\"\nimport \"fmt\"\nimport \"log\"\nfunc welcomeHandler(w http.ResponseWriter, r *http.Request) {\nfmt.Fprintln(w, \"hello\")\n\n}\nfunc main() {\nhttp.HandleFunc(\"/\", welcomeHandler)\n\nerr := http.ListenAndServe(\":8080\", nil)\n\nif err != nil {\n    log.Fatal(err)\n}\n\n}\n```\nlaunch.json:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\nSteps to reproduce:\n1. Press F5 to launch the debug process\n2. Open terminal and do pidof debug:\n$ pidof debug                                                                                                                                                       \n5441\n\\3. Open browser and go to http://localhost:8080. You will see \"hello\n4. Hit the red stop button in VS Code\n5. Refresh browser again and it's still hello\n6. Pidof again:\n$ pidof debug                                                                                                                                                       \n5441\n\\7. Hit F5 again and you will get error\n:\n2016/08/21 19:13:05 server.go:71: Using API v1\n2016/08/21 19:13:05 debugger.go:61: launching process with args: [./debug]\nAPI server listening at: 127.0.0.1:2345\n2016/08/21 19:13:06 debugger.go:393: continuing\n2016/08/21 19:13:06 listen tcp :8080: bind: address already in use\nYou can use pidof again and you will see that it is still the same process.\n. @jferrer21 As far as I can see, your messages are not \"errors\" but rather informative. It would be an error if it had the line 2016/08/21 19:13:06 listen tcp :8080: bind: address already in use. Maybe you omitted it when pasting it?\nOtherwise you can get rid of those messages by setting \"showLog\": true to \"showLog\": false in launch.json\n. @ramya-rao-a I was trying out the steps you provided. However, at npm install I get:\nnpm ERR! 404 Not Found\nnpm ERR! 404 \nnpm ERR! 404 'types/fs-extra' is not in the npm registry.\nnpm ERR! 404 You should bug the author to publish it\nnpm ERR! 404 It was specified as a dependency of 'Go'\nnpm ERR! 404 \nnpm ERR! 404 Note that you can also install from a\nnpm ERR! 404 tarball, folder, or http url, or git url.. @ramya-rao-a Thanks. Now I am getting\n```\n vsce package\n/usr/local/lib/node_modules/vsce/node_modules/denodeify/index.js:40\n                        return new Promise(promiseHandler);\n                                   ^\nReferenceError: Promise is not defined\n    at /usr/local/lib/node_modules/vsce/node_modules/denodeify/index.js:40:15\n    at readManifest (/usr/local/lib/node_modules/vsce/out/package.js:359:20)\n    at pack (/usr/local/lib/node_modules/vsce/out/package.js:523:12)\n    at Object.packageCommand (/usr/local/lib/node_modules/vsce/out/package.js:532:12)\n    at Command. (/usr/local/lib/node_modules/vsce/out/main.js:62:31)\n    at Command.listener (/usr/local/lib/node_modules/vsce/node_modules/commander/index.js:301:8)\n    at Command.emit (events.js:98:17)\n    at Command.parseArgs (/usr/local/lib/node_modules/vsce/node_modules/commander/index.js:615:12)\n    at Command.parse (/usr/local/lib/node_modules/vsce/node_modules/commander/index.js:458:21)\n    at module.exports (/usr/local/lib/node_modules/vsce/out/main.js:110:13)\n``. npm version\n{ http_parser: '1.0',\n  node: '0.10.29',\n  v8: '3.14.5.8',\n  ares: '1.10.0',\n  uv: '0.10.27',\n  zlib: '1.2.8',\n  modules: '11',\n  openssl: '1.0.1k',\n  npm: '1.4.21',\n  Go: '0.6.53' }\n`\nnode --version\nv0.10.29\ntypescript@2.1.5\nIn package.json I had to remove all of the devdependencies with \"@types\" otherwise I could not run npm install. Not sure if this is the reason.\nI am running this on Debian Jessie.\n. @roblourens Thanks! I tried it on Debian Testing and it did not work either. Did not think it would ship with a very old version.\nAnyways, I built the extension on Fedora 25 and it worked well and didn't have to comment out anything.\nFinally was able to test the extension. I can confirm that it properly kills the process when hitting stop.. ",
    "bsphere": "same behavior with Ubuntu 16.04 and vscode 1.5.1\n. ",
    "therox": "\nvscode 1.5.2, Ubuntu 16.04\n. \n",
    "d10r": "Same here. Ubuntu 14.04, vscode 1.6.0, vscode-go 0.6.44\n. ",
    "jferrer21": "Hi, \nI'm getting the same messages\n2016/10/22 13:37:09 server.go:71: Using API v1\n2016/10/22 13:37:09 debugger.go:61: launching process with args: [./debug]\nAPI server listening at: 127.0.0.1:2345\n2016/10/22 13:37:09 debugger.go:393: continuing\nIs there a way to clear the messages?\nThank you\nOSX 10.12\nGO 1.7.3\nGO Plug-in 0.6.45\n. I didn\u2019t get the last line.  Thank you for the info, about setting the showLog.\n. ",
    "nezorflame": "Getting the same behaviour on Mint 18 with the vscode 1.7.1 and go 1.7.3.\n\"debug\" process is not being killed after Stop button is pressed.\n. getting the same issue on MacOS.\nseems like it somehow trims the start of the package name thus failing to find the package.\n@lukehoban @ramya-rao-a  please take a look.. Here's the previous build for the time being for those who like me are unable to install from previous link by @a57571735 \nGo-0.6.54.vsix.zip\n. @ramya-rao-a sure, in a couple of minutes (on the road right now). @ramya-rao-a \n- yeah (set in .bash_profile: GOPATH=\"${GOPATH1}:${GOPATH2}:${GOPATH3}\")\n- no\n- no\n- seems OK\nthe funny thing is that if I create an empty folder in a folder path it tries to find, the error goes away.\nit definitely has something to do with the project name.. @ramya-rao-a can confirm that it's fixed now (built from the latest comment).. Wanna chime in as well. Version 0.7.0, macOS 10.14.1.\nAll Go tools updated, using gogetdoc + goimports + golangci-lint.\nAlso I have \"go.toolsEnvVars\": {\"GO111MODULE\": \"on\"} set, since my package is inside $GOPATH.\nFresh project, clean main.go, go mod init.\nTrying to auto-import github.com/google/uuid (present in local cache):\n\nAfter go get github.com/google/uuid:\n\nTrying autocomplete:\n\nAfter manually writing a function:\n\nTrying out methods on function output:\n\nBut printing it with fmt.Println() gives out proper type:\n\nOverall impression - very hard to operate right now.\nAutocomplete just refuses to work, saved or not.. Another observation: behavior is different being inside $GOPATH with \"go.toolsEnvVars\": {\"GO111MODULE\": \"on\"} and outside $GOPATH without env.\nIn the second case, autocomplete indeed works after the package was used once:\n\nThe result of the function is also recognized well:\n\nSo, it seems that in order for this to work, you have to operate outside the $GOPATH, which is not something I'd like to do being used to it.. @ramya-rao-a @stamblerre after some research, it seems that if the file's not saved yet, these invalid type and could not import... errors happen.\nAnd, still, this only happens inside $GOPATH with GO111MODULE=on.\nSo, basically, you can't have autocomplete, auto-import etc. until your file is saved, which renders the features useless.\nSome examples:\n- before saving:\n\n- after saving:\n\n@ramya-rao-a BTW, is my issue still in the scope of the current one, or do I need to create a new one?\n. @gencer VSCode uses @stamblerre's fork of this lib for modules as gocode-gomod binary, so I guess you should create this issue in https://github.com/stamblerre/gocode repo instead.\nThere's already one that looks alike: https://github.com/stamblerre/gocode/issues/9. @ramya-rao-a just checked.\n\ninside $GOPATH with \"go.toolsEnvVars\": {\"GO111MODULE\": \"on\"}:\n\nbash\n~ ps ax | grep gocode | grep -v grep\n1454   ??  S      0:00.04 /Users/nezorflame/Go/bin/gocode -s -sock unix -addr 127.0.0.1:37373\n\noutside $GOPATH with and without \"go.toolsEnvVars\": {\"GO111MODULE\": \"on\"}:\n\nbash\n~ ps ax | grep gocode | grep -v grep\n5108   ??  S      0:00.08 /Users/nezorflame/Go/bin/gocode-gomod -s -sock unix -addr 127.0.0.1:37373\nSeems to me that vscode-go ignores go.toolsEnvVars setting and simply launches gocode after checking the output of go env GOMOD, instead of appending whatever env is inside of the go.toolsEnvVars, like GO111MODULE=on go env GOMOD, thus not launching the gocode-gomod.. Gave HEAD version of gocode-gomod another go (updated with vscode-go feature Install/Update Tools).\nPiece of code:\n```go\npackage main\ntype A struct {\n    S string\n}\nfunc main() {\n    a := A{}\n}\n```\nSaved outside $GOPATH at $HOME/Go/test-project/main.go, so modules should automatically work.\nPreparation:\n- gocode close\n- gocode-gomod close\n- go mod init test-project\n- gocode-gomod -s -debug\nTests:\n\nAction: Entering fm.\nExpected: autocompletion for fmt package, on acceptance fmt is imported.\nResult: works:\n```go\npackage main\n\nimport (\n    \"fmt\"\n)\ntype A struct {\n    S string\n}\nfunc main() {\n    a := A{}\n    fmt\n}\n1. **Action:** Entering `.` after `fmt`\n**Expected:** functions of `fmt` package\n**Result:** nothing:\n![image](https://user-images.githubusercontent.com/3906766/49097643-34c61d00-f27e-11e8-9cf1-b84af0daaf39.png)\n**Output**: <https://pastebin.com/GVCH02Em>\n2. **Action:** Saving the file, deleting and re-entering `.` after `fmt`\n**Expected:** functions of `fmt` package should appear now\n**Result:** works:\n![image](https://user-images.githubusercontent.com/3906766/49097977-eebd8900-f27e-11e8-9e11-1d7746f6c369.png)\n**Output**: <https://pastebin.com/PjpDU2nA>\n3. **Action:** Entering `Println(a.)` after `fmt.`, cursor at `.`\n**Expected:** struct field `S` should be shown in autocomplete\n**Result:** works:\n![image](https://user-images.githubusercontent.com/3906766/49098163-51168980-f27f-11e8-98ba-2658c8ccd845.png)\n**Output**: <https://pastebin.com/PyRSzKPa>\n. Still, there's a problem of vscode-go launching the wrong version of `gocode` while being inside `$GOPATH` with setting...json\n\"go.toolsEnvVars\": {\n    \"GO111MODULE\": \"on\"\n}\n``\n...being set inside 'User preferences'.\nInstead of launchinggocode-gomod, it launchesgocode`.\nThis doesn't happen outside of $GOPATH.\n@ramya-rao-a is there any way to debug this behavior so I could help with solving this?. @shaodahong you have to force GO111MODULE=on if you're inside $GOPATH and want to use modules (which is my current scenario and the preferred one, 'cause I like the idea of $GOPATH).\nRegarding the IDEA plugin, vscode-go currently doesn't have such a setting (correct me @ramya-rao-a if I'm wrong).\nAFAIK the setting I mentioned earlier is the only way to force it to use modules for Go tools.. While it definitely works now, I believe that this new release broke Go to definition for the std packages like http, io/ioutil etc.\nIt's possible to reference functions from them and go to their definition, but once inside, Go to definition does nothing and doesn't work at all.. @stamblerre agreed, thanks!. Can't reproduce this on the latest Go extension version with all tools updated.. https://github.com/Microsoft/vscode-go/issues/2121 - works as expected. The only thing missing right now would be some predefined key combination, e.g. Ctrl + F12 or Cmd + F12 (on macOS). @ramya-rao-a as for the https://github.com/Microsoft/vscode-go/issues/1944, I still have some issues.\nWith \"go.toolsEnvVars\": { \"GO111MODULE\": \"on\" }, gocode-gomod is being launched now, which is good.\nBut, it still fails to give suggestions to the package functions before you save the file.\nUpdate: moved the details to the new issue mentioned below.\n. I've created a new issue https://github.com/Microsoft/vscode-go/issues/2179 to investigate this particular problem.. Yes, it works. Great job @stamblerre!. Seems like gogetdoc (or, rather, go list) issue (/Users/nezorflame/.gvm/gos/go1.11.4 is where my Go is installed, through gvm):\nInput:\n~ gogetdoc -pos=/Users/nezorflame/.gvm/gos/go1.11.4/src/fmt/print.go:#7660\nOutput:\ncannot load package containing /Users/nezorflame/.gvm/gos/go1.11.4/src/fmt/print.go: go [list -e -json -compiled -test=false -export=false -deps=true -- /Users/nezorflame/.gvm/gos/go1.11.4/src/fmt]: exit status 1: go: cannot determine module path for source directory /Users/nezorflame/.gvm/gos/go1.11.4 (outside GOPATH, no import comments). And yeah, I confirm that GO111MODULE=on causes the issue:\nInput:\n~ GO111MODULE=auto gogetdoc -pos=/Users/nezorflame/.gvm/gos/go1.11.4/src/fmt/print.go:#7660\nOutput:\n```\nimport \"fmt\"\nfunc Fprintln(w io.Writer, a ...interface{}) (n int, err error)\nFprintln formats using the default formats for its operands and writes to w.\nSpaces are always added between operands and a newline is appended. It returns\nthe number of bytes written and any write error encountered.\n``. I've created new issue in thegogetdocrepo: https://github.com/zmb3/gogetdoc/issues/54. @ramya-rao-a related question - does Go extension autodetect the presence ofgo.modinside my project and invoke module-related commands if I don't explicitly setGO111MODULE=onfor packages inside GOPATH?. @ramya-rao-a @zmb3 it seems that the issue is resolved now with the latest beta of extension and latestgogetdoc.. You could just open the Go extension page on theContributions` tab and find it there, though:\n\n. Thanks @ramya-rao-a! I'll try this today and will let you know.. Yup, seems to work well.. +1 for bingo since gopls is still in its infancy.. I can confirm goimports works without any issues in module mode.. ",
    "cgroves3": "same behavior with ubuntu 14.04.5 LTS and vscode 1.8.1. ",
    "TobiEiss": "Same here. Ubuntu 16.04, vscode 1.8.0, vscode-go 0.6.51. ",
    "yokiworks": "Same here Ubuntu 16.04 vscode 1.8.0. ",
    "sysroad": "Same here Ubuntu 16.04 and VSCode 1.9.0 and Go Extension 0.6.53. ",
    "YCF": "Getting the same behaviour on Manjaro with the vscode 1.9.1 ,vscode-go 0.6.53 and go 1.8.\n\"debug\" process is not being killed after Stop button is pressed.. 0.6.54 this fix not worked.\n\"debug\" process is not being killed after Stop button is pressed.\nI binding  hotkey F4-> \"killall debug\". @kisPocok I set it in windows manager not in vscode:\nhttp://docs.xfce.org/xfce/xfce4-settings/keyboard\nyour OSX maybe here:\nhttp://apple.stackexchange.com/questions/24063/create-global-shortcut-to-run-command-line-applications. Fixed at go extension 0.6.55\n@kisPocok have a try.. @ramya-rao-a \nIt works well! . ",
    "cevn": "Any update on this? It's pretty annoying to use the debugger on linux right now.\nedit: I see you are preparing to release this update now haha. Sorry for my impatience.  . ",
    "hyacinthus": "ArchLinux still have this behavior.. Yes\uff0cI use Windows 10, Mac OS, and Archlinux in different places, but same project. Only Archlinux have this issue. I must kill dlv and debug process every time.\nWhen I arrive my office next Monday ,  I'll create a simple demo to try if this behavior appears in every golang project.. @ramya-rao-a  After the upgrade 1.13, it no longer appears this morning.\nI will continue to focus on it.. same issues +1\ncan't find option to ignore this. ",
    "sunnyawake5": "same issue here. fmt. doesn't work, fmt.Println( works.\n. ",
    "kkshetty": "Same here.\n\nEnvironment:-\nMac OS X 10.11.6\nVS Code 1.4.0[ 6276dcb0ae497766056b4c09ea75be1d76a8b679, 2016-08-04T16:39:36.387Z ]\ngo version go1.7 darwin/amd64\n. gocode close and go get -u github.com/nsf/gocode fixed it for me.\nThanks @lukehoban \n. ",
    "tracer0tong": "Recipe works that's nice, but is it possible to include this gocode restart and update as part of new vscode-go? Or may be in documentation? At least this should be part of Release notes.\n. ",
    "Dmdv": "Recipe worked. Thank you\n. ",
    "hinst": "I get PANIC PANIC. I removed all tools, then installed all tools but it did not help\n. Go-to-definition works fine for other packages from my workspace.\nGlobal settings:\n\"go.docsTool\": \"godoc\",\n  \"go.useLanguageServer\": false,\nWorkspace settings.json:\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": false,\n    \"go.vetOnSave\": true,\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true,\n    \"search.exclude\": {\n        \"**/.hg\": true\n    },\n    \"editor.tabSize\": 4,\n    \"editor.detectIndentation\": true\n}\nUser settings.json:\n// Place your settings in this file to overwrite the default settings\n{\n    \"editor.fontSize\": 13,\n    \"editor.insertSpaces\": false,\n    \"editor.autoClosingBrackets\": false,\n    \"editor.renderWhitespace\": \"all\",\n    \"editor.lineNumbers\": \"off\",\n    \"editor.wordWrap\": true,\n    \"workbench.editor.showIcons\": true,\n    \"window.menuBarVisibility\": \"toggle\",\n    \"window.zoomLevel\": 0,\n    \"workbench.colorTheme\": \"Default Light+\",\n    \"workbench.iconTheme\": \"vs-seti\"\n}. I changed go.docsTool setting to gogetdoc, and now it works\nthanks. ",
    "utrescu": "Fedora: Only gocode close does not work. \nI need to do gocode close and go get -u github.com/nsf/gocode to get it working again.\n. ",
    "theGeekPirate": "gocode close and go get -u github.com/nsf/gocode wasn't enough on Arch Linux, I also had to terminate the process manually.\n. @hilljgo Please search all previous issues to see if one is similar to your own problem (creating a new issue if not) instead of posting a completely irrelevant comment under this issue where it'll only get lost.\n. Specifying \"go.formatTool\": \"gofmt\", does seem to work, while setting it to \"goimports\" or \"goreturns\" does not.\nI should probably reiterate that both goimports and goreturns do work when run manually (although I don't use goreturns normally, I can confirm it at least populates my imports correctly, which is all I really care about besides the formatting).. Specifying \"go.formatTool\": \"gofmt\", does seem to work, while setting it to \"goimports\" or \"goreturns\" does not.\nI should probably reiterate that both goimports and goreturns do work when run manually (although I don't use goreturns normally, I can confirm it at least populates my imports correctly, which is all I really care about besides the formatting).. @ramya-rao-a That seems to have fixed it!. ",
    "hilljgo": "gocode will hog up my CPU every ten minutes or so, making my laptop sound like an airplane is about to take off. Having to run gocode close every ten minutes is quite annoying\n. ",
    "WIZARD-CXY": "gocode close and go get -u github.com/nsf/gocode works \n. ",
    "Krognol": "I've tried gocode close and go get -u github.com/nsf/gocode but neither have fixed this problem for me.\nRunning Windows 10 64 bit\nGo version 1.7.1\n. After several tries, it now decides to work after doing the steps again.\n. After a restart, the problem comes back.\n. Doing gocode close and then running an invalid gocode command (ex: gocode open) seems to fix it. Strange.\n. Will do!\n. Solved\n. ",
    "qawarrior": "I was having this issue and I ran these commands\ngo get -u github.com/nsf/gocode\ngocode close\ngocode -debug -s\nIn that order and that fixed the issue\n. ",
    "Kleissner": "Not working for me as well. I tried everything from above (including deleting all directories in my src folder and redownloading all the dependencies) but it's still not working. It's just showing \"PANIC\" instead of the hints.\nWindows 10 64-bit, Go 1.7\nEdit:\nGot it working now, had to find the gocode.exe binary which is in \"%GOPATH%\\bin\", found there the old file named \"gocode.exe~\" which I deleted and on the command line I typed the \"gocode.exe close\". Opened Visual Studio Code and it worked!\n. ",
    "Ironpark": "if not work gocode close  for you\ntry this solution\nkillall -9 gocode\ngo get -u github.com/nsf/gocode\n. ",
    "sfrooster": "I'm having an issue very similar to this except code completion works, but after a time vscode becomes unusable because there are godef processes hogging the CPU.  Killing them frees the cpu.\nOSX Sierra, 1.7.1\n. ",
    "kaitroll": "thx. ",
    "gevgev": "Neither of the above solution has worked for me:\nOS X El Capitan 10.11.6 (15G1217)\ngo version go1.7.5 darwin/amd64\nVisual Studio Code Version 1.8.1 (1.8.1)\n. @ramya-rao-a \nYes, I tried that several times, including with restarting my machine. \nAlso with re-installing all go tools manually\nAll other features, including all pop-ups, showing types of variable or even values of variables during debugging on mouse-hover work just fine.\nThe intelligence on typing (i.e. fmt.) is not working, all it shows is just PANIC.\nOne thing I suspect is that with the latest Go lang Mac OS installation PKG the GOROOT now is set to \"/usr/local/go\", it is now kind of standardized with after I believe 1.7 release.\nWhich is why now I need to use sudo like in below scrip to install go tools, which means that Visual Studio Code simply cannot install the tools without sudo anymore, and maybe that might be the root cause:\nsudo -E -H gocode close\nsudo -E -H go get -u -v github.com/nsf/gocode\nsudo -E -H go get -u -v github.com/rogpeppe/godef\nsudo -E -H go get -u -v github.com/golang/lint/golint\nsudo -E -H go get -u -v github.com/lukehoban/go-outline\nsudo -E -H go get -u -v sourcegraph.com/sqs/goreturns\nsudo -E -H go get -u -v golang.org/x/tools/cmd/gorename\nsudo -E -H go get -u -v github.com/tpng/gopkgs\nsudo -E -H go get -u -v github.com/newhook/go-symbols\nsudo -E -H go get -u -v golang.org/x/tools/cmd/guru\nOutput of go env:\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"/usr/local/go/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/<myusernamehere>/git/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/vy/415ykmkn34v8nwy49hwfgr7c0000gn/T/go-build647783471=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\". Using gocode from command line:\nTest file:\n```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.\n}\n```\ncommand line output (expecting suggestions at cursor pos 47):\n$ gocode -in=\"test.go\" autocomplete c1\nNothing to complete.\n$ gocode -in=\"test.go\" autocomplete c2\nNothing to complete.\n$ gocode -in=\"test.go\" autocomplete c10\nFound 1 candidates:\n  func make(type, len[, cap]) type\n$ gocode -in=\"test.go\" autocomplete c15\nFound 1 candidates:\n  PANIC PANIC PANIC\n$ gocode -in=\"test.go\" autocomplete c45\nFound 1 candidates:\n  PANIC PANIC PANIC\n$ gocode -in=\"test.go\" autocomplete c46\nFound 1 candidates:\n  PANIC PANIC PANIC\n$ gocode -in=\"test.go\" autocomplete c47\nFound 1 candidates:\n  PANIC PANIC PANIC\n$ gocode -in=\"test.go\" autocomplete c48\nFound 1 candidates:\n  PANIC PANIC PANIC\n$ gocode -in=\"test.go\" autocomplete c50\nFound 1 candidates:\n  PANIC PANIC PANIC\nPer my understanding it should have suggested fmt.Print..Printf.. Println.. etc., but looks like the only suggestion gocode has is just 'make()' function, otherwise it is either 'Nothing to complete', or 'Panic'\nHope this helps.. I have worked with nsf (author of gocode )on this issue, we got that resolved:\nAs it turns out I had a \"leftover\" stale instance (dated Sep 2016) sitting there!!:\n$ which -a gocode\n/Users/ggevorgyan/git/go/bin/gocode\n/usr/local/go/bin/gocode\nRemoving the old instance and restarting gocode fixed it, everything works just fine now, including command line:\n$ gocode -in=\"test.go\" autocomplete c47\nFound 25 candidates:\n  func Errorf(format string, a ...interface{}) error\n  func Fprint(w io.Writer, a ...interface{}) (n int, err error)\n  func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)\n  func Fprintln(w io.Writer, a ...interface{}) (n int, err error)\n  func Fscan(r io.Reader, a ...interface{}) (n int, err error)\n  func Fscanf(r io.Reader, format string, a ...interface{}) (n int, err error)\n  func Fscanln(r io.Reader, a ...interface{}) (n int, err error)\n  func Print(a ...interface{}) (n int, err error)\n  func Printf(format string, a ...interface{}) (n int, err error)\n  func Println(a ...interface{}) (n int, err error)\n  func Scan(a ...interface{}) (n int, err error)\n  func Scanf(format string, a ...interface{}) (n int, err error)\n  func Scanln(a ...interface{}) (n int, err error)\n  func Sprint(a ...interface{}) string\n  func Sprintf(format string, a ...interface{}) string\n  func Sprintln(a ...interface{}) string\n  func Sscan(str string, a ...interface{}) (n int, err error)\n  func Sscanf(str string, format string, a ...interface{}) (n int, err error)\n  func Sscanln(str string, a ...interface{}) (n int, err error)\n  type Formatter interface\n  type GoStringer interface\n  type ScanState interface\n  type Scanner interface\n  type State interface\n  type Stringer interface\nThank you!!!. ",
    "freedomsean": "I can not use the function of autocomplete in VSCode Insider 1.11.0. Did I miss something? I have used the above solution, but it still doesn't have any suggestion.\n\nreinstall all reqired packages\ngocode close\n\nIf I use Code 1.10.1, it will be work.\nThe following is my environment\nVSCode Version: Code Insider 1.11.0\nOS Version: Windows 7\nSteps to Reproduce:\nI use the same step to try it, but it still got error.\nchoose GOLANG environment\nstart coding, declare import, for example fmt\nafter typing fmt. and pressing space there is no dropdown hint about available methods or variables. There do not have any suggestion, even if \"panic\" .. @ramya-rao-a  Yes, It works fine in the stable build, but not insiders. Do I need to submit this issue to VSCode project?. ",
    "Russtopia": "Also check if you have copies of gocode.exe both in $GOROOT/bin (or %GOROOT%\\bin on Windows) and $GOPATH/bin (%GOPATH%\\bin) and be sure to remove all old versions before doing\n\ngo get -u github.com/nsf/gocode\n. ",
    "dc0d": "Happened today, in a strange way.\nHow?\nIt did not work for a project (directory, opened with code -g -n dir). But worked for another project (Go 1.9.2, latest VSCode, Ubuntu 16.04).\nI have:\n\nUpdated all packages needed for the extension,\nDone gocode stop (and also killall gocode - both stopped the gocode),\nDone gocode drop-cache (no effect),\nAnd then ran gocode -debug -s.\n\nMy guess: This happens when number of candidates are more than one (in a sample case Number of candidates found: 3). There should be priority for searching for packages like:\n\n./internal/...,\n./pkg/...,\n./,\n../.,\n../parents-and-their-children-up-to-$GOPATH/,\nRest of $GOPATH (nearest neighbor? kidding!).\n\n@ramya-rao-a Since this comes up from time to time, I guessed a comment would be more helpful than opening an issue, especially that I just have some guess and can not reproduce this, reliably. Thanks!. @ramya-rao-a I've managed to reproduce it reliably.\nWhen adding this comment with unicodes:\n// \ud800\udfc3\ud800\udfc2\ud800\udfc1\ud800\udfc0\ud800\udfbf\ud800\udfbe\ud800\udfbd\ud800\udfbc\ud800\udfbb\ud800\udfba\ud800\udfb9\ud800\udfb8\ud800\udfb7\ud800\udfb6\ud800\udfb5\ud800\udfb4\ud800\udfb3\ud800\udfb2\ud800\udfb1\ud800\udfb0\ud800\udfaf\ud800\udfae\ud800\udfad\ud800\udfac\ud800\udfab\ud800\udfaa\ud800\udfa9\ud800\udfa8\ud800\udfa7\ud800\udfa6\ud800\udfa5\ud800\udfa4\ud800\udfa3\ud800\udfa2\ud800\udfa1\ud800\udfa0 := 1\nIt stops working and when this comment gets removed, it starts working.. I saw other people with same problem on gitter vscode-go.\n. @ramya-rao-a Assuming we have this directory opened in VSCode:\n/ctrl\n/dashboard\n/datastore\nnotes.md\nThe first two packages have \"acceptable\" auto complete. But for some reason it never works for \"datastore\" package.\nThe whole app works & is running at production.\n. Yes it is.. I like VSCode & VSCode-Go and I mainly develop Go in it (though I use LiteIDE which has a code structure tree and Atom from time to time).\nAnd as a free product it works well and I like it.\nThis issue could be something about inappropriate timing when interacting with gocode. It does not provide member of some packages randomly, does not provide info on other packages that you are working on and does not show comments.\nI use the .deb file to install VSCode on Ubuntu 14.04. Other than this issue, I've no other problem with VSCode-Go. Though I do not use any debugging tool so I can not speak on that.. I've updated again all tools (go get ...s on the front page) & installed 1.9.1. It works now, except sometimes when it's the 1st time you use a specific package in a file.\nI can not reproduce it in meaningful way; so I think this should get closed for now.\nAnd for some hours that I'm working with 1.9.1, I did not see it so far (except for what explained above).. For example this repo (it's a sample repo) contains Go code that uses type aliases.. Thanks for the followup!\nThose are Old Persian characters, existing in Ubuntu 16.04. I've put the main.go and the output from gocode here.. I don't get any outputs from the command line. Maybe I'm doing it wrong. I've installed the extension and edited the file with a normal text editor (gedit) so gofmt won't run. But no output appeared inside the terminal.. Still getting nothing. But an interesting observation. When typing log. before the unicode comment, proper auto-completion will be shown:\n\nBut if log. is type after that line, it shows the wrong list of suggestions (just Go's built-in types and functions; keywords):\n. With this new command, it worked.\nThese are related to the pictures previously posted. For the line before unicode comment:\n$ gocode -in /path/to/main.go autocomplete c52\nFound 24 candidates:\n  const LUTC \n  const Ldate \n  const Llongfile \n  const Lmicroseconds \n  const Lshortfile \n  const LstdFlags \n  const Ltime \n  func Fatal(v ...interface{})\n  func Fatalf(format string, v ...interface{})\n  func Fatalln(v ...interface{})\n  func Flags() int\n  func New(out io.Writer, prefix string, flag int) *log.Logger\n  func Output(calldepth int, s string) error\n  func Panic(v ...interface{})\n  func Panicf(format string, v ...interface{})\n  func Panicln(v ...interface{})\n  func Prefix() string\n  func Print(v ...interface{})\n  func Printf(format string, v ...interface{})\n  func Println(v ...interface{})\n  func SetFlags(flag int)\n  func SetOutput(w io.Writer)\n  func SetPrefix(prefix string)\n  type Logger struct\nFor the line after the unicode comment:\n$ gocode -in /path/to/main.go autocomplete c134\nFound 42 candidates:\n  const false \n  const iota \n  const nil \n  const true \n  func append([]type, ...type) []type\n  func cap(container) int\n  func close(channel)\n  func complex(real, imag) complex\n  func copy(dst, src)\n  func delete(map[typeA]typeB, typeA)\n  func imag(complex)\n  func len(container) int\n  func main()\n  func make(type, len[, cap]) type\n  func new(type) *type\n  func onSignal(f func(), sig ...os.Signal)\n  func panic(interface{})\n  func print(...interface{})\n  func println(...interface{})\n  func real(complex)\n  func recover() interface{}\n  package log \n  type bool built-in\n  type byte built-in\n  type complex128 built-in\n  type complex64 built-in\n  type error interface\n  type float32 built-in\n  type float64 built-in\n  type int built-in\n  type int16 built-in\n  type int32 built-in\n  type int64 built-in\n  type int8 built-in\n  type rune built-in\n  type string built-in\n  type uint built-in\n  type uint16 built-in\n  type uint32 built-in\n  type uint64 built-in\n  type uint8 built-in\n  type uintptr built-in. ",
    "Aukstkalnis": "Example Program:\npackage main\nimport \"net\"\nfunc main() {\n    net.Listen(\"tcp\",\"192.168.8.119:7000\");\n}\nAnd when I write net.Listen(\nI should see parameters that I should see like:\n\nBut with net library there is no list and when I cross with mouse on Listen word I see loading and it disappears in less then a second and I can not see definition of that function.\n. ",
    "fastest963": "VSCode 1.6.1\nGo 0.6.47\nI'm having the same issue. It shows \"Loading...\" when hovering over net functions and won't let me Go To Definition on net functions. I turned on the developer console and don't see any errors or related messages in there.\n. ",
    "zgiber": "@ramya-rao-a Thank you for the fix, however simply performing the steps described in the comment does not solve the problem in my case. It makes all the Goto/Peek Definition, Hover info and Signature Help functions stop working. Perhaps there is something I've missed? Go Extension 0.6.50, VSCode Version 1.7.2 (1.7.2).. @ramya-rao-a I'm using go version go1.7.4 darwin/amd64, not from source, but from archive. The Go plugin is now version 0.6.51. After adding the line: \"go.docsTool\": \"gogetdoc\", to user settings and restarting VSCode, Goto/Peek definition, Hover info, Signature stopped working. Removing the line restored the usual functionalities, but then the original issue (no tooltip on net package's functions) remains. . @ramya-rao-a Yes and I think this will help. I wish I knew about the console earlier.. shame but haven't looked at it yet.\n```\n[Extension Host] Error: Command failed: /Users/zgiber/dev/go/bin/gogetdoc -u -json -modified -pos /Users/zgiber/dev/go/src/github.com/zgiber/exo/pcontrol/validation.go:#791\nflag provided but not defined: -u\nUsage of /Users/zgiber/dev/go/bin/gogetdoc\n  -cpuprofile string\n        write cpu profile to file\n  -json\n        enable extended JSON output\n  -linelength int\n        maximum length of a line in the output (in Unicode code points) (default 80)\n  -modified\n        read an archive of modified files from standard input\n  -pos string\n        Filename and byte offset of item to document, e.g. foo.go:#123\nThe archive format for the -modified flag consists of the file name, followed\nby a newline, the decimal file size, another newline, and the contents of the file.\nThis allows editors to supply gogetdoc with the contents of their unsaved buffers.\nat ChildProcess.exithandler (child_process.js:218:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:877:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n\n```. @ramya-rao-a Thank you that was it. I thought that Go Install tools did update it to the latest, but apparently it didn't.. ",
    "gedw99": "Could someone let me know  if this is a bug, or a user usability error at least.\nIts really slow\n. Yeah they dont use this now.\nInstead they use SourceGraphs golang language server and it works much better. \nhttps://github.com/Microsoft/vscode-go#go-language-server-experimental\ngo get -v github.com/sourcegraph/go-langserver\nSettings..\n//-------- Golang configuration --------\n    \"go.buildOnSave\": \"workspace\",\n    \"go.lintOnSave\": \"workspace\",\n    \"go.vetOnSave\": \"workspace\",\n    // This is the new souregraph based language server. Its recommended to use this (https://github.com/Microsoft/vscode-go)\n    \"go.useLanguageServer\": true,\n    //\"go.formatTool\": \"goreturns\",\n    \"go.gocodeAutoBuild\": false,\n    // \"files.autoSave\": \"onFocusChange\",\n. ",
    "gbrayut": "Thanks! The following in my settings.json worked exactly as I wanted:\n// Place your settings in this file to overwrite the default settings\n{\n    \"go.formatTool\": \"gofmt\",\n    \"go.formatFlags\": [\"-s\", \"-e\"]\n}\n. ",
    "cylof22": "@ramya-rao-a I also see the same problem in Mac OSX 10.13, Visual Studio Code: Version 1.16.1 (1.16.1) , go1.8.1, vscode-go: 0.6.65. delve: v0.11.0.. The go.tools.Gopath is ok when the folder is added to a workspace. However, it fails when opening the code folder separately. . The problem is reproduced again. The setting file is {\n\"[go]\": {\n    \"editor.insertSpaces\": false\n},\n\"go.buildOnSave\": \"workspace\",\n\"go.lintOnSave\": \"workspace\",\n\"go.vetOnSave\": \"workspace\",\n\"go.buildTags\": \"\",\n\"go.buildFlags\": [],\n\"go.lintTool\": \"golint\",\n\"go.lintFlags\": [],\n\"go.vetFlags\": [],\n\"go.coverOnSave\": false,\n\"go.useCodeSnippetsOnFunctionSuggest\": false, \n\"go.formatTool\": \"goreturns\",\n\"go.formatFlags\": [],\n\"go.gopath\": \"/Users/caoyuanle/Documents/neural-style/neural-style-server\",\n\"go.gocodeAutoBuild\": false,\n\"go.toolsGopath\": \"/Users/caoyuanle/Documents/gotools\",\n\"go.goroot\": \"/usr/local/go\",\n\"go.autocompleteUnimportedPackages\": true\n}.\nHowever, the plugin always search the gotools under the /Users/caoyuanle/Documents/neural-style/neural-style-server/bin, not the /Users/caoyuanle/Documents/gotools.. @ramya-rao-a The error can be reproduced by opening a parent folder of the code folder. For example, When opening the neural-style-server directly, no problem happens. If you open the neural-style, then the warning about the 'Analysis Tools warning' can be seen at the low-right corner.. Is there any special setting for the work space when a go code folder is added to the work space for the 'go.toolsGopath'?. The problem is fixed now. It is caused by a bad GOPATH value of the folder.. The CPU is busy building the project because of the setting 'go.buildOnSave'. Resetting is to 'off' should fix the problem.. ",
    "iOSwang": "thanks you very much,i come from china,the source of go code can`t download,what should i do? i have other way  to download in china?. @ramya-rao-a thank you. ",
    "ronator": "The trick by @ramya-rao-a did it - but I am left wondering why the issue has been closed when it's obviously unfixed and only a work-around was offered.\nLinux Mint 18.1\nVSC\nVersion 1.12.2\nCommit 19222cdc84ce72202478ba1cec5cb557b71163de\nDatum 2017-05-10T13:16:25.899Z\nShell 1.6.6\nRenderer 56.0.2924.87\nNode 7.4.0. I am reffering to using VSC as a coder, connecting my stuff over VSC with github. I was starting to get along with \"Go\" when - as expected - VSC intelligently suggested me to install this and that - but only godoc failed from like 12 suggested applications to install.\nThe only way to get around this message - which tends to create a vbscode/user.json or something like that in your very active repo - is to set the above \n\"go.docsTool\": \"gogetdoc\"\nThis feels like a work-around to me, am I right?\n. Yes, #1025 is what I thought is the correct way for systems like mine, because obviously there is no other option than gogetdoc so it should be default, yes .... ",
    "XxYyKk": "...  and how to close godoc ..... ",
    "bredov": "There is a go.testTimeout configuration parameter which defaults to 30s. Change it to a larger value (go test by default uses 10m), that should help.\n. ",
    "chrisolsen": "That fixes it. Thanks!\n. I am having the same issue with VSCode 1.6.1 and Go 1.6 and I have run Go: Install Tools.\n. @ramya-rao-a  I just noticed the issues this morning. I updated to VSCode 1.6.1 last night...I believe\nTurns out the only issue that I am having is golint and goreturns no longer run on save and none of the settings options are being overridden.\nManually running goreturns on a file works fine in the command line as does running Go: Add Import, and no errors are shown on save. \n. @ramya-rao-a After manually opening the output window, it can be seen that the govet is running. The output window used to auto open up on save, but now does not.\nNothing happens when I select the Format Code menu item or use the keyboard shortcut and no action execution is seen in the output window.\nBelow is what results when I perform a save after adding log.Debugf(nil, \"foo\") to the file.\n```\nFinished running tool: C:\\Go\\bin\\go.exe tool vet c:\\Users\\chris\\Go\\src\\bitbucket.org\\quicksort_io\\coachchris\\account_endpoints.go\nFinished running tool: c:\\Users\\chris\\Go\\bin\\golint.exe\nc:\\Users\\chris\\Go\\src\\bitbucket.org\\quicksort_io\\coachchris\\session.go:49: should not use basic type string as key in context.WithValue\nFinished running tool: C:\\Go\\bin\\go.exe build -o C:\\Users\\chris\\AppData\\Local\\Temp\\go-code-check -tags \"\" .\nc:\\Users\\chris\\Go\\src\\bitbucket.org\\quicksort_io\\coachchris\\account_endpoints.go:106: undefined: log in log.Debugf\n```\nMy settings are pretty bare:\n{\n    \"editor.quickSuggestionsDelay\": 50,\n    \"vim.useCtrlKeys\": true,\n    \"editor.rulers\": [80, 120],\n    \"window.zoomLevel\": -0.001\n}\n. I do see the red squiggly lines under the bad code and I can see the yellow lightbulb with suggestions.\nThere are no console messages shown after running alt-shift-f\n. I am using the latest version of the Go extension v0.6.44. From the command line I can run gofmt, goimports or goreturns and each of them work.\nI have tried uninstalling/reinstalling the extension ditto for VSCode.\n. Each of the commands returns the following, if that helps.\n```\n\ngoimports -d account_endpoints.go\ndiff account_endpoints.go gofmt/account_endpoints.go\n``\n. No, nothing follows the line with thediff` command. The same is seen if any changes are added inside or outside of vscode and running the same commands. \n\nIt seems that running the command with gofmt returns no output. I thought it was the same as goreturns and goimports, but I could be wrong.\n. Yes I tried adding lines :)\nProof is attached\n\n. Using the -w option does perform the formatting and updates the file.\n. I reinstalled it and verified that I now have the latest version of goreturns, but I still have the same issue. I will open an issue on it's repo. Thanks for revert \ud83d\udc4d \n. Since goimports -d also returned the same blank output, would the bug be in the goreturns lib?\n. Thank you! Everything is back to normal for me.\n. The default value of editor.formaOnSave is false which seems to override go.formatOnSave (at least for me) making things seem broken after getting the most recent update.\n. There doesn't seem to be any difference when with go.autocompleteUnimportedPackages set to false.\nFor the gocode command, is it the gocode autocomplete command I should test? . Things seem to have sped back up, not sure if running the gocode status command would do that... . Things getting slow has become an issue again.  I am working on a new project and the project has reached a medium size. I am back to having to wait 5 seconds or more before getting any response for autocomplete and go vet. Currently I am using all the default vscode-go settings.\nOS: windows 10\nvscode: 1.10.2\nvscode-go: 0.6.57\n. After closing and updating gocode, autocomplete is still as slow as it was before. go vet runs in about a half a second, but to see updates in the vscode editor it is stil a few seconds.. I also noticed that things are also very slow when trying to view the snippet list. Does this make it a vscode issue or can one slow down the other?. After setting \"go.gocodeAutoBuild\": false as mentioned here things are suddenly fast again.. Having all those options turned on still seems to be pretty fast and there is no noticeable difference in time when incrementally turning them on.  The huge slow down was due to the gocodeAutoBuild option and having this option turned off seems to make more sense to me anyway.\nThanks for the help.  Hopefully this thread is closed for good.. formatOnSave: true\nformatTool: goreturns. I have lintOnSave turned off due to a previous issue resulting in a huge slow down, but vetOnSave is still enabled.\nI don't get any errors. The normal output I get on save is the following, which does show that goreturns is not being run\n```\nFinished running tool: C:\\Go\\bin\\go.exe tool vet c:\\Users\\Chris\\Go\\src\\quicksort\\leaguesmart\\src\\root_handler.go\nFinished running tool: C:\\Go\\bin\\go.exe build -i -o C:\\Users\\Chris\\AppData\\Local\\Temp\\go-code-check -tags \"\" quicksort\\leaguesmart\\src\n```\nRunning goreturns, goimports or gofmt from the command line on a file outputs the formatted text to the terminal properly formatted, so as you said, the formatting isn't being triggered on save.\n. Calling the Format Document doesn't work either, but setting go.useDiffForFormatting to false fixes the problem.. Running goreturns -d filename.go only returns diff .\\filename.go gofmt/.\\filename.go, where as running goreturns without the -d does return the formatted output.. ",
    "chuckhacker": "Two things:\n1. My tests hit my web service -- I see my web service getting hit by requests in the very distinct pattern produced by my tests right after I save my main.go source file whenever VSCode is running  (and obviously, I'm not running \"go test\" or anything like that on the command line).\n2. From your repository's README.md markdown (line 19) mentions that vscode-go does a \"build-on-save (using go build and go test)\"\n. ",
    "Narven": "I'm also having this issue, together with massive flickering of code, flickering of tabs... and the current line automatic trying to select one character at the time (from right to left).\n@ramya-rao-a the go.lintOnSave: false did not work.\n. ",
    "vqhuy": "@ramya-rao-a:\n\nthe go.lintOnSave: false did not work.\n\nSame from me.\n. 2 cents suggestion: s/run/Run. The same for run file tests, run test.. ",
    "sebrandon1": "I was hitting that error \u3010Error: Error: Illegal value for line\u3011 until I updated my Go plugin in VSCode to 0.6.52.  Just throwing in my 2 cents.\nEDIT: Ha, of course, the second I write that I hit the same error again.  Ignore me.  I disabled my Go plugin and saving works again.\nEDIT2: I had to use this: \"go.formatOnSave\": false to my User Settings to have the Go plugin enabled and be able to save.. ",
    "jlozano": "see #441 for fix, closing\n. @ramya-rao-a Thanks! that seems to have fixed it!. ",
    "apkrieg": "Correction, it seems this feature does work, but only for functions and not structs, fields, or interfaces. It should work for all types.\n. @abarisain I tried it with three libraries:\n- github.com/satori/go.uuid\n- github.com/go-sql-driver/mysql\n- github.com/go-gl/glfw/v3.2/glfw\nThe only library I can use \"Go to Definition\" with is github.com/satori/go.uuid.\n```\n// Testing \"Go to Definition\"\npackage main\nimport (\n    \"github.com/satori/go.uuid\"\n    \"github.com/go-sql-driver/mysql\"\n    \"github.com/go-gl/glfw/v3.2/glfw\"\n)\nvar (\n    // Works\n    id uuid.UUID\n    // Does not work\n    db mysql.Config\n)\nfunc main() {\n    // Works\n    uuid.NewV4()\n    // Does not work\n    db.FormatDSN()\n    // Does not work\n    glfw.CreateWindow(128, 128, \"Title\", nil, nil)\n}\n```\n. ",
    "agubarev": "Not really. I've switched to another computer lately and have no issues. Back then it was sort of a permission issue, everything worked fine when I tested running vs code as root though.\n. Hello.\nI did disable format on save but it didn't help. I've posted this here just to get a better chance for 2 parties you and VIM team to figure out what's wrong (if its related to you anyhow)\nSomeone else confirmed this issue on VIM board while also using VScode+Go+Vim: https://github.com/VSCodeVim/Vim/issues/3444\n. Btw, I've just started my editor and an error popped: \"Error: Error: Illegal value for line\", I can't find a way to view this faulty code or more details but it shows \"Source: Go (Extension)\". > What remains is the jump in focus to the output pane.\nNo, I haven't check it as it didn't make much sense to me. I've downgraded VIM extension and it's back to normal and everything works.\nI've posted on GO extension board for just in case there were some contiguous parts; I haven't delved into vscode extension API thus I have no clue whether is any interference possible. Anyway, thank you for a quick response this Sunday morning :). read it late, thanks. this solves it. ",
    "MikeK123": "This feature would be much appreciated.\n. ",
    "andradei": "@ramya-rao-a I think #228 is referring to having things like auto-completion and go-to support when writing/editing templates.\nThis one would be for syntax highlighting of templates, specifically for code between {{ }}.\nSuggestion: for html/template it could be an extension of the default html syntax highlighting for VSCode, capable of highlighting both HTML and code inside {{ }} on HTML template files.\nThe highlighting could be activated for files with extensions:\n\n.gohtml or .go.html\n.gotmpl or .go.tmpl. @zareone Manually deleting github.com/ianthehat/godef worked for me. Thanks.. \n",
    "josephspurrier": "I'd also like to have go template formatting that supports the handlebars. For instance, I want the file to format like this:\nhtml\n{{define \"title\"}}{{end}}\n{{define \"head\"}}{{end}}\n{{define \"content\"}}\n    <div class=\"page-header\">\n        <h1>{{template \"title\" .}}</h1>\n    </div>\n    <p>This is the default template.</p>\n    {{template \"footer\" .}}\n{{end}}\n{{define \"foot\"}}{{end}}\nBut when it formats on save, it looks like this:\nhtml\n{{define \"title\"}}{{end}} {{define \"head\"}}{{end}} {{define \"content\"}}\n<div class=\"page-header\">\n  <h1>{{template \"title\" .}}</h1>\n</div>\n<p>This is the default template.</p>\n{{template \"footer\" .}} {{end}} {{define \"foot\"}}{{end}}\nWould this be something that could go into the core of visual studio or something that a plugin would need to add functionality for?\nLet me know if you want me to put this in a separate ticket.. Sorry, I should have been more clear. I did some more research and the cmd folder in the root of the src directory is a special folder that the Go internal tools see as internal. I added a \"d\" to the end to demonstrate that anything other than \"cmd\" works properly.\nTo reproduce, place a main.go file (any hello world application is fine) in each of the directories:\nsrc/cmdd/another/main.go\nsrc/cmd/another/main.go\nThese are the build commands if you run them manually:\ngo build cmdd/another\ngo build cmd/another\nThe first build command (go build cmdd/another) will work properly, but the second one will not (go build cmd/another).. Ah good to know! We have a corporate application that we built and tried placing all our microservices using the cmd/appname convention. We renamed the folder to app to prevent the conflict. I'm fine with closing this ticket, just good to know the reason! Thanks! Great tool by the way, my team loves it!. ",
    "HintikkaKimmo": "@ramya-rao-a I think support for html templating languages is much more general than gohtml. VScode is missing similar feature for Django & Jinja templates as well and for handlebars (what @josephspurrier is asking ). \ngotemplate-syntex does part of what I am looking for with syntax highlighting, but it has no knowledge of my go variables or does not even know how to auto close {{ signs. \nWhat I would like have as feature set:\n\ngohtml, g.html template highlighting\nAutocomplete for gohtml syntax and go variables used. \nGoto functionality allowing you to jump from .go file to referred template. \n\nSomeone, please augment my idea as required. As said above similar functionality is missing from other templating engines as well from vscode. . ",
    "alexmironof": "And what about autoformating for template files?. ",
    "pavelbinar": "Hi @ramya-rao-a \nany chance to get this feature to your Iteration Plan for 2018?\nThanks.. @ramya-rao-a Sorry, if that was not clear.\nThe point of my question was: Do you plan to work on this feature any time this year?. ",
    "eaglebush": "It can certainly help for go templates to have syntax highlighting or to turn on linting. For instance, I have a dilemma of using the commonly used file extension for template file, which is .tmpl, but because VSCode does not recognize it, the code is not highlighted, or with .html or just .htm. Some problems popup, but it does not interfere with the code compiling. It is just that an annoying thing. Please see the screenshot.\n\nWhich is the result of this:\n\n. ",
    "dbaeumer": "Moving to the vscode-go repository.\n. From @maxibanki on October 26, 2017 11:10\nSince this is a \"Bug\" of the Go extension, please create an issue there.. This got changed to make errors more visible to the user. However it can be control by the language client using the revealOutputChannelOn property on the LanguageClientOptions. @ramya-rao-a something might have changed in VS Code which as a result pokes the server more often. One way to find this out is to enable tracing in both setups and see if there are more requests send to the server and if so which once.. @jrieken could this (https://github.com/Microsoft/vscode/issues/47265) be caused by the outline view? . ",
    "cjqpker": "ha?\n. language : golang\n1.shift+cmd+o, input some keywords\n2.select a function and press enter\n2.vscode will locate a strange position\n. I tested some codes and find out this problem appears when annotations include Chinese words.\n. @ramya-rao-a \n. ",
    "eureka-gh": "I have the same issue, it looks that changing ${workspaceroot} to full path will resolve this type of error, however, the following error that I have is shown below:\n2017/02/08 21:56:23 server.go:73: Using API v1\n2017/02/08 21:56:23 debugger.go:66: launching process with args: [/Users/hgao/projects/p4/hgao-mbp_ap3_streams/services/auth-service/src/dolby.com/ap3/cmd/auth/debug]\ncould not launch process: could not fork/exec\nProcess exiting with code: 1\nDo you guys have any idea on that?. @ramya-rao-a, Thanks for your prompt response to my question.\nI followed a couple of solutions mentioned in provided link. It turns out that the \"could not fork/exec\" issue can be resolved by using \"sudo -E\"(preserve env) in CLI, but how to launch the dlv debugger in VS code with \"sudo -E\" ?\nNot so sure, if you can give me some hints on that ?\nMany thanks!\n. @ramya-rao-a Sorry for not going though all your resources. I opened two many searching pages and totally lost. Now I am able to use dlv to debug my go code in VS code. I removed previous dlv which was installed by \"go get \" and reinstall new dlv with \"brew install go-delve/delve/delve\" which is pointed out at https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md\nIt turns out \"github.com/derekparker/delve\" is NOT a good way to install dlv on OSX.\nThanks for your support. It's very helpful.. ",
    "heretic13": "Please add the ability to edit the command line for build the program.\n. The program is in a state of panic in the source code C.\nIf I put the setting sqlite to use the database in memory, then everything works and is debugged.\nI think your plugin builds a program using bad compiler settings.\nI repeat once again - the program compiled manually works normally.\nI tested on Linux - there are no such problems.\n. sorry. This is delve problem.\ndlv debug produce wrong binaries\n. Under delve:\nconfig -list\nconfig max-string-len 10000\nconfig -save. ",
    "svanas": "I seem to have the same problem. I'm working with:\n\nVisual Studio Code 1.8.0\nGo extension 0.6.51\ngo version go1.7.3 darwin/amd64\nDelve 0.11.0-alpha\n\nEvery so often, nexting (F10) in de IDE hangs. I then see this in the debug console:\nTypeError: Cannot read property 'currentGoroutine' of null\n    at GoDebugSession.evaluateRequest (/Users/svanas/.vscode/extensions/lukehoban.Go-0.6.51/out/src/debugAdapter/goDebug.js:595:45)\n    at GoDebugSession.DebugSession.dispatchRequest (/Users/svanas/.vscode/extensions/lukehoban.Go-0.6.51/node_modules/vscode-debugadapter/lib/debugSession.js:424:22)\n    at GoDebugSession.ProtocolServer._handleData (/Users/svanas/.vscode/extensions/lukehoban.Go-0.6.51/node_modules/vscode-debugadapter/lib/protocol.js:104:38)\n    at Socket.<anonymous> (/Users/svanas/.vscode/extensions/lukehoban.Go-0.6.51/node_modules/vscode-debugadapter/lib/protocol.js:24:60)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at readableAddChunk (_stream_readable.js:176:18)\n    at Socket.Readable.push (_stream_readable.js:134:10)\n    at Pipe.onread (net.js:543:20). > \"evaluateRequest\" is in the callstack, which implies that you either have a watch, or you typed something in the console. Did you do one of those?\n@roblourens No, but VSCode does watch all local variables in a VARIABLES panel -- could that be related to this problem?. @roblourens could command-line arguments be related to that, maybe? I get the impression a CLI-with-command-line-args is making nexting (F10) more unstable than a debug session without them.. ",
    "cyc115": "Same error occurred for me\nVisual Studio Code 1.12.2\nGo extension 0.6.61\ngo version go1.8.3 darwin/amd64\nDelve 1.0.0-rc.1\n2017/05/31 14:12:37 server.go:73: Using API v1\n2017/05/31 14:12:37 debugger.go:97: launching process with args: [./debug.test -test.v -test.run TestKeyRotation]\nAPI server listening at: 127.0.0.1:2345\n2017/05/31 14:12:39 debugger.go:505: continuing\n=== RUN   TestKeyRotation\ncontinue\nTypeError: Cannot read property 'currentGoroutine' of null\n    at GoDebugSession.evaluateRequest (/Users/xjqw46/.vscode/extensions/lukehoban.go-0.6.61/out/src/debugAdapter/goDebug.js:681:45)\n    at GoDebugSession.DebugSession.dispatchRequest (/Users/xjqw46/.vscode/extensions/lukehoban.go-0.6.61/node_modules/vscode-debugadapter/lib/debugSession.js:430:22)\n    at GoDebugSession.ProtocolServer._handleData (/Users/xjqw46/.vscode/extensions/lukehoban.go-0.6.61/node_modules/vscode-debugadapter/lib/protocol.js:104:38)\n    at Socket.<anonymous> (/Users/xjqw46/.vscode/extensions/lukehoban.go-0.6.61/node_modules/vscode-debugadapter/lib/protocol.js:24:60)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at readableAddChunk (_stream_readable.js:176:18)\n    at Socket.Readable.push (_stream_readable.js:134:10)\n    at Pipe.onread (net.js:551:20)\n. @ramya-rao-a it indeed does \nbash\n\u279c  dlv test\nType 'help' for list of commands.\n(dlv) break main.main\nBreakpoint 1 set at 0x1673fa3 for main.main() xxxx.go:220\n(dlv). @ramya-rao-a Any idea how this bug can be bypassed at least for now? :). @ramya-rao-a  yes next and c works. . @ramya-rao-a  The docker/notary project seems to be failing. . Local debugging on https://github.com/willseward/delve-crash does not work either:\n\n. I can confirm the same behavior, flags here are not shown \n\n. Thanks for the development of the go plugin! \nI also have this problem and is getting very annoying (it would hog the cpu every two minutes or so if I use the \"peek / goto definition\" feature. \nTo solve this I used a script to check process name and cpu usage and kill the process with process name matching go-langserver every 2 second if cpu usage exceeds 95%. \n. confirm same error on Delve Debugger\nVersion: 1.0.0-rc.1\nBuild:\n. I know this is not a longterm solution but for those that needs it :Try\nreverting back to 0.12 , worked for me\nOn May 16, 2017 11:34 AM, \"Ramya Rao\" notifications@github.com wrote:\n\n@derekparker https://github.com/derekparker Any ideas based on the\nabove error message?\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/986#issuecomment-301839556,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACAnxanmOGtqWckO19mBVvKAngveqs9Kks5r6dAsgaJpZM4NWvkP\n.\n. Update : This behavior seems to affect all codeLens. The groups would also\nbe inverted from time to time when there are multiple logical groups of\ncodeLens on one line.\n\nOn May 15, 2017 7:09 PM, \"Ramya Rao\" notifications@github.com wrote:\n\nInteresting..\n@jrieken https://github.com/jrieken Do you know the reason for this?\nThe code that provides the codelens for run/debug tests is\nhttps://github.com/Microsoft/vscode-go/blob/master/src/\ngoRunTestCodelens.ts#L79-L80\nI don't see why the order should change.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/999#issuecomment-301638767,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACAnxYhM1yBgGFJLnEuMrCgmQUdv2wInks5r6Ok8gaJpZM4NbUkL\n.\n. Update : This behavior seems to affect all codeLens. The groups would also\nbe inverted from time to time when there are multiple logical groups of\ncodeLens on one line.\n\nOn May 15, 2017 7:09 PM, \"Ramya Rao\" notifications@github.com wrote:\n\nInteresting..\n@jrieken https://github.com/jrieken Do you know the reason for this?\nThe code that provides the codelens for run/debug tests is\nhttps://github.com/Microsoft/vscode-go/blob/master/src/\ngoRunTestCodelens.ts#L79-L80\nI don't see why the order should change.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/999#issuecomment-301638767,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACAnxYhM1yBgGFJLnEuMrCgmQUdv2wInks5r6Ok8gaJpZM4NbUkL\n.\n. \n",
    "ahmedjafri": "@ramya-rao-a Here is an example: https://github.com/willseward/delve-crash which I cannot debug from VsCode but I can with the command dlv connect 127.0.0.1:2345 and then using the dlv command line. \nVerbose logs are written to:\n/var/folders/gm/fb6sb_5n6s19dyjpvqtmq_jh0000gn/T/vscode-go-debug.txt\n10:06:03 PM, 6/7/2017\nInitializeRequest\nInitializeResponse\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\n\nVSCode 1.12.2\nvscode-go 0.6.61 (also tried building extension from HEAD - same issue)\ndelve 1.0.0-rc.1\n\n941, #360 . @ramya-rao-a I'm on OSX 10.11.6. Is this remote debugging?\nI cloned https://github.com/willseward/delve-crash and launched the docker container with docker-compose up --build at the root of the repo. As a point of reference, I can debug locally if I set a breakpoint initially and launch the debug session from vscode. After I hit the first breakpoint, I remove that breakpoint and hit continue. If I try to set that breakpoint again, it becomes unverified. \n\nvscode-go-debug.txt\n. Working as expected through dlv command line \n```\n[ajafri:~/external/delve-crash]$ dlv debug app/main.go\nType 'help' for list of commands.\n(dlv) break main.go:13\nBreakpoint 1 set at 0x2145 for main.main() ./app/main.go:13\n(dlv) continue\n\nmain.main() ./app/main.go:13 (hits goroutine(1):1 total:1) (PC: 0x2145)\n     8: func main() {\n     9:         ticker := time.NewTicker(time.Second)\n    10:         defer ticker.Stop()\n    11:\n    12:         for _ = range ticker.C {\n=>  13:                 fmt.Println(\"Hello! I'm going to sleep for 1 second.\")\n    14:                 time.Sleep(time.Second)\n    15:         }\n    16: }\n(dlv) clear 1\nBreakpoint 1 cleared at 0x2145 for main.main() ./app/main.go:13\n(dlv) continue\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nreceived SIGINT, stopping process (will not forward signal)> runtime.mach_semaphore_timedwait() /usr/local/go/src/runtime/sys_darwin_amd64.s:428 (PC: 0x52e13)\n   423:     MOVL    sema+0(FP), DI\n   424:     MOVL    sec+4(FP), SI\n   425:     MOVL    nsec+8(FP), DX\n   426:     MOVL    $(0x1000000+38), AX // semaphore_timedwait_trap\n   427:     SYSCALL\n=> 428:     MOVL    AX, ret+16(FP)\n   429:     RET\n   430:\n   431: // func mach_semaphore_signal(sema uint32) int32\n   432: TEXT runtime\u00b7mach_semaphore_signal(SB),NOSPLIT,$0\n   433:     MOVL    sema+0(FP), DI\n(dlv) break main.go:13\nBreakpoint 2 set at 0x2145 for main.main() ./app/main.go:13\n(dlv) continue\nmain.main() ./app/main.go:13 (hits goroutine(1):1 total:1) (PC: 0x2145)\n     8: func main() {\n     9:         ticker := time.NewTicker(time.Second)\n    10:         defer ticker.Stop()\n    11:\n    12:         for _ = range ticker.C {\n=>  13:                 fmt.Println(\"Hello! I'm going to sleep for 1 second.\")\n    14:                 time.Sleep(time.Second)\n    15:         }\n    16: }\n(dlv) clear 2\nBreakpoint 2 cleared at 0x2145 for main.main() ./app/main.go:13\n(dlv) continue\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nHello! I'm going to sleep for 1 second.\nreceived SIGINT, stopping process (will not forward signal)> runtime.mach_semaphore_timedwait() /usr/local/go/src/runtime/sys_darwin_amd64.s:428 (PC: 0x52e13)\n   423:     MOVL    sema+0(FP), DI\n   424:     MOVL    sec+4(FP), SI\n   425:     MOVL    nsec+8(FP), DX\n   426:     MOVL    $(0x1000000+38), AX // semaphore_timedwait_trap\n   427:     SYSCALL\n=> 428:     MOVL    AX, ret+16(FP)\n   429:     RET\n   430:\n   431: // func mach_semaphore_signal(sema uint32) int32\n   432: TEXT runtime\u00b7mach_semaphore_signal(SB),NOSPLIT,$0\n   433:     MOVL    sema+0(FP), DI\n(dlv) ^C\n(dlv) exit\n```. @ramya-rao-a\nreceived SIGINT, stopping process (will not forward signal)\n\nYep that is me hitting ctrl+c. ",
    "byron70": "I am having this exact issue when I have any parameters in the \"buildFlags\"  the the launch.json.\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"stopOnEntry\": false,\n            \"name\": \"test account\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"cwd\": \"${workspaceRoot}/lib/ssm/account\",\n            \"program\": \"${workspaceRoot}/lib/ssm/account\",\n            \"args\": [\n                \"-test.v\",\n                \"-test.run\",\n                \"TestCreate\"\n            ],\n            \"buildFlags\": \"-x -v -tags 'unit'\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"trace\": \"verbose\",\n            \"showLog\": true\n        }\n    ]\n}\nAfter banging on this for some time, I found increasing the pause in the following line to something like 500+ ms before the RPC connection attempt seems to alleviate the issue and things continue as expected. \nhttps://github.com/Microsoft/vscode-go/blob/0.6.62/src/debugAdapter/goDebug.ts#L296\nIf I remove the buildFlags from the launch configuration things work just fine.  The code doesn't have to build in that instance. The code is fairly simple and compiles fairly quickly. \nHere is a dump of a trace with the build flags.  I've removed some things for privacy sake.\nVerbose logs are written to:\nC:\\Users\\mannb\\AppData\\Local\\Temp\\vscode-go-debug.txt\n3:29:28 PM, 7/21/2017\nInitializeRequest\nInitializeResponse\nUsing dlv at: D:\\projects\\cdn\\go\\bin\\dlv.exe\n[\"test\",\"--headless=true\",\"--listen=127.0.0.1:2345\"]\nWORK=C:\\Users\\mannb\\AppData\\Local\\Temp\\go-build948495966\nmkdir -p $WORK\\{....}\\lib\\ssm\\account\\_test\\{....}\\lib\\ssm\\\nmkdir -p $WORK\\{....}\\lib\\ssm\\account\\_test\\_obj_test\\\ncd D:\\projects\\cdn\\go\\src\\{....}\\lib\\ssm\\account\n\"D:\\\\Go\\\\pkg\\\\tool\\\\windows_amd64\\\\compile.exe\" -o \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\\\\{....}lib\\\\ssm\\\\account\\\\_test\\\\{....}lib\\\\ssm\\\\account.a\" -trimpath \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\" -N -l -p {....}/lib/ssm/account -complete -buildid 172609513b0df491632e99722f5926d2bbdf0a62 -D _/D_/projects/cdn/go/src/{....}/lib/ssm/account -I \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\" -I \"D:\\\\projects\\\\cdn\\\\go\\\\pkg\\\\windows_amd64\" -pack \"D:\\\\projects\\\\cdn\\\\go\\\\src\\\\{....}lib\\\\ssm\\\\account\\\\account.go\" \"D:\\\\projects\\\\cdn\\\\go\\\\src\\\\{....}lib\\\\ssm\\\\account\\\\account_test.go\"\nmkdir -p $WORK\\{....}\\lib\\ssm\\account\\_test\\\ncd $WORK\\{....}\\lib\\ssm\\account\\_test\n\"D:\\\\Go\\\\pkg\\\\tool\\\\windows_amd64\\\\compile.exe\" -o \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\\\\{....}lib\\\\ssm\\\\account\\\\_test\\\\main.a\" -trimpath \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\" -N -l -p main -complete -D \"\" -I \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\\\\{....}lib\\\\ssm\\\\account\\\\_test\" -I \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\" -pack \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\\\\{....}lib\\\\ssm\\\\account\\\\_test\\\\_testmain.go\"\ncd .\n\"D:\\\\Go\\\\pkg\\\\tool\\\\windows_amd64\\\\link.exe\" -o \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\\\\{....}lib\\\\ssm\\\\account\\\\_test\\\\account.test.exe\" -L \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\\\\{....}lib\\\\ssm\\\\account\\\\_test\" -L \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\" -L \"D:\\\\projects\\\\cdn\\\\go\\\\pkg\\\\windows_amd64\" -extld=gcc -buildmode=exe \"C:\\\\Users\\\\mannb\\\\AppData\\\\Local\\\\Temp\\\\go-build948495966\\\\{....}lib\\\\ssm\\\\account\\\\_test\\\\main.a\"\nmkdir -p d:\\projects\\cdn\\go\\src\\{....}\\lib\\ssm\\account\\\ncp $WORK\\{....}\\lib\\ssm\\account\\_test\\account.test.exe d:\\projects\\cdn\\go\\src\\{....}\\lib\\ssm\\account\\debug.test\n2017/07/21 15:29:30 server.go:73: Using API v1\n2017/07/21 15:29:30 debugger.go:97: launching process with args: [./debug.test -test.v -test.run TestCreate]\nAPI server listening at: 127.0.0.1:2345\nThis is where things stop. If I hit enter 2 times on the debug console, I receive the following.   Also, if I don't hit enter a couple of times,  Ctl+Shift+F5 (debug restart) won't work... but a debug stop does. \nPlease start a debug session to evaluate\nTypeError: Cannot read property 'currentGoroutine' of null\n    at GoDebugSession.evaluateRequest (C:\\Users\\mannb\\.vscode\\extensions\\lukehoban.go-0.6.62\\out\\src\\debugAdapter\\goDebug.js:669:45)\n    at GoDebugSession.DebugSession.dispatchRequest (C:\\Users\\mannb\\.vscode\\extensions\\lukehoban.go-0.6.62\\node_modules\\vscode-debugadapter\\lib\\debugSession.js:430:22)\n    at GoDebugSession.ProtocolServer._handleData (C:\\Users\\mannb\\.vscode\\extensions\\lukehoban.go-0.6.62\\node_modules\\vscode-debugadapter\\lib\\protocol.js:104:38)\n    at Socket.<anonymous> (C:\\Users\\mannb\\.vscode\\extensions\\lukehoban.go-0.6.62\\node_modules\\vscode-debugadapter\\lib\\protocol.js:24:60)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at readableAddChunk (_stream_readable.js:176:18)\n    at Socket.Readable.push (_stream_readable.js:134:10)\n    at Pipe.onread (net.js:551:20)\nEvaluateRequest\n. Guess I should note for anyone wanting to test this possible fix locally. For Windows just update that line in your local file... probably here for Windows.  Linux might have a similar path.\n%USERPROFILE%\\.vscode\\extensions\\lukehoban.go-0.6.62\\out\\src\\debugAdapter\\goDebug.js. ",
    "edwinprojects": "I'm having the same issue running from VS Code running a simple hello world using fmt.Scanf. not even debugging, just running it with Scanf fails. ",
    "zhakhalov": "I have just fire F5 in project directory \nThis is my project\n\nAnd this is launch.json content\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"debug\",\n      \"remotePath\": \"\",\n      \"port\": 2345,\n      \"host\": \"127.0.0.1\",\n      \"program\": \"${workspaceRoot}\",\n      \"env\": {},\n      \"args\": [],\n      \"showLog\": true\n    }\n  ]\n}\nAlso I tried to pass certain file to program field wit same effect :(\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"debug\",\n      \"remotePath\": \"\",\n      \"port\": 2345,\n      \"host\": \"127.0.0.1\",\n      \"program\": \"${workspaceRoot}/main.go\",\n      \"env\": {},\n      \"args\": [],\n      \"showLog\": true\n    }\n  ]\n}\nBut if install my package as d:\\development\\Go\\src\\hwapp>go install . or run app as d:\\development\\Go\\src\\hwapp>go run main.go everything goes fine\n. That workaround helped.\nThank you.\nHere is solution\ncd %GOPATH%\\src\\github.com\\derekparker\\delve\ngit checkout e4c7df\ncd %GOPATH%\\src\ngo install .\\github.com\\derekparker\\delve\\cmd\\dlv\nPlease add this workaround to readme.md\nBut next issue i met is overinformated debug console. \n\nI suppose that debugger generates this output. But could you please reduce info from debugger.go or please suggest another workaround for this issue.\n. ",
    "RoboBurned": "From StackOverflow post How to fix delve \u201ccan't load package: package internal\u201d error\n\nHave to fallback to previous version of delve to get it working. \n. \n",
    "ysqi": "thanks @lukehoban @ramya-rao-a  ,I want  to use env variables for all tests in current workspace.\nbut can't setting env variables via the configuration settings now.\ne.g init run mode ,first check Is there a set env var runMode . different run mode use different config. runMode=test => config= app.test.config .\n. @ramya-rao-a  the config file is  that  my application's file, not about vscode. \n. ",
    "ernsheong": "I ran into this. Thank you so much!! \ud83d\ude4c \ud83d\ude4c. ",
    "frodopwns": "This seems to have stemmed from updating Go without updating/restarting the gocode daemon.\n. ",
    "kumarharsh": "I've noticed that even in the cases when a variable is local (lowercase and in a sub-block scope), vscode apparently scans the whole codebase (because it starts throwing errors in unrelated files) which might contribute to the slowness.\nAlso, as originally highlighted, sometimes the file doesn't get updated after the rename and it just keeps showing older names until I reopen the file. I've noticed this three times now, but didn't give much heed until the last time it happened. I opened the developer console and there were some errors which unfortunately I didn't take note of at that time.\n. @ramya-rao-a yes, I am on Windows. I do see the progress bar, but I do tend to miss it sometimes (it's so thin), so when the rename operation does succeed, it takes a while for me to realize it. As you said, on windows, this operation takes some time and a success prompt might help.\nLike @nochso I also have diff and other unix tools (supplied by Git on Windows/mingw64) in my PATH, so diff is accessible by default.\n. This happens for me too, especially since including some cgo packages such as github.com/lestrrat/go-libxml2, which won't compile on my windows setup (and I can't seem to find all the pieces to get libxml2 working under windows). I build and run the golang app via a linux docker container, so the code runs fine, but vscode, being under windows, keeps throwing errors about undefined references due to gocode trying to build the project under Windows. And apparently, this takes a lot longer than if the error hadn't been there.\nI've suffered so long with this issue, when all I had to do was set autobuild:false \ud83d\ude06 . > But seems like in open source communities if there is a tool which does the job at least to some reasonable level of acceptable, nobody wants to make a better one.\nRight on point. @nsf - maybe you can add this to the gocode README - might act like throwing the gauntlet for a better tool.\nFrom my experience, go works atleast 2-3x faster on unix machines w.r.t Windows, which causes gocode and other go tools to just work on unix machines. Working with go on Windows is a lot more painful. Some of the issues I run into almost daily:\n autocomplete (gocode) is slow - which this issue is already about.\n 'Go to references' and related bins take more time on Windows.\n* Package management with glide is sometimes a very painful exercise.\n...\nThese are just observations, not really directed at anyone. I really appreciate the work which has been done to make golang a great language to work with. Personally, I lack time to contribute to golang tools as I don't have enough time to dive deep into the language. I hope someone does though \ud83d\ude42 \ud83d\ude4f . No, I guess I will have to keep cleaning it manually. The slightly painful part is that the extension tries to update all go tools again - so it kind-of becomes a loop where I just keep fixing one repo, just for something else to break again next time.\n. ",
    "clamoriniere": "@ramya-rao-a, thanks for you code review. I done your proposed changes.\nabout gotests failing on windows environment, did you try to run directlygotests with the command line?  Maybe it is because you installed with the command: go get -u github.com/cweill/gotests/gotests instead of go get -u github.com/cweill/gotests/... \nI haven't a windows environment yet but I will try next week.\nThanks again for your help.\n. Hello @ramya-rao-a, I was able to test on a windows environment my last pull request version and it works fine. \nenv: Windows 7, vscode v1.5.3\n. travis jobs failed due to an issue with the command \"go get -u -v github.com/golang/lint/golint\" and the environment go1.5\nerror: \"../../golang/lint/lint.go:250: undefined: types.ImportMode\"\nlink: https://travis-ci.org/Microsoft/vscode-go/jobs/164787607#L287\nPR #510 should fix this issue\n. travis jobs failed due to an issue with the command \"go get -u -v github.com/golang/lint/golint\" and the environment go1.5\nerror: \"../../golang/lint/lint.go:250: undefined: types.ImportMode\"\nlink: https://travis-ci.org/Microsoft/vscode-go/jobs/164787607#L287\nPR #510 should fix this issue\n. So maybe the feature never worked properly from the beginning :(\nIt was only tested with a global function and not a method of a type.. I also opened an Issue to gotests for a feature request in order to support the type in the regular expression input with the -only option.\nlink: https://github.com/cweill/gotests/issues/35. @ramya-rao-a  thanks for your quick review !. Change done.\n. change done in all files\n. added\n. right. \n. done\n. absolutly \n. you're right. I will add a check on the editor\n. I didn't know much about the vscode internals... I done a copy/past on the gotest plugin. I will check what it is better in my case.\n. ok\n. I will modify by: github.com/cweill/gotests/gotests/... since it is what they are saying in the doc.\n. ok\n. done\n. I added unit tests\n. Ok, I will do this change.\n. Thanks, I will wait your PR integration.\n. @ramya-rao-a: rebase done; travis builds look fine now.\n. if the tests use the same file, 2 tests will failed, since the all tests will be already generated by the \"generate test in current package\". Yes, thanks. test updated. Good idea and done.. ",
    "goupadhy": "I have set the gopath but even after that i get status bar saying gopath not set. \nInstalling 10 tools\n  gocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  godef\n  goreturns\n  golint\n  gotests\nInstalling gocode FAILED\nInstalling gopkgs FAILED\nInstalling go-outline FAILED\nInstalling go-symbols FAILED\nInstalling guru FAILED\nInstalling gorename FAILED\nInstalling godef FAILED\nInstalling goreturns FAILED\nInstalling golint FAILED\nInstalling gotests FAILED\n10 tools failed to install.\nThe \"godef\" command is not available. Use \"go get -v github.com/rogpeppe/godef\" to install. GOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/goupadhy/work\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/gc/d6y6tl513ns4862ygkx1hbcm0000gn/T/go-build118968087=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\n. ",
    "SerjAntiquity": "@goupadhy try to run vs code from terminal.\nOr set \"go.gopath\" in settings.json in  \"File\"-\"Preferences\"-\"User Settings\". ",
    "sancao": "@SrHuevo: could you please to tell more clearly, how?. ",
    "tamilselvamc": "set \"go.gopath\" in settings.json in \"Code\"-\"Preferences\"-\"User Settings\". ",
    "vishal-uttamchandani": "@goupadhy I realize this is an old issue. Just to mention, set GOBIN env variable to %GOPATH%\\bin and it should install successfully.. ",
    "paulcalcraft": "Make sure you have gogetdoc installed by running:\ngo get github.com/zmb3/gogetdoc\nIt's not installed as standard by go or vscode's go extension, and the above setting (\"go.docsTool\": \"gogetdoc\") will fail silently if it is not installed.. Thanks @ramya-rao-a,  \"go.docsTool\": \"gogetdoc\" works great after installing gogetdoc by running:\ngo get github.com/zmb3/gogetdoc\nGo to definition was failing silently with this setting before I realised I needed to manually install gogetdoc.. ",
    "unix2dos": "in 1.92 mac , do not work?\n@ramya-rao-a . @ramya-rao-a   in 1.92 mac ,Go to definition was failing silently. Where did I go wrong? Thanks\n. @ramya-rao-a  Go to definition feature failing only for dot imports. other cases are ok.\nmy config and install them all\n\"go.useLanguageServer\": true,\n    \"go.docsTool\": \"gogetdoc\",\n. ",
    "troylelandshields": "+1 I also have this issue. Didn't start for me until I updated to Macos Sierra.\nPlease don't make me switch to Sublime \ud83d\ude22 \n. go version go1.7\n. I have a friend that uses Atom and he is having similar issues, so it might be something with the Go tools themselves. \n. ",
    "q45": "I started using sublime again because of this and it makes me really sad as well. \n. godef 63.7 CPU \ngocode  63.7 CPU\ngodef 63.4 CPU\n. I have to go and constantly kill the process with the activity monitor \n. go 1.7.1\n. @tecbot could you explain exactly how you did that. Thanks \n. ",
    "BramGruneir": "They don't even close down on their own after closing vscode for a while.\n\n. go 1.7.1\n. I think I've discovered the cause of the error.  Go needs to be recompiled from source to work with Sierra. Specifically, the gotools to fix this issue.\nHowever doing so is not easy right now, see https://github.com/golang/go/issues/16352\nTo fix this, I took go's 1.4.3 source, compiled it using the cherry-picked suggestions from the issue (it fails some tests, but works fine as a bootstrapper) and the recompiled 1.7.1 using that newly compiled 1.4.3 bootstrapper.  \nThis completely fixed this issue for me.\n. Sadly, I have to report that there are less godefs running, but it didn't completely eliminate the problem.\n. ",
    "c4milo": "I'm using Go 1.7\n. @ramya-rao-a I would appreciate the prompt as I constantly switch my Go version underneath when  testing new Go releases and it breaks vscode every time. . @ramya-rao-a apologies for commenting on a closed issue. I noticed go.buildTags type is a string, I believe it should be an array just like go.buildFlags. I'm happy to open a new issue if you agree.. ah, I just looked at my makefiles and multiple tags can be passed, separated by space. I forgot about it somehow. Sorry for the noise!. ",
    "stephbu": "Brew upgrading 1.6 > 1.7.1 reduced the number of orphaned go/godef/gocode instances running by a lot, but left one residual go instance running at ~68% CPU on a MBPR.  On battery this turning the typical 8hr experience into ~60mins of lap warming.\n. ",
    "archerbj": "@ramya-rao-a hi , i just  ran into  this problem. It is embarrassing  to say but i really can't find where to run the command.\nShould i literally run GO: install tools ? or go install the tools separately . @ramya-rao-a  Thanks a lot ! . ",
    "zegl": "I recently encountered this issue after upgrading to MacOS Sierra.\nWhy can the extension not notify the users to run Go: Install Tools if the editor suspects that some tools needs to be upgraded/reinstalled?\nAs a user I'd like the editor/plugin to either solve these issues by itself or to notify me what I can do to solve it.. The Sierra issue would indeed be hard to foresee. This issue might be easier to detect than to predict?\nSings of this issue seems to be unresponsive processes of gocode, godef or any other tool.  Which should be relatively easy to detect and correct for.. ",
    "DmitriyMV": "go version go1.7.1 linux/amd64\nvs_code_1.6.0-1476123947_amd64\nAuto-complete works (suddenly, for some reason), but try to hover over mux.Vars function for example. In normal case, this should show function info, but it doesn't. Go to definition doesn't work either.\n. ",
    "jadrio": "I have the same issue. go to definition not working with gorilla/mux. It works on my macbook but not on my ubuntu desktop.\nOS Ubuntu 16.10\ngo version go1.7.1 linux/amd64\nvscode 1.7.1 02611b40b24c9df2726ad8b33f5ef5f67ac30b44\n. ",
    "bezigon": "You could run the command Go: Install Tools This will install/update all the tools used by the Go extension\n. ",
    "marpaia": "Awesome, adding \"go.useDiffForFormatting\": false, to my config fixed this for me as well.\n. @ramya-rao-a done! thanks for shepherding :)\n. ",
    "tsauvajon": "go get -v sourcegraph.com/sqs/goreturns\ncan't load package: package sourcegraph.com/sqs/goreturns: no Go files in C:\\GOPATH\\src\\sourcegraph.com\\sqs\\goreturns. I've had no success with or without -u. (no pun intended)\nI used go get -v -u github.com/sqs/goreturns as indicated in another issue (I can't find it again, sadly) to make it work.. @sqs It redirects me to https://about.sourcegraph.com and displays the index normally.\n``` bash\n\ngo get -u -v sourcegraph.com/sqs/goreturns\n\ncd C:\\GOPATH\\src\\sourcegraph.com\\sqs\\goreturns; git config remote.origin.url package sourcegraph.com/sqs/goreturns: remote origin not found\n``%GOPATH%\\src\\sourcegraph.com\\sqs\\goreturnsonly contains the.git` directory\n@ramya-rao-a go get -v -u github.com/sqs/goreturns works, while go get -v -u sourcegraph.com/sqs/goreturns doesn't.. @keegancsmith \nGo version : go version go1.9 windows/amd64\nThe source for https://sourcegraph.com/sqs/goreturns?go-get=1 is correct :\n<html><head><meta name=\"go-import\" content=\"sourcegraph.com/sqs/goreturns git https://github.com/sqs/goreturns\"></head><body></body></html> \nDeleting the sourcegraph folder and go getting again made it work.. ",
    "sqs": "Hmm, sorry about the issue. I\u2019m not sure what\u2019s going on but I have some ideas to troubleshoot it.\nWhat\u2019s in the goreturns directory after running the command?\nDoes it work when you run go get with github.com but not sourcegraph.com? If so, then what do you see when you visit Sourcegraph.com in your browser? Our Cloudflare proxy may have flagged your IP for some reason and require a CAPTCHA. We\u2019ve seen this once a while ago but thought we had fixed it. . Thanks for trying it out and posting. It's a relatively simple fix to github.com/sourcegraph/go-langserver to make it show struct fields in hovers. That fix will be in within 24 hours. . Indeed - @slimsag is working on this now (@keegancsmith is on parental leave for a few more weeks \ud83c\udf8a). Sorry for the confusion here!\nI just updated the goreturns README to use https://github.com/sqs/goreturns as the main web URL and github.com/sqs/goreturns as the main import path.\n(More info, if curious: The import path sourcegraph.com/sqs/goreturns still worked (curl 'https://sourcegraph.com/sqs/goreturns?go-get=1'). The web URL https://sourcegraph.com/sqs/goreturns does not, though. We special-cased a few URLs like this on sourcegraph.com (most URLs are like https://sourcegraph.com/github.com/sqs/goreturns), and that regressed. Will fix in 24-48 hours. Even with this fix, we had seen some instances where our CDN was interfering with go gets from AWS, so in the interest of time I decided to just use github.com/ as the canonical URL and import path.). ",
    "keegancsmith": "@tsauvajon What version of go are you using? I am on go 1.9.1 on darwin and I can't reproduce. Your go get seems to have done the wrong thing. If you remove  C:\\GOPATH\\src\\sourcegraph.com\\sqs\\goreturns does it work? By the looks of it our go get proxy is doing the correct behaviour. If you visit https://sourcegraph.com/sqs/goreturns?go-get=1 do you see the following when you \"view page source\":\n<html><head><meta name=\"go-import\" content=\"sourcegraph.com/sqs/goreturns git https://github.com/sqs/goreturns\"></head><body></body></html>\n. @ramya-rao-a try on the latest master, I fixed that bug last week.. Hovers with struct fields coming soon :) https://github.com/sourcegraph/go-langserver/pull/169\nAlso adding a -version flag. Soon you should be able to run go get gopkg.in/sourcegraph/go-langserver.v2, etc. https://github.com/sourcegraph/go-langserver/pull/170. > The issue I have with using gopkg.in is that the extension can only ask for which major version it wants and has no control over the minor version.\n@ramya-rao-a given we aren't a library we don't have to strictly adhere to semantic versioning. We can only use the major version when doing a release, so when .v2 is tagged it will never change. The next time we tag a release it will be .v3 (not v2.1, etc).\nIf we stick to that, you should be able to rely on doing -version in vscode-go to ensure the user is on the required version, and either update automatically if old or warn if newer.. @jrieken for the docs string, we set the language as markdown in the MarkedString https://sourcegraph.com/github.com/sourcegraph/go-langserver@4193810334683f87b8ed5d896aa4753f0dfcdf20/-/blob/langserver/hover.go#L150:1-154:1\nIf I understand what you are saying correctly, our doc strings should be rendered in the UI font. This issue is saying it is rendered in the editor font. Should this be regarded as a bug in vscode, or am I misunderstanding you?. We haven't seen any issues like this in production. However, the server can occasionally OOM in production (but that is usually when several large repos end up on the same machine).. I'm used to dealing with servers which I can poke and prod to debug this sort of thing, so hard to know what is going on here. Here is a dump of how to understand what is going on:\n\nWe support logging to a file, these logs are likely a good first step to understand what is taking a long time to run.\nWe support sending opentracing spans over the telemetry/event to vscode. Not sure if vscode does anything with this.\nWe also support running a pprof http endpoint so you can get some mem/cpu/goroutine/etc dumps. It also has prometheus stats which probably won't be that useful in this case.\nI can add a signal handler to dump information to stderr.\n\n@ramya-rao-a how can people run go-langserver with the -trace and possible the -logfile flag? Also if I make our log handler send window/logMessage would this make our life easier?. Thanks. We believe the root of this issue is our poor use of RAM for editor environments. We have this issue in the go-langserver repo to track https://github.com/sourcegraph/go-langserver/issues/178. @josh-tepper we are aware of a few issues when using the go-langserver on a normal dev machine vs production at sourcegraph.com. We will be prioritising time soon to address them. At this point I don't think you need to gather any data for us. Rather when we have addressed the issues I'd love for you to retry the langserver. Thanks for your patience thus far.. Apologies for the radio silence. @charlires can you give an example test file (or link to it if it is OSS).. Aah ok thanks. It seems to only happen with xtest packages (ie your package has _test suffix). I'll fix it. Thanks for the response.. On fixing the bug, I noticed that documentSymbol had a few other corner cases (wouldn't work on main pkg either). It should work much better now.. Thanks. I've filed an issue in go-langserver https://github.com/sourcegraph/go-langserver/issues/185. This is a duplicate of https://github.com/sourcegraph/go-langserver/issues/185. Sorry this is an oversight. The language server uses stdio to communicate to vscode-go, but it listens on :6060 by default to expose a pprof handler. The default should not be to start the pprof server, will update the defaults.. Fixed by https://github.com/sourcegraph/go-langserver/commit/c0ef041f24a52e734b83c2f69075ad95df7ff97e. Yeah right now go-langserver doesn't support not having a rootPath or rootURI. I'll see how easy it is to add, but we have in quite a lot of places baked in the assumption of a rootPath.. I'm unsure how well this would work, but we could just pretend that rootPath = \"/\". For operations that inspect the workspace (like references), this would end up being very very costly. So it doesn't seem like the correct solution.\n@ramya-rao-a what functionality is expected to work when there is no workspace? If we can rule out references and workspace/symbols that seems fine to me. If references are expected to work, in what scope? Just the current file / current directory / more (GOPATH?). ",
    "itcuihao": "```\n[src] go get -v -u github.com/sqs/goreturns                                             11:08:57\ngithub.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\ngolang.org/x/tools (download)\ncd /usr/local/mygo/src/golang.org/x/tools; git pull --ff-only\nfatal: unable to access 'https://github.com/golang/tools.git/': Empty reply from server\npackage golang.org/x/tools/imports: exit status 1\n```\n\ngo version go1.9.2 darwin/amd64 . \n",
    "inputusernamehere": "There's no error in the program itself, this can be seen here:\nmain.go: https://gist.github.com/inputusernamehere/a764333cd26d0c01681f4391bc88230d\nmain_test.go: https://gist.github.com/inputusernamehere/35f176a59e4fbb55bc679d1fde7bbdbc\nRunning this (go run main.go) works fine and outputs the expected result (12345). Running the test also works fine, passes and outputs the expected result without a hitch.\nThere is only an issue when it's ran/debugged with the default launch.json (\"mode\": \"debug\").\nI guess the issue is with Delve then, and not vscode-go? Should I submit an issue there instead?\n. ",
    "mbana": "do you have any plans to integrate this into the extension or the standalone language for that matter?\ni've noticed that Monaco already has support for the Typescript via Web Workers etc. so I as wondering if you'll be doing the same any time soon.\nThe only approach I can think of is to recompile monaco-editor myself to include such support.\n. OK, I've started to do some work on this:\n- https://github.com/mbana/monaco-go\n- https://github.com/mbana/vscode-go-languageservice\nI'll keep you posted!\nThanks,\n. fyi: \"File Outline\" aka textDocument/documentSymbol works in one of the branches, it's probably not in master hence why it's not working.\nyou might want to ping @sqs (https://github.com/sqs).. ",
    "atombender": "Thanks!\n. Yeah, I don't understand that issue.\nSo I just realized I was using golint\u00a0instead of gometalinter. When I enable the latter, I seem to be getting workspace-wide errors. Maybe close this, then.\n. Thanks! It would be a good idea to document this behaviour. I find golint\u00a0quite limited, myself.\n. I spoke too soon. I'm actually seeing the same behaviour as described originally.\nI think what happened was I made some test errors in somepkg and somepkg/nestedpkg. It looks like gometalinter\u00a0is invoked recursively, so it will return errors for both packages. So that works correctly, but it led me to think the issue was resolved.\nIt seems there's no way to make it run on the whole workspace (i.e. the root folder of the workspace), other than hard-coding the project name into go.lintFlags.\n. That sounds like a good idea.\n. I think that would be fine. A quick test seems to indicate that vet doesn't give false positives on lines that fail to compile; not sure if that is intentional, a fluke, or just my test case not testing enough problems. For example, change the example's last line to:\ngo\n    return &Result{foo}, nil\nvet\u00a0should complain about an unkeyed field, but doesn't. So that's good.\n. Looks like this issue is dead. I tried enabling some more linters \u2014 I had disabled errcheck because of the above \u2014 and was immediately hit by this issue again.\nJust to reiterate, it seems nonsensical to offer a lint error (green squiggle) if a line also has a syntax error (red squiggle). Here's me hitting the \"next marker\" key to cycle:\n\nHow does (2/2) help me here? The line contains a syntax error and the linting error probably can't be correct. (And it isn't. When linters encounter build errors, they emit them as linter errors, so this is a false positive.)\nMy suggested fix is to ignore linter errors for lines that already have error markers on them. That will almost completely fix this problem. There's still the chance that false-positive linter errors can appear on other lines that aren't build errors, but I don't think that will be as damaging.\n. @ramya-rao-a Thanks, sorry about the delay. Love the new behaviour. However, I also notice that error markers don't show up until Gometalinter has finished running, which, as you know, can take a while. (I've tried disabling the slowest linters, but it's still very resource-intensive.) In my opinion, with this new behaviour, there's no point in waiting for Gometalinter, since it won't override any of the error markers.. @ramya-rao-a The change caused format-on-save to no longer happen. I have\u00a0editor.formatOnSave disabled and go.formatOnSave enabled. It worked before, is this a breaking change?. I just rebooted, and after this, VSCode is now linting Go itself!\n```\nFinished running tool: /usr/local/opt/go/libexec/bin/go build -i -o /var/folders/qs/wpmg19r12_9_nz7pvvs2_82r0000gn/T/go-code-check github.com/sanity-io/gradient/pkg/server\nFinished running tool: /Users/alex/.go/bin/gometalinter --concurrency=2 --disable-all --enable=unused --enable=vet --enable=vetshadow --enable=structcheck --enable=goconst --enable=gotypex --enable=ineffassign --enable=golint --enable=deadcode --enable=unconvert --enable=gotype --enable=interfacer --exclude=.pb.go --exclude=or be unexported --exclude=that.stutters --exclude=don't use underscores --exclude=.nolint.go --tests --aggregate\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:47: unused struct field undeclared name: lookupGroup (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:190: unused struct field undeclared name: cgoLookupPTR (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:47: undeclared name: lookupGroup (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:123: undeclared name: cgoLookupCNAME (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:58: unused struct field undeclared name: listGroups (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:53: unused struct field undeclared name: lookupGroupId (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:107: unused struct field undeclared name: cgoLookupPort (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/crypto/x509/cert_pool.go:38: unused struct field undeclared name: loadSystemRoots (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/crypto/x509/root.go:21: unused struct field undeclared name: loadSystemRoots (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:58: undeclared name: listGroups (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/crypto/x509/cert_pool.go:38: undeclared name: loadSystemRoots (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:32: unused struct field undeclared name: lookupUser (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:41: unused struct field undeclared name: lookupUserId (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:95: unused struct field undeclared name: cgoLookupIP (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:123: unused struct field undeclared name: cgoLookupCNAME (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:32: undeclared name: lookupUser (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:95: undeclared name: cgoLookupIP (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:190: undeclared name: cgoLookupPTR (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:11: unused struct field undeclared name: current (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:80: unused struct field undeclared name: cgoLookupHost (structcheck)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:11: undeclared name: current (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:41: undeclared name: lookupUserId (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/os/user/lookup.go:53: undeclared name: lookupGroupId (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:80: undeclared name: cgoLookupHost (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/net/lookup_unix.go:107: undeclared name: cgoLookupPort (interfacer, unconvert)\n/usr/local/Cellar/go/1.9.2/libexec/src/crypto/x509/root.go:21: undeclared name: loadSystemRoots (interfacer, unconvert)\n[...]\n```\nI've verified that Gometalinter is run from the right directory. If I cd\u00a0to that directory and run the exact same command line, I get the right linter output. Reverting to the released version fixes the problem, so this must be an unreleased breakage.. Got it, thanks.. I just installed the .vix and restarted VSCode again. It's back to linting the right things. Weird!. @ramya-rao-a Ugh, it happened again, and I figured out why. It turns out VSCode is (sometimes!) sets PATH=/usr/bin:/bin:/usr/sbin:/sbin, which doesn't include Go itself (I use Homebrew, and I have a much longer PATH). Gometalinter lints the wrong things when it doesn't have Go, and I've created an issue about that, but of course VSCode should also set the right $PATH. It just happened again, and I restarted VSCode, and the $PATH is right again. Could this be caused by the Go extension?. Is there another explanation for why PATH is sometimes wrong? It only seems to affect Gometalinter. It also only started happening after I installed your .vix file. I've confirmed that the subprocess gets the wrong environment; it's not a bug in Gometalinter. Want me to create a separate issue?. Yes \u2014 errors without a line number can be associated with line 1, in my opinion. Not ideal, but better than no error at all. I use \"go to next marker\" to find the next error to fix, and obviously the import cycle error doesn't show up that way.. Awesome -- thanks, @ramya-rao-a!. Hooray!. Wondering if it's worth resurrecting this. Often you do work on a main package, and if you do, compilation accidentally becomes much slower because\u00a0-i isn't used. \nThis behaviour wasn't clear to me, and so I didn't understand why my builds were getting super slow. I work on a tool that pulls in the Kubernetes client, which is huge and takes a long time (10-20 seconds with something like 4 parallel processes) to compile, and this is executed on every save. (At one point my entire machine stalled because a thundering herd of 20-30 compile processes were suddenly running, though I've not been able to reproduce this. Does the Go extension kill the in-flight compile on the next save?) But if I compile with -i, it takes 2 seconds to build.\nWhy can't -i be used for all builds? It seems to combine just fine with -o. As I understood the above discussion, the problem is that this will also install the binary, but couldn't we simply use -o /dev/null to avoid this?\n. Awesome. Any reason it's writing to a file and not /dev/null? Windows compatibility?. I discovered that there's also an icky race condition where undo is screwed up if you apply any edits before the formatter comes back. If this happens, something odd happens where if you undo, you can't redo to the newest change.\nThe formatter often takes 2-5 seconds on my machine (no idea why, I have a fast machine and it's not doing anything else; the files are often a thousand lines long, but that shouldn't cause slowness?) and of course I'm happily editing in the meantime.\nI think the only sane thing is to ignore the formatter's output if you've made edits since it started.. Well, it's not consistent. Go's tools sometimes misbehave \u2014 like godef\u00a0using 100% CPU and having to be killed, or the gocode daemon crashing. The above formatter slowness might be related to a problem where goreturns would panic with a stack overflow (after a few seconds), something I discovered a while back and fixed with a go get -u. But I forget whether I wrote the above issue before or after that.\nI think VSCode should work consistently even if the formatter is slow, though.. I realized the behaviour I mentioned earlier isn't limited to a slow formatter, either. Steps:\n\nMake a change.\nSave.\nUndo the change.\nSave.\nRedo now doesn't work.\n\nThis is presumably because the formatter kicks in and adds a new operation on the stack, which effectively truncates the stack.\nI've been burned by this a few times now, and lost changes as a result: I make an experimental undo and save, thinking I could redo to get back where I started, which isn't possible. From my perspective this is a major bug.. I understand. It's weird that VSCode doesn't allow an extension to order the matches. Surely VSCode doesn't know what the items mean, so it can't order them appropriately.\nThis issue also affects \"Go to Symbol\" (@) \u2014 imports come before declarations/definitions \u2014 although that's evidently because it lists stuff in declaration order. But if start typing stuff to fuzzy match, there's pretty much no reason imports should ever come above definitions. Deserves separate issue, perhaps?. Forgot to say: Turn off go.autocompleteUnimportedPackages helps a lot, thanks.. Yep to both. Imports in \"Go to Symbol\" do seem pretty useless.. I recommend reversing it: go.autocomplete.includeImports or whatever, set to false by default. If people like the old behaviour, they can turn it on.. I was actually talking about the same thing, ignore the reference to autocompletion. Surely go.ignoreImports is too vague a name for that setting, though.. Superb, thank you.. Yay!. Yep, I see the challenge. Does it really not have access to the Go AST at that point? The syntax highlighting knows exactly what semantic\u00a0context you're in, so it seems like a bit of a missed opportunity if nothing can take advantage of the same information.\nI'd assume/hope that VSCode's automatic {} insertion (or other things like quote insertion, for example) was based on semantic information, but it sounds like it's purely textual?\nCould something like this become possible if there were a Go language server that used the standard language server protocol?. That's great. Looking forward to it.. This works fine:\n$ gorename -offset pkg/search/plans/plans.go:#1691 -to ConstantValue\nSince I couldn't figure out how to see the command that vscode-go runs, I replaced gorename with a shell script that logs to a file. It's running:\ngorename -offset /Users/alex/.go/src/github.com/sanity-io/gradient/pkg/search/plans/plans.go:#1691 -to ConstantValue -tags \"\"\nand it's doing so from /.\nIf I do this from the command line, I get tons of errors:\n$ cd /; gorename -offset /Users/alex/.go/src/github.com/sanity-io/gradient/pkg/search/plans/plans.go:#1691 -to ConstantValue -tags \"\"\n/Users/alex/.go/src/github.com/sanity-io/gradient/pkg/search/elasticsearch/querysource/scenarios_test.go:11:10: could not import github.com/olivere/elastic (cannot find package \"github.com/olivere/elastic\" in any of:\n    /usr/local/opt/go/libexec/src/github.com/olivere/elastic (from $GOROOT)\n    /Users/alex/.go/src/github.com/olivere/elastic (from $GOPATH))\n/Users/alex/.go/src/github.com/sanity-io/gradient/pkg/search/elasticsearch/querysource/source_test.go:10:2: could not import github.com/olivere/elastic (cannot find package \"github.com/olivere/elastic\" in any of:\n    /usr/local/opt/go/libexec/src/github.com/olivere/elastic (from $GOROOT)\n    /Users/alex/.go/src/github.com/olivere/elastic (from $GOPATH))\n/Users/alex/.go/src/github.com/sanity-io/gradient/pkg/search/elasticsearch/querysource/source_test.go:24:18: undeclared name: elastic\n[... etc ...]\nSo it's evidently because the command is run from the root. Bug in gorename that causes it to ignore vendor if it's not in $PWD, maybe?. But as I pointed out above, it is actually running gorename in / (which is not my workspace root!). Running the command from the workspace root works fine.. The code isn't public yet, but I email it to you privately.. Turns out my gorename was old. Sorry about the noise.. I should add that this isn't just about imports. My changes don't seem to take effect until the formatter has run. I frequently end up running tests on the unsaved versions because of this latency.. > You mean you end up running tests on the unformatted versions?\nYes, I think that's what's happening (it's been a while since I filed this issue). Since I'm using goimports as the formatter, tests will sometimes run without imports that haven't been added yet.. Further information: This only happens if editor.formatSave is enabled.. I wasn't able to, but I will try again. Autosave, no.. Oh yeah, it happens even with go.formatOnSave set to false for me to. That points to a non-Go-extension-related bug, does it now?. No, I can't. Does it happen with the Go extension disabled?. Thanks, I created an issue.. Thank you!. There's some discussion about the \"-i\" flag here: https://github.com/Microsoft/vscode-go/issues/673. The documentation is pretty lacking.\n\nOn Jun 3, 2017, at 17:10, Matt Aimonetti notifications@github.com wrote:\nI was under the impression that -i was also installing the executable when\nbuilding a main package. I might be wrong and it would be worth testing (on\nmy cellphone).\nOn Sat, Jun 3, 2017, 13:25 Ramya Rao notifications@github.com wrote:\n\nWhat's the reason for not running with -i by default\nFor go build -i part follow the discussion in #673\nhttps://github.com/Microsoft/vscode-go/issues/673\nFor why we don't do that for \"main\" package, see #673 (comment)\nhttps://github.com/Microsoft/vscode-go/issues/673#issuecomment-272039570\nspecifically.\n@mattetti https://github.com/mattetti The docs for go build -i says\n\"The -i flag installs the packages that are dependencies of the target\". As\nin only the dependencies are installed (if changed), in which case, do we\nstill have to skip the -i for the main package?\nMy reason for opening up this ticket is that I wanted a way to try and\ndeduplicate the linter errors. I think --aggregate gets us a long way there.\nOh definitely, for the purpose of this ticket using --aggregate solves\nthe problem, and I can add that as a default while running gometalinter.\nI personally don't do a lot of Go coding, so when there is an opportunity\nlike this to discuss and understand the process more, I don't let go of\nthat :)\nI understand the reasoning behind \"don't run linters if it doesn't\ncompile\" but I don't think that's a workflow that should be enforced\nYes, when I do get around to working on #600\nhttps://github.com/Microsoft/vscode-go/issues/600, it would be via a\nsetting and not enforced by default.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1013#issuecomment-305999416,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAAcefG-Lmqk5u6ptMCvg02M9KI7WwWks5sAcFRgaJpZM4Npnxb\n.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. Sorry, I now see that this issue was actually referenced above. . @ramya-rao-a I noticed that if you enable Gometalinter, go tool vet\u00a0is still run on save. But Gometalinter's default set of linters include vet, so unless one has messed with the linter args, this is redundant. I suggest that vet is automatically disabled if you're using Gometalinter.. @ramya-rao-a While true, it's also probably true that a lot of people have both enabled without realizing it. I think it's worth re-evaluating the whole thing, to be honest.\n\nI'm not sure I understand why there's a go.vetOnSave when go.lintOnSave exists. Surely go tool vet is just another a linter, and if you want linteing, you want to choose a single one. Having both vet and Gometalinter introduces potential duplication and inefficiency. And the Go extension is already chock full of tools that are run that slow everything down.. Apologies, Safari autocompleted the URL and I didn't notice where I landed.. That sounds like a good solution. I didn't know about the editor.quickSuggestions setting, thanks.\nOn 19 October 2017 at 20:45:58, Ramya Rao (notifications@github.com) wrote:\n\nThere are multiple layers at play here\n\nCompletions do not appear as you type when inside comments. This is a VS Code feature. \nYou can tweak this by editing the editor.quickSuggestions setting\nWhen you do force a autocompletion, the Go extension intentionally does not invoke \ngocode for suggestions when typing inside a line comment as it was considered as noise \nFunnily gocode does get invoked when you are inside a block comment. This is because \nthere was no simple way of figuring out the start and end of the block comment without parsing \nthe whole file contents\n\nOne solution I have in mind is to invoke gocode for line comments if editor.quickSuggestions \nsupported comments. i.e if editor.quickSuggestions was set to true or editor.quickSuggestions.comments \nwas set to true, then the Go extension will return suggestions when inside comments. \nOr we will have to introduce a new setting just to enable suggestions inside comments \nThoughts?\n--\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Microsoft/vscode-go/issues/1291#issuecomment-338075918 \n\n. Thanks, @ramya-rao-a!. @ramya-rao-a Any opinion?. Super, thanks.. I'm hitting the same problem, and had to increase the timeout. It seems to have appear after upgrading to Go 1.11. Here's for a small (300 lines) file:\n[Extension Host] Formatting took too long(786ms). Format On Save feature could be aborted.\n[Extension Host] Formatting took too long(2826ms). Format On Save feature could be aborted.\n[Extension Host] Formatting took too long(785ms). Format On Save feature could be aborted.\n[Extension Host] Formatting took too long(769ms). Format On Save feature could be aborted.\n[Extension Host] Formatting took too long(895ms). Format On Save feature could be aborted.. I'm using modules, yes. My formatter is goimports.. Awesome!. @ramya-rao-a Until this is fixed, how do I make the github.com/heschik/goimports fork work with Go 1.11 and modules?\nI installed the fork, and via ps I can see that it's being executed (goimports -srcdir <file>). If I run it manually on the command line, it works, and correctly adds missing imports. But inside VSCode, while the code is formatted correctly, imports are never automatically added.\nI don't understand why the tool would behave differently in the shell, vs. inside VSCode. My environment should be identical.. ...Looks like it's because VScode runs goimports from a different directory. goimports only works if invoked with the current working directory set to the root of the module. I bet this also applies to the official goimports tool, once fixed. (go get also works differently if invoked inside a module, vs. outside. I don't like that.)\nEdit: I wrote a little wrapper script that sets the right $PWD, and I can confirm that it works.. Yes, the parent directory of the file is the most appropriate. I've confirmed that it works correctly for subdirectories under a module.\nThis comment is relevant to the above. Not sure if goimports will be fixed, or if it will require the right working directory.. Fix confirmed. \ud83c\udf89 Thank you!. I understand the problem, but is that relevant to goimports and formatting? If we only consider Go modules (not pre-modules GOPATH or vendor), I see two use cases:\n\n\nYou run goimports on a module within your own tree. In this case, go env GOMOD is always the next parent in the file system that has a go.mod, as I understand it.\n\n\nYou do a \"jump to definition\" and end up in a file outside your project, presumably inside the module cache. But you're not going to be running goimports on that code anyway. But if you did, it would resolve imports relative to that module, by finding the parent module, which would be correct. You wouldn't want that to resolve imports relative to the module in which you jumped from.\n\n\nAre there other use cases?. The workspace will be the wrong directory if the file being formatted is in a sub-module. E.g. you have /go.mod and /src/sub/go.mod, and the file being formatted is /src/sub/main.go. In this case, /src/sub is the right directory.\nIn my opinion, from what I understood of @ianthehat's explanation, the directory of the current file will always work for us when formatting with goimports. This won't work if you open something in the module cache, or something outside of a module. But then goimports will still work, it will just not be able to automatically add new imports.\n. ",
    "wudidong": "thinks!\ni am delete golang.org/x/tools is ok\n. ",
    "voigt": "I've got exactly the same issue. Also installed delve via brew.\n```\n$ pwd\n/Users/cv/golang/src/github.com/voigt/main\n$ cat main.go\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Printf(\"Hello, world.\\n\")\n    fmt.Printf(\"Hello, world1.\\n\")\n    foo()\n    fmt.Printf(\"Hello, world2.\\n\")\n    fmt.Printf(\"Hello, world3.\\n\")\n}\nfunc foo() {\n    bar := \"Bar!\"\n    fmt.Println(bar)\n}\n```\nlaunch.json:\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug Local\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"/Users/cv/golang/src/github.com/voigt/main\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\n- nothing in debug console\n- its not possible to stop \"debugging\"; Killing the window is helping.\n- ${workspaceRoot} doesn't change anything.\n- red break points turn grey (unverified breakpoint)\n. ",
    "vanackere": "I don't thing vscode-go should interact with user GOPATH at all. Installing packages there automatically is not a nice behaviour, but automatically deleting directories there would be even worse (what if the user has installed those packages for other uses ?).\nIMHO the right fix would be to use a temporary GOPATH (under /tmp or %TEMPDIR%) to build the binaries and copy them somewhere under the .vscode directory. The temporary GOPATH could then be safely deleted.\n. ",
    "dsbert": "@ramya-rao-a \nSomehow PATH and GOPATH were reset between the time I opened the terminal session and the time I launched vs code. After fixing that, the extension is correctly detecting GOPATH.\n. ",
    "skybrian": "Never mind, this was due to a local issue.\n. For what it's worth, a third option is:\n\nNonrecursively check that there is a child of the opened folder named \"src\".\n\nThat should only require one file stat.\n. In case it matters, I have file.autoSave on. Here are my preferences:\n```\n{\n    \"[plaintext]\": {\n        \"editor.quickSuggestions\": false,\n        \"editor.wordWrap\": \"bounded\"\n    },\n\"editor.stablePeek\": true,\n\"files.autoSave\": \"onFocusChange\",\n\"go.coverageDecorator\": \"gutter\",\n\"go.coverageOptions\": \"showUncoveredCodeOnly\",\n\"go.inferGopath\": true,\n\"go.lintOnSave\": \"off\",\n\"go.toolsGopath\": \"/Users/skybrian/go/tools\",\n\"go.useCodeSnippetsOnFunctionSuggest\": true\n\n}\n```\n. ",
    "northtyphoon": "@shuqizhao I was able to debug beego controller using the launch.json below\nhttps://github.com/Microsoft/vscode-go#optional-debugging\nYou may want to check if you hit the delve issue in macOS Sierra.\nhttps://github.com/derekparker/delve/issues/645 . ",
    "ksmithut": "Can that editor.formatOnSave be applied on a per-language basis? I would love that setting for go, but not for javascript\n. ",
    "thnt": "I think you should keep go.formatOnSave until Microsoft/vscode#13547 has been resolved\n. ",
    "dbudworth": "agreed on it needing to be a language specific thing.\nAll go editors format on save as it's expected by the community that you have ran your code through \"go fmt\"\nthat is not expected by folks in other languages in general.  If I formatted javascript on save, i'd have a lot of really annoyed co-workers.\nAs it stands, I basically can't use vscode as my go editor as I'm so used to format-on-save that I don't even think of formatting.\nAnd, being a child of the DOS era, I habitually save as I move around looking at files.  So having javascript code that I have no intention of changing get reformatted as a side effect of 25 year old muscle memory is kind of a non-starter.\n. ",
    "ishanray": "editor.formatOnSave makes gofmt take almost a second to finish.. ",
    "cyli": "I get the same, and also multiple goimport processes that take up a ton of CPU.  They remain even after I quit visual studio.\n. Hmm... I did reinstall that list of tools from that issue, including specifically godef and goimport.  Maybe I've missed some others.  Thanks!\n. I reinstalled gometalinter and all of its dependencies, not just the ones in that list, and that seems to have fixed the issue.  Thanks!\n. ",
    "mattcui": "@ramya-rao-a I never met the problem again after update go tools, closing this issue. Thanks.\n. ",
    "cookieo9": "Off the top of my head, the most reliable way to tell if a compiler supports go 1.6 features is to compile a file with a build rule checking for the go1.6 build tag. It's too bad go env doesn't export the list of default build tags.\nIn another place in the code, the version value is being checked if it exists before using the fields. The simplest solution would be to do the same to prevent the exception from happening, since the check is only about telling the user to install goMetaLinter manually if they want golint-like features because golint doesn't support go <= 1.5. \n. @ramya-rao-a Thanks, I'm back up and running too.\n. ",
    "krum110487": "so I have something like this:\n/usr/me/projects is my folder that holds all of my projects\nbut as of now I have a \"project\" folder inside to differentiate src folders.\nso I have /usr/me/projects/projectGroup/src/site/project/go-project1\nThe idea was for me to keep all of my go projects separate as I don't want just 1 single path. I have read it can be a pain for a lot of projects to have the same path (although this is something that seems pretty heavily debated when it is brought up)\nWhat I do is I set my gopath to /usr/me/Projects/projectName then open visual studio code, and everything works fine. Then without closing visual studio I update my gopath to the other project and change the folder. Of course vscode isn't picking up the new variables as it is using the ones it started with (which I understand why, just curious if there is a work around)\nHmmm, multiple workspaces might work for me, assuming I don't have repeat names (which I shouldn't) and that should keep them separate as I expect. I do like the changing manual to know what I am working on right now, but for the sake of vscode working, it may be just fine. If I were to manually change the settings file for vscode so that go.gopath is set to override with a value, would it be possible to use that over the environment variable, it would be a nice feature. What I notice right now is that go.gopath setting is ignored when $GOPATH exists.\nmaking the go.gopath have a flag like go.pathOverride:\"true\" then it would allow the commands to work off of multiple paths while my terminals will be using whatever the latest $GOPATH is, which is fine. So visual studio code and all of its tools to vet the code should work transparently.\nI will most definitely look into multiple paths on $GOPATH and what the pros and cons are for me.\nWorst case scenario I can get along fine with restarting vscode, I am just not sure if this is desired functionality or I am simply using go incorrectly.\n. Hmmm, this is strange, I cannot seem to replicate my error, I change my $GOPATH to \\usr\\me\\Projects which is a folder that should not work, Then I removed the go.path settings and restarted VSCode and there are no errors with my imports, it even shows the correct location.\nThis is a bit baffling to me, I have no idea where it is getting the location from, is there a way to determine how the gopath is being resolved, from everything I know it should not be possible. I will try playing around with it to see if I can break it, because it seems like it should not be working, but it is throwing no errors right now. (but it should be)\nUpdate:\nafter removing the .vscode folder and going to the other project, then back to this project it is now erroring as I expect. I will see if I can reproduce this.\n. Yea, I get how it is supposed to work, but I removed the go.gopath setting and it still wasn't erroring. It didn't error until I removed the .vscode folder and all the settings inside. I will see if I can reproduce the issue as it is acting a bit funky for me.\n. Correct, I did do that, I am working on seeing if I can re-create the weirdness that was occurring.\nWhoops, didn't mean to close the issue, but if I can re-create the issue I was having I will post.\n. Here are the steps to reproduce the funky things I have seen:\n1. Set the $GOPATH to an invalid location that should error\n2. Open VS code, it should error as expected\n3. Add a workspace settings file on the command line\n4. In the workspace settings file add \"go.gopath\":\"valid path\"\n5. Save the settings, then change the code that was erroring and save it to have it run the tools\n6. Change the go.gopath to an invalid location, save the settings file\n7. Change the program in question and save\n8. Close VS code and re-open it\n9. Notice it is still passing just fine, and using the correct paths.\n10. Remove go.gopath completely leaving the blank settings file, it should consist of { }\n11. Save the setting file, edit the code and save it, notice it still does not error.\n12. Re-open VS code and it should start failing as expected again.\n13. Take the blank file and make it match exactly to this:\n{\n\"go.gopath\":\"invalid\"\n}\n14 . It started passing for me again, even though the go.gopath is completely wrong, restarting doesn't fix it.\nSomething weird is happening with the go.gopath when it comes to persisting the gopath that last worked. \n. I believe I am using the latest, I will check when I get home today.\nI had the output window with the GO channel on the entire time, it was showing up and not having errors.\nI am testing this specifically with an invalid import, so maybe that changes things?\nas a background, I used apt-get to install vscode, then upgraded it in the program, then installed go plugin and upgraded it. I am running Ubuntu 16.04 LTS.\nI installed the tools manually to my own folder and added that folder to my PATH so they can be accessed, instead of having them in my direct path on my workspace.\n. I was working on this a bit today, and it seems 1.7.1 and the the latest go extension as of today is working exactly how I expect.\n. ",
    "kulshekhar": "I stopped using gb a few months after creating this issue so I don't have anything right now to test this with. However, I'll set a quick project up on the weekend and will post the findings back here.. I was unable to install the extension.\n~/tmp $ code --install-extension Go-latest.vsix\nError: end of central directory record signature not found\n    at /usr/share/code/resources/app/node_modules/yauzl/index.js:183:14\n    at /usr/share/code/resources/app/node_modules/yauzl/index.js:618:5\n    at /usr/share/code/resources/app/node_modules/fd-slicer/index.js:32:7\n    at FSReqWrap.wrapper [as oncomplete] (fs.js:629:17). Linux Mint 18.2 (~Ubuntu 16.04). All things considered, fmain and init seem like the most apt options\n. Given that 'test function' uses tf and 'goroutine function' uses gf, maybe the main function can use mf while the 'init' function can use init (if might not be the best choice :slightly_smiling_face:)\n. ",
    "murugan100": "Installing extension is throwing error\n\nwget https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\ncode --install-extension ./Go-latest.vsix \nError: end of central directory record signature not found\n    at /usr/share/code/resources/app/node_modules/yauzl/index.js:183:14\n    at /usr/share/code/resources/app/node_modules/yauzl/index.js:618:5\n    at /usr/share/code/resources/app/node_modules/fd-slicer/index.js:32:7\n    at FSReqWrap.wrapper [as oncomplete] (fs.js:629:17)\n. Ubuntu 17.04. Installing from the cloned repo works.. \n",
    "wy3148": "@ramya-rao-a \nThank you , I verified again,\nmy env is mac os, 10.11.6 , 64 bit, latest vs and go extension,\n it looks like it is about some specific go func I implemented in my project, it shows 'no result', for some functions I 'm able to find references, see attached screenshots. \nSo it kinda works, but maybe not always, I'm not sure.\n\n\n\n. no, I didn't.\nI think I can close this issue, I think one of the possible reason I didn't get the reference is some functions are having same name but different input arguments (means actually they are different go funcs), in this case , VS returned \"no results' when I tried to search, and the go func i searched was not called in anywhere.\n. ",
    "mukeshdutt": "@ramya-rao-a  now I'm able to download.\nThanks.\n. @ramya-rao-a Sorry for the delay in my case I'm sending dynamic value(variable) instead of hard coded.\nAnd now i changed go.docsTool value to gogetdoc after change this gogetdoc plugin was downloaded then again same go.useLanguageServer value to true after change the value same as go.useLanguageServer plugin tried to download but getting failed message.\n. ",
    "GordonSmith": "There is no 0.6.45 (I had a typo in my comment above - now fixed).\n. Yup did the whole npm install/clean re-install thing, like I say it works on the older fork, but not on master (my version anyway - going to double check current master for sanity).\n. Hmm working on current master - going to close as invalid while a diff my changes again - thx for looking into it.\n. ",
    "franciscocpg": "Sorry, I didn't realize that I opened this issue at the wrong repository. \n Here is the right one:\nhttps://github.com/Microsoft/vscode/issues/14566\n. https://github.com/Microsoft/vscode-go/issues/1533#issuecomment-368915785 worked for me.\nThanks @lzelevinsky.. ",
    "mousetraps": "\"everything else\" == all other keywords :smiley:\nRe: the issue linked to (nsf/gocode#312) doesn't seem to provide much of a reasoning as to why there are no completions for keywords - just says that there are no completions. May be worth considering contributing upstream because otherwise this behavior is inconsistent w/ the rest of the language services we integrate with\n. Thanks, that fixed it! Is that documented somewhere? (other than here?) Also may be worth adding a settings.json option so that it's clearer that it's a dependency. \n. I was thinking that the path to the diff tool could be an option in settings.json in order to improve discoverability to a user that that's something they may want to install. But it sounds like it's not the vscode-go extension, but rather one of its dependencies (gorename) that flakes out when the diff tool isn't there. So maybe improved docs or auto-detection of some sort?\n. Ahh, turns out the reason the identifier was invalid was because it included the \"go\" keyword - I thought it was because of the dash. Closing as this edge case doesn't seem important enough to handle. \n. ",
    "octref": "Oh I see. Thanks!\n. ",
    "alandonovan": "Fixed by https://go-review.googlesource.com/c/32440/ (pending).\n. ",
    "sinhpham": "I have the same problem, is there any workaround? Or how can I downgrade to the previous version of the extension?\n. This commit looks suspicious https://github.com/Microsoft/vscode-go/commit/49388254f9467e0df71354770d3292d0fb7dd150\n. Yep the latest version fixed it for me. Thanks.\n. ",
    "soechin": "same problem.\n. 0.6.47 fixed, thank you.\n. ",
    "jeremywho": "Same thing for me on OS X.\n. ",
    "noxyal": "Same for me on macOS Sierra version 10.12.1\nAs far as workarounds, there aren't any, but you can still run the app normally (without the debugger):\n1) Open Integrated terminal (ctrl+`) \n2) Run the following command:\n\ngo run yourFileName.go\n\nThe recent macOS update seems to have created some issues for delve which might be related to this issue. See: https://github.com/derekparker/delve/issues\n. ",
    "Strum355": "Any ETA on this? PR was submitted, just awaiting review :). Im not sure how else we can reliably tell whether or not the cursor is in a raw string without scanning the file for how many backticks preceed the current cursor position. \nNaturally we have to not count the backticks that reside in single or multiline comments, hence we have to check for those states as well. Tried installing Go-0.6.85-beta.2, reinstalled all tools via the command, rebooted, but still no code completion list. Not even getting completions for variables or stdlib packages]\nEdit: stdlib packages seem to actually work, but its very slow to pop up\nEdit 2: autocomplete works overall! Its still very slow. @amsokol is it slow to give you autocomplete options for external/3rd party libs? Im on 0.6.85 as well with (what i believe) is latest mdempsky/gocode, and its still quite slow. @amsokol ah yes it works fast now! Just the issue of it giving incorrect/too many recommendations, for which there is already an issue ^^. @amsokol theres a PR for it https://github.com/mdempsky/gocode/pull/41. @ddrake17 the default lint program is golint, the slow one being gometalint. I dont believe (nor have i observed) that golint is slow, but i may give golangcli-lint a try :). @ddrake17 interestingly i just tried out golangci-lint, it was considerably slower than golint on my laptop. This may have something to do with the fact that golangci-lint aggregates results from multiple linters. The failing tests seem to be not related to my changes\nEdit: accidentally closed. ",
    "stamblerre": "@ramya-rao-a: yes, gopls will be able to handle that. Filed golang.org/issue/30477.. @ramya-rao-a: I haven't noticed any bugs being filed about it. I think the reason for null docs is because guru doesn't provide any docs for definitions, just the position information.. @ramya-rao-a: it's definitely something that we can do in gocode, and definitely would be easier to do there rather than having a regex in VSCode-Go. I'll take a look at it soon.. @ramya-rao-a: gocode tracks the build.Context of requests, so if you explicitly set GOOS and GOARCH in a client request, it should work correctly.. It seems like the broken build is a result of an error in \"fillStruct\", which I don't think is related to this change.. @ramya-rao-a - just wanted to follow up, does this change seem ready to you?. Thanks for merging @ramya-rao-a. I'll probably have a similar PR soon for you for godef. Let me know if there are any problems with it.. I'm not sure if this will help fully, but I just pushed https://github.com/stamblerre/gocode/commit/b960ec24cf795e8590198eb337c6286d5488e399, which should allow regular gocode and gocode-gomod run simultaneously. I'll try to keep using it though to see if I can find more problems.. I haven't been able to reproduce that yet, but I am using gocode-gomod right now and trying to see if I can get it to happen. If you run \"gocode-gomod close\" and then \"gocode-gomod -s -debug\", and then try a completion and see what it prints out, that might give some useful information. Thanks!. Oh, so is the only problem you're seeing related to completing with unsaved imports?. Ok, I will try to investigate this error and see if I can resolve it. Though this doesn't seem like a huge deal to me--the pretty simple solution is to add the import back. . @wolfeidau I wasn't able to reproduce using your case. The very first completion is a little slow, but after that, the stdlib was completing fine.. @ramya-rao-a The installation actually didn't work for me, I think because the \"allTools[tool]\" argument was deleted in this change (https://github.com/Microsoft/vscode-go/commit/094b704536e94a0f1f7a7bc0c13f62dcd3604e86#diff-3f57b095642b0ee445d6cdbc4f60d751).. gocode seems to work fine, but I wasn't prompted to install godef. I had to click \"Analysis tools missing\" and then I got the godef installation, but it still isn't letting me jump to definitions.. lol I was actually just doing that. But yeah, my bad--it totally works, I just have so many weird settings and different copies of tools all over my path. Cleaned it up and I get the prompt and the jump to definitions.. @ramya-rao-a thanks for reporting this. I just enabled issues and copied it to https://github.com/stamblerre/gocode/issues/3.. @JoseFMP, autocompletion that works for Go modules is currently in beta for VSCode (https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension). If you use that, imported packages should autocomplete.. @joaoferrao Did VSCode prompt you to install the gocode-gomod tool, and did you install it? There is a separate version of gocode that works specifically for modules.. @joaoferrao: Yep, just execute the following commands:\ngo get -u -d github.com/stamblerre/gocode\ngo build -o $GOPATH/bin/gocode-gomod github.com/stamblerre/gocode\nYou should end up with a tool gocode-gomod in your $GOPATH/bin.. @joaoferrao I'd recommend running gocode close and gocode-gomod close to restart gocode, just to be safe. Then, run gocode-gomod -s -debug and try to complete in VSCode. The debug output should be printed there, and if you paste it in here, I can try to investigate it.. @joaoferrao awesome, glad it works!. @zeeraw yep, this issue is tracked in https://github.com/stamblerre/gocode/issues/3. It's actually the result of a problem in the go/packages API that still needs to be solved. I will update on the issue once the go/packages API has fixed this problem.. @joaoferrao, I think this is probably a question for @ramya-rao-a?. @nezorflame: in the case where \"id\" had an invalid type, there appears to be a red underline beneath the import, so I wonder if that's related to the issue. \nI'm also not sure why gocode would behave differently depending on the location of the code, but I would guess that it's not switching between the module-unaware and module-aware versions of gocode correctly in these cases. VSCode-Go checks that value of go env GOMOD to decide which tool to use, so if you have GO111MODULE=on set, then it should work correctly. @ramya-rao-a, what do you think?. @ramya-rao-a: I am pretty sure that I can reproduce the issue, though my VSCode-Go settings are very strange at this point so it's possible I'm missing something. When I set GO111MODULE=on through my terminal, it started working, so I expect it must be something to do with propagating the go.ToolsEnvVars.\n@nezorflame: your issue is known and tracked by https://github.com/stamblerre/gocode/issues/3.\n@gencer: is this related to the bug you already filed here https://github.com/mdempsky/gocode/issues/84? Are you using modules? mdempsky/gocode does not support modules, so if you are experiencing issues with completion using Go modules, then it would be best to file a separate issue under stamblerre/gocode.. @shaodahong: that just means that your gocode server wasn't running. . @shaodahong: just to clarify, are you having the same problem as @nezorflame? When you open a file in a package that uses modules, which version of gocode gets started? Does gocode-gomod close work?. @shaodahong: what changed between this and your other comment (https://github.com/Microsoft/vscode-go/issues/2148#issuecomment-441901878)?. I found and fixed this issue with https://github.com/Microsoft/vscode-go/commit/c026b8c2362d7d0605c25bee24f19df88a208462, so if you follow the instructions to install the latest beta for VSCode-Go, you should be able to see the fix (https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension). Otherwise, the fix will be out in the next release.. There have been some instances where go list fails on broken code, and it seems like this is possibly such a case. A few things to ask - what is your $GOROOT, what is the result of running go env GOMOD, is the directory outside of your $GOPATH, and what is the output of go list -e -json -compiled?. Thanks for sending this. As I expected, the problem looks to be with \"go list\", as your imports should also like \"encoding/base64\" if you have that line in the file. Just to confirm - have you saved the file with the import in it?. If the user hasn't built their dependencies, then we really can't do better than using the -source flag. I've actually recently added a change to gocode that causes it to fall back to using -source if it can't find dependencies (https://github.com/mdempsky/gocode/commit/a07fefd98fdcd9d2c16aa3f61d8e89eda396bf99), so perhaps if you rebuild the latest version, that will work for you.. Merged from upstream (https://github.com/stamblerre/gocode/commit/6157820e3040d3c3c2ec126dc3858e44f301be82) so -unimported-packages is a no-op. Thanks for reminding me, and sorry for forgetting to keep track of that.. for gocode: this should be very easily doable for constants, but not for variables. Feel free to file an issue at the link @ramya-rao-a provided, or if you're interested in contributing, send out a PR.. @avence12: in your case, I notice that go env GOMOD is empty. Do you have GO111MODULE=on configured?\n@shaodahong: I added some additional logging to gocode-gomod in https://github.com/stamblerre/gocode/commit/02c18bb473cbc360355eb5eb1489792e98b97aca. Could you try syncing to head and pasting in the output of gocode-gomod -s -debug? Thanks!. @shaodahong: ok, so it seems like it's working for you actually. So I think your problem is probably the one being discussed on https://github.com/Microsoft/vscode-go/issues/1944, so let's move the discussion there.. @avence12: I don't think it should matter, but it's worth noting that you have a typo:\nFrom your go list output: Your Dir is set to \"/tmp/golang-exmaple\", and the \"ImportPath\": \"golang-example\". Do you mind fixing it and trying again? I don't think it's the error, but worth checking. Thanks.. can you try go list -json -compiled /private/tmp/golang-example?. Also, I just made a small change, so if you can try syncing to head again, it might fix the issue. (Remember to run gocode-gomod close when you restart.). https://github.com/Microsoft/vscode-go/issues/1944 is working for me.. This is likely a result of https://github.com/mdempsky/gocode/issues/84. The current suggested workaround is running go install -i ./vendor/..., which should install all the dependencies in the $GOPATH/pkg folder, which is where gocode expects them to be.. @fabianem: Do you mind posting the output of gocode -s -debug? If you have those .a files, then gocode should work. Also, feel free to file an issue on the gocode repository.\n@DOTA2mm and @Cimsystemsthai: Since your issues are not with dep or modules, I would request that you please create new issues, as it seems that you are encountering potentially different problems. Feel free to file them on gocode repository, as it sounds like VSCode-Go is not the problem.. @mxxcx: is your Go project very large?. I expect the delay you are seeing is a result of the speed of go/packages on large codebases. This is something we're working on, but unfortunately it's not a specific result of gocode. Hopefully, we will have a fix for this soon, and I apologize for the latency issues.. Yes, @ramya-rao-a is right - these are client-side flags, so VSCode-Go is passing them in per-request.. This looks great, thank you for doing this! The only thing I noticed is that with gopls, you will want to disable vet on save as well as build on save, since gopls also returns vet errors.. Latest changes should fix this - if guru is set as the docsTool, I just passed in a config object with \"godoc\" set as the docsTool for provideHover and provideSignatureHelp.. Only \"go build\" has the -o flag that allows us to rename the binary to \"gocode-gomod\" instead of gocode, so I don't think there is a way to \"go get\" and rename the tool with one command.. Yep, but it's an open to add support for other packages. Hopefully I'll have a chance to add that soon.. One package is prioritized and the results for it are returned - so in this case html/template is used instead of text/template (https://github.com/mdempsky/gocode/blob/master/internal/suggest/stdlib.go).. ",
    "i5on9i": "Me, either. I've just installed Go plugin, but it doesn't work with the error message like the \"andiyudistira \" said\nGo ver. : amd64 go 1.7.3\nwindows : windows 10 64bit\ndlv version : 0.11.0-alpha\nmessageService.ts:128 Debug adapter process has terminated unexpectedly: Error: Debug adapter process has terminated unexpectedly\n    at Object.f as create\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:122:4977\n    at Object.v as _notify\n    at Object.enter (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:12054)\n    at _run (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:13375)\n    at _chainedError (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:12734)\n    at n (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:10557)\n    at then (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:14184)\n    at Object.enter (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:10626)\n    at _run (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:13375)\n    at _setCompleteValue (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:31:13069)e.doShow @ messageService.ts:128e.show @ messageService.ts:107(anonymous function) @ actionRegistry.ts:156done @ winjs.base.raw.js:1378v @ winjs.base.raw.js:1224enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_chainedError @ winjs.base.raw.js:1031n @ winjs.base.raw.js:736then @ winjs.base.raw.js:1436enter @ winjs.base.raw.js:747_run @ winjs.base.raw.js:1068_setCompleteValue @ winjs.base.raw.js:1052v @ winjs.base.raw.js:1209enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_chainedError @ winjs.base.raw.js:1031n @ winjs.base.raw.js:736then @ winjs.base.raw.js:1436enter @ winjs.base.raw.js:747_run @ winjs.base.raw.js:1068_setCompleteValue @ winjs.base.raw.js:1052v @ winjs.base.raw.js:1209enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_chainedError @ winjs.base.raw.js:1031n @ winjs.base.raw.js:736then @ winjs.base.raw.js:1436enter @ winjs.base.raw.js:747_run @ winjs.base.raw.js:1068_setCompleteValue @ winjs.base.raw.js:1052g @ winjs.base.raw.js:1170enter @ winjs.base.raw.js:852_run @ winjs.base.raw.js:1068_completed @ winjs.base.raw.js:1036then @ winjs.base.raw.js:1566enter @ winjs.base.raw.js:747_run @ winjs.base.raw.js:1068_setCompleteValue @ winjs.base.raw.js:1052v @ winjs.base.raw.js:1209enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_error @ winjs.base.raw.js:1041(anonymous function) @ v8Protocol.ts:59_cancelAction @ winjs.base.raw.js:1652enter @ winjs.base.raw.js:805_run @ winjs.base.raw.js:1068cancel @ winjs.base.raw.js:964_cancelAction @ winjs.base.raw.js:1311enter @ winjs.base.raw.js:805_run @ winjs.base.raw.js:1068cancel @ winjs.base.raw.js:964(anonymous function) @ rawDebugSession.ts:292(anonymous function) @ rawDebugSession.ts:292\n. i've posted errors here again,\nand, i didnt set the port.\ni used the config like the below\n{\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": []\n},\n\n. cool~ it works well , thanks @ramya-rao-a \n. ",
    "andiyudistira": "Cool, it works fine now thanks @ramya-rao-a \ud83d\udc4d \n. ",
    "aphistic": "This is really inconvenient.  There are only certain languages I would want auto formatting for and I don't want to turn it on completely just to have my Go code auto-formatted.\n. Thank you!\n. ",
    "didrocks": "Not exactly. I have a state packages where I defined State, Transition, Action. I defined there Abc, and save the file.\nI do expect then that state.A would propose Abc in another file, which isn't the case. There is a race between Visual Studio Code and gocode, making the .a file not being regenerated, and so, no completion is proposed with the newly defined Abc.\n. I kept the default, which is set to true, indeed, should I turn it off?\n. ",
    "vscodebot[bot]": "This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. See also our issue reporting guidelines.\nHappy Coding!. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. This issue has been closed automatically because it needs more information and has not had recent activity. Thank you for your contributions.. ",
    "jcdickinson": "\nWhat version of Delve are you using (dlv version)?\n\n\nDelve Debugger\nVersion: 0.11.0-alpha\nBuild:\n2. What version of Go are you using? (go version)?\ngo version go1.7.1 windows/amd64\n3. What operating system and processor architecture are you using?\nwin10 64bit home anniversary\n. \n",
    "wildfire810": "The bug is report at Oct 2016\nNow it works right.\nAll of the versions are\ngo version go1.7.5 windows/amd64\nvs code 1.8.1\nvs code go plugin 0.6.52\ndelve 0.12.1\nIn any case, I am a microsoft fans, I love VisualStudio, I love C#, I love Windows.. ",
    "tunggiga": "I have the same issue, can you help me?\n\nWhat version of Delve are you using (dlv version)?\n\n\nDelve Debugger\nVersion: 1.0.0-rc.2\nBuild: $Id: 5c7676404d10d52e16be57fea744a7312b831f0c $\n\nAlso\n\nVSCode version: 1.17.2\nPlugin version: 0.6.65\n\n\nWhat version of Go are you using? (go version)?\n\n\ngo version go1.8.3 windows/amd64\n\n\nWhat operating system and processor architecture are you using?\n\n\nwin10 64bit\n\n\nWhat did you do?\n\n\nAt the debugging time (when the program is running and not paused), add/remove breakpoint\n\n\nWhat did you expect to see?\n\n\nadded breakpoint can pause, and removed breakpoint should pass\n\n\nWhat did you see instead?\n\n\ncontrary, the breakpoint is marked unverified with grey color, until restart debug, all that will be valid. @aarzilli I don't get it. Doesn't that link point to this repository?. \n",
    "aarzilli": "@tunggiga you'll probably have better luck reporting this to the vscode plugin. @tunggiga yep, my mistake.. @lggomez I think your problem is that the argument to CreateBreakpoint isn't wrapped, which means no breakpoint gets created and when you call the continue Command the program executes completely.\nI think that when we can't execute a request we return some kind of error response, you should probably print that.. > Do you have any test program that you use to test the debugger and may be willing to share?\nIf you want to manually run the tests we do automatically for delve:\nhttps://github.com/derekparker/delve/blob/master/service/test/integration2_test.go\nhttps://github.com/derekparker/delve/blob/master/service/test/variables_test.go\nlook for things that call withTestClient2 and withTestProcess in this two files. Also https://github.com/derekparker/delve/blob/master/_fixtures/testvariables2.go.. Detach is the intended way, if it doesn't remove the file on macOS it's a bug.. If you are passing Kill=true then yes.. I'd like to see the output of --log --log-output=rpc.. In @antihax logs I see that VSCode is sending a ListGoroutines request right after the continue command, that request is synchronous and can't be executed until continue terminates and will also block any other command from going through (including halt commands).. > That explains why the halt command never makes it through. Any reason why continue wouldn't terminate?\nThe program in question is an infinite loop, if the halt doesn't make it through it will never terminate on its own.. > @aarzilli You mean the program will not terminate on its own or the continue command?\nI mean both, if the program doesn't stop somehow the continue doesn't return either.\n\nWhat is the suggested way to go about this for delve clients?\n\nNot sending requests while the target is running.. > This doesn't seem trivial. There is no way way for the debug adapter to know if the target is still running.\nThe target is running from the time you make a Command request to the time you receive a response for it.. Yes.. Normally we'd like to send this type of exception back to the target program, the exception handler would then run and result in a panic, however because of a kernel bug we can't do this on macOS. See also this issue (but disregard the suggestion about using the native backend).\nOne possibility would be to add an option to debugserver to disable catching EXC_BAD_ACCESS on their side. If someone wants to start contributing to llvm that would be a useful thing to do.. A while ago we added two parameters to ListGoroutines that allow retrieving goroutines in smaller chunks (there is however a bug, see related PR).\nSame PR will also improve the speed of Eval, ListLocalVars and ListFunctionArgs.\nI think calling ListPackageVars at every step is probably a bad idea. If I were you I'd nix the globals view entirely (evaluating expressions is more useful anyway). An alternative is only showing variables for the current package, by calling ListPackageVars(Filter=\"^[curpkg]\") (however vendored packages will be a pain).\nI don't know why it's showing proc.go at every step, that looks more like a problem on your side.. I'd like to see the output of dlv --headless --listen 0.0.0.0:30010 attach 239910 --log --log-output=rpc 2>send-me-this-file.thank-you after connecting to it with VSCode.. I don't see a CreateBreakpoint request in the log you posted at all. All I see is VSCode requesting a list of all goroutines and then (probably) shutting down the receive end of the socket. This is the exchange truncated to 160 columns per line:\ntime=\"2018-12-17T12:59:47+08:00\" level=debug msg=\"(async 2) <- RPCServer.Command(*api.DebuggerCommand{\\\"name\\\":\\\"continue\\\",\\\"ReturnInfoLoadConfig\\\":null})\" lay\ntime=\"2018-12-17T13:00:02+08:00\" level=debug msg=\"(async 3) <- RPCServer.Command(*api.DebuggerCommand{\\\"name\\\":\\\"halt\\\",\\\"ReturnInfoLoadConfig\\\":null})\" layer=r\ntime=\"2018-12-17T13:00:02+08:00\" level=debug msg=\"(async 2) -> *api.DebuggerState{\\\"Running\\\":false,\\\"currentThread\\\":{\\\"id\\\":58062,\\\"pc\\\":4565539,\\\"file\\\":\\\"/u\ntime=\"2018-12-17T13:00:02+08:00\" level=debug msg=\"(async 3) -> *api.DebuggerState{\\\"Running\\\":false,\\\"currentThread\\\":{\\\"id\\\":58062,\\\"pc\\\":4565539,\\\"file\\\":\\\"/u\ntime=\"2018-12-17T13:00:02+08:00\" level=debug msg=\"<- RPCServer.ListGoroutines(<nil>null)\" layer=rpc\ntime=\"2018-12-17T13:00:05+08:00\" level=debug msg=\"-> *[]*api.Goroutine[{\\\"id\\\":1,\\\"currentLoc\\\":{\\\"pc\\\":4376938,\\\"file\\\":\\\"/usr/local/go/src/runtime/proc.go\\\",\\\ntime=\"2018-12-17T13:00:05+08:00\" level=error msg=\"writing response:write tcp 172.30.60.210:30020->172.30.60.1:56185: write: broken pipe\" layer=rpc\ntime=\"2018-12-17T13:00:05+08:00\" level=debug msg=\"<- RPCServer.Restart(<nil>null)\" layer=rpc\ntime=\"2018-12-17T13:00:05+08:00\" level=debug msg=\"-> *int0 error: \\\"cannot restart process Delve did not create\\\"\" layer=rpc\ntime=\"2018-12-17T13:00:05+08:00\" level=error msg=\"writing response:write tcp 172.30.60.210:30020->172.30.60.1:56185: write: broken pipe\" layer=rpc\nso far this looks like a problem on VSCode's side.. Never mind, I see that you posted the wrong long and edited the message. It's very strange that you are getting that message on the native backend but not on with the lldb backend. That error shouldn't really depend on the backend at all. Even stranger is that you say that it works with gdlv. I'm not sure what to make of this. Maybe also post the same log but with --backend lldb?. This is what that code compiles to (with optimizations disabled):\nTEXT main.main(SB) /home/a/temp/weird.go\n  weird.go:3        0x44f160        64488b0c25f8ffffff  MOVQ FS:0xfffffff8, CX          \n  weird.go:3        0x44f169        483b6110        CMPQ 0x10(CX), SP           \n  weird.go:3        0x44f16d        7647            JBE 0x44f1b6                \n  weird.go:3        0x44f16f        4883ec18        SUBQ $0x18, SP              \n  weird.go:3        0x44f173        48896c2410      MOVQ BP, 0x10(SP)           \n  weird.go:3        0x44f178        488d6c2410      LEAQ 0x10(SP), BP           \n  weird.go:4        0x44f17d        48c74424080c000000  MOVQ $0xc, 0x8(SP)          \n  weird.go:6        0x44f186        48c74424080d000000  MOVQ $0xd, 0x8(SP)          \n  weird.go:7        0x44f18f        e8dc4bfdff      CALL runtime.printlock(SB)      \n  weird.go:7        0x44f194        488b442408      MOVQ 0x8(SP), AX            \n  weird.go:7        0x44f199        48890424        MOVQ AX, 0(SP)              \n  weird.go:7        0x44f19d        e84e53fdff      CALL runtime.printint(SB)       \n  weird.go:7        0x44f1a2        e8594efdff      CALL runtime.printnl(SB)        \n  weird.go:7        0x44f1a7        e8444cfdff      CALL runtime.printunlock(SB)        \n  weird.go:8        0x44f1ac        488b6c2410      MOVQ 0x10(SP), BP           \n  weird.go:8        0x44f1b1        4883c418        ADDQ $0x18, SP              \n  weird.go:8        0x44f1b5        c3          RET                 \n  weird.go:3        0x44f1b6        e8657effff      CALL runtime.morestack_noctxt(SB)   \n  weird.go:3        0x44f1bb        eba3            JMP main.main(SB)\nNote how instruction 0x44f186, corresponding to line 6, is setting x directly to 0xd (13). Despite optimizations being disabled SSA could still determine x's value up to that point and constant fold the increment. You could open a bug on the go issue tracker arguing that disabling optimizations doesn't non-optimize the code enough, but I wouldn't hold my breath.. ",
    "dring1": "Was also able to reproduce this locally using v0.6.47, windows 10, Go 1.7.1\n. Removing all flags, no formatting is taking place. \nThis is my following config:\n\"editor.formatOnSave\": true,\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildTags\": \"\",\n    \"go.buildFlags\": [],\n    \"go.lintTool\": \"golint\",\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\":false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"go.formatOnSave\": true, \n    \"go.formatTool\": \"goreturns\",\n    \"go.formatFlags\": [],\n    \"go.gocodeAutoBuild\": false,\n    \"go.autocompleteUnimportedPackages\": true\nRunning go fmt . through a terminal will result in the file being formatted correctly.\nFrom the output panel I only see the following\n```\nFinished running tool: C:\\Go\\bin\\golint.exe\nFinished running tool: C:\\tools\\go\\bin\\go.exe tool vet c:\\Go\\src\\github.com\\dring1\\test\\test.go\nFinished running tool: C:\\tools\\go\\bin\\go.exe build -o C:\\Users\\DEVON~1.RIN\\AppData\\Local\\Temp\\go-code-check -tags \"\" .\n```\n. This appears to be doing the trick! Thank you!\nAlthough auto-import does not appear to be working ( if that is expected functionality)\nFinished running tool: C:\\tools\\go\\bin\\go.exe build -o C:\\Users\\DEVON~1.RIN\\AppData\\Local\\Temp\\go-code-check -tags \"\" .\nc:\\Go\\src\\github.com\\dring1\\test\\test.go:10: undefined: log in log.Printl\n. Can do, thank you for your help. \n. ",
    "DonMcNamara": "Thank you!\n. ",
    "jeffprestes": "Sorry, I am still facing same issue to debug my application with Delve\nI followed these steps: https://fresh-air.aerobatic.io/post/debug-golang/ but I am using a MAC\nI gave +x permission to vscode directories and to my application directory and same issue.\nCould you help me out to check where I should set the correct permission?. @ramya-rao-a for sure.\nFailed to continue: \"Error: spawn EACCES\"\nmessageService.ts:126 Failed to continue: \"Error: spawn EACCES\": Error: Failed to continue: \"Error: spawn EACCES\"\n    at Object.g [as create] (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:30:20765)\n    at file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:128:7799\n    at Object.v [as _notify] (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:13263)\n    at Object.enter (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:16768)\n    at _run (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:18089)\n    at _chainedError (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:17448)\n    at n (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:15271)\n    at then (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:18898)\n    at Object.enter (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:15340)\n    at _run (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:18089)\n    at _setCompleteValue (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:17783)e.doShow @ messageService.ts:126e.show @ messageService.ts:105(anonymous function) @ compositePart.ts:284r @ eventEmitter.ts:314e._emitToSpecificTypeListeners @ eventEmitter.ts:182e._emitEvents @ eventEmitter.ts:201e.emit @ eventEmitter.ts:216(anonymous function) @ actions.ts:231v @ winjs.base.raw.js:1209enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_chainedError @ winjs.base.raw.js:1031n @ winjs.base.raw.js:736then @ winjs.base.raw.js:1436enter @ winjs.base.raw.js:747_run @ winjs.base.raw.js:1068_setCompleteValue @ winjs.base.raw.js:1052v @ winjs.base.raw.js:1209enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_chainedError @ winjs.base.raw.js:1031n @ winjs.base.raw.js:736then @ winjs.base.raw.js:1436enter @ winjs.base.raw.js:747_run @ winjs.base.raw.js:1068_setCompleteValue @ winjs.base.raw.js:1052v @ winjs.base.raw.js:1209enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_error @ winjs.base.raw.js:1041(anonymous function) @ v8Protocol.ts:53e.dispatch @ v8Protocol.ts:136e.handleData @ v8Protocol.ts:104(anonymous function) @ v8Protocol.ts:41emitOne @ events.js:96emit @ events.js:188readableAddChunk @ _stream_readable.js:176Readable.push @ _stream_readable.js:134onread @ net.js:543\nindex.js:22 [uncaught exception]: Error: Unable to display threads: \"Error: spawn EACCES\"onError @ index.js:22(anonymous function) @ index.js:91emitOne @ events.js:96emit @ events.js:188window.onerror @ init.js:120i.globals.onerror @ errorTelemetry.ts:64\nindex.js:25 Error: Unable to display threads: \"Error: spawn EACCES\"\n    at rawDebugSession.ts:181\n    at Object.v [as _notify] (winjs.base.raw.js:1209)\n    at Object.enter (winjs.base.raw.js:901)\n    at _run (winjs.base.raw.js:1068)\n    at _error (winjs.base.raw.js:1041)\n    at v8Protocol.ts:53\n    at _.e.dispatch (v8Protocol.ts:136)\n    at _.e.handleData (v8Protocol.ts:104)\n    at Socket.<anonymous> (v8Protocol.ts:41)\n    at emitOne (events.js:96)\n    at Socket.emit (events.js:188)onError @ index.js:25(anonymous function) @ index.js:91emitOne @ events.js:96emit @ events.js:188window.onerror @ init.js:120i.globals.onerror @ errorTelemetry.ts:64\nrawDebugSession.ts:181 Uncaught Error: Unable to display threads: \"Error: spawn EACCES\"(anonymous function) @ rawDebugSession.ts:181v @ winjs.base.raw.js:1209enter @ winjs.base.raw.js:901_run @ winjs.base.raw.js:1068_error @ winjs.base.raw.js:1041(anonymous function) @ v8Protocol.ts:53e.dispatch @ v8Protocol.ts:136e.handleData @ v8Protocol.ts:104(anonymous function) @ v8Protocol.ts:41emitOne @ events.js:96emit @ events.js:188readableAddChunk @ _stream_readable.js:176Readable.push @ _stream_readable.js:134onread @ net.js:543\nshell.ts:541 Unable to display threads: \"Error: spawn EACCES\": Error: Unable to display threads: \"Error: spawn EACCES\"\n    at file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:90:21136\n    at Object.v [as _notify] (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:13263)\n    at Object.enter (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:16768)\n    at _run (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:18089)\n    at _error (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:32:17606)\n    at file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:85:1178\n    at _.e.dispatch (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:85:2523)\n    at _.e.handleData (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:85:2035)\n    at Socket.<anonymous> (file:////Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/electron-browser/workbench.main.js:85:1038)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)e.onUnexpectedError @ shell.ts:541(anonymous function) @ shell.ts:457e.onUnexpectedError @ errors.ts:68o @ errors.ts:88(anonymous function) @ winjs.base.js:43(anonymous function) @ winjs.base.js:38\nwinjs.base.js:45 WARNING: Promise with no error callback:185\nwinjs.base.js:46 Object {exception: null, error: Error: Unable to display threads: \"Error: spawn EACCES\"\n    at file:////Applications/Visual Studio C\u2026, promise: n.C\u2026s.d\u2026e.cancel, handler: undefined, id: 185\u2026}. Except for debug, coding Go using vscode in my machine is great! It's an amazing tool. We just need to fix this to become perfect!\ndlv in command line is also running OK.. Hi @ramya-rao-a ,\nHave you set go.goroot in your settings to anything that is different than the default by any chance?\nNo, I haven't. This is my config:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [        \n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n} \nI could be wrong but EACCES error is related to Javascript. But I can be wrong.\nAbout Delve in my machine, at command line it is running sweet. See the logs below.\n``` \n~/myproject (master %)$ dlv debug\nType 'help' for list of commands.\n(dlv) break RunningPort\nBreakpoint 1 set at 0x8217d for /lib/utils.RunningPort ./lib/utils/whereami.go:12\n(dlv) next\nCommand failed: no G executing on thread 0\n(dlv) continue\n\n/lib/utils.RunningPort() ./lib/utils/whereami.go:12 (hits goroutine(1):1 total:1)\n     7:\n     8: /\n     9: RunningPort returns the HTTP Port where the application is listening requests\n    10: /\n    11: func RunningPort() int {\n=>  12:     if i, err := strconv.Atoi(os.Getenv(\"PORT\")); err == nil {\n    13:         return i\n    14:     }\n    15:     return 8765\n    16: }\n    17:\n(dlv) next\n/lib/utils.RunningPort() ./lib/utils/whereami.go:15\n    10: /\n    11: func RunningPort() int {\n    12:     if i, err := strconv.Atoi(os.Getenv(\"PORT\")); err == nil {\n    13:         return i\n    14:     }\n=>  15:     return 8765\n    16: }\n    17:\n    18: /\n    19: AmILocal returns true if it's nunning on localhost at 8080 port or false in different port \n    20: /\n(dlv) goroutines\n[5 goroutines]\n Goroutine 1 - User: ./lib/utils/whereami.go:15/lib/utils.RunningPort (0x821bd)\n  Goroutine 2 - User: /usr/local/go/src/runtime/proc.go:260 runtime.gopark (0x2c59a)\n  Goroutine 3 - User: /usr/local/go/src/runtime/proc.go:260 runtime.gopark (0x2c59a)\n  Goroutine 4 - User: /usr/local/go/src/runtime/proc.go:260 runtime.gopark (0x2c59a)\n  Goroutine 17 - User: /usr/local/go/src/runtime/asm_amd64.s:2087 runtime.goexit (0x591c1)\n``` \n\nOh! Could I give a suggestion? In order to help you and @roblourens to reproduce the error, I'd suggest you to get a Mac, setup the Go Dev development environment and try this: http://nanxiao.me/en/a-brief-intro-of-delve/ and this https://blog.gopheracademy.com/advent-2015/debugging-with-delve/   tutorials. If you were able to run the debug process in your machines within vscode, please let me know and share a print screen. Then I would start to consider that is something wrong in my machine not in the vscode. I believe this is help you to speed up the fix processing ;)\nAnd again, I appreciate your efforts to fix this and give to Go Dev community this important tool. I will be waiting for your news. Thanks a lot!\n. Rob,\nPlease, read what I have written correctly, I didn't say 'next' is not\nworking. Delve is working fine. Again, Delve is working fine. Check the\nlogs out.\nI can debug my Go application without VSCode with no problem.\nWhat I am trying to do is helping you to create a better IDE but if you\ndon't care about Go Developers that use Mac, OK, I won't spend my time\ntrying to convince you.\n\nJeff Prestes\n\nEm 23 de jan de 2017 3:12 PM, \"Rob Lourens\" notifications@github.com\nescreveu:\n\nWhy did the 'next' request fail? That seems relevant. Also, what version\nof MacOS do you have? I haven't used it on a Mac in awhile since Delve was\nbroken on 10.12.x, but it looks like it's usable now, so I can try that out\nthis week: https://github.com/aaronhackney/delve_on_mac\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/585#issuecomment-274551404,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAgjWQAd_UlM1mFfW7aDWbyFslv7RO_Bks5rVN9egaJpZM4Kkgjq\n.\n. Hello @ramya-rao-a,\n\nBelow are my answers to your questions. I have changed my username for security reasons but it won't be a problem to you understand my dev environment.\nEnsure it is in your \"GOPATH/bin\" or \"PATH\".\" \nYep, it is: ~$ which dlv\n/usr/local/bin/dlv\n~$ echo $PATH\n/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Users/xxxuser/projetos/go/bin \n\nRun go env in the command line. Is the GOPATH you see here and the one you see while runnning Go: Current GOPATH command in VS Code the same?\nBelow the results:\n~$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/xxxuser/projetos/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/sg/cbftgljs34l59llxmnk_mvzr0000gn/T/go-build513615244=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nVSCode:  Current GOPATH:/Users/xxxuser/projetos/go  ```  \nRun which dlv in the command line. Is the dlv binary in your GOPATH/bin or PATH ? \nYes, it is as you can see above. And below see the file permissions:\nlrwxr-xr-x  1 xxxuser  admin        30 Jun 25  2016 /usr/local/bin/dlv -> ../Cellar/delve/0.11.0/bin/dlv \nIn your workspace/user settings, have you set go.goroot or go.gopath.\nNo, I haven't. They are null as default.\n```    // Specifies the GOPATH to use when no environment variable is set.\n  \"go.gopath\": null,\n// Specifies the GOROOT to use when no environment variable is set.\n  \"go.goroot\": null,\n``` \nThanks again. I appreciate your kindness.. That was it. Accidentally, I had a dlv file at $GOPATH/bin, I removed it and now vscode is debugging like a charm. \nThank you very much @ramya-rao-a for all your attention and kindness. Now I have one more reason to say to Go devs to use vscode instead of vim ;). ",
    "jasonelston": "Maybe this will assist someone if they have the issue. I had the same error popping up as well. Two computers, same version of vscode (1.10.2), same version of vscode-go (0.6.55), one producing the error and one not producing it. I thought it was because the $GOPATH included a symlink directory, even though both had the same path but moving to a hard directory solved it inconsistently (didn't get to the bottom of this). I also eliminated all the possibilities spoken about in this thread. Eventually I solved it by removing all the binaries from $GOPATH/bin and re-installing the tools within vscode -> ctrl-p Go: Install Tools. ",
    "jijeshmohan": "How about integrating godoctor which has the same feature ? . ",
    "Hades32": "I just tried the current 0.5 version of GoDoctor and it seems to handle simple cases (including the not so simple multiple return values) just fine and would IMO be an improvement over nothing.\nMaybe you could re-re-review :). ",
    "mgood": "Sorry to be a bit pedantic, but just wanted to note that this should be called \"extract function\", since \"method\" refers specifically to a function with a receiver, e.g. func (p *Point) Length() float64. Extracting code into a method would also be a nice feature to have, but that could be a special case to add after the initial support for extracting functions.. I've added a proof-of-concept PR for go-outline to add the ranges for the *ast.Ident associated with each declaration, which should provide the necessary information. I began looking at the code for this extension, but the API of GoDocumentSymbolProvider returns vscode.SymbolInformation[] which doesn't have a field for this added info. So it looks like it would probably require GoCodeLensProvider to call documentSymbols directly, and refactoring things a little bit to add this information. I might be able to look at that again a little later but I should probably get back to some normal work for today :). The PR is ramya-rao-a/go-outline#1 (it also shows up on this Github discussion since I referred back to this issue from the PR).. I'm still learning the VSCode API, but from what I could tell the SymbolInformation returned by the GoDocumentSymbolProvider is used to select the range to highlight, so that should still be the entire code block. But somewhere in the symbol provider it could also expose the identifier position in order to look up the references.. But yes, please let me know if you have any suggestions once you've had a change to take a look at the PR.. Thanks for the fix here. I'll copy your comment about go-outline to that pull request to follow up.. Nice, thanks!. Thanks, I haven't started on it, but I'll keep that in mind.. ",
    "conradwt": "@ramya-rao-a I take it that #588 is the main enhancement for tracking the Extract Method functionality.  Thus, I was wondering, is anyone currently working on this feature?. @aswinmprabhu Good work and I agree with @ramya-rao-a 200% that you should make a PR regardless.. ",
    "aswinmprabhu": "@ramya-rao-a I had a go at this issue here. I also added \"Extract expression to local variable\" feature to see if it works here. It seems to work for all the simple examples I tried. I would be happy to make a PR if its good enough.. Thanks @ramya-rao-a and @conradwt.\nCheck out #2139. This approach using godoctor has been tried before and was abandoned. But I guess it has gotten better and vim-go uses it. It works for the simple use cases that I tried. I am waiting for the maintainer to review it or give me some feedback. . Also the refactoring seems to extremely slow in decently large files. This does not seem to be a problem with the implementation, as the godoctor command if run from the terminal with the same args, takes the same amount of time as in the editor.. Works good. But why do you still have the -w option if you are using diffs.. Ok. Cool. Tested it out again. Can confirm that undo works fine.. The type Thenable<string>  returned by runGoDoctor doesn't have a catch method to handle rejected promises.. It doesn't seem to have a kind property.. ",
    "NaifAlrashed": "Hello, it seems that I am having the same issue, and it doesn't work even in the manual installation, which is this (taken from the README)\ngo get -u -v sourcegraph.com/sqs/goreturns\nit seems that the repo for gorutine seems to have moved.. sry made a typo. I meant goreturns\nso this is what's showing in visual studio code\n`Installing 2 tools\n  goreturns\n  gotests\nInstalling goreturns FAILED\nInstalling gotests FAILED\n2 tools failed to install.\ngoreturns:\nError: Command failed: C:\\Users\\User\\go\\bin\\go.exe get -u -v sourcegraph.com/sqs/goreturns\ncd C:\\Users\\User\\GoCode\\src\\sourcegraph.com\\sqs\\goreturns; git config remote.origin.url\npackage sourcegraph.com/sqs/goreturns: remote origin not found\ncd C:\\Users\\User\\GoCode\\src\\sourcegraph.com\\sqs\\goreturns; git config remote.origin.url\npackage sourcegraph.com/sqs/goreturns: remote origin not found\ngotests:\nError: Command failed: C:\\Users\\User\\go\\bin\\go.exe get -u -v github.com/cweill/gotests/...\ncd C:\\Users\\User\\GoCode\\src\\github.com\\cweill\\gotests; git config remote.origin.url\npackage github.com/cweill/gotests/...: remote origin not found\ncd C:\\Users\\User\\GoCode\\src\\github.com\\cweill\\gotests; git config remote.origin.url\npackage github.com/cweill/gotests/...: remote origin not found`\nwhat i understood from it is that it isnt found. and even when i run it manually, i get this\n```\ncd C:\\Users\\User\\GoCode\\src\\sourcegraph.com\\sqs\\goreturns; git config remote.origin.url\npackage sourcegraph.com/sqs/goreturns: remote origin not found\n```\nso i went manually to the website (sourcegraph.com/sqs/goreturns), and i got a 404 message. this is a screenshot\n\n. i am running windows and i ran it on windows PowerShell. also, visual studio code did install most of the other packages. what seems different with this one is that the link for downloading it is not different from the others. all of the other links were either github or golang.org, but this one is different.. I am so sorry to waist your time. I did have $GOPATH/src/sourcegraph/sqs/goreturns and i deleted it and it worked. I did the same for gotests and it also worked.. ",
    "xinyanmsft": "here's how you can get the launchBrowser option in launch.json:\n  1. create a .net c# project.\n  2. open VSCode (you need to have the c# plug-in and debugger installed. ms-vscode.csharp)\n  3. enable .Net Core debugging in VSCode.\nthen you should see the launch.json file contains the following section:\n              \"launchBrowser\": {\n                \"enabled\": true,\n                \"args\": \"${auto-detect-url}\",\n                \"windows\": {\n                    \"command\": \"cmd.exe\",\n                    \"args\": \"/C start ${auto-detect-url}\"\n                },\n                \"osx\": {\n                    \"command\": \"open\"\n                },\n                \"linux\": {\n                    \"command\": \"xdg-open\"\n                }\nThis is what I was referring to.. ",
    "MagnumOpus21": "Does this issue still need help? If someone can point me what I should do to resolve this I'm happy to help with this issue \ud83d\ude01. Okay this is something I can work on if no one else has dibs on this \ud83d\ude01. Ah my bad. I thought the \"prepended\" by --- FAIL : was a mistake. I shall rectify this in the following commit.. I modified the regex inside expandPathLinesOutput. \nWhy\nWhen golang prints something to the console, it appends the timestamp with the file path to the console inside the tests. For the failures, it doesn't have this stated behavior. So, the regex now only captures failure of test cases since they don't have the timestamp at the beginning of the output.\nAlso, file names are supposed to be in snake_case and the regex captures this.\nHow I arrived at this conclusion\nI noticied that I was getting the lines, one by one, instead of having them all at once. I couldn't access the previous lines. I printed it to the console, and found this out. I have no idea why previously I could check for the next line (lines[i + 1]). \nWhen I tried this for lines[i - 1]  it didn't process the lines at all. (Because we have one line and the value at i -1 th index is undefined). If I am missing something do correct me. This is my very first experience working with TypeScript.  \nOutput with this commit.\nI believe this was the intended fix. I apologize for not getting the correct behavior initially. \n\n. Also, I notice that the hyperlinks break after a space inside the output terminal in vscode. Is this the expected behavior? \n\n. The GitHub outage prevented me from viewing your previous message with the regex for the build errors. I could see your why not this regex suggestion earlier in the day, now I am not able to spot it at all.  Still am not sure if I can see all the suggestions after the outage started on outdated thread \ud83d\ude05. . @ramya-rao-a Now it should capture all the failures on non-Windows platforms as well. I was just testing the extension on Windows. :sweat: . Sorry for the no progress during the past weeks. Hectic school session in progress. I will finish the PR during Thanksgiving week. Thanks for your patience.. I'm sorry \ud83d\ude14. I was busy with school. I'll take a look at this and finish this fast. It's been far too long. Apologize for the lateness @peergynt . @ramya-rao-a Do I have to do anything to get the Go Extension tests to pass for go1.11. It passes for the other versions of golang on Travis. . I thought spaces might be present at the beginning of the file. This has another bug, where if we have spaces in the filename like file name.go the regex will fail to pick this. Another commit inc. . ",
    "bennyscetbun": "Hi\nThis is an example where it fails\n\nand for example if you ve got the same package in a lot of different places and already imported it\n\nAnd about : \n\nAlso if you ve already imported a package with that name some wierd stuff happen and could lead to a file with multiple import of same package but with different path.\n\nthis what happens if i press enter at the last screen shot\n\nI hope it helps :)\n. Btw you should avoid to show path of packages with vendor in it ???\n. Tell me if i am wrong but if you import a package in a vendor of an other project you will get an error.\nFor example i am in github.com/bennyscetbun/testgo project and imported a vendored package.\n\n. @ramya-rao-a \nHi since last update, i have the same issue\n\nIt was working fine before the update\nYes go definition wasnt working between packages\nNo i havent changedgo.docsTool\nNo i havent changed go.useLanguageServer\nextension: 0.6.61\nI am on MacOS 10.12.4\n\nI just tried to use gogetdocs and it works better.\nBy the way even if my GOPATH was set. since last patch i have to set it manually in the vscode configuration.\nSame thing for GOROOT... (i had an error cannot find go executable in PATH or GOROOT which is strange...).\nMaybe it is related. I was about to make an issue.\n. @ramya-rao-a\nremoving gopath, goroot and event godoctool from my configuration and restarting all the instance of visual studio fixed all my issues. (i hadnt close my mac session or visual studio since 2 month). Hey Scele why have you closed this pr? you ve found an other solution?. Hi my thought on this one.\nI like consistency and many dev does too.\nmain/init should be good except that the #225 is a real pain when using it\nSo fmain/finit works fine for me :)\nBut please. No fmain/init or main/finit :)\n. ",
    "zerbitx": "Just had the same thing happen to me.  It's working for other stdlib symbols, but does nothing for net.   Autocomplete still works for net.\n. ",
    "Paxxi": "Heavy vscode user, light go plugin user. \nI agree completely that displaying lint errors on build failures is counterproductive. Not a big fan of having it as a setting or drop down filter as it takes extra steps and likely to be hard to find for beginners that might benefit the most. \nedited out\nFailed at reading, I agree with with @ramya-rao-a . ",
    "brandonblock": "Just wanted to add that I'd warmly welcom this feature.\nI've never worked with TypeScript, but may be willing to give it a shot\n. ",
    "gabrielgatu": "I was having the same problem the other day and I've made a search of the pull requests for test-coverage hoping for an easy solution to clear highlights and I've found this: https://github.com/Microsoft/vscode-go/pull/143, i.e. just type something and the highlight will disappear (leaving here for further reference).\nThe toggle idea is a good one (my first try), however since then it would be a good idea to include inside the readme a section for test coverage, explaining how it works and the current solution for removing highlight.\nWhat do you think?. ",
    "YLivay": "Can confirm, Sending SIGKILL instead of the default SIGTERM here might be a workaround but I'm not sure how important it is to terminate the debug processes gracefully. Might not work if dlv spaws the process in detached mode. Will compiling the extension and test.. ",
    "astaxie": "@ramya-rao-a thanks. I find it. it works well \n. ",
    "kwiesmueller": "As I keep being annoyed by this feature in my daily work I was looking for a setting to disable it. As there is none I want to ask here.\nWhen I work with tests in go, most of the time I got my editor in split. Left is code, right is test.\nWhen then using the add test feature, my code gets closed and the test file (i already have open) gets opened there.\nThis is gets kinda annoying when generating a lot of tests.\nMy suggestion would be a setting for this to enable or disable it.\nAs an addition to that, I would also appreciate a setting to disable the \"test created\" modal, which blocks my view every time even if I don't care about.\nWhat do you think?. Sounds good to me.\nI already disabled the opening of tests locally, so I might as well do this as a pr with your suggestion.\n. ",
    "Pitchanon": "Thank you.\n. ",
    "helinwang": "It's \"editor.formatOnSave\": true, in my vs code. (not edit.formatOnSave)\n. ",
    "caibirdme": "@helinwang Sorry for my careless, u r right\n. But in other projects, it works as expected.Only in my current projects. I find it was caused by importing a specific package, and I'm on tracking on it why. @ramya-rao-a Close it please. This problem is caused by there's an error in the third_party package I imported.So there's no error info displayed to indicate the error.But are there any good ways to deal with it, to make it clear?In fact, grammar error isn't a common problem in a third_party package.... @AlexRouSg Yes I know it and I did send a request via curl xxxxx and didn't get any response. So I think it might be blocked at somewhere. But In VSCode nothing happened, and the next button was still unavailable. @AlexRouSg Yes I know it and I did send a request via curl xxxxx and didn't get any response. So I think it might be blocked at somewhere. But In VSCode nothing happened, and the next button was still unavailable. Maybe something related to this?\nMy VSCode version 1.21.1, vscode-go version 0.6.77\n\n. Maybe something related to this?\nMy VSCode version 1.21.1, vscode-go version 0.6.77\n\n. @AlexRouSg Thanks very much, it is. As so far the only available value of \"request\" is \"launch\", and I think it'll be better to add it into the wiki.. @ramya-rao-a , It's a problem that if I use {\"request\":\"launch\"} to start a remote debuging, everytime I stops it, it kills the process. But If I use {\"request\":\"attach\"}, it doesn't work. I hope I can attach to a remote process and detach it without killing it . > @caibirdme When you use {\"request\":\"launch\"} to start remote debugging, are you using {\"mode\": \"remote\"} as well?\n@ramya-rao-a Yes I did. ",
    "neelance": "I just tried editor.formatOnSave and it completely broke it for me, because I don't want to format our TypeScript and our JSON files, only Go. I found no way to only make it happen for Go. The only way to continue working was to disable formatOnSave entirely. I'd say this is a regression and makes this feature unusable. It is especially bad since formatting on save is an expected default in the Go world.\n. Thanks for fixing this so quickly!\n. ",
    "sindrepm": "I have tried running goreturns, goimports and gofmt directly on the .go file, and it works fine. The import lines are not removed. However, saving from the editor it immediately removes those imports.\n. @ramya-rao-a \nThanks for the update. I am pretty sure my issue is the same as @AlekSi mentions. It can very easily be reproduce with this simplified code:\n``` go\npackage main\nimport \"github.com/xanzy/go-gitlab\"\nfunc main() {\n    c := gitlab.Client{}\n}\n```\nTry saving this file and the import line is removed. I do have github.com/xanzy/go-gitlab in my vendor folder.\nYour workaround by changing go.formatTool to gofmt worked! With goreturns it fails.\n. ",
    "sirianni": "I am seeing this behavior again.  This worked for me a few days ago.\n\n. >can you try setting \"go.formatTool\" to \"goimports\"?\nSetting go.formatTool to goimports fixes the issue.  Guess this is a bug in goreturns then?. ",
    "ehzhang": "I'm also seeing this behavior, just noticed today:\n\nThis is fixed if i set \"go.formatTool\": \"gofmt\". The import is removed when set to \"goreturns\". I don't have goimports installed.\n. ",
    "xyi": "I have the same issue which guide me to here. I think it should be reopened until the issue solved.. ",
    "quetool": "I have installed 0.6.73 and still happening. I uninstalled it in order to continue coding. @ramya-rao-a uninstalled the Go extension. I do not have Go: Install/Update Tools.\n\nthese is my bug (it's my twitter account) https://twitter.com/quetool/status/951539146056749057\n. @ramya-rao-a  Yes, is used in some functions to send messages to slack. This is what you are asking?\n\n. ",
    "yaoweizhen": "\nFormatting removes unused imports.\n\nThat makes no sense to remove unused imports quietly, instead, if it could be a warning.. > Go: Install/Update Tools\nMissing \">\" , the command should be \">Go: Install/Update Tools\". ",
    "Newt0n": "This issue still happening on 1.19.3(macOS), it's really really annoying for daily work, \"goimports\"/\"goreturns\" both don't work for me, any new fix?. @ramya-rao-a Yes, I've tried Go: Install/Update Tools but has no magic, only update go.formatTool to gofmt works, just like @viettd .\nSeems like goreturns not exists in Update List:\n```\nInstalling 13 tools at /Users/Newton/go/bin\n  gocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  gomodifytags\n  goplay\n  impl\n  godef\n  godoc\n  golint\n  gotests\nInstalling github.com/nsf/gocode SUCCEEDED\nInstalling github.com/uudashr/gopkgs/cmd/gopkgs SUCCEEDED\nInstalling github.com/ramya-rao-a/go-outline SUCCEEDED\nInstalling github.com/acroca/go-symbols SUCCEEDED\nInstalling golang.org/x/tools/cmd/guru SUCCEEDED\nInstalling golang.org/x/tools/cmd/gorename SUCCEEDED\nInstalling github.com/fatih/gomodifytags SUCCEEDED\nInstalling github.com/haya14busa/goplay/cmd/goplay SUCCEEDED\nInstalling github.com/josharian/impl SUCCEEDED\nInstalling github.com/rogpeppe/godef SUCCEEDED\nInstalling golang.org/x/tools/cmd/godoc SUCCEEDED\nInstalling github.com/golang/lint/golint SUCCEEDED\nInstalling github.com/cweill/gotests/... SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n```. ",
    "viettd": "VSCode Version 1.19.3\nGo Extension: 0.6.73\nTried >Go: Install/Update Tools => the same\nUpdated go.formatTool to gofmt => solved\nThe problem comes from goreturns not this extension.\nThank you every one. . ",
    "halfcrazy": "@Newt0n The toolset to update is based on your config. (https://github.com/Microsoft/vscode-go/blob/d0c5309dd7f32689410e6f946245856c469ccc81/src/goInstallTools.ts#L90-L93). Update. But meet a error. Load the extension and edit a go file then save, the prompt for update show and disappear and show and disappear.... Nope, in my case, the prompt shows up and disappear quickly again and again.. I have auto-save disabled, it happens on manually save. . ",
    "safijari": "I have these import statements \n**import (\n    \"appengine\"\n    \"appengine/urlfetch\"\n    \"encoding/json\"\n    \"gopkg.in/telegram-bot-api.v4\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"fmt\"\n)\nIf I press Ctrl+s (or just straight up save from the menu), vscode automatically changes these lines to:\n```\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n\"appengine\"\n\"appengine/urlfetch\"\n\n)\n```\nI have these extensions installed.\n\nI am on Windows 10. Removing the go extension fixed the issue.. ",
    "jbrodriguez": "@ramya-rao-a,\n~~I have the same issue.~~\n~~The package is \"gopkg.in/check.v1\" and using either goreturns or goimports deletes the import from the list (I'm using the package).~~\n~~Is this something you can fix ?~~\nNevermind, I just needed to go get gopkg.in/check.v1 \ud83d\udc4d . Wow !\nIt works if both are set to 'package'\n```\n/Volumes/Home/code/unbalance/server>Finished running tool: /usr/local/bin/go build -o /var/folders/w9/7tlszcbs3msddknxvpp64gwc0000gn/T/vscode-golXxdzq/go-code-check .\n/Volumes/Home/code/unbalance/server>Finished running tool: /usr/local/bin/go vet ./...\n/Volumes/Home/code/unbalance/server>Finished running tool: /Volumes/Home/go/bin/golangci-lint run --print-issued-lines=false\n```\nI also tried it on another project with the same subfolder for go structure and it seems to run golangci-lint on the whole go project, which is fine by me.\nWhy the difference between package/workspace in these scenarios?\nShould I always use package then ?. > Did this other project use modules as well?\nYes it uses modules as well. ",
    "zuojinmin": "what about this pro reason?\n. Solving the problem is a problem.\uff1f\n. if osx verison is 10.12.1 i can`t use dlv? \n. thanks ,if you can  Solve  the problem ,plz tell me\n. ",
    "l2dy": "@zuojinmin See https://github.com/derekparker/delve/issues/645#issuecomment-260605967\n. FYI, Adding \"go.installDependenciesWhenBuilding\": false to settings solved my build issues of go build golang_org/x/crypto/cryptobyte/asn1: open /usr/local/go/pkg/darwin_amd64/vendor/golang_org/x/crypto/cryptobyte/asn1.a: permission denied.. @bjm88 See https://github.com/Microsoft/vscode-go/issues/1532#issuecomment-416100439, you can use \"go.installDependenciesWhenBuilding\": false.. ",
    "y0ssar1an": "Can we please make it so that it appears correctly in the Extensions menu?\n\n. ",
    "mvadu": "Any update on this @ramya-rao-a ? Why don't we keep this issue open until this is resolved. Its really confused, and even after an year its still shows up as \n, and this repo's home page has \"You can also install the extension from the Marketplace\" which again links to lukehoban.Go. @lukehoban has since moved on and it should be corrected to show new home for the plugin.\n. well, the place where I work and several other places where my employer provides services to have strict guidelines what is allowed from FOSS (Free and open-source software) universe. One of the such guideline is publisher. So if I go to VS COde, and search for Publisher:Microsoft and don't see this plug in then its not allowed. \nIf just updating the publisher name breaks so many things then think of cases when a company who published a plugin gets acquired by another, and wants to rebrand the previous companies assets? What is Microsoft's view on handling such branding changes?. ",
    "gngeorgiev": "Experiencing the same behavior, anyone?\n. @ramya-rao-a I have experienced this within the same project, different packages. Also, auto build or not, did not make any difference for me.\n. @ramya-rao-a Here's my case:\nI have .go files in <project>/src/services/<someService>/service.go. I generate some mocks in <project>/mocks/services/<someService>/service.go. When I try to use the mock_service package in my tests ...service_test.go I get absolutely no autocomplete, not for the package, not for its methods, not for its returned values.\nInteresting fact 1: Even goimports does not fire up for the file as far as I can see\nInteresting fact 2: IntelliJ idea works good\n. @ramya-rao-a nope, none, sorry :disappointed: \n. @ramya-rao-a I no longer use VSCode for Go, I use Gogland instead, VSCode was useless. And I am pretty certain that gocode is working fine since vim had no autocompletion problems and that's exactly what it's using.. @ramya-rao-a please excuse me if I am being a bit forward but, I can't hold myself and ask - did you even try to reproduce the issue? I mean I have used VSCode for Go on a few different OSs and PCs and the issue is really really apparent. If you tried it only on a small 2-3 files project, you might experience no issues. But someone of your team has to check this out on a real world project. Simply try to be productive for a few hours. I am pretty sure he won't be able to.. ",
    "scorphus": "Oh, it's no longer an issue. It might had been a flicker, a momentary glitch. Should it happen again, I'll add a comment with sample code and a screencast. Thank you for replying.\n. ",
    "tddwm1990": "@ramya-rao-a Thanks for your answer.\nThe import line disappear when I input ENTER to a new line at the first,not on save and haven't used it.\nAnd I find these appearances as the follow:\na.If firstly enter \"import (fmt)\" and then \"import \"fmt\"\",the last line doesn't disappear\nb.If firstly enter \"import \"fmt\"\" or \"import (\"fmt\")\",this line will been deleted\nI try to rec my operations as a attachment.\n\n\n. @ramya-rao-a Thanks for your answer.\nThe import line disappear when I input ENTER to a new line at the first,not on save and haven't used it.\nAnd I find these appearances as the follow:\na.If firstly enter \"import (fmt)\" and then \"import \"fmt\"\",the last line doesn't disappear\nb.If firstly enter \"import \"fmt\"\" or \"import (\"fmt\")\",this line will been deleted\nI try to rec my operations as a attachment.\n\n\n. \nThis is my settings from plugin suggests.\nI change format tool from \"goreturns\" to \"goftmt\",It doesn't happen again.\n. @ramya-rao-a Thanks a lot.I Got it!\nThis issue can been closed.\n. ",
    "cristim": "This is happening while typing: it would just repeatedly save, lint, reformat and save again and again forever, until the machine becomes unusable.\nEventually the machine will be overwhelmed by all the lint processes started by the gometalinter which get all CPU cores at 100%.\nHere are all my go-related global settings:\n```\n// Go configuration\n// Run 'go build'/'go test -c' on save.\n\"go.buildOnSave\": true,\n\n// Flags to `go build`/`go test` used during build-on-save or running tests. (e.g. ['-ldflags=\"-s\"'])\n\"go.buildFlags\": [],\n\n// Run Lint tool on save.\n\"go.lintOnSave\": true,\n\n// Specifies Lint tool name.\n\"go.lintTool\": \"golint\",\n\n// Flags to pass to Lint tool (e.g. ['-min_confidenc=.8'])\n\"go.lintFlags\": [],\n\n// Run 'go tool vet' on save.\n\"go.vetOnSave\": true,\n\n// Flags to pass to `go tool vet` (e.g. ['-all', '-shadow'])\n\"go.vetFlags\": [],\n\n// Pick 'gofmt', 'goimports' or 'goreturns' to run on format.\n\"go.formatTool\": \"goreturns\",\n\n// Flags to pass to format tool (e.g. ['-s'])\n\"go.formatFlags\": [],\n\n// Run the formatting tools with the -d flag\n\"go.useDiffForFormatting\": true,\n\n// Complete functions with their parameter signature\n\"go.useCodeSnippetsOnFunctionSuggest\": false,\n\n// Specifies the GOPATH to use when no environment variable is set.\n\"go.gopath\": null,\n\n// Specifies the GOROOT to use when no environment variable is set.\n\"go.goroot\": null,\n\n// Runs formatting tool on save.\n\"go.formatOnSave\": true,\n\n// Run 'go test -coverprofile' on save\n\"go.coverOnSave\": false,\n\n// Specifies the timeout for go test in ParseDuration format.\n\"go.testTimeout\": \"30s\",\n\n// Enable gocode's autobuild feature\n\"go.gocodeAutoBuild\": true,\n\n// The Go build tags to use for all commands that support a `-tags '...'` argument\n\"go.buildTags\": \"\",\n\n// Environment variables that will passed to the process that runs the Go tests\n\"go.testEnvVars\": {},\n\n// Autocomplete members from unimported packages.\n\"go.autocompleteUnimportedPackages\": true,\n\n```\nIt appears to be triggered by the go.lintOnSave option, it starts happening if I override that in my local settings to true, once I set it to false it stops happening.\nIt doesn't matter which lint tool I use, so if I set go.lintTool to golint it does exactly the same, it's just that I don't get a myriad of linting processes like I get with gometalinter.\n. @ramya-rao-a I mentioned at the end of my previous comment:\n\nIt appears to be triggered by the go.lintOnSave option, it starts happening if I override that in my local settings to true, once I set it to false it stops happening.\n. @ramya-rao-a with the latest update it no longer formats code at all.\n\nCan I somehow help you reproduce this?\nI think this is related/duplicated by #631, that's very similar to what I saw initially.. @ramya-rao-a due to this bug and other issues related to unintentional whitespace mangling in Makefiles and Markdown files, I reduced my use of vscode, so I didn't get the chance to experiment so much with it lately.\nI will check and ensure the whitespace external extention is disabled.. Okay, that extension was installed and I can't reproduce the issue anymore after disabling it.\nI think this issue can be closed.. I also notice this and it happens after each significant change in the editor. I see dozens of guru processes that consume 100% of all my CPU cores for a minute or so and the vscode editor is pretty much unusable for that period of time.\nMaybe those could be executed with a lower nice priority so at least I can type code?. ",
    "tugbabodrumlu": "I have the same problem now, could you please help?. I had c++ extension and I removed it, but I still have the same problem... Hi,\nI sometimes see godef, golint and goimports processes started many times and CPU cores get at 100%.\nHere is my settings:\njson\n// Place your settings in this file to overwrite the default settings\n{\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": true,\n    \"go.vetOnSave\": true,\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goimports\",\n    \"go.goroot\": \"/usr/local/go\",\n    \"go.gopath\": \"/Users/xxxx/Documents/gows\",\n    //\"go.useDiffForFormatting\": false,\n    \"window.zoomLevel\": 0\n}. Yes I am in a Mac and i recently upgraded to Sierra. I will do so, and will report back.. ",
    "gotoxu": "@ramya-rao-a I have already updated it, but vscode always hint me that...\nI click the update button, and run successfully, but next time, vscode still hint that\n. platform: MacOS Sierra 10.12.1\nvscode: 1.7.1\ngo: 1.7.3 \n. It shows\nUsage of ./go-outline:\n-f string\nthe path to the file to outline\n-imports-only\nparse imports only\n-src string\nsource code of the file to outline\nand I have already restart the vscode\n. This is my go env shows:\nGOARCH=\"amd64\"\nGOBIN=\"/usr/local/Cellar/go/1.7.3/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/xuqiaolun/Desktop/golang:/Users/xuqiaolun/Desktop/gowork\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.7.3/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.7.3/libexec/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/dj/g9jp23zj37v5632xt060j4900000gn/T/go-build591968537=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nAnd This is my $PATH\n/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/share/dotnet:/usr/local/Cellar/go/1.7.3/bin\nIs there any problem?\n. Yes, that's the problem, there is actually more than one installation locations. I have resolved it already. Thank you very much.\n. My code like this:\n```go\npackage main\nimport (\n    \"github.com/aws/aws-sdk-go/aws\"\n    \"github.com/aws/aws-sdk-go/aws/credentials\"\n    \"github.com/aws/aws-sdk-go/aws/session\"\n    \"github.com/aws/aws-sdk-go/service/sqs\"\n)\nvar queueURL *string\nfunc init() {\n    sess, err := session.NewSession(&aws.Config{\n        Region:      aws.String(\"cn-north-1\"),\n        Credentials: credentials.NewSharedCredentials(\"\", \"default\"),\n    })\n    if err != nil {\n        panic(err)\n    }\nsvc := sqs.New(sess)\nparams := &sqs.GetQueueUrlInput{\n    QueueName: aws.String(\"\"),\n}\n\nresp, err := svc.GetQueueUrl(params)\nif err != nil {\n    panic(err)\n}\n\nqueueURL = resp.QueueUrl\n\n}\nfunc main() {\n    sess, err := session.NewSession(&aws.Config{\n        Region:      aws.String(\"cn-north-1\"),\n        Credentials: credentials.NewSharedCredentials(\"\", \"default\"),\n    })\n    if err != nil {\n        panic(err)\n    }\nsvc := sqs.New(sess)\nparams := &sqs.ReceiveMessageInput{\n    QueueUrl:            queueURL,\n    MaxNumberOfMessages: aws.Int64(1),\n}\n\nfor {\n    resp, err := svc.ReceiveMessage(params)\n    if err != nil {\n        continue\n    }\n    if resp.Messages == nil || len(resp.Messages) == 0 {\n        continue\n    }\n\n}\n\n}\n```\nand there is no Intellisense  for anything. I use the following command to retrieve the SDK:\ngo get -u github.com/aws/aws-sdk-go\n\nis there anything wrong?. Find All References is working well, but Go to Definition has some error:\n\nand when I type code in the vscode, the same error has shown in the console\n. running gocode with a debug mode it look like this\n\nwas not resolved, why?. Absolutely yes, I have this package in the right location\n\n. no, the file name is aws-sdk-go.a, aws.a is not exists.\nThe file is $GOPATH/pkg/darwin_amd64/github.com/aws/aws-sdk-go.a. It's weird, I delete the file inside folder $GOPATH/pkg/darwin_amd64/github.com/aws, and running go build github.com/aws/aws-sdk-go and go install github.com/aws/aws-sdk-go, it still generate aws-sdk-go.a file.\nThen I delete the file inside the folder src and pkg, use go get -u github.com/aws/aws-sdk-go to retrieve the sdk, and I'm still seeing the same file in the pkg folder\nHow did you retrieve this SDK? Did you just do it like:\ngo get -u github.com/aws/aws-sdk-go/aws/...\ngo get -u github.com/aws/aws-sdk-go/service/.... There is only a aws-sdk-go.a file in the folder, other files about you show to me is not exists at all. \nBut when I use \ngo get -u github.com/aws/aws-sdk-go/aws/...\ngo get -u github.com/aws/aws-sdk-go/service/...\nto retrieve the SDK, everything is fine. \nIt's just using the go get -u github.com/aws/aws-sdk-go command to retrieve the SDK will result in that problem. Thank you for taking the time to help me solve this problem, I know it's not the vscode-go plugin's  problem. Thanks again. @ramya-rao-a . I found answer in this issue\nAnyway, thank you.. ",
    "jimmykuu": "@ramya-rao-a src/goSuggest.ts doesn't changed. so 0.6.50 this problem is still existed.. ",
    "ucirello": "\nWhat platform are you on?\nMacOS Sierra\nCan you check if you have the go file in your /bin folder ?\n\nYes, the go binary is there.\n. \n. yes\n. Actually, I am not sure it is related to this problem... But often, if I start vscode from shell (code .) and open a reconfigured workspace (containing custom go.goroot and go.gopath) - it simply ignores my configuration. I must close vscode, open from the launch bar, open the workspace and eventually it works.\nIt is as if it ignores my environment variables - or my custom configurations.\n. Magically solved by itself! :( I could not reproduce it.. Important additional information: The workspace root is my GOPATH.. > Does this happen only a single project or all projects?\nAll projects in this workspace.\n\nWhat about other commands ?\n\nAll of them fail.\n. > What is the message you get when you run the other 2 commands?\nSuccess: Tests passed.\n\nCan you run go test in the command line work for the package in question?\n\nYes, and all my tests go fine when I call them on the shell.\n. ShellSession\n\u279c  mysql git:(master) go test -v -timeout 30s -tags\ngo test: missing argument for flag tags\nrun \"go help test\" or \"go help testflag\" for more information\nThat's what I get. Without -tags it goes just fine.. @ironcladlou as I mentioned in https://github.com/Microsoft/vscode-go/issues/734#issuecomment-273954169 it goes just fine without the -tags flag.. I cannot reproduce in a self-contained example. :(\nGonna keep trying to find one. Feel free to close this until I find one.. ",
    "bobvanluijt": "For what it's worth, I had the exact same issue. Also the Magically solved by itself! part. I believe that opening the settings and saving (without changing) solved it.. ",
    "briantkennedy": "Hi Ramya, thanks for reaching out, but I presently don't have any plans to add it to goreturns. It looks like sqs has plans to implement the feature request, so things should get resolved sooner or later.. ",
    "mkatanski": "No, files.autoSave is disabled. I tried with every possible value\nEDIT:\nin fact, here are my current settings:\n\"editor.formatOnType\": true,\n \"files.trimTrailingWhitespace\": true,\n \"javascript.validate.enable\": false,\n \"files.autoSave\": \"off\",\n \"editor.formatOnSave\": false,\n \"editor.tabSize\": 2,\n \"go.formatOnSave\": false\nEDIT2:\nabout gif image, its a quite heavy so maybe thats why :) here is another try with backup link (this time external server)\nVSCode error gif\n. Hi, sorry i was extremely busy so i didn't have time to do that before. Anyway, I've updated the extension and still the problem occurs. :(. Ok, I've disabled some extensions and all my user settings and now it is even more weird: error GIF\nExtensions that I disabled:\n Advanced New File\n Babel ES6/ES7\n Flow Language Support\n jsx\n Mono Debug\n Path autocomplete\n Path intelisense\n Relative path\n TSLint\n VSCode Flow\n* VSCode icons. @ramya-rao-a Hi, sorry for late answer but yes, I know what was causing the problem. Like u said, it was problem with some extension (somehow I've missed it before). Its Whitespace v.0.0.4 extension which I even don't need :)\nAnyway thank You for great feedback and good luck :). ",
    "Lywei": "how to do \uff1f. ",
    "damienstanton": "Certainly:\nsh\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/damien/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.7.3/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.7.3/libexec/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/tb/r74wwyk17b3fn_frdb0gd0780000gn/T/go-build704047116=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\". I've installed Go with brew, so there is no such folder. The path to the Go src dir is /usr/local/Cellar/go/1.7.3/libexec and the standard libraries are all there.\nRunning $GOPATH/bin/gometalinter . does indeed return the same errors.\nYes, build and tests pass without issue.. Yes, builds work. I switched to golint and it seems fine now. Thank you!. @GarethLewin no, the solution was to run gometalinter --install, which repaired the linters causing the path resolution problem.. Interesting, I did not know about that flag. Thanks!. ",
    "GarethLewin": "is this resolved by calling go build -i before calling gometalinter?. ",
    "tejasmanohar": "oops, that's awesome. I was looking under the right click menu haha. After debugging with go test directly, I fixed some vendor/dependency errors and now the syntax errors show up. Very odd though because before none of the errors in go test (incl vendor ones) were showing up in _test files in VSCode.\n. ",
    "gaffney": "... and here are my User Settings:\n```\n// Place your settings in this file to overwrite the default settings\n{\n    \"editor.cursorBlinking\": \"visible\",\n    \"editor.tabSize\": 2,\n    \"editor.glyphMargin\": true,\n    \"editor.lineNumbers\": false,\n    \"editor.rulers\": [100],\n    // \"editor.fontSize\": 18,\n    \"editor.formatOnType\": true,\n    \"editor.scrollBeyondLastLine\": false,\n\"files.exclude\": {\n    \"**/.tmp\": true,\n    \"vendor\": true,\n    \"**/.git\": true,\n    \"**/.DS_Store\": true,\n    \"go-build/.go\": true,\n    \".gen\": true,\n    \".vscode\": true,\n    \"env\": true,\n    \"env_docs\": true,\n    \"debian\": true,\n    \"**/*.test\": true,\n    \"Godeps/_workspace\": true,\n    \"**/coverage.html\": true,\n    \"**/_build\": true\n},\n\"files.trimTrailingWhitespace\": true,\n\"files.autoSave\": \"onFocusChange\"\n\n}\n``. Back to investigating this... this is mygo env` output from within the VSCode terminal:\nbash-3.2$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/gaffney/gocode\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders\n/qk/p4tk79qx4dg10s2_qqdbjkt40000gn/T/go-build443739906=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\". Yes, I had to switch to Intellij for the time being until this is resolved.. I did a full wipe / reinstall of everything Go-related and all seems well again.  Closing as I don't think the issue was specific to vscode-go.. Agreed, this is annoying... it has resulted in writing tests for the sake of coverage even though in reality the code in question is indirectly covered all over the place.  Really slows down productivity and is an obstacle towards refactoring when you know you not only have to extract out all the common code, but you have to pull out all the common tests as well.. \ud83d\udc4d Thanks!. Looks like the old version was not cleaned up.\nls ~/.vscode/extensions/\nlukehoban.Go-0.6.39/        lukehoban.go-0.6.60/\nSomehow 0.6.39 was installed as root? (Weird because I never sudo...)\nThat said, I imagine it should not have \"successfully\" updated without first deleting the old one.\nEdit To clarify, removing BOTH the old extension and the new extension and re-installing the new extension fixed the issue.. ",
    "helyho": "i try again today , strange .... it 's working , i don't know why?\nif you can't reappear it, please cloes this issues\nsorry to Disturb , thanks & good luck for you. i try again today , strange .... it 's working , i don't know why?\nif you can't reappear it, please cloes this issues\nsorry to Disturb , thanks & good luck for you. ",
    "ibigbug": "Oh ci complains.. @ramya-rao-a Yeah. I'm sure http_proxy in environment variables and open VS code from this environment using $ code can make go get work through proxy, though it's limited use case. User may often not open VS code through terminal and for OS X users (like me) and other Linux users, environment variables for terminal and GUI are always isolated, this is the main consideration for this PR.. @ramya-rao-a Thanks for pointing out the problems which I did't test carefully.\n\nI believe golang follows both lower and upper case  proxy env vars: https://github.com/golang/go/blob/master/src/net/http/transport.go#L246 , do you think that it's OK to set both lower and upper case env vars here?\nI've added an detection if http.proxy was present.. Yes I believe there are.\n\nIn case go get are calling some external tools such as wget to download third party resources or other tools like wget which read lowercase setting from environment variables:  https://www.gnu.org/software/wget/manual/wget.html#Proxies\nSo I think setting both can be safer.. I found the failed test case is Test diffUtils.getEdits however I have no idea how does this commit make a difference on that. I'll have a local debug to see what happened.. @ramya-rao-a It's interesting that running 'npm t` on current master branch also gets 6 failed tests. I wonder if there are any dependencies have had a breaking change?. ",
    "ShiYu-Yang": "Thank you very much\uff01. Yes,it works ! Nice. \"go.gopath\" : \"path1:path2\"   . Maybe it depends on os? \nIt can work on my ubuntu PC.\n\"go.gopath\" : \"path1;path2\" can work on windows?\nOr you can add them to your environment variable\n . It means that if you set your environment variable,you don't need to set gopath in VSC.\n\"go.gopath\" : \"\". I am sorry but I got nothing with go vet or lint too.\nThere is the easy code\npackage main\nfunc Test(     {\n}\nTerminal show\n\u279c ~$  /home/ysy/go/bin/go tool vet /tmp/test.go                                     \nvet: /tmp/test.go: /tmp/test.go:3:16: expected type, found '{' (and 1 more errors)\nvet: no files checked\nVSCode output just show like this \nFinished running tool: /home/ysy/go/bin/go tool vet /tmp/test.go. Wow,now I know that vet tool just is for some static syntax error! \nAnd I open buildOnSave to check error.\nThank you!  . ",
    "ahcheqiu": "@roblourens sorry. I didn't make myself clear.\nHow I use vscode and dlv:\nI run the dlv on a linux pc. And the command I start dlv server is\nbin/dlv debug orzorc/downman-server --headless --log --accept-multiclient --listen=:2345\nI use vscode for coding on a mac. And the launch config is listed above.\nI upload the code to the linux pc when I save files.\nWhat I am expecting:\nThe dlv will receive the args I set in launch config and use them.\nvscode on mac will receive the output of dlv server and display them.\nWhat is reality:\ndlv can not get any args I set in launch config.\noutput is not shown in vscode.\nAfter search on internet I found out that:\ndebugger will not use newest code if I do not restart dlv.\nI can only pass args to dlv when I start it, like this command\nbin/dlv debug orzorc/downman-server --headless --log --accept-multiclient --listen=:2345 -- -port=7248\nI will get arg port as 7248 and I can not use other args if I do not restart dlv with new command.\nWhat I'm looking for:\nIs there a config that I can set in launch config to make it possible to restart dlv server remotely and set args as I wanted?\nOr what I am looking for is a daydream and I should stop debug remotely.. ",
    "fiam": "This is also happening to me with Go HEAD on darwin/amd64. However, \"Go To Definition\" works correctly if I revert to Go 1.7.3. @ramya-rao-a is there an easy way to debug the commands called by the Go extension so I can figure out which one is failing? Thanks!. Just figured out the problem. Working on a PR.. PR submitted. Please, take a look at it. Thanks! https://github.com/Microsoft/vscode-go/pull/655 . ",
    "tallstoat": "If there can be other refactor options as well like \"select some piece of code & click on extract method\" etc, it would make refactoring & cleaning up golang codebases very easy.. ",
    "zplzpl": "@ShiYu-Yang sorry,it can't work.\nmy setting :\n{\n    \"go.gopath\":\"E:\\goapp:E:\\goproject\\new-app\"\n}. the system I use is Windows 7;\nIf I do not set the environment variable, will not come into effect?. I went to set the environment variable, but unfortunately did not produce results. \nYes, I'm using ; as a separator, but it doesn't work.\nSystem environment variables and go.gopath are set, whether the go.gopath will not come into effect\uff1f. windows environment:\nGOPATH -> E:\\goapp\\\nlaunch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/src\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\nsettings.json\n{\n    \"go.gopath\":\"E:\\goapp;E:\\goproject\\cecs-magento-sync\"\n}\ndebug console: [loss gopath E:\\goproject\\cecs-magento-sync]\napp.go:4:2: cannot find package \"config\" in any of:\n    E:\\Go1.6.2\\src\\config (from $GOROOT)\n    E:\\goapp\\src\\config (from $GOPATH)\napp.go:5:2: cannot find package \"models\" in any of:\n    E:\\Go1.6.2\\src\\models (from $GOROOT)\n    E:\\goapp\\src\\models (from $GOPATH)\napp.go:8:2: cannot find package \"utils\" in any of:\n    E:\\Go1.6.2\\src\\utils (from $GOROOT)\n    E:\\goapp\\src\\utils (from $GOPATH)\nexit status 1\n. \nAbout debugging, I also have a problem, I first time according to the F5 key debugging can work normally, when I press the F5 button second times, but did not respond to the debugging. debugging process doesn't read GOPATH from go.gopath.\nI also verified this idea.. \nHow to solve the problem when debugging GOPATH?. ",
    "huttarichard": "Im using mac el captain \nDelve Debugger\nVersion: 0.11.0-alpha\nBuild: v0.11.0\nI tried many times with headless and without, and without --logs it will not print anything... at least for me.... @ramya-rao-a Awesome!!!. @ramya-rao-a resolved. good job. I spot this only with golang. Once I edit single line of code it disappears.. Alright so this is a feature. Didn't know. Thanks!. having same issue, for me os crashed sourcegraph/go-langserver#336. @ramya-rao-a I can confirm, so far did not happen. ",
    "trdyer": "I'm using osx el capitan with Delve 0.11.0-alpha (installed with homebrew) and VS Code 1.8.0 and getting the same issue.\nwithout \"showLogs\": true I just get the progress bar spinning.. ",
    "kjleng": "I have having the same experience as @trdyer . I have having the same experience as @trdyer . @ramya-rao-a I took the steps above and the issue is resolved. Thanks.. ",
    "PotterDai": "Same issue here.. Hey, sorry for the later reply.\nMy mistake. Was entering wrong offset number before.\nMy guru works!\nguru referrers user.go:#150\nuser.go:12.6-12.15: references to type DeviceType int\nuser.go:15.16-15.25:    IPhonePlayer  DeviceType = 8\nuser.go:16.16-16.25:    Android       DeviceType = 11\nHere is what turning out. However when I \"Find all references\" for DeviceType, \"no results\" coming out.. Hmmm, I found my issue. After digging into \"vscode-go/src/goPath.ts\", it seems it's because I didn't put slash at the end of my GOPATH, thus generating wrong bin file path.\n@ramya-rao-a  it might be a good idea to check if there is slash at the end of the GOPATH and if not just add it, since it seems to be easily mistaken. = )\nAnyway, my issue is solved.. It seems goPath.ts will read $GOROOT, $PATH, $GOPATH. And as long as one of the paths leads to the correct guru executable, the guru will run.\nI was trying to reproduce my situation. By setting all $GOROOT, $PATH, $GOPATH as well as in \"UserSettings, go.path\" to values without slash in the end, vscode will show \"no results\", and by adding slash to the end of path at any places mentioned above, the problem is gone. So that leads to my assumption that there might be something wrong with the slash.. Hmmm, it's getting strange.\nI'm using macOS 10.12.1\nPlease check my screenshot.\nGoPath with slash:\n\nGoPath without slash:\n\nYep, the other functions seem all working correctly.. OK, finally I think I found the problem!\nIt's not about slash at all. \nThat's because I happen to have 2 gopaths:\n\"/Users/potterdai/go\"\n\"/Users/potterdai/GoProject\"\nThe first one happen to be the substring of the second one.\n\"canonicalizeGOPATHPrefix\" mistakenly takes the first gopath as the workspace, and changes the filename from \"/Users/potterdai/GoProject/src/Test/test.go\" to \"/Users/potterdai/goProject/src/Test/test.go\". This won't happen if I put slash after both gopaths.\nIt is a very specific bug. =)\n@ramya-rao-a   Do you think it is a good idea that in \"canonicalizeGOPATHPrefix\" function, check if each workspace ends with a slash or backslash, if not add one to the end?  If so I think I can create a pull request for that change.. OK, PR #658 just submitted. =). ",
    "jonwinters": "@a57571735 \n\u540c\u4e3a\u5899\u5185\u72d7\uff0c\u770b\u4e86\u4f60\u8fd9\u4e2a\u6587\u7ae0 \u6211\u7684go\u7ec8\u4e8e\u5b89\u88c5\u6210\u529f\u4e86. ",
    "go101": "Looks this issue has nothing related to the network.\nI encountered the same problem and just deleted the GOPATH/pkg folder, then re-get and it becomes ok.. ",
    "YouZhengChuan": "@jonwinters \u600e\u4e48\u5f04\u7684\uff1f\u8bbe\u7f6e\u7684\u4ee3\u7406\u5417\uff1f\u4f60\u6709http\u548chttps\u7684\u514d\u8d39\u4ee3\u7406\u53ef\u4ee5\u7528\u5417\uff1f\n\u6211\u7528vpn\u7ffb\u5899\u4e5f\u4e0d\u884c\uff0c\n$ go get golang.org/x/net/context\npackage golang.org/x/net/context: unrecognized import path \"golang.org/x/net/context\" (https fetch: Get https://golang.org/x/net/context?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n$ nc -v golang.org 443\nnc: connectx to golang.org port 443 (tcp) failed: Operation timed out\nnc: connectx to golang.org port 443 (tcp) failed: No route to host\nnc: connectx to golang.org port 443 (tcp) failed: No route to host\n$ ping golang.org\nPING golang-consa.l.google.com (216.239.37.1): 56 data bytes\nRequest timeout for icmp_seq 0\nRequest timeout for icmp_seq 1\nRequest timeout for icmp_seq 2\nRequest timeout for icmp_seq 3\nSolution by github\ncd $GOPATH/src\nmkdir -p golang.org/x/net\ngit clone https://github.com/golang/net.git golang.org/x/net. ",
    "caryyu": "\u53c2\u8003\u535a\u5ba2\uff1ahttp://blog.csdn.net/littlebrain4solving/article/details/78871137. ",
    "bruceauyeung": "strange things are happening! it does lint when open a workspace , accurate to say that it's triggered by opening a go source file in the workspace. but i am quite sure that i have to modify and save something to trigger lint because i waited for a long long time on purpose.. 1. i open a totally fresh vscode without opening any workspace, then i open a workspace through File -> Open Folder, and then i open a Go file in this workspace, now i can see this file is detected as a Go file because the right-bottom corner says so. then i open output window (View -> Output), i don't see any outputs.in the dropdown list there neither is no Go option\n2. i keep the opened Go file opened and restart vscode, the Go file is opened by default, and lint is triggered as you said. i open another Go file in a different package, lint is not triggered until i save.. @leaxoy after upgrading to vscode-go 0.6.51, the problem still exists.. > More info on the environment where it is slow would be helpful. Is it a very large project and/or gopath? Old machine?\n@zmb3 yes, i think it is, it's kubernetes project. this project is about 483MB in code size after being tarred.\nthis machine is a blade server. old one.\nmore detailed info about cpu is here: http://www.semiconductorstore.com/cart/pc/viewPrd.asp?idproduct=48059\nall informations i can get about hard disk is here:\n\n*-disk:2\ndescription: SCSI Disk\nproduct: Logical Volume\nvendor: LSILOGIC\nphysical id: 1.0.0\nbus info: scsi@8:1.0.0\nlogical name: /dev/sda\nversion: 3000\nsize: 136GiB (146GB)\ncapacity: 136GiB (146GB)\ncapabilities: 15000rpm partitioned partitioned:dos\nconfiguration: ansiversion=2 logicalsectorsize=512 sectorsize=512 signature=0009283a\n\n. i find another problem.\nafter i opened a go source file (resthandler.go), i move curor ( using mouse ) in the left side blank area of edit window, not right side, not hovering onto any keywords, variables, methods, vscode-go will try to load something( the background gogetdoc process launched),  after more than 4 secs it displays package's  comments (package comments lays in another go source file named doc.go)\ntop info follows:\n\n1851 root      20   0  428336 419532   3580 R 129.6  1.3   0:12.13 gogetdoc\n11706 root      20   0  586116 578388   3580 R 129.3  1.8   0:16.67 gogetdoc\n11717 root      20   0  478012 468992   3580 R 125.0  1.4   0:14.35 gogetdoc\n12133 root      20   0  159336 151060   3580 S 115.5  0.5   0:04.02 gogetdoc\n12112 root      20   0  154020 145676   3580 R 102.3  0.4   0:03.86 gogetdoc\n12210 root      20   0   63368  56728   3580 R  43.8  0.2   0:01.33 gogetdoc\n. @ramya-rao-a  no, the problem here is different from yours. even i change a file and then save it, vscode-go doesn't notify me the error. hi @ramya-rao-a , i just created a brand new project and i can see the same with you. \n~~~\nFinished running tool: /usr/local/go/bin/go tool vet /root/test111/src/github.com/bruceauyeung/test111/main.go\n\nFinished running tool: /usr/local/go/bin/go build -o /tmp/go-code-check -tags \"\" .\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unknown Test field 'hello' in struct literal\nFinished running tool: /usr/local/go-ext-path/bin/gometalinter --enable=misspell --disable=gotype\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unknown field hello in struct literal (unconvert)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: error return value not checked (unknown field hello in struct literal) (errcheck)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: error return value not checked (t declared but not used) (errcheck)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: ineffectual assignment to t (ineffassign)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: t declared but not used (unconvert)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unknown field hello in struct literal (interfacer)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unknown field hello in struct literal (aligncheck)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: t declared but not used (aligncheck)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:7: exported type Test should have comment or be unexported (golint)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unused global variable unknown field hello in struct literal (varcheck)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unused struct field unknown field hello in struct literal (structcheck)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unused global variable t declared but not used (varcheck)\n/root/test111/src/github.com/bruceauyeung/test111/main.go:4: unused struct field t declared but not used (structcheck)\n~~~\nbut with my k8s project, it didn't notice me that error\n~~~\nFinished running tool: /usr/local/go/bin/go tool vet /root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go\nFinished running tool: /usr/local/go/bin/go build -o /tmp/go-code-check -tags \"\" .\nFinished running tool: /usr/local/go-ext-path/bin/gometalinter --enable=misspell --disable=gotype\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:137: duplicate of join.go:94-102 (dupl)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/join.go:94: duplicate of init.go:137-145 (dupl)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/cmd.go:29: exported function NewKubeadmCommand should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:129: exported type Init should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:133: exported function NewInit should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:180: if block ends with a return statement, so drop this else and outdent its block (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:196: exported method Init.Validate should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/join.go:87: exported type Join should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/join.go:91: exported function NewJoin should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/join.go:126: exported method Join.Validate should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go:61: exported type Reset should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go:65: exported function NewReset should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/token.go:39: exported function NewCmdToken should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/token.go:53: if block ends with a return statement, so drop this else and outdent its block (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/token.go:102: exported function NewCmdTokenGenerate should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/token.go:146: exported function RunGenerateToken should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/token.go:181: var tokenId should be tokenID (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/token.go:213: func parameter tokenId should be tokenID (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/version.go:29: exported function NewCmdVersion should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/version.go:41: exported function RunVersion should have comment or be unexported (golint)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go:106: Subprocess launching with variable.,HIGH,HIGH (gas)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go:114: Subprocess launching with partial path.,MEDIUM,HIGH (gas)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go:156: Subprocess launching with variable.,HIGH,HIGH (gas)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go:164: Subprocess launching with variable.,HIGH,HIGH (gas)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset.go:172: Subprocess launching with variable.,HIGH,HIGH (gas)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:201: cyclomatic complexity 15 of function (*Init).Run() is high (> 10) (gocyclo)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:133: cyclomatic complexity 12 of function NewInit() is high (> 10) (gocyclo)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:212: declaration of \"err\" shadows declaration at init.go:204 (vetshadow)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:218: declaration of \"err\" shadows declaration at init.go:204 (vetshadow)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:225: declaration of \"err\" shadows declaration at init.go:204 (vetshadow)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:242: declaration of \"err\" shadows declaration at init.go:204 (vetshadow)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/reset_test.go:159: should check returned error before deferring f.Close() (staticcheck)\n/root/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd/init.go:212: should omit comparison to bool constant, can be simplified to !valid (gosimple)\n~~~\nand i tried to go build that package but got error:\n~~~\n~/k8s-branch-check-docker-service-active-when-resetting-cluster/src/k8s.io/kubernetes/cmd/kubeadm/app/cmd# go build -o /tmp/go-code-check -tags \"\" .\npanic: runtime error: slice bounds out of range\ngoroutine 1 [running]:\npanic(0x7e18e0, 0xc4200100f0)\n        /usr/local/go/src/runtime/panic.go:500 +0x1a1\nmain.vendoredImportPath(0xc420369200, 0xc42035bc21, 0x1c, 0x3, 0x0)\n        /usr/local/go/src/cmd/go/pkg.go:463 +0x66c\nmain.loadImport(0xc42035bc21, 0x1c, 0xc420343100, 0x77, 0xc420369200, 0xc4204259e0, 0xc4204b0640, 0x4, 0x4, 0x1, ...)\n        /usr/local/go/src/cmd/go/pkg.go:333 +0x9ea\nmain.(Package).load(0xc420369200, 0xc4204259e0, 0xc420325880, 0x0, 0x0, 0x4)\n        /usr/local/go/src/cmd/go/pkg.go:940 +0x12b6\nmain.loadImport(0xc4202c2da1, 0x16, 0xc4201ad170, 0x86, 0xc4202fa900, 0xc4204259e0, 0xc4202c4a80, 0x1, 0x1, 0x1, ...)\n        /usr/local/go/src/cmd/go/pkg.go:374 +0x470\nmain.(Package).load(0xc4202fa900, 0xc4204259e0, 0xc4201c6e00, 0x0, 0x0, 0x4)\n        /usr/local/go/src/cmd/go/pkg.go:940 +0x12b6\nmain.loadImport(0xc42013d171, 0x20, 0xc4201bcbd0, 0x6d, 0xc4201be000, 0xc4204259e0, 0xc42013d530, 0x1, 0x1, 0x1, ...)\n        /usr/local/go/src/cmd/go/pkg.go:374 +0x470\nmain.(*Package).load(0xc4201be000, 0xc4204259e0, 0xc4201b4700, 0x0, 0x0, 0xc)\n        /usr/local/go/src/cmd/go/pkg.go:940 +0x12b6\nmain.loadImport(0xc4201bc748, 0x25, 0xc42001a004, 0x6d, 0x0, 0xc4204259e0, 0x0, 0x0, 0x0, 0x0, ...)\n        /usr/local/go/src/cmd/go/pkg.go:374 +0x470\nmain.loadPackage(0x8488e5, 0x1, 0xc4204259e0, 0x0)\n        /usr/local/go/src/cmd/go/pkg.go:1658 +0x28f\nmain.packagesAndErrors(0xc42014e340, 0x1, 0x1, 0xc42014e320, 0x20, 0x7f3a60)\n        /usr/local/go/src/cmd/go/pkg.go:1703 +0x337\nmain.packagesForBuild(0xc42000c140, 0x1, 0x1, 0x893c68, 0xc42001c040, 0x0)\n        /usr/local/go/src/cmd/go/pkg.go:1719 +0x75\nmain.runBuild(0xa27440, 0xc42000c140, 0x1, 0x1)\n        /usr/local/go/src/cmd/go/build.go:440 +0xd4\nmain.main()\n        /usr/local/go/src/cmd/go/main.go:181 +0x624\n~~~\nit looks like a golang error, but all my tests run on the same machine.. sorry for those Chinese characters in the snapshot and output, i should have changed LANG environment variable. if any confusions about this, please tell me.. the problem is caused by incorrectly make soft link, closing this issue.. @ramya-rao-a i use vscode-go 0.6.52, but vscode does not notify me there is a newer vscode-go version. @ramya-rao-a the problem occurs when golang 1.8rc1 is used, after upgrading to golang 1.8rc3, the problem is gone, thanks!. \n\ni use vscode behind a proxy. you can see my proxy program receives update query requests from vscode\nplease ignore those Chinese characters which are irrelevant to this subject.. @ramya-rao-a \nhttps://golang.org/doc/effective_go.html#commentary gives an example of block comment which has no space/tab before the lines.\nall of .go source files in Kubernetes project have package comments , and all of these package comments have no space / tab before the lines.\ngogland EAP version can colapse this kind of comments even when they don't have no space / tab before the lines.\n\nso i sugguest :\neven when multi-line comments have no space/tab preceding the lines, vscode / vscode-go should colapse this kind of comments.\nps: should i file a new issue under microsoft/vscode project ?\n. @ramya-rao-a \n\nDoes it happen every time you try rename? \n\nno , today i renamed over 10 variable names, but only one time this error occurred.\n\nDoes it happen only on certain files/projects or all the time?\n\nnot all the time, i have no idea whether its bound to certain files/projects.\n\nIs this in Windows?\n\nUbuntu 16.04.1 LTS. sorry about this, i should have mentioned this.\n\nIf you are not on Windows your machine would have the diff cmd available.\n\non my machine, diff command does exist\n\n# diff --version\ndiff (GNU diffutils) 3.3\nCopyright (C) 2013 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nWritten by Paul Eggert, Mike Haertel, David Hayes,\nRichard Stallman, and Len Tower.\n\nthis is my guess :\nwhen i renamed a variable name in one file, and didn't save this file, then if i rename another variable name in this file, is this the reason why the error occurred?\n. @ramya-rao-a \n\nCan you reproduce the error using the steps you outlined in your guess?\n\nno.\nthere is a message popped up and renaming process terminates :\n\nthese files have been changed in the meantime. /path/to/fileA, /path/to/fileA. I know lint and compile events are printed in output view, but sometimes i forget to select Go from the select options, maybe we should set Go as default when Go project is detected.. @ramya-rao-a . \n",
    "SimonBuckner": "I've just had this problem. This was caused by me commenting out one of my files in a package. Once I uncommented the package line and saved the file. Once I did that errors were highlighted properly.. ",
    "sdwarwick": "the complete error message is as shown.  I did a copy/paste.  it is preceded by a red \"error\" box\nGOPATH:\nC:\\Users\\xxx\\Google_Drive\\golang;C:\\Users\\xxx\\Google_Drive\\projects\\project name\\application\nnote that \"project name\"   is a directory name which has a real space between two words as shown.\nthe actual files are in a sub-directory  of application:\napplication\\src\\mypackagename/*.go\nspace in path proven not to make a difference. from the debug console:\n```\nFile not found (\\\"C:\\Users\\xxx\\Google_Drive\\projects\\directory name\\application\\src\\pkgname\\afile.go\")\n/C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:90 \n```\nall of my projects are under this directory structure, and are all experiencing this problem.\n. this is great - I have followed your instructions.   the filePatch.fileName has the slash in front..\n\"\\\"C:\\\\\\\\Users\\\\\\\\xxx\\\\\\\\Google_Drive\\\\\\\\projects\\\\\\\\dir name\\\\\\\\application\\\\\\\\src\\\\\\\\dname\\\\\\\\fname.go\\\"\"\nwould it be helpful to set up a chat to work through this?  . I have moved the breakpoint up to buildTags.. it is returning the following:\n\"\\\"\\\"\"\nI have checked all of my workspace and user settings.json files.. I have nothing like this.   I've cleared the settings files and still get it.\n. the forward slash was actually there, but github mistook it for markup!!!   I changed it to \"code\" so it would show up..  sorry\n. It has been shown that when git for windows is installed in the standard windows path,  the vscode-go integrated gorename function breaks due to a slight difference in output from other diff implementations.  \nchanges to support a diff string with quotes around the file path is requested.\n. I'm thinking that any hidden dependency on other tools in the path is just bad practice.  this has been sitting out here without action for a while now.  . \n\nHere is an example from Netbeans/Intellij  I was actually surprised that this capability was not available in vscode. . ",
    "treed": "I definitely have issues with using gogetdoc on source that uses the Kubernetes client library. VSCode ends up spawning multiple gogetdocs that each take 1GB+ of RAM, consuming a lot of I/O and eventually causing my VM to swap.\nAre the alternatives to gogetdoc feature-wise comparable?. Okay, thanks. I'll try those out. I can't remember what prompted me to try gogetdoc instead of the default.\nFWIW, all of the gogetdoc processes are for the same file (which is the one I'm editing) and seem to get launched in quick succession. I'm not sure if that matters for #1265, but it seemed worth mentioning.. The default docs tool doesn't seem to actually give me documentation on hover. The language server does have reasonable-ish hover data, though. So far it hasn't taken my machine down, but I'm at the end of my workday. I'll report back tomorrow if I have any performance problems with it. Thanks!. Sadly, I also can't really help. I got a new job in the meantime and no longer have access to the project that was causing the problem. But if anyone else can find a project using the Kubernetes client library, that's the one that drove this problem for me.. ",
    "kentquirk": "Well, if you do something like this:\ncd mypkg\ngo build -o TMPFILE.o\ngo tool nm TMPFILE.o -type |grep \" T \"   #that's space-T-space\nrm TMPFILE.o\nYou'll get something that looks like the set of publicly defined symbols in the pkg. \nBut you have to build the package and generate an object file in order to get that, and it's decorated with stuff the linker needs cares about that you'll have to strip off. It's probably not the right solution but it might point someone else to it.. @ramya-rao-a -- I have started working on this, but I need some guidance, please. Here you indicate using the coverageDecorator setting as an object, which is totally possible -- but the problem is that if we do it this way, then the settings editor can't provide editing help (as it does with enums, for example). I have a design which adds several settings (for color of both highlight and gutter decorators, as well as the appearance in the gutter), each of which has a type and therefore could be easy to edit. But in #1649, you say \"we already have way too many settings\". \nI personally think that extra settings are OK as long as the defaults are good, but if you feel strongly enough to reject a PR with new settings, then I will do it as an object on coverageDecorator instead (as noted above) and then people will have to edit it manually. \nThe third alternative is to leave it as non-settable but just change the colors to blue/yellow, and also change the gutter appearance.\nPlease tell me which of these you prefer and I can make it happen this week.. After thinking about it, I decided to go with the single modification to go.coverageDecorator, so it creates no new settings. The setting is now an object instead of a string, but if a string is left in the settings from a previous setup, it still works properly.\nThe setting now looks like:\njson\n    \"go.coverageDecorator\": {\n        \"type\": \"highlight\",\n        \"isWholeLine\": false,\n        \"coveredHighlightColor\": \"rgba(64,128,128,0.5)\",\n        \"uncoveredHighlightColor\": \"rgba(128,64,64,0.25)\",\n        \"coveredGutterStyle\": \"blockblue\",\n        \"uncoveredGutterStyle\": \"slashyellow\"\n    }\nThe PR is up as #1695.\n. FWIW, I was able to modify ~/.vscode/extensions/ms-vscode.go-0.6.80/out/src/goCover.js to make the corresponding change, and it works correctly now on my machine.\n. On my mac, I'm using go version go1.10.1 darwin/amd64. I thought I had linked to the golang source, but apparently I failed to paste that link. Here it is:\nhttps://github.com/golang/go/blob/master/src/cmd/cover/profile.go\nIt doesn't appear to have changed lately. Note these lines:\nhttps://github.com/golang/go/blob/master/src/cmd/cover/profile.go#L29\nhttps://github.com/golang/go/blob/master/src/cmd/cover/profile.go#L56\nAlso, please note that my proposed change is equivalent to the current behavior if the value is only a boolean (either 1 or 0), but it continues to work if the value (as documented in the source) is actually a count.\nIt really has to be a count to explain the behavior of the go tool cover -html flag, which colors the HTML differently based on how many times the code has been run.. Thank you! I'll try to do that in the next couple of days.\nThank you so much for your work on this tool. It is really appreciated.. I feel like it would be useful to point out that govendor was part of an early explosion of vendoring tools back around the time of go 1.5 and go 1.6, but that it's not really considered current anymore. \nPersonally, I used to use govendor, but I transitioned to glide in late 2016, and to dep early this year, and now that there is a proposal out to do it officially in Go, I plan to move to that as soon as it's stable. Obviously, everyone's needs are different, but rewriting dependencies is not something most organizations seems to want to do, and if I were on the vscode team (I'm not) I probably wouldn't prioritize supporting govendor.\n. Linking to PR #1693 . This failed for reasons that I think have nothing to do with me, and I can't figure out how to restart the build except to make another commit.. @ramya-rao-a I did another comment-only commit and this now passes. Ready when you are.. The change to go-cover works fine for me. And I've just tested the visual settings (thanks for integrating those!). They seem to be working fine.\nI think it's a fine idea to ask for help testing.. For what it's worth, I tried setting the opacity of the gutter svg to semitransparent, but it looks like it's not overlaid. I'm guessing there can be only one gutter decoration per line?. This is the code coverage system accidentally being turned on.\nUse Cmd-shift-P and select the \"Toggle Test Coverage in Current Package\"  command and it will go away.. ",
    "anacrolix": "@ramya-rao-a definitely all symbols. The feature is for developers to move around a code base, there are other Go tools for checking the external API of a package already.. Yeah it's the Ctrl + . , Ctrl + L in GoSublime. All the symbols in the current package are shown.. ",
    "davecheney": "My opinion is use go install.\nDominic or Damian would be better people to ask about tool recommendations.\nOn Thu, 12 Jan 2017, 18:28 Matt Aimonetti notifications@github.com wrote:\n\n@davecheney https://github.com/davecheney do you have a recommendation\nfor us?\nVsCode has a feature to optionally auto build the package you are editing.\nI was suggesting to add the -i flag to cache dependencies.\nQ1: is there a downside to installing non main packages ? (As in should we\noffer a way to turn that off)\nQ2: is go install a better approach?\nQ3: any other recommendations to make actions at save time faster (go\nbuild, vet, lint...)?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/673#issuecomment-272095366,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAAcAz_u3LgbkFuGTOv_l-hE7mu6xMciks5rRdY1gaJpZM4LBHQH\n.\n. In the scope of one run, neither is faster. In the scope of subsequent builds, the latter will be faster.\nOn 12 Jan 2017, at 18:32, Ramya Rao notifications@github.com wrote:\nAnother note: The main intention of running go build at every save, is to show compiler errors if any.\nWhat is being debated here is that when dependent packages have not changed, which is faster go build -o or go build -i\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "ankon": "Just to confirm/clarify:\n\nhttps://twitter.com/ankoninchen/status/817391388107096064\n\nI did that. If I understand this ticket correctly then the go extension will also trigger a full compile on saving? In my case though this isn't that expensive because most of my packages are installed the moment I start the debugger for the first time?. Testing done: \"Launch extension\", then open the workspace that contains the go file from the issue, debug it, and verify that the output is what we expected.\nI'm not sure how to write an automated test for this, and would need help (or at least some pointers) for that.. ",
    "yaronsumel": "@ramya-rao-a with \"go.docsTool\": \"gogetdoc\" I'm not getting any definition.. hey @ramya-rao-a @zmb3 . actually in go-lang-idea-plugin they sending the user to this file. anyway i cant even see the completion for builtin functions.. @ramya-rao-a  nothing on hover for builtin (godoc and gogetdoc). completion works fine.. @ramya-rao-a  nothing on hover for builtin (godoc and gogetdoc). completion works fine.. ",
    "qiuhaotc": "thx when i try this https://github.com/Microsoft/vscode-go/issues/441,problems seemed to be solved.. fixed with reinstall. @mattetti sure. ",
    "logicaleak": "No after, however the issue is more about the visual studio not detecting the packages that are local to project folder. Because the packages are not found, it cannot figure out they are used and removes them. However, the project is compilable with the import.\nAs I said my bashrc has the GOPATH set. And I also tried running vscode from the command line that has GOPATH set to correct path ( the folder which has src, bin, pkg )\nAll in all, I think the problem is more about vscode not detecting my local packages, rather than removing imports.. Maybe I should edit the title . The path command showed the correct path. However I somewhat solved the problem. Although it did not work before, if I give the path of the package with the name of the project folder before it, it works. I think this was what I was supposed to do in the beginning as well. What misdirected me is that, for the local packages in project folder, vscode does not provide any autocompletions as opposed to packages from other projects in src. This leads to some confusions.. ",
    "ameissnersofi": "+1 this issue.  All these godef processes really eat up my CPU and don't leave me with much anything else.  Please fix this bug!  . Yes, I did upgrade.  I can't remember how long ago, but this all seems to be connected because delve debugger is also having trouble on Sierra.  \nI'll run this command first thing in the morning and report back.  Thanks for responding so quickly!. @ramya-rao-a yes!  I'm sorry, I meant to respond sooner.  I've got my team back up and running on vscode again.  Thanks so much!!!. I'm seeing similar behavior, but not with cmd folders.  I'm seeing this whenever a module is present (go.mod, go.sum files)\n. ",
    "zakokun": "yes! I updated those tools and it fixed!  I can use vscode again. thank you very much~ @ramya-rao-a . ",
    "hhrutter": "I already did that. I still get godoc processes running wild.. - VSCode Version: Code 1.9.1 (f9d0c687ff2ea7aabd85fb9a43129117c0ecf519, 2017-02-08T23:31:51.320Z)\n- OS Version: Darwin x64 16.4.0\n- Extensions:\n|Extension|Author|Version|\n|---|---|---|\n|Go|lukehoban|0.6.53|\nThis latest environment still has the issue of godoc processes clogging the CPU.\nBut.. gogetdocs did the trick for me!\nI suggest \"go.docsTool\": \"gogetdoc\" as default value.\nThanks :). Hi,\nI am already on gogetdoc.\nWhen I do a \"Find All References\" I get a code lens\nshowing me the same containing struct with the type highlighted \nto which definition I would like to be taken.\n. Sure.\nJumping to the definition works in this example for f1 and f2 but not\nfor the anonymous members of type foo and *foo. \n```\npackage main\ntype foo struct {\n    i int\n}\ntype bar1 struct {\n    foo\n    f1 foo\n}\ntype bar2 struct {\n    foo\n    f2 foo\n}\nfunc main() {}\n``. I know this works. I think there has been some misunderstanding\nI want to inspect the members of a struct and be taken to each members definition.\nThat's why I left out the implementation ofmain`,  because it's irrelevant here.\nLike when I hover over the bar1 struct I 'd like to inspect the definitions for f1 or the anonymous member foo especially in my case when they reside in different source files.\nFor f1 it works but not for the anonymous member  of type foo one line above.\nHow did you make this animated gif?\nI love it. I'd like to post what I mean by sending you one.. There you go..\n\n. Excellent. So the codelens issue I mentioned is tied into all this.\nThe codelens is showing the doc for the embedded field but not for its type which makes\nmore sense as @zmb3 already figured.\nI am going to check out @zmb3 's fix once its merged in and report back.\nThanks!. \ud83d\udcaf working. Thx @zmb3 & @ramya-rao-a . Exactly.\nThe codelens used to show field doc for embedded fields and now it correctly shows the type doc which makes much more sense.\n\n. I see. So how do you call this little popup displaying the type info?\n. Like in the browser. ok\nOn Tue, Jul 4, 2017 at 8:24 PM, Ramya Rao notifications@github.com wrote:\n\nHover info or tooltip\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1044#issuecomment-312931586,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKzDK8xytqX4XtIw4o1TmC0Q4u2_Cze0ks5sKoNSgaJpZM4OAyNe\n.\n. There you go Ramya...\n\nbefore:\n`package main\nimport \"fmt\"\ntype foo struct {\n    bar string\n}\nfunc main() {\nf := []foo{\n    foo{bar: \"abc\"},\n    foo{bar: \"def\"},\n}\n\nfmt.Print(f)\n\n}after:package main\nimport \"fmt\"\ntype foo struct {\n    bar string\n}\nfunc main() {\nf := []foo{\n    {bar: \"abc\"},\n    {bar: \"def\"},\n}\n\nfmt.Print(f)\n\n}`. \ud83d\udc4d you're right - sorry me :(\nbut then the comment for go.formatFlags in user settings needs to be fixed to:\n// Flags to pass to format tool (e.g. [\"-s\"])\nI just don't understand why in the world would anybody choose anything other than gofmt as the default go formatting tool in an IDE? gofmt is the definitive standard for formatting go source code and goreportcard.com which many Go projects integrate into their CI chain also requires projects to be formatted with gofmt -s for QA reasons.\nI vote for making gofmt the default.. I've been looking more into this.\ngoimports is another option for formatting.\nThis is not good for 2 reasons:\n1) goimports main job is to fix the import declaration in source files.\nThis is smth we always want to have irregardless of the choice for formatting.\n2) goimports also takes care of formatting in gofmt style. Good - but it neither comes with the -s cmd line option as far I can see, nor does the built in formatting take care of anything gofmt -s takes care of.\nMy conclusion here:\nThis extension needs to have the import statement fixing added as\na separate flag in settings, maybe like: \"go.fixImportsOnSave\": true\nThat way we still can choose gofmt with corresponding flags like -s\nas long as the formatting tool gets executed after goimports.\n. I disagree.\nThere are 2 different actions here: formatting and fixing (also missing)\nimport declarations.\nOne should be able to enable each individually and independently.\nWithout having looked into how goimports executes the formatting part,\ngofmt is part of the google go tools and it makes a lot of sense to keep it\nseparated and not mixed into some other tool.\nOn Sun, Dec 17, 2017 at 5:48 AM, Ramya Rao notifications@github.com wrote:\n\nI'd much rather prefer the goimports tool to support the -s flag instead.\nThere was a discussion on this from 2014. See https://groups.google.com/\nforum/#!topic/golang-nuts/RyWfs9ddn8c\nThough the then author of goimports wasn't too keen on supporting the -s\nflag, I am sure they wouldn't mind if a PR was submitted to support the\nsame.\nIncluding @erikjohnston https://github.com/erikjohnston in this\ndiscussion as he brought up the same point in #435 (comment)\nhttps://github.com/Microsoft/vscode-go/issues/435#issuecomment-346626619\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1411#issuecomment-352231902,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKzDK5alvm17_NssouVWDV_CTkMQrOQ1ks5tBJ0BgaJpZM4RDU_r\n.\n. Maybe we have too many options..\nI want to run whatever sequence of actions I want when saving my source file and I think I am not the only one. Both goimports and gofmt are defacto standards in the go community and this should be baked into vscode's go extension either explicitly or under the hood. I don't see any reason why someone would not want to rely on this.\n\nI am against mixing together 3 tools as formatters when not all of them are real formatters - It is confusing. Maybe this is smth worth reconsidering.\nOn Sun, Dec 17, 2017 at 8:44 PM, Ramya Rao notifications@github.com wrote:\n\nWhen not using goimports or goreturns as a formatting tool, we do have\nanother way to add missing imports which is via the code actions (the light\nbulb that appears next to an error if there is a possible fix)\n[image: codeaction]\nhttps://user-images.githubusercontent.com/16890566/34083089-72eb3300-e31f-11e7-94d3-f72eac6b45ba.gif\nWe can add another code action for removing unused imports as well.\nBut running multiple tools when formatting a file is something that I want\nto avoid.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1411#issuecomment-352280168,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AKzDKy_s9ncNw-qXbyR4EhKLcSpFMwIyks5tBW8igaJpZM4RDU_r\n.\n. \n",
    "dvdplm": "I am seeing this too but chalked it up to using Insiders builds and go 1.8beta1. I am also on macOS Sierra. AFAICT it is not project specific and happens on smaller projects as well. Killing the godocs process \"fixes\" the problem but it returns when I leave the code editor idle for a while.. @ramya-rao-a I did re-install the tools but still had the problem. Yesterday I had a full day of coding and it never happened. I updated to latest Insiders build yesterday morning though so I was hoping that a fix snuck in!. @ramya-rao-a This just happened again, same pattern: out of the blue the fans go nuts and when I go look it's a godoc process running wild. It does not stop by itself. I will try using gogetdocs now.. @ramya-rao-a updated, will keep watching for strangeness, thanks!. ",
    "legendtkl": "go.useLanguageServer works.. ",
    "entonio": "Hi. I'm sorry for the delay, I'm not always here.\nI'm using Sierra and have just now came across the problem again (upgrading go 1.7.3 to 1.8).\nNone of the features worked.\nI then downgraded to 1.7.3 and the problem went away.\nThen I brew switched to 1.8 again, and things kept working.\nI don't know what the issue may be. Unfortunately, I only opened the developer tools the second time, and I haven't been able to replicate the issue. But I haven't rebooted yet, so who knows whether something hangs on some leftover temp file from 1.7.3.\nIf it happens again, I'll let you know.. Weird.\nSince 1.8 appeared to be now ok, I deleted go 1.7.3 from the Cellar and things stopped working again. This is consistent with the experience above: brew upgrade did have 1.7.3 deleted, and it was only my reinstalling it that it was back on the filesystem again.\nClicking an aliasing of a function from another package:\n````\n[Extension Host] Error: Command failed: /Users/.../go/path/bin/godef -t -i -f /Users/.../FSExt/fsdb/main.go -o 347\ngodef: no identifier found\nat ChildProcess.exithandler (child_process.js:218:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:877:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n\n````\nHovering over a package name:\n````\nextensionHost.ts:282 [Extension Host] Error: Command failed: /Users/.../go/path/bin/godef -t -i -f /Users/.../FSExt/fsdb/main.go -o 333\ngodef: no declaration found for common.FSDB.Server\nat ChildProcess.exithandler (child_process.js:218:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:877:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n\n````\nClicking a function call:\n````\nextensionHost.ts:282 [Extension Host] Error: Command failed: /Users/.../go/path/bin/godef -t -i -f /Users/.../FSExt/fsdb/main.go -o 365\ngodef: no declaration found for common.FSDB.Folder\nat ChildProcess.exithandler (child_process.js:218:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:877:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n\n````\nThen, I simply restored go 1.7.3 to the filesystem... and things started working, even without restarting VSCode.\nThis puzzles me. It's not a matter of not finding godefbecause 'no declaration found' looks like an output of it (but is it?). It's not a matter of path precedence, since neither 1.7.3 nor 1.8 are on the path, rather 1.8 is symlinked by homebrew. Yet, VSCode will work if and only if go-1.7.3 is present on the filesystem.\n$ ls -l $(which go)\nlrwxr-xr-x  1 ...  admin  23 15 Mar 19:40 /usr/local/bin/go -> ../Cellar/go/1.8/bin/go\n$ ls -l /usr/local/Cellar/go\ntotal 0\ndrwxr-xr-x  9 ...  admin  306 19 Out 18:39 1.7.3\ndrwxr-xr-x  9 ...  admin  306 15 Mar 18:51 1.8\n. The go version runs consistent to what I've selected using brew switch.\nRunning Go: Install Tools seems to have solved the issue. I've deleted go 1.7.3 and everything keeps working. I still don't understand the behaviour I was having, but then again I don't know how go def is looked up by the extension, so that may be it.\nThank you very much, @ramya-rao-a. If the issue resurfaces I'll let you know. But I'm confident!. ",
    "f0zi": "Attaching a diff that solves that for me.\n\nNote: I did findPathSeperator because I often have something like \"program\": \"${workspaceRoot}/test\" in my launch.json which gives the wrong results on Windows.. Use this instead, fixed \"completely different\" case:\ngoDebug.ts.diff.txt\n. @roblourens So, to move things forward, I don't mind to remove the negative forward assertion, are there any other changes you would like to see? \nAgain, please make sure you click 'view changes' as not all my comments appear here on this page.. Can you please try if this fix works for you?. @mariusgrigaitis Ack. Please let me know once you tried it.. Thanks, @mariusgrigaitis. I'd like to test another edge-case and I'll do a PR once I'm back home.. It's PR #1014 . This fails for the (for me) common case where I share a project (and it's launch.json) and open it on different platforms and having a setting like \"program\": \"${workspaceRoot}/test\" because ${workspaceRoot} has backslashes on Windows but slashes on Unix.. This finds (and counts) common path elements. Think:\n/home/user/go/src/foo/bar\nC:\\Users\\user\\gohome\\src\\foo\\bar. This removes the common elements found above.. The result is that you can now set breakpoints and debug libraries in e.g. /home/user/go/src/foo/baz even though your main package is in /home/user/go/src/foo/bar. Not sure how that would help. Trying to match absolute Windows paths like C:\\ or C:/ and share paths like \\\\server\\share. It also matches \\\\?\\, so it does not need it's own check.. Yes, trying to skip an escaped space, which is the only backslash I regularly encounter on unix systems. Not sure how delve and this plugin handles filenames on unix, so you might be right, it might not be necessary. I can't try this right now, but I'll give it a try once I have the chance to. That said, I think its save to leave it in as spaces are not allowed at the beginning of a filename on Windows.. I think an alternative would be to use the local GOPATH and add a setting for the remote GOPATH. Everything after the $GOPATH\\src\\ could be used, however this solution makes some assumptions that are not always true (like that the code actually is in $GOPATH and that there is a /src/ folder in there, which can be false especially when remote debugging) while the current solution \"just works\".. Remember this is initialization. The actual paths we get from remote or send to remote are the path arguments to toDebuggerPath and toLocalPath. Now we have four components: \n- The main module path, not visible here, but worth noting as it played a role in the old code because localPath was equal to main module path, e.g. C:\\Users\\foo\\go\\src\\foo/bar. Note the mixed separators come from ${workspace}/bar. Launch.json is shared between Windows & Unix.\n- The localPath, now shortened to e.g. C:\\Users\\foo\n- The remotePath, shortened to e.g. /home/foo2\n- The argument to the function, e.g. /home/foo2/go/src/foo/baz for toLocalPath or (think set BP) C:\\User\\foo\\go\\src\\foo\\baz for toDebuggerPath.\nThe functions toLocalPath and toDebuggerPath just replace the beginning of the paths and change the path separators. . also for \\\\server\\share. ",
    "DashShen": "I have the same problem after updating to the version 1.8.0 . When I try to format my python code with python extension, it causes the error:\nCannot read property 'substring' of undefined. ",
    "monty-georgiev": "I also have the issue after updating to 1.8.0 and only with my python code.\nI'm running it in OS 10.12.1. ",
    "openingnow": "same here with c++ extension. maybe after 1.8.0 update\nbut after formatting one line by press \"return\" after ;, it works fine.. ",
    "mdmarek": "@roblourens I open a Go source file in my project, any project, and try running CTRL+SHIFT+I, the consequence is that a small header drops down with the warning. See embedded screen shot.\n\n. @roblourens: is there a way I could get a stack trace or something useful for you from that warning? If you tell me how I'd be happy to grab the information.. @roblourens Here is the screen shot with the developer tools console:\n\nA couple of notes:\n\nI had to try CTRL-SHIFT-I maybe a dozen times before the stack trace printed, the warning always appears, but the stack trace for some reason does not.\n\n2.\nIf you notice in example.go you can see that there is no \"newline\" terminating the file. When trying to get the stack trace in one of the attempts I accidentally added a newline to that example.go file, and with the newline the CTRL-SHIFT-I works as expected.\nI then tried testing CTRL-SHIFT-I in some other files, indeed, if the file is newline terminated then CTRL-SHIFT-I works, if you remove the newline termination, CTRL-SHIFT-I stops working.\nHope this helps. \n. Thank you Rob . ",
    "bipin-nag": "Also facing the issue. Thanks @roblourens for the solution.. ",
    "CfirTsabari": "@DashShen @monty-georgiev I had the same problem in python code , what solved it for me was to add an empty line to end of the file. . ",
    "nsf": "Autobuild feature is a hack, the proper way to do it for a program like gocode is to parse source files directly instead of relying on up-to-date and built package files. I don't have time or enough enthusiasm to be honest for such a big refactoring, so it won't happen any time soon within gocode project. Maybe somebody will make a better gocode alternative. I've seen some attempts, sadly they don't process the source files, but follow the same path and use binaries. Which doesn't make them much different from what gocode can offer. For a proper autocompletion tool it's important to parse source files for up-to-date results and for documentation also. Maybe one day somebody will make something like that. Go is a simple language to process and analyze. But seems like in open source communities if there is a tool which does the job at least to some reasonable level of acceptable, nobody wants to make a better one. And I'm not judging, people do whatever and whenever they feel like doing. So am I. But yeah, sorry about that little chaos caused by autobuild.. I think it worked like you would expect once, but apparently it doesn't anymore. I will take a look at it on the weekend.. Just want to say that I took a look at the issue and it's more complicated than it seems. Not sure how long it will take for me to solve it. Don't have much time to work on it. The problem gets worse because this is valid Go:\n```go\npackage main\nimport (\n        es1 \"gopkg.in/olivere/elastic.v3\"\n        es2 \"gopkg.in/olivere/elastic.v3\"\n)\nfunc main() {\n        es1.SetErrorLog(nil)\n        es2.SetErrorLog(nil)\n}\n```\nIt compiles just fine. But in gocode I have only one package instance per absolute package path. And it will be hard to forward the alias used under a given autocompletion request to that package and basically figure out which prefix I should use for pretty printing the types.\nMy initial idea was to create a \"canonical package aliases map\" for a given request, based on the current file. But as you can see it can be ambiguous and instead I have to make a \"canonical package aliases map\" per expression. But even there it's ambiguous, you can imagine something like (btw not sure if it's valid Go):\n```go\npackage main\nimport (\n        A \"mypackage\"\n        B \"mypackage\"\n)\nfunc main() {\n        (A.Value + B.Value).CallMe#\n}\n``` \nIf that CallMe method contains types from a package, which alias should I use?\nBut anyways, I realise that people don't do that weird stuff in practice (using different aliases for the same package under the same scope) and I'll try to come up with something practical. Again, don't know how much time will it take. Maybe this weekend, maybe a few more weeks. Sorry about delays, I really don't have time to work on gocode and gocode's code is a giant mess when it comes to package import.. This issue is ok.. ",
    "bylevel": "@ramya-rao-a Yes, this will fix #465 . ",
    "acroca": "I figured it out checking the code. Is the go-symbols list used anywhere else? like for example going to the implementation of a function...?\nAlso, re-ordering the list to show project matches first and vendor matches after would work too, not sure if that's doable though.\nMy main problem, other than speed building the symbols list (~3s) is that the project matches are in the middle of the list... I opened a PR on the main repo, but it'll probably get ignored: https://github.com/newhook/go-symbols/pull/4\nMy fork has the change: https://github.com/acroca/go-symbols, you can use that one. It supports multiple folders too, maybe other people want to ignore other things like test.... Cool! Thanks @ramya-rao-a . @ramya-rao-a Awesome.. @ramya-rao-a any updates with this?. right, I had a look at the related issues around the language server and doesn't seem to be something happening any time soon.\nThanks!. Awesome, Thanks. ",
    "josh-tepper": "Thanks for getting back to me.  In response to your questions:\n\nWhen I peek the definition or hover, it actually just doesn't do anything.  There's no error message; the ui literally does nothing.\nSetting \"go.docsTool\": \"gogetdoc\" seems to solve the problem, but jump to declaration/peek/etc are much slower (but now work for everything)\nWhen I run godef for the symbol, it just says \"no declaration found\".  See below.  First as a proof of proper configuration, here is an example of an expression that does work:\n$ godef -f api/main.go environment.SetFromString\n<PATH REDACTED>/environment.go:41:6\nHere is an example of one of the offending expressions:\n$ godef -f api/main.go state.Init\ngodef: no declaration found for state.Init\nFinally, running the failed godef command with gogetdoc yields the proper results:\n```\n$ gogetdoc -pos api/main.go:#870\nimport \"clarifai/state\"\n\nfunc Init()\nUndocumented.\n```\nWhat is the best way to proceed?  Should I file an issue against godef?  Are there other debugging steps that I can take?\n. @ramya-rao-a,\nI filed a godef issue (linked above), and I pinged it again last week.  I haven't gotten a response.  Do you guys have any godef contacts that you can reach out to about this issue?  I would love to see this fixed -- setting the docsTool to godef gives me a way snappier experience than setting it to gogetdoc.\nThank you in advance!. I saw the same issue -- that go to def, find refs, etc. stop working after some period of time, and this behavior started when I switched go.useLanguageServer to true.  Unlike kuncevic, I did not experience it beforehand (I was previously using gogetdoc).  Restarting resolves, but this happens consistently and often.\nI'm running the 0.6.55 version of the extension on vscode 1.10.2.\nLet me know if there is anything else you need.  The lang server was significantly faster than gogetdoc which I used because godef is broken.  Nonetheless, when useLanguageServer is true, the tooling stops working after only 30min so I can't really use this configuration.. Ok -- this happened again.  This time, it was accompanied by vscode becoming slow as well.\ngo-langserver was running, but it was spiking the cpu:\n$ ps -O %mem,%cpu,rss 32815\n  PID %MEM  %CPU    RSS   TT  STAT      TIME COMMAND\n32815  5.3 189.0 892168   ??  R     82:25.01 /Users/joshtepper/work/clarifai/go/bin/go-langserver -mode=stdio\nHad to restart vscode which became laggy even when typing. Since the last comment, I restarted, and now seeing the same thing again -- even larger cpu number:\n$ ps -O %cpu,%mem 71085\n  PID  %CPU %MEM   TT  STAT      TIME COMMAND\n71085 326.7 10.2   ??  R     28:57.74 /Users/joshtepper/work/clarifai/go/bin/go-langserver -mode=stdio\nI have to switch configurations so that I can work.  But let me know if you want me to switch back to test anything.\n. @keegancsmith -- take a look at the numbers from my process table above.  They are not consistent with the high memory reports in the issue you linked.  On there was very high cpu usage.  This was on a machine with 16GB of memory.  I'll try to get some better statistics about page faults/memory usage/cpu/maybe an strace/etc the next time this happens.. Any progress on this?  I just wanted to check that this is not blocked on more reports from me.  If so, I apologize for the confusion!  I'm not currently running the langserver because it wasn't usable, but I can switch back if you need more statistics.  Let me know!. Unfortunately, while I saw the high cpu situation again, I'm not seeing any logs from go-langserver.  I basically see a blank golangserver channel when I look at the output in vscode:\n\nAnd the output file that I specified is 0 bytes long.  Looking at the go-langserver command from the process table, I can see that it's not being started with --trace or --logfile (though, note the very high CPU!):\n$ ps -O %cpu,%mem 48762\n  PID  %CPU %MEM   TT  STAT      TIME COMMAND\n48762 335.3  7.1   ??  R     19:42.34 /Users/joshtepper/work/clarifai/go/bin/go-langserver -mode=stdio\nHere are the go. settings that I've specified:\n\"go.docsTool\": \"gogetdoc\",\n    \"go.formatOnSave\": false,\n    // because gogetdoc is slow and godoc is broken, use the experimental language server\n    // from sourcegraph instead; but this actually causes issues as well\n    \"go.useLanguageServer\": true,\n    \"go.formatFlags\": [\"trace\", \"logfile\", \"/Users/joshtepper/project/golang_log.txt\"],\nI do specify go.docsTool, but the go.userLangaugeServer overrides it (it's just there because that's what I revert to; I've commented it out, and still no logs).\nNote: I have version 0.6.57 of the go extension, on vscode 1.10.2. I apologize for the delay -- I've been away and should have noted that here.\nI've grabbed a few examples of the logs from the high cpu situation.  Unfortunately, I didn't realize how much actually code and code structure is included in the logs, and the consensus here is that we're not comfortable sharing it.  This is a closed source project\n@keegancsmith -- is there a way that I can do analysis of the process?  Is there another flag that I can pass that will dump less of this code/structure to the logs?. Just wondering if there's any update on this.  Is there build that we should test?  @keegancsmith . This appears to completely solve the problem for me.\n$ ps -O %cpu,%mem,rss 27370\n  PID  %CPU %MEM    RSS   TT  STAT      TIME COMMAND\n27370   0.0  0.0   5836   ??  S      0:48.00 /Users/joshtepper/work/clarifai/go/bin/go-langserver -mode=stdio. @ramya-rao-a. Oh -- cool.  I won't have a chance to open up a PR this week, and then I'll be traveling for two weeks.  Will take a look at opening a PR when I get back. $ go env GOROOT GOTOOLDIR\n/usr/local/Cellar/go/1.7.4_1/libexec\n/usr/local/Cellar/go/1.7.4_1/libexec/pkg/tool/darwin_amd64\ngorename, OTOH, gives the same errors that I saw in vscode:\n\ncould not import ... /usr/local/Cellar/go/1.6.2/libexec/src/log (from $GOROOT) ...\n\n. It turns out that updating/re-building gorename solves the issue.\nI apologize for raising a spurious issue -- I didn't realize that gorename was the underlying tool, so I didn't previously know what to update.  Closing issue.. @ramya-rao-a have you seen this?  Should I file this with the sourcegraph folks or is this an artifact of the way vscode-go invokes or uses go-langserver?\nI just updated my langserver with go get, and I have this version:\n$ go-langserver -version\nv2-dev. unfortunately, nothing in the dev console.  I'll turn on tracing for the lang server to see how it's being invoked.  Will try to update later today. This seems to affect files in the git index (ie, staged files), but not changes that are just in the working tree. Do you observe the issue with files in the index?\nIt seems like it's probably a vscode issue because it also affects the java plugin.. @ramya-rao-a -- see the upstream issue.  It seems that the responsibility for handling index version is on the language plugins.  Not sure whether or not this is something that the go plugin would be interested in doing.. ",
    "jwendel": "@ramya-rao-a I dug into this a little as it was affecting me as well.\nIt looks like godef has 2 current problems (one has an outstanding pull request).\n1) import \"C\" causes godef to break.  See: https://github.com/rogpeppe/godef/pull/44\n2) At least on windows import \"golang_org/x/net/route\" from the net package breaks godef. Specifically it seems since all the files within the x/net/route import have a // +build header on all the go files for OSes other than Windows, Go complains there are no buildable sources files in the import and causes godef to break.. This is the code error:\nC:\\go\\src\\net\\interface_bsd.go:12:2: cannot find identifier for package \"golang_org/x/net/route\": no buildable Go source files in C:\\go\\src\\vendor\\golang_org\\x\\net\\route\n2017/01/23 21:33:57 } -> <nil>\nNotice it's an import in interface_bsd to the package: https://github.com/golang/net/tree/master/route\nAnd everything in that package is bsd specific implementations. So really, godef probably needs to be changed to not follow imports in files that aren't supported on the current platform. (That's at least my guess). ",
    "kuncevic": "Same thing here, F12 always stopping working after some time and intellisense stopped working as well. Right click Go to Definition, Peek Definition - all the same.  Had to restart vscode to get it back. \nI am on latest vscode 1.10.2 using typescript 2.0.10\nNode global version 6.9.2\nNode vscode version 6.5.0 . @ramya-rao-a ahhh, and I am not using the go extension, I have same issue with the typescript as I did mentioned in my first comment, sorry if it was not clear enough. \nIssues https://github.com/Microsoft/vscode/issues/20605 and https://github.com/Microsoft/vscode/issues/20686 quite related here. Sounds like it is not an issue with vscode-go extension itself.. ",
    "nolanjian": "@ramya-rao-a @roblourens thanks for your reply!. @ramya-rao-a this good, thanks so much! I will get the code to build again, and close this issus.. relate to #809, get the newest dlv, problem solve. ",
    "codmajik": "I think its because goreturns is run on the code on save. you can disable it by changing\n\"go.formatTool\": \"goreturns\", to \"go.formatTool\": \"gofmt\", in your workspace config. @ramya-rao-a Thanks for your feedback.\nThe case you provided is the actual use case for this and also the current implementation in GoSublime. \nWhere go.gopath is set in the global config and go.inferGopath is set in workspace config. Though\nI am adding code to allow the reserve when go.inferGopath is global and  go.gopath is set in workspace. @ramya-rao-a Thanks. \nI made those changes on my local checkout. I know it is not needed but I can create a new pull request with that as improvements. I just need to figure out how to test this with your current test suite.\nbtw vscode.workspace.getConfiguration('go').inspect('gopath') would give you the User Setting and Workspace Setting separately.\n. @ramya-rao-a, changes to make sure that if go.gopath is set in the workspace config and but go.inferGopath is set in User Settings then workspace go.path would take precedence.\nPS: should I delete the branch?\nPS 2: Does it make sense to add a notification for any of this. Hi @ramya-rao-a, @AlekSi \nI took a swing at this and got a working version here:\nhttps://github.com/codmajik/vscode-go/commit/3bf018bab0b86ccf16aeefb6286cab6a8f63e8aa\nas @nochso said, it is excruciatingly slow and vscode seems to be expecting a single result else it doesn't do anything.\nThere is one reason am not sending a push request and that is because registerImplementationProvider and ImplementationProvider are missing in the vscode-extension-vscode library (atleast what is currently deployed on npm). I manually overwrote my local copy with one from vscode repo directly for it to work.\nThis may be completely un-usable.\nCheers!!!. @ramya-rao-a, guru expects -scope to be a go package, so setting it to the workspace root may not work.\nI can try to be clever by figuring out the package, like so:\n\nusing the selected file ($HOME/mygopath/src/github.com/mycurrentproject/somespace/morepkg/my/face.go) look for a directory whose name looks like a domain eg: github.com\nthen go 1 level down still based on the filepath. eg: github.com/mycurrentproject/\ntry using that as the package: -scope github.com/mycurrentproject/...\n\nbecause go enforces folder structure it may works most of the times.\nwarning: this may completely be needless\nQ: should it be restricted to interfaces because guru go both ways. From concrete to interface and visversa. @ramya-rao-a it won't; ${workspaceRoot}/... would be /home/codmajik/gopath/src/github.com/codmajik/servicerouter/...  what is expected is github.com/codmajik/servicerouter/...\nI have been busy would get back to this in a few days.. @jackie-qiu ${workspaceRoot} is the full path of the folder opened in explorer. It is not computed.. for GOPATH to be inferred correctly the new folder would have to be in a valid gopath.\nex: /home/user/gopath/[src]/github.com/myusername/myproject gopath is inferred by looking for [src] in the path, which is done of vscode-go activation.\nSo if it doesn't change either vscode-go is not activatated, ie. no go file is opened yet or the path doesn't contain an src.\n. that is very strange, I am not unable to reproduce this.\nI have opened folders in the same gopath and separate gopath, still not able to reproduce this. I even tried with a new user account.\nHere is the code inferGoPath that handles this, its simple and straight enough to not contain any ambiguity. Maybe its a platform specific issue.\nBTW: the GOPATH is inferred from the current workspace path not the file path.\nAnyone else reading this can you try with an OSX to confirm.. @ziffusion @ramya-rao-a, sure, we can infer from the filepath, I would push an update. \nShould this be configurable? . @ramya-rao-a @ziffusion \n\nIt would only work when no workspace is open.\nGOPATH is set on initialization of the vscode-go, so the first time a go file is opened in a non-workspace vscode window, we infer from the file's path. \nDue to 2, we can't set it each time tab is changed. It would require to much change.\n\n\nAnother issue seems to be that the GOPATH setting is not visible to the debugger. That seems like a serious handicap, do you think?\n\nThat is very strange, I don't use the debugger that much. inferGopath is part of the global GOPATH detection scheme. it is right where the effect of go.gopath and co are applied.\n. ",
    "achekulaev": "The default behavior is annoying AF. Especially for a novice Go developer. I figured that some linting tool is doing that, but I'd prefer it did not do that and I rather learn Go by fixing errors instead of seeing code disappear and guessing why.. ",
    "junkblocker": "FYI, this implementation doesn't seem to show struct details whereas the default implementation shows struct members on hover.. ",
    "hoboman313": "I don't think it's a duplicate of that particular ticket. \nIt's some kind of a bad interaction between the highlighting ( linter error ) and multiline strings. I fixed the reported issue myself by removing 'string' from the variable declaration ( fixes the linter error ).. It appears that linting errors break highlighting for the rest of the file when they're on the same line as multiline strings.\nPaste:\nvar test string = `\n        test\n    `\ninto vscode to see what I mean. Remove 'string' and the highlighting is good again.. Yes, debugging works well otherwise. I'm able to create endpoints, step through them, etc... I see the related 'debug' binary get generated too.\nI did not have to install delve myself. I assume the plugin uses its own internal version.. Alright looks like a boneheaded mistake by me. \n${workspaceRoot} can't work in the launch config unless all your test files are also in the workspace root. The best way to do this is to change it to ${fileDirname} and to make sure your currently opened file is in the directory that you're looking to debug.. That's right. The program attribute must actually point to a directory which contains your tests.. ",
    "jpatters": "I've noticed that the fix for this has been merged and released in atom (https://github.com/atom/language-go/pull/111). Any idea when we will see it fixed in vscode?. Hmmm. Just updated to 1.12.0-insider and I'm still seeing this.. see attached\n\nInterestingly, it seems as though it is caused by a combination of var and . because the following two work\n\n. @50Wliu That is correct. *redis.Script is a pointer to the Script type in the redis package.. No. Not in that particular location (after the variable name but before the =).. Just wanted to drop back in and confirm that this is fixed and working for me now.. ",
    "50Wliu": "Could you create an issue on the language-go repository so I don't forget?. @jpatters Is *redis.Script the type of the variable? (No experience with Go, so I need to make sure I understand what's going on before trying to fix it). Cool, thanks.  One more question: can there be multiple period qualifiers, such as var test a.b.c?. ",
    "cxww107": "Hi Ramya,\nI noticed that cwd and env are ignored while debugging a test file. Is it possible to select the configuration for debugging test files?. I missed this parameter. Thank you!. ",
    "mcardosos": "I completely forgot about this :I\nYes it works :D Thanks!. Hello @ramya-rao-a ! :D\nOutput in the integrated terminal looks like this...\nPS C:\\Users\\mcardoso\\Documents\\goWorkspace\\src\\github.com\\Azure\\azure-sdk-for-go> go test ./storage/... -check.f StorageQueueSuite\nflag provided but not defined: -check\nUsage of C:\\Users\\mcardoso\\AppData\\Local\\Temp\\go-build442809434\\github.com\\Azure\\azure-sdk-for-go\\storage\\_test\\storage.test.exe:\n  -check.b\n        Run benchmarks\n  -check.bmem\n        Report memory benchmarks\n  -check.btime duration\n        approximate run time for each benchmark (default 1s)\n  -check.f string\n        Regular expression selecting which tests and/or suites to run\n  -check.list\n        List the names of all tests that will be run\n  -check.v\n        Verbose mode\n  -check.vv\n        Super verbose mode (disables output caching)\n  -check.work\n        Display and do not remove the test working directory\n  -gocheck.b\n        Run benchmarks\n  -gocheck.btime duration\n        approximate run time for each benchmark (default 1s)\n  -gocheck.f string\n        Regular expression selecting which tests and/or suites to run\n  -gocheck.list\n        List the names of all tests that will be run\n  -gocheck.v\n        Verbose mode\n  -gocheck.vv\n        Super verbose mode (disables output caching)\n  -gocheck.work\n        Display and do not remove the test working directory\n  -test.bench regexp\n        run only benchmarks matching regexp\n  -test.benchmem\n        print memory allocations for benchmarks\n  -test.benchtime d\n        run each benchmark for duration d (default 1s)\n  -test.blockprofile file\n        write a goroutine blocking profile to file\n  -test.blockprofilerate rate\n        set blocking profile rate (see runtime.SetBlockProfileRate) (default 1)\n  -test.count n\n        run tests and benchmarks n times (default 1)\n  -test.coverprofile file\n        write a coverage profile to file\n  -test.cpu list\n        comma-separated list of cpu counts to run each test with\n  -test.cpuprofile file\n        write a cpu profile to file\n  -test.memprofile file\n        write a memory profile to file\n  -test.memprofilerate rate\n        set memory profiling rate (see runtime.MemProfileRate)\n  -test.mutexprofile string\n        write a mutex contention profile to the named file after execution\n  -test.mutexprofilefraction int\n        if >= 0, calls runtime.SetMutexProfileFraction() (default 1)\n  -test.outputdir dir\n        write profiles to dir\n  -test.parallel n\n        run at most n tests in parallel (default 8)\n  -test.run regexp\n        run only tests and examples matching regexp\n  -test.short\n        run smaller test suite to save time\n  -test.timeout d\n        fail test binary execution after duration d (0 means unlimited)\n  -test.trace file\n        write an execution trace to file\n  -test.v\n        verbose: print additional output\nFAIL    github.com/Azure/azure-sdk-for-go/storage       0.166s\nOn cmd it behaves as I would expect, like this...\nC:\\Users\\mcardoso\\Documents\\goWorkspace\\src\\github.com\\Azure\\azure-sdk-for-go>go test ./storage/... -check.f StorageQueueSuite\nok      github.com/Azure/azure-sdk-for-go/storage       1.835s. Awesome! Thanks @ramya-rao-a. ",
    "RoarkeRandall": "Hi, I'm new to using the vendor folder. I no longer use go get, and only have packages in stalled in the vendor folder. When I use go to definition it won't find the source because it only checks the src/ directory.  Is there a way we could have it search workspace/vendor as well? \nHaving to go get wouldn't be a valid workaround because I could have several different versions of a package being used by different go workspaces. . Occasionally for me glide will fail to add the dependencies to the vendor directory like it should. Try glide cc and then glide get the dependency again. . ",
    "holys": "It seems that I used a very code version of gocode. When I update to the latest version, it works fine. \nClosed.. ",
    "kybom": "Yes,and i cann't even delete the blank line too.\n\n. @doxxx   Go Language Server doesn't work. What I can do?. \"go.languageServerExperimentalFeatures\": {\n        \"format\": true,\n        \"autoComplete\": true\n    }\nGo Language Server  doesn't Reduce  the time.\n. > Do you have \"go.useLanguageServer\": true in your settings.json?\nyes.. > AFAIK, it's an unfortunate side-effect of using external processes to get docs. Launching processes on Windows is not as fast as Linux, and the process has to then parse the file, find the symbol, find the original definition site of the symbol, parse that file, and then return the doc string.\n\nUsing the Go Language Server speeds this up a lot, but it is also unfortunately rather unstable and uses egregious amounts of memory.\n\nYou are right.\nIn my Ubuntu18.04 VM,it takes 1s.\nIn my Windows 10, It takes about 3s.\nUnder network mount ,it takes more than 4s.. @saibing bingo only support go module project.. > @kybom\n\nI'm sorry, I forgot this.\nI don't have any plans to support the traditional GOPATH mode project.\nGo 1.12 will give up GOPATH support, so I think it is time to turn to go module project\n\nOK. If GO 1.12 will give up GOPATH, I am willing to try.. ",
    "olliephillips": "Thanks @mattetti. At this stage I'm afraid there's nothing else I can offer.  If the issue occurs again I'll update of course, and since my setup is not atypical maybe others will see issue and help corroborate here.. ",
    "taketori": "Thank you for your quick reply.\nI tried after doing as you suggested,  but it did not work .\nmy launch.json:\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"env\": {\n                \"PATH\": \"D:/app/msys64/mingw64/bin\",\n                \"GOPATH\": \"d:/src/.go/\"\n            },\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${file}\",\n            \"showLog\": true,\n            \"internalConsoleOptions\": \"openOnSessionStart\",\n            \"args\": []\n        }\n    ]\n}\nso I added 2 lines (**) to and comment-outed 7 lines from goDebug.js\njavascript\n            Object.assign(process.env, env);  // **\n            let dlv = goPath_1.getBinPath('dlv');\n            log('Using dlv at: ', dlv);\n            if (!fs_1.existsSync(dlv)) {\n                return reject(`Cannot find Delve debugger at ${dlv}. Ensure it is in your \"GOPATH/bin\" or \"PATH\".`);\n            }\n            let dlvEnv = null;\n            if (env) {\n                dlvEnv = {};\n                Object.assign(dlvEnv, process.env); //**\n                //for (let k in process.env) {\n                //    dlvEnv[k] = process.env[k];\n                //}\n                //for (let k in env) {\n                //    dlvEnv[k] = env[k];\n                //}\n                //return reject(`${dlvEnv[\"PATH\"]}`)\nThis is probably not right way, but works fine for me.. I'm sorry for my late reply.\nThe reason why I don't set GOPATH outside of VS Code is that I have used several \"go\"es of wsl, cygwin, mingw and  compiled windows binary and they, VS Code and another development tools are in SD card as I want environment to be portable. so I set variables by a kind of launcher like cygwin.bat, msys2_shell.cmd etc.\nanyway, your PR looks nice to me,\nI'm looking forward to next update.\nI will report if it works well or not and close this if it does.. vscode-go found dlv.exe.\nthank you.\nI am still waiting for another env variables like PATH to work fine.\nAnd I wish the env in tasks.json also works...\nJSON\n    \"options\": {\n        \"env\": {\n            \"PATH\": \"D:/app/msys64/mingw64/bin\"\n        }\n    },. ",
    "guogeer": "\nI update vscode-go version to newest and there is a error. like above image, if launch config miss env option,it happen Failed to continue: \"TypeError: Cannot read property 'GOPATH' of undefined.. ",
    "redpixr": "++ this is like a must have time saver to me.. ",
    "theSoenke": "This would be really awesome. Codelens is also now available for Typescript https://code.visualstudio.com/updates/v1_9#_typescript-references-codelens It's has been a very useful feature for me in C# in VS. I've build a go codelens prototype. It shows references for functions, interfaces and structs. It takes some time to find all references, but i don't think there is much i can do about it. https://github.com/thesoenke/vscode-go/tree/codelens\n\nOne issue i ran into is that go-outline seems to return always 1 as the start character instead as of at least 6 for functions in a line, but for structs it's correct.\nAnother issue is that the console is filled with errors from guru when editing the code. Not sure what's the best solution here\n. Great! Thanks for looking so quick into this and provide the fixes :wave: \nUnfortunately the debug console still contains errors from guru when syntax is not valid and the file not saved.. Happy to contribute a little bit to this great extension :). Looks like resolveCodeLens could make a lot sense here. I will look into it.. @ramya-rao-a Great! I've submitted a PR to use resolveCodeLens https://github.com/Microsoft/vscode-go/pull/938. Good point :). Yes, saveAll was the reason for that. Removed saveAll and set provideReferences back to private. ",
    "tw1nk": "I did a quick test on implementing this by adding \n\"menus\": {\n      \"editor/context\": [\n        {\n          \"when\": \"editorFocus\",\n          \"command\": \"go.test.generate.function\",\n          \"group\": \"1_modification\",\n          \"title\": \"Go: Generate unit test for function\"\n        }\n      ]\n    }, \nTo the contributes section in package.json for vscode-go. \nIt sort of works (as well as from the command palette) but as it doesn't seem vscode offers any way to have more control over the \"when\" property then what's predefined for the keyboard shortcuts and it seems you can't do your own logic on when a menu item should be visible I don't feel confident it would add more than clutter up the context menu.\nFor instance I would only want the \"Generate test for current function\" to be visible as long as there aren't any tests defined for the current function.\nReferences: \n https://code.visualstudio.com/docs/extensionAPI/extension-points#_contributesmenus\n https://code.visualstudio.com/docs/customization/keybindings#_when-clause-contexts. No, in the init function you declare a new local variable db that shadows the global db variable in the function scope, the normal linter does not give you any information of this. \nHowever if you configure vs-code to use gometalinter it will give you the warning \"'declaration of \"db\" shadows declaration at main.go:17 (vetshadow)\"\n. You would probably only need to lookup the goRuntimePath once during the install phase so to improve performance move it above the reduce function.\n. Wouldn't it be nicer if the getBinPath took an (optional) second argument called gopath and used that instead of changing the process.env['GOPATH']?. ",
    "bedeio": "Overlooked this setting, it works now. However, shouldn't syntax checking work independent of this?\nRunning gofmt -e on the file containing the \"example\" build tag gives the same error as shown in the playground.. ",
    "ppey": "Great, thank you!. ",
    "Antony-redzone": "I had the same issue, and the above fix worked. As long as I did it in the VS terminal.. ",
    "prashcr": "Thanks!. ",
    "netroby": "May be this language server enabled by default?\n. done. can you take a look ? @ramya-rao-a . @ramya-rao-a Fix as your request. thanks for guide me . ",
    "robsonpeixoto": "Thanks @ramya-rao-a. But why?. Thanks :) tested and working like a charm :). ",
    "olekthunder": "For all guys who are stuck with command 'go.tools.install' not found problem on Windows. \nCheck if %GOPATH%\\bin is in your PATH enviroment variable. \nAfter half and an hour I finally figured out that PATH remains unchanged if you try to change it like set PATH=%PATH%.... You need explicitly change it in your system settings.  (I don't know why)\nI'm writing this because noone wrote this before in any related topic. \n. ",
    "avoidik": "Also had a problem with GOPATH and GOROOT variables. GOPATH should be set to an existing folder where you would like to have all the pkg (go packages) to reside, and GOROOT where you have your binary distribution installed.\nAnother subtlety here is to open project FOLDER with vscode and then install requirement dependencies with CTRL+SHIFT+P > Go: Install/Update tools, if you open just one go-file the dependencies will not install.\nhttps://github.com/Microsoft/vscode-go/issues/1306. ",
    "Tsessebe": "Hi,\nThank you for the feedback.\nI did delete the exe in the bin folder; not the settings.\nI'll only be able to check that tomorrow as it's on my work pc. \n. Hi,\nWe got this resolved; \nThank you. ",
    "producerism": "gocode stop is incorrect, the correct command is gocode close. ",
    "msftgits": "Hi, I am closing and re-opening this PR to bump the CLA bot. Sorry for the inconvenience!\n. Hi, I am closing and re-opening this PR to bump the CLA bot. Sorry for the inconvenience!. ",
    "dibalavs": "I have the same issue:\nvscode: 1.82.2\ndelve debugger: 1.1.0\ngo extension: 0.6.93\nWhen stopOnEntry == true, debugger freezes and do not do actual debugging.\nOutput from the log:\n\nVerbose logs are written to:\n/tmp/vscode-go-debug.txt\n1:46:17 PM, 10/31/2018\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /home/vdybala/go\nCurrent working directory: /opt/work/aux/go-test\nRunning: /home/vdybala/go/bin/dlv debug --headless=true --listen=127.0.0.1:3550 --api-version=2 --log=true\nAPI server listening at: 127.0.0.1:3550\ntime=\"2018-10-31T13:46:17+03:00\" level=info msg=\"launching process with args: [/opt/work/aux/go-test/debug]\" layer=debugger\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /opt/work/aux/go-test/main.go:5\nAll set:[{\"id\":1,\"name\":\"\",\"addr\":4830031,\"file\":\"/opt/work/aux/go-test/main.go\",\"line\":5,\"functionName\":\"main.main\",\"Cond\":\"\",\"continue\":false,\"traceReturn\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"LoadLocals\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"hitCount\":{},\"totalHitCount\":0}]\nSetBreakPointsResponse\ntime=\"2018-10-31T13:46:17+03:00\" level=info msg=\"created breakpoint: &api.Breakpoint{ID:1, Name:\\\"\\\", Addr:0x49b34f, File:\\\"/opt/work/aux/go-test/main.go\\\", Line:5, FunctionName:\\\"main.main\\\", Cond:\\\"\\\", Tracepoint:false, TraceReturn:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(api.LoadConfig)(0xc4201d08a0), LoadLocals:(api.LoadConfig)(0xc4201d09c0), HitCount:map[string]uint64{}, TotalHitCount:0x0}\" layer=debugger\nConfigurationDoneRequest\nStoppedEvent(\"breakpoint\")\nThreadsRequest\nThreadsRequest\n. \n",
    "psollberger": "@ramya-rao-a in my case the debug toolbar didn't show up in step 2. Only the errors were displayed.\nAs soon as i get home i can check what happens with the latest version.\nEdit: Ups. I commented with the wrong account. Sorry ;-). ",
    "zignd": "I think the current version of the extension already implements this feature. Am I right @ramya-rao-a?. @ramya-rao-a Oh, you're right. Sorry, my mistake. :sweat_smile:. Oh, it's not the os.Rename function, it's the os.rename function. os.rename is called from within os.Rename to perform the rename according to a specific operating system. I just tried it on Linux and the same occurs, GOROOT/src/os/file_plan9.go opens.\n// Rename renames (moves) oldpath to newpath.\n// If newpath already exists and is not a directory, Rename replaces it.\n// OS-specific restrictions may apply when oldpath and newpath are in different directories.\n// If there is an error, it will be of type *LinkError.\nfunc Rename(oldpath, newpath string) error {\n    return rename(oldpath, newpath)\n}\nHere's a snippet containing the os.Rename definition, as you can see it is calling os.rename.. @ramya-rao-a It works when I set \"go.docsTool\": \"gogetdoc\". It seems to be an issue with godef as you said. Should I open an issue there?. @ramya-rao-a Ok, I will use it instead, thanks for the help.. ",
    "velomarc": "@ramya-rao-a  Thank you for your reply, I'm also thinking of that if it's the problem of Vs Code, \nI tried to remove all extensions and then reinstall vscode-go, it still does not work, I even tried to remove Vs Code, but after I reinstalled Vs Code, the problem still exists, Im not sure how to remove Vs Code completely, even I removed Vs Code from Applications, seems some configuration files still exist in somewhere , do you have any idea about this?  . I removed these following folders, then it works again\n/Users/dev/Library/Application Support/Code\n/Users/dev/Library/Saved Application State/com.microsoft.VSCode.savedState\n/Users/dev/Library/.vscode\nThank you. ",
    "mtrmac": "\nimmediately\n\nSorry, of course only after the autosave delay. But that\u2019s pretty soon.. Wow, that was fast. Thank you!. ",
    "surajbarkale-dolby": "Yes I installed it using brew and it is located at /usr/local/bin/dlv. The reported version is 0.12.1 with build version v0.12.1.. The fix is to use full path of executable for \"program\" key in launch configuration (see this diff).\nThanks to your instructions about debugging the debugger, I was able to pinpoint root cause of this issue. In goDebug.ts, program name is not added to command line (as I did in debug.sh). Instead, vscode-go tries to change directory to the one containing program argument. However, the directory is not valid causing ENOENT error.\nWe should improve the documentation and add a better error message in goDebug.ts instead of ignoring the error.\nI shall try to send a pull request with the change tomorrow.\n. ",
    "wader": "I have the same issue when using https://github.com/cortesi/modd. A delay work but feels hackish. Would it be possible to format the code before writing it to the file?. Hello, i think i have the same issue.\nmacOS 10.12.5 (16F73)\nCode 1.13.1 (1.13.1)\nvscode-go 0.6.62\nGet same issue (two file writes) when all extensions disabled except vscode-go. But I noticed that if i disable formatOnSave and just use \"Format document\" i still get one file write, could that be a lead or is that expected behaviour?\n. Oh just noticed https://github.com/Microsoft/vscode-go/blob/bca4dd5f31f32ac49da79580c07b4000f06287a3/src/goFormat.ts#L69 is the save needed because the formatting tools can only read from file?. Ok the go formatting tools support reading from stdin but vscode-go is currently not using it.\nSo could the issue be that when onDidSaveTextDocument is fired the file has already been saved and then the formatting tools are executed and then the document is saved again?. You mean the dot left of the filename? when i make a change the dot appears. Then when i save it flickers fast and disappears \nIm using https://github.com/cortesi/modd to trigger builds and if i run it in debug mode (--debug) i see two writes.\n```\n18:42:35: notify.Write: \"/path/to/main.go\"\n18:42:35: Delta:\nAdded: []\nDeleted: []\nChanged: [/path/to/main.go]\n18:42:35: prep: go install\n18:42:36: notify.Write: \"/path/to/main.go\"\n\n\ndone (580ms)\n18:42:37: daemon: app\nsending signal hangup\n18:42:37: Delta:\nAdded: []\nDeleted: []\nChanged: [/path/to/main.go]\n18:42:37: go install\n18:42:37: daemon: app\nexited: signal: hangup\n``. My thinking is that if vscode-go currently uses the go formatting tools by pointing them to the source file path (not using stdin or a temp file) then it would require two saves to make formatOnSave work. First one to save the maybe not properly formatted file to disk and then run the formatting tool on the file and then second one to save the change to make it properly formatted.. Sorry maybe i should mention that i don't have any issues with the undo stack. Just the issue with two writes.. Ah ok, and also useonWillSaveTextDocument` instead? i might try to fix it if i get some free time.\n\n\nBut no hurry, enjoy your vacation!. @ramya-rao-a do you remember what bug you saw when using stdin?. Ok, thanks! I've sent a PR to use stdin #1069.  @ramya-rao-a This commit i guess https://github.com/Microsoft/vscode-go/commit/068754e142c7d1ef1b5562e72d50a2cff4346562. Seems to work fine in my limited tests. Feedback very welcome!\nOne possible issue with this change is that onWillSaveTextDocument is now used which seems to have a time limit on how long the waitUntil will wait for the edit promise.\n\nAn event that is emitted when a text document will be saved to disk.\nNote 1: Subscribers can delay saving by registering asynchronous work. For the sake of data integrity the editor might save without firing this event. For instance when shutting down with dirty files.\nNote 2: Subscribers are called sequentially and they can delay saving by registering asynchronous work. Protection against misbehaving listeners is implemented as such:\n there is an overall time budget that all listeners share and if that is exhausted no further listener is called\n listeners that take a long time or produce errors frequently will not be called anymore\nThe current thresholds are 1.5 seconds as overall time budget and a listener can misbehave 3 times before being ignored.\n. I must say that i'm very impressed by the the visual code extension development experience and vscode-go code quality, was very easy to get going!. I noticed one thing while reading the code. In isDiffToolAvailable it checks if the diff binary is in PATH but while reading the jsdiff code can't see that it is actually used. Maybe i'm missing something?. Maybe with this change {cwd: vscode.workspace.rootPath} is needed?. @ramya-rao-a Thanks for the feedback\n\nAbout diff i just found that gofmt actually uses external diff https://github.com/golang/go/blob/master/src/cmd/gofmt/gofmt.go#L257 i just assumed the diff was done in go somehow \ud83d\ude04 \nHopefully I will have some time to look into this again this week. Yeah i also suspect that my change will reintroduce those issues again, will try to to see if it can be fixed.. Not related to this PR but I noticed two things while working on this:\nSetting breakpoint in go code where there is no code gives no feedback that breakpoint will be ignored. Create issue?\nFor some reason it does not work for me to set breakpoint in the extension js code, it used to work some mother ago but now they just go grey on launching the extension in debug mode. I followed the steps in https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code\n. @ramya-rao-a Hey! sorry i've updated the text in my first comment to make it more clear. Must have written in a hurry or something :)\nIf you look at the demo test project it probably makes it a bit more clear https://github.com/wader/vscode-go-debug-test/blob/master/.vscode/launch.json My idea was to be able to start dlv in a custom way instead of attaching to a running one. If i remember correctly none of the other debug modes made that possible.. Yes. The image name is hardcoded in the custom lunch argument vscode-go-debug-test and is built from the Dockerfile https://github.com/wader/vscode-go-debug-test/blob/master/Dockerfile\nSo my main idea was to cut down number of steps need for start each debug session. From start program in container and then attach dlv to just start debugger.. ",
    "bsr203": "Hi. I don't have a lot of custom settings, but currently my source files are properly auto formatted on save, but test (\"*_test.go\") files are not . Is this by design? any settings to allow formatting test files as well.. Changing to \n\"go.formatTool\": \"goimports\"\nmakes formatting works again\ncould be this issue https://github.com/sqs/goreturns/issues/30\n. Hi @goenning , @ramya-rao-a \nI have an issue related to above, so wanted to check quickly before opening a new one.\nwhen I run the code lens \"run test\", I get the error\n```\nRunning tool: /usr/local/go/bin/go test -tags appenginevm -timeout 30s aaa/bbb/ccc -run ^TestTasks$\ncan't load package: package aaa/bbb/ccc: build constraints exclude all Go files in /Users/bsr/server/src/aaa/bbb/ccc\nError: Tests failed.\n```\nIt is indeed a GOPATH issue. It works if\n\n\non vscode terminal\nGOPATH=/Users/bsr/server /usr/local/go/bin/go test -tags appenginevm -timeout 30s aaa/bbb/ccc -run ^TestTasks$\n\n\nIf I open vscode with GOPATH set like\nGOPATH=/Users/bsr/server code\nthen\n/usr/local/go/bin/go test -tags appenginevm -timeout 30s aaa/bbb/ccc -run ^TestTasks$\n\n\nI have these settings on workspace level.\n\"go.gopath\":\n    \"${workspaceRoot}:${workspaceRoot}/../external,\n  \"go.toolsGopath\": \"~/work/go/tools\",\n  \"go.testEnvVars\": {\n    \"GOPATH\":\n        \"${workspaceRoot}:${workspaceRoot}/../external\n  },\n  \"go.testFlags\": [\"-tags appenginevm\"]\nwhere\nGOPATH = ${workspaceRoot}\ncan you please let me know testEnvVars or go.gopath is passed to code lens run test.\nthanks.. thanks @ramya-rao-a for getting back to me.\nNo. run test through code lens doesn't work and gives the error can't load package as above. Means GOPATH is not set. But, the command it runs, as per the error message /usr/local/go/bin/go test -tags appenginevm -timeout 30s aaa/bbb/ccc -run ^TestTasks$, works on the vscode tesrminal (without me setting GOPATH). So, GOPATH is not passed when running through code lens. Go: Current GOPATH shows the correct GOPATH value.. hi. not sure what changed. after removing go.testEnvVars  it detects GOPATH. I don't have errors about PATH anymore. I still have issues that build flag is not working properly. As in the above error the command has -tags appenginevm when run through code lens. But I am getting error that functions from that file is undefined. Do you see any issue how I use go.testEnvVar ?. @ramya-rao-a it works now. I have to use buildTags instead of testFlags.\nlike\n\"go.buildTags\": \"appenginevm\". ",
    "ideahitme": "Finally figured out the issue. Apparently the following setting need to be set:\n\"go.autocompleteUnimportedPackages\": true in settings.json. I am not entirely sure if it was introduced in new version of vscode-go. Or I used to have it and accidentally removed it. In any case  I am closing this issue. After checking the changelog I found that this default \"behaviour\" introduced few releases before. It seems completely unnecessary to me, as it is one of the awesome features that vscode-go provides (search and autocomplete through external packages). If performance is the issue, then one should rather manually disable it. . Hi,\nI got the output through\n\ngocode close\ngocode -s -debug\nStarted typing. after a bit more investigation, it actually happens only if the parameter is not first argument passed. Your example works, as well as this:\n\n\n. ",
    "navossoc": "I can't see the example on the first post, the link seems broken.\nI was thinking in creating something like this:\nhttps://goplay.space/\n\nSmart help lookup: double-click on e.g. package keyword or Println function name in source code, and you will see the relevant help topic. Try it!\n\nIt doesn't seems that hard to implement it on VS Code as a plugin, but I don't have any knowledge on how VS extensions work.\nSome components that may help:\n- vscode-uri - The URI implementation used by VS Code and its extensions.\n- request-light - A light weight Node.js request library with proxy support\nSome sample extensions that may help too:\n- https://github.com/Microsoft/vscode-extension-samples/blob/master/contentprovider-sample/README.md\n- https://github.com/Microsoft/vscode-extension-samples/blob/master/previewhtml-sample/README.md\n. ",
    "apiarian": "Made a first draft implementation of the documentation view. Would very much appreciate any notes or comments. I'm new to this javascript and VSCode stuff.. now with automatic package name detection https://github.com/Microsoft/vscode-go/pull/1282. and an entry in the context menu. feature complete?. An interesting v2 for this feature might be to use the vscode.previewHtml command ( https://code.visualstudio.com/docs/extensionAPI/vscode-api-commands#_working-with-the-html-preview ) to show a pretty doc page instead of the basic plain text. Similar to what the https://github.com/Huachao/vscode-restclient plugin does with their rest-client.previewResponseInUntitledDocument setting.. Not that I can see. There's an -html flag which will output an HTML snippet that we could put into an <html></html> context and add styling. But that's a pretty hefty bit of work, it seems. Maybe.. so the easy part is replacing the vscode.window.showTextDocument line with vscode.commands.executeCommand('vscode.previewHtml', uri, vscode.window.activeTextEditor.viewColumn+1); . The tricky part is going to be getting the styling right. I'm exploring the possibility of pulling the style and script files out of the godoc repo https://github.com/golang/tools/tree/master/godoc/static .. Does \n// Copyright 2012 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\nin https://github.com/golang/tools/blob/master/godoc/static/godocs.js#L1 mean tat we can't just include the script in this repo and use it to handle the various navigational things that it provides? Also, what about the other things in that directory, like the CSS?. https://github.com/golang/tools/tree/master/godoc/static\nSo all of the *.txt files in this directory are actually templates for the text form of the output. Likewise all of the *.html and *.xml files are templates for the -html form of the godoc output. We could copy them into vscode-go/godoc-static and edit them to contain exactly the output we need. Though that, too, seems like a v2 thing which will require a fair bit of HTML/CSS/JS wizardry.. Actually, if I'm understanding this correctly https://github.com/golang/tools/blob/master/LICENSE , we can include the templates and other files as long as we mention the source in them? Is this how legal things work?. Perhaps. I'll give it a try, one concern is that it might not update immediately as the documentation comments change.\nHow do we handle restyling for light vs dark vs high contrast themes, just inject a css file at the end of the head?\nDo we leave all of the other godoc functionality in place? The playground and search and stuff? Where does the search index go? This is becoming less of a text or HTML document view and more of a full browser tab. Is that something VSCode can support? Otherwise we'll probably need to massage the links somehow.. In the meantime I've set up this couple of tasks:\njson\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"taskName\": \"megacheck\",\n            \"type\": \"shell\",\n            \"command\": \"megacheck ./...\",\n            \"group\": \"test\",\n            \"presentation\": {\n                \"echo\": false,\n                \"reveal\": \"silent\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            },\n            \"problemMatcher\": \"$go\"\n        },\n        {\n            \"taskName\": \"lint\",\n            \"type\": \"shell\",\n            \"command\": \"go vet -composites=false ./...\",\n            \"group\": \"test\",\n            \"presentation\": {\n                \"echo\": false,\n                \"reveal\": \"silent\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            },\n            \"problemMatcher\": \"$go\"\n        }\n    ]\n}\n(note, I'm disabling composites on vet because that's noisy and I like my un-labeled struct literals). Looks like this is probably related to https://github.com/Microsoft/vscode-go/issues/789. created https://github.com/apiarian/vscode-go-test-docs-main to help with documentation experiments.. This is my first PR for vscode-go and my first foray into typescript ever and javascript in many years. I'd very much appreciate any comments or notes on this first draft. The code is minimally functional, though there's some things I'd like to add, like context menu selection.. OK, so this is now pretty much feature complete as far as I can tell. I might add a bit of godoc output massaging to make the import bit look nicer for vendored packages, but you can get docs for a package that you can name, and it will try to detect some package under the cursor courtesy of gogetdoc.\nHopefully there aren't any terrible or subtle bugs in here =/ \nWhat's the code review / merging process here?. Did I somehow break the listPackages test? Or is it just flaky?. @ramya-rao-a I think I've addressed most of your comments. Not quite sure how to proceed with the invocation-source-detection stuff, though.. @ramya-rao-a while fixing a bug with the multi-root support (we're always looking in the zeroth root vendor directory, not the current root vendor directory) I came across another bug: the documentation view is sticky. If we ask for docs on package foo and then change the on-disk documentation for foo, asking for foo docs again shows the old docs. If we ask for bar docs before asking for foo docs again, the foo docs do get updated. \"Change the on-disk documentation\" may mean changing the documentation strings or it may mean moving to a different workspace root with a different vendor directory (or no vendor directory at all).\nI suppose we could add some sort of time.Now() based cache-busting bit in the URI that we request for the provideTextDocumentContent method, but is there a more \"correct\" way to do it? Some way to signal to vscode that we don't want it to show cached data ever?. This way if the cursor happens to be on some gogetdoc-able thing accidentally, the user has the opportunity to enter a package to view. There's one command to get docs. I suppose it might be possible to split it so that a context menu click or a keyboard shortcut invocation would trigger the \"try to find the thing my cursor is on and only show me the input if you can't find anything\" flow, while a more general command-shift-p invocation  would always show the user the box. The current \"one command to rule them all\" way seemed less complicated. Is there a way to detect how the command is being invoked (context menu, vs. shortcut, vs. command palette) ?. True, but it seems that wiring that into this part of the code would be somewhat non-trivial. I suppose we could add a query parameter to the URI, something like ?vendored=1 and then look for it here. But then what do you do for packages that were entered manually instead of using the gogetdoc flow? The godoc invocation is fairly cheap, so why not just try it?. That may mean that your gogetdoc is not detecting the right version of the package? Could you try with this set of repos https://github.com/apiarian/vscode-go-test-docs-main ? That's what I've been  using for testing. Maybe it's too small a toy?. Or maybe gogetdoc has been updated?. So here's what I see for that repo and the latest gogetdoc installed:\n~/.vscode/gopath/bin/gogetdoc -json -pos main.go:#421 | jq\n{\n  \"name\": \"vendoroverride\",\n  \"import\": \"github.com/apiarian/vscode-go-test-docs-main/vendor/github.com/apiarian/vscode-go-test-docs-vendoroverride\",\n  \"pkg\": \"vendoroverride\",\n  \"decl\": \"package vendoroverride\",\n  \"doc\": \"Package vendoroverride in the gopath defines foo and bar with some docs.\\nThese have been overridden in the vendor directory of the main package. We\\ncould probably do the same with branches or something, but this seems a bit\\nmore controllable.\\n\",\n  \"pos\": \"\"\n}. added this functionality too. @ramya-rao-a so this bit is pending the answer to https://github.com/Microsoft/vscode-go/issues/789#issuecomment-338488571. Otherwise this will take some CSS + JS wizardry to make the output pretty.. @ramya-rao-a is there a better way to bust vscode's text document content provider cache?. ",
    "elithrar": "They do support the ability to navigate the rest of the package docs beyond\nthe immediate symbol.\nOn Tue, Nov 7, 2017 at 8:43 PM Ramya Rao notifications@github.com wrote:\n\n@elithrar https://github.com/elithrar When you first logged this issue,\nyou cited vim-go as an example. This is what I found in the vim-go docs\nhttps://github.com/fatih/vim-go/blob/7efc3fe06532f56d9340429f4b05522426e1d240/doc/vim-go.txt#L191\n[image: image]\nhttps://user-images.githubusercontent.com/16890566/32527452-e2870ba0-c3e2-11e7-9672-f51ac742afc8.png\nIt looks like the split window would show the docs just for the symbol for\nwhich the request was made i.e no navigation or no docs from rest of the\npackage that the symbol belongs to. Is that right?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/789#issuecomment-342682586,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AABIcDgSTMxiBlh6PgT-rq7eitRRE7Pwks5s0QcmgaJpZM4L-q7i\n.\n. \n",
    "GlenDC": "Being able to open an imported package (import line) into godocs would be a huge productivity boost as well. As in being able to just click on it with some special key(s), is certainly faster than having to copy the import line, opening my browser myself, typing godocs.org and pasting it in to go to that package that way.\nIs this kind of thing already possible? if not, would it be in the scope of this issue?. ",
    "lloy0076": "Oops, my mistake :). ",
    "kopaygorodsky": "@ramya-rao-a \nOk, will do. \nI mean the same problem with variables. Sorry for the misunderstanding. . @cyc115  it's not a problem of vscode\nhttps://github.com/derekparker/delve/issues/738. @ramya-rao-a this issue can be closed, Delve fixed. Update will be available in next release. . ",
    "frozzare": "It's sound like a good solution to use go list in the background and update the cache but what about new packages that don't will be listed with go list?\nWhen I create a new package I don't have any go files and when I create my first go file mypack.go the suggested name will still be go-mypack since go list can't find mypack or am I wrong there?. Yeah that would work since it's better to suggest package name that actually are valid than package names that isn't valid :). @ramya-rao-a sweet \ud83d\udc4d . ",
    "idanya": "@ramya-rao-a  Indeed I am using Go 1.8 on Mac.\n. ",
    "defjosiah": "Hi, I fixed this by installing the head version of delve.\nbrew install --HEAD go-delve/delve/delve. Running into a similar issue here, I have a folder called:\n# $GOPATH/github.com/user/myproject/\nintegration_test/\n--integration_test_suite.go\n--integration_test.go\nAnd I'm getting the error:\ngo build github.com/user/myproject/integration_test: no non-test Go files in /home/go/src/github.com/user/myproject/integration_test\nMaybe add a folder ignore option to the go extension? And then check it here (https://github.com/Microsoft/vscode-go/blob/master/src/goBuild.ts#L51)?. ",
    "kalbasit": "Should this be closed?. ",
    "dmage": "As I can see there is no way to use same command and same handler for all three cases (the output of go test -c -cover differs from the output of go test -c/go build). I think it will be better to leave buildOnSave handler as is, later it can be replaced by go-langserver.. Thank you, I didn't expect you to merge this without any changes :)\nPlease take a look at https://github.com/dmage/vscode-go/commit/d4a9ff39cdd291ba85702342e827af7dcfb2d6e2\nNow I think showHideTestStatus is unnecessary. There is no reason to hide test status when a tab switched. And test status should be invalidated if any file was changed (it may be a fixture, for example).. The bug is not in vscode-go, but in vscode. Same issue for TypeScript:\n\nLinked pull request should address the issue.. Ugly fix for CI: Microsoft/vscode-extension-vscode#52. I'm about https://travis-ci.org/Microsoft/vscode-go/builds/205602472\nTests for this PR are red without changes in vscode-extension-vscode.. https://github.com/ddliu/gulp-remote-src/commit/02953a1429023bffa418b4174a73282faa4018d9\nThis is the reason why tests will fail on Mac since yesterday.\nI was able to reproduce this error on my macbook and found that vscode-extension-vscode uses empty string as a base.. Even if we assume that the user keep the cursor on a changed test, it doesn't mean that nothing else is changed (init function, global variables, other test functions, etc.). So it cannot be the default behavior. . \"go.testOnSave\": {\n  \"test_function\": \"cursor\" || \"file\" || \"package\" || false,\n  \"test_file\": \"file\" || \"package\" || false,\n  \"other_file\": \"package\" || false,\n}\nSomeone may want to enable testonsave only if the cursor located in a test function, others may want to have the graceful fallback (if cursor not in function, but in a _test.go file, then test the file; otherwise test the whole package).\n\"cursor\" may be a shorthand for {\"test_function\": \"cursor\", \"test_file\": \"file\", \"other_file\": \"package\"}\n\"package\" = {\"test_function\": \"package\", \"test_file\": \"package\", \"other_file\": \"package\"}\ntrue = \"package\"\nBut it feels a bit complicated.. ",
    "emicklei": "a similar problem is when using the (unrecommended) dot import\nimport . \"github.com/sample/pkg\"\nExposed functions defined in this pkg are not found either (using v 0.6.53 of the plugin). ",
    "zerkms": "@ramya-rao-a \nThat's odd, since I swear it was working for me. Not anymore :-S\nClosing since I cannot reproduce it as well.. @ramya-rao-a Now I see what's happened: the issue is reproducible when code is located outside of the $GOPATH. Then the behaviour is as I explained: it compiles and runs, but does not autocomplete.. @ramya-rao-a done, thanks :-). @ramya-rao-a in the config gometalinter v2 is underlined as a wrong value. @ramya-rao-a that's right - if you set go.lintTool to gometalinter.v2 underlines it as not a valid value.\nIt still works, but in the config it is marked as an invalid value.. @ramya-rao-a if I set it to \"go.lintTool\": \"gometalinter\", no validation happens at all.\n\u279c which gometalinter\ngometalinter not found\nI'm not sure how it's supposed to work\n\nDoesn't updating your local gometalinter by running a go get -u github.com/alecthomas/gometalinter give you all the features of gometalinter.v2 ?\n\nThe stable version is installed using the go get -u gopkg.in/alecthomas/gometalinter.v2 command. @ramya-rao-a as it is stated on the gometalinter readme it would install the unstable version. I'm sure it would work, I'm not sure I'm ready to run unstable version of devtools though.. Thanks for the detailed response, now I see. Thanks a lot.. Solved.\nI had to set the\n\"go.goroot\": \"/home/ivan/.local/share/umake/go/go-lang\"\nparameter in the preferences explicitly. ",
    "anxiousmodernman": "I am also seeing this error.\n\nPlugin Version 0.6.53\nGo version 1.8 linux amd64\nVS Code version 1.9.1. ",
    "deltaskelta": "@ramya-rao-a, Thanks, that works. I found the line that does it. \nhttps://github.com/Microsoft/vscode-go/blob/547be17cb11915a34a74d68212b01d7f1296431c/src/goTest.ts#L217\nThis seems to include -v option by default. The settings imply that they would be left blank, because it states that a null value will use the build flags setting. I think either the comment should be changed to say that -v is included by default, or the -v should be omitted. What do you think? I can make a PR for either way. @ramya-rao-a #817. @ramya-rao-a ...done. ",
    "ajackson-cpi": "I'm building a simple REST server that reads from a database. Instead of reinventing DB processing for each call, most of the logic is in a \"db-helpers\" package. \nTo test both packages, I would need to copy-paste tests to both. \nIt would be far cleaner if the API tests could indicate that they tested the db-helpers package. . ",
    "wly65535": "@ramya-rao-a Thanks, I uninstalled the go tool yesterday, the pop bar appear always, but when I boot my computer today, the pop bar no longer appear, maybe it's need to reboot.\nto build a go project only need input \"go build xxx\", so I like building it from console manual.. ",
    "diegobernardes": "Need this feature too, tryied with $GOPATH, etc... \nNothing worked :(. Sorry if the description was so vague, was programming when i had that idea and had to post before i forget :smile:\ngithub.com/diegobernardes/vscodego/elasticsearch/v1\n```golang\npackage v1\ntype Client struct{}\nfunc (c *Client) Insert(Product) {}\ntype Product struct{}\n```\ngithub.com/diegobernardes/vscodego\n```golang\npackage main\nimport (\n    elasticsearch \"github.com/diegobernardes/vscodego/elasticsearch/v1\"\n)\nfunc main() {\n    client := elasticsearch.Client{}\n    client.Insert(v1.Product)\n}\n``\nDon't know if this is possible or easy, but, the autocomplete is correct showingv1.Product, because it is the signature of the method. But, when we select the autocomplete suggestion, it should insert a text snippet that works, so the correct snippet should beelasticsearch.Product` because it's the name of the import.\n\n\nIt's more clear now? This make any sense?\n. Ok, thanks @ramya-rao-a and @nsf.. ",
    "coccyx": "Would love to see this go in.  Looks like some work is remaining, but +1 from me for this feature.. ",
    "simula67": "I am facing the same issue. From : \nhttps://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#cannot-find-delve-debugger-at--ensure-it-is-in-your-gopathbin-or-path\n\nSolution: Add the location where dlv is installed to your PATH. You can find this location by running which dlv or where dlv\n\nHow do I add dlv to PATH before launching VS Code ?\n\nCannot find package \"..\" in any of ...\nThe debugger is not using the right GOPATH. This shouldnt happen, if it does, log a bug.\nSolution: Until the bug you logged is resolved, the work around is to add the GOPATH as an env var in the env property in the launch.json file.\n\n\nI added this also and I am getting the same exact error\nI should probably just use Goland\n. ",
    "ziffusion": "Thanks for the explanation. But it doesn't seem to be behaving that way. I,m on OSX by the way.\nI just opened a file with the following path:\n/Users/xxx/ws/yyy/go/src/xxx/ondemand/service/tags/tags-server/version_data.go\nWhen I check the gopath, it is set to:\nCurrent GOPATH: /Users/xxx/ws/go\nIt behaves erratically. I've seen it say \"inferred path\" and show the correct path at times. But when I change the folder back and forth a few times, the GOPATH does not change the way it should. I do open a file after opening a different folder.\n. All right, I ran the extension under the debugger, and it seems like what I didn't realize was that you were saying that the folder opened in vscode has to be src or something below that in the tree for this to work. For some reason I missed that.\nIt may help to point this out in the docs.\nOtherwise, you can resolve this one as a non issue.. @ramya-rao-a Well, a few things messed me up.\n\n\nDocs don't describe the behavior of this setting, and 762 says that it emulates GoSublime use_gs_gopath. So I looked at GoSublime docs, and in all the examples there, the tree is rooted in a directory called go. I sort of assumed that that's how the extension figured out the root, by looking for go. I then renamed my workspace roots to be called go, and started the editor at the root (in go). You folks look for src (which makes sense); I should have been one level below in the tree in src.\n\n\nI was also under the impression that the extension inferred GOPATH from the path of the file. You folks look at only the path of the workspace, and that too only when one opens a file. This is somehow confusing (leads one to think that the inference has something to do with the file path). And GoSublime may go by file path (dunno).\n\n\nIn any case, it would be good to clarify the behavior of this setting in the docs (for folks like me who don't have any context).\nSomething like the following may work.\nIf go.inferGopath is set to true, the extension will try to infer the GOPATH from the path of the workspace i.e. the directory opened in vscode. It searches upwards in the path for the src directory, and sets GOPATH to one level above that.\nFor example, if your project looks like /aaa/bbb/ccc/src/..., then opening the directory /aaa/bbb/ccc/src (or anything below that) will cause the extension to search upwards, find the src component in the path, and set the GOPATH to one level above that i.e. GOPATH=/aaa/bbb/ccc. \nNote that GOPATH is inferred when you first open a file with the go extension.\nThis setting is useful when you find yourself opening up different projects in vscode. It causes the extension to set the GOPATH for each project automatically.. @ramya-rao-a @codmajik \nNot sure if having it configurable is of value or not. I suppose, whatever makes things work well on the least-surprise principle, should be OK.\nSo, how do you think that inferring from a file might work? At what point would the GOPATH be set? Considering that you can open a file from outside the workspace as well.\n\nWould it be when any file is opened? Or when a file is first opened in a workspace? How would you decide if the opened file is in the workspace or not?\nOr do you try and set the GOPATH before an operation that needs GOPATH?\nOr does it make sense to set it from the file path each time the user changes tabs.\n\nMaybe, setting it once from the workspace, when a directory is opened in vscode, is fine. Should the user have the ability to override it? Or at least reinitialize it? Maybe by a command like go infer GOPATH.\nAnother issue seems to be that the GOPATH setting is not visible to the debugger. That seems like a serious handicap, do you think?. @ramya-rao-a @codmajik \n\n\nIt would only work when no workspace is open\nso the first time a go file is opened in a non-workspace vscode window, we infer from the file's path.\n\n\nSo, this is when a person opens up a file in a window all by itself. What happens if he opens up another file in a different tab (but same window)?\n\nThat is very strange, I don't use the debugger that much. inferGopath is part of the global GOPATH detection scheme. it is right where the effect of go.gopath and co are applied.\n\nActually, I said that based on some docs you have on the wiki. It says there:\nThe debug adapter in the Go extension does not have access to your User/Workspace settings. Therefore, the only GOPATH the debugger is aware of is the one set as environment variable outside of VS Code.. ",
    "sandy081": "@ramya-rao-a Made some changes last week to make extension ids case insensitive and reverted them on last Friday. Refer to the issue for more information. So this would be good with latest insiders.. I do not remember if I have those files in two groups, but definitely those two are opened. Anyway good thing is that you can reproduce it and fixed it. \ud83d\udc4d . ",
    "selfmodify": "It looks like GOPATH is broken with the latest release (0.6.64). I get the following error message.\ngo: GOPATH entry is relative; must be absolute path: \"undefined\".\nFor more details see: 'go help gopath'\nexit status 2\nProcess exiting with code: 1\nIs there a way to use the earlier version of this plugin (0.6.63)?\n. It is one level below src, $GOPATH/src/mymain. Where mymain contains the main go program. This is used to work before the extension update. Is there a way to install the previous version of this extension so this issue can be isolated to this extension update.\nI also tried setting the GOPATH in the env map in launch.json but it results in the same thing.\n. Yes I can confirm that the issue does not happen in release 0.6.63 and\nhappens in 0.6.64\nOn Tue, Sep 5, 2017 at 6:36 PM, Ramya Rao notifications@github.com wrote:\n\n@karamana https://github.com/karamana Is debugging the only feature\nbroken for you or like @Nais777 https://github.com/nais777 all the\nfeatures are broken?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1194#issuecomment-327349144,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVCI8rFA4BEuzq6uj7sJ_TGfRU5ssBRks5sffcDgaJpZM4PNtGU\n.\n\n\n-- \nVijay\n. Yes I can confirm that the issue does not happen in release 0.6.63 and\nhappens in 0.6.64\nOn Tue, Sep 5, 2017 at 6:36 PM, Ramya Rao notifications@github.com wrote:\n\n@karamana https://github.com/karamana Is debugging the only feature\nbroken for you or like @Nais777 https://github.com/nais777 all the\nfeatures are broken?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1194#issuecomment-327349144,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVCI8rFA4BEuzq6uj7sJ_TGfRU5ssBRks5sffcDgaJpZM4PNtGU\n.\n\n\n-- \nVijay\n. Yes other features like auto-complete, go to definition etc are working.\nYour latest changes seem to work. I also tried adding breakpoint, which\nworked too.\nOn Tue, Sep 5, 2017 at 9:14 PM, Ramya Rao notifications@github.com wrote:\n\n@karamana https://github.com/karamana Are the other features of the\nextension like auto-complete, go to definition etc working as expected?\nI have a fix in for GOPATH issue with the debugger. Can you try it out?\nYou will need to download https://github.com/Microsoft/\nvscode-go/blob/master/Go-latest.vsix and then run code\n--install-extension Go-latest.vsix from the location where you downloaded\nthat file.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1194#issuecomment-327369527,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVCIyWoHs7mA_S173dYGJTEyPw_vOy8ks5sfhwSgaJpZM4PNtGU\n.\n\n\n-- \nVijay\n. Thanks for quickly resolving this.\nOn Tue, Sep 5, 2017 at 9:22 PM, Vijay Kumar kumar.vijay@gmail.com wrote:\n\nYes other features like auto-complete, go to definition etc are working.\nYour latest changes seem to work. I also tried adding breakpoint, which\nworked too.\nOn Tue, Sep 5, 2017 at 9:14 PM, Ramya Rao notifications@github.com\nwrote:\n\n@karamana https://github.com/karamana Are the other features of the\nextension like auto-complete, go to definition etc working as expected?\nI have a fix in for GOPATH issue with the debugger. Can you try it out?\nYou will need to download https://github.com/Microsoft/v\nscode-go/blob/master/Go-latest.vsix and then run code\n--install-extension Go-latest.vsix from the location where you\ndownloaded that file.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1194#issuecomment-327369527,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVCIyWoHs7mA_S173dYGJTEyPw_vOy8ks5sfhwSgaJpZM4PNtGU\n.\n\n\n--\nVijay\n\n\n-- \nVijay\n. The value of GOPATH is a prefix of the \"program\" attribute.\nThe value of GOPATH + \"/src\" is a prefix of the \"program\" attribute.\nThe \"program\" attribute is set to \"${workspaceRoot}/src/mymain\"\nGOPATH is set to the actual value of $workspaceRoot\nWhen do you plan to officially release the fix (with a new version number)?\nOn Tue, Sep 5, 2017 at 11:11 PM, Ramya Rao notifications@github.com wrote:\n\nThat's good to hear @karamana https://github.com/karamana\nIf you don't mind can you check a few things for me?\n\nSet trace to \"verbose\" in your debug configuration\nStart debugging, you will see verbose logging in the debug console\nThere will be a line Using GOPATH:\n\nIs the value there a prefix for the value in the program attribute in the\ndebug configuration?\nIs the value there + /src a prefix for the value in the program attribute\nin the debug configuration?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1194#issuecomment-327385023,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVCI-Ysg1RXGXK5wRnxj3KgXc8lOL4wks5sfjeogaJpZM4PNtGU\n.\n\n\n-- \nVijay\n. Hi Ramya,\nI use Go heavily in my development. Recently when I had to use CGo on\nWindows I ran into issues with compiling and linking with VSCode. This is\nbecause Go is compiled with MingW instead of Visual Studio tools on\nWindows. Are there any efforts inside of Microsoft to use VS to compile Go\nso everyone can benefit.\nApologize if I should have posted this question to a different audience. In\nwhich case please direct me to the right person(s).\nThanks,\nVijay.\nOn Tue, Sep 19, 2017 at 11:05 AM, Raj Krishnamurthy \nnotifications@github.com wrote:\n\nHi Ramya\nSorry for the delay.\nOnce I set the GOLANG path, the problem went away., However, I never set\nthe path variable prior to 0.6..65 upgrade.\nThanks very much.\nGo version: 1.8.3\n---launch.json---\n{\n\"version\": \"0.2.0\",\n\"configurations\": [\n{\n    \"name\": \"Launch\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    \"remotePath\": \"\",\n    \"port\": 2345,\n    \"host\": \"127.0.0.1\",\n    \"program\": \"${fileDirname}\",\n    \"trace\": \"verbose\",\n    \"env\": {},\n    \"args\": [],\n    \"showLog\": true\n}\n\n]\n}\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1194#issuecomment-330623090,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVCI4XsRKyn__NwPrDspH1vdLhXP8SKks5skAKCgaJpZM4PNtGU\n.\n\n\n-- \nVijay\n. VC++ compiler\nOn Mon, Sep 25, 2017 at 12:45 PM, Ramya Rao notifications@github.com\nwrote:\n\n@karamana https://github.com/karamana Which VS Tools are you referring\nto?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1194#issuecomment-331991121,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAVCI6X5AODZdkJBGE_sUZEOq7jG16GBks5smALhgaJpZM4PNtGU\n.\n\n\n-- \nVijay\n. ",
    "Southclaws": "The output pane shows the command\nC:\\Go\\bin\\go.exe build -o C:\\Users\\Southclaws\\AppData\\Local\\Temp\\go-code-check -tags \"\" -race -v .\nWhich is then followed by the list of files that it has checked, normally when there's an error this output looks like:\n```\n\n\n\n\n.\\my_code.go:23: some error\n```\nAnd when there are no problems, it simply looks like:\n<go package 1>\n<go package 2>\n<go package 3>\nWith no # prefixed lines, seems like the extension is grabbing the entire output and using it as an error message when no # prefixed lines are found.\nI'm not sure what affects the file it chooses to show the error in, it seems like the last editor pane that I saved a file in but it seems to jump around quite randomly sometimes.. Ah yes, I do have the -v flag and I remember now I did that to debug something else a while ago and assumed it wouldn't affect anything else. Thanks, this fixes the problem for me but I'll let you decide whether or not to keep this open, I can see how it could still be classified as a bug.\nSeems like it's still happening when the build succeeds, checking $LASTEXITCODE after running the command in PowerShell returns 0. No errors in the output pane.. I'm running into this quite a lot on large projects. One of the reasons I love working with this extension is the lint-on-save features so I don't want to disable that (it runs fast enough for me). The issue is if I change things in quick succession or do a Save All when changing lots of things.\nSurely there's a way the extension knows the PID of the linter? If so, then I think the extension should kill the existing lint task before starting a new one. Meaning only one lint process is running regardless of how it was triggered. This would mean there's no need to figure out if Save or Save All was used and also speeds up the process when making little changes in quick succession.\nMy TypeScript is rusty but I could look into this in future. I'm not totally sure how the extension triggers linters and keeps track of them but keeping the PID stored and killing it sounds realtively simple.\nIf I get anywhere with this, I'll submit a PR. But it would be useful to have some feedback on this idea from people more familiar with the extension's codebase!. I'm running into this currently on Windows, a couple of weeks ago everything worked perfectly but trying to work today and the extension just refuses to do anything. I'm not getting any linter output or static analysis. Going to attempt a backdate for now.. Revive is working great! Tested on osx and windows. ~ and ${workspaceRoot} work fine on both platforms.. ^I've noticed the syntax flashing on a few other file types too, it definitely seems like a general issue rather than Go-specific.. That fixed it, thanks!. I've used this recently and had the same thought. For now, I made a quick tasks.json for it:\njson\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Escape Analysis\",\n      \"type\": \"shell\",\n      \"command\": \"go build -gcflags '-m -m'\",\n      \"problemMatcher\": {\n        \"pattern\": {\n          \"regexp\": \"^(.*):(.*):(.*): (.*)$\",\n          \"file\": 1,\n          \"line\": 2,\n          \"column\": 3,\n          \"message\": 4\n        },\n        \"fileLocation\": \"relative\"\n      }\n    }\n  ]\n}\nBut it would be great to have a more in-built feature for this.. ",
    "samueletonon": "\n${workspaceRoot} is getting resolved to C:\\Devel\\GO\\src which is the folder you have opened in VS Code.\n\nand this is the main issue as i may have that folder open to have an overview of the modules i am working on it but at the moment i launch the debug i launch it on a specific file, welcome.go which is in a specific folder while workspaceroot has a different purpose.\nI would expect then ${workspaceRoot} being evaluated as the CWD the editor is pointing and looking in the documentation  ( https://code.visualstudio.com/docs/editor/tasks#_variable-substitution )  i found out\n${fileDirname} is the one is was looking for \n. ",
    "thomasdarimont": "I think the relevant code in the python vs code extension is here:\nhttps://github.com/DonJayamanne/pythonVSCode/blob/2cf147caea17f2e2f4818a91628f83c2dcf344ec/src/client/debugger/DebugClients/LocalDebugClient.ts#L109. I gave this a spin and I think I got something working now (also my first contribution to vscode-go) :)\n. PR is #1116 . Ouch, I indeed missed that, thanks for pointing this out.\nThose cases are IMHO rather difficult to handle with plain string magic - perhaps a better \napproach would be to use the go tooling for this. \nPerhaps we could leverage the AST \nderived via go Parser to find those single line / block comment as well as multiline string literals.\nBut I don't know how well the parser can deal with incomplete source code...\nWDYT?. Just gave this a spin - it seems that I need to adjust go-outline to also return the comments.\nWould it be possible to change the output of go-outline?\nFor instance currently go-outline returns an array of \"Symbol\"-Declarations in a file.\nHow about returning a \"CompilationUnit\" that contains those declarations and some additional comments?\nWith my branch I can get the comments with their respective positions.\nE.g. for the go file hello.go:\n```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc hello() string {\n// single line comment\n\n// single line comment line1\n// single line comment line2\n\n/* block comment in single line */\n\n/*\n    multi line block comment\n*/\n\nslString := \"single line string\"\nmlSlString := `multiline single line string`\nmlString := `\n    multiline\n    string\n`\n\ncommentStart := \"/*\"\n// foo\ncommentEnd := \"*/\"\n\nfmt.Println(slString, mlSlString, mlString, commentStart, commentEnd)\n\nreturn \"hello\"\n\n}\n```\nI get the following json representation:\njson\n{\n  \"declarations\": [\n    {\n      \"label\": \"main\",\n      \"type\": \"package\",\n      \"start\": 1,\n      \"end\": 476,\n      \"children\": [\n        {\n          \"label\": \"\\\"fmt\\\"\",\n          \"type\": \"import\",\n          \"start\": 25,\n          \"end\": 30\n        },\n        {\n          \"label\": \"hello\",\n          \"type\": \"function\",\n          \"start\": 34,\n          \"end\": 476\n        }\n      ]\n    }\n  ],\n  \"comments\": [\n    {\n      \"start\": 58,\n      \"end\": 80,\n      \"text\": \"// single line comment\"\n    },\n    {\n      \"start\": 83,\n      \"end\": 111,\n      \"text\": \"// single line comment line1\"\n    },\n    {\n      \"start\": 113,\n      \"end\": 141,\n      \"text\": \"// single line comment line2\"\n    },\n    {\n      \"start\": 144,\n      \"end\": 178,\n      \"text\": \"/* block comment in single line */\"\n    },\n    {\n      \"start\": 181,\n      \"end\": 214,\n      \"text\": \"/*\\n\\t\\tmulti line block comment\\n\\t*/\"\n    },\n    {\n      \"start\": 359,\n      \"end\": 365,\n      \"text\": \"// foo\"\n    }\n  ]\n}\nI could also try to add the comments to the respective declarations where they \nbelong to... but I thought a flat list might be easier to work with.\nI wonder whether it would make sense to transform the full go AST to JSON instead of\nadapting the \"minimal\" representation for every new feature.\nwdyt?\n. Sure no problem! Thanks for having a look into it :). ",
    "Knasinski": "Ditto to item 1. ",
    "edburns": "Any word on this?  I'm just running into this now.. Any idea why this hasn't been merged yet?. ",
    "varun1729": "Any updates? @ramya-rao-a  Here due to  219. ",
    "JakeHL": "I think this might be a limitation of delve as the go extensions for Atom seem to have the same issue. \nDoing a google search for Delve stdin also returns various posts about the inability to use stdin while debugging with delve regardless of editor.. ",
    "zhouhaibing089": "@ramya-rao-a I'm having a similar issue:\nI am a kubernetes developer(and thanks to vs-code which makes debugging extremely convenient), when I navigate to ${GOPATH}/src/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/runtime/scheme_test.go(which symlinks to ${GOPATH}/src/k8s.io/kubernetes/staging/src/k8s.io/apimachinery/pkg/runtime/scheme_test.go) and then click the run test, it complains:\n```console\nRunning tool: /usr/local/bin/go test -timeout 30s -tags  -run ^TestScheme$\ncan't load package: package k8s.io/kubernetes/staging/src/k8s.io/apimachinery/pkg/runtime: code in directory /Users/haibzhou/gopath/src/k8s.io/kubernetes/staging/src/k8s.io/apimachinery/pkg/runtime expects import \"k8s.io/apimachinery/pkg/runtime\"\nError: Tests failed.\n```\nAnd when I check in console:\nconsole\n$ go test k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/runtime\nok      k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/runtime        0.049s\n$ go test k8s.io/kubernetes/staging/src/k8s.io/apimachinery/pkg/runtime\ncan't load package: package k8s.io/kubernetes/staging/src/k8s.io/apimachinery/pkg/runtime: code in directory /Users/haibzhou/gopath/src/k8s.io/kubernetes/staging/src/k8s.io/apimachinery/pkg/runtime expects import \"k8s.io/apimachinery/pkg/runtime\"\nI am using vscode-go at version 0.6.63 by the way.\nAdding a customized config does not work either:\njavascript\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}/vendor/k8s.io/apimachinery/pkg/runtime/scheme_test.go\",\n            \"env\": {},\n            \"args\": [\n                \"-test.run=TestScheme\"\n            ],\n            \"showLog\": true\n        }\n    ]\n}\n. @ramya-rao-a the change in src/testUtils.ts is about the fix on running test.. go test -v import-path-to-my-package will do.. If this is a regression issue, I propose that we add a configuration like: test.verbose, if it is true, we add the flag -v, otherwise suppress the output.. PTAL again, I am not sure how the third item can be solved(and seems it is more than the effort here). ",
    "Nivea01": "I caught some screenshots\ncode file:nivea.go\n\nlaunch.json\n\nsettings.json\n\n. After getting your suggestion, i have known that what is it going on.\nThe execution file \"./dlv -h\" always return   >>   killed:9 \nI need to do this step below \nbrew install go-delve/delve/delve\nand go to $GOPATH/src/github.com/derekparker\ngit clone https://github.com/derekparker/delve.git\nCERT=dlv-cert make install\n(remove old dlv >  brew install delve  > codesign dlv)\nnot just run \n    go get github.com/derekparker/delve/cmd/dlv\nand it works now.\nThank you very much.. ",
    "cs007888": "thank you for your solution. ",
    "fernandezjose": "@Nivea01 Your solution didn't work for me. The step CERT=dlv-cert make install gave me back a \"make: *** No rule to make target 'install'\". ",
    "epic2005": "the issue also happened on me just like @ppcuban . @ramya-rao-a thanks. ",
    "nicpottier": "Just adding a quick note here that I'm facing the some problems and had to disable the lang-server to make vs-code workable again on a go repo.. There's a bit of a chicken and egg problem here. To be honest I'd be using vgo today on my projects if I had support for it in vscode, just so much clearer and faster than dep, glide and co.. Happy to contribute if people want to point me in the right direction.. As far as I can tell the error format won't change with vgo, but what will is code navigation.. IE the path to find a specific package is no longer just $GO_PATH/vendor but a version specific path instead. Do you know where that kind of resolving is taking place?. Ah, right you are.. a sample:\n% vgo list -m\ngithub.com/jmespath/go-jmespath                v0.0.0-20160202185014-0b12d6b521d8\ngithub.com/jmoiron/sqlx                        v0.0.0-20180406164412-2aeb6a910c2b\ngithub.com/koding/multiconfig                  v0.0.0-20171124222453-69c27309b2d7\ngithub.com/lib/pq                              v0.0.0-20180201184707-88edab080323\nSo the right version of pq is found in:\n$GOPATH/src/v/github.com/lib/pq@v0.0.0-20180201184707-88edab080323\n. Agreed, might be useful to know from the vscode folks where the current code is for resolving these. Would make sure that whatever is added to vgo would satisfy that requirement.. Awesome, thanks that's clear with respect to godef and gogetdoc I don't think either of those tools have support for vgo tools yet, but that gives us a clear path forward.\nFor Add Import seems like using vgo list -m would probably give us the right starting point to figure out which packages are available for import.\n@zmb3 I think vgo still supports vendoring.. at least the latest vgo has a % vgo vendor command which builds a local vendor directory for you.. @zmb3  Ah, right you are!. Ya, it is pretty unusable for me due to how long completions take :(. ",
    "tehsphinx": "The problem was a broken version of gocode in go 1.8. Updating gocode fixed the issue.\nSee also: https://github.com/nsf/gocode/issues/401. ",
    "charlires": "Thank you @ramya-rao-a . Yes, is not working for me\n\nThe extensions I have \n\nNorthem Dark is a Theme. Yes, I have useLanguageServer as true and Yes, that is causing the goToSymbol to not show the tests.. Sorry for the late response, It happens to me with any test file, curious thing is that is works with any no-test file.\n\n\nis . Here is my settings.json\n```\n{\n    \"editor.fontFamily\": \"Fira Code\",\n    \"editor.fontSize\": 14,\n    \"editor.lineNumbers\": \"relative\",\n    \"editor.fontLigatures\": true,\n    \"editor.minimap.enabled\": true,\n    \"editor.minimap.renderCharacters\": false,\n    \"extensions.autoUpdate\": true,\n    \"workbench.colorTheme\": \"Northem Dark\",\n    \"workbench.activityBar.visible\": false,\n    \"workbench.statusBar.visible\": true,\n    // \"go.useLanguageServer\": true,\n    \"go.docsTool\": \"gogetdoc\",\n    \"search.exclude\": {\n        // JS\n        \"/node_modules\": true,\n        \"/bower_components\": true,\n        // Go \n        \"/pkg\": true,\n        \"/bin\": true,\n        \"*/src//vendor\": true,\n    },\n    \"terminal.integrated.fontSize\": 14,\n    \"workbench.welcome.enabled\": true,\n    \"workbench.colorCustomizations\": {\n        \"statusBar.background\": \"#222222\"\n    },\n    \"window.zoomLevel\": -1,\n    \"terminal.integrated.shell.osx\": \"/bin/zsh\",\n    \"terminal.external.osxExec\": \"iTerm.app\",\n    \"editor.folding\": true,\n    \"window.title\": \"${rootName}${separator}${activeEditorMedium}\",\n    \"vim.autoindent\": false,\n    \"vim.useSystemClipboard\": true,\n    \"vim.leader\": \",\",\n    \"editor.formatOnSave\": true,\n    \"[go]\": {\n        \"editor.formatOnSave\": false\n    },\n    \"[ruby]\": {\n        \"editor.formatOnSave\": false\n    },\n    \"[cpp]\": {\n        \"editor.quickSuggestions\": false\n    },\n    \"[c]\": {\n        \"editor.quickSuggestions\": false\n    }\n}\n. @keegancsmith @ramya-rao-a Sorry for the late response, it's working now.. Looks like uninstalling and reinstalling the extension did the trick. @ramya-rao-a No, Installed it from vs code. ",
    "michaelmello": "So it looks like vscode uses v1 of the delve API: https://github.com/derekparker/delve/blob/master/service/rpc1/server.go\nUnfortunately, v1 does not allow the client to change the default length of the variable value, which is set to 64 bytes.\n\n\n\nAs a workaround, we can simply change the source of delve to return more than 64 bytes.\n1.) Navigate to %GOPATH%\\src\\github.com\\derekparker\\delve\\service\\rpc1\\server.go\n2.) Look for the defaultLoadConfig variable and change the third argument value of 64, which is the field: MaxStringLen. I set mine to 500.\n\n\n3.) Compile and install your modified version of delve. Navigate to %GOPATH%\\src\\github.com\\derekparker\\delve\\cmd\\dlv, and then run the command: go install.\n. @roblourens You are correct. Though this minor edit may still be necessary once the full value is returned.\nAfter more research, I think the problem lies with this call:\n\nThe Delve API method of interest is: ListLocalVars: https://godoc.org/github.com/derekparker/delve/service/rpc2#RPCServer.ListLocalVars\n\nIt takes a ListLocalVarsIn: https://godoc.org/github.com/derekparker/delve/service/rpc2#ListLocalVarsIn\n\nvscode-go is sending it the scope but not the Cfg which contains MaxStringLen. \n\n\nSince Delve defaults the MaxStringLen to 64, we'll need to explicitly ask for everything. I believe this is the problem but haven't had a chance to test.\n. ",
    "lggomez": "@edburns this is a hack in the delve debugger rather than a fix on the extension side\nTo fix this on the extension we have to use the delve v2 api call instead of the old one:\nhttps://godoc.org/github.com/derekparker/delve/service/rpc2#RPCServer.ListLocalVars\nhttps://godoc.org/github.com/derekparker/delve/service/api#LoadConfig\nThe place to make the change is here. I'm trying to take a look at it. @jgfet because the original delve API did not support this in an explicit way and the vs debug adapter used that version, hence the need to add support to v2 as explained in #1555 \nThe work is already merged to master (still to be released) and the new launch.json configuration options can be seen here: https://github.com/Microsoft/vscode-go/blob/master/package.json#L421-L464. I had a similar problem (in my case, adding undesired/wrong imports) and my workaround was to change the format tool to gofmt. This user setting should do the trick:\n\"go.formatTool\": \"gofmt\". I can no loger reproduce this since version 0.6.76+, vs code 1.20.1 commit f88bbf9137d24d36d968ea6b2911786bfe103002\nPS: I did not test it yet on bigger projects, only with github.com/go-training/helloworld, but it looks promising since I recall having this issue before\nCould someone else try to reproduce it?. @ramya-rao-a I was about to give this issue a try locally and I see you already implemented the fix\nThanks for the celerity. In my team we're really interested in having this feature since we tend to work a lot with responses and encoded strings, so It'd be a great addition to the extension\nWe could prepend it to the array values (sort of like the behavior that triggered the changes in #1384)\nI made a proof of concept here: https://github.com/Microsoft/vscode-go/compare/master...lggomez:values_1385\nIt seems to be working fine, is watch-friendly and also works fine with the variable lens (although I couldn't get it in the screenshot) but more test cases are probably needed:\n\nThis currently has 2 caveats:\n For some reason, the kinds returned by delve for the example slices are GoReflectKind.Uint\n Since the conversion from value to string is performed locally by the extension, I don't know if we have the guarantee that the resulting string values will match the ones produced by go (at least for runes)\nThis is the example code I'm using\n```go\npackage main\nimport \"fmt\"\ntype foo struct {\n    a []uint8\n    b []byte\n    c []byte\n    d int\n}\nfunc helloworld() string {\n    asd := foo{a: []uint8(\"Hello World!!\"), b: []byte(\"Hello World!!\"), c: []byte(\"\"), d: 42}\n    return string(asd.a)\n}\nfunc main() {\n    fmt.Println(helloworld())\n}\n``\n. I included runes. These kinds should include most cases:childKind === GoReflectKind.Uint || childKind === GoReflectKind.Uint8 || childKind === GoReflectKind.Int || childKind === GoReflectKind.Int32`\nAlso added some exception handling and refactored the logic into a separate method\nDoes the debugger handle the value length when loading it for the lens/watch or should we set a max length when converting the slice?\nIf this feature looks ok to push forward, should it be able to be enabled/disabled via a new setting property?. > What about the scenario where there would be an array/slice of kind int/int32 that is not meant to be string? Do you know of any documentation that can help us understand these types and their intended usage better?\nThat's very tricky, I don't think we have any runtime information exposed by the debugger which can help us to infer these cases so it's either adding this display value or not, hence my suggestion of making it optional\nOf course, I may be overlooking something useful within this context, so any other suggestions are more than welcome. > The debugger shows whats sent over by delve. Delve already truncates the array. See https://github.com/derekparker/delve/blob/62fe792bfdf6599ad06c084096efd96a01246ab8/service/api/types.go#L192-L206\nAbout this, I found the following:\nhttps://github.com/derekparker/delve/issues/609#issuecomment-239161459\nhttps://github.com/derekparker/delve/issues/659#issuecomment-256945278\nIt seems delve pages ~~string~~ array values, so changing the size param or getting the next n elements could be an option. I'm not quite familiar with the code yet so I don't know the feasibility of including this feature. This should go into a separate issue though. Now that the initial port to v2 API is merged we can look forward to support this feature. What do you think @ramya-rao-a?\nJust to start, these are the 3 initial steps that come to mind:\n\nAdding the StepBack and ReverseContinue requests to the debug adapter\nIntegrate said requests with the rewind apicall. I assume that each invocation goes one step back\nAdd proper compatibility checks and configuration flags (in case that rr isn't supported on all backends or in certain scenarios)\n. @ramya-rao-a I'm a bit puzzled on the implementation of this feature, after taking a more in-depth look:\n\nVS Code\nThe debug protocol certainly states that these events are supported, but I can't find how to trigger this action from the editor (BTW, where is supportsStepBack configured?)\nDelve\nThe rewind command, in terms of flow, is just a continue in the opposite direction to the previous (immediate) target, and the expected requirement is that the target comes from a process recording. I guess that this will depend on the remote dlv replay instance, so as long as we handle errors accordingly we should be fine\nSo delve isn't difficult to integrate per se, but I don't know how to test the VS Code side, can you give me some advice?. I don't have previous experience using rr so after taking a quick look at the documentation I found that I needed to make a recording of an existing go application. I didn't dwell too much into that and I moved on to other issues/features, and it seems like no one else took this for the time being\nIf you can help with the former I'can try to retake this. Tests pass locally but I got these 2 Uncaught Error: write EPIPE errors on ci, and I can't trigger a new build. Could it be related to #1472, on how code handles the processes?. @ramya-rao-a coincidentally, I had this problem today with guru (10-15 processes eating 250-300MB each), I had to set go.enableCodeLens.references to false... altough it can be a separate issue. FWIW, I'm giving it a try here: https://github.com/Microsoft/vscode-go/compare/master...lggomez:delve_v2, it's still a work in progress\nThe diff between v1 and v2 seems to be mostly on the side of wrapper types (for both in/out params) and the inclusion of the LoadConfig type which gives us the customization options for #868, among others). These are obviously breaking changes but it looks a bit less painful than I thought originally\nWith these changes, the debug mode blows up upon launch with the following errors:\n\nDo you have any tips on how to debug this? breakpoints on goDebug don't get bound and I find the verbose mode being not really helpful\n. Some more info: This is the diff I get by logging the delve API calls from the extension\nExample code is the same as https://github.com/Microsoft/vscode-go/issues/1385#issuecomment-368319225 for the package github.com/go-training/helloworld which I modified\nv1:\n2018/03/05 21:54:15 server.go:73: Using API v1\n2018/03/05 21:54:15 debugger.go:98: launching process with args: [/home/razael/go/src/github.com/go-training/helloworld/debug]\nAPI server listening at: 127.0.0.1:2345\nCALL - RPCServer.CreateBreakpoint [{\"file\":\"/home/razael/go/src/github.com/go-training/helloworld/main.go\",\"line\":14}]\n2018/03/05 21:54:15 debugger.go:340: created breakpoint: &api.Breakpoint{ID:1, Name:\"\", Addr:0x49c34c, File:\"/home/razael/go/src/github.com/go-training/helloworld/main.go\", Line:14, FunctionName:\"main.helloworld\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}\nCALL - RPCServer.Command [{\"name\":\"continue\"}]\nCALL - RPCServer.ListGoroutines []\n2018/03/05 21:54:15 debugger.go:497: continuing\nCALL - RPCServer.ListGoroutines []\nCALL - RPCServer.ListGoroutines []\nCALL - RPCServer.ListGoroutines []\nCALL - RPCServer.ListGoroutines []\nCALL - RPCServer.ListGoroutines []\nCALL - RPCServer.ListGoroutines []\nCALL - RPCServer.StacktraceGoroutine [{\"id\":1,\"depth\":20}]\nCALL - RPCServer.ListLocalVars [{\"goroutineID\":1,\"frame\":0}]\nv2:\n2018/03/05 21:55:18 debugger.go:98: launching process with args: [/home/razael/go/src/github.com/go-training/helloworld/debug]\nAPI server listening at: 127.0.0.1:2345\nCALL - RPCServer.CreateBreakpoint [{\"file\":\"/home/razael/go/src/github.com/go-training/helloworld/main.go\",\"line\":14}]\nCALL - RPCServer.Command [{\"name\":\"continue\"}]\nCALL - RPCServer.ListGoroutines []\n2018/03/05 21:55:19 debugger.go:497: continuing\nHello World!!\nCALL - RPCServer.ListGoroutines []\nFailed to get threads.\nFailed to get threads.\nThe ListGoroutines call at handleReenterDebug is what fails in last place, but the error received in the callback is undefined. I've been swamped with work these last weeks so unfortunately I couldn't put any further effort into this. The WIP branch I have it this one: https://github.com/Microsoft/vscode-go/compare/master...lggomez:delve_v2, but since the new apicalls aren't working I can't consider it PR ready yet. There's also the difficulty of debugging the debug adapter in a fast and reliable way\nA tentative roadmap would be the following:\n\nMake it work\nTest against regressions\nRefactor the v2 and v1 apicalls so the user can switch between them via config or command (for those are still stuck with v1)\n\nIf someone can give me a hand with the debugging part I can continue with this migration. @aarzilli indeed, that was the problem. I just verified it so I will continue with the rest of a basic debug case during the following days. Thanks for the tip. @ramya-rao-a I made progress to the point of having a working adapter. I conducted very basic tests but so far all of the basic commands seem to work\nI've some questions regarding the next steps to take\n\nI recall you saying that the extension config is cluttered enough so adding any new settings is heavily discouraged. We have to support the configuration of this parameter in order to allow users to configure the debugger (should fix #868, among others). What do you suggest?\nVersion 2 of the api seems to be oficially available since v0.12.0 (Jan 11, 2017), although the v2 services were already present since april 2016 (correct me if I'm wrong @aarzilli). Should we preserve support for the v1 api? this would warrant compatibility for users with old versions who cannot update delve, but will require a somewhat large refactor of the debug adapter. Also, it should be configurable, bringing us back to the previous question\nDo you have any test program that you use to test the debugger and may be willing to share? I just want to test this thoroughly and make sure that I'm not introducing regressions. Having some unit tests would be a plus but the effort required (if plausible) seems huge. @ramya-rao-a thanks for the help, this work is finally taking shape and the plan sounds good to me\n\nI'll start debugging tests tomorrow, on my work projects. Regarding remote debugging, I just found the api calls needed to achieve it: https://godoc.org/github.com/derekparker/delve/service/rpccommon. These should be common across v1 and v2 so the compat is already granted\nI added the check during launchRequest, upon successful connection to delve: bcb89e42cc9a929a7421e854957b8f223b7aecb5\nThe api also supports changing the version served by the remote server, but I prefer failing fast instead of doing that as I deem it too aggressive to be a default behavior. I believe that the debug tests command uses the currently selected debug configuration, so as long as you have v2 activated on that config with these settings you should be able to use it. @ramya-rao-a my bad. We can add an option that, if set to true, will bypass that default launch cfg and use the currently selected one forcing (or validating) that it has mode === 'test'\nCan we use the configurationmanager from the native debugService to retrieve the launch cfg from the codelens provier?. @kzhui125 never tried such large limits but I can't say it's unexpected though, you'll have to settle down with a lower value\nWe could measure which part has the major slowdown: delve, the rpc apicall itself or vs code. A similar issue: if you launch a remote debug session and the headless server isn't up it seems that the debug task hangs forever waiting to connect\nI thought that the client connection had a defined timeout, although it may be missing something. @primalmotion the ci log shows that the linter failed: https://travis-ci.org/Microsoft/vscode-go/jobs/368922868#L877\nRun the TS linter on the files you changed and try again\nYou can install it here: https://marketplace.visualstudio.com/items?itemName=eg2.tslint. @ramya-rao-a PTAL\nMy second point from this comment still stands, on whether should we preserve the v1 adapter or not\nLinux testing so far is going alright. I will continue on mac, although I don't have any windows VMs to test at the moment. This is the current example I have of the bug:\nWhen I start debugging, I can see the breakpoints activated but with errors on the request:\n\nSetBreakPointsRequest\nAll cleared\nCreating on: /home/razael/go/src/github.com/go-training/helloworld/main.go:4\nCreating on: /home/razael/go/src/github.com/go-training/helloworld/main.go:6\nError on CreateBreakpoint: no code at /home/razael/go/src/github.com/go-training/helloworld/main.go:4\n{}\n2018/05/12 01:49:46 debugger.go:340: created breakpoint: &api.Breakpoint{ID:1, Name:\"\", Addr:0x49c1af, File:\"/home/razael/go/src/github.com/go-training/helloworld/main.go\", Line:6, FunctionName:\"main.main\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(0xc42002a2d0), LoadLocals:(*api.LoadConfig)(0xc42002a330), HitCount:map[string]uint64{}, TotalHitCount:0x0}`\nAfter I try to set a new breakpoint, all further requests fail:\n\nSetBreakPointsRequest\nAll cleared\nCreating on: /home/razael/go/src/github.com/go-training/helloworld/main.go:4\nCreating on: /home/razael/go/src/github.com/go-training/helloworld/main.go:6\nCreating on: /home/razael/go/src/github.com/go-training/helloworld/main.go:7\nError on CreateBreakpoint: no code at /home/razael/go/src/github.com/go-training/helloworld/main.go:4\nError on CreateBreakpoint: Breakpoint exists at /home/razael/go/src/github.com/go-training/helloworld/main.go:6 at 49c1af\n2018/05/12 01:50:27 debugger.go:340: created breakpoint: &api.Breakpoint{ID:2, Name:\"\", Addr:0x49c1c4, File:\"/home/razael/go/src/github.com/go-training/helloworld/main.go\", Line:7, FunctionName:\"main.main\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(0xc42044b4a0), LoadLocals:(*api.LoadConfig)(0xc42044b530), HitCount:map[string]uint64{}, TotalHitCount:0x0}\n{}\nBy the looks of it, it seems that the CreateBreakpoint failure is not handled appropiately and the following requests will always fail since the GoDebugSession.breakpoints end up in an invalid state, thus cleanup of failed/invalid breakpoints should be applied on promise rejections for CreateBreakpoint (and maybe ClearBreakpoint, I'm still not sure about that one)\nIt may also be bad handling of promise rejections from the v2 api on our side. I'm still not well versed on Typescript, so any pointers will be helpful\n. @primalmotion \nThis is the setup I use on the dev host:\n\"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Connect to server\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"${workspaceRoot}\",\n            \"port\": 8181,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [],\n            \"dlvLoadConfig\" : {\n                \"maxVariableRecurse\": 1,\n                \"maxStringLen\": 10,\n                \"maxArrayValues\": 10,\n                \"maxStructFields\": -1\n            },\n            \"useApiV1\": false\n        },\nAnd these are the commands for both v1 and v2:\ndlv debug --headless --log --listen=127.0.0.1:8181\n    dlv debug --headless --api-version=2 --log --listen=127.0.0.1:8181\nI didn't have time to check the variables on remote yet, but I'll get on it as soon as I can. @ramya-rao-a @primalmotion \nI've not been able to repro the issues on v2 remote debug, this is my current state:\n\nCan you share the apicall responses for those that are giving you problems right now?\nI change these log calls to logger.error in order to get a more detailed view of the apicall results if needed\n. Ok, so I actually hit a diff wit that launch config, the VariablesRequest calls seem to fail on remote\nSomething interesting about this is that numeric literals seem to work, while everything else fails since they do the calls on demand\n\n. On a side note, the dlv debug output is as verbose as it gets so we'll have to live without it for now. I'd like to see if there are any differences between the debugger state and the actual response received by the adapter on the LocalVariables call, although it might be a bit far-fetched from the actual cause of this regression\nI raised an issue about this to see if they welcome the idea. @ramya-rao-a I fixed the issue, it turns out that the delve loadConfig was not being intialized for remote sessions because that path has en early return. It should work correctly now. Do you have a list of the updates on the debug adapter?\nFor starters, we can use args.breakpoints instead of args.lines in the setBreakPointsRequest method, which I may do for #1720 (and possibly #1660, if aplicable). @cassiobock are you still working on this or I am free to take a look at it?. @ramya-rao-a so it seems that the clean install did the trick, since she still has both 1.9 and 1.10 installed so we can't determine if that was the root cause\nI'd go along with @ikgo's commentary. I'm looking at it @ramya-rao-a . The rpc name for the v1 api was missing for watch requests, it seems to be working now on the attached PR. PTAL @ramya-rao-a . As you said @freman, this one was easy to implement, it was an oversight due to limitations of the legacy debug adapter API, the new one supports this scenario\nYou may try the feature on a build from the attached PR. @ramya-rao-a PTAL. I can work on this, it's a pity I couldn't make it to 0.6.83\nTo recap: the change has be done here:  https://github.com/Microsoft/vscode-go/blob/0.6.82/src/goRunTestCodelens.ts\nAs you mentioned in https://github.com/Microsoft/vscode-go/issues/1555#issuecomment-396415464, currently there isn't a straightforward way to bypass the hardcoded config in the codelens provider and use the launch config from there. That would have been the prefered way since it would be really dynamic and only tied to the actual debug configuration selected by the user\nEither way, we still have to be able to access the settings from the provider if we wanna make this optional to follow the intended transition to v2 plan\n. It is just a reminder on this new issue. I haven't started any work on this yet. @ramya-rao-a PTAL. I have to test it a bit more but it seems to fix the bug on the reported case of strings.Replace(). PS: this also fixes an out of bounds access here. Well, it covers all basic cases now, what follows is the composite strings like double quotes within back-ticks and viceversa:\n\n. @ramya-rao-a After several adjustments I think it is ready to try, it works for most of the basic scenarios I came up with. All ci jobs failed with a seemingly unrelated npm error, so you'll have to trigger another build\nThe following test fails locally but I see that it also fails on my local master branch, I'm not really sure why:\n```\n  2) Go Extension Tests\nbase.js:240\n       Test Completion Snippets For Functions:\n      AssertionError: 'funcAsVariable(${1:k})' == 'funcAsVariable(${1:k string})'\n      + expected - actual\n      -funcAsVariable(${1:k})\n      +funcAsVariable(${1:k string})\n  at vscode.workspace.openTextDocument.then.vscode.window.showTextDocument.then.provider.provideCompletionItemsInternal.then.items (DEV/GITHUB/vscode-go/test/go.test.ts:804:13)\n  at <anonymous>\n\n```. @ramya-rao-a PTAL\nI wasn't available this last month due to work but now I'm returning to my regular schedule\nAlso, I couldn't find out the cause of this failure but it is a local issue only. Not at all, this issue is long overdue so the fix will be really welcome into february's release :thumbsup:. @ramya-rao-a PTAL. @ramya-rao-a Done. Regarding the launch config, actually this doesn't depend on launch.json, it was just a bad variable naming from a previous test. Indeed, it seems that @Sharpiro and @yui-knk hit the spot\nThe switch to logrus also switched the default output stream of the init messages to stderr. The workaround should fix it, although If not synchronized, and the debugProcess event handlers are non-blocking we could have a datarace causing multiple connectClient calls\nWhat do you think @ramya-rao-a ?. The previous log was restored, it should work again after updating delve from master. @Sharpiro custom debug configurations for codelens debug sessions were not supported. This was just merged on #1749 some hours ago so you're free to test it from master if you want. Static debug configuration for unit tests is a known issue. #1749 solved it in regards to delve support, I\u00b4ll take a look at this\nPreferably, \"go.gopath\" will override the environment gopath, which is the one vscode is using for default on the test debug codelns. Can you add \"trace\": \"verbose\" to the debug config in the launch.json and share the logs?. @WithLin can you share the logs again but using the latest version? I didn\u00b4t dive into the logs yet but the latest beta contains changes that should help diagnosing the cause\nTo install the update,\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix\nRun code --install-extension Go-latest.vsix\nIf the above fails with Error: end of central directory record signature not found, then clone this repo and use the Go-latest.vsix file from the cloned repo\n\nReload VS Code\n. There are 2 issues here:\n\n\nThe extension supports conditional breakpoints, but it looks like sometimes it still gives the unsopported warning when it shouldn't. I could reproduce it but I don't have a list of steps yet\n\nConditional expressions with external package references aren't working: the expression num == \"2\" works but fmt.Sprintf(\"%s\",num) == \"2\" doesn't\n\nI will look into the second issue first. I debugged the debug adapter and found out that this is actually a limitation of delve: https://github.com/derekparker/delve/blob/2a2d1040e9b85e069c101bf9916d333e9e3cf54d/pkg/proc/eval.go#L373-L403\nI don't have Goland to compare but my guess is that they're either using another debugger or a fork/built-in solution. @blacktop I sent a PR to make the logs more clear: #1815\nGoland is a completely different beast: IntelliJ (the core IDE) has its AST engine, so they have implemented their own Go lexer/parser in order to make the most of it, and that's how the IDE refactorings look so seamless and assorted in comparison\nI bet they use delve as the debug backend, and they may attempt to extract the function calls to a shadow variable in order to support this scenario. I'm just speculating though, their current implementation is closed source. @michaelkleinhenz this behavior is due to the default variable recursion level that delve uses, which is 1, so anything deeper that that won't be evaluated for inspection\nTry again with these settings in your current launch.json debug profile (requires vscode-go 0.6.84 or later):\njson\n\"useApiV1\": false,            \n\"dlvLoadConfig\" : {\n    \"maxVariableRecurse\": 3,\n    \"maxStringLen\": 10,\n    \"maxArrayValues\": 64,\n    \"maxStructFields\": -1\n}\n@ramya-rao-a I would't consider this as a bug, but we could use a more user friendly default like 2 or 3  (I'm currently using 3 at work without any problems)\nI don't know how big the performance hit would be on the delve/adapter side for some edge cases like  trees or recursively nested structures with heavily population on the same level, although I don't have a real example from my side. This is with maxVariableRecurse=3\n\n. @willfaught the extension exposes a symbol provider so it should be solvable on our side\nI may give this a try. I think that this behavior is intended since method receivers are components of the symbol, consider these two examples:\nRegular methods\n``` go\npackage main\nfunc addRecentSearchesComponent(a string, b string, c string, d string) string {\n    return a + b\n}\nfunc addSearchComponent(a string, b string, c string, d string) []byte {\n    return []byte(a + b)\n}\nfunc main() {\n}\n```\nStruct methods with value/pointer receiver:\n``` go\npackage main\ntype Test struct {\n    base string\n}\nfunc (t *Test) addRecentSearchesComponent(a string, b string, c string, d string) string {\n    return t.base + a + b\n}\nfunc (t *Test) addSearchComponent(a string, b string, c string, d string) []byte {\n    return []byte(t.base + a + b)\n}\nfunc main() {\n}\n```\nSearching for addsearchcomponent will work as intended on the first example, with the exact match highlighted. For the second example, (*Test).addsearchcomponent does the trick\nIt makes sense that the query with receivers won't get an exact match since the type itself is part of the symbol, but we could still handle the special case of this example, in which only an exact suffix match is found on the workspace symbols, and highlight that one\nWhat's your take on this @ramya-rao-a ?. I see it traverses the results from the query so I assumed the highlighted result could be changed from our provider but, as you say, it looks like it isn\u00b4t\nMy idea was to follow @willfaught case in which only one exact suiffix (because of the method receiver) matches, and highlight that one over the rest of the fuzzy matches. It should be configurable of course, but we could omit the main package prefix from variables. I\u00b4d have to check if that can be manipulated from the variablesRequest handler\nAlso, external packages would still contain their full path, trimming all names requires a more complex solution. No, I will try to reproduce it\n@viggyprabhu if you can share a reduced repro code it will be very helpful. Additionally, if you installed the latest version of the extension the \"Failed to next\" message should include the delve error, making diagnostics faster. As @ramya-rao-a said, we cannot guarantee that these changes don\u00b4t break the code, because we lack the syntactic context in order to be able to detect any invalid token combination. Also, the document received on the event handler contains the latest, already modified version, so we can\u00b4t even handle cases like newlines whithin valid code lines\nThat said, we can still ignore the coverage changes on events and lines that only contain anything that matches the /s regex pattern (any whitespace, tab, or newline/carriage return). I know this use case won\u00b4t help you in your particular scenario but it might still be worth it to handle from an usability point of view\nThis is something I made for these scenarios, can you verify it?\nhttps://github.com/Microsoft/vscode-go/compare/master...lggomez:coverage_changes. Neat\nAre you sure about remote not working @ramya-rao-a ? I could see the globals just fine locally, at least with delve Version 1.0.0 - Build: $Id: c98a142125d0b17bb11ec0513bde346229b5f533\nAlso a minor detail, but we could filter the initdone variable. It seems to be a global inyected by internal package initialization code, and it should never be != 2 during debugging (in a sane scenario). It is a reasonable request\nThe intended release plan of the delve V2 integration was to have this compatibility config flag during a couple of releases using V1 as the default, and then make the final switch to V2. @vale910 the error comes from delve itself which is unable to continue in that scenario, so no stacktrace \n or panic information will be shown:\nhttps://github.com/derekparker/delve/blob/b5cf58456418a76902aa551ed5b022c90cd76fa7/pkg/proc/gdbserial/gdbserver.go#L698-L726. Coming back to this issue, it's worth to take note of the following comment found on delve that points to a platform-dependent issue:\n\n// The following are fake BSD-style signals sent by debugserver\n// Unfortunately debugserver can not convert them into signals for the\n// process so we must stop here.\n\nSo, to recap (please correct me if I'm wrong):\n- Debug server sends an uncaught exception (EXC_BAD_ACCESS?)\n- Delve catches it and propagates it as an internal error (because it cannot propagate as a SIGSEGV -> panic)\n- VS debug adapter handles the response as it is\n@protheusfr that probably happens because exception and signal handling is different across systems, and said behavior happens on OSX. Someone from the delve team will surely have a more detailed insight of this. With Delve unable to apply the breakpoint changes being a separate issue, what @isidorn suggests is an optimization related to #1660, which we should plan to do either way. I cannot reproduce the bug you mention but neither can I say that it works as intended; using the following dir structure:\ndrwxrwxr-x  2 razael razael ? 4,0K Feb  5 23:13 project-1\ndrwxrwxr-x  2 razael razael ? 4,0K Feb  5 23:13 project-2\nlrwxrwxrwx  1 razael razael ?    9 Feb  5 23:17 sym-project-2 -> project-2\nI get the following error on debug console:\nThe program \"/home/razael/DEV/go/sym-project-2\" must be a valid go file in debug mode\nAlso tried this on a workspace and it doesn't change very much\nI made a tar file containing the repro workspace and projects, for easier reproduction for whoever wants to try it:\ntest2111.tar.gz\n. Maybe not directly related with the json generation, but I think one of the main problems during debug configuration is the inconsistency between the debug test codelens and the debug viewlet launcher. Centralizing the configuration between GoRunTestCodeLensProvider and GoDebugConfigurationProvider should be the starting point towards this, but I don't know the current feasibility of this change. I'd like to have this feature but is it achievable from the extension? as you mention it will require to fetch the variable to delve with a different configuration every time you click the copy value command from the menu . @ramya-rao-a I have noticed a couple of problems that are blockers to implementing this and I'm not certain that they are on the extension end:\n\n~~The Copy Value action triggers a request but only on the variables viewlet, the watch action only copies the UI value. This also happens during population of the view. I assume it could be a performance optimization on the vscode side, but I cannot confirm any of this yet~~ This just applies to root values (expressions). Children values should be casted correctly as Variable types\nWe lack the context information to identify the \"Copy Value\" request, so for the time being we are not able to send a custom delve configuration for that apicall. \nPer spec, we should be receiving that info on the EvaluateArguments param: https://github.com/Microsoft/vscode/blob/b5ff5a17fd22e273aa989b1697d40492d6bc244d/src/vs/workbench/contrib/debug/common/debugProtocol.d.ts#L963-L970\n\n~~Looking into the former, it looks like it should do the request to the adapter but for some reason it doesn't:\nhttps://github.com/Microsoft/vscode/blob/35523f6c51bdc1edae1696a586dadd021fe47096/src/vs/workbench/contrib/debug/electron-browser/variablesView.ts#L137-L155\nhttps://github.com/Microsoft/vscode/blob/35523f6c51bdc1edae1696a586dadd021fe47096/src/vs/workbench/contrib/debug/electron-browser/watchExpressionsView.ts#L142-L175~~\nAnd about the later... I don't know, I should debug vscode along with the debug adapter. I haven't cloned (nor taken a look) at the vscode repo but I guess I can give it a try, do you have a guide on how to do this?. I sent this PR:https://github.com/Microsoft/vscode/pull/68585 to address the context on eval requests. Once that's merged I can start working on implementing this feature. I'm waiting until the february release so the test results are more stable instead of doing this on vscode master. Meanwhile, there are a couple of doubts about this:\n\nCopyValue actions are concurrent and non-blocking, so we should take this into account before setting arbitrary values for the request, these should be low enough that delve doesn't start degrading or having long response times. I didn't find any benchmarks about this so it's something I should dig deeper\nIf we set sensible default max values but the user still needs to be able to copy arbitrarily large values, these should be configurable, altough this implies duplicating the dlvLoadConfig section on the debug config level. I\u00b4m not really sure about this. I like this approach\n\nDelve supports overriding the max value defauls with a toml configuration but this requires that the user sets up a config file and changes the dlv commandline parameters to do so (I don't remember if we support sending explicit args to delve from launch.json). Doing a fetch request to get and compare lengths. I've made this work with strings in this WIP changeset: #2375\nThe gist of this is that it should be able to work with the rest of the cases, but there are some limitations to this implementation (or rather, an oversight on my part about this feature):\n- This can't be used on the watch pane because all eval requests arrive with the same context, making this new behavior the default for its population\n- For the variables pane: it only works on strings because for other kinds it will still copy the representation given by convertDebugVariableToProtocolVariable:\n\nOverriding this so CopyValueAction calls receive the canonical value instead of this representation  would be an alternative but I'm not certain about the risks of breaking things while implementing this because we are changing the semantics of the debug adapter callee. @jhendrixMSFT what are your thoughts on this?\n. @ramya-rao-a @erihanse function calls (with the exception of runtime calls like len or cap) are not supported by delve. In fact, that error comes from delve's response to vs code's eval request\nI remember putting that error log on evals to diagnose better these issues, altough we could have a more user friendly message on this specific case, since there's nothing we can do about it right now. > I am sure it would trigger a lot of code changes across the repo.\nYou're right on that @ramya-rao-a\nI'm giving it a try on a branch, and so far I've fixed most the checks except for the strictPropertyInitialization and strictNullChecks flags, the later being the most tedious one:\n\nI don't know if this can be automatized so it'll take some time\n. @ramya-rao-a nope, I renamed it so this first pass is ready to go. I did a quick rundown test of the debug changes and so far It is good, at least on a minimalist test package. I am on leave until thursday so I wont be able to debug complex and productive tests until then\nThis release is going to be really great. @tcagan just so you know, recursion depth can be configured in the debugger via settings:\n\"go.delveConfig\": {\n        \"useApiV1\": false,\n        \"dlvLoadConfig\": {\n            \"followPointers\": true,\n            \"maxVariableRecurse\": 3,\n            \"maxStringLen\": 100,\n            \"maxArrayValues\": 100,\n            \"maxStructFields\": -1\n        }\n    }\nBe careful with the values because the traversal time might grow exponentially, I would not recommend a maxVariableRecurse value higher than 5, but you're welcome to try. Is it a good idea to have it as the default?\nAltough these should be edge cases, there is a certain possibility of testing code which doesn't support parallel execution due to shared package state, like in-memory caches being used from the tests. I agree. It's completely reasonable, considering that the user will have to edit the created code anyway and therefore be conscious about what it does. CI is failing due to the Gometalinter error checking, the rest of the tests seems to be alright. Thanks for the thorough review, the original PR had the bare minimum to ensure compilation but now it looks way better!. Aside from fixtures that contain incomplete code on purpose (completions) the ones that contain working code like diffTestData may be split into individual modules (as they are separate programs). The following test fails for some reason in one job (this code shouldn't change fixtures or autocompletion)\n1) Go Extension Tests\n       Test SignatureHelp Provider using gogetdoc:\n     AssertionError [ERR_ASSERTION]: No signature for gogetdocTestData/test.go:[object Object]\n      at vscode.workspace.openTextDocument.then.testCases.map.provider.provideSignatureHelp.then.sigHelp (test/go.test.ts:108:13). Indeed, for some reason the fully qualified name is missing on indexed properties, or at least that's what I saw in this scenario during debug. I'm currently not aware of the cause of the issue, so any other insight will be helpful. I forgot to add that this also affects expression generation (which is the case for struct field accesors), but a check similar to what I'm adding now was included in #2020\nThese are the examples I'm using. helloworld is a simple package and helloworld_modules contains imported structs: helloworld.tar.gz\n2020 fixes the fully qualified names for scopesRequest (and variablesRequest struct kinds), but this time the remaining problem lies on the other primitives. Calling addFullyQualifiedName for the debug variables isn't as simple this time because (as far as I've tried) it either breaks map/slice or struct types (due to incompatibilities with convertDebugVariableToProtocolVariable). I guess that's why the undefined check is done instead of calling the method\n. Yes, it seems to work as well as the individual ifs. I omitted the undefined check since I don't know if it is still desirable there\nThe remaining issue is to fix the copy value returns for struct fields on the variables pane;  if you check the helloworld_modules example the variables pane returns the struct path:\n<main.SBase>\n<github.com/lggomez/sub1.S1>\n<github.com/lggomez/sub2.S2>\nI'll try to get deeper into this tomorrow, but if you have already worked on debugging this code path any comments are be more than welcome\n. My understanding is that it should copy the selected value. In order to do that it emits an EvaluateRequest and fetches the latest value\nWhat I think it may be happening is that the expression isn't generated correctly, initially during VariablesRequest, and the type names are the response of that failed EvaluateRequest args. When I try to copy the value of s0.B, the expression sent is s0, thus returning the type name as the result:\n\n. I think I finally found the gist of it in the convertDebugVariableToProtocolVariable method. PTAL. I couldn't reproduce this, I've tried both 0.92 and master of the extension, along with delve 1.2 and 1.1 on VS Code 1.31.1, linux\n\nLast night, it still works, but, now, I can't watch any variables.\nThank for helping.\n\nThis is strange. The debug trace doesn't show any errors and the locals are coming ok from the \nScopesRequest. I see you have different gopath and program paths but delve appears to be working so we can discard that. Also, if this was an identified issue on the VS Code workbench there should be more reports on this . The execFile method accepts a timeout parameter in milliseconds, time after which the child process will be sent a SIGTERM signal\nThis fallback is really needed, as guru is still unusable on my workspace since it kills my mac with a couple dozen processes, but which is an acceptable default value? also, it would need to be either:\n\nA single configuration, but with a sensible default so it doesn't end prematurely 'long' running processes like static analyzers\nA configuration per file, being able to set up different values according to each tool\n\n\n... except the ones that run in server mode ...\n\nI guess you're talking about the debugger and the language server. Is there any other case I'm missing?. > VS Code has a timeout for the formatOnSave feature (editor.formatOnSaveTimeout)\nThis timeout should send a CancellationToken to the extension so there isn't anything to do on our side right?\n\nFor us, I can think of a single setting say go.operationTimeout which can take an object like\n{\n    \"buildOnSave\": 1000\n     \"buildOnCommand\": 2000\n     \"completion\": 2000\n     ....\n }\n\nI was thinking on implementing an execFile wrapper in utils that handles the configuration retrieval and timeout parameter according to an enum parameter with these values. So, these are all the execFile calls we currently do (excluding the debug adapter):\ngoModifytags.ts:130:    let p = cp.execFile(gomodifytags, args, { env: getToolsEnvVars() }, (err, stdout, stderr) => {\ngoGetPackage.ts:27: cp.execFile(goRuntimePath, ['get', '-v', importPath], { env }, (err, stdout, stderr) => {\ngoSymbol.ts:111:        p = cp.execFile(gosyms, args, { maxBuffer: 1024 * 1024, env }, (err, stdout, stderr) => {\ngoSymbol.ts:130:        cp.execFile(goExecutable, ['env', 'GOROOT'], (err, stdout) => {\ngoModules.ts:15:        cp.execFile(goExecutable, ['env', 'GOMOD'], { cwd: folderPath, env: getToolsEnvVars() }, (err, stdout) => {\ngoInstallTools.ts:326:                      cp.execFile(gometalinterBinPath, ['--install'], { env: envForTools }, (err, stdout, stderr) => {\ngoInstallTools.ts:345:                  cp.execFile(toolBinPath, ['close'], {}, (err, stdout, stderr) => {\ngoInstallTools.ts:365:              cp.execFile(goRuntimePath, args, { env: envForTools }, (err, stdout, stderr) => {\ngoInstallTools.ts:368:                      cp.execFile(goRuntimePath, args, { env: envForTools }, callback);\ngoInstallTools.ts:371:                      cp.execFile(goRuntimePath, ['build', '-o', outputFile, getToolImportPath(tool, goVersion)], { env: envForTools }, callback);\ngoInstallTools.ts:414:      cp.execFile(goRuntimePath, ['env', 'GOPATH', 'GOROOT'], (err, stdout, stderr) => {\ngoPlayground.ts:44:     const p = execFile(binaryLocation, [...cliArgs, '-'], (err, stdout, stderr) => {\ngoImport.ts:147:    cp.execFile(goRuntimePath, ['list', '-f', '{{.Dir}}', importPath], { env }, (err, stdout, stderr) => {\ngoFillStruct.ts:61:     let p = cp.execFile(fillstruct, args, { env: getToolsEnvVars() }, (err, stdout, stderr) => {\ngoBrowsePackage.ts:58:  cp.execFile(goRuntimePath, ['list', '-f', '{{.Dir}}:{{.GoFiles}}:{{.TestGoFiles}}:{{.XTestGoFiles}}', pkg], options, (err, stdout, stderr) => {\nutil.ts:243:        cp.execFile(goRuntimePath, ['version'], {}, (err, stdout, stderr) => {\nutil.ts:645:        p = cp.execFile(cmd, args, { env: env, cwd: cwd }, (err, stdout, stderr) => {\nutil.ts:924:            const p = cp.execFile(goRuntimePath, args, { env, cwd }, (err, stdout, stderr) => {\ngoRename.ts:46:         p = cp.execFile(gorename, gorenameArgs, {env}, (err, stdout, stderr) => {\ngoInstall.ts:44:    cp.execFile(goRuntimePath, args, { env, cwd }, (err, stdout, stderr) => {\ngoTypeDefinition.ts:57:         let process = cp.execFile(goGuru, args, { env }, (err, stdout, stderr) => {\ngoReferences.ts:42:         let process = cp.execFile(goGuru, args, { env }, (err, stdout, stderr) => {\ngoSuggest.ts:419:           cp.execFile(gocode, ['set'], { env }, (err, stdout, stderr) => {\ngoSuggest.ts:436:                   cp.execFile(gocode, ['set', name, value], { env }, (err, stdout, stderr) => {\ngoDeclaration.ts:117:       p = cp.execFile(godefPath, args, { env, cwd: input.cwd }, (err, stdout, stderr) => {\ngoDeclaration.ts:197:       p = cp.execFile(gogetdoc, gogetdocFlags, { env, cwd: input.cwd }, (err, stdout, stderr) => {\ngoDeclaration.ts:258:       p = cp.execFile(guru, ['-json', '-modified', 'definition', input.document.fileName + ':#' + offset.toString()], { env }, (err, stdout, stderr) => {\ngoGenerateTests.ts:152:     cp.execFile(cmd, args, { env: getToolsEnvVars() }, (err, stdout, stderr) => {\ngoLiveErrors.ts:66: let p = cp.execFile(gotypeLive, args, { env }, (err, stdout, stderr) => {\ngoImpl.ts:42:   let p = cp.execFile(goimpl, args, { env: getToolsEnvVars(), cwd: dirname(vscode.window.activeTextEditor.document.fileName) }, (err, stdout, stderr) => {\ngoImplementations.ts:45:            let listProcess = cp.execFile(getBinPath('go'), ['list', '-e', '-json'], { cwd: root, env }, (err, stdout, stderr) => {\ngoImplementations.ts:61:                let guruProcess = cp.execFile(goGuru, args, { env }, (err, stdout, stderr) => {\ngoOutline.ts:92:        p = cp.execFile(gooutline, gooutlineFlags, { env: getToolsEnvVars() }, (err, stdout, stderr) => {\nIf we had to classify them all according to use case but at the same time differentiating against execution times we would have something like this:\njson\n{\n    \"go.operationTimeout\": {\n        \"buildOnSave\": 2000, //go build\n        \"buildOnCommand\": 2000, //go build\n        \"runtimeDefault\": 2000, //go xxx (goRuntimePath)\n        \"executeOnSave\": 2000,\n        \"executeOnCommand\": 2000,\n        \"executeOnType\": 2000 //completions, live-errors\n    }\n}\nThis may be a bit verbose for a configuration though, so tell me what you think. In terms of plausible execution times the tools version, env, list and doc\nmight appear to be in a lower tier; build, test, get and install can be\nlong running in comparison with the former\nOn Wed, Mar 6, 2019, 03:39 Ramya Rao notifications@github.com wrote:\n\nThe verbosity is fine\n\nI would replace \"execute\" with \"operation\" in executeOnSave,\n   executeOnCommand and executeOnType\nrunTimeDefault will need some more thought. We use this for go\n   version, go env, go list, go doc, go vet, go build, go test, go get, go\n   install. They all cannot fall under the same bucket and use the same\n   timeout.\n\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2348#issuecomment-469987962,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AGCH_zrQSWNf96xKisQdtmj_l8uR6rYUks5vT2KFgaJpZM4bOS0a\n.\n. Then we can move it to the group of long running tasks. Results may be cached but any initial run will do it in full extent, so I prefer to be lax rather than conservative about these thresholds. I usually find myself doing a lot of GOCACHE=off calls to go tools because from time to time I have to switch across go versions in our projects (I use a fork of gvm for that matter). I messed up branching in this PR, moving on to #2372\n\nSorry for the inconvenience :sweat_smile:. I agree, we can go with something simpler like this first. After all, the configuration is the least tedious part to iterate of this feature. I applied your suggestions, PTAL. I extended the changes to all of the remaining execFile calls. I'd like validations on the configuration keys used for each case\nRegarding the spawn calls: these don't have a timeout parameter, spawnSync has it instead. It was failing locally but it was probably result of not having the linters installed instead of the path. My bad. Yeah, got it backwards. You may squash all of these commits upon merge. Done. Because keeping the text insert will still autocomplete the function name sans the param snippets. Ok, so I unified the default configurations for both normal and test codelens debug. This should get rid of the confusion caused by this difference, plus being configurable for delve. Indeed, I can do so once we finish this PR. The return reject(); lines on the promise initialization make the union necessary. Nope... the object itself follows the structure go.enableCodeLens object at package.json (and configurable by the user), but it doesn't have an explicit type to set\nTyping all configuration objects is an improvement to do on this extension. I have mixed feelings on the implied boilerplate but having type safety is worth the pain. See my previous comment here. vscode.CompletionItem did the trick. What do you think @ramya-rao-a?\nI don't work with typescript on a regular basis (unfortunately) so my knowledge of project configuration is next to none. My bad, fixed. Don't worry, I've struggled myself with this lately (we don't use 1.11 at work yet)\nAs long as they're not dependencies it doesn't matter which path they have, I believe. ",
    "jgfet": "Why isn't there debug string length key with a  value for this in settings that we can just set instead?. ",
    "Sirikon": "@michaelmello https://github.com/derekparker/delve/issues/659#issuecomment-256945278\n\"The default for maximum string length is 64, we picked this value so that variables would fit into a small terminal window, other clients should pick a value that suits them.\"\nThe fix should include increasing that value, the maximum string length. I think.\nIs this right @roblourens ?. ",
    "mprobst": "Thanks @ramya-rao-a !. Friendly ping @ramya-rao-a.. No worries, just wanted to make sure this didn't drown in the noise or wait\nfor something from my side :-)\n. Thanks for taking a look!\nMy use case is that I have a gocode binary that behaves differently from the one in my $GOPATH in use for some projects. My gocode calls through an ssh tunnel to a remote machine. It's maybe similar to the situation with goimports vs gofmt vs goreturns.\nI don't actually need the flags right now, I added that for symmetry with go.formatFlags, and it seems useful to configure the external tool. I agree it has some potential sharp corners - but so will configuring the server address (in case the address is wrong). I'd expect a user who configures that to be able to debug it when they misconfigured their options.. It does, makes sense.. ",
    "concatime": "Wow! Thank you for this answer! One point, I don't tell you to define GOROOT or GOPATH, but just let them blank if go is located in C:\\go, and there are not in the environment variables.. Actually, it's go env GOPATH, there is no $.. And second, you need to define your GOROOT variable inside your shell, or set the go.gopath because your golang directory is not /usr/local/go.\n\nYou are a Linux, FreeBSD or OS X user using the the zip or tarball binary downloads from the golang.org website. These binaries have a $GOROOT value of /usr/local/go and recommend you unpack them into that location. If you choose not to do this, then you must set $GOROOT to the location you chose.\n\nSource.. ",
    "majimboo": "I currently have the same issue in Mac.. ",
    "waskito": "Have the same issue in Mac\nI didn't set any of go.gopath, go.goroot and go.inferGopath\nwhen I run go env $GOPATH, there is no result at all\nbut when run go env, I am getting GOPATH=\"/Users/macintosh/go\"\nGOROOT=\"/usr/local/Cellar/go/1.9.2/libexec\" because I install go using Homebrew. ",
    "dolmen": "Homebrew does not install the same version as go get -u.. Well, I'm not an OS X user, so go get -u is really fine and I don't know much about Homebrew.\nBut Go developers on OS X may be interested in having the latest Delve features. Installing Go tools is so easy with go get that everyone deserve it!. Oh, you're right: build of Delve on OS X is not as easy as for any other Go app. I had missed the link you posted above. Sorry.\nAnd thanks for the patch.. > What we can do is change the wording of the error message to be more clear\n:+1:\nAs #874 is now implemented, the message could suggest to use \"Go: Install tools\" on platforms where this is the way to install Delve. Or, for a more generic implementation, it might mention the URL with the Delve install instructions.. I think you probably meant this:\n\"args\": [\"switch\", \"--profile\", \"prod\", \"--account\", \"foo\", \"--role\", \"bar\"]\n                             ^^^^\ninstead of:\n\"args\": [\"switch\", \"--profile prod\", \"--account\", \"foo\", \"--role\", \"bar\"]. goimports is a superset of gofmt. No reason to use both.\ngoreturns has a -i option that allows to ask it to run goimports before.\nSo I don't see a use case for this change request.. A notification at file open is too intrusive.\nAs a developer I may want to be able to open the generated file to read the code or because I want to trace it with the debugger. A notification every time I enter the file with the debugger would be too intrusive.\nThis is generated code, so if I want to modify it I should either use the generator again, or if I want just to make a discardable change (for example for debugging), disable the readonly mode to make my change. Requiring to disable the readonly mode makes the action painful, and this is the point of this feature request.\nHowever once I have the file open and I try to modify the content, it would be helpful to have a notification of why the file is in readonly mode (and how to disable that).. See #1295 for the original design of this feature.. ",
    "DT-ZhangJia": "(VSCode) Try opening the folder where the .go file exists in. Don't open the .go file independently. Or VSCode could not create/read the .vscode folder nor the debug file.. ",
    "gaocuo": "Can not found any launch.json in the work dir and whole disk.. ",
    "scymen": "Hit the same error. \nDoes anyone can tell me where is the file launch.json?. ",
    "jiaoyk": "same issue. No launch.json could be found on disk.. ",
    "bviktor": "@ramya-rao-a the opening post provides a step-by-step guide to reproduce the issue.. Actually, it's the opening post of https://github.com/Microsoft/vscode/issues/25138.  Do you have a question? Please ask it on http://stackoverflow.com/questions/tagged/vscode \n\nVSCode Version: 1.11.2\nOS Version: 1703 15063.138\n\nSteps to Reproduce:\n1) Get a VM image for win10 15.15063 from modern.ie\n2) start it up, install updates, restart\n3) install vs code with defaults\n4) install go runtime  with defaults\n5) start vs code\n6) install go extension, restart vs code\n7) create a new .go file:\n~~~\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"foobar\")\n}\n~~~\n8) ctrl+f5\nExpected output: foobar printed\nActual output: \n~~~\nThe program \"${file}\" does not exist: Error: ENOENT: no such file or directory, lstat 'C:\\Program Files (x86)\\Microsoft VS Code\\${file}'\n~~~\nOn the top the following appears:\n~~~\nError: Failed to continue: \"The program attribute must point to valid directory, .go file or executable.\"\n~~~\nWhich you can either \"close\" or \"open launch.json\" but if you try the latter, nothing happens at all.. Thanks a bunch!. Confirmed to be working now, thanks again.. ",
    "23doors": "FYI, gometalinter uses gotype by default (among other linters) so it's actually already supported. And I believe that you can also use \"go.lintTool\": \"gotype\" and it would work just as well. Personally I found gotype riddled with bugs so stopped using it.\nBut an option to lint as-you-type without save (so it's not autoformatted) would be pretty neat.. Coming from IntelliJ IDE, this is something I would really enjoy as well.. I know it is closed but to be honest, I don't see a reason why autosave is checked at all. I use autosave onFocusChange and why would it be clashing with a linter running after some delay? Even autosave afterDelay makes little sense to check as it may just be some much higher value than linter delay.. Thanks!. ",
    "stanleynguyen": "Hi @ramya-rao-a I'm new to vscode and this extension so pardon me if I ask stupid question. But this \"lintOnType\" option seems to be no where to be found, would you mind assisting on this? Thank you!. @ramya-rao-a Thanks for your prompt reply. I have added this previously, but it only tells me about syntax errors in the code, not code style problems (i.e. not commenting on top of exported functions), that's what I'm looking for :). My suggestion would be using array of strings data type instead of string for go.formatTool. ",
    "emilgpa": "@ramya-rao-a yes!. ",
    "yageek": "I have the same error. Switching to gogetdoc did not solve it.. My bad. It does not seems related to the cursor position. In fact, no package from the standard library is suggested, so it is not possible to jump to the declaration of the function.. On my side, the issue was related to a mis configured GOROOT env var sur to an error within goenv.\nNow everything is fine.. This is unnecessary. It would be better to fix this on goenv part.. ",
    "blocknonip": "I ran into this and assumed that gogetdoc was totally busted. I think one common use case not mentioned here thus far is for people whose muscle memory is to double-click a method to highlight it, and then hit F12. Since that places the cursor at the end of the method, it hits this bug, but it's also how I've used IDEs since forever. Maybe I'm the only one? Would love a fix either way!. Much appreciated!. ",
    "ansencumt": "\n\nI also get the same error.\n. The word \"ode\" is not exist in my system folder. . @a57571735 thx\n. @ramya-rao-a 0.6.58.vsix is work fine!. OK, that`s the Go: Current GOPATH result.  @ramya-rao-a\n\n. Yes, that is right.\nbut even if I replace ${workspaceRoot} to e:\\Work\\yunkai\\robot, it also can not debug.. The Go extension(0.6.65) work fine. Thx. the extension output:\n\n. I had to uninstall the extension, then go to the folder that vscode extension created and delete the extension folder. After finishing these steps, install the extension again.\nIt works!. @ramya-rao-a Yes.\nI`m on Windows 10.. @ramya-rao-a Yes, I upgraded my VS Code recently. It work fine before.. \nThe same to me. \nVSCode: 1.24.1\nGo ext: 0.6.84\nGo version: 1.10.3 windows/amd64\nThe other tools ,such as gocode etc : Lastest. ",
    "asdine": "I don't think it's related to Go 1.8 but only to the version 0.6.56. The bug occured the moment i upgraded. Me too ! \ud83d\udc4d . ",
    "AaronReboot": "Hi, I was experiencing the issue described in this issue with 0.6.56. I just updated to 0.6.57 and there's still a problem:\nIt's now reporting \"cannot import absolute path\" at the top of all my package names\n\n. Sure thing. Here's my build output:\n```Finished running tool: /Users/aaron/code/bin/golint\nFinished running tool: /usr/local/go/bin/go build -i -o /var/folders/n_/7lfk4kw11hg0q83fy9kqc8jr0000gn/T/go-code-check -tags \"\" /Users/aaron/code/LLAPI\ncan't load package: package /Users/aaron/code/LLAPI: import \"/Users/aaron/code/LLAPI\": cannot import absolute path\nFinished running tool: /usr/local/go/bin/go tool vet /Users/aaron/code/LLAPI/balance.go```\nAnd here's my GOPATH\nCurrent GOPATH: /Users/aaron/code. It's just how things are organized at the firm I'm working for. It removes some of the complications with deploying App Engine projects.\nI'd like to note there's been no difficulty with this simplified path structure prior to 0.6.56. Hi. I'm happy to report that everything is fixed here too after manually installing 0.6.58!. I'm also experiencing this issue since yesterday, where all the Go tools have stopped working. I've tried completely removing VSCode & reinstalling Go tools.\nThis is the message I see when I try to install Go tools\n\nThis is the message when I try to show my current Go path\n\nI'm running VSCode 1.20.0 on macOS High Sierra with Go 1.9.4. That worked! Thanks for the speedy assistance! Odd that uninstalling & reinstalling the extension was more effective than completely uninstalling VSCode. Cheers. ",
    "liaoya": "I met the same problem on both my Linux and Windows VSCode 1.10.2 and Go 0.6.57. There is only one folder in my GOPATH. I also move the code to src and has the same problem.\nThe following is output on my Windows.\nfile: 'file:///d%3A/temp/gopl/src/helloworld/helloworld.go'\nseverity: 'Error'\nmessage: 'can't load package: package d:/temp/gopl/src/helloworld: cannot find package \"d:/temp/gopl/src/helloworld\" in any of:\n    C:\\tools\\go\\src\\d:\\temp\\gopl\\src\\helloworld (from $GOROOT)\n    c:\\opt\\gopath\\src\\d:\\temp\\gopl\\src\\helloworld (from $GOPATH)\n'\nat: '1,1'\nsource: ''. The following is output of \"go env\" about gopath \nset GOPATH=c:\\opt\\gopath\nI use 0.6.58 in issue #895, and it works as before.\nI will not put the workspace in environment variable gopath and there's one item in gopath which store third party library and tool.\nI'm just a beginner of Go. Thank you very much for the wonderful extension.. ",
    "lzelevinsky": "I had the same problem as others with 0.6.57. I have a single simple GOPATH.\nManually updating to 0.6.58 worked for me as well.\n. I had the same problem, reinstalled extension, didn't help, \nuninstalled the extension, reloaded vscode,\nrm -rf ~/.vscode/extensions/lukehoban.go-0.6.77/\nreinstalled the extension\nnow it works.\n. ",
    "gevg": "Me too ! :+1:. ",
    "kmudrick": "@zmb3 @ramya-rao-a thanks so much! Will give this a try today.. ",
    "Urethramancer": "Happening to me too. Have to build via command line to build any of my projects. Every project has one file showing an error line under the package declaration:\n. ",
    "hasSalil": "Looks like I've opened this issue in duplicate here: https://github.com/Microsoft/vscode-go/issues/895\nFor now, I suggest using the workaround in the issue description there. ",
    "midona-rhel": "That does indeed fix the issue for me, thank you very much!. ",
    "khoango": "Thanks. ",
    "martin-flower": "Thank you @ramya-rao-a. As I now understand it, go programmers run programs from the command line, and use Visual Studio Code for content-assist.\nHaving selected hello.go in the explorer, then typing Cmd+F5 I find myself in the debugger (and I don't see Hello World output in any console tabs). What I was looking for in this issue is (I think), how to execute go run hello.go by clicking on a button inside Visual Studio Code instead of using the command line, and then seeing 'Hello World' in the output console. This is what I would expect based on my previous experience with IDEs (Eclipse, IntelliJ, and so on).\nThis will all make more sense to me no doubt when I have learnt more go.\nMeanwhile, thanks for your work with this plugin and your help with this issue.. Hi - my user experience is as follows.\nI start Visual Studio Code.\nI click on Explorer > SRC > hello > hello.go\nhello.go source is visible in the editor\nthere is some information in the OUTPUT window for golint, tool vet, build\nI type Cmd+F5\nThe debug buttons appear\nI can select pause, restart and stop - the others are not selectable\nThe debug console shows\ndebugger.go:66: launching process with args: [/Users/martin/go/src/hello/debug]\nAPI server listening at: 127.0.0.1:2345. In launch.json I now have\n\"program\": \"${file}\"\nIn the Explorer I select hello.go\nThe program appears in the editor\nI press Cmd+F5\nThe debug buttons appear for about 1 second, then disappear\nIn the DEBUG CONSOLE I see the following\nhello, world\nProcess exiting with code: 0\nIs this now the expected behaviour?\n. This may be the same problem I have reported on Stack Overflow. The vendor directory colour was grey (and contents ignored) until I deleted vendor from .gitignore. So what I need is that VS Code should see the vendor directory, and git should ignore it. \nThrough trial and error I think the solution is to add the following to user settings (Code > Preferences > Settings) \n{  \n  \"search.useIgnoreFiles\": false\n}\nMaybe someone can comment on whether this is correct. Thanks.\n. ",
    "nibbles-": "This was a post that was hard to find.\nI spent quite a while to find this information.\nWould it be possible so that the default config is actually doing what the menubuttons show (i.e if I press cmd/ctrl + f5 in runs without debug regardless of what I have configured in launch.json. ",
    "nibbles": "wakes from sleep huh? what? where?! Someone call me?  :-P. ",
    "willfaught": "I see something similar. It happens whenever I try to rename a second time. If I try it again, then it works with no error.. And that would also make both the run and debug links in all those fake lines disappear?. (Edited)\nOK, so to get the run-test option in the context-menu, I have to add the run-test command to go.editorContextMenuCommands?\nTo remove the run-test and debug-test buttons from the editor buffer, I have to set go.enableCodeLens to false? Does Code Lens show up for Go files in any other context? Just wondering if I'd be losing anything else by disabling it.\nHow do I run the debug-test command? \"Debug test\" in the command palette shows nothing.. OK, so the closest I can get without adding anything new is to disable the Go Code Lens and add the run-test command to the context menu. Do you know by chance what value needs to be added to go.editorContextMenuCommands for running tests?. I see go.editorContextMenuCommands.testAtCursor is true by default, which seems to be the one I want, but as seen above, there's no \"Go: Run Test\" context menu item. If I set go.editorContextMenuCommands.testFile and .testPackage to true then I see \"Go: Test File\" and \"Go: Test Package\" context menu items, so it seems like something similar should be appearing for the test under the cursor.\nAlso, why are testFile and testPackage defaulted to false? They seem useful.. It seems if I set go.enableCodeLens to false I get a JSON lint error saying false is the wrong type, it expects object. If I set it to null or {} or {\"runtests\": false} then the feature isn't actually disabled. Bug?. \n. Also, I'm happy to add the debug-test context menu item, but I've never contributed before, so I'd have no idea where to start. Got any suggestions?. I think it'd still be useful to have the run-test command in the menu even if Code Lens is enabled. Otherwise you have to know where to look to find the feature. Menus should always have what you're looking for, in my opinion.\nIs setting go.enableCodeLens as you show above enough, or do I need to set editor.codeLens too (and if so, to what?)?. Got run-test working, had to disable editor.codeLens entirely. Whew! Thanks.. Made an attempt at adding a debug-test command, but hit a wall once I had the Command. It also wasn't clear where a TextDocument would come from in that context.. I figured that part out. I have the function name, I made a Command with it like in the debug example you gave, except in that example there's a \"document\" TextDocument used that isn't available in the testAtCursor context. Do I just leave that out?\nSent from my iPhone\n\nOn Jul 20, 2017, at 12:23 PM, Ramya Rao notifications@github.com wrote:\nRefer to https://github.com/Microsoft/vscode-go/blob/0.6.62/src/goTest.ts#L59\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. This is what I have now:\n\n```js\nimport vscode = require('vscode');\nimport { getTestFunctions } from './goTests';\nimport { Command, TextDocument } from 'vscode';\nimport path = require('path');\nlet debugConfig: any = {\n    'name': 'Launch',\n    'type': 'go',\n    'request': 'launch',\n    'mode': 'test'\n};\n/\n Debugs the unit test at the primary cursor. Output is sent to the 'Go' channel.\n\n @param goConfig Configuration for the Go extension.\n/\nexport function debugTestAtCursor(goConfig: vscode.WorkspaceConfiguration, args: any) {\n    let editor = vscode.window.activeTextEditor;\n    if (!editor) {\n        vscode.window.showInformationMessage('No editor is active.');\n        return;\n    }\n    if (!editor.document.fileName.endsWith('_test.go')) {\n        vscode.window.showInformationMessage('No tests found. Current file is not a test file.');\n        return;\n    }\n    if (editor.document.isDirty) {\n        vscode.window.showInformationMessage('File has unsaved changes. Save and try again.');\n        return;\n    }\n    getTestFunctions(editor.document).then(testFunctions => {\n        let testFunctionName: string;\n    // We use functionName if it was provided as argument\n    // Otherwise find any test function containing the cursor.\n    if (args && args.functionName) {\n        testFunctionName = args.functionName;\n    } else {\n        for (let func of testFunctions) {\n            let selection = editor.selection;\n            if (selection && func.location.range.contains(selection.start)) {\n                testFunctionName = func.name;\n                break;\n            }\n        };\n    }\n\n    if (!testFunctionName) {\n        vscode.window.showInformationMessage('No test function found at cursor.');\n        return;\n    }\n\n    const args = ['-test.run', testFunctionName];\n    const program = path.dirname(editor.document.fileName);\n    const env = goConfig['testEnvVars'] || {};\n    const envFile = goConfig['testEnvFile'];\n\n    let config = Object.assign({}, this.debugConfig, { args, program, env, envFile });\n    let debugTestAtCursorCmd: Command = {\n        title: 'debug test',\n        command: 'vscode.startDebug',\n        arguments: [ config ]\n    };\n\n    return vscode.commands.executeCommand('vscode.startDebug', debugTestAtCursorCmd)\n}).then(null, err => {\n    console.error(err);\n});\n\n}\n```\nNot sure about the use of executeCommand.. It was in the const program = path.dirname(editor.document.fileName); part, editor.document was just document, some parameter. Does it look like this will work as-is?. @Ashiroq Cool, thanks! My effort fell through.. Thank you!. @Ianwww I haven't seen that myself.. @didenko #1088 turned into a workaround for having the run/debug test commands in the context menu instead. This issue is about making that what Code Lens does out of the box.. @didenko The resolution required disabling Code Lens entirely, which I think is unreasonable.. A configurable property to present Code Lens commands in the context menu instead of the buffer would be great.. Basically. This ticket doesn't prescribe general changes to Code Lens as the solution, but that might be what's required to accomplish it.. Since the other ticket is tracking work on putting those things in the context menu, I'll close this then.. Good point, as long as it highlights both TODO and BUG.. The fields matched exported method names in another type. In this case, String() string.\nAnother common one is \u201clen\u201d. Also \u201ccap\u201d.\nSent from my iPhone\n\nOn Sep 23, 2017, at 11:23 PM, Ramya Rao notifications@github.com wrote:\nAm curious, why would you want to name a struct field the same as a keyword?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Nope! Looks good. Thanks.. It worked there.\n\nSent from my iPhone\n\nOn Nov 21, 2017, at 5:43 PM, Ramya Rao notifications@github.com wrote:\n\"no type entry found, use 'types' for a list of valid types That's coming from delve.\nCan you run delve from the command line, and try doing the same there?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Not at the moment, it's proprietary code. I'll keep my eyes open for a repro I can post here.. Thanks!\n\nOn Tue, Feb 20, 2018 at 2:18 PM Ramya Rao notifications@github.com wrote:\n\nClosed #1384 https://github.com/Microsoft/vscode-go/issues/1384.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1384#event-1483497455, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAD5VjINiyIeFAzkxhmsA-r_nWgffGpnks5tW0TQgaJpZM4Qv8Sj\n.\n. Couldn't we show the string instead of the array syntax to avoid needing a new variable?. I suppose if you\u2019re looking at a non-Unicode data source, like an image, at least for bytes. Probably not a need for runes, since they\u2019d display the same as in strings.\nOn Dec 4, 2017, at 11:36 PM, Ramya Rao notifications@github.com wrote:\nIs there a scenario where one would want to look at the runes/bytes values?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Awesome! Thanks!. It\u2019s because you have the y commented.. Thanks!\n\nOn Sun, Sep 2, 2018 at 2:14 AM Ramya Rao notifications@github.com wrote:\n\n@db47h https://github.com/db47h Thanks for digging into this @db47h\nhttps://github.com/db47h, you hit all the right points.\n@willfaught https://github.com/willfaught I see that you have logged an\nupstream issue, so I'll respond there.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1894#issuecomment-417916131,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAD5VvD2QAfq59IsQ5TbVPO6j9sP4qq9ks5uW6FhgaJpZM4WSqZ_\n.\n. I see something like field Facets []foo.com/import/path.ItemFacetToRetrieve, which is basically what I want. Thanks! Why not have that be the default?. @ramya-rao-a Sure:\n\ngo\nfunc TestX(t *testing.T) {\n    var i, j int\n    var p = &i\n    var q = &j\n    t.Logf(\"%#v %#v\", p, q)\n}\nWhen run, you see output like:\n=== RUN   TestX\n--- PASS: TestX (0.00s)\n    foofile_test.go:9: (*int)(0xc000018150) (*int)(0xc000018158)\nPASS\nok      foopackage  0.010s\nWhen debugging TestX, you see these local variables:\n\nThe pointer addresses for p and q aren't shown there, so you can't tell if they're equal and thus point to the same thing:\np: <*int>\nq: <*int>\nInstead, you should see something like:\np: 0xc000018150 <*int>\nq: 0xc000018158 <*int>\nThere should also be a way to drill down into them to view the values they point to, like you can for the *testing.T in that same screen shot.. @ramya-rao-a Great, thank you!. https://github.com/Microsoft/vscode-go/issues/1989 worked for me, although the dereferenced pointer value is labeled with a single colon, which might be a bug. See the b variable below:\n\nThe debugger presentation of the pointer type seems incompatible with the other integral types (variables i and x in the example above). int(0) is displayed as i: 0, X(34) (where X is type X int) is displayed as x: 34, but (*int)(0xc0000160f8) is displayed as p: <*int>(0xc0000160f8). Maybe it makes sense to display it as just p: 0xc0000160f8 and let the user infer the type from the code like for the other variable types (and the presence of the drill down menu)?. @ramya-rao-a No problem. Done: https://github.com/Microsoft/vscode-go/issues/2176.. >This is how VS Code displays variables. It wants a name and value, but there is no name for the dereferenced value. I mentioned this design choice in the original PR and it was deemed good enough.\nI'm not sure what value there is in having a separate line for the dereferenced value. Is it possible to omit the dereferenced value and display the fields directly under the pointer? For example, instead of having:\nb: <*bytes.Buffer>(0x123)\n    : <bytes.Buffer>\n        buf: <[]uint8>\nwould it work to have this instead:\nb: <*bytes.Buffer>(0x123)\n    buf: <[]uint8>\n\nIncompatible in what way? They are not identical, but AFAIK this issue is about design decisions and doesn't impact functionality in any way.\n\nThis is explained by the sentence that follows it about how different cases are displayed:\n\nint(0) is displayed as i: 0, X(34) (where X is type X int) is displayed as x: 34, but (int)(0xc0000160f8) is displayed as p: <int>(0xc0000160f8)\n\nPointer values are integers too, just like the int and X types in the example above.\n\nIMHO we should leave the type information in. It may not be obvious from the code what the type is. The debugger is helping here by removing ambiguity. We show type information for other variables as well ([]uint8, bytes.Buffer in the screenshot posted, for example).\n\nOK, so then shouldn't we display i and x above as i: <int>(0) and x: <X>(34) to be consistent? Same for string(\"foo\"), rune('Z'), etc. Your argument seems to apply generally.. >A trivial amount of value is in showing the unambiguous data relationship. It is definitely possible to display it, as in your 2nd example. This would be more difficult than the original changes I made, but not impossible. I'd be happy to review your PR if you wanted to attempt that change.\nOK, good to know. Thanks.\n\nIncompatible, for me, indicates some sort of functionality issue. IMHO Displaying pointers differently than simple types, is not an incompatibility.\n\nInconsistent might have been a better word for it. As the issue description said, the feature worked for me, assuming the single colon was working as intended.\n\nPerhaps, but that is far beyond the scope of the original request in #1989, which was to improve the display of pointer values. I did not change the existing display behavior for other types.\n\nThat's what this issue is about, aside from the colon question. Since the colon is fine, this issue doesn't have to hold up shipping #1989 as-is, but the part about consistency is still unresolved, it seems.. ",
    "keithballdotnet": "@tylerb just wanted to come along and say that this is a great feature.  Love it!!!  Thank you!!. ",
    "yepher": "I got the update today and now I get this error on every file I open/save. It was working fine yesterday.\n\nVersion\n\n. I followed these directions as published by @ramya-rao-a here and all is working again :)\nWorkaround:\n\nUninstall Go extension\nDownload the vsix file Go-0.6.58.vsix\nRun code --install-extension Go-0.5.58.vsix from the location where you downloaded the file\nI am trying to understand all different scenarios where this occurs (and there are quite a few) and will publish the fix soon\n\nFor me on OSX this was my command:\n/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code --install-extension ~/Downloads/Go-0.6.58.vsix. I am not exactly clear what you mean by \"GOPATH is always prefix in the file path\"\nGOPATH is an array of paths.  Is the issue possibly related to folks who have multi-paths defined in their GOPATH?. Sorry @rogierlommers I don't think that is the issue you were seeing. I was responding to @ramya-rao-a's inquiry to continue the discussion above. \nTo clarify here is what I meant by multiple paths:\n'Since the $GOPATH variable can be a list, the rest of this document will use $GOPATH to mean the first element unless otherwise specified.' See here\n. @ramya-rao-a I am happy to share details about my env if there is something concrete you would like to see.. Re-reading your previous comment I think I may know what is going on (at least with my env).\nThis is my env\ngo env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/cwilson/spWorking/.golang\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/cg/xpwdhpv9635ctpsvh4w5rl900000gn/T/go-build023053584=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nSo all my go get XXX reside in /Users/cwilson/spWorking/.golang but all my project source files are in completely different locations. For instance the project I was working on when I get this error is SparkPost CLI and it is located in /Users/cwilson/spWorking/sparkpost_github/sparkpost-cli.\nI am not sure if this is a standard way of doing development but it is how I've been working. So you will see /Users/cwilson/spWorking/sparkpost_github/sparkpost-cli is not in my GOPATH.\n. I've been using (0.6.59) all day and it is working just fine.. ",
    "jsvensson": "Seems to be caused by 915ca6331081ed794018bc4e3034a8374b0cb2c1 -- The '.' gets expanded to the full path which is then tacked onto the GOPATH. I get the issue on files inside the GOPATH too.\n\n. ",
    "asw": "Is there perhaps a related bug which causes IntelliSense to break by appearing blank and not disappearing, as below?\n\n. @ramya-rao-a Thank you! Logged on https://github.com/Microsoft/vscode-go/issues/918. When it breaks I can make \"no suggestions\" appear elsewhere in the file by attempting to get IntelliSense in another part of the file. The box still doesn't disappear. It even survives closing and reopening the file. I usually have to reload the window. Is there anywhere I can track errors that are thrown by VS Code and/or extensions?. I haven't seen the error recently so I haven't been able to confirm the log output. I have updated to the most recent Insiders build which might have solved it, but I may need to work with a particular project to be sure. The project is in a git repo and I was seeing the error nonetheless.. ",
    "elasti-liranm": "Happens also in gopath.. ",
    "Kliton": "This isn't fixed..  have the 0.6.59 version and still have this error: \"file: '\nmessage: 'can't load package: package  -v: cannot find package \" -v\" in any of:\n    /usr/local/Cellar/go/1.8/libexec/src/ -v (from $GOROOT)\n    /code/go/src/ -v (from $GOPATH)'\nHow i can fix this?\n. Running tool: /usr/local/bin/go test  -v -timeout 30s -tags \ncan't load package: package  -v: cannot find package \" -v\" in any of:\n    /usr/local/Cellar/go/1.8/libexec/src/ -v (from $GOROOT)\n    /code/go/src/ -v (from $GOPATH)\nError: Tests failed.\nI have MacOs.\nMy GOPATH is=/code/go/src\nI have opened the project in vs code with path: /code/go/src/stampreport\n. ```Finished running tool: /code/go/bin/golint\nFinished running tool: /usr/local/bin/go tool vet /code/go/src/stampreport/main.go\nFinished running tool: /usr/local/bin/go build -o /var/folders/sc/7b8zrdl50tndgslkx5_dl_k00000gn/T/go-code-check -tags \"\"  -v stampreport\ncan't load package: package  -v: cannot find package \" -v\" in any of:\n    /usr/local/Cellar/go/1.8/libexec/src/ -v (from $GOROOT)\n    /code/go/src/ -v (from $GOPATH)\n```. No i haven't errors when i run \"go build\".\nI haven't also error when i run debugger.\nI have error with \"test\" and in all files i have errors in package in \"problems\"\n\n. How i can remove the -v flag?\nBecause in vscode settings i haven't any flag..\n\nThanks. Oh sorry, my mistake.\nI have removed -v flag and now i haven't errors.\nThank you.\n. ",
    "bcokert": "Somewhere in the process of testing this and creating this issue, I broke my gopath. In the process of fixing it, I also seem to have fixed the underlying issue.\nThe end working result:\n```\n//.bashrc:\nexport GOPATH=\"$HOME/projects/gohome\"\nexport PATH=$PATH:$GOPATH/bin\n// GOROOT is not set\n$ which go\n/usr/local/bin/go\n```\nEdit: I also had to restart VSCode again so that it found my gopath. ",
    "facundomedica": "I'm having the same issue and after a while it throws \"Extension host terminated unexpectedly. Please reload the window to recover.\"\nIf I do the gocode close and then go get ... it starts working again but then the same issue.\nIt doesn't happen with all projects, I have a couple of projects that are working just fine but I made a new one and it happens.\nIf I can get more info I'll keep commenting. Okay, in the console it throws this error at workbench.main.js:\nInvalid string length: RangeError: Invalid string length\n    at Object.r [as stringify] (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:38622)\n    at Function.e.request (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:136194)\n    at Object.callOnRemote (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:134903)\n    at t._callOnRemote (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:278169)\n    at Object.$updateGroupResourceStates (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:277734)\n    at e.set [as resourceStates] (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:337633)\n    at GitSCMProvider.onDidModelChange (/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/out/scmProvider.js:88:46)\n    at i (/Applications/Visual Studio Code.app/Contents/Resources/app/extensions/git/out/util.js:44:83)\n    at e.invoke (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:16423)\n    at e.fire (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:4:20054)\n. I think the error comes from not being in a git repo (I don't know why, I'm just doing trial and error).\nThings that make me think this:\n- In the error log somewhere it says \"git\"\n- The only difference between my other projects and the one that fails is the fact that this one is not under version control\n- I did: git init, git add main.go, git commit -am \"Something\" and then reloaded the window and until now it hasn't failed (15 minutes and counting).. @ramya-rao-a Now I can't replicate the issue, but as soon as I get more info I'll post it here.\nI'm using the last version of VS Code and I can't remember if it happened in 1.10 or previous. ",
    "Kasmetski": "I found the problem with the trace - verbose, thanks!\nFor others with the same problem:\nIt looks writing in ~/.bashrc like that doesnt export correctly. Even the fact everything is working in the console -  go, dlv & etc. \nexport GOPATH=\"/home/user/go\"\nexport PATH=$PATH:\"/home/user/go/bin\"\nI searched more and did two things, you can choose the one\nLittle correction in .bashrc\nexport GOPATH=\"/home/user/go\"\nexport PATH=\"/home/user/go/bin:$PATH\"\nor add this line in /etc/profile.d/apps-bin-path.sh\nPATH=$PATH:/home/user/go/bin\n. ",
    "srfrog": "Can you be more specific? Set PATH where, WSL or Windows? I have /usr/local/go/bin in ~/.bashrc and ~/.profile, no luck.\nFrom cmd.exe when I run bash -c 'echo $PATH', I don't see my /usr/local/go/bin in PATH. So perhaps bash.exe ignores .bashrc and .profile initially. Any ideas?\n. @ramya-rao-a I thought that by changing terminal.integrated.shell.windows and terminal.external.windowsExec to use bash.exe (Windows Subsystem for Linux) it would allow vscode-go to use the go tools in the lxss environment. This feature would be ideal for people that are leaving macOS for Windows+WSL.\nPerhaps this is a setting in electron/nodejs. I'll do some more digging.. @ramya-rao-a vscode-go is using child_process.execFile() which is why the shell settings aren't used. Additionally, path.getGoRuntimePath() is hard-coded to  C:\\Go\\bin\\go.exe on windows, so it will never detect Go in WSL. I will play around with these, most likely a new setting for WSL is needed that makes use of child_process.exec() and checks for the setting value in getGoRuntimePath().\ne.g., go.useWSL = true || false\nThe actual command string might look like:\ncmd.exe /d /s /c bash.exe -ic '{command}'\nUnfortunately, NodeJS is hard-coded to use cmd.exe /d /s /c {command} on windows :disappointed:. ",
    "ioblank": "\nDoes adding bash.exe -ic work? Seems like a pretty good solution to me, if this is the direction the Go extension goes, @ramya-rao-a will probably need to make sure all paths are mapped to and from the /mnt/c/... and C:\\... formats correctly.\n\nI've done just that in my (somewhat messy) fork and, bare a few remaining bugs, it works! But it's considerably slower than native tools. :( Any ideas for speeding it up?\nIn case you're interested in trying it out, here's an example of what you need to add to the vscode settings.json:\n\"go.useWsl\": true,\n\"go.goroot\": \"/mnt/c/local/go\",\n\"go.gopath\": \"/mnt/c/go\",. ",
    "tiagommferreira": "Any updates on this? WSL integration would be really useful.. ",
    "postgrep": "I think an option to choose to either use the Windows environment or the WSL environment should be provided direcly by the editor, not by each plugin.\nOther language plugins for VScode for Windows have this issue too.\nhttps://github.com/DonJayamanne/pythonVSCode/issues/534\nI think the following issue in vscode itself relates to this one. \nhttps://github.com/Microsoft/vscode/issues/22663\nI would prefer a global option in the editor itself.. ",
    "gdrte": "Integration with WSL is highly preferable for users like me, who just moved from Mac OS X to Windows X :).. ",
    "radu-matei": "I think the C++ tools for VS Code on Windows make use of WSL (I haven't used yet, this is only based on their docs).\nIt would be great to have the same for Go.. @lambrospetrou you could use VS Code on Windows and use Bash as the integrated terminal, executing the go commands against Linux.\nNot the best experience, but gets the job done.. Any news on this?\nThanks!. Hi, @ramya-rao-a!\nHas work on this feature start?\nCould you give a few pointers on how one would get started with this?\nThanks!. > Find all references is very slow when compared to other IDE's\nThis is why I came to the repo! I think it might also search in the vendor folder? Personally I don't need this unless I'm doing it in a file from the vendor folder.\n\nThe right side bar which gives a over view should have red, yellow highlighting the errors.\n\nThis could also be a nice addition.\nAlso, when working from Windows, #926 would be so good.... ",
    "lambrospetrou": "I would really love for this to go forward too. The only way now to work with WSL is to run the editor locally in WSL and display it in Windows using X-Server. But this does not work with VSCode though and I fall back to Sublime.\nAn option to use WSL entirely in the editor would be amazing.. @radu-matei I know about that but the whole benefit of having a plugin for a language is to provide editor assistance (autocomplete, suggestions, auto formatting on save, highlighting errors, etc.). If I was just using it as a notepad and then run commands through terminal, I could just use the normal terminal, not VSCode's.. ",
    "Benjiiim": "It seems that VS Code has a debugging option \"useWSL\" which aims to acheive that. Cf https://blogs.msdn.microsoft.com/commandline/2017/10/27/running-node-js-on-wsl-from-visual-studio-code/\nWouldn't it make sense to use this setting for Go as well?. ",
    "eug48": "WSL could enable use of Sourcegraph's Language Server on Windows, potentially improving editor latency?. ",
    "xcdr": "Support for WSL is important to me, any complete solution is desirable.. This is also important for me, I cannot switch from MacOS to WIndows 10 without this feature.\nThere a lot of time has passed and we still do not know when it will work.. ",
    "mhamrah": "+1. ",
    "mrpoundsign": "+1. ",
    "RobHumphris": "Another please please please vote from me. I am writing go code on my Windows machine that runs a number Linux executable binaries, so the debugger needs to run in the context of the WSL for me to inspect the command and ProcessState values.. ",
    "tscott-au": "+1. ",
    "raphaelvalerio": "+1. ",
    "BloodyStupidViktor": "+1. ",
    "JeffDeCola": "+1\nOn a side note, this can get confusing on where everything lives since we have two operating systems.  So I made a pic on how everything currently fits together.  Hope this helps.\n. ",
    "benc-uk": "Sorry to be another +1'er but this is a problem that plagues VSCode. Using Git, Node, Python and Golang requires me to have the them all installed twice, once in WSL and once in Windows. \nIt's very messy, very confusing & requires multiple configurations that can get out of sync. ",
    "dsci": "+1. +1. ",
    "relston": "+1 From someone who migrated from MacOS to Win10 specifically because WSL is now an option this setup is kind of a bummer. Is there a thread where we can speak to the more generalized option that was suggested above by @postgrep? That would be ideal. Any update would be appreciated, thanks!. ",
    "lsh246": "Another +1. Moving from MacOS to Win10 building Linux binaries and wish I could debug seamlessly in VSCode.. ",
    "nkhine": "+1, I have the same, I am developing functions for serverless in golang on windows10. ",
    "shayne": "While having this issue resolved within VSCode would be nice, I've found that using VSCode installed under WSL, using X410 (Windows Store) as the X11 server, is incredibly seamless and solved my immediate needs.\nInstalling VSCode in WSL Ubuntu is as easy as downloading the .deb package from the VSCode website. Running sudo apt install <deb-file>, then creating a shortcut that launches VSCode from within WSL utilizing the X410 (which enables GUI Linux apps on Windows, i.e. WSL GUI apps).\nhttps://token2shell.com/howto/x410/creating-shortcut-for-wsl-gui-desktop/\nFrom there you setup Ubuntu under WSL as you would a Linux dev environment. Fonts can be copied over from Windows to ~/.local/share/fonts and are made available to the Linux apps.\nFor better looking UI take a look at the X410 how-to below:\nhttps://token2shell.com/howto/x410/setting-the-theme-for-linux-gui-apps-windowed-apps-mode/\nAnd halfway down in this how-to they show how to install Adapta theme, which I thought looked good:\nhttps://token2shell.com/howto/x410/customizing-xfce-desktop-for-ubuntu-wsl/. ",
    "napalm684": "@shayne I pursued this today looks ok but I'm curious how stable given guis aren't officially supported by WSL.  What has your stability experience been like?. @shayne I pursued this today looks ok but I'm curious how stable given guis aren't officially supported by WSL.  What has your stability experience been like?. Also (sorry for double post) delve for debugging doesn't seem to work this way.  Any special config needed?\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}. Running on Ubuntu 16.04 way faster almost immediate stop/start time with go 1.10. @ramya-rao-a Thank you that indeed corrected the problem.  Unless I missed it somewhere that should be part of the docs?. I am also seeing this in 1.26.1, I actually thought it was my VM but it's this.  I have a 4 vcpu Ubuntu 16.04 VM with 8gb ram and 128mb vram if it helps any (plenty fast but still gets brought to its knees with this).  I can also confirm disabling code lens resolved the issue.. @ramya-rao-a  Just downgraded to 1.25.1 and it does appear that the system does not spin up multiple instances of the guru process.  I am just seeing a single instance with a small CPU spike, then it closes out.  The delay in VSCode is pretty much imperceptible.  Plugin is 0.6.88 by the way.. Ubuntu 16.04 (via virtualbox win 10 1803 host).. ",
    "redblue9771": "Have you solved this problem? I can't get any relevant news.. ",
    "nicowernli": "\n@srfrog\nRegarding the go runtime path\npath.getGoRuntimePath() first tries to find the go binary/executable as per the path in go.goroot first and then the PATH. If not found, then it tries C:\\Go\\bin\\go.exe on windows and /usr/local/go/bin/go on other platforms.\n...\n\nWhat about returning wsl.exe /usr/local/go/bin/go instead of C:\\Go\\bin\\go.exe if an option like useWSL is enabled?\nEDIT: Maybe using first wsl.exe (resolved go.goroot) and then wsl.exe /usr/local/go/bin/go. I've made a test to see if it was possible to run tests from WSL and everything worked fine.\nbash\nbash.exe -c 'cd PATH_TO_GO_MODULE && GOOS=linux GO111MODULE=on /usr/local/go/bin/go test -run ^TestWSL$'\nRunning the bash.exe won't load the environment variables configured in your wsl linux, so you need to set every thing again (this could be loaded from the go.testEnvVars). After installing the wsl-alias I'm able to run linux go commands from powershell. The proble is that the extension will add the .exe to the executable if detectes that you are running it on windows. \nWould be nice to have a go.executable config to override that behaviour.. ",
    "jdan": "Just chiming in here as I've gotten this working with my ocaml tools (VSCode running in windows, with plugins that make calls into Linux)\nYou'll want to make some aliases to your linux bin's with the following tool: https://github.com/leongrdic/wsl-alias\nHere's the end result for me (https://twitter.com/jdan/status/1031290277242306566)\n\n. ",
    "KevinSjoberg": "@ramya-rao-a sounds good. If it is possible to support this via an API, would we want to update the current implementation for go.gopath and go.toolsGopath to use that as well?. ",
    "fengpf": "go 1.10 use cache in go test, how to config go.testFlags. ",
    "bancek": "@ramya-rao-a env variables are mostly needed for building.\nI don't think it's a good idea to change process.env because it would effect other extensions and especially when config can be changed while VS Code is running.. ",
    "dammitjim": "I am also experiencing this issue in 1.12.2.\nGo plugin version 0.6.61.. ",
    "dmke": "I believe the grammar has a a problem with parentheses in the var (...) declaration block. I've notices this while creating a global channel (Gist with go sources):\n\nHere's another funky example (note the return in line 6):\n. $ go get -f -u -v github.com/zmb3/gogetdoc\ngithub.com/zmb3/gogetdoc (download)\ngolang.org/x/tools (download)\ngithub.com/zmb3/gogetdoc\nand\n$ ps ww 10700 \n  PID TTY      STAT   TIME COMMAND\n10700 tty2     Rl+    0:15 /usr/share/code/code --type=renderer --js-flags=--nolazy --no-sandbox --primordial-pipe-token=16004A775203BA2A370E042427651A7C --lang=en-US --app-path=/usr/share/code/resources/app --node-integration=true --webview-tag=true --no-sandbox --background-color=#ffffff --disable-blink-features=Auxclick --enable-pinch --num-raster-threads=4 --enable-main-frame-before-activation --content-image-texture-target=0,0,3553;0,1,3553;0,2,3553;0,3,3553;0,4,3553;0,5,3553;0,6,3553;0,7,3553;0,8,3553;0,9,3553;0,10,3553;0,11,3553;0,12,3553;0,13,3553;0,14,3553;0,15,3553;1,0,3553;1,1,3553;1,2,3553;1,3,3553;1,4,3553;1,5,3553;1,6,3553;1,7,3553;1,8,3553;1,9,3553;1,10,3553;1,11,3553;1,12,3553;1,13,3553;1,14,3553;1,15,3553;2,0,3553;2,1,3553;2,2,3553;2,3,3553;2,4,3553;2,5,3553;2,6,3553;2,7,3553;2,8,3553;2,9,3553;2,10,3553;2,11,3553;2,12,3553;2,13,3553;2,14,3553;2,15,3553;3,0,3553;3,1,3553;3,2,3553;3,3,3553;3,4,3553;3,5,3553;3,6,3553;3,7,3553;3,8,3553;3,9,3553;3,10,3553;3,11,3553;3,12,3553;3,13,3553;3,14,3553;3,15,3553;4,0,3553;4,1,3553;4,2,3553;4,3,3553;4,4,3553;4,5,3553;4,6,3553;4,7,3553;4,8,3553;4,9,3553;4,10,3553;4,11,3553;4,12,3553;4,13,3553;4,14,3553;4,15,3553 --disable-accelerated-video-decode --disable-webrtc-hw-vp8-encoding --disable-gpu-compositing\nI believe, the proc line is truncated, through. Neither htop no ps print more than 1248 bytes (there should be space for a full page, shouldn't it?):\n$ wc -c /proc/10700/cmdline\n1248\nIs there a way to get information out of code --type=zygote or code --unity-launch, any hidden sockets I could query?. Using the Insiders build (1.22.0-insider, 952b2a641), this does not happen.. Sure, no problem!. You are right. I've opened an issue in the vscode repo.. ",
    "goenning": "Done. Also included run file tests.\n\n. I guess it's up for discussion, but I share same feelings about the amount of settings the extension already has. \nYou can disable it on workspace level, which should be roughly the same as a feature level setting. The only downside I can see is if your workspace has code from multiple languages and you want to disable codelens just for Go.. What about disabling this feature by default and leave as experimental while it's not performing as expected? I guess it's causing more harm than good at the moment.. You can disable it by setting \u2019editor.codeLens\u2019 to false.. btw, I guess build didn't failed due to this PR changes. How do we re-trigger it?. Which OS? I just tried on my Windows with same versions and it worked.\nAre you triggering the command by using the command bar? Can you try to bind a keyboard shortcut to this command and run it this way?. That is called CodeLens inside VSCode and it can be disabled with following settings.\ngo.enableCodeLens\": {\n  \"references\": false, //this is already false by default, but keep it if you want to make sure it's disabled\n  \"runtest\": false\n}. I understand your point, by at least for me, this is a huge gain of productivity. I usually split screen between the test and the function under test and use these shortcuts to verify if it's working, i don't need to switch to terminal and neither run all the tests. Debug is insanely useful when I have no idea why it's not working and it's just a click away. But yeah, this is just my point of view, I believe it's more useful than annoying \ud83d\ude00. Thanks for the response. Stick with this workaround for now, I'll soon submit a PR.. Great idea! I was focusing only on getting it done \ud83d\ude04 Can you see how it looks now?. By the way, I'm suggesting that we use the following precedence order \nlaunch env -> file env -> process env so we can override file env values with launch specific values.\nWhat do you think? Check the last commit.. Check last commit, I changed it.. I personally prefer lowercase + shorter text to not get much attention. It should be as unobtrusive as possible so devs can focus on code an not on these actions. It's like this on C# codelens\nNext enhancement could be debug test \ud83d\ude04 . I removed because of this line. GoDebug is always loading everything process.env. Am I missing something?. From the codelens point of view, It's just creating a VSCode debug configuration with env and envFile that is later processed/merged by GoDelve, like it does with any user-configured launch.json.. Nice catch, I'll remove it.. I'll move it :). Nice, didn't see this function. Will change it.. ",
    "coder543": "Personally, I think this feature is awesome. I hope we can have more codelens integration!. I'm not 100% sure, but this could be breaking things right now. goimports was seemingly never being run, and switching back to gofmt definitely worked in VS Code settings, so I started digging in the code here and found that it might be trying to call goimports-gomod which isn't in my path. So, I go get installed the fork, then copied it to goimports-gomod, and things started working.\nHowever, I'm not sure this code change has actually been deployed to the extension store yet, so another possibility is that goimports (non-fork) simply doesn't work on module-enabled projects at this point, and that by installing the fork on top of goimports and goimports-gomod that I fixed things that way.\nEDIT: the on save behavior is still strangely unreliable. I can run goreturns -w . from PowerShell in my directory, and it works fine, but if I set goreturns as the on save formatter, nothing ever happens when I save.. Under Output -> Log (Window), I found the problem:\nAborted format on save after 750ms\n\nSo, this explains why it was being finicky. I increased the Format On Save timeout and the issue went away.. ",
    "phenrigomes": "To resolve the problem I need to change the project folder name, and after launch the debug. If the folder name is equal for the docker folder path I have the problem.\nIf\n\"remotePath\": \"/go/src/bitbucket.org/marked/markedProf1\",\nis equal to\nADD. /go/src/bitbucket.org/marked/markedProf1 - Dockerfile\nSomeone can help me?. ",
    "willseward": "I can repro this too, albeit without the fix.\nI made a repo to demonstrate the problem: https://github.com/willseward/delve-crash\nJust run docker-compose up --build, and try to use the remote debugging VS Code task.. It works via the command line, but not with VS Code.\n```text\nConsole\ndebugger_1  | Looking for myapp process...\ndebugger_1  | 2017/05/04 04:32:49 server.go:73: Using API v1\ndebugger_1  | 2017/05/04 04:32:49 debugger.go:69: attaching to pid 1\ndebugger_1  | API server listening at: [::]:2345\ndebugger_1  | 2017/05/04 04:33:08 debugger.go:327: created breakpoint: &api.Breakpoint{ID:1, Name:\"\", Addr:0x484c9d, File:\"/go/src/myapp/main.go\", Line:13, FunctionName:\"main.main\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(api.LoadConfig)(nil), LoadLocals:(api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}\ndebugger_1  | 2017/05/04 04:33:09 debugger.go:482: continuing\ndebugger_1  | 2017/05/04 04:33:18 debugger.go:482: continuing\napp_1       | Hello! I'm going to sleep for 1 second.\ndebugger_1  | 2017/05/04 04:33:20 debugger.go:482: continuing\napp_1       | Hello! I'm going to sleep for 1 second.\ndebugger_1  | 2017/05/04 04:33:22 debugger.go:482: continuing\napp_1       | Hello! I'm going to sleep for 1 second.\ndebugger_1  | 2017/05/04 04:33:24 debugger.go:482: continuing\napp_1       | Hello! I'm going to sleep for 1 second.\ndebugger_1  | 2017/05/04 04:33:25 debugger.go:482: continuing\napp_1       | Hello! I'm going to sleep for 1 second.\ndelvecrash_app_1 exited with code 2\ndelvecrash_debugger_1 exited with code 137\n```\n```text\nVSCode\nVerbose logs are written to:\n/var/folders/_h/q7w4lltd1ln97vd302zn8kz40000gn/T/vscode-go-debug.txt\n11:54:40 PM, 5/3/2017\nInitializeRequest\nInitializeResponse\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/willswward/delve-crash/app/main.go:13\nError on CreateBreakpoint\nAll set:[null]\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\nSetBreakPointsRequest\nAll cleared\nAll set:[]\nSetBreakPointsResponse\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/willswward/delve-crash/app/main.go:13\nDisconnectRequest\nDisconnectResponse\n```. Thanks @roblourens \nThe correct remote path to the main.go should be /app/main.go. It lives in the debugger container via a volume. Now that you mention it, it is a little strange that the path shows up as /go/src/myapp/main.go in the console log.\nI'll keep looking at it.\nEDIT: I think the errant path may just be residual of the build process. Correct me if I'm wrong.... @roblourens \nThe Dockerfile builds inside /go/src/myapp/ to create the binary, myapp, and then the second stage moves the binary from /go/src/myapp (with --from=builder) to /.  /go/src/myapp simply doesn't exist in the docker image past the first stage of the build since it's built from the scratch image. Now, the since the debugger is in a separate container, I mount the source into /app/. This is where I derive the remotePath: \"/app\".\nAs for the path being part of the build process, I believe the build path is included in the symbols of the binary.. Got it!\nIf the original build path and the current path don't match, it won't work. The fix for me is:\ndiff\ndiff --git a/.vscode/launch.json b/.vscode/launch.json\nindex 06da33b..d6366f5 100644\n--- a/.vscode/launch.json\n+++ b/.vscode/launch.json\n@@ -5,7 +5,7 @@\n         \"type\": \"go\",\n         \"request\": \"launch\",\n         \"mode\": \"remote\",\n-        \"remotePath\": \"/app\",\n+        \"remotePath\": \"/go/src/myapp\",\n         \"port\": 2345,\n         \"host\": \"127.0.0.1\",\n         \"program\": \"${fileDirname}\",\ndiff --git a/docker-compose.yml b/docker-compose.yml\nindex 0884ba2..b1c7168 100644\n--- a/docker-compose.yml\n+++ b/docker-compose.yml\n@@ -18,4 +18,4 @@ services:\n       - \"2345:2345\"\n     pid: \"container:delvecrash_app_1\"\n     volumes:\n-      - \"./app:/app\"\n+      - \"./app:/go/src/myapp\"\nA strange peculiarity.. The original problem still exists, but I don't think it's a bug---just some undocumented functionality.. https://github.com/Microsoft/vscode-go/issues/941#issuecomment-299591809 is the work-around.\nThe repro in the github repo still works. The next-to-latest commit is the one with the failure.. ",
    "kode4food": "@ramya-rao-a ok, I'll do it, thanks. Please see #945 for the PR. The change has been added as a result of #945 being merged.  Closing the issue.\nThank you. The one failing build configuration seems to be completely unrelated to the PR. No problem. I also misspelled the word \"Misspelled\" -- oh well\n. @ramya-rao-a Just as well! I won't be able to get around to it until Friday though. I lied, just pushed the changes. ",
    "Taik": "I agree :)\nClosing and opening the file does not display the errors right away, until I start typing.\nThe errors are not really related to the line at all, and for the most part points to another part of the code completely (another file). Here's an example:\n\nI opened the file and created a new line (L280), and the error started showing up.\n. I just gave it a try, and it seems like it fixed it. Thanks for the awesome plugin!. ",
    "wangxufire": "I also have the problem in 0.6.62. . ",
    "kmur911": "Thanks!. ",
    "BlakeMScurr": "Yeah, I can print the stack trace at arbitrary depth using the command line with stack <depth> during debugging. I might just be missing the interface in vscode that lets you do the same thing.. ",
    "AlexShemeshWix": "Hi\ndlv is not working as well.\nAny env variable is not defined when im running under debugger.\nIve tried to reainstall golang and vscode.\nNo luck.\nIts really frustrating that such simple thing does not work properly.\nMay be i can try some other editor? gogland didnt worked for me. It stack with Module \"\" is undefined when i define run configuration.\nThanks\n. In the end i went for gogland IDE. Its not 100% and it has its own glitches but debugging of tests and project itself works ok.. When using dlv --backend  indeed helps.\nUsing dlv and remote debugging in VSCode works ok.\nStill i when i run it from VSCode directly - its the same.\nIve checked bashrc and all other shell configuration stuff, i dont think its the issue. \n1. Go itself runs, its just it cant see any env variables at all, even when i define env in launch.json - its invisible under debugger.\n2. I use VSCode for variaty of languages, Python and Java Script mostly, and i never met such problem, so i guess its plugin problem.\nThanks. Awesome 10x\n. All my versions are up to date.\nOn Wed, May 3, 2017 at 6:41 PM, Chris Mack notifications@github.com wrote:\n\ni reinstalled xcode tools and now it is working for me. might be worth a\nshot.\nxcode-select --install\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/947#issuecomment-298950017,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AVGz1Hby3-TJCE53CURcUCkjo_Cn6e2bks5r2KASgaJpZM4NKKUM\n.\n. \n",
    "xoob": "Okay I've been wrangling with the same issue. It looks like it has something to do with the lldb backend on macOS.\n$ dlv version\nDelve Debugger\nVersion: 0.12.2\nBuild: HEAD-dcf51a5\n$ go version\ngo version go1.8.1 darwin/amd64\n$ brew config\nmacOS: 10.11.6-x86_64\nXcode: 8.2.1\nClang: 8.0 build 800\nNote that I'm still on 10.11, not 10.12.\nmain.go\n```go\npackage main\nimport (\n    \"fmt\"\n    \"os\"\n)\nfunc main() {\n    fmt.Printf(\"args:       %v\\n\", os.Args)\n    fmt.Printf(\"env.TMPDIR: %#v\\n\", os.Getenv(\"TMPDIR\"))\n}\n```\nTests\nNormal go-run:\n$ go run main.go\nargs:       [/var/folders/v1/nd5ykpp11yjgymnc1zzt7n2h0000gn/T/go-build043785679/command-line-arguments/_obj/exe/main]\nenv.TMPDIR: \"/var/folders/v1/nd5ykpp11yjgymnc1zzt7n2h0000gn/T/\"\nDefault dlv-debug:\n$ dlv debug main.go\nType 'help' for list of commands.\n(dlv) c\nargs:       [.../dlvdebug/debug]\nenv.TMPDIR: \"\"\nNative dlv-debug with --backend=native:\n$ dlv debug --backend=native main.go\nType 'help' for list of commands.\n(dlv) c\nargs:       [.../dlvdebug/debug]\nenv.TMPDIR: \"/var/folders/v1/nd5ykpp11yjgymnc1zzt7n2h0000gn/T/\"\nAs you can see, the run with dlv debug main.go does not receive any environment variables, while the run with dlv debug --backend=native main.go works as expected.\nThe backend flag is documented as follows:\n$ dlv --help\n...\nFlags:\n      --backend string       Backend selection:\n    default     Uses lldb on macOS, native everywhere else.\n    native      Native backend.\n    lldb        Uses lldb-server or debugserver. (default \"default\")\nNot sure what to do about it, but I hope this is helpful.. Possibly related: https://github.com/Microsoft/vscode-cpptools/issues/191. ",
    "zcmack": "i'm having a similar issue. using fish shell so if the problem is related to shell config i figure i'd be worse off as it lacks full POSIX compliance. \ncould not launch process: exec: \"lldb-server\": executable file not found in $PATH\nProcess exiting with code: 1\ni'd prefer not to switch to gogland if possible so let me know what i can do to help. i'm on sierra 10.12.4 and go version 1.8.1, delve installed via go get  github.com/derekparker/delve/cmd/dlv\n. i reinstalled xcode tools and now it is working for me. might be worth a shot.\nxcode-select --install. ",
    "DeadNumbers": "@ramya-rao-a \n\nexported function ReadConfig should have comment or be unexported\ntype photoId should be photoID\ndon't use underscores in Go names; var LC_Message should be LCMessage\n\nAnd other. I want disable ALL.\n. ",
    "slomek": "I'm not sure about naming it table test function though, as it just adds the inside of a function. It is intentional since we already have test function as you mentioned. It is intended to be used as in the example: first, create a function, rename it as you with, then inside it call this snippet and fill its fields.\nAlso, what would d in tbd stand for?. @ramya-rao-a I applied your suggestions ;). ",
    "AllenField": "It worked for me! \nThank you. ",
    "HanderLo": "Thanks, Great Answer.. ",
    "qaisjp": "Glad to hear #168 has not been forgotten! Tried VS Code for the first time today and this is the only thing I've noticed missing from GoSublime so far!. What's the plan for #168?. ",
    "whitlockjc": "I apologize.  I searched but didn't see anything that seemed related.  I'll close as a duplicate.. I love that approach.  :)  I like the ability to turn it off completely, as linked in the previous issue, but at some point it might be nice to cherry-pick the ones I do like and your new approach solves this.  Thank you.  :). ",
    "Emreu": "Hi everyone! I had possibly same issue.\nAfter some research found root of problem (at least for my case) - function isPositionInString (utils.ts:238) returns incorrect values for some specific but usual in golang cases. If you have empty string (\"\") or some bizzare escaped string (\"\\\\\") before your object of interest - go to definition didn't works.\nExamples:\n\n\nReplace string with something regular and everything works good:\n\nPlease consider fixing double quotes counting logic.\nPossible solution: count all quotes than subtract escaped quotes.\n. ",
    "hjma29": "When I use Visual Studio Code with Go exention or Atom with Go-plus, I got \"No definition was found for 'Command'\" error when trying to check declaration of the following code \"&Cobra.Command\". JetBrains' Gogland doesn't have this issue and can correctly jump to the Command(a struct) defintion.\nhttps://github.com/spf13/cobra/blob/master/cobra/cmd/add.go#L32\nvar addCmd = &cobra.Command{\n    Use:     \"add [command name]\",\n    Aliases: []string{\"command\"},\n    Short:   \"Add a command to a Cobra Application\",\n    Long: `Add (cobra add) will create a new command, with a license and. Thanks from prompt response. It works right away! Do we have plan to make \"gogetdoc\" as default or it has other issues comparing with godoc/godef?. Thank you very much. After knowing where to look for log from your post, I can see gorename scanned my other testing directories(Because my symbol has capital letter) under GOPATH and found some errors under those directories(code was not cleanedup yet). I deleted those files under testing directory and now rename works.. ",
    "riosdavi": "@ramya-rao-a thanks for your quick reply. Effectively, replacing \"---\" by \"--\" solved the issue but I think a better algorithm should be used to detect diff output.\nI would vote for such a fix.\nThanks!. ",
    "wolfgangmeyers": "That worked like a charm! Thanks!!. ",
    "buyology": "+1\nAs a MVP couldn't just all the test buttons be mirrored with corresponding bench buttons (on the package, file and individual bench level)?. hm. ok, fixed some errors (which I didn't notice) in the imported package, and now it seems to work.\nin my experience auto-completion hasn't been so sensitive to compile errors before (that has been more the case with e.g. gorename.). maybe this is something on the gocode end.. Any update on this? Would be great to have as some tests do not get timed out properly and then the only option is to kill vscode.. @ramya-rao-a @tylerb \u2014 What's left to do on this one? It would be such a great feature to have.. Thanks a lot for the summary \ud83d\udc4d. If you don't mind I'll try and see if I can find some time to take a look at this and push this forward. @ramya-rao-a \u2014 can we please get this is in in the next release? It's such a great feature. \nJust look at this sweetness \u2764\ufe0f \n\n. @ramya-rao-a \u2014 any update?. Tbh, that progress box looks really intrusive. I really appreciate the elegancy and low keyness in this PR \ud83d\udc4d . Great work on this! \ud83e\udd47So nice to finally have this! \ud83c\udf1e. @ramya-rao-a did not mind :) thanks!. @hanleym any update on this one? Would indeed be very nice to have. If you don't have time to finish it, I could take a look.\n. Hm. Maybe I wasn't clear enough about this being more of an experience report that vets complaint often shadows the already existing func def helper. \nIf you are lucky, it shows the func def \u2014 or it just shows the vet output \u2014 which is not very helpful for said reasons.\nThe suggestion is to reach a middle ground and show both. The more information, the merrier, esp in the case of an error.. Thanks for your comments. Added the tests. \nHowever \u2014\u00a0after the refactoring I'm back at that same problem that we discussed on Slack that I can see during the tests that stuff is properly edited, but the tests fail. I cannot spot the obvious missing return in this case however. . Nice! :) . https://code.visualstudio.com/docs/editor/userdefinedsnippets\nThere is even a snippet for it already:\n\n. Done.. I had that change sitting on my computer :) Since it takes a -line, I thought we might as well support selecting a whole line.. ",
    "rskumar": "yes exactly. \nIn my case i am having trouble with GeertJohan/go.rice\nwhich accepts relative path to project. . Anyone working on this?. ",
    "crazytaxi824": "I got the exact same problems here. looking forward to the update.. @ramya-rao-a I have tried your way. by the time i try it, i didn't setup the tasks.json properly, so i got some problems. And it works great now. thanks a lot.. ",
    "mvrhov": "Since November there is an option dlv debug --output /tmp/xxx So this should now be easy to implement.. I hate to be a nag, and I know that this was a regression fix, but some of us who came in late this fix is now a regression. IMO, the behavior as was before ws correct. every IDE that produces the executable leaves it in it's place.\nThe other thing is that now one to run the executable outside of the ide now must do a manual build. Also if the output dir & executable name are the same for the build script and the vscode debug the next run will remove the file.. My executable IS NOT NAMED debug. I have the output set under the configurations where I properly name each one of them.. I hope this explains it well\nEach configuration inside launch.json contains \"output\": \"${workspaceRoot}/bin/<app_name>debug\",\", The above output contains same name/path that is later used in build.sh script (build.sh does a bit more than just go install). And this is the file that now gets deleted.\nMy workflow until now was.. Write some go code, press F5 / Shift+Ctrl+F5 to build it (sometimes build was all that's needed also having configuration for each and every combination of command line switches is not manageable, also the behavior for build/run in IDEs is usually the same command).\nSwitch to console and run the command with proper switches.\nAlso I don't need the full build e.g with packaging assets into the executable that the build.sh does when run on dev machine as it's a waste of time.\nSwitch to terminal to run the executable with proper switches. (However now the executable is gone) So I have to run build.sh to build it again and then run it.\nIt's a bit annoying but it seems that I'll have to find a different workflow now.\n. There is probably more of them like that:\n if the build fails you cannot start again. you get that the Debug process is already running error.\n the restart is now sometimes so slow, that process restart manages to launch multiple instances.\n* you have to press stop button multiple times for it to register the stop or to stop debug process I dno't know which one is true. Hey guys.. are we sure this is fixed.\nWell this works for the first time now in VSCode 1.30.1, and then the debug console keeps showing old message.. Like I said. I get the output in debug console only when the first error happens. Each further error displays the old error message.\nThe test would be create a simple file with 2 errors, try to run it with F5... correct one error, pres F5 to run.. old error message remains in debug console. VScode restart is required to see the next error message. All the thanks goes to you for providing a plugin and a support for it. ",
    "Anteoy": "It worked for me!Thank you. ",
    "hungys": "@ramya-rao-a \n\nPerformance\n\nI'm on VS Code 1.12.1 with Go extension 0.6.61. (macOS 10.12.4)\nFor the Code Lens, will the cache be invalidated when re-opening or switching between different files? But the fact is that every time I open a file (75 LoC, and the whole project contains ~2000 LoC), it takes about 5 seconds to let the reference count show up.\nFor \"Find all references\", it is also a little bit slow on my project, and I think it's also not cached?\n\n0 showing up\n\nI cannot reproduce it today, but I think it's a good idea to differentiate these two cases :)\n\nMethod support\n\nOh sorry, I didn't notice that.\nPS. The repo I tested with: https://github.com/hungys/swimring. @ramya-rao-a \n0 reference issue still occurs randomly.\nI've checked that the method support just works, but sometimes it also report 0 reference (which is incorrect).\n\nBTW, is it possible to calculate all the reference counts at once, but not wait until we scroll to them?. ",
    "JanKoehnlein": "I found a repro for the Error finding references.\n\nCheck out go itself from https://github.com/golang/go\nenable reference codelens in the settings\nopen src/compress/bzip2/bit_reader.go\n-> Error finding references on the last 4 functions in the file.\n\nguru is called as \n~/go/bin/guru referrers -modified go/src/compress/bzip2/bit_reader.go:#1038\nand reports \nguru: query object not found during reloading\n. Cool, thanks.. I have removed the uri commit. Are you OK with the other two?\nI am currently creating a language server for Go based on the VSCode plug-in. So the errors spotted are mostly found during debugging. I have not yet taken a systematic approach using stricter compiler options or a stricter linter. . ",
    "muravjov": "Hi, I searched why I cannot set breakpoints as verified in VSCode while the program is running (after continue) and found out that you cannot set breakpoints in delve until you stop/halt debuggee program via delve.\nThat is, if you try to set a breakpoint in vscode while the debuggee program runs, the request to delve CreateBreakpoint hangs forever (till debugging session' end) and even F6 (Pause) will not work.\nWorkaround: before setting breakpoint you hit F6 (Pause), then set breakpoint, then Continue (F5) and everything is ok.\nSo I suggest to make start/stop requests to delve for every breakpoint being set if debuggee is running. That is, to call pauseRequest()/continueRequest() in setBreakPointsRequest() , see at\nhttps://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L530\n\nI've checked out Goland, https://www.jetbrains.com/go/ , and found out that they do just stop/start in such situations. Here is the log from delve (patched by me) under Goland control, showing that delve was started and stopped only for setting breakpoint: \n2018/01/27 23:44:22 server.go:265: rpc command: RPCServer.Command, version 2\n2018/01/27 23:44:22 server.go:292: rpc command, is sync: false\n2018/01/27 23:44:22 debugger.go:490: Debugger.Command: start\n2018/01/27 23:44:22 debugger.go:498: halting\n2018/01/27 23:44:23 debugger.go:562: Debugger.Command: stop\n2018/01/27 23:44:23 debugger.go:562: Debugger.Command: stop\n2018/01/27 23:44:23 server.go:265: rpc command: RPCServer.CreateBreakpoint, version 2\n2018/01/27 23:44:23 server.go:292: rpc command, is sync: true\n2018/01/27 23:44:23 debugger.go:284: CreateBreakpoint: 1\n2018/01/27 23:44:23 debugger.go:303: CreateBreakpoint: 2\n2018/01/27 23:44:23 debugger.go:328: CreateBreakpoint: 3\n2018/01/27 23:44:23 debugger.go:339: CreateBreakpoint: 4\n2018/01/27 23:44:23 debugger.go:348: created breakpoint: &api.Breakpoint{ID:1, Name:\"\", Addr:0x8b8188, File:\"/home/ilya/opt/programming/g-core/balancer/src/balancer/master.go\", Line:95, FunctionName:\"balancer.SendCommandTo\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(nil), LoadLocals:(*api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}\n2018/01/27 23:44:23 server.go:265: rpc command: RPCServer.Command, version 2\n2018/01/27 23:44:23 server.go:292: rpc command, is sync: false\n2018/01/27 23:44:23 debugger.go:490: Debugger.Command: start\n2018/01/27 23:44:23 debugger.go:509: continuing\nAlso, I've checked https://github.com/derekparker/delve sources and found out why one should not request CreateBreakpoint command while debuggee is working: every command except halt (= Pause in vscode) try to lock processMutex before performing its action, but if it is already locked (while debuggee runs) so the request hangs forever:\n// CreateBreakpoint creates a breakpoint.\nfunc (d *Debugger) CreateBreakpoint(requestedBp *api.Breakpoint) (*api.Breakpoint, error) {\n    d.processMutex.Lock()\n    defer d.processMutex.Unlock()\n...\nSee at https://github.com/derekparker/delve/blob/master/service/debugger/debugger.go#L284. I am not so good with TypeScript and those promises so I cannot make PR for my suggestion myself, the right way. Please help me with that.\n. Yes, I am if I do it in right order: at first pause the program, then set breakpoints.\nOther way it hangs forever (till debug session end).\nAnd I understand why - if you set breakpoint while debuggee runs, then you hit deadlock - see d.processMutex.Lock(). Yes, I checked both examples, https://github.com/golang/example/tree/master/outyet , and https://github.com/Microsoft/vscode-go/issues/978#issuecomment-300049590 , and the situation is the same, vscode-go' delve controller stops to send any command to delve.\nAt the start of debug session vscode-go calls two GoDebugSession' methods, continueRequest() and threadsRequest(), you may see it in Debug Console, ContinueRequest and ThreadsRequest correspondingly (with \"trace\": \"verbose\" in launch.json). \nIn the majority of cases ContinueRequest occurs earlier, and delve's command \"continue\" lockes processMutex' mutex, see above. The next ThreadsRequest never returns , so no next commands, including Pause, ever has chance to be invoked. Fail.\nYou may see that ThreadsRequest is locked by killing dlv with SIGABRT signal so it prints its tracktraces:\n$ kill -s SIGABRT <pid of the dlv debugging the program>\nSample stacktraces of killed dlv:\n```\nSIGABRT: abort\nPC=0x4608f1 m=0 sigcode=0\n...\ngoroutine 34 [semacquire]:\nsync.runtime_SemacquireMutex(0xc42011106c, 0xc42049e600)\n        /home/ilya/opt/programming/golang/go1.9.1/src/runtime/sema.go:71 +0x3d\nsync.(Mutex).Lock(0xc420111068)\n        /home/ilya/opt/programming/golang/go1.9.1/src/sync/mutex.go:134 +0x25e\ngithub.com/derekparker/delve/service/debugger.(Debugger).Goroutines(0xc420111060, 0x0, 0x0, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/debugger/debugger.go:825 +0x82\ngithub.com/derekparker/delve/service/rpc1.(RPCServer).ListGoroutines(0xc420490060, 0x0, 0x0, 0xc420487b00, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/rpc1/server.go:286 +0x8b\nreflect.Value.call(0xc42049e600, 0xc420172208, 0x13, 0xbb38de, 0x4, 0xc4200afc50, 0x3, 0x3, 0x0, 0x0, ...)\n        /home/ilya/opt/programming/golang/go1.9.1/src/reflect/value.go:434 +0xccc\nreflect.Value.Call(0xc42049e600, 0xc420172208, 0x13, 0xc4200afc50, 0x3, 0x3, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/go1.9.1/src/reflect/value.go:302 +0xd7\ngithub.com/derekparker/delve/service/rpccommon.(ServerImpl).serveJSONCodec.func1(0xc4200afdc0, 0xc4200afea0, 0xc42049e600, 0xc420172208, 0x13, 0xc420388a20, 0xb09160, 0xc4202ed0d0, 0x194, 0xac7b00, ...)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/rpccommon/server.go:305 +0x1b8\ngithub.com/derekparker/delve/service/rpccommon.(ServerImpl).serveJSONCodec(0xc420082be0, 0x7fca06d8b0c8, 0xc420162028)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/rpccommon/server.go:307 +0xa49\ncreated by github.com/derekparker/delve/service/rpccommon.(ServerImpl).Run.func1\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/rpccommon/server.go:150 +0x1dc\ngoroutine 25 [syscall]:\nsyscall.Syscall6(0x3d, 0xffffffffffffffff, 0xc42057ed34, 0x40000000, 0x0, 0x0, 0x0, 0xc4200244d8, 0xc420024420, 0x10000c42057ece8)\n        /home/ilya/opt/programming/golang/go1.9.1/src/syscall/asm_linux_amd64.s:44 +0x5\ngithub.com/derekparker/delve/vendor/golang.org/x/sys/unix.wait4(0xffffffffffffffff, 0xc42057ed34, 0x40000000, 0x0, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/vendor/golang.org/x/sys/unix/zsyscall_linux_amd64.go:179 +0xba\ngithub.com/derekparker/delve/vendor/golang.org/x/sys/unix.Wait4(0xffffffffffffffff, 0xc420179450, 0x40000000, 0x0, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/vendor/golang.org/x/sys/unix/syscall_linux.go:295 +0x8e\ngithub.com/derekparker/delve/pkg/proc/native.(Process).wait(0xc42007fd40, 0xffffffffffffffff, 0x0, 0x0, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/pkg/proc/native/proc_linux.go:341 +0xf3\ngithub.com/derekparker/delve/pkg/proc/native.(Process).trapWait(0xc42007fd40, 0xffffffffffffffff, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/pkg/proc/native/proc_linux.go:198 +0xc2\ngithub.com/derekparker/delve/pkg/proc/native.(Process).ContinueOnce(0xc42007fd40, 0x0, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/pkg/proc/native/proc.go:282 +0x32c\ngithub.com/derekparker/delve/pkg/proc.Continue(0xe7e880, 0xc42007fd40, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/pkg/proc/proc.go:103 +0x1dd\ngithub.com/derekparker/delve/service/debugger.(Debugger).Command(0xc420111060, 0xc420493020, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/debugger/debugger.go:510 +0x148d\ngithub.com/derekparker/delve/service/rpc1.(RPCServer).Command(0xc420490060, 0xc420493020, 0x7fca06dd7b90, 0xc42016a180)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/rpc1/server.go:54 +0x5a\nreflect.Value.call(0xc42049e180, 0xc4201720b8, 0x13, 0xbb38de, 0x4, 0xc42057ff48, 0x3, 0x3, 0x0, 0x0, ...)\n        /home/ilya/opt/programming/golang/go1.9.1/src/reflect/value.go:434 +0xccc\nreflect.Value.Call(0xc42049e180, 0xc4201720b8, 0x13, 0xc4202e1f48, 0x3, 0x3, 0x0, 0x0, 0x0)\n        /home/ilya/opt/programming/golang/go1.9.1/src/reflect/value.go:302 +0xd7\ngithub.com/derekparker/delve/service/rpccommon.(ServerImpl).serveJSONCodec.func2(0xc42016a180, 0xc42049e180, 0xc4201720b8, 0x13, 0xc420388360, 0xace000, 0xc420493020, 0x16)\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/rpccommon/server.go:324 +0x207\ncreated by github.com/derekparker/delve/service/rpccommon.(*ServerImpl).serveJSONCodec\n        /home/ilya/opt/programming/golang/delve/src/github.com/derekparker/delve/service/rpccommon/server.go:318 +0xdc1\n...\n```\nHere we see that goroutine 34 is locked by processMutex - debugger.go:825 in (d *Debugger) Goroutines() - it is our ThreadsRequest . And goroutine goroutine 25 that locked processMutex - it is our ContinueRequest . \nBut there is another situation there, when ThreadsRequest is invoked earlier than ContinueRequest . In that case delve returns but again, for some reason, I still don't see ThreadsResponse. Thereby Pause/pauseRequest() is not working again (whereas button Stop/disconnectRequest() works, sending 'halt' command successfully). If I have time later I'll debug vscode-go and can say why it is.\n\nSo, workaround is simple now: always set a breakpoint and when control hits it deadlock is over.. @ramya-rao-a \n\nHow do we determine when the deadlock is hit?\n\nFrom the delve's side you are to find out whate all goroutines are doing now = their stacktraces.\nIf you rebuild delve with a couple of changes mentioned here https://stackoverflow.com/a/19145992 , then you may get all stacktraces with this command:\ncurl http://localhost:9100/debug/pprof/goroutine?debug=2\nOn Linux and MacOs you may kill go program with signal SIGABRT with the same effect, rebuild is not needed.. ",
    "dariopb": "Is there any workaround for the Pause -> set breakpoint -> Continue issue?  I'm running vsc 1.22.2 with go extension 0.6.78 and still hitting the issue: everything goes fine until I \"Pause\", then I can set a breakpoint (breakpoint is \"verified\" it seems) but then \"Continue\" does nothing and the program doesn't keep running.. ",
    "ariel-bentu": "Hi,\nI managed to get this working on my macos vscode, by adding pause before setting a breakpoint and continue after it is set:\nin line 704, add this line\n        var shouldContinue = false;\n        if (this.continueRequestRunning) {\n            shouldContinue = true;\n            this.pauseRequest(null);\n        }\nin line 728, insert this before:\n            if (shouldContinue) {\n                this.continueRequest(null)\n            }\nFor me, finally it allows setting new breakpoints while debugee is running.\nI hope you find this value-able and add this\n. ",
    "Mike152": "Thank you for your reply.\nIt took about 15 minutes to disable the workspace (was that what you meant?).\nIt didn't help, it still takes from 10 to 20 minutes to run a simple 'Hello World'.\nThis is unusable \nQ. It there a minimum amount of memory needed to make it work properly?\n. ",
    "henvic": "Visual Studio Code is very slow here as well after running for just a few minutes when I have go.useLanguageServer: true.\nMy $GOPATH is /Users/henvic/projects/gocode.\nOutside VS Code Go runs just fine.\nMaybe this is related with the issues below?\nhttps://github.com/sourcegraph/go-langserver/issues/185\nhttps://github.com/Microsoft/vscode-go/issues/886. ",
    "amativos": "Does the extension provide a way to run linter on demand? That way we could run gometalinter with expensive linters only when we choose to, without falling back to the command line. As far as I checked, there is no way to do this.. ",
    "aeronite": "Hi @ramya-rao-a  thanks for the quick reply!\n\nAll of the other features you mentioned still work fine inside a specific proj.\nRunning Go: Current GOPATH gives me the correct GOPATH\n\nHeres exactly whats happening:\nI have a function  called 'Query' in package 'mypackage1', I use this function in 'myPackage2'.\nIf I change the func name to Query1 I see no indication of an error inside 'myPackage2' If I try to click on the 'Query' there to jump to def it doesn't let me anymore.\nWhen I try actually run my code obviously the compile fails.\nThe Go output channel doesn't show anything strange during this time:\n```\nFinished running tool: /home/aharon/go/bin/golint\nFinished running tool: /usr/local/go/bin/go tool vet /home/aharon/go/src/github.com/totango/monitoringapi/pipelines/pipeline_api.go\nFinished running tool: /usr/local/go/bin/go build -i -o /tmp/go-code-check -tags \"\" github.com/totango/monitoringapi/pipelines\n```. Thanks! That was the issue that was confusing me, so everything's fine.\nIf that's the case though, would you consider an option to build all packages (in project context) on save?\nGo's super fast compile times should mean that this won't affect user experience. It will make refactoring much more intuitive.. ",
    "gljubojevic": "However.. \nIf vscode would prepend \"./\" to path during build it would avoid confusion and avoid errors of this type e.g.\nFinished running tool: /usr/local/bin/go build -o /var/folders/gg/glq0fl_d2s526bnmcvnsqk9r0000gn/T/go-code-check -tags \"\" -ldflags=-s cmd/dbi\ncan't load package: package cmd/dbi: open /usr/local/Cellar/go/1.8.1/libexec/src/cmd/dbi: no such file or directory\nBuild command like this works:\n/usr/local/bin/go build -o /var/folders/gg/glq0fl_d2s526bnmcvnsqk9r0000gn/T/go-code-check -tags \"\" -ldflags=-s ./cmd/dbi\nNote prepended \"./\" to build path.\nSame works from terminal\n# go build cmd/dbi\nFails..\n# go build ./cmd/dbi\nWorks fine\n. ",
    "mpvl": "I've installed it using go get -u and running make install on a Mac.. I get the same when running make install from delve-0.12.2.. Which version is known to work with the given Go extension and VSCode version?. I confirm that using 1.0.0 was the issue. Had the wrong path when reverting to 0.12 before.. ",
    "alexanderGalushka": "confirm the issue. ",
    "JamesOwenHall": "I have tried both installation methods, in both cases I'm getting the same could not launch process: [...] getsockopt: connection refused message.\nUpdate: Delve is actually working from the debug menu. It's only failing when I use the \"Debug test\" button highlighted below:\n\n. Yup, 0.12.2 works.. ",
    "dt": "Looks like delve has updated their homebrew formula so it is now installing 1.0.0-rc1 rather than 0.0.12, so this now happens even if you install delve using brew as instructed above and elsewhere in the docs.. Based on https://github.com/derekparker/delve/issues/836 and https://github.com/derekparker/delve/issues/838, it sounds like the bug is in delve 1.0.0-rc1 but has since been fixed in master.\nUpgrading from 1.0.0-rc1 to HEAD via brew unlink delve && brew install go-delve/delve/delve --HEAD fixed it for me.. ",
    "joneskoo": "@dt Confirmed 1.0.0-rc1 from homebrew didn't work for me, brew unlink delve && brew install --HEAD go-delve/delve/delve seems to work better. No more error from dial.\nWith the 1.0.0-rc1 I did get the prompt and accepted it, so it's not that in my case. I got the error \"could not launch process: dial tcp :50889: getsockopt: connection refused\" with the port changing earlier.. ",
    "sofent": "i have the same problem. ",
    "kumarsiva07": "Never worked to me. Before use go dep(Vendor), Editor can find the path. . @ramya-rao-a  I just restarted the IDE. Now Its fine. ",
    "mixj93": "same problem \u2565\ufe4f\u2565.... Actually, the build is fine. I use makefile to build:\n\nBut the import can't find some package, because this package are in vendor/, not in GOPATH/src or GOROOT/src\n\n. Actually, the build is fine. I use makefile to build:\n\nBut the import can't find some package, because this package are in vendor/, not in GOPATH/src or GOROOT/src\n\n. Yes, now I know why. And I move the project folder to GOPATH and everything looks fine.. ",
    "gideondsouza": "\nWhat is your expectation here? \nBeing able to put in an input in the debug console somehow.\n\nI played with delve itself and see that this is actually how delve behaves so I'm guessing that some way to interact with a scanf like call would have to be implemented inside delve.\nOh well. . ",
    "atedja": "This is very annoying and I have been searching in the settings how to disable these extensions. Maybe a \"Disable\" button?. You are right. I ran gorename and it produced the same errors, with and without -force. This looks like an intentional gorename feature.\ngorename automatically computes the set of packages that might be\naffected.  For a local renaming, this is just the package specified by\n-from or -offset, but for a potentially exported name, gorename scans\nthe workspace ($GOROOT and $GOPATH).\nIt's quite annoying that you can't rename a package unless all of your packages are in proper/compilable form.. ",
    "thedarkphoton": "Ok, I think I know what caused the problem. At some point I have installed gocode with sudo apt install ... and it looks like that was used over the go get ... installation. Running sudo apt autoremove gocode seems to fix it.. ",
    "danjoa": "Yes this was a mistake, sorry. \n(was in vacation). ",
    "shreyu86": "I am getting familiar with the vscode-go extension and adding this functionality. As a first pass I am experimenting with the following:\ntypescript\nif (lineText.match(/^\\s*\\/\\//)) {\n                    let nextLine = document.lineAt(position.line + 1).text;\n                    let part0 = nextLine.split(\" \");\n                    if (!part0[1].match(/^[A-Z]/)) {\n                        return resolve([]);\n                    }\n                }\n\nIf line is comment, then check if the next line has an exported member.\nChecking for exported member by splitting the next line and checking for exported member. \nAbove is crude and needs to be optimized.\n\nQuestions:\n Is there a function elsewhere which detects exported members?\n I have verified this above is working with manual testing, how do I go about writing automated tests? \n* Any pointers would be greatly appreciated to explore opening an pull request for this feature. . @m90 thanks for the feedback. @ramya-rao-a I have used the snippet linked above to suppress warning. Was thinking about functionality to add docs in this case, for example I select a exported object and a plugin fills in the object name to serve as a starting point to continue adding documentation. For example:\ngolang\nfunc SubmitVote (userID string){\n...\n}\nin above case the extension can generate the starting stub for the documentation and have the user complete the rest.\ngolang\n// SubmitVote $CURSOR\nfunc SubmitVote (userID string){\n...\n}\nIf the above is very specific and out of scope of a extension, happy to close this issue. . Thanks for the feedback, I will check out #1005 and the pointers and start working towards a prototype.. Given the change and removal of if (lineText.match(/^\\s*\\/\\//)) what would be the preference to proceed and check for condition where it is not a line comment and trigger the completion?. Thanks a lot! @ramya-rao-a . Thanks a lot for the refactor, I really appreciate the swift feedback. . I have been using the extension for the past day without any issues and have tested the following:\n\ngolangci-lint\ncompletion in comments for exported variables. I am interested in working on a fix for this. Can you provide any code pointers to get started? . I am interested in working on a fix for this. Can you provide any code pointers to get started? . I was able show all the matching packages in case of template, was wondering how should I proceed to forward if the user selects one of the packages to add it in import path and provide subsequent completions. \n\nFor multiple matching packages I included the token and the matching packages in parenthesis, in this case would adding command which imports the package be the right thing to do? \n. Looked at references for go.add.imports in the source and was able to add support for this feature. . Thanks, @ramya-rao-a I tested the new change. How do I go about updating the unit test? Can I hit tab on the first suggestion to trigger subsequent suggestion and then check for those?  . @ramya-rao-a I will update the tests and have this PR up for review soon, sorry I was out of office.. @ramya-rao-a I attempted to refactor the tests but was not successful in acceptSelectedSuggestion can you please provide some samples/pointers? . @ramya-rao-a I tried couple of options ^^ and I was not able to get the test refactored, can you please help? . Thanks a lot for help on this! Really appreciate it. . Thanks a lot @ramya-rao-a . \u2705 Provide auto-completions for symbols from unimported packages even when the package name has multiple matches. and testing other new features and fixes. . Thanks for the feedback. I will add logic to check for this and include an test case. . Will take these considerations into account and modify code. . In this case gocode should not be invoked right? . Cool, will do. . So in case of a block declaration, we should not trigger any completions and exit with empty results?. I am fine with skipping, wanted to clarify before I made any changes. . Added the right regex. . Have added logic to handle this case. . \n",
    "jeffcharles": "Setting it to false raises the same error\nOn Wed, May 31, 2017, 2:31 AM Rob Lourens, notifications@github.com wrote:\n\nYeah, possibly.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1008#issuecomment-305096967,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAJdCkzN8IfJFYJykOeVg5FrAeW--B-Wks5r_QklgaJpZM4NlmIA\n.\n. \n",
    "shayzu": "Hi,\nForgive me if I am \"complaining\" on the wrong thread - and if I am wrong please forward me to the right one.\nI am also having hard  time with the extension:\nFrom /Users/shayzukerman/go/src/oracle_db, I have set a breakpoint in the first and second lines in function main(), and when connecting to the remote server, the program runs until in terminates.\nMy setup:\nRelevant block in launch.json:\n        \"name\": \"Remote on Centos 7 VM\",\n        \"type\": \"go\",\n        \"request\": \"launch\",\n        \"mode\": \"remote\",\n        \"remotePath\": \"${workspaceRoot}\",\n        \"port\": 2345,\n        \"host\": \"192.168.56.101\",\n        \"program\": \"${workspaceRoot}/src/oracle_db\",\n        \"env\": {},\n        \"args\": [],\n        \"showLog\": true,\n        \"stopOnEntry\": true\n    }\n\nRemote server command:\noracle@Cent64Ora12 oracle_db]$ dlv debug --headless  --listen=192.168.56.101:2345\nAPI server listening at: 192.168.56.101:2345\nWhen connecting to the Remote server from a terminal:\nShays-MacBook:oracle_db shayzukerman$ dlv connect 192.168.56.101:2345\nType 'help' for list of commands.\n(dlv) b main.main\nBreakpoint 1 set at 0x4de95b for main.main() /home/oracle/go/src/oracle_db/oracle_db.go:38\n(dlv) c\n\nmain.main() /home/oracle/go/src/oracle_db/oracle_db.go:38 (hits goroutine(1):1 total:1) (PC: 0x4de95b)\n(dlv)\n\nDelve's version on the client and the server:\nDelve Debugger\nVersion: 1.0.0-rc.1\nBuild:\nVersion of \"Go\" Extension for VSCODE: 0.6.62 - 9th June, 2017.\nWhat have I done wrong?\n. Hi,\nWhen conducting a remote debugging from VSCODE's Go debugger - the remote debugger does not stop in the breakpoints. which were set in the editor.\nOn the other hand, it does stop when the Remote Delve server is controlled from a local Delve client.\nNo, I don't receive the 'stopOnEntry' of undefined\" error.\nSo, I will open a new issue.\nThanks\nShay. Hi,\nFirst of all, many thanks for your answer.\nBy looking at the trace file, I managed to understand that the value of the configuration fields: \"remotePath\" and \"program\" was wrong as the trace contain error messages regarding invalid lines.\nOnce configuration set to:\n{\n            \"name\": \"Remote on Centos 7 VM\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"/home/oracle/go/src/oracle_db\",\n            \"port\": 2345,\n            \"host\": \"192.168.56.101\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true,\n            \"stopOnEntry\": true,\n            \"trace\": true\n        }\nThings got better - as the Trace now contained the output of interaction.\nBUT - Once Clicking on  \"Start Debugging\" - nothing happens on the server's side.\nWhen debugging is stopped in VSCODE - the remote server terminates.\nAttached please find the Trace file.\nThanks again\nShay\nvscode-go-debug.txt\n. Hi Rob,\nI mean there is no activity on the server side:\nThe program does not run not any debugger activity such as its own trace.\nShay. Hi,\nIs there any update regarding the above ticket? Did you have a chance looking into the issue?\nThanks\nShay. Hi Ramya,\nI am trying to debug \"oracle_db\".\nYes, there are such breakpoints, which were created on the copy of the source file, which was uploaded to the remote server via \"Ftp-Simple\" Extension.\nAnyhow, removing these breakpoints did not solve the issue.\nLooking at issue #1138, I have started the remote debugger with --log option, and here's it's output:\n[oracle@Cent64Ora12 oracle_db]$ dlv debug --headless --listen=192.168.56.102:2345 --log\n2017/09/01 09:34:38 server.go:73: Using API v1\n2017/09/01 09:34:38 debugger.go:97: launching process with args: [/home/oracle/go/src/oracle_db/debug]\nAPI server listening at: 192.168.56.102:2345\n2017/09/01 09:34:44 debugger.go:347: created breakpoint: &api.Breakpoint{ID:1, Name:\"\", Addr:0x4debb2, File:\"/home/oracle/go/src/oracle_db/oracle_db.go\", Line:38, FunctionName:\"main.main\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(api.LoadConfig)(nil), LoadLocals:(api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}\n2017/09/01 09:34:44 debugger.go:347: created breakpoint: &api.Breakpoint{ID:2, Name:\"\", Addr:0x4dec84, File:\"/home/oracle/go/src/oracle_db/oracle_db.go\", Line:39, FunctionName:\"main.main\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(api.LoadConfig)(nil), LoadLocals:(api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}\n2017/09/01 09:34:44 debugger.go:347: created breakpoint: &api.Breakpoint{ID:3, Name:\"\", Addr:0x4dedf0, File:\"/home/oracle/go/src/oracle_db/oracle_db.go\", Line:46, FunctionName:\"main.main\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(api.LoadConfig)(nil), LoadLocals:(api.LoadConfig)(nil), HitCount:map[string]uint64{}, TotalHitCount:0x0}\n2017/09/01 09:35:21 debugger.go:493: halting\n(Please note the the I.P. address of the remote server was changed - but other than that - nothing.\nInstalling \"Go-latest.vsix\" as recommended in ticket #1138 did not solve the issue too (Since I am running on a Mac, the extension was installed from the editor's Extensions pane and not from commend line.\nAttached please find the latest: vscode-go-debug.txt\nThanks\nShay\nvscode-go-debug.txt. ",
    "mariusgrigaitis": "@f0zi could you look into this since you're familiar with #742?. I do not really think this is proper solution to the problem.\nFrom other parts of code it looks like trailing slashes are removed but here they're added.\nAnd in my case I think that paths shouldn't be touched at all.. I've tried it. Looks like it works\nConfig:\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Remote\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"/go/src/github.com/org/repo\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": [],\n            \"trace\": true,\n            \"showLog\": true\n        }\n    ]\n}\nVerbose log:\nInitializeRequest\nInitializeResponse\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/mgrigaitis/go/src/github.com/org/repo/main.go (/go/src/github.com/org/repo/main.go) :40\nI've also tried running same against latest master, was able to reproduce Error on CreateBreakpoint.. ",
    "Vidydy": "Hi, I am bumping this up because being able to see the content of the variables we are debugging is actually important :)\nThanks for taking the time to look into this!. ",
    "daenney": "Do you happen to run gofmt as part of save? That would change it to tabs since that's how Go code is expected to be indented.\nYour editorconfig should probably look like this instead, for Go:\n```\nroot = true\n[*]\nindent_style = space\nindent_size = 4\n[*.go]\nindent_style = tab\n```. What are the settings you have enabled for vscode-go?\n\nI don't want to use tab indent style.\n\nOK. But the community has pretty much settled on using tabs. And that's also what gofmt is going to enforce and what just about every other Go developer is going to expect and use on their code base.. Interestingly the spurious output in this specific case disappears if one sets go.lintFlags to --fast but it might be that it just happens to disable every other linter that tripped over this.. That seems to work, with --aggregate we're now down to:\n\nStill a few duplicates b/c of how those linters are outputting/wrapping the error, but better than before.. > I'm not sure how this plugin works, but I'd recommend the best approach to only run linters if the Go compiler was able to build the program.\nI disagree. There's plenty of things the linters can already tell me to fix before I even attempt to run a go build which would build my package and all of its dependencies. Depending on the size of the project this can easily take 5-10s or more and not getting any feedback in the UI until then that something might be wrong is not great from my perspective. One of the advantages of, especially the --fast, linters in gometalinter is that they can run continuously providing much more real time feedback then what's possible if I'd need to continuously run go build for any results.\nFor example, it takes gotype about 3ms to find that error, whereas for go build to surface that error it takes 1.5s. Now I can immediately fix the problem before I even attempt a build and not get stuck on that issue. That slow-down can be fixed if you run a go build -i the first time around and every time you add a non-stdlib dependency. go get would take care of it but that's not necessarily how a repository is checked out for development. Even so, running a build after that is still about a factor 4 slower than running gometalinter for a very trivial main.go, to surface the same error.\nLinters can also be used to catch things that don't matter at all to a compiler, nor require a compiler to have run to transform the source code. They can even catch things that the compiler would get upset about. Forcing serialisation of compiler then linters, though in this case would result in the most correct error reporting, slows things down.. > @daenney Thanks for the detailed analysis. Note that the Go extension already uses go build -i on non main packages. Does that change your stand?\nI'm not quite sure I follow. So as long as I'm not working on something that's declared as package main vscode-go would invoke build with -i? Lets say I'm hacking on Moby and change anything in https://github.com/moby/moby/tree/master/cmd/dockerd. That would still get a regular go build? What's the reason for not running with -i by default?\nMy reason for opening up this ticket is that I wanted a way to try and deduplicate the linter errors. I think --aggregate gets us a long way there. It's already reduced the noise by 50% and it is reasonable to have that as a default flag since it doesn't change any part of the workflow. At this point, even though there's still a few duplicates, it gets in the way much less while still providing valuable feedback. As far as I'm concerned that resolves this issue.\nI understand the reasoning behind \"don't run linters if it doesn't compile\" but I don't think that's a workflow that should be enforced, though having the option to do so or withhold the errors at first seems entirely reasonable. Linters can add value regardless of if the code is a valid construct according to the compiler; in this particular case they do an equally good yet far quicker job of finding the same problem. For me that improves the speed I can iterate on a code base, which I find valuable. I think this is mostly a matter of personal preference and therefor something that should be left up to the end user.. Thanks for all the work on this @ramya-rao-a! \ud83d\udcaf. Is there any way to tell VS Code to pass -source to gocode? I don't have a big GOPATH and not having completion for external packages is proving to be rather frustrating.. Given that the former is already what's used I doubt that's the solution :no_mouth:.. ",
    "vahpetr": "\nDo you happen to run gofmt as part of save?\n\nI use default configuration\nI don't want to use tab indent style.\nvscode-go must using global .editorconfig settings (4 space). ",
    "bradleyfalzon": "Personally, I'd recommend running go build or similar, before running any linters. The errors you are seeing are from the linter's use of the https://golang.org/pkg/go/ packages - these aren't compiler errors, they are similar, but not exactly the same.\nI'm not sure how this plugin works, but I'd recommend the best approach to only run linters if the Go compiler was able to build the program.. > @bradleyfalzon Skipping linting when there are build errors is tracked in #600\nAh excellent.\n\nRegardless of this, it is still useful to use --aggregate on gometalinter\n\nYes, agreed, I was more referring to Still a few duplicates b/c of how those linters are outputting/wrapping the error.\nSorry I didn't mean to appear rude at all in any of my comments, I was more saying once the compiler errors are removed in #600, I don't believe any linter should share the exact same error text.\nBut this all sounds good to me, I've heard nothing but great things from this plugin \ud83d\udc4d. ",
    "grobie": "Thanks @ramya-rao-a! Should I create another issue to run go-metalinter only on the changed file/package instead of the whole repository? Saving a file a few times in succession can cause a similar amount of running processes and a similar situation of a stalled system.. ",
    "roylee17": "Is there a way to TOGGLE the linter, or manually run the linter in vs code?\nCurrently, I have to manually modify the configs to achieve this.\nThanks. @ramya-rao-a Yes, is there an command that I can run manually, and/or create a keybinding for that command?. ",
    "xDShot": "Still doesn't work.. Closing. Turns out it was because of wrong golang installation.. ",
    "RobGraham": "After looking around and echo'ing my $PATH I noticed that go was installed in /usr/local/go/bin while my exported PATH referring to /usr/local/binand some other matches. I just added the exact path to my .bash_profile and everything is working now. Thanks for the feedback. . I've noticed this since I started working with Go in vs code about a week ago and always questioned whether or not the auto complete was meant to complete with the parameters but it's not. Glad I'm not the only one.\n\nAfter using tab or enter:\n\nUPADTE\nInterestingly I happened to get it to work but i had to manually open the parens and type in a matching parameter value, in this case \"w\":\n\nAfter tabbing:\n\nWhile this works, it'd be nice to not have to go the extra mile. Or if this is expected behavior and you don't want to not interfere with someones intentions if they wanted a different signature, maybe it's possible to double tab for it to autocomplete the entire function with parameters.\n. @ramya-rao-a thanks so much! Sorry for intruding in an unrelated topic . ",
    "OzqurYalcin": "I use vscode in osx. Please follow the steps:\n- Run vscode\n- Create main.go file in a new workspace\n- Copy & Paste the following code\nfunc main() {\n    var data = map[string]map[string]string{}\n    data[\"a\"][\"w\"] = \"x\"\n    data[\"b\"][\"w\"] = \"x\"\n    data[\"c\"][\"w\"] = \"x\"\n    fmt.Println(data)\n}\n- Finally save file.\nWhen you saved file, vscode auto-indents the code, you know..\nThen if there is an error, it will be red underlined, right ?\nBut there is an issue in vscode-go because it did not underline the text with red color.\nWhen you tried \"go run main.go\" in integrated terminal, it gives you an error like that \"panic: assignment to entry in nil map\" for the above code.\nBecause the zero value for map types is nil. It is not yet initialized in Golang. You cannot index nil maps..\nTry the following code in vscode-go\nfunc main() {\n    var data = map[string]map[int]string{}\n    data[\"a\"][\"w\"] = \"x\"\n    data[\"b\"][\"w\"] = \"x\"\n    data[\"c\"][\"w\"] = \"x\"\n    fmt.Println(data)\n}\nWhen you saved the file, you can see the red underlined codes.\nBecause i changed the variable type\nmap[string]map[string]string{}\nto\nmap[string]map[int]string{}\nFor first one, vscode-go tells you there is no issue in the code ! but there is it.\nThen for second one vscode-go tells you \"cannot convert 'w' to type int\" right ?\nI think, it must give a compile time error for both of them like that \"cannot convert 'nil' to type int (or string)\". Okey, i got it.\nAs you say attempting to index it like data[\"a\"][\"w\"] is a runtime panic, not a compile time error.\nThank you so much for your clarification.. ",
    "vapourismo": "Which value should you set, if you want it to be disabled? null or \"nothing\"?. Okay, I added these options as workspace, package and off.\n~~There are those two failed tests in the CI which only occur for macOS. Seems to be something with gometalinter. They seem odd to me, since I didn't modify how the linter is invoked.~~. Nevermind, it is just the tip line that is failing. And it seems unrelated to this PR.. How about this? Original behavior with package should be the same, I think. . go test -run ! ./.. works, sort of. It also checks the packages, so there are duplicates from go build. \nInterestingly, it also checks packages that do not contain tests. So theoretically go build and go test can be merged, in the check function.. Latest commit prevents duplicates.. I can't reliably review it right now, sorry.. I've had the exact same thought, but I've come to the conclusion that it doesn't matter. If you set it to build the entire workspace, you should expect that to happen. In case somebody uses a big workspace, they can set it to build only the current package in the workspace-local settings.\nAdditionally, even though the directory traversal uses synchronous functions, it is way faster than the lint/vet/etc jobs. It appears that the extension accumulates the results of all \"check\"-Promises anyway, so delaying some for a couple milliseconds doesn't really hurt.\nI understand and agree that this is not a particularly smart solution, but it should work for most use cases.\n\nAlso, I'd much rather prefer a better way to compile test files from Go itself.\n\nNot sure, if that is going to happen. The only smart alternative is to run go test -run ! ./..., which will check the test files, but won't run any  since they don't match the pattern. Could you work with that?. ",
    "inancgumus": "Do you mean this? If so, I'll try it.\nWhat do you think about why this happens when I add a build tag? Even because of the lang-server. Because, it works w/out build tags.. @ramya-rao-a I couldn't see the absorbed changes from gogetdoc?. @ramya-rao-a That's perfect, thanks!. Take a look at this simple program.\nIf you put a breakpoint on the lines that I've commented below as NEVER HIT. Delve never hits.\nHowever, when you put it to the other lines as commented as HITS, then it hits those lines.\nYou may having a problem like this. Let you know...\ngo\npackage main // NEVER HITS\n// NEVER HITS\nimport (  // NEVER HITS\n    \"fmt\"  // NEVER HITS\n) // NEVER HITS\n// NEVER HITS\nfunc main() { // HITS\n    var ( // NEVER HITS\n        sum int // HITS\n        i   = 1 // HITS\n    ) // NEVER HITS\n // NEVER HITS\n    fmt.Println(sum, i) // HITS\n}\n. ",
    "tayhalla": "Fwiw - I had the GoToDef and click to def fail for me randomly. I followed all these other issues and nothing resolved it. \nFinally, I realized homebrew updated my go version doing a large update. The tools VSCode installed during the initial use of vscode-go were out of date. Going to the VSCode commands and running Go: Install Tools fixed everything for me. . ",
    "labregowski": "Hi. \n@tayhalla, sorry for my ignorance. I just installed VSC yesterday. How do I go to VSCode commands :D?\nThanks in advance. ",
    "otterley": "I support making this change as the default.  My out-of-the-box setup on a new Mac did not work with the latest versions (VS Code 1.29.0, Go extension 0.7, Golang 1.11.1) until I switched to gogetdoc.. ",
    "alanpadillachua": "when I run the command dlv debug main.go\nI get could not launch process: stub exited while attempting to connect: signal: segmentation fault\n. ",
    "fortytw2": "\ud83d\udc4b anyone get a chance to look at this yet?. I definitely meant gometalinter, whoops. Hmm, I definitely tested that this was working before sending the PR in, seemed ok for me. Have a new computer setup since then though, so I'll get my env set back up and verify (hopefully later this evening EST).. \nFinally got around to testing, (hello from Gophercon!), everything looks like it works ok for me without changes.. Awesome! \ud83d\ude04 . ",
    "xpqz": "This is still an issue. I need to kill all gocode processes every 5 minutes or so.\n. ",
    "boljen": "I assume that I'm experiencing the same issue.\nIt occurs with both gometalinter and golint. A restart is required to clear the problems from visual code.\nIf \"go.liveErrors\" is enabled, all linter problems are cleared and replaced with those problems caused by the live errors tool. Possibly a problem-matcher issue?\nUbuntu 16.04\nGo 1.8.3\nLatest tools installed (afaik). I got it all working again but I don't know why.\nCoverage didn't work even though it was enabled in the user settings.json file  and wasn't set in the workspace settings.json file. Setting it explicitly in the workspace settings.json file for some reason fixed both the error clearing issue as well as no coverage showing up in the editor.\nThe best explanation I can come up with is a corrupted cache of some sorts which got fixed by one of the following operations, or several of them in this order;\n\nChanged lintOnSave to \"workspace\" and back to \"package\" in the workspace settings.json (it was explicitly set to \"package\".) I also purposely introduced a typo here to see the effect but there wasn't a detectable effect.\nCreated a test file in a package I was working on. Noticed there wasn't any coverage so I enabled  \"go.coverOnSave\" in workspace settings.json. This was explicitly enabled in the user settings.json but not set in the workspace settings.json\n\nEnabling coverOnSave in the workspace settings fixed my issue.\nI then tried to reintroduce the issue by:\n\nRestarting visual code\nDisabling coverOnSave\nDeleting the test file (coverage still shows up in the editor, can't seem to clear it)\nps aux | grep go -- and then killing the processes\n\nyet I'm unable to replicate the issue.\nI should add that I sometimes had issues saving the file in visual code. I modify the file and save it using the accelerator (CTRL+S), but visual code still shows a save file dialog and I can only close the file after saving it through that dialog. Can't recall whether it are just \"Go\" files or other languages as well.  I'll post a comment if this happens again, or doesn't happen again. \"editor.formatOnSave\" is enabled inside the user settings.json. \nPerhaps both issues are related?\nI had the issue even when only the vscode-go extension was enabled, and when the issue was fixed, the only other enabled extension is vscode-protobuf.\nEDIT:\nI also had go.vetFlags: [\"-all\"] in the user settings.json.. The issue appears to be fixed by deleting the ~/.config/Code directory entirely. \nFirst I deleted the Cache, CachedData and Local Storage directories separately but that didn't fix the issue. I also deleted the extensions directory in .vscode but that didn't work.. ",
    "FryDay": "I have lintOnSave set to package. I'll try and get a gif to show you.. Yeah, it's mysteriously working for me again too. No idea what happened that caused it to start working as intended again, though.. @ramya-rao-a After updating VS Code, it's happening again. Here is a screenshot showing the issue. You can see I am clearly returning, but the error won't go away unless I close and reload VS Code.\n\nHere is my config:\n`{\n    \"editor.fontFamily\": \"Fira Code\",\n    \"editor.fontSize\": 17,\n    \"editor.fontLigatures\": true,\n\"go.useLanguageServer\": true,\n\"go.testOnSave\": true,\n\"go.lintOnSave\": \"package\",\n\"go.coverOnSave\": true,\n\"workbench.colorTheme\": \"Spacemacs - dark\",\n\n \"settings.cycle\": [\n    {\n        \"id\": \"minimap\", // must be unique\n        \"overrideWorkspaceSettings\": false,\n        \"values\": [\n            {\n                \"editor.minimap.enabled\": false\n            },\n            {\n                \"editor.minimap.enabled\": true\n            }\n        ]\n    }\n],\n\"editor.minimap.enabled\": false,\n\"workbench.iconTheme\": \"vscode-icons\"`. Quick update, it does appear that turning off coverOnSave fixes the issue, but I'd like to be able to keep it on.\n\nEdit: I can reproduce it reliably. I turn on coverOnSave and it won't clear, turn it off and it does. Tried flipping it on and off multiple times, always the same result.. ```\nFinished running tool: /home/jordan/go/bin/golint\nFinished running tool: /usr/bin/go build -i -o /tmp/go-code-check -tags \"\"\nFinished running tool: /usr/bin/go vet\n```. This just started happening to me too. It's horribly annoying.\n\"go.useLanguageServer\": true,\n\"go.testOnSave\": true,\n\"go.lintOnSave\": \"package\",\n\"go.coverOnSave\": true,\nAs far as I can tell it is caused by the language server. Turning it off seems to have stopped this from happening.. ",
    "posito": "@ramya-rao-a , I have the same issue. If I run the \njson\ngo.coverOnSave\": true,\nThe error is not clearing. \nHere is my config \njson\n{\n    \"editor.minimap.enabled\": false,\n    \"window.reopenFolders\": \"none\",\n    \"editor.formatOnSave\": true,\n    \"go.docsTool\": \"gogetdoc\",\n    \"go.buildOnSave\": true,\n    \"go.lintOnSave\": \"package\",\n    \"go.coverOnSave\": false,\n    \"go.formatTool\": \"goimports\",\n    \"go.vetOnSave\": true,\n    \"go.useDiffForFormatting\": false,\n    // \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"go.gopath\": \"/Users/posito/gopath\",\n    //  \"beautify.onSave\": [\"js\", \"html\", \"css\"],\n    \"go.lintTool\": \"golint\",\n    \"cSpell.userWords\": [\n        \"gitlab\",\n        \"robfig\",\n        \"structs\"   ],\n    \"workbench.sideBar.location\": \"left\",\n    \"window.zoomLevel\": 0,\n    \"workbench.colorTheme\": \"Visual Studio Light\"\n}\n. @ramya-rao-a i get  a end of central directory record signature not found. ",
    "jcbritobr": "Hi @ramya-rao-a . It worked with gogetdoc. Thank you. Maybe vscode-go should support this tool officialy. . ",
    "0rka": "Fixed the problem by adding %GOPATH%\\bin to %PATH% environment variable.. ",
    "DevNulPavel": "Good news everyone! Thanks! . ",
    "rmescandon": "Oh, so sorry.\nSeems that a go build executed from command line solved the problem. Not sure what happened, but for the first time the interface was not recognized. Now everything looks fine. Sorry for the inconvenience of taking your time.\nYou can close it.. ",
    "rpeshkov": "Yep, sure.. Hi @ramya-rao-a, I guess you wanted to mention @rpfister51 in previous comment :). @ramya-rao-a Yes, I have the latest version: 0.6.65. ",
    "pbrit": "@ramya-rao-a Any chances to get it reviewed? . ",
    "pschuegr": "Sorry, nothing else in the debug console with trace: \"verbose\". @ramya-rao-a Nothing, unfortunately.  I tested this on another machine and it seems to work fine, so it's definitely an environment thing.  I'll dig into it more - do you have any suggestions?\nI've confirmed that both machines are running Code 1.13.1, vscode-go 0.6.62, golang 1.8.3 darwin/amd64, and dlv 1.0.0-rc.1.\nEdit: Thought the mock-debug adapter had some useful information, but that turned out to be false.\nEdit2: I think there's something borked with my install - the package.json for the go extension points to ./out/src/debugAdapter/goDebug.js, which afaict doesn't exist.  I'll try re-installing.. Reinstalled and the debugAdapter directory showed up fine.  Thanks for your help.. ",
    "sedeki": "@ramya-rao-a \nUnfortunately, nothing shows when I begin typing. Also Ctrl+Shift+Space does nothing for me.\n(I'm on a Mac and also tried Cmd+Shift+Space.). Hmm, why don't I get that? Have you activated this somewhere in a settings file?. ",
    "beforeisleep": "It shows the correct GOPATH that is set in launch.json. It is also the same GOPATH in the workspace settings.\nI have no problems in running or debugging the program normally. This issue is only with the cursor \"debug test\" menu. Thank you for looking into this.. It fails because it cannot find dependencies. The \"(from $GOROOT)\" line in the error trace is pointing to a different directory.. $GOPATH, not $GOROOT. The $GOPATH in the error trace seems to point to $HOME/go/src.. The suggested change in settings.json, in fact, makes this problem go away.\nThanks for looking into this.. ",
    "atilkan": "I had the exact same issue. And this did not solve my problem.\nmaxOS Sierra\ngo version go1.8 darwin/amd64\nUpdate: I deleted files on github.com folder and bin folder and installed tools again. It worked this time. I guess update has an issue.. Thanks to you @ramya-rao-a . . ",
    "mattwilson1024": "Just had the same problem. The following steps fixed it for me (the third step seemed necessary for me in addition to the above suggestions):\n- Run Go: Install/Update Tools in VSCode\n- cd ~/go/bin\n- ./gocode close. ",
    "jaysonesmith": "I just ran through @mattwilson1024 's steps and I'm all set, also! Thanks!. ",
    "alexandrevez": "Can't reproduce the build failure. Let me know if you need something. NP @ramya-rao-a ; thanks to you!\nHave a nice week.\n. Hey,\nMy handle is @alexandrevez\nhttps://twitter.com/alexandrevez\nThanks!\n\nAlexandre V\u00e9zina\nOn Fri, Jul 28, 2017 at 6:17 PM, Ramya Rao notifications@github.com wrote:\n\nHey @alexandrevez https://github.com/alexandrevez\nWhat's your twitter handle? I want to thank you in\nhttps://twitter.com/mbanzon/status/891046317111345153\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/1059#issuecomment-318774933,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADQrHKo6t0RPb_xxzPXfzjczOQ509bZ6ks5sSl4FgaJpZM4OJu25\n.\n. Hey,\n\nMy handle is @alexandrevez\nhttps://twitter.com/alexandrevez\nThanks!\n\nAlexandre V\u00e9zina\nOn Fri, Jul 28, 2017 at 6:17 PM, Ramya Rao notifications@github.com wrote:\n\nHey @alexandrevez https://github.com/alexandrevez\nWhat's your twitter handle? I want to thank you in\nhttps://twitter.com/mbanzon/status/891046317111345153\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/1059#issuecomment-318774933,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADQrHKo6t0RPb_xxzPXfzjczOQ509bZ6ks5sSl4FgaJpZM4OJu25\n.\n. Not quite the same, but similar. I am using gb to manage my build : https://getgb.io/ and I open the whole gb project.\n\nI think this is not the best way to fix the problem, but understanding the source of the underscores would help. Do you know where it is coming from (and why)?\n. Fixed in next commit. You're right, it is cleaner to init the gutter in goCover.ts\nThe thing about calling from goMain.ts is that  I need an instance of vscode.ExtensionContext in order to access the absolute path of the images folder (gutter colors are actually SVGs rendered in the gutter) :\ngutterIconPath: ctx.asAbsolutePath('images/gutter-green.svg')\nor\ngutterIconPath: ctx.asAbsolutePath('images/gutter-red.svg')\nI did not find another way to access the vscode.ExtensionContext from goCover.ts (or any other file other than goMain.ts)\n. ",
    "xiaohui": "\nyeah, I had set go.formatOnSave on but I still make file.autosave off. \nyeah, it happened no matter what size of projects.. \n",
    "chaseadamsio": "I have had this issue too and I've noticed it happening when there's an error in my code. the goreturns has to be manually killed even after exiting code.. would it make sense to have this disabled by default and have a flag to enable? something like go.saveTestFileOnRun (alternatively to check if files.autoSave is onFocusChange)? . If the expected behavior is always save the file when you run the tests I think it makes sense. Personally I like having flags for anything I might want to disable, so that was the only reason I suggested it. I'll pick this up and submit a PR.  . \ud83d\udc4d . Thanks for the background! \nIs it a correct understanding that all four methods then should still perform the save operation and now that we're performing it in testAtCursor the check for editor.document.isDirty is also no longer required?. \ud83d\udc4d thanks! Will take a stab once I hear back about the two questions I had on the history comment (it's been a long time since I've used promises and this is my first typescript PR, so thanks for your patience) and re-submit.. ",
    "orcaman": "Happens to me as well. Makes vscode unusable for go. @ramya-rao-a I have updated my go version from 1.8x to 1.9x, re-installed all the tools (e.g. goimports etc.) and this seem to have solved the problem. ",
    "JeanMertz": "I do see the function interface inside the function parameters.\n\n. The same happens for the os package (any package that is outside of my current project, it seems):\n\nI disabled all plugins except for the Go plugin.\nHere's my config with the above screenshot (I played around with different settings, but nothing seems to work):\njson\n{\n  \"go.testOnSave\": true,\n  \"go.coverOnSave\": true,\n  \"go.coverageOptions\": \"showUncoveredCodeOnly\",\n  \"go.useCodeSnippetsOnFunctionSuggest\": true,\n  \"go.useLanguageServer\": true,\n  \"go.languageServerFlags\": [\n    \"-trace\",\n    \"-logfile\",\n    \"/tmp/lang.log\"\n  ],\n  \"go.formatTool\": \"goimports\",\n  \"go.autocompleteUnimportedPackages\": true,\n  \"go.gotoSymbol.includeImports\": true\n}. Alright, I found some other (unrelated) issue which mentioned running go get -u github.com/nsf/gocode, that indeed solved the problem for me. Not sure why, since I haven't updated Go on this machine (it's a new machine, and has had the latest version of Go from the start).. I'm not sure what solved this, but I re\u00efnstalled the package several times, removed all vendored packages, restarted vscode, used gocode close, go list all, and eventually it started working again.\nI'll close this, as I'm not sure if vscode-go was the cause.. I came here looking for the same functionality, Or, that is, looking for ways to have both gofmt -s and goimports run on save.\nI really don't like having to add imports manually (through typing, or the code actions), but when not using gofmt -s, I frequently run into CI errors that expect pushed code to be compliant with whatever gofmt makes of it (which makes sense).. That sounds awesome. Thanks.. ",
    "embano1": "Thx. Yeah, that was the first I checked :) (running v1.8.3). The code compiles fine, and VS Code accepts the function. It\u00b4s just that auto-complete does not work for this specific func... . Thx, this (almost) fixes it. The func is now recognised, however documentation and thus hinting is not.\n\n. Thank you. I did change the setting, without any difference.\nWhat it\u00b4s really strange:\nVSCode (with go version go1.8.3 darwin/amd64) recognises the Shutdown() function, even that the ctx argument is missing. However, if I right-click \"Go to definition\" it still says \"No definition found...\". Even more strange: if I open the source code for the Server struct (right-click-> go to def) and then search for Shutdown() or close(), there is no method? That\u00b4s why it can\u00b4t find it. However, I don\u00b4t get why is that? VSCode uses my go version (and thus stdblib), and recognises the Shutdown() function - but won\u00b4t find a definition? Like it\u00b4s pointing to an old source code for definitions, but during compile time it actually takes the right stdlib...super weird.\n\n. OK, searching the issues for entries about \"godef\" and \"stdlib\" helped me fixing the issue.\nSteps I took (not sure if all were necessary):\n\nclose VSCode and gocode close\ngo get -u github.com/rogpeppe/godef\ngo get -u github.com/nsf/gocode (again, just to make sure)\nrevert back to \"go.docsTool\": \"godoc\" (gogetdoc still doesn\u00b4t work)\n\nThx @ramya-rao-a for your help!. Sorry, was travelling.\n\u21b3 go env\nGOARCH=\"amd64\"\nGOBIN=\"/Users/mgasch/GO/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/mgasch/GO\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.8.3/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.8.3/libexec/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/15/5y30b63d1vb0nk7r6pv_xn400000gp/T/go-build206403948=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nPKG_CONFIG=\"pkg-config\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\n\u21b3 ls -al which go\nlrwxr-xr-x  1 mgasch  admin  25 14 Jun 11:15 /usr/local/bin/go -> ../Cellar/go/1.8.3/bin/go. Thank you for your quick help.. ",
    "christoph-k": "I don't know why but after another Ubuntu and Go-Tools Update it works again. . ",
    "abs-zero": "It is weird that I can't reproduce this error in any way anymore. I guess it was a problem with my machine. A reboot might have fixed it. Should I close this?. ",
    "tohjustin": "Hi @ramya-rao-a , is this issue still available? \nI can start working on making changes to https://github.com/ramya-rao-a/go-outline based on your most recent feedback in https://github.com/Microsoft/vscode-go/pull/1116#discussion_r133992917.. Managed to get https://github.com/mdempsky/gocode/pull/91 merged, users shouldn't be getting autocomplete results in such cases anymore. \ud83d\ude05. > You can use the isModSupported function to figure out if the current workspace supports modules or not. Based on this, you can then decide whether to use bingo or not.\nJust want to clarify a little more on this, if the user configured their vscode settings to useLanguageServer: 'bingo' and\n if isModSupported returns true, we'll use bingo as usual\n if isModSupported returns false, we display a message notifying the user that bingo is used since it only supports Go Module based projects & the current project/workspace isn't --> treat the session as useLanguageServer: 'none'?. Not sure if there's a better place to check isModSupported when using the bingo language server =S\n\nAfter adding isModSupported() inside checkLanguageServer, the function is now asynchronous & async/await statements were added.\nAnother alternative I can think of is to place the isModSupported checks in provideDocumentFormattingEdits & provideCompletionItem instead (possibly affect performance?).. > @tohjustin The README.md would also need an update. There is a section there on the language server usage\n\nReworded quite a bit of the language server section (also ran it through Grammarly), please do let me know if you think it still needs more work \ud83d\ude05 . Hi @ramya-rao-a , I saw the issue opened by @stamblerre in https://github.com/saibing/bingo/issues/13 & seems like the plan is to focus on golsp development.\nAny updates on this PR? \ud83d\ude05 . @ramya-rao-a Really appreciate the update! \nYup the the go.alternateTools setting is working as intended. Got bingo to work with the extension using the following settings (also needed go.useLanguageServer set as true):\n\"go.alternateTools\": {\n    \"go-langserver\": \"bingo\",\n  },\n  \"go.languageServerExperimentalFeatures\": {\n    \"format\": true,\n    \"autoComplete\": true\n  },\n  \"go.useLanguageServer\": true\nI guess I'll leave it up to you to close this PR or put it on hold until the new Go language server is ready. \ud83d\udc4d . Hi @ramya-rao-a, I've created a separate PR here (https://github.com/ramya-rao-a/go-outline/pull/7) to push this fix forward.. @anjmao Thanks for the heads up! Kudos to @saibing for adding support for non-go module projects in such a short period of time \ud83d\ude05\n@ramya-rao-a I guess I can remove the isModSupported checks?. Ah missed that out, will add the check in the following patch.. Done. Done. Done. ",
    "seanpfeifer": "Test case\n```go\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Printf(\"%s\")\n}\n``\nAssign a value to \"go.vetFlags\", such as:\"go.vetFlags\": [\"-all\", \"-shadow\"]`\nExpected\nmissing argument for Printf(\"%s\"): format reads arg 1, have only 0 args\nActual\nNo vet information reported.. ",
    "NobbZ": "I will check later this day if there are other instances open or phantom processes. . I chechked it, there are no other instances running. I did reboot to make sure.\nVersion info:\nVersion 1.13.1\nCommit 379d2efb5539b09112c793d3d9a413017d736f89\nDate 2017-06-14T18:18:03.540Z\nShell 1.6.6\nRenderer 56.0.2924.87\nNode 7.4.0\nGo plugin 0.6.62.\ngo itself: go version go1.8.3 linux/amd64\nTo make sure it wasn't something in my shell I also tried to export the new GOPATH and I tried bash and and zsh.\n. Its the wrong, old GOPATH as I set it in my .zshrc instead of the current one. go.gopath was unset for the experiments, go.toolsPath is set to my regular GOPATH, to avoid cluttering this minified workspace. But removing it wont change anything, I have tried that too.\nAlso I did some further testing:\nI added export GOFAST=test to my .zshrc, saved it and did not restart my terminal but opened VS-Code from a terminal which hadn't sourced the altered .zshrc. Still, VS-Code knew that variable and the \u201ccorrect\u201d value, so it seems, that vscode sources my .zshrc for some reason\u2026. Actually nothing ;)\nMy package manager installed code as visual-studio-code, I just substituted above for beeing conform to the rest of the world ;)\nplain\n$ which visual-studio-code\n/usr/bin/visual-studio-code\n. Its a community ebuild for gentoo. There are no official builds available.\nIt does only contain a single line exec /opt/visual-studio-code/code.\nThe started executable is ELF 64-bit LSB executable according to file.\nSince I'm only connected via SSH to my home-PC right now, I will check in about 8 to 12 hours if the problem persists when I do start that executable directly.. Thank you for your help, I'll file an issue there.. FYI: GOPATH=$(pwd)/go /opt/visual-studio-code/bin/code works fine.. Do you know about an upstream issue that addresses this? If so I'd like to track it.. ",
    "myitcv": "Sure thing \ud83d\udc4d . Might also be worth testing the ./node_modules/.bin/vsce package step in the CI with \"known\" versions of vsce?. @ramya-rao-a - my apologies. I accidentally muted the email thread in Gmail \ud83d\udc4e \nI've actually realised my suggestion is not something that belongs within vscode-go - more an issue for builders of the package. So nothing to do here :)\n. ",
    "rpfister51": "I had a similar problem which I documented in issue 1138.  @ramya-rao-a shared a link to an update there which worked for me.  @shayzu , you might want to try it.. I had a similar problem which I documented in issue 1138.  @ramya-rao-a shared a link to an update there which worked for me.  @shayzu , you might want to try it.. This seems similar to a problem I reported in issue 1138.  @ramya-rao-a shared a link to an update there which solved the problem for me.  @ssadok , you might want to try it.. This seems similar to a problem I reported in issue 1138.  @ramya-rao-a shared a link to an update there which solved the problem for me.  @ssadok , you might want to try it.. Hi @ilevine, no other notice of this problem but yours.  I did figure out why the FROM golang:1.6 no longer works.  There was a breaking change which is discussed in issue 936 that is causing this problem.  Go 1.7 or higher is now required to support the current version of Delve.. Applying the change suggested by ramya solved this problem for me.  Remote debugging to a golang process within a docker container is now no longer frozen.  The icons for step over, step into and step out are now active after beginning a debug session.  I have successfully used the step over icon and been able to inspect state as I step through my code.\nI did bump into a new problem though. When stepping into some code in the golang standard library the debugger threw an error.  The path to the golang source was not valid.  I'll close this issue and write the new problem as a separate issue.. Though I'm on Windows I had a similar problem which I reported in issue 1138. @ramya-rao-a gave a link to an update there which solved my problem.  @cheptsov, you might want to try it.. Though I'm on Windows I had a similar problem which I reported in issue 1138. @ramya-rao-a gave a link to an update there which solved my problem.  @cheptsov, you might want to try it.. Hi @ramya-rao-a, it looks like that fixed it!  I stepped repeatedly with no errors.  I'll mark this as closed.  Thanks for your help. \nI do have a question.  Others where I work are also interested in remote debugging and see these same problems.  I assume these changes will at some point in the future be in a mainline version that can be downloaded from the VS Code website. Do you know when that will be or what version that will be?\nThanks again.. ",
    "lansman": "Have the same issue.\nSimpliest project\n```\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Print(\"enter a number: \")\n    var input float64\n    fmt.Scanf(\"%f\", &input)\noutput := input * 2\nfmt.Println(output)\n\n}\n```\nStart it by F5 or ctrl+F5, enter number 123, hit Enter, got\nTypeError: Cannot read property 'currentGoroutine' of null\n    at GoDebugSession.evaluateRequest (C:\\Users\\doc\\.vscode\\extensions\\lukehoban.go-0.6.62\\out\\src\\debugAdapter\\goDebug.js:668:45)\n    at GoDebugSession.DebugSession.dispatchRequest (C:\\Users\\doc\\.vscode\\extensions\\lukehoban.go-0.6.62\\node_modules\\vscode-debugadapter\\lib\\debugSession.js:430:22)\n    at GoDebugSession.ProtocolServer._handleData (C:\\Users\\doc\\.vscode\\extensions\\lukehoban.go-0.6.62\\node_modules\\vscode-debugadapter\\lib\\protocol.js:104:38)\n    at Socket.<anonymous> (C:\\Users\\doc\\.vscode\\extensions\\lukehoban.go-0.6.62\\node_modules\\vscode-debugadapter\\lib\\protocol.js:24:60)\n    at emitOne (events.js:96:13)\n    at Socket.emit (events.js:188:7)\n    at readableAddChunk (_stream_readable.js:176:18)\n    at Socket.Readable.push (_stream_readable.js:134:10)\n    at Pipe.onread (net.js:551:20)\nVSCode Version 1.13.1\nGo plugin by lukehoban 0.6.62\nGo 1.8.3 windows/amd64\nWindows 10 x64\n. Still have the issue even on 0.6.63 (didnt use workaround)\n\n. The problem persists with or without launch.json. ",
    "realityexists": "That workaround works - thanks a lot!. I can confirm my original issue is fixed in 0.6.63 - thanks!. ",
    "sparrc": ".. ",
    "doxxx": "I am unable to reproduce this with gogetdoc configured as the doc tool. When I hover over buf in the example, I see this:\n\nIt appears the tooltip is showing the declarationLine returned by gogetdoc. Is this correct?. However, if I open up stuff_test.go and invoke the Go: Test Package action, the go test output contains the correct source file link:\n```\nRunning tool: C:\\Go\\bin\\go.exe test -short -coverprofile=C:\\Users\\GORDON~1.TYL\\AppData\\Local\\Temp\\go-code-cover -timeout 30s gotestbug\\stuff\n--- FAIL: TestDoStuff (0.00s)\n    c:\\Users\\gordon.tyler\\go\\src\\gotestbug\\stuff\\stuff_test.go:10: oh noes!\nFAIL\ncoverage: 100.0% of statements\nFAIL    gotestbug/stuff 0.067s\nError: Tests failed.\n``. The FAIL line following the error has a package path which could be used to resolve the file correctly. But that would mean a more complicated parsing setup since you can\u2019t just recognize file paths on a per line basis. . I\u2019ll take a look at the code. \ud83d\udc4d. It looks likego testitself buffers all the failures for a package and outputs them in one chunk per package, so doing a similar kind of buffering in thegoTest` function won't hurt. That should allow us to buffer output until a package FAIL line is encountered and then step back through the buffered output to alter the file paths and then emit the whole block to the output channel.. Do you have any particularly strong feeling about emitting fully-qualified paths? I notice that relative paths in the go build output in a terminal are automatically linked by VSCode. I find relative paths easier to read.. Alas, relative paths are not linked in the output channel.. @ramya-rao-a Is there anything else needed here?. Yeah, you're right. It's not easy to detect whether the cursor is inside a multi-line backtick string without an AST of the file.. It's not clear to me whether I need to wrap the cancel in a try/finally so that the dispose will always be called. I don't know how closely vscode's implementation of CancellationTokenSource mirrors that of .NET's.. > Are you talking about the case that one of the cancel event handlers might throw an exception and so the dispose won't be called?\nYes.. #1788 only appears to have fixed this when completing variables of type func. When completing the name of a standalone function, it completes with the parameter list.\nFor example:\n```go\nfunc HandleRequest(w http.ResponseWriter, r *http.Request) {\n}\nfunc Register(r mux.Router, jm job.Manager) {\n    r = r.PathPrefix(\"/api/v1\").Subrouter()\n    r.HandleFunc(\"/\", HandleReqCURSOR)\n}\n```\nWhen I invoke completion at the marked cursor position, it completes to:\n```go\nfunc HandleRequest(w http.ResponseWriter, r *http.Request) {\n}\nfunc Register(r mux.Router, jm job.Manager) {\n    r = r.PathPrefix(\"/api/v1\").Subrouter()\n    r.HandleFunc(\"/\", HandleRequest(w, r))\n}\n```\nHowever, if I start with this instead:\ngo\nfunc Register(r *mux.Router, jm *job.Manager) {\n    r = r.PathPrefix(\"/api/v1\").Subrouter()\n    handleRequest := func(w http.ResponseWriter, r *http.Request) {}\n    r.HandleFunc(\"/\", handleReq***CURSOR***)\n}\nCompletion results in the following:\ngo\nfunc Register(r *mux.Router, jm *job.Manager) {\n    r = r.PathPrefix(\"/api/v1\").Subrouter()\n    handleRequest := func(w http.ResponseWriter, r *http.Request) {}\n    r.HandleFunc(\"/\", handleRequest)\n}\n. Quite possibly. I was hoping this could be smart enough to determine that by expected type signature.\nPerhaps I should just disable this option in the extension. The popup help for function parameters is fairly reliable now, so for me there's less need for expanding the parameter list into the file.. #1779 does not appear to be fully fixed. I tried with go.useCodeSnippetsOnFunctionSuggestWithoutType set to true. Variables of func type are completed to just the variable name, but full functions are completed with their parameter list as well.. #1782: I still get Go core packages suggested before my current workspace's packages. E.g. I have a package called git.mycompany.com/project/repo/internal/importer and when I type imp in another package I get suggestions in this order:\n\nimport (keyword)\ngo/importer\ngit.mycompany.com/project/repo/internal/importer\ngolang.org/x/tools/refactor/importgraph\n\n1769 works for me. I had actually noticed this bug yesterday, using the current release version of the extension. \ud83d\udc4d\n1739 works for me.\nI can also confirm the debug binary cleanup works for me on Windows as well.. @marwan-at-work I suspected as much but wanted to mention it just to be sure. Thanks!. I just tested this out and with regards to your comment, I get the same results except:\n\nSignature help works\nWorkspace Symbol Search works\nFind References works but suffers from the same problem as guru on Windows: searching for references of a symbol at the definition site of the symbol only finds references in the same package but searching for references from a usage site of the symbol outside of its package finds all references in all packages.\n. AFAIK, it's an unfortunate side-effect of using external processes to get docs. Launching processes on Windows is not as fast as Linux, and the process has to then parse the file, find the symbol, find the original definition site of the symbol, parse that file, and then return the doc string.\n\nUsing the Go Language Server speeds this up a lot, but it is also unfortunately rather unstable and uses egregious amounts of memory.\n. Can you explain in more detail what you mean by \"Go Language Server doesn't work\"? What have you tried? What errors do you see?. Do you have \"go.useLanguageServer\": true in your settings.json?. It's quite possible that however you're normally launching VSCode is not including the environment variables that are available from a terminal.. What do you get when you run the Go: Current GOPATH command in VSCode?. Where/how do you set GOPATH in your env?. I'm wondering if your desktop environment includes those variables, or are they only loaded by your shell when you open a terminal window?. All I can say is that the environment from which VSCode is being executed does not include those vars. Your desktop GUI environment probably does not read your zsh config. You need to figure out how to set env vars for your desktop GUI environment.. Yes. It removes the elements without allocating a new array.. I've fixed this by emitting any remaining lines at the end of the test output. If the regex doesn't match because the go test output has changed, this should emit all the results at the end. It's not ideal since none of the results will be visible until all of the tests have finished, but there's not much else I can do.. Fixed!. .... That's a very good point. :). Thanks, good catch!. ",
    "markphelps": "Same issue:\n Code: Version 1.14.1\n VS-Go: 0.6.62\n* go1.8.3 darwin/amd64\nHere's a log I got from Help -> Toggle Developer Tools -> Console\nI got the same error when running: $ gorename -from '\"github.com/markphelps/optional\".OptionalString' -to String on the command line so I don't think it's an issue with VS-Code or VS-Code-Go.\nAfter doing some googling I came across this post on the golang-nuts email list.\ntl;dr: Run $ go get -u golang.org/x/tools/cmd/gorename to update gorename to the latest version or re-install\nAfter I did that it worked on the command line and in VS-Code\n. ",
    "Ashiroq": "Hi, I'm new here. I gave it a shot, and it seems to be working. Preparing my PR.. I sent you an invitation to collaborators.. ",
    "llife09": "@ramya-rao-a \n1. During the debugging process, creating a new breakpoint will make the original breakpoints become 'unverified breakpoint'.\n2. During the debugging process, delete the breakpoint was not work.\nThese issues are caused by two reasons:\n1. In the function setBreakPointsRequest, the newBreakpoints callback was at the wrong place.\n2. On the window platform, the 'args.source.path' uses different separator ('\\', '/') for first call and other calls.. That was not necesary.  I leave it the same.. ",
    "firelizzard18": "I'm having trouble reproducing this, even with my original scenario. I guess close it for now. I'll reopen or open a new issue if I'm able to reproduce it.. @mvrhov Do you normally want your executables to be named \u2018debug\u2019?\nEvery other IDE is designed for other languages. Go does things differently. For example, the convention of every other language is to put artifacts in their own folder. Go only generates one artifact (if you ignore the pkg folder) and it puts it in the current directory. Another example, the accepted convention for production builds is to use go install to install the artifact to the go bin folder, which you can add to your path. Not to mention that building go is stupid simple and stupid fast.\nIn summary, Go\u2019s philosophy and tooling is radically different from essentially every other language, so it\u2019s not a terribly valid comparison.\nPlus VSCode isn\u2019t an IDE in my book. A development environment, yes. But modular rather than \u2018integrated\u2019 (aka monolithic and bloated).. You could set up a build task that will run go build ./your/exe/package, which you could then run with Ctrl+Shift+B or Cmd+Shift+B, followed by Return.. This is the project I'm debugging: https://gitlab.com/firelizzard/bake. It's a folder that is a main package.. They are in different folders:\n* ~/path/to/workspace\n  * src/other/project\n  * util/bake/cmd/bake\n% dlv debug ../../../util/bake/cmd/bake\ngo: directory ../../../util/bake/cmd/bake outside available modules\nexit status 1\n% dlv debug ~/path/to/workspace/util/bake/cmd/bake\ngo: directory ../../../util/bake/cmd/bake outside available modules\nexit status 1\nThe error message I'm getting is rather odd, but I guess the core issue is that dlv doesn't handle this kind of scenario? Looks like dlv has a --wd flag. Is there a way to set the value of this in launch.json?\nIf possible, I would think a fix for this issue would be modifying vscode-go to pass cwd as --wd to dlv, while not actually changing the current working directory.. If I run dlv debug --wd ../../../../src/other/project from within ${workspaceFolder}/cmd/bake, I am able to debug.. ```shell\nfails\ndlv debug --headless=true --listen=127.0.0.1:PORT --api-version=2 --wd=~/path/to/workspace/src/other/project\nworks\ndlv debug --headless=true --listen=127.0.0.1:PORT --api-version=2 --wd=../../../../src/other/project\nworks\ndlv debug --headless=true --listen=127.0.0.1:PORT --api-version=2 --wd=/Users/me/path/to/workspace/src/other/project\n```\nI don't see anything unexpected. No symlinks involved. dlv debug --wd=~/path/to/workspace/src/other/project works when I run it from Terminal. It seems that dlv breaks when vscode-go sends it a path starting with ~/. Easy to work around, but still rather perplexing.\nWith cwd set to ~/path/to/workspace/src/other/project:\nVerbose logs are written to:\n/var/folders/vy/7b8vfhcx2v7036h99kzs188h0000gn/T/vscode-go-debug.txt\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /path/to/go\nCurrent working directory: /Users/me/path/to/workspace/util/bake/cmd/bake\nRunning: /path/to/go/bin/dlv debug --headless=true --listen=127.0.0.1:37689 --api-version=2 --wd=~/path/to/workspace/src/other/project\nAPI server listening at: 127.0.0.1:37689\ncould not launch process: fork/exec /Library/Developer/CommandLineTools/Library/PrivateFrameworks/LLDB.framework/Versions/A/Resources/debugserver: no such file or directory\nProcess exiting with code: 1\nSending TerminatedEvent as delve is closed\nWith cwd set to ../../../../src/base/node:\nVerbose logs are written to:\n/var/folders/vy/7b8vfhcx2v7036h99kzs188h0000gn/T/vscode-go-debug.txt\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /path/to/go\nCurrent working directory: /Users/me/path/to/workspace/util/bake/cmd/bake\nRunning: /path/to/go/bin/dlv debug --headless=true --listen=127.0.0.1:5861 --api-version=2 --wd=../../../../src/other/project\nAPI server listening at: 127.0.0.1:5861\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\ncontinue state {\"Running\":false,\"Threads\":null,\"NextInProgress\":false,\"exited\":true,\"exitStatus\":0,\"When\":\"\"}\nTerminatedEvent\nDisconnectRequest\nHaltRequest\nFailed to halt - Process 38151 has exited with status 0\nDisconnectRequest to parent\nDisconnectResponse\nWith cwd set to /Users/me/path/to/workspace/src/other/project:\nVerbose logs are written to:\n/var/folders/vy/7b8vfhcx2v7036h99kzs188h0000gn/T/vscode-go-debug.txt\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /path/to/go\nCurrent working directory: /Users/me/path/to/workspace/util/bake/cmd/bake\nRunning: /path/to/go/bin/dlv debug --headless=true --listen=127.0.0.1:41803 --api-version=2 --wd=/Users/me/path/to/workspace/src/other/project\nAPI server listening at: 127.0.0.1:41803\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\ncontinue state {\"Running\":false,\"Threads\":null,\"NextInProgress\":false,\"exited\":true,\"exitStatus\":0,\"When\":\"\"}\nTerminatedEvent\nDisconnectRequest\nHaltRequest\nFailed to halt - Process 38478 has exited with status 0\nDisconnectRequest to parent\nDisconnectResponse. So this looks like a delve bug. For whatever reason, passing --wd=~/... along with --headless=true, --listen=127.0.0.1:$PORT, and --api-version=2 fails.\n% dlv debug --headless=true --listen=127.0.0.1:37689 --api-version=2 --wd=~/path/to/workspace/src/other/project\nAPI server listening at: 127.0.0.1:37689\ncould not launch process: fork/exec /Library/Developer/CommandLineTools/Library/PrivateFrameworks/LLDB.framework/Versions/A/Resources/debugserver: no such file or directory. ",
    "jakobhviid": "Hello. \nI mean formatting on save, but also explicit formatting.\nYes it is a regression that happened after the Visual Studio Code Update.\nIn the meantime though, i have imported the settings to another computer using the CodeSync Extension, and everything works as expected. I am closing this issue as i only have the problem on 2 of 3 computers. The problem must be localized.\nThank you for your time.\n. Thank you. Unfortunatly i still seem to have this problem. \nI: \n1. removed VS code, and all settings files from the file system. Removed all configuration and everything left.\n2. reinstalled VS code from scratch.\n3. verified all settings were gone.\n4. updated golang (just to make sure)\n5. installed the vscode-go extension\n6. restarted VS code.\n7. Changed a go file and saved (nothing happened)\n8. tried to force format using alt + shift +f (nothing happened)\n9. repeated 7 and 8 with the developer console open and nothing happened.\n10. after a while of doing nothing though i got this error: \n[Extension Host] (node:12592) DeprecationWarning: os.tmpDir() is deprecated. Use os.tmpdir() instead.\nh.logExtensionHostMessage @ extensionHost.ts:320\n(anonymous) @ extensionHost.ts:176\nemitTwo @ events.js:106\nemit @ events.js:191\nprocess.nextTick @ internal/child_process.js:752\n_combinedTickCallback @ internal/process/next_tick.js:67\n_tickCallback @ internal/process/next_tick.js:98\n\nI verified formatting shortcuts really are alt + shift + f (verified)\nChecked the go log and got this:\n\nFinished running tool: C:\\Users\\jakob\\Dropbox\\Projects\\Go\\bin\\golint.exe\nFinished running tool: C:\\Program Files\\Go\\bin\\go.exe vet\nFinished running tool: C:\\Program Files\\Go\\bin\\go.exe build -i -o C:\\Users\\jakob\\AppData\\Local\\Temp\\go-code-check -tags \"\"\n\nlost!\n\nIt is almost as if nothing ever runs when saving.\n. Hello again.\nyes the red squiggles are there.\nI tried putting in the setting \"go.useDiffForFormatting\": false, and the formatting seems to work now! \nDo you what what the cause is for this?\nFrom my perspective the issue is solved. Feel free to close the issue if you feel it isn't something that needs to be changed in the code.\nThank you so much for your help!. I am not really sure what the output of goreturns should be, but i get this: \n\ngoreturns -d main.go\ndiff main.go gofmt/main.go\n\nThe goreturns was NOT in the path. I have added it but with same results. (after a reboot of course)\nRegarding OS i am running windows 10 on version 1703, build 15063.413\nWith the setting you provided everything works fine, so i am leaving the issue at this point. \nThanks for your help!. ",
    "fyndor": "Yea this is super annoying and in my opinion makes writing go code impossible in VS Code.  One fix I have found is turning off auto save but then you lose a lot of instant gratification of the extension telling you when you are writing improper code etc.  I think this is a really important bug to fix.  \nEdit: By the way I don't have a large file (i.e. hello world sample) and it is still an issue.. ",
    "sascha-andres": "My go specific settings:\n// go extension\n  \"go.enableCodeLens\": {\n      \"references\": true,\n      \"runtest\": true\n  },\n    \"go.lintTool\": \"golint\",\n  \"go.lintOnSave\": \"package\",\n  \"go.useLanguageServer\": false,\n  \"go.buildOnSave\": \"package\",\n  \"go.vetOnSave\": \"off\",\n  \"go.buildTags\": \"\",\n  \"go.buildFlags\": [],\n  \"go.lintFlags\": [],\n  \"go.vetFlags\": [],\n  \"go.coverOnSave\": false,\n  \"go.useCodeSnippetsOnFunctionSuggest\": false,\n  \"go.formatOnSave\": true,\n  \"go.formatTool\": \"goimports\",\n  \"go.gocodeAutoBuild\": false,\nEdit: I even tried to switch to gofmt but the behavior is still reproducible.. @ramya-rao-a No I do not have any editor.format... set. My editor. settings:\n// editor settings\n  \"editor.fontFamily\": \"Fira Code\",\n  \"editor.fontSize\": 16,\n  \"editor.fontLigatures\": true,\n  \"editor.tabSize\": 2,\n  \"editor.useTabStops\": true,\n  \"editor.minimap.enabled\": true,. @ramya-rao-a Done this but nothing has changed. ",
    "fishnux": "That works, thanks!. ",
    "chmike": "Oops, the error is from the GO\u00a0TEST extension. When I disable this extension I don't see the error message when I start VSCode with your package. Sorry for the noise. . ",
    "mjbvz": "To my knowledge, the implementation provider uses most of the same code as the references provider. @jrieken Do you know why @ironcladlou may not be seeing the progress indicator in this case?. ",
    "rockmenjack": "Hi, guys\nHaving been digging around for a while but no luck on find my answer: Is finding implementation supported on vendor dir? Sometimes checking source code of vendor pkg is inevitable,  and when it comes to an interface type, there is no way to find its impelements.. Seems like its an issue of  the \"-scope\" option generated by vscode:\nERR Command failed: /home/rockmen1/Tools/bin/guru -scope _/home/rockmen1/Projects/go/Gru/... -json implements /home/rockmen1/Projects/go/Gru/src/gru/controllers/globals.go:#134\nguru: no packages specified for pointer analysis scope\n: Error: Command failed: /home/rockmen1/Tools/bin/guru -scope _/home/rockmen1/Projects/go/Gru/... -json implements /home/rockmen1/Projects/go/Gru/src/gru/controllers/globals.go:#134\nguru: no packages specified for pointer analysis scope\nIf I remove \"-scope\" guru will find all the imeplementation successfully.. no, it's in _/home/rockmen1/Projects/go/Gru/src/\n\nFrom 1.9 onwards the format /... exculdes vendor directory in most Go commands isnt it?\n\nNo, it seems not. I've also tried on go1.8.7, the same error was shown, and from this source [https://github.com/fatih/vim-go/issues/1532], seems guru will not exclude vendor dir.\n. I think \"-scope\" shall not be used in finding interface implementaions, when -scope is removed, guru is able to give out the correct result.. I used these two custom settings:\n\"go.inferGopath\": true,\n    \"go.toolsGopath\": \"~/Tools\",. > What is the folder that you have opened in VS Code?\nIt was opened at /home/rockmen1/playground/go/guru_test/\n\nCan you open /home/rockmen1/playground/go/guru_test/src/test_implementation and try again?\n\nIt works in this case. But src/test_implementation is not actually a formal GOPATH.\nI've tried open /home/rockmen1/playground/go/guru_test/src/ as well, did not work.. Tried with the provided extension, it worked!. ",
    "Ianwww": "I also notice that when I go from a test file to a non test file and then back i'm not returned to where I left of in the test file.  This has something to do with those test code links. Do you experience this? @willfaught. ",
    "uudashr": "Done cc @ramya-rao-a . On goPackages.ts\n```typescript\nexport function getNonVendorPackages(folderPath: string): Promise {\n    let goRuntimePath = getGoRuntimePath();\nif (!goRuntimePath) {\n    vscode.window.showInformationMessage('Cannot find \"go\" binary. Update PATH or GOROOT appropriately');\n    return Promise.resolve(null);\n}\nreturn new Promise<string[]>((resolve, reject) => {\n    const childProcess = cp.spawn(goRuntimePath, ['list', './...'], { cwd: folderPath });\n    let pkgs = [];\n    childProcess.stdout.on('data', (stdout) => {\n        pkgs = pkgs.concat(stdout.toString().split('\\n').filter(pkgPath => pkgPath && pkgPath.indexOf('/vendor/') === -1));\n    });\n\n    childProcess.on('close', (status) => {\n        return resolve(pkgs);\n    });\n});\n\n}\n```\nThe childProcess.stdout.on('data', (stdout) => {}) can be invoked more than once, and the output can be split like\ngithub.com/KurioApp/adops/vendor/github.com/mattes/migrate/testing\ngithub.com/KurioApp/adops/vendor/github.com/mattn/go-colorable\ngithub.com/KurioApp/adops/vendor/github.com/mattn/go-isatty\ngithub.com/KurioApp/adops/vendor/github.com/pmezard/go-difflib/difflib\ngithub.com/Kur\n---split---\nioApp/adops/vendor/github.com/shopspring/decimal\ngithub.com/KurioApp/adops/vendor/github.com/streadway/amqp\ngithub.com/KurioApp/adops/vendor/github.com/stretchr/objx\ngithub.com/KurioApp/adops/vendor/github.com/stretchr/testify\ngithub.com/KurioApp/adops/vendor/github.com/stretchr/testify/assert\nSo you have to concat all the output, then split by new line character.\n@ramya-rao-a do you want to me to make PR for the fix?\nAnd another one, when I run the test (on my local machine and travis) I always experiencing\n1) Go Extension Tests Test Completion on unimported packages:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\nIt caused by goListAll method on goPackages.ts.. it took more than 5000ms to execute\ntypescript\n// original source\ncp.spawn(goRuntimePath, ['list', '-f', '{{.Name}};{{.ImportPath}}', 'all'])\nBut if I added some options, it executed very fast\ntypescript\ncp.spawn(goRuntimePath, ['list', '-f', '{{.Name}};{{.ImportPath}}', 'all'], {env: {}}). @ramya-rao-a Timeout\n1) Go Extension Tests Test Completion on unimported packages:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\nYou are not experiencing this on your local machine or travis?\nSome in the env make the execution slower, not sure what and why.\nQuick workaround: we might not need the environment variable. Possible variable to pass in is GOROOT or GOPATH\n. @ramya-rao-a Timeout\n1) Go Extension Tests Test Completion on unimported packages:\n     Error: Timeout of 5000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.\nYou are not experiencing this on your local machine or travis?\nSome in the env make the execution slower, not sure what and why.\nQuick workaround: we might not need the environment variable. Possible variable to pass in is GOROOT or GOPATH\n. Done @ramya-rao-a . @ramya-rao-a your changes on the master?. Fixed on #1124 cc @ramya-rao-a . To print to stderr or stdout, you need to add-v to the go test command. Add test flag to the settings\njson\n{\n\"go.testFlags\": [\"-v\"]\n}. done @ramya-rao-a . cc @ramya-rao-a . Cc @ramya-rao-a . Should be fixed on godef side https://github.com/rogpeppe/godef/pull/70\nIssue can be closed now cc @ramya-rao-a . @ramya-rao-a check please. @ramya-rao-a latest changes should be able to show correct package name. Travis build failed on every linux machine\nXlib:  extension \"RANDR\" missing on display \":99.0\".\n{ errorCode: 'load',\n  moduleId: 'keytar',\n  neededBy: [ 'vs/platform/credentials/node/credentialsService' ],\n  detail: \n   Error: libsecret-1.so.0: cannot open shared object file: No such file or directory\n       at process.module.(anonymous function) [as dlopen] (ELECTRON_ASAR.js:173:20)\n       at Object.Module._extensions..node (module.js:598:18)\n       at Object.module.(anonymous function) [as .node] (ELECTRON_ASAR.js:173:20)\n       at Module.load (module.js:488:32)\n       at tryModuleLoad (module.js:447:12)\n       at Function.Module._load (module.js:439:3)\n       at Module.require (module.js:498:17)\n       at n (/home/travis/gopath/src/github.com/Microsoft/vscode-go/.vscode-test/VSCode-linux-x64/resources/app/out/vs/loader.js:4:10954)\n       at Object.<anonymous> (/home/travis/gopath/src/github.com/Microsoft/vscode-go/.vscode-test/VSCode-linux-x64/resources/app/node_modules/keytar/lib/keytar.js:1:169)\n       at Object.<anonymous> (/home/travis/gopath/src/github.com/Microsoft/vscode-go/.vscode-test/VSCode-linux-x64/resources/app/node_modules/keytar/lib/keytar.js:55:3) }\n@ramya-rao-a do you know anything about this?. @chrmarti thanks... works as expected. @ramya-rao-a please check. @ramya-rao-a Not sure, still investigating...\nFor sure because now listPackages() use getImportablePackages().\nLogic from old listPackages() not compatible with getImportablePackages()\nAnd it happens only on Go 1.5 and 1.6. You are welcome... thanks for fixing the test\n\nCool\nHave something in my mind.. something like create subscription to the currently running process if any\nSomething like Promise.race([goAllPackagesNoCache(), timeout(1000).then(() => cache)]). @ramya-rao-a for point number 2, roughly will be going to be like https://gist.github.com/uudashr/8fbacf975cb8140b962fc7fd3122ff22. I think this goes to Go grammar on the vscode, not Go extension. @ramya-rao-a maybe like this. @ramya-rao-a please check. @ramya-rao-a Tip version on Mac looks good on my machine. Re-run the travis build and all good.. There are two styles here\nWhen I use intellij or eclipse, the test are manually run.\nVSCode go, we can hook run test on save.\n\nIn my opinion, the first one will fit on the popup. I do care with the result whether it fail or succeed and willing to wait.\nThe second one, I don't want to wait, don't want to see the process, run it on background and notify me if there the test fail. Here we can put the cancel on the status bar.\nSo I think we can use both approach.. @ramya-rao-a please check. Also add package suggestion when the directory name formed by multiple words, ex:\n- go-expand-tilde -> tilde\n- go-spew -> spew\n- go-validator -> validator. @ramya-rao-a fs.stat() such a great idea\nAll work as expected. This is what going to be happen:\n1. Invalid tools installed\n2. Then autocompletion cannot works\n3. Prompt for update shown, but after that autocomplete still not working.\ncc @ramya-rao-a . @ramya-rao-a what is the minimum Go version supported by vscode-go?\nGo 1.5..?. @ramya-rao-a does it support less than 1.4? internal package applied since 1.4. If vscode-go support 1.5 above then I'll remove go version checking. Correct.. same package (or same sub package)\nI think getImportablePackages will return same result for the same project, haven't check more detail about this but vendor directory will be always the same, they will reside on the project directory. vendor package outside the project directory will be ignored. CMIIW. So valid for vendor. But agree we can move this to GoCompletionProvider\nAgree with keep things simple.\nI'm not very comfortable with existing filtering of this.pkgsList either, because filtering need to be done twice... see getMatchingPackages and getPackagePathFromLine. It fast but inefficient. Need to refactor later on.\nSo seems that getImportablePackages is no longer describe by it names, because not so importable until we consider the internal package.\nPosible cases:\n1. When user first time launch the vscode and start using completion, the suggestion will perfect, people assume it's first time load.\n2. When user first time create new package, and it's not shown on completion yet, people can assume it's not loaded yet because of first time the package created.\n4. But people who using a lot of packages.. and they switch between them, they will missed the internal package oftenly. The package was right there, not a new package.\nMy Case: for non-library project... I use a lot packages (sub packages) and don't want to share my code to other project, so I've plan to use internal package seems good solution to isolate the code. So switching package and look for internal package will be a huge cache missed.\nBut you may be right, need to test drive this. Maybe user won't realize the incomplete packages.. Or we can move the logic isAllowToImport to getImportablePackages and move the cache also to getImportablePackages so no more this.pkgsList.\nBut then the getImportablePackages will be not consistently returns values, first time use will be empty.\nI was thinking the GoCompletionProvider can missed... but getImportablePackages supposed to be not missed.. should always return value since packages are there.. @ramya-rao-a just understand with what you are saying.\nI move the filtering responsibility to getImportablePackages and still using cache.\nAnd the cache will catch up with latest updates.. @ramya-rao-a I was thinking to to load packages first time the vscode launch just to load the cache. Show on the bottom bar something like \"Indexing packages...\". User doesn't have to wait.. but they will realize if the completions hasn't show all the packages then it because the indexing is in progress.\nAnd is it possible for the autocompletion... replace or update the completion items while it shown? Seems not possible.. \"Load Packages\" message on bottom bar removed. Can you mention the projects?. Solved. Please update the gopkgs.. I see... unexpected. Sorting fine, but pre-selected... when I press enter I expect the first one, need to be more careful then.\nIt explain a lot.  @ramya-rao-a is there a way to disable this behavior?. @mkorejo @ramya-rao-a \nNot sure how to make it fail. The empty result will happen only when there is no packages on the GOPATH or GOROOT, which kind a weird. This is more like a panic mode, things that impossible. It is possible but the go extension will also fail.\nBut if really want to make it fail\n1. just modify the GOPATH/src/github.com/uudashr/gopkgs/cmd/gopkgs to return empty\n2. or do it here https://github.com/Microsoft/vscode-go/blob/0.6.72/src/goPackages.ts#L16 to return empty. @codingconcepts update gopkgs go get -u github.com/uudashr/gopkgs/cmd/gopkgs\nWhat is the result of time gopkgs |wc -l?\nand also time gopkgs -workDir=$(go list -f \"{{.Dir}}\" github.com/uudashr/gopkgs)|wc -l?\n. Here mine,\n6141\ngopkgs  2.20s user 3.22s system 104% cpu 5.210 total\nwc -l  0.00s user 0.00s system 0% cpu 5.209 total\nand\n646\ngopkgs -workDir=$(go list -f \"{{.Dir}}\" github.com/uudashr/gopkgs)  0.26s user 0.44s system 115% cpu 0.611 total\nwc -l  0.00s user 0.00s system 0% cpu 0.610 total\nReturned package numbers not too much different for the first command, but the difference on time taken are so significant.\nNot sure why. But based on the discussion, is it possible there is a problem on your go/mac installation? Seems everything is slower. Please tell me if there are any progress. Currently I have no idea.. Not too familiar with Win 10.\nYou can try to execute go list -f \"{{.Dir}}\" github.com/uudashr/gopkgs\nand put the result on the workDir param gopkgs -workDir=<location-of-gopkgs-src-dir>. Around 200ms fast enough.\nCan you do gopkgs without -workDir. Can you show me how many packages returned on uudashr/gopkgs\nTry https://superuser.com/questions/959036/what-is-the-windows-equivalent-of-wc-l for line count. Well... 6 seconds for 1325 packages is way too long.\nI don't have access to Win machine right now. btw this is gopkgs issue on Win os.. We need better gopkgs... not just about performance, but about the functionality.\ntngp give better performance, but it does not have features required by vscode.\nI've been experiencing this, long ago. But no more after couple fix. Not sure why it hung.. idle wake ups seems too long. Can be on vscode-go code (the caller) or on the gopkgs. Help are welcome.\nFor now try to kill the gopkgs.\n@codingconcepts your runtime is Go 1.7? If yes probably I need to test using the 1.7 version.. Use default CC and CXX fix the golang \"tip\" issue\nBut somehow it failing on\n1. Test Linter for Package\n2. Fill struct \u2013 select non-struct line\n@ramya-rao-a need help.. maybe you know the cause?\n. Fix the lint test, the output has changed.. \n```\n\ngometalinter --disable-all --enable=golint --enable=errcheck .\nlinter_1.go:5:1:warning: exported function ExportedFunc should have comment or be unexported (golint)\nlinter_1.go:8:3:warning: error return value not checked (a declared but not used) (errcheck)\nlinter_2.go:5:1:warning: error return value not checked (missing return) (errcheck)\n. The output of the linter different for go version 1.10 vs prev version\ngo 1.10\nlinter_1.go:8:3:warning: error return value not checked (a declared but not used) (errcheck)\n```\n\nwhile prev version\nlinter_1.go:8:3:warning: error return value not checked (a declared but not used) (errcheck, errcheck)\nNot sure which one is correct. But fixed the test anyway. @ramya-rao-a all good now... please check. Ya... haven't look into details about vgo.\nFYI gopkgs used for:\n1. Autocomplete unimported packages\n2. Add imports\nFor brief:\ngopkgs created for the sake of speed\nEx:\n```\ntime gopkgs\ngopkgs  0.32s user 0.59s system 153% cpu 0.598 total\ntime go list all\ngo list all  6.43s user 4.03s system 108% cpu 9.647 total\n```\n@zmb3 @nicpottier feel free to hac gopkgs. Agree.. so vscode-go should support this specifically for Go 1.11 and above. @ikgo is it possible to merge the changes to @mdempsky codebase. @ramya-rao-a please check. @ramya-rao-a maybe it's a good idea to add unit tests for this project, test that doesn't rely to UI, and relatively fast to run.\nI think we have lot codes can be test without requiring UI framework, this will become big saviour.\nHaven't figure out how to do it in this project, the idea to separate the test command.\nEx: \n- use variable\n  - unit test SCOPE=unit npm test\n  - ui test SCOPE=ui npm test\n- dedicated script npm test-unit\nnot sure which follows best practice\n. Awesome \ud83d\udc4d . @ramya-rao-a Should done, but still not sure why it's failed on tip version. @ramya-rao-a \nSomehow the go builder doesn't respect the GOROOT\nhttps://github.com/golang/go/blob/master/src/go/build/build.go#L283-L287\n@conradoplg \nBase on https://golang.org/doc/install section \"Installing to a custom location\" you need to set the PATH also\nexport GOROOT=$HOME/go1.X\nexport PATH=$PATH:$GOROOT/bin\nNow the question is \"can vscode use non-standard go installation?\" If it can, then probably that we should do.\nI think go compiler automatically use the GOROOT as context of the \"go\" command, so no need to set it on env for GOROOT. @conradoplg @yuansushow \ncan you run gopkgs| head -n 10. I try to install golang on non-standard location\n$ docker run -it --rm ubuntu\ninside the docker container run\ncd $HOME && apt-get update && \\\n    apt-get install -y --no-install-recommends curl git ca-certificates && \\\n    curl -C - -O -k https://dl.google.com/go/go1.10.2.linux-amd64.tar.gz && \\\n    tar xzvf go1.10.2.linux-amd64.tar.gz && \\\n    export GOROOT=$HOME/go; export PATH=$PATH:$GOROOT/bin && \\\n    mkdir gopath; export GOPATH=$HOME/gopath; export PATH=$PATH; export PATH=$PATH:$GOPATH/bin && \\\n    go get -u github.com/uudashr/gopkgs/cmd/gopkgs && \\\n    echo \"=== Executing gopkgs... ===\" && \\\n    gopkgs| head -n 10\nOutput:\n=== Executing gopkgs... ===\nlog\ninternal/testenv\nmime/quotedprintable\nencoding/json\nnet/rpc/jsonrpc\ncmd/link/internal/ppc64\nvendor/golang_org/x/net/nettest\ncmd/vendor/github.com/google/pprof/internal/symbolizer\ninternal/syscall/unix\ninternal/syscall/windows\nMake sure\n1.  To set the GOROOT and expose $GOROOT/bin to the PATH\n2. You have GOPATH and expose the $GOPATH/bin to the PATH\n. @conradoplg try to re-install the Go tools\ngo get -u github.com/uudashr/gopkgs/cmd/gopkgs\nI've made some changes.. hopefully that fix the Ubuntu issues.. Cool. Awesome... this is what we need. Test on server failed.\nI'cant test on my local machine, using node version 10. I always got TypeError: Cannot read property 'packageJSON' of undefined.\nNot sure it caused by node or by the vscode. @ramya-rao-a maybe you know anything about this?. Nevermind.. fixed. Just need to delete the yarn.lock and node_modules. @ramya-rao-a done.. review please. Wow... I missed a lot. Fixed.. Fail the test. Mac machine on Travis CI seems out of resources. All good now. @ramya-rao-a which test? on travis all good.\nIs there a way to reproduce?. Issues on gopkgs... for symbolic link. Issues on the dependencies godirwalk. Just send the owner a PR https://github.com/karrick/godirwalk/pull/4.\nMeanwhile the gopkgs use the patched version and already work as expected. Please re-install the tools.\n@ramya-rao-a could you re-run the test on your machine?. Due to this issue https://github.com/golang/go/issues/21057\nYou have to execute another go get -u -github.com/uudashr/gopkgs/cmd/gopkgs if the first attempt fail. \nTry to add -v go get -u -v -github.com/uudashr/gopkgs/cmd/gopkgs so we know what happen.\nLet me know if still fail, I have to find another way then.. Awesome.. thanks. I don't know why the lint is always failed on travis. All good on my machine.\nAnd there is nothing wwrong with line 128\nsrc/goMain.ts[128, 6]: Missing semicolon. @ramya-rao-a no problem. If you have time please run the test on Windows.. based on https://golang.org/s/go14internal\n\nAn import of a path containing the element \u201cinternal\u201d is disallowed if the importing code is outside the tree rooted at the parent of the \u201cinternal\u201d directory.\n\n$ grep -r 'internal/nettrace' \"$(go env GOROOT)/src\"\n/usr/local/Cellar/go/1.10.2/libexec/src/go/build/deps_test.go:      \"internal/nettrace\", \"internal/poll\",\n/usr/local/Cellar/go/1.10.2/libexec/src/go/build/deps_test.go:      \"internal/nettrace\",\n/usr/local/Cellar/go/1.10.2/libexec/src/go/build/deps_test.go:  \"net/http/httptrace\": {\"context\", \"crypto/tls\", \"internal/nettrace\", \"net\", \"reflect\", \"time\"},\n/usr/local/Cellar/go/1.10.2/libexec/src/net/dial.go:    \"internal/nettrace\"\n/usr/local/Cellar/go/1.10.2/libexec/src/net/http/httptrace/trace.go:    \"internal/nettrace\"\n/usr/local/Cellar/go/1.10.2/libexec/src/net/http/transport_test.go: \"internal/nettrace\"\n/usr/local/Cellar/go/1.10.2/libexec/src/net/lookup.go:  \"internal/nettrace\"\nIt can be used by all the source reside on GOROOT. @ramya-rao-a please check. More simple with your way. Same with me.. on Mac. FYI from command line use\ngocode -f=json -in=<your-file-name> autocomplete <offset>\nor\ngocode -f=json autocomplete <your-file-name> <offset> but it require to insert the text from stdin.. Mine\nFor a. result:\n$ gocode -f=json -in=/.../a-path/main.go autocomplete 180\n[0,[{\"class\":\"func\",\"package\":\"\",\"name\":\"do\",\"type\":\"func()\"},{\"class\":\"var\",\"package\":\"\",\"name\":\"t\",\"type\":\"invalid type\"}]]\nFor a.t. result:\n$ gocode -f=json -in=/.../a-path/main.go autocomplete 182\nnull. See this:\nProbably these are gocode issue. For a. it result to \n\n$ gocode -f=json -in=/.../a-path/main.go autocomplete 180\n[\n    0,\n    [\n        {\n            \"class\": \"func\",\n            \"package\": \"\",\n            \"name\": \"do\",\n            \"type\": \"func()\"\n        },\n        {\n            \"class\": \"var\",\n            \"package\": \"\",\n            \"name\": \"t\",\n            \"type\": \"invalid type\"\n        }\n    ]\n]\nSo gocode unable to resolve the type of a.t. The nsf gocode resulting to:\n[\n    0,\n    [\n        {\n            \"class\": \"func\",\n            \"name\": \"do\",\n            \"type\": \"func()\",\n            \"package\": \"\"\n        },\n        {\n            \"class\": \"var\",\n            \"name\": \"t\",\n            \"type\": \"lib.T\",\n            \"package\": \"\"\n        }\n    ]\n]. I really don't understand. This what I do:\n1. Install the old nsf gocode\n2. Then install the new mdempsky gocode using go install ./...\nAnd everything works like a charm. I think there are issue on migration from old gocode to new gocode.. Please do things below:\n1. gocode close\n2. gocode exit (just to make sure)\n3. Go: Install/Update Tools or  install gocode go get -u github.com/mdempsky/gocode\nProbably previously we missed the gocode close command. Not really sure. But hopefully works.. Awesome... The outline works.\nA thought:\nSeems vscode make the outline based on currently opened file. Go may best shown based on packages. The idea is that the outline view can be replacement for the file based tree view.\nFound similar https://marketplace.visualstudio.com/items?itemName=766b.go-outliner, but this extension can't navigate to sub package, still require tree view to do that.\n. Does using gometalinter directly from the shell give the same result?\nFYI similar to gometalinter, https://github.com/golangci/golangci-lint but faster. Might less on CPU also.. Ya.. correct. Just figure out.\nNeed to remove all the packages from GOPATH, should only shows from GOROOT.\n\nFor more fine-grained control, the module support in Go 1.11 respects a temporary environment variable, GO111MODULE, which can be set to one of three string values: off, on, or auto (the default). If GO111MODULE=off, then the go command never uses the new module support. Instead it looks in vendor directories and GOPATH to find dependencies; we now refer to this as \"GOPATH mode.\" If GO111MODULE=on, then the go command requires the use of modules, never consulting GOPATH. We refer to this as the command being module-aware or running in \"module-aware mode\". If GO111MODULE=auto or is unset, then the go command enables or disables module support based on the current directory. Module support is enabled only when the current directory is outside GOPATH/src and itself contains a go.mod file or is below a directory containing a go.mod file.. @ramya-rao-a what is the goal of browsePackages() we need to decide what it should shown on the browsePackages() under Go 1.11, is it the all packages on the GOROOT + GOPATH?\n\nWhat if we are opening file under go modules project, does the result going to be different ex: GOROOT + modules. @ramya-rao-a what is the goal of browsePackages() we need to decide what it should shown on the browsePackages() under Go 1.11, is it the all packages on the GOROOT + GOPATH?\nWhat if we are opening file under go modules project, does the result going to be different ex: GOROOT + modules. Hopefully soon. Still we have missing piece here.\ngo list -m all show the list of modules not packages.. @ramya-rao-a not sure why it always failed on gogetdoc related, any idea?. Why do we need isMod? gopkgs already provide the module dependencies. Cool... all comes together. @lkarlslund better to ask the owner of https://github.com/ianthehat/godef to merge godef to the original. Last commit https://github.com/rogpeppe/godef Sep 12, 2018, still active.. Same here with me... the autocomplete doesn't works by using @wolfeidau case. My mistakes... gopkgs fixed, please give it a try, you need to re-install thegopkgs cc @ramya-rao-a . Got clue from @alecthomas \nMight be like this if err != nil {\\n\\t${1:return ${2:nil, }${3:err}}\\n}. Relate to https://github.com/Microsoft/vscode-go/issues/1962. @alecthomas might want to comment?. I see... make sense, because it completion, not import package. We can strip off the version part from \"pkgname.v1\" , it works when people always using standard way on naming package related to the package path, but that doesn't guarantee. cb0d2bc no longer in master?\nHere are some example, can't guarantee consistent pattern:\n- speech;google.golang.org/api/speech/v1beta1\n- spectrum;google.golang.org/api/spectrum/v1explorer\n- speech;google.golang.org/api/speech/v1\n- prediction;google.golang.org/api/prediction/v1.2\n- tilde;gopkg.in/mattes/go-expand-tilde.v1\nSo using go list -f '{{.Name}};{{.ImportPath}}' all is the proper way, it just need to make it faster.\nCase\n1. Autocomplete un-imported will suggest only packages on cache, no way to suggest new package since it need invalidation. Need to listen some events to invalidates, haven't figure out which one.\n2. Go: Browse Packages use https://github.com/tpng/gopkgs which looks in $GOPATH/pkg, new package will not exists in $GOPATH/pkg, so browse package will not help. Except we change it, use https://github.com/haya14busa/gopkgs which search in   $GOPATH/src. This is workaround, but still completion still stale.\nBtw, why not change to https://github.com/haya14busa/gopkgs for Browse Packages? It seems good improvement, solve one problem.. Will check foe the missing tool when execution, but cannot detect failure on flag, because the old gopkgs doesn't care with any flags or arguments.\nThe only way to check it use different gopkgs version is by read the help provided by the binary.. gpkgs -format faster than go list all\nFor 3382 packages packages:\ngo list all  4.62s user 3.27s system 124% cpu 6.360 total\ngopkgs  0.65s user 0.70s system 264% cpu 0.508 total\n6.36s vs 0.5s, big difference.\nThis gopkgs using fastwalk, faster than golang standard fs.Walk().\nNot every word typed, it only invoked on only when completion triggered. Typing \"strings\" 7 words typed will only cost single gopkgs invocation. So this is quite cheap and fast enough.\nCache will be much better of course.\nIf we cache for 10 or 20 second, user probably can create new file in new folder with new package faster than cache expiry time. So new package will not provided by completion. The workaround crossed in my mind is we need to some kind of file system watcher and check if there is changed file, then invalidate the cache or run gopkgs immediately to refresh the cache, etc. My suggestion is we can do this cache things on another PR.. Done. Done. Good idea. Changed my mind... let's try to use 5s cache expiry. Ahh... yup... Ahhh... I see your point. Agree with that. We can remove the gopkgsMissing() then. Ahh... I see. Things to consider. FYI currently more than one test can be run all together.\nWhen the test on save hook enabled {\"go.testOnSave\": true}, then every time user save file, then it run the test. When one test takes to long then it make sense if it canceled only when the second test run for the same package. If we save file belongs to different package, then it doesn't make sense. This can be happen when we hit \"Save All\" then multiple test will run.. I'm rebase from the master, seems not good rebase to an existing PR. There are practice to make a test package to test un-exported method when necessary.\nNo official docs but here:\n1. https://medium.com/@matryer/5-simple-tips-and-tricks-for-writing-unit-tests-in-golang-619653f90742\n2. https://blog.alexellis.io/golang-writing-unit-tests/\nHmm.. I found not too much:\n$ find /usr/local/Cellar/go/1.9/libexec/src | grep internal_test.go\n/usr/local/Cellar/go/1.9/libexec/src/net/http/transport_internal_test.go\n/usr/local/Cellar/go/1.9/libexec/src/os/exec/internal_test.go\n/usr/local/Cellar/go/1.9/libexec/src/strconv/internal_test.go\n/usr/local/Cellar/go/1.9/libexec/src/time/internal_test.go. @ramya-rao-a Do you want me to re-create clean PR?. I wish... but currently the completion using this.pkgsList cache in GoCompletionItemProvider.\nImport internal package behavior works differently to each file (resident in a package) that try to import. So the set of packages would not be the same to each importing package. See https://github.com/Microsoft/vscode-go/pull/1257/files#diff-52de61e365f975d5f753902051296b23R289. Cool. Somehow not waiting for the getImportablePackage give illusion the completion was fast.. it just the completion would not give the full set of the packages for the first time. Somehow I like it because it fast. So if we stick with this, then the filtering need to be reside on the GoCompletionItemProvider.. It use Promise.race\ngetAllPackages has cache which is allPkgsCache and has it's own caching logic.\nwhen getAllPackages use it's cache then it will selected by Promise.race\nwhen not using cache then it will fallback to allPkgsCache which can be empty or outdated cache that is why I'm using Promise.race([..., allPkgsCache]). it always return 'fast'\n```js\nfunction timeout(millis) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, millis);\n  });\n}\nfunction fastResponse() {\n  return new Promise((resolve, reject) => {\n    resolve('fast');\n  });\n}\nfunction slowResponse() {\n  return timeout(500).then(() => 'slow');\n}\nconst p = Promise.race([slowResponse(), fastResponse(), 'instant']);\np.then((v) => console.log(v));\n```. Actually doesn't have to tie the initial running build. But it just UI/UX consideration (maybe while I'm not an expert in UX).\nrunBuild() will show \"Tests Running\".\nWhile loadPackages() will show \"Load Packages\" and disappear when it done.\n\n1. No separator... and it seems too crowd\n2. When \"Load Packages\" disapear.. it snaps the \"Test Running\" position to the left.\nBy tying up the runBuild() to loadPackages()  make sure the above things doesn't happen.\nWhat do you think?. Yes... and goImportablePackages(useCache=true) so it should always use cache. Fast, doesn't have wait.\nFirst time invocation can result to empty packages. But \"preload packages\" on startup will avoid the empty packages.. @tylerb @ramya-rao-a Probably there is a hack.\nExtension react to the document save event. If we can delay this reaction for example for 1 second interval, capture all the events, after 1 second if we see more than one save events so run the test as one test session (run test only for affected packages).\nProbably doesn't need to be 1sec, 500ms is enough.. Something like this https://gist.github.com/uudashr/8d1d74e30b815c3a0eec634a737fdb9b. Not sure... it based on pkg. It will fail on let internalPkgFound = pkgPath.match(/\\/internal\\/|\\/internal$/); also..\nNeed Windows machine. I see.. will push latest changes. Done. done. done. No rejection on gopkgs. Positive and negative result will be return by resolve().\nBase on your comment, better if negative result should be return by reject(). Such as:\n1. Whengopkgsbinary not found\n2. Whengopkgs` needs to update\nThis is part of quality I think, which I'm okay, we can do this. But maybe after this PR.\nSomeday this need to be work on, if this not fixed soon, then any other contributor will follow the existing code style (in term of quality). Ahh... good idea. I need this to pass the test of \"Replace vendor packages with relative path\" it will fail on the assert of \"Relative path for vendor package 9fans.net/go/acme not found\".\nThis happen because gopkgs recognize vscode workspace as workDir, and the workspace dir for the running test is vscode-go/out/test, no vendor package under the directory. While actually we are testing vendor package on under $GOPATH/src/github.com/rogpeppe/godef, there the vendor package of 9fans.net/go/acme should be found.\nSo it only for satisfying the test. The actual running vscode will never use workDir param or listPackages() (which kind of silly). I can't guess the project root/workDir based on  fileName. Any suggestion?\nAvailable the options are:\n1. Guess golang project dir by filename\n2. Change the test workspace dir to $GOPATH/src/github.com/rogpeppe/godef above test\n3. Pass workDir to listPackages() (currently use this). Done. Since it already run, we can use the cache. User can go back to the first file, and we already have the cache or running gopkgs.. Made some changes... all the go files under the same package root will share the same cache and gopkgs running  instance.. Ahaha.. cool \ud83d\udc4d . No, it should works.\nDon't know which version gopkgs did you use. Since I push the latest changes, gopkgs -workDir also works on sub packages. Try to update the gopkgs\nRun this command\n$ gopkgs -format '{{.Name}};{{.ImportPath}}' -workDir=$(go env GOPATH)/src/github.com/rogpeppe/godef/go/ast|grep acme\nacme;github.com/rogpeppe/godef/vendor/9fans.net/go/acme\nAnd this also covered on the test case \"Replace vendor packages with relative path\". Just push an update... would you mind to test it on Windows?. Thank for the correction.. will fix soon. Impossible to work under GOPATH/src\nAhh.. yes.. correct.. Here https://code.visualstudio.com/docs/extensions/example-word-count#_customizing-the-status-bar\nWe can use https://octicons.github.com/ on vscode. ",
    "iarief": "@ramya-rao-a thanks!. @ramya-rao-a sure, please wait a bit. @ramya-rao-a \nYeah, it seems that this issue is resolved as per the following expected behaviour\n\nCreate go file\nCreate test file\nRun Go:Toggle Test Coverage In Current Package (this would result in highlighting for coverage)\nModify the code in the go file or the unit test file\nRun Go: Test Package again \nCheck that the coverage highlighting has been updated for the package\n\n~~The steps above works, without throwing any error, so I think it is save to say that the issue is fully resolved.~~. @ramya-rao-a \nI'm terribly sorry, but I think that there is still something wrong with the toggle test coverage command.\nI think it should work like this\n\ntoggle test coverage\ncoverage highlighting shows up\nedit unit test files and test package\ncoverage highlighting is updated\ntoggle the coverage testing again (to turn off coverage test)\ntest the package again\n\nexpected behaviour : the vs code should not show coverage highlighting and should not test the coverage of the packaage\ncurrent behaviour : the vs code hides the highlighting after the coverage toggle, but as soon as i run test package, the coverage result pops up in the output, and the coverage highlighting is updated.\nI think the coverage should be able to be turned off and on via the toggle test coverage in current package.. I see, so the toggle coverage is purely for visual purpose.\nThen I believe everything works as supposed to.. ",
    "blaketairan": "Thank you so much for helping! @ramya-rao-a \ngoreturns is the reason. . ^^ https://github.com/sqs/goreturns/issues/34\n. ^^ https://github.com/sqs/goreturns/issues/34\n. ",
    "alex-slynko": "Thanks @ramya-rao-a. ",
    "necrose99": "gox isnt perfect , however insted of go-build , you can substitute gox which wrapps go build with cross-ers.. \na PULL on this is just not within my reach...  however simple apps like hugo one can add use gox.. \ngox.zip  anyhow exe's are built \ngo get go build , can move gox.exe or x86/x64 to gox.exe under c:\\go\\bin\\gox if you so like ... \nfilter targets : gox -osarch=\"linux/amd64\"  or  gox -osarch=\"linux/arm64\"\nelse by default it will build a default run... of majority ...  windows/Linux/BSD/ x86/x64/arm \n(no arm64 Linux by default. , however the osarch will force it.  and not yet windows arm64.)\nhttps://github.com/fragmenta & fragmenta-cms will compile with gox very easily ..\ngo get , and gox insted of go-build .. or just run the x64 exe etc.. \nunfortunately , as well build commands would be a plus to add... as for settings..  ie were go/gox are installed. as far as the menu , I'm more of an Admin /Security Ops Engineer / some but crude coding skills at best.. \n. ",
    "iloszw": "I'm using the extension 0.6.65 and I'm still having problems. Specifically, I need to use the \"fts5\" module of SQLite. To this end, in the workspace settings file, I'm including \"go.testFlags\" as follows:\n\"go.testFlags\": [\"-tags\", \"fts5\"]\n\nI'm also including the line:\n\"go.buildTags\": \"fts5\"\n\nHowever, when I run tests using codelens, the \"fts5\" module fails to load. . I'm using \"go.buildTags\". I've defined the option within both the user-serttings and the workspace-settings files (just to be sure). I've also tried other options and combinations, but debugging using codelens seems to be ignoring them:\n no such module: fts5\n\nRunning tests using codelens is generating the correct command, though.\n go test -timeout 30s -tags fts5 -run ^Test...$. Great! Thank you both very much @ramya-rao-a and @ka2n . I'm having the same issue..\n",
    "nvma": "@ramya-rao-a What's puzzling is that it's been working like this ever since I've switched to vscode and discovered this wonderful plugin. I've been using glide to handle dependencies and vscode-go been working fine with go lint ./...  and vendor folder since the first day I started to use it. \nSo I naturally assumed that something had to happen before things stopped working. . @ramya-rao-a is it possible that I didn't update the gotools and vscode-go extension since early June while sticking to the latest versions of vscode every time it was released?. I see, thanks for your time, @ramya-rao-a I will have to stick to a half-measure of scoping linter to a package level keeping the hope that optional ignoreDirectory could be introduced to linting options in the near future. Cheers and thank you for your work on this stellar extension, I didn't realise I relied on it so much :). ",
    "atomi": "Just a heads up. It looks like you added a PR to prevent workspace symbols from picking up vendor/ https://github.com/Microsoft/vscode-go/issues/700  but the version from Go-latest.vsix is including all symbols, including those in vendor/.. ",
    "douglarek": "@ramya-rao-a  this issue will occur after debugging vendor codes without removing breakpoints when reopen vscode again.. @ramya-rao-a thanks for your fix; btw, when will release a new version ?. @ramya-rao-a do you mean the language server can not be used for the auto-completion feature,\n so we need gocode ? If so, maybe it is my misunderstanding.. Go: Browser Packages and Go: Install/Update Tools are broken when using go1.11rc2. @ramya-rao-a I want to help, but I do not know how to get the debug log. @ramya-rao-a Go: Browser Packages nothing output, it silently fail. ",
    "mileusna": "Sure, anything. Same testing works OK in terminal window.\nIt just started to happen after the VS Code upgrade.\n\n. Sorry, but this new description is incorrect, I don't see log.* output, failure or no failure. It has nothing to do with the test's outcome.\n. @ramya-rao-a Yes, the t.Error is there but not the log.Println. That is why I wrote no Hello, there is no Hello on the screen from log.Println(\"Hello\")\nThis is the same code on macOS with VS Code. 1.14.0 and vscode-go v0.6.62.\n\nAnd this is with upgraded VS Code 1.14.2 and vscode-go v0.6.63\n\nIn both cases t.Error makes test fail, but there is no log.Println output.\nI thought that it was the version of the VS Code that is problematic with vscode-go, but now I realised that the vscode-go is also different version 0.6.63 vs 0.6.62 so I guess it is the vscode-go 0.6.63 issue, not related to the VS Code upgrade.\n. Latest update, with VS Code 1.17.0 and vscode-go 0.6.66 neither stderr nor stdout is printed with testing tool. Only if there is t.Error(\"x\"), then I see the output of fmt.Println() and log.Println(). OK. It is not the same behavior as go test which gives output even without -v, but verbose will do the trick. Thanks.. Miraculously fixed. ",
    "martinlindhe": "\nThe move was made to support running tests in symlinked folders. See #1164\n\nsymlinks are not mentioned in #1164 and this change seem to have degraded the experience of vscode, what gives? (See also #1381). > When you run the test command separately, you only see the stdout\nThis can't be right. I am quite sure my terminal is showing both stderr and stdout, and as you can see in the command I used, I didn't redirect any streams.\nThe \"terminal\" i am talking about is iTerm, not the one you built into vscode.\nWill look at the odiscussion in #1120\n\nCan you run the same test command and see what you get in stderr?\n\nThe output i showed in post 1 includes stdout and stderr.. @ramya-rao-a   #1120 is unrelated to this issue. \nin #1120, there is talk about stdout/stderr not showing up in test run output.\nThis issue however, is, as you can see in post 1 about extra stuff showing up in test output.. So, according to #1120 you no longer actually run \"go test\", so the command line you are showing is indeed not really what was run. That could explain the mysterious appearance of \"assertions.go:239\" as I mentioned in post 1.\nSo, is this \"go test package\" also the one adding the whitespace?\nI am referrring to https://github.com/Microsoft/vscode-go/issues/1120#issuecomment-334788240. Dear @ramya-rao-a\nThanks for your patience and clarifications!\nI made another observation that I think is relevant.\nWhen using go/testing, the internal testing system, vscode test output looks as expected.\nI only get these extra whitespace as in screenshot when using github.com/stretchr/testify/assert, a very popular third-party testing framework for go.\nMini reproducable tiny_test.go:\n```go\npackage tiny\nimport (\n    \"testing\"\n\"github.com/stretchr/testify/assert\"\n\n)\nfunc TestInternal(t *testing.T) {\n    if 1 != 2 {\n        t.Error(\"TestInternal marked failed\")\n    }\n}\nfunc TestTestify(t *testing.T) {\n    assert.Equal(t, 1, 2, \"TestTestify marked failed\")\n}\n```\nOutput from running file tests in vscode:\n\nOutput from running the same command in zsh:\n\nAnd output from running the same command in zsh, with -v flag:\n\n. @ramya-rao-a \nYou are fully right.\nwith 2>&1 | tee output i can confirm the extra stuff is there, but that is not a vscode issue\nThanks again. ",
    "dtknut": "The fix in 0.6.64 does not solve the underlying problem that \"go tool vet .\" will pick up the vendor folder. This means vet takes 20 seconds on a project with only a single Go file (main.go). I think vet should not process the vendor folder at all. Ignoring the vendor folder in the results is not enough.\nEDIT: This is only a problem in two cases: \n\nwhen \"go.vetOnSave\" is set to \"package\" and the edited file is in the same folder as the vendor folder, typically main.go.\nwhen \"go.vetOnSave\" is set to \"workspace\". @ramya-rao-a I am not sure there is a perfect solution.\n\nPersonally, I had vetOnSave set to package, but was editing a main.go file in the root folder. For this case one could maybe run go tool vet main.go to avoid picking up the vendor folder. I am not sure if this would cause any other issues. It is not exactly doing what package implies.. ",
    "rambhavaraju": "@ramya-rao-a Could you please help on this issue.\nBelow is the stack trace of the exception:\ncommand 'go.debug.startSession' not found: Error: command 'go.debug.startSession' not found\n    at t._tryExecuteCommand (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:28:1048914)\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:28:1048753\n    at n.Class.define.cancel.then (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:28:59590)\n    at t.executeCommand (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:28:1048727)\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:29:516112\n    at n.Class.define.cancel.then (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:28:59590)\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:29:516009\n    at n.Class.derive._oncancel.then (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:28:59590)\n    at file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:29:515526\n    at Object.g [as _notify] (file:///C:/Program Files (x86)/Microsoft VS Code/resources/app/out/vs/workbench/electron-browser/workbench.main.js:28:52764)\ne.doShow @ messageService.ts:125\ne.show @ messageService.ts:104\n(anonymous) @ actionRegistry.ts:156\ndone @ winjs.base.raw.js:1378\nv @ winjs.base.raw.js:1224\nenter @ winjs.base.raw.js:901\n_run @ winjs.base.raw.js:1068\n_chainedError @ winjs.base.raw.js:1031\nn @ winjs.base.raw.js:736\nthen @ winjs.base.raw.js:1436\nenter @ winjs.base.raw.js:747\n_run @ winjs.base.raw.js:1068\n_setCompleteValue @ winjs.base.raw.js:1052\nv @ winjs.base.raw.js:1209\nenter @ winjs.base.raw.js:901\n_run @ winjs.base.raw.js:1068\n_chainedError @ winjs.base.raw.js:1031\nn @ winjs.base.raw.js:736\nthen @ winjs.base.raw.js:1436\nenter @ winjs.base.raw.js:747\n_run @ winjs.base.raw.js:1068\n_setCompleteValue @ winjs.base.raw.js:1052\ng @ winjs.base.raw.js:1170\nenter @ winjs.base.raw.js:852\n_run @ winjs.base.raw.js:1068\n_completed @ winjs.base.raw.js:1036\nl @ winjs.base.raw.js:1813\n$.then.o.(anonymous function) @ winjs.base.raw.js:1838\ng @ winjs.base.raw.js:1170\nenter @ winjs.base.raw.js:852\n_run @ winjs.base.raw.js:1068\n_completed @ winjs.base.raw.js:1036\nthen @ winjs.base.raw.js:1566\nenter @ winjs.base.raw.js:747\n_run @ winjs.base.raw.js:1068\n_setCompleteValue @ winjs.base.raw.js:1052\ng @ winjs.base.raw.js:1170\nenter @ winjs.base.raw.js:852\n_run @ winjs.base.raw.js:1068\n_completed @ winjs.base.raw.js:1036\nl @ winjs.base.raw.js:1813\n$.then.o.(anonymous function) @ winjs.base.raw.js:1838\ng @ winjs.base.raw.js:1170\nenter @ winjs.base.raw.js:852\n_run @ winjs.base.raw.js:1068\n_completed @ winjs.base.raw.js:1036\n(anonymous) @ async.ts:643\n(anonymous) @ C:\\Program Files (x86)\\Microsoft VS Code\\resources\\app\\node_modules\\graceful-fs\\graceful-fs.js:78\nreadFileAfterClose @ original-fs.js:416. \nThanks Ramya for response. \nI think the Go extensions are working fine from command pallete. Ill try uninstalling the GO extensions and re install. I have had configured my launch.json file too. Below is the launch.json configuration\n {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"E:/Projects/OrderManagementSystem/patra-GoService/src/PatraService.go\",\n            \"env\": {\"PATH\": \"C:/Go/\",\n                    \"GOPATH\":\"E:/Projects/OrderManagementSystem/GoService/\"},\n            \"args\": [],\n            \"showLog\": true\n        }. \nThis is how my debug looks like, it shows that i have configured the debug settings. @ramya-rao-a uninstalling and installing the Go extension did the trick. Thank you so much for your help.. \nHere is the windows not responding message.\nI'm running windows 10 pro x64 version.. ",
    "eZioPan": "Hi, I update Go extension to 0.6.66, and every extension function won't work, no matter how I reinstall extension or vscode. The vscode version is 1.16.1, x64.\nI also try vscode 1.17.0-insider, x64, extension won't work.\nThen I rollback to Go extension 0.6.65, extension function works again.\nOnly Go extension installed.\nThanks~. @ramya-rao-a After I found 0.6.66 won't work, I use vsix rollback to 0.6.65.\nI didn't use vsix to install extension before.\nI'd like to update to 0.6.66 for debug propose.. @ramya-rao-a yes, i have already try uninstall extension by vscode gui and by manually remove extension folder, but none of them work.\n\nbtw, i use vscode on windows10, i will test it on macos later.\n\nGo extension 0.6.66, vscode 1.16.1 x64, macos 10.12.6 works fine.\nGo extension 0.6.66, vscode 1.16.1 x64, CentOS 7 works fine.\nMaybe something wrong with windows filepath? . @ramya-rao-a Hi, when I load Go extension, the Developer Tools Tells me\nextensionHost.ts:384 [Extension Host] Activating extension lukehoban.Go failed: Cannot read property 'substr' of undefined.\nt._logExtensionHostMessage @ extensionHost.ts:384\n(anonymous) @ extensionHost.ts:194\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\nextensionHost.ts:384 [Extension Host] Activating extension lukehoban.Go failed:  Cannot read property 'substr' of undefined\nt._logExtensionHostMessage @ extensionHost.ts:384\n(anonymous) @ extensionHost.ts:194\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\nextensionHost.ts:384 [Extension Host] Here is the error stack:  TypeError: Cannot read property 'substr' of undefined\n    at Object.getCurrentGoPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:301:34)\n    at new GoRunTestCodeLensProvider (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goRunTestCodelens.js:23:34)\n    at activate (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goMain.js:101:32)\n    at Function.e._callActivateOptional (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:423087)\n    at Function.e._callActivate (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:422832)\n    at c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:422185\n    at Object.m [as _notify] (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:41309)\n    at Object.enter (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:44874)\n    at n.Class.derive._oncancel._run (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:46702)\n    at n.Class.derive._oncancel._completed (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:46143)\nextensionService.ts:405 Activating extension lukehoban.Go failed: Cannot read property 'substr' of undefined.\ne._logMessageInConsole @ extensionService.ts:405\ne._logOrShowMessage @ extensionService.ts:419\ne.$localShowMessage @ mainThreadExtensionService.ts:31\ne.invoke @ abstractThreadService.ts:41\ne._invokeHandler @ rpcProtocol.ts:109\ne._receiveOneMessage @ rpcProtocol.ts:96\n(anonymous) @ rpcProtocol.ts:32\n(anonymous) @ rpcProtocol.ts:157\ne.invoke @ callbackList.ts:63\ne.fire @ event.ts:123\n(anonymous) @ ipc.net.ts:82\nemitOne @ events.js:96\nemit @ events.js:191\nreadableAddChunk @ _stream_readable.js:178\nReadable.push @ _stream_readable.js:136\nonread @ net.js:560\nextensionHost.ts:384 [Extension Host] rejected promise not handled within 1 second\nt._logExtensionHostMessage @ extensionHost.ts:384\n(anonymous) @ extensionHost.ts:194\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\nshell.ts:419 [lukehoban.Go] Cannot read property 'substr' of undefined: TypeError: Cannot read property 'substr' of undefined\n    at getCurrentGoPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:301:34)\n    at Object.isGoPathSet (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:217:10)\n    at goInstallTools_1.updateGoPathGoRootFromConfig.then (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goMain.js:96:54)\n    at \ne.onUnexpectedError @ shell.ts:419\n(anonymous) @ shell.ts:379\ne.onUnexpectedError @ errors.ts:119\no @ errors.ts:138\ne.$onUnexpectedError @ mainThreadErrors.ts:26\ne.invoke @ abstractThreadService.ts:41\ne._invokeHandler @ rpcProtocol.ts:109\ne._receiveOneMessage @ rpcProtocol.ts:96\n(anonymous) @ rpcProtocol.ts:32\n(anonymous) @ rpcProtocol.ts:157\ne.invoke @ callbackList.ts:63\ne.fire @ event.ts:123\n(anonymous) @ ipc.net.ts:82\nemitOne @ events.js:96\nemit @ events.js:191\nreadableAddChunk @ _stream_readable.js:178\nReadable.push @ _stream_readable.js:136\nonread @ net.js:560\nextensionHost.ts:384 [Extension Host] rejected promise not handled within 1 second\nt._logExtensionHostMessage @ extensionHost.ts:384\n(anonymous) @ extensionHost.ts:194\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\nshell.ts:419 [lukehoban.Go] Cannot read property 'substr' of undefined: TypeError: Cannot read property 'substr' of undefined\n    at getCurrentGoPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:301:34)\n    at Object.getBinPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:274:75)\n    at Promise (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:294:31)\n    at Promise ()\n    at Promise.all.keys.map.tool (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:293:41)\n    at Array.map (native)\n    at getMissingTools (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:293:29)\n    at util_1.getGoVersion.then.goVersion (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:266:9)\n    at \ne.onUnexpectedError @ shell.ts:419\n(anonymous) @ shell.ts:379\ne.onUnexpectedError @ errors.ts:119\no @ errors.ts:138\ne.$onUnexpectedError @ mainThreadErrors.ts:26\ne.invoke @ abstractThreadService.ts:41\ne._invokeHandler @ rpcProtocol.ts:109\ne._receiveOneMessage @ rpcProtocol.ts:96\n(anonymous) @ rpcProtocol.ts:32\n(anonymous) @ rpcProtocol.ts:157\ne.invoke @ callbackList.ts:63\ne.fire @ event.ts:123\n(anonymous) @ ipc.net.ts:82\nemitOne @ events.js:96\nemit @ events.js:191\nreadableAddChunk @ _stream_readable.js:178\nReadable.push @ _stream_readable.js:136\nonread @ net.js:560. @ramya-rao-a i use chinese(zh-cn) as my primary language, so when i change vscode language to zh-cn, and load Go extension, Developer Tools reports something different\n\nsorry for the chinese in logs.\n\u6fc0\u6d3b\u6269\u5c55\u201clukehoban.Go\u201d\u5931\u8d25\nmeans\nActivating extension lukehoban.Go failed\n\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28 [Extension Host] \u6fc0\u6d3b\u6269\u5c55\u201clukehoban.Go\u201d\u5931\u8d25: Cannot read property 'substr' of undefined\u3002\nt._logExtensionHostMessage @ /C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28 \u6fc0\u6d3b\u6269\u5c55\u201clukehoban.Go\u201d\u5931\u8d25: Cannot read property 'substr' of undefined\u3002\ne._logMessageInConsole @ /C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28 [Extension Host] Activating extension lukehoban.Go failed:  Cannot read property 'substr' of undefined\nt._logExtensionHostMessage @ /C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28 [Extension Host] Here is the error stack:  TypeError: Cannot read property 'substr' of undefined\n    at Object.getCurrentGoPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:301:34)\n    at new GoRunTestCodeLensProvider (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goRunTestCodelens.js:23:34)\n    at activate (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goMain.js:101:32)\n    at Function.e._callActivateOptional (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:423087)\n    at Function.e._callActivate (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:422832)\n    at c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:422185\n    at Object.m [as _notify] (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:41309)\n    at Object.enter (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:44874)\n    at n.Class.derive._oncancel._run (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:46702)\n    at n.Class.derive._oncancel._completed (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:28:46143)\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28 [Extension Host] rejected promise not handled within 1 second\nt._logExtensionHostMessage @ /C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:29 [lukehoban.Go] Cannot read property 'substr' of undefined: TypeError: Cannot read property 'substr' of undefined\n    at getCurrentGoPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:301:34)\n    at Object.isGoPathSet (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:217:10)\n    at goInstallTools_1.updateGoPathGoRootFromConfig.then (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goMain.js:96:54)\n    at \ne.onUnexpectedError @ /C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:29\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28 [Extension Host] rejected promise not handled within 1 second\nt._logExtensionHostMessage @ /C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:28\n/C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:29 [lukehoban.Go] Cannot read property 'substr' of undefined: TypeError: Cannot read property 'substr' of undefined\n    at getCurrentGoPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:301:34)\n    at Object.getBinPath (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\util.js:274:75)\n    at Promise (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:294:31)\n    at Promise ()\n    at Promise.all.keys.map.tool (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:293:41)\n    at Array.map (native)\n    at getMissingTools (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:293:29)\n    at util_1.getGoVersion.then.goVersion (C:\\Users\\eZioPan.vscode\\extensions\\lukehoban.go-0.6.66\\out\\src\\goInstallTools.js:266:9)\n    at \ne.onUnexpectedError @ /C:/Program Files/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:29\nextensionHost.ts:384 [Extension Host] (node:14188) DeprecationWarning: os.tmpDir() is deprecated. Use os.tmpdir() instead.\nt._logExtensionHostMessage @ extensionHost.ts:384\n(anonymous) @ extensionHost.ts:194\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\n. @ramya-rao-a Yes! new extension solve my problem! THANKS A LOT!\nYou are right, I often open Go file without open a folder, and I think I should learn more about vscode to improve my usage~\nThank you again!. ",
    "vbocan": "I am seeing the same problem with VS Code v1.17 when the .go file is the only one opened in the editor. If I open the folder instead, it works flawlessly.. ",
    "omganesh": "The VS instance , all other things were working fine prior to the VS upgrade .\nJust the vs upgrade is the new change here\n. The VS instance , all other things were working fine prior to the VS upgrade .\nJust the vs upgrade is the new change here\n. This is my setting file\n// Place your settings in this file to overwrite the default settings\n{\n    \"files.associations\": {\n        \"Vagrantfile\": \"ruby\"\n    },\n    \"window.zoomLevel\": -1,\n    \"vim.enableNeovim\": true,\n    \"vim.disableAnnoyingNeovimMessage\": true,\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.formatOnSave\": true,\n    \"editor.formatOnSave\": true,\n    \"editor.formatOnType\": true,\n    \"go.lintTool\": \"golint\",\n    \"terminal.integrated.shell.windows\": \"C:\\Program Files\\Git\\bin\\bash.exe\",\n    \"editor.formatOnPaste\": true,\n    \"go.formatTool\": \"gofmt\"\n}\n. This is my setting file\n// Place your settings in this file to overwrite the default settings\n{\n    \"files.associations\": {\n        \"Vagrantfile\": \"ruby\"\n    },\n    \"window.zoomLevel\": -1,\n    \"vim.enableNeovim\": true,\n    \"vim.disableAnnoyingNeovimMessage\": true,\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.formatOnSave\": true,\n    \"editor.formatOnSave\": true,\n    \"editor.formatOnType\": true,\n    \"go.lintTool\": \"golint\",\n    \"terminal.integrated.shell.windows\": \"C:\\Program Files\\Git\\bin\\bash.exe\",\n    \"editor.formatOnPaste\": true,\n    \"go.formatTool\": \"gofmt\"\n}\n. hi, \nVS Code version is 1.14.2 \nI did a Go: Install/Update tools, \n - this was successful\nGetting following console log errors \nat ChildProcess.exithandler (child_process.js:223:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:885:16)\nat Socket.<anonymous> (internal/child_process.js:334:11)\nat emitOne (events.js:96:13)\nat Socket.emit (events.js:188:7)\nat Pipe._handle.close [as _onclose] (net.js:501:12)\n\n[Extension Host] Cannot format due to syntax errors.\n[Extension Host] rejected promise not handled within 1 second\nh.logExtensionHostMessage @ extensionHost.ts:320\nCannot read property 'includes' of undefined: TypeError: Cannot read property 'includes' of undefined\n    at RemoteController.isIgnored (C:\\Users\\oganesh.vscode\\extensions\\carlevans.remote-editor-0.0.1\\out\\src\\lib\\remoteController.js:211:27)\n    at RemoteController. (C:\\Users\\oganesh.vscode\\extensions\\carlevans.remote-editor-0.0.1\\out\\src\\lib\\remoteController.js:98:23)\n    at Generator.next ()\n    at C:\\Users\\oganesh.vscode\\extensions\\carlevans.remote-editor-0.0.1\\out\\src\\lib\\remoteController.js:7:71\n    at __awaiter (C:\\Users\\oganesh.vscode\\extensions\\carlevans.remote-editor-0.0.1\\out\\src\\lib\\remoteController.js:3:12)\n    at LocalController.localController.on (C:\\Users\\oganesh.vscode\\extensions\\carlevans.remote-editor-0.0.1\\out\\src\\lib\\remoteController.js:97:64)\n    at emitOne (events.js:96:13)\n    at LocalController.emit (events.js:188:7)\n    at disposables.push.vscode.workspace.onDidSaveTextDocument (C:\\Users\\oganesh.vscode\\extensions\\carlevans.remote-editor-0.0.1\\out\\src\\lib\\localController.js:84:22)\n    at e.invoke (c:\\Program Files (x86)\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:23:55860)\ne.onUnexpectedError @ shell.ts:443\n. - VSCode Version: Code 1.14.2 (cb82febafda0c8c199b9201ad274e25d9a76874e, 2017-07-19T23:34:09.706Z)\n- OS Version: Windows_NT ia32 10.0.10586\n- Extensions: \nExtension|Author (truncated)|Version\n---|---|---\nvagrant|bbe|0.5.0\nvs-kubernetes|bre|0.0.8\nremote-editor|car|0.0.1\nplsql|cas|0.0.3\ngotemplate|cas|0.1.1\nGradle|caz|1.1.2\ngitignore|cod|0.5.0\nvscode-markdownlint|Dav|0.10.0\nvscode-nomnoml|doc|0.3.0\ngithistory|don|0.2.2\npython|don|0.6.9\nxml|Dot|1.9.2\nvcterminal|esp|0.0.11\ngit-project-manager|fel|1.3.2\ndocker-linter|hen|0.3.0\nPython-autopep8|him|1.0.2\nruby-linter|hoo|1.0.0\nkubernetes-snippets|ipe|0.1.3\ngolang-tdd|joa|0.0.9\nGo|luk|0.6.63\nMagicPython|mag|1.0.11\nVS-code-vagrantfile|mar|0.0.5\nmssql|ms-|1.1.0\nproto|pet|0.0.2\nvscode-docker|Pet|0.0.16\ncode-spell-checker|str|1.3.2\npython|tht|0.2.3\ntmlanguage|Tog|0.7.1\npython-extended-snippets|tus|0.0.1\ngotimeformat|v4r|1.0.1\nvscode-glide|vit|1.0.2\nsimple-ruby-erb|vor|0.2.1\nvim|vsc|0.9.0\ngitblame|wad|2.0.2\nvscode-proto3|zxh|0.1.1\n(1 theme extensions excluded)\n\nSteps to Reproduce:\n1.\n2.\n Launch with `code --disable-extensions` to check. \nReproduces without extensions: Yes/No.   1 ion Host] Error: Command failed: C:\\Backup\\work\\Work\\WorkSpace\\bin\\goreturns.exe -d \n  2  expected ';', found ','\n  3  expected declaration, found 'if'\n  4 '\n  5  expected declaration, found 'IDENT' kafka_topic\n  6\n  7     at ChildProcess.exithandler (child_process.js:223:12)\n  8     at emitTwo (events.js:106:13)\n  9     at ChildProcess.emit (events.js:191:7)\n 10     at maybeClose (internal/child_process.js:885:16)\n 11     at Socket. (internal/child_process.js:334:11)\n 12     at emitOne (events.js:96:13)\n 13     at Socket.emit (events.js:188:7)\n 14     at Pipe._handle.close [as _onclose] (net.js:501:12)\n 15 extensionHost.ts:320 [Extension Host] Cannot format due to syntax errors.\n~. The error highlighting too isn't working as it was before the upgrade.\nnow i dont get any error notifications (lint)..\n. will give it a try \n. Hi,\nhere is what i did \n  Uninstall & reinstalling the go plugin didn't help \nso went for the nuke option\n - uninstalled vs code completly \n - cleaned up all the caches from ~/.vscode \n - rebooted the machine\n - installed the latest vs code 1.4.2 ( current version mentioned above ).\n - installed the go extension \n\nrestarted everything again the go.formatTool to \"gofmt\" \n      & resumed coding ,  \n\nbut still facing the issue which i had mentioned \nbelow is the error stack snapshot\n===============================================\nC:\\tools\\go\\bin\\gofmt.exe -d -e \n: expected if statement or block, found 'IDENT' protoReq\n: missing ',' in composite literal\n: missing ',' before newline in composite literal\nat ChildProcess.exithandler (child_process.js:223:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:191:7)\nat maybeClose (internal/child_process.js:885:16)\nat Socket.<anonymous> (internal/child_process.js:334:11)\nat emitOne (events.js:96:13)\nat Socket.emit (events.js:188:7)\nat Pipe._handle.close [as _onclose] (net.js:501:12)\n\n=================================================. @ramya-rao-a \nI disabled the flags, but the error highlighting is not working now.. nope auto complete is very eratic, it works some times or doesn't work\nsame with go definition. is there a place where i can download older version of the vs code ?\n. Hi Ramya,\neven after setting the formatTool as megacheck the error highlighting doesnot work\n. @ramya-rao-a the files I am editing are under $GOPATH\nfor now have shifted to using vi . @ramya-rao-a  Sure do share the steps, i want to keep using VS code in long run,\nits a good learning experience . will take some time for it ..  but definietly will try it \n which branch should i try for vs-code ? (master) ?\nwhile running the npm got some 404 link errors . hi was able to resolve the 404 error after upgrading the npm to latest version.\n- am using vs-codes master branch itself,\ni followed the steps you had mentioned, for debugging,  the lint errors / warnings were visible until i hit this exception - attached the screen-shot, after hitting this exception all the errors/warnings were cleared away from the \n\n. Attached the stacktrace\nvs_code_err.txt\n. @ramya-rao-a  have disabled all and now am able to see the linting warnings and build errors ...\n. ",
    "andy-trimble": "I too have the same issue. Nothing is working after the VSCode update to 1.14.2. Running Go: Install/Update Tools results in the following error:\nError: command 'go.tools.install' not found. Here is the error preventing the extension from loading:\n[Extension Host] Here is the error stack:  Error: Cannot find module './goExtraInfo'\n    at Function.Module._resolveFilename (module.js:470:15)\n    at Function.Module._load (module.js:418:25)\n    at Function.G.o._load (/Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/node/extensionHostProcess.js:23:399199)\n    at Module.require (module.js:498:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (/Users/atrimble/.vscode/extensions/lukehoban.go-0.6.63/out/src/goMain.js:9:23)\n    at Object.<anonymous> (/Users/atrimble/.vscode/extensions/lukehoban.go-0.6.63/out/src/goMain.js:365:3)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:488:32). The file ~/.vscode/extensions/lukehoban.go-0.6.63/out/src/goExtraInfo.js is in fact missing. After uninstalling and reinstalling the extension, everything is working again.. ",
    "bgentry": "I also had vscode-go stop working on me today. Tried a number of fixes (reinstalling gocode and all deps, upgrading Go, enable/disable the plugin) but the only thing that worked for me was to completely uninstall and reinstall vscode-go.. @ramya-rao-a not explicitly, but I restarted VS Code which I'm assuming lead to auto updates for both it and the extension.. ",
    "FlorianLoch": "Especially improving the display/handling of shadowed variables would be helpful - I just had the situation that the debugger view didn't even show me the most-inner-level definition of my variable, it just showed me the overriden, shadowed one.... ",
    "delicb": "I managed to make it work. \nI have cleaned up my GOPATH so that I do not have any more errors reported by go list all. Errors that I had were with packages that were in $GOPATH/src/github/<username>/<package> and had import comment that required them to be on some vanity import path (like gopkg.in/<package>.v1 or something. I had couple of those, from times that I tried to go get them from github just to figure out they are meant to be fetched from somewhere else. Go leaves such packages, but fails to build them, and I never deleted them manually (until now).\nSo I guess this is related to how vscode-go expects output from go list all to look like and does not expect errors (or at least this specific error).. Not just go get gopkg.in/.... For example, https://github.com/uber-go/zap should be installed by using go get -u go.uber.org/zap. If someone would do go get github.com/uber-go/zap that would result in error:\nbash\npackage github.com/uber-go/zap: code in directory /Users/del-boy/go/src/github.com/uber-go/zap expects import \"go.uber.org/zap\"\nBut folder $GOPATH/github.com/uber-go/zap would be created and because of that when go list all is executed, first few lines are:\n```\n(3.6.1) ~/go/src  \u1405 go list all\ncan't load package: package github.com/uber-go/zap: code in directory /Users/del-boy/go/src/github.com/uber-go/zap expects import \"go.uber.org/zap\"\ncan't load package: package github.com/uber-go/zap/zapcore: code in directory /Users/del-boy/go/src/github.com/uber-go/zap/zapcore expects import \"go.uber.org/zap/zapcore\"\ncan't load package: package github.com/uber-go/zap/zapgrpc: code in directory /Users/del-boy/go/src/github.com/uber-go/zap/zapgrpc expects import \"go.uber.org/zap/zapgrpc\"\ncan't load package: package github.com/uber-go/zap/zaptest: code in directory /Users/del-boy/go/src/github.com/uber-go/zap/zaptest expects import \"go.uber.org/zap/zaptest\"\ncan't load package: package github.com/uber-go/zap/zaptest/observer: code in directory /Users/del-boy/go/src/github.com/uber-go/zap/zaptest/observer expects import \"go.uber.org/zap/zaptest/observer\"\nrest of the packages\n```\nAt least that is what I believe could cause problems, but not I can not reproduce this consistently. I did what I wrote above, but now I do get list of packages in vscode. Earlier I had over 100 packages like this, now I cleaned them all, so number might be relevant (it could take longer for go list all to finish if there are a lot of packages like this or something similar). . ",
    "verkvieto": "@ramya-rao-a you can see the results of echo $GOPATH, echo $PATH, and go env in the integrated terminal in the screenshot below.\n\nThe results in the integratted terminal are as expected (GOPATH set to ~); however, the Go: Current GOPATH command shows differently (GOPATH set to ~/go) and is the GOPATH that is actually used.\nI can work around this in the meantime by setting the go.gopath in the settings.json file or by setting go.inferGopath to true. Only the default setting of detecting the GOPATH from the envrionment variable seems to not be working.. @Tyriar echo $SHELL returns /bin/zsh.. @ramya-rao-a Yes it's still an issue. ~/go still seems to be used even though the GOPATH is set to $HOME in ~/.zshenv.. @ramya-rao-a no I do not see that warning in the Devtools console.\n. ",
    "zero-master": "I failed to reproduce this issue.\n\n```\ncode --version\n1.20.0\nzsh --version\nzsh 5.4.2 (x86_64-unknown-linux-gnu)\n```\n. ",
    "markbrownsword": "I also get this issue, on Ubuntu, using bash (setup is in .bashrc)\n$GOPATH = /home/mark/projects/go\nVSCODE Go: Current GOPATH = /home/mark/go\nSetting go.inferGopath to true gets around it.\n\n. ",
    "peteryates": "OK, so it appears that this is just a problem with my setup and me not really knowing what VSCode is doing under the hood.\nRather than running the debugger from the \"debug test\" link, if I do it from the test window it works as I'd expect:\n\nSo I guess now my question is, when I'm clicking \"debug test\", which configuration is it using and how do I substitute the hardcoded arg with the test name?\njson\n{\n    \"name\": \"Launch test\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"test\",\n    \"program\": \"${workspaceRoot}/backend\",\n    \"args\": [\n        \"-test.run\",\n        \"Test_MakeSureXYZ\"\n    ],\n    \"env\": {\n        \"CONFIG\": \"../config/test.yml\"\n    }\n}\nAs far as I can see, the closest I can get is the ${lineNumber}.. So it would appear that this feature of CodeLens isn't supported yet.. Thank you, this worked as you suggested it might. \njson\n\"go.testEnvVars\": {\n    \"CONFIG\": \"../config/test.yml\"\n}\nI appeared to only be able to make it work by adding the above section to my 'User Settings' file, so this will apply to all of my Go projects. Can I not specify this option somehow in launch.json?\nBut, it's working for the moment, thank you for your help @ramya-rao-a . Ah, excellent, thank you very much!. ",
    "jamietre": "Awesome, thanks! Sorry I missed the more closely related issue in my search.. ",
    "Jgeyen": "I had the exact same issue. I went into dlv and was able to replicate the issue with the unexpected fault. I was on Go version 1.8 and delve version 0.12.1. I updated Go to 1.8.3 and delve to 1.0 RC. That resolved the issue for me. I was able to step over some lines, but not others. For instance, I took the code from this site: https://blog.alexellis.io/golang-json-api-client/ and was able to step over the creation of the url, but not the  instantiation of the spaceClient. Also, if I put the breakpoint after the creation of the spaceClient, it gets to that breakpoint just fine. It is when I do a 'step' that the unexpected fault occurs.. ",
    "ilevine": "Getting the same problem - any news ?. ",
    "charmfocus": "me too!\n\"go.inferGopath\":true. ",
    "ttimasdf": "@ramya-rao-a The same as I got when it was set to false  . ~Err, here comes another question. After upgraded VSCode to 1.15.1, even go.gopath option stopped working as well. I'm not familiar with Extension Development host, how could I provide you more information?~\nEdit: After debugging, go.gopath and go.inferGopath seems to work well, BUT the GOPATH environment variable may not be set correctly. Linter is good but the compilation failed. I will have another look.. From here, the GOPATH env was set to value of go env GOPATH, and debug server run with this value as well. should there be anywhere setting process.env['GOPATH'] to the value of getCurrentGoPath() so that go run could be invoked successfully?. @ramya-rao-a Oh, thanks. I'll try it. With my last comment I was using the code cloned from master branch. In conclusion, linter is good(code completion detected my module), debugger is not(wrong GOPATH env).\nEdit: Compiled module behaves the same as the code.. 2017\u5e748\u670820\u65e5 14:42\uff0c\"Ramya Rao\" notifications@github.com\u5199\u9053\uff1a\n\n@ttimasdf https://github.com/ttimasdf The master branch has quite a few\nchanges since the last released version (0.6.63)\nSo there might be differences in behavior.\nCan you try installing the Go extension using the latest vsix that was\nbuilt from master branch and see if your issue still occurs?\n\nDownload https://github.com/Microsoft/vscode-go/blob/master/Go-\n   latest.vsix\nClose all VS Code windows\nRun code --install-extension Go-latest.vsix from the location where\n   the above file was downloaded\nOpen VS Code\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1139#issuecomment-323567144,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACon0COp4jsJZ6s5CG36mhiBP5x82FPrks5sZ9VRgaJpZM4OzG8q\n.\n. Latest commit(94e6acd2a0c68bb4269dbf13fe9b134ce188614d) fixed it and everything works like a charm. Many thanks \ud83d\udc4d  @ramya-rao-a . \n",
    "VojtechVitek": "Works like charm. Thanks a lot! \ud83d\udc4d . ",
    "Shadowfaxenator": "Yes, I have v2-dev\nWhen I try\ngo tool pprof -svg $GOPATH/bin/go-langserver http://localhost:6060/debug/pprof/heap > heap.svg\nI get \nFetching profile from http://localhost:8060/debug/pprof/heap\nhttp fetch http://localhost:8060/debug/pprof/heap: Get http://localhost:8060/debug/pprof/heap: dial tcp [::1]:8060: getsockopt: connection refused. ",
    "lusis": "@ramya-rao-a sadly neither of the options listed worked. I've tried the latest extension manually installed as well as various other machinations.\nI've scoped to the linting to the package level so that at least helps a little but the problem of cached errors is still there as in these screenshots.\nI introduce an error and save.\n\nI fix the error and save again returning the file to valid state but the line/error is cached somehow\n\n. as a follow up, setting \"go.coverOnSave\": false per https://github.com/Microsoft/vscode-go/issues/1036 appears to have solved the issue. It's not ideal but it's at least a workaround.. ",
    "airlanggacahya": "Yes, I already put the import statement. In fact, \"dep ensure\" is working directly by scanning the go source file for import path, and combined with file on root project to create final list of package to be downloaded. And then pull the source and put into vendor folder. Golang dep: https://github.com/golang/dep\nSo the problem is, run vs-code, put import statement, run terminal, run dep ensure on terminal, dep download and populated the vendor directory, vscode autocomplete and linter fail to recognize the vendor directory and report the import path error and all references is to the import path is error.. Try to restart vs-code after running glide. Maybe related to #1146 . ",
    "Hawken94": "@airlanggacahya  I try it but it doesn't work ( in my windows10) . I remember I can auto-import packages in vendor directories in my ubuntu 16 . I will try it on my ubuntu after I get back home at night .May it isn't a big problem . PS , it can auto-import packages in vendor directories when I use Gogland .. @airlanggacahya I tried . It can work on ubuntu 16.. @ramya-rao-a No, when I use the package(method) at the first time, vs code can't auto-import it's package in win10. Normally, when I write \"println\", it will import fmt package automatically. Sorry for my bad english again. But it can work in ubuntu 16. I don't know the reason. \n. @ramya-rao-a OK,I will try it now. Thank vs code! Thank  Microsoft! Thank you for solving my problem. . @ramya-rao-a Sorry, I took some time to try, but it still dosen't work. It is OK, I almost work on ubuntu16, so it's not a trouble. Thank you again! (windows 10 1703, vs code 1.16.1, go 1.9 ) This issue can be closed. \n\nI describe my problem again. When I glide init and glide get github.com/skip2/go-qrcode (e.g.) , I write \"qrcode\", the vscode didn't prompt and import the package. This is my problem. But in ubuntu, it has a nice prompt and will auto-import the package just like the built-in package. \nThank you again! I can write import \"github.com/skip2/go-qrcode\" manually, so it's not a big problem. \nsorry for my bad english. I can say Chinese if necessary.\nThis is my glide.yaml: (just for testing)\n\npackage: littlezz\nimport:\n- package: github.com/skip2/go-qrcode\n- package: github.com/gorilla/mux\n  version: ^1.5.0\n. @ramya-rao-a Thank you for your praise! \nThis is in Ubuntu 16. Firstly,\n\nSecondly, when I write \"qrcode\", vscode has a nice prompt. And then I press the Enter key, it auto-import the 'qrcode' package.\n\n\nThis is in Windows 10. The version of vscode-go is 0.6.66. I just upgrade it.\nThe setting is OK.\n\nIt doesn't work in windows 10.\n\nAs usual, it can auto-import the built-in packages and packages in GOPATH.\n\n\nThis is my test. I don't know what will happen in your windows 10. If you can recurrent my issues, it can't be better.\nMy gmail account is xionghekuan@gmail.com. If you have other problem to ask, please contact with me. \nHappy mid-Autumn Festival!\n. @ramya-rao-a When I run Go: Browse Packages command, 'qrcode' appears in the list. But Go: Add Import doesn't.. @ramya-rao-a I had a try just now. It has a nice prompt. It works. Thank you very much!!!. @ramya-rao-a I find another problem today. The functions or interfaces can't go to definition if they are in vendor directory .\n\n\n\n. @ramya-rao-a When I set go.docsTool to gogetdoc, it can go to definition.But there is another question. When my mouse on the function, it can't show the definition.\nPackages in GOPATH can show :\uff09\uff1a\n\nIt doesn't work.\n\nThanks all the way. I think it is not a big problem ^_^. @ramya-rao-a I am able to see the breadcrumbs in both files, too.\n- VSCode Version: 1.26.1\n- OS Version: Mac OS 10.13.6. ",
    "mbanzon": "Too bad. Fortunately I got it working with buildFlags.\nJust to clarify (will post in the twitter thread as well for anyone following there): buildFlags takes a string argument. It is working with: \"buildFlags\": \"-tags mytag\".. I also see this on all current versions:\n macOS 10.14.1\n VS Code 1.28.2\n vscode-go 0.7.0\n Go 1.11.2\n* Delve 1.1.0. This description matches what I am seeing as well. I have tried on macOS (latest, 10.14.1) and Windows 10 - it is only on macOS I see the error where the process is kept hanging.. ",
    "Laterality": "was stupid question,\nI solved the problem by close all the vscode windows i opened and re-run. ",
    "szyhf": "@ramya-rao-a Thanks for reply !\nOther auto-completion features works well. While type a function \\ variable \\ constant \\ method it can provide tips as I expect. \nIf I call \"Go: Add import\", it can also list package in my $GOPATH and $GOROOT path.\nIf I imported an package, it can provide the struct \\ function in the package too.. @ramya-rao-a :\nUnfortunately, none of custom package or built-in packages work in my computer QAQ. Seems not working, running response:\nshell\n$> code --install-extension ./Go-latest.vsix\nExtension 'Go-latest.vsix' was successfully installed!\nThen close vscode and restart it.\nTry to type built-in pkg like \"strings\" or custom pkg, still not work.\nI'm wondering if there any possible reason may cased by directory access permission ? Like visit the pkg of GOPATH ? I check my gopath and I think it's fine (at least \"o+rx\").\n\nhere is my go config, I'm not sure if it can help:\njson\n//-------- Go configuration --------\n    // Infer GOPATH from the workspace root.\n    \"go.inferGopath\": false,\n    // On save, runs the configured Lint tool on current workspace, current package or nothing at all.\n    \"go.lintOnSave\": \"off\",\n    // On save, runs 'go vet' on current workspace, current package or nothing.\n    \"go.vetOnSave\": \"package\",\n    // Flags to pass to `go tool vet` (e.g. ['-all', '-shadow'])\n    \"go.vetFlags\": [\n        \"-all\"\n    ],\n    // Pick 'gofmt', 'goimports' or 'goreturns' to run on format.\n    \"go.formatTool\": \"goimports\",\n    // [EXPERIMENTAL] Run formatting tool on save.\n    \"go.formatOnSave\": true,\n    // Use gotype on the file currently being edited and report any semantic or syntactic errors found after configured delay.\n    \"go.liveErrors\": {\n        \"enabled\": true,\n        \"delay\": 500\n    },\n    // Complete functions with their parameter signature\n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"go.autocompleteUnimportedPackages\": true,. Hi @ramya-rao-a , thanks for help!\nWhile just restarting vs-code, run Browse Packages will response Finding packages... Try after sometime..\nAnd then I open the Developer Tools and got an error, I'm not sure if it's related:\nfile:///Applications/Visual_Studio_Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js\n(node:62118) DeprecationWarning: os.tmpDir() is deprecated. Use os.tmpdir() instead.\nAfter waiting for 10 minutes, Browse Packages still response Finding packages... Try after sometime..\nThat might be the problem? . @ramya-rao-a Thank for help! I'll try them latter !!!. @sgyang Really? Thanks, I just got the debug environment done and receive your issue ! . @ramya-rao-a Yes, I'd love to, my pleasure ~ How can I join the group ?. Really happy to see that and thanks a lot ~. ",
    "sgyang": "@ramya-rao-a The second breakpoint was not getting hit (which means go list all got stuck?).. @ramya-rao-a There is no output.\nWhen debugging I checked running processes and found go list -f '{{.Name}};{{.ImportPath}}' all is running forever.\nWhen I directly typed go list -f '{{.Name}};{{.ImportPath}}' all on my terminal, it took 10s to get the output but it did not get stuck.\nI found my go list all emitted tons of can't load package warning messages on stderr as well as @szyhf (I installed kubernetes, gRPC, and GoogleCloudPlatform related packages. It seems their simlinks cause the warnings.)\nSo, I tried to ignore the stderr, and then the issue got fixed. I created a small PR to fix it so please review it.. Me neither. (code 1.15.1, vscode-go 0.6.64)\nIt may be related to #1152. I set \"go.autocompleteUnimportedPackages\" to true but it didn't work.\nDowngrading vscode also didn't fix this issue.\n\n. Me neither. (code 1.15.1, vscode-go 0.6.64)\nIt may be related to #1152. I set \"go.autocompleteUnimportedPackages\" to true but it didn't work.\nDowngrading vscode also didn't fix this issue.\n\n. OK I found version 0.6.62 worked properly. 0.6.63 and 0.6.64 didn't work.\nFYI: I did:\n\nRemove current vscode-go\nDisable auto-update feature of extensions (\"extensions.autoUpdate\": false) \nDownload previous version from https://lukehoban.gallery.vsassets.io/_apis/public/gallery/publisher/lukehoban/extension/go/0.6.62/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage\nRename it to go-0.6.62.vsix\nInstall this by code --install-extension go-0.6.62.vsix\n\nAnd then the issue is fixed.. OK I found version 0.6.62 worked properly. 0.6.63 and 0.6.64 didn't work.\nFYI: I did:\n\nRemove current vscode-go\nDisable auto-update feature of extensions (\"extensions.autoUpdate\": false) \nDownload previous version from https://lukehoban.gallery.vsassets.io/_apis/public/gallery/publisher/lukehoban/extension/go/0.6.62/assetbyname/Microsoft.VisualStudio.Services.VSIXPackage\nRename it to go-0.6.62.vsix\nInstall this by code --install-extension go-0.6.62.vsix\n\nAnd then the issue is fixed.. @ramya-rao-a The issue is related to all unimported packages. This log and fmt thing is just an example.\nBefore importing log, hitting log does not show suggestions, but after importing log, hitting log fires auto-completion. Previously, auto-completion works properly without importing packages (and I love this feature).\nAnd it is not only about these built-in packages. For example, hitting grpclog doesn't show any suggestions although grpc-go (https://github.com/grpc/grpc-go/) is installed and the grpclog is an unique identifier. 0.6.62 fixes this.. ",
    "giulianob": "@ramya-rao-a Has there been an attempt to switch to v2? I was looking through the API and it doesn't seem like it has changed much. I'm wondering if anyone has tried and if there is a list of known issues anywhere.. Is there anyway to use v2 when debugging tests by clicking the \"Debug test\" in the IDE? It looks like there is a hard coded debug config in vscode-go.. ",
    "awalterschulze": "Wow yes, this would be really nice :). My usecase would be that goderive <filename> is run on a file whenever I save it.  Just like gofmt.\nIt could also be nice if the command line flags were configurable.\nWould that be possible?. ",
    "mrkaspa": "I can help too. It's working buggy with golang 1.11 and go modules dependencies. It worked adding these settings\n\"go.formatTool\": \"goimports\",\n \"go.formatFlags\": [\"-w\"],. ",
    "hanleym": "@ramya-rao-a I created a PR (#1335) that should fully implement it. Let me know if there is anything I missed. P.S. Thanks for being awesome; your episode of gotime was great.. @buyology You're welcome to take a look. If I do get to it it won't be for quite a while; I haven't had much time to spare.. ",
    "dastergon": "Any updates on this PR? expanderr support is a quite useful addition. Any progress on this PR?. I totally understand, and it makes sensel. Thanks :+1:. I wasn't aware of that! Thank you! . ",
    "ataliadvanstep": "Hi,\nI have exactly the same issue. I am unable to debug from mac os into a docker container.\nI use docker-compose :\ncommand:\n    hostname: command-microservice\n    env_file:\n      - ./.env\n    build:\n      context: $GOPATH/src/github.com/imapura/imapura-backend-api-go/\n      dockerfile: ./microservice/command/Dockerfile\n    security_opt:\n      - seccomp:unconfined\n      - apparmor:unconfined\n    cap_add:\n      - SYS_PTRACE\n    entrypoint: dlv debug ./microservice/command \u2013headless \u2013listen=:2345 \u2013api-version=2 \u2013log\n    ports:\n      - \"2345:2345\"\n    expose:\n      - \"2345\"\n    depends_on:\n      - datastore\n      - pubsub\n    links:\n      - datastore\n      - pubsub\nMy launch.json\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Remote Docker\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"/go/src/github.com/imapura/imapura-backend-api-go/\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/\",\n            \"env\": {},\n            \"args\": [],\n            \"trace\": true,\n            \"showLog\": true\n        }\n    ]\n}\nVerbose logs are written to:\n/var/folders/62/cc5sglt13z78rh_pbdhx_mww0000gn/T/vscode-go-debug.txt\n10:58:16 AM, 8/26/2017\nInitializeRequest\nInitializeResponse\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/atali/Development/go/src/github.com/imapura/imapura-backend-api-go/microservice/command/command.go (/go/src/github.com/imapura/imapura-backend-api-go/microservice/command/command.go) :93\nError on CreateBreakpoint\nAll set:[null]\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\nIf I try to debug manually, the breakpoint match\n```\ndlv connect 127.0.0.1:2345\nType 'help' for list of commands.\n(dlv) break main.main\nBreakpoint 1 set at 0xa16533 for main.main() /go/src/github.com/imapura/imapura-backend-api-go/microservice/command/command.go:89\n(dlv) continue\n\nmain.main() /go/src/github.com/imapura/imapura-backend-api-go/microservice/command/command.go:89 (hits goroutine(1):1 total:1) (PC: 0xa16533)\n(dlv) next\nmain.main() /go/src/github.com/imapura/imapura-backend-api-go/microservice/command/command.go:91 (PC: 0xa16541)\n(dlv) next\nmain.main() /go/src/github.com/imapura/imapura-backend-api-go/microservice/command/command.go:92 (PC: 0xa165b2)\n(dlv)\n```\n\nAny advice ?. @ramya-rao-a I was able to set breakpoints in other lines, as you can see below :\n\nThen in the server , as suggested, I removed --api-version=2 and now it works ! If I understand, api-version=2 is not yet supported ? Will you support it soon ?. ",
    "cheptsov": "@ramya-rao-a I removed \"api-version=2\" and it just works. Thank you very much!. ",
    "hummerd": "I am glad I can help!. Ok, I've installed Go-latest.vsix. If anything goes wrong I will report about it.. Thank you!. Hmm, I don't understand - github says ramya-rao-a requested changes, but I see no changes in last build. What should I do?. I get it. Thanks!. Some small fix for #2136 - #2167 :). > #2121 - works as expected. The only thing missing right now would be some predefined key combination, e.g. Ctrl + F12 or Cmd + F12 (on macOS)\nIt would be nice but:\nCtrl + F12 is already used for go to Implementation\nAnd F12 is go to Definition\nMay be Ctrl + Shift + F12 ?\n. Type position is the new feature. I think extension can not separate this false cases from real ones - missing type position case (with old guru). Rest of guru's output is the same. So if we don't want this we should disable promtToUpdate at all. :(. Here is PR #2172 for logging instead of prompt. Nop. We need patch guru for it. From guru's point of view it's ok. Why should it return values that are empty.\ntype DescribeValue struct {\n    Type     string       `json:\"type\"`               // type of the expression\n    Value    string       `json:\"value,omitempty\"`    // value of the expression, if constant\n    ObjPos   string       `json:\"objpos,omitempty\"`   // location of the definition, if an Ident\n    TypesPos []Definition `json:\"typespos,omitempty\"` // location of the named types, that type consist of\n}\nYou can notice these omitempty tags on optional fields.. > Thanks @segevfiner!\n\n@hummerd, I didnt know you had implemented the feature in guru, nice job!\n\nThanks :) It was a multi-step move.. It's a good idea, so here is PR #2174.. @segevfiner @ramya-rao-a  Do you assume it should behave like \"Go To Definition\" only on types or at any point where it can not behave like \"Go To Type Definition\"?. I've made some investigation. It's impossible to separate \"Go To Type Definition\" on type or method. So we had two options - fallback to \"Go To Definition\" on every case when we can not navigate to Type Definition or never did it.. Replaced with #2174. > Can you fix the linter errors? Run npm run lint locally to see the errors\nSorry. Fixed.. You right! Done.. Of course :). I will make check if type property exist but typespos don't - this means that we have old version and should call promptForUpdatingTool.. Of course. Changed range to position.. Removed resolve, since I think guru will always return absolute paths.. I will make some measurement for guru with scope and without it - it will help us decide.. My measurement results says that scope doesn't affect describe's performance. I think describe looking for type definition from imports only - there is no need to analyze whole workspace and no need in scope.. @ramya-rao-a I can try it on some big project from github and show measurements result. Should I?. @ramya-rao-a ping :smiley: . So I tried it on kubernetes. I tried:\n```\nfrom go/src/k8s.io/kubernetes/pkg/kubectl\ntime guru -json describe apply.go:#3880\ntime guru -json -scope . describe apply.go:#3880\ntime guru -json -scope k8s.io/kubernetes/pkg/kubectl describe apply.go:#3880\n```\nAll gives same results (on my machine mean real ~ 2.03s). Please take a look at discussion here #2171.. ",
    "thanhps42": "Me too. ",
    "zeallag": "me to. ",
    "xxxtonixxx": "Me too \ud83d\udc4d It happens because when I run debug, it recompiles everthing:\nIf a set this options\n{\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/main.go\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true,\n            \"buildFlags\": [\"-v\"] // Using this option I can see the log\n        }\nThe output log is:\nruntime/internal/sys\nruntime/internal/atomic\nruntime\nerrors\ninternal/cpu\ninternal/race\nsync/atomic\nunicode\nunicode/utf8\nsync\ncrypto/subtle\nmath\nencoding\nunicode/utf16\nmath/bits\nio\nsyscall\nhash\nhash/crc32\nbytes\nstrings\nstrconv\nbufio\ncontainer/list\ncrypto/cipher\ncrypto/internal/cipherhw\ntime\ninternal/syscall/unix\ncrypto/aes\ncrypto\ncrypto/sha512\ncrypto/hmac\ncrypto/md5\ncrypto/rc4\ncrypto/sha1\ncrypto/sha256\ninternal/nettrace\ninternal/singleflight\npath\ntext/tabwriter\ninternal/poll\nvendor/golang_org/x/crypto/poly1305\nvendor/golang_org/x/crypto/curve25519\nvendor/golang_org/x/text/transform\nhtml\nos\nmyproject/vendor/github.com/mattn/go-isatty\n... and a lot more\nHow can I avoid the recompiling step?. I have reached a workaround using the exec mode and launching a prebuild task.\nHere is my launch.json\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"exec\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/debug\",\n            \"preLaunchTask\": \"build-debug\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\nAnd here my tasks.json\njson\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"taskName\": \"build-debug\",\n            \"type\": \"shell\",\n            \"command\": \"go\",\n            \"group\": \"build\",\n            \"presentation\": {\n                \"echo\": true,\n                \"reveal\": \"never\",\n                \"focus\": false,\n                \"panel\": \"shared\"\n            },\n            \"args\": [\n                \"build\",\n                \"-i\",\n                \"-gcflags\",\n                \"'-N -l'\"\n            ],\n            \"linux\": {\n                \"args\": [\n                    \"-o\",\n                    \"debug\",\n                    \"${workspaceRoot}/main.go\"\n                ]\n            },\n            \"osx\": {\n                \"args\": [\n                    \"-o\",\n                    \"debug\",\n                    \"${workspaceRoot}/main.go\"\n                ]\n            },\n            \"windows\": {\n                \"args\": [\n                    \"-o\",\n                    \"debug.exe\",\n                    \"\\\"${workspaceRoot}\\\\main.go\\\"\"\n                ]\n            },\n            \"problemMatcher\": [\n                \"$go\"\n            ]\n        }\n    ]\n}\nThese files are into my .vscode folder \ud83d\udc4d . I think it is problem of dlv. I tested using shell and dlv command.... ",
    "zaaksam": "@xxxtonixxx Thanks! It's very helpful for me.. Back to normal on Go 1.10. ",
    "goofle": "Any news about fixing this? It should be easier than creating a tasks.json.\nAnd be noted, it compiles EVERYTHING, even the packages you haven't used in your project.\nIs it the dlv issue or a vscode issue?. Yeah, I did search around a little and it seems the issue's roots go back to go 1.9. It probably doesn't make sense for dlv developers to make a \"workaround\" solution either. And meanwhile your suggestion seems the right way to proceed, so I'm going with the tasks.json file.. Forgive me, but what is optimized code exactly? Can anyone elaborate? . ",
    "SteelPhase": "I think this is going to be related to derekparker/delve#970 and golang/go#19340\nThis slow down is a byproduct of a fix in delve to prevent debugging optimized code. you can see the change in this commit.\n@xxxtonixxx's solution will bypass this fix, and may reintroduce the bug unknowingly.. I think this goes into more detail than I can about compiler optimizations in Go. . As i understand it, the changes for golang/go#19340 are supposed to make it into go 1.10, and delve   will be able to resolve derekparker/delve#970 by reverting the change to recompile all dependencies to ensure optimizations are disabled. This should all go away around the release of 1.10. @tms320 Go 1.10 is planned for February, once that is released this problem should be able to be resolved.. So go 1.10 is out, and delve 1.0.0 is also available. I've tested using both of those and the latest version of vscode. Start Debugging is noticeably faster now. Technically this issue can be closed now. Though there is not full solution for anyone stuck on 1.9.. @rrrezende I actually haven't run into any issues with stopping and restarting. Maybe that is related to another issue. . All the tools do appear to work, but is depended on the Specific GOOS at the time of their execution it appears. \nThe go extention for vscode should be able to resolve this issue in one way or another.\nA quick and dirty solution i would suggest would be modifying the GOOS environment variable for executions of these tools when the are attempted on files with GOOS suffixes.\nEven if it isn't default functionality, an option to turn it on would be nice.. Excellent point. Definitely should have included this before. This functionality is standard in the Golang build system. Along with file suffixes, build comments can be included at the top of the file that introduce the same limitation.\n\nBuild Constraints\nA build constraint, also known as a build tag, is a line comment that begins\n// +build\nthat lists the conditions under which a file should be included in the package. Constraints may appear in any kind of source file (not just Go), but they must appear near the top of the file, preceded only by blank lines and other line comments. These rules mean that in Go files a build constraint must appear before the package clause.\nTo distinguish build constraints from package documentation, a series of build constraints must be followed by a blank line.\nA build constraint is evaluated as the OR of space-separated options; each option evaluates as the AND of its comma-separated terms; and each term is an alphanumeric word or, preceded by !, its negation. That is, the build constraint:\n// +build linux,386 darwin,!cgo\ncorresponds to the boolean formula:\n(linux AND 386) OR (darwin AND (NOT cgo))\nA file may have multiple build constraints. The overall constraint is the AND of the individual constraints. That is, the build constraints:\n// +build linux darwin\n// +build 386\ncorresponds to the boolean formula:\n(linux OR darwin) AND 386\nDuring a particular build, the following words are satisfied:\n- the target operating system, as spelled by runtime.GOOS\n- the target architecture, as spelled by runtime.GOARCH\n- the compiler being used, either \"gc\" or \"gccgo\"\n- \"cgo\", if ctxt.CgoEnabled is true\n- \"go1.1\", from Go version 1.1 onward\n- \"go1.2\", from Go version 1.2 onward\n- \"go1.3\", from Go version 1.3 onward\n- \"go1.4\", from Go version 1.4 onward\n- \"go1.5\", from Go version 1.5 onward\n- \"go1.6\", from Go version 1.6 onward\n- \"go1.7\", from Go version 1.7 onward\n- \"go1.8\", from Go version 1.8 onward\n- \"go1.9\", from Go version 1.9 onward\n- \"go1.10\", from Go version 1.10 onward\n- any additional words listed in ctxt.BuildTags\nIf a file's name, after stripping the extension and a possible _test suffix, matches any of the following patterns:\n*_GOOS\n*_GOARCH\n*_GOOS_GOARCH\n(example: source_windows_amd64.go) where GOOS and GOARCH represent any known operating system and architecture values respectively, then the file is considered to have an implicit build constraint requiring those terms (in addition to any explicit constraints in the file).\nTo keep a file from being considered for the build:\n// +build ignore\n(any other unsatisfied word will work as well, but \u201cignore\u201d is conventional.)\nTo build a file only when using cgo, and only on Linux and OS X:\n// +build linux,cgo darwin,cgo\nSuch a file is usually paired with another file implementing the default functionality for other systems, which in this case would carry the constraint:\n// +build !linux,!darwin !cgo\nNaming a file dns_windows.go will cause it to be included only when building the package for Windows; similarly, math_386.s will be included only when building the package for 32-bit x86.\nUsing GOOS=android matches build tags and files as for GOOS=linux in addition to android tags and files.. So in my testing altering the GOOS environment variable passed to the tools enabled the functionality listed originally. GOARCH should work the same way. Parsing those out of the file name should be relatively straight forward. As an example \"go.toolsEnvVars\": {\"GOOS\": \"linux\"} was enough to handle that. The drawback there is that delve fails to work now, as the build would be for a linux OS. I guess i would limit it to only modify those environment variables in an instance where a user input on that file would cause a go command to execute.\n\nParsing build constraint comments seems like a can of worms to me, and I'm not sure what the best approach would be to handle constraints outside of GOOS and GOARCH. This appears to solve #2045. I've opened Microsoft/vscode-go#2068 with the changes requested.. @ramya-rao-a I've rebased this branch against master, and I think I changed what you were pointing out.. Yes, as far as I understand Delve would be the only tool that would be involved at that moment. As of writing this it would appear that my version of Delve was the latest commit 2e0a331fdc55bbe67a257d17f0d7c285471c9294\n. Found a temporary solution in #2336, and adding \"editor.formatOnSaveTimeout\": 1500 does appear to resolve it.\nIs there anyway vscode-go could note that formatting timed out?\n\n@lloiser The timeout issue with format on save issue can be fixed with updating the editor.formatOnSaveTimeout setting\ngoreturns is not known to be working with modules reliably yet. I would suggest to use goimports instead. Remember to update your version of goimports to get the latest fixes that enables it to work with modules. Run Go: Install/Update Tools -> select goimports -> Press Ok\n\nOriginally posted by @ramya-rao-a in https://github.com/Microsoft/vscode-go/issues/2336#issuecomment-465855645. Found it in Log(Window) 2019-02-27 23:19:19.893] [renderer1] [warning] Aborted format on save after 750ms. ",
    "leesjensen": "I used the task workaround to speed up debugging of the application, but I still get a slow down on debugging tests. Does anyone have a work around for that? Very painful.. For me the debug performance is fine, but the constant flipping to proc.go is really annoying.. ",
    "delaneyj": "On win10x64 with go1.9 I'm getting Warning: the task 'build-debug' is a shell command and either the command name or one of its arguments has unescaped spaces. To ensure correct command line quoting please merge args into the command..  Not sure what part its complaining about.\nEDIT: Didn't like the ' in args, changed to \"\\\"-N -l\\\"\" in `tasks.json' and now works.. Doesn't seem to work in gdlv, though I might have something setup incorrectly.  Currently I'm launching with this config in vscode\njson\n{\n            \"name\": \"Run  Editor with external Delve\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\":\"${workspaceRoot}/cmd/editor\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/cmd/editor\",\n},\nUsing this in a external terminal\n```bash\n/bin/bash\ndlv debug dirname ${BASH_SOURCE[0]} -l 0.0.0.0:2345 --api-version=2 --headless=true -- server\n```\nAble to hit breakpoints but would obviously like it to show up directly inside of vscode's debug output.  If it helps at all go run main.go runs from the integrated terminal.  Is there a config flag I'm missing or is this just not possible?. I changed the launch.json to \n{\n            \"name\": \"Run Test\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${workspaceRoot}/cmd/editor/main.go\",\n},\nIn Debug Console get the response\nAPI server listening at: 127.0.0.1:21076\n2018/11/27 22:30:06 can't exit cleanly: can't run backing tview application: terminal entry not found\nSo it appears to not be directly tied to dlv, does this help narrow the issue?. > presumably, it doesn't allocate a pseudo terminal automatically either.. I agree that adding terminal is probably what I'm looking for.\nCould vscode-go internally launch a new terminal, run headless dlv and attached to the new terminal?\nAlso closing that terminal on exit as a config option would be an added bonus.   Keeping things integrated in vscode would definitely keep the smooth general flow that debugging most apps has.\nI'm unfamiliar with the vscode-go code base and don't know if all the right hooks are there to do what I'm proposing.. ",
    "tms320": "I have the same problem - debugging starts in 20-25 seconds after I push \"Start Debugging\" button.\nMy OS is Windows 10, Go v.1.9.2, delve [1.0.0-rc.2] 2017-10-16.\nWorkaround using the exec mode and launching a prebuild task (see above) reduced startup time to 15 seconds.. I reinstall the Go tools and got another list of fails:\nInstalling github.com/mdempsky/gocode SUCCEEDED\nInstalling github.com/uudashr/gopkgs/cmd/gopkgs SUCCEEDED\nInstalling github.com/ramya-rao-a/go-outline SUCCEEDED\nInstalling github.com/acroca/go-symbols FAILED\nInstalling golang.org/x/tools/cmd/guru FAILED\nInstalling golang.org/x/tools/cmd/gorename FAILED\nInstalling github.com/derekparker/delve/cmd/dlv FAILED\nInstalling github.com/stamblerre/gocode FAILED\nInstalling github.com/rogpeppe/godef FAILED\nInstalling github.com/ianthehat/godef FAILED\nInstalling github.com/sqs/goreturns FAILED\nInstalling golang.org/x/lint/golint FAILED. The problem was caused by my cloud-synchronizing tool (Yandex.Disk) which tried to sync all my go folders during installation 'Analysis Tools'. I turned it off and everything installed without any problem.. ",
    "pd93": "This issue popped up for me today. After reading the comments above, I got curious and temporarily installed the Go 1.10 beta1 (on Windows 10) to see if it's any better. From what I can tell, this is indeed fixed in the next version. Bring on Feb.. ",
    "rznd": "Starting is fast for me with go 1.10 and delve 1.0, but stopping/restarting the debugger is still very slow.. ",
    "bbbmj": "the previous issue is https://github.com/Microsoft/vscode/issues/32935#issuecomment-325889252. ",
    "kmikiy": "I chose tp and tv initially because it was analogous to the already existing lp And lv.\njson\n...\n        \"log.Println\": {\n            \"prefix\": \"lp\",\n            \"body\": \"log.Println(\\\"$1\\\")\"\n        },\n        \"log.Printf\": {\n            \"prefix\": \"lf\",\n            \"body\": \"log.Printf(\\\"$1\\\", ${2:var})\"\n        },\n        \"log variable content\": {\n            \"prefix\": \"lv\",\n            \"body\": \"log.Printf(\\\"${1:var}: %#+v\\\\\\\\n\\\", ${1:var})\"\n        },\n...\nAlthough, tf won\u2019t work because it would conflict with the existing tf which is for test functions.\nI will gladly change the prefix if you think tland tlf is mor fitting.. How about\ntl for t.Log\ntlf for t.Logf\nand \ntlv for logging variable content with t.Logf\n?\ne.g:\n...\n        \"t.Log\": {\n            \"prefix\": \"tl\",\n            \"body\": \"t.Log(\\\"$1\\\")\"\n        },\n        \"t.Logf\": {\n            \"prefix\": \"tlf\",\n            \"body\": \"t.Logf(\\\"$1\\\", ${2:var})\"\n        },\n        \"t.Logf variable content\": {\n            \"prefix\": \"tlv\",\n            \"body\": \"t.Logf(\\\"${1:var}: %#+v\\\\\\\\n\\\", ${1:var})\"\n        },\n.... ",
    "cdhunt": "@ramya-rao-a I see vscode installed delve Installing github.com/derekparker/delve/cmd/dlv SUCCEEDED but I can't find an executable and dlv debug fails.\nMy GOPATH and GOROOT are actually different, I just anonymized them for the issue.\nbuild is indeed the command argument for the program I'm attempting to debug.. ",
    "andrewsav-datacom": "Just for the sake of any future visitors who try to debug packer. Packer spawns child processes to do all subtasks it needs to do, so even if you get this particular issue solved, you are still not there - you'll be debugging just the initial parent that is not doing match. I personally not sure how and if hashicorp debugs this product, so I personally had to resort to debugging by logging, without breakpoints.\nThis indeed has very little to do with dlv or vscode-go. ",
    "isavcic": "Thank you for the explanation! Any way to change font size of it?. Note that I cannot reproduce this from the command line: both gofmt and goreturns properly notice the error and won't overwrite the file.. Output when saving:\n```\n/go/src/local/broken>Finished running tool: /go/bin/golint\n/go/src/local/broken>Finished running tool: /Users/ivan/.gvm/gos/go1.10/bin/go vet ./...\n/go/src/local/broken/main.go:6: syntax error: missing statement after label\n/go/src/local/broken/main.go:6: newline in string\n/go/src/local/broken>Finished running tool: /Users/ivan/.gvm/gos/go1.10/bin/go build -i -o /var/folders/vy/_x8ql9q54plgbh3nfpn4h9q00000gn/T/go-code-check local/broken\n/go/src/local/broken/main.go:6: syntax error: missing statement after label\n/go/src/local/broken/main.go:6: newline in string\n```\nWhen I run those same commands manually, the source file is unchanged and doesn't contain dubious extra spaces.. Turns out to be an issue with Visual Studio Code Format plugin, after I disabled it everything went back to normal.\n. ",
    "joelpresence": "@ramya-rao-a thanks for the quick response!\nI had tried those things before and they didn't help, but I'll try them again ... Hold on!  :-)\nAnd yes, I mean parameter hints, like in your screenshot.. ```\nInstalling 13 tools\n  gocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  gomodifytags\n  impl\n  godef\n  godoc\n  goreturns\n  golint\n  gotests\nInstalling github.com/nsf/gocode SUCCEEDED\nInstalling github.com/tpng/gopkgs SUCCEEDED\nInstalling github.com/ramya-rao-a/go-outline SUCCEEDED\nInstalling github.com/acroca/go-symbols SUCCEEDED\nInstalling golang.org/x/tools/cmd/guru SUCCEEDED\nInstalling golang.org/x/tools/cmd/gorename SUCCEEDED\nInstalling github.com/fatih/gomodifytags SUCCEEDED\nInstalling github.com/josharian/impl SUCCEEDED\nInstalling github.com/rogpeppe/godef SUCCEEDED\nInstalling golang.org/x/tools/cmd/godoc SUCCEEDED\nInstalling sourcegraph.com/sqs/goreturns SUCCEEDED\nInstalling github.com/golang/lint/golint SUCCEEDED\nInstalling github.com/cweill/gotests/... SUCCEEDED\nAll tools successfully installed. You're ready to Go :).```. Didn't help.  :-( . Still broken.  Any suggestions?\nI do get a popup, but it is not useful, whereas in a non-test file I'll see something like foo(accountId int64, name string) in the test file the popup says foo(int64, string) as in the param names are dropped.  So that's not useful to me because I need to know the names of the params as well as their types.\nAny ideas why the param names are being dropped by VSCode/VSCode-go?\nThanks. I am up for it!  How do I run the extension from source?. Thanks @ramya-rao-a !  I will attempt to debug this weekend and report back in this issue .... I'm on the latest version of VSCode, using the latest vscode-go and go 1.9.2 on macos Sierra latest version.. @ramya-rao-a \nWhat version of the Go extension are you using?\n- the latest, 0.6.69\nHave you recently upgraded the Go version or the OS? If yes, then run Go: Install/Update Tools to ensure that the dependent Go tools have been recompiled\n- No I have NOT recently updated.  But my go tools are all up to date.\nWhat action was taken just before the progress indicator appeared? Renaming, Go to definition, file save or just typing? Try to get a repro to answer this question.\n- Any action causes this.  All actions cause this.  Edit a file.  Run tests separately in terminal (bash) using go test causes this.  Typically it's worst when I edit a file, save it and then go to the shell to run tests.  I don't like the test output in VSCode so that's why I run them in the shell.\nCan you share your Go related settings?\n{\n  \"go.testEnvVars\": {\n    \"REDIS_URL\": \"redis://localhost:6379\"\n   },\n  \"editor.formatOnSave\": true,\n  \"files.autoSave\": \"off\",\n  \"files.autoSaveDelay\": 5000,\n  \"go.formatOnSave\": true,\n  \"go.gocodeAutoBuild\": false,\n  \"go.lintOnSave\": \"off\",\n  \"go.vetOnSave\": \"off\",\n  \"go.buildOnSave\": \"off\"\n}\nDo you still see this with all other extensions disabled?\n- I do not see it with any other language, like JS, so why would turning off all other extensions have an impact?  All other extensions are unrelated to go.  I only have one go extension.  How would I do this?\nAny errors in the console when this happens? Help -> Developer Tools -> Console\n- Nothing that I can see, no\nAny ideas?  I really love VSCode, but it's SO slow now that I'm thinking of abandoning it for go because it really slows down my productivity.\nAny help would be hugely appreciated.  :-). I'm also seeing tons of warnings like this in the VSCode dev console:\n[Violation] Added non-passive event listener to a scroll-blocking 'touchstart' event. Consider marking event handler as 'passive' to make the page more responsive.\n[Violation] Added non-passive event listener to a scroll-blocking 'touchmove' event. Consider marking event handler as 'passive' to make the page more responsive.\nthese seem to involve 'raw.marked.js`.\nThen a number of errors about broken pipes.. Hi @ramya-rao-a ,\nI've followed your suggestions and I guess they help a bit, but not much.  VSCode is still horribly slow on go 1.9.2.\nFor example, I see \"Code Helper\" in activity monitor using 54% of my cpu, with parent process Code.  Any ideas how to dig deeper and see what is causing this within VSCode?. Hi @ramya-rao-a , it seems like there's a lot of go list -json that are using some cpu.  But still, the VSCode \"CodeHelper\" is the principal culprit ... Any further tips?  Thanks!. Well, I just upgraded to the November release, 1.19.0 and all of sudden VSCode is really fast again and all the slowdowns disappeared.  Nice work by your team!  Thanks so much for all of your help and all the hard work you do on our behalf.  Things are fast again!  :-)\nThis feels resolved, so I'm going to close this.\nThanks again @ramya-rao-a .. ",
    "jonathan-robertson": "@joelpresence I'm on go 1.9.2 but was initially having a similar issue until I realized the problem was on my end. This might not apply to you, but it did for me and may help you or someone else who winds up on this issue page.\nUsing the example you provided:\n```go\nfunc TestFoo(t *testing.T) {\n  assert := assert.New(t)\nfoo := NewFoo()\n  foo.SomeMethod(/ params completion doesn't work here /)\n}\n```\nNo package methods will populate params for me (even standard packages like fmt) unless that package is in the import block. This seems relatively basic at first, but I had gotten used to having the import block collapsed and relied on goimport to auto-import packages for me on save, so this was something that took me a bit of time to notice. I'd be 'in the flow' and suddenly not seeing params for methods I created a few months ago and rarely use anymore. \nSometimes goimports appears to be triggered automatically while I'm programming without having to manually save to trigger it... but it seems that this doesn't happen when an error is present. Having a variable declared but not used will result in an error, so (it could be a stretch) perhaps this is related to what you were experiencing?\nAs a supporting example, the following code does not provide suggestions for me (for fmt) unless I add \"fmt\" to the import block, or manually save (which adds fmt for me):\n```go\nimport (\n    \"os\"\n    \"testing\"\n    // no fmt here... suggestions come back if I add fmt\n)\nfunc TestFoo(t *testing.T) {\n    file, _ := os.Create(\"fishy.txt\") // saving identifies this as an error\n    data := fmt.Sprintf([no suggestions here])\n}\n```\n\nhelpful side-tip: write ```go for the opening of a code block to use syntax highlighting for go\n\n\nAnd for context in case something weird is going on:\n~$ go env\nGOARCH=\"amd64\"\nGOBIN=\"/Users/jonathan/Documents/Code/Go/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/jonathan/Documents/Code/Go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.9.2/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.9.2/libexec/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/r6/yktk_7bx1214yr07d5j67vx40000gn/T/go-build559840623=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\". @joelpresence actually... I just experienced it again and my recommendation above didn't apply. I did notice, however, that the headers disappeared/reappeared while I was writing my line of code, so maybe that operation temporarily knocks out the param suggestions :(\nI'm referring specifically to these, which sometimes disappear or reappear while I'm in the process of writing a line of code, usually when calling methods on an instance of a struct from within the params:\ngo \nrun test | debug test\nfunc blabla(t *testing.T) { ... }\nOr maybe it has something to do with switching between my struct params vs the method params I'm calling the struct within? (feeding the output of one struct's method into another method).\nI'm trying to find a way to disable those 'run test | debug test' headers temporarily to see if this has any effect.\nI'm on VSCode v1.18.1, btw. @ramya-rao-a \n\nThe codelens for \"run test\" and \"debug test\" have nothing to do with the parameter hints or the tools that provide the parameter hints. They get re-created/adjusted everytime there is a change to the file.\n\nThanks for the insight!\n\nApart from that, are you saying that the parameter hints do not appear in test files even when the import statements exist for the package?\n\nYes, that's what I'm referring to.\nBoth my test file and go file are within the same folder, but are in different packages (see strategy 2 on this page for example).\nI recently thought that maybe this was due to having both packages in the same folder, thinking maybe this wasn't the kind of situation the extension was programmed for or something. So I tried separating them into different folders, but this did not seem to make any difference.\nThis problem doest's seem to be happening with standard libraries like fmt, though. In the same line where I'm failing to see param suggestions on the funcs for my package under test, I do see params for packages like fmt so long as they're included in the import block. This gives me the impression that something isn't quite right with the detection of the package that I'm testing\n\nThe package under test doesn't have to be go installed for param suggestions to work... does it?\nOr is it possible that there's something in my go env that's causing a problem with param suggestions - perhaps some way that my package's params aren't being detected?\n\n\nEdit: some more context\nNone of the funcs in my package under test display params when being used in any file (not just the test file)\nSo as it turns out, my issue is not directly related to @joelpresence 's (he clearly states his param completion works outside of test files). I can open a separate issue for this - let me know if this is what you'd prefer. > Can you share your settings?\nAre you referring to my Visual Studio Code settings? If so, here they are:\n```json\n{\n    \"editor.tabSize\": 2,\n\"editor.wordWrap\": \"on\",\n\"terminal.integrated.shellArgs.osx\": [\n    \"-l\"\n],\n\"workbench.colorTheme\": \"Monokai\",\n\"workbench.iconTheme\": \"vs-seti\",\n\"window.zoomLevel\": 0\n\n}\n```\n\nAlso, when you hover on function names, do you see the complete signature + any docs associated with the function?\n\nNo signature or docs appear when I hover over any of the funcs from this package (when using them outside of their package). Actually, nothing appears - not even a blank box.\nHovering of each of these funcs when inside the package does show the complete signature and docs as we'd expect.. When I try that, a small tooltip appears with the text No definition found for 'NAME' (where NAME is the func I'm trying to find the definition for).\n. > You can make the extension use gogetdoc instead by adding the setting \"go.docsTool\": \"gogetdoc\"\nThank you so much!\nAfter making this change and restarting Visual Studio Code, tips appear as expected while I'm filling in params and when I hover over a method from the package I was having trouble with before.\nUsing Go To Definition also works flawlessly now :)\n\n\n\n\nCan you open the console? From the menu, select Help -> Developer Tools, then click on console.\nYou should be able to see the error message from the tool (godef or gogetdoc)\n\nSure! For what it's worth, I tried this before making any changes and was expecting that I might run into trouble with gogetdoc as well (but gogetdoc works great!)\nError when using godef\nCommand failed: /Users/jonathan/Documents/code/go/bin/godef -t -i -f /Users/jonathan/Documents/code/go/src/github.com/jonathan-robertson/lockedarchive/service/service.go -o 2783\ngodef: no declaration found for secure.GenerateKeyContainer\nshell.ts:459\n\u00a0 | e.onUnexpectedError | @ | shell.ts:459\n-- | -- | -- | --\n\u00a0 | (anonymous) | @ | shell.ts:419\n\u00a0 | e.onUnexpectedExternalError | @ | errors.ts:125\n\u00a0 | t.onUnexpectedExternalError | @ | errors.ts:146\n\u00a0 | (anonymous) | @ | goToDeclaration.ts:45\n\u00a0 | v | @ | winjs.base.raw.js:1209\n\u00a0 | enter | @ | winjs.base.raw.js:901\n\u00a0 | _run | @ | winjs.base.raw.js:1068\n\u00a0 | _error | @ | winjs.base.raw.js:1041\n\u00a0 | v | @ | winjs.base.raw.js:1209\n\u00a0 | enter | @ | winjs.base.raw.js:901\n\u00a0 | _run | @ | winjs.base.raw.js:1068\n\u00a0 | _error | @ | winjs.base.raw.js:1041\n\u00a0 | (anonymous) | @ | async.ts:361\n\u00a0 | done | @ | winjs.base.raw.js:1378\n\u00a0 | v | @ | winjs.base.raw.js:1224\n\u00a0 | enter | @ | winjs.base.raw.js:901\n\u00a0 | _run | @ | winjs.base.raw.js:1068\n\u00a0 | _error | @ | winjs.base.raw.js:1041\n\u00a0 | e.resolveErr | @ | lazyPromise.ts:78\n\u00a0 | e._receiveOneMessage | @ | rpcProtocol.ts:68\n\u00a0 | (anonymous) | @ | rpcProtocol.ts:32\n\u00a0 | (anonymous) | @ | rpcProtocol.ts:157\n\u00a0 | e.invoke | @ | callbackList.ts:36\n\u00a0 | e.fire | @ | event.ts:123\n\u00a0 | (anonymous) | @ | ipc.net.ts:82\n\u00a0 | emitOne | @ | events.js:96\n\u00a0 | emit | @ | events.js:191\n\u00a0 | readableAddChunk | @ | _stream_readable.js:178\n\u00a0 | Readable.push | @ | _stream_readable.js:136\n\u00a0 | onread | @ | net.js:560. Awesome, thanks for all the help you\u2019ve provided! I really appreciate it :)\n\nOn Dec 1, 2017, at 12:48 PM, Ramya Rao notifications@github.com wrote:\nOk, so looks like godef fails to find the definition for secure.GenerateKeyContainer.\nI would suggest to run that command (/Users/jonathan/Documents/code/go/bin/godef -t -i -f /Users/jonathan/Documents/code/go/src/github.com/jonathan-robertson/lockedarchive/service/service.go -o 2783) from your terminal and see if you can get any more details on the error and then log the issue in the repo for godef.\nWhen logging the issue on godef, if you can get a smalller code sample where you can repro, then that would be helpful for folks on godef to help.\nClosing this issue as the workaround of using gogetdoc helps.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "Slacki": "I am still having this issue. vscode-go 0.6.66, and VS Code Version 1.17.2 linux.. Standard library. Exactly the same problem as in this comment https://github.com/Microsoft/vscode-go/issues/1186#issuecomment-327364956.. ",
    "faceair": "I'm having the same issue. And after run Go: Install/Update Tools, everything is ok. \ud83d\udc4d. 1. This error will continue if I don't reload window or close this file, and now I still keep the issue scene. I can't consistently reproduce, but this issue occurs several times a day.\n2. I'll try disabled language-server today.\n3. No.\nI have been using go language server for a long time, this error is only occurred after upgrading VSCode to 1.23, maybe is the new version break something.. QQ20180516-110825-HD.mp4.zip\nI made a video display the output. It seems that it has nothing to do with go language server, and now I doubt whether it is the problem of format tool.\nThe following is my settings.json\n{\n    \"editor.dragAndDrop\": false,\n    \"editor.fontFamily\": \"Fira Code\",\n    \"editor.fontLigatures\": true,\n    \"editor.fontSize\": 12.4,\n    \"editor.minimap.renderCharacters\": false,\n    \"editor.scrollBeyondLastLine\": false,\n    \"explorer.confirmDelete\": false,\n    \"explorer.confirmDragAndDrop\": false,\n    \"explorer.openEditors.visible\": 0,\n    \"extensions.ignoreRecommendations\": true,\n    \"files.autoSave\": \"onFocusChange\",\n    \"files.exclude\": {\n        \"**/*.py[co]\": true\n    },\n    \"files.insertFinalNewline\": true,\n    \"files.trimFinalNewlines\": true,\n    \"files.trimTrailingWhitespace\": true,\n    \"git.autofetch\": true,\n    \"git.confirmSync\": false,\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.gopath\": \"~/Developer/Go\",\n    \"go.lintTool\": \"golint-free\",\n    \"go.toolsGopath\": \"~/Developer/Go\",\n    \"go.useLanguageServer\": true,\n    \"python.linting.flake8Args\": [\n        \"--ignore=E501,E702\"\n    ],\n    \"python.linting.flake8Enabled\": true,\n    \"python.linting.pylintEnabled\": false,\n    \"search.exclude\": {\n        \"**/.git\": true,\n        \"**/node_modules\": true,\n        \"**/vendor\": true\n    },\n    \"search.smartCase\": true,\n    \"terminal.integrated.fontFamily\": \"Monaco\",\n    \"vsicons.dontShowNewVersionMessage\": true,\n    \"window.openFoldersInNewWindow\": \"on\",\n    \"window.restoreWindows\": \"all\",\n    \"window.zoomLevel\": 0,\n    \"workbench.activityBar.visible\": false,\n    \"workbench.colorTheme\": \"Ayu One Dark\",\n    \"workbench.iconTheme\": \"vscode-icons\",\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"workbench.statusBar.feedback.visible\": false\n}\nThe go.lintTool is golint-free, maybe it's not related.\nVSCode Version: 1.23.1\nGo Extension Version: 0.6.80\nGo Version: 1.10.2\nAll go tools was updated a few days ago.. And in developer console, I found this message. \n[Extension Host] Could not find packages. Ensure `gopkgs -format {{.Name}};{{.ImportPath}}` runs successfully.\nlog.ts:171   ERR Cannot read property 'kind' of null: TypeError: Cannot read property 'kind' of null\n    at asHoverContent (/Users/faceair/.vscode/extensions/ms-vscode.go-0.6.80/node_modules/vscode-languageclient/lib/protocolConverter.js:98:26)\n    at asHover (/Users/faceair/.vscode/extensions/ms-vscode.go-0.6.80/node_modules/vscode-languageclient/lib/protocolConverter.js:131:31)\n    at <anonymous>\nfull console.log. Thank you. I'll give you feedback tomorrow or the day after tomorrow.. And I noticed that the previous version of the extension flashes the file syntax highlighting when saving the file, and the latest version doesn't have this issue.. > @faceair By \"latest version\", do you mean the version after following the steps in #1677 (comment)?\nYes, and I mean the previous version is 0.6.80.\n. In the latest version, this issue can't reproduce. \nAccording to this I guess it is the language server covered the file content when saving it, and editor re rendering the file syntax highlighting.\n0.6.80\n\n0.6.81.beta2\n\n. ",
    "juicemia": "Isn't this already a built-in feature of dependency managers like Glide?\nI'm willing to work on it, just want to know if it's something worth doing.\nMaybe it would be useful to just download the dependencies to $GOPATH/src.. Isn't this already a built-in feature of dependency managers like Glide?\nI'm willing to work on it, just want to know if it's something worth doing.\nMaybe it would be useful to just download the dependencies to $GOPATH/src.. Also, I imagine you have some idea of how this should be implemented?. Also, I imagine you have some idea of how this should be implemented?. Awesome! Thanks for all the info :). I see that Travis is failing but I don't know why. @ramya-rao-a can you see why? I have very little experience with Travis.. It's okay. I'll figure it out, no worries.. I don't know if there's a process to avoid \"me too\" comments on issues here so I'm just gonna do it to give y'all some confirmation that it's not necessarily an isolated issue. Sorry in advance.\nI'm running into the same thing after installing Go 1.11.\nIt probably just means that gocode hasn't been updated to account for packages using modules yet.. I think Go: Get Package is the best one out of all of them, because it follows the semantics of using go get. I'll change that now.. I think it's a good idea, if we make sure to let the user know that their package will be updated. They might not want that for whatever reason.\nEDIT: We can ask them to confirm if they want to update.. I think that's a great idea.. Yup absolutely. Forgot that check.. One thing I just thought of: go get -u doesn't output anything by default unless it fails. For this to be useful, we would have to run go get -u -v. We could also show the output pane only if the command fails. Thoughts?. I'm checking there because it runs go get -u. I can remove the check and make it just run go get without passing -u so that if the package already exists, nothing happens. It's basically the same behavior but it offloads the check to the go tooling.. ",
    "chrmarti": "@uudashr libsecret-1 seems to be missing, you can add that to your travis config.. ",
    "hero0926": "@ramya-rao-a outside of vs code, iterm couldn't find dlv command... i think brew confused with my path. should reset things... and i found 3 more dlvs in every path. thanks for your help. ",
    "Nais777": "@karamana I had issues with the new release so I uninstalled the extension and installed version 0.6.63 from a vsix file after disabling extension auto updating and everything is working again.. It is my current GOPATH: /Users/CLHQ3496JacobLambert/Code/go\ngo version go1.9 darwin/amd64\nWhat other Go related settings to you need? I haven't set any in vscode, I have just installed the extension.. It seems that the issue was with the package auto updating. After dropping the version to 0.6.63, then manually updating to 0.6.64 to get you the output of Go: Current GOPATH, everything is working again on the newer version.. ",
    "ihoukai": "Thank you. This question has been bothering me for a long time. I have solved the problem after installing go-latest.vsix. ",
    "caustav": "Thanks Ramya, your fix has saved a whole lot of time.. ",
    "rajkrishnamurthy": "Hi Ramya\nVSCode 1.16.1. Arch: ia32\nI updated to 0.6.65. Post update, I'm getting \"go: GOPATH entry is relative; must be absolute path: \"undefined\".\" error.  launch.json has the following entry: \"program\": \"${fileDirname}\". Please advise.\nVerbose Debug Output\nVerbose logs are written to:\nC:\\Users\\RAJ~1.KRI\\AppData\\Local\\Temp\\vscode-go-debug.txt\n8:25:09 PM, 9/17/2017\nInitializeRequest\nInitializeResponse\nUsing GOPATH: undefined\nUsing dlv at: C:\\Users\\raj.krishnamurthy\\go\\bin\\dlv.exe\ngo: GOPATH entry is relative; must be absolute path: \"undefined\".\nFor more details see: 'go help gopath'\nexit status 2\nProcess exiting with code: 1\nDelve is closed\nDisconnectRequest\n. Hi Ramya\nSorry for the delay.\nOnce I set the GOLANG path, the problem went away., However, I never set the path variable prior to 0.6..65 upgrade.\nThanks very much. \nGo version: 1.8.3\n---launch.json---\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n    {\n        \"name\": \"Launch\",\n        \"type\": \"go\",\n        \"request\": \"launch\",\n        \"mode\": \"debug\",\n        \"remotePath\": \"\",\n        \"port\": 2345,\n        \"host\": \"127.0.0.1\",\n        \"program\": \"${fileDirname}\",\n        \"trace\": \"verbose\",\n        \"env\": {},\n        \"args\": [],\n        \"showLog\": true\n    }\n]\n\n}\n. ",
    "wwkeyboard": "I had a similar problem. After an update goimport and golint stopped running on save. After running Go:Install/Update Tools everything seems to be working again. IDK what the root cause was but this fix has me rolling again.. ",
    "dannolan": "@ramya-rao-a Hey sorry, I see a banner at the top of VSCode that said \"Run VS Code with admin privileges so the changes can be applied\", but I restarted my computer and it's gone so I assume it's my fault. THANK YOU SO MUCH FOR YOUR AMAZING WORK ON THIS PLUGIN I LOVE VSCODE AND GO! Also your fantastic GoTime interview was amazing! You rule!. ",
    "BrahimS": "Hi Ramaya, thanks for the good work with VSCODE, i am getting the same notification each time hit save. \n: Run VS Code with admin privileges so the changes can be applied.. @ramya-rao-a \nThanks for your replay:\n\n. I think that was related to some of the parcel.js dependencies, because since i've disabled it, the notification stop appearing.\nThanks so much for your help.. ",
    "philipithomas": "@ramya-rao-a This is from awhile ago, so I don't have any handy. Perhaps try removing the package statement at the top? \nPlease feel free to close if you cannot duplicate. I think the problem was that an unhandled error was missing.. I'm also having this issue all of a sudden. No formatting or goimports being run. . ",
    "suntong": "This is happening to me as well -- I'm using Linux, so the bug has affected both MAC OS and Linux. \n\nI'm using the latest version of the Go extension (0.6.66), and my VS Code is downloaded and installed just today. \nMy go version is go1.9.1 linux/amd64, and \nMy OS is \n\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 17.04\nRelease:        17.04\nCodename:       zesty\n- In the VS Code terminal, run echo $GOPATH, the output is the same as my expected GOPATH.\nOnly after adding the GOPATH as an env var in the env property in the launch.json file solved the problem. \n. Thanks for the reply, @ramya-rao-a, \nThe value in the program property in my launch.json file is:\n \"program\": \"${fileDirname}\"\n\nI don't know how to check it, but all my own code are not under GOPATH, as I want to distinct my own code from those I get from go get. \nMaybe that's the reason vscode-go is confused? \nHmmm..., actually, I thought about that, and has tried to move my code under GOPATH, but that won't work either. Maybe I only did a symlink, and that won't work. \nWill try the trace: verbose next and post back... \nUPDATE, \nAfter I added trace: verbose, and restarted debugging, I saw logging in the debug console\n  Using GOPATH: /path/to/repo/gitwork\n\nWhich is where my own code actually is, not where I started VS Code (i.e., under GOPATH via symlink). And that is different than the GOPATH I set in the environment -- /path/to/repo/go-arch\nI think vscode-go should honor the GOPATH set in the environment, instead of figuring it out on its own and overwrite the environment setting. \n. Yep, precisely! . \"What do you see when you run the command Go: Current Gopath?\"\nNot sure I understand what you mean. \nBut I didn't touch go.gopath or go.inferGopath, just accepting what was pre-filled launch.json setting for me. \n. That output is correct, \nCurrent GOPATH: /path/to/repo/go-arch. Just to make it clear that it fails regardless of the symlinks. I.e., whether I started VS Code from under \n/path/to/repo/gitwork or /path/to/repo/go-arch, both cases failed. \n. Same, \nCurrent GOPATH: /path/to/repo/go-arch\nOr, sorry, Using GOPATH log showed the same as before as well. \nUsing GOPATH: /path/to/repo/gitwork. OK, I'll try it out this weekend. . Sorry to response late, but my debugging is not working any more. I'll open another issue instead. \nBut adding \"trace\": \"verbose\" to my debug config in the launch.json file, and judging the output of Using GOPATH, it is using the correct path now. However the same fix has caused my debugging not working any more... . @Boiethios give this a try, \nhttps://github.com/Microsoft/vscode-go/issues/1307#issuecomment-341926159\nat least it solves the GOPATH problem. \nAnd Ramya is waiting for more testers too. She's been very helpful. Let us know your outcome. please post to https://github.com/Microsoft/vscode-go/issues/1307#issuecomment-341926159 if you try. \nThx\n. @ramya-rao-a I agree that this issue should not be considered as \"closed\". . Thanks ramya, I am able to go back to the old version as per your help and my debugging is now working. \nI'll be out of town for a while and will get back to you for the rest when I'm back at the end of November. thx again. . Hi @ramya-rao-a, the latest update of the Go extension is still unable to do debugging for me, with or without the GOPATH env variable in the launch.json file.\n$ code --install-extension /tmp/Go-latest.vsix\nExtension 'Go-latest.vsix' was successfully installed!\nand I've just updated code to the latest version as well:\n$ sudo dpkg -i /tmp/code_1.1*_amd64.deb\n(Reading database ... 158741 files and directories currently installed.)\nPreparing to unpack .../code_1.18.1-1510857349_amd64.deb ...\nUnpacking code (1.18.1-1510857349) over (1.17.0-1507160143) ...\nSetting up code (1.18.1-1510857349) ...\nProcessing triggers for desktop-file-utils (0.23-1ubuntu2) ...\nProcessing triggers for bamfdaemon (0.5.3+17.04.20170406-0ubuntu1) ...\nRebuilding /usr/share/applications/bamf-2.index...\nProcessing triggers for mime-support (3.60ubuntu1) ...\n. Oh, I was able to go back to the old version as per your help and my debugging was working before, but now, having uninstalled the Go extension and installed it again from the marketplace, I'm still unable to do debugging any more. :(. @ramya-rao-a, I lost track what was working before, but would it be possible for me to go back to the Go extension version that has been working for me before please? . Thanks for the reply @ramya-rao-a, \nI thought it was my own problem so I tried it from an entirely different system, but I'm not able to debug there either. \nI reverted from Go-0.6.69.vsix, one by one, from Go-0.6.67.vsix all the way to Go-0.6.65.vsix, which need to set GOPATH, but am sill  not able to debug any more. I think the latest VS Code no longer works with older go plugins. \nSo, @ramya-rao-a, please try to download the code https://github.com/suntong/hello-world-go into /tmp/hello-world-go, and try debug there, would you be able to debug there? Thanks\n. The thing is, the problem is not because of symlinks, it \"fails regardless of the symlinks\"\n (https://github.com/Microsoft/vscode-go/issues/1203#issuecomment-335269877). \nThe real cause is: \n\nall my own code are not under GOPATH\n\nSo, yes, I am able to repro the issue without symlinks. Trying it for yourself as above. \n\nwhat should be the GOPATH in this case?\n\nWhatever you defined in the environment variable, which should be picked up by vscode-go out of the box. I.e., it is unrelated to the GOPATH setting. \n\nsee why the GOPATH from your launch.json is not getting passed\n\nThe GOPATH is fine and no longer an issue since https://github.com/Microsoft/vscode-go/issues/1203#issuecomment-340196651, and it was never a problem to me as \"after adding the GOPATH as an env var in the env property in the launch.json file solved the problem\" https://github.com/Microsoft/vscode-go/issues/1203#issuecomment-335045260\nSo please try it out as I proposed, and see what you get. Thanks. \n. Oh, yeah, exactly! \nWhat you've described the two observations are exactly the same as what I'm getting. \nTwo more things to add, \n\nmy launch.json was only created once by vscode-go, which shows up within \"Explorer\" under \"MyNname\" > .vscode > launch.json, instead of under each project (even after I've deleted it and trying to recreate it again under different projects). As the result, I'm getting such \"Error on CreateBreakpoint: unknown file:\" errors in the debug output on whatever projects I've been working with. I.e., that error is a huge list not only limited to this little project that I'm working on. \nusing delve directly works just fine. So my conclusion is that the problem is something internal within vscode-go. \n. @selam thanks for the update and clarification. (I tried Go-0.6.69.vsix, Go-0.6.67.vsix then Go-0.6.65.vsix, all not working. I.e., I skipped the working vscode-go 0.0.66 version, :-(   )\n\n@ramya-rao-a \nno, this issue occurs no matter what the folder is. Mine is not under /tmp, and as @selam's case, it doesn't even matter whether it is under $GOPATH or not. . Hi @ramya-rao-a, \nI'll answer your questions at the end of this message, but \nFirst of all, I changed the title to reflect the problem's external behavior instead of internal manifesting so end users who are looking for the answer know this is* the one that they are after. \nNow, \n\nPlease tell us exactly which the versions you are using, the VS Code version, delve version and Go extension version, etc, etc, that everything you can think of that relate around the debugging. \nYou said the debugging broke only under /tmp, now you are saying you are not able to repro any more. Does it mean even the /tmp is working for you? If so, what changes you have make to cause this? \nIf you can't think of any changes that so significantly impact the debugging behavior, then it is the problem of internal inconsistency of vscode-go, that will behavior differently even when everything are the same. This should be the focus of your exploring path, because you have experienced first hand of such inconsistency, and only you have seen the behavior of both sides, whereas for me, I'm always seeing the failing side. \neverything must have a reason, but if you really cant' think of any, then please follow @selam's experiment:\n\n\nfirst error was \"file not found\" i downgrade, upgrade delve versions then error message changed to \"unkown file\" instead of \"file not found\"\n\nand see if you can duplicate the inconsistency of above behavior, which might give you a further clue. \nAll that I'm saying is, try to go back to when debugging was failing for you. If you are absolutely sure there is nothing changed on your side, between then and now, then the inconsistency behavior is beyond everything that you are comparing. I.e., what you were looking at were not the cause -- it is something that you have not payed attention to that is causing such inconsistency. \nJust for an example, the differences between version of github.com/uudashr/gopkgs/cmd might be the cause, (just for e.g., which might not be), i.e. if you think it is the version problem, then you need to tell us exactly which the versions you are using of everything that relate around the debugging, which you are the domain expert on that. Hint: have you thought of your OS?. \nMy advice, If you really can't think of anything that impact the debugging behavior, then don't touch your current environment, and start everything afresh. That's what I did:\n\nI thought it was my own problem so I tried it from an entirely different system, but I'm not able to debug there either.\n\nI installed my Ubuntu 17.04 in a brand new VM, and installed everything that relate around the debugging afresh, i.e., to there latest version. Yet, the debugging is failing in that case. Please try this (start everything afresh), and if it works for you, please tell us exactly which the versions you are using for everything that relate around the debugging, and I can compare it to mine. \nNow, I don't think the following answer matters, but since you asked... \nhm, let me put them in a new comment...\n. Answering your questions, \n\nWhen using the latest Go extension, is the GOPATH printed to the debug console when you pass GOPATH as env var in the debug config different from the one printed when you don't pass it as env var? What printed in the debug console of Using GOPATH: are exactly the same regardless whether passed as env var or not, which are the same as my shell var.\nIn both above cases, compare the GOPATH printed in the debug console with what you get by running the command Go: Current GOPATH? Press Ctrl+Shift+P then Type Go: Current Gopath or select it from the options, the results are exactly the same regardless whether passed as env var or not, which are the same as my shell var.\nHave you enabled the go.inferGopath setting? No.\nWhat is the value of the program attribute in the debug config? \"program\": \"${fileDirname}\"\n\nWhat is the path of the main folder opened in VS Code? /path/to/src/github.com/suntong/hello-world-go, but please also note, \n\nmy launch.json was only created once by vscode-go, which shows up within \"Explorer\" under \"MyNname\" > .vscode > launch.json, instead of under each project (even after I've deleted it and trying to recreate it again under different projects). As the result, I'm getting such \"Error on CreateBreakpoint: unknown file:\" errors in the debug output on whatever projects I've been working with. I.e., that error is a huge list not only limited to this little project that I'm working on. \n. Thanks for the swift update, and detailed steps in how to get things going the proper way, which is most valuable to me. \n\nI'll find some time to try the VS Code Insiders, and the detailed steps you outlined above, then get back to you... \n. I get it working @ramya-rao-a!!! \nThanks a lot for your detailed steps, without which I'll surely be lost along the path. \nThank you, THANK YOU!\nAlthough, I wasn't able to make it work at first no matter what, when I was opening/using my code from my /path/to/src/github.com/suntong/hello-world-go. Then I copied it to under /tmp, and it works there. Then I went back to my /path/to/src/github.com/suntong/hello-world-go and tried again, and strangely, it worked as well. I didn't do anything differently! Just that every time before I try, I \"delete the debug binary that got created in the previous step\" (thanks for that tip!). \nI'm so happy now. Thanks again!\n. Hmm..., I'm afraid that I have to reopen it again -- I was switching back and forth between /tmp/hello-world and my /path/to/src/github.com/suntong/hello-world-go, trying to figure out what went wrong, and making sure everything is repeatable, but now, \nmy /path/to/src/github.com/suntong/hello-world-go is no longer working! repeated many times.\nOnly /tmp/hello-world work now, every time, repeated several times. \nAgain, I didn't do anything differently! \nSo, where does vscode cache its settings? I think something wrong there, as whenever I open my code from vscode, I can see my break-point being set -- this info is not kept in .vscode/launch.json, so where is it kept? \n. Hmm..., running dlv directly on the file, would it work for you? \nCould you try the latest https://github.com/suntong/hello-world-go/, and see if you can step into SayHello please? Note the updated .vscode/launch.json guarantee to go there. \nThanks @ramya-rao-a!\n. Oh, BTW, this time, please try to (copy and) start from various places instead of only /tmp, say two more, ~/prj/hwg1 and ~/prj/hwg2 under $HOME/prj. Thanks. . Hmm, strange, thanks, I'll test again.... Just to clarify, \n\nHow do you start vscode from and for those different places? \nDid you add them all to the same workplace?\nDid you change the program value from ${fileDirName} to ${file} in the launch.json, or you use mine as is? \nWhen you were stepping into SayHello, is it with the if (mode === 'exec' || !isProgramDirectory) or without? \n. No wonder, I always run \n\ncode . &\nin different project to get into those specific projects. . Oh, sorry for responding late. No -- I first cd into different projects, then start code . & from there, so as to get into different projects with the same command. . hmm, never used gophers slack before, any url that I can ready about how to use it? \nand what's your id on gophers slack so that I can contact you once I'm in? . Joined. \nI tried at my side -- no matter how I start code, of all methods in your chart, breakpoint was not hit except the one under \\tmp (which will always hit no matter how I start code). That includes clicking the \"Recent\" items when starting code in different ways. Nothing works except the one under \\tmp (always work no matter how reach there, from start or clicking on the \"Recent\" items).\nIn all cases where breakpoint was not hit, the log for debugger.go:97: launching process with args: had the correct path where my code is. Same for the working one under \\tmp:\n2017/12/16 09:49:58 debugger.go:96: launching process with args: [/tmp/hw-go/debug Mr Smith]\n\n. Again, where does vscode cache its settings? as whenever I open my code from code, I can see my break-point being set -- this info is not kept in .vscode/launch.json, so where is it kept? I think something wrong there.\n. @ramya-rao-a, is your /tmp somehow a symlink? \nI think I've found the real cause why /tmp is working for me whereas everything else are not. Let me list the fact first (of duplicating my /tmp/hw-go/ into different places):\n\n/tmp/hw-go/, works, known before.\n/path/to/src/github.com/suntong/hello-world-go, not working, known before.\n/tmp/hwg2, still works, no matter what.\n~/Public/hwg3, no longer working, no matter what.\n/other/path/to/workv/save/hwg3, works, no matter what.\n\nSo what the difference between /other/path/to/workv/save/hwg3 & ~/Public/hwg3, i.e. those working and those not? --\n\nAll those that works, their path are real path. I.e., \nAll those that do not work, their path are not real path, i.e., there are symlinks somewhere alone the path.\n\nHere is proof:\n```sh\ncd /tmp\n-- that's where my working code (/tmp/hw-go/) is. Change to yours (above, and below for ../hw-go/)\nmkdir d1\nln -s d1 d2\ncd d2\ncp -a ../hw-go/ hwg3\ncd hwg3/\ncode pwd &\n```\nAfter this, break-point is not working any more, despite being under /tmp. \nNow watch:\n```sh\n:/tmp/d2/hwg3$ realpath . \n/tmp/d1/hwg3\ncd /tmp/d1/hwg3\ncode pwd &\n```\nIt works again. \nSo, this is proof (to me) that, if there are any symlinks somewhere alone the path, vscode break-point will no longer works. \n. Thanks a lot Jan @fcelda, for going a long way proving it. and Yes, I found Delve works even with the symlink too. \nSo @ramya-rao-a, it is now a confirmed case, with confirmed reason, I believe. \nMoreover, I believe that @denismp's case is caused by the same reason as well, I.e., not only related/ caused-by the extension for Golang. \n. That's very frustrating indeed. \nIt baffles me that why nobody cares to look into it, after it has been reported for so long, and even after the exact simple steps to duplicate the problem has been given, and it clearly is affecting everyone. \nSo currently MS VS Code is literately useless to the entirely Go community, and beyond, e.g., the angular 2 code that @denismp's writing, yet the Microsoft VS Code developers don't even give it a damn. Fantastic. \n. @ramya-rao-a, thanks for the clarification. \nMy point is, it might most likely not your code problem at all. Ref again the angular 2 code that @denismp's writing. I.e., the fault resides beyond the scope of vscode-go. \n. ",
    "Boiethios": "What's up about this? The tools are installed in /home/myself/go but I set my GOPATH to /home/myself/.go:\nIn vsc terminal:\n$ echo $GOPATH\n/home/myself/.go\nBut with the command:\nCurrent GOPATH: /home/development/go\nThis is a bug, because the documentation says:\n\nOut of the box, the extension uses the value of the environment variable GOPATH.\n\nI am running Debian testing.. ",
    "friends110110": "I have fixed the problem. I  use go build -i  -tags \"nopkcs11\" -o explorer main.go instead of go build, then it woks, and could show the val.. ",
    "sepisoad": "Until then the workaround is to set env to {} in the debug configuration\nI just got a little bit confused, can you explain more?. thanks @wusendong . ",
    "wusendong": "@sepisoad \nit work for me by add \"env\": {}\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch file\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${file}\",\n            \"env\": {} // <-----add this\n        }\n}. ",
    "skovtunenko": "Thank you, temp fix works fine!. ",
    "KyleMoser": "@ramya-rao-a I was trying to do that before, but I couldn't figure out the offset. Let's say I know the name of a struct in a particular file, how do I find out it's offset to use it in the guru command?\nI'm using Guru not the language server.\nOK, I used Atom which shows the commands it's running. I copied the following from atom:\n\".\\guru -json referrers D:\\Users\\me\\vscode\\Projects\\src\\portal\\business\\business.go:#845\"\nWhich always gives either:\n\"guru failed: operation timed out after 30000 ms\" (in atom)\n\"guru: query object not found during reloading\" (in vscode)\nAppears broken in both Atom and vscode. I guess that means you're going to close this as not a vscode-go bug, rather, a guru bug. . ",
    "xmattstrongx": "\ud83d\udc4d  agreed with @dastergon. This could def be useful.. Hi @alioygur. I am not sure if this will help you or not but I have found this section of the debug tab to be useful. Perhaps you already know of it but if not then maybe this will help you out.  \nAt he bottom of the debug tab there is a section titled BREAKPOINTS. It will list out all of your breakpoints in your code and you can click on each to go to them. I have also found the Deactivate Breakpoints feature to be very useful.\n\nHopefully that helps. Happy bug hunting :smile:. Hi Ramya. I am looking for something to help the vscode-go extension and I came across this issue. I have the debugging the debug adapter running and see the code in goDebug.ts hitting as you noted. \nI am still trying to figure out why delve returns a string with length 6 even though the string is only length 2. Id be happy to submit a PR for this issue just a little confused on what the expected outcome of this issue is.. ",
    "m90": "I'd be happy to add this (as I wished for it too already a few times). Will open a PR once done.. @zmb3 I just looked into this and it seems that the bug stems from the fact that the extension is falling back to godef as it is set to go.docsTool: godoc. If I use gogetdoc it will show me the correct type, bot in the extension as well as on the command line (which is great).\n@ramya-rao-a  this probably means it is still an upstream bug, but in godef. What's the reason for godoc as a default?. Yes, I can confirm that godef prints incorrect information in this case:\n```\nfrederik@fr-xps:~/projects/go/src/github.com/m90/test$ cat main.go \npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    s := []string{\"a\", \"b\", \"c\"}\n    for index, char := range s {\n        fmt.Println(index, char)\n    }\n    for index := range s {\n        fmt.Println(index)\n    }\n}\nfrederik@fr-xps:~/projects/go/src/github.com/m90/test$ godef -o 144 -f main.go -t\nmain.go:12:6\nindex bool\n``. I'll just name a few of the \"big\" ones from the top of my head, apparently none of them use_test` packages as default behavior:\n\nhttps://github.com/camlistore/camlistore/tree/master/pkg\nhttps://github.com/gin-gonic/gin/tree/master/render\nhttps://github.com/patrickmn/go-cache\nhttps://github.com/gohugoio/hugo/tree/master/helpers\nhttps://github.com/ha/doozerd/tree/master/server\nhttps://github.com/go-chi/chi\n\nThe only one that seems to use _test as a default is pongo:\n\nhttps://github.com/flosch/pongo2\n\nAgain, _test packages surely are a nice tool and have their place (which is why I would like to see them as an addition to the autocompletions), but I think it's just an odd default.. This is great! Thanks to the two of you for dealing with this so quickly. I think the update is a really nice addition to the Extension. Thanks for that @uudashr !. @ramya-rao-a Thanks for your review. I think I should have adressed all the open issues, so feel free to take another look when it fits.. I see your point re: consistency, yet this would mean that this turns into one untestable monolithic function (correct me if my thinking that capturing channel output in a test is not possible is wrong). I personally would feel a lot more confident shipping such a feature with unit tests, yet this is not my extension. I just wanted to raise awareness for that fact. I'll ping you once I've done the changes.. @ramya-rao-a As requested I merged all the code into one function for the sake of consistency.. This is an upstream bug in godef: https://github.com/rogpeppe/godef/issues/72 - using gogetdoc instead fixed the issue for me.\nAlso see: https://github.com/Microsoft/vscode-go/issues/1242. @ramya-rao-a I am slightly confused about how to continue here. The tests you added do not match the way the code works (they fail on linting right now but would fail once the results are added to the Promise.all underneath). We could fix this by either adjusting the tests according to the way the code works, or we refactor the code to match the test cases you added. I'm not sure.\nLet me know how to proceed.. I actually think it might be nicer to do it the way your intuition and the tests you wrote were suspecting and move the logic of potentially calling twice down a method. I will force push over your changes for doing that so I can reuse the tests you initially added.. @ramya-rao-a I refactored the code so that your initial testing approach works now, and I think it's a lot nicer that way as all the logic on the gotoSymbolConfig happens in the same place. Tests are passing and I'd be happy.\nLet me know if you have further remarks.. I wonder if there is some way for the extension to know if the installed version of go-languageserver is recent enough to support the flag?. @ramya-rao-a Any input on this one?. @ramya-rao-a That's a good question and a valid concern. I do have no idea why completion is behind a flag though. All I know is that when running locally it feels faster and more lightweight, but then again that's very likely to be very subjective.\nMaybe the lovely Sourcegraph people know why it is the way it is?. @ramya-rao-a Sure thing. When are you planning to do the next release of the extension? I'm a little swamped right now, so it might take until the weekend or so.. @ramya-rao-a Sounds good, thanks. Let me know when I can give things a test drive.. @ramya-rao-a So I have been able to unswamp myself and would be happy to still do the requested updates in the coming days. Does that sound like a plan to you or have you already started updating things?. @ramya-rao-a I pushed the requested changes. Tbh I am not entirely sure how the entire graceful fallback mechanism works now when someone has an older version of go-langserver installed, so in case I missed something here, let me know and I will update accordingly. With an up-to-date language server it seems to work like a charm for me.. This is the formatting that (the default) godoc will return, so there isn't much that the extension can do here. You can use a different docsTool like gogetdoc in your settings, which will format these previews correctly.. In case you are not on Windows you could also try using the go-languageserver, which - at least in my setup - seems reasonably fast and has nicely formatted output: https://github.com/Microsoft/vscode-go#go-language-server-experimental. That's a very personal opinion, but I feel this is kind of defeating the purpose of using golint. golint wants you to write a comment, not a TODO for doing that. If you are fine with not having comments yet, you can still build the code and see the complaint as your todo.. @ramya-rao-a Here we go.. I've used the \"pre-release\" version for the last 1 1/2 days and it seems to work mostly fine.\nThe only feature that is giving me issues is the go-langserver based formatting, which sometimes creates the \"jump-to-bottom\" behavior described by @primalmotion as well as gives me a slightly annoying flashing on save (syntax highlighting is removed, all code is displayed in white, syntax highlighting is reapplied):\n\nFrom having a quick glance at the code it looks to me as if these are upstream issues though, either in the language server or the language server interface of VSCode, so I doubt this is to be fixed here.\nI'll probably not turn on the language server formatting, but other than that, the update is more than welcome. Thanks to everyone involved.\n\n\nAlso, let me know in the comments what you think of this model of me asking your help in testing an update before releasing it.\n\nI think this is a really great format for cutting releases. The thread above also looks like it's working, so :+1:\n. Scrap the comment about the test that needs to be skipped, that was an issue I encountered locally as math can actually be an ambiguous package (there is github.com/gohugoio/hugo/tpl/math) and the extension therefore decides to not display anything here: https://github.com/Microsoft/vscode-go/blob/5bc4ce40557a044cd790b9941271908b9135bc68/src/goSuggest.ts#L361-L363. @ramya-rao-a Should we also already update the parts of the wiki (this and this) that still point to the nsf gocode or should that wait until it has actually been released?. From what I understand the mdempsky gocode should work fine on older supported Go versions as well, so ideally a prompt like this would show up for everyone.\nUnfortunately I have a hard time coming up with an idea on how to know which gocode is installed on a user's machine as the binary name is the same and it will also be installed into $GOPATH/bin. It looks like the nsf gocode prints slightly different output on gocode -h, but I'm not too sure if this is the most robust way of doing it.. > I think there are issue on migration from old gocode to new gocode.\nI second what @uudashr says, I also think this is the automated migration not working as we'd like it to.\nI cannot repro any of the malfunctions locally. I installed mdempsky/gocode manually when working on #1710 and have never encountered any issues since then (plus I got rid of the nsf/gocode PANIC).\nThis is my setup:\n```\nfrederik@fr-xps:~ $ go version\ngo version go1.10.1 linux/amd64\n===\nfrederik@fr-xps:~ $ code -v\n1.23.1\nd0182c3417d225529c6d5ad24b7572815d0de9ac\nx64\n===\nfrederik@fr-xps:ms-vscode.go-0.6.82 $ cat package.json | grep version\n    \"version\": \"0.6.82\",\n===\nfrederik@fr-xps:gocode[master] $ git log\ncommit 7282f446b501b064690f39640b70e1ef54806c60\nAuthor: Matthew Dempsky mdempsky@google.com\nDate:   Wed May 2 00:00:30 2018 -0700\ngocode: add -source flag to use srcimporter\n\nI keep seeing requests for an importer that loads directly from\nsource, so I decided to implement it.\n\nUnfortunately, this is very slow currently: suggestions take about\n1.5s on my laptop. This could probably be improved with caching.\n\n```\nUnfortunately I think switching back to nsf/gocode would not really solve the issue as seen in #1645 \n\nAlso: one possible caveat that also had me trip and think Intellisense is broken a few times already: it is important to know that autocompletion on unimported packages will only be triggered if the package name is completely unabmiguous on the system. So if you type fmt. and expect autocompletion, it might not work because there is also Hugo's fmt package (plus many more like math) alongside those in GOROOT, which makes it impossible to tell which package you are referring to, thus no Intellisense is triggered.. @ramya-rao-a Do we know if this upstream issue is related: https://github.com/mdempsky/gocode/issues/32 (it sounds very much like it)?. @PaluMacil When you say\n\nI have even tried manually deleting gocode\n\ndid you also delete the related files in $GOPATH/pkg when doing so? Could you try to install the extension into a temporary and entirely clean $GOPATH?\n\n@ramya-rao-a I don't think dep is related to the issue as all it does is place files into vendor directories, so the issues should be there (or not) no matter which vendoring tool you use. For the record: I still can get autocompletion results for dep-vendored packages. Do we know which OSes the affected users are using? Are Windows, Mac and Linux users affected?. @ramya-rao-a Do we have some way of finding out if this: https://github.com/mdempsky/gocode/issues/32#issuecomment-401988251 is of any help here?. Seeing that it's a common pattern in this extension to make multiple tools available (although maybe not necessarily in that case) for the same task, I thought it'd be a good idea to separate the editor part of the command from the actual uploading. Also, it makes writing tests a lot easier. I think I'd like to keep it that way if possible.. The function that is being tested here does not know anything about the logic that is being introduced in this PR. If we wanted to add test cases for the behavior we would need add 2 full \"integration-style\" tests for #provideWorkspaceSymbols, which is currently not being tested at all. I would be happy to add these, but wanted to double check if this is what you are talking about?\nAlternatively it might also be an option to move the logic that is introduced here into this method.. But does this change in config have any effect on getSymbols? The check it wants to test is currently done higher up in the call hierarchy if I'm not mistaken.. This would still need to include the test cases generated above in order to make the test fail or pass.. This is pretty terrible, but it's the best I could come up with in case we want to make sure an up-to-date version of the language server is installed.\nAlternatively we could call go-langserver -version, but I don't really know what do to with the output as it would currently just print sth like v2-dev: https://github.com/sourcegraph/go-langserver/blob/dd4c619b53ae9d18c94e372d23d8710e59f0766b/main.go#L41. > Instead, create a new function getLanguageServerFlags that returns all supported flags. \nJust to double check: for getLanguageServerFlags you envision sth that reads the output from calling the naked command just above? Or do we already do sth similar elsewhere?. Because for example the supported flags will contain -func-snippet-enabled but we also pass a value like -func-snippet-enabled=false.. I wasn't allowed to use a non-boolean value when testing, which is why thought this was possible, but maybe that's only a warning? Undid this in any case.. @ramya-rao-a Is this an ok phrasing or would you also prompt the user to upgrade? It might also make sense to show a single generic message in case any fallback condition inside this function body was triggered.. Should this check for !== true then, too?. ",
    "otto-md": "I reinstalled the extension and it seems to work as expected now. Sorry for the noise.. ",
    "ParadiseDS": "This feature in in urgent need! Plz let me know if it is on implementing.. > For what it's worth, a third option is:\n\nNonrecursively check that there is a child of the opened folder named \"src\".\n\nAgree. As the common case to have src as a child is a project expected be compiled and run out of the box, and in this case the work root is expected to be the GOPATH, with src as its direct child.. ",
    "mintyowl": "Actually this was not  VSCode error, since this happened when I used an aliased import with same name as the package itself. Like so\nimport (\n     \"bytes\"\n      myPkg \"path/to/myPkg\"\n     \"os\"\n)\nIf you import another package from here point on, using autocomplete features, then an extra 'import' is added. Ofcourse using same alias as package name is the problem. I donnot know/remember how that manifested as an oversight on my part.. So I manually installed github.com/mdempsky/gocode using go get\n(Using powershell for commands below)\n\n\ngocode -in=\".\\myfile.go\" autocomplete 901\n\n\ncat .\\myfile.go | gocode autocomplete 901\n\n\nCommand 1. gives the right output, where as the 2. gives wrong output.\nI think if vscode can switch to using 1., then it should work properly\nObviously, code has to put the latest buffer into a temp file and then use that file and -in flag.. as @zeroftw suggested, switch to nsf and everything is fine. mdempsky version is buggy right now as it only works with built-in packages and not externally installed ones.. Alright, so I just started my Windows 10  64 bit machine running go 1.10.3, and both gocode versions are showing correct results. Dont know why the discrepancies yesterday!!\nBut, vscode (atleast on my machine) cannot autocomplete mdempsky version. nsf  version works flawlessly.\nI tested on both version by completely killing the process one at a time, renaming them at $GOPATH/bin and firing vscode.. > Do you not see completions only for external packages or even for pkgs from std lib when using the mdempsky version in VS Code?\nAutocompletion for built-in packages work , but external packages go bust.\n\n. ",
    "cmaglie": "I have the same issue, it seems that vet runs for a very long time and keeps a cpu core at 100% (it takes almost a minute to complete on my machine).\n\nI've run a strace over the vet process and it seems that it \"rescan\" all the files in GOPATH I don't know if this is the intended behaviour, below there is an extract:\n$ sudo strace -fp 22497 -e openat\nstrace: Process 22497 attached with 9 threads\nstrace: [ Process PID=22503 runs in x32 mode. ]\nstrace: [ Process PID=22503 runs in 64 bit mode. ]\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/all-core/gl\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22502] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22502] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v2.1/gl\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.1/gles2\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/gos/go1.8.1/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/Workspace/go/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22499] openat(AT_FDCWD, \"/home/megabug/.gvm/pkgsets/go1.8.1/global/pkg/linux_amd64/C.a\", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-compatibility/gl\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/conversions.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/debug.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/package.go\", O_RDONLY|O_CLOEXEC) = 3\n[pid 22503] openat(AT_FDCWD, \"src/github.com/go-gl/gl/v3.2-core/gl/procaddr.go\", O_RDONLY|O_CLOEXEC) = 3. Ok, I guess I found the cause of this: I had a tab opened with a main.go in my GOPATH, when I closed that tab the vet command started to perform good again.\nI think that vet examines all subfolders of all files opened in the editor, so having the $GOPATH/main.go opened has made it scan all the $GOPATH/src/... folder that was very crowded.\n. ",
    "dahankzter": "It seems that vet also scans the vendor tree and I have a pretty large vendor which makes it very sluggish.\nWhen I save I see several vet . processes and the cpu goes skyhigh and it takes a long time to run even standalone.\n/usr/lib/go/pkg/tool/linux_amd64/vet .  13.14s user 0.30s system 162% cpu 8.296 total\nShouldn't it just run vet *.go or some other heuristically picked file set?. Perhaps go vet . should be used instead? I am not perfectly clear why it differs to be honest but this form is very fast and does seem to ignore vendor. . Yes go vet . is instantaneous while go tool vet . clearly scans my vendor folder and takes +10 seconds on my relatively fast laptop.\nI have not set any specific config other than default and I really want as much as I can get on save but it needs to be fast enough for it to not lag.\n. It is also fast.. Great, I will try it out asap!\nOn Sun, 12 Nov 2017, 20:56 Ramya Rao, notifications@github.com wrote:\n\nClosed #1215 https://github.com/Microsoft/vscode-go/issues/1215.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1215#event-1337732074, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAKcU98IKIsfex4hGqP0BdsvocrBHPofks5s101ggaJpZM4PYm3_\n.\n. I see no lagging at all with the latest extension! Thanks for this!. Cool, when is this published? I seem to be still on 0.6.67. Somehow reinstalling the plugin worked but the \"update available\" had not s tarted to show. Could it be because I installed it manually?. That seems to have worked,thx!. Packages yes but not vendor right?. I have read back and forth before but it was a super clear difference now.. \n",
    "jnewmoyer": "From what I can tell, \"go tool vet .\" and \"go vet ./...\" should actually behave the same, recursively process all packages at or below the current directory. I installed the update and performance is definitely better, I just can't tell why. If I run those two commands from the terminal they both do the same thing, and take the same amount of time to complete. But with the extension on save, it goes by really quick. I feel like something else is going on there. . In this case I have no vendor source.  According to the go docs vendor source is skipped when using ... wildcards. . The alternative was go tool vet . was it not?. ",
    "alioygur": "I already know this :) I am looking for a shortcut\n16 Eyl 2017 Cmt, saat 17:57 tarihinde Matt Strong notifications@github.com\n\u015funu yazd\u0131:\n\nHi @alioygur https://github.com/alioygur. I am not sure if this will\nhelp you or not but I have found this section of the debug tab to be\nuseful. Perhaps you already know of it but if not then maybe this will help\nyou out.\nAt he bottom of the debug tab there is a section titled BREAKPOINTS. It\nwill list out all of your breakpoints in your code and you can click on\neach to go to them. I have also found the Deactivate Breakpoints feature to\nbe very useful.\n[image: image]\nhttps://user-images.githubusercontent.com/10662489/30513218-4a377b50-9ac5-11e7-89f7-2506228aa49e.png\nHopefully that helps. Happy bug hunting \ud83d\ude04\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1216#issuecomment-329973463,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAmWYhuWVbdCPOlrc6OP_kjYROfM3edRks5si-HDgaJpZM4PY127\n.\n. \n",
    "jnscode": "You do not need to set breakpoints\nStart the test program in debug mode, and then type some characters in the debug console, and the problem will appear after you press the Enter key. Hi Ramya,\nCan you reproduce the issue?\nI have cut a picture and I hope it will help you\nMy VS code is Chinese, I can't find the settings of the switch language. Please forgive me.\n\n. ",
    "Erik-Blucher": "Running Go: Current GOPATH yields Current GOPATH: /home/erik/git/ES/ES\nMy GOPATH is set in .profile in my home directory.. No, my VS Code setting is the default \"go.gopath\": null, but this made me curious as to how it fails on reading my environment variables. So I switched to a different directory and started code as I usually do with code . and ran Go: Current GOPATH and got Current GOPATH: /home/erik/git/ES/ES:/home/erik/workgo\nIt seems like it only fails in reading my env variable in the /home/erik/git/ES/ES directory. Could it be that there are some workspace/repository setting that I'm missing?. I found the problem!\nA co-worker had checked in a settings.json file in the .vscode directory that had \"go.gopath\": \"${workspaceRoot}\", set.\nI'll close this issue now as it was a mistake on my end.\nSorry for bothering you.\nBR, Erik. ",
    "MZhoume": "@ramya-rao-a Thanks for your reply.\nUnfortunately no. Let's think of a situation where we have a scripts folder for all the automation scripts. Each .go file should be able to run individually so they all are in the main package and with a main function. And you can just use go run script.go to run a single file.\nSince they are all in the same folder, and the current delve debugger adapter does not support debugging single file. When debugging is needed, you will have to move the file to a different folder without any other go script in order for the debugger to work. \nI am also taking this class where they put all the executable go files in one main folder (I assume it has something to do with the folder structure restriction go is enforcing). Not being able to debug only a single file make it impossible to work with the class assignments as well.. @ramya-rao-a Yes, dlv run (now debug) can only runs on the files with main function defined. \nHowever, dlv debug works with multiple files within the same main package as long as they have main function defined. (re-defined main function within the main package does not affect dlv command). ",
    "chrislewisdev": "Hi @ramya-rao-a, I'm interested in working on this issue (although it could be a little stale now)!\nI've had a look at the code and managed to set up my local environment for debugging the debugger. Thanks to your comments I have a good idea of the change I need to make to support this.\nCurrently, the way I'd like to perform the file-parsing to detect the existence of the main function is to use the existing goOutline functions, which should make it quite easy to see if a symbol for the main function is defined. However, goOutline has a dependency on the vscode namespace which I believe cannot be used in goDebug, meaning I'd need to do some refactoring to separate the two in order to use it.\nBefore I get too deep into refactoring, does this sound like an approach you'd support for a PR?. That's ok @ramya-rao-a :) I noticed the builds failed on this PR but decided not to worry about it until I received some feedback. I'll keep an eye on this PR to see what conclusions you come to before making any further changes!. Thanks @ramya-rao-a for the update - unfortunately I haven't had much time to revisit this recently but I hope to be able to do so in the coming weeks. In the meantime, if anyone would fancy having a crack at it themselves, feel free.. I opted for an anonymous type here since we don't need the full GoOutlineDeclaration information as defined in goOutline. An alternative if we wanted to keep the type information in sync for future updates could be moving GoOutlineDeclaration and GoOutlineRange into a separate file to share with goDebug.. ",
    "festo": "What is the status of this ticket? is there a plan to merge the PR soon?. ",
    "reusee": "I'm writing long SQL queries in backquoted strings, it would be really helpful to auto-complete table or column names.\nSuggestions inside backquoted strings is working when vscode-go is disabled. Is the default behavior overwritten by any configuration of this extension?. ```go\nfunc (a API) AvgleVideos(\n    arg struct {\n        ash.Argument\n        Keyword    string\n        Page       int\n        Max        int\n        Sort       string\n        IsFavorite bool\n    },\n) (\n    ret struct {\n        ash.Return\n        Videos json.RawMessage\n        Total  int\n    },\n    err error,\n) {\nif arg.Max == 0 {\n    arg.Max = 30\n}\n\nerr = db.Get(&ret, `\n    SELECT\n        COALESCE(json_agg(raw), '[]') AS videos,\n        COALESCE(MAX(total), 0) AS total\n    FROM (\n        SELECT\n            raw,\n            COUNT(*) OVER () AS total\n        FROM site_avgle_videos\n        WHERE true\n\n        -- keyword\n        AND CASE WHEN $1::text IS NOT NULL THEN\n            raw->>'title' ~* $1\n        ELSE true END\n\n        -- favorite\n        AND CASE WHEN $5::bool IS NOT NULL THEN\n            is_favorite = $5\n        ELSE true END\n\n        -- sort\n        ORDER BY\n        CASE $4\n        WHEN 'id-desc' THEN (raw->>'vid')::int\n        WHEN 'id-asc' THEN -(raw->>'vid')::int\n        WHEN 'likes-desc' THEN (raw->>'likes')::int\n        WHEN 'random' THEN random()\n        ELSE (raw->>'vid')::int\n        END DESC\n\n        OFFSET $2\n        LIMIT $3\n    ) t\n    `,\n    arg.Keyword,\n    arg.Max*arg.Page,\n    arg.Max,\n    arg.Sort,\n    arg.IsFavorite,\n)\nif err != nil {\n    return\n}\n\nreturn\n\n}\n```\nWhen vscode-go is disabled, suggestions pop up:\nhttps://imgur.com/SWtPJCD\n. settings\n\"editor.quickSuggestions\": {\n        \"other\": true,\n        \"comments\": true,\n        \"strings\": true\n    },. ",
    "Max-Pano": "I found the things I did wrong with the launch.json file, after setting remotePath with the project code path on Ubuntu, and program with the local MacOS file path which I mount with the same project code path on Ubuntu. \nThen, I got myself a environment of remote debugging using single project folder and running system.\nNice!. ",
    "DarthPestilane": "@ramya-rao-a Yes BNB is under GOPATH/src but I can't run go build since there is not a main.go file.. @ramya-rao-a go build . comes out with no error\n\nAnd here is my go env\nshell\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/wangrui/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.9/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.9/libexec/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/pm/z4bkrqwn5xj8p0h16k9tb_br0000gp/T/go-build415583934=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\". Error is showing up even if in a non-test file:\n\n\nAnd output panel shows nothing when I chose the \"Go\" channel:\n\nmaybe it's because I turn go.vetOnSave to off?\nAnd I also tried turn  go.vetOnSave to package, and output shows only Finished running tool: /usr/local/bin/go tool vet .\nHere's my golang config:\n\"go.buildOnSave\": \"off\",\n    \"go.lintOnSave\": \"off\",\n    \"go.vetOnSave\": \"off\",\n    \"go.formatOnSave\": false,\n    \"go.formatTool\": \"gofmt\",\n    \"go.useDiffForFormatting\": false,\n    \"go.coverOnTestPackage\": false,\n    \"go.gocodeAutoBuild\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.gotoSymbol.includeImports\": true,\n    \"go.liveErrors\": {\n        \"enabled\": true,\n        \"delay\": 500\n    },. @ramya-rao-a It's all gotype-live\nI ran gotype-live -a ./, it showed the exact errors\nThank you!. @ramya-rao-a Sounds reasonable. Thank you ! Hope to figure out of this.. @tylerb It shows could not import xxx, same errors as above, after I run gotype-live -a ./. And I don't think it's the problem of directory structure, since I moved the whole project folder to $GOPATH/src, errors also showed up. ",
    "alexkohler": "I'd like to take a stab at this.. Nice catch! @ramya-rao-a Sure - I'll take a look later today.. It looks like we are checking if the suggest.class is 'func', whereas we should \n be checking if the suggest.type contains 'func' (because a locally defined function will have a class of 'var', not func). https://github.com/Microsoft/vscode-go/blob/0.6.66/src/goSuggest.ts#L168\nI.e. before:\n...&& suggest.class === 'func'\nMy proposed solution:\n...&& suggest.type.includes('func')\n@ramya-rao-a thoughts?. @ramya-rao-a The suggest.type would be func (k string) I think - I\u2019ll double check this when I have access to my PC. . @ramya-rao-a Yes, to confirm the suggest.type is func(k string). The suggest.type of the same function declared non-locally is also func(k string). Looking at all the potential edge cases, using includes does seem a little heavy handed.. Not necessarily in another file, just declared in package scope rather than local scope.\nI.e.:\n```\npackage main\n// package scoped function p\nfunc p (k string) {}\nfunc main() {\n// locally scoped function l\nl := func (k string) {}\n}\n```. ",
    "lsyarn": "@ramya-rao-a Thanks for answering! Here is my launch.json file, I use the Remote :\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Remote\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"/data/code/golangApp/app\",\n            \"port\": 12345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}\",\n            \"trace\": \"verbose\",\n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        },\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${fileDirname}\",\n            \"env\":{},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\nAnd my setting.json file:\n{\n    \"files.autoSave\": \"off\",\n    \"python.formatting.formatOnSave\": true,\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n    \"deploy\": {\n        \"packages\": [\n            {\n                \"name\": \"apps\",\n                \"description\": \"App\",\n                \"files\": [\n                    \"**/*.go\",\n                    \"*.go\"\n                ],\n                \"deployOnSave\": [\"APP\"]\n            }\n        ],\n        \"targets\": [\n            {\n                \"type\": \"sftp\",\n                \"name\": \"APP\",\n                \"description\": \"to app path\",\n                \"mappings\": [\n                    {\n                        \"source\": \"\",\n                        \"target\": \"app\"\n                    }\n                ],\n                \"dir\": \"/data/code/golangApp\",\n                \"host\": \"localhost\", \"port\": 16022,\n                \"user\": \"****\", \"password\": \"****\",\n                \"checkBeforeDeploy\": true\n            }\n        ]\n    }\n}. Yes, you are right. redisWrite.go is in a external package, its path is $GOPATH(C:\\Users\\lisi-\\go\\src\\telcomapp.cn\\redis). And apkana.go is in the package I have opened in VS Code, the ${workspaceRoot} is where apkana.go  in, as D:\\git\\anascripts\\app.\nWhen I remove the breakpoint in  redisWrite.go  the remote debug works right, but when I am trying to step into redisWrite.go, the error Unable to open 'redisWrite.go': File not found c:\\Go\\src\\telcomapp.cn\\redis\\redisWrite.go). comes up.\nMaybe this issue can be described as Can Not Step Into External Package When Remote Debug, because when I debug the same project locally, step into works fine.. apkana.go not in GOPATH, neither the local or remote machine. After I put apkana.go into GOPATH, step into works fine, problem solved. I am new to Go, so this problem due to the wrong organization of Go project. I will post the project organization of my project and changes has been made to correct it.\nBut I still wonder why the local debug can step into the external package, but the remote one can't.\nWRONG ORGANIZATION !!!\nremote machine:\n    1. env:\n        $GOPATH = /data/app/gopath\n    2. packages\n        2.1 external package\n            %GOPATH/\n                bin/\n                pkg/\n                src/\n                    telcomapp.cn/\n                        redis/\n                            redisWrite.go   # package redis\n        2.2 package main\n            /data/\n                code/\n                    golangApp/\n                        app/\n                            apkana.go\n    3. debug\n        cd /data/code/golangApp/app\n        dlv debug --headless --listen :2345\n\n\nlocal machine:\n1. env:\n    $GOPATH = C:\\Users\\lisi-\\go\n2. packages\n    2.1 external package\n        %GOPATH/\n            bin/\n            pkg/\n            src/\n                telcomapp.cn/\n                    redis/\n                        -redisWrite.go  # package redis\n    2.2 package main\n        (${workspaceRoot} = D:\\git\\anascripts\\app)\n        ${workspaceRoot}/\n            .vscode/\n                launch.json\n                settings.json\n            apkana.go   # package main\n3. debug\n    run Rmote in VS Code\n\nAFTER CHANGED\nremote machine:\n    1. env:\n        $GOPATH = /data/app/gopath\n    2. packages\n        2.1 external package\n            %GOPATH/\n                bin/\n                pkg/\n                src/\n                    telcomapp.cn/\n                        redis/\n                            redisWrite.go   # package redis\n        2.2 package main\n            %GOPATH/\n                bin/\n                pkg/\n                src/\n                    telcomapp.cn/\n                        apkana/\n                            apkana.go   # package main\n    3. debug\n        cd $GOPATH/src/telcomapp.cn/apkana\n        dlv debug --headless --listen :2345\n\n\nlocal machine:\n1. env:\n    $GOPATH = C:\\Users\\lisi-\\go\n2. packages\n    2.1 external package\n        %GOPATH/\n            bin/\n            pkg/\n            src/\n                telcomapp.cn/\n                    redis/\n                        -redisWrite.go  # package redis\n    2.2 package main\n        (${workspaceRoot} = C:\\Users\\lisi-\\go)\n        %GOPATH/\n            bin/\n            pkg/\n            src/\n                telcomapp.cn/\n                    apkana/\n                        apkana.go   # package main\n3. debug\n    run Rmote in VS Code . It seems like a network problem, make sure you can access[https://golang.org/x/tools/go/buildutil]( https://golang.org/x/tools/go/buildutil) and [https://go.googlesource.com/tools/](https://go.googlesource.com/tools/).\n\nwhy use golang.org but not github, that's because of  golang.org/x/tools/go/buildutil was imported in github.com/ramya-rao-a/go-outline/main.go but not github.com/golang//tools/go/buildutil . github.com/golang//tools/go/buildutil  is a mirror of  golang.org/x/tools/go/buildutil.\nif you cannot access the site above, try to replace golang.org/x/tools/go/buildutil in  file $GOPATH/src/github.com/ramya-rao-a/go-outline/main.go into github.com/golang/tools/go/buildutil, then run go get -u -v github.com/ramya-rao-a/go-outline. (NOT TESTED\uff01\uff01\uff01CAREFUL). ",
    "windzhu0514": "So why not modify github.com/ramya-rao-a/go-outline/main.go , import  github.com/golang//tools/go/buildutil not golang.org/x/tools/go/buildutil, I think this is Convenience for people can\u2019t access google or golang.org\n\u53d1\u9001\u81ea Windows 10 \u7248\u90ae\u4ef6\u5e94\u7528\n\u53d1\u4ef6\u4eba: lshunter\n\u53d1\u9001\u65f6\u95f4: 2017\u5e749\u670826\u65e5 22:57\n\u6536\u4ef6\u4eba: Microsoft/vscode-go\n\u6284\u9001: windzhu0514; Author\n\u4e3b\u9898: Re: [Microsoft/vscode-go] update tools failed (#1245)\nIt seems like a network problem, make sure you can accesshttps://golang.org/x/tools/go/buildutil and https://go.googlesource.com/tools/.\nwhy use golang.org but not github, that's because of golang.org/x/tools/go/buildutil was imported in github.com/ramya-rao-a/go-outline/main.go but not github.com/golang//tools/go/buildutil . github.com/golang//tools/go/buildutil is a mirror of golang.org/x/tools/go/buildutil.\nif you cannot access the site above, try to replace golang.org/x/tools/go/buildutil in file $GOPATH/src/github.com/ramya-rao-a/go-outline/main.go into github.com/golang/tools/go/buildutil, then run go get -u -v github.com/ramya-rao-a/go-outline. (NOT TESTED\uff01\uff01\uff01CAREFUL)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. ",
    "ByteFlinger": "Right. It would be a lot simpler with a simple config to allow all the onSave to trigger when saving even if there is nothing to save as I now have to figure out what are all the commands and tasks VS Code is doing plus ant disabling of linting and/or building on save requires me to remember to do the same on the tasks but it looks like this could be a solution for now, thank you.. ",
    "AlexRouSg": "Only\n\"go.testFlags\": [\n        \"-ldflags='-X mypackage.myvalue=./'\"        \n]\nThe error happens when I use any run test button (function/file/package) and is a build error.\n```\nRunning tool: go test -ldflags='-X -ldflags='-X mypackage.myvalue=./' -timeout 30s -run ^TestDriver$\ntestmain\nflag provided but not defined: -X mypackage.myvalue=./\nusage: link [options] main.o\n...\nFAIL    mypackage [build failed]\nError: Tests failed.\n```\nI've removed the go link usage text from the message.. Well that works ... face palm\n. Next is not available cause the program didn't hit a breakpoint, and it didn't hit a breakpoint cause it was already running when you attached and so it missed the first few breakpoints and so the first breakpoint it will hit from the screenshot is line 13 which will only hit when you send a http request after attatching.. From: https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#remote-debugging\nIt says for remote debugging, request is still \"launch\". So after some checking I found the source of your issue. The problem is not that attach doesn't work, it works just fine. The problem is that you are expecting attach to leave the program running after stopping debug while vscode-go is killing the program.\nSo to fix this, vscode-go needs to call the \"detatch\" function instead of the \"halt\" function on mode remote and maybe add request attach to mean leave program running after stopping debugger.. @ramya-rao-a \nSorry for being vague, from reading the delve docs and source code of the plugin, I found out that the plugin was sending the \"halt\" command to delve which kills the program. Where if it sent the \"detach\" command, it would've left the program running. \nIt's been so long since then I cannot remember where I found the relevant code/docs sorry. . Ohh might have misunderstood what you were asking.\nHe basically said \n\nEverytime I stop the debugging, it also stop the process which is not the same as attach\n\nWhich means, he wants the process to remain running after stopping the debugger. i.e. for the plugin to \"detach\" instead of \"halt\". You can set it in the go.toolsEnvVars or go.testEnvVars. @godblesshugh That issue is unrelated. Thought I'd tell everyone the workaround just incase no one figured it out yet. Set go.toolsGopath in the settings so it will then only have one gopath location.. Why use last? The go get behavior is to use the first.. Yes, that is how I observe it to work on Linux and Windows. This is even documented behavior. \nhttps://golang.org/cmd/go/#hdr-Download_and_install_packages_and_dependencies\n\nWhen checking out a new package, get creates the target directory GOPATH/src/. If the GOPATH contains multiple entries, get uses the first one. For more details see: 'go help gopath'.. I find that weird too. go install will install to the same gopath that the package is in. And if you're changing gopath to be a single path then that shouldn't even cause problems even if you have the same package in multiple gopaths.. \n",
    "ka2n": "Problem:\nI use build tags for excluding some tests when running on CI server.\nsome_test.go\n```go\n// +build noci\npackage some\nimport \"testing\"\nfunc TestFoo(t *testing.T) {\n // A test always fail on CI sever\n}\n```\nOnly when I add -tags noci to go test parameters, the test will run.\nshell\n$ go test .\n?       github.com/ka2n/example/some [no test files]\n$ go test -tags noci\nok     github.com/ka2n/example/some 0.007s\nIn VSCode, I want to add -tags noci every test run.\n<project_dir>/.vscode/settings.json\njson\n{\n  \"go.buildTags\": \"noci other_tag\"\n}\n\nRun run test in codelens of TestFoo, it outputs,\n\n```shell\nRunning tool: /usr/local/Cellar/go/1.9/libexec/bin/go test -timeout 30s -tags noci other_tag -run ^TestFoo$\nPASS\nok      github.com/ka2n/example/some    0.006s\nSuccess: Tests passed.\n```\n\nRun debug test in codelens of TestFoo, error GUI are shown,\nit says Failed to continue: Check the debug console for details.\n\nTo check final argument to launch delv,  log JSON.stringify(dlvArgs) in this place.\nIt output: \n[\"test\",\"--headless=true\",\"--listen=127.0.0.1:4887\",\"--build-flags=-tags,\\\"noci other_tag\\\"\",\"--\",\"-test.run\",\"TestFoo\"]\n-tags are malformed from [\"-tags\", \"\\\"noci other_tag\\\"\"](object) to -tags,\\\"noci other_tag\\\"(string).\nTo fix this problem I added this commit.\n\nSecond problem is something different situation, but I noted here for someone's reference.\nI want to add -ldflags, and specify tags,\n<project_dir>/.vscode/settings.json\njson\n    \"go.buildTags:\" \"noci other_tag\",\n    \"go.buildFlags\": [\n        \"-ldflags\",\n        \"-X mypackage.myvalue=./\"\n    ]\nrun debug test in codelens ofTestFoo\ngot error output in DEBUG CONSOLE\ncould not launch process: stat /Users/ka2n/src/github.com/msetsu/cointown/some/debug.test: no such file or directory\nProcess exiting with code: 1\\\nIn this situation, JSON.stringify(dlvArgs) is [\"test\",\"--headless=true\",\"--listen=127.0.0.1:24136\",\"--build-flags=-ldflags,-X mypackage.myvalue=./,-tags,\\\"integration noci\\\"\",\"--\",\"-test.run\",\"TestFoo\"]\nI've try to solve this problem, got partial success, but it make go.buildFlags incompatible with normal run test.\n. @ramya-rao-a \nThank you for taking a time for this PR and I'm sorry I have not include platform information.\nAt first, my initial solution was not correct to solve entire problem.\nI just write a patch to make goDebug.ts: launchArgs.buildFlags type and actual value match.\nSo, my latest commit is focus on just go.buildTags, I have to change the PR title :|.\nIsgo.buildTags solution will work for Windows? (I cannot test it because I don't have Windows machine)\n\nFor both issues correct\nIn the situation setting are below,\njson\n{\n  \"go.buildFlags\": [\n    \"-tags\",\n    \"noci other_tag\",\n    \"-ldFlags\",\n    \"-X mypackage.myvalue=./\"\n  ]\n}\n\ngo test argument should: [\"test\", \"-tags\", \"noci other\", \"-ldFlags\", \"-X mypackage.myvalue=./\" ]\ndlv debug argument should: [\"--buildFlags\", \"-tags 'noci other_tag' -ldFlags '-X mypackage.myvalue=./'\"] (argument values are quoted. It'll split again by Delve))\n\nBut I can't find a way to filter argument value and quote it for Delv arguments.\nAnd, now I think this problem is out of scope of this PR.. @ramya-rao-a \nI've tested with macOS(10.13 (17A365)), VSCode(Version 1.17.0-insider (1.17.0-insider)), vscode-go(https://github.com/Microsoft/vscode-go/commit/47c8b54fd93899e0bd5049c750e9cf2c3f051067) and works fine!\nThank you!. ~~Referring to usage and interface declaration, buildFlags seems to assume a string?, or is this reference place wrong(or not just Delve class)?~~ I'll check again, thanks.. ",
    "ssqf": "@ramya-rao-a\nUsing the default setting\uff0call setting to package. @saibing \nWhen go-langserver is used, the situation remains the same\n\n\nThis computer is ok for coding\uff0cI'm just coding \uff0c\nThe project has only a few files\nI miss the feeling of coding with previous versions, How to go back my favorite \u2018vscode+go\u2019 ever\n. ",
    "roadrunner": "a small project here, but this is happening when vet-on-save enabled. it feels so laggy even if it's set package or workspace level.\n. No, it's not enabled @ramya-rao-a . ",
    "ndrewnee": "I don't know why happened this job error, so reopening pull request to trigger travis. @ramya-rao-a No problem) I merged master and made some changes, you can view it. Thanks for your review). ",
    "techsin": "I know i can manually collapse them by pressing - sign on the left\n. ",
    "ssoroka": "I'm not sure if I'm doing something wrong, but this doesn't resolve it for me.. No. I have an odd project layout and I think that might be complicating the problem. Is there any way I can see the debug output that vscode is getting from the gogetdoc command?. ",
    "lmtyler": "Seems to be an issue will goreturns and not vccode-go.  Changed default to goimports and now formatting correctly.. ",
    "selfup": "Oh thanks I will try this out in a bit \ud83d\ude04 . Yea I don't seem to be able to reproduce this anymore \ud83d\ude02 \nSorry for the bother! The GIF captured the bad behavior but like you said, it seems to autofix now and is not reproducible.\nThanks for checking it out!. ",
    "jhaynie": "@ramya-rao-a thanks so much.  i never would have figured that out !!! . well, i guess it was turned on but didn't realize the highlighting would only show when i saved it. that wasn't intuitive until you explained it. it might have been better to indicate something in a hover etc.. ",
    "esemplastic": "Dear @ramya-rao-a could you please take a quick look and confirm the https://github.com/Microsoft/vscode-go/issues/1277 ?. Sure!\nfile: mypackage/original/embedded_struct.go\n```go\npackage original\ntype C struct {\n    Field  string\n    Field2 int\n}\nfunc (c *C) BeginRequest() {\n}\n```\nfile: mypackage/original/return_type.go\n```go\npackage original\ntype Result interface {\n    DoSomething()\n}\ntype Response struct {\n    Text string\n}\nfunc (r Response) DoSomething() {\n}\n```\nfile: mypackage/mypackage.go\n```go\npackage mypackage\nimport (\n    \"esemplastic/mypackage/original\"\n)\ntype (\n    C        = original.C\n    Result   = original.Result\n    Response = original.Response\n)\n```\nfile: main.go\n```go\npackage main\nimport (\n    \"esemplastic/mypackage\"\n)\ntype ExampleController struct {\n    mypackage.C\n}\nfunc (ex *ExampleController) Get() {\n    // ex. doesn't give completion for the mypackage.C's:\n    //       Field  string\n    //       Field2 int\n    // neither the function BeginRequest(),\n    // it only shows the field C and its own function Get.\n    // but ex.Field or ex.BeginRequest is compiled and ran without errors.\n    // The ex.C. gives completion help.\n}\nfunc (ex *ExampleController) ReturnSomething() mypackage.Result {\n    return mypackage.Response{\n    // field: Text string is not shown to completion help,\n    // nothing except the built go functions like append...\n    }\n}\nfunc main() {\n}\n```. ",
    "arbourd": "This might be an environmental pathing issue. Have you checked if you can find godef from the VS Code console?. It sounds like VS Code is having trouble inferring your gopath. Try setting it exactly in the settings (go.gopath) or playing around with the infer shell options.\nYou could also pop into the #vscode channel on the Gopher's slack for some more assistance with your pathing.\nEither way it'd be great if you could close this issue as Go To Def is working.. I personally don't get the \"Your Go version is different than before, few Go tools may need re-compiling\" message. (Just updated to 1.9.2 with Homebrew and am running into this issue)\nWhen attempting to run a Go To Def:\n```console\n[Extension Host] Error: Command failed: /Users/dylan/bin/godef -t -i -f /Users/dylan/src/github.com/.../path.go -o 681\ngodef: no declaration found for ioutil.TempFile\nat ChildProcess.exithandler (child_process.js:217:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:194:7)\nat maybeClose (internal/child_process.js:899:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n\n```. Thanks so much for this @ramya-rao-a \ud83c\udf89. ",
    "Jeyanthinath": "@arbourd thanks for that , I changed the gopath and  goroot ,now things are working fine!\nBut one more problem raised , I cannot able to change the first gopath I set in vscode, eventhough I removed from configuration json and I set a different path in .bashrc, whenever I tired to display gopath it is showing old path . ",
    "drinktee": "I disabled go.gocodeAutoBuild and result is same. I have close any other extensions. This is my config. Is anything wrong?\nIf I disable golang extension and the quick suggestion triggers quickly.\n```\n{\n     \"editor.fontFamily\":\"Consolas, Monaco, 'Courier New', monospace\",\n    \"editor.rulers\": [95],\n    \"editor.fontSize\": 20,\n    \"editor.wordWrapColumn\": 70,\n    \"editor.wordWrap\": \"bounded\",\n    \"go.gopath\": \"/Users/chenguoyan01/work/gocode\",\n       \"terminal.integrated.shell.osx\": \"/bin/zsh\",\n    \"editor.quickSuggestionsDelay\": 1,  \n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"editor.renderIndentGuides\": true,\n     \"editor.mouseWheelZoom\": true,\n    \"go.vetOnSave\": \"off\",\n    \"go.autocompleteUnimportedPackages\": false,\n    \"files.autoSave\": \"off\",\n    \"files.autoSaveDelay\": 600,\n    \"editor.tabCompletion\": false,\n\"window.zoomLevel\": 0,\n\"terminal.integrated.fontSize\": 16,\n\"workbench.activityBar.visible\": true,\n\n\"workbench.iconTheme\": \"vs-minimal\",\n\"editor.minimap.enabled\": false,\n\"workbench.colorCustomizations\": {\n    \"editorCursor.foreground\": \"#00FFFF\",\n    \"activityBar.background\": \"#110000\",\n    \"editor.selectionBackground\": \"#0022FF\"\n},\n\"workbench.colorTheme\": \"Solarized Dark cgy\",\n\"go.testFlags\": [\n    \"-v\"\n],\n\"window.openFilesInNewWindow\": \"on\",\n\"editor.acceptSuggestionOnEnter\": \"smart\",\n\"go.formatTool\": \"gofmt\",\n\"go.gocodeAutoBuild\": false,\n\"go.toolsGopath\": \"/Users/chenguoyan01/work/gocode/bin\"\n\n}\n```. It seems good when I have upgraded to macOS 10.13 ....... ",
    "carlca": "I checked the issue #947 and ran xcode-select --install. That seems to have fixed it.. I found the problem. Once I set the import line to c \"github.com/carlca/bigdata/company\" and used that prefix in the code, all was well.. Thanks, Ramya. Here's a controversial question: what's the difference between goreturns, goimports and gofmt, and, perhaps even more controversial: which one is better? You don't have to answer the second question, but if there was a summarised guide that answers the first question, that would be great!. I found the http://dominik.honnef.co/posts/2014/12/go-tools/ page that you referenced in #418. It looks like goreturns is the superset of the others. . The full list of relevant settings is now:\n```\n  \"go.formatTool\": \"goreturns\",\n  \"go.useLanguageServer\": true,\n  \"go.docsTool\": \"gogetdoc\",\n``\nStill noSignature Help! TBH, I hadn't realised that I was missing the feature, then I saw it described and saw the lovely screenshots. Now I'm missing it like crazy!!\n. **\u21e7\u2318Space`** does not work, either. . Thanks for the speedy reply Ramya! What hours do you work? I thought you were based in the US...\n\nWhen you hover on the function name are you able to see the details including the function signature?\nNo I am not.\nCan you provide a code sample where I can repro this?\nYeah! Do a go get github.com/carlca/bigdata (Don't worry - there's metadata but NO actual bigdata!) , then go into the file I'm currently working on cd carlca/bigdata/sqlorm and open sqlorm.go. That file is displaying all the symptoms described.\nAlso do try on a simple program, say\u00a0fmt.Println(. Does that work?\nNothing. Nada. Zilch. You get the idea!\n\nThanks in advance,\nCarl\n. Oops, tell a lie! I do get the hover help when I hover over fmt.Println but I'm not getting the individual parameter help, and, as I mentioned, \u21e7\u2318Space does not work, either. \nWhen I hover over schema.addColumn I don't see any help displayed at all.\nI know there was an issue between built-in functions as opposed to external functions, but I thought this had been fixed.. I've just tried the standard version of VSCode and there the Signature Help works perfectly. I'll investigate the config files.... Weird. It turns out that it was the line \"go.useLanguageServer\": true, that was causing the problem. It raises the question, what possible benefit could ever be gained from including that line?. Now that I have my Signature Help working, of course now I want to tweak it! How do I a) Change the background color of the Signature Help hover block, and b) Get VSCode  to pick up any doc comments I may have written for the func in question? Thanks!. I spoke too soon. I have the Signature Help working in as much as hovering over the func call gives me access to the full parameter list, but the Trigger Parameter Hints keystroke [\u21e7\u2318Space] still does not work in Insiders but it does work in Stable. The Preferences -> Keyboard Shortcuts config entry appears to be identical in each version of VSCode.. I'm using version 1.18.1 of VSCode (stable) and 1.19.0 of VSCode (insiders)\nSignature Help is working in VSCode (stable) but the Trigger Parameter Hints keystroke [\u21e7\u2318Space] does not work in VSCode (insiders).\nNo strike that - I've just tested it again and Insiders and Stable both appear to be working correctly now. I don't understand what was happening before but I'll take it!. In the replies to https://github.com/Microsoft/vscode-cpptools/issues/396 it says how there is supposed to be a \"Configure or Fix launch.json button in the Debug pane\". Where is this button. I cannot find it?. \nHi Ramya, that is what my folder structure looks like at the moment. \nThe drop-down list is missing some Add Config() s but I notice that they are subfolders of BigData. That includes sqlservertest.\nI've tried saving my Workspace and although I got an error message the first time, it seems to have worked the second time.\nAm I right in thinking that the only folders that contribute to the list of Add Config() s are top-level folders in the Workspace? That may have been the crucial missing part of my understanding!. OK I've added two folders which are already sub-folders, to be immediate folders within the workspace. I've just tried to resave the workspace. The error I got before has reappeared:\n\nNever mind that. I've got access to the correct launch.json configs now. Thanks so much, Ramya!!. The problem seems to be variable in that after I closed down and restarted VSCode just a couple of seconds ago, the breakpoints came back to life. I haven't seen the failure since. If It does reoccur, I will carry out the trace as you suggested.. Thanks, Ramya! Excellent work as always!. The update completed okay. However, whereas before the parameter hints had strted working, after this update they have disappeared again.\nI know you said that they should \"just work\", but in my experience, it seems to be that they \"just work sometimes\"!. Also I'm getting this in my go-langserver output...\nPassing an initialize rootPath URI (\"file:///Users/carlca/code/go/src/github.com/carlca\") is deprecated. Use rootUri instead.\nI don't know if it's connected with the disappearance of my parameter hints.. ",
    "natefinch": "Unfortunately, I uninstalled insiders after this bug and went back to the release version.  And I actually don't particularly want to go back to insiders because for some reason it loses all my settings?  Not exactly sure if that's expected or not, but it's kind of a PITA.. Possibly a duplicate of https://github.com/Microsoft/vscode-go/issues/1272, though I haven't seen stuck keys... what I type comes out correctly as far as I can tell, there's just major lag at times.. Try reinstalling the plugin.  Mine had a missing file somehow... uninstalling and reinstalling the plugin fixed it.. ",
    "FiloSottile": "That's an approximation, since the tools will break on a GOROOT change even if the version stays the same, but it would have helped in my case. However, it did not rebuild the tools automatically. How/when is it supposed to happen?. I never saw it either. It might be that some people, me included,\nrestart the editor so rarely that the check is not effective if only\ndone at startup.\n. FWIW, I just updated Go changing the GOROOT, and even restarting the editor no message popped up. I had to delete the tools and reinstall them to get back functional autocomplete for the stdlib. (A change of version without a change of GOROOT would cause more subtle problems I suspect.). I signed and emailed the Google / Microsoft CLA. I think you'll need to tick that box manually.. @ramya-rao-a ping. I think you'll need to toggle CLA state manually.. @ramya-rao-a Microsoft has a custom CLA for Google employees, I can't use the online system when contributing as part of my job. But I already signed the non-standard CLA and emailed it to the relevant Microsoft address (I think cla-automation@) and I'm told that now you'll have to check it manually on your side.. I think something might have indeed happened behind the scenes in #949 because the bot marked it as \"cla-already-signed\" instead of just signed.. From https://github.com/nsf/gocode/blob/9d1e0378d/README.md:\n\nIMPORTANT: consider switching to https://github.com/mdempsky/gocode if you have problems starting with Go version 1.10, due to changes in binary packages architecture (introduction of package cache) I'm not going to adjust gocode for it for quite some time. There is a higher chance that fork under the given link will have some solution to the problem sooner or later.. I am now noticing flakey formatOnSave with the default timeout of 750ms with files of just 1000 lines on a MacBook Pro (13-inch, 2017) with macOS 10.13.4.. formatOnSave was timing out after 30s while developing golang.org/x/crypto/chacha20poly1305. The issue impacted any file in the package, but the cause is probably a giant source file with test vectors. goimports from the command line takes 0.04s. \n\nNo idea why, but a restart of the editor fixed it. There were no pending updates.. Also, go.alternateTools does not expand ~, so it doesn't fully work as a replacement.. Myself I use it to develop on the standard library, and I would expect most people doing that to have different binaries in PATH. I think it's closely correlated to setting GOROOT explicitly, as that often implies using a separate toolchain.\nThe priority I would expect it alternateTools > GOROOT > PATH.. No real reason for anything else than gofmt and go to be in GOROOT/bin, so it's almost irrelevant, but I guess \"alternateTools > GOROOT > GOPATH > PATH\" for consistency across all tools?. Thank you! \u2728. Precisely :). ",
    "nenych": "It created file with settings in my project root directory . ",
    "zh-h": "\n@atombender  27197ae24d26117fb1bd804c9e06ea51cf4d78a3 This is my solution, but i thing it is useless now\ud83d\ude25. Duplicated feature https://github.com/Microsoft/vscode-go/issues/1291. @ramya-rao-a Duplicated with editor.quickSuggestions.comments feature, also I did not know why the test failed\n```\n[main 23:47:22] update#ctor - updates are disabled\nError: Error: Cannot find module 'C:\\Users\\zh-h\\NodejsProjects\\vscode-go\\test'\n        at t.handleExtensionTests (c:\\Users\\zh-h\\NodejsProjects\\vscode-go.vscode-test\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:710:691)\n``\nWindows 10 Home 64bit\nnpm@5.5.1\nnode@v8.9.0. I think the functions comments only using to completing the named functions\ud83d\ude02, it is shot of tests. Thinks your reviews, i will make it pretty.. Is having other util for picking up function`s name?. \n\nUsing lineText.match(/^\\/\\//) at first, it will sugguest alot of completions. My solution can skip one slash`s completion.. ",
    "GrumpyMetalGuy": "Sorry for the late response - yep, that worked well, plus I did some more reading on paths in Go, which provided some additional background. Thanks for the advice, onwards to more Go coding!. ",
    "roederw": "I don't think it's a good idea to force read only. What do you think about a notification like feature that notifies the user that this is a generated file? That way they understand that their changes will, probably, be overwritten with future generations.. ",
    "gregmarr": "@ramya-rao-a Is there any way to make this notification go away when I close the file, or automatically time out?  Right now I have to explicitly dismiss it, which is a bit of a pain.  I've also seen this appear when I haven't tried to edit the file, but I have been unable to track down a reproduction scenario so far.. @ramya-rao-a It happens if the file is regenerated (deleted and recreated) while it is open in VSCode.  I guess in some fashion that results in a \"file edited\" trigger.\n. In main my project, I'm working with a Swagger library that generates 4 different sets of code based on 3 different swagger files.  I'm currently working on the services, so it's fairly often, but I don't expect it to be something that lots of people run into often.  I also suspect that it would be difficult to differentiate between \"delete, and create new\" from \"edit\".. I am on Mac OS and am also seeing all of the issues reported here: having to click twice to stop, processes sticking around that I have to kill on my own using Activity Monitor, and the error about debugging already running for which I have to restart VSCode.  After I started seeing this I updated Delve and the Go tools, so they're current.\n. ",
    "Blazero": "This is solved after I open the GOPATH floder in VSCode. Only opening a GO file is not enough. No one mentioned this while I googled it.\n. ",
    "jlindsey": "Downloaded and installed this from the .vsix file.\nIt seems to be doing what it says on the tin: When I add the following to my settings.json:\n{\n    \"go.toolCommands\": {\n        \"go\": \"wgo\"\n    }\n}\nThen looking in the Output tab I see the tool being replaced properly in my project:\n/Users/jl2243/projects/terraform/tools/nagios/rpc/src/tf_nagios_api>Finished running tool: /Users/jl2243/projects/go/bin/wgo build -i -o /var/folders/3_/8n0lrvq17qb3rkdwd4dfgr_80000gp/T/go-code-check tf_nagios_api\nHowever: when I intentionally break my code by adding an unused import, I do not get any error report. In the terminal, running this manually I get:\n```\n/Users/jl2243/projects/go/bin/wgo build -i -o /var/folders/3_/8n0lrvq17qb3rkdwd4dfgr_80000gp/T/go-code-check tf_nagios_api\ntf_nagios_api\nsrc/tf_nagios_api/service.go:6:2: imported and not used: \"encoding/json\"\n```\nBut no output in VSCode or the Problems tab. I don't know if this is a separate issue or not.. @ikedam https://github.com/skelterjohn/wgo\nIt is similar to gb in that it aims to bypass $GOPATH nonsense and enable the creation of \"self-contained\" Go project directories. Instead of replacing the go tool like gb does, wgo wraps it while manipulating paths and config options.. @ikedam @ramya-rao-a After doing some more tests on my end, I believe my results were caused by old configs in my global User settings. After removing all the go.*settings from there and running more tests on a few codebases, everything behaves as expected.\nLGTM now. \ud83d\udc4d . > I propose to have this customization feature just for go.\nThis is fine with me and it's all I personally need. However, one benefit of wgo is its wgo exec method, which wraps whatever command you pass it in the $GOPATHand environment variables that wgo generates. This could potentially be useful for the other tools you mentioned.. @ramya-rao-a Downloaded and installed successfully. Switched my config above for the new setting name. Everything still works fine and as expected.\nThanks for your hard work on this!. I do not use gb anymore, having switched to wgo which is a similar project. It looks to me like #1297 should fix this, or some more general config like go.buildTool.. ",
    "ikedam": "@ramya-rao-a\nI reproduced the issue that you pointed in my environment. Sorry.\nAnd your fix worked perfect, thanks!\n. @jlindsey Would you tell me what is wgo?\nIn my environment, error reports are shown as expected by using goapp instead of go.\nThe issue may be caused for what wgo does.\n. @ramya-rao-a \n+1 and -1 for having this feature only for go:\n+1 as\n I'm happy even with switching only go for my current usecase.\n    * I don't have actual usecases for switching other tools.\n vscode-go handles the path for go and those for other tools in different ways (getGoRuntimePath() and getBinPathWithPreferredGopath()), and it can easily cause bugs to switching paths in the same way, just like I did. It makes sense to apply this feature only to go for now, and then introduce a feature for other tools in another day.\n-1 as\n* I believe the feature for other tools is still useful as @mbenkmann pointed:\n    * Useful for per-workspace settings.\n    * Wrapping a tool to change the tool behavior (e.g. add a option switch when launching).\nSo how about going in this way?:\n\nClose this request.\nCreate a new request to generalize and unite getGoRuntimePath() and getBinPathWithPreferredGopath().\nI plan getBinPath(toolName, searchPaths, defaultPaths).\n\n\nCreate a new request remaking this request.\n\nI think I can work for that in June.\n. I worry that we lose the chance to generalize getGoRuntimePath() and getBinPathWithPreferredGopath() forever if we apply this feature only to go here.\n. @ramya-rao-a I tried 0.6.83-beta-1 (and 0.6.83, sorry for my late response).\nIt worked perfectly. I can use goapp in my project.\nThanks for all the work!\n. ",
    "jmmcatee": "This appears to only happen if I am opening arbitrary Go files without have a folder open. If this is a requirement to load the function, I missed this in the instructions.. ",
    "474420502": "My situation is just like yours @jmmcatee \nBut i solve it in the way that  reinstall tools.. ",
    "dxvgef": "It's work.. ",
    "Daylien": "Hey, i have a little work around for this problem.\nFirst configure an task for the build process. Like this: \njson  \n  \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"taskName\": \"Build\",\n            \"type\": \"shell\",\n            \"command\": \"go\",\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"args\": [\n                \"build\", \"-o\", \"${workspaceRoot}/bin/output\", \"${workspaceRoot}/main.go\"\n            ]       \n        }\n    ]\n}\nAfter that edit the debugger settings. Like this:\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"exec\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"preLaunchTask\": \"Build\",\n            \"program\": \"${workspaceRoot}/bin/output\",       \n            \"env\": {},\n            \"args\": [],\n            \"showLog\": true\n        }\n    ]\n}\nMake sure that \"preLaunchTask\": \"Build\", is set to the correct task name !\nIf you hit the debugger key (for me F5), the task is running after that you can debug your code. Works like a charm for me.\nHope this helps. Have fun\n. ",
    "sigwinch28": "Same issue here. I have a red/green colour deficiency and I struggle to tell the reds and greens apart.\nIt appears that the gutter coverage (which I use) is implemented via images/gutter-green.svg and images/gutter-red.svg. So it looks like this is hard-coded.\nWould it not be possible to generate these SVGs in memory according to a user's colour preferences?. I have a temporary workaround for gutter coverage: replace the colour code in gutter-green.svg (or gutter-red.svg) in your .vscode/extensions/lukehoban.go-x.x.x/images directory to your liking:\nxml\n<svg width=\"32\" height=\"48\" viewPort=\"0 0 32 48\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n  <!-- <polygon points=\"16,0 32,0 32,48 16,48\" fill=\"#A6DC8E\"/> -->\n  <polygon points=\"16,0 32,0 32,48 16,48\" fill=\"#5C8BA9\"/>\n</svg>. @ramya-rao-a That definitely helps for me.\nAlas, would it be possible to distribute a handful of SVGs as part of two or three colour schemes, too?. According to a post on the UX stack exchange and the article it cites, it looks like yellow/blue should be a good combination (see this example palette).\nHere's a bit more on the subject: http://jfly.iam.u-tokyo.ac.jp/color/#pallet\nI chose the yellow for uncovered and blue for covered:\n\nEdit: @ramya-rao-a as you suggested, a pattern could work, too. Perhaps some diagonal striping in one of the decorations?. ",
    "UnGast": "I see the same behavior since the last update (probably). Gocode is not running, but it's installed. It doesn't work in a single file program either.. Running go get -u github.com/nsf/gocode, restarting vscode and hitting \"install\" on a message that said a tool was missing fixed it.. ",
    "mmcmm": "Yes, I had the same problem, breakpoints not getting hit, although I now it seems to be working. . @ramya-rao-a I can concur, is also very slow to step over, and I tried to reinstall dlv to no avail, I remember getting slow suddenly, months ago, I think it was an update. . @ramya-rao-a here it is with a hello world, https://gyazo.com/a90e25806cbbf6013d4af25a1c0220c2 it doesn't seem that slow actually, but still flashes into proc.go, but it flashes, on the normal codebase it would just stop into proc.go and you need to step over it. . @ramya-rao-a I just got the new update, and yes it is slower with global variables ON, I had it off, using the workaround you posted with return null, you can see bellow, it can take up to 1 second to step over, and those are simple if statements in a big codebase albeit. \nhttps://gyazo.com/b24bebc3b90c48b2ffd1f8e70fd501cf\nIn my opinion is not unbearable slow, initially it was much slower. . @ramya-rao-a yes, got the update for both, hence it overwrite the workaround I did when you initially posted it, thanks for the config tip. No proc.go btw, so I guess this can be closed. . @ramya-rao-a I just updated, although I do update the tools regularly, and the delay is still there. Thanks\nhttps://gyazo.com/c74cb48d0aaa0af2c8dd4fa11b30ecab. @stamblerre decently large, over 14k lines of code. . ",
    "selam": "hello,  we have same problem (my team) on Mac Os X, delve version: 1.0.0-rc.2, vscode version 1.18.1, i try with vscode-go with 0.0.66 and start working again, if i try never versions of vscode-go extension stop working. @ramya-rao-a  not really the same case, my code in $GOPATH but error was same.\nfirst  error was \"file not found\" i downgrade, upgrade delve versions then error message changed to \"unkown file\" instead of \"file not found\", then i try different versions of vscode-go extension, now delve version 1.0.0-rc2 and vscode-go 0.0.66 and works like a charm. ",
    "denismp": "I upgraded to 1.22.0, now it says the the breakpoint is ignored because generated code not found(source map problem?).  BTW, I am writing angular 2 code.. ",
    "RajatBanerjee": "any update on this ? I still get \nError on CreateBreakpoint: could not find $GOPATH/src/githubfolder/myfolder/file.go\nvscode :1.22\nvscode-go :0.6.78 - 3rd April, 2018. any update on this @ramya-rao-a  ?\ni get the same error on \nVScode:1.22\nvscode-go : 0.6.78 - 3rd April, 2018\nError on CreateBreakpoint: could not find /Users/rbanerjee/go/src/github.xyz.corp/lumen/project/resolver.go:33\ndebug config:\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/main.go\",\n            \"env\": {\n                \"GOPATH\":\"/Users/rbanerjee/go\"\n            },\n            \"args\": [],\n            \"showLog\": true,\n            \"trace\": \"verbose\"\n        }. ",
    "buzzdan": "any news on this issue ? still cant debug. Any news on this issue ?. ",
    "fcelda": "I have a similar problem and by trial and error I found out that this might indeed be caused by symlinks.\nIn my case, I have a symlink in GOPATH that points to sources that are checked out somewhere else. Whenever I place breakpoint to a symbol in a package within this path containing symlink, it will appear as unverified breakpoint in VSCode.\nThis is the setup:\n- GOPATH: ~/devel/go\n- sources: ~/company/repo\n- symlink: ~/devel/go/src/github.com/company/repo -> ~/company/repo\nIf I remove the symlink and move the sources into GOPATH, the problem disappears.\nJFTR, setting the breakpoints via Delve works even with the symlink.. ",
    "arkanmgerges": "Hi,\nI'm using vscode insiders version 1.25.0-insider\ngolang 1.10.1\ndlv is installed.\nos : ubuntu 18\nI could not hit the the breakpoint for any other project, even the hello world that is discussed on this page, and I even had tried VSCode (not insider) and also I could not hit the breakpoints.\nI moved the code to /tmp and it did not work (the code work, but I mean it did not hit the break point)\nI tried the code in ~/go/src/...etc and it did not work (I'm referring to the breakpoint)\nI tried from other places and it did not hit the breakpoint\nI don't know what is the problem\nThis is just an example taken from y debug console (trace: verbose is set)\nsh\nVerbose logs are written to:\n/tmp/vscode-go-debug.txt\n3:06:47 PM, 6/24/2018\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /home/arkan/go\nRunning: /home/arkan/go/bin/dlv debug --headless=true --listen=127.0.0.1:2345 --log=true --\ntime=\"2018-06-24T15:06:47+03:00\" level=info msg=\"launching process with args: [/tmp/delve-crash/app/debug]\" layer=debugger\n. Sorry to mention here, but I've tested goland from intellij and it worked, I can debug the code without any problem.\nI'm not making any ads, or something, but MS VSCode team needs to put more efforts on this\nI think VS Code needs more attention.\nBest regards\n\n. Hi,\nI just mentioned also on debug broken: vscode breakpoint set but not hit, that I could not hit the breakpoint(s). ",
    "ravirakesh": "ramya-rao-a:-\nHi,\nI have go lang application working in docker with delve entry-point but getting response from vs code but break point not working properly its disable.   . ",
    "ravidborse": "@ramya-rao-a \nGetting Error\n\nError on CreateBreakpoint: could not find C:\\Users\\raborse\\go\\src\\RestAPI\\main.go:7\n\nVerbose logs are written to:\nC:\\Users\\raborse\\AppData\\Local\\Temp\\vscode-go-debug.txt\n2019-2-9, 18:29:27.904 UTC\nFrom client: initialize({\"clientID\":\"vscode\",\"clientName\":\"Visual Studio Code\",\"adapterID\":\"go\",\"pathFormat\":\"path\",\"linesStartAt1\":true,\"columnsStartAt1\":true,\"supportsVariableType\":true,\"supportsVariablePaging\":true,\"supportsRunInTerminalRequest\":true,\"locale\":\"en-us\"})\nInitializeRequest\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":1,\"command\":\"initialize\",\"success\":true,\"body\":{\"supportsConfigurationDoneRequest\":true,\"supportsSetVariable\":true}}\nInitializeResponse\nFrom client: launch({\"name\":\"Launch\",\"type\":\"go\",\"request\":\"launch\",\"mode\":\"debug\",\"program\":\"c:\\\\Users\\\\raborse\\\\go\\\\src\\\\RestAPI\\\\main.go\",\"showLog\":true,\"trace\":\"verbose\",\"logOutput\":\"rpc\",\"dlvLoadConfig\":{\"followPointers\":true,\"maxVariableRecurse\":1,\"maxStringLen\":64,\"maxArrayValues\":64,\"maxStructFields\":-1},\"env\":{\"GOPATH\":\"C:\\\\Users\\\\raborse\\\\go\",\"ALLUSERSPROFILE\":\"C:\\\\ProgramData\",\"AMD_ENTRYPOINT\":\"vs/workbench/services/extensions/node/extensionHostProcess\",\"APPDATA\":\"C:\\\\Users\\\\raborse\\\\AppData\\\\Roaming\",\"APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL\":\"true\",\"CommonProgramFiles\":\"C:\\\\Program Files\\\\Common Files\",\"CommonProgramFiles(x86)\":\"C:\\\\Program Files (x86)\\\\Common Files\",\"CommonProgramW6432\":\"C:\\\\Program Files\\\\Common Files\",\"COMPUTERNAME\":\"RABORSE-1Q0HR\",\"ComSpec\":\"C:\\\\WINDOWS\\\\system32\\\\cmd.exe\",\"DEFLOGDIR\":\"C:\\\\ProgramData\\\\McAfee\\\\Endpoint Security\\\\Logs\",\"ELECTRON_RUN_AS_NODE\":\"1\",\"GOROOT\":\"C:\\\\Go\\\\\",\"HOMEDRIVE\":\"C:\",\"HOMEPATH\":\"\\\\Users\\\\raborse\",\"LOCALAPPDATA\":\"C:\\\\Users\\\\raborse\\\\AppData\\\\Local\",\"LOGONSERVER\":\"\\\\\\\\ADC-BGL-PN-1\",\"NUMBER_OF_PROCESSORS\":\"4\",\"OS\":\"Windows_NT\",\"Path\":\"C:\\\\Program Files (x86)\\\\Common Files\\\\Oracle\\\\Java\\\\javapath;C:\\\\ProgramData\\\\Oracle\\\\Java\\\\javapath;C:\\\\WINDOWS\\\\system32;C:\\\\WINDOWS;C:\\\\WINDOWS\\\\System32\\\\Wbem;C:\\\\WINDOWS\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\;C:\\\\Program Files (x86)\\\\WebEx\\\\Productivity Tools;C:\\\\Program Files (x86)\\\\Cisco\\\\OSD-ShellApplications;C:\\\\Program Files\\\\PuTTY\\\\;C:\\\\Python27\\\\Scripts;C:\\\\Go\\\\bin;C:\\\\Pr[...]\nUsing GOPATH: C:\\Users\\raborse\\go\nCurrent working directory: c:\\Users\\raborse\\go\\src\\RestAPI\nRunning: C:\\Users\\raborse\\go\\bin\\dlv.exe debug RestAPI --headless=true --listen=127.0.0.1:11879 --api-version=2 --log=true --log-output=rpc\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"API server listening at: 127.0.0.1:11879\\n\"}}\nAPI server listening at: 127.0.0.1:11879\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"initialized\"}\nInitializeEvent\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":2,\"command\":\"launch\",\"success\":true}\nFrom client: setBreakpoints({\"source\":{\"name\":\"main.go\",\"path\":\"C:\\\\Users\\\\raborse\\\\go\\\\src\\\\RestAPI\\\\main.go\"},\"lines\":[7],\"breakpoints\":[{\"line\":7}],\"sourceModified\":false})\nSetBreakPointsRequest\nAll cleared\nCreating on: C:\\Users\\raborse\\go\\src\\RestAPI\\main.go:7\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"<- RPCServer.GetVersion(api.GetVersionIn{})\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"<- RPCServer.GetVersion(api.GetVersionIn{})\" layer=rpc\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"-> *api.GetVersionOut{\\\\\\\"DelveVersion\\\\\\\":\\\\\\\"Version: 1.1.0\\\\\\\\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $\\\\\\\",\\\\\\\"APIVersion\\\\\\\":2} error: \\\\\\\"\\\\\\\"\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"-> *api.GetVersionOut{\\\"DelveVersion\\\":\\\"Version: 1.1.0\\\\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $\\\",\\\"APIVersion\\\":2} error: \\\"\\\"\" layer=rpc\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"<- RPCServer.CreateBreakpoint(rpc2.CreateBreakpointIn{\\\\\\\"Breakpoint\\\\\\\":{\\\\\\\"id\\\\\\\":0,\\\\\\\"name\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"addr\\\\\\\":0,\\\\\\\"file\\\\\\\":\\\\\\\"C:\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\raborse\\\\\\\\\\\\\\\\go\\\\\\\\\\\\\\\\src\\\\\\\\\\\\\\\\RestAPI\\\\\\\\\\\\\\\\main.go\\\\\\\",\\\\\\\"line\\\\\\\":7,\\\\\\\"Cond\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"continue\\\\\\\":false,\\\\\\\"traceReturn\\\\\\\":false,\\\\\\\"goroutine\\\\\\\":false,\\\\\\\"stacktrace\\\\\\\":0,\\\\\\\"LoadArgs\\\\\\\":{\\\\\\\"FollowPointers\\\\\\\":true,\\\\\\\"MaxVariableRecurse\\\\\\\":1,\\\\\\\"MaxStringLen\\\\\\\":64,\\\\\\\"MaxArrayValues\\\\\\\":64,\\\\\\\"MaxStructFields\\\\\\\":-1},\\\\\\\"LoadLocals\\\\\\\":{\\\\\\\"FollowPointers\\\\\\\":true,\\\\\\\"MaxVariableRecurse\\\\\\\":1,\\\\\\\"MaxStringLen\\\\\\\":64,\\\\\\\"MaxArrayValues\\\\\\\":64,\\\\\\\"MaxStructFields\\\\\\\":-1},\\\\\\\"hitCount\\\\\\\":null,\\\\\\\"totalHitCount\\\\\\\":0}})\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"<- RPCServer.CreateBreakpoint(rpc2.CreateBreakpointIn{\\\"Breakpoint\\\":{\\\"id\\\":0,\\\"name\\\":\\\"\\\",\\\"addr\\\":0,\\\"file\\\":\\\"C:\\\\\\\\Users\\\\\\\\raborse\\\\\\\\go\\\\\\\\src\\\\\\\\RestAPI\\\\\\\\main.go\\\",\\\"line\\\":7,\\\"Cond\\\":\\\"\\\",\\\"continue\\\":false,\\\"traceReturn\\\":false,\\\"goroutine\\\":false,\\\"stacktrace\\\":0,\\\"LoadArgs\\\":{\\\"FollowPointers\\\":true,\\\"MaxVariableRecurse\\\":1,\\\"MaxStringLen\\\":64,\\\"MaxArrayValues\\\":64,\\\"MaxStructFields\\\":-1},\\\"LoadLocals\\\":{\\\"FollowPointers\\\":true,\\\"MaxVariableRecurse\\\":1,\\\"MaxStringLen\\\":64,\\\"MaxArrayValues\\\":64,\\\"MaxStructFields\\\":-1},\\\"hitCount\\\":null,\\\"totalHitCount\\\":0}})\" layer=rpc\nError on CreateBreakpoint: could not find C:\\Users\\raborse\\go\\src\\RestAPI\\main.go:7\nAll set:[null]\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":3,\"command\":\"setBreakpoints\",\"success\":true,\"body\":{\"breakpoints\":[{\"verified\":false,\"line\":7}]}}\nSetBreakPointsResponse\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"-> *rpc2.CreateBreakpointOut{\\\\\\\"Breakpoint\\\\\\\":{\\\\\\\"id\\\\\\\":0,\\\\\\\"name\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"addr\\\\\\\":0,\\\\\\\"file\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"line\\\\\\\":0,\\\\\\\"Cond\\\\\\\":\\\\\\\"\\\\\\\",\\\\\\\"continue\\\\\\\":false,\\\\\\\"traceReturn\\\\\\\":false,\\\\\\\"goroutine\\\\\\\":false,\\\\\\\"stacktrace\\\\\\\":0,\\\\\\\"LoadArgs\\\\\\\":null,\\\\\\\"LoadLocals\\\\\\\":null,\\\\\\\"hitCount\\\\\\\":null,\\\\\\\"totalHitCount\\\\\\\":0}} error: \\\\\\\"could not find C:\\\\\\\\\\\\\\\\Users\\\\\\\\\\\\\\\\raborse\\\\\\\\\\\\\\\\go\\\\\\\\\\\\\\\\src\\\\\\\\\\\\\\\\RestAPI\\\\\\\\\\\\\\\\main.go:7\\\\\\\"\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"-> *rpc2.CreateBreakpointOut{\\\"Breakpoint\\\":{\\\"id\\\":0,\\\"name\\\":\\\"\\\",\\\"addr\\\":0,\\\"file\\\":\\\"\\\",\\\"line\\\":0,\\\"Cond\\\":\\\"\\\",\\\"continue\\\":false,\\\"traceReturn\\\":false,\\\"goroutine\\\":false,\\\"stacktrace\\\":0,\\\"LoadArgs\\\":null,\\\"LoadLocals\\\":null,\\\"hitCount\\\":null,\\\"totalHitCount\\\":0}} error: \\\"could not find C:\\\\\\\\Users\\\\\\\\raborse\\\\\\\\go\\\\\\\\src\\\\\\\\RestAPI\\\\\\\\main.go:7\\\"\" layer=rpc\nFrom client: setExceptionBreakpoints({\"filters\":[]})\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":4,\"command\":\"setExceptionBreakpoints\",\"success\":true}\nFrom client: configurationDone(undefined)\nConfigurationDoneRequest\nContinueRequest\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":5,\"command\":\"configurationDone\",\"success\":true}\nContinueResponse\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"(async 3) <- RPCServer.Command(api.DebuggerCommand{\\\\\\\"name\\\\\\\":\\\\\\\"continue\\\\\\\",\\\\\\\"ReturnInfoLoadConfig\\\\\\\":null})\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"(async 3) <- RPCServer.Command(api.DebuggerCommand{\\\"name\\\":\\\"continue\\\",\\\"ReturnInfoLoadConfig\\\":null})\" layer=rpc\nFrom client: threads(undefined)\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":6,\"command\":\"threads\",\"success\":true,\"body\":{\"threads\":[{\"id\":1,\"name\":\"Dummy\"}]}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stdout\",\"output\":\"Hello World !!!\\n\"}}\nHello World !!!\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"(async 3) -> rpc2.CommandOut{\\\\\\\"State\\\\\\\":{\\\\\\\"Running\\\\\\\":false,\\\\\\\"Threads\\\\\\\":null,\\\\\\\"NextInProgress\\\\\\\":false,\\\\\\\"exited\\\\\\\":true,\\\\\\\"exitStatus\\\\\\\":0,\\\\\\\"When\\\\\\\":\\\\\\\"\\\\\\\"}} error: \\\\\\\"\\\\\\\"\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"(async 3) -> rpc2.CommandOut{\\\"State\\\":{\\\"Running\\\":false,\\\"Threads\\\":null,\\\"NextInProgress\\\":false,\\\"exited\\\":true,\\\"exitStatus\\\":0,\\\"When\\\":\\\"\\\"}} error: \\\"\\\"\" layer=rpc\ncontinue state {\"Running\":false,\"Threads\":null,\"NextInProgress\":false,\"exited\":true,\"exitStatus\":0,\"When\":\"\"}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"terminated\"}\nTerminatedEvent\nFrom client: disconnect({\"restart\":false})\nDisconnectRequest\nHaltRequest\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"(async 4) <- RPCServer.Command(api.DebuggerCommand{\\\\\\\"name\\\\\\\":\\\\\\\"halt\\\\\\\",\\\\\\\"ReturnInfoLoadConfig\\\\\\\":null})\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"(async 4) <- RPCServer.Command(api.DebuggerCommand{\\\"name\\\":\\\"halt\\\",\\\"ReturnInfoLoadConfig\\\":null})\" layer=rpc\nFailed to halt - Process 18676 has exited with status 0\nDisconnectRequest to parent\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":7,\"command\":\"disconnect\",\"success\":true}\nDisconnectResponse\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"output\",\"body\":{\"category\":\"stderr\",\"output\":\"time=\\\"2019-02-09T23:59:38+05:30\\\" level=debug msg=\\\"(async 4) -> <nil>null error: \\\\\\\"Process 18676 has exited with status 0\\\\\\\"\\\" layer=rpc\\n\"}}\ntime=\"2019-02-09T23:59:38+05:30\" level=debug msg=\"(async 4) -> <nil>null error: \\\"Process 18676 has exited with status 0\\\"\" layer=rpc. @ramya-rao-a Thanks.. It's Working Fine Now..\nActually In Windows.. Go Installed in  C:\\Go  which also contained bin, src, pkg folder, \nBut my GOPATH is  C:\\Users\\raborse\\go\\src\\RestAPI.\nSo during Debugging it was pointing to source in C:\\Go\\src which was invalid. But it's working fine now.. ",
    "wangxinxu411": "I Have found the key ....THX.. ",
    "belltanellc": "I had the same issue on Windows. I had to override go.gopath in settings.json and use \\ instead of \\ in the path.    \"go.gopath\": \"C:\\\\Files\\\\Development\\\\Go1.8.1\\\\Workspace\". The first backslash is the escape character so that the second is read literally.. ",
    "mxschmitt": "Yes, I try my best to give you more further details about this issue. But it's very hard for me to give you that, because I don't know exactly when and how this error occurred.. Now the error occurred during the installation of the Go dependencies:\n\nVSCode Version: Code - Insiders 1.18.0-insider (098bb776d2e5fdf3cc9ea27a233754acf4309857, 2017-11-04T04:43:03.436Z)\nOS Version: Windows_NT x64 10.0.16299\nExtensions: \n\nExtension|Author (truncated)|Version\n---|---|---\nvscode-markdownlint|Dav|0.11.0\nvscode-eslint|dba|1.4.2\ntslint|eg2|1.0.14\nGo|luk|0.6.67\ndebugger-for-chrome|msj|3.5.0\n```javascript\nCannot read property 'forEach' of undefined: TypeError: Cannot read property 'forEach' of undefined\n    at Promise.all.then (C:\\Users\\maxsc.vscode-insiders\\extensions\\lukehoban.go-0.6.67\\out\\src\\goPackages.js:121:13)\n    at \ne.onUnexpectedError @ shell.ts:459\n``` . @ramya-rao-a Are there any updates related to this issue?. ",
    "chandradeepak": "\n1) In Gogland how it shows the root folder\n. I also face this. It happens in large projects.  In those cases some times disabling   \"go.gocodeAutoBuild\": false helps and makes it faster. But the problem with disabling this is , as we modify code and write new lines  \"go to definition\" no longer works or points to wrong variables. . @ramya-rao-a , mostly go to definition . I often see so many process with code helper running as go binaries which makes the whole mac slow. They die after some time but they take while to die. I know this issue is been discussed in other issues but i think none of them are helping and this keeps happening. \nthis is definitely an improvement which we can bring in vscode .  . ",
    "alexsasharegan": "Import Precedence: Std Lib default\n\nImporting should import default and standard by default . for example if i start typing fmt.Println it should import fmt . Now it asks for fmt package in various other github projects i have in my GOPATH.\n\nI was going to create a feature request around this. I think a configuration option to create auto import precedence would be ideal. The most sane default for such a config option being the go std lib bubbles to the top of the import autocomplete list.. ",
    "benguild": "Yes, I only tried to Cmd+Click stuff inside the GOPATH ... works fine in IntelliJ but not here. If we can fix this, I can basically officially adopt this as my editor for at least that part.. To answer your questions (sorry for the delay) ...\n1. Yes, and I have my GOPATH open in VS Code as well.\n2. If I hover over packages I get information, but not methods. Variables in the local file also work but again... not methods.\n3. I haven't setup a language server.. There weren't any errors initially. Just one info line. Here's what I see after clicking:\n```\nworkbench.main.js:sourcemap:9 [Extension Host] Cannot find golint\nworkbench.main.js:sourcemap:9 [Extension Host] Error: Command failed: /Go/bin/godef -t -i -f file.go -o 849\ngodef: no declaration found for test.Method\nat ChildProcess.exithandler (child_process.js:217:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:194:7)\nat maybeClose (internal/child_process.js:899:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n\nworkbench.main.js:sourcemap:9 [Extension Host] Error: Command failed: /Go/bin/godef -t -i -f file.go -o 851\ngodef: no declaration found for test.Method\nat ChildProcess.exithandler (child_process.js:217:12)\nat emitTwo (events.js:106:13)\nat ChildProcess.emit (events.js:194:7)\nat maybeClose (internal/child_process.js:899:16)\nat Process.ChildProcess._handle.onexit (internal/child_process.js:226:5)\n\n```\n... That's when trying the same line quickly a couple of times. Same code line works fine in IntelliJ.. It's the same with godef. Not sure what IntelliJ uses but IntelliJ works perfectly?. @ramya-rao-a yes the behavior is the same when using godef from the command line as mentioned in my comment above. I haven't had the chance to try your settings tweak though.. That seems to work, but it's a little slow. Is there any way to pre-index stuff?. Is that instead of the other setting or in addition to it? \u2014 I think IntelliJ does its own indexing somehow. It might be worth looking into, but I know you've said in the past that you're not familiar with their product. It does work correctly though.. OK\u2014 is there a reason why that's not turned on or included by default? (aside from it being experimental). Also, it says:\n\nReload VS Code window after installing the Go language server\n\n... Every time I open a file now. But the plug-in is installed already and I didn't hear of a way to install this on its own from you?. Got it, it wasn't installed. That is quite fast. I'll give it a try, thanks!. Thanks for your response!\n\nYes, I configured everything you'd suggested before.\nIn general what I've noticed is there's no slowness in IntelliJ (it's pre-indexed) but occasionally multiple seconds of lag on larger projects in VSCode. \u2014 In addition, when jumping across projects using imports, the functionality is often broken even though everything's within the configured GOROOT.\nmacOS Mojave but this was the same on High Sierra.\nBecause it's larger projects across imports this is unfortunately kind of infeasible but perhaps I could test something for you?. I'm comparing the performance of key features of another IDE to VSCode's for Go. \u2014 If the only way to get anything similar is by using a third-party language server then I'd assume this is more a limitation of the VSCode IDE. There may also be issues with that particular language server, which could be considered a reason to improve VSCode's internal \"Go To Definition\" support in general as IntelliJ has opted to do themselves rather than deferring the issues. \ud83e\udd37\ud83c\udffc\u200d\u2642\ufe0f. Thanks for clarifying. As stated, regardless of something being an IDE or lightweight editor, \"Go To Definition\" is a marketed feature: https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition\n\nI understand that you're relying on third-party tools to do this currently.. ",
    "pmkary": "\nCheck both User and Workspace settings. If you have disabled formatting in User settings and enabled it in Workspace settings, then the latter overrides the former.\n\nNo I have the formatting disabled everywhere. The only workspace setting is this:\njson\n{\n    \"cSpell.words\": [\n        \"Optimus\"\n    ]\n} \nAnd my main settings is:\n{\n    \"go.gopath\":\"/Users/pmk/Codes/Go\",\n    \"go.formatOnSave\":false,\n    \"[go]\":{\n        \"editor.formatOnSave\":false,\n        \"editor.formatOnType\":false,\n        \"editor.formatOnPaste\":false\n    },\n    \"[karyscript]\":{\n        \"editor.wordSeparators\":\"`~!@#$%^&*()=+[{]}\\\\|;:'\\\",.<>/?\"\n    },\n    \"[css]\":{\n        \"editor.formatOnSave\":true,\n        \"editor.renderWhitespace\":\"none\"\n    },\n    \"javascript.format.enable\":false,\n    \"editor.autoIndent\":false,\n    \"editor.detectIndentation\":false,\n    \"[markdown]\":{\n        \"editor.fontSize\":14,\n        \"editor.lineHeight\":30\n    },\n    \"editor.cursorBlinking\":\"expand\",\n    \"editor.trimAutoWhitespace\":true,\n    \"files.trimTrailingWhitespace\":true,\n    \"window.openFilesInNewWindow\":\"off\",\n    \"editor.fontSize\":13,\n    \"terminal.integrated.fontSize\":14,\n    \"editor.lineHeight\":26,\n    \"editor.wordWrapColumn\":90,\n    \"html.format.wrapLineLength\":300,\n    \"editor.fontFamily\":\"Hasklig-Medium\",\n    \"editor.tabSize\":4,\n    \"editor.wordWrap\":\"wordWrapColumn\",\n    \"editor.minimap.enabled\":false,\n    \"editor.minimap.renderCharacters\":false,\n    \"editor.renderIndentGuides\":false,\n    \"editor.wrappingIndent\":\"same\",\n    \"editor.quickSuggestionsDelay\":0,\n    \"window.zoomLevel\":0,\n    \"editor.renderWhitespace\":\"none\",\n    \"editor.insertSpaces\":true,\n    \"editor.formatOnType\":false,\n    \"workbench.statusBar.visible\":true,\n    \"window.titleBarStyle\":\"custom\",\n    \"cSpell.showStatus\":false,\n    \"editor.mouseWheelZoom\":false,\n    \"git.confirmSync\":false,\n    \"workbench.activityBar.visible\":true,\n    \"workbench.sideBar.location\":\"left\",\n    \"typescript.referencesCodeLens.enabled\":false,\n    \"terminal.integrated.shell.osx\":\"/usr/local/bin/fish\",\n    \"terminal.integrated.lineHeight\":1.42,\n    \"editor.fontLigatures\":true,\n    \"workbench.iconTheme\":null,\n    \"typescript.check.npmIsInstalled\":false,\n    \"rust.mode\":null,\n    \"workbench.colorTheme\":\"Kary \uff0d Light\"\n}\n\nDo you see this formatting done only after rename or even when saving after doing a manual change?\n\nI only see this formatting done after I done rename. on saving there is no formatting\n\nDo you have any other extensions that might be doing this? Try disabling all extensions (code --disable-extensions), enable just the Go extensions and try.\n\nI have no other extension for Go and no extension that does formatting.. Yes the formatting was caused by the grename tools.\nI guess I should create an issue in Go.\nThanks a lot for helping me here and putting your time.. ",
    "fruser": "@ramya-rao-a I'm sorry, I didn't provide enough information in my issue. \nI'm using OSX; Go was installed using Brew, therefore, which go results in /usr/local/bin/go\nIt looks like even when I specify GOPATH in the settings and run Code from the shortcut Code is unable to find GO. Is there a way to specify go binary in the settings somehow?. @ramya-rao-a please see the output below:\n- external terminal: /usr/local/opt/go/libexec\n- VS Code instance started from shortcut: /usr/local/opt/go/libexec\n- VS Code instance started from external terminal: /usr/local/opt/go/libexec\n. Hm, interesting...\nThis is the output of which go when I opened Code via the shortcut:\n/usr/local/bin/go, thus running go run hello.go from within integrated terminal works as expected.\nHere is the output of the $PATH env variable:\n/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin:/Users/user/.swiftenv/shims:/Users/user/.rbenv/shims:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/opt/qt@5.5/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/user/Applications/miniconda3/bin:/usr/local/opt/go/libexec/bin:/Users/user/Projects/GO/bin. Well, if I use internal terminal, then yes. But if I use Run Code feature, then I get /bin/sh: go: command not found error message.... Wow, you are absolutely right! This feature was part of the extension (Code Runner) I've installed and forgot about. I'm sorry for the confusion! Thank you so much for all your help!. ",
    "kkpoon": "I start vscode by \ncd $GOPATH/src/github.com/kkpoon/myproject\ncode .. for example:\n```\nactual code location\n/Users/admin/Development/github.com/project1\nGOPATH location by ln -s\nGOPATH=/Users/admin/Development/go\n$GOPATH/src/github.com/kkpoon/project1\nls /Users/admin/Development/github.com/project1\nand\nls $GOPATH/src/github.com/kkpoon/project1\nshow the same result\n```. project1 level\nI did mkdir -p src/github.com/kkpoon\ncd into that level and symlink project1 to its actual location. \nThis worked well when vscode icon was orange. But not after I update vscode to blue icon version.\nReal path created by mkdir\nGOPATH=/Users/admin/Development/go\n$GOPATH/src\n$GOPATH/src/github.com\n$GOPATH/src/github.com/kkpoon\nSymlink\n$GOPATH/src/github.com/kkpoon/project1 ->  /Users/admin/Development/github.com/project1\nls -l $GOPATH/src/github.com/kkpoon\ntotal 0\nlrwxr-xr-x  1 kkpoon  staff  52 Nov 11 00:04 project1 -> /Users/admin/Development/github.com/project1\n. It shows the actual path, which is not under GOPATH. I open vscode at $GOPATH/src/github.com/kkpoon. it shows the path under GOPATH and it works fine.\nYet, it worked fine even I start vscode in symlink folder.\nNow, I have no idea whether this issue belongs to OS level (macos) or vscode or go extension.\n:(. opening vscode at $GOPATH/src/github.com/kkpoon works\nopening vscode at /Users/admin/Development/github.com/project1 doesn't works (it is not under GOPATH)\nopening vscode at $GOPATH/src/github.com/kkpoon/project1 doesn't work. opening vscode at $GOPATH/src/github.com/kkpoon works\nopening vscode at /Users/admin/Development/github.com/project1 doesn't works (it is not under GOPATH)\nopening vscode at $GOPATH/src/github.com/kkpoon/project1 doesn't work. ",
    "shuntksh": "I am having the exact same issue as @kkpoon that I have to open vs-code from one level up ($GOPATH/src/github.com/kkpoon in this case to work on project1)  in order for go-plugin to read vendor directory.\nNote that I also created a symlink from my local workspace to GOPATH. And opening vs-code from the path under GOPATH.  (using MacOS X Sierra with VSC 1.18.1). ",
    "quicksnap": "Also seem to be affected. When I open it one level above the symlink, the red underline changes to a green underline with the same error message.. Looks like the green underline is coming from \"go.vetOnSave\": \"package\" setting. ",
    "ewoutp": "Same problem here.. ",
    "stlaz": "It seems that https://github.com/Microsoft/vscode/issues/34627 is the current upstream issue that needs to be resolved in order for the debugging in symlinked directory to work. I suspect the Go community will be bumping into this the most.. ",
    "matthewmueller": "Thanks for the quick fix! Works like a charm\nYep, I can also confirm that it was only happening on Insiders. . @qzyse2017 awesome! I'm not able to reproduce needing the full path, maybe I was typing in the command wrong. that's definitely easier.\neither way, I think it would be really cool if it could auto implement: var _ Query = (*query)(nil). ",
    "KISSMonX": "Thank You. . OK. Thanks.. ",
    "carlisia": "\ud83d\ude0d . ",
    "jpap": "Thanks for your help Ramya.  I've found the the issue is with the go build command: my command-line build works because I am building from the working directory $PROJ/.gopath~/src/mypackage whereas VSC is building from $PROJ because that's the ${workspaceRoot}.\nI cannot open $PROJ/.gopath~/src/mypackage directly into VSC because it is a symlink: VSC will instead open the $PROJ folder.\nIt used to work, but I guess a (recent?) change in behavior of golang broke this.  I can see now it doesn't directly relate to the Go VSC extension.\nOne solution would be an extension setting to select the working directory for the project that is different to ${workspaceRoot}; is that currently possible?. It reproduces back on 0.6.59, so it does not look like a regression in the Go extension.  I have also tried various Go versions and it reproduces on all of them.  So it looks like either I never saw these lint errors before, or I ignored them.  :-) My apologies.\nI recognize that my project structure is nonstandard; I can't think of a straightforward configuration setting that might help here: the mypackage symlink described above can be named anything, so specifying a configuration item as a path into it, and using it as a working directory, would then require passing to go build a partial-path relative to this for the source file opened in the editor and is not easily determined.\nI'll close the issue until I can think of a better way to solve this.. Further observations:\n\nI can remove the GOPATH env item from launch.json and the GOPATH environment appears to be the same (taken from the workspace GOPATH?)  Why is this? Is this a bug?\nWhen I remove the cwd item from launch.json and set the program to point into the folder where the test is, then the debugger launches and runs the test.  Unfortunately all of my breakpoints are marked as \"unverified\" (greyed out) and do not trigger.\n\nThe new config is,\n...\n    {\n      \"name\": \"Launch Tests\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"test\",\n      \"remotePath\": \"\",\n      \"port\": 2346,\n      \"host\": \"127.0.0.1\",\n      \"program\": \"${workspaceRoot}/lib/package\",\n      \"cwd\": \"${workspaceRoot}\",\n      \"env\": {\n        \"LOGGO\": \"<root>=DEBUG\"\n      },\n      \"args\": [\n        \"-test.run\", \"MyTest\"\n      ],\n      \"showLog\": true,\n      \"trace\": \"verbose\"\n    },\n...\nwhere I am wanting to debug tests in the package $PROJ/lib/package.. I have hit \"remove all breakpoints\" in the debug pane, reset the breakpoint by clicking it in a source editor, and now the breakpoint is hit!\nIs this a bug in the VSC debugger? (Not the debug adapter?). My final launch.json configuration is:\n...\n    {\n      \"name\": \"Launch Tests\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"test\",\n      \"remotePath\": \"\",\n      \"port\": 2346,\n      \"host\": \"127.0.0.1\",\n      \"program\": \"${fileDirname}\",\n      \"env\": {\n        \"LOGGO\": \"<root>=DEBUG\"\n      },\n      \"args\": [\n        \"-test.v\"\n      ]\n    },\n...\nSo now I can just hit F5 with any test file open and it runs all the tests in that folder; breakpoints included.  The LOGGO environment variable is there for my logging package; it doesn't need to be there in general.. @ramya-rao-a, before closing this thread, I'd love your view on some of the problems encountered above:\n It appears setting the cwd breaks the debugger.\n I had to clear the breakpoints and resetting them before they started working.\nSeparately, it would be nice to document in the README:\n  the -test.v argument\n The use of ${fileDirname} for running all tests in the opened file's directory\n* The GOPATH is inherited from the VSC environment, so there's no need to set it again in the launch configuration. > Can you provide clear repro steps for this with simple sample code so that I can get a repro? Then I can look into where the issue is.\nI've not seen this issue since; it happened when I was using a HEAD build of delve but have since moved to the latest release candidate 1.0.0-rc.2.  I think we can assume it was delve, and not your extension. :)\n\nCan you elaborate on the -test.v argument?\n\nUsing the -test.v argument tells the Golang testing framework to output verbose reports, which is helpful during debugging of a test.  It might be helpful to mention this in the README?\nSeparately I guess the same could be said of the \"run package tests\" clickable link in a test source file; how can we selectively enable that? (It's the same as passing -v to go test.). ... and same thing for running a go program (non-test target).. ... and same thing for running a go program (non-test target).. Place this is a test file...\nfunc TestPanic(t *testing.T) {\n    panic(\"I survived Timmy O'Toole getting trapped in a well... or did I?\")\n}\nWhen trying it out today, I see the debugger is stopping at runtime.startpanic(), whereas before it did not... if you can't reproduce it, please go ahead and close this item.  It may very well be because of a dud-version of Delve that I may have been using for a short while.  Thanks for following up.\nWith the debugger stopped at startpanic, I can see the stack trace and it provides a good way to debug panics further.. Turns out if we mix quotes, it works:\n\"buildFlags\": \"-tags 'TAG1 TAG2 TAG3'\"\nI've added similar comments to a relevant delve issue here.\nIt would be great if we could update the Wiki to reflect this.. I've updated the Wiki with instructions on how to handle multiple tags (who knew such edits are immediate?).\nI've tested it on macOS; no idea if it works the same on other platforms.  Please re-open this issue if that's a problem.. Please see playground, example copied below.\n```\npackage main\nfunc oops() {\n    var a int\n    a++\n}\nfunc main() {\n    oops()\n}\n``. @db47h I am not concerned with the debug view opening automatically.  I am more concerned with:\n1. A cryptic error message is shown on the Debug Console, that isn't clearly obvious that the issue is a fault in the program being run.  For example, in #1853 the author probably thought it was their debugger setup, before realizing it was a defect in their code.  (It has happened to me before too.)\n2. When a runtime error occurs, other than an explicit call toruntime.panic`, the debugger also shows a cryptic error message (\"Failed to continue - XXX\") on the Debug Console, and the Debug View is blank.\nThis is what I get in Delve with the above code sample:\n$ dlv debug oops.go\nType 'help' for list of commands.\n(dlv) c\n     1: package main\n     2: \n     3: func oops() {\n     4:     var a *int\n=>   5:     *a++\n     6: }\n     7: \n     8: func main() {\n     9:     oops()\n    10: }\nCommand failed: bad access\n(dlv)\nAs you can see, Delve stops at the site of the runtime error.  You can then use bt to get the stack frames,\n(dlv) bt\n0  0x0000000001053828 in main.oops\n   at ./oops.go:5\n1  0x0000000001053860 in main.main\n   at ./oops.go:9\n2  0x0000000001026e95 in runtime.main\n   at /usr/local/Cellar/go/1.11/libexec/src/runtime/proc.go:201\n3  0x000000000104dec1 in runtime.goexit\n   at /usr/local/Cellar/go/1.11/libexec/src/runtime/asm_amd64.s:1333\nIn VSC, the debugger shows the message \"Failed to continue - bad access\" on the Debug Console, with the Debug View blank, and it's not clear what happened at all.  To get any sense out of the situation, you have to run the code manually (under delve or not) in a terminal to see the runtime error and stack trace.\nIf the code sample above were to change so as to call panic in func oops() instead of the nil-pointer access, then yes, Delve and VSC breaks in runtime.fatalpanic.  But this is not what this bug report is about. ;-)\n. I'm running delve HEAD (or very close to it), on macOS.. ",
    "diogogmt": "I'm having a similar problem, after upgrading to High Sierra I can't go to the definition of libs in the vendor/ dir of my project.\nI've tried the settings:\n\"go.docsTool\": \"gogetdoc\",\n \"go.useLanguageServer\": true\nBut also didn't work.. ",
    "asasmoyo": "Hello, I would like to take this :)\nDo you have idea how the configurations should look like if we want to use Docker?. Great! Thanks @ramya-rao-a, I'll take a look at it. ",
    "MOZGIII": "I would love to run my tools off on a remote server via ssh. For my use case I'll share the file system via sshfs or nfs (either from the \"workstation\" to the \"tools runner\", or the other way - from the \"tools runner\" to the \"workstation\").\nMy end goal is to only have the editor and other relatively lightweight stuff runing off of my laptop (that runs from battarey, aka \"workstation\") and do all the heavy lifting on the power cord connected server (\"tools runner\"). Turns out linters heavily load CPU, who would knew.. ",
    "NexWeb": "Having kill -9 outside the for loop kills debug as well as debugserver and dlv.\nThis signal cannot be caught or ignored, and the receiving process cannot perform any clean-up upon receiving this signal.\nDon't believe it? Place the following into a text file, save as listpids.sh, fire up vsCode, hit your breakpoint, run top, get the Code Helper PID, run sh listpids.sh XXX, where XXX is the PID you found. Then try running listpids.sh again with the echo $1 inside the for loop.\n```\n!/bin/bash\nterminateTree() {\n    for cpid in $(/usr/bin/pgrep -P $1); do\n        terminateTree $cpid \ndone\necho $1 \n}\nfor pid in $*; do\n    terminateTree $pid\ndone\n``\nBetter to replace the mess of ineffective code in your terminateProcess.sh with something that actually works, such aspkill debug`.. Better to replace the mess of ineffective code in your terminateProcess.sh with what actually works, pkill debug. WFM, for more than a year without issue. The only hassle is having to re-modify terminateProcess.sh after updates of the extension. \n. You tried it how? It works for me, invariably. I guess you're SOL, until you figure out something else.  ;} By the way, there is a video showing the fix in action:  https://youtu.be/E_Nr2qA6bxo. Did you try using the modified extension on OSX?. This change just enables the debug binary to be deleted when a Goroutine has been started, as in the case of httpsSrv.ListenAndServe. It does not prevent the binary from being deleted in other cases.. ",
    "chuchiring": "can I config the \"debug\" file path? \nfor example I want delve  create the big debug file in my TEMP directory. @ramya-rao-a I tried but failed... or something wrong?\nin my package.json, i modified the path:\n\"output\": {\n    \"type\": \"string\",\n    \"description\": \"Output path for the binary of delve\",\n    \"default\": \"r://\" \n},\nbut the DEBUG file still generate in path same as the .go file. @ramya-rao-a ok thank you, it worked after I created a launch.json and add my custom file path to the property \"output\"!, finally, almost half year.. ",
    "ecbrodie": "I just installed the latest version of VSCode, vscode-go, go and delve onto my machine (Mac OS 10.13.4, also latest). I'm still running into this issue.\nI guess I'll .gitignore the debug file, but is anyone else still running into this issue? Ideally this is cleaned up automatically. I'm not excited to have to run a looping cleanup script.. ",
    "jadchaar": "Any updates on this? Been running into this and was wondering if it is in the pipeline for July or August.. ",
    "zhao-kun": "I have the same issue as you, I also used vscode-go and vscode-vim. But when I modified the user settings \"files.autoSave\": \"off\", the problem was solved. . ",
    "maxint64": "@zhao-kun Thank you very much!. @ramya-rao-a I tried your extension but the problem still exists. I did more test and found cursor will certainly jump to end of file after saving, no matter which way I use (click save button, press ctrl+s, or use vim command :w). Thank you!. ",
    "Xjs": "@ramya-rao-a Just a quick hint that after your changes introduced in 89e1a18dc1338b6b23a625a4458115bbf3492be1 the curser no longer moves to the end but to the beginning of the file when formatting-on-save.. Reading https://github.com/Microsoft/vscode/issues/1435, I'm not sure if the support for global tasks is really that high on the vscode agenda. I put together a small patch that essentially duplicates the lint command to provide a global \u00bbSlow Lint\u00ab that can e. g. be used for gometalinter, and will send a PR. Feel free to discard it if you don't like it, but I'm going to use it for the time being. :). ",
    "imlinax": "I have already up to the latest verion of Go extension(0.6.69), but the cursor still go to end of file.\nOS: mac 10.13.1\ngo for vscode:0.6.69\nvscodevim:0.10.5\n. ",
    "Nick-Lucas": "^ looks like that fixed it, though the install command didn't work for me (on Windows), it just launched Code without installing the tool.\nI followed these steps to be sure:\n Uninstall Go extension from Code\n Restart Code\n Use the Code extensions manager to \"install from VSIX\"\n Replace settings with the above\nIt then appears to be fixed. Thanks so much for this :). ",
    "julianfrank": "I'm getting the following error\n$ code --install-extension Go-latest.vsix\nError: end of central directory record signature not found\n    at D:\\Program Files\\Microsoft VS Code\\resources\\app\\node_modules\\yauzl\\index.js:183:14\n    at D:\\Program Files\\Microsoft VS Code\\resources\\app\\node_modules\\yauzl\\index.js:618:5\n    at D:\\Program Files\\Microsoft VS Code\\resources\\app\\node_modules\\fd-slicer\\index.js:32:7\n    at FSReqWrap.wrapper [as oncomplete] (fs.js:629:17). I'm on Windows 10 home ... Do I still need to use the clone and compile?. The whole jumping has stopped for me.... Thanks. ",
    "apang1992": "Thank you very much for your excellent work! I have just upgraded the extension :-). ",
    "Eun": "After digging into Delves source code I found out that the docs are outdated and delve is (currenlty) ignoring the --config flag. However there is a config file that will be loaded.\nIt is in the .dlv folder in your home folder.. ",
    "matthewfcarlson": "I can confirm that turning off the go extension fixes the issue. Let me try this newest package.. ",
    "leonardoResendeLima": "I have the following extensions installed.\n\nDebugger for Chrome\nGit Histpry (git log)\nGit Merger\nIntelliSense for CSS class names\nJS-CSS-HTML Formatter\nMaterial Theme\nnpm\nPath Intellisense\nProject Manager\nSettings Sync\n\nAfter disabling all extensions, I verified that this resolved the issue. I'll try one by one to see which one might be causing the problem.\n. Yeah, found it. It was the \"JS-CSS-HTML Formatter\", last change (0.2.3) of this project was on 31 Mar 2017. ",
    "dhananjayve": "Thank you\nOn Mon 20 Nov, 2017, 4:57 AM Ramya Rao, notifications@github.com wrote:\n\nClosed #1353 https://github.com/Microsoft/vscode-go/issues/1353.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1353#event-1348971895, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADauWGFGsHXf3utjIYILWoxx9vLcFKRPks5s4LlpgaJpZM4Qi8Dj\n.\n. \n",
    "DMarby": "Unsure as to why an unrelated test is failing on one specific go version on Mac, maybe someone with access could restart that travis job?. > Do you mean VS Code was trying to connect to delve before the api server was listening?\nYes, that is indeed what was happening.. That makes sense! As far as I can tell, nothing is outputted on stdout before the API server listening, so I've removed the string comparison.\nA better long-term solution would most likely be to attempt connection multiple times like @derekparker suggested, but I think this is a good change until that can be done.. The issue in #473 occurs when we attempt to connect to dlv before it's ready.\nThis occurs when we attempt to connect before the api server is listening, when we get stderr output. (Or when there's custom build flags with verbose causing stdout output during build, but that can only be resolved by adding behaviour such as retrying to connect several times I think)\nAs this change removes that behaviour, the 200ms delay shouldn't be needed anymore, as far as I can tell.. After looking into it further (and testing by adding \"-v\" as buildFlags to my debug configuration), that gets outputted on stderr rather than stdout as well, so we shouldn't need the api server listening check.. Fair enough, I've gone ahead and reverted the change that removed the delay.. ",
    "mfpierre": "@ramya-rao-a thanks for the fix, however I'm not able to install the provided extension\ncode --install-extension Go-latest.vsix\nError: end of central directory record signature not found\n    at /Applications/Visual Studio Code.app/Contents/Resources/app/node_modules/yauzl/index.js:183:14\n    at /Applications/Visual Studio Code.app/Contents/Resources/app/node_modules/yauzl/index.js:618:5\n    at /Applications/Visual Studio Code.app/Contents/Resources/app/node_modules/fd-slicer/index.js:32:7\n    at FSReqWrap.wrapper [as oncomplete] (fs.js:629:17). @ramya-rao-a I'm on OSX but the install from the cloned repo worked, from what I've tested so far seems to be fixed \ud83d\udc4d . ",
    "esinek": "found it.\n\"go.testTimeout\": \"35s\". Same here. Running gofmt from the cmd line works. Save on format isn't working. Option-Shift-F (the default format file in MacOS, which, I believe should use gofmt) doesn't format file either.\nWhen I select some lines and do Cmd-K, Cmd-F, I get the following message:\nSorry, but there is no formatter for 'go'-files installed.\nthis is with the following:\n\"editor.formatOnSave\": true,\n    \"go.formatTool\": \"gofmt\",\n    \"[go]\": {\n        \"editor.formatOnSave\": true\n    }\nlooking at the output console there is no gofmt as mentioned by @gangachris :\n```\nFinished running tool: /Users/me/workspace/myapp/bin/golint\nFinished running tool: /usr/local/go/bin/go vet ./...\nFinished running tool: /usr/local/go/bin/go build -i -o /var/folders/1z/3p0xvm1125941j03c7jr8vm7wfr3q/T/go-code-check mystuff\n```\nNOTE: uninstalled and installed 0.6.69 from VSIX and it's working again. ",
    "tannineo": "The output pane has the same info like the screenshot:\nFinished running tool: /usr/local/bin/go tool vet .\n/Users/carychan/Code/go/src/github.com/tannineo/2048-cli/gameplate/grid44.go:192: missing argument for Sprintf(\"%7d\"): format reads arg 10, have only 9 args\nSo it's something wrong with vet...\nAnyway thank you!. shell\n$ go version\ngo version go1.9.2 darwin/amd64. ",
    "grooveygr": "@ramya-rao-a according to the golang spec (https://golang.org/ref/spec#Method_declarations) adding methods to imported types is not supported.\n\nThe type denoted by T is called the receiver base type; it must not be a pointer or interface type and it must be defined in the same package as the method.\n\nWhen you try, you're met with a compilation error, e.g. cannot define new methods on non-local type gzip.Header. Edited original PR comment with a more detailed description.. Close, but not quite! This adds a button to the editor title bar (see image).\nI am personally less fond of a cluttered context menus and found this to be a nice compromise.\nI experimented with various icons but found that just leaving the command text provided the most convenient UX for me.\n\n . Done.. I experimented with your idea and found that the vscode engine does not show suggestions in some cases where the suggest.name is not a prefix of the label. More specifically,  when completing an unexported type the suggestion is not shown.\nFor now I changed the label to be exactly suggest.name and kept your suggestion for the label.\nLet me know what you think!. Nice! Learned something new.\nDone.. ",
    "jeyanthimuthuram": "try using Go: Install/Update tools to re-install the packages , after installation try restarting your vscode . Initially it too thought it was something to do with golang.\nBut after I disabled this extension everything is going super smooth.\nBut as there are no good alternatives to golang extension. I am completely\nstuck and I can't code in vscode with golang\nOn Nov 28, 2017 7:29 AM, \"\u83ab\u9ece\" notifications@github.com wrote:\n\n@ramya-rao-a https://github.com/ramya-rao-a\ni updated to 0.6.69, but the issue stll existed.\ni changed lintTool to gometalinter, not work.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1373#issuecomment-347389071,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Af42itiEe2WrkWiMF7hZwxqU5L31UCaGks5s62kAgaJpZM4QrMjC\n.\n. \n",
    "sidmishraw": "Tried that and it still crashes when I hover the mouse pointer over a method name a few times(mostly 5-6 times). \nThe workaround I'm using to get by this issue is a window reload using the Reload window command \ud83d\ude2d . ",
    "yxlimo": "the same to me !\ni cant work well . @ramya-rao-a \ni updated to 0.6.69, but the issue stll existed. \n i changed lintTool to gometalinter, not work.. ",
    "anchepiece": "The logic to collect the right tools for the running platform and go version is found here:\nhttps://github.com/Microsoft/vscode-go/blob/3c895791b1e35098c395259140e5925c961d652a/src/goInstallTools.ts#L44\nThe complete array of available tools and their source locations are placed above that. Note that some may not be applicable to your environment.  \nI like how the prompt simplifies the install process, especially with new go installs that may not have any tools installed yet. However, the missing tools could be logged somewhere for review to aid users handling things differently.. ",
    "vanhumbeecka": "As asked, below is a sample code where this problem occurs.\nIt is the same as referenced in https://github.com/derekparker/delve/issues/1039#issuecomment-350533067\nIn that issue, you can see the output in a screenshot.\n```\npackage main\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n    \"strconv\"\n)\ntype Pair struct {\n    num      int\n    subTotal int\n}\nfunc check(e error, msg ...string) {\nif e != nil {\n    panic(e)\n}\n\n}\nfunc main() {\n    arg := os.Args[1:]\n    fmt.Println(arg)\n    fmt.Println(len(arg))\nf, err := os.Open(\"./input\")\ncheck(err)\ndefer f.Close()\n\nscanner := bufio.NewScanner(f)\nfor scanner.Scan() {\n    m := make(map[int]Pair)\n    if len(arg) > 0 {\n        fmt.Println(\"puzzle B\")\n        m = toMap2(scanner.Text())\n    } else {\n        fmt.Println(\"puzzle A\")\n        m = toMap(scanner.Text())\n    }\n\n    fmt.Println(countMap(m))\n}\n\nif err := scanner.Err(); err != nil {\n    log.Fatal(err)\n}\n\n}\nfunc toMap(line string) map[int]Pair {\n    // map[index][subtotal]\n    res := make(map[int]Pair)\nfor i, c := range line {\n    number, _ := strconv.Atoi(string(c))\n    res[i] = Pair{number, 0}\n    if i > 0 {\n        if res[i-1].num == res[i].num {\n            res[i] = Pair{res[i].num, res[i].num}\n        }\n    }\n    // fmt.Printf(\"%d -- %d -- %d\\n\", i, res[i].num, res[i].subTotal)\n}\n// count 1st number\nif res[len(res)-1].num == res[0].num {\n    res[0] = Pair{res[0].num, res[0].num}\n}\n\nreturn res\n\n}\nfunc toMap2(line string) map[int]Pair {\n    res := make(map[int]Pair)\n    jump := len(line) / 2\n    for i, c := range line {\n        number, _ := strconv.Atoi(string(c))\n        res[i] = Pair{number, 0}\n    }\nfor k := range res {\n    // if i > jump {\n    //  if res[i-jump].num == res[i].num {\n    //      res[i] = Pair{res[i].num, res[i].num}\n    //  }\n    // }\n    if res[k%len(line)].num == res[(k+jump)%len(line)].num {\n        res[k] = Pair{res[k].num, res[k].num}\n    }\n}\n\nreturn res\n\n}\nfunc countMap(m map[int]Pair) int {\n    count := 0\n    for _, v := range m {\n        count = count + v.subTotal\n    }\n    return count\n}\n```\n. ",
    "Rakhmanov": "\n@ramya-rao-a, I think that's what is main concern. This is map of strings, the OP has map of slices, but the effect is the same, in debug window they are displayed as an array of strings.. @ramya-rao-a \nThanks for acting on it, It seems on the delve side its intentional. Makes sense as they said structs can be used as keys. However it is very confusing when seen in debugger. May be there is some front end implementation that can display it nicely is due.. ",
    "lggomezml": "I agree with @Rakhmanov, as long as we have the type info all maps could be handled in a different way rather than the same way in which arrays/slices are transformed\nExtracting the GoReflectKind.Map case and chaging the variable traversal accordingly should do the trick right?\nhttps://github.com/Microsoft/vscode-go/blob/31e9cc2bc1a337b4a62c0adf5d029536d7095960/src/debugAdapter/goDebug.ts#L718-L727. I've got these tests failing which come from master (I branched from 9b6dd0b10480c8e615ec82c66759b5de0b83b0a0):\n2 failing\nconsole.pub.js:42\n  1) Go Extension Tests\nconsole.pub.js:42\n       Gometalinter error checking:\n     TypeError: Cannot read property 'line' of undefined\n      at util_1.getGoVersion.then.goCheck_1.check.then.diagnostics (/Users/lgomez/DEV/GITHUB/vscode-go/test/go.test.ts:392:39)\n      at <anonymous>\n      at process._tickCallback (internal/process/next_tick.js:109:7)\n  2) Go Extension Tests\nconsole.pub.js:42\n       Test Linter for Package:\n     TypeError: Cannot read property 'msg' of undefined\n      at util_1.getGoVersion.then.goLint_1.goLint.then.diagnostics (/Users/lgomez/DEV/GITHUB/vscode-go/test/go.test.ts:868:33)\n      at <anonymous>\n      at process._tickCallback (internal/process/next_tick.js:109:7)\nI will merge back as soon as master gets stable (fixed in #1538)\n. I found a breaking change in the behavior that I have to fix: if a breakpoint is defined in a no-code line, the following breakpoint requests fail:\n```go\npackage main\nimport \"fmt\"\nfunc main() {\n    foo := \"hello world\"\n    fmt.Println(foo)\n}\n```\nHaving a breakpoint on lines 2 or 4 will break breakpoint requests on runtime. A coworker had the same problem today after updating the extension and she had installed go 1.10. Rollbacking to 1.9 fixed it... is there anything we can do on the extension side to guard against this?. After a couple of days of using it at work I can't say I feel inclined to use bingo as the default. It is way more responsive than the sourcegraph server but it also has some annoying bugs that result in false errors like this one: \n\nIt seems that golsp (now renamed to gopls) still isn't ready, but it can be tested via a local extension setup: https://github.com/golang/tools/tree/master/cmd/gopls/integration/vscode\n. ",
    "quoctruong": "@lggomez @ramya-rao-a I don't know how useful this feature would be. I don't think any other debuggers for VSCode has this feature? Also, I think user can also just make and evaluate the string in the Watch panel directly if they want to view it as a string?. @ramya-rao-a Can I ask whether there is any update on this?. @ramya-rao-a Any update on this issue?. @ramya-rao-a Is there any new update on this? I see that @BetaXOi has a PR for this fix.. @ramya-rao-a @jhendrixMSFT Sorry for constantly pinging but is this issue still on track to be addressed in the next release?. @jhendrixMSFT Thanks for the update!. ",
    "meling": "Restarted VSCode yet another time, and now it suddenly works again!!  (I've restarted several times before to no avail... so I'm still curious what could be the problem, but it is solved for me.) Feel free to close the issue.. This problem resurfaced, but this time on my laptop. Here is a screenshot:\n\n(will try to figure out what the problem is from the debug messages, but thought I'd share it here anyway... since this is the second time it has occurred, and others may run into this as well... maybe consider reopening this issue.). I seem to have problems on both my computers. My office machine does have diffUtils.js and it was working fine for a while today. (I will check my laptop later, if the diffUtils.js is missing there still (where the screenshot was taken)).\nAnyway, earlier today, I ran into a similar problem, in that I couldn't get the compiler to identify problems in a specific file, which I knew wouldn't compile. For this problem, it didn't help to try to edit the file and save it to trigger the compiler/format on save thing. Here is a screenshot of this issue:\n\nI was able work around the issue by restarting vscode, but the above error messages seem to indicate some problems in the vscode or the vscode-go extension that should be fixed anyway.\nBut then just a few minutes ago, I ran into another (likely) unrelated issue, where I could not use the arrow keys to navigate the Editor part, but instead when pressing arrow keys, things were happening in the Explorer part (expanding/collapsing folders). I tried to \"reactivate\" the editor with mouse clicking, to no avail. I was able to use the mouse to position the cursor and write text into the editor, but then the space bar didn't work. Very weird behavior!! I forgot to check if the developer tools/console were showing any issues. However, this also resolved itself after restarting vscode. This could be totally unrelated to the go plugin I presume. Just thought I let you know anyway. If it happens again, I'll report it elsewhere properly.. @ramya-rao-a It was fine before the holidays; haven't been working on code the last few weeks. Can't recall the exact steps I took, but I think the uninstall and reinstall did the trick.. ",
    "qoops-1": "@ramya-rao-a, I have the same error, here is the error from console: \n\ncommand 'go.get.package' not found \ne.doShow @ messageService.ts:126\n\ngo get from command line works fine.\ninfo:\n macOS Sierra\n go 1.9.2\n* VSCode 1.18.1. @ramya-rao-a No, there was no Go file open. If I open a file, I get:\n\nNo import path to get. @ramya-rao-a \n\n. @ramya-rao-a yep, you're right, sorry for confusion. Now I see how go get works. \n",
    "hajhatten": "Getting the same on Windows. I'm guessing it's go fmt that's messing things up on save.\nVersion 1.18.1\nCommit 929bacba01ef658b873545e26034d1a8067445e9\nDate 2017-11-16T18:32:36.023Z\nShell 1.7.9\nRenderer 58.0.3029.110\nNode 7.9.0\nArchitecture x64. ",
    "sunnyingit": "Sorry for not describing the problem clearly\nThe issue is when i start debuggering and typed some commands provided by dlv such as 'print' 'break' in the debug console, but  console responses to me with message: \"Failed to eval expression\"\n\n. Sorry for not describing the problem clearly\nThe issue is when i start debuggering and typed some commands provided by dlv such as 'print' 'break' in the debug console, but  console responses to me with message: \"Failed to eval expression\"\n\n. ",
    "idevz": "hi @sunnyingit did you resloved this issue? I have the same problem, how to fix this ? and thanks.. hi @ramya-rao-a thanks a lot, I just can print some vars value like just type the names  in the debug console, but, can I type other dlv command like step, next and how? I can't find the relevant wiki.\n\n. @ramya-rao-a got it, thanks a lot :). ",
    "Vigneshr6": "sorry,I did not know that result fie will be created in $GOPATH/bin. In windows guru command's result itself does not include references from GOPATH\nI raised an issue for the same in golang repo https://github.com/golang/go/issues/24699. ",
    "webRat": "Thanks @zmb3, your suggestion is working. I'll relay internally.. ",
    "Grisson": "Hi Ramya-rao-a,\nThanks for your response. I add trace to debug configuration.\nHere is the new information I got.\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\n2017/12/14 22:37:54 debugger.go:492: continuing\ncontinue state {\"Threads\":null,\"NextInProgress\":false,\"exited\":true,\"exitStatus\":-1,\"When\":\"\"}\nTerminatedEvent\nDisconnectRequest\nI cannot repro it with simple code. \nBut, I can consistently repro it with one particular project. And, I can debug this project on my other machines.. ",
    "alhails": "@ramya-rao-a \nHi, thanks for the reply.\nIt was the Go: Toggle Test Coverage in Current Package command, but I've now tried with cover on save and this has the same issue.\nBoth commands successfully run...\n/usr/local/go/bin/go test -coverprofile=/tmp/go-code-cover -timeout 30s\nIt returns Test Pass and coverage %, But then I don't get any highlighting.\nAs mentioned previously if I close the workspace and just open a specific folder and retry then it works ok.  In this case I noticed the command run is slightly different...\n/usr/local/go/bin/go test -coverprofile=/tmp/go-code-cover -timeout 30s gitlab.com/my/project/path\n. For the workspace scenario i get...\n```\nRunning tool: /usr/local/go/bin/go test -coverprofile=/tmp/go-code-cover -timeout 30s\nPASS\ncoverage: 79.5% of statements\nok      gitlab.com/my/project/path  0.028s\nSuccess: Tests passed.\n```\nFor the single folder i get...\n```\nRunning tool: /usr/local/go/bin/go test -coverprofile=/tmp/go-code-cover -timeout 30s gitlab.com/my/project/path\nok      gitlab.com/my/project/path  0.010s  coverage: 79.5% of statements\nSuccess: Tests passed.\n```. :man_facepalming: I figured out it was caused by my workspace folder being setup to point to a symlink of the actual folder in GOPATH.  \nAnd then when I was opening as a single folder I was opening the folder in GOPATH itself.\nI've repointed the workspace folder and now it works great.\nSorry for the trouble and thanks very much for the help :+1: . ",
    "Helcaraxan": "Has anything become of this @ramya-rao-a? It would indeed be great if such a solution could be used to run both gofmt -s and goimports. I've run again into the issue today of having too choose between the two and neither choice being satisfactory.. No problem @ramya-rao-a can't guarantee anything but if I have any time available I'll definitely have a look. \ud83d\udc4d . ",
    "davidlazar": "Issue #1342 seems related.. ",
    "jltjohanlindqvist": "I tried using guru directly from the command line and I get the same result as when using VS Code, no references are found.. Most of us at the office are using Windows and the two others I've asked have the same issue. The only one that doesn't have the issue is the guy using a Mac.. 1. No.\n2. c:\\code\\go\n3. There's no error.\n4. Yes. When I run Find All References on the actual usage of the function (config.GetConfig()) I get the two classes using the function and I get the actual implementation.. Tried running the command, the problem still exists after updating all the tool.\nI'll try with the guru project instead, thanks.. Will do!. ",
    "gangachris": "Release notes say go.formatOnSave is deprecated. Tried the above setting by @ramya-rao-a but still no luck. \nAlso tried adding \"go.formatFlags\": [\"-w\"], since its using goreturns, but no luck.\nTurns out the -w flag is ignored by design\nOutput on VS CODE only shows that go vet and go lint have been run\nUsing MacOS. @philipithomas had to revert to 0.6.69 like @ramya-rao-a suggested. . I think @ramya-rao-a covered this her Gophercon 2018 Lightning Talk\nThe limit is 64 characters. \nYou may need to change the go delve config to enable this.\njs\ngo.delveConfig {\n    useApiV1: false,\n    dlvLoadConfig: {\n        // .....\n       maxStringLen: 100\n     }\n}. ",
    "egorovli": "Also missing go.formatOnSave which was fine until I had a variable name collision with some package which gets automatically imported :(\n\nconfig is defined in main.go, trying to save routes.go which uses this config variable, but instead package github.com/prometheus/common/config gets imported.\nUpdate\nFixed it changing settings to:\n\"go.formatTool\": \"goimports\"\n. ",
    "lunny": "here only gofmt work, but goimports and goreturns didn't work.. @ramya-rao-a I haven't enable auto-save and reinstall Go extension resolved my problem.. ",
    "andrevoget": "I have the same problem. Neither\n\"go.formatTool\": \"gofmt\"\n\"go.formatTool\": \"goimports\"\n\"go.formatTool\": \"goreturns\"\nwork all of a sudden. Installing 0.6.69 fixed the problem.\n@ramya-rao-a Keep up the good work! Please don't interrupt your well deserved vacation as there is a workaround.. ",
    "nathj07": "This is the same behaviour I am seeing:\nOS: MacOS Sierra\nVS-Code: 1.19.1\nExtension: 0.6.70\ngoimports works from the command line, and on save it will add/remove imports from the standard library but nothing from the project, the  GOPATH, or the vendored directory.\nI too am on vacation so no real rush, just thought a little more info may help. Enjoy the holidays.. @ramya-rao-a I have rolled back the extension, that was a simple process thanks for that. It has indeed worked. Thanks for your help.. @ramya-rao-a  done - #1427  the code I added reproduces what I've been seeing. Thanks for the help.. I will get to this for you. Right now I'm on family holiday and trying to stay off the computer. I'll get to it early next week. Hope that's ok.. @ramya-rao-a  that is odd; it does in fact work for me even after moving to v 0.6.70of the Go plugin.\nHowever, on more complex code it does not and unfortunately I get nothing in the output pane. If I right-click and Go: Add Import it puts the imports in.\nI tried with goreturns and it turns out I didn't have it installed. Installing that and saving my package with missing imports I get lots of output about undeclared name as the required package is not imported. However the import doesn't get added.\nAs an example for this you can clone https://github.com/nathj07/go-resourcesync and try removing the imports from one of the packages there or adding in code that needs new imports. \n. I see the confusion here. If I use the right-click menus and select Go: Add Imports it works and if I run goimports manually on the command line it works. It's just the format on save that is not updating the imports. My mistake. \nformatter: goimports\nThe imports are not added and the output shows only go vet being run\nformatter: goreturns\nThe imports are added\nThis is using Format Document. Format on save does not add imports with either formatter. The output is that go vet completes, and that the code doesn't build because of missing imports.. With goimports as the formatter:\n[Extension Host] (node:6550) DeprecationWarning: os.tmpDir() is deprecated. Use os.tmpdir() instead.\nt.log @ console.ts:123\nt._logExtensionHostMessage @ extensionHost.ts:391\n(anonymous) @ extensionHost.ts:211\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\nconsole.ts:123 [Extension Host] ApplicationInsights:Sender [Object]\nt.log @ console.ts:123\nt._logExtensionHostMessage @ extensionHost.ts:391\n(anonymous) @ extensionHost.ts:211\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\nAnd with goreturns:\n```\nconsole.ts:123 [Extension Host] ApplicationInsights:Sender [Object]\nt.log @ console.ts:123\nt._logExtensionHostMessage @ extensionHost.ts:391\n(anonymous) @ extensionHost.ts:211\nemitTwo @ events.js:106\nemit @ events.js:194\nprocess.nextTick @ internal/child_process.js:766\n_combinedTickCallback @ internal/process/next_tick.js:73\n_tickCallback @ internal/process/next_tick.js:104\nApologies for the confusion I'd completely forgotten that existed.. On a more complex project I tried with the new version 0.6.71 and I see\n[Extension Host] Formatting took too long(13734ms). Format On Save feature could be aborted.\n``\nin that console output.\nThis was forgoimportsandgoreturnslooks like:[Extension Host] Formatting took too long(43164ms). Format On Save feature could be aborted.`\nRight-click->Format document works with both tools.. Ok, I guess this can be closed then and the issue dealt with over on #1419. ",
    "iwaseyusuke": "On my environment, formatting on save does not work when problems of linter are too much (exceed the max num of the problems (>100?)).\nCan I increase the max num of problems like \"python.linting.maxNumberOfProblems\"?\nOr force to run format tool even if problems are too much?. @ramya-rao-a Thanks! Indeed the file failed to format have too many lines. Can we increase the value of timeout (750ms)?. @ramya-rao-a Sorry for the delay.\nYes, I could reproduce this issue consistently with the large file (over 8000 lines in a single file):\n/usr/share/code/resources/app/out/vs/workbench/workbench.main.js:249 [Extension Host] stdout maxBuffer exceeded\n/usr/share/code/resources/app/out/vs/workbench/workbench.main.js:249 [Extension Host] Check the console in dev tools to find errors when formatting.\nWith the file which has about 4000 lines:\n/usr/share/code/resources/app/out/vs/workbench/workbench.main.js:249 [Extension Host]% 1925\nAlso, when succeeded to format:\n/usr/share/code/resources/app/out/vs/workbench/workbench.main.js:249 [Extension Host]% 47\nHmmm... it might be better to refactor and split my codes first.... @ramya-rao-a Yes, I just followed your comments and got the outputs of console.. ",
    "kaixianghu": "@ramya-rao-a \nI am experiencing the same issue of auto format not being run. I have auto save turned on.\n Added debug message as suggested in comment#1419,  my experiment shows that format function was simply not called, i see no prints of any log when i perform a random edit, and wait for editor to auto save.\nif I manually trigger a format, i see time taken to format printed.\nI have tried re-installing go plugin, trying gofmt, goimports as formatter, nothing seem to work.\nalso, auto import stopped working as well, i now need to manually run formatting once in a while to get import and formatter to run. @ramya-rao-a , disabled auto-save feature, manually saving the file does trigger auto-format.. ",
    "STiAT": "I had the issue of goreturns taking too long to update, which worked perfectly well before I updated this week. \"go.formatTool\": \"gofmt\" works though.. Just ran into the same issue. Would love to see that fixed.\nDid you find any workaround @mrwonko ?. ",
    "mlitvin": "I have an issue where autosave doesn't format but issuing the \"format document\" command manually works.\nI have  files.autoSave, as off, it doesn't look like the 750ms issue (the files are short, and doing it manually is very responsive).\nIt is linting, building and vetting on save, just not formatting.\nI'm running vscode 1.19.3, and go extention  0.6.73\n. OK looking at the console  I do get the error that it take too long. Sorry.. ",
    "bofabcd": "[Extension Host] Formatting took too long(1406ms). Format On Save feature could be aborted.. ",
    "pjebs": "https://github.com/derekparker/delve/issues/999. If upstream don't fix it, then why can't Go plugin do so instead? For time.Duration objects, it's trivial. For time.Time objects it's not trivial but still easy to do. Many people are trying out VSCode only because of Go Debugger support and many people deal with time objects. I'm sure it'd be worthwhile. I did a google search, and many people have this issue because for debugging purposes, it's simply not tenable to look at nanoseconds for time.Duration and some nonsense for time.Time. @ramya-rao-a It looks like the guy who is creating an update to delve is resisting a fix for time.Duration. I've stated my reasoning there on the benefits of showing it and if he's not going to do it, it would be awesome if VSCode did: https://github.com/derekparker/delve/issues/999#issuecomment-354590454. reflect.Kind will probably return int64 for a time.Duration.\nMaybe you'll consider the solution to be unacceptably messy but would it be possible for us to signify that a variable is actually a particular type (i.e. time.Duration instead of int64) and then VSCode can format it based on what we specify.. us is user of VSCode. After the user signifies that a variable is of type time.Duration, then VSCode formats it instead of delve.. The user tells it to pretend the int64 is actually a time.Duration. There is no sample code. My suggestion is built into the VSCode UI.. It works perfectly when using delve independently.. I think (I haven't tested) the issue is when I open my project in VSCode, I need open the bottom panel, then go to terminal and then change the pwd to the actual project directory.\nVSCode doesn't automatically do that when I open a project, so delve gets confused and doesn't work properly (even though VSCode doesn't realise that). I think delve requires the working directory to be the directory of the project. VSCode doesn't do  that automatically.. I haven't used VSCode for a while. I'll use it again in a week or two.. Can you try with gdlv first. If that works, then try again with VSCode.\nhttps://github.com/aarzilli/gdlv. @ramya-rao-a  gdlv is a gui front end for dlv. It attempts to do the same thing as vscode.. I tried getting dlv to work via vscode. same issue as what I reported above.\nThis time by change the working directory trick didn't even work.\nJust went back to using gdlv. gdlv works everytime too.. I noticed the title was changed to \"when using symlinks\". I am not using symlinks.. We can organize to do a screenshare over skype sometime. I'm quite busy for this week. Let me know in a week time.. @kcramer97 Thank you for the suggestion. However I still think it's unnecessary to have to have Docker involved when gdlv and Goland both do it successfully. No idea why VSCode can't do it.. I don't think the maintainer is actually interested in solving it. She offered to solve my issue but never carried through with it.\nJetbrains has a special offer for international friendship day: https://www.jetbrains.com/promo/friends/\nIf you want to get goland IDE (which definitely perfectly runs delve), you can get it for $44.50 USD. After the promotion, it will become $89 USD. NB: In GAE, goapp serve is analogous to go run.\n  . NB: In GAE, goapp serve is analogous to go run.\n  . I suspect it will work but currently I'm not using GAE. When I use it again in a few months, I will test it out. based on the article you linked, I suspect it will work.. ",
    "Wilkolicious": "Hi, I am getting this issue with this debug output:\nVerbose logs are written to:\n/var/folders/9n/_65b__pd6pd4cn85ttzwpy6c0000gn/T/vscode-go-debug.txt\n11:23:40, 2018-1-19\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /Users/Wilkolicious/go\nRunning: /usr/local/bin/dlv debug --headless=true --listen=127.0.0.1:2345 --log=true --\n2018/01/19 11:23:51 server.go:73: Using API v1\n2018/01/19 11:23:51 debugger.go:97: launching process with args: [/Users/Wilkolicious/git/microservice-provisions/src/debug]\nAPI server listening at: 127.0.0.1:2345\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/Wilkolicious/git/microservice-provisions/src/controllers/submitkey.get.go:17\nCreating on: /Users/Wilkolicious/git/microservice-provisions/src/controllers/submitkey.get.go:21\nCreating on: /Users/Wilkolicious/git/microservice-provisions/src/controllers/submitkey.get.go:23\nError on CreateBreakpoint: unknown file: /Users/Wilkolicious/git/microservice-provisions/src/controllers/submitkey.get.go\nError on CreateBreakpoint: unknown file: /Users/Wilkolicious/git/microservice-provisions/src/controllers/submitkey.get.go\nError on CreateBreakpoint: unknown file: /Users/Wilkolicious/git/microservice-provisions/src/controllers/submitkey.get.go\nAll set:[null,null,null]\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\n2018/01/19 11:23:52 debugger.go:499: continuing\nConnecting to DB server...Connected\nStarting Microserver...\nI've checked the files do exist from those absolute paths, e.g.\nvim /Users/Wilkolicious/git/microservice-provisions/src/controllers/submitkey.get.go\nIs this a permissions problem?  The Code, Code Helper, and dlv processes are running as me.. @pjebs I'll have to get back to you on that one.\n@ramya-rao-a Thanks for taking a look.\nAll my git repo's live under /Users/Wilkolicious/git.\nMy GOPATH as you've rightly identified is positioned at /Users/Wilkolicious/go, and thus any Go libs etc.\nI have a symlink like so:\n/Users/Wilkolicious/go/src/github.com/CompanyName/microservice-provisions -> /Users/Wilkolicious/git/microservice-provisions.\nThat is, I keep all our company's repo's in one place, and the Go files in another.. ",
    "jbowen93": "I'm also seeing this issue with this output:\nVerbose logs are written to:\n/var/folders/np/3_q35m8d619dy31y91vn7r0h00d86p/T/vscode-go-debug.txt\n5:06:30 PM, 1/24/2018\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /Users/bowenjosh/OSS/golang\nRunning: /Users/bowenjosh/homebrew/bin/dlv debug --headless=true --listen=127.0.0.1:2345 --log=true --\n2018/01/24 17:06:49 server.go:73: Using API v1\n2018/01/24 17:06:49 debugger.go:97: launching process with args: [/Users/bowenjosh/OSS/golang/src/D1/D2/D3/debug]\nAPI server listening at: 127.0.0.1:2345\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/bowenjosh/Oss/golang/src/D1/D2/D3/pkg/server/server.go:26\nError on CreateBreakpoint: unknown file: /Users/bowenjosh/Oss/golang/src/D1/D2/D3/pkg/server/server.go\nAll set:[null]\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\nDelve Info\nDelve Debugger\nVersion: 1.0.0-rc.2\nBuild: v1.0.0-rc.2\nVSCode Info\n1.19.2\n490ef761b76b3f3b3832eff7a588aac891e5fe80\nx64\nGo Info\ngo version go1.9.3 darwin/amd64. Sorry for repeatedly editing this comment, trying to avoid leaving red herrings. \nI've now got breakpoints working if I do:\n code /Users/bowenjosh/Oss/golang/src/D1/D2/D3\nThey don't work if I do and of the following:\n code . with cwd being /Users/bowenjosh/Oss/golang/src/D1/D2/D3\ncode ~/Oss/golang/src/D1/D2/D3\ncode $HOME/Oss/golang/src/D1/D2/D3\nThis is good enough for me so I'm not planning oninvestigating this issue anymore but I'm happy to provide more information if it helps someone else. . @ramya-rao-a My GOPATH is /Users/bowenjosh/OSS/golang and there are no symlinks in the path to the code. . ",
    "DazedNConfused-": "I am having this same problem: all my repos live in /home/user/git whereas the GOPATH lives in /home/user/go. \nThe workaround I have applied in order to keep things tidy is what everybody else struggling with this does: symlink the project from git/ into go/.\nAnd I am also having these 'unverified breakpoint' problems. The only ones that trigger are those in the main() entrypoint; every other just fails. What are the possible suggested solutions (that allow me to keep this separation of folders)?. > Sorry for repeatedly editing this comment, trying to avoid leaving red herrings.\n\nI've now got breakpoints working if I do:\ncode /Users/bowenjosh/Oss/golang/src/D1/D2/D3\nThey don't work if I do and of the following:\ncode . with cwd being /Users/bowenjosh/Oss/golang/src/D1/D2/D3\ncode ~/Oss/golang/src/D1/D2/D3\ncode $HOME/Oss/golang/src/D1/D2/D3\nThis is good enough for me so I'm not planning oninvestigating this issue anymore but I'm happy to provide more information if it helps someone else.\n\nThis doesn't work for me. In fact, my experience is exactly like #1453, where any non-main breakpoints just turn \"unverified\".\nI don't know if everything is related somehow. Should I create another separate issue?. I can verify that GoLand doesn't have any of these issues while attaching the debugger, so it seems to be a problem directly tied to the vscode-go plugin.. @ramya-rao-a \n\nWhy not set GOPATH to /home/user/go:/home/user/git?\n\nI have done exactly that by specifying the merged GOPATH in the configuration's env attribute inside launch.json:\njson\n\"env\": {\n                \"GOPATH\": \"/home/user/go:/home/user/git\"\n            },\nStill same results.. @ramya-rao-a No, I did not. Upon removing the symlinks (and using the tweaked GOPATH), non-main breakpoints start working as intended.\nSo it seems that the issue is tied to symlinks after all.\nEDIT: Although that is the case only for the debug mode configuration. The exec mode stills fails to recognize any non-main breakpoint.. @ramya-rao-a I have tried running delve exec. Non-main breakpoints do trigger.. ",
    "sarrotnam": "Is there any solution for this yet?. ",
    "nicolinux": "I have the same problem but with a Python project. It works sometimes, and sometimes it doesn't :(. ",
    "DaveyEdwards": "I have this issue with Windows 10 debugging Javascript as well, the last week or so none of my configs that previously worked for debugging are working.  \nSomething to note as well is even when they were \"working\" it was only working about 60% of the time, to fix I would have to keep restarting the debugger\nEdit:\nSorry, will do.  This was what came up when typing in the error :). ",
    "desol": "Have a Go project and the day before breakpoints were working perfectly, and now they are not registering during debugging if the breakpoint is not in my main file. Any update on this?. ",
    "akulich": "Having the same issue on Windows\nCode v1.23.0\ngo version go1.10.2 windows/amd64\nDelve Debugger\nVersion: 1.0.0\nBuild: $Id: c98a142125d0b17bb11ec0513bde346229b5f533 $\nProject is in GOPATH\nBreakpoints added before debugger starts work fine, but if I add new one during debugging or try to re-add on the same line getting 'Unverified breakpoint'\nTrace says:\nSetBreakPointsRequest\nClearing: 1. ",
    "kcramer97": "I was having the same issue and solved it by changing my launch.json file in vscode.    For my debugging I was running debugging in a docker container remotely and did the following,\n1.  ADD . /dev_dir      // Copied the source code to a development directory in the container \n2. Modify you launch.json file,  The key value is \"remotePath\"  It is critical this is the directory that your source was copied to in the docker container \n{\n    \"name\": \"Remote\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"remote\",\n    \"remotePath\": \"${workspaceRoot}\",\n    \"port\": 2345,\n    \"host\": \"127.0.0.1\",\n    \"program\": \"${workspaceRoot}\",\n    \"env\": {}\n}\nAs soon as I fixed remotePath all the breakpoints worked again!. ",
    "afboteros": "In my case this issue was happening because i did not add %GOPATH%\\bin to PATH on Windows 10, i added it and reinstall delve with \n\ngo get -u github.com/derekparker/delve/cmd/dlv\n\nThen it works.. ",
    "halfpastfive": "I have the same issue on Ubuntu 17.10. I opened the vscode developer console and got the following message: \nEchec de l'activation de l'extension 'lukehoban.Go'\u00a0: Cannot find module 'vscode-extension-telemetry'.\nt._logMessageInConsole @ extensionService.ts:652\nconsole.ts:123 [Extension Host] \u00c9chec de l'activation de l'extension 'lukehoban.Go'\u00a0: Cannot find module 'vscode-extension-telemetry'.\nt.log @ console.ts:123\nJust updated vscode and the extension to the latest version (auto update). . ",
    "imkos": "Does this happen only with new pkgs?\nA: new pkg or no std lib and no used pkg.\nAre you able to get completions for other packages?\nA: OK.\nWhat about packages from std lib?\nA: OK.\nTried a few times,  After go build -i . .  The Completion Lists appears.\n. \nhttps://golang.org/doc/go1.10#test\nadd:\n-count=1. reproduce the issue:\n1. to start debugging on  no \"main\"  package, This will certainly fail to start.\n2. After to start debugging  \"main\"  package,  There is already a debug configuration \"Launch\" running.. I am the same, for what reason do self-writing objects have only one \"PANIC\"\ntry use gocode:  fork banch \ngithub.com/mdempsky/gocode\norigin master: github.com/nsf/gocode  (this project is not maintained anymore). go env:\n```\nset GOARCH=amd64\nset GOBIN=\nset GOCACHE=C:\\Users\\Admin\\AppData\\Local\\go-build\nset GOEXE=.exe\nset GOFLAGS=\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=C:\\gopath_src;D:\\goWork\\niuniu_go\nset GOPROXY=\nset GORACE=\nset GOROOT=D:\\go\nset GOTMPDIR=\nset GOTOOLDIR=D:\\go\\pkg\\tool\\windows_amd64\nset GCCGO=gccgo\nset CC=gcc\nset CXX=g++\nset CGO_ENABLED=1\nset GOMOD=\nset CGO_CFLAGS=-g -O2\nset CGO_CPPFLAGS=\nset CGO_CXXFLAGS=-g -O2\nset CGO_FFLAGS=-g -O2\nset CGO_LDFLAGS=-g -O2\nset PKG_CONFIG=pkg-config\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\Admin\\AppData\\Local\\Temp\\go-build412089190=/tmp/go-build -gno-record-gcc-switches\n```\n```\nInstalling 1 tool at C:\\gopath_src\\bin\n  godef-gomod\nInstalling github.com/ianthehat/godef SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n```\n\nbin: godef-gomod\nWhat kind of configuration is needed?. json\n{\n    \"window.zoomLevel\": 0,\n    \"extensions.ignoreRecommendations\": true,\n    \"editor.fontSize\": 16,\n    \"workbench.colorTheme\": \"Adapta Nokto\",\n    \"go.formatTool\": \"gofmt\",\n    \"go.formatFlags\": [\n        \"-s\",\n        \"-e\"\n    ],\n    //\"go.goroot\": \"D:/go\",\n    //\"go.gopath\": \"${env:GOPATH}\",\n    \"go.gopath\": \"C:\\\\gopath_src;D:\\\\goWork;D:\\\\goWork\\\\niuniu_go\",\n    \"go.buildOnSave\": \"off\",\n    \"go.lintOnSave\": \"off\",\n    \"go.useCodeSnippetsOnFunctionSuggestWithoutType\": true,\n    \"go.testFlags\": [\n        \"-v\",\n        \"-count=1\"\n    ],\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.gocodeAutoBuild\": true,\n    \"workbench.startupEditor\": \"newUntitledFile\",\n    \"terminal.integrated.shell.windows\": \"C:\\\\Windows\\\\System32\\\\cmd.exe\",\n    \"python.linting.pylintArgs\": [\n        \"--disable-msg=C0103\"\n    ],\n    \"python.formatting.provider\": \"yapf\",\n    \"[python]\": {\n        \"editor.formatOnSave\": true\n    },\n    \"extensions.autoUpdate\": false\n}\nwin10 home,  go 1.11.2\nMy project does not use Go modules. github.com/rogpeppe/godef \nIt is always impossible to locate a definition object for an alias of golang.\nSupport for multiple GOPATH is not very good, non-first GOPATH can't always locate\nWhy is there a special directory like $GOROOT instead of the configured go.goroot value?. ",
    "dalu": "Well this document states that, for all except \"GOPATH from the environment variable\" multiple paths are supported. That might be an oversight in the document.\nAssuming it's an oversight, when I have 2 paths in the GOPATH env var, and one package was and is downloaded to the 2nd path in this var (because this GOPATH was extended later and the process of copying from 2nd to 1st path is underway) vscode-go prints, in imports, that this package is unavailable.\nreproduce:\n```\nmkdir -p ~/go/src\nexport GOPATH=$HOME/go\ngo get github.com/gomango/sux\nexport GOPATH=$HOME/3go:$HOME/go\ncat > main.go <<EOF\npackage main\nimport (\n    \"github.com/gomango/sux\"\n    \"io\"\n    \"net/http\"\n)\nfunc main() {\n    r := sux.New()\n    r.GET(\"/\", Hello)\n    http.ListenAndServe(\":8080\", r)\n}\nfunc Hello(w http.ResponseWriter, r *http.Request) {\n    io.WriteString(w, \"hello\")\n}\nEOF\ncode .\n``\nYou'll see the\"github.com/gomango/sux\"` with a red underline.\nBut if you mv the package from ~/go to  ~/3go the red underline disappears.\nIf it is not an oversight then vscode-go should support the behavior the other GOPATH methods support.\nIn other words, if 2 paths are in GOPATH only the 1st is considered, but both should be considered.. Current GOPATH is inferred from current folder: /home/darko/3go\nenv|grep GOPATH\nGOPATH=/home/darko/3go:/home/darko/go. Hmm I don't know where that snuck in.\nSorry for taking up your time.\nHappy new year Ramya. ",
    "abenz1267": "Hi,\nthanks for your reply. Weirdly enough a simple system restart fixed it. I tried to reproduce it but couldn't so far.\nRegards. ",
    "Qadric": "It works now, thanks!. ",
    "elaurendeau": "Looking at VSCode keybinds, i just found peek definition which is a fine alternative for now!\n\n. This is working great, thanks!. ",
    "smt923": "This isn't really an issue for this project, some vscode syntax themes have more or less color stuff, here is my vscode + vscode-go + the brilliant Dracula theme (plus I have ligatures in the font but that's unrelated)\n\nYou'll have to find another color theme that has more colors I think there's a vscode dark plus, or if you want one more like your old theme there's plenty of monokai (it looks like that one is based on monokai but I could be wrong) and monokai variant themes on the marketplace for vscode\nFor example, the 'Monokai' theme that I think is preinstalled looks like this:\n\njust in case you don't know already, once you've installed a font you can go to file -> preferences -> color theme to change the theme. ",
    "sullyme": "Thanks a lot. That screenshot (https://user-images.githubusercontent.com/18464442/34537686-9caa0c4a-f0c9-11e7-91f7-08a72d5dfb5d.png) is from Visual Studio Code Dark+ theme which I love. Monokai is more grey... and Dracula I don't like it: too many lines.\nNow I will go with Monokai. But I'm unhappy.. ",
    "Kyslik": "Hmm using $ goreturns main.go works as expected.\nMy whole config is following:\n{\n    \"editor.fontSize\": 15,\n    \"extensions.autoUpdate\": false,\n    \"files.autoSave\": \"off\",\n    \"go.useDiffForFormatting\": false, // deleted this line after update to 0.6.71\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.formatTool\": \"goreturns\"\n}\nI am really confused what is going on here, any ideas? Any logs I can provide?\n\n```\nFinished running tool: /Users/kyslik/go-default/bin/golint\nFinished running tool: /usr/local/opt/go/libexec/bin/go vet ./...\nFinished running tool: /usr/local/opt/go/libexec/bin/go build -i -o /var/folders/gt/y9ptvm812jg7b50wdcvdvkkm0000gn/T/go-code-check .\n/Users/kyslik/golang/src/main.go:4: syntax error: missing statement after label\n```. @ramya-rao-a Well it was another extension that caused this... \nI went and disabled extensions one by one.\nThank you for caring.. ",
    "mastercactapus": "@ramya-rao-a looks like the gopkgs update fixed the autocomplete issue!. ",
    "heila": "I have exactly the same issue. I am using version 1.19.2 of vs code. Only the GOROOT and GOPATH are searched for the tools and not the  \"go.toolsGopath\" I explicitly set.. ",
    "xiaoyijun": "Thank you @ramya-rao-a . ",
    "harunrzl": "I've got similar error. Somehow it solved after I install this package:\ngo get -u -v sourcegraph.com/sqs/goreturns. ",
    "Deleplace": "Same problem (on Linux).\nA top-popin said \"Works better with latest version of goreturns, install it?\", I clicked OK and now it is fixed.\nIf you don't get the popin, try the go get command given by @harunrzl. ",
    "ryantriangles": "Setting \"go.formatTool\" to \"goimports\" or \"gofmt\" eliminates the problem, so it does seem to be something with goreturns. \nInvoking goreturns manually works fine, and doesn't remove the lines that it removes in vscode-go.\nDespite installing goreturns manually (with go get -u -v sourcegraph.com/sqs/goreturns), the first launch of VS Code in a Go folder always triggers the prompt \"The Go extension is better with the latest version of 'goreturns', Update/Cancel.\" Clicking Update successfully triggers another install of goreturns, but doesn't solve the problem (neither within the session nor after re-launching).. ",
    "zengming00": "Now, code formatting never work\u2639. ",
    "wangjieyanda": "me too,the vscode formatting never work,I cannnot write code with the ide. it was solved in 0.6.72 version,thanks @ramya-rao-a . thanks,it is ok now. ",
    "WenhaiLin": "@ramya-rao-a The binary program of goreturns is not updated automatically when go-extension has been updated on Mac.\n@zengming00 @wangjieyanda You can build the binary program of goreturns manually and then replaces it with the new on.. @ramya-rao-a Yes, it happen time and time again. So I build the binary program of goreturns manually. . ",
    "byrain": "@ramya-rao-a @WenhaiLin \nthank you so much! Build goreturns manually solved my problem.\nOS: MAC.  Vscode version:1.19.2. ",
    "jolivares": "It works ok:\n$ gorename -offset downloader.go:#600 -to mySuperClient -v\ngorename: Loading package: github.com/jolivares/snapshot-downloader\ngorename: Updating package github.com/jolivares/snapshot-downloader\nRenamed 2 occurrences in 1 file in 1 package.\n  . Definitely I'm missing something. If I type go in my console it works. If I run which go it outputs /usr/local/Cellar/go/1.9.2/libexec/bin. I'm using fishshell. I tried same thing with bash and it works too. So basically, I added go to PATH in:\n- .bash_profile\n- .config/fish/config.fish\n- /etc/paths.d\nbut visual studio code keeps complaining it cannot find go. Is there any other place I need to modify PATH env var?. I've just come across this: https://stackoverflow.com/questions/43983718/set-global-path-environment-variable-in-vs-code\nAfter trying process.env.PATH in the developer tools I got: \"/usr/bin:/bin:/usr/sbin:/sbin\", no idea why this path is different from what I get from other sources.\nBTW the visual studio code embedded terminal is working ok: it has go its path. I usually open it from the Dock. I've tried opening it from both shells (fish and bash) but none of them work. In all of the cases I got \"/usr/bin:/bin:/usr/sbin:/sbin\" when I run process.env.PATH from the Developer Tools.. go.goroot It's already set in my user settings. Is there any way to debug visual studio code or the go extension to check why PATH variable is not properly set?. It finally works! \ud83c\udf89 . Thanks a lot for your fix. . I was about to report the issue in the vscode repo when I realised that now I get the proper PATH contents when typing process.env.PATH. I'm not sure what has happened \ud83e\udd14 . ",
    "njgraf512": "@jolivares, @ramya-rao-a, thanks for your help with this issue. I had exactly the same problem, and this solved it.  Note: my provess.env.PATH also updated after running code --install-extension Go-latest.vsix and restarting \ud83d\ude00. This would be a super helpful PR to land. I've been having to continuously patch every new release with this to be able to work with multiple workspaces. Are there plans to push this forward?. ",
    "canercidam": "I've been having a similar problem lately with gometalinter. Every time I hit on save after I code a bit, all of my 4 cores reach 100% and memory usage jumps by 1-1.5 GB for like 5 seconds. In #1373, a useful suggestion was setting go.lintOnSave to false and using Go: Lint Current Package command. So my workaround to this issue turned out to be as following:\nkeybindings.json:\njson\n...\n{\n    \"key\": \"ctrl+l\",\n    \"command\": \"go.lint.package\"\n}\n...\nHowever, after doing this, Output window annoyingly started showing up every time I hit Ctrl+L so I also had to toggle it afterwards. I ended up combining the command with toggle by using macros extension which can be found here:\nsettings.json:\njson\n...\n\"macros\": {\n    \"goLint\": [\n        \"go.lint.package\",\n        \"workbench.action.output.toggleOutput\"\n    ]\n}\n...\nkeybindings.json:\njson\n...\n{\n    \"key\": \"ctrl+l\",\n    \"command\": \"macros.goLint\"\n}\n.... @wayneashleyberry Hmm, so it should use golint on save and command should be able to use gometalinter? Which means different values for go.lintTool in settings.json.. ",
    "wayneashleyberry": "Hi @ramya-rao-a, although that is a possible workaround I might have explained my request poorly. I want to run golint on save, that default behaviour is perfect for me. That works 99% of the time, but every now and then I want to run the metalinter just to see what it finds. That's why I wanted it as a separate command, so I could keep the default behaviour and just invoke the metalinter when needed. I'll carry on doing it from the command-line though, not a big deal :) Thanks for all your great work on this plugin! . Ah yes, tasks look like they fit my needs... thanks @ramya-rao-a \nI see global tasks are also on the todo list, great :). @ramya-rao-a It's set to false now, and I don't recall ever setting it to true if that helps? I seem to recall the default GOPATH in 1.8 \"just working\" in vs code.. The integrated terminal shows an empty GOPATH, because I don't have one defined.\nIf I remove the explicit setting, and run Go: Current GOPATH the response was undefined is the current GOPATH... until I restarted VS Code twice, then it changed to /Users/wayneberry/go is the current GOPATH.... but . go env GOPATH reports the correct default GOPATH\nsh\n$ go env GOPATH\n/Users/wayneberry/go\nIf this is a race condition, which feels likely, then it's going to be a tricky one to debug :/. echo $GOROOT prints nothing for me, and no... I have never changed the go.goroot setting :). echo $GOROOT prints nothing for me, and no... I have never changed the go.goroot setting :). I completely forgot about this @ramya-rao-a, considering I've been working on 1.12 quite happily for a few weeks now, inside my $GOPATH and out, I'm going to close this.. ",
    "jsmouret": "Running the command \"Go: Install/Update Tools\" fixed it for me.. ",
    "braneof": "Uninstalling and reinstalling didn't work for me. I just updated VS Code also today to 1.19.2. On Ubuntu.\nNo errors and showing, nothing in \"Problems\".. ",
    "charles-d-burton": "I'm experiencing the same problem.\nVSCode: 1.19.2\nOS: Ubuntu\nGo Plugin: 0.6.72\nMy settings look like this:\n{\n    \"git.confirmSync\": false,\n    \"git.enableSmartCommit\": true,\n    \"files.autoSave\": \"off\",\n    \"editor.formatOnSave\": true\n}\nThe behavior I'm getting is no formatting on save, imports don't update, the code doesn't format.\nEDIT: Uninstalling and reinstalling the plugin had no effect for me.. ",
    "eelcovb": "Turns out that somehow the linter got outdated. Running go get -u github.com/golang/lint/golint will update it and resolve this issue.. ",
    "santos22": "Hi @ramya-rao-a! I would like to take a look into this issue seeing as I too faced this problem \ud83d\ude05 . @knrt10 go for it \ud83d\udc4d . ",
    "knrt10": "@santos22 are you still working on this issue? If not, I would like to give it a try.. @ramya-rao-a I a happy to work on this issue. Unfortunately, I have no previous experience in the repository, would you please suggest which files should I look into to work for this issue?. ",
    "YipingRuan": "I am using go 1.10.3 and VS code 1.23.1 after update.\n\nI feel it must be something to do with one of the \"suggestion\" settings in \"Workspace Settings\". But I didn't touch them.. ",
    "jwaldrop": "One workaround I've found is to build go from source in a directory that I have write access to. I'm happy to do that if it's considered a \"normal\" thing to do, since this seems to be an artifact of me using a pre-built Go binary.\n. I mean building Go itself. By toolchain, I simply mean all of the Golang tools -- 'go', 'godoc', etc.. Cool, we will learn together. :)\nI am cross compiling using GOOS and GOARCH environment variables per: https://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5\nThis blog post also refers to problem I was encountering -- trying to install the dependencies from a pre-built Go distribution (the pre-packaged installs that are available from golang.org) attempts to write to a directory that doesn't normally exist on a Mac (since they are Linux dependencies) and, even if it did, you as a user do not have permission to write to (/usr/local space).\nAs this blog post points out, you can work around this by building Go yourself from sources, at which point it uses the local build (presumably in your home directory) to write these binary dependencies. They still aren't useful on a Mac, but it allows caching to speed up the build.\n. So far nope, it works great once my Go compiler is one I built!\nAgreed the default should be -i, it just needs to be something you can turn off.. ",
    "mwirges": "+1 on this, it would be nice to turn it off when you know you don't need it.  For example, I was trying to build / test a simple package with a system installed golang and I didn't really want to go download and build a separate go installation just to work around this (go build/go test failing).. ",
    "cardonator": "It seems weird that this plugin doesn't support system installed Go to speak of, though, because that really is the most common install procedure someone is going to use when they try out Go for the first time.\nBecause of this issue, even having go installed from a Snap in Linux doesn't work right. There are red squiggles all over from the extension trying to install to unwritable locations (Related example from the go issue tracker https://github.com/golang/go/issues/24674). In this case, the runtime/cgo library isn't even out of date, but since -i believes it is, then the extension gives red squiggles.\nPlease allow an option to disable this behavior or figure out a more ideal workaround. \"Slower\" builds might be an acceptable compromise to have the tool working better and the system handling the go libraries instead of the user, manually.. @ramya-rao-a I did have to clone the repo, however setting that setting to false worked so great! Good job and thanks for the fast turnaround! Good bye stupid red squiggles :). ",
    "dericatienza": "No. Tried running \"dlv debug\" but same errors pop up.. ",
    "adamfill28": "Thank you, I now have Go installed and I have updated the PATH and GOROOT and I was able to install most of the tools. but now i have a new issue:\nwhen I am typing code, I am not getting any of the features i am supposed to be getting (no autofill, suggestions etc). \ngo env returns this:\nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=C:\\Users\\Adam\\go\nset GORACE=\nset GOROOT=C:\\Go\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\nset GCCGO=gccgo\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\nset CGO_CFLAGS=-g -O2\nset CGO_CPPFLAGS=\nset CGO_CXXFLAGS=-g -O2\nset CGO_FFLAGS=-g -O2\nset CGO_LDFLAGS=-g -O2\nset PKG_CONFIG=pkg-config\nI am not receiving and popups telling me to install tools or anything, so I am unsure as to why I am not getting any functionality. Thanks. ",
    "smithaitufe": "@ramya-rao-a Hello, I have been experiencing similar issue for about 6 months now. It is discouraging though.\nFollowing the thread, this is what I have\nRunning go env gave me this\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/smith/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build768730231=/tmp/go-build -gno-record-gcc-switches\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nand running Go: Current GOPATH gave me a different thing\n/home/smith/Documents//projects/go\nI decided to set GOPATH in vscode to /home/smith/go which corresponds to the one returned by go env\nHowever, when I installed go, I made the following in my ~/.profile file\nPATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=$HOME/Documents/projects/go\nexport GOBIN=$GOPATH/bin\nMy projects reside in /home/smith/Documents/projects/go and that is where I have the bin, src and pkg directories.\nAm I correct with this approach?\n. @ramya-rao-a Hello, I have been experiencing similar issue for about 6 months now. It is discouraging though.\nFollowing the thread, this is what I have\nRunning go env gave me this\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/smith/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build768730231=/tmp/go-build -gno-record-gcc-switches\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nand running Go: Current GOPATH gave me a different thing\n/home/smith/Documents//projects/go\nI decided to set GOPATH in vscode to /home/smith/go which corresponds to the one returned by go env\nHowever, when I installed go, I made the following in my ~/.profile file\nPATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=$HOME/Documents/projects/go\nexport GOBIN=$GOPATH/bin\nMy projects reside in /home/smith/Documents/projects/go and that is where I have the bin, src and pkg directories.\nAm I correct with this approach?\n. @ramya-rao-a Yea.. @ramya-rao-a \nI got this response when I ran it in vscode\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/smith/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build678750223=/tmp/go-build -gno-record-gcc-switches\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nHowever, in my ~/.profile, I actually have this\nPATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"\nexport PATH=$PATH:/usr/local/go/bin\nexport GOPATH=$HOME/Documents/projects/go\nexport GOBIN=$GOPATH/bin. @ramya-rao-a \nWhen I run go env GOPATH in an external terminal, I get this \n```\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/smith/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build684290367=/tmp/go-build -gno-record-gcc-switches\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nThe response pasted above corresponds to the one I get when I run the same command in vscode. \nAnd today, when I opened my golang project in vscode, after setting the `go.gopath` in vscode to the value of GOPATH when I run `go env`, vscode started installing some packages as you can find below\nInstalling 8 tools at /home/smith/go/bin\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  godef\n  goreturns\n  golint\nFinished running tool: /usr/bin/go build -i -o /tmp/go-code-check .\nFinished running tool: /usr/bin/go vet ./...\nInstalling github.com/uudashr/gopkgs/cmd/gopkgs SUCCEEDED\nInstalling github.com/ramya-rao-a/go-outline SUCCEEDED\nInstalling github.com/acroca/go-symbols SUCCEEDED\nInstalling golang.org/x/tools/cmd/guru SUCCEEDED\nInstalling golang.org/x/tools/cmd/gorename SUCCEEDED\nInstalling github.com/rogpeppe/godef SUCCEEDED\nInstalling sourcegraph.com/sqs/goreturns SUCCEEDED\nInstalling github.com/golang/lint/golint SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n```\nIt is possible that the system is not seeing the one in my ~/.profile hence it defaults to /home/smith/go. \nWhat do you think?. @ramya-rao-a  I think I was wrong. \nAfter installing those tools, it was still popping up some errors. I decided to change the go.gopath value in vscode to  /home/smith/Documents/projects/go. All is well now.\nThanks so much. ",
    "chenenze": "Thank you for your help! It's working. This problem reappeared when I was working for some time\nThis is my setting\uff1a\n{\n    \"team.showWelcomeMessage\": false,\n    \"go.formatTool\": \"gofmt\",\n    \"go.formatOnSave\": false,\n    \"files.autoSave\": \"afterDelay\",\n    \"files.autoSaveDelay\": 2000,\n    \"workbench.iconTheme\": \"vscode-icons\",\n}. It's not randomly, When I click command+s save the file, This situation is repeated.\n// \u4ec5\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\u7528\u6237\u70b9\u51fb\u3010\u901a\u8fc7\u3011\u65f6\u624d\u786e\u8ba4\nwhen I delete all the functions except this function\uff0cthis problem has disappeared.\nI try to write a testcase like this\uff1a\n```go\npackage main\nfunc test() {\n    // \u4ec5\u5728\u7528\u6237\u70b9\u51fb\u3010\u901a\u8fc7\u3011\u65f6\u624d\u786e\u8ba4\n}\n```\nBut did not reproduce\u3002. ",
    "xfstart07": "I have the same issue\u3002\n\n. ",
    "molon": "@ramya-rao-a I have share a private code to you on gitter~ :). ",
    "beta": "Thank you Ramya for your work! Another workaround before the issue is fixed is to run the formatter automatically with extensions that allow you to run commands on file save. These extensions include Run on Save and Trigger Task on Save. I am using Run on Save with the following configuration.\njson\n\"emeraldwalk.runonsave\": {\n    \"commands\": [{\n        \"match\": \"\\\\.go$\",\n        \"cmd\": \"goreturns -w ${file}\"\n    }]\n}\nOf course you should disable the built-in auto formatter with\njson\n\"[go]\": {\n    \"editor.formatOnSave\": false\n}\nThe -w argument makes goreturns format the code in place. That means, VS Code will reload the file due to external changes, instead of making minimal modifications which allow you to undo easily.. ",
    "adam-p": "This should do it: https://github.com/adam-p/vscode-go-subdir\nBuild the workspace and check the Problems tab in the lower pane.. ",
    "mkorejo": "Hi @ramya-rao-a,\nI made some changes for this issue but before a PR, I am trying to test/debug locally. Can you suggest a way to get gopkgs to fail such that the console message is generated? I can't seem to get that part of the code to run, or get that message to show in the Developer Tools Console.\nI tried renaming the gopkgs binary on my machine so VS Code couldn't find it.  I got this message to appear:\n\nThen tried ^Space, and actually it looks like I'm still able to get import suggestions somehow, but no console message:\n\n\n\nAlso played with GOPATH a bit but really just not sure how to simulate this issue.\nThanks very much for your work on this plugin!. Two commits more than it should've taken but I think I got it. Thanks for the tips @ramya-rao-a and @uudashr! Hacking gopkgs was a simple and fun exercise. See PR #1528.. ",
    "wudi": "\ud83c\udf7a eagle [~] \u2192 ps -ef |grep 'debug.test' | wc -l\n      39\n\ud83c\udf7a eagle [~] \u2192 ps -ef |grep 'debug.test'\n  501   591     1   0 Fri05PM ??         0:00.00 (debug.test)\n  501  3297     1   0 Fri01PM ??         0:00.00 (debug.test)\n  501  7928     1   0 Fri05PM ??         0:00.00 (debug.test)\n.... ",
    "Macilias": "I found the solution:\nbeside the go extension now also the language server is needed, which can be found here: https://github.com/sourcegraph/go-langserver\nIts also worth mentioning that the description of the extension is wrong and tells you to set:\ngo.useLanguageServer = true, which leads to not working function call.\nThe solution is to remove the entry. . ",
    "ukaric": "Hi,\nIt does install as intended with \"go.toolsGopath\": \"E:/Documents/Go\" set output is Installing 1 tool at E:/Documents/Go\\bin I verified manually the bin's are there.\nWhen I remove the go.tooolsGopath it defaults to E:\\Code\\Go\\bin which matches the output of go env .. I tried both with go.toolsGopath and without it the default settings same thing. It does not detect that the tools are installed whatsoever.. Here are bunch of SS\n\n\n\n\n\n. Strangely enough E:/Code/bin is empty even after manually running go get. @ramya-rao-a Thanks for the nudge in right direction after inspecting both user and system env vars i found that I had GOBIN explicitly set to other folder after deleting that and clearing src folder everything works. Once again thanks.. ",
    "Globegitter": "Disabling all other extensions seems to do the trick and now the go extension seems to work without any problems (at least has now for an hour or so).\nSo what is the best approach here? Enable extensions one-by-one and see when the issue starts appearing? Is this most likely just related to the CPU spikes?. ",
    "ryzokuken": "@ramya-rao-a This is embarrassing, but you're right. I should have tried this before. Thank you for your suggestion.\nPlease help me find the culprit. Meanwhile, I will remove the extensions I \"once installed on a whim and don't possibly use\".. @ramya-rao-a Fixed! It was probably from an extension called Whitespace (https://marketplace.visualstudio.com/items?itemName=sandcastle.whitespace), which only seems obvious given that it has 4 reviews giving it in 2 stars.\nThanks again for helping resolve my issue.. ",
    "burzum0727": "These are the results in terminal.\nC:\\Users\\varg>go env\nset GOARCH=amd64\nset GOBIN=\nset GOEXE=.exe\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=E:\\Users\\varg\\GoWorks\nset GORACE=\nset GOROOT=C:\\Go\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\nset GCCGO=gccgo\nset CC=gcc\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0\nset CXX=g++\nset CGO_ENABLED=1\nset CGO_CFLAGS=-g -O2\nset CGO_CPPFLAGS=\nset CGO_CXXFLAGS=-g -O2\nset CGO_FFLAGS=-g -O2\nset CGO_LDFLAGS=-g -O2\nset PKG_CONFIG=pkg-config\nC:\\Users\\varg>\nC:\\Users\\varg>file: 'file:///Untitled-1'severity: 'Error'message: 'can't load package: package .: no Go files in C:\\Program Files\\Microsoft VS Code'at: '1,1'source: ''code: 'undefined'\nI tried without folder just created with a new file, in documents a new workplace and the path root. None of them worked.\n. Finished running tool: C:\\Go\\bin\\go.exe build -i -o C:\\Users\\varg\\AppData\\Local\\Temp\\go-code-check .\ncan't load package: package .: no Go files in C:\\Program Files\\Microsoft VS Code\nFinished running tool: E:\\Users\\varg\\GoWorks\\bin\\golint.exe\nFinished running tool: C:\\Go\\bin\\go.exe vet ./...\n. Unfortunately, I do not have any project yet. This one supposed to be mine first project but due to problems, I couldn't start yet.. Finished running tool: E:\\Users\\varg\\GoWorks\\bin\\golint.exe\ne:\\Users\\varg\\GoWorks\\src\\github.com\\ramya-rao-a\\go-outline\\main.go:17: exported type Declaration should have comment or be unexported\nFinished running tool: C:\\Go\\bin\\go.exe vet ./...\ne:\\Users\\varg\\GoWorks\\src\\github.com\\ramya-rao-a\\go-outline\\main.go:116: no formatting directive in Errorf call\nFinished running tool: C:\\Go\\bin\\go.exe build -i -o C:\\Users\\varg\\AppData\\Local\\Temp\\go-code-check github.com\\ramya-rao-a\\go-outline\n. So you mean I can work now with the titled files? Because I do not understand the result from the output that I receive from your github file is an issue or a regular start up.. Thank you for the help Mrs. Rao!. ",
    "okandas": "the updates that make everything stop working nicely are the most painful ..  :( . ",
    "atjeff": "Hey @trondhindenes,\nThe import was removed because you aren't using it. This behavior happens because of the editor.formatOnSave in vscode. If you search your default settings you will see:\n\"[go]\":  {\n    \"editor.insertSpaces\": false,\n    \"editor.formatOnSave\": true\n  },\nYou can change formatOnSave to false to stop this behavior. ",
    "apovetkin": "In the video all extensions are disabled and only this GO extension enabled.\nI thought about this situation from beginning and disabled all extensions.\nAny other idea?\nThanks,\nAlex\n\nFrom: Ramya Rao notifications@github.com\nSent: January 31, 2018 19:06\nTo: Microsoft/vscode-go\nCc: apovetkin; Author\nSubject: Re: [Microsoft/vscode-go] Syntax error := (#1487)\nIn the video I see that on saving the file i := 1 gets changed to i: =1 which of course is wrong and results in the error\nI believe you have some other extension installed thats doing this change\nCan you disable all other extension and see if you are still facing the issue?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/Microsoft/vscode-go/issues/1487#issuecomment-362144393, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABMKSJ68CrekxlSjub67XtUcF10pVS6Jks5tQSoxgaJpZM4RxOu_.\n. \nPlease watch the video, change quality to 720\nhttps://youtu.be/C81BAfdKWrI\n[https://i.ytimg.com/vi/C81BAfdKWrI/maxresdefault.jpg]https://youtu.be/C81BAfdKWrI\nGO Extension - Format on savehttps://youtu.be/C81BAfdKWrI\nyoutu.be\nThanks,\nAlex\n\nFrom: Ramya Rao notifications@github.com\nSent: February 1, 2018 10:13\nTo: Microsoft/vscode-go\nCc: apovetkin; Author\nSubject: Re: [Microsoft/vscode-go] Syntax error := (#1487)\nHmm... that is weird\nCan you enable just the Go extension and then add the below in your settings and try again?\n\"[go]\": {\n    \"editor.formatOnSave\": false\n}\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/Microsoft/vscode-go/issues/1487#issuecomment-362353897, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABMKSMMcIFmo8cBm8zlJU_tNapXJaYOCks5tQf7WgaJpZM4RxOu_.\n. I see that disabling format on save fixed the issue. - RIGHT.\nWe use goreturns as a formatter. Can you run it in the terminal on your file and see if it does the same?\n[cid:dab41bc9-f196-42bc-a09c-d46aa15aa3b8]\n\nFrom: Ramya Rao notifications@github.com\nSent: February 1, 2018 11:28\nTo: Microsoft/vscode-go\nCc: apovetkin; Author\nSubject: Re: [Microsoft/vscode-go] Syntax error := (#1487)\nI see that disabling format on save fixed the issue.\nWe use goreturns as a formatter. Can you run it in the terminal on your file and see if it does the same?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/Microsoft/vscode-go/issues/1487#issuecomment-362375300, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ABMKSCaDYa69GxS4Rg49nqzwrwpSmBtOks5tQhBngaJpZM4RxOu_.\n. ",
    "n1koo": "I was hitting the same issue and after some head scratching found that https://github.com/TheColorRed/vscode-format collides. Weirdly enough only on some (go) packages, but not all of them. Uninstalling vscode-format fixed it for me \ud83e\udd37\u200d\u2642\ufe0f . ",
    "philk": "Sorry. Currently if you start go-language server it binds to :4389 which as you know in go is actually 0.0.0.0:4389. Exposing the language server to the local network is a potential security risk, or at least annoyance as on OSX binding an unsigned binary to 0.0.0.0 triggers the firewall to ask if you want to allow/deny go-langserver to listen to network connections.. That fixes it. I assumed it was the -addr in the flags and didn't notice the pprof. Thanks for the (better) fix @keegancsmith !. ",
    "gh0o0st": "go env output\nGOARCH=\"amd64\"\nGOBIN=\"/Users/simonding/go/bin\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/simonding/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/1.9.3/libexec\"\nGOTOOLDIR=\"/usr/local/Cellar/go/1.9.3/libexec/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/qt/hb0yfwvj5gd52hzhcg4mj3j80000gn/T/go-build692757637=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\". no. just regular use.\n2018-02-05 11:05 GMT+08:00 Ramya Rao notifications@github.com:\n\nThanks @alexwall https://github.com/alexwall\n@gh0o0st https://github.com/gh0o0st Were you using the language server\nas well?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1489#issuecomment-362969831,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AImZURWIaQSDWvW2HTOhq51xv8HSjSG4ks5tRnAJgaJpZM4RyVQp\n.\n. I have solved this problem, by updating all the third party package. now everything works fine.. go get -u all\n\nall the downloaded package, gocode, godoc, etc\n2018-02-05 13:31 GMT+08:00 alexwall notifications@github.com:\n\n@gh0o0st https://github.com/gh0o0st What do you mean with all third\nparty packages?\nUpdate command?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1489#issuecomment-362985851,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AImZUaLUMlguvfCEYU48kxOQwk8cE3Xuks5tRpJNgaJpZM4RyVQp\n.\n. \n",
    "alexwall": "Same here, \nHover and jump to definition stopped to work. But dependency resolution and syntax check seems to work. \nThis happened several times in the past. \nI can't reproduce it right now, because after running go:install and update it works again. \nMy guess is the that the experimental Go Language Server stop working for some reasons.\n. @Gh0o0st What do you mean with all third party packages?\nUpdate command?. ",
    "ymm1x": "I had the same problem.\nIn my case, It was caused by the environment variable GOROOT being invisible from the extension.\nTry add export GOROOT=/usr/local/Cellar/go/1.9.3/libexec to your shell's bootstrap file (~/.bashrc or etc). ",
    "codingconcepts": "Hey Ramya, I installed the vsix without issue and have re-installed the two packages I've been ignoring updates for since discovering the performance improvement:\n\ngithub.com/ramya-rao-a/go-outline\ngithub.com/uudashr/gopkgs\n\nThanks for your help with this, I'll keep an eye on things today and let you know how I get on.. Hey Ramya, vscode has become very slow again during the course of the day unfortunately.  I've seen gopkgs consistently spiking to ~13% CPU and guru consistently spiking to ~350% CPU.. The results are a little misleading as the wall clock time is ~20s but here's a time result of gopkgs by itself:\nbash\ngopkgs  1.36s user 1.95s system 14% cpu 22.070 total\nI've updated the cache expiry of 5000 to 300000 in the file you've suggested and will get back to you later with the results, although I'd rather the cache was expiring every 5s, so everything's kept up-to-date obviously!  While I do have a pretty big GOPATH, I shouldn't imagine it's uncommonly large, this slowness must be affected loads of people.... Hey ramya, sorry for the delay!\nUnfortunately, things are still very very slow.  I'll kick off a go run and it'll take  around a minute, while gopkgs whirs away at around 2.5-3% CPU.. It's also very slow on save (as I have [and want] linters running).  Gopkgs spikes at around 7% CPU for about 30s.. As you can imagine, GoToDefinition is also very slow too.. Hiya,\nHere's the output for the first command:\nbash\n6103\ngopkgs  2.06s user 3.18s system 18% cpu 28.842 total\nwc -l  0.00s user 0.00s system 0% cpu 28.838 total\nAnd the second command:\nbash\n1907\ngopkgs -workDir=$(go list -f \"{{.Dir}}\" github.com/uudashr/gopkgs)  0.70s user 1.05s system 19% cpu 8.930 total\nwc -l  0.00s user 0.00s system 0% cpu 8.927 total. Another update from my long-suffering CPU!  I noticed a fair amount of fan action this morning and found this (it continued for over a minute):\n. Would it be possible to remove the extension prompt that requires the uudashr version of gopkgs?  I've reinstalled the tpng version because - performance wise - my machine agrees with it and I might consider either updating that to provide package names or writing my own.  I just don't want to be prompted constant to upgrade to something that slows everything down for me:\n. Hey Ramya, sorry for the delay!\nI've installed the latest version of the Go extension and updated to the latest version of gopkgs when prompted and so far, everything seems to be behaving.\nI'll keep an eye on things during the day and get back to you :). Hey @ramya-rao-a,\nI've had some time to play with the new version and would like to report that the general experience of using Go has definitely improved.\nI'm noticing much higher than normal CPU usage for codehelper now though.  It's spinning at around 120% core's worth of CPU, which wasn't happening before the upgrade.\nI've killed the process for now but if it happens again, let me know what kind of metrics you'd like me to grab and I'll grab them for you.\nCheers,\nRob. ",
    "klauern": "I'm running on Windows, and I am having some significant perf issues myself.  Unfortunately, the tests that are provided are more bash-centric, as I don't believe $(go ...) commands can be executed within cmd.exe or powershell.exe, so I don't have an easy way to run these tests myself.\nIs there an equivalent call that can work on Windows 10?. Ah, I think I did something wrong.  I may have not built the uudashr/gopkgs version correctly, instead accidentally building the tpng version twice...\nHere's the corrected output, also using go get to verify that I did install the right version:\n\n. And here's the corrected output from tpng's version:\n\n. Here's what I ran\ngo get -u github.com/uudashr/gopkgs/cmd/gopkgs\n(gopkgs.exe | Measure-Object -line).Lines\ngo get -u github.com/tpng/gopkgs\n(gopkgs.exe | Measure-Object -line).Lines\n\n. Seconded!  I would love to try this out myself.. ",
    "jonbonazza": "I actually implemented this already. I can submit a PR tomorrow.\nOn Wed, Jan 31, 2018, 7:35 PM Ramya Rao notifications@github.com wrote:\n\nOption 1 is what a language server ought to do, and we have a step forward\nin that direction. If you are not on Windows, you can try our support for\nthe language server from Sourcegraph\nhttps://github.com/Microsoft/vscode-go/blob/master/README.md#go-language-server-experimental.\nThe issue with Windows support is tracked in sourcegraph/go-langserver#113\nhttps://github.com/sourcegraph/go-langserver/issues/113\nOption 2 is definitely doable and am open to consider any PRs and help if\nanyone has questions.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1491#issuecomment-362148523,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABW9yxVKNjdYsDTVHSVqfm4PCL12nI0Dks5tQTEcgaJpZM4R01rB\n.\n. So I actually realized recently that if you don't have any vendored code, Find All References is actually really fast. It's when you have a lot of vendored code that its speed becomes an issue.\n\nIs there a way to ignore the vendor directory when running Guru?. Also, I am not really sure why Travis is failing. Any insight here?. @ramya-rao-a Thanks for that. I managed to fix the linting issues and get tests to pass.\nAs for go-find-references matching up with guru, that doesn't seem to be the case with my testing. I am passing the root directory just as it is being passed in code in this commit (which was taken verbatim from the old version of vscode-go).\nI have to be missing something though because I do agree that they should work the same.. I agree. I was hoping someone here would be able to see sonething stupid i\nwas doing or missing. Mind giving it a try yourself and see if your results\nare different?\nOn Thu, Feb 8, 2018, 5:00 PM Ramya Rao notifications@github.com wrote:\n\nI wouldnt add the support for go-find-references back until we are more\nsatisfied with its results.\nIf all it does is a fancy text search, then VS Code can do the same out of\nthe box\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/1494#issuecomment-364301465,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABW9y4gpru0g85hG3zRVeJfRUqwnQsenks5tS5itgaJpZM4R2dLO\n.\n. \n",
    "ijesonchen": "Find all reference is VERY SLOW. Sine the project is a little big and I use this feature frequently\n, it's not acceptable to take more than 10 seconds each time. I use Find instead but not very convenient.  I wanna know how to change this setting to go-find-references, even it's not very accurate, but it works.\nGo Language Server is not a suitable solution, since it does not support multiple GOPATH.\nAny help is appreciated. \nThank you.. I tried Go Language Server but it seems has some problem, and Find All References still cost a few seconds (about half of gore?). \nBUT it seem can not find references when projects not in GOPATH. I don't know why. \nIt cost half of a day. Any suggest?\nThank you.. ",
    "yoskeoka": "@ramya-rao-a \nI did mean this comment. \nhttps://github.com/golang/go/blob/master/src/cmd/go/internal/test/test.go#L69\nIn cmd/go doc, this part  shows Files whose names begin with \"_\" (including \"_test.go\") or \".\" are ignored.\n. ",
    "jadengore": "Any status updates on this? Would be cool to test out the performance of this. I find the Go Language Server from Sourcegraph to still be quite slow when looking up references.. ",
    "scele": "This is enough on mac, but not linux. Need to investigate more, I'll close this PR for now.. For context, I'm trying to set up vscode debugging + tools with bazel-built binaries (and go dep vendoring) using a setup like this: https://github.com/scele/go-dep-bazel-vscode-example.  To make it work, I needed this feature and also https://github.com/Microsoft/vscode-go/pull/1495.. ",
    "urohit011": "I would like to give it a try, but it will my first time contributing to this project so can I get some pointers to get started?. Thank you, will get started right away.. @ramya-rao-a will you please take a look at this, I really don't understand why the tests are failing.. Thanks for your observation @ramya-rao-a, and sorry for late reply. I'll make the changes asap.. Hello @ramya-rao-a I have made a couple of changes. Will you please take a look at it?. You were right, we did not have to loop through all the lines, first I thought of breaking out of the loop after encountering a \"package\" statement, but empty line is fine.. I could not find the list of all the build tags on internet that is why I have used \".\" to match the build tags.. I could not get rid of the filter totally, but have reduced it. What do you suggest?. Okay, I get it, I only have a one question:\nIf the file has build tags like \n// +build linux\n// +build 386, should it be present in the settings file like\n goBuildTags: linux,386 as the goBuildTags holds a string?. Hello @ramya-rao-a, thanks for the explanation, In my question what I actually wanted to know was  what should the \"go.buildTags\" should look like if the file contains two separate lines such as:\n// +build linux\n// +build 386. Got it @ramya-rao-a , working on it. ",
    "virtualdreams": "Thx, helped me alot.. ",
    "cheesedosa": "Check #1456. The fix should be out in the next release of the extension.. Ah, okay. That makes sense.. ",
    "ceriath": "woops, seems like i missed this when searching for an open issue regarding this.. ",
    "btm6084": "I re-upgraded and it seems to be working at the latest version. I replicated this 4 times in a row before I opened this issue, yet now I can't replicate it again.\nI will close this ticket, and reopen if I can reproduce again in the future.. ",
    "ahelal": "I am running 0.6.76 and experiencing the same issue. \nThats what i get in Console\ncommand 'go.gopath' not found\ne.doShow @ /Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2925\nAll the go commands fails. . @ramya-rao-a I uninstalled all my extensions and installed one by one and it worked.\nNote sure what was the issue . ",
    "trigun117": "\nSame problem after update. ",
    "jackmott": "same problem for me, started today sometime. also windwos 10, VS Code 1.20, go version 1.9.3. all good here as well, thank you!. ",
    "shindakun": "@ramya-rao-a Looking good now. Checked process.env['PATH'] and process.env['Path'] (even process.env['path']) and they appear to return the expected paths.. ",
    "alexellis": "No none of that is working from what I can tell. I'll turn on the console and report back. . ",
    "ttjiaa": "Also experiencing this problem, VS Code v1.20, Go extension v0.6.76.\nReinstalling the extension did not solve the issue.\nSee the attached for the extension activation error logs:\n\nEDIT: \nSeems like a similar issue to https://github.com/Microsoft/vscode-go/issues/1386\nFWIW, .vscode/extensions/lukehoban.go-0.6.76/out/src does not contain the missing diffUtils.js file.. @ramya-rao-a Thanks! Deleting the extension directory first and then reinstalling the extension solved the issue. I recently updated VS Code, which is when issue showed up.. @ramya-rao-a No, I have not.. ",
    "jonas27": "Hey, for me installed the tools directly in the go dir (so at ~/go/). When I moved them to ~/go/bin everything worked fine. So Code installed the tools in one location, but searched for them in another one.\nIt's kind of odd, as my settings (GOPATH and GOBIN) are the same as on my desktop and my laptop, but on my laptop it didn't work by default but it worked on my pc...\nEDIT: Make sure to restart gocode with the command \"gocode close\" . ",
    "torre76": ". For completion, the trace log.\nvscode-go-debug.txt\n. \nIt seems that local variables is missing, maybe I open a cross bug to dlv project.. The problem has been solved by manually upgrade dlv.\nSoon there will be a new official release that will be downloadable via package managers.. Confirmed, updated delve on OSX using HEAD and anything works like a charm.. ",
    "lkarlslund": "Yes, I agree, it would be very nice to have this integrated. I'm using this:\nhttps://marketplace.visualstudio.com/items?itemName=emeraldwalk.RunOnSave\nWith this config:\n\"emeraldwalk.runonsave\": {\n  \"commands\": [\n    {\n      \"match\": \"\\\\.go$\",\n      \"isAsync\": false,\n      \"cmd\": \"cd ${fileDirname} && go generate ${file}\"\n    }\n  ]\n},\nYou get no feedback of a go generate call fails :(. Great job on this release so far.\nI have a huge project using Go Modules, with many local subpackages imported). The latest vsix (beta 6) works way better than the previous versions. It does not seem bogged down on CPU nearly as much. Previously I had like 10-12 go.exe running under VS Code when saving stuff, but this seems to have dissapeared.\nThe version of godef that the plugin installs does not support Go Modules, and that breaks that functionality. There is a fork at https://github.com/ianthehat/godef which works, and you might consider switching to that.\nWhen are you enabling languageserver for Windows? :). Benchmark file and package works great!. This is not a VS Code problem. This is because that's not the way you import packages if you use Go Modules :-)\nWhen using Go, there is no such thing as a relative path. This will not work with \"go build main.go\" from the commandline either, given your scenario.\nWhen you do an import, Go looks for the package in:\nGOROOT/src\nGOPATH/src\nvendor paths in current folder or parent folders, working its way upwards (if you're inside GOPATH)\nmodules from go.mod in current folder or parent folders, working its way upwards (if you're outside GOPATH)\n.... and nowhere else.\nIn your go.mod, your own package name is defined in the first line as module , typically \"github.com/username/packagename\" if you're using Github at least.\nYour import statement in main.go should be:\nimport \"/packtest\"\nAnd you don't need to turn GO111MODULE=on, if you're outside GOPATH it just works from Go 1.11 and onwards.. That would be really nice. I'm doing the same as you manually, when optimizing code for inlining. I think code overlay of some kind would work best.. ",
    "ljubomirb": "Try Go 1.9.4 instead of 1.10 and see if there is any difference.. @ramya-rao-a I do not know if he has 1.10. I have (non updated) linux setup, and everything works, and this weekend I tried fresh Windows setup on different machine, and it does not work as expected. It's not even possible to hoover over function to see its return type for example. But I cannot put my finger on it, since I'm not sure if is it me (am I also missing some package?), or is it just go 1.10 that I have freshly installed. So before blaming, I'm trying to see if someone has similar problems that started with 1.10. Could this be related to #1527?. @ramya-rao-a \nJust for fun, I've removed go 1.10, installed go 1.9.4 on the same windows machine and it all started to work as expected (when mouse was over function, first \"loading\" was shown, then soon function details).\nThen I installed the new version of vscode-go, and a new go 1.10. Automatically, some updating happen, log showing:\n\nInstalling github.com/nsf/gocode SUCCEEDED\nInstalling github.com/uudashr/gopkgs/cmd/gopkgs SUCCEEDED\nInstalling github.com/ramya-rao-a/go-outline SUCCEEDED\nInstalling github.com/acroca/go-symbols SUCCEEDED\nInstalling golang.org/x/tools/cmd/guru SUCCEEDED\nInstalling golang.org/x/tools/cmd/gorename SUCCEEDED\nInstalling github.com/fatih/gomodifytags SUCCEEDED\nInstalling github.com/haya14busa/goplay/cmd/goplay SUCCEEDED\nInstalling github.com/josharian/impl SUCCEEDED\nInstalling github.com/davidrjenni/reftools/cmd/fillstruct SUCCEEDED\nInstalling github.com/zmb3/gogetdoc SUCCEEDED\nInstalling sourcegraph.com/sqs/goreturns SUCCEEDED\nInstalling github.com/golang/lint/golint SUCCEEDED\nInstalling github.com/cweill/gotests/... SUCCEEDED\nInstalling github.com/derekparker/delve/cmd/dlv SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n\nAll I can say is that it now everything works, even with Go 1.10 and I hope this little test I did somehow also helps you in future in some way.\nGreat product btw! :). > mine also does not work after I updated to 1.20.1\nI've tested this with vscode 1.20.1 and vscode-go 0.6.76. It works.\nHowever, I am running this on go version go1.8.3 linux/amd64\nI'm close to believe (although not sure) this has all started with Go 1.10 having some part of API a bit different. Maybe that \"vet\" change?. ",
    "hbkmadness": "Hi,\nI am really running 1.10 lol but I will be able to try 1.9.4 maybe tomorrow so it will take some time until I can confirm that indeed that is the problem.\n@ramya-rao-a I'm running the latest version of gocode. And I will log an issue once I try the Go 1.9.4. Long story short I've never used Go before yesterday so everything that I installed is pretty much the latest versions of everything.. @ramya-rao-a This worked and solved my problem.\nI don't know if this is related to the issue but before installing I had to run also sudo apt install libltdl-dev but I think this is related with those specific pkgs.\nThank you.. ",
    "merry-mongoose": "Yes, I also hope you can make the go.inferGopath better.\nFor now, if we set the go.inferGopath to true, the workspace root will be used as go path, and override the GOPATH variable. For me, I hope use both of them, but cannot now.\nFor GOPATH, it is a global go path for all workspace;\nFor workspaceRoot, it same as a local go path which only be used for current workspace.\nIf we can use both of them in a workspace when set go.inferGopath to true, looks like use \"$GOPATH:${workspaceRoot}\" (but we cannot set this value to go.gopath, it is not absolute path), it will be more flexible.\nThank you.. @ramya-rao-a \nIn my case, my project has not be created under local gopath. Such as, if my local go path is '/a/b/c', but my project is under /a/d/e. \nIt means, I need add 2 path into GOPATH environment variable. It will be looks like\n'export $GOPATH=/a/b/c:/a/d/e'\nIf I do this in system environment, it works well. But the project path should not be added into system environment. It will make the GOPATH variable too long if there are many projects. And also, it will make the trouble to team members. So, I need add it into project settings in vs code.\nThere is a problem. the 'go.gopath' setting only allow the absolute path and '$workspaceRoot'. But I should not assign the absolute path which can work well on my machine to 'go.gopath' setting. it will make it cannot work on team members system after they pulled project from SCM.\nSo, I hope I can do 1 of following 2 choices. \n1. make the 'go.inferGopath' works separately. thus, when I have not set 'go.gopath', and 'go.inferGopath' is set to 'true', both of the global GOPATH and current workspace will be used as gopath.\n2. make the 'go.gopath' can apply environment variables. then I can do 'go.gopath=\"$GOPATH:${workspaceRoot}\"' to make both of them be used.\nThank you. ",
    "cerlestes": "\ud83d\udc4d \ngo.inferGopath should really set the GOPATH env variable to the appropriate value for the integrated terminal. The setting is currently completely useless to me, as I need to manually set the environment variable under terminal.integrated.env.windows for all of my go projects.. ",
    "galileo-pkm": "It seems that people are trying to solve some common issues by using the wrong tools without real understanding how their environment should be setup. \nI will explain my usual setup here for reference and also why I think that the result of \"'go.inferGopath\" should be exposed in the shell.\nThe system (shell) $GOPATH should be initialized, in my case ~/go. The go shell tools can work without it, but if $GOPATH is not explicitly set, delve debuger will not work properly in vscode. In vscode, gotoolspath should point to $GOPATH, infer path should be enabled. \nWhen setup like this vscode can find libraries installed in the system $GOPATH but also in the local project subdirectories. Also when installing libraries via vscode (not go get from terminal) those will be installed in the project folder and will not clutter the \"system\" go folder. \nOnly thing, that is left to do: while in vscode terminal set $GPATH to point to both locations, something like: export GOPATH=$GOPATH:$(go_infer_path). I usually right click on the project folder and do open in terminal and execute:  export GOPATH=$GOPATH:$(pwd). \nIn short: there should be a setting in vscode that can enable something like this: \n```\n{\n  \"terminal.integrated.env.linux\": {\n    \"GOPATH\": ${env:GOPATH}:${infered_go_path}\n  }\n}\n```\n. Agreed, appending the global gopath would keep the experience consistent and would resolve the initial issue, without breaking any customized setups (or at least I can't think of a way that would).\nEven if it breaks something, one can always unset the global gopath as the default value for go tools is  ~/go.\n. \"Use current gopath in integrated terminals\" if this means that the integrated terminal GOPATH should be overridden, that is the wrong way to address the problem. \nAs explained in the #1525 some of us have multiple folders in $GOPATH. . ",
    "kharism": "I happened to me too, at developer console I found\nerror stack:  Error: Cannot find module 'applicationinsights'\n    at Function.Module._resolveFilename (module.js:470:15)\n    at Function.Module._load (module.js:418:25)\n    at Function.o._load (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:664:413)\n    at Module.require (module.js:498:17)\n    at require (internal/module.js:20:19)\n    at Object. (C:\\Users\\User.vscode\\extensions\\lukehoban.go-0.6.76\\node_modules\\vscode-extension-telemetry\\lib\\telemetryReporter.js:18:19)\n    at Object. (C:\\Users\\User.vscode\\extensions\\lukehoban.go-0.6.76\\node_modules\\vscode-extension-telemetry\\lib\\telemetryReporter.js:106:3)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:488:32)\nmine also does not work after I updated to 1.20.1. that works for me also, thanks. ",
    "rip": "@ramya-rao-a Here's the error I get in the console:\n[Extension Host] Here is the error stack:  Error: Cannot find module 'vscode-extension-telemetry'\n    at Function.Module._resolveFilename (module.js:470:15)\n    at Function.Module._load (module.js:418:25)\n    at Function.o._load (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:664:413)\n    at Module.require (module.js:498:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (C:\\Users\\ripba\\.vscode\\extensions\\lukehoban.go-0.6.76\\out\\src\\util.js:11:38)\n    at Object.<anonymous> (C:\\Users\\ripba\\.vscode\\extensions\\lukehoban.go-0.6.76\\out\\src\\util.js:707:3)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10)\n    at Module.load (module.js:488:32)\n    at tryModuleLoad (module.js:447:12)\n    at Function.Module._load (module.js:439:3)\n    at Function.o._load (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:664:413)\n    at Module.require (module.js:498:17)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (C:\\Users\\ripba\\.vscode\\extensions\\lukehoban.go-0.6.76\\out\\src\\goSuggest.js:9:16). @ramya-rao-a I just tried that, still have the same error as above.. @ramya-rao-a That seems to have solved the issue!. ",
    "rogchap": "Is this still in active development? Seems like it may be forgotten about. This would be a great addition to the vs code tool set for Go.. I think there are two tasks: reverse debugging (should be straight forward... no pun intended) and then enabling advanced debugging with rr.\nCould take some inspiration from Goland: https://blog.jetbrains.com/go/2019/03/04/debugging-with-goland-advanced-debugging-features/. ",
    "alfred-zhong": "I read the blog and I like vgo, too. But I don't know if vgo should be supported soon.\nAlthough vgo brings very good thoughts, it is still new and experimental. Also it hasn't been bringing into the offical toolchain (Maybe soon in go 1.11 or 1.12, I don't know). Now if you want to use vgo, the get and build commands should also be called from \"vgo\" command, but not the \"go\".. @xiaoyifan6 Please write it in English.. ",
    "jancona": "@nicpottier I've found that I can use vscode with vgo by placing my code at the proper GOPATH location (even though vgo doesn't use GOPATH) and using vgo vendor to put all my dependencies in the vendor/ directory. That way the regular go tools that vscode uses still work, and I can use vgo commands from the command line. By using vgo vendor I don't have to go get my dependencies.. ",
    "hackervera": "Looks like vgo is more serious now https://blog.golang.org/versioning-proposal. ",
    "illegalnumbers": "What would be needed to move forward on this? How does vscode-go map dependencies and how can we add that path matching on to this extension? Would love to help out.. ",
    "tyhi": "The vgo proposal was accepted earlier. \nhttps://github.com/golang/go/issues/24301#issuecomment-390766926. ",
    "jrick": "vgo uses its own algorithm to determine the version, and the modules are extracted to $GOPATH/src/v/modulepath@version.  You can see all of the currently-resolved modules and versions with vgo list -m.. Note that modules can encompass multiple packages, so the github.com/lib/pq/certs package for example is part of the pq module since it shares the same longest module prefix of any referenced module.\nPerhaps vgo should gain a way to query for just the resolved module, version, and perhaps even source directory of any arbitrary package.  This would making integration with editors and IDEs simpler.. ",
    "RichyHBM": "Hello, @ramya-rao-a @uudashr  have there been any updates with regards to this issue?. In that case @ramya-rao-a would it be worth having a checklist in the OP or a milestone to track which dependencies have support?. I'll start it up here:\nVGO tools support\n- [ ] go Built in vGo support for the language (exp in Go 1.11) \n- [ ] gocode for auto-completion\n- [x] go-outline for symbol search in the current file\n- [x] go-symbols for symbol search in the current workspace\n- [ ] gopkgs for auto-completion of unimported packages\n- [ ] guru for the Find all References feature (Official Go tool)\n- [ ] gorename for renaming symbols (Official Go tool)\n- [x] goreturns or goimports for formatting code (goimports works but currently returns src/mod/.. dir, should be fixed with official vgo support )\n-  [ ] godef or gogetdoc for the Go to Definition feature\n- [ ] godoc or gogetdoc for the documentation that appears on hover (GoDoc Official Go tool)\n- [ ] golint or gometalinter or  megacheck for linting\n- [ ] dlv for debugging. Maybe a good first step would be to allow specifying a custom Go binary to use (that way you could point it at the vgo binary). This issue would also fix #1525. ",
    "xlucas": "Maybe rename the issue to \"Support for Go modules\" ?. Did anyone make it work with projects residing outside of $GOPATH ?. Did anyone make it work with projects residing outside of $GOPATH ?. ",
    "zakkor": "Support for modules (vgo) is now in Go 1.11 beta 2\nhttps://dl.google.com/go/go1.11beta2.src.tar.gz. ",
    "apmckinlay": "Coverage display (highlight or gutter) doesn't seem to work (nothing shows up) when using Go 1.11 beta 2 with go.mod and my project directory outside GOPATH. (It works for the same project when within GOPATH). But 2025 says it is just a \"partial\" fix?. ",
    "datosh": "As stated by @klingtnet https://github.com/Microsoft/vscode-go/issues/1532#issuecomment-405487001 you need to tell VS code to switch to the vgo binary as well.\nAfterwards VS code is able to find the downloaded dependency.. @klingtnet I'm running VSCode 1.26.1 on Win10, and it works like a charm. Can you give more information on what package you try to build/test? I can double check on my Mac later ...\nSimple hello world with unit tests works for me. When CTRL+SHIFT+P: Go: Test All Packages In Workspace I get:\n```\nRunning tool: C:\\Users\\\\go\\bin\\vgo.exe test -timeout 30s ./...\nok      github.com/datosh/demoservice   0.284s\nSuccess: Tests passed.\n```\nOnly modification regarding go in my VSCode config is:\n\"go.alternateTools\": {\n        \"go\": \"vgo\"\n}. ",
    "kidlj": "Go 1.11 was released!\nhttps://blog.golang.org/go1.11\nWith Go 1.11, when putting source code outside GOPATH (which enables the \"modules\" mode automatically), the extension lacks some features as with Go 1.10(in GOPATH):\n\nauto import\nauto completion\n\nand maybe others.\n. vscode-go version 0.6.93, vscode version 1.28.2 on Windows 10.. @ramya-rao-a I've tested with Go extension 0.8.0 and 0.8.1-beta.1, it still failed to work for pkg cache files.\n\nWhen the current file is from the module cache ($GOPATH/pkg/mod), use the module aware tools.\n\nIt seems that the extension was using godef instead of godef-gomod for files in module cache:\n[2018-12-14 15:41:41.670] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-14 15:41:41.670] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef.exe -t -i -f c:\\Users\\mellon\\go\\pkg\\mod\\k8s.io\\client-go@v2.0.0-alpha.0.0.20181126152608-d082d5923d3c+incompatible\\kubernetes\\typed\\apps\\v1\\deployment.go -o 1581\ngodef: no declaration found for v1.DeploymentList. My Go environment seems to be broken, none of Go extension features works any more. Closed.. I installed 0.7.1-beta.5, then every 'go to definition' trigger takes 10 seconds and shows 'No definition found for xxx'. Setting go docsTool to gogetdoc works though.. @ramya-rao-a Thanks for your kind support.\nThe Log(Extension Host) logs:\n```\n[2018-12-09 20:10:26.361] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:10:26.361] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\log\\log.go -o 175\ngodef: There must be at least one package that contains the file\n[2018-12-09 20:11:00.065] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:11:00.065] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\log\\log.go -o 173\ngodef: There must be at least one package that contains the file\n```\nIf I run this command manually, it hangs.\nHowever, If without the -i (read file from stdin) option, the command works:\n```\nmellon@collie MINGW64 /d/Code/demo (master)\n$ godef-gomod.exe -t -f log/log.go -o 175\nC:\\Users\\mellon\\go\\pkg\\mod\\github.com\\kidlj\\log@v0.0.3\\pkg.go:25:6\nWithFields func(fields Fielder) *Entry\nmellon@collie MINGW64 /d/Code/demo (master)\n$ godef-gomod.exe -t -f log/log.go -o 173\nC:\\Users\\mellon\\go\\pkg\\mod\\github.com\\kidlj\\log@v0.0.3\\pkg.go:25:6\nWithFields func(fields Fielder) *Entry\n```\nThe testing code is here: https://github.com/kidlj/demo. Hower, I installed 0.7.1-beta.5 again, now it works both in vscode stable and insider versions. \n0.7.0 still outputs errors:\n```\n[2018-12-09 20:27:27.412] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:27:27.412] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\log\\log.go -o 185\ngodef: There must be at least one package that contains the file\n[2018-12-09 20:27:33.701] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:27:33.701] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\log\\log.go -o 185\ngodef: There must be at least one package that contains the file\n```\nYou may close this issue, thanks.. Sorry, I don't know why, after experiencing the working extension for a while I quit the editors, and then reopened another project, it failed to work again.\n```\n[2018-12-09 20:39:15.658] [exthost] [info] eager extensions activated\n[2018-12-09 20:39:42.141] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:39:42.141] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\gin\\main.go -o 112\ngodef: There must be at least one package that contains the file\n[2018-12-09 20:39:45.409] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:39:45.409] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\gin\\main.go -o 112\ngodef: There must be at least one package that contains the file\n[2018-12-09 20:39:51.949] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:39:51.949] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\gin\\main.go -o 112\ngodef: There must be at least one package that contains the file\n[2018-12-09 20:40:07.231] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:40:07.231] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\gin\\main.go -o 112\ngodef: There must be at least one package that contains the file\n```\nHere is the full logs:\n```\n[2018-12-09 20:44:39.738] [exthost] [info] extension host started\n[2018-12-09 20:44:39.775] [exthost] [info] ExtensionService#_doActivateExtension vscode.debug-auto-launch {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:44:39.775] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\debug-auto-launch\\dist\\extension\n[2018-12-09 20:44:39.781] [exthost] [info] ExtensionService#_doActivateExtension vscode.emmet {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:44:39.781] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\emmet\\dist\\extension\n[2018-12-09 20:44:39.797] [exthost] [info] ExtensionService#_doActivateExtension vscode.git {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:44:39.797] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\git\\dist\\main\n[2018-12-09 20:44:39.852] [exthost] [info] ExtensionService#_doActivateExtension vscode.merge-conflict {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:44:39.852] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\merge-conflict\\dist\\extension\n[2018-12-09 20:44:39.857] [exthost] [info] ExtensionService#_doActivateExtension vscodevim.vim {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:44:39.857] [exthost] [info] ExtensionService#loadCommonJSModule C:\\Users\\mellon.vscode-insiders\\extensions\\vscodevim.vim-0.16.13\\out\\extension\n[2018-12-09 20:44:40.652] [exthost] [info] eager extensions activated\n[2018-12-09 20:45:07.557] [exthost] [info] extension host started\n[2018-12-09 20:45:07.590] [exthost] [info] ExtensionService#_doActivateExtension vscode.debug-auto-launch {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:45:07.590] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\debug-auto-launch\\dist\\extension\n[2018-12-09 20:45:07.602] [exthost] [info] ExtensionService#_doActivateExtension vscode.emmet {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:45:07.602] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\emmet\\dist\\extension\n[2018-12-09 20:45:07.613] [exthost] [info] ExtensionService#_doActivateExtension vscode.git {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:45:07.613] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\git\\dist\\main\n[2018-12-09 20:45:07.659] [exthost] [info] ExtensionService#_doActivateExtension vscode.merge-conflict {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:45:07.659] [exthost] [info] ExtensionService#loadCommonJSModule c:\\Users\\mellon\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\\extensions\\merge-conflict\\dist\\extension\n[2018-12-09 20:45:07.669] [exthost] [info] ExtensionService#_doActivateExtension vscodevim.vim {\"startup\":true,\"activationEvent\":\"\"}\n[2018-12-09 20:45:07.669] [exthost] [info] ExtensionService#loadCommonJSModule C:\\Users\\mellon.vscode-insiders\\extensions\\vscodevim.vim-0.16.13\\out\\extension\n[2018-12-09 20:45:08.442] [exthost] [info] ExtensionService#_doActivateExtension ms-vscode.Go {\"startup\":false,\"activationEvent\":\"onLanguage:go\"}\n[2018-12-09 20:45:08.442] [exthost] [info] ExtensionService#loadCommonJSModule C:\\Users\\mellon.vscode-insiders\\extensions\\ms-vscode.go-0.7.1-beta.5\\out\\src\\goMain\n[2018-12-09 20:45:08.728] [exthost] [info] eager extensions activated\n[2018-12-09 20:45:21.580] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:45:21.580] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\gin\\main.go -o 112\ngodef: There must be at least one package that contains the file\n[2018-12-09 20:45:38.454] [exthost] [error] [ms-vscode.Go] provider FAILED\n[2018-12-09 20:45:38.454] [exthost] [error] Command failed: C:\\Users\\mellon\\go\\bin\\godef-gomod.exe -t -i -f d:\\Code\\demo\\gin\\main.go -o 112\ngodef: There must be at least one package that contains the file\n```. I think I found the reason.\nHere's my testing project directory structure:\nD:\\CODE\\DEMO\n\u2502  .gitignore\n\u2502  go.mod\n\u2502  go.sum\n\u2502\n\u251c\u2500evaluator\n\u2502      main.go\n\u2502\n\u251c\u2500gin\n\u2502      gin.exe\n\u2502      go.mod\n\u2502      go.sum\n\u2502      main.go\n\u2502\n\u251c\u2500goroutine_closure\n\u2502      main.go\n\u2502\n\u251c\u2500log\n\u2502      log.go\n\u2502\n\u251c\u2500mod\n\u2502      go.mod\n\u2502      go.sum\n\u2502      main.go\n\u2502\n\u2514\u2500pg\n    \u251c\u2500has_many\n    \u2502      main.go\n    \u2502\n    \u251c\u2500has_many_self\n    \u2502      main.go\n    \u2502\n    \u251c\u2500has_one\n    \u2502      main.go\n    \u2502\n    \u251c\u2500many_to_many\n    \u2502      main.go\n    \u2502\n    \u2514\u2500many_to_many_self\n            main.go\nYou can see that in the uppermost demo directory there is a go.mod, and in gin and mod sub directory, there is another go.mod. With 0.7.1-beta.5, when triggering 'go to definition' in files which use the upper most go.mod file, it works; but if the file resides in a directory which contains its own go.mod, it fails.\n0.7.0 fails in both scenarios though.\nThe testing project is here: https://github.com/kidlj/demo. On #2180 \nNo, the latest beta10 extension still doesn't work well for mod in mod.\nHow to reproduce:\n$ git clone git@github.com:kidlj/demo.git   // outside GOPATH\n$ cd demo/gin\n$ go build .\n\n\nBy the way, the navigation speed in go mod mode seems to be much faster than 0.8.0 when Docs Tool set to 'godoc'. Thanks.\n . @ramya-rao-a Hi. I updated all the dependent tools and have a fresh Code insider version installed with no custom settings. But the beta10 extension still doesn't work for mod in mod.\nHere is the output screenshot:\n\nCan you reproduce this with the testing project? https://github.com/kidlj/demo. ",
    "alshdavid": "Any idea when autocomplete/import will be available for go 1.11?. ",
    "windler": "I think to enable autocomplete/import gopkgs has to be updated, because it is used to create PkgsList in goSuggest.ts.. ",
    "ikgo": "fix for gocode on  https://github.com/ikgo/gocode.git  fork from https://github.com/mdempsky/gocode.git\ncheck of go.mod existence in path tree. in case doesn't exists the original code running\ncompatible with go 1.11 only. @uudashr no, it use golang.org/x/tools/go/packages package supported in go 1.11 only. in case the go. mod doesn't exist in one of directories the original\npackage solving performed. my fix for go 1.11 and go.mod exists in one of a\ndirectories from current to root.\n\\ik\nOn Wed, Sep 12, 2018, 15:21 Nic Pottier notifications@github.com wrote:\n\nYa, it is pretty unusable for me due to how long completions take :(\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1532#issuecomment-420627900,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AiAFmd9_nvCu6vLHx5UhtAO1lhy064Xyks5uaPxVgaJpZM4SNton\n.\n. > @ikgo your solution seems to have a dependency issue on a non-existent \"core\" module:\n$ go get -u github.com/ikgo/gocode\ngo: finding github.com/ikgo/gocode latest\ngo: finding github.com/ikgo/core v0.3.0\ngo: github.com/ikgo/core@v0.3.0: unknown revision v0.3.0\ngo: finding golang.org/x/tools latest\ngo get: error loading module requirements\nI had to switch off module support, install it, and then enable module support again\n\nfixed. fix for gopkgs. https://github.com/ikgo/gopkgs fork from https://github.com/uudashr/gopkgs. my workaround go list app command to get list of all modules.\nbetter solution implement direct call to go and leave performance optimization to go team.\nps. thus and so i do not create pr. no added value for gopkgs module. -i flag should be removed from go build command\nOn Tue, Sep 25, 2018, 19:20 dreamheld notifications@github.com wrote:\n\n@dreamheld https://github.com/dreamheld Can you log a new issue for\nthat please?\nDone!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1532#issuecomment-424405990,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AiAFmSXPPShuinLmq2QWQr5qHjw7tvSFks5uelfIgaJpZM4SNton\n.\n. clean install of nsf/gocode fix the problem for go 1.10.1 and 1.10.3\n\nmdempsky/gocode not working in both cases. ",
    "avence12": "Add reference.\nhttps://github.com/Microsoft/vscode-go/pull/1902\nhttps://github.com/uudashr/gopkgs/issues/8. Try to replace nsf/gocode by mdempsky/gocode ?\nIt works for me after the migration.. @stamblerre \nI realize I posted go env result from out of my project folder. Just paste the correct one below.\nI also have set my vscode workspace config with \"go.toolsEnvVars\": {\"GO111MODULE\": \"on\"}\nbash\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"/Users/avence12/devel/opensource/gotools/bin\"\nGOCACHE=\"/Users/avence12/Library/Caches/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/avence12/devel/opensource/gotools\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/Users/avence12/.gvm/gos/go1.11.1\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/Users/avence12/.gvm/gos/go1.11.1/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/tmp/golang-exmaple/go.mod\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/tx/y15w994j5cjg8r1nxh2704940000gn/T/go-build481121418=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nAfter upgrading to stamblerre/gocode@02c18bb, I can see some new information.\n\n. @stamblerre \nI have fixed the typo but no luck.\nbash\n$ go list -json -compiled\n{\n        \"Dir\": \"/private/tmp/golang-example\",\n        \"ImportPath\": \"golang-example\",\n        \"Name\": \"main\",\n        \"Target\": \"/Users/avence12/devel/opensource/gotools/bin/golang-example\",\n        \"Module\": {\n                \"Path\": \"golang-example\",\n                \"Main\": true,\n                \"Dir\": \"/private/tmp/golang-example\",\n                \"GoMod\": \"/private/tmp/golang-example/go.mod\"\n        },\n        \"Match\": [\n                \".\"\n        ],\n        \"Stale\": true,\n        \"StaleReason\": \"build ID mismatch\",\n        \"GoFiles\": [\n                \"main.go\"\n        ],\n        \"CompiledGoFiles\": [\n                \"main.go\"\n        ],\n        \"Imports\": [\n                \"fmt\"\n        ],\n        \"Deps\": [\n                \"errors\",\n                \"fmt\",\n                \"internal/bytealg\",\n                \"internal/cpu\",\n                \"internal/poll\",\n                \"internal/race\",\n                \"internal/syscall/unix\",\n                \"internal/testlog\",\n                \"io\",\n                \"math\",\n                \"math/bits\",\n                \"os\",\n                \"reflect\",\n                \"runtime\",\n                \"runtime/internal/atomic\",\n                \"runtime/internal/sys\",\n                \"strconv\",\n                \"sync\",\n                \"sync/atomic\",\n                \"syscall\",\n                \"time\",\n                \"unicode\",\n                \"unicode/utf8\",\n                \"unsafe\"\n        ]\n}\nResults of gocode-gomod -s -debug. Look like it cannot find package.\n2018/11/28 09:50:49 Got autocompletion request for '/private/tmp/golang-example/main.go'\n2018/11/28 09:50:49 Cursor at: 65\n2018/11/28 09:50:49 -------------------------------------------------------\npackage main\nimport \"fmt\"\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.#\n}\n2018/11/28 09:50:49 -------------------------------------------------------\n2018/11/28 09:50:49 no package found for /private/tmp/golang-example/main.go: <nil>\n2018/11/28 09:50:49 Elapsed duration: 58.209397ms\n2018/11/28 09:50:49 Offset: 0\n2018/11/28 09:50:49 Number of candidates found: 0\n2018/11/28 09:50:49 Candidates are:\n2018/11/28 09:50:49 =======================================================\nMy workspace settings:\n{\n  \"go.buildFlags\": [],\n  \"go.buildOnSave\": \"package\",\n  \"go.buildTags\": \"\",\n  \"go.coverOnSave\": false,\n  \"go.docsTool\": \"gogetdoc\",\n  \"go.enableCodeLens\": {\n    \"references\": false,\n    \"runtest\": false\n  },\n  \"go.formatTool\": \"gofmt\",\n  \"go.gocodeAutoBuild\": false,\n  \"go.lintFlags\": [],\n  \"go.lintOnSave\": \"off\",\n  \"go.lintTool\": \"golangci-lint\",\n  \"go.testOnSave\": false,\n  \"go.toolsEnvVars\": {\"GO111MODULE\": \"on\"},\n  \"go.vetFlags\": [],\n  \"go.vetOnSave\": \"off\",\n}\nAccording to https://github.com/stamblerre/gocode/commit/02c18bb, it did not throw error nor load any packages.\n. Autocomplete works well after using vscode-go 0.7.1-beta.2  and the latest fix on https://github.com/stamblerre/gocode/commit/22843d89bc5a49e31d0e84abb8b9b8c27100619b\nThanks for your awesome support.. ",
    "astromechza": "@ikgo your solution seems to have a dependency issue on a non-existent \"core\" module:\n$ go get -u github.com/ikgo/gocode\ngo: finding github.com/ikgo/gocode latest\ngo: finding github.com/ikgo/core v0.3.0\ngo: github.com/ikgo/core@v0.3.0: unknown revision v0.3.0\ngo: finding golang.org/x/tools latest\ngo get: error loading module requirements\nI had to switch off module support, install it, and then enable module support again. ",
    "thedillonb": "Is anyone else experiencing a noticeable lag from the time auto-completion is invoked and the time it actually appears on screen with @ikgo's fork? . ",
    "jnoxon": "I have hover docs for local code, but no hover docs for code from imported modules. It just says \"Loading...\" for a little bit, then goes away, with no log output.. ",
    "alexkreidler": "It would also be great to have syntax highlighting for go.mod files. We could just change contributions.languages to have\n\"extensions\": [\n+         \"go.mod\",\n          \".go\"\n        ],\nAnd then add the four keywords (module, require, exclude, and replace) to be just like package and import, and thus have the same syntax highlighting.\nPlease tell me if I am missing anything?. ",
    "chrisgoffinet": "I can concur about the extremely slow auto-complete aspect after upgrading to @ikgo package. @ikgo is this something you can look into? I'm happy to provide any assistance on getting this resolved.. ",
    "MFoster": "It appears that ikgo's changes have been merged into uudashr's repository... is uudashr's repository now going to be the accepted fork to support go modules in vscode?. You are correct, I had the compare syntax in reverse... https://github.com/uudashr/gopkgs/compare/master...ikgo:master. ",
    "dmigwi": "Its seems like with go1.11 and export GO111MODULE=on set, Go:Install/Update Tools is no longer a plug and play command. I am getting this error for all the 16 tools.\n```\n...\n16 tools failed to install.\ngocode:\nError: Command failed: ~/.gvm/gos/go1.11/bin/go get -u -v github.com/nsf/gocode\ngo: cannot find main module; see 'go help modules'\ngo: cannot find main module; see 'go help modules'\n...\n```\nI use gvm to manage my various go versions. My GOROOT is\n~/.gvm/gos/go1.11. The fix above still hasn't worked for me... I've also discovered that my vscode doesn't refresh the GOROOT variable (at least the path to Go bin doesn't change) until I restart my machine (Mac Seirra Os).\nI have opted to install all the tools using go1.10 settings and after all tools have been successfully installed is when I can now change my Go version using gvm to go1.11. The vscode works fine with all the tools installed with go1.10 setting. \ngo1.11 settings above still doesn't work even with the beta Go extension binary beta version and GO111MODULE set to off.\nActually with the beta binaries version above, the reload button on the Go extension doesn't go away.\nAfter every reload it keeps bring the same message that I should Install Go extension.. ",
    "genewoo": "Maybe append this configuration to your setting:\n\"files.associations\": {\n        \"*.mod\":\"go\"\n    }. ",
    "asw101": "I just installed @stamblerre's Beta (https://github.com/stamblerre/gocode), per https://github.com/mdempsky/gocode/issues/46, as follows:\ngo get -u github.com/stamblerre/gocode\ngocode close\nThis has restored auto-completion for me (cc: @ramya-rao-a). I haven't tested it in great depth yet, but it's great to have it back! @marwan-at-work, this is working inside GOPATH as well.. ",
    "dreamheld": "I think the issue still persists. Maybe I'm doing something wrong but here's what I'm looking at:\n1. Making a new directory outside of my current GOPATH.\n2. Navigate to the new directory and run $go mod init packtest\n3. Create a subfolder \"packtest\" with a packtest.go in it.\n4. packtest.go contains: \n`package packtest\nimport \"fmt\"\nfunc PackPrint(){fmt.Println(\"PackTest Called\")`\n\n\nNavigating up to the root folder and create main.go.\n\n\nTrying to call packtest.PackPrint() from main.go fails. Not only it doesn't auto-complete the new package, it doesn't import it either. It also doesn't have it listed in the \"Add Import...\" option. \n\n\n(go.autocompleteUnimportedPackages\": true). > @dreamheld Can you log a new issue for that please?\nDone!. Almost there! There are still a couple of bugs. Same configuration as before: \n\n\ntyping \"packtest\" in main.go automatically populates the import statement. However, it's missing a '/': \n\nAdding the missing '/' and filling out the rest of the package function call results in proper execution:\n\n\nHooray! \nHowever, writing out the package name still doesn't auto-populate it's methods after \".\":\n\n. Is this coming online soon? It'd be nice for VSC to work with the .mod files!. > Hopefully soon\nEh! I just went ahead and imported your files into my current Go plugin. Couldn't wait for the 'official' release. Great work, man! Everything is working just swimmingly! Love it!. > This is not a VS Code problem. This is because that's not the way you import packages if you use Go Modules :-)\n...\nRight. That's my bad. However, I did try the import \"/packtest\" statement too this afternoon (just in case it was something along the lines of what you were saying). The terminal would just hang. I'd have to Ctrl+C to break out of that. \nAnd even w/ the \"/packtest\" line, there was still no auto-fill of the package methods. :/\nP.S. \nAlso, the functionality of the plugin with other packages was to fetch the method/autofill lists either after a \".\" or pressing Ctrl+S after typing out the package name. This doesn't seem to happen anywhere outside of the GOPATH anymore. I could reproduce that.\nThen again, I might just be doing something utterly wrong! . I wasn't able to respond to this last night, but I think my issue was indeed that I never killed gocode process.\nThe new beta (as of 20 min ago) seems to do the autocomplete for methods fine, but doesn't fill out the import statement automatically anymore. Also, package/method highlighting for the new package seems off. I'll poke more at it though. @ramya-rao-a , nope. I've updated @uudashr 's tool and everything works swimmingly with automatically adding the import statement and auto-completing the 'packtest' package name.\nThe only two issues remaining, it seems:\n1. The one you mentioned in a thread above (with method filling showing up only after the method was used already).\n2. Highlighting. Method/Package colors seem to not work anymore. Might be an issue on my end though. Still diagnosing that.. @ramya-rao-a , there! I'm not sure if I broke it somehow and the solution is trivial.\n\n. Ah, geez! My screen was in the night mode. so everything looked yellow. Duh... I apologize for wasting you time!. You, guys, are awesome keeping on top of these things the way you do!!!. ",
    "bjm88": "I have all my 3 related projects referencing each other in go.mod and building on command line in go build CLI.  However, in Visual Studio I get red errors on the package main main.go first lines..\nI've followed the instructions to install the latest master version by cloning this repo....full instructions here.. https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension\nAfter restarting vscode I'm still getting this error in my Go 1.11 go.mod based project....\ncan't load package: package /Users/ben/dev/company1/project1/chat_service: cannot find package \"/Users/ben/dev/company1/project1/chat_service\" in any of:\n    /usr/local/Cellar/go/1.11/libexec/src//Users/ben/dev/company1/project1/chat_service (from $GOROOT)\n    /Users/ben/go/src//Users/ben/dev/company1/project1/chat_service (from $GOPATH)\nVisually its showing a red line under my package main declaration at top of main.go.  Its weird like looking for itself or my source code in the GOPATH, which I dont want to use GOPATH at all anymore and specifically go get still putting vendor packages there, but not my source code.  Any ideas?\n. Can we customize the go build flags using..\n  \"go.buildFlags\": []\nTo exclude -i ?  Default seems to be blank?. I tried that, did not help.  Still getting weird error.  Also weird is I have 3 projects, 2 services and 1 shared common project for db/logging that the 2 reference.  The 2 services seem to have this red line on the package main, but the common one never does.  Perhaps some bug when go.mod has a location reference \nmodule  company1/product1/identity_service\nrequire (\n    cloud.google.com/go v0.28.0 // 3rd party, normal ref\n        company1/product1/go_common v0.0.0 . //local source code not in GOPATH, also we dont have anything special version wise, is using v0.0.0 proper or way to not specify?\n)\nreplace  company1/product1/go_common => ../go_common\nIs this go.mod setup causing this?  It seems so b/c the go_common lib doesn't actually have the issue.. Thanks @ramya-rao-a  for the hint to isolate.  I can confirm I see this error output in the output panel for Go.  However I can also confirm if I just manually run go build from my command prompt/shell I do NOT see the error.  I only see one special flag -o, so I tried setting that also and it didn't make a different.  No build issues manually, only within visual studio.  The only thing I can see that is different is some issue with assuming source is in GOPATH and my source code is NOT in GOPATH its a workspace outside of GOPATH as its a monolithic repo with other projects non-go.  It looks like visual studio code inject the fully qualified path to do a build, which would start at /Users as I'm on a mac, but the actual error is showing it is injecting this \"_\" underscore in front of the path.  Is that some normal convention??\n/Users/ben/dev/company/project>Finished running tool: /usr/local/bin/go build -o /var/folders/8_/b0g1vb392ws98pthb2vcf5nr0000gn/T/vscode-godAaLjI/go-code-check-4 \n_/Users/ben/dev/company/project/go_common/database\nIs it related to how vs code is launching on mac and calcuing full path that happens to be outside GOPATH?  Just FYI To try and eliminate the error I did put this workspace path into GOPATH but it didn't help, same error.\n. Thank you @ramya-rao-a adding this config\n\"go.toolsEnvVars\": {\n        \"GO111MODULE\": \"on\"\n    }\nfixed the issue.  I was surprised this is needed b/c I actually installed the latest main build version of the go plugin that I thought started supporting this.  Anyway, thank you!\nAlso if anyone else running into this and also finding it hard to test.  I thought it was another issue with VS code, but actually my build feedback on errors was just really delayed b/c of this other issue where replace commands in go.mod were ignored by go run/go build/go get so it still does an HTTP call to try and get local package and times out and only then continues to finish actual build.  This makes it really slow and delayed to find/test these issues on 1.11 right now if u using replace.  Its a core go issue not VS code issue.\nhttps://github.com/golang/go/issues/27859. When do you plan to support the go 1.11 go.mod modules feature?  I'm getting weird package errors like it can't find the local go packages.     Example go.mod:\nmodule company.com/product/identityservice\nrequire (\n    cloud.google.com/go v0.28.0 // indirect\n        .....\n)\nreplace company.com/product/go_common => ../go_common\n. ",
    "treeder": "Looks like they're going to make the -i flag a no op in in the go tool: https://github.com/golang/go/issues/27285#issuecomment-424538161\n. ",
    "forthe2008": "I have fixed it by download these modules and put them into Microsoft VS\\Code\\resources\\app\\node_modules .. ",
    "caarlos0": "version 1.20.0 stopped working as well. I removed ~/.vscode and all folders related to vscode I found, reinstalled everything and it seems to work now.. Hi,\ntried golangci-lint, seems to work ok for me. Didn't had this problems related to going to end of the file as @primalmotion reported (or at least I didn't notice them). ",
    "dvelitchkov": "Sounds good, I'll try to get this in ASAP!. This is for #1534 . Sorry for the delay. \nI think this PR should be closed - this was a bad idea. What I'm doing can be accomplished by setting VS code project debug settings, no need to mess with build flags. . ",
    "rschmied": "Hey... I do face the exact same issue when clicking on the \"run test\" link next to a function in the editor... I want to pass extra args for the test but those have to be appended to the values that are being passed as defaults...\nmy go.testflags look like this:\njson\n\"go.testFlags\": [\"-args\", \"-logtostderr\", \"-stderrthreshold\", \"info\", \"-v\", \"4\"],\ne.g. this is what happens now:\nRunning tool: /usr/local/go/bin/go test -args -logtostderr -stderrthreshold info -v 4 -timeout 30s -run ^Test_getServerID$\nand it should be like this:\nRunning tool: /usr/local/go/bin/go test -timeout 30s -run ^Test_getServerID$ -args -logtostderr -stderrthreshold info -v 4\nI think I could experiment with the code you pointed to above (testUtils.ts#L127) but I have absolutely no idea how I would even start to test those changes.\n. ",
    "kron4eg": "@ramya-rao-a confirm, it works. Thanks a lot for such a quick fix!. @rockmenjack this very much looks like #1536 (now fixed in master). ",
    "DivineMgn": "Fix by reinstall vs code.. ",
    "Adirelle": "The project is ~5000 lines of code in less than 50 files.\nI could not reproduce this bug with \"golint\" as go.lintTool (the default) as of Code 1.20.1, but it does happen with gometalinter, which does not work properly by the way, so maybe this is a gometalinter bug.. ",
    "carney520": "\nplatform: Windows 10\nvscode: 1.20.1. ",
    "avjinder": "Praise the lord \ud83d\ude4f, goreturns lives.\nThe link on the tools page points to the dead url. After installing this package, vscode kept failing to get goreturns, so I ended up using goimports.\nDoes the package use the dead url to get the dependency?. ",
    "alwindoss": "Thank you for your comments.\nI know of this snippet generator in code. What I am referring to is a shortcut like we have for for range loop. The shortcut is forr\nThe request is very specific to golang and it is something used very often when developing with golang too.\nI suggest we keep this issue open.. Thank you Ramya for pointing it out. This is exactly what I was looking for. But if we need a handler for a snippet with print statement I will be happy to make the change and raise a PR. ",
    "dmick": "Yes, I noticed the behavior after trying to circumvent it with go.docsTool == gogetdoc, although, the comment filtering seems to be independent of tool?...  I don't know anything about the language server so will look.. OK, concur, removing the filtering will only affect 'gogetdoc'.. I can't seem to run the tests, even on the unmodified master, and I'm not sure what I'm doing wrong.  Either launching from within 'code .' as documented or running 'npm test', I get \"TypeError: Path must be a string. Received undefined\"\nI'm sure it's something to do with my environment, but, how to tell what?. (and is there an appropriate chat forum for such difficulties?). I haven't yet been able to run tests locally, not even with master; see https://github.com/Microsoft/vscode-go/issues/1550. O_o thanks.  I thought I had test failures from Travis too, but if you're happy I'm happy!. ",
    "giniedp": "i see that i grabbed an older version of gometalinter which does not make use of the GOMETALINTER_CONFIG env variable. The new version does work perfectly using the env variable.. ",
    "kzhui125": "@ramya-rao-a \njson\n            \"dlvLoadConfig\": {\n                \"followPointers\": true,\n                \"maxVariableRecurse\": 1,\n                \"maxStringLen\": 64000,\n                \"maxArrayValues\": 64000,\n                \"maxStructFields\": -1\n            }\nDebugging is very very slow now. It's unusable.\n\n. @xmattstrongx \ngo\nlen(\"\u4f60\u597d\") is 6\nlen([]rune(\"\u4f60\u597d\")) is 2\nhttps://blog.golang.org/strings. ",
    "JustTestingGo": "\nSo when the test folder is directly under ~/Documents/go you see the red underlines but not when the same folder is directly under ~/Documents/go/src\n\nSure, that's it.\n\nCan you click on the Output pane next to the Problems view and share what you see in both cases?\n\nHere's my Output pane when the source folder is under ~/Documents/go\n\nAnd here's my Output pane when the source folder is under ~Documents/go/src\n\n\nAlso run the command Go: Current GOPATH in both cases, and share the results\n\nWith the source folder under ~Documents/go\n\nWith the source folder under ~Documents/go/src\n\nSo, the difference seems to be in \n\"Finished running tool: /usr/local/go/bin/go build -i -o /tmp/go-code-check .\"\nWhen the error is underlined, this command reports the error in the actual folder (/shared/Documents/go/test/test.go:8: undefined: testVariable), while when the error isn't underlined the command reports the error in the soft-link (~/Documents/go/src/test/test.go:8: undefined: testVariable).\nBest regards.\n. Problem solved!\nIt seems that go tools aren't very fond of GOPATH using links (at least soft-links). I've changed my GOPATH from $HOME/Documents/go to /shared/Documents/go and now everything is working like a charm.\nThank you for heading me in the right way Ramya and sorry for the inconveniences.\nBest regards.. ",
    "redbaron": "neither :) proposed idea for somebody to implement. If I remember correctly it wasn't only about adding the flag, it also requires using child_process.spawn (which supports flag) instead of child_process.execFile (which doesn't) and there was some semantic difference between them.. ",
    "joncalhoun": "@ramya-rao-a I suspect this needs a test, but at first glance I'm not sure I understand the tests very well. I suspect I need to add something here - https://github.com/Microsoft/vscode-go/blob/0.6.77/test/go.test.ts#L698 - but that's about all the further I got. I'll probably dive into them more tomorrow, but I don't use typescript often so any help would probably speed this up.\nThe actual PR might be worth refactoring a bit, since a good chunk of the code is reused from the function building section, but it was different enough that I opted to duplicate the similar code. I'm open to changing it if desired.. @ramya-rao-a I'd love to figure out what needs done to get this submitted.\nI think it needs a test of some sort; can you point me to an area in the tests where you think this would be most easily tested?\nAfter a test is added, is there anything else you feel will need altered in the PR?. Thank you! . So I'm currently swamped and won't have time to finish this for at least a week. If you want to close this in the meantime its fine - I'll just reference it with a new PR when it is ready.. :+1: Thanks for the help on this. Psyched to see it make it into master finally \ud83d\ude04 . I think you are right looking the code - I see nothing there for return types. I must have forgot about that use case when writing it, and I haven't touched this code in a while.\nWant me to take a stab at fixing it or are you going to? Regardless it might make sense to roll back the change since it can break things \ud83d\ude26 . ",
    "1984weed": "Sorry. It's only about debug mode.\nhttps://github.com/derekparker/delve/blob/master/Documentation/usage/dlv_debug.md. Done !!. ",
    "cemremengu": "Wrong repo. Apologies.\nNeed coffee... ",
    "harkal": "@ramya-rao-a I pulled the code out to a single function that generates the command. Let me know if you like it this way, or you want it a member of the class or something. . config and debugCmd would then need to be copied and then append args and title to the copies or all promises will share the last one. It didn't look that tighty with all the coping and replacing of keys. The function looked more easy to follow. I might find time to refactor it that way at some point, but for now I am afraid I am over my time quota for a quick contribution like this. But feel free to change it anyway you like, the important thing is to have the feature in as it's quite useful! :) Thanks! . ",
    "seen": "The desired result is having the same functionality (namely a type-ahead search) that Go to Symbol in Workspace has, but targeted at the standard library.\nThe main use case is for those times when I'm fairly sure of the naming of a symbol, but less certain of it's package location. The current solution is to either start typing in code and hope code sense picks up what I'm after, or heading to google. Neither of which are as effective as the behavior Go to Symbol in Workspace presents. ...package location should have really been package name. In this scenario I wouldn't know the package in which the symbol lives, otherwise I'd be able to use the Browse Packages command. It does, but with projects utilizing dep or other dependency management techniques that have a vendor directory, those symbols are in the workspaces, so Go to Symbol in Workspace is sufficient. ",
    "bukshee": "The two are same dirs, see my linux prompt comment above. The output pane is empty, all I do is start vscode, open up main.go, make an error like\nfunct main()\nthen save. The Problems pane gets populated by the error message you see and when I double click on it this is the message I get.\nI have Go 0.6.77 extension installed from lukehoban.. Dear Ramya,\nThe symlinked version was opened in VSCode, obviously. Otherwise I could not report a symlink error. So once again:\nsh\njson \u00bb cd    \n~ \u00bb cd work/json \njson \u00bb pwd\n/home/golang/work/json\njson \u00bb pwd -P\n/home/golang/golib/src/github.com/bukshee/json\n~ \u00bb ls -ld work\nlrwxrwxrwx 1 golang golang 28 Feb  3 15:26 work -> golib/src/github.com/bukshee\njson \u00bb code .\nAt this point Copy path returns the proper path (no symlink):\n/home/golang/golib/src/github.com/bukshee/json/main.go\nbut in the Problems panel double clicking on the error I get:\nUnable to open 'main.go': File not found (file:///home/golang/golib/src/github.com/golib/src/github.com/bukshee/json/main.go).\nCheers.. go build output on my linux:\n```sh\njson \u00bb go build main.go\ncommand-line-arguments\n./main.go:54:1: syntax error: non-declaration statement outside function body\n./main.go:56:2: syntax error: non-declaration statement outside function body\njson \u00bb pwd\n/home/golang/work/json\n```\nso inside the symlinked dir.. ",
    "sandipb": "This bit me too today, and I think I have found the reason.\nrunTool in util.ts uses path.resolve to join the paths returned by go build and the package directory.\nthe behavior of path.resolve() doesn't match how paths are actually resolved on the filesystem. \nOn the filesystem, a .. will always resolve to the actual absolute path of the directory rather than its position in the path with symlink.\nHere is a reproduction of the bug:\n```console\n$ pwd\n/Users/snbhatta/mynpm\n$ tree -I node_modules\n.\n\u251c\u2500\u2500 a\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 b\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 e\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 c\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 d\n\u2502\u00a0\u00a0         \u2502\u00a0\u00a0 \u2514\u2500\u2500 b -> /Users/snbhatta/mynpm/a/b\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 something.txt\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 test.js\n6 directories, 4 files\n$ node test.js\nUsing shell: 'ls a/e/c/d/b/../../something.txt' =  ls: a/e/c/d/b/../../something.txt: No such file or directory\nUsing path.resolve(a/e/c/d/b, ../../something.txt) =  /Users/snbhatta/mynpm/a/e/c/something.txt\n$ ls /Users/snbhatta/mynpm/a/e/c/something.txt\n/Users/snbhatta/mynpm/a/e/c/something.txt\n```\nThe JS source:\n```javascript\nlet exec = require('child_process').exec;\nlet path = require('path');\nexec(\"ls a/e/c/d/b/../../something.txt\", (error, stdout, stderr) => {\n    console.log(\"Using shell: 'ls a/e/c/d/b/../../something.txt' = \", stdout+stderr);\n    console.log(\"Using path.resolve(a/e/c/d/b, ../../something.txt) = \", path.resolve(\"a/e/c/d/b\", \"../../something.txt\"));\n});\n```. Other than the path resolving issue I mentioned above, there is an additional issue I think is happening.\ngo build is being run with PWD set to /, at least on my system. \nFor some infuriating reason, go build uses the PWD variable to determine the file paths.\nJust making sure that the PWD variable in the build environment matches what we are trying to build, fixes this bug for me. (i hot patched the vscode-go plugin to test the fix)\n```diff\ndiff --git a/src/goBuild.ts b/src/goBuild.ts\nindex 73880b6..9685144 100644\n--- a/src/goBuild.ts\n+++ b/src/goBuild.ts\n@@ -56,6 +56,10 @@ export function goBuild(fileUri: vscode.Uri, goConfig: vscode.WorkspaceConfigura\n        }\n    const buildEnv = Object.assign({}, getToolsEnvVars());\n\n\nif (buildEnv.hasOwnProperty(\"PWD\")) {\nbuildEnv.PWD = cwd;\n}\n+\n        const tmpPath = path.normalize(path.join(os.tmpdir(), 'go-code-check'));\n        const isTestFile = fileUri && fileUri.fsPath.endsWith('_test.go');\n\n```\n. @bukshee \nvscode actually builds your code a bit differently. It builds the object in a temp directory and then discards it. \n\nI wish it showed a bit more information though - like cwd and environment of the tools, especially because the behavior of the tool changes based on them.. @ramya-rao-a perhaps only the relevant ones? GOPATH and GOROOT. Additionally, it doesn't seem that the PATH variable being passed on to the langserver process includes $GOROOT/bin like other go tools.. I see this in the code: \ud83d\ude04 \ntypescript\n     if (!allFoldersHaveSameGopath()) {\n         vscode.window.showInformationMessage('The Go language server is not supported in a multi root set up with different GOPATHs.');\n         return false;\n     }\nSo most probably this is known, and just not documented, or perhaps documented in a place where I have not spotted it.\nIn any case, the $PATH variable for the langserver process not containing $GOROOT/bin may still be the issue.. Seems it is just setting GOPATH right now during langserver invocation.\ntypescript\n        if (langServerAvailable) {\n            let langServerFlags: string[] = vscode.workspace.getConfiguration('go')['languageServerFlags'] || [];\n            // Language Server needs GOPATH to be in process.env\n            process.env['GOPATH'] = getCurrentGoPath();\nOther Go tools seem to be using getToolsEnvVars() which includes the PATH setting needed to find the go executable.. > Was there no notification that popped up saying \"The Go language server is not supported in a multi root set up with different GOPATHs.\"\nNo. AFAIK, I didn't get any such notifications.\nAnd sure! Let me send PRs for both these changes! :-)\n. @ramya-rao-a I have been closely looking at this because it has been significantly hampering my development. I looked closely, for example at the traces of the langserver.\nOne odd thing stood out - currently, when I am typing in the code editor, it seems that vscode sends a notif: textDocument/didChange message, and then a request #n: textDocument/documentSymbol  request on every character being entered in the editor. This causes an insane amount of unnecessary chatter for a line of text being input.\nIs this by the protocol design?\nCan this be, in some ways debounced and so the messages only sent after a minimum x millis?\nCan this be configurable? Like, if I want to only care about getting popup help after I pause typing for 500ms?\nI am just guessing out there, that a possible edge case is being triggered in the lang server because two many requests are being sent for the same document, and we can reduce this a bit by asking langserver less frequently by cutting down on obvious unnecessary calls.. Lol. I didn't even know that Breadcrumbs was a feature. Didn't have it on.\nJust now had an editing session with the outline disabled. Still had the issue with langserver.\nIs there a way to force the outline view to use the default outline cli (go-outline) regardless of whether langserver is enabled?\n. ",
    "dhowden": "~~So it looks like the correct information is making it in, but just not being correctly passed to vscode to render: https://github.com/Microsoft/vscode-go/blob/master/src/goLiveErrors.ts#L87~~\nAfter some digging I think https://github.com/Microsoft/vscode-go/blob/230e7bc3b535b1434492d93682e429289402b87c/src/util.ts#L648 and the processes that use it, need to be updated to support columns.\nWill try to make a pull request for this.. Closing as this has been merged.\nNote: go1.10 is known to report some counter-intuitive column locations for certain errors (for instance https://github.com/golang/go/issues/24339, which has been fixed and will be released in go1.11).. I also see this issue a lot, not just in comments but also when using float values.\n@ramya-rao-a I think maybe the point here is that the completion should not be activated if the cursor is within a comment? (i.e. in the same way that completions don't show when the cursor is inside a string value).  Would be great if this could also be done for float values too.\nTo reproduce what I'm talking about:\ngolang\n// Try typing.<ENTER>\nvar x = 10.<ENTER>\nand you'll get:\ngolang\n// Try typing.SOMECOMPLETION\nvar x = 10.ANOTHERCOMPLETION\n. That works great.  Thanks.\nThe issue with single-line comments appears when the comment is describing an exported name. In that case adding a period to the end causes the completion to appear.\n\n. Did this break \"run benchmark\"?  It seems to be passing the name of benchmark X to go test -run ^X$ instead of doing the old go test -run ^$ -bench ^X$. ",
    "SommerEngineering": "I had the same issue. But in my case, it was just for vendor packages, maintained by dep. Completion for Go's own packages still works. I'm not sure: Should it work with vendor packages?. ",
    "LaughingCabbage": "same issue here. Windows 10\nextensionService.ts:782 Activating extension 'lukehoban.Go' failed: Cannot find module 'vscode-extension-telemetry'.\nO._logMessageInConsole @ extensionService.ts:782\nconsole.ts:136 [Extension Host] Activating extension `lukehoban.Go` failed:  Cannot find module 'vscode-extension-telemetry'\nt.log @ console.ts:136\nconsole.ts:136 [Extension Host] Here is the error stack:  Error: Cannot find module 'vscode-extension-telemetry'\n    at Function.Module._resolveFilename (module.js:470:15)\n    at Function.Module._load (module.js:418:25)\n    at Function.o._load (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:671:784)\n    at Module.require (module.js:498:17)\n    at Module.patchedRequire [as require] (c:\\Program Files\\Microsoft VS Code\\resources\\app\\extensions\\git\\node_modules\\diagnostic-channel\\dist\\src\\patchRequire.js:14:46)\n    at require (internal/module.js:20:19)\n    at Object.<anonymous> (C:\\Users\\Genti\\.vscode\\extensions\\lukehoban.go-0.6.77\\out\\src\\util.js:11:38)\n    at Object.<anonymous> (C:\\Users\\Genti\\.vscode\\extensions\\lukehoban.go-0.6.77\\out\\src\\util.js:707:3)\n    at Module._compile (module.js:571:32)\n    at Object.Module._extensions..js (module.js:580:10). @ramya-rao-a thanks for the tip. Both done already with no change in results . Thank you! This seems to have worked. I do get a \"formatting took too long\" from the extension host, but after a few minutes it seems to work as expected.\nUpdate:\nany chance of forcing a clean for extensions on update? I seem to run into similar issues every time I upgrade VS Code. Feel free to let me know if I'm the odd ball out here.. ",
    "yuwgle": "Dude,sorry about the go extention bug report.\nMy problem is gocode didn't work properly, reinstall gocode can fix my problem.\nGo extention is ok here.. ",
    "extrame": "What is the roadmap of this feature? @ramya-rao-a . I try to use\n\"terminal.integrated.env.osx\": {\n        \"GOPATH\":\"${env:GOPATH}:${workspaceFolder}\",\n    }\nBut It doesn't work.\nIf I change GOPATH to a unused variable like :\n\"terminal.integrated.env.osx\": {\n        \"TEST\":\"${env:GOPATH}:${workspaceFolder}\",\n    }\nIt works.\nSound like setting of GOPATH in terminal.integrated.env.osx is overrided by others. I got the problem, I set my GOPATH in ~/.bash_profile, Maybe vscode internal terminal set the env GOPATH before exec ~/.bash_profile, after delete the line in ~/.bash_profile, It seems OK.\nBUT\nwhere should I set my system GOPATH except ~/.bash_profile ..... @ramya-rao-a \n. @ramya-rao-a more test:\nGOPATH locate in /AAA/BBB \nPROJECT locate in /Users/xxx/workspace/PROJECT\nconfig \"terminal.integrated.env.osx\": { \"TEST\":\"${env:GOPATH}:${workspaceFolder}\", }\nset GOPATH as /AAA/BBB in ~/.profile, mac terminal got it ok.\nBut vscode internal terminal got empty, GOPATH=\":/Users/xxx/workspace/PROJECT\". ",
    "mfridman": "Noticed the same thing., expecting int (which it is if you check the type), but displays bool when hovering over. Attached a screenshot:\n. ",
    "janhancic": "Output from the first file (where I get the squiggly line):\n```\nFinished running tool: /usr/bin/golint\nFinished running tool: /usr/bin/go build -i -o /tmp/go-code-check .\n/home/jan/dev/core/common/go/validate/validate.go:32: syntax error: unexpected aaa, expecting {\nFinished running tool: /usr/bin/go vet ./...\n```\nand from the second, non working one:\n```\nFinished running tool: /usr/bin/golint\nFinished running tool: /usr/bin/go build -i -o /tmp/go-code-check .\n/home/jan/dev/core/plz-out/go/src/common/go/db/db.go:13: cannot find package \"common/go/db/config/dbconfig\" in any of:\n/home/jan/dev/core/REDACTED/REDACTED2/productbuilder/service.go:12: found packages validate (validate.go) and main (validate_test_main.go) in /home/jan/dev/core/plz-out/go/src/common/go/validate\n/home/jan/dev/core/REDACTED/REDACTED2/productbuilder/service.go:14: no Go files in /home/jan/dev/core/plz-out/go/src/REDACTED/REDACTED2/proto/productbuilder\nFinished running tool: /usr/bin/go vet ./...\n```. Ok, here are the new outputs.\nThe working one:\n```\n/home/jan/dev/core/common/go/validate>Finished running tool: /usr/bin/golint\n/home/jan/dev/core/common/go/validate>Finished running tool: /usr/bin/go build -i -o /tmp/go-code-check .\n/home/jan/dev/core/common/go/validate/validate.go:17: syntax error: unexpected aaa, expecting {\n/home/jan/dev/core/common/go/validate>Finished running tool: /usr/bin/go vet ./...\n```\nthe non working one (file name is /home/jan/dev/core/REDACTED/REDACTED2/productbuilder/db.go):\n```\n/home/jan/dev/core/REDACTED/REDACTED2/productbuilder>Finished running tool: /usr/bin/golint\n/home/jan/dev/core/REDACTED/REDACTED2/productbuilder>Finished running tool: /usr/bin/go build -i -o /tmp/go-code-check .\n/home/jan/dev/core/plz-out/go/src/common/go/db/db.go:13: cannot find package \"common/go/db/config/dbconfig\" in any of:\n/home/jan/dev/core/REDACTED/REDACTED2/productbuilder/service.go:12: found packages validate (validate.go) and main (validate_test_main.go) in /home/jan/dev/core/plz-out/go/src/common/go/validate\n/home/jan/dev/core/REDACTED/REDACTED2/productbuilder/service.go:14: no Go files in /home/jan/dev/core/plz-out/go/src/REDACTED/REDACTED2/proto/productbuilder\n/home/jan/dev/core/REDACTED/REDACTED2/productbuilder>Finished running tool: /usr/bin/go vet ./...\n```\nI've noticed that I get the same output regardless if I have the syntax error or not in the second (non working) file. That seems strange, but I don't know if it's significant.\n. They do show up in the problems panel. But why doesn't the one from db.go? Note that it also doesn't pick up any errors of the type \"unused variable\", \"cannot use int as string\" etc. So I get no go support effectively.. So I tried running the commands manually in the same folder they get run according to the output panel and I do get the expected errors:\n$ /home/jan/dev/core/bin/golint\ndb.go:17:2: expected '{', found 'IDENT' aaa\nthat error doesn't show up in the problems or output panel\n. Yes, that's correct.\n\n. Sorry for the late reply, was on my easter break ...\n\nI've ran the command @ramya-rao-a and I get a bunch of \"cannot find package\" errors. I suppose go can't go past that? But it's weird that syntax errors aren't considered first. I'm a bit new to go, so I don't know if this is an issue with vscode or Go.. I've now additionally have a case where a syntax error is reported in the Output panel but isn't highlighted in the editor itself:\n/home/jan/dev/core-golang/src/common/go/calc>Finished running tool: /usr/bin/go build -i -o /tmp/go-code-check common/go/calc\n/home/jan/dev/core-golang/core-golang/src/common/go/calc/calc.go:16: syntax error: unexpected newline, expecting comma or ). ",
    "mocampo5": "I was having similar problem, i follow @ramya-rao-a steps and got this error\nUnable to display threads: \"Internal debugger error: runtime error: invalid memory address or nil pointer dereference\nSince that was coming from go, i tried updating to go 1.10 and that fixed it. ",
    "krasoffski": "Have the same issue but on xubuntu 16.04 and local binary debug. And no issues using dlv from cli.\nWill check on my laptop too and update this comment.. It seems like problem might be related following behavior:\n - When you put pointer to function name and and choose  \"Find All References\" it works w/o problem.\n - When you select function name and choose  \"Find All References\" it does not work with issue unknown error. I was not able to reproduce #2197 on my pet projects. With big code base will try a little bit later. . ",
    "dsyer": "In my case I found that VSCode ignores my \"go.goroot\" setting from global config, so it was picking up the wrong version from somewhere. If I manually set GOROOT in the launch.json it works.. ",
    "greggwardnz": "I am having the same problem on Ubuntu 17.10/18.04, running Go v1.8.3, with Go extension v0.6.78. I had been successfully debugging with VSCode and Go v1.8.3, for months, up until just a couple of weeks ago and now every time that I try to debug a particular project, I get the \"Failed to get threads\" error. \nIt seems it doesn't matter where I put the breakpoint, as soon as the breakpoint gets hit, it outputs this error.\nI got the same error as @mocampo5 when debugging the Go extension.. I have tried completely rebuilding the project that I am having the problem with, which does not fix the problem. If I use GoLand to debug the same project, on the same platform, I do not have a problem. I would much prefer to stay with VS Code.\nI have tried manually setting GOROOT, as suggested by @dsyer, but that did not work either.\nI am happy to try any suggestions, to help resolve this issue, except for the fact that I must stay with the current version of Go that I am using i.e. Go v1.8.3.. I have been using Delve v1.0, pulled down via the VSCode Install/Update tools functionality. This will throw the \"Failed to get threads\" error, every time I try to stop on a breakpoint, debugging a particular project. I changed the dlv executable with the one that comes with GoLand  (v0.12.1) and I no longer get the error and can stop on breakpoints successfully.\nIs there some incompatibility with the latest version of Delve?. Have decided to move project to Go v1.10.2, rebuilt all tools and no longer have a problem debugging.. ",
    "nengc": "Oh,It is my fault, I have some tools not installed for the bad network\n\nI reinstalled them and it works!\n. @ramya-rao-a  As you say\uff0cit is the same issue as #1714 . \nAnd after i updated to  0.6.83, the problem is gone. \nThanks!. ",
    "lyrixx": "Hello @iceycake ; I have the same issue. How did you manage to fix this?. ",
    "iceycake": "I have asked the folks in the gopher #vscode channel and the answers are not too helpful.  I am able to \u201cmake it work\u201d after I run go build using the plugin in vscode.  However, it is still not what I am expecting.  I\u2019m giving it up and going to move back to the $$$ gogland.. ",
    "andytruong": "Thanks @martin-flower for the note, I tried but the will see the warning:\n{ \"search.useIgnoreFiles\": false }\n\n. ",
    "rolurq": "@martin-flower I added that to mi settings but still getting the same error, vscode-co doesn't find the dependencies. Actually, I even removed de vendor/ entry from my .gitignore and still vscode-go doesn't load the dependencies. :confused: . ",
    "halturin": "the same problem. i'm using 'dep ensure'\nvsc version 1.31\nvsc ignores my 'vendor' directory \ngopkgs |grep vendor shows all the content of 'vendor' of my project\n. ",
    "oky2abbas": "This problem was solved by installing all the necessary tools for the go plugin.. ",
    "e-nikolov": "They seem to have added support for querying interface implementations as well.\nhttps://github.com/sourcegraph/go-langserver/commit/7e016370b5dcb7c929e563a2eea65b1c42ba01e3. ",
    "shivas": "Running following commands in extension folder:\nnpm install vscode-extension-telemetry \nAND\nnpm install vscode-languageclient \nresolved issues. \nLooks like some hidden dependencies are not included?. @ramya-rao-a I would, problem is i don't have issue anymore as i fixed it myself, (don't want to break it again), and logs folder looks like doesn't have logs from that time anymore :(. ",
    "jhendrixMSFT": "@quoctruong sorry for the delay.  My hope is to have this fixed in the release for the month of March.. Related https://github.com/Microsoft/vscode/issues/28025. @ramya-rao-a no it doesn't work, would be great to fix it.. I have a fix for this, one thing that comes to mind is if we should also display the shadowed value(s) like delve does in the variables pane.. I tend to agree however there are cases where having both values would be useful.  IMO what would be ideal is if we could display the shadowed value when hovering over the shadowed variable.  Can we subscribe to some event when hovering over a variable?. This starts to get a little unwieldy if a variable is shadowed more than once.  Perhaps it would be better if we displayed the shadowed variables as children of one another, what do you think (assuming vscode don't have problems with child vars with the same name)?. @ramya-rao-a the context was a bit different, the solution was to pass the file name to dlv, e.g. dlv debug main2.go. That's correct, dlv will give the following error and return a non-zero exit code.\nCan not debug non-main package\n. @vladbarosan There was a new release of the metalinter v3.0.0 which has breaking changes.  How about you update travis to pin to v2.0.12 until we have time to react to these changes?. Rebased on top of master.. @xiphon can you please rebase on top of master?  Once that's done we can merge this change.. @xiphon can you please rebase on top of master?. Fixes https://github.com/Microsoft/vscode-go/issues/2002. @xiphon I tested this out using the repro provided in the linked issue but it doesn't appear to work, i.e. the value for animal is still dog when stopped after animal is shadowed with the value cat.  Am I missing something?. It is, I thought the intent of the PR was to address it but perhaps I'm mistaken.  I had dug into it a bit, delve sends back all the locals including the shadowed ones.  E.g.\n\"pet\": \"dog\",\n\"pet\": \"cat\"\nWe send all of them back to VS Code and it would appear that when there are duplicate entries the first one is displayed and the rest discarded (this is just a guess on my part but fits with my observation).\nOne idea is to prune out the dupes based on their line number with respect to the current line number (I actually have code for this).  Another option would be to display the shadowed variables the same way delve does which might be useful (we could also make this option configurable).. @segevfiner the debug adapter process is recycled between sessions however you're correct that the number of handles will continue to grow.\nTaking a step back, can somebody articulate why this fix is needed?  Not that I'm pushing back (although we do need to address the handle growth), I don't see a referenced issue so I'm missing some context.. Digging into this a bit more we should be resetting stackFrameHandles and _variableHandles every time the debugger stops as the information is no longer valid and is essentially a memory leak; this is exactly what the node debugger does, see here.  I think the best place to do this is in handleReenterDebug() unless there's a better suggestion.. If there's a repro available that demonstrates the slowness it would help, maybe there's a better way we can implement this feature.. s390x and ppc64 are natively supported by Go (i.e. there are binary packages for it) so we should probably include those two.. I couldn't find any documentation about it but given that there are Linux distributions (e.g. Ubuntu) that support these architectures it seems likely that delve would work there too.  That said, these architectures are pretty uncommon so it's probably fine to omit them (we can always add them later if it's an issue).. Fixes https://github.com/Microsoft/vscode-go/issues/1010. @ramya-rao-a FYI. @ramya-rao-a are the requests in parallel?  My intention was to perform them synchronously.  Good point on the spurious evaluations on strings, I will update loadChildren() to never perform the eval if the type is string.. I found a great description of when to load children here.  Will update based on this spec.. Fixes https://github.com/Microsoft/vscode-go/issues/1974. \n. If I run gometalinter locally on the test fixture I see the following output.\nWARNING: failed to make error: failed to check packages: errors while loading package test/testfixture/errorsTest: [d:\\work\\src\\test\\testfixture\\errorsTest\\errors.go a relative path: GetFileAttributesEx error: failed to check packages: errors while loading package test: The filename, directory name, or volume label syntax is incorrect.\nerror: failed to check packages: errors while loading package test/testfixture/errorsTest: [d:\\work\\src\\test\\testfixture\\errorsTest\\errors.go:11:2:warning: error return value not checked (undeclared name: prin]) (errcheck)\nerrors.go:11:2:warning: unused variable or constant undeclared name: prin (varcheck)\nThe warning messages as expected by the test are included in the output however it appears that there's a bunch of extra preceding output which I suspect is the root problem.  Have you seen this before?. The error is coming from a dependent tool errcheck.  Here's the offending commit https://github.com/alecthomas/gometalinter/commit/f64e0e4b6a4bbabe18b0c66400fd164e2521cb01#diff-c15d9d82fc36434e5329fe18954eaa32. I think we should switch to using the latest stable version of gometalinter so that we aren't just getting latest master and hoping it works.. @tcagan do you have an example where deeply nested structures stops working so I can investigate?  My change should work for structs of arbitrary depth (was the intent anyways).. @tcagan thanks this is helpful.  The problem here is the eval expression fails, see the output in the debug console.\nFailed to evaluate expression - 1:28: expected operand, found 'go'\nThe type name returned by delve, github.com/andygrunwald/go-jira.ChangelogHistory, appears to be the problem.  I'll investigate further.. Related to https://github.com/Microsoft/vscode-go/issues/1854. Not that I'm pushing back but curious what prompted this change?. Do you have a test case where you see it loading more than the 64 items?  For me it only loads 64 even if there are more in the array.  Maybe I need to update my test.. Fixes https://github.com/Microsoft/vscode-go/issues/2329. Fixes the issue mentioned here: https://github.com/Microsoft/vscode-go/issues/2288#issuecomment-460919209\nSee https://github.com/go-delve/delve/issues/1476 for more info.. Fixes https://github.com/Microsoft/vscode-go/issues/2328. While this fixes the issue I'm wondering if this is the correct way to solve it.  It appears that adding the fully-qualified name to a variable doesn't happen in all code-paths which seems odd to me.  I need to dig into this a bit more to understand why.. I think in evaluateRequest() in the then() clause for evaluateRequestImpl() we should set the fully qualified name.\nts\nvariable.fullyQualifiedName = variable.name;\nThis way the variables are uniform and we don't have to special-case fullyQualifiedName being absent.  Seems to work in the examples you provided but let me know if I missed something.. The type name github.com/lggomez/sub1.S1 is what we get back from delve.  Are you suggesting it should be something else?. Oh I see, I misunderstood and thought the issue was with the variable name.. @vinhjaxt did this ever work and then one day it stopped working?. Good idea, thanks for the contribution.. Will mark as const.. In your example, what happens if this.X() fails, what will the value of result be?. This was all existing code, was trying to avoid making the diff too noisy.. Right, so basically what I want is if this.evaluateRequestImpl() succeeds then update v.children with the result and if it fails do nothing.  This seemed like the cleanest way to achieve that.. We could but since the functions are only relevant to variablesRequest() I think it make sense to keep them contained within it (now perhaps refactoring variable requests into its own class would clean this up...).. That was my original implementation, I switched it though so that it's uniform with the other blocks.  I don't feel super strong about this though so if you think the other way is more clear I can change it.. Oh good point will add an onrejected method, is reason => reason sufficient to do nothing?. Sig should be private convertToHex(v: string): string.  Also missing a new-line character between 519 and 520.. This is incorrect and will cause boolean types to display like they have child elements.  It should remain variablesReference: v.children.length > 0 ? this._variableHandles.create(v) : 0 like below which means the two clauses can be refactored.. For types v.value will be an empty string, so convertToHex() needs to handle this case and return an empty string (with the current implementation you get 0xNaN in the variables window).. This will truncate floating-point numbers.  Perhaps this functionality should be limited to integers?. It starts here, the magic is in 1 << (iota); iota will start at zero and each line is incremented by 1.  See the definition of iota here.. I thought it odd as well.  We could open an issue however given that JSON is case-sensitive it would be a breaking change for consumers.. I've relocated GoVariableFlags.. Correct, for the entirety of the const block.  In a new const block iota is reset to zero.. Per the spec.\n\"Even if a debug adapter does not support multiple threads, it must implement the threads request and return a single (dummy) thread.\"\nSo since we have no threads yet we must send a dummy thread.. Copying from our internal conversation.\nok I looked into this, the ability to override dlv via go.alternateTools isn't hooked up...i.e. we don't call getBinPathWithPreferredGopath() when resolving the location for dlv....at any rate I don't think this is a great solution as it means that I have modify settings.json and launch.json, plus I can't easily toggle among different configurations as I believe the options in settings.json apply to all configurations (correct me if I'm wrong). @ramya-rao-a a bit unrelated but do you know why we attempt to restart the debuggee during close?  I believe this is related to remote debugging as that's the only time this.debugProcess is null.. This seems redundant with the timeout token.  I think you could remove this code and just call clearTimeout(timeoutToken) after the above call to detach.. When halt fails can we tell if it was due to the target process exited?. Sorry for the delay.  This is correct, since nobody will be importing these packages the value is solely used as the identity.. Absolutely.  I've opened https://github.com/Microsoft/vscode-go/issues/2370 to track enhancing the outline view.. This assumes the process has a zero exit code, I would either omit the zero or change it to a regex (if you do be sure to handle negative error codes as well).. Is this true?  Looks to me that the timeout token has already been cleared.. Does this fix the test that sometimes fails in CI?. If detach fails I wonder if we can actually delete the debugee.  Presumably the debugger has an open handle to the debugee so it should fail.  Seems like we shouldn't clear the timer until we know that halt and detach have succeeded.. For local debugging I think we can simplify the entire flow.  Note that this assumes that the end result is that dlv and the debugee have been terminated and that the debug file has been deleted.\n\nstart a timer that will kill the process tree and delete the debugee; this MUST be no-fail\ncall halt and once that returns call detach; if either of these fail do nothing as the timer will clean up\ndo NOT clear the timer, if step 2 succeeded it's a no-op\n\nIs there any reason why this approach won't work?. > We dont want the timer to timeout and do forceful kill/remove when detach is running.\nWhy?  The end result is the same either way and while I agree that we should do best effort to kill things gracefully I'm not convinced that the extra complexity to cover every corner case is worth it.. ",
    "hex2010": "added \"go.buildTags\": \"ignore\" to workspace settings,  error raise other place:\n```\n//+build ignore\npackage main\nimport (\n    \"crypto/x509\"  // <- error here\n...\n``` \nfound packages tls (alert.go) and main (generate_cert.go) in /go/src/crypto/tls.  ok. I found the solution:   rename the tag to \"ignore1\" and add it to go.buildTags,  errors gone\nEDIT:  \nsorry, I reload the workspace,  error appear again:\ncan't build package  example/cpp because it contains C++ files (example.cpp,test.cpp) but it's not using cgo nor SWIG \nI think this package should not be compiled at all. this directory is not a \"package\"  but a c++ project,  golang  files in it are all tool scripts,  should run with go run xxxx.go,  not for go build.\n. ",
    "bimargulies": "\u279c  ~ go version\ngo version go1.10 linux/amd64\nhttps://github.com/golang/tools/blob/f1a397bba50dee815e8c73f3ec94ffc0e8df1a09/cmd/guru/main.go#L32. ",
    "gflarity": "Absolutely. Please let me know if there's anything else I can do to help debug. \n{\n    \"workbench.colorTheme\": \"Visual Studio Dark\",\n    \"window.zoomLevel\": 1,\n    \"go.autocompleteUnimportedPackages\": true,\n    \"editor.multiCursorModifier\": \"alt\",\n    \"editor.minimap.enabled\": false,\n    \"gitlens.advanced.messages\": {\n        \"suppressCommitHasNoPreviousCommitWarning\": false,\n        \"suppressCommitNotFoundWarning\": false,\n        \"suppressFileNotUnderSourceControlWarning\": false,\n        \"suppressGitVersionWarning\": false,\n        \"suppressLineUncommittedWarning\": false,\n        \"suppressNoRepositoryWarning\": false,\n        \"suppressResultsExplorerNotice\": true,\n        \"suppressShowKeyBindingsNotice\": true\n    }\n}. Ok, I found a very small repo case (for me): \n```\npackage main\nimport (\n    \"log\"\n    / comment /)\nfunc main() {\n    l := log.Logger{}\n}\n```\n^ auto import fmt  in main after that first line.  I don't actually use comments in my imports, but as I was using trial and error to come up with an example I noticed this and ran with it. \nEnv:\nOS X, go 1.10, vscode Version 1.22.1 (1.22.1), vscode-go 0.6.78\n. Ok, I found a very small repo case (for me): \n```\npackage main\nimport (\n    \"log\"\n    / comment /)\nfunc main() {\n    l := log.Logger{}\n}\n```\n^ auto import fmt  in main after that first line.  I don't actually use comments in my imports, but as I was using trial and error to come up with an example I noticed this and ran with it. \nEnv:\nOS X, go 1.10, vscode Version 1.22.1 (1.22.1), vscode-go 0.6.78\n. I should note, if I move the comment above it works again. . It happens workout a comment on certain cases but this is the smallest\nexample I could make.\nOn Mon, Apr 9, 2018, 9:32 PM Ramya Rao notifications@github.com wrote:\n\nThanks for the example! Looks like it only happens when there is a comment\nlike that before the closing )\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1606#issuecomment-379945085,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPexEh5AnLvXbI5bxWvq2YxhcUftHgAks5tnAuagaJpZM4TG34Z\n.\n. So far so good. Thanks for fixing this so quickly. Big fan of vscode+go. . \n",
    "mattgen88": "Many thanks! I'll give it a shot tomorrow. Thanks for the quick response!. Confirmed working in vscode 1.22.1\nThank you once again!. ",
    "olegburov": "Hi @ramya-rao-a, is there any update on this issue?\nIt would be supper handy if I VS Code can accept input from fmt.Scan while debugging  such a simple code as follows:\n``` go\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.Println(\"What's your name?\")\nvar s string\nfmt.Scanln(&s)\n\nfmt.Printf(\"Hello, %s\", s)\n\n}\n``` . ",
    "felixfbecker": "Thanks! \ud83e\udd17 . ",
    "dawidp": "missed that bug... but removing folder worked. Thanks :+1: . ",
    "soyangel": "Same happens here with gofmt as formatter. ",
    "jaracil": "I'm having the same issue on large files. When setting \"editor.formatOnSave\" to false it works well.\n. ",
    "h12w": "Same happens, and I'm using the Vim plugin. My workaround is to click the mouse once after the save+format, rather than using jkhl to navigate.\n. ",
    "rusenask": "Same on Mac with this version. What is weird is that it's happening not on all files but just some. \n\nVersion 1.22.1 (1.22.1)\n. \n",
    "aaahrens": "I have this issue as well.. ",
    "marlonfan": "+1. ",
    "markeissler": "Is the \"changing directories\" behavior a new side-effect introduced after 1.21.1? This behavior certainly does not exist previous to 1.22...which is why I assume it's a problem with VSCode itself. I've been using VSCode this way along with the vscode-go extension since October 2016 without a problem until now.\nOS: macOS 10.13.3\nI think you should be able to replicate this by setting GOPATH from the command line and then opening a project. At least on macOS.\nAlso, it's not the result of an OS upgrade as I can try opening a Go project right now with 1.22.1 and then problem exists, then open the same project with 1.21.1 and the problem does not exist.\nWeird.\nFor anyone that runs into this problem (on macOS) you can rollback with:\nVSCode 1.21.1 - macOS\nI assume download urls for previous versions on other platforms can be constructed in a similar fashion.\n. @ramya-rao-a This is strange. I'm not seeing the behavior now either. This is after seeing the problem for an entire day. I was able to switch back and forth between 1.22.1 (where the problem appeared) and 1.21.1 (where there was no problem). I did it repeatedly, switching back and forth. Very bizarre.\nI'm going to close this issue and re-open if the problem appears again. Thanks for looking into this.\n. ",
    "banks": "Seems this was not go plugin related and fixed in 1.22.2.\nRef https://github.com/Microsoft/vscode/issues/47382. ",
    "nathanhack": "I'm having the same issue. Usually happens 1-2 times an hour.  I see no correlation with memory (usage 10-70MB). . ",
    "cacothi": "same here for javascript. It also stopped refering the require links with the hint to show the parameters for the method. ",
    "di3663": "@m90 \ngogetdoc do work although it's much slower than guru.. ",
    "sudo-suhas": "Apologies, I meant to say $HOME/dev/go/src/myprj. I am not using symlinks.\n~~I identified the issue though. When I change my path settings for Go to absolute paths, things work as expected. Specifically, \"go.toolsGopath\": \"{~/installs/go-tools \u2794 /home/suhaskaranth/installs/go-tools}\" and . \"go.gopath\": \"{~/dev/go \u2794 /home/suhaskaranth/dev/go}\".~~\n~~So where does this issue need to be fixed? I'd be more than happy to make a PR if you could give me some pointers on where to start.~~\nEdit: Still broken. For some reason, intellisense works in very few places.. I ran Go: Install/Update tools and after that it is working correctly. Closing the issue, will re-open if the problem reappears.. This also happens when I hover on key name in keyed variable instantiation. For example, consider the following code snippet:\ngo\nv := MyStruct{\n    Message: \"value\",\n}\nIf I hover on Message, I get the following error:\n[Error - 12:14:40] Request textDocument/hover failed.\n  Message: no declaration found for Message\n  Code: 0\nThis did not bother me much earlier but now the go-langserver output keeps opening up repeatedly(if I close it).\nMy go plugin settings:\njson\n{\n    \"go.useLanguageServer\": true,\n    \"go.toolsGopath\": \"~/installs/go-tools\",\n    \"go.gopath\": \"~/dev/go\",\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"go.testFlags\": [\"-v\"],\n    \"go.liveErrors\": {\n        \"enabled\": true,\n        \"delay\": 500\n    }\n} \nIs there some editor setting which will prevent opening the output section on error?. ",
    "H4xorPL": "Why is build failing for something as trivial as updating description? and error isn't to do with any changes I've made. Or am I wrong?. ",
    "modyuan": "only can not  add import for me. ",
    "conradoplg": "Setting GOROOT fixes the \"Go to definition\" issue, but not the \"Add import\" issue.\nFurthermore, IMO the plugin shouldn't require GOROOT to bet set, it seems better to obtain it with go env GOROOT as described in https://dave.cheney.net/2013/06/14/you-dont-need-to-set-goroot-really\n. Before (both don't work):\n\necho $GOROOT: empty (not set)\ngo env GOROOT: /usr/lib/go-1.10\n\nAfter (\"Go to definition\" works; \"Add import\" does not work)\n\necho $GOROOT: /usr/lib/go-1.10\ngo env GOROOT: /usr/lib/go-1.10\n. Outside; I opened VS Code with\n\nGOROOT=/usr/lib/go-1.10 code\n. Sorry for the delay.\n@ramya-rao-a yes, I confirm your change makes \"Go to definition\" work. Thanks!\n@uudashr Adding $GOROOT/bin to $PATH did not make \"Add import\" work.\nThe output of gopkgs| head -n 10 is (some private packages were omitted):\ngithub.com/derekparker/delve/service/rpc1\n[omitted]\ngithub.com/davidrjenni/reftools/vendor/golang.org/x/tools/benchmark/parse\ngithub.com/davidrjenni/reftools/vendor/golang.org/x/tools/go/callgraph/rta\ngithub.com/pkg/errors\ngolang.org/x/tools/godoc/vfs\ngithub.com/davidrjenni/reftools/vendor/golang.org/x/tools/godoc/proxy\ngithub.com/MichaelTJones/walk\ngolang.org/x/tools/godoc/dl\ngithub.com/derekparker/delve/pkg/config\nI think I found the issue. My \"unusual\" setup is the result of using the golang-backports Ubuntu ppa: https://launchpad.net/~longsleep/+archive/ubuntu/golang-backports\nHowever, it uses symbolic links in order to follow the standard Unix folder structure:\n$ ll /usr/lib/go-1.10\ntotal 28\ndrwxr-xr-x   4 root root  4096 Apr 20 08:15 ./\ndrwxr-xr-x 184 root root 12288 Apr 20 08:15 ../\ndrwxr-xr-x   2 root root  4096 Apr 20 08:15 bin/\nlrwxrwxrwx   1 root root    36 Feb 19 18:07 doc -> ../../share/doc/golang-1.10-doc/html/\nlrwxrwxrwx   1 root root    46 Apr 17 09:56 favicon.ico.gz -> ../../share/doc/golang-1.10-doc/favicon.ico.gz\ndrwxr-xr-x   8 root root  4096 Apr 17 09:56 pkg/\nlrwxrwxrwx   1 root root    23 Feb 19 18:07 src -> ../../share/go-1.10/src/\nlrwxrwxrwx   1 root root    24 Feb 19 18:07 test -> ../../share/go-1.10/test/\n-rw-r--r--   1 root root     8 Mar 29 01:28 VERSION\nHowever, symlinks in GOROOT break some things like godoc. The Go team decided that \"Symlinks in Go file trees should just be disallowed\", and an issue was created in the golang-backports in order to change it to not use symlinks anymore.\ngopkgs uses a Walk function which does not follow symlinks, resulting in the same issue.\nSo either:\n\ngopkgs should follow symlinks\ngolang-backports should be fixed\n\nWhile I personally think everything should work with symlinks, it seems that if the Go team gave up on that, so we can't do much about it. So I'll understand if you decide to close this issue, and I'll wait for the golang-backports people to \"fix\" it.\n. I've just noticed that this is not limited to golang-backports. All Go packages in Ubuntu are like that, including default packages from LTS versions. So maybe that's an argument for changing gopkgs.\n. @uudashr It works now!\nThank you and @ramya-rao-a for the excellent work :+1: . ",
    "jlucktay": "My builtin packages have been behaving strangely as well, recently.\nIt can see the builtin packages in the autocomplete list, like so:\n\nHowever, when I select one of the builtins to use, it says it can't find it:\n\nI have followed this wiki article and tried setting go.inferGopath to true but the behaviour is still odd.\nI don't want to have to hardcode the path to my Go install, because I'm using Homebrew on MacOS and that path will shift unpredictably with future versions.\nVersions:\n- Go: go version go1.10.2 darwin/amd64\n- VSCode: 1.23.0\n- Extension: 0.6.79\n. Hi, @ramya-rao-a and thanks for investigating further!\nI removed all of my go.* specific settings from VSCode preferences, and it settled down a little bit, but still seems a little off.\n\nThe output from View -> Output -> Go looks like this after I open a .go file and edit and (re)save it:\n```\n/Users/jameslucktaylor/go/src/github.com/jlucktay/golang-workbench/codewars/playing-with-digits>Finished running tool: /Users/jameslucktaylor/go/bin/golint\n\n/Users/jameslucktaylor/go/src/github.com/jlucktay/golang-workbench/codewars/playing-with-digits>Finished running tool: /usr/local/bin/go test -c -i -o /var/folders/92/8y_s2pz52wj_5byc2cvgv3w00000gp/T/go-code-check github.com/jlucktay/golang-workbench/codewars/playing-with-digits\n/Users/jameslucktaylor/go/src/github.com/jlucktay/golang-workbench/codewars/playing-with-digits>Finished running tool: /usr/local/bin/go vet ./...\n```\n\n\ngo env GOROOT in the terminal gives this:\n/usr/local/Cellar/go/1.10.2/libexec\nThis path lines up with Homebrew. \ud83d\udc4c\n\n\nWhen I do Go: Add Import the built-in packages do not show up, yet the packages themselves no longer have the red underline, and autocomplete gives all of the methods etc when typing, e.g. math. or big.:\n\n. @ramya-rao-a on MacOS and Windows both, installing the Go-latest.vsix file (which reports its version as 0.6.80-beta.3 within VSCode) has straightened out the Go: Add Import problem:\n. \n\n",
    "gokomer": "it seems golang side fixed the repository problem. ",
    "antismap": "I have the same issue with the same error message.\nGo: Current GOPATH gives:\n\nCurrent GOPATH: /home/michael/go\n\nvscode Version 1.23.0\ngo version go1.10.1 linux/amd64\n. Sorry for the late reply. \nI get it now : my code wasn't in the GOPATH ! It works now :). ",
    "Hume3": "@antismap \nGorename is really unstable, it only works if your source files are inside \"/ src\" path, also you should not have errors in any file, sometimes it does not work anyway.\n\ud83e\udd14. ",
    "nebiros": "+1\nVersion 1.22.2 (1.22.2)\n12:45 $ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/Users/nebiros/Library/Caches/go-build\"\nGOEXE=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/nebiros/go\"\nGORACE=\"\"\nGOROOT=\"/usr/local/opt/go/libexec\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/opt/go/libexec/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/bg/q5lvd51j5qz4jhrrfbfs3ycr0000gn/T/go-build062933725=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nThe actual error:\n/Users/nebiros/OneDrive/Projects/my-api>Finished running tool: /usr/local/opt/go/libexec/bin/go build -i -o /var/folders/bg/q5lvd51j5qz4jhrrfbfs3ycr0000gn/T/go-code-check _/Users/nebiros/OneDrive/Projects/my-api/router\ncan't load package: package _/Users/nebiros/OneDrive/Projects/my-api/router: cannot find package \"_/Users/nebiros/OneDrive/Projects/my-api/router\" in any of:\n    /usr/local/opt/go/libexec/src/_/Users/nebiros/OneDrive/Projects/my-api/router (from $GOROOT)\n    /Users/nebiros/go/src/_/Users/nebiros/OneDrive/Projects/my-api/router (from $GOPATH)\nAnd this is the symlink:\n~/go/src/github.com/MyCompany/my-api -> /Users/nebiros/OneDrive/Projects/my-api\n14:32 $ pwd\n/Users/nebiros/go/src/github.com/MyCompany/my-api. ",
    "Green7": "@ramya-rao-a I tried to open both folders (symlinked or physicall), the result was the same.. @ramya-rao-a I tried - and also have \"can't load package\" error.. 1. Output pane:\n```\nP:\\test>Finished running tool: C:\\Dev\\Lng\\Go\\bin\\go.exe build -i -o C:\\Users\\GREEN\\AppData\\Local\\Temp\\go-code-check /p/test/symlinktest\n can't load package: package /p/test/symlinktest: cannot find package \"/p/test/symlinktest\" in any of:\n    C:\\Dev\\Lng\\Go\\src_\\p_\\test\\symlinktest (from $GOROOT)\n    C:\\Users\\green\\go\\src_\\p_\\test\\symlinktest (from $GOPATH)\n```\n2. When I hover on tab in editor path looks ok (p:\\test\\symlinktest\\main.go) and it is physical file path. \n. As I wrote, there is no difference. If I open gopath/src/myfolder the error is the same. Also if I hover on tab in editor I have this same - physical file path. . ",
    "jeffhoye": "P.S. I'm a big fan of this project.  I've been developing in golang for 3 years and have worked with it in 4 IDEs.  Getting it up and debugging with vscode / vscode-go was so much easier, and worked better than anything else I could find!  . Here's a potential issue:\nSome projects are too big to be continuously compiled in a timely manner.  Therefore, when the user hits \"run (debug): all un-saved files are saved, and the build starts.\nIt would be handy to be able to return to launchService.ts whether the error was in \"attaching\" to the debug host (which should result in the modal popup) or whether there was a pre-launch failure and the error has already been reported to the user in a different way.  Perhaps this is already possible by returning an error in a pre-launch task?  Forgive me because I'm not very familiar with the debug pipeline.  . ",
    "mccolljr": "Out of curiousity, has this been addressed? Is this package going to move to github.com/mdempsky/gocode? Manually installing and switching to that fork of gocode stops the PANIC messages and gets me completion again. Even gocode's original author recommends switching to the fork, so I think this would be the right move. Or, at least provide a setting for which fork to use?. ",
    "localvar": "just FYI: To improve the performance of https://github.com/mdempsky/gocode, I create another temporary folk at: https://github.com/localvar/gocode. ",
    "murdho": "Build will be green after https://github.com/Microsoft/vscode-go/pull/1642 is applied.. Sorry, I haven't got time for updating the PR according to your feedback.\nWhen I get back to it at some point, I will reopen it or open a new PR with\na reference to this.\nCheers!\nOn Tue, 5 Jun 2018 at 20:47, Ramya Rao notifications@github.com wrote:\n\n@murdho https://github.com/murdho Reason for closing this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/1646#issuecomment-394799859,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AC3ldjRnp5K5slpbsYBHQgOcOPjpvLIhks5t5sQugaJpZM4TklIV\n.\n. \n",
    "oswee": "It's not about building or running. Code works well. It's about syntax highlighting when writing Go templates with inline css and js. In my case i use just template.html [.html extension].\nSimilar \"errors\" are applied by syntax highlighter when Go variables or functions are inlined into JS.\nWhile developing, IDE syntax highlighter sees current syntax as invalid CSS or JS, but after Go compilation that code has valid CSS and JS syntax, so there is no problem about running this code. Challenge is developing coz' i constantly see those syntax errors.\nHope i explained. :). ",
    "amkgo": "Both file type and language are \"HTML\". \nI just want to create a Go template file, which is HTML file with some Go template logic inside the file.\nWhat language and file type do you recommend in this case?. This is caused by using double quotation inside double quotation. It can be resolved by using back quote for the string literal.\n<li class=\"nav-item{{if eq . `home`}} active{{end}}\">. ",
    "3darcher": "GOPATH is set correctly. There are no details given when I hover on the error. .  Hovering over the text in the editor. No info popup. No errors listed anywhere. Just a red ~ under every f. I'm trying to learn to program in Go. I waisted to much time trying to get this plugin to work right that I wasn't actually programming, so I uninstalled it, and set vscode not to recommend it. I don't really care what you think is possible and not possible, my objective is to code and not worry about the editor. Thanks for your help, but I'm moving on.. ",
    "petermbenjamin": "Hi @ramya-rao-a,\nThank you for your response. \nThe in-editor suggestion works great when I\u2019m writing a new function. But, When reading code, it would be a lot more convenient to display the signature of the function under the cursor in the status bar without having to press key combinations. \nAnother minor issue with in-editor function signature is that long signatures are truncated and I would have to invoke the same key combinations again to pop the signatures out to a separate little widget.  . Thanks @ramya-rao-a. I wasn't aware that the Show Hover (default \u2318K+\u2318I) was an exposed API that can be bound to keyboard shortcuts. This certainly helps a little. \nI was doing something similar with CTRL + SPACE (intellisense), which leads me to...\n\nAnother minor issue with in-editor function signature is that long signatures are truncated\n\nWhat I meant was the intellisense autocompletion truncates long function signatures:\n\nwhich forces me to press CTRL + SPACE again to expand it:\n\nI will give the Show Hover feature a try, although I slightly dislike that the modal covers text behind it:\n\nThank you for the help.. ",
    "qtstc": "Seeing a similar problem in an existing Golang project today. vscode-go version is 0.6.79.. ",
    "moxuz": "I've also noticed that a lot of times after a bunch of errors in the output my cmd+click will no longer work, and I have to close/re-open VSCode for it to start working again.\nAfter these errors I was no longer able to cmd+click to go to the definition of anything in my file (even if the variable was defined a few lines up)\n```jsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for unknown file \"file:///Users/christophepouliot/go/src/github.com/moxuz/price-protection-notifier/check/parse.go\"\njsonrpc2 handler: notification \"textDocument/didChange\" handling error: received textDocument/didChange for unknown file \"file:///Users/christophepouliot/go/src/github.com/moxuz/price-protection-notifier/check/parse.go\"\n[Error - 4:41:31 PM] Request textDocument/documentSymbol failed.\n  Message: /Users/christophepouliot/go/src/github.com/moxuz/price-protection-notifier/check/check.go:34:10: expected ';', found 'IDENT' nil (and 9 more errors)\n  Code: 0 \n[Error - 4:41:38 PM] Request textDocument/documentSymbol failed.\n  Message: /Users/christophepouliot/go/src/github.com/moxuz/price-protection-notifier/check/check.go:34:10: expected ';', found 'IDENT' nil (and 10 more errors)\n  Code: 0\n```\nAfter restarting VSCode it works again. ",
    "douglascamata": "Need help to make this conditional based on the golang version as it breaks compatibility on Golang version < 1.10. \nEDIT: oh well, it seems like a lot of stuff breaks on the change. Better keep the current version maybe.... Will work more on this and reopen later.. ",
    "marsp0": "I am having the same issue and it started out of nowhere today.\nOS : elementaryOS\nVSCode : \n- Version 1.23.1\n- Commit d0182c3417d225529c6d5ad24b7572815d0de9ac\n- Date 2018-05-10T16:04:33.747Z\n- Shell 1.7.12\n- Renderer 58.0.3029.110\n- Node 7.9.0\n- Architecture x64\nVSCode-Go : 0.6.80\n. ",
    "ghuser404": "Like so: \"go.toolsEnvVars\": { \"GOARCH\": \"arm\", \"GOOS\": \"linux\" }. ",
    "bGN4": "same problem, after update to new version.. ",
    "0x5010": "\nsame problem,  go extension (0.6.83). ",
    "cassiobock": "Hi @ramya-rao-a,\nThanks for the heads up. I will definitely take a look later today.. Hey @lggomez, feel free to take a look.. ",
    "chuacw": "When working on a project, if you use a package (A) that uses version 1 of an external dependency (B), but the latest for B is version 3, and B declares a function that requires a struct/or anything in B1, then A won't compile, as it's using B3, until you use Govendor to flatten the external dependency B1 into the vendor directory that A can use.  Go's compile logic causes it to look in the vendor directory first for external dependencies first before looking elsewhere in order to satisfy the package imports.\nPlease see https://stackoverflow.com/questions/35999046/vendoring-in-go-1-6 and https://github.com/kardianos/govendor .. Thanks, Ramya. Please point me to the resources, I can investigate if I can do this.. ",
    "tristan957": "I'll give that a go later today @ramya-rao-a . I reached out on slack but have so far been unsuccessful. ",
    "bojand": "The upgrade fixed it. I looked into delve issues a few days ago when I originally encountered the issue, but i do not think it was created at that time. Thanks for your assistance.. ",
    "nutmix": "That fixed it, thanks.  I had installed go from the marketplace, but I guess this is not sufficient.. ",
    "golangci": "@pdf thank your for pull request!\nWe've made some small improvements, please close this PR and let's continue in https://github.com/Microsoft/vscode-go/pull/1693. ",
    "wolfeidau": "@ramya-rao-a Tested out revive and made a PR just for some README updates #1703\nIntegration worked great once it was correctly configured.. @mgechev are you going to fix this feedback so we can try it out?\nKeen to use this!\nCheers. @ramya-rao-a Just been testing out the beta plugin and as per @alecthomas auto complete doesn't seem to be working for stdlib. I uploaded a repo https://github.com/wolfeidau/test-gocode hope that helps.\ngo version\ngo version go1.11 darwin/amd64. @ramya-rao-a I have tried doing as you instructed. \nOpen main.go and add a line with base64.anything(), then save the file, then remove .anything() and type something else and I still get.\n```\n2018/10/04 07:35:48 -------------------------------------------------------\npackage main\nimport \"encoding/base64\"\nimport \"github.com/sirupsen/logrus\"\nfunc main() {\n    logrus.Printf(\"logging\")\nbase64.#\n\n}\n2018/10/04 07:35:48 -------------------------------------------------------\ngo list stderr <<# main.go\n./main.go:8:2: undefined: base64\n\n\n2018/10/04 07:35:48 Elapsed duration: 150.517592ms\n2018/10/04 07:35:48 Offset: 0\n2018/10/04 07:35:48 Number of candidates found: 0\n2018/10/04 07:35:48 Candidates are:\n2018/10/04 07:35:48 =======================================================\n```\n\n\nI started digging into the fork which @stamblerre is currently maintaining, then quickly got lost in the go tools packages adding printf statements.\nWe really need to know where gocode-mod is looking for things, we only know what it found at the moment..\nIt would be amazing if there was a bit more tracing in the gocode-mod and more importantly the underlying libraries / routines as they don't give up their secrets willingly :) \nI have updated the readme in my with my go env https://github.com/wolfeidau/test-gocode repo. . @stamblerre This is where my things are, it is a fairly vanilla install.\n$ go env | egrep 'GOROOT|GOPATH|GOMOD'\nGOPATH=\"/Users/markw/go\"\nGOROOT=\"/usr/local/Cellar/go/1.11.1/libexec\"\nGOMOD=\"/Users/markw/Code/notgopath/test-gocode/go.mod\"\nHere is the output of go list as requested.\n{\n    \"Dir\": \"/Users/markw/Code/notgopath/test-gocode\",\n    \"ImportPath\": \"main.go\",\n    \"Name\": \"main\",\n    \"Target\": \"/Users/markw/go/bin/main.go\",\n    \"Module\": {\n        \"Path\": \"main.go\",\n        \"Main\": true,\n        \"Dir\": \"/Users/markw/Code/notgopath/test-gocode\",\n        \"GoMod\": \"/Users/markw/Code/notgopath/test-gocode/go.mod\"\n    },\n    \"Match\": [\n        \".\"\n    ],\n    \"Stale\": true,\n    \"StaleReason\": \"not installed but available in build cache\",\n    \"GoFiles\": [\n        \"main.go\"\n    ],\n    \"CompiledGoFiles\": [\n        \"main.go\"\n    ],\n    \"Imports\": [\n        \"github.com/sirupsen/logrus\"\n    ],\n    \"Deps\": [\n        \"bufio\",\n        \"bytes\",\n        \"encoding\",\n        \"encoding/base64\",\n        \"encoding/binary\",\n        \"encoding/json\",\n        \"errors\",\n        \"fmt\",\n        \"github.com/sirupsen/logrus\",\n        \"golang.org/x/crypto/ssh/terminal\",\n        \"golang.org/x/sys/unix\",\n        \"internal/bytealg\",\n        \"internal/cpu\",\n        \"internal/poll\",\n        \"internal/race\",\n        \"internal/syscall/unix\",\n        \"internal/testlog\",\n        \"io\",\n        \"log\",\n        \"math\",\n        \"math/bits\",\n        \"os\",\n        \"reflect\",\n        \"runtime\",\n        \"runtime/internal/atomic\",\n        \"runtime/internal/sys\",\n        \"sort\",\n        \"strconv\",\n        \"strings\",\n        \"sync\",\n        \"sync/atomic\",\n        \"syscall\",\n        \"time\",\n        \"unicode\",\n        \"unicode/utf16\",\n        \"unicode/utf8\",\n        \"unsafe\"\n    ]\n}. ",
    "mgechev": "Sounds good! I'm already using it in my project:\n\nWould definitely verify again once you share the steps.. @ramya-rao-a verified that everything works as expected. Tested the config file as well \ud83d\udcaf . Just updated the readme & tested the ${workspaceRoot}/${workspaceFolder} support locally. Everything seems to be functioning correctly.. ",
    "mhr3": "@ramya-rao-a Could you review please?. Thanks for the review, and the refactor ;)\n\nWe have to pass -run ^$ even if test.Functions array is empty. Otherwise all tests will be run\n\nThat was intended, with -run ^$ none of the tests will run - including the ones that invoke suite.Run(...). Ideally we'd analyze the code deeper and match which Test function contains the necessary Run call, but that sounded like an overkill to me, you probably aren't mixing suite and non-suite tests in a single package - and even if, we'd just end up running more tests than necessary, which shouldn't be a big deal.. Yes, I get what you're saying, but if we ran with -run ^$ -testify.m ^TestFoo$, nothing would actually run, cause testify relies on something invoking the suite.Run().. Pushed the changes you requested, have another look please. @ramya-rao-a Anything still missing here?. Ok, refactored per your comment.. Still having a problem with this, even with 0.6.91, does the fix only work with module-based projects or something like that? (also, AFAICT this broke after updating vscode itself, not the extension). @MathiasGr No, didn't change the default of that setting.\nMy test files generally have this in them:\n```\nimport (\n    ...\n    \"github.com/stretchr/testify/suite\"\n)\ntype wubsSuite struct {\n    suite.Suite\n```\nSo, it is imported directly. Sorry, missed that it's now required to set includeImports to true for this to work. And it indeed does after changing it.. How do I get the beta? The link you posted points to this issue.... Thanks, and yep, works fine with the beta, even without includeImports.. I can confirm the same jumping into gopark, in a codebase not using go modules. Also the jump is super fast... but also super distracting.. Looks like this is related to #2180 and #2194 . I'd be also interested in a way to disable the global variables when using the \"Debug test\" code lens.. +1 mostly about the \"Go to definition\" being incredibly slow recently, any tricks to make that better?\nOur project (gvt-based, no go mod) is pretty big and sometimes it used to take ~5seconds to find the definition, but now it sometimes works, other times it just spins for over a minute... (by which time I usually just quit vscode). Changed, clearly this isn't going to work in 100% of cases, but should be close enough.. ",
    "alex-kovoy": "how can i disable now this new default behavior? You cannot run any tests now without this required framework. It looks like this implementation is based on string parsing (regex) in order to determine if this framework is installed which I am not sure is the right way to implement this feature. Removing this line https://github.com/Microsoft/vscode-go/pull/1707/files#diff-869d156f8d53e34e379625eb2aab2d2cR293 fixed my problem.  . When from vscode, I run the tests in package/file by triggering vscode command: F1 -> Go: test file. Upon executing this command, the extension would run the golang tests with stretchr/testify flags instead of using default golang flags for running the tests in the file.\n\nI tried using go test -check.f but I keep getting flag provided but not defined: -check. Am I missing something?\n\nYou can do it with go test -check.f=TestMyFunction . Here is more info . ",
    "FrontMage": "```\npackage main\nfunc main() {\n    a := 1\n}\n```\nI'm opening this with vscode and vscode go, and no errors pops up.\n@ramya-rao-a . Never mind, after the 4th June 2018 update, it works. Closing it.. ",
    "crny": "go version 1.10.2\ni have installed  go extension.\nvscode console not errors.\ngocode debug log\n`\n018/06/05 10:23:56 Go project path: ws\n2018/06/05 10:23:56 Got autocompletion request for '/Users/crny/go/src/ws/main.go'\n2018/06/05 10:23:56 Cursor at: 30\n2018/06/05 10:23:56 -------------------------------------------------------\npackage main\nfunc main() {\n        f#\n}\n2018/06/05 10:23:56 -------------------------------------------------------\n2018/06/05 10:23:56 Offset: 1\n2018/06/05 10:23:56 Number of candidates found: 3\n2018/06/05 10:23:56 Candidates are:\n2018/06/05 10:23:56   const false\n2018/06/05 10:23:56   type float32 built-in\n2018/06/05 10:23:56   type float64 built-in\n2018/06/05 10:23:56 =======================================================\n2018/06/05 10:23:57 Go project path: ws\n2018/06/05 10:23:57 Got autocompletion request for '/Users/crny/go/src/ws/main.go'\n2018/06/05 10:23:57 Cursor at: 33\n2018/06/05 10:23:57 -------------------------------------------------------\npackage main\nfunc main() {\n        fmt.#\n}\n2018/06/05 10:23:57 -------------------------------------------------------\n2018/06/05 10:23:57 Error parsing input file (inner block):\n2018/06/05 10:23:57  4:6: expected selector or type assertion, found ';'\n2018/06/05 10:23:57 extracted expression tokens: fmt\n2018/06/05 10:23:57 Offset: 0\n2018/06/05 10:23:57 Number of candidates found: 0\n2018/06/05 10:23:57 Candidates are:\n2018/06/05 10:23:57 =======================================================\n`. ",
    "CheyiLin": "Got the same issue today after I upgraded to vscode 1.24 and go extension 0.6.82 which is using mdempsky/gocode. (with golang 1.10.2)\nIt shows different behavior with nsf/gocode when you're typing dot . and expecting the auto-complete list.\nThe mdempsky/gocode debug output:\n2018/06/07 14:13:08 -------------------------------------------------------\n2018/06/07 14:13:08 Error parsing input file (outer block):\n2018/06/07 14:13:08  ... mycode.go:138:7: expected selector or type assertion, found ';'\n2018/06/07 14:13:08  ... mycode.go:141:2: expected ';', found 'if'\n2018/06/07 14:13:08 Elapsed duration: 129.0024ms\n2018/06/07 14:13:08 Offset: 0\n2018/06/07 14:13:08 Number of candidates found: 0\n2018/06/07 14:13:08 Candidates are:\n2018/06/07 14:13:08 =======================================================. @ramya-rao-a Sure, I'll do my best to provide reproducible sample. But after I switched back to nsf/gocode yesterday the auto-complete works as before normally.. ",
    "LiPengfei19820619": "@ramya-rao-a I met the same problem with go1.10.2/1.10.3 , vscode 1.24 insider, os win7/64bit.\nwhat sample code or other information would you need?\n. @ramya-rao-a the information is as follow, I hope they can help you, thanks.\n\n\nthe version of the Go Extension:\n   0.6.82\n2.the version of golang:\nC:\\Users\\lpf>go version\ngo version go1.10.3 windows/amd64\n\n\nthe gocode -s -debug outpu:\nMicrosoft Windows [\u7248\u672c 6.1.7601]\n\u7248\u6743\u6240\u6709 (c) 2009 Microsoft Corporation\u3002\u4fdd\u7559\u6240\u6709\u6743\u5229\u3002\n\n\nC:\\Users\\lpf>gocode close\n2018/06/10 08:06:12 dial tcp 127.0.0.1:37373: connectex: No connection could be made because the target machine actively refused it.\nC:\\Users\\lpf>gocode -s -debug\n2018/06/10 08:06:52 Got autocompletion request for 'd:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go'\n2018/06/10 08:06:52 Cursor at: 741\n2018/06/10 08:06:52 -------------------------------------------------------\npackage app\nimport (\n        \"chykj/collect-webapi/domain/position/card\"\n)\n// PositionCardService \u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\ntype PositionCardService struct {\n}\n// NewPositionCardService \u521b\u5efa\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\nfunc NewPositionCardService() *PositionCardService {\n        return &PositionCardService{}\n}\n// GetAll \u83b7\u53d6\u6240\u6709\u7684\u4eba\u5458\u5b9a\u4f4d\u5361\nfunc (s *PositionCardService) GetAll() []card.Card {\n        return positionCardRepository.GetAll()\n}\n// GetByID \u6839\u636eID\u83b7\u53d6\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) GetByID(id string) (card.Card, error) {\n        return positionCardRepository.GetByID(id)\n}\n// Add \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Add(card card.Card) error {\n        s#\n        return positionCardRepository.Add(card)\n}\n// Update \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Update(card card.Card) error {\n        return positionCardRepository.Update(card)\n}\n// Delete \u5220\u9664\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Delete(id string) error {\n        return positionCardRepository.Delete(id)\n}\n2018/06/10 08:06:52 -------------------------------------------------------\n2018/06/10 08:06:52 Elapsed duration: 3.0002ms\n2018/06/10 08:06:52 Offset: 0\n2018/06/10 08:06:52 Number of candidates found: 1\n2018/06/10 08:06:52 Candidates are:\n2018/06/10 08:06:52   var s PositionCardService\n2018/06/10 08:06:52 =======================================================\n2018/06/10 08:06:52 Got autocompletion request for 'd:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go'\n2018/06/10 08:06:52 Cursor at: 742\n2018/06/10 08:06:52 -------------------------------------------------------\npackage app\nimport (\n        \"chykj/collect-webapi/domain/position/card\"\n)\n// PositionCardService \u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\ntype PositionCardService struct {\n}\n// NewPositionCardService \u521b\u5efa\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\nfunc NewPositionCardService() *PositionCardService {\n        return &PositionCardService{}\n}\n// GetAll \u83b7\u53d6\u6240\u6709\u7684\u4eba\u5458\u5b9a\u4f4d\u5361\nfunc (s *PositionCardService) GetAll() []card.Card {\n        return positionCardRepository.GetAll()\n}\n// GetByID \u6839\u636eID\u83b7\u53d6\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) GetByID(id string) (card.Card, error) {\n        return positionCardRepository.GetByID(id)\n}\n// Add \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Add(card card.Card) error {\n        s.#\n        return positionCardRepository.Add(card)\n}\n// Update \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Update(card card.Card) error {\n        return positionCardRepository.Update(card)\n}\n// Delete \u5220\u9664\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Delete(id string) error {\n        return positionCardRepository.Delete(id)\n}\n2018/06/10 08:06:52 -------------------------------------------------------\n2018/06/10 08:06:52 Error parsing input file (outer block):\n2018/06/10 08:06:52  d:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go:28:4: expected selector or type assertion, found ';'\n2018/06/10 08:06:52  d:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go:29:2: expected ';', found 'return'\n2018/06/10 08:06:52 Elapsed duration: 20.0012ms\n2018/06/10 08:06:52 Offset: 0\n2018/06/10 08:06:52 Number of candidates found: 5\n2018/06/10 08:06:52 Candidates are:\n2018/06/10 08:06:52   func Add(card invalid type) error\n2018/06/10 08:06:52   func Delete(id string) error\n2018/06/10 08:06:52   func GetAll() []invalid type\n2018/06/10 08:06:52   func GetByID(id string) (invalid type, error)\n2018/06/10 08:06:52   func Update(card invalid type) error\n2018/06/10 08:06:52 =======================================================\n2018/06/10 08:07:07 Got autocompletion request for 'd:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go'\n2018/06/10 08:07:07 Cursor at: 741\n2018/06/10 08:07:07 -------------------------------------------------------\npackage app\nimport (\n        \"chykj/collect-webapi/domain/position/card\"\n)\n// PositionCardService \u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\ntype PositionCardService struct {\n}\n// NewPositionCardService \u521b\u5efa\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\nfunc NewPositionCardService() *PositionCardService {\n        return &PositionCardService{}\n}\n// GetAll \u83b7\u53d6\u6240\u6709\u7684\u4eba\u5458\u5b9a\u4f4d\u5361\nfunc (s *PositionCardService) GetAll() []card.Card {\n        return positionCardRepository.GetAll()\n}\n// GetByID \u6839\u636eID\u83b7\u53d6\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) GetByID(id string) (card.Card, error) {\n        return positionCardRepository.GetByID(id)\n}\n// Add \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Add(card card.Card) error {\n        p#\n        return positionCardRepository.Add(card)\n}\n// Update \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Update(card card.Card) error {\n        return positionCardRepository.Update(card)\n}\n// Delete \u5220\u9664\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Delete(id string) error {\n        return positionCardRepository.Delete(id)\n}\n2018/06/10 08:07:07 -------------------------------------------------------\n2018/06/10 08:07:07 Elapsed duration: 6.0004ms\n2018/06/10 08:07:07 Offset: 0\n2018/06/10 08:07:07 Number of candidates found: 2\n2018/06/10 08:07:07 Candidates are:\n2018/06/10 08:07:07   var positionCardRepository invalid type\n2018/06/10 08:07:07   var positionCardService PositionCardService\n2018/06/10 08:07:07 =======================================================\n2018/06/10 08:07:16 Got autocompletion request for 'd:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go'\n2018/06/10 08:07:16 Cursor at: 763\n2018/06/10 08:07:16 -------------------------------------------------------\npackage app\nimport (\n        \"chykj/collect-webapi/domain/position/card\"\n)\n// PositionCardService \u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\ntype PositionCardService struct {\n}\n// NewPositionCardService \u521b\u5efa\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u9886\u57df\u670d\u52a1\nfunc NewPositionCardService() *PositionCardService {\n        return &PositionCardService{}\n}\n// GetAll \u83b7\u53d6\u6240\u6709\u7684\u4eba\u5458\u5b9a\u4f4d\u5361\nfunc (s *PositionCardService) GetAll() []card.Card {\n        return positionCardRepository.GetAll()\n}\n// GetByID \u6839\u636eID\u83b7\u53d6\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) GetByID(id string) (card.Card, error) {\n        return positionCardRepository.GetByID(id)\n}\n// Add \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Add(card card.Card) error {\n        positionCardRepository.#\n        return positionCardRepository.Add(card)\n}\n// Update \u66f4\u65b0\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s PositionCardService) Update(card card.Card) error {\n        return positionCardRepository.Update(card)\n}\n// Delete \u5220\u9664\u4eba\u5458\u5b9a\u4f4d\u57fa\u7ad9\u670d\u52a1\nfunc (s *PositionCardService) Delete(id string) error {\n        return positionCardRepository.Delete(id)\n}\n2018/06/10 08:07:16 -------------------------------------------------------\n2018/06/10 08:07:16 Error parsing input file (outer block):\n2018/06/10 08:07:16  d:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go:28:25: expected selector or type assertion, found ';'\n2018/06/10 08:07:16  d:\\golang\\code\\src\\chykj\\collect-webapi\\app\\position_card_service.go:29:2: expected ';', found 'return'\n2018/06/10 08:07:16 Elapsed duration: 12.0007ms\n2018/06/10 08:07:16 Offset: 0\n2018/06/10 08:07:16 Number of candidates found: 0\n2018/06/10 08:07:16 Candidates are:\n2018/06/10 08:07:16 =======================================================\n. I have the same problem with 1.10 on Windows 7/amd64.. @ramya-rao-a \nHi. I cloned this repo, installed Go-latest.vsix. and then re-installed all the tools dependent, and re-build all the packages, but, autocomplete still doesn't work.\nmy go version is go version go1.10.3 windows/amd64.. @ramya-rao-a  thanks.\nI followed your instructions, but it still doesn't work.. @ramya-rao-a  I uninstalled and re-installed the lasted insider VSCode, installed the latest vscode-go extension, deleted the gocode src and bin, then install the tool.\nBut it still dosen't work in my desktop.\nOS: Win7 64 bit  VSCode: 1.26-insiders extension:G0 0.6.85\nThanks.. @ramya-rao-a HI,  I found something:\nWhen I need autocomplete, such as I input \"log.\" every time, two \"gocode.exe\" appeared in my \"Windows process explorer\", and more and more \"gocode.exe\".\nIf I execute \"gocode close\" in a command line window, all the \"gocode.exe\" processes are closed, the autocomplete list is appeared after \"log.\"!\nBut when I input another \"log.\", the autocomplete doesn't work, and two \"gocode.exe\" appeared in the \"Windows process explorer\".\nI am not sure if this could help you, Thanks.. @ramya-rao-a \nI found the gocode run in client mode by vscode are not closed, so there are more and more gocode processes every time I input \"log.\":\n\n. @ramya-rao-a HI, I added breakpoints in the line after p.on('error', err => {  and p.on('close', code => {.\nBut they are not triggered while debugging.\nBreakpoints in the line before p.on('error', err => { can be triggered.\nThanks.. ",
    "Undermove": "@ramya-rao-a \nI've tried this but it caused no effect :-(\ngo version go1.10.2 windows/amd64\nWindows 10x64\nExtension | Author (truncated) | Version\n-- | -- | --\nauto-close-tag | for | 0.5.6\nauto-rename-tag | for | 0.0.15\nGo | ms- | 0.6.82\nvs-keybindings | ms- | 0.2.0\ndebugger-for-chrome | msj | 4.6.0\n. ",
    "mikeholmesuk": "Hi @ramya-rao-a - thanks for getting back. You're quite right in that I'm running the program with the debugger rather than tests so what you say makes sense. What I was looking for was a way to define env vars in workspace settings and have them available for the debugger wherever that was running so for tests, or just running the program using a debugger or whatever.  Irrespective, if I can load values via the env stanza then that will work. Closing this issue. . ",
    "heeko": "\"useApiV1\": false is fixing the watch window for a \"classic\" run, but on my side the debug test codelens remain broken. Is there also a way to force that parameter for the debug test codelens?\nEDIT: I actually find a way to hack it, by editing the this.debugConfig in the goRunTestCodelens.js file and restarting vscode.. ",
    "rhullah": "This appears to be an ongoing issue with VSCode in general.  And it doesn't look like z-index would help as the images are applied as classes so the latest one replaces the existing (breakpoint) one.  It could be possible to have two images (for each color, total of four), one without the breakpoint and one with (CSS targeting both classes).  But the presence of the coverage SVG seems to also disable the ability to add breakpoints via the mouse (hover and click).  I haven't found the cause of why yet.. ",
    "freman": "Thanks @ramya-rao-a, I'll try to find something I need to interactively debug and test it out \ud83d\ude00 \nI did have to completely remove and re-install the plugin before it worked but...\n2018/06/12 09:56:19 debugger.go:404: cleared breakpoint: &api.Breakpoint{ID:1, Name:\"\", Addr:0x12a05fc, File:\"~/go/src/test/redis/main.go\", Line:170, FunctionName:\"main.main\", Cond:\"\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(0xc42065c480), LoadLocals:(*api.LoadConfig)(0xc42065c4b0), HitCount:map[string]uint64{\"1\":0x1}, TotalHitCount:0x1}\n2018/06/12 09:56:19 debugger.go:356: created breakpoint: &api.Breakpoint{ID:2, Name:\"\", Addr:0x12a05fc, File:\"~/go/src/test/redis/main.go\", Line:170, FunctionName:\"main.main\", Cond:\"i == 10\", Tracepoint:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(0xc42065c630), LoadLocals:(*api.LoadConfig)(0xc42065c660), HitCount:map[string]uint64{}, TotalHitCount:0x0}\n2018/06/12 09:56:37 debugger.go:513: continuing\n1\n2\n3\n4\n5\n6\n7\n8\n9\nYou have brought us so much joy! Thank you!. So, I'll be the first to admin, I've never used typescript before and my abuse of it is probably a reflection but I have a patch https://github.com/Microsoft/vscode-go/pull/1745 that is a start in a direction. It's not vendor aware but realistically your vendors are already in your workspace.\nHappy for tips to further develop it?. Hi @ramya-rao-a no reason really, I was just excited to be getting a feature that worked around the macos path selection box.\nIt did have the benefit of working no matter where one was in the file.\nI've taken your suggestion and expanded on it, it'll now use the current selected import line, or if the user has selected text it'll try to use that (reasoning being you might be importing foo/bar/package but it makes more sense to work in foo/bar)\nIt'll also try to prevent adding redundant workspaces, one future improvement I could see is removing redundant workspaces (ie you add foo/bar/package but then later add foo/bar it might be worth removing foo/bar/package automatically). Errm, I don't think I broke travis... did I?. @ramya-rao-a is there any way to trigger travis without pushing again?. Thanks @ramya-rao-a, I've addressed those, the original thought behind that loop is lost to time, I suspect I just didn't understand how that call worked. Hi @ramya-rao-a, @kaskavalci\nI propose the following patch, unless there's other magic in the plugin already.\n```ts\nif (selectedText.length > 0) {\n    let index = selectedText.indexOf('\"')\n    if (index > 0 && index < selectedText.length-1) {\n        selectedText = selectedText.substr(index)\n    }\nif (!selectedText.startsWith('\"')) {\n    selectedText = '\"' + selectedText;\n}\nif (!selectedText.endsWith('\"')) {\n    selectedText = selectedText + '\"';\n}\nimportPath = getImportPath(selectedText);\n\n}\n```\nI've tested the following:\n'some/path' => '\"some/path\"'\n'\"some/path' => '\"some/path\"'\n'some/path\"' => '\"some/path\"'\n'\"some/path\"' => '\"some/path\"'\n'thing \"some/path' => '\"some/path\"'\n'thing \"some/path\"' => '\"some/path\"'\n'import thing \"some/path\"' => '\"some/path\"'\nIt does fall apart if someone selects multiple lines... . @kaskavalci that's my favourite bit too, trust me after a week of playing with AWS import paths \ud83d\ude00. I had this problem on osx\nI had an extra / on my go.gopath in the user settings.\nDefinitely worth documenting this :D. @ramya-rao-a I can no longer replicate it but code completion wasn't working for anything other than stdlib until I removed that slash, now it seems I can have the slash on or off.. Absolutely. The easiest example that comes to mind.\nimport \"github.com/aws/aws-sdk-go/service/rds/rdsutils\"\nRealistically being able to select github.com/aws/aws-sdk-go and add that to the workspace is probably going to be what you want more than github.com/aws/aws-sdk-go/service/rds/rdsutils\n. True, I'll sort this out.. I can't remember if it did or didn't, I think my motivation was to let the user know why nothing happened. I can double check but I still think it's nice to let the user know that the workspace is already imported.\nIE: they try to add github.com/aws/aws-sdk-go/service/rds/rdsutils after having github.com/aws/aws-sdk-go loaded.\nIn an ideal world I'd actually make the workspace navigate/expand the path but I've no idea how to do this in vscode. Uh that's a bit of left over code, it probably wouldn't at this point, I'll remove that.. I double checked.\nAdding a subfolder of a folder in already in the work space just creates a new folder pointing to that subfolder in the workspace.\neg.\nif you already have github.com/aws/aws-sdk-go/ then activate the command on github.com/aws/aws-sdk-go/service/rds/rdsutils you end up with aws-sdk-go and rdsutils as workspace folders.\nIdeally I'd have it navigate to and highlight the added package but I have no idea how to do that.. ",
    "l33t0": "Thanks @ramya-rao-a works a treat!. ",
    "zugl": "Same problem on Windows 10/amd64.. @NerdsvilleCEO \nMy packages are compiled as I open each file. Don't know exactly what tool does that.\n@ramya-rao-a \nMy dependencies are in a separated path. This is my $GOPATH: A:\\go_vendor;B:\\go_code. So the vendor path comes before my main path.\nI'm still unable to get mdempsky/gocode to work, autocompletion only works with nsf/gocode.\nI've tried:\n\nUse a single-path GOPATH, as in: GOPATH=B:\\go_code; \nNew (clean) GOPATH and install tools directly from VS Code;\nNew (clean) GOPATH and manually install gocode with go get -u -ldflags -H=windowsgui github.com/mdempsky/gocode;\nDo all of above removing everything from $GOPATH/pkg beforehand;\nReinstalling Go extension.\n\nNothing works when using mdempsky/gocode.\nContext:\n\nWindows version: Win10 Pro 1803\nGo version: go1.10.3 windows/amd64;\nVS Code version: 1.24.1;\nGo extension version: 0.6.83.\n\nIf there is anything else I can try please let me know.. ",
    "critical": "I ended up reinstalling nsf/gocode after removing mdempsky/gocode and my intellisense works in VS Code as it should.... ",
    "ManuelBauer": "@ramya-rao-a \ngocode close and gocode exit didn't helped, because no service was found:\n./gocode close\n2018/06/10 20:29:34 rpc: can't find service Server.Exit\nBut when I executed bin/gocode -s -debug I got the following message, that the address is already in use. In my case there was an old gocode process running. After killing the process and restarting VS Code everything went back to normal and the code completion started working again \ud83d\ude03 \nbin/gocode -s -debug\n2018/06/10 20:31:32 listen unix /var/folders/7f/n0kwqvg54s72pmjdnn1xvr_c0000gn/T/gocode-daemon.manuel: bind: address already in use. ",
    "ddrake17": "@ramya-rao-a ok I tried running the json command as you suggested however gocode just hangs when I run gocode -f=json autocomplete main.go c152,  running  gocode -f=json -in=\"main.go\" autocomplete c152 with my exact example above works and I get good output:\n{\n    \"value\":  [\n                  0,\n                  [\n                      {\n                          \"class\":  \"func\",\n                          \"package\":  \"lib\",\n                          \"name\":  \"Do\",\n                          \"type\":  \"func()\"\n                      }\n                  ]\n              ],\n    \"Count\":  2\n}\nAlthough I deleted the gocode binary I never deleted the folder in $GOPATH/src and I see both the nsf folder and the mdempsky (I did at multiple times try deleting all $GOPATH/pkg folders). I'm going to try deleting these and the binary and reinstalling  . I deleted the nsf and mdempsky $GOPATH/src folders and checked but there were no $GOPATH/pkg folders. I think this may be related to the invalid type  as shown by @uudashr. Here's the gocode -debug -s output after deleting and reinstalling the mdempsky version and retrying autocompletion in VS code as suggested by @ramya-rao-a:\nFor a.: \n```\n2018/06/11 10:34:12 Got autocompletion request for 'c:\\Go\\workspace\\src\\lib\\cmd\\main.go'\n2018/06/11 10:34:12 Cursor at: 152\n2018/06/11 10:34:12 -------------------------------------------------------\npackage main\nimport \"lib\"\ntype abc struct {\n        t lib.T\n}\nfunc (a abc) do() {\n        // I have intellisense for a.t, but not for the Do function\n        a.#\n}\n2018/06/11 10:34:12 -------------------------------------------------------\n2018/06/11 10:34:12 Error parsing input file (outer block):\n2018/06/11 10:34:12  c:\\Go\\workspace\\src\\lib\\cmd\\main.go:11:4: expected selector or type assertion, found ';'\n2018/06/11 10:34:12 Elapsed duration: 2ms\n2018/06/11 10:34:12 Offset: 0\n2018/06/11 10:34:12 Number of candidates found: 2\n2018/06/11 10:34:12 Candidates are:\n2018/06/11 10:34:12   func do()\n2018/06/11 10:34:12   var t invalid type\n2018/06/11 10:34:12 =======================================================\nFor `a.t.`:\n2018/06/11 10:36:12 Got autocompletion request for 'c:\\Go\\workspace\\src\\lib\\cmd\\main.go'\n2018/06/11 10:36:12 Cursor at: 154\n2018/06/11 10:36:12 -------------------------------------------------------\npackage main\nimport \"lib\"\ntype abc struct {\n        t lib.T\n}\nfunc (a abc) do() {\n        // I have intellisense for a.t, but not for the Do function\n        a.t.#\n}\n2018/06/11 10:36:12 -------------------------------------------------------\n2018/06/11 10:36:12 Error parsing input file (outer block):\n2018/06/11 10:36:12  c:\\Go\\workspace\\src\\lib\\cmd\\main.go:11:6: expected selector or type assertion, found ';'\n2018/06/11 10:36:12 Elapsed duration: 3ms\n2018/06/11 10:36:12 Offset: 0\n2018/06/11 10:36:12 Number of candidates found: 0\n2018/06/11 10:36:12 Candidates are:\n2018/06/11 10:36:12 =======================================================\n```\nI'll try using the nsf version next as suggested by @MintyOwl. Confirmed, switching to nsf version worked for me as well. FWIW I used the instructions at the github.com/nsf/gocode repository to install on Windows by running go get -u -ldflags -H=windowsgui github.com/nsf/gocode\nLet me know if you need more info. Thanks!. @ramya-rao-a  I followed your instructions and I still see the invalid type problem. In the bug report I completely removed VS code and all it's data and gocode (except the $GOPATH/src) and I'm still having this issue so I don't think it's related to stale state. \nEDIT: After checking the JSON output from mdempsky/gocode after running those instructions this looks like a vscode-go issue. With the same example above and typing a. I see this:\nPS C:\\Go\\workspace\\src\\lib\\cmd> gocode -f=json -in=\"main.go\" autocomplete c152 | ConvertFrom-Json | ConvertTo-Json\n{\n    \"value\":  [\n                  0,\n                  [\n                      {\n                          \"class\":  \"func\",\n                          \"package\":  \"\",\n                          \"name\":  \"do\",\n                          \"type\":  \"func()\"\n                      },\n                      {\n                          \"class\":  \"var\",\n                          \"package\":  \"\",\n                          \"name\":  \"t\",\n                          \"type\":  \"lib.T\"\n                      }\n                  ]\n              ],\n    \"Count\":  2\n}\nPS C:\\Go\\workspace\\src\\lib\\cmd>\nNote that the type is properly recognized. In VS Code however I see this:  \n\nWhat are the implications of using nsf/gocode with Go 1.10? It seems to be working for some of us. I am not using dep. I checked with nsf gocode and vendored dependencies are working; that is if I go into a package I've downloaded (go get) with a vendor folder and try to edit it's source code I do \nget auto-completions for those packages. @NerdsvilleCEO I think VS code/Go (in whatever way it creates .a files for all packages) is compiling the .a file inside of a vendor folder of the package whose source code I'm editing; I see the file there. \nStill not sure what the implications are of using nsf gocode but it is actually working and does not give the invalid type problems that I see with VS code when using mdempsky  . I can confirm my example in this issue is fixed with  Go-0.6.85-beta.2.vsix. Noticed the slow completes and switched to golangcli-lint as well. I see the incorrect/too many recommendations as well so definitely awaiting that PR. \n@ramya-rao-a  should the default lint program be switched?\nThanks everyone!!!. @Strum355  I was using golint and it was slow. . Didn't know about those settings. I tried both and either one will make things work, thanks!\nIt would be cool if VS code automatically detected tags, but perhaps that's too much to ask for :). ",
    "NerdsvilleCEO": "@ramya-rao-a I am noticing that even with the workaround above, in Mac, I can complete stdlib, but can't complete dep installed libraries (vendored dependencies)... I think it is an upstream issue with https://github.com/mdempsky/gocode\nCan you verify it works for you with dep installed dependencies\nI verified that it works for globally installed dependencies. UPDATE: I found the issue with dep installed dependencies, gocode has an experimental feature to auto-compile the dependencies if they aren't compiled, this was user error on my end\nFor anyone else running into this, all you need to do is run:\ngocode set autobuild true\nI would personally say this issue can be closed, I think everything is good now \ud83d\udc4d . I am curious as to how you have dep installed dependencies working... It doesn't work for me until I tell gocode to auto compile dependencies because dep doesn't create the .a files necessary for autocompletion. ",
    "PaluMacil": "I'm not using dep, but I'm still unable to use this plugin since the update to mdempsky/gocode. I went through the instructions, but I get\nInstalling gocode aborted as existing process cannot be closed. Please kill the running process for gocode and try again.\nInstalling github.com/mdempsky/gocode SUCCEEDED\nInstalling github.com/uudashr/gopkgs/cmd/gopkgs SUCCEEDED\nand then no more output. Before and after running this, I confirmed that there is no process for gocode running. If I try to run close or exit, I get 2018/06/18 14:10:00 dial tcp 127.0.0.1:37373: connectex: No connection could be made because the target machine actively refused it.\nI have even tried manually deleting gocode and running go get -u github.com/mdempsky/gocode to be absolutely sure that's the one installed. I'm on Go 1.10.3, vscode-go 0.6.83, VS Code 1.24.1, and Win 10.. hmmm, @m90 good call on that tip! I missed that and I am now pretty sure it's working. I was able to reference another project and get autocomplete. I now tested the vscode command to reinstall all the tools and am halfway through with all success so far, so it looks like I'm unstuck! Thanks for the help.. @waylandc I'm not sure you still need to use that option since the 0.6.85 final has been released and you can update in the normal way now. I have been trialling Goland, so I haven't tested the release yet, but I don't think the beta still needs to be tried. I do recommend reinstalling the Go tools though after you update the extension to 0.6.85.. Looks like it's working better now. (Windows 10, Go 10.3, latest extension and VS Code). It looks like gocode expects you to have dependencies installed (go install or go get) so you might have to install the vendored dependencies. I'm not sure how it deals with those, but a safe bet is going into each folder and installing.. ",
    "MrTravisB": "EDIT: I spoke too soon. Don't do much work with Go on the computer I thought was working. Today I did and discovered it isn't actually working. Also got error about extension host failing.. I believe this is more about the gotools that are run. Everytime I save a file I see the various tools show up in the top of CPU usage.. ",
    "amsokol": "It works. Thanks!. Go-0.6.85 + latest mdempsky/gocode = everything is working fine (Win10 x86_64).\nLooks like issue is to be close.\n@ramya-rao-a thank you very much!. @Strum355 \nYes, I had the slow autocomplete also. I fixed it:\n1) I have updated all tools via \"Go: Install/Update Tools\"\n2) I use \"golangci-lint\" as go.lintTool instead of gometalinter (it eats all my CPU - it's the reason of slow autocomplete for me)\n. @Strum355 You right - I have the issue with incorrect/too many recommendations also (((. @Strum355 thanks!. Hi,\nI have the same problem with Windows 10 and go 1.11rc1.\nGo tests output:\n```\nRunning tool: C:\\Bin\\go1.11beta3\\bin\\go.exe test -coverprofile=C:\\Users\\amsokol\\AppData\\Local\\Temp\\go-code-cover -timeout 30s github.com\\amsokol\\go-errors\nok      github.com/amsokol/go-errors    0.248s  coverage: 100.0% of statements\nSuccess: Tests passed.\nC:\\Users\\amsokol\\AppData\\Local\\Temp\\go-code-coveris:\nmode: set\ngithub.com/amsokol/go-errors/error.go:10.31,12.2 1 1\ngithub.com/amsokol/go-errors/error.go:16.52,18.2 1 1\ngithub.com/amsokol/go-errors/verifier.go:6.48,8.17 1 1\ngithub.com/amsokol/go-errors/verifier.go:12.2,12.11 1 1\ngithub.com/amsokol/go-errors/verifier.go:8.17,10.3 1 1\ngithub.com/amsokol/go-errors/verifier.go:12.11,14.3 1 1\ngithub.com/amsokol/go-errors/verifier.go:20.69,22.17 1 1\ngithub.com/amsokol/go-errors/verifier.go:26.2,26.11 1 1\ngithub.com/amsokol/go-errors/verifier.go:22.17,24.3 1 1\ngithub.com/amsokol/go-errors/verifier.go:26.11,28.3 1 1\ngithub.com/amsokol/go-errors/wrapper.go:10.41,12.2 1 1\ngithub.com/amsokol/go-errors/wrapper.go:16.62,18.2 1 1\n```. Update:\ncoverage decorator WORKS FINE with go1.10.3 windows/amd64\nIt does not work with go1.11rc1 windows/amd64. Update:\nCode coverage decorator does not work for go1.11 windows/amd64 (Win10).\n. ",
    "waylandc": "@ramya-rao-a I've tried downloading the Go-0.6.85-beta.2.vsix file using browser and kept getting\n\u03bb code --install-extension Go-0.6.85-beta.2.vsix\nImplement me. Unknown stdin file type!\nSo I cloned the repo, switched to source branch but don't see the file.\n`C:\\Users\\Wayland\\Downloads\\vscode-go (source)\n\u03bb git checkout source\nAlready on 'source'\nC:\\Users\\Wayland\\Downloads\\vscode-go (source)\n\u03bb git branch\n  master\n* source\nC:\\Users\\Wayland\\Downloads\\vscode-go (source)\n\u03bb dir *.vsix\n Volume in drive C has no label.\n Volume Serial Number is A293-52EC\nDirectory of C:\\Users\\Wayland\\Downloads\\vscode-go\n07/28/2018  03:51 AM         6,194,753 Go-latest.vsix\n               1 File(s)      6,194,753 bytes\n               0 Dir(s)  191,098,720,256 bytes free\n`. @PaluMacil Thanks! I didn't realize the Go-latest.vsix file was so recent and is the 0.6.85 final. Installed that and things are looking good now.\n`\u03bb code --install-extension Go-latest.vsix\nExtension 'Go-latest.vsix' was successfully installed!`. ",
    "MattiaCostamagna": "Hi,\nis this update working for linux too? I'm on Ubuntu 18.04 and I see no difference with the autocompletion. I have another PC with Windows 10 and it's all working nicely.\nI've just run Go: Install/Update Tools and selected all the packages, I've also tried to delete everything related to mdempsky/gocode in my $GOPATH, but it keeps not working with custom packages.\nCould it be related to the fact that I'm not working in my $GOPATH, but in another directoy? (I've set go.inferGopath to true, so I'm not getting any errors).\nThank you!. @ramya-rao-a  Hi, I solved my problem and it wasn't related to vscode-go: I messed up with my vscode user settings so that it didn't autocompile my packages automatically, thus the intellisense could not work. After some cleaning up I had a problem with cgo which couldn't run due to a read-only filesystem caused by my snap installation. I just did what is suggested in this comment and everything is working nicely.\nThank you again!. Hi @ramya-rao-a \nthis is the output of \"go version\"\ngo version go1.11.2 linux/amd64\nSetting package in go.buildOnSave didn't make any difference.\nI don't know if the project I'm working on is big (it's actually my first real project using Go), the compiled program is 6 and a half MB, but I tried the same in a small program with just a fmt.Println(\"Hello world\") and a syntax error, but nothing happens.. Here's a sample code with a syntax error that is not linted:\n```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"Hello world\")\n    this is a syntax error\n}\n```\nIn the developer tools I can see the following errors:\n- expected ';', found is\n- expected '}', found 'EOF'\nbut none of them appears in the problems tab.\nMy project is not located under my GOPATH, if I run Go: Current GOPATH I see /path/to/my/project:/path/to/my/real/gopath, which I guess is correct since I've set inferGopath to true (setting it to false doesn't change anything). \nvscode-go tools are located under my real GOPATH of course.\n. Hi!\nI did what you asked. Here's the screenshot\n\nEvery time I saved the file, it writes those 3 lines and then nothing else.\nI tried doing the same test under my GOPATH, but the result is the same:\n\n. @ramya-rao-a you're right, I installed Go using snap, and it created the following symlinks\n\nAfter trying to install Go manually I can now see the expected syntax errors! \nThanks a lot for your support!\nI suppose it would be nice to have it working for snap users, but it's not probably an issure related to vscode-go.. ",
    "Ankur10gen": "@PaluMacil not working for me on MacOS with Go 10.3, latest VS Code and latest extension :(\nIt shows the variable as \"invalid type\" and doesn't suggest any methods on this variable. \ngocode -s -debug also doesn't suggest anything meaningful. @ramya-rao-a mdempsky package is not under GOPATH/pkg but it is present under src. Do you think #24360 could be related? . @ramya-rao-a confirmed: gocode binary has the current timestamp after install but not working.. ",
    "SpencerMacKinnon": "I'm still seeing this on OSX 10.13.5, VS Code 1.26.0 4e9361845dc28659923a300945f84731393e210d x64, Go extension 0.6.88, golang 1.10.3. I delete the gocode binary from bin (nothing in src or pkg under mdempsky for that), verify the timestamp on the binary is new after running the package install, and I still seem to get the issue. When I run gocode in server / debug mode, it outputs:\n2018/08/16 20:27:25 Error parsing input file (outer block):\n2018/08/16 20:27:25  .../streamLogger_test.go:12:12: expected selector or type assertion, found ';'\n2018/08/16 20:27:25  .../streamLogger_test.go:13:2: expected ';', found 'IDENT' LogInfo\n2018/08/16 20:27:25 Elapsed duration: 11.837542ms\n2018/08/16 20:27:25 Offset: 0\n2018/08/16 20:27:25 Number of candidates found: 0\nI think the ';' is something it does to work with vendored packages? (The function I'm trying to auto-complete is in this repository however)\nIf I type it out manually I can build / test with no problems.. The dependency is just a file one directory above, in the same repository. I know that they're different packages from go's perspective, but go get or go install don't seem to have any effect.. Looking in my package directory, it does look like I have the pkg file, telemetry.a. Here is the output of gocode when I run in debug / server:\n```\n2018/08/20 17:19:34 =======================================================\n2018/08/20 17:19:36 Got autocompletion request for '/Users/spencer.mackinnon/code/src/Go/src//pwm/lib-telemetry/dependency/foo.go'\n2018/08/20 17:19:36 Cursor at: 125\n2018/08/20 17:19:36 -------------------------------------------------------\npackage foo\nimport (\n    telemetry \"/pwm/lib-telemetry\"\n)\nfunc DoWork(foo int) int {\n    return telemetry.#\n}\n2018/08/20 17:19:36 -------------------------------------------------------\n2018/08/20 17:19:36 Error parsing input file (outer block):\n2018/08/20 17:19:36  /Users/spencer.mackinnon/code/src/Go/src//pwm/lib-telemetry/dependency/foo.go:8:19: expected selector or type assertion, found ';'\n2018/08/20 17:19:36 Elapsed duration: 740.491\u00b5s\n2018/08/20 17:19:36 Offset: 0\n2018/08/20 17:19:36 Number of candidates found: 0\n2018/08/20 17:19:36 Candidates are:\n2018/08/20 17:19:36 =======================================================\n2018/08/20 17:19:36 Got autocompletion request for '/Users/spencer.mackinnon/code/src/Go/src//pwm/lib-telemetry/dependency/foo.go'\n2018/08/20 17:19:36 Cursor at: 176\n2018/08/20 17:19:36 -------------------------------------------------------\npackage foo\nimport /pwm/lib-telemetry\"\nimport (\n    telemetry \"/pwm/lib-telemetry\"\n)\nfunc DoWork(foo int) int {\n    return telemetry.#\n}\n2018/08/20 17:19:36 -------------------------------------------------------\n2018/08/20 17:19:36 Error parsing input file (outer block):\n2018/08/20 17:19:36  /Users/spencer.mackinnon/code/src/Go/src//pwm/lib-telemetry/dependency/foo.go:9:19: expected selector or type assertion, found ';'\n2018/08/20 17:19:36 Elapsed duration: 659.66\u00b5s\n2018/08/20 17:19:36 Offset: 0\n2018/08/20 17:19:36 Number of candidates found: 0\n2018/08/20 17:19:36 Candidates are:\n2018/08/20 17:19:36 =======================================================\n```\nAnd my source file:\n```\npackage foo\nimport (\n    telemetry \"/pwm/lib-telemetry\"\n)\nfunc DoWork(foo int) int {\n    return telemetry.\n}\n```\n. I completely uninstalled vscode and all extensions, then reinstalled vscode, the go extension, and ran the go extension command to install / update tools. Seemed to have done the trick this time and I'm getting autocomplete now. Thanks for the support :). ",
    "iamwwc": "I have solved this problem luckily..\nmy machine=> windows10 18.03 amd64\nI found there are gocode.exe and gocode.exe~ in GOPATH/bin/.\nIn my taskmgr, there is gocode.exe~ running, not gocode.exe\nso I kill gocode.exe~, delete both exe in bin/\nI also delete mdempsky folder in GOPATH/src/github.com/mdempsky\nfinally, after run\ngo get -u github.com/mdempsky/gocode\neverything worked!. my vscode config\n```golang\n{\n    \"window.zoomLevel\": 0,\n    \"explorer.confirmDelete\": false,\n    \"editor.fontSize\": 18,\n    \"files.autoSave\": \"afterDelay\",\n    \"sync.gist\": \"a9dd8aa86c49b35592d8607af4c67eba\",\n    \"sync.host\": \"\",\n    \"sync.pathPrefix\": \"\",\n    \"sync.quietSync\": false,\n    \"sync.askGistName\": false,\n    \"sync.removeExtensions\": true,\n    \"sync.syncExtensions\": true,\n    \"sync.autoDownload\": true,\n    \"sync.autoUpload\": false,\n    \"sync.lastUpload\": \"2018-08-26T03:18:49.481Z\",\n    \"sync.lastDownload\": \"\",\n    \"sync.forceDownload\": false,\n    \"editor.minimap.enabled\": false,\n    \"editor.renderWhitespace\": \"none\",\n    \"editor.renderControlCharacters\": false,\n    \"terminal.integrated.shell.windows\": \"C:\\WINDOWS\\System32\\cmd.exe\",\n    \"window.menuBarVisibility\": \"toggle\",\n    \"workbench.activityBar.visible\": false,\n    \"workbench.statusBar.visible\": false,\n    \"editor.multiCursorModifier\": \"alt\",\n\"html.format.preserveNewLines\": false,\n\"workbench.colorTheme\": \"Visual Studio Light\",\n\"workbench.colorCustomizations\": {\n    \"editor.background\": \"#f9f7f7\"\n},\n\n\"go.docsTool\": \"gogetdoc\",\n\"explorer.confirmDragAndDrop\": false,\n\"go.autocompleteUnimportedPackages\": true,\n\"go.useCodeSnippetsOnFunctionSuggest\": true,\n\n}\n```. sorry , that my fault. there must have a blank after import. @ramya-rao-a \n1. Yes, problem stills even in simple programs\nmy origin file have gone, but I have another codes, I think no difference between them.\nmain.go\n```golang\npackage main\nimport (\n    \"context\"\n    \"github.com/docker/docker/api/types\"\n    \"github.com/docker/docker/api/types/container\"\n    \"github.com/docker/docker/client\"\n    log \"github.com/sirupsen/logrus\"\n    \"io\"\n    \"os\"\n)\nfunc main() {\n    r := Record{}\n    dockerClient, err := client.NewClientWithOpts(client.WithVersion(\"1.38\"))\n    if err != nil{\n        log.Error(\"error when create dockerClient \",err)\n    }\nctx := context.Background()\n\ncontainer, err := dockerClient.ContainerCreate(ctx,&container.Config{\n    Image:\"golang\",\n    OpenStdin:true,\n    Tty:true,\n    AttachStdin:true,\n    Cmd:[]string{\"bash\",\"-c\",\"go build && go run\"},\n    Env:[]string{\"GOPATH=/go\",\n    \"PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n    \"GOLANG_VERSION=1.11\"},\n    AttachStdout:true,\n    AttachStderr:true,\n\n},nil,nil,\"\")\n\n\nif err := dockerClient.ContainerStart(ctx,container.ID,types.ContainerStartOptions{});err != nil{\n    log.Error(\"error when start container\", err)\n    return\n}\n\nreader, err :=dockerClient.ContainerLogs(ctx,container.ID,types.ContainerLogsOptions{\n    ShowStdout:true,\n    ShowStderr:true,\n})\n\nif err != nil{\n    log.Error(\"error when containerLogs\",err)\n}\n\ngo io.Copy(os.Stdout,reader)\n\n<- make(chan struct{})\n\n}\n```\ntest.go\n```golang\npackage main\n//Record is a test comment to test gogetdoc\ntype Record struct{\n}\n```\nbut if I remove all external lib, only import my lib in project, gogetdoc works very good.\n\n\nI cannot find enough gogetdoc cli doc, so I am not sure what I have done is right or not.\n\n\nwhen I run gogetdoc \ngogetdoc -pos main.go:#22\noutput is \ngogetdoc: no documentation found\n. @ramya-rao-a \nyes, it works when I try to get ContainerLogs docs\nas follows:\n```\nimport \"github.com/docker/docker/client\"\nfunc (cli *Client) ContainerLogs(ctx context.Context, container string, options types.ContainerLogsOptions) (io.ReadCloser, error)\nContainerLogs returns the logs generated by a container in an io.ReadCloser.\nIt's up to the caller to close the stream.\nThe stream format on the response will be in one of two formats:\nIf the container is using a TTY, there is only a single stream (stdout), and\ndata is copied directly from the container output stream, no extra multiplexing\nor headers.\nIf the container is not using a TTY, streams for stdout and stderr are\nmultiplexed. The format of the multiplexed stream is as follows:\n[8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}[]byte{OUTPUT}\n\nSTREAM_TYPE can be 1 for stdout and 2 for stderr\nSIZE1, SIZE2, SIZE3, and SIZE4 are four bytes of uint32 encoded as big endian.\nThis is the size of OUTPUT.\nYou can use github.com/docker/docker/pkg/stdcopy.StdCopy to demultiplex this\nstream.\n```\nBut everytime, it use so much time to get docs. \nI guess \n1. gogetdoc don't use cache to fetch same docs everytime for external library\n2. it not prefetch docs and store into cache when I import new external library. I don't think that will help.. \ngogetdoc repo's last commit is May 22. closed, waiting upstream solve this problem or waiting language server. ",
    "mawasak": "In my case I removed  last backslash  (\"\\\") from GOROOT and GOPATH environment variables to make it work.\n. ",
    "phenixrizen": "Completion of external packages was disabled in @mdempsky version of gocode because no caching was implemented: https://github.com/mdempsky/gocode/issues/32\nI've created a pull request with the caching and external packages enabled by default.  The pull request is here:  https://github.com/mdempsky/gocode/issues/48  Just waiting on him to merge it.. @ramya-rao-a  I'm not using module-aware mode. @ramya-rao-a for reference I've opened a issue on the gocode repo: https://github.com/mdempsky/gocode/issues/48. ",
    "lsytj0413": "use mdempsky/gocode instead of mdempsky/gocod solve my problem..  #1723 descripted the same problem, and the following worked for me:\n\ninstead nsf/gocode with github.com/mdempsky/gocode. \n",
    "andreagrandi": "gocode close (no exit available in 1.11 version) and reinstalling tools worked for me. Code completion is now working again. Before I could only see one entry which was PANIC. ",
    "weeezes": "Go 1.11 and VSCode 1.28.1, the Go extension installs two flavors of gocode:\n```\nInstalling 2 tools at <$GOPATH>/bin\n  gocode\n  gocode-gomod\nInstalling github.com/mdempsky/gocode SUCCEEDED\nInstalling github.com/stamblerre/gocode SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n```\nVSCode starts gocode-gomod, but that doesn't work. All it ever suggests is PANIC. Running gocode-gomod -s -debug outputs nothing. Removing gocode-gomod doesn't help, VSCode just starts to complain that gocode needs to be installed:\n\nTo provide auto-completions when using Go modules, we are testing a fork(github.com/stamblerre/gocode) of \"gocode\" and an updated version of \"gopkgs\". Please press the Install button to install them.\n\nSolution\ngocode-gomod close\ncd $GOPATH/bin\nrm gocode-gomod\nln -s gocode gocode-gomod\n:stuck_out_tongue: . ",
    "gencer": "On my case, after 5-10 minutes VSCode stops autocompleting. I had to restart VSCode workspace over and over again.\nI do not know if my case is related to this issue but it makes me nuts here. Every project, just 5 minutes then no autocomplete anymore. Either click few files and wait 1-2 mins. to go restart itself (i think thats what it does) or close and reopen project.. I'm on windows and this happens.. @ramya-rao-a, save or not. Anything outside of current file does not auto-complete. Only internal (core) is getting autocompleted. (Like ioutil, strings...)\nUpdate:\ngo-langserver works. I get all possible candidates for auto complete. However, gocode does not work. No matter what I do, it does not auto-complete anything in $GOPATH/src. Even I have a models dir in same app. It does not auto completes too.\nVSCode=1.29.0\ngocode=latest\ngo-langserver=latest\ngocode does not work and go-langserver consumes too much memory and intensive CPU. What am I going to use?\nUpdate 2:\nSee: https://github.com/mdempsky/gocode/issues/84. @ramya-rao-a, My issue is about generic autocomplete but not modules (so no *-gomod running). I will continue this issue on other repository. For now, I will follow there.. ",
    "jcalvarado1965": "Not sure if this is related to the above. For me (go 1.11, Windows 10) auto-complete is not working for any packages outside of GOROOT. Debugging gocode I traced the issue to importer.joinPath in importer.go. This function is converting underscores to dashes in the GOOS_GOARCH part of the path. It is not clear to me why this is being done, but causes the search for binaries to fail, as the directory in my case has underscores (i.e. pkg/windows_amd64). Can anybody shed some light as to why this conversion is being done (maybe I'm missing something obvious)?. ",
    "sphawk": "ok, I'll do it within a few days.. @ramya-rao-a I created pull request #1743, could you check it please?. I can't assume input string is single line. someone could use that function elsewhere.. sorry for late response, I'll remove m flag and add some tests within few hours. ",
    "mikegleasonjr": "Since it prevents further tools from installing, one can start gocode manually first, then re-issue the Go: Install/Update Tools command.\nAll the tools wil be installed/updated.. ",
    "kroppt": "@mikegleasonjr Yes, that workaround seems to work.. The portage ebuild just runs make.bash from source and copies the folders over (including bin). So, I think this is an issue with building from source.. ",
    "vladbarosan": "@lggomez I hope dont mind I refactored the existing code and reused the method you mentioned. @JacksonKearl  I hope you don't mind I updated the PR to the latest master and refactored it a little. @JacksonKearl , @ramya-rao-a , @jhendrixMSFT  if you can have a look since its a change that touches multiple parts. Still testing all the functionality touched. will update when im done. @ramya-rao-a @jhendrixMSFT @JacksonKearl everything touched seemed fine on testing, so if you want to double check, otherwise from my side I think its good to go.. @Ashiroq I have some fixes at https://github.com/Microsoft/vscode-go/pull/2281 , can you give me permission to push to your branch ? @jhendrixMSFT , @ramya-rao-a  ( getting permission denied when trying to push to the branch so assuming the permission was disabled ). @Ashiroq I managed to update the branch. @ramya-rao-a i tested the the suite scenario for both the codelens and the command and they work fine.. @jhendrixMSFT , @ramya-rao-a the metalinter test seems to be failing although from looking at it doesn't seem related to anything i've changed. Any idea why ?. @jhendrixMSFT doesn't seem to have helped :(. @jhendrixMSFT ok figured it out, it seems not only that the new version broke us but also the new install script version ( probably because it seems to be removing some checkers ). \nAs all our CI is blocked as of now, I locked to the previous script version for now and tracking the issue here https://github.com/Microsoft/vscode-go/issues/2292. Closing as I updated the original PR. @lggomez thanks for picking this up. Yes that is expected as strictNullChecks can presumably reveal issues in the code where there is an assumption that the values can't be undefined but they are.\nWe can do this in a couple of ways:\n1. Enable it and just where where there are issues override with ! . Pros: future code has this enabled, cons: We need to make sure we follow up fast so we don't stay trailing with those issues.\n2. Address all the issues when enabling. Might be some difficult cases where the assumptions are pretty deep backed in. Pro/cons opposite of previous.\nAlso we can leave that as a separate PR so we avoid the noise from the other changes since that one if we go with 2 will actually have functional changes not just type adjustments.\n@ramya-rao-a , @jhendrixMSFT , thoughts ? \n. @lggomez there is a fix in code review right now for that issue. Right now all CI is failing, will restart the build once that gets merged in.. Sorry for getting so late to this one guys, please have a look when you have time. @ramya-rao-a  so there are a couple of scenarios for which I think there are tracking issues:\n1. User starts delve with an executable that runs and finishes or some code that runs only once\n a.  in this case normally we can just halt and detach which would close the target and delve remotely ( so users would need to restart delve with the program )\n b. if delve is started with --accept-multiclient, we could actually restart without halting or detaching so then on new attaches the code is rerun.\n\nProgram starts and executes and we just \"attach\" and \"detach\". \n\nRight now we do for 1 the a option regardless of \"accept-multiclient\" and we don't support 2. but 1 would be easy to add if we want and 2 is doable also.\n@ramya-rao-a @jhendrixMSFT  I know for 2 there is an open issue, not sure if there is an ask for 1.b ?\nThoughts ? Otherwise let me know if this is good to go.. @ramya-rao-a @jhendrixMSFT  as a final thing to close this I added an extra delete if for some reason the file is still around. For htis I moved the fs-extra as a dependency ( instead of a dev dependency). Any issue with that? and in general, ill take the occasion to ask what is our policies on adding dependencies ( I saw they are fairly minimal right now ). . @ramya-rao-a , I was thinking of force removing directories but in this case is always a file so I can. Still the question regarding dependencies stands.. @jhendrixMSFT  @ramya-rao-a  sorry i got back late to this. I think I addressed the remaining comments.. @ramya-rao-a  but again reattaching in this scenario wont work unless delve is started with multiclient. @jhendrixMSFT  is working on the attach feature. I think it might even make sense to remove the remote debugging part from launch and just leave it for attach ( since we aren't really launching). ah yea, my bad :| , im being used to have only that option enabled, @ramya-rao-a  can we enable only squash merge on the repo ?. @ramya-rao-a , to make sure i understand, the issue is here when we do find all references in something coming from a dependency that is also used in other dependencies ? If that is the case I think a \"just my code\" option is strongly desired I would say, since most times I wont care where that something is used in any of the dependencies.  I think usually the case is to find where in my code is being used.. @ramya-rao-a  since Golang team itself only supports last 2 minor versions, whats our policy on this ? \nI left 1.10, but I removed 1.9 to not overload the CI. @kberlinquette  this is not a vscode-go issue, please open here only VS Code Go related issues. (FYI probably you want = and not - in your code) .. @kberlinquette this repository is for issues related to the VS Code Go extension( https://code.visualstudio.com/docs/languages/go)\nIf you are writing Go code using VS Code and are using this extension and find any problem with it open an issue here please.\nThis repo is NOT:\n - a forum for JS questions\n - a place for issues related in general to VS Code\nThanks and please be mindful of the above before opening any new issue.. nit: this can be a const.. actually weird that tslint doesnt warn on this. oh ok, I looked at the tslint.config, it seems some very old config, I guess we can make another PR to update that. since we are inside an async function I think we dont need then, i.e. we can do\nts\nconst result = await this.X()\nconst variable = this.delve.isApiV1 ? <DebugVariable>result : (<EvalOut>result).Variable;\nv.children = variable.children;\n. string interpolation ? ( ${code}texttext. const . nit: does it makes sense to extract the code for each of these cases in separate smaller functions ? . depends what you mean by fail. if it throws an error it will throw an error but that will be the same for then is you passed only the onFulfilled function. magic nr ? although i see its used in other places also, there is no constants for them ?. actually I think this one can be  just val => val. I was thinking, maybe its clearer if we extract this instead of an IIFE to be const in the method and then just call it ?. well if by fail you mean throw an error it will be the same thing(the default onRejection just throws up the error). Also FYI its deprecated as of now to have unhandled promise rejections and in the future it will cause the Node process to crash\nso in this case you can either wrap the await in a try catch block and do nothing in the catch or provide a onrejected method that does nothing. I mean i think its easier to read if we put on name on it, otherwise ill spend a while reading it to understand what exactly it does. @ramya-rao-a  yes it can ( e.g. if there is no suite method. but that will work as expected ( i.e. the regex wont match any suite since there is none). and the output will be a warning that no tests to run. \n\n. only thing that we might want to consider is on the CodeLens behavior in the following case:\n- User writes a test as part of a test suite but doesn't add the test which runs the suite.  Which would be more helpful, not to show anything in codelens or to show the codelens and when they run it to have the warning pasted above ( current behavior ) ? . or we could try to return a custom error that no test suite exists when the promise is created but that might give some superfluous warnings/errors messages until the write the test which contains the suite run.. where CurrentTestFunctionName is a test suite test ? same warning. Also FYI currently the same behavior is for just running the tests (no debugging). \nWe can open an issue for a better warning if there are test suite tests and no test that runs the test suite. On that either way we will need to decide if want the warning when creating the codelens or when someone actually clicks it.. @ramya-rao-a updated. @ramya-rao-a  here I have a question. previously the testConfig was saved to the global lastTestConfig without the isMod property. was that intentional or by accident ?. i presume it was intended to be saved since the call to running previous test used it. if so then its fine since i just made it immutable but still is saved ( otherwise it should be cloned instea of just assigned ). can we add an issue to enable the remaining checks for --strict ?. any reason to include this since we are compiling to es6 (es2015) already ?. oh realized it was not part of your change but shoudn't be any reason AFAIK to include this.\n\nIn reply to: 253675090 . >definitionInfo \nfrom the containing functions, isn't this type supposed to be :GoDefinitionInformation ?. same for the other ones in this file\n\nIn reply to: 253677626 . >any \nany[] ?. >ref \nthis seems to be to_method, to, from etc from below which are coming from a GuruImplementsOutput type, there is no type for those from there ?. >any \nseem to be string ?. nit would be good to add a type for this if the output is specified anywhere. uhh, i guess there is no type for these configs ? :( . >any \nsuggestion seems to be of type ExtendedCompletionItem ?. i guess needs a rebase on master since this is checked in ?. oh actually the fix was checked but this was commented out, all good then\n\nIn reply to: 253680465 . >let \nnit: prefer const. >any \nhmm why add any ? seems the resolved value to be FilePatch[]. FYI lib is just so TS works with features of the specified lib ( it doesnt affect the generated JS ), so in general if by removing it, the code compiles, should be fine. You can leave it as is now if you prefer.. yea that would be a pain, there has to be a way to type those without manually mantaining them consistent, ill go into it at one point, its fine for the scope if this PR.. in the previous logic it seems we continued with restart/detach if it failed for any other reason than that the debugged processed finished. It seems that we would want exactly the opposite, i.e. continue with detach if the proc already exited.  \nQuestion remains if we want to still continue (as we do today ) if halt fails from another reason than that of the debugged process being finished.. well kind of, based on the message, like the if that was before these changes. So thats pretty much what im asking, do we want to detach only when the target exited, or always when halt fails ( like I mentioned, today we do the exact opposite, we always detach EXCEPT if the target process exited ).\nTBF, not sure why we wouldn't try to detach always if halt fails, I assume there is no point in continuing to be attached, but maybe @ramya-rao-a  or you have more context if there is a reason not to.. so I included the detach request within the timeout so removing the extra killTree here. @ramya-rao-a  correct thats what we are saying. and to make sure we are on the same line, you are suggesting that : \n - if halt reports success -> then detach\n - if halt fails because target has exited -> then detach \n  - if halt fails because of whatever other reason -> doesn't really matter if we detach since it will fail but preferably not so we dont do an extra unnecessary operation . i think that might make sense, I think Delve in API mode can accept multiple clients, in that case I dont think we would want to restart it.. also, given those, does it even make sense to halt a remote program ? Seems that we are not responsible for managing the remote debugger or the remote target. So does it make sense to just detach for remote ?. @ramya-rao-a  the DocumentSymbol it wont accept null paramters for ranges ( i.e in needs ranges). . was this something we needed ? from what I could tell we were not actually skipping ranges in the provider. yes ( so in this case would look like the name and next to it the type ( e.g. package, function etc). also looking in go-outline, everything seems fine, but we stop only at the function level. do we own https://github.com/lukehoban/go-outline ? seems we could get more from the AST. well i think we need to detach, maybe im not familiar enough with the remote debugging and I need to try it . I thought delve is started outside our responsability already with a target program ? then do we really need to halt it from our side in that case ? . yes agree to detach, was saying we dont need to halt if the above mentioned are correct. So do we agree on the path forward here ?\nfor remote, don't even halt, just detach ? if so I can have a look see if everything goes well in that in this direction.. oh really ? that's a bummer, i would expect delve to allow you to detach without halting. ill have a look and see what we can do for remote. . @ramya-rao-a plain(named) functions can only be declared on the top level (last time I checked, I doubt anything changed in 1.12 ). \nYou can have anonymous functions declared and assigned to variables though\ngo\nfuncVar := func(arg string) {}\nbut this is not exactly the same thing.. well it seems we might be able to get more info from the AST, of things inside the functions, @jhendrixMSFT has more experience with the Go AST, he can confirm.. doesn't seem to be a way to avoid the ranges as it throws if those are null.. ehh to be fair i dont like at all checking the exited code. let me look a little if there is a better way to know this. I presume if it requires an extra call to the debug server is not the end of the world ?. yea, we clean it after halt, seems in some thread above we want that for halt failing . we are using this for the tests , so I think we still need it as a dev dependency. yes, good catch. @ramya-rao-a  thoughts ?. updated the logic, i think it should follow the conditions specified:\n1. cleartimeout after halt\n2. if localDebug && (halt fails because of anything else than target has exited || detach fails) => force kill  + force remove. @ramya-rao-a  yes I remember, let me test the behavior , and ill update. ",
    "Kabariya": "yes. I m sorry. I misunderstood go extension. Everything is okay :). ",
    "qzyse2017": "@matthewmueller could you describe your demand more specific with your directory structure and the path of your project? I would like to take this issue but it seems you just need to type in graphql.Query instead of github.com/matthewmueller/graphql.Query , the current implemantation in vscode -go extension which make use of impl seems to perform the same with github.com/matthewmueller/graphql.Query and  graphql.Query. If you put your project under $GOPATH directory, impl will automatically search it and you just need to type in the package name without its previous path if it is not ambiguous with another package. @matthewmueller I am doing it in a similar way to what you need.\nIt  just needs to \n1. select the reciever type name and use right click to choose the command Generate interface stub, the inputbox will have the t *typeReciever(something like it) auto completed \n2. type in the last arg: packageName.interfaceName(packageName here do not need its previous path) \n\nrelocate your cursor to find the correct place to insert and type in Enter in the inputBox to confirm the command,\n\nI think steps above can be used in more general conditions.\ncan you give me some more suggestions on making it more easier to use?. @ramya-rao-a Hi! I would like to issue a PR to fix this issue, but I am very confused about what the correct behaviour should be for \"Run building workspace command when editing a _test.go file\". And I found that the output talked above can't load package: package .: no Go files in /home/user/go/src  can also appear when use build workspace command in a directory opened in vscode which has no direct go files in it(the go files are in its subdirectories).\nIMHO\uff0cwhat about letting the behaviour for running build workspace with test files open be running go build ... directly for the workspace and I issued a PR to do that(see PR 1849 , I closed it myself for I am still not convinced I had done the right thing). @ramya-rao-a So it is, it needs go test to check there is no build error in \"_test.go  files\", \nSorry I had not read the code more carefully but I found if remove the !isTestFile (just like I did in the cloded PR), the command run will still be go test -c -i -o <output-here>, but it run the command for every package in the space, however, when adding !isTestFile, it will run go test -c -i -o <output-here> directly in the workspace(it will use the second return clause in the goBuild  function), so it will performed like the condition talked above.\nFor the parts\n\nAnd I found that the output talked above can't load package: package .: no Go files in /home/user/go/src can also appear when use build workspace command in a directory opened in vscode which has no direct go files in it(the go files are in its subdirectories).  \n\nIt can be confirmed by testing golang example directly in ~/go/src , download the zip and unzip it into ~/go/src/example and test it with build Workspace command with a *_test.go file open and it will go to execute go test -c -i -o <output-here> directly in the workspace, because it will not do this in per package, it will present no go files in the output.\nMaybe remove the !isTestFile  and let the condition talked above use the first return clause is the right solution?. Thanks a lot for your detailed explanation about the code's history!~\nYes, you 're right importPath is \"\" for eraserix's case.\nIt is a good solution to use go test -c ./..., it can also work for the condition I mentioned above~\ncan you give me more advice on how to issue a correct PR to let it cover these various conditions?. What about using the first  return clause(https://github.com/Microsoft/vscode-go/blob/master/src/goBuild.ts#L91) for both conditions about test and build, in fact, remove the isTestFile check can do that.\nIt may be a better choice to use getNonVendorPackages and run test compile for each package instead of just use go test -c ./... \nBecause go test ./... seems to search all packages in file system and will not filter packages in vendor under version1.9, see golang's changelog 1.9 . had not run npm run lint and some details had to be fix.. sorry I had deleted the branch which I used to change the code before you reviewed\ud83d\ude25.\nIt seems there is no way I can continue to commit to this pull request.\nCreated a new pull request here. There seems no need to check whether the current file is a '_test' file when choosing 'build Workspace' command. It may be a bug from delve itself, see https://github.com/derekparker/delve/issues/1282 , this bug only appear on  macOS. See its fix https://github.com/derekparker/delve/commit/3f9875e272cbaae7e507537346757ac4db6d25fa\nYou may try to update your delve(the debugger) and have another try, the fix is available in its latest realease.\nsee https://github.com/derekparker/delve/blob/master/Documentation/installation/osx/install.md , use xcode-select --install and go get -u github.com/derekparker/delve/cmd/dlv. The cause of the error can also be verified by using directly delve to set breakpoints and see whether it can perform correctly. ",
    "zhulingbiezhi": "Nice,  looking forward to this issuer.. ",
    "alexus1024": "They all should be used. Each next file adds its contents to env and rewrite existing variables. So, order is significant.\nSame as docker-compose files, for example. https://docs.docker.com/compose/compose-file/#env_file. ",
    "ricochet": "I encountered this. My workflow is usually centered around kicking off a script to start a delve server and then launching my debug config in code. I worked around this by adding to that little script to create a mega-env.\n```bash\nENV_GEN_FILE=\".env_generated\"\nprintf \"#\\n# Do not edit this file. It is generated!\\n#\\n\" > $ENV_GEN_FILE\nLook for run specific details - first try in $HOME, then override with local\nfor ENV in $HOME/.env .env\ndo\n    if [ -f $ENV ]; then\n        cat $ENV >> $ENV_GEN_FILE\n    fi\ndone\n```. ",
    "devnet-uk": "I also experience this issue with mdempsky/gocode. However if I switch back to nfs/gocode it works. . ",
    "galgalesh": "For anyone here to show long strings in the inspector; add this to vscode user settings. You need to increase both maxStringLen and maxArrayValues to show longer strings.\njson\n    \"go.delveConfig\": {\n        \"useApiV1\": false,\n        \"dlvLoadConfig\": {\n            \"maxStringLen\": 600,\n            \"maxArrayValues\": 600,\n        }\n    },. I was mistaken, sorry.. ",
    "thr27": "We have the same problem in Windows.\nIt seems dlv stopped working with dlv commit a208c897197abd649faceb31ab6def85ccd2e789.\nChecking out delve project, and building commit 774b5c7ce2c787c0858953f47cc186786140e2dc produced a working version ...\nWe are using mingw ... but might work on MacOS as well - not tested ...\ngo into your delve src dir ... ( ... /src/github.com/derekparker/delve )\ngit checkout 774b5c7ce2c787c0858953f47cc186786140e2dc\nmingw32-make install\n. ",
    "crantron": "So I figured out how to get this going my launch.json is as follows:\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"host\": \"127.0.0.1\",\n            \"port\": 2345,\n            \"program\": \"${workspaceRoot}/project_root/go/src/github.com/crantron/mybot\",\n            \"env\": {\n                \"GOPATH\": \"/USERS/Chris/var/www/cranderson.info/project_root/go\",\n                \"PATH\": \"/usr/local/go/bin:/USERS/Chris/var/www/cranderson.info/project_root/go/bin\"\n            },\n            \"args\": [],\n            \"trace\": \"verbose\",\n            \"showLog\": true\n        }\n    ]\n}\nCouple notes here: \n\nI had to explicitly set my PATH within the env object. For whatever reason vs-code was not reading my local $PATH correctly thus couldn't find go.\nAdding ${workspaceroot} in program property fixed the problem of \"Unverified\" breakpoints . Im closing this, but I still think that there is a bug since I had to explicitly set my PATH.. \n",
    "yoyo837": "Same issue.. ",
    "CShepartd": "Try add this:\n\"env\": {\n    \"GOPATH\": \"C:\\\\go\",\n    \"PATH\": \"C:\\\\go\\\\bin\",\n    \"GOROOT\": \"C:\\\\go\"\n}. ",
    "PeterUlb": "Same issue here with Windows 10. Command line works fine. ",
    "truewt": "Have exactly same environment as OP mentioned and same problem. When I have debugging tab opened, there is indefinite (blue) loader under the configurations and debug button bar. On debug cancel there is error alert to check debug output, but nothing along existing output from OP is there.. Confirming @Sharpiro fix also works for me (seems like all those versions have also fixed some bugs I've experienced before).. ",
    "Sharpiro": "Windows 10 x64\nGo 1.10.3\nVS Code 1.24.1\nvscode-go 0.6.83\nDelve 1.0.0\nAfter updating to the latest of all of the above, I also experienced \"hanging\" while trying to debug.  I tested that this occurs on 2 of my computers after using all the latest installs.\nI found that the following 2 changes were necessary to resolve my issue, at least as a workaround.  For anyone looking to use this workaround, you can modify the .js versions of these files in your %userprofile%/.vscode/extensions/ms-vscode.go-0.6.83/out/src folder, though the line numbers will differ.  \nAlso, once debugging, the \"Restart\" option still throws an error.\nhttps://github.com/Microsoft/vscode-go/compare/4a4cddf22f60148d884eb48f51bcb036b98ce7d9...Sharpiro:0.6.83. I can confirm the latest delve commit fixes the debug issue. However, \"restarting\" a debug session for a test still fails.  It looks like the test arguments do not get passed upon restart and the extension attempts to debug the file as if it were a \"main\" package, causing an error to occur. . It occurs when debugging a test using code lens.  I'm fairly sure it worked in the past.. ok thanks.  you're right the restart debug doesn't seem to be related to this issue.. ",
    "mikeyyyyyy": "I'm having the same issue using macOS and Go 1.10.3.\n@Sharpiro temporary fix worked on my end!. Same issue as: https://github.com/Microsoft/vscode-go/issues/1752. ",
    "philjonesuk": "Having the same issue here. @Sharpiro workaround works for me too.\nUsing:\ngo version go1.10.3 darwin/amd64\nmacOS High Sierra 10.13.5\nvscode Version 1.24.1 (1.24.1)\nms-vscode.go-0.6.83\n. ",
    "alexaung": "Which .js version is working?. ",
    "Jacky2": "me too!!!\nF5 can't run\nOS is win10\nVSCode version: 1.24.1\nms-vscode version: 0.6.83\ngo version\uff1a1.10.3\ndlv version:  1.0.0\nand Can debug files be deleted automatically after running?\n. ",
    "AmberCode": "The same thing on Ubuntu:\nUbuntu 18.04\u00a0\nVSCode 1.24.1\ngo1.10.3 linux/amd64\ngo ext 0.6.83\ndlv 1.0.0\nApplied Sharpiro workaround in goDebug.ts and I am able to debug go again !. ",
    "fzechert": "I can confirm this bug on Arch Linux.\n4.17.2-1-ARCH\nVsCode 1.24.1 24f62626b222e9a8313213fb64b10d741a326288 x64\ngo version go1.10.3 linux/amd64\nDelve Debugger\nVersion: 1.0.0\nBuild: 440b4405626d0b27b960a7d070da9b5211b7ccef\nSharpiro patch works for me too. Thank you very much @Sharpiro.. ",
    "yui-knk": "Delve master includes this change https://github.com/derekparker/delve/commit/a208c897197abd649faceb31ab6def85ccd2e789#diff-85f7e39a17e446f5b7c743ad1f0ed3d8L539. This commit changed destination of message from stdout to stderr. If we continue to hook some message arrival from debugProcess, I think we should  call connectClient in stderr callback https://github.com/Microsoft/vscode-go/blob/0.6.83/src/debugAdapter/goDebug.ts#L413. This is why patches given by https://github.com/Microsoft/vscode-go/issues/1752#issuecomment-399689880 works.. ",
    "iiinsomnia": "I updated the extension and go tools, but it doesn't work.. custom multi tags, then can select add json tag or db tag, etc.. thanks a lot !. ",
    "danf0rth": "I Having the same issue, but not sure that this is problem of last version, because i start using vsc + golang extension a few weeks ago\n\nGo extension version 0.6.84\nGo version go1.10.2 linux/amd64\n\n\n. I tried to use nsf/gocode before and it did not solve the problem, made it even worse. I installed it again, and now autocomplete works much better!\nI think, that the problem was because i didnt kill the process.. As i said before, if i run command in terminal impl 'm MySQLUserRepository' user.UserRepository, it works. It looks like vscode run the impl in wrong directory.\n\n. @ramya-rao-a, yes, problem occurs when the interface located in the internal directory. ",
    "ericgreene": "Doing the following worked for me. \n\nQuit vscode. \nGo to running processes and kill gocode if it's still running\nInstall/update gocode: go get -u github.com/nsf/gocode. \n",
    "RinaFave01": "Cc creative commons. ",
    "bidhan-a": "Same here. I had to format my machine for some reason. After doing a fresh installation of the latest versions of Go, VS Code, and VS Code extensions, Intellisense has stopped working altogether. No matter what I type, it says *invalid type instead of showing suggestions.. I followed the solution described here and Intellisense is now working for me. . ",
    "levrik": "@ramya-rao-a 0.6.85 fixed this issue for me! . Typo bynary -> binary. ",
    "wiredprairie": "One idea: try launching the package rather than a single file. \n{\n    \"name\": \"Launch Package\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"debug\",\n    \"program\": \"${workspaceRoot}\"\n}\nSame error?. ",
    "JacksonKearl": "@OneOfOne were you experiencing perf issues before?. @FiloSottile can you try this vsix and see if the performance improves?. Can you check if disabling the outline view makes a difference? . Yeah @isidorn added something to make it cancel on timeout a few weeks ago I believe. . Bit confused. The token just signals that the result will be discarded. If we don't listen to it and kill the process ourselves wouldn't it keep going?. As discussed, removed the new token which controlled only having one formatter going at a time in favor of cancelling this token in core in such a scenario.. ",
    "husainaloos": "@ramya-rao-a I meant building the go project (go build).\nAfter the last vscode update, I don't seem to be able to replicate the problem. It could have been fixed, though I didn't see anything in the release note that mentioned that.. I am having a similar problem.\nI am running vscode in linux, with golang 1.11 installed. I am writing my app outside GOPATH directory and I am using go mod for all the dependencies.\nThe following does not work:\n1. Autocompletion on third-party libraries.\n2. Renaming variables\n3. Go to definition\nI am not sure if something else doesn't work as well.. ",
    "olostan": "@lggomez for me the most strange that go.gopath was respected in normal debug mode and when running test. The only case where gopath was taken from env - debugging unittest.... ",
    "flockonus": "I believe the default config was to blame.\nWith the params: \"go.docsTool\": \"guru\" or \"go.docsTool\": \"gogetdoc\" then it works.. If godef is the default, and it has some cases where it doesn't work, while other do, then IMO it means vscode should have another default. ",
    "withlin": "vscode-go-debug.txt\nyep,i am Uploaded  vscode-go-debug.txt.\nPrompt:\n      when i press F5 debug,it is no problem.but  i am F11(step by step),which Failed to step.\n   . Thank you for your answer\u3002\n you answered it too long, I have finished writing the project.. ",
    "recht": "go test output is also pretty bad, it's just as hard to figure out what failed (and how many tests failed) when you have a lot of output. It gets even worse if you enable parallel execution while you have output. In that case the output will be interleaved, making it more or less impossible to figure out what happened.\nI would suggest using a treeview of some sort with each test at the root with a color indicator, somewhat like intellij/eclipse: https://www.jetbrains.com/help/idea/viewing-and-exploring-test-results.html. ",
    "StephenWeber": "Managed to get a screenshot of my Activity Manager during one of the slowdowns. It shows varcheck and three megacheck processes running and requiring a lot of CPU.\nhttps://www.dropbox.com/s/uqpqm4pmznpm284/Screenshot%202018-07-06%2012.26.30.png?dl=0. gometalinter from the shell does show up as one entry in my process list. It takes about 6 seconds to execute. My save settings were set to every 1000ms, so I think what is happening is: as I was changing my files, it would trigger another save and another run of gometalinter. Several runs were getting stacked up, until the CPU usage on gometalinter was slowing down the VSCode UI.\nI'm just interested in what VSCode can do to protect itself from that situation. Other features, like formatting, have a timeout for that tool. That has its own problems, as I've seen in the help for why VSC isn't formatting documents. Alternatively, VSCode could kill processes it started that have had their files changed since it ran - that doesn't sound like a simple feature but would at least keep the processes from stacking up.\nI suspect that golangci-lint would indeed be faster and a faster tool would trigger this less often. . I have outline view disabled by default, and was off for the above\nassessment. I can turn it on and see if it's same / worse?\nOn Mon, Jul 16, 2018 at 11:34 AM Jackson Kearl notifications@github.com\nwrote:\n\nCan you check if disabling the outline view makes a difference?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1775#issuecomment-405335126,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAJYIMxbJEulahcUxCeJTsaNdwrt3e0nks5uHNzAgaJpZM4VFpnc\n.\n. This does appear to resolve this issue:\nTesting method: turn on save-on-interval, every 100ms. Start typing crazy pathological formatting sequences (lots of brackets and parens, breaking lines in code, removing member accessors but leaving the .)\nI also tried it with gometalinter and golangci-lint.\n\nI could not reproduce the same behavior at all. golangci-lint was nearly imperceptible, gometalinter would use a good portion of CPU but the UI never froze and I never felt the system was overloaded.\nThanks for listening and glad it resulted in a fix!. ",
    "czfadmin": "@ramya-rao-a \nIt seems that only guru does this.\nAnd I have the references codelens enabled. ",
    "kaskavalci": "Thanks for the response. I'll submit a PR this weekend.. True, I missed that. . #1733 is a very handy feature! However, there are couple of issues with currrent implementation.\n\nIf import path is named, then it doesn't work.\nimport router \"github.com/julienschmidt/httprouter\"\nIf package is not in GOPATH already, command fails silently without adding the package.. @ramya-rao-a I highlighted import path including the name. It works for unnamed paths but named paths it silently fails. Without highlighting, if cursor is anywhere on the import path line, it does work for me too. It may be bit confusing for new users.. @ramya-rao-a all cases are working. The best part, it can import the selected text, not the whole import path. Thanks!. \n",
    "wustzhy": "@ramya-rao-a , Thanks for your attension\nI used Visual Studio Code(VSCode) to debug, above is error log in the DEBUG CONSOLE of VSCode.\nThen I use delve debug in the terminal, failed, log as below:\nyestin-iMac:test1 erice$ dlv debug math_1.go\ncouldn't start listener: listen tcp 185.199.109.153:0: bind: can't assign requested address. ",
    "finalcreator": "Thanks for your replay, it works after I double check the GOPATH variable settings and point to the workspace folder.. a lot of code need handle the return variables, this is definitely a productive feature.\nexample:\nall, err := ioutil.ReadAll(resp.Body)\nwhen I enable the \"go.useCodeSnippetsOnFunctionSuggest\": true, to autocomplete the function, maybe the return variable should be there as well .. ",
    "eraserix": "When I do \"Build Workspace\" in pkg.go:\n/home/user/go/src>Finished running tool: /usr/bin/go build -i -o /tmp/go-code-check pkg\nAnd for pkg_test.go:\n/home/user/go/src>Finished running tool: /usr/bin/go test -c -i -o /tmp/go-code-check \ncan't load package: package .: no Go files in /home/user/go/src. Yep, this works. So I should not add ~/go/src to the workspace but the individual \"projects\"?\nThanks!. ",
    "zo0o0ot": "I'm glad you are working on the Delve debug files issue.  Keep up the good work!. ",
    "valerino": "hi ramya,\nwell..... in a debugger, you should be able to display int values as hex. \nfor example, i'm developing a computer emulator in golang (commodore 64 emulator) and in this situation having hex values displayed while debugging is vital.\nbut well...... this is not the only case, i mean ..... just to display a buffer in memory while debugging, without relying to printf, and so on ..... there should be no debugger without 'show as hex' as an option imho.\n. ",
    "mmwtsn": "Seeing this as well.\nJust curious, why did you add the security option and capacity add flags in your example? I haven't used those before and was able to reproduce the issue without either of them here.. Downgrading to 0.6.84 worked for me as well.\nTo do that download the 0.6.84 release and run the following:\n$ code --uninstall-extension ms-vscode.Go\n$ code --install-extension $PATH_TO_YOUR_DOWNLOAD/Go-0.6.84.vsix\nYou may want to add \"extensions.autoUpdate\": false, to your settings for now as well.\nTo use the extension run Reload Window in the command pallet.. This also means tools like gofmt and goimports aren't running \ud83d\ude15 . ",
    "hunter86bg": "Even after deletion of the \"windows_amd64\" folder and running it manually- there is no such folder:\n[root@golang hello-world]# env GOOS=windows GOARCH=amd64 go build -o hello-world.exe hello-world.go \n[root@golang hello-world]# ll /usr/lib/golang/pkg/\n\u043e\u0431\u0449\u043e 28\ndrwxr-xr-x.  5 root root 4096 25 \u044e\u043b\u0438 17,55 bootstrap\ndrwxr-xr-x.  2 root root 4096 25 \u044e\u043b\u0438 17,55 include\ndrwxr-xr-x. 30 root root 4096 25 \u044e\u043b\u0438 17,55 linux_amd64\ndrwxr-xr-x.  2 root root 4096 11 \u044e\u043d\u0438 13,17 linux_amd64_dynlink\ndrwxr-xr-x.  2 root root 4096 11 \u044e\u043d\u0438 13,17 linux_amd64_race\ndrwxr-xr-x.  3 root root 4096 25 \u044e\u043b\u0438 17,55 obj\ndrwxr-xr-x.  3 root root 4096 25 \u044e\u043b\u0438 17,55 tool\nIt seems that go can compile it successfully, without this folder and yet, VSC cannot do it. . Hm... it seems that in order to create the \"/usr/lib/golang/pkg/windows_amd64\" you need to:\n1. Login as root and go to the scr location\n2. Run the build with \"-i\" (very important):\n\"GOOS=windows GOARCH=amd64 go build -i\". ",
    "mvolkmann": "Followup note ... This works fine in the stable version of VS Code, but fails in the Insider build.. It works in the newest version of the Insiders build as of 8/1/2018.. ",
    "cpwc": "Same issue here on macOS with 0.6.85 had to downgrade to 0.6.84 for debugger work correctly.. @ramya-rao-a the latest beta version works perfectly.. ",
    "antihax": "This appears to cause some of the issues mentioned above.\n```golang\npackage main\nimport (\n    \"sync\"\n    \"time\"\n)\nfunc main() {\n    wg := sync.WaitGroup{}\n    wg.Add(1)\n    go func() {\n        for {\n            time.Sleep(time.Second)\n        }\n    }()\n    wg.Wait()\n}\n```\nSide note: code listening on a tcp socket with a fixed port appears to make this worse as it is occasionally trying to launch two copies and one fails as the port is in use.. With above code and Go-latest.vsix from cloned repo.\nFirst stop press DisconnectRequest appears below. 30 seconds pass. Second press, nothing additional. Debugger controls disappear but process appears to still be running.\nVerbose logs are written to:\n/tmp/vscode-go-debug.txt\n2:46:03 PM, 8/1/2018\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /home/antihax/go\nRunning: /home/antihax/go/bin/dlv debug github.com/antihax/test --headless=true --listen=127.0.0.1:2345 --log=true --\nAPI server listening at: 127.0.0.1:2345\ntime=\"2018-08-01T14:46:03-07:00\" level=info msg=\"launching process with args: [/home/antihax/go/src/github.com/antihax/test/debug]\" layer=debugger\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\ntime=\"2018-08-01T14:46:04-07:00\" level=debug msg=continuing layer=debugger\nDisconnectRequest. On first stop. \nDisconnectRequest\nHaltRequest\nOn second, no change to log but the controls go away. Both debug and dlv are still running.\n98102 tty2     Sl+    0:00 /home/antihax/go/bin/dlv debug github.com/antihax/test --headless=true --listen=127.0.0.1:2345 --log=true --\n 98188 tty2     Sl     0:00 /home/antihax/go/src/github.com/antihax/test/debug. Hitting stop; DisconnectRequest and HaltRequest appear, but no additional RPC to dlv. Hitting second time, nothing additional.\nVerbose logs are written to:\n/tmp/vscode-go-debug.txt\n3:18:37 PM, 8/2/2018\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /home/antihax/go\nRunning: /home/antihax/go/bin/dlv debug github.com/antihax/test --headless=true --listen=127.0.0.1:2345 --log=true --log-output=rpc --\ntime=\"2018-08-02T15:18:37-07:00\" level=info msg=\"Using API v1\" layer=rpc\nAPI server listening at: 127.0.0.1:2345\nInitializeEvent\ntime=\"2018-08-02T15:18:38-07:00\" level=debug msg=\"<- RPCServer.GetVersion(api.GetVersionIn{})\" layer=rpc\ntime=\"2018-08-02T15:18:38-07:00\" level=debug msg=\"-> *api.GetVersionOut{\\\"DelveVersion\\\":\\\"Version: 1.0.0\\\\nBuild: $Id: c98a142125d0b17bb11ec0513bde346229b5f533 $\\\",\\\"APIVersion\\\":1} error: \\\"\\\"\" layer=rpc\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\ntime=\"2018-08-02T15:18:38-07:00\" level=debug msg=\"(async 2) <- RPCServer.Command(*api.DebuggerCommand{\\\"name\\\":\\\"continue\\\",\\\"ReturnInfoLoadConfig\\\":null})\" layer=rpc\ntime=\"2018-08-02T15:18:38-07:00\" level=debug msg=\"<- RPCServer.ListGoroutines(<nil>null)\" layer=rpc\nDisconnectRequest\nHaltRequest. Delve Debugger\nVersion: 1.0.0\nBuild: $Id: c98a142125d0b17bb11ec0513bde346229b5f533 $\nSame thing after running the update above.. I am using the code above. \ngo version go1.10.3 linux/amd64 on Ubuntu 18.04.1 LTS\nVS Code is:\nVersion: 1.25.1\nCommit: 1dfc5e557209371715f655691b1235b6b26a06be\nDate: 2018-07-11T15:40:20.190Z\nElectron: 1.7.12\nChrome: 58.0.3029.110\nNode.js: 7.9.0\nV8: 5.8.283.38\nArchitecture: x64\n. Working here too.. ",
    "rain2fog": "same problem with me \nenvironment: ubuntu 16.04 /  vscode 1.25.1 / vscode-go 0.6.85\nI have to downgrade to 0.6.84, then it worked.. ",
    "Tusharsb": "@ramya-rao-a \n\nCan you try adding a breakpoint and then see if you are able to stop the debugging session properly?\n\nI am able to reproduce the issue even with breakpoints ON. I am using a different code as follows\n```\npackage main\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n\"github.com/gorilla/mux\"\n\n)\n// our main function\nfunc main() {\n    router := mux.NewRouter()\n    router.HandleFunc(\"/\", IncomingMessage).Methods(\"POST\")\n    log.Fatal(http.ListenAndServe(\":8002\", router))\n}\nfunc IncomingMessage(w http.ResponseWriter, r *http.Request) {\n    fmt.Println(\"hello world\")\n}\n```\nwith breakpoint set on second last line\ngo version go1.10.3 linux/amd64. ",
    "moitias": "Seeing this on Windows too, and it seems to be related to how build failures are handled at least on my configuration. The basic steps to reproduce are:\n0) (optional) Run code succesfully, debug succesfully\n1) Try to run unbuildable code\n2) Expect to be able to run/debug again.\nTested on the latest release Code and the go-latest.vsix (commit b4c4698) from the repo - doesn't work - and with 0.6.84 linked above - works fine. \nLogs from both a succesful run and the logs after running unbuildable code from both versions below. No RPC logging on the 0.6.84 as the launch configuration flag doesn't work in the older plugin.\nCode to run:\n```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"HELLO\")\n    // uncomment this line and f5 to break debugging\n}\n```\nRuns and debugs fine, repeatedly. Logs on a succesful session are as follows:\n```\nVerbose logs are written to:\nC:\\Users\\matias\\AppData\\Local\\Temp\\vscode-go-debug.txt\n19:40:30, 2018-8-4\nInitializeRequest\nInitializeResponse\nUsing GOPATH: c:\\users\\matias\\code\\worldo\nRunning: c:\\users\\matias\\code\\worldo\\bin\\dlv.exe debug cmd\\test --headless=true --listen=127.0.0.1:2345 --log=true --log-output=rpc --\ntime=\"2018-08-04T19:40:31+03:00\" level=info msg=\"Using API v1\" layer=rpc\nAPI server listening at: 127.0.0.1:2345\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"<- RPCServer.GetVersion(api.GetVersionIn{})\" layer=rpc\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"-> api.GetVersionOut{\\\"DelveVersion\\\":\\\"Version: 1.0.0\\nBuild: $Id: c98a142125d0b17bb11ec0513bde346229b5f533 $\\\",\\\"APIVersion\\\":1} error: \\\"\\\"\" layer=rpc\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"(async 2) <- RPCServer.Command(api.DebuggerCommand{\\\"name\\\":\\\"continue\\\",\\\"ReturnInfoLoadConfig\\\":null})\" layer=rpc\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"<- RPCServer.ListGoroutines(null)\" layer=rpc\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"-> []api.Goroutine[] error: \\\"\\\"\" layer=rpc\nHELLO\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"(async 2) -> api.DebuggerState{\\\"Running\\\":false,\\\"Threads\\\":null,\\\"NextInProgress\\\":false,\\\"exited\\\":true,\\\"exitStatus\\\":0,\\\"When\\\":\\\"\\\"} error: \\\"\\\"\" layer=rpc\ncontinue state {\"Running\":false,\"Threads\":null,\"NextInProgress\":false,\"exited\":true,\"exitStatus\":0,\"When\":\"\"}\nTerminatedEvent\nDisconnectRequest\nHaltRequest\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"(async 4) <- RPCServer.Command(api.DebuggerCommand{\\\"name\\\":\\\"halt\\\",\\\"ReturnInfoLoadConfig\\\":null})\" layer=rpc\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"(async 4) -> *api.DebuggerStatenull error: \\\"Process 27040 has exited with status 0\\\"\" layer=rpc\nHaltResponse\nDetachRequest\ntime=\"2018-08-04T19:40:31+03:00\" level=debug msg=\"<- RPCServer.Detach(booltrue)\" layer=rpc\nDetachResponse\nDisconnectRequest to parent\nThe same (build success) on 0.6.84:\nVerbose logs are written to:\nC:\\Users\\matias\\AppData\\Local\\Temp\\vscode-go-debug.txt\n19:49:57, 2018-8-4\nInitializeRequest\nInitializeResponse\nUsing GOPATH: c:\\users\\matias\\code\\worldo\nRunning: c:\\users\\matias\\code\\worldo\\bin\\dlv.exe debug cmd\\test --headless=true --listen=127.0.0.1:2345 --log=true --\nAPI server listening at: 127.0.0.1:2345\ntime=\"2018-08-04T19:49:57+03:00\" level=info msg=\"launching process with args: [c:\\Users\\matias\\code\\worldo\\src\\cmd\\test\\debug]\" layer=debugger\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nThreadsRequest\ntime=\"2018-08-04T19:49:58+03:00\" level=debug msg=continuing layer=debugger\nHELLO\ncontinue state {\"Running\":false,\"Threads\":null,\"NextInProgress\":false,\"exited\":true,\"exitStatus\":0,\"When\":\"\"}\nTerminatedEvent\nDisconnectRequest\n```\nAfter uncommenting the commented line - causing an error ('unexpected to at end of statement') while building - it is impossible to re-run the debugger. \nF5 seems to be completely ignored, while running from the Debug pane results in an 'There is already a debug configuration running' error message. Stop debugging is active, but does not result in anything while restarting results in the same error. Trying to terminate/stop/anything from command palette does not help either - the only workarounds seem to be a complete restart after each build failure (which is pretty much unusable) or downgrading to 0.6.84.\nLogs from build failure are as follows:\n```\nVerbose logs are written to:\nC:\\Users\\matias\\AppData\\Local\\Temp\\vscode-go-debug.txt\n19:41:01, 2018-8-4\nInitializeRequest\nInitializeResponse\nUsing GOPATH: c:\\users\\matias\\code\\worldo\nRunning: c:\\users\\matias\\code\\worldo\\bin\\dlv.exe debug cmd\\test --headless=true --listen=127.0.0.1:2345 --log=true --log-output=rpc --\ncmd/test\n.\\main.go:9:12: syntax error: unexpected to at end of statement\nexit status 2\nProcess exiting with code: 1\nDelve is closed\nDisconnectRequest\nHaltRequest\n``` \nThe same (build failure) on 0.6.84: \n```\nVerbose logs are written to:\nC:\\Users\\matias\\AppData\\Local\\Temp\\vscode-go-debug.txt\n19:50:40, 2018-8-4\nInitializeRequest\nInitializeResponse\nUsing GOPATH: c:\\users\\matias\\code\\worldo\nRunning: c:\\users\\matias\\code\\worldo\\bin\\dlv.exe debug cmd\\test --headless=true --listen=127.0.0.1:2345 --log=true --\ncmd/test\n.\\main.go:9:12: syntax error: unexpected this at end of statement\nexit status 2\nProcess exiting with code: 1\nDelve is closed\nDisconnectRequest\n``` \n. ",
    "vasmik": "Mac OS - same issue. Downgraded to 0.6.84 :(. ",
    "Evasion": "Appears to still be an issue in 0.6.88. Appears to still be an issue in 0.6.88. I added verbose as advised but I have not been able to recreate since then. Will update once I am able to reproduce it.. ",
    "josvazg": "Weird, it got fixed. I was using goimports so my code was formatted properly beforehand.\nI changed my settings back to goreturns and made a change to break the format. I didn't even get to use the formatting option in the right-click menu, tried to save and vscode prompted me to update goreturns.\nThat was the first time I saw a reaction from vscode on saving whie having goreturns setup.\nOnce I accepted the install goreturns started working as expected on save.\nIt also works on the right-click Format Document.\n(Now) I see no errors in the console. Nice to learn about that BTW.\nThanks! I will close this now.. ",
    "ChrisHines": "The guru implements subcommand can do this.\nhttps://docs.google.com/document/d/1_Y9xCEMj5S-7rv2ooHpZNH15JgRT5iM742gJkw5LtmQ/edit#heading=h.f6hyappclfor. ",
    "lmb": "Option 1: generate a random subdirectory, see \nhttps://golang.org/src/io/ioutil/tempfile.go?s=2138:2195#L66\nOption 2: include the UID in the temp file name.\nOn 8 August 2018 23:19:51 Ramya Rao notifications@github.com wrote:\n\nWhat do you suggest we do instead?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. Thank you both for the quick fix!\nOn 13 August 2018 23:28:28 Ramya Rao notifications@github.com wrote:\n\nThanks for logging this issue @lmb and Thanks for the PR @rikkuness! Your \nfix is now available in the latest update (0.6.86) to the Go extension\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. ",
    "aixiaoxiang": "@ramya-rao-a\n ok,  thanks\nI  continue to test and report later.. @ramya-rao-a\nthanks\u3002good\uff0cfixed.. ",
    "zongUMR": "go env:\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/Users/zongmeng/Library/Caches/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/zongmeng/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/Cellar/go/HEAD-f2131f6/libexec\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/Cellar/go/HEAD-f2131f6/libexec/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/66/h198vsq94gjbzhkj2vbg1rqr0000gn/T/go-build203400249=/tmp/go-build -gno-record-gcc-switches -fno-common\"\n\ngo version devel +f2131f6e0c Wed Aug 8 21:37:36 2018 +0000 darwin/amd64\nI installed go with brew: brew install go --HEAD. ",
    "Hunsin": "Ah..., I see.\nIs there any document about it? Something like overwriting the outputs.. ",
    "haleyrc": "This recently caused some confusion for me as the heuristic is overly greedy and will prepend the absolute path even if the short filename isn't the first item in the entry such as when you use both log.Ltime and log.Lshortfile. In fact, it does this even if using log.Llongfile.. @ramya-rao-a Absolutely, and sorry for the delay. https://github.com/haleyrc/vscode-go-issue demonstrates the issue I'm having.. ",
    "peergynt": "It's probably worth mentioning the following issue here: https://github.com/golang/go/issues/25369\nIt looks like a possible \"fix\" for this issue is to make sure that the output line starts with at least a tab (pre go-1.11) or with 4 spaces (go1.11+).\nNote @andybons comment:\n\nI think it\u2019s fine. If someone is relying on the textual output of tests instead of using the JSON output, then this will be a good reason for them to switch :)\n\nIt doesn't look like using the JSON output would help though because the filename still ends up in the 'Output' field.. @MagnumOpus21 did you see my comment in the original issue (#1836) by any chance?\nIt seems like checking that the line starts with at least a tab or four spaces could help.. ",
    "logenBupt": "Thanks for the reply. It seems strange that in standalone terminal by cmd, the %PATH% environment contains C:\\Go\\bin correctly. But in integrated terminal in VS code or the console doesn't contain.\n\n\n\n. I had tried code and it went well. And I restarted my computer yesterday, and now I found go env works in integrated terminal. I don't know why, but anyway, it works. Thanks.. ",
    "dgiridharan": "This is really really bad user experience.\nIs it possible to fix this issue soon? This happens any time I have an error for launching a debug configuration and I attempt to relaunch after fixing the issue.\nIt would be fine if there's a work around for this as well (for the time being).\nThanks again, I really appreciate it!. @ramya-rao-a - Thanks lot! That was really fast.. ",
    "tianyouhui": "Also, when I updated vscode to 1.25.1 (or even lower 1.25?), the vscode and vscode-go becomes very stutter, and cpu runs heavily ... 100%. ",
    "louspringer": "The experimental patch at https://github.com/Microsoft/vscode-go/issues/1833 fixes the issue for me. . ",
    "jeffbean": "Awesome thanks for catching this. I tested your changes locally and it works as expected. . Works great. Thanks again for all the help!\nI pushed a lint fix to get the build back to passing: \nsrc/goGenerateTests.ts[133, 1]: trailing whitespace\nsrc/goGenerateTests.ts[136, 30]: == should be ===. The go.generateTestsFlags settings change tested. Looking good!. Yes the goConfig logic was a little dated so I refactored to be a little more concise. I first did this with testing in mind but reworking some of this we can even simplify the case statement to have less overall functions. File and Package were just deciding if it was a file or directory path. \nThe switch statement seems to be the best way to handle three different commands in the editor. The configuration is not what determines if this is for a File, Package, or Function. This is looking at the goMain.ts in terms of context registration:\nctx.subscriptions.push(vscode.commands.registerCommand('go.test.generate.package', () => {\n        goGenerateTests.GenerateTests(goGenerateTests.GenerationType.Package);\n    }));\nThis seems quite clean compared to the three different functions. . So the part I think is a misunderstanding is we need more than the configuration object to make the decisions. So there are three seprate commands that do slightly different operations based on the command. The config object will now hold common arguments that will be applied to all three of these seprate commands. \nThe reason for the single function with an Enum is the cleanest way I found to DRY up this code. I can change back to three seprate function but the addition of a the config object for flags will remain the same. \nHaving no experience in TypeScript I defer to experts on code style and best practice, but the logic remains that we need a way to run three different commands with similar but different code paths.\n```\n   ctx.subscriptions.push(vscode.commands.registerCommand('go.test.generate.package', () => {\n        goGenerateTests.GenerateTests(goGenerateTests.GenerationType.Package);\n    }));\nctx.subscriptions.push(vscode.commands.registerCommand('go.test.generate.file', () => {\n    goGenerateTests.GenerateTests(goGenerateTests.GenerationType.File);\n}));\n\nctx.subscriptions.push(vscode.commands.registerCommand('go.test.generate.function', () => {\n    goGenerateTests.GenerateTests(goGenerateTests.GenerationType.Function);\n}));\n\n```\nThese callers need a way of knowing what command is being called.. Ah ok. I see now. I will update this.  Thanks for the time and patience reviewing!. Friendly ping on this thread. The feedback has been incorporated.. ",
    "johan-lejdung": "Well both of it, but I am referring to actual tests being run.\nAs long as the tests are simple unit tests they run fast enough, but of course they only run if the linter and syntax checks pass :). Great, but then we are back full-circle. I still wont have linting and syntax checks on my test files unless I run it manually, which I already do today - task or not -.\nI think that adding proper support for this would be great, especially considering that both Atom and GoLand covers this use-case. I really like VS-Code and wouldn't want to switch editors just because of this.. Much appreciated, for trying to help out and find alternative solutions!\nYeah that would be super, if you are stretched for time I could look into it this weekend.. Thanks! If I havent submitted anything by the end of the weekend you can\nconsider me MIA hehe\nOn Tue, 14 Aug 2018 at 21:21, Ramya Rao notifications@github.com wrote:\n\nI would very much appreciate a PR :) Below are some code pointers:\n\nBuild and Debug extension\n   https://github.com/Microsoft/vscode-go/wiki/Building,-Debugging-and-Sideloading-the-extension-in-Visual-Studio-Code\n   is our wiki on steps for setting up a local dev environment\n   -\n   https://github.com/Microsoft/vscode-go/blob/0.6.86/src/testUtils.ts#L156\n   is the function that is called when running tests.\nYou need to add the new setting to the package.json\n   https://github.com/Microsoft/vscode-go/blob/0.6.86/package.json#L516-L521\n   file\n\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/1842#issuecomment-412986316,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AI1mxMzP8hXX2k-rfHWEzQ-yjJl9J8bWks5uQyNJgaJpZM4V6d7e\n.\n. @ramya-rao-a is this considered closed already or is it only after a release?. Resolves: https://github.com/Microsoft/vscode-go/issues/1842. The test with the multiple flags seems to be failing as well, not sure why since it's implemented just like buildTags. I will look at it later this weekend.. Ah, thanks! Will get it sorted out today. Haven't had a second look yet, sorry for the delay :). I removed the test for fallback on buildTags. The reason was that this line would evaluate to true even though 'testTags' was equal to ''.\n\nFirst I chose to modify the check to \nlet testTags: string = testconfig.goConfig['testTags'].length > 1 ? testconfig.goConfig['testTags'] : testconfig.goConfig['buildTags'];\nBut that would create a weird dependency on buildTags, and remove the useCase we are looking to create; where you wanted tests to run without any tags but let it build the files with some tags.\nNot sure how to solve the backwards compatibility problem actually since an unset config evaluated to an empty string and not undefined. . Ehm, getting weird errors Expected 3 arguments, but got 2.\non\nreturn testCurrentFile(config1, []).then((result: boolean) => {\nThe function definition is as follows:\nexport function testCurrentFile(goConfig: vscode.WorkspaceConfiguration, args: string[]): Thenable<boolean>\nAny ideas?. That should do it!. When can I expect this to get released? :). Super, thank you for the help!\nOn Tue, 4 Sep 2018 at 08:20, Ramya Rao notifications@github.com wrote:\n\n@johan-lejdung https://github.com/johan-lejdung A release should be\nsome time next week. Until then, you can use the beta version of the\nextension to use this feature. See\nhttps://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension\nThanks for working on this!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/1877#issuecomment-418253702,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AI1mxJqzvLld1JWVDicqrKQgsXgBkPmsks5uXhvCgaJpZM4WM1JW\n.\n. That's really nice to hear \u263a\ufe0f. go.testTags is working fine \ud83d\udc4c\ud83d\ude0d. Of course! . oops!. That does sound better :). \n",
    "benweissmann": "I'm also seeing this intermittently after upgrading to 1.26.0. Sometimes, the \"run test\"/\"debug test\" buttons disappear, and the \"Go: Run tests\" action stops working. Restarting sometimes helps, but the issue comes back after a few minutes. . ",
    "nboughton": "Build on save functionality is completely broken for me in 1.26. Every time I save I get the following in the console:\nmainThreadExtensionService.ts:43 [ms-vscode.Go]ENOENT: no such file or directory, uv_os_get_passwd\ne.$onExtensionRuntimeError @ mainThreadExtensionService.ts:43\ne._doInvokeHandler @ rpcProtocol.ts:261\ne._invokeHandler @ rpcProtocol.ts:246\ne._receiveRequest @ rpcProtocol.ts:192\ne._receiveOneMessage @ rpcProtocol.ts:174\n(anonymous) @ rpcProtocol.ts:107\n(anonymous) @ rpcProtocol.ts:303\ne.fire @ event.ts:140\na @ ipc.net.ts:104\nn._socketDataListener @ ipc.net.ts:133\nemitOne @ events.js:116\nemit @ events.js:211\naddChunk @ _stream_readable.js:263\nreadableAddChunk @ _stream_readable.js:250\nReadable.push @ _stream_readable.js:208\nonread @ net.js:594\nmainThreadExtensionService.ts:44 Error: ENOENT: no such file or directory, uv_os_get_passwd\n    at Object.goBuild (/home/nick/.vscode/extensions/ms-vscode.go-0.6.87/out/src/goBuild.js:71:102)\n    at Object.check (/home/nick/.vscode/extensions/ms-vscode.go-0.6.87/out/src/goCheck.js:75:45)\n    at runBuilds (/home/nick/.vscode/extensions/ms-vscode.go-0.6.87/out/src/goMain.js:334:15)\n    at vscode.workspace.onDidSaveTextDocument.document (/home/nick/.vscode/extensions/ms-vscode.go-0.6.87/out/src/goMain.js:347:9)\n    at e.fire (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:98:218)\n    at e.$acceptModelSaved (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:728:141)\n    at e._doInvokeHandler (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:671:983)\n    at e._invokeHandler (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:671:701)\n    at e._receiveRequest (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:670:767)\n    at e._receiveOneMessage (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:670:536)\n    at /opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:669:452\n    at /opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:672:575\n    at /opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:96:903\n    at e.fire (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:98:218)\n    at a (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:162:713)\n    at Socket._socketDataListener (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:162:932)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:594:20)\nAttempting to use the command pallet to build the current workspace also fails with the following error:\nnotificationsAlerts.ts:39 Error: Running the contributed command:'go.build.workspace' failed.\n    at e._executeContributedCommand (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:713:87)\n    at e.$executeContributedCommand (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:713:479)\n    at e._doInvokeHandler (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:671:983)\n    at e._invokeHandler (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:671:701)\n    at e._receiveRequest (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:670:767)\n    at e._receiveOneMessage (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:670:536)\n    at /opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:669:452\n    at /opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:672:575\n    at /opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:96:903\n    at e.fire (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:98:218)\n    at a (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:162:713)\n    at Socket._socketDataListener (/opt/visual-studio-code/resources/app/out/vs/workbench/node/extensionHostProcess.js:162:932)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:594:20)`\n. Build on save and error reporting works with this update. Thanks!. ",
    "pierrre": "I see the same error message in the developer console.\nWhen I try to run the tests manually, it displays a popup:\n\nNo tests found. Current file is not a test file.\n\n(even if I've got a test file)\nI confirm that a downgrade to 1.25 fixes the issue.. > Do you mean the error about uv_os_get_passwd. If yes, then please follow #1850 (comment) to get the fix for that\nYes, #1850 fix is working for me, thanks !\n\nFor Go: Test File or Go: Test Function At Cursor, a test file should be open in the active editor. Can you open a test file and click on one of the \"run test\" codelens?\n\nThis bug is also solved with #1850 fix. It's working for me, thanks! :+1: . That's why I added \"--linter='vetshadowstrict:go vet -shadow -shadowstrict:PATH:LINE:MESSAGE'\", in the command line.\nIt allows to add custom linter command.\nI don't understand why it works when I run the command manually in my terminal, but it doesn't work in vscode.\nAnyway, after some thought, I decided not to use \"vet shadow\" in my app, because it has too many \"false positive\".\nSo it's not really a problem for me anymore.\nBut it could a problem for someone trying to use a custom linter command.. I can simplify my problem to:\n\"go.lintFlags\": [\n        \"--disable-all\",\n        \"--enable=mylinter\",\n        \"--linter='mylinter:/bin/true:PATH:LINE:MESSAGE'\",\n    ],\nIt prints:\nError while running tool: /home/pierre/go/bin/gometalinter --disable-all --enable=mylinter --linter='mylinter:/bin/true:PATH:LINE:MESSAGE' --aggregate\ngometalinter: error: unknown linters: mylinter\nIf I run this command in my terminal, it works.\nIt seems to be an \"escaping\" issue, but I don't understand why.\nThis is working:\n\"go.lintFlags\": [\n        \"--disable-all\",\n        \"--enable=mylinter\",\n        \"--linter=mylinter:/bin/true:PATH:LINE:MESSAGE\",\n    ],\nI added simple quotes in my original command, because it contained spaces between the flags -shadow -shadowstrict.\nBut it causes an issue in vscode-go.. OK, so it doesn't seem to be a real problem.\nI'm closing the issue.\nThanks !. thank you !. ",
    "juliofarah": "I'm having exactly the same issue with ms-vscode.go. Is there a quick fix I can make locally before the next updates?. Thank you so much for the quick reply and for acting so fast on it!\nI'm sorry but I don't believe it worked :(\nI tried installing it both from the command line and from visual code \"Install from VSIX\".\nThis is the output I have from the terminal:\n\u279c  service git:(staging) \u2717 code --install-extension ~/Downloads/Go-latest.vsix\nExtension 'Go-latest.vsix' was successfully installed!\nMaybe I'm doing something wrong?\n\n. It worked!\nThanks @ramya-rao-a !. ",
    "mgitkin-vz": "Installing the latest version you linked above worked for me \ud83c\udf89\nThanks @ramya-rao-a !. @ramya-rao-a This issue is still occurring sporadically when I save a file. Not sure if its related to gofmt. @ramya-rao-a Yes, I ran Go: Install/Update Tools after installing the new extension version. @ramya-rao-a Ah good point. I just disabled all of my extensions and quickly after \"reloading\" the issue happened again:\n\nHowever, after fully quitting the Code process and restarting, I haven't been able to reproduce the issue. \n. @ramya-rao-a I just got another crash, this one looks much more informative.\nedit: attached log instead\nvs-code-debug-cons-1534293596707.log\n. @ramya-rao-a Using version 0.6.87 I'm not able to reproduce this issue any more (even when using editor.formatOnSave)\nThanks!. This was the result of a sending a bad address to net.Dial()\nI had previous not seen this error condition and assumed the root cause to be related to authentication.. ",
    "calvn": "@ramya-rao-a Also encountering this issue. I've installed the workaround and ensured that all the tools are up-to-date. The extension host still crashes on save.. \nThese are the latest logs from the Console.. @ramya-rao-a I just re-ran the tool installation command to make sure everything is up to date.\n```\nInstalling 16 tools at /Users/cleung/go/bin\n  gocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  dlv\n  godef\n  godoc\n  goreturns\n  golint\n  gotests\n  gomodifytags\n  impl\n  fillstruct\n  goplay\nInstalling github.com/mdempsky/gocode SUCCEEDED\nInstalling github.com/uudashr/gopkgs/cmd/gopkgs SUCCEEDED\nInstalling github.com/ramya-rao-a/go-outline SUCCEEDED\nInstalling github.com/acroca/go-symbols SUCCEEDED\nInstalling golang.org/x/tools/cmd/guru SUCCEEDED\nInstalling golang.org/x/tools/cmd/gorename SUCCEEDED\nInstalling github.com/derekparker/delve/cmd/dlv SUCCEEDED\nInstalling github.com/rogpeppe/godef SUCCEEDED\nInstalling golang.org/x/tools/cmd/godoc SUCCEEDED\nInstalling github.com/sqs/goreturns SUCCEEDED\nInstalling github.com/golang/lint/golint SUCCEEDED\nInstalling github.com/cweill/gotests/... SUCCEEDED\nInstalling github.com/fatih/gomodifytags SUCCEEDED\nInstalling github.com/josharian/impl SUCCEEDED\nInstalling github.com/davidrjenni/reftools/cmd/fillstruct SUCCEEDED\nInstalling github.com/haya14busa/goplay/cmd/goplay SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n```\n\nCan you turn off the build, test, vet on save feature but not the lint,format on save feature and see if you still get the issue?\n\nHow do you disable some of the features? I've not done this before since it has always worked pretty well with out of the box config.. I disabled the three features, did a hard restart of vscode, and after some time the crash occurred. I've attached the a screen capture of the console once again.\n\n. @ramya-rao-a No dice.\n\n. ",
    "gpomykala": "In my case reinstall of go sdk  via apt helped. It seems like apt package contains much more than .tgz artifact hosted on golang. It seems like some tool used by an extension was missing in the system. ",
    "iotdog": "I encoutered the same issue, and I just return to VS Code 1.25.1 which works well. ",
    "lizebang": "Not work for me. Emmm.... @ramya-rao-a Thanks a lot. I have update go tools and it works well at least 8 hours. I think there is no problem for me. Thanks.. ",
    "xuefeng-huang": "It appears that this issue happens whenever I enable vscodevim extension and vscodego together. It works fine if I enable vscodego only (edit: the issue still happens if only vscodego is enabled). @ramya-rao-a I installed the new vscodego extension and updated all tools, it works fine now. @jhartman86 did you upgrade VSCode to 1.26.1? it should fix this issue. ",
    "jhartman86": "Seeing this as well. Tried the fix and still occurring regularly.. ",
    "BenLubar": "\n\nDo you see the code coverage when you run the command Go: Toggle Test Coverage In Current Package\n\n\nNo, the command runs the tests but does not show any code coverage. Re-running the command seems to have the same effect (ie. it is not toggling in a different direction).\n\n\nThe output channel for Go tests will have output for all the test runs. Can you share the output from there when you run the tests?\n\n\n```text\nRunning tool: C:\\tools\\go\\bin\\go.exe test -coverprofile=C:\\Users\\Owner\\AppData\\Local\\Temp\\go-code-cover -timeout 30s github.com\\BenLubar\\git-last-modified\nok      github.com/BenLubar/git-last-modified   2.119s  coverage: 39.6% of statements\nSuccess: Tests passed.\n```. > Can you open that file where the coverprofile is stored and share the results?\ntext\nmode: set\ngithub.com/BenLubar/git-last-modified/modtime.go:13.49,15.17 2 1\ngithub.com/BenLubar/git-last-modified/modtime.go:20.2,24.16 4 1\ngithub.com/BenLubar/git-last-modified/modtime.go:28.2,29.13 2 1\ngithub.com/BenLubar/git-last-modified/modtime.go:33.2,34.74 2 1\ngithub.com/BenLubar/git-last-modified/modtime.go:15.17,17.3 1 1\ngithub.com/BenLubar/git-last-modified/modtime.go:24.16,26.3 1 1\ngithub.com/BenLubar/git-last-modified/modtime.go:29.13,31.3 1 1\ngithub.com/BenLubar/git-last-modified/modtime.go:37.36,39.16 2 0\ngithub.com/BenLubar/git-last-modified/modtime.go:43.2,43.16 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:56.2,56.18 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:60.2,60.17 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:64.2,64.85 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:39.16,41.3 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:43.16,44.19 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:48.3,48.18 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:53.3,53.13 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:44.19,46.4 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:48.18,50.4 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:56.18,58.3 1 0\ngithub.com/BenLubar/git-last-modified/modtime.go:60.17,62.3 1 0\ngithub.com/BenLubar/git-last-modified/walk.go:8.63,9.16 1 0\ngithub.com/BenLubar/git-last-modified/walk.go:13.2,13.17 1 0\ngithub.com/BenLubar/git-last-modified/walk.go:18.2,18.43 1 0\ngithub.com/BenLubar/git-last-modified/walk.go:22.2,22.25 1 0\ngithub.com/BenLubar/git-last-modified/walk.go:9.16,11.3 1 0\ngithub.com/BenLubar/git-last-modified/walk.go:13.17,16.3 1 0\ngithub.com/BenLubar/git-last-modified/walk.go:18.43,20.3 1 0\ngithub.com/BenLubar/git-last-modified/main.go:19.14,23.2 3 1\ngithub.com/BenLubar/git-last-modified/main.go:25.28,26.16 1 1\ngithub.com/BenLubar/git-last-modified/main.go:26.16,27.19 1 1\ngithub.com/BenLubar/git-last-modified/main.go:32.3,32.10 1 1\ngithub.com/BenLubar/git-last-modified/main.go:27.19,29.4 1 1\ngithub.com/BenLubar/git-last-modified/main.go:29.9,31.4 1 1\ngithub.com/BenLubar/git-last-modified/main.go:36.13,38.51 2 0\ngithub.com/BenLubar/git-last-modified/main.go:41.2,41.17 1 0\ngithub.com/BenLubar/git-last-modified/main.go:45.2,46.21 2 0\ngithub.com/BenLubar/git-last-modified/main.go:38.51,40.3 1 0\ngithub.com/BenLubar/git-last-modified/main.go:41.17,43.3 1 0\ngithub.com/BenLubar/git-last-modified/main.go:46.21,49.3 2 0\ngithub.com/BenLubar/git-last-modified/main.go:49.8,50.30 1 0\ngithub.com/BenLubar/git-last-modified/main.go:50.30,52.4 1 0. go version go1.11rc1 windows/amd64. It seems to have exactly the same effect (that is, no coverage information is displayed in the editor, but it does generate coverage information in the temp folder). Here's the result of go tool cover -html: coverage.html.zip\n. ",
    "haritsfahreza": "Hi @ramya-rao-a, I got the same problem with @BenLubar and I tried the beta version of Go extension. Now, the code coverage works fine just like the previous Go version! Thankyou \ud83d\ude4f . ",
    "johanbrandhorst": "This fixed the build error for me! Thanks!. ",
    "nanohard": "Confirmed fix for me as well, same issue.. ",
    "adambkaplan": "SIGPIPE crash seems to happen on save as well. Running on macOS High Sierra.. Quite possible (I wasn't able to dig into nearly as much error detail).. @ramya-rao-a seems to be fixed now. I've also installed the latest VSCode update (1.26.1). Thanks!. ",
    "karthikraobr": "@ramya-rao-a  I have created a PR for fixing the coverage being removed on comments. Works only with single line comments. Any pointers on how to go about fixing this issue for multi-line comments.. Is this up for grabs? I can have a look at it, if available.. Hey @AlekSi! Even with your sample, I wasn't able to reproduce the issue. The lines following this code always ensure that the lint process is killed, before a new one is spawned.. Apologies for the multiple lint commits. Go dev here :) Hence the missing semi-colons.. In case of a deletion, the changed text is always \"\".  Also, the TextDocument object contains the text after the deletion has been performed.  Is there a way to get the deleted text, rather than an empty string? This is necessary in cases where multiple lines are deleted. How would I differentiate between deleting lines 1&2 and deleting lines 2&3.\n1.// hello world\n2.// hello again\n3.func sayHello() . > This will need some more time from my side to look into, I'll get back to this next week.\n@ramya-rao-a  could you please let me know if there has been an update on this?. hi @ramya-rao-a , any update on this? Thanks and sorry for the repeated reminders :). @ramya-rao-a any update on this and I apologise in advance :). golint has been moved from github to golangX. Hence the issue. This commit fixes that, but you will have to wait for a release or manually install golint.\n. @ramya-rao-a Could you have a look at this when you get some time. Thanks!. @ramya-rao-a  Fixed it.. @ramya-rao-a thanks for the review comments. I have incorporated most of your comments. Lemme know if I can do something better? . @ramya-rao-a could you have a look please :). Maybe related to this. . @ramya-rao-a I see that godoc has been removed in this commit. I guess we would have to stop pushing it here. I will revert my previous commit.. I think piece of code is responsible for the hover text. I am very bad at formatting/styling and  js/html, hence couldn't fix it :). @ramya-rao-a No idea why the test failed :(. @ramya-rao-a I am on the latest version of vscode and the plugin as well. But doesn't work for me. Moreover, a struct being displayed as a class is wrong. Finally, I might be wrong , but there is no code to detect classes right? Are you using a beta?. @ramya-rao-a Thanks a ton for fixing the regex. I have added tests for struct outline. Let me know if I need to add more tests.. This PR also fixes breadcrumbs for go files.. 2114 https://github.com/Microsoft/vscode-go/pull/2114 works fine.\nCheers,\nKaarthik\nOn Sun, Dec 2, 2018 at 7:47 AM Ramya Rao notifications@github.com wrote:\n\nIf you got a notification from this issue, then you are part of the next\nupdate to the Go extension.\nThanks and Welcome!\nHere I will be listing the features and the bug fixes that will go in the\nnext update along with the the folks who logged the bugs/feature requests,\nthose who upvoted it, and those who fixed it by sending PRs.\nThe idea is to get the folks behind this update to give the update a trial\nrun before I release it.\nI always do basic testing before every update. But because I dont work\nwith Go in my day job, I always feel that someone who does Go more than me\ncan help in testing tremendously.\nAnd when I say \"test\", you can do a minimum pass of just installing the\nupdate and then do nothing special other than going about using VS Code\nlike you do everyday. Or you can test the feature you requested/implemented\nor the bug you logged/fixed. Or you can test all of the below. Every bit\nhelps.\nDrop in a comment in this issue after 2 or 3 days of installing the update\nhttps://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension\nwith your findings.\n-\n@Charliekenney23 https://github.com/Charliekenney23, @buyology\n   https://github.com/buyology\n   - Support test functions with names Test, Example in codelens. Fixes Bug\n      2071 https://github.com/Microsoft/vscode-go/issues/2071 with PR\n      2072 https://github.com/Microsoft/vscode-go/pull/2072\n   -\n@brycekahle https://github.com/brycekahle, @quchunguang\n   https://github.com/quchunguang, @radu-matei\n   https://github.com/radu-matei\n   - Support setting of variables during debugging in the variable pane. Feature\n      Request 1129 https://github.com/Microsoft/vscode-go/issues/1129\n      implemented with PR 2076\n      https://github.com/Microsoft/vscode-go/pull/2076\n   -\n@brycekahle https://github.com/brycekahle, @willfaught\n   https://github.com/willfaught, @eternal-flame-AD\n   https://github.com/eternal-flame-AD\n   - Show pointer values during debugging in the variable pane. Feature\n      Request 1989 https://github.com/Microsoft/vscode-go/issues/1989\n      implemented with PR 2075\n      https://github.com/Microsoft/vscode-go/pull/2075\n   -\n@brycekahle https://github.com/brycekahle, @BlakeMScurr\n   https://github.com/BlakeMScurr\n   - Support the paging feature in stack traces during debugging. Feature\n      Request 946 https://github.com/Microsoft/vscode-go/issues/946\n      implemented with PR 2080\n      https://github.com/Microsoft/vscode-go/pull/2080\n   -\n@segevfiner https://github.com/segevfiner\n   - Avoid duplicate diagnostics when using tasks with build on save\n      feature. Fixes Bug 2100\n      https://github.com/Microsoft/vscode-go/issues/2100 with PR 2109\n      https://github.com/Microsoft/vscode-go/pull/2109\n   -\n@segevfiner https://github.com/segevfiner, @virtuald\n   https://github.com/virtuald\n   - Use dlv from the path set in the go.toolsGopath setting. Fixes Bug\n      2099 https://github.com/Microsoft/vscode-go/issues/2099 with PR\n      2108 https://github.com/Microsoft/vscode-go/pull/2108\n   -\n@karthikraobr https://github.com/karthikraobr\n   - Differentiate structs from interfaces in the outline view. PR 2114\n      https://github.com/Microsoft/vscode-go/pull/2114\n   -\n@hummerd https://github.com/hummerd, @segevfiner\n   https://github.com/segevfiner, @nezorflame\n   https://github.com/nezorflame\n   - Support the Go to Type Definition & Peek to Type Definition\n      commands. Feature Request 2121\n      https://github.com/Microsoft/vscode-go/issues/2121 implemented\n      with PR 2136 https://github.com/Microsoft/vscode-go/pull/2136\n   -\n@oneslash https://github.com/oneslash\n   - Fix error that shows up when typing if no packages are found. Fixes Bug\n      2134 https://github.com/Microsoft/vscode-go/issues/2134 with PR\n      2135 https://github.com/Microsoft/vscode-go/pull/2135\n   -\n@Ashniu123 https://github.com/Ashniu123\n   - Rebuild the package after running Go: Get Package to get rid of the\n      missing import errors. Fixes Bug 2087\n      https://github.com/Microsoft/vscode-go/issues/2087 with PR 2129\n      https://github.com/Microsoft/vscode-go/pull/2129\n   -\n@stamblerre https://github.com/stamblerre, @nezorflame\n   https://github.com/nezorflame, @gencer https://github.com/gencer\n   - Support modules when GO111MODULE is explicitly set. Fixes Bug 1944\n      https://github.com/Microsoft/vscode-go/issues/1944 with PR 2156\n      https://github.com/Microsoft/vscode-go/pull/2156\n   -\n@JPMoresmau https://github.com/JPMoresmau\n   - Fix bug where tests from another file are run due to partial match\n      of function names. Fixes Bug 2144\n      https://github.com/Microsoft/vscode-go/issues/2144 with PR 2155\n      https://github.com/Microsoft/vscode-go/pull/2155\n   -\n@zmb3 https://github.com/zmb3, @ssergiienko\n   https://github.com/ssergiienko, @oneslash\n   https://github.com/oneslash\n   - Close the gocode daemon when closing VS Code. Fixes Bug 2132\n      https://github.com/Microsoft/vscode-go/issues/2132 with PR 2137\n      https://github.com/Microsoft/vscode-go/pull/2137\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2164, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADm68nEqfRpUqbcM9Q9x8V_XWYbgB3nyks5u03eQgaJpZM4Y9ROg\n.\n. For block comments of the form / .... ,. I was thinking of the following solution\n\n\nScan backwards from current change until start of the document or until / is found to find /. This would be necessary in cases where the block comment starts on a line after the code and changes are made to the code. In this case we would have to clear the coverage.  Example\n\nreturn 0, err /*\n            one\n            two\n            three.\n        */\n\nScan forwards until */ is found or end of the document. \nCheck if change is within the above range.\n\nSeems very inefficient to me.  Is there a better way of doing it? Perhaps a vscode API to identify block comments?\n . Fixed. Will update the PR once I have fixed the block comment issue.. I guess it would be a good idea not to return as soon as we find that the change is a part of a comment. If another change which is not a part of a comment is found in a later iteration, then we would have to anyway remove the highlighting right?. I have updated the PR to resolve this issue.. Sure! Could you please point me to the tests currently present for unit test coverage? I am assuming that I would have to add some test fixtures here and then perform some assertions. . Thanks for the detailed explanation. . Could you please give me some pointers on how to write tests. I ran the tests and seems like currently there are no tests for code coverage.  I am assuming these would be the steps I would have to follow : \n\nCreate a go file with code and comments to cover all scenarios. \nWrite some tests for the above file and run them. (use testCurrentFile function).\nSelect some part of the code and delete/add (based on the scenarios in the if condition using applyUsingTextEditorEdit ).\nAnd check if coverage highlights have been removed or retained. (How do I achieve this?). I repeated this instead of creating a function because of the const and my understanding is that const variables can't be reassigned right? js noob here.. This is also a repetition since there is a ternary operator doing the same. Is there a cleaner way to do this?. Fully Qualified Name.Should I change the field name to Fully Qualified Name?. Thanks. I guess you are referring to an older version of my code. But, as you pointed out even the newer exp is not very strict. Will fix it and fix the tests.. For some reason, regex.test is always returning false if I use the above regex (IMO there is no problem with the regex). I even tried  let regex = new RegExp(`^\\s*type\\s${label}\\s+struct\\s*{`);.  Still returns false.. \n",
    "Sai-Venky": "Its working now .Thanks. ",
    "chrisduong": "Hi,\nI faced the same issue. I went back to 1.25.1. The problem is fixed.. ",
    "chadit": "same issue for me,  Manjaro (latest) full OS (no virtual machine), VS code 1.27.2. ",
    "cwoodfield": "I'm seeing the same issue on version 1.30.1. It seems the issue is more about memory saturation vs CPU - I counted 28 guru processes, each with a RSIZE between 200-300MBytes. On a 8GB Macbook running other apps (particularly Docker Desktop), this gummed things up but good for about 5-10 minutes.. ",
    "wopol": "Thank you for the response. I think that you have right and this is bug in delve debugger. I have last version delve (release 3 days ago) and still the same case. I also tried debugging directly in delve debugger and i got the same error \"Command failed: could not find /Users/wojciechpolus/go-workspace/src/location/scanner/transport.go:43\". ",
    "steelx": "Typing npm install everytime is needed. Sorry I didn't knew about this. New to GO land.\nSo I wrote a simple Gulpfile which watches for changes and runs go install everytime whenever .go file changes.\ngulpfile.js\n```javascript\nvar gulp = require('gulp');\nvar path = require('path');\nvar shell = require('gulp-shell');\nvar goPath = '/.go';\ngulp.task('compilepkg', function() {\n  return gulp.src(goPath, {read: false})\n    .pipe(shell(['go install <%= stripPath(file.path) %>'],\n      {\n          templateData: {\n            stripPath: function(filePath) {\n              var subPath = filePath.substring(process.cwd().length + 5);\n              var pkg = subPath.substring(0, subPath.lastIndexOf(path.sep));\n              return pkg;\n            }\n          }\n      })\n    );\n});\ngulp.task('watch', function() {\n  gulp.watch(goPath, ['compilepkg']);\n});\n```. ",
    "EmpireJones": "Good point, previously I had my main package outside of the 'root' directory that I was targeting, but now that all of my code is under the same domain-named folder, that solution seems to work! (aside from it being a bit more difficult to navigate to/around library code)\nTo illustrate what I was referring to, I made a basic project which you can check out with:\ngit clone --recurse-submodules git@github.com:EmpireJones/issue_example.git\nAll that I have in there is an empty main function, plus the tools that vscode-go or other addons requested to install.\nWhen the \"example\" repo folder is selected as the workspace folder root (and set as the go.gopath), I get errors about not being able to find:\ngolang.org/x/html\ngolang.org/x/net/html/atom\ngolang.org/x/net/websocket\nThe empty main function isn't using these packages, so they are not built when a normal build is performed (e.g. via the ./build script).. I don't think it's a an issue that go build is having the error, as vscode-go is specifically telling it to build those packages. For example:\n```\n/home/kevin/repos/example/src>Finished running tool: /usr/local/go/bin/go build -i -o /tmp/go-code-check.180164698 golang.org/x/tools/cmd/html2article\n/home/kevin/repos/example/src/golang.org/x/tools/cmd/html2article/conv.go:21: cannot find package \"golang.org/x/net/html\" in any of:\n/home/kevin/repos/example/src/golang.org/x/tools/cmd/html2article/conv.go:22: cannot find package \"golang.org/x/net/html/atom\" in any of:\n```\nI think the issue is more that vscode-go is not building 'full projects' the same way as go build intended. I think the typical way to build a project is by specifying an entrypoint file (e.g. main.go).\nBased on this, I think one solution might be to be able to set the entrypoint file(s) for the tool to build, which would result in a call such as:\ngo build -o /tmp/go-code-check.180164698 ./src/example.com/cmd/app/main.go\nThat'd build a lot faster too! The downside to that solution would be that it wouldn't build new packages that you were working on, which your entrypoints weren't yet (directly or indirectly) using. To work around this, it could build entrypoint files + current package (if triggered via a save).. The use case is that I'll be making code changes to package A, and I update package B to properly use those changes, but I won't find out that it also breaks package C too until I do a full build via a script (and it won't show up in the nice VSCode Problems UI).\nThis is one improvement that I was excited to get out of VSCode when switching from Atom. If we can't improve this build strategy, I think that selecting a narrower root as you described in https://github.com/Microsoft/vscode-go/issues/1861#issuecomment-414877862 solves most of the issues (although it takes a few seconds to build and show output currently, and doesn't let me explore packages from libraries as easily).\n\nBy \"entrypoint\" I meant the application launch file (i.e. file with main()). So yes, if I go to build my main package each time, that solves it, although it's inconvenient; that's what I did in Atom. Is there a command for building a particular package? Maybe I could hack together more shortcuts :). Thanks, I'll take a look at that.\nThanks for your time in working through this with me!. Would it make more sense for me to bring this up with the upstream vscode project, to trigger this event when saving a file with no changes?. This seems like an odd user experience decision, but maybe everyone else has a different workflow than me. I should be able to hack together some command sequences with the functionality described on https://github.com/Microsoft/vscode/issues/871.\nThanks for the quick response. This seems to do the trick! thanks!. I still haven't figured this one out. I have it working on one of two computers.\nKilling gocode processes and reinstalling gocode didn't help. I also tried rebooting and reinstalling the vscode-go extension.\nIs there any way to output details of the panic?. Figured out how to debug: gocode -s -debug from bin folder\nError is: panic: embedded struct field without name?\nhttps://github.com/mdempsky/gocode/blob/master/internal/lookdot/lookdot.go#L77\nnot sure if that helps me though.... Thanks, I created https://github.com/mdempsky/gocode/issues/66.\nI'm not using go modules.. ",
    "harikb": "Thanks for looking in to this. It may be related to the experimental languageServer option.\nThe problem disappears if I turn of this setting\n\"go.useLanguageServer\": true,\n\nHow can I help debug further? I was experimenting with language server option based on our previous exchange https://twitter.com/ramyanexus/status/1006404820557709312. Thank you @ramya-rao-a . Setting \"go.installDependenciesWhenBuilding\": false, seems to get rid of this problem. It worked for both cases of language-server on as well as off.. ",
    "huangjiasingle": "only like this \uff1a \n```\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"\")\n}\n```. @ramya-rao-a  thank u, l will notic it.. ",
    "mapl": "I've updated the title because the download fails and not the installation. its actually the anti-virus portion of a network proxy which blocks the download. proxy is symantec. - no, only vscode-go for now\n- it makes no difference, all available download options fail, since its traversing the proxy which blocks it. confirmed, also fails.\nWhen I try to use Winrar to open it, I also get an error.\ncb-never-called-1.0.1.tgz: Unexpected end of archive\nnode_modules\\tar\\test\\cb-never-called-1.0.1.tgz: The archive is corrupt\n. Download working now! Thank you for fixing this.\n. ",
    "leidegre": "@ramya-rao-a std library appears to be OK (most of the time) symbols from external packages, not so much. Symbols from current package, appear to work fine.\nIf I look in the statement completion list, it says invalid type for a lot of things.\n\nBut it can find the type in the current tcm package\n\nIt cannot find the type in a related but different package ddd:\n\nIf I change to a file that's in that package it works again.\n\nSo, It appears to work for the std library and current package but not my imported package. . @ramya-rao-a oh dear, thanks for the help! It did not fix the problem but I noticed something which might have been the root cause. However silly...\nI use this script to configure and launch my environment\n```batch\nset GOPATH=%~dp0\nset PATH=%PATH%;%GOPATH%\\bin\nstart code .\n```\nThe GOPATH was being set with a trailing backwards slash, i.e.\nWhen I reinstalled gocode\nInstalling 1 tool at C:\\Users\\leidegre\\Source\\tessin\\tcm\\tcm-backend\\\\bin\n  gocode\nNote the double backslash \\\\ at the end there.\nI changed by batch script to this\n```\nset ROOT=%~dp0\nset GOPATH=%ROOT:~0,-1%\nset PATH=%PATH%;%GOPATH%\\bin\nstart code .\n```\nAnd now it actually works. It seems silly that such a thing would cause this but I guess it did... I know that backslashes specifically on Windows can cause issues with command lines if they are at the end. If there's a shell execute somewhere in the tooling the there is a trailing backslash that could cause it.\n...I could do some further digging on this, at a later point, and see if I can suggest a fix or at the very least a warning for this.. @ramya-rao-a I'm crazy busy with a deadline this and next week but if this can remain open until then, I will get around to it, I care deeply for both the tooling and the VS Code ecosystem but since I have a viable workaround I will roll with it for now. If you want to jump on this before then, be my guest.. ",
    "abdullah2993": "I had the same issue turn out it only occur if you set a diffrent GOPATH from the terminal and open vscode from that teminal. The solution is to set go.toolsPath to you original GOPATH. ",
    "deef0000dragon1": "Have the same problem on two separate devices. It also has issues identifying package sources. \"Can not locate golang.org/x/something\" in ... \" though this disapears after the first go command that builds the .mod file. . ",
    "WangPengJu": "@deef0000dragon1  though this disapears after the first go command that builds the .mod file. \nhow to do?. @saibing  how to use  in vscode?. @saibing  thanks.  . ",
    "francoishill": "@WangPengJu most of the go commands of 1.11 should do that by default, for example go build in your working directory.. ",
    "andrewmeissner": "I just came across this as well.. ",
    "edp1096": "Auto completion feature in current version support well vendor path with GOPATH.\nIt would better to use go mod vendor during waiting update #1532 .\n. Works great too.\nI'm using inferGopath and using original GOPATH as only an area of extension's gotools.. Hello @ramya-rao-a ,\nFirst, $GOPATH/go.mod exists but should not at my first asking was my mistake, I set pkghello folder as global GOPATH in Integrated terminal.\ngo mod tidy have no problem at both reproduce step 1, 2.\nFor answering your question, no, pkghello folder is not under global GOPATH and also I set env variable GO111MODULE=on but inferGopath is set true in User Settings.\nWhen I turn off inferGopath in User Settings, error is disappeared but pkg folder is created in global GOPATH.\nThere is no problem to work but I don't want to mix files which come from several project's dependencies.\nIs there needed that inferGopath should be set false?\nAdd.\nWhen remove import comment, it works fine.. No, no, not my source file(s), just package(s).\nBelow is folder tree which I'm using.\nsh\nC:.\n\u251c\u2500tools\n\u2502  \u2514\u2500gotools            => Global $GOPATH\n\u2502     \u2514\u2500bin\n\u2514\u2500workspace\n    \u2514\u2500pkghello          => VSCode workspace root\n       \u2514\u2500src\n           \u2514\u2500pkghello   => My source file, pkghello.go in here\nAfter go mod init,\n go mod tidy in integrated terminal, module is always downloaded & created to tools/gotools\n  It was my mistake too, sorry.\n When opening workspace or saving pkghello.go\n  * If inferGopath is false,\n    * module is downloaded & created to folder under tools/gotools\n    * Error is not appeared\n  * If inferGopath is true,\n    * module is downloaded & created to folder under workspace/pkghello\n    * Error showing\n* When edit import comment to // import \"pkghello, Error is not appeared.\nFrom above, maybe inferGopath is needed set to false, right?\n. Because, I want to manage each projects separately. I don't want to mix pkg from several projects as my previous mention.\nWith dep, go.inferGopath gave me huge help until go 1.10.  \nAs #2 in this, I understood that go mod & project in gopath would give same effect as using dep, but maybe not :'(.\nThank you for your kindness.\nClosing.. Perhaps go-langserver's problem. auto completion also not work.\nclosing.\n. ",
    "coreyog": "I reopened the project to investigate further and when I moused over the import with it's red squiggly line, I got this error:\n\nbuild constraints exclude all Go files in /usr/local/go/src/syscall/js\n\nI think the plugin doesn't use an altered GOOS and GOARCH when checking the code for errors.\nI tried setting go.toolsEnvVars in the project settings but I'm still getting the could not import error on the import.. In Output I see:\n\n/home/corey/src/goprojects/src/wasm-hw>Finished running tool: /home/corey/src/goprojects/bin/golint\n/home/corey/src/goprojects/src/wasm-hw>Finished running tool: /usr/local/go/bin/go build -i -o /tmp/go-code-check.198072839 wasm-hw\ngo build runtime/internal/atomic: mkdir /usr/local/go/pkg/js_wasm: permission denied\ngo build runtime/internal/sys: open /usr/local/go/pkg/js_wasm/runtime/internal/sys.a: no such file or directory\ngo build internal/race: mkdir /usr/local/go/pkg/js_wasm: permission denied\ngo build sync/atomic: mkdir /usr/local/go/pkg/js_wasm: permission denied\ngo build internal/cpu: open /usr/local/go/pkg/js_wasm/internal/cpu.a: no such file or directory\n/home/corey/src/goprojects/src/wasm-hw>Finished running tool: /usr/local/go/bin/go vet ./...\n\nI've set my go.toolsEnvVars as follows:\n{\n  \"go.toolsEnvVars\": {\n    \"GOOS\": \"js\",\n    \"GOARCH\": \"wasm\",\n    \"GOROOT\": \"/usr/local/go\",\n    \"GOPATH\": \"/home/corey/src/goprojects\"\n  }\n}\nGoRoot and GoPath reflect what the normal env variables are. I'm still getting the could not import error. I'm not sure why it's trying to do things in my /usr/local/go folder or how to tell it to build those files in $GOPATH/pkg.\nAdding write privileges to the $GOROOT/pkg folder not only feels like a bad move, but it also doesn't entirely fix the problem. The error goes away but there's no intellisense for anything under js.. No, I am not. As shown by my minimal code sample above.. ",
    "eternal-flame-AD": "Experiencing the same issue.. @ramya-rao-a Thanks, I followed your steps and the error is not coming out. However, there is still no IntelliSense for syscall/js package.. It indeed said zero candidates. I guess that's an upstream issue then.. I tried setting env before starting gocode but it is still not spawning candidates :(. I was NOT using modules. :) @ramya-rao-a . I ran the command and $GOPATH/pkg/js_wasm dir appeared. However, the IntelliSense wasn't fixed.. Yep I think the problem was still there:(\n```\n ~/code/go/src/github.com/eternal-flame-AD/hellowasm \ue0b0 ls /usr/lib/go/pkg\ninclude  js_wasm  linux_amd64  linux_amd64_dynlink  linux_amd64_race  linux_amd64_shared  linux_amd64_testcshared_shared  obj  tool\n ~/code/go/src/github.com/eternal-flame-AD/hellowasm \ue0b0 kill 1521\n ~/code/go/src/github.com/eternal-flame-AD/hellowasm \ue0b0 kill 32471\n ~/code/go/src/github.com/eternal-flame-AD/hellowasm \ue0b0 rm /tmp/gocode-daemon.ef\n ~/code/go/src/github.com/eternal-flame-AD/hellowasm \ue0b0 env GOOS=js GOARCH=wasm gocode -s --debug\n2018/09/13 12:38:22 Got autocompletion request for '/home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go'\n2018/09/13 12:38:22 Cursor at: 99\n2018/09/13 12:38:22 -------------------------------------------------------\npackage main\nimport (\n        \"fmt\"\n        \"syscall/js\"\n)\nfunc main() {\n        fmt.Println(\"loaded\")\n        js.Global()\n        j#s.\n}\n2018/09/13 12:38:22 -------------------------------------------------------\n2018/09/13 12:38:22 Error parsing input file (outer block):\n2018/09/13 12:38:22  /home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go:12:1: expected selector or type assertion, found '}'\n2018/09/13 12:38:22  /home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go:12:3: expected ';', found 'EOF'\n2018/09/13 12:38:22  /home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go:12:3: expected '}', found 'EOF'\n2018/09/13 12:38:22 Elapsed duration: 2.52415ms\n2018/09/13 12:38:22 Offset: 0\n2018/09/13 12:38:22 Number of candidates found: 1\n2018/09/13 12:38:22 Candidates are:\n2018/09/13 12:38:22   package js\n2018/09/13 12:38:22 =======================================================\n2018/09/13 12:38:22 Got autocompletion request for '/home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go'\n2018/09/13 12:38:22 Cursor at: 101\n2018/09/13 12:38:22 -------------------------------------------------------\npackage main\nimport (\n        \"fmt\"\n        \"syscall/js\"\n)\nfunc main() {\n        fmt.Println(\"loaded\")\n        js.Global()\n        js.#\n}\n2018/09/13 12:38:22 -------------------------------------------------------\n2018/09/13 12:38:22 Error parsing input file (outer block):\n2018/09/13 12:38:22  /home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go:11:5: expected selector or type assertion, found ';'\n2018/09/13 12:38:22 Elapsed duration: 2.981524ms\n2018/09/13 12:38:22 Offset: 0\n2018/09/13 12:38:22 Number of candidates found: 0\n2018/09/13 12:38:22 Candidates are:\n2018/09/13 12:38:22 =======================================================\n2018/09/13 12:38:22 Got autocompletion request for '/home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go'\n2018/09/13 12:38:22 Cursor at: 121\n2018/09/13 12:38:22 -------------------------------------------------------\npackage main\nimport \"syscall/js\"\nimport (\n        \"fmt\"\n        \"syscall/js\"\n)\nfunc main() {\n        fmt.Println(\"loaded\")\n        js.Global()\n        js.#\n}\n2018/09/13 12:38:22 -------------------------------------------------------\n2018/09/13 12:38:22 Error parsing input file (outer block):\n2018/09/13 12:38:22  /home/ef/code/go/src/github.com/eternal-flame-AD/hellowasm/main.go:12:5: expected selector or type assertion, found ';'\n2018/09/13 12:38:22 Elapsed duration: 2.52288ms\n2018/09/13 12:38:22 Offset: 0\n2018/09/13 12:38:22 Number of candidates found: 0\n2018/09/13 12:38:22 Candidates are:\n2018/09/13 12:38:22 =======================================================\n.\n ~ \ue0b0 cat code/go/src/github.com/eternal-flame-AD/hellowasm/.vscode/settings.json \n{\n    \"go.toolsEnvVars\": {\n        \"GOARCH\":\"wasm\",\n        \"GOOS\":\"js\",\n    },\n    \"go.testEnvVars\": {\n        \"GOARCH\":\"wasm\",\n        \"GOOS\":\"js\",\n    },\n    \"go.installDependenciesWhenBuilding\": false,\n}\n``. I think this issue should be reopened. I dug a little through the vscode-go code and found this line which masked allGOARCHandGOOS` env.\nhttps://github.com/Microsoft/vscode-go/blob/d1a9f9a8cd7428c552517d72af148b7b116b9ed0/src/goSuggest.ts#L185\nAfter I got rid of this in a dev environment, the suggestions worked perfectly.. I am not sure how to reproduce the issue mentioned on the code comments before this line. However I think we should definitely at least add an exception for wasm/js. Yep.\nI found that when GOOS and GOARCH are set, gocode barely tracks import correctly:( I have to run like sudo env GOOS=js GOARCH=wasm go install math/rand in order to get math/rand suggestions working on wasm/js\nI found a solution to the problem that is enabling source import when spawning gocode daemon. Should we include this change in the PR?\n```diff\ndiff --git a/src/goSuggest.ts b/src/goSuggest.ts\nindex a5d9e66..40a63d1 100644\n--- a/src/goSuggest.ts\n+++ b/src/goSuggest.ts\n@@ -187,14 +187,11 @@ export class GoCompletionItemProvider implements vscode.CompletionItemProvider {\n                return reject();\n            }\n\n// Unset GOOS and GOARCH for the gocode process to ensure that GOHOSTOS and GOHOSTARCH\n// are used as the target operating system and architecture. gocode is unable to provide\n// autocompletion when the Go environment is configured for cross compilation.\nlet env = Object.assign({}, getToolsEnvVars(), { GOOS: '', GOARCH: '' });\n\nlet env = Object.assign({}, getToolsEnvVars());\n            let stdout = '';\n            let stderr = '';\n\n\nlet goCodeFlags = ['-f=json'];\n\nlet goCodeFlags = ['-f=json','-source=true'];\n            if (!this.setGocodeOptions) {\n                goCodeFlags.push('-builtin');\n            }\n\n``. Yeah. Or maybe only enabling this when cross compiling?. I think we could move this discussion to #2015 as the corrent topic is more related to detailed implementation of the fix.. I usually watchuintptr(x)to obtain the pointer value. Probably a hack but I think that helps in your case:). Yes, I think the problem is resolved now with the updatedgocode:). Yes, the change is needed because otherwise there would be of no waygocode` could get the build context.. #1989 Looks great. ",
    "Rhionin": "Bless you for building this! I've been dying for this feature!. ",
    "andrewrynhard": "Using GO111MODULE=auto fixed this for me.. I am.. I am.. ",
    "llitfkitfk": "```\nmkdir /tmp/vscode-go\ncd /tmp/vscode-go\ngo mod init vscode-go\ngo get -u -v github.com/mdempsky/gocode \ngo get -u -v github.com/uudashr/gopkgs/cmd/gopkgs \ngo get -u -v github.com/ramya-rao-a/go-outline \ngo get -u -v github.com/acroca/go-symbols \ngo get -u -v golang.org/x/tools/cmd/guru \ngo get -u -v golang.org/x/tools/cmd/gorename \ngo get -u -v github.com/derekparker/delve/cmd/dlv \ngo get -u -v github.com/rogpeppe/godef \ngo get -u -v golang.org/x/tools/cmd/godoc \ngo get -u -v github.com/sqs/goreturns \ngo get -u -v github.com/golang/lint/golint \ngo get -u -v github.com/alecthomas/gometalinter \ngo get -u -v github.com/cweill/gotests/... \ngo get -u -v github.com/fatih/gomodifytags \ngo get -u -v github.com/josharian/impl \ngo get -u -v github.com/davidrjenni/reftools/cmd/fillstruct \ngo get -u -v github.com/haya14busa/goplay/cmd/goplay \n```. ",
    "db47h": "gotests does not support this right now, see cweill/gotests/issues/35. Keep in mind that themes tend to do their own thing:\n\nThe same snippet of code with the default theme on the left and the 1337 theme on the right. The 1337 theme manages to display rune the same as int, yet handle map and chan differently. It even goes as far as colourize the <-! The 1337 theme is the one that gets it right IMO.\nNevertheless, the Go spec says that rune is an alias for int32, likewise byte is an alias for uint8, so there's no reason to treat rune differently from byte or any other basic type.\n. @willfaught : After a bit of digging, it turns out that Go's syntax highlighting is defined in vscode's core in code/resources/app/extensions/go/syntaxes/go.tmLanguage.json.\nHere's the interesting bit:\njson\n\"storage_types\": {\n                        \"patterns\": [\n                                {\n                                        \"match\": \"\\\\bbool\\\\b\",\n                                        \"name\": \"storage.type.boolean.go\"\n                                },\n                                {\n                                        \"match\": \"\\\\bbyte\\\\b\",\n                                        \"name\": \"storage.type.byte.go\"\n                                },\n                                {\n                                        \"match\": \"\\\\berror\\\\b\",\n                                        \"name\": \"storage.type.error.go\"\n                                },\n                                {\n                                        \"match\": \"\\\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\\\b\",\n                                        \"name\": \"storage.type.numeric.go\"\n                                },\n                                {\n                                        \"match\": \"\\\\brune\\\\b\",\n                                        \"name\": \"storage.type.rune.go\"\n                                },\n                                {\n                                        \"match\": \"\\\\bstring\\\\b\",\n                                        \"name\": \"storage.type.string.go\"\n                                },\n                                {\n                                        \"match\": \"\\\\buintptr\\\\b\",\n                                        \"name\": \"storage.type.uintptr.go\"\n                                }\n                        ]\n                },\nAs you can see all storage types are defined properly, so the problem is with the theme you are using that handles storage.type.rune differently. You should report this issue to the theme creator (since it seems you're using the default theme, that would be the vscode main repo).\nOn a side note, map and chan are defined as keywords (as they should). . @jpap This is the default behavior for dlv to stop at the beginning of fatalpanic when a Go program panics. While I agree that this might be confusing, panics can occur anywhere, even in the standard library (IIRC, some string to int conversion functions do), so it's not easy to guess which stack frame the user will really be interested in. In any case that specific issue should be taken to https://github.com/derekparker/delve/.\nAlso, in order to have vscode automatically switch to debug view on panic, you can set \n\"debug.openDebug\": \"openOnDebugBreak\",\nor\n\"debug.openDebug\": \"openOnSessionStart\"\nin your user settings.. I did test with the code sample you've provided on Linux, Go 1.11, vscode 1.26.1 and latest dlv (at the time of writing). What's strange is that I don't get any \"Failed to continue ...\" message in the vscode debug console and if I debug it directly from dlv on the command line, dlv halts at fatalpanic as expected.\nFrom the backtrace I see that you're running Go 1.11, but what operating system are you on?. This could be related to derekparker/delve#852. Still, since delve catches the nil pointer dereference (that's what the \"bad access\" means), the debug view in vscode should not be blank.. ",
    "ragurney": "Thanks for the fast response @ramya-rao-a! No, I don't believe I am using go.mod.. There's one error in the console:\n[xabikos.JavaScriptSnippets]: Unknown language in `contributes.JavaScriptSnippets.language`. Provided value: vue\nw._logMessageInConsole @ workbench.main.js:sourcemap:3225\nbut I think that has to do with a different extension?\nRunning\n$ Users/rygurney/go/bin/gopkgs -format \"{{.Name}};{{.ImportPath}}\"\ngives a ton of results. \n. @ramya-rao-a yes, a particular package is there, e.g.: \n```\n$ /Users/rygurney/go/bin/gopkgs -format \"{{.Name}};{{.ImportPath}}\" | grep service/codepipeline\ncodepipelineiface;github.com/aws/aws-sdk-go/service/codepipeline/codepipelineiface\ncodepipeline;github.com/aws/aws-sdk-go/service/codepipeline\n``\nhowever, prior to the upgrade the autocomplete would list package suggestions even with justgit` typed.\nI have not set the go.toolsGopath setting. The only go settings I have specified are:\n\"go.formatTool\": \"gofmt\",\n\"go.autocompleteUnimportedPackages\": true\nI also just tried switching back to Go v1.10.1 and reinstalling all tools and autocomplete did not start working again -- and previously I did not have autocompleteUnimportedPackages set and it was still working \ud83e\udd14 . @ramya-rao-a will do. I'll try to dig into it this weekend when I have some more time. Thanks a lot for your suggestions so far!. @ramya-rao-a no worries, never hurts to have more places I can find the instructions :D . Digging into the code a little bit: \nhttps://github.com/Microsoft/vscode-go/blob/c8ed6b122714e9bba6800602258bbe7ded3545c0/src/goSuggest.ts#L103\nalways returns false, because !inString is always true when typing \"github.com/...\" in an import statement. I'm pretty confused, because from what I remember the the package autocomplete functionality worked before by typing the package prefix (e.g. \"github.com...\") or a part of the package path and it would list packages that matched, kind of like a fuzzy search. That's how I was testing this, which is why I wasn't getting any results. Now, however, it seems to be working when I type the name of the package not in double quotes:\n \nwhich I'm guessing is the expected behavior of this extension \nMaybe I was unknowingly using some other package autocomplete functionality provided by another extension? Regardless, I think this issue can now be closed if @ramya-rao-a can confirm this is how it's supposed to work.. @randallmlough can you try that command with quotes around the argument? e.g. \"{{.Name}};{{.ImportPath}}\"?. @ramya-rao-a no worries it was completely my fault. I should have been more clear. Thanks for the information, and sorry for wasting your time on this issue \ud83d\ude05 . Have you tried going to commands, selecting Go: Install/Update Tools and selecting gocode? That fixed this issue for me. . Needs a test, having trouble getting the test.go file to work. . @ramya-rao-a I can run the existing tests, but four fail consistently each time: \n```\n  1) Go Extension Tests\nbase.js:240\n       Test Definition Provider using gogetdoc:\n     TypeError: Cannot read property 'uri' of null\n      at vscode.workspace.openTextDocument.then.provider.provideDefinition.then.definitionInfo (/Users/rygurney/Code/personal/vscode-go/test/go.test.ts:92:33)\n      at \n  2) Go Extension Tests\nbase.js:240\n       Test SignatureHelp Provider using gogetdoc:\n     TypeError: Cannot read property 'signatures' of null\n      at vscode.workspace.openTextDocument.then.testCases.map.provider.provideSignatureHelp.then.sigHelp (/Users/rygurney/Code/personal/vscode-go/test/go.test.ts:108:27)\n      at \n  3) Go Extension Tests\nbase.js:240\n       Test Hover Provider using gogetdoc:\n     TypeError: Cannot read property 'contents' of null\n      at vscode.workspace.openTextDocument.then.testCases.map.provider.provideHover.then.res (/Users/rygurney/Code/personal/vscode-go/test/go.test.ts:141:80)\n      at \n  4) Go Extension Tests\nbase.js:240\n       Gometalinter error checking:\n      AssertionError [ERR_ASSERTION]: Failed to get linter results\n      + expected - actual\n      -false\n      +true\n  at util_1.getGoVersion.then.goCheck_1.check.then.diagnostics (/Users/rygurney/Code/personal/vscode-go/test/go.test.ts:404:12)\n  at <anonymous>\n  at process._tickCallback (internal/process/next_tick.js:188:7)\n\n```\nWhen trying to add a line such as var _ string = \"foo\", I get two new failures as well, which I haven't had time to look into yet and address. I'll try to get to the bottom of this tonight!. @ramya-rao-a sounds good, thanks! I think this PR is ready for another review. . Blank identifiers in outline fix looks good :shipit: . ",
    "ShoshinNikita": "Go version: go1.11 windows/amd64\nOS: Windows 10\nI had the same problem, but I solved it with some magic)\nSteps:\n1. Delete %GOPATH%/bin/gocode.exe and %GOPATH%/src/github.com/mdempsky/gocode\n1. Install github.com/nsf/gocode (run go get -u github.com/nsf/gocode)\n1. Open VSCode. It should suggest to install github.com/mdempsky/gocode. Accept.\n1. After installing autocompletion works, except import, but it is better, than nothing)\nI'm not sure it can help, but decided to share my solution.. @ramya-rao-a go.autocompleteUnimportedPackages: true didn't help.. I found an interesting thing. Autocompletion doesn't work if you import packages from custom GOPATH.\nFor instance, I have a project with GOPATH=%REPOS%/project. All packages for it are kept in %REPOS%/project/src. Also I have global GOPATH=%USERPROFILE%/go. I use it for tools (gocode, godoc and etc.), so, there's \"go.toolsGopath\": \"%USERPROFILE%/go\" in my settings.json.\nIf I save package in %REPOS%/project/src, autocompletion won't work, but if I add global GOPATH into custom (%REPOS%/project;%USERPROFILE%/go) and save package into global GOPATH, autocompletion will work. It can't resolve a problem with autocompletion of internal packages. But it's better, than nothing.. ",
    "Ilyes512": "Steps I took on MacOS that made it work again using go1.11:\n\nMake sure vscode is not running and open \"Activity Monitor\" and select the \"Memory\" tab. Search for \"gocode\", if one is running, select it and stop it.\nRemove old bin: $ rm $GOPATH/bin/gocode and source rm -rf $GOPATH/src/github.com/mdempsky/gocode\nRun go get -u github.com/mdempsky/gocode.\nOpen vscode and try and trigger an autocomplete. A popup should show and ask you if you want to install gocode (Accept).\n\nI think step 3 might not be needed, but it was I did and not going to try it again to find out :). @ramya-rao-a Yes, for core non-imported package like fmt. Not sure if you also mean non-core package (for those I don't get autocompletions until I import them).. Without importing any of the packages in a new file:\nI do get autocompletions for Mux, but I don't seem to get autocompletion for log nor (net/)http, but I do get autocompletion for fmt? Okey strange.... ",
    "randallmlough": "+1 for this issue. All I've changed is upgrading to Go 1.11 and VS no longer auto imports or shows suggestions. I followed @Ilyes512 suggestion, however that did not work for me. Also @ramya-rao-a I confirmed that I have autocomplete set to true. \nAlso worth mentioning, I get this message every time I open VS.\n\nI tried running the command as mentioned earlier in this thread which all I get is this\n\nMy current projects are still in default goroot directory and as mentioned the only change I've made is upgrading to 1.11. @ragurney - doing the above in the VS and terminal shell (using zsh) I got \"gopkgs command not found\" which I thought was interesting since everything before worked. So I looked up the package and did the std go get https://github.com/uudashr/gopkgs, restarted everything and still nothing worked. I then verified that VS has access to the right go env variables and can run standard GO commands (I typically dont work out of the VS shell) \u2013 it can. So I then manually executed the package ($ sudo $GOPATH/bin/gopkgs -format \"{{.Name}};{{.ImportPath}}\" from VS. Once I did this it finally listed all my packages, but still nothing would auto import or autocomplete. I restarted VS and was again prompted with the message \"Ensure gopkgs -format...\" I'm at a loss. . ",
    "brainsnail": "I'll take a look at this one on the Atom repository. Should be fun \ud83d\udc4d . If @jeffb4 isn't working on it. I'd be interested in taking a shot at it. . Hey @ramya-rao-a! \nI've got something sort-of-working in a branch, but I keep running into \"ENOENT: no such file or directory, open '[rootdirectoryofrepo]/.gitmodules' when switching to the file option for lintOnSave. The call stack has the proper linting occurring - I'm declaring a variable and not using it in my Go code, but the lint result isn't it making it back up to the dev instance of VS Code. \nI'm not super familiar with the TypeScript / JavaScript workflow, so I apologize if there is an obvious approach to this that I haven't taken yet.  Any suggestions?. @ramya-rao-a Yep, absolutely - https://github.com/brainsnail/vscode-go - I intend to clean up what I added in goLint.ts once I am able to verify the functionality, so this is definitely a WIP. . Thank you @ramya-rao-a for being so patient and providing guidance as well!. @ramya-rao-a As far as I know there hasn't been an update on that PR, but I'm fine with taking a look at this PR instead \ud83d\ude04\nI'll take a look at it this soon @calebdoxsey. \n . I tried it out with a few different repos that had modules enabled and did some go mod init-ing on a few others to see how it handled the highlighting. As far as that goes - I think it works great. It highlighted the proper keywords on the go.mod files, gave appropriate highlighting on versions and kept comment formatting. The go.sum file highlights the most important piece - the version.\nSuper glad to see it moving forward \ud83d\udc4d . Thanks! I was wondering about this. I took your advice and passed a string value around. It cleans up the signatures. \nI appreciate the feedback \ud83d\ude04 . I think I agree about using that regex instead - I wrote one by hand on the Atom repo, but we may want to just use the same regex as the one the language uses. . Can we call this Go Checksum File? It's a minor nitpick.. I think you are right - the code they use to validate the semver is here. \nIn testing out your branch locally I didn't experience any problems.. ",
    "crawshaw": "Yes, via the vim plugin I regularly use g-d to go to definition. All of the jumps are fast and correct, I assume I try it on an invalid name at some point and it starts spinning.\nIs there some debug log I can provide to narrow this down?. My only two plugins are vim and go. I'm not certain that vim is using the Go to definition and not Go to symbol in workspace.\nIt will reliably replicate after ~10 minutes of programming. But I haven't been able to narrow down the exact event that triggers it. If there's a log I can turn on, I could record it for my session and dissect it to find the go-symbols call that is broken.. ",
    "abradley2": "Having this issue as well. Specifically it happens when I'm using the new modules feature. But I guess given the issue mentioned it isn't specifically related. Let me know if there's any further details I can provide to help out.\nAlso, in my case, autocomplete suggestions for standard libs like fmt are working just fine.\nAlso, also- in my case my project isn't in my GOPATH or anything which is fine since I'm using the modules feature.\nMy GOROOT is $HOME/go, my GOPATH is $HOME/Desktop/go-stuff, and my project path I have my vscode workspace in is $HOME/Desktop/git/my-fun-go-module\nEDIT\nmore updates. Getting the exact same issue with similar plugins with Atom, with the invalid type warning an all as well. So probably not explicitly related to this extension in particular. ",
    "jpfielding": "@ragurney didnt work for me until i included both gocode and gopkgs.  got it though, thanks!. ",
    "Lercher": "Hi, had the same problem, only in the go mod init case. Plus I'm using a custom GOBIN. Two different versions of gocode.exe existed, one in GOPATH/bin (old) and one in GOBIN (new). It turned out eventually, that \"Go: Install/Update Tools\" builds gocode to GOBIN but the extension started the old one from GOPATH/bin (via PATH?) that panics. So I deleted all the tools in GOPATH/bin and the extension asked for a tool rebuild. After that, intellisense worked again.\nDetails:\n````\n\ngo env\nset GOARCH=amd64\nset GOBIN=d:\\bin\nset GOCACHE=d:\\Profiles\\mlercher\\AppData\\Local\\go-build\nset GOEXE=.exe\nset GOFLAGS=\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=d:\\Profiles\\mlercher\\go\nset GOPROXY=\nset GORACE=\nset GOROOT=C:\\Go\nset GOTMPDIR=\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\nset GCCGO=gccgo\nset CC=gcc\nset CXX=g++\nset CGO_ENABLED=1\nset GOMOD=D:\\Daten\\Go\\src\\innersource.soprasteria.com\\BU270\\casconfig\\go.mod\nset CGO_CFLAGS=-g -O2\nset CGO_CPPFLAGS=\nset CGO_CXXFLAGS=-g -O2\nset CGO_FFLAGS=-g -O2\nset CGO_LDFLAGS=-g -O2\nset PKG_CONFIG=pkg-config\nset GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=d:\\Profiles\\mlercher\\AppData\\Local\\Temp\\go-build054212822=/tmp/go-build -gno-record-gcc-switches\ngo version\ngo version go1.11 windows/amd64\n````\n\nI guess, it's a bug, that the extension won't load what it built before.\nHope that helps, Martin.. ",
    "cryptix": "I had multiple strange behaviors when opening a go.mod project outside of a gopath setup.\n\nwhen using Go to Definition (F12), even on types in the same project, not a module. The loading bar just doesn't finish.\non one instance go vet somehow populated with all the go tools dependencies into my projects go.mod (a seperate tidy cleaned it up) even though I was using separate go.toolsdir settings.\nit doesn't format with gofmt\nand like @phenixrizen said, doesn't autocomplete\n\nI haven't been able to reproduce this one yet but vscode-go generally feels sluggish in go module mode so I haven't tested that much further.. ",
    "rvjc": "BTW, interestingly, when a I launch a terminal from within VS Code, it picks up my project-specific environment variables; so I assume it would be a relatively minor matter to do likewise when initialising extensions.. Actually, we solved the problem and, with great embarrassment, I must admit that it was at our end.\nTurned out to be an incongruous little artefact from previous IDE.\nHow often does this happen just after you post a bug report? :-)\nSo, just to reassure anyone who comes across this post:\n\nThe Go Extension picks up the environment of parent VS Code process (as expected).\nIt is very feasible to support different projects with different Go versions on the same machine.\n\n. ",
    "yeqown": "@ramya-rao-a \nYes, I have completed a similar tool, but I am not sure if it can be integrated into the Go extension?\nHere is the link of my tool: github.com/yeqown/dto\nCurrently the tool finishes reading the original structure from the specified file and generating a new structure and storing it in a file.. dto(Data transfer Object) I saw this name in Java. @ramya-rao-a \nThank you for your reply. I have looked at some of the existing tools and found that my tools are not perfect. Perhaps, I should improve it first. . .. ",
    "titogeorge": "Tested on Ubuntu 18.4 LTS. Works!\n```\n\n$ go version                                                                                                                                                                   \ngo version go1.10.2 linux/amd64\n```. \n",
    "vale910": "Hi! We just hit a comparable flaw in our code including triggered panic in Go on a Mac leading to the output \"Failed to continue - bad access\" on VS Code version 1.28.1. . ",
    "oldmannt": "This happens to me too. Mac, go1.11, latest VSC, latest delve.\ntriggered panic then output \"Failed to continue - bad access\" but nothing else.\nNo stack trace, no source line.. ",
    "MylioFabien": "I'm also seeing this issue.\nMy setup:\n. macOS Mojave v10.14\n. Delve Debugger Version: 1.1.0 Build: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $\n. VSCode 1.28.2 (7f3ce96ff4729c91352ae6def877e59c561f4850)\n. go version go1.11.2 darwin/amd64\nIn the debug console, VSCode reports \"Failed to next - bad access\".\n\nHowever, when using Delve directly, the stack is fine:\n```\n~/go/bin/dlv debug ts.go\nType 'help' for list of commands.\n(dlv) c\n\nsyscall.Syscall() /usr/local/go/src/syscall/asm_darwin_amd64.s:26 (PC: 0x10a4166)\nCommand failed: bad access\n(dlv) bt\n 0  0x00000000010a4166 in syscall.Syscall\n    at /usr/local/go/src/syscall/asm_darwin_amd64.s:26\n 1  0x00000000010a378a in syscall.read\n    at /usr/local/go/src/syscall/zsyscall_darwin_amd64.go:947\n 2  0x00000000010a07ec in syscall.Read\n    at /usr/local/go/src/syscall/syscall_unix.go:172\n 3  0x00000000010c34f4 in internal/poll.(FD).Read\n    at /usr/local/go/src/internal/poll/fd_unix.go:165\n 4  0x00000000010cd2b9 in os.(File).read\n    at /usr/local/go/src/os/file_unix.go:249\n 5  0x00000000010ca08d in os.(File).Read\n    at /usr/local/go/src/os/file.go:108\n 6  0x000000000107a15d in bytes.(Buffer).ReadFrom\n    at /usr/local/go/src/bytes/buffer.go:206\n 7  0x00000000011aa4ff in io/ioutil.readAll\n    at /usr/local/go/src/io/ioutil/ioutil.go:36\n 8  0x00000000011aa967 in io/ioutil.ReadFile\n    at /usr/local/go/src/io/ioutil/ioutil.go:73\n 9  0x000000000141800f in main.(*Config).Load\n    at ./ts.go:61\n10  0x0000000001430ac9 in main.main\n    at ./ts.go:1959\n11  0x0000000001032635 in runtime.main\n    at /usr/local/go/src/runtime/proc.go:201\n12  0x000000000105fc31 in runtime.goexit\n    at /usr/local/go/src/runtime/asm_amd64.s:1333\n```\n\nThe code leading to this is simply reading a file relative to the Go executable:\nbytes, err := ioutil.ReadFile(path)\n. I'm also seeing this issue.\nMy setup:\n. macOS Mojave v10.14\n. Delve Debugger Version: 1.1.0 Build: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $\n. VSCode 1.28.2 (7f3ce96ff4729c91352ae6def877e59c561f4850)\n. go version go1.11.2 darwin/amd64\nIn the debug console, VSCode reports \"Failed to next - bad access\".\n\nHowever, when using Delve directly, the stack is fine:\n```\n~/go/bin/dlv debug ts.go\nType 'help' for list of commands.\n(dlv) c\n\nsyscall.Syscall() /usr/local/go/src/syscall/asm_darwin_amd64.s:26 (PC: 0x10a4166)\nCommand failed: bad access\n(dlv) bt\n 0  0x00000000010a4166 in syscall.Syscall\n    at /usr/local/go/src/syscall/asm_darwin_amd64.s:26\n 1  0x00000000010a378a in syscall.read\n    at /usr/local/go/src/syscall/zsyscall_darwin_amd64.go:947\n 2  0x00000000010a07ec in syscall.Read\n    at /usr/local/go/src/syscall/syscall_unix.go:172\n 3  0x00000000010c34f4 in internal/poll.(FD).Read\n    at /usr/local/go/src/internal/poll/fd_unix.go:165\n 4  0x00000000010cd2b9 in os.(File).read\n    at /usr/local/go/src/os/file_unix.go:249\n 5  0x00000000010ca08d in os.(File).Read\n    at /usr/local/go/src/os/file.go:108\n 6  0x000000000107a15d in bytes.(Buffer).ReadFrom\n    at /usr/local/go/src/bytes/buffer.go:206\n 7  0x00000000011aa4ff in io/ioutil.readAll\n    at /usr/local/go/src/io/ioutil/ioutil.go:36\n 8  0x00000000011aa967 in io/ioutil.ReadFile\n    at /usr/local/go/src/io/ioutil/ioutil.go:73\n 9  0x000000000141800f in main.(*Config).Load\n    at ./ts.go:61\n10  0x0000000001430ac9 in main.main\n    at ./ts.go:1959\n11  0x0000000001032635 in runtime.main\n    at /usr/local/go/src/runtime/proc.go:201\n12  0x000000000105fc31 in runtime.goexit\n    at /usr/local/go/src/runtime/asm_amd64.s:1333\n```\n\nThe code leading to this is simply reading a file relative to the Go executable:\nbytes, err := ioutil.ReadFile(path)\n. ",
    "weeco": "I also faced this behaviour on Mac OS with vscode insiders. ",
    "protheusfr": "+1\n. Any update regarding this issue ?\n. The stack trace is showed on Linux and Windows, why not on OSX ?. ",
    "dmlemos": "I am also having this issue. ",
    "antong": "Because of the pitfalls in using temporary files, most systems include ready functions to securely create temporary files. POSIX has a family of functions like mkstemp(), mkdtemp(), ... Go has ioutil.TempFile() and ioutil.TempDir(). Python has a tempfile module. I'm not sure about Javascript, but googling  found fs.mkdtemp() in Node.js.\nBy the way, thank you @ramya-rao-a for all your work on vscode-go! It is really appreciated.. Actually, looking at the code, it seems \"port\": 0 does not imply an ephemeral port as it normally does and as it does for the dlv command. A zero port causes the extension to randomly pick a port between 2000 and 50000:\nhttps://github.com/Microsoft/vscode-go/blob/79e4f3824b89ec3151650fa14f3c59f71e6b2dd8/src/debugAdapter/goDebug.ts#L567\n. Yes, you are correct. I suggest we for now just set port to 0 in the autogenerated launch.json with the existing port || random(2000, 50000), which will make it work most of the time. Or is that sweeping the problem under the rug and would be better to just keep as is?\nAnyway, let's see if delve can help (derekparker/delve#1332), because the current delve API makes it a bit difficult to use robustly without port clashes and securely.. Many systems clean the tmp directory every boot or on other schedules or even use a RAM based file system that is not persisted to disk. Will the persisted tmpdir in this PR work correctly if the tmpdir disappears?. Usually, mkdtemp and friends are used so that the library safely creates and picks a directory and then you use whatever dir you got. I haven't seen it used so that you recreate one with the same name you got earlier. It may be ok, but I'm not sure.\nNow, you may call me overly paranoid, but what about the following attack scenario: Alice uses the vscode extension, which correctly makes a tmpdir /tmp/vscode.hMF460T1CB and it is persisted in vscode's config. Bob on the same machine monitors /tmp and sees Alice's tmpdir. It is inaccessible to him, so he can't do anything about it. However, Bob knows that /tmp is wiped on boot, and he crafts a cron job (a scheduled program execution) that as soon as possible (when the dir disappears) creates a directory with Alice's tmpdir name and sets the permissions to be accessible by Alice (e.g., world readable and writable) and performs the symlink attack I suggested earlier, e.g., ln -s /home/alice/thesis.tex /tmp/vscode.hMF460T1CB/go-code-cover. Alice then opens up vscode, the correctly named dir exists, so the vscode extension reuses it and her thesis.tex is overwritten.\nPersonally I'd err on the side of caution and not persist the tmpdir name, but recreate it every time and remove it when done with. If the concern is that junk may be left behind, we could remove all /tmp/vscode.* owned by the user at some convenient time, perhaps before creating a new tmpdir. If we want a persistent dir, then tmpdir might not be the right thing and we should put it under the users home dir or maybe the workspace dir.\nSorry for trying to figure out how to break things, I've my security goggles on this week :-). What if the directory does exist and is writable, but is owned by somebody else (was autoremoved, but recreated by evil Bob)?. I've been casually using this for two days now. Nothing out of the ordinary has happened. The tempdir stuff seems to be working in that tempdirs do appear with expected contents. vscode-go-debug.txt still goes directly into TEMP with the predictable name, so that fix seems to not have gone in. I noticed the iferr snippet improvement, and that is cool!. ",
    "Charliekenney23": "I'll take this!. @ramya-rao-a I've updated the code to persist the temp directory path between vscode sessions. Please let me know if there's anything else that needs to be updated!. I've updated the code with the suggested changes \ud83d\ude03 . @antong yes. If you have a look here, I'm checking if the persisted directory exists and creating it if not present.. So I think the only benefit of persisting the temp directory path is to limit VSCode from polluting the /tmp directory (like with Microsoft/vscode#53423). While the scenario that you walked through would be extreme, I agree that creating a directory at launch and cleaning up in deactivate would solve the problem and without any extra risk in the first place. Thanks for weighing in. \nThoughts, @ramya-rao-a?. Agreed! I've just updated the code.. Just a note: There will be some edge cases where the tmp dir will not be deleted (for instance, when the user force quits vscode, the extension does not have time to call deactivate and delete the temp dir). Though, any stray temp dirs will not be reused.\nIn effort to minimize these stray directories, I'm only creating the temp directory as needed (when the TempFileProvider.getFilePath method is first called).. @ramya-rao-a  LGTM!. I'll take this!. @ramya-rao-a Yeah, pointers would be great if you have the time!. Very good point. I'll make this a static class \ud83d\ude03. \ud83d\udc4d . I've added a comment to above TempFileProvider.registerStore must be called before this.\nOne work around could be creating a new temp dir if globalState is undefined (and storing it locally on the object). Thoughts?\n. ",
    "tamasf97": "Didn't fix it for me, in fact the error remained with gocode removed as well.\nI'll try reinstalling the extension whenever the market comes back online,. No success, it seems that several tools don't support modules yet at all, including gocode and go-langserver and who knows what else, see https://github.com/mdempsky/gocode/issues/46 and https://github.com/sourcegraph/go-langserver/issues/316 for example.\nSo it isn't a bug in the extension.. Ah that was it then, sorry. I used gotype-live before with the auto build feature disabled. After enabling build on save it works now.. Go modules are still pretty new and aren't supported by a lot of tools. Make sure you use the latest beta of this extension(https://github.com/Microsoft/vscode-go/wiki/Use-the-beta-version-of-the-latest-Go-extension), and disable live errors, as they aren't supported yet.(related: https://github.com/Microsoft/vscode-go/issues/1950).. ",
    "chenyihui555": "my godef cannot be used in vscode, so I use guru to find the definition, but the process of finding the function definition is slow, about 2 seconds. @ramya-rao-a  This situation only exists in large projects at the moment. I define an interface and then implement the methods inside, but I cannot use godef to jump to the methods. @ramya-rao-a  I can use sublime and I can jump. @ramya-rao-a\n=================[Godef]Begin=================\n[Godef]INFO: select_begin: 1179 offset: 1323\n[Godef]INFO: spawning: F:/mygo\\bin\\godef.exe -f F:\\gospace\\src\\GrandMainSer\\app\\action\\counsellorExchange\\CounsellorExchange_11908.go -o 1323\n[Godef]ERROR: godef fail: godef: no declaration found for act.GetRid\n[Godef]INFO: spawning: F:/mygo\\bin\\guru.exe -json definition F:\\gospace\\src\\GrandMainSer\\app\\action\\counsellorExchange\\CounsellorExchange_11908.go:#1323\n[Godef]INFO: guru output:\n{\n    \"objpos\": \"F:\\gospace\\src\\GrandMainSer\\app\\core\\session.go:51:2\",\n    \"desc\": \"func (GrandMainSer/app/core.IGameSession).GetRid() string\"\n}. @ramya-rao-a  my vscode user Settings eg\uff1a\n {\n    \"go.useCodeSnippetsOnFunctionSuggest\": true,\n    \"workbench.colorTheme\": \"One Dark Pro\",\n    \"terminal.integrated.shell.windows\": \"D:\\Git\\Git\\bin\\bash.exe\",\n    \"go.formatTool\": \"goimports\",\n    \"editor.formatOnSave\": true,\n    \"[go]\": {\n        \"editor.insertSpaces\": true,\n        \"editor.formatOnSave\": true\n    },\n    \"editor.fontSize\": 18,\n    \"window.zoomLevel\": -1,\n    \"editor.minimap.enabled\": false,\n    \"go.useLanguageServer\": true,\n    \"workbench.activityBar.visible\": true,\n    \"editor.fontFamily\": \"Monaco,  Consolas,Lucida Sans Typewriter\",\n    \"workbench.editor.showTabs\": true,\n    \"go.gopath\": \"F:/mygo;F:/gospace\",\n    \"go.goroot\": \"F:/goroot\",\n    // \"workbench.iconTheme\": \"vs-minimal\",\n    \"go.docsTool\": \"guru\",\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.useCodeSnippetsOnFunctionSuggestWithoutType\": true,\n}. @ramya-rao-a  can i have a look at your Settings?. @ramya-rao-a   I resolved it by reinstalling godef package. . @ramya-rao-a  thanks you  !. ",
    "BartWillems": "Same problem on Arch Linux. ",
    "1e3oss": "vscode-go uses the -i flag to build.\nI get the exact same error outside of vscode wihgo build -i.\nThe usage of the -i flag is not sugested anymore starting with go 1.10.\nAs seen in https://github.com/golang/go/issues/24674#issuecomment-379143645 i'd \nsuggest to simply remove the flag starting with go 1.10 in vscode-go,\nas the code builds correctly - and apparently as fast - without it.\nFYI you can disable the vscode go build (and thus the error) with \"go.buildOnSave\": \"off\",\nwhile waiting for a fix.. ",
    "Linuturk": "Adding a comment here as asked by @ramya-rao-a in Slack.\n$ go version\ngo version go1.11 linux/amd64\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/home/xxx/.cache/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/xxx/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/home/path/to/my/project/outside/of/gopath/go.mod\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build807570115=/tmp/go-build -gno-record-gcc-switches\"\nInstalled from the tarball from golang.org.\nWhen I enable the go.installDependenciesWhenBuilding I get this output:\n/home/path/to/my/project/outside/of/gopath>Finished running tool: /usr/local/go/bin/go build -i -o /tmp/go-code-check.495537416 .\ngo build golang_org/x/crypto/cryptobyte/asn1: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/crypto/cryptobyte/asn1.a: permission denied\ngo build golang_org/x/net/dns/dnsmessage: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/net/dns/dnsmessage.a: permission denied\ngo build golang_org/x/crypto/curve25519: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/crypto/curve25519.a: permission denied\ngo build golang_org/x/crypto/internal/chacha20: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/crypto/internal/chacha20.a: permission denied\ngo build golang_org/x/crypto/poly1305: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/crypto/poly1305.a: permission denied\ngo build golang_org/x/text/transform: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/text/transform.a: permission denied\ngo build golang_org/x/text/unicode/bidi: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/text/unicode/bidi.a: permission denied\ngo build golang_org/x/net/http2/hpack: open /usr/local/go/pkg/linux_amd64/vendor/golang_org/x/net/http2/hpack.a: permission denied\nI get the same error if I run a similar go build -i command outside of vscode.\nNo cgo in use for this project.\nI did just transition this project to a go module.. ",
    "mk0a1a": "I would like to add that the Replace in Files command ends up spawning multiple golints. For example, I have updated several imports in multiple files which is over 25 files using it. I took a look at the process monitor and it spawned over that many golint processes. Each golint process takes a significant amount of RAM (around 600-700 MB) and also a decent cpu percentage. It always ends up crashing my computer with only 8 GBs of RAM.\nMy operating system is Solus Linux if that makes a difference.\nTo reproduce the issue, clone any decent size Go project and execute the Replace in Files command.. ",
    "m13253": "\nWould you have some time to look deeper into why you would have multiple linters running?\n\nMultiple linters are easily triggered when lintOnSave is turned on, and the user save multiple times in a row.\nFor big projects, the linter usually run for 20-30 seconds. It is very often that user may save twice or more during these seconds.\nWhen multiple linters are running, my VScode barely gets any CPU power, causing the UI running at ~2fps.. > @m13253 Like I said before, we do have code in place that is meant to cancel processes that were spawned for previous linting attempts when a new linting request is in place.\n\nCan you follow\n#1916 (comment) and help us figure out why that doesn't work in the scenario that you mentioned?\n\nThank you for your quick response.\nSorry I misunderstood some previous posts. I will try to help debug the code.\n\nBy the way, I want to propose another logic which doesn't involve canceling or killing, since as long as I know, canceling tokens are somewhat not 100% reliable:\n1. Have a queue with length=1, and a flag indicating whether linter is currently running.\n2. When linting is requested:\n    If the linter is not running, run it;\n    Else if the queue is full, clear the queue and push to it;\n    Else, push into the queue.\n3. When linting is finished:\n    If the queue is full, pop from the queue and run it.\nThis logic is to ensure that if multiple linting requests are requested, the running one is not interrupted (and whose results may be useful), and the excessive ones are suppressed except the latest request.. ",
    "svipas": "So it's safe to simply delete that color line? I can definitely open a PR.. I guess this https://octicons.github.com/icon/tools/ matches best since text says \"Analysis Tools Missing\". With coloring, it's way harder since it depends on theme, what I can think of is only red color, but still, if someone uses theme with red sidebar it will have same issue. So best solution is to use icon. What do you think @ramya-rao-a ?. Sounds good, it was my first choice, but I changed my mind \ud83d\ude04 PR will be soon!. Sounds good, it was my first choice, but I changed my mind \ud83d\ude04 PR will be soon!. @ramya-rao-a opened a PR: https://github.com/Microsoft/vscode-go/pull/1922. \nEverything is fine and working as supposed to.. Thanks \ud83d\ude04. ",
    "bitfield": "It looks like vscode-go is not detecting that the third-party packages have been installed outside GOPATH by Go 1.11's go build\u2014that is, in 'module-aware' mode.\nIf I delete the go.mod file and run go get PACKAGE, installing it in 'non-module-aware' mode, VS Code finds it as expected and hover tips and auto-completion start working.\n. I thought @ramya-rao-a had already forked gorename to add module support... or was that wishful thinking on my part?. ",
    "brunsgaard": "@ramya-rao-a I followed the instructions and can confirm that you fix is working as intended here.. ",
    "alecthomas": "\nThe second case is supported in a way already. After declaring the type Foo just start typing Foo in another line and one of the auto-completion options should be for func (*Foo)\n\nAha! I totally did not see that at all, thanks.\n\nFor the iferr, doesnt return ${2:err} make more sense than return ${2:}err?\n\n${2:}err is more convenient because 99% of the time you either want to return just the error, or return the error and add more return parameters (unless using goreturns). If ${2:err} is used and you want to add more return values you either have to overwrite \"err\" with them all, or cancel the snippet to prepend them.\n\nI'd be happy to accept a PR for the first issue.\n\nOkay, I will take a look \ud83d\udc4d. Snippets look good!. With that new beta I no longer get completions on packages:\n\nPrevious beta:\n\n. I am using Go modules yes. I can see that vscode is starting gocode-gomod. I ran it with -s -debug and got the following:\n2018/09/27 12:20:10 -------------------------------------------------------\n2018/09/27 12:20:10 Elapsed duration: 303.543208ms\n2018/09/27 12:20:10 Offset: 0\n2018/09/27 12:20:10 Number of candidates found: 0\n2018/09/27 12:20:10 Candidates are:\n2018/09/27 12:20:10 =======================================================\n. Also FYI the reason completion works with normal gocode is that I am also vendoring my dependencies.. Another data point: gocode-gomod is much slower than gocode, when it does work. On a large codebase it takes ~5 seconds to bring up a local receiver completion list whereas gocode is basically instantaneous \ud83d\ude41. @ramya-rao-a I'm guessing it is environment-specific, as @wolfeidau  has produced a test repo that fails for him, but does not for @stamblerre. So I don't think I'd be able to add anything that @wolfeidau 's existing repo doesn't already.. This is normal behaviour. Quotes are only interpreted by the shell, however most other applications (including vscode) execute subprocesses directly and treat the quotes as literals.. I just press the \"select line\" key combo and start typing in this situation. Another alternative would be to have a completion fragment cover the whole return, as well as the sub-parts.\nBut it's already been reverted so \ud83e\udd37\u200d\u2642\ufe0f. I don't have a solution for \"Go to definition\" or \"Peek definition\", but I was also experiencing insanely long completion times (5-10 seconds). Enabling the language server with the following experimental flags brought this back to acceptable times:\njson\n    \"go.languageServerExperimentalFeatures\": {\n        \"format\": true,\n        \"autoComplete\": true\n    },. That does seem to be a bit faster.. LGTM \ud83d\udc4d. This is from https://github.com/alecthomas/participle. I'm happy to provide more information if necessary.. I'm pretty sure this commit allows the langserver to support modules, similar to the equivalent change in @stamblerre 's gocode fork.\nBut I filed the issue here because it looks (?) like, from that error, vscode might be passing the wrong location through to the langserver?. The rationale for this is that:\n\nI'd say in ~90% of cases you're iterating over slice values and you don't care about the first value, so you just tab through.\nWhen you need to iterate over map keys, or channels, you can just press <backspace> to delete the whole first placeholder. If the comma is outside, you'd need to delete two things - the placeholder and the comma.\nFor the final case where you want to keep the key, you just type the name and one extra character (,).\n\nThat said, if you're unconvinced by my reasoning, I'm happy to change it :). ",
    "qhsong": "Seems I use wrong gocode version, Closed. ",
    "bcmills": "I'll have to give it some thought. Absolute paths would make the coverage results less cacheable, e.g. for distributed build systems where two users may run coverage with the same source versions but different absolute paths.. ",
    "egonelbre": "For converting the converprofile to absolute paths, a minimal tool can be used https://gist.github.com/egonelbre/6b0e3048bb28423d52a62ed1633e693d\nThis could be a workaround until a decision is reached for the coverage tool.. @mrg0lden the package interfaces changed so the programs need adjusting (caused by commit https://github.com/golang/tools/commit/2f1727f1b37d7d257665debc72d4ae0b8e449748). No, those are default. I've already sent a PR for godef-gomod to fix the offset calculation bug.\nI forgot to clarify that it needs to be outside of GOPATH and it needs to have a go.mod file (otherwise it doesn't trigger the gomod specific tooling).. This is the same issue as https://github.com/Microsoft/vscode-go/issues/1967. There's an unmerged PR in https://github.com/ianthehat/godef/pull/1 that should fix this.. Running from command line does work.\nRunning the update without any file or project open. And I haven't set explicitly GO111MODULE=.\nFor settings.json, I have these:\n```\n    \"go.formatTool\": \"goimports\",\n\"go.lintOnSave\": \"package\",\n\"go.lintTool\": \"golint\",\n\n\"go.gopath\": \"/home/egon/go\",\n\"go.toolsGopath\": \"/home/egon/go\",\n\n\"go.buildOnSave\": \"off\",\n\"go.installDependenciesWhenBuilding\": false,\n\n``. Ah, wait, just realized what was happening. Thego.gopath` needed to be:\n\"go.gopath\": \"/Users/egon/go\",\n    \"go.toolsGopath\": \"/Users/egon/go\",\nNot sure whether it's useful to notify user about the wrong gopath. Anyways at least there's now an issue that people can find for the issue. Feel free to close as you see fit.. > A side note: You don't need to specify go.toolsGopath if it is the same as go.gopath.\nYeah, I know. I occasionally have them go.gopath different in workspaces but still want the tools still to be in the default location. The go.gopath is redundant, but I like to be explicit to keep some clarity in settings file.. There are similar problems with golint, goimports, gocode-gomod:\n\n\nThis is from modifying a single file in rapid succession.. ",
    "mrg0lden": "@ramya-rao-a \nUPDATE: I found that these errors are due to changes in golang.org/x/tools/go/packages\nI tried to install the forked tools after installing the latest beta\nI got these errors\n```Installing 2 tools at C:\\Users\\User\\go\\bin\n  gocode-gomod\n  godef-gomod\nInstalling github.com/stamblerre/gocode FAILED\nInstalling github.com/ianthehat/godef FAILED\n2 tools failed to install.\ngocode-gomod:\nError: Command failed: C:\\Go\\bin\\go.exe build -o C:\\Users\\User\\go\\bin\\gocode-gomod.exe github.com/stamblerre/gocode\ngithub.com/stamblerre/gocode/internal/suggest\n........\\go\\src\\github.com\\stamblerre\\gocode\\internal\\suggest\\suggest.go:138:3: cannot use func literal (type func(token.FileSet, string) (ast.File, error)) as type func(token.FileSet, string, []byte) (ast.File, error) in field value\ngithub.com/stamblerre/gocode/internal/suggest\n........\\go\\src\\github.com\\stamblerre\\gocode\\internal\\suggest\\suggest.go:138:3: cannot use func literal (type func(token.FileSet, string) (ast.File, error)) as type func(token.FileSet, string, []byte) (ast.File, error) in field value\ngodef-gomod:\nError: Command failed: C:\\Go\\bin\\go.exe build -o C:\\Users\\User\\go\\bin\\godef-gomod.exe github.com/ianthehat/godef\ngithub.com/ianthehat/godef\n........\\go\\src\\github.com\\ianthehat\\godef\\godef.go:134:3: cannot use parser (type func(token.FileSet, string) (ast.File, error)) as type func(token.FileSet, string, []byte) (ast.File, error) in field value\ngithub.com/ianthehat/godef\n........\\go\\src\\github.com\\ianthehat\\godef\\godef.go:134:3: cannot use parser (type func(token.FileSet, string) (ast.File, error)) as type func(token.FileSet, string, []byte) (ast.File, error) in field value\n```\ngo version\ngo version go1.11.1 windows/amd64\ngo env\nset GOARCH=amd64\nset GOBIN=\nset GOCACHE=C:\\Users\\User\\AppData\\Local\\go-build\nset GOEXE=.exe\nset GOFLAGS=\nset GOHOSTARCH=amd64\nset GOHOSTOS=windows\nset GOOS=windows\nset GOPATH=C:\\Users\\User\\go\nset GOPROXY=\nset GORACE=\nset GOROOT=C:\\Go\nset GOTMPDIR=\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_amd64\nset GCCGO=gccgo\nset CC=gcc\nset CXX=g++\nset CGO_ENABLED=1\nset GOMOD=C:\\Users\\User\\Projects\\attendance\\go.mod\nset CGO_CFLAGS=-g -O2\nset CGO_CPPFLAGS=\nset CGO_CXXFLAGS=-g -O2\nset CGO_FFLAGS=-g -O2\nset CGO_LDFLAGS=-g -O2\nset PKG_CONFIG=pkg-config\nset GOGCCFLAGS=-m64 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\User\\AppData\\Local\\Temp\\go-build701171602=/tmp/go-build -gno-record-gcc-switche. Well, I managed to compile both of them, but now I get a notification that says: \"Auto-completion feature failed as an older gocode process is still running. Please kill the running process for gocode and try again.\".\nUPDATE: I killed the process, rebooted the system, but still getting the same error.. @ramya-rao-a Yeah you're right. Sorry, got excited with the update and thought it has to do with auto-completion.. ",
    "davidwkeith": "Those are great, but neither does quiet what I hoped.\n\nGo: Browser Packages: Does not auto jump to the currently package, still need to search, then browsing the files inside the package is not great.\nGo: Add Package to Workspace: The package is already in the workspace, I get \"Could not find package\u2026\"\n\nUltimately the command would be Go: Open Package in File Tree that would open vendor/github.com/google/uuid in the file tree, and maybe load uuid.go from that directory in the editor (or README if it were super advanced)\nClosest command I have found is \"Go to Definition\" contextual menu, which works on package contents, but not the package name itself.. ",
    "axetroy": "I have been expecting this feature for a long long time, but it has never been implemented.\nIn fact goLand integrates this function very well. \nThis is worth learning and reference.\nthose great feature in goLand:\n1. Tree View for External Libries \n\n2. command-click to navigate to the import's source\n\nIt is undeniable that goLand is a commercial software and does have a lot to learn.\nI also hope to use these features in vscode.. After a few months, can someone achieve this feature?\nBecause of this feature, I had to use Goland.\nBut I really like VS Code. This is really regrettable.\n. ref #1928\nI am waiting for this feature\n. ",
    "strtob01": "I tried a fresh install of Go 1.11 along with a fresh install of Visual Studio Code and also have the same problem on my Macbook.. No I'm not using the new modules feature. I tried the steps you mentioned but the autocompletion still panics.. I just solved it. I had old gocode binaries in my PATH locations on my hard drive. I deleted all of them and the ran your instructions again and now it's working as expected.. ",
    "steviesama": "The format tool effects this. The only solution so far has be to pick a format tool that won't install so I guess the step is effectively skipped and when I manually format it to spaces and have the user settings setup properly it's fine. I was using goreturns...I think gofmt did it too...replacing spaces with tabs. Is there any way to change this? Though I'd prefer have an official option to skip the format tool step.. ",
    "jeffb4": "golint - supports individual files\ngometalinter - allows individual files, but errors when they do not comprise a package\nmegacheck - allows individual files, but errors when they do not comprise a package\nmegacheck - allows individual files, but errors when they do not comprise a package\nrevive - supports individual files\ngiven the general lack of robust support for single files, does this still seem like a good idea @ramya-rao-a  ?. ",
    "Shagrat2": "I am seeing this as well, in a different environment. OSX 10.14.1, Go 1.11.3 vscode 1.29.1, dlv 1.1.0, vscode-go 0.6.88 \n. ",
    "jadolg": "Exactly the same behavior. Is there any other way to collect more information?. This is the output I'm getting when I set the flags. The file and line exist both.\nSetBreakPointsRequest\nAll cleared\nCreating on: /media/akiel/data/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm/other_test.go:6\nError on CreateBreakpoint: could not find /media/akiel/data/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm/other_test.go:6\nAll set:[null]. yes I'm using symlinks. I don't have much space on my main harddrive so I have a lot of things symlinked :blush: \n```\n$ dlv test\nType 'help' for list of commands.\n(dlv) b other_test.go:6\nBreakpoint 1 set at 0x8b4081 for gitlab.cu.aleph.engineering/aleph.engineering/hivedm.TestSimple() /home/akiel/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm/other_test.go:6\n(dlv) c\n2018/09/27 19:46:44 Downloading http://127.0.0.1:45779/testconfig.yml...\n2018/09/27 19:46:44   200 OK\n2018/09/27 19:46:44 Download saved to ./test_data/download/testconfig.yml\n2018/09/27 19:46:44 Downloading http://127.0.0.1:45779/filenotfound...\n2018/09/27 19:46:44   404 Not Found\n2018/09/27 19:46:44 Download failed: server returned a non-2XX status code\n2018/09/27 19:46:44 Downloading http://127.0.0.1:36503/test_photo.jpg...\n2018/09/27 19:46:44   200 OK\n2018/09/27 19:46:44 Download saved to ./test_data/download_compress_split/FILE\n\ngitlab.cu.aleph.engineering/aleph.engineering/hivedm.TestSimple() /home/akiel/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm/other_test.go:6 (hits goroutine(79):1 total:1)(PC: 0x8b4081)\n     1: package hivedm\n     2:\n     3: import \"testing\"\n     4:\n     5: func TestSimple(t *testing.T) {\n=>   6:         a := 1\n     7:         t.Log(a)\n     8: }\n(dlv)\n. * `/home/akiel/GOLIBS/` is a symlink for `/media/akiel/data/GOLIBS/`\n* I always open my project @ `/home/akiel/GOLIBS/`\n* The path resulting from `Copy Path` is `/media/akiel/data/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm/other_test.go`. indeed.\nVerbose logs are written to:\n/tmp/vscode-go-debug.txt\n10:23:11 AM, 10/1/2018\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /home/akiel/GOLIBS\nCurrent working directory: /media/akiel/data/GOLIBS/src/gitlab.cu.aleph.engineering/aleph.engineering/hivedm\nRunning: /home/akiel/GOLIBS/bin/dlv test --headless=true --listen=127.0.0.1:25998 --api-version=2 --log=true --\n....\n```. \n",
    "ovidiub13": "I'm also experiencing this issue while using a symlinked directory.\nVS Code:\nVersion: 1.31.1\nCommit: 1b8e8302e405050205e69b59abb3559592bb9e60\nDate: 2019-02-12T02:19:29.629Z\nElectron: 3.1.2\nChrome: 66.0.3359.181\nNode.js: 10.2.0\nV8: 6.6.346.32\nOS: Linux x64 4.20.10-200.fc29.x86_64\nGo extension version : 0.9.2\ndlv version\nDelve Debugger\nVersion: 1.2.0\nBuild: $Id: 068e2451004e95d0b042e5257e34f0f08ce01466 $. ",
    "tonywenoracle": "Yes, I experienced same issue. The symlink is the root cause. After changing to use physical path, everything works fine.. ",
    "liambrown89": "Just to add, when the tests run the \"go-code-cover\" file in my %LOCALAPPDATA%/Temp folder is being generated and looks correct to me: \nmode: set\ngolang.org/x/crypto/bcrypt/base64.go:13.38,17.22 4 1\ngolang.org/x/crypto/bcrypt/base64.go:20.2,20.16 1 1\ngolang.org/x/crypto/bcrypt/base64.go:17.22,19.3 1 1\ngolang.org/x/crypto/bcrypt/base64.go:23.47,25.35 2 1\ngolang.org/x/crypto/bcrypt/base64.go:29.2,31.16 3 1\ngolang.org/x/crypto/bcrypt/base64.go:34.2,34.21 1 1\ngolang.org/x/crypto/bcrypt/base64.go:25.35,27.3 1 1\ngolang.org/x/crypto/bcrypt/base64.go:31.16,33.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:39.49,41.2 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:46.49,48.2 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:52.43,54.2 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:89.70,91.16 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:94.2,94.22 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:91.16,93.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:99.68,101.16 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:105.2,106.16 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:110.2,111.62 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:115.2,115.37 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:101.16,103.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:106.16,108.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:111.62,113.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:122.47,124.16 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:127.2,127.20 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:124.16,126.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:130.66,131.20 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:134.2,139.16 5 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:142.2,146.16 4 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:150.2,152.16 3 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:155.2,156.15 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:131.20,133.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:139.16,141.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:146.16,148.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:152.16,154.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:159.56,160.37 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:163.2,165.16 3 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:168.2,170.16 3 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:173.2,184.15 7 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:160.37,162.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:165.16,167.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:170.16,172.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:187.69,192.16 4 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:196.2,196.29 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:204.2,205.17 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:192.16,194.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:196.29,197.27 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:197.27,199.4 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:208.93,210.16 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:217.2,220.16 3 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:224.2,226.29 3 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:231.2,231.15 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:210.16,212.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:220.16,222.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:226.29,229.3 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:234.32,239.18 5 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:243.2,253.16 11 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:239.18,242.3 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:256.60,257.22 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:260.2,260.30 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:263.2,265.22 3 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:269.2,269.15 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:257.22,259.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:260.30,262.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:265.22,268.3 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:273.57,275.16 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:278.2,279.16 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:282.2,283.15 2 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:275.16,277.3 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:279.16,281.3 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:286.34,288.2 1 0\ngolang.org/x/crypto/bcrypt/bcrypt.go:290.32,291.38 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:294.2,294.12 1 1\ngolang.org/x/crypto/bcrypt/bcrypt.go:291.38,293.3 1 1\nThe results of this file are certainly not what are being depicted in the coverage highlighting in my screenshots above.. Thanks @hamparawa for pointing me to that issue - this looks like a duplicate of that somewhat. I have installed the beta version (i.e. https://github.com/Microsoft/vscode-go/blob/master/Go-latest.vsix) of the extension as instructed in that issue and it is working as expected now.. ",
    "hamparawa": "Having the same issue in go1.10.1 linux/amd64\nEverything worked fine until updating to vscode-go to 0.6.89. Looking at the changelog, might this have caused the issue?\nhttps://github.com/Microsoft/vscode-go/issues/1847. ",
    "Nhoya": "Ok I found out that the issue also affects the package creation, creating a file called myfile_windows.go and adding it to a new package will trigger an error can't load package: package my_project_path_here: build constraints exclude all Go files in my_project_path_here I suspect this may be related to https://github.com/golang/go/issues/24068. Yes you are indeed right, my issue is coverd in https://github.com/Microsoft/vscode-go/issues/1848 I think we can close this and continue there . ",
    "ianthehat": "You can now use my master branch, I also brought it up to date with the latest version of godef and the latest version of go/packages. godef needs to be run in the \"project\" folder not the directory of the file.\nBasically you need the CWD of godef to be below the module root so it can find the go.mod file (which also means you should be detecting it as the module branch the same way, by checking the directory you are going to use to run godef). Then you hand it the absolute path to a file in the module cache. If that does not work then it is a bug in godef or go/pacakges, but it should work (it did in my tests).. I was looking in to this some more, and I think there is a bug in go/packages where it sets the directory for file= queries, which is not going to work.\nI think this was done as a workaround for a different bug in go list, but I will have to check with @matloob. https://go-review.googlesource.com/c/tools/+/148199 contains a fix.\nOnce that is submitted, running godef in the project folder with an absolute path into the module cache should work.. That is normally the message you would get if you are compiling either a new godef against an old go/packages or vice versa, it happens because of the switch from \"contains:\" to \"file=\" in the query format.. With regards to setting the CWD, it has to be set to a folder in which go env GOMOD would return the module file for the project. This probably means the directory that was opened, not the parent directory of the file.\nThis is a general rule for all tools in a module aware world. And is easiest to explain for tools that only examine rather than modify code.\nFor instance, if you jump to definition in one of the projects source files, it may take you to a file in the module cache. If you set the CWD to the parent of that file when invoking any other tool, the tool is going to fail because the file is not on your GOPATH or part of a true module. And even if it does work, it may produce inconsistent results because it has different module version results to that of your project.\nIf you run it with the original CWD though, it can use that module to understand the code and dependencies, and will still get the right answer, even though the file in question is not below that directory.\nOnly the editor can have enough context to pick the CWD correctly, which is why the tools just trust whatever CWD they are given rather than trying to guess one from the file= queries.\nHope that makes it clear?. It is less of a problem for goimports than almost any other tool, but we want one clear rule that works for all tools in all editors, and most other tools will care.\nIf a tool would be happy with using the parent dir of the file, the tool could do that itself, so why get all the editors to do it. If it wants to know the workspace and you have changed the directory to the file, it has no way to recover that information. Setting the CWD to the workspace allows the tool to make that decision for itself.\nExtra cases to consider:\n  * multi-module repositories\n  * a module with a replace directive\nAlso, if you ran it in the module cache it might not do it relative to that module, because on disk it might not be a valid module, go env GOMOD may return the empty string, and it's certainly not on your GOPATH.\nAlso it may be reasonable to run it on all files, even in the module cache. For instance, goimports does not have to write the file, you might be running it to see if it would change and suggesting fixes before the file is saved, and not want to have to special case the module cache to turn that behavior off.. This was fixed about a month ago, there is a function called posToString in godef that patches the $GOROOT on the way out.\nCould you try running godef-mod by hand and seeing what it does?. If you pass a string to godef it assumes it is a go expression not a file name\nYou need to do something like\ngodef-gomod -f godef.go -o 640\n\nWhere -f takes the filename and -o is the byte offset into the file of the cursor. There is a VS-Code extension that will tell you this number.. Nope.\nThis is a general problem with sub-modules, they are essentially unrelated (in either direction) with the parent module, they might as well be in a separate repository.\nEssentially the file is not one that is reachable from the outer module. Even if the outer module depends on the sub-module, it will depend on a copy in the module cache, not the one you see in a sub-directory (unless you have a replace directory).\nIt is really hard for a tool to guess the users intent here. This is something we are going to have to work on and talk about, maybe in the tools meeting tomorrow. In general there are lots of questions about sub-modules, I would think of them as even more experimental than normal modules and avoid them without a really strong reason to need them right now.\n. ",
    "JoseFMP": "To be fair, it also happens with imported packages.. No go modules. I tried multiple configurations for GOPATH. Same result all the time. I mean. Is, this supposed to be working? I really have the same error in different machines with different projects and completely different set-ups.. @ramya-rao-a Yes $GOPATH is set-up correctly. The issue of renaming not working happens in all the golang projects I tried. It never ever worked.\nHowever I do believe the projects are configured correctly since all other go-related tools are working properly.. ",
    "joaoferrao": "@stamblerre I tried installing according to your suggestion, restarting VSCode but auto completion still doesn't happen if the project is outside the $GOPATH.. @stamblerre first time around yes, but I didn't know I should also install beta version of the extension. Then I reinstalled VSCode, installed beta version but wasn't asked to install the fork.\nAnyway to force installation of the said fork?. @stamblerre thank you for getting back so fast, but I still am in no luck. I still only see the \"PANIC\".\n\nI also confirm I have the beta version of the Go extension:\n\nIs there anything else I can check? Any setting I should enforce in the settings.json for the go extension?. @stamblerre outstanding support, thanks!! Maybe would be worthwhile\n\nSo for others who end up here with the same issue:\nbash\ncd /tmp\ncurl -O https://github.com/Microsoft/vscode-go/releases/download/latest/Go-0.6.92-beta.1.vsix\ncode --install-extension Go-latest.vsix\ngo get -u -d github.com/stamblerre/gocode\ngo build -o $GOPATH/bin/gocode-gomod github.com/stamblerre/gocode\ngocode close\ngocode-gomod close\nKill VSCode and relaunch.\nThanks again.\n. @stamblerre so the go extension decided to update from beta to the latest release and clearly is not behaving correctly (the beta seemed more stable).\nI tried repeating the process for installing the beta versions .vsix files but:\nbash\n $  code --install-extension Go-0.6.94-beta.5.vsix\nCorrupt ZIP: end of central directory record signature not found. OK... just found out it's a problem related of downloading it with curl... . ",
    "zeeraw": "Running package version 0.6.93\nI want to confirm that the package is found\n\nBut once I add a dot to autocomplete the package, nothing is returned\n\nI go back to step one to manually import the package, there is no autocompletion on the package\n\nNot until I save the file with the import added, will I get an autocomplete list for my package\n\nHope this helps! Keep up the good work.. ",
    "shaodahong": "when i run\nbash\n~/go/bin\n0\u00b2 ./gocode close\n2018/11/26 21:47:19 dial unix /var/folders/j3/1mmzgr1j51s_kgdg28ksn7b40000gn/T/gocode-daemon.shaodahong: connect: no such file or directory. @stamblerre I know when I coding in vscode , gocode start run, but autocomplete still bad, I have some question\n1.\nif run gocode-gomod -s -debug a part autocomplete is good, but when I ctrl+c exit, autocomplete bad\n2.\nif run gocode -s -debug, no log display\ngo env\nbash\n0\u00b2 go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/Users/shaodahong/Library/Caches/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/shaodahong/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/Users/shaodahong/Workspace/demo/go.mod\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j3/1mmzgr1j51s_kgdg28ksn7b40000gn/T/go-build051668293=/tmp/go-build -gno-record-gcc-switches -fno-common\"\n. @stamblerre similar, when use module autocomplete fail, version 0.7.0, mac version 10.14 (18A391)\n. new log\n```bash\n0\u00b2 gocode-gomod -s -debug\n2018/11/27 12:29:43 Got autocompletion request for '/Users/shaodahong/Workspace/demo/main.go'\n2018/11/27 12:29:43 Cursor at: 30\n2018/11/27 12:29:43 -------------------------------------------------------\npackage main\nfunc main() {\n    f#\n}\n2018/11/27 12:29:43 -------------------------------------------------------\n2018/11/27 12:29:44 Elapsed duration: 195.027647ms\n2018/11/27 12:29:44 Offset: 0\n2018/11/27 12:29:44 Number of candidates found: 3\n2018/11/27 12:29:44 Candidates are:\n2018/11/27 12:29:44   const false untyped bool\n2018/11/27 12:29:44   type float32 float32\n2018/11/27 12:29:44   type float64 float64\n2018/11/27 12:29:44 =======================================================\n2018/11/27 12:29:44 Got autocompletion request for '/Users/shaodahong/Workspace/demo/main.go'\n2018/11/27 12:29:44 Cursor at: 33\n2018/11/27 12:29:44 -------------------------------------------------------\npackage main\nfunc main() {\n    fmt.#\n}\n2018/11/27 12:29:44 -------------------------------------------------------\n2018/11/27 12:29:44 Elapsed duration: 114.33626ms\n2018/11/27 12:29:44 Offset: 0\n2018/11/27 12:29:44 Number of candidates found: 0\n2018/11/27 12:29:44 Candidates are:\n2018/11/27 12:29:44 =======================================================\n2018/11/27 12:29:44 Got autocompletion request for '/Users/shaodahong/Workspace/demo/main.go'\n2018/11/27 12:29:44 Cursor at: 46\n2018/11/27 12:29:44 -------------------------------------------------------\npackage main\nimport \"fmt\"\nfunc main() {\n    fmt.#\n}\n2018/11/27 12:29:44 -------------------------------------------------------\n2018/11/27 12:29:44 Elapsed duration: 113.933882ms\n2018/11/27 12:29:44 Offset: 0\n2018/11/27 12:29:44 Number of candidates found: 0\n2018/11/27 12:29:44 Candidates are:\n2018/11/27 12:29:44 =======================================================\n``. @stamblerre new log I deleteimport \"fmt\".GO111MODULE ` i think no need set, go version 1.11 can auto judge it, when outside GOPATH and have go.mod, go module become effective\n. Maybe you can refer to the intellij IDEA go plugin, I don't know is the same as VScode.\n\n. oh, if you don't import net/http package, you input http. nothing happen. I have the same problem\nif the current project has go.mod file, Autocomplete is fail\n```bash\n0\u00b2 tree -L 1\n.\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 main.go\n0 directories, 2 files\n```\nbash\n0\u00b2 go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/Users/shaodahong/Library/Caches/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/shaodahong/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/Users/shaodahong/Workspace/demo/go.mod\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/j3/1mmzgr1j51s_kgdg28ksn7b40000gn/T/go-build815312150=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nbash\n0\u00b2 go version\ngo version go1.11.2 darwin/amd64\n\n. @stamblerre \n```bash\n0\u00b2 gocode-gomod -s -debug\n2018/11/27 12:17:51 Got autocompletion request for '/Users/shaodahong/Workspace/demo/main.go'\n2018/11/27 12:17:51 Cursor at: 49\n2018/11/27 12:17:51 -------------------------------------------------------\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    f#\n}\n2018/11/27 12:17:51 -------------------------------------------------------\n2018/11/27 12:17:51 Elapsed duration: 214.123096ms\n2018/11/27 12:17:51 Offset: 0\n2018/11/27 12:17:51 Number of candidates found: 4\n2018/11/27 12:17:51 Candidates are:\n2018/11/27 12:17:51   const false untyped bool\n2018/11/27 12:17:51   package fmt\n2018/11/27 12:17:51   type float32 float32\n2018/11/27 12:17:51   type float64 float64\n2018/11/27 12:17:51 =======================================================\n2018/11/27 12:17:52 Got autocompletion request for '/Users/shaodahong/Workspace/demo/main.go'\n2018/11/27 12:17:52 Cursor at: 52\n2018/11/27 12:17:52 -------------------------------------------------------\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.#\n}\n2018/11/27 12:17:52 -------------------------------------------------------\n2018/11/27 12:17:52 Elapsed duration: 177.578011ms\n2018/11/27 12:17:52 Offset: 0\n2018/11/27 12:17:52 Number of candidates found: 25\n2018/11/27 12:17:52 Candidates are:\n2018/11/27 12:17:52   func Errorf(format string, a ...interface{}) error\n2018/11/27 12:17:52   func Fprint(w io.Writer, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Fprintln(w io.Writer, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Fscan(r io.Reader, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Fscanf(r io.Reader, format string, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Fscanln(r io.Reader, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Print(a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Printf(format string, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Println(a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Scan(a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Scanf(format string, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Scanln(a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Sprint(a ...interface{}) string\n2018/11/27 12:17:52   func Sprintf(format string, a ...interface{}) string\n2018/11/27 12:17:52   func Sprintln(a ...interface{}) string\n2018/11/27 12:17:52   func Sscan(str string, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Sscanf(str string, format string, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   func Sscanln(str string, a ...interface{}) (n int, err error)\n2018/11/27 12:17:52   type Formatter interface\n2018/11/27 12:17:52   type GoStringer interface\n2018/11/27 12:17:52   type ScanState interface\n2018/11/27 12:17:52   type Scanner interface\n2018/11/27 12:17:52   type State interface\n2018/11/27 12:17:52   type Stringer interface\n2018/11/27 12:17:52 =======================================================\n```. ",
    "guiguan": "@Southclaws to make your task more stable:\njson\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"Escape Analysis\",\n            \"type\": \"shell\",\n            \"command\": \"go build -gcflags '-m -l' $(dirname github.com/guiguan/test-proj/${relativeFile})\",\n            \"problemMatcher\": {\n                \"pattern\": {\n                    \"regexp\": \"^([^/].*):(\\\\d+):(\\\\d+): (.*)$\",\n                    \"file\": 1,\n                    \"line\": 2,\n                    \"column\": 3,\n                    \"message\": 4\n                },\n                \"fileLocation\": \"relative\"\n            },\n        }\n    ]\n}. ",
    "Qiaojiawei": "i have try to delete the out-line.exe, then cpu is normal, but go test run buttion is missed.... i have test my workspace in my colleague's environment, it seems that there no go-outline.exe runing when he edit the test file, or its too fast that i can't catch?. @ramya-rao-a   sorry for late replay,we just put a long vacation. \nI have add the setting you wrirte here in the Setings.json, then edit the go file, the cpu run at 40%~50%(before its 100%s), so  whats the problem?. @ramya-rao-a  thanks for replay, my operate step as follows:\n1)nothing changed, then cpu usage is 100% when i edit the go file\n2)add  \"go.enableCodeLens\": {\"references\": false,  \"runtest\": false} to the settings.json, the cpu usage is about 50%~70%.\n\n3)nothing changed, but disable outline, the cpu usage is 100%.\n\n4)add  \"go.enableCodeLens\": {\"references\": false,  \"runtest\": false} to the settings.json\uff0c then disable outline, the cpu usage is about 20%\n\nso i guess CodeLens spend cpu 100%, outline view spend 50%? . @ramya-rao-a  I have test the simple go program like follows:\nfunc main(){\nlog.Println(\"Hello world\")\nlog.Println(\"Hello world 11\")\nlog.Println(\"Hellow\")\nlog.Println(\"Hellow\")\nlog.Println(\"Hellowr\")\nlog.Println(\"Hello  world\")\nlog.Println(\"Hello word2 \")\nlog.Println(\"Hello world 3\")\nlog.Println(\"Hello world 4\")\nlog.Println(\"Hello world5\")\n\n}\nwhen type a line, the cpu usage is 100% percent...\ni have count the cpu usage as follows:\n\nthe last column data is cpu average usage in 60s, the data count as below:\ngocode.exe  17.55  11.40  9.77  9.42  8.83  8.65  7.84  7.67  6.99  6.57  6.56  6.34\ngopkgs.exe  8.41  8.11 \nconhost.exe 7.84  6.40 \ngo-outlint.exe 7.49\nget the cpu usage picture:\n\nso gocode.exe spends mostly cpu, i don't know why this happened, i have same compute with my colleague\uff0c in his computer everything is ok, is there any method to find out why gocode.exe use so many cpu resource?\ni'm doubt about that when type a word in the editor, the gocode.exe is call every time? so there are so many gocode.exe running...\n. i cannot find why this happen in my computer, maybe its really some configure is wrong, i have give up it... the issue can be closed.. ",
    "grazimdeoliveira": "\ud83d\ude08. ",
    "cezarsa": "So, the reasoning for Go Structs to use the Class icon was because Go structs might look a bit more like classes in other languages since they can have methods. Also, C++ structs use the Class icon as well.\nUsing Struct icons for other types was arbitrary really, I didn't know exactly what icon to use on them. After taking a look at how the C extension handles this I found out that it uses the Enum icon for typedef declarations. Maybe I should also switch other types to the Enum icon for consistency?. ",
    "schroding3rscat": "I'm using 0.6.93. The problem is with this snippet. When I hit F5 and vscode generates launch.js for me, I cannot start my project. I get an error with an unclear message that port 2345 is already used. Even if I don't want to remote debug anything, a port is still in the snippet.. I checked new launch.js generation and it seems that it doesn't add port there. My script was probably generated in the old version. I think this issue can be closed now.. ",
    "godblesshugh": "\n@godblesshugh That issue is unrelated\n\nsorry didn't read carefully, unrelated indeed.. ",
    "Delphier": "same issue +1. VSCode: 1.30.1\nGo Extension: 0.8.0\nGo 1.11.4\nEnabled go.mod\ngodef-gomod install failed:\n```\ncd ........\\src\\github.com\\ianthehat\\godef; git pull --ff-only\nfatal: Not possible to fast-forward, aborting.\npackage github.com/ianthehat/godef: exit status 128\n```\nrename godef.exe to godef-gomod.exe, works fine.\n. +1. ",
    "margusha": "installation on mac also fails and setting go.toolsGopath did not help either. Seems the issue for me is on this line: \nhttps://github.com/Microsoft/vscode-go/blob/4abdf8f604c720a346bf7c0910588568a6a23807/src/goInstallTools.ts#L358\ngetBinPath(tool) resolves to 'gocode-gomod' which is obviously wrong and throws system error \"Error: spawn ENOTDIR\" which causes promise to be rejected without handling the rejection and as a result nothing is installed and no error is seen on the ui.\nthe issue seems to be that in case getBinPath(tool) returns just a toolname (e.g. gocode-gomod) then there's no starting slash which would indicate filesystem path and causes OS level error. when I switched that line to cp.execFile('/'+tool, ....) install completed successfully (though this is not a 'production' fix obviously)\nI was struggling to understand why there would be any need to start a process with a binary that does not exist yet.. @ramya-rao-a I was using node 10.9.0 but tried with 6.x, 8.x, 9.x and encountered the same issue.\nI managed to reproduce both errors in isolation on command line.\nvar cp = require('child_process');\ncp.execFile('noslashatthebeginning', [], {}, (err, stdin, stderr) => { console.log(\"error\", err) });\noutputs Error: spawn ENOTDIR\nand if I add forward slash to the first argument like in following snippet, it will behave differently by giving ENOENT:\nvar cp = require('child_process');\ncp.execFile('/thereisaslashathebeginning', [], {}, (err, stdin, stderr) => { console.log(\"error\", err) });\nthe cp.execFile runs correctly if it finds binary file from path. e.g. cp.execFIle('node',[-v], () => {}). runs correctly.\njust went over with debugger and getBinPath('gocode-gomod') returns gocode-gomod which is not a command neither a path but causes ENOTDIR which indicates there should be something on that path. which doesn't make sense.\nI guess it is related to node.js itself. if I'm not mistaken, older versions of node.js child_process.spawn did not handle ENOTDIR which could lead to unhandled promise rejection but the error itself should not even happen in this case. \nCan't reproduce the ENOTDIR on different machine though. something magical is going on. it is too specific issue to spend time on and investigate further but maybe it helps someone else if in the same situation.\nthe other way to get the installation to work is by manually installing gocode and gocode-gomod, just have to take in to account that both install under the same name and one should be named gocode-gomod\ngo get github.com/stamblerre/gocode // rename this one to gocode-gomod\ngo get github.com/mdempsky/gocode\nI guess my initial whining about the failing install was premature and it is related to something specific to my environment, sorry :) \nWill try out if your code change makes my computer happy \n. It works like a charm! installs the tools correctly. thanks :). ",
    "mnewswanger": "I'm able to repro. ",
    "MathiasGr": "Thank you for your responsiveness! I can confirm it works again in the beta.. @mhr3 did you set the option \"go.gotoSymbol.includeImports\": true ?\nIf you did, one issue might be that your suite is defined in another file, and testify/suite isn't imported in your test file. You can fix it by putting this line somewhere in your test file to force the package to be imported:\ngo\nvar _ = suite.TestingSuite(nil). Well I'm afraid setting this setting includeImports to true is the only way to fix it right now.. @ramya-rao-a didn't know about it, I have now :). ",
    "lanox": "@ramya-rao-a  Yes I am using go modules and I am on go 1.11.1, using vscode Version 1.28.0 (1.28.0)\nalso I seem to have issues where go to definition is no longer working at all.\nHowever testing go to def in vi using vim-go works fine, I am not sure if that helps anything or not.\n. ",
    "saibing": "@lanox @ramya-rao-a \nbingo is a new go language server that support go 1.11 module.\nplease try it.. @kidlj \nbingo is a new go language server that support go 1.11 module.\nyou can try it.. @kybom \nbingo is a new go language server that support go 1.11 module.\nyou can try it. the first time it may be slowly when hover, and then it will become fast.\nif you enable -use-global-cache flag, it will become very fast.. @WangPengJu \nbecause vscode only support go-langserver by far. so you need rename bingo(or bingo.exe) to go-langserver(or go-langserver.exe),  and then you can use bingo in vscode as the same as go-langserver.\n. @kybom \nI'm sorry,  I forgot this. \nI don't have any plans to support the traditional GOPATH mode project.\nGo 1.12 will give up GOPATH support, so I think it is time to turn to go module project. @dryewo \nbingo is a new go language server that support go 1.11 module.\nyou can try it. . @avence12 \nbingo is a new go language server that support go 1.11 module.\nyou can try it. . \u53ef\u4ee5\u8bd5\u7528\u4e00\u4e0bbingo\u6216go-langserver\uff0c\u4f7f\u7528\u8bed\u8a00\u670d\u52a1\uff0c\u4f1a\u51cf\u5c11vscode-go\u8c03\u7528\u5916\u90e8\u7a0b\u5e8f\u7684\u6570\u76ee\uff0c\u4f1a\u51cf\u5c11\u5927\u91cf\u5916\u90e8\u5de5\u5177\uff0c\u6548\u679c\u6bd4\u8f83\u660e\u663e\u3002\n\u56e0\u4e3aWindows\u4e0a\u542f\u52a8\u8fdb\u7a0b\u6bd4Linux\u8981\u6162\u5f88\u591a\uff0c\u6240\u4ee5\u5728Windows\u8c03\u7528\u5927\u91cf\u5916\u90e8\u5de5\u5177\u4f1a\u5bfc\u81f4\u7f16\u8f91\u5668\u6709\u70b9\u5361\u3002\n\u8fd9\u4e48\u591ago\u8fdb\u7a0b\uff0c\u5e94\u8be5\u662f\u8c03\u7528go vet, go build\u5bfc\u81f4\u7684\uff0c\u4f60\u67e5\u770b\u4e00\u4e0b\u547d\u4ee4\u884c\u4e00\u5217\uff0c\u770b\u4e00\u4e0b\u53c2\u6570\u6709\u54ea\u4e9b\uff0c\u5177\u4f53\u5728\u5e72\u4ec0\u4e48\uff1f\u7136\u540e\u7981\u7528\u6389\u76f8\u5173\u529f\u80fd. @ssqf \nBy the way, we should use English to talk on here.. @awking \nI am very sorry for this.\nGo 1.11 already supports go module, Go 1.12 will only support go module.\n\nHow migrate GOPATH project  to go module project?  just need run 'go mod init' in the project root directory.\n\nIf bingo support both GOPATH project and go module project at the same time,   it's code will become very complicated and will have a high maintenance cost.\u3000but my spare time is very limited\nWhy the features of vscode-go is so confusing?\nBecause it need to support so many tools, and support both go module and gopath at the same time.. @awking \nI am very sorry for this.\nGo 1.11 already supports go module, Go 1.12 will only support go module.\n\nHow migrate GOPATH project  to go module project?  just need run 'go mod init' in the project root directory.\n\nIf bingo support both GOPATH project and go module project at the same time,   it's code will become very complicated and will have a high maintenance cost.\u3000but my spare time is very limited\nWhy the features of vscode-go is so confusing?\nBecause it need to support so many tools, and support both go module and gopath at the same time.. @awking \nbingo already support non-go module project. please see: saibing/bingo#5. @ssqf \nMay be you can try bingo\nbingo is designed for offline editors such as vscode, vim, it focuses on code editing.. @krasoffski \nMicrosoft/vscode#65127. @krasoffski \nIt's may be a go language server's bug. bingo have already fixed this bug.\nyou can try it.. @vladyslav2 \nHow to use bingo with vscode-go\nHow to get error logs ?\nyou can add \"--trace\", \"--logfile=/tmp/bingo.log\" to bingo, . @ramya-rao-a \n\nThere is a question that confuses me, why does the vscode show 8 lines?. @ramya-rao-a \nbingo already supports non-go module project, I have done some manual test cases, it looks like everything is fine, I will add some automation test cases in the future.. ",
    "chainhelen": "\n. ",
    "jrwren": "References: https://github.com/Microsoft/vscode-go/issues/1973\nMay I have a Hacktoberfest label?. err... oops, I just noticed this isn't correct. I'll attempt to fix.. > Why use last? The go get behavior is to use the first.\nI thought so too, but that is not what I observed. Can you double check that you observe it installing to first?. That is pretty definite documentation. I wonder why I think I observed what I observed. I'll change this.\nI also had a question re: calling go install? Why use -o rather than calling go install with GOPATH set?. I realize now that the same code paths in vscode-go are made to install the tools even when there is no GOPATH, e.g. the GOPATH is infered per project or the go project uses go modules. I'm going to change the index to 0 and hopefully that is acceptable.. @ramya-rao-a fixed this in 9608da32ef6c5677db19d076574ed5770997d011\n. This is a duplicate of #1966 \n. ",
    "torn4dom4n": "Sorry @ramya-rao-a I didn't read it. I see you did everything \ud83d\ude06.. No problem!. ",
    "Scapal": "This commit in golang.org/x/tools/go/packages introduces a breaking change:\nhttps://github.com/golang/tools/commit/2f1727f1b37d7d257665debc72d4ae0b8e449748#diff-04792145c70ebd708928684da4875fe9R108\nBoth github.com/ianthehat/godef and  github.com/stamblerre/gocode depend on this.. I also use Go 1.11 modules.\nI don\u2019t have problems in the other local packages of my project, only the main packages under /cmd.\nMaybe the package main is the common pattern.. ",
    "yfwz100": "By changing the function signatures (omitting the third parameter), it seems to work fine.. ",
    "pbarker": "why use a forked version of godef here? We're somewhat at @ianthehat's mercy as to whether he's even around. Perhaps this is a good time to move upstream if we don't have a compelling reason otherwise. thanks for the context @ramya-rao-a, would it maybe make sense to fork that into the Microsoft namespace so there are at least multiple people able to push a fix in the event @ianthehat is unavailable?. ",
    "pathcl": "hey all,\nmaybe Im doing something wrong? but its creating problems :( \n\n. ",
    "olivierperes": "Thanks for letting me know about Hacktoberfests :smiley: . ",
    "AwesomeObserver": "I think that better use new Go logo.. ",
    "BillyPurvis": "I for one approve our new halloween eyeless Gopher. . ",
    "tmack8080": "@ramya-rao-a - Can you just try with the new logo so we can see what it looks like?. ",
    "timdmackey": "Aww, the poor guy just needs some cataract surgery! \n\n. ",
    "d8660091": "It only happens to godef-gomod, namely, when go.mod exists in the root path of the project.. @egonelbre thanks, I'm closing it now. ",
    "youngderekm": "I think I'm seeing the same.  In my case, my breakpoint appears to be hit - the program pauses, the callstack for my function says \"PAUSED ON BREAKPOINT\", but the I click on that thread it doesn't open the stack and shows no variables.  I can continue the program and the thread goes back to \"RUNNING\" state, but that's all I see.  I'm using go 1.11, vscode 1.28.0.. I see these errors in the VSCode Developer Tools console which seem to be related:\nERR [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"<autogenerated>\", query: \"\", fragment: \"\"}: Error: [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"<autogenerated>\", query: \"\", fragment: \"\"}\n    at file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:125:506\n    at t.e (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:126:340)\n    at new t (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:127:895)\n    at Function.e.parse (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:127:155)\n    at new e (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2956:631)\n    at e.getSource (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2973:602)\n    at file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2572:367\n    at Array.map (<anonymous>)\n    at e.getCallStackImpl.t.session.stackTrace.then.n.stoppedDetails.n.stoppedDetails.framesErrorMessage (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2572:333)\n    at Object.g [as _notify] (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:160:729)\n    at Object.enter (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:164:61)\n    at n.Class.derive._oncancel._run (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:165:902)\n    at n.Class.derive._oncancel._completed (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:165:343)\n    at file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2605:843\n    at t.e.acceptMessage (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2609:49)\n    at t.handleData (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2610:155)\n    at Socket.<anonymous> (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2609:643)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:594:20)\nerrors.ts:48 WARNING: Promise with no error callback:234\nerrors.ts:49 {exception: Error: [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"<autogenerated>\", query: \"\"\u2026, error: null, promise: n.C\u2026s.d\u2026e._creator, handler: undefined, id: 234,\u00a0\u2026}\nerrors.ts:51 Error: [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"<autogenerated>\", query: \"\", fragment: \"\"}\n    at uri.ts:30\n    at t.e (uri.ts:173)\n    at new t (uri.ts:388)\n    at Function.e.parse (uri.ts:270)\n    at new e (debugSource.ts:55)\n    at e.getSource (debugSession.ts:744)\n    at debugModel.ts:459\n    at Array.map (<anonymous>)\n    at e.getCallStackImpl.t.session.stackTrace.then.n.stoppedDetails.n.stoppedDetails.framesErrorMessage (debugModel.ts:458)\n    at Object.g [as _notify] (winjs.base.js:1191)\n    at Object.enter (winjs.base.js:867)\n    at n.Class.derive._oncancel._run (winjs.base.js:1089)\n    at n.Class.derive._oncancel._completed (winjs.base.js:1057)\n    at rawDebugSession.ts:514\n    at t.e.acceptMessage (debugAdapter.ts:146)\n    at t.handleData (debugAdapter.ts:226)\n    at Socket.<anonymous> (debugAdapter.ts:203)\n    at emitOne (events.js:116)\n    at Socket.emit (events.js:211)\n    at addChunk (_stream_readable.js:263)\n    at readableAddChunk (_stream_readable.js:250)\n    at Socket.Readable.push (_stream_readable.js:208)\n    at Pipe.onread (net.js:594). ",
    "jpopadak": "I just started having this issue too. It started yesterday and I believe there was a VSCode update (and maybe an extension update?).\nAs @youngderekm stated, it seems to hit the breakpoint, but nothing shows in the stack, the variables sometimes show (about 10% of the time I try to debug). One thing to note. If I have a previous breakpoint, somewhere BEFORE the GRPC endpoint gets hit, the debugger works correctly, but still does not show any debugging info for the breakpoint in question. \nFor example: If I am inside of a GRPC Validate() method using the GRPC Validator interceptor, it properly debugs all the way until it attempts to call my implementation of the GRPC Endpoint itself. If I were to Step In that method, it breaks the debugger. The code below is the generated server-side source that calls my implementation of the endpoint. The debugger works in this location where >>>> is denoted. Once I tell it to step in, it fails.\n```go\nfunc _ResourceClassification_GetClassificationType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {\n    in := new(GetClassificationTypeRequest)\n    if err := dec(in); err != nil {\n        return nil, err\n    }\n    if interceptor == nil {\n        return srv.(ResourceClassificationServer).GetClassificationType(ctx, in)\n    }\n    info := &grpc.UnaryServerInfo{\n        Server:     srv,\n        FullMethod: \"/.ResourceClassification/GetClassificationType\",\n    }\n    handler := func(ctx context.Context, req interface{}) (interface{}, error) {\n\n\n\n\n  return srv.(ResourceClassificationServer).GetClassificationType(ctx, req.(*GetClassificationTypeRequest))\n}\nreturn interceptor(ctx, in, info, handler)\n\n}\n```\n\n\n\n\nVerbose logs from the debugger is attached. The last few lines includes me stepping into the function that is failing.\nverboseLogs.txt\n. This ticket is related to the already open ticket here: https://github.com/Microsoft/vscode-go/issues/1987. @ramya-rao-a This half works in the Insiders Edition.  When I am debugging a test, I am at least getting an error message in the Call Stack tool window. While debugging, it hits the breakpoint, under the thread it shows \"Unable to produce stack trace: \"Internal debugger error: runtime error: slice bounds out of range runtime.call32(0x1057ada) ...\"\nWhen I debug a running program, it hits the breakpoints correctly and shows the variables correctly. However, it jumps to the proc.go file in the gopark method a ton (almost every single time I hit Step Over or Step Into). The debugger seems to correct itself (about 70% of the time) and jumps back to the source code itself that I was stepping through. Let me know if you need logs from either one. . ",
    "sjdweb": "@youngderekm I am seeing the same error too.\nAlso see this in the Output > Log (Window)\n```\n[2018-10-15 14:13:24.150] [renderer4] [error] [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"\", query: \"\", fragment: \"\"}: Error: [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"\", query: \"\", fragment: \"\"}\n    at file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:125:506\n    at t.e (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:126:340)\n    at new t (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:127:895)\n    at Function.e.parse (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:127:155)\n    at new e (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2956:631)\n    at e.getSource (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2973:602)\n    at file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2572:367\n    at Array.map ()\n    at e.getCallStackImpl.t.session.stackTrace.then.n.stoppedDetails.n.stoppedDetails.framesErrorMessage (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2572:333)\n    at Object.g [as _notify] (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:160:729)\n    at Object.enter (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:164:61)\n    at n.Class.derive._oncancel._run (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:165:902)\n    at n.Class.derive._oncancel._completed (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:165:343)\n    at file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2605:843\n    at t.e.acceptMessage (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2609:49)\n    at t.handleData (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2610:155)\n    at Socket. (file:///Applications/Visual Studio Code.app/Contents/Resources/app/out/vs/workbench/workbench.main.js:2609:643)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:594:20)\n```. Assume you downloaded from here?. Still happening for me on the latest build.. I can confirm this appears to be fixed in the latest insiders!. ",
    "jpeletier": "I have the same issue. Going back to vscode 1.27 (August) solved it for me.. @ramya-rao-a \"Now out\" or \"not out\"? In the last release? \ud83d\ude05. ",
    "jig": "I have the same issue. Using Go 1.11.1 and vscode 1.28.1. \nGoing back to vscode 1.27.2 solved it for me.\nUbuntu 16.04 LTS. @sjdweb yes (well, in fact I still had a local copy). ",
    "eliastor": "Any workaround available?. BTW such behaviour occurs with projects outside $GOPATH/src/ . ",
    "freezlite": "I guess problem with this commit\nhttps://github.com/Microsoft/vscode/commit/cef0992fff3900ee8f86fdcdbbed6801b636f9ed#diff-2e2415aa74df8729e8b700ae772baf79R61. So the reason is that RPC return \"<autogenerated>\" text here https://github.com/Microsoft/vscode-go/blob/master/src/debugAdapter/goDebug.ts#L777 in location.file. Previously vscode dont handle this well, but now commit change this. \nI found dirty hack to fix this\nlocations.forEach((location, i, object) => {\n    if (location.file === \"<autogenerated>\") {\n        object.splice(i, 1);\n    }\n});. Here is pull request, please dont blame on me if this is not correct way to resolve the problem, but it works for me https://github.com/Microsoft/vscode-go/pull/2029. Delve return <autogenerated> for type casting for example, maybe in some different situations. I think no need to check for path if delve return autogenerated. Next stack after this\nhttps://github.com/goji/goji/blob/master/dispatch.go#L17\n2  0x0000000000a3e67c in bitbucket.org/my/project/vendor/goji%2eio.dispatch.ServeHTTP\n    at /home/freezlite/go/src/bitbucket.org/my/project/vendor/goji.io/dispatch.go:17\n 3  0x0000000000a4200b in bitbucket.org/my/project/vendor/goji%2eio.(*dispatch).ServeHTTP\n    at <autogenerated>:1. It's not mine code, but it crash debuger in vscode. ",
    "sebglon": "I always have this error a few time aog with Go extension(0.7.0)\n4log.ts:171   ERR [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"_testmain.go\", query: \"\", fragment: \"\"}: Error: [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"_testmain.go\", query: \"\", fragment: \"\"}\n    at file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:125:506\n    at t.e (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:126:340)\n    at new t (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:127:895)\n    at Function.e.parse (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:127:155)\n    at new e (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2956:631)\n    at e.getSource (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2973:602)\n    at file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2572:367\n    at Array.map (<anonymous>)\n    at e.getCallStackImpl.t.session.stackTrace.then.n.stoppedDetails.n.stoppedDetails.framesErrorMessage (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2572:333)\n    at Object.g [as _notify] (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:160:729)\n    at Object.enter (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:164:61)\n    at n.Class.derive._oncancel._run (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:165:902)\n    at n.Class.derive._oncancel._completed (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:165:343)\n    at file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2605:843\n    at t.e.acceptMessage (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2609:49)\n    at t.handleData (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2610:155)\n    at Socket.<anonymous> (file:///usr/share/code/resources/app/out/vs/workbench/workbench.main.js:2609:643)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:594:20). And on my call stack i can see an error \nshow the screenshot: https://drive.google.com/file/d/1lNkqvvbRSINMr5IOSR07TvDJO20u9-Ui/view?usp=sharing. This not work on main vscode version\nand the same on the latest inside:\nVersion: 1.29.0-insider\nCommit: 5f24c93878bd4bc645a4a17c620e2487b11005f9\nDate: 2018-11-10T00:29:18.485Z\nElectron: 2.0.12\nChrome: 61.0.3163.100\nNode.js: 8.9.3\nV8: 6.1.534.41\nArchitecture: x64\nwith this error:\nworkbench.main.js:sourcemap:294 [IPC Library: File Watcher (nsfw)] Unhandled Promise Rejection:  Error: Path must be a valid path to a file or a directory.\n    at /usr/share/code-insiders/resources/app/node_modules.asar/vscode-nsfw/lib/src/index.js:79:11\n    at <anonymous>\nt.log @ workbench.main.js:sourcemap:294\nworkbench.main.js:sourcemap:1446  INFO no standard startup: not a new window\n2workbench.main.js:sourcemap:294 [Extension Host] Error when running go env GOMOD: Error: spawn /usr/local/go/bin/go ENOENT (at cp.execFile (/home/sebglon/.vscode-insiders/extensions/ms-vscode.go-0.7.0/out/src/goModules.js:17:25))\nt.log @ workbench.main.js:sourcemap:294. A small gist with trace:\nhttps://gist.github.com/sebglon/c576ebdcd534ecae0be35e7ea51b7df5. After more research this is solved on insider version\nLe ven. 2 nov. 2018 15:11, GLabat notifications@github.com a \u00e9crit :\n\nHi ,\nWe have the same behaviour and the only workaround found was to stick to\nvscode 1.27.2\u2026\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2062#issuecomment-435392342,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ADALeglQuSriW52QvewAbqM7X3BJY8Faks5urFKNgaJpZM4YCIiX\n.\n-- \n[image: Akeneo] https://www.akeneo.com\n\nS\u00e9bastien GLON\nCloud TEAM\n[image: Address] 2 Place General Mellinet, 44100 Nantes\nhttps://maps.google.com/?q=2 Place General Mellinet, 44100 Nantes\nsebastien.glon@akeneo.com\n[image: Phone]\nwww.akeneo.com\n[image: Twitter] https://twitter.com/akeneopim [image: Github]\nhttps://github.com/akeneo [image: Linkedin]\nhttps://www.linkedin.com/company/akeneo/ [image: Facebook]\nhttps://www.facebook.com/akeneopim/?ref=br_rs [image: Youtube]\nhttps://www.youtube.com/channel/UCFFKXJdZLX5igCbitT-b6lA [image:\nInstagram] https://www.instagram.com/akeneopim/\n[image: Ziggy] https://ziggy.akeneo.com\n. I have the same on insider version.\nI have used a debug configuration.\nAnd i have no error on dlv command\n.             \"name\": \"Launch e2e test file\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"test\",\n            \"program\": \"${file}\",\n            //\"showLog\": true,\n            //\"trace\": \"verbose\"\n        },. And no custom config on vscode.\n$ dlv version\nDelve Debugger\nVersion: 1.1.0\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $\n$ go version\ngo version go1.11.2 linux/amd64\n$ go env\nGOARCH=\"amd64\"\nGOBIN=\"\"\nGOCACHE=\"/home/sebglon/.cache/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"linux\"\nGOOS=\"linux\"\nGOPATH=\"/home/sebglon/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\nGCCGO=\"gccgo\"\nCC=\"gcc\"\nCXX=\"g++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"/home/sebglon/go/src/github.com/akeneo/helm-backup/go.mod\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build601237167=/tmp/go-build -gno-record-gcc-switches\"\n\"go.delveConfig\": {\n    \"useApiV1\": false,\n    \"dlvLoadConfig\": {\n      \"followPointers\": true,\n      \"maxVariableRecurse\": 3,\n      \"maxStringLen\": 400,\n      \"maxArrayValues\": 400,\n      \"maxStructFields\": -1\n    }\n  },.\n",
    "altimac": "I reported the bug at the wrong place first. @isidorn replied:\n\nPlease file this agains the go and delve debugger and tell them they have to support evaluateName property for this actions to be enabled\n. \n",
    "mrwonko": "I figured I can do with an outdated golint, but you could probably just manually run go get -u -v golang.org/x/lint/golint. Awesome! Happy to see it required so few changes.. ",
    "gow": "Same issue. Just upgraded to version 1.28.1 and the language server became CPU hungry.. @ramya-rao-a I didn't explicitly go back to old version to verify. But I noticed the issue as soon as I applied the update. Everything was working just fine before I updated.\nI'll try to go back to previous version to verify. Will report in a bit.. I confirmed that VS Code 1.27.2 doesn't have this issue with same Go extension 0.6.91. ",
    "ankur-anand": "@ramya-rao-a I've updated the go-tool today 0.6.91 and after that, it uses a huge chunk of CPU all the time, \naverage load\ncommand\n ankur \u25b6 ~/Desktop/\u2026/twoSum \u25b6 $ \u25b6 uptime\n 20:20:31 up 30 min,  1 user,  load average: 14.81, 14.53, 11.34\nprocess info\n```command\n ankur \u25b6 ~/Desktop/\u2026/twoSum \u25b6 $ \u25b6 ps -eo pcpu,pid,user,args | sort -k1 -r -n | head -10\n52.6  5406 ankur    /usr/bin/go build -o /tmp/vscode-goKgQCYU/go-code-check .\n51.6  5415 ankur    /usr/bin/go vet ./...\n51.4  5600 ankur    /usr/bin/go build -o /tmp/vscode-goKgQCYU/go-code-check .\n51.2  5596 ankur    /usr/bin/go vet ./...\n41.9  7757 ankur    go list -e -json -compiled -test=true -export=true -deps=true -tags= -- .\n41.8  7644 ankur    /usr/bin/go build -o /tmp/vscode-gosPJvQE/go-code-check .\n41.7  7784 ankur    /usr/bin/go vet ./...\n41.5  7640 ankur    /usr/bin/go vet ./...\n41.3  7791 ankur    /usr/bin/go build -o /tmp/vscode-gosPJvQE/go-code-check .\n 3.7 13848 ankur    /usr/lib/chromium-browser/chromium-browser --type=renderer --field-trial-handle=16958379901938881904,8968544606741407184,131072 --service-pipe-token=7304318142105071701 --lang=en-US --enable-offline-auto-reload --enable-offline-auto-reload-visible-only --num-raster-threads=2 --enable-main-frame-before-activation --service-request-channel-token=7304318142105071701 --renderer-client-id=45 --shared-files=v8_context_snapshot_data:100,v8_natives_data:101\n````\nNext highest usage after go process is chromium process and its only consuming 3.7% of cpu, as compared to all other go process consuming around 50%\nObservation:\nMultiple go vet process keeps running along with the corresponding go build, even when vscode has been closed.\ngo version\ngo version go1.11 linux/amd64\nCPU Consuming most time in the User Space\n```command\n ankur \u25b6 ~/Desktop/\u2026/twoSum \u25b6 $ \u25b6  mpstat\nLinux 4.15.0-36-generic (thinkpad-e470)     10/17/2018  x86_64    (4 CPU)\n08:17:21 PM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle\n08:17:21 PM  all   78.19    0.06    3.00    0.26    0.00    0.22    0.00    0.00    0.00   18.27\n```\n@dbaeumer I closed the vscode process and waited for 15min but the CPU load never went down. And this issue started coming after tool update only.. I Don't have any custom setting for go.buildOnSave and go.VetOnSave.\nThe project i was working was really small only two file, with two functions.\nI'm closing the issue as of now because I'm not observing the issue now. \nAll i did was, removed the various package needed by the vs-code go and rebuild those again.\nThanks for your help :+1: :smile: . ",
    "pmalekn": "I am only using vs code with Go for a couple of weeks and using langserver was always causing huge CPU spikes and memory consumption. VS code version 1.28.2, go plugin 0.7.0, go-langserver SHA 0ed1299806f7c16c0fd25d9ac31ef20e48cd4ce0.\nAttaching cpu and heap profiles if that might help anyone. (while creating the heap profile langserver was using around 14 gigs of memory - at least that's what Activity Monitor said)\npprof.alloc_objects.alloc_space.inuse_objects.inuse_space.001.pb.gz\npprof.samples.cpu.001.pb.gz\n. @ramya-rao-a 1.27.2 seems better after using it for a while but I wouldn't like to bet on it. I've left go-langserver version as described in my previous post and now I don't see those memory and CPU spikes. ",
    "lybest": "I have the same issue, did someone fix this problem?. ",
    "ColtonProvias": "It looks like everybody is just waiting for the official Go langserver to be released, which could be a while. Even over on Sourcegraph's repository, they are advocating just waiting for the official server to ship.\nStill, it's not helpful in the interim for us suffering from this bug.. ",
    "tj": "not sure if this is related, autocomplete works fine for a while, but after maybe ~30 minutes I run into cases where it spawns a ton of these processes \n\n. nice thanks! I'll try it out, sounds like the issue should be opened on go-langserver. Anything specific about Bingo which stood out? It doesn't seem to have a comparison with go-langserver really. going to reopen, I'm a little confused about which repo is responsible for doing the go doc calls, but this happens every few minutes. They should at least have some kind of timeout and SIGKILL so they don't stick around forever. dup of #2276. I get this all the time as well, I tried updating all the Go tools using the install/update command but no luck (Sierra), you pretty much can't type without it spawning dozens of these. Should these processes have some kind of timeout? In my case it often (always?) shows undefined as well, as seen in #2248, maybe a bug? I've been working in Go WASM lately, maybe that's part of the problem, I forget now if I had this issue with non-js,wasm build tags\nI tried updating to the beta as well, still get dozens when typing as normal. \ntj               24422  76.6  0.1  2543312  23436   ??  U    12:33pm   0:16.35 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined createApp\ntj               24444  64.7  0.1  2541264  16880   ??  R    12:33pm   0:07.27 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined createApp\ntj               24470  64.2  0.1  2542352  16680   ??  U    12:33pm   0:04.59 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined app\ntj               24433  63.5  0.1  2541520  23236   ??  R    12:33pm   0:14.31 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined createApp\ntj               24478  62.8  0.1  2541008  17084   ??  U    12:33pm   0:04.53 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined newApp\ntj               24427  62.2  0.1  2542544  23276   ??  R    12:33pm   0:16.09 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined createApp\ntj               24465  61.9  0.1  2541264  16968   ??  R    12:33pm   0:04.73 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined app\ntj               24483  60.4  0.1  2541520  17036   ??  R    12:33pm   0:04.28 /usr/local/go/pkg/tool/darwin_amd64/doc -c -cmd -u undefined newApp\n. strange, -exclude-docs fixed it until I restarted my machine, now it's back to spawning them, the user setting is still set correctly. I tried re-installing the beta as well.. double checked the workspace settings but mine are empty, I tried gocode exit and restarting vscode a few times but somehow it's still doing it. Thanks for the help by the way :D vscode seems much nicer than Atom so far . I ran find . -name \"node_modules\" -exec rm -rf '{}' + (WARNING: dont blame me for losing stuff haha) to remove node modules recursively, since many repos in my GOPATH also have Node-based client code, now unsuccessful go doc lookups are quite a bit faster:\n```\n$ time go doc something\nreal    2m25.068s\nuser    0m17.772s\nsys 1m45.039s\n$ time go doc something\nreal    0m19.955s\nuser    0m2.499s\nsys 0m9.343s\n```\nIt might be safe to close this issue since go doc is at fault for the CPU usage. My thoughts so far for improvements would maybe be:\n\nadd a timeout for maybe a few seconds, since showing the docs after a huge delay isn't super useful anyway\nkill previous go doc processes when spawning a new one as the old results are no longer going to be displayed. I think go doc is just traversing too many directories searching for a match. I opened an issue for that here, Brad seemed open to black-listing node_modules: https://github.com/golang/go/issues/30058. possibly related to this node_modules stuff if you have any client-side projects, sounds really similar \u2014 see https://github.com/golang/go/issues/30058 and #2276, but I would expect go modules to be faster since it's not resolving anything in GOPATH? \n. \n",
    "cfiderer": "Hello Ramya,\nI am a bit confused by your reply:\n- The autogenerated launch.json configuration has program: ${fileDirname} - what other variable would provide the name of the Go file that I'm currently editing?\n- Do I need to provide separate launch configurations for each and every runnable Go file in my workspace?. PS: manually debugging the program with dlv.exe works fine.. Hi Ramya,\nGo-0.6.94-beta.4.vsix fixes the issue.\nSorry for not detecting the older issue #2038 - and thanks for the quick response.. ",
    "autinerd": "I looked again at this and recognized that this happens at functions which are member functions of structs. Example: https://github.com/gobuffalo/validate/blob/master/validate.go\n\n. I tried it and it's a lot better then godoc, thank you very much!. ",
    "yinfxs": "```go\npackage main\nimport \"github.com/gin-gonic/gin\"\nfunc main() {\n    r := gin.Default()\n    r.GET(\"/\", func(c *gin.Context) {\n        c.String(200, \"hello\")\n    })\n    r.Run()\n}\n```\n\n. I have provided version information in the first comment:\n macOS 10.13.6\n vscode 1.28.0\n vscode-go 0.6.91\n go version go1.11 darwin/amd64. Thanks.. ",
    "bihe": "Can confirm the exact same behavior on\n\nUbuntu 18.10 x86_64\nvscode 1.28.2\nvscode-go 0.7.0\ngo version go1.11 linux/amd64\n\nThe problem only occurs if one adds/removes breakpoints during a debug-session. . @ramya-rao-a I have used the godoc example of a http handler as the testing-code (https://golang.org/pkg/net/http/#example_ListenAndServe). Using this I can reproduce/show the behavior.\nThe process only hangs if I change breakpoints \"outside\" of debug sessions. \n1) start debug session with breakpoint in handler\n2) call the handler\n3) breakpoint hits (next)\n4) remove the breakpoint\n4) call the handler again\n5) breaks at breakpoint location - even no breakpoint is set\n6) stop debug session\n7) dlv process is not terminated\nI've created a video showing the behavior above:\nhttps://s3.eu-central-1.amazonaws.com/bihe.share/vscode_golang_debug.webm\nIf I change the breakpoint only during a active debug session the behavior is normal/expected.\n1) start debug session with breakpoint in handler\n2) call the handler\n3) breakpoint hits -> remove the breakpoint\n4) call the handler again\n5) breakpoint does not hit\n6) stop debug session\n7) dlv process (and child process) is terminated \nAgain short video shwoing this behavior:\nhttps://s3.eu-central-1.amazonaws.com/bihe.share/vscode_golang_debug_OK.webm\n\nAdding a breakpoint is only possible either before a debug session starts or when another breakpoint is hit\n\nIf this is the case (the example above shows it) I was not really aware of this. I could not find anything in the docs (https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code). Compared with the debugging experience of other vscode extensions (e.g. omnisharp-vscode) this is a rather non-standard-behavior.\nUpdate of my environment:\n Ubuntu 18.10 x86_64\n vscode 1.29.1\n vscode-go 0.7.0\n go version go1.11 linux/amd64. Regarding #2002 \nWow, that's a great debug experience! \nI was first :confused: because of\n\nThe issue of breakpoints getting added successfully only before a debug session or when another \nbreakpoint is hit is a limitation on delve's side which doesn't allow interacting with the target process when it is running.\n\nI can now happily add/remove/.. breakpoints even if there is no active breakpoint currently hit. \nSo the stop-breakpoint-start approach works perfectly!\nIf the debug process is stopped, also the 'dlv' and 'debug' processes are terminated. \nI summary overachieved - because I did not expect the freedom to change breakpoints not matter when :+1: \nEnvironment:\n\nUbuntu 18.10 x86_64\nvscode 1.30.2\nvscode-go 0.8.1-beta.10\ngo version ggo1.11.4 linux/amd64\n. \n",
    "ericpitcher": "I'm having the same problem right now on mac, first time testing delve with go extension and after hitting the stop button the debug process is still alive. @ramya-rao-a \nI added the trace: verbose.\nWhat I have found is that if I create the breakpoints before I launch debugging, then debugging works, the breakpoints are hit and when I hit stop the debug process is killed. \nIt is when I click to launch debugging with no breakpoints in place and I add them afterward is when they are not hit and when I click on the stop button the debug process does not get killed. I have the debug log for each case below, I perform the same debug steps in each case below, refresh the browser only once to trigger breakpoint on web server response, then I stop debugging, again only difference is at what point breakpoints are added. This is the code I am debugging https://github.com/ericpitcher/go-vs-code-debugging\nWhen debugging is failing, breakpoints not hit, debug process does not die when stopped - Breakpoints are created after debug launch\nVerbose logs are written to:\n/var/folders/m5/dt184yv95sd55pgqzw8q3mkm0000gn/T/vscode-go-debug.txt\n10:15:33 AM, 1/16/2019\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /Users/eric/go\nCurrent working directory: /Users/eric/go/src/myserve\nRunning: /Users/eric/go/bin/dlv debug myserve --headless=true --listen=127.0.0.1:32083 --api-version=2 --\nAPI server listening at: 127.0.0.1:32083\nInitializeEvent\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/eric/go/src/myserve/main.go:10\nDisconnectRequest\nHaltRequest\nWhen debugging is successful, breakpoints are hit, debug process does die when stopped - Breakpoints are created before debug launch\nVerbose logs are written to:\n/var/folders/m5/dt184yv95sd55pgqzw8q3mkm0000gn/T/vscode-go-debug.txt\n10:19:05 AM, 1/16/2019\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /Users/eric/go\nCurrent working directory: /Users/eric/go/src/myserve\nRunning: /Users/eric/go/bin/dlv debug myserve --headless=true --listen=127.0.0.1:24297 --api-version=2 --\nAPI server listening at: 127.0.0.1:24297\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /Users/eric/go/src/myserve/main.go:10\nAll set:[{\"id\":1,\"name\":\"\",\"addr\":19842861,\"file\":\"/Users/eric/go/src/myserve/main.go\",\"line\":10,\"functionName\":\"main.handle\",\"Cond\":\"\",\"continue\":false,\"traceReturn\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"LoadLocals\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"hitCount\":{},\"totalHitCount\":0}]\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\ncontinue state {\"Running\":false,\"currentThread\":{\"id\":267440,\"pc\":19842861,\"file\":\"/Users/eric/go/src/myserve/main.go\",\"line\":10,\"function\":{\"name\":\"main.handle\",\"value\":19842832,\"type\":0,\"goType\":0,\"optimized\":false},\"goroutineID\":5,\"breakPoint\":{\"id\":1,\"name\":\"\",\"addr\":19842861,\"file\":\"/Users/eric/go/src/myserve/main.go\",\"line\":10,\"functionName\":\"main.handle\",\"Cond\":\"\",\"continue\":false,\"traceReturn\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"LoadLocals\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"hitCount\":{\"5\":1},\"totalHitCount\":1},\"breakPointInfo\":{\"arguments\":[{\"name\":\"r\",\"addr\":824634366528,\"onlyAddr\":false,\"type\":\"*net/http.Request\",\"realType\":\"*net/http.Request\",\"flags\":8,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824634745088,\"onlyAddr\":false,\"type\":\"net/http.Request\",\"realType\":\"net/http.Request\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":22,\"cap\":0,\"children\":[{\"name\":\"Method\",\"addr\":824634745088,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"GET\",\"len\":3,\"cap\":0,\"children\":[],\"base\":824633820400,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"URL\",\"addr\":824634745104,\"onlyAddr\":false,\"type\":\"*net/url.URL\",\"realType\":\"*net/url.URL\",\"flags\":0,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824634720640,\"onlyAddr\"[...]\nStoppedEvent(\"breakpoint\")\nThreadsRequest\ngoroutines [{\"id\":1,\"currentLoc\":{\"pc\":16982420,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16982208,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":16960270,\"file\":\"/usr/local/go/src/runtime/netpoll.go\",\"line\":173,\"function\":{\"name\":\"internal/poll.runtime_pollWait\",\"value\":16960176,\"type\":0,\"goType\":0,\"optimized\":true}},\"goStatementLoc\":{\"pc\":17156411,\"file\":\"/usr/local/go/src/runtime/asm_amd64.s\",\"line\":201,\"function\":{\"name\":\"runtime.rt0_go\",\"value\":17156112,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16980976,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":110,\"function\":{\"name\":\"runtime.main\",\"value\":16980976,\"type\":0,\"goType\":0,\"optimized\":true}},\"threadID\":0,\"unreadable\":\"\"},{\"id\":2,\"currentLoc\":{\"pc\":16982420,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16982208,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":16982420,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16982208,\"type\":0,\"goType\":0,\"optimized\":true}},\"goStatementLoc\":{\"pc\":16981845,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":240,\"function\":{\"name\":\"runtime.init.4\",\"value\":16981792,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16981872,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":243,\"function\":{\"name\":\"runtime.forcegchelper\",\"value\":16981872,\"type\":0,\"goType\":0,\"optimized\":true}},\"threadID\"[...]\nThreadsResponse [{\"id\":1,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":2,\"name\":\"runtime.gopark\"},{\"id\":3,\"name\":\"runtime.gopark\"},{\"id\":4,\"name\":\"runtime.gopark\"},{\"id\":5,\"name\":\"main.handle\"},{\"id\":6,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":7,\"name\":\"internal/poll.(*FD).Read\"}]\nStackTraceRequest\nlocations [{\"pc\":19842861,\"file\":\"/Users/eric/go/src/myserve/main.go\",\"line\":10,\"function\":{\"name\":\"main.handle\",\"value\":19842832,\"type\":0,\"goType\":0,\"optimized\":false},\"Locals\":[],\"Arguments\":[{\"name\":\"r\",\"addr\":824634366528,\"onlyAddr\":false,\"type\":\"*net/http.Request\",\"realType\":\"*net/http.Request\",\"flags\":8,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824634745088,\"onlyAddr\":false,\"type\":\"net/http.Request\",\"realType\":\"net/http.Request\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":22,\"cap\":0,\"children\":[{\"name\":\"Method\",\"addr\":824634745088,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"GET\",\"len\":3,\"cap\":0,\"children\":[],\"base\":824633820400,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"URL\",\"addr\":824634745104,\"onlyAddr\":false,\"type\":\"*net/url.URL\",\"realType\":\"*net/url.URL\",\"flags\":0,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824634720640,\"onlyAddr\":false,\"type\":\"net/url.URL\",\"realType\":\"net/url.URL\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":9,\"cap\":0,\"children\":[{\"name\":\"Scheme\",\"addr\":824634720640,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"\",\"len\":0,\"cap\":0,\"children\":[],\"base\":0,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"Opaque\",\"addr\":824634720656,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"\",\"len\":0,\"cap\":0,\"children\":[],\"base\":0,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"User\",\"addr\":82463[...]\nStackTraceResponse\nThreadsRequest\ngoroutines [{\"id\":1,\"currentLoc\":{\"pc\":16982420,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16982208,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":16960270,\"file\":\"/usr/local/go/src/runtime/netpoll.go\",\"line\":173,\"function\":{\"name\":\"internal/poll.runtime_pollWait\",\"value\":16960176,\"type\":0,\"goType\":0,\"optimized\":true}},\"goStatementLoc\":{\"pc\":17156411,\"file\":\"/usr/local/go/src/runtime/asm_amd64.s\",\"line\":201,\"function\":{\"name\":\"runtime.rt0_go\",\"value\":17156112,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16980976,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":110,\"function\":{\"name\":\"runtime.main\",\"value\":16980976,\"type\":0,\"goType\":0,\"optimized\":true}},\"threadID\":0,\"unreadable\":\"\"},{\"id\":2,\"currentLoc\":{\"pc\":16982420,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16982208,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":16982420,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16982208,\"type\":0,\"goType\":0,\"optimized\":true}},\"goStatementLoc\":{\"pc\":16981845,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":240,\"function\":{\"name\":\"runtime.init.4\",\"value\":16981792,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16981872,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":243,\"function\":{\"name\":\"runtime.forcegchelper\",\"value\":16981872,\"type\":0,\"goType\":0,\"optimized\":true}},\"threadID\"[...]\nThreadsResponse [{\"id\":1,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":2,\"name\":\"runtime.gopark\"},{\"id\":3,\"name\":\"runtime.gopark\"},{\"id\":4,\"name\":\"runtime.gopark\"},{\"id\":5,\"name\":\"main.handle\"},{\"id\":6,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":7,\"name\":\"internal/poll.(*FD).Read\"}]\nScopesRequest\nlocals []\nfunctionArgs [{\"name\":\"r\",\"addr\":824634366528,\"onlyAddr\":false,\"type\":\"*net/http.Request\",\"realType\":\"*net/http.Request\",\"flags\":8,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824634745088,\"onlyAddr\":false,\"type\":\"net/http.Request\",\"realType\":\"net/http.Request\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":22,\"cap\":0,\"children\":[{\"name\":\"Method\",\"addr\":824634745088,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"GET\",\"len\":3,\"cap\":0,\"children\":[],\"base\":824633820400,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"URL\",\"addr\":824634745104,\"onlyAddr\":false,\"type\":\"*net/url.URL\",\"realType\":\"*net/url.URL\",\"flags\":0,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824634720640,\"onlyAddr\":false,\"type\":\"net/url.URL\",\"realType\":\"net/url.URL\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":9,\"cap\":0,\"children\":[{\"name\":\"Scheme\",\"addr\":824634720640,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"\",\"len\":0,\"cap\":0,\"children\":[],\"base\":0,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"Opaque\",\"addr\":824634720656,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"\",\"len\":0,\"cap\":0,\"children\":[],\"base\":0,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"User\",\"addr\":824634720672,\"onlyAddr\":false,\"type\":\"*net/url.Userinfo\",\"realType\":\"*net/url.Userinfo\",\"flags\":0,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":0,\"onlyAddr\":false,\"[...]\nglobal vars [{\"name\":\"statictmp_0\",\"addr\":20796992,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"ListenAndServe: \",\"len\":16,\"cap\":0,\"children\":[],\"base\":20456460,\"unreadable\":\"\",\"LocationExpr\":\"[block] DW_OP_addr 0x13d5640 \",\"DeclLine\":0}]\nScopesResponse\nVariablesRequest\nVariablesResponse [\n {\n  \"name\": \"r\",\n  \"value\": \"<*net/http.Request>(0xc0000fa100)\",\n  \"evaluateName\": \"r\",\n  \"variablesReference\": 1002\n },\n {\n  \"name\": \"w\",\n  \"value\": \"<net/http.ResponseWriter>\",\n  \"evaluateName\": \"w\",\n  \"variablesReference\": 1003\n }\n]\nVariablesRequest\nVariablesResponse [\n {\n  \"name\": \"statictmp_0\",\n  \"value\": \"\\\"ListenAndServe: \\\"\",\n  \"evaluateName\": \".statictmp_0\",\n  \"variablesReference\": 0\n }\n]\nContinueRequest\nContinueResponse\nDisconnectRequest\nHaltRequest\ncontinue state {\"Running\":false,\"currentThread\":{\"id\":267440,\"pc\":140735162476510,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},\"Threads\":[{\"id\":267440,\"pc\":140735162476510,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":267474,\"pc\":140735162476510,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":267475,\"pc\":140735162488598,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":267476,\"pc\":140735162476510,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":267477,\"pc\":140735162476510,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":267478,\"pc\":140735162476510,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null}],\"NextInProgress\":false,\"exited\":false,\"exitStatus\":0,\"When\":\"\"}\nHaltResponse\nDetachRequest\nDisconnectRequest to parent\n. @ramya-rao-a Great thanks a lot! Let me know if you want me to test anything else out on my Mac.. ",
    "bandesz": "@ramya-rao-a a random example:\n\n. I managed to disable the colored output in this case by using the following setting:\n\"go.testFlags\": [\"-ginkgo.noColor\"]. ",
    "toaster": "Hi there, what are the arguments against making colorization available here?. Ok, thanks for the clarification.. ",
    "jinmatt": "\ud83d\udc4d \nThe same thing is happening when debugging without docker, the debugger does not seem to hit API handlers or endpoints.\nEverything in the call stack looks like PAUSED.  Sceenshot: https://cl.ly/e31600b38c0f\ntrace:\ncontinue state {\"Running\":false,\"currentThread\":{\"id\":1199227,\"pc\":31866287,\"file\":\"/Users/jinmatt/go/src/lib/api/http/health_handler.go\",\"line\":25,\"function\":{\"name\":\"lib/api/http.healthHandler.read\",\"value\":31866272,\"type\":0,\"goType\":0,\"optimized\":false},\"goroutineID\":53,\"breakPoint\":{\"id\":1,\"name\":\"\",\"addr\":31866287,\"file\":\"/Users/jinmatt/go/src/lib/api/http/health_handler.go\",\"line\":25,\"functionName\":\"lib/api/http.healthHandler.read\",\"Cond\":\"\",\"continue\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"LoadLocals\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"hitCount\":{\"53\":1},\"totalHitCount\":1},\"breakPointInfo\":{\"arguments\":[{\"name\":\"h\",\"addr\":824727868248,\"onlyAddr\":false,\"type\":\"lib/api/http.healthHandler\",\"realType\":\"lib/api/http.healthHandler\",\"flags\":8,\"kind\":25,\"value\":\"\",\"len\":0,\"cap\":0,\"children\":[],\"base\":0,\"unreadable\":\"\",\"LocationExpr\":\"[block] DW_OP_call_frame_cfa \",\"DeclLine\":25},{\"name\":\"r\",\"addr\":824727868264,\"onlyAddr\":false,\"type\":\"*net/http.Request\",\"realType\":\"*net/http.Request\",\"flags\":8,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824636548864,\"onlyAddr\":false,\"type\":\"net/http.Request\",\"realType\":\"net/http.Request\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":22,\"cap\":0,\"children\":[{\"name\":\"Method\",\"addr\":824636548864,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\"[...]\nStoppedEvent(\"breakpoint\")\nThreadsRequest\ngoroutines [{\"id\":1,\"currentLoc\":{\"pc\":16987492,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16987280,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":32184162,\"file\":\"/Users/jinmatt/go/src/lib/api/http/server.go\",\"line\":178,\"function\":{\"name\":\"lib/api/http.(*server).ListenAndServe\",\"value\":32177184,\"type\":0,\"goType\":0,\"optimized\":false}},\"goStatementLoc\":{\"pc\":17165051,\"file\":\"/usr/local/go/src/runtime/asm_amd64.s\",\"line\":201,\"function\":{\"name\":\"runtime.rt0_go\",\"value\":17164752,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16986048,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":110,\"function\":{\"name\":\"runtime.main\",\"value\":16986048,\"type\":0,\"goType\":0,\"optimized\":true}},\"threadID\":0,\"unreadable\":\"\"},{\"id\":2,\"currentLoc\":{\"pc\":16987492,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16987280,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":16987492,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16987280,\"type\":0,\"goType\":0,\"optimized\":true}},\"goStatementLoc\":{\"pc\":16986917,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":240,\"function\":{\"name\":\"runtime.init.4\",\"value\":16986864,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16986944,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":243,\"function\":{\"name\":\"runtime.forcegchelper\",\"value\":16986944,\"type\":0,\"goType\":0,\"optimized\":t[...]\nThreadsResponse [{\"id\":1,\"name\":\"lib/api/http.(*server).ListenAndServe\"},{\"id\":2,\"name\":\"runtime.gopark\"},{\"id\":18,\"name\":\"runtime.gopark\"},{\"id\":19,\"name\":\"runtime.gopark\"},{\"id\":20,\"name\":\"os/signal.signal_recv\"},{\"id\":21,\"name\":\"lib/vendor/googlemaps.github.io/maps.NewClient.func1\"},{\"id\":3,\"name\":\"runtime.asmcgocall\"},{\"id\":22,\"name\":\"lib/vendor/gopkg.in/redis.v5/internal/pool.(*ConnPool).reaper\"},{\"id\":23,\"name\":\"runtime.gopark\"},{\"id\":27,\"name\":\"lib/vendor/gopkg.in/redis.v5/internal/pool.(*ConnPool).reaper\"},{\"id\":10,\"name\":\"database/sql.(*DB).connectionOpener\"},{\"id\":34,\"name\":\"runtime.asmcgocall\"},{\"id\":33,\"name\":\"runtime.gopark\"},{\"id\":53,\"name\":\"lib/api/http.healthHandler.read\"},{\"id\":32,\"name\":\"runtime.gopark\"},{\"id\":36,\"name\":\"runtime.gopark\"},{\"id\":8,\"name\":\"runtime.gopark\"},{\"id\":50,\"name\":\"runtime.gopark\"},{\"id\":9,\"name\":\"runtime.gopark\"},{\"id\":51,\"name\":\"runtime.gopark\"},{\"id\":52,\"name\":\"runtime.gopark\"},{\"id\":38,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":66,\"name\":\"io.(*pipe).Read\"},{\"id\":67,\"name\":\"database/sql.(*DB).connectionOpener\"},{\"id\":68,\"name\":\"database/sql.(*DB).connectionResetter\"},{\"id\":69,\"name\":\"lib/vendor/gopkg.in/redis.v5/internal/pool.(*ConnPool).reaper\"},{\"id\":70,\"name\":\"runtime.gopark\"},{\"id\":82,\"name\":\"runtime.gopark\"},{\"id\":98,\"name\":\"runtime.asmcgocall\"},{\"id\":11,\"name\":\"database/sql.(*DB).connectionResetter\"},{\"id\":114,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":16,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":115,\"name\":\"runtim[...]\nStackTraceRequest\nThreadsRequest\nlocations [{\"pc\":31866287,\"file\":\"/Users/jinmatt/go/src/lib/api/http/health_handler.go\",\"line\":25,\"function\":{\"name\":\"lib/api/http.healthHandler.read\",\"value\":31866272,\"type\":0,\"goType\":0,\"optimized\":false},\"Locals\":[],\"Arguments\":[{\"name\":\"h\",\"addr\":824727868248,\"onlyAddr\":false,\"type\":\"lib/api/http.healthHandler\",\"realType\":\"lib/api/http.healthHandler\",\"flags\":8,\"kind\":25,\"value\":\"\",\"len\":0,\"cap\":0,\"children\":[],\"base\":0,\"unreadable\":\"\",\"LocationExpr\":\"[block] DW_OP_call_frame_cfa \",\"DeclLine\":25},{\"name\":\"r\",\"addr\":824727868264,\"onlyAddr\":false,\"type\":\"*net/http.Request\",\"realType\":\"*net/http.Request\",\"flags\":8,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824636548864,\"onlyAddr\":false,\"type\":\"net/http.Request\",\"realType\":\"net/http.Request\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":22,\"cap\":0,\"children\":[{\"name\":\"Method\",\"addr\":824636548864,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"GET\",\"len\":3,\"cap\":0,\"children\":[],\"base\":824727764992,\"unreadable\":\"\",\"LocationExpr\":\"\",\"DeclLine\":0},{\"name\":\"URL\",\"addr\":824636548880,\"onlyAddr\":false,\"type\":\"*net/url.URL\",\"realType\":\"*net/url.URL\",\"flags\":0,\"kind\":22,\"value\":\"\",\"len\":1,\"cap\":0,\"children\":[{\"name\":\"\",\"addr\":824727684224,\"onlyAddr\":false,\"type\":\"net/url.URL\",\"realType\":\"net/url.URL\",\"flags\":0,\"kind\":25,\"value\":\"\",\"len\":9,\"cap\":0,\"children\":[{\"name\":\"Scheme\",\"addr\":824727684224,\"onlyAddr\":false,\"type\":\"string\",\"realType\":\"string\",\"flags\":0,\"kind\":24,\"value\":\"\",\"len\":0,\"ca[...]\nStackTraceResponse\ngoroutines [{\"id\":1,\"currentLoc\":{\"pc\":16987492,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16987280,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":32184162,\"file\":\"/Users/jinmatt/go/src/lib/api/http/server.go\",\"line\":178,\"function\":{\"name\":\"lib/api/http.(*server).ListenAndServe\",\"value\":32177184,\"type\":0,\"goType\":0,\"optimized\":false}},\"goStatementLoc\":{\"pc\":17165051,\"file\":\"/usr/local/go/src/runtime/asm_amd64.s\",\"line\":201,\"function\":{\"name\":\"runtime.rt0_go\",\"value\":17164752,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16986048,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":110,\"function\":{\"name\":\"runtime.main\",\"value\":16986048,\"type\":0,\"goType\":0,\"optimized\":true}},\"threadID\":0,\"unreadable\":\"\"},{\"id\":2,\"currentLoc\":{\"pc\":16987492,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16987280,\"type\":0,\"goType\":0,\"optimized\":true}},\"userCurrentLoc\":{\"pc\":16987492,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":303,\"function\":{\"name\":\"runtime.gopark\",\"value\":16987280,\"type\":0,\"goType\":0,\"optimized\":true}},\"goStatementLoc\":{\"pc\":16986917,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":240,\"function\":{\"name\":\"runtime.init.4\",\"value\":16986864,\"type\":0,\"goType\":0,\"optimized\":true}},\"startLoc\":{\"pc\":16986944,\"file\":\"/usr/local/go/src/runtime/proc.go\",\"line\":243,\"function\":{\"name\":\"runtime.forcegchelper\",\"value\":16986944,\"type\":0,\"goType\":0,\"optimized\":t[...]\nThreadsResponse [{\"id\":1,\"name\":\"lib/api/http.(*server).ListenAndServe\"},{\"id\":2,\"name\":\"runtime.gopark\"},{\"id\":18,\"name\":\"runtime.gopark\"},{\"id\":19,\"name\":\"runtime.gopark\"},{\"id\":20,\"name\":\"os/signal.signal_recv\"},{\"id\":21,\"name\":\"lib/vendor/googlemaps.github.io/maps.NewClient.func1\"},{\"id\":3,\"name\":\"runtime.asmcgocall\"},{\"id\":22,\"name\":\"lib/vendor/gopkg.in/redis.v5/internal/pool.(*ConnPool).reaper\"},{\"id\":23,\"name\":\"runtime.gopark\"},{\"id\":27,\"name\":\"lib/vendor/gopkg.in/redis.v5/internal/pool.(*ConnPool).reaper\"},{\"id\":10,\"name\":\"database/sql.(*DB).connectionOpener\"},{\"id\":34,\"name\":\"runtime.asmcgocall\"},{\"id\":33,\"name\":\"runtime.gopark\"},{\"id\":53,\"name\":\"lib/api/http.healthHandler.read\"},{\"id\":32,\"name\":\"runtime.gopark\"},{\"id\":36,\"name\":\"runtime.gopark\"},{\"id\":8,\"name\":\"runtime.gopark\"},{\"id\":50,\"name\":\"runtime.gopark\"},{\"id\":9,\"name\":\"runtime.gopark\"},{\"id\":51,\"name\":\"runtime.gopark\"},{\"id\":52,\"name\":\"runtime.gopark\"},{\"id\":38,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":66,\"name\":\"io.(*pipe).Read\"},{\"id\":67,\"name\":\"database/sql.(*DB).connectionOpener\"},{\"id\":68,\"name\":\"database/sql.(*DB).connectionResetter\"},{\"id\":69,\"name\":\"lib/vendor/gopkg.in/redis.v5/internal/pool.(*ConnPool).reaper\"},{\"id\":70,\"name\":\"runtime.gopark\"},{\"id\":82,\"name\":\"runtime.gopark\"},{\"id\":98,\"name\":\"runtime.asmcgocall\"},{\"id\":11,\"name\":\"database/sql.(*DB).connectionResetter\"},{\"id\":114,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":16,\"name\":\"internal/poll.runtime_pollWait\"},{\"id\":115,\"name\":\"runtim[...]. ",
    "peteat": "Perhaps, but in my issue the execution never pauses (if you run the above go code the program runs and finishes execution with no pause whatsoever). You can't interrogate any call stack nor does VS Code visually pause. #1987 looks like it manages to successfully set the breakpoint but then has issues once you hit the breakpoint, I can't even get it to set any breakpoints to begin with. Also, the log outputs seem quite different (I'd guess that's because the breakpoints get set).\nI'm only a go/vs code beginner (normally I'm a VS & .NET programmer) but I'd suggest it looks like a separate issue.. Hi @ramya-rao-a apologies for the delay. I've just tested it on the latest insiders and, I'm afraid, it's no different for me. I still get the Error on CreateBreakpoint: could not find... error on debug start.. Hi @ramya-rao-a unfortunately it's the same for me with that latest beta (on VS Code and latest insiders) - Error on CreateBreakpoint: could not find.... ",
    "glerchundi": "@gilcrest it seems like it's solved on master so once they release a new version issue will be gone 9608da32ef6c5677db19d076574ed5770997d011.. ",
    "gilcrest": "OK, thanks @ramya-rao-a ! I'm just trying to understand from a process perspective. There is an issue with the current release due to this external change. I was just wondering why this issue gets closed if the issue is not resolved in a GA release? I would think that it's helpful for others who may be experiencing the issue to be able to easily search for this until it's GA? \nThe first thing I did was search open issues (which is also the default search method on Github) and found no open issues involving golint path. I figured that since there wasn't an open issue, I should report it. Only at this point did I go through the steps to open a new issue...\nExcuse my ignorance, but just wondering if it's commonplace to close issues when they are resolved in beta only? I also noticed several other users went through the same steps of opening issues when the problem had been already solved. \nNext time I have an issue, should I search the closed issues as well as master for latest commits?\nThanks a lot for all the time and energy you put into this extension - I really appreciate all the great work you do!. @ramya-rao-a - \"Especially, because its just me managing this project.\" - that is stunning. Thank you again for all that you do for the Go community, the amazing product you're building and shepherding and for this detailed response. I am happy to look in opened and closed issues and will do so going forward!\nBest,\nDan. ",
    "alexdor": "@ramya-rao-a all the test that have failed here have been fixed at #2014 I can push the commits here as well if you want or I can wait until #2014 is merged and rebase this one on top of it, which one do you prefer? . @ramya-rao-a I've rebased my commit. @ramya-rao-a I've done the changes that you requested above and fixed the deprecation warning from this https://github.com/Microsoft/vscode-go/pull/2013/commits/7afe072aac19d91e5f4087073b6e654d04fe6c27#diff-3090e25fed17a6bd57433c6bbadc451aL22. I've updated all the packages except vscode-languageclient which is the one package that requires a newer vscode version, so it can be merged without changing the engine version . Because of this https://github.com/Microsoft/vscode-go/blob/1cdd3667e957c1aa080f0b6f987771d436b9db6a/.vscode/launch.json#L21 it starts the server at 4712 not 4711. There where typing issues with one of the dependencies with the 1.22 version, I based my solution on this https://github.com/Microsoft/language-server-protocol/issues/556#issuecomment-416884011 comment. ",
    "L1qu1d1c3": "Omg so sorry!! I totally didnt see that!. ",
    "2011fuzhou": "\nInstalling 2 tools at /home/xxxx/go/bin\n  gocode-gomod\n  godef-gomod\n\nsame problem, but i'm using go in windows:\nInstalling 2 tools at D:\\coding\\go\\bin\n  gocode-gomod\n  godef-gomod. ",
    "demothorg": "I have such issue with gocode-gomod.\nVSCode: 1.28.2,\nVSCode-go: 0.6.92,\ngolang: 1.11.1, \nConsole output on every install/update tools run (even successful):\nlog.ts:171   ERR ENOENT: no such file or directory, open 'C:\\Program Files\\Microsoft VS Code\\extension-output-#2': Error: ENOENT: no such file or directory, open 'C:\\Program Files\\Microsoft VS Code\\extension-output-#2'\n    at Object.fs.openSync (fs.js:646:18)\n    at Object.module.(anonymous function) [as openSync] (ELECTRON_ASAR.js:166:20)\n    at Object.fs.readFileSync (fs.js:551:33)\n    at Object.fs.readFileSync (ELECTRON_ASAR.js:538:29)\n    at TrailingSpaces.freezeLastVersion (C:\\Users\\Admin\\.vscode\\extensions\\shardulm94.trailing-spaces-0.2.11\\out\\src\\trailing-spaces\\trailing-spaces.js:266:51)\n    at C:\\Users\\Admin\\.vscode\\extensions\\shardulm94.trailing-spaces-0.2.11\\out\\src\\trailing-spaces\\trailing-spaces.js:56:19\n    at e.fire (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:99:496)\n    at c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:588:237\n    at e.fire (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:99:496)\n    at e.$acceptDocumentsAndEditorsDelta (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:488:823)\n    at t._doInvokeHandler (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:640:888)\n    at t._invokeHandler (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:640:554)\n    at t._receiveRequest (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:639:126)\n    at t._receiveOneMessage (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:638:59)\n    at c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:635:926\n    at c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:98:138\n    at e.fire (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:99:496)\n    at a (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:154:213)\n    at Socket._socketDataListener (c:\\Program Files\\Microsoft VS Code\\resources\\app\\out\\vs\\workbench\\node\\extensionHostProcess.js:154:432)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:594:20)\nAnd also I have godoc installation error:\n```\nInstalling 1 tool at C:\\Users\\Admin\\Documents\\Source\\Go\\bin\n  godoc\nInstalling undefined FAILED\n1 tools failed to install.\ngodoc:\nError: Command failed: C:\\Go\\bin\\go.exe get -u -v \npackage undefined: unrecognized import path \"undefined\" (import path does not begin with hostname)\npackage undefined: unrecognized import path \"undefined\" (import path does not begin with hostname)\n```\n. ",
    "jailr": "Same here.\n\nInstalling 13 tools at /mnt/xxxx/go/bin\n  gocode\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  dlv\n  gocode-gomod\n  godef\n  godef-gomod\n  goreturns\n  golint\n  golangci-lint\n. \n",
    "Dexus": "The same problem, nothing helps.... still..... \nHow can I downgrade to an earlier version that works?. The fix does not help.....\nThe problem is that #2025 does not fix this in any way.\nThe following has helped me:\n```\ngo get -u -v github.com/ianthehat/godef\ngo get -u -v github.com/stamblerre/gocode\nand in $GOPATH/bin use the first folder of the gopath, if there are several.....\ncp godef godef-gomod\ncp gocode gocode-gomod\n```\nHave fun!. > The issue with godoc is resolved in #2025.\n\nI have pushed a separate fix for the issue with gocode-gomod\nCan someone here try the beta-version of this extension to confirm the fix?\n\nMaybe you also fix this with godef and godef-gomod. @ramya-rao-a Okay, but even gocode-gomod didn't help me. I didn't explicitly test the latest beta, but I think it would make sense to intercept it as well for godef-gomod. @ramya-rao-a Sorry godef-gomod is correct, I'm a bit confused the day is already more than 20 hours old :eyes:. It does indeed only concern gocode-gomod to making everything work.. I'll never pass this in my tests. see #2024. As in #2024 already pointed out I fix it myself with a copy. Would be nice if the current fix will be published asap. That works for me.. ",
    "sonofachamp": "@ramya-rao-a The fix is working for me. \ud83d\udc4d . ",
    "lrstanley": "What I see in process.env:\n\nSo, the plugin is getting the environment variable, but it's not passed through to the child process, go.exe.. as running the same command returns the expected output when GOPROXY is missing.\n(this fails with ssl errors due to corp firewall):\n```\nInstalling 1 tool at C:/Users/liam/go\\bin\n  goreturns\nInstalling github.com/sqs/goreturns FAILED\n1 tools failed to install.\ngoreturns:\nError: Command failed: C:\\Go\\bin\\go.exe get -u -v github.com/sqs/goreturns\ngithub.com/sqs/goreturns (download)\ncd .; git clone https://github.com/sqs/goreturns C:\\Users\\liam\\go\\src\\github.com\\sqs\\goreturns\nCloning into 'C:\\Users\\liam\\go\\src\\github.com\\sqs\\goreturns'...\nfatal: unable to access 'https://github.com/sqs/goreturns/': SSL certificate problem: unable to get local issuer certificate\npackage github.com/sqs/goreturns: exit status 128\ngithub.com/sqs/goreturns (download)\ncd .; git clone https://github.com/sqs/goreturns C:\\Users\\liam\\go\\src\\github.com\\sqs\\goreturns\nCloning into 'C:\\Users\\liam\\go\\src\\github.com\\sqs\\goreturns'...\nfatal: unable to access 'https://github.com/sqs/goreturns/': SSL certificate problem: unable to get local issuer certificate\npackage github.com/sqs/goreturns: exit status 128\n```\nWhen I go to the terminal in VSCode and run the exact same command, it properly sees GOPROXY, and uses it for the go modules:\nPS C:\\Users\\liam\\code\\pipeline-gen> C:\\Go\\bin\\go.exe get -u -v github.com/sqs/goreturns\ngo: finding github.com/sqs/goreturns latest\nPS C:\\Users\\liam\\code\\pipeline-gen> goreturns\nusage: goreturns [flags] [path ...]\n  -b    remove bare returns\n[...more output...]\nIn regards to VSCodes networking related proxy settings, this is unrelated. GOPROXY is something new with the new Go modules support -- it allows you to pull dependencies from a central location. Trying to use the go proxy as a normal http proxy will completely fail.\nHere is the documentation for GOPROXY, pulled from one of my linux instances:\n```\n$ go help goproxy\nThe go command by default downloads modules from version control systems\ndirectly, just as 'go get' always has. The GOPROXY environment variable allows\nfurther control over the download source. If GOPROXY is unset, is the empty string,\nor is the string \"direct\", downloads use the default direct connection to version\ncontrol systems. Setting GOPROXY to \"off\" disallows downloading modules from\nany source. Otherwise, GOPROXY is expected to be the URL of a module proxy,\nin which case the go command will fetch all modules from that proxy.\nNo matter the source of the modules, downloaded modules must match existing\nentries in go.sum (see 'go help modules' for discussion of verification).\nA Go module proxy is any web server that can respond to GET requests for\nURLs of a specified form. The requests have no query parameters, so even\na site serving from a fixed file system (including a file:/// URL)\ncan be a module proxy.\nThe GET requests sent to a Go module proxy are:\nGET $GOPROXY//@v/list returns a list of all known versions of the\ngiven module, one per line.\nGET $GOPROXY//@v/.info returns JSON-formatted metadata\nabout that version of the given module.\nGET $GOPROXY//@v/.mod returns the go.mod file\nfor that version of the given module.\nGET $GOPROXY//@v/.zip returns the zip archive\nfor that version of the given module.\nTo avoid problems when serving from case-sensitive file systems,\nthe  and  elements are case-encoded, replacing every\nuppercase letter with an exclamation mark followed by the corresponding\nlower-case letter: github.com/Azure encodes as github.com/!azure.\nThe JSON-formatted metadata about a given module corresponds to\nthis Go data structure, which may be expanded in the future:\ntype Info struct {\n    Version string    // version string\n    Time    time.Time // commit time\n}\n\nThe zip archive for a specific version of a given module is a\nstandard zip file that contains the file tree corresponding\nto the module's source code and related files. The archive uses\nslash-separated paths, and every file path in the archive must\nbegin with @/, where the module and version are\nsubstituted directly, not case-encoded. The root of the module\nfile tree corresponds to the @/ prefix in the\narchive.\nEven when downloading directly from version control systems,\nthe go command synthesizes explicit info, mod, and zip files\nand stores them in its local cache, $GOPATH/pkg/mod/cache/download,\nthe same as if it had downloaded them directly from a proxy.\nThe cache layout is the same as the proxy URL space, so\nserving $GOPATH/pkg/mod/cache/download at (or copying it to)\nhttps://example.com/proxy would let other users access those\ncached module versions with GOPROXY=https://example.com/proxy.\n``\n. I'm sorry for the delay, I was in SF for hashiconf. I didn't run from source, as I don't have nodejs, and corp laptop makes it hard. I just modified the transpiled source to include the following two lines inside roughly the same place you mentioned (Promise.resolve([])).then`):\ngoStatus_1.outputChannel.appendLine('process.env: ', process.env['GOPROXY']);\n        goStatus_1.outputChannel.appendLine('envForTools: ', envForTools['GOPROXY']);\nand the output is:\n```\nInstalling 7 tools at C:\\Users\\liam\\go\\bin\n  gopkgs\n  go-outline\n  go-symbols\n  guru\n  gorename\n  dlv\n  godoc\nInstalling github.com/uudashr/gopkgs/cmd/gopkgs FAILED\nInstalling github.com/ramya-rao-a/go-outline FAILED\nInstalling github.com/acroca/go-symbols FAILED\nInstalling golang.org/x/tools/cmd/guru FAILED\nInstalling golang.org/x/tools/cmd/gorename FAILED\nInstalling github.com/derekparker/delve/cmd/dlv FAILED\nprocess.env: \nenvForTools: \n7 tools failed to install.\ngopkgs:\nError: Command failed: C:\\Go\\bin\\go.exe get -u -v github.com/uudashr/gopkgs/cmd/gopkgs\ngithub.com/uudashr/gopkgs (download)\ncd .; git clone https://github.com/uudashr/gopkgs C:\\Users\\liam\\go\\src\\github.com\\uudashr\\gopkgs\nCloning into 'C:\\Users\\liam\\go\\src\\github.com\\uudashr\\gopkgs'...\nfatal: unable to access 'https://github.com/uudashr/gopkgs/': SSL certificate problem: unable to get local issuer certificate\npackage github.com/uudashr/gopkgs/cmd/gopkgs: exit status 128\ngithub.com/uudashr/gopkgs (download)\ncd .; git clone https://github.com/uudashr/gopkgs C:\\Users\\liam\\go\\src\\github.com\\uudashr\\gopkgs\nCloning into 'C:\\Users\\liam\\go\\src\\github.com\\uudashr\\gopkgs'...\nfatal: unable to access 'https://github.com/uudashr/gopkgs/': SSL certificate problem: unable to get local issuer certificate\npackage github.com/uudashr/gopkgs/cmd/gopkgs: exit status 128\n[...lots more failures...]\n```\nAs you can see, it's printing nothing after the prefix..:\nprocess.env: \nenvForTools:\nAnd yet, when I open debug tools in vscode, and print the environment variable, it's there:\n\nWhat I'm wondering is if it's being stripped out before it's being passed to the extension. Maybe vscode strips anything that has proxy in the name, as it assumes it's related to the network proxy settings? In any case, it doesn't look like it's getting passed to the go executable, even though it's being passed to vscode, and vscode itself sees it.\nCan you replicate this? All it takes is to run the athens proxy docker container temporarily, and update your GOPROXY environment to point to it, so the athens proxy caches all of the downloaded go v1.11.x modules.. Any update to this?. Yes, I have also invoked it from the command line, from the same environment where go env shows the GOPROXY environment variables (and go get <etc> requests through Athens work).\nFor @arschles -- note that this is solely for the portion where the vscode-go plugin attempts to go get dependencies. This is not related to using the embedded terminal to go get dependencies.. Using Git Bash is how I usually invoke it on windows:\n```console\nliam@hostname MINGW64 ~\n$ echo $GOPROXY\nhttp://TRUNCATED.internal.com:3000\nliam@hostname MINGW64 ~\n$ go env GOPROXY\nhttp://TRUNCATED.internal.com:3000\n```\nUsing command prompt though:\n```console\nC:\\Users\\liam>echo %GOPROXY%\nhttp://TRUNCATED.internal.com:3000\nC:\\Users\\liam>go env GOPROXY\nhttp://TRUNCATED.internal.com:3000\n```. As a followup to what I mentioned in https://github.com/Microsoft/vscode/issues/65113; I think there may still be some issues in vscode-go, not vscode itself.\n@ramya-rao-a, you told me to use:\n\nprocess.env['GOPROXY'] and envForTools['GOPROXY']\n\nI made the modification in the generated plugin at $HOME/.vscode/extensions/ms-vscode.go-0.8.0/out/src/goInstallTools.js. This time around, I am doing the modifications to the same file.\nI just tested again, trying to print all of process.env using goStatus_1.outputChannel, and it was empty as well. Testing console.log(process.env) prints everything to the console properly. seems passing non-strings to goStatus_1.outputChannel doesn't work.. I see GOPROXY defined in console.log(process.env).\nUsing goStatus_1.outputChannel.appendLine('process.env', process.env['GOPROXY']) still doesn't work, not sure why. Now that I think about it, it probably only takes one argument, and we're trying to pass it multiple.\nIn any case, I think I know what's going on. It looks like you're explicitly setting:\njavascript\nenvForTools['GO111MODULE'] = 'off';\nWhich.. GOPROXY doesn't work when module support is disabled. This is more of an issue with GOPROXY than with this plugin, since enabling module support would mean the tools would be added to the go.mod file.. which I don't think is what we'd want. However, since I am in a corporate environment, and we can't easily go get things, I don't think it's the worst to have these things dumped into the dependency list of the given project (and... downloaded over and over again for multiple projects).. I suspect people using GOPROXY are in corporate environments.. and as such, would be in the same situation. Maybe if GOPROXY is set (and not set to off), we don't set GO111MODULE=off (or maybe set to on?)\nOr, maybe add an option to the extension to Download extension dependencies with go module support or similar?. > There have been other users who had these proxy issues in corporate environment before. Using the http.proxy setting has helped out in those cases. Can you give that a try?\nUnfortunately, we cannot setup a proxy in this fashion. The only way is via a controlled environment through something like Athens for our usecase.\n\nWe really don't want to get into a place where the tools need to be downloaded into more than 1 location\n\nWhich makes sense,, however, with the changes to go modules, GOPATH is being deprecated (the words \"deprecated\" show up in https://github.com/golang/go/issues/24301, I'm not sure to what extent -- I expect support to still exist, at least for Go 1.x.x). A good amount of work has gone into things like cache being moved out of $GOPATH, as well as $GOPATH/pkg being moved into the new build cache locations (iirc, this is where they are now).\nMoving forward, might be better to focus on the use of $GOBIN so things don't have to be downloaded in multiple locations.\nI'm not saying what I recommended is the best option, but I do think it will become more of an issue, and warrants more discussion on alternatives.. Filtering through the proposal a bit more, I do see:\n\nThe plan, subject to proposal approval, is to release module support in Go 1.11 as an optional feature that may still change. The Go 1.11 release will give users a chance to use modules \u201cfor real\u201d and provide critical feedback. Even though the details may change, future releases will be able to consume Go 1.11-compatible source trees. For example, Go 1.12 will understand how to consume the Go 1.11 go.mod file syntax, even if by then the file syntax or even the file name has changed. In a later release (say, Go 1.12), we will declare the module support completed. In a later release (say, Go 1.13), we will end support for go get of non-modules. Support for working in GOPATH will continue indefinitely.\n\nPrimarily:\n\nSupport for working in GOPATH will continue indefinitely.\n\nSo that is good at least -- though, there is still a usecase for $GOBIN here.. I was able to install all of them through Athens, if I ran the go get's myself (so I could keep GO111MODULE enabled). They should without using Athens as well. I think what the user in #1919 was experiencing is a bug in Go, as to why the go get's were failing:\nhttps://github.com/golang/go/issues/27215 (primarily this one)\nhttps://github.com/golang/go/issues/29363\nhttps://github.com/golang/go/issues/29484. My guess is that go get in module mode is expecting something from e.g. Github (in terms of branches or tags maybe), that Github/most repos don't have, but Athens returns those as some kind of default maybe? Could be as simple as interpreting /... wrong in some cases with the response (not the request).\nWhen I see:\n\ngo get golang.org/x/tools/...: no matching versions for query \"latest\"\n\nThe first thing this makes me think there is a mismatch with tag/branch names, and what it finds for latest.. only a guess though. Modules should be backwards compatible with things that haven't been converted to a module yet, even for cases where the go get call includes /... based queries.\nI've also used Artifactory's Golang support, and I believe it suffered from issues with ... as well.\n\nSnippet from the docs: https://tip.golang.org/cmd/go/#hdr-Module_aware_go_get\n\nNote that package patterns are allowed and are expanded after resolving the module versions. For example, 'go get golang.org/x/perf/cmd/...' adds the latest golang.org/x/perf and then installs the commands in that latest version.\n\nAnd, according to https://github.com/golang/go/issues/27215#issuecomment-427672781, what the docs say doesn't actually work!\n\nHere is that example from the doc from scratch:\n$[...]\n$ go get golang.org/x/perf/cmd/...\ngo: finding golang.org/x/perf/cmd/... latest\ngo: finding golang.org/x/perf/cmd latest\ngo: finding golang.org/x/perf latest\ngo get golang.org/x/perf/cmd/...: no matching versions for query \"latest\". \n",
    "szmcdull": "Using the dlv command line debugger, I can successfully set a line breakpoint inside init() and debug just like normal.. Great! After installing the beta-version, it works again. But 'Check for Updates' of Visual Code says server returned 502. Don't know if it is related to the beta-version?. ",
    "tarekbadrshalaan": "this command /usr/local/go/bin/go test -timeout 30s github.com/tarekbadrshalaan/goStuff/configuration -coverprofile=/tmp/vscode-goQL6BAQ/go-code-cover printed in output tab when I used the command to toggle test coverage\nI sent the command to you to make sure that the coverage test didn't run test in sub directory.. I tried it.\nVerstion : 0.6.94-beta.3\nstill not working and working normally if i put the test file in the same directory with the package.\nyou can find many of this case here\nwe have to find away to pass the \"Test package path\" to the coverage tool.\n.  Verstion : 0.6.94-beta.3\n/tmp/vscode-goDbs9q9/go-code-cover\nthe contents\nmode: set. ",
    "steeve": "Thanks, shouldn't it be Go-0.6.94-beta2 ?. ",
    "dimdiden": "Just in case, here are the logs:\nvscode-go-debug.txt\n. @ramya-rao-a  I've set the breakpoint with the help of runtime.Breakpoint().\nIt doesn't matter the way I set the breakpoint, the issue remains the same.\nCould you please reopen the issue?. @ramya-rao-a I took another screenshot, where you can see VSCode breakpoints and no variables:\n\nKindly take a look at this issue, really looks like a bug. Thank you.. @ramya-rao-a \nThank you for the explanation. I understand the workflow, though.\nI think I need to change the description of the issue to \"no breakpoint hit and no variables showed if gorilla handlers.LoggingHandler is used\"\nI've recorded the behaviour for your convenience:\nhttps://drive.google.com/file/d/1YEFCV4Z5OcWX3MuLRCJ5zTMUCO2ZoMEn/view\nCould you please take a look once again?\n. My env is the same:\n Mac OS: 10.14 (18A391)\n go version go1.11.1 darwin/amd64\n* Delve Debugger\nVersion: 1.1.0\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $\nI don't know what to think now:( Maybe any debug configuration? I'm using the default one.. I've attached the logs in the second comment in this thread.\nCould you please take a look?\n. Hi @ramya-rao-a ,\nThanks, here they are:\nvscode-go-debug_ERROR.txt\nvscode-go-debug_SUCCESS.txt\n. Yes! It works. Thank you very much for the help @ramya-rao-a !. ",
    "angulito": "Yep, I understand you @ramya-rao-a, although maybe it will be difficult to develop with open source libraries that maybe does not have support for Go 1.8 (I think it will happen in the short future).\n\nI've created a new PR fixing a minor typo in the pipeline: https://github.com/Microsoft/vscode-go/pull/2065\nI've checked there is a new library which seems not supporting the Go 1.8 and I've seen you have opened an issue - so I guess we cannot fix that pipeline error right now.\n\nThanks to you.. @ramya-rao-a also you can check here golint project has removed 1.8 version because it's not longer support too - https://travis-ci.org/golang/lint/jobs/444888944. ",
    "eliveikis": "I'm seeing a similar bug.\nFeatures:\n1. Some of my breakpoints fail to pause execution.\n2. The debug toolbar still shows as if execution is running, however the callstack appears and the breakpoint's file shows PAUSED on BREAKPOINT, but the file does not get focused.\n3. If I click on any goroutine in the CALL STACK window, the pause symbol on the toolbar transitions to the Continue symbol (see screenshot). At this point I can hit f10 to step, and eventually step out into a file that appears.\n4. The same breakpoint that fails with the above symptoms can in some cases work perfectly normally - for example if I run a different test that has a different codepath to the given breakpoint, the breakpoint can be hit normally. Possibly issue with threading/goroutines?\nSorry but I cannot provide the code, and I don't have a clear repro (I'm not sure why some breakpoints work and others do not).\nI'm not using modules. Go 1.11.1, Windows, Latest vscode, while debugging a test via the IDE single test \"Debug\" button link. Have tried go clean and go clean -testcache.\n\n. ",
    "GLabat": "Hi ,\nWe have the same behaviour and the only workaround found was to stick to vscode 1.27.2\u2026\n. Hi, indeed no more issue with latest vscode insiders.\nThx.. ",
    "rubenzinho07": "\ud83d\ude08\nEm Dom, 4 de nov de 2018 05:54, GLabat notifications@github.com escreveu:\n\nHi, indeed no more issue with latest vscode insiders.\nThx.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2062#issuecomment-435649775,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Apf3hJN1T2yGspOfrWdQ25XwkszjEqRnks5urp08gaJpZM4YCIiX\n.\n. \ud83d\ude08\n\nEm Dom, 4 de nov de 2018 04:21, Karl Goffin notifications@github.com\nescreveu:\n\nHi @ramya-rao-a https://github.com/ramya-rao-a , thanks for the clear\nfeedback and the warm welcome! I've added another commit which allows the\nsuggestion to show up in the first word. I've also rebased off of master to\nresolve a minor conflict.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/pull/2070#issuecomment-435645447,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Apf3hDoeP_em8TJxEgdrmh6j_tfwAHnkks5urodngaJpZM4YFvYo\n.\n. \ud83d\ude08\n\nEm Dom, 4 de nov de 2018 19:09, Ramya Rao notifications@github.com\nescreveu:\n\nThanks for reporting @kidlj https://github.com/kidlj\n@ianthehat https://github.com/ianthehat,\nWhat can we expect from godef when trying to find a definition of a\nsymbol which is used in a package under pkg/mod ?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2077#issuecomment-435706550,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Apf3hHE_jZR8bFjvGe9ivuJNjrBv0Ixuks5ur1eJgaJpZM4YMqXq\n.\n.  \ud83d\ude08\n\nEm Dom, 4 de nov de 2018 02:22, \u674e\u6653\u8f89 notifications@github.com escreveu:\n\nLeft is vscode, while the right is atom.\nhttps://camo.githubusercontent.com/fd71ab9dcf28cd1542726b46f9e883ff797f0555/68747470733a2f2f692e706f7374696d672e63632f6b6e47626a4233302f575832303138313130342d3132313535372d32782e706e67\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2083, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Apf3hLXJYy6_JMVuvLBVdSl3skyLYmXcks5urmuhgaJpZM4YNImr\n.\n. \ud83d\ude08\n\nEm Ter, 13 de nov de 2018 03:02, Ramya Rao notifications@github.com\nescreveu:\n\nI believe this is because the run test codelens runs the test as go test\n-run ^TestFoo$ -ok whereas the debug codelens starts delve and passes -ok\nas value for the --build-flags argument.\nThe debug test codelens always had its limitations, especially when the\ntest relied on arguments being passed to it. This is such a case and the\nworkaround is to fallback to using a debug configuration in the launch.json\nfile and pass -ok as part of the args property.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2115#issuecomment-438137710,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Apf3hMxQtvOR8aNrm7vwjxd_KfEzxDWeks5uulJhgaJpZM4YYchb\n.\n. \ud83d\udc79\n\nEm Dom, 25 de nov de 2018 15:53, Segev Finer notifications@github.com\nescreveu:\n\nIt's quite useful to be able to see the value of a const/var in\nhovers/completions. Using the default configuration you only get that for\nconsts and only on hover.\nThis depends on information that is returned from the tools themselves. So\nimplementing this will likely require extending the tools with the required\ninformation.\nScreenshot\n[image: image]\nhttps://user-images.githubusercontent.com/24731903/48982350-0adbf180-f0ea-11e8-8e63-c682334579ba.png\nStatus (ATM)\nUsing the default godef/go doc and gocode:\nHover Completion\nConst \u2714\ufe0f \u274c\nVar \u274c \u274c Sample Code\npackage main\nimport \"fmt\"\nconst foo = \"foo\"const Bar = \"bar\"\nvar baz = \"baz\"var Qux = \"Qux\"\nfunc main() {\n  fmt.Println(foo, Bar, baz, Qux)\n}\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2146, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Apf3hDrCPE7AvITyFgILwC-t9LEtEvSfks5uytkXgaJpZM4Yx-9J\n.\n. \n",
    "kagof": "Hi @ramya-rao-a , thanks for the clear feedback and the warm welcome! I've added another commit which allows the suggestion to show up in the first word. I've also rebased off of master to resolve a minor conflict.. ",
    "lanrat": "I'm having the same issue, unfortunately it appears that the gorename tool does not yet support go modules. \nMore info: https://github.com/Microsoft/vscode-go/issues/1954#issuecomment-426387803. Slight update in the Go Modules in 2019 blog post today. It looks like the new golang.org/x/tools/go/packages package will be the place where this, and other IDE integrations will implemented with support for modules.. ",
    "rohmanhm": "\nUsing with Find All References it works fine. I thought it was a bug. But after browsing gorename it turns out that it doesn't support go modules yet.\nIf you still curious, You can track current status about gorename, here's the links:\n- https://github.com/golang/go/issues/27571\n- https://github.com/golang/go/issues/24661. ",
    "brycekahle": "This does add an intermediate level to the expansion. Alternatively, I could attempt to rework the code to display it like so:\n```\np: 0 <int>(0xc000078080)\nq: 1 <int>(0xc000078088)\nr: <*[]string>(0xc000086080)\n``. AFAICT the CI failures are not related to my changes. Perhaps someone can re-run them?. @ramya-rao-a I've added a setting for the maximum stack trace depth.. @ramya-rao-a FYI changing this to 20 by default, will not allow any paging unless the setting is changed. VS Code uses a page size of 20, and by default we never indicate there are more than 20 frames (viatotalFrames`).\nPerhaps it is worth filing an issue on delve to have better support for stack frame paging?. I'm pretty sure it worked for me, but I can try again. . > The debug test codelens always had its limitations, especially when the test relied on arguments being passed to it. This is such a case and the workaround is to fallback to using a debug configuration in the launch.json file and pass -ok as part of the args property.\n@ramya-rao-a  Could we add a new config value go.testArgs that is specifically for args during tests? That would solve this particular issue.. A lot of limitations of the debug test code lens are because it uses a hard-coded launch config:\nhttps://github.com/Microsoft/vscode-go/blob/6d3476914e841008e1692960b3f64904b5684b69/src/goRunTestCodelens.ts#L18-L26. The extension does support v2 of the Delve API. The Remote Debugging section must be outdated.. The latest CI failure does not appear to be related.. > although the dereferenced pointer value is labeled with a single colon, which might be a bug\nThis is how VS Code displays variables. It wants a name and value, but there is no name for the dereferenced value. I mentioned this design choice in the original PR and it was deemed good enough.\n\nThe debugger presentation of the pointer type seems incompatible with the other integral types\n\nIncompatible in what way? They are not identical, but AFAIK this issue is about design decisions and doesn't impact functionality in any way.\n\nMaybe it makes sense to display it as just p: 0xc0000160f8 and let the user infer the type from the code like for the other variable types\n\nIMHO we should leave the type information in. It may not be obvious from the code what the type is. The debugger is helping here by removing ambiguity. We show type information for other variables as well ([]uint8, bytes.Buffer in the screenshot posted, for example).. > I'm not sure what value there is in having a separate line for the dereferenced value. Is it possible to omit the dereferenced value and display the fields directly under the pointer?\nA trivial amount of value is in showing the unambiguous data relationship. It is definitely possible to display it, as in your 2nd example. This would be more difficult than the original changes I made, but not impossible. I'd be happy to review your PR if you wanted to attempt that change.\n\nThis is explained by the sentence that follows it about how different cases are displayed:\n\nIncompatible, for me, indicates some sort of functionality issue. IMHO Displaying pointers differently than simple types, is not an incompatibility.\n\nOK, so then shouldn't we display i and x above as i: <int>(0) and x: <X>(34) to be consistent? Same for string(\"foo\"), rune('Z'), etc\n\nPerhaps, but that is far beyond the scope of the original request in #1989, which was to improve the display of pointer values. I did not change the existing display behavior for other types.\n. @ramya-rao-a This was the only way to pass along currentFile, but this is obviously not configuration. Is it OK to not have currentFile in the schema in package.json?. ",
    "lockp111": "godef-gomod not work,vscode-go version v0.7.0 on macos.. ",
    "qjebbs": "@lockp111 try update tool gocode-gomod and/or update to go extension beta, it works.. @ramya-rao-a Just to let you know, I came into the same problem. When I debug in my environment, I got exactly the same error godef: There must be at least one package that contains the file.\nIf I add cwd option here:\nhttps://github.com/Microsoft/vscode-go/blob/de55816045aae9e4fead7b7d906bf3c97bd79c5e/src/goDeclaration.ts#L85\nThat is:\nts\np = cp.execFile(\n    godefPath,\n    ['-t', '-i', '-f', input.document.fileName, '-o', offset.toString()],\n    <cp.ExecFileOptions>{ env: env, cwd: path.dirname(input.document.fileName) },\n    (err, stdout, stderr) => {\n        // ...\n    }\n);\nThen godef-gomod works as expected.. ",
    "yuri-dzabaev": "same problem. ",
    "shay-novik": "Having the same issue. ",
    "cousinbenson": "I also have the same problem, which seems to be intermittent.\nVSCode Insiders 1.31.0\nvscode-go 0.8.1-beta.3\nDelve v1.0.0\nAfter setting \"trace\":\"verbose\" it seems we never get a response from both DisconnectRequest & HaltRequest\nvscode-go-debug-txt:\nClearing: 1\nFrom client: disconnect({\"restart\":false})\nDisconnectRequest\nHaltRequest\nOn a successful terminate the log shows:\nFrom client: disconnect({\"restart\":false})\nDisconnectRequest\nHaltRequest\ncontinue state {\"Running\":false,\"currentThread\":{\"id\":180131,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},\"Threads\":[{\"id\":180179,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180189,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180190,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180195,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180131,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180177,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180178,\"pc\":140735299301458,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180180,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180181,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180191,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null},{\"id\":180192,\"pc\":140735299289522,\"file\":\"\",\"line\":0,\"goroutineID\":0,\"ReturnValues\":null}],\"NextInProgress\":false,\"exited\":false,\"exitStatus\":0,\"When\":\"\"}\nHaltResponse\nDetachRequest\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":1}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":2}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":3}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":18}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":19}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":20}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":21}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":22}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":23}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":34}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":4}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":35}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":36}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":40}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":37}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":53}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":5}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":38}}\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"thread\",\"body\":{\"reason\":\"started\",\"threadId\":6}}\nDisconnectRequest to parent\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":6,\"command\":\"disconnect\",\"success\":true}\nDisconnectResponse. Thanks for the response. I can recreate the issue with this simple program...\n```\npackage main\nimport (\n    \"log\"\n    \"net/http\"\n\"github.com/gorilla/mux\"\n\n)\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/test\", test).Methods(\"GET\")\nsrv := &http.Server{Handler: r, Addr: \":8080\"}\nlog.Fatal(srv.ListenAndServe())\n\n}\nfunc test(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"test\"))\n}\n```\nAfter i hit the endpoint a few times and restarting the debugger a couple of times (2 or 3 attempts) i eventually hit the issue\n2019/02/04 10:34:31 listen tcp :8080: bind: address already in use\nThis will persist until i kill the process via the terminal\nCode - Insiders 1.31.0-insider\nDelve 1.0.0\nms-vscode.Go@0.8.1-beta.3\nOSX Mojave 10.14 (18A391)\nEdit:\nThis issue is 100% reproducible on my machine with these steps:\n1) start the debugger\n2) set a breakpoint on line 19 anywhere\n3) restart the debugger\nOR\n1) set a breakpoint on line 19 anywhere\n2) start the debugger\n3) remove the breakpoint\n4) restart the debugger\nIt seems like modifying breakpoints once the debugger is running is the cause of the issue.. A couple of test results from members of my team:\n```\nUbuntu 18.04\nDelve 1.1.0\nms-vscode.go 0.8.0\nCode 1.30.2\nReproducible: YES\n\nOSX Sierra 10.12.16 (16G1408) \nDelve 1.0.0\nms-vscode.go 0.8.0\nCode 1.30.2\nReproducible: YES\n\nOSX Mojave 10.14 (18A391)\nDelve 1.1.0\nms-vscode.go 0.8.0\nCode 1.27.2\nReproducible: NO\n```. @ramya-rao-a all good now with 0.9.0, thanks for your help\nEDIT:\nI have managed to recreate the issue using 0.9.1, although i don't have any reproducible steps. The breakpoint issue seems to be fixed, but i have just witnessed the original issue happen. Currently its only happened once, but it was definitely the same issue (process didnt close)\nI will continue to try and find some repro steps. this is normal, you cannot hide it however you can .gitignore it. ",
    "frednomoon": "i agree - this is rly bad problem. plz solve. Can confirm that the above steps replicate the issue for me. Works even if I already have a breakpoint added - adding an additional breakpoint/s will replicate.\nI am on:\nDelve 1.0.0-rc.1\nms-vscode.Go 0.8.1-beta.3\nCode 1.30.2. ",
    "bananabread": "Same for me on Ubuntu 18.04, VSCode version 1.30.2, Go extension version 0.8.0\nHave to manually kill the debugging process each time I restart the debug server. Pain in the arse!. ",
    "nfons": "this was one of the reasons I switched to GoLand, having to manually kill debug process was a pain in the ass. ",
    "Esslamb": "@ramya-rao-a any ideas?. ",
    "MelleKoning": "I've got the same sympthon; very high CPU usage that does not come back down.\nIn task manager it is visible that guru.exe is being called and eats up the CPU% and memory.\nSame can be seen in developer processes:\n\nSo, 75% CPU usage and keeps on going. \nThe action was Find-All-References (Shift-Alt-F12) or Peek-References (Shift-F12)\nIs there any reason guru.exe does not come back with results or is it continuously restarted by the vscode-go module?\n-edit- Might this be related to a very large vendor folder, that it simply takes a very long time for guru to process all the *.go files in the project? If yes, might Find-all-references be limited to certain packages as per the command line of guru.exe option \"scope packages\"? See guru command line params below.\nFlags:\n  -cpuprofile file\n        write CPU profile to file\n  -json\n        emit output in JSON format\n  -modified\n        read archive of modified files from standard input\n  -ptalog file\n        write points-to analysis log to file\n  -reflect\n        analyze reflection soundly (slow)\n  -scope packages\n        comma-separated list of packages the analysis should be limited to\n  -tags build tags\n        a list of build tags to consider satisfied during the build. For more information about build tags, see the description of build constraints in the documentation for the go/build package. ",
    "heschik": "@ramya-rao-a: need anything else from me?. @ramya-rao-a if this still hasn't been released it might make sense to roll it back. The fork is affected by golang/go#28645, and after some internal discussions it looks like we're going to try to get tip working with modules. (Similar to godef.)\nIf it has been released, no problem.. ",
    "virtuald": "Looking forward to a release with this fix!. I'm seeing the same issue, on go version go1.10.4 darwin/amd64\nDelve Debugger\nVersion: 1.1.0\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $. Is there a way to easily obtain the commandline that vscode is providing to dlv? That seems like it would be useful.. ",
    "wcn00": "With trace:verbose I get:\nVerbose logs are written to:\n/tmp/vscode-go-debug.txt\n6:58:02 AM, 11/16/2018\nInitializeRequest\nInitializeResponse\nUsing GOPATH: /local/home/wcn00/go:/usr/local/go\nCurrent working directory: /local/home/wcn00/go/src/git.tibco.com/git/product/ipaas/wi-dbservice.git/dbs\nRunning: /local/home/wcn00/go/bin/dlv debug git.tibco.com/git/product/ipaas/wi-dbservice.git/dbs --headless=true --listen=127.0.0.1:25777 --api-version=2\nAPI server listening at: 127.0.0.1:25777\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: /local/home/wcn00/go/src/git.tibco.com/git/product/ipaas/wi-dbservice.git/dbs/main.go:30\nSetBreakPointsRequest\nAll cleared\nCreating on: /local/home/wcn00/go/src/git.tibco.com/git/product/ipaas/wi-dbservice.git/dbs/mysql/mysql.go:242\nAll set:[{\"id\":1,\"name\":\"\",\"addr\":8436333,\"file\":\"/local/home/wcn00/go/src/git.tibco.com/git/product/ipaas/wi-dbservice.git/dbs/main.go\",\"line\":30,\"functionName\":\"main.main\",\"Cond\":\"\",\"continue\":false,\"traceReturn\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"LoadLocals\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"hitCount\":{},\"totalHitCount\":0}]\nSetBreakPointsResponse\nAll set:[{\"id\":2,\"name\":\"\",\"addr\":8131523,\"file\":\"/local/home/wcn00/go/src/git.tibco.com/git/product/ipaas/wi-dbservice.git/dbs/mysql/mysql.go\",\"line\":242,\"functionName\":\"git.tibco.com/git/product/ipaas/wi-dbservice.git/dbs/mysql.(*Connection).FunctionSchema\",\"Cond\":\"\",\"continue\":false,\"traceReturn\":false,\"goroutine\":false,\"stacktrace\":0,\"LoadArgs\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"LoadLocals\":{\"FollowPointers\":true,\"MaxVariableRecurse\":1,\"MaxStringLen\":64,\"MaxArrayValues\":64,\"MaxStructFields\":-1},\"hitCount\":{},\"totalHitCount\":0}]\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\n\nProgram startup message....\nFailed to continue - no G executing on thread 0\nThreadsRequest\n. Debugging in the terminal works but is to cumbersome\n. I found a way for you to reproduce this (and the probable reason I stumbled on it in the first place).\nInstall this parser:\ngo get -u github.com/lfittl/pg_query_go\ngo get -u github.com/kr/pretty\nTo into the pg_query_go package and run a test in the parse_test.go file.     it will run if there are no breakpoints set and fail if there are.\nI now see that the parser package is written in c.  This is likely the wrinkle that causes the debugger problems.  So the error:\nAPI server listening at: 127.0.0.1:32999\nFailed to continue - no G executing on thread 0\nmay pertain to a non go thread running.\nI made a little go main for this test:\npackage main\n_import (\n    \"errors\"\n    \"fmt\"\npg_query \"github.com/lfittl/pg_query_go\"\n\n)\nvar parseErrorTests = []struct {\n    input       string\n    expectedErr error\n}{\n    {\n        \"SELECT CURRENT_DATE()\",\n        errors.New(\"syntax error at or near \\\"$\\\"\"),\n    },\n}\nfunc main() {\n    for , test := range parseErrorTests {\n        , actualErr := pg_query.Parse(test.input)\n        if actualErr != nil {\n            fmt.Print(actualErr)\n        }\n    }\n}_\nI then ran it with \ndlv debug main.go\nSet a break:\nb main.go:24\ncontinue\nAnd it stops at the break.  \n\nmain.main() ./main.go:24 (hits total:1) (PC: 0x645a75)\n    19:\n    20: func main() {\n    21:         for , test := range parseErrorTests {\n    22:                 , actualErr := pg_query.Parse(test.input)\n    23:                 if actualErr != nil {\n=>  24:                         fmt.Print(actualErr)\n    25:                 }\n    26:         }\n    27: }\n\nIs this enough for you to go on?\nttfn\nwcn\n. The error you got was to be expected.\nWhat platform were you using?\u00a0 I'm running ubuntu 18 (but it failed on \nsuse as well).\u00a0 Possibly a platform issue.\u00a0 I don't have a mac, but I \nmight be able to test on windows if I can find time.\nwcn\nOn 2018-11-28 11:35 p.m., Ramya Rao wrote:\n\nrun a test in the parse_test.go file. it will run if there are no\nbreakpoints set and fail if there are.\n\nI was able to hit the breakpoints without any issues.\nscreen shot 2018-11-28 at 10 29 42 pm \nhttps://user-images.githubusercontent.com/16890566/49203513-62ce5e80-f35d-11e8-8109-f48da8412869.png\nWhen trying out your sample code, I get the below error. Do you know \nwhat this is?\nscreen shot 2018-11-28 at 10 34 28 pm \nhttps://user-images.githubusercontent.com/16890566/49203627-ceb0c700-f35d-11e8-82df-e2afc2d64878.png\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub \nhttps://github.com/Microsoft/vscode-go/issues/2104#issuecomment-442722552, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/ADpCDFLytbJaFHy0HQftouoLQmBg31Eqks5uz4AagaJpZM4YQ0BF.\n. Tried on windoze, but pg_query requires gcc (as does go) so I give up.\n\nwcn\nOn 2018-11-28 11:35 p.m., Ramya Rao wrote:\n\nrun a test in the parse_test.go file. it will run if there are no\nbreakpoints set and fail if there are.\n\nI was able to hit the breakpoints without any issues.\nscreen shot 2018-11-28 at 10 29 42 pm \nhttps://user-images.githubusercontent.com/16890566/49203513-62ce5e80-f35d-11e8-8109-f48da8412869.png\nWhen trying out your sample code, I get the below error. Do you know \nwhat this is?\nscreen shot 2018-11-28 at 10 34 28 pm \nhttps://user-images.githubusercontent.com/16890566/49203627-ceb0c700-f35d-11e8-82df-e2afc2d64878.png\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub \nhttps://github.com/Microsoft/vscode-go/issues/2104#issuecomment-442722552, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/ADpCDFLytbJaFHy0HQftouoLQmBg31Eqks5uz4AagaJpZM4YQ0BF.\n. Interesting.\u00a0 I was able to reproduce this in dlv.\u00a0 So not a code issue \nafterll:\nwcn00@gandalf:~/go/src/github.com/lfittl/pg_query_go$ dlv test -- \n-test.run TestParseError\nType 'help' for list of commands.\n(dlv) b TestParseError\nBreakpoint 1 set at 0x6c391b for \ngithub.com/lfittl/pg_query_go_test.TestParseError() ./parse_test.go:711\n(dlv) bp\nBreakpoint unrecovered-panic at 0x435940 for runtime.fatalpanic() \n/usr/local/go/src/runtime/panic.go:681 (0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 print runtime.curg._panic.arg\nBreakpoint 1 at 0x6c391b for \ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (0)\n(dlv) c\n\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (hits total:1) (PC: 0x6c391b)\n\u00a0\u00a0 706:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"SELECT * FROM y WHERE x IN (?, \",\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n=> 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (PC: 0x6c3922)\n\u00a0\u00a0 706:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"SELECT * FROM y WHERE x IN (?, \",\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n=> 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (PC: 0x6c392a)\n\u00a0\u00a0 706:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"SELECT * FROM y WHERE x IN (?, \",\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n=> 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n(dlv) s\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:712 (PC: 0x6c3945)\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t testing.T) {\n=> 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n(dlv) s\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:713 (PC: 0x6c3a04)\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n=> 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n\u00a0\u00a0 718:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \n%s\\nactual error %s\\n\\n\", test.input, test.expectedErr, actualErr)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:713 (PC: 0x6c3a07)\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n=> 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n\u00a0\u00a0 718:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \n%s\\nactual error %s\\n\\n\", test.input, test.expectedErr, actualErr)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:713 (PC: 0x6c3a0f)\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t *testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n=> 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n\u00a0\u00a0 718:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \n%s\\nactual error %s\\n\\n\", test.input, test.expectedErr, actualErr)\n(dlv) s\ngithub.com/lfittl/pg_query_go.Parse() ./pg_query.go:16 (PC: 0x6b5df8)\n\u00a0\u00a0\u00a0 11: func ParseToJSON(input string) (result string, err error) {\n\u00a0\u00a0\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n=>\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 jsonTree, err := ParseToJSON(input)\n\u00a0\u00a0\u00a0 18:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if err != nil {\n\u00a0\u00a0\u00a0 19:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\n\u00a0\u00a0\u00a0 20:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 21:\n(dlv) s\ngithub.com/lfittl/pg_query_go.Parse() ./pg_query.go:17 (PC: 0x6b5e40)\n\u00a0\u00a0\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n\u00a0\u00a0\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n=>\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 jsonTree, err := ParseToJSON(input)\n\u00a0\u00a0\u00a0 18:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if err != nil {\n\u00a0\u00a0\u00a0 19:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\n\u00a0\u00a0\u00a0 20:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 21:\n\u00a0\u00a0\u00a0 22:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // JSON unmarshalling can panic in edge cases we don't \nsupport yet. This is\n(dlv) s\ngithub.com/lfittl/pg_query_go.ParseToJSON() ./pg_query.go:11 (PC: \n0x6b5cf3)\n\u00a0\u00a0\u00a0\u00a0 6:\n\u00a0\u00a0\u00a0\u00a0 7:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"github.com/lfittl/pg_query_go/parser\"\n\u00a0\u00a0\u00a0\u00a0 8: )\n\u00a0\u00a0\u00a0\u00a0 9:\n\u00a0\u00a0\u00a0 10: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n=>\u00a0 11: func ParseToJSON(input string) (result string, err error) {\n\u00a0\u00a0\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n\u00a0\u00a0\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n(dlv) s\ngithub.com/lfittl/pg_query_go.ParseToJSON() ./pg_query.go:12 (PC: \n0x6b5d17)\n\u00a0\u00a0\u00a0\u00a0 7:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"github.com/lfittl/pg_query_go/parser\"\n\u00a0\u00a0\u00a0\u00a0 8: )\n\u00a0\u00a0\u00a0\u00a0 9:\n\u00a0\u00a0\u00a0 10: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n\u00a0\u00a0\u00a0 11: func ParseToJSON(input string) (result string, err error) {\n=>\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n\u00a0\u00a0\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 jsonTree, err := ParseToJSON(input)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser.ParseToJSON() \n./parser/parser.go:21 (PC: 0x6b4953)\n\u00a0\u00a0\u00a0 16: func init() {\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 C.pg_query_init()\n\u00a0\u00a0\u00a0 18: }\n\u00a0\u00a0\u00a0 19:\n\u00a0\u00a0\u00a0 20: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n=>\u00a0 21: func ParseToJSON(input string) (result string, err error) {\n\u00a0\u00a0\u00a0 22:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 inputC := C.CString(input)\n\u00a0\u00a0\u00a0 23:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 defer C.free(unsafe.Pointer(inputC))\n\u00a0\u00a0\u00a0 24:\n\u00a0\u00a0\u00a0 25:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultC := C.pg_query_parse(inputC)\n\u00a0\u00a0\u00a0 26:\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser.ParseToJSON() \n./parser/parser.go:22 (PC: 0x6b4974)\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 C.pg_query_init()\n\u00a0\u00a0\u00a0 18: }\n\u00a0\u00a0\u00a0 19:\n\u00a0\u00a0\u00a0 20: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n\u00a0\u00a0\u00a0 21: func ParseToJSON(input string) (result string, err error) {\n=>\u00a0 22:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 inputC := C.CString(input)\n\u00a0\u00a0\u00a0 23:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 defer C.free(unsafe.Pointer(inputC))\n\u00a0\u00a0\u00a0 24:\n\u00a0\u00a0\u00a0 25:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultC := C.pg_query_parse(inputC)\n\u00a0\u00a0\u00a0 26:\n\u00a0\u00a0\u00a0 27:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 defer C.pg_query_free_parse_result(resultC)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser._Cfunc_CString() \n_cgo_gotypes.go:117 (PC: 0x6b4058)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser._Cfunc_CString() \n_cgo_gotypes.go:118 (PC: 0x6b407b)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser._cgo_cmalloc() \n_cgo_gotypes.go:270 (PC: 0x6b488f)\n(dlv) stepout\ngithub.com/lfittl/pg_query_go/parser._Cfunc_CString() \n_cgo_gotypes.go:118 (PC: 0x6b4094)\nValues returned:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return value read error: \"could not get g: no G executing on \nthread 0\"\n\n(dlv)\n\nNot sure where to go from here.\u00a0 I have found that the GoClipse debugger \nsorta works, but it has its own debugger implementation based on gdb.\u00a0 \nI'll finish this project with that tool and try to avoid native code in \nthe future.\nwcn\nOn 2018-11-29 10:49 p.m., Ramya Rao wrote:\n\n|dlv test -- -test.run TestParse|\n. I confess that I was working a similar issue with the goland folks and \nin that case they had me try a 1.16 version of dlv and it worked in that \ncase.\nSo I updated my vscode version of dlv to the current master and ... now \nit works in vscode too!\n\ndlv version\nDelve Debugger\nVersion: 1.1.0\nCheck it out.\nwcn\nOn 2018-11-30 7:04 a.m., Wendell Nichols wrote:\n\nInteresting.\u00a0 I was able to reproduce this in dlv.\u00a0 So not a code \nissue afterll:\n\nwcn00@gandalf:~/go/src/github.com/lfittl/pg_query_go$ dlv test -- \n-test.run TestParseError\nType 'help' for list of commands.\n(dlv) b TestParseError\nBreakpoint 1 set at 0x6c391b for \ngithub.com/lfittl/pg_query_go_test.TestParseError() ./parse_test.go:711\n(dlv) bp\nBreakpoint unrecovered-panic at 0x435940 for runtime.fatalpanic() \n/usr/local/go/src/runtime/panic.go:681 (0)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 print runtime.curg._panic.arg\nBreakpoint 1 at 0x6c391b for \ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (0)\n(dlv) c\n\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (hits total:1) (PC: 0x6c391b)\n\u00a0\u00a0 706:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"SELECT * FROM y WHERE x IN (?, \",\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n=> 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (PC: 0x6c3922)\n\u00a0\u00a0 706:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"SELECT * FROM y WHERE x IN (?, \",\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n=> 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:711 (PC: 0x6c392a)\n\u00a0\u00a0 706:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"SELECT * FROM y WHERE x IN (?, \",\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n=> 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n(dlv) s\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:712 (PC: 0x6c3945)\n\u00a0\u00a0 707:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 errors.New(\"syntax error at end of input\"),\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t testing.T) {\n=> 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n\u00a0\u00a0 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n(dlv) s\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:713 (PC: 0x6c3a04)\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n=> 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n\u00a0\u00a0 718:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \n%s\\nactual error %s\\n\\n\", test.input, test.expectedErr, actualErr)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:713 (PC: 0x6c3a07)\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n=> 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n\u00a0\u00a0 718:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \n%s\\nactual error %s\\n\\n\", test.input, test.expectedErr, actualErr)\n(dlv) si\ngithub.com/lfittl/pg_query_go_test.TestParseError() \n./parse_test.go:713 (PC: 0x6c3a0f)\n\u00a0\u00a0 708:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 },\n\u00a0\u00a0 709: }\n\u00a0\u00a0 710:\n\u00a0\u00a0 711: func TestParseError(t *testing.T) {\n\u00a0\u00a0 712:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for , test := range parseErrorTests {\n=> 713:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 , actualErr := pg_query.Parse(test.input)\n\u00a0\u00a0 714:\n\u00a0\u00a0 715:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if actualErr == nil {\n\u00a0\u00a0 716:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \nbut none returned\\n\\n\", test.input)\n\u00a0\u00a0 717:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else if !reflect.DeepEqual(actualErr, \ntest.expectedErr) {\n\u00a0\u00a0 718:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 t.Errorf(\"Parse(%s)\\nexpected error \n%s\\nactual error %s\\n\\n\", test.input, test.expectedErr, actualErr)\n(dlv) s\ngithub.com/lfittl/pg_query_go.Parse() ./pg_query.go:16 (PC: 0x6b5df8)\n\u00a0\u00a0\u00a0 11: func ParseToJSON(input string) (result string, err error) {\n\u00a0\u00a0\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n=>\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 jsonTree, err := ParseToJSON(input)\n\u00a0\u00a0\u00a0 18:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if err != nil {\n\u00a0\u00a0\u00a0 19:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\n\u00a0\u00a0\u00a0 20:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 21:\n(dlv) s\ngithub.com/lfittl/pg_query_go.Parse() ./pg_query.go:17 (PC: 0x6b5e40)\n\u00a0\u00a0\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n\u00a0\u00a0\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n=>\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 jsonTree, err := ParseToJSON(input)\n\u00a0\u00a0\u00a0 18:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if err != nil {\n\u00a0\u00a0\u00a0 19:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return\n\u00a0\u00a0\u00a0 20:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 21:\n\u00a0\u00a0\u00a0 22:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 // JSON unmarshalling can panic in edge cases we \ndon't support yet. This is\n(dlv) s\ngithub.com/lfittl/pg_query_go.ParseToJSON() ./pg_query.go:11 (PC: \n0x6b5cf3)\n\u00a0\u00a0\u00a0\u00a0 6:\n\u00a0\u00a0\u00a0\u00a0 7:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"github.com/lfittl/pg_query_go/parser\"\n\u00a0\u00a0\u00a0\u00a0 8: )\n\u00a0\u00a0\u00a0\u00a0 9:\n\u00a0\u00a0\u00a0 10: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n=>\u00a0 11: func ParseToJSON(input string) (result string, err error) {\n\u00a0\u00a0\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n\u00a0\u00a0\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n(dlv) s\ngithub.com/lfittl/pg_query_go.ParseToJSON() ./pg_query.go:12 (PC: \n0x6b5d17)\n\u00a0\u00a0\u00a0\u00a0 7:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \"github.com/lfittl/pg_query_go/parser\"\n\u00a0\u00a0\u00a0\u00a0 8: )\n\u00a0\u00a0\u00a0\u00a0 9:\n\u00a0\u00a0\u00a0 10: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n\u00a0\u00a0\u00a0 11: func ParseToJSON(input string) (result string, err error) {\n=>\u00a0 12:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return parser.ParseToJSON(input)\n\u00a0\u00a0\u00a0 13: }\n\u00a0\u00a0\u00a0 14:\n\u00a0\u00a0\u00a0 15: // Parse the given SQL statement into an AST (native Go structs)\n\u00a0\u00a0\u00a0 16: func Parse(input string) (tree ParsetreeList, err error) {\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 jsonTree, err := ParseToJSON(input)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser.ParseToJSON() \n./parser/parser.go:21 (PC: 0x6b4953)\n\u00a0\u00a0\u00a0 16: func init() {\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 C.pg_query_init()\n\u00a0\u00a0\u00a0 18: }\n\u00a0\u00a0\u00a0 19:\n\u00a0\u00a0\u00a0 20: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n=>\u00a0 21: func ParseToJSON(input string) (result string, err error) {\n\u00a0\u00a0\u00a0 22:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 inputC := C.CString(input)\n\u00a0\u00a0\u00a0 23:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 defer C.free(unsafe.Pointer(inputC))\n\u00a0\u00a0\u00a0 24:\n\u00a0\u00a0\u00a0 25:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultC := C.pg_query_parse(inputC)\n\u00a0\u00a0\u00a0 26:\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser.ParseToJSON() \n./parser/parser.go:22 (PC: 0x6b4974)\n\u00a0\u00a0\u00a0 17:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 C.pg_query_init()\n\u00a0\u00a0\u00a0 18: }\n\u00a0\u00a0\u00a0 19:\n\u00a0\u00a0\u00a0 20: // ParseToJSON - Parses the given SQL statement into an AST \n(JSON format)\n\u00a0\u00a0\u00a0 21: func ParseToJSON(input string) (result string, err error) {\n=>\u00a0 22:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 inputC := C.CString(input)\n\u00a0\u00a0\u00a0 23:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 defer C.free(unsafe.Pointer(inputC))\n\u00a0\u00a0\u00a0 24:\n\u00a0\u00a0\u00a0 25:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 resultC := C.pg_query_parse(inputC)\n\u00a0\u00a0\u00a0 26:\n\u00a0\u00a0\u00a0 27:\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 defer C.pg_query_free_parse_result(resultC)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser._Cfunc_CString() \n_cgo_gotypes.go:117 (PC: 0x6b4058)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser._Cfunc_CString() \n_cgo_gotypes.go:118 (PC: 0x6b407b)\n(dlv) s\ngithub.com/lfittl/pg_query_go/parser._cgo_cmalloc() \n_cgo_gotypes.go:270 (PC: 0x6b488f)\n(dlv) stepout\ngithub.com/lfittl/pg_query_go/parser._Cfunc_CString() \n_cgo_gotypes.go:118 (PC: 0x6b4094)\nValues returned:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return value read error: \"could not get g: no G executing on \nthread 0\"\n\n(dlv)\n\nNot sure where to go from here.\u00a0 I have found that the GoClipse \ndebugger sorta works, but it has its own debugger implementation based \non gdb.\u00a0 I'll finish this project with that tool and try to avoid \nnative code in the future.\nwcn\nOn 2018-11-29 10:49 p.m., Ramya Rao wrote:\n\n|dlv test -- -test.run TestParse|\n. I found that there is a fix in the dlv master branch for this. My \nproblem, at any rate, was fixed.\u00a0 Do a go get -u on dlv and see if it \nhelps.\u00a0 Make sure the dlv you are using is the one built from master...\n\n\nwcn\nOn 2018-12-09 7:40 a.m., b00f wrote:\n\nI have the same issue. It happens when I set a break point, no matter \nwhere. Without setting the break point it works. I am 100% sure that \nit worked before and after upgrading vscode I can see this issue.\nI believe it's because of |CGO_LDFLAGS|. Here is my configuration:\n|{ \"name\": \"Launch\", \"type\": \"go\", \"request\": \"launch\", \"mode\": \n\"auto\", \"remotePath\": \"\", \"port\": 2345, \"host\": \"127.0.0.1\", \n\"program\": \"${workspaceRoot}/cmd/gallactic/main.go\", \"env\": \n{\"CGO_LDFLAGS\":\"${workspaceRoot}/../sputnikvm-ffi/c/libsputnikvm.a \n-ldl -lm\"}, \"args\": [\"init\", \"-w=/tmp/chain2\"], \"showLog\": false, \n\"trace\": \"verbose\" } |\nLink of the project: https://github.com/gallactic/gallactic\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub \nhttps://github.com/Microsoft/vscode-go/issues/2104#issuecomment-445543283, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/ADpCDEn1D8dfK-Z2vIBlPdPaL8cgq8yhks5u3SDFgaJpZM4YQ0BF.\n. I do not have those flags in my settings.\u00a0 I experimented with them in \nthe GOClips plugin for eclipse (which doesn't appear to use dlv, but \nrolled its own).\u00a0 I did not find that the defaults were wrong in any case.\nIf you are having linkage problems I would be suspicious of your \ninstallation.\u00a0 My setup:\n-go installed in\u00a0\u00a0 /usr/local/go\n-so there is a /usr/local/go/bin/dlv\n\n-My dev source is /go\n-So there is also a /go/bin/dlv\u00a0\u00a0 so I specifically place that bin \ndir first in my PATH when debugging from code.\nI have not had any problems with that setup so far.\nwcn\nOn 2018-12-10 7:39 a.m., b00f wrote:\n\n@wcn00 https://github.com/wcn00 The dlv in my PC (I am using Ubuntu) \nis the latest. Did you have |CGO_LDFLAGS| in your settings?\nI have problem running dlv since it can't link with the given library.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub \nhttps://github.com/Microsoft/vscode-go/issues/2104#issuecomment-445837988, \nor mute the thread \nhttps://github.com/notifications/unsubscribe-auth/ADpCDIXppOcnzrqDsdjBmYvQl4grrCH_ks5u3nIxgaJpZM4YQ0BF.\n. \n",
    "b00f": "I have the same issue. It happens when I set a break point, no matter where. Without setting the break point it works. I am 100% sure that it worked before and after upgrading vscode I can see this issue. \nI believe it's because of CGO_LDFLAGS. Here is my configuration:\n{\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"remotePath\": \"\",\n            \"port\": 2345,\n            \"host\": \"127.0.0.1\",\n            \"program\": \"${workspaceRoot}/cmd/gallactic/main.go\",\n            \"env\": {\"CGO_LDFLAGS\":\"${workspaceRoot}/../sputnikvm-ffi/c/libsputnikvm.a -ldl -lm\"},\n            \"args\": [\"init\", \"-w=/tmp/chain2\"],\n            \"showLog\": false,\n            \"trace\": \"verbose\"\n        }\nLink of the project: https://github.com/gallactic/gallactic . > Are you saying that you are seeing the Failed to continue - no G executing on thread 0 error?\nYes, Exactly. I try to check it with dlv debug . I will update it soon.\nIt's strange since I am almost sure that it worked before. . @wcn00 The dlv in my PC (I am using Ubuntu) is the latest. Did you have CGO_LDFLAGS in your settings?\nI have problem running dlv since it can't link with the given library.\n--- UPDATE ---\nI built the dlv manually from its repo. Still I have the same issue. . I finally could run dlv test: I think dlv works fine. It's vscode issue. I am 100% sure it worked before in vscode. find the output here:\n```\nCGO_LDFLAGS=\"/home/mostafa/go/src/github.com/gallactic/sputnikvm-ffi/c/libsputnikvm.a -ldl -lm\" dlv test github.com/gallactic/gallactic/tests/  --  -test.run TestStackOverflow\nType 'help' for list of commands.\n(dlv) b\nCommand failed: Malformed breakpoint location \"\" at 0: empty string\n(dlv) bp\nBreakpoint unrecovered-panic at 0x49b550 for runtime.fatalpanic() /usr/local/go/src/runtime/panic.go:681 (0)\n        print runtime.curg._panic.arg\n(dlv) b TestStackOverflow\nBreakpoint 1 set at 0xb92c1b for github.com/gallactic/gallactic/tests.TestStackOverflow() ./tests/call_test.go:176\n(dlv) bp\nBreakpoint unrecovered-panic at 0x49b550 for runtime.fatalpanic() /usr/local/go/src/runtime/panic.go:681 (0)\n        print runtime.curg._panic.arg\nBreakpoint 1 at 0xb92c1b for github.com/gallactic/gallactic/tests.TestStackOverflow() ./tests/call_test.go:176 (0)\n(dlv) c\n\ngithub.com/gallactic/gallactic/tests.TestStackOverflow() ./tests/call_test.go:176 (hits total:1) (PC: 0xb92c1b)\n   171:         tx6 := makeCallTx(t, \"gheis\", crypto.Address{} //, testerBytes, 0, _fee)\n   172:         executeAndWait(t, e.ErrNone, tx6, \"gheis\", crypto.Address{})\n   173: }\n   174:\n   175: // Test creating a contract from futher down the call stack\n=> 176: func TestStackOverflow(t testing.T) {\n   177:         setPermissions(t, \"alice\", permission.Call|permission.CreateAccount)\n   178:\n   179:         /\n   180:            contract Factory {\n   181:               address a;\n(dlv) si\ngithub.com/gallactic/gallactic/tests.TestStackOverflow() ./tests/call_test.go:176 (PC: 0xb92c22)\n   171:         tx6 := makeCallTx(t, \"gheis\", crypto.Address{} //, testerBytes, 0, _fee)\n   172:         executeAndWait(t, e.ErrNone, tx6, \"gheis\", crypto.Address{})\n   173: }\n   174:\n   175: // Test creating a contract from futher down the call stack\n=> 176: func TestStackOverflow(t testing.T) {\n   177:         setPermissions(t, \"alice\", permission.Call|permission.CreateAccount)\n   178:\n   179:         /\n   180:            contract Factory {\n   181:               address a;\n(dlv) si\ngithub.com/gallactic/gallactic/tests.TestStackOverflow() ./tests/call_test.go:176 (PC: 0xb92c2a)\n   171:         tx6 := makeCallTx(t, \"gheis\", crypto.Address{} //, testerBytes, 0, _fee)\n   172:         executeAndWait(t, e.ErrNone, tx6, \"gheis\", crypto.Address{})\n   173: }\n   174:\n   175: // Test creating a contract from futher down the call stack\n=> 176: func TestStackOverflow(t testing.T) {\n   177:         setPermissions(t, \"alice\", permission.Call|permission.CreateAccount)\n   178:\n   179:         /\n   180:            contract Factory {\n   181:               address a;\n(dlv) s\ngithub.com/gallactic/gallactic/tests.TestStackOverflow() ./tests/call_test.go:177 (PC: 0xb92c32)\n   172:         executeAndWait(t, e.ErrNone, tx6, \"gheis\", crypto.Address{})\n   173: }\n   174:\n   175: // Test creating a contract from futher down the call stack\n   176: func TestStackOverflow(t testing.T) {\n=> 177:         setPermissions(t, \"alice\", permission.Call|permission.CreateAccount)\n   178:\n   179:         /\n   180:            contract Factory {\n   181:               address a;\n   182:               function create() returns (address){\n(dlv) s\ngithub.com/gallactic/gallactic/tests.setPermissions() ./tests/permission_test.go:26 (PC: 0xb96b73)\n    21:         require.NoError(t, err)\n    22:\n    23:         return tx\n    24: }\n``. @ramya-rao-a Any updates about this issue?. I think it is related toCGO_LDFLAGS` (When it's needed to link the app with an external library). \nI did debug some  test methods that doesn't link with my library and they work fine. Hopefully I could clear the air.... >  Are you seeing the error when debugging the main program or the tests?\n\nIn both cases I can see the same issue. If I put a breakpoints anywhere in the code, the main program won't starts and shows the same message: Failed to continue - no G executing on thread. Note that without any breakpoints, it works fine.\n\nare you using the codelens?\n\nNo. But I have installed Rust Test Lens Does ir related to the issue? Also the library is written in Rust. But I don't think it's related to this issue. I almost quite sure that it works before. Something happens recently.\n\nIf I understood this correctly, the CGO_LDFLAGS is required to link your app with the external library. Is that right?\n\nYes, For example if I want to debug the code I can comment any code which is using the external library. The debugger works fine. Another workaround I found: If the test function doesn't call external library it still works. . Is there any update about this issue?. Here is the verbose log. Thanks\nvscode-go-debug.txt\n. I found something. If I use the debug dll (not release) breakpoints hit and works fine! . when the dll is build with debug flag in this case using rust-lang debug dll.. Do you need more information to fix this bug? . ",
    "RO-29": "\nMake sure you don't have anything in your workspace settings that might be over-riding your user settings\n\nchecked, nothing \n\nEdit only the type in the coverage decorator setting and not change the coveredGutterStyle and unCoveredGutterStyle\n\nremoved other settings\n\nYou have both go.coverOnSingleTest and go.coverOnSave enabled. Can you disable both and try using the Go: Toggle Code Coverage in Current Package instead?\n\ndone\nstill, after the above steps, the result is same.\n\nthat changing the coverage type to \"highlight\" worked\n\nyes, it still works only type \"gutter\" type does not work.\nI tried re-installing vs-code but no effect \ud83d\ude22 . OKKKKK I FINALLLY GOT THIS WORKING\neditor.glyphMargin was set to false \ud83e\udd26\u200d\u2642\ufe0f \ud83e\udd26\u200d\u2642\ufe0f \ud83e\udd26\u200d\u2642\ufe0f \nSorry for the trouble!\n. ",
    "Umnix1": "faced same problem. ",
    "FrankSzendzielarz": "Always must be both for breakpoints to work. So src would be the root of the path on docker, and root relative to gopath locally\nSent from my Windows Phone\n\nFrom: Ramya Raonotifications@github.com\nSent: \u200e11/\u200e21/\u200e2018 4:07 AM\nTo: Microsoft/vscode-govscode-go@noreply.github.com\nCc: Frank SzendzielarzFrank@franks.technology; Authorauthor@noreply.github.com\nSubject: Re: [Microsoft/vscode-go] remotePath of '/' when debugging remote linux container translates breakpoint paths to windows local paths (#2119)\nRepeat the process adding the source files instead to a subfolder eg /src/x/y/z\nYou do this in the container or on Windows?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/Microsoft/vscode-go/issues/2119#issuecomment-440512345, or mute the threadhttps://github.com/notifications/unsubscribe-auth/Af9nzg3HqLD-l-k4_ZxLjOq4J5_JRJxRks5uxMN4gaJpZM4Ybg6T.\n. ",
    "foodini": "I found the issue. I had a GOBIN set, which pointed elsewhere. Despite what the Go: Install/Update Tools says, it was installing to GOBIN instead. . ",
    "Nerzal": "@ramya-rao-a  did u have time to look at this ? :). Thanks for the PR! This is one of my most wanted features :D \nAny Updates on this? \nAs far as i see, only the OSX Build for go 1.11 failed. That shouldn't be a big issue? \nand also a merge conflict needs to be fixed :) . @ramya-rao-a  sorry for the ping, but did u allready notice this pr? :). Sadly i'm really bad at JavaScript, so sorry for the dumb question.\nWill these features be usable through a shortcut? Something like ctrl+r+m (refactor + method - for extract method) and ctrl+r+v (refactor+variable).\nIf not, how could I (or someone) make these actions assignable to shortcuts?\nAnd btw: Thank u so much for reviewing ramya-rao-a :1st_place_medal: . ",
    "xiphon": "Rebased. @ramya-rao-a \n\nWe are now updating this.threads in the threadRequest and ensuring that it only has threads corresponding to current goroutines. What problem did this fix?\n\nOtherwise we will send to debugger a list containing non-existing/exited goroutines.\n\nIn handleReenterDebug, if the current state doesnt have a currentGoroutine, we add the first goroutine to it. What problem did this fix?\n\nUnhandled exception in handleReenterDebug in case of unitialized currentGoroutine, currentGoroutine might be unitialized.\n\nWhy dont we need to update the currentThread here as well?\n\nWe always update currentThread before any handleReenterDebug call.. Rebased. @ramya-rao-a \n\nwhether delve returns the state when it fails the \"continue\" request...\nI believe it doesnt\n\nRight\n@jhendrixMSFT \n\nFixes #2002\n\nUpdated the description\n\nWill update the PR to finally fix all the edge cases:\n1. ~~If continue fails, a user will end up with non-recoverable debug session state. Internally it will be paused, but VS Code UI will display it as running.~~ Already fixed in @ramya-rao-a's commits\n2. setBreakPoints sends response in both cases: on success and on error. But we also invoke sendErrorResponse if continue fails (https://github.com/Microsoft/vscode-go/pull/2128/files#diff-16e876ed2a6ddf6a530a935e37dddfdbR765).\nIf both setBreakPoints and continue fail, we send error response twice.\n3. If halt fails, we have to revert skipStopEventOnce to false. Updated. @ramya-rao-a \nIf we reached continue step, we already sent setBreakpoints response to VS Code:, either successful one\nhttps://github.com/Microsoft/vscode-go/pull/2128/files#diff-16e876ed2a6ddf6a530a935e37dddfdbL746\nor error response\nhttps://github.com/Microsoft/vscode-go/pull/2128/files#diff-16e876ed2a6ddf6a530a935e37dddfdbL749. Yep, seems this PR is not related to #1974. Updated the description.\nIt still fixes the problem - we have to use unique stack frame identifiers.\nBtw, there is another PR attempting to fix the same issue https://github.com/Microsoft/vscode-go/pull/2208. @jhendrixMSFT you are absolutely correct. Once we stop there, previous handles are no longer valid, handleReenterDebug is the right place. Updated.. @OneOfOne \nRebased. Implementation flaw:\nThis patch assumes that frame id will never exceed 12 bits. \nThere is no reason to introduce this kind of a limit on frame id value.\nConsider to replace this one with #2130 fix. To silently skip the pause that we introduce just to set the breakpoint and continue right after.. Fixed. Updated. Reverted. VS Code expects that a process consists of at least one thread. \nI guess it is something like \"How would we stop/continue if there is no single thread?\" or \"How does the process exist if it doesn't have any alive threads?\". To be honest updateThreads sounds good to me and is exactly what this routine is doing: it updates the threads list and sends the appropriate notifications to VS Code through Events interface.\nCan't be more accurate than updateAndPropagateThreadsListToVsCode, though sounds redundant to me.. ",
    "georgewfraser": "Also having things bug after switching to mojave. This is a problem with delve and can be fixed according to the instructions in https://github.com/derekparker/delve/issues/1398\nReproduced below:\nIt seems you have to download the updated command line tools from the Apple developer website (xcode-select --install) is broken for the latest MacOS Mojave version (10.14.1).\nhttps://developer.apple.com/download/more/. ",
    "Ashniu123": "Any idea why test should be failing? . On line 28, it is written that\n// go get -v uses stderr to write output regardless of success or failure\nFrom this I thought that if go get fails then error will remain, which is fine.\nAnd if it is a success, build will be successful and error will go away. . ",
    "ayanmw": "all my bad,my godef is old!  (one version of 2017year) .. ",
    "ssergiienko": "@ramya-rao-a Don't you think that it's slightly strange to ask users to do manual pkill gocode/gocode-gomod each time after closing IDE? :confused: \nAs a proposed solution for this ticket and for #26 why not just save PID and internal flag \"started_by_vscode\" and stop daemon on this condition:\nif started_by_vscode == True AND pid == saved_pid then stop_daemon().\nIt's easy to implement and it will work for all cases except for super corner case when User stared VSCode then start another editor which is also use gocode but unable to restart it itself, and then close VSCode.. @ramya-rao-a Done, #2132 works fine now, thx.. ",
    "stffabi": "We are seeing the same behaviour on different machines in our company. I'll try to test dlv from the command line later this day.. @ramya-rao-a I've tried running dlv from the command line. An attach from vscode to the running dlv leads to the same behaviour. Stepping into/out goes into proc.go gopark. Furthermore I've now even seen some assembler files popup during the debugging.. I've seen the problem on latest Go 1.11.x and latest dlv on MacOS X Mojave.\nI've tried downgrading Go and/or dlv:\n- Using Go1.11 and downgrading dlv to the first version which supports Go1.11 didn't solve the problem.\n- Downgrading Go to 1.10.x didn't solve the problem.\n- Using Go1.10 and an old dlv version of February this year (https://github.com/derekparker/delve/commit/279a8a792e2748ba07be9ca15688d1871c0f1a5f) didn't solve the problem.\nThe next thing I've tried was downgrading the vscode-go extension, unfortunately my experience wasn't the same as yours @ramya-rao-a . All results with Go1.11.4 and dlv master:\n- 0.6.75: Fast debugging experience, no jumps to gopark\n- 0.6.87: Fast debugging experience, no jumps to gopark\n- 0.6.88: Fast debugging experience, no jumps to gopark\n- 0.6.89: Slow debug experience, jumps to gopark\n- 0.6.90: Slow debug experience, jumps to gopark\n- 0.8.0: Slow debug experience, jumps to gopark\n@ramya-rao-a your workaround of adding return Promise.resolve(null); to getPackageInfo seems to fix the problem of slow debugging and the jumps to gopark at least for me.\n. @ramya-rao-a I've just tried 0.8.1-beta.12 with vscode insiders. The jumps to proc.go have gone \ud83c\udf89 , that's awesome...\nRegarding the slowness, I think it has gotten faster, but it's still slower than before 0.6.89. Disabling the global variables with showGlobalVariables works like a charm and the debugging is fast as with older versions.. ",
    "anphung": "Same here, and it's very slow for it to Step into/over, or showing Variables in the debug tab.\nI try with using dlv debug, and use interactive session b, c, n, it's quite fast there.\n$ go version\ngo version go1.11 darwin/amd64\n$ dlv version\nDelve Debugger\nVersion: 1.1.0\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c\n$ code --version\n1.29.1\nbc24f98b5f70467bc689abf41cc5550ca637088e\nx64. Inspecting the vscode-go-debug.txt from the debug, global vars request is huge for me, I guess thats the reason. Is there anyway to disable global vars?. It's both. Actually, it jumps into proc.go for around several seconds (the time varies). If just wait for several seconds then it'll jump back to the next line that it supposed to jump in the first place.\nI guess it jumps like that because of the slowness, and the slowness is because of loading all global vars.. That's faster. It still jumps into proc.go sometime, but jumps out immediately (not several seconds anymore).. Digging a little deeper, most responses from delve are too much for vscode-go (vscode-go only extracts part of the responses), such as ListGoroutines, StackTraceRequest, it takes lots of bandwidth, hence the slowness.. With dlv debug, the speed is just like \"native\", no proc.go jump, pretty fast.\nWith vscode, in normal code base, sometime it stops in proc.go for long, some time several seconds, it's up to whether I'm running some other heavy programs in my machine.\nDelve RPCs give out much information, in exchange vscode only uses part of it. For example, ListGoroutines, vscode only extract id, function name from goroutines.\nI guess vscode can't do much here, unless people build a more lightweight RPCs in delve project.\nHere is a sample: Set breakpoint at line 19, if you can't see the slowness or jumping to proc.go, try increase n.\nhttps://play.golang.org/p/nYkRp-yG1aK. ",
    "ori-saporta83": "I experience the exact same behavior with the debugger jumping to the function \"gopark\" in proc.go every step I make. \nIs there any estimation for a fix?. ",
    "tcagan": "I am experiencing the same behavior. \nThe jump is sometimes very quick and sometimes slower. Quite a bad experience debugging now...\nMy setup:\nMac (High Sierra)\ngo version go1.10.2 darwin/amd64\nVS Code Version 1.29.1 (1.29.1) bc24f98b5f70467bc689abf41cc5550ca637088e\nIf there's something I can do to help - let me know. It is really annoying :-|. Hi,\nTo chime in :\n\n\n2002 - works well - I can now add breakpoint after debug session as started\n\n\n1010 - works well - can see deeply nested structures. Still limited (eventually is stops showing values) but great improvement\n\nPR 2289 works well. Stepping through work as expected, no more jumping into proc.go and I don't experience slowness.\n\nOver all - this version is great and debugging experience is much improved - thanks for everyone (@ramya-rao-a specifically) for this!. @jhendrixMSFT - please see attached image. \nI am using go-jira and looking at an instance of Issue struct.\nMy variable name is issue.\nAt the top of the watch pane, you can see it expanded - it shows issue.ChangeLog.Histories but does not expand the items within that slice.\nFollowing, I am showing specific item in the Histories slice - here it does not expand items in Items slice.\nFollowing you can see a specific item in the Items slice (just for reference that the items are not empty).\nIs this the expected behavior? \nCould it possibly be related to slice/array expansion? \nMaybe I Should change something in the settings?\n\n. @ramya-rao-a btw, this version also fixed an issue I've had that the debugged process wasn't terminated (for a web api project, I had to kill it manually each time as it was blocking my port and I couldn't re-run). @ramya-rao-a I believe its related to #1010 (and fix #2198 does improved it).\nDepending on what @jhendrixMSFT finds - it could be related or something new.. ",
    "mikecowgill": "\n\nInspecting the vscode-go-debug.txt from the debug, global vars request is huge for me, I guess thats the reason. Is there anyway to disable global vars?\n\nThats an interesting find. There is no official way to disable global vars, but can you try the below\n\nOpen the file ~/.vscode/extensions/ms-vscode.go-0.7.0/out/src/debugAdapter/goDebug.js. If you are using Insiders then use .vscode-insiders. If you are not on the latest version of VS Code (0.7.0), then use the appropriate version\nFind the function getPackageInfo, and add return Promise.resolve(null); to the first line inside the function. This will return null for package and consequently the global vars call will not be made.\nReload VS Code\n\nCheck if this solves the problem of slowness\n\nI've been experiencing slowness (sometimes extreme) and the proc.go jump while debugging for the past month or so. Using the above adjustment to disable package info, the speed is back to normal and fast and I have yet to have the proc.go jump but will continue to experiment.\nWhat are the side-effects of having this disabled?. ",
    "seanstrickland-wf": "I've also been having this issue for a month or so and @ramya-rao-a's workaround addressed the slowness and jumping issues for me.. ",
    "egorse": "@segevfiner seems works better than before. but during couple of runs at least once it still hit gopark.\nedit: it does not stop in gopark but showed it. seems it more related to some general slowness. I can do F11 trough all the test and at least once it might open gopark.. ",
    "joegilley": "before @ramya-rao-a 's beta (was using v0.8.0), I experienced this issue (slow-down and proc jumping between steps).  I also noticed that while experiencing the slowdown, the dlv process was churning through system memory, at one point asking for 11GB at 100% CPU util.  I was able to mitigate the problem by changing the dlv configuration to ask for very small inspection limits:\n\"dlvLoadConfig\": {\n            \"followPointers\": true,\n            \"maxVariableRecurse\": 2,   // <--\n            \"maxStringLen\": 64,\n            \"maxArrayValues\": 64,\n            \"maxStructFields\": 2       // <--\n        }\nbut that made the inspection useless \ud83d\ude1e \nthen I reverted to API version 1:\n\"go.delveConfig\": {\n  \"apiVersion\": 1,\n  ...\n}\nwhich fixed it entirely, but was less than ideal.\nThe beta fixed the issue entirely for me.  I've reverted to the default go.delveConfig settings and it still flies.  <3 <3 @ramya-rao-a . ",
    "imrandurani": "Have tried both, its still the same. However my vscode extension tab shows Enabled. One more thing, I also tried to install Go extension tools/updates and some of them failed to install.. \nThere are no errors in the console. Please take a look at screenshot. Thanks\nIt's really weird , I don't know what is happening. Even go environment variables for GOPATH and GOROOT are working fine in the integrated terminal.. Thank you for correcting me! my mistake. So, Go: Current GOPATH from the command palette says /home/imran/tools/gopath . I also gave a try to execute dlv debug in integrated terminal and i guess its working fine for now. However, when I tried to launch debug from vscode, console says \"INFO no standard startup: not just one text editor\" and \"cannot find golint\". Then I tried Go: \"Install/Update Tools\"  and it ended up with 11 tools failed. Please take a look at screenshot. Thanks\n\n. Sure, Here are the errors. \ngocode:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v github.com/mdempsky/gocode\ngithub.com/mdempsky/gocode (download)\nFetching https://golang.org/x/tools/go/gcexportdata?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/gcexportdata?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/gcexportdata: unrecognized import path \"golang.org/x/tools/go/gcexportdata\" (https fetch: Get https://golang.org/x/tools/go/gcexportdata?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/mdempsky/gocode (download)\nFetching https://golang.org/x/tools/go/gcexportdata?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/gcexportdata?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/gcexportdata: unrecognized import path \"golang.org/x/tools/go/gcexportdata\" (https fetch: Get https://golang.org/x/tools/go/gcexportdata?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngo-outline:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v github.com/ramya-rao-a/go-outline\ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/buildutil: unrecognized import path \"golang.org/x/tools/go/buildutil\" (https fetch: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/ramya-rao-a/go-outline (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/buildutil: unrecognized import path \"golang.org/x/tools/go/buildutil\" (https fetch: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngo-symbols:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v github.com/acroca/go-symbols\ngithub.com/acroca/go-symbols (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/buildutil: unrecognized import path \"golang.org/x/tools/go/buildutil\" (https fetch: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/acroca/go-symbols (download)\nFetching https://golang.org/x/tools/go/buildutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/buildutil: unrecognized import path \"golang.org/x/tools/go/buildutil\" (https fetch: Get https://golang.org/x/tools/go/buildutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nguru:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v golang.org/x/tools/cmd/guru\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/guru: unrecognized import path \"golang.org/x/tools/cmd/guru\" (https fetch: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/cmd/guru?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/guru: unrecognized import path \"golang.org/x/tools/cmd/guru\" (https fetch: Get https://golang.org/x/tools/cmd/guru?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngorename:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v golang.org/x/tools/cmd/gorename\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/gorename: unrecognized import path \"golang.org/x/tools/cmd/gorename\" (https fetch: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/cmd/gorename?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/cmd/gorename: unrecognized import path \"golang.org/x/tools/cmd/gorename\" (https fetch: Get https://golang.org/x/tools/cmd/gorename?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngocode-gomod:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v -d github.com/stamblerre/gocode\ngithub.com/stamblerre/gocode (download)\nFetching https://golang.org/x/tools/go/packages?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/packages: unrecognized import path \"golang.org/x/tools/go/packages\" (https fetch: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/stamblerre/gocode (download)\nFetching https://golang.org/x/tools/go/packages?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/packages: unrecognized import path \"golang.org/x/tools/go/packages\" (https fetch: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngodef-gomod:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v -d github.com/ianthehat/godef\ngithub.com/ianthehat/godef (download)\nFetching https://golang.org/x/tools/go/ast/astutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/ast/astutil: unrecognized import path \"golang.org/x/tools/go/ast/astutil\" (https fetch: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/go/packages?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/packages: unrecognized import path \"golang.org/x/tools/go/packages\" (https fetch: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/go/types/typeutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/types/typeutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/types/typeutil: unrecognized import path \"golang.org/x/tools/go/types/typeutil\" (https fetch: Get https://golang.org/x/tools/go/types/typeutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/ianthehat/godef (download)\nFetching https://golang.org/x/tools/go/ast/astutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/ast/astutil: unrecognized import path \"golang.org/x/tools/go/ast/astutil\" (https fetch: Get https://golang.org/x/tools/go/ast/astutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/go/packages?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/packages: unrecognized import path \"golang.org/x/tools/go/packages\" (https fetch: Get https://golang.org/x/tools/go/packages?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/tools/go/types/typeutil?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/go/types/typeutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/go/types/typeutil: unrecognized import path \"golang.org/x/tools/go/types/typeutil\" (https fetch: Get https://golang.org/x/tools/go/types/typeutil?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngoreturns:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v github.com/sqs/goreturns\ngithub.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/imports: unrecognized import path \"golang.org/x/tools/imports\" (https fetch: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/sqs/goreturns (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/imports: unrecognized import path \"golang.org/x/tools/imports\" (https fetch: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngolint:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v golang.org/x/lint/golint\nFetching https://golang.org/x/lint/golint?go-get=1\nhttps fetch failed: Get https://golang.org/x/lint/golint?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/lint/golint: unrecognized import path \"golang.org/x/lint/golint\" (https fetch: Get https://golang.org/x/lint/golint?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nFetching https://golang.org/x/lint/golint?go-get=1\nhttps fetch failed: Get https://golang.org/x/lint/golint?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/lint/golint: unrecognized import path \"golang.org/x/lint/golint\" (https fetch: Get https://golang.org/x/lint/golint?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngotests:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v github.com/cweill/gotests/...\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/imports: unrecognized import path \"golang.org/x/tools/imports\" (https fetch: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/cweill/gotests (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/imports: unrecognized import path \"golang.org/x/tools/imports\" (https fetch: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\nimpl:\nError: Command failed: /home/imran/tools/go/bin/go get -u -v github.com/josharian/impl\ngithub.com/josharian/impl (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/imports: unrecognized import path \"golang.org/x/tools/imports\" (https fetch: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\ngithub.com/josharian/impl (download)\nFetching https://golang.org/x/tools/imports?go-get=1\nhttps fetch failed: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout\npackage golang.org/x/tools/imports: unrecognized import path \"golang.org/x/tools/imports\" (https fetch: Get https://golang.org/x/tools/imports?go-get=1: dial tcp 216.239.37.1:443: i/o timeout). Yes correct. But these are also related to debugging because previously when I tried to debug, all errors in the console were related to [extension host] like missing golint symbol and other tools etc. More recent error that I am experiencing while debugging is:\n[Extension Host] Command failed: /home/imran/tools/go/bin/go doc -c -cmd -u testing/subfolder ints\ndoc: no symbol ints in package testing/subfolder\nexit status 1\nBesides, I followed https://github.com/Microsoft/vscode-go/wiki/Go-tools-that-the-Go-extension-depends-on to manually install the missing tools but failed, listing the same errors as I pasted in my previous comment. So fetching package is being failed repeatedly.\nAnd thanks for all of your help, I really appreciate. . Actually, I tried both, with proxy and without proxy but failed. I think it's not, because if it is a network error then why installation for rest of the 11 tools would succeed in the first place. \nRegarding delve debug, dlv debug says cannot find package\ncannot find package \"github.com/ethereum/go-ethereum/common\" in any of:\n        /home/imran/tools/go/src/github.com/ethereum/go-ethereum/common (from $GOROOT)\n        /home/imran/tools/gopath/src/github.com/ethereum/go-ethereum/common (from $GOPATH)\nI am trying to build geth with delve so that I may debug the main package. Each time I try to build with delve it says \"cannot find package\" for many github packages that are being included in the import section. \n. @ramya-rao-a I was able to figure it out. Actually, I checked out my project somewhere else instead of gopath. So, I checked it out at my gopath and its wroking fine now. Thank You! for all of your help. Closing the issue. . ",
    "mdonnellyli": "Wondering what the status of this is?. ",
    "helphi": "strong desire \uff01\uff01\uff01. it seems that not support go mod.. ",
    "hpio": "Interestingly, if I run VSCode from terminal and try to install tools it succeeds . Problem is fixed by manually setting GOPATH in setting.json. Is there a reason why env variables aren't respected?. @doxxx first of all VSCode was installed using rpm package pulled from the website and I usually launch it using desktop icon (in my case using dmenu)\nIf I remove GOPATH settings from settings.json and run Go: Current GOPATH I get /home/piotr/go which is incorrect as the env is set to /home/piotr/workspace/go\n. I set in in my .zsh configuration\n\u276f cat go.zsh \nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/workspace/go\nexport GOBIN=$GOPATH/bin\nexport PATH=$PATH:$GOPATH/bin:$GOROOT/bin. After I removed part of zsh config that loads GO vars here's what I get:\n```\n\u276f env | grep -i GO\n~ \n\u276f \n```\nand with config back in place:\n```\n\u276f env | grep -i GO  \nGOBIN=/home/piotr/workspace/go/bin\nGOPATH=/home/piotr/workspace/go\nGOROOT=/usr/local/go\nPATH=/home/piotr/.zplug/bin:/home/piotr/.local/bin:/home/piotr/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/piotr/workspace/go/bin:/usr/local/go/bin:/home/piotr/workspace/go/bin:/usr/local/go/bin\n~ \n\u276f \n```. ",
    "kedare": "Same issue today, it's new because it was working fine in the past. ",
    "sleach": "I had to delete my $GOPATH/src/golang.org/x/tools directory and then re-running the above (Go: Install/Update tools and then check the two specific to gomod) succeeded.. ",
    "damianoferrari": "\nI had to delete my $GOPATH/src/golang.org/x/tools directory and then re-running the above (Go: Install/Update tools and then check the two specific to gomod) succeeded.\n\nThis fixed it for me. Thanks!. ",
    "gness007": "Make sure you have it installed first. that resolved the problem for me.. ",
    "dryewo": "Found a workaround:\n$ sudo ln -sf `go env GOROOT` '/$GOROOT'\nThis will create a symbolic link in / with literal name $GOROOT (unexpanded by shell), so that VS Code can still open files using unexpanded paths like /$GOROOT/src/fmt/print.go.. ",
    "awkj": "I have the same problem,  so confusing. I use last release beatv5 ,also fix the bug.. > @ssqf\n\nBy the way, we should use English to talk on here.\n\nwhy bingo only support go mod ? go mod release will in go 1.12 , so many project only haven't go.mod. > @awking\n\nI am very sorry for this.\nGo 1.11 already supports go module, Go 1.12 will only support go module.\n\nHow migrate GOPATH project  to go module project?  just need run 'go mod init' in the project root directory.\n\nIf bingo support both GOPATH project and go module project at the same time, it's code will become very complicated and will have a high maintenance cost.\u3000but my spare time is very limited\nWhy the features of vscode-go is so confusing?\nBecause it need to support so many tools, and support both go module and gopath at the same time.\n\nok, This is go's mistake, I understand your decision, wo will open config GO111MODULE=on and use it.. > @awking\n\nI am very sorry for this.\nGo 1.11 already supports go module, Go 1.12 will only support go module.\n\nHow migrate GOPATH project  to go module project?  just need run 'go mod init' in the project root directory.\n\nIf bingo support both GOPATH project and go module project at the same time, it's code will become very complicated and will have a high maintenance cost.\u3000but my spare time is very limited\nWhy the features of vscode-go is so confusing?\nBecause it need to support so many tools, and support both go module and gopath at the same time.\n\nok, This is go's mistake, I understand your decision, wo will open config GO111MODULE=on and use it.. > @awking\n\n\u5bbe\u679c\u5df2\u7ecf\u652f\u6301\u975ego\u6a21\u5757\u9879\u76ee\u3002\u8bf7\u770b\uff1asaibing /\u5bbe\u679c\uff035\n@awking\nbingo already support non-go module project. please see: saibing/bingo#5\n\nI already use bingo instead of go tools, Although it seems that the bingo experience is not as good as the tools at the moment, the speed of your repair is too fast. chinese gopher is good,haha. ",
    "justlaputa": "same problem, the soft link solution works for me, but it's still a work around. Any other suggestions?. ",
    "wilbertliu": "I'm experiencing similar thing. I'd just put the link here to avoid duplication. \ud83d\udc47\ud83c\udffb\nhttps://github.com/Microsoft/vscode-go/issues/2149#issuecomment-442085770. > This was fixed about a month ago, there is a function called posToString in godef that patches the $GOROOT on the way out.\n\nCould you try running godef-mod by hand and seeing what it does?\n\nI'm not sure I understand @ianthehat. So I ran this godef-gomod <some file>, and this is what I got:\ngodef: Expressions not yet supported <some file>\nAnything missed here?. > If you pass a string to godef it assumes it is a go expression not a file name\n\nYou need to do something like\ngodef-gomod -f godef.go -o 640\nWhere -f takes the filename and -o is the byte offset into the file of the cursor. There is a VS-Code extension that will tell you this number.\n\nI'm not sure I understand what I should do @ianthehat. But here's what I did and the result:\ngodef-gomod -f main.go -o 606\ngodef: Offset 606 was not a valid identifier\nYes @dpromanko, gogetdoc works well. But isn't that so slow?. I also have this kind of problem @ramya-rao-a. \ud83d\ude42\nHere's a sample code:\ngo\nctx.JSON(http.StatusOK, gin.H{})\nWhen I Go to definition on JSON, it said No definition found for JSON.\nAnd strangely, I couldn't install godef-gomod. That's the only tool that I couldn't install, everything else is okay. Here's the output:\n```\nInstalling 1 tool at /Users/wilbertliu/Documents/go/bin\n  godef-gomod\nInstalling github.com/ianthehat/godef FAILED\n1 tools failed to install.\ngodef-gomod:\nError: Command failed: /usr/local/bin/go get -u -v -d github.com/ianthehat/godef\ngithub.com/ianthehat/godef (download)\ncd /Users/wilbertliu/Documents/go/src/github.com/ianthehat/godef; git pull --ff-only\nfatal: Not possible to fast-forward, aborting.\npackage github.com/ianthehat/godef: exit status 128\ngithub.com/ianthehat/godef (download)\ncd /Users/wilbertliu/Documents/go/src/github.com/ianthehat/godef; git pull --ff-only\nfatal: Not possible to fast-forward, aborting.\npackage github.com/ianthehat/godef: exit status 128\n```\nAfterward I also tried to follow your suggestion to use gogetdoc instead. However, I could go to definition but the import doesn't run properly. It's like the editor only imports standard library package, and omits everything else.\nDo you have any suggestions? Really appreciate your time on this. \ud83d\ude4f\ud83c\udffb. > @wilbertliu I had the same problem on Ubuntu (godef-gomod failing to pull from repository).\n\nI just removed and go getted it again:\nrm -rf /Users/wilbertliu/Documents/go/src/github.com/ianthehat/godef\n/usr/local/bin/go get -u -v -d github.com/ianthehat/godef\n\nHey @zareone, thanks for jumping in! \ud83d\ude42 However, I got some errors when running the go get that you mentioned above:\ngo: finding github.com/ianthehat/godef latest\ngo: github.com/ianthehat/godef@v0.0.0-20181121200540-1ef9e6bcd64c: parsing go.mod: unexpected module path \"github.com/rogpeppe/godef\"\ngo get: error loading module requirements. > @wilbertliu ouch! No idea what might be happening there.. Are you using latest version of Go (1.11.2 I think)?\nYes, I'm using the latest version of Go. And apparently when I tried to install godef and godef-gomod from VSCode, it's now succeed. Here's the log:\n```\nInstalling 2 tools at /Users/wilbertliu/Documents/go/bin\n  godef\n  godef-gomod\nInstalling github.com/rogpeppe/godef SUCCEEDED\nInstalling github.com/ianthehat/godef SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n```\nNow all the tools have been installed successfully, but still I can't go to definition, and the auto-import doesn't run properly. Here's the log from output on VSCode:\n```\n/Users/wilbertliu/Documents/api.exp.com/handler>Finished running tool: /Users/wilbertliu/Documents/go/bin/golint\n/Users/wilbertliu/Documents/api.exp.com/handler>Finished running tool: /usr/local/bin/go vet ./...\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:9: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:10: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:14: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:15: undefined: db\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:17: undefined: model\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:28: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:43: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:66: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:92: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:111: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:17: too many errors\n/Users/wilbertliu/Documents/api.exp.com/handler>Finished running tool: /usr/local/bin/go build -o /var/folders/53/6w9bjdps1jd50nzpkhm9vd440000gp/T/vscode-go8iBGMP/go-code-check .\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:9: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:10: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:14: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:15: undefined: db\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:17: undefined: model\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:28: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:43: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:66: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:92: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:111: undefined: gin\n/Users/wilbertliu/Documents/api.exp.com/handler/draft.go:17: too many errors\n```\nFYI: gin is third-party library, model & db are local package.\nLet me know what I should do. \ud83d\ude4f\ud83c\udffb\ncc @ramya-rao-a . > @wilbertliu Those are errors from vet and build processes. Are you able to run go build from the terminal successfully?\nDo you mean running go build when the error is still there? i.e the import didn't run properly and there're missing imports. If yes, here's the output from terminal:\nhandler/draft.go:10:31: undefined: gin\nhandler/draft.go:11:9: undefined: gin\nhandler/draft.go:15:21: undefined: gin\nhandler/draft.go:16:20: undefined: db\nhandler/draft.go:18:14: undefined: model\nhandler/draft.go:30:24: undefined: gin\nhandler/draft.go:52:23: undefined: gin\nhandler/draft.go:73:23: undefined: gin\nhandler/draft.go:92:23: undefined: gin\nhandler/draft.go:111:24: undefined: gin\nhandler/draft.go:18:14: too many errors\nSo I guess that's failed, @ramya-rao-a? Any clue?. @ramya-rao-a Exactly.. \ud83d\ude42. > @wilbertliu So you are using modules, go build fails when you run it in a terminal and the build process run by the Go extension also fails with the same errors. This means that you don't have the required packages.\n\nThe Go extension doesn't fetch the imports. When using modules, it runs the go build which is supposed to get all the dependent packages. Since go build itself is failing for you, it is a problem not related to the editor. There must be some other set up that is causing this. There is a \"modules\" channel in the Gophers slack. Perhaps someone there can help?\n\nI don't think that's the case here.. All the packages were there, since I can run go build successfully when the import statement is complete. Let me show you a simple snapshot from my project that works fine:\n```go\npackage main\nimport (\n    \"fmt\"\n\"github.com/gin-gonic/gin\"\n\n)\nfunc main() {\n    r := gin.Default()\n    fmt.Println(r)\n}\n```\nSo when I save the snippet above and run go build, it's fine. But when I delete those imports above (no import at all) and run go build, it's failed.\nI know that go build will download the dependencies, but it doesn't fix the wrong import, right? My point is: VSCode doesn't fix the import like what I usually experienced before, and afterward I can't go to definition if I don't change docs tool to gogetdoc (not a fan of gogetdoc because of its slowness).\nNow my question is, is it related to other setup? Not on the extension?\nThanks for your time to review this issue. \ud83d\ude4f\ud83c\udffb. It's nice @ramya-rao-a! Thank you so much for the work! \ud83d\ude4f\ud83c\udffb. ",
    "dpromanko": "I'm having the same issue. I changed my Go: Docs Tool to gogetdoc for the time being.. Yes it is quite slow. But for now it works.. ",
    "xiaoyifan6": "After upgrading to 1.30.1, the problem is solved.\nUse the command: xcode-select --install. ",
    "zareone": "@wilbertliu I had the same problem on Ubuntu (godef-gomod failing to pull from repository). \nI just removed and go getted it again:\n```\nrm -rf /Users/wilbertliu/Documents/go/src/github.com/ianthehat/godef\n/usr/local/bin/go get -u -v -d github.com/ianthehat/godef\n```\n. @wilbertliu ouch! No idea what might be happening there.. Are you using latest version of Go (1.11.2 I think)?. ",
    "codeloam": "I met the same problem on windows 10, tried all steps from the above comments, no lucky. after I installed gocode-gomod and godef-gomod manually, the vscode keeps telling me to install them, why?. > @CodeLoam How did you install them manually? If they are not accessible by the Go extension, then it will prompt you to install it. Can you instead install using the Go: Install/Update Tools command?\njust go get\ntoday I installed by  Go: Install/Update Tools, but cannot go to definition anyway, after ctrl + clicking a method, I can see a blue progress bar for a while, then nothing happened, do you have any idea? how to debug it?\n. ",
    "vadimi": "I'm having exactly the same issue on Linux and Windows. I'm using Go modules, calling godef-gomod from command line works fine. Devtools shows only this message: \"ERR An unknown error occurred. Please consult the log for more details.\". I think I figured it out. If I run vscode like that: code . where . is my Go project directory, everything works fine. But if I open vscode first and use Open Folder menu - it doesn't. I think it might have something to do with cwd that vscode sends to godef-gomod - if it's outside of the Go modules dir, it fails.. ",
    "aplsek": "The 'doc' in Activity Monitor represents a go doc process. See my ps output, its spawn by Visual Code:\n501  5736 94581   0 10:22AM ??         0:00.03 /usr/local/bin/go doc -c -cmd -u github..... Foo\n501 94581 94580   0  9:41AM ??         0:05.51 /private/var/folders/07/2nk35j995fx2hjw9zkhhlwn40000gn/T/AppTranslocation/7BC4D181-308D-4B83-956E-1E0374DC5EAE/d/Visual Studio Code - Insiders.app/Contents/Frameworks/Code - Insiders Helper.app/Contents/MacOS/Code - Insiders Helper /private/var/folders/07/2nk35j995fx2hjw9zkhhlwn40000gn/T/AppTranslocation/7BC4D181-308D-4B83-956E-1E0374DC5EAE/d/Visual Studio Code - Insiders.app/Contents/Resources/app/out/bootstrap --type=extensionHost\n. Hi,\nIs there an ETA on when the fix is going to be part of the official release?\nNot sure I want to install beta-version of the plugin as that would block the future updates...\nThanks!\n. ",
    "grillbiff": "Hi, I'm experiencing the same problem. Here is the process chain of one of the doc processes. Couldn't see anything strange in the process explorer though\n\nTwo processes with a common parent down the line.\n. Hi,\nyes my image is for two of the doc processes shown in https://github.com/Microsoft/vscode-go/issues/2152#issue-384643034.\nI tried changing to both gogetdoc and guru but no luck, still creating a lot of doc processes.. @ramya-rao-a I think it has been disabled, the documentation does not appear unless I explicitly press the small info icon. \nI still get alot of doc processes. Could it be that VSCode is using godoc regardless of my choice? \n. Hi, \ninstalled the fix and use -exclude-docs which seems to work. VSCode no longer creates multiple doc processes. Tested with both godoc and gogetdoc and both works fine so maybe the issue was with the resolveCompletionItem all along? . ",
    "neclepsio": "Thank you. I'm on Windows 7. guru referrers returns the same results as vscode.. ",
    "anjmao": "@gabstv I suggest to look at https://github.com/saibing/bingo which already works much better that gocode.. Check this commit https://github.com/saibing/bingo/commit/f9f872adc38d795840c3c354bd3a6c540f861205\nBingo already supports non-go module projects. I tested it in GOPATH without modules and it was working fine.. @ramya-rao-a @tohjustin Can we make go.languageServerExperimentalFeatures autocomplete and code formatting to be true by default? If I'm using LSP all I want to set by default is go. useLanguageServer setting and get all the LSP features.. ",
    "JPMoresmau": "Tested 2144, 2121 and 2114 and everything looked fine.\nThanks.\nJP\nOn Mon, Dec 3, 2018 at 9:49 AM Ilya Danilkin notifications@github.com\nwrote:\n\n2121 https://github.com/Microsoft/vscode-go/issues/2121 - works as\nexpected. The only thing missing right now would be some predefined key\ncombination, e.g. Cmd + F12 (on macOS)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2164#issuecomment-443633054,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAHdod2E-KWNUaZ7ApzrS6B3rJZES0cZks5u1OWqgaJpZM4Y9ROg\n.\n\n\n-- \nJP Moresmau\nhttp://jpmoresmau.blogspot.com/\n. ",
    "lylex": "@ramya-rao-a Sorry for the confusion, I meant use Go to Definition command from VS Code. . @ramya-rao-a Hi, I have tried Go-0.7.1-beta.5.vsix, but still not work for me. Could you tell me is there any simple way to debug on this issue, so that I may find it myself? . @ramya-rao-a I upgraded the VS Code to 1.30, but when I run Go: Install/Update Tools, I can not see godef-gomod from the drop down list. Did I do something that make it hidden?. @ramya-rao-a I am working on MacOS 10.12.6, Go version is go1.11.2 darwin/amd64 and I am using Go-0.7.1-beta.5.vsix.\n. @ramya-rao-a \n\n. @ramya-rao-a After setting back godoc, I can see godef-gomod and I get it updated. And then I update vs code to 1.30.0, and choose View -> Output -> Select \"Log (Extension Host)\", and then run Go to definition, still shows No definition found for xxx, and no log output there.. @ramya-rao-a godef is fine. Actually, after I changed \"User Setting\" -> go.useLanguageServer from true to false, everything works now. Looks like something wrong with go.useLanguageServer. :). ",
    "seflerZ": "Well, I managed to solve my problem by setting the dlv backend to lldb and made some changes to the launch.json\nCommand:\ndlv --headless --backend lldb --listen 0.0.0.0:30010 attach 239910 --log\nLaunch.json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Remote Debug\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"/home/sefler/mygo/src/istio.io/istio/pilot\",\n            \"program\": \"${workspaceFolder}\",\n            \"apiVersion\": 1,\n            \"host\": \"172.16.9.245\",\n            \"port\": 30010,\n            \"trace\": \"verbose\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}. Thanks for replying. I've tried many times without \"--backend\", unfortunately resulted in the some. My dlv version is:\nDelve Debugger\nVersion: 1.1.0\nBuild: $Id: 1990ba12450cab9425a2ae62e6ab988725023d5c $\nI'm running VS Code on Windows 10 Pro and the target platform is Ubuntu 16.04 LTS. The target program is pilot-discovery component of Istio. Both side of dlv installed the same version.\n. Sorry keep you waiting. Here is all I've got. @aarzilli \ndebugfile.txt\nThe log tells there is no file in: /home/sefler/mygo/src/istio.io/istio/mixer/pkg/api/grpcServer.go:133\nBut when backing with lldb, as the picture shows, the file can be found.\n\n. I'm terribly sorry that the whole development environment has been lost. I'm using Hyper-V to experience the Istio, but last day the machine state went wrong(it was stuck at initiation phase)  and could not work anymore. I've tried to make recovery but in vain.\nThank you for being active for this issue. Because I can not provide any further information at present, I think you can mark this issued as closed. If encountered the same problem again, I will mark it again.\nThanks, again!. ",
    "iaburton": "+1 to this being a relatively recent issue, unrelated to Go cache. Having spent about two hours working on a Go package today, saving frequently, I have 113 go-build* directories in /tmp for a total of 326 if you include the subdirectories.. ",
    "PraserX": "As it's mentioned in issue #1983, \"GOFLAGS\": \"-mod=vendor\" in go.toolsEnvVars resolves the issue. But of course, problem with go.buildFlags still remains.. ",
    "meteorice": "@ramya-rao-a \nI found (ctrl+right mouse-click) doesn't work, when i execute 'go mod init test' command. \nWhen i delete the go.mod, (ctrl+right mouse-click)  come back\n\u251c\u2500\u2500\u2500 go.mod\n\u251c\u2500\u2500 intf\n\u2502     \u2514\u2500\u2500 intf.go\n\u2514\u2500\u2500 main.go\n\n. ",
    "bevanhunt": "Same here on Mac OS 10.13.6, VS Code 1.29.1, and Go 1.11.2.. Yes on the Go modules.. @ramya-rao-a I followed the FAQ - didn't work. I save all the time - that isn't the issue. I just removed my brew casked version (1.29.1) and brew cask installed the new version (1.3.0) - autocompletions work now - but the onhover documentation still doesn't work.. @ramya-rao-a I tried going to an external package function (goto def) which the onhover doesn't work (it doesn't work for anything though) - it didn't work (goto def).. ",
    "fabianem": "@ramya-rao-a thanks for your replies. At this moment I am not using Go modules - I use dep for managing dependencies.\nAlso, its not happening for the first time I import a package - I am saving all the time.. @ramya-rao-a sorry for my delayed response\nI am in my package mainand tried to call a function from package tokenUtils(which I am using already several times in main)\nI tried now running gocode -s -debug and received the following output:\n2018/12/19 12:44:55 -------------------------------------------------------\n2018/12/19 12:44:55 Error parsing input file (outer block):\n2018/12/19 12:44:55  c:\\go-dev\\src\\mc2innovations.visualstudio.com\\CP_BC_Chaincodes\\token.go:115:13: expected selector or type assertion, found ';'\n2018/12/19 12:44:55  c:\\go-dev\\src\\mc2innovations.visualstudio.com\\CP_BC_Chaincodes\\token.go:117:2: expected ';', found senderTokenBalance\n2018/12/19 12:44:55 gbimporter: no package found for mc2innovations.visualstudio.com/CP_BC_Chaincodes/tokenUtils: can't find import: \"mc2innovations.visualstudio.com/CP_BC_Chaincodes/tokenUtils\"\n2018/12/19 12:44:55 gbimporter: no package found for mc2innovations.visualstudio.com/CP_BC_Chaincodes/eventUtils: can't find import: \"mc2innovations.visualstudio.com/CP_BC_Chaincodes/eventUtils\"\n2018/12/19 12:44:55 gbimporter: no package found for mc2innovations.visualstudio.com/CP_BC_Chaincodes/loggerUtils: can't find import: \"mc2innovations.visualstudio.com/CP_BC_Chaincodes/loggerUtils\"\n2018/12/19 12:44:55 gbimporter: no package found for mc2innovations.visualstudio.com/CP_BC_Chaincodes/validatorUtils: can't find import: \"mc2innovations.visualstudio.com/CP_BC_Chaincodes/validatorUtils\"\n2018/12/19 12:44:55 gbimporter: no package found for github.com/hyperledger/fabric/core/chaincode/shim: can't find import: \"mc2innovations.visualstudio.com/CP_BC_Chaincodes/vendor/github.com/hyperledger/fabric/core/chaincode/shim\"\n2018/12/19 12:44:55 Elapsed duration: 111.0029ms\n2018/12/19 12:44:55 Offset: 0\n2018/12/19 12:44:55 Number of candidates found: 0\n2018/12/19 12:44:55 Candidates are:\n2018/12/19 12:44:55 =======================================================\nI am not quite sure why he cant find any imported packages? My project structure is like the following:\n\nso the file token.go is my main package and every folder like tokenUtils is his own package.\nBut autcompletion within the same package works fine:\n2018/12/19 13:06:09 Elapsed duration: 486.4431ms\n2018/12/19 13:06:09 Offset: 0\n2018/12/19 13:06:09 Number of candidates found: 8\n2018/12/19 13:06:09 Candidates are:\n2018/12/19 13:06:09   func Init(stub invalid type) peer.Response\n2018/12/19 13:06:09   func Invoke(stub invalid type) peer.Response\n2018/12/19 13:06:09   func ReclaimAllowance(stub invalid type) peer.Response\n2018/12/19 13:06:09   func Reward(stub invalid type) peer.Response\n2018/12/19 13:06:09   func Setup(stub invalid type) peer.Response\n2018/12/19 13:06:09   func TransferAllowance(stub invalid type) peer.Response\n2018/12/19 13:06:09   func Update(stub invalid type) peer.Response\n2018/12/19 13:06:09   func Usage(stub invalid type) peer.Response\n2018/12/19 13:06:09 =======================================================\n. @ramya-rao-a \nYesterday I was already trying out the workaround but unfortunately I came across another problem. \nOn my ubuntu subsystem it all compiles without problem but I guess gocode (while using vs code) needs the packages build for windows. \nI also need to compile \\github.com\\miekg\\pkcs11 which is using cgo. So I installed gcc on windows (tdm-gcc and now trying with mingw64). But I also needed to install separately libtool for windows. It did almost work but then I got errors (with tdm-gcc + libtool) that its not 64bit compatible. \nSince then I am trying to give mingw64 a shot but I still did not figure out how to get libtool here working for mingw64.\n@stamblerre \nThanks for the advice but do you think this is also a workaround for my packages in subfolders which are not in the vendors folder?\n\ntoken.go is my main package and every subfolder like tokenUtilsis his own package with different go files.\nImporting tokenUtils in token.go I also do not get any autocompletion.\n. @ramya-rao-a I assumed so because I thought that vs code (running in windows) is using GOPATH/bin/gocode.exe and gocode.exe searches for the packages in GOPATH/pkg/windows_amd64 - or is his assumption wrong?\nNevertheless I installed on ubuntu subsystem all packages from vendor and in my local project. This is how GOPATH/pkg/linux_amd64 looks like now:\nfab@fab-surfacePro:/mnt/c/go-dev/pkg/linux_amd64/mc2innovations.visualstudio.com$ find CP_BC_Chaincodes/ -maxdepth 1\nCP_BC_Chaincodes/\nCP_BC_Chaincodes/errorUtils.a\nCP_BC_Chaincodes/eventUtils.a\nCP_BC_Chaincodes/loggerUtils.a\nCP_BC_Chaincodes/tokenUtils.a\nCP_BC_Chaincodes/validatorUtils.a\nCP_BC_Chaincodes/vendor\nand for now I installed manually all local packages in my project on windows:\nfab@fab-surfacePro:/mnt/c/go-dev/pkg/windows_amd64/mc2innovations.visualstudio.com$ find CP_BC_Chaincodes/ -maxdepth 1\nCP_BC_Chaincodes/\nCP_BC_Chaincodes/errorUtils.a\nCP_BC_Chaincodes/eventUtils.a\nCP_BC_Chaincodes/loggerUtils.a\nCP_BC_Chaincodes/tokenUtils.a\nCP_BC_Chaincodes/validatorUtils.a\nCP_BC_Chaincodes/vendor\nand unfortunately intellisense does still not work in vs code (even for imported local package e.g. tokenUtils)\n. ",
    "Cimsystemsthai": "Same problem here , go back to go extension version 0.7.0 seems to fix the problem. @ramya-rao-a\nI don't use dep and module.\nActually our project is a legacy code using go 1.7.2 and old gotools compiled a year ago ( i.e nsf/gocode not mdempsky/gocode) but before I report this error , I switch to  go 1.11.4 and newest gotool to check whether the problem is come from the old tools that we use or from the vscode-go.\nBoth old and new gocode show the same problem only switch back to vscode-go 0.7 make the auto complete work again.\nedit.\nIs it possible that the problem come from the gopath because our project use a non-standard gopath\nThis is the goroot / gopath / gotoolpath that we use for the project\n//termenv.sh\nGOVERSION=1.7\nPROJPATH=${PWD}\nGOROOT=C:/Go/${GOVERSION}\nGOTOOLPATH=C:/Go-Local/${GOVERSION}\nGOPATH=${PROJPATH}/go\nPATH=/C/Go/${GOVERSION}/bin:/C/Go-Local/${GOVERSION}/bin:${PATH}\nexport PATH GOPATH GOROOT GOTOOLPATH\n//Workspace setting\n{\n    \"go.toolsGopath\": \"C:/Go-Local/1.7/\",\n    \"go.goroot\": \"C:/Go/1.7/\",\n    \"go.gopath\": \"${workspaceRoot}/go/\",\n    \"terminal.integrated.shell.windows\": \"C:\\Program Files\\Git\\bin\\bash.exe\",\n    \"terminal.integrated.shellArgs.windows\": [\n        \"--rcfile\",\n        \".vscode/termenv.sh\"\n    ]\n}. ",
    "DOTA2mm": "Same here on Win10, VS Code 1.30.0, and Go 1.11.2.. > Thanks @stamblerre\n\n@fabianem Can you try out the workaround that @stamblerre has mentioned above?\n@Cimsystemsthai, @DOTA2mm Are you using dep or modules or neither?\n\nNeither used.. ",
    "rosulucian": "I installed a previous version (Go-0.7.0.vsix) and it works fine. i think Go-0.8.0.vsix broke the debugger.. ",
    "vmatyusGitHub": "I use indeed Go-0.8.0.vsix! I switched back to Go-0.7.0.vsix and now it works fine!\nThanks! \ud83d\udc4d . ",
    "gir": "I have similar settings but with the language server enabled:\n...\n  \"go.liveErrors\": {\n    \"enabled\": true,\n    \"delay\": 500\n  },\n  \"go.alternateTools\": {\n    \"go-langserver\": \"golsp\"\n  },\n  \"go.useLanguageServer\": true,\n  \"go.languageServerExperimentalFeatures\": {\n    \"format\": true,\n    \"autoComplete\": true\n  },\n...\nDev Console:\nAborted format on save after 750ms\nExtension Host Logs:\nnothing\nI notice that formatting on save works for go-langserver immediately. For golsp, when used as an alternative, formatting on save does work after a delay. You have to wait a bit to save after typing, probably letting the language server run. It's generally good to save and have a successful format after half a second, probably dependent on the project size.\nWhen typing, tool output is not shown in the Go Output. However if I save I can see Finished running tool: /usr/local/bin/go build -i -o /var/folders/hn/zl02t5gn0gj6bsygb0wl2wcm0000gn/T/vscode-gowqZ12g/go-code-check foo. If I try to save immediately after typing, formatting is aborted, generally saving again after the above message successfully formats the file on save.\nHope that makes sense.. @ramya-rao-a Upping the timeout helped \"editor.formatOnSaveTimeout\": 1500, but it's weird that sometimes save formatting is immediate and sometimes it takes a second.\nAlso disabling other plugins has no effect.. ",
    "xgfone": "It's solved??\nIt's not working for me, either.\nVSCode: 1.30.2\nvscode-go: 0.8.0\njson\n{\n    \"go.inferGopath\": true,\n    \"go.useLanguageServer\": true,\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.gotoSymbol.ignoreFolders\": [\n        \"vendor\",\n    ],\n    \"go.languageServerExperimentalFeatures\": {\n        \"format\": true,\n        \"autoComplete\": true,\n        \"rename\": true,\n        \"goToDefinition\": true,\n        \"hover\": true,\n        \"signatureHelp\": true,\n        \"goToTypeDefinition\": true,\n        \"goToImplementation\": true,\n        \"documentSymbols\": true,\n        \"workspaceSymbols\": true,\n        \"findReferences\": true\n    }\n}\nno Extension Host Logs.\nDev Console:\n```log\nExtension Host\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:3266 Debugger listening on ws://127.0.0.1:21663/4a3c679e-09ce-496c-b353-84a651b597db\nFor help see https://nodejs.org/en/docs/inspector\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:303 [Extension Host] [UriError]: Scheme is missing: {scheme: \"\", authority: \"\", path: \"\", query: \"\", fragment: \"\"}\nt.log @ /C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:303\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:303 [Extension Host] [vscode-icons] v8.0.0 activated!\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:3266 Extension Host\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:3266 Debugger attached.\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:3266 Extension Host\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:3266 Debugger listening on ws://127.0.0.1:21663/4a3c679e-09ce-496c-b353-84a651b597db\nFor help see https://nodejs.org/en/docs/inspector\n/C:/Users/xgf/AppData/Local/Programs/Microsoft VS Code/resources/app/out/vs/workbench/workbench.main.js:1504   ERR Header must provide a Content-Length property.: Error: Header must provide a Content-Length property.\n    at StreamMessageReader.onData (C:\\Users\\xgf.vscode\\extensions\\ms-vscode.go-0.8.0\\node_modules\\vscode-languageclient\\node_modules\\vscode-jsonrpc\\lib\\messageReader.js:200:27)\n    at Socket. (C:\\Users\\xgf.vscode\\extensions\\ms-vscode.go-0.8.0\\node_modules\\vscode-languageclient\\node_modules\\vscode-jsonrpc\\lib\\messageReader.js:185:19)\n    at emitOne (events.js:116:13)\n    at Socket.emit (events.js:211:7)\n    at addChunk (_stream_readable.js:263:12)\n    at readableAddChunk (_stream_readable.js:250:11)\n    at Socket.Readable.push (_stream_readable.js:208:10)\n    at Pipe.onread (net.js:594:20)\n```\ngo-langserver Log:\nlangserver-go: reading on stdin, writing on stdout\nPassing an initialize rootPath URI (\"file:///d:/gopath/src/github.com/xgfone/ship\") is deprecated. Use rootUri instead.\ntmpfriend: Removing C:\\Users\\xgf\\AppData\\Local\\Temp\\tmpfriend-9488-543050867. @OneOfOne Yes, you are right. It's working. Thanks!!!. ",
    "SylvainGarrigues": "Hey, godef-gomod doesn't work any longer in vscode with modules, but godef does.\nUntil https://github.com/Microsoft/vscode-go/blob/master/src/goDeclaration.ts#L83 is updated to remove reference to this tool, I found out that \n# cd ${GOPATH}/bin && rm godef-gomod && ln -s godef godef-gomod\nMakes vscode usable again with Go modules and definitions :). ",
    "aggressivepixels": "Sorry about the inactivity, I don't have good internet access right now.\nAnyway, I couldn't find anything about which platforms are supported by Delve, the only thing I found was that it doesn't work on 32-bit machines. Those other platforms are pretty uncommon and also there are no official Code builds for them AFAIK, so this should work well for now, and just like @jhendrixMSFT said, we can always add them later if it's an issue.. ",
    "ToothlessGear": "This issue is a duplicate of #2187.\nAdding \"stackTraceDepth\": 50 to launch.json should resolve this.\n@ramya-rao-a: Shouldn't there be a default value, if this is not set? \nOtherwise https://github.com/Microsoft/vscode-go/blob/0ee759fd87cd0a44287e7a3a4dd081dde111cfb3/src/debugAdapter/goDebug.ts#L274 is undefined and only returns the top frame.. ",
    "hatricker": "I am seeing the same issue.. ",
    "christian-fortini": "Thanks for the quick turnaround on this!\nChristian\nFrom: Ramya Rao notifications@github.com\nSent: Saturday, December 29, 2018 11:40 PM\nTo: Microsoft/vscode-go vscode-go@noreply.github.com\nCc: Christian Fortini chrisf@microsoft.com; Mention mention@noreply.github.com\nSubject: Re: [Microsoft/vscode-go] Shown call stack always of depth 1 with version 0.8.0 (#2196)\nThanks for reporting @christian-fortinihttps://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fchristian-fortini&data=02%7C01%7Cchrisf%40microsoft.com%7C2ece5238b54346c5e38108d66e2a0d31%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636817524220522460&sdata=zMmQpRkIUz4xS2hQvgzqk9Kwr8cPnfZh0GF5pxf46hA%3D&reserved=0 and @hatrickerhttps://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fhatricker&data=02%7C01%7Cchrisf%40microsoft.com%7C2ece5238b54346c5e38108d66e2a0d31%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636817524220532470&sdata=VGa0tLpLSP7tt8MTsabsYU1lE2OOU5F1Uxko4d3gy8E%3D&reserved=0\n@ToothlessGearhttps://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FToothlessGear&data=02%7C01%7Cchrisf%40microsoft.com%7C2ece5238b54346c5e38108d66e2a0d31%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636817524220532470&sdata=Ev5oj288ipKIV%2FmxtCPFE%2BwLYDbqLUyM9YrUtn4n4PE%3D&reserved=0 Yes, you are right. We should have a default there. @segevfinerhttps://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fsegevfiner&data=02%7C01%7Cchrisf%40microsoft.com%7C2ece5238b54346c5e38108d66e2a0d31%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636817524220542475&sdata=CbrR5EBvKIIuz84vZGiUDfL8WBWpKDUTHlv9QlCHKwE%3D&reserved=0 has submitted a PR for the same which I just merged.\nTo get the fix, please use the latest beta version of this extensionhttps://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-go%2Fwiki%2FUse-the-beta-version-of-the-latest-Go-extension&data=02%7C01%7Cchrisf%40microsoft.com%7C2ece5238b54346c5e38108d66e2a0d31%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636817524220542475&sdata=l812zTakMKC%2F7rVXacSHyFM2yB989k5Mj7bWZ%2Fopsxc%3D&reserved=0\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2FMicrosoft%2Fvscode-go%2Fissues%2F2196%23issuecomment-450544414&data=02%7C01%7Cchrisf%40microsoft.com%7C2ece5238b54346c5e38108d66e2a0d31%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636817524220552480&sdata=jABF2LgHHJQcfueBi%2BFhSd1%2BwQnTL9Jij237C%2BRLd2s%3D&reserved=0, or mute the threadhttps://nam06.safelinks.protection.outlook.com/?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FAp1TkhRUOBOXV9CPTLSBrhOQ-1fP0nErks5u-G3kgaJpZM4ZZYT2&data=02%7C01%7Cchrisf%40microsoft.com%7C2ece5238b54346c5e38108d66e2a0d31%7C72f988bf86f141af91ab2d7cd011db47%7C1%7C0%7C636817524220552480&sdata=VI8lCyM1kFri9AUqF%2FYfiFGBFmPeY0WxVdP9OUfMdVc%3D&reserved=0.\n. ",
    "Ri0n": "oh. it's in fact a dup of  Issue #2196.\nI didn't realized for the first  time those all were goroutines. Thanks for the info. If ever start working on improving vscode-go I'll try to fix it and provide a PR. \nBut if guess it won't happen any soon. Thanks anyway.. ",
    "leakyshoe": "Still not working. I deleted my Go plugin and $HOME/go folder then re-installed the plugin and analysis tools. The tool works once or twice and then seems to get lost in the directory structure. There is an easy fix, just copy a version of the gogetdoc binary from November into $HOME/go/bin and then everything is fine after killing old gogetdoc processes. Sorry for the spam, the formatting was hiding some of the information. If I remove \"go.docsTool\": \"gogetdoc\" from .vscode/settings.json then after agreeing to the prompt to install godef, code navigation works. I installed Go go1.12 and deleted $HOME/go and now it works. We are using modules with vendored dependencies and I think the real problem is performance which the latest version of Go seems to have fixed.. OK stopped working again with gogetdoc just spinning its wheels. Basically it doesn't work with medium projects using modules and vendored deps. If I delete \"go.docsTool\": \"gogetdoc\" from settings.json to engage godef things work fine. My sample modules project works fine with gogetdoc and is attached but not useful for reproducing the issue\nArchive.zip\n. FYI our projects have around 15 deps in their mod file. Here's another example with vendored deps which works with gogetdoc. So we would really need a fairly large project to test this issue\nArchive2.zip\n. ",
    "rhnvrm": "@ramya-rao-a @nezorflame - Thanks for clarifying, I guess the change is not required.. ",
    "sunliver": "@ramya-rao-a  Thanks for you code review! Sorry for some incorrect changes.\nIf I recall right, \n- the first run is, for example, my project uses module A, and I run go to definition in opened files of A\n- the second run is, I just open a file from local mod cache, and I run go to definition?. Actually it runs as you think.\nI did not change the behavior of old GOPATH package, just add support for mod package.\nIf you try to go to definition under a package, \n- first use go list -m -f {{.GoMod}} to figure out whether it is a mod package or not.\n- if not, run godef under workspace dir\n- otherwise run godef under mod path\nWhy change go env GOMOD to go list -m -f {{.GoMod}}?\nhttps://github.com/golang/go/issues/26500#issuecomment-407510940\n. But go env GOMOD may fail sometimes. \nAs I've tested in this issue, https://github.com/golang/go/issues/29433, though it is not a mod package , go env GOMOD still get the go.mod file. But it is not actually likely to occur.. > @sunliver I have pushed a commit that gets the latest from the master branch. There was a bug where errors from godef resulted in an infinite loop which is now fixed with 8c6f035\n\nNow going back to the case I was describing in #2216 (comment), lets see the below example\n```\npackage main\nimport \"rsc.io/quote\"\nfunc main() {\n  quote.Hello()\n}\n``\nHere if you runGo to definitionon theHello()function, the file$GOPATH/pkg/mod/rsc.io/quote@v1.5.2/quote.goopens. This file uses another package calledsampler. RunGo to definitiononsampler.Hello()`.\nUsing the code in this PR, this Go to definition operation fails.\nYou can see the error in the output channel -> Log (Extension Host)\nCommand failed: C:\\GoTools\\bin\\godef.exe -t -i -f c:\\GoCode\\pkg\\mod\\rsc.io\\quote@v1.5.2\\quote.go -o 335 godef: no object\nThis is because we are using the folder $GOPATH/pkg/mod as current working directory.\n\n@ramya-rao-a \nI've found this case a few days ago. Because rsc.io/quote use sampler , and quote does not add go.sum into the repo. And currently x/package requires go.sum go work, actually go list requires go.sum to work. So the go tool try to generate the go.sum file to work. But mod path is read only, and it fails.\n. @ramya-rao-a \n\ncwd: (modFolderPath && modFolderPath !== getModuleCache())\n? modFolderPath : (getWorkspaceFolderPath(document.uri) || path.dirname(document.fileName))\n\nIt seems that you may fail back to use workspace folder in some cases.\nIt works in most situations. Here I provide a corner case: go to definition on a module file, which is not directly used in our project.\nI've found that, for example, the folders organize as follows:\n\u251c\u2500\u2500 test    =>   A\n\u2502   \u251c\u2500\u2500 go.mod    => B\n\u2502   \u2514\u2500\u2500 main.go\n- if you run godef -f another-third-party-from-pkg-mod -o xxx under B, and the test module doesn't require the module, it fails\ngodef: There must be at least one package that contains the file\n- if you run under the third_party pkg mod path, it successes.\nNow comes back on #2216 (comment), the second run.\nBefore go1.11, if we run go to definition on a file, which is not used in our project, it will fail.\nBut now comes go1.11 and x/package, if we run go to definition under the same situation, we can make it if we set the correct cwd.\nHowever, godef's behavior is not clearly enough for me now, later I will dig into it.\nThus https://github.com/Microsoft/vscode-go/pull/2216#issuecomment-456474461, go tool may not work as we expected,  I still think #2262 it is too complicated, although you mentioned that,\n\nNot using the right package import path for packages in module cache, results in no documentation > to show on hover for their symbols too. So we update the getCurrentPackage function to return the right import path for such packages.\n\nMaybe ask go team for some help.. @ramya-rao-a \nThank you! It works now.. ",
    "olesiapoz": "Hello Ramya,\nThank you for your response. So far I have managed to debug main.go file,\nbut I am not able to debug any other relevant file as breakpoint as shown\nas \"Unverified Breakpoints\". I have tried changing \"program\" options to\nvarious values, including path to file I want to debug - no luck - same\nresult, breakpoints are ignored.\nI would be grateful, if you point me in right direction.\nOlesia\n2018-12-29 07:54 \"Ramya Rao\" notifications@github.com ra\u0161\u0117:\n@olesiapoz https://github.com/olesiapoz Debugger not hitting break points\ncan have multiple root causes. The instance reported in #1987\nhttps://github.com/Microsoft/vscode-go/issues/1987 has been solved and I\ndon't believe that is the same problem you are facing. Please go\nthrough Debugging\nthe debugger\nhttps://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#debugging-the-debugger\nsection of our wiki and try out the various logging settings one by one.\nThat might tell you what the issue is.\nYou can share the same here and I can help in figuring out what is\nhappening.\nSince you mentioned that this happens with any Go code, my guess is that\nthis is some kind of environment issue. Please update your version of\ndelve. Run Go: Install/Update Tools, select dlv, then press Ok to update\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2218#issuecomment-450468134,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Ae7dVVA1inVMtpqfV9STM3nC0eiyeXzKks5u9wN3gaJpZM4ZjdS5\n.\n. Hello Ramya,\nI have went through all suggestions Debugging the debugger\nhttps://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#debugging-the-debugger\nand this did not solved an issues of debugging the solution. I have\nstructure, where my main.go file is in a root and api package with\nendpoints.go files is within api directory (api/endpoints.go). I want to\ndebug endpoints.go. I do not use symlinks.\nHere is my lunch config:\n  \"version\": \"0.2.0\",\n    \"configurations\": [\n    {\n        \"name\": \"Launch\",\n        \"type\": \"go\",\n        \"request\": \"launch\",\n        \"mode\": \"auto\",\n        \"program\": \"${workspaceRoot}\",\n        \"env\": {\"MONGO_HOST\":\"192.168.0.3:27017\",\"USER_DATABASE\":\n\n\"mongodb\",\"GOPATH\":\"D:\\PhD\\Go\\\"},\n            \"args\": [],\n            \"trace\": \"verbose\",\n            \"apiVersion\": 2\n    }\n]\n\n}\nAnd here is debug output:\nInitializeRequest\nInitializeResponse\nUsing GOPATH: D:\\PhD\\Go\\\nCurrent working directory: D:\\PhD\\Go\\src\\serverless\\user\nRunning: D:\\PhD\\Go\\bin\\dlv.exe debug serverless\\user --headless=true\n--listen=127.0.0.1:23931 --api-version=2 --\nAPI server listening at: 127.0.0.1:23931\nInitializeEvent\nSetBreakPointsRequest\nAll cleared\nCreating on: D:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:18\nCreating on: D:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:74\nCreating on: D:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:75\nCreating on: D:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:79\nCreating on: D:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:81\nCreating on: D:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:84\nError on CreateBreakpoint: could not find\nD:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:18\nError on CreateBreakpoint: could not find\nD:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:74\nError on CreateBreakpoint: could not find\nD:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:75\nError on CreateBreakpoint: could not find\nD:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:79\nError on CreateBreakpoint: could not find\nD:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:81\nError on CreateBreakpoint: could not find\nD:\\PhD\\Go\\src\\serverless\\user\\api\\endpoints.go:84\nAll set:[null,null,null,null,null,null]\nSetBreakPointsResponse\nConfigurationDoneRequest\nContinueRequest\nContinueResponse\nts=2019-01-01T18:06:57.7842357Z caller=main.go:155 transport=HTTP port=8084\nOn Tue, 1 Jan 2019 at 04:39, Ramya Rao notifications@github.com wrote:\n\nPlease follow the various logging features mentioned in Debugging the\ndebugger\nhttps://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code#debugging-the-debugger\nand share the logs.\nAre you using symlinks?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2218#issuecomment-450706140,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Ae7dVQocQWmc2eyYOEN0NhQgYSGCwlbmks5u-spKgaJpZM4ZjdS5\n.\n. \n",
    "thekvs": "No, all gocodes' versions were correct. But it seems that I've found what was causing problems with vscode-go plugin --  I've used a wrong path for gopkgs tool in my build script so it wasn't built as an executable. Maybe you should somehow address this situation in the extension but that's another issue so I am closing this one.. kvs@lair ~:> go get -u -d github.com/uudashr/gopkgs\nkvs@lair ~:> go build -i -o /tmp/gopkgs -ldflags=\"-s -w\" github.com/uudashr/gopkgs    <--- I was using this wrong path in my build script\nkvs@lair ~:> ls -l /tmp/gopkgs\n-rw-rw-r-- 1 kvs kvs 66666 \u0434\u0435\u043a 31 09:12 /tmp/gopkgs\nkvs@lair ~:> file /tmp/gopkgs \n/tmp/gopkgs: current ar archive   <--- Not an executable!\nkvs@lair ~:> rm /tmp/gopkgs\nkvs@lair ~:> go build -i -o /tmp/gopkgs -ldflags=\"-s -w\" github.com/uudashr/gopkgs/cmd/gopkgs  <--- This is the correct one\nkvs@lair ~:> ls -l /tmp/gopkgs\n-rwxrwxr-x 1 kvs kvs 3838272 \u0434\u0435\u043a 31 09:12 /tmp/gopkgs\nkvs@lair ~:> file /tmp/gopkgs \n/tmp/gopkgs: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped. Yes.\nAnd the other thing that I'd propose is not to break the whole code completion things (but warn user) if there are execution problems with some auxiliary tools involved in code completion. What I mean is that when I did chmod a+x on the wrongly compiled gopkgs file (it didn't make it a correct executable!) code completion magically started to work, probably with some reduced functionality.. ",
    "keremgocen": "I'd like to jump on this if no one else have yet. Happy to jump on this if it's ok to grab. ",
    "hbakhtiyor": "no, when i save it. ",
    "erihanse": "Would this suffice?\n\n. ",
    "AndreKR": "I checked how VS Code runs go doc and I found this command line:\ngo doc -c -cmd -u github.com/AndreKR/test Foo\n\nWhen I run this, the output is:\ntype Foo struct {\n        a string // Foo\n        b string // Bar\n}\nSo apparently the information is already there, VS Code is just not consuming/displaying it.. Well, you can actually call go doc -c -cmd -u github.com/AndreKR/test Foo.a which will give you the information for just that one field:\n```\ntype Foo struct {\n    a string  // foo\n// ... other fields elided ...\n\n}\n``\n(// ... other fields elided ...` is actually part of the output.)\nBut since it's very inefficient to make so many calls and the format to parse is the same and you can get all the information from the one call mentioned above, this is probably not the way you want to do it.. It already offers \"a\" and \"b\" in the autocompletion box (see screenshot). For this it calls go doc -c -cmd -u github.com/AndreKR/test Foo so it does in fact know that f is of type Foo.. Hm, I see. In the screenshot it shows that Foo.a ist string... where does that information come from - from gocode or from the go doc -c -cmd -u github.com/AndreKR/test Foo call?. ",
    "bercab": "I have the same problem working with modules outside GOPATH.\nIt seems related to this issue:\nhttps://github.com/golang/go/issues/24661\nguru tool needs an update to support modules.\n. ",
    "mossplix": "Is someone working on this? . ",
    "ericshen881027": "I have the same question about how to debug on the remote machine, the \"remotePath\" and \"program\" can only find the local path in stead of the remote machine path, otherwise you will get the \"Failed to conitnue\" error.\nBut when you select the local source file, the vscode debugger can only do the \"start\" and \"stop\", how can I set the breakpoints?\nHere is my settings:\n{\n            \"name\": \"Remote\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"remote\",\n            \"remotePath\": \"C:\\\\Users\\\\EricS\\\\go\\\\src\\\\test-struct\",\n            \"port\": 2345,\n            \"host\": \"10.142.114.150\",\n            \"program\": \"C:\\\\Users\\\\EricS\\\\go\\\\src\\\\test-struct\",\n            \"env\": {}\n}\nand the dlv command (running on the remote machine):\n\ndlv debug --listen=:2345 --headless=true --api-version=2 --log\n\nget the message in the remote machine output:\n\nAPI server listening at: [::]:2345\nINFO[0000] launching process with args: [/root/go/src/test/test-remote-debug/debug]  layer=debugger\n. \n",
    "philippgille": "I'm currently having issues with this as well, but I found the following related issues that contain some further info:\n- https://github.com/Microsoft/vscode-go/issues/2169\n- https://github.com/Microsoft/vscode-go/issues/2119. Thanks for the quick reply and fixes.\nConsidering Delve API v2 is probably the way to go nowadays, maybe the dlv debug example commands should contain --api-version=2?\nAlso, with remotePath being set to the executable it still doesn't work for me.\nThis is the launch.json:\n{\n    \"name\": \"Remote\",\n    \"type\": \"go\",\n    \"request\": \"launch\",\n    \"mode\": \"remote\",\n    \"remotePath\": \"/app\",\n    \"port\": 40000,\n    \"host\": \"localhost\",\n    \"program\": \"${workspaceRoot}\",\n    \"env\": {},\n    // The following are optional.\n    // See https://github.com/Microsoft/vscode-go/wiki/Debugging-Go-code-using-VS-Code.\n    \"showLog\": true,\n    \"trace\": \"verbose\",\n    //\"logOutput\": \"rpc\"\n}\n/app is the executable in the Docker container. The Dockerfile contains this line: CMD [\"/dlv\", \"--listen=:40000\", \"--headless=true\", \"--api-version=2\", \"--log=true\", \"exec\", \"/app\"].\nThis is the local Delve debugging log:\nUsing GOPATH: C:\\Path\\To\\go\nTo client: {\"seq\":0,\"type\":\"event\",\"event\":\"initialized\"}\nInitializeEvent\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":2,\"command\":\"launch\",\"success\":true}\nFrom client: setBreakpoints({\"source\":{\"name\":\"main.go\",\"path\":\"c:\\\\Path\\\\To\\\\go\\\\src\\\\example\\\\main.go\"},\"lines\":[71],\"breakpoints\":[{\"line\":71}],\"sourceModified\":false})\nSetBreakPointsRequest\nAll cleared\nCreating on: C:\\Path\\To\\go\\src\\example\\main.go (/app/main.go) :71\nError on CreateBreakpoint: could not find /app/main.go:71\nAll set:[null]\nTo client: {\"seq\":0,\"type\":\"response\",\"request_seq\":3,\"command\":\"setBreakpoints\",\"success\":true,\"body\":{\"breakpoints\":[{\"verified\":false,\"line\":71}]}}\nSo it seems it's actually looking for source code?\nAs mentioned in my initial issue description, I think the whole \"Remote Debugging\" section could generally be improved by extending the descriptions and maybe adding a complete example. One very common use case is probably to work locally on Windows, but having a Go web service deployed in a Docker container. Others are having issues with this as well, see https://github.com/Microsoft/vscode-go/issues/2242.\nFor others having this problem I can recommend looking at https://blog.jetbrains.com/go/2018/04/30/debugging-containerized-go-applications/.\nBut that's only helpful for showing how the Dockerfile should look for remote debugging and which additional Docker run parameters are required. The IDE configuration is only described for GoLand.\nSomething like this is really missing in the vscode-go documentation / wiki.. ",
    "wcsiu": "For the \"program\", you should put the current working directory if you are debugging the whole project, e.g. \"${workspaceFolder}\", \"/Users/user-name/project-name\". For \"remotePath\", the location of project in your remote server, it's similar to \"program\" but it is the location of code files in your remote server.\nI have some questions of myself too.\nFor go modules, only having one path for \"program\" is not enough, my dlv giving something like ${workspaceFolder}/go/pkg/mod/some-files when it tried to match the file on my side. Is there any plan to solve it? like \"program\": \"${workspaceFolder}\":$GOPATH or using $GOPATH to look for dependency codes when go modules is used.. ",
    "hotinherre": "Hi, I have the same issue.\nNo hover/code-navigation on external or standard library in go module.\nGo doc works fine in terminal.. Thanks for quick response. When will this patch release to stable version we can use?. Thanks!\nI try the insider version, the problem get fixed. I can do both navigation(#2261 ) and see the hover.. Hi, I encounter same issue.\nCannot do code navigation for go module  outside of the GOPATH. But for non-module source code in under Gopath, I can do normal code navigation. \nI try install latest beta version. Nothing changes.\nPlease help.. ",
    "karim": "@ramya-rao-a I tried the latest version (0.8.1-beta.6) and it's still the same. I remember it was working before but then I updated Go tools from VS Code and it stopped working.\nSo I tried reverting to an older version of gogetdoc to see when it stopped working. It turns out this is a gogetdoc problem, and not the Go extension.\nCommit https://github.com/zmb3/gogetdoc/commit/1fd4a45c9db2a8d57766eb38d0e8aaf55199b44c introduced the bug in this issue. I reverted back to https://github.com/zmb3/gogetdoc/commit/c5ca8f4d4936d4852f065372f3b89c8785b948f7 and it started working again.\nThis fixed it for me...\n```\n\ncd %GOPATH%\\src\\github.com\\zmb3\\gogetdoc\ngit checkout c5ca8f4d4936d4852f065372f3b89c8785b948f7\ngo install github.com\\zmb3\\gogetdoc\n```\n\nFeel free to close this issue and I will open the issue with gogetdoc repo.. I see, thanks for the clarifications. I thought the issue was with gogetdoc because it was working before without a problem then stopped working (without any changes to the extension).\n\ngiven only a single file it\u2019s pretty hard to guess at what context you are working in.\n\nYou are right, opening a folder, or a workspace, is working without a problem.\nHowever, VS Code is the default application for .go files. I usually open .go files by double-clicking files randomly, without opening a folder/workspace, then it stops working.. > It worked when you downgraded, but the old version that worked for you would have failed with modules.\nActually it is working with modules too.\n\nTo sum everything up..\n\nhttps://github.com/zmb3/gogetdoc/commit/c5ca8f4d4936d4852f065372f3b89c8785b948f7 works with both GOPATH and modules.\nLatest gogetdoc is working inside GOPATH only, but it does not work with modules without opening a folder. If I open a folder or a workspace then it works.\n. @ramya-rao-a Thank you very much. It is working now. :smiley: \n\nUsing latest gogetdoc and 0.8.1-beta.7 the problem is fixed.\n\nThe problem was not with the initial use of gogetdoc in a file in your project, but the subsequent uses in files.\n\nI understand it better now, thanks again.\n@zmb3 Thanks for your quick reply and for this great tool. :+1: . @ramya-rao-a I don't know if I should reply here to say everything is working as expected or reply only if there is a problem with the latest beta.\nYour fix in #2246 is working great and I tested it using the latest beta. Thanks again. :smiley: . ",
    "jschank": "I have this problem also. Just started today. ",
    "chrismwendt": "My apologies, I accidentally introduced this bug in https://github.com/sourcegraph/go-langserver/commit/8c25906a7dbc904acc96b5435ec42fa5da8b232c\nThis has been fixed in https://github.com/sourcegraph/go-langserver/commit/267fa34a98ba30e53d228500831b6db37883c199. My apologies, I accidentally introduced this bug in https://github.com/sourcegraph/go-langserver/commit/8c25906a7dbc904acc96b5435ec42fa5da8b232c\nThis has been fixed in https://github.com/sourcegraph/go-langserver/commit/267fa34a98ba30e53d228500831b6db37883c199. ",
    "gdamore": "Well, for me, I need to be able to set a variety of settings... the GOPATH, GOROOT, CGO_ENABLED, CC, the system root path (where include files are found etc.)\nBasically, this is everything to switch to a target for cross compilation.. ",
    "eknkc": "This is also what I see. Due to the unusable performance I use go mod vendor to vendor in any dependencies and use vscode in non-module way. Go cli still uses the modules.\nThe exact same project with modules enabled is significantly slower (to the point that it's unusable) in code completion / reference lookups etc.. BTW, just checked the language server stuff. bingo seems to be working fine with decent performance. However saibing/bingo#54 is kind of a deal breaker for me. I guess the language servers are the way to go in future development?. @sashker thanks, I tried doing that but it won't simply import the package via package name, it needs a full signature. For example entering spew and saving does nothing, spew.Dump imports the package. This means I need to know at least one publicly accessible variable or function.\nBTW, I believe your sample config needs this for bingo:\n\"go.alternateTools\": {\n    \"go-langserver\": \"bingo\"\n  }\nI also see this sometimes (not reliable):\n\nI wonder if it's coming from the language server or another tool integrated into vscode-go.. ",
    "hnlq715": "+1. ",
    "abdullahsaleem93": "+1 becomes almost unusable . ",
    "sashker": "I tried recommended language server by Sourcegraph but it doesn't eliminate the problem. I believe that we have to wait until the upcoming server from Google.\nAnyway, I'd love to understand what causes such a problem.. ",
    "vladyslav2": "Killing go-langserver and manually running bingo seems helped \nwill report after using it for a few days\nEdit: Not completely helped - I can see error notifications but still cannot go to the definition, jump to the source and etc. \nAuto imports is works and basic syntax error messages. After playing with it for a while I found one strange pattern:\n- Go to Defenition\n- Go to Type Definition\n- Find All Reference \n- etc\nwill work only for the first time when you install go-langserver\nif you will close and reopen visual code you will be missing that functions\nIt does not depend on the golang version, I got the same problem with 1.10 and 1.11\nSo as a quick fix, each time you want to open visual studio (you might and probably will remove valuable data, don't do this):\nrm -rf $GO PATH <--- make sure you want to do this\ncode .\nand then install required files for go-extension . Hopefully, my monolog will help somebody.\nManage to make it work without removing GOPATH.\n\nDo not use go mod, stay with vgo or anything but without go mod (remove go.mod, go.sum files)\nMake sure to purge go-langserver completely \nRun gocode manually before you open vscode \n\nI tried to play with bingo but the problem that I don't know how to get error logs so if something not working I cannot dig deeper and understand why. Would be nice to have some simple examples of how to use bingo from a command line ..... @ramya-rao-a I would say the problem is not that I still want to use go-language server.\nThe Problem that visual studio offers me to install it everytime I open golang file and it seems awkward when I install tool from recommendation tooltip and everything stop working . @chrismwendt well, sadly, I have no idea where do you live\nBut, as you can, see I can put a lot of strive and be assertive \nps thanks for a fix I'll test it later . @chrismwendt Chris, just to confirm go-langserver working fine right now\nthank you. ",
    "webframp": "I've also had good results bingo instead of go-langserver. Perhaps just a user setting could be added to allow overriding the binary used?. Great info thanks @inliquid and @OneOfOne . ",
    "inliquid": "+1 for bingo as default language server\nFor configuration with VS Code I suggest following this page:\n```json\n    \"go.useLanguageServer\": true,\n\"go.alternateTools\": {\n    \"go-langserver\": \"bingo\"\n},\n\n\"go.languageServerFlags\": [\"--format-style\", \"goimports\"],\n\n\"go.languageServerExperimentalFeatures\": {\n    \"format\": true,\n    \"autoComplete\": true\n}\n\n``. @lggomezml if you see some bug, please report it at bingo's repo. It's under active development, and  maintainer is also very active, closing all major issues literally in hours. Not sure what you mean btw, I have not seen any big problems with it so far, and it's the only language server that works normally withGO111MODULE=on`, finds interface implementations (and doesn't spend hours on this) and the only server that works on Windows. . @ramya-rao-a yep I don't see it anymore.. This issue is related to langserver, and since there is discussion about formatter logging in #2270 I think it's redundant.. @OneOfOne yes, \"bingo\" is the langserver I'm using.. @OneOfOne I think it must be clearly documented in config and dependency added to formatter options. Probably some logging is to be introduced to 'Go' output anyways. Right know it's counter-intuitive and the only way to find out what's happening is to post an issue. . @ramya-rao-a \nSame \"undefined\" message with Language server turned off:\n\n. Please reopen.. ",
    "bcomnes": "\nIt seems that golsp (now renamed to gopls) still isn't ready, but it can be tested via a local extension setup: https://github.com/golang/tools/tree/master/cmd/gopls/integration/vscode\n\nFrustrating I have to float a development package to test that out.  They should make it work like bingo!. ",
    "broady": "@bcomnes I got that working, per docs on the wiki: https://github.com/Microsoft/vscode-go/wiki/Go-modules-support-in-Visual-Studio-Code#can-i-use-the-language-server-when-using-go-modules\n\"go.alternateTools\": {\n    \"go-langserver\": \"gopls\", // or bingo\n  },\n  \"go.languageServerExperimentalFeatures\": {\n    \"format\": true,\n    \"autoComplete\": true\n  },\n  \"go.useLanguageServer\": true\nand it works really well.\nthough I lost syntax highlighting. any idea how to get that back?\nedit: looks like a restart got highlighting back. ",
    "welkie": "Logo makes more sense to me than mascot for things like this.. ",
    "dreamer-nitj": "Hi Ramya,\nThanks for your reply.\n\nYes, slowness is there even for small go projects. I also saw that if i turn off go extension, then vscode becomes responsive and very fast.\nI am not using go modules.\nturning off all the  \"on save features\" seems to have made lot of difference in speed but i feel its not as fast as it used to be in past.\n\nAlso attaching the profile for extension host.\nCPU-20190121T041818.552Z.cpuprofile.txt\n. ",
    "scriptonist": "Hey, \ud83d\udc4b I can try to work on this. I'm very new to the codebase and TS itself. I may take some time and would need some help to tackle this. If It's alright I can start working on this \ud83d\ude05 \ud83d\ude03 . ",
    "502647092": "@ramya-rao-a lastest version 0.8.1-beta.7 is run ok. ",
    "monkeyWie": "@ramya-rao-a \nI just run a hello word program,then this is my code:\n.vscode/launch.json\njson\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\nsrc/main.go\n```go\npackage main\nimport (\n    \"fmt\"\n)\nfunc main() {\n    fmt.Println(\"Hello word\")\n}\n```\nThe version info\nVSCode version:1.30.2\nGo plugin version:0.8.0\nDelve version:1.1.0\nSteps\n\nPress F5 to debug\nFound the DEBUG file after the program finishes running.. Yes, the debug file has not been cleared.\nOS: win10 Pro 1803. Thank you, I will try it when I have time.. \n",
    "adiabatic": "I disabled all other extensions and reloaded Visual Studio Code. It still happens.\nI'd love to share my Go-related settings, but it seems I don't have any. I went into Preferences: Open Settings (JSON) on my laptop and there's nothing there in my laptop. I went to ~/Library/Application Support/Code/User/ and there's no preferences.json in there. On my desktop, all my user-overridden settings start with html., javascript., typescript., workbench., or editor..\nSorry I couldn't be more helpful.. ",
    "flddr": "@ramya-rao-a \nthank you - sorry for waiting\nI have reduced to\n\nThis does not change anything. Oh yes, i would like to try that in the evening, but didn't found anything else related to goreturns than\nhttps://github.com/sqs/goreturns\nIs this the tool used by VS Code? Actually i am not sure where to found some information. Sorry, i had less time these days\nI tried goreturns and gofmt with those files from terminal/commandline (Windows 17763.292) and on ubuntu 18.04, but i got same output (different whitespaces, as seen on sqs/goreturns#58 (comment))\n\ud83d\ude15 . ",
    "michaelweidmann": "@ramya-rao-a Thanks for your response.\nI updated the Go extension but the issue still persists. Here are the logs:\nAPI server listening at: 127.0.0.1:11830\ntime=\"2019-03-12T13:48:05+01:00\" level=info msg=\"launching process with args: [Y:\\\\SCM\\\\Go\\\\src\\\\test\\\\debug]\" layer=debugger\ntime=\"2019-03-12T13:48:06+01:00\" level=info msg=\"created breakpoint: &api.Breakpoint{ID:1, Name:\\\"\\\", Addr:0x4a81d4, File:\\\"Y:/SCM/Go/src/test/main.go\\\", Line:6, FunctionName:\\\"main.main\\\", Cond:\\\"\\\", Tracepoint:false, TraceReturn:false, Goroutine:false, Stacktrace:0, Variables:[]string(nil), LoadArgs:(*api.LoadConfig)(0xc000142db0), LoadLocals:(*api.LoadConfig)(0xc000142de0), HitCount:map[string]uint64{}, TotalHitCount:0x0}\" layer=debugger\ntime=\"2019-03-12T13:48:06+01:00\" level=debug msg=continuing layer=debugger\ntime=\"2019-03-12T13:48:17+01:00\" level=debug msg=continuing layer=debugger\nHello World\ntime=\"2019-03-12T13:48:17+01:00\" level=debug msg=halting layer=debugger\nIn the evening I will try to debug the extension and hopefully find something which helps to solve the problem. \ud83d\ude05. ",
    "ark3": "Yikes. I was bitten by this as well. I followed the instructions here and discovered that formatting stopped updating imports. . ",
    "kmccmk9": "@ramya-rao-a Hi, my declaration of the variable should also return a non vet linter. If you're suggesting that the vet linter takes precedence over the others and will hide the other problems; I can modify the code so it is just a non vet linter.. > \n\n\nIf you're suggesting that the vet linter takes precedence over the others and will hide the other problems...\n\nActually, the results from go build takes precedence over linter and go vet results. The idea being that if you have a build error, you should probably fix that first before anything else.\n\nAh, ok that makes sense actually. I was able to get correct expected behavior now as you suggested. I'm going to double check the documentation on this extension and see if I just missed that detail (although logically it makes sense). If I find a place in the documentation that is open source and I find a way to improve it so that this question isn't repeated in the future, I will make a separate pull request for that. Thank you again.. ",
    "xujintao": "@ramya-rao-a \nYes, it tips normally in non module mode.. module\n\nnon-module\n\n. ",
    "SetTrend": "Thanks so much, @OneOfOne, for this valuable information! \u2764\ufe0f \ud83d\udc4d . ",
    "jpincas": "Good to know someone else has experienced it - it's really making work hard.  As you start typing, you can see the linting and suggestions start to slow down to a crawl until they end up not working at all until the CPU has recovered!!. Thanks Ramya - have installed the beta version and added those settings.  Will report back after a days work.. OK, I can already report that it is constantly asking me install the latest version of gocode, even though I have done so twice.. OK, I can already report that it is constantly asking me install the latest version of gocode, even though I have done so twice.. @tj Did you also add the \"--exclude-docs\" option to your config as suggested by @ramya-rao-a above? That seems to solve it, but of course it disables the intelligent autocomplete, which makes writing code suck!!\n@ramya-rao-a Is there any timeline for a proper fix on this?. Sorry for the dumb question - but when we talk about 'showing the docs', are we talking about the intelligent completion suggestions, or something else?. The -exclude-docs tag is no longer having any effect for me.  The docs are showing and the CPU is on fire.  I'm on version 0.9.2 - does that version recognise that tag? I thought I read on the Beta download page that auto-updating is disabled once you're on the Beta - so I'm not actually sure how I ended up on 0.9.2.. Even whilst doing nothing, go-langserver is eating my CPU.\n\n. ",
    "snikch": "I've been battling this same problem for the last 6 months or so.\n@ramya-rao-a I can confirm excluding docs has worked for me, although there's the obvious drawbacks.\nThe node modules things has affected a whole lot of Go tools over the years. I even complained about it in 2016 for goimports https://twitter.com/snikchnz/status/749895907777269760\nIt would be great to have the tools ignoring node_modules but in the meantime skipping the doc generation will have to do \ud83d\udc4d. Thanks for looking into it.. ",
    "virmundi": "I followed the recommended documentation. I reinstalled all of the tools available. Autocomplete now works.\nIs it common for those tools to stop working with a VS upgrade?. ",
    "jamesgeorge007": "@ramya-rao-a I'm new here. I would like to give it a try :clap: \nAre the changes to be made within getFunctions() method where the current function is being figured out before generateTests() is being invoked.\nCan you provide a better picture regarding what is to be done :+1:\n. @ramya-rao-a I made an attempt to refactor the code based on my assumptions.\nKindly have a look at #2338 and let me know your thoughts :+1: . @ramya-rao-a What do you think?. @ramya-rao-a Is this fine :thinking: . @lloiser I'm not sure if this is the right implementation. Kindly let me know about the required changes to be made further :+1: . @lloiser Hope it's fine now :thinking: . @ramya-rao-a I shall take this up :clap: . Is this the part where go.toolsGopath is being set :thinking: \nhttps://github.com/Microsoft/vscode-go/blob/f8ade313922852b4346c699f7212974fbe44278e/src/goInstallTools.ts#L306. @ramya-rao-a What I can find is a goRunTime variable which holds the path to go binary. \n\nHere is where we should unset the GOBIN (if go.toolsGopath is set)\n\nI'm not that sure on unsetting GOBIN as mentioned above. Am I required to work with the goRunTime variable within the if block where go.toolsGoPath is being set :thinking: . @ramya-rao-a What do you suggest?. @ramya-rao-a Well not really!\nThere were some sort of issues with my local environment and couldn't make to it :confused:\nIsn't this the exact position where you intended to unset GOBIN :thinking:  . @ramya-rao-a It doesn't seem to recognise vscode package despite running npm install while trying to set it up locally.\nAlso, why is the build failing?. @ramya-rao-a It doesn't seem to exist in my case :thinking: \n\nWhat I can see is a thenable.d.ts file. > Pardon me for not making it clear\n\nvscode directory seem to exist, while vscode.d.ts file doesn't!. @ramya-rao Somehow got it right after trying out the postinstall script :+1: \n\nCurrently all these sort of errors pops up :-\n\n\n. @lloiser I'm not sure how do you intend to invokeisModSupportedas per the above mentioned case.\nDo you mean something like checking for whetherformatToolisgoimports` and invoking the method appropriately :thinking: \njs\nif (formatTool === 'goimports') {\n //\n}\nI'm not familiar with the codebase as mentioned before. Kindly suggest the required changes :smile: . @ramya-rao-a Is this the way of implementation that you intended :thinking: . :+1:. :+1: . ",
    "Guitarbum722": "I tried a couple of other scenarios that should probably be taken into consideration for this.\nAs mentioned, the receiver type can be prepended to the function's name in the regexp passed to gotests.  However, it would be converted with strings.Title().\nSo if the receiver type is camel-cased with more than just the first char as upper (eg. type FooBar struct...) then gotests would change it to Foobar, and the desired type name prepended in the argument to gotests would not match.\nSo, I would think the Go Extension would need to do the same thing to normalize the regexp passed to gotests.\n. ",
    "open-source-explorer": "@ramya-rao-a I'm a newbie here. I didn't get it really what you meant by the receiver here.\nEverything is to be done with funcName variable ?. Is this the code-part to be considered within the getFunctions method:-\nhttps://github.com/Microsoft/vscode-go/blob/9631a26af65876b9fa96da8340fa869bccbcf84a/src/goGenerateTests.ts#L105. @ramya-rao-a I'm not sure on how to retrieve the receiver type in this context :thinking: \nAs per what I see currentFunction is an object with couple of properties, name being one.\nWhat is to be done inorder to fetch the receiver information?. @ramya-rao-a I can't find any isModSupported method within the goFormat.ts file. . ",
    "fpsqdb": "@ramya-rao-a works now, thanks.. @ramya-rao-a with the workaround. ",
    "clor09": "hi, is there any plan to fix this?~  @ramya-rao-a . ",
    "allanbomsft": "Sorry for the dupe. I missed it because I had only searched in currently open issues.. ",
    "garethjensen": "\nDo you have the langserver set?\n\nI do not. I tried setting the language server's experimental \"format\" setting to false, but that didn't resolve the problem either, so I reset my configuration. Here are my current workspace settings:\n{\n    \"go.formatTool\": \"gofmt\",\n    \"[go]\":  {\n        \"editor.insertSpaces\": true,\n        \"editor.formatOnSave\": false,\n    }\n}\nSorry, I realize I should have included that from the beginning. . So, I reinstalled everything and now it works with that same configuration above. I suppose that was the solution. Thanks for your time, love the extension.. ",
    "stevvooe": "This still isn't working. I've tried a whole bunch of different configurations, including the suggestion above. It seems to work on simple imports but when there are few different possibilities, it just does nothing. Running the goimports tool in the CLI works find and inserts the correct import.\nMy configuration is as follows:\n{\n    \"go.installDependenciesWhenBuilding\": false,\n    \"go.formatTool\": \"goimports\",\n    \"go.inferGopath\": true,\n    \"editor.formatOnSave\": true,\n}\nI'm using a regular GOPATH setup, without modules. I'm using vscode 1.31.1 on Mac OS X. The extension is version 0.9.2. I run it from the directory root, but it works fine either way. I suspect something is wrong with how the tool is being called. Is there a way to print the command that is being run, like some debug mode?. It also seems to happen when there are multiple imports to add. I'll see if I can get a minimal example, but it would be easier if I could just see what command is being run, as I suspect its not formed correctly.. ",
    "taseri": "This PR is to fix the unit test problem raised in #2311. As a result of this change, people working on the extension project may want to clean the output directory on their dev box after pulling the change from upstream (because the tsc build scripts are not cleaning this directory before compiling).. The PR #2310 is to fix this issue. Note, people working on the extension project may need to clean the old utils.test.js file out of the out/test/unit folder to get a green unit test run.. ",
    "elgatito": "@ramya-rao-a \n\nI am not well versed with how CGO or swig works\n\nIt's just a simple go build ... command that calls swig+CC to build C code.\n\nSo this is when you are editing non go files?\n\nNo, it happens when I edit Go code, which imports package, which is not yet compiled with Swig/CC.\nSo when I edit Go files in package A, which imports package B (which has cgo), vscode is starting many go build for package B (well, it probably runs go build for package A, while it's chaining build for package B, but anyway), and they are starting compilers.\n. ",
    "ksckaan": "++\n0.8.0 and above versions give this error\nAt now, install another version of go-extension. ",
    "aschade92": "Cool yeah that worked for me. Is there any way to apply this settings in the workspace settings so that it can be used for running tests? (ie pressing the test or debug button above a test?)\n\nCan you point us to some docs or discussion around this?\n\nHere are a couple that discuss this issue but I don't think that's super important for the purposes of the thread anymore:\n\nhttps://groups.google.com/d/msg/golang-nuts/g_zHm1E3sIs/AIjeUPihuvwJ\nhttps://dave.cheney.net/2017/06/11/go-without-package-scoped-variables. @ramya-rao-a easy enough, I made a PR for this one. https://github.com/Microsoft/vscode-go/issues/2323. @ramya-rao-a updated. @ramya-rao-a sounds good, thanks for reviewing!. \n",
    "shynome": "\nI have added this setting \"go.useLanguageServer\": true\nGo: Build current Package the command seem is helpful, but I'm not sure , because vscode notice me go.mod changed, rebuild module , and then the tips have worked. \n\nthe rebuild progress sometimes spend too much time, enough to make me think it stuck and want restart it, I can't find a way to restart language server , so I have to run commad reload the window to restart it\n. @ramya-rao-a  it like this \njsonc\n{\n    \"go.useLanguageServer\": true,\n    \"go.alternateTools\": {\n        \"go-langserver\": \"bingo\"\n    },\n    \"go.languageServerFlags\": [\"--format-style\", \"goimports\"],\n    \"go.languageServerExperimentalFeatures\": {\n        \"format\": true,\n        \"autoComplete\": true\n    },\n}. if use anthor language server also need a command to restart language server, so this is not about bingo or others language server.\n. Thank's your reply. \nI will log an issue to bingo . ",
    "wmh": "Yes, I'm using Go modules. \nSample code:\n```go\npackage main\nimport \"fmt\"\nfunc main() {\n    print()\n}\nfunc print() {\n    fmt.Println(\"Hello\")\n}\n```\nCan't go to definition of print() on version 0.9.0+\nError message from Extension Host:\n[exthost] [error] [ms-vscode.Go] provider FAILED\n[exthost] [error] Command failed: /workspaces/go/bin/godef -t -i -f /workspaces/go/src/tmp/test-godef/main.go -o 46\ngodef: There must be at least one package that contains the file\nUpdate godef:\n```\nInstalling 1 tool at /workspaces/go/bin\n  godef\nInstalling github.com/rogpeppe/godef SUCCEEDED\nAll tools successfully installed. You're ready to Go :).\n``\nSame error still shown after update godef../workspaces/gois a symbolic link folder that cause the problem. I add the original folder to my workspace andgodef` works again with the same file.. In VS Code:\n1. the go to definition works in the original folder, but not in sym link folder.\n2. And older version of the extension (0.8.0) works in sym link folders.\nIn termianl, running /workspaces/go/bin/godef -t -f /workspaces/go/src/tmp/test-godef/main.go -o 46 gives the correct result:\n/workspaces/go/src/tmp/test-godef/main.go:9:6\nprint func()\n. ",
    "jayel-87": "Works on version 0.8.0. Going back to this version meanwhile.. It's a folder:\n=> /usr/local/go version\n-bash: /usr/local/go: is a directory. It was already set up:\nexport GOPATH=\"/Users/jayel/go\"\n    export GOBIN=\"/usr/local/go/bin\"\n    PATH=$PATH:$GOPATH:$GOBIN\n    export PATH\n=> go env\nGOARCH=\"amd64\"\nGOBIN=\"/usr/local/go/bin\"\nGOCACHE=\"/Users/jayel/Library/Caches/go-build\"\nGOEXE=\"\"\nGOFLAGS=\"\"\nGOHOSTARCH=\"amd64\"\nGOHOSTOS=\"darwin\"\nGOOS=\"darwin\"\nGOPATH=\"/Users/jayel/go\"\nGOPROXY=\"\"\nGORACE=\"\"\nGOROOT=\"/usr/local/go\"\nGOTMPDIR=\"\"\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\nGCCGO=\"gccgo\"\nCC=\"clang\"\nCXX=\"clang++\"\nCGO_ENABLED=\"1\"\nGOMOD=\"\"\nCGO_CFLAGS=\"-g -O2\"\nCGO_CPPFLAGS=\"\"\nCGO_CXXFLAGS=\"-g -O2\"\nCGO_FFLAGS=\"-g -O2\"\nCGO_LDFLAGS=\"-g -O2\"\nPKG_CONFIG=\"pkg-config\"\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/bh/734372_j3y1f_8yfbv36pzz40000gn/T/go-build634270499=/tmp/go-build -gno-record-gcc-switches -fno-common\"\nI don't know why it's missing in my first message.. Same result even with GOBIN unset.. Thanks @ramya-rao-a, 0.9.3-beta.1 works like a charm. I confirm /usr/local is in my PATH env variable.. ",
    "lloiser": "https://golang.org/doc/install#tarball\n\nAdd /usr/local/go/bin to the PATH environment variable. You can do this by adding this line to your /etc/profile (for a system-wide installation) or $HOME/.profile:\nexport PATH=$PATH:/usr/local/go/bin. https://golang.org/cmd/go/#hdr-Environment_variables\n\nGOBIN\nThe directory where 'go install' will install a command.\n\nPls unset GOBIN.\nIt tries to install all those helper tools required by vscode-go into your GOROOT but actually they should go in your GOPATH.. I'm facing this problem also from time to time using goimports\nThe developer tools shows this:\nlog.ts:167  WARN Aborted format on save after 1000ms\nconsole.ts:134 [Extension Host] Formatting took too long(2718ms). Format On Save feature could be aborted.\nThe Log (window) output shows:\n[2019-02-19 15:06:24.129] [renderer1] [warning] Aborted format on save after 1000ms\nWhen I execute time goimports ... with the arguments that are also provided by vscode-go it takes about 1.59 real   1.22 user   3.54 sys\nNote: manually formatting it using Format Document works.. The snippet file is invalid because there is a comma missing here.. isModSupported returns a promise. Promises continue with the then function asynchronously. Which means that the formatTool variable will be updated after the runFormatter (see a few lines below) function has been called. So it probably does not what you wanted it to do :)\nYou have two options now: \n move all the code after the catch (so starting with the // We ignore ... up to the return this.runFormatter(...) into the then function here\n or use async/await to wait for the promise to be done and continues with the rest of the code. you have to return here so that the runFormatter inside is properly returned. both the issue and the description of your pull request say:\n\nuse goimports if user's choice is goreturns in module mode\n\nBut this will effectivly overwrite formatTool also if the value is gofmt.\nIt's also unnecessary to call isModSupported if the formatTool is already goimports.. remove this because getFormatTool does this.. return this.getFormatTool.... ",
    "aeikenberry": "Having this same issue. Reverting back to the previous version fixes it.. ",
    "seventy-two": "@ramya-rao-a I've experienced this issue and can confirm that the latest beta version 0.9.3-beta.1 has resolved it.. @ramya-rao-a /usr/local/bin:~/go/bin:/usr/local/go/bin , not /usr/local but I guess it applies. ",
    "SumitMeh": "using alias for package and then using it solved the issue.. ",
    "dnldd": "Hmm, goreturns is somehow working now.\n\nYes, I'm using modules.\nFormatting was an issue on save and via right-clicking and selecting \"Format document\".\nYes, I have editor.formatOnSave set to true in my settings.json.\nI was not able to test this bit out before it started working again.. \n",
    "elvizlai": "@ramya-rao-a  YES, I set export GOBIN=$GOPATH/bin in my zsh config\n$ go env GOBIN\n/Users/elvizlai/.godeps/bin\nHow about change all using go build instead of go install\nI found vscode always repeat appending PATH, which is really annoying.. @ramya-rao-a \nUsing CMD env in vscode terminal output:\n```\nPATH=/Applications/Julia.app/Contents/Resources/julia/bin:/Users/elvizlai/.cargo/bin:/Users/elvizlai/.godeps/bin:/Users/elvizlai/.cargo/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Julia.app/Contents/Resources/julia/bin:/Users/elvizlai/.cargo/bin:/Users/elvizlai/.godeps/bin:/Users/elvizlai/Library/Flutter/bin:/Users/elvizlai/Library/Flutter/bin\nThe PATH is repeated. but I only set some of them in ~/.zshrc once.\n```. ",
    "marco-m": "Same for me on macOS. To get it back to work it is enough, at least for me, to restart VSCode.. Thanks for chiming in @ramya-rao-a . I understand this is a though one to repro for you.. I am not using the language server at all.. ",
    "tatecapone": "In my case, the missing packages are not imported nor the code is formatted, when saving the file.. > Those who see formatting issues, try the below\n\n\nChange the go.formatTool to either gofmt or goimports\nIncrease the editor.formatOnSaveTimeout setting if the logs show error about formatting taking too long\n\nTo see the logs View -> Output -> Logs (Extension Host) in the dropdown on the top right corner of the panel\n\nI have followed your suggestion ramya, I will tell you if the problem has been solved. Thank you!. ",
    "Keleir": "View -> Output -> Logs (Extension Host) indicates that vscode-go extension starts failed: \n[2019-03-05 17:40:17.227] [exthost] [info] ExtensionService#_doActivateExtension ms-vscode.Go {\"startup\":false, \"activationEvent\":\"onLanguage:go\"}\nMy vscode setting for golang is: \n\"go.formatTool\": \"goimports\",\n\"editor.formatOnSave\": true,\nMeanwhile, When I use vim to edit the *.go file it works well and also auto import and fmt on save.\nMy .vimrc config is like this:\nbash\n\" Golang Plugin\nPlugin 'fatih/vim-go'\nlet g:go_fmt_command = \"goimports\"\nlet g:go_highlight_fields = 1\nlet g:go_highlight_functions = 1\n\"let g:go_metalinter_autosave = 1\nlet g:syntastic_go_checkers = ['go', 'golint', 'errcheck']\nau BufRead,BufNewFile *.go set filetype=go\nvscode version:  1.31.1\nvscode-go version:  0.9.2\nos version: MacOS Mojave 10.14.3. I pretty sure that the current version 0.9.2 leads to this issue, when I downgrade to the version 0.9.1 everything works well for me, such as fmt, lint and auto complete. \n\n. ",
    "calebdoxsey": "Here's the PR in the atom repo: https://github.com/atom/language-go/pull/156. I think that's for the special pseudo version: https://tip.golang.org/cmd/go/#hdr-Pseudo_versions. The issue is it only matches pseudo versions: \nv0.0.0-20161113214103-89cd22812c4f\nIt won't match \nv1.2.3\nAt least that's how I read the regex. Is there another one that matches both?. Yep. Good idea.. ",
    "vinhjaxt": "More info:\nvscode-go version: 0.9.2\ngo version: go version go1.11.4 windows/amd64\ndlv version\nDelve Debugger\nVersion: 1.2.0\nBuild: $Id: 068e2451004e95d0b042e5257e34f0f08ce01466 $. Last night, it still works, but, now, I can't watch any variables.\nThank for helping.. Thanks for replying.\nYes, even when debugging hello world, variables does not displayed:\n\n```go\npackage main\nimport \"fmt\"\nfunc main() {\n    var a int\n    a = 2\n    a = 3\nfmt.Println(a)\n\n}\n```\nVSCode version:\n\n. @jhendrixMSFT No, it stills not working now.\nFor more information:\nI am using Windows 7 64bit with VScode Portable version\nI updated everythings. But still not work.\nBut now, it worked:\nI define ENV GOROOT, everythings work :v\nThank @jhendrixMSFT @ramya-rao-a @lggomez for supporting me.. ",
    "zgramana": "@ramya-rao-a I would expand that to a list of packages contained in all my workspace folders. Another way to think of it is \"just my code.\". @ramya-rao-a good question. In this case, I mean vscode workspace folders.. ",
    "Allenyn": "\nlike this!\nI can see the dependencies by open the go.mod file . But I can't view the source code of dependencies directly.\nSo.  I think vscode-go should add a window to support this.\n thanks. @ramya-rao-a . ",
    "cornfeedhobo": "@stamblerre & @ramya-rao-a Thanks for looking into this and clarifying. ",
    "consititine": "yes ,i am using go mod.\nAs your suggestion, i try to navigate by godef which takes minutes to get an result. \nWhat's more, i don't get an result using the navigation in the editor\uff0cthen it remind me to update my godef.\n. ",
    "Divni": "\nI am not using go modules (note my workaround is using goreturns)\nThe problem happens either on save or when invoking manually. I could swear I've been through these steps, but this morning while trying your suggestion I went in and toggled \"format on save\" on and on and now it appears to be working again. No errors were logged at any time. I'm not sure what went wrong, but it's working again now. Will report back if that changes, but until then it appears my problem is resolved. Thank you!. \n",
    "smallnest": "I have met the same issue and I have configured \"editor.formatOnSave to true.\n\nIf I click the \"Format Document\" on the context menu, the go file can be fotmatted and imports added.\ngo version\ngo version go1.12 darwin/amd64\nvscode-go configuration\n\"go.buildTags\": \"\\\"reuseport quic kcp zookeeper etcd consul ping rudp utp\\\"\",\n    \"go.buildFlags\": [],\n    \"go.lintFlags\": [],\n    \"go.vetFlags\": [],\n    \"go.coverOnSave\": false,\n    \"go.useCodeSnippetsOnFunctionSuggest\": false,\n    \"go.autocompleteUnimportedPackages\": true,\n    \"go.gotoSymbol.includeGoroot\": true,\n    \"go.gotoSymbol.includeImports\": true,\n    \"go.gocodeAutoBuild\": false,\n    \"editor.formatOnSave\": true,\n    \"go.formatTool\": \"goreturns\",\n    \"go.vetOnSave\": \"package\",. The OUTPUT:\n\n. It looks the error is caused by formatOnSaveTimeout #2336 ,\nI have set it to 3000 and imported can be added automatically. \nPlease ignore my comments, thanks.. ",
    "TLKG": "Version \nVSC = 1.31.1 \n\n\n. one more\n\n. ",
    "bketelsen": "did you try deleting your $GOPATH/pkg directory?  Sometimes on upgrades, that's necessary for me.  I built it into my upgrade-go bash script.  It's a stretch.... ",
    "silentred": "@ramya-rao-a #1754 deos not help. This problem has something to do with compiling cache. The cache files are used to be created in a temp dir. Now they are created under the project package, where the testing function file lies.. ",
    "xcaptain": "I didn't find any specification for the env file, according to docker's document https://docs.docker.com/compose/env-file/\n\nLines beginning with # are processed as comments and ignored.\n\nSo I think it's ok we stick with current implementation.. ",
    "kberlinquette": "Thank You :)\nOn Thu, Mar 14, 2019 at 2:00 PM Vlad Barosan notifications@github.com\nwrote:\n\nClosed #2378 https://github.com/Microsoft/vscode-go/issues/2378.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/Microsoft/vscode-go/issues/2378#event-2204485253, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AuUR9whPkSihBDVVJjsI5XgUG04iaRdLks5vWpxXgaJpZM4b08ZH\n.\n. Ok thanks, I was unawear and will keep that in mind. \n",
    "Centny": "@ironcladlou \nagreed,i am using the task system instead.\n. @ironcladlou \nIt is only track PIDs which started by Go:Test, indeed not safed.\nbut ,to track running test which is started by vscode-go plugin is hard for VScode, i think. \nfinally, this features to kill running process is very useful when coding by TDD, it will pull request again.\n. ",
    "pawelkowalak": "I will change n to i, but allowing to change that variable doesn't make sense for benchmark functions as Go chooses value of b.N on its own.. ",
    "derekparker": "The editor should know the host / port it is trying to connect to, would it be possible to simply retry (potentially w/ backoff, or an upper-bound retry time) the connection until the server is running and accepting connections?. ",
    "rikkuness": "It doesn't really even need be a username, the filename could be anything providing it didn't cause a collision with another user.\nI guess a hash based off username would be okay though, saves randomizing the filename and filling up /tmp.\nI'll take another look at it \ud83d\udc4d  . ",
    "x1unix": "The default value should be probably stored as const to avoid magic number problem.. ",
    "katakonst": "Better this way!\nI've commited the change. ",
    "lukebjerring": "suggestion\n        },. "
}