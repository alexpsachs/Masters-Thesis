{
    "andreascreten": "Mm, I have not tested wp-cli on Linux but the error you see is not generated by wp-cli.\nRegarding the 'but nothing happens', are you running the commands on a desktop computer with a browser installed? The command wp home should open this Github repository in your favorite browser.\n. Interesting. Can you try to run open http://github.com? Does that opens the Github homepage?\n. Can you check it's solved in the latest version?\n. Lol, fixed now. It's getting late I guess.\n. How can I make it more clear then (the example).\nThe status subcommand is a good idea, but what does the MU means?\n. I implemented your suggestions. The only thing left is the MU status for a file. Any idea if there is a function to check if a plugin is MU or not?\n. I changed the things you mentioned except for the updated flag. I don't have time to add it now, feel free to dive in to the code and add it yourself.\nBecause of the simplicity of the framework it's really easy to add and modify the commands, that's why I can work so fast.\n. Did your last commit solved this issue?\n. The script can now be called from anywhere in the filesystem. So if you make an alias with the right pointer it should work from out of the box. The script looks for the wp-load.php file in the pwd, if it's there it's trying to open it.\nI don't know how packages are installed on Linux (I guess trough apt-get or yum), but on Mac we have Homebrew. Maybe we just need to make packages for those so that people can easily install wp-cli.\n. My IDE is adding those automatically, I removed them from the method command blocks but kept them for the classes. This allows people to ask questions to the person who created the class, even if they don't know how to use git.\n. I'm sure it's also possible on Mac, but I have nu clue how to do it.\n. Those are for zsh, the non default Mac shell. I prefer to go with the build in shell.\n. I wrote a very basic implementation. But I'm afraid we have to do it dynamically somehow, because people will add commands from within their plugins.\n. On Mac it is working as expected (and totally kicking ass).\n. I have issued a pull request to get it included in Homebrew.\nYou should be able to install wp-cli by running brew install wp-cli once merged.\n. I issued a new, updated, pull request. Still waiting for someone to do the apt-get package.\n. Maybe we should also introduce a core folder or something like that. It would include all the files that make wp-cli. And a library folder for the 3th party things we are using.\n. My pull request for Homebrew is still pending, they are a bit slow I guess because of the number of pull requests they get a day. I have a new Formula ready which I will submit as soon as the original one is approved.\n. Btw, can we move the build-deb file out of the bin directory? (It conflicts with the Homebrew install)\n. Yeah, core would be for the .php files, but I suggest to keep the commands folder in the root.\n. On Mac you can now install wp-cli by running brew install wp-cli. It's still installing version 0.1 but I issued a pull request to push it to version 0.2.\n. My updated to Homebrew was merged a couple hours ago so it should be working great now.\n. You also removed the list of commands?\n. The right directory for the bin files on Mac is /usr/local/bin, maybe we need to mention that as well.\n. New output format:\nPlugin wp-super-cache details:\n    Name: WP Super Cache\n    Active: Yes\n    Version: 0.9.9.9\n    Description: Very fast caching plugin for WordPress.\n    Author: Donncha O Caoimh\n. It's not completely done yet, right? Because it's not giving any feedback to the user (from our code). \nOn of the big issues with bringing WordPress to the command line arises here: the switch_theme function is not returning a state and might be echo-ing output directly. This is very annoying and we might need to think about a proper way to solve it or to rewrite certain functions in WordPress to have a better programming interface.\n. Ok, cool Had a lot of troubles with this when making the core command ;-)\n. Strange, because the lookup script is the one used by Drupal's Drush project.\n. LOL\n. Funny, discussed this feature with a colleague over lunch today. It's not that hard to implement it but it brings a bit out of the initial scope of the project. This would require the loading and detection of Wordpress to be done later in the code or to make an exception for it.\nWhat do you guys suggest? Just implement it in pure php or do a wget call from the exec() function?\n. I have also updated the wiki List of internal commands\n. Maybe we should create a Markdown file for each plugin, explaining it's functionality with examples.\n. Would they have the same functionality as the plugin command sub-commands? I never install themes from wordpress.org so that's why I didn't included it :-D.\nWe might also want to support installs from urls instead of using the WordPress slug.\n. > We might also want to support installs from urls instead of using the WordPress slug.\nYep\n. K, maybe just scrap that ;-) I mean, they can just place it in the plugins directory and unzip it.\n. I think it's is currently not in progress. So work on this would be highly appreciated!\n. Can you make this command a sub command of the core command?\n. This looks like an issue with you php ini file, this is not related to wp-cli itself. Can you check if you have the xcache.var_size in your ini file?\n. What happens if you increase the size of the cache?\nOp 10-okt.-2011 om 17:47 heeft NodeSocketreply@reply.github.com het volgende geschreven:\n\nxcache.var_size is indeed set.\n```\n[xcache-common]\nextension = xcache.so\n[xcache.admin]\nxcache.admin.enable_auth = Off\n//xcache.admin.user = \"admin\"\n//xcache.admin.pass = \"\"\n[xcache]\nxcache.shm_scheme =        \"mmap\"\nxcache.size  =              100M\nxcache.count =              4\nxcache.slots =              16K\nxcache.ttl   =              0\nxcache.gc_interval =        0\nxcache.var_size  =          16M\nxcache.var_count =          4 \nxcache.var_slots =          8K\nxcache.var_ttl   =          0\nxcache.var_maxttl   =       0\nxcache.var_gc_interval =    3600\nxcache.test =               Off\nxcache.readonly_protection = Off\nxcache.mmap_path =    \"/dev/zero\"\nxcache.coredump_directory =   \"\"\nxcache.cacher =               On\nxcache.stat   =                 On\nxcache.optimizer =           Off\n[xcache.coverager]\nxcache.coverager =          Off\nxcache.coveragedump_directory = \"\"\n```\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/andreascreten/wp-cli/issues/32#issuecomment-2348743\n. I see you are including the wp-config, it should be included by wp-cli by default. Please also read the guidelines on naming in our Wiki, your class name should be SqlCommand instead of Sql.\n. I'm pro the new nomenclature.\n. Thanks a lot for your contribution.\n\nWe discussed adding an install command to wp-cli a while ago (#21) and agreed that it was out of the scope of the project. However the install feature you build fits in the scope in my opinion.\nCan you add it to the core command instead of adding a new command? So we would have wp core install, we already have wp core update there so I think it is the right place. Maybe you can add the is_installed code as a flag on the wp core install function (eg wp core install --check).\n. Maybe we can make a method wp core status that shows the is_installed information? That would enable us to use that function to display other similar information in the future.\n. Yeah I know, we could add the info there as well, true. But version is something different as status imho.\n. File import is implemented in #75. Do we need STDIN import?\n. A pull request was created: #57.\n. Any update on this?\n. Are you trying to do something with the pomo (language) files?\n. But are they related to wp-cli?\n. This might be related to the issue in #73.\n. Are you running PHP version 5.3 or greater? We are using namespaces so any version earlier as 5.3 will not work. I will update the README with this requirement.\n. There is no way to use it with any PHP version below 5.3 (because we use namespaces).\nI'm sorry!\n. Do you mean suppress anything except the WP_CLI:error() messages?\n. I think it's quite hard to suppress the output from WordPress, but at least the output from wp-cli is suppressed now.\n. This can easily be fixed by adding the path to your MAMP php exec to the src/bin/wp file on line 71. In my case I added /Applications/MAMP/bin/php/php5.3.6/bin/php and now it works fine. It's a pitty that MAMP changes the location of the exec with each update but I guess we need to live with that.\n. Do you still have this issue?\n. Is it a WordPress Network install?\n. Can you give some examples of what kind of things you want to do?\n. I just pushed an update that fixes this issue, see cb300c73addfa2452b33469cc320b89f6b6954c4\n. This is fixed in #189\n. I did some tests with WP Super Cache and WP-CLI and for me everything works great. Can you send us some screenshots of your WP Super Cache settings?\n. Nice! Thanks.\n. You can now use --dir instead of --path.\n. Any suggestions for the skeleton to use? I'm not a huge fan of the idea of starting from a bootstrap for anything else than tests.\n. Maybe we can do wp plugin generate plugin-name, which creates the following file structure:\n- plugins/\n  - plugin-name/\n    - plugin-name.php\n    - tests/\nThe plugin file would already contain the right file header so the plugin appears on the plugin list in WordPress.\n. Thanks for looping me in here. I am happy we are having this discussion.\nIn my opinion it makes sense we set up some kind of a legal structure that can accept donations / payments for subscriptions for WP-CLI. The money that comes in in the organisation can than be used to invest into the further development of WP-CLI or building the community around it.\nThe question is off course is if it is acceptable to pay a certain person for their contributions as other persons would contribute without any compensation. I think it does make sense to pay 2-3 maintainers on a per month basis for their contribution (fixed fee). Their tasks could include answering issues, reviewing pull requests and doing maintenance work/cleaning up. Like Daniel says he does not mind donating ~5 hours/week to WP-CLI, those hours could be considered extra, uncompensated and used for new developments.\nBesides that there is an other big job to be done in such an organisation: marketing. I think we need to improve on this side so that everyone knows what WP-CLI is, why they should use it and how they can contribute. We could hire someone to do some design work (fancy cheat sheet, presentation), maybe even make a real logo. An other thing we should be doing more, is reaching out to plugin developers to write commands for WP-CLI.\nAs a business owner I can confirm that our accountant does not like the word donation. As suggested earlier in the thread I think the organisation should give companies the option to buy a subscription. It needs to be very clear to a company why they should do it, and there should be different pricing options. When I take a look at the pledges for the kickstarter campaign Daniel did I think there clearly are some companies that are willing to support this kind of model (even without getting anything in return like we did).\nI would be very happy to support at setting up a legal structure. An other option is to do it through one of my companies and to be very transparent about the ins and outs. This might be a good solution on the short term as setting up a legal structure can be quite a hassle (we also need to decide where we do it).\nIt might be a good idea to organise a call about this with those interested?\nAt the end the goal is to become a stable platform, that can be trusted by anyone for continuity and stability.\n. > (off topic: ditto for the REST API or any other valuable infrastructural projects that are excluded from core for one reason or another.)\nYou make a good point there, is there an option to get WP-CLI into the core? That sounds like the best option to me off course, or is that unrealistic?\n. Will try to do the Dutch this week.\n. ",
    "scribu": "Yes, I have Firefox 7 running as I'm typing that command.\nAnyway, it's not a high priority. Just wanted to let you know.\n. I get Couldn't get a file descriptor referring to the console again.\nI don't think 'open' is the correct command to use on Linux. It's an alias for openvt.\nx-www-browser http://github.com works as expected.\n. Yep, the command works, but the URL is wrong: http://github.comandreascreten/\n. Working perfectly now. Thanks. :)\n. An added benefit would be that you would learn what <plugin-name> means. It's not really clear from the usage example.\n. I see there's a wp theme list command. IMO, this should be renamed to wp theme status and have output similar to what I described above.\nAlso, I think we should settle on singular command names: wp plugin wp theme etc.\n. > How can I make it more clear then (the example).\nI guess just give an actual example, using 'hello-dolly' instead of <plugin-name>.\nAnd I don't mean in the README, but when calling wp plugins help.\n\nThe status subcommand is a good idea, but what does the MU means?\n\nhttp://hakre.wordpress.com/2010/05/01/must-use-and-drop-ins-plugins/\n. That was fast. MU plugins are stored in wp-content/mu-plugins. You can use get_mu_plugins();\n. I noticed that wp theme status lists the raw theme name. I think wp plugin status should do the same, so that you can use that name in a follow-up command: wp plugin activate some-plugin.\n. Also, a you could replace 'NA' with 'N' and 'MU' with 'M' and add an extra column for updates:\nI  akismet\nUN  proper-network-activation\nPlugins (or themes) that have an update available would get the extra 'U' to their status. The 'U' could be colored in yellow.\n. Nice, except the MU plugins show up like this:\nM .\n  M .\n  M .\n  M .\n  M .\n  M .\n  M .\n  M .\n  M .\n  M .\n. Yep. I'm pretty happy with wp plugin status and wp theme status.\n. I guess the reason was that the output looked really similar to git status.\n. A better reason would be that posts, users etc. are data, while plugins and themes are code.\n. A thorny issue would be how to set up the wp command.\nIn Linux, you could make a symlink to /usr/bin/wp. In OS X, it's probably different.\n. Yeah, I always wanted to make a .deb file.\n. This is fixed. Opened a new issue for packaging: #7\n. I see homebrew has a few:\nhttps://github.com/andreascreten/homebrew/blob/master/Library/Contributions/brew_bash_completion.sh\nhttps://github.com/andreascreten/homebrew/blob/master/Library/Contributions/brew_fish_completion.fish\nhttps://github.com/andreascreten/homebrew/blob/master/Library/Contributions/brew_zsh_completion.zsh\n. They're all for zsh? I see one for zsh, one for bash and one for fish.\n. It's better than no completion at all. :)\nYou could re-use the code that generates the list of commands when doing wp help.\n. We now have completions for sub-commands as well.\nThe problem is that now, after a completion, you can't go back and erase the command you wrote. The only thing you can do is type ahead and/or press ENTER.\nIt's obviously related to the invocation of the wp command, but I have no idea how to fix it.\n. It seems to be a problem specific to Ubuntu: http://stackoverflow.com/questions/3701226/bash-completion-prevents-backspace\n. Ok, I think this is good enough for now. If I find a workaround for my Ubuntu problem, I'll just commit it.\n. I moved the bash scripts to the bin directory to make creating the .deb package easier.\nYou'll probably have to re-create your symlinks. Updated readme.\n. So:\nbin/\n  wp\n  wp-cli-completion.bash\nutils\n  build-deb\ncore\n  [all the .php files]\n?\n. Having a single update channel, hosted on github, does sound very appealing.\nI'll give it a try in a separate branch.\n. Yeah, but it only works on Mac. On Ubuntu, I'd still have to set up a ppa on launchpad.com and on Fedora and other Linux distros with yum instead of apt-get, we have nothing.\n. Sure; I just haven't started yet. :P\n. I started working on a pear package here: https://github.com/scribu/wp-cli/tree/pear\nThe channel is here: http://andreascreten.github.com/wp-cli/\nIt's a pain in the ass. To install the completion file, another package is required, just for that:\nhttp://pear.php.net/manual/en/guide.migrating.customroles.defining.php\nhttp://pear.php.net/manual/en/guide.developers.package2.usesrole.php\n. Merged into master: https://github.com/andreascreten/wp-cli\nFollow-up: #39\n. Yeah. I think it would be better if we show them directly when doing wp.\nI'll update the branch to show you what I mean.\n. > The right directory for the bin files on Mac is /usr/local/bin, maybe we need to mention that as well.\nUbuntu also has that dir, but you need sudo to create symlinks in it. Added commit.\n. Continued in #12\n. It would be sweet if there was a progress indicator, for when you want to generate a large number of items.\n. > It's not completely done yet, right? Because it's not giving any feedback to the user (from our code).\nUnlike wp theme status, you don't use wp theme activate to get some information, but to execute a certain task. As such, the command shouldn't output anything, unless something went wrong.\nA good read on this subject: http://www.antoarts.com/designing-command-line-interfaces/\n\nOne of the big issues with bringing WordPress to the command line arises here: the switch_theme function is not returning a state and might be echo-ing output directly.\n\nThis particular function isn't supposed to echo anything. We could use output buffering to catch error notices and send them to STDERR instead of STDOUT, but I don't think it's necessary in this case.\nOne thing that should be checked is if the parent theme exists.\n. If you want to use XML-RPC, just use the client already built into WP.\nIf it's missing a command that you would need, you can write a normal WP plugin for it.\n. After reading this again, I assume you mean to have wp-cli send XML-RPC requests to remote WP instances.\nIf we were going to make that work, we would end up using XML-RPC for local instances too, since there would be no point in having two ways of doing the same thing.\nSo, no, wp-cli won't have an XML-RPC client; we're focusing on local instances.\n. For remote instances, you'll just have to install wp-cli on the remote server, ssh into it and then use wp-cli as usual.\n. It doesn't find it because it looks for php-cli, which is a different package from php5-cgi.\nDo all the commands work as expected using php5-cgi?\n. Drush only supports php-cli and I think for good reason.\nThe deb package also has php5-cli as a dependency now.\n. Thanks, that was a slightly embarassing one. :)\n. > I am just wondering when if you have access to the server you can also create the database.\nI guess it could also attempt to create the database.\n\nMost sweet case is that it also can pre download/install plugins.\n\nYou can just make a bash script with the relevant wp plugin install <plugin-name> calls.\n. I suggest handling as a special case, in bash, if possible. Also, I think work on this should be done in a separate branch, in case it doesn't pan out.\n. To make it a regular command, we could skip the fetching. wp core install would just run the installer routine, expecting the core files to be already present:\n``` bash\n!/bin/bash\nsvn co http://core.svn.wordpress.org/branches/3.2/ wp\ncd wp\nwp core install --blog=example.com --db-name=wp_3_2 --db-user=root --db-pass=pass\n```\n. I don't see why not.\n. I think the equivalent in Drush would be http://drush.ws/help/5#core-quick-drupal\n. I don't see an elegant way of doing this; as Andreas mentioned, it's out of scope.\nAnd automating it is just 3 lines in bash:\n``` sh\ncurl http://wordpress.org/latest.zip > /tmp/wordpress.zip\nunzip /tmp/wordpress.zip\ncp your-stored-config-file.php wordpress/wp-config.php\n```\nClosing.\n. While you're at it, could you re-format the help methods to look like the one for plugin:\nhttps://github.com/andreascreten/wp-cli/blob/master/commands/internals/plugin.php#L318\nPS: You should make pull-requests off of the latest HEAD: https://github.com/andreascreten/wp-cli/network\n. Thanks.\n. Ok, and how would the user get quick access to the appropriate help file?\nIf we're going to include extensive help with wp-cli itself, man pages are the obvious solution (most UNIXy). The only problem is that we have no idea how to set them up. :)\nI'm sure the internet can help with that, though.\n. A drawback of using man pages is that they need to be installed, which would be difficult for commands defined inside plugins.\n. Hm... I guess they could pass the path to the man file like so:\nWP_CLI::add_command( 'my-plugin', 'My_Plugin_Command', '/path/to/my-plugin.3' );\nAlso, I found another Markdown-2-ROFF converter: https://github.com/sunaku/md2man\n. I've started working on this in the docs branch.\nStill need to convert all the files in src/doc to the proper format.\n. Done. If you pull and call wp help <command>, a man page should show up.\nThe only thing that's left is figuring out how to package this up for PEAR.\n. PEAR stuff will be handled in #39\n. Sorry for the mixup. The correct commit is f28bd2951fef413cfcd133609d9eabe9ab57fb75\nYour commit had a syntax error. I ended up not calling parse_name() at all for the install subcommand.\nThanks for reporting.\n. Cherry-picked: 4a70fec820288c48630c41230678b4c0b292e513\nThanks for the fix.\n. Cherry-picked: bb4229024ecf50f30d555888acaa77dc565f8dbd\n. > Would they have the same functionality as the plugin command sub-commands? \nYes, they'd be similar to the plugin subcommands.\n\nWe might also want to support installs from urls instead of using the WordPress slug.\n\nErm... you mean give it a .zip URL and it downloads it?\n. I don't think we should be encouraging that. The WordPress admin, for example, only allows you to upload .zip archives.\nMaybe we should just allow the user to specify a local .zip archive to install.\n. Commands currently in development should be listed here:\nhttps://github.com/andreascreten/wp-cli/wiki/List-of-internal-commands\n(I guess that doesn't work too well for sub-commands)\n. Related: 9cf1c8af7964d0df5a8f0810ffe98a756ff42666\n. Theme install was added in #100. I think we're done here.\n. I think this would make more sense as a subcommand of core:\nwp core version\nwp core version --extra\n. Cherry-picked: 46446f4ddbfa185dce449a283980ef6d2f7479d5\n. No response. Closing.\n. Pretty nice. I assume you're not the author of the WP Unit plugin, so you would like to add this to wp-cli, as a community command, right?\n. Assuming you already tried to send the improvements to the original WP Unit authors, I suggest you set up a repository here on github.\nAlso, have you looked at https://github.com/nb/wordpress-tests ?\n. Ok, feel free to add the command to https://github.com/andreascreten/wp-cli/wiki/List-of-community-commands\n. Very nice. That would be an internal command, actually.\nBe sure to open a pull request when you're done.\n. Yep; thanks.\n. Of course, you would have to call cd - to switch back and be able to use the wp command again.\n. Nevermind, it wouldn't work, since cd would be called in a child process and not the process of the bash session.\nMore info: http://linux.derkeiler.com/Newsgroups/alt.os.linux/2008-02/msg00270.html\nWe can do wp plugin path instead.\n. So, to change the directory, you can do cd $(wp plugin path hello --directory).\n. We could also fake the status, activate and deactivate subcommands by creating a mu-plugins-disabled directory.\n. Meh... I've implemented what I needed outside of wp-cli pretty easily.\n. --pipe looks interesting.\nI do not agree with wp option get user outputing all variables that start with 'user'.\nThe right way to do it would be by using a wildcard: wp option get user*.\n. Actually, whenever an option is an array or an object, it should be outputed using var_export() by default. You shouldn't even need the --pipe flag.\n. So, to list all option names, I would go with wp option list, which you can then grep however you want.\nI can't think of a useful format to output both option names and values.\n. I think I'm done here. If someone wants to make a case for wp option list, please open a new issue or pull request.\n. It seems a post-install script would also do the trick:\nhttp://pear.php.net/manual/en/guide.migrating.postinstall.php\nhttp://stackoverflow.com/questions/8024435/install-completion-file-via-pear/8035331\n. We should stick to a single nomenclature:\n- old school: --blog and --site\n- new school: --site and --network\n. Being implemented in #667 \n. That long regex doesn't look good at all, but I'll leave this closed until we find a better solution.\n. I've added a load_wp_config() method, but alas, it probably won't help in this scenario.\n. The code in the gist looks like a good start.\nThe preferred way of collaborating on github is by making a fork and issuing pull requests: http://help.github.com/fork-a-repo/\n. @joehoyle: That looks pretty cool. Care to wrap it up into a pull request?\nNote that we still need a sub-command for leveraging the various importer plugins, i.e. Tott's WordPress-CLI-Importer.\n. You're right, they're very different. Actually, there's no point in including a command into wp-cli that is completely WP-agnostic.\nAlso, when I look at wp import uploads, the only WP-specific call is wp_upload_dir();. Maybe we should just have a wp uploads path command instead.\nSo, cancel that pull request. We should bundle with wp-cli only commands which are very specific to WordPress.\n. > This is also WP-agnostic: https://github.com/andreascreten/wp-cli/blob/master/src/php/wp-cli/commands/internals/sql.php, but I think a lot more useful than an export to XML.\nNot quite. Each subcommand is related to the current WP installlation in some way, whereas the proposed 'wp import db' command could easily be achieved in two steps:\n1. Fetch the remote using scp, rsync etc.\n2. Execute wp sql query < my-dump.sql\nThe only thing that's missing is for wp sql query to accept a query from a file: #55\n. Granted, connecting to the remote MySQL server directly might have certain advantages.\nIn any case, this should be a subcommand of the 'sql' command, so wp sql sync, rather than wp import db.\nSo, please open a new issue/pull request if you want to discuss this further.\n. It seems there are plans to make exporting via CLI easier in Core: http://core.trac.wordpress.org/ticket/19864\n. Didn't get wp import in. Should handle in a separate issue/pull request.\n. Looks good for now.\n. The question is: backup to where?\nCreating a complete backup on the same machine is as easy as:\nmysqldump -D DB_NAME -uDB_USER -pDB_PASS > backup-dir/db.sql\ncp wp/* backup-dir/\n. Cool, then we have that covered.\n. Nah... parsing arguments is pretty easy to do directly in PHP.\n. I saw someone else make the same change: https://github.com/voceconnect/wp-cli/commit/e141dc5066bdf96f04c5f852cff74afc6642d4e6\nThe question is this: Is /etc/bash_completion.d/ the correct directory for bash completion files on OS X?\n. So, you have mysqld running. WordPress works correctly in the browser, but not when using wp-cli?\n. I think the problem is that your php5-fpm config differs from your php-cli config.\nFurthermore, wp-cli looks for a custom ini file to overwrite the default php-cli settings:\nhttps://github.com/andreascreten/wp-cli/blob/v0.3.0/src/bin/wp#L78\n. Note that we already have wp core version.\n. wp core version could just set the status to 1 if WP isn't installed at all.\n. Also note that adding trivial wrappers around functions isn't really necessary:\nwp eval 'exit( (int) ! is_blog_installed() );'\n. The convention related to status codes is to return 0 if there are no errors and something > 0 if there is an error. That's what the negation was for.\n. We can keep 'sql' as an alias, to preserve backwards compatibility.\n. Nah, we can live without it.\n. This would still be handy; the difference from wp db import is that wp db query wouldn't suppress the output.\n. Need to beef up the tests; it's not clear if wp db query should select the WP database or not (I think it should).\n. It would be a lot easier to discuss this if you submitted it as a pull request (ideally from a clean branch, without merges and reverts).\n. I really don't like the YAML dependency. It provides no benefit over native var_export().\nAlso, what exactly does this command do when you set --type=core?\n. Ok, I guess what I'm asking for is a usage example from start to finish (one for Core and one for a plugin), since I doubt that many people will take the time to figure it out on their own.\n. Pull request is now stale but, more importantly, I'm still not sold on the approach.\nIf there's still interest, I think it would be best if this was implemented as a library or a plugin, to get more feedback, before considering bundling it into wp-cli.\n. I've encountered out-of-memory errors too with some installs. I don't think they're related to language files specifically.\n. > But are they related to wp-cli?\nYes, since they don't happen when I use the wp-admin interface.\n. With WP 3.4 coming out any week now, let's just say we don't support WP < 3.3.\n. As Andreas said, there is no way to use it with PHP < 5.3, unless we stop using the php-cli-tools library, which I'm not against. But that's another topic.\n. If you plan on forking and maintaining a PHP 5.2 version of php-cli-tools for your own use, then by all means. We'll gladly switch to it.\nOtherwise, we'll probably just bring in the relevant bits into wp-cli and go from there.\n. The progress bar and the tables are used in wp-cli now. I don't think compatibility with PHP < 5.3 is a good enough reason to stop using it.\nClosing this issue for now.\n. What do you get when calling wp plugin path?\n. If you do cd $(wp plugin path) you should end up in the plugins dir.\n. Please paste the define( 'WP_CONTENT_DIR', ... ); line from your config file.\nAnd also of define( 'WP_PLUGIN_DIR, ... ); if you have it.\n. This has been discussed before: #21\n. It's not exactly \"out of scope\", but it's not exactly \"in scope\" either. Re-opening for futher consideration.\nAlso note that your patch has the version hardcoded (3.3.1). A better way would be to just use the zip that wp.org provides:\ncurl http://wordpress.org/latest.zip > /tmp/wordpress.zip\nunzip /tmp/wordpress.zip ./\n. When calling wp without any parameters, I get a notice: PHP Notice:  Undefined offset: 0 in /home/cristi/git/wp-cli/src/php/wp-cli/wp-cli.php on line 43\nAlso, cli\\line() should be WP_CLI::line().\n. Yes.\n. When installing WP from the browser, if there's no wp-config.php file, WP offers to generate it. So, we should make use of that functionality, if possible.\n. I tried capturing the output from setup-config.php, but ob_start() seems to have no effect. Weird.\n. Similar: #49\n. Does MAMP have any sort of command-line tool or configuration file we could use, instead of guessing around?\n. If anyone finds out, there's now a separate utility for finding the PHP path: #154\nUntil then, you can set the WP_CLI_PHP environment variable, as described in the readme.\n. php5.2? You know you need at least PHP 5.3 to run wp-cli, right?\n. Please run ls /Applications/MAMP/bin/ and paste the results here.\n. Ok, please do a git pull and then run wp --info.\n. It seems that however you're setting WP_CLI_PHP, it's not working. Did you try restarting your shell?\n. You could try setting it temporarily, right before the command:\nWP_CLI_PHP=/Applications/MAMP/bin/php5.3 wp --info\n. I think wp user all should be wp user list, with an optional --role parameter.\n. > I agree, just don't know how to use list as a function name since it's a reserved word.\nYou just name the method _list(): https://github.com/andreascreten/wp-cli/blob/master/src/php/wp-cli/class-wp-cli-command.php#L24\n\nI'll make the role output optional as you suggested.\n\nThe --role parameter would be used to filter which users are shown and not to hide the role column:\nwp user list --role=author would display only the authors etc.\n. Could you describe a scenario where this subcommand would be useful?\n. Also, you're using $args[0] before you know if it exists, which will cause a notice.\nAnd 'reset' is not a reserved word, so function reset() works fine as a method.\n. So why would you do this via wp-cli? Why not create a plugin that does it automatically?\ni.e. whenever a new user is created (either through wp-admin or through wp-cli), stop the email with the plain text password and send the one with the password reset link.\n. When I do wp --blog=mysite.com, I get some notices:\nPHP Notice:  Undefined index: path in /home/cristi/git/wp-cli/src/php/wp-cli/class-wp-cli.php on line 164\nPHP Notice:  Undefined index: path in /home/cristi/git/wp-cli/src/php/wp-cli/class-wp-cli.php on line 165\nPHP Notice:  Undefined index: query in /home/cristi/git/wp-cli/src/php/wp-cli/class-wp-cli.php on line 166\nPlease have WP_DEBUG enabled in your wp-config.php file when working on wp-cli.\n. Nice catch. Looks like we'll just have to use a plain echo.\n. Are you using WP multisite?\n. Try adding define( 'WP_DEBUG', true ); to your single-site wp-config.php file.\n. So the same happens on the multisite install, even when you pass the --blog=yourblog.yourdomain.com parameter?\n. Closing as duplicate of #73 then.\n. On a 32 bit machine, the max heap limit is 4 GB, not 32 MB, even larger on 64 bit machines, so that's not the problem.\nWhat do you get when you run php -r 'echo ini_get(\"memory_limit\") . \"\\n\";' ?\nI get -1 on my 32 bit Ubuntu 10.10 VPS, where wp-cli works fine.\n. What happens if you change it to ini_set('memory_limit', -1); ?\n. Weird. I don't think there's anything we can do about it though, so closing.\n. I was planning on handling this in #55.\nAnyway, I don't think the file name should be an associative parameter. Instead of:\nwp db import --file=my_db.sql\nyou should just be able to write:\nwp db import my_db.sql\n. True. And I guess it's not that obvious that it should be a file name. Could also be the database name. Nevermind.\nOne other thing bugs me: wp db dump should actually be wp db export, to match wp db import, but I guess that's a different issue.\n. Wait wait wait. There are several things here:\n1. Run wp-cli from outside the wp directory\n2. Run wp-cli without WordPress being installed (properly, or at all)\nFor the first thing, that's what aliases are for. In your .bash-aliases or .bashrc file, add:\nalias wp-some-tool='wp-cli eval-file ../../tools/some-tool.php'\nThen just call wp-some-tool\nFor the second thing, see #65 and co.\n. Try adding define( 'WP_DEBUG', true ); to your wp-config.php file.\n. There is no chat or forum and there is no way to pass FTP credentials to wp-cli.\nI guess we just need to force FS_DIRECT somehow, as wp-cli should always have write access, since you're running from a shell.\n. Why use --path for wp core download and --wproot for the rest? Don't they mean the same thing?\n. I think using --path for both is better. Users don't care what constants we use internally.\n. I cherry-picked the relevant commits. Thanks for contributing!\n. wp plugin update --all ?\n. wp plugin update - show the list of available updates\nwp plugin update some-plugin - update a single plugin\nwp plugin update --all - update all plugins\n. Only the updatable plugins, yes. I guess the list can be yellow, for consistency.\n. Yep, looks great. Thanks!\n. Can you access the normal wp-admin in your browser?\n. Seems like php-cli is not configured properly on your server. Check your .ini files.\n. Yes.\n. Thanks. It sucks that it's almost the same as for plugins, but not quite, doesn't it?\n. I'm thinking of moving the common update code into a WP_CLI_Command_With_Updates parent class. Could move WP_CLI::get_update_status() there too.\n. Yeah, I think importing files or whole folders into the media library would be a good start:\nwp media import /some/path/image.jpg /some/path/another.jpg\nRelated plugins:\n- Add From Server\n- Upload Media By Zip\n. That's a good idea. Most of @Viper007Bond's plugin code is actually UI; the actual processing is just a few lines.\n. Well, it's not hard to create a subcommand with a progress bar:\nhttps://github.com/wp-cli/wp-cli/blob/master/src/php/wp-cli/commands/internals/user.php#L175\n;-)\n. It seems @benmay already ported Regenerate Thumbnails to wp-cli: https://github.com/benmay/WP_RegenThumbs_cli\n. We already have wp media regenerate and wp media import is on the way: #367.\nOther subcommands should be considered on a case-by-case basis.\n. I think this is a good start.\n. Not sure what you mean. This works as expected:\nwp> $users = get_users();\nwp> wp_list_pluck( $users, 'user_login' );\n. It's how it works in most REPLs; you'll get used to it. :)\n. One way to suppress the output:\nwp> 1; $users = get_users();\n. irb always prints the result; python doesn't if you assign to a variable. Would be cool if we did it the python way, but PHP's eval() doesn't give us many options.\n. This seems pretty useful. However, it doesn't work, since --version is also a global parameter.\n. Also getting a fatal error:\nPHP Fatal error:  Call to undefined function wp_remote_head() in /home/cristi/git/wp-cli/src/php/wp-cli/commands/internals/core.php on line 31\nwhich makes sense, since WordPress isn't available yet.\n. No problem. Thanks for contributing.\n. Actually, if you have WP_DEBUG turned on, you will get some notices.\nBut yeah, I agree that it should be handled better.\n. Related: #113\n. I guess we're going to have to byte the bullet and roll our own version of wp-settings.php.\nUpdate: It seems we can't even do that, because of the marvel that is wp-config.php:\nphp\nrequire_once(ABSPATH . 'wp-settings.php');\n. It turns out that the situation is even worse for multisite: there's a redirect deep in ms-settings.php.\n. Can't reproduce the multisite bug; calling it fixed for now.\n. Why not just use wp eval-file some-dir/some-file.php ?\n. Yeah, if we were to introduce parameters to eval-file, we would essentially have two ways of writing commands.\nThat said, I don't think a global parameter is the way to go. Maybe we could look for a .wp-cli-config file in the user's home directory, similar to .gitconfig.\n. We could take two approaches:\nA) Make .wp-cli-config a PHP file, which would contain something like this:\nWP_CLI::register_commands_dir( '/my/dir/with/wp-cli/commands/' );\nWP_CLI::register_commands_dir( '/another/dir/with/wp-cli/commands/' );\nThat's the easiest approach, but also the messiest, since we couldn't control what goes in there and what doesn't.\nB) Make .wp-cli-config a YAML file, which would contain something like this:\nextra_command_dir:\n  - /my/dir/with/wp-cli/commands/\n  - /another/dir/with/wp-cli/commands/\n. Wait, don't you have two instances of wp-cli running precisely because you can't specify additional command directories?\nAnd I would think it's cumbersome to have to pass the same parameter over and over, when you need to do multiple commands.\nWe could have a per-project .wp-cli-config file, which has been suggested before: #76\n. What about this:\nwp --bootstrap=/path/command-file.php custom-command --foo=bar\nwhere command-file.php would contain the definition of the command you want to call:\n```\nclass CustomCommand extends WP_CLI_Command {\n  ...\n}\nWP_CLI::addCommand( 'custom-command', 'CustomCommand' );\n``\n. And obviously you could register multiple commands in the same file, or have that filerequire()other files in a dir.\n. I called it--requireinstead of--bootstrap` since it sounded clearer.\n. Thanks for submitting this. May I ask how you plan to use the transient commands?\n. Fixed: 2fc14a258b33856af32db36b4d709824a61b296f\nNo need to open a separate issue if you have a pull request lined up.\n. I cherry-picked 2fc14a258b33856af32db36b4d709824a61b296f. Thanks.\nYou might want to try using a separate branch next time.\n. A lot of people seem to have that problem, so I wrote a little tutorial: http://scribu.net/blog/resetting-your-github-fork.html\n. Core seems to use File_Upload_Upgrader for installing from .zip files.\nNote that wp plugin install doesn't have a --file parameter either, so maybe some of this can go in WP_CLI_Command_With_Upgrade.\n. Nah, forget File_Upload_Upgrader then.\nI found out how WP extracts the theme info in Theme_Installer_Skin::after():\n```\n$theme_info = $this->upgrader->theme_info();\n...\n$stylesheet = $this->upgrader->result['destination_name'];\n```\nhttps://github.com/WordPress/WordPress/blob/3.3.1/wp-admin/includes/class-wp-upgrader.php#L1410-1415\n. This looks pretty good. Merged.\nAs for abstracting it further, I don't have any suggestions off the top of my head. I'll dig in myself and see if something springs up.\n. That's a neat use of positional args...\n. \"Other things\" include:\n- wp core install (related: #115)\n- WP_Query setup\n. Cool. I'm really itching to use it. :)\n. Related: #105\n. I think I found an issue. If you call wp blog create twice with the same slug, it will create two blogs with the same path.\nI'm not sure why this happens, since wpmu_create_blog() calls domain_exists().\n. Cleaning up the 0.6 milestone. Rest of the blog subcommands can be handled in new issues/pull requests.\n. Inspiration: http://blog.smartbear.com/careers/13-things-people-hate-about-your-open-source-docs/\n. We now have a list of all the commands, including all their options: http://wp-cli.org/commands/\nwp-cli/wp-cli.github.com@e8a420bac3ad95069d8c9f7fc31f084cdb5fb251\n. I dunno; http://wp-cli.org/commands/ works fine for me. Also http://wp-cli.org/commands/core/download/\n. Cool; we should definitely do this.\n. Follow-up: https://core.trac.wordpress.org/ticket/20731#comment:2\nGoing to go with #261\n. WP_CLI::warning() was used because it was the most convenient; WP_CLI::error() exits immediately.\nBut yeah, we should aggregate them into a single error message.\n. What about after installing? Can you run all the commands normally?\n. Well, I suppose we could just set the default to 'example.com'.\n. It's required because wp_install() calls wp_guess_url(), which looks at various $_SERVER vars, which need to be set manually by wp-cli, since you're not in a browser.\n. In conclusion, the --url parameter is required.\n. How about instead of update_meta, we use meta set?\nwp user meta set 123 key value\nIt would be more consistent with wp option set key value.\n. You can treat 'set' as just another parameter to the 'meta' sub-command.\nThe alternative would be to introduce a user-meta command:\n```\nwp user-meta set 123 key value\nwp user-meta get 123 key\n```\nIn this case, we could have a helper class which we could reuse for post-meta etc.\n. Even if we implemented sub-sub-commands, we'd still likely need them to be in a separate class, so it's worth having user-meta as a first step.\n. I merged everything except the --url commit.\n. Looks interesting. Perhaps as a subcommand:\nwp db replace \"findMe\" \"replaceMe\" --dry-run\nAnd it should only operate on the WordPress tables, registered in $wpdb.\n. Any progress on this?\n. Which commands do you think JSON output would be useful for? Some specific examples?\n. But most commands only output a status message:\nSuccess: Did that thing that you asked.\nAlso, how would you JSONify multiple messages:\nWarning: Foo\nWarning: Bar\n?\n. All the commands that have the main goal outputting some data have a --json option now, and I think that's a good place to draw the line. Additional requests should be handled on a case-by-case basis, in separate tickets.\n. How about wp db upgrade instead?\n. > they manipulate the database directly rather than going through WordPress\nThat's just an implementation detail and might change in the future. Also: #118\nAnd it just makes more sense than wp core upgrade_database, since there will be no wp plugin upgrade_database etc.\n. On the other hand, this isn't really about the database as a whole; it's related to core upgrades.\n. Maybe this would be more appropriate as a flag: wp core update --db-only\n. Yeah, let's stick to update. If anything, we'd make upgrade an alias.\n. Actually, instead of hacking default-constants.php, you can just define( 'WP_MEMORY_LIMIT, '256M' ) in your wp-config.php file.\nThe question is why is the limit reached only when running wp-cli?\n. We could, but we would still have to figure out why it's necessary.\n. Yes, that makes sense; thanks for explaining it!\nUpdate: Here's the ticket: http://core.trac.wordpress.org/ticket/14889\n. Actually, that fix isn't so good, since it's done before wp-config.php is loaded. Related: #113\n. Here's one more piece of the puzzle: In wp-admin/admin.php, the memory limit is raised:\nif ( current_user_can( 'manage_options' ) )\n    @ini_set( 'memory_limit', apply_filters( 'admin_memory_limit', WP_MAX_MEMORY_LIMIT ) );\nBut wp-cli doesn't load that file and even if it did, the current_user_can() check would fail unless you passed the --user parameter.\n. You should not see any more memory limit errors when using WP 3.5.\n. Do you have the latest wp-cli version installed, via git?\nDid you modify the wp-config.php file in any way after running wp core config?\nWhat parameters do you pass to wp core install?\nWhat happens if you just call wp ?\n. Are you able to run the installer from the browser? If yes, see #66.\n. I have no idea; I'm not on OS X. Also try pulling, to see if 451f13d06bfb3ed3ab2df809f19379d94320f9f2 helps.\n. You can already do that:\nwget https://github.com/retlehs/roots/zipball/master -O roots.zip\nwp theme install roots.zip\nTo receive updates though, you'll need the theme to implement something like https://github.com/jkudish/WordPress-GitHub-Plugin-Updater\n. I do not know.\n. Please paste the exact script you're trying to run (without passwords, of course).\n. If you run each command by hand, do you still not get any errors?\n. Then it means it's a problem with automator. Again, I'm not on OS X, so I can't troubleshoot further.\n. This was the initial discussion: #21\n. It's a bug. I think the best course of action is to make --admin_password mandatory. That way, we avoid having to show the password in plain text.\n. Well, actually, it would still be visible in the shell history, so not much gained in terms of security.\nThe solution would be to prompt for the password, if it's not passed as a parameter, but that's a more general issue. See #129\n. Thanks for sharing your solution.\nNote that the prompt would appear only if you don't pass the password as a parameter, so it's more geared towards live sessions.\n. I looked into this and there doesn't seem to be a php-native way to do it. All methods I've seen involve calling bash or some other external utility. Example: http://www.sitepoint.com/interactive-cli-password-prompt-in-php/\n. Even if we can't hide the characters the user types, it's better than passing passwords as command parameters.\n. Yeah, Symfony Console seems to do the same: https://github.com/symfony/Console/blob/v2.3.1/Helper/DialogHelper.php#L255\n. Here's an alternative approach: just make the input text match the background. Proof of concept:\n``` php\n<?php\n/*\n * Ask for input, but make it hidden.\n /\nfunction ask_hidden( $prompt ) {\n    echo $prompt;\necho \"\\033[30;40m\";  // black text on black background\n$input = fgets( STDIN );\necho \"\\033[0m\";      // reset\n\nreturn rtrim( $input, \"\\n\" );\n\n}\n$pass = ask_hidden( 'pass: ' );\nvar_dump( $pass );\n``\n. If Google can see what's happening inside user's SSH sessions, I think we have bigger problems. :8ball:\n. And which history would that be? It wouldn't show up when you launch thehistory` builtin.\n. So, why would scrollback history be a problem, if the password letters have the same color as the background?\nYes, I know this wouldn't work if ASCII codes are ignored or un-supported.\n. Ah, I see. Thanks for the input.\n. I think we finally have support for hiding passwords when they're entered at the prompt: https://github.com/wp-cli/php-cli-tools/pull/35\n. There is no such command at the moment.\nIf you want a single command, you could write a small bash file and call that. The problem, I'm realizing, would be that you would need to do your own argument parsing, to be able to distribute them to the various low-level commands.\nSo, we already have wp core install which is only for running wp_install(). I think a good name for such a command would be wp setup.\n. Another benefit could be that wp setup could be incremental:\n1. if WP files aren't present, download WP\n2. if there's no wp-config.php, create it\netc.\n. Ok, and do either of you plan to share these scripts, or are you just showing off? :P\n. Quite different approaches; thanks for sharing, guys.\nOne of the aims of wp-cli is to create a solid collection of WordPress specific verbs that can be used to implement more complex workflows.\n. Related: #335\n. Yeah, I don't think this will happen. As with deploys, there are a million different ways to do it and coming up with something that works for everyone is a fool's errand.\nWith the new ability to write custom commands that don't need a WP install, it should be possible for people to implement something like this outside of WP-CLI.\n. Related: #120\n. Have you also read #66?\n. This should be less of a problem since #154\n. So, the goal here is only to avoid flooding wp.org ?\n. I assume the scenario involves having many installs on a server and upgrading them in one go.\nIn general, I think it makes sense to have it as part of wp core update, since the normal upgrade process is geared toward a single install.\n. This is handled in #136\n. If the package is removed after upgrade, won't that mean you'll have to copy it again from somewhere in a batch process?\nIf you explicitly pass a zip file, it should not be removed.\n. Looks good. However, it would be nice if you could pass --version=1.2.3 without having to pass a zip file.\n. The Beta Tester plugin might offer a clue.\n. That's fine; it's how it's done in wp core install.\n. I have a similar setup and wp plugin --path=wp works fine. Are you sure you defined WP_CONTENT_DIR in your wp-config.php file?\n. It worked for me because I used dirname(__FILE__) instead of $_SERVER['DOCUMENT_ROOT'].\n. define('WP_CONTENT_DIR', dirname(__FILE__) . '/../wp-content');\nBut if you pull the latest revision of wp-cli, it should work with DOCUMENT_ROOT too now.\n. Confirmed.\n. The problem is that we pass 'foo' to the upgrader, instead of 'foo/foo.php'.\n. That's fine. mysqlcheck makes perfect sense in a CLI context. Going in.\n. It seems the man page wasn't even created. Thanks!\n. I'm afraid you're going to have to give me more details than that.\nIf they're of a sensitive nature, send me an email: mail @ scribu.net\n. Would it be possible to pipe curl or wget directly to unzip or tar? This would remove the need for the temporary file altogether.\n. I guess I missed that when moving it around. Thanks.\n. Instead of executing each of those steps, we can just import some dummy data, but we need a wp import command first: #44\n. wp import is in: #299 \n. I think a  community command (see #424) would be best, for now.\nYou might not be able to put it in a plugin, since it uses some early commands. See https://github.com/wp-cli/wp-cli/issues/335#issuecomment-19702294\n. Page with more info: https://github.com/wp-cli/wp-cli/wiki/Community-Packages\n. This whole early commands/community packages thing is still new and not well documented yet.\nSo, don't hesitate to ask questions if something is confusing.\n. > What early command makes you feel worried about?\nHm... if you call them from a \"non-early\" command, I guess they're not \"early\" anymore. :) Nevermind.\n. See https://github.com/danielbachhuber/wp-cli-stat-command\nAlso added a section to the wiki page about installing community packages manually: https://github.com/wp-cli/wp-cli/wiki/Community-Packages\n. You're not wrong. The \"stat\" package doesn't work either. See #571\n. > Strange thing is: both $when_to_invoke and $this appears populated correctly. I guess it belongs to the early commands thing but I can't figure it out yet.\nThe problem was that get_runner() returned a null value. Fixed in eaac711c6f3e204c5a59da09ab97e60497c99204.\n. I think you should drop the plugin version. The @when before_wp_load part won't work there.\n. Two things:\n1) The current syntax in your command is:\n- wp test install theme prepares a new WP install for manual theme testing\n- wp test install plugin prepares a plugin for automated unit testing\n- wp test install core prepares the core unit test suite for automated unit testing\nIt breaks one of the well-known rules of interface design: elements that act differently should look differently.\nIt's like a website where all the buttons look like text links. You don't know what to expect.\nI think wp theme-test setup would be a lot clearer.\n2) Inside the theme ~~unit~~ test setup, you call wp db reset --yes. If a user accidentally runs your command on his development instance, his database would be wiped out.\nSo, I think you should either: \na) remove the --yes part from the wp db reset call, which will then prompt the user or\nb) call WP_CLI::confirm() from your own command, before doing anything\n\nLooking forward Travis CI testing but I need to understand how to setup it for this project first.\n\nYou'd basically have to install WP-CLI each time.\n. You could add this to your composer.json file:\nrequire: {\n  'wp-cli/wp-cli': 'dev-master'\n}\nLater, after WP-CLI 1.0 is released, you can change dev-master to >=1.0.\n. I think this functionality is in good hands.\nAll bug reports/suggestions should be directed to the dedicated issue tracker: https://github.com/pixline/wp-cli-theme-test-command/issues\n. What does wp --version say?\n. This is already fixed: 9c6bf7d7\nYou should have tried updating to the latest version before opening the pull request.\n. A fundamental principle of the UNIX CLI is that there isn't any difference between a user calling a script and a script calling a script.\nAre you sure there aren't any spaces in the theme name? If there are, you'll have to do this:\nwp theme activate \"$theme\"\n. Merged, thanks.\nI was going to talk to the W3 EDGE guys to bundle this wp-cli command inside their plugin, but it seems it's more likely to get contributions here.\n. The patch looks good in general, but I'm having a hard time figuring out what role wp-cli plays in this \"WordPress charm\" you mention.\nIs it used behind the scenes to run the various operations of the charm or what?\n. Nevermind, I read the diff you linked to more carefully and that is indeed the case. Merging.\n. This command should have a man page. See /src/doc/ for examples and let me know if you have questions about that.\n. Ok, thanks; didn't notice the 'd'. I think the \" (Memcached PECL extension)\" qualifier doesn't help either.\nIt should just be \"Memcache\" or \"Memcached\".\n. I merged the pull request; thanks for that!\nI removed wp cache switch_to_blog because it's effect isn't persistent, so it wouldn't actually do anything.\nBesides, if you need to operate on a certain blog, you already have the --blog global parameter.\n. We already have wp core update_db.\n. You'll have to install via git for now.\n. Please continue the discussion in #133. Thanks.\n. Woo! The code looks good. Will cherry-pick just the last commit.\nAs an aside, you should really set your email address in your .gitconfig file to match the email used on your github account. That way, you'll have your gravatar show up, you'll get proper attribution on the contributors page etc.\n. Oh, we don't use the static help() method anymore. We have a .txt file for each command in src/docs.\nIf you can take care of writing that txt file, I'll take care of generating the man page.\nJust make an additional commit and push; it will automatically show up here, in the pull request.\n. Yes, you should use a branch next time. :)\nI cherry-picked your two commits. You can see them in the log: https://github.com/wp-cli/wp-cli/commits/master\nTo clean up your master branch, see http://scribu.net/blog/resetting-your-github-fork.html\n. Also, the commits stop being added after the pull request is closed.\n. My pleasure. :)\n. Well, to change the permalink structures, you can just use wp option update rewrite_rules '/%postname%'.\nwp rewrite flush could potentially be handy.\nNot sure about wp rewrite dump: why would having it in the cli be better than using a plugin like Rewrite Rules Inspector?\n. Yeah, the sad part is that there actually isn't an API for updating the permalink structures; you had to copy the code from /wp-admin/options-permalink.php\n. Anyway, I'm sold. Let's discuss specifics in the pull request.\n. Well, we could support arbitrary arguments by passing them through WP_Query and then looping through the returned ids. Pull requests welcome.\n. Related: #181\n. No, --blog works with all commands.\n. Hey, how about using \\cli\\Table for wp rewrite dump?\nAn example can be seen in https://github.com/wp-cli/wp-cli/blob/master/src/php/wp-cli/commands/internals/user.php#L30\n. > commands with tabular output should check to see if the output is direct to STDOUT or is being piped to another function, and adjust the output format accordingly by removing the cell borders if necessary.\nCould you provide an example of one or two well-known commands with tabular output that do this?\n. You're right; if I pipe mysql to cat, the borders are gone:\nbash\nwp db query 'select * from wp_users' | cat\nWe'd need to modify wp-cli/php-cli-tools to get that effect, though.\n. I ended up not merging the \\cli\\Table commit since it looked worse than just tabs. Thanks for contributing!\n. -1: #134\n. Yeah, I also do something similar in scripts:\n``` bash\nwp='wp --path='\n$wp core update\n``\n. Is there a difference between regular MAMP and MAMP Pro in this regard?\n. Are you sure it's the html of your homepage or a warning that WP isn't installed or something like that?\n. That's weird. Do you have any caching plugins active, like WP Super Cache?\n. Only way to find out is by removing it, particularly the files inwp-content`.\n. > WP-CLI could define WP_CACHE as false\nI don't see how. Whether it does it before or after wp-config.php is loaded, they'll get a \"constant is already defined\" error.\nSimilar problem with WP_DEBUG: #177\n. Not the end of the world, but definitely annoying if you have WP_DEBUG on, as any development install should have.\n. Another solution would be to move the PHP_SAPI !== 'cli' check into Core, before loading wp-content/advanced-cache.php.\n. http://core.trac.wordpress.org/ticket/22683\n. That could work.\n. f28cdcc78a2d7665abd0ec3922db644e99f51a0a seems to do the trick.\n. Would be nice to have src/docs/post-delete.txt updated too.\n. Ugh... \"This pull request cannot be automatically merged.\"\nBefore we continue, please either rebase the branch to the latest HEAD or merge the latest HEAD and fix the conflicts.\n. It's fine; thanks.\n. Hm... maybe a separate command, say wp user import-csv ./file.csv.\n. Fixed.\n. Ugh... maybe separate WP_CLI_Formatter classes, one for plugins and one for themes:\n$this->formatter = new WP_CLI_Formatter_Plugin( $porcelain );\n. Another idea was to have a --json parameter: #120\nSo, you'd basically need to get this structure:\n$plugins = array(\n  array( 'name' => 'plugin A', 'status' => 'active', 'update' => false ),\n  array( 'name' => 'plugin B', 'status' => 'inactive', 'update' => true ),\n);\nOnce you have that, it should be easier to generate different outputs.\n. I did some refactoring that would allow implementing --porcelain in a non-hacky way.\nBut I don't think the proposed format is clean enough:\nUI  inactive-plugin-with-update\nA   active-plugin\nThe U bumps the active-inactive status to the next column.\nMaybe we should have --table instead of --porcelain:\n| Plugin | Status   | Update |\n| foo    | inactive | yes    |\n. I'm curious what other use-cases there are for --json, --porcelain or what have you, besides the migration script mentioned by @goldenapples.\n. > I think I would like, more than anything else, to use the is_atty() conditional to determine whether to colorize the output or not - for all commands.\nLet's do that; we won't even need an explicit --porcelain parameter then.\nClosing this pull request, as it's stale anyway.\n. See #170\n. It tunrs out that \\cli\\Colors::colorize() can strip the color codes.\n. Well, for listing users, we use \\cli\\Table.\nPS: I would prefer if you worked on a branch and opened a pull request, instead of referencing this ticket in each commit.\n. Ok, closing this then. BTW, you can tranform an issue into a pull request by using defunkt/hub:\nhub pull-request -i 123\n. Yep; thanks. Merged.\n. Not sure if this happened. In any case, I don't see any point in keeping this issue open.\n. Confirmed: the export --path parameter conflicts with the global --path parameter.\n. Or, we could have wp blog add-user and wp blog remove-user.\n. No worries. You can have them called set-role and remove-role now, through the @subcommand doc tag.\n. Please move the synopses from the .txt files to @synopsis tags.\n. The only .txt files that have SYNOPSIS are those that document entire commands, not subcommands.\nSo, you can take any of the other user subcommands as examples.\n. Shouldn't remove_role also accept a <role> parameter, in case the user has multiple roles?\nAlso, please rename them to set-role and remove-role, respectively:\n@subcommand set-role\n. Well, wp-cli could set WP_DEBUG before loading WP, but you'd then get an error if you had already defined WP_DEBUG inside wp-config.php.\n. PS: Accessing $assoc_args is not a good idea. That global might go away in a future version of wp-cli.\n. Probably.\n. My first though was to have a static get_accepted_args() function on each class:\nstatic function get_accepted_args() {\n  return array( 'foo', 'bar' );\n}\nSince it's not per-method, you can't specify required args, or you can, but verbosely.\nSo, what I'm thinking of now is to have a @synopsis adnotation:\nphp\n/**\n * Create a blog in a multisite install.\n *\n * @subcommand create\n * @synopsis --slug=<slug> --title=<Title> [--email=<email>] [--site_id=<site-id>] [--public]\n */\npublic function create( $args, $assoc_args ) {\nThe @subcommand tag would be optional.\n. Before:\nwp plugin update [<plugin>] [--all] [--version=<version>]\nAfter:\nwp plugin update <plugin> [--version=<version>]\nwp plugin update-all\nWith the --all flag, it's unclear what the relationship between <plugin> and --all is. Having two separate subcommands makes the code self-documenting.\nAnd from an implementation perspective, the code that handles one item update will almost always be different from the code that handles all item updates.\n\nMaking a change to all posts would be one example.\n\nwp post update-all - just as easy to standardize.\n. This became obvious while working on #178.\nWithout the --all flag, we can make the <plugin> parameter mandatory, which can be automatically checked.\n. Hm... given d20d837428d35e9f8869b8d943a3bc737dcced74, you could do something like this:\nbash\nwp post delete $(wp post list --post_type='page' --ids)\n. I agree, so how about we just drop it and use wp post list instead, as shown above?\n. Yeah, having this in the man page for wp post delete would be essential.\n. Yes, you would need to pass --url each time. A workaround would be to use a variable:\nbash\nWP='wp --url=site.com/path'\n$WP post delete $($WP post list --post_type='page' --ids)\n. Well, WordPress already has a filesystem abstraction layer, in wp-admin/includes/file.php.\nWhat about the mysql command, used heavily in wp db? Does IIS have that?\n. > There $command = 'rm -rf ' is used to remove a folder, which fails on Windows.\nYes, and I was implying that we should use WP_Filesystem for that instead. If you're up for implementing that change, please open a pull request.\n. It seems @ericmann has made wp-cli work on PowerShell: https://github.com/ericmann/WP-PowerShell\n. D'oh! Thanks for reporting. Fixed.\n. Merged. Thanks.\n. You sure you got the latest revision? https://github.com/wp-cli/wp-cli/tree/master/utils\n. php-cli-tools is bundled into the single wpcli/wpcli PEAR package. If that's not kosher for some reason and you would like to fix it, be my guest. I've had enough dealings with PEAR for a while. :)\n. Also, note that the PEAR package doesn't contain the man pages, nor the bash completion script, which is why I'd like to move away from it.\n. That's great, ezbik!\nI think it would make more sense to put the debian folder inside the wp-cli.org site repo. Could you open a pull request against wp-cli/wp-cli.github.com?\nOnce it's merged, I'll take care of linking to it from other parts of the site.\n. Well, the final *deb files should definitely go into wp-cli.github.com.\nWe could put the other files into a _deb-src directory (folders starting with an underscore are ignored when building the site).\nFinally, there's a Phakefile.php, where we could add the dpkg-buildpackage call. We can take care of automating that later.\n. Or maybe we should create a separate repo just for packages, like say wp-cli/packages.\nWe could store the binary files in the gh-pages branch, so Github will automatically make them available at http://wp-cli.org/packages/\nAnd we could keep the source files in the master branch.\nWhat do you say, @ezbik?\n. Here's the layout I have in mind:\n```\ngh-pages:\n  /deb/php-wpcli_0.8-1_all.deb\n  /deb/php-wpcli_0.9-1_all.deb\nmaster:\n  /deb/0.8/php-wpcli-0.8/\n  /deb/0.8/php-wpcli_0.8-1.dsc\n  /deb/0.9/php-wpcli-0.9/\n  /deb/0.9/php-wpcli_0.9-1.dsc\n```\nWould this be awkward to work with?\nDo we need to keep the php-wpcli_0.8-1.tar.gz file in the repo?\n. Found another potential solution: https://github.com/tmm1/brew2deb\nIt would be quite neat to be able to use the existing homebrew formula for wp-cli to generate a .deb package.\n. Also, for the record, I really don't like php-wpcli as the package name. The PEAR package is called wpcli because PEAR is dumb and won't allow wp-cli.\nBetter alternatives:\n- php-wp-cli\n- php-wordpress-cli\n. Yeah, I guess we do need curl for core download.\n. Cool; thanks for sharing the good news.\n. Currently, the php-cli-tools fork is identical to the upstream version.\n. I guess that didn't really answer your question.\nSo, the hope is that we won't need to make any more patches to php-cli-tools, but we continue to point to the fork in composer.json in case we do.\n. Might I suggest packaging the phar file instead? It doesn't need Composer at all.\n. Related: #902\n. Yep, just php-cli and curl.\n. Actually, looking through it again, curl is not needed at runtime anymore. It's only used by various auxiliary utilities, like utils/dev-build.\n. If you're going to do that, you should depend on php-curl, so that Requests can use it, although I really don't see the point of making it a hard requirement, when other transports might be available.\n. > But there can be a scenario that none of them are available right?\nYes but, even then, most WP-CLI commands will still work. And the few that use Requests will just throw an exception.\n. We have https://github.com/wp-cli/builds/tree/gh-pages/deb\n... which translates to http://wp-cli.org/builds/deb/php-wpcli_0.15.0_all.deb etc.\n. cc: @tiagohillebrandt\n. @robsonpeixoto Are you sure you have the latest revision?\n. Well, the PEAR version doesn't include this fix, so you'll have to either wait for the 0.7 release or re-install it via git.\n. Works on @trepmal's set up, so going in.\n. Yeah, \\cli\\Table uses \\cli\\line() so this doesn't completely fix the problem.\n. Thanks, merged.\n. Yeah, I came to the same conclusion. So, maybe just a wp plugin init-tests command then.\n. Yes, that was the original plan.\n. I like wp scaffold plugin.\nI also like wp-cli-scaffold in general. Would you be interested in opening a pull request for merging it into wp-cli proper?\n. We now have wp scaffold: #226\n. I think I'm going to leave the /tests/ dir for the next release.\n. I was just thinking about this. We could add a third parametert WP_CLI::add_command().\n. Because add_command() doesn't know if the command is defined in a plugin,\nin a theme, etc. so you need to specify the path explicitly.\nOn Thursday, November 1, 2012, Daniel Bachhuber wrote:\n\nWhat about looking for an appropriately named file in the plugin dir?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/200#issuecomment-9988892.\n\n\nhttp://scribu.net\n. Do you know of a PHP library that generates man pages from PHPdoc?\n. With the current man-dirs branch, it would look something like this:\n```\nWP_CLI::add_man_dir( dirname(FILE) . '/man/', dirname(FILE) . '/man-src/' );\nWP_CLI::add_command( 'foo', 'Foo_Command' );\n...\n```\nand to generate the man pages, you'd call wp foo --man. \nThe only concern is that when generating, it has to look through all the man dirs to find the source. OTOH, if each command would define it's own man dir, it would be tricky to traverse back up from a subcommand to access it.\n. Since all the rows from the CSV file end up in memory all at once, I'm pretty sure this won't scale past a few thousand lines. The parse_csv() utility function should accept a callback, instead of returning the array.\n. A good test would be generating a CSV file with, say, 50K rows and check memory_get_peak_usage() at the end of the import (if it manages to finish).\n. Yep; that way there will be at most one or two rows in memory at a time.\n. For another day, then.\nOh, by the way, it would be useful to have an example CSV file in the docs, highlighting all the recognized columns.\n. And, similarly to set_role, it needs to be renamed to import-csv.\n. Notice: Undefined index: user_email in /home/scribu/git/wp-cli/src/php/wp-cli/commands/internals/user.php on line 233\n(using the sample CSV file)\n. Warning: Sorry, that username already exists!\nbobjones created\nWarning: Sorry, that username already exists!\nnewuser1 created\nWarning: Sorry, that username already exists!\nexistinguser created\nSo, did the user exist, was it created again, or...?\n. I'm getting that notice both in WP trunk and in WP 3.4.2. Still investigating.\n. On a clean WP install, I get this:\nFatal error: Call to undefined method WP_Object_Cache::__remoteset() in /home/scribu/git/wp-cli/src/php/wp-cli/commands/internals/export.php on line 209\nIt seems stop_the_insanity() wasn't actually called until now.\n. I still get the \"PHP Notice:  Trying to get property of non-object in /home/scribu/Desktop/wp-test/wp-admin/includes/export.php on line 284\", even with a fresh install of WP 3.4.2\nAre you sure you have WP_DEBUG on?\n. Here's the script I use for creating the install:\n```\n!/bin/bash\nrm -f wp-config.php\nwp core config --dbname=wp_test --dbuser=root --dbpass=asd\nsed -i \"s/define('WP_DEBUG', false)/define('WP_DEBUG', true)/\" wp-config.php\nwp db reset --yes\nwp core install --url=test.com --title=\"MS Test\" --admin_email=a@b.com --admin_password=asd\nwp core install-network --title=\"Test Network\"\n```\n. Thanks; merged.\n. Done.\n. I believe the idea of making --dir mandatory was to avoid having the export files be publicly accessible.\nOn the other hand, wp db export doesn't care.\n. I think this is outside the scope of the exporter command; you can easily compress them however you want directly from bash, afterwards.\n. I don't see it anywhere in export.php. If it's not mentioned in the @synopsis tag too, it will cause a warning when used.\n. You're right; I didn't have the latest merge pulled in. Merging.\n. You are confusing wp shell completions with wp completions, which are already implemented: https://github.com/wp-cli/wp-cli/blob/master/utils/wp-completion.bash\n. Related: #212\n. Since we adopted Boris (#437), this should be discussed upstream.\n. There is a common pattern: WP_CLI::confirm().\n. Instead of returning a static list of subcommands, we could make wp --completions generate bash code, which gets evaled.\nThis would allow subcommands that have <file> in their synopsis to use compgen -f, like in d11071ab41b8dd72e1579fbe0cf5c9c780b02561.\n. With arbitrary command nesting now possible, bash completions are really due for an overhaul.\n. Thanks for reporting.\nTo avoid being haunted by this issue whenever we ask people to tell us their version of wp-cli, I re-tagged 0.7 and re-built the PEAR package.\n. This should be easier to do after c4bd5ec5ed70521623c823f75801e4f694837cb7 and f434aafb9ddd348395f51787d330e5f739f695b8.\n. I guess you're right. I'm pretty sure that MySQL is the bottleneck here anyway.\nPull requests welcome.\n. A quick search would have found a similar report: #49\nClosing as duplicate.\n. If you actually run wp --info, you'll see that it doesn't output just version information.\n. So, the key benefit over rm -rf * would be that it preserves your wp-content dir. Makes sense. Pull requests welcome.\nPS: wp core download --force seems to make the most sense.\n. If you want to see it implemented sooner rather than later, dig in. :P\n. Wait, doesn't wp core update --force already do this?\n. The problem with wp core update --force is that it relies on WP files, so it's a chicken and egg problem.\nAnyway, with #293 in, implementing wp core download --force is just a matter of skiping the check for wp-load.php at the top.\n. WordPress uses absolute URLs everywhere, so changing all the URLs in the database by hand will not be feasible in most cases. \nI'm pretty sure what you're asking for is a search/replace command, which wp-cli doesn't have yet. See #118\n. Since 0.7.0-alpha, we switched to our own fork of php-cli-tools: https://github.com/wp-cli/php-cli-tools\nYour submodule probably has the old path. Easiest fix is to clone wp-cli again, from scratch.\n. Yes, that's normal git behaviour.\nIf you do git clone --recursive, as described on wp-cli.org, it will automatically clone the submodule too.\n. The plan was to merge https://github.com/Automattic/WordPress-CLI-Importer into wp-cli, but no one is working on that currently. \nPreviously: #44\n. See #299\n. How about this: we have a post-type.php template with only the register_post_type() call and nothing else.\nThen, we have a post-type-extra.php template, which looks something like this:\n```\nfunction {$machine_name}_init() {\n  {$register_post_type}\n}\nadd_action( 'init', '{$machine_name}_init' );\nfunction {$machine_name}_updated_messages( \\$messages ) {\n...\n```\nwhere $register_post_type contains the output from post-type.php.\nAnd you'd have an --extra flag:\nwp scaffold post-type - uses post-type.php\nwp scaffold post-type --extra - uses post-type-extra.php\nThat way, you could build your own wp lp-scaffold post-type command which used post-type.php, but wrapped it in something else.\n. Sure, you could invert it and have a --raw flag instead of an --extra flag. The main idea is making the scaffold templates reusable.\n. Exactly.\n. I think it's time to merge this. (I'll take care of adding the help files.)\nFurther enhancements can be made in follow-up pull requests.\n. I assume you mean when using wp user create. There was a similar problem with the admin password for wp core install: #128\nThe decision then was to make the --admin_password parameter mandatory, but I think just showing the random password on STDOUT is better.\nAlso related: #129\n. +1\nCandidates:\n- [x] wp plugin install\n- [x] wp plugin update\n- [x] wp plugin {activate|deactivate|toggle}\n- [x] wp plugin uninstall\n- [x] wp plugin delete\n- [x] wp post update\n- [x] wp user update\n- [x] wp user delete\n. Leaving wp plugin update for 0.9.\n. I think we're finally done.\n. Yeah, except none of the plugins are hosted on github.\nI guess we'll have to make some svn patches and open support threads on wp.org.\n. Hey, look, CrowdFavorite has mirrors of all three:\n- https://github.com/crowdfavorite/mirror-wp-w3-total-cache\n- https://github.com/crowdfavorite/mirror-wp-wp-super-cache\n- https://github.com/crowdfavorite/mirror-wp-google-sitemap-generator\n. Forked and sent patches upstream:\n- https://github.com/wp-cli/w3-total-cache (said they already planned wp-cli support in the next version)\n- https://github.com/wp-cli/wp-super-cache\n- https://github.com/wp-cli/google-sitemap-generator\n. I made this issue into a pull request. Will merge it after #226 goes in.\n. The .DS_Store file should be added to your global .gitignore file.\n. We're not going to ship Pandoc with wp-cli. It would be a development dependency at most.\n. Since we now generate help output dynamically (#548), this isn't relevant anymore.\n. wp theme update --all was transformed into wp theme update-all in wp-cli 0.7 (not the best idea, in hindsight).\nReproduced the bug with wp theme update <theme>.\n. If you run wp theme, you get:\nPHP Notice:  Undefined offset: 1 in /home/scribu/git/wp-cli/src/php/wp-cli/class-wp-cli.php on line 209\n. Cool; I'll merge the two commits into one. Thanks for contributing.\n. I think you should just reset your fork instead.\n. > @scribu maybe dev-build should do this automagically?\nNot a bad idea.\nCurious how people just skip the --recursive flag, even though it's right there in the installation instructions.\n. Related: #242\n. Note that wp cap copy could be achieved in pure bash:\nwp cap list <from-role> | xargs wp cap add <to-role>\n. Confirmed. I guess Core has some extra logic, outside of the Plugin_Upgrader class.\n. Actually, the state-preserving logic resides in the Plugin_Upgrader_Skin class, which is missing from CLI_Upgrader_Skin.\n. wp plugin update-all seems to correctly re-activate the appropriate plugins.\n. We should just check that wp-config.php exists before Core does it's own check.\nRelated: 88f1faeed23e867f26cc87b630b4eccf2c1e665a\n. So, you're using the latest git version of wp-cli, right?\nWhere is the file containing the Svn_Command class located? Also, is the WP_CLI::add_command() call in the same file?\n. I see the code is available at tolgap/wp-svn-cli.\nInstead of asking users to move svn.php to the commands folder, you should convert wp-svn-cli into a WordPress plugin: https://github.com/wp-cli/wp-cli/wiki/Creating-Commands\nRelated: #230\n. Also, you might want to try moving the WP_CLI::add_command() call below the SVN_Command class definition.\n. I suppose we could make it search-replace <old> <new> [<table>...]\n. I don't think this is the correct approach. Alternatives:\na) Load the files in each subcommand that needs them\nb) Implement #216\n. Related: #257\n. \"This pull request cannot be automatically merged.\"\nThere are a few problems with using WP filters:\n1) You can not only disable subcommands, but also shove in new ones, which makes the API leaky. A WP_CLI::remove_subcommand() function would be better.\n2) Certain subcommands run before WP is even loaded. To overcome this, we'd need to define a config file or something that is read by wp-cli right at the beginning.\nRelated: #216\n. Adding it to wp-config.php is problematic, since you either have to a) parse it via regex or b) let WP load it, which wouldn't solve the problem.\nI was thinking more of a wp-cli.yaml file in the root dir:\npath: wp/\ndisabled_commands:\n- db drop\n- plugin install\nRelated: #76\n. #254\n. Going to go with #256\n. Next step would be to check 'disabled_commands' array right when the command is registered, so that it doesn't even show up in the list of available commands.\n. What state is /cluster/vhost/dev.davidfavor.com/wordpress in?\n- does it have a wp-load.php file?\n- does it have a wp-config.php file?\n- are the database tables installed?\n. It's a known bug: #93 \nClosing as duplicate.\n. Thanks for investigating. Not much we can do in wp-cli, so closing.\n. I guess that would work. You would just call WP_CLI::error().\n. > The problem is that when there is an error in setup-config.php, it dies so the result is output and cannot be caught with ob_get_clean() :/\nRight; that expains why ob_start() didn't work when I tried using it.\nNo, I think we should stop using setup-config.php altogether. It's not that much logic to re-implement.\n. The wp-config.php parsing is best-effort.\nThe most robust solution is to explicitly pass a --url parameter or to define it in a wp-cli.yml file.\n. Are you using the native cmd.exe shell or cygwin or... ?\n. So, php-cli-tools is using ANSI escape sequences for colorization, which aren't supported on Windows, unless you install ansicon.\nPossible solution: http://core.trac.wordpress.org/changeset/345/tests\n. The color option is now implemented.\n. What does wp --info say?\n. There is no --color flag right now. It would have to be a pair: --color/--no-color or maybe --color=yes/no.\n. I would say you-want-it-you-fix-it.\nI'm fine with using UNIX features that are not present on Windows. If then someone comes along and makes it work on Windows too, great.\n. So, this fixes the fatal error on wp.com you told me about on IRC?\n. I'm very tempted to skip loading core WP files for --cmd-dump. The only problem is blog.php:\nphp\nif ( is_multisite() ) {\n    WP_CLI::add_command( 'blog', 'Blog_Command' );\n}\n. I think I'm just going to leave it as is. Not worth the hassle at this point.\n. The current travis build script has the following external dependencies:\n- https://github.com/WordPress/WordPress\n- https://unit-test.svn.wordpress.org/trunk/wp-tests-config-sample.php\n- https://github.com/scribu/wp-tests-lib\nThe good news is that plugin authors can replace them by editing the generated .travis.yml file at any time.\n. Ideally, the user should be able to run phpunit right after calling wp scaffold plugin. That would mean assuming a git repo:\ncd $plugin_dir\ngit init\ngit submodule add git://github.com/scribu/wp-tests-lib.git tests/lib\necho 'tests/wp-tests-config.php' > .gitignore\ncp ~/git/wp-tests/wp-tests-config.php tests/\n. On a different angle, there's a proposal to add support for plugin tests in the official testing suite:\nhttps://unit-test.trac.wordpress.org/ticket/39\n. The problem is the first line: <?php /**. Try splitting it in two:\nphp\n<?php\n/**\n. > We want to always assume the .yml files are located in the WordPress root directory.\nNo, we don't. For example, I want to keep WP as a clean submodule of my project and have the wp-cli.yml file one level higher, with this content:\npath: wp\nTo use PHPUnit as an example once more, you can:\n1) specify where the tests are: phpunit tests\n2) specify where the config file is: phpunit -c tests/phpunit.xml\nSo, as I said on 29d47eb, we'd need a new parameter, like --config-path.\n. We already have a --json flag, so I think a --csv flag would be most consistent (and shortest too):\nwp user list --csv\n. Yeah; good thing PHP provides fputcsv().\nOn Mon, Jan 7, 2013 at 1:55 AM, Daniel Bachhuber\nnotifications@github.comwrote:\n\nThat works for me. How would you like to see the CSV generated? Simple\nutility function?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/273#issuecomment-11937849.\n\n\nhttp://scribu.net\n. Handled in #284\n. I think this belongs in a plugin (if there isn't one already).\nThis is basically what the WP Super Cache plugin does, except it doesn't\ncreate all the nested directories.\nOn Wednesday, January 9, 2013, Daniel Bachhuber wrote:\n\nInteresting idea. I've actually run across a similar use case in the past:\narchiving a WordPress site. For instance, I've wanted to create a\ncompletely static representation of a WordPress site so I can keep the\ncontent up without maintaining WordPress.\nI'll let @scribu https://github.com/scribu weigh in on whether he\nthinks this is core material. If it isn't, you could package it as a\none-use WordPress.org plugin.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/274#issuecomment-12032317.\n\n\nhttp://scribu.net\n. This should be fixed in version 0.8-alpha, installed via git.\n. Just run git submodule update --init.\n. +1\nOn Friday, January 25, 2013, drrobotnik wrote:\n\nThis is related to Issue 40 https://github.com/wp-cli/wp-cli/issues/40but it'd be nice for network sites to be able to use the search-replace\ncommand network wide.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/278.\n\n\nhttp://scribu.net\n. The --blog_id parameter is not necessary, since we already have --blog as a global parameter.\n. > (see reference above from @ryanholder)\nHuh?\n. > would like to contribute a PR of the code but need permissions.\nYou should (publicly) fork the wp-cli/wp-cli repo and open a PR from your fork.\n. See referenced pull requests.\n. A step-by-step setup makes sense.\nNot sure about the config file though; you could just create a bash script that installs all the plugins you want etc.\n. Similar project by @AaronHolbrook: https://github.com/AaronHolbrook/WordPress-Builder\n. Going to close this as a duplicate of #130, since it boils down to the same idea.\n. Now I get why this was left out: unlike with a plugin, you actually have to fill the theme up with some code, in order for the scaffold command to be useful.\nI think using _s as the scaffold template would provide some value, as it would automate the steps mentioned in https://github.com/Automattic/_s#getting-started:\nwp scaffold theme --skeleton=_s --textdomain=foo --prefix='foo_' --title='Foo'\nWe wouldn't want to bundle _s into wp-cli, though. We'd download it on the fly, as needed.\ncc: @mfields @danielbachhuber\n. > Is it to pull the zip from GitHub or reusing the underscores.me service with form submission and getting the theme ready?\nWell, it doesn't make much difference, since we need an internet connection in any case. And I assume each starter theme that we would want to support would need some custom code anyway.\n\nI can poke that over the weekend, if it's not too late\n\nThere's no rush. :)\n. An interesting model for this sort of thing is Brunch skeletons. You pass the github URL to the skeleton. Brunch downloads it and reads the config.coffee file.\nThis has the advantage that people can create skeletons independently, without needing to fork Brunch.\nSo, we could do something similar for wp-cli. Users could run:\nwp scaffold theme --skeleton=https://github.com/Automattic/_s\nwp-cli would download that repo, read a skeleton.php file (or whatever we decide to call it), which could prompt for whatever parameters it wants, one by one: textdomain, prefix etc.\nIf the guys behind _s don't want to add such a file, we could create a separate repo, like wp-cli/_s-skeleton or something but it would be cool if they did.\n. It seems @evansolomon also wrote a utility specifically for _s: https://github.com/evansolomon/_sh\n. > Would the template files that get pulled in be run through eval() in order to apply these optional parameters?\nI was thinking of a simple PHP file that would be include()ed. It would be up to that PHP code to generate the final files, however it sees fit: mustache, sed, curl etc.\n. I think we should pick a different theme than _s to start with, since _s already has scaffolding handled better than most.\n. Well, I think a good first step would be to convert Evan's _sh script into a wp-cli subcommand:\n$ wp scaffold _s\nName: Stella and Mojo\nSlug: stella-and-mojo\nTextdomain (default: slug):\n...\nand later we can figure out a generic way of doing it.\n. #285 has been merged.\n. 1. It's not specific to WP 3.5; it's the same in WP 3.4.\n2. The actual problem is that you use an incorrect date format:\n--post_date='2013-2-1 7:00'\nIf you pass the correct format, it sets the post status to 'future', as expected:\n--post_date='2013-02-01 07:00:00'\n. No, not really; the docs weren't clear and, in an ideal world, it would work with any reasonable date format.\n. What about the apc.enable-cli directive?\n. Closing, since I'm not keen on the HTTP-based solution.\nLE: Still, if someone ends up implementing it as a plugin or otherwise, do share.\n. Yeah, throwing an error when APC is detected was what I had in mind.\n. > maybe it should be flag to lock out commands affected by the issue for now?\nAny command that alters database rows is affected by this, so I went with a more straightforward solution, for now: always abort.\n. An alternative approach would be to output a prompt:\nWarning: Running WP-CLI while the APC object cache is activated can result in cache corruption. Continue? [y/n]\nThus, we leave it up to the user to make the call.\n. wp user list --ids\nthrows:\n\"Warning: implode(): Invalid arguments passed in /home/scribu/git/wp-cli/php/commands/user.php on line 55\"\n. > what do you think of this approach as a new way of specifying output format? I think we should deprecate the --json flag as it's not that versatile.\nI liked --json because it was shorter than --format=json, but I don't think that has much bearing, since most commands probably aren't called interactively.\n. Ok, now you should be able to use wp_remote_post(), instead of shell_exec(), like you suggested earlier.\n. I don't think you're supposed to call create_file() directly. Take a look at how WP's download_url() function does it.\n. Also, needs a man page. Examples can be found in the man-src folder.\n. Great, thanks.\nWhen I run wp scaffold _s test, I get:\n```\nNotice: Undefined variable: theme_description in /home/scribu/git/wp-cli/php/commands/scaffold.php on line 156\nNotice: Undefined variable: timeout in /home/scribu/git/wp-cli/php/commands/scaffold.php on line 161\n```\nYou need to have WP_DEBUG enabled in your wp-config.php file to see these notices.\n. That's because you didn't mention them in the synosis.\n. Actually, it because you have a space:\n[--author=<full name>]\nIt needs to be:\n[--author=<full-name>]\n. Are you sure you have WP_DEBUG on? 'cause I'm still getting a notice.\n. Ok, no more notices.\nIt would be nice to add a confirmation message, like: \"Success, created theme 'Test'\".\n\ni assume if my addition is merged that wont cause any problems?\n\nNo, that's fine.\n. Man page(s)?\n. wp term create should have a --parent parameter, which ideally accepts a name, not just a term id.\n. Also, given how shaky the term API is, I think it might be good if we added some automated tests.\nLet me know if you have trouble setting that up. See https://github.com/wp-cli/wp-cli#running-tests\n. > For now, I feel like being pure to how wp_insert_term() currently works.\nThe thing is that the CLI interface only accepts strings; you can't pass an actual int. Also, we go beyond the WP API in several places: plugin slugs, user names etc.\n. To update the post title, you can just do wp post update 123 --post_title=\"The new title\". And wp post-meta update for custom fields.\n. @thanj: Go for it.\n. > It would seem like making this functionality available to wp post create would be useful as as well, maybe with an additional flag like --editor which will open the editor to build the post content before creating the post.\nYep, I was thinking along the same lines. Maybe --edit would be a better name for the flag, similar to the --activate flag for wp plugin install.\n. @goldenapples (a.k.a. @thanj): There are various PHP libraries that can handle converting HTML into Markdown, such as Markdownify.\n. Note that it needs to be under an MIT-compatible license.\n. Handled in #302.\n. What version of WordPress are these sites running?\n. Ok, does wp-cli work if you create a clean WP install? How about if you then add all the plugins from one of your existing sites?\n. So, you mean a regular setup, via the browser? I'll try that.\n. Right, so now try adding the plugins from [existing_site] into ./test. Or, alternatively, try deactivating all plugins from [existing_site].\nAlso, do you have anything in wp-content/mu-plugins?\n. Ok, but are the plugins in ./test activated?\nAlso, what does wp-config.php in your existing site look like? (Make sure to erase sensitive data before posting it)\n. Ok, final question: the WordPress core files on your existing sites aren't modified in any way, right?\n. So, wp-cli 0.6 works fine.\nWithout reproducible steps, there's not much else I can do. (I assume getting a peek at your live site myself would be out of the question).\n. I can't send a DM unless you follow me. How about an email? My address is mail AT scribu.net\n. After eeba0afaf5005101a92cc9b60ec3adf882561c1e, I was able to run wp successfully on your files + data.\n. Even worse, wp db create won't work either.\n. Should test both multisite and single site, since they have different loading code.\n. I'm not sure why, but wpshell doesn't choke on syntax errors (and it doesn't use a separate process).\n. That's a good point. If the separate process crashes due to a syntax error, you'd lose any temporary variables you created previously.\nSo, yeah, maybe it'd be best to check the syntax and then eval in the current context.\n. So, I was thinking of using php -l, but that will only catch syntax errors - it won't catch runtime errors, like trying to call a method on a null object - but it's still better than nothing.\n. This is similar to #221\n. I guess so. In any case, closing this as a duplicate.\n. Actually, they're similar, but not quite the same.\n\nSo if you did a --force it could use cp -fr instead?\n\nWith a --force flag, I would skip the if ( is_readable( ABSPATH . 'wp-load.php' ) ) check at the top.\n. Confirmed.\n. It seems phix pear:expand-package-xml is not doing its job properly.\n. Decided to fix the problem by replacing PEAR packages with Phar archives: #301 \n. Thanks; missed that one.\n. Yeah, it seems [--count=100] isn't recognized by the synopsis parser. Need to add some unit tests for that.\n. Yeah, but that would just fix the symptom. The root problem is that there's no easy way to check if a synopsis is valid or not.\nAdded unit tests in #297, so now we can proceed with a fix.\n. See #298\n. Getting a surprising number of warnings:\n$ wp --man > /dev/null\nWarning: Invalid token '' in synopsis for 'wp cache flush'\nWarning: Invalid token '' in synopsis for 'wp cache type'\nWarning: Invalid token '<cap>...' in synopsis for 'wp cap add'\nWarning: Invalid token '<cap>...' in synopsis for 'wp cap remove'\nWarning: Invalid token '' in synopsis for 'wp core is-installed'\nWarning: Invalid token '<id>...' in synopsis for 'wp post delete'\nWarning: Invalid token '[--count=100]' in synopsis for 'wp post generate'\nWarning: Invalid token '[--max_depth=1]' in synopsis for 'wp post generate'\nWarning: Invalid token '<id>...' in synopsis for 'wp post update'\nWarning: Invalid token '[--exclude_from_search=<exclude_from_search>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--show_ui=<show_ui>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--show_in_nav_menus=<show_in_nav_menus>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--show_in_menu=<show_in_menu>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--show_in_admin_bar=<show_in_admin_bar>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--menu_position=<menu_position>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--menu_icon=<menu_icon>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--capability_type=<capability_type>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--has_archive=<has_archive>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--query_var=<query_var>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--can_export=<can_export>]' in synopsis for 'wp scaffold post-type'\nWarning: Invalid token '[--show_in_nav_menus=<show_in_nav_menus>]' in synopsis for 'wp scaffold taxonomy'\nWarning: Invalid token '[--show_ui=<show_ui>]' in synopsis for 'wp scaffold taxonomy'\nWarning: Invalid token '[--show_tagcloud=<show_tagcloud>]' in synopsis for 'wp scaffold taxonomy'\nWarning: Invalid token '[--query_var=<query_var>]' in synopsis for 'wp scaffold taxonomy'\nWarning: Invalid token '[--post_types=<post_types>]' in synopsis for 'wp scaffold taxonomy'\nWarning: Invalid token '[<table>...]' in synopsis for 'wp search-replace'\nWarning: Invalid token '' in synopsis for 'wp transient type'\nWarning: Invalid token '<id>...' in synopsis for 'wp user delete'\nWarning: Invalid token '[--count=100]' in synopsis for 'wp user generate'\nWarning: Invalid token '<id>...' in synopsis for 'wp user update'\n. Only remaining warnings are for scaffold post-type and scaffold taxonomy, which will be dealt with separately.\n. > How should author mappings be handled? Our current approach is a PITA.\nWhat is the current approach?\n. Ok, and what does the author-mapping.php contain? a function, an associative array?\n\nthere are typically dozens of associations that need to be manually fixed.\n\nBecause they weren't handled in author-mapping.php or...?\n. Well, I'd go with author-mapping.csv + interactive prompting.\n. > Also need to figure out a good way of emulating WXR in tests.\nYou could create a tests/data/ folder and store it there.\n. Yeah, I think it's good enough.\nFor the functional tests, I'm thinking something like this:\n```\nwp post generate\nwp export\nwp site empty\nwp import\ntest post count etc.\n```\n. Yeah, travis is having some issues right now: http://status.travis-ci.com/incidents/fh3cz68wk3ms\nNot sure why, but the test fails for me:\nvendor/bin/behat features/import.feature\nOut:\nWhen I run `wp post list --post_type=any --format=csv | wc -l` # features/steps/basic_steps.php:97\n    Then STDOUT should be:                                         # features/steps/basic_steps.php:152\n      \"\"\"\n      8\n      \"\"\"\n      8\n. 1) It's funny that wp import won't work with a file generated using the current wp export command:\nError: This does not appear to be a WXR file, missing/invalid WXR version number\nUsing the export-api branch (#525) to generate a file works. Going to merge that first.\n2) I'm getting the following output over and over at the start of the import:\nFailed to import author . Their posts will be attributed to the current user.<br />\n(I'm using --authors=create)\n3) At the end of the export, there's some extra HTML output:\n<p>All done. <a href=\"http://example.com/wp-admin/\">Have fun!</a></p><p>Remember to update the passwords and roles of imported users.</p>Success: Import complete.\n. > Hmm, I can't reproduce. I did an export / import yesterday on my personal website and it worked fine.\nNow I can't reproduce either. Nevermind.\n\nDoes the author already exist? Can you share more details about the import file?\n\nI think the problem is that all my posts have post_author=0.\n\nWelcome to the WordPress importer :) There's a little extra HTML output everywhere.\n\nRight, but if we can't hide the HTML, we should at least not show the superfluous \"Success\" message.\n. The test fails on my end (OS X) because wc -l outputs some whitespace before the actual count:\n$ wp post list --post_type=any --format=csv | wc -l\n       8\nThat's why I added | tr -d ' ' to the other tests that use wc. Maybe we should add a --format=count and be done with it.\n. > The \"Success\" message indicates the subcommand completed fully, and didn't exist prematurely. I'd prefer to keep it.\nCould we at least show it on its own line then?\n. Just for the record, I think 630086271cc0151de45e6b7078ee96036ff36bd0 is pretty damn cool.\n. Getting prompted for each and every one of those parameters would be tedious.\n. The point is that, whether passed interactively or as a parameter, it's easier to edit these one-off args in the editor, after the file is generated.\n. Beyond those minor things, it works pretty well.\n. I think being able to edit a single file is enough, especially for the first iteration.\n. Not sure about this:\nls | xargs -I {} wp post create {} --post_title={}\nIs {} some bash magic I'm not aware of?\n. Ok, thanks for the info.\n+1 for checking $args[0] for filename or - for STDIN.\n. Was puzzled by this too. Thanks for the fix.\n. Reading from STDIN doesn't seem to work:\necho 'foo' | wp post create -\nError: Unable to read content from php://stdin.\n\nAfter updating the synopsis for wp post create, all calls to wp post create throw an \"unknown parameter\" warning.\n\nYeah, that seems to be a bug in the parser.\n. I would really like to have some functional tests for wp post create.\nBasically, have a file similar to tests/spec-core.php that tests every usage mode of wp post create:\n- no file\n- filename\n- STDIN\n. Merging and adding tests afterwards. See #307.\n. The most up-to-date version of that project is located at https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards\n. For WP-CLI itself: #818 \n. Wondering if it would be possible to sidestep man and call groff directly.\n. If not, can just explicitly create the temporary file, instead of using php://temp.\n. Like I said in pods-framework/pods#730, the way to bypass the \"Unknown parameter warning\" is to make the synopsis look like this:\n@synopsis --pod=<pod> --<field>=<value>\nIf it doesn't seem to help, make sure you have the latest WP-CLI version from github.\n. No matter what synopsis you have, all the associative arguments are always passed as the $assoc_args parameter to each subcommand.\n. If you're not understanding what I'm saying, please say so; don't open any more issues.\n. Ok, so the @synopsis tag has two roles:\n- to document the accepted parameters\n- to validate the passed parameters at runtime\nIn that light, I guess it made sense to open two tickets, one for each role. But on the other hand, both roles are implemented via the same interface, so they should be discussed together.\nI think I'll re-open #314 though, since it has a proposed syntax.\n. One more time: the single use of the --<field>=<value> synopsis syntax is to bypass unknown parameter warnings. Why would you want to add yet another way to do that?\n. Yeah, I guess the difference is subtle.\n. Closing as duplicate of #314.\n. The correct syntax for this would be:\n@synopsis --pod=<pod> --field_*=<value>\nThe idea is that <value> is the @synopsis equivalent to $value in PHP, i.e. it's variable.\n. I think we don't even need to introduce *. It could just be:\n@synopsis --pod=<pod> --field_<key>=<value>...\n. Closing this, as the synopsis parsing is complex enough as it is.\n. > What about using symfony2 console component to manage all the console interaction ?\nReplacing php-cli-tools with Symfony2/Console would be a major undertaking. I'm not against it, but we have to weigh the pros and cons.\nOne major drawback would be that it doesn't seem to support a third level of subcommands. i.e. wp search-replace would work, but wp option get wouldn't.\nIn general, I would prefer to continue using libraries (that WP-CLI controls), instead of frameworks (that dictate how WP-CLI works).\n. That's exactly what I'm saying; when a user runs wp option get, the framework would interpret it as wp option, with get as an argument, which WP-CLI would then have to further route to the appropriate method. The point is that the elegant routing we have now would have to be replaced with workarounds. So, that's a con.\nI'm waiting for the list of benefits that using this framework would bring.\n. And when listing benefits, please don't mention the things that php-cli-tools (which is bundled with WP-CLI) already has:\nhttps://github.com/jlogsdon/php-cli-tools#function-list\n. Actually, I'm not particularly interested in hearing why switching to Symfony2/Console would be a good idea; that ship has sailed.\nI'm only interested in the things that make WP-CLI crappy on Windows, so that we can fix them (by copying what Symfony2/Console does or by some other method) and move forward.\n. I can't reproduce the problem. Here's what I tried:\n1) Create a test.php file:\n``` php\n<?php\nfor ( $i=0; $i<5; $i++ ) {\n    WP_CLI::log($i);\n    sleep(1);\n}\nexit;\n```\n2) Load it:\nwp --require=test.php\nAlso, the implicit_flush ini directive is always on in the CLI context, so I don't see how this could ever be an issue.\nClosing.\n. Yes, I know Python does that; that's why I quit my PHP job. :P\nPersonally, I'm not going to bother trying to match delimiters or mess with the PHP parser. If someone does tackle this, they should package it up as a generic library, since I'm sure many people would find it useful in their own PHP REPLs.\nRelated: #292 \n. It seems someone has already gone through the pain of wading through PHP tokens to provide multiline support. It's an abandoned project called php-shell:\n- http://jan.kneschke.de/projects/php-shell/\n- http://pear.php.net/package/PHP_Shell\n- https://github.com/pear/PHP_Shell\nThe multiline part is used in the WordPress Console plugin:\nhttps://github.com/jerodsanto/wordpress-console/blob/v0.3.9/common.php#L78-633\n. Which installation method did you use? Phar archive or git?\nPlease run the following commands and let me know what you get:\nwhich php\necho $WP_CLI_PHP\nwp --info\n. Yeah, so the Phar archive can't check the WP_CLI_PHP variable.\nTry this:\nbash\nsudo -s\ncurl http://wp-cli.org/packages/phar/wp-cli.phar > /usr/share/wp-cli.phar\necho '/Applications/MAMP/bin/php/php5.3.14/bin/php /usr/share/wp-cli.phar $@' > /usr/bin/wp\nchmod +x /usr/bin/wp\n. You're welcome. Need to update the instructions on wp-cli.org.\nSee wp-cli/wp-cli.github.com#5\n. Yes: do what I suggested above: #issuecomment-14129866.\n. @ifmeister Yes, you should open a new issue. Or maybe post a question on WPSE: http://wordpress.stackexchange.com/questions/tagged/wp-cli\n. Nice catch. Care to transform it into a pull request, so that you show up on the contributors page? :)\n. --path is a global parameter, which is handled earlier:\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L225\nSo, the correct fix would be to use ABSPATH, instead of checking $assoc_args['path'].\n. Ok, so what's the issue?\n. Yeah, I guess it should always be absolute, since that's why it's called ABSPATH. :)\nThat's a bug in set_wp_root() then.\n. Actually, we have functional tests run via Behat, but somehow they don't catch this issue:\nhttps://github.com/wp-cli/wp-cli/blob/master/features/bootstrap/FeatureContext.php#L176-186\n. Going to handle this in #327. Thanks for reporting, @erwanlr.\n. Ugh... so many levels of escaping... need to clean this up.\n. Previously: #318 \n. I guess that's what happens when I merge pull requests without testing them.\n. @ocean90: Don't sweat it; It happens - hopefully less often, now that we have Travis CI integration. :)\n. > Should there be a extra param --all to explicity start the regenrating\nNo, I don't think that's necessary. At most, we would add an \"Are you sure?\" check.\n. If you use WP_CLI::confirm(), it will look for --yes, skipping the check if present.\n. > Done, but I left the parameter id because it is a post-type and doesn't has a $post->attachment_id but $post->ID\nI don't see how that's relevant. The point is to make the parameters in the synopsis self-documenting.\n. I think every stone has been turned. :)\n. You're welcome. Good job. :+1: \n. Thanks!\n. This is already fixed in 9431490. Closing as dup of #322.\n. Can you give a few example usecases for this?\n. That can be achieved more efficiently by using mysqldump your_db wp_options.\n. Hm... guess I'll have to make the injection procedure smarter. Thanks for investigating.\n. How about this:\nWe keep #327 focused on making wp core download --path work.\nYou rewrite your branch and focus on fixing set_wp_root().\n. > Just one thing about your commit : you must create the ABSPATH is it does not exist ;)\nDone: fe7683f6f535b4610315bc665734a7a9c5f3e616\n. Are you sure? The test runner should automatically create the cache directory, if it's not present.\n. Yes, wp-cli.org mentions that WordPress 3.3 or later is required.\n. Yeah, we should make --dbpass optional.\n. If you can also regenerate the manpages, go for it. Otherwise, I'll take care of it later.\n. Yep; if you have ronn installed, you just need to run wp core --man.\n. See #334.\n. Please give an example of such a custom command that wouldn't need a WP install.\n. So, there are two aspects here:\na) global custom commands (instead of per-install custom commands)\nb) making custom commands work without a WP install (like wp db does etc.)\na) is pretty easy to handle. Not sure how b) would work, though.\n. > Is there a global wp-cli.yml?\nNope, but that might be an option.\n\nb) Would hook on the same code as the #312 right?\n\nI'm not sure.\n\nAlso should I split up this issue?\n\nNot yet.\n. cc: @danielbachhuber @getsource \nAny thoughts? \n. > I'm asking the Kraftwagen developer if he can point me in a the direction on how Drush includes / registers the global custom commands from your home dir or another dir.\nAny response?\n. > a) global custom commands (instead of per-install custom commands)\nActually, this would only need two things:\n- a global wp-cli.yml file\n- the ability to pass a list of paths to require:\n. > So --require= doesn't needs an installed WP?\nActually, it does, so we'd have to use something else in the config file. But I think scanning a predefined directory would be less hassle.\n. There's a discussion on package managers in #424\n. The idea here is that we don't want to get it fast; we want to get it right.\n. I still don't see why this would be a blocker for your project. Here's how I would structure it:\n- helper-commands.php\n- build.sh\nhelper-commands.php would contain various subcommands that you need.\nAnd build.sh would look like this:\n``` bash\n!/usr/bin/env bash\nwp='wp --require=helper-commands.php'\n$wp build prep $1\n$wp core download\n```\nSo the only thing that would be needed is to make --require work without a WP install (which shouldn't pose any problems; if you need access to WP functions before calling WP_CLI::add_command(), just bundle your command into a plugin).\n. Related: #445\n. > wp new-project - Create an new project. From for example a skeleton repo.\nI made a similar comment in #499:\nComposer has a create-project command, which seems better suited for this.\n. So, with #468 and #453 merged, you should have everything you need for creating custom commands that don't need a WP install.\nIf you have an example.php file, you can use the @when docblock tag, either on the class or on individual methods:\n``` php\nclass Example_Command extends WP_CLI_Command {\n/*\n  * @when before_wp_load\n  /\n  function early( $args, $assoc_args ) {\n    WP_CLI::line( \"I don't need a WP install.\" );\n  }\nfunction normal( $args, $assoc_args ) {\n    WP_CLI::line( \"I need a WP install.\" );\n  }\n}\nWP_CLI::add_command( 'example', 'Example_Command' );\n```\nThen you can just do:\nwp --require=example.php example early\n. Are you sure you're running the latest revision? wp --version should say at least 0.11.0-alpha.\nwp --require=example.php example early works fine for me.\nwp --require=example.php example shows the error you mentioned, but it should show the usage instead; I need to fix that.\n. Assuming you followed the steps described on http://wp-cli.org:\ncd ~/.composer\nphp composer.phar require wp-cli/wp-cli=dev-master\n. Boris is optional. You can remove it from the composer.json file if it won't install.\n. Please post the complete list of commands you ran.\n. Related: #336 \n\nWhere do i have to create a php.ini?\n\nWherever PHP is expecting it. Run php -i | grep php.ini to find out.\n. No, you don't need to create any directories.\nMaybe the symlink is broken:\nls -l /usr/bin/ | grep wp\n. I've ran into this kind of error myself; it went away after I restarted the terminal.\n. Well, we could do what we did with get_themes(): #138 \n. Or, we could bump the minimum requirement  to WP 3.4. We don't run the acceptance tests against WP 3.3 anyway.\nBesides, there have been a bunch of security flaws fixed in WP 3.5, which haven't been backported to even 3.4.\n. Fixed in #348.\n. +1 for the idea. I'll merge it soon.\n. Any progress?\n. Here's another usecase: checking if the phar archive is out of date, without downloading the whole thing: #371 \n. You don't need to install Composer globally. See https://getcomposer.org/doc/00-intro.md#locally\n. One solution would be to set the type of server in wp-cli.yml, which would be used by wp-cli to set $is_apache etc.\n. > oh you mean as a new feature?\nYes.\n. Merged; thanks.\n. Perfect. Going in.\n. It would be great if you could also re-generate the man page. You need to install the ronn ruby gem and run wp cap --man.\n. You should create a .txt file for each subcommand in the man-src directory and generate the corresponding man pages, as described in #349.\n. Please leave a comment when you think the pull request is ready for another review.\n. > I saw it as a way to check if a role exists without haven't to iterate through lots of results.\nThen why not have a wp role exists <key> subcommand which would return a different exit status? Example usage:\nbash\nif [ wp role exists somerole ]\nthen\n  # do stuff\nfi\n. Yep, that sounds like a good idea.\n. That line was added as a hack to fix #164. However, since 8f3b6601377f4e7230a1275833ada39bfa182c50, it's no longer necessary, so we should just remove it.\n. So, the build fails because when dead_db() is reached, it will call wp_die() only if WP_ADMIN is true.\n. See the updated instructions on http://wp-cli.org.\n. > /home/user/git/wp-cli/utils/../bin/wp: line 52: which: command not found\n\nexec: /home/user/git/wp-cli/bin/../php/boot-fs.php: cannot execute: Permission denied\n\nSince your webhost doesn't have the which command (which is very strange), then the $php variable will be empty, so the script will end up trying to execute boot-fs.php directly.\nFirst, make sure you have php-cli available:\nphp --version\nThen, you can try running:\nphp /home/user/git/wp-cli/php/boot-fs.php\n. > Could not open input file: /home/user/git/wp-cli/bin/../php/boot-fs.php\nLooks like the path is wrong. This should work:\nphp ~/git/wp-cli/php/boot-fs.php\n. > Just a question, will you change the wp-cli code that it will looks for the home relative path and not traverse from the root\nI don't see how that would help. You need an absolute path in the end (whether it starts with ~ or not), because you need to run wp from the WordPress install directory.\nWhat you should ask your host is why the which command is missing. I'll probably change the script to not use it anyway, but I'm curious.\n. Looks good. Could you also take care of re-generating the man page?\n. Yep; added a section to the contributor guide: https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#generating-man-pages\n. This would be pretty easy if we didn't load WP in the global scope, but that's out of scope for 0.9, so punting to the next release.\n. I'm starting to think that moving the manpage generation to a separate utility would be better than handling all the edge cases.\nPossible approaches:\nSeparate utility\n./utils/man /path/to/cmd-class.php [/path/to/man-src.txt]\n- advantage: straightforward to use for third-party commands (either in plugins or packages)\n- disadvantage: would need some extra code for generating man pages en-masse\nStandard WP-CLI command\nwp helpgen [command]\n- advantage: symmetry with wp help\n- avoid confusion with --help: #455\n- ~~disadvantage: would need to solve #453 in order to achieve this ticket's goal: independence from a WP install~~\n  - actually, we could just hard-code it, like we do for wp help etc.\n. wp help --generate actually makes a lot of sense:\n- get WP-less execution for free\n- keep all help-related code in one place\n. Unfortunately, wp help --gen blog create doesn't work anymore.\nAnd wp help blog only shows wp blog empty, whereas wp blog shows all the subcommands.\n. On second thought, maybe it would be better to have an explicit Given a WP multisite install step, which would be necessary anyway when testing wp blog.\n. I was under the impression that the underlying functions, like wp_insert_user() etc. took care of that.\n. That's quite strange. Some questions:\n- what version of WP are you using? is it a multisite install?\n- does wp plugin status work? What do you get if you run echo $? immediately after?\n. The list is now out of date and I think we have decent coverage for the most critical parts.\n. I remember @nb tried doing something similar, but with the wp-config.php file. I thought that would cause confusion, since WP itself looks up one directory.\nAnyway, this seems useful; it allows you to, for example, run wp commands while in a plugin's directory.\n. However, unlike the .git directory, wp-cli.yml can very well be absent. In that case, on each invocation it would do 2 * nr_of_dirs_to_root file_exists() checks.\n. Gonna make some changes to the Behat test suite to accomodate testing this. Stay tuned.\n. See #363.\n. After making some changes to the test suite, I noticed an interesting edge case. Steps to reproduce:\ncd /tmp/\nmkdir new-install && cd new-install\nwp core download\nABSPATH ends up being /.\n. Found another edge case.\nConsider this layout:\npublic_html/\n    wp-cli.yml\n    wp-load.php\n    ...\n    subsite/\n        wp-load.php\n        ...\nThen run:\ncd public_html/subsite\nwp --info\nYou will get wp-cli config:    public_html/wp-cli.yml\n. Looking good.\n. Relevant commit landed in master: 82af1db8fb3b81c1f31b892f1a8b1eb6fc4b41c4\n. We should go with --label, since it will be used in more places, therefore being more likely to produce code that needs less editing.\n. Also, where are the functional tests? :D\n. You could create a new scaffold.feature file which just tests that STDOUT contains whatever you passed as --label.\n. Yes, in this pull, because this pull contains the functionality that you're testing.\n. Looks pretty solid.\n. I see you added a test for the command, but it currently fails on Travis.\nAnother thing I noticed is that the success message is kind of redundant:\nSuccess: Successfully imported file /tmp/codeispoetry.png\nIt should be:\nSuccess: Imported file /tmp/codeispoetry.png\nand I think it should point to the original URL, not the temporary path.\n. I just ran this and was surprised to find that the original files disappeared. I was expecting the command to copy them instead.\n. No, it looks good. Going in.\n. 1. Have you manually compared your installed versions with the versions on wp.org?\n2. Can you update the plugins via wp-admin?\n. 1. What version of WordPress are you using?\n2. What is the currently installed version of the remaining plugin that needs updating?\n. Can't reproduce:\nbash\nUser@air:~/wp/core$ wp core version\n3.5.1\nUser@air:~/wp/core$ wp plugin install jigoshop --version=1.6.1\nInstalling Jigoshop (1.6.1)\nDownloading install package from http://downloads.wordpress.org/plugin/jigoshop.1.6.1.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nUser@air:~/wp/core$ wp plugin update-all\nDownloading update from http://downloads.wordpress.org/plugin/jigoshop.1.6.2.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nSuccess: Updated 1/1 plugins.\n. Try re-downloading all the WP files:\nwp core download --force\n. Try setting up a clean WP install somewhere and see if you still get that odd result.\n. Right; that means there's some code in your site that's causing this:\n- modified Core files (already eliminated this with wp core download --force)\n- drop-in (wp-content/advanced-cache.php etc.)\n- files inside wp-content/mu-plugins\n- plugin or theme\n. You can download the md5 checksum and see if it changed. From wp-cli.org:\n\nYou can download WP-CLI packaged as a single file (md5):\n. > The issue is reproducable only on this site.\n\nThat suggests that it's an issue with that site's code and not with WP-CLI. Maybe you have a plugin with some extra whitespace at the beginning/end of the file.\n. Closing, since there's nothing more I can do with the given info.\n. What version of wp-cli are you using?\n. Ok, this is fixed in 0.9. See #327\n. Confirmed.\n. Hey, John Lamp. The network graph shows some strange merges:\n\nI would appreciate it if you kept only b35b4ef5540e86f53c9590dd3fe7e04e3364e60e in the pull request.\nThese commands should do the trick:\ngit checkout master\ngit reset --hard b35b4ef5540e86f53c9590dd3fe7e04e3364e60e\ngit push -f\n. You call ./utils/make-phar.\n. Looking good. Thanks for contributing.\n. WP-CLI no longer uses git submodules. If you look at the instructions on wp-cli.org, you will find that you need to run the following command:\n./utils/dev-build\n. > I saw the option --json but couldnt find docs on what that does.\nDid you try wp help option?\n. Closing as duplicate of #282\n. --context=admin sounds fine.\n. Wha happens if you pass --url=example.com/wp-admin/ ?\n. If wp-config.php is in a non-standard location, then how does WordPress itself find it?\n. So, symlinked WP finds wp-config.php succesfully, but WP-CLI doesn't?\n. Needs functional tests, regardless of the implementation.\n. See flags.feature for some examples.\n. > We're already loading all of the admin utilities at the bottom of wp-cli.php\nIn that case, why not just always set WP_ADMIN to true? We could skip Utils\\set_wp_query() then.\n. What I mean is that the default context should be 'admin', since when you're using WP-CLI, you're not displaying a template; you're performing administrative actions.\nAnd since I don't want to think about other contexts right now, we don't need the --context flag at all, for the time being.\n. The $wp_query global handling was introduced way back in 8924c97ce92c256a0723fe59249d5ce35f4376c2 along with --url in #69.\nIn hindsight, I didn't end up using --url for functional testing. The WordPress test suite already has a handy go_to() method for that.\n. > This is why commit messages should explain why, not just what: 5b6efb9\nThat code was added in #164 and then removed as part of #352, but yeah, being part of a pull request isn't a good excuse.\n. And that brought up #351, which was similar to my idea of using WP-CLI for unit testing, but I think this bit is spot on:\n\nI know that a lot more would need to be built out to actually allow WP_CLI to mock up a front end page load, use the template loader, and so on\n\nSo, no --context=frontend for now.\n. In summary:\nWP-CLI has always loaded most of the code for wp-admin because most commands need it.\nThen, it sort of pretended it was also loading the front-end, for doing integration testing. (#69)\nThen it pretended it was loading wp-admin, to side-step caching plugins. (#164)\nThen it stopped pretending it was loading wp-admin, because we found a better way to side-step caching plugins. (#352)\nTODO:\n- [x] treat WP-CLI as an alternative UI to wp-admin\n- [x] stop pretending to do a front-end page load\n. Going to continue working on this PR, since it has all the background now.\n. Took a look through wp-admin/admin.php (the file that gets loaded by all admin screens) and the only relevant bits I found were these:\n- defining WP_ADMIN, WP_USER_ADMIN and WP_NETWORK_ADMIN\n- load wp-load.php\n- load wp-admin/includes/admin.php\n- do_action('admin_init');\n- ~~do_action('admin_action_' . $_REQUEST['action']);~~\nAll the rest are related to specific admin screens.\n. Related: #679\n. No longer relevant: #885\n. Well, you could set url: mysite.mynetwork.com in wp-cli.yml.\n. There are a lot of edge-cases:\n- what if it's a subdirectory install, rather than a subdomain install?\n- what if it's a multi-network install?\n- what about domain mapping?\nAt the end of the day, the URL is the only reliable way to unambiguously identify a blog (aside from its ID).\nYou could define a bunch of variables and use them as shortcuts:\nbash\n~ mysite='wp --url=mysite.mynetwork.com'\n~ another='wp --url=another.com'\n~\n~ $mysite post list\n~ $another plugin status\n. With #548, the synopsis is no longer shown when calling wp option get and I don't see a straightforward way to separate the relevant parts from the Option_Command class docblock.\n. > wp post create returns the post ID in the output\nOnly if you pass --porcelain.\n. > wp post get defaults to --format=content\nThat's consistent with wp post-meta get etc. We don't yet have wp user get or wp term get yet. I think defaulting to --format=content makes sense in this case.\n\nlist subcommands should support --ids\n\nHow about --format=ids?\n\nand you should be able to specify fields included in output with a --fields argument (e.g. --fields=ID,post_content,post_title\n\nThis would be most useful for including or excluding the post content; need to make sure --format=csv doesn't segfault.\n. > We could add 'ids' support, but I feel we should keep --ids for backwards compat.\nYes, rewriting --ids to --format=ids under the hood would be mandatory.\n. > However, the common use case for get_post_meta() is to return a string. wp user get and wp term get would both return objects \u2014 what would --format=content default to?\nThat's a good point.\n\nThe much simpler solution is to default to --format=table. The fields can be customized with --fields. It's a little more verbose, and infinitely more clear.\n\nSo, how would you get only the post content for a particular post?\nwp post get 123 --format=? --fields=post_content\n. I propose we break out the following items into separate pull requests:\n- [x] implement --format=ids for wp term list (#400)\n- [x] convert --ids to --format=ids for commands that already have them (preserving back-compat) (#405)\n- [x] make wp post get default to --format=table and keep --format=content\n- [x] add ID to wp term create output and add --porcelain flag (#407)\n- [x] implement --fields for both get and list subcommands (#408)\n. Regarding --format=json, note that WP_CLI::print_value() still only checks for --json.\n. Related: #399 \n. I don't see how calling WP-CLI would affect Apache. Could you post more information about the processes that are eating up all the memory? Use something like top or htop.\n. It would be useful if you could figure out what URLs those Apache processes are serving. Not sure how you'd go about doing that.\nSome other things to try, one at a time:\n1) remove wp theme update-all\n2) replace wp plugin update-all with wp plugin update one-particular-plugin\n3) replace wp plugin update one-particular-plugin with wp core version\n. Also, what does wp --info output?\n. I think this belongs in a plugin, as it doesn't expose a core WP functionality.\n. > Using that argument, wp search-replace, wp scaffold, and others would be in the same boat.\nFair enough; here's another one:\nWith wp search-replace, it's a very basic functionality, with only one obvious implementation.\nWith wp scaffold, we want to promote certain best-practices.\nStats, on the other hand, can be collected and displayed in a miriad of ways, for different purposes, with no clear winner.\n\nDo you know of any wp-cli -only plugins?\n\nAll the ones that have 'CLI' in their name + wp-deploy-flow: https://github.com/wp-cli/wp-cli/wiki/List-of-community-commands\n. In general, the question isn't \"Why not bundle command X with WP-CLI?\", but rather \"Why would bundling command X with WP-CLI be better than having it in a plugin, aside from convenience?\"\n. > That's fair. We need a wp-cli package manager :)\nWe have one: http://wordpress.org/extend/plugins/ ;)\n\nCan you create a new repo on this organization for me called \"Content Stats?\"\n\nI can, but I would like to know why you think it would be better to live under the wp-cli org, rather than under danielbachhuber.\n. Note that all the things currently under the wp-cli org are various auxiliary repos for the project.\nThe exceptions, wp-super-cache-cli and google-sitemap-generator-cli are there for historic reasons (ideally, they'd be merged into their respective plugins).\nIf we were to create the wp-cli/content-stats repo, which would basically be an additional command, we'd set a precedent, i.e. other people could come along and say: \"hey, you didn't accept my command into WP-CLI, so how about creating a repo for me under the WP-CLI org?\" I'm not keen on having to manage that.\n. Well, discovery is the reason for the list of community commands page (linked above). I'm open to suggestions for making that more prominent on wp-cli.org and in general.\n. You mean when running just wp? I've actually considered showing only the most used commands, since the list is getting a bit long.\nWhen running something like wp option, I've wanted to include the subcommand descriptions in the synopsis for a while, but haven't found a good way to do it, so far.\n. Related: #548\n. Handled in #405 \n. This seems identical to #400.\n. I would have just continued working on #400.\nAs for the branches, you can rename local ones, but you end up with two remote branches: https://github.com/wp-cli/wp-cli/network so please delete the one you're not using.\n. > For the subcommands that already supported --ids, do we drop the argument from the synopsis? Doing so will produce a warning, and probably break any use of it (including tests)\nShould update the tests to use --format=ids. For back-compat, I was thinking an ugly hack in Runner.\n\nAnd... now the tests fail because of the function in a function issue.\n\nYou could do git rebase term-command-test and close #398.\n. > This isn't an important enough reason to make a breaking change.\nYeah, you're right.\n. +1, except name them --keep-terms, --keep-comments etc.\n. I'm not sure wp core empty_blog is the best name for the command. At the very least, it should be wp core empty-blog.\nI like wp blog empty, but wp blog currently contains only multisite subcommands.\n. > Perhaps it makes sense to make wp blog available to single site and just disallow certain subcommands.\nAgreed.\n. No need for a new PR; either just make another commit that moves the code or rebase.\n. Oh, I see. Ok.\n. > Unfortunately, we can't name a method empty because it is a reserved word in PHP\nSo is list, yet we have a wp post list subcommand. ;-)\n. Since the name and arguments have stabilized, could you create the appropriate man page? You can find examples in the man-src/ directory and instructions in CONTRIBUTING.md.\n. I know it's kind of late, but couldn't wp blog empty be re-implemented by calling wp blog delete + wp blog create?\n. I mean, conceptually, that's what it should be doing, right?\n. So, the idea is to remove the content, but not the configuration.\n. Oh yeah, we'll also need some functional tests for this. Other blog subcommands are currently tested in features/multisite.feature.\n. The WP_CLI::confirm() method also accepts a --yes flag.\n. Looks good.\nThe Travis build failed due to an unrelated glitch. :umbrella:\n. @jmslbam: For future reference, you can create branches in the mainwp-cli/wp-cli repo.\n. I think I'm going to cherry-pick the commits that update the scaffold.feature file and clean up the \"file should exist\" step implementation. Then, you can continue adding tests for wp scaffold plugin etc. Cool?\n. > I was think of an simple function, assertCachedFile to split thing up?\nThat could work. We'll see.\n. This question has a better chance of being answered in the Dreamhost support forums.\nIn particular, you should ask @getsource or @ipstenu.\n. Please share the code for your custom command, so we can have a look.\n. Oh, you're using the Phar archive. I bet that has something to do with it.\n. I think you're getting run_mysql_query() as undefined because it actually is undefined. The Phar archive is generated from the latest stable tag, but you copied the code for your command from the git repo.\nrun_mysql_query() was introduced in 24e45edc6d33385a08ae75349b5050c20d5ef19b\n. I think it would be best to switch to git.\n. Can't find anything wrong so far, although the function tests don't cover the output generated by wp blog (i.e. the usage info).\n. The pattern we use is making the command accept multiple arguments:\nwp sites delete mysite\ncat mysiteslist.txt | xargs wp sites delete\nSo the --file argument becomes unnecessary.\n. We are not going to re-introduce community commands (at least not as bundled into wp-cli, as they were before). In general, when opening an issue, state the problem you're having, not your proposed solution.\nAlso see #335\n. To clarify, I mention #335 because this issue seems to report the same problem, so I think it makes sense to keep discussion in one place.\n. @danielbachhuber I think we could discuss the package manager idea as part of #335 too.\n. From the video:\n./utils/dev-build: line 5: php: command not found\n. It means that MAMP doesn't install php-cli in your PATH. See the MAMP, XAMP etc. section on wp-cli.org.\n. Also, I suggest you try the \"Local install\" instructions.\n. Try this:\nbash\nln -s $(./utils/find-php) /usr/bin/php\n. Looking at this again, it looks similar to wp stat (#402), in that different use-cases will need slightly different implementations. Therefore, it belongs in a community package.\nI'm not interested in working on it, but if someone wants to move it forward, they can copy the code to their own repo:\nhttps://github.com/wp-cli/wp-cli/pull/420.diff\n~~It's under the MIT license.~~ It's in the public domain.\n. > The way I see it working is copying a blog table for table incrementing the site id.\nYou would also have to change the blog URL, at the very least.\n. > I really think this should be in core WP-CLI.\nDo you have one or more arguments to support this opinion?\nLike I said 3 months ago, you're free to use the code, which means you can release it as a community package.\n. > It is native WP functionality to create a new site on a network and copy the settings/content from another site.\nThat's again a matter of opinion. WP core itself, for instance, doesn't have such functionality.\nNow I remember why I said a while ago that there are different use-cases: what if I only want to copy the settings, but not the content? Do I do wp site copy + wp site empty? That seems inefficient.\n. To put it another way, what's the main workflow that this command would enable? The only one I can think of is this:\n1. Create \"skeleton\" site with the desired settings and/or content.\n2. Use wp site copy to create a copy of that base site, for testing or development.\nIf you have other workflows in mind, I would be very interested in learning about them.\n. An alternative to the workflow I mentioned above would be to create a script that creates a new site and configures it from scratch:\nwp core install ...\nwp plugin activate ...\nwp option set ...\nwp post generate\n...\nThis is more precise, but also more work, especially for stuff like nav menus, widgets etc.\n. > You can accomplish this with WP core; it just takes a few steps.\nCould you list those steps? If it involves writing PHP code, it doesn't count. :P\n. So, I said that WordPress Core doesn't have any support for cloning sites (except importing/exporting posts) and I think the steps you described confirm that assertion.\nMoving on: say you manage to populate the database tables with the correct data somehow. What about the attachments?\n. Yes, and if wp site empty was proposed right now, I would think it too belongs in a community package.\nAnyway, if you submit a pull request for wp site duplicate, that works with any WP install, no matter how much data it has, I'll merge it.\n. Me thinks we should also add the post_status column to the default output.\n. Oh, you mean to parse the \"Requires at least:\" and \"Tested up to:\" headers from readme.txt?\n. It would be nice if we could leverage Composer somehow, instead of coming up with yet another package format.\n. I'm also curious how npm was able to start life outside of node.js.\n. The difference would be that Composer (and npm) packages need to be loaded manually, by requireing a particular file, whereas with custom commands, we'd want them to automatically be available.\nSo, my suggestion would be for the wp package command to use Composer internally for managing packages in a particular directory.\nLater, if this takes off, we could create our own Packagist site.\n. Also, this PR explains the implementation, but doesn't explain the goal. There are comments spread throughout various issues, but there isn't a coherent statement anywhere that explains \"this is why WP-CLI needs a package manager\".\n. And when would a command not make sense as a plugin?\n. > wp-cli does some magical loading of the community command(s), or maybe this is handled by require 'vendor/autoload.php';\nYes, at this point, we'll just call it magic. :)\n\nNo way of listing wp-cli -specific commands from wp-cli, without us still publishing a listing of community commands.\n\nThe composer.json schema supports a \"keywords\" argument, so packages could just add the wp-cli keyword and the package command could query packagist.org for it.\n\nSimilarly, there isn't an easy place for us to point people to find community commands.\n\nhttps://packagist.org/search/?tags=cli\n\ncomposer.json now deviates from the Git checkout\n\nThe package command could create a separate composer.json file somewhere else.\n. Since we're on the topic, @tamlyn recently set up a http://wordpress.org/extend/plugins mirror, except as a Composer package repository: http://wpackagist.org/\n. Also note that Composer can be used as a library: https://getcomposer.org/apidoc/master/index.html\n. Maybe it would be possible instead to search for packages that have wp-cli/wp-cli as a dependency.\n. While waiting for the packagist bug to maybe be resolved, there's still one critical question:\nHow do we tell WP_CLI\\Runner about the extra commands?\n. One approach would be for each community command to have something like this in its composer.json file:\njson\n{\n  ...\n  \"autoload\": {\n    \"files\": [\"command.php\"]\n  }\n}\nThen, all wp-cli would have to do is require packages/vendor/autoload.php (which it's already doing in this PR).\n. When I do wp package list, I get:\nsh: line 0: cd: /Users/User/.composer/vendor/wp-cli/wp-cli/php/packages/: No such file or directory\n. Also, wp package should be available without having a WP install, which means all references to WP_Error or is_wp_error() must go.\n. The installer already creates a composer.json file; it would be nice if we could use that, instead of creating a separate one.\nHowever, I'm not sure that core WP-CLI classes such as RootCommand will be available when the command.php file (which would contain the WP_CLI::add_command() call) is loaded.\n. Another problem with having two separate Composer autoloaders is that dependency errors will only show up at runtime.\nFor example, say the Stats package depends on analog=1.0.x and then WP-CLI decides at some point to use analog=2.0.x.\nIf there are two separate autoloaders, the module will install fine, but it will cause a fatal error at runtime.\nIt there is only one autoloader, Composer will (hopefully) detect the dependency incompatibility and prevent the user from installing the Stats package until it's updated.\n~~PS: I think we should call these things \"modules\" instead of \"packages\" since, as seen above, it's easier to distinguish that way from arbitrary Composer packages.~~\nPPS: One way of fixing the race condition from having a single autoloader would be to load core WP-CLI classes separately, before loading vendor/autoload.php\n. It seems like packagist.org might not be the best place for discovering WP-CLI packages, even if tag filtering did work properly.\nI'd like to keep the infrastructure minimal by having a static packages.json file on wp-cli.org that people can update via pull requests.\n. Overview:\n- the list of community packages lives at http://wp-cli.org/package-index/\n  - implementation: powered by Satis\n  - the code lives in a separate repo, called wp-cli/package-index (which I need to set up)\n- the wp package command works without a WP install\n  - implementation: need to add a special case in WP_CLI\\Runner\n- community packages are responsible for bootstrapping themselves\n- community packages are managed via the same composer.json file as the one created via the installer\n  - implementation: manually load essential WP-CLI classes before loading vendor/autoload.php\nAny questions?\n. List of subcommands for wp package:\n- browse - show available packages\n- list - show installed packages\n- install <vendor>/<name> - install a particular package\n- uninstall <vendor>/<name> - uninstall a particular package\n- update [<vendor>/<name> [--version=<version>]] - update one or more packages\n. I created a wiki page, to have a cleaner outlook: https://github.com/wp-cli/wp-cli/wiki/Community-Packages\nOnce we hammer out the rough details, I think it will be easier to abandon this branch and start fresh.\n. Sort or related:\n@srtfisher developed a WP plugin that exposes a wp composer command: http://wordpress.org/plugins/composer/\n. If you look at the installer code, you'll see that it creates an empty composer.json file and adds wp-cli as a required package (and then tries to add Boris as well).\nSo, when a user adds a community package, they won't be changing WP-CLI's composer.json file, but the one that the installer created.\n. If a user does a straight git checkout, we can detect that the vendor/ dir is inside the wp-cli folder and basically block wp package install.\n. I was planning on writing a post on how to work on WP-CLI while using the installer:\nhttps://github.com/wp-cli/wp-cli.github.com/compare/master...post-contributing\n. Yep; for easy access, I did ln -s $HOME/.composer/vendor/wp-cli/wp-cli ~/git/wp-cli.\n. @getsource Can regular DreamHost users update the globally installed version of WP-CLI themselves?\nI'm asking because, currently, we're thinking of installing community packages in the same location.\nFor example, if WP-CLI is installed in /usr/share/wp-cli via the installer, the layout would look something like this:\ncomposer.json\nbin/\n  wp\nvendor/\n  wp-cli/\n    wp-cli/\n    php-cli-tools/\nAfter running wp package install danielbachhuber/stats, it would look like this:\ncomposer.json (modified)\nbin/\n  wp\nvendor/\n  wp-cli/\n    wp-cli/\n    php-cli-tools/\n  danielbachuber/\n    stats/\n. I'm starting to think that the wp package command is kind of redundant. It would be better to teach people to use Composer directly. They could set up a bundle of community packages and then just do:\nwp --require=/path/to/package-bundle/vendor/autoload.php\nAnd, if we land #445 and #514, users will be able to create a global config file that looks like this:\nyml\nrequire:\n  - /path/to/package-bundle/vendor/autoload.php\n  - /path/to/a-single-command.php\nAfter all that is done, we can see if it still makes sense to have a dedicated package index and/or automate certain steps.\n. Guys, I think you're confusing \"simple\" with \"easy\".\nWhat I'm saying is that we should first make the extensibility system simple. Then we can make it easy.\n. For example, we first added support for wp-cli.yml files. They're straightforward to understand and they're a solid foundation to build upon (simple).\nNow, we can add utilities to edit them automatically: #515 (easy).\n. Heck, if all the tickets I mentioned in this thread are solved, you could implement wp package itself as a community package. And that would be a Good Thing!\n. > Correct me if I'm wrong, but you'd like to use wp-cli.yml instead of composer.json to specify dependencies?\nNo, wp-cli.yml would just be used to specify additional PHP files to load. Those PHP files can be anything, including Composer-generated autoloaders.\n. You can find me on Skype if you want to have a more real-time chat (we'll post summaries back here).\n. Ok; I set up a poll: http://www.doodle.com/8my8n34ktz53f2ry#table\nPeople can vote for times that work for them (mind the selected timezone).\n. We had a fairly productive chat that produced an incomplete document:\nhttps://docs.google.com/document/d/1OIBHdmZ2tttbTZT1yjbnju5U3Am8zQQrl4yHR7o-gKQ/\nThe plan is to have another session next week to complete it.\n. Alright, I set up a doodle for the 24th: http://www.doodle.com/arqryx6thkuhd86q\n. Somewhat related: #522\n. It should now be possible to implement wp package as a third-party command. Example\n. An interesting subcommand to have would be wp package submit - it would validate and submit a local package to the WP-CLI package index.\n. We more-or-less finished up the planning document for this thing:\nhttps://docs.google.com/document/d/1OIBHdmZ2tttbTZT1yjbnju5U3Am8zQQrl4yHR7o-gKQ/\nThe plan is for Daniel to start working on this in his own repo(s). Once it's basically working, the code will be transfered to the WP-CLI github org.\n. #571 confirms that we can use a single root composer.json file for everything.\n. Seems fishy indeed; open an issue upstream.\n. Maybe wp command would be a better name: #572 \n. FYI, I found an intermediate solution for installing packages, without needing to manually edit the composer.json file:\ncomposer config repositories.stat vcs https://github.com/danielbachhuber/wp-cli-stat-command\ncomposer require danielbachhuber/wp-cli-stat-command=dev-master\n. There's nothing wrong with editing it manually; it's just less convenient. :)\n. I set up the package index repo: https://github.com/wp-cli/package-index\nHere's the generated page: http://wp-cli.org/package-index/\nNot too shabby, but could use better integration with the rest of the site.\nBut first: wp-cli/package-index#1\n. Implementation discussion will continue in #602.\n. We're not going to add a --trunk option. If you want the absolute latest SVN revision, just do an SVN checkout yourself.\nWe could however add support for --version=nightly.\n. The assumption so far was that the wp-config user + pass is the same as the root user, but you're right that that's not a good idea in production.\nWe started ignoring the default ~/my.cnf file due to #377.\n. Or use mysqladmin and not suppress the default config.\n. It's tricky, because it goes through WP's \"skin\" classes.\n. Related: #472 \n. You need to open a pull request; mentioning the ticket number in the commit is not enough.\n. Being handled in #429.\n. A few thoughts about the formatting:\n1) the versions currently show up in the same color as must-use plugins, which is confusing. They should either be always white or have the same color as the plugin slug.\n2) it would look cleaner if the versions were left-aligned. Example:\nI front-end-editor      2.3\nUA posts-to-posts        1.5.1\n A term-management-tools 1.0\n. We use cli\\Table in commands like wp post list, but I don't think it's flexible enough to produces this kind of output.\n. Oh, I think wp theme status should also show the versions.\n. Well, not quite, because both plugin and theme commands are implemented using the same base class and should generally be symmetric to each other.\n. Looks good. Merging.\n. > I presume this is something that'd fall within core wp-cli\nI'm not so sure. If you look at the list of community commands, you'll notice that there already are at least two plugins that expose such functionality.\nA strong case would need to be made that one true canonical implementation is possible, which works on the vast majority of servers, no matter how big the site.\n. > If it looks like one of the existing, GPL, commands\nJust wanted to note that code that goes into WP-CLI needs to be MIT licensed.\n. Everything is in place for implementing this as a community package.\n. The last build failed because it exposed a logic error: it's trying to create two WP installs using the same database.\nfeatures/bootstrap/../../bin/wp core install --url='http://example.com' --title='WP CLI Site' --admin_email='admin@example.com' --admin_password='password1': Error: WordPress is already installed.\n. So, the problem was that core config wasn't getting called early enough, because the invalid parameters were considered positional.\nDoing argument validation earlier would have prevented the issue. But at least we have a test case for this now.\n. Confirmed bug.\nThe argument parser should give a warning that the format arg expects a value and should ignore it.\n. Unfortunately, if we make Boris a suggested package, people would have two options:\n- run composer require d11wtq/boris=dev-master\n  - this will make their working directory dirty, making it harder for them to contribute back\n- create a new composer.json file with two dependencies: wp-cli and boris\n  - this would be significantly more effort and awkward to work with\nSomething like this would do the trick: http://ripeworks.com/using-composer-globally/\n. Actually, if you looked only a few lines above, you would see that you could also set the WP_CLI_PHP environment variable:\nbash\nexport WP_CLI_PHP=/path/to/php\nhttps://github.com/wp-cli/wp-cli/blob/v0.9.0/bin/wp#L46-48\n. > Btw, this is highly insecure to pipe an external resource to bash.\nIt's not more insecure than downloading a binary file (.phar) and executing it.\nAnyway, I agree that a Phar file would make more sense, for your usecase.\n\nAnyway, building and maintaining phar is not a hard task.\n\nIt kind of is, when you're using Composer heavily:\n- have to write a custom autoloader\n- have to sort between dev dependencies and runtime dependencies\n. > You may still use Composer to load all the dependencies but then you just pack all the vendors into phar.\nNot if we want to allow users to install additional Composer packages. If WP-CLI was distributed as a Phar archive, we'd have to have two autoloaders and two composer.json files:\nThe one compiled into the Phar archive and a separate one inside ~/.wp-cli, which users can modify.\nRelated: #602\n. I remember seeing a CLI project on Github that only did stuff like this (exporting info about WP plugins/themes as JSON). Can't seem to find it again.\n. Oh yeah: https://github.com/tolgap/wp-cli-json\n. Handled in #442 \n. I got this error too a while back. Try deleting /tmp/wp-cli-test-core-download-cache.\n. So, the Travis build failed:\nPHP Strict standards:  Declaration of Plugin_Command::_list() should be compatible with that of WP_CLI\\CommandWithUpgrade::_list() in php/commands/plugin.php on line 8\nAlso, will need to have some dedicated functional tests for wp plugin list and wp theme list and man pages. (All of these things are described in the CONTRIBUTING.md file)\n. When running wp plugin list, the version column doesn't have a header:\n+----------------------+----------+-----------+-------------+\n| name                 | status   | update    |\n+----------------------+----------+-----------+-------------+\n| abl                  | inactive | none      | 1.0.1-alpha |\n| cct                  | inactive | none      | 1.3         |\nwp theme list works fine.\n. All yours, @jmslbam.\n. We should fix #446 in the process.\n. Going to merge this as is; I want to make some changes to the Behat syntax.\n. See #451\n. Another pattern I've seen in several CLI tools is creating a file in the ~/.config/ directory.\n. Note that not all parameters make sense in a global config file; for example, path.\n. A great use-case for this would be #426\n. Note that WP-CLI already has a global --config option, so you can already do:\nwp --config=$HOME/wp-cli-defaults.yml core install\n. Huh, I guess both ~~@jmslbam~~ the original implementor and I had a trailing slash in our WP_CONTENT_DIR definition.\n. Try running wp core download.\n. Ouch.\nUnfortunately, I don't have a cygwin environment handy, so I can't help much.\n. If you want to poke around, you'll find the relavant code in php/commands/core.php.\nRun wp --info to see the exact path.\n. It doens't work because is_absolute_path() merely checks for a leading /\nOn Sunday, May 12, 2013, rpmsk wrote:\n\nIt works! I had many doubts. Tough sledding to get stuff to work in\nwindows when it was designed for linux.\nIn cygwin here are some results:\n$ wp theme status\n4 installed themes:\nA autobahn 1.5\nI genesis 1.9.2\n.. // ..\nI have a band-aide for it at least. The paths were being double in\n~/.composer/vendor/wp-cli/wpcli/WP_CLI/Runner.php in function set_wp_root.\nI simple commented out the following:\n/*if ( !empty( $config['path'] ) ) {\n    if ( self::is_absolute_path( $config['path'] ) )\n        $path = $config['path'];\n    else\n        $path .= '/' . $config['path'];\n}*/\nHere is an example of what was in the ABSPATH constant that is defined in\nset_wp_root before the commenting out ..\nABSPATH: 'F:\\ampp\\htdocs\\myword/\\F:\\ampp\\htdocs\\myword/'\nI am thrilled to use wp-cli in windows. Nice!\nCan you tell why the absolute path boolean does not work here? Would be\nnicer yet to fix the code ..\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/447#issuecomment-17768990\n.\n\n\nhttp://scribu.net\n. Try to apply c8a5b120904579f3e3e7debbd63e8788ad37a12a manually and see if it works without the band aid.\n. Actually, addCommand() is deprecated.\nadd_command() is the preffered method to use.\nOn Sunday, May 12, 2013, Coding Futures Team wrote:\n\nThird party doc section\nhttps://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook\nStates WP_CLI::add_command when it should be WP_CLI::addCommand in examples\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/448\n.\n\n\nhttp://scribu.net\n. Could you share the full error stack trace and any other relevant code?\n. Basically, what I'm asking for is steps to reproduce: \"do X, Y, Z and you'll get error Q\".\n. Ok, and what's the content of the test_wp-cli.php file?\n. Please post the exact code that produces that error. The example code in the docs works fine for me.\n. And I mean the full contents of the file, not just the WP_CLI::add_command() call.\n. Also, humor me by running the following commands:\ntype wp\nwp --info\n. I'm pretty sure that the problem is that you're actually running a really old version of wp-cli, installed in /Users/timnash/git/wp-cli/.\nI've updated installer.sh to catch this situation.\n. The \"alpha\" versions are actually pretty stable. Development is done in feature branches, which are merged only when they're ready.\nI want to continue this \"rolling release\" style for the time being.\n. If you want to stay on a particular version, you can just change the ~/.composer/composer.json file:\nFrom:\n\"wp-cli/wp-cli\": \"dev-master\",\nto\n\"wp-cli/wp-cli\": \"0.9.x\",\nAnd then do an update, as described on http://wp-cli.org\n. Also see wp-cli/wp-cli.github.com#13\n. An example of why this is a good idea:\nIf the \"run\" step automatically checked for errors, the bug in 82af1db8fb3b81c1f31b892f1a8b1eb6fc4b41c4 (calling wp info, instead of wp --info) would have been caught.\n. I initially thought that there was a bug in the Runner class, but it seems the test failure is caused by FeatureContext creating a new test dir for the nested install.\n. I'm going to use this ticket to dump my thoughts on implementation challenges.\n. There are several types of early commands:\n- never ever needs WordPress to be loaded\n  - Example: wp self-update (#522). It is only concerned with the code in WP-CLI.\n- may or may not need WordPress to be loaded\n  - Example: wp help. If it can find the man page, it loads it; if not, it waits for WP and all the plugins to load, then tries again.\n- needs parts of WordPress to be loaded\n  - Example: wp db. It only needs wp-config.php.\n  - Example: wp core. Subcommand are weaved into the bootstrap process.\nWhich type would the backup/restore command be?\n. Thanks for the feedback; really helpful.\nI was afraid of the \"just one subcommand\" bit. I was hoping we could get away with just adding an extra parameter to WP_CLI::add_subcommand(), but I guess we'll have to come up with a more elaborate solution:\n1) Replace direct argument checks with hooks:\ndiff\n- if ( array( 'core', 'download' ) == $this->arguments ) {\n-   $this->_run_command();\n-   exit;\n- }\n+ WP_CLI::do_action( 'before_wp_load' );\n2) Introduce a PHPDoc tag that specifies when a particular subcommand is to be executed:\ndiff\nclass Core_Command extends WP_CLI_Command {\n    ...\n+    * @when before_wp_load\n     */\n    function download( $args, $assoc_args ) {\n. I transformed this issue into a pull request (hub is neat like that).\nPlease try out the doctag-when branch and let me know if it's suitable for implementing the migrate command(s).\n. Super; going in.\n. php.net has a consistent format for describing functions. In contrast, the Codex is like a box of chocolates.\nTherefore, you might as well write a general package for bringing MediaWiki to the command line and then do a light integration with WP-CLI.\nSo, yeah, I agree with @danielbachhuber that this would most likely be a community package.\n. > \"wp core install --man\" doesn't work either.\nwp core install --man works fine for me. You're probably looking for wp core install --help. And wp db create --help works too.\n\nIf you run \"wp db create\" completely empty within a wp directory, it will create a DB called \"Users\".\n\nDoes the directory contain a wp-config.php file or not?\n. Glad you figured it out; I had a similar issue with $_SERVER['HTTP_HOST'], which I solved by creating a wp-cli.local.yml file with a url: defined.\n. Could you use wp core download instead of tar archive, to make sure it's an unmodified version of WP 3.5.1?\n. > So you're saying wp-cli fails when using a local copy of wordpress (via tar extract).\nNo, I just wanted to have reliable steps to reproduce; the tar archive is the only unreliable part, because I don't know what version of WP is in it and which/if files have been changed.\n. > I must be missing something here, because php/commands/core.php includes wp-admin/includes/upgrade.php rather than running either wp-admin/install.php or wp-admin/upgrade.php directly.\nIt doesn't run wp-admin/install.php directly because that file is not geared toward CLI use.\nAnyway, it works for me:\nwp core download --version=3.5.1 --path=/tmp/wp-test-456 --force\ncd /tmp/wp-test-456\nwp core config --dbname=wp_test_456 --dbuser=root --dbpass=asd\nperl -p -i -e \"s/define.*WP_DEBUG.*/define('WP_DEBUG', true);\\ndefine('WP_DEBUG_LOG', true);/\" wp-config.php\nwp db reset --yes\nwp core install --url=http://crazyfastwebsites.com/wordpress --title=Crazy Fast Websites --admin_name=fake_user --admin_password=fake_pass --admin_email=david@davidfavor.com\ncat wp-content/debug.log\ncat: wp-content/debug.log: No such file or directory\n. Maybe there's some encoding problem with the way you create your database.\n. Closing, since there has been no progress in the last 3 months. Feel free to reopen if new information comes up.\n. You're right; it was just a personal preference to have composer available globally.\n. That said, what's the harm? Note that the dev-build script is meant for development work, not for deploying to production.\n. Well, I recently added an INSTALL_DIR variable: wp-cli/wp-cli.github.com#12\nSo, we could add a VERSION variable too.\n. See wp-cli/wp-cli.github.com#13\n. Whad'ya know, wp post-meta is completely borked, for a good while even.\n. @danielbachhuber Any objections?\n. I don't mind; on the contrary.\n. Seems useful, but maybe it would be better to introduce a more generic option instead. Example:\nwp search-replace --skip_columns=guid,ID\n. Actually, we should probably always skip ID columns.\n. I should have asked you to add some functional tests, but I though the search-replace command didn't have any to begin with. Next time.\n. So, what timezone would it use?\n. What about cron's built-in logging? http://serverfault.com/questions/248915/crontab-is-there-any-log-with-begin-and-end-time\n. Anyway, if we were to implement something like this, it wouldn't be as an extra parameter. It would be a class that you would inject only once, before any command is executed. Example API:\nphp\nWP_CLI::set_formatter( new LoggerWithTimestamp( 'Y-m-d H:i:s' ) );\n. Come to think of it, something like this would also make the --quiet flag implementation cleaner.\n. An example for setting a custom logger can be found in 10c987fa.\n. You should try manually installing Composer:\ncd ~/.composer\ncurl https://getcomposer.org/installer | php\nand follow the instructions that it gives you.\n. Well, try to find the path to the MAMP binary and use that:\ncurl https://getcomposer.org/installer | /path/to/bin/php\nSome places to look for it: https://github.com/wp-cli/wp-cli/blob/master/utils/amp-paths.txt\n. > Sorry to keep bugging you, but any ideas what the problem is?\nIt's right there in the log:\nthe requested PHP extension pcntl is missing from your system\nAnyway, Boris is optional.\n. Not sure if I'd make it a built-in command, at first.\nRelated: WordPress-Coding-Standards/WordPress-Coding-Standards#37\n. I still think this should be a community package, mainly because it has a dependency on CodeSniffer.\n. Yes, it's missing the changes that make built-in commands also load before WP (and the requisite API for handling the blog subcommands).\n. Here's the current call chain:\nRunner->before_wp_load()\n  --require handling\nRunner->after_wp_load()\n  Runner->_run_command()\n    WP_CLI::run_command()\n      RootCommand->pre_invoke()\n        RootCommand->find_subcommand()\n          RootCommand->load_command()\nThe idea is to make it look like this:\nRunner->before_wp_load()\n  Utils\\load_command()\n  --require handling\nRunner->after_wp_load()\n  Runner->_run_command()\n    WP_CLI::run_command()\n      RootCommand->pre_invoke()\n        RootCommand->find_subcommand()\nso that internal commands are forced not to rely on WP functionality upon registration.\nI guess the problem I'm really trying to solve is #453. Even though --require now runs before WP is loaded, the command itself doesn't.\n. Another API idea:\n``` php\nWP_CLI::add_hook( 'after_wp_loaded', function() {\n    if ( is_multisite() )\n        $command_class = 'MS_Blog_Command';\n    else\n        $command_class = 'Blog_Command';\nWP_CLI::add_command( 'blog', $command_class );\n\n} );\n```\nAdvantage: keeps WP_CLI::add_command() simple.\nDisadvantage: wp help --gen would need a WP install again to work through all built-in commands.\n. One way to fix the manpage generation problem would be to always register the command, but then selectively disable certain subcommands:\n``` php\nWP_CLI::add_command( 'blog', 'MS_Blog_Command' );\nWP_CLI::add_hook( 'after_wp_loaded', function() {\n    if ( !is_multisite() ) {\n        WP_CLI::block_command( 'blog create' );\n        WP_CLI::block_command( 'blog delete' );\n    }\n} );\n``\n. Dammit, I rebased against thedevbranch and I can't change the merge target for pull requests (not even through the API) so now it lists all the commits from thedev` branch too.\n. I went with the simplest solution, which is to not do any runtime gymnastics with subcommands: e5d5c09c0ad444831b8297f554ffa56673c4624f\n. Merging as-is. Going to figure out WP-less commands in a separate pull request.\n. Looks good to me.\n@jmslbam Any objections?\n. The current code removes the WP_CLI::out() method, which shouldn't have been a public method to begin with.\nI did a cursory search on github and couldn't find any public repos using it directly. If it turns out it's widely used, we can stub it to avoid fatal errors.\n. Was looking at using a third-party logger and I came upon the PSR-3 standard for logger interfaces.\n. When it comes to PHP logging libraries, the main contenders are:\n- katzgrau/KLogger\n  - kind of old fashioned; no commits in the last 11 months\n- Seldaek/monolog\n  - implements PSR-3\n- jbroadway/analog\n  - seems like the most modern (PHP >= 5.3); supports PSR-3 too\n. Going to merge this as is and think about using a separate logging library later.\n. The test currently fails because the test suite doesn't support nested calls, like $(wp option get).\nWe use the And save STDOUT as {VAR} step as a workaround.\n. I suppose it wouldn't be impossible to devise a regex that replaces this:\n$(wp option get)\nwith this:\n$(/absolute/path/to/bin/wp option get)\nand get rid of the workaround.\n. Or we could just set wp as an alias in the subprocess, leaving bash to do the rest.\n. See #475\n. I'm still not convinced there's a bug. In https://travis-ci.org/wp-cli/wp-cli/builds/7552302 the test fails because STDOUT also contains a confirmation message:\nSuccess: Made 1003 replacements.\n. > In this case the current code works, but alternatives I was considering might not.\nYou mean there's some edge case where the command wouldn't work correctly? Please explain.\n. > The bug happens when the iterator then tries to get the next chunk using WHERE guid LIKE %http://example.com% LIMIT 1000 OFFSET 1000, but the columns that have been changed no longer match the LIKE.\nNow I get it. Thanks!\n\nThe tests for this are slow. Would it be worth making chunk size a parameter to facilitate smaller tests?\n\nI would prefer not to make it an explicit parameter.\n. The code looks solid now. Thanks!\n. Man, those tests really are slow.\n. Another option would be to just prepend the path, like virtualenv does:\nPATH=\"$VIRTUAL_ENV/bin:$PATH\"\nexport PATH\n. IMO, the --version parameter should be respected even without a --force flag.\n. Hm... I was actually referring to the case where wp theme install would update a theme if an older version was installed.\nWill mull this over tomorrow; I need some sleep right now.\n. Please rebase to master, which includes #553, and then add a Behat test that exercises the new behavior.\n. I think that the behavior so far (passing --version will possibly delete the existing plugin/theme) is surprising, in a bad way.\nA more consistent behavior would be to ask first: \"A newer version is installed; Overwrite it? [y/n]\". Or the --force parameter, which you initially suggested.\nRelated: #575\n. > confirmation prompts assume the user might not know what they're doing.\nBy that logic, we shouldn't ask for confirmation when doing wp db drop either.\n. Confirmations should be used when performing a destructive operation (yes, \"destructive\" is subjective; such is life). Remember, there is no \"undo\" in CLI-land.\n. Alright.\n. It hangs because it's waiting for input on STDIN:\n$ wp plugin install akismet --version=2.5.7\nInstalling Akismet (2.5.7)\nA different version is installed. Overwrite it? [y/n]\n. While documenting the --force flag, I noticed that it's not quite strong enough. It should overwrite any existing version of the plugin/theme, even if it's the same one.\n. Why the proposed behavior makes more sense:\n- it's conceptually simpler (when you pass --force, it overwrites anything)\n- it's consistent with core download --force\n. Also note that install_from_repo() only handles the wordpress.org case, but the --force flag should have the same effect when used with a zip file, local or remote.\n. > --version doesn't apply to installing from a ZIP\nThat's true; nevermind that part.\n\n\"Yes\" correlates strongly with the confirmation prompt. \"Force\" means what? Ignore the required parameters?\n\n\"Force\" means basically what you said in the pull request description:\nwp plugin delete co-authors-plus\nwp plugin install co-authors-plus --version=3.0.4\nI do realize this PR has kind of wobbled.\n. In fact, the --force flag would be exactly how you described it:\n\nAs such, I'd like a --force flag to make wp-cli install a specific version of a plugin or theme, regardless of what's installed or active.\n. So, bottom line, mea culpa for derailing things. I'll update the PR and merge.\n. Yes and yes.\n. It turns out the WordPress installation machinery has a parameter that would allow implementing the --force flag for zips too. It's called abort_if_destination_exists.\n. Oh, found an even better one: clear_destination.\n. I feel like the version checking code could be simplified further; it seems like it needlessly duplicates logic from the WP upgrader classes.\n. Decided to lose the confirmation prompt and keep it simple.\n. That's because WP-CLI started pretending it's in wp-admin. Long story: #385\n. There are several ways to fix it:\n\na) check defined('WP_CLI') in your plugin code\nb) pass --user=some_admin to WP-CLI\n. The other option is to upgrade to the dev version:\ncd ~/.wp-cli\nphp composer.phar require wp-cli/wp-cli=dev-master\n. @eyedarts The link you pasted returns a 404.\n. Ok, I was able to reproduce the problem. Let's discuss in #741\n. > The use of realpath() here means that the command line option that I'm passing in isn't being respected.\nExample?\n. Also, it would be nice if you packaged the changes you're envisioning as a pull request, so that we can check that they pass tests etc.\n. Cool; let's discuss there.\n. Before: https://travis-ci.org/wp-cli/wp-cli/builds/7605401\n728.1   5 min           5.3     WP_VERSION=latest\n728.2   4 min 42 sec    5.4     WP_VERSION=latest\n728.3   4 min 25 sec    5.3     WP_VERSION=3.4.2\nAfter: https://travis-ci.org/wp-cli/wp-cli/builds/7606251\n733.1   4 min 21 sec    5.3     WP_VERSION=latest\n733.2   3 min 50 sec    5.4     WP_VERSION=latest\n733.3   4 min 57 sec    5.3     WP_VERSION=3.4.2 WITH_RONN=1\n. I just encountered a situation today where wp core config --wp_debug would have been useful.\nA related idea I've had for a while was to use a Mustache template for generating the wp-config.php file, instead of relying on wp-admin/setup-config.php.\n. Let's stay focused; the --template parameter deserves its own issue.\n. To clarify, I was referring to the ability to specify templates in a global wp-cli.yml file.\nHaving wp core config --template=<file> seems like the best approach.\nEven for the case I had, --wp_debug wouldn't have been enough, since I also needed to set WP_DEBUG_LOG.\n. On the other hand, we'd want to avoid duplicating all the logic in wp-config.php, when all we want to do is insert some custom PHP in the middle.\nExample syntax:\nbash\nwp core config --extra_php=<<PHP\ndefine( 'WP_DEBUG', true );\ndefine( 'WP_DEBUG_LOG', true );\nPHP\n. Actually, it turns out that we don't even need the --extra_php parameter, since HEREDOCs are sent to STDIN:\nbash\nwp core config <<PHP\ndefine( 'WP_DEBUG', true );\ndefine( 'WP_DEBUG_LOG', true );\nPHP\n. If you want to get a list of constants, you can check the codex page: http://codex.wordpress.org/Editing_wp-config.php (related: #454)\nThe possible values are infinite, since you can add arbitrary PHP. There would be ongoing pressure to add more and more flags to wp core config, which I'm not looking forward to.\nTherefore, I stand by my opinion that it's better to have the more general command bundled by default into wp-cli, which people can build upon with custom scripts/commands that hardcode common snippets.\nI was so excited by the usefulness of this thing that I'm almost done implementing it. Pull request imminent.\n. See #484\n. > I think it would be nice to add a helper function or functions that may it easy to write to the wp-config.php file.\nThere already is a private method that does that and it's 4 lines of code:\n```\n    private static function modify_wp_config( $content ) {\n        $wp_config_path = Utils\\locate_wp_config();\n    $token = \"/* That's all, stop editing!\";\n\n    list( $before, $after ) = explode( $token, file_get_contents( $wp_config_path ) );\n\n    file_put_contents( $wp_config_path, $before . $content . $token . $after );\n}\n\n```\nSo, not very hard to do.\n. The next step would be to make it mergea-ble into master again (I merged #473 recently).\n1. Update master:\ngit remote add upstream git://github.com/wp-cli/wp-cli.git\ngit checkout master\ngit pull -u upstream\n1. Re-apply changes to the branch (also has the benefit of cleaning up the history):\ngit checkout multisite-find-replace\ngit reset master\ngit commit -a\ngit push -f\n. Or, the more familiar route, merge master into the branch (and resolve conflicts).\n. You squashed all the commits into one, but the parent commit is still the old one. The latest HEAD in master is 5432c54978eb84e497f7b419f2d68416aa2effc1\nSee https://github.com/wp-cli/wp-cli/network\n. Just do this:\ngit reset remote/master\ngit ci -am \"search-replace function modified to perform a search and replace through multisite specific tables\"\ngit push -f\n. Right, ci is a git alias of mine.\ngit fetch upstream\ngit reset upstream/master\ngit commit -am \"search-replace function modified to perform a search and replace through multisite specific tables\"\ngit push -f\n. It's good now.\n. cc: @cyberhobo\n. Just to clear up any misunderstandings:\n@daithi-coombes Do you think you'll have time to continue working on this? Let me know if anything is unclear.\n. Alright. Just shout when you think the code is ready for another review or if you get stuck.\n. > @scribu is this ready for merge? I'm not sure if my bdd is sufficient.\nIt will be ready for merge when all the inline comments are gone: https://github.com/wp-cli/wp-cli/pull/481/files\n(they disappear once the line of code they reference is removed or changed)\n. > One issue is that its failing the CI test (the 3rd ci test) but I can't recreate the failure on my machine\nAre you sure that you're running the tests against WP 3.4.2?\nYou just need to run:\nrm -rf /tmp/wp-cli-test-core-download-cache/\nwp core download --version=3.4.2 --path=/tmp/wp-cli-test-core-download-cache/\nand then run the search-replace tests.\n. It looks good.\nThe only minor complaint I have left is inconsistent use of whitespace. For example:\nisset( $assoc_args['multisite']);\nshould be:\nisset( $assoc_args['multisite'] );\nI'll let you guess what the next one should be:\n} else{\nSee http://make.wordpress.org/core/handbook/coding-standards/php/#space-usage\n. Alright; please combine all your commits into one again.\nI'll merge soon.\n. Merged via #501.\nThanks for getting this off the ground, @daithi-coombes!\n. This looks pretty good. However, wp --path=../wp/core seems to work fine without the patch.\n. Bottom line, I'm going to need a test case that fails without the patch and passes otherwise.\nIt can just be a list of steps to perform, in natural language. I can convert them to Behat steps later.\n. The method dd32 describes would indeed be a valid test case.\nAlthough I think it would require different changes to be made to WP-CLI.\n. Branch doesn't merge cleanly anymore and wasn't the right approach anyway. Closing.\n. Merging as-is, to get some hands-on testing.\n. Need to re-generate the man page.\n. So, by adding the --skip-config flag, would we be making that hack unnecessary, or would we be actually encouraging it?\n\nThis lets us install the project via wp-cli in two parts\nwp core install\nwp core install-network\n\nIsn't that how everyone does it? I guess I don't really understand your workflow.\n. > The wp-config file is tracked in version control, and already has the necessary constants.\nThen the proper solution would be to make wp core install-network work in that scenario, without having to do crazy hacks like checking WP_CLI::$runner->arguments, no?\n. ... which is going to be tricky, since wp core install probably won't work if define( 'MULTISITE', true ); is in there.\n. > I haven't dived into it too deeply though \u2014 there may be another workaround. I'm tricking wp core install by skipping the entire block if WP_INSTALLING\nAh, that part is solved then. Maybe we should rename core install-network to core upgrade-to-multisite and have a new version of core install-network that does both, i.e. install a multisite network starting from an empty database.\n. Sure, that would be even better.\n. Since the command has gotten smarter now, maybe it should share its thought process with the user a little bit.\nI'm thinking something like this:\nInstalled network tables.\nFound multisite constants in wp-config.php.\nSemi-offtopic: I also don't think we need to create the blogs.dir directory anymore.\n. The Behat scenario doesn't test the case when wp-config.php already contains the multisite constants.\nFor instance, you check for define( 'MULTISITE', but the command itself writes define('MULTISITE' a few lines down.\n. And we're going to have to replace the is_multisite() check at the top with something else, since it checks the MULTISITE constant.\n. Rebased after the merge of #523.\n. Cherry-picked the behat test to master: fd3bdfd4ee23c866779aa4f4a4cd24851acc97b0\nRationale: it doesn't test the specific change proposed in this PR and should have been there from the start.\n. You just need to add a functional test for this specific enhancement.\n. Until it gets merged, you can switch your install to this branch.\nFor example, if you installed WP-CLI recently by following the instructions on wp-cli.org, you can do:\ncd ~/.wp-cli\nphp composer.phar require wp-cli/wp-cli=dev-core-network-skip-config\n. You know, I never actually asked what the use-case for this is in the first place. I assume it goes something like this:\n1. You have wp-config.php in version control and\n2. you want to spin un a development or staging instance, but\n3. you don't want/can't populate the DB from a db dump\nCorrect?\n. Oh, I see I did ask about the workflow at the beginning, but didn't cover step 3.\n. I suspect the only way to do this right (i.e. without the incantation in wp-config.php) would be to have a wp core install --network command, which does both the regular install and the multisite install in one go (would probably require some changes to wp-settings-cli.php too).\nBut if, like you said, you're not interested in spending even more time on this, just copy the code from core install-network into a custom command and make it do whatever you want. There's nothing special about it, that I can see.\n. > Instead, you recommend we roll this into wp core install which still doesn't solve the problem of not adding MS constants when they're already present in wp-config.php.\nOn the contrary, it would solve exactly that problem, precisely because everything would be done in one go.\n. But, like I said, it would probably involve some hacks in wp-settings-cli.php, which is better than some hacks in each and every wp-config.php.\n. Wait, I misunderstood what you were saying.\nIf everything would be done in one go, it would be a lot easier to detect if MS constants are present, since wp-config.php would be already loaded (and wouldn't have The Incantation):\nif ( !defined( 'MULTISITE' ) ) {\n  // alter wp-config.php\n}\n// etc.\n. > So if you use --network, then more arguments are required? How do we articulate that in the synopsis? Etc.\nThat's fair; we could add a new command, wp core install-multisite, which indeed has the arguments from both.\nIn general, I think presenting this in an understandable way will be the least demanding challenge.\n. In other words, let's see if we can make this damn thing to work at all first; sweat the details later.\n. It frickin' works! #598\n. That makes sense. @jmslbam Agree?\n. Thinking more about this, yes, we should make --theme default to the current theme (even if it's a child theme), but we should also support --theme=<slug>.\nAdvantages:\n- able to target parent theme or other themes (think multisite installs)\n- parity with --plugin=<slug>\n. Created a dev branch which will be the merge target, until we launch 0.10 (next weekend, probably).\n. Thanks for reporting.\nYeah, I guess that wasn't a problem before #484 because wp-admin/setup-config.php uses wp-config-sample.php, which has WPLANG pre-set in localized versions.\n. I think loading wp-includes/version.php and using the $wp_local_package global makes the most sense.\n. Please paste the exact output of the script.\n. WP-CLI just uses the bulk upgrader from WordPress, so you should file a bug upstream: \nhttp://core.trac.wordpress.org/\n. > The other would be for me to submit a patch for WordPress core that adds checks to Plugin_Upgrader::bulk_upgrade() and Theme_Upgrader::bulk_upgrade() only act if the array passed to them isn't empty.\nPlease do that anyway, regardless of what WP-CLI does.\n. The convention is to use --class=<class-name> but I guess there would be no harm in supporting --class=<className> too.\n. :+1: \n. +1 on wp blog info, but I think we should have wp blog list first.\n. Not sure about wp blog home and wp blog admin. You can already do:\nopen $(wp eval 'echo home_url();')\n. Actually, I'm not that sure about wp blog info either. All the info can already be obtained pretty easily:\nwp option get blogname\nwp option get admin_email\nwp eval 'echo home_url();'\nwp eval 'echo admin_url();'\nwp core version\nThe idea is to have a series of composable commands, which act as building blocks for more complex tasks and workflows.\n. > True, but they are added for convenience. wp blog home is more convenient and less susceptible to a syntax error when typed.\nIn that case, I think think of some more convenience commands for a future pull request:\nwp post permalink\nwp term permalink\nGet rid of wp blog info and I'll merge this thing.\n. A wp open command makes 0 sense. If you're on OSX, just use open. If you're on Ubuntu, use x-www-browser.\n. Also, if someone submitted a pull request for wp home right now, I would probably reject it.\n. I actually added a rule to the wiki a while ago: https://github.com/wp-cli/wp-cli/wiki/Philosophy#stay-focused\n\nIf a command isn't using any WordPress-specific functionality, it doesn't belong in WP-CLI.\n\nThat's why wp open doesn't belong.\n. Let's take this example:\nwp open term-link <term-id>\nThis is wrong for two reasons:\n1) All the subcommand related to terms should live under the term command, not spread all over the place. I've made this mistake once with wp generate.\nThe correct topology would be:\nwp term open <term-id>\n2) It mixes two actions: getting the term URL and opening a URL in the browser. The UNIX way is \"do one thing well\". How it should be:\nPrint the term URL:\nwp term permalink 123\nOpen the term URL in the browser:\nopen $(wp term permalink 123)\n. Closing, since it has no wings. But thanks for sparking the discussion, @johnbillion.\nYou're welcome to open a new pull request that implements #497.\n. We could also have matching admin-url subcommands.\n. Alternative syntax:\nwp post url 123 | xargs open\n. This was handled in #915.\n. The first time I looked at the code, I thought \"where are the subcommands?!\" :)\nThere's a hitch: the site-meta subcommand shouldn't be available on non-multisite installs.\n. That won't work once #468 lands.\nAlternative: #507\n. Related: #523\n. It should be a community command; see #424.\n. Just noticed that Composer has a create-project command, which you pass a package name to use as a skeleton.\nExample using symfony-standard:\ncomposer create-project symfony/framework-standard-edition path/to/install\nSo, you would just need to add a composer.json file to WP-Skeleton with \"type\": \"project\".\n. Actually, since we strive to be backwards-compatible between releases, I'm not sure this makes sense.\nFor renamed commands like wp blog, we should keep http://wp-cli.org/commands/blog/ that points to http://wp-cli.org/commands/site/\n. Off topic indeed. Please open a new issue.\n. I was thinking wp core is-multisite, but wp core is-installed --network also makes sense.\n. Also note that we have a precedent: wp search-replace --multisite.\n. Hm... we have an even older precedent: wp core install-network.\nMaybe it's not too late to change it to wp search-replace --network.\n504\n. > What about some magic behind the scenes such that you could use wp search-replace --network and wp search-replace --multisite interchangeably?\nIf it weren't such a recent addition (I merged it less than 24 hours ago), yes, that's what I would do, but since 0.10 isn't officially released yet, I'm not going to bother.\n. The problem is that, due to how WordPress boots up, we'd have to go even further down the rabbit whole than #598 to make this work in every scenario.\n. What I mean is that doing if ( isset( $assoc_args['network'] ) && ! is_multisite() ) isn't enough.\nIf the multisite tables aren't there, that code won't even be reached.\n. The resolution is that we first need a patch that works.\n. Related: #909\n. The reason you don't see any content is because mvim starts a separate process and immediately exits. So, WP-CLI thinks it's done and deletes the temporary file, before the GUI app has a chance to read it.\nCare to submit your solution as a pull request? (you already have the repo cloned in .composer/vendor/wp-cli/wp-cli/)\n. git commit doesn't work with EDITOR=mvim either.\n. ./utils/dev-build creates a symlink to bin/wp from /usr/bin/, but using the clone from the ~/.composer dir is fine too.\nI removed that confusing step and added more clear instructions for installing straight from git in the wiki:\nhttps://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-git\n. That's pretty much the best possible solution. Thanks for sharing!\n. Link to issue: #505\n. If I run EDITOR=vim wp post edit 1, I get:\nVim: Warning: Output is not to a terminal\nand it doesn't even respond to Ctrl-C.\nIn order for the command to work in both cases, you'd have to decide between the old and new behaviours, depending on what editor was chosen.\n. > As you hint at, wouldn't it be possible in the WP-CLI config to set an option like \"using-non-terminal-editor= true | false\", then throw separate launch functions at each of them?\nYou could add a flag so that one could run something like wp post edit --gui 123, yes.\n\nDo you think this issue is worth investing any time into? In other words, am I a fringe case, or is it worth supporting others who use SublimeText, TextMate, etc...?\n\nI'm tempted to restrict it to well-known CLI text editors - i.e. vim, emacs, nano and pico - and leave other options to be implemented as a community command. See #424.\n. --gui=MacVim is fine.\n. You need to edit man-src/post-get.txt and then regenerate the man page: wp post get --help --gen\n. PS: You should create a new branch in your fork, if you want to open a pull request for this.\n. I took care of it; thanks for reporting.\n. I think it would make more sense to add a wp term assign subcommand. Usage example:\npost_id=$(wp post create ... --porcelain)\nwp term assign <term-id> <taxonomy> $post_id\n. See #722\n. Please paste the output from wp --info.\n. The login-security-solution case should be fixed by the above commit. To test, run:\ncd /usr/share/wp-cli/\ncomposer require wp-cli/wp-cli='0.10.1.x-dev'\n. The first case seems to work too, now:\n$ wp plugin install w3-total-cache --version=0.9.2.10\nInstalling W3 Total Cache (0.9.2.10)\nDownloading install package from http://downloads.wordpress.org/plugin/w3-total-cache.0.9.2.10.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\n$ wp plugin update w3-total-cache --version=0.9.2.11\nDownloading update from http://downloads.wordpress.org/plugin/w3-total-cache.0.9.2.11.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\n. Might be a WP-specific issue. What does wp core version say?\n. Tried the steps using WP 3.5.1; still can't reproduce. Sorry.\n. Yes, the old community commands have been removed from the core package since version 0.8.\nYou need to download a separate plugin from github:\nhttps://github.com/wp-cli/wp-super-cache-cli/archive/master.zip\nAfter you install and activate it, you should see the super-cache command again.\nI asked the author of WP Super Cache to integrate the command directly into the main plugin, but got not response.\n. You download the zip and you install it as a regular WordPress plugin:\ncurl https://github.com/wp-cli/wp-super-cache-cli/archive/master.zip > wp-super-cache-cli.zip\nwp plugin install --activate wp-super-cache-cli.zip\n. On wp-cli.org, you have these instructions:\n\nIf you get a using non-default PHP CLI: message, you should save that path in your .bash_profile file:\nexport WP_CLI_PHP=/path/found/during/install\n\nYou're not supposed to literally use /path/found/during/install as a value, but replace it with the path that the installer found. To try again, do:\nunset WP_CLI_PHP\ncurl http://wp-cli.org/installer.sh | bash\nand then update the value of the WP_CLI_PHP variable in your .bashrc file.\n. I made the installer print the exact line you need to add; thanks for reporting.\n. It looks like you don't have write access to the ~/.composer directory for whatever reason.\nRun sudo rm -rf ~/.composer and then try again.\n. That's alright; the Boris package is optional. WP-CLI should work fine without it.\n. Yes, it would be nice.\n. It seems that ZSH can read  the existing bash completion functions:\nhttp://stackoverflow.com/a/8492043/97998\nGoing to update the instructions on wp-cli.org\n. What do you mean by \"silently does nothing\"? No output or...?\n. If it's doing a redirect, then it's also probably calling exit(); or die();. wp help works because it doesn't load WP at all.\nSimilar: #477\nThere's a long history related to defining WP_ADMIN or not. Most recent episode: #385\n. > It'd be nice if wp-cli warned if the page was redirected.\nGood idea! See #521\n. Instantiating a new Configurator instance to parse the same YML file is not ideal.\nPossible APIs for adding keys to the config whitelist:\na)\n``` php\nWP_CLI::add_command( 'custom', 'Custom_Command' );\nWP_CLI::register_config_key( array( 'foo', 'bar' ) );\n```\nAnd maybe a WP_CLI::get_config( $key ) method to retrieve values.\nb)\nphp\nWP_CLI::add_command( 'custom', 'Custom_Command', array(\n  'config_keys' => array( 'foo', 'bar' )\n) );\n. With b), we could pass the configuration (only the keys specific to the command) to the constructor:\n``` php\nclass WP_CLI_Command {\n  protected $config;\nfunction __construct( $config ) {\n    $this->config = $config;\n  }\n}\n```\n. And each command (not subcommand) could have its own namespace in the YAML file:\nyml\ncore: {\n  admin_email: admin@example.com\n}\ncustom: {\n  foo: some value\n  bar: another value\n}\n. Not sure what you mean by key.yml. Separate YAML file for each command or what?\n. #515 is related, yes, but fairly independent.\n. The advantage of per-command YAML files would be that you could load them on-demand.\nThe disadvantage would be that you could end up with many files that only have one line each.\n. I think a fairly non-controversial approach at this point would be to make WP-CLI read values for associative parameters from the config file.\nFor example, if your wp-cli.yml file looked like this:\ncore install:\n  title: Test Site\n  url: example.com\n  admin_user: admin\n  admin_password: 1\n  admin_email: admin@example.com\nthen you could just run wp core install.\n. I suppose positional arguments could be accommodated:\nplugin install:\n  _: [debug-bar, akismet]\n  activate: true\n. Allowing subcommands to register arbitrary keys would be the next step.\n. > the config paths (global_config_path and project_config_path) are private\nActually, they're just read-only. But yeah, it doesn't make sense to parse the YAML files multiple times.\n. Actually, we could shove any and all config values we find under a particular subcommand's \"namespace\" into $assoc_args. No need to introduce any additional API.\n. @westonruter Yes, a few lines below you'll find a magic getter: https://github.com/wp-cli/wp-cli/blob/14d9ced9d39b1e3b662fe3a31548285034113867/php/WP_CLI/Runner.php#L17-22\n. A drawback of this approach would be that if the name of a command happens to match the name of a global parameter.\nFor example, if someone implemented a wp url command, the url: key in wp-cli.yml would be considered the value for --url=.\n. On the other hand, a top-level wp url command is unlikely. Something like wp url post would be more likely and the url post: key wouldn't conflict.\n. Left out positional parameters, since the use-case is not clear.\n. Instead of assuming composer.phar is present, we could add composer/composer as a dependency and use it as a library.\n. If we were to go back to wp site-meta, we would also have to return from wp site to wp blog, which I'm not interested in doing.\nI believe that just because Core wasn't able to convert from \"blog\" to \"site\" and from \"site\" to \"network\" in the big 3.0 merge isn't a good enough reason to perpetuate that confusing nomenclature in WP-CLI.\n. Unsurprisingly, the wp export command broke. We should fix #525 first.\n. @danielbachhuber Please give this a spin when you get the chance.\n. I find myself overusing git rebase too. It makes the history cleaner, but it's a fake history. Plus, you lose the build results for intermediate commits.\nLet's make a ~~deal~~ pact: no more rebasing of branches. Instead, when a branch gets ~~dirty~~ outdated, we just merge master into it and fix the conflicts.\n. If a branch gets really outdated, we just abandon it and start a new one, with a different name.\n. > Does it properly handle large exports (e.g. 200MB+)? We had some object cache reset hack previously to avoid memory leaks that's been removed.\nNo idea; need to test.\n\nSeems much faster. Do we need the CLI progress indicators back?\n\nI'm not sure how easy it would be to add them back; we'd have to fork even more of the new export API.\n\nI included the CLI arguments in the filename originally so you could easily create multiple export files on a single day without worrying about them overwriting each other. It would be nice to restore those.\n\nI don't think including the CLI arguments verbatim was a good idea to start. We could add their md5 hash though.\n\nNot sure how I feel about removing file_item_count and replacing it with splitting based on file size.\n\nI think it makes sense; the file size is what you really care about when splitting.\n. It's not a good idea because the arguments can get really long and might contain unusual characters (for a file name).\nI understand it's convenient, but it doesn't justify the potential headaches.\n. Copying the relevant code chunk here, for convenience:\nphp\n$append = array( date( 'Y-m-d' ) );\nforeach( array_keys( $args ) as $arg_key ) {\n    if ( $defaults[$arg_key] <> $args[$arg_key] && 'post__in' != $arg_key )\n        $append[]= \"$arg_key-\" . (string) $args[$arg_key];\n}\n$file_name_base = sanitize_file_name( $sitename . 'wordpress.' . implode( \".\", $append ) );\nStill not sold; it would be cleaner to allow the user to specify an \"ID\" for a batch of export files. For example:\nwp export --batch-id=events-for-x --post_type=event\nwhich would generate:\ntestground.wordpress.2013-06-events-for-x.0.xml\ntestground.wordpress.2013-06-events-for-x.1.xml\ntestground.wordpress.2013-06-events-for-x.2.xml\nOr even allow them control of the entire filename format:\nwp export --filename-format='events-for-x-{site}-{date}-{nr}.xml' --post_type=event\n. I guess my beef with the old code is that 1) the filenames generated by default are too dynamic and 2) you can't change the default.\n. Added 'wp_export_new_file' hook: 743092d08e4ef2c8b754ece8e2f17e9474b8b515\nSuggestions for better name and/or better placement (while achieving similar functionality) welcome.\n. Guys, I'm going to merge this pretty much as-is.\nMy hunch is that people will be a lot more likely to submit incremental improvements once they see that the code is relatively clean.\n. getopt() does too little. For some things that we want to do, like detecting unknown parameters, we'd still have to parse the arguments ourselves.\nAnd php-cli-tools' cli\\Arguments does too much, like generating a help screen.\nI think this is one of those cases where DIY is the best approach.\n. Hello,\nThe pull request looks alright, but we're in the middle of rewriting the wp export command using a new API: #525 \nAfter that is done, we can consider adding new parameters.\n. +1 for the --post_type=-feedback syntax.\n. On the other hand, a post type literally called -feedback is legal, right?\n. You could use the new wp network-meta command (see the master branch).\n. > Help is wrong :)\nFixed; thanks!\n\narray (\n0 => 'Ipstenu',\n)\n\nAnd that's why needlessly serialized values suck. If each name was stored in a separate row, you could just do:\nwp network-meta 1 add site_admins scribu\n. Anyway, this seems like a pretty rare occurrence in general; I don't think it deserves a whole new command and I don't see where it would fit as a subcommand.\nSo, I'm thinking \"plugin territory\".\n. Also note that you could just invoke wp shell and fix it up interactively.\n. I changed my mind. Let's implement something like wp network add-admin <user>.\nLE: Reason: it's a general-purpose management feature, not an edge case, as I previously thought.\n. Or, how about wp user add-cape <user>. :)\n. I think I'm going to go with a separate command:\nwp super-admin list [--network=<id>]\nwp super-admin add <user>... [--network=<id>]\nwp super-admin remove <user>... [--network=<id>]\n. Duplicate of #518\n. You're missing a comma in your JSON. Correct:\njson\n{\"foo\": \"bar\", \"foo2\": \"bar2\"}\n. > 1 If the value contained in the database, and the value set by the WP-CLI are the same WP-CLI would return a message.\nYou're right; currently it just aborts, without any message.\n\n2 A good idea would be to add to the man page describing the wp option example for upgrade options with a few values.\n\nOr one could simply learn the JSON syntax (it's not an arbitrary format we just invented, you know).\n. Related: #535\n. Huh... the subcommand already checked $assoc_args['subdomains'], but it just wasn't mentioned in the synopsis.\nThanks for the patch.\n. Not sure why you copied installer.sh here. It belongs in the wp-cli/wp-cli.github.com repo, so if you want to make changes to it (or to the front page of wp-cli.org), please open a pull request there.\n. And, of course, wp export is present in the error log. Related: #525\n. I also noticed that set_wp_root() uses getcwd() as the base but, before that, there's some other code in Runner that absolutizes using the path to the wp-cli.yml file as the base\n. > Nothing more irritating then not knowing how many prompts / steps you have to go, especially when there all a lot of steps.\nAgreed.\n\nI do find myself forgetting parameters from time to time though, and it would be nice if WP-CLI helped me with that.\n\nI think it does a fairly good job of that already: it shows the name of each required associative parameter.\nAnyway, this is just more of a \"what if?\" type of thing. Thanks for the feedback, guys.\n. Yes, we already have WP_CLI::confirm( $msg ), which is used when you run wp db drop, for example.\n\nSomething similar to this is that allows being called from inside the command and pass the response back is what's desired.\n\nNote that the php-cli-tools library (which is bundled with WP-CLI), already has several helpers for that. Specifically \\cli\\question() and \\cli\\choose().\n. Would https://github.com/ericmann/WP-PowerShell be of any use?\n. > I am working with generic command shell.\nWhy? :) PowerShell is bundled since Windows XP, if I'm not mistaken.\n. > So since typical install for wp-cli seems to be as root project\nNot necessarily; the installer that people see on wp-cli.org creates a new project and adds WP-CLI as a dependency.\n\nconvert wp-cli/bin/wp to PHP script\n\nThere are 2 main benefits with having bin/wp as a bash script:\n1) able to choose PHP binary, via WP_CLI_PHP environment variable\n2) able to choose php.ini file that that binary uses\n. > Downside - it won't be available from vendor/bin of root project, since Composer recommends not to add custom bat files there\nNot too worried about that, but it would be nice to have relatively symmetric instructions across operating systems.\n. I imagine something like the following should work:\n1. Configure root composer.json file to fetch WP-CLI from a local git clone.\n2. Make whatever changes to your local wp-cli/composer.json.\n3. Run composer update in the root project.\n. Ok, PR merged. Thanks!\n. Actually, found a problem: The wp.bat file shows up on non-Windows installs too.\n. And while I believe it would be nice to support cmd.exe out of the box, confusing everyone else with the wp.bat file is not worth it.\n. It doesn't break bin/wp, but if you add ~/.wp-cli/bin/ to your PATH, as the installer instructs, you'll end up with both wp and wp.bat.\n. It's asymmetric in the opposite direction: Windows users don't see the bash file, but non-Windows users do see wp.bat.\n. I thought you said Composer would not copy the Bash file if it found a wp.bat file there already.\n. The problem was with tab completions, as you guessed.\n\nvendor/bin/wp.bat on win proxies to wp-cli/bin/wp (still bash)\n\nSince apparently bin/wp should have been a php file, we're already \"doing it wrong\", so yeah, having bin/wp.bat there does help.\nWill see if it causes other issues.\n. No, it's not currently possible.\nPS: Instead of \"Welcome\", you should say \"Hello\".\n. > Is there would be a possibility to add such features in future versions of WP-CLI? For instance via an additional switch.\nIf someone implements it as a separate subcommand, like say wp core invalidate-security-keys and opens a pull request, maybe.\n. I can think of several edge cases: wp-config.php could have all, some or none of the security key constants already defined.\nIt makes sense for you to to automate your task using a custom WP-CLI command or a straight bash script, since you know your environment.\nIt makes less sense to bundle that functionality into WP-CLI by default.\n. The command uses the $wp_local_package variable, found in wp-includes/version.php. See 1df18344b8852ed8a5663b30c0a9c5b47eeb36fe\n. Ok, I guess adding an optional --locale=<locale> parameter to wp core config is reasonable. Care to open a pull request?\n. Or we could do this:\nIf $wp_local_package is set, define WPLANG with the value it has.\nIf $wp_local_package is not set, don't define WPLANG at all (WordPress supports this).\nThis would allow you to then do:\nbash\nwp core config ... --extra-php <<EOB\ndefine('WPLANG', 'whatever');\nEOB;\n. The problem with that would be if $wp_local_package is set and you try to define WPLANG using --extra-php.\n. See #607\n. So, how would someone set up and use this wp.bat?\n. Nevermind, I see you added more thoughts on #542, so let's discuss there.\n. You're probably thinking of wp plugin status.\nIn UNIX-land, we have the tput command, which tells us how wide the terminal window is. It's used in \\cli\\Shell::columns().\n. If the terminal window is really tight, yeah, the table doesn't look very good (and I don't see how it could be fixed), but if it's wider, it automatically expands.\n. That's not acceptable, unless you can use enhanced-admin-links... as the plugin slug, i.e.:\nwp plugin activate enhanced-admin-links...\n. The idea is that wp plugin list is meant as a data-dump command. If you want human-readable output, use wp plugin status.\n. The distinction probably becomes clearer when you use wp plugin list --format=json.\n. > Expanding partial/incomplete information to best match is actually common console behavior.\nIf you mean tab completion, yeah, that would be nice (although still only available in UNIX-land): #212\n\nI must note than in that case the idea should be communicated better to a user.\n\nI'm open to suggestions (it's unfortunate that list shows up before status due to the alphabetical ordering).\n. > So if I type wp plugin activate enhanced and there is only one plugin that matches partial enhanced name then it is the plugin I meant.\nWhat about wp plugin install? We would have to perform an extra request to wordpress.org to get a list of plugins that match.\n. It's one thing to match on command names, which are relatively static, and another to match on all arguments.\n. One way of merging the two subcommands:\n- make plugin status an alias of plugin list\n- make the default format for plugin list be 'status'\n. A similar problem popped up for wp theme get: #804\n. Related: #108\n. The path of truly least resistance would be to pretend the man pages don't exist and just show the basic usage: info. :)\n. On the other hand, I am kind of tired of re-compiling man pages. We could show parameter descriptions etc. inline, like Composer does.\n. Too much? Screenshot?\n. Yeah, that's what #552 is for.\n. That's strange, since plugin update-all calls wp_update_plugins(), just like plugin status does.\n. > As if wp plugin status resulted in a connection to wordpress.org to check the version and wp plugin update-all benefited from the cache\nIf you run wp plugin status multiple times, you will see that it also benefits from the cache (it doesn't hit wordpress.org each time).\n. Like I said above, there's no bug here.\n. Thanks.\nPS: You might be interested in #548.\n. > another option to consider: support argument descriptions + command examples in the PHPdoc for the subcommand.\nI'm listening. Could you whip up a proof of concept that moves, say, core-*.txt into core.php?\n. I think we can continue following the phpDoc standard, which has 3 sections:\n- short description\n- long description (can contain markdown)\n- tags\nFor the long description section, we'll need definition lists, which are supported in PHP Markdown Extra (which we might leverage for rendering in wp help) and Kramdown (which we can use for rendering on the website).\nSo, here's an example for core download:\nphp\n    /**\n     * Download core WordPress files.\n     *\n     * ## Options\n     *\n     * --locale=<locale>\n     * : Select which language you want to download. The --version parameter is\n     *   ignored in this case.\n     *\n     * --version=<version>\n     * : Select which version you want to download.\n     *\n     * --force\n     * : Overwrites existing files, if present.\n     *\n     * ## Examples\n     *\n     *   wp core download --version=3.3\n     *\n     * @when before_wp_load\n     *\n     * @synopsis [--locale=<locale>] [--version=<version>] [--path=<path>] [--force]\n     */\n    public function download( $args, $assoc_args ) {\n. Action plan:\n- [x] convert files in man-src to new format\n- [x] extract the longdesc from the docblock in DocParser\n- [x] use longdesc from dockblock instead of reading from man-src/\n- [x] check that the markdown is parsed ok on wp-cli.org\n- [x] decide what to do with WP_CLI::add_man_dir()\n- [x] move files from man-src into docblocks\n. @Rarst: could you give this a spin?\n. That means that more fails for some reason (and that I got the wrong pipe handle).\nYou should be able to see the error message by piping it explicitly (using the master branch):\nwp help core config --color | more -r\n. 127 is the exit code bash sends if a command is not found. It seems to be the same on Windows: http://msdn.microsoft.com/en-us/library/windows/desktop/ms681382%28v=vs.85%29.aspx#ERROR_PROC_NOT_FOUND\n. Ok, thanks. I guess I'll just have to fire up my old Windows laptop one of these days and figure it out.\n. It seems detecting if a command is available is not so straigthforward: http://superuser.com/questions/175466/determine-if-command-is-recognized-in-a-batch-file/175831#175831\nAlso, I found that the list command is a closer equivalent to less: http://malektips.com/xp_dos_0021.html (but it's not available by default)\n. Decided to skip paging on Windows, since I don't have a Windows machine handy to test either way.\nManual piping should work, though: wp help core config | more.\n. Wait, what's wrong with wp user update bob --user_pass=bobpass?\n. Right; wp user update doesn't accept a user login. We should fix that, instead of adding a new subcommand.\n. We should add the bobpass thing as an additional example in user-update.txt.\n. For the synopsis, I propose replacing <user-login> or <id> with just <user> and explain the possible values in the docs.\n. Just noticing the code now. Apparently, Github doesn't send an email notification when an issue is transformed into a PR.\n. To avoid \"Merge branch user-first-arg into user-first-arg\" commits in the future, you should use git pull --rebase.\nThis sort of rebase is ok, because the commits you're altering haven't been pushed yet.\n. It seems setting the $_SERVER var is not enough. The core install procedure probably uses something else.\n. With the current code, completions are rendered before WP is loaded:\n- pro: noticeably faster completions\n- pro: completions work even for early commands, like wp core download\n- con: completions don't work for commands defined in plugins anymore\n  - they will work for community commands and for commands loaded via --require\n. Hello bvansomeren,\nNo need to apologize; it's a recently introduced bug in the php-cli-tools library (introduced in jlogsdon/php-cli-tools@e051551f45fb833b67d9fe99e0c696dbc6d283f0 and fixed in jlogsdon/php-cli-tools@b9c5b7c26578a3a08a29d23ffbdf2753a5ec7ac8)\nGlad you were able to figure out a workaround in the mean time.\n. Closing this, as we're now using a patched version of php-cli-tools.\n. To be clear, we didn't alter the code; we just added a new git tag to our fork which contains https://github.com/jlogsdon/php-cli-tools/commit/b9c5b7c26578a3a08a29d23ffbdf2753a5ec7ac8, so that Composer wouldn't complain.\n. Yeah, the installer adds \"minimum-stability\": \"dev\" automatically.\n. > Also, what happened in php-cli-tools? :)\nI rebased the master branch. :(\n\nWould it be possible to break out the previous version tags and move them to new branches with proper fixes?\n\nI will release version 0.10.2 shortly, which will point to a stable version of php-cli-tools and will not contain a composer.lock file.\n. v0.10.2 tag created. I recommend you use the installer, as described on http://wp-cli.org.\n. Wait, does WordPress Core support connecting to MySQL via a UNIX socket?\n. Cool; thanks!\n. Yeah, it's been on the backlog for a while: #129 so if you're up for it, great!\n(Closing this as duplicate.)\n. Where would ABSPATH come from? WordPress isn't loaded yet.\n. I agree that throwing an exception when WP_TESTS_DIR isn't set is probably a good idea.\n. > Replace ABSPATH with ../../../\nPlease don't do that. Remember WP_CONTENT_DIR and WP_PLUGINS_DIR.\n. I think we've been overthinking this. We can just fall back to an arbitrary location, like /tmp/wordpress-tests-lib.\nPR incoming.\n. That's strange. What happens if you run curl https://wordpress.org/latest.zip ?\n. > it doesn't create a wp-config.php file\nAny output? What do you get if you run wp core version?\n. Glad you figured it out.\n. @mpeshev also reported the same problem with wp core config and the solution was also to add the -k flag.\n. It's particularly bad because it fails silently. Need to replace _read() with WP_CLI::launch() or something more robust.\n. Handled in #655.\n. @sha-one This is fixed in WP-CLI 0.13.\n. Related to that, wp core version should run even without a wp-config.php file.\n. @wojsmol Your comment is offtopic. If you really want to make a case for your opinion, you should open a new issue.\n. Landing as-is. Can improve wp core version in a separate PR.\n. > Installation and path seems correct when installing wp-cli with MAMP.\nPlease paste the output from wp --info.\n. The installer should have shown some instructions for fixing that. Try running it again:\nrm -rf /Users/urre/.composer/\ncurl http://wp-cli.org/installer.sh | bash\nand paste the output here.\n. When I mentioned WP_CONTENT_DIR and WP_PLUGIN_DIR, I meant that you shouldn't even attempt to guess ABSPATH, because it's impossible.\n. Because when WP_CONTENT_DIR or WP_PLUGIN_DIR is defined, it means that the plugins/ folder can be anywhere, relative to ABSPATH.\nTherefore, you can't reverse-engineer ABSPATH from inside WP_PLUGIN_DIR.\n. > I have set the abspath from the scaffold class.\nThat's a bad idea. It means you have a hardcoded path, which means that the plugin tests can only be run from inside the WordPress install you used to run wp scaffold plugin-tests.\n. That hardcoded path would end up under version control, which is ugly\nand it would subtly discourage collaboration.\nAlso: \"Non tech\" users don't need to run unit tests.\nOn Thursday, July 4, 2013, daithi-coombes wrote:\n\ntrue. We could default to the hard-coded path and have the option to set\nthe env var so users can then run tests against different unittest suites\nif they like, then non tech users would still be able to run the tests\nwithout messing with env vars?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/569#issuecomment-20466576\n.\n\n\nhttp://scribu.net\n. It would be nice to not need the environment variable, but I really don't see a way around it, without losing some flexibility. Sorry.\n. It's not obvious what (--dbpass=<password>) means. I think --dbpass[=<password>] would be clearer.\n. Also, please add some unit tests in tests/test-synopsis.php and run vendor/bin/phpunit to make sure they pass.\n. And if we're going to support --dbpass[=<password>], [--dbpass[=<password>]] should also work.\n. Currently, we generate a bunch of regex strings for all the possible combinations.\nBut maybe we could take a different approach:\n- split the synopsis based on spaces\n- for each part:\n  - check if it's optional (i.e. see if it's wrapped in [ and ])\n  - check if it accepts a value\n  - etc.\nThe main point is: don't be afraid to shake things up. :)\n. > Should I git pull or rebase to get the latest version?\nPlease don't rebase; just merge master into the branch.\n. I don't think merging master will fix the build, though. You don't even reach the Behat tests, since it doesn't pass the unit tests: https://travis-ci.org/wp-cli/wp-cli/jobs/8717091#L107\n. Ok.\n. > Behat doesn't run anymore...\nBehat doesn't even start. It's PHPUnit that hangs. Just run vendor/bin/phpunit locally to see.\n\nand pulling master in neither\n\nIt's just a small merge conflict created by ec4d54403a1a1712c8e40e6b50041446573dc8e7. You should really learn how to resolve these.\n. Hey, you figured it out. :sunny:\nI guess you were right that Behat was the one hanging. It's indeed hard to debug when a process is waiting for input.\n. I moved all the validation logic out of the SynopsisParser class, since it was getting in the way.\nIs there anything else that you want to do here, besides adding more prompts?\n. On a related note, I don't think transforming the 'flavour' attribute into an array and stuffing everything in there was a good idea. Currently:\narray(\n  'type' => 'assoc',\n  'name' => 'foo',\n  'flavour' => array( 'mandatory', 'repeating', 'value-optional' )\n)\nPreferred:\narray(\n  'type' => 'assoc',\n  'name' => 'foo',\n  'optional' => false,\n  'repeating' => true,\n  'value' => array(\n    'optional' => true\n  )\n)\nThe later version makes more sense, because it describes the logic better. For example, 'optional' is either true or false; it can't be both.\n. Yes, two pull requests would be easier to manage.\n. The synopsis parser is in. Please open a new pull request with the changes you made to wp core config etc.\n. The crux of the matter is that WP_CLI::add_command() needs WP_CLI::$root.\nJust for the record, vendor/autoload.php does the right thing:\n1. Registers the PSR-0 and classmap autloaders first.\n2. require $vendorDir . '/danielbachhuber/wp-cli-stat-command/wp-cli-stat-command.php';\nThe problem comes from WP-CLI's logic:\n1. Load vendor/autoload.php\n2. Call WP_CLI::init(), which instantiates WP_CLI::$root.\nTherefore, a more elegant solution is possible: set WP_CLI::$root on-demand:\nphp\nif ( !self::$root ) {\n    self::$root = new Dispatcher\\RootCommand;\n}\n. A temporary file sounds fine.\n. See the response in #477.\n. One idea would be to introduce a --no-interaction flag, which would control if the command aborts or asks for confirmation.\n. One significant difference:\nIf the command asks for confirmation, you don't even need to implement the --yes flag. You can do:\nyes | wp db drop\nBut if the command doesn't ask for confirmation, you do need to implement a --force flag.\nSo, if we settle on always asking for confirmation, we don't need to implement either flag.\n. Why not? Alternative syntax:\nwp db drop < <(yes)\nLook how pretty that is! :)\n. Oh, one other reason why wp db drop has an AYS prompt: it deletes the entire database, not just the WP tables.\n. Dumb question: have you tried the new script with one of your plugins? Is the plugin public?\n. Ok, I guess my question was: what's the use case for running unit tests on a non-local MySQL server?\n. Makes sense; thanks.\nThe reason I ask is because I don't want to make the generated script more complex than it needs to be, since every plugin will have a copy of it and plugin authors will have to update it manually afterwards.\n. The template .travis.yml file contains a call to install-wp-tests.sh and it wasn't updated to account for the extra parameter.\n. Please paste the full error message.\n. Well, just follow the instructions.\nOn Thursday, July 4, 2013, Urban Sand\u00e9n wrote:\n\nSome settings on your machine make Composer unable to work properly.\nMake sure that you fix the issues listed below and run this script again:\nThe suhosin.executor.include.whitelist setting is incorrect.\nAdd the following to the end of your php.ini or suhosin.ini (Example path\n[for Debian]: /etc/php5/cli/conf.d/suhosin.ini):\nsuhosin.executor.include.whitelist = phar\nThe php.ini used by your command-line PHP is: /etc/php5/cli/php.ini\nIf you can not modify the ini file, you can also run php -d option=valueto modify ini values on the fly. You can use -d multiple times.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/577#issuecomment-20461488\n.\n\n\nhttp://scribu.net\n. When users just download wp-cli.phar, there's no Composer installer to check for Suhoshin settings, so users just get no output.\nContext: https://twitter.com/jay_ar/status/426437134556209152\n. 1) The bug you reference is fixed in WordPress 3.5.1, so I'm not sure why you're worried about it.\n2) You should either ignore that alert or see if Suhosin can be configured to not output it at all. It's too paranoid.\n. Just to clarify:\n0) when a PHP CLI script starts, it has limitless memory (that's the default)\n1) we load WordPress, which blindly sets the memory limit\n2) we undo what WordPress did\n. The idea is that a CLI script can use a lot more memory and can run for a long time. For example, when doing a big import/export. That's one of the main benefits.\nWhat happens if you do @ini_set( 'memory_limit', '10G' ); ?\n. You can disable Suhosin (just for CLI scripts):\n1. Run wp --info and open the INI file displayed there.\n2. Add this to the end:\n[suhosin]\nsuhosin.simulation = On\n. It means that Suhosin isn't actually disabled. I don't have Suhosin installed, so you're in a better position to figure out what's happening.\n. It seems woocommerce_prevent_admin_access() is the culprit.\nSee the response to #477 \n. Hello, this place is meant for reporting issues related to WP-CLI. Your question is not about WP-CLI, so it's off-topic.\nTry http://stackoverflow.com/\n. Please merge master into your branch and:\n- [ ] convert custom steps to new download step\n- [ ] combine plugin and theme tests into features/upgradables.feature, since the logic is the same for both\n. > Those functions are ~35 lines of code each, so they deserve their own separate tests I think?\nYes, and Behat has this neat feature where it can parameterize tests; it's called Scenario Outlines and it's used in the upgradables.feature I mentioned to call both wp plugin and wp theme subcommands.\n. The idea is that upgradables.feature should contain parameterized tests that apply to both plugins and themes, while plugin.feature and theme.feature should only contain tests specific to each type of object.\n. Looks good. Please also update man-src/plugin-install.txt and man-src/theme-install.txt.\n. ... and/or the @synopsis tags.\n. I don't quite understand. How do plugins that add a custom login page affect WP-CLI usage?\n. I see. Then it's a duplicate of #477. Please see the comments I made there.\n. Please also paste the output from wp plugin status.\n. Nevermind, I can already see from the backtrace that the plugins involved are lockdown-wp-admin and link-juice-keeper.\n. I could go with making the slug mandatory.\n. ... and generate the theme name from the slug, if --theme_name isn't passed. Currently, it's the other way around.\n. We're in agreement. Care to open a pull request?\n. Also, isn't this you? 6f46c74196e53cf9923559b0b8a79c574bf658f6 :P (#285)\n. No no; referencing old issues from new ones is enough, for context.\n. It turns out that the slug already is mandatory. Your initial example sort-of worked because, since you were missing the quotes, it took \"Road\" as the theme name and \"South\" as the slug.\nSo, #599 wouldn't have helped much.\n. > we're picking it up through the theme name if it's not present.\nOnly if you forget the quotes. Otherwise, you get the usage:\n$ wp scaffold _s --theme_name='Foo bar'\nusage: wp scaffold _s <slug> [--theme_name=<title>] [--author=<full-name>] [--author_uri=<http-url>] [--activate]\n. > Is it fine to leave 'sort of working when you do it wrong' cases out there?\nIt depends on various things:\n- do people get it wrong because they're inexperienced or because the interface is badly designed?\n- how easy would it be to catch the error?\n- etc.\nIn this case, one could make the argument that it would have been better to use --slug=<slug> instead of <slug>. However, that would mean changing wp scaffold theme and wp scaffold plugin too.\nNot sure if it's worth changing at this point.\n. > Piping results of command into a variable and still displaying result message\nYou're looking for the handy tee command.\n\nI've figured out I can pipe the output of the wp post create command to grep to pull out the ID\n\nOr you could use the --porcelain flag.\n. @jmslbam Maybe you don't have error reporting turned on. Try using the --debug flag.\n. No, it doesn't. If you hover over the little (i) icon, you'll see.\n. 83b03bfd3cd1f6200889246809cc95eed05bb25f\n. > Running latest release versions of all components.\nPlease run wp --info.\n\nPS: If you give me access to the Wiki I'll get started on putting things like this in a FAQ\n\nI don't need to give you access, because it's not restricted. Edit away.\n. That's pretty strange, since W3 Total Cache actually comes with a built-in WP-CLI command.\nI think it would be easier to get help if you submitted a bug report from the W3 Total Cache settings page (WP Admin -> Performance -> Support). Tell them I sent you. :)\n. Possibly related: #283\n. I think this was fixed along with #721 in the latest version of W3 Total Cache. Can you confirm, @bvansomeren ?\nLE: The problem was that WP-CLI stopped loading advanced-cache.php from wp-settings-cli.php, which W3TC didn't expect.\n. Related: #587 \n. Same advice as there: submit a bug report from the W3 Total Cache settings page (WP Admin -> Performance -> Support).\n. Ok, closing as duplicate then.\n. See wp-cli/wp-cli.github.com@270fcf1f600e4b79c82c7a018527c1a66b4f4e80\n. No worries. Also see https://github.com/composer/composer/issues/55#issuecomment-20259200\n. Cherry-picked the first commit: 83b03bfd3cd1f6200889246809cc95eed05bb25f\nLeft out the entirely avoidable master-to-branch merge commit.\n. To clarify: Don't merge master into the PR branch unless:\na) you need some new functionality from master or\nb) the branch doesn't merge cleanly into master\n. Please paste the output from the following commands:\nwp --info\nwp core version\n. Please try upgrading WP-CLI first:\ncd /root/.composer/\ncomposer require 'wp-cli/wp-cli=dev-master'\n. > strange, i get. -bash: composer: command not found\nYeah, I should have said php composer.phar.\n\nI just found out that i didn't have the php5-gd package installed on my VPS.\n\nHuh... I think that's and edge case we could handle better.\n. Will handle 2. in #1003.\n. Could you post some minimal steps to reproduce? A Behat test would be even better.\n. Reproduced.\n\nLaunch search-replace before any plugin code gets launched\n\nNot sure how that would help. You'd get an \"incomplete class\" error instead.\n\nWhitelist only PHP base objects, and skip the rest\n\nI think that's the best solution. We have no idea what side-effects instantiating random classes might have.\n. So, the worst possible solution (the current one) is using new. A better solution would be to use clone.\nBut the best solution would be to do the replacements inline, instead of creating new objects or arrays.\n. Turned out that a unit test was more appropriate.\n. Yeah, went for the low-hanging fruit. Inline replacements would still be a good enhancement.\n. I agree that it would be nice to have.\nHowever, the current bootstrapping code (let's call it the WP loader) needs to go pretty deep into WP internals to support all the features that regular WP-CLI commands need.\nThe current wp core update implementation relies on this loader. Supporting updating from older versions of WordPress would require developing and maintaining a separate, minimal, loader.\nSo, if someone wants to take a crack at this, it should be possible to implement it as an \"early\" command (see wp core download for an example, or just ask here, if you're having trouble).\n. wp core download --force is basically what people did manually, before automatic updates landed in Core.\nSo, yeah, I think it's safe to document it somewhere. Maybe in the FAQ?\n. Could you take care of it, as you've had recent, first-hand experience?\n. Thanks! Made a minor change for clarity.\nI wonder why it's necessary to call wp core download --force again, though.\n. Let's figure out what the problem is first. Then we can decide what to do about it. For example, it might turn out that only a slight change to wp core update-db is needed.\n. The problem with removing the version check for wp core update is that WP-CLI goes pretty deep into the WP loading process (we basically forked the whole wp-settings.php file).\nSo, while it may work fine with WP 3.2 (for now; not sure how we might need to change wp-settings-cli.php in the future), it probably won't work with WP 2.7 (the first version that contained automatic updates, I think) and it definitely won't work with any version before that.\nTherefore, I would prefer to make the wp core download --force + wp core update-db flow work better.\n. > Is it possible to download instead latest.zip package compliant to the above article?\nWhat do you think it currently downloads?\n. wp core download --force is good enough.\n. I'm afraid we'll have to break back-compat here, since I don't see a reliable way to convert from <user> <role> to <user> --role=<role> when accepting multiple users.\n. Current syntax:\nwp user set-role 1 editor\nProposed syntax:\nwp user set-role --role=editor 1 2 3\nThe extra --role= is rather jarring. Alternative proposed syntax:\nwp user set-role editor 1 2 3\nAnd it would still allow stuff like:\nwp user list --ids | xargs wp user set-role editor\n. There is a way to make it backwards compatible:\nIf the --role parameter is missing and if there are two positional parameters, assume the second parameter represents the role and convert it to --role=<role>.\n. But does it work without the --path parameter from inside the wp/ dir?\n. Ok, so it means the problem isn't with the --path parameter, but with some custom code in your install.\nTry using the --debug flag. Also, what version of WordPress is it?\n. So, it's the same WP install in both Vagrant and OS X. Could you do a wp --info in each environment?\n. Ok, the same WP-CLI version. Could you try updating both, just to be sure? The latest dev version is 0.11.0-alpha2.\nNext:\n1. What about the database? I see you're using the MAMP PHP on OS X.\n2. Is it a multisite install? If so, do you have a custom $base?\n. Ok, what I meant to ask is: do both databases contain the same data? Not sure if MAMP has a separate mysql server or not.\n. > The only reason why I use MAMP is because I am using wp cli locally for my deployment system.\nThat's not a very good reason, then. You should be able use the PHP binary installed in OS X by default, or install a newer version of php-cli using homebrew.\n. Ok, glad it worked out.\n. I edited the title to be a bit more precise than \"seems broken\".\n\nwp core config appears to try a database access, instead of just writing wp-config.php which seems wrong.\n\nThat's the expected behavior and it's not new. You need to have the database user created before running wp core config.\n. Related: #426\n. I guess we could add a --skip-check flag, but I don't know what the use case would be.\n. Closing as duplicate of #787.\n. For some reason, populate_network() has several is_multisite() checks in it. And wpmu_current_site() checks WP_INSTALLING.\nHypothesis: When multisite was a separate project (WPMU), it most likely supported installing from scratch. These are just remnants from that past era.\n. Actually, this comment from inside populate_network() sheds a different light:\n// When using populate_network() to create another network in an existing multisite environment,\n. @danielbachhuber Could you confirm that this works for your usecase?\n. > I first call wp core is-installed which throws all sorts of errors. Not sure how you feel about accommodating for that.\nThat's a good point. I'll look into that.\n\nI assume the name multisite-install is temporary?\n\nLet's call it a \"working draft\". If no better suggestions arise, it will stay.\n\nWhat do you think about making --admin_user a required parameter to discourage people from using admin?\n\nWe could do that.\n\nIt seems like it has to hack around a lot of issues, and these hacks might cause problems in the future :(\n\nHere are the special measures that are needed:\n- create dummy values for $current_site and $current_blog\n- copy some blocks of code from populate_network()\n- fake some values for early get_site_option() calls\n- alter wp-settings-cli.php to skip ms_site_check()\nI agree that it's a technical risk, but it's not that different from the hacks that were needed to make wp export and wp import work. As long as it doesn't cause instability with other commands, I think it's reasonable.\n. Opened #608, to avoid scope creep.\n. This is the current output from wp core is-installed when there's no database:\n$ wp core is-installed --debug\nWordPress database error Table 'wp_cli_test.wp_sitemeta' doesn't exist for query SELECT meta_key, meta_value FROM wp_sitemeta WHERE meta_key IN ('site_name', 'siteurl', 'active_sitewide_plugins', '_site_transient_timeout_theme_roots', '_site_transient_theme_roots', 'site_admins', 'can_compress_scripts', 'global_terms_enabled', 'ms_files_rewriting') AND site_id = 1 made by include('/Users/User/git/wp-cli/php/wp-cli.php'), require('/Users/User/git/wp-cli/php/wp-settings-cli.php'), require('wp-includes/ms-settings.php'), wpmu_current_site, wp_load_core_site_options\nWordPress database error Table 'wp_cli_test.wp_blogs' doesn't exist for query SELECT * FROM wp_blogs WHERE domain = 'example.com' AND path = '/' made by include('/Users/User/git/wp-cli/php/wp-cli.php'), require('/Users/User/git/wp-cli/php/wp-settings-cli.php'), require('wp-includes/ms-settings.php'), get_blog_details\nWordPress database error Table 'wp_cli_test.wp_blogs' doesn't exist for query SELECT * FROM wp_blogs WHERE domain = 'example.com' AND path = '/' made by include('/Users/User/git/wp-cli/php/wp-cli.php'), require('/Users/User/git/wp-cli/php/wp-settings-cli.php'), require('wp-includes/ms-settings.php'), get_blog_details\nError: Error establishing a database connection\n. And this is the output when there's no database for a single-site install:\n$ wp core is-installed --debug\nError: The site you have requested is not installed.\nRun `wp core install`.\n. I guess you wouldn't need to call wp core is-installed if wp core multisite-install wouldn't error if it was already installed.\n. With 398bc1ff7577cd492cac331a73d4bfd222228d43 you can call wp core install or wp core multisite-install multiple times on the same instance and it won't exit with an error code.\nHowever, that opens up a new can of worms: what if you call wp core multisite-install on an existing install, but with different parameters?\nThe simplest solution would be to check if the arguments match and, if not, throw error.\n. > Is this introducing new, unexpected behavior?\nIt's introducing new behavior; not sure how unexpected it is.\n\nAre there other commands we'll need to change (e.g. installing a plugin)?\n\nMost likely, although not going to do it in this PR.\n\nRe: naming, I could've sworn we agreed upon \"network\" over \"multisite\"?\n\nI went with multisite-install because we already used install-network. But, with the new behavior, I don't think we need to have two separate commands, so we can stick with install-network.\n. > Could we instead introduce wp core is-installed --network? #503 \nI replied there: https://github.com/wp-cli/wp-cli/issues/503#issuecomment-21427795\n. Oh, I remembered what the problem was with having a single command: all the parameters for wp core install would become optional, but only sometimes, which is confusing.\nAnd, again, I went with multisite-install because I didn't want to break backwards compatibility for wp core install-network (you'll notice that install-network is now an alias of multisite-convert).\n. > This is the closest previous conversation I've found, although I feel like there was a different one.\nAlso #504.\nI think we can have a more clear-cut guideline than previously by agreeing that \"multisite\" != \"network\": a multisite install can have multiple networks in it.\nSo, if a flag only affects the current network, it should be called --network. If it affects the whole multisite install, it should be called --multisite.\n. There aren't that many:\nwp plugin activate <plugin> [--network]\n wp plugin deactivate <plugin> [--network]\n wp plugin toggle <plugin> [--network]\n wp search-replace <old> <new> [<table>...] [--skip-columns=<columns>] [--dry-run] [--network]\n. Oh, that was for WP-CLI 0.10.2. In 0.11-alpha there are a few more:\nwp network-meta add <id> <key> <value> [--format=<format>]\n wp network-meta delete <id> <key>\n wp network-meta get <id> <key> [--format=<format>]\n wp network-meta update <id> <key> <value> [--format=<format>]\n wp plugin activate <plugin> [--network]\n wp plugin deactivate <plugin> [--network]\n wp plugin toggle <plugin> [--network]\n wp search-replace <old> <new> [<table>...] [--skip-columns=<columns>] [--dry-run] [--network]\n wp site create --slug=<slug> [--title=<title>] [--email=<email>] [--network_id=<network-id>] [--private] [--porcelain]\nI think they mostly follow the guideline; the only exception might be wp search-replace.\n. Going in as is. Can fine-tune until release.\n. I don't know why people keep missing this, but php-cli-tools already has these sorts of utilities. See https://github.com/wp-cli/wp-cli/issues/541#issuecomment-19826004\n. I set up an API page on the wiki: https://github.com/wp-cli/wp-cli/wiki/API\nI guess we should expose the php-cli-tools utilities as WP_CLI methods: WP_CLI::choose() and WP_CLI::ask()\n. The yellow coloring is a nice touch, but I think we'll stick with calling the php-cli-tools utilities directly.\nThanks.\n. I guess it's fixed then. Could you open a PR with that test case?\n. I guess we could do that, but I'd rather avoid having an arbitrary group of scenarios.\nRegarding this particular issue, I think some detail might be missing, like instead of having a full setup, you only have the files, but the DB tables haven't been created yet.\n. > Should installing a package also handle any dependencies for the package?\nYes; it should do everything that composer require does, basically.\n. Maybe it would be best for the first iteration to have a hybrid approach: offload everything we can to the composer binary and implement the rest in PHP, using the composer lib.\n. As a general guideline, it's more important to re-use the same logic that Composer uses; it doesn't matter at this point if the output it generates doesn't match the style of normal WP-CLI commands.\n. > @scribu Can you give this a bang and checklist any other tasks you'd like to see completed before MVP?\nYeah, I'll take it for a spin soon.\n. The following series of steps fails:\n$ wp package install pixline/wp-cli-theme-test-command\nSuccess: Package installed.\n$ wp package list\nError: There aren't any WP-CLI community commands installed.\nWe need some Behat tests for this.\n. > Oh, and whether we're calling these \"community packages\", \"community commands\", or something else.\nI think \"community packages\" is better because a package can contain anything, not just commands.\nFor example, you might write a package that only calls WP_CLI::set_logger() and defines no commands.\n. I always assumed ~/.wp-cli/vendor would be the destination.\n. I think the rule should be to install into whichever directory the autoload.php file is found.\nWill likely need to move that logic out of \\WP_CLI\\Utils\\load_dependencies().\n. > It would mean we'd need to add the following to ~/.wp-cli/composer.json:\nYes, that's the plan: wp-cli/wp-cli.github.com@b2909a924bb3887cbafef9f4b30c2a4dd96cdea7\n. > It also departs from our current pattern of installing WP-CLI-associated packages in ~/.wp-cli/vendor/wp-cli/wp-cli/vendor (e.g. php-cli-tools and behat)\nThat's not quite true. If you just run the wp-cli.org installer, php-cli-tools will be installed in ~/.wp-cli/vendor/wp-cli/php-cli-tools\n. I think extracting it into a \\WP_CLI\\Utils\\find_composer_autoloader() utility would be best. It can then be used in both places.\n. You should calculate where the composer.json file is, based on the path to autoload.php, and then only modify that.\n. Going to try to land this.\n. Erm... yeah, this needs a lot more work than I thought. But, I think we're getting there.\n. If I'm on a development branch of WP-CLI and I try to install a package manually, I get this:\nProblem 1\n    - Installation request for wp-cli/server-command dev-master -> satisfiable by wp-cli/server-command[dev-master].\n    - Conclusion: remove wp-cli/wp-cli dev-package-manager-v2\n    - wp-cli/server-command dev-master requires wp-cli/wp-cli >=0.11 -> satisfiable by wp-cli/wp-cli[dev-master, v0.11.0, v0.11.1].\n    - Can only install one of: wp-cli/wp-cli[dev-package-manager-v2, dev-master].\n    - Can only install one of: wp-cli/wp-cli[v0.11.0, dev-package-manager-v2].\n    - Can only install one of: wp-cli/wp-cli[v0.11.1, dev-package-manager-v2].\n    - Installation request for wp-cli/wp-cli dev-package-manager-v2 -> satisfiable by wp-cli/wp-cli[dev-package-manager-v2].\nThat's because the server-command package has \"wp-cli/wp-cli\": \">=0.11\".\nNot sure what to do about it right now; I just know that it's a problem.\n. The easiest solution would be to remove the wp-cli/wp-cli requirement from community packages.\nIn wp package list, we could run each package through $package_index->hasPackage( $package ); to distinguish them from ordinary packages.\n$package->getRepository() doesn't help, because RepositoryInterface doesn't have a method for getting the URL it comes from.\n. Related: #665 \n. When WP-CLI is installed as a phar archive, we can't use the bundled autoload.php file, so we'd have to use a separate composer.json\nSo, I think we should resolve #698, so that one could do require: /extra-packages/vendor/autoload.php.\n. Old title: \"Class-level support for @when before_wp_load\"\nNew title: \"wp core should work without a WP install\"\nI replaced the title because there already is class-level support for @when, in the sense that if you put it in the doc description of the class, it will behave as if each of the subcommands has it. For example, wp cli works fine everywhere.\nThat said, I agree that the current behaviour of wp core isn't ideal.\n. At a minimum, it should show the synopsis, whether it has a @when tag or not. This would at least be consistent with the behaviour of wp.\n. @rarst will be pleased. :)\n. Community packages are very much a work in progress. See #602 for the latest discussions. Once that is closed and the dust settles, we will of course update the docs.\nUntil then, if you want to be on the bleeding edge, there's the Community Packages wiki page which should get you started.\n\nAlso the versioning and branching has gone beyond my understanding of it. Did eager-require disappear?\n\nYes, the eager-require branch disappeared because the code was merged into master.\n. Yeah, probably a temporary Github issue.\n. Yeah, I suppose --admin_user= is a bit more descriptive than --admin_name= (the \"correct\" term would have been --admin_slug=).\nLooks good.\n. Ah, yes, because Jekyll assumes that directories that start with an underscore are meant to be hidden.\nNice catch.\n. See mojombo/jekyll#1352\n. > Or perhaps the other way around, get a list of installed plugins for a particular site.\nYou already have wp plugin status for that.\n. You pass the --url=<url> parameter, where <url> is the address of the sub-site.\n. I don't adding this functionality to wp plugin status is the best approach, since you have to query each site's options table to get the info.\nOne idea would be to:\n- implement #40 \n- make wp plugin status <slug> output only the status\nThe syntax would then look like this:\n$ wp site foreach 'wp plugin status <slug>'\nexample.com: active\nsubsite.example.com: inactive\n...\nThis should scale pretty well and you get output progressively.\nThen, to get only the active plugins, you could do:\n$ wp site foreach 'wp plugin status <slug>' | grep ' active'\n. With the latest master, you can implement this functionality in a few lines of bash:\nbash\nfor url in $(wp site list --format=csv --fields=url | tail -n +2)\ndo\n  echo \"$url:\"\n  wp --url=$url plugin status p2p | grep 'Status: '\ndone\nThe key is the new wp site list command. (see #661)\nThe wp site foreach idea was nice on paper, but a flop in practice. (see #667)\n. The regex that converts headers is pretty brittle.\nAnother example: http://wp-cli.org/commands/core/download/ (notice the \"ignored in this case\" part).\nRelated: #551\n. wp-cli/wp-cli.github.com#20\n. They should be order-agnostic. Could you paste the output for the one that errors out?\nAre you sure you aren't missing some quotes?\n. This was probably a side-effect of #435.\n. Previously: #516\nSee https://github.com/wp-cli/wp-cli/wiki/FAQ#error-cant-connect-to-the-database\n. You open the .bashrc file and add a line like the following:\nexport WP_CLI_PHP=/path-to-mamp-php-binary\nObviously, replace /path-to-mamp-php-binary with an actual path.\nThen, re-load the file, by running:\nsource ~/.bashrc\n. You can use .bash_profile instead.\n. This post explains the difference pretty well: http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html\ntl;dr It's a mess.\n. Makes sense.\n. You should look into how WordPress queries the wordpress.org API.\n. > Many prefer homebrew over compiler as it is safer and easier to update, a maintained formula is preferred.\nHomebrew is not a magic bullet. The reason it works is because the wp-cli formula installs an old version straight from Github, which doesn't call Composer.\n. > because Apache required AllowUnicode = Off\nAre you sure? I can install and run the latest WP-CLI version on MAMP (which also uses Apache) just fine.\n. Since we're going to support downloading Phar archives again (see #658), which doesn't require Composer, this should be less of a problem.\n. Did I mention that loading both autoloaders is a bad idea?\nI think this issue is settled: 3afb8b3\n. But yeah, it is tricky to work on this from inside the vendor/ dir, particularly on wp package install.\n. > Did you run into the scenario where php-cli-tools is installed in both vendor directories?\nNope; didn't really try out this branch.\n\nAnd how did you reconcile load order dependencies?\n\nLike this: #571\n. If it's possible to implement, yeah, it would be cool to have a global cache directory. The default location could be ~/.wp-cli/cache.\n. > suggestion on how to handle cache dir configuration? I'd say an env var like $WP_CLI_CACHE_DIR cause its something common to all installs and specific to the system (default dir as suggested)\nOr we could introduce a global wp-cli.yml file: #445\n\nuse curl for everything (core commands already use it for install, so its already a dependency)\n\nNo, we should use the WordPress code for downloading whenever possible. We use curl for wp core download because we have no choice.\n\ncache structure similar to ~/.composer/cache/\n\nNot sure if that makes sense. We just need one level of directories:\nplugins/\n  akismet-1.0.zip\n  debug-bar-0.3.zip\nthemes/\n  p2-0.2.zip\n  twentythirteen-1.3.zip\n\ncache logics (expecially cleaning based on ttl and max size) similar to composer Cache class (maybe borrow some code, both project use MIT license; this would depend on Symfony Finder component)\n\nSeems fine.\nI think it would be best to limit the scope to plugin and theme downloads for now, as the logic is similar between them, but rather different than core downloads.\n. Erm... just hardcode the path for now: ~/.wp-cli/cache. We'll figure out a way to change it later.\nRegarding the directory structure, you mentioning keys reminded of the object cache in WordPress. How about having a single directory, with various prefixes?\nplugin-akismet-1.0.zip\nplugin-debug-bar-0.3.zip\ntheme-p2-0.2.zip\ntheme-twentythirteen-1.3.zip\n. I was curious about how many files you could put in a single directory. Even the venerable FAT32 filesystem supports at least 250 million:\nhttp://stackoverflow.com/questions/466521/how-many-files-in-a-directory-is-too-many/466596#466596\n. Perhaps some of the code duplication could be eliminated by moving the common code to a CacheManager class. \nThen, the PluginUpgrader and ThemeUpgrader classes could each create an instance and use it.\n. Or, since all the upgrader methods are public, you could make the CacheManager a decorator:\n``` php\nclass CacheManager {\nfunction __construct( $class, ... ) {\n    $this->instance = new $class;\n  }\nfunction __call( $method, $arguments ) {\n    return call_user_func_array( array( $this->instance, $method ), $arguments );\n  }\n...\n}\n``\n. Oh, right, the decorator method wouldn't work because the inner instance wouldn't call the decorator's methods internally; it would call its own, directly.\n. Yeah, the Travis docs say not to depend on the$HOME` var: http://about.travis-ci.org/docs/user/ci-environment/#Environment-variables\nI wonder how Composer handles this.\n. That's fine; it makes sense to start with an empty cache dir when testing.\nAnd caching at the HTTP layer also seems fine, as long as it's isolated.\n. Besides the small issues I highlighted above, this looks pretty solid.\n. Something is definitely going wrong on WP 3.4: https://travis-ci.org/wp-cli/wp-cli/jobs/12560212\n. I had already triggered a rebuild before mentioning it and now re-triggered a build for all environments.\nSame pattern: fails only on PHP 5.3 with WP 3.4.\n. It can't be a sporadic connection problem because, like I said, the build has been run 3 times and each time only that particular environment failed.\nAlso note that the problem doesn't appear on the master branch.\n. Wait, you're right; the second error went away. Will try to re-trigger the build one more time.\n. Admitting that 3 data points aren't exactly statistically significant, a plausible explanation could be that sporadic errors just tend to happen more often with older versions of PHP.\n. Just re-ran the faulty build 3 more times; each time it passed. So, going to merge and hope it's not a heisenbug.\nThanks for the great work, @francescolaffi.\n. Fix the tests first.\n. ### --prompt\nThis PR is about showing a prompt when you pass a mandatory parameter without a value:\nwp core config --dbname=foo --dbuser=ano --dbpass\nThe --prompt idea was suggested in #540 and it was meant to work like this:\nwp core config --prompt\nLet's not mix #540 into this PR.\nTests\nUnit tests do not make sense for this.\nAs for Behat tests, take a look at shell.feature (basically, you pipe a file to STDIN).\n. Old direction:\n- change the synopsis from --password=<value> to --password[=<value>] for each command\n- inside each command method: if ( $assoc_args['password'] === true ) WP_CLI::prompt()\nNew direction:\n- don't change any synopses\n- inside the WP-CLI dispatcher: if ( $assoc_args['password'] === true ) WP_CLI::prompt()\nMore details: https://github.com/wp-cli/wp-cli/pull/623#issuecomment-22907342\n. Two ideas:\n- if a command specifies --password=<value> in its synopsis, then it should only care that it gets a value; it shouldn't care if that value was passed directly or via a prompt\n- it's more useful in general to show a prompt than to throw an error, like \"--password needs a value\"\nGoing to  continue work on this PR.\n. Oh, I remember why we wanted to give individual commands control of the prompt: so that they could choose to hide the password input or not: https://github.com/wp-cli/wp-cli/issues/129#issuecomment-20108771\n. I think landing this is fairly uncontroversial at this point (aside from hiding of the password letters, of course). Just needs a refresh.\n. So, you have WordPress installed via Debian's apt-get or...?\n. Any update on this?\n. --url is a global parameter, which means it never reaches any commands; it gets stored in the WP_CLI\\Runner instance.\nIt's mentioned in the synopsis just as an extra reminder for users.\n. I attached the branch to this issue, for convenience.\nThe first two commits make sense, but I think 4b14f6e is wrong. Say you have this command:\n``` php\nclass BeCool_Command {\n/*\n   * @synopsis --handshake[=]\n   /\n   function __invoke( $args, $assoc_args { \n     ...\n   }\n}\nWP_CLI::add_command( 'be-cool', 'BeCool_Command' );\n```\nWhat should happen if I just invoke wp be-cool ?\nNote that the synopsis is not [--handshake[=<secret>]].\n. @jmslbam Any thoughts on the above?\n. Thanks for the response. I think you should focus first on the semantics: \"what should happen?\"\nOnly after that's clear, should you dive into the internals and see how to implement it.\n. One proposal for the semantic problem:\nWhat happens when you run wp be-cool --handshake, when the synopsis is:\na) --handshake=<secret>\nCurrent: Parameter errors: --handshake parameter needs a value\nProposed: Please enter value for --handshake parameter:\nThis would mean that @danielbachhuber's --prompt would be flipped: --no-interaction.\nSo, I guess I was wrong when I said that --prompt should be kept out of the discussion.\nb) --handshake[=<secret>]\nCurrent: Invalid synopsis part.\nProposed: no changes\nc) [--handshake[=<secret>]]\n$assoc_args['handshake'] = true;\ni.e. the parameter behaves as either a flag or an associative arg.\n(\"Current\" means the master branch)\n. Part 2:\nWhat happens when you run wp be-cool (i.e. don't even mention --handshake), when the synopsis is:\na) --handshake=<secret>\nCurrent: Parameter errors: missing --handshake parameter\nProposed: no changes\nI guess this could be a difference between --prompt and --no-interaction.\nb) --handshake[=<secret>]\nCurrent: Invalid synopsis part.\nProposed: no changes\nc) [--handshake[=<secret>]]\nCurrent: nothing\nProposed: no changes\n. Basically, the gist is this: you shouldn't need to change the synopsis from --password=<value> to --password[=<value>] for all commands, just to enable prompting for a value.\nWP-CLI should just prompt for a value by default, or throw an error if --no-interaction is passed.\nWith that said, revamping the synopsis parser wasn't a waste, because the \"assoc arg if it has a value, flag otherwise\" thing will come in handy in the future.\n. Going to cherry-pick 4ab0c4b93592c20ccf7c53abf38695b2f0cdb9fd and add a test for it.\n. Done: 4579bbcdb53c53f0c6e31956e555e73a1959cf47 and 7bd41b7880f70c9deca692d6ea446e74a8e4b8f9.\nThanks.\n. Makes sense, except I would put the modifier at the very end. Care to open a pull request?\n. cc: @danielbachhuber\n. Can't reproduce:\nbash\n$ wp plugin install wordpress-importer\nInstalling WordPress Importer (0.6.1)\nDownloading install package from http://downloads.wordpress.org/plugin/wordpress-importer.0.6.1.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\n$ wp plugin activate --network wordpress-importer\nSuccess: Plugin 'wordpress-importer' network activated.\n$ wp import testground.wordpress.2013-08-04.001.xml --authors=create\n  ... [Lots of output] ...\n<p>All done. <a href=\"http://wp.dev/wp-admin/\">Have fun!</a></p><p>Remember to update the passwords and roles of imported users.</p>\nSuccess: Import complete.\n. @cmmarslender: What's the exact error message you got from WP-CLI?\n. @madhippie: What do you get if you run the following command?\nwp eval 'print_r( get_plugins() );'\n. Actually, nevermind; those questions are not useful. The plugin is clearly installed, but the WP_Import class doesn't exist.\n. It's very strange, because WP-CLI does set the WP_LOAD_IMPORTERS constant:\nhttps://github.com/wp-cli/wp-cli/blob/v0.11.0/php/WP_CLI/Runner.php#L473\n. I think I have a clue. In the wordpress-importer.php file, there's another check that can prevent the WP_Import class from being defined:\nif ( class_exists( 'WP_Importer' ) ) {\n. Thanks!\nI would like to add a test for it, to avoid regressions in the future, but Behat's line-based syntax makes it awkward.\nEdit: Done: 27a2ff1\n. Yeah, that's an unfortunate side-effect of WP_CLI::error() calling exit(1).\nI suppose we could make it throw an exception instead, which would allow more flexibility in how it's dealt with, in WP_CLI::run_command(), for example.\n. And yes, I suppose wp plugin is-installed would be useful too. Care to open a pull request?\n. installed != active.\n. @jtsternberg I don't understand the search=$key syntax. Could you post a complete usage example?\n. Thanks for the neat screenshot. :)\n\nI was really looking for a way to programmatically use the data returned\n\nI don't see how the search=$key syntax would help with that. Just add a --format=json option to wp plugin search and go crazy.\n. I don't see what useful data there is to re-use. For example, wp plugin install needs do its own wordpress.org API request anyway, to get the download link.\n. > Personally, I think it's easier to remember a key from the search results than to remember the slug, especially if it's a long weird one (dsgnwrks-instagram-importer is pretty weird). And sure you can copy/paste, but wp-cli is awesome because your hands don't need to leave the keyboard. ;)\nI agree that it would be nice if you didn't have to copy-paste, but storing the result in a transient and altering every other command is not the way to go.\nHere's an alternative proposal: add an --interactive flag to wp plugin search.\nAfter it shows you the list of results, it shows a prompt:\nComma-separated list of plugins to install (see Key column):\nAnd you enter the numbers: 1, 5, 6 and then the command calls wp plugin install internally, using WP_CLI::run_command().\nBut, I think this interactive feature should be handled in a separate pull request, after we get the basic search functionality right.\n. Oh, I didn't see you already addressed all the points. (https://github.com/wp-cli/wp-cli/network is becoming unwieldy).\nThere are little red 'x' graphics next to your recent commits. Click on one of them.\nAfter you make them go away, it would be nice to add a Behat test for wp plugin search and wp theme search in features/upgradables.feature. See https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-the-tests\n. > Is that a barrier to getting this included?\nYes, it is.\n\n\"Could not open input file: composer.phar\"\n\nThen just download it: curl -sS https://getcomposer.org/installer | php\n. Good. You don't need to run the whole test suite each time; that's what Travis CI is for.\nYou can run just the file:\nvendor/bin/behat --expand features/upgradables.feature\nAnd the --help flag is also informative.\n. Ok, you've run the test suite and it passed. Now you need to write some new tests that cover wp plugin search and make sure those pass.\nThe official Behat docs do a pretty good job of describing how it works.\n\nIf the whole suite doesn't need to be run, I'd recommend https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-the-tests gets updated:\n\nDone: 38c60f387016a589bd9011128cb177ed3a8017a8\n. Super! Going in.\n. You can't because in order to read the wp-cli.yml file, WP-CLI first needs to find the path to PHP.\nThe only way is by setting the WP_CLI_PHP environment variable.\n. > but since version 0.11.0 provide a path to php.ini via by the parameter -c causes the error.\nWhat error?\n. That line was specifically changed to support paths that contain spaces: #604\nRelated: #354\n. Ok. I think a better way would be to introduce a WP_CLI_PHP_ARGS variable.\nThis is more flexible than a WP_CLI_PHP_INI variable, since you can pass both individual ini settings and a path to a full .ini file.\n. No, WP_CLI_PHP_INI was never supported. The PHP binary decides which php.ini it uses.\n. Related: #229 \n. But yeah, not sure why the synopsis validator doesn't kick in.\n. It's a regression. In WP-CLI 0.10.2, it works as expected:\n$ wp plugin install\nusage: wp plugin install <plugin|zip> [--version=<version>] [--activate]\n. It reports it as an error because the $value !== get_option( $key ) check fails. Why does it fail?\n. Right, it fails because the parameter value is a string, as all bash args are, but the value it receives from get_option() is an integer. Using a non-strict comparison should do the trick.\nPreviously: #531\n. Some basic tests in features/user.feature would be nice. You will need Behat for this. :P\n. > 1) Would it make sense to replicate that functionality for roles too? add_cap/remove_cap work on both user and role levels.\nDon't we already have wp user set-role etc.?\n\nis there any working mechanism (as a pattern in the code used already) to check for, say, the number of args, or their type or anything like that?\n\nYes; see php/WP_CLI/SynopsisValidator.php.\n. We already have wp cap add <role> <cap>.\n. The tests look fine, but what do you mean by getting skipped?\n. It looks good. I just need to push out WP-CLI 0.11.1 first.\n. Actually, I found a bug:\n$ wp user list-caps non-existing-user\nWarning: Invalid user ID or login: non-existing-user\nPHP Fatal error:  Call to a member function get_role_caps() on a non-object in /Users/User/git/wp-cli/php/commands/user.php on line 526\n. From experience with maintaining a build server, I've learned that keeping clones in a sane state is not quite as simple as it appears, especially when submodules are involved.\n. WordPress 3.7 has a WP_Upgrader::is_vcs_checkout() method, introduced as part of https://core.trac.wordpress.org/ticket/22704.\n. That's interesting, although it might cause problems, since WP-CLI itself can be extended with custom commands.\n. Another option would be to split the event subcommands into a separate top-level command, which will give you:\nwp crontrol-event list and wp crontrol-event delete\n. From an API perspective, it could be as simple as:\nphp\nWP_CLI::add_command( 'crontrol event', 'CrontrolEventCommand' );\n. Note that this would also open the door for attaching additional subcommands to built-in commands:\n``` php\nclass PluginGithubCommand extends WP_CLI_Command {\nfunction __invoke( $args, $assoc_args ) {\n    // Do it.\n  }\n}\nWP_CLI::add_command( 'plugin install-github', 'PluginGithubCommand' );\n``\n. First of all, let's set some ground rules:\n1. A command is either concrete (i.e. it actually does something), or it's a container for other commands; never both. That means we should not allowwp search-replace remote, becausewp search-replaceis a concrete command that accepts a positional parameter.\n2. Once a concrete command is registered, it shouldn't be possible to overwrite it later.WP_CLI::add_command()` should throw a warning that the command is already registered.\n\nIf I have CompositeCommand wp option, should I be able to register CompositeCommand wp option get?\n\nYes, regardless if wp option get is a CompositeCommand or a concrete command.\n\nDo we want to support fifth- and sixth-level commands?\n\nI don't see why not.\n\nIf I do wp remote and there's no command registered at that level, should it list registered commands the next level down?\n\nYes, even if there's no description. Or maybe we need a new method for adding descriptions to containers.\n\nSimilarly, if I have CompositeCommand wp remote option, should someone should be able to register CompositeCommand wp remote?\n\nI think this is the trickiest question. TBD\n. > With a command like wp remote option get blogname, WP-CLI will look for commands named:\nwp remote option get blogname\nwp remote option get\nwp remote option\nwp remote\nSo, if I pass a thousand IDs to wp post delete, it will do 1002 command lookups?\n. Well, the other idea would be to descend from the root command, as it's currently done.\n. Taking a stab at this.\n. With #1005 landed, you can now do this:\nphp\nWP_CLI::add_command( 'crontrol event', 'Control_Events_Command' );\nBash completions will be overhauled in #212.\n. Actually, since we assign the defaults to a variable, I don't see much benefit in using wp_parse_args(), since array_merge() does the job just fine.\n. @johnbillion will you update your PR or should someone else handle it?\n. Nice catch!\n. Confirmed. This is a regression.\n. --path is a global parameter. I suppose we could make WP_CLI::run_command() respect it by creating a new runner instance.\n. Note that setting the --path parameter would make sense only if WordPress has not been loaded already, since you can't load two WP instances in the same process.\nA more reliable solution would be to open a subprocess, i.e. use WP_CLI::launch().\n. Since this is a non-obvious change (\"why use --path when ABSPATH is already available?\"), it's likely to produce regressions in the future.\nTo prevent this, please add a Behat test that fails without this change and passes otherwise.\nSee https://github.com/wp-cli/wp-cli/blob/v0.11.0/features/flags.feature#L85-101 for an example.\n. See https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-the-tests\n. > What scenario do you wish me to write a test for?\nThe scenario where you encountered the bug, i.e. when using WP_CLI::run_command() with --path, because I don't see any other case where using ABSPATH would be a problem.\n\nA missing directory test is already missing. Is it in the scope of this pull request to add that test?\n\nIt's out of scope and it's already covered, albeit implicitly: https://github.com/wp-cli/wp-cli/blob/v0.11.0/features/config.feature#L59\n. > In essence this changes nothing about the way the download command worked from the command line. It only made it possible to specify a path also when you use it from another command.\nYes, exactly, and you need to add a test for when you use it from another command.\n\nThe issue is that I run this command from a new package of commands through the package manager.\n\nYou can use the --require flag instead, as demonstrated in the example I gave you.\n. Yes, I'll merge it if tests are added. If you want to work on it, you can copy the branch into your own fork and open a separate PR.\n. ... or just start fresh, since this branch is stale now.\n. The fact that, since WP 3.5, we can pre-populate the $wp_filter global might also come in handy.\n. See https://github.com/wp-cli/wp-cli/pull/650#issuecomment-22315392\n. Looks good.\nCould you also add a Behat test for it in features/plugin.feature? See https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-the-tests\n. Thanks!\n. It's interesting that reactphp works with PHP 5.3.\nI was working on an alternative implementation that uses php -S.\nI think it would be best for the time being for both our implementations to live as community packages: \nhttps://github.com/wp-cli/wp-cli/wiki/Community-Packages\n. Here's mine: https://github.com/wp-cli/server-command\n. D'oh. Fixed; thanks!\n. If we're going to show a message, then we should use WP_CLI::success() and WP_CLI::error(), respectively.\n. Nitpick: you need to replace all if( instances with if ( per the WP coding standards.\n. Ok, enought nitpicking. There's a larger problem with _does_exist():\n1. It should be called from inside set_status(), to reduce duplication.\n2. Instead of true, it should return the comment object, which can then be passed whole to wp_set_comment_status().\n3. If it returns the comment object, it shouldn't be called _does_exist() anymore.\n. Much better; thanks.\nWould it be too much to ask to create a features/comment.feature file? It should contain calls to at least the subcommands you touched: wp comment exists and those that use set_status().\n. It looks like only the Behat test remained after the rebase.\nYou have an older commit here: https://github.com/mpeshev/wp-cli/commit/02acc87c8146aab24b235951b88af07a1e935870\n. You might be able to recover the old commits with git reflog.\n. The tests are fine, but the main code changes are missing: https://github.com/wp-cli/wp-cli/pull/653/commits\n. I'm wondering if you get email notifications when the Travis build fails.\n(Feel free to merge origin/master into your branch, to fix the certificate issue and run Behat locally.)\n. @mpeshev, since you'd be able to see if it helps with the certificate issue, if you would like to tackle this, it's all yours.\nIf not, I'll get to it eventually.\n. Fixed in #655 \n. @rmccue You know what the problem is? There's no composer.json file at v1.5.0:\nhttps://github.com/rmccue/requests/tree/v1.5.0\n. Right; just hope you release 1.6 soon (it's been two years! :P).\n. Hello,\nIt's easy to transform it into a pull request: just edit the file through\nthe github interface:\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php\n(there's an \"Edit\" button in the corner)\nIf your changes cause bugs, the Travis CI service will let us know.\nOn Mon, Aug 12, 2013 at 5:53 PM, MattiaG notifications@github.com wrote:\n\nProposed (not tested) solution:\nreplacing line 44 with the following (the last line is the actual line 44\npreceded by \"else \")\nif ( isset( $assoc_args['locale'] ) &&  isset( $assoc_args['version']) {\n  $download_url = 'https://'. substr($assoc_args['locale'],0,2) .'wordpress.org/wordpress-' . $assoc_args['version'] . '-' .$assoc_args['locale']. '.tar.gz';\n  WP_CLI::log( sprintf( 'Downloading WordPress %s (%s)...', $assoc_args['version'], $assoc_args['locale'] ) );\nelse if ( isset( $assoc_args['locale'] ) ) {\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/657#issuecomment-22498890\n.\n\n\nhttp://scribu.net\n. For reference: #666\n. The Phar file can now be downloaded from http://wp-cli.org/builds/phar/wp-cli-nightly.phar\nOr, over HTTPS: https://github.com/wp-cli/builds/raw/gh-pages/phar/wp-cli-nightly.phar\n. Having a Phar file really came in handy today.\nI had an old install of WP-CLI 0.10-alpha running on an underpowered server. When I tried to run composer update, it fatal-errored, complaining that it didn't have enough memory. Scrapped the install and just downloaded the Phar file instead.\n. Now that you've brought it up, I don't see the point in showing the processing time at all. It's not a performance-critical operation and it usually doesn't take too long.\n. You can use time(1) for that.\n. Related: #662\n. It seems you're not the first to be confused by the presence of --url in the synopsis: https://github.com/wp-cli/wp-cli/pull/623#issuecomment-21900183\nWill ponder what to do about it.\n. > I think that, if it's required in the synopsis by the command, WP-CLI should exit with error if missing.\nAgreed.\n. The global parameters are special for a reason: they affect the environment, like the value of ABSPATH, for example. Therefore, I don't think it's necessary (or even wise) to give individual commands access to the raw values.\n@mpeshev That seems like the right direction.\n. Yes, please open a PR, so that we can check if the build passes.\n. @mpeshev's PR: #664\n. I didn't add it in the testcase, but as it's currently implemented in #767, you can also set the URL in wp-cli.yml, which is how it should be.\n. Oh yeah, they're ignored because they're not present in the $assoc_args array. The validator would need to either:\na) be called before the global parameters are split from normal assoc args or\nb) get passed the global parameters (mixed with the assoc args or separately)\n. or\nc) some other solution that I didn't think of. :)\n. I think this is the type of discussion which would be more productive in the IRC channel (I've just registered #wp-cli on Freenode).\n. A simplified overview of the two entities involved:\nConfigurator:\n\ninputs:\nspecification of recognized global parameters (i.e. config-spec.php)\nlist of associative arguments\neffects:\nthe global parameters are extracted out of the list of associative arguments\n\nSynopsisValidator\n\ninputs:\nspecification of recognized parameters (i.e. the synopsis)\nlist of associative arguments\neffects:\nwarning, errors etc.\n\nThe current order of operations is this:\n1. run Configurator\n2. find command to invoke\n3. read synopsis and pass to Validator\n4. invoke command\nSo, a straightforward solution would be to pass the config data to validate_assoc(). If the validator doesn't find a key in $assoc_args, it looks in $config first, before emiting a warning.\n. This would probably make the $ignored_keys data obsolete.\n. Going to handle this in #767, more or less like I described above.\n. Another advantage will be slightly faster builds, since PHPUnit is pre-installed on Travis.\n. The logic is actually correct. There are only some whitespace \"violations\".\nCongrats on your first merged pull request! :cake: \n. I'm not sure how useful this would actually be, at least in its current form.\nExample 1: While trying to get a list of sites in which a plugin is active (#611), using grep produces disappointing results:\nbash\n$ wp site foreach plugin status p2p | grep 'Status: '\n    Status: Active\n    Status: Inactive\n    Status: Inactive\nWhat you would actually want to do is grep through each iteration. Here's how you can do that in bash:\nbash\nfor url in $(wp site list --format=csv --fields=url | tail -n +2)\ndo\n  echo \"$url:\"\n  wp --url=$url plugin status p2p | grep 'Status: '\ndone\nExample 2: wp site foreach plugin list --format=json would generate a series of JSON strings, instead of one unified JSON string:\nbash\n$ wp site foreach plugin list --format=json\nexample.com/:\n[{\"name\":\"akismet\",\"status\":\"inactive\",\"update\":\"none\",\"version\":\"2.5.9\"},{\"name\":\"bad-plugin\",\"status\":\"inactive\",\"update\":\"none\",\"version\":\"0.1\"},...]example.com/subsite/:\n[{\"name\":\"akismet\",\"status\":\"inactive\",\"update\":\"none\",\"version\":\"2.5.9\"},{\"name\":\"bad-plugin\",\"status\":\"inactive\",\"update\":\"none\",\"version\":\"0.1\"},...]\nAnd you can't even pipe each of those JSON chunks to a separate file; you can only pipe the whole output.\nAgain, easy to do with the native bash loop syntax:\nbash\nfor url in $(wp site list --format=csv --fields=url | tail -n +2)\ndo\n  echo \"$url:\"\n  wp --url=$url plugin list --format=json > plugins-$url.json\ndone\n. The master version is currently 0.12-alpha, so it's not the same.\n@michaelryanmcneill Try upgrading WP-CLI: http://wp-cli.org/#update\n. Sorry, I can't reproduce either.\n. Not much we can do here.\n. One solution would be to run the fields through whatever filters the domain mapping plugin sets up.\nNot sure yet if this requires combining the domain and path fields or not, but if it does, I'm fine with that.\n. There are two main ways of resolving this:\na) try to make wp site list output the correct URLs from the start or\nb) prevent the domain mapping plugin from doing a redirect\n. This is yet another side-effect of setting WP_ADMIN to true. See #477.\n. If they're ordered in the way they are defined (which used to be the case), then, if #642 lands, it means that 4-th level commands will always show up either first in the list, or last.\n. I mean, if you have a top-level command, say wp option, with 2 subcommands, defined in this order:\ndelete\nupdate\nThen, if you do WP_CLI::add_command( 'wp option get', 'OptionGetCommand' ), then the order will be this:\ndelete\nupdate\nget\nand you will have no way to control the order then.\n. I closed it since I assumed that no one had any counter-arguments to the objection I raised. Feel free to re-open if that's not the case.\n. I think a flag for controlling if the comments are distributed across all posts or only on one or a few would be really useful.\n. I was thinking more like --post_ids=1,6,43.\n. And --comments should actually be called --count, to match the other generate subcommands.\n. That would imply supporting short flags.\nWe're not going to add a if ( '-h' === $arg ) special case.\n. There are challenges for implementing them in WP-CLI, for each command:\n- how do you extend the @synopsis syntax?\n- how do you ensure they don't conflict with global flags, which would also presumably have a short version?\nLet's say these problems don't appear if you don't allow per-command flags.\nBut I think short flags are bad, in general:\n- need to be passed before positional parameters\n- always need to look up the docs for what each one does\n- not much benefit if you have tab completions\n. I like the idea, but I'm concerned about the details:\n- what about optional parameters?\n- what about flags?\nBut maybe I worry too much. :shipit:\n. At the end of the day, it doesn't matter if it can't handle every possible kind of parameter. It's like tab completions: better to have some than none.\nWe could even later decide to allow individual commands, like wp post list, to handle the --prompt flag themselves (just check if they have an explicit [--prompt] in their synopsis).\n. The difference being that tab completions and the behavior of the global --prompt don't have to be backwards compatible.\n. Some edge cases:\n- for mandatory parameters, what happens if I want to pass a value, and that value is an empty string?\n- for optional parameters, how can commands distinguish between null and empty string?\n. Actually, you're both wrong. :P\nYou should be using \\cli\\prompt().\n. As a new user, it seems broken to me for generic parameters:\n$ wp post list --prompt\n1/3 [--<field>: a\n     =<value>]: a\n    [--<field>: a\n     =<value>]: a\n    [--<field>: a\n     =<value>]: a\n    [--<field>: a\n     =<value>]: a\n    [--<field>: a\n     =<value>]: a\n    [--<field>: a\n     =<value>]: a\n    [--<field>: a\n     =<value>]: a\nIt's not at all obvious how you stop. And the 1/3 count only makes it more confusing.\n. Also, if I do somehow get the idea of just pressing Return, it asks me for a field one more time, before going to the next:\n$ wp post list --prompt\n1/3 [--<field>: a\n     =<value>]: a\n    [--<field>: a\n     =<value>]: a\n     =<value>]:\n    [--<field>:\n2/3 [--fields=<fields>]:\n. It seems php-cli-tools takes care of signals. It would be nice to stop the prompting when the user presses ^D (i.e. Ctrl+d):\n```\n$ wp post list --prompt\n1/3 [--: PHP Fatal error:  Uncaught exception 'Exception' with message 'Caught ^D during input' in /Users/User/.wp-cli/vendor/wp-cli/php-cli-tools/lib/cli/Streams.php:122\nStack trace:\n0 /Users/User/.wp-cli/vendor/wp-cli/php-cli-tools/lib/cli/Streams.php(146): cli\\Streams::input()\n1 /Users/User/.wp-cli/vendor/wp-cli/php-cli-tools/lib/cli/cli.php(122): cli\\Streams::prompt('1/3 [--', '', ': ')\n2 /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/class-wp-cli.php(177): cli\\prompt('1/3 [--', '')\n3 /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/Subcommand.php(72): WP_CLI::prompt('1/3 [--', false)\n4 /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/Subcommand.php(160): WP_CLI\\Dispatcher\\Subcommand->prompt_args(Array, Array)\n5 /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php(213): WP_CLI\\Dispatcher\\Subcommand->invoke(Array, Array)\n6 /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php(217): WP_CLI\\Runner->run_command(Array, Array)\n7 /Users/User/.wp-cli/vendor/wp-cli/wp in /Users/User/.wp-cli/vendor/wp-cli/php-cli-tools/lib/cli/Streams.php on line 122\n``\n. I suggest going withCTRL + D`, since it's a standard way of interacting with CLI programs, but putting up a little notice before starting the prompt dance. Something like this:\n$ wp post list --prompt\nPress Ctrl+D to finish.\n1/3 [--<field>: a\n     =<value>]:\n. Besides, you have to handle the exception anyway.\n. This would also solve the ambiguity between an empty string, which can be a valid input, and termination of input.\n. Alright, extra prompts don't show up after pressing Ctrl+D anymore.\nLookin' good and goin' in.\n. What we could do differently this time around is load the admin utilities only when needed. This should speed up start times a bit.\n. Waiting for the onslaught of failed tests...\n. Thanks!\n. I'm curious what steps you took to do the upgrade.\n. Could you run them again and paste the output?\n. > Also, I noticed that the installer tells the user to update .bashrc, while the homepage instructions says to add the bash completion lines to .bash_profile.\nFixed.\n\nNotice: Undefined index: HTTP_HOST in /Users/jkirtan/.wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php(20) : eval()'d code on line 26\n\nIt seems like there's some funky code in your wp-config.php file, at line 26. Could you paste that block of code?\n. That's not it (it's eval's fault). Look for a line that contains 'HTTP_HOST'\n. One workaround would be to pass --url=your-domain.com or create a wp-cli.yml file:\nurl: your-domain.com\n. Going to investigate potential solutions for the notice in #730.\n. Might want to wait until the dust settles. The tests directory might be moved around:\nhttp://make.wordpress.org/core/2013/08/28/agenda-for-todays-3-7-chat-at-time-2000/#comment-10155\n. Build passed; merging as-is.\n. Yep. With #661 merged, you can do:\nbash\nfor url in $(wp site list --fields=url --format=csv | tail -n +2)\ndo\n  wp --url=$url core update-db\ndone\n.  Yeah, I suppose it makes sense in this case.\nThe correct syntax would be wp core update-db --network.\n. @parse Yes, but you should use an iterator, like in wp site list.\n. Similar: #562\n. How about moving the common logic from wp core config and wp db export to a helper function, in utils.php ?\n. Sorry, I meant extracting the common logic from Utils\\run_mysql_query(). Pretty sure mysql and mysqldump have the same parameter names.\n. Looking at the code, I see a lot of cleanup that could be done. Going to merge this as is and do some refactoring.\nThanks for bringing it up!\n. ?\n. @scottatron Hi, I opened a pull request on your behalf, so that your branch doesn't get lost.\n. This is a pretty interesting idea.\nHave you seen the wp composer command by @srtfisher ?\n. Yep, you could have a simple text file with plugin slugs:\nbbpress\ndebug-bar\n...\nand just feed it to WP-CLI, like so:\ncat plugins.txt | xargs wp plugin install\n. I think this would make more sense as a community package.\n. Why do you think JSON is more appropriate?\n. @Martin1982 Sorry, the JSON question was for @nikolay.\n. The problem with JSON is that it's not really meant to be edited by hand.\nA recent example: in the wp-cli/package-index directory, I switched from JSON to a simple text file because, almost half the time, people got the trailing commas wrong. Note that they were exactly the demographic you mentioned: regular WordPress devs.\nComposer's composer.json has the same problem; I consistently got the syntax wrong, so these days I only use thecomposer config command to make changes.\n. For the record, I don't really care what format @Martin1982 uses, since I don't think a full-on deploy command will ever be bundled with WP-CLI. There are just too many different workflows and to accommodate them all would practically mean re-inventing Chef, Capistrano or SaltStack.\nWe will however probably bundle lower-level commands that make it easier to write deploy scripts. Example: #709\n. You're having this problem because you use $_SERVER['HTTP_HOST'] in your wp-config.php file [1], so this is a duplicate of #676.\n. > This should have some tests too.\nIt does: config.features. Since those tests pass without this PR, it means it's a problem with your install.\n. Oh, if you mean tests for when WP-CLI is installed as part of a larger project, yes, I agree. We don't test that scenario at all currently.\n. Could you rebase this PR so that it doesn't contain the changes from #691?\n. After you've done that, a question: What do you intend to put in these global wp-cli.yml files, considering that it's not yet possible to register and read custom keys (#520)? What's the usecase?\n. Meh; we don't care about this use-case that much anymore. Phar files FTW!\n. You can use __DIR__ instead of dirname(__FILE__).\n. Actually, found that it could do this:\nphp\n$docroot = dirname( WP_CLI::get_runner()->config_path );\nIt's unclear at this point if the current logic in get_toplevel_dir() would be useful for anything else besides the wp server command.\n. If you want to have the same wp-config.phpfile everywhere, my question would be: why not just generate it once and then copy it over using scp or whatever?\n. > Maybe we need a --replace-php argument for replacing PHP in the wp-config.php template.\n\nOr, we could support a --define argument which would accept a key-value pair for constant definition (defining constants if they don't yet exist, or replacing existing definitions if they do).\n\nBoth of those require parsing PHP code. I would rather not do any more of that.\n. I see. So the idea is that you only have to keep a salts.php file under version control, instead of the whole wp-config.php:\nwp core config --dbname=\"...\" --dbuser=\"...\" ... --keys-and-salts=\"$(cat salts.php)\"\nI suppose another option would be to have a --skip-salts flag:\nwp core config --dbname=\"...\" --dbuser=\"...\" ... --skip-salts --extra-php < salts.php\nThe --skip-salts flag seems better, for two reasons:\na) you can pass the content via STDIN, which seems more natural, since it will usually be multiline.\nb) there's nothing stopping a user from using --keys-and-salts as if it were --extra-php, since you can put anything inside salts.php. I think this was the objection that @danielbachhuber was trying to raise.\n. > The PR as it exists doesn't accept arbitrary input.\nLook again.\n\nAll of the arguments passed to wp core config are used for modifying the config template.\n\nThat's what --skip-salts would do too: it would alter the {{{keys-and-salts}}} template var:\nhttps://github.com/wp-cli/wp-cli/blob/v0.11.1/templates/wp-config.mustache#L38\n. Actually, we could make it skip the comments surrounding that variable too.\n. Yes, and please also complete the tasks that @danielbachhuber mentioned above.\n. If you need help with the Behat tests (Behat is to PHP what Cucumber is to Ruby), see https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md\n. Go ahead. It's not very hard to change the tests, once you have them written.\n. The test looks ok. It's probably failing due to the way extra parameters are added behind the scenes. I just fixed that in e5c3195b658e4c78d4f06400d85954b6ddfed808.\nSo, just fix the typo and I'll merge and fix up the test.\n. There. Thanks!\n. Note that @jmslbam is trying to do a similar, but not quite the same, thing in #621.\n. Also related: #623\n. #673 landed, so closing this.\n. > Would you like me to include #520 in this PR as well?\nA topic branch should be about one topic, so please try to avoid it if possible.\nNot all keys that make sense in a project file make sense in a global file, so we need a better whitelisting system. With that in mind, I'm not sure if #520 needs to be handled before or after.\n. The single-wordpress-install-per-server use-case can be accommodated with an alias:\nalias wp='wp --config=/path/to/single/install/wp-cli.yml'\n. This is not about convention. It's about the distinction between a project config file and a WP-CLI config file.\nIt doesn't make sense to look for a project config file outside of the project directory.\n. To make the distinction clearer, the WP-CLI config file should not be called wp-cli.yml. It should be called config.yml and there's no point in looking for a config.local.yml file.\n. Furthermore, some config keys should be ignored in the config.yml file, because they're specific to a given project:\n- path\n- url\n- apache_modules\n. Compromises don't great software make.\nHow is defining an environment variable better than defining an alias or passing a parameter?\n. We are talking past each other:\nYou're saying that we should look for project config files using an environment variable.\nI'm saying that project config files should be different from global config files.\n. I disagree with your assertion that a config file that doesn't support project-specific keys would be of no practical use. Example: the require: key, which @danielbachhuber himself mentioned in #692.\nWhether we go with a limited config file or an inheritance mechanism, wp --info should show all config paths used.\n. Another question: what should happen if the user passes the --config global parameter and there's both a project config file and a global config file?\n. You bring up a good point about cron jobs.\nAdding an environment variable is equivalent to looking for a config file inside the $HOME directory, as opposed to looking for it in the root WP-CLI dir. This would also fix the Phar install scenario.\n. As for the --config param, yes, it should have the highest priority. The question is: should the keys in the global config file be merged in with the rest, or should they be ignored?\nFor example: the $HOME/.wp-cli/config.yml file has path: defined, but the user passes --config=some-config-file.yml which doesn't contain a path: key.\nShould path: from the global config be ignored or not? What if the user wants to ignore it?\n. In other words, --config currently means this: \"Don't look for the project config file in ./wp-cli.yml or ./wp-cli.local.yml. Just use the path I give you.\"\nShould it continue to mean the same thing, regardless of the existence of a global config file? If so, then there needs to be a mechanism for ignoring the global config file. Two possibilities:\n- --no-global-config flag; this is similar to mysql's --no-defaults flag\n- the environment variable proposed by @nikolay, which could be used inline: WP_CLI_CONFIG=/dev/null wp core config ...\n. Was working through this with @danielbachhuber and all hard-coded solutions seemed to have at least one significant drawback:\n- per-install (look for config file inside the WP-CLI install dir) - not possible to use for Phar files\n- per-system (look for config file in some hardcoded path that is readable by all users)  - can\u2019t have more than one WP-CLI install\n- per-user (look for config file in `$HOME/.wp-cli.yml) - it\u2019s not system-wide and doesn\u2019t work for Cron\nIn the end, I think that the most elegant solution is the environment variable:\n- it can be defined per-system or per-user\n- in can be overwritten (and disabled) per-command or per-session\n- it works fine for Phar archives\nSo, I'm going to check WP_CLI_CONFIG_PATH environment variable (empty by default).\nAlso, I'm going to remove the --config global parameter, which becomes redundant and had a rather confusing behavior anyway. If you want to overwrite a per-project config key, just pass it as a parameter.\n. > Are you going to finish this PR then? I don't mind, but I'd like to have it done before proceeding with community packages?\nYes, I'm already neck-deep in refactorings.\n\nAlso, it's not clear from your description where the default config.yml will be located. Keep in mind we need it to require the community packages. If the environment variable is empty, will it look in a default location?\n\nFor now, no default location. TBD.\n\nCan we offer backwards compat then? I have a number of projects which, for the sake of convenience and having code in version control, use the --config argument.\n\nYou should be able to replace this:\nwp --config=/some/path core\nwith this:\nWP_CLI_CONFIG_PATH=/some/path wp core\n. Added deprecated --config= parameter. Note, however, that it doesn't replace the project config file anymore.\n. I think I'm going to set the default path to $HOME/.config/wp-cli.yml since it seems to work in the majority of cases and of course users can change it by defining WP_CLI_CONFIG_PATH.\nThe only other consideration would be that non-absolute paths are relative to the directory in which the wp-cli.yml file lives in, and require: ../wp-cli-packages/vendor/autoload.php seems fine (The wp-cli-packages folder would be in the $HOME dir).\n. With the global config in $HOME/.config/wp-cli.yml, it doesn't really matter if it's a Phar archive or a git checkout. The wp-cli-packages dir is relative to the config path, not to the install path.\n. That's how it works with the setup I described. I can't think of a good answer for the \"how should it work?\" question.\n. Why does this PR have an \"Implement wp theme get\" commit?\nYou can remove it by using git rebase -i master.\n. I see. Well, now that the other branch is merged, you can rebase.\nMaybe it would make more sense to work in a \"danielbachhuber\" branch, when you're on a committing spree like this next time. :)\n. For persistent caches, like memcache, you would just need to make a call to wp_cache_incr(), with the id of the bucket that holds the transient keys. (I don't know that ID).\n. The like_escape() utility from WP should be used.\n. Landed in #1090.\n. Build fails. Also, it would be nice to reduce the number of calls to wp theme install.\n. I would suggest combining several scenarios into one that calls both wp theme path and wp theme get, since they don't have any side-effects.\n. If Given a WP install with the p2 theme caches the download, that could also work.\n. but it can be a separate step:\nGiven a WP install\nAnd a P2 theme\n. php -l doesn't execute the file; it just validates it. So, you don't need to run it through WP-CLI.\n. You should ask on http://stackoverflow.com/\n. The idea is that there are a zillion possible configurations and going through all of them here doesn't make sense.\n. Here's another bad idea:\n- wp db export - exports the whole db\n- wp db export --url=example.com - exports only the given site\nThe problem is that omitting --url in a multisite instance doesn't work reliably. Also, the url can be specified in wp-cli.yml\n. Or, how about we expose a lower-level utility:\nwp db list-tables | xargs wp db export\nModified synopses:\nwp db list-tables [--url=<url>] [--network[=<id>]]\nwp db export [<table>...]\n. > what about also a wp db export --search=staging --replace=www, so not having to mutate DB in place?\nThat would mean that we can't use mysqldump, which is really fast.\n. @westonruter Can you just share that script in a gist?\n. That makes sense. It would be similar to how   sed works.\nOn Saturday, November 30, 2013, Weston Ruter wrote:\n\nYeah, sorry, this has been on my todo list for awhile but it got sidelined.\nI've been thinking about it, and I think that actually the translating\nexport functionality here would be better located in the search-replacecommand, rather than adding\n--search and --replace to the export command. For example:\nwp search-replace www.example.com staging.example.com --export=staging.sql\nIf the --outfile option is supplied, then search-replace would not do a\n$wpdb->update in place, but rather would write $wpdb->prepare'd SQL out\nto a file (or to STDOUT if -).\nThoughts?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/709#issuecomment-29543037\n.\n\n\nhttp://scribu.net\n. Thanks!\n. Maybe it would make more sense to use Utils\\format_items().\n. This at least fixes the immediate bug. I'll merge it as is and see if it makes sense to use format_items().\n. Yeah, the name really should be more specific. Proposals:\n- wp rewrite apache-rules\n- wp rewrite htaccess-rules\n. > The rules that get output will be server-dependent though\nRight, but WP-CLI doesn't know the type of server, unless you tell it.\nThere was a discussion in some other ticket about adding a server: config value to wp-cli.yml, but I can't find it now.\n. This week.\n. Done: http://wp-cli.org/blog/version-0.11.2.html\n. Seems useful, but maybe we should wait to see if language packs finally land in WP 3.7 first.\n. I don't think translations are stored in the SVN repo mentioned in the codex anymore. For example, on http://ro.wordpress.org you can download WP 3.5.2, but in the SVN repo, you only have 2.9.2: http://i18n.svn.wordpress.org/ro_RO/tags/\nI suggested waiting to see what Core does because language packs were right around the corner. Now that WP 3.7 landed, I don't think it makes sense to wait any longer. We should use whatever is there and work around any deficiencies, as usual.\n. Any thoughts on this, @dd32?\n. Thanks for the info! @markoheijnen, what were you saying about accessing GlotPress directly? :)\n. Currently, the capabilities are displayed in the order they are registered. For example, the bbPress moderator role:\n$ wp cap list bbp_moderator\nspectate\nparticipate\nmoderate\nthrottle\nview_trash\npublish_forums\nedit_forums\nedit_others_forums\ndelete_forums\ndelete_others_forums\nread_private_forums\nread_hidden_forums\npublish_topics\nedit_topics\nedit_others_topics\ndelete_topics\ndelete_others_topics\nread_private_topics\npublish_replies\nedit_replies\nedit_others_replies\ndelete_replies\ndelete_others_replies\nread_private_replies\nmanage_topic_tags\nedit_topic_tags\ndelete_topic_tags\nassign_topic_tags\nWhy would alphabetical order make more sense?\n. That's what grep is for:\n$ wp cap list bbp_moderator | grep 'topic_tags'\nmanage_topic_tags\nedit_topic_tags\ndelete_topic_tags\nassign_topic_tags\n. Not to mention that there's a built-in sort command:\n$ wp cap list bbp_moderator | grep 'topic_tags' | sort\nassign_topic_tags\ndelete_topic_tags\nedit_topic_tags\nmanage_topic_tags\n. Duplicate of #435\n. Actually, I can't reproduce with the latest master:\n$ wp core config --dbname=name -dbuser=user --dbpass=pass\nParameter errors:\n missing --dbuser parameter\n. Right; can reproduce if the wp-config.php file doesn't exist.\n. Yes, this was a conscious decision: https://github.com/wp-cli/wp-cli/pull/557#issuecomment-20006348\n. But, if it's somehow possible to have completions for both early commands and plugin commands, I'll take it.\n. Does it happen if you run it from a fresh WP install dir?\n. Re https://github.com/woothemes/woocommerce/blob/release-2-0-14/admin/woocommerce-admin-init.php#L235 (https://twitter.com/emyrt/status/373208491483496448)\nThis should no longer be a problem in WP-CLI 0.11.2, which doesn't fire the admin_init action anymore. See #681\n. I was able to reproduce the problem, using WP-CLI 0.13-alpha2 and BWP Google XML Sitemaps 1.2.1:\n$ wp shell --basic\nwp> 1\nwp> \"foo\"\nwp> int(1)\nstring(3) \"foo\"\nAnd it's caused by this line at the start of the plugin:\nphp\n// Pre-emptive\n$bwp_gxs_ob_level = @ob_get_level();\n$bwp_gxs_ob_start = ob_start();\n. @danielbachhuber Thoughts?\n. Nope. We only support --version=dev anyway (for updates).\n. So, @getsource was right after all. update --all makes more sense than update-all.\n. The problem is in the synopsis: wp plugin update <plugin>...\n. During a normal WP load:\n- advanced-cache.php\n  - inc/define.php\n- object-cache.php\nDuring a WP-CLI WP load:\n- object-cache.php\n- w3-total-cache.php\n  - inc/define.php\nWP-CLI intentionally skips loading advanced-cache.php (see #164). The plugin will just have to take this into account.\n. Yes, 0.9.3 is the W3TC version against which the bug was reported. Therefore, it makes sense that you still see the bug, since the next version of the plugin hasn't been released yet.\n. See #857\n. Yep, got bitten by this while working on #766.\n. Isn't a taxonomy actually required when passing a term?\n. > Wouldn't [--<term>=<term-id>] make more sense?\nThat doesn't make sense to me. Could you give a concrete example?\n. A post can be connected to the same term via two different taxonomies. For example, a New York term could be in two different taxonomies: city-of-birth and city-of-residence.\nAnd I think you misunderstood what @danielbachhuber proposed. Compare:\n[--taxonomy=<term-id>]\nvs.\n[--<taxonomy>=<term-id>]\nThe later allows passing any taxonomy name:\nwp export --post_tag=foo --city-of-birth=new-york --category=whatever\nSo, it would supersede the --category parameter.\n. > The point of this is to allow the user to export posts based on a term id that could be in any taxonomy.\nI think ignoring the taxonomy a term is in is asking for trouble, especially when passing term IDs instead of slugs. There are good reasons why this is not allowed in the Core functions.\n. Still don't think this is a good idea; closing.\n. Related: gkurtyka-schibsted/wp-cli@c4fe2facc9ee202e037538aea5bbbd7d98cb5182\n. It would be nice if WordPress itself had a proper widget management API: http://core.trac.wordpress.org/ticket/16613\n. Other than the loading thing, it looks good.\n. No, it wouldn't. It makes the synopsis too long and it's pretty easy to change those values afterwards.\n. Although, we didn't have --prompt when this topic was last discussed.\n. My point is that it's actually easier to copy-paste and then edit in your editor than to remember what all the associative arg names are.\nHowever, it's easier to run wp scaffold plugin --prompt and type just the values than to copy-paste.\n. We can consider this if #755 gets in.\n. > A more reliable way would be to do a database query:\nThere's a logical problem with that: we want to do a query before loading the wp-config.php file, but the database credentials are inside the wp-config.php file.\n. Related: #604 (I guess that only fixes the case where the path to the PHP binary has spaces)\n. To be precise, calling ./bin/wp directly from a Git clone works fine. The problems arises when using the symlink created by Composer.\n. Seems to work ok. Thanks!\n. I'd rather implement this as a separate command. See #529.\n. LOL.\n. I suppose we could, as long as we throw our own error if a user tries to use foreach on the iterator a second time.\n. I don't understand why you expect $WP_CLI_PHP to magically change. It's an environment variable; it's static.\nYou have to either change it manually or remove it from your environment.\n. The $WP_CLI_PHP variable is useful when php is not set to the binary you want. For example, when using MAMP.\nIf you don't need $WP_CLI_PHP, then don't define it. WP-CLI doesn't force it upon you.\n. To clarify, WP_CLI_PHP is not defined inside WP-CLI. You have it defined in your .bash_profile or .bashrc file. Just remove it.\n. Thanks.\n. Here's some things you could try:\n- run ./utils/dev-build\n- run wp core version\n- add --debug flag: wp plugin status --debug\n. Seems like the problem was fixed.\nThe next time Composer has problems, you can download the Phar file instead: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-phar\n. Thanks!\n. You shouldn't need to escape at all. The message is passed through colorization by accident, not by intention.\nThat said, any particular reason you're using '%20' instead of a simple space?\n. Just to clarify, the example you posted should now work as expected (if you update to 0.12-alpha2).\n. I'm trying to make the loggers unit-testable, but fwrite( STDOUT ignores output buffering, apparently.\n. Well, you can set a static front page programatically in PHP, so you could just put that code in a custom WP-CLI command. Same thing with the \"Primary Menu\".\n. When passing --color or --no-color on the command line, the boolean conversion is already handled in Configurator::parse_args().\nWhen setting color: false in wp-cli.yml, it's converted automatically to a boolean by the YML parser.\nSo, what your PR does is allow the user to set color: 0, color: no and color: off. I'm not convinced that's such a good idea.\n. I see. Not sure how to handle the documentation issue. [--[no-]flag] is semantically correct, but rather ugly.\n. I think a --timeout flag is a bit overkill. What about just increasing the timeout to 60 seconds?\n. @Boztown The only thing I can suggest is to see what happens if you increase the timeout (as I did in the commit above).\n. That's because he has two email addresses.\nHe's not the only one and it's not a problem.\n. get_content_images() seems to be what we're looking for.\n. A related plugin: http://wordpress.org/plugins/import-html-pages/\n. Was about to ask why you didn't use the get_content_images() utility, but I found out that it was removed from WP 3.6 at the last moment.\nLooking at this again, I think it should be released as a separate package. This way you can iterate on it faster and work out all the edge cases (which are guaranteed to be many, given that HTML parsing is involved).\nAlso, as a separate package, you're free to use various libraries, like FluentDOM, which wouldn't be acceptable as WP-CLI dependencies.\nAs for testing, I think the trickiest part - finding and replacing image references in a blob of text - can be covered using PHPUnit, without having to set up WordPress instances or Behat steps.\n. Oh, note that you should be able to do WP_CLI::add_command( 'media sideload', 'Media_Sideload_Command' ); now.\n. Thanks!\n. > Showing this is relevant for flags with a dynamic default value (like --color config flag)\nCould you explain why it's more relevant for --color than for other flags?\n. Makes sense.\n. Of course.\n. I'm thinking of making SynopsisParser return a Synopsis object, instead of a plain array.\nLE: On the other hand, there's a case to be made for the convenience of inspecting the array directly.\nThe idea is to not display invalid tokens when doing wp help core download, for example.\n. Some bundled commands, like cache, only have a synopsis tag and no longdesc. Going to leave those as-is.\n. The option and *-meta subcommands are an interesting case, since the arguments are described in the class docblock, not in the method docblock.\n. Since this has the potential to get stale very quickly, going to merge as-is and fix issues as they come up.\n. In that case, this is probably fixed by #655. Try upgrading to master:\ncd /home/user/wp-cli/\nphp composer.phar require wp-cli/wp-cli=dev-master\n. No response; assuming it's no longer a problem.\n. Hello,\nYou're right that the error message isn't very helpful.\nI won't duplicate the info from wp-cli.org into README.md, because duplication is the root of all evil.\nAnd we can't move installer.sh into this repo, because cool URLs don't break.\n. It seems that whatever you set WP_CLI_PHP to, it's not a true CLI binary.\nFirst, try running $WP_CLI_PHP --version.\nThen, try commenting out the following lines in php/boot-fs.php:\nif ( 'cli' !== PHP_SAPI ) {\n    echo \"Only CLI access.\\n\";\n    die(-1);\n}\n. We don't need a new command for this. Just use search-replace:\nwp search-replace 'http://example.dev' 'http://example.com'\nOr, if you only want to change the option, you can do:\nwp option update home 'http://example.com'\nwp option update siteurl 'http://example.com'\n. Thanks.\n. Now that we have wp comment list (#700), I think it would make more sense to just remove wp comment last:\n1. wp comment last --id can easily be replicated: wp comment list --field=ID | head -n 1\n2. The output from wp comment last --full is not easily parseable, so fixing it would break automation scripts anyway.\n. If WP_Query doesn't support such a parameter, then you won't be able to do this using wp post list alone.\nYou'd either need to install a WordPress plugin that implements an end_date parameter in WP_Query, or write a custom WP-CLI command that does so.\n. Reproduced in master:\n$ wp eval 'echo $_SERVER[\"SERVER_NAME\"];' --url='example.com'\nexample\n. Thanks.\n. Link to test data: https://wpcom-themes.svn.automattic.com/demo/theme-unit-test-data.xml\n. It looks fine for me, so I think this might be a Windows-only issue.\n. The synopsis is now collected from the method description: https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Dispatcher/Subcommand.php#L23\n. Related: #755\n. Here's how it's supposed to look:\n```\nSYNOPSIS\nwp core install --url= --title= --admin_user= --admin_password= --admin_email=\n```\n. Thanks.\n. I think such an alias would be pretty arbitrary. What would be more interesting would be if WP-CLI did fuzzy matching for all commands and arguments, like git does.\nSomething like this:\n$ wp search-replace http://clientsite.com xxx --dryrun\nError: --dryrun is not a registered parameter; did you mean `--dry-run`?\n. We already show a warning. I suppose stopping execution would be safer.\n. Go for it, but note that we should show all the warnings, instead of exiting after the first one.\n. What does wp core version say?\n. It seems to work fine for me on a clean install of WP 3.5.2.\n. As a workaround, you can use wp core download --force.\n. The fact that it wasn't installed via WP-CLI is not the issue.\nMy guess is that you have some extra code in a plugin or theme that's interfering.\n. Some more details about @c10b10's setup:\n- $_ENV['PATH'] is set\n- without the patch, mysqldump (located in the MAMP folder) is not found and wp db export fails\n. I'm pretty sure changing the user a subprocess is opened with requires superuser powers. The usual way is to prepend sudo -u <user> to the command.\n. This could be extended to list subcommands. For example,\nwp site list --field=url\nwould be equivalent to:\nwp site list --fields=url --format=csv | tail -n +2\n. Need to handle #766 before going any further.\n. This looks good to land. Going to handle list subcommands in a separate PR.\n. Actually, instead of implementing a subcommand just to conform to an interface, I think I'll try to refactor CommandWithDbObject so that the update subcommand is not mandatory.\n. Can't reproduce:\nUser@air:wp$ wp core version\n3.7-alpha-25000\nUser@air:wp$ wp plugin install jetpack --version=2.0.2\nInstalling Jetpack by WordPress.com (2.0.2)\nDownloading install package from http://downloads.wordpress.org/plugin/jetpack.2.0.2.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nUser@air:wp$ wp plugin update jetpack\nSuccess: Updated 1/1 plugins.\nEnabling Maintenance mode...\nDownloading update from http://downloads.wordpress.org/plugin/jetpack.2.5.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nDisabling Maintenance mode...\nDoes downloading the zip manually and running wp plugin install jetpack.2.5.zip work?\n. Ok, so what about top-level commands, like wp search-replace?\n. Oh, I see. Makes sense, even with #642.\n. While it is a bit annoying to have to specify the default value twice (once in the synopsis and again in the code), I don't think it justifies complicating the synopsis syntax.\n. Yep, I still think this is a bad idea.\n. @danielbachhuber What do you think about this, considering #751?\n. Thanks for the clarification.\nPlease refactor the anonymous function into a static class method. (You can just push another commit to your master branch and it will automatically show up in this PR)\nAlso, I noticed that our test suite didn't catch the error, so it would help if you could add a test in features/media.feature which hits this new code.\n. Nevermind the static class method reference; just make it work. :)\n. Yeah, I think ditching the thumbnail detection code is the way to go.\n. It's a test file for Behat. More details can be found in the CONTRIBUTING.md file.\n. Though looking back at it, features/import.feature would probably be more appropriate.\n. Merged; thanks.\n. Modify wp-config.php so that it looks like this:\nvar_dump($_SERVER['DOCUMENT_ROOT']);\nif ($_SERVER['DOCUMENT_ROOT'] == \"\")\n  $_SERVER['DOCUMENT_ROOT'] = dirname(__FILE__);\nAnd tell me what wp plugin path outputs.\nAlso, why do you use $_SERVER['DOCUMENT_ROOT'] to define WP_CONTENT_DIR, instead of just dirname(__FILE__).\n. Ok, I edited the codex page. If you replace $_SERVER['DOCUMENT_ROOT'] with dirname(__FILE__), WP-CLI should work fine.\nI'll keep this ticket open in case we can set $_SERVER['DOCUMENT_ROOT'] correctly from WP-CLI.\n. The obvious solution: ini_set( 'display_errors', ! function_exists( 'xdebug_debug_zval' ) );\n. It turns out that you can also do ini_set( 'display_errors', 'STDERR' );.\n. That seems reasonable. Care to open a pull request?\n. wp help does work when there's no WP install. If it detects a WP install, it tries to load it, in order to find commands defined inside plugins and show them too. So it needs to query the DB for the plugins that are active.\n. What command are you using to do the install?\n. It works fine for me. Must be a Composer glitch.\n. As a workaround, you can use the Phar build: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-phar\n. Do you have a wp-cli.yml file with an apache_modules: [mod_rewrite] line?\n. Well, you can take it up with WordPress, since the flush_rewrite_rules() function doesn't return anything. :)\n. With that said, I guess the wp rewrite flush subcommand could check if .htaccess exists. Care to open a PR?\n. > Nothing I do seems to actually update the .htaccess file contents.\nIs it updated if you change the permalinks from wp-admin?\n. Handled in #1023.\n. Similar to #358\n. @MiteshShah Do you want to take a stab at opening a PR for fixing this?\n. Closing as duplicate of #358, which is now resolved.\n. I assume that one of the rows in your wp_options table contains a object or array with a reference to itself.\nYou can find out which value is causing the problem like so:\n1. Open php/commands/search-replace.php.\n2. Find the line that calls recursive_unserialize_replace().\n3. Add var_dump( $row->$col ); before that line.\nThe last value that gets printed out before the fatal error will be the culprit.\n. Could you share the full unserialized value in a gist, so that I can try for myself?\n. Actually, the full serialized value would be better:\necho \"$row->$col\\n\";\n. You pasted the last 3 values in your gist, instead of the just the last.\nBut even if I removed the first two, I can't unserialize the string.\nbash\n$ php test.php\nPHP Notice:  unserialize(): Error at offset 5259 of 10963 bytes in ...\nHere's the test.php file I used:\nphp\n$val = file_get_contents( __DIR__ . '/val.txt' );\nvar_dump(unserialize($val));\nSo, you need to fix the gist before I can debug further.\n. Or maybe doing a var_export() would work better:\nphp\nvar_export( unserialize( $row->$col ) );\n. Ok, I was able to load it and run recursive_unserialize_replace() on it; it didn't produce a fatal error.\nMaybe it was because I didn't have the bcdi and bcdi_settings class definitions.\nIn general, it's a good idea to only store plain arrays in wp_options, rather than custom class instances.\n. > is there a way we can write the so it either fails in a nice way, or ignores something like this?\nThere might be, but we need to isolate the problem first - \"do these exact steps, and this error will happen\" - otherwise, we're just grasping at straws.\n. > FWIW what's being stored is just a giant array only two levels deep. No objects or anything.\nThat's not what I saw in your last gist.\nAnyway, if you want, we can hash this out on IRC (#wordpress-cli room on Freenode)\n. After a bit of googling, it seems that PHP serialization preserves \"relative references\", so it's possible to create a recursive structure:\n$l = array('foo');\n$l[] =& $l;\necho serialize( $l );  // a:2:{i:0;s:3:\\\"foo\\\";i:1;a:2:{i:0;s:3:\\\"foo\\\";i:1;R:3;}}\n(notice the R:3 part)\nvar_export() doesn't preserve references, so that explains why I wasn't able to reproduce.\nYour value contained such a circular reference, which explains why recursive_unserialize_replace() ended up in an endless loop.\nSo, one solution would be to make recursive_unserialize_replace() detect recursion, preferably without slowing down wp search-replace too much or using an unreasonable amount of memory.\n. @nullvariable proposed that recursive_unserialize_replace() not descend into objects at all, which seems like a good idea:\n- objects are always stored by reference, so it's a lot more likely that they contain references to other objects (including themselves)\n- associative arrays can safely be considered data, so it's usually fine to change values inside them; arbitrary objects? not so much.\n. Erm... yeah, no thanks. Care to open a PR for preventing replacements inside objects?\n. The compact JSON format is ambiguous: you can't tell if a key has multiple values, or a single value that happens to be an array. For example:\n$ wp post-meta add --format=json 1 test '[\"foo\", \"bar\"]'\n$ wp post-meta add 1 test2 foo\n$ wp post-meta add 1 test2 bar\n$ wp post-meta list 1 --format=json\n{\"test2\":[\"foo\",\"bar\"],\"test\":[\"foo\",\"bar\"]}\n. Wait, instead of introducing an inconsistent -meta list subcommand, how about we enhance the -meta get subcommand?\nSynopsis:\nwp post-meta get <id> [<key>...]\nExample usage:\n$ wp post-meta get --format=json 1\n{\"_pingme\":\"1\",\"_encloseme\":\"1\",\"test2\":[\"foo\",\"bar\"],\"test\":[\"foo\",\"bar\"]}\n$ wp post-meta get --format=json 1 test\n[\"foo\",\"bar\"]\n$ wp post-meta get --format=json 1 test test2\n{\"test2\":[\"foo\",\"bar\"],\"test\":[\"foo\",\"bar\"]}\nAs I'm writing this, it occurs to me that we currently don't handle the multiple values case in -meta get too well (we just show the first value).\n. Seems legit.\n. Yes, it would be good to reduce the duplication. Let's not start adding helper methods to WP_CLI_Command.\n. Seems like it. Just that you will need to make it return JSON for all the subcommands that have a --field= parameter, since the --format= arg is currently ignored.\n. Why did you go with {\"title\":\"Akismet\"}, instead of just \"Akismet\"?\n. If I want {\"title\":\"Akismet\"}, I could just use --fields=title, instead of --field=title.\n. :+1: Will merge soon.\n. Please share the result of the following two commands: wp --info and wp core version.\n. Ok, thanks. Is this Form Manager plugin public? Can you post a link to it?\nPS: You shared your salts publicly (AUTH_KEY, AUTH_SALT etc.), so they are compromised now! You should generate new ones.\n. The plugin seems to work fine for me:\nUser@air:wp$ wp plugin install --activate wordpress-form-manager\nInstalling WordPress Form Manager (1.6.41)\nActivating 'wordpress-form-manager'...\nSuccess: Plugin 'wordpress-form-manager' activated.\nDownloading install package from http://downloads.wordpress.org/plugin/wordpress-form-manager.1.6.41.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nUser@air:wp$ wp core version\n3.5.2\nWhat version do you have installed?\n. I was talking about the version of the Form Manager plugin.\n. Well, like I said, it's working fine for me, so I need steps to reproduce the problem. Example:\n1. Create a fresh WP install\n2. Run wp plugin install --activate wordpress-form-manager\n3. ... \u2190 you have to fill in the blanks here\n. Seems fine.\n. Actually, I was thinking of not going inside objects at all.\n. Looks like there's a failing test that needs to be removed: https://travis-ci.org/wp-cli/wp-cli/builds/11985225\n. You can remove it; the main functionality is covered by Behat tests.\n. Merged; thanks!\n. Note that the current JSON format can be achieved with wp option get rewrite_rules --format=json\n. You could write a test if you simulate an editor process, i.e. set EDITOR=wp-cli/tests/editor-mock.sh or something like that.\n. Methinks a \\WP_CLI\\Formatter class would make sense:\n```\n$formatter = \\WP_CLI\\Formatter::create( $assoc_args, $this->fields );\n// later\n$formatter->display_item( $post );\n// or\n$formatter->display_items( $query->posts );\n``\n. Now that the formatting code is under control again, we can refine: #803 \n. We should add some Behat tests for this. It's a little awkward to test interactive commands, but it's doable (seeshell.feature).\n. I don't see any major drawbacks, and I don't have any better ideas, so yeah.\n. It would be nice to expose a single, neat public method, likeWP_CLI::set_url(), instead of the two private ones on the runner.\n. Confirmed. The same bug happens with the--dbname` parameter too:\nwp core config --dbname='test_&'\n. You already can: wp post update 1 --comment_status=closed\n. Nice catch. It looks like we'll need to alter the page generation code: https://github.com/wp-cli/wp-cli.github.com/blob/master/Phakefile.php#L40\n. Yeah, you need to install the Kramdown gem for Jekyll to work.\n. Oh, that error you're getting isn't related to Kramdown at all. You can come in IRC (#wordpress-cli on Freenode) and we'll figure it out.\n. Fixed the Phar issue: https://github.com/wp-cli/wp-cli.github.com/commit/f97076239bda8dc4e646d4c5ef0551f1a1838293\n. Did you run php composer.phar self-update?\nAlso, are you sure you followed all the steps, namely adding the bin/ dir to your PATH?\n. It has this check at the top:\nif ( wp_is_large_network() )\n    return array();\nWe'll stick to the iterator.\n. So, what would be the effect of not calling flush_rewrite_rules()?\n. I mean, would you always need to call wp rewrite flush after using wp rewrite structure?\n. Ok, then what if we run wp rewrite flush using WP_CLI::launch(), so that it opens a new process?\n. I went ahead and added a link to the package index because it was a very easy win.\nEven if we change the site design later, changing the Satis template so that it uses the same classes and CSS file would still be necessary.\n. You should have push access now.\n. Merged. Thanks!\n. Just a heads up: I found it really annoying to test changes made to the package index template, so I opened composer/satis#94.\n. The problem I have with this is that it also allows overwriting the values defined in wp-config.php.\nI was thinking of doing it the other way around, by implementing a wp db str subcommand that would just output the values in wp-config.php. Example usage:\nmysqldump $(wp db str) --add-drop-tables\n. @rickard2 Supporting only some options from mysqldump would be worse than supporting all of them.\nWhat do you think about the proposed wp db str command?\n. It would be among the easiest commands to implement, so yeah.\n. After @rickard2's PR, it became clear that a separate wp db str subcommand wouldn't actually work very well, so I'm going to merge this instead.\n. Thanks for the link, @westonruter!\n. Go nuts :)\n. > super admins are global.\nNo, they are confined to a particular multisite network, as they are stored in $wpdb->sitemeta.\nOf course, most multisite installs only have a single network, so we can leave out --network=<id> for now.\n. Thanks; glad to have this in finally.\n. I would still like to add a behat test for this.\n. I think you should also add a test for the --max_depth= parameter, because it isn't working currently:\n$ wp term generate category --count=100 --max_depth=10\nGenerating terms  1  %[=>                                                                                                                                                                      ] 0:00 / 0:00\nPHP Fatal error:  Cannot use object of type WP_Error as array in /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/commands/term.php on line 290\nPHP Stack trace:\nPHP   1. {main}() /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/boot-fs.php:0\nPHP   2. include() /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/boot-fs.php:17\nPHP   3. WP_CLI\\Runner->after_wp_load() /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php:31\nPHP   4. WP_CLI\\Runner->_run_command() /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php:535\nPHP   5. WP_CLI\\Runner->run_command($args = array (0 => 'term', 1 => 'generate', 2 => 'category'), $assoc_args = array ('count' => '100', 'max_depth' => '10')) /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php:217\nPHP   6. WP_CLI\\Dispatcher\\Subcommand->invoke($args = array (0 => 'category'), $assoc_args = array ('count' => '100', 'max_depth' => '10')) /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php:213\nPHP   7. call_user_func(class Closure {  }, array (0 => 'category'), array ('count' => '100', 'max_depth' => '10')) /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/Subcommand.php:207\nPHP   8. WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher\\{closure}($args = array (0 => 'category'), $assoc_args = array ('count' => '100', 'max_depth' => '10')) /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/Subcommand.php:207\nPHP   9. call_user_func(array (0 => class Term_Command { private $fields = array (...) }, 1 => 'generate'), array (0 => 'category'), array ('count' => '100', 'max_depth' => '10')) /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/CommandFactory.php:35\nPHP  10. Term_Command->generate($args = array (0 => 'category'), $assoc_args = array ('count' => '100', 'max_depth' => '10')) /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/CommandFactory.php:35\n. Any progress on this?\n. wp post generate was fixed in #943.\n. Hm... the --max_depth parameter seems to work fine now. Merging as-is.\n. Is there a way of distinguishing between an invalid certificate and a spurious error? I never understood what caused the apparently intermittent failures.\n. @mpeshev Could you try out ed2111a and post the warning message you get?\n. Ugh... I just noticed there are two methods that do the try/catch dance.\n. I explicitly set verify => true and refactored the duplicate code. Try now.\n. Ok; it's done. Thanks guys.\n. It doesn't work because that guide tells you to use $_SERVER:\ndefine('WP_CONTENT_DIR', $_SERVER['DOCUMENT_ROOT'] . '/wp-content');\nClosing as duplicate of #785.\n. Merged; thanks.\n. I think it would make more sense to have a command that just lists a user's favorite plugins, which can then be combined with the existing subcommands. For example:\nwp plugin list-favs <username> --field=slug | xargs wp plugin install --activate\n. Confirmed; can't seem to find out when the --no-dev flag was removed from composer require.\nAnyway, to update the docs, you can open a pull request against https://github.com/wp-cli/wp-cli.github.com\n. Merged; thank you.\n. My guess is that wp doesn't actually point to the install in ~/.wp-cli. Run wp --info and type wp to check.\n. We already have wp core download --force for overwriting files.\nNot sure what a wp core install --force command would do, other than whipping the database and re-creating the tables.\n. Confirmed.\nCurrently, the help command applies colorization on the whole docblock, which is how the section headers get emphasized.\n. Yeah, probably missing a backslash. Fancy opening a PR to fix it?\n. Thanks, @nickdaugherty.\n. @tlovett1 Please open a pull request so that Travis CI runs the build.\n. > Because these archives do not contain a stub and cannot be executed by the phar extension, it is possible to create and manipulate regular zip and tar files using the PharData class even if phar.readonly php.ini setting is 1.\nhttp://us2.php.net/phardata\nSold!\n. Except the build fails: https://travis-ci.org/wp-cli/wp-cli/jobs/12744313#L82\n\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'Cannot create phar '/tmp/wp_bRJj5g', file extension (or combination) not recognised or the directory does not exist' in /home/travis/build/wp-cli/wp-cli/php/commands/core.php:71\n. > it doesn't implement a --strip-components=1 equivalent.\n\nCouldn't that be simulated by extracting to a temporary folder and then moving the files to the proper place?\n. Going to merge this as-is, since it works. Conversion to the Finder lib can happen later.\n. Faulty commit: https://github.com/wp-cli/wp-cli/commit/309875b01ceaa4c567c1033b43b80c97913c7c65#diff-97e24ceb3b4ab63c888f11417f6f356fL64\n. Wondering how easy it would be to add a test that catches this bug.\n. And since we're on the topic, WP_CLI::launch( sprintf( 'mkdir -p %s', escapeshellarg( ABSPATH ) ) ); should be converted to esc_cmd() too.\n. Going to merge as-is and add a testcase afterwards.\n. Or you could just download the Phar file: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-phar\n. Thanks!\n\nShould I open a similar PR against https://github.com/wp-cli/wp-cli.github.com to lead to changes in the documentation?\n\nThat's an interesting question. On the one hand, the documentation is update automatically when a new release of WP-CLI is made. On the other hand, it would be good to update the docs sooner.\nSince this is a small change, I think I'll just update the docs manually myself.\n. > I have a command that is loaded by functions.php in my theme\nThat's your problem right there. The functions.php file is loaded after WP.\nTo make it work, you have to move your command code to a separate file and load it manually:\nwp --require=wp-content/themes/yourtheme/command.php your-command\n. > It might be helpful to put that in that Wiki. It says @when \"has no effect if the command using it is defined in a plugin\" which I interpreted as meaning to define the command in a theme. \nDone: https://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook/_compare/99e0ee1%5E...99e0ee1\n\nit seems like WP_CLI::add_action('init', function(){ //do stuff }); should hook in here.\n\nThe companion to WP_CLI::add_action() is WP_CLI::do_action(), not do_action(). I guess I should give them different names, so they're not so easily confused.\n. I've narrowed it down to this call in php/commands/plugin.php:\nphp\n$api = plugins_api( 'plugin_information', array( 'slug' => $slug ) );\n... which produces this error: \"GnuTLS recv error (-9): A TLS packet with unexpected length was received.\"\n. @nacin Can you shed any light on this?\n. https://travis-ci.org/wp-cli/wp-cli/builds/13128970 proves that this is a regression in WP 3.7, since the WP 3.6 builds passed.\nI've found the same error mentioned in http://core.trac.wordpress.org/ticket/25716#comment:17\n. > is https://travis-ci.org/wp-cli/wp-cli/jobs/13062388 the first failed build related to this?\nYep, since it was the first one that started after the latest.zip on wp.org was updated to WP 3.7.\nThanks, @dd32, particularly for:\n\nThe context that you're missing, is that in 3.6 all API requests went over HTTP, in 3.7 all API requests go over HTTPS if supported else HTTP, and in 3.7.1 all API requests first go over HTTPS if supported, and fall back to HTTP in event of failure (but triggers a PHP Notice/Warning).\n. > Do you know the version of GnuTLS (and/or can you push a build to find out)?\n\n$ apt-cache policy libgnutls26\nlibgnutls26:\nInstalled: 2.12.14-5ubuntu3.4\nCandidate: 2.12.14-5ubuntu3.4\nVersion table:\n*** 2.12.14-5ubuntu3.4 0\n500 http://us.archive.ubuntu.com/ubuntu/ precise-updates/main amd64 Packages\n500 http://security.ubuntu.com/ubuntu/ precise-security/main amd64 Packages\n100 /var/lib/dpkg/status\n2.12.14-5ubuntu3 0\n500 http://us.archive.ubuntu.com/ubuntu/ precise/main amd64 Packages\n. Possibly related to #838\n. Could you try out the latest master revision? (0.13-alpha3).\n. Hello,\nThanks for airing your grievances. :)\n\n\"Internal commands are loaded on-demand, from the src/php/wp-cli/commands/ directory.\" There are no such directory, but I've found commands in ~/.wp-cli/vendor/wp-cli/wp-cli/php/commands\n\nUpdated path: https://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook/_compare/b2d8ed5%5E...b2d8ed5\n\nBut... if my command in development? I have not got any repo or smth.\n\nYou can use the --require parameter, now mentioned in the wiki: https://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook/_compare/d470f83%5E...d470f83\n\nFrom 'wp help': \"SYNOPSIS \\n\\n wp \"\n\nErm... not sure what you mean here.\n. @johnbillion Yes, like really irrelevant. I'm sad (for Twitter's sake) to admit that Twitter has become more appropriate for these sort of thoughts.\n. The term \"subcommand\" just means that a command is nested under another command. But since every command is nested under the wp command, every command is also a subcommand. So, in a sense, the \"subcommand\" term isn't very useful.\nI removed the terminology section from the wiki and I will replace <subcommand> with <command> in all user-facing strings.\n. wp --version works fine. Try clearing your opcode cache.\n. Confirmed:\n$ wp plugin install background-update-tester --activate\nInstalling Background Update Tester (1.0)\nActivating 'background-update-tester'...\nWarning: Could not activate the 'background-update-tester' plugin.\nDownloading install package from https://downloads.wordpress.org/plugin/background-update-tester.1.0.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\n$ wp plugin get background-update-tester --field=status\nactive-network\n. You're supposed to run ./utils/dev-build, not cd utils && ./dev-build, so that the Phar files end up in the root dir.\n. Ugh... yes, there is no way to differentiate.\n\nwhich would do an (object) value conversion\n\nOr just use json_decode( $value ), instead of json_decode( $value, true ).\n. Not sure what you're talking about. :)\n. Oh, if you mean the decision to use objects in the Edit-Flow plugin, meh... it's not the only plugin that does it.\nThat said, we should weigh how frequently --format=json-objectis actually needed and how much of an advantage over the eval workaround it would be.\n. This is similar to #847. Not sure if it's a duplicate, since there the error message is different.\n. Hm... wp core download --path=/tmp/wp-download-test works fine.\nBut the htdocs directory is problematic:\n```\n$ wp core download --path=/srv/www/vvv-demo-1/htdocs\nCreating directory /srv/www/vvv-demo-1/htdocs/\nDownloading latest WordPress (en_US)...\nWarning: rename(): The first argument to copy() function cannot be a directory in /srv/www/wp-cli/php/commands/core.php on line 114\nWarning: rename(/tmp/wp_5270e9a966dc3/wordpress/wp-content,/srv/www/vvv-demo-1/htdocs//wp-content): Invalid cross-device link in /srv/www/wp-cli/php/commands/core.php on line 114\nWarning: rename(): The first argument to copy() function cannot be a directory in /srv/www/wp-cli/php/commands/core.php on line 114\nWarning: rename(/tmp/wp_5270e9a966dc3/wordpress/wp-includes,/srv/www/vvv-demo-1/htdocs//wp-includes): Invalid cross-device link in /srv/www/wp-cli/php/commands/core.php on line 114\nWarning: rename(): The first argument to copy() function cannot be a directory in /srv/www/wp-cli/php/commands/core.php on line 114\nWarning: rename(/tmp/wp_5270e9a966dc3/wordpress/wp-admin,/srv/www/vvv-demo-1/htdocs//wp-admin): Invalid cross-device link in /srv/www/wp-cli/php/commands/core.php on line 114\nWarning: rmdir(/tmp/wp_5270e9a966dc3/wordpress): Directory not empty in /srv/www/wp-cli/php/commands/core.php on line 116\nWarning: rmdir(/tmp/wp_5270e9a966dc3): Directory not empty in /srv/www/wp-cli/php/commands/core.php on line 92\nSuccess: WordPress downloaded.\n``\n. It looks like even the nativemvcommand throws the \"Invalid cross-device link\" error, so it seems we'd have to do copy + delete instead. \n. That should do it. Let me know if you're still having issues.\n. Are you sure you have the latest revision?\n. Well, I can't re-open this issue, so please open a new one.\n. We could add a--blog-idglobal parameter, I suppose.\n. Theoretically, we should be able to set HTTP_HOST to a dummy value and use switch_to_blog(). In practice, I'm sure one or ten things will have to be creatively side-stepped. :)\n. I supposewp core download_is_ special with regards to the--path` global parameter.\n. Great!\nThere are a couple of small things that I'll leave comments for inline. The biggest thing that's missing though is functional tests.\nYou could either expand the post.feature file or create a new post-term.feature file that exercises the various wp post-term subcommands and arguments.\n. I dunno; the extra wp option update call doesn't seem so bad, considering that the regular WP install screen doesn't support setting it either.\n. The fact that you can just call wp option update after the install is finished proves that a --siteurl= parameter is not necessary.\nIt would be nice if wp core install could set siteurl automatically, basend on the directory layout, but I'm not sure how reliable that would be.\n. Please post the output from wp --info.\n. This seems similar to #566, because \"reason(134)\" apparently means that the client doesn't trust the Certificate Authority:\nhttp://blaoism.blogspot.ro/2010/05/sslerrorssl-error14090086lib20func144re.html\n. Maybe you have some stuff in ~/.curlrc that's allowing direct curl calls to work.\n. Not really. @rmccue halp!\n. I was able to reproduce the warning on a precise32 Vagrant box, using WP-CLI 0.13-alpha3 (master).\nNote however that the WP files seem to be installed correctly.\n. Thanks, @dd32!\nI just realized I merged it too early (I blame it on my cold): Travis builds are now throwing:\nWarning: cURL error 77: Problem with the SSL CA cert (path? access rights?)\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/13628452#L117\n. Oh, I got it: the cacert.pem file is not included in the Phar file.\n. Ugh... even if it is included in the Phar file, cURL can't access it, so I have to copy it to a temporary location.\n. Yes, you can update to the latest dev version:\ncd ~/.wp-cli\nphp composer.phar require wp-cli/wp-cli=dev-master\n. You should delete the $HOME/.wp-cli/ dir completely and install the Phar file instead:\nhttps://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-phar\n. First, what does wp --info say?\n. WP-CLI only cares that the file is readable. But that fatal error is definitely not caused by incorrect paths.\nTry this:\ncd /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli\ngit diff\nIf that doesn't show any changes, I suggest you uninstall WP-CLI completely and then re-install via git: https://github.com/wp-cli/wp-cli#installation (so that it will be easier to debug the problem)\n. By \"re-install via git\" I meant:\ngit clone https://github.com/wp-cli/wp-cli.git\ncd wp-cli\n./utils/dev-build\n. Alright. Could you paste the code around line 104 in your wp-config.php file?\n. That would be #486, which was made obsolete by wp core multisite-install.\n. As you can see from the commit, I was trying to make wp user delete accept multiple arguments (erroring when a single one isn't found didn't seem like a good idea)\nBut for subcommands that don't accept multiple arguments (like wp user get), we should indeed exit with an error, instead of a warning.\n. It doesn't make much difference, but I suppose it would be consistent with Loggers/ and Iterators/.\n. Try simply downloading wp-cli.phar: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-phar\n. Anyway, thanks for bringing this up, @Kevinlearynet.\nHopefully, it will be clearer now.\n. Well, for technical reasons, it would actually be wp comment-meta.\n. It would help if you could post some steps to reproduce, starting from a clean WP install.\n. That didn't really shed any light, because you didn't paste the values you had before and after you ran those commands.\n. And now I'm starting to see why one needs all the parts in the \"Steps To Reproduce\" + \"Expected Result\" + \"Actual Result\" formula.\n. The new export API has landed: #525. Is this still an issue?\n. Yep, category IDs don't work because term_exists() uses is_int() rather than is_numeric() (CLI parameters are always strings).\n. Nice catch! Forgot to add than when switching from WP_CLI::error() to WP_CLI::warning().\n. I re-ran the build and it seems to fail only on WP 3.4\n. See #875 for the source of the build error.\n. We don't support WP 3.4 anymore, so this is moot.\n. You already can: wp plugin update --all\n. The easiest way is to delete the blog and re-create it:\nwp site delete --url=your.blog.com\nwp site create --url=your.blog.com\nAnd no, we don't have a --blog-id parameter yet: #854\n. I agree that detecting subdirs automatically would be nice. However, I see regular expressions being used to parse PHP. I'm reminded of Cthulhu.\nHow about we don't dabble in such dark rituals and just use echo 'path: core' > wp-cli.yml?\n. Given that this really is a common setup and that the regex doesn't look that complicated, I'm going to merge this.\n. And so it begins: https://github.com/wp-cli/wp-cli/issues/929#issuecomment-32713953\n. cc: @westonruter\n. A cleaner approach would be to implement it as a completely separate script:\nphp wp-cli-ssh.php staging plugin status\nwhere wp-cli-ssh.php would look something like this:\n``` php\n<?php\nrequire DIR . '/vendor/autoload.php';\n$info = json_decode( exec( 'wp cli info --format=json' ) );\nuse Symfony\\Component\\Yaml\\Yaml;\n$global_config = Yaml::parse( $info['global_config_path'] );\n...\n```\nwp cli info --format=json needs to be implemented.\n. /vendor/autoload.php would be a separate autoload, just for wp-cli-ssh, and not the one from the WP-CLI install.\n. Yes, this would mean that wp-cli-ssh won't be displayed on http://wp-cli.org/package-index/, but I'm sure we can find some other way to promote it.\n. I've added some commits. Let me know if there's any other thing WP-CLI could do to make it easier to implement wp-cli-ssh as a separate utilty.\n. Ok, cool.\n. I don't think using find_command_to_run() on the local WP-CLI install makes sense at all, since you can have different configs on the remote server. You could just let the remote WP-CLI fail if the command is not found there.\n. As for disabled_commands, it shouldn't be that hard to check the positional parameters manually, instead of relying on WP_CLI\\Runner, especially since the positional parameters are already separated from the associative ones.\n. Heh... we both wrote the same thing.\n. It would be even more useful if the content could be generated randomly. Like, for example, fetching a list of words from some site and then jumbling them up for each post.\n. @ryanduff Just open the PR for random post content and then we'll see what we do with this one.\n. To clarify, I don't think it makes sense to open a separate PR just for that utility, without using it anywhere.\n. That's an interesting idea. The only drawback is that the content will be the same for all posts.\nIn any case, if we go with an explicit post_content parameter, I think it would make more sense for it to be a flag and read the value from STDIN, so that you could do:\ncurl http://loripsum.net/api/5 | wp post generate --post_content\nOr:\n```\nwp post generate --post_content <<EOB\nSome content here.\nMultiple lines.\nEOB\n``\n. Thanks!\n. I would go withwp plugin list --status=active.\n. Not sure what's going on, but I noticed that using an iterator doesn't make much sense here, since all the items are already loaded in memory by WP. We can replace it with a singleforeachthat does both filtering and massaging of values.\n. See https://github.com/wp-cli/wp-cli/blob/master/ci/prepare.sh#L9-13\n. The workflow thatwp core init-testscommand encourages is the following:\n- clone https://github.com/WordPress/WordPress\n- runwp core init-tests`\nThese days, if you're serious about doing Core development, you'll check out http://develop.svn.wordpress.org which contains not only the test suite, but other tools, like Grunt tasks.\nSo, the test suite is both more visible and easier to set up than before, which eliminates this command's raison d'etre. Therefore, it should be removed from WP-CLI.\n. One might argue that the command could be adapted so that it doesn't download the test suite, but simply configures the one that's downloaded from develop.svn.wordpress.org. The steps performed would be:\n- create wp-tests-config.php\n- create an empty database\nHowever, neither require any WP-CLI machinery, so they could be automated just as easily with a plain bash or PHP script. (Or, ideally, added as a Grunt task to Core.)\n. I'm probably going to write a new post and link to it from the old one.\n. Seems useful.\nToo much code duplication, though. You could create a private method or something.\n. It looks alright, but I think it would make more sense to show Success: Plugin 'scb-example' deactivated. messages only for the plugins that were previously active.\n. I don't see a --require= in your example command, so how does it get loaded?\n. A couple of things:\n1. Editing the main WP-CLI composer.json is not how community packages are supposed to be installed.\n2. Are you sure you ran composer update after editing composer.json?\n3. It works fine if I use --require= or if I define a require: key in ~/.config/wp-cli.yml\n. Also, even if you did run composer update, it still wouldn't work, since your Git repo is empty.\n. ```\nfind wp-cli's composer.json file and change to that directory\nexamples:\ncd ~/.wp-cli (default installation directory)\ncd /usr/local/opt/wp-cli (when installed with homebrew)\n```\nRight, but ~/.wp-cli/composer.json is different from ~/.wp-cli/vendor/wp-cli/wp-cli/composer.json.\nAnyway, it's because of subtle differences like this that we'll probably phase out Composer-based installs and recommend global configs instead.\n. > So ~/.config/wp-cli.yml works, right?\nIt works with master (0.13-alpha3).\n\nIs https://github.com/wp-cli/wp-cli/wiki/Community-Packages#installing-community-packages-manually outdated then?\n\nNot yet.\n. I don't know; I guess update the Homebrew package once WP 0.13 lands.\n. Ok, so the actual problem here is that you have an extra space before @when, so it's getting ignored. The fix:\ndiff\n   /**\n-   *  @when before_wp_load\n+   * @when before_wp_load\n. > I should note that this is an old multisite install from the pre-3.0 days\nI'm surprised WP-CLI worked at all.\n. Could you add a test in features/user.feature that catches this bug, so that it doesn't happen again?\n. wp-config.php is meant for defining constants, not for calling functions.\nThat remove_action() call would make more sense in your theme's functions.php file or even in a file inside wp-content/mu-plugins.\n. More info on mu-plugins: http://codex.wordpress.org/Must_Use_Plugins\n. Since it's executed only once and we can check for @ before doing any queries, it should be doable.\n. Oh, wait, I thought you were referring to the global --user= argument.\n. Well, I'm a bit concerned about doing this for subcommands that accept many users; it would be good if you could check is_numeric() before is_email(), since I assume the former is a bit faster than the later.\nAnd if we do this, then we should do --user= too (either in this PR or in a separate one), for consistency.\n. A related idea was to fetch info from the Codex, but that didn't work out too well at the time: #454 \nAlso, @rmccue's WP Parser generates HTML from phpDoc.\n. > I haven't had a chance to dive in to what the help command uses to parse the docs; is that generic enough to use?\nThe WP_CLI\\DocParser class has some goodies.\n. Besides displaying the docblock better, I think a really useful addition would be to display the file and line number where the thing is defined. I believe the reflection API already provides this info.\n. The output looks better now.\nI can't seem to get it to work for class properties. Tried wp doc WP_Query::$query and wp doc WP_Query '$query'. If it only works for static properties, you should mention that.\n. > but you can try it with either wp doc WP_Query query or wp doc WP_Query::query\nWP_Query has both a query() method and a $query property.\n. (3) is the only acceptable solution for a bundled command.\nI could have sworn I saw a project similar to WP Parser (linked above), which also generated docs for actions and filters.\n. Nice! From what I can tell, it doesn't use regex, but actually tokenizes the PHP source. It also looks like it depends on the phpDocumentor library.\nMaybe it would be best if the logic for parsing WP hooks was extracted into a separate library? Then WP Parser could use it for generating a documentation site, while the wp doc command could use it to show help directly on the CLI.\n. Ok, then what about merging the wp doc command into WP Parser? Then we'd have one package that has two commands: one for showing help directly on the CLI and another for generating a doc site.\nI'm asking because I won't bundle wp doc with WP-CLI, if it has all those extra dependencies.\n. I just landed some improvements in this area a few days ago and set up this wiki page: https://github.com/wp-cli/wp-cli/wiki/Plugin-Unit-Tests\nTry installing WP-CLI 0.13-alpha3 via git and re-run the scaffold command.\n. Done. Thanks for stopping by.\n. Related: #872\n. So, my question is: what happens if you happen to have a category with the name \"123\"?\n. Hm... beginning to think that it would be better to make the default global config path be ~/.wp-cli/config.yml, instead of ~/.config/wp-cli.yml, so that you'd have a single dir with all the things in it.\nLE: On second thought, you might have WP-CLI installed globally or via Phar. Nevermind.\n. This seems fine, but why do the tests fail?\n. > Aren't there too many other tools that use the ~/.config/` directory?\nYes, there are. That's why I made the comment, when I saw you write ~/.config/plugin.mustache.\n\nSo those 2 installation methodes prohibit us from using ~/.wp-cli/ as a spot to place all WP-CLI stuff.\n\nWell, not necessarily. Even if you downloaded the Phar file in ~/Desktop/wp-cli.phar, you could still have the extra stuff in ~/.wp-cli. So, I think I will change the default after all.\nBut this will work only if we \"absolutize\" template_path: relative to the config file in which it's defined, just like we do for path: and require:.\n. Yes, custom templates for wp scaffold child-theme would be of limited utility, but we should support them anyway, for completeness.\n\nIf I run wp scaffold plugin zombieland --template_path=zombie.mustache then:\nElse search if zombie.mustache exists in global ~/.wp-cli/templates/ dir.\n\nI think this extra search adds another layer of configuration that simply isn't worth the minor convenience it offers in return. We'd have to introduce a WP_CLI_TEMPLATES_PATH environment variable to allow people to change it. \nBeing able to set the path to it in the global YAML file is enough, IMO.\n. Besides that, it's sort of neither here, nor there. It would make more sense if:\na) instead of --template_path= you had a --template_dir= parameter, or if\nb) the command first checked for plugin.mustache inside the global template dir without having to pass a --template_path= parameter at all.\n. Actually, for a command like wp scaffold plugin-tests, a --template_path= parameter that only accepts a single file doesn't make sense at all, since it needs multiple templates.\n. Finally, once you have a custom template, wouldn't you also want to add extra CLI parameters to pass to your templates? And then wouldn't you want to add some validation/sanitization for those custom parameters?\nAt that point you'd have to implement your own scaffolding command from scratch. To aid that, we could move the pluralize() method to WP_CLI\\Utils\\, to make it accessible to custom commands.\n. > I've been trying to write down all scenarios down which only lead to more / too much possibilities & options to configure.\nI think it would be more useful to write down some use-cases, i.e. why you started working on this in the first place. :)\n. Then we should also make wp db import read from STDIN.\n. > there would be no difference between using wp db query or using wp db import -, right?\nIndeed. wp db cli is yet another alias for wp db query.\nWhat we care about is having symmetric interfaces for the two operations: import and export.\n. I think the handle_table() method needs some refactoring; it's huge! In general, the export logic could be separated better from the in-place update logic.\n. To that end, creating helper classes is encouraged, if passing state around between private methods becomes too cumbersome.\n. If they're only ever meant to be used with the search-replace command, I suppose you could put them in the same file. This would also require adding namespace WP_CLI\\SearchReplace; at the top, to avoid polluting the global namespace.\nAlternatively, you could put them in separate files in the php/WP_CLI/ directory.\n. Actually, putting them in separate files would be a bit more efficient, due to lazy loading, since it's unlikely that you'll need all of them at the same time.\n. The branch no longer merges cleanly, probably due to #951.\n. Attempted a refactoring myself; it's hard.\nIt seems like it would be easier to implement a search-replace-export command from scratch, see what parts are common with the search-replace command and then extract a base class or something.\n. Yeah, the more I think about it, the more I believe it should be a separate command:\n- SRE has to fetch all rows, while SR can fetch only the ones that need to be changed\n- SRE doesn't have to write back to the database, while SR does (related: #952)\n. Works for me:\nUser@air T$ mkdir test-900\nUser@air T$ cd test-900/\nUser@air test-900$ wp core download\nDownloading WordPress 3.8.1 (en_US)...\nSuccess: WordPress downloaded.\nUser@air test-900$ wp core download --force\nDownloading WordPress 3.8.1 (en_US)...\nUsing cached file '/Users/User/.wp-cli/cache/core/en_US-3.8.1.tar.gz'...\nSuccess: WordPress downloaded.\n. Thanks.\n. As a proof of concept, I updated the Homebrew formula to use the Phar file: https://github.com/scribu/homebrew-php/compare/wp-cli-phar\nNeed to handle the package index somehow.\n. I'm not trying to remove support for Composer. I'm trying to remove the dependency on Composer for installing WP-CLI.\nComposer is a great for us, the people that are developing WP-CLI, but it's not so great for end-users, who just want to use the executable.\nI still want to use Composer for installing third-party commands.\n. In other words, users should be able to install and use WP-CLI, even if their PHP install isn't configured properly for Composer to work.\n. @pixline Thoughts on this?\n. I think I can articulate better now why I think this is a good idea: it goes back to the principle of \"simple vs. easy\".\nUsing installer.sh is easy: just run a single command. But if something goes wrong, before even beginning to solve the problem, you have to first grok the code in the installer.\nBy comparison, installing WP-CLI by downloading the phar file is simple and incremental:\nDownloaded the file? Great, you can already run all the commands.\nWant to just type wp? Ok, just run two more commands.\nWant bash completions? Ok, do this.\nWant to install packages from the index? Run this other script.\nIf one step fails, you still have a functioning install and you know what went wrong.\nAs with setting up a WP install, there just is no \"one true way\" that works in all environments. And that's where package managers like Homebrew and apt-get become useful.\n. I've update the wp-cli.org homepage to promote the phar install, instead of the previous script.\n. I've also updated the instructions on the Community Packages page so that it works with the new install method.\n. It might have something to do with XDebug being installed or not. In any case, it's irrelevant for the test.\n. Why do you have a vendor/wp-cli/ dir inside the root wp-cli dir?\n. Yes, it would be nice for wp core version --extra to show the latest available version in some fashion.\nMaybe it would be better to replace wp core version --extra with a new subcommand, wp core status, which could have a --format=json parameter.\n. Related: https://github.com/sinebridge/wp-cli-about\n. Merged; thanks.\n. I think this would make more sense as a package. The rationale is that a lot of people have WP under some VCS, so they already have the means to check that files are intact via svn status or git status.\n. While working on the Homebrew formula for WP-CLI, I noticed that the md5 key was deprecated in favor of sha1. I have no idea why that is; just thought I'd mention it.\n. Closing in favor of #1154.\n. Big +1 for wp transient reset. And I think wp transient summary would be more useful than wp transient list.\nI'm ambivalent about the the export/import subcommands at this point.\n. One issue with these new subcommands is that they probably won't work when the user has memcache (or co.) enabled. I guess we could do the same thing we do with the wp rewrite subcommands: just show a descriptive error and exit.\n. Nailed down the testcase. Now all we need is a patch that passes the build.\n. wp core is-installed now correctly exists with 1. It prints a bunch of errors, which frankly I'm fine with, given the sorry state of the multisite bootstrapping code in WP.\n. So you're saying that the installer should return with the exit code of 1 if WP-CLI is already installed?\nWhat changed between the second and third tries? It's not clear from your examples.\n. It would be useful to see exactly the command after which it exited:\ncurl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash -x\n. I get the same behaviour when I use http://wp-cli.org/installer.sh\nBut when I use https://raw.github.com/wp-cli/wp-cli.github.com/master/installer.sh (as recommended on wp-cli.org) it works from the first try.\n. I don't know, but it can easily be solved by using curl -L.\nClosing, since this is an issue with Github Pages, which I have no control over.\n. Makes sense, as long as we account for variable number of parameters, like <id>....\n. We could automatically add the --debug parameter when invoking wp and then check STDERR, but that would be outside the scope of this PR, which I'll merge as-is.\n. According to the tests, importing a single file still works. Now just need to test if importing multiple files actually works.\n. Seems to work fine.\n. How about we make the URL subcommand accept multiple IDs? So you could do:\nwp post list --field=ID | xargs wp post url\n(it would print each URL on a new line)\n. Super. Going in.\n. Since we already have a caching mechanism, I suppose we could implement a wp plugin cache subcommand, which only downloads the zip into the cache dir.\nCare to open a PR?\n. That's the point of having test cases: they tell you when you've messed up, and then you can fix it. :P\n. But yeah, implementing this particular command would be a bit trickier, since you also have to hook up to the caching component.\n. Yeah, you don't need MySQL for that. Plugin zips are just store on the filesystem in a dedicated folder. Start from the Plugin_Command::install() method to see the flow.\n. Confirmed with Jetpack 2.7.\n. I don't think that's the problem. In the normal case, both WP and WP-CLI load themes after plugins. When activating plugins, both WP and WP-CLI load functions.php before the call to activate_plugin().\nHow I checked:\na) added a var_dump(__FILE__) at the top of the active theme's functions.php\nb) added an exit call right before the call to activate_plugin() in wp-admin/plugins.php\nc) tried to activate a plugin\n. I think I've got it: the problem doesn't happen in wp-admin because the theme checks the $pagenow global (which I think WP-CLI doesn't set):\nphp\nif ( ! class_exists( 'Featured_Content' ) && 'plugins.php' !== $GLOBALS['pagenow'] ) {\n    require get_template_directory() . '/inc/featured-content.php';\n}\n. I could go with a wp option list subcommand, which outputs a table and hides transients by default.\n. First of all, what's the use case for fetching the admin URL from the command line?\nThe front-end URL makes sense because it can be accessed by screen scrapers, cache managers etc. but the admin URL can only be accessed by logged-in users.\n. I don't think I can cherry-pick 2461d22 because it depends on the previous revision. So, please open a separate PR.\n. As for the comment I made in that old ticket, it was more to prove that the pattern could be easily extended.\nIn general, unless it's laid out either in prose or in code, don't assume that I've thought it through. :P\n. I noticed another bug: if you try to run wp site url on a non-multisite install, it throws a SQL warning, instead of erroring out with a \"this is not a multisite install\" message.\n. Could you test if this happens with the old exporter as well? (context: #525)\n. You could just switch to the v0.13.0 tag or download the stable Phar file (to avoid having to mess with dependent packages).\n. Were you able to test on the old version?\n. I assume this is a limitation in wp_user_update() but we should handle it better, regardless.\nIf you have a PR in the works, by all means. :)\n. I guess the easiest solution would be to change the example in the docs and add a warning when we detect that user_login is passed as a parameter.\n. To make this work, we'd have to do another UPDATE query after the call to wp_update_user(), as well as clearing some object caches.\n. Yeah, not very keen on doing this either. The problem was the misleading code example, which was addressed.\n. Yep, thanks for bringing it up.\n. More closely related to https://github.com/wp-cli/wp-cli/pull/784#issuecomment-24933902\n. This is fixed by #878. You can try it out by downloading the latest nightly build of wp-cli.phar.\n. Confirmed. It's caused by the presence of dirname(__FILE__) in your index.php:\nphp\nrequire( dirname( __FILE__ ) . '/wordpress/wp-blog-header.php' );\nWe'd have to adjust the regex to account for that (and add some unit tests for it).\n. In the mean time, you can create a wp-cli.yml file, with the path to the WP files:\nyaml\npath: wordpress/\n. If your WP install works with that SQLite drop-in, but doesn't work with WP-CLI, then yes, please open a new issue.\nStill need to figure out why WP-CLI doesn't parse index.php properly in your case.\n. Yeah, the regex isn't the issue. Sadly, I can't seem to reproduce this now.\n. I got it: the path ends up being /core, which is mistakenly considered to be absolute.\n. It looks like you added the bash completions, but you didn't add the path to the wp binary.\nRun the installer again and follow the instructions it prints out.\n. Being able to resume the regeneration process seems very useful. Some thoughts:\n- --start and --end are really vague; --min-id and --max-id would be less confusing, IMO\n- it would be a lot more efficient to restrict the IDs via SQL: WHERE ID > $lower (yes, it would be a bit more work to filter WP_Query with these parameters) \n- if $upper is not passed, we should simply not check it, instead of using PHP_MAX_INT\n. Actually, I think we could ditch WP_Query, since we don't benefit from any caching that it does etc.\nInstead, we could use a WP_CLI\\Iterators\\Query instance, which would also guarantee that we could fetch as many IDs as we want, without running out of RAM.\n. What you're saying makes sense if we were to allow generic filtering, like we do for wp post list. But that won't happen in wp media regenerate. If anything, it would happen in a wp media list subcommand:\nwp media list --author=1 --field=ID | xargs wp media regenerate\nSo that becomes a discussion about wp media list.\n. Actually, it turns out that you don't even need a --start and --finish parameters. You can just use seq:\nseq 1000 2000 | xargs wp media regenerate\nAnd the subcommand will fetch the attachments in that range that exist.\n. See #932.\n. If you have sudo access, you can do:\ncd /usr/local/wp/\nphp composer.phar require wp-cli/wp-cli=dev-master\nIf not, you can download a copy of the latest WP-CLI version inside your home directory and use that. See the latest instructions on wp-cli.org.\n. Other than that, the BackupBuddy error seems to be specific to that command, so you should contact the author of the plugin.\n. Didn't know Windows had an equivalent command.\nSince I don't have a Windows box to test this on, could you to open a PR that fixes it?\nI just introduced a helper for detecting the Windows env: https://github.com/wp-cli/wp-cli/commit/496d07b36223734f16121760eb22e0589e4a5351\n. Great, thanks!\n. > WP-CLI defaults to the parent Composer project for non-Phar (which means the packages will be auto-loaded already), and ~/.wp-cli for Phar (which means we'll still need some code to autoload).\nIf we still need additional auto-loading code, then what's the upside of conditionally using the parent composer.json file? You mentioned that it makes local testing harder.\n. If instead of WP_CLI_CONFIG_PATH we had WP_CLI_CONFIG_DIR, it could be used for finding both config.yml and composer.json. Just a thought.\n. Anyway, we could overwrite the value of HOME in the Behat test runner in the mean time, to see if any other issues crop up.\n. Try setting HOME in the Behat Process: https://github.com/wp-cli/wp-cli/blob/master/features/bootstrap/Process.php#L35\nIf that still doesn't work, we'll have to define a custom env variable.\n. Just FYI: if you declare the WP_CLI_BIN_DIR environment variable, you should be able to test against the phar build locally. In addition, here's a wrapper script that re-generates it each time it gets invoked:\n``` bash\n!/usr/bin/env bash\ncd ~/git/wp-cli/\nphp -dphar.readonly=0 utils/make-phar.php /tmp/wp-cli.phar --quiet\nchmod +x /tmp/wp-cli.phar\ncd - > /dev/null\n/tmp/wp-cli.phar $@\n```\nLE: posted before seeing your last comment\n. Ran behat-phar features/package.feature locally and it passed. Source for behat-phar:\n``` bash\n!/usr/bin/env bash\nmkdir -p /tmp/wp-cli-phar\nphp -dphar.readonly=0 utils/make-phar.php /tmp/wp-cli-phar/wp-cli.phar\npushd /tmp/wp-cli-phar/\nmv wp-cli.phar wp\nchmod +x wp\npopd\nWP_CLI_BIN_DIR=/tmp/wp-cli-phar behat $@\n```\nAnd one of the 3 Travis jobs also passed, so it might be a network issue. In any case, the command should output more detailed errors.\n. > Can you produce a hit list of what you'd like to see changed on this PR before merge?\nLeft comments inline. Also:\n$ echo $HOME\n/Users/User\n$ wp package list\nPHP Warning:  file_put_contents(/Users/composer.json): failed to open stream: Permission denied in /Users/User/git/wp-cli/vendor/composer/composer/src/Composer/Json/JsonFile.php on line 123\n. Simple: it detected that it wasn't a phar build, so it ran:\n$composer_path = dirname( dirname( dirname( WP_CLI_ROOT ) ) ) . '/composer.json';\nBut WP-CLI is not a dependency in my case; it's the root package (i.e. installed with utils/dev-build in /Users/User/git/wp-cli).\n. Yeah, something like this (pseudocode):\n$composer_path = /* path to composer.json when wp-cli is installed as a dependency */\nif ( !file_exists( $composer_path ) ) {\n  $composer_path = $HOME/.wp-cli/composer.json\n}\n. Issue 1):\n```\n$ wp package install danielbachhuber/wp-cli-stat-command\nInstalling danielbachhuber/wp-cli-stat-command (dev-master)\nUpdating composer.json to require the package...\nUsing Composer to install the package...\n - Loading composer repositories with package information\n - Updating dependencies\n - Your requirements could not be resolved to an installable set of packages.\n -\n  Problem 1\n    - danielbachhuber/wp-cli-stat-command dev-master requires wp-cli/wp-cli dev-master -> no matching package found.\n    - danielbachhuber/wp-cli-stat-command dev-master requires wp-cli/wp-cli dev-master -> no matching package found.\n    - Installation request for danielbachhuber/wp-cli-stat-command dev-master -> satisfiable by danielbachhuber/wp-cli-stat-command[dev-master].\nPotential causes:\n - A typo in the package name\n - The package is not available in a stable-enough version according to your minimum-stability setting\n   see  for more details.\nRead  for further common problems.\n```\nBesides not being able to install the package, note the strange Read  for further common problems. message at the end.\nIssue 2):\n$ wp package install x-team/wp-cli-ssh\nInstalling x-team/wp-cli-ssh (dev-master)\nUpdating composer.json to require the package...\nUsing Composer to install the package...\n - Loading composer repositories with package information\n - Updating dependencies\n - Installing package\n - Writing lock file\n - Generating autoload files\nSuccess: Package installed successfully.\n$ wp package list\n+-------------------------+------------------------------------------------------------+-----------------------------+\n| name                    | description                                                | authors                     |\n+-------------------------+------------------------------------------------------------+-----------------------------+\n| x-team/wp-cli-ssh       | Invoke WP-CLI on another server via SSH from local machine | Jonathan Bardo,Weston Ruter |\n+-------------------------+------------------------------------------------------------+-----------------------------+\n$ wp ssh\nError: 'ssh' is not a registered wp command. See 'wp help'.\nApparently the package is installed, but it's not loaded properly, at least when WP-CLI is install via Git.\n. Issue 3): wp package list should show the installed version.\nIssue 4): wp package install should show the full path to the composer.json file, IMO.\n. > wp server uses __invoke() and works just fine.\nDoesn't, for me:\n$ WP_CLI_CONFIG_PATH=/dev/null wp --info\nPHP binary: /usr/local/Cellar/php55/5.5.5/bin/php\nPHP version:    5.5.5\nphp.ini used:   /usr/local/etc/php/5.5/php.ini\nWP-CLI root dir:    /Users/User/git/wp-cli\nWP-CLI global config:   /dev/null\nWP-CLI project config:  /Users/User/wp/wp-cli.yml\nWP-CLI version: 0.14.0-alpha\n$ WP_CLI_CONFIG_PATH=/dev/null wp package list\n+------------------------------------------------+------------------------------------------------------------------------+-----------------------------+------------+\n| name                                           | description                                                            | authors                     | version    |\n+------------------------------------------------+------------------------------------------------------------------------+-----------------------------+------------+\n| humanmade/wp-remote-cli                        | Manage your WordPress sites using WP Remote and WP-CLI.                | Humanmade,Daniel Bachhuber  | dev-master |\n| x-team/wp-cli-ssh                              | Invoke WP-CLI on another server via SSH from local machine             | Jonathan Bardo,Weston Ruter | dev-master |\n| danielbachhuber/wp-cli-reset-post-date-command | Reset the post_date field on your posts after you change the timezone. | Daniel Bachhuber            | dev-master |\n| wp-cli/server-command                          | Start a development server for WordPress                               |                             | dev-master |\n+------------------------------------------------+------------------------------------------------------------------------+-----------------------------+------------+\n$ WP_CLI_CONFIG_PATH=/dev/null wp server\nError: 'server' is not a registered wp command. See 'wp help'.\nBut via Phar, it works fine:\n$ WP_CLI_CONFIG_PATH=/dev/null php ~/git/wp-cli/wp-cli.phar server\nPHP 5.5.5 Development Server started at Tue Jan 14 08:06:38 2014\n. I'm going to take a stab at #959 based off of this branch.\n. Regarding the wp package install <package> --version=<version> syntax: the --version= option can only be specified once, so it doesn't work for installing multiple packages in one go.\nwp plugin install and wp theme install already have this problem, so I'd rather get it right from the start this time, instead of adding more back-compat conversions further down the road.\nProposed syntax: wp package install <package>[:<version>]\nThis can later be extended to wp package install <package>[:<version>] <package2>[:<version2>]...\nI prefer : instead of =, because the version is actually a constraint, which can itself contain = characters. For example:\nwp package install wp-cli/server-command:>=1.0\n. So I successfully installed http://wordpress.org/plugins/composer/:\n$ wp package install srtfisher/wp-composer\nInstalling srtfisher/wp-composer (dev-master)\nUpdating /Users/User/.wp-cli/composer.json to require the package...\nUsing Composer to install the package...\n - Loading composer repositories with package information\n - Updating dependencies\n - Installing package\n - Installing package\n - Error: composer/composer 1.0.x-dev requires seld/jsonlint 1.* -> satisfiable by seld/jsonlint[1.0.0, 1.0.1, 1.1.0, 1.1.1, 1.1.2].\n - Installing package\n - Error: composer/composer 1.0.x-dev requires justinrainbow/json-schema 1.1.* -> satisfiable by justinrainbow/json-schema[1.1.0].\n - Installing package\n - Installing package\n - Writing lock file\n - Generating autoload files\nSuccess: Package installed successfully.\nAnd then:\n```\n$ wp\nPHP Warning:  require_once(/Users/User/.wp-cli/vendor/srtfisher/wp-composer/vendor/autoload.php): failed to open stream: No such file or directory in /Users/User/.wp-cli/vendor/srtfisher/wp-composer/class.php on line 28\nPHP Stack trace:\nPHP   1. {main}() /Users/User/git/wp-cli/php/boot-fs.php:0\nPHP   2. include() /Users/User/git/wp-cli/php/boot-fs.php:17\nPHP   3. WP_CLI\\Utils\\load_dependencies() /Users/User/git/wp-cli/php/wp-cli.php:13\nPHP   4. require() /Users/User/git/wp-cli/php/utils.php:29\nPHP   5. ComposerAutoloaderInit81c2aa63c5924153bb2fc3d97c7fd556::getLoader() /Users/User/.wp-cli/vendor/autoload.php:7\nPHP   6. require() /Users/User/.wp-cli/vendor/composer/autoload_real.php:48\nPHP   7. WpComposer->boot() /Users/User/.wp-cli/vendor/srtfisher/wp-composer/wp-cli-composer-command.php:6\nWarning: require_once(/Users/User/.wp-cli/vendor/srtfisher/wp-composer/vendor/autoload.php): failed to open stream: No such file or directory in /Users/User/.wp-cli/vendor/srtfisher/wp-composer/class.php on line 28\nCall Stack:\n    0.0013     226088   1. {main}() /Users/User/git/wp-cli/php/boot-fs.php:0\n    0.0016     234216   2. include('/Users/User/git/wp-cli/php/wp-cli.php') /Users/User/git/wp-cli/php/boot-fs.php:17\n    0.0032     395248   3. WP_CLI\\Utils\\load_dependencies() /Users/User/git/wp-cli/php/wp-cli.php:13\n    0.0074     734936   4. require('/Users/User/.wp-cli/vendor/autoload.php') /Users/User/git/wp-cli/php/utils.php:29\n    0.0076     746720   5. ComposerAutoloaderInit81c2aa63c5924153bb2fc3d97c7fd556::getLoader() /Users/User/.wp-cli/vendor/autoload.php:7\n    0.0279    1735344   6. require('/Users/User/.wp-cli/vendor/srtfisher/wp-composer/wp-cli-composer-command.php') /Users/User/.wp-cli/vendor/composer/autoload_real.php:48\n    0.0282    1764584   7. WpComposer->boot() /Users/User/.wp-cli/vendor/srtfisher/wp-composer/wp-cli-composer-command.php:6\nPHP Fatal error:  require_once(): Failed opening required '/Users/User/.wp-cli/vendor/srtfisher/wp-composer/vendor/autoload.php' (include_path='.:') in /Users/User/.wp-cli/vendor/srtfisher/wp-composer/class.php on line 28\nPHP Stack trace:\nPHP   1. {main}() /Users/User/git/wp-cli/php/boot-fs.php:0\nPHP   2. include() /Users/User/git/wp-cli/php/boot-fs.php:17\nPHP   3. WP_CLI\\Utils\\load_dependencies() /Users/User/git/wp-cli/php/wp-cli.php:13\nPHP   4. require() /Users/User/git/wp-cli/php/utils.php:29\nPHP   5. ComposerAutoloaderInit81c2aa63c5924153bb2fc3d97c7fd556::getLoader() /Users/User/.wp-cli/vendor/autoload.php:7\nPHP   6. require() /Users/User/.wp-cli/vendor/composer/autoload_real.php:48\nPHP   7. WpComposer->boot() /Users/User/.wp-cli/vendor/srtfisher/wp-composer/wp-cli-composer-command.php:6\nFatal error: require_once(): Failed opening required '/Users/User/.wp-cli/vendor/srtfisher/wp-composer/vendor/autoload.php' (include_path='.:') in /Users/User/.wp-cli/vendor/srtfisher/wp-composer/class.php on line 28\nCall Stack:\n    0.0013     226088   1. {main}() /Users/User/git/wp-cli/php/boot-fs.php:0\n    0.0016     234216   2. include('/Users/User/git/wp-cli/php/wp-cli.php') /Users/User/git/wp-cli/php/boot-fs.php:17\n    0.0032     395248   3. WP_CLI\\Utils\\load_dependencies() /Users/User/git/wp-cli/php/wp-cli.php:13\n    0.0074     734936   4. require('/Users/User/.wp-cli/vendor/autoload.php') /Users/User/git/wp-cli/php/utils.php:29\n    0.0076     746720   5. ComposerAutoloaderInit81c2aa63c5924153bb2fc3d97c7fd556::getLoader() /Users/User/.wp-cli/vendor/autoload.php:7\n    0.0279    1735344   6. require('/Users/User/.wp-cli/vendor/srtfisher/wp-composer/wp-cli-composer-command.php') /Users/User/.wp-cli/vendor/composer/autoload_real.php:48\n    0.0282    1764584   7. WpComposer->boot() /Users/User/.wp-cli/vendor/srtfisher/wp-composer/wp-cli-composer-command.php:6\n```\nNeedless to say, wp package uninstall doesn't work anymore, so I had to:\n1. Manually remove the package from ~/.wp-cli/composer.json.\n2. Run cd ~/.wp-cli/; composer update.\nThe problem is caused by two factors:\n- the srtfisher/wp-composer command also has composer/composer as a dependency\n- there are two autoload.php files involved\nI feel that it would be irresponsible to bundle a command that can break a WP-CLI install so easily.\n. > I'm tempted to spin this off into its own standalone package for now, see who actually uses it, and go from there.\nThat sounds like a sensible plan.\nYou created https://github.com/danielbachhuber/WP-CLI-Package-Command a while ago, but then I suggested moving it here, so that you could write Behat tests for it.\n. The implementation looks alright.\nRegarding the functional tests: you don't actually check the effect that the command should have (i.e. dis/allowing a theme to be used as the active theme on a particular site).\n. > Should wp theme list somehow indicate network-enabled vs site-enabled themes?\nRelated question: if a theme is not enabled on the particular site, should it show up in wp theme list at all?\n. Or do we need something like wp theme list --network, which shows all the themes available? This would go for wp plugin list too.\n. To be clear, it's easy to add lines to wp-config.php. Changing existing lines is something else.\n. I don't see this happening. To modify an existing wp-config.php file, you're better off just using sed.\n. Do you mean encouraging developers to check for the WP_CLI constant in their own plugins, when it makes sense? Otherwise, I don't see how this behavior could be implemented by third-party code.\n. Ah. Yes, that would cover the case when skip-plugins: would be set in a config file. And for the case where you'd pass it as a CLI arg, you could move the file out of the mu-plugins dir and load it via --require, as needed.\nGood enough.\n. Thinking more about this, there are several issues with the mu-plugins approach:\n- it would affect wp plugin * calls; unless of course you inspect the CLI arguments, which is a mess I want to continue to avoid\n- it's obscured, i.e. you can't tell what's going on just by looking at the script that calls wp\nOne thought in favor of --skip-plugins= over --enable-plugins=: it's way easier to load plugins manually than to unload them.\nFinally, we could make the value optional - --skip-plugins[=<plugins>] - so that you can disable all of them, if needed.\n. What I'm saying is that you can have the \"administrator\" use-case without any additional flags:\nwp --skip-plugins --require=wp-content/plugins/some-plugin/some-plugin.php do stuff\n. A --skip-theme flag seems fine.\n. Just encountered a live situation where this would be handy: #968\n. Wouldn't a --skip-mu-plugins flag also be necessary? What about drop-ins, like db.php?\n. Handled in #972.\n. How about a single Enabled column with 3 values: no, yes and network?\n. Yeah, it's not really well-defined. We could go with both.\n. Actually, both would be rather confusing: \"Enabled: both\" What?\n. That could work.\n. Try re-downloading the latest Phar again:\nwget https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nphp wp-cli.phar --info\n. Please run the following command:\nshasum wp-cli.phar\nThe hash should be e5a6cfaf739bc5f382d89ddfc650c4bc756374fb. If it's not, it means you have a corrupted file.\nEdit: I see you already posted the PHP version.\n. I also get the corrupted file now, which seems to be cut off at 512.000 bytes (the total size is 1.043.153).\nI will update wp-cli.org to point to the releases URL.\n. @wojsmol wvega posted two checksums; which one are you referring to? Also, it would help if you posted the exact output you get when running wget or cURL.\nFinally, the checksum doesn't matter, if the Phar file is working.\n. > the path to php and php.ini defined in ~/.profile\nIf you mean the WP_CLI_PHP_PATH environment variable, yes, it is ignored by the Phar build. You have to call it explicitly:\n$ /path/to/php wp-cli.phar --info\n. I is the sux0r. Thanks!\n. I assume it's kses kicking in. What happens if you add --user=some_admin_username to the command?\n. Wait, this is still a bug. When you're creating a post from the command-line, you clearly have admin access, so unfiltered HTML should be enabled by default, when --user is not passed.\n. Alternatively, we could just throw an error if both --user and the --post_author parameters are missing.\nLE: The problem with that approach is that we'd have to repeat those checks for wp post edit and wp comment create too.\n. Initially, I tried making current_user_can('unfiltered_html') return true via the 'map_meta_cap' filter, but since KSES filters are global anyway, simply calling kses_remove_filters() works fine.\nIf some plugin code then calls wp_set_current_user() and KSES is re-enabled, then that's how it should be.\n. You can see the dockblock in use with wp help db args or wp db args --help. It will also show up on http://wp-cli.org.\n. Got a bunch of warnings:\n$ mysqldump $(wp db args) --lock-tables false\nWarning: Using unique option prefix pass instead of password is deprecated and will be removed in a future release. Please use the full name instead.\nWarning: Using a password on the command line interface can be insecure.\nmysqldump: Character set ''utf8'' is not a compiled character set and is not specified in the '/usr/local/Cellar/mysql/5.6.13/share/mysql/charsets/Index.xml' file\n. The password warning seems particularly hard to get rid of, so I guess we'll have to stick with #817. :(\n. > The original library handles things better, at least for Windows, by returning 80 as a default.\nYes, I know about jlogsdon/php-cli-tools#32 but since it isn't included in the latest stable release, I guess we'll just have to make a tag in wp-cli/php-cli-tools and use that.\n\nI'd suggest querying for the terminal width once, and passing it into the display() method of the progress class rather than doing it on every tick. This would reduce exec calls to 1\n\nThat suggestion will have to be made to the php-cli-tools authors, since it involves some non-trivial refactoring. (because display() isn't called directly)\n. Hello,\nIf you look at the code that implements the user-meta subcommands, you'll see it just calls the basic WP functions, such as update_metadata(). Therefore, I assume that PODS does some filtering behind the scenes.\n. Yep, both --first_name=, --last_name= parameters as well as the --no-email flag are good suggestions. Pull requests welcome.\n. > i did not realize first and last names are not in there and probably are meta fields hence the limits on wp create ...\nRight, nevermind.\n\nthe other thing that caught me off guard a tad with the wp user create is that the new user welcome emails are not sent\n\nActually, just looked and WP-CLI doesn't explicitly disable them, so that might be a bug.\n. Will handle the user notifications in #1002\n. Actually, wp_insert_user() supports both first_name and last_name, so we should expose them as CLI parameters.\n. Try wp eval 'echo getenv(\"PATH\");'\nAlso, you should upgrade to WP-CLI 0.14, just to be sure we're on the same page.\n. Sure, it's the run_mysql_command() function: https://github.com/wp-cli/wp-cli/blob/master/php/utils.php#L318\n. > I get quite an empty env :-(\nAh, that's probably because $_ENV is empty: http://php.net/manual/en/ini.core.php#ini.variables-order\nI guess a solution would be not not overwrite the whole env, but just the variable we're interested in:\nMYSQL_PWD=pass mysql --no-defaults ...\n. > The problem is the shell PATH values are not available through bin/wp\nThat's not quite true. Compare the values of getenv('PATH') and $_ENV['PATH'].\n. In any case, I will attempt to implement the solution I have in mind as soon as I have a bit of free time.\n. Postmortem:\nInitially, we used putenv(), which made proc_open() inherit the modified value. It seemed to work fine.\nThen I replaced it with the $env parameter for proc_open() in f50f84118ad753c42175310d164c547a338437a6 (part of #685), not realizing that it would replace the whole environment.\nThis immediately caused problems, which were fixed in #775 by using $_ENV.\nIf the approach in cc48e67 causes other problems, we can go back to using putenv().\n. You could use reflection to test the private recursive_unserialize_replace() method: http://stackoverflow.com/a/2798203/97998\nOr you could convert it into a standalone function in php/utils.php.\n. Great; thanks!\n. I merged too soon: the unit tests pass, but the Behat tests don't: https://travis-ci.org/wp-cli/wp-cli/jobs/16767383\n. My hunch is that it's because $data is now accepted by reference:\n- function recursive_unserialize_replace( $from = '', $to = '', $data = '', ...\n+ function recursive_unserialize_replace( $from = '', $to = '', &$data = '', ...\nRelevant code:\nhttps://github.com/wp-cli/wp-cli/blob/1fcbba7/php/commands/search-replace.php#L130-134\n. I just removed the reference and it seems to work fine now.\n. Interesting. One note I want to make is that it will probably not have any effect (either good or bad) if the storage engine is MyIsam.\n. > Would be nice if transactions are built into wp-cli without any unwanted after-effects.\nI don't think that's possible. Even for the search-replace command, you probably don't want to do one huge transaction that updates all the tables at once, but rather do one transaction per table or something like that. There's no way to do that breakout generically.\n. Here's what I get on OS X:\n```\n$ wget --version\nGNU Wget 1.14 built on darwin13.0.0.\n$ wget https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\n--2014-01-10 01:49:48--  https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\nResolving github.com... 192.30.252.128\nConnecting to github.com|192.30.252.128|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://s3.amazonaws.com/github-cloud/releases/2360755/0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment%3B%20filename%3Dwp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389311449&Signature=Wb1GFOEA4sgaG%2FmAEiYF0FXseEQ%3D [following]\n--2014-01-10 01:49:49--  https://s3.amazonaws.com/github-cloud/releases/2360755/0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment%3B%20filename%3Dwp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389311449&Signature=Wb1GFOEA4sgaG%2FmAEiYF0FXseEQ%3D\nResolving s3.amazonaws.com... 205.251.243.106\nConnecting to s3.amazonaws.com|205.251.243.106|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1043153 (1019K) [application/octet-stream]\nSaving to: \u2018wp-cli.phar\u2019\n100%[==================================================================================================================================================================>] 1,043,153    144KB/s   in 7.9s\n2014-01-10 01:50:00 (129 KB/s) - \u2018wp-cli.phar\u2019 saved [1043153/1043153]\n```\nAnd on Ubuntu 12.04:\n``\n$ wget --version\nGNU Wget 1.13.4 built on linux-gnu.\n$ wget https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\n--2014-01-09 23:52:55--  https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\nResolving github.com (github.com)... 192.30.252.129\nConnecting to github.com (github.com)|192.30.252.129|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://s3.amazonaws.com/github-cloud/releases/2360755/0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment%3B%20filename%3Dwp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389311636&Signature=5usHd9xnvygMVsLVZTbkvchpQeY%3D [following]\n--2014-01-09 23:52:55--  https://s3.amazonaws.com/github-cloud/releases/2360755/0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment%3B%20filename%3Dwp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389311636&Signature=5usHd9xnvygMVsLVZTbkvchpQeY%3D\nResolving s3.amazonaws.com (s3.amazonaws.com)... 176.32.102.82\nConnecting to s3.amazonaws.com (s3.amazonaws.com)|176.32.102.82|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1043153 (1019K) [application/octet-stream]\nSaving to:wp-cli.phar'\n100%[==================================================================================================================================================================>] 1,043,153    437K/s   in 2.3s\n2014-01-09 23:52:59 (437 KB/s) - `wp-cli.phar' saved [1043153/1043153]\n```\nAnd on CentOS 6.4:\n```\n$ wget --version\nGNU Wget 1.12 built on linux-gnu.\n$ wget https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\nwget https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\n--2014-01-10 01:00:38--  https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\nResolving github.com... 192.30.252.130\nConnecting to github.com|192.30.252.130|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://s3.amazonaws.com/github-cloud/releases/2360755/0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment%3B%20filename%3Dwp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389312104&Signature=bEyjDTRC8l%2F4sfUuA%2BwoQpHDFdk%3D [following]\n--2014-01-10 01:00:44--  https://s3.amazonaws.com/github-cloud/releases/2360755/0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment%3B%20filename%3Dwp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389312104&Signature=bEyjDTRC8l%2F4sfUuA%2BwoQpHDFdk%3D\nResolving s3.amazonaws.com... 205.251.242.132\nConnecting to s3.amazonaws.com|205.251.242.132|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 1043153 (1019K) [application/octet-stream]\nSaving to: \u201c0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment; filename=wp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389312104&Signature=bEyjDTRC8l%2F4sfUuA+woQpHDFdk=\u201d\n100%[=====================================================>] 1,043,153    309K/s   in 3.3s\n2014-01-10 01:00:54 (309 KB/s) - \u201c0de768b6-5ec6-11e3-85ec-e9254a51ea25.phar?response-content-disposition=attachment; filename=wp-cli.phar&AWSAccessKeyId=AKIAISTNZFOVBIJMK3TQ&Expires=1389312104&Signature=bEyjDTRC8l%2F4sfUuA+woQpHDFdk=\u201d saved [1043153/1043153]\n```\nSo, it seems specific to CentOS. You could try curl instead.\nThe point of not having precise download instructions is to avoid people happily copying the download URL in their blog posts and then not keeping it up-to-date.\n. More precisely: curl -L {download-url} > wp-cli.phar\n. > Most importantly, the files do not exist after a 'successful' download. It's as if WP was downloaded to a different location.\nYes, it downloads them to the outer WP dir.\n. To see where WP-CLI is finding existing WP files, you can run wp eval 'WP_CLI::line(ABSPATH);'\n. @mannieschumpert Are you running the nightly? The fix is not yet available in the stable version.\n. Nevermind; this is contained in the 0.14 release. Maybe you're running 0.13.\n. Yes, it is, actually, because that first alpha might not contain this particular fix.\nPlease update to the stable version.\n. Also note that the wp eval 'WP_CLI::line(ABSPATH); check is no longer accurate. The only way to test that this works correctly is by actually running wp core download.\n. You could create a wrapper script, called wp:\n``` bash\n!/usr/bin/env bash\nexec \"${WP_CLI_PHP-php}\" $WP_CLI_PHP_ARGS /path/to/wp-cli.phar \"$@\"\n```\nand then execute that, instead of calling wp-cli.phar directly.\n. The only difference is that, in my version, the script will default to php if WP_CLI_PHP is not defined.\nSee http://tldp.org/LDP/abs/html/parameter-substitution.html\n. Why? Since you have to hard-code the path to the Phar file, you might as well hard-code the path to the PHP binary. For example:\n``` bash\n!/usr/bin/env bash\n/path/to/bin/php -c /path/to/php.ini /path/to/wp-cli.phar\n```\nSo there's nothing special about it; if you don't know how to create a one-line bash script, maybe you shouldn't be using WP-CLI.\n. Or someone might be better off creating an alias, instead of an explicit file.\nThe idea is that it's generic Bash usage; there's nothing specific to WP-CLI.\n. And that's one of the reasons why the Phar install is the preferred installation method now: you can make it as simple or as complex as you want:\n- call wp-cli.phar directly or\n- hardcode the path to the PHP binary or\n- add indirection by using environment variables, such as WP_CLI_PHP or\n- etc.\n. I think this PR should focus only on caching wp core download calls, since that's the biggest win.\nCaching for wp core upgrade can come later, although I'm not really sold on the benefits.\n. Not really sure why you expect it to work though. Does it show up in wp plugin list as lowercase?\n. Oh, got it. Yeah, we should fix that.\n. It makes sense: is_plugin_active() checks if the plugin basename exists in the 'active_plugins' option, which of course it doesn't.\nSo, the actual bug is that wp plugin deactivate (as well as the other related subcommands) match the uppercase plugin name, which happens on case-insensitive file systems (the default on OS X, for example).\n. Given that the wp_options table is always case sensitive, it seems like the only way to make this work in all cases is by going through all the plugins one by one and seeing if any of them match the exact name given by the user.\n. Running all the functional tests against all the 3 scenarios would slow down the builds too much. Running only the wp package tests would be a good middle ground, I think.\n. Merge on 2 different branches? No, just add 2 more calls to Behat in the test script, pointing to different wp binaries.\n. Handled the direct clone case in 8973550d48e874fa768cfe204889432392ea07ef\nTesting the case when WP-CLI is installed as a dependency will take a bit more work.\n. Done: https://github.com/wp-cli/wp-cli/wiki/Community-Packages/_compare/238e2721016b33ed6f8bfe1881d6ad740130d2fe...662d11d79c1eb03255d18b4a6dcd41e0af5fa9d9\n. Nice catch!\n. Seems like a job for a wp scaffold package subcommand, similar to wp scaffold plugin.\n. As a first pass, the preparation script (specified as before_script: in .travis.yml) could just download the wp-cli repo, making the testing framework code available in its environment, without any modifications.\n. Related: #1088\n. Which extra packages do you need? If it's just the ones for PHPUnit or Behat, I think it would be faster to just download behat.phar (PHPUnit is pre-installed on Travis).\n. Another option would be to move the test files to a separate repo. This way, you wouldn't need to download the main WP-CLI files twice.\nBefore ~~doing~~ commiting to that, it would be useful to get a feel for how much of a speed-up we would actually gain.\n. I don't understand how any of the 3-4 options mentioned so far affect the frequency of people needing to update their testing script.\n. As in, the test files are downloaded from us in all cases.\n. Not sure if I mentioned it before (it's been on my mind since the beginning), so I'm going to say it anyway, because it's important:\nIf you commit to this (downloading the WP-CLI test framework on each build), the step definitions are set in stone; you can't change them lest you cause failures in the packages that use them.\n. An alternative solution for your particular problem would be to make all these commands exit with status 0 + warning, instead of exiting with status 1 + error message.\nWith that change, a --force flag would no longer be necessary, but would still be nice to have.\n. No, I meant showing a warning and doing nothing:\n$ wp core install\nWarning: WordPress already installed. Quitting.\n. Thinking more about this, the reason wp core download has a --force flag is because you can't just do rm -rf * because of the wp-content directory.\nBut for all the others, it's pretty simple to emulate:\n- rm -f wp-config.php; wp core config ...\n- wp db reset --yes; wp core install ...\n- wp db reset --yes; wp core multisite-install ...\n. rm -f always exits with status 0. wp db reset would exit with status 1 only if the DB username/password is wrong.\nI would prefer not to add a --force flag, because:\n1) it's better for the user to see exactly what the destructive action is and\n2) the destructive action is simple to perform; it's not some arcane incantation\nClosing.\n. > It's a bad idea to run wp-cli as root.\nIt's a bad idea to run any command as root. Unless you think WP-CLI is particularly dangerous for some reason, I don't see the point in adding a special check for this.\n\nThe fix is to only load specified plugins. For most functions, you don't need plugins. For when you do, just run with \"--enable-plugins=plugin1,plugin2\" and it works with globbing, too so \"--enable-plugins=*\" works.\n\nA similar idea has been suggested in #940 but your approach is more interesting.\nI'd make one important change: if you specify --enable-plugins only those plugins are loaded, but if you don't pass that flag, all plugins are loaded. This also ensures backwards compatibility.\n\nI use a variant of this makefile/spec combo to build a wp-cli rpm for easy deployment. Hope it's useful!\n\nInteresting. Related: #192\n. > For example, current woocommerce makes WP-CLI go beserk so only skipping that plugin would be easier.\nRight, but what about @kurtpayne's point that having all plugins disabled won't affect most CLI commands?\n. Let's continue this in https://github.com/wp-cli/wp-cli/pull/940#issuecomment-32688544 and discuss on this PR the other two commits.\n. #973 also suggests restricting running as the superuser.\n. You can just use WP_CLI::line( WP_CLI::colorize( $string ) );\nWP_CLI::line() used to have color formatting built in, but it was removed in #517. Even with that change, passing variable strings through colorization still caused issues, such as #832.\n. Does wp core version work, at least?\n. Welp, the only thing I can suggest is to diagnose the problem further, using GDB or xDebug: http://stackoverflow.com/a/13269679/97998\n. So you're saying that simply assigning the code to a temporary variable before passing it to eval() fixes the problem you're having?\n. Huh... maybe the segfaults in #1175 were related?\n. This looks fine, except the documentation doesn't reflect the new capability.\n. Yes, the examples and the parameter descriptions.\n. Again, you need to update the docs. :)\n. Seems to fail on --post_type=any.\n. You'll probably have to check against WP 3.4.2, since that's the run that failed.\n. I like the brevity of --skip-plugins=buddypress,akismet, compared to --skip-plugin=buddypress --skip-plugin=akismet.\nThe drawback is that it would need some special handling to make it work as expected in wp-cli.yml:\nyaml\nskip-plugins:\n  - buddypress\n  - akismet\n. Going to merge it as-is, to get some real-world usage.\n. You're welcome.\nYou don't really have to do anything with your fork. You could leave it as is, delete it, delete just the skip-plugins branch, etc.\n. Similar: https://github.com/wp-cli/wp-cli/pull/966/files#diff-17626789dd81897bc9f712aa8a7938faR10\nI couldn't find you on Freenode. You could send me an email instead, to scribu AT gmail.\n. Got the details from @SpikesDivZero. The scenario involves an install already compromised via the web somehow. When WP-CLI is run as root, the attacker can get even more privileges - ALL OF THEM, in fact.\n. Couple more thoughts:\n- the check doesn't seem to be needed when running commands that have the @when before_wp_load tag\n- the config option should be called --allow-root, instead of --allow_root\n. Thinking more about this, it's sometimes useful to run a WP-CLI command as the same user that runs the web server.\nFor example, say you have Apache running under the www-data user. If you run sudo -u www-data wp media regenerate, then all the newly created thumbnails will still be editable from /wp-admin/, without setting extra permissions on them.\n. > so wouldn't really be related to this PR as I understand it?\nNo, not really. Just a general consideration about file permissions.\n. If you're on Debian or Ubuntu, it might have something to do with the recent JSON PHP extension being replaced.\nIn any case, the simplest solution is to delete the whole ~/.wp-cli directory and install the Phar file: http://wp-cli.org/#install\n. If it's the same logic, then the duplicated code should be moved to a helper method and called from both download() and update().\nAlso, make sure you use tabs, instead of spaces.\n. Thanks.\n. See the workaround suggested in #929.\nOther than that, try disabling the ACF plugin. Or if you're running the nightly build (0.14.0-alpha), you can use the --skip-plugins flag:\nwp --skip-plugins core version\n. Two things:\n1. I think wp is-multisite is rather ambiguous, since the corresponding is_multisite() function only checks if the MULTISITE constant is defined, not if the multisite tables are present. Therefore, I think wp is-installed --network would be clearer.\n2. Need Behat tests for the 4 possible states:\n   - single-site config, no tables\n   - single-site config, installed\n   - multi-site config, no tables\n   - multi-site config, installed\n. The checks can be sprinkled throughout the existing Behat tests in features/core.feature.\n. Handled in #1108.\n. @danielbachhuber Thoughts on this?\n. Edge case:\ncore/\nindex.php\nwp-content/\n  index.php\nwhere wp-content/index.php is:\nphp\n<?php\n// Silence is golden.\n?>\nRunning wp from any subdirectory of wp-content will fail to find the WP subdir.\n. Wouldn't being able to import the most recent X posts work just as well?\n. If not, I'd be more interested in enabling these sorts of extra arguments to be implemented as separate packages.\nSomething like this:\nwp --require=extra-import-args.php import --days=7\nwhere extra-import-args.php would just have one or more calls to add_filter().\n. Wouldn't it be more efficient to export a given number of days and then just import that whole file?\n. So how does an export from VIP look like? I assume it's not one gigantic file; can't you just import the most recent file?\n. > it may be best to apply the number of days cutoff only for Posts and attachments where the parent is older than the cutoff. You would still want to import Pages, menu items, custom post types, etc that are older.\nIt's for exactly these kinds of considerations that I don't think there's a one-size-fits-all solution. Some might want to include pages, some might not etc. Couple that with the fact that there are other ways of achieving the same end-result (i.e. simply deleting older posts after they-re imported), without much loss in efficiency, and this becomes firmly package territory.\nAnd just because it's a separate package doesn't mean that it can't be used by others.\n. This has to be fixed by the VVV guys. You should open a ticket there.\nThere are two ways to fix this:\na) replace wp with wp --allow-root or\nb) replace wp with sudo -u nobody wp (or whatever the user for nginx is)\n. Could you share the list of actual plugin files? i.e. ls wp-content/plugins\n. > maybe it just gets the name for the directory?\nThat is correct. Workarounds:\nA) files directly in the plugins/ dir:\nsidekick.php\nsidekick_Local.php\nsidekick_Qa.php\nB) separate directories:\nsidekick/sidekick.php\nsidekick-local/sidekick.php\nsidekick-qa/sidekick.php\nC) Git branches (recommended)\n. Oh, wp plugin activate sidekick/sidekick_Local should also work, regardless of what wp plugin list says.\n. There's a lot of history regarding WP_ADMIN. You can start at #674.\nBut defining it only on plugin activation is an interesting suggestion.\n. Instead of editing wp-config.php, a better workaround would be to create a temporary file, say make-admin.php, with a single line:\nphp\n<?php\ndefine( 'WP_ADMIN', true );\nAnd then include it only when needed:\nwp --require=make-admin.php plugin install plugin.zip --activate\n. Caused by 27d80a619b1cc2c13b0d65d9904ab56bbb482f53. Would be good to have a Behat test for this.\n. Hello,\nBasically, you can't, because splitting comma-separated category IDs is not implemented yet.\nPull requests welcome: https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md\n. What's the exact command you're using? Do the category IDs actually exist? What version of WP?\n. Are you sure the cache directory is writable?\nNot much else I can do to help with the info you've given.\nRef: #900 \n. Please upgrade to 0.14.0-beta.\n. Actually, you did nothing wrong: the build is stale due to a bug in the deploy script.\nTrying to fix with 6f2367be725fd3aab27276ac616f37a2834805a3\nLE: fixed; wp-cli-nightly.phar is up-to-date again.\n. I'm really confused about the connection between wp-cron and wp shell.\nMaybe it would be clearer if you gave an example of the problem.\n. WP-CLI already sets some of these headers, but only if you pass the --url= parameter. Going to change it so that they're always set.\n. Actually, I still don't get why you think a --header= parameter is necessary.\nYou can set the environment variables just like you do for your cron script. Proof:\nbash\nREMOTE_ADDR='127.0.0.1' wp eval 'WP_CLI::line($_SERVER[\"REMOTE_ADDR\"]);'\n. REMOTE_ADDR is now always set to 127.0.0.1. and REQUEST_URI is set based on what you set url: to.\n. Confirmed, although I'm getting a slightly different error message:\n``` bash\n$ composer require wp-cli/wp-cli:dev-master\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - Can only install one of: wp-cli/php-cli-tools[dev-master, v0.9.3].\n    - Can only install one of: wp-cli/php-cli-tools[v0.9.3, dev-master].\n    - wp-cli/wp-cli dev-master requires wp-cli/php-cli-tools dev-master -> satisfiable by wp-cli/php-cli-tools[dev-master].\n    - Installation request for wp-cli/wp-cli dev-master -> satisfiable by wp-cli/wp-cli[dev-master].\n    - Installation request for wp-cli/php-cli-tools == 0.9.3.0 -> satisfiable by wp-cli/php-cli-tools[v0.9.3].\nInstallation failed, reverting ./composer.json to its original content.\n``\n. Actually, if I manually changecomposer.jsonfrom\"wp-cli\": \"@stable\"to\"wp-cli\": \"dev-master\", and then runcomposer update`, it works fine.\nLE: Opened composer/composer#2668\n. Don't forget to run composer self-update too.\nIn any case, closing, as it's now clear that this is a Composer issue.\n. Would be useful to see what line 6 looks like. A quick way to see the start of the file:\nhead $(which wp)\n. /usr/bin/wp should not be an HTML file. I suggest you delete it and re-install WP-CLI.\nAfter you've done that, if you still have problems, please post the exact steps you performed to do the install.\n. What you got wrong was the URL:\nhttps://github.com/wp-cli/wp-cli/releases\nvs.\nhttps://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar\n. Looking again at #288, can you post the full contents of your wp-config.php file (without any secret stuff)?\n. Please let me know what happens when you run the following commands:\n- wp core version\n- wp --skip-plugins plugin status\n- wp --url=some-other-url.com plugin status\n. I forgot to mention that the --skip-plugins flag only works with 0.14.0-beta.\n. Well, one way to debug this error would be to add the following code at the top of wp-includes/load.php:\nphp\ndebug_print_backtrace();\nOther than that, I don't have any other suggestions. You have to figure out what's different between the installs that work and the ones that don't.\n. Or you could use the step-by-step debugger from XDebug (integrated into many editors, like NetBeans) to see exactly when the file is loaded a second time.\n. I'm afraid not.\n. > require_once('C:\\server\\www\\dev\\wordpress\\src\\wp-settings.php') C:\\server\\www\\dev\\wp-config.php:105\nThat's the bug: the WP_CLI\\Runner\\get_wp_config_code() method should remove the line that loads wp-settings.php. (WP-CLI then loads its own wp-settings-cli.php file.)\nCould you paste that part of your wp-config.php file?\n. Actually, the bug seems to be higher up:\neval('require 'C:\\server\\www\\dev\\wordpress' . '/../wp-config.php';') C:\\server\\ext\\wp-cli\\php\\wp-cli.php:23\nIt looks as if inside your main wp-config.php file you load some other wp-config.php file.\n. > Hm, not sure how to config this best now since dev repo has that extra level, but core doesn't look for config two levels above.\nJust have a config file that contains all the common stuff, except the require wp-settings.php part.\n\nOn wp-cli side might make sense to add warning if that line isn't found and skipped that config looks \"weird\"?\n\nI can't think of a robust way of checking that, besides employing a PHP parser.\n. > Yeah, but I don't want to have config inside repo. Also if I don't have require then it would work for wp-cli, but not normal load properly, right?\nI might not understand your setup properly, but here's what I'm talking about:\n``` php\n<?php\n// wp-config.php\nrequire '/path/to/wp-common-config.php';\n// more stuff here, possibly\nrequire ABSPATH . 'wp-settings.php';\n```\n\nWell the line is checked for and skipped. So if it's never skipped then logically it was never matched and wasn't present, right?\n\nAh, you mean checking if the require 'wp-settings.php' line is present. I guess that might work.\n. @ssbarnea Please paste the contents of your wp-config.php file (without sensitive data, like passwords).\n. I would rather not add descriptions until they can be displayed properly in the table. Related: #804\n. > Also take into account that these new fields were not added to default list of columns, so didn't affect anyhow command line usage.\nAlright then. Going in.\n. wp post create already has that, for example: d11071ab41b8dd72e1579fbe0cf5c9c780b02561\nRelated: #212 \n. The utils/dev-build script is just how I set up WP-CLI for development. It's not really meant to be 100% portable. Maybe I should just remove it.\nPS: I edited your issue to fix the formatting.\n. Requires the readline library.\n. Run php -i | grep -A2 readline to make sure.\n. It's because wp rewrite structure calls WP_CLI::launch_self() which doesn't pass --allow-root to the child process. Related: #882\n\nWorks fine with sudo -u USER, so this is the workaround till bug is fixed.\n\nActually, using sudo -u USER is the correct way and --allow-root is the workaround. ;)\n. @tareq1988 Now if you've done claimed it, you'd better deliver. :P\n. Or just work on something else. Plenty of stuff to do.\n. For example: https://github.com/wp-cli/wp-cli/issues/708\n. Handled in #999.\n. Erm... is there a way to make this work without actually listing all the default capabilities for each role?\n. > so its still just assuming it was successful and outputs a success message at the end.\nI guess that will have to do, then.\n. Oh, and it would be nice to have some Behat tests for this.\nSee https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-and-writing-tests and also let me know if you have questions about that.\n. Looks good, thanks.\n. In this case, I think the most effective way to debug is to step through the code using Netbeans or some other editor that integrates with XDebug's remote debugger.\n. Seems to work fine for me:\n$ sudo apt-get install memcached php5-memcache\nReading package lists... Done\nBuilding dependency tree\nReading state information... Done\nSuggested packages:\n  libcache-memcached-perl libmemcached\nThe following NEW packages will be installed:\n  memcached php5-memcache\n0 upgraded, 2 newly installed, 0 to remove and 190 not upgraded.\nNeed to get 0 B/122 kB of archives.\nAfter this operation, 383 kB of additional disk space will be used.\nSelecting previously unselected package memcached.\n(Reading database ... 84934 files and directories currently installed.)\nUnpacking memcached (from .../memcached_1.4.13-0ubuntu2.1_amd64.deb) ...\nSelecting previously unselected package php5-memcache.\nUnpacking php5-memcache (from .../php5-memcache_3.0.6-1_amd64.deb) ...\nProcessing triggers for man-db ...\nProcessing triggers for ureadahead ...\nSetting up memcached (1.4.13-0ubuntu2.1) ...\nStarting memcached: memcached.\nSetting up php5-memcache (3.0.6-1) ...\n``\n$ wget http://plugins.svn.wordpress.org/memcached/trunk/object-cache.php -O wp-content/object-cache.php\n--2014-02-09 16:38:52--  http://plugins.svn.wordpress.org/memcached/trunk/object-cache.php\nResolving plugins.svn.wordpress.org (plugins.svn.wordpress.org)... 66.155.40.242\nConnecting to plugins.svn.wordpress.org (plugins.svn.wordpress.org)|66.155.40.242|:80... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 10335 (10K) [text/plain]\nSaving to:wp-content/object-cache.php'\n100%[=============================================================================================>] 10,335      --.-K/s   in 0s\n2014-02-09 16:38:53 (75.9 MB/s) - `wp-content/object-cache.php' saved [10335/10335]\n```\n$ wp post list\n+----+--------------+-------------+---------------------+-------------+\n| ID | post_title   | post_name   | post_date           | post_status |\n+----+--------------+-------------+---------------------+-------------+\n| 1  | Hello world! | hello-world | 2014-02-09 16:34:51 | publish     |\n+----+--------------+-------------+---------------------+-------------+\n(using WordPress 3.8.1 and Ubuntu 12.04 LTS)\n. Are you sure you're at the latest version of WP-CLI? What does wp --info say?\n. Well, until they update it, it's pretty easy to test the latest version by downloading wp-cli.phar, as described here: http://wp-cli.org/#install\n. Going to merge this as-is and handle bash completions in a separate PR: #212\n. The build is failing because it looks like the 'before_invoke' callback is not fired for wp network meta.\n. Seems like wp menu location assign and wp menu location remove would be more consistent than wp menu assign-location and wp menu remove-location, respectively.\nAlso, what about renaming wp menu theme-locations to wp menu location theme? We could even go for wp menu location list.\n. 1)\n$ wp menu create test\nPHP Notice:  Trying to get property of non-object in /Users/User/git/wp-cli/php/commands/menu.php on line 57\n2) Inconsistent naming: wp menu item remove vs. wp menu delete. (Also see wp widget delete)\n3) wp menu delete and wp menu item remove should support deleting multiple elements.\n4) <db-id> in wp menu item * <db-id> could just be <id>, no?\n. I'd rather have it phone home when doing wp --info.\nRelated: #522\n. > Where would it phone home to?\nWell, it could download http://wp-cli.org/latest-version.json, which would be a static file with content like this:\njson\n{\n  \"stable\": \"0.14.1\"\n}\nThe drawback would be that it would be one more step added to the release checklist.\nAnother option would be to query https://packagist.org/packages/wp-cli/wp-cli (not sure what the JSON endpoint is).\n. Definitely a bug.\nLE: Seems like it was broken even before acbb757838501b39e55e5e9bf936859b6939d08d\n. I'm assuming you want to express that an associative parameter accepts a comma-separated list of values. WP-CLI needs something like this in a few places too, so it's definitely a sensible request.\nHowever, I think a more consistent syntax would be [--allowed_themes=<theme>[,<themeB>...]]\nIn any case, your patch would allow both, so merging.\n. Actually, I think I'll make eval-file behave this way. Seems much more useful than being able to execute multiple files one after another (which can be replicated by using --require multiple times).\nRelated: #1012\n. Related Core ticket: https://core.trac.wordpress.org/ticket/16953\n. Nice catch.\n. Another nice catch.\n. This was just fixed in #1019.\nTry upgrading to the nightly: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods\n. I like the wp theme mod get --all pattern.\n. Great! I've cherry-picked the relevant commits, skipping the two superfluous merge commits at the beginning.\nYou should reset your fork: http://scribu.net/blog/resetting-your-github-fork.html\n. The recommended way of using WP-CLI is by downloading wp-cli.phar which doesn't involve a shell script.\nAnd even if you have a shell script, inspecting it manually and adding set -x still seems like the best way to figure out what's actually going on.\n. Maybe posting an example of the kind of output you'd expect would help clarify what you're looking for.\n. I agree that it would be useful to see things like which wp-cli.yml file is loaded, which wp-config.php file is loaded, etc. You can see these things separately by running wp --info.\nNot sure how complex Drush's bootstrap phase is, but WP-CLI's is pretty deterministic; there's no caching or stuff like that.\nTo see the execution flow step by step, you can use XDebug.\n. Thanks for the patch and particularly for the test case.\n\nIt also looks like that get_home_path() doesn't need $_SERVER['SCRIPT_FILENAME'] at all and it could just use ABSPATH to be more cli friendly, I'll make a note to report it upstream on the trac.\n\nLooking at the source, it already uses ABSPATH, but only when siteurl = home.\n. Ah, so you're saying that we should add a test for the other case as well?\n. > How can I let wp-cli install plugins in wp-content/plugins and not in wordpress/wp-content/plugins.\nIf you have WP_CONTENT_DIR defined properly in wp-config.php, this should already happen.\n\nAnd maybe also to install wp-config.php in root and not in wordpress/\n\nYou mean when using wp core config?\n. Actually, I can't reproduce with the steps outlined in #377 anymore, since the username and password are always overwritten when the command is called.\n. > This could reduce ci/prepare.sh with 2 lines :)\nDo you want to tackle that too?\n. It fails because there's extra output. You could replace STDOUT should be with STDOUT should contain.\n. Couple of things:\n1. We should introduce a WP_CLI::debug() utility, which prints to STDERR, only when --debug is passed.\n2. We should use WP_CLI::debug() in more places:\n   - when figuring out the URL (sometimes it parses wp-config.php using regex)\n   - when setting ABSPATH\n   - when finding the path to wp-config.php\n. This is not the right solution, because it doesn't address the case when wp-cli.phar is executed directly. I.e.:\nchmod +x wp-cli.phar\n./wp-cli.phar post list\nAs I've mentioned previously, wp-cli.phar is the main distribution method, whreas bin/wp and bin/wp.bat are just for convenience.\n. As I've hinted at in #950, the right solution is avoiding $_ENV altogether.\n. > I know that I can pass parameters to the file on the command line in the form of:\n\nwp eval-file myfile.php?param1=1&param2=2&etc\n\nHow? I get a \"file doesn't exist\" error.\n\nHowever, it would look nicer if anything after the filename were just parsed and passed as parameters:\nwp eval-file myfile.php param1=1 param2=2 etc\n\nNot sure about that syntax.\n\nAlso, it should support individual sites in a multisite install\n\nThat's what the --url= parameter is for.\n. > --url= is not documented on the \"wp file-eval\" page. So I didn't know that it worked.\nThat's because it works for all commands: http://wp-cli.org/config/\n. > And I'm not gonna try and dictate syntax... :) I just need the ability to pass parameters to the php file, even if it's just:\nwp file-eval myfile.php --param=\"param1=1&param2=2&etc\"\nActually, this was recently handled in #1014. You just need to update to the nightly: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#wiki-installing-nightly-via-phar\n. The syntax is wp eval-file myfile.php foo bar and myfile.php looks like this:\n<?php\nprint_r( $args );\n. Yes: wp theme activate <theme> --url=site1.domain.dev.\n. Thanks for the attempt, but went with cc48e67.\n. When asking for help for a non-existant command, WP-CLI will try to load WP, to check if the command was defined in a plugin. So, that's expected.\nWhat I'm actually interested in is getting help for built-in commands, such as wp help core, without a WP install. The problem is that the change you made affects all the calls in that scenario. One solution would be to split the scenario in two: one with an empty dir and one with a WP install.\n\nDo you happen to know why two of the travis-ci builds are failing? The error seems to be unrelated with the change I made.\n\nRandom wordpress.org quirks. I've restarted the failing builds.\n. Hello,\nThe significant part in that error message is not the line number of plugin.php (that's just some line in the apply_filters() function from WordPress). The significant part is the name of the callback: bulletproof_security_complete_uninstall\nSo, I suggest you try deactivating the plugin that defined that function.\n. Oh, I think that's the plugin uninstall hook, which gets saved in the database by WordPress. It seems like it wasn't removed when the plugin was removed/updated.\n. You can ignore it for the most part. It would be nice if we could check if there's something we could do in WP-CLI to avoid it, but frankly it's not high on my priority list.\n. The permissions you need to check are for /home/jason/.wp-cli/cache/.\n. I think a file_exists() check would be better, because we'd still want to show warnings in case of a permission error.\n. My suggestion would be to replace the PLUGIN_BASENAME constant with a PLUGIN_FILE constant:\ndefine( 'MY_PLUGIN_FILE', __FILE__ );\nand then pass that to functions like plugins_url() etc.\nIn any case, this doesn't have anything to do with the fact that you used wp scaffold plugin-tests to generate the files. So, I suggest you ask for further assistance on http://wordpress.stackexchange.com/\n. wp db export already accepts all arguments supported by mysqldump: #817\n. What would be useful is a utility for getting all tables of a particular blog: #708\n. Ah, I see.\nWhat about making the run_mysql_command() helper replace = with spaces for all associative parameters?\n. > Wouldn't that hide options like --where that actually need an =?\nArgh... ok, let's go with explicitly handling the --tables= arg then.\n. I get no output, instead. If I remove the -i flag, it works fine.\n. Glad you sorted it out.\nClosing, since I'm afraid there isn't much we can do inside WP-CLI to help with this.\n. I'm not convinced. Like I said, sudo works fine for me (and I don't have to pass --path), so one solution is not obviously better than the other.\n. Besides being required, it also has a lot of duplicated information, so it's a good candidate for generating automatically.\n. You bring up a good point, @westonruter. On the one hand, we already generate a .travis.yml file, which only works on Github. On the other hand, I would prefer to just generate a readme.txt and leave the conversion to proper markdown to other tools.\n. > It would be neat to have a suite of translation tools as a part of WP-CLI including, but not limited to, regenerating POT files.\ni18n-tools is easy enough to use, so I don't think simply bundling it into WP-CLI would bring much value.\n. Already fixed: #997\n. The docs should always point to the latest stable release.\nAdditionally, you could have a /dev/ section on the docs site, with a clear notice on top: \"You are viewing the docs for the development version of WP-CLI, which might change without notice.\"\n. When you use --extra-php, WP-CLI will start reading from STDIN. This is a standard mechanism.\nThe HEREDOC syntax you're trying to use doesn't work because you are missing some newlines.\nMore info: http://stackoverflow.com/questions/6541109/send-string-to-stdin\n. You're developing https://github.com/Gizburdt/Wordpress-Conductor\nYou should get good at \"bash and stuff like that\". Just study the link I gave you, instead of expecting everything on a silver platter.\n. You already have an example, when you run wp help core config.\nThat same example can be seen here: http://wp-cli.org/commands/core/config/\n. YAML has a dedicated syntax for inserting multiple lines:\nyaml\ncore config:\n    dbhost: localhost\n    extra-php: |\n        define( 'WP_DEBUG', true );\n        define( 'WP_POST_REVISIONS', 50 );\n. Anywhere before <<PHP.\n. Do you see any output if you run wp plugin list --debug?\nDoes wp plugin status work? How are the other subcommands behaving?\n. Well, there's not much we can do with the info you've given us so far. This is not a known issue.\nMaybe they have different WordPress versions. Maybe there's some must-use plugin that does some weird thing etc.\n. Glad you were able to isolate the cause. Are you using the latest version of WP-CLI? (run wp --info).\n. Possibly related: #1000\n. Just remembered that I've seen this before: #588\n. Yeah, APC is simply not available on the CLI. Related: #283.\n. Works fine for me.\nMake sure you actually have the latest file. md5 -q wp-cli.phar should give you f08587067bad981fe5b49f6dd1f5c487 (for version 0.14.1 only).\n. Yeah, I forgot to update the binary on the releases page. Need to automate that step via the releases api. Deleted the invalid file in the mean time.\n. > As a test, wp info should be runnable in a directory with WordPress downloaded, but not installed.\nThe correct command is wp cli info and it works fine, even in that scenario.\n. So, if I were to run the Behat tests against WP 3.9-beta1 (without this PR), there would be at least one failed test, right?\nLE: Indeed, there were failures: https://travis-ci.org/wp-cli/wp-cli/jobs/20634618\n. Please add Behat tests that exercise these new calls.\n\nHow do you feel about the pattern of having a validation method hard exit if the validation fails?\n\nWhen it's for private methods, sure, whatever reduces code duplication. When it's for more general utilities, we need to consider it on a case-by-case basis.\n. Duplicate of #646 \n. I like the contrast on the prototype; much easier on the eyes. The header colors seem kind of disconnected from the content, though.\n+1 for converting the twitter and github links into icons.\nIf we don't get a logo, I think the favicon could be a miniature version of the \"wp\" logo used on the Github org. \"./\" isn't really specific to WP-CLI.\n. Also:\n\nI've spoken with @wtaeke of the shop where I work and have arranged that Level Level provide 8 hours of design time done by @aidafusterduran\n\nFantastic!\n. I like the survey idea; the proposed questions seem like they could bring valuable insight.\nWhat I don't like is that this redesign seems to be getting out of hand. The goal, at least in my mind, was to improve the visual style, not to rethink the information architecture or add new features.\n. :thumbsup:\n. Do you mean in the next iteration of the website, have a link to a survey in the next release blog post or what?\n. Ok, @danielbachhuber I'll ping you when I'm ready to publish the release post. Or you could start writing a separate post in a branch of the wp-cli.org repo.\n. Both:\n- in utility, because the field is hardcoded; --field=ID is more flexible\n- in performance, because we concatenate all the IDs into one huge string\n. What about having those extra parameters in sub-config files? You could then load the appropriate one from wp-config.php:\n``` php\n$environment = / detect environment somehow /\nrequire DIR . \"extra-config.{$environment}.php\";\n``\n. Well, I still don't think that defining constants directly inwp-cli.yml` is a good idea. The best we could do is something like this:\nIn wp-cli.dev.yml:\nyaml\nwp core config:\n  extra-php-file: extra-config.dev.php\n. Oh, I guess we could use YAML's multiline support:\nyaml\nwp core config:\n  extra-php: |\n    define( 'WP_DEBUG', true );\n    define( 'WP_POST_REVISIONS', 50 );\n. I was referring to the idea of having a dictionary of constants, which would be less flexible. The raw string syntax I mentioned seems fine.\n. Looks good. Would be nice to add two Behat tests as well: one for skip-plugins: true and one when a list of plugins is specified.\n. That's allot'a tests! Thanks. :)\nI'll de-dup them after merging.\n. +1 for adding a confirmation prompt if --reassign is not passed.\n. Bonuse points if the confirmation message shows how many posts would be deleted.\n. > Can wp-cli also search for wp-config in the directories above root, just like wordpress does?\nIt already does, so there's something else going on in your case. Please describe your folder layout, where you're calling WP-CLI from and what command you're running.\n. When I see wp plugin install --network, I interpred it as \"install this plugin for the whole network\".\nTo avoid confusing \"install\" with \"activate\", I think we should go with --activate-network.\n. Bash completions have recently been overhauled: #212 \nSo, I suggest you:\n1. upgrade to the WP-CLI nightly\n2. install the latest version of wp-completion.bash (don't forget to re-source it)\nand try again.\n. > Could you move $_SERVER[] definition before require(wpconfig)?\nIf you pass the --url global parameter, the $_SERVER keys will be populated well before wp-config.php is loaded.\nIf not, WP-CLI will try to extract the $_SERVER parameters from the DOMAIN_CURRENT_SITE and PATH_CURRENT_SITE constants defined in wp-config.php (without executing it).\nIf you don't have those constants defined, the $_SERVER parameters won't be populated.\nSo, the problem is that WP-CLI doesn't have where to load the $_SERVER parameters from, not that it sets them too late.\nRelated: #730\n. For single-site, I think we should make WP-CLI look for WP_SITEURL and/or WP_HOME constants.\n. Alternatively, you can create a wp-cli.yml file, with a url key, which should work everywhere:\nurl: example.com\n. I would rather paste the code directly in the wiki, instead of linking to a gist that can change without notice.\nBut I think this sort of \"soup to nuts\" script would fit best in a blog post which explains each part. That way people can pick which parts they need.\n. > Why not make other's day shorter?\nBecause it probably won't make their day shorter. Other people will still have to read and understand what your script does, in case they have a slightly different configuration (very likely).\nThat's why simply dumping code without any explanation is not very useful.\n. So, if you want to answer questions from users about your script, you're free to post it on your own blog. We have enough support questions as it is. :P\n. > For me this code is self explanatory without comments.\nThat's because you know Bash scripting. A lot of WP-CLI users are just getting started with the command line.\n. The reassigning part can already be controlled via the --reasign parameter. Introducing a --network flag should be enough for controlling the ~~network/site~~ remove/delete aspect.\n. wp user delete --network bob --reasign=sally is the most challenging: what happens if Bob has posts on some blog that Sally doesn't have a role on?\nIn any case, in the absence of the --network flag, I think the current behavior is correct, so I'm removing the bug label from this issue.\n. For multisite, you write your own command that handles the edge cases. Or a bash script:\nbash\nfor url in $(wp site list --field=url)\ndo\n  wp --url=$url user delete 123 --reassign=sally\ndone\nwp eval 'wpmu_delete_user( 123 );'\nDrawbacks:\n- loops through all blogs, instead of using get_blogs_of_user()\n- wpmu_delete_user() doesn't accept a user login, like wp user delete does\n. > Permanently deleting a user [in a multisite install] isn't an edge case though\nOTOH, it's not something you do often. Also, I think having a user - with no capabilities on any blog - left in the DB is less troublesome than silently having the posts of that user dissapear.\nDo you want to continue debating if this is a bug or a feature request?\n. > I do it all of the time. \nIn production? Or on development instances?\n. Going to handle \"Delete from network, and delete all posts.\" in #1119.\nLeaving \"Delete from network, and reassign posts.\" for another release.\n. I assume they're markers used by WP when replacing stuff in wp-config-sample.php. We don't need them, since we generate wp-config.php from a Mustache template.\n. @szepeviktor Instead of pasting the modified version of wp-config.mustache here, you should just press the \"Edit\" button on this page and submit a pull request.\n. The idea is that adding a flag just for this would be overkill. We can just remove the block comments from the template.\n. Previously: #1073\n. Please paste the full log.\n. What happens if you run the normal browser-based install?\n. It looks like wp-admin/install.php would display the same DB error messsages and also report success.\nI guess one way to address this would be to throw an error if $wpdb logs any errors durring the call to wp_install().\n. Why is this not a problem for normal WordPress usage (still with a persistent cache)?\n. Why would you set up a persistent cache for an ephemeral instance? :P\n. > trying to perform activate/deactivate in interface on the plugin doesn't work properly anymore and requires flushing cache.\nShouldn't this be fixed in Core first? Is there a ticket?\n. Or you mean it works fine via wp-admin, until after you run wp plugin deactivate?\n. I see. This seems like a duplicate of #283, which means that any WP-CLI command that alters the database will cause the cache to get out of sync.\n. It would be good if you could re-use the Process class somehow.\n. Or at least return a ProcessRun instance, instead of an arbitrary array.\n. Since you're there, maybe it would be a good opportunity to fix an inconsistency: the ProcessRun->STDOUT and Process->STDERR properties should be converted to lowercase, since they're not constants anymore.\n. > It breaks most of the steps (and maybe other things I didn't discover). Still worth doing?\nSeems pretty easy to resolve using a s/->STDERR/->stderr/ operation.\nBackwards compat seems unnecessary, since it was only used for the functional tests.\n. So, do we still need the wp user import-csv subcommand bundled?\n. > what goes into WP-CLI vs. living outside of core. The latter is a second-class citizen right now because we have no distribution mechanism.\nSince you brought it up, I want to make a point: Bundled commands will always have a visibility advantage. Even if we had a wp package command, a bundled command would still be more visible, because it would show up when you do wp etc.\nBut in terms of functionality, bundled commands get no special treatment, i.e. anything you can do from a bundled command you can do just as well from a package.\n. Yes, WP-CLI is used at Automattic. They have even contributed patches. Here is their fork: https://github.com/Automattic/wp-cli\n. Could you give an example of a plugin that belongs (not merely can exist) in the mu-plugins directory, which would also benefit from unit tests?\n. Please paste the output from running php wp-cli.phar --info. If even that doesn't work, run php --version.\n. > PHP 5.4.25 (cgi-fcgi)\nHere's your problem: you're not using a true php-cli binary, but a CGI one.\n. The solution is to install php-cli. How you do that depends on what operation system you have on your machine.\n. Well, one way would be to create an alias in your ~/.bash_profile:\nbash\nalias wp='/usr/bin/php-cli /FULL/PATH/TO/wp-cli.phar'\nAfter you've added it and ran source ~/.bash_profile, when you run wp --info, it should show the path to php-cli.\n. This doesn't seem like something WP-CLI can help with. You should ask your hosting provider if they have some sort of restrictions.\n. No, it will be in the next major release.\n. Yes, we should prompt for each file. I guess --yes would be more consistent, since when we use --force, we exit with an error code, instead of asking for confirmation.\n. Yes, I removed the zips from https://github.com/wp-cli/wp-cli/releases because they were invalid. See https://github.com/wp-cli/wp-cli/issues/1048#issuecomment-38643157\n\nI see there is a builds repository that now contains standard and nightly Phar releases with updated instructions on wp-cli.org to match.\n\nActually, https://github.com/wp-cli/builds was there before Github even had a /releases feature for repos.\n\nIs there a recommended method for attaching to a stable version of wp-cli beyond the zip file?\n\nYeah, I added the builds back to https://github.com/wp-cli/wp-cli/releases\n. No problem.\nTo clarify:\nIf you always want the latest release, use https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nIf you want a particular release, use one of the downloads at https://github.com/wp-cli/wp-cli/releases\n. wp plugin list will trigger a check for updates.\n. You should re-download WP-CLI. See #1048.\n. WP-CLI does not mess with the FS_METHOD constant.\nDid you check that you don't actually have FS_METHOD defined twice in your wp-config.php file? (or maybe in a file that's loaded from wp-config.php or in a plugin inside the mu-plugins dir).\n. It doesn't find any matches because it first unserializes the values in the DB. If you don't need that, you're better off doing a direct UPDATE query using wp db query.\n. The wp package command has not landed yet (i.e. it's not in the master branch). You should leave feedback on the pull request: #936 \n. Anything else you want to do here? Want to merge before it gets stale.\n. I'm not opposed to it, in principle.\nWhat I'm worried about is that it would require either a) some very ugly hacks to trick WordPress Core or b) duplicating too much code from WordPress Core. Either way, I'm not sure, since I haven't tried doing this.\nAn alternative to spinning up a Vagrant instance might be to use something like http://wordpress.org/plugins/sqlite-integration/\n. Bottom line: give it a shot. If it's not too insane, it will likely get merged.\n. Thinking more about this, I think we can indeed make this fairly simple, since we can assume that the command is not being run on a live site.\nSo, for instance, we can skip the \"Entering maintenance mode\" step.\n. Actually, you can already do that with wp core download --force.\n. Ah. For that we have #916.\n. Yes, the intermediate upgrade messages come from WP Core, whereas the final message comes from WP-CLI.\n. It's not a high priority, to be honest; if there's a simple way to disable translations, to have a more consistent experience, we can do that. If not, c'est la vie.\n. By the \"old installer\", you presumably mean the utils/dev-build script, which was not exactly portable: #995.\n\nIf it's in the .phar file, it can be extracted from there with a single command\n\nOnly if we write a separate subcommand just for extracting it. No, the phar file should contain strictly the code needed for executing the bundled commands. It shouldn't be bloated with bash completions or test harness files.\nBesides, the wp-completion.bash file doesn't change that often, especially after the latest rewrite: #212.\n. Thanks.\n. Yes, tables are converted to tab-delimited output when the command is piped to something else: https://github.com/jlogsdon/php-cli-tools/pull/11\nThis was modeled after the mysql CLI interface. However, we didn't implement an equivalent to the --table flag, which forces ASCII output. Pull requests welcome.\n. Actually, I think adding the isPiped() check to \\cli\\Table() in the first place was a bad idea. That class should only care about outputting an ASCII table. The choice between a table and tab-delimited output should be made at a higher level, by the user of the library, i.e. WP-CLI.\n. -1 on adding a flag for this.\nHow about instead of statically checking if wp-config.php contains the MULTISITE lines, we actually run the code? We already use this technique for the wp db commands.\nThen, we could just do:\nif ( !defined( 'MULTISITE' )  ) {\n  // add extra lines\n}\n. WP-CLI can't really be used as a library because WordPress itself can't (easily) be used as a library. Once you load the initial file (php/wp-cli.php), it will start parsing the arguments, load WordPress and then execute the specified command.\nSo, your options are:\n1) create a custom WP-CLI command, as @jmslbam mentioned or\n2) use shell_exec() \u2014 or proc_open() for more control\n. Note that there already are several \"UI\"s for WP-CLI: one is a Netbeans plugin and another is PHPStorm's integration, so embedding it is definitely possible.\n. > Great for projects that already use the Yaml Symfony Component.\nWP-CLI is a standalone utility, so I don't get how/which projects this change would benefit. Please explain.\n. This should be doable with something like this:\nGiven a multisite install with url sub.example.com\n. You're using the newer version of the wp-completions.bash file with an older version of WP-CLI. Fixed the link on wp-cli.org.\nTry updating to the nightly (0.15-alpha).\n. While we appreciate you reporting issues, it would help if you would provide more information upfront, instead of waiting for us to ask you.\nFor example, I have no idea why you would want a --no-autoload option. What's the usecase?\n. Ah, I see. Yeah, adding a --autoload=no option makes sense (it would default to 'yes').\n. It's fine. You can make up for it by opening a pull request. :)\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/option.php#L64\n. We can skip tests in this case, since the code is pretty straightforward.\n. That's a problem with the package. I opened https://github.com/pixline/wp-cli-theme-test-command/pull/17\n. Yes, you can add another entry to the \"repositories\" section in your composer.json, like you did with the WP-CLI package index.\nOr you could just clone the repo directly: https://github.com/wp-cli/wp-cli/wiki/Community-Packages#installing-a-package-without-composer\n. > Seems to just install the english version.\nThis is now fixed in the nightly build.\n\nPHP Warning: copy(/tmp/wp-cli-cacert.pem): failed to open stream\n\nIt seems like your /tmp/ directory has incorrect permissions. See #1118\n. Some parameters, like --display_name use underscores to match the corresponding parameter in wp_insert_user().\nI guess it would be easier to standardize on underscores at this point.\n. By the way, I think positional parameters, like <user-login> are fine using dashes (they don't affect the command code anyway).\n. Afraid not, probably because I don't think it's actually needed, since bash already has its own syntax for variable interpolation:\nbash\nWP_PREFIX=$(wp eval 'echo $GLOBALS[\"table_prefix\"];')\nwp db query \"UPDATE ${WP_PREFIX}users SET ID=55 WHERE ID=1; UPDATE ${WP_PREFIX}usermeta SET user_id=55 WHERE user_id=1\"\n. What does wp --info say?\n. Looks like I copied the phar before the cron job updated the nightly. Fixing.\n. In bash, it doesn't seem to work so well.\nTest case: wp core [tab] (note there's a space before the tab)\nOutput before PR:\n$ wp core config\nOutput after PR:\n$ wp core config\ndownload\ninstall\nis-installed\nmultisite-convert\nmultisite-install\nupdate\nupdate-db\nversion\nMaybe it's time we create a wp-completion.zsh file.\n. Or maybe it's a bug in the current handling: when there are multiple options, it should show all of them, instead of immediately completing with the first one.\nI'm not sure; just laying out the possible courses of action.\n. > Afaik, this is how autocompletion typically works.\nYes, this is how it should work, but it currently doesn't, in bash.\n. It looks like Travis CI supports testing against HHVM: http://docs.travis-ci.com/user/languages/php/#Choosing-PHP-versions-to-test-against\n. I think this is critical. If we can't get I/O working, then there's no point fixing the other HHVM issues.\n. In Bash, ! is a special character. There are several ways to treat it as a normal one:\n- add a backslash before it:  --text=\"... our company\\!\"\n- use single quotes instead of double quotes: --text='... our company!'\n. Related: #1134\n. Related: #907\n. I didn't know about the checksum API when I made that comment. Now that I'm aware of its existence, I would agree that this would make sense as a built-in command.\n. I'm actually a noob when it comes to packaging (particularly RPM), so I can't make any comments about the script itself.\nI suppose we could create packages and stick them in https://github.com/wp-cli/builds/ but the demand seems low.\n. Related: #192\n. I've tried to keep all packaging scripts (besides the Phar build) outside of the main repo since it seems like each OS has it's own way of doing it.\nIf you want to collect the various scripts in one place, you could maybe put them in the wp-cli/builds repo (in the master branch, keeping gh-pages for the build results).\n. I think \"just give me a success message\" is a rather arbitrary verbosity level. Here's my 2 cents:\nA) Only care about whether it succeded or not\nSuppress STDERR and/or STDOUT via redirection or use the --quiet flag that @danielbachhuber mentioned. Use $? to check the exit code.\nB) Only care about how many posts have been imported\nHave a --format=json switch that returns a JSON dict with various statistics.\nEdit: perhaps --output-format= or --porcelain would be less ambiguous as to whether it's about input or output.\nC) Regular interactive use\nExample output:\n```\nImporting from file 1/43 import.001.xml...\nshow progress bar (already implemented in php-cli-tools)\nImporting from file 2/43 import.002.xml\nshow progress bar (already implemented in php-cli-tools)\n...\nSuccess: all files imported\n```\nD) Verbose interactive use\nHave a --verbose flag which outputs info about each post being imported (current behavior).\n. I can't give any implementation advice, but I left some general thoughts here: https://github.com/wp-cli/wp-cli/issues/1159#issuecomment-65450020\n. --path represents the path to the WP core files. The path to the YAML file is controlled via the WP_CLI_CONFIG_PATH environment variable: \nWP_CLI_CONFIG_PATH=/path/to/wp-cli.yml wp --alow-root ...\n. Yeah, \"WordPress install dir\" is ambiguous. Updated.\n. The most likely cause is a regression in PHP itself; I have no experience debugging those.\nThe only other thing I know that can cause a segfault is an excessively huge string, but that's very unlikely in this case, since the tests pass in other versions of PHP.\n. > I've also tried to move it around and add it to my $PATH\nInstead of trying to alter the PATH environment variable, just try to move the phar file into one of the directories already mentioned in the PATH var. You can use echo $PATH to see what those directories are.\n. That's why I initially suggested creating a separate completion file just for ZSH.\n. In case it's still not obvious, what works for ZSH doesn't work for Bash in this case.\n. > Seems like a lot of redundancy to have two separate files.\nI wouldn't say a lot of redundancy. The completion file is just 16 lines of code and most projects seem to have two separate files.\nBesides, if you create a separate file, you can use the recommended ZSH builtin, instead of making everyone use:\nautoload bashcompinit\nbashcompinit\nAnyway, it's up to you; I just wanted to highlight that there still is a problem for Bash users.\n. > If I type wp c^ it just autocompletes to the first instead of giving me a list of all possible options. \nYes, that's the behavior I saw before the regression as well. So yeah, the behavior wasn't 100% correct to begin with, then it was made worse.\n. To be clear, the correct behavior is auto-completing with the first option only if it's the only one.\nIt works fine now. Thanks.\n. Why not create additional wp media subcommands?\n. Wouldn't it be better to use --field=id in examples? (I tried to deprecate --format=ids a while back, since it's before we had generic support for --field=)\n. > We're currently using a forked version, but I'm not 100% sure of the history as to why.\nMostly because there wasn't a stable release that contained the patches that we sent upstream.\n. Or you could do this in a generic way, for all commands.\n. Actually, there already is a global --quiet parameter which could be checked inside Search_Replace_Command.\n. Right, we'd need to alter the value in the global Configurator instance, so that WP_CLI::get_config('quiet') returned true.\n. cc: @tiagohillebrandt\n. @hawkeye126 I see you made a commit that references this issue. You should also open a pull request from your fork, for easier review and integration.\n. Psysh is not bundled in wp-cli.phar, but you should be able to include it, like so:\nsh\nwget psysh.org/psysh -O psysh.phar\nphp wp-cli.phar --require=psysh.phar shell\n. > Could it be used in a real situation like a AJAX request, file upload or a POST request?\nIf you're serving requests via wp server, possibly.\n. Ah, you're asking a different question than I thought. wp shell and wp server are currently two separate commands.\nTo get what you want you would need to invoke Psysh from inside router.php.\n. Done: https://github.com/wp-cli/wp-cli/wiki/Example-Usage/_compare/566400920bc8731f971ac8ba93dc8bf77a63bf1f...9e025010faff0cba481d4f7eed37f10a7f5dcc20\n. > The code generates a wp-config.php file without error but it doesn't honour the closing heredoc token so the generated wp-config.php contains the rest of my gruntscript\nThat's because the closing HEREDOC needs to be on its own line.\nActually, you don't need to use a heredoc at all. Just pass it as a normal string:\nbash\nwp core config --dbname=test --dbuser=root --dbpass=root --dbhost=localhost --extra-php=\"define('WP_DEBUG',true);\\n\"\n. > I don't know the best solution, one could be to array_unique the required PHP file paths before loading them in Runner. And / or get_project_config_path() could inspect the file paths to see if they match the global config path exactly.\nBoth of these suggestions would require that paths be \"rezolved\" (i.e. normalized), because otherwise you could end up still requiring the same file twice, but with slightly different paths.\n~~I wonder if switching from require to require_once in Utils\\load_file() would be more robust.~~ (Nevermind; was confusing loading YAML files with the --require flag)\n. > a PHP notice occurs.\nIt would be helpful if you posted the exact notice that you get (along with the line number), so that everyone is on the same page.\n. ABSPATH will get you the root of the WP directory. I don't think the root of the project directory (which is different only when WP is in a subdir) is readily accessible currently.\n. To separate the commits into distinct branches, you'll want to use the git cherry-pick command.\n. Seems fine from an architecture standpoint.\nOnly thing is that you'd probably want to add an extra underscore:\nget_arg_desc()\nget_param_desc()\nThey're semantically different from get_shortdesc() and get_longdesc(); shortdesc and longdesc are each a single thing and could probably be given better names, such as summary and details, respectively.\n. > How can we install the particular version of wp-cli?\nYou go to the releases page: https://github.com/wp-cli/wp-cli/releases\n. Personally, I'd get rid of the old installer.sh script, but that's up for @danielbachhuber to decide.\n. In case the terminology is not clear, a community command is just a regular WP_CLI_Command subclass,  except it's distributed as a WP plugin or as a Composer package. Examples: https://github.com/wp-cli/wp-cli/wiki/List-of-community-commands\n. What about run_mysql_command() and WP_CLI::launch(), which also make use of proc_open()?\n. Right. The idea is that there's not much point fixing the help system if half of the commands won't actually work after you've learned what parameters they accept.\n. > I also don't really follow the logic of disabling shell_exec and proc_open, but allowing shell access.\nYeah, it seems to me like it would be better to have two different php.ini files: one for the web server, with proc_open disabled, and one for CLI access.\n. So you're basically copying over the testing harness into each command. Then each command author can adapt the Behat steps as needed. Cool.\nOther than that, I'm not sure what other constraints there are. I'd need to see the docs that explain how you use the generated test harness after running wp scaffold package-tests.\n. Ah, I didn't see templates/.travis.package.yml the first time.\nThat covers continuous integration, but not how to go about running tests locally. You still need a walkthrough for people that aren't familiar with Travis CI config files.\n. Example: https://github.com/wp-cli/wp-cli/wiki/Plugin-Unit-Tests\n. I updated the Codex; adding stuff below require_once(ABSPATH . 'wp-settings.php'); was a terrible suggestion to begin with.\n. What if some day you want to integrate some of the other, non-xml, importers?\n. Hm... yeah, I guess you could specify which types of file go with each importer.\n. Apparently so. I'll look into it.\n. Build passes now.\n. Well, you could just drop support for WP 3.5 and WP 3.6.\n. If these proposed commands don't have any extra requirements beyond the Core version (i.e. they're not special, like wp core config is, for example), I'd just bundle them and add the version check that @nacin mentioned.\n. Well, you could add a \"4.0-only\" tag to those tests and alter https://github.com/wp-cli/wp-cli/blob/master/ci/test.sh so that it skips tests with that tag, depending on the WP_VERSION environment variable.\n. Why exactly is the before_wp_load hook relevant here? It seems like commands that run before WP is loaded shouldn't care about the URL (unless they explicitly accept it as a parameter, of course).\nIf this change allows us to get rid of those ugly PHP-parsing regexes, without making things worse on multisite, I think it's worth pursuing.\n. That URL guessing code was first introduced in 6c59680634c69b2bce471f70a0e6abf921b19fa4 (#42). Back then we were loading the whole wp-config.php, which prevented us from accessing the multisite constants before the rest of WP got loaded, like you do here.\nBottom line: this might actually work.\n. > search-replace requires the mb_strlen() function that was introduced in PHP 5.4\nThe docs say it's been available since PHP 4.0.6: http://php.net/mb_strlen\n. How are these different from wp plugin toggle?\n. > To retrigger that single thing but that means the plugins activation state should be the exact same as what you're trying to test.\nOk, but there are 3 hooks: activation, deactivation and uninstall. Your commands only account for the first two, whereas it's the uninstall hook that should be responsible for deleting all state.\n. > Well the uninstall could easily be achieved- just uninstall and install/uninstall.\nNo, what I meant was that doing plugin deactivate and then plugin activate doesn't cause the activation hook to run in a clean environment. For that, you'd have to do uninstall --no-delete instead of deactivation.\n. > Why would'nt a deactivation and a activation not trigger til activation hook? Seems to work here...\nDid I say that it wouldn't trigger the activation hook? No, I said the hook would be triggered, but the environment (that is, the database) won't be pristine, as it is when activating the plugin for the first time.\n. The point of that file isn't to have valid email addresses; it's to have a mapping from commit authors to github usernames.\n. Seems like a good idea. The correct flag name would be --verbose.\n. I think a good place to look for inspiration would be package managers, like apt-get, which also support installing multiple packages in one go and have to report failed installs somehow.\n. Note that the most reliable way to check the results is by running wp plugin list afterwards to see what actually got installed.\n. Actually, the correct repo for submitting a pull request to would be https://github.com/automattic/jetpack\n. Jetpack should use actual sub-subcommands, i.e. have a separate Jetpack_Module_Command class that gets registered as WP_CLI::add_command( 'jetpack module', 'Jetpack_Module_Command' ).\n. Basically, you'd have to not merge the require lists. Instead, keep a separate data structure that preserves the mapping. For instance:\narray(\n  '/home/scribu/.wp-cli/config.yml' => ['foo.php', 'bar.php'],\n  ...\n  'runtime' => ['baz.php'],\n)\n. > @scribu Feeling pretty stuck on this. Any good ideas?\nWhat did you try and didn't work?\n. > I've spent a lot of time thinking about priming the download cache, either for each test or on a proxy server. But I don't want to create a gap in test coverage for installing.\nIf the main unrelated reason for test failure is flaky network communication to wordpress.org, then mocking that is the only way to address it that I see.\nIn Ruby there's a neat gem called VCR which records HTTP interactions and then replays them when the test suite is run. I'm not sure if there's a PHP equivalent.\n. While implementing the current eval()-based hack, I remember looking at SHORTINIT and concluding that it wasn't short enough, but maybe I was wrong.\nIn any case, I'm sure @danielbachhuber would love to merge a pull request that gets rid of eval().\n. The question is: what do you want to do with that help text?\nAll the bits of information that are used in generating the help text can be retrieved using wp cli cmd-dump.\n. I just checked: paging is already disabled if the command is piped to something else - compare wp help with wp help | cat.\nIsn't that enough?\n. @danielbachhuber The behavior that makes the most sense to me is the current one, described in my previous comment: plain text when it's being piped to some other command (I'm assuming that that mechanism also kicks in when WP-CLI is being called by some other process, but I'm not sure).\n. See https://github.com/wp-cli/wp-cli/issues/1519#issuecomment-64908919\n. > with eAccelerator v0.9.6.1, Copyright (c) 2004-2010 eAccelerator, by eAccelerator\nMaybe check if it works as expected without eAccelerator.\n. > It was introduced in 33fb1c6, although I'm not sure why.\nI don't remember why I didn't use WP_CLI::error().\nAnyway, in the current codebase, I think CommandWithMeta::check_object_id() should be abstract, instead of defaulting to no error checking.\n. > So I meant: It should be documented: Return exit code 1 upon empty meta data.\nThat's not quite right. The idea was to use exit code 1 when trying to get a custom field that didn't exist. However, WP doesn't seem to have a reliable API for checking that; null is equal to false or empty.\n. > I thought about that, but user meta supports login, email address, or ID.\nIf it's really expensive to have error checking for that case, you should move the non-error checking implementation of check_object_id() to the UserMeta command.\n\nIs there a difference in output between empty value and non-existent custom field?\n\nNo; that's the problem. Although I suspect you could use the $default parameter somehow to check.\n. Besides assuming that everyone uses git, 3) also assumes that everyone uses git in the same way:\na) plugin files are checked into git directly\nThere are two other approaches that I'm aware of:\nb) plugin files are checked in as git submodules (related: #639)\nc) plugin files are checked in as Composer packages\nSince I don't think it's at all obvious that a) is the best way of doing it, I don't think blessing it in WP-CLI core commands is a good idea.\n. Just for the record, the only reason I didn't include wp server into WP-CLI was that it required PHP 5.4.\nI think it would be great if more WP devs were aware that they have a simpler option for local development than installing Nginx and/or Vagrant.\n. Makes sense if the install procedure in WP doesn't check the versions in the installed plugin cache for some weird reason.\n. It looks like it's some sort of misconfiguration on my machine. WP tries to connect to MySQL through a Unix socket and fails.\nThe quick fix for me was to change wp-config.php, from define('DB_HOST', 'localhost'); to define('DB_HOST', '127.0.0.1');\nMore details here: http://stackoverflow.com/a/13771199/97998\n. > I think we could call this --skip-theme because only one theme can be loaded at any given time.\nTechnically, if it's a child theme, there are two: the child and the parent.\n. NB: I'm not implying that being able to only skip the child or only skip the parent is actually useful.\n. @rmccue shared a great solution:\nInstead of hacking the contents of the wp-config.php file and then calling eval() on it, just define ABSPATH to point to an empty wp-settings.php file:\nhttps://github.com/humanmade/Cavalcade-Runner/blob/26054b4a302f2e59972115a5c24916d24873601f/lib/Runner.php#L28-L52\n. Ah... I think WP-CLI already uses the fake ABSPATH trick when it doesn't need to load the rest of WP.\n\nfork/exec off an instance just to load the config, have it output as JSON, then use that in your main process.\n\nYeah, I guess you could detect (in a generic way) all the constants and globals that wp-config sets and send them via JSON.\n. Do you have some stats that show the execution time before and after applying the patch?\n. Also consider changing all your secret keys, now that you've made them public.\n. Secret keys should be replaced, not removed. That's what I said.\n. Less pretty, but more explicit and no extra plugin required:\nWP_CLI_CONFIG_PATH=wp-cli.development.yml wp db export\n. You could even implement the desired syntax in a bash script:\n``` bash\n!/usr/bin/env bash\nENVIRONMENT=$1\nshift\nWP_CLI_CONFIG_PATH=\"wp-cli.$ENVIRONMENT.yml\" wp $@\n```\n./script development db export\n(not tested)\n. I don't get it - aren't there two separate WP installs - one for production (on a remote server) and one for development (local) - each with its own wp-config.php file?\n. One potential solution is to include some conditional logic inside wp-config.php:\n``` php\nif (is_readable('wp-config.local.php')) {\n  require('wp-config.local.php');\n} else {\n  // define production values\n}\n// Need to keep this here, for WP-CLI to work\nrequire_once(ABSPATH . 'wp-settings.php');\n```\ninstead of is_readable(), you could read an environment variable etc.\n. +1 for --. I use it all the time with git.\n. > Nope. If the command exits in any way, there's no way we can capture that action.\nWhat about register_shutdown_callback()?\n. Just wanted to note that there was a wp db str subcommand at some point (#946), that was meant to be used when one needed to pass extra parameters to mysql (or to mysqldump).\n. Actually, an even older subcommand was wp db connect-str (mentioned in #235).\nAlso note that wp db export already allows passing all arguments to mysqldump (#817).\n. Good question. wp site list is already mostly that.\nThe url subcommands could be merged pretty cleanly into the list subcommands. That would mean that each list subcommand should accept a variable number of positional args.\n. Ah... the test fails because the router.php file is embedded inside the Phar file. Will need to make a temporary copy to /tmp/ so that php -S can read it.\n. @danielbachhuber ready for review\n. It is however included in the nightly build.\n. One possible solution is to consider --url global if it comes before any positional argument. i.e.:\n- wp --url=somesite site list works as it does now\n-  wp --url=somesite site list --url=differentsite works correctly\n- wp comment generate --url=somesite gives \"unknown parameter for comment generate command: --url\"\n. > There is no url field in the database. It is an output-only field made up of domain and path.\nThat's just an implementation detail. No reason the command couldn't work around it.\n. Actually, I think the correct fix would be to remove the @synopsis tag altogether.\nMaybe even add a deprecation notice when a @synopsis tag is detected in a command docblock.\n. Thanks. :cake:\n\nAs far as the deprecation warning goes, I think that may be out of the scope of my pull request and understanding of the project :)\n\nIndeed; it was more a suggestion to @danielbachhuber.\n. Previously: #1411\n. > When using wp help, the actual command help usually scrolls out of view\nThat shouldn't happen, because we're using less to paginate the output.\n. @rmccue That's a great solution! No eval() or regex in sight.\n. You can upgrade from any older version using wp core download --force.\n. > I may not have used --force, but why would that be needed?\nWithout --force, it refuses to download, because it detects that files are already present.\n. You could add a Python-style requirements file:\nwp plugin install --requirements=plugins.txt\nwhere plugins.txt looks like this:\nactive-directory-integration==1.1.7\naddthis==5.0.8\n. I say \"you could\", but I don't know if it's actually possible to install multiple plugins within a single process.   I'm gusessing \"yes\", since I do remember seeing a plugin that did bulk installs like this.\n. I've heard that businesses find it easier, from a legal perspective, to buy a service than to make a donation. Not sure how true it is.\n. Git uses a syntax without a colon between port and path:\nssh://[user@]host.xz[:port]/path/to/repo.git/\nhttps://git-scm.com/docs/git-clone\n. Since it's a standard URL format, it should be parseable with PHP's parse_url().\n. The $pipes variable doesn't seem to be defined.\n. It would be useful to have a protected method that returns the SQL connect string, so we don't have to keep repeating it in every sub-command.\n. .*.swp is something that should reside in your global .gitignore file and not in wp-cli. Please remove it.\n. The last two lines would mean that build-local would have to be sourced each time you open a shell.\n. Right, should remove nbproject too.\n. Why would you need root access to modify your own .bashrc file?\n. Ok, makes sense.\n. Shouldn't you pass $assoc_args['file'] to the upgrader?\n. Or, we could be clever about it: if ( $args[0] ends with '.zip' ) it's a file.\n. This will produce a notice. Should use isset().\n. I think downgrades should be allowed only when --force is passed.\n. Nevermind, that's already the case. I read the version_compare() parameters backwards.\n. Why are there two checks for Memcache PECL?\nAlso, shouldn't those ifs be elseifs?\n. I mean like this:\nif ( test for memcache ) {\n    ...\n} elseif ( test for APC ) {\n    ...\n} ...\n. The --verbose parameter doesn't seem very useful currently. It just tells you what command you just ran, which you already know.\nYou can already make bash print each command it runs in a script, by using the set builtin: set -x.\n. How would $maybe_posts ever get converted into a WP_Error instance?\n. Why do we need --post_id? There's already $args[0] and WP_Query already has a 'p' parameter.\n. I think printing a message for every single post is too verbose, especially since $action is loop-invariant.\nCould print a single message: Deleted X posts.\n. Wondering if we should strip the 'post_' prefix from parameters. It's currently inconsistent between commands:\nwp post create --post_type=foo --post_status=draft\nvs.\nwp generate posts --type=foo --status=draft\n. Yeah; I think I'll switch wp generate posts over in the future.\n. That's a fair point. Don't really need the count then, since you can just pipe it to wc -l.\n. But $action is still loop-invariant and therefore should be computed only once, before the loop.\nIdeally, though, you'd check if it was actually deleted or just trashed. If it involves doing an additional query per post, then forget it. :)\n. Should use current_time( 'mysql' ) or just false.\n. Even if it's a global parameter, I think it's important to mention '--blog' here.\n. Yes, except --blog is optional (defaults to the main blog).\nAlso, what happens if the user already has a role on the given blog?\nMaybe rename add_to_blog to set_role and remove_from_blog to delete_role.\n. Please replace @param tags with @synopsis tag: https://github.com/wp-cli/wp-cli/wiki/Creating-Commands\nSee other internal commands for examples.\n. Also, Subcommand posttype should become @subcommand post-type.\n. The static help() method is not supported anymore. Please create .txt files in src/docs/ for each subcommand.\n. This needs the @synopsis treatment too, but I think you can just use @synopsis <taxonomy> --<field>=<value> and then just point to register_taxonomy() in the man page.\n. This check will not be necessary once you add the @synopsis tag above.\n. I don't think putting taxonomies and post types inside the theme is good practice. What if I'm writing a plugin?\nThe most flexible way would be to output directly to STDOUT. Examples:\nCreate a new file, wherever you want:\nwp scaffold taxonomy foobar > wp-content/plugins/my-plugin/new-taxonomy.php\nAppend several post types to an existing file:\nwp scaffold post-type movie >> wp-content/plugins/my-plugin/post-types.php\nwp scaffold post-type actor >> wp-content/plugins/my-plugin/post-types.php\n. The correct name is 'textdomain', not 'context'. Same for taxonomy subcommand.\n. > Maybe we could parse to the stdout but keep a flag for the theme? --theme to keep the current way working just as well.\nThat's fine.\n\nAlso we use the theme as the textdomain right now but what should we provide as a default value if none is set?\n\nMaybe the default textdomain could be 'YOUR-TEXTDOMAIN'.\n. I don't think the !post_type_exists() check is beneficial. Developers should just be careful not to define the same post type twice in their code.\nIdem for taxonomies.\n. And, even if the same register_post_type() call runs twice for some weird reason, it's not a big deal.\n. I don't think these 'pre_get_posts' hooks belong here. There are a million ways to hook into WP_Query and another million ways to organize those hooks.\nFor example, I store all the hooks related to a post type in a class.\n. I think these messages are useful to have in the scaffold, but I'm not sure about the lp_ prefix.\n. Maybe just remove it and leave it as {$machine_name}_updated_messages.\n. What I'm suggesting is that you might want those hooks there in 90% of the cases, but that's specific to your workflow.\nwp scaffold post-type should be concerned just with registering the post type, not with whatever custom functionality you might want to add on top.\n. That seems like the best approach. Ideally, the scaffold templates would be composable.\n. Shouldn't that be > 1?\n. This has nothing to do with the proposed fix, so it shouldn't be in here.\n. wp-config.php can also be placed one directory higher than WP_ROOT.\n. Here is the exact code that WP uses: https://github.com/WordPress/WordPress/blob/3.5/wp-load.php#L26-36\n. Why would wp-admin/includes/plugin.php not exist?\nIt contains essential functions, such as add_submenu_page().\n. What's the point in converting the user to a stdClass?\n. Oh, I see you only pick certain fields. Nevermind.\n. Instead of calling unzip yourself, you could just do:\nWP_CLI::run_command( array( 'theme', 'install', $zip_path ), array( 'activate' => true ) );\n. $build_row doesn't seem to be used in the final output.\n. Should mention the default format.\n. Now I remember why I suggested using fputcsv(): It correctly escapes a value like Cristi \"scribu\" Burca.\nYou could use STDOUT as the $handle.\n. I think we can abstract this whole switch, now that we also have it in wp user list.\nPlease rebase the term-command branch off of master and move the handling of the 'format' parameter into a utility function.\n. How about:\noutput_list( $format, $items, $fields = array() );\n. > Do you remember if there was a particular reason for the limited set of fields for each user originally?\nI assume it was so that the table didn't get too wide.\n\nWhy would you make $fields optional? How would the behavior change?\n\nYou're right, that doesn't make sense.\n. Oh, I remembered we have a CommandWithDBObject class. We could make this a protected method of that and make Term_Command extend from it.\n. Ok, that makes sense.\n. Hah, \"create Apple category\" spells just like English. :+1:\n. Should be wp_tempnam( $url );\n. http://make.wordpress.org/core/handbook/coding-standards/#space-usage\n. Missing a tab.\n. It seems like the $request variable isn't used anywhere.\n. 'post_content' should not be an associative arg. At most, wp post create should accept post content from STDIN.\n. Should use WP_CLI::launch() or at least proc_open(), instead of those kooky redirects.\n. Either use WP's wp_tempnam() or use php://temp.\nExample: https://github.com/wp-cli/wp-cli/commit/a464817eb27c9c44aa20b92a56f0fb0235187edf#L1R41\n. > But wp post create can accept --post_content as an associative argument.\nOh, you're right. I forgot about that, since it wasn't mentioned explicitly in the synopsis. Nevermind.\n\nShould we throw a warning of some kind if user tries to use both --post_content and --edit arguments?\n\nNah; it's weird, but not detrimental.\n. file_put_contents()?\n. file_get_contents()?\n. Using die() directly will send the error to STDOUT, instead of to STDERR and will exit with status 0, rather than status 1.\nBetter to use WP_CLI::error().\n. The spacing seems erratic. Mixed tabs with spaces?\n. Why are you passing false to WP_CLI::error()? Just let it exit().\n. This substr() / strlen() approach is not very readable. Please replace them with a preg_match().\nAlso, consider assigning to more meaningfull variable names, rather than using $thumbnail[0] and $thumbnail[1].\n. Please use a global .gitignore file instead.\n. This shouldn't be necessary, as all errors should be directed to STDERR.\n. This shouldn't be needed either, since CLI scripts have no time limit, by default.\n. This comment is rather useless; it doesn't actually contain any useful information.\n. Why use sprintf() to concatenate two strings, when we have .?\n. We have WP_CLI::warning() for these things, with an optional $message parameter, to boot.\n. I think we should convert [--id=<id>] to [<attachment-id>...], i.e. positional parameters, where you can pass more than one ID. \n. There are 0 reasons to use esc_html() here.\n. The grammar seems off here: \"some it exists\".\n. We should replace \"picture\" with \"image\" in all messages, to be consistent.\n. Also, the ending punctuation mark should always be . (full stop), rather than ! or nothing.\n. Please rename the subcommand to child-theme, to match post-type etc.\nYou can use the @subcommand annotation.\n. I'm not sure defaulting to Twentytwelve is a good idea. What if the user deleted it at some point? I think --parent_theme should be a mandatory parameter.\n. No SQL escaping?\n. And, also, why not use WP_Query? It has 'fields' => 'ids', post__in and even 'post_mime_type'.\n. You really don't need to do that, especially since you're not calling the_post().\n. I think using sprintf() would make this more readable.\n. Same suggestion re sprintf().\n. Is this still needed?\n. Do we still need these checks, if all the ids already went through WP_Query?\n. I think it would make more sense to return an empty JSON array, rather than a \"No rules\" string.\n. I think a better message would be No rewrite rules.\n. Also, I think using WP_CLI::warning() would be more appropriate.\n. The duplicate code can be reduced by refactoring the logic:\n1. if there are no rewrite rules, cast to an empty array and issue warning.\n2. Proceed with the rendering, as before the PR.\n. Missing the ..\n. There should not be a space between the function name and the opening brace: http://make.wordpress.org/core/handbook/coding-standards/#space-usage\n. You should use the @subcommand annotation only when PHP doesn't allow you to define a method with the correct name.\n. Same comment about @subcommand.\n. Why would you list a single role?\n. Missing the trailing dot.\n. The command should be called role, to match all the other top-level command names. You'll need to rename the .txt files too.\n. You probably didn't mean \"rule\".\n. Any particular reason why the first example is indented, but the second is not?\n. It might be a problem of spaces vs. tabs. Use spaces in these files, please.\n. I think the WP_CLI::error() call is actually detrimental.\nFor example, you wouldn't expect if [ -f 'some-non-existant-file.txt' ] to output something on STDERR, right?\n. Yes, using exit(1) directly is fine.\n. Pretty sure exists is a valid method name.\n. Why does $config_spec['path'] become an array? It's supposed to be a string.\n. Oh, I see.\n. This brings up an interesting point. Let:\n- --path be the runtime parameter you pass to wp\n- path: be the config you set in a wp-cli.yml file.\nWhen either of them is absolute, there's no problem.\nWhen they're relative, it gets tricky: --path should be relative to the user's current working directory, while path: is relative to the file it's in.\nThe problem is that, at this point in the execution, --path would have overwritten path:, so you can't tell where the value came from.\n. Actually, I was wrong; this code is meant specifically to handle that case, so that set_wp_root() doesn't do its own conversion.\n. The preg_replace() should go in the extract_args() array above, no?\n. The idea is that you should do the preg_replace() only if the slug is used. Since it isn't very expensive, you can just do:\narray(\n  'label' => preg_replace( '/_|-/', ' ', strtolower( $slug ) ),\n  ...\n)\n. Wouldn't it make more sense to rename this to --title?\n. In the synopsis it's --post_id.\n. Tags shouldn't contain spaces and should be lowercase, so the correct name would be @custom-post-types.\nAlso, I'm pretty sure you would have to add it for each scenario.\nWith that said, I don't really see the usefulness in tags at this point, since tests are already pretty well grouped by file.\n. > I thought that at some point the scaffolding tests would grow and grow because it houses quite some functionality\nThat's a good point, but let's cross that bridge when we reach it.\n. I don't see why the <filename> argument is necessary.\nTo STDOUT by default: wp post get 123\nRedirect STDOUT to a file: wp post get 123 > file.txt\n. How about adding --format=json? which would contain all the post fields.\n. I wouldn't bother with YAML. The other formats that are supported by wp post list are table and csv.\n. I think you could use PHPUnit's assertJsonStringEqualsJsonString().\n. There's a require_once 'PHPUnit/Framework/Assert/Functions.php'; in features/bootstrap/FeatureContext.php that loads them.\n. Yeah, compareJson() is rather misleading, since you're actually working with PHP values. Maybe use assertContains()?\n. It was a bad idea to define a function inside another function (I know you didn't write it like this). Please move it out of the step definition.\n. I don't think this is necessary; you can just do:\nAND STDERR should not be empty\n. How about casting to (bool)? Would be more explicit.\n. Also, I think testing is_admin() would be more appropriate, since that's what you're interested in.\n. You could just skip the 'term_id' and 'term_taxonomy_id' fields, no?\n. This looks unbalanced. Please surround with curly braces, as suggested in the coding standards: http://make.wordpress.org/core/handbook/coding-standards/php/#brace-style\n. Same thing here; either surround all branches with braces, or none of them.\n. I think you should use WP_CLI\\Iterators\\Query here.\n. The correct syntax is --post_type=<post-type>.\n. You should use isset( $assoc_args['empty_comments'] ), to avoid the notice.\n. Ok.\n. You can just use foreach ( $posts as $post ).\n. Every \"Given a WP install\" call produces a new test dir, so no, it's not necessary.\n. > Might be useful to somehow get the output of get_stylesheet_directory()\nWe have wp theme path.\n. You just have to pass $path through $world->replace_variables() in the step definition.\n. I wouldn't have thought to use a child class to add additional subcommands for multisite. +1\n. About that, why not use wp_delete_post()? It takes care of everything.\n. How about we leave out the arguments entirely, for now? There doesn't seem to be a clear usecase either way.\n. I'm not sure what the purpose of this line is.\n. That's true.\n. That's strange; I'll take a look once this is merged. #416\n. I don't like that you don't see what command is being run. You should be able to write:\nWhen I run `wp media import {DOWNLOADED_IMAGE}`\n. Similar situation here; don't define steps unnecessarily:\nAnd the {DOWNLOADED_IMAGE} file should exist\n. I could just do 'CREATE TABLE IF NOT EXISTS', but that wouldn't reset the schema.\n. That's an interesting idea.\n. Oh, because CREATE TABLE new_table SELECT * FROM other_table wouldn't work otherwise.\n. I'm not sure the flag is needed. We could just always show the version.\n. I'm getting:\nNotice: Undefined index: version in /Users/User/git/wp-cli/php/WP_CLI/CommandWithUpgrade.php on line 52\nThat's because must-use plugins usually don't have versions.\n. What's the point of prepending an empty string?\n. Yeah, you should mention [--yes] here.\n. Checking both get_cache_path() and get_path() will cause a lot of confusion; it should only check get_path(), since the intention for the \"file should exist\" step was always to check for a particular file in the current test dir.\n. ... and any tests that assume otherwise should be updated.\n. You could probably combine these first two scenarios, to avoid having to do the setup twice.\n. I just had a problem with exposing non-relevant implementation details, specifically the arguments passed to export_wp(). We don't do that in any other wp command by default.\n. Yes; in general, in this pull request it's easier to follow the commits than the final diff.\n. Because, when --verbose is specified, we show each post ID and we can't also show the progress bar at the same time.\n. The Travis build says there was an error:\nfeatures/bootstrap/../../bin/wp scaffold plugin zombieland --activate: Error: Could not activate plugin: zombieland\n. Composer's autoloader should take care of this.\n. git_pull() and git_clone() don't seem to be used anymore.\n. The travis build is failing with this message:\nfeatures/bootstrap/../../bin/wp help: PHP Fatal error:  Call to undefined function is_wp_error() in php/WP_CLI/Dispatcher/RootCommand.php on line 133\n. Wait, the $packages variable is pulled out of thin air anyway. :)\n. Since the path was php/WP_CLI/Package.php, I assumed the file contained the WP_CLI\\Package class.\nSince it just contains a bunch of functions, it should be called php/package.php or something (just like we have functions in theWP_CLI\\Man namespace defined in php/man.php).\n. That extra comment isn't needed; the scenario description is enough.\n. This man page shouldn't be deleted.\n. The query string is duplicated (once here and once at line 76). You should move it to a helper method.\nOr maybe we could add an extra parameter to Iterators\\Table to make it have this behaviour (repeat the same query until there are no more results).\n. If the rows stay the same, how will a dry run ever finish?\n. We could just approximate the results with a SELECT COUNT(*) ... WHERE LIKE query.\n. Why not use $wpdb->tables( 'global' )?\n. Why is the fix here to ignore the first column?\n. That's not a very precise test. You should create a new scenario which has a multisite install with a few blogs on it.\nYou can use the Given a WP multisite install step to start. All the existing step definitions can be found in features/steps/basic_steps.php\n. Erm, yeah... you just deleted it.\n. I think it would be both more readable and more flexible if you did a preg_match() on something like ^define( 'MULTISITE'.\n. I didn't notice this was happening in modify_wp_config(). You should of course do the preg_match() before calling it.\n. Because it doesn't know enough about the content. See my other comment: https://github.com/wp-cli/wp-cli/pull/486#issuecomment-18811537\n. In other words, modify_wp_config() should only focus on the mechanics of inserting something into the file and nothing else.\n. We could then have another dumb utility called wp_config_contains() and combine the two at a higher level, which has more context.\n. Or we could have a WP_Config_Manipulator class which opens a file pointer or something and has two methods: contains( $content ) and insert( $content ).\nLet me know when to stop. :P\n. Seems like it. Two possible solutions:\na) skip tables which don't have a primary key column\nb) for tables without a primary key column, assume they don't have serialized values and do a single UPDATE query\n. Sounds like a plan. :+1: \n. You can just add this as a regular step to the \"Given\" part of the scenario:\n``\nGiven a WP multisite install\nAnd I runwp blog --slug=\"foo\" --title=\"foo\" --email=\"foo@example.com\"`\nAnd ...\nWhen I run wp search-replace foo bar --multisite\n``\n. It's possible because Behat doesn't care if a step is defined with$step->Given()or$step->Then().\n. The idiomatic way would be to check!empty( $items_to_update ).\n. You should also test thewp_2_options` row.\n. You should remove this unused step definition.\n. @daithi-coombes This hasn't been resolved.\n. Nice catch! No blacklist, currently.\n. This comment is redundant (you could get the same information by just looking at the code); explain the \"why\", not the \"how\".\n. This tag isn't useful; If you just want to run a specific scenario, you can do:\nvendor/bin/behat features/search-replace.feature:19\n. Nesting function definitions like that is bad practice, since they aren't accessible only from the parent function, as you would expect.\nYou should move it outside of the launch_editor_for_input() function.\n. I think that works (I noticed the directory is added to .gitignore).\nI thought about creating a directory under $HOME, but that doesn't work very well when WP-CLI is installed globally, i.e. in /usr/share/.\n. OPTIONS should be above EXAMPLES.\n. You should use the get_user_from_first_arg() utility method instead.\nAlso, we should update the docs for the subcommands to point out that they all accept both a login and a user ID.\n. I really don't like defining functions inside other functions or methods.\nThe WP apache_mod_loaded() function also checks phpinfo(). Would it be possible to use init_set() to achieve the desired effect?\n. You probably meant <list> here.\n. Debugging line?\n. You're missing either a break statement or a // fallthrough comment here.\n. It seems like $theme_obj->exists() is checked more times than needed in this block of ifs.\n. I think creating a new file, php/compat-wp.php would be the most \"correct\" way.\n. Actually, that wouldn't work, because you still have to define the function conditionally.\nJust leave it where it is, but add a comment explaining why it's needed.\n. You need it to default to 'localhost'.\n. What's the //\\//\\\\/ dance for?\n. I see. You can avoid the need for escaping by using | as the sed separator, instead of /.\n. Nitpicking:\n- !empty() is more idiomatic than count() > 0\n- inconsistent whitespace: function_exists( 'apache_get_modules')\n. Thanks; that's a really thorough explanation.\n. I'm really confused by what this line does. Could you rewrite it using if etc.?\n. What if the URL doesn't contain .zip at all? We need a more reliable check.\nMaybe a regex that checks if it's a valid plugin/theme slug, i.e. only contains dashes etc.\n. Any particular reason for using :- instead of -? Even if there was a DB_HOST environment variable declared, we wouldn't want to use it.\n\n${parameter-default} and ${parameter:-default} are almost equivalent. The extra : makes a difference only when parameter has been declared, but is null.\n\nhttp://tldp.org/LDP/abs/html/parameter-substitution.html\n. I'm thinking that, instead of creating a new step for each temporary file, we could just do this:\nGiven I run `curl http://downloads.wordpress.org/plugin/mp6.zip > /tmp/mp6.zip`\n. It's both less code and more explicit.\nI don't recall why I went with custom steps initially; probably just inertia.\n. Oh yeah; the idea was to not have to re-download files if they're already present.\n. See be69d7669d061fb8844492ad8838dd64d0de1490\n. Right, but ternary operators are useful because they save writing the variable name multiple times, whereas this usage is just \"clever\". Please rewrite it.\n. > :- won't throw an error if $4 is undefined.\nI've never heard of Bash \"throwing an error\" on an unset variable and the docs you mention don't say anything about that either. They only say:\n\nPut another way, if the colon is included, the operator tests for both parameter\u2019s existence and that its value is not null; if the colon is omitted, the operator tests only for existence.\n. Right, what I'm saying is to remove the colon:\n\ndiff\n- DB_HOST=${1:-localhost}\n+ DB_HOST=${1-localhost}\n. I guess you got confused by the trailing questions mark:\n\nAny particular reason for using :- instead of -?\n. Wouldn't inserting the ioption without any quotes produce the same result?\n\n``` diff\n- ioption=(-i \"\")\n+ ioption='-i \"\"'\n\nsed \"${ioption[@]}\" \nsed $ioption \n``\n. I'm not sure why the original code chose to usenew`. What if the constructor has some mandatory parameters?\n\nclone seems like what's needed here.\n. That won't cut it. <user>... in the synopsis means that the command should support a variable number of arguments.\n. Same as above.\n. The code only converts the first parameter, but the command accepts more than one:\nwp user delete 12 bob 14\n. Yes, we have several commands that support a varying number of parameters:\n```\nphp/commands/cap.php\n26:  * @synopsis  ...\n52:  * @synopsis  ...\nphp/commands/media.php\n13:  * @synopsis ... [--yes]\n62:  * @synopsis ... [--post_id=] [--title=] [--caption=] [--alt=] [--desc=] [--featured_image]\nphp/commands/post.php\n59:  * @synopsis ... --=\n145:     * @synopsis ... [--force]\nphp/commands/search-replace.php\n13:  * @synopsis   [...] [--skip-columns=] [--dry-run] [--network]\nphp/commands/user.php\n62:  * @synopsis ... [--reassign=]\n148:     * @synopsis ... --=\n```\nAnd we're not deprecating it because it's a useful feature. If anything, we should add it in more places. See #229.\n. I guess I should have been more explicit:\nAdding code to wp core install-network that can work only if you add the above incantation to your wp-config.php file is not acceptable.\nYou could at least hide part of chaos:\nphp\nif ( function_exists( 'WP_CLI\\\\Utils\\\\about_to_install_network' ) ) && WP_CLI\\Utils\\about_to_install_network() ) {\nOr, ideally, find a way to not have to change wp-config.php at all.\nPS: Given wp_config_contains(), are you sure it's still needed?\n. Well, one would be to add a parameter to get_wp_config_code() that, when passed, returns the code without the lines that contain the constants.\n. The --skip-config flag will work only if you add that incantation to wp-config.php.\n. Returning false will leave the user wondering what went wrong. You should use WP_CLI::error() instead.\n. Could you explain why the old invocation doesn't work on mingw?\n. Related: #144\n. Nevermind; I saw your commit message.\n. Or we could do a polyfill for array_column().\n. Hey, there's even a Composer package: https://github.com/ramsey/array_column :)\n. Nitpick: it's not a Packagist repo; it's a Satis repo. The official\u00ae\u2122 name is \"package index\".\n. The WP-CLI package index URL should be under the wp-cli key, if you use the following command to add it:\ncomposer config repositories.wp-cli composer http://wp-cli.org/package-index/\n. Would it be possible to intercept the download process earlier somehow, to avoid extracting all the data from the URL alone?\n. Sounds like an improvement.\n. This belongs in the $defaults array in post_type().\n. The real problem is that this line doesn't belong in _scaffold(); it belongs in taxonomy(), since post_type() doesn't need it.\nSee 844612afc73a1afa37599a28f8df3d32b6c4f80f\n. No need to create a new PR. Just make another commit.\n. If you run wp plugin, you will notice that the first line is usage: wp plugin _search. That's because the method is public, when it shouldn't be.\n. The stars don't align.\n. The 'key' column makes sense only when --interactive is passed.\n. It would be more grep-able if you just listed each capability on a new line, without the explanation: \"User caps (role and individual) are:\"\n. If we're going to make this change, let's do it right:\nRename $values to $defaults and assign the result from wp_parse_args() to  $assoc_args.\n. Idem.\n. WP_CLI::error() already calls exit(1); internally.\n. This comment belongs to _does_exist(), no?\n. If we're going to follow the wp user exists pattern, there should be a WP_CLI::error() call here.\n. Oh, the WP_CLI::error() call is inside _does_exist(). Nevermind.\n. (I meant that I see a WP_CLI::success() call, but no WP_CLI::error() call.)\n. Not sure about this. It would be better to try with 'verify' => true first. If it fails, show a warning and try again with 'verify' => false.\n. Have you tried v1.5.0?\n. Missing a trailing comma here.\n. This missing line is causing errors in plugin.feature and theme.feature: https://travis-ci.org/wp-cli/wp-cli/jobs/10164422\nI don't want to add it back, because some plugins hook to it to do redirects, which is what we're trying to avoid.\n. The problem is that wp plugin list doesn't call wp_update_plugins(), like wp plugin status does.\n. It should also accept a question.\n. ... as the first parameter.\n. Probably.\n. There's a typo: satls\n. Where should WP-CLI look when it's installed as a Phar file?\n. This getter/setter pair seems superfluous. You could just use $this->config['prompt'] directly.\n. If is_bool() already returns true, then why do you bother converting it to a boolean below?\n. You should use the ~~table~~ query iterator here. It scales better.\n. I thought WP 3.6 had some utilities for extracting media from post_content.\n. We of course shouldn't make it depend on WP 3.6, but we should see what's already done and backport what makes sense, instead of starting from scratch.\n. It seems to me like we should be able to trim the whitespace directly in the regex. Maybe doing the same [\\r\\n] trick as in #726 would work?\n. I don't understand where this assumption is coming from. If you're importing new data and files, how could thumbnails already be present?\n. What about serialized values?\nWe should have an additional Behat test that captures how serialized values are displayed, particularly in --format=table.\n. Well, for --format=json, it would obviously be better to show them in JSON form.\nFor table and CSV formats, I think JSON is still better than PHP serialization.\n. If you want to get the raw database value, you can use wp db query.\n\nI just think we need a rule for \"if array or object and no format specified, present as X\"\n\nSuch a rule would be too simplistic. It matters if you're displaying a single value or a list of values.\nTo wit, when you're displaying a table, you would prefer for the value to fit on a single line. Conversely, when you're displaying a single value, you can spread it out over multiple lines, for readability.\n. But yeah, ideally, we'd use the same base format (i.e. JSON vs. var_export) for both wp user-meta get and wp user-meta list.\n. To conclude, I think we should make a non-echoing version of print_value() and use it for --format=table (since this format is mostly about readability).\nAnd for --format=csv, we could use JSON.\n. Please also add a --field= parameter. See #778.\n. By that reasoning, why is --fields= useful?\n. I don't think you need to use an object just for JSON, since associative arrays are translated to JSON objects too.\n. Oh, you changed the semantics! In all other commands, --fields= restricts the columns, whereas here, it filters the rows.\nI suggest you rename it to --keys=.\n. The extra with syntax shouldn't be needed, because bash already supports temporary variable assignments:\nWhen I try `EDITOR='ex -i NONE -c q!' wp post edit {POST_ID}`\n. We don't care about WP < 3.4.\n. This test would pass even if the command ignores --post__in completely and returns all the posts. We need to test that the list contains only that post.\n. I think it would be cleaner to use getenv('EDITOR') and if it's not defined, set a default based on the OS.\n. This seems to be ignored for some reason: https://travis-ci.org/wp-cli/wp-cli/jobs/12236100#L166\n. I'm using its install script and it gets installed properly. Otherwise, I would either get an error or blank output.\n. Yep, that did the trick.\n. This ternary operator seems off. If $HOME is not empty, then shouldn't you use that, instead of $HOMEDRIVE?\nBoth $HOMEDRIVE and $HOMEPATH are empty on my OS X machine, for example (also, I've never encountered them before).\n. This shouldn't be a public method; the fact that the cache manager uses a file backend, which is implemented as a separate class is currently an implementation detail.\n. Oh, I didn't read that right (didn't see the :).\n. But maybe then other people would get tripped by it too. Refactoring it into a regular if would make it a lot more readable, IMO.\n\nI put it because i wasnt sure that cygwin set the HOME env or use the windows one...\n\nAn inline comment saying as much would be useful, then, since it's not at all clear just from reading the code as-is.\n. Yes, you can run WP-CLI directly via cmd.exe.\n. I say we make it public only when we have at lease one clear use-case for caching other files besides the ones returned from WP.org, not before.\n. This causes a notice:\n$ wp plugin install bbpress\nInstalling bbPress (2.4.1)\nPHP Notice:  Undefined index: version in /Users/User/.wp-cli/vendor/wp-cli/wp-cli/php/commands/plugin.php on line 263\n. The indentation is off.\n. Wouldn't it be esier to pass $item as a whole?\n. Nevermind, I see that in plugin.php and theme.php the situation is different: https://github.com/wp-cli/wp-cli/pull/619/files#diff-d9280ce263428117e9371575f158307aR179\n. It would be great to have a test more precise than \"STDOUT should not be empty\", but I guess that would involve actually having some attachments to check.\nSo, it's good enough, although resolving that \"No newline at end of file\" error would be nice.\n. Doesn't the try/catch block in Runner.php cover this?\n. > These functions are more efficient than str_replace()\nRight, but they're only called a single time, so it's a micro-optimization which severely decreases readability. Not sold.\n. On the other hand, str_replace() is less precise. How about using preg_replace()?\n. The main problem is the two magic numbers: 7 and 10. Any solution that eliminates them would be acceptable.\n. More to the point, both the pathinfo() and strlen($tempdir . '/wordpress') suggestions would be better than the current code.\n. Actually, I was thinking if would make sense to use https://github.com/symfony/Finder (it's already a dependency).\n. There's another PR that makes the changes needed for the Phar file:\nhttps://github.com/wp-cli/wp-cli/pull/619/files#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780L15\nhttps://github.com/wp-cli/wp-cli/pull/619/files#diff-986376432265e5dc6280fc5d8f50566eR40\n. The build currently fails because the require: values aren't merged properly.\n. If you put the examples here, they will show up when you run wp post-term --help.\nIf you put them above each subcommand, they will show up when you run wp post-term get --help etc., which seems more appropriate.\n. We don't use the @author tag because multiple people will contribute to the same command and listing them all everywhere would quickly get out of hand.\nYour name will be mentioned in the next release post and will also show up here: https://github.com/wp-cli/wp-cli/graphs/contributors\n. It's not really clear what the --replace flag does. Could you add a short description for it?\nExample: https://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L15-18\n. CodeSniffer complains when the file doesn't end in a newline. :)\n. Not sure what the !! is for; won't empty() always return a boolean?\n. Actually, this is still wrong. It should be __( 'Add New'\n. Yep; just tested. Merged without the last commit.\n. We have a helper for this: Utils\\assoc_args_to_str().\n. constant() is needed only when the constant name is dynamic.\nBut more importantly, you're not escaping $args.\n. And even more importantly, using /bin/wp won't work for the Phar file.\n. It might be as easy as using $GLOBALS['argv'][0] instead, but I'm not sure.\n. Actually, this would belong in utils.php.\n. Note that this line will never be reached, since WP_CLI::error() will stop the script.\n. I think this situation is rare enough that it doesn't warrant checking. And even if it's not there, a fatal error isn't a big deal in this case.\n. Stuffing everything into a single WP_CLI::success() call is awkward. Using multiple WP_CLI::line() calls would be better.\n. I think there might have been a reason why 'none' got special treatment.\n. Ok, cool.\n. Could you fix the indentation here?\n. --export=- looks ugly. How about if we make the value optional?\n--export=<file> - writes to file\n--export - writes to STDOUT\n. Copy-pasta?\n. No, I meant the description for --<field> is incorrect.\n. The build failed, probably because the whitespace between the two lines didn't match.\nI think it would be safer if you split it into two \"STDERR should contain\" checks.\n. There's no mention of the special - value here, like there is for wp db export.\n. Oh, you're right; sorry. I should have used the fancy new \"expand diff\" feature. :smile_cat: \n. Actually, I think documenting <file> explicitly for each subcommand would be better, but I'll take care of that post-merge.\n. One small thing, which I should have mentioned in your previous PRs too: please make sure that files always end with a newline. (you can see the little red arrow when viewing the diff for the PR).\n. You can use WP_CLI::line() here, since the return value should always be a string.\n. This seems like it can get expensive. I wonder why topologically_sort_terms() is needed in the first place.\n. Given that WP_CLI_CONFIG_PATH defaults to ~/.wp-cli/config.yml, the default here should be ~/.wp-cli, IMO.\n. ~/.wp-cli/composer.json (assuming that WP-CLI is installed via Phar).\n. I am not interested in adding yet another loading mechanism.\nThis should work with the setup described in Community-Packages#setting-up-the-package-index i.e. adding vendor/autoload.php to the global config.yml file.\n. Probably. But I think a runtime config dir isn't needed at all; see https://github.com/wp-cli/wp-cli/pull/936#discussion_r8559649\n. I mean, if you need to load a particular set of community packages at runtime, you can just use --require=/path/to/vendor/autoload.php.\n. How about using the fetcher here too?\n. > If used to manage community packages, we have to define WP-CLI as a dependency of those packages.\nWhy?\n. Sorry, I don't follow.\n. Have you actually tried that recently? I keep telling you that it won't throw a fatal error.\n. If it didn't work, then no one could install the wp server package via Composer, for example.\n. Would be good to check if the command itself is available at runtime, eg. by running wp help server.\n. All these unset() calls could be avoided by moving the plugin loading logic to a function.\n. pass_through_pager() should be a standalone function that's used by both wp help and wp doc.\n. php/utils.php is the designated place for standalone functions.\n. Technically, it's for the mysqldump command.\n. Actually, it should work for both mysql and mysqldump. Hm...\n. In any case, adding an example where it's used in conjunction with mysqldump would be useful.\n. Maybe it would make more sense to call this args? wp db args sounds more informative and it would also support adding a --format=json parameter later.\n. The convention is to add examples after an ## EXAMPLES header, indented with 4 spaces. Like this: https://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L29-32\n. I think it would be better to pin it to a particular alpha release, if possible.\n. indentation\n. Is it possible to remove the error suppression? What happens when there is an error?\n. indentation\n. This should no longer be needed.\n. no newline at end of file\n. no newline at end of file (this should have been caught by the linter, though; hm...)\n. I think we'll have to introduce that WP_CLI_ROOT_DIR environment variable after all, but that can be handled in a separate PR.\nWould also come in handy for #897\n. And of course package commands are not loaded when WP-CLI is a straight git clone, since this whole block is wrapped in a 0 === strpos( WP_CLI_ROOT, 'phar:' ) check.\n. Wouldn't it be better to try calling /usr/bin/id -u directly, instead of just giving up?\n. Missing a space at the end. It prints out \"torun\".\n. I think it would be better to suggest using sudo -u USER wp instead, since sudo asks for your password, instead of for the password of USER.\n. Right, but if you're not running as root, then sudo is more convenient.\n. The scenario I have in mind is someone running into file-permission issues and trying to \"force\" a command to run by prepending sudo. So, it's more natural we suggest they just use sudo -u instead.\n. I think it would be better to follow the same pattern as for wp plugin update:\nwp role reset <role>... [--all]\nExample usage:\nwp role reset administrator editor author\nwp role reset --all\n. An exception would also be an acceptable approach, as long as it contains the info needed for fixing the problem.\nMaybe you should open a separate PR, since this one contains some weird merges.\n. If the call is supposed to succeed, you should use When I run, which checks both the response code and STDERR.\nIt's a bit awkward because there would be no Then clause needed, so you should combine it with the Given block above.\n. Same as above, except now it makes more sense to merge it with the When block below.\n. When I run.\n. I meant that when you use When I run you don't need to check STDERR; it's checked automatically.\n. idem\n. too much indentation on that last line.\n. Pretty sure this should be STDOUT should be, since there shouldn't be any extra lines.\n. again, STDOUT should be\n. This line seems both mis-indented and unnecessary.\n. Missing word?\n. Should have curly braces and the following line should be indented properly.\n. Nitpick: foreach( should be foreach (, according to the WP standards. (several instances of this in the current PR)\n. You should add a --format= parameter and pass it to the formatter. Useful for displaying as JSON.\n. Actually, you can use ./vendor/bin/phpunit.\n. Same here: ./vendor/bin/behat\n. Any particular reason for using @dev?\n. I wasn't asking about \"require-dev\". I was asking about the Behat version: \"2.5.*@dev\"\n. I think you should change it to 2.5.*. We don't want to use unstable versions of Behat.\n. Please don't change the spec: the help command should work even without a WP install.\n. Could you add an example that uses the new --tables= parameter?\n. I think you can and should be a bit more specific, i.e. test that the error message is due to the failed role validation, instead of something else.\n. The alternative to error strings is introducing error codes, which aren't exactly fun either.\n. To test that it fails for the expected reason. I'll make the change and merge.\n. The activate subcommand shouldn't know about the activate-network parameter.\n. Typo: datbase\n. This isn't really needed.\n. This is not about coding style. This is about having a bogus line of code: wp plugin activate doesn't have an --activate flag.\n. Basically, you're confusing the $assoc_args that are received by wp plugin install with the $assoc_args that you pass to wp plugin activate.\n. To be 100% clear: the bogus line is $assoc_args['activate'] = true;\n. When a warning is issued, the command continues. When an error is issued, the command exits with status 1. So, you should use WP_CLI::error() here, which automatically calls exit(1).\n. I don't really get why you mention --dry-run in the message. wp search-replace orange orange --dry-run seems just as nonsensical as wp search-replace orange orange.\n. Oh, I guess exiting with status 0 would make sense if you don't want to trigger a failure in a script which calls wp search-replace. Nevermind.\n. Given https://github.com/wp-cli/wp-cli/pull/1077/files#r10791532, I think you should add a And the return code should be 0 check, just to signal that it's intentional.\n. I mean, it seems like what you're really looking for is a wp search <term> command.\n. I would rather just use wp-cli.phar - less HTTP requests = less time spent in Travis builds + less flakiness.\n. > And include all of the Behat scaffold / features in the Phar file? They're excluded currently.\nOh... no, definitely not.\n\nReally, the bootstrap files are the only thing the package tests need access to.\n\nSo do we really need to run composer.phar install, then?\n. You could create a wp-cli.yml file with a require: command/command.php line.\nIf you don't want to duplicate the name of the file, you could read it from the package's composer.json file.\n. You're using PHP's time(). You should either use MySQL's NOW() function or WP's current_time().\n. The wp_using_ext_object_cache() function is only available since WP 3.7. WP-CLI also needs to work with WP 3.5.\n. It would be nice if the success message told you how many transients were deleted. I believe $wpdb->query() returns the number of rows deleted.\n. Please stop adding these sorts of tags to Behat tests. They only add noise.\n. You can run only a particular scenario without using tags:\nbehat features/scaffold.feature:123, where 123 is the number of the line that contains \"Scenario: Scaffold commands ...\"\n. To speed this up a bit, you could clone only the latest revision: git clone --depth=1\n. Actually, you don't even need git. You could just download the zip:\nhttps://github.com/wp-cli/wp-cli/archive/master.zip\n. We should support deleting multiple widgets in one go.\n. Actually, you can even do WP_CLI::error( $error ).\n. > Hmm, that seems a bit magical. Should we be handling exceptions as well?\nYes, it is a bit. The idea was to automatically handle WP_Error instances that contain multiple errors. Exceptions can only have a single message.\n. IMO, WP CONFIG is rather ambiguous. It should be either more precise - wp-config.php - or more verbose - WordPress configuration file.\n. Why not do BEHAT_TAGS=$(./ci/set-behat-tags.sh) instead?\n. What if you add quotes?\nBEHAT_TAGS=\"$(./ci/set-behat-tags.sh)\"\n. Ok; nevermind then.\n. Yeah, we have --format=count.\n. What's the usecase for summing up the number of chars in all option values?\n. Exposing the raw SQL syntax doesn't seem like a good idea. Can't really put my finger on it, though.\n. Oh, of course: _ is a wildcard and also a common character in option names, so, to match options that start with my_plugin_, you'd have to write --search='my\\_plugin\\_%', which is quite ugly.\n. What's the purpose of this block?\n. The flag inside Mustache is necessary, but this boolean parameter is not.\n. Sorry, I didn't see the second invocation of get_global_params(). Disregard.\n. Found one more in wp cli update.\n. They are not top-level, but inside the WP_CLI\\Router namespace.\nIf you have specific questions that can't be answered by the current comments, I'd be glad to answer them.\n. Well, the before_invoke hook was initially implemented to avoid having to redefine a method in a child class. In this case, using it wouldn't bring much benefit.\n. The main idea behind \\WP_CLI\\Procees is to make it easy to capture all the output from the process in a structured format.\nFor background processes, we're not always interested in output (and it's trickier to capture).\n. The worst that could happen is you get a \"network port already in use\" error, which can be solved with killall php.\n. That's on you.\n. Because WordPress is not loaded yet.\n. Because it's used twice, to compare homeurl and siteurl. It's probably not the best name.\n. Oh, gotcha.\n. Wouldn't it be better if using --only-missing would automatically set the --skip-delete flag?\n. ",
    "danielbachhuber": "@scribu What was your reasoning for naming wp plugin status instead of wp plugin list?\n. Any plans to be able to persist between eval()? e.g.:\nwp> $users = get_users();\nwp> echo wp_list_pluck( $users, 'user_login' );\n. Sorry, partially incorrect bug report. It's confusing that shell stdouts the retval of the function too though.\n. I can learn to love it :)\n. I like the idea of something like --prompt-secure or similar, and I also like the idea of being able to specify which arguments to prompt for. However, for the latter, I'm not sure what the syntax would be to prompt for positional arguments or flags (which --prompt supports currently).\nWe could also magically use a secure prompt for arguments with *pass*, but I'm sure that would cause bugs we'd regret. And it doesn't handle positional arguments which need to be secure.\n. > Ideally it would function the same as the wp user create command at http://wp-cli.org/commands/user/ where the password is output on the command line and as such does not appear in the history.\nThe scenario you're describing is output. We're discussing input. \n. > I suggest I small modification to the global \"--prompt\" option, which currently simply prompts for input of ALL options of the specific command.\n@matpen I like this suggestion, and think it's sufficient for our needs.\nSorry it's taken so long to address this issue :( It's literally the oldest open issue we have.\n. Cool, I'll put something together when I have a moment\n. Happy to hear any and all feedback on coding style, etc. It might be nice to add a few more arguments like 'start_date' and 'end_date', and to abstract the argument validation out a bit.\n. Updated docs in 7640b7e\n. Weird... I just branched 20 minutes ago :/ I'll see what I can do.\n. If that's too ugly, I can create a new branch from master and cherry pick my commits to it.\n. Superseded by #201\n. @scribu re: 3eb9db5, I'm thinking var_dump() is a lame way to print the results of a subcommand. Any ideas as to what might be a better approach?\n. Well, for listing users, we use `\\cli\\Table.`\nI'll take a look at that.\nPS: I would prefer if you worked on a branch and opened a pull request\nDoable, sorry about that\n. Taking a new swing at this, closing.\n. I like set_role and remove_role. I'll try to get this finished up in the next couple of days. Sorry to keep you waiting.\n. Ok, should be good now.\n. @scribu which is a good example subcommand to follow? seems like a number of subcommands have the synopsis in their .txt file\n. Fixed bbad57c\n. Renamed and rebased.\n\nShouldn't remove_role also accept a  parameter, in case the user has multiple roles?\n\nI think that should be v1.1\n. 'delete-many' doesn't seem like the greatest naming. What are some alternatives?\n- delete-multiple\n- delete-matching\n- delete-where\n. I'm open to that, although I think it would be nice to make nesting subcommands a more common implementation pattern. Maybe this means including examples like this in the man docs\n. We're reliably producing Homebrew and Debian packages now, in addition to distributing WP-CLI as Phar. There aren't any other active requests for alternative distribution mechanisms.\n. What about looking for an appropriately named file in the plugin dir?\n. That makes sense. Although, would it be possible to build the man page from PHPdoc? Having to include a build script to turn .txt into man seems like a pain. Correct me if I'm not understanding things correctly.\n. Cool, looks good.\n. A callback to handle an individual row?\nOn Nov 2, 2012, at 4:52 AM, Cristi Burc\u0103 notifications@github.com wrote:\n\nSince all the rows from the CSV file end up in memory all at once, I'm pretty sure this won't scale past a few thousand lines. The parse_csv() utility function should accept a callback, instead of returning the array.\n\u2014\nReply to this email directly or view it on GitHub.\n. After further thought, I think adding a callback is unnecessarily complexity. For most uses, this parse_csv method is sufficient.\n\nI created 10,000 users with no memory issues.\n. How would you include the CSV example?\nRe: renaming, do you mean the txt file for the docs?\n. Updated with fixed subcommand name and sample csv format\n. There we go.\n. 0a3a237\n. heh, the user already existed 0f06d44\n. Whoops, guess I forgot to branch off upstream/master. Let me see if I can nuke the user commits.\n. Another thing I've noticed, which I don't have a quick Friday night fix for, is that the accuracy of the progress bar can be thrown off significantly by the attachment gets in the sub loop. I'm not sure how much I care, as the progress bar seems like UI candy to the rest of the improvements.\n. Added a method_exists() around the remoteset method 228ff11\n. I'm pretty happy with where this is now.\n. Oh, I've been working on this in my wpcom sandbox and can reproduce locally on trunk. d0536e9 fixes it.\n. Hmm, I see it both as an argument and in @synopsis on the master branch:\nhttps://github.com/wp-cli/wp-cli/blob/master/src/php/wp-cli/commands/internals/export.php#L22\n. Ah, missed that. Thanks \nOn Nov 10, 2012, at 12:40, Cristi Burc\u0103 notifications@github.com wrote:\n\nThere is a common pattern: WP_CLI::confirm().\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you explain further?\n. wp option get <key> should do the trick, where <key> is one of these: http://core.trac.wordpress.org/browser/tags/3.4.2/wp-includes/formatting.php#L2724\n. To clarify further, wp option get <key> will get you the option value. You can also use wp option update <key> <value> to update a given option.\n\n'siteurl' and 'home' are the two options used to store the base URL in WordPress. Updating those values will change the address of your site, although you may need to do a find and replace in post_content too (plus a few other places) if you aren't redirecting the old base URL to the new base URL.\n. I can take it up in a week or two if no one gets to it before me\nOn Nov 25, 2012, at 6:48, Cristi Burc\u0103 notifications@github.com wrote:\n\nThe plan was to merge https://github.com/Automattic/WordPress-CLI-Importer into wp-cli, but no one is working on that currently.\n\u2014\nReply to this email directly or view it on GitHub.\n. I think community commands should be packaged with their corresponding plugin as much as possible. We can commit random hacks of kindness by adding wp-cli commands to plugins via pull requests and, if someone wants to use the command prior to release, they can always check out the branch.\n\nIn my opinion, developers are very open to receiving pull requests, and are generally quite flattered when they get one. Packaging commands with plugins encourages a standard approach, but it also lets the approach develop naturally over time.\n. You need to:\ngit submodule init\ngit submodule update\n@scribu maybe dev-build should do this automagically?\n. > Curious how people just skip the --recursive flag, even though it's right there in the installation instructions.\nI learned it the hard way :)\n. Hmm, any thoughts on how you might limit this to specific tables or columns? I need search / replace once or twice a week, but I can't think of ever wanting to globally apply my changes\n. Now that I've had a night to sleep on it, I don't think my approach is the best and I don't think b) is that great either.\n216 is the way to go. Closing in favor of that.\n. I like 1, which I didn't do on this pass in favor of the simpler approach. It doesn't solve 2 though. Do you have any preference on where the config file would go? Maybe add to wp-config?\nOn Dec 27, 2012, at 21:35, Cristi Burc\u0103 notifications@github.com wrote:\n\n\"This pull request cannot be automatically merged.\"\nThere are a few problems with using WP filters:\n1) You can not only disable subcommands, but also shove in new ones, which makes the API leaky. A WP_CLI::remove_subcommand() function would be better.\n2) Certain subcommands run before WP is even loaded. To overcome this, we'd need to define a config file or something that is read by wp-cli right at the beginning.\nRelated: #216\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good\n. Yes, this and re-applying a wp-settings hack\n\nOn Dec 31, 2012, at 16:31, Cristi Burc\u0103 notifications@github.com wrote:\n\nSo, this fixes the issue on wp.com you told me about on IRC?\n\u2014\nReply to this email directly or view it on GitHub.\n. Maybe detect MS constants in wp-config as an indicator?\n\nOn Jan 1, 2013, at 1:48 PM, Cristi Burc\u0103 notifications@github.com wrote:\n\nI'm very tempted to skip loading core WP files for --cmd-dump. The only problem is blog.php:\nif ( is_multisite() ) {\n    WP_CLI::add_command( 'blog', 'Blog_Command' );\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. --config-path sounds reasonable to me.\n. This is what I hacked together for reference: https://github.com/Automattic/wp-cli/commit/1efa6cac4a636788311a472dd545e65c3ecc99d2\n. That works for me. How would you like to see the CSV generated? Simple utility function?\n. Interesting idea. I've actually run across a similar use case in the past: archiving a WordPress site. For instance, I've wanted to create a completely static representation of a WordPress site so I can keep the content up without maintaining WordPress.\n\nI'll let @scribu weigh in on whether he thinks this is core material. If it isn't, you could package it as a one-use WordPress.org plugin.\n. I'd be open to seeing a pull request that switches to to a warning / prompt.\n. Going with a warning like this:\nsalty-wordpress \u279c  wordpress-test.dev  wp --require=cache.php option get home\nWarning: Running WP-CLI while the APC object cache is activated can result in cache corruption.\nGiven the consequences, do you wish to continue? [y/n]\n. --ids fixed in cba6678\n. For now, I feel like being pure to how wp_insert_term() currently works. I've created a core ticket for using slugs in the 'parent' argument: http://core.trac.wordpress.org/ticket/23378\nI'm similarly shaky with unit tests, so I'll get an intro from @nb in the next couple of days\n. With a --markdown flag to edit in Markdown :)\nOn Feb 4, 2013, at 6:49, Cristi Burc\u0103 notifications@github.com wrote:\n\nUser types wp post edit 123\nwp-cli fetches the content of post 123 and dumps it into a temporary file.\nwp-cli invokes $EDITOR, with the path to the temporary file.\nUser edits post content and saves.\nwp-cli updates the post content using the contents from the saved temporary file.\n\u2014\nReply to this email directly or view it on GitHub.\n. It doesn't choke, but everything is reloaded. What about running input through a syntax checker?\n\nOn Feb 9, 2013, at 8:32, Cristi Burc\u0103 notifications@github.com wrote:\n\nI'm not sure why, but wpshell doesn't choke on syntax errors (and it doesn't use a separate process).\n\u2014\nReply to this email directly or view it on GitHub..\n. > What is the current approach?\n\nThe script looks for an author-mapping.php file. If it doesn't see one, it reads the authors out of the WXR and attempts to produce a mapping. It's a pain because with large imports there are typically dozens of associations that need to be manually fixed.\n. > Ok, and what does the author-mapping.php contain?\nAssociative array. \n\nBecause they weren't handled in author-mapping.php or...?\n\nBecause the usernames typically are different when we do the import, so someone needs to create all of the old => new associations.\n. wp import is coming along. Some things I'm thinking about:\n- It would be nice to add a couple more importers via CLI to confirm my abstraction works well. I'm also thinking it would be cool to support importing widgets, options, etc.\n- author-mapping.csv works pretty well, as does the creation mechanism. Not sure interactive mapping needs to make it into v1.\n- Needs docs, better verbosity, and tests. Also need to figure out a good way of emulating WXR in tests.\n. Perfect is becoming the enemy of good here, me thinks. I've added some nice verbosity borrowed from @mjangda in f57ce139d1a63cb8b16b8d756bbade45035c6871:\n\n@scribu Other than some tests, is there anything else you'd like to see out of this PR? \n. @scribu functional tests in place (although Travis doesn't seem to be running...). Good with a merge when you are.\n. Odd. Test runs clean for me.\n. > 1) It's funny that wp import won't work with a file generated using the current wp export command:\nHmm, I can't reproduce. I did an export / import yesterday on my personal website and it worked fine. The tests pass in my local environment.\n\n2) I'm getting the following output over and over at the start of the import\n\nDoes the author already exist? Can you share more details about the import file?\n\n3) At the end of the export, there's some extra HTML output\n\nWelcome to the WordPress importer :) There's a little extra HTML output everywhere.\n. Build passes.\n\nRight, but if we can't hide the HTML, we should at least not show the superfluous \"Success\" message.\n\nThe \"Success\" message indicates the subcommand completed fully, and didn't exist prematurely. I'd prefer to keep it.\n. > Could we at least show it on its own line then?\nYep f7c0354\n. I can think of one: syncing options between sites.\n. I'll try to wrap my head around it more, but 'b' sounds like why we have bash scripting.\n. Sorry, just catching up. This looks pretty neat.\nCould we have wp role list follow a similar behavior to wp post list, etc. where the default output is a proper table, but other formats can be used too?\nHappy to take care of this tomorrow.\n. Sure, what's the command to do it properly?\nOn Mar 11, 2013, at 19:53, Cristi Burc\u0103 notifications@github.com wrote:\n\nLooks good. Could you also take care of re-generating the man page?\n\u2014\nReply to this email directly or view it on GitHub.\n. Well, wp core --man wasn't it but I figured it out quick enough ;) man doc has been updated\n. I'm generally for including it in wp-cli as a wp-cli command but, considering generating man pages is a pretty niche use, I don't think wp helpgen is the proper place for it.\n\nMore options:\n- wp help --regenerate\n- wp helpgen only appears when you've installed wp-cli dev tools (e.g. ronn)\n. Why not just set the 'config' argument?\nOn Mar 21, 2013, at 17:36, Weston Ruter notifications@github.com wrote:\n\nAllows WP-CLI to be invoked from anywhere within a project, so you are not limited to being in the directory where the wp-cli*.yml file is.\nThe DOCUMENT_ROOT is then set to the supplied path relative to the config file.\nYou can merge this Pull Request by running\ngit pull https://github.com/x-team/wp-cli config-path-walk\nOr view, comment on, or merge it at:\nhttps://github.com/wp-cli/wp-cli/pull/362\nCommit Summary\nwalk up directory tree to find config file\nFile Changes\nM php/WP_CLI/Runner.php (38)\nPatch Links:\nhttps://github.com/wp-cli/wp-cli/pull/362.patch\nhttps://github.com/wp-cli/wp-cli/pull/362.diff\n. Still seems to load frontend context\n. Pull request in #385 \n. This is good to go. We're already loading all of the admin utilities at the bottom of wp-cli.php, so I think simply defining WP_ADMIN is all we need.\n. > In that case, why not just always set WP_ADMIN to true?\n\nThis is why commit messages should explain why, not just what: 5b6efb9d2cb3416a51ef8efe79bdfcfe3258218a\nI don't have a strong opinion against always defining WP_ADMIN as true, other than WP_Query behavior changes in a substantial way.\n. Ok, this sounds reasonable to me. I'll let you take the lead on resolving how it should be done. Let me know if I can help in any way.\n. Bonus points if the terms are from a major work of literature.\n. I guess hardcoding the JS output is a bad idea :( Open to other suggestions\n. Rebased to #405 \n. > That's consistent with wp post-meta get etc.\nHowever, the common use case for get_post_meta() is to return a string. wp user get and wp term get would both return objects \u2014 what would --format=content default to?\nThe much simpler solution is to default to --format=table. The fields can be customized with --fields. It's a little more verbose, and infinitely more clear.\n\nHow about --format=ids?\n\nI thought about it when I first introduced the --format argument. We could add 'ids' support, but I feel we should keep --ids for backwards compat.\n. Under the current proposed paradigm, you'd be able to use --format=csv|json|table but you wouldn't be able to STDOUT the same way --format=content does right now. We'd have to incorporate a fourth option, I think. Not sure I have a strong idea there.\n. Proposal accepted. I will get started on this.\n. You keep editing your comment :) I created #405 for the second, and was planning to lead with what I'm adding to wp term list\n. wp post get is pretty messy in my opinion.\n405 is ready to go, although it maybe needs a --format=ids test for wp post list\nI have some ideas for the --fields argument I'll try to get to early next week.\n. Using that argument, wp search-replace, wp scaffold, and others would be in the same boat.\nDo you know of any wp-cli -only plugins?\n. That's fair. We need a wp-cli package manager :)\nCan you create a new repo on this organization for me called \"Content Stats?\"\n. Sure, that's understandable. I suppose my reasoning for including it in the wp-cli organization is largely for discovery \u2014 I don't have any intentions in building a WordPress UI around it and/or releasing it in the plugins directory.\nI can foresee this situation becoming more common in the future, with the WP Coding Standards PHP sniffs being one of them.\n. Ok, I will mull it over.\n. Moved this to my own repo: https://github.com/danielbachhuber/wp-cli-stat-command\n. cc @mjangda\n. The second bit. We're in agreement then.\n. I renamed the branch and am adding to it. Is there a better way to rename branches?\n. For the subcommands that already supported --ids, do we drop the argument from the synopsis? Doing so will produce a warning, and probably break any use of it (including tests)\n. And... now the tests fail because of the function in a function issue.\n. I like the idea, and think it should be abstracted a bit more. For instance, it looks like it can only delete posts and not pages.\nFor wpcom, we have an empty-site command I've been meaning to port over. It deletes all posts, pages, comments, terms and tags, and resets a part of the options table. It would be nice if wp-cli could do something similar.\nCould you describe in further detail the use case you've established for what you have now?\nOn Apr 20, 2013, at 13:59, Taylor Lovett notifications@github.com wrote:\n\nNot sure why the build failed. I'll try to find out.\n\u2014\nReply to this email directly or view it on GitHub.\n. Here's what vip-empty-blog.php looks like right now: https://gist.github.com/danielbachhuber/be378af1934d90c355e3\n\nFor wp-cli, it would be nice to have wp blog empty to empty everything, and maybe something like wp blog empty --post_type=post to limit just to posts.\n. Hit all of the primary _list() methods, except for wp cap list which is somewhat awkward. Also debating what to do with wp plugin status and wp theme status\nNeeds updated man docs and tests.\n. > We should define a policy about what's ok to be used by third-party commands and what isn't.\nThat's fair but not a reason to punish someone when there's no law on the book against their action.\n\nI think that's a weak argument, based on a coincidence: if we rename the function to output_items(), it goes away.\n\nSure. \"Output\" means something different than \"format.\" The naming was intentional, not coincidental.\n\nIt's quite plausible to make the $format parameter optional, but it would make no sense whatsoever to make $items optional.\n\nThis isn't an important enough reason to make a breaking change. In that scenario, the $fields argument would need a smart default as well. There isn't an easy default for that though.\n. > Finally, how many community uses do you reckon format_items() has?\nNo idea. I used it all the time when I was writing code for wpcom\n. @scribu I'm happy with this now. I think wp plugin and wp theme deserve list subcommands, which I'll do in a separate pull request (#440). wp cap list can just be awkward on its own for now.\n. I think I'd take the opposite approach with this command: everything is deleted, unless you specify --post_type=post or --terms or --comments.\nThoughts?\n. Maybe. My use case has always been to empty a site, not delete it. The VIP script leaves options (e.g. selected theme, active plugins), and I still think it would be a nice enhancement to just empty specific tables.\nOn Apr 27, 2013, at 12:03, Cristi Burc\u0103 notifications@github.com wrote:\n\nI mean, conceptually, that's what it should be doing, right?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for letting us know, Jasper.\n. How would you feel about a package manager for wp-cli such that we could have a packages directory, people could upload their commands, and the commands could easily be installed via wp-cli?\n\nwp package install <your-command>\nOn Apr 26, 2013, at 8:26, Sebastiaan notifications@github.com wrote:\n\nI would very much like a return of the community commands.\nI'm working on a wp-cli tool for wordpress automatization and I would also like to use a couple commands like wp core download that can be run without any bootstrapped wordpress.\nFor obvious reason a plugin command is not my solution and this tool is probably to specific for our way of project development and this will lead to endless discussions on how it should be done. Therefor it will take a very long time to ever get into the core commands.\nBut I would like to use the awesome man,help and error reporting of wp-cli. Also calling core commands like wp core download from inside my commands would be awesome. Right now I run it separately and call wp-cli wherever needed. But this is far from what I would like and what would be the best solution.\nI hope this is convincing enough to make a return of the community commands.\n\u2014\nReply to this email directly or view it on GitHub.\n. Right. The most obvious disadvantage to me is that we already have a plugins directory to do essentially the same thing. But I also feel like using the plugins directory is shoving a square peg into a round hole.\n\nSecondarily, \"packages\" is the wrong word for this.\nDo you have interest / bandwidth to help build this out?\nOn Apr 26, 2013, at 8:37, Sebastiaan notifications@github.com wrote:\n\nThat would be pretty awesome. Great idea. Package maintainers have control of their own package and people can update their packages when they want.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sorry, bandwidth == time to contribute.\n\nLet's see what opinions @scribu has on the matter.\nOn Apr 26, 2013, at 8:44, Sebastiaan notifications@github.com wrote:\n\nYes I would be very interested to make this happen in one shape or form that is still open for discussion. What do you mean about bandwith, did you use it as a metaphore or real bandwith / hosting of some kind.\n\u2014\nReply to this email directly or view it on GitHub.\n. Cool. Still want to put some thoughts together / POC code.\n\nOn Apr 26, 2013, at 8:59, Cristi Burc\u0103 notifications@github.com wrote:\n\n@danielbachhuber I think we could discuss the package manager idea as part of #335 too.\n\u2014\nReply to this email directly or view it on GitHub.\n. behat is failing in my vagrant :( I'll try to fix it tomorrow so I can finish the tests.\n. Neat, didn't know about that. Thanks\n. I will finish the fields PR, and then you can have whichever fields you like.\n\nOn Apr 29, 2013, at 3:40 AM, Cristi Burc\u0103 notifications@github.com wrote:\n\nMe thinks we should also add the post_status column to the default output.\n\u2014\nReply to this email directly or view it on GitHub.\n. Correct\n\nOn Apr 28, 2013, at 13:35, Cristi Burc\u0103 notifications@github.com wrote:\n\nOh, you mean to parse the \"Requires at least:\" and \"Tested up to:\" headers from readme.txt?\n\u2014\nReply to this email directly or view it on GitHub.\n. > Also, this PR explains the implementation, but doesn't explain the goal.\n\nUpdated with: Why add a package system to wp-cli? Why, to make it easy for the community to distribute helpful commands they've written that don't make sense in core or as plugins.\n. > It would be nice if we could leverage Composer somehow, instead of coming up with yet another package format.\nI'm not terribly familiar with how Composer works. Here's what the workflow would be as I understand it:\n1. Search for wp-cli packages on Packagist.\n2. Find one you want to use, install it with: wp package install wp-cli/stat-command or similar.\n3. Behind the scenes, wp-cli runs composer require wp-cli/stat-command to install the command and add it to the composer.json file.\n4. wp-cli does some magical loading of the community command(s), or maybe this is handled by require 'vendor/autoload.php';\nPros:\n- Leverages Composer, and its existing Packagist repo.\n- Not Yet Another Package Directory.\nCons:\n- No way of listing wp-cli -specific commands from wp-cli, without us still publishing a listing of community commands. Similarly, there isn't an easy place for us to point people to find community commands. Yes, there's the wiki but that is manually updated at the moment and subsequently out of date.\n- composer.json now deviates from the Git checkout.\n\nAnd when would a command not make sense as a plugin?\n\nSite-wide backup and restore (#433) when you don't want to, or it doesn't make sense to, provide an admin interface. Similar justification for my Content Stats sample command.\nPlease correct me where I'm wrong on the Composer bits.\n. Ok, you've convinced me. I will explore this route when I have another chunk of time and report back.\n. Refactored to use Composer and Packagist instead of my Git-based approach: c0d21d7\nMy initial impression is that some things are better and some things are worse.\nBetter:\n- Autoloading is nice: https://github.com/danielbachhuber/wp-cli-stat-command/commit/4a9d2714811cd8553e00ccfadb64bfc40322736d\n- composer.json is a nice authorship standard for code.\n- We'd get to participate in a larger community.\nSame:\n- Still need to exec() to get anything done.\n- composer.json lives in php/packages and all of the Composer packages are installed in php/packages/vendor\nWorse:\n- No native unrequire support in Composer, as far as I can tell. I'm removing the installed package, and then \"manually\" unsetting from composer.json.\n- Keyword-based search appears to be broken on Packagist.org. wp package list (based on composer search) is now really slow and inaccurate.\n- Packagist.org offers RSS and Atom (?!) feeds for a couple of things. No JSON for the search results.\nFor the last two, the Packagist code is open source so I suppose I can submit pull requests there for what I want.\nMaybe @getsource or @rarst try publishing their new commands on Packagist, test out this branch, and give feedback on the overall experience.\n. > I hadn't got to that yet, but it can be used from PHP via API.\nD'oh. I will explore.\n\nThere is search.json endpoint, see http://www.terrymatula.com/development/2013/some-packagist-api-hacks/ Supports search by keyword (confusingly called tag in that context) as well.\n\nPerfect. I didn't see documentation for that on the site. Looks like searching by the wp-cli tag is still returning incorrect results though.\n. I added https://packagist.org/packages/danielbachhuber/wp-cli-stat-command yesterday\n. Yeah I opened an issue on the Packagist repo\nOn Thu, May 9, 2013 at 1:02 PM, Rarst notifications@github.com wrote:\n\nIt seems like it's not working in site itself either, my guess would be bug in search engine for tags with -\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/424#issuecomment-17686309\n. > This is not doing an exact match but uses a fuzzy matcher actually. I guess it can/should be fixed but not sure how to do it with solr and I never had time to look it up.\n\nhttps://github.com/composer/packagist/issues/313\nSo... hm...\n. Could you describe your current thinking in a bit more detail? I'm ready to work on this again, although I still feel the direction of where we're headed is somewhat unknown.\n. Yeah I just approved that yesterday. I'm fine with discarding the code on this branch.\n. > community packages are managed via the same composer.json file as the one created via the installer\nHow are we planning to address the problem identified before? On a Git checkout, this file will become dirty. On any other install, the registered community commands will be blown away on update.\n. I think I might just need to switch over. Do you use the installer personally?\n. > In my opinion simpler is better. If we burden each wp-cli user with complicated package managers and rebuilding their project I think the learning curve would suffer the amount of developers picking this up.\n+1. For this reason, having the extra step of manually adding a declared path in wp-cli.yml should be avoided. Plus, if using Composer can achieve the same effect of auto-loading code, I don't follow why we'd want to depend on another way of doing it.\n\nIt would be better to teach people to use Composer directly.\n\nThey don't need to use Composer to install wp-cli, just copy, paste, and run a line of text. Composer should be something they can work towards. If they can use WP-CLI, they should be able to install community commands.\nPersonally, I think my opinion has swayed back to where it was the last time I worked on this branch:\n- Users can browse, install, list, and delete community commands with wp package\n- wp package uses Composer behind the scenes to manage community packages.\n- The community packages are stored in (and auto-loaded from) /php/packages by default, but that can be modified    by use of wp-cli.yml, etc.\n. > They're straightforward to understand and they're a solid foundation to build upon (simple).\nCorrect me if I'm wrong, but you'd like to use wp-cli.yml instead of composer.json to specify dependencies? That is not \"simple\", in my opinion, because it introduces another layer of complexity.\n. I would like to have a real-time chat, but today and tomorrow aren't good days. Could we schedule something for Friday morning Pacific (and then loop in anyone else who has an opinion)?\n. I'll be offline all next week, but could do the same time Monday, June 24th to discuss the remaining pieces. I'll add that to my calendar unless I hear otherwise.\n. Drupal's attempts at integrating Composer: https://drupal.org/search/site/composer\n. Open question: do we use Composer's Application class (which handles CLI execution), or is it worthwhile to write our own install, list, browse, and uninstall methods?\nI'm working towards the latter at the moment, as my inclination is Application comes with too many things we don't want.\n. > my inclination is Application comes with too many things we don't want.\nYep, looks like we'd have to use all of Composer's output formatting.\n. ... and this kinda sucks :( https://github.com/composer/composer/blob/master/src/Composer/Json/JsonManipulator.php\nAm I off my rocker to think that parsing JSON with regex is a horrid idea?\n. Yeah, I've considered that. Although then we'd have the WP-CLI command command :)\n. Here was the response to the JSON parsing question: https://twitter.com/seldaek/status/351605691120754689\n. Why is editing composer.json a bad idea again? I've been operating under the assumption it's a key advantage of Composer\nOn Sat, Jul 6, 2013 at 5:01 PM, Cristi Burc\u0103 notifications@github.com\nwrote:\n\nFYI, I found an intermediate solution for installing packages, without needing to manually edit the composer.json file:\ncomposer config repositories.stat vcs https://github.com/danielbachhuber/wp-cli-stat-command\ncomposer require danielbachhuber/wp-cli-stat-command=dev-master\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/424#issuecomment-20556416\n. I think Git or SVN are your best bet \u2014 I don't see much sense in reinventing that wheel, or being a simple wrapper for SVN.\nit avoid all that pesky .svn garbage littering my file system.\n\nYou should upgrade SVN ;)\n. Happy to include smarter behavior if someone wants to put together a pull request\n. > However for those who are using their own vhost in non-dev environments, automating the creation of the database and the database user would still be useful.\nOn second thought, I'm not sure why WP-CLI would need to be involved with process.\nIt does make sense for wp db create to be used when the command uses database details from wp-config.php. WP-CLI knows how to locate the wp-config.php, and read the constants stored in it.\nIt doesn't make sense for wp db create to be used when the command doesn't use database details stored in wp-config.php. In this context, wp db create is nothing more than a wrapper for the mysql binary.\n. Wontfix for now. Installing a ZIP makes sense because core supports ZIPs. Installing a Git URL isn't any different than cloning it.\n. > site-wide Backup and Restore \nTo clarify, you're meaning database + /wp-content/ ?\nCould be a good community package test too.\n. Good call. I've asked if he wants contribute.\n. @kalabro can you describe why you want to do this, and what other settings you'd want?\n. This would make for an awesome community package :)\n. Looks good to me :)\n. This started annoying me enough that I committed 3f08d5f7eefeb678fb36e380205d343bebd2dfe1. Hope you don't mind.\nIt would be nice to get this in 0.10.0. wp plugin install can easily use get_api_for_version() too. \n. time() == GMT\n. Too complex for what I need, imo. I'll mull on it more. I'm passing the time in the string now for an immediate solution.\n. That sounds better\nOn Thu, May 23, 2013 at 7:42 PM, Cristi Burc\u0103 notifications@github.com\nwrote:\n\nAnyway, if we were to implement something like this, it wouldn't be as an extra parameter. It would be a class that you would inject only once, before any command is executed. Example API:\nphp\nWP_CLI::set_formatter( new LoggerWithTimestamp( 'Y-m-d H:i:s' ) );\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/issues/465#issuecomment-18383829\n. Still missing some code?\n. Looks much nicer.\n. That could solve it too. My first thought is we'd then need a confirmation if there was an existing plugin/theme. I think it's better to assume the user knows what they're doing.\n\nOn Mon, May 27, 2013 at 6:18 PM, Cristi Burc\u0103 notifications@github.com\nwrote:\n\nIMO, the --version parameter should be respected even without a --force flag.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/issues/476#issuecomment-18520048\n. @scribu this is good for merge now.\n. > A more consistent behavior would be to ask first: \"A newer version is installed; Overwrite it? [y/n]\". Or the --force parameter, which you initially suggested.\n\nWhat should happen when an older version is installed?\nI personally prefer the behavior that exists on the pull request. Passing CLI arguments is an explicit activity \u2014 confirmation prompts assume the user might not know what they're doing.\n. > By that logic, we shouldn't ask for confirmation when doing wp db drop either.\nCorrect. I think we have inconsistent, and not well-defined, use of confirmation prompts. My preference would be to drop them entirely. I don't think we should or need to make an immediate decision though \u2014 might be best to let the issue sit for a week.\n. I'm back to wanting to use this. I think we can go with:\n\nA more consistent behavior would be to ask first: \"A newer version is installed; Overwrite it? [y/n]\".\n\nand then support --yes for passing without a prompt. Sound good?\n. @scribu Running locally, the plugin test is stuck here often (but not always):\n\nCan you test locally to see if you can reproduce? Other times, it says it's failed installing Akismet 2.5.7\n. Ah, you win. Fixed in 359a708. Should be good to go.\n. I think you're over-thinking this, and I'm disinclined to spend any more time on it while it's being nitpicked to death.\nIn my opinion, wp install plugin <plugin-name> --version=<version> --yes is good enough. The --yes is consistent with the prompt we offer if/when the installation conflict arises.\nOn the other hand, --force ignores the existence of the confirmation prompt.\n\"Yes\" correlates strongly with the confirmation prompt. \"Force\" means what? Ignore the required parameters?\n\nit's consistent with core download --force\n\nWe should change --force to --yes in this case.\n\nAlso note that install_from_repo() only handles the wordpress.org case, but the --force flag should have the same effect when used with a zip file, local or remote.\n\nThis is beyond the scope of this pull request, as --version doesn't apply to installing from a ZIP. In a separate pull request, someone can offer the ability to overwrite a plugin installed from ZIP with another ZIP, and use the same confirmation prompt / --yes pattern.\n. Do we keep the confirmation prompt then if you try to install a plugin when there's already a different version installed? And is --yes becoming --force for db drop?\n. > A related idea I've had for a while was to use a Mustache template \nI like this. Then we could just have a --template=<file> argument where you can specify your own.\n. > I guess I don't really understand your workflow.\nThe wp-config file is tracked in version control, and already has the necessary constants.\nAlternatively, modify_wp_config() could be smarter about what it's trying to add...\n. > without having to do crazy hacks like checking WP_CLI::$runner->arguments\nThe crazy hacks are because of core, as I'm seeing it now. Installing multisite through the admin is a three-step process:\n1. Add define('WP_ALLOW_MULTISITE', true);\n2. Visit the admin, and initiate the process to upgrade to multisite.\n3. Add the rest of the constants to wp-config.\nI haven't dived into it too deeply though \u2014 there may be another workaround. I'm tricking wp core install by skipping the entire block if WP_INSTALLING\n. > that does both, i.e. install a multisite network starting from an empty database.\nOr core install-network could be smart, and do one or the other.\n. Updated such that core install-network will be smart about not appending constants to wp-config if they already exist.\nHaving core install-network also install core is outside the scope of this PR, imo. I'm also not sold on making it a one step process.\n- [x] Fix behat in my local install.\n- [x] Write a behat test for this.\n. @scribu Can you task list the remaining work you'd like to see done on this? I'm not quite clear.\n. Added functional tests and #503 \n. Your assumed use-case is correct.\n. > If everything would be done in one go, it would be a lot easier to detect if MS constants are present, since wp-config.php would be already loaded (and wouldn't have The Incantation)\nWell, right. However, I'm not convinced adding wp core install --network is a great idea. For one thing, wp core install has different arguments than wp core install-network. So if you use --network, then more arguments are required? How do we articulate that in the synopsis? Etc.\nI'm now a proponent of simply adding --skip-config to wp core install-network. I'll mull on it a bit longer though.\n. Good suggestions. Updated.\n. I certainly like the idea of these and other convenience commands, but have a few concerns going forward:\n- They'll be implemented idiosyncratically by whomever submits the pull request.\n- There's no obvious start and stop to how we'll be accepting convenience commands.\n- (minor) They'll add bloat to our already bloated informational screens.\nLastly, nowhere in wp blog home is there mention that something is opening.\nWith all of those complaints in mind (yes, I haven't had my coffee yet), suggestions:\n- Create a wp open command for core or as a community command (see #424), and have wp open home-url, wp open admin-url, wp open term-link <term-id>\n- Add more detail in CONTRIBUTING.md about what commands we're looking for in core, and what live best in the community. This presupposes we know :)\n. Dig it.\n. Punting on this issue as I haven't seen any support issues in the last couple of years regarding not being able to search / replace on tables without primary keys. \n. This network vs multisite thing is a nightmare :(\n. What about some magic behind the scenes such that you could use wp search-replace --network and wp search-replace --multisite interchangeably?\nWe could then standardize on network, but the translation mechanism would handle backwards compat seamlessly.\n. Maybe this instead:\nwp cli config-set\nwp cli config-get\n. At this point, I'm going to call this wontfix. Editing a YML file is pretty easy.\n. This would be nice! I'd propose supporting positional arguments as well.\n. I'm feeling a little bit stronger that wp network-meta is the wrong way to go. It should be site-meta, as that's what the table is named in core. There isn't any naming prior art for network-meta, afaik\n. > I believe that just because Core wasn't able to convert from \"blog\" to \"site\" and from \"site\" to \"network\" in the big 3.0 merge isn't a good enough reason to perpetuate that confusing nomenclature in WP-CLI.\nOk, that's good enough justification for me.\n. Will do early next week\nOn Mon, Jun 17, 2013 at 2:39 AM, Cristi Burc\u0103 notifications@github.com\nwrote:\n\n@danielbachhuber Please give this a spin when you get the chance.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/525#issuecomment-19515687\n. > Let's make a deal: no more rebasing of branches. Instead, when a branch gets dirty, we just merge master into it and fix the conflicts.\n\nWorks for me. Hopefully this leads to smaller branches too, so there aren't a bunch of merge commits clogging the history :)\nI took a brief look at this. It seems like a good improvement, but I'm not yet sold on it as a great improvement.\nSome thoughts:\n- Does it properly handle large exports (e.g. 200MB+)? We had some object cache reset hack previously to avoid memory leaks that's been removed.\n- Seems much faster. Do we need the CLI progress indicators back?\n- I included the CLI arguments in the filename originally so you could easily create multiple export files on a single day without worrying about them overwriting each other. It would be nice to restore those.\n- Not sure how I feel about removing file_item_count and replacing it with splitting based on file size.\ncc @nb\n. >  we'd have to fork even more of the new export API.\nCan we instead ask Nikolay to include actions within the export API that achieve the end results we want? I haven't done a diff to see what we've changed, but my preference would be no forking at all.\n\nI don't think including the CLI arguments verbatim was a good idea to start. We could add their md5 hash though.\n\nCare to explain? Including them verbatim achieves two things:\n1. Tells me which export the file corresponds with.\n2. Prevents a second export from overwriting the first.\nAn md5 hash only achieves the second.\n. > It's not a good idea because the arguments can get really long and might contain unusual characters (for a file name).\nLet that become a problem when it becomes a problem. I was sanitizing the filename previously.\n. @dllh Couldn't you achieve this same result by specifying one or more post types you do want? Can you describe your use case in greater detail?\nDash format could be another option: wp export --post_type=-feedback\n. @dllh I've been thinking a bit more about the syntax we could use for negation (across the board). The leading candidate from core is post__not_in. This particular request would become post_type__not_in. I think we could add support across the board for <arg>__not_in and <arg>__in, which would be a useful shortcut.\nOpinions?\n. Landing this in #2047\n. Coincidentally enough, I ran into just this need the other day too.\n. I think changing the default behavior from exiting on failure to prompting on failure would cause breakage.\nI do find myself forgetting parameters from time to time though, and it would be nice if WP-CLI helped me with that.\nAnother idea for the mix: --interactive (or --prompt) for any subcommand will prompt you for all required and optional parameters.\n. Or possibly wp core config --regenerate-salt-keys\n@wojsmol What's your use case for doing this programmatically? Can't you just edit the wp-config.php file directly to reset the salt keys?\n. > So, if the option is still on the table to have something like ''wp config --regenerate-salts\" is still an option, I'd lke to put in a +1 for the functionality. They may have been edge cases, but that would have been a real time saver.\nSee https://github.com/wp-cli/ideas/issues/50. Formatting issue in php-cli-tools by splitting the column value into multiple rows. This will be in the next nightly, and released in the next release.\n. Holy whitespace batman. \n. wp, which used to give me at least the last several commands, now just provides arguments:\n\nSome pagination treatment here would work.\n. > PS: You might be interested in #548.\nYep, I saw. Slowly catching up and playing around with things.\n. Just so we're asking the obvious: Why do we need to specify a doc directory now that we have #548?\nI observe we'd be able to add:\n- Descriptions for each argument.\n- Examples of how to run each command.\nHowever, another option to consider: support argument descriptions + command examples in the PHPdoc for the subcommand.\nAdvantages:\n- Closer to the code.\n- Less moving parts (deprecate the only partially used man-src directory, and rely entirely on PHPdoc for documentation).\nDisadvantages:\n- Extra \"clutter\" in the PHPdoc.\n. I can, but it likely won't be for a week or two.\n. To @scribu for review.\n. > Wait, what's wrong with wp user update bob --user_pass=bobpass?\nHah, I didn't even think about that. I guess the problem is that it's not intuitive, although it works. Same thing applies I suppose to changing a user to super admin.\n... which leads into the whole conversation about ease of use vs. subcommands for everything. I'll open a new PR to fix wp user update\n. Ready for merge.\n. I just came across a use-case for this today, but a slightly different flavor.\nScenario: I never remember the parameters for wp core config, and trying to find them by running the command is always more confusing because it doesn't show the optional parameters:\nhmn-vagrant \u279c  wpremote-test  wp core config         \nParameter errors: \n missing --dbname parameter\n missing --dbuser parameter\nRather than having to update the synopsis with the parameters that support prompts, I would instead love to use:\nwp core config --prompt\nI'd then be launched into an interactive mode to set each parameter (required or optional) before the command was actually executed.\n. @jmslbam Any thoughts on a --prompt flag? I'd love to see it, and am happy to contribute some time to it.\n. This should be the responsibility of the importer, not WP-CLI.\n. I think --force is more descriptive over --yes. To be honest, the nature of --yes is still confusing to me, as a prompt will probably be Y/n, but not always.\n. > If the command asks for confirmation, you don't even need to implement the --yes flag. You can do:\n\nyes | wp db drop\n\nI don't ever want to think about doing that :(\n. Coming back to this, I think the distinction is useful \u2014 no need to unify --force and --yes.\n. @bvansomeren Feel free to open this issue again if you see it in the wild.\n. Going to loop back around to this as a part of #1784\n. Seems to do as expected however, in my initialization script, I first call wp core is-installed which throws all sorts of errors. Not sure how you feel about accommodating for that.\nA couple questions:\n- I assume the name multisite-install is temporary?\n- What do you think about making --admin_user a required parameter to discourage people from using admin?\nLastly, I'd classify this PR as \"works\". It seems like it has to hack around a lot of issues, and these hacks might cause problems in the future :(\n. > With 398bc1f you can call wp core install or wp core multisite-install multiple times on the same instance and it won't exit with an error code.\nIs this introducing new, unexpected behavior? Are there other commands we'll need to change (e.g. installing a plugin)?\nCould we instead introduce wp core is-installed --network? #503 \nRe: naming, I could've sworn we agreed upon \"network\" over \"multisite\"? This is the closest previous conversation I've found, although I feel like there was a different one.\nAnd, back to the original question of whether it makes sense to refactor core code, I'm fine with the overall approach. Importer / exporter are good parallels.\n. > I think we can have a more clear-cut guideline than previously by agreeing that \"multisite\" != \"network\": a multisite install can have multiple networks in it.\nI'll need to dive into all of the multisite / network commands to have a more qualified opinion then. Every single multisite setup I've done is a single network \u2014 and I suspect this is 99% of use-cases. As such, I don't easily distinguish between the two and use them interchangeably.\n. Grab bag of pieces to finish up:\n- [x] wp package browse should list all available packages in http://wp-cli.org/package-index/\n- [x] wp package install should install a package using Composer.\n- [x] ::is_community_package should check whether a given Composer package has wp-cli listed as a dependency.\n- [ ] Functional tests for all subcommands.\n- [x] Should be able to use wp package without a WP install.\n. Another for the hit list:\n- [ ] wp package update and wp package update-all should update one and many packages, respectively.\n@scribu Should installing a package also handle any dependencies for the package? How far down the rabbit hole do we want to go?\n. wp package install is functional.\nI decided against calling exec() on the Composer binary for a couple of reasons:\n- Seems ugly and sad.\n- We've already deviated some from strict Composer ethos (e.g. we have wp package uninstall, our output formatting is different than Composer, etc.), and I'd rather follow WP-CLI-isms instead of melding in Composer-isms.\nWith that being said, being able to leverage the Composer PHP library in the background is quite nice. We get a fair amount for free, like support for multiple installation mechanisms.\nAnother task still needing to be done:\n- [ ] Install a package's dependencies, and remove them on uninstall.\n@scribu Can you give this a bang and checklist any other tasks you'd like to see completed before MVP? The last open piece in my head is how we handle Composer's --dev flag vs. being able to install specific versions of a community package. Oh, and whether we're calling these \"community packages\", \"community commands\", or something else.\n. > The following series of steps fails:\n\n$ wp package install pixline/wp-cli-theme-test-command\nSuccess: Package installed.\n$ wp package list\nError: There aren't any WP-CLI community commands installed.\n\nTracked this down. I was previously working with my Git clone (not using the suggested installer), and didn't have a lock file. WP-CLI ends up with a composer.lock file using the suggested installer, which means the Installer class fails without any useful feedback.\nUnfortunately, it looks as though you need to set the installer to update all packages as well in order to override the behavior. I've added support for this until we determine whether it's good or bad behavior: 65cc02c\nIt may be we want to add community packages to ~/.wp-cli/vendor instead of ~/.wp-cli/vendor/wp-cli/wp-cli/vendor\n. > I always assumed ~/.wp-cli/vendor would be the destination.\nWhy? It would mean we'd need to add the following to ~/.wp-cli/composer.json:\n\"repositories\": [\n        {\n            \"type\": \"composer\",\n            \"url\": \"http://wp-cli.org/package-index/\"\n        }\n    ],\nIt also departs from our current pattern of installing WP-CLI-associated packages in ~/.wp-cli/vendor/wp-cli/wp-cli/vendor (e.g. php-cli-tools and behat)\n. > As far as I know, not really possible to change this with Composer until the new autoloading stuff gets sorted out with the FIG.\nCan you clarify? I can get Composer to install to ~/.wp-cli/vendor but autoloading doesn't seem to work...\n. > Will likely need to move that logic out of \\WP_CLI\\Utils\\load_dependencies().\nI see what you're talking about now :) How would you prefer this be done?\nEdit: Because WP-CLI is already loading php-cli-tools, this isn't just a matter of requiring both autoloader.php files.\n2nd Edit: Nevermind..\n. I'm assuming I need to move all of the require and require-dev from ~/.wp-cli/vendor/wp-cli/wp-cli/composer.json to ~/.wp-cli/composer.json? Installing dependencies recursively seems to be a bit of a faff.\n. :) Getting somewhere at least. Hopefully it's where we want to go. I'll have some time on Sunday to work on this.\n. @scribu good for review / merge\n. I too have wanted this in the past:\n\nI would love a command that could display which sites in a multi site installation is using a particular plugin.\n\nI like @scribu's suggested implementation. Seems like you could use it for getting themes, changing options, adding users to sites, etc.\n. > composer update in the root no longer installed the \"composer/composer\" requirement declared in ~/.wp-cli/vendor/wp-cli/wp-cli/composer.json\nHowever, it works fine to install Composer when I run it from ~/.wp-cli/vendor/wp-cli/wp-cli/. And it ends up installing php-cli-tools a second time.\n. Did you run into the scenario where php-cli-tools is installed in both vendor directories? And how did you reconcile load order dependencies? e.g. any community package will need to be loaded after wp-cli, but loading wp-cli instantiates the entire load process.\n. @scribu can you review and merge?\n. Nm, build fails which means I need to finish fixing Behat in my local VM and figure out what the issue is. I'm going to make a couple more improvements then too.\n. I can't remember what my other improvements were going to be :(\nGood for merge.\n. > it's more useful in general to show a prompt than to throw an error, like \"--password needs a value\"\nExcept, of course, when your WP-CLI command is a part of a larger script, and showing a prompt hangs the larger script.\nI think --prompt should always be an explicit choice.\n. I can't reproduce either: https://gist.github.com/danielbachhuber/683a302557a7cd558e82\n@madhippie it would be good to have any exact steps to reproduce when you have a moment, or more details about other plugins you're running, etc.\n. @madhippie any luck tracking down more details here?\n. Seems like this issue has resolved itself\n. exit; for WP_CLI::error() is a pretty well-established paradigm for now.\n. > I don't understand the search=$key syntax. Could you post a complete usage example?\nI think I'd drop the search=$key syntax. This workflow seems fine:\n1. wp plugin search <search-term>\n2. User sees a slug for a plugin to install / activate.\n3. wp plugin install <plugin-slug> --activate\n. Apparently this is a feature, not a bug.\n@scribu Can we change the behavior to be \"Success: No change made to option\" or similar? The error is killing our bash script, and I don't think that's the right behavior here.\n. I think we'll pass on this for now. We can consider it again in the future if someone puts together a community command for it.\n. Yes please! Better yet \u2014 run git fetch --tags; git checkout <tag> for me ;)\n. At this point, I think the current behavior is fine as it is.\n. Coincidentally enough, I've been meaning to open a discussion on the same exact topic.\nWe have the same need for https://github.com/humanmade/wp-cli-remote-command, which currently has commands like:\n- wp remote site-list\n- wp remote plugin-install\n- wp remote theme-activate\nI don't have a good technical recommendation on how to achieve this. The primary value in my mind is usability.\nOn a similar note, it would be nice to be able to manually sort the order of appearance for subcommands, instead of alphabetical.\n. Functional prototype time!\n\nI've changed the internals of find_command_to_run(), and subsequently find_command(), such that WP-CLI traverses up the branch of a perceived command tree, instead of down the branch.\nWith a command like wp remote option get blogname, WP-CLI will look for commands named:\n1. wp remote option get blogname\n2. wp remote option get\n3. wp remote option\n4. wp remote\nAs far as I can tell (and what the tests can tell me), this doesn't break the internals.\nThere's one side effect though: If none of those commands are registered, then our error reporting gets a little wonky (strongly related to #782). I can't think of a good way to detect whether your mistyped command correlates with a top-level command, second-level command, third-level command, etc., so I changed the behavior to this for now:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp apples\nError: 'apples' is not a registered wp command. See 'wp help'.\nsalty-wordpress \u279c  wordpress-trunk.dev  wp remote apples\nError: 'remote apples' is not a registered wp command. See 'wp help'.\nsalty-wordpress \u279c  wordpress-trunk.dev  wp remote apples banana\nError: 'remote apples banana' is not a registered wp command. See 'wp help'.\nOpen questions:\n- If I have CompositeCommand wp option, should I be able to register CompositeCommand wp option get?\n- Similarly, if I have CompositeCommand wp remote option, should someone should be able to register CompositeCommand wp remote?\n- Do we want to support fifth- and sixth-level commands?\n- If I do wp remote and there's no command registered at that level, should it list registered commands the next level down? How should our usage indicators change with multi-level command support?\n. > So, if I pass a thousand IDs to wp post delete, it will do 1002 command lookups?\nYeah. Other ideas?\n. Just wanted to update that this is on my radar again. I'd like for it to go out when the package command goes out, as they compliment each other nicely.\n. > Actually, since we assign the defaults to a variable, I don't see much benefit in using wp_parse_args(), since array_merge() does the job just fine.\nAgree, particularly because we don't need to accept a string of arguments.\n. Related: https://github.com/wp-cli/wp-cli/pull/805#issuecomment-29087312\n. This will land in #2064\n. What's the use case for wp comment exists? I'm scratching my head trying to figure out why it was included.\nBecause we haven't release it yet, could we replace it with wp comment get?\n. Cool. Apologies if I missed the use case in the description the first time. What you've described makes sense.\n. Oooh, right.\nI think that, if it's required in the synopsis by the command, WP-CLI should exit with error if missing.\n. 0a559d1 \"works\", although I'm not sure how I feel about it because it seems like a one-off hack.\nConceivably, a developer may also want to make --user required, or have access to the value of --debug or --color\n. > Correct me if I'm wrong, but I think the argument is getting lost here as it is reserved for other actions.\n--url is never assigned as an $assoc_arg\n. I think you're working on the wrong part of the stack though. The change you've committed breaks far more tests than what I've committed does.\nInstead, I think the scope of the change should just be to validate any of the runtime args if one or more runtime args are included in the synopsis. 0a559d1 part of the way there because it's including --url in the $assoc_arg array. However, I believe the more proper approach is to run $parser->validate_assoc(); or an equivalent against $runtime_config / the runner's $config.\n. @michaelryanmcneill Were you ever able to track down the cause of this?\n. @scribu what's going on here?\n. > I was thinking more like --post_ids=1,6,43.\nEven better: --post__in=1,6,43, --post_type=post, or any other WP_Query field.\n. Or, to avoid reinventing the wheel, we could do:\nwp comment generate --post__in=$(wp post list --post_type=post --format=ids) --comments=3\nAnother thing: it would be really neat to find a reliable source of lorem ipsum text for this and all other generate commands.\nRelated #389\n. @ryanduff @Japh did this get anywhere we can finish it up?\n. I'm open to a text generator, although I don't want to be dependent on an external service.\n. I've added a very basic wp comment generate in #1819. Some of the enhancements in this thread seem like they'd be nice.\n. Basic command seems to be working well for now.\n. > That would imply supporting short flags.\nHow do you feel about that?\n. Ok. Let's let this sit for a bit then. Might be wontfix.\n. wontfix\n. POC is complete. Here's some example usage:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post delete $(wp post list --post_type=page --format=ids)\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post list --post_type=page                               \n+----+------------+-----------+-----------+-------------+\n| ID | post_title | post_name | post_date | post_status |\n+----+------------+-----------+-----------+-------------+\n+----+------------+-----------+-----------+-------------+\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post generate --prompt    \n1/6 [--count=<number>]: 2\n2/6 [--post_type=<type>]: page\n3/6 [--post_status=<status>]: draft\n4/6 [--post_author=<login>]: \n5/6 [--post_date=<yyyy-mm-dd>]: \n6/6 [--max_depth=<number>]: \nGenerating posts  100%[==================================================================================================================================================================================================] 0:00 / 0:00\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post list --post_type=page\n+------+------------+-----------+---------------------+-------------+\n| ID   | post_title | post_name | post_date           | post_status |\n+------+------------+-----------+---------------------+-------------+\n| 1011 | Page 3     | post-3    | 2013-08-19 22:54:51 | draft       |\n| 1012 | Page 4     | post-4    | 2013-08-19 22:54:51 | draft       |\n+------+------------+-----------+---------------------+-------------+\nIt doesn't handle all argument types, and there may be some bugs. But it better communicates the direction I think this should head.\n@scribu @jmslbam @mpeshev thoughts?\n. One thing I haven't implemented here that would be nice to have: auto-fill prompts with any existing values.\nFor instance, this:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post generate --prompt --count=2\nwould produce:\n1/6 [--count=<number>]: 2\nThe user could change the value, or simply press enter.\n. Optional parameters are already addressed \u2014 simply leave the prompt empty. I think flags will be addressable in some manner too.\nI'm most concerned about these bad boys:\n- <id>...\n- [--<field>=<value>]\nLet's let it sit for a few days.\n. Re: edge cases, it would be good to have a set of commands to test against. Here are my suggestions:\n- wp cap add <role> <cap>...\n- wp comment create --<field>=<value> [--porcelain]\n- wp core config --dbname=<name> --dbuser=<user> [--dbpass=<password>] [--dbhost=<host>] [--dbprefix=<prefix>] [--locale=<locale>] [--extra-php]\n- wp export (which currently doesn't work with --prompt)\n- wp import <file> --authors=<authors> [--skip=<data-type>]\n- wp media import <file>... [--post_id=<id>] [--title=<title>] [--caption=<caption>] [--alt=<text>] [--desc=<description>] [--featured_image]\n- wp plugin install <plugin|zip|url> [--version=<version>] [--force] [--activate]\n- wp scaffold post-type <slug> [--label=<label>] [--textdomain=<textdomain>] [--theme] [--plugin=<plugin>] [--raw]\n- wp search-replace <old> <new> [<table>...] [--skip-columns=<columns>] [--dry-run] [--network]\n- wp user delete <user>... [--reassign=<id>]\n- wp user create <user-login> <user-email> [--role=<role>] [--user_pass=<password>] [--user_registered=<yyyy-mm-dd>] [--display_name=<name>] [--porcelain]\nAny you would add?\nOn a relate note, boy was it enlightening to skim through all commands. So much room for improvement :)\n. Pretty happy where this is at now as a first pass.\nSome examples:\n```\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post list --prompt\n1/3 [--: post_type\n     =]: post\n    [--: post_status \n     =]: publish\n    [--: \n2/3 --fields=: \n3/3 --format=: \n+----+------------+-----------+---------------------+-------------+\n| ID | post_title | post_name | post_date           | post_status |\n+----+------------+-----------+---------------------+-------------+\n| 1  | Post 0     | post-0    | 2013-08-25 18:48:15 | publish     |\n| 2  | Post 1     | post-1    | 2013-08-25 18:48:15 | publish     |\n| 3  | Post 2     | post-2    | 2013-08-25 18:48:15 | publish     |\n| 4  | Post 3     | post-3    | 2013-08-25 18:48:15 | publish     |\n| 5  | Post 4     | post-4    | 2013-08-25 18:48:15 | publish     |\n+----+------------+-----------+---------------------+-------------+\nsalty-wordpress \u279c  wordpress-trunk.dev  wp export --prompt                                    \n1/11 [--dir=]: \n2/11 [--start_date=]: today\n3/11 [--end_date=]: \n4/11 [--post_type=]: post\n5/11 [--post_status=]: publish\n6/11 [--post__in=]: \n7/11 [--author=]: \n8/11 [--category=]: \n9/11 [--skip_comments] (Y/n): Y\n10/11 [--file_item_count=]: 2\n11/11 [--verbose] (Y/n): Y\nStarting export process...\nExporting with export_wp with arguments: array (\n  'post_type' => 'post',\n  'post__in' => false,\n  'author' => false,\n  'category' => false,\n  'start_date' => '2013-08-25',\n  'end_date' => false,\n  'status' => 'publish',\n  'skip_comments' => true,\n  'file_item_count' => '2',\n)\nExporting 5 items to be broken into 3 files\nExporting 0 cateogries\nExporting 0 tags\nExporting 0 terms\nWriting to file /srv/www/wordpress-trunk.dev/wp.wordpress.2013-08-25.post_type-post.start_date-2013-08-25.status-publish.skip_comments-1.file_item_count-2.001.xml\nWriting to file /srv/www/wordpress-trunk.dev/wp.wordpress.2013-08-25.post_type-post.start_date-2013-08-25.status-publish.skip_comments-1.file_item_count-2.002.xml\nWriting to file /srv/www/wordpress-trunk.dev/wp.wordpress.2013-08-25.post_type-post.start_date-2013-08-25.status-publish.skip_comments-1.file_item_count-2.003.xml\nSuccess: All done with export\n```\n@scribu #reviewmerge?\n. Eh, I'm not too keen on requiring the user to remember CTRL + D either. I agree that the current implementation isn't great though. Any other suggestions?\n. At least on my keyboard, this is what happens with CTRL + D now:\nsalty-wordpress \u279c  vocativ.dev  wp post list --prompt\n1/3 [--<field>: post_type\n     =<value>]: post\n    [--<field>: 2/3 [--fields=<fields>]: 3/3 [--format=<format>]: +-------+--------------------------------+--------------------------------+---------------------+-------------+\n| ID    | post_title                     | post_name                      | post_date           | post_status |\n+-------+--------------------------------+--------------------------------+---------------------+-------------+\n| 13226 | This is an even cooler article | this-is-an-even-cooler-article | 2013-08-25 17:00:42 | publish     |\n| 13123 | Testing my new diving post     | testing-my-new-diving-post     | 2013-08-14 18:39:40 | publish     |\n| 1     | Hello world!                   | hello-world                    | 2013-08-09 16:13:28 | publish     |\n+-------+--------------------------------+--------------------------------+---------------------+-------------+\nSo, not that great. But I say we solve this later.\n. Thanks @navitronic !\n. I like the idea of wp db update --network. We can incorporate it into the next release.\n. I'd suggest wontfix for this. Now that we have install <plugin-slug>..., it's more straightforward to read the list of plugins from some source.\n. I'm working on something similar for our Salty WordPress project: https://github.com/humanmade/WP-CLI-Salty-Command/pull/1 However, I'm essentially hardcoding all of the setup commands. I'd much rather use an abstracted approach like this, and am happy to contribute some time towards it.\nPreviously, I took a swing at state management in WordPress with this project: https://github.com/humanmade/dictator The end result is a .yml file with some of the options stored in the database. You can then apply the .yml file to a site. The idea is to track the state of a WordPress site in a version-controlled file, show a diff when the state is being applied, etc. It works for a limited set of options.\nI'm not terribly happy with either of my attempts though. They seem hacky, full of code to handle edge-cases, and likely the source of more problems than they solve. One particular pain point is how you draw the line between managing options vs. content. What happens when some plugin stores options in a CPT? etc.\nI'd love to see it as simple as a project.yml file you could package in the web root that would communicate:\n- Site name\n- Active theme\n- Active plugins\n- Users that should exist\n- Declared site options\nPlus, support for an array of sites if the project is multisite.\n. Landed in #1008\n. - [ ] This should have some tests too.\n. @lordspace Can you open a new ticket please, and include more details? The Spyc class is no longer included at that path, so it seems your Autoload is out of date.\n. @scribu thoughts?\n. To complete this PR, it would be great to:\n- [x] Update the subcommand's @synopsis to include this new argument.\n- [x] Include functional tests for the argument.\nHowever, I'm not 100% sold on this being the best way to address the situation. We currently have the --extra-php argument as a more generic way to pass arbitrary PHP defines, etc. Maybe we need a --replace-php argument for replacing PHP in the wp-config.php template.\nOr, we could support a --define argument which would accept a key-value pair for constant definition (defining constants if they don't yet exist, or replacing existing definitions if they do).\n. I think Nikolay intended for --keys-and-salts to work the same as --skip-salts. The PR as it exists doesn't accept arbitrary input.\nMy objection is that --keys-and-salts becomes another one-off argument. All of the arguments passed to wp core config are used for modifying the config template. We need better abstraction.\n. I don't think this is the right direction. My vision is that --prompt can be used globally, without modification to any subcommands, by using the arguments declared in the synopsis.\n. I'm going take a swing at creating a POC for the issue I created.\n. @scribu Per your question, the use case was to require a custom command. Yes, I'm aware it could / should be done with Composer instead. Composer is proving to be awfully slow though when I want to update on each provision.\nWould you like me to include #520 in this PR as well?\n. @scribu how do you feel about merging this? I keep thinking it would be more and more useful.\nUse case: I want to make WP-CLI calls on Salt master to my one-WP-project-per minions. I'd prefer not to specify the --path= each time. Instead, I'd like to make ~/.wp-cli/wp-cli.yml file.managed in my configuration. \n. > So, I'm going to check WP_CLI_CONFIG_PATH environment variable (empty by default).\nAre you going to finish this PR then? I don't mind, but I'd like to have it done before proceeding with community packages?\nAlso, it's not clear from your description where the default config.yml will be located. Keep in mind we need it to require the community packages. If the environment variable is empty, will it look in a default location?\n\nAlso, I'm going to remove the --config global parameter, which becomes redundant and had a rather confusing behavior anyway.\n\nCan we offer backwards compat then? I have a number of projects which, for the sake of convenience and having code in version control, use the --config argument.\n. > You should be able to replace this [...] with this [...]\nSure, if I still maintained those projects. I think we need to offer backwards compat, as doing so should be trivial and this is substantial breaking change otherwise.\n. Hopefully not too off-topic, but how should the wp-cli-packages directory be determined for Phar?\n. @scribu cool with you?\n. @scribu #reviewmerge?\n. I branched from the other feature branch because I wanted to use the util command.\nOn Tue, Aug 20, 2013 at 4:44 AM, Cristi Burc\u0103 notifications@github.com\nwrote:\n\nWhy does this PR have an \"Implement wp theme get\" commit?\nYou can remove it by using git rebase -i master.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/701#issuecomment-22939220\n. Ready to go.\n. @scribu review / merge?\n. @scribu review / merge?\n. > Build fails.\n\nUpdated.\n\nAlso, it would be nice to reduce the number of calls to wp theme install.\n\nWhat would you suggest instead? Given a WP install with the p2 theme ?\n. Those would be nice enhancements in the future. The caching seems like the bulk of the work, and I'd rather let #619 do that behind the scenes.\n. > do you know the answer to #706 (comment) ?\nNot immediately off the top of my head, no.\n. Ready for merge\n. I don't think the breaking changes are the right way to go about this for a couple of reasons:\n- All of the other wp db commands operate globally.\n- It's a pretty nasty breaking change to learn your db backup script stopped backup in the entire database.\nWhat if we instead improved wp export (and wp import) to support more formats, including site tables, all tables for a network, and all tables for multisite instance?\n. > Thoughts?\nIf you want to work on subsite -> single-site, etc. database migrations, pull requests are welcome. This issue is for a separate enhancement: exporting a database with replaced values.\n. @johnbillion what do you think about using Utils\\format_items() here?\n. Because of the nature of the discussion in the core ticket, we'll punt on this for now. I'm open to considering it in the future if there's a perceived simple consensus for Nginx.\n. @johnbillion interest in taking a stab at this? would be cool to ship alongside 4.0\n. This has since shipped.\n. Update the PHPdoc with those examples :)\nOn Wed, Aug 21, 2013 at 5:32 AM, Cristi Burc\u0103 notifications@github.com\nwrote:\n\nNot to mention that there's a built-in sort command:\n$ wp cap list bbp_moderator | grep 'topic_tags' | sort\nassign_topic_tags\ndelete_topic_tags\nedit_topic_tags\nmanage_topic_tags\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/715#issuecomment-23013549\n. Gorgeous! I want wp plugin install debug-bar bbpress (and friends) too :)\n\nShould --version be applied when multiple plugins are specified though?\n. > So, @getsource was right after all. update --all makes more sense than update-all.\nExcept this:\nsalty-wordpress \u279c  wpremote-test.dev  wp plugin update --all\nusage: wp plugin update <plugin>... [--version=<version>] [--all] [--dry-run]\nNew issue?\nFor future reference, original implementation was #180 \n. A riff off the first method, and similar to wp_set_object_terms(): wp post set-terms <post-id> <term>... --taxonomy=<taxonomy>\n. Synopsis parser might need to be updated too:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp comment create\nWarning: The `wp comment create` command has an invalid synopsis part: --comment_post_ID=<post-id>\n. Actually, for wp ... update, I think --<field>=<value> makes sense because at least one field should be updated.\nAt this point, only wp comment create needed to be fixed.\n. Thanks for the pull request, Taylor.\nIdeally, I'd like to see the synopsis turn into something like this:\n[--<taxonomy>=<term-id>]\nThis way, we can deprecate the --category argument entirely.\n. @scribu pretty happy with this now and looking for feedback\n. > It makes the synopsis too long\nMaybe [--<field>=<value>] is better suited then.\n\nit's pretty easy to change those values afterwards.\n\nYeah, but also partially defeats the purpose of a scaffolding command :) If I wanted to copy, paste, and replace, I can do that without WP-CLI.\n. @scribu #reviewmerge?\n. @scribu #reviewmerge\n. We now have --skip-plugins=simple-ip-ban: wp plugin status --user=admin --skip-plugins=simple-ip-ban\n. I think what really should happen is these two core filters should receive the new user data as well. It doesn't solve the immediate problem though, and who knows how long it would take to get that suggestion accepted.\n. Meh, I'm going with user_contactmethods instead. It solves my immediate problem.\n. Still need to resolve a few things:\n- [ ] Should the subcommand support importing HTML5 video and audio tags?\n- [ ] Should the subcommand support sideloading media assets in other fields?\n- [ ] Don't import the media asset again if it already exists as an attachment within WordPress.\n- [ ] Functional tests.\n. @scribu What else would you like on this PR? I'd like to punt on support for other media until it becomes something someone actually wants, and those functions apparently never made it to core.\n. Makes sense: https://github.com/danielbachhuber/wp-cli-media-sideload-command\n. And offer backwards compat for all of the community commands that use @synopsis?\n. @mpeshev heh, I take it you've run into this before :)\n. @scribu good to go\n. Sorry, I'm not sure I follow how top-level commands would be affected with a couple of assumptions:\n1. Error message is smart enough to recognize when you're trying to call a top-level command vs. a subcommand.\n2. If you try to call a top-level command and mistype, wp help is still a valid suggestion. The change would only apply to called subcommands.\n. Seems reasonable enough! I think it's only tangentially related to #751, as that PR largely deals with embedded images that don't exist as attachments.\n. Related #730\n. wp core config supports --skip-check since #1068, which will skip the check on whether the database is available.\n. Hi @joeauty,\nYou can run import or export against a particular site on a network with the --url configuration declaration.\nExample: wp --url=subsite.domain.com export\nMore info: http://wp-cli.org/config/\n. @scribu #reviewmerge\n. @scribu --format=<format> is good to go now, although you might want to take a peek at the tricky business I'm doing with the JSON format. Essentially, I'm avoiding output like this:\n[{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null},{\"meta_key\":null,\"meta_value\":null}]\n. Relevant conversation: http://wpapiteam.wordpress.com/2014/05/12/handling-post-meta/\n. > The compact JSON format is ambiguous: you can't tell if a key has multiple values, or a single value that happens to be an array.\nAs it turns out, suffers the same problem. b4b8a73 produces:\nSuccess: Added custom field.\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post meta add 1 apple banana2\nSuccess: Added custom field.\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post meta list 1\narray (\n  '_edit_last' =>\n  array (\n    0 => '1002',\n  ),\n  '_edit_lock' =>\n  array (\n    0 => '1403204343:1002',\n  ),\n  'apple' =>\n  array (\n    0 => 'banana1',\n    1 => 'banana2',\n  ),\n)\nNote the apple key doesn't persist the meta ID in the object cache, so there's no way (from get_metadata()) to distinguish whether that's one meta row or two.\n. According to @nacin, core doesn't care that get_metadata() is lossy. We should mirror core's behavior.\n. Shipped #1251 \n. @scribu would it be worthwhile to reduce the duplication of show_single_field(), show_multiple_fields(), and find_field()? Methods on WP_CLI_Command, or Utils?\n. Interesting question:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp theme get p2 --field=name --format=json\nP2\nShould that give me JSON instead? I suspect so.\n. - [x] wp term get should support --field=<field>\n- [x] wp term list should support --field=<field>\n. This is ready for merge\n. Yeah, I guess \"Akismet\" is technically correct. Two shakes.\n. 22809e0 and 6a3ec70\n. The question then becomes: which is the appropriate column header, post_title or title?\ne.g.\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post list --fields=title\n+-----------------+\n| post_title      |\n+-----------------+\n| This is a post! |\n+-----------------+\nI'd argue the former at this point, as the latter implies WP data can be represented in two formats interchangeably. wp post list --fields=title would just be a shortcut for wp post list --fields=post_title\n. Fixed in php-cli-tools. This will be in the next nightly, and released in the next release.\n. I get this now:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp core install --prompt\nError: Parameter errors:\n missing --url parameter\n missing --title parameter\n missing --admin_user parameter\n missing --admin_password parameter\n missing --admin_email parameter\nSeems prompting is gone altogether :(\n. The second bug is caused by https://github.com/wp-cli/wp-cli/commit/19fb920fbae11001f120957420c3626029a5a186#diff-d5c3b8c65ee5ccc5dd15286817c05a2cR374. Because --prompt isn't something that can be specified in config.yml, it gets dropped altogether in merge_config()\n. There's actually not an easy way to support prompting for runtime arguments for the following reasons:\n- Prompting should be a seamless experience for runtime arguments & subcommand arguments.\n- The subcommand arguments (which may include a runtime argument) aren't known until the subcommand is loaded.\n- WP-CLI doesn't know which subcommand to load until it's completed init_config(), which sets and uses the runtime arguments.\nHowever in the case of wp core install, which may be the only subcommand that uses a global config, the url value is set by wp_guess_url(). 93cb822, while ugly, does the trick just fine.\nOpen to alternatives.\n. Happy to add tests. Can I take that as you're fine with the approach generally?\n. @scribu Ready to go... although I noticed another command that uses a runtime arg: wp core download --path=<path>. This PR doesn't solve it, and that we have a second instance tells me we need an abstracted approach for resetting runtime args via prompt. I think we should go with this PR as it exists though, because it fixes prompting which is currently broken.\n\nIt's a little awkward to test interactive commands, but it's doable \n\nWasn't too bad :)\n. @scribu good to go\n. Dug into this a little further.\nImmediate cause of the problem: $wp_rewrite->set_tag_base() doesn't properly reset $wp_rewrite->extra_permastructs['post_tag']['struct']\nBigger problem: $wp_rewrite->extra_permastructs['post_tag']['struct'] doesn't exist because $wp_rewrite->permalink_structure is initially empty, and that means the array isn't set. I guess core assumes rewrites will always be flushed on the second load.\n. fb49702ca94dcfc5972ec62b1875ab351be82a4e is an attempt to re-register the rewrites, but I think it's a fundamentally flawed approach because it doesn't account for other taxonomies, post types, etc.\nInstead, I think flush_rewrite_rules() should be removed from wp rewrite structure\n. > Instead, I think flush_rewrite_rules() should be removed from wp rewrite structure\n@scribu Opinions on this?\n. Correct. Currently, (from what I remember) it works inconsistently \u2013 permalink is set properly, but then rewrite rules for tag and category are generated incorrectly.\n. That's a good idea :) I'll take a poke and see if it fixes.\n. @scribu Can I help you finish this up? Third time I've run into needing this now.\n. @scribu #reviewmerge. I'm not sure what you mean by --network=<id> though, as super admins are global.\n. Updated per comments about Behat formatting.\n. Updated again.\n. > Apologies for the fdc9689 separate commit... is there a better way I could have done that?\nMerge commits are fine :)\n. Another option: we could rename wp plugin search to wp plugin directory [--search=<query] [--favorites=<username>]\n. A community command now exists for listing favorite plugins https://github.com/mikedance/wp-cli-favorite-plugins\n. Closing in favor of #836\n. What's the use case?\n. I'd like to get #642 sorted in relatively short order (or at least see if its possible), so let's make that a requirement.\n. @johnbillion up for getting this into the next release?\n. Sorry for the hell that I've caused :(\n. I'm the one who decided to store Edit Flow options as objects ;)\n. This hasn't come up again in quite a while. We can punt.\n. I got some errors today that could be related:\nsalty-wordpress \u279c  vocativ.dev  wp core download --path=wordpress\nCreating directory /srv/www/vocativ.dev/wordpress/\nDownloading latest WordPress (en_US)...\nPHP Warning:  rename(): The first argument to copy() function cannot be a directory in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 114\nPHP Warning:  rename(/tmp/wp_5277ecaf6c502/wordpress/wp-includes,/srv/www/vocativ.dev/wordpress//wp-includes): Invalid cross-device link in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 114\nPHP Warning:  rename(): The first argument to copy() function cannot be a directory in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 114\nPHP Warning:  rename(/tmp/wp_5277ecaf6c502/wordpress/wp-content,/srv/www/vocativ.dev/wordpress//wp-content): Invalid cross-device link in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 114\nPHP Warning:  rename(): The first argument to copy() function cannot be a directory in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 114\nPHP Warning:  rename(/tmp/wp_5277ecaf6c502/wordpress/wp-admin,/srv/www/vocativ.dev/wordpress//wp-admin): Invalid cross-device link in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 114\nPHP Warning:  rmdir(/tmp/wp_5277ecaf6c502/wordpress): Directory not empty in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 116\nPHP Warning:  rmdir(/tmp/wp_5277ecaf6c502): Directory not empty in /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli/php/commands/core.php on line 92\nSuccess: WordPress downloaded.\nIt seems to have installed correctly however.\n. Yeah, I experienced the issue preparing #856. As it turns out, WP wasn't installed correctly \u2014 any / all subdirectories were missing.\n. I looked into this at one point maybe a year ago. From what I remember, HTTP_HOST needs to be set properly for WordPress to load the proper site context. If passed a blog-id, WP-CLI would need to do a lookup against a domain mapping table in order to properly set HTTP_HOST\n. In addition to blog ID, it would be nice to be able to use the blog slug.\n\nI wonder if some type of wrapper could be used.\n\nWe could use WP_CLI::launch_self(), or some variation as the initial request would need to be made against a valid URL. Not totally sure about how I feel on this though.\n. @Viper007Bond Just to follow up, what you want is easy to do with a nested bash command:\nsalty-wordpress \u279c  wp-ms.dev  wp --url=$(wp site url 2) option get blogname\nArchived Site\n. @scribu #reviewmerge\n. Added in #1528\n. Why not define WP_SITEURL in your wp-config? I'm curious how the web-based installer handles setting home when WP is installed in a subdirectory...\n. Related: https://core.trac.wordpress.org/ticket/27287\nInitial site creation for me I think is solved by setting WP_SITEURL, which is referenced in wp_guess_url(), which is used in wp_install_blog()\nAdditional site creation is handled by this lovely filter:\n```\n/\n * When installing a new site, make sure siteurl has '/wp'\n \n * @see https://core.trac.wordpress.org/ticket/27287\n /\nadd_filter( 'pre_update_option_siteurl', function( $url ) {\nif ( ! defined( 'WP_INSTALLING' ) || ! WP_INSTALLING ) {\n    return $url;\n}\n\nif ( '/wp' === substr( $url, -3 ) ) {\n    return $url;\n}\n\nreturn $url . '/wp';\n\n});\n```\n. @scribu This be good.\n. @mjangda Pull requests welcome :)\n. @nb What's the news on the new exporter? Worth incorporating into WP-CLI now?\n. Exporter still has this problem: https://github.com/wp-cli/wp-cli/blob/master/php/export/class-wp-export-query.php#L221\n. At this point, we're not making any changes to the exporter that would further fork it from what's in core. We need to see the core ticket to some form of resolution.\n. Functional, but I'm getting odd behavior like:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp plugin list --status=active\n+-------+----------+--------+---------+\n| name  | status   | update | version |\n+-------+----------+--------+---------+\n| hello | inactive | none   | 1.6     |\n+-------+----------+--------+---------+\nIt appears to just be the Hello Dolly plugin and, oddly, WP-CLI only chokes on foreach( $it as $key => $item ) when --status=active is passed. Any ideas?\n. c90a324\n. @scribu thoughts on this?\n. @scribu what's the best way to replicate this locally?\n. > I guess this is true for third-party commands, too?\nShouldn't be a problem for any commands loaded by WP-CLI using --require. Can you share the command you're using to invoke WP-CLI, and code associated with the command you're trying to load?\n. @montchr Can you confirm your --url argument is set properly? If it's set to the old domain and not the new one, WP-CLI will die silently because there's no blog at the HTTP_HOST specified.\n. > I actually found that the exact opposite was the case \u2013 WP-CLI died silently when setting the --url argument to the new domain. When I set it to the old domain, things worked out fine. Why might that have happened?\nHard to say without having access to the setup, but I suspect that WordPress still thought it was at the old domain.\n. @scribu Ready to go.\n. > Oh, wait, I thought you were referring to the global --user= argument.\nNope, but I guess that could benefit too.\n. @scribu Do you want support for email address with --user= in this too, or what are you thinking here?\n. @scribu ready to go\n. I was going to say \"This would be a great community command!\" but I think it might be useful-enough to package with WP-CLI core. I was also hoping you had solved actually parsing the PHPdoc, instead of using getDocComment raw ;)\n. @mboynes I think this is best as a community package for now \u2013 good place to iterate and sort out the quirks.\n. #1379 is going to run into this same problem.\nI think numbers as term names is uncommon enough that we could default to casting as int, and have a --term-number-as-string flag to change the behavior. \n. At this point, I'm not going to make any changes to the exporter that would further fork it from what's in core.\nEventually, when the REST API endpoints have landed in core, I can see the exporter supporting the same query arguments you might pass to REST API endpoints.\n. @jmslbam I think scaffolding could be one of those things that should get traction as a community command. For instance, I'd love more advanced theme scaffolding. It would make sense to iterate outside of WP-CLI core, and then incorporate the best of into core.\n. Needs a refresh. @westonruter If you want to pass it off, I could spend some time with it and see where I get.\n. Closing in favor of #2254\n. > don't need Composer anymore\nI thought we'll be including the Composer PHP lib for the package command. Why are you trying to remove Composer support?\n. We now have wp core check-update, which will produce something like this:\nsalty-wordpress \u279c  wordpress-test.dev  wp core version\n3.9\nsalty-wordpress \u279c  wordpress-test.dev  wp core check-update\n+---------+-------------+-------------------------------------------+\n| version | update_type | package_url                               |\n+---------+-------------+-------------------------------------------+\n| 4.0     | major       | https://wordpress.org/wordpress-4.0.zip   |\n| 3.9.2   | minor       | https://wordpress.org/wordpress-3.9.2.zip |\n+---------+-------------+-------------------------------------------+\n. > I agree in that transient list could be a mess. A summary command would be much more helpful.\nSorry, not sure I follow. What would the summary command do?\n. I'd be interested in seeing a summary command as a community command first.\n. @mastef I think this is better suited as a standalone command, so I put one together for you: https://github.com/danielbachhuber/wp-cli-pre-cache-command\n. What about wp option list instead?\nConsidering WordPress also can store transients in the options table, how do you propose handling a massive list of options?\nCan you share a use case for how you might use this?\n. Table is pretty ugly, as it turns out. Basically, #804 but worse.\nThinking about adding wp option get <key>... and/or wp option list option_name__like / wp option list option_name__in / wp option_name__not_in\nGenerally, __like, __in, and __not_in would be useful across a variety of commands.\n. Continuing in #1424\n. This was fixed in #1153\n. Continued in #1153\n. From the codex:\n\nPlease note that we cannot change the usernames through this function, in fact the usernames cannot be changed from the admin dashboard as well since WordPress does not allow the usernames to be updated.\n\nI tried tracking down the original thinking behind this decision, but didn't find anything definitive. \n. To play devil's advocate, core doesn't support updating the user_login, and I don't think we should either.\nBecause core doesn't support it, plugins and themes aren't designed to accommodate it. For instance, Co-Authors Plus keys off the user_login value to create author terms that maintain byline relationships. Updating user_login would break these relationships.\nIf the user really needs to, they can update in the DB. I think savvy users knows directly modifying the database means YMMV.\n. I think there are too many ways to slice this \u2014 little chance of a universal solution.\nI've found spawning wget processes to be a fast, reliable way of pre-fetching assets: https://github.com/danielbachhuber/wp-dev-docs/blob/master/performance/migrations.md#pre-fetch-remote-assets\n. I'd think we'd want WP_Query-style arguments, to open the door to other arguments later (e.g. attachment author).\n. I don't agree fully \u2014 wp export employs the pattern of supporting WP_Query arguments just fine.\n. Tests fail locally with:\n``\n    When I runwp package install wp-cli/server-command`   # features/steps/when.php:17\n      $ wp package install wp-cli/server-command\n  Error: Source directory /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli has uncommitted changes.\n  cwd: /tmp/wp-cli-test-run-52bca5c45c1931.14096364\n  exit status: 1\n\n```\n. > Tests fail locally with:\nTo get around this, I had to change the branch in my parent composer.json to dev-package-command-v3\nAlso important to note: Behat runs the tests against your local copy of the codebase (and composer.json), which means the tests will fail if the wp server command is already installed.\n. I thought I'd do something clever and use part of them same approach established by user-specific config.yml files:\n```\n// Loads the fallback config.yml in WP_CLI\\Runner::get_global_config_path()\nif ( !$config_path ) {\n    $config_path = getenv( 'HOME' ) . '/.wp-cli/config.yml';\n}\n// Loads the community package autoloader for Phar-based install in WP_CLI\\Utils\\load_dependencies()\n$community_vendor_path = getenv( 'HOME' ) . '/.wp-cli/vendor/autoload.php';\nif ( file_exists( $community_vendor_path ) )\n    require $community_vendor_path;\n```\nHowever, the build still fails in Travis because getenv( 'HOME' ); isn't set. Tests pass locally.\nI think we should follow the approach specified by config.yml entirely:\n- If an environment variable is defined, then WP-CLI will expect the community package composer.json to be located in that directory, along with any installed community packages. WP-CLI will autoload community packages from that directory, regardless of Phar vs. non-Phar.\n- If no environment variable is defined, WP-CLI defaults to the parent Composer project for non-Phar (which means the packages will be auto-loaded already), and ~/.wp-cli for Phar (which means we'll still need some code to autoload).\nThis would give us just a little more flexibility that might prove valuable. Notice I'm not editing config.yml to require the auto-loader \u2014 I think this is additional complexity with little to no advantage.\nOr, the easiest way out is likely to define the HOME environment variable in Travis to be something in /tmp, get the tests passing, and ship it.\n. > If we still need additional auto-loading code, then what's the upside of conditionally using the parent composer.json file?\nNot having to have additional auto-loading code some of the time (if that's even an advantage). I suppose we will run into the problem of needing to update the parent composer.json to the current branch each time you want to run the full test suite locally.\n\nAnyway, we could overwrite the value of HOME in the Behat test runner in the mean time, to see if any other issues crop up.\n\n6289de197b47393c2b3c5e3518191f52e3901c72 didn't seem to do much. Any ideas?\n. Getting somewhere...\nWarning: file_get_contents(phar:///tmp/wp-cli-phar/wp/vendor/composer/composer/src/Composer/Json/../../../res/composer-schema.json): failed to open stream: phar error: \"vendor/composer/composer/res/composer-schema.json\" is not a file in phar \"/tmp/wp-cli-phar/wp\" in phar:///tmp/wp-cli-phar/wp/vendor/composer/composer/src/Composer/Json/JsonFile.php on line 153\n. Considering this output:\n\nI think it's failing here: https://github.com/composer/composer/blob/51e6c3a4665fd2894ba6b9ec466c1fed9961be07/src/Composer/Installer.php#L446\ne.g. it never gets to PackageManagerEventSubscriber\n. As of 70c26915ce21fa371d21c5256f94bbd8e0c0d634, building and using a Phar works in my local environment:\nsalty-wordpress \u279c  wp-cli  php -dphar.readonly=0 utils/make-phar.php wp-cli.phar --quiet\nGenerated wp-cli.phar\nsalty-wordpress \u279c  wp-cli  mv wp-cli.phar /tmp/wp\nsalty-wordpress \u279c  wp-cli  chmod +x /tmp/wp\nsalty-wordpress \u279c  wp-cli  cd /tmp\nsalty-wordpress \u279c  tmp  HOME=/tmp\nsalty-wordpress \u279c  ~  ./wp package install wp-cli/server-command\nInstalling wp-cli/server-command (dev-master)\nUpdating composer.json to require the package...\nDownloading the package...\nInstalling via Composer...\nSuccess: Package installed successfully.\n@scribu Any ideas why this might still be failing in Travis?\n. Added more verbosity:\n\nGuess we need to use a different package in our test cases :)\nCan you produce a hit list of what you'd like to see changed on this PR before merge? I think it's about a centimeter away from being ready to drop, and I'd rather just finish everything up at once.\nAlternatively, feel free to do a cleanup pass to your liking and merge.\n. > PHP Warning:  file_put_contents(/Users/composer.json): failed to open stream: Permission denied in /Users/User/git/wp-cli/vendor/composer/composer/src/Composer/Json/JsonFile.php on line 123\nI don't follow the source of the error. Does the file exist but isn't writable? How did WP-CLI find that path?\n. Oh yeah, forgot about that case. Do you recommend we check that the file exists, and then fall back when it doesn't, similar to what we have for finding the autoload? I don't have any ideas for clean abstraction at the moment.\n. Updated. Hopefully we're at the end of this PR, so here's a summary of what we've done.\nWhat we get:\n- Browse, install (with specific versions), list, and uninstall WP-CLI community packages. I hear @joehoyle has a pretty cool one to submit for localization soon ;)\n- Composer's support for installing packages, regardless of installation mechanism (VCS, etc.)\n- Composer's dependency resolution.\n- Our own limited universe for sharing packages.\n- Works with Phar- and Composer-based installs of WP-CLI.\nWhat's not so great:\n- Installing requires editing composer.json and saving the file. Should you quit the installation part of the way through, you end up with a composer.json with the package referenced but not installed.\n- I think, but haven't yet proven, that Composer is updating all packages in the process of installing a new package. Haven't fully determined whether this is a good thing or bad thing.\n- Uninstalling is completely our own code, and doesn't uninstall dependencies. It works.\nWhat might be missing:\n- Option to specify the installation directory for community packages. Should handle in new PR.\n- Ability to update community packages. Should handle in new PR.\n- Fully-accommodating Composer's verbosity with our own IO class. I think we should just let this shake out, and fix as needed.\nLastly, I'm really curious as to whether anyone has co-opted Composer as we've done, and whether its APIs are intended to be public.\n. 1a. Fixed not being able to install: https://github.com/danielbachhuber/wp-cli-stat-command/commit/eb44c95126e1c65852f7305b00c3471f385d638a\n1b. Composer verbosity is going to need to shake out, imo.\n2. I'd rather handle that in another issue. It's specific to their command \u2014 wp server uses __invoke() and works just fine.\n3. 93de64e\n4. e3b2983\n. @scribu I don't have a strong sense of direction on where this should go next \u2014 we might be spending a lot of effort trying to fit a square peg into a round hole, and using Composer in a way that wasn't intended. For instance, another use case that will probably break is being able to require an explicit version of WP-CLI.\nI'm tempted to spin this off into its own standalone package for now, see who actually uses it, and go from there. \n. ... and #963 would mean I could use WP-CLI's testing framework in the standalone package! #winning\n. It will be released standalone before it will be included in core\nOn Tuesday, March 4, 2014, Matthias Kadenbach notifications@github.com\nwrote:\n\nHey guys. I see some good progress on this topic. I think installing\npackages is a little confusing at the moment. Is there anything I can help\nwith so that the wp packge command can be officially released soon?\n\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/936#issuecomment-36643505\n.\n. Continued in #2442\n. Great! I wanted something like this the other day. Can you make sure to include functional tests? https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md\n. Couple more things:\n- What should happen if either of these are called on a single- site instance?\n- Should wp theme list somehow indicate network-enabled vs site-enabled themes?\n. We've gone the --extra-php route, which provided a better catch- all for a variety of use- cases. Do you have one that isn't covered?\n. What's the advantage to having this in WP-CLI, vs. a well-documented code example?\n. No, create an MU plugin that filters active_plugins when WP_CLI is defined.\n. We can re-open this issue again if it becomes actionable in the future.\n\nSince the issue was originally opened, we've had a couple algorithm optimizations (#1261, #2304) which have led to substantial performance improvements that I'm quite happy with.\n. > Testing the case when WP-CLI is installed as a dependency will take a bit more work.\nI took a look into this. It's not easily possible. Given we have a Git clone build in #2401, I don't think it's worth the effort.\n. Still needs:\n- [ ] Functional tests\n- [x] Check to see the package has a composer.json, and throw a warning if not.\n- [x] Intelligent overwrite vs. ignore if the file already exists in the package\n. Boy, these builds are slow :(\n. @scribu Good idea to improve the build speed? Could we build a .tar.gz of WP-CLI with all of the Composer vendors included?\n. > Which extra packages do you need?\nAll, because I need a functional version of WP-CLI to test against. I guess the options are:\n1. git clone wp-cli + composer install\n2. wp-cli.phar + git clone wp-cli for behat framework files + behat.phar\n3. Pre-built version of 1 as .tar.gz\nI'm doing the first, you're suggesting the second, and I think the third would be the nicest, although it'd require another \"release\" format.\n. > it would be useful to get a feel for how much of a speed-up we would actually gain.\nIt's more of a cleanliness thing for me, over speed. I'd like for install-package-tests.sh to be a tidy little bundle so we can push improvements to the testing framework without needing everyone to update their copy of the bash script.\n. @scribu I'm happy with this now \u2014 it's good enough to get us going\n. > you can't change them lest you cause failures in the packages that use them.\nUnless you have the scaffold package-tests bash script produce a specific git clone hash :) Point noted though \u2014 something I've been considering as well.\n. Better approach in #1309\n. --allow-root and --skip-flags have landed.\n@kurtpayne Can you open a new PR with your Makefile so we can have a conversation separately about that?\n. @scribu #reviewmerge\n. > the documentation doesn't reflect the new capability\nWhich documentation? The examples?\n. Updated\n. @scribu #reviewmerge\nI didn't add tests around this because the base functionality is covered in other tests, and the STDOUT-based checking is imprecise (running tests multiple times can change the order of the post list).\n. Updated\n. Can you share more details on the failure? Works for me locally:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp post list --post_type=any --format=ids\n10 12 7 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 4 2 1%\nHaving trouble loading Travis results, but it looks like two runs passed.\n. Odd that it works locally, as it doesn't seem like it should work at all:\n- 3.4.2 - https://core.trac.wordpress.org/browser/tags/3.4.2/wp-includes/query.php#L2077\n- 3.8 - https://core.trac.wordpress.org/browser/tags/3.8/src/wp-includes/query.php#L2330\n. > On some of our machines, we've observed customers accidentally(?) running wp-cli as root.\nIf this is a part of the security disclose, I totally understand, but how are your customers accidentally running WP-CLI as root? Should they have root access in the first place? Could whatever problem you're seeing be solved at the host-level, instead of a one-off in WP-CLI?\n. > Hate to reopen\nThis conversation isn't for re-opening. Using WP-CLI as root requires the --allow-root flag.\n. > No debate there, just asking if the scenario I provide would be mitigated in terms of the risk.\nIt would be unsafe to assume the situation you provide fully mitigates the risk. If you don't fully understand the impact of running WP-CLI as root, you probably shouldn't run it as root.\n. I'm split. I get that it would be nice to be able to supply an existing password hash, but that has a bit different use-case than what I originally wrote this for.\nThe original idea was to support a use-case where a non-technical person could prepare a list of users that need to be created, and then the developer could easily create those users.\nWhen you get in to moving password hashes around, the first question that comes to mind is: why not just dump and then import the users table?\nMaybe exporting / importing specific tables (with light transformation to match your prefixes, etc.) is something WP-CLI can help with.\n. Understandable. I'd be open to seeing a --disable-password-hash pull request.\nI think this would be a short-term patch though, as the problem you're hinting at is there's no one good* way to do a migration. Depending on your needs and use case, there's option X, Y or Z. WP-CLI (and WordPress) have room for improvement in how they perform exports / imports, but I don't think there will ever be a silver bullet.\n. Punting on this for now. I think a migration where you need to persist existing user records is best done with db export / import. import-csv was originally intended for creating new users.\n. @garex This is an extremely old ticket, and @scribu is no longer involved with the project.\nPlease review the support policy.\n. @samtuke Can you share the contents of your wp-config.php, minus any secrets?\n. I've created a new canonical issue to point people to: #1631\n. @rodrigoprimo I'm still of the mind this is an application-level problem. Haven't had time to dive into it further.\n. @rodrigoprimo can you file an issue in php-cli-tools?\n. I can't reproduce with 0.15-alpha\n. I'd suggest making this opt-in via --send-email\nRelated https://core.trac.wordpress.org/ticket/27398\n. +1\n. Punting on this as I don't think the cost of loading WordPress is worth the benefit.\n. > I'm very interested in seeing this feature\nGlad to hear :)\n\nwhen implemented do we need to update wp cli in anyway?\n\nYep. When the new version is released, you can just follow the same installation instructions you started with to override your existing version of WP-CLI.\n. > Is there any easy way to be alerted of new updates that are in master?\nYour best bet is to follow @wpcli on Twitter. But I think that's a reasonable feature request: #1011\n. @scribu Ready for a review here. If you think it's ready to go, just need to add some usage examples in places before merge.\n. 1-3 have been addressed.\nFor 4, menus have multiple \"ids\", so I went with <db-id> to be specific.\n. Spent a little bit of time thinking about how we should go about this.\nI'm not a huge fan of conditionally requiring arguments because (at least for now) we don't have a great way to go about this. Furthermore, custom user tables is a < 1% use case, so I don't think WP-CLI's support for it needs to be perfect.\nInstead, we can just include some note that only admin_user is respected when installing on a site with custom user tables, and make sure to ignore admin_email and admin_password. Or, if admin_user doesn't exist, we can create it.\n. @scribu #reviewmerge\n. Where would it phone home to? I'd like to take a stab at https://github.com/humanmade/Salty-WordPress/issues/54. I think my preference at this time is to let whatever provisioning system you're using perform the update \u2014 #522 doesn't really acknowledge there's many ways to install WP-CLI.\n. I don't think this approach will work, as users would get unexpected output during the normal course of running a command.\nI'd propose we keep this really conservative to start. Up to once a day, if you run wp or wp help *, WP-CLI performs a version check. If there's a new version available, you get a prompt to update (a la ZSH). In that prompt to update, you can also disable automatic version checks.\nTo keep the checks to just once a day, WP-CLI can use a lock file in the cache directory. If it can't write to the cache directory, it shouldn't perform the automatic check at all.\n. @nyordanov do you still feel the need to make this automatic, and obtrusive, or are you happy with wp cli check-update?\n. Actually, I really like how Oh My ZSH does this. Even better: we show some indicator of release notes on update.\n. > Isn't Oh My ZSH obtrusive? It prevents you from doing anything until you state whether you want to update.\nYes. We can limit the impact by only executing on the informational commands like wp, wp help or wp <command> help. I think this is the best way to assume that a human is behind the operation, not a script.\n. @nyordanov Would you like to pick this up? I think it could be a cool addition to v0.20.0, and will permit faster release cycles.\n. > I would, but after May 20. When is v0.20.0 scheduled to be released?\nThat'll be fine. Probably looking at mid-July or so for v0.20.0\n. > I'm sorry I'm terribly late with this - other things took priority.\nNo worries!\n. @lkraav #1324 is probably our way out going forward.\n. @clemens-tolboom Are you happy with this?\n. We can continue this with #1022\n. > When I export with the minimal options, I seem to get users, taxonomies, and all post types, correct?\nCorrect...\n\nWhen I export and specify a post type, does it ONLY export that post type and no other data? Or does it still export users, etc...?\n\nThe post type, and any attachments to the post type. The authors of those posts will be included in the top of the file to confirm they exist before the import has started (for authorship purposes).\n\nIs there a way to specifically export ONLY what I want? That is, export taxonomies and nothing else. Export the media library and nothing else. Export user data and nothing else. Etc...\n\nNot at this time. It's on my radar though.\n\nIs there a way to clone? For example, export a site and import it as a clone.\n\nStraight database migrations can be done with wp db. You'll need to migrate your uploads directory too.\nIf you're referring to being able to export from multisite and import into single site, and export from single site to import into multisite, it doesn't yet exist in a simple way.\n. > Okay, looking at \"wp db export\" and \"wp db import\" and what I'm not seeing is a way to deal with individual tables or individual sites in a multisite install.\nCorrect \u2014 no elegant solution at the moment.\n\nAlso, I just found \"eval-file\" and my question would be, does it work like a plugin? That is, does the specified file have access to the WordPress API when it's executed?\n\nwp eval-file - Load and execute a PHP file after loading WordPress.\nSo, yes, you have full access to WordPress.\n. > i18n-tools is easy enough to use\nPretty relative statement :) Exporting a database from WordPress was \"easy enough\" to do, but it's now dead simple with WP-CLI\n. #1775 added grunt-wp-i18n, which solves this nicely.\n. > Can you help by telling me what WP-CLI command to use?\nIt's actually a Grunt command. After you've scaffolded a new plugin, you can do npm install; grunt i18n to generate files\n. @scribu what's your opinion regarding which version of WP-CLI documentation should be exposed on the site? might be nice to hook the site into the Travis build process, but it would expose command and class documentation always for latest.\n. First pass at an internal docs page: http://wp-cli.org/docs/internal-api/\nGood, but not great.\n. This is in pretty good shape now. Closing, and we can open subsequent issues as needed.\n. Are the two sites where WP-CLI isn't working multisite instances?\n. Punting on this one\u00a0\u2014 hasn't ever struck me as important enough to implement.\n. @scribu #reviewmerge\n. @scribu #reviewmerge? How do you feel about the pattern of having a validation method hard exit if the validation fails?\n. > Please add Behat tests that exercise these new calls.\nDone.\n. Oh, so much cleaner :) I'll dive into it a bit more today.\n. For what it's worth, here's my feedback:\nLikes:\n- Clean aesthetic\n- High contrast\n- Body text size and spacing is good.\nNeeds improvement:\n- Code blocks on the page are too prominent, and make reading the body of the page a bit challenging.\n- Bump the subhead size and padding to break up the page.\n- Blog needs better breaks between posts.\n- It would be nice of our examples for commands had sample results.\nAs I'm going through the site and we're talking about a redesign, it might be nice to also run a survey of WP-CLI users. Specifically, I'd be interested in:\n1. What do they use WP-CLI for, and how often do they use it?\n2. When they have a question about how something works, how do they get it answered?\n3. Have they used (and contributed back to) any of the commands in the package index?\nThe last would be a really interesting metric (at least to me) to pay attention to and see if we can increase.\n. > What I don't like is that this redesign seems to be getting out of hand. The goal, at least in my mind, was to improve the visual style, not to rethink the information architecture or add new features.\nI agree whole-heartedly with your goal. I see the steps as:\n1. Complete and launch new redesign.\n2. Publish survey.\n3. Based on survey results, incrementally improve information architecture.\n. If the design isn't going to ship in the foreseeable future, I'd like to get the survey in the next release to help guide future efforts for packages.\n. Link to the survey from the blog post. I'm happy to put it together and compile results\n. Thanks for all of your work on this, @jmslbam. A couple of last bits of feedback from me:\n- Header text is a bit difficult to read. Is there something we can do there?\n- I think the design of <code> is too contrasty, and makes it difficult to read the rest of the text. Could we do something there?\n. Yes, FF is much nicer :)\n. @jmslbam up for rolling this out tomorrow?\n. Let's touch base in IRC before merging to master\n. Not scalable in what sense? Performance or utility?\n. @martinmalanik Please open a new issue for your question.\n. @scribu #reviewmerge\n. Sounds good, updated.\n. Related core ticket: https://core.trac.wordpress.org/ticket/12720\n. > I think the current behavior is correct\nHow do you permanently delete a user via WP-CLI then?\n. Permanently deleting a user isn't an edge case though, and in \"fixing\" #1069 you've removed a feature.\n. > OTOH, it's not something you do often.\nI do it all of the time. \n\nDo you want to continue debating if this is a bug or a feature request?\n\nSemantics don't matter to me. I think we need to accommodate the four scenarios I outlined above, and I consider it a bug because you've changed the behavior of wp user delete while addressing a related bug report.\n. Both. Conceptually for me, it's an important part of ethemeral-izing WordPress\n. > Leaving \"Delete from network, and reassign posts.\" for another release.\nI think we can safely call this wontfix at this point.\n. How often do you delete a blog and then reinstall?\n. Your mind will be blown by the Dictator. Provision WP just like you provision with Salt or Puppet.\nI don't think we need resolution on this right now - opened it more for the record. I found a workaround.\n. Closing in favor of #2067\n. @scribu opinions on this?\n. > It would be good if you could re-use the Process class somehow.\nGreat suggestion \u2014 refactor complete :)\n. > the ProcessRun->STDOUT and Process->STDERR properties should be converted to lowercase, since they're not constants anymore.\nIt breaks most of the steps (and maybe other things I didn't discover). Still worth doing? Another option could be a magic getter which handles backwards compat.\n. Fixed in https://github.com/wp-cli/wp-cli.github.com/commit/17f17d4dccb4b303072f5a8ccc128af8bdb2c6a5\n. Related #1028\n. @spacedmonkey @dnavarrojr https://github.com/danielbachhuber/dictator is the tool I invented for this, and will be investing my time into for the foreseeable future.\n. Conceptually, I'm not sure how I feel about removing subcommands for a couple of reasons:\n- Backwards compat\n- Muddies the waters with regards to what goes into WP-CLI vs. living outside of core. The latter is a second-class citizen right now because we have no distribution mechanism.\nPragmatically, I think wp user import-csv has proved useful enough to me to keep it in.\nLong-term, I'd like for WordPress core to better address this whole import / export business.\n. @spacedmonkey Sorry for getting caught in the weeds. Coming back to this, exporting users to CSV has been doable with:\nwp user list --format=csv > users.csv\nYou can also configure the fields present, or filter to a matching value:\nwp user list --format=csv --role=contributor\nwp user list --format=csv --fields=user_login,display_name\n. Easy enough to move your new plugin to your mu-plugins dir.\n. > Rather than a flag, it would be delightful if it would auto-detect this scenario.\n@lgellert Can you answer this question?\n\nCould you give an example of a plugin that belongs (not merely can exist) in the mu-plugins directory, which would also benefit from unit tests?\n. In #1764, you'll be able to specify --dir=<dirname> to scaffold plugins (or just plugin tests) to arbitrary directories.\n. I think it should prompt file by file. --yes would apply to all files though\nOn Mar 30, 2014, at 14:50, Jaime Martinez notifications@github.com wrote:\nwp media regenerate uses this the --yes as an option to skip the confirmation\nI think we should keep this equal instead of implementing --force && --yes\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/media.php#L18\nIf file already exists then ask for confirmation\nThen proceed based on the question\nIf file already exists and --yes flag is passed\nThen proceed and overwrite\nAgree?\n\u2014\nReply to this email directly or view it on GitHub.\n. This branch is still quite stale, but the idea is a good one. I've filed a new issue for it #1797\n. It's good. I'll do more today on a new branch.\n. I can't reproduce locally with Nginx and PHP 5.4.9.\n\nBehind the scenes, wp rewrite flush simply calls flush_rewrite_rules(). The --hard argument indicates whether to regenerate your Apache .htaccess file or not \u2014 if you're not using Apache, it's not necessary. Visiting the permalinks page simply calls flush_rewrite_rules() too.\nHowever, flush_rewrite_rules() first calls delete_option('rewrite_rules');. If it's not actually able to delete the option, then your rewrite rules could be left as they are.\nSo, my best bet would be that you're using W3TC's object cache via APC: https://github.com/wp-cli/wp-cli/issues/1047#issuecomment-38939102\nIf that's not the case, could you provide more details about your environment? Specifically:\n- Server setup.\n- Plugins you're running that might interfere with updating options. \n- Any other eccentricities you've run into with your configuration.\n. Here's the results of running your script (slightly modified) locally on a fresh install for me:\n\n1. To confirm, you're using your script in single site mode, not multisite?\n2. As you're using Apache, does the .htaccess file get generated?\n3. After you run the install and use wp rewrite list, what output do you get?\nAnother situation in which your rewrite rules won't be generated is if permalink_structure is empty: https://core.trac.wordpress.org/browser/tags/3.8.1/src/wp-includes/rewrite.php#L1540 You can stick some debugging calls (error_log(), etc.) in /wp-includes/rewrite.php to see how deep WP-CLI gets.\nAlso, not sure if you're aware of this, but you can easily run your script multiple times for debugging purposes using wp db reset --yes in-between.\n. I suspect your web server is running as a different user than your shell session, and your shell user doesn't have write access to web root. Please ask your web host to confirm your shell user has the appropriate permissions.\nIf this was the issue, WP-CLI should throw an error if it tries to write the .htaccess and fails.\n. Oh, I think we're missing something obvious. Does your wp-cli.yml have the following?\napache_modules:\n   - mod_rewrite\n. Because all of WP-CLI's existing strings are in English, and it doesn't yet have a framework for translating strings, I'd suggest the latter. Open to being convinced otherwise, though.\n. I suspect you'd prefer they came together? Anything stopping you from making installation a two-step process instead of one?\nRelated #522\n. It's easy enough to include a second curl step to your build process to get the most recent bash completion file.\n. SHELL_PIPE will be in the next version of php-cli-tools\n. @jason404 The correct command is:\nsalty-wordpress \u279c  en-gb  wp core download --locale=en_GB\nDownloading WordPress 4.2.4 (en_GB)...\nSuccess: WordPress downloaded.\nNote: en_GB with an underscore, instead of a dash.\n. > Maybe I have not been updating with the intended language?\nQuite possibly.\n. @acki Please open a new issue with all relevant details, thanks.. > I would agree with @johnbillion your CLI should have a defined and consistent pattern for options not following the poor design choices made by existing tools/APIs/frameworks.\nI agree with this in theory. In practice though, both dashes and underscores are used throughout, and standardizing on one vs. the other would cause pretty substantial breaking changes at this point.\n. > it didn't show that my plugins has the newer version ( in fact it has ! )\nSorry, which plugin are you referring to? And do you mean to say there's an update available for one of your plugins but it doesn't show in WP-CLI, or the version number for one of your plugins is incorrect?\nAlso, how does it appear in the WordPress admin?\n. The problem is with Better WP Security, specifically the following:\n```\n        if ( ! current_user_can( 'manage_options' ) ) {\n        remove_action( 'load-update-core.php', 'wp_update_plugins' );\n        add_filter( 'pre_site_transient_update_plugins', array( $this, 'empty_return_function' ) );\n        wp_clear_scheduled_hook( 'wp_update_plugins' );\n\n    }\n\n```\nYou can ask them to include a defined( 'WP_CLI' ) check in there, or disable that feature.\n. If this is the first step you're performing after a brand new install, there isn't much harm in directly altering the database:\nwp db query \"UPDATE wp_users SET ID=55 WHERE ID=1; UPDATE wp_usermeta SET user_id=55 WHERE user_id=1\"\n. @scribu any good ideas on syntax?\n. @jmslbam What's the difference between _n() and ngettext()?\n. Thanks for educating me :)\n. Apologies. It's on my todo list to get 0.15.1 out - just haven't gotten to it yet.\n. Going with #1127. Thanks for flagging this, @jmslbam \n. @WebEndevSnippets what was the issue?\n. > when there are multiple options, it should show all of them, instead of immediately completing with the first one.\nAfaik, this is how autocompletion typically works. In ZSH, the first use of [tab] will show all options. The second use autocompletes to the first in the list. And subsequent uses will cycle you through all options.\n. Thanks guys.\n. I saw that you've come across WP Remote CLI. You might also want to check out WP-CLI SSH: https://github.com/x-team/wp-cli-ssh\n. See https://github.com/wp-cli/wp-cli/pull/1137#r11926831\n. See https://github.com/wp-cli/wp-cli/pull/1137#r11926831\n. https://github.com/rmccue/Requests/issues/115\n. > wp-cli should autoupdate\nNightly will be rebuilt after #1196 is merged. Given WP-CLI doesn't yet officially support HHVM, this won't go into a stable release until there's reason to release 0.15.2 or 0.16.0 is ready.\n. I can't reproduce using WordPress installed in the root directory or WordPress installed in a subdirectory :( Using WP-CLI to update a theme located in the original wp-content directory didn't install the newer version to my custom theme directory.\nAny other tricky things going on in your environment? Can you dig into it a little bit deeper to figure out why paths are getting mixed up?\n. Thanks. Feel free to re-open this issue if you manage to track it down.\n. :beer: \n. See: https://github.com/wp-cli/wp-cli/pull/1137#r11926831\n. Looking pretty solid. In addition to what I've pointed out, please add tests and examples for each command, and make sure the tests pass.\n. > Should it accept an arbitrary list of associative arguments like wp post create does? Or should there be an --args argument which accepts a JSON encoded array?\nMy preference would be the former, but you'd run into problems if it expected (or didn't expect) next_run / recurrence. Which could be solved by making those optional positional arguments.\n\nComplete the Behat tests (first time I've ever written one)\n\nHopefully is easy \u2014 definitely flag any tough spots you run into so we can improve the docs.\n\nDecide if interval() and time_since() should remain in Utils or move into the Cron_Event_Command class\n\nThey should move.\n. @johnbillion Great. Let me know when you're ready for another full review.\n. > which I'll document separately. I think it's an underlying WP-CLI issue.\nI think you discovered site_url() is example.com in your tests :)\n. The Codex reads as though DB_CHARSET requires one of MySQL's set values. How did yours end up as empty, and why is that supported?\n. Ok, you've convinced me. Can you update your PR to use core bracing standards? Also, I'd prefer we only run the array merge once, so the constant value should be optionally defined before $final_args is created\n. I was thinking something like this:\n```\n$required = array(\n    'host' => DB_HOST,\n    'user' => DB_USER,\n    'pass' => DB_PASSWORD,\n);\nif ( defined( 'DB_CHARSET' ) && constant( 'DB_CHARSET' ) ) {\n    $required['default-character-set'] = constant( 'DB_CHARSET' );\n}\n$final_args = array_merge( $assoc_args, $required );\nUtils\\run_mysql_command( $cmd, $final_args, $descriptors );\n```\nCan you add a scenario to features/db.feature too which runs wp db export when DB_CHARSET is an empty value? Thanks.\n. Taking care of this in #1187\n. > Can we print a warning message instead?\nNah, let's go ahead and throw an error. Thanks for the report.\n. > Also, you could actually invoke the widget's form() method, and parse out the inputs in there, and use default values from that as the instance supplied when saving a widget. \nWow, that would be such an amazing hack :(\n. Rather than hijack the WP-CLI load process, why not use WP_CLI::launch_self() (ref) to launch a new WP-CLI process with your preferred configuration file?\n. > During implementation I decide it is much easier to modify $argv.\nSure, but we can't make the change you suggest because WP-CLI won't know which commands to require.\n\nSecond problem is that I have to somehow determin also on the fly when my production command will be executed. Before wp load or after.\n\nYou can have your command execute before WordPress loads with @when before_wp_load in the command docs.\nWhat about something like this (untested)?\n```\nclass Environment_Command extends WP_CLI_Command {\n/**\n * Execute WP-CLI against configuration for a given environment\n *\n * <environment>\n * : Environment to run the command against\n *\n * <arg>...\n * : WP-CLI command, plus any positional arguments.\n *\n * --<assoc-arg>=<value>\n * : Any configuration or associative arguments\n */\npublic function __invoke( $args, $assoc_args ) {\n\n    // Get your configuration values and merge with $assoc_args\n\n    $command = \"wp \" . implode( \" \", $args );\n    foreach( $assoc_args as $key => $value ) {\n        $command .= \" --{$key}={$value}\";\n    }\n    WP_CLI::launch( $command );\n\n}\n\n}\nWP_CLI::add_command( 'environment', 'Environment_Command' );\n```\nYou could also register a named command for each environment.\n. See #522 and #1011 \n. :hand: \n. - [ ] wp export needs waaay better test coverage.\n. > Is there a plan to include it in the next release?\nHope to, pull requests welcome! I'm eyeballing week of June 16th for 0.16.0\n. @szepeviktor can you open a pull request with such? That'd solve Weston's comment\n. @scribu Can you weigh in here with an expert opinion?\n. @kurtpayne Mind moving this until the utils directory? I'm fine keeping it in this repo \u2014 it's easier to keep track of everything we need to maintain. Related #1504\n. Related #1011\nQuerying against the Github API is an interesting idea. I'm not sure how I feel about having that as a dependency, although maybe we could bounce it through the wp-cli.org domain.\nUp for creating a pull request?\n. I think we should use https://api.github.com/repos/wp-cli/wp-cli/releases, as it's one less thing to maintain and is served over SSL. It also includes the Phar URL, when we get to that.\n. Generally, I think the approach is fine but I don't think \"Current WP-CLI version\" is the best output value.\nConceivably, we should offer a similar command for wp core. What about something like:\n$ wp core version\n3.9\n$ wp core check-update\n3.9.1\n$ wp core check-update --major\n(empty)\n. Was shipped in #1386\n. For the list and update commands, we call the upgrade refresh callback before doing anything. For plugins, this is wp_update_plugin(), which updates the transient.\n. This probably can help: http://www.php.net/manual/en/function.posix-getuid.php\n. Once #1162 lands, you'll be able to suppress all output with --quiet... except it will also depend on the WordPress Importer adopting some way of being able to override its output. So, your best bet right now is &> /dev/null\nSome commands have --porcelain. Technically speaking, this means to only produce reusable output. In practice, it generally means only showing a success value. I'll have to give some thought as to how it might fit into the import paradigm.\n. I'm going to close this as wontfix, because I couldn't ever get my output buffering hack to work on PHP 5.3\nWe should put our verbosity improvement efforts towards https://github.com/humanmade/wordpress-importer\n. To confirm, you're running these at the command line? Can you share some screenshots?\nThe installation process works just fine in my testing.\n. For whatever reason, curl isn't following the redirect supplied by Github. The -L directive is what tells it to follow redirects.\nCan you share curl --version?\nFor the time being, you should be able to get around this with:\ncurl https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar > wp-cli.phar\n. Alternatively, you might be able to use wget instead:\nwget -O wp-cli.phar https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar\n. So, does updating fix the issue then?\n. This works* except we still get output from the importer which defeats the purpose:\nPost &#8220;Hello world!&#8221; already exists.<br />Page &#8220;Sample Page&#8221; already exists.<br /><p>All done. <a href=\"http://wordpress-trunk.dev/wp-admin/\">Have fun!</a></p><p>Remember to update the passwords and roles of imported users.</p>%\nOutput buffering supports supplying a callback and a size in which chunks of output will be passed to the callback. Maybe we can hack that.\n. Oh:\n5.4.0  A chunk size of 1 now results in chunks of 1 byte being sent to the output buffer.\n. @scribu would love any ideas you have on this\n. Closing in favor of #2344\n. > If I came across wp core status I'd expect it to give me more info besides just the version, like whether it's a single or multisite install, whether it's up to date or not, etc.\nGood point. Maybe these would be useful :)\n\nWouldn't wp core version remain as an alias?\n\nIf we renamed it, yes. We'd need to make sure the alias maintained backwards compat with the output too.\n. Punting on this \u2014 I think wp core version is fine as it is for now.\n. core install calls wp_install() behind the scenes, which calls wp_new_blog_notification() (ref). Because it's a pluggable function, you can disable it by defining a empty function:\n/**\n * Don't send the default new blog notification\n */\nfunction wp_new_blog_notification() {}\nSimilarly, you could define an empty wp_mail() function to disable emails entirely.\n. Could you share the use-case?\n. I'm not a fan of introducing a new format, but it would be nice if the latest_version was accessible in wp plugin list, and you could do:\nwp plugin list --name=edit-flow --field=latest_version\n. Actually, looking into this deeper, you can already do:\nwp plugin list --name=edit-flow --field=update_version\n. Until 0.17.0 is released, you'll need to specify the --name argument. #1351 fixes the bug.\n\nAlso, this full list of plugin fields would be nice to see in the help of the command.\n\nGood suggestion. I've filed as #1352\n. Adding a --background_image to wp media import is too narrow of a use-case to be considered for core, but you could write a standalone command for it pretty easily.\nHowever, with this being said, attachments are given special treatment in WordPress and WP-CLI doesn't easily expose this. It might be time for wp attachment :) #1191\nI've also added --porcelain to wp media import so you can more easily reuse the attachment ID #1190\n. See #1175 for why the build is failing.\n. Following up on my response on #1164, I'm hesitant to add a --send-email option because doing so would break the existing behavior of sending the email.\nAt this point in time, our best option might be a global --skip-email, and follow core's behavior as much as possible.\n. See #729 for previous discussion about supporting additional parameters.\n. @szepeviktor just wanted to weigh in that some of these might be interesting as standalone community packages\n. > Is it possible to link wp-lib from the wiki and the homepage?\nThe Package Index is the best place for it, but you'll want to add a composer.json file and generally make it composer friendly.\n\nWould you give it a better \"tag line\" instead of the current \"wp-cli wrapper shell scripts to manage several websites with sudo\"?\n\nSounds fine to me :)\n. Yes, the parts that could be broken out.\nI've added you here for now: https://github.com/wp-cli/wp-cli/wiki/List-of-tools-that-use-wp-cli\n. No backtrace for us: https://travis-ci.org/wp-cli/wp-cli/jobs/24276188\n. I'd still like to identify the cause of this. @scribu any good debugging ideas?\n. Fixed! Yay!\n. Tests pass :) Thanks for the pull request!\n. Thanks for the report, @filipiz. You indirectly discovered some other bugs too :)\n. Probably a month or more to 0.16.0, but I'm thinking we might need a 0.15.1 now.\nYou can also use the nightly build to solve your immediate needs.\n. @johnbillion opinions?\n. See also #1904\n. Works as expected in ZSH http://quick.as/zzocddw\n. Seems like a lot of redundancy to have two separate files. What about a conditional around local opts?\n. #1201 makes the bash behavior much more like ZSH, although the former differs than the latter in that the latter lets you tab through the options.\nUnless there are any serious objections, I'd like to stick with what we have now over introducing a ZSH-specific completions file.\n. Just to be clear, what's still missing from @scribu's original objections is:\n\n\nWP-CLI auto-completed with the first option.\n\n\nI don't really like the original implementation where you didn't see the other options. My preference is ZSH's implementation where you can cycle through the options. I'm looking into enabling that for bash.\n. Actually, it appears cycling through the options is available in bash with bind TAB:menu-complete. bash's default behavior is simply to present the options. I suggest close now that we have #1201\n. Right now I'm thinking wp media needs to be renamed to wp attachment. Going to let the idea soak a bit.\n. We'll get this for free as a part of #1784. I think it makes sense to just punt until then.\n. Sorry, not sure I follow. Here's how WP-CLI communicates to the end user:\n- Success exits as 0.\n- Error exits as 1.\n- Warning doesn't exit, but simply displays a warning message.\nIn the example above, wp plugin activate akimtest seems a little bit inconsistent because wp plugin activate can support activating one or more plugins.\nWhat are you trying to do?\n. @avaly apologies for the radio silence - this issue slipped under my radar. --format=ids support will be in nightly shortly.\n. Fixed for nightly #1140. Hope to release 0.15.1 in the next day or two.\n. Using WP-CLI as root isn't something we're going to fully support. You're welcome to maintain your own version of the bash completion file that supports use as root.\n. Thanks @szepeviktor \n. Can you add tests too please?\n. Actually, I'm fine with this as it is.\n. The error is coming from when WP-CLI is loading your wp-config.php. I suspect it has to do with that. Can you try against a fresh install of WordPress? \n. @mboynes can you make sure there's a test for deleting multiple menus?\n. Thanks :)\n. @boonebgorges Can you change .travis.yml to reference PHP 5.5 instead of 5.4 and we can see if this was the original cause of it?\n. :dog: \n. @boonebgorges up for opening a ticket on bugs.php.net? I'd classify this as a genuine bug, and it would be good to see through to its completion.\n. Already doable :)\nwp comment delete $(wp comment list --status=spam --format=ids)\n. > Wouldn't it be better to use --field=id in examples? \nYeah, maybe so. I guess my mental routine is format because I think of it as a formatting procedure.\n. It's a problem with the plugin, not WP-CLI #1123\n. You can already pass any argument you'd pass to get_users():\nwp user list --orderby=ID --order=DESC\n. What would you suggest instead?\n. I dig 262f19117c7ac7b6711b55519e14d1e636da1142\n. > Please consider renaming \nWon't be happening at this point. It's a special argument type\n. > Then merge the PR!\nSorry, I'm not sure what pull request you're referring to. Please consider your tone of voice when participating in the project.\n. No worries. On occasion for small changes, I'll commit directly to master.\n. I'm not a fan of having something else to maintain. If RSS or Twitter aren't good enough, there's a service where you can sign up for email notifications: http://hubnotify.com/\n. Seems reasonable.\nFor original context: https://github.com/wp-cli/wp-cli/pull/619/files#diff-ebfa725722979f3a5e288bb8f86269a3R69\n. Can you share more details on how to reproduce? Do other WP-CLI commands work? Can you share the results of wp --info?\n. Can you share the results of wp --info?\n. Hm, I guess that's not very helpful. How do you have wp bound to WP-CLI? Bash profile or something else? Can you try which wp ?\nAnd, just to confirm, when you move the Phar file, it no longer exists in your current directory, correct?\n. :cake: \n. Why not use the --require attribute to load the config file with the data, and have the normal wp-config load WordPress?\n. @samstoller mind sharing your setup in a Gist or two (generically, of course, as to not exposing any secrets) so I can play around with it locally?\n. @samstoller apologies for the late reply here.\nWhen you attempt to run WP-CLI with your configuration, do you get this error?\nError: Strange wp-config.php file: wp-settings.php is not loaded directly.\nFrom the example you've provided, it appears you might be able to use your existing pattern as long as the existing wp-config.php file retains the reference to loading wp-settings.php (ref). If you can trick WP-CLI into thinking it's a valid wp-config.php, it will evaluate and pull out the constants.\nRelated #1362\n. You'll need to remove require_once ... wp-settings.php from your wp-config.php entirely, as WP-CLI has a custom wp-settings-cli.php: http://wp-cli.org/blog/how-wp-cli-loads-wordpress.html\n\nIdeally, it would be great to see locate_wp_config() (ref) consult a setting before searching other file paths.\n\nProbably not going to happen.\n. Yep. Open an issue there and see how the maintainer responds? We're currently using a forked version, but I'm not 100% sure of the history as to why.\n. We're internalizing PHP CLI tools \n\nOn Jun 20, 2014, at 7:04, Sz\u00e9pe Viktor notifications@github.com wrote:\nI think there is no response from @jlogsdon\n\u2014\nReply to this email directly or view it on GitHub.\n. Build is failing because Packagist isn't indexing wp-cli/php-cli-tools (because I broke the connection when I transferred the original into our organization). I believe.\n. > Is there a delete-issue button???\n\nNah, don't worry about it\n. Yes, this is core:\n\nhttps://core.trac.wordpress.org/ticket/17491 is probably a good ticket to follow\n. Sorry about that @avaly. I've been waiting for this to come up. wp menu is subject to a similar problem: https://github.com/wp-cli/wp-cli/blob/bdd601cb6f093203f1a54934643f8394986d9e33/php/commands/menu.php#L194\nIn short, any of the global arguments (e.g. --url, --path) aren't really accessible to subcommands. While it hasn't posed too much of a problem to date, it has the potential of becoming a more substantial issue as we continue forward.\nI'm not a fan of requiring a instance_ prefix, but I don't have a better solution to propose at this point. I'll give it some thought.\n. > Is there a workaround for this?\nNo workarounds, unfortunately.\n. Shipped!\n. I'm assuming the use-case is to only export tables associated with a given site?\n. I can take a stab in a sec.\n. > What is your decision on prefixed export?\nWe could have --all-tables-with-prefix flag, but it would be nice to also have some wildcard matching syntax.\n. Looks pretty good.\n. Because WordPress isn't fully loaded for wp db export, and we don't have access to $wpdb, I've decided to just make composability easier:\nwp db export --tables=$(wp db tables --all-tables-with-prefix --format=csv)\nYou can also search based on wildcard:\nwp db export --tables=$(wp db tables 'wp_user*' --format=csv)\n. Why not perform the search and replace after import? Can you describe in greater detail what you're trying to do?\n. Can you make sure there's some functional test coverage for this pull request?\n. > Any idea on what to test?\nReplacements on tables with serialized content, and replacements on tables without. Tests around your use of substr() to test table names. Etc. etc.\nTo be honest, I'm a bit hesitant of this pull request because of Murphy's Law. The pull request assumes that no one has put serialized data in the posts or comments table, but there's no way we can be sure of that. And, if I merge this pull request, someone who using wp search-replace could suddenly receive unintended results.\nI'd much rather we have some detection of whether there might be serialized data in the table, and only run this faster approach if not. Regardless, we need much better test covered \u2014 our existing tests are pretty sparse.\nAlso, another consideration is that, if you're really concerned about performance, it would be trivial to write a wrapper command that first runs MySQL update on your post and comment tables, and then follows up with wp search-replace.\n. Many commands have --network as optional, as you may want to only perform the operation on one site of the network.\n. Across all WP-CLI commands, --url specifies which site the command should operate against on a network.\n. The parse error means it's trying to evaluate the code in your wp-config. It fails on that, and can't access your database credentials.\nAnything funky in your wp-config? Can you share the contents of the file in a Gist (minus any important secrets, of course)?\n. Handled in #1305\n. Seems like it might be similar to http://wp-cli.org/#mamp (e.g. WP-CLI is using a PHP binary that has the default value here instead of wherever Boxen has put MySQL).\nWhen you launch your interactive PHP session, do you use php -a or specify a custom path? Can you share the results of wp --info?\n. @ToGri Were you able to track this down?\n- If not, what happens when you try to load WordPress itself?\n- Can you look in /opt/boxen/config/php/5.4.10/php.ini to see the default_socket value?\n- And when you use mysql_*, what database connection details do you use?\n. > Are there any way to avoid hacking the database before calling the search-replace or is that just how WordPress works for now?\nThe latter, unfortunately. #709 might help, or the ability to run a search / replace on import.\n. Great tip, @rodrigoprimo. I've added it to the usage docs 366eb4e\n. Why not use awk or grep? Could you describe your use case in a bit more detail?\n. For using elsewhere, you can also do something like this:\nwp eval \"echo constant( 'DB_HOST' ) . PHP_EOL . constant( 'DB_NAME' );\"\nI'd like to punt for a couple of reasons:\n1. Slippery slope to \"why can't I easily get the value of X constant?\"\n2. There are alternatives which are just as easy, and offer more flexibility.\n. Can you share wp --info?\n. > whereas wp user update accepts --user_role.\nThis is incorrect \u2014 not sure where I got the idea. Punting on this.\n. Looks like c30a4bc5dfcf8f971f16d37b283557546e89e9b6 was the culprit, and no clear reasoning. I suspect it was oversight.\n. Hmm, there's something funky going on. This output:\nbeckspaced@ex4:/srv/www/wpmultisite/httpdocs> wp comment delete $(wp comment list --status=spam --format=ids)\nSuccess: Deleted comment 38231 38230 38225 38224 38223 38219 38218 38217 38216 38215 38214 38213 38212 38205 38202 38201 38197 38196 38195 38194 38193 38192 38165 38164 38163 38162 38161 38160 38153 38152 38148 38147 38146 38145 38144 38130 38118 38113 38112 38111 38110 38109 38108 38107 38106 38105 38104 38103 38102 38101 38091 38090 38089 38088 38087 38086 38083 38082 38081 38080 38079 38078 38065.\nshould actually be something like this:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp comment delete $(wp comment list --status=spam --format=ids)\nSuccess: Deleted comment 3.\nSuccess: Deleted comment 2.\nEverything looks alright though \u2014 I don't have any good ideas as to the cause. From the output, it appears all of your comment IDs are being interpreted as a single string argument.\nSomething unique about your environment?\n. Can you share the permissions assigned to /var/www/sitename/wp-content/plugins/hello.php and its parent directory?\n. ... and which user are you running WP-CLI under? Did you create full user for www-data?\n. Safest thing to do is to add nonroot to the www-data group, and make your files group readable/writable.\n. WP-CLI uses Reflection to read the PHPdoc (ref 1, ref 2). What's happening is that WP-CLI is reading all of the class methods, but missing the PHPdoc for each. That's why the aliases are incorrect, arguments are missing, etc.\n@boreal I don't have ready access to 5.5.13 at the moment. Mind doing a bit of debugging around this diagnosis?\n. I think we need to do some one-on-one debugging. Ping me in IRC tomorrow or Thursday. We're #wordpress-cli\n. @boreal glad you tracked it down! What specifically about the config was the culprit?\n. Happy to help :)\n. @MiteshShah which caching options are you using in W3 Total Cache, by chance?\n. > Above warning is only come for single WordPress websites\nDo you have APC opcode cache enabled, by chance? See #1047 \nCan you provide the output of wp option get active_plugins?\n\nFor WordPress Multisite i'm not get any warning messages\n\nDo you get any output? What happens when you specify URL context with --url?\n. I was able to reproduce :) As it turns out, W3 Total Cache is already activating itself. I've started a pull request to improve the warnings.\n. > As it turns out, W3 Total Cache is already activating itself.\nActually, this is incorrect. WP-CLI throws a warning because W3 Total Cache defines itself as a network-only plugin (ref). When activating or deactivating a plugin, WP-CLI uses is_network_only_plugin() (ref) to decide on the check / messaging.\nAs such, there are two bugs:\n- W3TC shouldn't have Network: True in its plugin header.\n- WP-CLI shouldn't allow for normal activation of network-only plugins.\n. > W3TC shouldn't have Network: True in its plugin header.\nAs it turns out, this is also incorrect :) I did a bit more research. Everything will be fixed after #1250 \u2014 thanks for your bug report!\n. WP-CLI is intended to provide an interface for WordPress at the command line. Before you go about incorporating it into your project, make sure the planned scope fits within that definition.\nCould you describe your goal(s) in greater detail, and why they're not just achievable by calling shell_exec( 'wp-cli.phar' )? \n. Sorry for the late reply. It's hard for me to say definitively as to whether your use case is supported or not \u2014 I'm not terribly familiar with Phing.\nYou can incorporate WP-CLI into your Composer-based project with composer require wp-cli/wp-cli. Once you've done so, the best way to access WP-CLI's commands is by using WP_CLI::run_command(). However, many of the commands are dependent on WordPress core functions, and will need WordPress to be loaded into current scope in order to function. Also, boot-fs.php requires WP-CLI to be called from the CLI. If you incorporate it into your project, your project will inherit the requirement.\nHope this helps.\n. @szepeviktor neat... could you create builds for 0.15.0 and 0.16.0 and submit as PRs on the builds repo?\n. wp shell won't load the importer, because the importer is only fully loaded when this constant is defined. An alternative to ::run_command() is WP_CLI::launch_self(), which you can use to start a new thread that will appropriately load the importer:\nWP_CLI::launch_self( 'import', ['data.xml'], ['authors' => 'skip', 'skip' => 'attachment'] );\nWe accommodate the edge case for wp import because running the importer is the intended use. I'm hesitant to always define those constants because: 1) there's a reasonable alternative, and 2) I'd prefer to limit the amount of times we accommodate edge cases in the WP-CLI code bae.\n. What more tricks do you have in store? :)\nBy the way, I think wp plugin changelog might be interesting, particularly with a way of looking at the local changelog or the changelog for the most recent version of the plugin.\n. > Wasn't it about Bash examples?\nYes, I was just referring to your existing bash example \u2014 might be worth turning into a command.\n. https://github.com/wp-cli/wp-cli/wiki/Shell-Tips\n. I think we'll need to mull over this a bit. Core doesn't have the behavior of uninstalling an active plugin, so it might be an unexpected behavior to start doing so (which is why the existing behavior is to skip).\nPer the original issue, deactivate could take an --uninstall flag without worries about backwards compat.\n. Continued in #1796\n. Fixed in #1270\n. > May I finish this?\nSure \u2014 but it needs abstraction to a base class\n. > So the new class would be the common part of option.php and site.php?\nRight... Site_Option_Command would extend the CommandWithOption abstraction.\n. No, but it's also tracked in #1628\n. > Thinking through, I think the PHP version of not affecting keys is preferable\nDitto. I'd expect that keys are immutable. Let's just bail on the SQL approach entirely if any serialized data is found in a given column.\n. > Plus, I can't really think of a use case where you wouldn't want any keys to be modified.\nFrom my perspective, I haven't heard any good arguments for changing the behavior, so I'd prefer not to change it just because we think it's an alright idea right now. We can always change the behavior later, when someone presents a good reason for doing so.\n. :cake: Thanks for all of your work on this!\nI didn't know about \"Scenario Outline\" either \u2014 pretty nifty.\n. :+1: \n. Pretty solid. Just a few smaller things to finish.\nAnd yes, you should remove the function_exists()\n. > A modified set_url_scheme could also hijack the verification.\nOk, let's internalize that too. I'd like to roll out 0.16.0 tomorrow so let me know if you can't take care of this tonight and I'll jump on it.\n. > I go to sleep.\nThanks for your help!\n. There is likely a constant wp_config_env_no_file_edit you have in your wp-config.php that isn't define. Can you check?\n. Fixed in core https://core.trac.wordpress.org/changeset/28934\n. :+1: \n. Er, we're not going to distribute a patch as a part of the unit test setup script.\n. Nope. I don't want to distribute code for a one-off code fix. You can use sed or similar to change the bash file programmatically if you need an immediate fix\n. > I wonder if switching from require to require_once in Utils\\load_file() would be more robust.\nSeems to work pretty well. Would there ever be a reason a file should be required twice? From my perspective, it's fairly standard practice to use require_once() over require() for exactly this reason. The argument I've heard against is performance.\nRelated #1063\n. Er, can you create a branch for each issue, and then a pull request for each issue? They should be separate.\nAlso, each pull request will need Behat functional tests. Check out CONTRIBUTING.md for an introduction.\n. Continued in #1796\n. Apologies for the late reply. I've been postponing until I had time to dive into this.\nAs it turns out, it was inadvertently removed in 17860a741218d6230720d43cafa1c32f6a8a5ed2. We'll add it back.\n. > I didn't dare to delete it in a PR\nPR's are always welcome! They're the easiest way to discuss what's going on in the code / docs / etc. The worst that can happen is that we decide it's a bad idea to merge and close it.\n. @scribu how do you feel about adding these new methods to DocParser?\n. > are each a single thing and could probably be given better names\nAh, I was curious about that. Thanks.\n. No need to add this.\n. > I'm wondering if there is any known barrier to using WP-CLI together with cron.\nYou'll want to make sure wp is available on cron's PATH. Alternatively, try specifying the full path to wp\n. I've confirmed that it's possible to execute WP-CLI (including eval-file) via cron, so I don't think it's a problem with WP-CLI. I tested using a vagrant user and the root user.\nWhat happens when you try to run WP-CLI as a different user? I notice you have --allow-root, which implies you're running as root \u2014 which isn't recommended.\n\nhowever the actual PHP script does not seem to execute (reviewing the custom script log as well as the expected results of the script's operation.)\n\nCan you share the script in a gist, so I have a better understanding of what you're looking for in your debugging process?\n. > With what version of PHP were you testing?\n5.5.3.\nIf you run your PHP script on cron, does it work?\n. crontab entry:\n* * * * * cd /srv/www/wordpress-trunk.dev; /usr/bin/wp eval-file my-script.php\nmy-script.php is:\n<?php\necho 'hello';\nfile_put_contents( 'hello.txt', 'hello' );\n. Oh, another idea \u2014 there's actually an error happening, and WP-CLI is failing to output it because STDERR isn't available. Can you test if this is the case?\n. > I'm assuming this is the case when we eval-file a PHP script using WP-CLI via cron\neval-file just uses include() behind the scenes.\n@msundquist any chance your cron is using the PHP-CGI binary? you can inspect by calling which php\n. Can you share the results of wp --info?\n. wp menu was introduced in 0.15.0: http://wp-cli.org/blog/version-0.15.html\nYou'll need to upgrade your version of WP-CLI. See: http://wp-cli.org/#installing\n. Some debugging...\nCLI:\nwp eval \"var_dump( get_defined_constants() );\"\n...\n  [\"STDOUT\"]=>\n  resource(2) of type (stream)\nCron:\n* * * * * cd /srv/www/wordpress-trunk.dev; wp eval-file test.php > /dev/null\n...\n  [\"STDOUT\"]=> null\nBut PHP_SAPI === \"cli\". Both are using /usr/bin/php binary.\nPHP documentation says:\n\nThe CLI SAPI defines a few constants for I/O streams to make programming for the command line a bit easier.\n. More tests:\n\nsalty-wordpress \u279c  wordpress-trunk.dev  wp eval \"file_put_contents( 'test.txt', gettype( STDOUT ) );\"\nresource\nsalty-wordpress \u279c  wordpress-trunk.dev  wp eval-file test.php\nresource\n* * * * * cd /srv/www/wordpress-trunk.dev; wp eval-file test.php\nresource\nThe first test was incorrect \u2014 not sure why var_export() was showing null. I'm going to attribute the first report to someone using the PHP-CGI binary for cron, which breaks everything.\n. I've removed installer.sh from the site.\n@jmslbam can you update the wiki with instructions on how to install different versions via Composer with composer.phar require ? Thanks\n. Related #858\nOpen to suggestions as to what additional WP-CLI support might look like. WordPress installed in a subdirectory is a bit of YMMV, particularly as it relates to multisite. Multisite requires a number of hack that core doesn't seem to have much momentum on resolving.\n. At this point, I'm not planning to support installation schemes outside those WordPress core supports.\n. > installing to a subdirectory is detailed here:\nDocumentation in the Codex doesn't mean official support by core. Those directions include modifying index.php, which isn't a part of any officially-supported installation process. \n. > Is there someone for this bug who is familiar enough with wp-cli?\nHow do you mean? I haven't looked at it in depth, but could do so soon.\n. > Could you take another look at it?\nIt's on my todo list, but I can't provide a specific timeline.\n. @szepeviktor I tried reproducing this today and couldn't: https://gist.github.com/danielbachhuber/fb85431d6e147c04ade1\nI'm also not clear as to why you'd expect wp core config --url=http://someurl to set the URL in the database.\nCan you clarify?\n. > My problem is that when there are different URL-s in the YAML and on the command line, the one from the YAML gets precedence.\nI picked up on that in the initial report. However, I wasn't able to reproduce:\nsalty-wordpress \u279c  site  cat ../wp-cli.yml\nurl: incorrect-domain.com\nCan you try reproducing again? If you can't, we can just close this issue.\n. Good catch!\n. > It contains HTML.\nFair enough. Can you remove the __() wrapper too?\n. > I am running my script to build a site using sudo\nWhy? Did you read the message? Doing so will open your site up to security vulnerabilities.\n. > The uploads folder is missing.\nWordPress will create the uploads folder for you when you upload your first media file.\n. Technically, WordPress tries to create the uploads directory each time you use wp_upload_dir(). I don't recall off the top of my head whether wp_upload_dir() is used within the install process in core. I suspect it's not used until you visit the admin for the first time.\nIf you're installing WordPress via WP-CLI, the uploads directory won't be created until you visit the admin. I've committed a test that will fail: https://travis-ci.org/wp-cli/wp-cli/builds/30547405. However, I'm considering #1289 to resolve that.\n. Instead of arbitrary start point, I think you'd want random items across the entire distribution.\n. Started working on this and realized it isn't easily viable without making modifications to how WP_Export_Query produces its SQL. Given I don't want to modify the export code, I'll include some documentation on how you can achieve the same effect with --post__in:\nwp export --post__in=$(wp post list --post_type=post --orderby=rand --posts_per_page=8 --format=ids)\n. This is what I've been using more recently: https://github.com/danielbachhuber/unholy\n. > An effort towards providing developers with an easy way to run integration / unit tests on themes would really benefit the wp community.\n@Jeger Specifically PHPUnit, or other test suites too? Can you explain in a bit more detail what you're hoping to do?\n. Here's the old version of the script: https://github.com/wp-cli/wp-cli.github.com/commit/2ba5fcd0e53aeb314d4565bff71b72ef06011ea0\nUnless you specified an $INSTALL_DIR, the install script put everything in a hidden subdirectory off $HOME (ref).\nYou might've added a reference in your .bash_profile too (ref)\nIf you installed quite a while ago and these instructions don't help, you can look through the history to see how the script has changed.\n. > So what is the way to uninstall it before doing a fresh install?\nDelete the file. You can find it with which wp:\n$ which wp\n~/bin/wp\n$ rm ~/bin/wp\n. Thanks @dlh01 \u2014 apologies I missed this before.\nAre there other register post type arguments we could / should include in the scaffold?\n. Ok, we'll keep as is for now.\n. I'm not convinced this is a good idea, in part because it would require updating the $table_prefix value in wp-config.php too. Otherwise, you'd run the command and then not be able to access the database in the next step.\nAlso, there are occasions when the table prefix is stored in the database (e.g. user capabilities, poorly written plugins). Having a WP-CLI command for changing the table prefix implies we can reliably catch and fix all of those stored references \u2014 which probably isn't the case.\nWhy do you think this needs to be a part of WP-CLI, and not just something the user takes responsibility for doing with MySQL statements?\n. > Could you summarize what to do?\nThe PHP code you've linked to seems like a good starting point (as a combination of PHP and SQL). You could start out with a community command and write copious test coverage for the edge cases.\nI'm not 100% convinced it's a bad idea \u2014 I'm just wary of all the edge cases, and I'd want to make sure we're covering them in a reliable way before committing it to core.\n. There are too many ways this can break for WP-CLI to address it reliably.\n. Rather than adding a --prefix argument, I'd prefer to support wildcards in the --tables argument. You can remove the dependency on $wpdb by using self::run_query\n. You shouldn't need access to the prefix.\n. I was thinking:\nwp db export --table=a_table,b_table,wp_%\nPreviously, I had assumed you already knew the table prefix.\n\nIs there a way to catch run_query's output?`\n\nWe'll need to update run_mysql_command() to use the new Process class, and add a new argument for returning the process result.\n. Did this break something?\n. Does your bedrock_wp user have:\n\nrequires at least the SELECT privilege for dumped tables, SHOW VIEW for dumped views, TRIGGER for dumped triggers, and LOCK TABLES if the --single-transaction option is not used. Certain options might require other privileges as noted in the option descriptions.\n. The command is built in two parts:\n- https://github.com/wp-cli/wp-cli/blob/master/php/commands/db.php#L132\n- https://github.com/wp-cli/wp-cli/blob/master/php/commands/db.php#L234\n. @ivomarino were you able to sort this out? feel free to reopen the issue if you need more help\n. > This adds a graceful fallback for help on systems that have proc_open disabled.\n\nWhy do you have proc_open() disabled in a context where you're trying to run system commands?\n. 1. This sounds like an edge case to me, as it's the first time something like this has been reported. I also don't really follow the logic of disabling shell_exec and proc_open, but allowing shell access.\n2. Because of 1, I don't really want to embark on a hunt and peck mission to come up with workarounds in the various parts of WP-CLI that are affected.\nYou can use a global config.yml to require a custom PHP file that alerts your customer to the fact that various parts of WP-CLI don't work. I'd actually prefer this, as I'm not keen on handling their bug reports.\n. Makes sense. We are currently using the DB prefix, but to query for matching tables:\n$wpdb->get_col( $wpdb->prepare( \"SHOW TABLES LIKE %s\", like_escape( $prefix ) . '%' ) )\nWe should just the tables registered to $wpdb\n. > How to test it??\nI'm not sure we can without some hacking. I'll give it some thought.\n. This looks better. Can you merge master so it can merge cleanly?\n. Neat hack :) Code looks pretty good.\nFinal open question for me is whether we should fault to some sort of structured response so we can eventually return the Phar URL, etc.\n. > Please proceed with this PR. I'd like to run a cron job to notify me.\nI'm waiting until I'm confident it's the right approach. Until it's merged, you can create a custom command to perform the same behavior.\n. @szepeviktor can you merge master, and update this PR to match my formatting suggestions ?\n. Table by default, but support for --format, --fields, and --field so users can easily reformat as needed.\n. > Do we have here (wp-cli releases) major and minor versions?\nYes, we follow semantic versioning.\n\nI think wp-cli update should go for the latest version only.\nDoes it make sense to upgrade from wp-cli 0.9.1 to 0.9.2 when 0.16.0 is available?\n\nYes, if the major release breaks backwards compat, doesn't work with your older WP version, etc.\n. @szepeviktor can you knock this out today by chance? these two commands are the last remaining pieces for 0.17.0\n. > browser_download_url (the phar) is OK?\nFor the purposes of getting a first version out the door, I'd like to skip the actual download / update mechanism.\n. @szepeviktor can you merge master?\nI don't have any great ideas for how to test this, so I'm open to skipping. @scribu ?\n. WP-CLI is using your system PHP binary, not XAMPP's. You'll need to make sure to follow the instructions in the \"*AMP Compat\" section closely.\n. Potentially related #1296 \n. @codep0et Can you install dev-master and test again? \n. @scribu whatcha think about this approach?\nI think it solves the dependency problem quite nicely. For #963, I was considering having the setup script clone at a hash. This is basically the equivalent, but much cleaner.\n. > I'd need to see the docs that explain how you use the generated test harness after running wp scaffold package-tests.\nSame as wp scaffold plugin-tests \u2014 set up Travis and go :)\n. > You still need a walkthrough for people that aren't familiar with Travis CI config files.\nMakes sense. I've updated the command docs a bit, and will produce a wiki page in preparation for my talk tomorrow.\n. Docs https://github.com/wp-cli/wp-cli/wiki/Package-Functional-Tests\n. Er, require_once(ABSPATH . 'wp-settings.php'); is what actually loads WordPress. I'd imagine the constants and filters you've defined aren't actually applying on your site, as WordPress is loading completely before they're applied.\nWP-CLI is a bit different because it reads the contents of your wp-config.php file, strips out the require_once(ABSPATH . 'wp-settings.php'); so WordPress doesn't load when it evaluates the contents, and has its own load process. Because add_filter() and apply_filters() aren't defined until WordPress is loaded, WP-CLI fatals.\nYou'll want to put the constants above the /* That's all, stop editing! Happy blogging. */ line, and your filters in an mu plugin. I'm not sure why you're calling apply_filters() too \u2014 that probably should be add_filter()\n. > but couldn't you just wrap the filters in a conditional block? Sure, it's not the most elegant solution, but it's better than saying \"sorry, you'll have to use a plugin\".\nRegardless of what you're trying to do, you can't use filters in your wp-config.php file because the add_filter() and apply_filters() aren't defined. If you add block with filters after require_once(ABSPATH . 'wp-settings.php');, then they don't actually execute until the entirety of WordPress has executed. Your proposed solution doesn't work \u2014 this is why I suggested putting the filters in a MU plugin.\n. Created a new canonical issue for the wp-config.php problem #1631\n. > the phar at https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar doesn't seem to point to the latest version\nIt does, you're mistaken:\n```\nlocal \u279c  Desktop  wget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n--2016-08-17 06:05:42--  https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nResolving raw.githubusercontent.com... 151.101.40.133\nConnecting to raw.githubusercontent.com|151.101.40.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 4967063 (4.7M) [application/octet-stream]\nSaving to: \u2018wp-cli.phar\u2019\nwp-cli.phar                     100%[======================================================>]   4.74M  3.34MB/s    in 1.4s\n2016-08-17 06:05:45 (3.34 MB/s) - \u2018wp-cli.phar\u2019 saved [4967063/4967063]\nlocal \u279c  Desktop  php wp-cli.phar --info\nPHP binary: /usr/local/Cellar/php70/7.0.9/bin/php\nPHP version:    7.0.9\nphp.ini used:   /usr/local/etc/php/7.0/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:    /Users/danielbachhuber/salty-wordpress/wp-cli/packages/\nWP-CLI global config:   /Users/danielbachhuber/.wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version: 0.24.1\n```\n. Hi @evertramos,\nGithub issues are no longer an appropriate venue for support. Please see http://wp-cli.org/#support\n. Hm, maybe not a great idea.\n. Ideally, we'd have some way of indicating paging values in cli\\Table\n. Punt for now https://github.com/wp-cli/php-cli-tools/issues/65\n. We'd support other file types then?\n. Do you have a call to is_admin() in your wp-config?\n. Is it just wp db export, or is it other commands too?\nCan you share the contents of your wp-config.php, minus secrets? The error specifically is because WP-CLI eval()s your wp-config.php to get the constants. Normally WordPress ships with this block, which you might've modified:\n/** Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(__FILE__) . '/');\n. Tests fail?\n. Odd. It appears your wp Phar file was built with a reference to PHPUnit.\nCan you share the results of wp --info ? Have you tried reinstalling, using the instructions on the WP-CLI homepage?\n. You found a bug :) The fix will be available in the nightly build, and in the next release (~2-3 weeks)\n. You can update a site's tagline with wp option update blogdescription <your-value>\n. The cache is only used in wp core download, not wp core update. It would make sense to have for the latter too.\n. @scribu any better ideas for extending than subclassing if the filter doesn't exist?\n. > Well, you could just drop support for WP 3.5 and WP 3.6.\nMeh, the workaround is easy enough.\n. Good sleuthing. We should remove the pem file in /tmp after making the request. \n. > What is $method for?\nProbably was to specify GET vs. POST at some point.\n. One minor thing to change.\n. > It is what you were thinking?\nYes, this is fine.\n\nAre there a phar/not phar unit tests?\n\nTests are and should be independent of the distribution mechanism.\n. > Then this feature couldn't be tested.\nIt could be, but I don't think it's necessary for this case.\n. We'll eventually handled nested arguments as a part of #1784\n. > Would it be possible to remove the dependency on mysql cmdline binary?\nCould you describe your rationale in greater detail?\n\nOr is there a reason why it needs to be there?\n\nWe use it currently so we don't have to depend on WordPress to be fully installed to run database functions. For instance, wp db import.\nI'm open to pull requests, although I suspect it will be a substantial refactoring not without gotchas.\n. Closing this as wontfix \u2014 WP-CLI is sufficiently dependent on the mysql binary that I don't think we can refactor to replace it.\n. @eni23 WP-CLI should be usable without the mysql binary in all the ways WordPress is. Can you share how it's broken for you?\n\ndo not understand why you rely on a binary when wordpress fully works without it.\n\nAre you volunteering to put the time into refactoring?. I typically use the --raw flag, and then incorporate the code wherever I need to.\nCould you describe your use case in greater detail?\n. There are probably too many assumptions we'd need to make to scaffold classes. I'd say punt for now.\n. :boom: thanks!\n. If the problem only appears when the plugin is active, it's a problem with your plugin.\nSpecifically, it appears that the plugin has invalid SQL or is clobbering the $wpdb global.\n. 1. Please use Github Gists or similar to share long debug output. Coping directly into an issue is messy and lazy.\n2. Can you share the results of php -i in a gist?\n. Can you share wp --info from both directories?\n. Do you have a bash alias for wp=/usr/bin/wp?\nYou're moving the Phar file to /usr/local/bin/wp, but something is telling your session that wp should actually be /usr/bin/wp?\n. Glad you got it sorted :)\n. WP-CLI is looking for your wp-config.php most likely, and doesn't have read access to /srv\n. > Well srv is not a path it should look in either.\nWhere it looks is based on get_cwd() or a supplied --path. I guess we could have some respect for open_basedir if the value is set.\nCould you describe your configuration in greater detail, and what you're trying to do, so I can better understand the context for the report?\n. Makes sense. I'll keep this open until we handle it more gracefully.\n. In #2211, I'm going to suppress the error. is_readable() returns false if it can't read the directory, so we don't need the complexity of trying to interpret the values in open_basedir\n. To confirm, your proxy is at the server level and isn't doing any modifications to the WordPress runtime?\nBehind the scenes, wp core verify-checksums and wp core download use Requests, a standalone PHP library.\nCan you try:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp shell\nwp> Requests::get( 'http://wp-cli.org' );\nwp> Requests::get( 'http://wordpress.org' );\n. @szepeviktor please no soliciting in issues\n. @johnbillion opinions on this one? is there a use case for only deleting one instance of an event?\n. > Would you expect more than one event to be run in this situation?\nThis seems like reasonable behavior to me too.\n. You can do wp cron event list --fields=hook,args, however this currently chokes on itself because args isn't preprocessed into a string. I'll turn this into a pull request to fix it. \n\nDisplaying it as PHP-serialized data seems fine, and perhaps the only reliable option.\n\nThe pattern we've established elsewhere is to JSON-encode data when we need to present it in a table or CSV. Is there a reason you'd like it to be PHP-serialized?\n. Can you share the contents of your config.yml or wp-cli.yml file that's loading the command?\n. Couple of comments. Also, it would be great to have updated tests for this.\n. > Updated with error messages for both cases.\nThanks \u2014 can you add functional test coverage too?\n. When you want to test STDERR, you'll need to use When I try instead of When I run\n. Shipping this in #1551\n. Sorry for the late reply on this one.\nDoes errorlog-404 have WordPress plugin headers, or is it simply a reference file requiring another one?\nOur existing code doesn't read plugin headers. I suppose it could, but get_mu_plugins() only reads files directly in the mu-plugins directory.\nFrom my perspective, it's not common to have a plugin file with a plugin header directly in the mu-plugins directory \u2014 but it is common to have a loader file which requires a plugin located in a subdirectory of mu-plugins.\nBecause WordPress itself won't perform updates on mu-plugins, I'm not sure how helpful it is to include the plugin version. Ideally you want to see the plugin version because you also see whether there's updates.\nIn summary, somehow obtaining and showing the plugin version doesn't solve the full scope of the problem.\n. I'd be open to adding the version if you want to create a PR for it.\n. Could you describe what you're trying to do in greater detail?\n. Makes sense. Something similar has been on my radar for --path and the found config file.\n. Please do. I'd be interested to get your take on what additional values you'd like to see in the output. Might be worthwhile to search past Github issues to see what follow up questions have been asked after someone provides the results.\n. Need to fix tests and add functional tests of your own.\nI'm on the fence as to whether this is a good idea or not, though.\n. Let's punt for now then, and see if it comes up again in the future.\n. One idea: wp user list --network would show all users across the network, and have a sites field\n. Pull requests welcome! I haven't looked into it before, personally.\n. Related #7\nOur formula was lost somewhere along the way. We'll need to republish it.\n. Can we update the formula to use the Phar install, and remove the dependency on Composer?\n. Looks like this is back in Homebrew: https://github.com/homebrew/homebrew-php/blob/master/Formula/wp-cli.rb\n. Seems good to me.\n. > Is it possible to run without including WP? (I can't find the related issue)\nYou can run a command without loading WordPress by using @when before_wp_load in the command docs.\nI think #515 could be interesting. Haven't explored it in a while. WP-API is using the cache directory to store authentication credentials.\n. Added in #254. Not 100% sure why we internalized it, but probably because it's abandoned. I'll add a class_exists() check.\n. Indentation will look like this:\n\n. --url specifies the site context, so yep.\n\nI'd try it out but I don't want to take the risk of messing stuff up.\n\nYou should have a staging environment and/or create backups before you run potentially dangerous commands.\n. Not sure I follow. --path is respected here. A provided relative path will be relative to current working directory. Absolute paths will be treated as absolute.\nCan you clarify the problem you're trying to solve?\n. You can specify the real path, or use --path=../the-dir-above\n. Picky :)\n. :cactus: \n. > I think 0.17.0 should be released as a final wp-cli for WP 3.x\nWhy do you say that? I don't have a strong opinion one way or another \u2014 just curious to hear your reasoning.\n. @scribu how would you suggest adapting Behat to conditionally skip tests based on environment?\n. Handled in #1382 \n. > Do you want fixup commits like this squashed\nNo, that's fine.\nI'm on the fence as to whether we need a table when we already have really verbose output. Could you describe your use case in greater detail?\n. :ship: \n. WP-CLI uses WordPress core's Upgrader classes, and these steps are defined within those classes (example). This topic would be better suited for core Trac: https://core.trac.wordpress.org/\nHowever, with this being said, I'd suggest that busy sites should have staging sites where plugin upgrades are tested before being deployed to production. The entirety of a site's codebase should be tracked in version control so deployment isn't dependent on WordPress.org.\n. I'm not able to reproduce:\n```\nsalty-wordpress \u279c  wordpress-trunk.dev  wp import wordpresstrunk.wordpress.2014-08-28.0.xml --authors=skip --skip=\"attachment\"\nStarting the import process...\nProcessing post #2 (\"Test post\") (post_type: post)\n-- 1 of 2\n-- Thu, 28 Aug 2014 16:04:08 +0000\n-- Imported post as post_id #2\n-- Added terms (1) for taxonomy \"category\"\nProcessing post #3 (\"Test_File\") (post_type: attachment)\n-- 2 of 2\n-- Thu, 28 Aug 2014 16:04:08 +0000\nFailed to import Media \u201cTest_File\u201dAll done. Have fun!Remember to update the passwords and roles of imported users.\nSuccess: Finished importing from wordpresstrunk.wordpress.2014-08-28.0.xml file.\nsalty-wordpress \u279c  wordpress-trunk.dev  ls wp-content/uploads\nls: cannot access wp-content/uploads: No such file or directory\n```\nWe should update the message to just indicate that we're skipping though.\nCould you describe in greater detail how you're discovering the media files, etc.?\n. To summarize, because we'd be maybe changing the URL until config has been eval'd, --url is now potentially incorrect until the entirety of Runner::before_wp_load() has run.\nThere's a lot of code that runs in  Runner::before_wp_load(). For instance, wp core *, wp config *, and wp db * all run in that method, as well as any commands hooked into the before_wp_load hook. It seems like making this change could break something in a bad way. I'd want to see lots of test coverage for various scenarios before I'd seriously consider it.\nAn alternative: what if we added some fancy regex to sniff out and execute those conditional includes?\n\nTo resolve this, WP_CLI requires using the --url flag, or using a yaml config to explicitly set the url.\n\nThis will always be the most explicit, and best, way to define your URL context. \n. This sounds similar to #854, which I'm really tempted to reopen.\nHowever, if your database credentials are in local-config.php, we're back at square one.\n. Continued in #2079. Thanks for the idea, @mboynes !\n. I'm not convinced this is the right direction. I need to give it more thought.\n. @szepeviktor What was your use-case for this again?\n. Can you merge master to refresh the branch?\n. > Should I go the new way?\nYes please\n. We could do similar to #1306\n. Needs some functional tests. In particular, I'd like a check that installs WordPress 3.8 and runs check-update to produce this output:\n| version     | type       | package_url                |\n| 4.0         | major      |  {PATH_TO_ZIP}             |\n| 3.8.3       | minor      |  {PATH_TO_ZIP}             |\nWith a --major flag, the output would just be this:\n| version     | type       | package_url                |\n| 4.0         | major      |  {PATH_TO_ZIP}             |\nWith a --minor flag, the output would just be this:\n| version     | type       | package_url                |\n| 3.8.3       | minor      |  {PATH_TO_ZIP}             |\nIn the case of WordPress v3.8, there are other minor versions (v3.8.1, v3.8.2) and major versions (v3.9). I'm not sure whether it's worthwhile to surface those as well.\n. > Problem: WP.org announces only one version:\nOk, we'll need to work this out later then. For now, we'll only indicate the one version that's available (as relevant)\n. As it turns out, we do have a list of all WP versions http://api.wordpress.org/core/stable-check/1.0/\n. > How do we get old ZIP URLs?\nYou can build based off the version.\nPlease add functional tests too.\n. > Something like this?\nYep, although When I run wp core check-update --major should actually check the content of the table.\n. > Like this I think\nYep, pretty close! It's worth it for you to give a try. Feel free to ping me in IRC if you need help with something specific.\n\nHow about major/minor/patch in case of the core?\n\nCore only has major/minor (e.g. 3.9 and 4.0 are both major releases\n. > Where are you on IRC? server/user\nwordpress-cli on Freenode\n. Honestly, I generally use the WordPress importer entirely, as it's the most reliable way that everything will work as you expect it to.\nwp import calls $wp_import->import() directly (ref) which then iterates through the posts in your WXR file (ref) but processing an attachment bails right away (ref) if fetching attachments is disabled.\nBecause the perceived slowness is between messages, and not between this:\nProcessing post #255092 (\"American Presidents\") (post_type: attachment)\n-- 12,450 of 17,630\n-- Sat, 30 Aug 2014 15:19:40 +0000\nand this:\nFailed to import Media \u201cAmerican Presidents\u201d: Fetching attachments is not enabled\nMy bet would be that the post_exists() call (ref) is doing something slow. Or that you've maxed out the RAM on your machine and your disk is swapping. Have you tried htop or similar to see what your memory usage is when you get to 12k posts?\n. @jerrylt get this sorted out?\n. You can use xargs:\nwp site list --field=url | xargs -n1 -I {} sh -c 'wp --url={} option update <key> <value>'\n. Confirmed the bug. Pull requests welcome! Even better would be one with test coverage for wp scaffold _s\n. We'll get this fixed upstream and included in the next release. Thanks for the report.\n. Seems pretty solid, thanks. I'll give it a bit of testing before merge.\n. On second thought, I'd like to give this a bit more thought before merging. Can you describe in greater details why you're suggesting these changes?\n. @matstars Apologies for the late follow-up here. Few things need to be resolved before this is merge-ready.\n. Thanks again for your time on this, @matgargano, and my apologies for not following up on the pull request sooner. We'll consider the changes you suggest on future iterations of the bin script.\n. And the script may be rewritten in PHP, which will make these changes easier to implement with tests #2119\n. We probably just need to get #714 together.\n. @gerardjp let us know if you've been able to track down consistent reproduction steps.\n. > 1) Is there a wp-cli command to clear the old versions of plugin files in ~/.wp-cli/cache/plugin/\nGood ol' rm is your friend for this.\n\n2) Does wp-cli cache a core update?\n\nComing in 0.17.0 #1320\n. But esc_like() was introduced in 4.0, so the build fails.\nI'd like to have one more major release 0.17.0, then we can drop support for 3.6 and 3.5\n. Existing test coverage for widgets and cron covers this pretty well.\n. You'll need to make sure to include functional tests.\n. @spacedmonkey Can you turn it into a pull request? It'll be easier for me to comment on.\n. > I am not exactly sure where to put the code.\nLet's create CommandWithTerms in the WP_CLI directory (similar to CommandWithMeta), and follow the pattern of subclassing in the object file (e.g. post.php).\nSee CONTRIBUTING.md for instructions on Behat feature tests.\n. Can you include tests please?\n. features/post-meta.feature would be a good pattern to follow: https://github.com/wp-cli/wp-cli/blob/master/features/post-meta.feature\nOr any existing tests in the features/ directory.\n. Shipped in #1528\n. @nacin how do you feel about wp core i18n (list|install|uninstall)? also, is there no API for removing language packs?\n. Chatted with @johnbillion today and we came to a couple of decisions:\n- Commands will be named as wp core language (list|install|uninstall|activate)\n- We're skipping support for plugins / themes this time around. When core supports plugins / themes in a more substantial way, we'll likely move wp core language * to a top-level wp language command.\n. > Should any help be needed, feel free to get in touch.\nThanks for the offer! Mind installing the master branch of WP-CLI and giving it some testing? We're hoping to release in the next day or so.\n. That build is out of date (and doesn't include wp core language). Installing via Composer is your best bet: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-composer\n. > Maybe someone wants to learn wp-cli internals.\nI've been writing PHPdoc for the internals. When I have time to finish it up, there will be documentation on the website #1045\n. Hm, nevermind, I was mistaken. Nightly is master branch. I guess it just doesn't work sometimes.\n. > How to test it??\nI'd say skip CI testing right now. From my manual testing:\nsalty-wordpress \u279c  .wp-cli  wp cli version\nWP-CLI 0.13.0\nsalty-wordpress \u279c  .wp-cli  wp cli check-update\n+---------+-------+-------------------------------------------------------------------------------+\n| version | type  | package_url                                                                   |\n+---------+-------+-------------------------------------------------------------------------------+\n| 0.16.0  | major | https://github.com/wp-cli/wp-cli/releases/download/v0.16.0/wp-cli.phar        |\n| 0.15.1  | major | https://github.com/wp-cli/wp-cli/releases/download/v0.15.1/wp-cli-0.15.1.phar |\n| 0.15.0  | major | https://github.com/wp-cli/wp-cli/releases/download/v0.15.0/wp-cli-0.15.0.phar |\n| 0.14.1  | major | https://github.com/wp-cli/wp-cli/releases/download/v0.14.1/wp-cli-0.14.1.phar |\n| 0.14.0  | major | https://github.com/wp-cli/wp-cli/releases/download/v0.14.0/wp-cli-0.14.0.phar |\n+---------+-------+-------------------------------------------------------------------------------+\nCan we only show the latest version for each \"major\" version? e.g. drop 0.14.0 and 0.15.0 because 0.14.1 and 0.15.1 are already available.\nLastly, the semantics of semver are MAJOR.MINOR.PATCH. Our \"major\" needs to be \"minor\", and \"minor\" needs to be \"patch\"\n. :+1: \n. One last Q: If WP-CLI is up to date and --format=table, should we include \"Success: WP-CLI is at the latest version\" ?\n. > And I don't know how to determine --format's value.\n40b233b88b9a29a0221e8963dedefb4c88e97c35\n. We can re-open this when core actually supports it.\n. @szepeviktor I don't think we need a common function yet.\nHow do you feel about this error handling? It's changing existing behavior by failing hard on error, but I think this would be expected \u2014 if your wp-config were to be accidentally generated without salts, that's bad.\n. Can't json_decode() the PHP serialized API :wink: https://api.wordpress.org/core/version-check/1.6/?locale=en_GB\n. A rewrite in Node ;)\n. > Any thoughts on why the php-cli interpreter sees a synthax error in this file while apache-php interpreter does not?\nHard to say.\n\nI can't see synthax errors in it, too.\n\nYou're likely missing the closing part of an if or foreach statement.\n. Also, you'll have separate .ini files for CLI and Apache. Short tags are likely disabled for CLI, and enabled for Apache\n. > I guess it's working as expected but the documentation should be updated?\nNope, you found a bug. I think the docs are correct.\n. @phh Can you add some functional tests here?\n. Why are you entering a trailing slash?\nThere are a lot of places we could have input validation, but don't. It's your responsibility as a user to double-check the arguments you're passing.\n. Thanks @wturrell ! Can you add functional tests too, so this doesn't happen again?\n. Continued in #1406\n. Why do you have the functions disabled in your CLI .ini if you're planning to override disabled functions anyway?\n. Related #1332\n. > One of the websites might be hacked. WP codes are run when wp-cli is called.\nRight... but you run the same risk with this PR too.\n\nWhat if a site is hacked and I use wp --allow-root?\n\nThen you're executing WP code as root. This is why there's a warning message.\n. Well, that's exactly how WP-CLI checks to see if WordPress is present. You'll need to figure out the permissions issues on the files you're deploying.\n. Yep, #1240\n. @szepeviktor I'm pretty sure there's a second issue here that wasn't fixed.\n. I did some debugging before but didn't come up with any leads. I'd like to keep it open for now so that it's flagged as an issue, at least.\n. Seems like this isn't something we'll be able to fix in WP-CLI.\n. Continued in #1406\n. You're welcome to create a community package to support this. Composer + plugins is still early days, and it doesn't make sense to bundle support with WP-CLI.\n. > WP.org could be down at that time.\nYeah, happened to me locally against trunk but then didn't. \n. > Also here:\nThat use is valid.\n. I don't really want to play whack-a-mole with all functions, extensions, etc. that could be disabled.\n. Odd. What you've described works in my local environment:\n\nHere's what's going on behind the scenes.\nIf the DB_USER and DB_PASSWORD constants are set, they're passed to WordPress.\nCan you share your wp-config in a Gist with any secrets removed? There's a chance WP-CLI isn't loading the constants properly.\n. @KingYes Feel free to open this again when you have some dummy XML to work with.\n. @rodrigoprimo Can you resolve master merge conflicts?\n. > Should I remove this functionality from this PR?\nYes please\n. :shipit: \n. > All other commands fail and instead return the HTML of the page currently presented as the index of the website.\nIt sounds like your caching plugin is running when it shouldn't be. If it doesn't return the cache for logged-in users, you can use --user=<user-login-or-id>. Otherwise, you may need to switch caching plugins or modify the one you're using.\n. The most comprehensive documentation is on the website, and our wiki is a good secondary resource. For your particular issue, you'll likely need to contact the author of the caching plugin for support, if you're unable to resolve on your own.\n. I almost forgot \u2014 you can also specify --skip-plugins=<plugin-slug> to skip loading the plugin when executing WP-CLI. Depending on how your plugin is activated, this may do the trick.\n. This is because WP-CLI supports updating multiple users at once. The logic of the loop is such that if user A fails to update, WP-CLI should still attempt to update user B. I suppose we could do a hard exit if only one item is passed.\nCould you provide a bit more context around what you're trying to do?\n. Continuing this in #1430\n. Can we get the same for deactivate? And can you include some functional tests?\n. > So do we accept this as a prerequisite or do we try and catch it?\nSounds like a prerequisite to me. A misconfiguration should result in a fatal, although we should probably have a try around that DateTime construct.\n. Why don't you want to use wp db query?\n. > I'd like to have post-related function in the same command: post.\nWell, wp post list supports the s search WP_Query argument:\nwp post list --s=\"trans.gif\"\n. Yep, it's just a simple string search.\n. Related #920\nI'd be open to a new PR. We've solved the original formatting problem.\n. Export database tables, or WXR files? Can you describe in more detail what you want to do?\n. You can do with the --url flag. Example:\nwp --url=sub.site.com export\n. --url is documented in config, and it's expected that you're aware of how global config arguments work.\n. You can use WP_CLI::launch_self() (ref) to spawn a new process and run your command. It has a new $return_detailed argument, defaults to false, which will capture / return STDOUT and STDERR.\n. Why have you marked them public?\n. Ok, we'll add an exclusion.\n. > Could you finish this?\nNo rush, you can wait until you're better. Writing functional tests is good practice :)\n. > I've copied esc_utl from s&r. Should it be in utils-wp.php?\nEh, not worth it yet because when we drop support for pre-4.0 we'll still have to keep it around.\n\nCould it get into 0.18.0?\n\nCould. Needs a bit more work.\n. > Formatter does NOT handle empty results\nAn empty table is the expected result when there are no items with --format=table\n. @szepeviktor Want to wrap the tests up so we can get this shipped?\n. > Do you mean writing more tests? I am not a native english speaker.\nHa! Touche. I mean \"Let's add some tests for normal wp option list output too.\"\n. > OK?\nSorry, must've missed this earlier. Two minor nits and then it's ready to go.\n. Related #1372\n\nGot around it by installing the svn wordpress_develop and then modifying the bootstrap accordingly.\n\nTo confirm, this fixed your original error?\n. WordPress creates the uploads directory automagically the first time wp_upload_dir() is called (ref). When you execute unit tests for the first time, WP_UnitTestCase::scan_user_uploads() calls wp_upload_dir(), which fails to create the /tmp/wordpress/wp-content/uploads directory.\nIt's a permissions issue, but using sudo will mask the cause because sudo can do anything. Normally your web user should have access to write to /tmp. The next time someone runs into this, let's dive into what your /tmp/wordpress permissions end up being.\n. We should also disambiguate in the plugins list:\n\n. Oddly seems to only apply for 4.0. 3.9.2 works fine.\nError is triggered in PHP here: https://github.com/php/php-src/blob/6bbebc60ea0de6ce09ea45094b3bed1823d96cec/ext/phar/tar.c#L124\n. Actually, I can't reproduce consistently with 4.0 when I delete cache and try again. Might not be version-specific.\n. Dug into this a bit more. When using tar to extract, this is the error I get:\nsalty-wordpress \u279c  wordpress-test.dev  tar xz --strip-components=1 --directory='/srv/www/wordpress-test.dev/' -f /home/vagrant/.wp-cli/cache/core/en_US-4.0.1.tar.gz\ngzip: stdin has more than one entry--rest ignored\ntar: Child returned status 2\ntar: Error is not recoverable: exiting now\nHowever, I can use Archive Utility on my Mac to extract the archive just fine.\n. Hah, a lying cheat:\nsalty-wordpress \u279c  wordpress-test.dev  unzip /home/vagrant/.wp-cli/cache/core/en_US-4.0.1.tar.gz\nArchive:  /home/vagrant/.wp-cli/cache/core/en_US-4.0.1.tar.gz\n   creating: wordpress/\n  inflating: wordpress/wp-settings.php\n  inflating: wordpress/wp-cron.php\n  inflating: wordpress/wp-comments-post.php\nBecause the extension is mismatched, PharData fails hard. Archive Utility doesn't really care.\nNo idea how this is ending up as a ZIP though.\n. This was added in #1834\n. Related #1415\nSame consideration applies though: WP-CLI supports deactivating multiple plugins at once. Interested to hear your opinions on what WP-CLI should do.\n. Contradiction we need to solve:\n- #1551 uses \"Success\" when you pass the same value.\n- #1578 uses \"Warning\" when you try to activate an already active plugin.\n. For those subscribed to this thread, I've posted a RFC on changing the behavior #3577\n. This is being addressed by #3577. wp option set blog_public 0\n. #1436 probably does the trick for WP-CLI, but I think I'll want #959 before it would land.\n. :+1: \n. > Can this be an option\nI'd rather it work automagically, than be an option you need to configure. See https://wordpress.org/about/philosophy/#decisions\n. Can you share the contents of your wp-config.php in a gist, minus the secrets?\n. @tyedco To clarify, WP-CLI parses your wp-config.php to pull out the constants and skip loading of wp-settings.php. It loads the constants into scope using eval(). Because your wp-config.php has code after the wp-settings.php bit, WP-CLI fatals when it evals.\nAs @szepeviktor mentioned, the code after require_once(ABSPATH . 'wp-settings.php'); is better suited in a mu-plugin.\n. This seems like a feature to fix a bug or incorrect usage. This works for me:\nsalty-wordpress \u279c  www  mv wordpress-trunk.dev/wp-config.php ./\nsalty-wordpress \u279c  www  wp db export --path=wordpress-trunk.dev\nSuccess: Exported to wordpress_trunk.sql\nCan you share reproduction steps for your bug?\n. Bump @drrobotnik \n. > It is very easy to correct this problem\nWhy not submit a pull request?\n. Er, submit a pull request to Jetpack if it's an easy fix.\n. @extracreative have you tried looking in the database for the correct name and value? It seems you know what to do on the WP-CLI end\n. Looks like you're headed in the right direction!\n. Ideally you should be doing your work on a feature branch in your repo, instead of master.\n. @spacedmonkey Can you make sure your tests pass?\n. Getting close!\n. > The only really last thing to discuss is the list method. We have been talking about this for a while and I feel like we are going around in circles. To cut to the chance, will you not merge this until I have made the change you have requested or are you willing to listen to my views on it?\nYou haven't convinced me otherwise. My preference is still to follow the pattern of wp term list <taxonomy>..., which would give us wp post term list <taxonomy>.... In the future, we could consider making <taxonomy>... optional, a la wp post term list [<taxonomy>...]. Such a change would need to be a separate pull request.\nAlso, tests need to pass before I'll be able to merge. I checked out your master branch locally (and please create a separate feature branch next time), and the same tests fail.\n. > What I don't understand is I get different results from travis and my vvv box. Everything is passing for me.\nSee https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-and-writing-tests\n\nHow are you running the tests?\n\nSpecifically: ./vendor/bin/behat\n\nDo you know why they are failing?\n\nI haven't spent time debugging, no.\n. Please don't add additional commands to the scope of this pull request\n. > Why?\nBecause each pull request should address the scope of one issue. What we discussed lies outside the scope of this issue, so it should be addressed in a new pull request.\n. The end point is list, add, set, and remove terms from posts and users, with corresponding test coverage.\nFeel free to squash your commits.\nRe the second pull request, generally I like the idea. I'd like to give the syntax more thought, though. If you'd like, we can discuss on a new issue before you start on a PR.\n. @spacedmonkey any idea when you'll be able to finish this up?\n. :+1: \n. See --url:\n\nPretend request came from given URL. In multisite, this argument is how the target site is specified. \n. Related #1372\n. How would this work with Phar distribution? And would this work reliably for 95% or greater of users? I'm not keen on having to maintain something that only works for a small percentage of users.\n. > I don't know if this works.\n\nTravis builds the Phar file and pushes it to the builds repo:\n1. https://github.com/wp-cli/wp-cli/blob/master/ci/prepare.sh#L9\n2. https://github.com/wp-cli/wp-cli/blob/master/ci/deploy.sh\nYou can build a Phar file yourself locally with utils/make-phar.php\n. Passing on this issue \u2014 the install instructions on the homepage seem sufficient.\n. Try escaping:\nwp eval \"var_dump( \\$GLOBALS['shortcode_tags'] );\"\n. @ajf- Apologies for the late reply.\nWhich version of WP-CLI are you using? A very similar sounding bug was fixed in #1318 and released in 0.17.0\n. > But in my case, I need the --post_type argument, because if I don't use it, I get Error: Term is missing a parent..\nYou have an orphaned term in your data set. Specifying the --post_type argument bypasses the call to include terms in the export.\nBack to your larger problem, I can't reproduce using a derivate of the supplied steps:\nsalty-wordpress \u279c  src  wp post list\n+----+--------------+-------------+---------------------+-------------+\n| ID | post_title   | post_name   | post_date           | post_status |\n+----+--------------+-------------+---------------------+-------------+\n| 5  |              |             | 2014-11-01 17:58:03 | draft       |\n| 1  | Hello world! | hello-world | 2014-10-28 17:16:48 | publish     |\n+----+--------------+-------------+---------------------+-------------+\nsalty-wordpress \u279c  src  wp export --post_type=post --skip_comments --max_file_size=0.1 --post_status=publish --post__in=5\nStarting export process...\nWriting to file /srv/www/wordpress-develop.dev/src/wordpressdevelop.wordpress.2014-11-10.0.xml\nSuccess: All done with export.\nsalty-wordpress \u279c  src  ack item /srv/www/wordpress-develop.dev/src/wordpressdevelop.wordpress.2014-11-10.0.xml\n<item>\n</item>\nI know that core has a bug where passing an empty array as post__in will return all posts, instead of an expected empty set of posts. Maybe getIds is failing for a post type, which blows up your sample?\nJust to confirm, you've disabled all plugins / non-core code that might be modifying the query?\n. After #1685 is merged, the error message will include the term slug and term taxonomy ID. You can install nightlies following these instructions: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-nightly-via-phar\n. Why not use token-based authentication?\n. Ok. This will be difficult, if not impossible, to write test cases for, but I am open to supporting.\n. Closing this as wontfix. I don't think there's sufficient need to have this as a part of WP-CLI.\n. Can you share your wp-config.php, minus any secrets?\nRelated threads:\n- https://github.com/wp-cli/wp-cli/issues/992#issuecomment-36421408\n- https://github.com/wp-cli/wp-cli/issues/1310\n. That's core's default config, which isn't used by Pantheon. Can you share your wp-config.php as it exists on Pantheon?\n. You can remove everything beyond define('WP_DEBUG', false); from your wp-config-local.php.\n. Created a new canonical issue for the wp-config.php problem #1631\n. Duplicate of #1389\n. > On Windows, the mkdir command should be parameter-less.\nDoes Windows support some manner of recursion for mkdir?\n. :pineapple: \n. @tillkruess This means Capistrano isn't recognizing wp as a valid executable. Which directory have you installed WP-CLI to, and using which installation mechanism?\n. I suspect you have an alias for WP-CLI provided by Siteground that your user loads via .bashrc or .bash_profile\nYou'll want to get Capistrano to load the PATH to the WP-CLI binary using its default_environment variable. Something like this:\nset :default_environment, {\n  \u2018PATH\u2019 => \u2018/chroot/wp-cli/vendor/wp-cli/wp-cli/bin:/usr/local/bin:/usr/bin:/bin\u2019,\n}\nHere are a couple of related Stack Overflow threads:\n- http://stackoverflow.com/questions/23672631/capistrano-and-environment-variables\n- http://stackoverflow.com/questions/7602548/capistrano-can-i-set-an-environment-variable-for-the-whole-cap-session\n. Good guess \u2014 I'd suspect that too. We'll get this fixed in the next release.\n. - Have you reached out to your hosting company to see if they might've made recent changes to the infrastructure?\n- What happens when you set up a fresh WordPress install with one out of date plugin and attempt an update?\n- Can you private screenshots or gists of the output you see while debugging?\n. Most likely an environment-specific issue \u2014 hard to say what it could be.\n. You could regex to clean up the data. If you only need an easy solution for all possible URLs, you could just update the URL for WordPress in the database, and set up a redirect for all of the old URL patterns to the new.\n. > My real problem are the image urls. Those shouln't change.\nThis is why I suggested the redirect approach, as it will be easier to inspect the incoming request URL for file extension (or lack thereof). You could write some fancy regex for your search and replace but, if you later discover you get it wrong, it's not as easy to fix as a code change.\n. One thing to consider: is it expected behavior to destructively override whatever is in those directories?\n. Eh, I can see the argument both ways. Similarly, if readme.html is missing, should checksum fail?\nHow did you discover this, and what impact has it had to your workflow?\nWe could maybe add a feature to easily restore the file (or even diff your version against WordPress.org)\n. > The point of a checksum is to check if the package is complete and valid. If you remove anything from the package then the checksum should fail.\nI agree.\n. This looks fine \u2014 I've visually confirmed the variables aren't used. Can you merge master?\n. :cocktail: \n. :ship: \n. @shawnhooper using the Gist you've provided, here's what I see:\n```\nsalty-wordpress \u279c  wordpress-develop.dev  wp --require=gistfile1.php db\nusage: wp db cli\n   or: wp db create\n   or: wp db drop [--yes]\n   or: wp db export [] [--=] [--tables=]\n   or: wp db import []\n   or: wp db multisite \n   or: wp db optimize\n   or: wp db query []\n   or: wp db repair\n   or: wp db reset [--yes]\n   or: wp db tables [--scope=]\nSee 'wp help db ' for more information on a specific command.\nsalty-wordpress \u279c  wordpress-develop.dev  wp --require=gistfile1.php db multisite\nusage: wp db multisite exportmulti [] [] [--=]\nSee 'wp help db multisite ' for more information on a specific command.\n```\nAlso wp --require=gistfile1.php db --help produces the expected results.\nAs @szepeviktor mentions, wp db executes before WordPress is loaded, so you won't be able to override in a plugin or similar.\n. There's not an easy global solution for this, as there are valid uses for storing files in wp-content/uploads that won't necessarily be registered as attachments. Backups, for instance.\nCreating a one-off command would be your best bet. I'd encourage you to spot check the results, and even create a backup, before you start deleting files.\n. > Maybe it would be worth it to add a check for Suhosin and 'detect_unicode = Off' into wp-cli to help people in the future (and lessen the number of Github issues)?\nNot sure how you'd do this with the Phar installation, independent of bundling a separate system check script. We can revisit in the future if it becomes a persistent problem.\n. What specifically do you want to do?\n. Hm, I don't think we need a command for this. wp db query should be fine.\n. > so I think it is a core command in other Unices too.\nOnly used in documentation, so I'm not too fussed.\n. Confirmed bug. d7ae0c41ae9b1fcd3f9f577222e361d548f61d6c seems like a likely culprit\n. Actually, it's ab394eb23f49ca41bc78ab99081d064231a0fd3b\n. It would make sense to me to have wp taxonomy list default to listing all taxonomies, and then --post_type=<post-type> would filter to those assigned to a given post type.\n. > Do any of you think that other fields returned by get_taxonomies() are useful and should be included as well?\nNah. We can always add them later.\n. wp taxonomy get was introduced in #2173\n. Name your method clone_ and add @subcommand clone to the PHP doc for the method.\nSee existing uses of list_ for prior art.\n. :cocktail: \n. We already do... https://github.com/wp-cli/wp-cli/blob/master/php/commands/plugin.php#L275\nWhere / how did you produce that?\n. @szepeviktor good catch :)\n. > Now there are 78 commits. When do you plan 0.18?\nProbably not until December. I'd like to wrap up some of the bugs though, and get a 0.17.1 out.\n. Some questions that might help you in the debugging process:\n- Is the problem fixed when you disable all plugins, etc.?\n- What are other commands that work, vs those that don't?\n- Are you running multisite by chance?\n- How do the wp-config.php files differ between installations?\n. > Shouldn't I see at least some kind of PHP error from WP-CLI or something like that?\nIt does for me. Here's what the --debug flag does. Any chance there's some error suppression configured in another plugin?\n. Thanks for following up, @borekb \n. > But now even commands that have @when before_wp_load give this error: Error: The site you have requested is not installed.\nCan you share the command you've created? How are they being loaded?\nbefore_wp_load works in both cases. As an example:\n```\n<?php\nclass Test_Command extends WP_CLI_Command {\n/**\n * @when before_wp_load\n */\npublic function __invoke() {\n    WP_CLI::success( \"I can run this before WordPress is installed\" );\n}\n\n}\nWP_CLI::add_command( \"test\", \"Test_Command\" );\n```\nsalty-wordpress \u279c  wordpress-develop.dev  wp test\nError: The site you have requested is not installed.\nRun `wp core install`.\nsalty-wordpress \u279c  wordpress-develop.dev  wp --require=test-command.php test\nSuccess: I can run this before WordPress is installed\n. > It would be nice if the wp menu and options could be loaded when wp is not installed but that's a different issue I guess.\nThat's tough, because commands can be registered via themes and plugins \u2014 which WP-CLI can't really access unless WordPress loads fully.\n. Wouldn't this change the current behavior if you have two plugins of the same name installed in plugins and mu-plugins?\n. I can't say that I'm convinced this is a good idea, or that it's harmless.\nmu-plugins are a weird child of WordPress \u2014 yes they can appear as active in the WordPress admin, but you can't update, activate / deactivate, or uninstall them. Indicating there's a version would also imply that \"update\" should be accurate, and that you should be able to update the plugin. Neither of these cases are true however.\nIf you want a WordPress.org plugin to always be active, but have it work like your other WordPress.org plugins work, you should create a mu-plugin that filters the active_plugins option to always load it.\n. > There is a workaround for that already:\nWhy are you building workarounds? Why not just filter active_plugins to force some plugins to be loaded?\n. > Do you mean add_filter( 'pre_option_active_plugins' ... ?\nCorrect\n. You can skip the loading of one or more plugins with the --skip-plugin= global argument.\nIf you want to make this a more permanent thing, you can create a config file for your project or globally.\n. @ducktype in addition to fixing the issues, I'd like copious functional and unit tests.\n. @scribu (repost) because we're doing a massive merge of global, project, and runtime configs, how do you see sorting out the source of the require?\n. Looks like d4fa0c697849bbf46f2f095f968f400e3514cf9c (and 8e0076c634b659cf3776b4c984816572d3aeb689) were the genesis. I'd call it a bug that you can't specify an explicit version number. \n. Although, wp plugin update <plugin> --version=1.2.3 could just call wp plugin install <plugin> --version=1.2.3 under the hood\n. :ship: \n. Heh, this has been broken for a while a9adf7b78bcefe3b5db03e167f53c6263dab1549\nI think we'll change it to --skip-delete\n. Sorry, not sure I follow. Arguments that start with --no have a special meaning, as documented in a9adf7b78bcefe3b5db03e167f53c6263dab1549\n--skip is a better prefix to use if you'd like to skip some behavior.\n. What form of tax query do you want to do? WP_Query supports <taxonomy>=<term-slug>\n. Seems like there's a missing library. Googling the error gives me this: http://stackoverflow.com/questions/26440765/drush-error-after-yosemite-update\n. Yeah, I think it's a network bug.\n. @scribu Feeling pretty stuck on this. Any good ideas?\n. I've spent a lot of time thinking about priming the download cache, either for each test or on a proxy server. But I don't want to create a gap in test coverage for installing.\nTo speed things up, I tried using the same WP install between scenarios, with mixed results. I also spent some time auditing Behat runs for performance, only to realize that loading WordPress is the slowest part. \nAt this point, I'm desperate for new ideas, as the build is failing all too often for unrelated reasons.\n. > Do maybe_unserialize() on the response body!\n@szepevictor How would this solve the problem of builds failing because of network issues? The problem is that the failure is happening in the first case, not that we're inappropriately reporting it.\n. > BTW I think Importer plugin install silently fails.\nIt does, but for those failing tests in particular, it's a precondition, not something that is being tested.\nChatted with @nacin some in Slack. Apparently WordPress.org has recently started blocking bots based on IP or request frequency. This is now my prime suspicion. We'll need to see if we can find a workaround.\n. i w\n. Erps, mobile keyboard fail. My preference would very much to be solving this in a way that doesn't require us to maintain some hack.\nIf you want to spend some time debugging the error response WordPress.org is giving us, that would be extremely helpful. It will require adding debugging code, triggering builds, and catching failing build.\n. Travis actually has beta functionality to cache dependencies between builds, but it's only available to paid, private repos. We could build and maintain a cache ourselves, if we had some way of also testing that WordPress.org connections were working. Not sure whether the actual update check is being throttled, or the download.\nAnother potential option: switch to Scrutinizer CI. Even though the network issue may not be solved, I've notice anecdotally that builds on public projects start much faster (which would make restarts less painful). Plus, the starting point for paid plans is much more reasonable.\n. > Would it be OK that I regularly test WP API-s, plugin and theme repo from Travis and publish the results?\nI don't really want to build a HTTP proxy, or our own version of the plugins repo, because that only mitigates the problem \u2014 it doesn't solve it.\n. > This one is about testing WP infrastucture and report errors publicly.\nNot sure I follow. Testing WordPress.org infrastructure is outside the scope of the WP-CLI project.\n. That if we maintain our own cache, we still need some way of regularly testing that installing themes / plugins / core actually works.\nI've started a Meta ticket for seeing if we can get around the throttling issue: https://meta.trac.wordpress.org/ticket/784\n. In testing 04a8a7168d00cebbf9719bf63b356efd086a5c2c locally, plugin installation failed once and the test failed later than the step \u2014 because warnings thrown on plugin installation don't return elevated return codes (#1430).\n. After #1618 drops, we can filter WP_HTTP to serve from our cache in limited contexts.\n. New error:\n\n. These errors seem to have fixed themselves.\n. :sushi: \n. Can you provide more context into what you're trying to do?\nFrom the scope of your custom command, DB_HOST will be 127.0.0.1 because that's the evaluated statement.\n. > Was just curious to know if a more elegant solution existed out there\nNot in WP-CLI, no. sed is your best bet \u2014 it doesn't make sense to reinvent the wheel in WP-CLI.\n. WP-CLI applies some regex to pull all of the details out of your wp-config.php without actually loading WordPress. The line you've changed is what's breaking the regex, so WordPress gets loaded before it should.\nHere's a related thread with more detail: https://github.com/wp-cli/wp-cli/issues/1310#issuecomment-50996668\nAnd more background: http://wp-cli.org/blog/how-wp-cli-loads-wordpress.html\n. Created a new canonical issue for the wp-config.php problem #1631\n. We don't officially support HHVM, so YMMV.\n. The fact that there's an issue here means that the next person to run into the problem will see that it's been acknowledged. I suspect it's an issue with a specific version of HHVM that will probably be fixed if it's a common issue. Segmentation faults are in the PHP implementation, not the application itself.\n. Meh, doesn't come up often enough.\n. :+1: \n. Seems we already have a similar example:\n\n--status correlates with comment status, per get_comments()\n. Yep.\n. Seems like it would be a good improvement.\n. > That amount of destructive power should not be the default behavior of anything you run on a WordPress site.\nIf you're worried about accidentally breaking WordPress, you probably shouldn't be using WP-CLI ;)\nI'm open to changing the default behavior, though, and replacing --skip-update with --force\n. > looks like it's from the wp-cli repo so is --force now a flag, is --skip-update now dead, or are both in existence?\nI think it looks like it's from the WP-CLI repo because @joshbetz must've deleted the original repo with the commit.\nWe just have the --skip-update flag: http://wp-cli.org/commands/user/import-csv/ At this point, I don't think it makes sense to change the behavior.\n. > I guess we will have to open a new ticket on core.\nPlease link the ticket here when you open it.\n. @rodrigoprimo Can you provide a reproducible test case for this? I'm not sure whether it's still a bug, as I can't reproduce locally.\n. @rodrigoprimo \ud83d\udc4d  thanks\n. @rodrigoprimo @ernilambar Is this a core bug, or a WP-CLI bug?\n. Ok. If someone can reproduce this with specific steps and identify where the bug is with WP-CLI, then we can get it fixed.\n. :+1: \n. Go for it.\n. Whomever submits the best pull request. We don't really have issue assignments\n. > Should they be wp transient get name --site or wp transient get-site name?\nWe should have wp site transient <command>, I think\n. > It seems like a copy&paste job.\nNope \u2014 won't merge a copy and paste job :wink:. I will merge a sensible abstraction, though.\n. :+1: \n. Thanks for the report. This was originally reported in #1427. Haven't tracked down the cause :(\n. > I'm thinking a warning should also be given in wp-cli?\nSure, we could throw a warning.\n. See #1488\n. See #1427\n. Good suggestion.\n. Can you merge master to fix tests, and add some tests to cover this behavior?\n. You can append to this file: https://github.com/wp-cli/wp-cli/blob/master/features/plugin.feature\nHere's an introduction to tests: https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-and-writing-tests\n. :+1: \n. > is it possible to minimize maintenance time by putting all to-be-updated plugins in the file cache?\nI like this idea better \u2014 seems like it would be smart of WP-CLI to do so.\n. This can be done with https://github.com/runcommand/precache\n. Tests are failing because of a version update: #1513\nCan you merge master and push?\n. Related #1631\n. At a glance, SHORTINIT still seems too late because it's after:\nif ( WP_CACHE )\n    WP_DEBUG ? include( WP_CONTENT_DIR . '/advanced-cache.php' ) : @include( WP_CONTENT_DIR . '/advanced-cache.php' );\nand:\n// Initialize multisite if enabled.\nif ( is_multisite() ) {\n    require( ABSPATH . WPINC . '/ms-blogs.php' );\n    require( ABSPATH . WPINC . '/ms-settings.php' );\n} elseif ( ! defined( 'MULTISITE' ) ) {\n    define( 'MULTISITE', false );\n}\n. Closing in favor of #1631. SHORTINIT isn't early enough.\n. @rodrigoprimo where is this at?\n. > I don't understand what you would like to know (might be a language problem).\nSorry, slang :/ Is this ready to be merged, or does it need additional work?\n. > A next step could be adding a --deactivate flag to wp core language uninstall.\n--deactivate meaning revert to US English? We don't yet have wp core language deactivate\n. Literally \"var\" is appended to the URL? I can't reproduce this.\nCan you test against a fresh install of WordPress, with no mu plugins?\n. Ok. This is a problem specific to your environment then, and not WP-CLI. It's hard to say where the problem might be at, without access to your codebase.\n. > After further debugging, it looks like this bug occurs is in the wp_insert_post function. Carry on.\nCare to open a ticket with WordPress core?\n. > In this particular case, I'm building WP CLI into a web-based API.\nI can't say I've ever thought this would be a good idea, so interested to hear why you've gone down the route.\nI'm pretty sure we're not going to add a flag so you can disable less. I'd be open to making the pass_through_pager protected so you can subclass and override. Or, maybe, given we already have a hook system, add basic support for filters.\n@scribu preference as to either of those options?\n. It's in the 0.18.0 milestone, because it's an enhancement.\n. > Am I missing something or just not done yet?\nNot done yet \u2014 pull requests welcome :)\n. I take this back \u2014 we already have wp theme enable: http://wp-cli.org/commands/theme/\n. @daithi-coombes seems to be some code missing from your PR?\n. Needs functional tests: https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-and-writing-tests\n. @daithi-coombes Looks like you need to debug why your test is failing.\n. Continuing in #1584\n. Good suggestion. It would be nice to mirror these options for wp site:\n\n. We're not going to make this an option.\n. See also discussion in #4662. > I just realised, that parameters can be passed in when the event is scheduled.\nYep, this is the best way to do it.\n. Looking pretty good! Just some minor things to finish up.\nLooks like the build only fails right now because wp_remove_object_terms() doesn't exist until WordPress 3.6. I'd recommend just copy and pasting it to a protected method on the class, and mention that it's a backwards compat shim.\n. > Do you have a good example of this anywhere else in the code base?\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/search-replace.php#L253\n. > So you want me to copy wp_remove_object_terms function into my command?\nYes, as a private method. We can remove when we drop support for < WP 3.6\n. :+1: Thanks for sticking with it :)\n. Oh, and to answer your earlier question, hoping to ship 0.18.0 in two to three weeks.\n. Thanks!\n. What's the fatal error? Can you share an example of how you're using it?\n. Still not enough detail to debug this. Can you share:\n- Code associated with the plugin, in a Github gist or similar?\n- How you're calling WP-CLI?\n- Gist of the error ourput?\n. > Someone do let me know if there's a more correct or elegant way to do this.\nwp core download doesn't support SVN checkouts at this time. The way you've described seems reasonable.\n. > However, in order to create a test for this command, it should be possible to set WP_CLI_VERSION at build time.\nWhat do you think is the best way to do this?\n\nAlso, one of the jobs of the Travis build fails because the WP Importer plugin is not installed.\n\nYeah, that's #1493\n. > However, in order to create a test for this command, it should be possible to set WP_CLI_VERSION at build time.\nGiven that each build runs the full suite of tests, I'm not sure how I feel about setting WP_CLI_VERSION to an \"incorrect\" value at the beginning of the build just for the purposes of one test. \nInstead, we probably should set it at runtime. How do you feel about this?\nI like #1539 generally though, so I think we can keep that once you address the modifications I've proposed.\n. > Such test will need an entirely different build anyway.\nGood point. Ignore my runtime suggestion then. I think we'll just need to have a bespoke Travis build for testing the update process, outside of the standard matrix.\n. This is looking solid. A few minor comments to address. I'll set aside some time next week to check the branch out and test throughly.\n. :+1: Thanks for your work on this!\n. > Offer update instructions when installed via Composer/Git\n@nyordanov Do you have any recommendations for this?\n. Punting on the last item \u2014 Composer and Git installers can manage their own updates.\n. The mb_detect_encoding() function is somehow missing on your system, but mb_substr() exists.\nDo you have much control over your system? Can you look into how this might be the case?\n. > What exactly are you interesting in? I can provide you any information!\nWhy mb_detect_encoding() is undefined, but mb_substr() is defined. You'll need to do some debugging.\n. > Could it be a namespace problem?\nNope, mb_detect_encoding() never existed in that namespace.\n. > I want to use a mustache template, where should I store the template and is mustache automatically included to work in custom commands?\nWithin your command directory, you could create a subdirectory called templates, as WP-CLI has done. Then, you can use Utils\\mustache_render() to render the template, as wp core config does. Note: you'll need to supply the full path to the file.\n\nCan I access other commands in different files from my command? e.g. i want to call Core_Command::_read to generate some salts.\n\nIf you want to spawn a new process, you can use WP_CLI::launch_self() (ref). If you don't want to spawn a new process, you can use WP_CLI::run_command() (ref).\n\nTo install my command i can simply require the command in my ~/.wp-cli/config.yml?\n\nYep, see the bottom of: http://wp-cli.org/config/\n. :+1: \n. @rodrigoprimo if you had one warning and one success, what would you expect the end message to be?\nRelated #1430\n. Dig it.\n. > It the meaning of die(1) documented somewhere?\nMeans that it exits with 1 as the exit code.\nIt was introduced in 33fb1c6d9d39540e1a804201c6f2d7f58b9f5f0d, although I'm not sure why.\ncc @scribu \n. > Anyway, in the current codebase, I think CommandWithMeta::check_object_id() should be abstract, instead of defaulting to no error checking.\nI thought about that, but user meta supports login, email address, or ID. \n. Related #1531\n\nOne of the posters said: I feel this is more WP-CLI issue. They simply don't load /wp-includes/vars.php as they use alternative wp-settings-cli.php file to load core.\n\nThis is helpful \u2014 I know exactly what's going on.\n. name isn't a supported argument for get_terms(). Yet. I've submitted a patch for it https://core.trac.wordpress.org/ticket/30611\n. Already reported (and fixed) in #1537. If you could follow up on that thread with more debugging, it would be appreciated.\n. Worked for me:\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin list\n+----------------------------------+----------+-----------+---------+\n| name                             | status   | update    | version |\n+----------------------------------+----------+-----------+---------+\n| akismet                          | inactive | available | 3.0.2   |\n| co-authors-plus                  | inactive | none      | 3.1.1   |\n| handbook/handbook                | inactive | none      |         |\n| handbook/functionality-for-pages | inactive | none      |         |\n| hello                            | inactive | none      | 1.6     |\n+----------------------------------+----------+-----------+---------+\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin delete hello\nSuccess: Deleted 'hello' plugin.\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin list\n+----------------------------------+----------+-----------+---------+\n| name                             | status   | update    | version |\n+----------------------------------+----------+-----------+---------+\n| akismet                          | inactive | available | 3.0.2   |\n| co-authors-plus                  | inactive | none      | 3.1.1   |\n| handbook/handbook                | inactive | none      |         |\n| handbook/functionality-for-pages | inactive | none      |         |\n+----------------------------------+----------+-----------+---------+\nCan you delete it through the WordPress admin? What custom code do you have running on your site?\n. > Maybe I should've mentioned that I ran this on Windows 8.\nAh, I can see that maybe being a problem. Unfortunately, I don't have access to a good way of testing Windows 8, and Windows support for WP-CLI is generally mixed.\nCan you delete other plugins? And can you delete Hello Dolly through the WordPress admin?\n. @lordspace can you submit a PR after you test?\n. > I'm also getting this on Mac OS X 10.11.3 using WP-CLI 0.22.0.\nGiven this originally was a Windows issue and you're on a Mac, it's probably not the same issue.\nDeleting hello appears to work for me:\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin list --name=hello\n+-------+----------+--------+---------+\n| name  | status   | update | version |\n+-------+----------+--------+---------+\n| hello | inactive | none   | 1.6     |\n+-------+----------+--------+---------+\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin delete hello\nSuccess: Deleted 'hello' plugin.\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin list --name=hello\n+------+--------+--------+---------+\n| name | status | update | version |\n+------+--------+--------+---------+\n+------+--------+--------+---------+\nIf you can still reproduce, can you open a new issue with more details and steps to reproduce? We can also use it as an exercise to improve our reporting a bug doc.\n. Continued in #2140\n. Good catch \u2014 thanks for the report.\n. :) \nand read the release notes ;)\n. You can use wp post update <id> /path/to/file. wp post edit launches an editor.\n. Punt \u2014 the slowness really is in loading WordPress, not these HTTP requests.\n. For feature/comment.feature, this was a speed improvement of ~2 seconds (0m19.255s vs 0m21.388s). Not sure it's worth it.\n. Ultimately, loading WordPress is slow \u2014 which is the bulk of most feature tests.\n. Punt \u2014 not worth it.\n. @nyordanov can you update so this merges cleanly?\n. ... if only the damn build would pass... \n. @nyordanov I've restarted this build a half dozen times and it always get stuck on the same thing. Can you reproduce locally?\n. Odd. I'd expect them to fail across the board if it was a PHP version issue. Can you merge master once more?\n. No idea. Maybe the merge failed in some uncommunicated way. Can you create a fresh branch off master and cherry-pick your commit?\n. > It looks like it was a PHP 5.3 issue after all (or possibly specific to the 5.3 used by Travis?).\nThe road to hell is paved with CI errors you can't replicate locally.\n. \n. 8b59d511034ff8313a7b9eb48043173fc7137a45\nThanks for following up on this, @nyordanov \n. > In that case, wp-cli should return a warning or an error telling it cannot deactivate it this way.\nYep, I agree #1578\n. Er, not sure what this is. Next time, please submit any large code snippets in Gist or similar.\n. This diff is for an upstream library. You should submit the feedback there.\n. > I would love to see it become a builtin command on wp-cli so we can default on it for our company.\nProbably won't ever happen, but it would be great if it was much easier to install community packages #1564\n. :+1: nice work!\n. > But for some reason I can't see them. Results only get flushed when the script ends.\nHard to say why without seeing the script.\n\nShould I set up some specific setting for this?\n\nYou should write a proper command and use WP_CLI::log() and similar for verbosity.\n. Shell tips would be a good place for this: https://github.com/wp-cli/wp-cli/wiki/Shell-Tips\n. Pretty sure this was fixed by #1532. Can you install nightly and confirm?\n. Cristi actually set up a Satis instance for us, so we have our own Composer-compatible package index: https://github.com/wp-cli/package-index\nMy second attempt, worth looking through above, actually used Composer as a dependency. Not just Composer the executable, but Composer the library.\nIt sucked to work with. I don't know if there's a better option though, for what Composer provides.\nThe pieces we need are:\n- Browse packages recorded in a central library.\n- Install a package from the library. Composer actually supports multiple installation mechanisms if I recall correctly: Git, direct link to ZIP, SVN, etc.\n- Resolve dependencies for each package on installation (maybe, because dependencies isn't really a pattern in WordPress)\n- Update installed packages.\nOf course, the easy way to do this would be to invent some directory format for people to list their Github packages, and have WP-CLI simply be a wrapper for git clone. Cristi pushed for not reinventing the wheel, which I understand. \nBut, we're a year and a half later with no package repo. I am open to suggestions.\n. No updates at this time.\n. Prototype landed in #2442\nWhile I had a long debate previously with @scribu about this, where he was against it, I've decided to use a separate Composer project to manage community packages for two reasons:\n1. Most WP-CLI installations are Phar-based these days, which makes @scribu's original points moot.\n2. It avoids the potential for catastrophic breakage which blocked #936 from landing.\nCommunity packages are installed to ~/.wp-cli/packages, unless you specify a separate WP_CLI_PACKAGES_DIR. Composer generates a vendor/autoload.php for the project, and WP-CLI loads it in its bootstrap process.\nWe'll see how well this command works out :) Consider it a very early prototype, and liable to change (or be removed) I'd encourage all interested parties to run wp cli update --nightly, and try to break it as many ways as they can.\nCouple things I'm already aware of:\n- [ ] There's no clear way to wp package update yet.\n- [ ] If your package autoload file is referencing a package that doesn't exist, it breaks WP-CLI. I don't know how we can validate the autoload file.\n. I'm going for it. This will land in v0.23.0, but be flagged as a beta feature as there are a few to several moderate usability issues to work out.\n. @pvanbavel I think you need to convert the line endings in the file. This StackOverflow thread seems related: http://stackoverflow.com/questions/6473766/syntax-error-near-unexpected-token-in-r\nCan you try this and let us know how it works out?\n. I'd be open to it.\nRelated #1347 \n. Punting on this. We have an actively maintained Homebrew distribution, and it's just as easy or easier to keep up to date with wp cli update\n. Thanks @rodrigoprimo. I'll take a look this week.\n. > To fix it I had to revert a change made in aa27fd9 which I'm not sure if it was intentional or not.\nThis must be a bug in the upstream patch. Can you report on the ticket? https://core.trac.wordpress.org/ticket/22435#comment:38\n. > For a client work, I replaced --category= parameter of wp export with --= to make it possible to filter posts to be exported by a given term of any taxonomy and not just categories.\nHow did this work? The new exporter doesn't support arbitrary WP_Query-style arguments.\n\nLet me know if you think this should be in WP-CLI core and I will create a pull request.\n\nIt would be nice to support all arguments that can be passed to WP_Query. However, we'll want to have wp_export() updated in the upstream project before we adopt such a change here.\n. At this point, I don't think we're going to make any large modifications to the exporter until there's clear direction from WordPress core on how the importer / exporter are intended to evolve. I'm not keen to maintain a fork.\nFor now, you could achieve similar results by using wp export --post__in=$(wp post list --<taxonomy>=<term>)\n. Yolo merging so I can use this code on the other failing tests.\n. Punting on this for now because I had just committed for debugging purposes.\n. Thanks! Missed that part :)\n. > Please add tests.\nWe don't need tests here, as we don't run tests against Windows.\n. Thanks @lordspace !\n. It would also be nice if iThemes fixed their plugin to ignore WP_CLI.\n. Thanks @ChrisWiegman !\n. :ship: seems to work pretty well in my testing\n. @rodrigoprimo did you find any good docs that describe the distinction between statuses?\n. @andreascreten @scribu can I get a sanity check on this?\n. Given that menu_icon can also support a reference to a file, how do you think that should be supported?\n. Going to rename the flag to --dashicon in a follow-up PR\n. Can you copy and paste the contents of your wp-config.php file, minus any secrets?\n. You'll need to drop the following (which isn't executing anyway):\nadd_filter( 'http_api_transports', function()\n{\n    return array( 'streams' );\n});\nActions and filters don't work in your wp-config.php because the functions aren't defined yet. It's not causing a fatal on your site because the entirety of WordPress is loaded before the filter is defined. WP-CLI tries to parse the constants out of your wp-config.php, hence the fatal. If you do need the filter, you'll want to create a mu plugin for it.\n. Created a new canonical issue for the wp-config.php problem #1631\n. For the zero exit code, see also #1430\n. You should read #936 throughly. If we use Composer internally, we'll need to require it as a library, not depend on it as a binary.\nAdditionally, we support installing WP-CLI standalone with Composer. In fact, I have my instance installed to ~/.wp-cli. We'll need to be sure the package command handles this gracefully.\n\nAdd Satis support to easily find community commands? search subcommand?\n\nWe have our own package index which produces a flat JSON file: https://github.com/wp-cli/package-index Searching can be added within WP-CLI, as we won't have enough packages for a while to merit building it into the package index.\n\nComposer's output is current not displayed, maybe suppressed by WP-CLI?\n\nYou'll want to use the WP_CLI\\Process class if you want to display the results of a shell command triggered by WP-CLI. \n\nHow to test the phar version of wp-cli?\n\nFor now, you can write feature tests, run them locally, and know they'll be run in Travis against the Phar version of WP-CLI. Travis builds a Phar before it runs the tests.\n. > How would requiring composer as a library look like?\nUsing Composer to require Composer https://github.com/wp-cli/wp-cli/pull/936/files#diff-b5d0ee8c97c7abd7e3fa29b9a27d1780R18\n. @sebastiaandegeus Planning to take this forward?\n. This needs to use Composer as a library, not a binary.\n. Works for me :smile: \n. > /srv/www/wp-cli/vendor/autload.php exists\n\"autload.php\"? Typo?\nSome more debugging steps:\n- Can you try re-installing WP-CLI once more to make sure something didn't break when Composer ran?\n- What's loaded in your global config? Can you try disabling that?\n- Does it break when you install via the Phar installation mechanism?\n- Are any of your projects using Composer?\n. What's the contents of /home/vagrant/.wp-cli/config.yml?\n. Er, why do you have that required twice?\n. > where else is it required?\nWP-CLI handles it for you\n. > When I'm done, I'll write a blog post about it and will let you know, this would be probably helpful for other windowsians as well :)\nGreat :) Would be a helpful addition here: https://github.com/wp-cli/wp-cli/wiki/Plugin-Unit-Tests\n. > I really like the idea of aliasing this specifically to replace the domain, since that's probably the most common use case.\nEh, I don't really want to add an alias. You're welcome to create your own command though.\nWere you able to track down why it wasn't performing any replacements?\n. @gpspake Is there something we could make more clear in the docs? http://wp-cli.org/commands/search-replace/\n. What's the source of the problem connecting to the database?\n. Could you provide a bit more detail as to why it would be useful?\n. Fair enough. I'm open to a pull request for this feature then.\n. I think we could call this --skip-theme because only one theme can be loaded at any given time.\nCan you add functional tests too, please?\n. > Technically, if it's a child theme, there are two: the child and the parent.\nEr, but you don't ever activate two themes at once. Either the child theme is active, or the parent.\nTechnically, a theme can require whatever code it wants. WordPress only knows of one active theme.\n. > In my case config is a global config for several independent WPs, so I can skip problem themes by name and do not skip all other themes.\n@oneumyvakin You've convinced me of the utility of --skip-themes instead of --skip-theme.\n. @rnaby @dnaber-de Were you able to track this down?\n. @dnaber-de Here's a bit of the backstory on the problem #1631\n. > However, I still don't know why it would be a problem to make Runner::guess_url() aware of the const statement\nWe can do that.\n. This will be fixed by #2079\n. Is this a fresh install of WordPress, or an existing install with plugins, custom theme, etc?\nIf the latter, can you try against a fresh install of WordPress? It may be some code specific to your instance.\nIf the former, can you share your environment details, including any persistent object cache you may be running?\n. I've taken down the package index while we figure out its future: #1564\n. Some minor changes to be made.\n. Just does str_replace() right now, but I suppose we could consider regex. I suspect the performance impact would be significant.\n. @lukerollans Did you already have index.php created in your root directory? How should WP-CLI programmatically determine where your wp-config.php should be?\n. > I'm confused as to the need for logic as wp-config.php should always be in the root?\nSure \u2014 but WP-CLI doesn't understand this currently.\nWP-CLI knows how to find the wp-config.php file when it's a part of a subdirectory install, but it doesn't know that sometimes it should put the wp-config.php file in a different directory.\nIn fact, I don't know that we could support this, unless we did some fancy sniffing of the index.php for a non-standard ABSPATH. There aren't any other indicators that it's a subdirectory install.\n. wp core config is already a mess of options. I'm not keen on adding yet another option for a use case of limited utility.\n. > Is this the expected behavior?\n\nAm I doing something wrong?\n\nIt sounds like your CPTs and custom taxonomies are registered incorrectly, and not loading when WP-CLI is setting your rewrite rules. Hard to say specifically without having access to your codebase.\n. What if the database isn't yet created?\nWhat would you expect the behavior to be instead?\n. Oh. You should use --skip-check, which is why the flag was added #1068\n. Yes #1474\n. Duplicate of #1501\n. That message is applicable to WordPress core (e.g. run all of the multisite tests).\nTo run your unit tests against multisite, you can set the WP_MULTISITE environment variable to 1\n. This is probably caused by #1532. Can you try deleting ~/.wp-cli/cache and see if that fixes it? And you should update WP-CLI if you can to v0.18.0.\n. > Trivial question, how do i update wp-cli?\nFor v0.17.1, the same way you install: http://wp-cli.org/#install\nv0.18.0 introduces wp cli update, which you'll be able to use going forward.\n. Looking at this with fresh eyes, I don't think #1532 is the cause either. It appears the root is that cURL requests are failing on your box somehow. Were you able to track this down?\n. Thanks @johnbillion\n. @johnbillion My one concern with this is that it's a pretty low-level change, which could break how other people have been using it. What about just cleaning the WP.org API responses across the board?\n. @johnbillion Planning to take this one forward, or did you decide upon #1646 instead?\n. @szepeviktor Want to research this a bit? I think what we'll need to do is mock the Github API response when the build is running in Travis. It would be nice if we could do this without too much refactoring though.\n. Isn't working for some reason :(\n. When I set export WP_CLI_REQUESTS_CACHE_DIR=/tmp/wp-cli-requests-cache-dir locally and ran cli tests with error_log(), it hits the cache. Not sure why Travis would be different, unless the cache directory isn't being copied into location for some reason.\n. > Isn't mkdir WP_CLI_REQUESTS_CACHE_DIR missing?\ncp takes care of it, no? https://github.com/wp-cli/wp-cli/blob/master/ci/prepare.sh#L21\n. Well, I think it's clear that it's not hitting the cache. The question is: why?\n. The cache key changed somehow so it was expecting a file that didn't exist #1625\n. > What could have changed?\nI must've changed the key after I generated the cache file. The headers are the request headers, and don't include dates.\n. Interesting... I'll take a look further. Thanks for the report!\n. > is there already a fix?\nNot yet. Pull requests welcome.\n. > WP-Cli is installed as a dependency of Timber.\nHm, might be related to #1235.\nWhy are you using WP-CLI as a dependency of Timber, instead of installing globally?\n. @2ndkauboy Can you add newlines back please?\n. Thanks @athoune, I've filed this as an enhancement.\n. Actually, we already have it filed. Closing in favor of #1387\n. wp import expects a WXR file: http://wp-cli.org/commands/import/\nYou want to use wp db import: http://wp-cli.org/commands/db/import/\n. I looked at add_transport() but merging arrays adds my transport to the end of the stack. set_transport() would work, and built-in request cache would be even better. I need a solution in the near term though.\n. I'm going with this PR to start, as this is an immediate problem we need to solve.\n. I've reproduced as well. This actually appears to be a problem with download_url() in core. The file gets downloaded to /tmp/wp-gistpen.tmp, and .tmp becomes its new extension.\nSee https://core.trac.wordpress.org/ticket/30945\n. This will be fixed in WP 4.2\n. > all the code in the install-wp-tests.sh gets erased when I run tests.\nYou mean, all of the code that install-wp-tests.sh add gets erased, or the actual file itself? In either case, neither of these should be helping.\n\nSo I have to re-setup everything every time I reboot. Is this normal?\n\nYes, the script downloads all of the files to the /tmp directory, which means the files get deleted on reboot. You can instead download the files to persistent directories, and set the WP_TESTS_DIR and WP_CORE_DIR environment variables to have the tests run against your alternate downloads: https://github.com/wp-cli/wp-cli/blob/master/templates/install-wp-tests.sh#L14\n\nAlso the install doesn't create the uploads folder in the tmp library, so I have to add it by hand.\n\nThis should happen when WordPress is installed. Did you wait that long?\n. Hm. I don't have any good ideas as to how this might be happening without seeing it myself. Any chance you can share a screencast of the bug in action?\n. Ok. We can revisit again in the future if it's reproducible.\n. > Is there a way to copy all meta data from one post to another?\nI can't think of an easy way, off the top of my head. This is a problem I tried to solve with Dictator, and may come back around to again. Do you have any suggestions?\n. Sounds good.\n. @franz-josef-kaiser Does this error for you locally?\n. > About Behat: It's quite stupid that the errors aren't shown, so I can't add any info to that.\nI wouldn't call this stupid. It's how the technology works. There's some reason the build stalls on Travis, and Travis fails the build when it doesn't receive any output from the tests. For some similar pain, check out the history on #1162\n\nThe same goes for reprovisioning my VM to perform the tests on 5.3 and try it with older WP versions.\n\nGiven that it fails on PHP 5.5, I suspect if you solve it there you'll solve it everywhere.\n\nLet's face it: It's a 1:1 replacement with just the current PHP versions code and theoretically can't fail. \n\nBut it does fail?\n\nHow do you want to proceed?\n\nTests need to pass before I can merge this. As it exists now, the tests are failing.\n. You're changing the method on the class, and re-executing that method?\nwp shell is one PHP process where all of the code is loaded into memory.\n. Fixed by #1625\n. Hm, not going to work because we need the locale and can't get it without access to the database.\n. Thanks for the report, seems reasonable.\n. > (and I'm assuming supersede network meta)\nTook a look at this. I'm not 100% sure about deprecating network meta in favor of site option. Oddly, get_site_option() bypasses get_metadata(), although it might be that it was never updated because the last touch on that line was a long time ago: https://core.trac.wordpress.org/changeset/14410\nI think we might need both.\n. Seems like you could accidentally clobber some tables, and that it's really the plugin that's doing it wrong.\nCan you provide a bit more background?\n. > Should plugins that create tables also register them on wpdb?\nYes.\n\nThe current workaround is manually listing the extra tables, but I would say its not ideal.\n\nYou can also register the tables for the plugin using a supplementary plugin, and contribute the improvement upstream.\n\nAs long as the default behaviour is conservative (same as now) and the documentation is clear I don't see the risks.\n\nIt's not about the risks, it's about maintenance burden.\nI guess I'd be open to a --all-tables flag, though.\n. @francescolaffi Apologies for the delay here \u2014 looks good. I'm going to rename the flag to --all-tables-with-prefix in a second PR just so we're explicit.\n. SERVER_NAME isn't set by default, but is set when you supply --url.\nCan you share the contents of your wp-config.php, minus any secrets?\n. Related #2278\n. @benlk I think in time you did your before and after, VVV ran svn up on your /vagrant directory. The fatal error you're seeing is from a filter introduced in WP 4.6, so you'll need to run wp cli update --nightly for compatibility.\n. At this point, I think we're going to stick with what we have. The approach of spawning a separate process to read wp-config.php is creative, but I'd be concerned about introducing a breaking change if there was business logic in the config file. While somewhat painful, this is a problem users are capable of fixing on their own.\n. Seems like your wp-config.php references constants that aren't defined. Can you share its contents here (minus any secrets) ?\n. It's ultimately a problem of #1631, which we need to solve more holistically.\n. I don't think this is something we can support within WP-CLI, as the argument splitting happens at the PHP level.\n. #1636\n. It looks like the file was named incorrectly: https://github.com/humanmade/backupwordpress/commit/54327e0feb0254f740b8ff2c9635858881a745a1\n. ... and the class name was incorrect. https://github.com/humanmade/backupwordpress/pull/727\nWP-CLI shouldn't fail hard though. We'll fix that part.\n. > A class_exists() in\nSure, and throw an error if it doesn't. Can you prepare a PR with a test?\n. > It is OK earlier?\nThat's fine. You want to use WP_CLI::error() though, instead of throwing an exception.\n\nCould you help where  comes from in\n\nIt's built from this Examples: declaration: https://github.com/wp-cli/wp-cli/blob/master/features/upgradables.feature#L177\nHowever, don't worry about fixing the current build. It's on my list to take care of as soon as I can.\n. > How come that Travis has a theme called\nWordPress.org is returning weird API search responses again.\n. Looking good! Couple of small nits. You can ignore the failing tests.\n. > What did I miss?\nLooking good. Let me fix the failing build for master, and then I'll merge.\n. Thanks! Can you drop 4.0 then?\n. We only need to support the latest version of WordPress\n. #1643\n. Good suggestion!\n. > Can\u2019t wait until the next release!\nYou can use the equivalent of master by following these instructions: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-nightly-via-phar\n. Will be addressed by #1629\n. :+1: \n. @szepeviktor looks like you need to update your use of class_exists()\n. @szepeviktor can we have a test too?\n. Yep, looks good\n. > I've also removed the \"Try again\" message which gets appended to the output when there's an API error. It's a bit superfluous.\nCan we keep some mention that the error was between the user and WordPress.org? I feel like that's useful detail.\n\nPrepending their name with an underscore doesn't hide them, and marking them as private or protected doesn't work because they need to be publicly accessed by the hooks and filters API.\n\nLet's put them in php/utils-wp.php, and we can just store the response data in a global.\n. > I'll update the tests so they check that the generic error message isn't present.\nWhat if we prefix the error message with HTTP Error: and you check for that? I think it will be more exact.\n. @johnbillion are you still keen to take this forward?\n. Doesn't look like this will ever be fixed upstream\n. > Do you plan to add a test?\n725769d75c256dd012a992141d40d443f57167f2\n. > Is it possible to start defining filters and actions within WP-CLI that can potentially be called in the before executing a WP function?\nYou can just create a MU plugin and use something like this:\nadd_filter( 'wp_mail_from', function( $email ){\n    if ( defined( 'WP_CLI' ) && WP_CLI ) {\n        return 'wp-cli@example.com';\n    } else {\n        return $email;\n    }\n});\n. @skynet Did you actually run into a bug with this? Can you share pragmatic reasons for why this behavior should be changed?\n. I'm not a huge fan of changing things just for the sake of changing things. Thanks for the pull request anyway, though.\n. > Therefore I miss --file option on wp export to set export filename to eg. mylatest.wxr\nThe filename is based on the supplied arguments. Based on the size of the export, you might end up with more than one file. You'd be better off exporting all of your files to a specific directory, and importing from that directory with wp import --url=domain.com directory\n\n(eg. additional compress export file)\n\nSimilarly, you can do this with some small amount of shell scripting.\n. It's likely caused by #1631.\nCan you share the contents of your wp-config.php, minus any secrets?\n. > could have any value.\nGood catch. on isn't a valid value because PHP is interpreting it as an (undefined) constant.\n. No, that they should be formatted like this:\n\n. https://github.com/wp-cli/wp-cli.github.com/pull/52\n\n. > How to make it like\nNot sure \u2014 probably need fancier formatting regex, because global params aren't formatted this way in the code. I don't think it's worth the effort.\n. @szepeviktor Anything else you want to do here?\n. Odd. What cause the jump for v0.18.0?\n. Oh. I think that's because I built the Phar locally. False alarm\n. > Is there anyway to update premium plugins via wp-cli and if not, is this planned for a future release?\nNot unless the plugin implements an update mechanism that's compatible with WordPress core. If the plugin does, then it will work as expected.\n. > could you elaborate or a provide a link describing what you mean by \"compatible with WordPress core\"\nWP-CLI checks the update_plugins transient to see if there is an update available for a plugin:\n- https://github.com/wp-cli/wp-cli/blob/8702c14a199f11180accb2b22e68593e160a9af5/php/WP_CLI/CommandWithUpgrade.php#L341\n- https://github.com/wp-cli/wp-cli/blob/8702c14a199f11180accb2b22e68593e160a9af5/php/commands/plugin.php#L14\nFor a non-WordPress.org plugin to introduce an update, it needs to filter the update_plugins transient to return what's called a \"download offer\" for the plugin.\nWP Remote has a relevant piece of support documentation: https://wpremote.com/support-center/integrating-wp-remote/adding-wp-remote-support-premium-theme-plugin/\n. Thanks @szepeviktor. Can you include some tests?\n. @szepeviktor I think I'd like us to continue with #1801, as it provides more flexibility.\n. > Please remember that this is db export\nOh, right :smile: Can we follow the same pattern then?\n. > How should s&r/get_table_list and db/tables be merged?\nOh, I see. Let's abstract to php/utils-wp.php ?\n. Closing in favor of #2250\n. @mwithheld Can you merge master into this PR so we get a successful build?\n. I've created a clean PR in #1668. We'll see if that does the trick.\n. > wp-cli uses its own update method. I think it was not hooked by gravityforms.\nWP-CLI simply wraps core's update method, so not sure why it works in the admin and not at the command line.\n@gerardjp Can you open a support ticket with Gravity Forms and point them here so we can discuss their implementation with greater technical depth?\n. Thanks @mwithheld \u2014 appreciated.\n. I'm ready to put a bounty on someone spending tens of hours figuring this out :) Or, I suppose I could put some time towards it.\nWe can keep this open for now.\n. > Fails at the same place as before...\nI know :(\n. @eXprojects Can you update the Behat tests to reflect this change? Thanks\n. Fixing in #1802\n. Apologies for the late reply. Were you able to sort this out?\n. Couple of debugging steps:\n- Can you look in your PHP error log for any fatals that might be occurring and not getting reported for whatever reason?\n- Can you try against a fresh install of WordPress with all plugins deactivated?\n- Is this a WordPress multisite instance by chance?\n. Did you mean to file this in WP-API?\n. We should add some --ignore-missing or similar flag to wp plugin deactivate\nAlthough wp plugin prune seems interesting, it implies something more than just deactivating uninstalled plugins.\n. Actually, coming back to this... \n\nI would think this command should still attempt to make the change in the database.\n\nHow do you propose this to happen? Given these reproduction steps:\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin install --activate wordpress-importer\nInstalling WordPress Importer (0.6.1)\nPlugin installed successfully.\nActivating 'wordpress-importer'...\nSuccess: Plugin 'wordpress-importer' activated.\nsalty-wordpress \u279c  wordpress-test.dev  rm -rf wp-content/plugins/wordpress-importer\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin deactivate wordpress-importer\nWarning: The 'wordpress-importer' plugin could not be found.\nsalty-wordpress \u279c  wordpress-test.dev  wp option get active_plugins\narray (\n  0 => 'wordpress-importer/wordpress-importer.php',\n)\nThere's no strong correlation between wordpress-importer (the plugin slug) and wordpress-importer/wordpress-importer.php (the file path). WP-CLI needs to find the plugin in order to find its file path.\n. As I mentioned in the pull request, a community command is a better place for this.\n. Can you share this in a gist or pastebin? The formatting is important, and I think copy and pasting has changed it some.\nProbably related #1631\n. Thanks \u2014this was actually the original behavior, but it must've been accidentally dropped in #525\n. Why conditionally change it based on version? Shouldn't we default to false as core now does?\n. Fair enough.\n. > I hate that I can't remember it, but basically, it broke MySQL completely. It shutdown and erased mysqld.sock.\nI've never heard of this happening before. It could be something specific to your environment. If you can produce more reliable reproduction steps, I'd be happy to look into it further.\n. > Looks like wp_cli can't find SERVER_PORT inside constructor. Any idea?\nThere is no SERVER_PORT set when using WP-CLI. You'll need an isset() or ! empty() check before inspecting $_SERVER['SERVER_PORT']\n. Thanks @JeyKeu . I'd still like to support non-vendor directories though, so we'll keep the other issue open.\n. The error is probably with this call:\nwget -nv -O $WP_CORE_DIR/wp-content/db.php https://raw.github.com/markoheijnen/wp-mysqli/master/db.php\nYou'll need to update your local certs. This blog post looks like it might offer the right direction: http://thenubbyadmin.com/2014/01/29/solving-wget-error-cannot-verify-site-certificate-unable-to-locally-verify-the-issuers-authority/\n. #1636 defaults to curl, but hasn't been released yet. You can use the nightly if you'd like: https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-nightly-via-phar\n. Because we're simply checking out the WP testing suite, I think this would be better resolved upstream.\n. > What about adding a workaround for the time being?\nI don't want to maintain a workaround.\n. @onet4 Can you create a core ticket for this please?\n. \n. cc @nb \n. Can you install less ?\n. What's the source of the error?\n. Odd. Can you share more context around the original error?\n. Looks like the build fails?\n. Thanks \u2014 one minor nit\n. I suspect a bug but haven't tracked it down. I've confirmed the unexpected behavior.\n. This actually a problem across many commands. We should come up with a more holistic fix.\n. > It might be good to have some kind of general helper function for checking boolean flags\nI'm up for a pull request.\n. Fixed by #1732\n. It would be nice to clean up the logic in get_table_list() to handle each of these cases, instead of having conditional logic in two places.\n. That'd be great, thanks\n. > It's possible that these updates will also address #1696, at least for this particular command.\nI'm not keen on introducing a helper function as a part of this PR.\n. > I'm not keen on introducing a helper function as a part of this PR.\nSo we should keep the pattern as is. Redundancy is fine for now. \nOne other nit to address. Plus the build should pass.\n. > If I move the helper function into a private method of the Search_Replace_Command class, would that be OK?\nI guess so. I'm concerned it falls into the \"over-optimization\" category, as it: 1) doesn't solve any problems, 2) adds limited utility, and 3) obscures what's happening to the value.\n. Thanks for your work on this \u2014 looks great.\n. Can you check to see if it was created in wordpress/wp-content/themes ?\n. Thanks! Can you add functional tests to this pull request, reproducing your original reporting steps?\n. > Should I include my tests in scaffold.feature?\nYep, that's a good place for them.\n. @yivi Will you be able to complete this?\n. @yivi Can you merge master?\n. Thanks! Can you add functional tests to this pull request, please?\n. > Sorry for not adding the functional tests initially, this was my first encounter with Behat and I have to say it's pretty slick and I like the way you have the wp-cli test code organized around it.\nGlad you like it! If you'd ever like to use it in your own commands, you can use wp scaffold package-tests\n. @rodrigoprimo Can you fix the failing test?\n. Try wp site create: http://wp-cli.org/commands/site/create/\n. Thanks for the report. I'll need to give some thought as to the best way to fix this.\n. I've spent some time thinking about this, and haven't identified a better token to use that's guaranteed to be more reliable. Because the process of modifying the wp-config.php is quite ugly, I'm concerned about making a change which could cause a regression.\nFor now, I'm going to address this issue by warning the end user when the token can't be found, instead of erroneously inserting the constants into the end of the file.\n. > when the english token is not found, why not trying to get the one used in wp-config-sample.php file ? The token can be easily extracted from this file (it's 5 lines before the end) and is more than likely to match.\nI don't want to try to pull something from wp-config-sample.php. Because we can't extract the token in a precise manner (e.g. WP-CLI can't know definitively that it's found the correct token at 5 lines before the end).\nGiven the lack of precision in the possible implementations, it's better just to put the decision on the end user.\n. Intriguing. I'm dealing with a similar problem right now, except wp import :wink: \nI imagine there is a memory leak somewhere.\n. @TheLastCicada see https://github.com/Automattic/vip-quickstart/issues/398\n. > but is it expected behavior that a wp-cli import needs over 1GB of RAM?\nThe WordPress importer is a pile of rubbish. I wouldn't be surprised if there was some structural memory inefficiencies. As I'm watching my import run right now, I'm seeing the memory usage slowly grow and grow by MB. I haven't worked on this problem in a while though, so I'll give it some thought.\n\nSeems like an awful lot of RAM to need for this, especially when WordPress itself will run on almost nothing.\n\nThe importer wasn't designed for the pain we're putting it through :wink: \n. @TheLastCicada @joshbetz @sboisvert I'm not sure why it was missing before, but I've added a stop_the_insanity() equivalent in #1794 if you have a large import you can test it out on.\nI suspect the exporter has the same object cache problem. However, it's a bit black box so I'll need to think on where I'd add it.\n. > I am running into this issue as well. 3 import files totaling several hundred megs.\nWhich version of WP-CLI are you using?\n. @stevegrunwell @TheLastCicada I'd like to close the loop on the potential memory leak with the exporter. Have you run into the issue recently, and/or can you provide more details on how I might be able to reproduce?\n. > Have you run into the issue recently, and/or can you provide more details on how I might be able to reproduce?\nActually, it wasn't so difficult to reproduce once I took a look \ud83d\ude04 \n. > Looking forward to these improvements!\nwp cli update --nightly :)\n. > I think wp-cli should exit with an error code if no site is matched for a --url. Currently, it returns 0 and displays nothing in the standard or error output.\nThe problem is that WP-CLI doesn't know it's an invalid URL. It's more of an issue with WP core.\n. Fix the escaping issue https://github.com/wp-cli/wp-cli.github.com/pull/52\n. > is it safe to re-run the import without deleting everything that got imported until it halted?\nIt's safe-ish. The WordPress Importer has a mechanism to prevent duplicate content from being created. However, because your script halted mid-execution, there's probably one item that's broken to some degree. Also, there are cleanup tasks that run at the end of the import that didn't run, so at least some of your content didn't get cleaned up.\nIf it's possible, you should empty the site and start over. wp site empty will delete all posts, comments, and terms without affecting your options or users. If you use it though, you'll need to manually delete the uploads directory.\n. Couple small nits, otherwise this looks good.\n. > Should I create an issue for wp scaffold _s and make the same change there? I noticed the API for wp theme and wp plugin diverge (wp theme enable vs wp plugin activate).\nRegarding? \n. > Regarding adding an option for --activate-network, or whatever the nomenclature should be, like: wp scaffold _s starter-theme --activate-network\nOh. We can discuss in a new issue. I think the more appropriate syntax would be --enable-network\n. > Did you see my reply about removing the background section from the functional tests in scaffold.feature?\nYep, that's fine.\n. @acusti Thanks for your work on this!\n. > I think I made this close from a commit that I rolled back in my previous PR\nYep, sorry about this.\n\nIf adding these options to scaffold _s is something you agree would be worthwhile to add, I will make a new branch with the change and submit a PR\n\nPlease do!\n. I understand the pain, but I'm not convinced it makes sense to change the default behavior. We could add a --preserve-images flag or similar, though.\n. That wiki page is way out of date. When I get around to scripting some documentation (#1045), I'll likely deprecate that page.\nThe formatter class is fine to use.\n. Shiny new page landed for WP_CLI\\Utils\\format_items() http://wp-cli.org/docs/internal-api/wp-cli-utils-format-items/\n. Is author_id a part of the spec?\n. > Is there a publicly available spec for WXR?\nWanted to see what you could come up with :wink: \n\nThese changes do bring wp-cli closer in line with the changes in core:\n\nGood enough for me!\n. Why weren't imports broken if this has been broken forever?\n. > I have added a test case that will illustrate the problem.\nThanks!\n. > I would like to be able to filter the results of wp site list\nSeems fine to me.\n\nAlso I would like to add theme to the list of available fields so that I can filter sites by theme.\n\nI can't see the performance of this being great. wp_get_sites() supports filtering based on columns in wp_blogs, which is a far simpler query. This use case is better suited with a custom command / one-off script.\n. Seems like your composer instance might be borked. Can you try Phar installation mechanism instead? http://wp-cli.org/#install\n. It looks like it's colliding with your existing use of Composer:\n/home/forge/starterb/releases/20150317205810/vendor/composer/autoload_real.php:45\nAre you already using php-cli-tools? Can you remove from the project, by chance?\n. > Anyways, problem solved, I got it, it was my own fault. Thanks for helping!\nGlad you were able to sort it out!\n. We used to include the supplied arguments in the filename, which would solve your problem: https://github.com/wp-cli/wp-cli/pull/525/files#diff-92725afe093bc972e436493f9aae8204L307\nI think we should restore that behavior.\n. Ah, this exchange is relevant https://github.com/wp-cli/wp-cli/pull/525#issuecomment-20010928\n. Thanks for the report. We'll get this fixed.\n. This still feels too magical to me. I think it'd be better off as a community command. You could call it wp plugin cleanup or similar.\n. is_dir() or some form of local file check seems reasonable to me.\n. Resolved in #1727\n. > Should I add support to --ids as well?\nNah, that's not supported anymore.\n. :+1: Thanks\n. > There is no test for this.\nLet's make sure there is one when we fix it.\n. --dry-run is fine, but can we also have some indicator as to whether there's a new version in wp core language list (similar to wp plugin list)?\nAlso, I wasn't aware the plugin / theme translation API was complete. Is it? Can you link me to the Trac ticket?\n. Can you make sure there's some test coverage for the change to wp core language list too? Looking pretty good, aside from some small nits.\n. Just some minor string updates, then this will be good to :ship: \n. @wrnx Thanks for your work on this!\n. > Is it shipped?\nNot yet, but shortly.\n. > Should I replace the following uses in this PR or do it in another, if this is merged?\nThis one is fine.\nI'm not 100% convinced on the method name (check_flag) or it's location as a static method on WP_CLI. It probably makes more sense in WP_CLI\\Utils, although that file is really becoming a grab bag of everything. Did you have some other ideas you were considering?\n. > I think the main issue with the WP_CLI\\Utils namespace is that some functions do not have documentation. It will be nice if we have some well documented helpers to work with. Thus, it will be easier to extend the functionality.\nAgree, see #1045 \n. > Should I replace the following uses in this PR or do it in another, if this is merged?\nReplacing uses in this PR makes most sense.\n. > When refactoring, I found some cases like this:\nI just see one. Did you find others?\n\nWe could change the function and it will fit in both cases.\n\nIf it's just this one case, the code can remain as it is. \n. > but I'll see if I find any code that still needs refactoring and then I make these changes in a local branch to see if it's worth.\nSounds good. Let me know when this is ready.\n. @wrnx I'd like to release 0.19.0 this week. Will this be ready in the next day or two?\n. > Now we need to evaluate whether the changes are worth or reverse it.\nIt looks like it already fixes numerous bugs, and seems to be reasonably covered by integration tests.\nI'm of the mind to land this and clean up any issues. we discover, than fix isset( $assoc_args['key'] ) bugs indefinitely.\n. > Could be open a pull request to correct some of these?\nI appreciate the consideration, but I'm not interested in pull requests for code formatting.\n. > wp-config.php in case it's relevant\nYou'll want to reset your salts now that you've exposed them publicly.\n\nNote that i made one change: that it applied to posts rather than a CPT for simplicity's sake.\n\nCould it be that this one change is what fixes it? What priority is the CPT registered on?\n. Related https://github.com/wp-cli/wp-cli/issues/785#issuecomment-24915224\n. Sure, #785 is fine.\n. This is most likely a bug in https://github.com/wp-cli/php-cli-tools, specifically cli\\Table\n. @szepeviktor Create a pull request with test coverage?\n. > Is it too complicated? Now It prints one percent sign per %, and pads accordingly.\nCan you submit a PR for it?\nMy initial reaction is that we need to escape all values before we pass them to Formatter, because cli\\Table shouldn't need to know the difference between colorized strings and uncolorized strings.\n. > Do you mean to add an escaping function to these calls?\nI guess but I still don't fully understand the extent of the problem. I'd think cli\\Table shouldn't be colorizing strings. If it is though, I don't want to change that behavior \u2014 we'll just need to escape our non-colorized values before we send them in.\n. > i use in my wp-config 'WP_CONTENT_DIR' but this seems to have no effect on for example 'wp plugin list'.\nCan you share how the code is defined?\n. Previously: https://github.com/wp-cli/wp-cli/issues/785#issuecomment-24915224\n. Assuming you mean the docs on the website, right?\nFixed with https://github.com/wp-cli/wp-cli.github.com/pull/52\n. Looks like there's a merge conflict?\n. Why doesn't {{parent_theme}} work?\n. > They did not contribute to the problem's solution.\nOh, I'd like to keep the dynamic function naming then.\n. wp theme delete $(wp theme list --field=name); wp theme install twentyfifteen\n. Ew, this bug is rough. By the time the arguments get to Configurator::parse_args(), the quoting has been stripped:\nsalty-wordpress \u279c  wordpress-test.dev  wp option update foo '--bar'\narray (\n  0 => 'option',\n  1 => 'update',\n  2 => 'foo',\n  3 => '--bar',\n)\nError: Parameter errors:\n unknown --bar parameter\nsalty-wordpress \u279c  wordpress-test.dev  wp option update foo --bar\narray (\n  0 => 'option',\n  1 => 'update',\n  2 => 'foo',\n  3 => '--bar',\n)\nError: Parameter errors:\n unknown --bar parameter\nI'll have to give some thought as to how to address this.\n. > I'm doing a huge conversion of a custom CMS to WP (huge meaning 27,000 posts) which is why I'm getting all these corner cases.\nAlways happens :)\n\nI'll help however I can.\n\nPull requests welcome!\n. > Quoted options that start with -- are interpreted as WP options\nAs it turns out, we can't use -- in this case because $argv is too lossy. Instead, --format=json is a better approach:\nwp post meta set 1060 story_author_bio '\"-- hi\"' --format=json\n. > In some environments, an entirely custom wp-config.php file is created, and the above line is not present.\nIf you have some programmatic control over the config file, why do you need to modify it with WP-CLI?\n. I don't think it makes sense to have this packaged with WP-CLI. You could take the code you have, and perform some after the fact transformation.\n. > This is something that will directly benefit WP Engine as well as all of their customers.\nIf you have the time to contribute, I would love help with #1564\n. I'll re-consider. Can you add functional tests please?\n. I'm not familiar with $XDG_CACHE_HOME. Can you share a bit more detail, with suggestions on how we can accommodate with backwards compat?\n. I'm open to making this change, but I'm concerned about backwards compatibility \u2014 or lack thereof. Unless there's a reasonable suggestion for backwards compat, I think we'll save this change for v1.0.0 \n. Given the backwards compatibility concerns and that we have a WP_CLI_CACHE_DIR environment variable you can set to customize the cache directory, I don't think it's worthwhile to make this change.\n. https://github.com/fusioneng/Unified-Post-Types/commit/9b280f07e8ba79977f54103f938e0422ee63a1f2 has code to steal\n. > I keep recieving this error: Warning: The 'twentyfourteen twentythirteen' theme could not be found., when I try to remove multiple themes at once.\nCan you share the command you're using to delete the themes?\n. Fixed already in 3dc3421c98ce3380fc4d6628dfa0d0fca349e9fe\n. > Do you know when this will be put into stable build 0.18.1 or 0.19.0?\nHopefully shipping v0.19.0 in the next week and a half or so. If not, I can release v0.18.1\n. @Fab1en Can you add some test coverage for this? I think it should have a good amount of coverage around it at risk of being prone to breakage.\n. > but it seems search-replace is better suited as a subcommand under the db command instead of being a top-level command as it is now.\nI see what you're saying. I don't think there's much value in changing it now though.\n. > I really love wp-cli, but I have noticed that every time I do a core download the permissions are wrong and the new installation won't run - Apache gives errors\nWhat do the permissions get set to? This is what I get:\nsalty-wordpress \u279c  www  wp core download --path=wp-cli-test\nCreating directory /srv/www/wp-cli-test/\nDownloading WordPress 4.1.1 (en_US)...\nSuccess: WordPress downloaded.\nsalty-wordpress \u279c  www  ls -al wp-cli-test\ntotal 164\ndrwxr-xr-x 1 vagrant vagrant   714 Apr  9 21:33 .\ndrwxr-xr-x 1 vagrant vagrant   850 Apr  9 21:32 ..\n-rw-r--r-- 1 vagrant vagrant   418 Apr  9 21:33 index.php\n-rw-r--r-- 1 vagrant vagrant 19930 Apr  9 21:33 license.txt\n-rw-r--r-- 1 vagrant vagrant  7195 Apr  9 21:33 readme.html\n-rw-r--r-- 1 vagrant vagrant  4951 Apr  9 21:33 wp-activate.php\ndrwxr-xr-x 1 vagrant vagrant  2992 Apr  9 21:33 wp-admin\n-rw-r--r-- 1 vagrant vagrant   271 Apr  9 21:33 wp-blog-header.php\n-rw-r--r-- 1 vagrant vagrant  5008 Apr  9 21:33 wp-comments-post.php\n-rw-r--r-- 1 vagrant vagrant  2726 Apr  9 21:33 wp-config-sample.php\ndrwxr-xr-x 1 vagrant vagrant   170 Apr  9 21:33 wp-content\n-rw-r--r-- 1 vagrant vagrant  2956 Apr  9 21:33 wp-cron.php\ndrwxr-xr-x 1 vagrant vagrant  4250 Apr  9 21:33 wp-includes\n-rw-r--r-- 1 vagrant vagrant  2380 Apr  9 21:33 wp-links-opml.php\n-rw-r--r-- 1 vagrant vagrant  2714 Apr  9 21:33 wp-load.php\n-rw-r--r-- 1 vagrant vagrant 33435 Apr  9 21:33 wp-login.php\n-rw-r--r-- 1 vagrant vagrant  8252 Apr  9 21:33 wp-mail.php\n-rw-r--r-- 1 vagrant vagrant 11115 Apr  9 21:33 wp-settings.php\n-rw-r--r-- 1 vagrant vagrant 25152 Apr  9 21:33 wp-signup.php\n-rw-r--r-- 1 vagrant vagrant  4035 Apr  9 21:33 wp-trackback.php\n-rw-r--r-- 1 vagrant vagrant  3032 Apr  9 21:33 xmlrpc.php\n. Oh. Apache is probably running as www-data or similar. Your files are owned by bob. You need to run commands as www-data, or change ownership after you've downloaded.\n. Could. Seems like a nice minor enhancement to throw a warning\n. What happens when you run php -l /path/to/functions.php ?\nCan you share the contents of your functions.php, minus any secrets?\n. > short_open_tag=On\nYou should fix your code and disable short tags :)\n. Can you share more environmental details for when you get each error?\nIt seems like the environment is reasonably well-supported. Have you asked them to package and support WP-CLI?\n. You'll need to add /usr/local/bin to your PATH, or instead move WP-CLI to /usr/bin after download:\nsudo mv wp-cli.phar /usr/bin/wp\n. > It makes it harder to run the tests if you have to make sure that SVN is installed as well.\nCan you explain your logic? What if I don't have git installed?\n. Given the WordPress project officially uses SVN, I think SVN needs to remain the prerequisite. You can easily install SVN alongside git. And yes, I use git full-time too.\n. > In my opinion it might be time to (cautiously) loosen the requirement on this.\nTravis doesn't currently support running builds against Windows. Are you offering to do all of the necessary maintenance? I don't have any desire to support Windows personally.\n. > I am urging to mention technical possibility to run on it at all. Current wording implies otherwise.\nOk, that's fine. Submit a PR with suggested change? https://github.com/wp-cli/wp-cli.github.com\n. Thanks for the report. This enhancement is coming in WP 4.2 https://core.trac.wordpress.org/ticket/30611\n. We have a simple hook system. before_invoke fires before a command is run: https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Dispatcher/Subcommand.php#L293\nHowever, commands can run exit; In fact, WP_CLI::error() does. While we can add after_invoke hook, I'm hesitant to do so because we'd be making a promise (the hook will fire) we can't keep (the command may exit).\nAre there other use cases you can share?\n. Can you check out #1770 to see how well that suits you?\n. :ship: \n. You can use wp plugin install <path-to-file> --force\n. > The OP asked about updating, you replied with a command that used install\nYou should use the wp plugin install <file> command to update a plugin with a ZIP file. Although it's wp plugin install, it's the same thing behind the scenes.\n\nand I updated the docs to reflect your command\n\nYou updated the docs for wp plugin update to include arguments that aren't supported by wp plugin update. Furthermore, command docs are automagically generated from the PHPdoc, so that's not even the proper place to update.\n. > That said, if you'd like updates to the docs by those without intimate familiarity with the code, it would be helpful if the proper place/method to update them was listed in the wp-cli.github.com readme file or some other obvious place because, if it is described somewhere, it's not obvious.\nGood suggestion. I've made it more obvious: https://github.com/wp-cli/wp-cli.github.com/commit/0678f9f7e3bb472273c378969426834b204a4652\n. > Child themes should fail on activate if the parent isn't there, or just not be activatable.\nThis behavior makes sense to me.\n. I'm not sure why your domain is in $_SERVER['REQUEST_URI'], but you can't expect all $_SERVER variables to be properly populated in the CLI context. Your code will need to be more fault tolerant.\n. > 1. Is it a good way to do it ? Would you accept that community packages add subcommands to wp-cli core commands or would you forbid it ?\nSure, seems reasonable.\n\n\nIs there a way / a hook to add my sub command in the command list of the 'site' subcommand, in order to see it when we type 'wp-cli help site' ?\n\n\nHm, that should just happen automatically. If it doesn't, we can get it fixed.\n. > Can we do something about it ?\nYep, after 0.19.0 is released #1795\n. > Could you add it here also?\nNope. If the command exits in any way, there's no way we can capture that action. You should be using a wrapper script.\n. > Have you notices that $exit is not used in error()?\nLooks like a bug :)\n. > Why is it impossible to add after_invoke in error()?\nBecause I don't want to add the hook in every place the command code could exit. It only logically makes sense in one spot.\n. > What about register_shutdown_callback()?\nCould work, although I suppose we'd want to unregister after the command executes successfully.\n. I'm going to skip register_shutdown_callback() for now, and we can solve the problem of the hook not firing when it's actually a problem.\n. Fixing in #1771\n. > 'misllc.wp_woocommerce_termmeta'\nIt looks like this table wasn't created properly, so you'll need to re-run Woo Commerce's installation script. I suspect the error occurs frequently, but is only exposed when you use WP-CLI.\n. > I use search-replace to translate my wordpress into another language.\nwp search-replace is used to replace strings stored in the database. How or why are your translation strings in the database?\n\nHowever, sometimes it's not working. I use another options, still don't work.\n\nCan you describe in greater detail how it doesn't work, with specific reproduction steps?\n. Which version of WP-CLI are you using? Could this be #1459 ?\n. Makes sense. I'll fix with #1783 \n. > I think the condition should test for array as I suggested otherwise you can receive a PHP notice on trying to access a property of non array.\nEr, not by using empty():\nsalty-wordpress \u279c  wordpress-test.dev  wp shell\nwp> $var = '';\nstring(0) \"\"\nwp> $var['apple']\nPHP Warning:  Illegal string offset 'apple' in /home/vagrant/.wp-cli/php/WP_CLI/REPL.php(31) : eval()'d code on line 1\nWarning: Illegal string offset 'apple' in /home/vagrant/.wp-cli/php/WP_CLI/REPL.php(31) : eval()'d code on line 1\nstring(0) \"\"\nwp> empty( $var['apple'] );\nbool(true)\n. Exploring this project in https://github.com/danielbachhuber/wp-rest-cli\n. This is being worked on as a package for the foreseeable future https://github.com/wp-cli/restful\n. > What would you suggest is a good place to put WP-CLI\n/usr/bin is a fine place typically, although I'm not 100% familiar if WHM has an equivalent.\n\nwhich user should it run as so that I can use things like 'core verify-checksums' and 'core update' when logged in with my privileged user?\n\nProbably the user who owns all of the files, to ensure consistency.\n. > I realise this is a very broad question and I've explained little about my setup, I just need to start somewhere.\nSorry, I hit enter on the first message prematurely. Let me know how these answers help.\n. > In order to get all post with the \"wp post list\" command you have to use the \"--nopaging=true\" paramter\nYou shouldn't have to \u2014 posts_per_page defaults to -1: https://github.com/wp-cli/wp-cli/blob/master/php/commands/post.php#L287\nAre you sure there aren't any plugins, etc. affecting your results?\n. > No, I am not sure, but I got it from this thread:\nOk. There's probably something else going on we can't easily account for.\n. > Regarding this issue, I discovered the existence of the WP constant:\n\nWP_MAX_MEMORY_LIMIT\n\nI discovered this the hard way too: https://core.trac.wordpress.org/ticket/32075\n\nBut, as I wrote earlier, I had to make a small edit to a Wordpress core file, to remove a set_time_limit call.\n\nWhy is the download taking greater than 60 seconds?\n\nDo wp-cli import flush cache time to time if you know? \n\nThe big memory suck is WordPress' internal object cache. The WordPress importer, which WP-CLI wraps, actually disables cache flush during import. I thought we had some utility to periodically flush cache, but it appears we don't.\nRelated https://github.com/wp-cli/wp-cli/issues/1704#issuecomment-77950793\nUltimately, the problem is that the WordPress importer is long-overdue for a rewrite. \n. > I thought we had some utility to periodically flush cache, but it appears we don't.\nI've added the utility if you'd like to try it out #1794\n. > Why is the download taking greater than 60 seconds?\nSorry, bad question. I'll continue on #1792\n. > I don't know if I'll manage to test it soon, the \"official\" import after the test is already running.\nNo worries. I've landed it \u2014 I think it was just an oversight it wasn't included before.\n\nif I update wp-cli with the auto updater or redownload it, will the patch be already available?\n\nNot until 0.19.0 is released, which I hope will be soon ;)\n. > And I don't want to belive that this function forces max execution time to 60. Neither I want to belive that it doesn't even restore it to the previous value if the function succeedes.\nLooks like this is the relevant core ticket: https://core.trac.wordpress.org/ticket/21521\nI'm surprised no one has hit this before. I'm curious why set_time_limit() has an effect in your context.\n. This needs to be fixed upstream: https://core.trac.wordpress.org/ticket/34679\n. I don't think this will be an easy or simple change. I'd like to track in #1795.\n. Can you add some basic functional tests please?\n. Closing in favor of #2233\n. This was fixed in #1783\n. > However there is no option for explicitly updating a plugin by manually specifying a remote location\nWhy does it need to be update? Isn't force installing a plugin from ZIP essentially the same thing?\n\nPlugins which are not on w.org that need updating, currently the only way to do this is by: wp plugin install urltozip --force\nLonger term would be interesting to explore the concept of repository and the ability to specify a server as an alternate location to w.org similar manner to .deb\n\nIf it's a custom plugin you want to provide an upgrade mechanism for, you can do this by filtering the update check. I'm not really sure what problem this is a solution for.\nRelated #1762\n. > wp plugin update akimet, bbpress, http://myplugin.zip, hello-dolly\nHow should wp plugin update know which plugin to replace for http://myplugin.zip ?\n. > This method is not stable:\nWhy not just read the version file?\n. > We are dealing with a phar, there are no files locally.\nOh, right. I forgot the script downloads from Github.\n. :+1: \n. > Likely not possible right now then, since you can't make user update read from stdin ala --prompt due to the variable args.\nRelated #129. I've also created #1810\n. As it turns out, I added this in #673\nsalty-wordpress \u279c  wordpress-develop.dev  wp post list --prompt\n1/4 [--<field>: post_type\n     =<value>]: page\n    [--<field>:\n2/4 [--field=<field>]:\n3/4 [--fields=<fields>]:\n4/4 [--format=<format>]:\n. > Okay, so it sounds like what you're saying is that it's intentionally looking up one level for a wp-config.php file to use.\nCorrect, for the reasons @szepeviktor explains.\n. Hm, I don't have any good ideas for this, unfortunately. Can you do a bit more debugging by installing via git clone; composer install and adding debug checkpoints?\n. Dupe of #1814\n. Dupe of #310\n. wp core config has an existing paradigm of --extra-php=<php>, which it makes more sense to follow. This argument could be --extra-mysql-args or similar.\n. Related #1222\n. > In general, the Unix-y pattern is -- to \"end\" the assoc args and force extras to be treated as positional, so that'd be better for both, but there's likely problems with just doing that straight up (since the query itself is also positional).\nUnfortunately, PHP's implementation of $argv is too lossy to replicate this. -- is ignored by PHP, which means quoted arguments lose their quotes, etc.\nPassing extra arguments through directly will do the trick.\n. Filtering is based on get_terms(), which doesn't support term_id.\nI'll need to think about whether the fix will be to clarify the documentation, hack some fix into WP-CLI, or wait until https://github.com/wp-cli/wp-cli/issues/1784 lands for proper support.\n. This was landed.\n. > However, when I use wp user create to create a new user with a 80-character username, the command output says Success (this time, showing a zero ID), and subsequent wp user list command output does not show that user in the table.\nWhich version of WP are you running? On 4.2.2, I get:\nsalty-wordpress \u279c  wordpress-test.dev   wp user create 12345678vv12345678vv12345678vv12345678vv12345678vv12345678vv d+test1@danielbachhuber.com\nError: Unknown error creating new user\n. Thanks for the great debugging summary, @gitname.\n\nIn summary, the new instance of wp-cli behaves the same way the old one did, and the call to wp_insert_user on line 299 returns int(0).\n\nOdd. wp_insert_user() isn't supposed to return 0 so I suppose the write operation fails here.\nWordPress core shouldn't blindly assume the write operation was successful. It looks like this core ticket might be relevant.\n. The issue I saw is that it grabbed the 4.2.1 version that had been cached as `-.zip`\n. This was (unintentionally) fixed in https://github.com/wp-cli/wp-cli/commit/392aba67ebb58d6a6568f4065a808807d0992903#diff-4d88a655270edf15fa59cfc5b548b0faR42\nThe cache now uses the provided filename as the key.\n. salty-wordpress \u279c  wp-api  wp post list --post_type=page --name=post-99\n+-----+------------+-----------+---------------------+-------------+\n| ID  | post_title | post_name | post_date           | post_status |\n+-----+------------+-----------+---------------------+-------------+\n| 707 | Page 99    | post-99   | 2015-05-06 17:47:10 | publish     |\n+-----+------------+-----------+---------------------+-------------+\n. > Why other fields are --post_title, --post_content etc and the slug is just --name?\nThis is a WordPress implementation detail, not specific to WP-CLI.\n\nCan we have an alias for --post_name ?\n\nI'm not keen to introduce an alias. wp post list will be deprecated at some point in the future anyway, in favor of RESTful WP-CLI\n. It's already documented:\n\n[--=]\n: One or more args to pass to WP_Query.\n\nWe're not going to include an example for every argument that WP_Query supports.\n. Can you merge master?\n. Hm. The merge looks funny. How did my commit end up without a merge commit?\n. Ok. Straight merge would be best next time. Merge commits are fine.\n. > What's the difference? Less confusion for you? :) \nRebasing is destructive, merging is not: https://www.atlassian.com/git/tutorials/merging-vs-rebasing/conceptual-overview\n. Can you try the Phar installation approach?\n. Why not wp post list --fields=id,url ?\n. > The url subcommands could be merged pretty cleanly into the list subcommands. That would mean that each list subcommand should accept a variable number of positional args.\nI think passing post__in and brethren would be preferable. However, not all Query classes support what we need, so we can continue as #2070\n. Good catch :+1: Might be worth a patch release for this. Just one comment.\n. > You mean that you want it to be like this?\nYes, that's great.\nThere's another bug, however. If you specify just --dir=path/to/directory, the $plugin_slug doesn't appear to be set. Can you fix in this PR too? Here's the relevant tests: https://github.com/wp-cli/wp-cli/blob/master/features/scaffold.feature#L269\n. > But it is problem with same command.\n\nI want to close #1827. Is it OK?\n\nYep, this is fine.\n. > I don't know if a permanent solution is doable. Maybe always simulating \"--allow-root\" is present when querying the completions?\nYou should run WP-CLI as a different user: https://github.com/wp-cli/wp-cli/blob/8c5d6287b8d292a82bb12c4b8db8719e2627aecc/php/WP_CLI/Runner.php#L536\n. Closing in favor of #2292\n. Sorry, what specifically do you want documented?\n. It's not a magical argument, per se. It's just an abstraction to handle post__in and the like:\nwp post list --post__in=1,3\n. This is fixed in v0.19.1\n. Thanks for the PR. I'll dive into this in the next few days.\n. Couple small questions. Also, could you share some sample full output?\n. > For example, if i want to try out --verbose on one of my local databases, how can i actually just run the search-replace command in a way that includes my changes?\nMeaning, you have WP-CLI installed as a Phar too?\nIf so, you can just call WP-CLI from the path you've cloned it to /my/path/to/cloned/wp-cli/bin/wp search-replace...\n. :+1: \n. > We only need to bust\n\nthe cache once, after all terms have been generated.\n\nShould we do the same for other core objects?\n\nIf you have any tips on testing, I'd love to hear them.\n\nNah, we can punt.\n. > Is it possible to have one option that turns on all these three?\nNo. You should just create a bash alias if you intend to use it frequently.\n. There are some reasons documented in #973 why you shouldn't run WP-CLI as root, and why it's deliberately difficult to do so.\n. > Can I explicitly set allow-root in the wp-cli config though?\nDid you see https://github.com/wp-cli/wp-cli/pull/973#issuecomment-35841761 ?\n. A rare @joehoyle spotting!. Ugh. Thanks for the PR.\n. Er, this seems buggy:\n++ ls -A /tmp/wordpress-tests-lib/includes\nls: cannot access /tmp/wordpress-tests-lib/includes: No such file or directory\n+ '[' '!' '' ']'\n+ INCLUDES_DIR=/tmp/wordpress-tests-lib/includes/includes/\n+ mkdir -p /tmp/wordpress-tests-lib/includes/includes/\n+ svn co --quiet http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ /tmp/wordpress-tests-lib/includes/includes/\n+ cd /tmp/wordpress-tests-lib/includes\n+ '[' '!' -f wp-tests-config.php ']'\n+ download https://develop.svn.wordpress.org/trunk/wp-tests-config-sample.php /tmp/wordpress-tests-lib/includes/wp-tests-config.php\n++ which curl\n+ '[' /usr/bin/curl ']'\n+ curl -s https://develop.svn.wordpress.org/trunk/wp-tests-config-sample.php\n+ sed -i 's:dirname( __FILE__ ) . '\\''/src/'\\'':'\\''/tmp/wordpress/'\\'':' /tmp/wordpress-tests-lib/includes/wp-tests-config.php\n+ sed -i s/youremptytestdbnamehere/wordpress_tests/ /tmp/wordpress-tests-lib/includes/wp-tests-config.php\n+ sed -i s/yourusernamehere/root/ /tmp/wordpress-tests-lib/includes/wp-tests-config.php\n+ sed -i s/yourpasswordhere// /tmp/wordpress-tests-lib/includes/wp-tests-config.php\n+ sed -i 's|localhost|localhost|' /tmp/wordpress-tests-lib/includes/wp-tests-config.php\nI think the actual fix is to remove includes from the environment variable fallback, no?\nRelated #1828 from @miya0001 \n. > So includes should be removed from line 14.\nCan one of you create a pull request with just this change, and test it? This current PR seems to be changing too much.\n. Fixing in #1889\n. > This prevents wp from running.\nHow?\n\nIs it necessary to check for the presence of these programs in order to provide better error messages?\n\nI could be convinced, but I suspect it's a slippery slope.\n. I think Phar is an acceptable alternative method. I don't think it's worthwhile to try to rewrite the bash loader to accommodate this edge case. You could write your own alternative bash loader for your project.\n. Hm, I can't replicate in PHP 5.5.9-1ubuntu4.7\n1844 is running Travis against PHP7 nightly. Let's see what explodes.\n. Low and behold, lots of failures :)\n. I'm not sure we'll be able to support PHP 7 fully until WP supports PHP 7\n. If you look at the test failures though, there are some error notices coming from WP.\n. > STDOUT/STDERR cause silent failure\nHave you come across any relevant bug reports upstream?\n\nScenario: Ability to set a custom version when building fails on PHP 5.6 too. Is it a bug?\nPHP Fatal error: require(): Failed opening required './vendor/autoload.php' in utils/make-phar.php on line 3\n\nI suspect this means that Composer failed in some way.\n. Do you want to add the fix to this PR as well, and we can push v0.19.2?\n. > Yes, but I couldn't find solution. Do you have any hints for me?\nSorry, the solution for.... ?\n. What about running wp db query \"DROP DATABASE <name>\" at the end of the test?\n. > I am thinking adding here.\nBecause it's specific to the test, you could write a new Behat step you could call like Cleanup database <name> <name> etc. I wouldn't put it in drop_db(), because that will run in every test.\n. Fixing in #1889\n. I can, but it likely won't be for at least a couple weeks.\n. @szepeviktor Can you do some searching to see what changed in PHP 7 that might cause the error? c24667a3bfc29ca766d6f02c3fec1d55d84ff1ff didn't have an effect, and I haven't found anything yet.\n. > Are you planning to add this one to the next release?\nNo, as no one has come up with a passing build yet.\n. Taking a second attempt at this in #2072\n. Why don't you set WP_CLI_CONFIG_PATH environment variable?\n. Try spawning another process with WP_CLI::launch_self(): https://github.com/wp-cli/wp-cli/blob/master/php/class-wp-cli.php#L392\n. This pull request will need a bit of work, so I've filed a separate issue for the report #1849\nThanks for letting us know.\n. You can specify WP_CLI_CACHE_DIR environment variable to use an alternate cache directory: https://github.com/wp-cli/wp-cli/blob/master/php/class-wp-cli.php#L76\n. You'd set an environment variable like this:\nexport WP_CLI_CACHE_DIR=/var/www/vhosts/site1/.wp-cli/cache\nThen you can run:\nsudo -u $USER /usr/local/bin/wp \"$@\" --path=/var/www/vhosts/site2\n. I think maybe just a private method on that class, so we can easily remove later.\n. > Is wp_version_min_410() OK?\nYeah, I think that should be fine.\n. Seems like a reasonable request \u2014 thanks for submitting the issue.\n. Seems to work just fine for me:\nsalty-wordpress \u279c  wordpress-test.dev  wp comment list\n+------------+-----------------+--------------+------------------+----------------+----------------------+\n| comment_ID | comment_post_ID | comment_date | comment_approved | comment_author | comment_author_email |\n+------------+-----------------+--------------+------------------+----------------+----------------------+\n+------------+-----------------+--------------+------------------+----------------+----------------------+\nsalty-wordpress \u279c  wordpress-test.dev  wp comment list --status=spam\n+------------+-----------------+---------------------+------------------+----------------+----------------------+\n| comment_ID | comment_post_ID | comment_date        | comment_approved | comment_author | comment_author_email |\n+------------+-----------------+---------------------+------------------+----------------+----------------------+\n| 1          | 1               | 2015-05-28 04:30:35 | spam             | Mr WordPress   |                      |\n+------------+-----------------+---------------------+------------------+----------------+----------------------+\nsalty-wordpress \u279c  wordpress-test.dev  wp comment list --status=spam --format=ids\n1%\nCan you try against a fresh and so clean install of WP? Any plugins that could be changing the behavior?\n. Hm. I don't have any good suggestions at this point. To confirm, you've disabled all plugins?\n. :+1: \n. Thanks for the pull request. The exporter is long-overdue for an overhaul. This seems like a reasonable intermediate enhancement.\nCan you include some functional tests in your pull request?\n. :cherry_blossom: \n. Hm, not sure I'm convinced on the implementation although I like the idea. Ideally, there would be parity between exporting and importing. In this case, a user can't export in a format to match their import.\nWhat if meta handling was associated with wp user meta?\n. I think we may just want to wait for #1784, as adopting WP-API internally can solve many of these problems in one fell swoop. I feel like I'll be ready to dive into #1784 integration in June.\n. We probably need to replicate the function entirely as a private method.\n. > replicate the function entirely as a private method\nBy which I mean, put the logic for wp_clean_update_cache() into a private method, and use that instead. Sorry I wasn't more clear to start.\n. > Please fix it. It might take 2 minutes for you.\nOk, I will do when I have some time.\n. Handling in #1875\n. > I suggest to convert them and add a Codesniffer test.\nSounds fine.\n\nPHPCBF CAN FIX 3356 OF THESE SNIFF VIOLATIONS AUTOMATICALLY\n\nI haven't actually found PHPCBF to be terribly accurate.\n. Eh, not worth it to do this globally.\n. Overall this seems fine. I've left some implementation questions.\n. :+1: \n. Seems reasonable. Thanks for following the existing CSV pattern. Can you update the tests so they pass on CI?\n. Cool, thanks @stevegrunwell. I'll land after #1990\n. > Can we use a .zip file instead?\nCould. Although, why do you think it's necessary to package this in the script?\nCouple of considerations I can think of:\n1. If you really care about running your tests against trunk, you can specify WP_CORE_DIR.\n2. Because, if you run your tests against trunk, there's the very real chance your tests could explode for some unrelated reason, as mine have done before.\n. Ok, I'm on board.\nRelated #1800 #425\n. One challenge I ran into looking into this: Nightly is a zip, when most of our downloads right now are tar.gz\n. > It's going to be remarkably slower\nCan you put a number to how much?\n. What's the baseline for each of those?\nYou could more easily test apples to apples by doing a replacement that doesn't require regex while still passing the --regex flag.\n. Oh wow. That's quite bad. Let's sit on this for a few days.\n. > Let's sit on this for a few days.\nI'm leaning towards landing this and making it buyer beware. Because it's optional, the performance issues aren't a blocker.\n. > So, the warning message.\nYep, sounds good.\n. > Not clear to me what caused the problem, which seems unrelated.\nUnrelated. I've restarted the build.\n. > Oh, i briefly looked into the diff idea, but it looked to me like it would require adding a composer package. Figure it best to leave it for now.\nYep, that's fine.\n. > I think grouping the files is a little better so you get to see everything that will get overwritten at once.\nI think my preference would be one by one, so you could opt-in or opt out for each one.\n\nSo, taking the above example, if you said yes to 'blah.php' then no to 'readme.txt' the process would exit without even trying the remaining files.\n\nYou could roll your own with cli\\Streams\\Prompt: https://github.com/wp-cli/php-cli-tools/blob/bfe6d35911ecebef2edea7db3c9de9a2b74aa6a8/lib/cli/Streams.php#L145\nCan you implement with --force instead of --yes ? --force is more semantically correct, because you're overwriting original files.\n. > So, something like:\nYep. A neat additional enhancement (not required in this PR) would be to run the files through diff so you can see the visual difference before merging.\n. > Seems like this should be tested, no?\nYes please. You can test by including --force param in your test, and then watch STDOUT for \"Warning.... Replaced\"\n. Looks like there's formatting issues?\n. Some small nits. I'm also not 100% on the abstraction right now - need to mull it over.\n. > Ok, fixed everything, but left prompt_if_files_will_be_overwritten() as is for now.\nEh, it's a private method. We can always change it later.\n. Seems reasonable. CI is choking because your indentation is off.\n1. What do you think about renaming the parameter to --clone=<role> ?\n2. Can you add functional tests?\n. > I'll take a stab at the tests. May ask for help once I get into it.\nSounds good \u2014 happy to help!\n. @shawnhooper any luck with the tests?\n. Sorted this out in #1948\n. > Could any of my stuff get into the next release?\nWhat stuff?\n. Sure \u2014 if we merge pull requests that fix them.\n. > Would be useful to be able to specify a WXR from a URL.\nYou should just download the WXR with curl or wget\n. > Why not provide the shortcut of being able to specify the URL directly?\nSee Philosophy:\n\nComposability is always a good idea.\n[...]\nA corollary of this is that commands should be orthogonal, which means that there should be no overlapping functionality between commands. (wp plugin install --activate is an exception).\n\nAs to:\n\nI would think the same logic that applies to the other commands (being able to use URLs) should be here for consistency, no?\n\nWe have some exceptions, yes. \n. Not sure I follow. Can you clarify?\n. Where would this go?\n. > I'd like to --require my community command during behat testing and include my .feature file in behat testing.\nAre you aware of our existing package functional tests? This is what wp scaffold package-tests does.\n. > why are the parameters admin_user, admin_password, admin_email needed?\nTo create the default admin user.\n\nI've installed multisite with the following command line:\n\nCan you share the full output?\n. Thanks for your help on this, @szepeviktor \n. Can you share the exact command you're using?\n. > I can provide an example file if you tell me where to upload it\nGist or Pastebin is fine.\n\nHow do I get a previous build, specifically 0.19.0?\n\nhttps://github.com/wp-cli/wp-cli/releases\n. > I can confirm that this is an encoding conflict.\nThe error is one that comes back from wp_insert_post(), so I don't think there's much WP-CLI can do.\n. When I error_log( var_export( $final_cmd, true ) ), here's what I get:\nsalty-wordpress \u279c  wordpress-test.dev  wp core config --dbname=\"localhost\" --dbuser=\"root\"\n'mysql --no-defaults --execute=\\';\\' --host=\\'localhost\\' --user=\\'root\\''\nSuccess: Generated wp-config.php file.\nAnd:\nsalty-wordpress \u279c  wordpress-test.dev  wp core config --dbname=\"localhost\" --dbuser=\"test\"\n'mysql --no-defaults --execute=\\';\\' --host=\\'localhost\\' --user=\\'test\\''\nERROR 1045 (28000): Access denied for user 'test'@'localhost' (using password: NO)\nCan you try against a different machine? Maybe there's some MySQL config trickery applying?\n. :peach: \n. > so I think the problem is upstream\nYes, this is correct. \"Could not create directory\" is the error reported to us.\n\nMad strace skills revealed the culprit: wp-content/upgrade.\n\nCan you clarify what specifically the problem was?\n. > If I echo the return code, I can see that it is 255.\nThis is most likely a PHP fatal with error notices suppressed: http://serverfault.com/questions/153634/php-exit-status-255-what-does-it-mean\nYour plugin is likely fataling in WP-CLI context (or even generally). Does this give you enough information to debug further?\n. > What would be the logic of such a command?\n\nLoop through all sites??\n\nEasier to just do:\nwp site list --field=url | xargs -n 1 -I % wp plugin list --url=%\nSee \"Composability\": https://github.com/wp-cli/wp-cli/wiki/Philosophy#composability-is-always-a-good-idea\n\nThe confusing thing is that when you run this on a multisite install it defaults to the network site without telling you.\n\nThis is expected behavior.\n. > Looks like wp-cli is assuming it's the top-level, and needs to check if it's running out of the vendor dir?\nThis is correct \u2014 it's a bug. We'll get it fixed. Thanks for the report, @kcivey \n. @kcivey Can you verify #1891 please?\n. Er, formatting is supposed to be:\napache_modules:\n  - mod_rewrite\nThe docs are off, which I've fixed in https://github.com/wp-cli/wp-cli.github.com/commit/2b46ed5c8266bf8914335ffab3ea0469af92ffb3\n. Sorry about that :( Known issue #1840 and #1843\n. Known issue :( https://github.com/wp-cli/wp-cli/issues/1885#issuecomment-112975007\nThis isn't quite the fix.\n. > but my server has crashed and the Wordpress isn't working anymore\nTo get your server running again, you'll likely need to reboot or as your hosting support for assistance.\nGenerally, if running WP-CLI causes your server to crash, you should either:\n1. Switch servers, to one that can support WP-CLI without crashing.\n2. Avoid using WP-CLI, which causes your server to crash.\n. :+1: \n. > However, maybe it's possible to add an error message when the md5sum of the tar.gz file is not valid?\nHow would we get the valid md5? And, what if the md5 represents the corrupted file?\n. > MD5 checking is useful feature request.\n1899\n. wp post update <id> --post_name=<your-slug>\n. > If this is confirmed as a bug I'm happy to submit a PR with a fix.\nIt's a bug... but, per #1745, I don't think there's an easy fix. I'd be happy to look at a PR though.\nsalty-wordpress \u279c  fusion-2015  wp post get 100426 --field=post_content\n[fusion-pullquote source=\"\\\"Test\"]\nsalty-wordpress \u279c  fusion-2015  wp post update 100426 --post_content=\"\"\nError: Unable to read content from --post_content=.\n. > wp: command not found\nDid you run sudo mv wp-cli.phar /usr/local/bin/wp too?\nIf so, can you confirm /usr/local/bin/wp is in your PATH ?\necho $PATH\n. @warb2n Almost there! Can you verify /usr/local/bin is actually a directory?\n\nPlease close this issue.\n\nPlease be nice. I don't need to be reminded to close issues.\n. @warb2n From /usr/local, can you run mv bin/wp-cli.phar bin/wp and try again?\nBecause you want to call WP-CLI as wp, not wp-cli.phar, it needs to exist as wp in a directory on your PATH.\n. > Thx for U help man, all work now.\nGlad you got it sorted out :)\n. Thanks!\n. > Yesterday I've used wp core update to update a site from 4.1.1 to 4.2.2.\nCan you provide the exact command you ran? It should be available in your bash history.\n. > The zip in your cache is broken.\nWP-CLI might be saving partials to the cache directory. I'm testing now.\n. Bug verified in #1901. Thanks for all of the details, @novazembla.\nI'll need to give some thought as to how we should fix this. It's nice to have the downloads cached, but we have partials masquerading as full archives.\n. Options I can think of off the top of my head:\n1. Include the from version in the cached partial filename.\n2. Don't cache partial upgrades.\n3. Verify md5 from WordPress.org before performing the operation.\n. @novazembla I can't reproduce this now :( \n```\nsalty-wordpress \u279c  .wp-cli  ./vendor/bin/behat features/core.feature --tags=\"@daniel\"\nFeature: Manage WordPress installation\n@daniel\n  Scenario: Ensure cached partial upgrades aren't used in full upgrade # features/core.feature:659\n    Given a WP install                                                 # features/steps/given.php:47\n    And an empty cache                                                 # features/steps/given.php:14\n    When I run wp core download --version=4.2.1 --force              # features/steps/when.php:24\n    And I run wp core update                                         # features/steps/when.php:24\n    Then STDOUT should not be empty                                    # features/steps/then.php:128\n    When I run wp core download --version=4.1.1 --force              # features/steps/when.php:24\n    And I run wp core update                                         # features/steps/when.php:24\n    And I run wp core verify-checksums                               # features/steps/when.php:24\n    Then STDOUT should be:                                             # features/steps/then.php:15\n      \"\"\"\n      Success: WordPress install verifies against checksums.\n      \"\"\"\n1 scenario (1 passed)\n9 steps (9 passed)\n0m17.68s\n```\nI'm asking #meta on WordPress Slack whether anything has changed about the API.\n. > I'm asking #meta on WordPress Slack whether anything has changed about the API.\nFrom @dd32:\n\nThe behaviour for partials hasn\u2019t changed in months, partials have their own unique filenames, but one wouldn\u2019t be offered for 4.1.x -> 4.2.x.  Most likely an interupted download, you can unzip partially downloaded ZIP files in some cases.\n. Found it 392aba67ebb58d6a6568f4065a808807d0992903\n\nThis bug sucked :(\n. :ship:'d for 0.17.2, 0.18.1 and 0.19.3, and I'll be getting to 0.20.0 this week.\n. > The wp comment count command returns the number of comments, but doesn't appear to update the comment_count column in the wp_posts table.\nCorrect.\n\nWould wp comment recount be a welcome addition, or is there a way to achieve this already?\n\nI'd be open to a pull request. There is a way to achieve this, but it would involve writing a little script for yourself. I can see a dedicated command being helpful.\n1784 is related, because we'll need to think about how this command falls within the scope of CRUD operations.\n. Can you add unit tests for this change?\n. Thanks @JRGould \n. > It would give a sense of peace knowing that virus has not left extraneous files in some WP core directory.\nI'm not sure this is a problem we can solve with wp core verify-checksums. Isn't leaving extraneous files in wp-content/themes, wp-content/uploads or wp-content/plugins a similar issue? You can always use version control to detect added files.\n. I think this problem is outside the scope of WP-CLI to solve.\n. > and I can navigate to that image in terminal but somehow WP-CLI is not finding the images.\nCan you add some debugging on this line and see what those values are?\nIn order to debug, you'll need to install WP-CLI via Composer so you have access to editing the files.\n. > which I typically need, but installing with WP-CLI doesn't create that .htaccess, so I have to copy/paste it manually ?\nYou can also run wp rewrite flush: http://wp-cli.org/commands/rewrite/\n\nshouldn't it also create the file for me.\n\nOh! I totally forgot core added wp_install_maybe_enable_pretty_permalinks(). We'll look into doing the same behavior. Thanks for the report.\n. > Oh! I totally forgot core added wp_install_maybe_enable_pretty_permalinks(). We'll look into doing the same behavior. Thanks for the report.\nNot sure what I was thinking of before. wp_install_maybe_enable_pretty_permalinks() is called within wp_install(), which we use.\n. I believe this is actually a problem of WordPress, as all WP-CLI does is set the HTTP_HOST. I did a search of past issues though, and couldn't find any threads on the subject.\nWP-CLI might be able to detect when WP doesn't do anything, and throw an error. I'll look into this more when I have a moment.\n. > Should I open a PR or you prefer to first investigate if there is another solution?\nPR would be great, thanks :)\n. > Provide flags to display changelog and readme information with plugin command\nCan you explain how this might work, with a bit more detail?\n. Great \u2014 seems reasonable.\n. Closing this at wontfix \u2014 best implemented as a community package first.\n. Closing this at wontfix \u2014 best implemented as a community package first.\n. > How can I use wp-cli classes in PHP without going through command line?\nWP-CLI is a \"command line interface\" for WordPress. It's not intended to be used outside of the CLI context.\n. > Does it fail by design?\nNope, probably just an oversight.\n. :ship: \n. Try using the manual installation instructions instead http://wp-cli.org/#install\n. > wp-cli lauches WP core by its php/wp-settings-cli.php so wp-settings.php does not get executed thus advanced-cache.php does not get included thus no wp_cache_postload() thus wp_cache_phase2() does not get called. \nI've merged https://github.com/wp-cli/wp-super-cache-cli/pull/5 to fix this.\n\nI think wp-super-cache-cli is not maintained.\n\nSorry, I wasn't getting notifications on the repo.\n. > Note: The WP-CLI Package Index is unavailable while we determine a new direction for community packages.\n. This is likely a problem with the plugin, not WP-CLI. Please open a support thread with its developers.\n. > Do you know someone who can help us?\nHelp us in what way? Would your proposed temporary solution be sufficient?\n. I'm fine with the hack fix for now. Eventually rewriting the bash completion to make it proper shouldn't get in the way of the fix\n. > can you tell me if I should expect the yml settings for custom php code, to translate into available vars in wp-config.php?\nYep, this would be expected. It seems like it doesn't, so we can fix it.\n. > I'm kind of confused as to why my wp-cli.yml file isn't working as expected:\nI'm now confused by how you're trying to use it :) The example in your description is very similar to the functional test we have.\nWhen you run wp core config, WP-CLI should append define( 'WP_ENV', 'development' ); to your wp-config.php. Just to be clear, it's not a runtime definition.\n- Does define( 'WP_ENV', 'development' ); end up in your wp-config.php when you run wp core config?\n- Where are you adding your var_dump() in relation to the added define( ...?\n. > To be clear, I'm looking to set global variables in the wp-cli.yml file for run-time usage in the wp-config.php.\nYou should use environment variables for this use case.\n. Can you share wp --info ?\n. This is fixed in v0.19.2. You should upgrade to the latest.\n. > Here is my wp-config.php:\nYou have EMPTY_TRASH_DAYS defined twice:\n```\ndefine('WP_DEBUG', false);\ndefine('EMPTY_TRASH_DAYS', 0);                  <----------\n/ Multisite /\ndefine( 'WP_ALLOW_MULTISITE', true );\ndefine('MULTISITE', true);\ndefine('SUBDOMAIN_INSTALL', false);\ndefine('DOMAIN_CURRENT_SITE', 'demo.proteusthemes.com');\ndefine('PATH_CURRENT_SITE', '/');\ndefine('SITE_ID_CURRENT_SITE', 1);\ndefine('BLOG_ID_CURRENT_SITE', 1);\n/ everything else /\ndefine('FS_METHOD', 'direct');\ndefine('EMPTY_TRASH_DAYS', 1);                   <----------\n```\n. Can you fix the build, and add functional tests?\n. > In the meantime could you please merge\nDone. Sorry about that, missed your last comment somehow.\n. > Please give me some guideance regarding why the remaining test breaks.\nI think you'll need to move str_replace() inside of the closure.\nThis pull request still needs functional tests. It should also fix the behavior for wp post insert\n. I can't reproduce the problem with this test case:\n``\n  Scenario: Don't slash data when updating a post\n    When I runwp post create --post_title=foo --porcelain`\n    Then save STDOUT as {POST_ID}\nWhen I run `wp post update {POST_ID} --post_content='var isEmailValid = /^S+@S+.S+$/.test(email);'`\nThen STDOUT should not be empty\n\nWhen I run `wp post get {POST_ID} --field=content`\nThen STDOUT should be:\n  \"\"\"\n  var isEmailValid = /^S+@S+.S+$/.test(email);\n  \"\"\"\n\n```\n. > Is this possible / stupid / misguided?\nNope, totally doable.\n\nI have tried some shell_exec attempts but to no avail...\n\nCan you share what you've tried, and how those attempts failed?\n. I don't think running WP-CLI from web requests is a good idea.\n. > /usr/bin/wp: line 1: /Applications/MAMP/bin/php/php5.3.14/bin/php: No such file or directory\nDoes /Applications/MAMP/bin/php/php5.3.14/bin/php exist? \n. > Unclear how/where the php version is specified....\nOld symlink maybe? Can you call which php from shell_exec() to see how your system is resolving it?\n. And try ls -al /usr/bin/php ? Is it a symlink to the MAMP binary?\n. Hm. Hard to debug without access to your machine :(\n. WP-CLI stands for WordPress Command Line Interface. Currently, it presents a clear, consistent interface to WordPress because WordPress' interfaces themselves are the result of dozens of developers over 10+ years. WP-CLI will eventually shed much of its internals to wrap WP-API, a project to make WordPress\u2018 interfaces more consistent. WP-CLI will only ever be a command line interface to WordPress. Use cases outside of the command line are outside the scope of the project.\n. > Would it be hard work to provide one function to start up wp-cli?\nDifficulty isn't the point. My point is that it's outside the scope of WP-CLI to interoperate with web applications. CLI tools can call WP-CLI as a binary just fine.\n. > Would there be a downside to provide a bootstrap function\nThis isn't a use case I'd like to support. shell_exec() is sufficient for launching WP-CLI in CLI context.\n. > On CentOS 7 with PHP 5.4.16 and WP-CLI 0.19.2, if you just run \"wp plugin list\" on a terminal, you get a bordered text table. However, if you run \"wp plugin list >/tmp/plugin.list\" and then look at the /tmp/plugin.list file, it removes all the table formatting (i.e. no minus, plus or vertical bar chars)\nThis is intended: https://github.com/wp-cli/php-cli-tools/blob/228e8c1300675313e519b4195783aaa1a1a020bf/lib/cli/Table.php#L69\n\nIdeally, I'd like something like a --table-format option to enforce keeping the bordered text table format regardless as to whether it's going to a terminal or a file.\n\nYou can set a SHELL_PIPE=0 environment variable to achieve this behavior: https://github.com/wp-cli/php-cli-tools/blob/228e8c1300675313e519b4195783aaa1a1a020bf/lib/cli/Shell.php#L52\n. > Do you think there are too many (122) open tickets?\nNope.\nFor these sorts of questions, which are off-topic for the given pull request or issue, please WordPress.org Slack. You can join us in the #cli channel.\n. > wp-cli fails with such a setup because it's reading in the wp-config.php file directly (as opposed to after having been washed through php first) and it's looking for something that's not in the file.\nSee also #1631\n. It seems like 'Two Words' is being interpreted as two arguments, and not one string.\nCan you try wp term create vendortax \"Two Words\" and provide the result?\n. :+1: \n. I can't reproduce:\nsalty-wordpress \u279c  wordpress-develop.dev  wp plugin update --all --dry-run\nAvailable plugin updates:\n+------------------+----------+-----------+----------------+\n| name             | status   | version   | update_version |\n+------------------+----------+-----------+----------------+\n| demo-plugin      | inactive | 0.1-alpha | 1.0            |\n| shortcode-ui/dev | active   | v1.0      | 0.4.0          |\n| wp-gistpen       | inactive | 0.4.0     | 0.5.7          |\n+------------------+----------+-----------+----------------+\nsalty-wordpress \u279c  wordpress-develop.dev  wp site list\nError: This is not a multisite install.\nsalty-wordpress \u279c  wordpress-develop.dev  wp multisite-conv\nsalty-wordpress \u279c  wordpress-develop.dev  wp core multisite-convert\nSet up multisite database tables.\nAdded multisite constants to wp-config.php.\nSuccess: Network installed. Don't forget to set up rewrite rules.\nsalty-wordpress \u279c  wordpress-develop.dev  wp plugin update --all --dry-run\nAvailable plugin updates:\n+------------------+----------+-----------+----------------+\n| name             | status   | version   | update_version |\n+------------------+----------+-----------+----------------+\n| demo-plugin      | inactive | 0.1-alpha | 1.0            |\n| shortcode-ui/dev | active   | v1.0      | 0.4.0          |\n| wp-gistpen       | inactive | 0.4.0     | 0.5.7          |\n+------------------+----------+-----------+----------------+\nIs there a chance you have a plugin interfering with output?\n. Hm. Hard to say what this might be without access to your environment to reproduce. Given this is the first report of it though, I suspect it's specific to your environment.\n. I took a little look into this. What would be ideal would be to change:\nDownloading update from https://downloads.wordpress.org/plugin/wp-gistpen.0.5.7.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nto \nDownloading update from https://downloads.wordpress.org/plugin/wp-gistpen.0.5.7.zip...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nGistpen updated successfully from version 0.5.5 to version 0.5.7.\nHowever, it doesn't appear we have easy access to that change because WP_CLI\\UpgraderSkin know of the scope in which it's being run. \nIn #1358, we added a table summary like this:\nSuccess: Updated 4/4 plugins.\n+------------------+-------------+-------------+---------+\n| name             | old_version | new_version | status  |\n+------------------+-------------+-------------+---------+\n| co-authors-plus  | 2.6.1       | 3.1.1       | Updated |\n| demo-plugin      | 0.1-alpha   | 1.0         | Updated |\n| shortcode-ui/dev | v1.0        | 0.4.0       | Updated |\n| wp-gistpen       | 0.4.0       | 0.5.7       | Updated |\n+------------------+-------------+-------------+---------+\nWe could add a new --format=<format> argument, default to table and also support summary as a one-liner format.\n. #1936 produces output like this:\nsalty-wordpress \u279c  wordpress-develop.dev  wp plugin update --all --format=summary\nEnabling Maintenance mode...\nDownloading update from https://downloads.wordpress.org/plugin/co-authors-plus.3.1.1.zip...\nUsing cached file '/home/vagrant/.wp-cli/cache/plugin/co-authors-plus-3.1.1.zip'...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nDisabling Maintenance mode...\nSuccess: Translations updates are not needed for the 'English (US)' locale.\nSuccess: Updated 1/1 plugins.\nCo-Authors Plus updated successfully from version 2.6.1 to version 3.1.1\nHowever, I think we should just suppress everything but the single lines.\n. > So it looks like this functionality would only be for update --all and not updating individual items (e.g. wp-cli plugin update akismet)?\nIncorrect. It would also be available for the latter.\n. --format=summary will be available in v0.20.0\n. > I thought @ is not your friend.\nIt's not, except in cases like this. @unlink() is often used in WordPress core because of filesystem sketchiness.\n. As @szepeviktor mentioned, there are already a few different ways to review changes going into WP-CLI. The release notes are the canonical source of documentation for each release.\n. Can you share the output of:\nbash bin/install-wp-tests.sh wordpress_test root '' localhost latest\nfrom your plugin directory?\n. Can you try running rm -rf /tmp/wordpress-tests-lib; bash bin/install-wp-tests.sh wordpress_test root '' localhost latest and then phpunit again? It seems like you may have a bad download\n. Hi @sjalgeo,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. > One possible solution is to consider --url global if it comes before any positional argument.\nThis is my preference, but it will be a breaking change.\nRelated #1222\n\nI suggest to have site_url and site_path to avoid mixing globals and command specific options.\n\nI'm not keen the rename the fields, as it doesn't solve the larger problem.\n. > Then maybe rename the global --url?\nPer my initial comment, this is the route we'll eventually take:\n\nOne possible solution is to consider --url global if it comes before any positional argument.\n\nHowever, it would be a relatively substantial breaking change, so won't happen until v1.0.0 (if / when that comes).\n. While we still have this issue with global vs. local arguments, this particular issue is actually a documentation bug, as wp site list doesn't support filtering based on the 'url' argument in the first place. The 'url' value on a site object isn't stored in the database, but rather generated on the fly. I'm going to update the documentation as such.\nYou can filter wp site list with --domain=<domain> and --path=<path> because those columns exist in the database.\n. I'm not keen to go down this route, per https://github.com/wp-cli/wp-cli/issues/1939#issuecomment-125061922\n. > Is there a way to write a script that generates this PR?\nCould be. I don't think it's necessary at this point though.\n. Can you share the output you get?\n. > I think that I must add an array. How can I do this?\nYou don't need to format as an array. WP-CLI already intelligently parses CSV: https://github.com/wp-cli/wp-cli/blob/master/php/commands/post.php#L67\nBut, that's just for wp post insert. The same needs to be handled for wp post update\n. Considering this for https://github.com/danielbachhuber/wp-rest-cli\n. > As 0.19.2, the only way to do this, that I know of, is to grep the result of wp post list for the value I'm looking for.\nDoesn't this do what you're asking?\nsalty-wordpress \u279c  wordpress-develop.dev  wp post list --post_name=hello-world\n+----+--------------+-------------+---------------------+-------------+\n| ID | post_title   | post_name   | post_date           | post_status |\n+----+--------------+-------------+---------------------+-------------+\n| 1  | Hello world! | hello-world | 2015-07-27 03:29:02 | publish     |\n+----+--------------+-------------+---------------------+-------------+\nsalty-wordpress \u279c  wordpress-develop.dev  wp post list --post_name=hello-world --field=ID\n1\n. Sorry, the argument is --name:\nsalty-wordpress \u279c  wordpress-develop.dev  wp post list --name=foo --field=ID\nsalty-wordpress \u279c  wordpress-develop.dev  wp post list --name=hello-world --field=ID\n1\nYou can use any arguments you'd pass to WP_Query\n. > I think the existence of the plugin should be checked in the case that it doesn't exist.\nThis assumption seems reasonable to me.\n. > Is there a nicer way than this?\nNot that I'm aware of.\n. > Is there a way to generate an error in the console when this failure happens?\nThis is the error I get:\nsalty-wordpress \u279c  fusion-2015  wp rewrite flush --hard\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\nDo you not get similar?\n. > (a) Do you agree that the listed developer is the main developer of WP-CLI?\nConceptually, yes. However, Cristi passed along maintainership a year ago.\n\n(b) Do you agree that WP-CLI will be in trouble if the listed developer leave the project (e.g., if he wins in the lottery, to be less morbid)?\n\nNope. Project seems to be fine from my perspective.\n\n(b) Does WP-CLI have some characteristics that would attenuate the loss of the listed developer (e.g., detailed documentation)?\n\nN/A. The project is pretty well-documented.\n. You can use:\nwp plugin delete $(wp plugin list --status=inactive --field=name)\nI'll add it as an example to wp plugin delete\n. > Thanks! What version of wp-cli supports this?\nv0.12.0 and higher\n. > maybe it'd be cleaner to make the parent of an active theme return a status that isn't \"inactive\"...\nOr we could have parent as the status for an \"active\" parent theme?\n. Cool, #2033\n. Could be a good idea. @rmccue added something similar to WP-API recently: https://github.com/WP-API/WP-API/blob/develop/bin/release.sh\n. Here's another script: https://github.com/mikejolley/github-to-wordpress-deploy-script\n. At this point, this isn't something that makes sense to include in WP-CLI core. I'd love to see a community command that implements this functionality though, with comprehensive tests.\n. Hm, doesn't seem like it's easily possible:\nsalty-wordpress \u279c  wordpress-develop.dev  wp eval \"require_once( ABSPATH . 'wp-admin/includes/upgrade.php' ); WP_CLI\\Utils\\get_upgrader( 'WP_CLI\\NonDestructiveCoreUpgrader' )->maintenance_mode( true );\"\nPHP Fatal error:  Call to a member function abspath() on a non-object in /srv/www/wordpress-develop.dev/src/wp-admin/includes/class-wp-upgrader.php on line 717\nEven with that hacky statement, it looks like $wp_filesystem isn't instantiated.\n. > Running wp scaffold package-tests . from within my plugin directory says I'm missing a composer.json file.\nCan you share the exact output of your command execution?\n. @mortona42 Sorry for the late reply. Did you get this sorted out?\n. @mortona42 @jarednova Could one of you share a branch I can check out to reproduce locally?\nJust so it's stated, I only ever tested wp scaffold package-tests against a standalone WP-CLI command (e.g. Dictator)\n[vagrant@localhost wp-cfm]$ ./vendor/behat/behat/bin/behat\nPHP Fatal error:  Class 'WP_CLI_Command' not found in /vagrant/public/wp-content/plugins/wp-cfm/includes/class-wp-cli.php on line 7\nThis means includes/class-wp-cli.php is loading before WP-CLI is actually loaded.\ninstall-package-tests.sh, which is run by Travis, calls set_package_context() (ref). This sets up a config.yml file to load your custom command for the Behat tests, which means WP-CLI will be loading the command far after Composer has done its thing.\n. What are you trying to do?\n. > This doesn't obey whatever's registered via register_importer, which is super annoying if you need to subclass the importer.\nIt seems like we should fix this.\n\nIn addition, the methods are all declared private, so if you want to make your own custom import command, you can't simply subclass and override. protected would be mucho better here.\n\nWhich methods do you need to subclass?\n. wontfix for this issue, actually. register_importer() registers a dispatch callback, which isn't compatible with WP-CLI's implementation of the importer.\nAnd, given WP-CLI has a very custom implementation of the importer, I'm not keen to support one-off extensions of it. WordPress import / export generally needs to be rewritten from the ground up\n. > Batch post and term operations could be sped up significantly\nDo you have any numbers to share?\nAnd, just to be clear, this means term counts will be incorrect after the operation?\n. > wp_defer_term_counting(false) will trigger the recount, but in batch (deduped) as opposed to each item.\nGreat.\n\nI don't know if I would get to it this soon, but working on a PR I could run some benchmarks.\n\n:+1: \n. Thanks \u2014 one small note to address.\n. You'll want to merge master too, so the build doesn't fail.\n. :palm_tree: \n. What are the permissions for /tmp/wp_55c02efd45b5c.phar?\n. I don't have any good ideas, unfortunately :/\n. @nyordanov worth making note of this somewhere?\n. Actually, with #2003, we'll throw an error when the parent directory isn't writable.\n. > Instead of moving the wp-cli.phar executable to /usr/local/bin/wp as suggested by http://wp-cli.org/#installing, it's best to put it in one of the following listed directories in $ sudo su -c 'echo $PATH'\nWhy?\n\nRemember to log out and log back in again after you've moved wp-cli - otherwise you will get an error like: $ wp -bash: /usr/local/bin/wp: No such file or directory.\n\nThis is incorrect. If the directory you've moved WP-CLI to is already on your PATH, you don't need to log out and log back in.\n. > It is useful to follow standards:\nJust to clarify, the standard for /usr/local/bin is:\n\nThe original idea behind '/usr/local' was to have a separate ('local') '/usr' directory on every machine besides '/usr', which might be just mounted read-only from somewhere else. It copies the structure of '/usr'. These days, '/usr/local' is widely regarded as a good place in which to keep self-compiled or third-party programs. The /usr/local hierarchy is for use by the system administrator when installing software locally. It needs to be safe from being overwritten when the system software is updated. It may be used for programs and data that are shareable amongst a group of hosts, but not found in /usr. Locally installed software must be placed within /usr/local rather than /usr unless it is being installed to replace or upgrade software in /usr.\n\n/usr/local/bin is the proper place to put WP-CLI, not /usr/bin.\n. Just a heads up \u2014 WP-CLI discourages use of wp as root, and doesn't formally support it.\n. :apple: \n. WordPress 4.2.4 was just released, so you may have hit the edge case where the locale build hadn't been created yet. I just ran the command, and it works for me:\nsalty-wordpress \u279c  wp-se.dev  wp core download --locale=sv_SE\nDownloading WordPress 4.2.4 (sv_SE)...\nSuccess: WordPress downloaded.\nCan you try again?\n. > I understand this might cause some issues with positional arguments\nUnfortunately, because [<value>] is already optional, we couldn't make this change without breaking backwards compatibility.\nConsider this command:\nwp post meta add 1 2 foo`\nIf we supported <id>..., WP-CLI could interpret this as \"add 2=>foo to post 1\" or \"add STDIN to meta key foo for posts 1 and 2\". This ambiguity would be a bug.\n\nthe command doesn't accept a list of comma-separated IDs either, instead only affecting the first post in the list.\n\nI'm not a huge fan of the CSV approach, because it'd be inconsistent with our other command arguments.\n. > Inconsistent in the sense that no other command would support it? Or in some other way? If the former, why not add CSV support to other commands too?\nInconsistent in that other commands support multiple post IDs with <id>...\n. Closing in favor of #1784\nREST API is the one true path forward for managing WP data.\n. Suggestion to deprecate @synopsis altogether: https://github.com/wp-cli/wp-cli/pull/1984#issuecomment-131860668\n. @synopsis is cleaned up in the codebase. Punting on formally deprecating it, though.\n. > wp-cli currently supports only WordPress versions 3.5.2 and above. While I agree that helps to create new functionality and extends features beyond what would be possible with full backward compatibility, it would be helpful to have some functionality extend to earlier versions in order to facilitate upgrades to newer versions.\nUltimately, it's about maintenance burden, and the resources we have available to shoulder the maintenance burden (e.g. me). I've actually been considering increasing the minimum supported version to WP 4.0 or so.\n\nAre there some features that are required for any wp-cli operation at all, or can older versions enjoy some reduced functionality?\n\nHere's when minimum supported version was bumped to 3.5.2 #1004\nFor the purposes of upgrading, you can use wp core download --force:\nsalty-wordpress \u279c  test-dir  wp core download --force --version=2.8\nDownloading WordPress 2.8 (en_US)...\nSuccess: WordPress downloaded.\nFor other subcommands, you could also try WP-CLI < v0.11.0 (when the version check was introduced #567). However, it appears there were some problems with the loader process when this was last attempted #593\n. Oh, Timber has WP-CLI as a dependency: https://github.com/jarednova/timber/blob/c27c1f8e35a4765219e056ad157bdf3da655ee13/composer.json#L36\nWe can't solve this problem with WP-CLI, so we'll need to solve it with Timber https://github.com/jarednova/timber/issues/687\n. I'd prefer to land #129 for prompts.\n\nI'm open to using a configuration file if that is something this project would consider merging.\n\nYou can include --admin_password in your wp-cli.yml file:\ncore install:\n  admin_password: abc123\n. > Is it possible to use WP-CLI with a Skeleton WordPress install?\nShould be. What error do you get when you try to run WP-CLI?\n. $_SERVER['DOCUMENT_ROOT'] isn't set at the command line. See: https://github.com/wp-cli/wp-cli/issues/785#issuecomment-138040347\n. > While not horrible, it'd be awesome if a corresponding number was provided as an alias.\nWhy would this be useful?\nHow should this work if you could have a theme called 1, and they both appeared on the list?\n. I don't think this is a good idea, sorry.\n. https://github.com/wp-cli/php-cli-tools/releases/tag/v0.10.5\n. Sorry for the late reply here.\n\nMy local Wordpress site is running with MAMP (which is working). I'm not sure if that's relevant for the install script since I think it's creating a temporary DB to run the tests... Does it matter if it uses the built-in OSX mysql or MAMP's MySQL?\n\nIt's only relevant in as so far as the root user actually has access to create and delete tables for the MySQL instance running on localhost. In this case, your root user has a non-blank password, which means it can't create and delete tables using the default setup instructions.\nYou can track down the password for root user at local host or, probably better, use the credentials you use for your MySQL instance running in MAMP.\n. > Is this the expected behavior of the installation script?\nYep.\n\nDo you want a PR mentioning this in the docs?\n\nSure, seems reasonable.\n. Seems reasonable.\n. Going to pass on this. It doesn't appear there are no-content packages for all versions, locales, and archive file types. Our logic within Core_Command->download() is already quite complex, so I don't think it's worth the effort to write tests around all of the additional complexity.\n. Thanks for your help with this, @szepeviktor \n. Did you follow the configuration instructions?\n. Can you share the full output of command execution?\n. Hm. I just tested on my Webfaction instance, and it worked fine:\n```\nweb129.webfaction.com \u279c  dbcom  wp option get permalink_structure\n/%year%/%monthnum%/%day%/%postname%/\nweb129.webfaction.com \u279c  dbcom  rm .htaccess\nweb129.webfaction.com \u279c  dbcom  wp rewrite structure '/%year%/%monthnum%/%day%/%postname%/' --hard\nSuccess: Rewrite structure set.\nweb129.webfaction.com \u279c  dbcom  cat .htaccess\nBEGIN WordPress\n\nRewriteEngine On\nRewriteBase /\nRewriteRule ^index.php$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.php [L]\n\nEND WordPress\n```\nWP-CLI calls flush_rewrite_rules(), which calls WP_Rewrite::flush_rules(): https://core.trac.wordpress.org/browser/trunk/src/wp-includes/rewrite.php#L2178\nIt appears there are a couple cases in which rewrites wouldn't actually get created:\n1. You have a filter on flush_rewrite_rules_hard somewhere in your codebase.\n2. save_mod_rewrite_rules() is missing from your server (disabled or otherwise)\nBut, neither of these cases explain why it works in the admin.\nJust to be clear, the .htaccess file gets created, but is empty?\n. > Shouldn't structure --hard do that on its own though?\nIt does for me locally:\n```\nsalty-wordpress \u279c  wordpress-test.dev  rm .htaccess\nsalty-wordpress \u279c  wordpress-test.dev  wp rewrite structure \"/%year%/%monthnum%/%postname%\" --hard --tag-base=tags --category-base=topics\nSuccess: Rewrite structure set.\nsalty-wordpress \u279c  wordpress-test.dev  cat .htaccess\nBEGIN WordPress\n\nRewriteEngine On\nRewriteBase /\nRewriteRule ^index.php$ - [L]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule . /index.php [L]\n\nEND WordPress\n```\nBut, I'm actually testing on a VM without Apache. \n\nUsing --debug on the command doesn't show anything irregular.\n\nYeah, --debug isn't very helpful right now. #1022\n. I'm not sure what this issue is, but it seems to be specific to your environment. Sorry I can't help further.\n. > Resulting .htaccess file is empty.\n@davidfavor Per the documentation, you need to add the following to a wp-cli.yml config file:\napache_modules:\n  - mod_rewrite\n. If you get this error:\n\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\n\nIt means your config.yml isn't being read properly.\nCan you try including wp-cli.yml in the root directory of your WordPress install?\n. > So export WP_CLI_CONFIG_PATH=... doesn't work as docs say...\nWell, it does work generally. It just doesn't work in your environment, likely for an environment-specific reason.\nCan you run wp-cli.phar --allow-root rewrite structure '/%postname%' --hard --debug and share the full result?\n. > Let me know if there's a way to debug what's occurring + I'll report my findings.\nAs I mentioned, please run wp-cli.phar --allow-root rewrite structure '/%postname%' --hard --debug and share the full result.\n. I realized what the problem is.\nWhen we use WP_CLI::launch_self() to spawn a new process, the environment variables (including $HOME) aren't persisted. This means ~/.wp-cli/config.yml isn't loaded, and your apache_mods declaration is missed.\nAn immediate workaround is to create wp-cli.yml within your project with the apache_mods declaration.\nWe might also consider passing WP_CLI_CONFIG_PATH to the executed command, which I think is a reasonable assumption.\n. We already have --skip-columns=guid.\nIf you're running search and replace against an entire production database, it behooves you to:\n1. Back up your production database before you run the command, and ensure you can successfully restore.\n2. Run the command locally or against staging before running against production.\n3. Verify expected results locally or on staging before running against production.\nIf you don't follow these steps, there are many things you can accidentally break by running search / replace.\n. > It'd actually be nice to have additional documentation about the GUID thing.\nWhat should be documented?\n. Here's where the error notice is coming from: https://core.trac.wordpress.org/browser/trunk/src/wp-includes/link-template.php#L2742\nFrom blame, it seems like the bug has been present for quite a while: https://core.trac.wordpress.org/changeset/24844\n$pagenow is set in https://core.trac.wordpress.org/browser/trunk/src/wp-includes/vars.php#L22. wp-settings.php calls includes/vars.php but wp-settings-cli.php does not. \nWe could set $pagenow to index.php, but it seems like the sky could fall on our heads. Setting it to a null value is less risky, me thinks, because I'm not aware of any existing scenarios where a plugin or theme would be checking for $pagenow to be null. \n. Noted for #1969\n. > Or move Spyc from global namespace.\nThis would be my preference, although it would be a breaking change we'd need to accommodate in a major release.\n. I'm not sure why removing Spyc from global namespace was my initial inclination. Using mustangostang/spyc does the trick just fine.\n. > It's in french but the last line means \"Not able to create the directory\". What is the problem ?\nWP-CLI likely can't create wp-content/upgrades. You may need to create it manually, and give WordPress read/write access to it.\n. > It could be nice to create the directory if it doesn't exist.\nIt tried to, but didn't have the appropriate permissions.\n. It's already supported:\n* [--<field>=<value>]\n * : Associative args for the new post. See wp_insert_post().\n. > Does Wp-cli fetches data from cache when running some commands\nDo you have a caching system in place on your sites? Does the problem persist with cache disabled?\nWP-CLI doesn't natively cache any data.\n. > I must say we use W3 Total Cache and the problem is gone when we disable that\nWhich caching strategy are you using with W3 Total Cache?\n. Nothing actionable here at this point. Tests are slow because we have lots of tests.\n. version_compare() still seems to work for what we need it to:\nsalty-wordpress \u279c  wordpress-test.dev  wp shell\nwp> version_compare( '0.19.0', '0.20.0' )\nint(-1)\nwp> version_compare( '0.19.0', '0.20.0-alpha' )\nint(-1)\nwp> version_compare( '0.19.0', '0.20.0-alpha-30a1ce9abb' )\nint(-1)\nwp> version_compare( '0.20.0', '0.20.0-alpha-30a1ce9abb' )\nint(1)\nwp> version_compare( '0.20.0-alpha-3d018a5', '0.20.0-alpha-30a1ce9abb' )\nint(-1)\nwp> version_compare( '0.20.1-alpha-3d018a5', '0.20.0-alpha-30a1ce9abb' )\nint(1)\n. > Is it only json?\nCorrect, only JSON.\n. > Is putting register_activation_hook() inside of a class really a bad practice? It seems common.\nI don't know that it's necessarily a bad practice, but you do need to make sure your code is executing as you expect it to. \n\nIs the __construct() method's protected keyword the problem?\n\nI don't see __construct() in the example. However, if you were to register a protected method as your registration callback, it wouldn't be executed because the callback is executed by call_user_func_array() which doesn't have access to private scope.\n. Build fails for unrelated reason\n. Build fails for unrelated reason\n. > Could we make it return an error code so provisioning failures gets registered?\nYes, although we need to work out the details. See also #1430\n. Ran feature/cli.feature locally, which passed.\nAlso manually tested following these steps:\nlocal \u279c  wp-cli git:(1962-directory-warning) \u2717 php -dphar.readonly=0 utils/make-phar.php wp-cli.phar --quiet\nGenerated wp-cli.phar\nlocal \u279c  wp-cli git:(1962-directory-warning) \u2717 mkdir /tmp/parent\nlocal \u279c  wp-cli git:(1962-directory-warning) \u2717 mv wp-cli.phar /tmp/parent\nlocal \u279c  wp-cli git:(1962-directory-warning) \u2717 chmod 555 /tmp/parent\nlocal \u279c  wp-cli git:(1962-directory-warning) \u2717 php /tmp/parent/wp-cli.phar cli update --nightly\nError: /private/tmp/parent is not writable by current user\n. I didn't write out tests for this because I don't want our test suite to end up with unwritable directories.\n. > I am unsure of how to return output from wp-cli into array objects\nHave you considered the --format param for wp user list? You can use wp user list --format=json or wp user list --format=csv, and then mangle the data as you'd like in your bash script.\n\nact on error text returned.\n\nIf you get an error, you should get an error code.\n. wp post list supports any arguments that WP_Query supports. WP_Query doesn't support post_date as an argument.\nWP_Query does support year, monthnum and day:\n```\nwp post list --year=2011 --monthnum=1 --day=1\nwp post list --year=2011\n```\n. These global params should be styled:\n\nOr we should just remove them from all pages that aren't the global params page, and link the global params page instead.\n. > Hey Daniel! I'd definitely like to help with this.\nI appreciate it :)\n\nHow s/could we get started?\n\nIf you just want to contribute design ideas, feel free to drop them in this thread.\nIf you feel like contributing some CSS, the website is open source too. Getting it configured locally is a good start. I'm happy to provide input on how you might go about submitting some pull requests.\n. We could make both of those changes! How do you feel about dropping global parameters from those pages entirely?\n. I added the horizontal rule: http://wp-cli.org/commands/cache/\n\nHow should Global Parameters work as a sidebar widget on mobile?\n. > If you're talking in real, practical terms: I'd say sub-commands = 60%, global parameters = 40% and both become 100% on mobile. You can change the float left/right on mobile widths to change the order of them to be what you'd like (ie: to put one on top of the other).\nCool. I'll take care of this when I have a moment.\n. > Want to shoot me an email and we can discuss?\nLet's chat in #cli in WordPress Slack.\n. Global params are nice and shiny now:\n\n. Looks like removing the line breaks a lot of things. Moving to require_once in #2011. Thanks for the heads up\n. Seems to work fine for me:\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin install advanced-excerpt --version=4.2.2\nInstalling Advanced Excerpt (4.2.2)\nDownloading install package from https://downloads.wordpress.org/plugin/advanced-excerpt.4.2.2.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nWhich version of WP-CLI are you using? wp --info\n. > (HTTP code 0).\nThis is the tell-tale sign. Your remote request is failing for some reason.\nHere's where it does the check: https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/CommandWithUpgrade.php#L195\nDo you have any plugins activated which might be interfering with the request?\n. Thanks for the report, @a1exus. The theme is being updated, however there's a bug in the reporting.\nIf you want to use --format=summary, you'll get the correct message. I'll get the bug fix into master shortly, and will likely release a v0.20.1 in the next couple of weeks to address this issue (as it was introduced in v0.20.0)\n. For subdomain multisite on Apache, a new VirtualHost record will need to be created. Not sure about subdirectories.\n. > I think that this method is not properly loading WP-CLI config when launching a new WP-CLI process but I haven't investigated this further.\nIt doesn't, it just persists specific runtime args: https://github.com/wp-cli/wp-cli/blob/master/php/class-wp-cli.php#L405\nI think the most appropriate thing to do would be to pass apache_mods as another runtime arg to use, specifically for this command.\nWe can go ahead and land this as it is.\n. > so I think it makes sense to do the same thing when we test plugins.\nBut plugin tests use the same test suite as core? I'm not sure I follow what your suggestion is.\n. > Make sense?\nYep. Looks like it's a bug with this regex: https://github.com/wp-cli/wp-cli/blob/ad54db39f461d5d00cbb8554178dc90d72fdce1f/php/WP_CLI/Runner.php#L214\n\nIf not would be happy to clarify but I think generally the parsing of the wp-config needs to be cleaned up a little in wp-cli\n\nKnown issue #1631\ntl;dr; we shouldn't be parsing wp-config.php with regex.\n. :cherries: \n. > However, installed but not active languages are still reported as having updates available in the Wordpress GUI.\nI've got this worked out for themes and plugins, but it doesn't appear core supports checking for translation updates on multiple locales. As such, when WordPress shows there are updates for other locales, it's actually just showing that there are theme and plugin translation updates.\nCan you share the UI you see?\n@johnbillion Can you confirm my understanding? Worth submitting a Trac ticket about changing the behavior?\n. > What's the best way to test if they exist on multisite, but not on a particular blog?\nActually, you'll want to use the --network flag with wp user list to get all users on the network.\nsalty-wordpress \u279c  wordpress-develop.dev  wp core multisite-convert\nSet up multisite database tables.\nAdded multisite constants to wp-config.php.\nSuccess: Network installed. Don't forget to set up rewrite rules.\nsalty-wordpress \u279c  wordpress-develop.dev  wp user list --network\n+----+------------+--------------+-----------------------+---------------------+\n| ID | user_login | display_name | user_email            | user_registered     |\n+----+------------+--------------+-----------------------+---------------------+\n| 1  | daniel     | daniel       | d@danielbachhuber.com | 2015-07-27 03:29:02 |\n+----+------------+--------------+-----------------------+---------------------+\nsalty-wordpress \u279c  wordpress-develop.dev  wp user delete daniel\n--reassign parameter not passed. All associated posts will be deleted. Proceed? [y/n] y\nSuccess: Removed user 1 from http://wordpress-develop.dev\nsalty-wordpress \u279c  wordpress-develop.dev  wp user list\n+----+------------+--------------+------------+-----------------+-------+\n| ID | user_login | display_name | user_email | user_registered | roles |\n+----+------------+--------------+------------+-----------------+-------+\n+----+------------+--------------+------------+-----------------+-------+\nsalty-wordpress \u279c  wordpress-develop.dev  wp user list --network\n+----+------------+--------------+-----------------------+---------------------+\n| ID | user_login | display_name | user_email            | user_registered     |\n+----+------------+--------------+-----------------------+---------------------+\n| 1  | daniel     | daniel       | d@danielbachhuber.com | 2015-07-27 03:29:02 |\n+----+------------+--------------+-----------------------+---------------------+\n. > So, if a user exists in multisite, then how do you go about adding them to a particular blog then?\nwp --url=subsite.example.com user set-role <user-login> <role>\nGenerally, the docs are your friend: http://wp-cli.org/commands/\n. @danlasota no worries. Any other questions on this thread?\n. > I did some tests for adding approximately 400 users, and wp processes about two account creations per second.\nYou may also have some hooks firing on user creation that are slowing things down. This seems pretty slow. How many users do you have to import in total?\n\nI know I could manipulate the WordPress database much faster, if I knew which tables to manipulate. The last time I looked into it, WordPress puts what blogs a user is a member of (with roles), into an encoded string. Would anyone have any info about deciphering and manipulating this string? How often does WordPress change this string? (I don't want to write brittle code that breaks between WordPress updates).\n\nI think using WordPress APIs is your safest bet. Unless it's a very controlled environment, direct database manipulation is generally fraught with land mines, as its hard to know how plugins and themes are changing things / expecting things to be changed.\nHave you considered wp user import-csv to get around WordPress load time?\n. > I realize that its inefficient to have a script that keeps trying to add users who already exists in terms of cpu, but its efficient in scripting time...\nYou could also cache usernames for those users who already exist to a local file, and grep that before trying to add them again. You can even create the local file on each script execution to ensure its fresh\u00a0\u2014 it would still have the performance boost of not hitting WordPress.\n\nIt might be nice if there is a way to have wp-cli just take usernames and 'try' to add them. If the user already exists in the network, fine. Just add them to the particular blog. If they already exist at the particular blog, fine, do nothing.\n\nWhile this is a bit of an edge case to accommodate in the main project, it should be quite simple to do with a custom WP-CLI command. See https://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook#anatomy\n. Community command installation and management isn't supported at the moment. #1564 has the history.\n. > I'm trying to install my plugin system wide, but was unsure where to put the files as i have installed via homebrew.\nWhere you put the files shouldn't matter. You can require them in a config.yml file, and then load the config.yml file with a WP_CLI_CONFIG_PATH environment variable.\nLearn more about runtime configuration here: http://wp-cli.org/config/\n. Hm. Probably seems best as a community command for the time being.\n. > I was wondering if generating a wp-yml file could be built as a new feature.\nWhat would the file contain?\n. I'm sorry. I don't understand why this would need to be a feature of WP-CLI. Why can't you just commit a file with these details to your version control?\n. I see.\nFor the logic you want, I think it would make most sense as a community command. In fact, I started something related in the past: https://github.com/danielbachhuber/dictator\nAlso, I don't know that wp-cli.yml is the best place to store this data, as it defines the default arguments every time you run a given command. Instead, you might consider a WP-CLI command to populate a bash setup.sh file, intended to be run once (or safely run multiple times).\n. > I noticed some php \"notices\" probably related to this code... hopefully this is helpful, if not, feel free to ignore it :)\nOops. Fixing that in #2573. Thanks for the report :)\n. Continuing on with this as a community command https://github.com/runcommand/media-sideload\n. Not sure I follow what the bug report is. wp core download --force works fine for me in an empty directory:\nsalty-wordpress \u279c  wp-test.dev  ls -al\ntotal 0\ndrwxr-xr-x 1 vagrant vagrant   68 Sep  7 14:41 .\ndrwxr-xr-x 1 vagrant vagrant 1088 Sep  7 14:41 ..\nsalty-wordpress \u279c  wp-test.dev  wp core download --force\nDownloading WordPress 4.3 (en_US)...\nSuccess: WordPress downloaded.\nCan you clarify?\n. > I'm currently switched to that directory and I run 'wp core update'.\nAre you running wp core download or wp core update ? They're two separate commands, you know.\nAlso, can you share the directory structure?\n. Sorry for the late reply. Were you able to sort this out?\nIf not, can you share wp --info? And, does ~/nextlocal/nextlocal.solar have an index.php file in it, by chance?\n. Not sure what this is, but it seems to be a problem specific to your environment. Sorry I can't help further.\n. > I can confirm the same running wp core download in an empty directory\nCan you share ls -al ? Also, can you run wp core download --debug and share the full output?\n. > The output of wp core download --debug for me is:\n\n\nDebug: ABSPATH defined: /home/jaggedsoft/nextlocal/hosted/nextlocal.website/ (0.037s)\n\n\nwp core download is supposed to be hooked on to before_wp_load (ref). If it's getting to \"Error: This does not seem to be a WordPress install.\", then WP-CLI isn't calling core download on thebefore_wp_load` hook (ref).\nAre you able to reproduce in another environment, or in just this one? Did you install PHP in this environment?\n\nCould we please re-open this and drop the state:unconfirmed tag now that there's at least 3 people experiencing this?\n1. Re-opening the issue doesn't do anything to solve the problem in your environment.\n2. The issue is state:unconfirmed because it's not a confirmed issue \u2014 it only reproduces in maybe one other environment.\n\nAs a volunteer-maintained free and open source project, WP-CLI offers no guarantees of user support. The issue tracker is intended as a development backlog, and for confirmed bugs.\n. > Myself, prosti, GavinCS above all have the same issue.\nYou all have the same reported symptoms. This doesn't necessarily mean you have the same issue.\n\nOf course PHP is installed.\n\nSorry, I meant did you install PHP in that environment? Do you know the specifics of the configuration, and whether there might be anything special about it?\n\nOn line 747 of core.php you will see:\nThe issue is you're triggering an error if you want to install in a blank folder, because is_readable is returning false since there is no \"wp-includes/version.php\"\n\nRight, because that method is mapped to wp core version. If you run wp core version in an empty directory, you'll get that error, as I do:\nsalty-wordpress \u279c  empty-dir  wp core version\nError: This does not seem to be a WordPress install.\nPass --path=`path/to/wordpress` or run `wp core download`.\n\nwp core download should work on completely empty folders, should it not?\n\nIt does in my testing, and for many other users:\nsalty-wordpress \u279c  empty-dir  wp core download\nDownloading WordPress 4.4.2 (en_US)...\nUsing cached file '/home/vagrant/.wp-cli/cache/core/wordpress-4.4.2-en_US.tar.gz'...\nSuccess: WordPress downloaded.\n. Sorry, I don't follow. Can you clarify what you expect WP-CLI to be doing in this scenario?\n. > IMO WP-CLI should trigger switch_theme hook changes when theme is switched or activated :)\nWP-CLI calls switch_theme() https://github.com/wp-cli/wp-cli/blob/master/php/commands/theme.php#L141 which calls the switch_theme hook in turn https://core.trac.wordpress.org/browser/trunk/src/wp-includes/theme.php#L750\n\nIt work while we surf admin themes page and switch theme.\n\nWhen the theme is being switched from the admin, is the woocommerce_installed action called? https://github.com/woothemes/woocommerce/blob/master/includes/admin/class-wc-admin-notices.php#L37\n. > I assume CLI doesn't load admin?\nIt loads all of the admin APIs, but doesn't set the WP_ADMIN constant:\nwp> constant( 'WP_ADMIN' );\nPHP Warning:  constant(): Couldn't find constant WP_ADMIN in /home/vagrant/.wp-cli/php/WP_CLI/REPL.php(31) : eval()'d code on line 1\nWarning: constant(): Couldn't find constant WP_ADMIN in /home/vagrant/.wp-cli/php/WP_CLI/REPL.php(31) : eval()'d code on line 1\nNULL\nSee http://wp-cli.org/blog/how-wp-cli-loads-wordpress.html for more details.\n. In what ways is this different than the alias system we already have?\nFor instance, in your wp-cli.yml file, you can have:\ncore config:\n    dbuser: root\n    dbpass: \n    extra-php: |\n        define( 'WP_DEBUG', true );\n        define( 'WP_POST_REVISIONS', 50 );\nThese arguments become the default whenever you run wp core config\n. > Can you define a remote host like this?\nWP-CLI doesn't currently support connecting to a remote host. You may want to consider https://github.com/xwp/wp-cli-ssh\n\nor even a local root?\n\nThis example you're pointing to seems to refer to a remote staging site. WP-CLI can connect to any local WordPress install with the --path=/path/to/wp/directory argument.\n\nMaybe I just don't undertand the current alias system.\n\nHave you tried using it? Here's a blog post documenting the feature when it was introduced.\n. Picking this up in conjunction with #2754 for v0.24.0\n. The initial version of this feature works like this...\nOne or more aliases can be defined in config.yml or wp-cli.yml:\n@wpdev:\n  path: /srv/www/wordpress-develop.dev/src\nAn alias is called as the first argument to the wp executable:\nsalty-wordpress \u279c  .wp-cli  wp @wpdev option get home\nhttp://wordpress-develop.dev\nThe matching alias will overload the global parameters it defines. When an alias is used, any passed arguments will be treated as local parameters:\nsalty-wordpress \u279c  .wp-cli  wp @wpdev option get home --path=/srv/www/wordpress-develop.dev/src\nError: Parameter errors:\n unknown --path parameter\n. Feeling pretty good about this now.\nYou can define a group of aliases to run a command against all WordPress instances in the group:\n$ cat cat wp-cli.local.yml\nuser: daniel\n@both:\n  - @prod\n  - @dev\n@prod:\n  ssh: rc~/webapps/production\n@dev:\n  ssh: v/srv/www/runcommand.dev\n$ wp @both rewrite flush\nSuccess: Rewrite rules flushed.\nSuccess: Rewrite rules flushed.\nwp cli alias will give you a list of all aliases:\n```\n$ wp cli alias\n\n@both:\n  - @prod\n  - @dev\n@prod:\n  ssh: rc~/webapps/production\n@dev:\n  ssh: v/srv/www/runcommand.dev\n@all:\n  - @both\n  - @prod\n  - @dev\n```\n. > The command should first check that wp-config.php file is writeable before actually creating the network.\nI'm not sure of this conclusion. I think converting a single site to multisite when wp-config.php isn't writable is a valid use case. However, we could do better about warning the user their constants are missing.\n. There is not a way to install plugins to the mu-plugins folder with WP-CLI.\nAn alternative would be to install the plugin with wp plugin install <my-slug>, and then move it to the mu-plugins directory.\n. > Is there a reason wp help doesn't validate its parameters if any are provided?\nWe could do that. We could also (possibly) fill in the provided parameters to the help docs, to visually communicate what you've already provided.\n. Punting on this, as it's not easily viable https://github.com/wp-cli/wp-cli/pull/2294#issuecomment-164040826\n. Related (I think) #1613\nHow would you feel about the quotes being automatically escaped? Or switch to --precise mode if quotes are detected?\n. @joehoyle Can you provide an example test case to work from?\n. Hm. I can't reproduce the behavior of json_encode() adding slashes.\nUsing this script:\n<?php\nadd_post_meta( $GLOBALS['argv'][3], 'urls', json_encode( array( 'https://hmn.imgix.net/humanmade-production/uploads/2015/05/airbnb-header4.png?w=940&h=400&fit=crop' ) ) );\nWhen I call wp eval-file wp-set-post-meta.php 100, I see this stored in the database:\n\n. Huh. I can't even forcefully add slashed data:\n<?php\n      global $wpdb;\n      $wpdb->query( \"INSERT INTO $wpdb->postmeta (post_id,meta_key,meta_value) VALUES ({$GLOBALS['argv'][3]},'urls','[\\\"https:\\\\/\\\\/hmn.imgix.net\\\\/humanmade-production\\\\/uploads\\\\/2015\\\\/05\\\\/airbnb-header4.png?w=940&h=400&fit=crop\\\"]')\");\n. I'm going to punt on this. Your particular need can be solved by dropping the https:// from your search-replace:\nwp search-replace hmn.imgix.net hmn-v2.imgix.net\nFortunately, WP-CLI isn't mangling data with its normal operation. If you know your dataset includes slashed JSON blobs, you can search-replace for that as well.\n. @gmcinnes thanks! Can you capitalize wordpress please?\n. Thanks for the report! We'll get this fixed up.\n. > What's the reason the environment variable is used here?\nTo be able to set directory PHPUnit looks in for the WordPress testing framework.\n. Related #2119\n. Here's the current version endpoint: http://api.wordpress.org/core/version-check/1.7/\n. From WordPress Slack:\n\ndd32 [7:17 AM] @danielbachhuber fyi we may return more offerings over either in the future (no idea what). But if you just want the latest version string, you could also try API version 1.0 or 1.1.\n. > This is because the VVV bash_profile points the WP_TESTS_DIR to the test framework from the development branch. I can fix this by removing that line from from the bash_profile, but I think it will confuse a lot of users using VVV.\n\nCan you open an issue with VVV please?\n. > Another point regarding the new install-wp-tests.sh code when installing WordPress for the tests:\nThe conditional was added in 01dd52e5f7822245a5fa06e27b8ff5b99248f4ed (11 months ago). I'll consider the situation you're describing with #2119\n. I've been on the fence about this issue, so I think we're going to punt and keep the existing behavior.\nWhile the global parameters section is slightly annoying to me as a power user, I totally appreciate how it can be useful for new users. --path and --url are very important parameters, so we should do whatever we can to ensure users are aware of them.\nThe Windows issue was addressed in #2100, and now we're even doing one better by respecting the $PAGER variable.\n. It should be. Can you try disabling plugins and switching to the standard theme to see if there's some nefarious code?\n. > it's intermediate issue.\nI don't follow. What do you mean by \"intermediate issue\"?\n. I don't follow how #1909 would've broken what you're describing. Can you share more detail?\n. I can't really reproduce the test case you're describing. These are all expected results:\nsalty-wordpress \u279c  wordpress-test.dev  wp site url 1\nhttp://wordpress-test.dev\nsalty-wordpress \u279c  wordpress-test.dev  wp site url 2\nhttp://wordpress-test.dev/foo\nsalty-wordpress \u279c  wordpress-test.dev  wp site url 3\nhttp://wordpress-test.dev/bar\nsalty-wordpress \u279c  wordpress-test.dev  wp site url 4\nError: Could not find the site with ID 4.\nsalty-wordpress \u279c  wordpress-test.dev  wp site list\n+---------+-------------------------+---------------------+---------------------+\n| blog_id | url                     | last_updated        | registered          |\n+---------+-------------------------+---------------------+---------------------+\n| 1       | wordpress-test.dev/     | 2015-09-13 13:45:48 | 2015-09-07 15:17:11 |\n| 2       | wordpress-test.dev/foo/ | 2015-09-13 14:45:24 | 2015-09-13 15:45:24 |\n| 3       | wordpress-test.dev/bar/ | 2015-09-13 14:45:29 | 2015-09-13 15:45:28 |\n+---------+-------------------------+---------------------+---------------------+\n\nUsing wp site url 1 return Error: Site not found. So I assume that WP-CLI is requesting the site on every request and because of that action ms_site_not_found is always fired.\n\nMaybe WP-CLI isn't able to determine the primary site on the network? What happens when you try wp site url 1 with a --url=<url> to a known URL on the site?\n. Where is wp installed to? Does the web PHP user have access to that path?\n. > I have an instance where I'm trying to use WP-CLI without requiring the use of custom --url flags by having my wp-config.php cleverly set the right value for DOMAIN_CURRENT_SITE.\nCan you share the contents of wp-config.php, minus any secrets?\n\nCan you suggest any reason why DOMAIN_CURRENT_SITE wouldn't work instead of the --url flag?\n\nThere are many reasons it can fail. See the history of closed issues against #1631\n. Maybe $_ENV isn't being set in CLI?\n. @joshkoenig Get this sorted out? Now that #2079 is landed, you might get better results by using nightly.\n. @joshkoenig Can you try again with WP-CLI nightly, and use --debug to get more verbosity out of the bootstrap process? #2138\n. Hi @cesarizu,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. Yes --network will be available in v0.21.0 #2048\nIf you're using v0.20.0, you can use wp cli update --nightly to upgrade to the latest on master.\n. :wine_glass: \n. I think I agree with this behavior. I'll need to give some thought as to whether or not it's a breaking change\u00a0(e.g. produce unexpected results for someone who is already dependent on the existing behavior).\n. Related #1063\n. In v0.23.0, you'll be able to deep merge by including the following at the top of your wp-cli.yml:\n_:\n  merge: true\n. Actually, orderby=>comment__in was only added in 4.4 https://core.trac.wordpress.org/ticket/33883\n. orderby=>include was added to WP_User_Query in 4.1 https://core.trac.wordpress.org/ticket/30064\n. As it turns out, wp user url hasn't ever existed.. No reason it shouldn't. Adding support in #2082\n. Actually, $autoload support was added to update_option() in WP 4.2. It will be a version-contingent feature.\n. Can you try specifying the PHP binary with one of these approaches?\n. Bummer. It looks like we aren't actually paying attention to any of these: https://github.com/wp-cli/wp-cli/blob/bd5ecd48d116e341730927e9c6460b79e5024c47/php/commands/cli.php#L189\n. @a1exus Can you install the nightly and try wp cli update --nightly to verify #2085 did the trick?\n. > I would assume that also wouldn't work\nHow do you mean?\nUse the install instructions here: http://wp-cli.org/#install\nBut replace the URL with that of the nightly Phar\n. @a1exus Run wp cli update --nightly, not wp cli update\n. > wp cli update didn't work so using (or not) --nighly wouldn't make any difference,\nHuh? wp cli update --nightly will always pull the latest nightly, regardless of which version you're currently running.\n. We'd have to do away with wp_http_supports() in get_core_checksums(), which should be easy enough to do because Utils\\http_request() will warn if a https request failed, but try again.\nHowever, we can't easily run on @when before_wp_load because we're dependent on global $wp_version, $wp_local_package. The former could be sniffed out of the version file, but the latter is populated by the database.\nIdeas?\n. > Is it possible to run before and after WP?\nNot easily. We'd need #2089 I think.\n. It isn't released yet. It will be included in v0.21.0:\n\nYou can install nightly with wp cli update --nightly\n. Can you try with an earlier release and see if you get the same results?\n. Hm. I don't think parsing with regex is the way to go.\n. > can you offer some more insight?\nAs indicated by many of the tickets linked to in #1631, regex is the source of the problem. #1703 is another example where parsing wp-config.php with regex causes problems. More regex won't be the solution to the problem.\nI'm open to pull requests which parse wp-config.php through some other means than regex.\n\neven your opinion on the general approach of whitelisting definitions and declarations.\n\nI think a whitelist approach would be a pretty substantial breaking change with, likely, unexpected implications.\n. > do you have any preferences or should I just experiment?\nI don't have any preference \u2014 but I also haven't explored the options at depth.\n. > One potential solution is to load WP, but point ABSPATH at a different location\nHow does this not break everything dependent on ABSPATH?\n. Nothing other than it's very old and likely needs to be revisited.\n. Reopening this because the load_wordpress() method needs to more sensibly check $this->check_wp_version() and:\nif ( !Utils\\locate_wp_config() ) {\n            WP_CLI::error(\n                \"wp-config.php not found.\\n\" .\n                \"Either create one manually or use `wp core config`.\" );\n        }\nEven once these are in, I'm going to leave this open for a while for any unexpected explosions that occur.\n. @goldenapples can you write a test case to reproduce?\n. After https://core.trac.wordpress.org/ticket/34217 lands, we'll want to replicate whichever approach core has taken.\n. Haven't heard of any more issues \u2014 :ship: :ship: :ship: \n. Even this doesn't solve the problem entirely (with aforementioned trunk != latest issue), it does improve upon it. I think it's good to land as-is.\n. @wojsmol I handled in #2133\n. Hm. I'll give some thought as to where might be the best place for this.\n. I don't think it makes sense to add documentation for this specific to wp core config, as $ is one of many special characters in bash that can get you into trouble in a number of contexts.\n. Sorry, not sure I follow. How would this work?\n. What would the performance gain be?\n. We are updating the db version stored in the database if all of the updates were successful.\nCan you share the full output of wp core update-db --network ?\n. > Could that be the issue here? I also have that problem when doing \"manual\" network upgrade from network admin panel, so in order to upgrade these sites, I need to archive / delete them before.\nSeems like it could be the problem. Mind opening a core ticket on this subject, so we can see what core's opinion on the matter is?\n. Yes. Core Trac: https://core.trac.wordpress.org/\n. Actually, easier. Ping @jeremyfelt\n. > Ahh, I missed that part before. Yes, the query is explicitly for \"active\" sites.\nCool. I'll get that fixed.\n. @borissamardzija thanks for using WP-CLI nightly and reporting this bug!\n. > \"Success: WordPress database upgraded on 1952/1955 sites\"\n\nHowever, in the admin dashboard on any of the sites on my network, it is still prompting me to update.\n\nThe message is only disabled when the upgrade process is 100% successful. You'll need to track down which three sites aren't being updated, and why.\n. @TheLastCicada Can you open a new issue for this? I think I'd actually like to fix it, but want to track it separately.. Can you share echo $PATH ?\n. WP_CLI_PHP will only work when using Composer- or Git-based installation. The bash file is smart enough to look up the PHP binary based on the environment variable: https://github.com/wp-cli/wp-cli/blob/master/bin/wp#L33\nHowever, because you're using the Phar archive, your user is using the first accessible PHP binary on your $PATH.\nwhich php should point you to /usr/newage/bin/php-5.4\n. You could also set an alias for wp to include the path to the PHP binary you want to use.\nIt doesn't seem like this is a bug in WP-CLI though.\n. Seems reasonable. :+1: \n. > WP-CLI disables pagination on Windows which I am not sure why.\ne3d50372fb740c7a6cab8780aaf13f0a23a3aed2\nDo you have a Windows environment to test with?\n. > Personally, even if I were on Linux, I'd probably prefer less -X rather than less -r so it would be nice if I could influence this through config.yaml or configuration in general.\nWhat if we allowed for an override via environment variable? This could potentially let you disable paging entirely.\n. > Are environment variables part of standard configuration mechanism?\nThey're typically used for system configuration.\nFor instance, WP_CLI_PHP can be used to define the path to your preferred PHP binary: https://github.com/wp-cli/wp-cli/blob/master/bin/wp#L33\nSimilarly, WP_CLI_CONFIG_PATH lets you specify the path to your global config: https://github.com/wp-cli/wp-cli/blob/b6c08973a432aa0fb7273f625748637426384b43/php/WP_CLI/Runner.php#L64\n\nIf not, putting it into config.yml feels more in line with the rest of WP-CLI.\n\nI'm not really keen on making config.yml a dumping ground for every option we can come up with. For really low-level customizations, I think environment variables make more sense.\n. Let's go with an environment variable.\n. :ship: Thanks for creating the second issue.\n. Can you share your environment details, including any persistent object cache you may be running?\n. @grantnorwood did you get this sorted out?can you share the contents of /srv/www/example.com/current/wp-cli.yml?\n. I'll fix the docs.\n. What are you trying to do?\n. As much as I'd like to have tests for this, it would involve adding an unwritable file to the test directory, which will probably break things.\n. WP-CLI doesn't support HHVM, see past conversations: https://github.com/wp-cli/wp-cli/search?q=hhvm&type=Issues&utf8=%E2%9C%93\n. No plans to add support at this time.\n. The docs state:\n[--<field>=<value>]\nOne or more args to pass to WP_Query.\nThis means wp post list accepts arbitrary key=>value pairs supported by WP_Query.\n. The best way to handle this would be to have Behat know to kill the process when the launch in the background step is run.\n. > After some searching I think we should use a pidfile.\n@szepeviktor Can you explain how this might work?\n. Now that I'm looking at this, we actually already have the code for it: https://github.com/wp-cli/wp-cli/blame/master/features/bootstrap/FeatureContext.php#L123\nHowever, it doesn't work. \n. Huh. posix_kill() reports success, and the processes I see remaining have different ids than when they were originally launched.\n. Using this debug:\n```\ndiff --git a/features/bootstrap/FeatureContext.php b/features/bootstrap/FeatureContext.php\nindex d224810..88aef37 100644\n--- a/features/bootstrap/FeatureContext.php\n+++ b/features/bootstrap/FeatureContext.php\n@@ -135,6 +135,7 @@ class FeatureContext extends BehatContext implements ClosuredContextInterface {\n                                $child = $matches[2];\n                            if ( $parent == $master_pid ) {\n\n\n\nerror_log( 'kill process: ' . $child );\n                                        if ( ! posix_kill( (int) $child, 9 ) ) {\n                                                throw new RuntimeException( posix_strerror( posix_get_last_error() ) );\n                                        }\n@@ -142,6 +143,7 @@ class FeatureContext extends BehatContext implements ClosuredContextInterface {\n                        }\n                }\n\n\nerror_log( 'kill process: ' . $master_pid );\n                if ( ! posix_kill( (int) $master_pid, 9 ) ) {\n                        throw new RuntimeException( posix_strerror( posix_get_last_error() ) );\n                }\n```\n\n\nI see:\n```\nsalty-wordpress \u279c  .wp-cli ./vendor/bin/behat features/server.feature\n@require-php-5.4\nFeature: Serve WordPress locally\nScenario: Vanilla install                                                 # features/server.feature:4\n    Given a WP install                                                      # features/steps/given.php:47\n    And I launch in the background wp server --host=localhost --port=8181 # features/steps/when.php:18\n    When I run curl -sS localhost:8181                                    # features/steps/when.php:24\n    Then STDOUT should contain:                                             # features/steps/then.php:15\n      \"\"\"\n      Just another WordPress site\n      \"\"\"\n    When I run curl -sS localhost:8181/license.txt > /tmp/license.txt     # features/steps/when.php:24\n    And I run cmp /tmp/license.txt license.txt                            # features/steps/when.php:24\n    Then STDOUT should be empty                                             # features/steps/then.php:127\nkill process: 4531\nkill process: 4530\n1 scenario (1 passed)\n7 steps (7 passed)\n0m3.797s\nsalty-wordpress \u279c  .wp-cli  ps -o ppid,pid,command\n PPID   PID COMMAND\n 2391  2392 -zsh\n    1  4540 sh -c '/usr/bin/php5' -S 'localhost:8181' -t '/tmp/wp-cli-test-run-56d73b7f54a118.38987282/' '/home/vagrant/.wp-cli\n 4540  4541 /usr/bin/php5 -S localhost:8181 -t /tmp/wp-cli-test-run-56d73b7f54a118.38987282/ /home/vagrant/.wp-cli/php/router.p\n 2392  4559 ps -o ppid,pid,command\n```\n@szepeviktor any ideas on why there might be a difference?\n. @szepeviktor The code execution is such that posix_kill( $child ) is called before posix_kill( $master_id ) \u2014 although I don't know why this would matter. Thoughts? \n. @szepeviktor If posix_kill() is working as expected, can you think of a reason why the processes might be respawn after being killed?\n. > My ps emits a space at the beginning of the line\n2522 handles this. Only children processes are killed, because there's some logic after execution that filters out the master process.\n. Huh. Still doesn't work for me :(\n```\nsalty-wordpress \u279c  .wp-cli  ./vendor/bin/behat features/server.feature\n@require-php-5.4\nFeature: Serve WordPress locally\nScenario: Vanilla install                                                 # features/server.feature:4\n    Given a WP install                                                      # features/steps/given.php:47\n    And I launch in the background wp server --host=localhost --port=8181 # features/steps/when.php:18\n    When I run curl -sS localhost:8181                                    # features/steps/when.php:24\n    Then STDOUT should contain:                                             # features/steps/then.php:15\n      \"\"\"\n      Just another WordPress site\n      \"\"\"\n    When I run curl -sS localhost:8181/license.txt > /tmp/license.txt     # features/steps/when.php:24\n    And I run cmp /tmp/license.txt license.txt                            # features/steps/when.php:24\n    Then STDOUT should be empty                                             # features/steps/then.php:127\n1 scenario (1 passed)\n7 steps (7 passed)\n0m3.385s\nsalty-wordpress \u279c  .wp-cli  ps -o ppid,pid,command\n PPID   PID COMMAND\n 2268  2269 -zsh\n    1  2421 sh -c '/usr/bin/php5' -S 'localhost:8181' -t '/tmp/wp-cli-test-run-56d8d677eb4d70.20111838/' '/home/vagrant/.wp-cli\n 2421  2422 /usr/bin/php5 -S localhost:8181 -t /tmp/wp-cli-test-run-56d8d677eb4d70.20111838/ /home/vagrant/.wp-cli/php/router.p\n 2269  2470 ps -o ppid,pid,command\n```\n. @szepeviktor any creative ideas?\n. > And could not kill server (child process)... Then finally get into this:\nHuh. Do you understand the difference, and how you were able to fix it?\n. I've spent a ton of time trying to fix this on my machine, and haven't made any progress :(\nUnless someone can propose a solution, I think we need to call this wontfix :(\n. > It is https://github.com/humanmade/Salty-WordPress on OSX?\nYes\nsalty-wordpress \u279c  .wp-cli  lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 14.04 LTS\nRelease:    14.04\nCodename:   trusty\n. Hm. I guess we should do this within behat.\n. We can't remove WP_TESTS_DIR without breaking backwards compatibility.\n. The WP_TESTS_DIR environment variable lets the developer use an already-installed version of the WP test harness, whose directory is set with WP_TESTS_DIR\n. > I recently upgraded via wp-cli.org to see if that would help with wp server running extremely slow, but now I am encountering a strange error whenever I run the command to init a new local server (i.e. wp server):\nwp server was added to WP-CLI in v0.20.0, which is why you're getting the fatal. Sorry about that :(\nYou'll want to remove it from wherever you're requiring it from now, and use the version packaged with WP-CLI.\n. > I don't seem to recall having to do anything special to have wp server work before.\nIt looks like it's installed to /Users/vattuonet/.wp-cli/commands/server/command.php You can remove that copy.\n. It appears this step isn't running because the /tmp/wordpress-tests-lib directory already exists.\nCan you try deleting that directory, and running the install script again?\n. > Develop will need a version bump.\nWhat is \"Develop\"?\n. @mAAdhaTTah Please open a separate issue for your question.\n. From https://github.com/wp-cli/wp-cli/issues/2050#issuecomment-148041147\nAnother point regarding the new install-wp-tests.sh code when installing WordPress for the tests:\nbash\nif [ -d $WP_CORE_DIR ]; then\n        return;\nfi\nConsider the following scenario:\nDo tests for WordPress latest (4.3.1) with\nbash\nbash bin/install-wp-tests.sh wordpress_test root '' localhost latest\nphpunit\nThis will create the WP core directory and use the latest WordPress version for your test.\nAfter that  do tests for  WordPress 4.2\nbash\nbash bin/install-wp-tests.sh wordpress_test root '' localhost 4.2\nphpunit\nNow the WP core directory exists (with WP 4.3.1 ) and as a result you test with the wrong version of WP (4.3.1)  instead of the version you wanted (4.2) .\nThere should be a check if the WP core directory contains the WordPress version you want to test against. Or just download the correct WP version without checking.\n. install-wp-tests.sh is quite stable at this point. Rewriting the script is more work than benefit.\n. Sorry, I'm not sure I follow your question. Releases aren't signed right now, in part because they're built on Travis.\nCan you clarify?\n. Apologies if this is a newbie question, but why is it necessary to sign releases via GPG when we're already distributing a hash?\n. > Oh! I see your point: if someone modifies the phar and also the hash then he wins!\nIf someone was able to modify the phar and the hash, then wouldn't they possibly also be able to create a new signed version? \nI'm assuming your attack vector is to steal private keys in some way. If private keys are stolen, it doesn't matter which signing method we used as both could be compromised.\n. Ok. I've added GPG signing to the release checklist https://github.com/wp-cli/wp-cli/wiki/Release-Checklist\n. As it turns out, @goldenapples' bug doesn't exist...\n. Thanks!\n. Ignore the build failure. It's being caused by #2126\n. Thanks @rmccue \n. Thanks for reporting. I haven't ever seen this before, and it seems unrelated to WP-CLI internals.\n. I think you got broken trunk. Can you try a clean install again?\n. It may also be #2050\n. Just so it's clear, the fix is to update your plugin or theme's copy of install-wp-tests.sh with https://raw.githubusercontent.com/wp-cli/wp-cli/master/templates/install-wp-tests.sh\nI'll release WP-CLI v0.20.2 sometime next week so new projects don't get bitten by this. Every existing project will, unfortunately, need to be manually updated.\n. @aendrew See conversation in #2155 and #2134\nWP-CLI v0.21.0 is likely the last release to support < WP 3.7. I'd strongly encourage you to prioritize upgrading your WP 3.6.1 install.\n. > I'm still having this issue on my VVV box.\nVVV sets a WP_TESTS_DIR environment variable to use WordPress trunk when the test suite is run. The WordPress trunk test suite expects WP_REST_Server to be included in WordPress core.\nHowever, unless you've set WP_VERSION=nightly, the bin/install-wp-tests.sh script will use the latest version of WordPress, which doesn't include the WP_REST_Server class.\nI think this would be best fixed in VVV https://github.com/Varying-Vagrant-Vagrants/VVV/pull/783 You can use the fix locally by updating your .bash_profile with that value.\n. Previously #2124\n. Thanks @jeremyfelt \n. Follow up https://core.trac.wordpress.org/ticket/34217\n. Hm. Can you think of any other themes or plugins you'd use this for, other than twenty* ?\n. I can't say I'm convinced this is a 80% use case, or that it wouldn't cause some unexpected bugs. I'd say probably not for now, but we can reconsider it later if someone else brings it up.\n. @dwainm I'm not going to include this in WP-CLI, but you're welcome to write your own command for it, and publish it in the package index.\nI've spent a bit of time retooling the Commands Cookbook to give you a heads start. Let me know what you think of it.\n. @szepeviktor any rationale for 3.8?\n. > If there's no technical reason (like supporting it prevents development, or causes a security hole) then it should be fine to leave alone.\nOlder versions are getting in the way of development now.\n\nIf you DID want to remove support, it would be really nice to still have a way to run the core update. Maybe limit the feature set to JUST updates to encourage people to upgrade :)\n\nI like this idea.\n. > I'm customizing the bash script that uses WP CLI for installing WP etc. \n\nI would like to be able to install our core theme and some plugins from private repos here on Github to further automise the setup of a new site :)\n\nYou should just use git clone ... in your bash script, instead of calling WP-CLI.\nWP-CLI doesn't support managing git repos, see #1557, nor does it handle the authentication process needed to connect to private repos.\n. > However I believe this is a bug, since the command was to actually \"check\" the update, not to make it.\nDidn't you run wp core update --version=whatever_version_i_got_from_the_previous command ?\n. > What do you think about a parameter to update to the latest minor version functionality? (e.g.: wp core update --minor)\nIt's a good idea, and already tracked with #1850\n. Nevermind, @drewapicture bumped the version for us.\n. Hm. I thought I left a comment on this, but I guess I didn't.\nwp scaffold plugin seems reasonable, but I'm not sure why .editorconfig should be added for wp scaffold plugin-tests and wp scaffold package-tests. Can you clarify?\n. @miya0001 just one comment to address.\n. > My feeling is that we should add it only in wp taxonomy get (it seems now we have a reason to create this sub command).\nAdd that in a subsequent pull request? It would also be nice to have equivalent commands for post types.\n\nAlso the names of the fields in the WP-API are different from those returned by get_taxonomies() (for example, WP-API uses \"types\" instead of \"object_type\"). I kept the names used by the function.\n\nSounds good for now. We can eventually rename in #1784\n. > Using the nightly build, ran the command below, with the results.\nDo you get the same error with v0.20.0?\nJust to be clear, what do you see the bug as?\n. If stg.mydomain.com is stored in the database, you'll need to run:\nwp search-replace 'http://stg.mydomain.com' 'http://mydomain.dev' --network --debug --url=stg.mydomain.com\n--url=stg.mydomain.com lets WP-CLI know which host context in which to load WordPress. See the example in the documentation:\n```\nTurn your production database into a local database\nwp search-replace --url=example.com example.com example.dev\n```\n. How does core do it differently?\n. Isn't this a bug with core then? Why isn't the cache being cleared?\n. Why isn't the cache being cleared when cron is updated?\n. @franz-josef-kaiser Were you able to track down why the cache isn't being cleared when cron is updated?\n. Fun. There's a bunch of tests we need to fix up too :( https://travis-ci.org/wp-cli/wp-cli/jobs/85546608\n. Something to consider: if we release a month before WordPress releases, and WordPress decides to revert some of this newly included code at the last minute, then WP-CLI shouldn't fatal.\n. Heh. #2151 caught this.\n. > I had expected the relative path in both cases to be relative to where I run the wp command, not to where the config file is?\nOk. It sounds like the actual behavior is different than your expectation then. If you use a relative path in your config file, WP-CLI will interpret it as relative to the config file.\n. Ugh.\n\nI wonder if it's an idea to use the current tag for the test suite, but only back to 4.0, and use 4.0 if a version lower than that is being tested?\n\nI don't really want to maintain one-off logic if I don't have to. This may not be the only incompatibility.\n\nThis means if your plugin is testing the return value of did_action(), it'll get an unexpected failure.\n\nIs this test failure somewhere I can see? It'd be nice to track down the root cause.\n. @johnbillion are you alright punting on this, or is there a solution you'd like to move forward with?\n. I think we'll call this wontfix for now, and we can come back to it later if it turns out to be a huge problem.\n. Because term slugs can be numeric, we can't easily support getting a term by slug or id.\nIn the interim, you could use wp term list <taxonomy> --slug=<slug>\nRelated https://github.com/wp-cli/wp-cli/issues/894#issuecomment-57939790\n. I don't think we'll ever make this breaking change, given wp term list will eventually be a wrapper for a REST request. #1784\nFor the history on why WP-API doesn't support getting an individual Resource by slug, see https://github.com/WP-API/WP-API/issues/642\n. $_SERVER['HTTP_HOST'] isn't set, so your file lookup isn't working: https://sources.debian.net/src/wordpress/3.6.1%2Bdfsg-1~deb7u6/debian/wp-config.php/#L11\nYou can specify --url when you run wp theme list, or you define it in a project or global config.\nAlternatively, you can edit wp-config.php to load the right file, instead of doing a fancy lookup based on $_SERVER['HTTP_HOST']\n. Actually, I think WP-API should commit to these registration arguments before we add them to scaffolding.\n. We could, potentially. Could you give a bit more context to the request? What did you run into, and why would it be helpful?\n. Can you share wp --info?\nThe error notice you're including seems to indicate your problem was fixed in #1783 (v0.19.0)\n. Thanks for letting me know. I'll get this fixed up.\n. Found another bug in wp_new_user_notification() too https://core.trac.wordpress.org/ticket/34377\n. For your latter example, I think escaping ' is causing the problem:\nsalty-wordpress \u279c  wordpress-test.dev  wp option update github_updater \\'{\"github_access_token\": \"\", \"bitbucket_username\": \"username\", \"bitbucket_password\": \"password\"}\\' --format=json\nError: Too many positional arguments: , bitbucket_username: username, bitbucket_password: password}'\nsalty-wordpress \u279c  wordpress-test.dev  wp option update github_updater '{\"github_access_token\": \"\", \"bitbucket_username\": \"username\", \"bitbucket_password\": \"password\"}' --format=json\nSuccess: Updated 'github_updater' option.\nsalty-wordpress \u279c  wordpress-test.dev  wp option get github_updater\narray (\n  'github_access_token' => '',\n  'bitbucket_username' => 'username',\n  'bitbucket_password' => 'password',\n)\nYou need something like:\nshell_exec( 'wp option update github_updater \\'$github_updater_args\\' --format=json' );\n. Ok... then use:\nshell_exec( \"wp option update github_updater '\" . $github_updater_args . \"' --format=json\" );\n. You can use wp plugin list to see your installed plugins, and then wp eval 'echo home_url();' --skip-plugins=<plugin-slug> to debug which plugin is causing the issue.\n. This may be a problem with core's wp_guess_url(). wp core install is mostly a wrapper for wp_install(), which uses wp_guess_url().\nWP-CLI parses --url correctly to set HTTP_HOST and REQUEST_URI:\nwp> WP_CLI\\Utils\\parse_url( 'localhost/wp_test' );\narray(3) {\n  [\"scheme\"]=>\n  string(4) \"http\"\n  [\"host\"]=>\n  string(9) \"localhost\"\n  [\"path\"]=>\n  string(8) \"/wp_test\"\n}\nWhat does the home option get set to? And, if you set WP_SITEURL to the correct value in wp-config.php, does wp core install work properly?\n. WP-CLI only supports supplying --version once. If you want to use separate versions of separate plugins, you can just call wp plugin install twice.\n. Then you can do:\nwp plugin install active-directory-integration --version=1.1.7 && wp plugin install addthis --version=5.0.8\n. Here's the check: https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/CommandWithUpgrade.php#L126\n@coreyworrell When you make a HEAD request against the URL, does it return the proper content disposition headers? This is an alternative we could consider.\nlocal \u279c  wordpress-test.dev git:(master) http HEAD https://downloads.wordpress.org/plugin/rest-api.2.0-beta5.zip\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nCache-control: private\nConnection: keep-alive\nContent-Disposition: attachment; filename=rest-api.2.0-beta5.zip\nContent-Length: 136651\nContent-Type: application/zip\nDate: Sun, 25 Oct 2015 16:50:48 GMT\nLast-Modified: Fri, 23 Oct 2015 15:27:51 GMT\nServer: nginx\nAlso, as a short-term workaround, you can download the file using wget or curl, and then install.\n. > If you want to save a HEAD request though, you could simply check for a / in the argument\nBut you can also install a zip file from the same directory wp plugin install myplugin.zip\nWP-CLI already accommodates zip archives behind access keys (e.g. http://site.com/archive.zip?file=blah&key=whatever). I'm not really convinced it should support downloading arbitrary URLs, and hoping they're zip archives. I think it's a reasonable assumption to inspect the extension.\nAs I mentioned before, you can use wget to download the file for your specific use case:\nwget -o plugin.zip http://site.com/download.php?file=blah&key=whatever\nwp plugin install plugin.zip\n. > And yes the workaround works manually, but when doing wp plugin update --all that plugin (like ACF Pro and many others) will always fail the update and require a manual wget and all.\nAh, I didn't realize this caused premium plugin updates to fail.\n\nInstead of checking for / you could check for a . (period) instead. That will determine if it's a slug vs a url/path.\n\nThis is an imprecise check. We'll need to do a HEAD request on the URL, which I think is more precise than checking the extension because it also checks whether the remote asset is available.\n. > any update on when this will be handled?\nNope.\n\nI can submit pull request if needed. Thanks.\n\nPlease do! Here's our contributing directions: https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md\n. We could add a --dry-run flag to wp core upgrade-db so you can see what would happen without any database modification.\n\nIn some situations it is useful to know whether there are pending DB updates without immediately executing them.\n\nTo provide further context around this request, can you share these situations?\n. Travis is reporting a fatal for some reason, but all of the builds have passed:\n\n. Can you share wp --info ? And can you try deleting /tmp/wordpress and running bash bin/install-wp-tests.sh again?\n. There's no plugin with the slug hello in the WordPress.org repo:\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin install hello\nWarning: hello: An unexpected error occurred. Something may be wrong with WordPress.org or this server&#8217;s configuration. If you continue to have problems, please try the <a href=\"https://wordpress.org/support/\">support forums</a>.\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin install hello-dolly\nInstalling Hello Dolly (1.6)\nDownloading install package from https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nSuccess: Translations are up to date.\nWe could improve upon the error displayed #2181\n. When WP-CLI doesn't detect mod_rewrite, it prefixes the rewrite rules with index.php: https://github.com/wp-cli/wp-cli/blob/master/php/commands/rewrite.php#L88-L89\nThis is because it can't safely assume you have a correctly-configured .htaccess file. \nYou can tell WP-CLI you have mod_rewrite available by adding the following to your config.yml or wp-cli.yml file:\napache_modules:\n  - mod_rewrite\n. Huh. I actually get the same result when I add the declaration in wp-cli.yml. On top of that, I don't fully grok the logic in wp rewrite structure. I'll take a deeper look when I have a moment.\n. > Core still suffers from PHP 4-style constructors?\nOlder versions of WordPress do.\n. > I thought it is WP trunk for PHP7.\nYes, but in the tests WP-CLI installs older versions of WordPress. When it does, the errors pop up.\n. Hm. I thought I replied to this, but I'm not sure where the reply went.\nFor the deprecated notices, when WP-CLI officially supports PHP7, we can make sure the test framework appropriately handles older version of WordPress. \n. > I really wish I could grab plugins without any need to touch the database.\nWhat do you mean by \"grab plugins\"? Can you provide a bit more background on your situation?\n\nIs there anyway to add a simple argument to skip the wp-config.php validation?\n\nWhen you use wp plugin list, WP-CLI uses the active_plugins option in the database to get a list of active plugins.\n. > Much like you do a wp core download, I would love to do a 'wp plugin download ' to simply download the plugin in the appropriate directory. I don't want to have to have wp-config.php or the active_plugins to fire off due to the fact i may not have a wp-config.php in place.\nWP-CLI is dependent on WordPress for installation-related code, and the WP_PLUGIN_DIR constant defined in wp-config.php to know where to put installed plugins.\n\nTo be completely forth coming, I am using this in a Dockerfile. I am trying to make a completely immutable WordPress instance and if i am able to download plugins on each Docker build, I can automate the upgrading/updating of a WordPress container without the end-user needing to know anything about how to install the plugins\n\nYou can use some simple bash to achieve the same effect:\nwget -o user-switching.zip https://downloads.wordpress.org/plugin/user-switching.1.0.8.zip\nunzip user-switching.zip\nmv user-switching path/to/plugins/dir\nOr, you can write a custom WP-CLI command that does essentially the same but runs before WordPress loads.\n. > I was hoping to avoid having to specify a version number for the plugin, as once again anytime I want to 'build' WordPress I want it to pull down everything brand-spanking-new.\nYou could grep the WordPress.org plugin page for the latest version.\n. Changing the conditional to:\nif ( 'help' === $this->arguments[0] && ( ! $this->wp_exists() || ! Utils\\locate_wp_config() || is_array( $r ) ) ) {\ndoesn't work, because it doesn't permit the user to see help for commands loaded by plugins on existing namespaces.\nIdeally, we need a way of checking whether WordPress is installed that also confirms database credentials. If the database isn't configured in this case, we'd want to load early. Otherwise, we'd want to load all of the plugins to see if they register any commands.\n. > This is awesome and will be extremely useful.\nGlad to hear :)\n\nwhenever I add a similar debug call, I always output the memory usage (current and max).\n\nHm. Given max is relatively consistent, would it be too much in this command to just add current?\n\nI also agree with keeping the feature light, so maybe it would be worth making this debug_time() and consider adding a debug_memory()?\n\nIt's already in v0.21.0 as Debug: 100 items (53.241s)\n. I'm going to punt on adding $since_last for now. It was useful in the context I submitted the pull request from, but I'm not convinced it's globally useful. Since last can almost as easily be determined by looking at the logs.\n. Thanks!\n. > Explicitly use phpunit 4.8\nWhy?\n\nGenerate a clover.xml that can be using with coveralls.io\n\nI don't think Coveralls is mainstream enough that it merits including the config in wp scaffold plugin\n. Ok. Changing to the Composer-based PHPUnit seems reasonable.\n. > Maybe we can pass in a optional flag to be for the CI config like --gitlab and default to Travis CI?\nI'll flag this as an enhancement we can consider in the future. I don't have a good sense of the proper implementation right now.\n. @Nikschavan is there a default config you can share for Gitlab?\n. Cool. I'd be amenable to adding a --ci=<provider> argument to wp scaffold plugin-tests that accepted travis, gitlab or circle (or some combination of the three, I suppose)\n. @Nikschavan Want to put together a PR for this? I added Circle support, so it would be cool to have Gitlab in there too.\nRather than modifying install-wp-tests.sh, you should put any Gitlab-specific configuration steps in to .gitlab-ci.yml.\n. \ud83d\udea2 \n. WP-CLI now loads WordPress inside of a function: https://github.com/wp-cli/wp-cli/issues/2089\nGlobal variables need to be explicitly globalized in order to function as expected in WP-CLI.\n. Minor problem. If my MySQL user password is empty, I get a blocking prompt:\n+ mysql -uroot -p -e 'drop database if exists wordpress_tests'\nEnter password:\nGiven we don't delete WP_TESTS_DIR or WP_CORE_DIR if they exist, and haven't been deleting the test directory to date, I don't think it makes sense to introduce a new behavior of resetting the database.\nThanks for the pull request, though.\n. Can you add / update the tests for these changes?\n. Couple more minor comments to address.\n. > Documentation could be specified in the third $args parameter for WP_CLI::add_command()\nAs it turns out, PHP's Reflection properly parses docs for closures and functions, so we can handle this as a second issue.\n. Looks like this is coming from the WordPress importer:\nwp_get_http() /srv/www/wp-content/plugins/wordpress-importer/wordpress-importer.php:905\nIt's an upstream bug that will need to be fixed https://core.trac.wordpress.org/ticket/34679\n. Thanks! One comment to address.\n. > It would be nice to be able to define custom commands with option flags that can be used multiple times with the values stored as an array.\nCan you share your use case?\n. Cool. I've flagged it as an enhancement for future consideration.\n. Closing this as wontfix. I don't think we can change the behavior here without introducing backwards compatibility issues.\nThe current prior art is to accept one or more arguments with positional arguments:\n/**\n * Render each positional argument on a new line\n *\n * ## OPTIONS\n *\n * <arg>...\n * : One or more positional arguments.\n */\nfunction print_args( $args ) {\n    foreach( $args as $arg ) {\n        WP_CLI::log( $arg );\n    }\n}\n. Thanks!\n. We also need the default, and potentially network, table names. We could use a call to wp db tables, but it would require needing to know the context (e.g. --url) in order to get the correct tables.\n. > We could use a call to wp db tables, but it would require needing to know the context (e.g. --url) in order to get the correct tables.\nThis isn't a fixable problem.\nThe \"fix\", in this case, would be to change the behavior of wp search-replace to replace against all tables by default on multisite. At this point though, I don't know if I'm comfortable making this change.\n. Unfortunately, there's no reliable way of knowing which of the plugins in active_plugins should be installed from WordPress.org, because custom plugins can have the same slug as a WordPress.org.\nFor your specific use case, I think it's worth reviewing each of the plugins present in active_plugins, and only install those which are actually used by the codebase.\n. Build fails because I'm waiting on a new nightly build\n. > Could there be a warning of incompatible WP version?\nWhere?\n. :ship: \n. :ship: \n. > Does WP-CLI works in PHP 5.5?\nYes.\n\nany mysql function returns an error (as it was deprecated in PHP 5.5)\n\nCan you share an example of the error?\n. It looks like WordPress can't connect to your database server. Are you sure the credentials are correct, MAMP is running, etc. ?\n. > I think it's because of \n\nPHP Deprecated: mysql_connect(): The mysql extension is deprecated and will be removed in the future: use mysqli or PDO instead\n\nIf the function didn't work, your code would fatal. The error notice just indicates the function is deprecated.\n. > You're saying that wp-cli was tested in PHP 5.5 and worked alright and these are just notices, with the functions working okay.\nCorrect.\n\nSo, what could be the errors, since the credentials are just root/root and the MAMP is running? 127.0.0.1 instead of localhost?\n\nHard to say, because I don't have access to your local environment.\nYou might check out past threads on WordPress StackExchange for tips: http://wordpress.stackexchange.com/search?q=wp-cli+mamp\n. > I'm looking for comments on the general idea behind this.\nInteresting approach. It's a bit different than I would go about it, but I don't know if I have strong opinions yet.\nHere's how I was thinking about it:\n- Only perform the check if wp or wp help * was run, to ensure we only produced unexpected output when an interactive session was taking place.\n- Write a next-check-time file to the cache directory with the time after which the next check should take place. If the file is writable, then it's safe to make the check at the appropriate allotted time. If the file isn't writable, or WP-CLI itself isn't writable, then bail on ever making checks, to prevent the update check from happening on every execution.\n- If there's an update check available, block the current execution of wp or wp help and indicate which version is available (and which version the user currently has), and perform the update if y is provided at the prompt.\nRunning the update check on shutdown is a neat idea, although I don't know if it offers any key advantages.\nThis project might also be a bit of an opportunity to produce a lightweight API for commands to store data to the filesystem.\n. > Perhaps we can do cli check-update in the background, so that by the time the user exits the pager, we would have already fetched the list of updates?\nDig it. We should make sure it's not a persistent nag though. If they've chosen to skip it, it will remain skipped until the next version.\n. @nyordanov any ideas why your builds are taking 50 min to run?\n. @nyordanov planning to pick things up again soon?\n. Closing in favor of #2538\n. It's not easily possible to run these two commands together at the moment. It could be a nice future enhancement, however.\n. After #2622 lands, you'll be able to:\nwp post generate --format=ids | xargs -0 -d ' ' -I % wp post meta add % foo bar\n. See https://mobile.twitter.com/wpcli/status/667722912246329344\nRelated #2218\n. > I'm not sure using WP_CLI::launch is the best method to obtain the cache info.\nLet's instead abstract the logic in wp cache type to WP_CLI\\Utils\\wp_get_cache_type() and then call that directly.\n. Handling in #2236 \u2014 thanks for the pull request!\n. Sounds good :+1: \nCan you document the work involved on https://github.com/wp-cli/wp-cli/wiki/Release-Checklist ?\n. It's not possible to assign issues to GH users outside the WP-CLI organization.\n. Closing this until someone is actually committed to picking it up.\n. Punting on this.\n. Here's the tip-off:\nFatal error: Call to a member function get_roles() on a non-object in /app/wp-content/plugins/ultimate-member/core/um-builtin.php on line 526\nThere's some incompatibility with that plugin. You can skip it by including --skip-plugins=ultimate-member in your search and replace command.\n. How did you install the plugin?\n. > Is this due to the way wp-requirements is brought in as a dependency?\nHere are the dependencies installed:\nInstalling dependencies (including require-dev)\n  - Installing composer/installers (v1.0.22)\n    Loading from cache\n  - Installing johnpbloch/wordpress-core-installer (0.2.1)\n    Loading from cache\n  - Installing cityofphiladelphia/phila.gov-customization (0.20.0)\n    Loading from cache\n  - Installing cityofphiladelphia/phila.gov-theme (0.21.3)\n    Loading from cache\n  - Installing johnpbloch/wordpress (4.3.1)\n    Loading from cache\n  - Installing private/meta-box-group (1.0.1)\n    Loading from cache\n  - Installing private/wpfront-user-role-editor-personal-pro (2.12.1)\n    Loading from cache\n  - Installing wpackagist-plugin/amazon-s3-and-cloudfront (0.9.6)\n    Loading from cache\n  - Installing wpackagist-plugin/amazon-web-services (0.3.4)\n    Loading from cache\n  - Installing wpackagist-plugin/easy-wp-smtp (1.2.1)\n    Loading from cache\n  - Installing wpackagist-plugin/google-calendar-events (3.0.5)\n    Loading from cache\n  - Installing wpackagist-plugin/media-library-assistant (2.15)\n    Loading from cache\n  - Installing wpackagist-plugin/meta-box (4.5.7)\n    Loading from cache\n  - Installing wpackagist-plugin/nginx-helper (1.9.6)\n    Loading from cache\n  - Installing wpackagist-plugin/restrict-categories (2.6.3)\n    Loading from cache\n  - Installing wpackagist-plugin/simple-301-redirects (1.06)\n    Loading from cache\n  - Installing wpackagist-plugin/simple-page-ordering (2.2.4)\n    Loading from cache\n  - Installing wpackagist-plugin/wordfence (6.0.20)\n    Loading from cache\n  - Installing wpackagist-plugin/wordpress-importer (0.6.1)\n    Loading from cache\nThe fatal error occurs because WP_Requirements, which is a dependency of google-calendar-events, isn't installed.\nCan you reproduce by running the deploy script locally?\n. Couple of ideas:\n- Only attempt to detect serialized data in specific columns on specific tables (e.g. wp_options.option_value). This would still permit --precise to be supplied.\n- Don't use the LIKE in the WHERE when we have greater than, say, 50k rows.\n@lkwdwrd @kevindoole @JPry @phh @tddewey would love your thoughts when you have a moment.\n. Another idea: if the REGEXP query returns matching serialized data, use PHP replacement mode on just those specific rows, and then run SQL replacement on all rows but those. On large datasets, this should reduce the slowness of having to iterate through all rows, potentially unnecessarily.\n. Surprisingly enough, on a postmeta table with ~3.5 million rows, the REGEXP query is really fast:\nChecking: wp_postmeta.meta_value\nDebug: [\"SELECT * FROM `wp_postmeta` WHERE `meta_value` REGEXP '^[aiO]:[1-9]' LIMIT 1\",0.00029778480529785\nSELECT COUNT(*) is a consistent time suck though:\nDebug: [\"SELECT COUNT(*) FROM wp_postmeta  WHERE `meta_value` LIKE '%domain.com%' \",5.6773121356964\nDebug: [\"SELECT `meta_id`, `meta_value` FROM wp_postmeta  WHERE `meta_value` LIKE '%domain.com%'  LIMIT 1000 OFFSET 0\",0.47706890106201\n. Sadly, changing to SQL_CALC_FOUND_ROWS doesn't produce any performance gains. \n. For the next time someone is working on search-replace performance.\nBefore #2304, of 734.926s:\n$ ack \"SELECT COUNT\\(\\*\\) FROM wp_postmeta[^,]+,([0-9\\.]+)\" replace.log --output \"\\$1\" | awk '{ sum+=$1} END {print sum}'\n444.025\n$ ack \"SELECT \\`meta_id\\`, \\`meta_value\\` FROM wp_postmeta[^,]+,([0-9\\.]+)\" replace.log --output \"\\$1\" | awk '{ sum+=$1} END {print sum}'\n148.626\n$ ack \"UPDATE \\`wp_postmeta\\` SET \\`meta_value\\`[^,]+\\\",([0-9\\.]+),\\\"include\\(\" replace.log --output \"\\$1\" | awk '{ sum+=$1} END {print sum}'\n102.864\nAfter #2304, of 225.509s:\n$ ack \"SELECT meta_value FROM wp_postmeta[^,]+,([0-9\\.]+)\" replace-new.log --output \"\\$1\" | awk '{ sum+=$1} END {print sum}'\n43.2791\n$ ack \"UPDATE \\`wp_postmeta\\` SET \\`meta_value\\`[^,]+\\\",([0-9\\.]+),\\\"include\\(\" replace-new.log --output \"\\$1\" | awk '{ sum+=$1} END {print sum}'\n111.279\n. Huh. Thanks for flagging.\n. Thanks for the pull request! I'll need to figure out why the build is failing...\n. @iandunn can you merge master?\n. >  install instructions without composer, is the update of the community packages as simple as just a git pull ?\nYep\n. Thanks!\n. Can you write a functional test for this?\nSee https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md\n. Thanks!\n. Upgrade to PHP 5.3.30 https://github.com/wp-cli/wp-cli/issues/2216#issuecomment-160778113\n. > . I suggest adding the following to the Alternative Install Methods page\nYou're more than welcome to edit the page!\n. :+1:\n. Have you tried re-provisioning VVV?\nVVV handles checking out the WordPress developer suite, which install-wp-tests.sh will defer to. If your VVV instance doesn't have /srv/www/wordpress-develop/tests/phpunit//includes/functions.php, then something's going wrong with the VVV provisioning process.\n. Are you planning to fix the bug too? While I appreciate the contribution, I don't intend to merge a pull request which just introduces a failed test.\n. Closing in favor of #2262\nThanks again for contributing the test!\n. Which version of WordPress are you using?\n. Do you have any code filtering wpmu_validate_user_signup ? Can you try:\nwp user create new-id new.email --role=city_boss --display_name=\"New Name\" --skip-plugins --skip-themes\n. @dancrumb any luck tracking this down?\n. > Looks like I have a ReCAPTCHA plugin that attaches to that hook.\nThis would make sense. \n\nIt always used to work. Did the wp-cli plugin change to use this?\n\nWP-CLI isn't a plugin, and the code for wp user create hasn't been changed in a while\nMaybe the ReCAPTCHA plugin changed its implementation mechanism?\n. > It would be helpful if WP-CLI was able to accept a password hash in place of a password.\nProbably not going to happen. Realistically, users should be setting passwords on their own, and using different passwords between WordPress installs. If you want to have some form of single sign-on, you should properly implement SSO.\nYou're also welcome to write a custom command specifically for setting the password from hash, or make a direct database query.\n. How did you install it?\n. You'll need to be more clear than that. Can you provide the exact commands you used to install WP-CLI? There are multiple installation methods.\n. Just remove the file with rm path/to/file.phar\n. Thanks @ernilambar !\n. > though this relase is not available as a .deb-file (yet?).\nSorry about that. We'll get one up shortly https://github.com/wp-cli/builds/issues/29\n. Can you share the results of which wp ?\n. rm /usr/bin/wp\n. @szepeviktor Good idea. Can you update the link to be https://github.com/wp-cli/wp-cli/wiki/Creating-Helpful-Bug-Reports ?\n. Bug alert:\nsalty-wordpress \u279c  wp.dev  wp db reset --yes; wp core multisite-install\nSuccess: Database reset.\nWordPress database error Table 'wp.wp_blogs' doesn't exist for query SELECT * FROM wp_blogs WHERE blog_id = 1 LIMIT 1 made by include('/home/vagrant/.wp-cli/php/wp-cli.php'), WP_CLI\\Runner->start, WP_CLI\\Runner->load_wordpress, require('/home/vagrant/.wp-cli/php/wp-settings-cli.php'), ms_site_check, get_blog_details, WP_Site::get_instance\nCreated single site database tables.\nSet up multisite database tables.\nSuccess: Network installed. Don't forget to set up rewrite rules.\nCaused by c1fdcb0ea17138fbe89a7a8062e4b13b1d98f242 because ms_site_check() calls get_blog_details()\n. Thanks for the pull request, @greg-1-anderson. I'm open to restoring composer.lock given the problems we've had with symfony dependencies. #2249 \nFor the background, here's where it was removed originally: 7cc4c8669674ee1a7485efe7e1ef4f1d02876187\n. > can we present a \"Would you like to install it now? Y/n\" prompt after that so they can easily install without having to re-type or copy/paste the command to install the plugin?\nI don't think it's a great idea to introduce this prompt for a couple of reasons:\n1. I don't want to establish a pattern of \"oh, do you want to do this other thing?\" throughout the codebase. The informational message solves the users problem, albeit with a second step, and is an existing pattern we have.\n2. Prompts block script execution. Introducing a prompt would mean any scripts calling wp import could hang indefinitely. There are ways to get around this, but I don't think it's worth the effort + risk of breakage.\n. > That typo is causing fatal errors in commands\nFor historical purposes, here's the error:\nsalty-wordpress \u279c  wordpress-develop.dev  wp transient set \"51ecb1f884\" \"Cache rules everything around me.\" \"2592001\"\nWarning: The `wp transient set` command has an invalid synopsis part: [<expiration]\n. You need to supply the locale:\nwp core verify-checksums --locale=en_GB\n. Sorry, my bad. Serves me to reply to Github issues on my phone :)\nThere's a bug in that we're checking the $wp_local_package global before it actually gets defined: https://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L797-L807\nI'll get this fixed, and then you can use wp cli update --nightly to update to the nightly release (after the build passes on the merge).\n. For historical reference, this was actually broken by #2120\n. > running composer update in my WP-CLI project to get to at least 20.4 for WP 4.4 isn't working.\nCan you share the output you get when you run composer update? Do you have a composer.lock file in place?\n. Right. composer.lock locks your project to the hash present in the lock file. You'll need to rm composer.lock before running composer update\n. What is the contents of your composer.json?\n. Huh. composer create-project wp-cli/wp-cli --no-dev doesn't produce an installation that can be updated. You need to remove wp-cli/cli and re-run the command.\nYou can also reinstall with composer create-project wp-cli/wp-cli --prefer-source. Once you've done so, you can update as you would with Git:\ncd wp-cli\ngit pull origin master\ncomposer install\n. Nope.\nBtw, I'd recommend Phar installation unless there's some specific reason you're using Composer.\n. > Since then the speed of wp-cli command decreased noticeably\nCan you use time to provide before and after benchmarks?\ntime wp option get home\n\nplugin activate/deactivate seemed to work in wp-cli, but didn't work for WordPress.\n\nWP-CLI doesn't load when you're using the WordPress admin, so WP-CLI has no possibility of affecting the WordPress admin experience.\n. > The major issue however is that plugin activation/deactivation was totally out of sync with WordPress and even broke the WordPress ability to manage plugin status itself.\nThis sounds like a problem with something else in your stack, stale cache for instance, not WP-CLI. \n. Globals need to be explicitly globalized, now that WP-CLI loads WordPress inside of a function #2089\n. > This is a huge problem IMO, because lots of theme designers and plugin authors will have broken this rule without any clue of the implications. \nI encourage you to open support tickets with them to produce fixes as needed. Given the sweeping nature of the change, and that only a few localized issues have been reported so far, I consider it a problem easily remedied by plugins / themes, and not something needing to be fixed with WP-CLI. \n\nWe use 30+ third-party plugins in our stack, including major plugins like https://en-gb.wordpress.org/plugins/redirection/ (400,000+ installs globally). WP CLI 0.21.1 will crash on load.\n\nHave you debugged which plugin is actually causing the failure?\nYou can use --skip-plugins or --skip-themes to skip the loading of specific plugins or themes when using WP-CLI.\n\nso we are now forced to downgrade WP CLI.\n\nPlease keep in mind there are unlikely to be further v0.20.x releases in the future. I'd encourage you to proactively solve the problem now, lest it becomes a larger problem for you in the future.\n. > We set $memcached_servers in our wp-config.php and while this should be in the global scope (and it definitely is for WordPress and v0.20.4) and is not in the global scope for v0.21.1.\n@rangerer FYI - this will be fixed magically in v0.22.0, see #2318\n. > We're going to have to build another test harness, because this is the kind of bug that sneaks in and then becomes apparent one day when a cron job mysteriously crashes in production.\nWhy throw the baby out with the bathwater? Why not just be proactive about fixing the problem?\nIt appears Redirection largely uses Singletons, so I'm not sure how the WP-CLI change causes the problem you're referring to.\nFor that matter, can you share the problem you've run into, with steps on how to reproduce? Feel free to open it in the Redirection repo, and I'll follow along https://github.com/johngodley/redirection\n\nThis is important: Plugin/theme authors are not going to stop using global variables because of this.\n\nThat's fine. They just need to explicitly globalize the variables. It's bad practice to use global variables, and it's especially bad practice not to explicitly globalize them. \nPlugins and themes can do lots of things to break WP-CLI. It's impossible to address all of them.\n\nCustomers won't want to hear that their custom code can't be deployed \"because it's not compatible with one of our back-office tools\", and we can't afford the additional technical burden of having to rewrite it for them.\n\nFrankly, this conversation is mostly moot because you can just skip custom plugins or themes with the --skip-plugins and --skip-themes arguments. I'm not sure why you need to load Redirection in the WP-CLI context in the first place.\n. You can also skip specific plugins with --skip-plugins=<plugin-slug>\n. Can you provide the results of which -a wp ?\nYou've likely installed WP-CLI twice, and the older version is taking precedent over the newer.\n. Please update WP-CLI and, next time, search past issues before you open a new issue.\n. @thinkhuman Can you open a new issue please, with the debugging steps completed? Thanks\n. Hm. I'm actually not a huge fan of this implementation, as the warning is lost until you exit out of pagination.\n@johnbillion any ideas?\n. > johnbillion [12:27 PM] If the warning isn't shown until you exit help it's not of much use\n\n\u200b[12:27] If that's the case, then agreed on punt\ndanielbachhuber [12:30 PM] yeah, it is unfortunately. we can't get around that unless we substantially refactor help output, or disable paging\n. Thanks!\n. Default .gitignore would be helpful. We might also want to ignore .DS_Store and vendor directories.\n. :ship: \n. :100: thanks!\n. Although you haven't provided enough detail for me to communicate the exact source of the problem, I suspect the code is calling global variables which aren't explicitly globalized.\n\nSee also https://github.com/wp-cli/wp-cli/issues/2289#issuecomment-163959059\n. Why would you need to use wp core download if you already have a copy of core locally? Couldn't you just use unzip /path/to/file.zip?\n. Build fails on trunk because of https://core.trac.wordpress.org/ticket/10373#comment:33\n. Build fails on trunk because of https://core.trac.wordpress.org/ticket/10373#comment:33\n. Build fails on trunk because of https://core.trac.wordpress.org/ticket/10373#comment:33\n. You should just use wp plugin install orbisius-child-theme-creator\nThe slug in the URL is the plugin slug.\n. We don't have an equivalent command at this time.\n. Why do we need it?\n. Correct.\n. I don't see why not. Worth testing on a local install, though.\n. > Excuse me, I do not know how to modify a media file's name in WP.\nSorry \u2014 that's outside the scope of this issue tracker.\n. > Would it be possible to implement it in wp media rename ...?\nIf someone opens a pull request for it, I'd consider it. However, this is the first time I've come across the need to rename media files, so I don't think it's a terribly common problem to be solved.\n. > Could you give me a hint where to look for a way to rename media in WP?\nPlease be respectful of the purposes of this issue tracker.\n. Given there's no standard for how premium WordPress plugins are distributed with license keys, WP-CLI doesn't support license key activation\n. > Is there command for listing all update available?\nNope.\n\nEg, view updates or core, themes and plugins in a single command?\n\nYou could run wp core check-update && wp plugin list --update=available && wp plugin theme --update=available to get all updates.\n. > Is there a way to define a list of common command parameters and then be able to reference them when creating a new subcommand?\nNot yet, but it will be much more viable with #2204\n. > Is there a way to define a list of common command parameters and then be able to reference them when creating a new subcommand?\nIn v0.23.0 (and already in the nightly), WP-CLI will support registering command synopsis in WP_CLI::add_command()'s third argument. Here's an example:\nfunction foo( $args ) {\n    $message = array_shift( $args );\n    WP_CLI::log( 'Message is: ' . $message );\n    WP_CLI::success( $args[0] );\n}\nWP_CLI::add_command( 'foo', 'foo', array(\n    'shortdesc'   => 'My awesome function command',\n    'when'        => 'before_wp_load',\n    'synopsis'    => array(\n        array(\n            'type'          => 'positional',\n            'name'          => 'message',\n            'description'   => 'An awesome message to display',\n            'optional'      => false,\n        ),\n        array(\n            'type'          => 'assoc',\n            'name'          => 'apple',\n            'description'   => 'A type of fruit.',\n            'optional'      => false,\n        ),\n        array(\n            'type'          => 'assoc',\n            'name'          => 'meal',\n            'description'   => 'A type of meal.',\n            'optional'      => true,\n        ),\n    ),\n) );\nYou can assign your arguments to a variable, and then reuse the variable between command registration.\nIntroduced in #2373\n. If you use wp plugin delete, WP-CLI deletes the plugin files without removing the plugin from the active_plugins option + triggering the uninstall hook.\nYou can use wp plugin uninstall --deactivate to remove the plugins files, and remove it from active_plugins.\n. I can't reproduce:\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin install wp-fail2ban --activate\nInstalling WP fail2ban (2.3.1)\nDownloading install package from https://downloads.wordpress.org/plugin/wp-fail2ban.2.3.2.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nSuccess: Translations updates are not needed for the 'English (US)' locale.\nActivating 'wp-fail2ban'...\nSuccess: Plugin 'wp-fail2ban' activated.\nRegarding:\n\nThis behavior occurs first time a plugin is installed, so appears to have no relation to left over plugin residue from an uninstall.\n\nThis is with a brand new WordPress install? Can you reproduce with a second brand new WordPress install in a separate environment?\n. Couple of things:\n1. You'll need to globalize your $redis_server in wp-config.php:\nglobal $redis_server;\n$redis_server = array( 'foo' => 'bar' );\n1. You should use the Pantheon fork of the Redis object cache drop-in, as it's actively maintained: https://github.com/pantheon-systems/wp-redis\n. Hm. I'm not quite sure what this is an attempt to solve, and that this the best way to solve it.\nTo help move the conversation forward, can you provide a Behat test case for the change and a bit more detail on what you're trying to do?\n. #2215 is going to be solved in a different way. \nFor multisite, WP-CLI already knows to look for DOMAIN_CURRENT_SITE in your wp-config.php if no --url parameter is provided. This seems to have been sufficient to date. Can you explain why we need to change to making a database request?\n. > It removes the requirement to have 'DOMAIN_CURRENT_SITE' defined in wp-config.\nI see. We aren't going to change this requirement at this time. \n\nAdditionally when migrating a database between different urls then the url in the database might not match.\n\nRight, which is a problem of wp search-replace and not the general bootstrap process.\n. $pipes is required by proc_open()\n. > there is a & before $pipes to suppress errors of it not being defined.\nThe & means \"pass by reference\". @ is for suppressing errors.\n. > The import runs well, but I notice that none of the media attachments are imported.\nWP-CLI imports attachments by default. If they aren't getting imported, there's likely something incorrect about your export file.\n. > I guess if the files are already there, the attachments aren't created...?\nI don't believe this is the case. However, it's hard to say what the problem is without being able to reproduce it.\n. Thanks!\n. The root of the problem is that both Add This and Contact Form 7 are making calls to global variables which aren't explicitly globalized. In order to be properly fixed, both plugins need to explicitly globalize their variables.\nYou can use WP-CLI without fataling by employing the --skip-plugins flag: wp --skip-plugins=addthis,contact-form-7 plugin update or similar.\n\nThe maintenance mode plugin when activated also prevents the cli to perform any updates\n\nThis is a problem of the plugin, not of WP-CLI. Again though, you can use --skip-plugins=<maintenance-mode-plugin-slug> to skip the loading of the plugin. \n. > WP_CACHE is defined in my wp-config.php file.\nCan you share the full contents of your wp-config.php file, with any secrets removed?\n. Tests fail because of #2341, whomp.\n. wontfix, see https://github.com/wp-cli/wp-cli/issues/1159#issuecomment-215689271\n. > It seems that both WP-CLI and my project require Spyc and the autoloaders conflict.\nSpyc has always been defined in WP-CLI, so I'm not sure why this would be a new problem for you.\nHow have you installed WP-CLI, and can you confirm Spyc is autoloaded in your project, and not directly defined?\n. Looks like @mAAdhaTTah https://github.com/mustangostang/spyc/pull/42 submitted a fix for this that never was merged.\nYou could fork the repo, apply the change in the PR, and use that fork in your project. I don't see any harm in using a fork at this point, given there's zero momentum with that project.\n. > While that might be a solution; I don't think Spyc is really at fault here. This errors pops up in the context of using a wp-cli dependency in wp-cli and inside the project that you are using a globally installed wp-cli. In theory this could happen with any of the other wp-cli dependencies.\nRight, although it causes a fatal in this case because Spyc autoloads a file which always defines the Spyc class. For dependencies which implement a proper autoloader, it's less of a problem because the class doesn't get defined a second time.\nYou'll need to work around this in your project, though. There isn't a fix I can apply in WP-CLI which will solve your problem.\n. > The fact that WP-CLI errors out when installed with composer install --optimize-autoloader is more of a valid issue with WP-CLI?\nSorry, I don't follow. Can you share more detail?\n. Not sure about the answer to either of these questions without spending time debugging it.\nBut, WP-CLI shouldn't be required in a project loaded into a web request.\n. > I realized that there doesn't appear to be any internal escaping going on within the WP_CLI logger functions.\nI'm not sure we're going to add automatic escaping to the logger methods. You're meant to escape the strings yourself, particularly if there's the possibility of unexpected command execution.\n. > Fortunately, PHP has some built-in commands for handling this: escapeshellarg() (for single arguments) and escapeshellcmd() for full commands.\nescapeshellcmd() and escapeshellarg() are meant to escape strings passed to exec() and similar, not \"sanitize\" the backtick operator.\nIf you change your command to run WP_CLI::line( escapeshellcmd( $result_from_some_command ) );, the result is still:\nlocal \u279c  Desktop  wp --require=test.php escape-shell-cmd breakstuff\nbusted\\\n. Can you try using the latest nightly build of WP-CLI? wp cli update --nightly\nI believe your issue may have been fixed with #2318 \n. It would be:\nphp wp-cli.phar cli update --nightly\nHowever, since 0.22.0 is released, you could just use:\nphp wp-cli.phar cli update\n. Sorry, what's the context for this? \n. Closing in favor of #2361\n. WP-CLI doesn't fully support Windows \u2014 it's a bit \"Your Mileage May Vary\".\nWe'd be able to better determine the proper temp directory with #2119, as a part of the improvements that landed in #2353\n. Tags are created a couple hours after release.\n. I can't reproduce on master. Can you share wp --info ?\n. > but it would be nice to hide these initial lines, up to and including Running command:\nI'm not sure I follow. What would --debug include, if not those lines?\n\nHow about introducing an option for that?\n\nI'm not confined it should be an option. The point of --debug is to give you as much information as possible, for the purposes of debugging whatever problem is at hand.\n. > Whatever I do with WP-CLI I see the same lines (I am talking only the above 10lines),\nBut they'll be different if you're running WP-CLI in a different context. If they're always the same, and it's something that's bothering you, you should probably disable --debug and only use it when you need it.\n. > It appears wp-cli only works with strings, however.\nHow are you supplying your environment variables? Are they defined in the CLI context?\n. > HI I also have this issue. I could provide the variables as part of the CLI context or pass them on the command line like used for \"wp core config\".\nSorry, is there a question in this? Here are some ways you can define environment variables in CLI context: http://stackoverflow.com/questions/18098006/setting-php-enviromental-variable-while-running-command-line-script\n. Thanks!\n. Thanks!\n. @szepeviktor Can you try the 2369-list-user-perf branch to see if that improves performance for you? I suspect you're running into a couple bad SQL queries.\n. :+1: Thanks for running that.\n. Makes sense \u2014 thanks\n. You should move the filter to a mu-plugin.\nSee thread in #1631\n. Still need to add support for longdesc\n. > Any idea what could cause this?\nPotentially a plugin or theme is calling require('wp-includes/load.php')\nCan you try wp --skip-themes --skip-plugins in your WordPress directory to see if that bypasses the errors?\n. Ok. Hard for me to say what it might be then, other than it's probably in your theme.\n. > What is wrong with including this file in a theme?\nIt loads WordPress. Your theme shouldn't need to load WordPress, given it's a WordPress theme.\n\nwp-cli does include it as well after all. Shouldn't wp-cli actually use require_once to prevent this kind of collision?\n\nWP-CLI isn't a WordPress theme, it's a command line interface to WordPress. Here's some background on the why of how WP-CLI loads WordPress #1631\n. > Does WP-CLI try to load a functions.php file in the directory that you run it in?\nIt doesn't, no. \n. @lehelmatyus Github issues aren't an appropriate venue for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. Please review http://wp-cli.org/#support. @MaximeCulea WP-CLI is compatible with Composer installs.\nPlease see https://wp-cli/#support for available support options.. Thanks!\n. You can use wp option update (docs) to set these options.\n. You can use:\nwp user meta update 1 show_welcome_panel 0\n. @gilbitron looking really good! just a few more minor nits\n. @gilbitron Looks good :+1: I broke your build though :( Can you merge master?\n. @gilbitron it looks like your test is failing on older versions. To make it more precise, you could have it start with an empty directory, install WordPress 4.4, and then perform the downgrade. On older versions, because it's starting with the older version of WordPress, it appears the cleanup process happens a bit differently.\n. Great \u2014 thanks @gilbitron !\n. We don't yet.\n. > Should it exactly work like wp post meta\nMore or less, I'd think. \n. I need to update the homepage. WP-CLI now supports WP 3.7 and higher. \n. Updated the homepage.\n. > It would be handy if $exit could also support integer values which then will be used for the exit code, which is currently 1 per default.\n:+1: \nRelated #1430\n. > Does the code look proper to you?\nYes, I prefer:\nif ( true === $exit ) {\n    exit( 1 );\n} elseif ( is_int( $exit ) && $exit >= 1 ) {\n    exit( $exit );\n}\n\nHappy to provide a PR with one or two tests then.\n\nGreat!\n. Still need to:\n- [x] Write tests for SynopsisParserTest\n. Can you review #1758 to see if any of the discussion on that thread may help you debug?\n. You can already use --config=<path>, which isn't documented because it's deprecated.\nHere's the history on why it's deprecated: https://github.com/wp-cli/wp-cli/pull/698#issuecomment-26939247\n. > Appears --config no longer works\nGiven it appears in your debug log, --config does in fact work. The debug also says:\nDebug: No readable global config found (0.019s)\nThis means that your global config file isn't readable by WP-CLI, which means any settings defined in it aren't applied.\n. > How to remove this error?\nWP-CLI appears to be executing every time you open a new session. \nI might recommend checking your .zshrc (or .bashrc) to see if you have a poorly formed alias that's calling WP-CLI instead of defining wp when the profile is loaded.\nAlternatively, you may have located your copy of WP-CLI in an \"auto-run\" directory.\n. I don't have any good ideas, unfortunately :(\nWhere is WP-CLI installed? Can you share which -a wp ?\n. Deep under the hood, WordPress calls _wp_handle_upload(), which calls wp_check_filetype_and_ext(). This second function will set the extension of the uploaded file based on the file's mime type. While you think you had a JPEG, WordPress discovered your imported file was actually PNG and renamed it accordingly.\n. No need for wp plugin update. You can run wp plugin install --force <plugin|zip|url> to achieve the same effect.\n. > I tried that, but it failed. Then I removed the plugin and ran a regular install and it worked. So clearly something is different. Should I open a new bug report for that?\nCan you share the full output from the procedure here?\n. > mysql works fine since i adjusted the /root/.my.cnf to the remote host\nTo clarify, you're talking about the constants you've edited in your wp-config.php (e.g. DB_HOST)?\n\nbut the wp-cli still trying to find the mysql.sock.\n\nCan you share the error you see?\n. > No such option seems to exist for other commands, such as wp-cli --allow-root core install which will result in an error like this:\nwp core install uses the DB configuration details stored in wp-config.php. If it can't connect to MySQL, then WordPress won't be able to connect to MySQL.\nAre you sure the DB configuration details you've entered are correct?\n. Can you share your wp-config.php file, with any secrets removed?\n. @AlexeyKrivoruchko You'll need to either set the environment variable you're expecting when running WP-CLI, or change your conditional to use a default config file when WP-CLI is present.\n$ MY_ENV=dev wp option get home\nor\nif ( isset( $_SERVER['MY_ENV'] ) && $_SERVER['MY_ENV'] ) {\n    $env = $_SERVER['MY_ENV'];\n} else if ( defined( 'WP_CLI' ) && WP_CLI ) {\n    $env = 'dev';\n}\nRelated #2365\n. > because of how common this issue appears to be\nIt's not a common issue.\n\nit might make sense for wp-cli itself to set an environment variable?\n\nI don't see how this would solve the problem? How would WP-CLI know which environment variable to set for you?\n\ni can imagine a variety of situations, beyond loading the config, that could benefit from the ability to detect whether the request is coming from wp-cli\n\nYou can use:\nif ( defined( 'WP_CLI' ) && WP_CLI )\nWP_CLI is a constant that only WP-CLI defines. Or should, at least.\n. As I mentioned in the pull request, I think this is a good idea but I'd prefer to see it as a community command.\n. @A5hleyRich Thanks for the pull request. I'd prefer this be implemented as a community command, though. See https://github.com/wp-cli/wp-cli/wiki/List-of-community-commands\nI have some inspiration on how to move forward on #1564, so hopefully that may be coming soon.\n. Build fails for unrelated reason\n. At this point, you'd need to write your own command for it. wp post get currently only exposes the WP_Post object, which doesn't include meta fields, taxonomy terms, etc.\nKeep an eye on the wp-rest-cli project though, as it will expose all of the fields present on the Post Resource\n. I did some googling around and wasn't able to find a one-liner for you.\nI'd recommend exporting in one operation:\nwp post list --format=json > posts.json\nThis will give you posts.json with a JSON array you can parse in some alternative way, without having to hit WordPress (and the DB) as you try your export procedure.\nYou might also find some luck using jq, although I wasn't able to find any built-in flags for this use case.\n. Glad you've figured it out :)\n. You'll need to update to WP-CLI v0.22.0 to use the --export param, as the feature was only introduced in this most recent version.\n. > But the theme command issues an exit() :( Which means that my script halts after the WP_CLI::run_command(['theme', 'activate', 'apsmain'], []);\nOh. It should only exit on error, but it appears to exit on success too. We can change that.\nYou can also use WP_CLI::launch_self(), which will launch a new process and let you inspect the return value.\n. :+1: \n. > but it does not output a JSON result:\nThe docs state:\nOutput summary as table or summary\nJSON isn't supported.\n\nBoth of them displays the same output, so it looks like there are some problems with the output part.\n\nCan you share the full result of both?\n. > I see that it only supports table and summary, and both of them display the same output\nYes, I see that too. I need to debug when I have a moment.\n\nIs theme update going to support JSON as format?\n\nIt could, but I'm not sure what it would look like or how it would be useful. Can you share a use case?\n. > Since theme update does not output JSON, we decided to parse the output when format is summary or table, but we realized that both of them are identical.\nThey're actually slightly different. --format=table produces this at the end:\nSuccess: Updated 1/1 themes.\n+------+-------------+-------------+---------+\n| name | old_version | new_version | status  |\n+------+-------------+-------------+---------+\n| p2   | 1.5         | 1.5.5       | Updated |\n+------+-------------+-------------+---------+\n--format=summary produces this:\nSuccess: Updated 1/1 themes.\nP2 updated successfully from version 1.5 to version 1.5.5\nNothing to fix there. But we could add --format=json and --format=csv to the mix.\n. > However when using --dry-run the output is always a table.\nOh. Thar be the bug. It'd be good to expand our tests to cover that case.\n. Seems reasonable to me\n. > I have tried upping the PHP Memory size up to no avail.\nOk. This is ultimately the problem though, so you'll need to make more memory available to WP-CLI. \n. See also #1324\n. > Ive tried adjusting values in the database and have also used wp option update {values} to try and disable / untick them and nothing has seemed to have worked.\nThey are user-specific options, so you'll need to figure out the correct values in user meta and update them for each user.\nAlternatively, I might recommend looking at existing plugins, or writing your own, to handle the behavior you'd like. This isn't necessarily a use-case WP-CLI is meant to handle.\n. > Is there a way in WP-CLI that i can already add these fields in with the populated data that i need to pre-active the plugin?\nYou could make secondary calls like:\nwp option update optimus_key <key>\nwp option update optimus_purchase_time <time>\n. How are the classes and functions for your theme being loaded? Can you share an example?\n. Hey @za-creature, thanks for the PR!\n. --no-<flag> intentionally negates the flag. This lets you override flags that may be set in wp-cli.yml or similar.\nFor instance, if --debug was set in wp-cli.yml, I could disable it with --no-debug.\nHope this helps clarify.\n. WP-CLI calls media_handle_sideload() (ref), which in turn calls wp_handle_sideload(), which calls _wp_handle_upload() with the wp_handle_sideload action. \nIf you register your plugin to also run on the wp_handle_sideload_prefilter filter, you'll be able to modify sideloaded images, including those WP-CLI imports.\n. Sorry about that \u2014 it's a bug. --skip_comments will be fixed on the nightly shortly.\n. If users on the network aren't assigned to the site, then they won't have an empty role for the site.\nYou can list all users on the network with wp user list --network\n. > the users that do not belong to the sub site are listed as none role in the dash, empty string in the role field in cli.\nOh, I see.\nWP-CLI simply passes the args through to WP_User_Query, which doesn't support querying by role=''.\nYou could use wp user list --format=csv and then filter the list in Google Docs or similar.\n. \"Error establishing a database connection\" typically means WordPress is unable to load because WordPress can't connect to the database.\nTo help you debug further:\n1. Does WordPress load as expected through the browser, or do you see errors?\n2. Do other WP-CLI commands work as expected on that site? On other sites?\n3. Do you have any special aspects to your wp-config.php?\n. > The only \"special\" thing that I can think of is that the database is pointing to a different server\nThis shouldn't matter.\nAre you running a wpdb drop-in by chance? Can you share the contents of your wp-config.php, minus any secrets?\n. Oh. Can you try wp option get home --url=domain.com, where domain.com is a site on your network?\n. Ok. The reason you get \"Error establishing a database connection\" is that WP-CLI doesn't know which URL to make the request as, which subsequently means WordPress doesn't know which blog tables to load. You can remedy by passing --url=<url> at runtime, or defining DOMAIN_CURRENT_SITE in your wp-config.php to the main site on the network.\nYou'll also need to include --skip-plugins or --skip-plugins=<plugin-slug> to bypass the error message being returned by that OpenID plugin.\n. Ok. I'm not sure I can help much more without access to your environment to debug, unfortunately.\n. I hope this doesn't come off as bait and switch, but I'm available for hire for help on private projects. Given this seems to be a problem specific to your environment, there's not much additional help I can offer without access to the environment.\n. > --skip-plugins does nothing and I still get the OpenID plugin error message\n\nNow I don't get the database error but it seems the command is not executed\n\nCan you share the full results from your command execution? If the OpenID plugin is blocking script execution, then none of the WP-CLI commands will work.\n. So, wpOpenID is blocking script execution. You'll need fix that, or remove the plugin, in order for WP-CLI to function properly.\n. Glad you got it figured out :)\n. You likely have $_SERVER['HTTP_HOST'] in your wp-config.php, which isn't set in WP-CLI context. You'll want to make sure you have a conditional around it.\nRelated #730\nPartially related #1631\n. > After adding some empty checks I don't have any errors, but I also don't have any output.\nCan you try with --debug and share the output? --info intentionally doesn't load WordPress.\n. > do I need a global config or project config for the future?\nYou shouldn't need either.\nScript execution is being halted when WordPress is loaded. You might try --skip-plugins --skip-themes to see if it's a plugin or your theme that's prematurely calling exit;\n. > Is there a debug section on the wiki? Seems like this is basic stuff that could go into a section like that.\nhttps://github.com/wp-cli/wp-cli/wiki/FAQ\nFeel free to edit :)\n\nLooks like I had created an mu-plugins/GeoIP Blocker which also blocked anyone without a $_SERVER['HTTP_USER_AGENT'] defined.\n\nThat definitely makes sense as a culprit.\n\nNow I can see a whole slew of new notices. Would this be considered a wp-social-login issue or more bad server setup?\n\nProbably mostly application layer (e.g. plugins and whatever else you have running in your WordPress install).\n. @enoch85 Github issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. > it seems that the message output should be made singular/plural automatically.\nEnglish doesn't make this easy to do \"automatically\". Instead, you have to provide singular and plural versions of each message.\n\nIs it easier to write tests using the latter?\n\nIt's less code to maintain.\n. > It would be great if the internal timer was part of the output for each event when in debug mode, then the execution time for each event could be deciphered.\nI don't know that hooking into debug mode is the best approach. We could instead just include the total execution time, though.\n. > Do you mean the total execution of all events ran, or for each event?\nEach event\n. Right, it fails the build too:\n\nYou'll need to wait a bit longer for WordPress.org to create a ru_RU release.\n. Thanks :)\nI think what you describe could be useful too. Today, I landed wp package (https://github.com/wp-cli/wp-cli/issues/1564#issuecomment-179426634), a command to browse and install community commands. Want to publish your command and add it to our growing directory?\n. > Sure, @bones5 and I could work on this. It would be really useful for us.\nCool :+1: \nAs you run into questions, please do identify them so I can take it as an opportunity to improve the documentation.\n. --minor was introduced in v0.22.0 (#2256). You'll need to update WP-CLI to make use of it.\n. Oh, and you can use wp cli update to update.\n. Because WordPress doesn't have patch versions, only major and minor, wp core update --minor will update you to the latest minor version of your current major version.\nFor instance, if you're on version 4.4, wp core update --minor will update you to 4.4.2. If you're on version 4.3,  wp core update --minor will update you to 4.3.3\n. Oops \u2014 thanks!\n. > If you tell me it's so simple I would have implemented it.\nNever know how simple something is until I try :)\n. > which makes the warning line in the run() method obsolete.\nGood call, I'll clean that up.\n\nOne idea for improving this could be to catch any Exceptions that might be thrown during an event hook and return the error message,\n\nIf you start throwing Exceptions in your cron callbacks, you'll break your WordPress :)\nGiven there isn't an existing paradigm of reporting errors with WP Cron, I think your best bet is to include some WP-CLI-specific reporting in your callbacks:\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n   WP_CLI::log( 'The callback has made it this far without breaking' );\n}\n. > should wp break this much just because of a poor functions.php file ?\nI'm not sure how this is a question, unfortunately. With PHP, if you have a syntax error, you'll get a fatal. There's not much avoiding that.\nWith WP-CLI, you can use wp --skip-themes to be able to execute commands without loading the theme, which should be helpful for recovering from the fataled state.\n. wp plugin is-installed returns an exit code, no output:\nsalty-wordpress \u279c  wp-api  wp plugin is-installed foo\nsalty-wordpress \u279c  wp-api  echo $?\n1\nsalty-wordpress \u279c  wp-api  wp plugin is-installed wp-api\nsalty-wordpress \u279c  wp-api  echo $?\n0\n. > Will this be added to the documentation page on the website?\nYes, the documentation is rebuilt on each release.\n. > It exits, but instead it should clear what you typed before.\nHm. I'm not so sure about this.\nPHP's interactive shell also exits with ctrl + c. However, Python's will clear input.\nDo you have other examples we can refer to?\n. > should probably not include the progress updates\nCorrect.\n\nAny ideas how we would get around this?\n\nMost of the output is from WP_CLI\\UpgraderSkin. Given we can't pass much context to the callbacks, our next best bet would be to assign a class-level variable to the object.\nThis worked well in my testing:\n```\ndiff --git a/php/WP_CLI/CommandWithUpgrade.php b/php/WP_CLI/CommandWithUpgrade.php\nindex f7da951..6c27d65 100755\n--- a/php/WP_CLI/CommandWithUpgrade.php\n+++ b/php/WP_CLI/CommandWithUpgrade.php\n@@ -249,6 +249,7 @@ abstract class CommandWithUpgrade extends \\WP_CLI_Command {\n                                $cache_manager->whitelist_package($item['update_package'], $this->item_type, $item['name'], $item['update_version']);\n                        }\n                        $upgrader = $this->get_upgrader( $assoc_args );\n+                       $upgrader->cli_output_format = ! empty( $assoc_args['format'] ) ? $assoc_args['format'] : '';\n                        $result = $upgrader->bulk_upgrade( wp_list_pluck( $items_to_update, 'update_id' ) );\n                }\ndiff --git a/php/WP_CLI/UpgraderSkin.php b/php/WP_CLI/UpgraderSkin.php\nindex aa56b43..b2b3d0f 100644\n--- a/php/WP_CLI/UpgraderSkin.php\n+++ b/php/WP_CLI/UpgraderSkin.php\n@@ -41,7 +41,9 @@ class UpgraderSkin extends \\WP_Upgrader_Skin {\n            $string = str_replace( '&#8230;', '...', strip_tags( $string ) );\n\n\n\\WP_CLI::line( $string );\nif ( ! empty( $this->cli_output_format ) && ! in_array( $this->cli_output_format, array( 'csv', 'json' ) ) ) {\n\\WP_CLI::line( $string );\n}\n        }\n }\n```\n. > However when using --format=json and --format=csv I'm still getting this single line of output before the json/csv:\n\nOk. Let's go with a different approach. Early in the update() method, let's do:\nif ( ! empty( $assoc_args['format'] ) && in_array( $assoc_args['format'], array( 'csv', 'json' ) ) ) {\n    $logger = new \\WP_CLI\\Loggers\\Quiet;\n    WP_CLI::set_logger( $logger )\n}\nWe'll need to make sure all logging lines use WP_CLI::log() instead of WP_CLI::line()\n\nAny ideas how to get around that? Is there a way we can find the \"upgrade to\" version and do something like And save STDOUT as {UPGRADE_VERSION}?\n\nWhen I run `wp theme list --name=twentyfifteen --field=update_version`\nThen save STDOUT as {UPDATE_VERSION}`\n. :peach: Thanks!\n. > Is it possible to escape these special characters in a table format? And if so, does it belong in WP-CLI or in my command?\nI'm going to disable colorization for format=table, as I see this bug happening more often than someone wanting table output to be colorized. For those who want table output colorized, they can run their strings through ::colorize() before passing them to \\WP_CLI\\Formatter()\n. > Hello, any chance of enhancing the Output API with the addition of a progress bar?\nSure! I'm working on documentation right now (https://github.com/wp-cli/wp-cli/issues/1045#issuecomment-180618311), so I'll get to it when I have a moment.\n. @gnotaras here you go http://wp-cli.org/docs/internal-api/wp-cli-utils-make-progress-bar/\n. Released https://github.com/wp-cli/php-cli-tools/releases/tag/v0.11.1\n. > Before, you had to either specify version with --version or install and load WordPress before calling wp core verify-checksums.\nSee https://github.com/wp-cli/wp-cli/issues/2086#issuecomment-142615771\nUsing --version=<version> assumes you're passing the correct locale string if you need to be. I suppose we could document that better?\n. > Is it not a security issue to execute the files before checking them?\nwp core verify-checksums isn't solely used for security. In fact, it can be a helpful tool, but I can't recommend it as a security solution as there are many ways to compromise WordPress while working around checksum verification.\nFurthermore, you're including wp-includes/version.php, which could itself be compromised.\n\nCouldn't we verify the checksums directly during wp core download, as we have all needed information about version and locale here?\n\nwp core verify-checksums is intended a secondary, informational command.\n. Thanks for your work on this!\n. > I'm sorry I read CONTRIBUTING.md too late, I juste noticed that I should have made a separate branch for my changes, is there any way I can correct this or is it too late?\nNo, that's alright. It's fine as it is.\n\nAlso, would you like me to write documentation block for the find_var method? If yes, can I do it in mbovel/master?\n\nSure! You'll need to pull wp-cli/master into your master branch, then create a feature branch with your changes, then submit a new PR.\n. Given WP-CLI is a wrapper around core functionality, this is most likely this bug in WordPress core https://core.trac.wordpress.org/ticket/29669\n. > But it doesn't work.\nCan you be more descriptive, please? \n. > I have a \"success\" line telling me that the option has been updated but my options in back end are still \"empty\" (without my settings).\nCan you inspect the database to see if the option is set, and what value it's set to?\nSimilarly, can you change your settings through the plugin UI, and inspect what value the option is set to in the database?\nLastly, when you perform both of these steps, can you share your findings here? Screenshots, snippets of output, etc. are very helpful.\n. > No reworked find_var() from #2467?\nI don't think it needs it.\n. > Would that make the guide too long?\nNah \u2014 pull requests welcome :)\nWhile we don't require specific branch names, I typically follow <number>-<feature-slug>, and find it a helpful pattern when working with tons of branches.\n. Heh. Thanks @szepeviktor \n. > This create a error in the update, because the \"zip\" is \"corrupted\":\nI can reproduce:\nsalty-wordpress \u279c  es-download  wp core download --version=4.0 --locale=es_ES\nDownloading WordPress 4.0 (es_ES)...\nSuccess: WordPress downloaded.\nsalty-wordpress \u279c  es-download  wp core update --minor\nUpdating to version 4.0.10 (es_ES)...\nDescargando paquete de instalaci\u00f3n desde https://es.wordpress.org/wordpress-4.0.10-es_ES.zip...\nError: Descarga fallida.\nsalty-wordpress \u279c  es-download  http HEAD https://es.wordpress.org/wordpress-4.0.10-es_ES.zip\nHTTP/1.1 404 Not Found\n\nWhat do generating that URL? \n\nWordPress.org provides us the download offer. The ZIP should exist, so it's something WordPress.org will need to fix. I've filed an issue for it\n. Actually, it's our bug. We're producing the download link, so we need to verify it's correct.\n. After #2469 lands, wp core update --minor for WP 4.0.9 es_ES will use https://downloads.wordpress.org/release/wordpress-4.0.10-partial-0.zip to perform the update, given there's no 4.0.10 es_ES build.\n. > I've also added two basic tests for wp core download but I was unable to find a way to test the two error messages I've added. Any suggestion?\nI typically don't like to include tests for filesystem permissions because it means we'd need to muck with the filesystem on wherever the tests are running.\nI think this is good as is if you're happy with it.\n. Thanks for the feature request, @dsXLII :)\nI asked you to open an issue because I wrote a command for this the other week and thought it would be a good reason to publish it. I took the time this morning to put it up as a community command: https://github.com/danielbachhuber/wp-reset-password-command\nIf you update to the nightly build of WP-CLI wp cli update --nightly, you can install the command with wp package install danielbachhuber/wp-reset-password-command\nNow that we have a distribution mechanism for community packages (#1564), I'm going to put more emphasis on building out new features as community packages as a way of dog-fooding and improving the user experience.\n. cd $(wp plugin path) seems to work for me on Ubuntu:\nsalty-wordpress \u279c  wordpress-develop.dev  cd $(wp plugin path)\nsalty-wordpress \u279c  plugins  wp plugin path\n/srv/www/wordpress-develop.dev/src/wp-content/plugins\nI'm not sure why you're ending up with cd:/var/ when it should be cd /var/. How are you calling the command in centos6? Do other WP-CLI commands work?\n. Can you try quoting the command? cd \"$(wp plugin path)\"\n. > Could the wp-cli, plugin path command\u2019s output be confusing cd?\nIt's more likely a bash configuration issue.\n. > So... Something changed in the last week or two, to break this. I don't know if it is wp-cli, wordpress, or the vagrant guest tools.\nGiven the problem doesn't reproduce in other environments, it's most likely specific to your environment.\n. You can use wp search-replace <search> <replace> --all-tables to search and replace against all tables in the connected database. WP-CLI uses the tables registered to $wpdb by default.\nIs your table prefix registered in wp-config.php? Does the WordPress site load as expected through the browser?\n. > Doesn't it seem strange to you that wp db tables and wp db repair return a different set of tables?\nNo. They are different commands.\nwp db tables returns tables registered to $wpdb by default, per the manual. Similar to the flag wp search-replace also supports, you can use wp db tables --all-tables to list all tables in the database.\nwp db repair doesn't care about which tables are registered to $wpdb.\n\nIf you're saying that somehow my tables didn't get registered to $wpdb in a way that WP-CLI understood, then how can I solve that problem?\n\nBy doing more debugging, of course.\nOr you can just use --all-tables and avoid the headache.\n. > Suppress errors if using wp db drop and db doesn't exist\nCan you share your use case in greater detail? Why should we offer an option to disable errors in this context, and not in others?\n. Why not just skip the error in the script?\n. Decisions, not options :) If there's a reasonable existing way of doing something, we should do that instead.\n. > I've had a quick crawl through the open issues and can't see this raised anywhere, so figure it's likely to be something environmental, but I can't work out where the issue is.\nCan you try running wp core update with the --skip-plugins and --skip-themes flags?\nAlso, do other WP-CLI commands that make use of WordPress work as expected? Can you try wp option get home and share the output?\n. Ok. One of your plugins, or your active theme, is halting WP-CLI execution in some way. I'd recommend doing a search for WP_CLI within your codebase to see what code is conditionally included / executed. \n. > Is there anything else that I should be looking for?\nNot sure. It's hard to say what the problem might be now without access to your codebase.\nYou'll need to do a bit of debugging to track it down. Try using --skip-plugins=<plugin-slug> with each active plugin to conditionally run WP-CLI without that particular plugin. If it loads when you're skipping a particular plugin, then that plugin is the one causing the problem.\n. You're welcome \u2014 glad you've figured it out!\n. WP-CLI only supports simple database operations. You can use wp db export to export a copy of your database, and then wp db import to import the file you produced in the first operation. Here are the docs on the wp db * class of commands.\nHowever, keep in mind there may be other values you need to transform as a part of the migration process, including updating the URLs in the database.\n. \"mu plugins\" stands for \"must-use plugins\", so I think the expected behavior is that they're always used. They should be considered equivalent to using a drop-in, adding code to your wp-config.php, etc.\nI'll add a note to --skip-plugins mentioning that mu plugins are always used.\n. > To prevent MySQL error if the database already exists.\nIsn't it helpful to know the database already exists, and doesn't need to be created?\n. We're not going to change the behavior of wp db create at this time.\n. I can't reproduce:\nweb476.webfaction.com \u279c  ~  wp package list\n+---------------------------------------------+---------------------------------------------+------------------+------------+\n| name                                        | description                                 | authors          | version    |\n+---------------------------------------------+---------------------------------------------+------------------+------------+\n| danielbachhuber/wp-cli-stat-command         | Explore data about your WordPress site.     | Daniel Bachhuber | dev-master |\n| danielbachhuber/wp-hook-command             | List callbacks registered to a given action | Daniel Bachhuber | dev-master |\n|                                             |  or filter                                  |                  |            |\n| danielbachhuber/wp-reset-password-command   | Reset password for one or more WordPress us |                  | dev-master |\n|                                             | ers.                                        |                  |            |\n| danielbachhuber/wp-rest-cli                 | Unlock the potential of the WP REST API at  | Daniel Bachhuber | dev-master |\n|                                             | the command line                            |                  |            |\n+---------------------------------------------+---------------------------------------------+------------------+------------+\nweb476.webfaction.com \u279c  ~  wp package install wp-cli/wp-scaffold-package-command\nInstalling wp-cli/wp-scaffold-package-command (dev-master)\nUpdating /home/handbuiltco/.wp-cli/packages/composer.json to require the package...\nUsing Composer to install the package...\n - Installing package\nSuccess: Package installed successfully.\nweb476.webfaction.com \u279c  ~  wp package list\n+---------------------------------------------+---------------------------------------------+------------------+------------+\n| name                                        | description                                 | authors          | version    |\n+---------------------------------------------+---------------------------------------------+------------------+------------+\n| danielbachhuber/wp-cli-stat-command         | Explore data about your WordPress site.     | Daniel Bachhuber | dev-master |\n| danielbachhuber/wp-hook-command             | List callbacks registered to a given action | Daniel Bachhuber | dev-master |\n|                                             |  or filter                                  |                  |            |\n| danielbachhuber/wp-rest-cli                 | Unlock the potential of the WP REST API at  | Daniel Bachhuber | dev-master |\n|                                             | the command line                            |                  |            |\n| wp-cli/wp-scaffold-package-command          | Scaffold WP-CLI packages                    |                  | dev-master |\n| danielbachhuber/wp-reset-password-command   | Reset password for one or more WordPress us |                  | dev-master |\n|                                             | ers.                                        |                  |            |\n+---------------------------------------------+---------------------------------------------+------------------+------------+\nCan you share the packages you've installed, some step-by-step details on how you installed them, and the contents of ~/.wp-cli/packages/vendor ?\n. > but when i do a list using wp package list it only shows the rest module.\nI see two packages :) wp-rest-cli and wp-cli-buddypress.\nI'll see if I can reproduce why the others don't show up, though.\n. @chrismccoy I did some debugging and think you're actually running into a fatal error when installing the packages. #2491 fixes that problem.\nCan you list the other packages you tried to install so I can debug them individually? wp-cli-deploy has an issue that will need to be resolved separately.\n. The source of the problem ultimately is #2493. Once we have a reasonable path forward for it, I'll reach out to each of the package maintainers as a part of the release checklist #2542\n. Sorry about that :(\n\nPresumably it would detect a broken PHAR download but when the contents of the file are something that PHP can read (text?) it looks like it doesn't detect that it's a bad download.\n\nYeah, that's exactly it:\n$process = WP_CLI\\Process::create( \"{$php_binary} $temp --version {$allow_root}\" );\n$result = $process->run();\nif ( 0 !== $result->return_code ) {\n    $multi_line = explode( PHP_EOL, $result->stderr );\n    WP_CLI::error_multi_line( $multi_line );\n    WP_CLI::error( 'The downloaded PHAR is broken, try running wp cli update again.' );\n}\nWe should run --info instead of --version, and check for a string from --info in the response.\n. > Due to sharing the database I cannot use wpcli's command for multisite installation: it will setup one multisite installation without issue, but the second one is not setup as a Multisite installation.\nJust to verify, you're using two different table prefixes for these installations? Can you share more specific details on the commands you're running, and the output you see?\n. > Sure, I'm not using different table prefixes, because both installs should use the same database.\nWhy do you need to run the installation command twice then? The command is intended primarily for the database alteration that needs to happen, and secondarily for altering the wp-config\n. > I've created a workaround in Ansible, where I check if the sitemeta table already exists and if it does I just add the required multisite constants to the wp-config.php file myself.\nYou could also just include the wp-config.php file as a template in Ansible, and avoid having to use WP-CLI entirely.\n\nIt would be nice if running the wpcli multiple times would change the wp-config.php if it has not been changed yet, but the database indicates it should be a multisite installation.\n\nWhile I understand your use case, I don't think this is expected behavior for 80% of users, and a change that should be made to WP-CLI. Thanks for checking, though.\n. Thanks!\n. Because @github-api is skipped on Travis, I ran features/cli.feature locally and all tests pass.\n. > Thus you get -master added to the plugin name.\nRight, because it's the master branch and -master is included in the ZIP file. You should be able to install https://github.com/norcross/airplane-mode/archive/develop.zip or https://github.com/norcross/airplane-mode/archive/my-feature-branch.zip alongside if you like.\n\nWhat could be the solution?\n\nYou can rename the directory if you'd like.\n. Can you perform an export through the WordPress admin to verify that the admin exporter exports data as you'd expect?\n. Ok. I'm unable to reproduce, unfortunately:\nsalty-wordpress \u279c  wordpress-develop.dev  wp post list\n+----+---------------------------+-----------------------+---------------------+-------------+\n| ID | post_title                | post_name             | post_date           | post_status |\n+----+---------------------------+-----------------------+---------------------+-------------+\n| 7  | This content is paged     | this-content-is-paged | 2016-02-08 15:20:14 | publish     |\n| 1  | Cr\u00eaperie La Saint-Georges | post-0                | 2016-01-30 18:17:21 | publish     |\n| 2  | Post 1                    | post-1                | 2016-01-30 18:17:21 | publish     |\n+----+---------------------------+-----------------------+---------------------+-------------+\nsalty-wordpress \u279c  wordpress-develop.dev  wp export --post__in=1 --skip_comments\nStarting export process...\nWriting to file /srv/www/wordpress-develop.dev/wordpressdevelop.wordpress.2016-02-19.000.xml\nSuccess: All done with export.\nsalty-wordpress \u279c  wordpress-develop.dev  cat wordpressdevelop.wordpress.2016-02-19.000.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- generator=\"WordPress/4.5-alpha-35776-src\" created=\"2016-02-19 13:26\" -->\n<rss version=\"2.0\" xmlns:excerpt=\"http://wordpress.org/export/1.2/excerpt/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:wfw=\"http://wellformedweb.org/CommentAPI/\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:wp=\"http://wordpress.org/export/1.2/\">\n  <channel>\n<title>WordPress Develop</title>\n<link>http://wordpress-develop.dev</link>\n<description>Just another Fake Site site</description>\n<pubDate>Fri, 19 Feb 2016 13:26:19 +0000</pubDate>\n<language>en-US</language>\n<wp:wxr_version>1.2</wp:wxr_version>\n<wp:base_site_url>http://wordpress-develop.dev/</wp:base_site_url>\n<wp:base_blog_url>http://wordpress-develop.dev</wp:base_blog_url>\n<generator>https://wordpress.org/?v=4.5-alpha-35776-src</generator>\n<item>\n  <title>Cr\u00eaperie La Saint-Georges</title>\n  <link>http://wordpress-develop.dev/2016/01/30/post-0/</link>\n  <pubDate>Sat, 30 Jan 2016 18:17:21 +0000</pubDate>\n  <dc:creator>daniel</dc:creator>\n  <guid isPermaLink=\"false\">http://wordpress-develop.dev/index.php/%post_name%/</guid>\n  <description/>\n  <content:encoded><![CDATA[]]></content:encoded>\n  <excerpt:encoded><![CDATA[]]></excerpt:encoded>\n  <wp:post_id>1</wp:post_id>\n  <wp:post_date>2016-01-30 18:17:21</wp:post_date>\n  <wp:post_date_gmt>2016-01-30 18:17:21</wp:post_date_gmt>\n  <wp:comment_status>open</wp:comment_status>\n  <wp:ping_status>open</wp:ping_status>\n  <wp:post_name>post-0</wp:post_name>\n  <wp:status>publish</wp:status>\n  <wp:post_parent>0</wp:post_parent>\n  <wp:menu_order>0</wp:menu_order>\n  <wp:post_type>post</wp:post_type>\n  <wp:post_password/>\n  <wp:is_sticky>1</wp:is_sticky>\n  <category domain=\"category\" nicename=\"uncategorized\"><![CDATA[Uncategorized]]></category>\n  <wp:postmeta>\n    <wp:meta_key>_edit_last</wp:meta_key>\n    <wp:meta_value><![CDATA[1]]></wp:meta_value>\n  </wp:postmeta>\n</item>\n  </channel>\n</rss>\nAre there other details you can share about your environment that might help me debug? Or, can you give me specific instructions to reproduce?\n. Oh. It probably relates to WPML. Can you deactivate the plugin and see if the issue reproduces?\n. I spent an hour on this today without a lot of luck :(\nI looked into two approaches:\n1. Attempt to overload the dependency resolution process in Composer\\Installer->run(). If only it was so easy as subclassing \u2014 ->run() is several hundred lines long.\n2. Attempt to inject WP-CLI as a platform dependency. This is currently restricted to PHP versions, HHVM, and PHP extensions.\nConceptually, what we need to be able to do is inform Composer that WP-CLI vX.X.X is already installed, and avoid trying to resolve it as a dependency. \n. Very interesting. This does seem like a reasonable approach.\n\nI'm pressed for time atm, but I would probably be able to look into this in more detail on Friday, if you think it might be worth a try.\n\nOh, please do. I spent more time than I'd like yesterday, with little results, so I think I'm burnt out on this for the week. This bug is probably a blocker for WP-CLI v0.23.0 though, due out in a couple of weeks.\n. Not going to pursue this at this time. I was able to resolve most of the issues through other means, and this isn't a worth a wholesale refactor at this point.\n. To address your original question, you can use --skip-delete to skip deletion of original thumbnails, or --only-missing to only generate missing thumbnails. Please see the docs.\n\nEdit: I think problem is just big files like this... Cant regenerate big images. how can i fix this?\n\nI'm not sure without being able to debug. It's likely a configuration issue specific to your server \u2014 or the problem is present with that specific image file.\n. Sorry, I'm not sure what your problem is and can't help further without debugging. You might consider regenerating your image files on another server, and then sync them over after completion.\n. I'm open to the idea, generally. Reliably updating values without breaking wp-config.php is my biggest concern at the moment. However, I think it would be better off as wp core config update to avoid an ambiguous command that does multiple things.\nYou could also start things off as a community command to prove the concept.\n. > You could also start things off as a community command to prove the concept.\nI've filed this as a Spark until someone comes along with a community package for it.\n. Thanks for continuing this discussion, @greg-1-anderson.\nAt this time, I don't have plans to tag the next release as v1.0.0. WP-CLI loosely follows semantic versioning \u2014 not religiously. There are long, philosophical conversations to be had about versioning, and I don't wish to rehash them in this issue.\nv1.0.0 will come at some point. Between now and then, and afterwards, I strongly encourage you to read the thorough changelog I put together with each release.\n. Where is the data stored in your database? Can you share the full command execution (input and output)?\n. > When you guys loop over tables and columns do you look for serialized data in every column and row or is it on specific columns?\nYes, wp search-replace inspects each column to see if it potentially has serialized data in it.\n\nthis was stored in the options table I belive, we also tried putting it in excerpt in wp_posts just to run as a test and the serialized object wasn't replaced but a plain string was.\n\nAre you sure it's serialized properly? If it's not, then WP-CLI won't be able to deserialize it and deep inspect it.\n. Good find, @JRGould.\nIgnoring keys is expected behavior for wp search-replace.\n. > out of curiosity, why does wp search-replace not replace inside serialized array keys too? Is this intentional, or would a patch be accepted to change this?\nYes, it's intentional. I think it's largely an anachronism of the original implementation though.\nI'd be amenable to a patch that modifies this behavior with an environment variable.. > Any other potential gotchas you can think of?\nNot at this point.\n\nAny reason to go with an environment variable rather than a documented CLI option?\n\nwp search-replace is quite overloaded with options right now. Given the infrequency that this would be used, a less-prominent environment variable seems more appropriate.. > Wiki is technically a Git repo, couldn't the website pull it periodically and just render the Markdown files there\nTechnically we could, but I'd like to follow a PR workflow going forward for docs.\n. Oh, sorry. The website is tracked in this repo: https://github.com/wp-cli/wp-cli.github.com\nWe want to port each wiki page over, and ensure it looks good within the website.\n. @gilbitron Just to follow up your question, I'm putting these in /docs/ and giving them some extra header details so they get special treatment:\n```\nlayout: doc\ntitle: Installing\ncategory: Guides\ndescription: Recommended and alternative installation mechanisms.\n\n```\nNotably:\n- \"Category\" is either \"Guides, \"Resources\", \"Contributing\" or \"Misc\".\n- \"Description\" is the description that lands on /docs/, and is also used in the SEO title.\n- The list in /docs/ is generated by ./vendor/bin/phake.\n. Wow, that was a ton of work.\n. Found it #2510\n. > The problem is that older versions of wp-config.php don't contain the magic string: \"that's all, stop editing!\" I'm specifically using 3.8.5, since that's the most up-to-date version obtainable from apt-get (which is another problem, but not one under our control).\nI think apt-get is actually your problem. WordPress 3.8.5 downloaded from the release archives includes the magic string.\n\nProposal - allow passing a custom search term. This was already implemented in #1746, but was rejected for some reason.\n\nI think adding a custom search term fails the tenet of decisions, not options. Using a custom search term is a minority use case, and a small one at that. The alternative, modifying wp-config yourself, is perfectly reasonable.\n\nAs an alternate solution: are there potential problems with just inserting the wp-config lines at the top of the file?\n\nI don't know, actually. The location assumption is from very early bc6a036f662c166a36e8eca83aebb52c8ba391f2, so there might be something else we could key from \n. Try as we might, WP-CLI can't solve for every edge case. Installing WP 3.8.5 via apt-get, which packages a custom wp-config, is an edge case.\nIf we can inject based on a different token though, we might be able to globally solve the problem.\n. > If we can inject based on a different token though, we might be able to globally solve the problem.\nI've spent some time thinking about this, and haven't identified a better token to use that's guaranteed to be more reliable. Because the process of modifying the wp-config.php is quite ugly, I'm concerned about making a change which could cause a regression.\nFor now, I'm going to address this issue by warning the end user when the token can't be found, instead of erroneously inserting the constants into the end of the file.\n. The error indicates you're supplying invalid JSON. --format=json, when used with write operations like add, denotes the format of the supplied input.\nCan you share the full command you're running?\n. fun isn't JSON, so you don't need to use --format=json\n. > I was thinking in terms of output -- but in this case there isn't anything more than a confirmation of output. So, it does make sense that the format would refer to the input!\nYep, exactly. Sorry for the confusion.\n. Can you try wp plugin install civicrm-admin-utilities --debug --skip-plugins to see if one of the plugins is modifying the installation procedure?\n. Are you able to install the plugin through the WordPress admin?\n. I suspect it's an issue with SSL verification against WordPress.org. Unfortunately, I can't think of any logs you can look at, as trigger_error() is the most WordPress does to log the error.\nYou can use wp shell to call plugins_api() directly and see what its raw response is:\n$ wp shell\nwp> require_once ABSPATH.'wp-admin/includes/plugin.php';\nwp> require_once ABSPATH.'wp-admin/includes/plugin-install.php';\nwp> plugins_api( 'plugin_information', array( 'slug' => 'bbpress' ) );\n. FWIW, you shouldn't modify core files. If you're experiencing timeout issues, which probably isn't a WordPress issue by the way, you can change the timeout using a filter.\n. Closing in favor of #2701\n. I wrote a standalone command for you to use. If you upgrade to WP-CLI's nightly release wp cli update --nightly, you can install the package and run it locally:\nsalty-wordpress \u279c  .wp-cli  wp package install danielbachhuber/wp-find-unused-themes-command\nInstalling danielbachhuber/wp-find-unused-themes-command (dev-master)\nUpdating /home/vagrant/.wp-cli/packages/composer.json to require the package...\nUsing Composer to install the package...\n - Installing package\nSuccess: Package installed successfully.\nsalty-wordpress \u279c  .wp-cli  j wordpress-test\n/srv/www/wordpress-test.dev\nsalty-wordpress \u279c  wordpress-test.dev  wp find-unused-themes\nChecking http://wordpress-test.dev/ for unused themes...\nChecking http://wordpress-test.dev/foo/ for unused themes...\nChecking http://wordpress-test.dev/bar/ for unused themes...\nChecking http://wordpress-test.dev/testsite/ for unused themes...\n+----------------+---------+\n| name           | version |\n+----------------+---------+\n| apples         | 1.0.0   |\n| customizr      | 3.4.6   |\n| twentyeleven   | 2.2     |\n| twentyfourteen | 1.6     |\n| twentysixteen  | 1.0     |\n| twentythirteen | 1.5     |\n| twentytwelve   | 1.8     |\n+----------------+---------+\nFeel free to open an issue in the project repo if you have any specific questions about it.\n. > I have a bash script for installing Wordpress which used the 'wp db create' command.\n\nHowever while developing I'd get part way and have to rerun, which failed on the db create command as the table already existed.\n\nIn your bash script, instead of:\nwp db create\nuse:\nwp db create || true\nto continue execution if the command fails.\n. > if the db already exists from a failed install will not dropping it cause any issues with the 'wp core install' that follows the 'wp db create' command? Will it's contents simply be replaced?\nwp core install will error if core is already installed.\n\nOr would it make more sense to tie the continue execution command to the wp db drop command like\nwp db drop --yes || true\n\nIt depends on what your goals are with the script. If you want to fully reset the installation, then you can call wp db reset to always reset the database, and avoid the wp db drop and wp db create dance.\n. You're welcome! Glad you've gotten it figured out.\n. > Was there already a change for that? That's what I currently get:\nNope, this hasn't been fixed yet.\n. > It would be nice if we set a greater minimum width for the first column, such that the name doesn't get wrapped.\nPunting on this. It's solvable by using wp package browse --fields=name,version or similar.. > Saying \"This\" does not seem to be a WP install is not helpful because\n\nit doesn't attempt to answer what the program was considering \"This\"\nto be\n\nHm, I'm not sure this change is necessary. Can you provide a bit more background to your situation?\n. I imagine you learned this the hard way :(\n\nThe plugin doesn't seem to be built to accommodate multi-WXR imports - the wp-cli command adds that functionality.\n\nYeah. There's not much happening with the existing plugin right now either, as @rmccue is in the process of rewriting it: https://github.com/humanmade/WordPress-Importer\nWe could potentially solve this in WP-CLI, I think. Doing so would require a bit of technical discovery and test coverage.\n. I think it would be worthwhile to fix in WP-CLI, as I don't see the problem being fixed in the importer anytime soon, or the new importer getting to a release point.\n. > So the simplest solution might be to just concatenate all the files before passing them to the plugin.\nThis would defeat the purpose of parsing the files separately \u2014 memory consumption. Concatenating the files isn't the right approach.\n. > I doubt it'd be a huge memory risk if that array were grabbed at the end of the import, stored in an Import_Command property, and merged it into subsequent importers shortly after the importer is initialized.\nOh, this is an interesting idea. If it works, this seems like a reasonable approach to me.\n. WP-CLI only supports generating wp-config.php files for standard WordPress installations because it can reliably determine where wp-config.php is expected to be based on ABSPATH.\nWhen wp-config.php is expected to be outside of ABSPATH, WP-CLI can't know where it's expected to be placed.\n. This was fixed in #2458 and will be released in v0.23.0\nIf you need to use the fix before the release, you can update to the nightly with wp cli update --nightly\n. @markkimsal Can you add functional tests for this PR, please?\n. > I would have to refactor a lot of php_handle_col in the Search_Replace_Command class.\nSorry, I don't follow. Why would you need to refactor php_handle_col() to add a Behat functional test?\n. Thanks for the tests, @markkimsal \n. 39960263196ecff386ccc44f37afe3a211e80843 should take us down to one HTTP request instead of two\n. @wp-cli/committers I'd love a second pair of eyes on this if someone has a moment \u2014 and suggestions on how we can add test coverage around it.\n. > Looks good to me \u2013 anything in particular you'd like to get feedback on?\nMore of a sanity check than anything else. I'm trying to be deliberately conservative such that, even if there are bugs, it impacts a small number of users.\n\nRegarding tests, I'm not sure how you're gonna test this \u2013 it's full of side effects by definition. How do Composer guys test composer self-update?\n\nYeah, pretty much. I'll take a look at Composer.\n. Did a bit of outreach\n. @jacobischwartz Can you write functional tests for this change?\n. No worries. Let me know how the documentation treats you, and whether it could be improved in any way.\n. @jacobischwartz How are your tests coming along? Is there anything I can help with?\n. > I've added testing for this and it seems to be passing. Please let me know what you think!\nGreat job! I think the formatting change is causing the test to fail on Travis though. Can you change it back?\nAlso, left a few minor comments.\n. > But I can pipe through sed to strip the whitespace.\n@jacobischwartz Can you remove the use of sed? I don't think reformatting output is the right solution in this case.\nInstead, you can use a less precise output check: Then STDOUT should be: -> Then STDOUT should contain:\n. > The importer plugin itself fails to import menu items at all with either WP 3.7.11 (any PHP version) or PHP 7 (any WP version). I've created a scenario to demonstrate the failures, titled \"Export and import page and referencing menu item\". The failures predates my changes, I guess I'm just the first one to expose them with a test.\nWhomp. Want to open a core Trac ticket about this? It should probably be fixed.\n\nUnless we mark the failures as expected under the conditions noted above (I'd need help doing that).\n\nYep, you can add the following above \"Scenario:\"\n@less-than-php-7 @require-wp-4.0\nSee https://github.com/wp-cli/wp-cli/blob/4952290c9b6d14d938ac8f9fbf3f9439df83573b/features/core-update.feature#L197\n. @jacobischwartz Thanks for sticking it through!\nOne last follow-up: what can I do better improve the docs around contributing / writing tests?\n. > I don't know how common knowledge Behat is, but a really quick straightforward example on your page might have gotten me finished a lot quicker. It's not that it was an overly complex thing to learn (it was really quite easy once I read their introduction). It's one more thing for me to have to figure out, rather than just doing the work.\nMakes sense. I've done a first pass: http://wp-cli.org/docs/pull-requests/#functional-tests\n\nThe other thing I'd mention is that it'd be really useful to have a link to known issues from each command's page.\n\nOh, good suggestion. I've filed an issue for it: https://github.com/wp-cli/wp-cli/issues/2576\nThanks!\n. > community command not defined while calling from php\nHow are you loading the community command?\nIf you're not yet using wp package (ref), can you try installing wp super-cache with it and seeing if your error continues?\nYou'll need to wp cli update --nightly, then run wp package install wp-cli/wp-super-cache-cli\n. > here is my wp --info output by calling from php\nOh. The obvious problem is that the path to the packages directory isn't correct, and the path to your global config is missing.\nFor the first, WP_CLI uses the HOME environment variable to build the base path. I'm not sure whether that's present when using exec(). Can you explore?\nFor the second, I see your global config is a non-standard path. How are you setting that?\n\nand I get this when trying to uninstall the package\n\nSorry about that :( I've fixed the immediate problem with https://github.com/wp-cli/wp-super-cache-cli/commit/2fdbf1607a451c56cfbfb332b355d715701dd5d4\nI'm also improving the load process so bad packages don't break the uninstall procedure: #2555\nTo fix your problem right now, though, you'll need to delete /home/{user}/.wp-cli/packages/\n. Can you try require_once( dirname( __FILE__ ) . '/wp-config-hosting.php'); in your wp-config?\n. > However, would it make sense to you (in both technical and cost / benefit terms) if any require / include functions in wp-config.php respected the --path flag if the strings were were relative?\nNo. You should always use absolute paths when referring to files.\nFor instance, unless they've done some hacking to their web server config, a request to /wp-admin/ won't load wp-config-hosting.php with require_once('wp-config-hosting.php'); because wp-config-hosting.php doesn't exist in the /wp-admin/ directory.\n. Oops, good catch. Introduced in #1436\n. > wp plugin uninstall hello also has the same issue and no errors or messages are outputted.\nIf the plugin doesn't exist, you should see a warning:\nsalty-wordpress \u279c  wordpress-test.dev  wp plugin uninstall foo\nWarning: The 'foo' plugin could not be found.\nIf you aren't seeing any output, there may be a fatal occurring somewhere in the process. Are you suppressing errors at the command line?\n. > Does either of these commands require that the plugin has been previously installed and/or activated in order to uninstall or delete?\nNo.\n\nI imagine the WordPress installation process just dumps the plugin files/folders there which will allow them to display in the Plugins screen when in the WP Admin.\n\nThis is correct. Can you run wp plugin uninstall hello and share the full output though? I'd like to verify you're seeing some output after the command is executed.\n\nShows a 255 error without any messages.\n\nThis is intentional. wp plugin delete doesn't display an error message (which is inconsistent with wp plugin uninstall, I know).\n. Ok. I'm not sure what this problem is, but it seems to be specific to your system.\n\nThe only other thing I do after the wp core install is 'harden' the files and folders using these commands:\n\nFew more debugging questions:\n- Can you share which user and group own the files and directories?\n- Does uninstalling a plugin work through the WordPress admin?\n- Can you try creating a new WordPress install without performing the hardening step, and see if the issue persists?\n. > I have also noticed that if you don't deactivate a plugin before uninstalling, it seems to think it's still activated so when you try and re-install it, it thinks it's already installed. Not sure if this is an issue with WordPress or WP-CLI. Can you clarify?\nwp plugin delete deletes the files in place. If you use it when a plugin is already active, then the plugins_active option won't be updated to remove the plugin. See http://wp-cli.org/commands/plugin/delete/\nwp plugin uninstall won't uninstall the plugin unless the plugin has first been deactivated.\n. Sounds good. I'll get this fixed up shortly.\n. get_users() doesn't support display_name or user_email, see https://codex.wordpress.org/Function_Reference/get_users\nFrom the docs:\n[--<field>=<value>]\n  Control output by one or more arguments of get_users().\n. > It seems like during the install of the plugin, wp did not create the appropriate table in the sql DB.\nHuh. I tried this locally, and it appears to work for me.\nCan you roll back your database, try installing and activating from the WordPress admin, and see if the table gets created?\n. > I require the lines in wp-config.php for SSL termination, wp cli complains about them\n$_SERVER isn't populated in the CLI context. You'll need to check if the index is set:\nif ( isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] ) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')\n        $_SERVER['HTTPS']='on';\n. If you install WordPress through the browser, does it exhibit the same behavior?\nRelated https://github.com/wp-cli/wp-cli/issues/2168#issuecomment-150260737\n. The example you've provided seems to work fine for me:\nsalty-wordpress \u279c  wordpress-develop.dev  wp term create category 'Espa\u00f1a'\nSuccess: Created category 2.\nsalty-wordpress \u279c  wordpress-develop.dev  wp term list category\n+---------+------------------+---------------+---------------+-------------+--------+-------+\n| term_id | term_taxonomy_id | name          | slug          | description | parent | count |\n+---------+------------------+---------------+---------------+-------------+--------+-------+\n| 2       | 2                | Espa\u00f1a        | espana        |             | 0      | 0     |\n| 1       | 1                | Uncategorized | uncategorized |             | 0      | 1     |\n+---------+------------------+---------------+---------------+-------------+--------+-------+\nTo verify, this is a stock install of WordPress with all plugins disabled, a default theme in use, etc.?\n. Ok, this issue seems to be specific to Windows.\nWP-CLI doesn't fully support Windows. If you can track down the problem and provide a pull request, I'd be happy to consider it. Otherwise, this isn't something I'm going to spend time fixing.\n. > First of all, I wonder why you did not reuse composer create-project functionality.\nI didn't know about it (or rather, had forgotten about it). \n\nA possible solution might be to have a composer.lock file be generated upon scaffolding.\n\nIf our modification to composer.lock gets blown away though, we'll lose the custom package, right?\nDo you have much experience with repositories? I was thinking it might be possible to specify a repository of a local path, but it didn't seem to work in my testing when the path was already in the vendor directory.\n. > Composer will just assume that it already fetched the correct version, without scanning the repositories.\nIt would be nice if we could enable this behavior when the composer.lock file is missing too.\n. > is there any quick hack for this until full feature is merged?\nTo installing? Not that I'm aware of. But, you can always use the command with --require\n. @schlessera @wesm87 @haroldangenent Thanks folks, your guidance has been really helpful. I've gotten a reasonable implementation worked out in #3484\n. To be more specific, this is what I see when installing a package for the first time:\n```\nInstalling package runcommand/hook (dev-master)\nUpdating /Users/danielbachhuber/salty-wordpress/wp-cli/packages/composer.json to require the package...\nUsing Composer to install the package...\n\nLoading composer repositories with package information\nUpdating dependencies\nResolving dependencies through SAT\nDependency resolution completed in 0.077 seconds\nAnalyzed 3170 packages to resolve dependencies\nAnalyzed 72808 rules to resolve dependencies\n - Installing runcommand/hook (dev-master 1263610)\nWriting lock file\nGenerating autoload files\n\nSuccess: Package installed.\n```\nI wouldn't expect WP-CLI to have to analyze 3170 packages in order to install a package without a dependency.\n. > schlessera    [7:00 AM]  That could have multiple issues. One thing is that there's no caching the first time around, so all requirements are parsed, all packages are parsed, and the solver tries to find the best match.\n\nYou might also have issues with circular dependencies. So, packageA => wp-cli => packageB => packageA. Such circular dependencies can quickly cause the system to go over pretty much everything, as the dependency tree will expand exponentially.\n[7:01]  I also see that you're using dev-master. Typically, proper releases are much faster than commits.\nschlessera    [7:08 AM]  What does the composer.json look like for runcommand/hook?\nschlessera    [7:14 AM]  You're probably fetching this dev-master version from a git repository, I assume. The problem is that satis does not have direct access to the composer.json for a git repository. So, basically, it loads every single release of every single branch to look into the composer.json file to find out what the version of the release is. The git tags are meaningless to Composer, they are just arbitrary tags.\n[7:18]  Just a guess, did you try this:\n``` Downloads#\nWhen GitHub or BitBucket repositories are mirrored on your local satis, the build process will include the location of the downloads these platforms make available. This means that the repository and your setup depend on the availability of these services.\nAt the same time, this implies that all code which is hosted somewhere else (on another service or for example in Subversion) will not have downloads available and thus installations usually take a lot longer.\nTo enable your satis installation to create downloads for all (Git, Mercurial and Subversion) your packages, add the following to your satis.json:\n{\n    \"archive\": {\n        \"directory\": \"dist\",\n        \"format\": \"tar\",\n        \"prefix-url\": \"https://amazing.cdn.example.org\",\n        \"skip-dev\": true\n    }\n}\n```\n[7:19]  Did you look into the packages.json file on the satis side, to check what it pulls in?\ndanielbachhuber   [8:18 AM]  oh, huh\n[8:18]  @schlessera Satis is definitely not creating builds\nschlessera    [8:19 AM]  So it's always cycling through all repos and branches?\ndanielbachhuber   [8:20 AM]  I guess so? I wouldn't think Satis would need to if it's only installing one package\nschlessera    [8:22 AM]  The problem is that is has no information about the git repositories. A git repository named wordpress\\core with the branch named master and the tag 4.7.0 could in reality be some old Tetris game, according to the composer.json file. The git information is not really semantically relevant for Composer/Satis. That's why all releases of all branches are downloaded, and for each of them, the composer.json gets parsed to find out what that package is actually about.\n[8:22]  If you have proper release builds, the package information is directly available to Composer/Satis, which makes this much, much faster.\n. Given this will add a good number of infrastructure requirements, I've added this to the wish list\n. > I recommend having the WP-CLI packages be regrouped under a common Composer type\n\nDoes this have to be something package authors remember to do, or is it something we can enforce?\n. Cool. I think we need to do three things:\n- [x] Update the docs.\n- [x] Ensure wp scaffold package includes the type.\n- [x] Submit a bunch of PRs against packages in the package index.\n. \ud83d\udea2 \ud83d\udea2 \n. > Can someone explain why these fields are not available or give some guidance on how I might add support for them?\nI'm not sure the fields param actually works in API requests. Might be a bug introduced in the WordPress.org API.\n. HTTP POST with the default request args returns all fields for me.\narray (\n  'timeout' => 15,\n  'body' =>\n  array (\n    'action' => 'query_plugins',\n    'request' => 'O:8:\"stdClass\":4:{s:8:\"per_page\";i:10;s:6:\"search\";s:3:\"foo\";s:6:\"fields\";a:3:{i:0;s:4:\"name\";i:1;s:4:\"slug\";i:2;s:6:\"rating\";}s:6:\"locale\";s:5:\"en_US\";}',\n  ),\n)\n. I've created a Meta Trac ticket: https://meta.trac.wordpress.org/ticket/1637\n. :+1: Thanks!\n. Did you read the warnings?\n\nPHP Warning:  copy(/var/www/html/wordpress//wp-mail.php): failed to open stream: Permission denied in phar:///usr/local/bin/wp/php/commands/core.php on line 188\n\nWP-CLI doesn't have write permissions to the directory you're trying to install WordPress to.\n. > Feel like a noob now, but how do I fix that issue?\nYou'll need to spend a bit of time learning about system file permissions.\n. > WP-CLI is skipping important tables for domain changes with WordPress Multisite.\nSorry, just to clarify, do you mean with wp search-replace?\nIf so, wp search-replace gives you a few different ways to control which tables your search-replace operation is performed on (doc). I'm not quite sure of what you're actually proposing.\n. > Especially if you target a site with url=, it misses the important network-level tables (wp_blogs and wp_domain_mapping) for the search-and-replace operation.\nWell, right. wp search-replace's default behavior is to just operate against the current site's tables. Given this, you have two options:\n1. Use the --network flag to perform the operation across the entire network.\n2. Explicitly specify the tables you'd like to search-replace against as arguments.\n. This has since been implemented:\n\n. @GaryJones Thanks!\n. Does /srv/www/wordpress-develop exist? What's in it? How was it created originally?\n\nI have tried re-provisioning, vagrant destroy/vagrant up --provision - but the phpunit functions.php file is not being re-created.\n\nThis sounds like a problem with your provisioning system? Are you using a publicly-accessible Vagrant?\n\nI had this running yesterday and was running unit tests without issue.\n\nWhat did you do between then and now?\n. Thanks!\n. >  Please use the tilde operator or any other non-exact version.\nSorry about that. Changing in #2583\n\nI don't see any reason why wp-cli requires this exact version.\n\nNo particular reason.\n. > I've already made these modifications to my local install of wp-cli so I'd be happy to provide a PR.\nSure \u2014 pull requests welcome!\n. Oh, I totally forgot about CloudFlare. I think that'd do the trick.\n. Can you add functional tests for this change?\nAlso, there's two more templates needing to be updated:\n- bootstrap.mustache\n- test-sample.php\n. > Sorry if I'm missing something obvious but I don't see what would need updating in bootstrap.mustache or test-sample.php. Could you be more specific about what needs to be changed?\nThey have use of @package too, e.g. https://github.com/wp-cli/wp-cli/blob/master/templates/bootstrap.mustache#L5\n\nAs for the tests, it looks like I need to update the Scaffold a plugin scenario to check the main plugin file headers, since it's not doing that currently.\n\nYep.\n\nThat being the case, should I add checks for all of the headers, or just the updated ones (Plugin Name and @package)?\n\nJust updated is fine. You can do something like:\nWhen I run `cat plugin.php`\nThen STDOUT should contain:\n  \"\"\"\n  * @package My Plugin\n  \"\"\"\n. > I'll update those now and then push the changes up.\nLooking good! Just one more small nit.\n. > Just one more small nit.\nI can handle this in a follow-up\n. > I have privileges on it.\nCan you share all of the privileges you have?\n\nWhat reason would there be for access denied?\n\nWP-CLI runs a null command (;) so, for some reason, your user doesn't have permission to execute it.\n\nI created the wp-config.php file manually with same details and then used \"wp core install ...\" successfully.\n\nFYI - you can also use the --skip-check flag to skip the database check in wp core config.\n. These seem like they could be good community commands :)\n. Could you explain in greater detail your intent with this pull request?\n. Ok. You should enable Travis on your fork so you aren't dependent on the upstream project's limited number of builds.\n. I think this is probably out of scope, but thanks for the suggestion\n. Can you try running the command with the --skip-plugins flag?\n. Thanks for the report. \nJust for reference, here's what Python does:\n```\n\n\n\nprint 'foo';\nfoo\n```\n\n\n\nAnd here's what PHP does:\nphp > echo 'foo';\nfoo\nphp >\nAs such, I'd be open to changing our behavior.\n. Thanks for the detailed report, Frankie.\nWP-CLI's underlying implementation is to simply call update_option(). It doesn't have a higher-level understanding of the option being saved (expected format, what constitutes success vs failure, etc).\nWhen WP-CLI eventually wraps a Site REST endpoint, the latter can return a more helpful error code / message for WP-CLI to display. It doesn't make sense for WP-CLI to special case this option in the interim, though.\n. Wontfix, see https://github.com/wp-cli/wp-cli/pull/2604#issuecomment-203071408\n. Sorry, @shawnhooper but I'm not going to accept this pull request.\nI'm generally not a fan of trying to automatically correct user input. If you enter an invalid plugin name, you should get an error.\n. \n. Can you think of any negative repercussions of forcefully setting the time zone? It seems odd it should be causing an Exception in the first place\n. > WP-CLI already uses date_default_timezone_set in wp-settings-cli.php to override the system's default to UTC, so if anything it might make more sense to just move that into the bootstrap file and remove this instance.\nOk. I think we can just keep this localized change for now, and consider something more global should we need to in the future.\nThanks for digging into it!\n\nit seems to be the one of the few (maybe only) instances in Composer where TZ isn't passed to the DateTime constructor, so I'm not sure if it's an oversight or what.\n\nAh, good catch. Do you want the honor of opening an upstream ticket, or should I? Seemingly random Exceptions is a bug in my book :)\n. Sorry for the late reply, @ethanclevenger91.\nI was able to reproduce your situation, although I'm not 100% clear on the expected behavior. WP-CLI's current behavior is to look at the sizes stored in attachment metadata, and generate image files for the sizes where the file doesn't exist.\nI suppose we could also check the registered intermediate sizes too, but I'm not confident this wouldn't introduce unexpected behavior.\nThoughts?\n. Can you include --debug in your command and share the full output?\n. > The issue was with the xml file that was created through my IDE from the command line tools.\nI have no idea what this problem is, but I'm glad you figured it out :)\n. > That said, maybe the --export flag does scale, and its output should just be piped into another database.\nI think it scales \u2014 and if it doesn't, we should solve whatever performance problem arises. --export is meant just for this situation. Also, it won't cause a performance problem on the production site, as it's only performing read operations on the database.\n. @johnbillion How'd this turn out for you?\n. Why can't you just ignore the warning?\n. The point of wp core verify-checksums is to warn you when checksums differ than core's published manifest. I think it's expected behavior that the command does warn you when the files are missing.\n. Why can't you keep those files in place? There's no harm in doing so.\n. Composer powers the wp package commands, so we can't remove it as a dependency.\nCan you see if #2583 resolves the stability issue?\n. Keep in mind you'll need WP-CLI v0.23.0 for WordPress 4.5 compatibility, as v0.22.0 is incompatible with 4.5.\n. @borekb do you suggest any action at this point?\n. Oh, but tagging a v0.23.1 release won't actually fix the following problem until Composer tags a 1.0.0 release, right?\n\nYour commit for ~1.0.0-beta still blocks an update from 0.22 to 0.23 unless the\nminimum-stability is set to beta.\n. Thanks @wesm87 - I appreciate you taking the time to communicate all of the details.\n. Can you share how you installed Backup Buddy? Are you sure the plugin is active, and that the command is wp backupbuddy?\n. Can you share the full output of the installation script failure? WP-CLI is compatible with storing wp-config.php outside of the WordPress directory, so there might be some other issue at play\n. No worries, glad you've figured it out!\n. It's expected behavior. After all posts have been imported, the importer runs three backfill processes which can be time consuming and computationally expensive.\n. I'm open to a pull request. Let's call it wp term recount, given we already have comment recount\n. Can you make sure to include functional tests? http://wp-cli.org/docs/pull-requests/#functional-tests\n. Thanks :) and you can create a new features/term-recount.feature file for them \n. Thanks again for your work on this, @petenelson !\n. Can you share wp --info ? I thought I had disabled this behavior in #2439\n. :+1: \n. Thanks for the awesome report :) I have a pretty good sense of the issue, but not 100% sure of the source.\n\nDo you have any packages installed?\n. > Any idea on when this newer version will make it to the install url listed on this page.\nI don't have a date identified for the next release (v0.24.0), in which this fix will be included.\nYou can use wp cli update --nightly to use the latest nightly build in your development environment, though.\n. > If it was fixed can you please release it?\nv0.24.0 was released today\n. Potentially related\n- https://github.com/wp-cli/wp-cli/issues/2168#issuecomment-150260737\n- https://github.com/wp-cli/wp-cli/issues/858#issuecomment-36811681\n. > Is it possible to use WP-CLI and make it write the database with extended insert statements in the search-replace function?\nIt could be possible.\n\nOur database is about 80mb and has about 70,000 records and extended inserts make it 10x quicker.\n\nCan you share how you profiled the performance, and the specific benchmark numbers?\n. @Benno007 I'd still be interested to see your performance numbers on this, so we have it as a standard for comparison.\n. \ud83d\udea2 \n. wp-includes/class-wp-metadata-lazyloader.php is a new file included in WP 4.5 that doesn't seem present in your RC install. Can you try re-installing WP 4.5 RC 1?\n. I think this is a great candidate for a community package :) Want to put one together? \nHere's the full cookbook on creating standalone commands, including how to add one to the package index. Let me know if you end up with any questions after reviewing the documentation (and if there are improvements we could make to the documentation).\n. \ud83d\udea2 \ud83d\udea2 thanks!\n. > If an existing menu item already holds the position you specify, your new menu item will be placed after it.\nI think the behavior is that it's supposed to replace the item at the position, and bump the item currently at the position down one. Do you know if this is the behavior with other positions (I haven't tested)?\n. Here's the actual problem: https://core.trac.wordpress.org/ticket/28140\nWhen a menu item is originally created without a specified menu position, it's inserted with menu_order=>0 (the bug). It should be inserted with menu_order=>1. Because it's inserted with 0 though, position=>1 will always insert a subsequent menu item after this now magical item. And you can't pass position=>0 because wp_update_nav_menu_item() treats position=>0 as a magical argument which means \"last item in the stack\".\nI spent a little bit of time seeing if we could somehow fix this behavior within WP-CLI, with little success. This is best fixed in core itself, as it will eventually be needed for WP-API and #1784\n. This is on my radar, see #2585\n. @szepeviktor Know what this might be? I recall another thread reporting a similar problem, but my search foo is failing me.\n. > If I can consistently recreate the scenario, then I'll make sure it's repeatable before opening a new ticket.\nSounds good. I'm pretty sure this has come up in the past, so it would be good to have documentation around it at the very least.\n. Thanks!\n. > Is there a command in wp-cli that I can use to automatically install all the theme required pluggin when the theme is actiavted?\nThere isn't, per se, but you can hook into an existing WordPress action, switch_theme. Here's an example of how you might install the Jetpack plugin after activating the P2 theme: https://gist.github.com/danielbachhuber/cc8be5468d4a28a477f6d59620aeb405\n. > Since DB_HOST is either not defined, or is set to an intentionally bogus value, this means I cannot use the 'db cli' command.\nYou can set DB_HOST to the primary master if you want wp db cli to work. If the constant is undefined, then you'll see a PHP notice. I'm not sure what you gain by setting it to an intentionally bogus value.\n. I think this is a bug, actually. We shouldn't be trying to deactivate plugins that aren't active in the first place.\n. Can you share wp --info? \n. You'll need to update to WP-CLI v0.23.0, which includes compatibility with WordPress 4.5. Prior versions of WP-CLI are incompatible with WordPress 4.5.\n. See https://github.com/wp-cli/wp-cli/issues/2653#issuecomment-209363170\n. cc @szepeviktor \n. Great! Thanks for taking care of this so quickly.\n. > I'd like to be able to run commands against sites on a multisite network which are archived.\nI'm not sure I follow. Why can't you do this right now?\n. Can you share the contents of your wp-config.php file, minus any secrets?\nAnd, just to confirm, you've configured WP-CLI to use the appropriate PHP binary?\n. Per my Trac comment, I think we need a later filter than pre_option\n. See https://github.com/wp-cli/wp-cli/issues/2613#issuecomment-204196858 for how you can address this problem\n. > i do not find it logical to have to lower the level of stability\nWP-CLI v0.23.0 was released before Composer v1.0.0 was released. Given there's a workaround, and Composer is a secondary installation method to the Phar file, I don't see it necessary to release v0.23.1.\n. > Could you please tag a 0.23.1 with this fix\nSure, I will try to do so this week.\n. v0.23.1 is released http://wp-cli.org/blog/version-0.23.1.html\n. Thanks for the pull request! Can you please add functional tests?\n. Closing in favor of #2674\n. You're welcome :) Happy to help\n. See http://wp-cli.org/commands/term/meta/\n. Dang. Given this changeset has already been out for a couple of releases, and Travis uses PHP 5.3.29, I think we may need to just bump the minimum supported PHP version. How would you feel about that?\n. > In the short term is there a reason why I shouldn't locally downgrade the symfony components to ~2.3?\nThere shouldn't be, no.\n. Thanks for the bug report. Can you provide the command you were running when the error occurred?\n. \ud83d\udd28 \n. Hi @kristn,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support\n. I hate to say this to you, but this is a Windows-specific issue. Your use case works as expected on Ubuntu:\nwp rewrite structure '%category%/%postname%/'\nSuccess: Rewrite structure set.\n$ wp option get permalink_structure\n/%category%/%postname%/\n$ wp option get permalink_structure\n$ wp rewrite structure '/%category%/%postname%/'\nSuccess: Rewrite structure set.\n$ wp option get permalink_structure\n/%category%/%postname%/\nWindows isn't fully supported by WP-CLI for a couple of reasons:\n- I personally have no way of debugging Windows-specific issues, and no one has stepped to maintain Windows compatibility.\n- Travis CI (and other CI providers) don't support running tests on Windows, so we have no way of running the entire test suite on Windows. \n. No worries \u2014 glad you've figured it out!\n. > Is it possible to run certain command without database connection?\nSome commands do run without needing a functioning WordPress install. wp core language * requires a functioning WordPress install, though.\n. I'm curious why this hasn't been a problem yet. Can you share how you came across it?\n. As it turns out, we do already define DOING_CRON: https://github.com/wp-cli/wp-cli/blob/master/php/commands/cron.php#L227-L229\n. > It should be moved to an earlier position before loading the plugins.\nOk. I'd be amenable to this change.\n. Can you please share more details? In particular, it'd be useful to know which version of WordPress you're running, whether it's a multisite install, whether other commands work as expected, etc.\n. Ok. Thanks for the details. I suspect add_user_to_blog() isn't available on non-multisite, so we'll need to revisit that logic.\n. @tersmitten I'm not able to reproduce the issue with these test steps :(\n```\nScenario: Update role of an existing WordPress user\n  Given a WP install\n  And a users.csv file:\n    \"\"\"\n    user_login,user_email,display_name,role\n    bobjones,bobjones@example.com,Bob Jones,contributor\n    \"\"\"\nWhen I run wp user create bobjones bobjones@example.com --display_name=\"Robert Jones\" --role=administrator\n  Then STDOUT should not be empty\nWhen I run wp user import-csv users.csv\n  Then STDOUT should not be empty\nWhen I run wp user list --format=count\n  Then STDOUT should be:\n    \"\"\"\n    2\n    \"\"\"\nWhen I run wp user get bobjones --fields=user_login,display_name,user_email,roles --format=json\n  Then STDOUT should be JSON containing:\n    \"\"\"\n    {\n      \"user_login\":\"bobjones\",\n      \"display_name\":\"Robert Jones\",\n      \"user_email\":\"bobjones@example.com\",\n      \"roles\":\"contributor\"\n    }\n    \"\"\"\n```\nadd_user_to_blog() isn't available on multisite, so that truly is the problem, but I don't know why the existing user isn't included in $blog_users\n. Glad you figured it out \ud83d\udc4d \n. > Would it be worth keeping this open? There were a couple prior of previous issues where wp doesn't output anything if there's a problem with the install.\nGiven the problem is ultimately a fatal error, it's not a problem we can fix in WP-CLI.\n\nI think if it could output the problem it ran into, that'd be super useful for debugging.\n\nYep, see cb91089ee2fd62e2e87accf50221fbebad04671d (added to http://wp-cli.org/docs/bug-reports/)\n. Hi @ymazuz,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. See https://github.com/wp-cli/scaffold-package-command :)\n. Duplicate of #1816\n. Thanks for the heads up.\nUsing @synopsis is no longer recommended (#1969), so I think we'll just leave things as they are.\n. Duplicate of #1978\n. > I see several packages on the package index website that can not be installed\nWhere do you see these listed? They aren't valid package names...\n. Packages need to be listed in the package index in order to be installed with wp package install.\n. Interesting use case.\nIt is possible to create an export with the blog's tables, like you've mentioned, but it's not easily possible to conditionally include data out of wp_blogs and other tables. Most of the challenge is knowing exactly what data should be included. You could probably create a definition for core but, because plugins and themes can add data in arbitrary locations, it's impossible to ensure you're getting all of the data.\n\nRight now I am exporting the tables from staging to the production site but that doesn't take into account the site information in the wp_blogs table and others.\n\nDo you have a good sense of what this data actually needs to be? Or, another way to look at it, what problems have you run into with missing data?\n. > We've tried to identify exactly which tables are affected and what data needs to be included and came up with a script that was pretty close. (I can include the whole thing if you're interested) but missed something somewhere in the serialisation. The result was that one of the sites in a multisite of 45 sites became unresponsive.\nYeah \u2014 it makes sense to me that it would be imperfect. \nI don't think this is a problem WP-CLI itself can solve at this point. Ultimately, the solution is to create a PHP-representation of the application data, such that it's much easier to select just the data you need, and move that data between environments. This is part of the impetuous for the wp-rest-cli project.\nHowever, it's still a fair distance from here to there. If I were in your shoes and needed to make the data sync on a repeated basis, I would potentially write a PHP script to dump and import just the data I needed, instead of all of the tables. This way, you whitelist what you need, and avoid inheriting assumptions of data you don't need.\n. I verified this change locally.\n. > When I run wp plugin install \"\" (need the quoted empty string), I end up installing the first result of \n\nwp plugin search \"\" which not long ago had super-emoji-plus.\n\nThis seems problematic :) Do you think we should fix it?\n. > But regardless of that. I believe that wp-cli has incorrect behavior. It should not install some random, unknown plugin, regardless of how it gets called.\nI agree. We'll get this fixed.\n. I think this may be fixed with #1981.\nCan you wp cli update --nightly and see if the issue still persists? And, just to confirm, you've added the apache_mods declaration to your wp-cli.yml? \n. > Will give this a whirl, I was trying to avoid using a yml if possible but will test later today.\nOk, this is your problem then. Per the docs, you'll need to create a wp-cli.yml file and include:\napache_modules:\n  - mod_rewrite\n\nI can see there is no flag for apache mods according to http://wp-cli.org/config/ is there a reason for that? \n\nIt's not necessary, because we have the configuration file declaration.\n. Yep, that's a bug :(\n. I don't know that I'd consider this a bug, but it's a use case we can accommodate by adapting the WP_CLI\\Formatter class.\n. > I've noticed that when passing content using --post_content argument and the content contains new lines, the text after the new lines is ignored.\nCan you share an example so I can see if I reproduce? And, just to confirm, you're aware that wp post content - (where the first argument is a dash) will read post_content from STDIN?\n. The problem with your script is that the newlines are passed to $cmd literally, meaning the shell interprets them as new commands. You'll need to quote $content_esc and escape newlines in order to use it with the command.\n. > escapeshellarg was supposed to do that, right?\nThe docs don't say anything about handling newlines.\n. @ernilambar Can you add a test please, to verify the functionality now works as expected with two digit numbers?\n. > When we do wp create comment comment ID is generated automatically and it starts with 1 in a scenario, I guess. Loop till 10 times? :D\nSure. You can use wp comment generate --count=10 to create your first 10, and then use wp comment create --porcelain to create the last one to get the ID.\n. @ernilambar Good work on the tests \u2014 just one small question if everything passes.\n. \ud83d\udc4d \n. @aaemnnosttv @schlessera Have either of you run into this before on a standard Composer project? Suggestions as to how we could solve?\n. > You would first need to find out whether the changes in that git repository are something you did manually (in which case this error should stay as is), or whether the changes were somehow introduced by WP-CLI intself during an install/update process.\nHuh. We could potentially run git stash and git stash pop in the affected directory.\n. Calling this wontfix. I don't think there's a reasonable automatic solution we can employ.\n. I think users_can_register must've been unset when you ran wp option get the first time. The commands work as expected for me:\nsalty-wordpress \u279c  wordpress-develop.dev  wp option get users_can_register\n0\nsalty-wordpress \u279c  wordpress-develop.dev  echo $?\n0\nsalty-wordpress \u279c  wordpress-develop.dev  wp option get invalid_option\nsalty-wordpress \u279c  wordpress-develop.dev  echo $?\n1\n. > Why would wp option get unset a value?\nIt wouldn't, but something else in your codebase may.\n. > I should test with a clean WordPress install.\nYes, please do.\n. @warrenseine Were you able to work this out?\n. > The wp-config is correctly changed but I can't see any changes in the .htaccess file.\nYou'll need to modify the .htaccess file manually. WordPress doesn't generate a .htaccess file for multisite.\n. Is the plugin active on the subsite?\n. > Wow. Thanks buddy :)\nNo problem :) Sometimes all you need is a sanity check.\n. > When using wp search-replace, how do I specify the db I want to operate on?\nwp search-replace uses the value of DB_NAME defined in your wp-config.php\n. > Do you mean I need to run the command in the directory containing the wp-config I want to reference?\nCorrect.\n. > I propose this detail as a future addition to the docs.\nI'm not quite sure how it makes sense for the wp search-replace docs, given this is applicable to every WP-CLI command. See config docs for more details on global parameters.\n. I don't think this makes sense as an addition to WP-CLI, but you're welcome to write your own command for this need.\n. See http://wp-cli.org/#complete\n. You can use wp post list --post__in=1 --field=url to get the URL of a specific post.\nSee also #2070\n. > What about attachment / image thumbnail url?\nThis is more difficult to fetch, because the data is stored in post meta and then constructed on the fly.\nIf you wp package install danielbachhuber/wp-rest-cli && wp plugin install rest-api --activate, then you can use the REST API implementation:\nsalty-wordpress \u279c  wordpress-develop.dev  wp rest attachment get 111 --field=source_url\nhttp://wordpress-develop.dev/wp-content/uploads/2016/05/codeispoetry-1.png\n. Duplicate of #2627\n. You should use wp cron event run: http://wp-cli.org/commands/cron/event/run/\nThere will be a --due-now flag in the next release which means it will only run due events (instead of all with the --all flag).\n. > Then function name is stargazer_parent_theme_enqueue_styles. May be it could be hello_enqueue_styles. To be more safe, hello_stargazer_enqueue_styles?\nHave you actually run into a problem with this?\n\nAlso, when hello-world is passed as slug of child theme Theme Name: could be Hello World, Currently it is Hello-world.\n\nDon't we already have a --theme_name argument? \n\nAlso I noticed that only two features tests scenarios are there. It would be nice if we add few more.\n\nSure, more tests are always welcome :)\n. > Yes, but when that parameter is not passed, theme name is generated automatically. Its just issue of making our command more intelligent I guess.\nI think there are a number of cases where the automatically-generated name would be non-sensical. I think it's better to keep the current behavior \u2014 the slug is easy enough to change.\n\nI will try my hand in more testing. :)\n\nSounds good.\n. > It'd be cool to define commands in the yaml config file that are run before and or after any WP CLI commands.\nYou can do this in v0.24.0-alpha #2647. Here's an example:\nWP_CLI::add_hook( 'after_invoke:site empty', function(){\n    global $wpdb;\n    foreach( array( 'p2p', 'p2pmeta' ) as $table ) {\n        $table = $wpdb->$table;\n        $wpdb->query( \"TRUNCATE $table\" );\n    }\n});\nIf you don't want to commit that to your project, you can include it at runtime by putting it in a file, and running wp --require=file.php site empty\n. > The .travis.yml uses the versions defined in the readme when generating a the plugin scaffold. WP 3.4 was released in 2012 and 3.5 in 2013 so it would be good to test with the latest versions.\nCan you update the functional tests to reflect your changes?\n. > Sorry, I am not sure what you mean by \"functional tests\"?\nSee http://wp-cli.org/docs/pull-requests/#functional-tests\n. It must've been copy-pasta from wp taxonomy or similar.\n. Build is being fixed in #2737\n. > Is there any way I can disable this prompt? Something like --answer=yes.\nIt's not, no.\nInstead, you could move your object-cache.php drop-in to something like apc-cache.php, and then conditionally load the file in object-cache.php:\n```\n<?php\nif ( ! ( defined( 'WP_CLI' ) && WP_CLI ) ) {\n    require_once dirname( FILE ) . '/apc-cache.php';\n}\n```\nHowever, I can't recommend using WP-CLI with APC cache enabled because you're likely to run into cache corruption bugs, like the error message suggests.\n. > How I'm supposed to tell wp-cli to register the package I'm writing, so I can call it from the terminal?\nYou can use a wp-cli.yml or config.yml file to --require=<path-to-file>, see http://wp-cli.org/config/\nFor instance, if you're developing your command as a standalone project, you could include a wp-cli.yml file in the project root:\nrequire:\n  - command.php\nAlternatively, to be able to use your command from anywhere, you'd want to configure a global config.yml with a similar require statement, but using the full path to your command loader.\nIf you have suggestions on how to improve the Commands Cookbook, pull requests are more than welcome\n. Is this code in a public repo where I can look at it?\nOr, can you share more details on how you've changed the scaffolding, so I can better understand your project structure?\n. > wp wpml outputs Error: 'wpml' is not a registered wp command. See 'wp help'.\nIt appears you're only registering wpml list: https://github.com/sciamannikoo/otgs-wp-cli/blob/master/wpml/command.php#L28\n. > Also, I take for granted (but I might be wrong) that if I can make it work with the --require argument, it should work the same without it.\nOh, I think there's a bit of confusion here. If you don't include --require, then the code isn't loaded (and the command isn't run).\n. > At this point, does it matter if I have or not the yml file, when using --require=?\nNo, --require will be used to load a file any time you supply the argument.\n. > Ran wp-cli to check after the patch, and wp-cli insists that the site is using WP core 3.5.1.\nWP-CLI doesn't produce this output. This seems to be coming from WP Scan.\n. \ud83d\udc4d \n. In your project, can you try adding:\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n    add_filter( 'query_vars', function( $vars ) {\n        $vars[] = 'msr-content-type';\n        return $vars;\n    });\n}\nIf it works, I think it would be a more appropriate appropriate approach. I don't think WP-CLI magically supporting querying by a private taxonomy is expected behavior.\n. > While your goal to be a-commercial is noble, it has often seemed to me that some form of commercialisation is desirable for you, for WP-CLI users, and for the project. So I wonder why you are so against it?\nJust so I'm clear, it's really about comfort-level.\nAt this point, I don't personally feel comfortable directly financially benefiting from the codebase on https://github.com/wp-cli/wp-cli. I also don't feel comfortable profiting from the WP-CLI brand / trademark, because I don't feel like it's mine to profit from.\nWith that being said, I do feel perfectly fine charging someone to write a WP-CLI command for their data migration, etc.\n\nI would point to Laravel and Taylor Otwell's businesses as a great example of how this can all fit together. Laravel is very open source, has a great community, and is in itself essentially a-commercial, but Taylor and other key players in the Laravel space have built up a load of services around Laravel that make use of it but that are commercial (Forge, Envoyer, Laracasts and, more recently, Spark).\n\nGood example, thanks.\nBecause I didn't mention it in the original issue, it's worth noting I do have an early-stage WP-CLI-based commercial venture in the works. However, because I'm giving code away for free, the business model seems like it's going to be enterprise-level support to begin with, and we'll see if that can lead to a sustainable business. It's going to be a long way from here to there.\n. > Then you shouldn't feel bad (or at least less bad) to take that money because it's basically money that was made possible in the first place partly thanks to this code. And it's money that would be set aside for the purpose of maintaining this project.\n@xdamman What examples have you seen so far for equitable uses of that money? I don't have any concerns about WP-CLI's ability to raise money; I'm most concerned that any money raised on behalf of WP-CLI is used equitably.\n\nHaving some form of organisation in place to protect the long term development of the project is a separate issue. I think the WordPress/Ghost non-profit structure seems to work well. Setting up and running an org like that would be a time suck though, so you would need to be sure the WP-CLI project justifies it.\n\n@gilbitron Maybe I'm making a mountain out of a molehill? Do you think WP-CLI needs formal representation with an organization?\n. > I'm not saying WP-CLI doesn't need formal representation with an organization (I think it's a good idea), maybe just not yet? I'm just playing devil's advocate and wondering if an org would be more of a distraction than a benefit at this point.\nThat's a totally fair point.\nTo be honest, I don't actually think WP-CLI needs formal representation at this current moment, but it would be nice to have six months from now. Given I'm starting a related for-profit venture, one reason I bring it up now is that I'd like to make sure there's a clear line between WP-CLI and runcommand, and that WP-CLI lives on regardless of whatever happens to runcommand.\n. > You make a good point there, is there an option to get WP-CLI into the core? That sounds like the best option to me off course, or is that unrealistic?\nIn an ideal world, this (the WordPress Foundation being a legal protector of related open source projects) makes total sense to me.\nGiven the WordPress Foundation's current governance structure and operating style though, I'd unfortunately be strongly against the idea at this point.\n. > Besides that there is an other big job to be done in such an organisation: marketing. I think we need to improve on this side so that everyone knows what WP-CLI is, why they should use it and how they can contribute. We could hire someone to do some design work (fancy cheat sheet, presentation), maybe even make a real logo.\nOn a related note, I would love, love, love to:\n1. See volunteers regularly contributing to documentation / marketing efforts\n2. Be able to hire someone to do a proper design for the website.\n. Just to keep everyone here in the loop, @andreascreten and I had a Google Hangout today to chat on this topic.\nI gave Andreas a bit of background for why I started the Github issue thread. Primarily, I'm concerned about my own bus factor when it comes to the long-term sustainability of WP-CLI, and think it wise to start taking steps to proactively solve the bus factor of me.\nI also talked Andreas through what I've been doing the last few months to try to increase the number of contributions to WP-CLI. Specifically, fleshing out the documentation portal, and identifying \"low hanging fruit\" issues in the backlog. I've seen an increase in drive-by contributions (e.g. someone has an hour free and picks up an issue) but haven't yet see a noticeable increase in regular (e.g. weekly) contributors.\nWe came to the conclusion that creating a formal organization is too much effort at this time. Instead, we want to form an advisory committee of ~5 or so to provide a sounding board for the long-term sustainability of WP-CLI. Our more immediate action item is to identify those who we'd want in this advisory board, and draft an invitation letter.\nAndreas may also visit Vienna on Thursday, June 23rd so we can meet in person.\n. For those following this thread who missed the tweet, I posted an update to the blog earlier today: http://wp-cli.org/blog/future-wp-cli.html\n. > Have you considered the more lightweight option of becoming a member project of a \"fiscal sponsor\", an umbrella nonprofit that would take care of the paperwork/admin complexity, such as the Software Freedom Conservancy?\nI've considered it briefly but haven't researched it much. If we were to go down some formal route, I'd certainly explore this option at depth to see if there is a likeminded / compatible organization.\n\nHope at least some of this is helpful!\n\nVery much! I'll digest this at depth when I have some time, and as our efforts evolve. Thanks!\n. Thanks to everyone who took the time to weigh in on this.\nAt this point, my priority is to increase the size and involvement of the contributor base. Once I feel more comfortable with where it's at (maybe 6-12 months from now), I'm going to reopen the idea of a more formal organization / financing the hard work involved with maintenance.\n. > Because it's loaded by wp-settings.php, it doesn't incur an immediate incompatibility problem.\nAs it turns out, the introduction of Requests does break WP-CLI: https://travis-ci.org/wp-cli/wp-cli/jobs/130013158\ncc @rmccue @dd32 for thoughts on how we should address this, given WP-CLI can load Requests before WordPress, and thus would fatal in certain situations.\n. > WP already checks if Requests is loaded before trying to load it;\nAh, I had assumed it wasn't my bad.\n\nlooks like the fatals there are for WP_HTTP_Requests_Response missing, which a new file loaded in wp-settings.php?\n\nYep, easier to fix :)\nRelated #2278\n. This might have a negative performance impact on sites with millions of rows. Can you do some performance profiling, and share the results?\n. > This might have a negative performance impact on sites with millions of rows.\nMeaning, you're essentially reading the entire table into memory before writing it out.\nInstead, I think we'd need to do chunked insert statements if we want to break them apart. Sequel Pro does this based on data size:\n\nWe could do based on data size (--export_chunk_size=<size-kb>), or based on # of rows.\nLastly, you'll need to include some updated functional tests reflecting these changes. If you introduced a chunk size flag, then it would be easier to test, as you could set it to a small chunk size in the test and only need to generate a limited size of mock data.\n. > I didn\u2019t test with millions of rows, but this already seems good.\nYep, this does look like a substantial improvement. Thanks for sticking with it :)\n\nI think next I could implement the chunk size flag and find out what is the best default value. After that I think this starts to look good?\n\nI'm not actually convinced we need a chunk size option. Splitting based on number of rows seems like it could be a good first version. What do you think?\nAlso, can you fix the failing tests on 3.7?\n. > I'll check out the failing tests tomorrow.\nIf you merge master, that will address the failing trunk build\n. > Have you experienced this before?\nGiven the context, it appears your code is incompatible in some form with PHP 5.3\n. > Everything done now? :)\nLeft some comments.\n. > I think it is quite straightforward now. Added some comments though to clarify the logic.\nLooks good \ud83d\udc4d Thanks for your time on this!\n. \ud83d\udea2 \n. > Here are some errors I get following setup instructions on the docs site:\nThanks for flagging them. Having someone else notice them motivated me to finally fix them up :)\n\n/blog and /package-index don't work for me locally, but everything else seems fine.\n\n/blog is built with the ./vendor/bin/phake command. Did you try running that?\n/package-index is built separately and served by https://github.com/wp-cli/package-index https://github.com/wp-cli/wp-cli.github.com/commit/deaee41cbcee9a06e9bb38e19af4c4a27472299f\n. Huh. I can't reproduce that issue locally.\nI'll take another look as a part of #2768\n. > $runtime_config is undefined at all times.\nI suspect this means wp --config=config.yml is broken, and has been for some time :(\n. > I suspect this means wp --config=config.yml is broken, and has been for some time :(\nYep, it's been broken since 7a1499e0a3683f9d51dc18d73d8b087685a9e318 (v0.13.0)\n. > I will make time and challenge to fix it.\nWe don't actually need to fix it, as it's a deprecated feature. But, we do need to remove reference to it from elsewhere.\n. Build fails on trunk because of #2744\n. Build fails on trunk because of #2744\n. Duplicate of #2627\n. Nightly build is still at 37435, which is why the build fails. Everything works as expected for me locally though.\n. @westonruter @jonathanbardo Do you recall why you originally used passthru() instead of ssh2_connect() and its corresponding library?\n. Thanks guys. I think I'll end up going with passthru() because it will be easier to reuse the user's SSH config details.\n. Debating whether we need to support port in some fashion. I'm inclined to have users define the port in their SSH config if it's non-standard.\n. @westonruter @jonathanbardo Would you mind testing out the current implementation when you have a moment, and let me know what you think? Specifically, I'm looking for feedback on the implementation, and any additional features you think it needs.\n. > would you give this PR a try and provide feedback?\nJust to clarify, the code has already landed on master. If you're using the Phar install, you can wp cli update --nightly to try it out.\n. > Only thing I noticed is that wp is hardcoded here\nThat was intentional, although I could be convinced otherwise.\n\nThe hook you implemented probably solves the issue I had wanting to use a different php command for wp-cli. Just not the part where you would want to use a different path to the command.\n\nWell, my thinking is that you could create a just-in-time alias to a different path, if WP-CLI wasn't available as wp. Even though there is a workaround, it's somewhat intentional not to permit an arbitrary executable (e.g. it's a design decision that --ssh should only be used to execute WP-CLI).\nWhat do you think about my explanation?\n. > Debating whether we need to support port in some fashion. I'm inclined to have users define the port in their SSH config if it's non-standard.\nI figured out a syntax for us to support port:\n192.168.50.10:2222:/srv/www/wordpress-develop.dev/src\nIf the port isn't specified, then 22 is assumed:\n192.168.50.10:/srv/www/wordpress-develop.dev/src\n. > Since it's a standard URL format, it should be parseable with PHP's parse_url().\nI agree, I'll update.\n. Actually, parse_url() isn't quite compatible with using a SSH config like v. If we use regex instead, we could support a similar syntax to standard URL format:\n@prod:\n  ssh: rc~/webapps/production\n@dev:\n  ssh: v/srv/www/runcommand.dev\n@wpdev:\n  ssh: v:2222/srv/www/wordpress-develop.dev/src\n. Feeling pretty good with this now as a v1. I'll handle website documentation as a part of #2767\n. @toleabivol You'll need to set a SSH config with the identity file reference.\n. > I'm not sure I see the difference between wp --ssh=x ... and ssh x -c 'wp ...'? Seems a little bit like reinventing stuff just for the sake of it to me.\nThis PR is the first part of #2039. Think wp @all core update\nThere's not much difference between wp core download and wget https://wordpress.org/latest.zip... except for the differences there are, and they are quite useful.\n. Hi @tddamith,\nGithub issues aren't an appropriate venue for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. Please review http://wp-cli.org/#support. > What are the installation requirements? WP version? PHP version?\nLeft a comment on the PR with the reqs.\n\nFor the Support section, did you have in mind the content on the Bug Reports page from the docs site?\n\nI don't have a strong preference at this point. #2766 might provide some inspiration\n. > What about a section for the installation guide just after Wondering what to do next? that goes something like this:\nLooks good to me! Want to submit a pull request with the change?\n\nAlso, am I correct in assuming that the eventual change to incorporate this would have to be made on the wp-cli.github.com repo?\n\nYes, although the homepage is automatically generated from the README.md, so updating is just a matter of running a script.\n. \ud83d\udea2 \n. Yep, I think it'd be useful.\n. @kkoppenhaver Make any progress with this?\n. Looks pretty good, @kkoppenhaver. Thanks!\nIf you're thinking about re-recording parts, here are a few bits of feedback:\n- In the installation process, it would be helpful to explain what each step is (what a Phar file is, what it means to mark a file as executable, or move it on your path).\n- Might be helpful to have an introduction at the beginning of the video with an outline of the steps to be covered in the video.\n- When showing a command being executed, it might be helpful to include a 10 second slide with an overview of the command.\n- Generally, it's a bit difficult to read the text on the screen. The text would be more legible if you could zoom in on the relevant part of the screen.\n. Punting on this because it hasn't seen enough momentum to get over the finish line.\n. > How do you feel about animated .gif files for the images on that page?\nI was actually thinking of short animated GIFs for depicting WP-CLI commands the other day. I really like the idea, and think it would work well as long as they're a consistent style and not too large.\n. @NateWr Top notch! I've left a first round of comments.\n. > Ok, updated according to your comments. All pretty straightforward except take a look at the language under Support and the second demonstration of a command under Using.\nLooking really good! Just a few more nitpick comments and then I think it's good to \ud83d\udea2 \n. @NateWr Looks great! Thanks for your work on this.\n. This issue could pair nicely with https://github.com/wp-cli/scaffold-package-command/issues/6\nMeaning, we should reuse some of the language in the CONTRIBUTING.md we create here for wp scaffold package-readme\n. > First draft. Any feedback more than welcome.\nMind putting this into a Google Doc so we can more easily have a conversation around the text?\n. > Good thoughts on the opening paragraph. Accepted the suggestions.\nCool. I'll do another more thorough pass when I have the time in the near future.\n. @kkoppenhaver As it turns out, I have opinions about how this was written :) My edits ended up being quite extensive, so I just went ahead and published them: http://wp-cli.org/docs/contributing/\nI appreciate your time on this though. I think we could still use a section on \"Improving our documentation\", written in a similar format. Up for taking care of that?\n. > Is there a separate issue for discussion of that or are we just keeping that here?\nHere works fine for me.\n. @kkoppenhaver Looks pretty good! Want to submit a PR?\n. > I'm assuming you want it on the contributing page? https://wp-cli.org/docs/contributing/\nNot quite. docs/contributing/ is built from CONTRIBUTING.md\n. \ud83d\udea2 \ud83d\udea2 \ud83d\udea2 \n. > I intend to start working on a Pull Request for the issue this weekend.\nGreat! Feel free to clean up command.php as you see fit (creating a dedicated class, etc.). We could have a wp website-generate command with accepts 'homepage', 'contributing', 'commands', 'internal-apis', etc. or --all\n. @bordoni Still planning to work on this? It would be nice to have done in the next couple of days.\n. @bordoni Where'd you end up with this? Can you push the code you have if it's usable? I'd like to wrap this up in the next couple of weeks.\n. > Current status:\n@ernilambar Just a heads up that the descriptions for the commands need a refresh too, as a part of this issue.\n. @miya0001 Or we could just set up a remote server used for CI, and encrypt the connection details.\n. Adding this to the wish list for now http://wp-cli.org/docs/wish-list/. > I thought that people might want to see error for this command.\n\nHow do you like that?\n\nYep, that'd be great!\n. @jacobischwartz Can you share wp --info ?\n. You'll need to wp cli update --nightly if you want to use WP-CLI against trunk.\nThe compatibility fix for WP 4.6 (#2753) hasn't been included in a major release yet.\n. > Could we use this private (non-WP.org) salt generator?\nWhy?\n. Ok. I don't think it's worth introducing this, as it's not a concern for most users. If it's a concern for you, there's a --skip-salts flag so you can inject your own.\n. What do you think the expected behavior is?\n. > It should detect that that it's just an empty directory. \n\nIt should detect that it's not a valid theme if there are no mandatory theme files inside.\n\nWhat does WordPress core do with an empty theme directory?\n. > I mean that the myth directory is empty.\nRight. What does the WordPress admin do? WP-CLI should exhibit the same behavior as the admin.\n. Ok. We can add some logic to verify the theme is valid before listing it or permitting it to be activated.\n. > This will land in 0.24.0?\nYes\n\nIf so, when is the release date? \n\nI haven't picked a release date yet.\n\nCan I try it now?\n\nSure, wp cli update --nightly\n. In #2821, I'm changing the behavior of wp theme status to error if the theme is erred.\nIn the WordPress admin, if there's an empty directory where a complete theme is expected, the admin indicates the theme is installed:\n\nAs such, the behavior of wp theme is-installed and wp theme install is consistent with the WordPress admin.\nBeyond #2821, I don't believe any further changes are necessary. Can you confirm?\n. > Forcing the install of the theme should be successful. So I could override broken theme as Wordpress admin says. This currently doesn't work.\nIt seems to work for me (6c44f2703a09e9507634ac8b020f715fe56855ba):\nsalty-wordpress \u279c  wordpress-develop.dev  wp theme delete myth\nSuccess: Deleted 'myth' theme.\nsalty-wordpress \u279c  wordpress-develop.dev  mkdir src/wp-content/themes/myth\nsalty-wordpress \u279c  wordpress-develop.dev  wp theme install myth --force\nInstalling Myth (1.0.3)\nDownloading install package from https://downloads.wordpress.org/theme/myth.1.0.3.zip...\nUsing cached file '/home/vagrant/.wp-cli/cache/theme/myth-1.0.3.zip'...\nUnpacking the package...\nInstalling the theme...\nRemoving the old version of the theme...\nTheme updated successfully.\nAre you sure you included the --force flag? And, are you sure your shell user can actually delete the directory?\n. > When there is error, I have displayed same error send from WP. What do you say about this? Do you suggest custom error message?\nThe default error seems fine.\n\nIf PR is good then I will add some tests scenario.\n\n\ud83d\udc4d \n. @ernilambar In the future, can you please merge instead of rebase? Thanks\n. > Is that parameter name correct? I also tried --format=json but same error.\nThe docs for the command need to be updated to [--format=<format>] instead of [--json]\n. As I said, the docs for the command will need to be changed from [--json] to [--format=<format>]\nWP-CLI parses accepted arguments from the command's PHPDoc. Because [--format=<format>] isn't specified in the PHPDoc, WP-CLI errors about the invalid parameter before the command is called.\n. See https://github.com/runcommand/one-time-login\nBecause WP-CLI isn't executed in web requests, the feature needs to be a plugin that's activated by WordPress.\n. @IAmJulianAcosta Take a look at the Commands Cookbook for details on how to write your own command.\nIf you wanted to write WP REST API endpoints for your plugin instead, RESTful WP-CLI will dynamically make them available at the command line, and will eventually be a feature of WP-CLI.\n. How would this be different than wp plugin install <slug> --force, or wp core download --force ?\n. Ok.\nFor both wp core download and wp plugin install, you can specify --version to forcefully install a specific version.\nTo produce exactly the behavior you're describing in one command, I'd recommend writing a custom command.\n. > When I tried this following command, there was no any information whether task was completed successfully or there was some error.\nDon't you get an error from MySQL when there's an error?\nsalty-wordpress \u279c  wordpress-develop.dev  wp db query 'FOO BAR;'\nERROR 1064 (42000) at line 1: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FOO BAR' at line 1\n. > Should we assume success if no message displayed in the command run?\nYes.\n. \ud83d\udc4d \n. I'm not a huge fan of how this inline example has turned out \u2014 it's a bit confusing. I think we can pass on adding an inline example to wp help for now.\n. > I have removed following existing example for now.\nPlease restore it, and properly quote the --post__in argument:\nwp export --post__in=\"$(wp post list --post_type=post --orderby=rand --posts_per_page=8 --format=ids)\"\n. You need to quote the values passed to the --post__in argument:\nwp export --post__in=\"$(wp post list --post_type=post --orderby=rand --posts_per_page=8 --format=ids)\"\n. > However, 5,678 refers to the number of posts in the current file, not the number of posts in all files in the directory. This is very misleading, especially when you're expecting a substantially higher number of posts.\nWhat would be your proposed fix?\nAnd, should we just commit @rmccue's new importer to WP-CLI instead?\n. @rmccue How would you feel about bundling it by default in a month or so, similar to how WP-CLI already bundles Nikolay's exporter code?\n. To fix this issue, going with:\n-- 1,234 of 5,678 (in file wordpress.1.xml)\n. You should use the functional / declarative format introduced in the most recent release:\n* ## OPTIONS\n *\n * <path>\n * : Path to the project that includes a .distignore file.\n *\n * [--format=<format>]\n * : Choose the format for the archive.\n * ---\n * default: zip\n * options:\n *   - zip\n *   - targz\n * ---\nWe could make sure all existing commands are updated to use this, for clarity.\n. > How could I change Set the database collation. Default: '' to new syntax?\n```\ndefault:\n```\n\nFor date field like this\n\nWe can ignore that one for now.\n\nFor this type of parameter?\n\n```\ndefault:\n```\n. @ernilambar Are we getting close to completed on this?\n. \ud83d\udc4d \n. \ud83d\udc4d \n. > Will it be worth fixing those? Or we would want to keep it like now as this is not critical issue?\nSure, I'd be open to making sure we always include a trailing period.\n. @ernilambar One remaining tweak\n. > I assumed the extra-php would be loaded before the require files but that does not seem to be the case.\nThis is not the case. --extra-php is used when wp core config (doc) is run. It's not used every time wp-config.php is laoded.\n\nSo I am puzzled as how to get this to work with my setup and I have too many sites running this way to change the system as there is nothing wrong with the setup. Just limited config for wp-cli.\n\nGenerally, it's better to use dirname( __FILE__ ) and similar in your config files, instead of depending on $_SERVER, because $_SERVER isn't fully populated on the command line.\nIf you wanted to define $_SERVER at runtime just for WP-CLI, you could create a cli-config.php file:\n<?php\n$_SERVER['DOCUMENT_ROOT'] = '/var/www/wordpress.dev/public_html/';\n$_SERVER['SERVER_NAME'] = 'www.wordpress.dev';\nThen, in your wp-cli.yml or ~/.wp-cli/config.yml, you'd require the cli-config.php file:\nrequire:\n  - cli-config.php\n. > I tried something similar to that too with no luck.\nOk. It's hard to say what the problem might be then without access to greater detail on what you tried, how you tried it, and the result you saw. If you can provide more specific reproduction steps, I might be able to help further.\n\nIt seems that the real problem here is that I cannot specify the wp-config.php file's location and it's trying to find it on it's own.\n\nThis is correct. WP-CLI, just like WordPress, supports a wp-config.php file in ABSPATH or one directory above ABSPATH (e.g. up one directory from WordPress core files).\nIf you want to include your configuration details elsewhere, you can have the wp-config.php file use require() to any other arbitrary file.\n\nMy issue is that I have a wp-config.php file that is no the acutal wp-config as it's a global to set defaults and it includes the project specific wp-config using the $_SERVER['DOCUMENT_ROOT'] and $_SERVER['SERVER_NAME'] variables. \n\nAgain, PHP CLI doesn't populate DOCUMENT_ROOT because the value is based on the web request. You'll need to find an alternative to $_SERVER['DOCUMENT_ROOT'] in the WP-CLI context. See #785\n. \ud83d\udea2 \n. @ernilambar Can you include updated tests please?\n. @ernilambar Does it fail locally?\n. \ud83d\udc4d  Thanks @ocean90 \n. > Are there any timeouts that would come into play for a wp eval job running other than the php.ini settings?\nNot that I'm aware of, no. To verify, you've been inspecting the php.ini for PHP-CLI, not whatever your web worker is? PHP-CLI uses a separate php.ini\n\nWe have a job that runs to completion when logged in via shell, running by hand. But via cron, the job dies 3/4 of the way through. There seems to be a hard coded 10 minutes in the cli code -- anyway to override?\n\nThere aren't any hardcoded timeout values in WP-CLI. Can you share more details about your script, where you've added error logging, and what that error logging indicates?\n. > I think you meant to say Control + R for searching? Control + C usually cancels programs.\nYes, you are correct. Updated.\n\nFew examples are collected. It will be helpful may be.\n\nThanks!\n. Actually, I think this would go well in our existing Quick Start doc.\n. > I get this notice in 0.23 and latest nightly version also.\nWordPress is attempting to send an email notification about the comment status change: https://core.trac.wordpress.org/browser/tags/4.5.2/src/wp-includes/pluggable.php#L1466\n$_SERVER['SERVER_NAME'] isn't populated on CLI though, so there's an error notice. See https://github.com/wp-cli/wp-cli/issues/785#issuecomment-138040347\n. The only idea that comes to mind, but I'm not sure if it's a good one, is that there's an expired intermediate certificate.\nThe HTTP call is made by Composer. I'm not sure which underlying library it uses. Maybe take a look upstream to see if there have been any similar reported issues?\n. @johnbillion Were you able to work this out?\n. \ud83d\udc4d \n. > Using Docker and other automated tools it would be a nice thing to have all the signatures and hashes from https://github.com/wp-cli/builds/tree/gh-pages/phar available for each release on https://github.com/wp-cli/wp-cli/releases.\nIn any particular format, or is simply uploading the signature sufficient?\n. > For our case it is sufficient to upload the hashes and signatures that are available at https://github.com/wp-cli/builds/tree/gh-pages/phar for each release on https://github.com/wp-cli/wp-cli/releases.\nSounds good. I'll begin with the next release.\n\nAlso, I can't seem to find your public key anywhere...any info on that?\n\nHadn't posted it anywhere, because no one asked for it :)\nHere it is: https://github.com/wp-cli/builds/blob/gh-pages/README.md#wp-cli-builds\n. > Can you post that key to a public key server or publish it as a file for download? It helps with automation tools. Thanks.\nSure: https://github.com/wp-cli/builds/blob/gh-pages/wp-cli.pgp\n. This is now complete https://github.com/wp-cli/wp-cli/releases/tag/v0.24.0\n. I'm not sure I'm \ud83d\udc4d  on this change yet. While I understand the desire for parity, this is a breaking change for any use cases dependent on the existing behavior.\nCould you explain in greater detail the rationale for the change?\n. Closing in favor of #3015\n. \ud83d\udc4d \n. Something must've broken. Given this is just PHPdoc changes, this is good to \ud83d\udea2 \n. > how do you suggest to keep example of package browse. Its very big table.\nEh, I don't have any good ideas. Let's just come back to it later.\n. I'm on the fence too.\nOne thing we could do to keep the current behavior and support downgrading to a specific version is introduce a --version=<version> argument. But, you can also just re-install using cURL, so I'm not sure it's worth adding a new feature.\n. > True, but the same applies for an update. ;)\nSure, but updating is the majority use case compared to downgrading.\nIs there other prior art we could look to that might influence the decision one way or another?\n. I've come to a conclusion on this. Because we have wp cli update --nightly, we should also have wp cli update --stable, which would take you to the latest stable.\n. \ud83d\udc4d \n. Build failed on trunk because of #2954. All other tests pass.\n. @aaronjorbin seems to be fine\n. @yousan I think this may have been a temporary hiccup on Github's end. Does the issue still reproduce for you?\n. Build failed on trunk because of #2954. All other tests pass.\n. > Not to be a pest, but when is the release of 0.24.0?\nJuly 27th\n\nThis issue renders fresh installs of vip-quickstart impossible:\n\nYou can use wp cli update --nightly to get a compatible nightly build.\n. > I can pipe the output to a file and see the success message if all is well. However, if there are any errors, they are not sent to the file.\nCan you share how you're piping output?\n. Can take the same approach as #2949\n. As it turns out, we do need this. Closing in favor of #2980\n. :shipit: \n. @ernilambar Couple of things to finish up on this one.\n. > But ms_site_check() provides a ms_site_check filter: Should WP-CLI set it always to a non-null value?\nThis seems like a reasonable assumption to me. When using WP-CLI without the --user=<user> argument, the expectation is that you can perform any operation, and those operations aren't run as any user.\n\nms_site_check() is skipped if the current user is a super admin, but that doesn't work either:\nms_site_check() is used here which happens before the user is set.\n\nWP-CLI should be calling wp_set_current_user() at roughly the same time WordPress normally does. That it doesn't is a bug.\n. > What am I missing?\nSorry? I don't think you're missing anything. WP-CLI should be setting --user=<user> earlier, probably early on init. WP-CLI is setting the current user too late right now.\n. A slightly different take would be to introduce a --field=<field> argument for wp option list, which would pass more easily to xargs wp option delete\n. \ud83d\udea2 \n. wontfix on this one. Pantheon is the only host I've run into this issue with.\n. > My users' user_login values in my system are just numbers, and looking at this part I realized that you test if the input is numerical then it's the ID.\nThis is correct. \n\nMay be we can introduce new --type parameter where it will be like ID or email or user_login or term based on command type. If there is no --type parameter it will work as it is currently working.\n\nI'm not keen to introduce a parameter for this, to be honest. Given this is the only time the issue has come up in the long time that the feature has existed, I don't think we need to solve for it.\n@john-bonachon If you want a workaround for fetching user data, try checking out https://github.com/danielbachhuber/wp-rest-cli which will, hopefully, eventually be the second generation of internals for WP-CLI https://github.com/wp-cli/wp-cli/issues/1784\n. The Commands Cookbook should be what you need if you wanted to write a custom command for your project.\n. > I agree, it's strange that this error even occurs, but maybe WP-CLI can handle it with a little more grace?\nWhat change would you suggest?\n. > Maybe it is enough to just check whether or not the query returned an error (using wpdb's $last_error property?) and fall back to PHP replacement.\nHm. I'm not sure this is precise enough, or that its safe to make this assumption.\nIs it possible to check whether MySQL PCRE has been compiled with UTF-8 support?\n. > Does wpdb save the error code?\nYes:\nsalty-wordpress \u279c  wordpress-develop.dev  wp shell\nwp> $GLOBALS['wpdb']->query( \"FOO BAR;\" );\nWordPress database error You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FOO BAR' at line 1 for query FOO BAR; made by include('/home/vagrant/.wp-cli/php/wp-cli.php'), WP_CLI\\Runner->start, WP_CLI\\Runner->_run_command, WP_CLI\\Runner->run_command, WP_CLI\\Dispatcher\\Subcommand->invoke, call_user_func, WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher\\{closure}, call_user_func, Shell_Command->__invoke, WP_CLI\\REPL->start, eval\n=> bool(false)\nwp> $GLOBALS['wpdb']->last_error;\n=> string(153) \"You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FOO BAR' at line 1\"\n\nIn that case, one can match the code against 1139, that narrows things down to \"issues with the regular expression in your query\". In which case, I think, WP-CLI should always be prudent and fall back to PHP replacements.\n\nThis seems like a safer assumption.\n. @vdwijngaert Coming back to this, can you sanity check this conditional?\nif ( ! $php_only && ! $this->regex ) {\n    $wpdb->last_error = '';\n    $serialRow = $wpdb->get_row( \"SELECT * FROM `$table` WHERE `$col` REGEXP '^[aiO]:[1-9]' LIMIT 1\" );\n    // When the regex triggers an error, we should fall back to PHP\n    if ( false !== strpos( $wpdb->last_error, 'ERROR 1139' ) ) {\n        $serialRow = true;\n    }\n}\n. > The site, however, does turn to a red background in the netadmin sites list, but browsing to the site still works.\nAre you sure you're not logged in as a super admin in this case?\n. And, just to follow up, I've tried reproducing the issue but the site is deactivated as expected:\n\nHowever, I can still visit the site when logged in as a super admin:\n\n. Is this on a vanilla install of WordPress, or could there be object caching issues or plugin conflicts at play?\n. Sorry, but it's hard to say without knowing how your theme works in depth.\n. > Extracting the zip is very slow on my Linux machine while tar.gz extraction is much faster.\nCan you diagnose this issue at greater depth, and produce a hypothesis to the cause?\nSome initial thoughts:\n- I'm \ud83d\udc4e on adding an option to switch archive types.\n- I'm not sure whether WordPress.org supports .tar.gz for all archive types.\n- I'm not certain that extracting .tar.gz is generally faster than extracting .zip on all platforms, which means changing the archive format could have a negative impact on other users.\nGenerally, it seems like you should solve this problem with your machine, not by changing WP-CLI's behavior.\n. > But i am expecting this on all my virtual servers as well. Is unzipping slower on virtualized environments?\nI don't believe so, no. Performance considerations of .zip vs. .tar.gz hasn't ever come up before as a support issue, so I feel reasonably confident this is an issue with your server configuration and not something that needs to be fixed with WP-CLI.\n. I'm not sure I want to adopt a special behavior just for Github. Why not create a community package for this?\n. Couple more considerations I thought of:\n- Github actually produces a ZIP file for every branch (e.g. https://github.com/billerickson/BE-Static-Subpages-Widget/archive/develop.zip), so you'd need a reliable of identifying the branch name to remove.\n- If you've already downloaded the ZIP file, you can install it with wp plugin install and I think you'd expect the same behavior of removing -master.\nOf course, you could produce a community command that only worked for the master branch. I feel reasonably confident installing the master branch is the 80% use case.\n. I've been thinking about this a bit, and would be amenable to adding the feature.\n. > In this case I renamed the ZIP folder to the name of the repository. This also supports specification of a tag/branch, and for GitHub by default fetches the releases list and chooses the most recent release (rather then master).\n\nWorth considering is that for GitHub we'll also want the option to specify an OAuth token (for private repos, and for rate limiting), and for Bitbucket a key and a secret (for private repos).\n\nThese features in particular make most sense as a community package.\n. > Could we have them in the README?\nWhat value do you think they provide? I'm not sure how I feel about quantifying whether or not WP-CLI is maintained.\n. https://gemnasium.com/ could be another useful one\n. Gemnasium is also free.\n. > Has there been any thought given to converting the WP CLI logging classes into PSR-3 compatible loggers?\nI had thought this was mentioned once before, but I can't find it. I'd be open to this if we could do so in a backwards-compatible way.\n. @JPry Is this still worth pursuing? If so, can you provide a suggested implementation?\n. Punting on this for now. Would be good to see an example before we commit to implementing the feature.\n. > An awesome feature for WP-CLI would be to extend the wp db export command to export a version of the database with a find and replace (including within serialized data) this would save many people many headaches.\nUse wp search-replace --export=<filename> (doc), introduced in v0.22.0, to create a SQL export with replaced strings.\n. You shouldn't use WP-CLI as root.\n. > for example puppet will and also handle the chmod/chown stuff.\nSure, I know. \n\nalso if you have only a root user and the rest are very restricted users, it would really help to allow an admin to disable this warning. some of them are knowing what they are doing.\n\nYou could also create a user with sudo privileges, and use that with WP-CLI.\n\nthink just closing this and saying \"shouldn't do that\" is not really a good thing\n\nRight, but you don't appear to know the historical context for why we've intentionally made it difficult to use --allow-root. Given there are alternatives, you should use those alternatives and not use WP-CLI as root.\n. Sorry, what code is this in reference to?\n. > if i try to run wp core download it connects directly not using the exported proxy.\nwp core download uses the Requests library to make remote requests. I'd suggest opening a ticket with that project to discuss supporting the environment variables.\n. Do you have SSH access to those remote servers, and do they have WP-CLI installed?\nRelated #2754\n. > Which will have higher priority?\nI'd suggest returning an error if both are provided, with the error explaining why you can't use both.\n. @ernilambar is correct. It doesn't create the database, and it only performs whatever tasks are defined in your sql file. If your sql file has queries to empty the database (or drop tables), then it would empty the database. Or, if your sql file just has INSERT queries, then it will just insert new data into the database.\n. > Do you want to merge this and then have me bump the version or the other way around?\nAlthough the approach I've taken (using a lower version number) is imprecise, I think it works fine for our needs. Developers running trunk should be updating trunk regularly anyway.\nIn short, no version bump needed in this particular case.\n. @ernilambar Want to also include an example of how you can use this with xargs to delete options?\n. \ud83d\udc4d \n. @ernilambar There's a merge conflict now that needs to be resolved.\nAlso, I'm not sure how I feel about:\n\nSuccess: Exported to wordpress_dbase.sql.\n\nThe period in the sentence confuses the filename. Should we be quoting filenames? Mind taking a look at a few other open source projects to see how they handle this case?\n. > So, generally in success/error messages, filenames and folder names are wrapped with some character. We could also use something like that. May be \" or '.\nOk. Let's wrap filenames in quotes.\n. > for confirmation, which are we going to use \" or '\nAlways use ', unless you need to use \" (e.g. there's a ' within the string you want to quote).\n\nThis applies to both filename and folder name, right?\n\nYes\n. > Is this right approach for fixing merge conflict? If not, I will create new PR.\nI think the history got messed up somehow. Let's go with a new PR \u2014 thanks\n. @ernilambar Up for turning these notes into a website page?\n. @ernilambar Still want to see this issue through?\n. > When a row contains RTL text like Arabic, the terminal picks up the text direction and displays the row accordingly. Looks weird on tables, but renders csv dumps completely useless (I assume).\nCan you share some visual examples, and complete steps to reproduce?\n. Thanks @diggy \nJust wanted to weigh in that I haven't had a chance to reproduce this, but believe it's probably a problem with php-cli-tools, our upstream library for rendering tables.\n. @diggy I wrote a test case for the RTL issue in #3508, which passes locally, so I think PHP parses RTL data in a CSV correctly. Did you find that the CSV wasn't parsed correctly, or just that it looked oddly?\n@ernilambar I think https://github.com/wp-cli/php-cli-tools/pull/101 may be the fix. Up for verifying it?\n. @ernilambar Could https://github.com/wp-cli/php-cli-tools/pull/101 be the fix? Any idea why the width is being miscalculated?\n. Closing in favor of https://github.com/wp-cli/php-cli-tools/issues/103. > I doubt such type of query is currently possible. May be we can introduce some kind of mechanism where list command accepts multi level query parameters.\nI've considered this in the past, but never identified a syntax I thought worked well.\n\nOr will this be too much for a single command?\n\nThe future of wp post list is wp rest post list, so I don't think we need to solve the problem here https://github.com/danielbachhuber/wp-rest-cli\n. > So what I would like to do is not possible with wp-cli but is possible with wp-rest-cli?\nYes:\nwp rest post list --after=\"2014-12-31T23:59:59\" --before=\"2016-01-01T00:00:00\"\n. Tests pass locally.\n. \ud83d\udc4d \n. > Does --post_type always need to be there?\nAppears to be:\nhttps://github.com/wp-cli/wp-cli/blob/master/php/export/class-wp-export-query.php#L75-L104\nI'm not sure what the expected behavior is meant to be. Given we're using an already slightly-forked version of https://core.trac.wordpress.org/ticket/22435, this isn't something I want to fix in the exporter.\n. If you look at the error message, the error appears to be coming from one of your plugins:\nFatal error: Uncaught Error: Call to a member function get_element_language_details() on null in /var/www/html/wp-content/plugins/sitepress-multilingual-cms/inc/wp-nav-menus/iclNavMenu.class.php:160\nYou'll need to take a look into that plugin to track down the particulars of the fatal.\nYou can use wp --skip-plugins to skip the loading of plugins with WP-CLI.\n. > It seems there's a delay when the localized version of WP are packaged.\nYes, I believe the localized version isn't packaged until the localization maintainer deems the strings to be ready.\n\nIs it possible to have another parameter that in case the latest version is not there to go down 1 micro version to 4.5.2 instead ?\n\nCan't you just do wp core download --locale=bg_BG --version=4.5.2?\n. > possibly because it may only be possible as a plugin as it would require a hook into init.\nYes, it requires a plugin because the callback code needs to execute during a web request, which WP-CLI isn't present for.\nThis is what you want:\nwp plugin install one-time-login --activate && wp user one-time-login <user>\n. What happens when it generates multiple filenames?\n. > Looks like just a naming convention thing ... ie docs at https://wp-cli.org/commands/post/list/ say the field is supposed to be post_author.\nThe field that is returned in the Post object is post_author. author is one of the supported WP_Query parameters. The \"Options\" section to the documentation includes:\n[--<field>=<value>]\n   One or more args to pass to WP_Query.\nThe fact that there's a slight difference is something we'll be reconciling with the RESTful WP-CLI project https://github.com/danielbachhuber/wp-rest-cli\n. I think this was just user error.\n. This is a pretty nasty bug :(\n\nIf not maybe there should at least be a warning concerning this issue in the docs.\n\nIncluding a warning in the documentation is a great idea. Could we also potentially perform the calculation ourselves, and indicate a warning to the end user if we detect the image filename will end up differently?\n. > is there any example/format how warnings are meant to look/be written for WP-CLI? I couldn't find any examples.\nNothing specific, no.\n\nAnd the docs are generated from the source, right?\n\nCorrect.\n\nMaybe if we do this before actually doing any regenerating we can abort with a warning and require a flag to still do the regeneration. What do you think?\n\nI'm concerned about introducing a confirmation prompt, because this could break any existing use of wp media regenerate in a script.\nIf programmatically checking the existing files looks like it's going to be too complex, then maybe we should just include the warning in the documentation and be done with it. Given this has been a problem since 4.1, it doesn't appear to have been hugely widespread, so maybe we don't need to spend a ton of time on it.\n. > What if we at least have an option to be defensive about this? If you opt in any performance impact is also less of an issue. I'd have a look into how complex this is unless you can already say you definitely wouldn't merge it.\n\"Decisions, not options\" :) If we can create some intuitive behavior that doesn't have too much of a performance impact, then I'd be amenable to the improvement. I'm not keen to put it on to the end user, though.\nI'm not sure if it's possible, but if we could somehow filter the size values when WordPress is generating the new image size, we could ensure an image retains its original proportions.\n. > But I get your point and I'll give it some more thought if we can handle it the way you just said. I'll report back when I have more information on that approach.\n@kraftner Anything to report on how we can address this?\n. Ok. Closing as wontfix for now, but can reconsider later if someone wants to submit a PR for it.\n. \ud83d\udc4d \n. > Will localized homepages have their own repository?\nIn the interest of keeping things simple, I'd prefer to just keep to one repository for now. Additional complexity is complexity I have to maintain long-term.\n\nI feel it will be easy for people who isn't a programmer, so they can translate just clicking the edit button on the GitHub. :)\n\nSure, we can do the same. For now though, let's just focus on making the homepage available in a few different languages.\n. Any volunteers for setting up the Jekyll functionality to provide translations?\n. @miya0001 Looks good to me! How about the others that will be providing translations? Are you happy with this implementation?\n. @shulard @mustafauysal Want to have a go at translating? If you want to refactor the JS to not use jQuery, I'd be open to that too.\n. Thanks everyone for your work on this so far! Couple of follow-up things from me:\nDoes someone want to style the language selector so it doesn't stand out so much in the header?\nAlso, here's our top 15 languages, according to Google Analytics:\n\nIt would be cool if we could get translations for:\n- German\n- Spanish\n- Portuguese\n- Russian\n- Dutch\n- Italian\n. Can we get Spanish, Russian, Dutch, and Italian by next week?\nAlso, for those providing homepage translations, what's the best way to alert you when there are changes to be made (which hopefully won't be too often)?\n. > Maybe you can make a group of \"translators\" and ping them in an issue when there are some changes to be made, I think it's the simplest way to get notified...\nGood suggestion. I'll set that up next week.\n. > we already have a \"translators\" group for notifications?\nI started one last week. I've gone ahead and invited everyone on this thread to it.\n. I've created new issues for the remaining languages.\n. @johnbillion Want me to leave this for you?\n. For this command, can you create a separate features/sidebar-reset.feature file and move your tests in there?\n. @ernilambar I just realized this uses a lot of code copied from class Widget_Command. Could we make this wp widget reset or similar, as to reuse the code?\n. @dsXLII Going forward, I'm using the new Excerpts feature on the runcommand website to provide point by point documentation on questions such as this one.\nHere's the answer I put together for you: https://runcommand.io/to/shared-wp-cli-packages/\nLet me know what you think, and whether there's any follow-up clarification I can provide.\n. Thanks for the PR, @apertureless. Can you include a test for this change too?\n\nDon't really know whats best practice here. You could also implode the $ids array directly, without passing it to display_items(). I checked other commands that have the --format=ids option, but they are a bit inconsistent. On some the ids get directly imploded and echo'ed out, on some they are passed to display_items(). But I think passing them to display_items() is better, if the display style get changed at some point.\n\nI agree \u2014 the previous implementations are inconsistent. Part of the challenge is that some resources have an inconsistent name for their 'id' attribute. What you've suggested makes sense to me.\n. > build error seems due to tochange in comment in trunk. Should I restart the build?\nMerge master to include #3076 and it will be fixed\n. > Is there a reason why these has to specified exactly like that or does it have more to due how WP fetches the languages?\nIt has to be specified as nb_NO because that's what the locale string is, and it's case sensitive. \n. > Are there any plans to allow importing of user metadata from a CSV using wp user import-csv or perhaps a new command such as wp user meta import-csv?\nNo plans, see https://github.com/wp-cli/wp-cli/pull/1855#issuecomment-106920207\n\nI see there is wp user meta set and wp user meta update but as far as I can gather this doesn't allow for a bulk set or update of user meta data.\n\nCorrect. \nYou can write a custom command to do what you need with the migration task.\n. > Then take your last 4 commits and combine them into 1. There is other ways ( so feel free to do take another route ) but this is how I usually do it.\nNo squashing commits, please. It's fine to preserve the history.\n. Thanks for your work on this, @roelveldhuizen. I've merged your commits into #3068, so we can land the code with tests.\nAs a suggestion for the future, I'd encourage you to create a feature branch for your suggested changes, so you can more easily work on multiple features at once.\n. Thanks for the pull request, @roelveldhuizen. Unfortunately, the logger class is too low-level for this change. When you use WP_CLI::success() or similar, the expectation is that you've already prepared the string to output as you'd like it to.\nFor this particular issue, you'd want to take a look at the CommandWithUpgrade class for where you might apply html_entity_encode().\nAlso, as a heads up, pull requests are expected to have tests\n. > It could be unique key for the object which could be used to manipulate data.\nSo the location?\n. > May be we need to improve test more regarding site command.\nSure \u2014 go ahead :)\n. > But for parity also we could add it.\nI'm amenable to this.\n. > Tested upto parameter is going to be deprecated after new release of Plugins Directory.\n@ernilambar Should we just go ahead and remove it from the default readme.txt ?\n. > When scaffolding plugin tests, it would be cool to include a PHPUnit test to determine whether the \"Tested up to\" value in the readme.txt is up to date.\nClosing the issue because this original premise is now invalid. We can remove the \"Tested up to\" when it's deprecated by the Plugin Directory.\n. Thanks @rachelbaker \nThis is the correct change, so I'm going to merge it in, but I'm curious how you managed to experience this bug in the first place. By these revision numbers, WP-CLI should be calling wp-settings.php instead of wp-settings-cli.php\nCould you share more information about the WordPress version you were working with, and which version and installation mechanism (Phar vs. Git vs. Composer) the issue occurred?\n. > I got the error last night while working with a WP install running the latest checkout of https://develop.svn.wordpress.org/trunk via composer based installation.\nWeird. If you have a moment, do you mind doing a bit of debugging into why wp-settings-cli.php was being called? It shouldn't have been, and I can't reproduce on my WordPress develop checkout, so I'm concerned this is a symptom of a bigger problem.\n. > Looks like I was just missing this commit: 196e69e\nHuh. Not sure how you'd be missing the commit, but I'm going to assume everything is hunky-dory.\n. Actually, it doesn't appear php-cli-tools is going to make it this time.\n. @ernilambar This is a bug. Can you file a separate issue for it?\n. > is not related to this issue, I believe.\nYou are correct.\n. Huh, this isn't very fun.\nI'd like for us to continue to spawn cron as much as possible, although I suppose in the case of ALTERNATE_WP_CRON there's not a ton we can do.\n\nNot sure where best to place this\n\nThe end of WP_CLI\\Runner->load_wordpress() is a fine place for it.\n\nalso I'm wondering whether WordPress core should add some extra logic to this condition so it doesn't attempt a redirect on the CLI.\n\nNah, I think we can accommodate in WP-CLI just fine. We haven't placed any defined( 'WP_CLI' ) checks in WordPress core yet, and I don't think we should until we absolutely have to.\n. One consideration for the implementation of this feature: wp site list offers some amount of filtering based on site type. How should we accommodate for this in @sites?\nAlso, we'd need to decide whether wp @sites would run against all sites, or just the active ones.\n. Another thought: this could be wp @network instead, which is more inline with our existing --network flag.\n. I've thought about this possible feature a bit, and have come to the conclusion of closing the issue as wontfix.\nWP-CLI aliases are macros for some combination of --url=<url>, --user=<user>, --path=<path>. When an alias is used, a supplied --url=<url> is treated as a local parameter, instead of a global parameter (#2974).\nFor a magic @sites alias to work, I'd also need to be able to supply the --path=<path> to WP-CLI to denote the WordPress install path. So we'd need even more special case behavior: when @sites is used, --path=<path> would need to be interpreted as a global parameter.\nxargs is still a reasonable substitute:\nwp site list --field=url | xargs -n 1 -I % wp plugin list --url=%\n. Punting on this for now, but will potentially come back to it with a revamp of the package index.\n. > How do I update this to the correct path?\nIf WP-CLI isn't installed somewhere on your $PATH, then you'll need to create a symlink on your PATH to the executable, or create an alias.\n\nAlso on another domain its just not working at all. How do you fully uninstall wp cli in order to do a completely fresh install from scratch?\n\nSee https://runcommand.io/to/delete-wp-cli/\n\nbut yet I only seem to have a wp-cli.phar file I do not have any other files or locations\n\nI'm not sure I follow. Can you clarify?\n. > So I am wondering will performing mv wp-cli.phar /usr/local/bin/wp as root still have the same desired effect if I go and add an alias to each user such as alias wp='php /home/{USERNAME}/wp-cli.phar'\nYou should just need to mv wp-cli.phar /usr/local/bin/wp as root. Once you've moved the file, /usr/local/bin is typically on your PATH, so the wp command will become accessible.\n. Phew, I'm not crazy\n. > So in theory get_download_url() need only be adapted to accept a 'nightly' version argument.\nThe last time I looked into this, it was more challenging than a one-line change. Specifically, wp core download is designed around handling .tar.gz, which the nightly isn't. If you work on this, be aware it's going to be more involved than you think.\n\nAssuming there is no locale-specific copies of the nightly builds, should we display an error/warning if the locale is not 'en_US'?\n\nI'm not sure of the expected behavior. What's the actual difference between a locale copy and a normal copy?\n. Punting on this one. As it turns out, there's no easy way to get a list of capabilities per role for comparison.\n. > It would be great if we target this for 0.24.0.\nIt's not a critical bug, just a nice to have feature.\n. @ernilambar Want to pick this one up?\n. Couple of common issues to throw into the mix:\n- Use of $_SERVER inside of wp-config.php and plugins (see #730 and #785)\n- Conflict between global and local args (see #3138)\n. Another one: explain why the --allow-root flag exists (see #3181)\n. \ud83d\udea2 \n. Passing on this \u2014 adds mostly mess and clutter:\n```\nsalty-wordpress \u279c  wordpress-develop.dev  wp post list --prompt\n1/4 [--:\n2/4 Prints the value of a single field for each post.\n3/4 Limit the output to specific object fields.\n4/4 Accepted values: table, csv, json, count, ids, yaml. Default: table\n```\n. \ud83d\udc4d \n. \ud83d\udc4d \n. > Is anyone else also facing this issue?\nIt's a permissions issue, specific to your server. However, anyone can experience file permissions issues. This isn't unique to WP-CLI.\nYour current system user doesn't have permission to modify the file, because you used sudo to move it in place. You'll need to fix the permissions on the file such that your current system user can modify the file, or run sudo wp cli update --allow-root to perform the update operation as sudo.\n. > md5 checksums are not available for trunk downloads so I just display a warning. You get a similar error when trying to overwrite an existing download.\nMakes sense.\n\nOne future change, which would be nice but isn't within the scope of this issue would be to move the logic for determining which tool to use (tar,PharData,ZipArchive etc) to a factory class which gives us back a instance of class fulfilling a common interface - so the command doesn't know (or care) what tool is being used to extract and move the download.\n\nI agree. I think code abstraction could actually be a general theme for the following release (v0.25.0). Some of the internals have gotten quite messy.\n. > Any idea why that one test is failing? It failed for me locally too, but it appears to be false positive. I don't understand why a WordPress version already exists if I have a 'clean directory'?\nIs it somehow running wp core download twice, and it's the second instance that's failing?\n. > The test was running download twice (as was intended), but I thought the error was occurring for the first command not the second.\nHeh, good find.\n. @stephenharris Left some comments on small things to be fixed up.\n. @stephenharris Sorry, couple more things.\nAlso, could we have some improved description for the --version=<version> parameter in the docs? Specifically, mention that you can include a version number or nightly.\n. > The documentation for --version is behaving weirdly for me. It's breaking before the 'latest' and 'nightly' (see https://cloudup.com/c6pMLEZScve). Are quotation marks not allowed there?\nNo, WP-CLI is trying to be smart by word-wrapping. You can just ignore it for now.\n. \ud83d\udea2 Good work with this!\n. Just to confirm, this issue reproduces on a fresh install of WordPress, with no plugins installed and the Twenty Sixteen theme active? Can you share specific steps to reproduce, including the image you've experienced the error with?\n. Ok. I can't reproduce this issue locally against WordPress trunk. If there's no way for you to track down more details on how to reproduce this, then there's not much we can do to help.\n. > Here's the error I've been getting upon installing it. I'm running a cloudlinux machine with CageFS. \n\nThe user itself is in the wheel group and not in the cage.\n\nIs this a managed machine? Have you shown the error to your host to see if they might know the cause? It appears to be a PHP misconfiguration issue, but it's hard to know what the issue is without access to the server.\n\nEmail me at maoz@techtone.ca so I can provide you with SSH access if you need it.\n\nSorry, we don't provide this level of support for the project.\n. @PatelUtkarsh Thanks! Could we add a message for when a role is removed too, and make sure there's a test for it?\n. > If I run wp reset role fake or wp reset role --all should we remove this fake role?\n\nOr we only reset default roles? (Currently, it is only resetting default roles)\n\nOh. I assumed wp reset role --all would delete custom roles. If the custom roles don't get deleted, maybe we should have some verbosity instead that says \"Custom role 'fake' not affected\" or similar.\n\nSo if we are only resetting default roles when you said\n\nIf we're only resetting default roles, then what I said was incorrect. My bad.\n. > But as it is already implemented changing it would be difficult. Should I\n\ncreate an issue for same?\n\nI don't think we should change it at this point. Removing custom roles is as easy as deleting them.\n. @PatelUtkarsh Looks good \ud83d\udc4d  Thanks!\n. > Is remain I will update it in new PR.\nSounds good\n. > For a multisite wp  --url= will run the command in the context of the specified blog with the given URL. However, if that URL does not exist that command is ran in the context of the main site.\n\nShould it instead give an error?\n\nAre you sure you're working on a multisite install? There's an explicit check and test for this scenario.\n. > E.g. multisite and example.dev and --url=example.dev/this-site-doesnt-exist. I guess this is probably because it's interpreted as page on example.dev.\nOh. And doesn't WordPress core just return a 404 in this case, not a \"Site not found\" message?\n. > Perhaps this isn't an issue for wp-cli to solve. I had a script to be run across specific sites of a network (to change the theme) and wanted to see what would happen if there was a typo in the url, and it changed the theme of the main site.\nI think we need to file this under \"be aware of the WP-CLI commands you're running, and how they'll be interpreted.\" Given --url= doesn't explicitly mean \"this particular site\", but rather \"mock a request to this URL\", WP-CLI can't make the judgement call that you've entered the value incorrectly.\n. Try #3128, which will be introduced in v0.24.0\n. The idea generally seems reasonable. However, --include-columns=<columns> is a bit ambiguous, given two tables can share the same columns.\nIs there a syntax we could use to specify the columns of a given table as you're listing tables? e.g. something like wp search-replace foo bar wp_posts:post_content\n. > Is it any more ambiguous than --skip-columns=?\nNo. My question was more from the perspective of \"given where we're at now, making a new decision\".\n\nThe only issue I can see with your idea about the wp_posts:post_content syntax is that table names can contain colons and possibly other characters, so if someone (rather stupidly) added a table to their database called wp_posts:post_content, how would the parser know if the user is referring to that table or the post_content column in the wp_posts table? The delimiter would need to be something that's not a valid character in a MySQL table or column name I guess.\n\nRight. The colon was included for the sake of the example. I don't have a better suggestion for a character.\nAt this point, I'd be fine with introducing an --include-columns=<columns> argument.\n. \ud83d\udea2 \n. I don't believe there's a way to do this without writing some code, given WP_Comment_Query doesn't support any form of date filtering.\nSee the commands cookbook for more details on writing a custom command.\n. > Could we trigger edit_user_created_user on wp user create?\nWhat are you trying to do, and why can't you use an existing action?\nOne concern with beginning to trigger this action now is that it could cause unexpected behaviors for users, given we haven't been triggering it until now.\n. Why not use the wp_insert_user action?\n. Oh, I suppose it's user_register and profile_edit: https://core.trac.wordpress.org/browser/trunk/src/wp-includes/user.php#L1691\n. Previously #1923\n. > it looks like this also needs addressing in the other three object commands.\nDo they expect slashed data?\n. \ud83d\udd28 \n. You could filter wp post list to a particular custom taxonomy if the custom taxonomy adds a public query var.\nFor instance, a location taxonomy would be:\nwp post list --location=<location>\nwp post list accepts any arguments that WP_Query supports.\n\nI have a lot of Custom Posts that I need to set featured images for, based on a custom taxonomy.\n\nIs each post meant to be assigned the same featured image, or does each post need a different featured image?\n. > Am I misunderstanding something?\nwp post list defaults to --post_type=post (as does WP_Query). Try:\nwp post list --system_type=ductless --post_type= sqms_prod_select --post_status=any\n. > Makes sense, returns this error, is this WP CLI related?\nMake sure you're running the latest version of WP-CLI.\n. > Does that create a local variable to store the image for the next command?\nYes.\n. > PS: If we are boring about double final slash we could add a statement like\nYes, let's only add a slash when none exists.\n. \ud83d\udc4d \n. Huh. Build is failing because the nightly build only has the wp-content directory...\n. Created a meta ticket https://meta.trac.wordpress.org/ticket/1843\n. > What would you then do if you wanted to import an existing database.sql file already on the remote filesystem instead of copying from local first?\nI'm not sure of the exact semantics of this yet. Implementation suggestions welcome.\n. I'm going to tackle this as a community package when I'm feeling inspired: https://github.com/runcommand/sparks/issues/65\nI don't think we should make it the default behavior of WP-CLI at this point, if ever.. \ud83d\udc4d \n. The expected behavior is to list all events, so this is a bug.\n. In addition to the two comments I left, can you share an example for how this renders?\n. Sounds good!\n. > I had assumed $hook-$sig-$time will give unique array key. I am not sure.\nHave you installed WP 3.7 locally and tested with it?\n. > I tried PR in WP 3.7 and its working as expected in local environment.\nCan you share more details on what you tried?\n. > I'm at a loss on what to try next. I had hoped debug would have reported an error to help further.\nIt appears WordPress is loading in one case, and not loading in another.\n\nAny suggestions on how to troubleshoot this further?\n\nTry using --skip-plugins and --skip-themes to diagnose whether the problem is coming from a given plugin or theme:\nhttps://runcommand.io/to/identify-plugin-theme-conflict-wp-cli/\n. > Used: wp --skip-plugins plugin list --field=name | awk '{print \"wp --skip-plugins=\"$1\" plugin list \"}'\n\nTo cycle through each plugin, and found that:\nwp --skip-plugins=redirect plugin list\nwhich maps to a plugin that appearently hasn't been updated in 8 years.\n\nGood suggestions. I've updated the Excerpt accordingly.\n\nThank you for the troubleshooting \"baby-sitting\".\n\nYep, happy to help.\n. Moved this to the wish list http://wp-cli.org/docs/wish-list/\n. > Is there a way to use a different database users for wp-config.php file and wp-cli?\nSure, you could just do something like this:\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n    define( 'DB_USER', 'privilegeduser' );\n} else {\n    define( 'DB_USER', 'limiteduser' );\n}\nMore detail here: https://runcommand.io/to/detect-wp-cli/\n. > What is everyone's thoughts?\nYou should make /usr/local/bin writable by the user you'd like to update WP-CLI with.\n. > Just a side note, i didn't know i had to match nightly until digging through #1310 and a comment on #1631\nWhy do you mean by \"had to match nightly\"?\n. > My thoughts are to allow a user to run sudo wp update without a warning message - if they are running sudo they should understand the risks.\nBut they probably don't, so the decision was made long ago to introduce the --allow-root flag. It's not something I really want to debate again at depth.\n. > Should the documentation be updated to explain that /usr/local/bin should be writable by the user?\nCould. I was thinking about putting a mention of --allow-root in \"Common issues and their fixes\" (#3119), but we could add some mention in the updating docs.\nWant to contribute a PR? Here's an intro\n. > Sends an email to email@example.com which notifies the user of a password change:\nIt looks like this happens on multisite because WP-CLI calls wp_update_user() to set the user details, which then thinks the password is being changed.\n\nIs there a way to prevent sending any email at all when creating a user? Is this a WP thing that is out of wp-cli's control?\n\nIt's a WordPress behavior, but I'd consider it a bug in WP-CLI given we have a --send-email flag.\nThere are send_password_change_email and send_email_change_email filters we can set to change the behavior for WP-CLI.\n. > Any estimate when the bug will be fixed?\nNo estimates at this time. It will get done when there's a pull request for it.\n\nIf you can point me to the proper location in the code, I'd be happy to try to fix it and send a pull request.\n\nSure, you'll want to check out User_Command for the relevant code: https://github.com/wp-cli/wp-cli/blob/master/php/commands/user.php\nWe should probably introduce functional tests at this point for email sending, which will make the fix a bit more involved.\n. > Which approach should we follow?\nThe first, because it will work when WordPress isn't present, or not yet loaded.\n. As it turns out, $wpdb->last_error is empty in these cases. We can display more of the error text, however.\n. > Should I do a PR for this?\nYes please, with tests.\n. > I don't see any unit tests for wp post meta. Should I create a new file?\nThey'll need to be functional tests. Here is features/post-meta.feature\n. @promethe42 Are you still wanting to fix this yourself?\n. Just so it's written somewhere, I didn't print the alias being executed as a part of the initial implementation because it would potentially break --format=csv et al.\n\nPossible solution: add new flag to echo @alias name.\n\nWhile I'm not sure what the solution is, I don't think adding a new flag is the way to go here, because I don't think it merits adding an option / making the user think.\n. > Just so it's written somewhere, I didn't print the alias being executed as a part of the initial implementation because it would potentially break --format=csv et al.\nAfter thinking on this, I realized any of the --format=<format> arguments would need to potentially be parsed in a custom manner because the format is no longer valid if it's multiple instances rendered on top of one another.\nI've decided to WP_CLI::log() the current alias when executing an alias group (including @all). This behavior can be disabled with --quiet. \n. > In admin panel when we install child theme, it downloads parent theme if applicable. What if we implement similar in CLI also?\nYep, this seems reasonable.\n. As it turns out, this was a bug, and a pretty nasty one at that c0d8618b72215f8ddad4ea457460816fd1bb5b51\n. @wp-cli/package-authors I'd like to get your thoughts on this issue when you have a moment, or even more broadly on: what can I (and WP-CLI generally) do to help support your package maintenance efforts?\n. > It would be useful if any automated tests for packages could be run regularly on the latest WP-CLI codebase.\nThis is actually the case right now with wp scaffold package-tests: https://github.com/wp-cli/scaffold-package-command#wp-scaffold-package-tests\nSpecifically, it uses the WP-CLI nightly build as the basis for the test suite run. It might be helpful to support both though: https://github.com/wp-cli/scaffold-package-command/issues/31\n. > But this still depends on the package developers to do something on their end to run the tests, right?\nCorrect.\n\nI meant specifically to run the tests on the WP-CLI side periodically. Given each community package, WP-CLI could iterate over each of them on its own weekly build routine to do a health check on all community packages to find out if there are regressions/incompatibilities as WP-CLI core codebase evolves.\n\nGood idea :)\n. > Where can we start to collaborate on some guidelines?\nIdeally, these guidelines are captured in code, such that you can execute the code against the WP-CLI package to see what percentage of the guidelines it follows.\n. I've dropped some of these onto a new wish list for the website: http://wp-cli.org/docs/wish-list/\n. Closing in favor of the wish list for now. There are a couple of substantial improvements I'd like to make to the package authoring experience but, given they're substantial, they'll need to come when someone has the bandwidth to see them over the finish line.\n. > My first thoughts are that I'd like the release cycle to fall inline with WordPress Core releases, but ~1 month beforehand. That would give larger organizations that use it in apps time to do regression testing, breaking change fixes, and deployments prior to a Core release.\nI hadn't thought about it this way, but I suppose we're already on a pretty nice rhythm. Is this how it works for Bluehost right now?\n. For 2016, we're going to release a v0.25.0, and then tag v1.0.0.\nI have some ideas on how to mix things up a bit post v1.0.0\n. Thanks! Can you include functional tests please?\n. @srguglielmo Per my comment on the issue, we'll need to work out functional tests for email sending before this lands.\n. @srguglielmo Are you planning to continue on with this PR?\n. \ud83d\udc4d \n. > How do we translate?\nSee https://github.com/wp-cli/wp-cli.github.com/pull/162 for an example. It's essentially:\n1. Add a new entry for the locale in _config.yml\n2. Create a directory for the locale, copy the existing index.md to the directory, and perform the necessary edits.\n\nDo we have a tool for that?\n\nNo tool at this point. We've opted for the simplest possible solution.\n. No need to keep an issue open for this \u2014 the translation can come when it's ready.\n. No need to keep an issue open for this \u2014 the translation can come when it's ready.\n. No need to keep an issue open for this \u2014 the translation can come when it's ready.\n. No need to keep an issue open for this \u2014 the translation can come when it's ready.\n. cc @szepeviktor \n. > We could depend on php5-cli OR php7.0-cli.\nThis seems fine to me, given we support both.\n. > Does this mean that the packages work now or do we need to wait until the release of 0.25.0?\n@szepeviktor Can you create a new build?\n. > Maybe we can up symfony/process version to 3.1 in next wp-cli release?\nI've posted a call for input on when it makes sense to change dependencies: https://github.com/wp-cli/wp-cli/issues/3198\n. For your particular situation, you can install the Phar version instead http://wp-cli.org/docs/installing/#recommended-installation\n. This is a bug from 5349e8c660e6456787151deee0762d50e062c927\nSpecifically, YAML interprets yes and no into boolean values, when they should be strings.\nWe should take this as an opportunity to add a full set of tests around the autoload parameter.\n. > I suspect that WP-CLI isn't anchoring the check to the top of the Web tree (i.e. /wp-admin) and is incorrectly reporting files under a lower sub-dir. The same probably applies to lower wp-includes sub-dirs too, though this plugin didn't have those.\nGood call. This is something we'll be able to more easily write tests for, too.\n. Are you sure --export=db.sql is including the Gravity Forms table?\nwp search-replace only operates on tables registered to $wpdb by default. If Gravity Forms doesn't register its tables to $wpdb, then they won't be present in the export file.\n. > Why is this behavior different from a standard $ wp db export command (which I confirmed actually does export the entire db including the Gravity Forms tables)?\nThey were implemented differently, and we haven't yet decided to make them behave consistently.\n\nThe different behavior between $ wb db export and a search-replace with the --export flag is disconcerting but adding the --all-tables flag to the search-replace command appears to successfully export the entire database. \n\nCorrect.\n. Thanks for the report. Can you include functional tests with this PR please?\n. > $wp --skip-plugins=hello jetpack\nThis is invalid syntax. The correct syntax is $ wp --skip-plugins=hello,jetpack\n. > It's not invalid syntax, jetpack is the command but is being excluded.\nOh, sorry. I misinterpreted.\n. @ben-morin Are you planning to add functional tests to this PR?\n. I'll go ahead and land this. I've verified this is a regression in v0.24.0.\n. > From where is it coming in the site?\nThis is a bug. It's defined in the website repo: https://github.com/wp-cli/wp-cli.github.com/blob/master/command.php#L94\n. > But I believe wp core version --extra is not best place to put that information because we are displaying only version info there.\nGiven $wp_local_package is a variable from version.php, I'm amenable to adding it to wp core version --extra.\n. > Currently the value of display_errors is overridden by \\Utils\\wp_debug_mode(), but I would expect WP_CLI to respect the value set by WP_DEBUG and \\wp_debug_mode() instead.\nSorry if I'm being a bit dense, but I'm still not sure what the problem is. Can you provide a more detailed example of how this is a problem, what the current behavior is, and what you'd expect the behavior to be?\n. What would you think about this?\n1. If WP_DEBUG=true, then WP-CLI defaults to displaying errors when --debug is and isn't included. If --no-debug is passed, then WP-CLI silences errors.\n2. If WP_DEBUG=false or isn't set, the WP-CLI defaults to not displaying errors. --debug would enable displaying errors.\nIt does seem somewhat erroneous for WP-CLI to quietly silence errors when WP_DEBUG is defined in wp-config.php.\n. > Yeah, that makes sense to me. I'll work on a PR :)\n\ud83d\udc4d \nIt'd be good to have explicit test coverage for each of the scenarios, where we don't already.\n. > Yeah, that makes sense to me. I'll work on a PR :)\n@iandunn Do you have a timeframe you're willing to commit to for this? Otherwise, I think this issue should be free for the first person to submit a PR.\n. @iandunn I added a testcase in #3372 for the behavior you described in https://github.com/wp-cli/wp-cli/issues/3220#issuecomment-236649813. The testcase passes, which isn't what I'd expect if the behavior was broken like you initially described.\nCan you re-verify the original issue, and confirm there isn't additional code in your environment that might be affecting error reporting?\n. > Oh well, I guess I'll just consider this resolved unless I run into it again in the future. Sorry for the trouble.\nNo worries! Happy to look into it again if you can track down more steps to reproduce.\n. @rahulsprajapati Why'd you close this pull request?\n. > Please can you suggest me what should I use for language : Package language OR Installation language.\nThe former is fine.\nCan you include a test case for a non-en_US locale too?\n. Closing in favor of #3221\n. Just to clarify, your use case is deleting specific tables, not the entire database?\n. > Maybe the command should be wp table drop instead to avoid confusion?\nThe command is wp db drop because it drops the entire database. There isn't a command for deleting individual tables.\n. How would this be different than wp option delete cron ?\n. > I am working a command that is duplicating attachment post types for a multilingual plugin \"Polylang\".\nCan you share or point me to a copy of the full command?\n\nI found WP_CLI::add_wp_hook() but the following code did not work.\n\nJust to verify, you've added @when before_wp_load to the command's synopsis to ensure the command itself is running before WordPress loads?\n/**\n * My awesome command\n *\n * @when before_wp_load\n */\nfunction my_function( $args, $assoc_args )\nWithout the @when before_wp_load flag, the command will run after WordPress has loaded, which means the hook won't fire.\nHowever, with all of this being said, I'm not sure why you need to run the code on wp_loaded \u2014 simply running the code within the command method should be sufficient.\n. > Yes, but I don't think it will work as I am loading the command from a plugin.\nThis is correct.\n\nHow do you develop commands before they are added to the package index.\n\nYou can load the file directly with --require=command.php, which means the code will be loaded before WordPress is loaded.\n\nBecause the command id dependant on other code that is only run later.\n\nIt's still not clear to me why the code needs to hook exactly on to wp_loaded. wp_loaded is the last action in the bootstrap process. Why can't you just remove the @when before_wp_load and run the command in the scope of a fully-loaded WordPress?\n. > I could, the code just needs to run after wp_loaded.\nOk, that should work fine then.\n. > site_id is documented as a valid field but the field is ignored when filtering the sites for a specific network.\nThis is being caught by an overzealous backwards compat shim 639d9d97f488d85598e216d7b882a9e7b8e11560\n. \ud83d\udea2 \n. > Is there a way for a command to provide a visual progress bar, and for its output to be piped elsewhere at the same time?\nYou'd need to write the progress bar to STDERR and pipe STDOUT to the file, or vice versa.\nAlternatively, you could write to the file from the command.\n. > Would a digest command be of use, to be added as a core command in WP-CLI?\nLike I mentioned in Slack, we're not typically adding new commands to WP-CLI core at this point. You're welcome to publish the package as a community command.\n. \ud83d\udc4d \n. Build failure seems to be a Travis problem.\n. > I would like to force run a cron hook, regardless of whether it's due or not.\nThis is the default behavior of wp cron event run.\n. @miya0001 Oh, I see what you did here. Do you think it's worth subclassing just for the purposes of documentation? Historically we haven't.\n. Sure.\n. @miya0001 Sorry it's taken me a while to get to this :(\nThe examples are going to be inaccurate when rendered for posts, terms, and users. Thoughts on how we could make them somewhat more abstracted?\n. --path=/app/wordpress/`` is invalid syntax because a backtick is a special operator in Bash. I'm not sure where you came across that example.\nKeep in mind --path=/app/wordpress/ means your app is installed off the system's root directory. If you're specifying a path relative to your current directory, the syntax is --path=app/wordpress/ (note no preceding forward slash)\n. > Have you thought about adding a link to CONTRIBUTING.md or create an ISSUE_TEMPLATE with a bit of text?\nThose would be good additions too.\n. > Could you tell me the reason?\nThe reason that Github issues are no longer for general support questions?\nIf so, it's because I no longer want to offer general support through Github issues. As more people use WP-CLI and ask general usage questions, offering free support through Github issues becomes more of a burden and less sustainable. We need to keep the issue backlog focused on bug reporting and enhancements.\n. Hi @grappler,\nOur support policies have changed (#3252), and Github issues are no longer the place for general support questions.\n. Thanks :)\n. Hi @helgatheviking,\nOur support policies have changed (#3252), and Github issues are no longer the place for general support questions.\n. > Well, at the very least I would suggest that the instructions or common issues include information on required permissions settings.\nHappy to consider any suggested changes. Here's how you can contribute to the docs: http://wp-cli.org/docs/contributing/#improving-our-documentation\n. @harry-wood Like I mentioned in the other issue, this particular error message comes directly from WordPress core, not WP-CLI. The appropriate place to suggest improvements is WordPress Core Trac.. > I couldn't figure out how to setup and alias in my wp-cli.yml file to connect to a non-standard port, found something in the github discussions in which you decided not to offer a port key in the alias definition and ultimately that it should be passed in this format\n\n[...]\nI think there should be something explicit in the docs saying something like, \"If you're setting up an alias with a non-standard port, append the port to your host IP with a colon.\" with an example.\n\nWhere did you look for this information? Did you review the config page by chance? I'm curious where you think might be the best place to put this information.\n. In order to produce a wp package check-update command, we need to:\n- Fetch the latest version of each package: https://github.com/composer/composer/blob/eb40287691645157ac2f079930265baad9cd7295/src/Composer/Command/ShowCommand.php#L265 https://github.com/composer/composer/blob/eb40287691645157ac2f079930265baad9cd7295/src/Composer/Command/ShowCommand.php#L228-L259\n- Filter out the ones that aren't outdated: https://github.com/composer/composer/blob/eb40287691645157ac2f079930265baad9cd7295/src/Composer/Command/ShowCommand.php#L319\n. Sticking with listing available updates on wp package list for now, instead of prompting to update. I'd like package management to soak a bit longer before introducing another blocking behavior.. Actually, wp cli update --stable will be sufficient for this.\n. Hi @morfikov,\nOur support policies have changed. This question falls outside of a bug report, enhancement request, or documentation suggestion.\n. Hi @grahamlutz,\nOur support policies have changed. This question falls outside of a bug report, enhancement request, or documentation suggestion.\n. > Can error handling be added to display a warning, instead of wp-cli halting with a PHP Fatal error?\nWe can handle the exception. It will need to be a hard error though, instead of a warning and continuing.\n. > I tried to update with wp core update.\nShouldn't that be wp core update --nightly, to update to the latest nightly?\n\nIs it possible to skip cache for the command? Like --skip-cache or similar?\n\nNo. You shouldn't have to think about skipping the cache. If you need to reset things, you can delete the cache directory.\n. > Shouldn't that be wp core update --nightly, to update to the latest nightly?\nSorry, I was incorrect. It should be wp core download --version=nightly. wp core update doesn't support --version=nightly\n\nI was expecting it will fetch new 4.6-RC1-38238 from dot org. It seems we are ignoring later part of the version string.\n\nWhy do you expect that wp core update handles nightly versions?\n. wp core update doesn't support --version=nightly, because it calls the WordPress updater under the hood, and the WordPress updater doesn't understand nightly as a version.\nIf you want to install the nightly build, you can use wp core download --version=nightly\n. Can you share wp --info ?\n. Nevermind. I just confirmed the bug.\n. What would it do?\n. > May I send a PR?\nSurely.\n. > I would like to propose that the update to the new ssl-only wp-cli version also changes the configuration automatically\nI agree \u2014 this makes sense.\n. @aaemnnosttv Can you add a functional test case for this?\n. > I would need to modify the packages composer.json that the wp-cli tests use. Can you point me in the right direction there?\nYou could modify the composer.json with sed. Here's an example: https://github.com/wp-cli/wp-cli/blob/master/features/core-verify-checksums.feature#L15\n. > It's a little more verbose with the scripting in the scenario, but it works. You have any ideas as to how to clean that up, or you think it's ok?\nYou're headed in the right direction! I've left some comments.\n. > Not sure why this failed...\nDo the tests pass locally?\n. Have you verified the installation process completes successfully?\n. > Do you have an idea why PHP7 easts the output?\nNope :(\n. > Are you a Behat expert?\nNot necessarily. Sorry I haven't taken the time to debug this yet. I'll try to make time to do so in the near future.\n. Closing in favor of #3332\n. > Behat has a problem, I don't know what it is. It swallows stdout.\nHm, not locally according to d6870493f6d26a9b0c66c84697025bc31dee3c81\n. > I don't have access to /usr/bin/wp. I am running wp from ~/bin.\nCan you share wp --info, and the full output when you run wp cli update?\n\nThere has to be an option on wp cli update /path/to/binary.\n\nWe're not going to add an opinion.\n. What makes you think that you're running wp from ~/bin? Can you share which wp ?\n. Ok. It's hard to say what the problem might be without access to your environment, and further debugging.\n. > the version number is lowercased, but, in this case, case is important\nSeems like a bug :)\n. > Let me know if there's something I need to adjust before you can (maybe) merge this\nCan you include functional tests please?\n. \ud83d\udc4d \n. As another way of approaching this, you can also specify default values for wp plugin install:\nplugin install:\n- google-analyticator\n- adminimize\n- maintenance-mode\n- user-switching\n- advanced-custom-fields\nThere have been a few different implementations of this over the past few years (https://github.com/danielbachhuber/dictator, https://github.com/eriktorsner/wp-bootstrap/), but nothing so obviously good / standardized that it's made its way into WP-CLI.\nAnd, on the other hand, there are many perfectly viable alternatives, so it's not necessarily something that makes sense in WP-CLI\n. > Ha! Writing some update automation I expected to find wp plugin check-update like there is\n\nwp core check-update - but this command does not exist!\n\nYou can check for plugins with updates with wp plugin list: http://wp-cli.org/commands/plugin/list/\n\nIf there is any way to reliably check plugin update status, please give me a hint, I am stuck, THANKS!!!\n\nPlease see http://wp-cli.org/#support\n. > I just want to access the project specific defined ssh aliases and their values, how to do this?\nSee http://wp-cli.org/#support\n. > Wouldn't it be good if fatal errors in vendor code would be reported, but not break anything? Possible with PHP error handing?\nA fatal error is exactly that: fatal.\n. > May seem trivial, but why not just put that example into the docs to make it super understandable for everybody and avoid that micro-distraction?\n--fields=<fields> is actually a relatively common argument across WP-CLI commands: https://www.google.com/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=site%3Awp-cli.org%20fields\nIt's not really viable to include an example of every argument with every command. wp user list (doc) contains an example of the --fields=<fields> parameter though:\n```\nList users with only given fields\n$ wp user list --fields=display_name,user_email --format=json\n[{\"display_name\":\"supervisor\",\"user_email\":\"supervisor@gmail.com\"}]\n```\n. > it seems like that important source information is not saved anywhere, so it is not possible to list it.\nRight, this is correct.\n. Thanks for taking the time to write this out, @COLABORATI \nBecause WP-CLI is a mature project, new features are expected to be developed as community packages first.\n. > However, how would you implement the default behaviour for wp plugin install with a package?\n@COLABORATI Github issues aren't the appropriate place for support questions. See http://wp-cli.org/#support\n. > This is not a support question - I have to assume that you understand that very well.\nIf it's not a bug report or an enhancement to an existing command, then it's a support question.\nIf it's framed as \"how do you do X?\", \"how would you do X?\", or some variation of asking how to do something, then it's a support question.\nGithub issues aren't the appropriate venue for support questions, nor does using WP-CLI grant you commitments of other peoples' times for answering support questions.\nIf you disagree with this answer, that's fine \u2014 you're welcome to your opinions. However, I expect you to abide by the established policies for this issue tracker.\n. Hi @jgraup,\nOur support policies have changed. This question falls outside of a bug report, enhancement request, or documentation suggestion.\n. You can achieve the same by composing two commands:\n$ wp plugin install $(wp plugin list --field=name) --force\nWarning: Couldn't find 'airplane-mode' in the WordPress.org plugin directory.\nInstalling Akismet (3.1.11)\nDownloading install package from https://downloads.wordpress.org/plugin/akismet.3.1.11.zip...\nUnpacking the package...\nInstalling the plugin...\nRemoving the old version of the plugin...\nPlugin updated successfully.\nI'll include this as an example in the docs\n. > Is the first $ your bash prompt? I use zsh and have a custom prompt, but I it didn't work when I included the first $.\nNo, $ is just an indicator for a command being entered into the bash prompt (compared to output from the command).\n. @jb510 You're using bash substitution, which means you're running two separate commands. You'll need to also run wp plugin list --skip-plugins --skip-themes. wp scaffold plugin is dependent on get_bloginfo( 'version' ) and the WP_PLUGIN_DIR constant, which are only available within a functional WordPress install.\nFor an alternative implementation, you might consider 10up's Yeoman generator: https://github.com/10up/generator-wp-make\n. \ud83d\udea2 \n. > wp export does produce an incomplete xml dump, it just stops after the last term.\nDoes this reproduce on a new WordPress install with all themes and plugins deactivated?\nCan you share specific steps to reproduce?\n. symfony/console v3.1.3 requires php >=5.5.9 -> your PHP version (5.3.29) does not satisfy that requirement.\n. Not bumping to PHP 5.5 at this point.\n. > we can greatly reduce the number of included dependencies.\nAs it turns out, Composer is dependent on symfony/process\n. ... and Composer is dependent on symfony/finder:\n\"symfony/console\": \"^2.5 || ^3.0\",\n\"symfony/finder\": \"^2.2 || ^3.0\",\n\"symfony/process\": \"^2.1 || ^3.0\",\n\"symfony/filesystem\": \"^2.5 || ^3.0\",\nSo, we won't ever be able to remove Symfony from the dependencies.\nWe could potentially change the version constraint to \"^2.2 || ^3.0\", but we'd need to make sure the Phar is always built with ^2.2 for PHP 5.3/4 support.\n. > We could potentially change the version constraint to \"^2.2 || ^3.0\", but we'd need to make sure the Phar is always built with ^2.2 for PHP 5.3/4 support.\nI think this is more complexity than it's worth. Plus, if it breaks, it breaks a lot of things for a lot of people. Punting on this for now.\n. \ud83d\udc4d \n. @johnbillion FYI - the scope:command label is deprecated, in favor of labels for each specific command.\n. @johnbillion Do you have time committed to working on this, or should I finish it up?\n. @johnbillion I'd like to get this landed. Last chance to push your changes, otherwise I'm going to take this forward.\n. > Test for user session destroy. It may be helpful. :)\n@ernilambar Thanks! Really helpful :)\n\nwp user session drop - Destroy all sessions of all users.\n\nGiven this is doable with xargs, I don't think we need a command for it. See 1ba3ba7462bbe109f59d9b3cef3b2fa6bf21882a\n. > has this issue been resolved? Running into the exact same error with WP 4.6 and WP-CLI 0.24.1 (doing search-replace on remote server)\nYes. You're likely running into a different issue.\n. @JonathanDoughty Github issues are no longer the appropriate place for general support. Please see http://wp-cli.org/#support\n. > I think it might be handy for future developers ( who inherit our projects ) for the config file to have all the comments in that the wizard generated one has.\nSure, I'm amenable to this. Note that our wp-config.php doesn't include some constants intentionally, so the comments should just reflect the constants defined in WP-CLI's template.\n. > That would imply a way to pass SQL-conditions to the command line tool in some way\nWhy can't you just use a SQL statement in this case? post content shouldn't have serialized data\n. Can you share wp --info? And, generally, more details about your configuration?\n. Actually, it looks like Requests v1.7 needs to be tagged, and then WP-CLI can use that.\n. > be good if we fast fix this and release\nWe're waiting on @rmccue to tag the new version of Requests.\n. > really though if this is now included in core surely we don't need to require it in wp-cli since it will load when we load wordpress?\nWP-CLI works independently of WordPress.\n. Previously https://github.com/wp-cli/wp-cli/pull/3199#issuecomment-235329339, which should've failed.\n. Thanks for the report! This is a bug :)\n\nif you are open to a PR, I'm open to giving it a go\n\nSorry \u2014 it was easiest for me to just put together a PR as I was researching the issue.\nIf you want to try your hand at contributing though, there are a few issues tagged 'good-first-issue'\n. @raptor235 Is this a bug report?\n. What's the bug, specifically? The way you've reported it makes it seem like it's user error.\n. WP-CLI uses the mysql binary under the hood in some cases #1324\nFor commands that call the mysql binary, I think it'd make sense that my.cfn is used, no?\n. > However when the same user is specified via my.cfn WP-CLI gets access\n\ndenied... that's what's actually not working.\n\nOk. What's the bug in WP-CLI then?\n. Ok. Based on this report, it's not clear to me what the actual bug is.\nIf you can provide clear steps to reproduce, and spend some time identifying the actual bug, we can look into fixing it.\n. > I'm not sure if this is WP problem or wp-cli, as there was change for http api for wp connections over the proxy (which is my case). If this is wp core issue, please ignore.\nWP-CLI calls WordPress under the hood, so this is likely a problem with WP itself.\n. > The thing is that searches from WP itself works fine. Results show up in the web interface. But I can't get them via proxy & wp-cli.\nI think this is because WP-CLI is using an older version of Requests. See https://github.com/wp-cli/wp-cli/issues/3315\n. > now I just get Unknown when running wp cache type\n\"MemcacheD Is Your Friend\" isn't one of the plugins we're checking for.\n. > where can I request plugins that are checked by wp-cli for object cache?\nI took a look at checking for MemcachedD Is Your Friend, but decided against it because it doesn't seem to be actively supported and hasn't been updated for a year. I'm not sure it's viable for WP-CLI to identify every possible object cache drop-in.\n. > is this something that wp-cli currently allows for or supports somehow?\nNot at the moment, but we could add support.\n. > EDIT object cache in use is Redis\nThis is a problem with Redis Cache, not WP-CLI.\n. > No, it fails on my terminal also.\nThis branch with my two most recent changesets fails on your terminal?\n. > Could we have documentation on how to setup an environment so that using --allow-root can be avoided?\nWe discourage use of WP-CLI as root. You should switch to another user.\n. > Trying to run wp-cli as WWW-DATA throws an error that the account does not exist.\n\nWhat do I need to do so this works correctly? Which user do I run it as?\n\nI'm sorry, but debugging this particular issue is outside the scope of WP-CLI's issue tracker.\n. > having documentation that explains its correct usage for different environments, even, if that's necessary. Is this documented somewhere?\nThere is lots of reference documentation on the internet about how to run a command in different environmental contexts. Given this particular question isn't specific to WP-CLI, it's not necessary to provide documentation about it.\n... I don't really want to debate this endlessly. Please respect the fact there are certain things we take responsibility for documenting, and other things we don't. Furthermore, Github issues are an issue tracker for the project, not a general discussion forum. For discussion, you can join the #cli channel on the WordPress.org Slack organization.\n. > We were playing with an empty database.\nFancy that. Good catch :)\n. > Could you restore the whole table list in db.feature?\nI've created a new db-check.feature, which is why the tests passed for me. Given all of the tables don't exist in 3.7, I think it's fine to only check one table.\n. Sorry, what's this in reference to?\n. > But it's not working, you have to specify a post_type:\nDo you have normal posts in your WordPress install?\n. > P.S. Still a good idea to tell that we can select multiple status / post_type with comma.\nThis example is already under wp post list, actually.\n. I see:\n\nThe last option will skip any author mapping.\n\nDid you miss that?\n. > Maybe you can check it and if it's error, maybe I can have solution so I can use my dropbox link?\nIf one ZIP file works, but the other does not, then the problem is with the ZIP file, not WP-CLI.\n. > What I'd like WP-CLI to do is to parse the contents of the .zip file and tell me what the version number of the plugin is. I don't know if there's an \"official\" location for the version string (e.g. the comment at the top of plugin_name/plugin_name.php perhaps?). The WP-CLI command would be something like \"wp plugin version plugin_filename.zip\" and would output just the version number.\nNew feature development is happening as community commands first. This sounds like a good candidate for a community command.\n. > I know that you can't really give server support, but I was wondering if you could point me in a direction where I can further troubleshoot this. Thank you in advance for any support you can provide.\nGithub issues are no longer an appropriate venue for support\n. WP-CLI doesn't natively support defining the dbname at runtime, nor will the alias feature persist a dbname variable. An alias can include 'user', 'url', 'path', 'ssh', or 'http'.\n. > So I'd need a whole second WordPress installation in order to reference an alternative database?\nNo. It's possible to do with a little bit of code.\n. \ud83d\udc4d \n. Sure, although lets put it further down the doc.\n. What problem does this solve?\n. > By making parameters available on the class at call-time, other cool things become possible, while still remaining compatible with the current way of doing things.\nRelated #2495\nGiven it's possible to do so, I think it makes most sense to first develop this independently as a standalone package. If it proves to truly be useful, it's something we can eventually consider including in WP-CLI proper.\n. > Am I supplying the array with wrong syntax or is this not supported?\nPassing multiple values to --slug=<slug> isn't supported.\n. > However, it appears that wp-cli ignores the proxy settings.\nI'm not sure why this would be the case. WP-CLI mostly uses WordPress functionality under the hood.\nCan you share specific steps to reproduce?\n. Ok.\nIf someone can point to the specific problem code within WP-CLI, then we can get this fixed. Otherwise, it's going to be difficult to address.\n. I've added a testcase to verify WP-CLI respects defined WP_PROXY_HOST and WP_PROXY_PORT settings: #3373\nThis particular issue must be something else.\n. @dtolj Actually, we can use this issue. Can you share your server configuration details?. Hi @scriptaimago,\nGithub issues aren't the appropriate venue for support questions. Please review: http://wp-cli.org/#support\n. @ernilambar Can we get a test in here too?\n. Previously #2501\nNew feature development is happening as community commands first. This sounds like a good candidate for a community command.\n. Hi @wujekbogdan,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. > I have noticed that we can generate invalid code if the post-type or taxonomy name contains a dash.\nCan you share an example, please, with specific steps to reproduce?\nWe're already producing a $machine_name variable for function names, so I'm not sure what exactly you're referring to.\n. > I think it is better to avoid to register a post type with dashes, because you loose a lot of time to understand why some things don't work. Then you loose time again to make an upgrade process to update the entries in the database.\nOk. Given this isn't technically a problem with WP-CLI, we're not going to change the behavior.\n. Oops :) Thanks!\n. Please update to the latest version of WP-CLI: http://wp-cli.org/#updating\n. Hi @Santana1053,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. > I see 'why' it's failing, but I have no idea why it's failing NOW and not a million years ago.\nYeah, I'm not sure why either at a glance.\n. > I think Ryan's suggestion about the WP-settings change is the culprit.\nThe wp-settings changes didn't have anything to do with setting of $_SERVER['SERVER_NAME']\n\nI'm unclear on how WP-cli used to pick up or pass through the domain name, but at a guess here if you defaulted --URL to the value of the main domain (i.e. Site URL) wouldn't that cover this and pretty much anywhere else that WP thinks it needs a domain?\n\nThe fix for this bug should be in WordPress core, I think. \n. > Because it really sounds like you passing the buck (perhaps to me, perhaps to core) and sounding like you don't care. Which I know isn't true, but that's what happens when you say \"No support here.\" without doing the modicum of troubleshooting to actually determine where the issue is, so we (the community) can actually get the bloody issue fixed.\nJust to clarify, I'm drawing a line between what I'll take responsibility for fixing, and what I consider outside the scope of my responsibility to fix. I don't claim responsibility for troubleshooting every reported bug. Furthermore, how I spend my volunteered time isn't something I'm open to debating.\n\nIdeally a sane default value for $_SERVER['SERVER_NAME'] from siteurl should probably be applied by WP-CLI to address this (and potential other pitfalls we've just not realized exist from the lack of a super global).\n\nI don't think this is an easy change, and has the potential for unintended consequences.\nAt this point, I think the issue should be addressed with https://core.trac.wordpress.org/ticket/25239\n. > I am curious as to what unintended consequences?\nThings breaking unexpectedly. I'd clarify this as \"unexpected, unintended consequences\". It's hard to know the impact of changing a global configuration variable in advance.\n. > AFAIK WP.org core checksums do not change.\nRight, but if they're on the filesystem, then they could be manipulated by nefarious code. It's better to leave them uncached, to ensure we're getting legit checksums each time.\n. Good suggestion, @cap5. I do like the <> syntax for this use case. However, I'm not sure how cleanly the concept will apply to the underlying code.\nHow do you think a negated argument should be passed through to PHP, and then handled by the command?\n. Duplicate of #3374\nThis is an issue with WordPress core, and is fixed in 4.6.1\n. > Still getting the error in 4.6.1\nOk. This is an issue with WordPress core, not WP-CLI.\n. Thanks @Ipstenu . Thanks!\n. Build fails on trunk because of #3384\n. Hi @cec,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. One problem is that WP_CLI::add_hook() can be called before we even know whether WordPress is available, meaning we'd need some system for converting existing callbacks to the new WP_Hook format.\n. Can you share wp --info, and the version of WordPress you're running against?\nWP-CLI v0.24.1 calls wp-settings.php, not wp-settings-cli.php for WordPress 4.6 and higher. For older versions of WordPress, wp-includes/plugin.php is required early: https://github.com/wp-cli/wp-cli/blob/master/php/wp-settings-cli.php#L18\nI'm not sure where you copied your example from.\n. \ud83d\udd28 \n. > I'd suggest you stay as close to the WP query mechanism (or SQL if you will) as possible. 'Select all' and filter out what you don't need will probably get you into trouble on larger amounts of data.\nCan you put together a proof of concept for this? It's unclear to me how the abstraction should work, so I'm not sure it's an enhancement we can commit to creating.\n. While I like the suggested syntax, I don't believe this feature would be easily viable to implement in a generic way. I'm open to reconsidering if someone can put together a proof of concept.\n. > Does wp-cli have to be installed on both ends, or is it enough to have it on my laptop/controller device?\nIt needs to be installed on both ends.\n. Hi @almai,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. Hi @info2000,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. > I thought I'd get some feedback first.\nWhy does this need to be a part of core WP-CLI? Can you explain in further detail what you're trying to do?\n. @aaemnnosttv Any further notes on this?\n. > In the aforementioned issue, my use case there is that the experience of writing commands could be improved by making the arguments available before the method is invoked (there's more to it than that of course but I won't rehash that whole issue again here). The least obtrusive way this can be made available (without having to reparse everything from the request) would be publishing an event with that data.\nWhy can't you have your callback access WP_CLI::get_runner()->arguments and WP_CLI::get_runner()->assoc_args ?\n\nI was a bit surprised to see that the internal hook system doesn't allow for data passed to it's hook callbacks and I don't really see much reason not to. Was this ever considered before?\n\nIt's something I've thought about, but haven't ever come to the conclusion that it was necessary for a couple of reasons:\n1. WordPress has an existing actions and filters system you can use when WordPress is available.\n2. It would become something else to maintain, make bug fixes to, etc. etc.\n. > Is there a way to get the same arguments that are passed to the method before it's called?\nThere isn't, but I can see why that'd be useful. Let's think on this a bit.\n. > Let's think on this a bit.\nI've thought about this and attempted a different approach: assigning the command execution data to WP_CLI::get_runner(). However, the WP_CLI\\Dispatcher\\Subcommand instance is the one that does the PHPDoc parsing, so it can't pass its newly filled argument values back up to the runner. \nAdding support for hook callbacks in #3470\n. Hi @tersmitten,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. Hi @rgoodie,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. Hi @halian-vilela,\nGithub issues are no longer an appropriate venue for support questions. Please review http://wp-cli.org/#support\n. > We've encountered an issue during theme installation with wp-cli running the following command where the command does not complete if the domain that the theme is being installed on does not point to the appropriate host:\n\n[...]\nThis points at the DNS of the domain (a GoDaddy parked domain page) as the domain isn't currently pointed towards any sort of hosting. The process will continually wait on this with no way to proceed until it eventually seems to silently fail.\n\nSome important qualifying questions:\n- Does it happen for other commands too (e.g. installing a plugin), or just installing a theme?\n- Does the issue reproduce consistently, or intermittently?\n- Are you running custom code? Does the issue produce on a stock install of WordPress, or when you include --skip-plugins --skip-themes?\n- Can you share the full output of the command?\n\nIs there a way to work around this without modifying the domain's DNS, or am I missing something with how this works? I looked at the associated theme function and I don't see where it would be doing this sort of check, though my PHP is pretty bad.\n\nYeah, I'm not quite sure why it would be doing a check of itself either. Seems suspicious.\n. Ok.\nUnfortunately, without clear directions on how to reproduce this issue locally, I can't help determine the source of the issue.\n. > is there any other information from us that could help narrow it down?\nSpecific reproduction steps, of course.\n\nThis issue should be reproducible by having a domain pointed to a provider (in this case GoDaddy, though it may occur elsewhere) where a domain is not actually hosted, so a generic parked page that doesn't have a wordpress installation. \n\nUsing a WordPress site with an invalid domain foobar.blog, I can't reproduce the issue:\nsalty-wordpress \u279c  themeinstalltest  wp core download\nDownloading WordPress 4.6.1 (en_US)...\nUsing cached file '/home/vagrant/.wp-cli/cache/core/wordpress-4.6.1-en_US.tar.gz'...\nSuccess: WordPress downloaded.\nsalty-wordpress \u279c  themeinstalltest  wp core config --dbname=themeinstalltest --dbuser=root\nSuccess: Generated 'wp-config.php' file.\nsalty-wordpress \u279c  themeinstalltest  wp db create\nSuccess: Database created.\nsalty-wordpress \u279c  themeinstalltest  wp core install --url=foobar.blog --title=foobar\nSuccess: WordPress installed successfully.\nsalty-wordpress \u279c  themeinstalltest  wp theme install https://downloads.wordpress.org/theme/denim.0.3.zip --activate\nDownloading install package from https://downloads.wordpress.org/theme/denim.0.3.zip...\nUnpacking the package...\nInstalling the theme...\nTheme installed successfully.\nActivating 'denim'...\nSuccess: Switched to 'Denim' theme.\nIf you can provide exact reproduction steps I can run locally that point to a problem within WP-CLI, then I can assess the issue and look into a fix. Otherwise, it's likely the problem exists independent of WP-CLI.\n. > It seems that WP-CLI can randomly trigger wp-cron to fire (aside from wp cron commands due to this. Is this by design? It seems unexpected to me, but I will admit may be missing something.\nYes, this is by design. Just like any web request can trigger WP Cron, any WP-CLI request can trigger WP Cron. I agree it can seem unexpected. Many ways of how WordPress works are unexpected :)\n\nAs a work-around, we can explicitly define( 'DOING_CRON', true ) in a script and wp --require=script.php, but we weren't sure if this is expected behavior.\n\nI don't think this approach is very precise because sometimes plugins pay attention to the DOING_CRON constant. It would be better to define ALTERNATE_WP_CRON=true in some way that's only executed for WP-CLI requests. See #3104\n\nSo what's happening in our example, is that wp theme install file.zip (any wp command really) is sometimes running at just the right moment to trigger wp-cron and GoDaddy is tarpitting us resulting in a huge delay for the command to complete.\n\nRight, this makes sense to me.\n. Is this a bug with WP-CLI, or the environment?\n. Can you provide steps to reproduce, please?\n. Ok. I think this is a problem specific to your WordPress install, and not WP-CLI.\nIf you can identify the problem within WP-CLI, that's something we can get fixed. Otherwise, Github issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. @nyordanov Looks good, just one question.\n. This is fixed by #3404\n. > When I run wp core update-db --network --path=/path/to/wordpress --skip-plugins=redirection --allow-root I receive multiple sites that fail to update. \nI believe the problem is that the --skip-plugins=redirection argument doesn't get passed through when launching child processes to update the db on subsites. Could you deactivate the plugin temporarily to see if the command works with the plugin disabled?\n\nEven if this isn't a bug, instead of just warning that the update didn't work, I would expect to receive an additional verbosity about what failed when using the --debug flag.\n\nI agree \u2014 knowing why the error occurred would be more helpful.\n. Hm. I think the next step would be to get more verbosity out of the warning, so we can see what's actually failing.\n. > Could we instead capture stdout and stderr and display that if the --debug flag is set as a traceback?\nI'm tempted to actually display the entirety of STDERR in the warning message. It's captured in $process->stderr.\nTo help inform us as to whether or not this is useful, could you install WP-CLI via Composer or Git, make the modification, run wp core update-db --network, and see if the display of STDERR is helpful for debugging the issue? \n. Great debugging! This is fascinating :) Look forward to learning more.\n. > If you think this sounds good, I'll get moving on 1-3. 4 will definitely require some additional brainstorming, but I'm glad to help, brainstorm, propose patches, etc.\n1 sounds legit \u2014 please go ahead and submit a PR.\nFor 3 and 4, I think we should handle that in part with #3139. No immediate action needed at this point.\nFor 2, we probably don't need additional debugging details if we instead throw a warning when launch_self() receives -1 as the return code.\n. > In regards to 2, should we have a different warning show up when the exit code is -1?\nI was actually thinking a bit more lower-level, inside of WP_CLI::launch_self(). We'd just inspect the process object to see if -1 was the return status, and use WP_CLI::warning() to indicate something might be amiss.\n. Thanks! (Although we may want to rethink having this in the README, if we have to update it each release)\n. \ud83d\udc4d \n. > Should create site and delete site add a trailing slash instead?\nYes, I suppose so. Sorry for the runaround. \n. \ud83d\udea2 \ud83d\udea2 \n. No:\nAnalyzed 66455 rules to resolve dependencies\n - Installing package\n - Error: guzzlehttp/guzzle 6.2.x-dev requires guzzlehttp/promises ^1.0 -> satisfiable by guzzlehttp/promises[1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.1.0, 1.2.0, 1.0.x-dev].\n - Installing package\n - Installing package\n - Installing package\n - Installing package\n. Hi @anhskohbo,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\nHere's one way you can share packages on a server: https://runcommand.io/to/shared-wp-cli-packages/\nThe installation process may be improved upon in the future, see #2565 and #2532\n. > I'm still experiencing the issue using WP-CLI 0.24.1.\nThis is already fixed for 0.25.0 in #3380\n. Thanks for tracking this down!\n. > If you add an access token to the API request the limit increases to 5000 per hour.\nGood to know, thanks.\n. > You would have to set it; but simple enough to define as a constant in wp-config.php.\nSure. I don't think it's going to work in this case though.\n. I spent several hours last week trying to get this infrastructure to work. Ultimately, I wasn't successful because something in the network stack intermittently returned a 403 error.\nFor now, I've reverted use of https://github-api.wp-cli.org. I think we could do this in the future, but we need a better plan in place for all of this infrastructure.\n. > Maybe try to use this?\nOh, that's pretty cool. Thanks for the recommendation, @andreiglingeanu !\nI think the 403 was actually coming from CloudFlare, because WebFaction didn't have a 403 in their logs. However, to remove CloudFlare from the DNS stack, I'd need to set up wp-cli.org on WebFaction in order to serve it over SSL. It's a bit more involved of a project than I have time for right now.\n. > Why would you even keep CloudFlare in the game, in this case?\nFree CDN, so I don't have to worry about bandwidth overages.\n. > I think they have some sort of excluding mechanisms, no?\nThey do, but I was still running into issues with it.\n. Adding this to the website wish list because it'll need to happen when I figure out a long-term plan for infrastructure maintenance.\n. For the record, this is the error:\ncURL error 35: gnutls_handshake() failed: A TLS fatal alert has been received.\nBased on https://github.com/EFForg/https-everywhere/issues/4645 and https://discuss.circleci.com/t/php-compiled-with-curl-gnutls-curl-fails-to-validate-some-certs/1641, it seems the SSL cert CloudFlare provides (which uses ECDSA) causes the problem.\nAlthough, I'm not sure why our requests to the Package Index URL don't have the same problem...\n. > Although, I'm not sure why our requests to the Package Index URL don't have the same problem...\nOh, because we're using Requests in this context, and package management uses Composer, which has its own RemoteFilesystem class that uses file_get_contents()\n. To address this issue, I've updated our CloudFlare account to the $20/month plan which also generates the alternatively encrypted certs. Based on the results of https://travis-ci.org/wp-cli/wp-cli/jobs/163221604, this seems to fix the issue.\n. > After each batch of WXR items is imported, the import attempts to replace all occurrences of OldURL with NewURL. I would rather do this separately from the import in a search-replace operation (if the importer could save all the source->dest strings is a CSV, perhaps) or when the importer is finished with the entire directory of imports.\nIs this code within WP-CLI, or the WordPress Importer?\n. Ok. A better place for this enhancement is going to be https://github.com/humanmade/WordPress-Importer\nThe existing WordPress Importer is basically in LTS mode right now. It doesn't make sense to continue to monkey patch new things into it.\n. Hi @gbcxjoe,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. Couple more notes:\n1. It appears this only affects WP_DEBUG=true, because $wpdb calls its bail() method when it can't connect to the db host\n2. Given this check only needs to run in  >= WP 4.6 (because older WP will be covered by wp-settings-cli.php), we may be able to just relocate the check to nonce_headers.\n. > we may be able to just relocate the check to nonce_headers.\nThis filter doesn't actually exist. The one I remembered from before is nocache_headers, which is called from wp_not_installed().\n. > So I'm asking once again: what prevents us from doing this? Does this against some \"policy\" in this tool?\nDid you read through #674 ? Defining WP_ADMIN generally for WP-CLI causes more problems than it solves.\n. > Do you know any issues when defined WP_ADMIN breaks something in WP CLI during plugin activation?\nI don't, but it would bleed through to the remainder of the process.\nGiven the history of unexpected consequences with WP_ADMIN=true, I don't think it's worth the effort to conditionally define it in the case of wp plugin activate.\n. Thanks for the report, @wolfkang \n\nThis seems to be a bug. I also can reproduce this.\n\nI'm unable to reproduce this with the testcase in #3441.\nwp db query runs before WP loads, so I'm not quite sure how WordFence would be loading. Can you share reproduction steps?\n. Oh, it's user error.\nYour use of wp db tables needs --skip-themes as well. It should be wp db query \"CHECK TABLE $(wp db tables --skip-themes | paste -s -d',');\" --skip-themes\n$() is a native bash feature, not something that WP-CLI implements.\n. @fisele I merged this too soon :( \nWhen using this script, I get this error:\n```\n+ '[' -z ']'\n+ '[' -z localhost ']'\n+ EXTRA=' --host=localhost --protocol=tcp'\n++ mysqlshow --user=root --password= --host=localhost --protocol=tcp --port -h localhost wordpress_test\n++ grep -v Wildcard\n++ grep -o wordpress_test\nmysqlshow: [Warning] Using a password on the command line interface can be insecure.\nmysqlshow: [Warning] option 'port': value -h adjusted to 0\nmysqlshow: Cannot connect to db localhost: Unknown database 'localhost'\n+ RESULT =\nbin/install-wp-tests.sh: line 121: RESULT: command not found\nbash bin/install-wp-tests.sh wordpress_test root '' localhost latest returned exit code 127\n```\nCan you submit a new PR with this feature that also fixes the error?\n. Hi @alicengiz,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. @fisele I reverted the other PR, so there's a merge conflict now too.\n. > then I close this pull request, and open a new one via a newly forked repo?\nSure. Please create a separate feature branch for your changes too.\n. @fisele This still doesn't work in my test. Now I see:\n```\n++ grep -e '^[0-9]{1,}$'\n+ '[' ']'\n+ '[' -z ']'\n+ '[' -z localhost ']'\n+ EXTRA=' --host=localhost --protocol=tcp'\n++ mysqlshow --user=root --password= --host=localhost --protocol=tcp\n++ grep -o wordpress_test\n++ grep -v Wildcard\nmysqlshow: [Warning] Using a password on the command line interface can be insecure.\n+ RESULT=\nbash bin/install-wp-tests.sh wordpress_test root '' localhost latest returned exit code 1\n```\n. @fisele Thoughts on the error I'm seeing?\n. @fisele Happy to work with you on this again when you have time to see it through to the finish line.\n. Back to square one #3445\n. > Is this a bug, or a configuration error? I think my configuration makes sense from a human perspective.\nI think it's a configuration error. You're missing a trailing colon on the alias:\n@subsite:\n    url: subsite.mysite.com\n. Ok. I was able to reproduce this with #3450\nWhat's happening is that the top-level url value is still being passed through to the command as a local argument to the command.\nIf we were to change the current behavior, I'd have WP-CLI ignore any use of url, user, path, http, or ssh in a general config when an alias is being used. However, this isn't easily possible at this point because the config parsing happens at a different point than alias registration.\n. > However, this isn't easily possible at this point because the config parsing happens at a different point than alias registration.\nActually, it turned out to be easier than I expected.\n. Is this a bug? If so, what are the steps to reproduce?\n. Introducing a new --no-transients flag seems sufficient to me.\n. I'd be amenable to adding a --transients flag which filters to all transients and supports the inverse, --no-transients, for excluding transients.\n. > Personally I am opposite to adding such specific filter parameter. I believe, in core, we should be adding base achieve such feature.\nWe can add a negate search too if you'd like. That transients (a caching mechanism) are stored in the options table is a bit of a WordPress-ism. I think wanting to filter them out is a totally valid use case.\n. Hi @highacid,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. Thanks!\n. > We need use line() at here.\nWhy? WP_CLI::log() supports the --quiet flag, while WP_CLI::log() does not.\n. > When you run wp import wp.xml without --debug flag.\nSorry, I'm not sure I follow. Can you elaborate?\n. > Let me know if you need any more information to reproduce this issue.\nDoes WordPress itself work as expected in PHP 7.1.0-dev?\nCan you share the output of /var/logs/syslog when one of these segmentation error occurs?\n. > Some more info: when I use sudo wp core is-installed --allow-root I do not get the segmentation fault, but I also don't get any output at all.\nThis is the expected behavior of wp core is-installed. It uses exit codes to inform you whether or not core is installed.\n\nAlso, I thought I'd mention that I have used WP-CLI heavily on PHP Version 7.0.11-1 before without issues so this might be a problem with the Vagrant box.\n\nYes, it does seem like it's environmental at this point.\n. @louisremi Sure \u2014 want to submit a PR? https://github.com/wp-cli/handbook/blob/master/plugin-unit-tests.md. We can't really change the behavior now without causing a breaking change.\nwp user update passes its arguments through to wp_update_user(), which technically could accept an argument of user-pass.\nIf you use RESTful WP-CLI, this process will exhibit more strict behavior https://github.com/wp-cli/restful\n. This issue was fixed in v0.23.0: #2483\n. > Using --version=latest should be the same behavior as omitting it, no?\nYes, I think we should make sure the cache key always represents the version.\n. \ud83d\udc4d \n. > Can we define where this should be point at to regen?\nwp media regenerate only applies to an individual site on the WordPress multisite instance.\nTo designate which site you'd like to run wp media regenerate against, you can use the --url=<url> param.\n. > Examples needs to be updated for media regenerate\nExamples are regenerated on every release. We haven't released v0.25.0 yet\n. > We have added progress indicator before each message.\nAh, sorry, I misunderstood. Thanks for taking care of it.\n. Does the problem reproduce in a fresh WordPress install?\n. Does it reproduce without WooCommerce activated?\n. > No problem with new wordpress installation and new database, without\n\nplugins.\n\nOk. The problem lies with one of your plugins then, not WP-CLI.\n. > A way to skip over archived/deleted sites would be helpful here.\nWhy not just list sites that are active?\n. Hi @bph,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. Tests fail because of #3483\n. @wp-cli/translators Could you take on ^ sometime before midday Tuesday Pacific time please?\n. > Just a question, we are talking about 0.25.0 version but in the index.md it's still 0.24.1 which is mentioned. Is there an automatic process to update version in files ?\nThere isn't at the moment. I'll make sure to handle that in https://github.com/wp-cli/wp-cli/issues/3487\nWe could maybe make it scriptable as a part of https://github.com/wp-cli/wp-cli/issues/2768\n. > Anyway, can you tag like v0.24.1 on wp-cli.github.com repository too when new version is released.\nYes, I will do that going forward.\n. @ernilambar Have bandwidth in the next 72 hours or so to put together a list of the WP-CLI packages that have been either published or updated since the v0.24.0 release, along with a little summary of what each package has done? It's hopefully only an hour-ish worth of effort.\n. Thanks @ernilambar \n. \ud83d\udea2 \n. Build failing because of the DNS attack\n. @michaelalhilly Can you share the contents of your wp-config.php, minus any secrets? It appears there's a syntax error.\n. @miya0001 Sounds good.\n. Hi @afail,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. @szepeviktor Can you update the appropriate tests please?\n. @szepeviktor Looks like the build is still failing.\n. > Is it seem to be already present?\nCould be. Including \"here\" is more precise though.\n. Yes, I think it's fine as is.\n. Hi @dnaber-de,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. > The reason is, that I have ElasticPress enabled which triggers an HTTP request.\nThis isn't a bug with WP-CLI, but something associated with ElasticPress.\nIf the problem is reproducible on a stock WordPress install with no active plugins, then it could be a bug with WP-CLI. If the problem is only reproducible when a specific plugin is active, then it's not a bug with WP-CLI.\n. > Well obviously the Requests-lib shipped with WP-CLI is incompatible with that one in WP-Core. This can only be handled by WP-CLI.\nRequests was updated in WP-CLI v0.25.0 to the same version as that in WordPress core, see #3315\nPlease update your copy of WP-CLI to the latest.\n. The existing logic is:\n```\nwp_version_check();\n$from_api = get_site_transient( 'update_core' );\nif ( ! $from_api ) {\n    return array();\n}\n$compare_version = str_replace( '-src', '', $GLOBALS['wp_version'] );\n$updates = array(\n    'major'      => false,\n    'minor'      => false,\n    );\nforeach ( $from_api->updates as $offer ) {\n```\nI suppose we could check for if ( empty( $from_api->updates ) ) instead.\nAny ideas how you ended up with a truthy but non-object value in the update_core transient?\n. > I don't remember seeing this warning message before updating wp-cli to v0.25.0\nWhich WP-CLI version were you running previously?\n. > Is there a way to reset transients, or force wordpress to wipe and remake the update_core transient?\nwp transient delete --all.\n\nforce wordpress to wipe and remake the update_core transient?\n\nwp core check-update does this when it runs actually.\n. Ok. I think this problem is specific to your environment \u2014 something (plugin or similar) must be clobbering the data somehow.\n. Build failing because of https://core.trac.wordpress.org/ticket/29783#comment:59\n. Hi @keerthankoundinya,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. Hi @JakeHenshall,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. This is unfortunate, but expected, behavior. wp import wraps the WordPress importer, which renders its messages in HTML. If you look closely, you'll notice other output includes HTML too.\n. > What is your \"minimum-stability\" set to?\nIt's set to dev in ~/.wp-cli/packages/composer.json...\n. Sorry, those are one and the same. \n. > I think it is modified on the fly, right?\nThis was just the hint I needed :) Fixed the error of my ways in #3519. Thanks!\n. Hi @amiga-500,\nOur use of __invoke() is deliberate; we do want the documented magic functionality.\nThere are a variety of ways you can register WP-CLI commands, so you don't necessarily need to use __invoke().\n. > Why this naming difference? PS using --status=all doesn't work.\nSee https://github.com/WordPress/WordPress/blob/master/wp-includes/class-wp-comment-query.php#L496-L522\n. Hi @migueldemoura,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. > I thought each one of those lines changed the corresponding option_value in wp_options. It appears that's not the case.\nCorrect. wp site option correlates to the site meta table. wp option is the wp_options table.\n. > Thanks for the tip. I would change the command description though ;)\nSuggested improvements are more than welcome in the form of pull requests. See the following for an introduction: http://wp-cli.org/docs/contributing/#improving-our-documentation\n. > And run vagrant ssh-config > ./ssh-config\nCan't you achieve the same by creating a SSH alias?\n. > Does SSH alias mean .ssh/config?\nYes.\n\nSSH alias is only in .ssh/config and sometimes I don't want to add aliases to there for vagrant machines.\n\nOk. Given there's a viable alternative that achieves the same goal, I don't think we need to add explicit support in WP-CLI.\n. Yep, np.\n. Hi @richardtape,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\nYour specific error is that you're running out of memory. You'll need to increase memory allocated to PHP CLI.\n. \ud83d\udc4d  Dig it\n. Build failing because of https://github.com/travis-ci/travis-ci/issues/6842\n. cc @szepeviktor \n. I don't want to run Trusty during the beta period. It's not worth it to have to spend time tracking down why the build is randomly failing.\n. Hi @th3penguinwhisperer,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. You're welcome :)\n. This change is originally from baaf3051b96c84a57a341525455db79125c5fe21\nCan you think of any ways this might break?\n. \ud83d\udc4d  Thanks!\n. @szepeviktor Suggestions?\n. @szepeviktor Meaning, suggest using sudo su; wp --allow-root cli update ?\n. Sorry about that \u2014 thanks for the fix!\n. Hi @mopquill,\nThanks for the detail. This type of request would be considered support though.\n. > would you care to point me in the right direction?\nSee http://wp-cli.org/#support\n. > The error failing out is cryptic, and this has been reported by the same guy that closed my thread.\nIt's also the second error listed on common issues and their fixes: http://wp-cli.org/docs/common-issues/#php-fatal-error-cannot-redeclare-wpunregisterglobals\nI'm the maintainer of WP-CLI, btw.\n. > That's not the same issue. It's also a fatal error, but that's about it.\nTo help the next person that comes along, could you submit a PR to the \"Common Issues\" doc with your suggested changes?\n\nFrom my perspective, I was reporting a bug that had already been reported, which would not fall under support.\n\nOk. I think part of the problem may be that we have two different working definitions of \"support\".\n\nClosing the thread as support and linking me to the page I already read doesn't seem to be in good faith, especially considering the time and effort I put into my original post for what turned out to be a bug after all.\n\nSure, but please appreciate the implicit demand of time you're making on someone else. Even though it was helpful for you to put together a comprehensive report, it's ultimately self-serving \u2014 to solve your own issue. \n\nAs a fellow developer, I understand that burnout can set in from overwhelming amounts of support requests for a free product (and that's not to say I don't appreciate all the work! -- and believe me, I really empathize), but I'd rethink the philosophy behind this behavior -- clearly I wasn't being lazy, I just wasn't familiar with the idiosyncrasies of this hitch.\n\nWhat would you suggest doing instead, that doesn't increase the maintenance burden?\n. > To me, support is \"fix my problem for me\" as opposed to \"this is a bug that is not practical to fix, see: #1631\" which takes about as much effort as closing the thread and linking me to the support section on the main site.\nJust for the record, while it may not seem to take a lot of effort, it does take more effort for me to work with you to track down the bug. I didn't know it was that issue at the time; if so, I would've linked to it.\n\nI took the time to write this report because it didn't work out of the box, after following all instructions perfectly.\n\nOh, you indirectly gave me an idea. I should clarify that bugs need to be reproducible in a fresh WP install: https://github.com/wp-cli/wp-cli.github.com/pull/253\n\nI personally usually do extensive FAQs. Make sure they cover all of the stuff people run into, so you really can just link them the page and close the thread.\n\nAs you learn how to use WP-CLI, and want to share your findings, pull requests to improve the documentation are more than welcome.\n. > This would require quite a few changes to tools at Bluehost.\n@voldemortensen In the interest of helping to produce an informed decision, could you spend a bit of time tracking down a couple of specific examples?\n. > to be clear, are we talking a rewrite of WP_CLI::warning() to exit with 1? Or just the above mentioned commands?\nThe latter. I'd change the behavior of each existing command. WP_CLI::warning() won't be changed; in fact, there are cases where we still want to display a warning without changing the return code.\n. > Did you think about having variable return codes to provide more context to the caller?\nI did. At this point, I'd much prefer to keep things simple. If we introduce variable return codes in this context, then all WP-CLI commands will need to be audited to ensure they're using the \"correct\" return code. Binary is much more straightforward.\n. > If we are installing 10 plugins and the only thing we get back is a return code of 1, it would be helpful to have information about which of those operations failed (and maybe even which, if any, succeeded)? Perhaps that can be sent to stderr?\nThis information is already sent to STDERR in the form of Warning::\nsalty-wordpress \u279c  wordpress-develop.dev  wp plugin install foobar edit-flow akismet\nWarning: Couldn't find 'foobar' in the WordPress.org plugin directory.\nWarning: edit-flow: An unexpected error occurred. Something may be wrong with WordPress.org or this server&#8217;s configuration. If you continue to have problems, please try the <a href=\"https://wordpress.org/support/\">support forums</a>.\nWarning: akismet: Plugin already installed.\n. Thanks, everyone, for taking the time to weigh in on this. I'm moving forward with the proposal.\n. > It is useful.\nWhy is it useful or necessary? Both of these bash variables have default values.\n. > Should they need default value?\nYes. Let's add default values in those scripts when the environment variable is empty.\n. Could you provide an example of how Drush uses this, how WP-CLI might use it, and why the current behavior isn't sufficient?\n. Ok. It seems like there's not much that's actionable at this point. This seems like a good idea, but it's not clear what the immediate use cases are.\nHow would you suggest proceeding forward?\n. Sounds good. Going to close it for now.\n. Seems interesting. I'd encourage you to develop this out as a community package first. We can consider it for inclusion in WP-CLI when it's getting close to feature complete.\n. Also, I'll be working on something similar with wp doctor and will share my learnings when I have them.\n. @doup Does the problem reproduce in a fresh install of WordPress with no plugins activated?\n. > When redefining WPINC to a custom value (e.g. source instead of wp-includes), which is fully supported by WP except for the update functionality\nWhere does WordPress say this is supported?\nwp-settings.php has WPINC hardcoded at the top: https://github.com/WordPress/WordPress/blob/master/wp-settings.php#L16 If you set WPINC earlier, you'll get a PHP notice.. Also, can you share wp --info and wp core version?. Hi @DuckDagobert, \nThis isn't something WP-CLI is going to support.. Looks like the Git build is proceeding just fine. Thanks!. > The output of the install command is now more verbose.\nGreat!\n\nI don't see that as an issue though. What are your thoughts?\n\nI don't see it as a problem either. In fact, it may be the eventual solution for #1501. @ocean90 Happy with this?. > I'm happy if you are! :)\nYep, looks good :)\n\nCode styling could be improved a bit, but this should probably be done in a separate PR because it affects CoreUpgrader too.\n\nSounds good. I'm generally fine with code style changes as long as there's good test coverage around code being changed.. @squarecandy I'm not sure I follow. Could you edit https://github.com/wp-cli/wp-cli.github.com/blob/master/_posts/2013-03-29-scaffolding-custom-post-types-and-taxonomies.md with your suggested changes, and submit a PR?. @squarecandy Where'd you submit it?. Hi @twentyfortysix,\nThis is an issue specific to WPML, not WP-CLI. Github issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. > Is there a particular compatibility reason we lock to this version of symfony/yaml?\nsymfony 3.x requires PHP 5.5.9, see #3304 and #3305. > I feel 0 remaining. is redundant here as all is already mentioned in the earlier sentence. Thoughts?\nMakes sense. Let's remove it in this case.. Hi @spartakusmd,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. > The problem is every time I experience a fatal exception the shell exits and I lose the session. Any ideas? I know this isn't technically a ticket, but I've been looking for support in a few places.\nGithub issues aren't an appropriate support venue.. Thanks for the report!\nBug introduced in bf6c7c093b977bc84bd932d10c3ec4689a452c16. > causing breakage in custom commands relying on them.\nCustom commands shouldn't call WP-CLI command class methods directly.. > OK, but not really my point. Deprecation does not equal removal. A random definition plucked from the interwebs: \"should not be used because there is (or there will be) a better alternative in that software that should be used instead\". It would be nice to have at least a little time to transition.\nNoted for the future.\n\nActually, I'm not following. Looks like this is encouraged in the WP_CLI::run_command() docs, no? Why should I write my own list subcommand if can just pass the data to a core command w/ run_command?\n\nSorry, I thought you were calling Term_Command->url() directly.\nCalling a command through WP_CLI::run_command() (and shortly, WP_CLI::runcommand() #3605) is supported, although WP-CLI only applies the backwards compat conversions if you launch a new process.. > although WP-CLI only applies the backwards compat conversions if you launch a new process.\nI'll make sure WP_CLI::runcommand() applies the backwards compat conversion too. Travis is being flaky. > You could merge it, this is untested shell code.\nI need to bump the WP-CLI version first. I typically let builds run through to completion as a matter of course.. @Ramoonus Thanks! Can you add 7.1 to the allow_failures category? It looks like WordPress has some cleanup to do.. +1. Hi @mikejakobsen,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. See aso https://make.wordpress.org/cli/handbook/common-issues/#php-fatal-error-allowed-memory-size-of-999999-bytes-exhausted-tried-to-allocate-99-bytes. Thanks!. We could transition to using a different theme from WordPress.org. If we did, I think I'd prefer to use one from Automattic, as that gives us the greatest likelihood of being around for the long term. > Only WP 4.7+ will be fully compatible with PHP 7.1\n\ud83d\udc4d . > There could maybe be an option in the cli for that? like --regex-flags=is and still leave them off by default?\nI'd be amenable to this.. Thanks for the pull request, @hason. I won't be able to accept the change at this time, unfortunately. See https://github.com/wp-cli/wp-cli/issues/3609#issuecomment-262975637. > On PHP 5.3 would be installed symfony 2.7 and on PHP >= 5.5 would be installed Symfony 2.7 or Symfony 3.\nSee https://github.com/wp-cli/wp-cli/issues/3305#issuecomment-240888816. > So if I use W3TC and your redis cache then I get Unknown?\nYou'll see \"Redis\", because the Redis cache is taking priority.. > However when I'm trying to run wp rewrite structure I keep receiving the following error because it's not reading those environment variables:\nThis is because wp rewrite structure uses proc_open() to launch a new process, and the custom environmental variables aren't passed through to the child process.\nIdeas on how this could be resolved?. Closing this as wontfix.\nWhen I originally implemented WP_CLI::runcommand(), I looked into passing all environment variables through to the new process. However, it doesn't appear possible for a PHP process to know of all of its environment variables, only to fetch the values for specific variables. WP_CLI::runcommand() persists the environment variables it knows of (a160df6bb933d09b5504403e640d1b445c7934c3) but there's no way for it to persist environment variables it doesn't know of.. > I'd like to propose adding a --force that overrides the is_multisite() check. This allows other software to do the check instead:\nAnd, just to clarify, it would only run the database conversion, not attempt to include the constants again?\n. When MULTISITE=>true and the database tables don't yet exist, WordPress will error before WP-CLI can execute:\n``\n  Scenario: Use the--forceflag whenMULTISITEconstant is already defined # features/core-multisite-convert.feature:4\n    Given a WP install                                                          # features/steps/given.php:47\n    And a multisite.php file:                                                   # features/steps/given.php:20\n      \"\"\"\n      <?php\n      define( 'MULTISITE', true );\n      \"\"\"\n    And a wp-cli.yml file:                                                      # features/steps/given.php:20\n      \"\"\"\n      require:\n        - multisite.php\n      \"\"\"\n    When I trywp core multisite-convert`                                      # features/steps/when.php:29\n    Then STDERR should be:                                                      # features/steps/then.php:15\n      \"\"\"\n  \"\"\"\n  $ wp core multisite-convert\n\n  WordPress database error Table 'wp_cli_test.wp_site' doesn't exist for query SELECT * FROM wp_site LIMIT 2 made by include('php/wp-cli.php'), WP_CLI\\Runner->start, WP_CLI\\Runner->load_wordpress, require('wp-settings.php'), require('wp-includes/ms-settings.php'), ms_load_current_site_and_network\n  Error: One or more database tables are unavailable. The database may need to be repaired.\n  cwd: /tmp/wp-cli-test-run-5846d253dd3393.29184616/\n  exit status: 1\n\n```\nHowever, you can make wp-config.php unwritable, runwp core multisite-convert, and then append the constants after wp core multisite-convert runs to achieve the same effect.. > Is this possible to use such URLs?\nI suppose not. wp plugin install uses the WordPress upgrader under the hood, which must not support the ftp:// protocol.. > This is minor but might make sense to update.\nIt does, thanks for flagging. There are a bunch of version references we need to make sure are update at release time.. Hi @ultimagriever,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. WordPress.org probably hasn't released the locale yet.. An idea from @Rarst: Run the test suite in different groups. This would decrease the execution time for each job, but lead to a greater total build time.\nPreviously https://github.com/wp-cli/wp-cli/issues/1992. > Do we have information (runcommand/profiler) on what is actually taking so long?\nNot detailed, but the cost is WordPress loading each time. Loading WordPress takes some amount of time. Every time we add a new test, we incur the cost of loading WordPress.. What sort of performance increase do you think this will yield?. Travis CI increased our limit to 70 min, so we should be good to go for the near to medium term.\nLonger term, I'm still excited by the idea of breaking commands into separate repos for easier maintainability. . @joshk No worries \u2014 increasing the build timeout solved our more immediate problem.. > increasing the build timeout solved our more immediate problem.\nThis is solution enough for now. Splitting commands out isn't actionable right now \u2014 added to the wish list.. Fixed by #3633. Hi @premier-web-design,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. Can you share steps to reproduce, please?. > It changed the first occurrence, but second occurrence remained unchanged. Then I ran the same command again and it changed the other occurrence. So i realize that it doesn't do the search-replace if there is multiple occurrence in a single string ( as if we are not using 'g' ( global ) option in sed )\nI'd consider this a bug in wp search-replace \u2014 and I'm surprised it took us this long to discover it.\nWe just added passing flags (#3639), so we should use g as the default flag.. @Kladizkov I tried reproducing this bug, but couldn't :( \n$ wp option update test_option '[\"dxample.org\",\"example.org\",\"dxample.org\"]' --format=json\nSuccess: Updated 'test_option' option.\n$ wp option get test_option\narray (\n  0 => 'dxample.org',\n  1 => 'example.org',\n  2 => 'dxample.org',\n)\n$ wp search-replace 'dxample\\.org' 'example.org' wp_options --regex\n+------------+--------------+--------------+------+\n| Table      | Column       | Replacements | Type |\n+------------+--------------+--------------+------+\n| wp_options | option_name  | 0            | PHP  |\n| wp_options | option_value | 1            | PHP  |\n| wp_options | autoload     | 0            | PHP  |\n+------------+--------------+--------------+------+\nSuccess: Made 1 replacements. Please remember to flush your persistent object cache with `wp cache flush`.\n$ wp option get test_option\narray (\n  0 => 'example.org',\n  1 => 'example.org',\n  2 => 'example.org',\n)\nThe default behavior for preg_replace() (doc) is to replace all matching instances, so we don't actually need the g flag.\nAre you able to reproduce this issue on a stock WordPress install? If so, can you send those reproduction steps?. Thanks for the additional details, @Kladizkov.\nI've been able to replicate the issue. The cause of the problem is this logic:\nif ( is_array( $data ) || is_object( $data ) ) {\n    // If we've seen this exact object or array before, short circuit\n    if ( in_array( $data, $visited_data, true ) ) {\n        return $data; // Avoid infinite loops when there's a cycle\n    }\n    // Add this data to the list of\n    $visited_data[] = $data;\n}\nThis logic was introduced in 29454e3b568a1d9d21e0487ab88579fde94d3b36 (#951). @itsananderson Not sure if you're still working with PHP anymore, but thoughts on how you'd approach this problem ^?\nEssentially, there are two identical arrays:\narray (\n  0 => 'some.thing@gmail.com',\n)\nOne isn't a reference to another though, so when the first array is replaced, the second array is skipped. It seems like the problem you were solving is exclusive to referenced variables.. Hi @tienloc1,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. Thanks for the detail, @ablears. \n\nRunning the same command directly via cli works as expected.\n\nThis isn't a bug with WP-CLI then. It appears the $() operator doesn't work as expected with shell_exec(). Funny enough, I actually ran into this the other day.\n\nit's not clear what's causing it to appear.\n\nHere's the source: https://github.com/WordPress/WordPress/blob/master/wp-admin/includes/class-core-upgrader.php#L117\nIt's not clear why WP_Upgrader::release_lock( 'core_updater' ); wouldn't have happened if the first update failed though. Any ideas?\n. @johnbillion Suggestions on how you think we should move forward with this?. Fixing this with documentation for now.. @harrissAvalon This issue seems incomplete?. @harrissAvalon It looks like you're missing a .htaccess file. Did you follow the setup instructions, including adding the mod rewrite declaration to your wp-cli.yml?. This is community package territory.\nSee some prior conversation in #1557. Thanks!. I'd think so, yes.. I'm not sure validating the directory name with regex is the correct direction to take, because it could have unintended consequences. \nCould we instead solely ensure the target directory isn't wp-content/themes or wp-content/plugins? Also, can you add a test for this?. > *Some brave guys Do Upper-Case theme slugs. We should not.\nI don't want to break anyone's existing usage though. We should only fix the immediate problem we're solving: . and other shorthand.. Thanks! . Just to confirm, you're suggesting we trim the slashes?. @johnbillion This is what I see:\n$ wp plugin install backupwordpress --version=3.6.2\nInstalling BackUpWordPress (3.6.2)\nDownloading install package from https://downloads.wordpress.org/plugin/backupwordpress.3.6.2.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nSuccess: Installed 1 of 1 plugins.\n$ wp plugin install backupwordpress --version=3.6.3\nWarning: backupwordpress: Plugin already installed.\nSuccess: Plugin already installed.\nDo I need to do something different to replicate?. > My steps to reproduce were incorrect. I've updated the ticket description.\nThanks, I've reproduced.\nThe source of the issue is WP_CLI::error_to_string():\n```\n/\n * Convert a wp_error into a string\n \n * @param mixed $errors\n * @return string\n /\npublic static function error_to_string( $errors ) {\n    if ( is_string( $errors ) ) {\n        return $errors;\n    }\nif ( is_object( $errors ) && is_a( $errors, 'WP_Error' ) ) {\n    foreach ( $errors->get_error_messages() as $message ) {\n        if ( $errors->get_error_data() ) {\n            return $message . ' ' . json_encode( $errors->get_error_data() );\n        } else {\n            return $message;\n        }\n    }\n}\n\n}\n```\nSpecifically, we're json_encode()'ing the data on the WP_Error object. In this case, the destination path gets extra slashes.\nGiven the data is informational, I think we can solve the problem by only JSON encoding the data when it's an array or object, and simply quoting it otherwise.. post_name is a valid field for wp_update_post() too. It's the post slug.. Thanks!. I'm not sure I follow. Can you explain in further detail?. \\WP_CLI::add_command( 'core git-update', '\\\\WP_CLI_Git\\\\Core_Command' );. > For example when the URL is http://localhost/dev/, doing wp site create --slug=newsite adds the site to the (erroneous) URL of http://localhost/newsite (instead of http://localhost/dev/newsite).\n@vmasto When you perform the equivalent steps through the WordPress admin, do you see the same behavior or different behavior?. Interesting. WordPress must follow a different code execution path for installing parent themes.. Duplicate of #2394\nYou can run wp plugin install --force <plugin|zip|url> to achieve the same effect.. Tests are failing on trunk because the WordPress.org plugins API is acting funny, see https://wordpress.slack.com/archives/meta/p1482353516001438. Tests are failing on trunk because the WordPress.org plugins API is acting funny, see https://wordpress.slack.com/archives/meta/p1482353516001438. @consc198 It sounds like this is an environmental issue (e.g. specific to your server configuration), not a bug with WP-CLI. Per the bug report guidelines, bugs need to be reproducible with a stock WordPress install.\nIf the current fundraising effort proves successful, there will be a forum for general support in early 2017.. It may be related to #3640\nHow are your database credentials set in wp-config.php ?. Interesting.\nThe surface problem is that WP-CLI can't connect to the database within the spawned child process. I'm not sure why that'd be the case, though.. You can call wp rewrite flush after wp rewrite structure\nWhat my.ini settings did you change?. > If i use wp rewrite structure, which actually changes the option of permalinks in WP even though it gives error afterwards, followed by wp rewrite flush, will I get the same result as if the first command didn't give any error?\nYes. WP-CLI's wp rewrite structure calls wp rewrite flush under the hood, so they're functionally equivalent.\n\nThe settings I played around with was (in various combinations):\n\nNothing obvious here.\nIs there some amount of your system configuration that's served by environment variable?. > I use the following added to my System Variable PATH:\nAh, that's the issue. WP_CLI::runcommand() needs to persist the $PATH environment variable too. In your case, it's using the wrong MySQL binary.. > Although, I'm not sure exactly what to change. Can you please provide a little bit more information on this?\nNo worries, handling in #3683. Hi folks,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. This will need to be implemented as a plugin. WP-CLI could call a URL to flush opcache after updates, but the plugin would need to be active on the site to receive it.. You're more than welcome to.. Hi @vietzon,\nIt sounds like this is an environmental issue (e.g. specific to your server configuration), not a bug with WP-CLI. Per the bug report guidelines, bugs need to be reproducible with a stock WordPress install.. > Thoughts?\nThere's a lot going on here :)\nI don't think adding a --network_id=<id> argument to wp super-admin makes sense. The established paradigm for running a command against a given site (including the primary site for a network) is the --url=<url> global parameter.\nI do see an argument for making it easier to filter wp site list to only display the primary site for each network. You could then do something like wp site list --network-primary --field=url and pass to xargs.\n\nOne caveat to any of these approaches is that the nicer multi-network stuff in WordPress core has only been available in the last few releases. I guess that could be one argument toward making a package and declaring support for WP 4.6+.\n\nWhat network features aren't covered in existing WP-CLI commands?. @jeremyfelt Anything further you want to discuss here?. No, I think this would be fine.. > WordPress doesn't really track the relationship between a network and its primary site. The best way to do it now is to compare the domain and path of each row from wp_site with the matching record in wp_blogs. Right now this would mean an additional query per network to generate that list.\nCould you describe in greater detail what this logic should be? I'd like to get this flag either implemented or punted.. We can revisit this when there's some momentum around the issue.. Hi @mrme44,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. The Phar file isn't broken. You need to fix Phar execution on your system.\nSee #1758 for a prior thread.. > Once the phar file is downloaded, I open it up with vi, and I see the message about the compiler halting followed by a bunch of garbage. That is why I say that the phar file is broken.\nOh.\nWhy are you opening the file in your editor? What you're seeing is expected output. Phar is a compiled PHP format.. See https://github.com/wp-cli/wp-cli/pull/3635#issuecomment-264854948. @toolstack I wasn't aware $table_prefix adapts based off the loaded blog.\nCan you provide more detail on how you discovered the issue, where this logic is in WordPress core, and steps to reproduce?. I've reproduced the issue. Debugging why this is happening now.. > Debugging why this is happening now.\nIdentified the fix in #3695. It'd be good to have test coverage for these changes too. Thoughts on what that might look like?. > took a crack at a basic command unit testing solution. Let me know what you think.\nSorry, I should've been more clear. Integration tests are expected to be in Behat. See https://wp-cli.org/docs/pull-requests/#functional-tests. @mmcev106 Can you commit to making the necessary changes, or should I wrap this up for you?. Closing in favor of #3745 \nThanks for your help with this, @mmcev106 !. @miya0001 Happy with this now?. Thanks! \ud83d\udc4d . I've noticed this before too. It might be a configuration option with Satis, the package index generator. I'll look into it at some point.. I think this is something we can eventually solve with Satis (or a future Packagist implementation if we choose one). I'm part of the way there with: https://github.com/composer/satis/issues/393#issuecomment-278339750\nI'm not sure of the future state for the package index at this point though, so I refrained from investing more time in it.. Passing on this for now, as the package index is in a permanent state of limbo #3977. Thanks for the initiative, @miya0001 \n\nI started to fix coding standards.\nWhen I have a moment, I will send a PR.\n\nCan you open an issue to discuss this first, please? I'm not sure how I feel about embarking on this task. It'd be worthwhile to discuss the pros and cons first.. See https://github.com/wp-cli/wp-cli/issues/3703#issuecomment-270029370. At this point, I'm \ud83d\udc4e on making coding standards changes to the entire codebase.\nMy biggest concern is the cons significantly outweigh the pros. Cleaning up the entire codebase is a huge amount of work for the subjective upsides of making the code more clean and getting more contributors. Making significant stylistic changes across the codebase also makes it more difficult to git blame, which is critical for a project as old as this one is.\nDo you know of another comparable project that's successfully completed this type of initiative?. Thanks for taking the time to submit this PR, @torabian.\nThis PR can't be accepted, though, because it would break backwards compatibility with any script adding WP_DEBUG through the --extra-php parameter. \nIn the future, feel free to open an issue for discussion prior to committing time to development.. \ud83d\udc4d Looks good to me.\nHere's the original changeset: 730f0d94fa64ead44349b74e5e95fee37971c8dd\nI don't recall my thinking for such a restrictive character set, but supporting these two additional characters seems fine. SSH config aliases support periods.. \ud83d\udc4d . For anyone that wants to try their hand at this, you'll want to ./vendor/bin/phpunit locally and look at SearchReplacer->_run() to see where the problem is.. > Ah, There are not *RECURSION* on Travis ...\nOh, interesting. I hope 813bbaef6108bba2cb54270e837701eab6e2c716 works then.. Thanks for the bug report, @kitsunde. \n\nPresumably this is something WordPress has changed in the last 6-8 months because it used to work.\n\nYep. WordPress 4.7 includes this change: \n\nFrom https://github.com/WordPress/WordPress/commit/34a7bc4e67f6e34ed45cf10d5da6ad34aaad8ec5\nwp_guess_url() then tries to reference HTTP_HOST, which isn't set.\nFor this particular case, WP-CLI can set COOKIEHASH when executing wp core is-installed to mitigate the notice from occurring.. > I think this is a cleaner fix for #3656.\nYep, pretty much a thousand times better. Thanks so much!. Hi @emeraldjava,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. Thanks for the suggestion, @pkarjala.\n\nInstead, allow the option of passing an array or list of Term IDs to the wp post term * command list.\n\nHistorically, the challenge with supporting both slugs and ids is that a term can have a numeric slug. As such, if I have a term with id 3 and a term with slug 3 and run wp post term add post_tag 3, WP-CLI couldn't know which term you meant without additional information.\nHere are some prior threads:\n\nhttps://github.com/wp-cli/wp-cli/issues/894#issuecomment-29416525\nhttps://github.com/wp-cli/wp-cli/issues/2156#issuecomment-148716546\n\nThoughts?. Do you think it's necessary to add this feature? How did you end up solving the problem in your case?. This makes sense. I'm amenable to adding a --by=<type> argument that accepts either 'slug' or 'id' and the default is 'slug'.. cc @greg-1-anderson \nAre there any aspects in particular you think WP-CLI would benefit from?. Thanks @greg-1-anderson \n\nThe main cost to WP-CLI would be that all of the command annotations would need to be reformatted to match the new syntax.\n\nGiven the ecosystem of community commands around WP-CLI, I think this would be a huge, potentially insurmountable cost.\nTo provide a bit of context, here's how I begin to evaluate questions like this:\n\nWhat's the benefit to making the change? (More specific, the better)\nWhat are the costs to making the change? (Effort, backwards compatibility, etc.)\nIs there a way of achieving the same result with less cost?\n\nAlso, I'm not of the mindset that more dependencies == better. WP-CLI has few dependencies as it is, and it's already a pain point: https://github.com/wp-cli/wp-cli/pull/3304#issuecomment-240271105\nGoing forward into a future where feature development happens as separate WP-CLI packages, I think it becomes important to evaluate changes to WP-CLI from the perspective of: what does this add to the WP-CLI packages dependent on it?\nLastly, in cases where we can't add libraries as dependencies directly, we can always steal ideas from them :). Ok.\nWP-CLI's minimum PHP version will be increased with v2.0.0, which is looking like the end of 2017. We can re-evaluate the output formatter at that point. I'm not terribly interested in adopting Consolidation's annotated commands because it seems like they're functionally equivalent.\n@greg-1-anderson Feel free to loop us in if Consolidation starts on any new projects that might be relevant.. > Is this something that we can currently do? I couldn't find the option anywhere.\nIt's not currently possible, no.\n\nI dont think this is currently available, but this would be a great CLI package.\n\nSomewhat of a work in progress as https://github.com/wp-cli/restful. There are a variety of technical problems to solve, however.. @metodiew Planning to submit a pull request with your change?. Thanks for the report, @balbuf !\nHere's some prior art you can study when working on your pull request: #3577\nAt a high level:\n\nAll specified images should be processed, even if one errors.\nIf any image processing errors, then exit code should be 1.\nIf --porcelain is provided, then you should use WP_CLI::halt( 1 ); instead of WP_CLI::error().\n\nPlease make sure to include Behat test coverage for your changes :). \ud83d\udea2 . > Can we add a simple validation check to the _s function in php/commands/scaffold.php to check for this condition?\nSure! Let's use the exact regex that the _s website uses: https://github.com/Automattic/underscores.me/blob/c506caba271a287f719d5f7824e3e23272aeccdd/plugins/underscoresme-generator/underscoresme-generator.php#L99-L100. > Not sure if you want a test or two added? I'm new to testing and not sure what you have set up.\nYes, please add a functional set. See http://wp-cli.org/docs/pull-requests/#setting-up\n\nAlso, not sure you if you want a more specific error here to help people out?\n\nA more specific error would be great!. @miya0001 Does the _s API support . ?. @rosswintle Still planning to add a test case?. > Yes, but probably not today.\nSounds good.\n\nWill it need a unit test too?\n\nNope, Behat is fine.. > You could add endless test cases for this. Do you think this is sufficient? It's simple to add more (now that I'm set up and know what to do).\nWhat you've added is sufficient.\nCan you merge master? Otherwise, tests will fail because of #3727. > Seriously, thanks for helping me through this - it's been really good to do!\nHappy to help! Here's \ud83c\udf7b for more PRs in the future :). @dtolj Can you share:\n\nThe specific error you see.\nSteps to reproduce the issue.\nConfiguration details, including how you've set WP_PROXY_HOST and your PHP configuration?. @dtolj Can you share your installed PHP extensions, and verify they're the same for both php-fpm and CLI?. @dtolj Can you try installing php-curl and see if the problem is fixed?\n\n\nThe behavior is different depending on whether php5-curl is installed. It ignores the proxy settings if I have it installed. Without it, I receive the error message expected in your new test case, even with proper proxy settings. The internal error message is:\n\nFrom https://github.com/wp-cli/wp-cli/issues/3361#issuecomment-244621337. > Does it mean that we will be able to build smaller phar-s?\nNo \u2014 the Phar will still contain these commands for the foreseeable future.. > It would be nice if, when the time comes to remove those commands from the Phar release, we can make the update processes automatically install any packages necessary for preserving backwards-compatibility.\nThey'll be included in the Phar release, actually, for the foreseeable future (treated as Composer dependencies).\n\nWould it make sense to raise separate issues for each package to be split? Thereby allowing different developers to work on different packages.\n\nAfter the packages are split out, each will have their own issue tracker.. Loading WordPress is the slowest part of the test process. To assess which commands to split out based on their impact on the build time:\nack \"When I (run|try)\" *.feature --count | ack \"([a-z]+).+:([\\d]+)\" --output=\"\\$1:\\$2\" > wp.log\nawk -F ':' '{a[$1] += $2} END{for (i in a) print a[i], i}' wp.log | sort -n\nHere are the results:\n2 network\n2 server\n4 formatter\n4 shell\n4 sidebar\n4 taxonomy\n4 validation\n6 eval\n8 cap\n10 super\n12 rewrite\n12 transient\n16 roles\n17 runcommand\n18 cache\n18 framework\n19 flags\n20 help\n28 upgradables\n29 aliases\n31 skip\n40 media\n40 menu\n40 option\n42 cli\n44 command\n45 config\n45 import\n47 cron\n47 term\n50 widget\n58 db\n61 scaffold\n65 comment\n66 package\n70 search\n81 theme\n83 post\n85 export\n87 site\n101 plugin\n103 user\n180 core\nTotal instances: 1748. I ran #3893 locally.\n./ci/test.sh 2>&1 | tee -a test.log\nack '(behat features/[a-z-]+\\.feature|[0-9]+m[0-9\\.]+s)' -o test.log\nHere are the test times for each .feature file: https://gist.github.com/danielbachhuber/2a5aafab5005458dd673d4e3a3b2fbf9\nThe outliers (greater than 45s) are:\nbehat features/cli.feature\n0m51.47s\nbehat features/core-download.feature\n1m27.182s\nbehat features/core-update.feature\n1m11.436s\nbehat features/framework.feature\n2m14.351s\nbehat features/package-install.feature\n2m54.283s\nbehat features/plugin.feature\n1m10.017s\nbehat features/runcommand.feature\n0m47.6s\nbehat features/scaffold.feature\n0m58.877s\nbehat features/search-replace.feature\n0m51.375s\nbehat features/theme.feature\n1m43.989s\nbehat features/upgradables.feature\n0m48.318s\nIn addition to When I (run|try), I think Given a WP install contributes significantly.. I think continuing to break these commands apart is the most reasonable short-term task, then we can look at optimizing the performance of some features later on.. @schlessera wp search-replace is dependent on the WP_CLI\\SearchReplacer class. Where would you place this class in wp-cli/search-replace-command, and how would you autoload it?. @schlessera Suggestions on how we should name the package for wp (post|comment|user|term|site), which extend WP_CLI\\CommandWithDBObject?. > A. Have a base package wp-cli/db-command-base (or something along these lines) that provides the class for the above package, as well as any other external, third-party packages. Each actual command can then go into a separate package, and they require the base class through Composer.\nIsn't this a bit overkill, given it will only have one class? I'd think it makes working with the package more difficult.\n. > Well, the Yaml parser package we're using is basically one class only as well.\nSure, but we're not actively maintaining the Yaml parser package. It's basically set it and forget it.\n\nWhat do you think will be more complicated when splitting it up like this?\n\nThe developer experience (\"Now I need to make this change here, this change there, update tests in both places\", etc.). It's much easier to have everything for a specific feature in one place.. > Is wp config new or it is a new name for old commands?\nIt will be the existing wp core config, plus new ones like https://github.com/wp-cli/ideas/issues/4, https://github.com/wp-cli/ideas/issues/34, and https://github.com/wp-cli/wp-cli/issues/3831. > Suggestions on how we should name the package for wp (post|comment|user|term|site), which extend WP_CLI\\CommandWithDBObject?\nGoing with https://github.com/wp-cli/entity-command and https://github.com/wp-cli/extension-command. \ud83d\udea2 :shipit: \ud83d\udd28 . > I think the right solution here is to just pass NULL for the env parameter. That way it will inherit the environment of the parent PHP process. @danielbachhuber what do you think?\nOh, huh. Have you tested to verify the environment variables are actually passed through?. Interesting. Learn something new every day!. Thanks again for putting the time into tracking this down!. @miya0001 Could you describe the problems you ran into with your implementation?. Ok, sounds good.. > Sorry to bug you with more trivial stuff.\nNot at all! Even trivial bugs are bugs :)\n\nThis MAY be a documentation issue, or it may be a bug/error.\n\nLet's call this a documentation issue. It looks like I mistakenly added the mention in 5f7cd8793c567c3339014ae9d7a2005746c76700\nTo fix the documentation issue, let's simply remove the statement that the command skips guid by default.. > Unless the website is behind the repo, this is still an issue.\nIt is. The website is typically updated on every major release. It's currently in the process of being migrated to WordPress.org.. > Change timezone string and date_format when language is activated.\nDoes WordPress normally do this in the admin?. > No, it doesn't. It will be executed at the time of a new installation with localized version.\nOk. I don't think it makes sense to deviate from core's behavior.\nWhile helpful to some, changing the timezone and date format may be unexpected to others.\n\nBut we can't use localized version when it hasn't been released.\n\nHow long does it typically take to release the localized version?. Ok. What do you think about making this a --set-date-time flag?. > I found some problems in this PR, and it does not solve our problem.\n\nI want to rethink and close it.\n\nOk. > My only remaining question is: are the online docs at wp-cli.org, and the build-in help auto-generated? I suspect that they are created from the code comments. But not sure if we need to do anything to make that happen? Probably part of the release process, I guess?\nYes, they're generated on every release.. @Cyborgscode This issue sounds like it's specific to your WordPress install, not WP-CLI. Github issues aren't an appropriate venue for general support, see http://wp-cli.org/#support\n@moses-moore-spafax That's the correct file. You're running WP 4.7 already, which means you only need a partial set of files to update.. Hi @fbnlsr,\nThis issue tracker is for bugs specific to WP-CLI. This issue sounds like it's specific to BuddyPress or your environment.. Thanks for the report, @pmirek.\nThis is a bug with the plugin. Specifically, the $codepeople_search_in_place_obj variable needs to be explicitly globalized before instantiation:\n```\n$ svn diff\nIndex: codepeople_search_in_place.php\n===================================================================\n--- codepeople_search_in_place.php  (revision 1575978)\n+++ codepeople_search_in_place.php  (working copy)\n@@ -36,6 +36,7 @@\n        }\n    }\n+global $codepeople_search_in_place_obj;\n $codepeople_search_in_place_obj = new CodePeopleSearchInPlace();\n $codepeople_search_in_place_obj->init();\n@@ -53,4 +54,4 @@\n add_action('wp_ajax_search_in_place', array(&$codepeople_search_in_place_obj, 'populate'));\n add_action('pre_get_posts', array(&$codepeople_search_in_place_obj, 'modifySearch'));\n add_filter('posts_request', array(&$codepeople_search_in_place_obj, 'modifySearchQuery'), 99);\n```\nSee #2089 for some of the history.\nIn the interim, you can use wp --skip-plugins to skip the loading of plugins with WP-CLI.. This will be fixed in the next version of the plugin https://wordpress.org/support/topic/explicitly-globalize-codepeople_search_in_place_obj-variable/. > I've noticed that wp db export file.sql exports all the tables in the db.\n\nI was expecting it to export on current site's tables. It just makes more sense to me.\nIt has read the wp-config why not check the db table prefix come up with the list by itself?\n\nI appreciate the input. At this point, we're not going to change the behavior because it would be a breaking change.\n\nYes, I know I can list tables to export but that will require extra code to figure out the tables and if I have that info I probably won't need wpcli for the db export.\n\nIt doesn't take any code, actually. From the docs:\n```\nExport all tables matching prefix\n$ wp db export --tables=$(wp db tables --all-tables-with-prefix --format=csv)\nSuccess: Exported to 'wordpress_dbase.sql'.\n```. I tried reproducing:\n```\n$ wget https://github.com/wp-cli/builds/blob/gh-pages/deb/php-wpcli_latest_all.deb\n--2017-01-16 05:57:14--  https://github.com/wp-cli/builds/blob/gh-pages/deb/php-wpcli_latest_all.deb\nResolving github.com... 192.30.253.112, 192.30.253.113\nConnecting to github.com|192.30.253.112|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: unspecified [text/html]\nSaving to: \u2018php-wpcli_latest_all.deb\u2019\nphp-wpcli_latest_all.deb            [ <=>                                                   ]  31.57K  --.-KB/s    in 0.09s\n2017-01-16 05:57:14 (356 KB/s) - \u2018php-wpcli_latest_all.deb\u2019 saved [32327]\n$ head php-wpcli_latest_all.deb\nhtml\n\n\n\n```\n\nThe URL you've downloaded is the HTML page for the .deb file, not the file itself.\nDownloading the release file directly works as expected:\n```\nwget https://github.com/wp-cli/builds/raw/gh-pages/deb/php-wpcli_1.0.0_all.deb\n--2017-01-16 06:02:06--  https://github.com/wp-cli/builds/raw/gh-pages/deb/php-wpcli_1.0.0_all.deb\nResolving github.com... 192.30.253.113, 192.30.253.112\nConnecting to github.com|192.30.253.113|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://raw.githubusercontent.com/wp-cli/builds/gh-pages/deb/php-wpcli_1.0.0_all.deb [following]\n--2017-01-16 06:02:07--  https://raw.githubusercontent.com/wp-cli/builds/gh-pages/deb/php-wpcli_1.0.0_all.deb\nResolving raw.githubusercontent.com... 151.101.40.133\nConnecting to raw.githubusercontent.com|151.101.40.133|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 829202 (810K) [application/octet-stream]\nSaving to: \u2018php-wpcli_1.0.0_all.deb\u2019\nphp-wpcli_1.0.0_all.deb         100%[======================================================>] 809.77K  2.00MB/s    in 0.4s\n2017-01-16 06:02:08 (2.00 MB/s) - \u2018php-wpcli_1.0.0_all.deb\u2019 saved [829202/829202]\nlocal \u279c  Desktop  head php-wpcli_1.0.0_all.deb\n!\ndebian-binary   1480455446  0     0     100644  4         2.0\ncontrol.tar.gz  1480455446  0     0     100644  682\n```\n\nI have been using .deb package to in install WP-CLI for a while now.\n\nCould you describe your standard installation process in greater detail? Where did you find instructions to wget the symlink?. Looks like this was answered in Slack.. I'm not opposed, but I don't see the need either. Could you describe the use case in more detail?\nIf we add them to wp site option list, we should add them to wp option list too.. Makes sense. Let's go with adding wp site option list --site_id=<id> for now.. Thanks!. Hi @j-baconator,\nGithub issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support. Eek, a bug! Thanks for reporting :). Hi @rumoru,\nThanks for the suggestion. This idea was explored originally in #854, and closed for reasons described in the thread.\nAs an alternative, you can use a nested bash command to achieve the same result:\nwp --url=$(wp site url 2) option get blogname. > Is not always useful to use the help subcommand to get information from a specific subcommand.\nWhy? Could you explain further?\n\nThe \"list\" command could be used to list all the commands and arguments from a parent command.\n\nYou can already achieve the same by running the parent command:\n```\nlocal \u279c  wordpress-develop git:(master) wp cron\nusage: wp cron event \n   or: wp cron schedule \n   or: wp cron test\nSee 'wp help cron ' for more information on a specific command.\n```\nCan you describe how this would be different?. No worries! I think you've brought up a general observation that the design of the man pages could use some love, which I agree with.. Good question.\nwp core is-installed is meant more specifically for whether WordPress' database tables are installed, not for testing the presence of WordPress files. The latter task is a bit more fraught with challenges, because WP-CLI will look upward if it doesn't find the wp-config.php in the current directory.\nAs far --quiet goes, the flag has historically only meant suppressing STDOUT, not STDERR.\n\nI'm working on a script that tries to make sure that WordPress is installed in the current directory and i was thinking about using the is-installed command. I know the command should return an exit code and i can use that. However, i'd like the check to be quiet.\n\nCould you share more detail on the script, and why you want STDERR to be quiet too?. > So, that's why i wanted to use the is installed check. I was thinking the checks are more thorough and i can actually rely upon that..\nBut why does it matter whether wp core is-installed writes anything to STDERR? Why not just check the exit code?\n\nSecond of all, the script i'm trying to build is a personal script that tries to automatically generate a backup of the current WordPress dir. The way it works is it does some checks first like the existence of wp-cli, and the fact that WordPress is actually installed.\n\nAs a heads up, you may be interested in https://github.com/wp-cli/ideas/issues/5. > Yeah, i could use use &>/dev/null -- but i thought that the --quiet flag should do it. My bad.\nOh, no worries. Just wanted to make sure you were aware you could check the exit code explicitly: https://github.com/niladam/wpeb/pull/1\n\nThat's a really good idea, however for this particular case i've decided to build my own shell script as i couldn't find anything really simple and effective. For now it's just a pretty simple bash script called wpeb that i intend to further maintain.\n\nMakes sense. Would you be interested in working on the WP-CLI version when the time comes?. > As far --quiet goes, the flag has historically only meant suppressing STDOUT, not STDERR\nClosing this issue as wontfix for now:\n\nIt doesn't make sense to change the behavior of --quiet to also suppress errors at this point.\nIt's not worth the effort to suppress STDERR messages exclusively for wp core is-installed.\n\n. Thanks for the amazingly detailed report, @tedmasterweb \nAs painful of an experience as this is, it's expected behavior. wp search-replace is a literal string search and replace procedure (or regex, if you're using the --regex flag). It's not smart enough to know what's a URL, or the different ways a URL can be stored in the database.. > Let me know if you want any code comments or if anything should be changed/removed from this PR.\nCode looks reasonable. Can you add tests please?. @balbuf Will you be able to write the tests in the next couple of days? I'm releasing v1.1.0 next week, and would like to fit this in.. @balbuf It looks like one of the tests is failing?. > Can the tests be run again?\nI've restarted them\n\nDo they need to be?\n\nYep. Green light means go, red light means stop :). > Not always ;)\nYeah yeah yeah. Wise guy....\nThanks for your work on this!. Hi @virtuman,\nThanks for the suggestions! We have a new repository for ideas, https://github.com/wp-cli/ideas. Can you post your issue there?. > Is there any chance to use php extensions for doing that?\nNo plans at this time, see #1324. I like option b. I see one immediate issue: < path/to/option/value.json is a bash-ism to transform a file's contents to STDIN. It definitely won't work if you're running option update my_custom_option  --autoload='no' within the same process, and I don't believe it will work when launching a child process.. Sure \u2014 whatever approach you work out.. Thar be a bug: bd957e8e. Because wp plugin install can accept one or more plugins, I prefer the verbosity as explicit confirmation of the action you've performed.\nAlso, consistent messaging simplifies parsing for third-party systems.. Correct, this syntax is incorrect. It looks like each line is missing a call to sprintf()\nWP_CLI::error( sprintf( __( 'Error Occurred ', 'w3-total-cache' ), $e->getCombinedMessage() ) );\nWP_CLI::error( sprintf( __( 'Error %s', 'w3-total-cache' ), $e ) );\nAlso, WP_CLI::error() doesn't natively handle Exception objects, so you'll need to make sure you're passing the correct data.. \ud83d\udc4d . @amiga-500 This seems to be specific to your PHP configuration. GitHub issues aren't meant for general support, see http://wp-cli.org/#support. > Do you think that including files saved as PC style could be supported too? I figure you'd simply be looking for \\r\\n and not just \\n ?\nOh. I'd guess this to be the culprit: https://github.com/wp-cli/wp-cli/blob/master/php/commands/help.php#L66-L67\nAs a rule of thumb, we typically key off the PHP_EOL constant for cross-platform compatibility. Can you see if there's some improved regex that would work for your use case?. > As a rule of thumb, we typically key off the PHP_EOL constant for cross-platform compatibility.\nPHP_EOL wouldn't help us in this case, because it would be the \"correct\" end of line character, not the incorrect one we need to replace.\nClosing as wontfix. Not worth spending the effort for the number of users impacted.. It's fine to use multiple #.. Thanks for the report!. > There should be a way to see the changes that a search-replace would make.\nInteresting idea. We have a --dry-run flag right now but that will only show you a summary of the changes, not the full set.\n\nI think we need a report feature that generates a from/to report for each table (that's changing). I would suggest using something like WP's built-in Text Diff or PHP-diff for a diff column.\n\nI'm amenable to this suggestion, although the user experience would be a challenging problem to solve (e.g. when there are 1000+ potential changes to display).\nOut of curiosity, have you seen https://github.com/runcommand/db-ack ?. Makes sense. We can let this idea soak for a bit to see if anyone comes up with a proposed implementation.. Hey @inderpreet99,\nJust wanted to let you know I've moved your issue to the new repo for wp search-replace: https://github.com/wp-cli/search-replace-command/issues/1\nWe're in the process of splitting out each command to its own project repo: https://github.com/wp-cli/wp-cli/issues/3728. > The --regex parameter needs an example. Or, some documentation to let users know the regex parameter does not expect delimiters (/) to be wrapped around.\nGood suggestion. Want to submit a pull request?\n\nTo further add to the confusion about regex flags, --regex-flags is not appearing in the commands docs.\n\nCommand docs are rebuilt on every release. --regex-flags was introduced in v1.1.0 (#3634), which is scheduled to be released next week.. \ud83d\udc4f . > I wanted to see which translations were installed for which plugins. This would be a great extension of the feature.\nI'm onboard with exploring how this would be done.. After wp core language is split out to wp language core in #3728, we should add wp language (plugin|theme) for plugin and theme language management. . > I just think that WP-CLI should be very explicit about what it does, and what it doesn't. It is okay for WP to hook into an admin backend button click and do some magic. But I don't think that WP-CLI should do that sort of magic as well.\nI agree with this sentiment. Updating language packs for themes and plugins should be distinct from updating core's language packs.. > Japanese WordPress package has a different wp-config-sample.php, which is a translated version of the original one.\nThis explanation of the issue makes sense. We'll have to consider our options on what we can do.. > Decisions, not Options\n\nWhen making decisions these are the users we consider first. A great example of this consideration is software options. Every time you give a user an option, you are asking them to make a decision. When a user doesn\u2019t care or understand the option this ultimately leads to frustration. As developers we sometimes feel that providing options for everything is a good thing, you can never have too many choices, right? Ultimately these choices end up being technical ones, choices that the average end user has no interest in. It\u2019s our duty as developers to make smart design decisions and avoid putting the weight of technical choices on our end users.. I'd suggest WP-CLI should still display the warning for localized packages, but not consider it a fatal warning.. > There is a time lag before the localized package is released, and the API doesn't work.\n\n@miya0001 If the API doesn't work, shouldn't you see this error?\n```\n$checksums = self::get_core_checksums( $wp_version,\n            ! empty( $wp_local_package ) ? $wp_local_package : 'en_US' );\nif ( ! is_array( $checksums ) ) {\n    WP_CLI::error( \"Couldn't get checksums from WordPress.org.\" );\n}\n```\nCan you write a Behat test case for the bug? We have a test case for non-US locale (https://github.com/wp-cli/wp-cli/blob/69c978b38e5264eaf3824e7fc4bb2c3ece95b7fe/features/core-verify-checksums.feature#L58-L66), which I modified locally to run against ja, and it works as expected.. > Ah, I will continue to investigate to solve this.\nOk. We can re-open it if you can put together reproduction steps.. Can you share wp --info please?. You need to update to WP-CLI v1.0.0. We'll need this for v1.2.0, because it should pick up contributors on sub-packages too.. Build failure unrelated to change. \nI can't wait to break wp server out into its own repo again!. I'd consider this a bug.. Not sure I follow. Could you explain further?. From an email thread:\n\nWe make use of a Open Build Service, though we host our own instance in-house. Its pretty easy to use.\nhttp://openbuildservice.org/\nI was able to get an RPM built from your source in about 10 mins on an existing OBS project we have. \nThe OBS group hosts a reference instance that can be used to build Open Source projects:\nhttps://build.opensuse.org/\nYou could give that a try if it will work with your build infrastructure.\n\n@szepeviktor Do you have any experience creating RPMs?. Thanks @SosyalAlkolik !\n\nPlease can you check it?\n\nI'm a total RPM newbie. What's the best way to check it?\nAre you open to committing your wp-cli.1.1.0.spec to this repo as wp-cli.spec, and producing new builds when we have a release?\nHappy to chat in the #cli channel on WordPress.org Slack if you prefer realtime.. @SosyalAlkolik Can you:\n\nSubmit your spec file in a pull request to this repository? It should go in this directory: https://github.com/wp-cli/wp-cli/tree/master/utils\nSubmit your RPM build in a pull request to the builds repository? https://github.com/wp-cli/builds We should create a new /rpm/ directory, I think.\n\n@szepeviktor Any other steps you'd recommend?. > If you open a /rpm/ directory, I can pull a new request to submit rpm file.\n@SosyalAlkolik You should be able to easily create the directory when you submit the file.. > Do you intend to publish these packages to a repo?\nYou're welcome to submit these as a PR to https://github.com/wp-cli/builds\nEventually, I'd like to create these builds in an automated manner.\n. The automation is now live: https://github.com/wp-cli/rpm-build\nThe builds are pushed here: https://github.com/wp-cli/builds/tree/gh-pages/rpm\nThanks again @szepeviktor @murtzsarialtun for your work on this. Thanks for the great bug report, @jaysn !. \ud83d\udc4d Thanks!. It looks like the source of the error is this:\n\nWordPress database error Illegal mix of collations (utf8_general_ci,IMPLICIT) and (utf8mb4_unicode_ci,COERCIBLE) for operation 'like' for query\n\nHave you verified the collations on your database? I'm not sure this is something WP-CLI should attempt to fix for you.. \ud83d\udc4d  This is something I just haven't gotten around to doing.. I had to cat .ssh/id_rsa | base64 the SSH private key, because no amount of escaping it as a string would get to echo properly as a file.. > Prior to pasting the private key into the repo settings, I replaced all newlines\nAh, that'd make sense. base64 encoding works well enough.. Closing in favor of #3976. > Should we add composer.json when running wp scaffold plugin, etc?\nI've refrained from generating a composer.json when running wp scaffold plugin-tests because:\n\nwp scaffold plugin-tests is always run against an existing plugin.\nAn existing plugin can already have a composer.json file.\nFor wp scaffold plugin-tests to add a require: phpunit/phpunit statement, it would need to either create a new composer.json or modify an existing composer.json\n\nI solved this dependency problem in #3472 by requiring phpcs globally in .travis.yml, instead of adding to a composer.json\nFor this particular issue, I think the problem to solve would be adding PHPUnit 6 support to WordPress core. Want to create a Trac ticket for it?\n. \ud83d\udc83 . Oh, wow. I thought storing PHP serialized data in the database was the worst, and now I've been proven wrong.\n\nThus, I recommend that wp search-replace recognize serialization in fields, even when it's deeper in the field, or combined with regular strings.\n\nI'm not sure this is a problem WP-CLI can provide a solution for. It would be impossible to correctly handle every data format when you open the playing field to literally everything. Should WP-CLI decode a base64-encoded string, perform search replace, and then re-encode it? Etc.\nDo you have a suggested algorithm for identifying PHP serialized strings inside of arbitrary blobs?. > From my limited dev knowledge, I would suggest WP-CLI simply recognize serialized data regardless of where it appears in the field. It does, after all, follow the same pattern.\nI'm not confident it's as easy as this. I think trying to identify serialized data within an arbitrary string (either one instance or many) is significantly more challenging than identifying when an entire string is serialized data. What if the serialized data contained a string that also represented serialized data.\nAnd, because it's more challenging, changing the current algorithm runs the risk of nasty unexpected consequences.. This isn't something WP-CLI is going to fix at this point. My recommendation is that PowerPress updates its storage mechanism.. Hi @imatat,\nThis sounds like it's a bug with the WordPress core test suite. The appropriate bug tracker is https://core.trac.wordpress.org/. Hi @designextreme,\nGithub issues aren't an appropriate venue for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. Please review http://wp-cli.org/#support. > Is WP CLI's wp theme update command only available for themes that are in the WordPress repo.\nYes.\n\nIf this is the case, is there a way to tell WP CLI where to look for potential updates?\n\nNo. You'll need to write some custom code for this purpose.\nAlso, Github issues aren't an appropriate venue for general support questions. Please review http://wp-cli.org/#support. From the documentation:\n\nYou can also join the#cli channel on the WordPress.org Slack organization to see if a community member might have an answer for you.\n\n. Hi @mathieuhays:\n\nI understand this is fixable by using wp-cli.yml but do these commands really need to load WordPress in order to work?\n\nYes, those do.\n\nIt would be nice to have commands that can bypass WordPress altogether when relevant (A bit ironic for a WordPress-CLI I know\n\nThis is already possible. See wp dist-archive as an example: https://github.com/runcommand/dist-archive/blob/master/command.php#L45\n\nIn the idea it could also be useful to expose a parameter or hook enabling people creating community packages to prevent an unnecessary WordPress load when all they're doing is I/O manipulation for example.\n\nThis is already possible. Simply add the following to your command's doc block:\n@when before_wp_load\nSee https://make.wordpress.org/cli/handbook/commands-cookbook/#docblock-tags. \ud83d\udc4d \nCouple of things worth noting:\n\nWe need to somehow, sustainably keep the Travis matrix in sync between the main project and all of the individual repositories to ensure every command is tested against the same standards. Not necessarily something we need to immediately solve though, just keep it in mind.\nI think I'm going to start on #3728 very soon, because the total build time is very annoying to me.. @schlessera Looks like 7.1 was added in 4e285d7a758a1745da5b43af5e2f55de8a2c4087. Can you clarify your original issue?. \ud83d\udcaf \n\nI was also thinking the other day that it would be helpful to know where all of the memory was going. The composer standalone doesn't have the same problem as far as I know.. > Related: composer/composer#6168\nNice.\n\nAdd a shutdown handler with register_shutdown_function() and then check whether the last error was indeed an \"Allowed memory size of ... exhausted\" issue using error_get_last().\n\nWe might consider doing this for other common issues as well.. Composer's memory improvements landed in v1.4.0: https://github.com/composer/composer/releases/tag/1.4.0\nWe should re-profile to see what memory consumption is like now, and determine a course of action from there.\nIn any case, we should also include some mention of this problem in the release notes.. Looks like it shaves six minutes off \u2014 solid \ud83d\udc4d . Previously #1992, #3652\nI actually looked at running tests in parallel for #1992, but wasn't able to get it to work well.\nAt this point, I think #3728 is the path forward, as it includes the added bonus of only running the tests specific to the command, and not the entire test suite.. > as it includes the added bonus of only running the tests specific to the command, and not the entire test suite.\nAnother perceived pain point of running the entire test suite unnecessarily is that it blocks jobs on the other repositories.. @schlessera Given #3728, do you think this is still necessary?. Looks like it!. \ud83d\udc4d Thanks for the report. \ud83d\udd28 . > A simple fix is just to replace basename() with the locale-independent wp_basename().\nAt a first glance, it looks like this won't be too difficult to do.\nThere are some places we're calling basename() before WordPress is loaded, so we may need to shim wp_basename().\n\nI think in the third millennium you should use UTF-8 everywhere.\n\n@szepeviktor Please be kind.\n. > As the WP version does not have an include guard\nWhat's an include guard?. Duplicate of https://github.com/wp-cli/wp-cli/issues/1324#issuecomment-241722285. > Is there a reason to not apply some common optimization that is safe to do for imports?\nNo reason not to, unless there are backwards compatibility issues.. > I'd suggest adding these in to accelerate the most common use case and add an option to disable these optimizations for the few cases where they might still cause an issue.\n\ud83d\udc4d  Works for me.. \ud83d\udea2 . I'm \ud83d\udc4e  on introducing a flag for this.\nCould you share more details about your use case (with specifics) please?\nRelated #3775. > Because of the renaming logic in the WP CLI, attempting to install from the raw url causes the directory contained in the build to be renamed incorrectly and breaks things in the plugin.\nWhat specifically breaks in the plugin? Can you fix this instead?\n. Ok. I think you'll need to solve this issue in another way.\nGenerally speaking, WordPress plugins can't expect to be installed in any particular directory. WordPress plugins dependent on another plugin should look for classes (e.g. class_exists()), instead of files at a specific path.. > This is a core wp function. It depends on a plugin to be installed at a particular location.\nI understand what the core WordPress function does. I'm saying that this isn't a reliable way of determining whether a plugin is active.\nFor instance, a plugin can be installed as a MU plugin. In this case, the plugin would be active but is_plugin_active() would return false.. See #2994 for the original issue.. Hi @kcarwilemiller,\nCan you add a test case for this change please?\nSee https://make.wordpress.org/cli/handbook/pull-requests/. Thanks @kcarwilemiller, appreciated.. Thanks for your work on this, @gitlost . > Although this should normally not happen, it would be preferable for WP-CLI to check the existing tables when the DB connection was successful, any maybe point the user to the fact that there is already an install under a different prefix, hinting at a configuration issue.\nOne thing worth noting: this is a valid use case. One feature of the $table_prefix global is that you can run multiple WordPress installs out of the same database.\nDo you have a suggested fix?. @schlessera Can you provide a suggested implementation?. As an artifact of https://github.com/wp-cli/scaffold-package-command/pull/89, this issue is no longer necessary.\nWe should evaluate whether this is still a pragmatic change.. Closing as maybelater for now:\n\nwp scaffold package-tests seems to be working just fine for our needs.\nWhile this abstraction could solve the problem of duplicated files, it could also introduce other issues/complexity we have to manage.. @leepeterson Sure, can you open a new issue for it?. Previously #1499\n\nCan you explain why you think wp_insert_user() is more correct? It seems like Wordfence is actually the issue here, and should be hooking into wpmu_create_user() as well.. > Can you help me understand why wpmu_create_user() is preferred?\nPer #1499, wpmu_create_user() is used on multisite to run the data through wpmu_validate_user_signup, which some plugins use to apply additional registration rules (e.g. a user_login can't conflict with an existing site slug).. > The tests should at least make sure that this alternate code path is run through as well and doesn't produce an error.\nHow difficult would it be to introduce an error in the SQL that would cause the command to fail with the --skip-optimizations flag applied?. Thanks @tfrommen . > \"Fatal error: Cannot use \"self\" when no class scope is active in ..\" and points to a php file in the theme.\nThis sounds like a bug in your theme, not WP-CLI.\nYou can use the --skip-themes flag to skip the loading of themes when running WP-CLI.. Interesting idea.\nIf wp db info was more generally about wp-config.php data, would it make more sense as wp config info ?\nRelated https://github.com/wp-cli/ideas/issues/34 and https://github.com/wp-cli/ideas/issues/4, which generally seem to be leading to wp config (create|edit|update). > Hm, wp config info would make sense, except there's no wp config command yet.\nNot a blocker. Creating wp-cli/config-command could be a follow-up to https://github.com/wp-cli/wp-cli/issues/3728. After https://github.com/wp-cli/wp-cli/pull/3978 lands, we can make this happen in https://github.com/wp-cli/config-command\nClosing in favor of https://github.com/wp-cli/config-command/issues/2. > There are several scenarios where commands fail because some of their dependencies are not met.\nIt'd be helpful to identify the specific types of dependencies, and at what point we can know whether they're met.\nSome dependencies (e.g. a valid database connection) require performing part or all of the WordPress load process.\n\nit would give clear indications to the user about what is currently missing for the command they need.\n\nI do like the mockup you've provided, in the sense that it would be worthwhile to redesign the help screens at some point.. > The before_add_command:<command> hook can be used to check requirements. The hook should get a reference to a value that defines whether WP-CLI should proceed with the loading or not.\n\ud83d\udc4d Sounds neat.\n\nThe only change we would need is to allow the do_hook() to pass arguments to the hooks. \n\nI think @aaemnnosttv would like this too.\n. > do_hook() can already pass arguments to its callbacks as of #3470\nHow quickly my brain cells die.. before_invoke: uses before_invoke: scaffold package, so we should continue with spaces.. Have you tried setting the PAGER environment variable?\nSee https://github.com/wp-cli/wp-cli/blob/cd4d6e27005db5415a4ac3da68f883e3d65ccc95/php/commands/help.php#L96. Ok. That's what the PAGER environment variable is there for.. Thanks for the report, @fjarrett.\nI think this is actually a bug in wp plugin install. wp plugin install <slug> --activate is meant to be functionally equivalent to wp plugin install <slug> && wp plugin activate <slug>, which will halt if the first command fails.\nBut, it appears this incorrect behavior for wp plugin install has been around for a while, so I don't think we can change it at this point.\nIt's also worth noting wp plugin install accepts one or more plugin slugs, while wp core language install only accepts one language. Fundamentally, this is why the difference in behavior exists.\nI don't have a strong opinion on which direction to take. @schlessera Second opinion?. > And not to broaden the scope here too much, but I'd argue that if the goal is to install something, and that thing is already installed, then it's not really a blocking failure.\nThat's a fair assessment. Let's consider the current behavior a bug then, and get it fixed.. @schlessera One thing I ran into: Because composer-changelogs is require-dev, it's not available when I run composer update --no-dev. Any ideas how to address this?. Hi @rcojoe,\nwp wc isn't a part of the WP-CLI project, but rather a WP-CLI command included in WooCommerce. You'll want to open your issue with that project.. @mmarcotte Can you reproduce this issue on a brand new WordPress install, and share the reproduction steps?. Couple of bad ideas I've had already:\n1. Monkey with spl autoload priority\nIf we could somehow monkey with spl autoload's priority, we could autoload the package repository copy of class Cron_Command before the WP-CLI nightly version. But, we can't, because:\n\nThere isn't a way to modify the spl autoload priority. The callbacks are run in the order they're registered, and WP-CLI's is registered first.\nThe autoloader for the WP-CLI nightly build is called much earlier than packages are loaded.\n\n2. Dynamically create a second class\nIf the copy of the class remained as class Cron_Command within the WP-CLI nightly build, then the package could run WP_CLI::add_command( 'cron', 'WP_CLI\\Commands\\Cron' ); to override it.\nWe'd need WP-CLI's autoloader for packages to eval( str_replace( file_get_contents() ) ) (or some other such amazingly hackery) in order to dynamically create this second class without having two actual classes.. > Create a separate composer.json for testing, that includes both the package to test as well as WP-CLI nightly as dependencies, in that order.\nCould work, but it would only solve the problem for testing. Ideally, you could wp package install wp-cli/cron-command and have the installed package overload the bundled version.\n. > The bundled PHAR would already contain the external Composer package, so a wp package install wp-cli/cron-command would not do anything.\nIncorrect. There are two composer.json files, one for WP-CLI and one for installed packages. The packages autoloader is loaded much later: https://github.com/wp-cli/wp-cli/blob/90332c4399f99b6a52a6fbcfd2662df880891808/php/WP_CLI/Runner.php#L811\n\nSo, if I understood correctly, the problem is limited to finding a way to test commits to the external package against a WP-CLI nightly that already comes bundled with that same package in a pre-commit version.\n\nThe scope of the problem is both testing and general usage.. WP-CLI has two composer.json files: one for the project, and one for installed packages.\nThe project's composer.json is tracked in the wp-cli/wp-cli repo. The installed packages composer.json is created in ~/.wp-cli/packages/ the first time you run wp package install.\nWhen wp-cli/cron-command is added as a dependency for the former, it can still be used for the latter, because there's no reconciliation process between the two.\n\nWhat is the expected behaviour when you run wp package install wp-cli/cron.command when the cron command is already installed as a package?\n\nThe expected behavior is that wp-cli/cron-command installs as a package, and supersedes the bundled version.\nThe actual behavior is that wp-cli/cron-command installs as a package, but does not supersede the bundled version.\n\nThe more interesting question would be whether you can run a wp package update wp-cli/cron.command to update an external more recent version of the cron package over an outdated bundled version.\n\nI'm not sure how this would be possible, given the files for the bundled version are injected into the Phar file.\n\nConceptually, I would like to see WP-CLI as the framework only come with the wp package command built in. All of the other commands should be external packages, but some of them could be bundled with the PHAR release.\n\nI agree.\n\nWithin this concept, there should be no direct technical difference between a command that was already installed (or bundled in PHAR) and a command that is added later on via the wp package install command.\n\nBut there is a technical difference. You should inspect how the Phar is currently built:\n\nhttps://github.com/wp-cli/wp-cli/blob/master/utils/make-phar.php#L62\n\nWhen the Phar is built, all of the projects files (dependencies included) are rolled in to a single wp-cli.phar.\nLater, when you run wp package install <package-name>, a new Composer project is created in ~/.wp-cli/packages/, and the Phar file loads the autoloader midway through the bootstrap process.. > can you elaborate on the comment in that snippet? What was the problem that this force-loading was meant to solve?\nWhat history have you dug up by using blame? (Not to dodge the question, but I think it's generally a good step to look through the history first)\n\nProvided that whatever reason there is can be dealt with in a different manner, it would probably be fairly simple to turn the loading around so that the package commands are loaded first, and then the bundled commands are loaded wherever they have not been replaced by a packaged command yet. In this way, package-installed commands would take precedence, with a fall back to the bundled versions.\n\nRight, although bundled commands that are Composer packages are autoloaded right now with autoload file. This happens earlier in the bootstrap process: https://github.com/wp-cli/wp-cli/blob/v1.1.0/php/wp-cli.php#L19. > I found the initial addition of the loading code, but it didn't come with an issue number: 782a6b7\nAt the top of every changeset, you can see which pull request it came from:\n\nSome more load history #468\n\nIn the WP_CLI\\Utils\\load_dependencies() function, we could probably already check whether there's a home folder autoloader, and load this one first. \n\nThis is the direction I'm headed too.\nHowever, commands can also be loaded via the --require=<file> global argument. This is, in part, how the test suite loads the code in the package repository: https://github.com/wp-cli/cron-command/blob/v1.0.0/features/bootstrap/FeatureContext.php#L12-L31\nSo, another annoying thing to accommodate, but it seems doable.. I think your updated summary is more or less correct.\nAnother potential challenge is that packages can implicitly depend on classes present in WP-CLI. We may need to register the two class autoloaders (packages, and WP-CLI), and then run each instances autoload file.\nMight be time to start exploring through code.. > Do you want me to have a go at this in a pushed branch? Seems like a good way to get more intimate with the code... ;)\nGo for it!. > Can you confirm that the above makes sense?\nI think so, although I don't see any class definition as a part of the tests.... > The main issue is that the Composer-required packages will need to have the framework autoloader be available already, to make use of the framework API. However, this framework autoloader is the exact same one that has the bundled commands and hence their autoloader.\nYep, this is about the core of the issue.\n\nOne idea would be to have a Composer plugin hook into the autoloader generation and filter out the commands from the normal vendor/autoload.php and put them into a separate vendor/autoload-commands.php.\n\nThis seems like a viable direction to explore. \nCan you turn your branch into a WIP pull request, so it's easier to review the scope of the changes?. @schlessera I made a really happy (re)discovery in the last 24 hours.\nWhen WP-CLI is installed as a dependency to a WP-CLI package (e.g. https://github.com/wp-cli/package-command/pull/2), Composer treats the WP-CLI package as the resolution for WP-CLI's declared dependency for it.\nI originally discovered this in #2546, but had forgotten about it / didn't realize it applied to this use case.\nAs such, by switching all of the bundled commands to https://github.com/wp-cli/scaffold-package-command/pull/89, we'll also solve the original stated problem:\n\nTest suite for abstracted command package runs against wrong code\n\nIf #3872 doesn't have any significant blockers, I think it'd still be worthwhile to land.. > Yes, but I thought the problem came from using a PHAR while testing?\nIt did, yes.\n\nWon't we ever have the need to make this work with PHARs?\n\nProbably yes, but it's no longer the omgwtfbbq blocker for proceeding with #3728 (and actually improving upon the packages).. This is \ud83d\udd28 for the problem originally defined in the issue. Landing the new bootstrap PR will enable this for Phar builds too.. @schlessera When merging, can you make sure the pull request is assigned to the correct milestone and labels?. @strarsis Do you have another system on the machine making calls to the GitHub API?. @dws122 I think this is because @schlessera forgot to upload the executable to the release. Can you test again?. Thanks @mbovel !. Oh, https://github.com/probot/probot looks even cooler. > Although the labels might differ between the packages (as they also include the scope), the coloring for the shared labels should be made consistent.\nI agree. I've been waiting to have the bot hooked up to make this change, because I've gotten tired of making it a hundred times manually.. Managing protected branches is blocked by https://github.com/probot/settings/issues/3. Label setting doesn't seem to work :(. \ud83d\udd28 . Following up later with https://github.com/wp-cli/scaffold-package-command/issues/163. @schlessera I'd suggest we revisit WPCS changes at a later date, possibly in conjunction with https://github.com/wp-cli/scaffold-package-command/issues/70. It's not something I've strictly enforced to date.. I think this is actually because thumbnail isn't included as an image size in get_intermediate_image_sizes()\nI've ported this issue over to the new repository for wp media *: https://github.com/wp-cli/media-command/issues/2. Hi @spkrn87,\nGithub issues aren't an appropriate venue for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. Please review http://wp-cli.org/#support. I'm not a huge fan of adding an alias for the argument. It seems like a one-off solution to your specific problem.\nWhat if, instead, WP-CLI guessed at which parameter you were trying to use, and offered that as a suggestion in the error message?. Why not update the option?. Ah, makes sense.\nCan you file this in the ideas repo please? https://github.com/wp-cli/ideas/issues. FYI - I did this in two commits to ensure the existing tests pass against the Composer package.. > It may be useful to have it added when a new plugin or theme is generated as well.\n\ud83d\udc4d  I think it would be generally useful to add .editorconfig to every theme and plugin.. .editorconfig is already added as a part of wp scaffold plugin, so it doesn't make sense to also include it in wp scaffold plugin-tests.\nWe can add .editorconfig to child themes and Underscores though.. > I would like to see the option to add default .yml files for common services being used:\nI'm amenable to including services that run the PHPUnit test suite, because that's the genesis of our scaffolding command.\nI don't think it makes sense to support every continuous integration service, because it's a huge amount of effort to maintain over the long term, and departs from the original reason for wp scaffold plugin-tests.. I'm open to adding these as users have pull requests for them.. > However, this is not possible because of the precedence given to PHP_BINARY (PHP's built-in define for the binary path) in the public static function get_php_binary() starting at line 908:\nI did some blaming to get to the original use of this logic: 32bcd448cba0859a68118e1c2492da22b2070d08 (from #219)\n\nShouldn't WP_CLI_PHP check occur before PHP_BINARY?\n\nYes, I think this was the original intent.\n\nAs it is, it's impossible to override the native PHP_BINARY value, which always exists because we're in the PHP interpreter already.\n\nOnly as of PHP 5.4:\n\n. Hi @geekoun,\nThanks for opening the issue. Feel free to submit a pull request with your suggested changes:\n\nhttps://github.com/wp-cli/wp-cli/blob/master/README.md\nhttps://github.com/wp-cli/handbook/blob/master/installing.md. Hi @wonderWomantotheResue,\n\nGithub issues aren't an appropriate venue for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. Please review http://wp-cli.org/#support. @schlessera Can you merge master?. See https://github.com/wp-cli/wp-cli/issues/3866#issuecomment-284426698. > the preferable course of action might be to either submit a patch to mustangostang/spyc\n\ud83d\udc4d . @schlessera I'd suggest wontfix at this point. I don't think it's worth the effort getting into the weeds of unwinding this problem.. \ud83d\udc4d \nRelated #3847. Hi @mostafasoufi,\nGithub issues aren't an appropriate venue for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. Please review http://wp-cli.org/#support. @ivankruchkoff The wp media * codebase is now tracked in https://github.com/wp-cli/media-command. Please re-submit your pull request there when you can pick this back up.\nAlso, it's important to note that the test suite for each bundled package isn't currently functional https://github.com/wp-cli/wp-cli/issues/3850. > It seems that the only 5.4-specific feature that is being used is short array syntax. I'll submit a quick PR to see if the maintainer if willing to lower the requirement.\n\ud83d\udc4d . @schlessera I've created a WP-CLI org fork we can use: https://github.com/wp-cli/composer-changelogs\nCan you update there?. I don't think the upstream repo is actively maintained. I'm amenable to handling this with a temporary downstream fork for the time being.. > I'm amenable to handling this with a temporary downstream fork for the time being.\nCreated a fork: https://github.com/wp-cli/spyc. This landed in #3872. > However, I still find the documentation for the available options lacking and confusing. One has to look into the source code to see the default values for each option.\nI agree. Once we get the build times down, it would be worthwhile to spend a bit of time refining docs.. > Suggestions for security -- don't capture data hackers could use, e.g. :\nI agree. Definitely not planning to capture any data that could be personally identifiable.. Good questions, @fjarrett .\n\n\nWill this result in outbound HTTP requests for every command executed?\n\n\nImplementation is still TBD, but it will be done with performance in mind. Could happen on shutdown, or written to a log file that's periodically pushed in batch.\n\n\nWill the values passed to $args and $assoc_args always be ignored?\n\n\nYes. We may capture which arguments you use, but not the values you pass to them.. Great suggestions, @aaronjorbin \n\n\nnot a registered subcommand and not a registered wp command triggers. (Could help find common misspellings/mistypes that the system should handle with grace or potentially inspire new commands)\n\n\nRelated https://github.com/wp-cli/wp-cli/issues/3861. @schlessera I'd actually like to try to land this in 1.2.0 so we have the data sooner rather than later.\nWe should only capture use of public commands from the WP-CLI organization. Thoughts on how we can easily whitelist these in a maintainable way?. > Want me to do a PR for a WP_CLI::is_bundled_command( $command ): bool?\n\ud83d\udc4d Go for it. \ud83d\udea2 \ud83d\udea2 \ud83d\udea2  This is now in master. From Pressable:\nbarry [3:55 PM] it does seem sketchy\nbarry [3:55 PM] I dont endorse the idea\nbarry [3:55 PM] also\nbarry [3:56] you mentioned non-blocking requests\nbarry [3:56] but I dont think they are non-blocking\nbarry [3:56] I didn't look at the code yet\nbarry [3:56] but Im highly skeptical. I'm reverting.\nFor posterity, this did produce pretty cool data:\n\n\n\n. > What about a hybrid opt it/out.  Essentially this:\nThis is similar to what Homebrew ended up doing, actually. \nPersonally, I don't want to fight the battle to get to some compromise solution. WP-CLI the project has existed just fine without the data up to this point, so I guess we can continue on without.\nI've reverted the tracking mechanism.. > As there is no close status, by closing do you mean to signify this that the project is no longer interested in this functionality or something else?\nYes, I'm no longer going to pursue anonymized usage statistics (at least for the foreseeable future). Jobs pass, except for an unrelated test failure on PHP 7.1.\nIt looks like Travis CI updated to 7.1.2 from 7.1.0 in the last day\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/209206247\n\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/209088535\n\nSkipping the test for < PHP 7 right now.. This core ticket is probably related https://core.trac.wordpress.org/ticket/40084. > Looks like this needs the same change as c91c53d to make the tests pass.\nIt does. Guess we need to wait for that to land.\n\nI would not mind having a short comment for regexes like these, though.\n\nI'll include it when I merge master for the fix.. > The framework contains portions of code that have functions and methods do multiple different things based on some random combinations of argument arrays.\nThis is correct. It's a common WordPress pattern.\n\nThe problem with these argument arrays is that they can fail in a multitude of ways, and often still not produce a hard error, but rather just do something else than was intended:\n\nHow often does this happen?\n\nWhile a complete refactor of most of these is not an option, I recommend keeping them better in checks through the following means:\n\nDo the benefits of these means outweigh the costs? Some costs include: deviation from standard patterns, additional code complexity, time spent on this vs. other focuses.. Ok. I'm not strongly opposed to this, but I'd suggest we hold on this for a while.\n\nin the context of WordPress, I suspect that a large number of bugs or newbie coding requests are caused by this (\"my query does not work...\"), and it is one of the reasons why developers need to constantly look up stuff in the documentation or source code when working with WordPress, instead of just being assisted by their IDE like in any other environment.\n\nI don't think most WordPress developers use an IDE. I personally don't. I'm not sure it's something we need to optimize for.\n\nthe more wide-spread pattern is to make code DRY and only use one single source of truth to avoid the possibility of typos;\n\nIt's not a wide-spread pattern in WordPress, which is the community / developer pool we're working with.\n\nOnly if you consider adding a section with all known constants at the top of a class additional complexity. I would argue that it does the contrary. You have one place where you see at a glance what the possible options are\n\nWhat about a class with multiple methods that each accept multiple arguments?. At this point, I'm leaning towards wontfix on this issue for a few reasons:\n\nThis will be a substantial amount of effort over the long term, and there are higher impact projects we can focus our energy on.\nThe majority of WP-CLI contributors and users don't use IDEs. This change is primarily for the benefit of those who use IDEs.\nThis isn't a common code pattern in the WordPress world, which introduces complexity to onboarding new contributors from our primary contributor pool.\n\nI'm willing to be convinced otherwise if it can be proven:\n\nThis will be a high impact project.\nThe majority of WP-CLI contributors and users use IDEs with autocompletion.\nThis is a common code pattern in the WordPress world.. > However, I would really like stuff like this to be considered when we are creating new code. There's no need to repeat issues like these when creating code from scratch.\n\nHappy to consider it when creating new code. Not sure why it's worth bringing up when taking about old code.\n\nAs a sidenote: I don't really understand the argument about IDEs. Yes, there's more advantages to be had when using an IDE. That doesn't mean that it removes anything for people not using an IDE.\n\nThe $args pattern makes everything readable in a few short lines. Introducing a half dozen class variables is harder to read and understand when you're not using an IDE that interprets it.. I don't think this is the best place for it. This information isn't something every user is looking for. Instead, I'd suggest opening a similar pull request against https://github.com/wp-cli/handbook/blob/master/installing.md. Duplicate of #3891. Ugh. Running this locally.. > Looks like a random error, I restarted the Travis build.\nI can't wait to not run all of the tests on every changeset.. > This broke a different test:\nUpdated the test.. Thanks for the report, @WTurunen !\n\nIf this is the case, then maybe the password information should be omitted from the wp_update_user function?\n\nWe can go ahead and bypass core's email notifications altogether. . Hi @noplanman,\nThanks for the report. Installing a plugin by its title isn't supported by WP-CLI; users are expected to provide a slug.. > So it's a feature but not supported?\nIt works accidentally because the WordPress.org API returns a result when the title is passed through.. See https://github.com/wp-cli/wp-cli/issues/3906#issuecomment-287031626. Here's what I see:\n```\n$ wp @daniel plugin\nusage: wp plugin activate [...] [--all] [--network]\n   or: wp plugin deactivate [...] [--uninstall] [--all] [--network]\n   or: wp plugin delete ...\n   or: wp plugin get  --field= --format=\n   or: wp plugin install ... [--version=] [--force] [--activate] [--activate-network]\n   or: wp plugin is-installed \n   or: wp plugin list --= --fields=\n   or: wp plugin path [] [--dir]\n   or: wp plugin search  [--page=] [--per-page=] --field= --format=\n   or: wp plugin status []\n   or: wp plugin toggle ... [--network]\n   or: wp plugin uninstall ... [--deactivate] [--skip-delete]\n   or: wp plugin update [...] [--all] --format= [--version=] [--dry-run]\nSee 'wp help plugin ' for more information on a specific command.\n```\nCan you please share steps to reproduce what you see?. > Any reason not to bump PHP to 5.6?\nNot opposed. I think we need https://github.com/wp-cli/wp-cli/issues/3886 before making a final decision.. At this point, we're only planning to increase minimum supported PHP to 5.4. Handling in #4554. > but I\u2019m wondering if it might make sense to check those files that should never change\u2014wp-content/index.php for example.\nIf there are checksums published for the file, we can check for it. Otherwise, it's outside the scope of wp core verify-checksums. It may be a good fit for wp doctor though: https://github.com/wp-cli/doctor-command/\n\nFailing that, it might be worth adding a note to the documentation.\n\nHappy to look at a PR with documentation improvements.. > I think it might be better to go the documentation root on this one. I\u2019ll take a look and submit a PR.\n\ud83d\udc4d  Sounds good.. > We sometimes have (parent) themes with bad code in them, code that causes fatal (or other) errors that don't allow us to work on the site using wp-cli (because it just quits). This is a request to allow us to tell wp to load a specific theme for the current wp command, something like: --use-theme=twentyseventeen.\nAre you familiar with the --skip-themes global parameter?\nI'm not sure --use-theme=<theme> makes sense to add as a global parameter (global parameters are expensive to add, because they have the possibility of colliding with local parameters), but you could achieve the use-case with this theme-env.php file:\nWP_CLI::add_wp_hook( 'muplugins_loaded', function(){\n    $theme = getenv( 'WP_CLI_USE_THEME' );\n    if ( ! $theme ) {\n        return;\n    }\n    $use_theme = function() use ( $theme ) {\n        return $theme;\n    };\n    add_filter( 'pre_option_template', $use_theme );\n    add_filter( 'pre_option_stylesheet', $use_theme );\n});\n$ wp --require=theme-env.php option get stylesheet\ntwentyseventeen\n$ WP_CLI_USE_THEME=twentysixteen wp --require=theme-env.php option get stylesheet\ntwentysixteen\n. \ud83d\udc4d . Hi @Amstramgram,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. wontfix, actually. I think this should be addressed upstream. > I suggest having a flag you can set to just add the PHPCS test to one of the existing environments. This removes the need to completely set up one additional environment just for the PHPCS check.\nI intentionally opted for an additional environment because it makes it easier to see which aspect of the CI failed (PHPCS vs. PHPUnit). Hi @newtoid,\nAs a heads up, this is the public issue tracker for the WP-CLI project.\nCan you share steps to reproduce the issue on a stock WP install?. @newtoid Based on our conversation, it sounds like this was an issue with Blogvault. Feel free to open a new issue for anything else WP-CLI related.. @schlessera Does this seem sensible to you?. > No, this should be handled with the following set of Composer options\nLike 46995f2c4dce484b7db84fc6fa2dcabf5e5d2b9c ?. Hi @cAstraea,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Would you be opposed to using WP-CLI for this?. > The problem with WP-CLI is that it needs a WordPress install to even start doing something.\nNot necessarily. Use the @when before_wp_load decoration to run the command before WordPress loads (skipping the check for WordPress entirely)\n. > We should at least consider it as a temporary solution.\n\nTemporary solutions have a tendency to become permanent solutions.\nWe're not in any rush for a solution, so better to do it right the first time.. I understand the concern.\n\nFor the relative simplicity of what we need to do to solve this problem (iterate through directories and perform a one-off modification), I think it's easier to do this within our existing toolset (WP-CLI commands) or bash, than it is to introduce a new tool, dependency, complexity, etc.\nA WP-CLI command gives us a bit more power than a bash script, but I'm not opposed to using the latter.. Here's my bash script to indicate bundled commands as bundled:\n```\n!/bin/bash\nset -ex\ncd $1\ngit checkout master\ngit checkout -b clarify-bundled\njq --indent 4 '.extra.bundled = true' composer.json | sponge composer.json\ncomposer dump-autoload && wp scaffold package-readme ./ --force\ngit commit . -m 'Clarify this command as a bundled command'\nMESSAGE=\"Clarify this command as a bundled command\nSee https://github.com/wp-cli/wp-cli/issues/4046\"\ngit push origin clarify-bundled\nhub pull-request -m \"$MESSAGE\"\n. @schlessera `gr` is pretty nice :).\nls -a vendor/wp-cli/ | grep command | xargs grun +@wp-cli-packages\n``. Because these arguments are passed directly through toget_users()`, I think you can already do this with:\nwp user list --meta_key=last_activity --orderby=meta_value_num --order=desc --fields=ID,user_login\nHave you tried this?. > Maybe you could update\n\nhttp://wp-cli.org/commands/user/list/\nto indicate you can use --meta_key= --orderby=meta_value_num and --order=desc\nor add a link to where is says that in the docs.\n\nSounds good \ud83d\udc4d . > This avoids scenarios where you let the entire test suite to run for an hour, only to then be blocked by a missing space.\nThis should be much less of a problem once we're done with #3728. Not sure what's up with the PHP 5.3 failure. Landing this, and then I'll see if the failure reproduces on master.. > The code quality tests (right now, only PHPCS) should only be run once, as their results won't change from one environment to the next. This could save some processing time for the pipeline.\nHowever, phpcs running on every build (and failing early if it's going to fail) will prevent the test suite from being run unnecessarily. \nSo, seems like there's pros and cons both ways.. @schlessera I'm leaning towards wontfix for this.\nGiven how long the test suite takes to run, I think it's a feature that PHPCS fails early if needed. Doing so prevents the test suite from taking up a bunch of time when it doesn't need to.\nDo you have a strong opinion the other way, or is it alright if I close?. > So, having the PHPCS only on the first entry in the matrix, with fast-finish set to true, would immediately fail the entire build if PHPCS fails.\nAh. This would be fine then.. I think Build Stages is the more correct way of implementing this.. We rely on the cron feature, which is also in beta. I think stages are the most correct way of implementing this.. > There's two test failures right now due to Composer conflicts:\n@schlessera Those test failures come from wp-cli/scaffold-package-command, not wp-cli/package-command. Testing locally produces the same issue:\n```\nlocal \u279c  wp-cli git:(master) wp package install wp-cli/scaffold-package-command\nInstalling package wp-cli/scaffold-package-command (dev-master)\nUpdating /Users/danielbachhuber/wp-cli/packages/composer.json to require the package...\nUsing Composer to install the package...\n\nLoading composer repositories with package information\nUpdating dependencies\nResolving dependencies through SAT\nDependency resolution completed in 0.001 seconds\nYour requirements could not be resolved to an installable set of packages.\nProblem 1\n    - Installation request for wp-cli/wp-cli 1.2.0-alpha -> satisfiable by wp-cli/wp-cli[1.2.0-alpha].\n    - wp-cli/scaffold-package-command dev-master requires wp-cli/wp-cli dev-master -> satisfiable by wp-cli/wp-cli[dev-master].\n    - Can only install one of: wp-cli/wp-cli[dev-master, 1.2.0-alpha].\n    - Installation request for wp-cli/scaffold-package-command dev-master -> satisfiable by wp-cli/scaffold-package-command[dev-master].\n\nError: Package installation failed (Composer return code 2). Reverted composer.json\n```\nI suspect it's related to the \"version\": \"1.2.0-alpha\" included in ~/.wp-cli/packages/ (from #3603):\nlocal \u279c  wp-cli git:(master) cat packages/composer.json\n{\n    \"name\": \"wp-cli/wp-cli\",\n    \"description\": \"Installed community packages used by WP-CLI\",\n    \"version\": \"1.2.0-alpha\",\n    \"authors\": [\n        {\n            \"name\": \"WP-CLI\",\n            \"email\": \"noreply@wpcli.org\"\n        }\n    ],\n    \"homepage\": \"https://wp-cli.org/package-index/\",\n    \"require\": {\n        \"runcommand/dist-archive\": \"dev-master\"\n    },\n    \"require-dev\": {},\n    \"minimum-stability\": \"dev\",\n    \"license\": \"MIT\",\n    \"repositories\": {\n        \"wp-cli\": {\n            \"type\": \"composer\",\n            \"url\": \"https://wp-cli.org/package-index/\"\n        }\n    },\n    \"config\": {\n        \"secure-http\": true\n    }\n}. > I suspect it's related to the \"version\": \"1.2.0-alpha\" included in ~/.wp-cli/packages/composer.json\nI tested and this is the case. If I permit \"version\": \"dev-master\", then the package can install.\nI guess this is a logical incompatibility with #2675. We'll need to specify the minimum supported version in the package's composer.json, then run composer require wp-cli/wp-cli:dev-master to run the tests against trunk.. This is fixed by https://github.com/wp-cli/scaffold-package-command/pull/95. > It would be nice if you could update a specific index or field of an encoded option, for example x[y=a,z=b] and you only wanted to update x[z] to c.\nWhat would this syntax look like?. I think this is better solved with wp shell at the moment:\n$ wp shell\nwp> update_option( 'test_option', array( 'foo' => 'bar' ) );\n=> bool(true)\nwp> $value = get_option( 'test_option' );\n=> array(1) {\n  [\"foo\"]=>\n  string(3) \"bar\"\n}\nwp> $value['foo'] = 'burrito';\n=> string(7) \"burrito\"\nwp> update_option( 'test_option', $value );\n=> bool(true)\nwp> $value = get_option( 'test_option' );\n=> array(1) {\n  [\"foo\"]=>\n  string(7) \"burrito\"\n}. > Anyway, it would be nice if you could set not only the columns to exclude/include, but also what (regex, etc) those columns need to match to be excluded or included.\nCan you do this by running wp search-replace multiple times?. I think this is better suited for a custom command.. @lilmike I'm not sure I follow. Could you explain in greater detail how this feature would work?\nAlso, as a heads up, https://github.com/wp-cli/ideas/issues is the best place for new features. This issue tracker is best for enhancements to or bugs for existing commands.. @lilmike Have you tried wp db ack ? https://github.com/runcommand/db-ack. Closing in favor of https://github.com/wp-cli/db-command/issues/7 and https://github.com/wp-cli/search-replace-command/issues/1. > If the dist-archive package is not installed, attempting to run wp dist-archive shows the following error\n\nIdeally this should rather be something like\n\nThis is expected behavior, because WP-CLI commands can be registered by plugins or themes. I agree with how it can be confusing.\n\nHowever as I understand it the dist-archive package can be run independently from a WP install.\n\nIt can, but it needs to be installed in the first place.. Hi @davidfavor:\n\nLet me know the correct way to drill down into a callback.\n\nIt's possible to profile a specific hook (action or filter) in the way you've specified. For instance, this is how you profile the wp_head hook:\n$ wp-cli.phar --allow-root profile hook wp_head --spotlight 2>/dev/null\nOnce you've profiled a hook, it's not currently possible to use wp profile to profile the callback itself.\n\nThis profile analysis sometimes returns low numbers + sometimes 10-20 seconds for mvp_site_layout() so my guess is there's some sort of callout to an external site.\n\nThis issue will probably help in the future: https://github.com/wp-cli/profile-command/issues/129\n\nTrying to drill down into functions.php as a standalone file, outside the normal WordPress stages, seem like it will never work, as the runtime environment never gets built... so... doing this returns PHP Fatal errors for redefined functions... which also seems broken...\n\nRight. You'd need to put the code you want to execute in a custom PHP file, and then wp profile eval-file on that file. Calling other files that require the WordPress bootstrap process probably won't work.\n. I suspect this is related to #3666 \nWindows isn't formally supported, but I'm amenable to including a fix if we can figure out what the cause is.. @Rarst Still up for submitting the PR, or should someone else take care of it?. @FarizF You can wp cli update --nightly to update to the nightly build. This issue hasn't made it into a stable release yet.. > Did I miss a use case where we do indeed directly depend on the composer.lock file now for the wp-cli/wp-cli package?\nSee #2280\nI think the Phar should be built off the lock file too. Our Phar build process can git clone; composer install to respect the lock file.\n\nRunning tests in Travis - PHP matrix is used and pulls in WP-CLI via Composer - composer.lock is irrelevant.\n\nIt is relevant for the main project test suite, however.. schlessera [9:11 AM] I just wanted to quickly discuss https://github.com/wp-cli/wp-cli/issues/3941 , because I think that fix misses the actual problem. (edited)\n[9:12] `platform` is being used, to force Composer to only consider PHP 5.3 dependencies.\n[9:12] I specifically did not propose to use that, because it will (afaik) render all Travis platform tests useless.\n[9:12] So, for the root package, all Travis environments will now build against PHP 5.3 dependencies, which makes the tests unreliable.\ndanielbachhuber [9:13 AM] oh\n[9:13] is this a theoretical problem or a real problem?\nschlessera [9:13 AM] Outside of the root package, this `platform` config will be ignored, so there, the real dependencies will be used.\ndanielbachhuber [9:14 AM] because we have a `composer.lock` file, dependencies shouldn't be changing between Travis environments\nschlessera [9:14 AM] Difficult to say, really. I think it might perhaps be safe, but the safety that the platform tests provide is a bit illusionary now.\n[9:15] That's why I wanted to split the Phar-building into a separate repo, so that we can force only the Phar to be 5.3, and the rest to adapt as needed.\n[9:16] So, I cannot really say in a definite way, whether this is yay or nay. I just know that it is potentially an issue.\n[9:16] It might cause tests to succeed and real installs to fail in specific circumstances.\ndanielbachhuber [9:16 AM] ok. I feel comfortable with things as they stand. I suspect it's most likely a theoretical problem because of the `composer.lock` file (edited)\n[9:17] the `composer.lock` file mandates dependencies be installed according to a specific hash\nschlessera [9:17 AM] Okay, I'm fine with that. I just wanted to make sure the behavior is clear.\n[9:18] There's several layers to a full install, so it is difficult to really know what the different edge cases will produce. I suppose we'll soon find out if it is indeed an issue.. Hi @Benosika,\nThanks for the feature request. This is already tracked in https://github.com/wp-cli/ideas/issues/16 (wp-cli/ideas is the appropriate place for feature requests).. Hi @tlovett1,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. Hi @L337LUKE,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. What about always deferring to wp on PATH?. > It would be even better if that option would also allow one to supply password in an encrypted - or at least obfuscated form.\nWhy? Could you share more detail about what you're trying to do?. Makes sense.\nThis sounds like it would be better suited for a custom command; it doesn't seem like a feature 80% of WP-CLI users need.\nAlso, I'd suggest you look at a true identity provider solution like SAML. I think you'll find that syncing user passwords isn't the most robust long-term approach.. > Seems like a blast-from-the-past bad design decision on behalf of the WP devs.\n@romanrev Please be respectful.. Hi @ahmadawais,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Which MySQL version are you creating the backup from, and which MySQL version are you running the import into?. @ahmadawais I'm not sure what the issue is, but I suspect it's related to your database charset. Happy to chat about it in #cli.. > If the wp-cli/wp-cli in the composer.json of this repo is versioned against a specific commit, we could generate a pull request whenever there's a push to wp-cli/wp-cli:master\nInteresting idea.\nHow would you handle, say, three pull requests merged in a close time frame, which would generate three separate (conflicting) branches?. > Maybe just run a nightly with the latest commit? Would that be sufficient?\nI'd like to be more frequent than this.\nWe could also commit and push to master. Although, then we run into the other problem of jobs being tied up.. Creating new issues seems like overkill. Let's go with the easiest possible implementation, which would be either:\n\nReporting the test failure to Slack, a la WordPress\nUsing Travis' email feature to send a build failure email to an address\n\n\nChances that the Phar nightly breaks although the composer install succeeds are pretty slim.\n\nSlim, but catastrophic. One common failure for the Phar nightly is that files are missing from the build.\nI think we need to build the Phar (or reuse the one that's already built), and run the tests against the built Phar. Historically, the test suite has always run against the built Phar.. @schlessera Assuming this is good.... It took me ~10 minutes to manually produce PRs for each package, copy and pasting as I went.. Could you clarify what you're trying to do?. Ok. I don't think this makes sense for wp plugin list because:\n\nWordPress doesn't give us this data already, which means:\nWe'd need to make a HTTP request for every plugin listed.. > How to do that though?\n\nWe can run:\nwp core download --version=$WP_VERSION --path=/wp-cli-test core-download-cache\nwp core version --path=/wp-cli-test core-download-cache\n\nAnd is it worth it?!\n\nBehat makes the HTTP request anyway, so we're only moving it earlier in the process.. @gitlost I decided to go with your original approach (ignoring @require-wp-(.+) entirely for 'latest') because it turned out to be more elegant.. @schlessera Can you please open a new issue referencing this issue, instead of re-opening an issue assigned to an old milestone?. \ud83d\udc4d  I'm amenable to making them protected, if you'd like to submit a PR for this.. Thanks for the report @seanosh \u2014 appreciated.. Thanks @jalavoy ! I'll dive into this when I have a moment.\nWe may actually abstract builds into a separate repo, see #3950 . Sorry for the delay on this, @jalavoy \nI've been refraining on this pull request because we're undecided on which direction we want to take the build system. I'll follow up once we have a better sense of how we want to handle this.. Thanks again for your work on this, @jalavoy. A variation of this is now live in a separate repo: https://github.com/wp-cli/rpm-build. \ud83d\udc4d  This seems like a good place to start.. Hi @lordspace:\n\nI was wondering if there is a way to pass a JSON or base64 encoded JSON/php serialized data to wp-cli and have it execute each command sequentially. That would save the boot time.\n\nIt's not currently possible, but something you could put together with a custom command. I don't know if it would ever make sense to include in WP-CLI proper because there are a number of qualifiers about performing multiple operations in the same request.\n\nMost commands take at least 1 second and above (the staging server is not an SSD powered though) see 'exec_time' field.\n\nYes, loading WordPress can take some time. If you don't need your plugins or theme, including --skip-plugins --skip-themes may provide some speed improvements.. \ud83d\udc4d \nOn a related note, our test coverage for help doc generation is somewhat lacking (as I'm sure you'll discover). I'd love to see some PHPUnit tests for this that lay the foundation for more comprehensive coverage.. > What specific coverage are you looking for?\nOutput rendering (e.g. these arguments render to X string).\n\nAre you okay with more integration type tests for that or should I break out the third argument parsing there into smaller methods that can be more traditionally unit tested using PHPUnit?\n\nPHPUnit would be more precise, and faster.. @nerrad Did you have any code you want to submit for this?. > The format for this additional argument would be structured array of arrays where each array represents an example.\nI'm going with a simpler implementation of a longdesc argument. I don't think it's worth the effort to invent a data schema for the longdesc at this point.. Hi @Benosika,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. Closing in favor of #3966 because I accidentally deleted php/commands/theme.php and don't want the revert in history.. Thanks for the report, @adamj88.\nIt looks like http://localhost/ is saved to the database as http://locahost, which means the \"Value passed is unchanged\" check in WP-CLI fails.\n$ wp option update home 'http://localhost'\nSuccess: Updated 'home' option.\n$ wp option update home 'http://localhost/'\nSuccess: Updated 'home' option.\n$ wp option update home 'http://localhost/'\nError: Could not update option 'home'.\n$ wp option get home\nhttp://localhost\nThe same problem does present itself with siteurl too:\n$ wp option update siteurl 'http://localhost/'\nSuccess: Updated 'siteurl' option.\n$ wp option update siteurl 'http://localhost/'\nError: Could not update option 'siteurl'.\n$ wp option get siteurl\nhttp://localhost\nThe trailing slash is actually removed in get_option(): https://github.com/WordPress/WordPress/blob/9d7ea04936125041b224b227f48ad4194066b314/wp-includes/option.php#L125-L126\nFor the sake of correctness, WP-CLI should call untrailingslashit() on those options prior to performing the comparison.. > it seems wp post list doesn't recognize that a given post_type doesn't exist.\n\nAm I missing something?\n\nWhat do you see when you run this?\n$ wp --path=$(pwd) post list --post_type= bwg_gallery --post_status=any\nNote the inclusion of --post_status=any.\n. Ok. It's hard to say what the issue might be without being able to debug further, but it looks like this is a problem with the plugin, not WP-CLI.. > why does wp --path=$(pwd) post list --post_type=this_post_type_doesnt_exist\n\nalways return something, instead of raising an error?\n\nBecause it passes the arguments directly through to WP_Query, which doesn't produce an error.. FYI - wp cron event list now lives in https://github.com/wp-cli/cron-command. Also, wp profile has a get_name_location_from_callback that might be useful to abstract to WP_CLI\\Utils: https://github.com/wp-cli/profile-command/blob/master/inc/class-profiler.php#L469. Could/should this be solved with documentation instead?\n\nUse wp hook <hook> to inspect the callbacks on each event.. Care to submit a pull request against the new location for features/taxonomy.feature ? https://github.com/wp-cli/entity-command/blob/master/features/taxonomy.feature. @schlessera Doesn't this block mean iterator_map takes the second and any subsequent arguments as $fn?\n\nforeach ( array_slice( func_get_args(), 1 ) as $fn ) {\n    $it->add_transform( $fn );\n}\nNote array_slice( func_get_args(), 1 )\nIntroduced in 262245904b21fcec6962eb2728ca520a7011e146. \ud83d\udc4d \nCoincidentally, @jeichorn mentioned this last night.\nClosing in favor of https://github.com/wp-cli/extension-command/issues/3. Thanks @SosyalAlkolik !. @szepeviktor Could you clarify?. Closing in favor of #4236. > Is it possible to designate wp-cli to clean up more often, or simply does not keep the cache at all?\nIt's not possible currently.\nAs a workaround, you could specify an alternate cache directory with the WP_CLI_CACHE_DIR environment variable, and then use system cron to delete the directory more regularly. Or, you can use system cron to delete the ~/.wp-cli/cache/ dir.. Probably not. It seems like this is best handled outside of WP-CLI at the moment.. Why do you need a command for it when you can run rm yourself?. Thanks!\n\nAny upcoming License changes (e.g. GPL2 to GPL3+) are hereby granted.\n\nWP-CLI is licensed under the MIT license, with no current plans to change.. The imported file is passed directly through to the mysql executable: https://github.com/wp-cli/db-command/blob/master/src/DB_Command.php#L385. Util function might be simple enough. I care most that it's reliable and has test coverage.. Hi @aerogus,\nI suspect this issue is actually related to #1631. Can you confirm?. > Kind of. But it's more linked to the parsing of root index.php that the wp-config.php one ?\nWP-CLI doesn't parse index.php any more than your web server does. Are you sure you didn't change wp-config.php when you were debugging?. Ok. We can look at it further if it comes up again.. For the next person to run into this, here's what I use with my WebFaction account:\n```\n$ cat pre-ssh.php\n<?php\nWP_CLI::add_hook( 'before_ssh', function() {\nswitch( WP_CLI\\Utils\\parse_ssh_url( WP_CLI::get_runner()->config['ssh'], PHP_URL_HOST ) ) {\n    case 'handbuilt.co':\n        putenv( 'WP_CLI_SSH_PRE_CMD=export PATH=$HOME/bin:$PATH' );\n        break;\n}\n\n});\n```. Ugh, backspace characters. Thanks @wp-make-coffee !. > It would be nice if the Behat scenarios were tagged a bit more generously with the relevant components they touch. This would improve the development workflow overall I think but also for contributing by letting you run a subset of feature tests more easily.\nwp scaffold has had some of these in the past, but I don't know if they've been used other than the first time they were added https://github.com/wp-cli/scaffold-command/blob/master/features/scaffold.feature#L3\nPersonally, when I'm working on a specific scenario, I tag it with @daniel and then run behat --tags=\"@daniel\"\n\nI realize this is already possible in a way by specifying the specific feature file, but I'm suggesting something a bit more granular, so you don't have to run a whole feature file if only a handful of scenarios meet your criteria.\n\nYes, this is deliberate. I've found it more effective to break component tests into logical files.\n\nFor example, if I want to work on a feature related to a specific aspect of the configuration, it would be nice if all the related scenarios followed a particular tagging convention like:\n@config:path or @config:require for these specific configuration values.\nFlags could use a similar convention: @flag:path @flag:url etc.\n\nOne challenge I can see with adopting this is the associated maintenance burden.\nFor this to be a useful part of the development experience, all scenarios would need to be accurately flagged. With https://github.com/wp-cli/wp-cli/issues/3728, everything is getting split into separate subpackages, which increases the difficulty of keeping things tagged properly.\nI'm not strongly opposed to this, but I see the costs as outweighing the benefits at this point.. > Is this documented anywhere? If this is the recommended way right now, it would be useful to others as well.\nIt's not, but it could be. Here are the two places you can submit pull requests:\n\nhttps://github.com/wp-cli/handbook/blob/master/pull-requests.md\nhttps://github.com/wp-cli/scaffold-package-command#wp-scaffold-package-tests\n\nIf you want to spend a bit more time writing docs, it'd be great if you worked on a consolidated document: https://github.com/wp-cli/handbook/issues/3. > I may do that.\nSounds good, thanks @aaemnnosttv \nClosing this issue as wontfix. We can always re-evaluate later if some additional information comes to light.. Hi @OussamaElgoumri,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. \ud83d\udc4d \nThis change would now be made to https://github.com/wp-cli/entity-command Up for submitting a pull request?. Thanks @tillkruss \ud83d\udc4d . I'm amenable to it.\nBtw, new command ideas go here: https://github.com/wp-cli/ideas/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc\nwp site generate would best fit in https://github.com/wp-cli/entity-command. > The build failed on a command that is using --url in a seemingly non-standard way.\n--url=<url> is a global parameter. Global parameters can be required by commands though.\n\nI will have to look into why that specific parameter behaves differently.\n\nUnit tests!. Hi @aelsharawi,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Thanks for the report, @oneumyvakin.\nThis improvement to the error message seems like a reasonable suggestion.\nWant to submit a pull request for it? The corresponding code is in WP_CLI\\Runner: https://github.com/wp-cli/wp-cli/blob/2169810bc456391f642b67a48549b12d3d16f571/php/WP_CLI/Runner.php#L1164-L1168\nPull requests are expected to have corresponding functional tests. You can find an overview here: https://make.wordpress.org/cli/handbook/pull-requests/#running-and-writing-tests\n. Here's how I was able to reproduce the issue, assuming --dbuser=root and an empty db password:\nSetup\n$ wp core config --dbname=mstest --dbuser=root\nSuccess: Generated 'wp-config.php' file.\n$ wp db create\nSuccess: Database created.\n$ wp core multisite-install --url=mstest.dev --title=mstest --admin_user=wpcli --admin_email=wpcli@example.org\nAdmin password: y@dyUUg6JBQRf!j6Pd\nCreated single site database tables.\nSet up multisite database tables.\nAdded multisite constants to 'wp-config.php'.\nSuccess: Network installed. Don't forget to set up rewrite rules.\nEdit wp-config.php to replace mstest.dev with mstest.org\n$ vim wp-config.php\ndefine( 'WP_ALLOW_MULTISITE', true );\ndefine( 'MULTISITE', true );\ndefine( 'SUBDOMAIN_INSTALL', false );\n$base = '/';\ndefine( 'DOMAIN_CURRENT_SITE', 'mstest.dev' );\ndefine( 'PATH_CURRENT_SITE', '/' );\ndefine( 'SITE_ID_CURRENT_SITE', 1 );\ndefine( 'BLOG_ID_CURRENT_SITE', 1 );\nUsing WP-CLI produces the error\n$ wp option get home\nError: Site mstest.org/ not found.\n. In order to conditionally adapt the error message, we'll need to determine the ways in which ms_site_not_found can be triggered (whether it's only this condition where the domain can't be found in the blogs table, or others), and make sure the error message handles all potential conditions.. @BhargavBhandari90 Can you start a pull request so we can continue the conversation on the pull request?. Tests pass in https://github.com/wp-cli/package-command/pull/8, so this is good to go. This landed in #3872. As a point of clarification, this change will now need to be made in https://github.com/wp-cli/language-command. @1naveengiri Want to submit a PR for wp core language uninstall too?. > should I create an issue for it or just send PR?\nPR is fine. We can keep this issue open until it's done.. \ud83d\udea2 \ud83d\udea2 \ud83d\udea2 . Hi @wonderyann,\nWP-CLI loads WordPress inside of a function: #2089\nGlobal variables need to be explicitly globalized in order to function as expected in WP-CLI.\n. > But so many plugin use unexplicit globals that it will be hard to make wp-cli to work :\nYou can use the --skip-plugins flag to skip loading plugins while using WP-CLI.\nOr, you can skip a specific plugin by specifying the plugin slug --skip-plugins=userpro. > Expected result: limited to those cron jobs that are actually specified, it's written as an option and not an argument after all.\n\ud83d\udc4d I think this is reasonable. Closing in favor of https://github.com/wp-cli/cron-command/issues/10. > Sometimes you want to run a cron job if it exists and is due now. If it doesn't exist, then all is fine, if it shouldn't be run now, then it shouldn't be run.\nHave you seen the --due-now flag?\n```\nRun all cron events due right now\n$ wp cron event run --due-now\nSuccess: Executed a total of 2 cron events.\n```\n\nThis is probably an OK example, using unix cron to check if an article is scheduled for publishing, if there isn't one, don't error out, rather give a warning which gets suppressed with --quiet.\n\nI think implementing this specific feature might be better suited for a bash script, so you can ignore the return code if you want. I'm not sure why WP-CLI needs to include an option controlling the return code.. > Compare with an empty unix cron file: you won't get a warning or an error, there's nothing to execute. The absence of a cron job must not give an error message.\nBut, in the example you provided, you included a cron job that didn't exist?\n:~# wp-cli cron event run --quiet publish_future_post \nError: Invalid cron event 'publish_future_post'\nIf a unix cron file has a path to a non-existent executable, it will error when it tries to execute it.. > How can I get the domain from database?\nTaking a step back, if a WordPress multisite instance contains dozens of domains, how would you determine the correct one?\nAlso, can you include a functional test that describes the behavior you'd like to see?. @BhargavBhandari90 When do you think you'll be able to finish this up?. @BhargavBhandari90 Are you planning to fix your functional test?. Thanks for your work on this, @BhargavBhandari90.\nI'm continuing this on in #4212. @rmccue Out of curiosity, which internal functions do you find yourself using most often?. At this point, we're going to invest our energy into improving https://make.wordpress.org/cli/handbook/internal-api/\nThanks for the idea though!. > The only change requested here is that WP-CLI trusts the developer that these annotations mean the method is ok to use.\nWhy is this necessary? What can't you do now (feature-wise) that this pull request would enable?. > I can't argue that it is necessary but it would certainly be a really nice convenience and support for DRYer command methods.\n\n[...]\nIt's quite a simple change on the internal side of things. Is there a reason why we should not allow for this?\n\nI wish I had a long-form explanation to point you to. I don't, which means I probably need to write it at some point in the future.\nThe short answer is:\n\nSimple changes are only sometimes simple.\nEvery line of code added to the project has some long-term maintenance cost.\nProjects should be opinionated about how they want to evolve.\n\nA good litmus test for whether something should be added: is it necessary? If yes, why? What value does it bring to the project as a whole? How will it benefit other users? Do its benefits significantly outweigh its costs?\nIf the change is defensible against these questions, then it's probably a suitable change. If it's not, then it's probably not.. We'll keep this in mind for future consideration.. Closing in favor of https://github.com/wp-cli/ideas/issues/71. Attempting rebuild after clearing Travis cache.. @schlessera What do you think of this overall approach? At a high level:\n\nFor whitelisted commands, capture a log of command execution and POST the JSON to our service that will process it and then send to Google Analytics. The advantage to this is that we can easily hook in other data stores at a later date as needed.\nGenerates a UUID that's stored in ~/.wp-cli/uuid, so we can track usage over time.\nCommandExecutionLog will also be responsible for transforming command args into anon data we can capture.. :shipit: \n\n\nWe can rethink iA if having \"Create New Issue\" at the top causes too many issues.. Also, these are unauthorized requests right now, which means we're rate-limited to 10/minute. If the issue count ends up disappearing from these docs, we can add an auth token, but that will only take us to 30/minute.. No longer applicable, see https://github.com/wp-cli/wp-cli/issues/3886#issuecomment-300616977. Looking like this locally:\n\n. review-merge issues look like this:\n\n. Here's a neat dashboard use by Jekyll https://dashboard.jekyllrb.com/. Dash is live. 'review-merge' list was yanked because of #4191. > Where?!\nOh, https://make.wordpress.org/cli/dash/. It took me way longer than I expected, but all packages now have tagged releases.. \ud83d\udea2 . > The bootstrap refactoring code did already contain a custom autoloader to get around the fact that the Composer autoloader was not yet active during bootstrap, but ... it did not actually use it.\nIs there a test we can add for this?. > For the Autoloader class itself, or for the code that uses it for the bootstrap process?\nFor whatever code we need to test to ensure this doesn't silently break again.. Punting on this indefinitely. We can address in the future if it ever comes up.. > I don't think that hook should run twice, otherwise commands relying on it will be triggered twice as well...\nGood point, I hadn't considered this.\nOriginally, I added two calls because, technically, a command could run on @when before_wp_load (which would bypass the first instance), then call WP_CLI::get_runner()->load_wordpress().\nHowever, this exposes another issue, which is:\n\nI should be calling $this->do_early_invoke( 'after_wp_config_locate' ); instead of WP_CLI::do_hook()\nWe'd need to use more of $this->do_early_invoke() in order to run commands on arbitrary hooks.\n\nFor the purpose of solving https://github.com/wp-cli/db-command/issues/15, I'm going to switch the commands to use @when before_wp_load, and then replicate the little bit of code that checks for an existing wp-config.php.. > Could it be possible to add a check in Runner::set_wp_root() to not attempt overriding the defined ABSPATH if it is available?\n\nSome WordPress installations do not follow the generic method of having everything clumped inside a single directory which breaks some use-cases of WP-CLI.\n\nWhile it seems easy enough to make this change, WP-CLI has historically only officially supported WordPress install configurations that you can also achieve through the web interface. Introducing this check implies we support every potential installation configuration, which is a rabbit hole I'm not keen to enter.\n\nMy problem is that setting path in wp-cli.yml forces ABSPATH to the same directory, which in turn breaks some configurations:\n```\npath === '/path/to/public_html` which has subdir installation of WP core\nwithout predefined ABSPATH\n```\n\nIt seems you're using --path=<path> incorrectly. It's meant to be used to set ABSPATH.\nIf WP is installed to a wp/ subdirectory, then you should use --path=/path/to/public_html/wp.. Can you verify my-db-user has permission to create new databases?. > I can try, but I'd need some assistance doing that.  I've tried a couple\n\nthings to determine privileges, but with no luck:\n\nOk. GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. Just to weigh in here.\nTo land the pull requests that have already been submitted, I've been reverting the \"PHPCS: Remove exclusions that can be fixed\" changeset so Travis passes.\nOnce all of the pull requests are merged, I'll create a new pull request restoring \"PHPCS: Remove exclusions that can be fixed\".\n. We can leave the remaining sniffs ignored:\n<rule ref=\"WordPress-Core\">\n    <exclude name=\"WordPress.Files.FileName.InvalidClassFileName\" />\n    <exclude name=\"WordPress.Files.FileName.NotHyphenatedLowercase\" />\n    <exclude name=\"WordPress.NamingConventions.ValidFunctionName.FunctionNameInvalid\" />\n    <exclude name=\"WordPress.NamingConventions.ValidFunctionName.MethodNameInvalid\" />\n    <exclude name=\"WordPress.NamingConventions.ValidVariableName.NotSnakeCaseMemberVar\" />\n    <exclude name=\"WordPress.NamingConventions.ValidVariableName.MemberNotSnakeCase\" />\n    <exclude name=\"WordPress.NamingConventions.ValidVariableName.NotSnakeCase\" />\n</rule>. @jrfnl Ah. Want to submit a pull request to that effect?. No longer applicable, see https://github.com/wp-cli/wp-cli/issues/3886#issuecomment-300616977. > Something that is bugging me when I work with wp-cli is that I often wish I could specify a slug instead of an id when I do actions on individual items.\nRelated https://github.com/wp-cli/wp-cli/pull/3896\n\nHaving to look up the id before an edit seems counterproductive when slugs are unique per taxonomy or post_type (or are they not? parent/slug vs slug in Pages?)\n\nThey're unique per taxonomy and post type. I think it makes more sense to start with terms, as it's more common to refer to a term by its slug than it is a post.\n\nI'd love to have a crack at it! I'm a slow, rusty programmer though so any pointers at where to start would be welcome..\n\nSure! I've created a new issue for it in the repo for that specific codebase: https://github.com/wp-cli/entity-command/issues/13\nFor a primer on writing commands, check out the commands cookbook: https://make.wordpress.org/cli/handbook/commands-cookbook/. Hi @EricBusch,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. > I found the --debug flag shortly after posting this ticket and that led me to the issue which I believe is with the SSL plugin.\nYep, that's your problem.. Hi @anantshri,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. @hason Interesting. platform allows you to denote an override for composer.lock generation?. Neat. I love easy fixes!. Hi @KwadroNaut,\nThanks for the report.\n\nEspecially when using the debug flag, I expected it to be more verbose when encountering broken records.\n\nI'm not sure I understand what you expect WP-CLI to do. If you have broken serialized data, how would WP-CLI know what's broken in the serialization?\nCan you clarify further?. Also, it's worth noting WP-CLI uses get_user_meta() under the hood, so it doesn't really have visibility into whether or not the source is broken \u2014 only the value returned by get_user_meta().. > However, the --format stuff, seems to be from wp-cli?\nCorrect.\n\nI expected a notice, warning or error when such serialized entries are obviously incorrect and I try to show them in a (re-)formatted way.\n\nHow would WP-CLI know the entry is expected to be serialized, if it only renders the return value from get_user_meta() ?. Hi @PositiveLions \nYou can use the --skip-plugins=<plugins> argument to skip the loading of specific plugins when using WP-CLI. See https://make.wordpress.org/cli/handbook/config/. > the question is why it's needed?\nThe code in WP-CLI is an interpretation of an error returned by WordPress.\nWordPress uses the supplied request URL to determine which site to load. If there isn't a valid site to load, then WordPress halts the load process.\n\nCan wp site list run earlier, before WordPress needs to load the sites, since it just needs to return a list and shouldn't care which site it is on.\n\nUnfortunately, no. Plugins and themes can modify the site list (however unlikely), so WordPress needs to fully load the current site before producing the list.\nYou're welcome to write your own WP-CLI command to do what you need, though. See Commands Cookbook for more: https://make.wordpress.org/cli/handbook/commands-cookbook/. > I presume it's because I have those parameter in my wp-config.php\nThis is correct. You'll need to set $_SERVER['HTTP_HOST'] in the CLI context. Something like this should work:\nif ( defined( WP_CLI ) && WP_CLI ) {\n    $_SERVER['HTTP_HOST'] = 'host.local';\n}\nAs a heads up, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\n. Action items on this issue are:\n\n[ ] Create a review-merge label in all project repos (will require #3857)\n[ ] Create a shortcode for make.wordpress.org/cli/dash (#4045) that lists all pull requests with review-merge label\n[ ] Update Commiters credo to mention this workflow change.. Sorry, I'm not sure I follow. Your second example isn't valid CSV.\n\nCan you clarify?. > My package was installed as expected, but it wasn't registered.\nJust to clarify, does the package work when you try wp scaffold movefile ?. Ah.\nThe immediate problem is that you need to replicate https://github.com/wp-cli/scaffold-package-command/pull/104 and https://github.com/wp-cli/scaffold-package-command/pull/105\nHowever, I'd like to keep this issue open because I want @schlessera's input on how we should handle this problem generally.\nIt seems possible other commands registered to existing command namespaces will experience this problem of unexpectedly no longer working.. > The obvious solution would be to throw an error when you try to add a sub-command for a parent that is not known yet.\nI'm more keen to find a solution that doesn't break backwards compatibility. Ideas for this?. Build failing because of https://github.com/wp-cli/wp-cli/issues/4087. Produces output like this:\nwp --require=utils/contrib-list.php contrib-list --format=markdown\nCurrent open wp-cli/wp-cli milestone: 1.2.0\nCurrent open wp-cli/handbook milestone: 1.2.0\nClosed wp-cli/db-command milestone(s): 1.0.1\nClosed wp-cli/media-command milestone(s): 1.0.1\nClosed wp-cli/server-command milestone(s): 1.0.4, 1.0.3, 1.0.2, 1.0.1\nClosed wp-cli/entity-command milestone(s): 1.0.1\nClosed wp-cli/extension-command milestone(s): 1.0.2, 1.0.1\nClosed wp-cli/config-command milestone(s): 1.1.0\nClosed wp-cli/scaffold-command milestone(s): 1.0.3, 1.0.2, 1.0.1\n[aaemnnosttv](https://github.com/aaemnnosttv), [afragen](https://github.com/afragen), [balbuf](https://github.com/balbuf), [behzod](https://github.com/behzod), [carl-alberto](https://github.com/carl-alberto), [CodeProKid](https://github.com/CodeProKid), [danielbachhuber](https://github.com/danielbachhuber), [diablodale](https://github.com/diablodale), [diggy](https://github.com/diggy), [dnmvisser](https://github.com/dnmvisser), [fjarrett](https://github.com/fjarrett), [flaskboy](https://github.com/flaskboy), [geekoun](https://github.com/geekoun), [gitlost](https://github.com/gitlost), [hason](https://github.com/hason), [JayWood](https://github.com/JayWood), [jeremyfrady](https://github.com/jeremyfrady), [ka7](https://github.com/ka7), [kcarwilemiller](https://github.com/kcarwilemiller), [lichtscheu](https://github.com/lichtscheu), [mbovel](https://github.com/mbovel), [MiteshShah](https://github.com/MiteshShah), [miya0001](https://github.com/miya0001), [ntwb](https://github.com/ntwb), [rahul3883](https://github.com/rahul3883), [raquelmsmith](https://github.com/raquelmsmith), [Rarst](https://github.com/Rarst), [ryanshoover](https://github.com/ryanshoover), [schlessera](https://github.com/schlessera), [Sidsector9](https://github.com/Sidsector9), [SosyalAlkolik](https://github.com/SosyalAlkolik), [ssnepenthe](https://github.com/ssnepenthe), [Steveorevo](https://github.com/Steveorevo), [tfrommen](https://github.com/tfrommen), [tillkruss](https://github.com/tillkruss), [timdream](https://github.com/timdream), [trepmal](https://github.com/trepmal), [wp-make-coffee](https://github.com/wp-make-coffee), [zacksheppard](https://github.com/zacksheppard). > Does it make sense to filter wp-make-coffee?\nI was thinking it'd be a fun easter egg.. Actually, https://github.com/composer/composer/issues/6342#issuecomment-303280043 is the issue.. Composer issue is fixed: https://github.com/composer/composer/issues/6342#issuecomment-303490880. Previously https://github.com/wp-cli/wp-cli/issues/3121#issuecomment-241717974. > The main problem is how to display the descriptions which can be quite long and can include things such as the list of possible values.\nProbably going to close this issue unless there are suggestions for solving this problem.. > Perhaps accepting a question mark at each prompt which then displays the expanded info\nHow would I input ? as a value for the field then?. \ud83d\udc4d Seems doable.\n. As it turns out, the issue was a different one.\nWe need wp help to load custom commands, so the help docs for the custom commands actually render.. > So suggest a documentation update to drop the -i from the sudo command?\nBut then what would happen to the loading of .profile?\n\nThis means that login-specific resource files such as .profile or .login will be read by the shell.. > Therefore, I recommend putting that script into the wp-cli/wp-cli package, and removing it from any other package.\n\n@schlessera Isn't this currently the case? What needs to be done with this issue?. \ud83d\udcaf Neat idea. \nhttps://make.wordpress.org/cli/good-first-issues/. This was fixed by #4161. Does this / should this wordwrap examples?\n\nmaybe just use 90 though it seems pretty arbitrary?\n\niirc 80 is a more common standard.. > Sometimes it can be very helpful to know when a WordPress installation is ready for installation\n\n(files in place), like with the official WordPress Docker images from Docker Hub which copies\nthe WordPress files after starting it up.\n\nCould you describe this use case in a bit more detail?\n\nwp core is-installed only exits successfully if not only the WordPress files are in place -\nbut also the setup procedure has been completed (either by running wp core install command or by filling out the installation form manually).\n\nRight. In WordPress vernacular, \"installed\" means \"correct database tables present\", in addition to the core files being in place.\nWhat you're describing sounds more like wp core is-download, although I'm curious why you need WP-CLI to handle that for you.. @strarsis Could you provide some direction on how you'd suggest moving forward with this improvement?. \ud83d\udc4c Thanks @strarsis . @schlessera I've updated the issue description with a task list of what I think's remaining here. Can you verify?. > The current repository was originally built to run checks before building the Phar, as a result of a pull request. So, it pulls everything in via the source packages, and then runs the test suites of all these packages.\nCorrect, this is my understanding.\n\nFor the first item, I suppose you want to have the tests run against the final nightly build of the Phar instead, not the source that would be used for that build.\n\nYes. My thinking is that, given #4095, it'd be simpler (and more correct) to run the test suite against an existing distributed build.\nAt this point, I'm fine with catching any regressions on a nightly basis. If they start happening more frequently, we can run the test suite more often.. @schlessera Do you have an opinion on the new repository name? One idea (that I don't really love): wp-cli/full-test-suite . wp-cli/automated-tests works for me.. @schlessera Any sense as to when you'll be able to wrap this up?. @schlessera Nightly automated build just broke a second time in a week (first was https://github.com/wp-cli/package-command/pull/28):\n\nCould we get both successes and failures piped into #cli on Slack so we can close out this issue?. @schlessera Can you own this through to completion please?. Looks like we've been failing for a week:\n\n. \ud83d\udea2 \ud83d\udea2 \ud83d\udea2 . Slightly terrifying.. Hm, not sure why Travis isn't getting started. I'll see if merging produces a master build.. I'm not super keen on making this an option unless we have to, so I'd suggest we wait until this is presented as a real world problem before we fix it.. > Prior to the great decoupling of 2017, I ran WP-CLI locally with just a clone of the git repo so I could run the development version and contribute patches pull requests.\nJust to clarify, you did need to run composer install to install the project's other dependencies.\n\nThis should be documented so that new contributors have clear instructions on how to run a development version of WP-CLI.\n\nIs this already covered by https://github.com/wp-cli/handbook/issues/57 ?. > The reason I opened the issue here is I thought this should be documented in the readme. I think if a developer finds a bug in WP-CLI and wants to find out how to install the development version, they're likely to read the readme on GitHub first. Having this in place in both the readme and the handbook might be a good idea.\nMakes sense.\nGenerally, I think we want to point people to the handbook as much as possible, because it's easier to maintain one central documentation source than it is duplicate documentation in dozens of repos.\nWe can keep this issue open until we revisit the contribution workflow though, and make sure composer install --prefer-source is noted.. > We can keep this issue open until we revisit the contribution workflow though, and make sure composer install --prefer-source is noted.\nThis is now documented: https://make.wordpress.org/cli/handbook/pull-requests/#setting-up. It's interesting that mysql worked before, /usr/bin/env mysql works if you call it directly, but /usr/bin/env mysql doesn't work when called with proc_open().\nDid you do anything previously to get mysql to work? Can you share any relevant contents of your .bashrc that might shed more light?. > All I had to do to get mysql to run was having the bin folder on my path. I am using XAMPP's mysql executable.\nAh, make sense.\nIs there an equivalent to /usr/bin/env on Windows that you could symlink /usr/bin/env to?. > See gitlost#10 for adding a simple WP_CLI\\Utils\\maybe_prefix_env() function. I think this is a candidate for 1.2.1.\nRather than having a dozen instances of WP_CLI\\Utlls\\maybe_prefx_env(), it'd be better to have Utils\\run_mysql_command() dynamically adapt /usr/bin/env on Windows. This way, we only need to fix it once.. @gitlost Can you open the PR against this repo so I can comment on it?\nAlso, generally speaking, can you open PRs against this repo first, so we can ensure the history remains searchable within the project?. Hi @gulaholic,\nIt's hard to say what the problem might be without having access to debug.\nCan you share the debugging you've tried? Does the problem reproduce in a stock WordPress install (no plugins active, and using a default WordPress theme) in the same environment?. > The question is, how can a plugin interferes WP CLI function.\n\nI thought WP CLI is a standalone software or does it use Wordpress core function to check updates?\n\nWP-CLI uses WordPress functions under the hood.. We'll need to release a 1.2.1 for this.. @schlessera We actually need to run this after the after_wp_load hook, because commands can be registered on the after_wp_load hook\nGenerally, a better approach may be to process these deferred commands immediately before WP-CLI tries to resolve and run them. @schlessera Looks like this doesn't quite fix it?. We should restore the pre-1.2.0 behavior here. It might be as simple as a kill switch in our bootstrap process that bails when the context isn't CLI.. > So, basically, every command that is added through the \"files\" directive will at least call the WP_CLI::add_command() method.\nAh, I see.\n\nWe can however put a kill switch into WP_CLI::add_command() that will immediately bail when not in CLI.\n\nYes, this seems like the most sensible approach to me (as hacky as it sounds).. > However, I noticed that we should change our \"standard\" command addition file.\nYes, although let's hold on doing that for now, because we might want to do something different in #3928. @pierre-dargham @kalinichenko88 Can you test and verify the fix in #4126 ?. > Using the \"files\" property from composer, is it really a good solution ?\nNot necessarily, but that issue is already tracked in #3928\nThe scope of this issue is to fix the unexpected breaking change introduced in 1.2.0. > I just checked the fix in #4126 and it solves the issue : no more fatal error in WP frontend.\nGlad to hear.\n\nBut in the long term, I would suggest a refactoring of the wp-cli bootstrap like suggested by @romaingugert,\n\nWe'll keep it in mind, thanks.. @gitlost Any good ideas for this?. > Well for 1.2.1 an idea obviously would be to default WP_CLI_HELP_WORDWRAP_WIDTH to 90 which was (sort of) what it was before.\nHm. I suppose this would be fine, as long as it fixed all of the current problem descriptions we currently have.\n. > Documentation on wp-cli.org/commands/ was close to perfect....now on wp.org it's subpar at best. I can't find the global flags/options list which was in the sidebar with each command page.\nCan you constructively clarify what you mean by \"subpar at best\"? Are you solely referring to the global parameters, or other aspects too?. > The breadcrumbs show /home/commands but when I click on home I would expect to be directed to a main wp-cli page ... not the developer resources page.\nThis is an information architecture change, so I don't know that we'll be changing it, but I understand your point.\n\nThere's no clear organization between wp-cli docs - I would expect to be able to navigate between pages of cli docs with links or some context. For example, https://developer.wordpress.org/cli/ doesn't exist.\n\nGood point. We should either create a page there, or redirect it to wp-cli.org.\n\nThere should be a link to a main wp-cli documentation page here - https://developer.wordpress.org/\n\nI agree.\n\nThe link to \"github issues\" on single command pages on wp.org doesn't work\n\nIt seems to work for me:\n\n\nThe leave a comment link on single command pages doesn't work\n\nGood point, we can get that fixed.\n\nBut until it's setup to have all the content and relevant info from wp-cli.org there's no reason to forward people to the wp.org site. Let's build it out in tandem and then we can turn off the wp-cli.org site when the content on wp.org is great!\n\nFor a variety of reasons, we decided to do it the way we did. But, we can continue to iterate on the new site until it's as good as the old one.. > And thanks for being receptive to my gripes.\nNo worries. Just wanted to get to the source of the issue.\n\nIn spite of what it may sound like I really appreciate and respect the work you've done for wp-cli and the rest api.\n\nThanks!. > The leave a comment link on single command pages doesn't work\nFor now, I've removed it in favor of this comment:\n\nhttps://meta.trac.wordpress.org/changeset/5614\n\nThe link to \"github issues\" on single command pages on wp.org doesn't work\n\nI've updated it so it links to both open and closed issues about the command.\nhttps://meta.trac.wordpress.org/changeset/5615. > Personally I think that the commands page should have the same navigation sidebar as the handbook pages.\nCould work, although it'd need to fit within the design.. Adding WP-CLI to developer.wordpress.org homepage in https://meta.trac.wordpress.org/attachment/ticket/2937. Continuing this in other issues. For the latest, see https://github.com/wp-cli/wp-cli/issues/4244#issuecomment-320807561. Hi @fbnlsr,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. @schlessera I don't love this implementation of having RegisterDeferredCommands::process() register a hook, and having to introduce a new hook within WP_CLI\\Runner->find_command_to_run():\n\nIt doesn't feel quite right.\nEvery new hook we introduce is some execution point we have to maintain permanently.\n\nIs there a better way of doing this?. @schlessera Ok. Let's go for this now, I suppose.. Thanks @gitlost . @schlessera Created for approval only. Planning to ship this Tuesday morning PT. > I'm not sure we already have a custom step to check the frontend.\nCould use wp server to start a development server, then run some ping check against the WordPress install.. > I think that wp-cli/composer-changelogs is used to improve commit messages after composer updates, but is never directly called by wp-cli, neither in production or development context. Should it really be a dependency ? It may be a better solution that main contributors install it globally on their local environments as it is related to contributing guidelines, and not wp-cli building or running.\nI'm amenable to removing it. We aren't actively using it, and I don't see a strong need to.\n. @evilebottnawi To verify, you've recently run composer install?\nCan you share full steps to reproduce?. > Start debugging\nSorry?. > Setting config.classmap-authoritative to true in composer.json throw this error.\nAh. Any ideas how we can fix this on our end?. @evilebottnawi Just wanted to let you know that https://github.com/wp-cli/extension-command/issues/19 will land in WP-CLI proper early next week.. This landed in https://github.com/wp-cli/wp-cli/pull/4149. @monolux Didn't you just open #4144 and https://wordpress.org/support/topic/set-wp-cli-environment-variable-wp_cli_packages_dir-on-windows/ ?. @gitlost Before we land this in the main project, how do you think we should handle the cross-project dependency (e.g. wp-cli/scaffold-command will now require wp-cli/wp-cli:~1.3.0)?\nUnless there's an elegant solution, I think it might make more sense to create a canonicalizePath() private method on the Scaffold_Command class until we have a need for a general utility.. Not an active discussion. Here's some of the past history:\n\nhttps://github.com/wp-cli/wp-cli/issues/2493\nhttps://github.com/wp-cli/wp-cli/issues/2718\nhttps://github.com/wp-cli/scaffold-package-command/issues/52\n\nWe've moved away somewhat from actively using intra-package dependency management, because it's a pain when dependencies are in conflict. My preference would be to use version dependency management sparingly, and opt for as much version-agnostic compatibility as possible.. Hi @dmblack,\nThanks for starting this conversation.\n\nArguably; some of the permissions are up to the system / user to manage. However, with the differing permissions in two tool deployment methods (core install, and then theme install) - I think this is something that can be handled better.\n\nYes, you are correct. File permission management is the responsibility of the system / user, because appropriate permissions vary between environments and are somewhat subjective.\nIf WordPress core were to implement permissions enforcement with theme / plugin installation, then WP-CLI would follow suit. WP-CLI simply calls WordPress APIs.. I don't know off the top of my head.. > how commands are executed against php-cli\nI'm not sure I follow. Can you clarify?\n\nwhere wp core download execution begins\n\nExtraction begins here: https://github.com/wp-cli/core-command/blob/master/src/Core_Command.php#L186\nThe Extractor class itself is here: https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Extractor.php\n\nSo something related only to the core download function is resulting in different permissions than desired, likely to the way wp-cli uses php to execute functions - relative to system or user environment configuration.\n\nInteresting. I'm curious to hear what you discover.. Hi @dtolj,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Hi @davidfavor,\nThis plugin will do the trick for you: https://wordpress.org/plugins/one-time-login/. Sorry, to clarify, the One Time Login plugin can be used to generate a login link for any existing user on the site. The login link permits global login access; it's not specific to a particular page.\n. > Difficulty finding correct repo for commands\nGood observation. In your ideal world, how would you address this?. > Does GitHub search the repo description when searching for repos?\nIt appears so. We could dynamically generate this description when we take on #3857. > We could dynamically generate this description\nI don't think it's going to be realistic to try and fit all commands into the description.\nInstead, we'll link to the correct repo from the docs in #4244. > I don't think you need to add all the commands to the description, just the top level commands.\nOh, good point. This seems reasonable. I'll do when I pick up #3857. > The framework package seems to be missing this script.\nThis is currently in https://github.com/wp-cli/wp-cli/blob/master/ci/prepare.sh#L35-L36\nWe can abstract to a separate script though.. Closing in favor of #4167\nI don't see the value in moving stuff around until we have a clear direction of where we're moving it.. > So I think in the medium term perhaps move away from using comments for basic functionality such as hooks etc, and use some explicit registration system or something instead - this obviously needs thought and discussion!\nThis would be a substantial undertaking that I'm not sure is warranted. Many parts of WP-CLI (and, subsequently, the WP-CLI ecosystem) are dependent on comments. To refactor would require a huge amount of effort. If the only problem we're faced with is the issue of opcache.save_comments=0, I don't think it justifies a refactor.\n\nAlso re the current issue, the check_opcache() should throw a fatal if save_comments is disabled, eg\n\nCorrect. If any PHP configuration would cause WP-CLI to behave inconsistently, then we should error for that PHP configuration.\nSome prior art https://github.com/wp-cli/wp-cli/issues/283#issuecomment-38165752. Closing in favor of #4161\nThanks for your work on this, @Rahe. We appreciate it.. Here's a neat example of including links in error messages: https://twitter.com/zeithq/status/909491222175199233\n. > I'm not sure we need that, though, as we have `https://wp-cli.org, which is already pretty short.\nGood point.\n\nHow about creating a repository wp-cli/error with entry point error message documentation?\n\nI like the idea of putting these in a repository. My preference would be to continue to use wp-cli/handbook though. These could live in a subdirectory.. Closing in favor of https://github.com/wp-cli/ideas/issues/71. \ud83d\udd28 . @schlessera Any ideas why this build is failing?. @schlessera Clearing all caches and re-running the build seems to have done the trick.. > Yes, that leads to a long PHP 7.1 build - see https://travis-ci.org/gitlost/wp-cli/builds/244175178?utm_source=github_status&utm_medium=notification for comparative times. (That build comes from gitlost#11)\nOh. I meant to only run the specific scenario. So I think that's the only tag we need to include, instead of all of them again.\n\nI'll do that anyway on #4161 and you can see what you think. (It also requires a fix on cli.feature to make it \"re-entrant\".)\n\nSounds good.. > There is no scenario specific to opcache.save_comments being disabled.\nOh, I see. I misunderstood previously.\nI don't think we need to run the entire test suite with opcache.save_comments disabled. In fact, the PHPUnit tests seem sufficient to me.. I've added a test in 38285acf. This was published https://make.wordpress.org/cli/2017/06/25/wordcamp-europe-2017-contributor-day-recap/. @schlessera The email I received yesterday seemed to imply someone else will take care of publishing the notes. I submitted mine through the form. Did you read the email the same?. I haven't seen these come through yet, so I replied to the email they sent out requesting more details.. Published: https://make.wordpress.org/summit/2017/07/25/wp-cli-conversations-at-the-community-summit/. @gitlost You find the best bugs :). > But was wondering if behat and phpunit are necessary?\nNo, they're included mistakenly.. Hi @wonderWomantotheResue,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support\n. @gitlost So that it's easier for a new contributor to pick up, can you provide a suggested implementation for this? Where should the error happen, and what should display?. > Well thinking about it just issuing a warning in WP_CLI\\Runner::start() after check_root() in a check_proc_open() function would probably be enough.\nThis seems like it might run too frequently, and break existing usage. We probably only should check right before proc_open() is set to run.. > There's no actual change here. I was under the impression the script only generates PRs when packages were updated. Did this change?\nNo, it only generates PRs when there are changes.. > I've found debugging SSH url parser function that port must be provided, surprisingly. I took for granted it was falling back to a default like other tools like scp and git do.\nIt's supposed to work similarly to scp and git, so this is a bug.. \ud83d\udd28 . @freegenie Still planning to add tests here?. Thanks @freegenie !. Looks good, thanks @Ippey !. Thanks @gitlost. It'd be nice to get https://github.com/wp-cli/wp-cli/issues/4108 running completely before we land this.. > Yes, are there ideas floating around as to how to do that?!\n@schlessera had it running, but I'm unsure of its current status.. @gitlost Happy with this? If so, feel free to merge at your convenience.\nI'd like to get this landed sooner rather than later so we can see if any bugs shake out of it.. #4189 is sufficient for our needs now.. This seems like a lot of complexity to manage, things that could break, etc.\nCan we get away with simply using #4189 instead?\nIf we want to run @github-api tests in CI, we could do so by only running them in one job and setting a GITHUB_TOKEN to increase our rate limit to 5000. > Actually getting rate limiting errors on trying it today so either I'm doing it wrong or it doesn't work.\nOk. We'll go ahead and punt again on this for now. If it becomes a pressing issue in the future, we can revisit it.. @gitlost I've added a GITHUB_TOKEN environment variable with a token. Can you submit a new PR that solely enables GitHub API tests for one build, and uses the GITHUB_TOKEN in the request when it's present as an environment variable?. > Do you think the environment variable should be GITHUB_TOKEN or WP_CLI_GITHUB_TOKEN\nGITHUB_TOKEN is a standard (e.g. Composer).\n\nAlso could you post the output of (as appropriate)\n\nIt doesn't need to be included in .travis.yml because I entered it through the Travis backend.\n\nSo I think this PR is the appropriate place to do things (with the prime cache stuff (and the unrelated remove directory fix) removed).\n\nI don't really want to include caching at this point. It adds complexity to the build system, and therefore the likelihood of something later breaking.\nMaybe we should simply continue to skip these tests in CI. I suspect there are more important things for us to work on.. > In what way?\nIt's additional code executed, with additional execution paths, which increases the overall complexity of the system. Notably, caching is notorious for introducing issues that are only intermittently reproducible.\n\nI think getting tests working fully and speedily on travis and locally, with as few exceptions as possible and with no extraneous errors, is a very important thing to be working on, and will improve all our lives!\n\nRight. Even within scope:testing, there are a number of issues that will yield higher impact. For instance, #4108 is arguably critical and much higher priority than this.\nI don't mean to discount your work on this. I appreciate the effort invested so far. I just mean to suggest there might be more fruitful investments of the limited amount of time you have.. > It's pretty fail-safe I hope (famous last words).\nIn looking back at #1612 to show you how much time I've spent on this already, I completely forgot I had written a cache implementation #1618 that I ended up reverting #1653.\nReally, I'm just trying to save you (and myself) from trodding this already trodden path and potentially experiencing a world of pain along the way.\nIf this breaks again, we can seriously explore running the @skip-github-api tests in CI. I just don't think it's important enough to spend the time on now.. Thanks @junaidbhura !. @wp-cli/committers I'm not sure I can filter pull requests through the API based on the 'wp-cli/committers' team yet.\nIs assigning the team for review sufficient?\n\n. I emailed GitHub support about this too:\n\nIs it possible to query the issues API for pull requests assigned a specific review team?\nhttps://developer.github.com/v3/issues/\nOr, similarly, can I use the global search dashboard to search for pull requests of a review team?\nhttps://github.com/issues?utf8=%E2%9C%93&q=is%3Aopen+review-requested%3Adanielbachhuber+sort%3Aupdated-desc+\nOur WP-CLI organization has a 'wp-cli/committers' team. I'm trying to figure out a way team members can see all pull requests awaiting review.\n[...]\nHey Daniel,\nThis isn't currently possible, but it is definitely on our radar for the future. I'll add your +1 to that internally.\nBest,\nShawna\n\n@schlessera Are the email notifications sufficient for you? Adding a review-merge label to PRs seems like a bit of mental overhead given we now have an alternative.. I've removed the 'review-merge' list from the dashboard.. @schlessera Anything else to improve with this PR?. @schlessera It looks like the autoloader behavior may have changed?. @aaemnnosttv As it turns out, c8b7f4b067d7570c739ccdb85a60b36d6ee6633c causes a world of pain. I've reverted it.. > What if the local version sends its own version string in a transparent way? The remote can then emit a warning, and still try to complete the command.\nThis would work, but only for >=1.3.0 (or whenever this was packaged into a stable release).\nI suppose this is the easier implementation, however.. Closing as wontfix. I think the problem caused by this discrepancy is infrequent enough that it's not worth creating a solution for. We can always re-open in the future if there's a compelling case otherwise.. > is it possible to change the way checksum files are created like:\nTechnically it's possible, but it would be a breaking change to the distribution system, so I don't think it's worth the potential repercussions.. Please watch your language and tone.. @szepeviktor Is this good to go now, or does it need further changes?. @szepeviktor I was planning to take https://github.com/wp-cli/wp-cli/pull/3959 and put it in https://github.com/wp-cli/rpm-build.\nWant to help out with that? Once we get RPMs building, I can take care of getting them uploaded to wp-cli/builds. > Commit to wp-cli/rpm-builds, needs apt-get install rpm rpmlint\n@szepeviktor I'm getting an error:\n$ sudo apt-get install -qq rpm rpmlint php-cli\nE: Unable to locate package rpmlint\nE: Unable to locate package php-cli\nThe command \"sudo apt-get install -qq rpm rpmlint php-cli\" failed and exited with 100 during .\nIdeas on how to resolve?. @szepeviktor Or, do you want to run the build script locally and submit a build to the builds repo?. > Could you proceed with auto-committing to wp-cli/rpm-builds?\nWhat do you mean by auto-committing?. > Committing the RPM package to wp-cli/rpm-builds when there is a new release.\n\nWith the same mechanism as the phar goes to wp-cli/builds.\n\nOh, right. I'm actually thinking the RPM should be built in wp-cli/wp-cli now and we can use the existing deployment pipeline.. We can keep this open until it's done.. \ud83d\udea2 . You're welcome!. > Symfony's Filesystem to do file system stuff in FeatureContext.\nWon't this break use of wp scaffold package-tests?. @gitlost Ok. Do you want to do that in this PR or another?. @gitlost Just to confirm, you ran the tests for this locally? Does it need more tests?. > Could we get a small audience to install our RPM and send us some feedback?\nYes, I can do that. Give me a little bit of time.. Landing this so I can work on integrating it in https://github.com/wp-cli/rpm-build. > C. Drop official PHP 5.3 support.\nI'd be amenable to this.. > It seems that, starting september 2017, we will not be able to test the PHP 5.3 matrix in Travis anymore.\nAccording to this blog post, we have until April 1st, 2018. . We'll bump minimum to PHP 5.4 at the beginning of February #4554. \ud83d\udd28 . Thanks for the pull request, @electrokit. I appreciate your effort on it.\nAt this point, I'm \ud83d\udc4e on merging this for a couple of reasons:\n\nWP-CLI doesn't formally support Windows because we have no way of running automated tests in a Windows environment. Even if we were able to attain compatibility now, we'd likely regress in the future.\nWith such broad sweeping changes, there's the likelihood of things breaking (as you've already discovered). Even if you get the tests passing, not everything has test coverage, so it's possible something else has broken silently.. @electrokit Yes, I'm fine with this pull request as it stands now.. @gitlost Can you submit in a new PR?. @electrokit I don't quite understand the Mac OS 9 comment. Was that meant to be a joke or does it reflect a serious consideration?. \ud83d\udc4d Thanks @gfolin . > we're just trying to redirect communication to where it gets the best results.\n\nIt's worth emphasizing this \u2014 helping someone debug is about 10x easier on Slack, which is why it's our preferred channel.. :( Trying to install rpmlint on Precise doesn't work:\nrpmlint depends on python-rpm; however:\n  Package python-rpm is not installed.\n rpmlint depends on python:any (>= 2.7.5-5~); however:\n  Version of python on system is 2.7.3-0ubuntu2.2.\ndpkg: error processing rpmlint (--install):\n dependency problems - leaving unconfigured\nProcessing triggers for man-db ...\nErrors were encountered while processing:\n rpmlint\n. Hm, now I get:\nCurrent version: 1.3.0-alpha-d5cd5cf\nerror: line 2: Illegal char '-' in: Version:    1.3.0-alpha-d5cd5cf\nSo maybe the strategy of building RPMs from the nightly build is out.. @wp-cli/committers I'm thinking about an August 9th release date for v1.3.0. Any opinions in opposition, or does this seem reasonable?. @wp-cli/committers Tagged releases for all current versions on bundled packages. At this point, let's refrain from merging anything but critical bug fixes until after release.. > I'm thinking about an August 9th release date for v1.3.0\nOff by a day, whoops.\n\ud83d\udea2 . \ud83d\udc4d Thanks, @davetha! Build failed for an unrelated reason, so I've restarted it.. Hi @Asenar,\nThanks for the pull request.\nWP-CLI parses wp-config.php to pull out constant definition before loading WordPress. You can learn more about this in #1631. If you see a PHP Notice:  Constant ABSPATH already defined notice, what's likely happening is that WP-CLI is failing to strip out the bottom of your wp-config.php and WordPress is loading much earlier than WP-CLI expects it.\nWhat seems like a simple change is quite complex. There's also the likelihood of unintended consequences.\nIf you'd like to have this change considered, it'd be great if you could open a new issue sharing more background about your setup, how you're using WP-CLI, etc.. > Note the ABSPATH constant is supposed to be always defined at the end of wp-config.php (if not already defined).\nCorrect, but WP-CLI strips it out. If you're seeing an error notice originate from your wp-config.php file, then the file is incorrectly formatted and WP-CLI cannot parse it.\n. > Are you really sure ?\nYes, I'm sure.\n\nSorry to insist on this, but in Runner.php I see than ABSPATH is defined before any parsing of wp-config.php.\n\nRight. Like I mentioned, \"if you're seeing an error notice originate from your wp-config.php file, then the file is incorrectly formatted and WP-CLI cannot parse it.\". WP-CLI parses wp-config.php and strips out the ABSPATH defined therein.. @schlessera @Sidsector9 This is handled fully by https://github.com/wp-cli/package-command/pull/31, right?. \ud83d\udd28 . Hi @Benqzq,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. @Benqzq If you jump into the #cli room in Slack, documented in the support guidelines, happy to help you debug. I'm pretty sure this is an issue with your environment.. You can also use this type of option definition to pass any arguments through:\n[--<field>=<value>]\n: Pass arguments through to Algolia\n@gitlost Should we get this documented in the Commands Cookbook?. > yes, might be good to highlight it in the Commands Cookbook.\nAs it turns out, it's already in there:\n\n. @chriszarate This looks pretty good to me. Thanks for taking the time to write out the unit tests too.\nIs there any remaining work you'd like to perform on the PR before I merge?. \ud83d\udc4c Thanks for your work on this!. > I'd suggest adding this generalized --<field>=<value> to these as well, so that people can add arbitrary WP_Query filters to them.\nRelated: https://github.com/wp-cli/entity-command/issues/19 and https://github.com/wp-cli/entity-command/issues/16\nFor purposes of having more complete documentation, I think it'd be worthwhile to explicitly identify known query parameters, and then include --<field>=<value> as a fallback as necessary.. Closing in favor of https://github.com/wp-cli/entity-command/issues/45. Hi @FlorianBrinkmann,\nAs a heads up, Windows isn't an officially supported platform.\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. @mapk When you have a moment, I'd love your design sensibilities on ^.\nIt would rock my world if you provided HTML/CSS that I could just plug logic into. Timing-wise, I'm hoping to complete this in the next week and a half or so.. > 1. Seems like the correct placement for this would be in the main content. A reference at the bottom? I can help design this.\nThat'd be great, thanks.\n\n\nIn order to get the https://developer.wordpress.org/cli/ site to mimic the current make/cli handbook, we need to move over the O2 Plugin I think.\n\n\nI'm not sure I want to go that far (enabling O2 and getting everything to work there). Is there a simpler design we could go with that I can implement on my own?\n\n\nWould this be a page by itself? A section that exists across all pages? Seems like the simplest would be a stand alone page that could highlight these? I can help design this as well.\n\n\nIt'd be a section of each command page, because the links would be different for each command. . > Take a look and let me know if that works for no. 1.\n@mapk Looks great! Do I need to commit that to the dev hub theme or will you take care of it?\n@wp-cli/committers Locally, the global params mention on command docs looks like this:\n\nFeel free to weigh in on https://github.com/wp-cli/handbook/pull/115 if you have feedback on the implementation.. > If you don't mind committing it yourself, please do.\nCool, I'll pick it up on Monday.\n\nI'll work on the issue notifications (no. 3) today.\n\nGreat!. @mapk Love it! Where would you place it on the page?. > If the user is there because they want to research information (which is most likely the case), then contributing through Github would probably be secondary for them. So maybe at the bottom?\nYes, this makes sense.\nWe also want to discourage use of GitHub as a support venue, so maybe we need some light support CTA at the top.\nI'll give it some thought.. Looking like this locally:\n\n@mapk The button styles didn't translate very well directly.\n@schlessera For the GitHub icon and \"Create New Issue\" elements to appear, we have to get the repo_url into post meta for the page. I'm thinking this could be included in wp cli cmd-dump and then stored in the commands-manifest.json file for importing. However, I don't have any good ideas on how to programmatically generate the correct repo_url for each command. Ideas?\n. @mapk Closer, but I think there's still some conflict with the existing button styles:\n\n. > Looks like the buttons are a lot closer now.\nWeird. I'm not sure why I see the shading but you don't. I still see:\n\n\nDid you want to add the .btn-group css as well?\n\nGood catch. Thar be a bug in my CSS: https://meta.trac.wordpress.org/changeset/5785\n. > you were viewing them in Chrome maybe?\nYes.\n\nWe need to fix the styling so it applies to all browsers. I can take a look.\n\nMaybe a vendor prefix then. Let me know what I should add.\n. > Looks like this change in the CSS on the anchor tag should work.\nPerfect \u2014 \ud83d\udea2 \nI'll handle the issue count in #4043. Thanks for your help with this, @mapk !. Closing in favor of https://github.com/wp-cli/php-cli-tools/issues/112. @nebulon42 Can you create a new issue please, with details about the bug and steps to reproduce? Thanks.. Hi @pablito07,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. @miya0001 Good catch. I was planning to do this after wp-cli/scaffold-package-command v0.4.0 was released (https://github.com/wp-cli/scaffold-package-command/milestone/4), so we only have to run it once per project.. \ud83d\udd28 . Hi @onnimonni,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. > If we could solve wp-cli/entity-command#19 programatically, then it could lead to this being possible.\n@johnbillion What do you mean by \"programmatically\"? I think defining the arguments in the command docs may actually solve both this and https://github.com/wp-cli/entity-command/issues/36. I think this is reasonably fixed by https://github.com/wp-cli/entity-command/pull/39\nAlthough, I've since run into #4272. It was a deliberate decision to avoid behat.yml actually. Plus, the current approach offers two distinct advantages:\n\nPhar users (e.g. the majority) can run the test suite against their existing executable without needing to install WP-CLI as a dependency (and make sure wp points to the correct path, etc.)\nThe end user of the test suite can easily modify the test suite if they choose to.\n\nJust want to provide context around why the decision was made.. @gitlost Although, also related https://github.com/wp-cli/wp-cli/issues/3826. Hi @1Pauletto,\nThanks for the pull request. I think this use case would be better handled with WP-CLI's hook system, instead of adding function definitions to wp-cli.yml. Thoughts?. Bumped to 0.12.0\nRelated #4241. > won't but prints the \"not a WordPres install\" message.\nRight. In cases where the command isn't already registered (e.g. bundled with WP-CLI itself), the command could be registered in a theme or plugin. WP-CLI attempts to load WordPress to see if additional commands are registered.. > You should be able to browse the help freely without having to set options or have a WP install.\nWhat if you've asked for help from a command in a plugin?. @gitlost Let's chat about this in Slack when you have a moment. I think there's some disconnect.. @gitlost Anything else we need to address here, or is this \ud83d\udea2 ?. Generally, this pull request probably needs some discussion before further development. I'd be hesitant to land something like this without detailed conversation because it's a critical execution path and only has good, but not great, test coverage.. @gitlost To help me better understand the nature of these changes, can you use Licecap to provide some GIFs of the behavior before and after?. Thanks @gitlost. We can land this and see if anything shakes out of the behavior changes.. > Is these issue inside https://github.com/wp-cli/handbook ?\nThe data in the handbook is correct. The problem lies in how WordPress renders the page: https://developer.wordpress.org/cli/commands/cache/add/\nSpecifically, there's some filter on the_content that automatically transforms a double-dash to an em-dash. We need to disable that in some manner, but I think we could format the arguments better too.. Fixed in https://meta.trac.wordpress.org/changeset/5761/. Build failure will need https://github.com/wp-cli/entity-command/pull/43. Landing, because this needs to go in before anything else.. Related: https://github.com/wp-cli/wp-cli/issues/3793\n\nrun the existing Debian packaging script on Travis\n\nIs it possible to run the script on Travis or does it need to be run inside a Docker container?\n. @szepeviktor Cool. Can you prepare a .travis.yml similar to this one and I'll hook it up?. Thanks @szepeviktor. We'll get this set up in the near future.. @szepeviktor Setting this up now.. @szepeviktor Thanks again for the .travis.yml. Can you verify this bot-built release, and then I'll set up the symlink behavior? Or is the symlink necessary?\nAlso: a reminder to myself that I need to update \"Release checklist\" once this is complete.. Fixed the symlink \ud83d\udd28 . Added installation instructions:\n\n. > New command to detect a command\nCould you describe your use-case in greater detail? What are you trying to do?. > I am trying to detect whether a (custom) command is installed.\nWhy?. @szepeviktor This seems like a reasonable request.\n@wp-cli/committers Suggestions on naming? Something in the wp cli * namespace would make most sense, I think.. Cool, let's go with wp cli has-command.\n@szepeviktor Want the honors of submitting a pull request?. We should follow the current behavior of wp core is-installed:\n\nExit 0 when core is installed.\nExit 1 when core is not installed.. Note: we only want to remove the wordwrapping for the generated handbook markdown pages, not the original source commands. \n\nTo address this issue, we'll want to update the markdown doc generation script to strip out the wordwrapping. This will probably only involve some regex (removing the \\n character while making sure to retain paragraph breaks, ordered lists, examples, etc.).. > it's really a bug in core not to check that the preg_match() could fail at \"wp-includes/vars.php:31\".\nIf it's a core bug, can we fix it in core instead of adopting a hack we have to maintain for the long term?. > Well I say it's a core bug, but opinions could differ (\"Why would it ever fail?\").\nWorth opening the issue at least.\n\nThe original hack of defining WP_ADMIN is also an attempt to get around what I would consider the poor core behaviour of using die()\n\nI missed this in the original review. I don't think we should define WP_ADMIN in either case. Doing so is a not-insignificant change with the potential for unexpected side-effects (see this issue).\nCan we remove the WP_ADMIN definition?. > I don't think we should define WP_ADMIN in either case. Doing so is a not-insignificant change with the potential for unexpected side-effects (see this issue).\nSee also #674 for additional background.. > Howabout defining WP_DEBUG instead, which seems to work...?\nIt's also another hack that's likely to have unintended consequences.\nI'm still not convinced that all of the effort in refactoring this code path (and discovering what breaks when we do) is worth solving the problem presented in #4265. > I am thinking we should leave this problem for now and look into more about #4265, #4285.\nReverting the original two PRs in #4293. @ryotsun #4372 is what I was thinking of. I decided to create a pull request for it because I didn't think it'd be able to better explain the issue to you in a comment.\nIf you're looking for issues to work on, I'll be posting another \"Good First Issues\" blog post in the next few days: https://make.wordpress.org/cli/. Looks like this now:\n\n. Landed in https://meta.trac.wordpress.org/changeset/5815/. Looking like this now:\n\n. Landed in https://meta.trac.wordpress.org/changeset/5816/. What about something like this?\n\n. Dang. How about we link to the Committer's Credo instead?. cc @ako80218  ^. > That's why I proposed to create separate issues, because each issue will then collect one discussion thread.\nGiven @hearvox has already gone and done this, I think we can continue with this plan.. Thanks again for your persistence on this issue, @hearvox. It's been a helpful exercise in reviewing these descriptions.. Pretty happy with these for now. We can continue to work on them in the future.. > But when I try running wp config create, I get this error\n\n/usr/bin/env: mysql: No such file or directory\nForm where is this error coming from ?\nAny clue how to fix this one ?\n\nYou'll need to install the MySQL executable. See https://github.com/wp-cli/wp-cli/issues/1324#issuecomment-241722285\nFor future reference, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. @schlessera Ended up going a little bit lower in the README. Once this lands, I'll regenerate the homepage.. Handled in #4307. @Sidsector9 As a heads up, you don't need to create a new issue for small changes like these (that you're submitting a pull request for immediately).. @Sidsector9 Simply open a pull request with the change.. Thanks for taking the time to dive into this @gitlost \nOne concern that comes to mind is having the cache cause unexpected failures in scenarios. All scenarios have been written from the perspective of starting with a fresh WordPress install. How do you think we can address this?\nAlso, do you have any concrete numbers for the performance boost so we can use that as a part of the evaluation?\nLastly, we may want to introduce a Given a cached WordPress install step, so caching is an explicit opt-in behavior and creating an uncached install is still possible.. > Might do, maybe one of the middle ones so it doesn't slow down getting jobs 6 and 7 going...\nLogging times makes the test run slower?. @gitlost Are you happy with this to land?. > Is it problem that should be solved or we need to improve the documentation?\nMight be a problem. Have you looked into the source?. Thanks for the report @eliseferguson.\nWant to submit a pull request with the fix? I think we'd need to add spaces to this str_replace() call.\nHere's an overview to submitting a pull request.. Fixed in https://github.com/wp-cli/scaffold-command/pull/40. > If the command has a option like --<field>=<value>, prompt displays PHP notices like following.\nWe should fix this.\n\nInput should not be displayed for password field, but it is displayed.\n\nWhy is this a problem?\n\nThere is a comment Wrapper for CLI Tools' prompt() method., but it is not used.\nAre there any reason?\n\nSee https://github.com/wp-cli/wp-cli/commit/7f695c548b1b90c33a47e3a76f293cbdde3e52f2. > (Have left the composer.json phpunit requirement alone, not sure what to do there.)\nWe can leave it for now and discuss later.. @fmonera Can you join us in the #cli room on WordPress.org Slack for further assistance debugging? This seems like it's problem specific to your environment, and chat makes it easier to provide suggestions.\n. > After a version change of the WP-CLI framework, we should run a composer update inside of the package manager's folder to update the dependencies that were installed for external commands.\nRealistically, I think we can only do this at the end of the wp cli update process, not when someone is updating via wget.\nAlso, it'd be better to call wp package update over requiring the composer binary to be on the system.\n. On second thought, calling wp package update is non-trivial and could cause other problems:\n\nwp package update fails because of memory issues.\nwp package update fails because of dependency conflict.\n\nBecause this is a minority use case, I think we should instead solve this with documentation and log output.\n  . > > he'd like to have 1 PR per sniff\n\nAs I updated my original post, this doesn't make sense from a practical point of view.\n\n@GaryJones I'm amenable to more sniffs per PR (e.g. two or three or a half dozen). My goal in setting a lower bound is to make the PR more easily reviewable by a human. If completing the issue takes a dozen PRs over a couple of weeks, I don't see the time commitment as a blocker for the approach. \nOne massive PR with lots of churn makes it very hard for a human to review all of the changes being applied.. > May I recommend that instead of small batches of sniffs across all files, that the approach is all of the sniffs fixed in single / small batches of files? That should reduce the workload needed before accepting a PR before it goes stale.\nSure, this is acceptable to me.\n\nbut \"does this file now meet the code standards without breaking functionality\".\n\nCorrect.. > How about adding the links as footnotes? Something like this maybe (or any other type of syntax that we can just automate):\n\ud83d\udcaf  I actually came to this idea independently.. I don't have a strong preference.. @miya0001 Found a case where this breaks:\n\nThe source is: https://github.com/danielbachhuber/php-compat-command/blob/8455f84729b71ac4700d166d6dca57829254dde5/src/PHP_Compat_Command.php#L8-L11\nAlso, it'd be nice to have one more line break between the description and the footnote.. It's even more problematic when there are multiple lines of description:\n\n. Lastly, I think reference links should only be parsed out on display in the terminal, not when piping (e.g. generating docs).. I think WP_CLI\\Utils\\isPiped() should do the trick.. Also, I'm not sure DocParser is the best place for this anymore. Help_Command may be more appropriate, because it's only used in display help context.. \ud83d\udd28 looks pretty good now. \ud83d\udea2 . > Updating the test suites should always be done through the automated scaffolding:\nRelated https://github.com/wp-cli/wp-cli/issues/4344\nWe should run wp scaffold package-tests . --force for all packages to make sure they're up to date.. \ud83d\udd28 . Hi @mightytravels,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. I think we can consider this a bug. The expected behavior should be:\n\nIf a class has a @when before_wp_load but a method has a @when after_wp_load, then the method's definition should take priority (e.g. hierarchical inheritance).. Let's go ahead and continue this discussion in Slack as necessary. GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions.. In what cases is GLOB_BRACE not available?\n\nCould we instead point the user to update their system configuration to include GLOB_BRACE?. > Given a wp-config.php file which contains incorrect database credentials, it's not possible to see any of WP-CLI's help docs, either with wp help or wp [command] --help.\nCan you share which command you were trying to see help for?\n\nIt would be good if requests for help didn't require a valid database connection.\n\nHow would WP-CLI access a command provided by an active plugin without a valid database connection?. > I wonder if it could check the database connection and fall back to displaying help only for built-in commands if the database connection isn't valid.\nThis is the current behavior. When I run wp help config with invalid database credentials, I see the help docs.. My hunch is that the WordPress US build is corrupt in some way.. Extraction also fails using tar on Travis:\n\n. Meta Trac is the most appropriate place. They'll ask what's corrupt with the file though, to which we should have an answer.. @howinator Can you provide environment details please? php --version and tar --version. Results of tests on my two machines:\nlocal \u279c  Desktop  php -r \"new PharData( 'latest.tar.gz' );\"\nlocal \u279c  Desktop  echo $?\n0\nlocal \u279c  Desktop  php --version\nPHP 7.0.18 (cli) (built: May 17 2017 16:54:31) ( NTS )\nweb590.webfaction.com \u279c  ~  php -r \"new PharData( 'latest.tar.gz' );\"\nweb590.webfaction.com \u279c  ~  echo $?\n0\nweb590.webfaction.com \u279c  ~  php --version\nPHP 5.5.38 (cli) (built: Jun 20 2017 09:25:25). Updated PHP but I still can't reproduce:\nlocal \u279c  Desktop  php -r \"new PharData( 'latest.tar.gz' );\"\nlocal \u279c  Desktop  echo $?\n0\nlocal \u279c  Desktop  php --version\nPHP 7.0.22 (cli) (built: Sep 20 2017 14:00:48) ( NTS ). Here's the specific error thrown, for those who want to help track down the true source: https://github.com/php/php-src/blob/cf1d42e0015108323365f5253b0cbe4e1fbc3eea/ext/phar/phar.c#L1640. > Could it be some issue with the WP archive?\nYes, I imagine it is. None of the PHP code has been changed in years:\n\nThere's probably some issue at the intersection of the generated latest.tar.gz and how PHP is compiled for Ubuntu.. Wow:\n\nNote: A checksum of the tar file correctly matched the one on the download site.\n\n@wojsmol How do you suggest we fix?. Going with a workaround for the time being: https://github.com/wp-cli/wp-cli/pull/4371\nIf someone wants to try, here's a Phar build: https://www.dropbox.com/s/taeh1mak9fvmlu6/wp-cli-nightly.phar?dl=0. I've also created a meta issue for this: https://meta.trac.wordpress.org/ticket/3150. > Is there any ETA for a new stable release or should I use the nightly version in my Travis builds for now\nNot yet scheduled. You should use the nightly build.. Thanks everyone who spent time tracking this down. Given this isn't an issue with WP-CLI itself but with specific PHP distros, I think we've fixed it the best we can.\nWe'll publish WP-CLI v1.4.0 on Tuesday, October 17th. For now, those affected can use wp cli update --nightly.. Please open a new issue for any topics going forward, thanks.. Updating the warning to:\nWarning: PharData failed, falling back to 'tar gz' (unable to decompress gzipped phar archive \"/tmp/wp_59c2ff8e7af4a.tar.gz\" to temporary file). Hi @mekbuk,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Hi @szepeviktor,\nCan you take this question to Slack please? Thanks. > Note the export-command issue isn't related, it's just buggy code.\n@gitlost Could you clarify or open a new issue?. @miya0001 Is this fixed?. \ud83d\udd28 . Hi @VikashSaharan1,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. > We still need to add a dictionary of pre-built \"invalid parameter\" => \"suggestion\" mappings so that we can provide meaningful suggestions that more drastically deviate from what was typed, without the need to bump the threshold higher. A too high threshold will show more meaningless suggestions.\nHow should we produce this dictionary?. > I'd suggest starting with that one and adding whenever we find a type/wrong parameter name that we think should produce a meaningful suggestion but doesn't.\nSounds good. To address this issue fully, it'd be great to have someone spend ~30 minutes reviewing arguments for all bundled WP-CLI commands and produce a list of a dozen mapping suggestions we can start with.. > Just to clarify, are you looking for parameters only, or subcommands as well?\nYour latter example for now \u2014 command parameters.. > Is it possible to get is_cli() or something going for us, too?\nProbably not. Checking the constant is a well-defined standard. You're welcome to write your own helper function though.. \ud83d\udc4d . @schlessera Are you planning to add tests for this too?. @schlessera I'm seeing this error locally:\n```\n[RuntimeException]\n  Exception has been thrown in \"beforeSuite\" hook, defined in FeatureContext::prepare()\n$ wp cli info\nWarning: Could not add command /Users/danielbachhuber/wp-cli/php/commands/cli.php. Reason: Class \\WP_CLI\\Dispatcher\\CommandNamespace does not exist\n  Warning: Could not add command /Users/danielbachhuber/wp-cli/php/commands/help.php. Reason: Class \\WP_CLI\\Dispatcher\\CommandNamespace does not exist\n  Error: 'cli' is not a registered wp command. See 'wp help' for available commands.\n  Did you mean 'cap'?\n``. Oh.composer dump-autoload` seems to have done the trick.. \ud83d\udd28 . @wp-cli/committers Sorry about the delay, this is now cleaned up. > There's an issue here with a double file read (https://github.com/wp-cli/wp-cli/pull/4389/files#diff-96c026ad1c6dc030a7c7dfe32107aa0cR159).\nWhy is that an issue?\n\nBut apart from that I don't think disallowing a time-honoured PHP paradigm like (https://github.com/wp-cli/wp-cli/pull/4389/files#diff-445ef2877063cddd8d2d17a2f58e44f7R133)\n\n\u00af\\_(\u30c4)_/\u00af I'm sure lots of people could debate various standards all day.. In practicality, it's already taken some amount of time to work through all of these changes, so I'm not strongly motivated to go back and undo them.. > If it allows for having proper checks in place, I'm all for it.\nYes, this is the purpose of making the changes in the first place.\n\nBecause it's needlessly reading the file twice.\n\nOk, updated in 867ec330. Landing this so we can move on.. > I'm deeply unhappy about this.\nAvoiding variable assignments within statements?. Worth it to abstract the function to a separate file so we can add some basic unit tests to it (and add to those tests when we find edge cases)?. @gitlost Looks good on my end. Happy with it?. @GaryJones Can you resolve the merge conflict?. @gitlost I know there are tests around this section of code and the equivalent change in this PR seems to work fine. Are you opposed to merging?. > If it's needed to get the PHP compatibility checker #4402 working, which may be useful, then no.\nOk.\n\nIn general it can be taken as read that I'm opposed to all this sort of code fiddling, for what it's worth.\n\nUnderstood. Let's discuss in #4427\n. @GaryJones Up for wiring this into Travis too?. @GaryJones Is this expected output?\n\n. \ud83d\udc4d Thanks @GaryJones . @gitlost Can you make sure merged pull requests are assigned a version and label? ^ Thanks. > This Travis failure seems unrelated to the code that's been changed?\nProbably not:\n\nLet's pass on this change for now. My thinking is:\n\nIf it's a small change (logically equivalent, easy to understand, and is covered by existing tests), then I think it's fine to merge.\nIf it's a small change to a code path with any sort of risk, then I'm generally against merging unless: 1) there's a proven need, and 2) it's covered by tests.\nIf it's a large set of changes (diff of ~100 lines or greater) in one pull request, then it needs to be broken into smaller, more understandable PRs.\n\nI'm generally supportive of coding standard changes because, while each individual standard may be debatable, they bring consistency to the codebase. Greater consistency subtly makes the entire codebase easier to understand.\nFurthermore, if we're afraid of making changes to the codebase, we should take that as a sign we should focus our efforts on increasing confidence about making changes (e.g. by adding more tests or otherwise). Every part of the codebase should be mutable, provided it still confirms to its explicitly defined APIs (e.g. no backwards compatibility breaks).\nOf what I've said:\n\nWhat do you agree with?\nWhere do you differ, and how would you change it?\nHow would you clarify further?. Great articulation, @gitlost. Thanks for taking the time.\n\nOne other opinion I forgot to mention: if a new(er) contributor submits a coding standards/fiddling/whatever we call it type of change, I'd much rather accept the pull request and educate them about our policy than close the pull request. The soft aspect of contributor experience is as important as \"correctness\".. > Does a project like WP-CLI need contributions like that or not? Well, #4058 suggested it did, and the number of smaller code fixes that were possible to find and easily make PRs on (some would have been more in-depth changes, for only the same small benefit) in one sitting also indicates that there was room for improvement within the code.\nTo offer a bit of perspective, it can be overwhelming for someone reviewing pull requests on a project to receive dozens of pull requests in a short period of time. For me personally, it took a better part of an hour for me to work through the pull requests I did.\nTypically, we ask contributors to open an issue with their proposed change before submitting a pull request. This gives us the opportunity for some level of discussion before the contributor commits significant time to writing code. What's implied is always better explicitly stated.\n\nThat should also cover the Inline PHP Docs in the Handbook as well, of which WordPress-Docs is a starting point. It's far less complete in terms of checks, compared to WordPress-Core, but it catches 660+ items on the current WP-CLI code base, so I'll be pushing for that here.\n\nI don't think we'll be adopting these sniffs quite yet. This seems like a significant amount of work for debatable return. If you want to invest time in documentation, long-form would be a much higher value: https://github.com/wp-cli/handbook/issues\n\nFrom my perspective, the WP-CLI core committers and main contributors can focus on the big features and bug fixes for end users, and let the likes of me help bring the quality of the project code up to speed to make your future lives easier. One doesn't have to pick one or the other.\n\nUltimately, one has to pick a focus and choose how they spend their time. Our major focus right now is the checksums project; time and attention we spend on other things takes away from this project.\nGranted, there's a certain amount of ongoing work we can't ignore. Time is the currency we have to spend though, so it's important for us to spend it wisely.. Also, given how much time we've spent on this topic already, I'd like to add to the policy that we only adopt coding standards that are enforced through PHPCS. Arguably arbitrary coding style changes aren't worth spending time on.. > The default has been to set to null which suppresses the reporting of failed items, for back compat with current behaviour.\nI'd actually think this the expected behavior: don't show any message about skips unless a value is explicitly provided.\nI've updated the PHPDoc accordingly.. @gitlost Ah, I understand now. I think the current implementation looks \ud83d\udc4d . Hi @VikashSaharan1,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Blocked by https://github.com/wp-cli/wp-cli/issues/4394. Hi @maxhetfeld,\nCan you follow our bug report guidelines and provide additional detail please?. Hi @MoreKoo,\nI can't reproduce the issue. WP-CLI doesn't perform any sort of output buffering, so I suspect it's specific to your environment (possibly a caching plugin or similar). Here's some detail on how to identify a plugin or theme conflicting with WP-CLI.. Updated in 540c3c7b265573a584bfbad26e94c1c3f5d0afd0. I like two separate regex statements for clarity.\nAlso, one thing to note: this means any test scaffolding with the Phar file going forward will be stripped of its comments. . > Also, one thing to note: this means any test scaffolding with the Phar file going forward will be stripped of its comments.\n@gitlost What's your opinion on this? Including comments in scaffolded files seems like a feature, not a bug. As such, comments shouldn't be stripped from them.\nBut, we don't currently have a determinate way of identifying files that are scaffolded into other codebases.\nAlso, this issue means that running wp scaffold package-tests from a Composer-based install will produce different results than running it from a Phar-based install.. @gitlost Although I haven't found the exact source, I think it's also causing this build failure, which only happens when the test suite builds a Phar to run the tests against. > It looks to me that the .php files copied are only in features/bootstrap and features/steps, and also features/extra/no-mail.php (has no comments) and utils/behat-tags.php. So they could be excluded. Are there others?\nThere's also these two: https://github.com/wp-cli/scaffold-package-command/blob/master/src/ScaffoldPackageCommand.php#L566-L567\n\n. > But given the issues just now arising and the closeness of the release date a revert of #4391 is probably the most prudent thing to do.\nOk, let's revert.. @pkarjala This seems to be specific to your WordPress install. I'd suggest looking for definition of FS_METHOD in your wp-config.php. @pkarjala Can you share the contents of your wp-config.php, minus any secrets?. I think the problem may actually be #3928. Just so it's stated, let's refrain from merging this until v1.4.0 has landed.. \ud83d\udc4d Looks good to me. Requesting a second review from @gitlost. Hi @harry-wood,\nThanks for the report. This particular error message is straight from WordPress core. I'd suggest filing a core Trac ticket instead.. > (I've had this secretly running in my test lab branch gitlost#12 for a while, against trunk.)\nSecrets are no fun!\n\nAlso one test needs to be tagged @less-than-7.2, \"features/help.feature:97\", as it downloads the latest WP. (Or it could be changed to download trunk/nightly, I suppose).\n\nAdded in e4e00f25 and we can revert with #4453. Should also revert e4e00f25 when the time comes. Hi @DuckDagobert,\nThanks for the report. We don't generally add plugin-specific workarounds to WP-CLI. I'd recommend reaching out to the plugin author to see if they can help you accommodate this issue.. A more graceful approach would be to disable set_url_scheme() in CLI context. Or, solely for the http -> https and https -> http conversions.. > For more than 1 hour I'm digging documentation, github issues/commits/sourcecode in order to create the synopsis for a command allowing it to take a comma-separated list of string as a value.\nYou'll need to quote the argument:\nwp my-command 'option1,option2,option3'. Hi @devanonyme,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. Looks like we'd need symlink a short executable script to .git/hooks/pre-commit on composer install or similar, because .git/hooks isn't tracked in VCS. This was shipped with #4622 and #4696. @gitlost This seems to have fixed https://github.com/wp-cli/package-command/issues/44 for me. Is that not the case for you?. > Is/was there a global require in your ~/.composer/composer.json?\nNope. Here's the reproduction steps from one of my webservers:\n```\nweb590.webfaction.com \u279c  ~  wp cli update --stable --yes\nDownloading from https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar...\nmd5 hash verified: 179fc8dacbfe3ebc2d00ba57a333c982\nNew version works. Proceeding to replace.\nSuccess: Updated WP-CLI to the latest stable release.\nweb590.webfaction.com \u279c  ~  alias wp=\"php70 -d memory_limit=512M $HOME/bin/wp\"\nweb590.webfaction.com \u279c  ~  wp package list\nWarning: include(phar:///home/handbuiltco/bin/wp/vendor/dealerdirect/phpcodesniffer-composer-installer/src/Plugin.php): failed to open stream: phar error: \"vendor/dealerdirect/phpcodesniffer-composer-installer/src/Plugin.php\" is not a file in phar \"/home/handbuiltco/bin/wp\" in phar:///home/handbuiltco/bin/wp/vendor/composer/ClassLoader.php on line 444\nWarning: include(): Failed opening 'phar:///home/handbuiltco/bin/wp/vendor/dealerdirect/phpcodesniffer-composer-installer/src/Plugin.php' for inclusion (include_path='phar:///home/handbuiltco/bin/wp/vendor/phpunit/php-token-stream:phar:///home/handbuiltco/bin/wp/vendor/phpunit/phpunit-mock-objects:phar:///home/handbuiltco/bin/wp/vendor/phpunit/php-code-coverage:phar:///home/handbuiltco/bin/wp/vendor/phpunit/phpunit:phar:///home/handbuiltco/bin/wp/vendor/symfony/yaml:.:/usr/local/share/pear70') in phar:///home/handbuiltco/bin/wp/vendor/composer/ClassLoader.php on line 444\n+------------------------------------+------------------+------------+--------+----------------+\n| name                               | authors          | version    | update | update_version |\n+------------------------------------+------------------+------------+--------+----------------+\n| danielbachhuber/php-compat-command |                  | dev-master | none   |                |\n| wp-cli/dist-archive-command        | Daniel Bachhuber | dev-master | none   |                |\n| wp-cli/find-command                |                  | dev-master | none   |                |\n| wp-cli/scaffold-package-command    | Daniel Bachhuber | dev-master | none   |                |\n+------------------------------------+------------------+------------+--------+----------------+\nweb590.webfaction.com \u279c  ~  wp cli update --nightly --yes\nDownloading from https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar...\nmd5 hash verified: 4409ec14f8c5e729738eef5efa10dd92\nNew version works. Proceeding to replace.\nSuccess: Updated WP-CLI to the latest nightly release.\nweb590.webfaction.com \u279c  ~  wp package list\n+------------------------------------+------------------+------------+--------+----------------+\n| name                               | authors          | version    | update | update_version |\n+------------------------------------+------------------+------------+--------+----------------+\n| danielbachhuber/php-compat-command |                  | dev-master | none   |                |\n| wp-cli/dist-archive-command        | Daniel Bachhuber | dev-master | none   |                |\n| wp-cli/find-command                |                  | dev-master | none   |                |\n| wp-cli/scaffold-package-command    | Daniel Bachhuber | dev-master | none   |                |\n+------------------------------------+------------------+------------+--------+----------------+\n``\nSo, it seems to be fixed now in the nightly build.. @gitlostDealerdirect\\Composer\\Plugin` is a Composer plugin, no? Wouldn't this mean it's always loaded when Composer is loaded?. @gitlost Happy with this to land? I don't see a review requested, so not sure whether you meant to hold or not.. Much better:\n\n\ud83d\udd28 . @gitlost Cool, thanks. Sorry for the late reply here, @raptor235 \nYou could probably adapt https://github.com/runcommand/find-unused-themes for this purpose.\nAlso, more generally, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. Hi @freegenie,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. 61833241a176450711b8b925a178fe944eb371fb wasn't explicitly identified in the docs, but found here: https://github.com/travis-ci/travis-ci/issues/8295. Hm, doesn't look like build stages support specifying a dist: in a stage. Might be a blocker for PHP 5.3. > I think you've just mixed up the spec there at the end - the dist:precise is missing from the 5.3 one\nAh, good catch a979f5af\n\nthere's a duplication which belongs to the deploy bit.\n\nI don't follow. What are you referring to?. Hi @apb1963,\nHave you been able to reproduce the issue with a fresh WordPress install and no plugins active?. Please see: https://make.wordpress.org/cli/handbook/common-issues/#php-notice-undefined-index-on-_server-superglobal\nAlso, for support options, please review http://wp-cli.org/#support. Yes, empty HTTP_HOST is a common issue.. Hi @lordspace,\nHave you been able to reproduce the issue with a fresh WordPress install and no plugins active?. Hi @dingo-d,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. @schlessera Heads up ^ that there are three bugs I think we need to address in v1.4.1. \ud83d\udd28 . @gitlost Look at https://travis-ci.org/wp-cli/wp-cli/jobs/299018298\n\nI don't think this works:\n\nWhich reminds me: one nice thing about the prior implementation is that the deployment Phar was a test artifact.\nWhat we actually need to do is have a build stage to produce a build artifact, use it through each test stage, and then upload it in the deploy stage.. Travis doesn't offer persistence between jobs, so we'd need to use some system of our own. Options include:\n\nS3 bucket.\nscp to a random web server.\nPut the Phar file into a Docker container and push to Docker cloud.\n???\n\nOne gotcha though: secrets. In order to make this system available to non-org pull requests, we'd need to expose the auth secret to the pull request \u2014 which means it could theoretically be abused for other purposes.\nMaybe we could abuse Travis' caching system by writing a Phar file to it with the commit hash in the filename.. > I think you should be able to configure the credentials so that they are secure.\nHow? If they're decrypted at any point in the build process, they could be exposed by the person submitting the PR.. The current system is imperfect but the perfect system is a significant level of effort. Let's stick with the current system until there's reason otherwise.. > What is it that you want to achieve with the survey?\nGood question. A point in time understanding of how people are using WP-CLI, I suppose.\nFor 2018, it seems like our priority needs to be discovery, or helping users level-up their usage of WP-CLI. My suspicion is that the majority of users only know some smaller subset of what WP-CLI is capable of. If we can increase their awareness of what's possible, we can increase usage more broadly.. > But I don't know that these are the users that are going to take a survey though (just a feeling, I have no evidence to back this up).\nI think there are some promotion channels we can use to get better distribution.\n\nOn my own, I've made some attempts to get more people interested (occasional blog post, WordCamp talk... been meaning to do more/better). Are there specific ways you saw this happening?\n\nI appreciate the effort :) I have some ideas, but nothing specific yet. . @schlessera Do you think we should run a survey, or no? I'm on the fence at this point.. > I'd prefer surveys to be used as a tool to serve a specific goal. So, for example, if we have a big decision to make, a survey could help find out what the community's best interest is. Surveys should be goal-driven and result in an actionable data set.\n\ud83d\udc4c Sounds good.. > it would break backward compatibility\nIn what way? Can you submit the PR so we can look at it?. @apb1963 It appears your \u2013dbhost=myhost.mydomain argument should be --dbhost=myhost.mydomain. Can you confirm correct usage of your arguments?\nMore generally, there's not any code that automatically appends 'localhost' to a dbhost, so I suspect this is user error.. @apb1963 Happy to help you debug in Slack: http://wp-cli.org/#support. > Then, remove the config file i.e. rm /usr/local/src/myhost.mydomain/wp-config.php or else wp-cli complains (in the next step below) that it already exists and I don't know a way to force an overwrite using wp-cli. Maybe you do.\nWhy does wp-config.php already exist? Can you please share exact output of all commands you've run?\n\nIf not, then installing ubuntu is the only way to accurately attempt reproduction of this bug.\n\nIf this is the case, then the bug is with Ubuntu and not WP-CLI.. @gitlost Do you want to land this? Seems fine to me.. > Okay so here's the packages that have changes and need releasing that I can see:\nSee also: https://make.wordpress.org/cli/dash/\n\nI think checksum-command still shows up there because the milestone wasn't closed.. > Seems to be a time delay with the dash - checksum was closed 30 odd minutes ago and just closed embed and no change...\nYes, there's caching.. Oh boy, I really messed this one up. I'll re-tag in a moment.. Ok, v1.4.1 points to the correct hash now.. > As noted in #4504, this PR will cause tests for bundled commands to fail until they're adjusted.\nIs this actually the case though? These files are copied into the bundled commands.. > Those tests that do an And I run step that produce non-empty stderr will fail until adjusted\nBut they're only fail after I run wp scaffold package-tests ? e.g. the fail won't occur until I copy the new version of the test suite into the package.. > If you want to split them out and assign them I'm good for several hours now...\nIf you want to go through each package individually and run wp scaffold package-tests ./ --force, I'm fine with that. I was going to refrain until #3924 is ready but I'm not opposed to doing them manually.\nI don't think you need to create issues though. Feel free to simply start creating PRs with the updated test suite and the fixes.. Hi @unclesamwk,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. @gitlost I think this is our last failure:\n\nFrom https://travis-ci.org/wp-cli/automated-tests/jobs/305390045\nAny ideas on how to address?. Something got really slow too :(\n\n. > GITHUB_TOKEN isn't defined for automated tests by the look.\nI've added one.\n\na obvious target is the repetitive downloading which could be cached in a lot of cases...\n\nWhere? WordPress core, plugin, and theme downloads are cached, unless the cached is purged.\n. All fixed and much faster:\n\nhttps://travis-ci.org/wp-cli/automated-tests/builds/305390044. Won't this slow down completions?\nPreviously https://github.com/wp-cli/wp-cli/issues/1006. @miya0001 What if we had some lightweight, short expiration caching mechanism for bash completions? e.g. it caches all of the data on the first lookup, and uses that cache on subsequent. . Decisions, not options :). Closing for now. We can re-open once there's movement on it.. Landing this should address #4519. Hi @rabin-io,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\n. Thanks @szepeviktor. I think I've experienced why this is a bad idea previously (builds randomly failing because of bad cache), but never connected the dots.. > Many WP-CLI repos have the vendor dir. cached. Could you figure out a way to \"mass-check\" their Travis config?\nYes, we'll fix with https://github.com/wp-cli/scaffold-package-command/pull/160. @janw-oostendorp Please open an issue for discussion on substantial changes like this, thanks.. Hi @kimipooh,\nThanks for the issue. I'm not sure I fully understand the request.\nWould you like to include WP_PROXY_HOST when generating the wp-config.php file? If so, you might consider the --extra-php parameter:\nwp config create --dbname=testing --dbuser=wp --dbpass=securepswd --extra-php <<PHP\ndefine( 'WP_PROXY', 'host.net' );\nPHP\nAlternatively, you could add define( 'WP_PROXY', 'host.net' ); to a proxy-settings.php file. Then, you can use it in the WP-CLI runtime with:\nwp --require=proxy-settings.php option get home\nSee Config for more.. > Could you change, delete, or add the wp-config.php setting as the command?\nNot quite yet but this is on our radar. See https://github.com/wp-cli/ideas/issues/4. @schlessera Can you look at this failure when you have a moment?. Closing in favor of #4549, which has a newer version of Composer that fixes the bug.. Thanks for tracking all of these instances down, @johnbillion . Thanks for the heads up. I'll go ahead and revert for now, per https://github.com/wp-cli/wp-cli/issues/4474#issuecomment-343651402. Thanks @gitlost \u2014 appreciated.. Hi @davidbaratt,\nUse of --allow-root is strongly discouraged. Should you absolutely need to use it, you can alias wp to include --allow-root. Generally though, you should try to find some alternative.. > why would it be discouraged within a docker container? The entire thing is sandboxed anyways.\nIt's still a vector for privilege escalation. . > Can you explain this more? I'm running into this when I'm already root. Why would wp-cli try to protect me from a privilege I already have?\nIf you have any themes or plugins installed, then you're executing probably unknown third-party code as root too.. Feel free to alias wp='wp --allow-root' then.. Thanks for the PR, @grantpalin.\nI think this is too large of a diff for one pull request though. It'd be better to submit pull requests piece by piece.. > Could do it bucket-by-bucket. Alternatively could do code-based changes separate from documentation-based. What say you?\nSomething deliberate and easy to digest. The tests should pass when you submit the pull request, which means you should be able to easily run the tests before you do.. @grantpalin Can you squash your commit please?. @grantpalin These don't look like separate pull requests.... > When I make multiple commits on the same branch of my fork, they are auto pushed to the same PR. I don't get the chance to do separate PRs.\nRight. You'll need to create separate branches for each PR.. Let's go ahead and close this for now.. Thanks for the report, @gmazzap.\n\nRegarding positional arguments, it seems it is not possible to add \"multiple\" positional arguments.\n\nThe correct registration argument is 'multiple' => true, not 'repeating' => true. I've submitted a PR to fix the documentation.\n\nRegarding associative arguments the issue is that is not possible to add an associative argument to be used as a flag.\n\nThe correct registration argument is 'type' => 'flag' instead of 'type' => 'assoc'.. > I spend an hour reading docs before opening the issue... With last changes everything is clear. Thanks!\nYou're welcome :) Apologies you had to spend an hour in the first place.\n\nThis way --aflag=false, --aflag=no, --aflag=off, and --aflag=0 would be considered false, and anything else would be true.\n\nThis would be a breaking change, so we won't be changing it at the framework level. You're welcome to implement the equivalent in your command though.. > it could be some form of extended view for help (wp help --extended) but its discoverability would be the main feature.\nI'm amenable to this idea but I think we should take it a bit further. There's a lot of room for improvement in the help docs generally (e.g. https://github.com/wp-cli/ideas/issues/56).\nIt'd be neat if someone did a review of other CLI tools, documented what was useful about their help docs, and we could crib the best ideas.. Also related https://github.com/wp-cli/ideas/issues/54. Closing in favor of https://github.com/wp-cli/ideas/issues/71. > When output as a CSV or a table, false values get \"lost\":\nWhy do you consider empty to be lost?\n\nIs there a way that false values can be displayed as 0 in this situation?\n\nYou'd need to preprocess the data before output.\n\nWould it be preferable to display them as true and false instead of numerically?\n\nThis would be a breaking change. We can't trust that systems parsing CSV would magically know to interpret these values as boolean.\n\nCould you provide more context as to how you ran into this issue?\n. > Would you consider a change that switches tabular output to display true and false for boolean values? I understand it would be a breaking change.\nProbably not :/ I think there are systems parsing tabular output, and I don't think the risk of breaking those systems outweighs the benefit of making this change.\nFor the purposes of your command, it should be possible to preprocess the data based on --format. Sure, we can change this in the next build for v1.5.0 (due out end of January). @murtzsarialtun Do you want to submit a pull request with your change?. Fixed in #4570. > which would spit out the posts with the counts for each value:\nWould it be the equivalent of this query?\nSELECT COUNT(ID) FROM wp_posts WHERE post_type='type'\n\nI'm thinking that custom CSS and cache and revisions MAY not be ones we want to count. Especially if people have unfettered revisions\n\nCOUNT queries on indexed columns are pretty fast, so I'm not worried about the performance impact here.. Hi @gd-jroberts,\nPlease see: https://github.com/wp-cli/wp-cli/issues/4246#issuecomment-325774849. What do you mean by \"directory-based\"?. Not so easy, it looks :(. Stepping back from this for the time being.. > Terminology: Arguments or options\nBoth?. Hi @smazur,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Some commands are bundled and some are not. wp admin is not.. > Within the context of w.org, there's no means of exposing the fact that a plugin includes a WP-CLI command.\nWe've discussed this briefly in the past but I guess it never was documented anywhere. I think this would be cool too.\n\nI wonder if we should look into a standard machine readable means of exposing this. At its most basic, a wp-cli: true header could be added to the plugin\n\nScanning with Tide might be another option.\n\n(more specifically, they include the string extends WP_CLI_Command).\n\nSearching for WP_CLI::add_command() is probably the most reliable, because commands don't need to extend the WP_CLI_Command class.. This might make more sense for the ideas repo if you'd like to re-open there https://github.com/wp-cli/ideas. Meta Trac ticket is the better place to discuss this going forward.. Hi @nandulal8272,\nFor support, please review: https://wp-cli.org/#support. Utils\\wp_clear_object_cache() is a tried and true solution to the problem. Creating a no-op WP_Object_Cache seems like it could cause further issues down the road.\nFor instance, the alloptions cache handles options lookups. If you disabled object cache for options, then pretty much every procedure would incur hundreds of database requests (because yes, options are referenced that often).. This will be addressed sufficiently with https://github.com/wp-cli/media-command/pull/62. > The immediate problem I see is that this always runs PHPCS over the entire codebase, not over the commit that was staged.\nIsn't this what our existing code does? I don't think it's an optimization we need right now.... > Takes 25.5 seconds on my system to produce an empty commit.\nIsn't this better than waiting for Travis to build, and then having to come back ground to it?. > Suggestion, implement a way to chunk post list and append to a file\nYou can use WP_Query's existing pagination arguments to iterate the data, and append to a file with >>.\nI'm not convinced this is worth solving in WP-CLI.. > Is there a reason for the double escaping that I'm missing?\nYes: I wrote bad code :) It's worth fixing.. Closing this as maybelater. It seems like the existing solution is sufficient-enough.. Hi @killown,\nThanks for the suggestion. How would this be different than grep or similar?. > (Used in server-command also so would need to check there but should be ok.)\nserver-command would also benefit from a uniq id.. @schlessera How'd this turn out?. Hi @kierzniak,\nThanks for the suggestion. I'm not sure this is a great idea because:\n\nIt could lead to inconsistent usage behavior.\nIt becomes yet another use-case / feature we need to support in the long term.\n\n\nI just want to make possible to add or change command arguments based on my dotenv file. My workflow is heavily based on dotenv file and environment variables from my local environment to ci build process.\n\nCould you share more details on what you're trying to do, so we can see if there's an existing alternative?. Makes sense, thanks for clarifying.\nAt this point, it doesn't seem like a compelling reason to add runtime modification of passed arguments. Based on your needs, I think it'd make most sense to create a standalone bash file that calls all of the WP-CLI setup commands you need to run. This bash file could easily read execution arguments from the environment variables, and pass them through to WP-CLI.. Hi @roscom,\nDoes this issue reproduce on a stock WordPress install, with no plugins active? If not, it may be a problem from an existing theme or plugin. Please see this documentation for further debugging information.. Based on the fatal error, it seems the iconv() PHP function isn't available. Any ideas why that might not be the case?. Ok. I'd recommend reaching out to whomever manages your server and ask them to compile PHP with iconv enabled.. Hi @paulcanning,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. Hi @sebastianpisula,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. \ud83d\udc4d Thanks @kirtangajjar . Might be caused by https://core.trac.wordpress.org/changeset/42716/. See https://github.com/wp-cli/wp-cli/issues/4682#issuecomment-365442507. > A bit premature to be doing this isn't it? I think this should be reverted pending discussion and preparation...\nCould you explain further? What additional discussion and preparation is needed?. > Well scaffold package will have to be updated and then all the packages for a start.\nDoes that block this?\n\nNothing can be built at the moment.\n\nCan you point me to this issue?\n\nPlus it's not clear to me this should be a hard requirement anyway\n\nCan you clarify further?. > See wp-cli/extension-command#89 and wp-cli/scaffold-command#131 plus any other attempt to build a package now.\nOk, we can revert and come back to it. #4715\n\nThere is nothing in WP-CLI that requires PHP 5.4 for it to run. So a hard requirement is artificial.\n\nYes, that's intentional.. Can you share specifics to your use case?. Using a filter to disable the behavior seems most appropriate to me. I don't think this is a common-enough use-case to merit a flag.. Previously https://github.com/wp-cli/wp-cli/pull/2280\n\nApplications should commit composer.lock to the repository. The ensures that future builds of old tags produce predictable results.  See the Composer documentation on the composer.lock files.. Also worth noting wp-make-coffee was broken for a while (#4711). This is why our dependencies weren't auto-updated.. Hi @benqzq,\n\nYou can include --skip-check to avoid checking the database when creating a wp-config.php file.. Hey @grappler,\nThanks for the suggestion. tr \"\\n\" \",\" is a reasonable alternative for your case:\n$ wp post-type list --capability_type=post --field=name | tr \"\\n\" \",\"\npost,attachment,revision,nav_menu_item,custom_css,oembed_cache,wp_block,\nAll together, this would be:\nwp post list --format=ids --post_type=$(wp post-type list --capability_type=post --field=name | tr \"\\n\" \",\")\nGiven there's a reasonable alternative, I think it'd be best to use tr instead of introducing new behavior for WP-CLI.. #4730 is more recent. Hi @nya1998,\nIt appears the PHP JSON extension is missing in your system. You, or your system administrator, will need to re-compile PHP with the JSON extension included.. #4730 is more recent. > Question 3 - Sort of an additional to Question 1. How will we point users to the recommended but unsupported Docker image?\nWe'd find somewhere to mention it in the WP-CLI handbook: https://make.wordpress.org/cli/handbook/. > Just noting that Docker community is maintaining WordPress and WP-CLI images here:\nCame across this via the Gutenberg repo, and it seems sufficient to me.. Hi @rahilwazir,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support. Closing because of https://github.com/wp-cli/wp-cli/pull/4733#issuecomment-381363178. > Some scripts produce a lot of output and it's useful to redirect stdout to a file. In that case, we need to send the confirmation prompt to stderr, else it also is redirected to the file and the script hangs waiting for input.\nOn second thought, a better pattern is to include a --yes argument for the command. For example:\n* [--yes]\n * : Answer yes to the confirmation message.\nThis is already a standard pattern within WP-CLI.. Hi @lordspace,\n--all-tables-with-prefix is a flag, not an argument:\n[--all-tables-with-prefix]\n    Enable replacement on any tables that match the table prefix even if\n    not registered on $wpdb.\nThe behavior you're experiencing is intentional.. Hi @insprintorob,\nCan you share the contents of your wp-config.php, minus any secrets? My hunch is that you have SAVEQUERIES defined twice in there. \nAlso, look at your site_admins option in the wp_sitemeta table. If it's empty, that would be the cause of the second notice.. Hi @gerardjp,\nSorry for the delay. GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. This issue seems specific to your theme update mechanism. For support options, please review http://wp-cli.org/#support. Related #4749\n@jmichaelward @kevinvhengst Are you installing WP-CLI v1.5.0 or dev-master?. Actually, this is a duplicate of #4678. Hi @romanvbabenko,\nwp post list supports WP_Query's pagination arguments: posts_per_page and `paged. You're welcome to use those as you wish.\nWP-CLI may handle large queries automatically in the future. For more information, see https://github.com/wp-cli/ideas/issues/91. This is now live:\n\nhttps://make.wordpress.org/cli/good-first-issues/. Can you produce a list of the breaking changes and their impact (either in this issue or another)?. Hi @3pepe3:\n\nI'm trying to install a package from github but wp package install hangs on Resolving dependencies through SAT... This happens with all packages that I tried to install.\n\nCan you try deleting your /home/webid4/.wp-cli/packages/ directory and installing fresh? What debugging have you done to track down where it's a specific package causing the problem?. @schlessera Did you follow all documented release steps?. > What I didn't yet do is update the handbook, as I'm not sure how this can be done to only cover 1.5.1.\nI'm not sure I follow. Can you clarify?\n\nOther than that, everything should be taken care of already.\n\nI still see:\n\n[x] Debian and RPM builds need to be generated.\n[x] Update current stable version on the WP-CLI homepage and roadmap pages.\n[x] Close the v1.5.1 milestone.. > Sorry if this isn't an appropriate place to ask (happy to re-file elsewhere), but was it intentional for 1.5.1 to not include wp-cli-1.5.1.phar.gpg?\n\nSorry about that. I've signed and uploaded.. @schlessera Is there a reason this issue is still open?. Hi @drzraf,\nEven though WP_CLI::get_runner()->assoc_args is marked private, its values are exposed through a magic getter function. You can access the arguments directly as WP_CLI::get_runner()->assoc_args.. > It looks like there's currently no way to have something like 9 not be interpreted as an ID.\nIs this an issue worth solving?. > I don't think it is that hard to solve, actually.\nI meant more from the perspective of: even though it technically can be solved, should it be solved?. Hi @cpanelchip,\nWP-CLI blocks script execution as root unless --allow-root is provided. Normally, you'd see a big scary error message:\n\nIn your case, it appears your STDERR isn't being piped to display.. Build failure here too?. > Test failure was fixed via wp-cli/package-command#83\nNice!. @schlessera Let's get this sorted out by the next release. Happy to review any changes you suggest; generally, I recommend tagging a new release even when you've clobbered some minor detail.. > There are no tests for bash completion script, so it's quite likely a bug slips unnoticed into the master.\nIs this a theoretical concern or a practical concern?\nwp-completion.bash hasn't had any functional changes in three years: https://github.com/wp-cli/wp-cli/commits/master/utils/wp-completion.bash. Hi @echodreamz,\nWere you able to sort this out?. Hi @killown,\nYou can do this with xargs:\nwp post list --post_type=post --format=ids | xargs -0 -d ' ' -I % wp post meta get % _thumbnail_id\nChange _thumbnail_id to whichever meta you'd like to retrieve.\nSee Shell Friends for more details: https://make.wordpress.org/cli/handbook/shell-friends/#combine-wp-cli-commands\nIf you have other questions, please visit the #cli channel in Slack. We don't typically use GitHub issues for support questions. See https://wp-cli.org/#support. @noplanman Did you get this sorted out?\nOne thing to note: if you have a project wp-cli.yml, it will override all settings in ~/.wp-cli/config.yml, unless you explicitly specify inheritance.. > Is this intended? To me, the local config should apply too, but maybe my thinking is off a bit or there is a hidden flag for this.\nI think https://github.com/wp-cli/wp-cli/issues/4708 is related. I don't recall the specifics off the top of my head.\n\nRegarding inheritance, could you elaborate a bit more or point me in the right direction where I can learn how that works, please?\n\nSee https://make.wordpress.org/cli/handbook/config/#config-files, specifically the annotated config file.. Hi @gilzow,\nCan you share a sample wp-config.php to test with?. I've fixed the underlying problem with https://meta.trac.wordpress.org/changeset/7611/ and https://meta.trac.wordpress.org/changeset/7612/\nI've also cleaned up the duplicate data.. > I do expect to be able to have a table with numbers as its headers and data to correctly show up.\nDo you have a suggested implementation?. It looks like there's some history to why we've cast as objects ae1d08bf2b4a3536f2f259444a9d0fbaf32290fe\nInstead, we could avoid casting $item at all, and handle both cases (one where $item is an array and other where $item is an object).\nWant to submit a pull request for it? Unit tests would be good too.. Hi @timkite,\nAre you willing to fund or put the labor into maintaining a backwards-compatible version?. Hi @Weej1,\nCould there be a plugin that's causing the error? \"Registration Error!\" isn't a standard WordPress string, to my knowledge.\nAlso, for future reference, Slack is our preferred support channel: https://wp-cli.org/#support. @schlessera Does wp-make-coffee need to run for wp-cli/wp-cli-bundle?. > Yes, but I think (if I deduced that correctly) that it currently runs on some private server of yours.\nYep: https://make.wordpress.org/cli/handbook/governance/#how-does-all-of-this-work\n\nRight now, it should run on both wp-cli/wp-cli & wp-cli/wp-cli-bundle, but I'm still reflecting on whether wp-cli/wp-cli should even include a lock file or not.\n\nOk. I'll switch the bot to wp-cli/wp-cli-bundle. Thanks @thrijith !. Hi @Pea13,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. Hi @halilemreozen,\nThis issue seems specific to your environment, not a bug with WP-CLI itself. Feel free to pop into the #cli channel on Slack if you'd like assistance debugging.. I've seen this before too but never thought to track it down.\nAt the very least, it would be useful to know why two notices are reported instead of the expected one.\n@wp-cli/committers Any ideas as to what might be the cause?. Hi @lordspace:\n\nHere's the same call on a different server. It's running ea-php71.\nThe STDOUT warning is not showing up but Content-type is.\n\nYou don't seem to be running WP-CLI via PHP CLI. You'll want to make sure your server is configured to do so.. At first glance, I'm hesitant to change the behavior of WP_CLI::get_config(). It's a low-level API and changing its behavior could have unintended side effects.. > do you have any data or insights on how many installs would be able to make reasonable use of the wp db * commands then?\nI don't, no. It would be a smaller set of WordPress installs, certainly.\n\nI'd assume that with lower WP versions, you'll hit more and more compatibility problems with WP itself, but I might be wrong.\n\nGiven wp db * never loads WordPress, I don't foresee any compatibility issues.\n\nAlso, another (minor) issue I see is that we would need to add one or more WP versions < 3.7 to Travis to actually test this.\n\nThis is certainly doable.. Cleaning out my assignments for now. I'll probably look at this again after the New Year.. @schlessera Were the first two builds supposed to fail?. > All commits were meant to pass and did pass, but the second one added edge cases the first one didn't test against.\nOk, cool. I've run into an issue before where Travis passed but I expected it to fail. Wanted to make sure it wasn't the case here.. > As this is an interactive tool and not trivial to test, I'll merge this without test for now.\nI think it probably should have a test. There are some existing examples in https://github.com/wp-cli/wp-cli/blob/ed4b892dfad613b35ca54c62d4be3677a861f798/features/prompt.feature\nEssentially, you can pipe a < SESSION file into STDIN to drive the interactive session.. I think we should copy the function over.. Closing per https://github.com/wp-cli/wp-cli/issues/5061#issuecomment-465219452. Sorry about that! I've add a redirect for it\nhttps://github.com/wp-cli/wp-cli.github.com/commit/6a60a6d07497243c88b60a3158458b2ac7a64b30#diff-1a523bd9fa0dbf998008b37579210e12\nhttps://github.com/wp-cli/wp-cli.github.com/commit/8a519bbb1d3f52a21677f05336ae9553e28bceb1#diff-1a523bd9fa0dbf998008b37579210e12. @schlessera I've updated this to remove the Composer statement and instead add a GitHub label statement.. > One thing I am not sure of yet is how this gets pushed to the other repositories. Please advise the best way to tackle this.\nThe way I've done this in the past is to update https://github.com/wp-cli/scaffold-package-command and then run wp scaffold package-tests --ci=travis --force against each package. Not sure if @schlessera has figured out a better way at this point.. It should be relatively straightforward to switch from Travis to Circle. I did so on some internal projects this past month.\nOne gotcha though: it's more difficult to run against different PHP versions. I opted for using the PHP compatibility sniffs instead.. > Why is that?\nI think Travis has been better about maintaining images for each PHP version. I didn't spend a ton of time on it though.. \ud83d\udc4d This seems like a reasonable improvement.. Build failure looks random. Restarted.. Hey @prometherion,\nI think I actually ran into this issue in a totally unrelated manner last week.\ntldr: What I discovered is that passwords submitted via the web aren't unslashed before hashing. When you think your password is it'sweird, WordPress actually knows the password as it\\'sweird.\nI'm not sure this is something we want to address in WP-CLI; mostly an implementation detail to be aware of.\n. > However, I wanted to test your proposed workaround but even escaping on my own single quote, I still cannot log in.\nCan you share these reproduction steps?. > I think we should compare the password to its slashed version and show a corresponding warning if they are not equal.\nIn WordPress core? I'm not sure where that would fit into WP-CLI.... Thanks @msaggiorato. We'll get this merged after the failing test is sorted out in #5094. @schlessera Does this test failure ring any bells for you?\n\n. > add both a check in the --prompt\nThis already exists? https://github.com/wp-cli/wp-cli/blob/cbc8a34a7eecb2c14b921757a4a8b9c6fe7c5a22/php/WP_CLI/Dispatcher/Subcommand.php#L115-L128. I prefer the verbose output, as you have post_ids in your logs to check against if you accidentally typed in the wrong parameters, etc. The final count would be useful though\n. Fixed in ad02521\n. My usage preference is assoc args, so it makes sense to me to include it. Updated in 7865cc0\n. I generally prefer the former because it's consistent with core and hopefully means you don't have to guess what the parameters are when switching between commands (although currently I suppose you do need to guess)\n. True. I'll take another look when I'm back at the computer.\n. Like the following?\nwp user add_to_blog --blog=<site> <user-login> [--role=<role>]\n. Ah, I didn't realize you could use STDOUT as a file pointer. Updated in b24c271\n. Sounds good. What's a good name for it?\n. format_data() is what I'm working with for now. Do you remember if there was a particular reason for the limited set of fields for each user originally?\n. I went with format_items(). Why would you make $fields optional? How would the behavior change?\n. CommandWithDBObject expects the item to be keyed off ID which breaks for custom taxonomies. I wasn't feeling inspired to refactor\n. Plus, it's probably generally advantageous to have a generic format_items() util that can be used for themes and plugins too.\n. This JSON test isn't actually that great, as it fails if you don't use the first object in the output.\n. There's a good chance the theme will exist here, but no guarantee. For instance, on wpcom we have our themes directory split into subdirectories. Might be useful to somehow get the output of get_stylesheet_directory()\n. If we're writing to the current theme, should the test cleanup afterwards?\n. +1\n. Can you make sure this is run through $wpdb->prepare()?\n. Hmm, I'm not sure how this respects the --post_type argument. Furthermore, we probably should be deleting associated post meta if we're deleting all of the posts for a given post type.\n. I still feel like this approach to arguments is an anti-pattern. Instead, I would recommend:\n- wp blog empty: Empties the entire blog, including posts, comments, terms, users, options, etc.\n- wp blog empty --post_type=post: Empties all of the Posts from the blog, including attached postmeta and comments. Leaves other data.\n- wp blog empty --post_type=page --taxonomy=page_category: Empties all Pages from the blog, including attached postmeta and comments. Also deletes all of the 'page_category' terms. Leaves other data.\nLargely, this is the better pattern to follow because it allows the operator to be more deliberate.\n. For readability, it would be nice to break each of these delete segments into private methods.\n. Isn't 'name' the language used in core?\n. Also, what about instead approaching the usage like:\nwp --url=site.domain.com blog duplicate --to=site2\n. Why are you dropping the table if it already exists?\n. WP_CLI::$root->get_subcommands(); was similar to what I wanted to use, but it was fataling because it was trying to re-register all of the commands.\n. This use of exec() isn't suppressing output like I thought it would...\n. Open to suggestions as to where would be a better default directory. I decided to choose the same parent as /php/commands/\n. Yeah, that's still a @todo, hence proof of concept. It should maybe default to latest tag, or the stable version could be included in the directory listing.\nOn Apr 28, 2013, at 12:22, Weston Ruter notifications@github.com wrote:\n\nIn php/utils.php:\n\n\nif ( false !== stripos( $git_result, 'Cloning into' ) )\nreturn true;\nelse\nreturn new \\WP_Error( 'shell-fatal', $git_result );\n  +}\n  +\n  +/**\n* Update a local Git repo\n*\n* @param string            $local_dir     Where the local Git repo lives\n* @return bool|WP_Error    $result       Output of the execution\n*/\n  +function git_pull( $local_dir ) {\n  +\n$results = array();\nexec( 'cd ' . escapeshellarg( $local_dir ) .  '; git pull origin master', $results, $return );\n  @danielbachhuber what if the master branch does not correspond to the latest stable release? In such case, in addition to the Git repo source URL for the package, the yml package manifest could include a ref like refs/heads/stable or refs/tags/v1.0 so that the specific branch or tag could be referenced. Likewise, a specific commit hash could be listed in the manifest.\n\n\n\u2014\nReply to this email directly or view it on GitHub.\n. Why did you change the default to no verbosity? What's the justification?\n\nMy personal preference is for more verbosity by default, and I think that's a pattern we've established with other commands (e.g. --porcelain).\nIf the reason for opting into verbosity is simply the nature of the argument, we could instead go with verbosity levels and default to an intermediate level.\n. Was this to change indentation?\n. Can you explain the logic here? Why are we showing the progress bar when the verbosity argument isn't specified?\n. Sorry, I had fixed in 25530fe726b9656d91a4d34663cdefb9d710afcf and didn't push.\n. Sorry. Need to fix ronn in my local env.\n. Er, then this method only works for adding multisite constants to wp-config. I assume because its name is modify_wp_config, we'll eventually want to be able to use it for something else.\n. > You should of course do the preg_match() before calling it.\nWhy? I like having modify_wp_config() be smart enough about not adding the same $content twice.\n. Yeah... I could see where this was going from a mile away.\n. 77716e4\n. 2ab4b4f\n. Ok, I'll will try to do so in a wee bit.\n. Intentional, for verbosity.\n. 50010c4\n. > the command should support a variable number of arguments.\nSorry, I don't follow. Can you clarify?\n. Ah. Do we have that pattern anywhere else? I think we should deprecate it here if not \u2014 seems inconsistent.\n. Ok, I will update the PR then.\n. > Adding code to wp core install-network that can work only if you add the above incantation to your wp-config.php file is not acceptable.\nSorry, I'm not sure I follow what the alternative is?\n. If you have an alternate, functional way of including the MS constants in wp-config.php when MS isn't yet installed, I'm all ears.\n. We are stuck in a rabbit hole, and I've already spent more time on this PR than I wanted to.\nWhat if we just added a --skip-config arg like I originally proposed instead?\n. > The --skip-config flag will work only if you add that incantation to wp-config.php.\nRight... which was the whole point of the pull request (fcbd57e809a0c05979eac2cb56c5703a02227cf1):\n1. wp-config.php is tracked in version control, including the MS constants.\n2. Core requires a multisite instance to be installed in three-ish steps. 1) Install core, 2) Define define('WP_ALLOW_MULTISITE', true); in your wp-config.php, 3) Copy and paste more constants (and MS tables / options are installed)\n3. WP-CLI destructively adds the MS constants to wp-config.php, regardless of whether they're already there.\nI understand your desire for perfection, however I still have yet to see a better \"incantation\" to include in my wp-config.php. Instead, you recommend we roll this into wp core install which still doesn't solve the problem of not adding MS constants when they're already present in wp-config.php. Maybe it gets around the bugs apparent when you install MS in a two-step process, maybe not.\nPlease correct any incorrect observations I've made.\n. This particular change should be more explicit.\n. In theory, we should be able to just open both auto-loads if they exist.\n. Ideally, this is a named public method.\n. Should specify the other arguments too.\n. Typically, any subcommand using format_items() should end there \u2014 don't want extra output breaking the JSON format, etc.\n. Correct\n. dab1d02\nOn Sun, Aug 25, 2013 at 12:02 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nIn php/WP_CLI/Dispatcher/Subcommand.php:\n\n@@ -28,6 +30,14 @@ function get_alias() {\n        return $this->alias;\n    }\n-   function set_prompt( $value ) {\n-       $this->prompt = (bool)$value;\n-   }\n  +\n-   function get_prompt() {\n-       return $this->prompt;\n-   }\n\nThis getter/setter pair seems superfluous. You could just use\n$this->config['prompt'] directly.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/673/files#r5969302\n.\n. I'd rather not make 3.6 a requirement for this right now.\n. Right now they're displayed in serialized form. Do you have a suggested alternative?\n. Consistency is really important in my opinion. Consider this:\n\nsalty-wordpress \u279c  wpremote-test.dev  wp user-meta get 1 wp_capabilities\narray (\n  'administrator' => true,\n  'bbp_keymaster' => true,\n)\nsalty-wordpress \u279c  wpremote-test.dev  wp option get widget_categories\narray (\n  2 =>\n  array (\n    'title' => '',\n    'count' => 0,\n    'hierarchical' => 0,\n    'dropdown' => 0,\n  ),\n  '_multiwidget' => 1,\n)\nI guess we've been doing that for a while (ref 35ec772f8b6c5432b77ef8f56d302f54c4be2a75, 73a86f059842d2b2ed40637abab38ea4670f2455) but something doesn't sit right about transforming non-string or numeric values into \"arbitrary\" formats. I say arbitrary because in one case we do X and another case we do Y.\nFor CSV / Table, serialized makes the most sense to me, because that's how the data exists in the database. I'm not strongly tied to that, however \u2014 JSON is more usable. I just think we need a rule for \"if array or object and no format specified, present as X\"\n. I think we need to go JSON all the way:\n\n. Not sure how this is useful... --field=meta_key?\n. salty-wordpress \u279c  wpremote.dev  wp user-meta list 1 --fields=nickname,wp_capabilities --format=json\n{\"nickname\":\"humanmade\",\"wp_capabilities\":{\"administrator\":true}}\n. > Oh, you changed the semantics!\nWell, just for JSON. I didn't want to produce an object with a bunch of [{\"meta_key\":\"nickname\",\"meta_value\":\"humanmade\"},{\"meta_key\":\"admin_color\",\"meta_value\":\"fresh\"},\nI'm not sure whether it will fly because it sets a new precedent, but it makes --format=json much more useful in my opinion.\n. e1b3cb9\n. 861b1df\n. [--=]\nOn Sun, Oct 6, 2013 at 9:54 PM, Weston Ruter notifications@github.com\nwrote:\n\n\n*\n  * @alias dump\n  *\n-     * @synopsis []\n-     * @synopsis [] [--extended-insert=FALSE] [--comments] [--replace] ...\n  @scribu how should we handle synopses that allow passing arbitrary associative arguments?\n  Right now running the behat test via php behat.phar features/db.feature results in:\nWhen I run `wp db export /tmp/wp-cli-behat.sql`                   # features/steps/basic_steps.php:101\n      $ wp db export /tmp/wp-cli-behat.sql\n      Success: Exported to /tmp/wp-cli-behat.sql\n      Warning: The `wp db export` command has an invalid synopsis part: ...\n      cwd: /tmp/wp-cli-test-run-5251bfd4bfed58.38985113\n      exit status: 0\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/817/files#r6787935\n. All of the other wp term subcommands have <taxonomy> as a required argument. I'd prefer we continue to follow that pattern.\n. This is an interesting way to do it. Can you explain why you're generating terms in relationship to the terms that already exist?\n. > constant() is needed only when the constant name is dynamic.\n\n\nActually... just using the constant in the string doesn't seem to work.\ne1c4c29 might do the trick. Lets see if the tests pass...\n. e1c4c29\n. I'm building the location of composer.json based off this config. The default case would be ~/.wp-cli-community-packages/composer.json. What would you recommend otherwise?\n. Yeah, but then the vendor directory will collide with non-Phar installs.\n. Sure, I understand that. I guess I'm being dense in regards to how you think Composer should manage these packages.\nUsing Composer to install WP-CLI, ~/.wp-cli/composer.json is used to manage WP-CLI and its dependencies. The file cannot be used to manage community packages. If used to manage community packages, we have to define WP-CLI as a dependency of those packages. Furthermore, using Composer to install WP-CLI means ~/.wp-cli/vendor/autoload.php is used to auto-load WP-CLI.\nThe problem at hand isn't how to load the auto-loader. There's two ways to do that \u2014 as I've implemented, and as you've described. Yours requires creating a file that doesn't exist, something I think it worthwhile to avoid if we can. It also doesn't explain where the composer.json should live for community packages.\nThe problem at hand is where to locate the composer.json for community packages such that we have one solution for both Composer- and Phar-based installs. I don't care to solve this two ways, and think it acceptable to put the whole shebang in its own directory, the location of which can be easily customized.\n. Good suggestion 1b04e06\n. WP_CLI::add_command()\n. 1. If a package doesn't have WP-CLI as a dependency, then it can be loaded before WP-CLI.\n2. A typical pattern is to call WP_CLI::add_command() at the top or bottom of your package file.\n3. The WP_CLI class doesn't yet exist if WP-CLI isn't yet loaded.\n4. PHP will throw a fatal error if a called class doesn't exist. \n. Good suggestion 7f46563\n. 2fbf0fb\n. b79f031\n. 1faebd0\n. 1faebd0\n. 15fe441\n. 22ec6f7\n. I added in 70e9ca9c8e153596d97148878412896f7776e3c7 while working out a bug and I don't actually think it's necessary. Changing directories should be sufficient dbf1ca8. We'll see if the tests pass now.\n. How would you test without just testing for error strings? I'm not a fan of testing for error strings because they can easily change.\n. @scribu What do you want here?\n. I think we're stuck in the weeds. The code passes tests and performs as expected. If you have additional criticisms about the coding style, you're welcome to make the changes yourself.\nGenerally, I try to shoot for as few lines of code changed as possible in pull requests because our interactions regularly get in the weeds about coding style.\n. And include all of the Behat scaffold / features in the Phar file? They're excluded currently.\nAlso, I'm not sure whether that will work as we currently have to create behat.yml and point Behat to that because Behat doesn't have any sort of useful filepath resolution for the bootstrap.\nReally, the bootstrap files are the only thing the package tests need access to.\n. > So do we really need to run composer.phar install, then?\nWell, the package needs access to a fully-functional WP-CLI. I guess an alternative would be to clone the repo for the bootstrap files, and also download wp-cli.phar to use WP-CLI.\nNow that I've gotten it functional as a proof of concept, I think it needs more baking before it's the \"blessed\" version. It's working well-enough for my needs at the moment.\n. > It's working well-enough for my needs at the moment.\nNot so much I guess: https://travis-ci.org/danielbachhuber/dictator/jobs/21348118\nNeed some way of telling WP-CLI to load the current command.\n. git isn't the performance problem. Composer is.\n. Because I got all of the way through this pull request without realizing widget-id was unique :( I'll refactor\n. If the UI doesn't support it, we're not going to add it as a feature.\n. > What about old single widgets?\nUnless you can make a strong argument for it, I'm generally against supporting a pre-WordPress 2.7 feature.\n. list_ is the new preferred naming.\n. For consistency with the other commands, can you make this a class-level variable?\n. @package isn't necessary \u2014 we haven't been very consistent about that.\n. Why not just call WP_CLI::error( $error->get_error_message() )?\n. Need to properly handle WP_Error object here.\n. @synopsis is unnecessary when you've defined the option above.\n. Same as above\n. Same as above\n. Same as above\n. Instead of exposing these as two utilities we'll eventually have to maintain, let's make these helpers private methods on their appropriate classes.\n. Hmm, that seems a bit magical. Should we be handling exceptions as well?\n. In this case, we should output an empty table.\n. Needs backwards compat for $handle = STDOUT\n. > Not only that, the entire codebase is full of STDOUTs and STDERRs and STDINs\nYeah, that was going to be my follow-up comment. I'm not so keen on creating a hacked solution throughout the codebase to \"fix\" a deficiency in HHVM. Particularly because HHVM isn't a mainstream project yet and is mostly at the whims of what Facebook wants to do with it.\nInstead, what about creating a hhvm-compat package which includes a custom logger and whatever tweaks you need to get WP-CLI working properly? It will be a good exercise too in determining the other ways we need to make WP-CLI extendable. You can use #963 to run WP-CLI's internal test suite against HHVM on Travis.\nOnce you've got it working reliably, we can re-open this conversation about supporting HHVM in the main project.\n. Please remove commented code if you don't intend to use it.\n. You could also add a [--<field>=<value>] argument to filter to specific fields.\n. Formatting\n. Add another event list here to confirm it was dropped from the set.\n. Needs a couple more spaces \u2014 just alignment.\n. Can you put this on a new line?\n. This comment isn't necessary\n. Ditto\n. Let's add \"Default behavior is to skip the uninstall\"\n. This should be WP_CLI::log() instead of ::warning()\n. Hmm, this shouldn't be necessary\n. Drop this comment because it's covered below\n. No \"Warning:\" here. Also, would be good to have the uninstall line.\n. Then we'd be a bit SOL. Can you open a new issue so we can discuss the options?\n. We should use Requests instead of a core function for remote requests just to be triple safe\n. Same as above \u2014 rather than using a core function to get the body, just get it out of the variable\n. No underscore needed in method name\n. Drop the @since\n. Travis fails it's running on older versions than trunk, and those older versions load the files again with require()\n. \"Fast Replace\" only means something in a specific context. Let's change the column header to \"Type\", and have our types be \"PHP\" or \"SQL\"\n. fast_handle_col should be sql_handle_col(). Let's also rename the other method.\n. Can you update your fork to upstream's latest master?\n. Can you add some explicit tests where serialized data is added to the database, the search and replace runs, and we inspect the data to confirm it wasn't mangled?\n. How would it be active if it was just deactivated above?\n. Why did you change this messge?\n. Fix indent\n. Actually, I'll just fix on master.\n. Let's create a generic request function in utils.php, and use that.\n. Needs an additional line with description.\n. Description should read \"Check for update via Github API. Returns latest version if there's an update, or empty if no update available.\n. In both cases, let's only unlink() if we created the file previously.\n. These are actually two separate error states. We'll need to handle them both.\n. I'd prefer not to include $value in the message, as it could be an extremely large value that breaks output.\n. We need to check that the file was created in the copy procedure above.\n. Correct\n. Ends up like this, which breaks the test call:\n+ BEHAT_TAGS='--tags='\\''~@require-wp-4.0'\\'''\n+ vendor/bin/behat --format progress '--tags='\\''~@require-wp-4.0'\\'''\nBecause this current way works fine, I don't see any value in processing the echo'd value with regex, etc.\n. We shouldn't need to do this, because you can safely expect this file to exist in a standard WordPress install.\n. Same boat\n. Seems like we could just use curl, instead of being dependent on both?\n. Why are you disabling verbosity?\n. Is this really necessary? Couldn't we just validate the version of WordPress that we download?\n. Let's call this update_type to be specific.\n. count should be dropped as an accepted value\n. Change to update_type\n. Let's have a success message too, like I've added for cli check-update 40b233b88b9a29a0221e8963dedefb4c88e97c35\n. Please remove the underscores from the methods.\n. > Is there a way to check that a table has only the expected rows instead of checking that a table contains the expected rows?\nNope. You can just do wp core language list --status=active --format=csv | wc -l\n\nShould we create it?\n\nEh, if you'd like. I don't think it's necessary\n. This check isn't necessary.\n. s/And/Then/\n. Should --total be a format option? We have some prior art for custom formats.\n. Having default empty values is fine.\n. Formatter will handle that for you\n. Let's pluralize: CommandWithTerms\n. I think you have some indentation here you need to fix.\n. Don't need \\ in front of functions when they exist in global scope\n. These fields can just be assigned to a class-level variable. The get_fields() method for meta is necessary because the fields vary between user meta and post meta.\n. There's a new pattern for indicating available fields that's present in other classes. Let's follow that.\n. For now, because it's the behavior of wp term, we should require <taxonomy>... too\n. Not sure get() is necessary, as we have wp term get for getting the value of a single term.\n. delete() should be remove() in this case.\n. Can we also have a check to see that the comment now has the approved status? And similarly for unapproved?\n. wp term requires you to pass one or more taxonomies.\n. Fix formatting\n. Fix formatting\n. We should have tests where we expect success here too. You can associate a custom taxonomy with users via a run-time plugin. Check this out as an example: https://github.com/wp-cli/wp-cli/blob/master/features/help.feature#L35\n. Probably best to start off with some variation of CRUD for the first scenario. It will cover all of your steps, and ensure basic functionality.\nExample to follow: https://github.com/wp-cli/wp-cli/blob/master/features/user-meta.feature#L3\nHere's an outline:\n1. Add a term to a post, expect success message.\n2. Check that the term was actually saved to the post via a list\n3. Append another term to the post, expect success message.\n4. Check that the term was actually saved to the post, and the other one wasn't removed.\n5. Forcefully set the post's terms to a new term that hasn't been used before.\n6. Check behavior via list\n7. Remove the remaining term from the post.\n8. Check that the post no longer has terms.\n. Please make sure be thorough about fixing all copy and paste errors.\n. Formatting\n. Formatting\n. Let's change this to <taxonomy>... and require one or more taxonomies to be supplied. This would mirror the behavior of wp term list:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp term list\nusage: wp term list <taxonomy>... [--<field>=<value>] [--field=<field>] [--fields=<fields>] [--format=<format>]\n. We follow WordPress coding standards, so please use under_scores instead of camelCase\n. wp_get_object_terms() supports multiple taxonomies. You don't need a foreach here when simply passing the array of taxonomies will suffice.\n. And I'm not sure why you need this method here, when you don't seem to use it below.\n. To handle object_id and multiple taxonomies, you could do something like:\n$object_id = array_shift( $args );\n$taxonomies = $args\n. Probably don't need an extra get_type() method here, when it's already available as a class-level variable.\n. Let's also use WP_CLI to avoid having to backslash all uses of the output methods.\n. In all cases, let's actually use the WP_Error in the message when there is one. You can pass the WP_Error object directly to WP_CLI::error()\n. $success is a poorly-named variable because it could also be a failure. Let's call it $result instead.\n. You can remove these methods because they don't ever seem to be used.\n. Oh, I see what you're doing now. Can we call this method get_object_type() instead?\n. Needs to require one or more taxonomies <taxonomy>...\n. Don't we need a user fetcher here? Would be good to have test coverage for users too.\n. > The CommandWithMeta class doesn't do this?\nDoesn't matter \u2014 better with use WP_CLI. We can improve CommandWithMeta later too.\n. Good\n. Formatting\n. Let's swap the order of these arguments so we can use <term>...:\nwp post term update <id> <taxonomy> <term>...\n. Don't need an alias if the alias is the same as the method\n. Same comment as set\n. We'll do it for consistencies sake.\n. > But you are keeping it consistencies to taxonomy, but it is more similar to meta. \nHow so?\n. Let's remove this.\n. *not* exist should be *does not* exist\n. We should download from https\n. In fact, we have to download from https, as WordPress.org now redirects http://wordpress.org to https://wordpress.org and the preflight check fails when it gets a 302 instead of a 200\n. Can you provide a comment above, and a line between the two examples?\n. Let's do with [--<field>=<value>], which will be more flexible (example: --autoload=on or --autoload=off)\n. Let's make this --format=total_bytes\n. Should mention the other formats too here.\n. Shouldn't option_value be displayed by default?\n. I'd like size to indicate the units (e.g. size_bytes or similar)\n. Let's add some tests for normal wp option list output too.\n. > When using plugins, we don't always know the key name (taxonomy name) that you want to modify. Without looking through all the plugin code in the codebase, there is no way to find that find that taxonomy name.\nThis sounds like a problem we can solve with something like wp post term taxonomies (information about taxonomies registered to a post) and wp term taxonomies (information about all registered taxonomies.\n\nThis would be different, as I could daisy chain commands.\n\nCan you explain how you'd like to daisy chain commands in greater detail?\n. > How would wp post term taxonomies work for custom post types or any other object type?\nCould be something like wp post term taxonomies --post_type=page\n\nThe user will not know the tax name as it is not built in and they may not have registered them.\n\nIf the user has no prior knowledge about the taxonomy, then how would the user know to look for terms registered to a post?\n\nConsistencies is not a good reason to remove functionality, even it is different, it is better user interaction.\n\nConsistency is an important attribute to creating interfaces. In this case, we are creating an interface that has some prior art in WP-CLI.\n\nAbove is just a pain to do and most users will not bother.\n\nShow me the data? Seems like a viable way to go about it if you don't explicitly know the taxonomies registered to a post type\n. WP coding standards please\n. Where is this function defined?\n. Three statements above need to follow WordPress coding standards.\n. Can we get some indentation on these examples?\n. containing rows means that the other two terms could still be present. You could use --format=count in addition to (or instead of) to confirm there's only one term on the post.\n. This should have a list check afterwords to confirm the term was actually removed.\n. This should be <term>... to support multiple terms, which also means you don't need the CSV hack.\n. Same as above.\n. Same as above.\n. Looks like the formatting might be off in the next line.\n. Formatting.\n. Formatting\n. Should we also support the arguments wp_get_object_terms() supports?\nhttp://codex.wordpress.org/Function_Reference/wp_get_object_terms#Argument_Options\nYou could support all of them in a generic way with:\n* [--<field>=<value>]\n* : One or more args to pass to wp_get_object_terms().\n. Can we make sure these docs fully extend the docs we already have?\n. > I have used time to get to this point and now you are adding new things.\nA pull request is not done until it's done. <term>... is an existing pattern used elsewhere in WP-CLI (e.g. wp plugin activate <plugin>...). Supplying arguments as CSV is not. I apologize for implying the PR was done. At this point, it looks pretty close to shipping.\n\nWhat the hell?\n\nPlease watch your language. A good rule of thumb for behavior is to treat others as you'd like to be treated. I'll only ask once.\n. If it's not immediately obvious to you, let's leave it to a follow-up PR.\n. > What do you think?\nSeems fine.\n\nShould I change the tests as well?\n\nYep.\n. You should have full, not partial, doc coverage. The base class has full coverage, this has partial coverage. You can test locally with wp help post term\n. Oh, I see what you've done. Your OPTIONS section confused me. You can just drop OPTIONS from both, as the format argument is only applicable for list, and you're good to go.\n. Let's call thisupdate, instead ofself-update, to follow the established pattern forwp coreandwp plugin.\n. To keep our code clean, let's have the opposite check earlier, and bail if at latest.\n. Where do we accommodate these versions?\n. Should we indicate, or try to diagnose, the error?\n. I don't want to makeWP_CLI::error()a magical method that does different things based on what you pass to it. Let's keep the scope of the pull request towp cli update. Ideally, we should also check if this was installed via Composer or Git, and offer update instructions in that case. I think we can keep this PR to just Phar though.\n. \"updated\"\n. And becauseWP_CLI::success()prefixes with \"Success: \", the message can just be \"Updated WP-CLI to $version\"\n. Sounds good.\n. Instead of using a new library, can we useWP_CLI\\Configurator`?\n. It would be good to break this logic into a standalone function, and include unit tests with it.\n. > Would you rather have a WP_CLI::error_box() or remove this entirely?\nI'm open to it. _box() doesn't strike me as very semantic though. How about error_multi_line()?\n\nAlso, what the $exit param?\n\nI'd prefer not to change the behavior unless there's a good reason to do so. The one use you have in this pull request doesn't justify, in my opinion.\n. php/utils.php is a good place.\n. > Since this PR has been merged already I should open a new one, right?\nYes please\n. s/list/perform\nAlso, I think we can skip --ignore-* by using our magic --no- prefix.\n. Same comment as below (re --no)\n. Would be good to have tests for minor and patch updates, as well as a simulated error if possible.\n. Can you remove this please?\n. This comment should be next to the --subdomains flag\n. Need  to follow WordPress coding standards here.\n. It would be good to have some description of how archiving is different than deactivating, etc.\n. > Is there a better way to check for a subcommand with subcommands?\nNothing off the top of my head. If not, it would be nice to have one (with some unit test coverage).\nRelated: we really should have a glossary of all these terms.\n. Formatting.\n. Shouldn't this comment be: \"All themes should be skipped\" ?\n. Needs newline\n. Er, do we really need this conditional twice ?\n. Can we have the same download() function in this file too?\n. Some funky indentation going on here.\n. You can skip this check if the class is already instantiated so:\nif ( is_string( $class ) && ! class_exists( $class ) ) {\n. When I try ...\nThen STDERR should contain\n. Can we test for tabular format?\n. We should make this test more specific\n. Can you check for the specific message?\n. I think we can drop this confirmation prompt\n. Can you change these back to lowercase?\n. Lowercase please\n. If you're including variables in a string, can you wrap them in braces? '{$tmpfname}'\n. Same as previous\n. Can we make this argument $limit_to with the default behavior as all-tables and supporting all-tables-with-prefix or network as two possible options?\n. > Would it make more sense to have the default be only WordPress tables, rather than all tables?\nYep, good catch.\n. > Do we still want to refactor the parameter for get_table_list()\nYes please\n. Good description.\n. Why did you change this?\n. This should probably be elseif\n. Why is this code in this PR?\n. Changes to plugin activation should be in a separate pull request from those to theme activation.\n. Can you make sure there's a newline here?\n. Can we call this the en_US locale, just to be explicitly clear?\n. wp_get_translation_updates() doesn't perform the necessary updates?\n. Let's follow the pattern of wp core update and use WP_CLI::success( \"Translations are up to date.\" );\n. Is type always set?\n. Should return a more descriptive error code if it was a partial failure? Related #1430\n. I don't think we should drop the existing field. Can't they live side by side?\n. We should make --force the default behavior, and drop the argument. wp (plugin|theme) list both force refresh updates, which I think is an acceptable behavior.\n. Why?\n. I think this should be \"Translation updates\", note no \"s\" on \"Translation\"\n. Can you explicitly specify translation updates?\n. Makes sense. Can you include some mention of \"after the theme / plugin updates\" have run?\n. Same as #1501? Can you comment on the core issue?\nSeems pretty dirty to add a filter inside of __construct() \u2014 should this always run, or just on specific contexts?\n. > I'm not sure about this, because these functions do not check only for translation updates.\nThe comment is for why the function calls are in this location though. And this location is specific to translations.\n. :+1: \n. Can we make this method private in WP_CLI_Core_Command so we don't expose it as a public utility?\n. We should have some fallback when the sample config isn't found.\n. Also accepts json\n. Why not set $i based on $max_id ?\n. Can you have this test for the entire line?\n. Can you use PHP_EOL instead of \\r\\n ?\n. Why do you think this message is necessary?\n. I like \"Checking\" much better.\n. @miya0001 Why did you change this originally?\n. It's fine, and a small change, to change \"Can't find $att_desc.\" to \"Can't find {$att_desc}.\"\n. What if the user already exists and meta key already exists?\n. Would it be helpful to have a comment here as to why we're changing error reporting?\n. This might be a nice file to include in wp scaffold package-tests\n. What's the risk of leaving some process accidentally running?\n. Should we add this as a feature to \\WP_CLI\\Process ?\n. Could we make this more explicit as \"I launch in the background\"? \"I start\" seems too broad to me.\n. Could we add a bit more description to how it actually works, usage details, and how you should and shouldn't use it?\n. Is there a reason we shouldn't hook this onto before_invoke? https://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L1028\n. It would be great to have proper PHPdoc for everything in this file, given we're exposing them as top-level functions and not private methods on the Server_Command class.\n. And also because the act of loading this file changes a bit of behavior.\n. Thanks for the abstraction here. Are there other places we should use it?\n. Can you include some more prominent \"Warning: \" with specific numbers as to how much it will slow things down?\n. #1864\n. > They are not top-level, but inside the WP_CLI\\Router namespace.\nSorry. To clarify, when I said \"top-level\", I meant \"functions other WP-CLI developers have easier access to.\" Because, in some senses, we're making them a public API.\n\nIf you have specific questions that can't be answered by the current comments, I'd be glad to answer them.\n\nSure. For each, why?\n. Isn't this the full host, plus optional port? Why does it need to be a utility method?\n. Why can't the previous two methods be closures?\n. Why was it necessary to duplicate this function?\n. Thanks\n. I know why. However, it would be helpful to have \"why\" documented in the code.\n. Can you remove this flag?\n. On second thought, we probably don't need to make this a private method if it's only used once. Thoughts?\n. Er, I don't think we need this abstraction. Can you just include in your method?\n. Needs newline\n. Please remove @wip flag\n. Newline, and wrap the conditional with brackets, per coding standards.\n. I'm not sure how I feel about this method.\n. Good\n. I think this syntax needs to be any instead of all. And, if I provide any, it should skip this check.\n. You should always test what you're expecting \u2014 Then STDOUT should contain.. Success:\n. Good re: testing with a subset.\n. Why does this need to be a separate method?\n. And, rather than running str_replace() against all fields, let's just run it against the two applicable fields: post_excerpt and post_content\n. Can you remove @synopsis ? Now that we have expanded docs here, it's no longer necessary.\n. $info['update_id'] is what we want!\n. Can we make this private? I'd like to prevent subclassing so we don't have to worry about backwards-compatibility if we decide to ever change things.\n. Derp, I can make this change myself :) 710d8944cc6553f7be5c9f120fca0ab7\n. Can we throw a warning, instead of a hard error, so we can have the option refreshed still?\n. Hm. The challenge is that WP_VERSION=latest isn't the same as trunk. Not sure what we can do to accommodate.\n. Is more always available on Windows?\n. Shouldn't this be if ( $item->isWritable() ) ?\n. This passes locally\n. This passes locally\n. This fails locally\n. Oh, as it should, because wp-cli.yml overrides config.yml\n. > In addition, in the case of plugins, \"Tested up to:\" is in the Readme.txt.\n\nSo I think should be tested in the explicit version. What do you think?\n\nCould, but that would be a separate enhancement.\n. Would it make sense to have wp taxonomy get too?\n. > I asked myself the same question and to be honest I'm not sure. There is more information to show about a taxonomy but I just don't know if it is going to be useful to someone.\nWe should aim to expose whatever WP-API exposes in the JSON endpoints.\n. > Do you think it is a good idea to move this method to a parent class common to all command classes that uses it? Maybe we could create a CommandWithFormatter extending WP_CLI_Command.\nHm. I'm not sure that's the best abstraction \u2014 probably not worth creating an entire class for this simple method. And, to be honest, we don't need this method because it's only called once.\n. Can you move this into the create_files() call above? \n. Nah, this is fine as is. Related #2134\n. Why do we need to assign this $data variable ?\n. Ok, fair enough.\n. How do you feel about making this type, because WP REST API has /wp-json/wp/v2/types ?\n. > Which do you prefer?\nI think I prefer wp type, but it's also pretty generic.\nWe can go with wp post-type for now, and change it later when #1784 lands.\n. Could we have an error state too?\n. Can you rename this to get_runner() ?\n. This should be intended with two spaces.\n. Can you modify this test to include:\nThen STDERR should contain:\n  \"\"\"\n  Warning: User superadmin already has super-admin capabilities.\n  \"\"\"\nThen, the next line should be:\nWhen I run `wp super-admin list`\n. No underscore needed\n. We should WP_CLI::log() which files are removed.\n. You can use self::get_core_checksums() to get a full list of the files present in each version, and then compare the two.\n. Also, I'm not a fan of methods with maybe in the name, as it makes the method ambiguous. We should do the version comparison beforehand.\n. We should have a few basic tests here to confirm WordPress is still running as expected, lest downgrading deleted all of the files in the install.\n. Yep\n. Although, we need to ensure we safely handle the cases where WordPress.org doesn't return checksums for a version (for whatever reason).\n. Option get and set; maybe create a post and edit a comment.\n. > Currently if either of the checksum calls fail no files will be removed. Is this a reasonable fallback?\nI think so, although we should WP_CLI::warn() when it happens so the user knows to go clean up.\n. I think we should log each of the files removed, to give greater visibility to the end user of what's happening. When something goes wrong, the count doesn't help me debug at all.\n. Can we add one more test for an expected WP 4.3.2 file?\n. Can we add one more test for an expected WP 4.3.2 file?\n. When would WP_INC not be defined?\n. Actually, given this command runs on before_wp_load, when would it be defined?\n. Can we rename this method to cleanup_extra_files()?\n. You can drop \"unused\" from this sentence, as \"unused is ambiguous\"\n. Use WP_CLI::log() instead of WP_CLI::success(), and drop \"unused\"\n. Also, a test for Then STDOUT should contain: with a list of the files removed would be great.\n. If $count ended up being empty, can we have a message that says there weren't any files to be removed?\n. Let's use Then STDOUT should be JSON containing:, which will ensure it's valid JSON.\n. Can we use wp theme install --force twentyfifteen --version=1.0, for versions of WordPress where twentyfifteen isn't installed by default? Also, we may want to use twentytwelve to ensure compatibility down to WP 3.7\n. Same as above: Then STDOUT should be CSV containing:\n. Same as above.\n. Same as above.\n. If we use \\WP_CLI::log() here, we won't need to assign $this->upgrader->cli_output_format\n. Shouldn't need the format check here if we're using the Quiet logger.\n. Sorry, to clarify, it's unsafe to use the $wp_local_package global without loading WordPress.\n. > Does WordPress redefine this global somewhere? (I've done a quick search and it doesn't seem to be the case.)\nI was under the assumption it could be repopulated by the database. But, on second thought, I don't see why that should impact verifying checksums.\n@szepeviktor Thoughts?\n. > 'local_package' => $wp_local_package\nWe should only use $wp_local_package if it's defined, which it's not in unlocalized downloads.\n. Can we rename this method to get_wp_details() or similar, given it's returning more than the version?\n. I try should be changed to I run, given you're changing this to a success statement.\n. Needs newline\n. Does it make sense to implement ArrayAccess as a utility feature, given this intends to solve the ambiguity problem in the first place?\n. One potential problem is that if something calls this method directly, $args don't get considered in get_positional_args()\n. When called within the scope of the command, get_positional_args() is expected to be the positional arguments passed to the command, and not the command itself (e.g. super-admin add)\n. Potentially, get_positional_args() could return null until the command is known. Or, we could unset the positional args set to the command.\n. @wp-cli/committers Ideas on a better way to define these config file arguments? I like their intent, but I'm not completely happy with this implementation.\nAnother option would be to make them top-level arguments, e.g:\ninherit: wp-cli.yml\nHowever, this has the potential to conflict with argument definition for a command called inherit\n. What's the behavior if you call wp_delete_comment() on an already-trashed comment?\n. Please wrap this conditional in braces, and break the statement with newlines.\n. Can you fix the formatting here?\n. Needs a newline\n. If you use the --porcelain flag, then you can save the id for your new menu item to a local variable.\nAnd I run `wp menu item add-post my-menu 2 --porcelain`\nThen save STDOUT as {MENU_ITEM_ID}\n. Can we explicitly check that this is the right menu item, and that it's properly connected to the post?\n. Can we rename this file to test-sample.mustache, just to make sure it's clear that it's a template now?\n. What do you think about adding a test for ensuring wp_update_term_count() works as expected? As in, setting the count field in the database to an incorrect value, and then triggering recount to ensure it gets updated to the expected value?\n. Can you think of a better description for this feature?\n. Want to add a secondary, longer description about situations where this would be necessary?\n. Can you add ## OPTIONS above this option?\n. What are the pros and cons of recounting terms for an entire taxonomy, vs. specifying term ids individually?\n. > Will do, FYI the docblock for comments is missing one as well, I can add that.\nThanks\n. > Talking about running a manual SQL update to the wp_term_taxonomy table, then running the recount function and verifying the change afterward?\nYep\n. > I'm just not sure of a scenario where someone wouldn't want to update the count for one term while leaving other terms with possibly incorrect counts.\nFair enough. Let's do taxonomies then.\n. Good\n. Do we need this filter if we're ignoring the pathname above when producing the original set?\n. Given that it's relatively standard to include extra files in the web root, I was thinking that we'd exclusively check wp-admin and wp-includes \u2014 and ignore the web root entirely. Thoughts?\n. > Any idea how to create an extra file to test this with?\nGiven a wp-includes/extra-file.txt file:\n  \"\"\"\n  hello world\n  \"\"\"\n. This warning is in STDERR.\nThen STDERR should be:\n  \"\"\"\n  Warning: File should not exist: wp-includes/extra-file.txt\n  \"\"\"\nAnd STDOUT should be:\n  \"\"\"\n  Success: WordPress install verifies against checksums.\n  \"\"\"\n. @JRGould I noticed this adds a newline when the shell first begins too. Is there a way of preventing this?\n. > Happy to open another issue/PR for that if you think it's worth the tinker?\nYes please. We should also look into whether we can inject the newline after command execution.\n. Huh. Why is this value 10?\n. Oh, I guess it's not supposed to be :)\n. Ah. That would be wp comment list --comment_approved=1 --format=count (or something similar).\n. This should be 4.5.1 already.\n. Actually, scratch that. 4.5.2\n. For better readability, you can bail early here:\nif ( empty( $rows ) ) {\n    return;\n}\n. We need a test that multiple chunks get created, and that those multiple chunks are appropriately inserted into the database.\n. Great placement for this fix :)\n. Ah, clever :)\n. @westonruter @jonathanbardo In situations where wp is defined by an alias or addition to PATH in a .bash_profile, have you found a way to load this?\n. Hm, not quite:\nlocal \u279c  wp-cli git:(2754-ssh) \u2717 wp --ssh=hb\n/usr/bin/env: wp: No such file or directory\n. > That's a valid scenario and I don't think we ever faced that problematic while we developed wp-cli-ssh.\nUnfortunately, it's a problem with the first server I tested with :(\n. > This is why there was recent support for a wpcli_command config to handle situations where wp isn't on the PATH: xwp/wp-cli-ssh#27\n@westonruter Did you explore trying to get the data out of .bash_profile ? I'd prefer to not have to institute a workaround...\n. This should be [--export_insert_size=<rows>]\nNote that it shouldn't ever be used as a flag.\n. Can you add a short explanation as to why you might use or change this value?\nAlso, to specify the default value in the document, you can use inline YAML doc:\n```\ndefault: 50\n. Is there a better way to express this `foreach()`?\n. Once you specify the default value per my comment above, you can just access `$assoc_args['export_insert_size']` directly.\n.\nif( ( $index % $export_insert_size == 0 && $index > 0 ) || $index == $count ) {\n```\nMeaning this is a complex conditional and difficult to review / understand the logic of. Can it be written more simply?\n. > No, I didn't. Also, perhaps the PHAR isn't even aliased as wp on the target environment. I think that there will ultimately need to be a way to provide an alternate path.\nI ended up creating a WP_CLI_PRE_SSH_CMD env variable, to offer a bit more flexibility:\nWP_CLI::add_hook( 'before_ssh', function() {\n    if ( $ssh = WP_CLI::get_runner()->config['ssh'] ) {\n        list( $host, $path ) = explode( ':', $ssh );\n        switch( $host ) {\n            case 'hb':\n                putenv( 'WP_CLI_SSH_PRE_CMD=export PATH=$HOME/bin:$PATH' );\n                break;\n        }\n    }\n});\n. Let's keep this as:\nWP-CLI\n======\nIt will be easier to parse this out to turn it into the index.\n. What about (from the existing homepage):\n\nWP-CLI is a set of command-line tools for managing WordPress installations. You can update plugins, set up multisite installs and much more, without using a web browser.\n. > The goal of WP-CLI is to provide a command-line interface for any action you can perform in the WordPress admin. The project also includes commands for many actions you can't perform in the WordPress admin.\nFor instance, wp plugin install (doc) lets you install and activate a WordPress plugin:\n$ wp plugin install rest-api --activate\nInstalling WordPress REST API (Version 2) (2.0-beta13)\nDownloading install package from https://downloads.wordpress.org/plugin/rest-api.2.0-beta13.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\nActivating 'rest-api'...\nSuccess: Plugin 'rest-api' activated.\n[demonstrate one other command]\n. > For a complete introduction, view the Quick Start guide. If you already feel comfortable with the basics, jump into...\n. > Submit a bug report\n. Can we include a short summary of what a command is?\n. Let's call this \"Leadership\"\n. > Before you install though, please make sure your environment meets the minimum requirements:\n- UNIX-like environment (OS X, Linux, FreeBSD, Cygwin); limited support in Windows environment\n- PHP 5.3.29 or later\n- WordPress 3.7 or later\n. I'm not quite sure about this language:\nWP-CLI is a volunteer-led project and can't support every user individually.\n\nI do try to support everyone, but maybe we should have some communication of what types of issues are supported and what aren't.\n. What do you think about having some indication that this is a bash script meant to be run?\n. Can you make this a representational example?\nEg:\n$ wp db reset --yes\nSuccess: Database reset.\n. > Do you want me to keep the $? Seems like I couldn't find any examples containing it.\nYes. The point of #2769 is to update the examples so they appear closer to how you'll actually see the commands run in the real world.\n. > Maybe I could update the command to Bash script: Search/replace production to development url (multisite compatible) or add a #!/bin/bash at the start of it.\nYep, let's do both of those.\n. \ud83d\udcaf  excellent examples!\n. > See also our documentation on alternative installation methods\n. If we link to alternative installation methods in the beginning of this section, I don't think we need this paragraph.\n. > To get involved, please first read about ...\n. > Similarly, wp transient ...\n. > the constraints on their volunteered time.\n. You can drop the \"But\" \u2014 there's no negation of the prior statement.\n\nIt's easier than it looks to create a custom WP-CLI command.\n. @hideokamoto Formatting is a bit off here. Can you fix? Thanks\n. @hideokamoto This needs one more space\n. This can also be:\n\n```\ndefault: 15\n```\nhttp://wp-cli.org/docs/commands-cookbook/#longdesc\n. Can we truncate this some? I don't think it's necessary to include the full output.\nAlso, this will need to be indented.\n. This needs to be indented\n. This should still be the default format.\n. Can you change this to:\n```\n--format=\n: Render output in a particular format.\n\ndefault: list\noptions:\n  - list\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n\n``\n. This still needs to be indented with four spaces.\n. Because$assoc_args['format']` will always be set, this can just be:\nif ( 'list' === $assoc_args['format'] )\n. @hideokamoto Still this change to be made\n. @hideokamoto There's an unnecessary extra line here.\n. This should be:\nWhen I try `wp theme activate p2`\nThen STDERR should be:\n. I think we should always display the list, even when there are no caps. This is consistent with the other commands that implement --format=<format>.\nBy always displaying the list, you'd get an empty table with --format=table\n. The default format isn't json in this case. We need some name for the default format, and we should make sure there's test coverage for the default format (as the build didn't fail when it should've).\n. We could add yaml to this set too.\n. Sure, list works for me.\n. Won't yaml and csv work here as well?\n. I think this is breaking on the tab character. You can instead check:\nThen STDOUT should contain:\n  \"\"\"\n  WP-CLI packages dir:\n  \"\"\"\n. @ernilambar Good \u2014 thanks for adding this\n. Hm, I'm not quite sure how I feel about this. Can you think of a better way to handle multiple default values?\n. Yep, this works well I think.\n. Do you mind reverting this change for now? I'd like to give it a bit more thought before we commit to a direction.\n. To prevent this test from being dependent on /tmp/, let's drop it from the filepath.\n. Can you make this The STDOUT should be: to be explicit that there's no other output expected?\n. This should probably be \"Reset WordPress sidebars\"\n. The indentation is slightly off here. It should be:\nThen STDOUT should be:\n  \"\"\"\n  6\n  \"\"\"\nThis comment applies to all instances throughout.\n. We should follow the existing pattern of requiring one or more sidebars to be passed or an --all flag.\n. On a new line, could you explain what \"resetting\" a sidebar means?\n. This definition isn't needed if the command name is the same as the method name.\n. Also, can you include one or more examples in the new pattern we've established?\n. Should there be a test for where the widgets are expected to end up?\n. Given this method is only used once, can't we just include its logic in the reset() method?\n. Change \"place those to\" to \"places them in\"\n. Can we verify the widgets were added to the inactive sidebar?\n. Sidebar '%s' is already empty.\n. How would you get this error, if we're already checking for empty( $args ) above?\n. ids needs to be restored in the doc block too.\n. Can you mention that the website documentation is updated from every command at the time of the release, so your changes may not be applied immediately?\n. Can you make this into a proper bulleted list?\n. This line can probably be dropped.\n. Worth mentioning that the documentation that's a part of the website repo has an \"Edit\" link in the top right of the page on the website.\n. \"Is documentation your strength? Take a look at the currently open...\"\n. Can we specify which packages are included?\n. Can we specify which tasks are included?\n. What do you mean by \"the actual tests\" in this line?\n. It's probably worth noting which files are always generated, vs those that are ignored when --skip-tests is included.\n. This exception isn't quite right. Where is it caught?\n. When version=trunk, we're passing tar.gz as a file type and getting zip in return. Will that cause bugs later on?\n. > Potentially yes. What would be the best way of handling this? We should ask for what we actually want.\nGiven it's a private method, so we don't need to worry about backwards compat concerns, could we just remove the third argument and make sure the calling function handles the archive file correctly, regardless of type?\n\nBut what should happen if we ask for a 'tar.gz' of the nightly build - an exception?\n\nGenerally, we aren't using exceptions within WP-CLI. Calling WP_CLI::error() is a better way of handling errors where WP-CLI doesn't know how to proceed.\n. > So I think we should either note in the docbloc that get_download_url() always returns a zip for trunk version or call WP_CLI::error(). The second option doesn't feel necessary.\nOk. Just to make sure the execution path is accommodated for, let's call WP_CLI::error() when tar.gz is provided as a version for nightly.\n. Can we add a test case for a non-US locale too?\n. I think we should normalize to nightly instead of trunk, given that's what WordPress core calls the build file. trunk refers to the SVN branch.\n. Shouldn't this be case: 'tar.gz', and then use WP_CLI::error() when an invalid extension is provided?\n. I think we should WP_CLI::error() if ZipArchive isn't find. The check should actually happen much earlier, to make sure we don't leave a partially downloaded file around.\n. Is this condition correct? Could we instead keep it at:\nif ( 'trunk' === $version ) {\n    return 'https://wordpress.org/nightly-builds/wordpress-latest.zip';\n}\nif ( 'en_US' === $locale ) {\n. > Are they not the same?\nIt's less apparent with your conditional. Mine is more readable.\n. I'd recommend erring if a non-en_US locale is provided. If someone is providing a locale, then they should receive an error that the nightly isn't provided in the locale, not have it unexpectedly work and download the wrong file.\n. Oh, given the cache expiry is set to 6 months, we probably shouldn't be caching the nightly build. Sorry I missed that before :(\n. Typo: avialable\n. Can we pluralize this message when multiple roles were affected? Also, I think it might still be helpful to include a summary count of roles that were affected vs those that weren't.\n. What's happening with this indentation?\n. Is this message correct? If only one capability was removed originally, shouldn't the message indicate that 1 capability was restored?\n. Can we make this success message:\nSuccess: 1 of 2 roles reset.\n. Can we make this success message:\nSuccess: No roles needed resetting.\n. Can we make this success message:\nSuccess: Role reset.\n. Can we make this success message:\nSuccess: Role didn't need resetting.\n. > Do you want to show message in case of 0 capability changed ?\nSorry, not sure I follow. Can you clarify?\n. The former, because the message is more explicit.\n. > You want Restored 10 capabilities to and removed 9 capabilities from 'author' role. this message to be skipped and add Success: Role reset. ?\nNo, the output should include both messages. My comment is to the specific line.\n. Can you make this test a bit more explicit? Given guid is skipped by default, I don't think this will ever fail.\n. You should use WP_CLI\\DocParser here.\n. \"\\n should be PHP_EOL\n. > should return argument description, no?\nYes, it should.\n. Is this key actually used for anything, or could we always just add to the array?\n. Right, but couldn't we instead do:\n$events[] = (object) array(\n. Why did you need to create this method? Seems like a lot of code to internalize \u2014 not sure if it's a great idea.\n. > Here I didn't found any WordPress core function to fetch the default capability of the role.\nOh, sad :(\n\nThere is one another way without using this method, we can add the removed capability after resetting role for dry-run. But I was not sure if that's a good idea because I think in dry-run we should not do any changes in the database.\n\nI agree.\nI'm going to focus on getting v0.24.0 out the door for the next couple of days, then I'll spend a bit of time thinking about how we can get around this issue.\n. Does this exist as a step?\n. Nope:\n\n. <user> is optional, as is [<path>]. Really, only <host> is required.\nIs [:<pass>] actually supported?\n. This should be [<user>@], because the @ isn't necessary when the user isn't included.\n. Can we call this \"Package language\" (note the lowercase \"language\") for consistency with the other keys?\n. Don't you add this to your .zsh_profile ?\n. > does that not agree with my instructions here?\nI don't think it's communicated in \"you may need to do the following\".\nIt would be more explicit as: \"you should add the following to your ~/.zsh_profile\"\n. Nice!\n. Can you add an ## OPTIONS heading here, as the other commands have?\n. \ud83d\udc4d  Good description.\n. Does this need to be a class variable? And, to avoid negative conditionals throughout, could we name it something like $alter_database?\n. @rahulsprajapati I'm still hesitant about internalizing this array of roles and capabilities because I'm concerned it will likely get out of date.\nHave you thought of any other ways to produce the same effect? If not, I think we might want to punt on this.\n. > Let me know your thought. :)\nI think we should just punt on this enhancement for now. Would you be opposed?\n. This is a bit too blunt.\nWe should specifically check the repository definition, and only replace http://wp-cli.org/package-index/\n. Instead of depending on /tmp/, can't we just put WP_CLI_PACKAGES_DIR in a directory relative to the test directory? This way, we don't have to clean up the temp directory at the end of the test run either.\n. Is it possible to get the value via the JsonManipulator class, instead of having to decode the JSON string again?\n. If the package directory is in package-directory off the test directory, then you can just place composer.json there with:\nAnd a package-directory/composer.json file:\n. Can we clarify \"an old package index url\" as \"a http package index url\"\n. If you place the composer.json in package-directory with ^, this step is unnecessary.\n. Can you improve this test to:\nThen STDOUT should be:\nAnd verify the output is what's expected?\n. > Does this seem OK?\nYep.\n. @szepeviktor Did you mean to post ^ ?\n. Ok. That's off-topic for the pull request, and not really appropriate for the project. I'm going to delete the comment. Please keep conversations on-topic.\n. > Although, there's really no need to put it into a sub-directory, we can just treat the \"empty\" directory as the package-directory itself.\nThis seems like it may cause problems.\n. Can we include an assertion that the \"Updating package index repository URL\" string is a part of the output?\n. Can we move this to its own file? user-session.php\n. Rather than having a dedicated subcommand for this, could we instead make this destroy --all? See #3116\n. This should be:\n```\n: Render output in a specific format.\n\ndefault: table\noptions:\n  - table\n  - csv\n  - json\n  - count\n  - yaml\n\n``\n. See #3296\n. @srguglielmo Here's how I set up the tests, part one.wp_mail()writes to STDOUT...\n. @srguglielmo ... then we capture the number of email sends out ofSTDOUT.\n. Do we need to make sure the returned terms are ordered by the order they were originally supplied?\n. I think it makes more sense to put this in theget_initial_markdown` method\n. > I am not sure what is the best path here.\nI think this is why I didn't get around to fully implementing the feature previously. I'll give it some thought.\n. This can be $binding['alias']\n. This can be {{#alias}}\nThe # in Mustache is an operator for checking whether the variable is set.\n. Does $progress ever remain empty?\n. ... because, if it does, then we'd end up with an empty space before \"Couldn't\"\n. @ocean90 Looks like the trailing slash needs to be removed from this test.\n. Why does --port $DB_SOCK_OR_PORT -h $DB_HOSTNAME need to be supplied if we're already including $EXTRA ?\n. Why'd you remove the period here?\n. \ud83d\udc4d \n. This needs the same namespace fix.. @ocean90 the file should exist step doesn't accept regex for the filename, afaik.\nYou could instead run grep on the translation cache dir to verify the files are there. Pseudo code:\nWhen I run `ls {SUITE_CACHE_DIR}/translation | grep core-default-`\nThen STDOUT should contain:\n  \"\"\"\n  en_AU\n  \"\"\"\nAnd STDOUT should contain:\n  \"\"\"\n  en_GB\n  \"\"\". Where did you get this regex from?. For precision, could we make this an explicit string check?\nif ( in_array( $slug, array( '.' .... Can you add the following arg documentation for this command?\n```\n[--database=]\n: Use a specific database. Defaults to DB_NAME.\n[--default-character-set=]\n: Use a specific character set. Defaults to DB_CHARSET when defined.\n[--=]\n: Extra arguments to pass to the MySQL executable.\n``. Coding style. This is the test case that needs to pass, which does with the committed implementation, but then thetestArrayLoop()test fails.. Don't we need a test that verifiesdate_formatandtimezone_stringaren't set when--set-date-timeisn't passed?. Let's only passarray( 'set-date-time' => $set_date_time )when it's a truthy value.. Can you submit a PR to wp-cli.org with this file? https://github.com/wp-cli/wp-cli.github.com/tree/master/behat-data. Let's rename this toWP_CLI_TEST_DBHOST`. > Should then we make the sister code in restful also use WP_CLI_TEST_DBHOST?\nYes, although RESTful CLI will be affected by https://github.com/wp-cli/wp-cli/issues/3826 in that the test suite will be a Composer dependency, instead of copied into place.\n. Can we use PHP_EOL instead?. @access public is how some utils end up here: http://wp-cli.org/docs/internal-api/. Is it necessary to move this code? If not, can you revert the changeset so that it's possible to easily follow the file history?. This classmap shouldn't be necessary anymore.... @schlessera weren't. > Shouldn't this be run together with one of the other environments to save one iteration?\nNo. Breaking them out makes it easier to see whether phpcs failed or phpunit failed. Jobs are cheap; developer time is expensive.. What if we were to create a feature/bootstrap.feature file? I think breaking things apart is typically easier than using a bunch of tag annotations.. For general information (don't think it actually needs to be changed), you can also pass --format=count to wp post get. Ditto any other command that supports --format=<format>. Could we rename this file to utils/wp-cli-rpm.spec, so we don't need to rename it in each release?. This should be:\n\nThe command line interface for WordPress. Should this be 0.6.x-dev ?. I think this would be better as a new Phar with (the same version|version \"([^\"]+)\") so it's more literal in the tests. Will this work for Package Index commands too?. Is \\w sufficient for super-admin-command or search-replace-command ?. This doc would be more helpful if it explained why the autoloader existed, in addition to what it does. Does this work in PHP 5.3?. Why do we need this if we already have a utility function for it?. This approach will cause the admin password to never display. See later on:\n\nif ( empty( $admin_password ) ) {\n            WP_CLI::log( \"Admin password: {$result['password']}\" );\n}\nThe expected behavior is that Admin password: displays if no password is provided.\nYou'll need to modify your logic to meet this expected behavior. If this doesn't fail tests, you should also add a test for this.. I think we should use PHP_EOL over \\n for best cross-platform compatibility.\nDo we have other examples of using two line breaks, or do most errors have only one?. Ditto above. Also, generally, which do you think reads better?\n$ wp cl\nError: 'cl' is not a registered wp command. See 'wp help'.\nDid you mean 'cli' ?\n$ wp cl\nError: 'cl' is not a registered wp command. Did you mean 'cli'? Or, see 'wp help'.. Does this $threshold variable need to be assigned?. Ditto above re: variable assignment. Should we add unit tests for this utility?. What about my comment from yesterday?\ndanielbachhuber [1:11 PM] I wonder if we should set a `WP_CLI_PHAR_PATH` in `php/boot-fs.php`\n[1:12] PHP can change the working directory, which would make `getcwd()` incorrect. > The actual paths you want to use depend on the package you're in, and how the packages have been included. So, I'm not sure we can reduce this problem to 1 single constant.\nThe packages care about the base path for the Phar file. Setting a WP_CLI_PHAR_PATH at the beginning of the Phar execution will provide this value, more consistently than getcwd() can.\n\nIf this works as expected in all scenarios, then it works across the board for getting rid of all the \"three-different-ways-of-getting-a-path\" issues.\n\nWhat if my script calls chdir()?. Yes. Why not use __DIR__?. > This gives us the bit in front of the phar name, and it even works with different phar names.\nI know. I'm just afraid of getcwd() sometimes producing a different value than we expect.. @schlessera Any ideas why this passes on Travis, when it's expected to fail?. Nevermind \u2014 user error :). Isn't this going to break tests for packages because they don't have wp-cli/phar-build as a dependency?\nI'm not convinced make-phar.php should be tracked in the wp-cli/phar-build repo, given some packages need to use it to build the Phar.. > What use case do you think would currently break with this change?\nAny package tests that have to build a Phar.\n. Ok. There's a semantic difference you need to apply.\nWhen the test is expected to fail, you'll need to use When I try instead of When I run, and Then STDERR instead of Then STDOUT because error messages are written to STDERR. I wonder how accurate of a statement \"Check value of 'DOMAIN_CURRENT_SITE' into wp-config.php.\" is.\nIs an incorrect DOMAIN_CURRENT_SITE the only reason ms_site_not_found can be triggered, or are there others too?. @jeremyfelt @felixarntz I'd love your thoughts on ^ if you have a moment.. @jeremyfelt Do you think the current error logic is correct, or is there different logic / error messages that you'd use?. This scenario will need to define an invalid value for DOMAIN_CURRENT_SITE in order for the error to occur.... Why is this being removed? It's specific to transforming $template_name, not resolving the vendor directory.. Hah. I had meant to do this abstraction when WP_CLI_VENDOR_DIR originally landed.. Did you mean to include this script?. Did you mean to include this script?. \ud83d\udc4c . This should be an environment variable, not a global parameter.\nGlobal parameters conflict with local parameters (see #1939 for an example). At this point, we pretty much should never add a new global parameter.. I'm not a huge fan of functions starting with maybe_*, because it means their behavior is unpredictable.\nCould we instead rename this to something like force_env_on_nix_systems?. Conditions within tests are somewhat dangerous, because you can never be certain which tests are actually running.\nShould we allow for an environmental override in is_windows(), so we can have our tests cover both scenarios by setting the environmental variable?. I'd prefer an environment variable over a test argument.\nAn environment variable makes it easier for an end user to never accidentally pass an argument.. 8deb8aab. Rather than spawn a full new job for this, which will add substantial time to the overall build, can we instead put this into the existing PHP 7.1 job (possibly as a second Behat run which only runs @require-opcache-save-comments)?. We should use PHP_EOL over \\n. Ditto PHP_EOL. We use PHP_EOL consistently elsewhere, so we should use it in this case too.. > it makes the PHP 7.1 job very long\nOnly running the one scenario for this test?. > Do you mean just run it on a subset of the features? (The tag @require-opcache-save-comments is only to avoid a test.)\nYes \u2014 you can use the tag mentioned to only run that test.. Sorry for the confusion. To better communicate, I created a PR with my suggested changes: #4163\nTravis isn't running for some reason; I think because it's a PR against a branch.. @gitlost Sorry for even more confusion. I think the PHPUnit tests are sufficient for this change. We don't need to make modifications to the Behat test suite, or run Behat tests specific to this change.. Ok. We can call this debate still undecided for now.. Nah, those are fine as is.. Is this meant to still be commented?. Not sure what I was thinking... removed in ba33e14ce76d1e65c98d3f0b9727d03520206636. We should remove the Symfony dependency, see https://github.com/wp-cli/wp-cli/pull/4209#issuecomment-314093447. I've done so in 5d4acf18. Why do you think it would be better?. Thanks for clarifying, @chriszarate.\nAt this point, my preference would be to keep the behavior as it exists. The original decision was intentional: mimic the behavior of ssh'ing to a specific directory, and then running the wp executable. This lets you use a project-specific wp-cli.yml if you have multiple projects on the server.. Let's keep $this->auto_check_update() in please, until we discuss further. This is WP-CLI's auto-update mechanism. It's non-trivial to disable it, particularly given we're so close to a release date.. This seems like ambiguous behavior. Is there a better way to implement it?. How can we get to 100% confidence?. Why is this removed?. What do you think about changing:\n\nSee 'wp help'.\n\nTo:\n\nSee 'wp help' for available commands.\n\nI think it adds more clarity to the message.. If we definitely know this isn't a WordPress install, we don't need to include If the command 'non-existent-command' is in a plugin or theme, pass --path=path/to/wordpress. Does this scenario need Given an empty directory ?. This seems to be missing a Given too.. Ok, then we can remove the nonsensical error message.. Can you remove this, please, and open an issue to discuss changes to the update process before making them?. This can be removed for now.. Can you clarify in greater detail? I'm hesitant to remove this without a clear articulation of what this was doing before and why removing it won't cause unintended consequences.. @gitlost Just to confirm, this is only a problem for WP 4.6 and lower?. Ok. Can you open a core Trac ticket to see about getting this resolved upstream, and link to it here?. To keep Process abstracted from the test suite, could tracking run times instead be a property of the instantiated object?. Or, does this even need to be an option? Is there any harm in always tracking?. Shouldn't we always output to STDOUT? To my knowledge, Behat doesn't ever write to STDERR, so it would be unexpected to have test times logged to STDERR. > Actually, this is an issue for cmd-dump as well\nHistorically, cmd-dump has only been used for exporting bundled command definition to documentation, so it hasn't actually been an issue.. We should remove this argument definition, as it's not a pattern we have elsewhere.. Needs another space after this heading.. Each of these examples should have some explanation:\n```\nThe \"site delete\" command is registered\n$ wp cli has-command \"site delete\"\n$ echo $?\n0\nThe \"foo bar\" command is not registered\n$ wp cli has-command \"foo bar\"\n$ echo $?\n1\n``. I don't think we should accept \"wp\" to this command.. Why do you need to generate a new Phar here?. 5f46b21c. I think it's too magical (also known as unexpected) to interpret-` as STDIN.\nFor the purposes of https://github.com/wp-cli/entity-command/issues/96, we should simply read STDIN to memory, and then parse as CSV.\n. This is going to merge conflict with https://github.com/wp-cli/wp-cli/pull/4389. Is this a logically equivalent change?. Could we get a plain phpunit test for this too? There's an existing TestDocParser class you can add to.. To make these tests more precise, could we have each method var_dump( function_exists( 'home_url' ) )?\nWith this approach, we'll know definitely whether WordPress has loaded or not.. Should we enforce any specific characteristics of the class (e.g. no defined methods, must extend some base class, etc.)?\nAlso, what happens if this isn't a class? WP_CLI::add_command() accepts any callable.. Ah :). Good. Thanks for this.. Can we perform this check where run_check() is called, instead of modifying the Process class itself?. Yes. Given this change is specific to the test suite, it makes more sense to include it in the test suite.. > Hmm, that would make the code a bit yuck, which usually isn't a good sign.\nWhy?\n\nIs the BEHAT_RUN check not exclusive enough?\n\nIt's hacky. It's not the Process class' responsibility to adapt behavior based on some environmental flag. It's Behat that wants to change the behavior of STDERR.. @gitlost But Search_Command runs after WordPress has loaded, which means WordPress would be loaded for wp search-replace?. Oh, I see what you're referring to:\n\n. I think we can / should accommodate in Runner. Doing so now.. 7be7c4d2df2bd6d31656800eff99ba80e3d13eb3. @schlessera Any ideas why registering a core safe-update command requires also registering the command on the find_command_to_run_pre hook? It doesn't seem to be safely deferred and instead produces this error:\n\n. Weird. Yes, this was running latest master.\nI wonder if there's some race condition involved. Although, it reproduced consistently for me at the time.\nI'll close for now and reopen if I run into it again.. What about:\nget_temp_dir() . 'wp-cli-' . uniqid( \"wp-cli-extract-from-phar-\", true ) . \"-$fname\";. Ah, I see:\nlocal \u279c  wordpress-develop git:(master) wp shell\nwp> $fname = 'router.php';\n=> string(10) \"router.php\"\nwp> 'wp-cli-' . uniqid( \"wp-cli-extract-from-phar-\", true ) . \"-$fname\";\n=> string(66) \"wp-cli-wp-cli-extract-from-phar-5a8b0566008283.78459585-router.php\". Updated in 847de9a3. wp_parse_args() isn't necessarily available yet. You'll want to use array_merge() instead.. Can you include mention of this new additional argument?. ",
    "nb": "It would be really cool to make it a PHP component like this:\nhttp://blog.stuartherbert.com/php/php-components/\nIt gives the project a decent structure, allows it to be very easily published on a PEAR channel on github. It's really easy to install wp-cli, and more importantly, upgrade it via PEAR.\nAlso, if we convince the php-cli-tools guy to do the same we can have the library as a dependency and not clutter the repo with a external module.\nAs a side note, phix, the tool used to deal with the component is worth looking at, since it also offers extensible CLI commands.\n. @scribu, I would be happy if the branch is pushed here, too, so that I can follow :-)\n. 2011/10/12 Cristi Burc\u0103\nreply@reply.github.com:\n\nSure; I just haven't started yet. :P\n\nI saw that there are no branches in this repo and you haven't forked\nit and assumed all brnaches are usually private.\n. My idea was to be able to hook versions in the command.\nNow thinking more of it, it makes more sense to have an info command (like phpinfo()), which can give you various information about the install: versions, paths, stats, caches, stuff like that.\n. Your arguments make sense. My main issue was the annoyance when I work on my local install and I found another solution:\nalias wp='wp --path=<path-to-local-dev-root>'\nIf I need to override it for some reason I can always add an extra --path, wp --path=<other-root> will resolve to wp --path=<path-to-local-dev-root> --path=<other-root> and the later --path will take precedence.\n. Thanks, it works now.\n. While Ctrl+V would definitely work, it\u2019s one shortcut too many :-)\nIn most of the cases when I want multi-line input, I am trying to execute a single, but multi-line statement: a function, a foreach loop, an if, a class, even. Ideally, I would like to be able to finish my statement, before the shell tries to execute it.\nA few options:\n- Expect more input input while we have unclosed delimiters ((/), {/}, if/endif, foreach/endforeach, etc.), evaluate only if everything is closed.\n- Be even smarter: detect parse errors in the middle lines and thus prevent users from writing something long, which has a parse error in the second line. Python does that. This is a bit trickier, but the PHP parser is our friend.\n. Wow.\n. I am cool with adding actions and filters, I almost haven't thought how it will be extended, so I almost haven't added actions or filters.\n. Not much new. The basic interface probably won\u2019t change. You can track it on core trac. \n. popen might help.\n. ",
    "conatus": "LOL - I was trying to be grown up and not mention the obvious - ;)\n. Already on it!\n. There we go, dunno if the spacing is to satisfaction, but at least it is clean enough to repair if needs be.\n. Would it be a waste of time to backport some of these features to a lower version? While stuff like the menus and the progress bars aren't used now, I can see them being used in future. For example, it would be quite useful to be able to browse the plugins repo with menus on the command line.\nYes to namespaces being ugly and difficult. If something as rich can be found, I think it would be a good move.\nBefore the existence of wp-cli, and in all the internal scripts I produce (simply because I haven't had the overhead to port), I have been using a improved version of this class - http://docs.fuelphp.com/classes/cli.html - FuelPHP command line library. You can find it at https://gist.github.com/1751069\nI reckon borrow some ideas from php-cli-tools and adding stuff in, this could flower into a robust library which could power wp-cli. Or take code from another library.\n. Nope I'm not. The latter plan sounds far better and was my real suggestion.\n. ",
    "markoheijnen": "I am just wondering when if you have access to the server you can also create the database.\nMost sweet case is that it also can pre download/install plugins.\n. @hotzeplotz What is the current status of this? I'm more then happy to help out.\n. Can't we add this to http://packages.debian.org/?\n. I have no experience but someone at my company (1&1) has. I will join the group and see what I can do next week.\n. I will have a meeting with our Debian contributor next week to see what is possible\n. Just to be sure what are all the dependencies? To me Composer is none since that should be removed anyway and a lot of dependencies get packed with WP CLI already. So what I'm now seeing is that the dependencies are PHP 5.3.2 or later and curl.\n. I guess making it a requirement wouldn't hurt. I guess someone could disable all HTTP connectors since you do need something to download the packages\n. But there can be a scenario that none of them are available right? otherwise I don't care much and it shouldn't be a hard requirement\n. I was just thinking about this. What are the issues you now see for this having to be in?\n. I will look into this tomorrow and see if I can manage to get something working.\n. Language packages still don't work yet because of the infrastructure. I'm currently writing code for it and see how far it goes. We can always call GlotPress directly ;)\n. There is a Language_Pack_Upgrader class but it's hard to say if and how it works without an endpoint.\n. I'm curious what the roadmap will be and when it will be working. And if you guys need help I got the time to help out.\nIf it takes a while I have no problem to build something myself and host the zip files on a server and then as main target only the core files.\n. Seems like that with --force it doesn't use the cache file.\n. The plugins are cached. If I do wp core download then this is what I see when running 0.14.0-alpha\nDownloading latest WordPress (en_US)...\nSuccess: WordPress downloaded.\nNot sure yet why it doesn't mention the WordPress version\n. That is how? I started with:\ncurl -L 'https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar' > wp-cli.phar\n. I do see my mistake now. That build is from 2 months ago.\n. That did the trick. Thanks.\n. Ah, found why it was failing. recurse-objects is by default false but the unit tests is default true. Unsure what the right value of recurse_objects is.\n. See the PR request when it got added: #951.\n. Using wp site url 1 return Error: Site  not found.. So I assume that WP-CLI is requesting the site on every request and because of that action ms_site_not_found is always fired. \n. Then I do get the output. Will check if it's WordPress trunk, my project or PHP 7.\n. My bad, Seems that I never tested WP-CLI correctly after I changed wp-config.php to load the settings from the parent folder (outside www). So it doesn't guess the main url.\nThis would mean that things could break when people set things up with local-config.php which has the settings. But for now a no issue.\n. ",
    "Japh": "Any chance of optionally prompting for a DB password for those of us too paranoid to type passwords in plain text on the command line?  :)\n. Hey @ryanduff, how did you get on with this one? Do you have a pull request waiting to be submitted?  ;)\n. Now with tests!\n@scribu Apologies for the fdc9689 separate commit... is there a better way I could have done that?\n. Good idea. Especially as it also doesn't work with posts, so that could use essentially the same test.\n. For no good reason other than that I started with the generate code for posts! I'll remove that now, seems unnecessary.\n. ",
    "Alexandervn": "There is also another project, the Wordpress Project Creator: https://github.com/boyvanamstel/Wordpress-Project-Creator. It only works with Git repositories.\n. ",
    "kevindeleon": "I would agree with scribu...man pages seem like the best solution.\n. ",
    "PerWiklander": "There must be a Markdown 2 Man thingy available... yes:\nhttp://rtomayko.github.com/ronn/ronn.1.html\nAnd about the version \"problem\", what's wrong with: http://.../wiki/0.5/ ?\nThat's something I think the WordPress guys should've done with the codex a long time ago BTW. Why would I want to read about what might or might not work in version 2.3 when I have just installed version 3.3.1?\n. They would need to be installed to do man my-wp-command but not to do wp man my-wp-command. This could have the alias wp help my-wp-command. Just a thought.\n. Ok ok, I guess this was more of an idea than a concrete actionable issue. I\u2019ll go ahead and see if I can create a bash wrapper that does parts of this without changing anything in wp-cli.\nAs for the aliases, thanks, but that\u2019s like creating the alias\nalias git-add-my-file='cd ../../ && git add path/to/my-file\nbecause the git command could only be run in the project root.\n. ",
    "getsource": "Would ya'll appreciate work on this, or is it already in progress (and would be duplicated effort)?\n. Cool, thanks for the note!\nI'll do some work on this, and once I'm to some percentage, I'll find a way to build it into that wiki page.\nHadn't noticed for whatever reason that \"in-progress\" commands were listed there.\n. Theme updating added; install is next.\n. Yep, indeed.  Thanks muchly!\n. Same issue here on wp-cli trunk, and WP 3.2.1 attempting upgrade to 3.3; Debian Squeeze; PHP 3.3.X\nHaven't been able to track down the cause yet, but will update here if I find it.\n. Sure, can do.\nAre you suggesting that wp plugin update should show the same output as wp plugin status (only perhaps with the plugins that have available update only?), or do you have specific a information/format that you'd like to see with the output?\n. Is this more what you were looking for?\n. Yep, no problem!\n. Yes, yes it does =/\n. That'd be great.  Had thought, of course that it'd be better to have less common code, but presumed exactly how that happened would likely be better up to you, since it'd be a significant design change.  Let me know if you'd like assistance in the effort.\n. It looks like core just passes the file it gets from File_Upload_Upgrader directly to $upgrader->install().\nSince in this case the files are coming in directly locally (or via http, since WP handles that as well by default), does it buy us anything substantial to use File_Upload_Upgrader beforehand instead of the current method?\nWith regards to the second note, that's true.  I'll give moving --file out into WP_CLI_Command_With_Upgrade a go.\n. Thank you!  Due to that hint, was able to get --activate working with files.\nNow working on abstracting things out.\n. Hrm.  Have install_from_file now abstracted into WP_CLI_Command_With_Upgrade, which allowed me to add file/.zip support to plugins.\nHowever, it's a bit shoehorned in due to the extremely different way that plugins check status in wp plugin install (and to some extent, within core itself).\nAny suggestions as to how to either better integrate install_from_file into wp plugin install, or how to further abstract the install process without losing the pre-install plugin status provided by install_plugin_install_status() would be appreciated.\n. Exactly.  The goal is to upgrade from a cached copy of the download (thus not flooding wp.org), but still take advantage of WP's other magic for upgrades.\nOkay, cool, thanks.  I have this mostly formed and will get a pull here shortly for an initial draft.\n. It's the case that in our situation, whether WordPress attempts to remove the package or not doesn't hurt the upgrade process, but I completely agree that it isn't expected behavior.\nAttached commit fixes this issue by adding a class to leave packages by default for Core_Upgrader\n. Agreed.  Suggestions as to how to best accomplish this?\nI'd thought about this a bit, and the naive way would be to guess the proper ZIP name to grab from wordpress.org per the naming conventions.\nHowever, I'm currently unaware of a good way to request or trick the API into providing the proper upgrade file given a version number, though (which would seemingly be the more proper route).\n. Thanks for the note -- it looks like even if we request an earlier version via the method the Beta Tester plugin is pulling test versions, the upgrader sends us the newest version (rather than the newest version in that particular version branch/tag).\nUnless there's an undocumented API for requesting a specific version (rather than saying \"hey, I have X version, what's the newest now?\"), or I'm missing something from the code you referenced, I think we'll likely just have to use a naive update method if we want to allow --version=X.Y.Z without a package specified.\n. Added the functionality in the same manner as wp core install.\nAt the moment, it duplicates two lines.\nThinking as to a good way to abstract out the functionality from wp core install in a way that makes sense, but haven't yet come up with a perfect solution, since some of the code there is very specific to wp core install. \nIt might be the case that since the duplication is < 3 lines, it's better this way for now.\nSince it was simple to do so, also added a --force flag.\nThis is because I've had situations where an update test is helpful, and reverting to specific older versions can be painful.  If you think it's too dangerous, I can get rid of it.  As long as the user doesn't \"update\" to earlier than 3.0, they can use wp core update to return to the newest version.\n. Doesn't use core's repair.php because it required a nonce up until 3.4.\n. Sure, no problem!\n. Not terribly sensitive, but shot you the specifics via email.\nThis will also resolve an issue that might occur if multiple downloads are happening simultaneously.\n. Sure, that sounds like a good idea.  Will probably have to go with tar in this case, since unzip doesn't seem to like being piped a file from curl.\n. Does it work any better if you change to using mod_rewrite to serve cached files?\n. The only concern I have about the \"let's rely on others or core to set WP_CACHE to false\" approach is that part of the primary purpose of wp-cli is the upgrade both plugins and core.  In these cases, wp-cli will fail to upgrade, and will never get to the point where it will work without manual intervention.\nPerhaps we could provide a flag to force it, with the foreknowledge that it will toss a warning if it fails?\nIt is still an option to force the define via a config file including PHP, but that's a bit of a significant workaround.\n. Nice!\n. Just my opinion, but I would much prefer to see a --json support rather than --porcelain.\nWill probably end up adding one to these commands at some point if it doesn't get added as a result of this pull request\nNot that it's bad to have multiple output types, but JSON seems more useful for parsing.\n. Hmm.  To me, --all makes sense, since there are potentially other\noperations we may want to do to \"all\" rather than one particular one, and\n--all makes it easy to standardize.\nMaking a change to all posts would be one example.\nCan you explain a bit more on why you think it's a good idea to concatenate\nthe arguments?\nOn Oct 11, 2012, at 7:27 PM, \"Cristi Burc\u0103\" notifications@github.com\nwrote:\nA seemingly minor changes, but makes the parameters clearer.\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/wp-cli/wp-cli/issues/180.\n. Correct:\n- Database\n- wp-content\n- wp-config.php (probably -- important if we want the same settings for restore as backup, and don't want to store additional data elsewhere)\nAlthough, thinking that it would be a good idea to have the option to also backup the entire install's directory, since that will be necessary for some users' setups to function properly immediately after a restore.\nAnd yeah, if it turns out that this seems more like a community package, that's fine as well.  That said, it seems like it'd be really cool to be able to rely on dropping a compressed version of your site on your server, and if you have wp-cli installed (either yourself, or by your host), you're set for getting your site active.\n. Right, the idea here would be to have something that can be relied on -- without any sort of additional plugins necessary -- directly from wp-cli.  It would be able to use wp-cli's existing infrastructure for importing/exporting the database, and other functions required for doing this properly, and not have extras like UI or autobackup functionality included.  \nI feel like we can come up with one canonical implementation -- especially if we allow for a complete backup -- that would allow users to reliably do the entire transfer process with wp-cli (minus transfer of the compressed archive).\nAt the moment, you can install from scratch using wp-cli quite well, but transferring an install is still a bit of a pain.\nThis would allow us the option of including useful helpers like proper URL transformation in the database in optional params as well (because wp-cli has a lot of the utilities you'd want in a backup plugin included already).\nIf it looks like one of the existing, GPL, commands available has most of an approach we want to use, I don't mind going with that.  However, most of what I've looked at thus-far does more than what we'd probably want for a minimalistic and command-line centric approach at backup and restore.\nAt a quick glance, BackUpWordPress looks to be missing a restore command, and BackWPUP looks to be mostly job management, rather than a direct \"Backup\" and \"Restore,\" so there's still ground to cover before we have an available complete backup/restore via wp-cli (as far as I'm aware).\n. > Your approuch, is that the kind of creating an \"image\" of the current files located on the server or one that relies on plugin and core versioning numbers and creates a clean install after restoring? \nIt'd be to create a compressed archive of the files on the server.  Either the entire install, or just wp-content + database.\n\nIf I can refer to your word, compressed version, then I think you are aiming at a kind of image creation method. Si?\nEdit* I think, looking from a shared hosting perspective, one should keep in mind that somebody has altered some core files or plugin file. So a wp core download isn't the solution.\n\nI'd not aim for compatibility with anyone who has modified core, since they just shouldn't do that.  As far as plugins are concerned, we should just back up the entire wp-content directory, including plugins and themes.  We can't assume that they're all on the .org plugin repo.\n. > Just wanted to note that code that goes into WP-CLI needs to be MIT licensed.\nSure, thanks for the reminder on licensing.\n. To write something like this as a community/extended command, #335 would be necessary (at least, the specifying of commands that can be run prior to the loading of WordPress).\n. It looks like this is covered in #335.\n. The way I have restore implemented, anyway, is that it doesn't ever need to have WordPress loaded to begin, but then loads parts of WordPress later (so, it does use WordPress' functions -- but it does not require them to be available when starting the command's run).\nIf it helps, the in-progress code works great when hooked in here, similar to how core download is:\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L305\nIn this case, I'm specifically having just one subcommand (wp migrate restore) load/run early, since \"migrate backup\" benefits from having WordPress loaded first.\n[edit] I hadn't yet posted code from the above restore command because it's in-progress, and not completely useful without hacking WP-CLI.  If it turns out it'd be helpful, I can post it earlier anyway. [/edit]\n. Thanks!  Will test and let you know!\n. So, it looks like I'm going to have to refactor a bit due to the (unrelated and positive) changes in getting rid of setup-config (likely it's just the lack of setting those variables during config).\nBut!  That's certainly doable.  This looks to do the trick, and successfully allows one subcommand (backup) to run with WordPress, and restore to run without WordPress present.\n. Sweet, thanks!\n. I can certainly work on a Behat test.  To begin, here's a plugin that, if you activate, then attempt:\nwp search-replace \"I have the things\" \"I lost the things\", it will cause PHP to fatal:\nPHP Fatal error:  Call to private GS_WP_Private_Singleton::__construct() from invalid context in <snip>/wp-cli/php/utils.php on line 226\nSample Plugin Here\n. Thanks!  Clearly clone was easier here, but I wanted to do it \"right,\" but haven't been able to have the time to sit down and get through it yet, since it's clearly a larger change.\n. Sorry I missed the ping before.\nAs a comment, no, most users at DreamHost cannot update the system-wide install (or directory) of WP-CLI on a server because most of them are on shared hosting, where this is not an option (they could do so on a VPS or dedicated, of course).  They can, also, of course, install their own user-level copy if they wish.\nIt seems like making the packages server level at first, as long as user-level is in the future plans, is fine here.\n. I'm catching this after the fact, but am not comfortable at all with this being opt-out rather than opt-in, both for reasons of predictable performance and privacy-by-proxy (users at hosts, for instance).\nIf it's going to get released this way, please do so very loudly. Most folks that use WP-CLI probably don't follow these tickets.\n(Daniel requested that I note this is feedback from DreamHost -- I'm the Director of WordPress Strategy there). Had initially done it that way so that a user could run wp theme install --file some-filename.zip, but it does seem more idiomatic to do it in that way.\n. Went the second way (.zip rather than requiring --file), but left commit history with --file=file.zip just in case we change our minds.\n. ",
    "nodesocket": "xcache.var_size is indeed set.\n```\n[xcache-common]\nextension = xcache.so\n[xcache.admin]\nxcache.admin.enable_auth = Off\n//xcache.admin.user = \"admin\"\n//xcache.admin.pass = \"\"\n[xcache]\nxcache.shm_scheme =        \"mmap\"\nxcache.size  =              100M\nxcache.count =              4\nxcache.slots =              16K\nxcache.ttl   =              0\nxcache.gc_interval =        0\nxcache.var_size  =          16M\nxcache.var_count =          4 \nxcache.var_slots =          8K\nxcache.var_ttl   =          0\nxcache.var_maxttl   =       0\nxcache.var_gc_interval =    3600\nxcache.test =               Off\nxcache.readonly_protection = Off\nxcache.mmap_path =    \"/dev/zero\"\nxcache.coredump_directory =   \"\"\nxcache.cacher =               On\nxcache.stat   =                 On\nxcache.optimizer =           Off\n[xcache.coverager]\nxcache.coverager =          Off\nxcache.coveragedump_directory = \"\"\n```\n. ",
    "willmot": "This is integrated into our http://github.com/humanmade/hm-dev/ plugin (Both joehoyle and myself work for Human Made).\n. BackUpWordPress adds a backup command.\nrestore is also planned.\nhttp://wordpress.org/extend/plugins/backupwordpress/\nhttps://github.com/humanmade/BackUpWordPress/blob/master/functions/wp-cli.php\n```\nusage: wp backup [--files_only] [--database_only] [--path] [--root] [--zip_command_path=] [--mysqldump_command_path=]\n --files_only                   Backup files only, default to off\n --database_only                Backup database only, defaults to off\n --path                         dir that the backup should be save in, defaults to wp-content/backups/\n --root                         dir that should be backed up, defaults to ABSPATH\n --zip_command_path             path to your zip binary, standard locations are automatically used\n --mysqldump_command_path       path to your mysqldump binary, standard locations are automatically used\n\n```\n. I added details to the wiki\n. Nope, ran into https://github.com/wp-cli/wp-cli/issues/1020 and was debugging. Happy for this just to be closed if it's not worth the merge.\n. Fix for this will be in next release of BackUpWordPress\n. ",
    "matiskay": "It's already done! https://github.com/andreascreten/wp-cli/pull/38\n. That's a pretty nice idea. I was checking $WORDPRES_ROOT/wp-admin/setup-config.php and we have to pass data using POST method, curl could be helpful in this case. Also, we can use sed and wp-config-sample.php to generate a wp-config.php. I use the following code to generate a wp-config.php using bash\n``` bash\n  cp $WORDPRESS_PATH/wp-config-sample.php $WORDPRESS_PATH/wp-config.php            \n# Setting up the configuration file                                            \n  sed -e \"s/database_name_here/$PROJECT_NAME/\" \\                                                                                                                        \n    -e \"s/username_here/$MYSQL_USER/\" \\                                       \n    -e \"s/password_here/$MYSQL_PASSWORD/\" \\                                   \n    $WORDPRESS_PATH/wp-config.php > $TEMP_FILE                                  \nmv $TEMP_FILE $WORDPRESS_PATH/wp-config.php \n```\nThe problem with this approach is that doesn't generate any Authentication Unique Keys and Salts.\n. You don't need to define $pipes because it will be create it. http://php.net/manual/en/function.proc-open.php\n. Great idea, so I can append options to that connect string.\n. ",
    "joeguilmette": "Care to share your solution?\n. Are there any other organizations that can server as a model?\nI can't think of any WordPress projects that are funded by donations - in fact all I can recall are examples where this model has failed. Outside of WordPress there are of course many projects supported by donations and pledge drives and so on.\n. ",
    "oviliz": "+1 to @joeguilmette request...\n. In the command line as sudo, where I should put the --allow-root?\nwp core config --extra-php <<PHP\ndefine( 'WP_DEBUG', true );\ndefine( 'WP_DEBUG_LOG', true );\nPHP --allow-root\n. Thank you!\n. ",
    "pabloselin": "+1 to @joeguilmette and @oviliz \n. ",
    "sc0ttkclark": "Being able to at least update mu-plugins (assuming slugs match wordpress.org slugs) would be handy here\n. I opened up two issues, one for bypassing the unknown parameter warning, one for what seemed like a separate viable enhancement for wildcard synopsis. I'm wondering now if we're both not on the same page.\n. Okay, so the plan is to have no option per-command to bypass unknown parameter warnings? Is that too much of an edge case?\n. My use case makes it impossible to set synopsis for every argument that would potentially be available. The fields available and field names are greatly varied.\n. Oh wait! I think I see what you did there. --<field>=<value> isn't the same as --field=<field>\nThat's where I misunderstood. You can keep this closed if the matching as suggested by you is how to handle that.\n. Sorry for the initial misunderstanding. While this enhancement would be useful for those wanting to validate with prefix/wildcards, I'm no longer in need of it since I can use --<field>=<value> which had been staring me in the face. We can close this unless someone else wants to head it's development.\n. True, that'd be just as useful.\n. ",
    "tott": "I'm using this in my install. Maybe it's of some help https://gist.github.com/841afec453bef93b5c5a\n. Here is my take on an export.php which you can throw in the internal commands folder\nhttps://gist.github.com/1501546\nIt would be great to get some feedback on it, to see if that's all as it's intended and I will likely also wrap up the importer on this basis. If you're all satisfied with this it would be great to get commit access here as I would like to build upon WP_CLI for further developments.\n. ",
    "marfarma": "Additional info.  \nBehavior observed while running locally on Mac OS X Lion using built-in apache2/PHP-5.3.6 setup (not MAMP, etc.) , automatic upgrade via dashboard just succeeded.\n. OK - will create clean branch and pull request.\nProbably tomorrow.\n2012/1/4 Cristi Burc\u0103 <\nreply@reply.github.com\n\nIt would be a lot easier to discuss this if you submitted it as a pull\nrequest (ideally from a clean branch, without merges and reverts).\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/andreascreten/wp-cli/issues/56#issuecomment-3360248\n. YAML - we can replace the the dump and load with the equivalent var_export and eval functions, if it's important to you.  \n\n--type is really just a category to organize data manipulations.  I envision --type=core migrations as updating core settings, such as hostname, custom permalinks, privacy, static homepage, syncing categories and other taxonomies, syncing users and user-meta, etc.  Basically anything you need to do that isn't plugin or theme related. \n. Ok, I'll have them in a bit, as I'll be making some for my deployments.\n. got pulled away - won't be able to look at it again for at least another week.\n. ",
    "daveross": "Same behavior trying to upgrade from WordPress 3.2.1 to 3.3. Linux/Nginx/PHP 5.3.8.\n. ",
    "joehoyle": "To anyone interested, I made an \"import\" command which imports from a remote server directly. I use this to keep my development sites in sync with production. It uses directly mysqldump > mysql import, and rsync for uploads. It also supports SSH tunnelling for DB connections. I can then do:\nwp import db\nwp import uploads --uploads_dir=2011\nto stay in sync. I have also done the same for export, to push files / db to remote testing servers. The command is here https://github.com/humanmade/hm-dev/blob/master/hm-dev.wp-unit.php#L161\n. @scribu I agree, I am not sure what word to best distinguish them - Tott's script uses the WordPress XML file, which imports the WordPress specific data - however, I see that as fundamentally different to doing a mysqldump / rsync, as my version is pretty much WordPress agnostic, it will work with any custom tables etc. it's more of a low-level import I suppose.\nAny ideas on terminology to reflect this? Or should I just call it \"hm-import\" or something?\n. It is currently wp-agnostic, however I don't see why this would mean it isn't bundled, as it is (IMO) better this was rather than trying to import WP tables, posts etc - as this pretty much always leads to data-loss. Doing it that way is fine for very basic WP installs, but I don't think that's \"catch all\" enough to work with the more complex setups out there. Not everyone is just running a blog with posts, authors and pages. \nThis is also WP-agnostic: https://github.com/andreascreten/wp-cli/blob/master/src/php/wp-cli/commands/internals/sql.php, but I think a lot more useful than an export to XML.\nIMHO it should be down to usefulness for WP devs, as opposed to the amount of WP specific code in the command?\n. I think I am experiencing this issue (on a multisite install), no output, not error, WP_DEBUG on\n. Actually, just noticed this is for installing wordpress only, I am not getting anything for current installs so might not be related\n. I have run into this issue (though with phpunit, but I think the same applies). When using APC via CLI, you don't get access to the same persistant cache. I ended up working around it by switching to memcache unfortunately.\nOnly other way I know how to clear the apc cache is to restart FPM / Apache or whatever server you may be using, which may be overkill.\n. Ahh, fixed inbetween my managing to open this ticket! Thanks\n. Right, but mysite is just one of 1000+ sites, I often want to shell into lots of different sites. In my wp-cli.yml I already have url: mynetwork.com\n. True enough, not sure if sub directories would be able to be handled in the same way. I was more thingking--site would be a shortcut to --url, however I presume it would be difficult to check if the setup is subdomain / subdirectory ahead of setting --url.\nMain thing I wanted to check is was this ticket already possible, and had it been thought about. I think that probably concludes it for now. Thanks for taking a look!\n. Ahh sweet, thanks!\n. Sure\n```\nubuntu@ip-xx:~$ wp\nwp: command not found\nubuntu@ip-xx:~$ curl http://wp-cli.org/installer.sh | bash\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100  1856  100  1856    0     0   1926      0 --:--:-- --:--:-- --:--:--  164k\nInstalling the main WP-CLI package...\nbash: line 73: composer.phar: command not found\nInstalling the Boris package...\nbash: line 80: composer.phar: command not found\nWP-CLI files have been succesfully installed.\nTo test, run:\n/home/ubuntu/.composer/bin/wp --info\n\n```\nI then installed php-cli, re-ran and this time the wp-cli script installed composer\n. smashing\n. Related: https://github.com/wp-cli/php-cli-tools/issues/43\n. I'd like to get this running, I'll try find a bit of time to take a look at this\n. possibly related https://github.com/facebook/hhvm/issues/3288\n. When running wp-cli under Docker this is quite a pain, as typically you'll just have a very slim container with only a root user.. \ud83c\udfc3 . If I were to do:\nPHP\nadd_post_meta( $post_id, 'urls', json_encode( array( 'https://hmn.imgix.net/humanmade-production/uploads/2015/05/airbnb-header4.png?w=940&h=400&fit=crop' ) ) );\nAnd then try do wp search-replace https://hmn.imgix.net https://hmn-v2.imgix.net --precise it would't pick up the above image, as the JSON encoded array will be slashed as \"https:\\/\\/hmn.imgix.net\\/humanmade-production\\/uploads\\/2015\\/05\\/airbnb-header4.png?w=940&h=400&fit=crop\"\n. ",
    "gotohr": "yap, correctly in browser, not with wp-cli...\nit says it can not connect to database.\nthough, got it working when I tell mysqld to create mysql.sock in /var/mysql/\nmysqld --socket=/var/mysql/mysql.sock\ncould socket path be some kind of configuration option for wp-cli or something?\n. seems like you are right\nmac os x Lion installation here\nthere is default /usr/bin/php (5.3.6) that uses /etc/php.ini\nand there is /usr/local/Cellar/php/5.3.8/bin/php installed with brew (php-fpm goes through this one)\nthx for help :)\n. ",
    "mwilliamson-red-gate": "I've moved the commands to core. I'm not sure about moving is_installed though. I'm happy to change it to a flag, but I can't think of a name that's as self-explanatory as is_installed, and wp core install --is-installed seems a bit strange.\n. Displaying other information alongside would mean having to parse the result, rather than just grabbing the return code. I suppose we could optionally display a single field, for instance wp core status --show=is_installed, but that does add some more complexity.\n. \"Also note that adding trivial wrappers around functions isn't really necessary:\"\nExcept that if WordPress isn't installed yet, wp-cli exits with no output and no error code. In this particular case, the fix is to use\nwp eval 'exit( (int) is_blog_installed() );'\ninstead (the same as before, except without the negation).\n. Except with the negation, the status code is always 0:\n- if WordPress is installed, it returns 0 as you'd expect from the call to eval\n- if WordPress isn't installed, it returns 0 from the call to die in wp_not_installed, which is called in wp-settings.php (see issue #93)\n. I suppose for greater consistency -- this way, you can write your commands the same regardless of whether they're in the wp-cli source tree or not.\nAlso, so far as I can tell, command line arguments aren't passed along when using eval-file. You could parse them again, but that feels a bit kludgy given that wp-cli has already done the work (and removed arguments such as --path).\n. I'd still prefer a parameter -- generally, when doing automation, I find it much easier to have a command line argument rather than having to configure things on a per-user basis. Doing the latter feels like a kludge for my use case when each deployment I have has its own copy of wp-cli and commands.\nUsing a config file in the home directory also makes running two instances of wp-cli at the same time tricky if they require different command directories, which is quite likely in my case.\n. --bootstrap sounds fine to me.\nTo clarify: I'm using wp-cli as part of an automated process, which means that passing the same parameter over and over isn't a problem, and is easier than having to generate a per-project config file.\n. I haven't used all of the commands, but I use wp-cli to do various things during an automated build/test such as installing plugins and themes, and they work without issue.\n. I might be missing something, but why is a default required? If it turns out that there's a case where the URL parameter is required, I think I'd rather have wp-cli (or WordPress itself) fail due to the parameter not being set than using a default value that's unlikely to be correct.\n. wp user meta set sounds good to me, but is there a straightforward way to add a sub-sub-command? (Where user is the command, meta is the sub-command, and set is the sub-sub-command)\n. > You can treat 'set' as just another parameter to the 'meta' sub-command.\nTrue, but then you don't get the nice error messages for free when you leave off the sub-sub-command, like you do when you leave off a sub-command. You'd have to implement those messages yourself, which doesn't seem like a great solution.\nAdding a user-meta command feels slightly neater in terms of implementation, but not quite as nice when you're calling code. Might be the simplest solution though.\n. The other subcommands in wp db all seem to be somewhat more low-level in that they manipulate the database directly rather than going through WordPress. If you reckon that's the right place for it though, I'll move it across.\n. The other thought I had was to name it wp core upgrade, but I didn't like that since it's not clear what the distinction between update and upgrade is.\n. ",
    "johnraz": "Nothing special AFAIK.\n. In my case at least, the wordpress instance behaves perfectly fine in regular usage.\n. sounds great\n. ",
    "maorb": "Yes, I use php 5.2.10.\nI may upgrade to 5.3 in my dev machine, but my production machine is running php5.2.17 and I can't update the php there, since I have not root access.\nMust I upgrade to 5.3 in order to use it, or there is a way to use it with php prior to 5.3?\nThanks\n. ",
    "ericandrewlewis": "I definitely agree, as 75% of servers run versions of PHP < 5.3 (see http://w3techs.com/technologies/details/pl-php/5/all), and namespaces incorporate the ugliest syntax I've seen in PHP.\n. Ah, read the comment thread over there. \nSo this is definitely not of interest to develop? I personally don't think it's exactly \"out of scope\" of a wp unix command, although I was not part of the preliminary discussions in building the script, and it also didn't seem like there was a lot of support against it.\n. New commit uses curl instead of SVN to download the package. \n. Yeah, we should be able to do it by setting the post variables and wrapping a php call with output buffering. Haven't had time to take a stab at it lately.\n. Although MAMP is very popular, anybody using wp-cli should know that they can use Mac OS X's built in apache and php packages along with downloading MySQL instead of using MAMP, as I just did. \nClosing out as not too important, if anyone replies to me in the MAMP support forums about an easy way to test if MAMP is running via cli maybe I'll write a patch.\n. Related: PHP bug #54097\n. ",
    "benhass": "It returns /renamed-wp-content/plugins. Should it be ../renamed-wp-content/plugins since I'm within the wordpress core dir?\n. It didn't work...\n. define( 'WP_CONTENT_DIR', $_SERVER['DOCUMENT_ROOT'] . '/lndp-content' );\n. I just changed $_SERVER['DOCUMENT_ROOT'] to dirname(__FILE__) and that fixed the issue. dirname() it is! Thanks for walking through this with me.\n. ",
    "samjbmason": "Was kindly helped over here by scribu unfortunately added the MAMP php version and still not getting wp core install to work see #124\n. I think this tied up with issue #124 silly duplicate from a noob.\n. yeah the very latest\nNo wp-config is exactly the same, havnt touched since running the wp core config command on it.\ni run wp core install --url=test --title=test --admin_email=myemail@test.com\nif i just call wp i get html echoed to the terminal window saying Error establishing a database connection plus all your other standard doctype stuff.\n. Here is a paste of the code it prints to the terminal\nhttp://pastebin.com/w3f8Mp48 \n. Ah yes I am, ok checking #66 now.\n. Ok have updated the path to the MAMP php exec to the src/bin/wp have saved it out restarted apache and restarted the terminal window and still getting a error saying \"Error establishing a database connection\". Do I have to update a mysql file anywhere or is just the php.\n. as a sidenote and perhaps totally not important i just ran wp--version and it outputted this wp-cli 0.6.0-dev\nis this the correct build I should be using?\n. Ok got it up and working now realised I should probably stop using MAMP and do it properly and I can now confirm that wp-cli works amazingly. Thankyou so much you may have saved me collectively hours.\n. ah thanks very much. Does the roots theme implement this as I use a customised version of that?\n. ah ok I will have a check and maybe implement it into my fork. Thanks for the help on pulling from git. \n. cd $@\nwp core download\nwp core config --dbname=wp_${PWD##*/} --dbuser=fake_user --dbpass=fake_pass\nwp db create\nIm invoking it from an automator command, I dont know if that make any difference. I know that wp core download works and that wp core config works as it enters the correct info into the config file.\nIt just seems to do nothing when it gets to wp db create.\nIt doesnt throw any errors it just doesnt create the db.\n. I just ran the commands in a normal terminal shell and  after running those exact commands apart from the 'cd $@' a database is created.\n. Ok no problems, i thought i was going crazy good to know its just a stupid bug. Did I see somewhere else that you had started an issue about automating the process of creating a site?\n. Yeah that would be good, but i did wonder how it would be possible to pass down the unique arguments for each install.\n. Yeah I guess wp setup would bundle all the actions of a typical install. such as perform wp core download then wp core config and would use arguments passed through the wp setup command and then finally wp install.\n. Unfortunately I never got this too work and  have put it to one side for the time being. OWuld love to know what if you find a solution.\n. ah sorry i apologise i thought you were referring to my automator script.\nYeah I did get it up and running but i didnt use mamp in the end.\n. yeah it all kind of got a bit beyond me. Im trying to figure out a way to automate a new install without having to type in so many commandfs but hit a wall with that as well.\nOh the joys!\n. ",
    "pdclark": "Looks like the paths on line 71 may support MAMP 1.0, but don't support MAMP 2.\nExisting MAMP paths:\n/Applications/MAMP/bin/php5.2/bin/php /Applications/MAMP/bin/php5.3/bin/php\nMAMP 2 paths:\n/Applications/MAMP/bin/php/phpphp5.2.17/bin/php /Applications/MAMP/bin/php/php5.3.14/bin/php /Applications/MAMP/bin/php/php5.4.4/bin/php\n. MAMP is storing the active PHP version: http://brain.st/i//php-version-20120924-190651.jpg , so surely it's available somewhere. Probably a question best posed to the MAMP developer: http://forum.mamp.info/\n. Nevermind. Works fine outside of VIP Quickstart. Found the bug in their bridge to vagrant's instance of wp-cli. Looking into a patch and will submit over there.\n. Link to the VIP QuickStart pull request for those who arrive here via a search: https://github.com/Automattic/vip-quickstart/pull/174\n. ",
    "whyisjake": "I've been redirected here, having the same issue. After setting the global like this: WP_CLI_PHP=/Applications/MAMP/bin/php5.2/bin/php in both .bash_profile and .bashrc, I am still getting the:\n\nWarning: mysql_connect(): [2002] No such file or directory (trying to connect via unix:///var/mysql/mysql.sock) in /Users/jspurlock/Sites/wp-includes/wp-db.php on line 1138\nWarning: mysql_connect(): No such file or directory in /Users/jspurlock/Sites/wp-includes/wp-db.php on line 1138\n\nI'm stuck, any ideas?\n. When I do a phpinfo, it returns that I am running 5.3.5\n\nBut the find-php gives me that MAMP path...\n. SQLiteManager\napache2\ncheckMysql.sh\nfavicon.ico\nmamp\nphp5.2\nphp5.3\nphpMyAdmin\nquickCheckMysqlUpgrade.sh\nrepairMysql.sh\nstart.sh\nstartApache.sh\nstartMysql.sh\nstop.sh\nstopApache.sh\nstopMysql.sh\nupgradeMysql.sh\n. PHP binary: /usr/bin/php\nPHP version:    5.3.15\nphp.ini used:\nwp-cli root:    /Users/jspurlock/git/wp-cli/src/php/wp-cli/\nwp-cli version: 0.8.0-alpha\n. Hey @scribu \nWanted to try to this going again with mamp. Working great on the ubuntu staging server, I'd like it local too...\n\u2318 ~/Sites/ which php\n/usr/bin/php\n\u2318 ~/Sites/ echo $WP_CLI_PHP\n/Applications/MAMP/bin/php5.3/bin/php\n\u2318 ~/Sites/ wp --info\nPHP binary: /usr/bin/php\nPHP version:    5.3.15\nphp.ini used:   \nwp-cli root:    /Users/jspurlock/git/wp-cli/src/php/wp-cli/\nwp-cli version: 0.8.0-alpha\nAny ideas here?\n. Followed that, this is the response:\n```\nWarning: mysql_connect(): Can't connect to local MySQL server through socket '/Applications/MAMP/tmp/mysql/mysql.sock' (2) in /Users/jspurlock/Sites/wp-includes/wp-db.php on line 1138\nError: \nError establishing a database connection\nThis either means that the username and password information in your wp-config.php file is incorrect or we can't contact the database server at localhost. This could mean your host's database server is down.\n\nAre you sure you have the correct username and password?\nAre you sure that you have typed the correct hostname?\nAre you sure that the database server is running?\n\nIf you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the WordPress Support Forums.\n```\n. /me didn't have MAMP running...\nI'll see myself to the door.\nThanks!\n. Raw makes sense, tho the way that I normally use is by declaring the theme or plugin, and then having the code insert the code. If it was added as a class, it would be easier to start adding things (other methods etc.) \n. \n. ",
    "wopr42": "I agree, just don't know how to use list as a function name since it's a reserved word. I'll make the role output optional as you suggested.\n. I use this as a way to prevent sending customer passwords in plain text over email. Create the account and send the reset password link instead.\n. That's a better idea. Working on it here, closing this request.\n. ",
    "mirosval": "no, this is a single WP install, but I just checked multisite and that does not work for me either :(\n. I got just a notice:\nPHP Notice:  wp_enqueue_script was called incorrectly. Scripts and styles should not be registered or enqueued until the wp_enqueue_scripts, admin_enqueue_scripts, or init hooks. Please see Debugging in WordPress for more information. (This message was added in version 3.3.) in wp-includes/functions.php on line 3587\nNotice: wp_enqueue_script was called incorrectly. Scripts and styles should not be registered or enqueued until the wp_enqueue_scripts, admin_enqueue_scripts, or init hooks. Please see Debugging in WordPress for more information. (This message was added in version 3.3.) in wp-includes/functions.php on line 3587\n. No, in that case it seems to be working. I haven't tried it with this param before.\n. I've just pulled the latest version and it appears that this issue has been fixed. But instead I get these errors:\nFatal error: Allowed memory size of 33554432 bytes exhausted (tried to allocate 96 bytes) in /var/www/udesign/wp-includes/functions.php on line 673\nI get this running in a single wp install, and the following in a multisite.\nNotice: Undefined index: query in /home/mirko/wp-cli/src/php/wp-cli/class-wp-cli.php on line 166\nFurthermore, multisite does not produce the fatal error from above and produces the desired output after the notice, so it seems to be working. I should note that I have set the mem limit for cli php to be -1, so I don't understand why does this error appear... Thank you for your work :)\n. ",
    "redcuillin": "Should have said - on my 64bit machine, the heap limit seems to impose a max memory allocation of 32MB, hence 33554432 bytes.\n. I get '-1' (no limit) too. Oddly, changes I make to cli/php.ini only reduce memory allocation.\nHowever, I just worked out a fix. I added\nini_set('memory_limit', '100G');\nto the first line of wp-cli.php, and the script works. Not sure why setting it in the script would work when php.ini behaves completely counter intuitively, but there you go.... Not sure if that's something you'd want to include in your code. Seems a bit of a hack.\nThanks for your response.\n. Tried the following:\n-1 => error\n'-1' => error\n'1G' => error\n'10G' => error\n'100G' => works\nThey all break with the same error Allowed memory size of 33554432 bytes exhausted\nI can't believe for a minute that the code uses over 10GB, so I'm mystified! Some sort of php bug? I'm on an Ubuntu 11.04 desktop machine which has no reason to struggle with anything. I'll try this out on some other Linux machines and see how I get on.\n. For info, I tested wp-cli on three other machines - two Debian servers and an Ubuntu laptop running 11.10. All worked fine. These machines all basically have identical PHP setups, so no idea why I ran into this problem on one desktop.\n. ",
    "heitoradao": "How can I add this instruction in the PHAR file?\nShould I recompile it?. ",
    "svaj": "I had it act like db dump, using [DB_NAME].sql if no parameter was supplied.  Wouldn't consistency across commands be beneficial?\n. ",
    "gerardjp": "Hi Andreas,\nI'm not sure what you mean by network install. It is a non-multisite setup. Downloaded the latest stable, untarred it on the local filesystem, settings are out-of-the-box-ish, in other words no setup customizations yet. And I already ran the regular browser based wordpress \".../wp-admin/install.php setup so it does have DB access.\nDoes that answer your question? :)\nRegards,\nGerard.\n. Googling the output it seems wordpress related. Anybody any clues?\nPHP Notice:  Undefined index: HTTP_HOST in /home/testuser/temp/testdomain.com/wp-includes/functions.php on line 3765\nNotice: Undefined index: HTTP_HOST in /home/testuser/temp/testdomain.com/wp-includes/functions.php on line 3765\nPHP Notice:  Undefined index: SERVER_PROTOCOL in /home/testuser/temp/testdomain.com/wp-includes/functions.php on line 1672\nNotice: Undefined index: SERVER_PROTOCOL in /home/testuser/temp/testdomain.com/wp-includes/functions.php on line 1672\nPHP Warning:  Cannot modify header information - headers already sent by (output started at /home/testuser/temp/testdomain.com/wp-includes/functions.php:3765) in /home/testuser/temp/testdomain.com/wp-includes/pluggable.php on line 866\nWarning: Cannot modify header information - headers already sent by (output started at /home/testuser/temp/testdomain.com/wp-includes/functions.php:3765) in /home/testuser/temp/testdomain.com/wp-includes/pluggable.php on line 866\n. It seems the aformentioned VARS normally come from the client (the browser) .. When I explicitly set them in wp-cli.php (like below) the errors are gone but so is my output. Still at a loss :(\n$_SERVER['HTTP_HOST'] = \"foo\";\n$_SERVER['SERVER_PROTOCOL'] = \"HTTP/1.1\";\n. After digging some more .. I was in a wordpress installation for which I did not finish the install-by-url yet ... It works now! .. Thanx all for putting me in the right direction.\nRegards,\nGerard.\n. This seems more like a question. Is there a chat or forum for this?\n. I do have full access to the filesystem. I would like avoiding localhost FTP-ing :)\nWhere can I find/set the FS_DIRECT ?\nThanx 'n Greetz\n. NB: I found a wordpress configuration directive that does this (ref: http://codex.wordpress.org/Editing_wp-config.php):\ndefine('FS_METHOD', 'direct');\nAdding this to wp-config.php makes the plugin update work. Not exactly sure yet what this might implicate security wise. But I'm planning to hide the plugin (or plugin update) features from the menu anyway.\n. But awesome!\n. That would be even better, but I'll settle for a solution right now :) ... #714 would be great though. That way I can update locales on WP instances without logging in regardless of my own preferred language.\nI dont know if its related but there was another issue on the (dutch) translated wordpress 3.9 version. When I updated WP (from 3.8) to 3.9 with WPLANG set (to nl_NL in my case). After running the full upgrade on the commandline, in the dashboard you still needed to 'update' Wordpress to get rid of the notification. That also seemed language (locale) related. I hope others experience/reproduce the issue. That way it speeds up the solution. If there's anything I can do to help, please let me know.\nRegards,\nGerard.\n. Hi Jaime,\nI couldn't reproduce the problem on the same website. However, I ran the update on another website with the commands below and that had a different deviation on the expected result.\nwp --allow-root --locale='nl_NL' core update\nwp --allow-root --locale='nl_NL' core update-db\nThe case was as follows: WPLANG disabled, browser language set to Dutch, Selected \"Site language\" set to Dutch in the dashboard and still the shown language was english.\nI then looked back to the wp-cli based update and the command with the locale set resulting in this:\n```\nwp --allow-root --locale='nl_NL' core update\nDownloading update from https://downloads.wordpress.org/release/wordpress-4.0-no-content.zip...\nUnpacking the update...\nSuccess: WordPress updated successfully.\nwp --allow-root --locale='nl_NL' core update-db\nSuccess: WordPress database upgraded successfully.\n```\nAfter re-enabling WPLANG in wp-config.php (set to nl_NL) and running the update without the locale set on the commandline this was the result:\n```\nwp --allow-root core update\nDownloading update from https://downloads.wordpress.org/release/nl_NL/wordpress-4.0.zip...\nUnpacking the update...\nSome of your translations need updating. Sit tight for a few more seconds while we update them as well.\nUnpacking the update\u2026\nInstalling the latest version\u2026\nTranslation updated successfully.\n\n-- snip --\nSuccess: WordPress updated successfully.\nwp --allow-root core update-db\nSuccess: WordPress database upgraded successfully.\n```\nAs you can see updating with the locale on the commandline it downloaded the 'no content' zip, and returned successfully. The second run 'without' the locale it actually says \"Translation updated\". I'm not sure where to issue originates, but there still seems to be ambiguous behaviour. Moreover it does seem related to the initial issue I posted.\nNB: As I noticed you are from Rotterdam, same as me, If you like we could get together for an hour or two (three? :) ) and see I'f we can tackle this issue.\nPS: The old translation issue I mentioned is found here: http://bit.ly/1qb0YbT\nKind regards,\nGerard.\n. The deviation continu's. Did another update with WPLANG disabled and finishing succesfully:\n```\nwp --allow-root --locale='nl_NL' core update\nDownloading update from https://downloads.wordpress.org/release/wordpress-4.0-no-content.zip...\nUnpacking the update...\nSuccess: WordPress updated successfully.\nwp --allow-root --locale='nl_NL' core update-db\nSuccess: WordPress database upgraded successfully.\n```\nThis resulted in expected behaviour, with WPLANG disabled before updating, and after the update the site laguage selector in the dashboard showing NL and EN.\nWhy and when exactly the language is taken into consideration during the update is beyond me. Possible just closing this issue and developing #714 seems like a plan ... ^.^\nKind regards,\nGerard,\n. I will at my earliest convenience, sorry for not finding the time earlier. Hopefully (well, not :wink: ) a related production issue arises, that would save me the trouble to setup a test environment.\n. Hi All,\nNot sure if this issue #1374 (posted by me) resulted in this conversation getting lively, nevertheless.\nI run a dutch hosting company and manage a decent amount of websites. Beyond a staging area I have enough websites where I can inventory behaviour of the above command. Should any help be needed, feel free to get in touch.\nCudo's on the work!!\nKind regards,\nGerard.\n. Sure, I assume the nightly phar installed from \"https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar\" is the Master branch you're referring to or is that a distinct deploy branch?\n. Typically I think you should add those. However, if I'm correct, Wordpress updates these when themes or plugins are installed. I see the \"updating languages\" as a new phenomenon in my terminals more often these days ... So since more frequently updated less of a priority for now I think.\nMoreover, if you want to control updates, then you should also be able to check whether updates are available. And this sounds like handling language update as complete as plugin or theme updates.\nOfc, correct me if I'm wrong :)\n. @danielbachhuber thanx for the info\n. Hi Daniel,\nThanx for your reply. After going through my memory archive :) ... Hereby my feedback. Hope it helps.\nRough pointers\n\nLow fruit: Every action that has either succes or fail can return 0 / 1\nNormally (seen in C code) you would choose a bitwise operator (going from 0 to 255). \nGood practice, and possibly obvious, the higher the return code the more severe the issue that was caught.\n  Another option; Choose subdividing your 0-255 range and leave some room in between for future levels.\nRanges:\nwp-cli issues 1-25\nwordpress install 26-50\nDb connectivity 51-75\nMisc 76-100\nplugin ranged update 101-150\n\nThere's probably never 25 different DB issues, but you get the idea.\nMore on the actual level (and ranges). It's mainly to combine errors, so when having a funky WP installation that  results in an error 27 and you find a certain db connect issue e.g. 56 at the same time. The return level should be 83. Hence the bitwise operator\nMight be to elaborate, but I'm writing a wrapper between saltstack and wp-cli .. so I wouldn't mind :stuck_out_tongue_winking_eye:  \nUpdate all\nUsually the return codes represent distinct levels and not an approximation. So ... As far as the plugins and especially the \"update all\" goes. Consider changing \u201call\" into \"all (updates) available\u201d even it it\u2019s just by definition and not actually renaming the the parameter or sub command. Therewith the more updates that failed the higher the return code. Possibly choose a reserved range to your liking e.g. between 100 and 150), and count the failed updates.\nSo when \"update all\" run on a WP instance that has 25 plugins of which 12 avail updates. return 100 when all goes well (well zero then actually) and 1 higher for all failed. You should of course mention the amount of failed plugin updates to the user and not the error level visibly, but this way the distinction can be properly caught at least.\nOh, and yield breakage number till all updates are executed, and then return the error. .. I think is good. \nI would like a 'whiteboard session' whether it's good or not to relate the amount of succeeded updates to a distinct error level, but it's a start :smile: \nThis is the first I can come up with. I hope it helps. \nKind regards,\nGerard.\n. @scribu: Good point on the apt-get! :+1:\nOn the review afterwards ... I do that with Salt commands as well when 'apt updating' my servers, however that does mean 'human interpretation' of the output.\nUsing the 'wp plugin list' command after a (distributed and thus unattended) update implies saving state somewhere. So the before and after picture can be compared. Not an issues as such but something to keep in mind while designing the setup. At least in my case :wink: \nGood'day\n. Working on a Wordpress plugin that enables some new wp-cli commands  .. I just noticed in the API docs:\nWP_CLI::error( $msg ) - prints an error on STDERR and exits with code 1\n(ref: https://github.com/wp-cli/wp-cli/wiki/API)\nThis suggests an actual return code ... Is the documentation erroneous or did I mis somehting :smiley: \nTa!\n. Dear Jaime,\nThanx for the verbal feedback yesterday at WP 010, always a pleasure!\nIt was indeed an double declaration on my end. The nature of the error message threw me off.\nClosing ...\nRegards,\nGerard.\n. Hi All,\nI posted a request with GF just now (closed support forum), see with what they respond. I understand how for premium plugins, some form of authentication is advisable, so only buyers can download.\nA party that does this rather well and fairly transparant IMHO is Elegant themes. With a acquireable API key from their member area you can authenticate the download request from within wordpress.\nThe API key is stored in the database of the Wordpress installation and appended in the url when downloading an update. The available 'updater plugin' is found and described here:\nhttp://www.elegantthemes.com/gallery/divi/tutorial-update.html\nVery neat and workeable implementation IMHO.\nHope it helps .. I'll keep you guys posted on any GF feedback.\nRegards,\nGerard.\n. PS: GF just responded that the issue at hand will be looked at by their developers\n. Hi All,\nThe GF developers said this issue is resolved since version 1.9.2.\nI can confirm, updated to the latest GF. Manually down-ed the version number in the source code to 1.9.1 and afterwards it also showed up on the commandline. Closing ... \n. Sorry to butt in, but I was triggered by this charming option, another possibility might be creating a zip containing all that was removed and placing it in wp-contents/upload.\n.  danielbachhuber commented 3 days ago\n\nGood suggestion, @cap5. I do like the <> syntax for this use case. However, I'm not sure how cleanly the concept will apply to the underlying code.\nHow do you think a negated argument should be passed through to PHP, and then handled by the command?\n\nHi Daniel, (I closed a duplicate account so recreated this issue)\nIn reply to your question, without going into code yet:\nI'd suggest you stay as close to the WP query mechanism (or SQL if you will) as possible. 'Select all' and filter out what you don't need will probably get you into trouble on larger amounts of data.\nIs wp-cli transparant in terms of querying Wordpress?\nRegards,\nGerard.\n. @danielbachhuber Sorry I couldn't react sooner, I am swamped in work at the moment. If I do find time, I'll get back on this.\n. ",
    "spuriousdata": "Yeah, I guess they do. I used 'path' because I thought it was more\nintuitive for users that didn't understand that they didn't have a\nwordpress installation and I used --wproot because the constant that gets\nset for it is WP_ROOT.\nOn Sat, Mar 10, 2012 at 6:03 AM, Cristi Burc\u0103 <\nreply@reply.github.com\n\nwrote:\nWhy use --path for wp core download and --wproot for the rest? Don't\nthey mean the same thing?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/andreascreten/wp-cli/pull/80#issuecomment-4430308\n. Yeah, that's a good point\n. Ok, thanks!\n\nOn Sat, Mar 10, 2012 at 9:11 AM, Cristi Burc\u0103 <\nreply@reply.github.com\n\nwrote:\nI cherry-picked the relevant commits. Thanks for contributing!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/andreascreten/wp-cli/pull/80#issuecomment-4431184\n. Yes, that's right, which is why I added the comment about .bashrc or\n.bash_profile. If someone was so inclined they could write a script and\nstick it in ~/bin and then add ~/bin to their path, but I thought this was\nthe easiest solution for someone that doesn't have root access.\n. Ok. I figured this was ok since nbproject was already in there.\n. No, you obviously don't, but the existing solution 'build-dev' does require\nroot access, because it modifies /etc/bash_completion.d and\n/usr/local/etc/bash_completion.d\n\nOn Sat, Mar 10, 2012 at 9:01 AM, Cristi Burc\u0103 <\nreply@reply.github.com\n\nwrote:\n\n+\n+if [ \"$BASH_SOURCE\" = \"$0\" ]; then\n-     echo \"This file should not be executed. It should be sourced into\n  your current shell like this:\"\n-     echo\n-     echo \"source $BASH_SOURCE\"\n-     echo\n-     echo \"Add the above line to your .bashrc or .bash_profile to have\n  this environment set up\"\n-     echo \"automatically when you log in.\"\n-     exit 1\n  +fi\n  +\n  +DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n  +\n  +alias wp='$DIR/../src/bin/wp'\n  +\n  +. $DIR/wp-completion.bash\n\nWhy would you need root access to modify your own .bashrc file?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/andreascreten/wp-cli/pull/80/files#r542504\n. \n",
    "lazaac": "yes, no problem... but when it comes to use wp-cli via ssh, an alert prompted \"Your PHP installation appears to be missing the MySQL extension which is required by WordPress.\"\n. do you mean php.ini..?\n. ",
    "mindctrl": "Thanks for your response.\nOff the top of my head, things like:\nAdd, edit, and delete media items - including title, alt text, caption, description, etc.\nList / query media items.\nAttach media items to posts.\nSet featured image on a post (this might fall under another area related specifically to posts? Which would be another nice feature - create new posts/pages.\nImport a folder of images into the media library, assigning the file names as titles. All sorts of useful publishing automation with this one.\n. That would be great!\n. ",
    "jmslbam": "Maybe also commando to regenerate images like the one Viper007bond has made  after changing the thumbnail sizes?\n. Got a 404\n. Scooby dooooooo. Nevermind it works. Gracias.\n. @scribu Won't we get penalties from Google for doing that black on black :)\n. Test content? https://github.com/manovotny/wptest\nA nevermind, I saw that you are using the Automatic test xml from https://wpcom-themes.svn.automattic.com/demo/theme-unit-test-data.xml\n. Well we have been prototyping with and already using this wp scaffold command to generate Custom Post Types & Taxonomies to a file / directory.\nLike wp scaffold cpt airplane and wp scaffold tax airplane-type\nWe bundled the generation of CPT and Taxonomies into the scaffold command because there aren't any wp cpt or wp tax commands.\nCould a bundled command be something to take into account for future generate commands? wp scaffold plugin plugin-name to keep things bundled?\nhttps://github.com/linepress/wp-cli-scaffold\n. Hi scribu, that's what I did just this afternoon, but will do it again too verify.\nGracias and I will keep you posted!\nhttps://github.com/linepress/wp-cli\n. Cloning from scratch from the latest master neglects to pull in the sub-module php-cli-tools from git://github.com/wp-cli/php-cli-tools.git ... \nThe directory src/php/php-cli-tools existed but was empty.\nSo I manually ran git submodule update --init and it clone php-cli-tools right into the correct path.\nIs this default git behaviour?\nIf not maybe something for in a troubleshoot wiki?\n. Sweet, the brain somehow didn't registered the --recursive part.\nThank you for all the help!\n. cc @sebastiaandegeus\nHe made https://github.com/sebastiaandegeus/domain-wpcli so he might be interested in this also.\n. +1 for the --skeleton=https://github.com/Automattic/_s\nKraftwagen for Drupal also uses this method of loading a skeleton from an url.\n. Edit:\nIt tries to create wcnorge/post-types/ and it's not recursive, so also if WP_PLUGIN_DIR doesn't exists you get an error plugin doesnt exist.\nYou know why wp_filesystem->mkdir doesn't do a recursive mkdir?  Cross platform issues?\n. Agree, most of them I don't use, and the whole point of scaffolding is getting things kickstarted and tweak them afterwards.\nwp scaffold post-type <slug> [--textdomain=<textdomain>] [--theme] [--plugin=<plugin>] [--raw]\nwp scaffold taxonomy [--textdomain=<textdomain>] [--post_types=<post_types>] [--theme] [--plugin=<plugin>] [--raw]\n. > At most, we would add an \"Are you sure?\" check.\nIf you want to run / use it an automated way you will need a --all argument to force skip the prompt?\n. lol, is there any code left :)\n. True true. Thank you for your help and time!\n. http://kraftwagen.org/get-started.html\nhttps://github.com/kraftwagen/kraftwagen\nwp new-project\nCreate an new project. From for example a skeleton repo.\nwp apply-plugin-dependencies\nActivate all plugins configured in , for example, wp-cli-local.yml or whatever config file.\nhttp://kraftwagen.org/get-started.html#update\nwp build\nCreate new build from scratch applying options, activating plugins etc.\n. a) Indeed, I'm asking the Kraftwagen developer if he can point me in a the direction on how Drush includes / registers the global custom commands from your home dir or another dir.\nIs there a global wp-cli.yml? \nb) Would hook on the same code as the #312 right? \nAlso should I split up this issue?\n. > Any response\nThanks for the reminder\nDone with getting ~/ like this\n// Cannot use $_SERVER superglobal since that's empty during Drush_UnitTestCase\n// getenv('HOME') isn't set on windows and generates a Notice.\n$home = getenv('HOME');\nThen searches for dirs in ~/.drush and includes every /sub-dir/drush.inc or drush.load.inc\nhttp://api.drupalize.me/api/drupal/function/drush_server_home/7\nhttp://api.drupalize.me/api/drupal/function/_drush_find_commandfiles/7\nhttp://api.drupalize.me/api/drupal/function/_drush_add_commandfiles/7\nBut registering them in wp-cli.yml instead of automagicly searching for them and then including them also sounds good.\nSo --require= doesn't needs an installed WP?\n. I think it's\n\nif you have the gem ronn installed, you just need to run wp core --man in your webroot\n. Ok, gracias!\n. :) here #366? Not the right command though haha\n. Cool, but in this pull?\nWanted to make a different branch for that.\n\nOn Wed, Mar 27, 2013 at 9:42 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nYou could create a new scaffold.feature file which just tests that STDOUT\ncontains whatever you passed as --label.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/365#issuecomment-15551819\n.\n. > create branches in the main\n\nWill do!\n. Cool, thanks. Btw I was think of an simple function, assertCachedFile to split thing up?\nOn 10 mei 2013, at 23:08, Cristi Burc\u0103 notifications@github.com wrote:\n\nI think I'm going to cherry-pick the commits that update the scaffold.feature file and clean up the \"file should exist\" implementation. Then, you can continue adding tests for wp scaffold plugin etc. Cool?\n\u2014\nReply to this email directly or view it on GitHub.\n. And that will teach me of creating a wp-cli branch outside the org. :) I'm off, gl!\n\nOn 10 mei 2013, at 23:08, Cristi Burc\u0103 notifications@github.com wrote:\n\nI think I'm going to cherry-pick the commits that update the scaffold.feature file and clean up the \"file should exist\" implementation. Then, you can continue adding tests for wp scaffold plugin etc. Cool?\n\u2014\nReply to this email directly or view it on GitHub.\n. Your approuch, is that the kind of creating an \"image\" of the current files located on the server or one that relies on plugin and core versioning numbers and creates a clean install after restoring?\u00a0\nIf I can refer to your word, compressed version, then I think you are aiming at a kind of image creation method. Si?\nEdit* I think, looking from a shared hosting perspective, one should keep in mind that somebody has altered some core files or plugin file. So a wp core download isn't the solution. \n. o// \\o \\o/ \nSolved thanks!\n. Gracias, will pick it up today!\n\nOn 11 mei 2013, at 00:12, Cristi Burc\u0103 notifications@github.com wrote:\n\nAll yours, @jmslbam.\n\u2014\nReply to this email directly or view it on GitHub.\n. Updated the to do list in the PR description.\n. Whoops, got it.\n. I suggest merging the Behat test with the one above. Less code, same result.\nBesides that, tested it and everything's sweet. Thanks!\n. Sweet\n. Add them to the global wp-cli.yml?\n\n--template_wp-config=<file>\n--template_plugin=<file>\n--template_child-theme=<file>\n. :) True, \nSo adding all these arguments makes them show up in the --help. This could add up to a large number.\nKeep them minimized, just like we minimized the scaffold cpt and tax arguments.\nStill +1 for the idea.\n. Me too. wp-config.php has a lot of settings and adding all these arguments will clutter the list. So another option of reaching this goal (--wp_debug etc) should be choosen.\n. Yeah all options are an optimalisation of the current code.\n. This landed here https://github.com/wp-cli/wp-cli/pull/1108\n. Would it be overkill if key.yml could function as a possible fallback / alternative?\nCuz saving large options in the .yml files can make things bloated.\nEverything in one file could make it really indecipherable..\nI've seen this while exporting features from Drupal or Advanced Custom Fields exports with WordPress.\n. Yes indeed custom_command.yml \nBtw, these have overlap right #515 \n. Make it optional or only for required parameters?\n1. Prompt only required parameters, wp core config -pr\n2. Prompt all required parameters, wp core config -pa\n3. Default for required parameters, and optional for additional parameters.\nwp core config + wp core config -p\nDon't want this to default prompt all parameters when one does this on a command with a lot of parameters. Although you can just exit the commando.\nFor example, --dbpass= isn't mandatory, but what if you have 5 not mandatory parameters. Don't want to enter all empties.\n\nAditional could have: show prompts left to go.  Nothing more irritating then not knowing how many prompts / steps you have to go, especially when there all a lot of steps.\nUser: wp core config<CR>\nWP-CLI: (1/3) --dbname=\nUser: some_db_name<CR>\nWP-CLI: (2/3) --dbuser=\nUser: some_db_user<CR>\nWP-CLI: (3/3) --dbpass=\nUser: <CR>\nWP-CLI: Success: wp-config.php file created.\n. Ok! Am wrapping my head around it\n. Core unit test fails on the --extra-php test. Hope this is already fixed or I shall investigate further. \nWeird though, because when I test it locally on a working project it works.\nAnd if I cd to the tmp dir and run the command with a existing DB and user it also works.\nShould I git pull or rebase to get the latest version?\n. Will rebase fetch and rebase btw\n. Well the thought behind new synopsis parser is to enable --foo[=bar] and [--foo[=bar]]\nThese enable you to have --dbname[=<name>]. \nWhy you could ask?\nCurrently --dbname will be unset() and throws the missing error. One could not even check if it is empty() within a command because $args['dbname'] doesn't exists and the command exits before the command itself is ran.\nHere https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/SynopsisParser.php#L49\nAt this moment we first have to fix the above because and then work towards the whole prompting of input.\nStuck / Current state\nCurrently I'm wrangling with the regex that is being used at the preg_match on https://github.com/wp-cli/wp-cli/pull/570/files#L0R108\nI'm  thinking of switching the flavour checking and the type checking. This way the regex gets easier because we only have to check a string without all those brackets.\nSunday is the first next moment I'm diving back in. If I don't get any progress and get stuck some more I will notify and will gladly receive some help :) Sound ok?\n. Behat doesn't run anymore... and pulling master in neither. Master does run the behat tests so it must be something in this branch.\nIf someone could help me out with this part?\nI'm  off to sleep. :)\n. Did both already before asking for help. \nI ran PHPUnit and all passed. But Behat didn't gave a notice, nothing. Just blank. Then I pulled master and fixed the merge conflict. \nThen ran PHPUnit again, all passed. Still no Behat.\nThen I also ran composer update, same story. \nJust came home, ran Behat and got the \"beforeSuite\" hook Behat error. Pulled master again to fix it.\nThe error was gone but Behat still hangs. master works. \n```\nFeature: Have a config file\nScenario: No config file\n```\nSo I am trying to get some more info from Behat with things like vendor/bin/behat --verbose --stop-on-failure but nothing. Also behat --dry-run completes everything.\nBtw I also cleared all Behat data from /tmp/wp-cli-test-* , but will do it again.\nHope to get more feedback from behat by debugging stuff like Given a WP install\n. Debugged cleared that it hangs on:\n$this->proc( 'wp core config', compact( 'dbprefix' ) )->run_check( $subdir );\nhttps://github.com/wp-cli/wp-cli/blob/master/features/bootstrap/FeatureContext.php#L177\nBut I have to go right now. Will pick it up tomorrow after work.\nBtw @scribu still thank you for having a look at it this morning,  I know time is precious. I appreciate it.\n. > I moved all the validation logic out of the SynopsisParser class, since it was getting in the way.  \nThanks, better indeed.\n\nIs there anything else that you want to do here, besides adding more prompts?\n\nNope, I want to keep it this way. No more new functionality. The whole prompting and new synopsis  mixin in 1 PR is more then enough. It even crossed my mind to create new PRs but that may be madness.\nregex assistants\nCurrently I had this gut feeling that without the complete regex typos in the synopsis would be noticed. \nI just made a typo --brand=[<brand>] instead of before the equal sign --brand[=<brand>] and PHPUnit passed.... So I need a correct / beter pattern. This one only check for brackets. (help please :) )\nAfter the regex focus is on more unit tests and Behat test.\n. > The later version makes more sense, because it describes the logic better. For example, 'optional' is either true or false; it can't be both.\nAgree, that is more clean and sane.\nNight night btw :)\n. Maybe a new PR would be sane :+1: \n1 for the synopis and 1 for the prompt after the synopsis is read.\n. \\o o// \\o/ Gracias and will do!\n. Closing this one, nothing to see, please move along to wp-cli/pull/621 :)\n. :)\n. You use the return value (post_id) to attach the imported file to. --porcelain is your friend.\nwp media import ~/Pictures/jaimemartinez.png --post_id=$(wp post create --post_name=test1 --post_title=test1 --porcelain)\n. Yeah I saw the notice. Will add the notice to the related #586 issue, thanks for reporting. Glad it still worked out.\n. Can't reproduce on Ubuntu... will try OS X tomorrow.\n@iPhrankie what version of wp-cli and / or OS are you one?\nwp --info\n. :dart: \n. lol it closes this one even before it gets merged...\n. Will do next time, thank you for the tip.\n. Maybe change .bashrc with .bash_profile https://github.com/wp-cli/wp-cli.github.com/blob/master/installer.sh#L95 because default terminal doesn't load .bashrc when opening a new tab? Right, or am I missing something?\n. I also came along the AllowUnicode = Off notice when installing on some Mac OSX with MAMP. Fixed it and moved along. Will check monday what version of MAMP and OSX etc. is was on.\n. The prompt behaviour \n@danielbachhuber and I talked about --prompt that will trigger an interactive WP-CLI.\nA pro of this will that it will never hang. Not even with the Behat tests :)\nI can extend WP_CLI::prompt to accept $assoc_args = array() and check for 'prompt'. If not available return an empty string so the show can go on.\nI think it's good to explicitly force a interactive state and not make it default behaviour. Maybe in the future it can get a setting in wp-cli.yml\nWrting PHPUnit tests\nSo writing test for this prompt will open, as you @scribu like to say, open a can of worms...? Correct me if I'm wrong. If you let me solve this issue... then you gonna have a bad time :) Just a bit too deep in the rabbit hole.\nhttp://stackoverflow.com/questions/9158155/how-to-write-unit-tests-for-interactive-console-app\nhttp://stackoverflow.com/questions/8348927/is-there-a-way-test-stderr-output-in-phpunit\nBehat tests \nI looks like writing a test for wp core config --dbname=foo --dbuser=ano --dbpass will hang and I kind of don't have a clue if this is even possible.\nHope you, @scribu and @danielbachhuber,  can enlighten me on the tests because if you ensist on having these tests even if it means refactoring the whole Stream part. Then, then I need some help :) and then we need to create a new PR for this.\nThanks\n. This landed here https://github.com/wp-cli/wp-cli/pull/673 \n. Hola, So I tested it by making --title an assoc arg with an optional value --title[=<site-title>] and found the same mis-behaviour.\nCould you review the new synopis-optional-value` branch here https://github.com/wp-cli/wp-cli/compare/synopis-optional-value\nI added more information to the commit messages description, but you have to toggle them open.\nDidn't felt the need to open a PR, but if it is, let's do it.\n. Yupp, but my reply isn't complete and I'm note satisfied with the amount of research of walking through the whole proces ( and keeping in mind why we started this optional value part).\nwp be-cool completes with the notice that no mandatory key is set. In this PR.\n\"missing --$key parameter\" which is correct\nThen I asked myself again:\n\nWhat use is it, to have optional value?\n\nThat the arg doesn't get unset by the validator if it is optional.\n\nBut why the different behaviour between a optional arg and a mandatory arg? \n\nIf a mandatory args doesn't have a parameter, the assoc arg kind of becomes a --flag. And flags aren't suppose to be mandatory. Always optional.\nSo behavioural it should be unset and be to 'unknown', technically it should not.\nEvery time I get bounced around by the thought we started this whole thing because of the prompting. \nAnd then I start testing with thing like \n/**\n * @synopsis --handshake[=<secret>] [--a=<b>]\n */\nwp be-cool --handshake=fist --a\nAnd get all weird responses that --a isnt a assoc arg but is available in $args.\nBut currently, I have to focus on some other thing here so really don't have any time left to investigate it more and deeper untill next week. \nSorry to keep this hanging like this.\n. Okidoki, ready for merge. Night night!\n. @danielbachhuber \nAnothr command could be wp media regenerate\nIt has a --yes flag, which we could confirm() for before prompt all args? Because in this case, it kind of overwrite the need of prompting.\nOr is this to far ahead?\nwp media regenerate\nDo you realy want to regenerate all images? [y/n] y\n@scribu \n\nScribu \"Some edge cases:\"\n\nYou are talking about the assoc args with an optional value --c[=<c>]\n/**\n * @synopsis <file> --a=<a> [--b=<b>] --c[=<c>] [--b[=<b>]]\n */\nThis PR with master pulled\n\u00bb wp be-cool --prompt\n1/4 <file>: file\n2/4 --a=<a>: a\n3/4 [--b=<b>]: b\n4/4 [--b[=<b>]]: \nWarning: The `wp be-cool` command has an invalid synopsis part: --c[=<c>]\n--c gets unset and won't be prompted for.\nWith this addition it gets prompted https://github.com/wp-cli/wp-cli/commit/fda23068bfac6baba31b1445a551605f19c048a8 from https://github.com/wp-cli/wp-cli/pull/623\nBe that that can of worms ;)\n\u00bb wp be-cool --prompt\n1/5 <file>: file\n2/5 --a=<a>: a\n3/5 [--b=<b>]: b\n4/5 --c[=<c>]: c\n5/5 [--d[=<d>]]: d\nBut, we don't use this variantion so we kind of not need to worry about this boy right now?\n. Woke up and wanted to add this :)\nJust like you said, there is and quite not will be use-case for  --c[=<c>] this edge case works as aspected.\nIn the future we might want to use an other kind of prompt for the --password that also masks input. But that's a different PR / Issue.\nCiao\n. Nice!\n. 1) #673 stated, all optional and mandatory. I think this is ok, see 2).\n2)  Even prompt fully optional args like [--foo=]. So, if you don't want it to have a value, just hit enter for an empty value. \n\nPlease enter a value for --key,  \n\n3) Don't know how to manage them combined, sorry, don't understand this question.\n4) A additional syntax for the synopsis? If I understand this correct, nope, but please enlighten. \nCurrently every possible variation is include in the synopsis parser\n--foo=<bar>, [--foo=<bar>] , [--foo[=<bar>]], --foo[=<bar>] but the SynopisParser doesn't have to be touched, I think. Just the SynopsisValidatior\nOne could adjust the SynopsisValidator to include the missing assoc_args / key in the $errors array or something in that direction. \nThis way you can prompt these missing args in SubCommand after validate_args has run. Alter this mehod to echo stuff or else if --prompt is set, prompt?\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Dispatcher/Subcommand.php#L79\nThis way you don't need to change any commands like my first shot was like in #621 . And that is not what the most effiectient way in my mind.\n\nI might be wrong, but I think that the extra abstraction layer here could lead to other complications.\n\nWell it could be just a step / check in between instead of a whole new layer. \nHope it sheds some light.\n. Also this PR should take care of having to repeat all those --prompt values\nhttps://github.com/wp-cli/wp-cli/pull/897\n. On my mobile so can't search correctly but as @scribu said, WP has functions to extract media. It was build for the new mediaElement integration and that future themes just like twenty thirteen  etc. don't have to integrate it themselfs.\nThis was a ticket I found quickly, but will search for it some more in the morrow.\nhttp://core.trac.wordpress.org/ticket/22960\nStuff I thought like get_attached_audio and get_atteched_video.\n. Hi @vvondra could you enlighten us a bit what you mean with\n\nan issue URL to post in a workaround commit message\n\nIf you mean forking and sending a Pull Request then that's something we can't help you with.\nCiao\n. HTML Entity name works... \n&amp;minus;&amp;minus;network\n. \\--\n@scribu I sugest this option.\n. Btw @scribu the facts that phar fails, explains why I need to install Kramdown manually?\nLooks like not, but just asking.\nvendor/bin/phake\n(in /Users/jaime/projects/wp-cli.org/wp-cli.github.com)\nPHP Fatal error:  Cannot redeclare builder() (previously declared in /Users/jaime/projects/wp-cli.org/wp-cli.github.com/vendor/jaz303/phake/lib/functions.php:3) in /Users/jaime/projects/wp-cli.org/wp-cli.github.com/vendor/jaz303/phake/lib/functions.php on line 7\n. Thanks, saw the updates. I got the twig template here setup and started styling it. Will work on it some more tomorrow.\n. Don't have right to create branch on package-index repo. Missing out all this fun :)\n\n. Gracias, branch is style-package-index\nOne main thing is that I moved the instructions on how to add your own repo to the website.\n_Reusing code_\nI thought about running some jquery.load to extract the header and footer + analytics. Didn't like the overhead with each pageload so for now I have copied them into the template.\nAt this point the package-index still has some own css, but that could me merged into main wp-cli.org styleheet at some point.\nFor now, ready to merge.\n. Could you give us a specific command or example?\nOr is this happening globally?\n. My architecture knowledge may not be great but maybe a /php/WP-CLI/fetchers/ dir may come in handy / be nice?\n. Never noticed that :)\n. lol, never noticed that either ...\n. Do you have WP_DEBUG enabled? I hope so, so it gives you some more info.\n. So those 2 installation methodes prohibit us from using ~/.wp-cli/ as a spot to place all WP-CLI stuff. Too bad.\nI could make the Util look for ~/.config/templates/$template_name instead of WP_CLI_ROOT only.\nAren't there too many other tools that use the ~/.config/` directory?\n. Scenario A.\nIf I run wp scaffold plugin zombieland --template_path=zombie.mustache then:\n1. If template_path starts with a slash it will assume it is an absolute path and won't absolutize() it.\n2. Else search for zombie.mustache in the dir where the command it ran from. It's absolutized.\n3. Else search if zombie.mustache exists in global ~/.wp-cli/templates/ dir.\n4. Else search if it exists in WP_CLI_ROOT/templates/ \n5. Else will die on a PHP error that get_file_contents needs a file :)\nScenario B.\nProject level wp-cli.yml has \nscaffold plugin:\n  template_path: 'zombie_mustache'\nand if I run wp scaffold plugin zombieland then same as scenario A :)\n. Ohyeah will look at the unittest fails.\n. @scribu You agree that child-theme scaffolding would be an overkill, because you can already set most of these vars and I don't see much variation in the new child-theme.\nMaybe someone would like to add a bunch of CSS selectors to it? Otherwise, don't know.\n. Child-theme\nYupp, not a large use case, but indeed for completeness.\narg --template_path vs a global template dir\nMy first thought in the beginning was indeed B) Check ~/.wp-cli/templates/*.mustache if it exists other use the default template provide by WP-CLI. Dead simple. \nI've been trying to write down all scenarios down which only lead to more / too much possibilities & options to configure. This one is just clean and easy to get or explain.\nThis option could even give you the ability to replace  wp-config.mustache for all I care so you'd have an alternative for #939.\n+1 for global templates dir only\nwp scaffold plugin-tests\nGlad you mentioned this one. I was also thinking about more than just simple template file. But I think one should  try something like https://github.com/yeoman/yo for those special/extended needs and not WP-CLI?\nThats why we should not implement custom templates for plugin-test because it isn't just 1 file.\nMoving pluralize() to utils\nEither way a good choice.\n. [stalone-voice]So you want use-cases, I can give you use-cases[/stalone-voice] :)\nI think the overal thought behind the PR is \"Different needs and DRY\"\nThe plugin\nIt all started on a sunny WP Meetup were Barry was showing some easy custom scaffolding done with PHPStorm editor based on this template https://gist.github.com/barrykooij/7632945\nSome of the tweaks are:\n- Default values like Author URI, Author etc.\n- Different versioning\n- The skeleton the Class\nNothing complex, but just nice. May may even go for a widget template... I know whole different story.\nOne other thing is that I use Sublime Text and not PHPStorm.\nCPT\nThis little bugger goes way back. All the way to the first implementation of scaffolding.\nIt's a small things like always having to overwrite these points:\n- Default values like\n  'rewrite' => array('slug' => 'products'),\n  'supports'          => array( 'title', 'editor', 'thumbnail' ),\nor for the lazy, one could add this although I would not prefer it :)\n'supports' => array(\n    'title',\n    'editor',\n    'excerpt',\n    'thumbnail',\n    //'author',\n    //'trackbacks',\n    //'custom-fields',\n    //'comments',\n    'revisions',\n    //'page-attributes', // (menu order, hierarchical must be true to show Parent option)\n    //'post-formats',\n),\nTAX\nSame a CPT's.\n- Default values\nPersonaly I find myself always, really always setting this default values\n- 'hierarchical'      => true, instead of false\n- and also the rewrite value just like the CPT above.\nIt makes me look up the file and edit it, while I can set it once and never look back.\nChild-theme\nNot that big either, but still:\n- Default values\n- Adding base CSS selectors\nWidget\nNot this place because there isn't even an wp scaffold widget --theme || --plugin but that was because a widget template would be to much of a personal thing to create base template for. Therefor it never got created. (no refs, just by heart). With this in core, it suddenly gets possible. I have found myself copying a widget boilerplate many times.\nLike I said above:\nIt's all about personal preferences and being able so to customize WP-CLI current tools to one's own wishes and not having to repeating yourself.\n. Benefit would be that you keep people running composer update in the wrong directory :) \nCan't help you further with this, maybe @danielbachhuber?\n. \nDon't know :) Think I limbo-ed WP-CLI. Must have done something last week while I was still sleeping ....\nWill clean install.\n. Aaaand it's gone :) \nI remember. I used the installer.sh on my presentation / talks/ After that I ran ./utils/dev-build this week to start developing.\n. Here? http://codex.wordpress.org/FAQ_Security#Why_are_some_users_allowed_to_post_unfiltered_HTML.3F\n. True, so default unfiltered unless the author has a no cap. to create a post with unfiltered html.\nOn 5 jan. 2014, at 18:30, Cristi Burc\u0103 notifications@github.com wrote:\n\nWait, this is still a bug. When you're creating a post from the command-line, you clearly have admin access, so unfiltered HTML should be enabled by default.\n\u2014\nReply to this email directly or view it on GitHub.\n. Note to self: http://endorkins.com/2013/08/27/disable-wordpress-kses-to-prevent-html-filtering/\n. Weird, you on zsh?\nWhat does you mysql.default_socket = in you php.ini says?\nAnd what does which mysql gives you?\nI got the nocorrect mysql that is caused by zsh, but whence -p - mysql gave back /usr/local/bin/mysql while yours is /usr/local/mysql/bin/mysql.. not the same and I'm on default installation on Maverick.\n. Just shooting,  type -a mysql?\nhttp://unix.stackexchange.com/questions/10525/how-to-use-which-on-an-aliased-command\n\nBtw, did you install a different mysql than the default? And if it's a clean install and you added the correct mysql to your path, did you source .bashrc it? \nSkip the whole \"Why not homebrew through Homebrew\" question :) \nYou can always alias it in your .bashrc like alias mysql=/usr/local/mysql/bin/mysql, this looks more like a machine config issue than a WP-CLI thing, I think, right?\n. Confirming it here on another device.\nhttp://codex.wordpress.org/Function_Reference/is_plugin_active\n. I don't expect it to work.\nwp plugin list shows a Uppercase plugin name. The plugin dir is uppercase, and the file in the plugin dir is uppercase.\nwp plugin deactivate test-me returns a green succes message with the message that it is deactivated. This should return an error because it is not deactivated.\n. Is this possible?\nEvery push to master triggers a merge on 2 different branches which the other installation mechanisms prefered? A bit like the wp-cli.github.com pages?\n. wp_insert_user( $new_user ) returns the $new_user['ID'] on https://github.com/wp-cli/wp-cli/blob/master/php/commands/user.php#L564\nIt does does $user_id = (int) $ID; which it will return at the end.\nSome lines further $old_user_data = WP_User::get_data_by( 'id', $ID ); does a SQL query, but that data never gets used to check if an user exists....\nFor WP-CLI an extra check could fix this.\n```\n$user_id = wp_insert_user( $new_user );\nif ( ! get_userdata( $user_id ) ) {\n    unset( $existing_user );\n    $user_id = new WP_Error('user', 'User doesn\\'t exists' );\n}\n```\nWill open a PR.\n. The \"Don't run plugins\" has already been handled in this PR so it probaly won't get merged\nhttps://github.com/wp-cli/wp-cli/pull/940\nAbout the GIT part, just created 3 different branches from the master git checkout -b branch-name and push to your remote with git push origin branch-name. From there on make the PR.\nAlso click on the little red x here above to see why the builds are failing. With a green light, the don't get merged.\nThe RPM and root thing aren't mine to review, not enough insights on these two.\n. Ah hi there @scribu :)\nIf the plugin part gets in, I'm more in favor of the #940 variant. Because it's more easier to only suply the only plugin that is broken then adding all but that one broken plugin.\nFor example, current woocommerce makes WP-CLI go beserk so only skipping that plugin would be easier.\n. > having all plugins disabled won't affect most CLI commands?\nWell I also agree on that point. It's good for all commando's that don't interact with things like content & media (add_image_size) etc. Don't load what you don't need.\nWhat I don't think would be ok, is that if one would suggest to fix #940 with a MU-plugin but have this in core. Both related, and valid, functionality / use-cases.\n\nAt this moment I have a cron-job running that first disables 2 plugins by running wp plugin deactivate bad-plugin, then running my own command which is loaded from a plugin and after that enabling the bad plugins again. \nBut then I have another plugin that I can't deactivate, but does throws some notices on the commandline and thereby poluting my cronjob output.\nYes, it would be better to unload them via a MU-plugin if WP-CLI is ran, but I could also do this or as #940 states:\nwp jmslbam import-users --skip-plugins=\"bad-1, bad-2, bad-3\"\nor run this as this PR states:\nwp jmslbam import-users --enable-plugins=\"my-custom-import-plugin\"\nChoosing to use --skip or --enable all depends on the use-case.\n. Meanwhile, is it an option to wrap wp command from within the root .bashrc?\n@scribu suggests this method for quite some other issues / for solving other problems.\nif [ `id -u` -eq 0 ]; then\n    fi\nHope Scribu can help you.\n. If I'm correct it runs as your user www-data automaticly so you don't have to do anything specific to run it.\nJust run an command without you webroot, that's it.\n\nOn 16 sep. 2014, at 20:12, Twan van Landschoot notifications@github.com wrote:\nWhich user should be used when using wp cli? Should I create one ? Or use an already created user?\nI'm just getting started using WP CLI and Ubuntu so I'm not sure which user I should use. I'm running  ubuntu 14.04 LTS and I've got the following users:\ndaemon\nbin\nsys\nsync\ngames\nman\nlp\nmail\nnews\nuucp\nproxy\nwww-data\nbackup\nlist\nirc\ngnats\nnobody\nlibuuid\nsyslog\nmessagebus\nsshd\navahi\nmysql\nCould anyone advise or point me in the right direction?\nKind regards :)\n\u2014\nReply to this email directly or view it on GitHub.\n. Could you provide us the command / how you are installing ACF. I install / use ACF on a regular base and I never ran into an issue.\nAre you using the regular version or ACF lite? \n. Great that it works. Btw, check out this gem https://github.com/hoppinger/advanced-custom-fields-wpcli\n. cc @jeremyfelt?\n. Yeah, indeed whoops.\nShe still has one point open how to verify if a role has been succesfully reset. Maybe you still could help her tha??  https://github.com/wp-cli/wp-cli/pull/999#issuecomment-34527951\n. Do you all agree the direction where the prototype is heading?\n. Agree on the focus part and possible improvements given by both. Added the survey and example results to the out-of-scope so it doesn't get lost.\nHave asked when @aidafusterduran when she can start designing.\n. @aidafusterduran is scheduled to work on it in week 16, that's next week. Some :poop: hit the fan here with design capacity :)\nI think releasing the survey before the new design could be a better thing to do.\n. @suzannequartel Starts today with the redesign ^^ I briefed her last friday. She has taken over the hours of Aida.\n@suzannequartel As I said, if you got questions for one of the above, feel free to ask them here :)\n. Hi @szepeviktor, I understand the Github favicon frustation :) Will check to empty the favicon.\n\n\nUpdate on the designs\nTo break some radiosilents :)\nWe couldn't create complete full designs, so I will cherry pick the components where we have focused on and will asks for some more feedback when needed.\nWe will implement the new components by code instead editing all PSD's which is just to time consuming.\nNew components\nOveral consistency\nLike @danielbachhuber  said, the header looked dettached and everything know looks a bit more one whole.\nTable\nhttp://wp-cli.jaimemartinez.nl/commands/\nI have uploaded some more changes here http://wp-cli.jaimemartinez.nl/ .\nOld version can be found here to compare http://wp-cli.jaimemartinez.nl/1/\nMoaaaar\nWill continue to work on this this and next week. Next week is WCNL and will be hacking on this on the contributers day ^^\nWill ask and check the checkboxes above in this issue, when a component is ready for a review and or feedback.\nCreate branch\nWill create a new branch this weekend to push this version.\nCiao! \n. Thanks @ryanduff and @szepeviktor I added the overflow line and removed the favicon for now :)\nFurthermore\nBlog detail\nThe main thing that needed work done was highlighting the release points and most important the breaking changes. This does require some extra markup so like the read more above I need to walkby every post to add it. No probs.\nhttp://wp-cli.jaimemartinez.nl/blog/version-0.14.html\nBlog archive\nAdd the read more tag and some better seperators. Will need to add more \"read more\" tags, but after first release, cool.\nhttp://wp-cli.jaimemartinez.nl/blog/\nCode highlighting\nThis was, while working on it, a bit of an overkill. Bash doesn't gets highlighted and that 2 snippets of PHP that needed highlighting can wait.\nWhy postpone? Because Prism.js highlighting and the current code blocks didn't went along somehow. The first line always had some weird negative text-indent. This can be made a seperate issue so we can start using the new site.\nPackage index\nThe package index also needs the new header structure so I'll add it to the list.\nSearch\nSearch has been styled, but not implemented in this branch\nhttps://github.com/wp-cli/wp-cli.github.com/tree/add-global-search\n\n\nhttp://developmentseed.org/blog/2011/09/09/jekyll-github-pages/\nhttp://www.wirywolf.com/2014/02/28/implementing-search-as-a-jekyll-plugin.html\nSitemap\nFound the proper sitemap.xml plugin. Will implement it after the release of the design.\nhttps://help.github.com/articles/sitemaps-for-github-pages\nSome small quirks / future enhancements\nWill developing I came across some small points that I can be done after the first release because these a more technical enhancements:\nhttps://github.com/wp-cli/wp-cli/issues/1055#issue-28860628\nSo besides the package index I'm finally there :) \nOh yeah, and making it responsive will be a future enhancement also, will also add it to the list.\n. Package index has gotten it's redesign also. Damn that testing if the PA it a mother.\nPreview: http://wp-cli.jaimemartinez.nl/package-index/\nPR: https://github.com/wp-cli/package-index/pull/29\n. Ah, looks like you are using Chrome and I only viewed the site in Firefox :) So it's the font that isn't rendering like I thought it would. Will dive into it!\n\n. @danielbachhuber Well I fixed the header by settting it the text to bold, but this doesn't work for the code text. That only makes it more ugly. Even tried Source Code Pro, but that didn't fit the design :) This is just mainly how Chrome just renders this text. \nI did tweaked the overal readablity a bit more.\n@szepeviktor Yupp, that's the hover color .. not a bug :)\n. Yupp, would be delighted to do :) I will merge in all the latest changes for .org and the package index.\nYou want me to push to master or will you merge that in? Because I'm GMT +1 and when you wake up I will be on a birthday\nSo I will be on around 11:00 when you will be after partying at wcsea :)\nSend from phone\n\nOn 28 jun. 2014, at 22:43, Daniel Bachhuber notifications@github.com wrote:\n@jmslbam up for rolling this out tomorrow?\n\u2014\nReply to this email directly or view it on GitHub.\n. I bundled all open points in the first comment to pick up as individual issues. Closing this one because it has fullfilled it's purpose.\n. Well WP-CLI seems to work now so you could cd to the directory where the WordPress installation is and run whatever WP-CLI command you like.\nExamples: https://github.com/wp-cli/wp-cli/wiki/Example-Usage\n\nI could not understand the last part of your question, please elaborate it more:\n\nre\nABSPATHwp-admin/includes/plugin.php and\ninclude_path='.:/usr/lib/php:/usr/local/lib/php'\n. Will get this one\n. wp media regenerate uses this the --yes as an option to skip the confirmation\nI think we should keep this equal instead of implementing --force && --yes\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/media.php#L18\nIf file already exists\nThen ask for confirmation\nThen proceed based on the question\n\nOr  \n\nIf file already exists and --yes flag is passed\nThen proceed and overwrite\n\nAgree? \n. Don't know if this https://github.com/wp-cli/wp-cli/commit/0acec927c649e1456f7526aed639b50b4c7e3ed8 solution is the most gracefull, but I had to add something so it would exit when prompting multiple file overwrites:\n. Make that wouldn't exit when prompting multiple files\n. Hi @jopacicdev, so know we know that this is not an bug, we'd like to refer you to sites like Stack Overflow or Google for more general questions on How to does this in WordPress.\nFurthermore maybe this other tools could bring you any further\nhttps://interconnectit.com/products/search-and-replace-for-wordpress-databases/\nhttps://github.com/interconnectit/Search-Replace-DB/pull/62\nGreetz\n. Hmmz indeed if ( !is_multisite() ) { already does that... so I found out some code of mine prohibited defining MULTISITE in my wp-config.phpFixed that and now it doesn't write the extra code anymore. So I was to eager with reporting... sorry.\nI doubt that it's needed to add the extra check to find out if there is already is a define( 'MULTISITE', true ); in the wp-config.php. It was my code the skipped setting the constant.\nLet's not add this little extra code untill it is really needed.\nThnx for the reply\n. You can register a regular WP-CLI command, like in the WIKI. \nAnd run other commands using something like WP_CLI::run_command( array( 'scaffold', 'plugin-tests', $plugin_slug ), $assoc_args );\nClose enough?\n. You don't include WP-CLI in you WordPress installation. WP-CLI loads your WordPress installation. Lol, that would make a good meme :)\nYou want to use code from WP-CLI? You can't include code from WP-CLI into you own theme of plugin. Well you shouldn't :) You should always run a command from the cli or indeed trigger a command with shell_exec. I never tried it though.\nWP-CLI is all PHP so does runnin PHP from the command line sound weird to you?\nWe do suggest to limit the tickets here to issues/bug or feature requests. These kinds of \"How to's\" should be asked on something like Stack Exchange. Cool?\n. Ok ok, little quick reply, because I think you just want to create you own WP-CLI command?\nhttps://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook#anatomy\nElse pass me the SE link ;)\n. The synopsys parser doesn't work so that the passed version could not be replaced with the version one passed.\n. Could you provide us with more information please.\nwp cli version Which WP-CLI version are you using and which WP version?\n. Hi Viktor,\nGood to here you are diving into WP-CLI. If you are interested in fixing an other open issue just go ahead. I think it would be helpfull to announce that you are working on a certain issue by refering to the Pull Request you are working on for that specific issue.\nGood idea?\nStill thanks for notifying this open issue.\n. One other thing that sometimes works for me is to individualy update the specific plugin instead of running wp plugin update --all\nDoes this works?\nAnd of course all of the asked questions above :)\n. I'm almost thinking that antivirus or better-wp-security are interfering. Could you run the update command with the new --skip-plugins=better-wp-security,antivirus and / or adding the other plugins.\n. Hi I'm back. \nWell, _n is a WordPress native function while ngettext must be shipped with your PHP when installing PHP. For example: Mavericks doesn't ships intl by default so wp media regenerate returns an error by default.\n. Use something from http://unsplash.com/\n. Got the image from, because I don't think this one will go down untill the better fix lands\nhttps://medium.com/design-ux/62ae4bcbe01b\nCan't do more right now, cause I have to run out\n. You can get the .phar with this fix from here nightly build.\nhttps://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-nightly-via-phar\n. Is this code specific to Better WP Security? If so, the issue is an upstream bug.\nYou can ask them to check if WP_CLI is defined as constant and not add that filter, cool?\nIf upstream, this one will be close btw.\n. Hi Viktor, thanks for the bash-scripts. As this is not really an issue I'm closing this to keep the tracker clean.\nMaybe blogpost on you own site / Twitter etc would be a better place to announce these kind of helper. Ciao!\n. Hi @josefjezek \nManaging the wp-config.php file after it has been generated isn't possible with wp-cli. You are better of with something like sed in a possible custom script or just edit the file with nano or vim.\n. A similiar issue https://github.com/wp-cli/wp-cli/issues/1061\n. Duplicate: https://github.com/wp-cli/wp-cli/issues/939\n. Well /usr/bin/ is specifc computers installed with a Unix variation. I don't know how to enable something globally on the commandline for Windows, but that's the direction you should search into.\n. Well, you are able to close it yourself because you created it :)\n. You can just re-download the .phar file and replace the current one a.k.a. just rerun the instal-steps. Cool?\n. Hi there,\nYou can read options with the wp option get command: http://wp-cli.org/commands/option/get/\nSetting up home page as front could be dont with the wp option update command: http://wp-cli.org/commands/option/update/\nYou can set the page_on_front || show_on_front option by running the above in combination with that key and the page_id:\nwp option update page_on_front 2\nOr whatever page_id you want. You can find all available options per GUI op domain.com/wp-admin/options.php\nYou have to try which one to use page_on_frontorshow_on_front` can't remember it by heart.\nEnjoy WP-CLI :)\n. Hi Charles, thank you for the examples! \nIf you got a blog, I suggest you definitely put that also up there because on this issue tracker it gets lost / buried & closed. And because this isn't an real \"issue\" I am going to close this to keep it clean.\nWe do got the WIKI for your project to put the link on. So if you could add it to the list underneath the Wrapper section here: https://github.com/wp-cli/wp-cli/wiki/List-of-tools-that-use-wp-cli\nMaybe even add the Youtube movies to the Readme.md of your repo.\n. Again thank you for the code and enjoy WP-CLI!\n. If I'm correct, this check is a done by WordPress internally. I don't think you can register a site / create an account using webmaster@localhost. So in short, WP-CLI isn't the one that's wrong, and could you explain a bit more why you want it to be correct.\nAlso provide a bit more relevant information, like what did you do? Which version etc.\nRegister new user\nhttps://core.trac.wordpress.org/browser/tags/3.9.1/src/wp-includes/user.php#L2016\nis_email\nhttps://core.trac.wordpress.org/browser/tags/3.9.1/src/wp-includes/formatting.php#L1977\nhttp://codex.wordpress.org/Function_Reference/is_email\n. Glad you found the fix!\n. Valid point +1\n. Could you explain this case a bit more?\nEitherway. I think you it's better to ask Yoast for a command to import their settings\nSomething like: wp seo-yoast import-settings [<file>]  so that they can handle the whole importing.\nYou could also use something like https://github.com/danielbachhuber/dictator or https://github.com/forumone/wp-cfm to im- & export multiple settings / options.\n. Hi @boreal, quite the scooby doo mystery, because the CI tests here on GitHub do use 5.5 to test against.\nDo you have some possible already to use vagrant boxes / files to test on?\n. Hi, \nVictor, I phrased my question not so optimal. I hoped you would have a vagrant box.\nYou can create a vagrant file with the online tool https://puphpet.com/\nBecause I don't know if you have Apache or nginx etc.\nAnd what @QWp6t said would be a good one indeed. \nAnyway the php functions are with underscore and the @subcommand set-role are shown in the help.  It's something with the synopsis parser. Still looking into it where it exactly parses the @subcommand in the code. :) \n. So maybe you can try this one also : http://getprotobox.com/\n. No problem and thanks Daniel! \n. And what about just not outputting anything if it exceeds the 20 characters and throw an WP-CLI::Error? Keeps your registering code clean?\nThen even if you do exceed, your ticket with the _doing_it_wrong() will be the back-up notice.\n. Well that escalated quickly :dancer: \n. He's on vacation right now, so there could be a bit of delay here. Hope you can wait an itsy bitsy more :)\n. Se\u00f1or, could you provide us with some more information, because I just don't understand what you are trying to inform us from.\nThis looks like WP-CLI isn't installed, try this http://wp-cli.org/#install please\n. I think you are looking for the constant ABSPATH that refers to the directory in which WP is installed.\n. Hi @MiteshShah, like Scribu said, if you want to fix you're own issue quickly then you could do this by starting to use the .phar files which have been around for quite some time.\nThis is also the current recommended way to install WP-CLI because the installer.sh has been deprecated for some time ( +/- dec 2013 ).\nhttps://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-as-a-composer-dependency-deprecated\nAlso @danielbachhuber if it's deprecated then we might as well remove it from the WIKI to prevent situations like this, cool? \n. Yo will do, I think a create-project like this would be sufficient btw\ncomposer create-project wp-cli/wp-cli:0.15.1 --no-dev\n. @danielbachhuber I updated the WIKI https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods\nBy removing the installer.sh description and extending the information on how to install WP-CLI via composer a bit more.\nI kept the the deprecation notice like @MiteshShah suggested.\nSo it looks like a wrap.\n. Try to create the Build directory without the sudo, in a place where you don't need to sudo. Like in you home directory.\nThe whole notice was added from a security point of view so if you want the message to dissapear you need to adjust your workflow.\nThis is not really an WP-CLI issue, but more a system privilige c.q. bash issue which WP-CLI can't fix for you. So from that part of view we will close the issue.\noh hi, @danielbachhuber :)\n. I think $assoc_args = wp_parse_args( $assoc_args, $defaults ); and some info within the description doc block already does the job in this case?\n. And show a menu to choose from the accepted arguments\n$ Which option do you want?\n1. all\n2. range\n3. single\n. Thinking about it, it should only show the menu when passing --prompt else it should display a warning / exit which shows the accepted arguments\n. @szepeviktor I added it to the repo, because I was already debugging the package-index, but you can see how you can do it yourself here:\nhttps://github.com/wp-cli/wp-cli/wiki/Community-Packages#adding-your-package-to-the-index\nCiao!\n. Hi, WP-CLI uses the internal WordPress core updater. It looks like it will use, for example 3.9.1, https://wordpress.org/wordpress-3.9.1.zip. This is a full zip.\nAfter some tracing I found that WordPress will run this function update_core :http://wpseek.com/index.php?s=update_core\nAt point 3 and the last paragraph says:\n\n3 . Copy new WordPress directory over old WordPress files.\n\nand\n\nIf it is assumed that every file will be copied over, ...\n\nSo if I conclude that when a file is deleted it will be put back in.\nCorrect me if I'm wrong \n. Yupp\n. Agree, don't even make them available when your Core version is lower than x.\nOne could start developing them as a community command at first and then merge them in later just like the whole new feature as a plugin WordPress itself does. This way people who want to be early adaptors can keep WP-CLI and the new feature up to date with ease. This of course when the development may take a while, right?\nCiao\n. Hi Gerard,\nDoes it update when you perform the update command without --local wp core update?\nI couldn't reproduce this one btw, from 3.9.1 to 4.0:\nvagrant@vvv:/vagrant/www/jaimemartinez$ wp core update --locale='nl_NL'\nUpdating to version 4.0 (nl_NL)...\nDownloaden update van https://downloads.wordpress.org/release/nl_NL/wordpress-4.0.zip...\nUitpakken update...\nSuccess: WordPress updated successfully.\nEverything is ok....\nB.\nI haven't experienced any 3.8 > 3.9 issues while having WPLANG on nl_NL. \nBy heart, but not 100%, don't these checks get cached with a transient? Have to check the WP code, that WP-CLI calls, if it gets cleared.\nHave you ran wp core update-db afterwards? http://wp-cli.org/commands/core/update-db/\nBesides that, we should make this part an other issue to keep things seperate, cool?\n. This help me for now if someone still needs to delete stuff:\nwp comment delete $( wp comment list --field=ID --format=csv)\n. First:\nIt's a character thing from what I found: http://stackoverflow.com/questions/22956330/domdocumentcreateelement-unterminated-entity-reference\nDo you have an & somewhere in a username, or none latin text?\nMaybe you could post a copy of the WXR xml file?\nSecond\nhttp://wp-cli.org/commands/export/\nJust use [--post_type=<post-type>]\n. 1. An example of the exported .xml file so for example I could replicate this issue with your data.\n   Hebrew it is.\n2. Just comma seperate them like  --post_type='post,page,other-cpt\n. Hi @KingYes could you still provide a test / dummy XML for someone to test with? Thanks\n. Maybe you can remove the temp file from the  gets WP-CLI cache on the system.\nYou should remove it from ~/wp-cli/cache/core.\nAnyway, the notice you get is because you probably are on a new setup of Linux and haven't set date.timezone in your /etc/php5/cli/php.ini .\nBesides that, the error is thrown by a Symfony component Finder. because it tries to sort on accessTime ->sortByAccessedTime().\n@danielbachhuber This date.timezone is a default setting that has to be set for every clean PHP install. So do we accept this as a prerequisite or do we try and catch it?\n. This is fixed in the next release by https://github.com/wp-cli/wp-cli/pull/1406, so we can keep this example as is. Thanks for raising the awareness though!\n. cc @chefduweb, do you have some advice?\n. Nope happend to me also last week.\nI had a community command and a plugin command with the same commandname. It doesn't add these, but overrules.\n. Hi! \nwp plugin update --all already is available.\nCheck out the docs for more info: http://wp-cli.org/commands/plugin/update/\n. @quadzero you had this issue last time, right? How did you fixed this?\n. This is because the filename is still wp-cli.phar you forgot a step sudo mv wp-cli.phar /usr/local/bin/wp\nThis step, moves & renames the wp-cli.phar in 1 step. That's why the wp command isn't found, the filename is still wp-cli.phar (the third line of you ls -la)\n. you can also run every command with the --skip-plugins flag as in wp plugin update --all --skip-plugins or wp plugin update --all --skip-plugins='better-wp-security'. You can even set in this flag in you wp-cli.yml config so it always skips this plugin. See more info http://wp-cli.org/config/.\nThank you for posting \n. You could pass --path=wp or add it to your wp-cli.yml in your projects webroot:\npath: wp\n. Like Tom says here, it's a meta field of the post type Page: https://tommcfarlin.com/programmatically-set-a-wordpress-template/\nSo you can set it by running the Post Meta command \nwp post meta update _wp_page_template  'template-name.php'\nGood luck!\n. It looks like your WordPress also lives in an other directory, right?\nCan you set your wp-cli.yml config like this / or create one on the same level as your wp-config.php\npath: wordpress\nSee for more info: http://wp-cli.org/config/\nhttps://github.com/roots/bedrock does it like that\n. and shouldn't the ABSPATH be have wordpress behind it? \nLike https://github.com/roots/bedrock/blob/master/config/applications php? \n. the underlying php-cli-tools recently add a feature that one could hide user input.\nhttps://github.com/wp-cli/php-cli-tools/commit/1aba9d7dd8176c6b59186f089cbdee626e67c461\nMaybe you could add a new type of synopis options like {--admin_password} that classifies it as an hidden argument?\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/SynopsisParser.php#L43 \n. > There are no tests for bash completion script, so it's quite likely a bug slips unnoticed into the master.\nJust passed this tool Shellcheck if anyone wants to test shell scripts.. Still gives a offset notice and proceeds with the code and will result in incomplete code.\nWill put the check back.\n. Done\n. Done\n. Done\n. Done\n. Done\n. Done, but I left the parameter id because it is a post-type and doesn't has a $post->attachment_id but $post->ID\n. Not working. Have to look at this. $filename aka $thumbnail is incorrect. Just remove the @ in front of the unlink.\nHave to refactor to make code more readable and variable naming more consistent\n. Done\n. Was thinking about the same thing. Will do that :)\n. Don't really see how that would be implemented, technically :)\nThe reason I did this is because the $slug is the default value, and the $slug also needs the preg_replace(). So doing this after the whole extract_args part, keeps it down to 1x preg_replace, right?\n. True, because when there is a _ or a - in the --label, it is put there deliberate.\n. Yeah, I thought that at some point the scaffolding tests would grow and grow because it houses quite some functionality:\n- cpt\n- tax\n- plugin (tests)\n- _s theme\nSo when editing a test, one could filter run the behat test --tag=cpt so it doesnt run all the tests. \nOff course, the a final check should be ran on the complete feature. But in development, a tag could come in handy.\nAnyway, updated the PR :)\nP.s. You're right about the spelling: \nhttp://docs.behat.org/guides/3.hooks.html#tagged-hooks\nhttp://docs.behat.org/guides/6.cli.html#gherkin-filters\n. Was planning on using that one, but I'm looking for a way to concate a {THEME_PATH} with the \"taxonomy/tax.php\" part. But it looks like this isn't an option, so I think I have to rewrite the step And the file ... should exist or add a new one?\n. Weird, this one runs without errors but it does fail. The only thing different to other commandos is that is returns two success messages instead of one.\nWill look at it some more tonight.\n. Yupp saw that, but when running the locally / manualyl it doesn't give me any error.\n. Even if I run it in the /tmp/wp-cli-guid folder :)\n. Why differentiate the error? If it's mandatory, you have to pass it and stop?\n. Yeah, thought of it also, but then it would look like you could pass --post_types as assoc_args to wp scaffold cpt --post_types.\nNot that the synopis allows it, but still. Felt not right, because a CPT just doesn't has have a --post_types.\nBut if you ensist, I will delete this PR + branch and fix it in a new one.\n. You're always sharp as a knife :) \n. Will do.  The @test is temporarly and I started using these to testing the specific behat test runs. It was easier and faster. On my previous desktop it took ages (90 secs) to rerun a single features. Not fun when debugging some tests at the end of the run.\n\nOn 31 mrt. 2014, at 01:48, Cristi Burc\u0103 notifications@github.com wrote:\nIn features/scaffold.feature:\n\n@@ -72,3 +72,29 @@ Feature: Wordpress code scaffolding\n       \"\"\"\n       __( 'Brain eaters'\n       \"\"\"\n+\n-  # Test for --yes flags\n-  @tax @cpt @test\n  Please stop adding these sorts of tags to Behat tests. They only add noise.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "Viper007Bond": "Heh, I had actually considered about adding wp-cli support to my plugin. It'd be cooler to just have it in wp-cli itself to batch regenerate thumbnails.\n. like\n. I wonder if some type of wrapper could be used. Load WordPress to find the URL and then call WP-CLI from within itself in order to get a new instance of WordPress to load, this time with HTTP_HOST set.\n. Yeah, I read through the source of the command to make sure it wasn't a bug that had since been fixed and found that but I guess since it was returning non-empty (the XML) it assumed it worked.\n. ",
    "rmccue": "@scribu Actually, most REPLs won't print if you also assign it to a variable. (Not commenting on what wp-cli should do, just noting it.)\n. Surprisingly, readline doesn't appear to have any way to do it, which sucks. Only thing I can think of is using ncurses, which doesn't have support on Windows from memory.\n. Not sure how I didn't mention this previously, but on Windows, Composer uses hidden-input: https://github.com/composer/composer/blob/master/src/Composer/IO/ConsoleIO.php#L168\n. > just make the input text match the background\nDefeats the purpose, which is that the password shouldn't be in the history.\n. Scrollback history, mainly. It's not a huge issue for most people, but if you're using a shared screen session for example, it's definitely a security risk.\n. Let's say I leave my terminal open and I get pulled away from my desk. Anyone can come over and simply copy and paste my scrollback history into a plaintext editor (to strip the ASCII codes) and now they have my password.\nThis problem is worse with scrollback logging, or shared screen sessions, or...\n. I'd also like to see --porcelain, as it would make it much easier to build scripts on top of wp-cli. e.g. we have a Puppet script for deployment that uses wp-cli and it would be nicer to parse with porcelain-style output.\n@scribu, I think that format is fine, as it's trivial to parse I/A out of that column regardless of the rest.\n. --version is fairly standard across CLI tools, so I personally think --version should be used instead of --info\n. Maybe both is a better solution, but I definitely think --version should be supported.\n. FWIW, I consider myself fairly knowledgeable about git (I gave a two hour talk about it a few weeks ago), and I still always forget it. Submodules suck. :)\n. This is awesome. :cake: :sparkles:\n. I looked at these a while back and none were really that great, so I wrote my own which you're welcome to use.\n. That's actually why I wrote it; all the others were licensed under LGPL or GPL. I just realised I don't have a license in that repo, so I'll update that, as it's BSD licensed.\nEdit: That's done now.\n. I don't think this is worth the time investment personally. Windows users are more likely to use an installer or PEAR. (I personally just use git.)\n. Right, so what should be used to get a production-ready version, with a fixed version? With Git, we can check out a tag and build it, whereas that's not possible with the installer.sh (AFAIK).\n. It might even be better split into a dev command similar to scaffold.\n. +1 for open $(wp post url 123) over --open. Let's not reinvent the wheel.\n. Thanks!\n. Is there any resolution on this? This is a blocker for sennza/Chassis#32\n. > I always assumed ~/.wp-cli/vendor would be the destination.\nAs far as I know, not really possible to change this with Composer until the new autoloading stuff gets sorted out with the FIG.\n. > Can you clarify?\nI mean more to remove some of that redundant directory structure.\n\nI can get Composer to install to ~/.wp-cli/vendor but autoloading doesn't seem to work...\n\nThat should work as long as wp-cli is loading in vendor/autoload.php\n. Exactly, but I can't really edit the history.\n. I know. :) Working on 1.6 now. You may have noticed I'm horrible at actually releasing software.\n. Hmm, verify should be true by default. Not sure why you have to explicitly set that...\nWhat I do need to work on is making the errors easier to discern. At the moment, all the cURL errors end up in a single error bucket, whereas sockets are more fine grained. rmccue/Requests#79\n. @scribu Do you know the version of GnuTLS (and/or can you push a build to find out)? Also, is https://travis-ci.org/wp-cli/wp-cli/jobs/13062388 the first failed build related to this? If so, this could be related to a change from @dd32 on the dotorg side.\n. Huge props to @dd32 for hunting this issue down while I've been busy, and for his first Pull Request! :D :cake:\n. > I could have sworn I saw a project similar to WP Parser (linked above), which also generated docs for actions and filters.\nWP Parser should already parse actions and filters. :) See WP_Reflection_FileReflector.\n. > Nice! From what I can tell, it doesn't use regex, but actually tokenizes the PHP source. It also looks like it depends on the phpDocumentor library.\nCorrect; it's built off the PHP-Parser and phpDocumentor libraries (plus Markdown for parsing descriptions).\n\nMaybe it would be best if the logic for parsing WP hooks was extracted into a separate library? Then WP Parser could use it for generating a documentation site, while the wp doc command could use it to show help directly on the CLI.\n\nIt was originally a separate library, but we ended up merging it, since we didn't see a need for use outside of our tasks. I'm happy to accept patches to split it out though. :)\n. This is also a blocker for sennza/Chassis#24 :)\n. Sorry for leaving this so long.\nI have no idea how to write Behat tests, but I'll try and take a look soonish.\n. Awesome! :) :cake:\n. :-1: on changing to dev-master, WP-CLI should be using the stable versions. :)\nHappy to concoct a release with HHVM support, as long as you don't need any other changes.\n. Fixed upstream, new version is v1.6.1. wp-cli should autoupdate, since it's marked as ~1.6.\nRecommend close. :)\n. > I think the command matches what you expect. wp plugin|theme status gives you the status-- active/inactive. wp core version reports a version string. \n+1. If this does get merged into a common status, having the ability to get just the version is a must.\n. :sob: :sparkling_heart:\nThis has been bugging me for so long, and turns out it was already fixed. Lesson learnt, upgrade more often.\n. > Ideally, we'd be injecting our own Requests_Transport class, but\nWould Requests::add_transport work for this? It's also possible to set Requests::$transport (an array) directly to override, but that's semi-internal behaviour. Happy to add extra methods if needed here.\n. > I looked at add_transport() but merging arrays adds my transport to the end of the stack. set_transport() would work, and built-in request cache would be even better. I need a solution in the near term though.\nSounds like we need a priority argument for the transports.\nIn this specific case, could you set $options['transport'] = new ... (or = 'ClassName', either way) directly? Looks like it's only this invocation that needs changing.\n. Note: if you need to load WP afterwards, this can break, since WP needs to know the right ABSPATH to load itself, and plugins will also depend on that. I don't think that matters in some places wp-cli loads it, but potentially some it does.\nTo help with that, you can use a hybrid solution: fork/exec off an instance just to load the config, have it output as JSON, then use that in your main process. The overhead of doing that is reasonably minimal (since you're only loading wp-config, not all of WP), but it does exist.\n. > Yeah, I guess you could detect (in a generic way) all the constants and globals that wp-config sets and send them via JSON.\nYou can basically just use get_defined_vars and get_defined_constants before/after loading for that. Works reasonably well.\n. Probably duplicate of #1631.\n. One solution I was thinking might work: for those with more complicated config files, they could check for a constant, and avoid loading WP if it's set. People that run into this sort of problem are likely to have highly custom config files, so it shouldn't be an issue to change to:\nphp\nif ( ! defined( 'WP_CLI_SKIP_WP' ) )\n    require_once( ABSPATH . 'wp-settings.php' );\n. The following should be secure, and won't appear in history or stdout:\nbash\n$ read -s pass\n$ wp user update 42 --user_pass=\"$pass\"\n$ unset pass\n. Good point. Likely not possible right now then, since you can't make user update read from stdin ala --prompt due to the variable args.\n. In general, the Unix-y pattern is -- to \"end\" the assoc args and force extras to be treated as positional, so that'd be better for both, but there's likely problems with just doing that straight up (since the query itself is also positional). One thing with --extra... as an assoc arg rather than positional is that you need to double up escaping, which can be hairy with complex stuff involving variables.\n. Yeah, that'd also be nice for other reasons, so happy to have that as well.\n. Looks like wp-cli is assuming it's the top-level, and needs to check if it's running out of the vendor dir?\n. Trying to subclass WP_Import :)\nWe need to subclass to handle some edge cases on import that can't be handled via filters (aka bugs in WP Importer), so I'm subclassing and replacing the globally registered importer with our own instance (both in $GLOBALS['wp_import'] and register_importer). Works fine in the UI, but not in wp-cli.\n. > Which methods do you need to subclass?\nSpecifically to work around this, I'd have liked to subclass Import_Command to override just the bit that instantiates the class. The privates littered around make it hard to subclass.\n(In general, I think it's good practice to avoid private in favour of protected anyway.)\n. One potential solution is to load WP, but point ABSPATH at a different location. We use this in Cavalcade to load DB configuration outside of WP. Inside the directory, you can just have a dummy wp-settings.php. Works in basically every scenario I've tried.\n. > How does this not break everything dependent on ABSPATH?\nSee comment on #1631\n. :raised_hands: This would be super useful.\n. #synergy :cyclone: \n. This seems like you have a misbehaving cache plugin; neither wp-cli nor WordPress itself have anything like this message.\n. Appears to be an unrelated bug caused by the release of WP 4.4 today, nothing you did wrong :)\n. Duplicate of #1631, I think? Related: #1362, #1667\n. :raised_hands: :100: I constantly had to check the source to find this, super valuable having it documented!\n. > Do you happen to know what kind of a timeline that has?\nRight now, it's just a side-project, so it takes a bit of a backseat to the other open source stuff (i.e. the REST API) unfortunately. Can't really offer a timeframe, sorry.\n. (Forget my earlier comment.)\nWP already checks if Requests is loaded before trying to load it; looks like the fatals there are for WP_HTTP_Requests_Response missing, which a new file loaded in wp-settings.php?\n. I'm not sure I see the difference between wp --ssh=x ... and ssh x -c 'wp ...'? Seems a little bit like reinventing stuff just for the sake of it to me.\n. > And, should we just commit @rmccue's new importer to WP-CLI instead?\nI'm treating the CLI as a first-class interface (alongside the web UI), so should be no need for anything special from your end. I wouldn't use it in production until it's ready though :)\n. My policy for Requests was (and remains) that it's the responsibility of the library user to connect the library to the system, whether that's environment variables or anything else. Having the library change behaviour underneath you makes your code unpredictable, which is why Requests has almost no global configuration. (The transport is global configuration, but this should be invisible to the library user.)\nThat said, I think it makes sense for wp-cli to use the environment variable if it's available.. Yeah, ideally it wouldn't try and write the constants out either. Recognising serialized data anywhere in the post could break actual post content that talks about serialization, so it's a bit crazy to do that IMO.. From the user's perspective, wp-cli is more like part of the system, not part of the project. We don't need the source for wp-cli included in the project. There's no specific use case where we couldn't just use the source (via Composer or otherwise), apart from most of the source being unnecessary.\n(In our specific case, we're also not using Composer, so we can't just add it in to an existing system.)\nI do recognise this is a weird request though, so feel free to close it out.. I think you should be able to use dev-master in the version instead, but don't quote me on that. Packagist refuses to actually accept that I released a version.\n. Yeah, I'd like to push 1.6 soon. I tried a 1.5.0 way back, but that didn't work.\n. ",
    "dwightjack": "Ok, \nsorry for the typos. Pulled too early.\nWill do better next time :)\n. Ok, thanks for the explanation and the hint on composer configuration :)\n. ",
    "tollmanz": "Hi Scribu,\nMy main purpose for implementing these commands were for purposes of debugging. It is useful to be able execute a simple command to get/set/delete a transient value, as opposed to writing code or examining the database to debug a transient issue in certain scenarios. I find that it is particularly useful when an object cache is involved as those values can be particularly difficult to observe. \nAdditionally, these commands have utility in writing shell scripts that may need to involve transient manipulation. For instance, you might make a cURL request (in a shell script) and store the value in a transient.\nFinally, I think that having the ability to manipulate transients is a nice compliment to the option commands. Sometimes transients are more appropriate than options and being able to manipulate them via wp-cli makes the tool that much more useful.\nBest,\nZack\n. Thanks Scribu! I wasn't sure of the best way forward, but glad you got the fix in there.\n. All of these suggestions are excellent! I will make the changes and submit new code.\n. @scribu Made suggested changes. It looks like the commits were pulled over automatically. Please let me know if there is a different way that you want me to do the pull request.\n. There are 2 checks for different libraries that utilize memcached because there are 2 different WordPress memcached object cache backends: the original one by Ryan Boren (http://wordpress.org/extend/plugins/memcached/) that uses the memcache PECL extension, and a newer one my me (https://github.com/tollmanz/wordpress-memcached-backend) that uses the memached PECL extension (note the inclusion/exclusion of the \"d\"). These two memcached libraries are vastly different and I wanted to note which was being used.\nIdeally, it would be nice if the object cache had a way of identifying itself in WordPress, but since that doesn't yet happen, I am merely guessing at the possibilities.\nGood point about the if/elseif usage. I would normally return data after one of the conditions matched, but that does not work for this function and I should have altered my style a bit. I'll get a new commit in to fix that.\n. Fair enough...will do.\n. To generate 100 posts with the default values, the current implementation takes a split second to generate the posts. Using wp_insert_post is taking about 2-3 seconds. That is a big difference, but perhaps an ok one to avoid these sorts of issues.\n. > A related idea I've had for a while was to use a Mustache template \nI like the idea of templates, but only for a \"recipe\" approach. For instance, let's say you define a special wp-config.php that you like for your projects. You could make this a mustache type template and somehow install this along with your WP-CLI.\nThat said, I agree that this is a different issue than the one at hand.\n\nSo adding all these arguments makes them show up in the --help. This could add up to a large number.\nKeep them minimized, just like we minimized the scaffold cpt and tax arguments.\n\nOne reason I like to have these as arguments is that it makes it really easy to add the code to the file. For instance, I always forget if the constant is WP_SCRIPT_DEBUG or SCRIPT_DEBUG. I then need to look at another project's config or look on the codex. I really like the idea of typing wp core config --help and getting the list of possible \"things\" I can change in the wp-config.php file; however, I do understand that this can grow infinitely large and be a problem. I think it might be helpful to gather the possible values to see what makes sense here.\n@scribu Your sample syntax is a little off-putting. I'm not sure I would want to have to spell out the PHP like that. I think that I like to idea of have a group of flags that will write specific values to the file, then having another command like you are suggesting that allows for arbitrary PHP.\n. I am interested to see the PR. I can't wait to see if it is easy or not.\nAs part of this change set, I think it would be nice to add a helper function or functions that may it easy to write to the wp-config.php file. They can be leveraged by other WP-CLI commands for easily writing new config values (e.g., a caching plugin that requires values be set in the config).\n. ",
    "johnpbloch": "I suppose another way to fix the issue is to add w3-total-cache to the list of aliases (i.e. 'total-cache' => 'w3-total-cache'), but that would still run into the same problem of mismatching the command name.\n. ",
    "mkormendy": "@scribu why was this closed? Was there a resolution? Please describe the reason for closing this ticket.. If you are logged in as root, just become another user with the following command:\nsu [username]\nReplace [username] with something like admin, or a user you know has privileges to run wp cli commands. (admin should be there in many cases).\nWhen done, exit out of that user operation.\n. ",
    "ejdanderson": "Indeed, thats what its being used for. Still needs a fair bit of cleanup, I'll attempt to get to this over the weekend.\n. It seems that the domain_exists check only enforces the domain with a subdomain install, I'll track down in core where its suppose to be doing this for sub directory installs.\n. As you've already fixed in 5d5e8ece9ec3a811773a72fdc47da712ce872859  insert_blog adds a trailing slash to the path but the domain_exists check takes whatever path is given. Opened a ticket in trac for this - http://core.trac.wordpress.org/ticket/20589\n. ",
    "josephdpurcell": "I accidentally posted on a different issue and got a reply, see here. Here is what it said:\n\n\nI tried installing via pear and it says invalid package (can't find channel: sudo pear install andreascreten.github.com/wp-cli/wpcli).\n\nThat's an old URL. See the readme for the current one.\n\nI tried manually installing using utils/build-dev, but wp does nothing.\n\nIf you're trying to use it in a multisite install, you need to pass the --blog parameter. See the readme.\n\nI tried to install via brew\n\nThe brew package is obsolete.\n\nTry #6 worked:\n$ sudo pear install wp-cli.github.com/pear/wpcli\ndownloading wpcli-0.5.0.tgz ...\nStarting to download wpcli-0.5.0.tgz (86,127 bytes)\n.....................done: 86,127 bytes\ninstall ok: channel://wp-cli.github.com/pear/wpcli-0.5.0\nI'm not sure why my first attempt at installing via pear failed. Thank you scribu.\n. ",
    "roborourke": "Cool, I need to familiarise myself with wp-cli some more so I'll post back here when I've got a fork of it you can try out.\n. I found another cause for this is having mu-plugins present before WP is installed. Removing them first then installing and then restoring them worked.\n. ah cool, wasn't aware of this, thanks!\nOn 10 May 2016 at 19:53, Daniel Bachhuber notifications@github.com wrote:\n\nClosed #2731 https://github.com/wp-cli/wp-cli/issues/2731.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/2731#event-656510881\n\n\nRobert O'Rourke\nmobile: +447816329424\nskype: rob.o.rourke\nweb: r\u00f6b.co\n. ",
    "hggh": "I think it should be available for all commands, especially for wp plugin \n. ",
    "larsemil": "I found a solution to this problem.\nThe problem seems to be that: wp-includes/default-constants.php contains a row that sets the memory limit to 32MB:\ndefine('WP_MEMORY_LIMIT', '32M'); and as wp-cli runs the whole wordpress framework i would guess it sets its own memory limit to the same. Increasing this value in wp-includes/default-constants.php makes wp-cli work just fine on the site again.\n. Could we not specify this constant in wp-cli instead? If we did we would never run into this problem again, as it would override the wordpress setting. \n. wp-includes/default-constants.php line 42:\nif ( function_exists('memory_get_usage') && ( (int) @ini_get('memory_limit') < abs(intval(WP_MEMORY_LIMIT)) ) )\nCould it be this? If memory limit for php cli is -1 then @ini_get('memory_limit') will be smaller then the constant set, and memory limit will be set to 32M. \nOtherwise it will go with the php.ini not for cli which might have a higher value. i dont know how much memory wordpress needs to run, but could be 32M is not enough. i dont know. Might experiment a bit with this and see if i can find out. \nUpdate:\nstandard php memory limit is 128M, so it might be we never get this behavior on a standard wordpress installation running in web environment. \nUpdate 2:\nYes this is the case. -1 is returned and hence wordpress sets it own memory limit to 32M which apparently is not enough(and perhaps bug should be filed upstreams).\nProblem should be rather solved then and we know why its happening and what to do to solve it. \n. 0/ YAY!\n. ",
    "tszming": "I have encountered this issue and managed to fix it by adding define('WP_MEMORY_LIMIT', '64M'); in wp-config.php, as I am using 0.8.0-alpha, so this issue was closed because it is fixed, or wp-config.php is the recommended workaround?\n. ",
    "2hands10fingers": "I'm having this issue. I get it without running wordpress installation at all. I open Command Prompt -> enter \"wp\" into the command line, and then I get \"Not enough memory\". What's going?. @Rarst Glad I came back to your comment. The updates to wp-cli via your comment helped to fix my issue and it's now working. Glad to finally have this working. Thanks everyone!\nAll I needed to do was $wp cli update. ",
    "Rarst": "@2hands10fingers I have exactly same error, seems to be specific to PHP 7.1+ on Windows in my case, please see #4593 and comment if your setup is same/similar.. Using vanilla cmd shell (in Console2  wrapper, but that's cosmetic/convenience). I vaguely remember something about color issues, guess git drags in own shell or something for it to work then.\nAgreed that this makes sense as option.\n. I am getting \u2190[36;1mWarning: \u2190[0munknown --color parameter in command line with latest code. Tried via config as well and seems to have no effect.\n. Correction - setting color in config does work, had typo in YAML. Still getting error in command line. Some Windows edge case?..\n\nWhat does wp --info say?\n\nPHP binary:     c:\\UniServer\\usr\\local\\php\\php.exe\nPHP version:    5.4.5\nphp.ini used:   C:\\UniServer\\usr\\local\\php\\php-cli.ini\nwp-cli root:    C:\\server\\ext\\wp-cli\\php/\nwp-cli config:  C:\\server\\www\\dev\\wordpress/wp-cli.yml\nwp-cli version: 0.8.0-alpha\n. Ah, ticket name says \"option (and argument)\" so when you closed it I assumed both were added.\n. Confirm command line option as working. Maybe it would also make sense to default to no color on Windows platform? \nWhat are wp-cli goals in regards to win compat in general (full feature parity / some things broken / you-want-it-you-fix-it / etc) ?\n. Hit this issue as linked above. I don't see easy solution so far.\nMaybe for a start wp-cli shouldn't perform related commands in environment they are known to fail? wp cache type seems to detect \"APC\" as object cache, maybe it should be flag to lock out commands affected by the issue for now?\n. > One major drawback would be that it doesn't seem to support a third-level of subcommands. i.e. wp search-replace would work, but wp option get wouldn't.\nTotally has that. Terminology is tad confusing there:\n\nArguments are the strings - separated by spaces - that come after the command name itself. They are ordered, and can be optional or required.\n\nvs\n\noptions are not ordered and are specified with two dashes\n\n\"Subcommand\" would be argument in its terminology, while what is typically called \"argument\" would be option.\n. > Still need to exec() to get anything done.\nExec what? Composer bits? I hadn't got to that yet, but it can be used from PHP via API.\n\nNo native unrequire support in Composer, as far as I can tell.\n\nFYI I had issues with require duplicating require section instead of correctly editing it. Maybe screwed up something in format, but nothing that validate could detect.\n\nKeyword-based search appears to be broken on Packagist.org\nNo JSON for the search results.\n\nWhat do you need to do precisely? There is search.json endpoint, see http://www.terrymatula.com/development/2013/some-packagist-api-hacks/ Supports search by keyword (confusingly called tag in that context) as well.\nI am not using wp-cli much since I am on Win and it's rough. Will pull this and poke later, busy day today.\nAside - Composer strongly supports people running their own repositories, so should probably have support for that from the start rather than Packagist alone.\n. > Looks like searching by the wp-cli tag is still returning incorrect results though.\nWhat packages with that are there on packagist? wp-cli itself is only tagged cli and wordpress\n. It seems like it's not working in site itself either, my guess would be bug in search engine for tags with -\n. Not likely, I am working with generic command shell.\n. ...habit? I come from DOS times. :)\n. Pull request implements option 2.\nWith it upon install wp-cli on Windows can be used by:\n1. using absolute path to wp-cli/bin/wp.bat to call it\n2. adding wp-cli/bin to PATH, which will make it available as system-wide wp command\nDownside - it won't be available from vendor/bin of root project, since Composer recommends not to add custom bat files there (however I need to experiment what actually happens if you try to) since that functionality is meant for PHP or sh scripts.\n. I can't make sense how to actually easily test this. I am looking at code and want to try several combinations of config to make sure it does what I think it does, but there is no easy way to command it to regenerate binaries (as there is for autoload), is there?..\n. Yep, getting there...\nThe issue is composer creates wp.bat proxy for wp sh script and need to figure out which combination gets around that...\n. Ok, pushed commit, adding wp.bat to bin section (first, order matters). Now on Windows is generates proxy for it first, then reaches unix binary and, seeing there already is proxy of that name, skips it.\nHowever something gets messed up in path... Looking at that now.\n. The fix for double quotes messing things up was merged upstream in Composer and now wp.bat from my pull request should work properly. So on Windows install says:\nSkipped installation of bin/wp.bat proxy for package wp-cli/wp-cli: a .bat proxy was already installed\nAnd vendor/bin/wp.bat points to wp-cli/bin/wp.bat rather than wp-cli/bin/wp bash version.\n. Could you elaborate what happens? Does it break bash script on non-win, or mere wp.bat presence is the problem?\n. And the problem in that is? Autocomplete or something?\nIt seems rather asymmetric to not give win users clean way to use it at all so that non-windows users don't get confused (?).\n. I see bash file just fine on Windows?.. And unlike wp.bat it's not even clear it's *nix-specific file until you poke it and it fails.\n. Ok, I am getting confused here, so let's enumerate.\nWithout wp-cli/bin/wp.bat\n- wp-cli/bin/wp (bash)\n- vendor/bin/wp proxies to wp-cli/bin/wp (bash)\n- vendor/bin/wp.bat on win proxies to wp-cli/bin/wp (still bash)\nWith wp-cli/bin/wp.bat\n- wp-cli/bin/wp (bash)\n- wp-cli/bin/wp.bat (cmd)\n- vendor/bin/wp proxies to wp-cli/bin/wp (bash)\n- vendor/bin/wp.bat on win proxies to wp-cli/bin/wp.bat (cmd)\nWhich of these is the case (or am I missing one) which is the issue on nixes with wp.bat?\n. Yes, I might have confused the two. Can you replicate the issue on Linux or it's actually Windows-specific because that command is not supported?\nI have searched SO some, but there doesn't seem to be readily-available cross-platform way to handle width - thus suggestion to stick with typical one.\n. My point is if we start with 80 columns and subtract known widths of elements, we will end up with some maximum length for plugin name, exceeding which is likely to mess table up. Then we can truncate to that length like enhanced-admin-links-in-multisite-my-sites-drop-downs > enhanced-admin-links...\n. > That's not acceptable, unless you can use enhanced-admin-links... as the plugin slug\nExpanding partial/incomplete information to best match is actually common console behavior. That actually might make sense as a time-saving feature on its own.\n\nThe idea is that the tabular display is meant as a data-dump command.\n\nGotcha, but I must note than in that case the idea should be communicated better to a user. I didn't even notice I am confusing two different commands for displaying essentially same data set.\n. > If you mean tab completion, yeah, that would be nice\nNo, I mean automated matching. So if I type wp plugin activate enhanced and there is only one plugin that matches partial enhanced name then it is the plugin I meant. Symfony Console does such thing by default for commands (to run help it's enough to type h, if no other commands start with it).\n\nI'm open to suggestions (it's unfortunate that list shows up before status due to the alphabetical ordering).\n\nConsolidate to one command with status-type output by default and rest as option?\n. > What about wp plugin install? We would have to perform an extra request to wordpress.org to get a list of plugins that match.\nNo available data, no matching I think.\nWe started with specific case of how showing truncated local names impacts other commands, doing this for all arguments is probably a stretch.\n. Works with less provided by Git, but fails for Windows native more:\n\nNotice: Undefined offset: 1 in C:\\server\\www\\wp-cli\\php\\commands\\help.php on line\n68\nWarning: stream_get_contents() expects parameter 1 to be resource, null given in C:\\server\\www\\wp-cli\\php\\commands\\help.php on line 68\n. No issue with explicitly piping it to more, other than it doesn't have -r argument, but removing it from code doesn't fix issue on pager branch.\n\nSomething probably goes bonkers in proc_open() (common story on win) I will see if I can debug it later today.\n. Looked closer at it. Actually it tries to run less -r and never reaches more because\nif ( 127 == $r ) {\n        return false;\n    }\ndoesn't trigger. $r is int(1) in this case, whatever that is supposed to mean...\nmore works if I change $pagers = array( 'less -r', 'more -r' ); to $pagers = array( 'more' );\n. Error code meaning might be same, but I am not getting that error code, it's 1 (ERROR_INVALID_FUNCTION according to that list) instead.\n. If one is using installer. :)\n. > @rarst will be pleased. :)\nNot my alley, I am interested in native Win console compat. :) My pull request upstream to deal with quotes issue got stuck a bit...\n. I suppose if it's reproduced with normal import it's not wp-cli issue then. Wrong assumption on my part, I am just used to hit new [Windows-specific] bug every time I run wp-cli. :)\n. Sure and when WordPress migrates to JavaScript there will no longer be any pesky PHP issues. But meanwhile we will have to endure. :)\n. Of course it is... :) I'll see if I can dig up anything later.\n. Ok, I looked and hadn't got anywhere. Brief explanation of where synopsis is coming from and which points it passes through?\nI try to find good places to dump and get assorted arrays of stuff and such without any idea if that is what I am supposed to be seeing or bugged...\n. I got this now on my main local dev stack, think after I changed core source to dev repo. wp-cli cloned from git, works fine on other local sites. So it's some quirk in specific WP setup(s) that causes this.\n```\nXdebug: user triggered in C:\\server\\www\\dev\\wordpress\\src\\wp-includes\\load.php on\nline 10\nCall Stack:\n    0.0000     132592   1. {main}() C:\\server\\ext\\wp-cli\\php\\boot-fs.php:0\n    0.0000     139800   2. include('C:\\server\\ext\\wp-cli\\php\\wp-cli.php') C:\\server\\ext\\wp-cli\\php\\boot-fs.php:17\n    0.0180     796704   3. eval('require 'C:\\server\\www\\dev\\wordpress' . '/../wp-config.php';') C:\\server\\ext\\wp-cli\\php\\wp-cli.php:23\n    0.0180     809608   4. require('C:\\server\\www\\dev\\wp-config.php') C:\\server\\ext\\wp-cli\\php\\wp-cli.php(23) : eval()'d code:1\n    0.0180     869232   5. require_once('C:\\server\\www\\dev\\wordpress\\src\\wp-settings.php') C:\\server\\www\\dev\\wp-config.php:105\n    0.0190     975080   6. require('C:\\server\\www\\dev\\wordpress\\src\\wp-includes\\load.php') C:\\server\\www\\dev\\wordpress\\src\\wp-settings.php:21\n    0.0190     975128   7. xdebug_print_function_stack() C:\\server\\www\\dev\\wordpress\\src\\wp-includes\\load.php:10\nNotice: Constant WPINC already defined in C:\\server\\ext\\wp-cli\\php\\wp-settings-cli.php on line 13\nCall Stack:\n    0.0000     132592   1. {main}() C:\\server\\ext\\wp-cli\\php\\boot-fs.php:0\n    0.0000     139800   2. include('C:\\server\\ext\\wp-cli\\php\\wp-cli.php') C:\\server\\ext\\wp-cli\\php\\boot-fs.php:17\n    0.7270   15280216   3. require('C:\\server\\ext\\wp-cli\\php\\wp-settings-cli.php') C:\\server\\ext\\wp-cli\\php\\wp-cli.php:26\n    0.7270   15281232   4. define() C:\\server\\ext\\wp-cli\\php\\wp-settings-cli.php:13\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in C:\\server\\www\\dev\\wordpress\\src\\wp-includes\\load.php:19) in C:\\server\\www\\dev\\wordpress\\src\\wp-includes\\load.php on line 34\nCall Stack:\n    0.0000     132592   1. {main}() C:\\server\\ext\\wp-cli\\php\\boot-fs.php:0\n    0.0000     139800   2. include('C:\\server\\ext\\wp-cli\\php\\wp-cli.php') C:\\server\\ext\\wp-cli\\php\\boot-fs.php:17\n    0.7270   15280216   3. require('C:\\server\\ext\\wp-cli\\php\\wp-settings-cli.php') C:\\server\\ext\\wp-cli\\php\\wp-cli.php:26\n```\n. Yeah, I had stuff with related directories in config so when dev repo forced extra directory level I just \"proxied\" with require. Hm, not sure how to config this best now since dev repo has that extra level, but core doesn't look for config two levels above.\nOn wp-cli side might make sense to add warning if that line isn't found and skipped that config looks \"weird\"?\n. Yeah, but I don't want to have config inside repo. Also if I don't have require then it would work for wp-cli, but not normal load properly, right?\n\nI can't think of a robust way of checking that\n\nWell the line is checked for and skipped. So if it's never skipped then logically it was never matched and wasn't present, right?\n. Wrapped require line in if ( ! defined( 'WP_CLI' ) ), seems like an appropriate fix in my context.\n. Yep, looks good.\n. Yes. It works fine in interface before trying to use wp-cli. It seems wp-cli makes database value out of sync with cache value or something like.\n. Yeah, that's probably it. Closing in favor of discussion on underlying issue there.\n. I would recommend to consider embedded Composer. It was worked out as solutions to challenges in Sculpin which is similarly command line tool with a need to manage extensions to itself.\nCan't say it's trivial to make use of (I hadn't tried implementing it in practice), but it's not trivial use case either.\n. Gah, duplicate of #1727 , I should have looked first. :)\n. I am not urging to declare Windows as fully supported, I am urging to mention technical possibility to run on it at all. Current wording implies otherwise.\n. Also getting a notice in between:\n/wp.bat scaffold plugin new-plugin\nSuccess: Created plugin files.\nNotice: Undefined index: ci in C:\\server\\wp-cli\\php\\commands\\scaffold.php on line 568\nError: Invalid plugin slug specified.\nWeirdly I only see two instances of this error in source and I can't dump that either of them is responsible for this output. That's weird. Is there anything else that might generate this message indirectly?. Ok, it seems this is down to check_target_directory() method not normalizing paths:\nstring(36) \"C:/server/www/dev/wp-content/plugins\" // WP_PLUGIN_DIR\nstring(36) \"C:\\server\\www\\dev\\wp-content\\plugins\" // $parent_dir. I promised to do a proper PR, as a resident WordPress Windows person, will get to it... :). Got a little busy, but still intend to this week, :). I seem to have narrowed this down to a pass_through_pager() in the Help command, specifically last return line: https://github.com/wp-cli/wp-cli/blob/master/php/commands/help.php#L132\nNot too familiar with proc_* functions to further tell what exactly goes wrong there.. I am on Windows 7, we had someone else in slack unable to reproduce on 10 as well. Unfortunately I don't have 10 on hand right now myself.. I am running master checkout right now, is that the same?. Thank you! I've suspected it's somewhere in the binaries rather than PHP source, but didn't dug in far enough.\nSet pager to less for myself locally for now.. If you want to force composer install anyway you can tell it to ignore platform requirements: >composer install --prefer-source --ignore-platform-reqs. That was for general information, not everyone looking at the issue might. :) I concur this should be reverted, but before then ignore argument is the only way.. Ok, that\u2019s weird. It's not a difference between phar and source, it's a difference between directories in my system with some of them having PAGER set to less. This isn't in system variables so it's probably git messing with environment or something... Ugh.\nrant Honestly I wish WP CLI just defaulted to no pager. It's blind external dependency, there is always something wrong with it, and that breaks help which is the entry point to everything. endRant :). Done. I had trouble rewriting regex first time over because of the preceding group. Works if it's made non-greedy.\n. I copy/pasted the doc from the implementing class, would you like wording updated there as well for consistency?. Yeah, the class is upstream in PHP CLI tools so not worth it. :). ",
    "patbell101": "Finding the right php.ini and setting memory-limit = 512M solved this for me.\nFind your php.ini for PHP-CLI\n$ php -i | grep php.ini\nConfiguration File (php.ini) Path => /usr/local/etc/php/7.0\nLoaded Configuration File => /usr/local/etc/php/7.0/php.ini\nIncrease memory_limit to 512M or greater\n$ vim /usr/local/etc/php/7.0/php.ini\nmemory_limit = 512M. ",
    "AaronHolbrook": "@samjbmason what was your resolution? I'm having the same issue over at #133.\n. It's where I got the idea to change L#71.\nI believe MAMP is loading it's php.ini, but I'm not sure how to tell. Also is there a way to tell what mysql.sock is being loaded?\n. Ok, loaded up phpinfo and it looks like my MYSQL_SOCKET = /Applications/MAMP/tmp/mysql/mysql.sock, so I believe that's correct.\nAny ideas?\n. @samjbmason Oh I thought you had it figured out since you said you got it up. I'm assuming you bypassed MAMP and went without?\n. Thanks for the heads up. I'd prefer to get this working with MAMP - close right now, but just need a little push.\nAaron\nOn Jun 28, 2012, at 11:03 AM, Sam Mason wrote:\n\nah sorry i apologise i thought you were referring to my automator script.\nYeah I did get it up and running but i didnt use mamp in the end.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/issues/133#issuecomment-6633815\n. Hi @andreascreten, thanks for the commit - but this wasn't the issue I was having. I even stated in my original comment:\n\nI changed the path here: wp#L70 to access the correct version of PHP, since MAMP changes the path with every version.\nSo it wasn't the path that was at fault, it wasn't able to connect via mysql.sock.\nThoughts?\n. Can you please reopen this ticket? This issue is not resolved.\n. +1; I have used this numerous times to create sub commands, and not having this ability will break existing usages quite heavily.. Hey @schlessera,\nAppreciate the feedback, I think you are right, one of our other engineers is unable to produce this following the steps above.\nI've tested this with version 1.4.0 and 1.4.1 of wp-cli. I've also tried deleting and reinstalling wp-cli following the CURL recommended method here: https://make.wordpress.org/cli/handbook/installing/\nThe problem persists still.\nThere is no autoloading configuration from any of my composer.json files. The steps and file I listed above create the issue (unless there's something else you'd need to see).\nHere is the composer.lock file that is generated from that install: https://gist.github.com/AaronHolbrook/18ecb569d865cc217776789a377e8b3d#file-composer-lock\nAnd the entire composer.json file:\nhttps://gist.github.com/AaronHolbrook/18ecb569d865cc217776789a377e8b3d#file-composer-json. To further clarify: I installed via CURL and am still seeing this issue.\nWhen installing via composer, there is no issue:\n\nMy guess is that this is because there is then no conflict and no pre-existing composer autoload file that WP CLI uses before my application's composer autoload.. Installing the git source version works:\n. I don't have any modifications in wp-config.php.\nI am not loading any files in my composer.json, however one of the packages I bring in is doing so.. Yes to both. @schlessera: I do not have any new insights, every time I run wp it reproduces it, I'm not sure what you mean by finding a reproducible way of triggering it.\nI have also tried running composer clear-cache and composer install and it does NOT fix this issue. . ",
    "joshin42": "I'm trying to fully automate WP installs.  Requiring prompting of passwords would be annoying.\nI handle password security issues by having my WP creation shell script send 2 emails.  The first is the normal \"New WordPress Site\" which includes the domain name and the second email is generated by my script and does include the plaintext password but never mentions its address.\nThe script is sticky-bit chowned to a \"batchcreate\" user and it calls a password file (400 permissions) containing the credentials for a MySQL user able to create databases and grant user permissions on those databases.  (I'm slowly tightening rights for that MySQL user.)  \nIt's about as secure as my creativity allows it to be while still allowing automated creation of WP installs.  I'd love to hear of better ways to approach the problem.  :)\n. ",
    "yuvilio": "I look at not putting the password in the command from the security perspective. My workaround is putting the password in a temp file and just extracting it from there.  That way  it doesn't leave a trace in the command history (slightly more secure) and doesn't prevent automation.\nbash\n$ cat dbpass.txt \nsecret\n$ wp core install --admin_password=$(cat dbpass.txt) ...\nSuccess: WordPress installed successfully.\n$\nFor extra neurotic security, maybe the password file could be placed in a USB key drive separately.\n. ",
    "matpen": "@yuvilio your solution prevents indeed the sensitive inputs to be stored in the history, however the password can be seen by every user on the system with ps.\n. I suggest I small modification to the global \"--prompt\" option, which currently simply prompts for input of ALL options of the specific command. If we could enter a list of options to be prompted for, those values could be piped through stdin. As an example: wp user create bob bob@example.com --role=author --prompt=user_pass would prompt only for the user password. When scripting, this can be used securely like cat passwd.txt | wp user create bob bob@example.com --role=author --prompt=user_pass. For secure use at the terminal we could introduce --prompt-secure=user_pass to hide the user input.\n. ",
    "pkarjala": "Ideally it would function the same as the wp user create command at http://wp-cli.org/commands/user/ where the password is output on the command line and as such does not appear in the history.  This is the same as the GUI interface when spinning up a new Wordpress site; a randomly generated password is presented to the user for the admin login, so you could tap into that functionality to generate the password for the user and display it if the user does something like --admin_random_password as an option on wp core install.\nThe entire argument regarding worrying about a screen-sharing session is IMHO moot, because as soon as you're screen sharing, you're not in a secure context anyway.\n. Apologies; I'll write it into a separate issue.\n. OK; if the expectation is to use sudo to perform the update in this case, that's fine by me!\n. No problem; I'm writing some automated install tasks and kept getting tripped up by why the password being generated wasn't letting me log in!\n. One option, as previously suggested, may be to set a flag that indicates ONLY usage of Term IDs versus Slugs.  In that instance, the user MUST provide only numeric Term IDs; otherwise it is presumed that they are providing a Slug (which may also be a numeric string value).\nI'm not familiar enough with other flag settings in the wp-cli project to know what existing standards are, but here are some suggestions:\nwp post term <post_id> --term_ids=<array or comma separated list of term ids>\nwp post term <post_id> <2, 3, 4, 5, 6> --term_ids=true\n. We used\n$document_type = json_decode( shell_exec( \"wp term list document_type --format=json --fields=term_id,name,slug\" ) ); \nto pull a list of all Terms associated with a specific Taxonomy (document_type in this case), and their associated IDs and Slugs.  We then process this in PHP to create a list of Slugs which we use for comparison against the existing list of Term IDs that we have from a spreadsheet.  The Name is included to make sure we have the correct IDs and Slugs.\nIt would be more convenient and faster programmatically for us to be able to use the Term IDs directly instead of having to do a lookup comparison for each Term ID, but it is not strictly necessary.. Can confirm we are also seeing this issue on Ubuntu 16.04.3 with PHP 7.0.22.\nCan also confirm that using wp cli update --nightly fixed the issue using the .tar.gz fallback.. @danielbachhuber Thanks; I can confirm that it is present.\nThis is done in this particular case as we define a different update method in wp-config.php file as per https://codex.wordpress.org/Editing_wp-config.php#WordPress_Upgrade_Constants\nI'm not sure what would be a good way to reconcile the two at this time.  \n. Aha, I think I found it myself.  On our development environment, we have a clone script that sets up local FTP access; however, there's a pre-defined FS_METHOD that was not removed as part of that script, which results in there being two FS_METHOD values being defined for this particular server.\nRemoving the duplicate fixes the error.  Please disregard this report, and apologies for the confusion.. ",
    "wycks": "I actually just created something that does this, I had no idea wp-cli existed! My script uses phing and creates the db first and then installs WP with the db credentials.  I think a lot of code in wp-cli is cross compatible with phing and vice versa.\n. I was planning on adding lots of WP related function into this since phing is built with PHP, but now that i've seen wp-cli I don't think I will, you guys have a ton of great stuff.\nInstead I think I will compliment it and go the route of: Installing/Moving/Testing\nhttps://github.com/wycks/WordPhing\n. The current \"makefile\" systems (Ant, Phing, Gradle, Capistrano, etc) provide tons of features that are pretty specific to build/work automation. It would be hard to integrate the features set found in such systems into WP-CLI which is focused more on interfacing directly with WordPress.( for example ssh, scp, amazon, ftp, git, etc, etc..) , though this is entirely up to scribu.\nTypically you use something like Ant+Drush or Phing+Drush since you can build Tasks for it in the build script in a very simple manner. So you can have for example a WP_CLI_Task extends Task {your wp-cli code..} and the build script interfaces with WP-CLI. \nJust my 2c -- it would be easy to add wp-cli support to wordphing but I don't see much demand for it, I was thinking of making a task to use the wp-cli database functionality since it does serialization and automating db import/export since moving it around between servers is a pain manually.\n. I use Pandoc to convert HTML to markdown and the output can get messed up (weird characters, invisible characters, etc),  it might be related to how Windows handled pandoc but it's pretty funky.\n. ",
    "brianlayman": "I have it as a script works off of cpanel hooks when a site is created.\nThat way you have access to the un/pw for setting up the DB & connection \nand can even harden the install a bit by specifying a unique db prefix \nseeded by the account name.  It works well!\nOn 8/19/2012 8:02 PM, Wycks wrote:\n\nI actually just created something that does this, I had no idea wp-cli \nexisted! My script uses phing and creates the db first and then \ninstalls WP with the db credentials. I think a lot of code in wp-cli \nis cross compatible with phing and vice versa.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/wp-cli/wp-cli/issues/130#issuecomment-7858280.\n. lol Fair enough - actually I thought it was from hackers or I wouldn't have butted in :P My cpanel scripts are up in\nhttps://github.com/brianlayman/WordPress-Server-Scripts\n. Oh! postwwwacct4 was missing. I've added that now.  It's a php script that actually does the initial setup of the WP site via CURL. $passwrd probably should be url encoded.  I'd have to test.  Also it seems some VPSs take a couple minutes to recognize the domain even if the restart command has been sent to apache.  I've not figured out why that is, but instead croned a version of the code in postwwwacct4 for three minutes later.\n. \n",
    "leewillis77": "If you're looking at this (And it would be great!), you should definitely look at what drush does with \"makefiles\" - they're a great way to install (Not setup) a site with a predefined list of modules. For development agencies this is a huge timesaver - just just \"hit the button\" to get your standard installation with set of standard modules all ready to go. I think that's what we're looking for here - some way to specify a list of software, and have wp-cli download it all for you. \nIn the Drupal context the actual setup of the site, enabling of modules (or not) and other custom scripted functionality is a feature of core Drupal (Installation profiles - essentially you extend the core installation process). I don't have a strong opinion about whether that's right or wrong, but certainly separating \"This is the stuff I want to be available\", from \"This is the stuff I want you to activate, and process when I install\" seems to be a good one. \nJust my 2p - hope it's helpful!\n. I've updated the PR to use WP_CLI::warning for the \"No rewrite rules\" message, and changed the JSON output to an empty array() rather than a string.\n. Rewritten logic as suggested.\n. All updated - thanks for the pointers. Ready for review :)\n. I've made list be list-only, no args, and introduced role exists, which does nothing (and returns 0) if the role exists, and outputs an error message and returns 1 (via WP_CLI::error) if the role does now exist. I've also re-generated all man pages.\n. Closing this due to a GIT issue. Will re-open another one with tests and better, cleaner code.\n. Thanks for the quick feedback - any thoughts on the non-JSON case - would you prefer just no output - or do you want to keep the \"No rules\" output there?\n. I saw it as a way to check if a role exists without haven't to iterate through lots of results.\n. Is there a \"standard\" way to have WP_CLI return a specific return code without using this? - or should I just exit(1) within the role.php itself?\n. I wondered about that, but couldn't see what. If role is ommitted then the default role is assigned. The only reference to none I can find is in the CSV import (https://github.com/leewillis77/wp-cli/blob/master/php/commands/user.php#L541) - but even there the string gets discarded. \n. ",
    "saltcod": "'Hardcoding' the path to php seems to have worked for me. \nfor amp_php in /Applications/MAMP/bin/php/php5.3.6/bin/php; do\nIs my new line 70. Not sure why it doesn't like the generic php5*/bin/php\n. Will do. Thanks scribu.\n. Hey Daniel!   I'd definitely like to help with this. I've seen some decent examples around on some other docs sites that I can probably dig up. \nHow s/could we get started?\n. Maybe I'll just post in some ideas for now, and see how that goes. \nhttps://dl.dropboxusercontent.com/s/s5brcg2n3p2wahk/2015-08-26%20at%2012.14%20PM.png\nI'm thinking a few things here: \n\u2014\u00a0separate the main command a little more from the rest of that page's content.  So just give the top-most command a little more breathing room. \n\u2014\u00a0Maybe wrap those global parameters in the code tag as well \u2014\u00a0code.parameter maybe \u2014\u00a0and change the style of them.  That gives the \"hey this is code!\" feeling, but separates it from the main command. \nNone of those are wrapped in any markup at the moment (code or span or anything) so that might be a bit of a chore(?). \n. Aaah now I see what you mean.  Yeah that could be moved below sub commands, be moved to a different page, or maybe made a sidebar widget: \nhttps://dl.dropboxusercontent.com/s/l4sbd514fwpiwl6/2015-08-26%20at%2010.20%20PM.png\n. Sweet! Yeah that looks better to my eye at least! \nI'd say on mobile it would just fall above/below the subcommands area and shrink up as it does now.  The sidebar widget might just be a compromise anyway. You'd know better than me how important/relevant that info is on that page, but putting it in a sidebar and giving it a this-is-secondary-information style treatment is a decent compromise on removing it all together. \nIf you're talking in real, practical terms:   I'd say sub-commands = 60%, global parameters = 40% and both become 100% on mobile.   You can change the float left/right on mobile widths to change the order of them to be what you'd like (ie: to put one on top of the other).\n. maybe I should just get setup locally. That'd save you a bunch of time.\nIf I get a chance later today I'll give it a go.\nOn Fri, Aug 28, 2015 at 1:55 PM, Daniel Bachhuber notifications@github.com\nwrote:\n\nIf you're talking in real, practical terms: I'd say sub-commands = 60%,\nglobal parameters = 40% and both become 100% on mobile. You can change the\nfloat left/right on mobile widths to change the order of them to be what\nyou'd like (ie: to put one on top of the other).\nCool. I'll take care of this when I have a moment.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/2006#issuecomment-135824776.\n. Hey Daniel \u2014\u00a0I looks I might have some availability coming up to be able to dedicate a bit more time to this. Want to shoot me an email and we can discuss?   I'm saltcod at the big gmail-ator. \n. Sweet!\n. \n",
    "jghazally": "Hi yes, have \ndefine('WP_CONTENT_DIR', $_SERVER['DOCUMENT_ROOT'] . '/wp-content');\nin my wp-config... thanks for the quick response, loving this on my other installs BTW :)\n. Sorry but I also get:\nNotice: get_themes is <strong>deprecated</strong> since version 3.4! Use wp_get_themes() instead. in /xxxxx/wp/wp-includes/functions.php on line 2628\nwhen using :\nwp --path=wp theme status\nWP: 3.4.1\n. weird, changing to : dirname(FILE) still did not resolve the issue,, \n. no actually that worked (I erronously had 2 wp-config files~)\n. yes works great thanks! now to figure out MAMP ~ readign through the issues will post if I find a work around\n. Amended to use current_time('mysql')\nusing false does not fix the problem where invalid dates cause posts to 404 due to default permalinks not working ie:\nsite.com/-0001/11/30/post-100/\nhope that makes sense...\n. ",
    "jorgeorpinel": "This still doesn't work for me using DOCUMENT_ROOT and I'm on version 0.22.0 :T \nI'm probably doing something wrong since it's almost 4 years later! Unless the issue was re-introduced...\n. @scribu your suggestion at #issuecomment-14129866 isn't working for me unfortunately. Would help if you could explain what is going on and what is being fixed perhaps? Changing the host to 127.0.0 1 didn't make it work wither in my case. I'll keep trying...\n```\n$ echo $WP_CLI_PHP\n/Applications/MAMP/bin/php/php5.5.23/bin/php\n$ wp --info\nPHP binary: /usr/bin/php\nPHP version:    5.5.20\nphp.ini used: \nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config: \nWP-CLI project config:\nWP-CLI version: 0.19.1\njorpinel@macjorgeo wp$\n$ wp\nWarning: mysqli_real_connect(): (HY000/2002): Connection refused in /Applications/MAMP/htdocs/wp/wp-includes/wp-db.php on line 1444\nDeprecated: mysql_connect(): The mysql extension is deprecated and will be removed in the future: use mysqli or PDO instead in /Applications/MAMP/htdocs/wp/wp-includes/wp-db.php on line 1474\nWarning: mysql_connect(): Connection refused in /Applications/MAMP/htdocs/wp/wp-includes/wp-db.php on line 1474\nError: \nError establishing a database connection\nThis either means that the username and password information in your wp-config.php file is incorrect or ...\n```\nMAMP MySQL is running and I can access my local WP dashboard.\n. p.s. the URL to curl the .phar from is https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar . And of course replacing the MAMP php version/folder, now it works! Still would love that explanation...\n. So, each time you update MAMP PRO this will happen again as it decides to remove previous versions old PHP binaries... So for the record, allow me to explain @scribu's instructions (updated):\n```\nsudo -s  # <-- start a new shell as root\ncurl https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar > /usr/share/wp-cli.phar\n^^^ download the latest wp-cli php archive in /usr/share/wp-cli.phar\necho '/Applications/MAMP/bin/php/php{x.y.zz}/bin/php /usr/share/wp-cli.phar $@' > /usr/bin/wp\n^^^ Write command to exec wp-cli.phar with MAMP's PHP bin ($@=pass args quoted) to /usr/bin/wp\nchmod +x /usr/bin/wp  # <-- make /usr/bin/wp an executable script\nexit  # close root shell\nwp --info  # <-- try this to check wp-cli is properly installed!\n```\nNote: change {x.y.zz} for your current MAMP PHP binary.\nLet me also provide an article that explains this matters properly. It also suggests wisely to move away from MAMP :)\nCheers!\n. For anyone who needs this without having installed WP-CLI via Composer, you can set it up manually by copying the contents of master/utils/wp-completion.bash to a local ~/wp-completion.bash file, and adding these lines to .zshrc (or .zshprofile I assume, not sure, I use oh-my-shell):\n``` sh\nWP-CLI Bash completions\nautoload bashcompinit\nbashcompinit\nsource $HOME/wp-completition.bash\n``\n. Not exactly the best solution in my mind. Anyone finding this issue may want to take a look at https://github.com/wp-cli/wp-cli/issues/137 instead.\n. Note: this had been solved back in the day in https://github.com/wp-cli/wp-cli/issues/137 but issue seems to be back. It seems usingdirname(FILE)` is the only option for now.\n. Also posted at https://wordpress.stackexchange.com/questions/183781/php-parse-error-on-wp-cli-not-on-web-server\n. Same error indeed with php -l . Confused. The website runs normally. I'm running nginx with PHP FPM though, wonder if that makes a difference.\nWAIT it may be a lazy <? without \"php\" in my functions.php , I think I set fpm's php.ini to short_open_tag=On but not on cli ! Let me try that...\n. YUP that was that >:| sorry about the false alarm. Perhaps someone else will find this \"issue\" useful though.\nJust enabled\nshort_open_tag=On\nin /etc/php5/cli/php.ini\np.s. this is an aws ubuntu box\n. I will eventually. I have many, many legacy themes developed by 3rd parties. When I find a good way to replace only <? (and not '<?' in \"<?php\" in thousands of files reliably, I'll go for it :) .\n. Awesome thanks for the suggested regex.\nThere's also the cavet of <?= :D\nI'll get to this at some point. Not really a problem for anyone right now. Cheers\n. ",
    "baldursson": "I have this in my wp-config:\ndefine(\"WP_SITEURL\", \"http://\" . $_SERVER[\"HTTP_HOST\"] . \"/wp/\");\ndefine(\"WP_HOME\", \"http://\" . $_SERVER[\"HTTP_HOST\"]);\nSite works fine, wp-cli does not. When I change the path to:\ndefine(\"WP_SITEURL\", \"http://\" . $_SERVER[\"HTTP_HOST\"] . \"/../wp/\");\ndefine(\"WP_HOME\", \"http://\" . $_SERVER[\"HTTP_HOST\"]);\nSite breaks, but wp-cli seams to work fine. How do I get both to work?. Ah ha! Replaced it with dirname(__FILE__) and now they both seem to work. Thank you @javorszky for a super fast response.. ",
    "javorszky": "note that when using wp-cli, the $_SERVER superglobal has a lot of missing information. Updating the requests library to dev-master in composer.json solves this issue btw.\n. I'd be quite happy with a file-based logging fallback. Either I'm missing something, or there's no way to set one up though.\n. Workaround:\nphp\n<?hh\n$out = fopen('php://stdout', 'w');\n$line = 'this is test';\nfwrite($out, strtoupper($line) . PHP_EOL);\n\nSame if I use fopen('php://stderr', 'w'); as well.\nRef: https://github.com/facebook/hhvm/issues/140\n. Hm... using STDOUT and STDERR as is in fwrite() works in hhvm.\n. I really like Ghost's setup legally. To summarize: http://john.onolan.org/what-it-means-to-be-non-profit/\n. Hi @theDanielJLewis! Would storing those 4 lines of data in 4 different rows be a viable option? That would eliminate having to create something that is non-trivial to recognise serialised arrays within other things.\nOther edge cases that this would bring about is: how do you know whether the thing in the middle of other things that look like a serialised array is actually a serialised array, and is meant to be search-replaced, or just a string, and changing that would break something else?. > I understand that's ultimately more desirable. But this is the way PowerPress and a couple other plugins work.\nI would argue that in this case PowerPress and the other plugins that work this way should be ones migrating over storing them separately.\nI can't see a benefit of storing these things in one row, but there are numerous drawbacks.. In case of the dev site I'm working on currently, the config file used is wp-config.php, but the contents of the file are (abridged) as follows:\n```\nif (file_exists(dirname(FILE) . '/wp-config-local.php') && !isset($_ENV['PANTHEON_ENVIRONMENT'])):\n    # IMPORTANT: ensure your local config does not include wp-settings.php\n    require_once(dirname(FILE) . '/wp-config-local.php');\n/*\n * Pantheon platform settings. Everything you need should already be set.\n /\nelse:\n    // their local settings here\nendif;\n``\nIf I expand that with other forks, likewp-config-dev.phporwp-config-dave.php, etc, then the file parsed is STILL going to be thewp-config.phpfrom what I understand.. Hm,wp config infowould make sense, except there's nowp configcommand yet. There's awp core config`, but that writes things.\nThere is a wp db command already, so adding info to it is fairly easy. Or maybe wp core info?. wp config info is more sensible then. :shipit: \nI'll help out over the weekend.. Watch out for situations where one hook is scheduled 2000 times. The output in that circumstance probably needs to be truncated / sanitized.. What is it that you want to achieve with the survey?. I was wondering if $item needs to be an object, or can that be an array instead.. Yup, can do, probably over the weekend though, as WordCamp Brighton time for the next few days. I'll do my best with unit tests, but I might need some help with that, but will reach out if that's the case! :)\nFeel free to assign me to this issue.\nThanks for digging up https://github.com/wp-cli/wp-cli/commit/ae1d08bf2b4a3536f2f259444a9d0fbaf32290fe, will have a look at why that happened.. No, sorry! Work and life got in the way of this, but thank you for doing this! <3. Not only that, the entire codebase is full of STDOUTs and STDERRs and STDINs... this is going to be a bit bigger. My thinking is to introduce new constants, and depending on parser used, HSTDIN = STDIN or HSTDIN = fopen('php://stdin', 'w');. Thoughts?\n. Workable. Let's do that!\n. ",
    "pixline": "Would like to help with this. I would do something like that: https://gist.github.com/pixline/5895867 \nShould it be a core wp-cli command or a plugin?\n. Thank you for issues refences and info, I'll proofread them.\nI can confirm that db reset and wp (re)install works in a plugin (at least on my debian shell), I'm already doing it :\nhttps://github.com/pixline/maGIC-client/blob/master/lib/wp-cli.class.php\nWhat early command makes you feel worried about?\n. I'll have a look about them anyway, just started reading. Is there a sample community package I can look at? \nAs a proof-of-concept and test implementation a plugin should work, but a community package would be better for sure :-) Thank you!\n. First attempt. \nhttps://github.com/pixline/wp-cli-test-command\nLooks like it works with composer but fails elsewhere. I did not expect a lot this time, though :-) \n. Another attempt, this time as a plugin: https://github.com/pixline/wp-cli-test-command-plugin\nThis one works out of the box, still can't find where I'm wrong with the other one. I'll have a fresh look tomorrow.\n. Finally managed to catch up with #571 and read #424 . \nHad some more testing with the composer version, but it keeps throwing errors on calls to register_early_invoke().\nThis is the stack trace: https://gist.github.com/pixline/5909930 \nStrange thing is: both $when_to_invoke and $this appears populated correctly. I guess it belongs to the early commands thing but I can't figure it out yet.\nPlugin version keep working instead. I'm going to clean things up and optimize them next days, then I'd look for some testing and feedback from wp-cli users. Also I'm trying to understand the best way to install wp-cli on Travis CI and test the command, but I'm half a newbie on that side, it will take a bit.\n. It works! Thank you for the quick fix, I was already diggin' the code (learning a lot of cool things, though).\nThe composer version now works and support WP reset/reinstall alongside it:\nwp test setup theme --reset --url= --title= --admin_email= --admin_password= --admin_name=\nI'll get the plugin version in sync, then it should be ready for testing while I write a little documentation.\n. Ok, I'll focus on composer version then. Already cleaned up a bit, I'll work to extend the command and test a lot.\n. It should work a lot better now, even if it needs testing in other environments than mine. \nLooking forward Travis CI testing but I need to understand how to setup it for this project first.\nBesides, I'm in love with composer now :-)\n. @scribu : Ok, it makes sense: I was thinking of grouping test setups in a single command facility but you're right from a design point of view. Speaking of command coherence my doubt is: wouldn't be install better than setup?  \n@jmslbam : the test command use the default test dataset but it supports alternative files as well, I'll add a list of alternative files in the command wiki/homepage for now, I'd love to ask theme testers about their usual setup before.\nI also have a huge testfile with more than 7000 post/pages/attachments, alternative datasets are something I'd like to support in a next future.\n. It occurred to me that this won't work with actual stable wp-cli, as import is actually in master.\nUpdated instructions with wp-cli upgrade command.\n. Uhm, I'm still in the \"plugin\" state of mind, I'd better proofread composer docs.Thank you.\n. pixline/wp-cli-theme-test-command@6bb52ee works, in Travis too. \nMajor issue I noticed so far are about wp path and --path= : \npixline/wp-cli-theme-test-command#5 \n. @jmslbam : your suggestion made it, enjoy! :-)\nwp theme-test install --data=wptest\n. I'll check tomorrow if it's my package fault, I'm a bit busy these days but I'll have a look at that ASAP.\n. I'm not really used to Phar crafting so I can't really elaborate on benefits vs. drawbacks (yet).\nI think installer.sh should install the Phar archive unless asked for the \"regular\" Composer + Git setup; it could be a command line flag or argument, maybe it could make use of the VERSION parameter as well (like in `VERSION='phar' or something like that).\n. Ouch, I missed the notification in my forced offline month.\nThe dependency is now removed but I couldn't test it 100%, I'll do in the next days whenever possible. \nReally sorry for the lag, guys.\n. ",
    "rinatkhaziev": "wp-cli 0.5.0\n. on the other hand, \nwp plugin update --all\nworks just fine\n. I installed it via pear, which installs 0.5.0 where it's not fixed yet.\n. ",
    "creshal": "No, there is no space. It literally is called testfoo. (I.e., no unicode-fu either, plain ascii letters)\n. ",
    "tnorthcutt": "I wasn't able to reproduce this. Here's what I did (this is the complete contents of the script I ran):\n#!/bin/sh\ntheme=genesis\nwp theme\nwp theme activate $theme\nRunning it produces (again, this is the complete output):\n`$ ./themetest.sh\nInstalled themes:\n  A ba-base-theme\n  I genesis\nLegend: I = Inactive, A = Active, U = Update Available\nSuccess: Switched to 'Genesis' theme.. Ah ha, those both look wonderfully helpful. Thank you!\n. Sorry, yes, typo./srv/www/wp-cli/vendor/autoload.php` exists.\nReinstall via git produces same result.\nBut, renaming /home/vagrant/.wp-cli/config.yml so that it doesn't get picked up, then reinstalling via git, seems to have done the trick.\n. require:\n  - vendor/autoload.php\n. I honestly don't follow - where else is it required?\n. Roger. I don't know where /home/vagrant/.wp-cli/config.yml came from. Sorry that's not more helpful.\n. > when is this happening\nWhat is \"this\"?\n\nOn a clean vagrant up from scratch that file shouldn't ever exist.\n\nWhich file?\n. > Similarly, wp --ssh=<host> db import database.sql would copy database.sql from my local filesystem to my remote file system before running the import.\nWhat would you then do if you wanted to import an existing database.sql file already on the remote filesystem instead of copying from local first? In other words, how would you avoid the proxy? Perhaps you'd need a --proxy=false flag?\n. @danielbachhuber in my case, I have a .zshrc but not a .zprofile (zsh equivalent to bash's .profile). From some quick searching, it seems as though this may be due to oh-my-zsh not shipping with .zprofile by default. Regardless, sourcing in .zshrc should work.\n. > Build failure seems to be a Travis problem.\n\n. Yes (I added to my .zshrc but that may be wrong) \u2013 does that not agree with my instructions here?\nWithout the bashcompinit lines, I get a command not found error for complete (last line of wp-completion.bash).\n. Ah, gotcha. Fixing.\n. ",
    "egeste": "I installed the wp-cli utility from pear - is this feature still in development? It doesn't appear to work in my installation\n```\n\nwp core update_db\nusage: wp core update\n    or: wp core version [--extra]\n    or: wp core install --site_url=example.com --site_title= [--admin_name=] --admin_password= --admin_email=\n```\n. Thanks\n. \n",
    "ozh": "(ignore the first two commits, it's just a misconfiguration of that weird GitHub client)\n. I'll do that\n. If I understand correctly : since I opened a pull request from my \"master\" branch, whenever I'll commit to that branch, the changes will show up here? So ideally, I should have make a separate branch, say \"comment\", and commit in that branch only if I want to add to this PR?\n. Thanks for helping in my git denoobification process :) Been reading tons of docs recently but it's really in doing stuff that I'm starting to get it\n. Also: user should be able to Ctrl-C their editing without wp-cli trying to update anything\n. ",
    "goldenapples": "Well, I didn't think about accessing the options table directly - wp option get rewrite_rules is perfectly fine for dumping the rewrite rules from CLI.\nObviously Rewrite Rules Inspector is a more powerful tool for debugging rewrite issues, but in some cases just browsing the rules is enough to diagnose a problem. Today I found an issue where my rewrite rules were lost on upgrading to 3.4.2, because WordPress called a hard flush on upgrade, and my custom rewrite rules weren't registered yet. Just looking over the rewrite_rules option value was enough to let me see what the problem was. \nUpdating rules, though, is a little too complicated to easily do through accessing the options directly...  In order to change the rules, you'd have to update permalink_structure, category_base, and/or tag_base and then trigger a rewrite flush by deleting rewrite_rules. I picture a command along the lines of\nwp rewrite structure '/blog/%post_id%/' \n    --category-structure=\"/blog/category\" \n    --tag-structure=\"/blog/topic\"\nwhich would update the options using API functions to catch any filters and flush_rewrite_rules()\n. OK, I cleaned up the code a bit, and wrote some basic documentation for the three methods I implemented.\nThe one thing I think is probably missing is multi-site capability - I don't run any multi-site installs, so I'll have to set up a new testing env to see how flushing rules is done on multisite. Will this work out of the box, or does it need to implement an argument like --blog? \n. Will do, that's a great feature.\nOne nitpick... for consistancy with expected behaviour, commands with tabular output should check to see if the output is direct to STDOUT or is being piped to another function, and adjust the output format accordingly by removing the cell borders if necessary.\nExample: I expect that this will list all the display names of registered users on my site\n$ wp user list | awk '{print $3}'\nbut its actual output is more like \n|\n|\n|\n|\n|\n|\n|\n|\n|\n. The one I was thinking about was mysql. A comparable function to the one I tried above using mysql; like\n$ mysql -u root databasename -e 'select * from wp_users' | awk '{print $4}'\nwill give the fourth column of data, not the second data column after counting two | characters.\nI can't think of any other commands that output tables offhand, but this use of mysql output is something I use pretty regularly. \n. I don't know, JSON is great for parsing data in higher-level scripting languages, but its definitely overkill for use cases like the bash script I needed it for.\nThe porcelain format also isn't quite so important to me as removing the color escape codes when output is not being displayed in a terminal. The output of wp plugin status is already pretty close to that of a command like git status --porcelain; its just that having all the escape codes in the text makes it a beast to try and parse the plugin name out of it. \nI think I would like, more than anything else, to use the is_atty() conditional to determine whether to colorize the output or not - for all commands. From there, there could also be other output options. If the command output was refactored into a formatter class like @scribu mentioned above, then it would be much easier to extend that with different output formats.\n. Regarding the table vs. porcelain output issue, I'll have a look at some other shell commands to see what the standard output formats are. From what I've seen, basic tab-separated text is the simplest to work with in bash and a pretty established standard - most commands that output multiple fields per row just separate them with tabs, and a lot of unix utilities like cut, awk, and sed are all built to process lines of tab-separated text.\n. This probably needs to be dealt with in php-cli-tools, since all of the output functions in wp-cli are calling some variant of \\cli\\render. See https://github.com/jlogsdon/php-cli-tools/pull/14 \n. (Sorry for the spam. I always forget which account I'm logged in here with.)\nSwitching to Pandoc would make #287 much more powerful, as Pandoc could handle converting post content to Markdown (or any of the other formats it supports) before editing, and then back on save.\n. Ah, I didn't think about that. :) Back to the drawing board with that idea, then...\n. Thanks for all the feedback and help. \nI've been trying to think if there's other use cases that this should be expanded for, but I'm not quite sure what capabilities all editors can handle.  It might be nice to be able to pass in multiple items to wp post edit, and have all files open in separate tabs/windows in the editor... but can all system editors handle this syntax? \n. No, its nothing magical, its basically just syntactic sugar for for .. in.\nxargs -I {} runs the command given for each line of input, substituting the input line for {}.\nAnyways it was just intended as demonstration. I would envision the only thing that would need to be added to the command would be checking $args[0] for a filename, and checking STDIN to see if a stream is provided if no filename is given.\n. You're right. Worked at first, but then I tried to add an error handler that checked if file_exists and is_file. Turns out that doesn't work with STDIN.\n. The arguments do make more sense when following more closely to the labels used in the admin media uploader. Fixed that.\nI reverted the change I made to file completions for this command, because it was breaking file globbing. Completions will have to be refactored anyways, as mentioned in #212.\nI'll add a couple behat features later today or tomorrow to test this: probably one importing from a local file and one importing from a URL. It will cause a merge conflict with #366 though, so will need to be rebased once that's merged in.\n. Whoa! I'm surprised by that too, it wasn't the intended behavior. I'll add some more tests, and then see why that's happening.\n. OK, that issue should be fixed, and seems to be confirmed as fixed by the tests. I didn't realize the wp_handle_sideload() function was just basically doing a rename() under the hood - I assumed that it copied the files it was going to sideload. \n. Good comment on using variables in the feature definitions, that definitely makes them easier to read.\nIn order to get the \"file should exist\" step to replace variables and work with a full path rather than just the filename, I had to redefine that step a bit. All of the existing features still pass, but I'm not sure whether it would be better to define a new step anyways? If so, let me know and I'll rewrite this.\n. I agree with you guys. Did an initial pass at scraping the Codex and converting all the articles to roff format, and its either about 16MB of raw files, or a very fussy script to update and maintain with a lot of dev dependencies. I'll keep playing with it and see if I can figure out a sensible way to integrate it with WP-CLI as a community package. \nFWIW, the raw man files are here: https://github.com/goldenapples/wpman\n. I'd like to also see this command get a --post=<ID>... argument, so that it could be run over only specific posts.\nIf I had a large site and had just imported a dozen or so posts, I'd like to be able to process only those posts and not everything on the site.\n. Good idea. I'll add a test along those lines. \n. @scribu I added two tests; one for quitting out of an editor without saving, and one for modifying the post content and saving. Some more advanced feature tests might be in order for filters, but this should cover the basics.\n. One bug here: after ef2f66ecc12c5c4a87a7fd741c67c63ae20eefc4, custom urls and paths provided by command line flags or wp-cli.yml file configuration are no longer applied. \n. > can you write a test case to reproduce?\nWill do. Its been so long since I've mucked around in wp-cli, I'll have to refamilarize myself with its internals a bit.\n. > I'm wondering if the SHELL variable could be used?\nOn my install, SHELL is just /bin/sh, but that is a symlink to /bin/busybox, so a realpath check would work. Environment detection is a blunt tool though: it's totally possible to install GNU less and a shell that supports color on busybox.\nLocally I'm setting PAGER=more and that works for me, and I'm happy to close this if that's the best solution that can be done. It just strikes me that it would be good to default to more in terminals without color support. . I like that approach. I'll try and come up with a PR to address it in the next few days.. That's true. And there's not really a chance of unexpected failure, so verbose option isn't necessary for this command. I'll remove it.\n. But wp post create can accept --post_content as an associative argument. It doesn't really make sense for most cases to pass in a string and then edit it, but it seemed wrong to just discard post content is it were passed as an associative arg. Should we throw a warning of some kind if user tries to use both --post_content and --edit arguments?\nAccepting content from STDIN is an interesting idea, but probably well outside the scope of this PR. It would probably go along with accepting a filename to read content from. What kind of syntax would you use for that? \n. At first I was getting line ending bugs, which is why I thought the \"t\" flag in fopen() might be necessary, and there wasn't any way that I could see to pass that through file_put_contents(). \nI don't think \"t\" is actually doing anything here though, the bug I was getting was unrelated; caused by trying to trim content and messing up the trailing whitespace. I'll use file_put_contents()/file_get_contents().\n. Probably so. I was just going off the argument names in media_handle_sideload(). It would make more sense, though, to use the terms that are used in the media editor: title / caption / alt text / description. I'll revise.\n. Wow, yeah, that simplifies things dramatically. I'll fix and rebase.\n. ",
    "lackingpenguin": "I don't think so, since the PHP executable will be in the MAMP folder regardless\n. ",
    "pkaeding": "No, it is my homepage content.  I saved it to a file and opened it in a browser to be sure it wasn't just my site's chrome wrapping an error message or something, but it is actually just the HTML from my home page.\n. Yes, as a matter of fact, I do use WP Super Cache.  Is this what is causing the problem?\n. Okay, WP Super Cache seems to be involved.  I disabled the cache, and then wp help returned the expected output.\nI don't want to disable the cache, though.  I guess I could disable the cache before using wp-cli, and re-enable it afterwards, but that sucks.  \nIs it possible to have wp-cli not get cached responses?\n. Wow, after having just upgraded the core WP code, and a handful of plugins in under 2 minutes (including toggling WP Super Cache off & on), this is amazing!  Upgrades have always been a bit of a pain, since I don't like the idea of making the WP installation writable by the user that it runs as.  \nWhile I still think it would be great if we could get wp-cli and wp super cache to play well together, this is still an amazing tool!  Thanks!\n. Sure, here are are what seem to be the interesting parts of my WP Super Cache config screens: https://dl.dropbox.com/u/2397175/wpsupercache.pdf.  I have the CDN options disabled, so I omitted that screen, but let me know if you want to see that, or anything else that might help.\nThanks!\n. ",
    "markjaquith": "I ran into similar problems with Batcache. Here was my solution:\nIn wp-config.php, instead of blindly defining WP_CACHE, make sure we're not running on the command line:\nphp\nif( !defined( 'WP_CACHE' ) && PHP_SAPI !== 'cli' )\n    define( 'WP_CACHE', true );\n. Two options that I see:\n1. WP-CLI could define WP_CACHE as false\n2. Individuals could use my snippet to not set WP_CACHE when on the command line\n. But isn't that just a warning? Not the end of the world...\n. Ah yeah. So, then I'd recommend option 2: that people add that simple PHP_SAPI !== 'cli' check before defining WP_CACHE. I'm trying to think of a way that WP-CLI could help guide people to that solution...\n. What about tricking WordPress into thinking that WP-CLI runs are is_admin()? All caching backends I know of bail for that.\n. :+1: on --config-path. I too use WP as a clean submodule and would be annoyed if it looked in --path for a wp-cli.yml file with no recourse to tell it otherwise. What makes the most sense, for both --path and the propsed --config-path, is to assume current directory for both, but to allow each to be individually overridden.\n. My understanding was that you don't get a persistent cache on the command line. Emphasis added:\n\nMostly for testing and debugging. Setting this enables APC for the CLI version of PHP. Under normal circumstances, it is not ideal to create, populate and destroy the APC cache on every CLI request, but for various test scenarios it is useful to be able to enable APC for the CLI version of PHP easily.\n. A word of warning, to expand on @dangardner's advice. Don't do the curly-brace-omitting method like this:\n\n``` php\n<?php // ignore, just for highlighting\nif ( ! class_exists('WP_CLI\\Runner') )\n    require_once(ABSPATH . 'wp-settings.php');\n```\nBecause if at some point your wp-config.php's wp-settings.php line does become removable by WP-CLI, you'll have a syntax error (in exec()'d code \u2014 ugh). So do this:\n``` php\n<?php // ignore, just for highlighting\nif ( ! class_exists('WP_CLI\\Runner') ) {\n    require_once(ABSPATH . 'wp-settings.php');\n}\n```\nNow that line of code can be removed without a syntax error.\n. My workaround, for anyone stumbling upon this:\nwp eval \"echo get_term_by( 'name', 'Name of Category', 'category' )->term_id;\"\n. ",
    "taras": "I was able to accomplish this by adding the following to my wp-config.php\nphp\ndefine('WP_DEBUG', defined('WP_CLI') && WP_CLI && array_key_exists('debug', $assoc_args) && $assoc_args['debug']);\nWould it make sense to make this default behaviour? ( is it even possible? )\n. If $assoc_args goes away, will you provide another way to access the arguments?\n. ",
    "ryanduff": "How would a nested command like this work on multisite? \nwp post delete $(wp post list --post_type='page' --ids)\nWould you need to specify --url=site.com/path for each command? ie.\nwp post delete $(wp post list --post_type='page' --ids --url=site.com/path ) --url=site.com/path\n. Can anyone confirm this? I updated my .zshrc with the lines from the updated instructions in 6c919d6f08823db6bf39a5da7dab4c5559fe7d27 and am still getting this error when opening a new shell:\ncomplete:13: command not found: compdef\nUsing zsh 5.0.2 on OS X 10.8.4 with Oh-My-ZSH installed as well. \nThe line that seems to trigger it is the call to the auto-completions file:\nsource $HOME/.composer/vendor/wp-cli/wp-cli/utils/wp-completion.bash\n. Seems to be a location issue. If I moved it to the very end of my .zshrc file it works fine now. \n. Looks like there's already a confirm method that allows a barebones implementation. Something similar to this is that allows being called from inside the command and pass the response back is what's desired. Will develop patch and post here. \nhttps://github.com/wp-cli/wp-cli/blob/master/php/class-wp-cli.php#L145\n. Actually upon review of php-cli-tools, it looks like most of the things I was looking for are already included. Going to close this out. \n. So maybe something along the lines of this:\n--comments=200\n--posts=15\n--max-per-post=10\nAll optional args, with the explicit understanding when using all 3 args, --comments acts more like \"maximum comments\" being the last limit to be reached. In this example, max of 10 per post across 15 posts would leave your comments generated between 15 and 150; --max-per-post driven by a random number between 0 and limit specified. \nTypical use cases would probably be either:\n--comments=200 for 200 randomly generated comments \nor\n--posts=15 --max-per-post=10 to randomly generate comments across 15 posts with an upper limit of 10 per post. \nI think that's probably simple enough but leaves room for variation to generate comments meeting a few different use cases. \n. Didn't think about --post_ids, but could definitely see a case where you may want to generate random comments on a specific post. Could really do it on any post type. \nIn lieu of that, also made me realize when we grab posts to generate comments on, I'll also need to check the comment status and make sure it's set to open. \nAlso... good catch on --comments/--count. I hadn't gone as far to match the other subcommands yet but would have realized it when I typed out the full command that --comments made no sense.\nThanks for the feedback. I think I have more than enough here to start framing some code and tests out and get a PR together. \n. This is what happened when I read that last comment\n\nAlthough, that approach could get a bit hairy. I see where you're going with it though. And I like it. \n. http://loripsum.net/ has an API. Documented in bottom right block on homepage. \n. @Japh I do... about half done. Working on testing some stuff so I can submit a PR. Need to find some time to finish it up. \n. Will clean this up and get a PR in shortly so we can close this out. \n. Finally gonna tackle this over the weekend now that I have a lull in client work-- what are your feelings on the lorem ipsum helper function or just go the route of #880 and accept content from STDIN? \n. Ah hah! This is what was breaking my multisite install the other week. Was running an import and it kept failing when I specified the url. Ended up rewriting my code to be arbitrary and just use a switch_to_blog() call so it didn't require specifying a site on the command line. \nThis is an interesting issue and I'm not sure any answer will be easy. Unless I have a stroke of genius, I doubt I'll be the one earning a gold star ;)\n. Could we integrate that so we just run wp core update-db --all ?\nWould be nice to have that built in instead of everybody that needs it having to script it. \n. I have code that'll do this for database stored transients, but like @danielbachhuber said... I'm not exactly sure what would be required to make this work with an object cache. \nhttps://github.com/ryanduff/clear-transients/blob/master/clear-transients.php\n. I wasn't running in shell, but rather a command. \nI nailed it down to PHP Warnings. In my case, I had a local copy of a project set up and it had the WPEngine mu-plugin there. Naturally that's going to throw warnings when not running in their environment. When I removed that plugin, my scripts ran fine again. \nMay not be the same, but look at your error logs and see if anything coincides.\n. How about I whip up a pull request for a public method for random content? ipsum_text( $words = 50 ) \nI can tie it in for the comment generate PR I'm working on #671 . Traveling today but can get two PRs together tomorrow and update this one to use that new method. Should probably open a separate issue to add something like that as well right @scribu ?\n. FWIW, you may want to update http://wp-cli.org/blog/plugin-unit-tests.html since it references a now obsolete workflow. Not sure if you have a procedure in place for handling some of the old blog posts that now show irrelevant commands/info. \n. :thumbsup: for the direction this is going. Looks very clean and readable. \n. @scribu Interesting. Maybe that's my fault. \nI get this on first tab:\nhttp://d.pr/i/xsOl\nThen can tab through like so: \nhttp://d.pr/i/hwt9\nI can't recall what it did before. I'll see if I can fire up a bash session and see what happens. It should return all of them, like you said. \n. I just tested in bash, both with and without my patch. With patch it completes with the first and dumps out the rest of the options below in a single column like you were seeing. \nWithout patch, it just completes with the first match and doesn't show any options. \n. I think the command matches what you expect. wp plugin|theme status gives you the status-- active/inactive. wp core version reports a version string. \nIf I came across wp core status I'd expect it to give me more info besides just the version, like whether it's a single or multisite install, whether it's up to date or not, etc. \nAs a sidebar, one thing to consider with things like this is that some may be including them in scripts to check a version number and do something based on what gets reported back. Changing command names could likely break things.\n. Is wp core config what you're looking for? \nhttp://wp-cli.org/commands/core/config/\n. I understood what @scribu meant in the comment on #1131 \nIt's possible there's another typo in there causing things to break in bash now. Working on a quick fix that will hopefully fix this regression. \n. Interestingly enough, I can't seem to replicate the \"intended\" bash behavior. I reverted the changes and re-sourced the completion file.\nIf I type wp c^ it just autocompletes to the first instead of giving me a list of all possible options. \n. @scribu Ok cool. So I wasn't actually crazy. \nI'll mess with it some tonight and see if we can get this sorted. Not sure if I'll get it to work from the same file or if I'll give in and figure out zsh completions and just make 2 files. Either way we'll get something where this works again for both. \n. That's how I read it... If the iThemes Security plugin is enabled, it's blocking WP-CLI from running and updating plugins. I'm not sure your fix is applicable in this case, @jmslbam \n. Back to your original write-up-- when is this happening? Are you specifically installing wp-cli or do you mean the provisioner doing it on the initial vagrant up command? \nOn a clean vagrant up from scratch that file shouldn't ever exist. \n. Sounds like a path issue. What does echo $PATH get you? Also, which less will show you the path to the less binary. \nIf it's a stock install less should be in a common location. More than likely the user account doesn't have that directory in the $PATH \n. ",
    "bpathirane": "Thanks for taking time to reply. :) \nWhen things goes through Wordpress it works properly.\nMy main problem point was \"delete\" method of  'wp-cli\\src\\php\\wp-cli\\commands\\internals\\plugin.php#255'.\nThere $command = 'rm -rf ' is used to remove a folder, which fails on Windows.\nAlso '/' in the path are a problem for PHP I guess, they needed to be converted to backward slases '\\'.\nYes, mysql command is available on windows, and I believe it supports same protocols it does on other platforms.\n. Great, Yes, that could be the best approach. I'll look into that and get back to you.\n. ",
    "hotzeplotz": "i have done some work on this (for Debian only) - FPM produces the package almost instantly but as it uses its own templates to build the package (rather than using the full Debian package building toolchain - see the author's detailed explanation here: https://groups.google.com/forum/?fromgroups=#!msg/fpm-users/hFLIqrwfpPs/0_P1c3sSKaoJ), it does not produce a debian folder suitable to be further tweaked according to Debian policy - so it's good to build a working package with no further build dependencies, but not so if the aim is to eventually get the package included in Debian or at least published via an Ubuntu PPA.\ni now have a working Debian package made via dh-make-pear. but i see that the Debian pkg-php maintainers recommend using pkg-php-tools instead so i'll try this route and submit a pull request when ready - i did some initial tests yesterday but got stuck with some phing version issue, but i assume i was just complicating things :)\n. quick update and a question - i have a first draft package up for review here:\nhttp://mentors.debian.net/package/php-wpcli\napart from a few obvious glitches, i just realised that i packaged together wp-cli and the git submodule php-cli-tools, which i'd probably need to package separately.\nhowever i'm not clear from php-cli-tools on whether this is available through PEAR too - it's not on the pear.php.net channel (unless i'm missing something): is this packaged somehow on the wp-cli/pear channel, or is it only available as source tree via github?\n. just a quick update to say that since the switch of wp-cli to composer, i'm working on properly packaging wp-cli and dependencies - Debian maintainers very recently added support for composer metadata in Debian packaging tools, which should make things much more tidy. it will take a bit more time as i need to finish work on composer itself and its few dependencies first, but things look more manageable now than at the time of my first packaging attempt via PEAR.\n. getting closer (but the packaging of Composer itself requires for Debian requires some extra glue and policy decisions in Debian so a first version of this is likely going to be for very adventurous testers only out of a PPA until things can flow nicely)...\ni'm packaging wp-cli's own dependencies right now and i was wondering if wp-cli/php-cli-tools is a temporary fork of @jlogdson's code with changes likely to be merged upstream or if you envisage that depending on wp-cli's fork is going to be a more or less permanent setting (this is mainly useful to help thinking through any requirements when installing Composer packages system-wide to avoid clashes).\n. @scribu thanks. i have packaged wp-cli/php-cli-tools for the moment - and noted the use case for my current composer-in-debian integration work.\n. @markoheijnen for this to be added to the main Debian archive, the package itself and all its dependencies need to comply with the debian policy - i packaged some dependencies but unfortunately i had less resources recently to get to composer itself and then to wp-cli.\nif you have experience with Debian packaging please join the Debian PHP group (http://pkg-php.alioth.debian.org/) - all help is welcome!\nto be able to simply install wp-cli via a .deb package, any packaging done via alien or similar tools should do the job (i've been using something similar myself every now and then, in the meanwhile).\n. ",
    "ezbik": "Hello all,\nI have created DEB package for latest wp-cli 0.8\nYou can pull deb (binary & source) from my repo https://github.com/ezbik/wp-cli\nI am open to merge debian/ folder to your repo, of course. \n. Scribu, \nDo you mean by 'debian folder' the folder with *deb file OR debian/ folder with files required to build deb-package (i.e. rules, changelog, control, etc)?\nPlease confirm and I will do.\n. I ended with packing it with alien:\nrm -rf ~/.wp-cli /usr/share/wp-cli\ncurl https://raw.github.com/wp-cli/wp-cli.github.com/master/installer.sh | bash\nVER=$( wp --info | grep 'WP-CLI version'| cut -d: -f2 | awk '{print $1}' )\ntar czf wp-cli-$VER.tar.gz /usr/share/wp-cli/\nalien --description='wp-cli'  -k  wp-cli-$VER.tar.gz\ndpkg -i wp-cli_$VER-1_all.deb\n. 0.8\n. ",
    "carlalexander": "I'm currently building a puppet module using the debian package. I noticed that the package did not install curl as a dependency. It would be good to add it. It does not come by default on Ubuntu Server (Quantal).\n. Right. So if you did a --force it could use cp -fr instead?\n. Sounds good! You'll probably need to add php5-mysql | php5-mysqlnd | php7.0-mysql | php7.0-mysqlnd as well.\n. Sorry just spotted that just now.\n. Ah sorry, I thought I saw it. But it's just a virtual package.\n. @danielbachhuber Does this mean that the packages work now or do we need to wait until the release of 0.25.0?\n. ",
    "szepeviktor": "Any progress creating a repo on github pages?\ndeb http://wp-cli.org/debian/                                wheezy main\n. Thank you!\nI was expecting only a phar file in the debs.\n. ...and this is not a repo, so no automatic update.\n. Here it is signed: http://mirror.szepe.net/debian/\n``` bash\n!/bin/bash\nDIR=\"$1\"\ndie() comes from here\n. /usr/local/bin/libbash\ndump_control() {\n    cat > DEBIAN/control << CTRL\nPackage: php-wpcli\nVersion: 0.0.0\nArchitecture: all\nMaintainer: Sz\u00e9pe Viktor viktor@szepe.net\nSection: php\nPriority: optional\nDepends: php5-cli, mysql-client, php5-mysql\nHomepage: http://wp-cli.org/\nDescription: wp-cli is a set of command-line tools for managing\n WordPress installations. You can update plugins, set up multisite\n installs and much more, without using a web browser.\nCTRL\n}\ndeb's content dir\n[ -d \"$DIR\" ] || die 1 \"no dir\"\n[ \"$(basename \"$DIR\")\" = php-wpcli ] || die 2 \"wrong dirname\"\npushd \"$DIR\"\ncheck dir's content\n[ -r DEBIAN/control ] || (mkdir DEBIAN; dump_control)\n[ -d usr/bin ] || mkdir -p usr/bin\nwget -O usr/bin/wp \"https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\" \\\n    || die 4 \"download failure\"\nWPCLI_VER=\"$(grep -a \"define.*WP_CLI_VERSION\" usr/bin/wp | cut -d\"'\" -f4)\"\n[ -z \"$WPCLI_VER\" ] && die 5 \"cannot get version\"\nsed -i \"s/^Version: .*$/Version: ${WPCLI_VER}/\" DEBIAN/control || die 6 \"version update failure\"\nfind usr -type f -exec md5sum {} \\; > DEBIAN/md5sums || die 7 \"md5sum creation failure\"\npopd\nbuild\nWPCLI_PKG=\"${PWD}/php-wpcli_${WPCLI_VER}_all.deb\"\nfakeroot dpkg-deb --build \"$DIR\" \"$WPCLI_PKG\" || die 8 \"packaging failure\"\nsign it\ndpkg-sig -k 451A4FBA -s builder \"$WPCLI_PKG\"\ninclude in the repo\npushd /var/www/repo.....\nreprepro includedeb wheezy \"$WPCLI_PKG\"\npopd\n```\n. @markjaquith Are you interested in a wp-cli  package from porting this class?\n. violations are logged as usual\n; If you fear that Suhosin breaks your application, you can activate Suhosin's\n; simulation mode with this flag. When Suhosin runs in simulation mode,\n; violations are **logged** as usual, but nothing is blocked or removed from the\n; request. (Transparent features are NOT deactivated in simulation mode.)\n; (since v0.9.30 affects (dis)allowed functions)\n;suhosin.simulation = Off\n. Is there a plan to merge this PR?\n. :+1: \n. NOT LIKE '\\_transient\\_%'\nNOT LIKE '\\_transient\\_timeout\\_%'\nare redundant.\n. Sorry. I use php cli to run wpcron.\nwp-cli also runs from cli.\nSome (poorly written) plugins generate PHP notices in cli mode, they use e.g. $_SERVER['REMOTE_ADDR'] without checking it first.\nThis is my shell script to run wp-cron:\n``` bash\nexport REQUEST_METHOD=\"GET\"\nexport REMOTE_ADDR=\"127.0.0.1\"\nexport HTTP_USER_AGENT=\"php-cli\"\ncurrentdir=\"$(dirname $0)\"\n/usr/bin/php \"${currentdir}/server/wp-cron.php\"\n```\nSo it would be nice to set these from wp-cli command line.\n. Thank you!\nI see wp-cli's ans WP's code. The ones I'm missing are REMOTE_ADDR and REQUEST_URI.\nIt would be simpler to have it in config.yml\n. Very nice.\nThank you!!\n. Sorry!\nwp user update viktor --user_pass='new-pass'\n. Temporarly could you update the favicon with this?\n\n. Please always show the vertical scrollbar.\ncss\nhtml { overflow-y: scroll; }\nIn current state it \"jumps\" horizontally when you go to shortpage->longpage or longpage->shortpage.\n. Yes. My favicon proposal was like a joke.\nIf you dont have time to design one: \nchrome http://munka.online1.hu/design-check/favicon-chrome/favicon.ico\nfirefox http://munka.online1.hu/design-check/favicon-firefox/favicon.ico\nempty http://munka.online1.hu/design-check/favicon-empty/favicon.ico\n. I like your design.\n:+1: \n. Chrome v35 on win7\n\n. This is luxury support.\nThank you!\nMay I use those constants in a single site WP?\n. Thank you!!\nfor other readers: http://wp-cli.org/config/\n. Here is a shell script that does all. You just have to log in:\nhttps://gist.github.com/szepeviktor/9606074\nIs there a way to link it from the Wiki?\n. \"soup to nuts\" makes me smile!\nThis is my routine that was done my hand before you told me this: url: example.com\nSo it make my day shorter.\nWhy not make other's day shorter?\nPlease paste it there!\n. :)\nI've tried to comment every part of the code. Harder!\nFor me this code is self explanatory without comments.\n. > That's why simply dumping code without any explanation is not very useful.\nWhat would be any explanation?\n. Ah! You must know them much better then me.\nFor me there are clients and me - no users touching code, running scripts.\n. ``` mustache\n<?php\n//  MySQL settings - You can get this info from your web host  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', '{{dbname}}');\n/* MySQL database username /\ndefine('DB_USER', '{{dbuser}}');\n/* MySQL database password /\ndefine('DB_PASSWORD', '{{dbpass}}');\n/* MySQL hostname /\ndefine('DB_HOST', '{{dbhost}}');\n/* Database Charset to use in creating database tables. /\ndefine('DB_CHARSET', '{{dbcharset}}');\n/* The Database Collate type. Don't change this if in doubt. /\ndefine('DB_COLLATE', '{{dbcollate}}');\n{{#keys-and-salts}}\n/#@+*/\n{{keys-and-salts}}\n/#@-*/\n{{/keys-and-salts}}\n$table_prefix = '{{dbprefix}}';\ndefine('WPLANG', '{{locale}}');\n{{extra-php}}\n/ That's all, stop editing! Happy blogging. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/ Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\n``\n. What are these comments?#@+*#@-. OK. I know how to PR but I am shy.\n. In a Hungarian WPwp --allow-root core update` outputs the native message:\nSuccess: A WordPress a lehet\u0151 legfrissebb.\nThat is my question.\nAnd stangely adding --version=3.8.1 reverts back to english.\nOr are those two messages come from different systems? WP and wp-cli?\n. Oh, Thank you!\nDoes it need to be fixed?\n. Yes. I am happy to be able to read both languages.\n. Provided \"passed version\" means the --version option.\n. Oh! Thank you!\n. WP-CLI 0.14.0\nMy WPs are 3.8.2.\nCompletion should work without a WP instance.\n. Thank you! It works.\n. Now wp option add ... does leaves autoload enabled.\nI'd like to have an option (e.g. --no-autoload) to disable autoload:\nphp\nadd_option( $option, $value, '', 'no' );\n. The usecase is adding a 10kB long option. This new option would spare MySQL execution time.\n(e.g. a filename, filehash array of all WP files)\n. Sorry for my lame attitude.\n. :( I was preparing to learn wp-cli's functions to write this PR\n. - authentication\n- a small utility to send commands and receive output\n. Yes, it could be a package.\nBut it is only a tiny bit of code...\n. Is there a plan to include it in the next release?\n. Very nice.\n. I think it worth to copy get_core_checksums() without caching.\n. PHPDOC says: \"Gets and caches the checksums for the given version of WordPress.\"\nCould you help me where it actually caches the checksums?\nIt seems to me there's no caching in get_core_checksums().\n. Copied: https://github.com/wp-cli/wp-cli/pull/1263\n. It would be nice to check ourselves too https://github.com/wp-cli/wp-cli/issues/1199\n. # wp cli version-check\n. I've read on other issues: \"phone home\"\n. ### Solution\n``` php\n<?php\n$wpcli_releases = 'https://api.github.com/repos/wp-cli/wp-cli/releases';\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $wpcli_releases);\ncurl_setopt($ch, CURLOPT_USERAGENT, 'wp-cli updater/1.0');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n$wpcli_data = json_decode(curl_exec($ch));\ncurl_close($ch);\nprintf('Strip first \"v\": %s' . PHP_EOL, $wpcli_data[0]->tag_name);\n```\n. I am not much of a developer.... I mean my code quality does not fit wp-cli!\n. Will it get into the next release?\n. Something to start with\n``` php\n<?php\n/**\n * Online version check\n *\n * @subcommand version-check\n */\nprivate static function version_check( $assoc_args ) {\n    $url = 'http://wp-cli.org/current';\n\n    $options = array(\n        'timeout' => 30\n    );\n\n    $headers = array(\n        'Accept' => 'text/plain'\n    );\n    $response = self::_request( 'GET', $url, $headers, $options );\n\n    if ( ! $response->success || 200 != $response->status_code ) {\n        WP_CLI::error( \"Communication with the webite failed.\" );\n    }\n\n    $body = trim( $response->body );\n\n    WP_CLI::line( 'Current WP-CLI version ' . $body );\n}\n\n``\n. There could be a--phar` option to display the phar URL instead\n``` php\n    /\n     * Get latest version from GitHub.\n     \n     * @when before_wp_load\n     /\n    public function version_check( $assoc_args ) {\n        $url = 'https://api.github.com/repos/wp-cli/wp-cli/releases';\n    $options = array(\n        'timeout' => 30\n    );\n\n    $headers = array(\n        'Accept' => 'application/json'\n    );\n    $response = self::_request( 'GET', $url, $headers, $options );\n\n    if ( ! $response->success || 200 != $response->status_code ) {\n        WP_CLI::error( \"Failed to get latest version.\" );\n    }\n\n    $release_data = json_decode( $response->body );\n\n    WP_CLI::line( 'Current WP-CLI version ' . $release_data[0]->tag_name );\n}\n\n```\n\n. Don't you have a fully automated script for the whole process? It is digital only!\nlike https://gist.github.com/markjaquith/4084290\n. Could you direct me how to go on till merging?\n. https://github.com/wp-cli/wp-cli/pull/1306\n. I see you're cleaning up.\n. Thank you for the explanation.\nOn one of site the dashboard showed updates but wp-cli told me there is no update.\nThen I did it with the mouse.\n. It turned out that some security plugin (BWPS) emptied the transient.\n. I'm very sorry - I missed the usecase again.\nwp plugin list | grep $'^.*\\tactive\\tavailable\\t.*$'\n(this is not wp-cli way)\n. So: when processing the output (this time wp-cli way)\nwp plugin list --status=active --update=available | cat\nI must add tail -n +2 to strip the header line.\nIn place of cat there is a shell processing function to filter plugins that upgraded only thier minor version.\n. In one sentence: Is there a way in wp-cli to get the update version?\nAnswer\nwp plugin update akismet --dry-run\n. Yes. Thank you!\n. https://github.com/wp-cli/wp-cli/issues/1166\n. Before plugin update take a look at the changelog on your console with elinks\nbash\nwget -qO- http://api.wordpress.org/plugins/info/1.0/akismet|php -r '$seri=unserialize(stream_get_contents(STDIN)); echo \"<h1>$seri->name</h1>\".$seri->sections[\"changelog\"];'|elinks -force-html\nExplanation\n\nset wget quiet & query the WordPress.org Plugin API\nunserialize with php, stream_get_contents(STDIN) means get all from stdin\necho the changelog part from the API's reply\nfire up elinks (a console browser) to view the changelog\n\nOr longer:\n``` php\nfunction wplib_read_plugin_api($plugin) {\nif (empty($plugin)) return false;\n\n$url = 'http://api.wordpress.org/plugins/info/1.0/' . $plugin;\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, $url);\ncurl_setopt($ch, CURLOPT_USERAGENT, 'wp-plugin-changelog/1.0');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n$reply = curl_exec($ch);\ncurl_close($ch);\n\nreturn $reply;\n\n}\nif (count($argv) === 2) {\n    $seri = wplib_read_plugin_api($argv[1]);\n    $plugin = unserialize($seri);\n    echo $plugin->sections['changelog'];\n}\n```\n``` bash\nthis is bash!!!\nWPLIBROOT=\"/usr/local/share/wp\"\nPLUGINCHANGELOG=\"${WPLIBROOT}/wp-plugin-changelog.php\"\nplugin_changelog() {\n    local PLUGIN=\"$1\"\n    local CHNGLOG=\"$(mktemp).html\"\n[ -z \"$PLUGIN\" ] && return 1 # no plugin name\n\nphp \"$PLUGINCHANGELOG\" \"$1\" > \"$CHNGLOG\"\nelinks \"$CHNGLOG\"\nrm \"$CHNGLOG\"\n\n}\ncall from your script\nplugin_changelog akismet\n```\n. Thank you for your finding.\nFor others:\nFull list of plugin fields\nwp plugin list \\\n--field=name,status,update,update_version,update_package,version,update_id,title,description\n. I confirm this.\n. ```\nwp plugin list --name=wordpress-seo\n+---------------+----------+-----------+---------+\n| name          | status   | update    | version |\n+---------------+----------+-----------+---------+\n| wordpress-seo | inactive | available | 1.5.4.2 |\n+---------------+----------+-----------+---------+\nwp plugin list --name=wordpress-seo --fields=name,update,update_version\n+---------------+-----------+----------------+\n| name          | update    | update_version |\n+---------------+-----------+----------------+\n| wordpress-seo | available | 1.5.5.3        |\n+---------------+-----------+----------------+\n``\n. It is in http://wordpress.org/plugins/better-wp-security/\nMaybe turning off that transient is at wrong time? It shouldn't be atplugins_loaded???\n. OK, I ask them.\n. Maybe here [Runner.php:94](https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L94) the--pathargument should be taken into consideration.\n. Oh! Thank you!\nCould you look for the YAML file in--pathalso?\n. Your website sayswp-cli.yml file inside a WordPress install. Thank you!\n. https://github.com/szepeviktor/wplib\n. Thank you for your kind lines.\nIs it possible to link wp-lib from the wiki and the homepage?\nWould you give it a better \"tag line\" instead of the current \"wp-cli wrapper shell scripts to manage several websites with sudo\"?\n. Thank you!\nThe thing is, it is written inbash, it is not a PHP project.\n. This wrapper does things without wp-cli also. Likeget-ownerwhich tells you the owner of the WP root directory.\n. Oh!\nAre you thinking about PHP parts of wp-lib?\n. I think this [self::set_user( $this->config );](https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L683) needs a condition.\nMaybedefined('WP_INSTALLING').\n. https://github.com/wp-cli/wp-cli/pull/1180\n. I hope this won't break anything.\n. I am glad that I could found the solution.\n. 1)$PATHis for directories only, no file names:wp-cli-location/wp`\n2) to execute a phar archive you have to have a shell like bash or a batch file like\nbat\nphp.exe /usr/local/bin/wp\nI would gladly help you on skype: szepe.viktor\n. You wrote twice the same:\nif I cd F:/somedir ; wp it works fine.\nBut if I cd F:/somedir ; wp ...\nIf you set alias wp=\"php /wp-cli/wp\" and issue the wp command, cygwin will for wp-cli in the ROOT!\nUnder cygwin set alias wp='php /cygdrive/f/somedir/wp'\n. If wp-cli resides on your F: drive alias wp='php /cygdrive/f/somedir/wp'\nIf it is on C: then alias wp='php /cygdrive/c/some-other-dir/wp'\nIf is is inside cygwin - I suggest this path - alias wp='php /usr/local/bin/wp'\n. Finally I think your php.exe (C:\\wamp\\bin\\php\\php5.4.12\\php.exe) is outside of cygwin and handles paths the Windows way. So alias wp='php C:/wp-cli/wp' or something like this...\nWith a shared screen like https://www.join.me/ it would take 3 minutes.\n. $ /cygdrive/c/a/wamp/bin/php/php5.5.12/php.exe C:/cygwin1/usr/local/bin/wp  --info\nPHP binary:     C:\\a\\wamp\\bin\\php\\php5.5.12\\php.exe\nPHP version:    5.5.12\nphp.ini used:   C:\\a\\wamp\\bin\\php\\php5.5.12\\php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.15.0\n. Please close the issue!\nAll this mess and more comes from mixing native windows progs with cygwin.\nThey have php and apache from cygwin packages: \nftp://sourceware.org/pub/cygwinports/portslist.txt\n. On Debian squeeze wp c+TAB produces wp cache, so no alternatives but the first choise.\n. bash cannot set array values by only a variable name, so\nCOMPREPLY=( ${opts[*]} )\n. ```\nviktor@szerver:~$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Debian\nDescription:    Debian GNU/Linux 6.0.9 (squeeze)\nRelease:        6.0.9\nCodename:       squeeze\nviktor@szerver:~$ bash --version\nbash --version\nGNU bash, version 4.1.5(1)-release (i486-pc-linux-gnu)\nCopyright (C) 2009 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html\nviktor@szerver:~$ git c[TAB][TAB]\ncheckout           cherry-pick        clone              config             credential-store\ncherry             clean              commit             credential-cache\nviktor@szerver:~$\nviktor@szerver:~$ wp c[TAB][TAB]\ncache     cap       cli       comment   core\nviktor@szerver:~$\n```\nThis bash rings the bell at the first [TAB] then lists commands vertically.\n. Write a wrapper script that checks anything you wish to do/have done, like https://github.com/szepeviktor/wplib\n. bash\nwp plugin list --field=name --name=w3-total-cache \\\n    --status=active | grep -q w3-total-cache || echo \"there's a problem\"\n. On the homepage you can read available formats\ntable, csv, json, count\n. You are looking for\nbash\nWIDGETS=\"$(wp widget list sidebar-1 --fields=id | tail -n +2)\"\nwp widget delete $WIDGETS\n. bash\nchmod +x /opt/wp-cli.phar\nln -s /opt/wp-cli.phar /usr/local/bin/wp\n. Please merge this.\n. This belongs to https://github.com/wp-cli/wp-cli/pull/1200\n. This error reflects that /usr/bin/env php points to /usr/local/php53/bin/php-cli which does not exist on your system.\n. Find php cli (the PHP Command Line Interpreter) by issuing\n- which php\n- or locate php\nthen take a look at update-alternatives --display php and update it.\nupdate-alternatives --help\n. (Then pls close the issue.)\n. Is it?\n[--<field>=<value>]\n: Extra arguments to pass to mysqldump\n. Yes it is. Sorry!\n```\nwp  --allow-root --path=/var/www/vkwpup/server/wordpress/ db export --version\nmysqldump  Ver 10.15 Distrib 10.0.11-MariaDB, for debian-linux-gnu (x86_64)\nSuccess: Exported to vk-wp.sql\n```\n. Built-in solution:\nbash\nwp user list --sort=id\n. Oh! I am sorry again.\nCould you clarify it for other:\nFilter by one or more fields. For accepted fields, see get_users().\n. I mean the verb filter does not reflect e.g. sorting. But pass any argument you'd pass to get_users() does!\n. [--<parameter>=<value>]\n    Control output by one or more parameters of get_users().\n. OK.\nPlease consider renaming <field> to something get_users()-compatible.\n. None of the args are wp_users fields: http://codex.wordpress.org/Function_Reference/get_users\n. Then merge the PR!\n. Oh! I am very sorry.\nI am not upset or something like that. I thought this commit was a PR\nhttps://github.com/wp-cli/wp-cli/commit/262f19117c7ac7b6711b55519e14d1e636da1142\n. https://github.com/wp-cli/wp-cli/releases.atom\n. php\nphp -r 'echo strlen(\"\u00f3ra\");'\n4\nphp -r 'echo mb_strlen(\"\u00f3ra\", \"UTF-8\");'\n3\n. https://github.com/jlogsdon/php-cli-tools/blob/master/lib/cli/Colors.php#L181\n. Thank you!\n. If I get no response. Would you use mb_strlen ?\n. I think there is no response from @jlogsdon\n. Sorry!\nwp cron event run\n. Is there a delete-issue button???\n. https://github.com/wp-cli/wp-cli/pull/1261\n. Also for wp db tables\n. Yes. You are right.\n. ``` php\nglobal $wpdb;\nif ( isset( $assoc_args['prefix'] ) ) {\n    $wpdb->query( \"SHOW TABLES LIKE '$wpdb->prefix%';\" );\n. @WebEndevSnippets  Could you help me?\n. php\nglobal $wpdb;\n    if ( isset( $assoc_args['prefix'] ) ) {\n        $tables = $wpdb->get_col( \"SHOW TABLES LIKE '$wpdb->prefix%';\" );\n        unset( $assoc_args['prefix'] );\n        $command .= ' --tables';\n        foreach ( $tables as $table ) {\n            $command .= ' %s';\n            $command_esc_args[] = trim( $table );\n        }\n    } elseif ( isset( $assoc_args['tables'] ) ) {\n\n```\nPHP Fatal error:  Call to a member function tables() on a non-object in /root/wp-cli/php/commands/db.php on line 150\n. in Runner:\nphp\nif ( $this->cmd_starts_with( array( 'db' ) ) && !$this->cmd_starts_with( array( 'db', 'tables' ) )\n    && !$this->cmd_starts_with( array( 'db', 'export' ) ) ) {\n. https://github.com/wp-cli/wp-cli/pull/1298\n. @WebEndevSnippets here is a db-prefix community package\n. What is your decision on prefixed export?\nhttps://github.com/szepeviktor/wp-cli-database-prefix-command\nphp\n$this->table_names = $wpdb->get_col( $wpdb->prepare( 'SHOW TABLES LIKE %s', like_escape( $wpdb->prefix ) . '%' ) );\n. Could it go like https://github.com/wp-cli/wp-cli/pull/1629 ?\n. Could you review my plans?\nhttps://github.com/szepeviktor/wp-cli/commit/e1b9f737758afabdcfdb5c41caf688491347753e\n. Without wilcard support and tests.\n. The same wilcard support as in wp option list:\nphp\nif ( isset( $assoc_args['search'] ) ) {\n    $pattern = self::esc_like( esc_sql( $assoc_args['search'] ) );\n    // substitute wildcards\n    $pattern = str_replace( '*', '%', $pattern );\n    $pattern = str_replace( '?', '_', $pattern );\n}\nOK?\n. https://github.com/wp-cli/wp-cli/pull/1663\n. Your idea is very welcome.\n. Yes.\nThere is a small shared hosting webspace, only phpmyadmin - not so professional.\nI cannot run wp-cli on it. Maybe there is, but I have to send two zip-s: one for the files, on for the database.\nSo I'd like to export from the dev box to a shared hosting.\n. Thank you!\nI shall close this one.\n. :+1: --role\n. @beckspaced Maybe inserting logging here helps:\nphp\nerror_log('ID: '.$comment_id.PHP_EOL);\n. And taking a look at\n``` bash\nwp comment list --status=spam --format=ids | hexdump -C\nor just\nwp comment list --status=spam --format=ids | cat\n``\n. Solution here:\nhttps://github.com/wp-cli/wp-cli/pull/1399/files\n. Here is the deb: http://mirror.szepe.net/debian/pool/main/p/php-wpcli/php-wpcli_0.15.0_all.deb\nAnd the update script: https://github.com/szepeviktor/wplib/blob/master/bin/wp-cli-updatedeb.sh\n. The updated update script: https://github.com/szepeviktor/wplib/blob/master/bin/wp-cli-updatedeb.sh\nand the PR https://github.com/wp-cli/builds/pull/6\n. On the mirror also:deb http://mirror.szepe.net/debian/  wheezy main`\nWithout using this apt.conf fail2ban will block your IP.\nAcquire {\n    Languages \"none\";\n};\n. wp plugin changelog seems like PHP code to me.\nWasn't it about Bash examples?\n. Actually most of my shell scripts could be turned into PHP.\n. Oh! You mean the one-liner?\nwget -qO- http://api.wordpress.org/plugins/info/1.0/akismet|php -r '$seri=unserialize(stream_get_contents(STDIN)); echo $seri->sections[\"changelog\"];'|elinks -force-html\n. How would you turn HTML into readable text on console?\nUse something like this? https://github.com/mtibben/html2text\n. Do you have an idea on converting HTML to console in a simple way?\n. :smile:  That is not in PHP!\n. You wrote\n\nmight be worth turning into a command\n. May I finish this?\n. So the new class would be the common part of option.php and site.php?\n. We need a computer scientist to have it accomplished.\n. Is it implemented somewhere? \n. Please take a look at it: https://github.com/wp-cli/wp-cli/pull/1263\n. Should I strip out if ( function_exists( 'get_core_checksums' ) ) {} ?\n. A modified set_url_scheme could also hijack the verification.\n. It is done already. Pushing....\n. I go to sleep. It is 03:28 AM here.\n. I am a bit confused.\nThis serves the request but gives me no shell.\n\nwp --allow-root --require=psysh.phar server --host=subdir.wp --port=80\nThis gives me the shell but serves no requests.\nwp --allow-root --require=psysh.phar shell\nPlease advise.\n. Now I understand how it will work.\nWould you mind mentioning psysh HTTP/POST usage around here in the Wiki?\n. Thank you!\nI didn't dare to delete it in a PR. Maybe it is something I do not know...\n. A simple way:\n``` bash\nwget -O/usr/local/bin/wp https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && chmod +x /usr/local/bin/wp\nif you use the suhosin patch\ngrep \"[^;#]suhosin.executor.include.whitelist.phar\" /etc/php5/conf.d/suhosin*.ini || echo \"enable phar in suhosin!\"\n```\n. @MiteshShah wp-cli works if you \"live with it\". Closely.\n. The whole script\n``` bash\nwp --allow-root db reset --yes\nwp --allow-root core download\nsecret dir (WP core)\nmkdir sd\nfind . -mindepth 1 -maxdepth 1 -not -name \"wp-content\" -not -name \"sd\" -exec mv -v {} sd/ \\;\necho Ret=$?\nstatic dir\nmv -v wp-content static\necho Ret=$?\nmain index.php\ncp -v sd/index.php .\necho Ret=$?\necho \"sed ...\"\nsed -i \"s|'/wp-blog-header.php'|'/sd/wp-blog-header.php'|\" index.php\necho Ret=$?\ndo core config, options from YAML\ncat ../wpconfig-static.php | wp --allow-root core config --extra-php\ndo core install, options from YAML\nwp --allow-root core install --url=http://subdir.wp/sd\nrevert home URL\nwp --allow-root option set home http://subdir.wp\nwp --allow-root option set siteurl http://subdir.wp/sd\nchown -R www-data:www-data *\n``\n. Installing wp this way protects you from the automated login attacks.\n. Yesterday I've integrated it as an option in [wplib](https://github.com/szepeviktor/wplib) (my shell wrapper around wp-cli)\n. That would be fine.\n. Excuse me.\n- movingwp-contentis supported throughWP_CONTENT_DIR`\n- installing to a subdirectory is detailed here: https://codex.wordpress.org/Giving_WordPress_Its_Own_Directory#Moving_a_Root_install_to_its_own_directory\n. That is correct.\nindex.php in the root has to be copied and modified at one line.\n. :scream: (almost) all of my installs are unofficial.\n. @danielbachhuber Is there someone for this bug who is familiar enough with wp-cli?\n. Thank you.\n. Maybe I haven't read the docs:\n\n--url= Pretend request came from given URL. In multisite, this argument is how the target site is specified.\n\nSo --url is not the home URL nor the site URL but the request URL.\nBut anyway command line should have precedence over the config file.\n. @danielbachhuber Could you take another look at it?\n. WP-CLI must get a URL fromsomewhere to set home and siteurl options.\nMy problem is that when there are different URL-s in the YAML and on the command line, the one from the YAML gets precedence. \n. ...at least back in Jul 21 2014.\n. Now it behaves correctly:\nyaml\nurl: http://wp-cli.wp\ndebug: true\ncore download:\n  locale: hu_HU\ncore update:\n  locale: hu_HU\ncore config:\n  dbname: wpclidb\n  dbuser: wp\n  dbpass: wp\n  dbprefix: cli_\ncore install:\n  title: WordPress website\n  admin_user: viktor\n  admin_password: *\n  admin_email: viktor@*\n  url: http://wp-cli.wp/sb\nDoes not mix the two url-s.\n. I am content with reverting home after wp core install.\n. It contains HTML.\nShouldn't it be an internal wp-cli warning?\n. I was thinking about WP_CLI::warning\n. With fixed random seed.\n. It is very nice.\n. Also on export.\nThey would be a nice couple with https://github.com/wp-cli/wp-cli/issues/709\n. May I get a list of steps to start the PR. Also for multistie installs.\n. As I understand your answer is community command.\nCould you summarize what to do? The best I have is a plugin which worked for me. I would mimic it in SQL only. Please help.\n. I promise I commit it to my playground only.\n. For googlers\nExecute this code by wp eval-file wordpress-db-change-prefix.php\n``` php\n$prefix_change_error = wpdb_change_prefix( 'newPrefix_' );\nif ( false !== $prefix_change_error ) {\n    print 'Error: ' . $prefix_change_error;\n}\nfunction wpdb_change_prefix( $new_prefix = 'wp_' ) {\nglobal $wpdb;\n\n/**\n * 1. Rename database tables\n */\n$tables_columns = $wpdb->get_col( $wpdb->prepare( 'SHOW TABLES LIKE %s', $wpdb->base_prefix . '%' ), 0 );\nforeach ( $tables_columns as $table ) {\n    // Table name without prefix\n    $table_basename = substr( $table, strlen( $wpdb->base_prefix ) );\n    // prepare() would quote table names\n    $rename_query = $wpdb->query( sprintf( 'ALTER TABLE `%s` RENAME `%s`',\n        $wpdb->base_prefix . $table_basename,\n        $new_prefix . $table_basename\n    ) );\n    if ( false === $rename_query ) {\n\n        return 'table rename failure';\n    }\n}\n\n/**\n * 2. Rename each blogs' options on multisite\n */\nif ( is_multisite() ) {\n\n    // Get list of blog id-s\n    $blogs_columns = $wpdb->get_col( sprintf(\n        'SELECT `blog_id` FROM `%s` WHERE `public` = 1 AND `archived` = 0 AND `mature` = 0 AND `spam` = 0 ORDER BY `blog_id` DESC',\n        $new_prefix . 'blogs'\n    ) );\n\n    // Update each blog's user_roles option\n    if ( is_array( $blogs_columns ) ) {\n        foreach ( $blogs_columns as $blog ) {\n            $new_blog_options_table = $new_prefix . $blog. '_options';\n            $blog_id_query = $wpdb->query( $wpdb->prepare(\n                sprintf( 'UPDATE `%s`', $new_blog_options_table ) . ' SET `option_name` = %s WHERE `option_name` = %s LIMIT 1',\n                $new_blog_option_table . '_user_roles',\n                $wpdb->base_prefix . $blog . '_user_roles'\n            ) );\n            if ( false === $blog_id_query ) {\n\n                return 'user_roles update failure';\n            }\n        }\n    }\n}\n\n/**\n * 3. Update wp_options table\n */\n$update_option_query = $wpdb->query( $wpdb->prepare(\n    sprintf( 'UPDATE `%soptions`', $new_prefix ) . 'SET option_name = %s WHERE option_name = %s LIMIT 1',\n    $new_prefix . 'user_roles',\n    $wpdb->base_prefix . 'user_roles'\n) );\nif ( false === $update_option_query ) {\n\n    return 'wp_options update failure';\n}\n\n/**\n * 4. Update wp_usermeta table\n */\n$usermeta_results = $wpdb->get_results( $wpdb->prepare(\n    sprintf(  'SELECT * FROM `%susermeta`', $new_prefix ) . ' WHERE meta_key LIKE %s',\n    $wpdb->base_prefix . '%'\n) );\nforeach ( $usermeta_results as $meta ) {\n    // Meta name without prefix\n    $meta_basename = substr( $meta->meta_key, strlen( $wpdb->base_prefix ) );\n\n    $meta_update_query = $wpdb->query( $wpdb->prepare(\n        sprintf( 'UPDATE `%susermeta`', $new_prefix ) . ' SET meta_key = %s WHERE meta_key = %s LIMIT 1',\n        $new_prefix . $meta_basename,\n        $meta->meta_key\n    ) );\n    if ( false === $meta_update_query ) {\n        //$type = 'error';\n\n        return 'wp_usermeta update failure';\n    }\n}\n\nprint 'Change $table_prefix in wp-config.php to ' . $new_prefix . PHP_EOL;\n/*\n$wp_config_regex = '/(\\$table_prefix\\s*=\\s*)([\\'\"]).+?\\\\2(\\s*;)/';\n$config = preg_replace( $wp_config_regex, \"\\${1}'$new_prefix'\\${3}\", $config );\n*/\n\nreturn false;\n\n}\n```\nBased on better-wp-security plugin.\n. Thanks.\nCould you use tripple-backtick+php?. @korobochkin You could even send a PR :)\nhttps://github.com/szepeviktor/wordpress-plugin-construction/blob/master/wordpress-db-change-prefix.php. (travis) Sorry for the spaces.\n. Is it OK if I convert spaces to tabs?\n. How to get $table_prefix from wp-config? And DBNAME?\n. I think without adding --prefix we are back at the shell scripting:\nbash\nPREFIX=$(wp eval 'global $wpdb; echo $wpdb->prefix;')\nwp db query \"SHOW TABLES LIKE '${PREFIX}%'\"\nwp db export ....\nand so on...\n. Are you think about completing table names?\nself::run_query( 'USE ' . DB_NAME . '; SHOW TABLES LIKE \\'' . $table . '\\';' );\nmysqldump does not accept wildcards\n. Is it\nwp db export --table=wp_% or wp db export --table=a_table,b_table,wp_% ?\n. Is there a way to catch run_query's output?\n. Could you help me on this? https://github.com/szepeviktor/wp-cli-database-prefix-command\nIf I go WP_CLI::add_command( 'db', then I do not get $wpdb\nI would go WP_CLI::add_option but there is no such command.\nWhen extending the DB_Command class I cannot get private functions get_file_name, run\nSo this mostly a copy of db.php.\n...\nAfter adding a list subcommand I go WP_CLI::add_command( 'db-prefix',. It would be nice to extend an existing command.\n. Can it get into the package list on wp-cli.org?\n. Before this line\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/db.php#L155\nvar_dump($escaped_command); var_dump($assoc_args); exit;\n. @ivomarino If you need help pls skype me: szepe.viktor\n15 minutes free!\n. Honestly I do not understand So if I conclude that when a file is deleted it will be put back in.\nI meant if the WP core team removes a file from the next version of WP\nWill it get deleted in my installation?\n. Thank you.\n. How to test it??\n. Is \\Requests::get() OK? I don't speak OOP.\n. It must be. I saw a \\Mustache_Engine()\n. It feels very good to contribute under your supervision.\n. I've messed up everything. Deleted cli-version branch then recreated.\nIs It OK now?\n. Travis is generating now a lot of green dots, so it seems OK.\n. > > How to test it??\n\nI'm not sure we can without some hacking. I'll give it some thought.\n\nphp\n<?php\nheader( 'Content-Type: application/json; charset=utf-8' );\necho '[\n  {\n    \"tag_name\": \"v<VERSION_TO_TEST>\"\n  }\n]';\n// or include('some-file.txt');\nAnd start the PHP built-in webserver\n``` bash\necho '127.0.0.1 api.github.com' >> /etc/hosts\napt-get -y install stunnel4\nmake-ssl-cert generate-default-snakeoil --force-overwrite\ncat /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem > /etc/stunnel/stunnel.pem\nphp -S 127.0.0.1:8443 script.php &\nSERVER_PID=$!\nphp has no SSL\nstunnel3 -d 127.0.0.1:443 -r 8443 -p /etc/stunnel/stunnel.pem\nwp cli check-update --major\nmaybe kill -9 $SERVER_PID; killall -9 stunnel4 ## not stunnel3 !\n```\n. It works!\n```\nbin/wp cli check-update\nWarning: cURL error 60: SSL certificate problem: self signed certificate\n0.27.1\n. There is no test for the above SSL cert problem.\n. Please specify your wishes.\nPhar URL: `WP_CLI::line( $release_data[0]->assets[0]->browser_download_url );`\n. Please proceed with this PR. I'd like to run a cron job to notify me.\n. Here it is modified to work correctly:\nhttps://github.com/szepeviktor/wp-cli-check-update\n. Do you mean displaying it as a table?\n. Do we have here (wp-cli releases) major and minor versions?\nYou linked the core update formatting.\nI think wp-cli update should go for the latest version only.\n. In the current PR `--major` is for hiding minor releases, not for listing multiple versions.\nDoes it make sense to upgrade from wp-cli 0.9.1 to 0.9.2 when 0.16.0 is available?\n. _Typing it in_ right now...\n. browser_download_url (the phar) is OK?\n. Please correct it if it fails.\nTest is missing. How to simulate GutHub API? /etc/hosts + `php -S` + stunnel ? Maybe we were talking about it in an issue. It turns out to be [THIS](https://github.com/wp-cli/wp-cli/pull/1306#issuecomment-50653893) issue.\n. Here it is above:\nhttps://github.com/wp-cli/wp-cli/pull/1306#issuecomment-50653893\n. It is ready.\nPlease help me to get rid of those two foreign files. Somehow they got into a commit of mine.\n. I am very sorry. I should learn git.\nThis is the clean PR: https://github.com/wp-cli/wp-cli/pull/1386\n. https://github.com/wp-cli/wp-cli/pull/1322\n. php\nprivate static function _request( $method, $url, $headers = array(), $options = array() ) {\n```\nWhat is $method for?\n. That point is not yet here. ::get is hardcoded.\n. Is it clear to merge?\n. It is what you were thinking?\n. Are there a phar/not phar unit tests?\n. Then this feature couldn't be tested.\nwp-cli will always run without phar.\n. Green.\n. tax_input must be an array. It is not possible now to pass an array on the command line.\n--tax_input='{\"taxonomy\":\"aTag\"}' is not valid.\n. Maybe try to JSON decode all options? maybe_json_decode()\n. Do you mean writing PHP code for example to check DB connection on wp core config?\n. Spot a line:\nhttps://gist.github.com/danielbachhuber/9dd99001ce3364123e55#file-gistfile1-txt-L2925\nAllow phar in suhosin:\nhttps://github.com/wp-cli/wp-cli/issues/1181\n. Do you have \"url\" in ~/.wp-cli/config.yml?\nThis is my sample local (per site) wp-cli.yml\nyaml\nurl: http://www.site.hu/\ndebug: true\nuser: viktor\ncore update:\n  locale: hu_HU\n. Setting url in a per site wp-cli.yml may solve this.\n. And please upgrade wp-cli to 0.16.0\nYou may try this update command.\n. Do you use iThemes Security or another plugin that randomizes core version?\nwp-cli.yml\nyaml\nskip-plugins: better-wp-security\n. Bash snippet to hide ads in itsec\nhttps://github.com/szepeviktor/wplib/blob/master/share/wplib/wp-libwp.sh#L172-L199\nMore security on a VPS with fail2ban (a mu-plugin)\nhttps://github.com/szepeviktor/wordpress-plugin-construction/tree/master/wordpress-fail2ban/mu-plugin\nStrict login security even without fail2ban (possibly a large wp-config snippet or require())\nhttps://github.com/szepeviktor/wordpress-plugin-construction/tree/master/mu-wordpress-block-bad-requests\nSecure Contact Form 7 without captcha\nhttps://github.com/szepeviktor/wordpress-plugin-construction/tree/master/contact-form-7-robot-trap\nUse audited plugins, contact authors.\n. Close the issue please.\n. OK. I've deleted the last line right away.\n. ``` html\n\n    Error establishing a database connection\n\n\n    This either means that the username and password information in your wp-config.php file is incorrect or we can't contact the database server at localhost. This could mean your host's database server is down.\n\n\nAre you sure you have the correct username and password?\n    \nAre you sure that you have typed the correct hostname?\n    \nAre you sure that the database server is running?\n    \n\n\n    If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the WordPress Support Forums.\n\n\n\nRunning as single site... To run multisite, use -c tests/phpunit/multisite.xml\n\n\n    Warning: mysql_connect(): [2002] No such file or directory (trying to connect via unix:///tmp/mysql.sock) in /private/tmp/wordpress/wp-includes/wp-db.php on line 1138\n\n\n    Warning: mysql_connect(): No such file or directory in /private/tmp/wordpress/wp-includes/wp-db.php on line 1138\n\n\n    wp_die called\n    Message :\n\n\n    Error establishing a database connection\n\n\n    This either means that the username and password information in your wp-config.php file is incorrect or we can't contact the database server at localhost. This could mean your host's database server is down.\n\n\nAre you sure you have the correct username and password?\n    \nAre you sure that you have typed the correct hostname?\n    \nAre you sure that the database server is running?\n    \n\n\n    If you're unsure what these terms mean you should probably contact your host. If you still need help you can always visit the WordPress Support Forums.\n\n\n    Title :\n\n\n    Warning: Cannot modify header information - headers already sent by (output started at /private/tmp/wordpress-tests-lib/includes/bootstrap.php:53) in /private/tmp/wordpress/wp-includes/pluggable.php on line 876\n\n``\n. Could you access your DB from the command linemysql -u root`?\n. I think in that case the SQL connection changes from UDS (UNIX domain socket) to TCP.\nSolution on OSX\nUse 127.0.0.1 instead of localhost.\nfor googlers\n. Here is the fail2ban mu-plugin's source.\n. I understand what you are saying.\nerrorlog-404 is an mu-plugin but it could be a normal plugin also. A normal plugin could be fiddled (disabled, deleted etc.) and loads later.\nI recommend security plugins to load early. E.g. wp-login-bad-request.inc.php should be required from wp-config because it will save your server in a D/DoS. wp-config is the earliest editable PHP file in WP.\nWP displays some header in Dashboard / Plugins / Must-Use, even the version number.\nIf wp-cli would display the mu versions then I could write a tiny shell script to update mu-plugins. But without seeing the versions it is very difficult to trigger an update.\n. I suggest - if WP displays the version - wp-cli should also.\n\n. off: To ease your eyes: http://wordpress.org/plugins/wp-solarized/\n. > From my perspective, it's not common to have a plugin file with a plugin header directly in the mu-plugins directory \u2014 but it is common to have a loader file which requires a plugin located in a subdirectory of mu-plugins.\nConsider copying the plugin headers to your loaders, then you could see what is loaded.\n. This is the PR at plugin.php:123\nphp\n'version' => $mu_plugin['Version'],\n. And it works:\nbash\nwp plugin list --fields=name,version --status=must-use | tail -n +2\n. Could you include these two lines?\nWith a comment: \"Online version checking and actual updates are not available for mu-plugins.\"\n. Please consider my one-line PR above.\nActually it is: 'version' =>  isset( $mu_plugin['Version'] ) ? $mu_plugin['Version'] : ''\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/plugin.php#L126\n. E.g. for wp-cli debugging I'd like to see the results of all YAML configs and the command line options.\nFor example what is the --url value?\n. It must be very easy ( < 10 lines ) to implement.\n. If you know where&what.\n. You take the issue searching I take the 10 lines.\n. Here it is: https://github.com/wp-cli/wp-cli/pull/1363\n. This one for the next release?\n. This looks like a webserver's output.\nInstalling the php5-cli packages may help.\n(wp-cli is a CLI tool)\np.s. I'd like to run it remotely.\n. Is it possible to run without including WP? (I can't find the related issue)\n. Related https://github.com/wp-cli/wp-cli/issues/520, https://github.com/wp-cli/wp-cli/issues/515\n. @XedinUnknown Have you seen this?. Simply as YAML, as any other wp-cli.yml content.. The config file's format is YAML.\nWP-CLI parses it to a PHP array.. A simple class_exists() may solve the problem in Spyc.php\nYou are free to make a PR.\n. lespoilus/spyc seems to be abandoned. Maybe https://packagist.org/packages/mustangostang/spyc\n. Should --path option's value be search by extract_subdir_path?\nOr should I give the real path in --path?\n. Given a subdir install, if I say --path=the_dir_above then extract_subdir_path() is executed in the current directory (thus not looking into the modified index.php) but not on --path.\nThat is why I've asked\nOr should I give the real path (the subdir) in `--path`?\n. Thank you.\n. Excuse me for generating a lot if issues.\n. I think 0.17.0 should be released as a final wp-cli for WP 3.x\n. I believe 99% of wp-cli managed WordPress installs are up to date.\nWP 4.0 features should be included.\n(I can't imagine using wp-cli and avoiding core updates)\n. Am I creating a mess??\n. OK for 0.18.0?\n. Should there be a --with-values option?\n. When I am debugging wp-cli I finish faster.\nHow would you get current values without var_dumping??\n. @danielbachhuber Could you finish this? I don't have time. Sorry.\n. Here it is: https://github.com/szepeviktor/wp-cli/commit/97a0d042ecd7fc7afc2951e452e3c9bdb8b94467\n. I've just noticed the cli command has very few tests.\n. @danielbachhuber Please merge.\n. Sorry for the mess. Still learning git...\n. Should I go the new way?\nphp\nif ( \\WP_CLI\\Utils\\get_flag_value( $assoc_args, 'with-values' ) ) {\n. Done.\n. For humans: http://www.unserialize.com/s/58dc51cc-a64b-5c89-cb3e-00001fedad22\n. Is the value $output->offers[0]->current;?\n. Here it is https://github.com/wp-cli/wp-cli/pull/1365\n. It is ready.\n. Doing this also...\n. Problem: WP.org announces only one version: http://api.wordpress.org/core/version-check/1.7/\n. How do we get old ZIP URLs?\nAnswer: $this->get_download_offer( $locale )\n. At least displays version & package_url.\n. Struggling: not in numerical order!\n+---------+-------+-------------------------------------------+\n| version | type  | package_url                               |\n+---------+-------+-------------------------------------------+\n| 3.8.1   | minor | https://wordpress.org/wordpress-3.8.1.zip |\n| 3.9     | major | https://wordpress.org/wordpress-3.9.zip   |\n| 3.8.4   | minor | https://wordpress.org/wordpress-3.8.4.zip |\n| 3.9.2   | major | https://wordpress.org/wordpress-3.9.2.zip |\n| 4.0     | major | https://wordpress.org/wordpress-4.0.zip   |\n+---------+-------+-------------------------------------------+\n. #### Tests\nHow to hack WP core version?\nI can't override a hardcoded value.\n. Something like this?\n``` feature\n  Scenario: Update from a ZIP file\n    Given a WP install\nWhen I run `wp core download --version=3.8 --force`\nThen STDOUT should not be empty\n\nWhen I run `wp core check-update --major`\nThen STDOUT should not be empty\n\n```\n. Like this I think\n| language  | english_name     | status        |\n      | ar        | Arabic           | uninstalled   |\nAnd how to check the table's content?\n:) How can I check-update without check-update?\n. Maybe it is more efficient to leave it to you.\n. How about major/minor/patch in case of the core?\n. Where are you on IRC? server/user\n. This is 22:43 here.\nGood bye!\n. Try logging slow SQL queries where sapi===cli.\n. https://github.com/wp-cli/php-cli-tools/issues/61\n. Could those be WP classes?\n. In addition to the release build ?\n. > > How to test it??\n\nI'm not sure we can without some hacking. I'll give it some thought.\n\nphp\n<?php\nheader( 'Content-Type: application/json; charset=utf-8' );\necho '[\n  {\n    \"tag_name\": \"v<VERSION_TO_TEST>\"\n  }\n]';\n// or include('some-file.txt');\nAnd start the PHP built-in webserver\n``` bash\necho '127.0.0.1 api.github.com' >> /etc/hosts\napt-get -y install stunnel4\nmake-ssl-cert generate-default-snakeoil --force-overwrite\ncat /etc/ssl/private/ssl-cert-snakeoil.key /etc/ssl/certs/ssl-cert-snakeoil.pem > /etc/stunnel/stunnel.pem\nphp -S 127.0.0.1:8443 script.php &\nSERVER_PID=$!\nphp has no SSL\nstunnel3 -d 127.0.0.1:443 -r 8443 -p /etc/stunnel/stunnel.pem\nwp cli check-update --major\nmaybe kill -9 $SERVER_PID; killall -9 stunnel4 ## not stunnel3 !\n``\n. Ready. Added another function to skip earlier minors.\n. Yes. Please do that yourself! I am doingcore check-updateAnd I don't know how to determine--format's value.\n. Is it about WP.org translations?\nIs there a way to install translation for a plugin??\n. There could be a common function to query WP.org JSON APIs and handle errors. There are 4 occurrences ofUtils\\http_request.\n. https://travis-ci.org/wp-cli/wp-cli/jobs/40247747\nHow come that WP Importer is not installed?\nCould a plugin install silently fail???\nhttps://github.com/wp-cli/wp-cli/blob/master/features/export.feature#L57\n. I think besidestatus_code` the response should be validated.\nphp\njson_decode( $response->body );\nif ( JSON_ERROR_NONE === json_last_error() ) ...\n. Then you have the WP function maybe_unserialize.\n. By leaving out maybe_unserialize you trust WP.org.\n. What will trigger wp-cli 1.0? A ruby version?\n. Excuse me.\n. https://github.com/wp-cli/wp-cli/pull/1403\n. > One of the websites might be hacked.\n@danielbachhuber This is very interesting. What if a site is hacked and I use wp --allow-root?\n. @rodrigoprimo https://github.com/wp-cli/wp-cli/issues/1240#issuecomment-55805799\n. Solution here:\nhttps://github.com/wp-cli/wp-cli/pull/1399/files\n. It was confusing what I wrote. Excuse me.\nThis is still the same problem for posts:\n@danielbachhuber https://github.com/wp-cli/wp-cli/blob/master/php/commands/post.php#L280\n. Maybe there are other 'ids' problems in other commands.\nThey should be tested.\n. The solution is merged: https://github.com/wp-cli/wp-cli/pull/1406\nPlease try the latest dev version.\n. @rodrigoprimo Please close this issue.\n. @rodrigoprimo Could you share the output of these?\nbash\necho _$(wp post list --post_type='page' --format=ids)_\nwp post list --post_type='page' --format=ids | hexdump -C\nfor POST in $(wp --allow-root post list --post_type='page' --format=ids); do echo \"_${POST}_\"; done\nsh --version\n. This test fails without #1399.\n. 'good-first-issue' means This is Viktor's first issue, and it's good ?\nhttps://github.com/wp-cli/wp-cli/wiki/Github-Issue-Labels\n. Why???\nhttps://themes.svn.wordpress.org/p2/1.4.2/\n. For me it is\nInstalling P2 (1.4.2)\nDownloading install package from https://wordpress.org/themes/download/p2.1.4.2.zip...\nUnpacking the package...\nInstalling the theme...\nTheme installed successfully.\nWP.org could be down at that time.\n. Please merge it.\n. Also here:\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/post.php#L280\nand maybe in other commands.\ngrep -ir \"fields.*'ids'\" *\n. Excuse me.\n. Not:\nwp db query 'SELECT id FROM wp_posts WHERE post_content LIKE \"%trans.gif%\";'\n. Anyone?\n. I'd like to have post-related function in the same command: post.\nThe same for listing or searching options. wp option list and wp option search \"bgp_%\"\n. There is drush vget which lists all Drupal variables.\n. And does it search in <img/>'s href?\n. Oh! Thank you.\n. Where does this command need some adjustments?\nhttps://github.com/szepeviktor/wp-cli-option-list-command\n. Could it get into wp-cli?\nRelease: https://github.com/szepeviktor/wp-cli-option-list-command\nIt is very easy to implement a new subcommand!\n. Here it is: https://github.com/wp-cli/wp-cli/pull/1424\n. What specific command are you executing with WP_CLI::run_command()?\n. E.g /php/WP_CLI/Formatter.php uses echo to write output.\nYou can also search for STDOUT in the code.\n. The one way I know of is standard shell redirection. wp do something 2>&1 | grep \"string\"\n. Related: https://github.com/wp-cli/wp-cli/pull/920\n. This PR needs some test.\n. Also ther could be an option for transients (exclud/include).\nI am ill now. @danielbachhuber Could you finish this?\n. I've copied esc_utl from s&r. Should it be in utils-wp.php?\n. Could it get into 0.18.0?\n. > Formatter will handle that for you\nFormatter does NOT handle empty results: wp option list --search=\"none\"\n+-------------+--------------+\n| option_name | option_value |\n+-------------+--------------+\n+-------------+--------------+\nWhat should I do?\nSame for wp post list --post_type=pageX\nI couldn't find code in Formatter.php that prevents displaying of an empty array.\n. > Want to wrap the tests up so we can get this shipped?\nDo you mean writing more tests? I am not a native english speaker.\n. Or do you refer Let's add some tests for normal wp option list output too.?\nDo you mean filtering it in a few ways? Maybe it would be easier to specify your wish.\n. OK?\n. Could it be merged now?\n. I've put a TAB in should contain strings.\n@danielbachhuber  It is OK for you?\n. @tyedco There must be a WP function in wp-config.\n. @tyedco You should use a mu-plugin to force a plugin activation.\n. The synopsis is in the Jetpack plugin:\nhttps://github.com/wp-plugins/jetpack/blob/master/class.jetpack-cli.php\nThe support is here: https://wordpress.org/support/plugin/jetpack\n. It is very easy to correct this problem.\nhttps://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook#synopsis\n. Do you mean it is a problem in wp-cli??\n. I was wrong, it is not easy.\nSynopsis parser cannot handle even [<sub_subcommand> [<module_name>]] (optional-in-optional).\nNor this [list|activate]\n@danielbachhuber Could you reopen it and tag is as a confirmed bug or feature request. I haven't seen this complex synopsis in wp-cli.\n. Jetpack uses sub-subcommands.\n. I think Jetpack CLI will get more structure by this modification.\n. ```\n$ wp post meta list 14 --keys=rnr_subtitle\n+---------+--------------+----------------------------------------------------+\n| post_id | meta_key     | meta_value                                         |\n+---------+--------------+----------------------------------------------------+\n| 14      | rnr_subtitle | C\u00e9g\u00fcnk t\u00f6bb, mint 15 \u00e9ve van jelen a magyarorsz\u00e1gi |\n$ wp search-replace --dry-run \"C\u00e9g\u00fcnk t\u00f6bb\" \"C\u00e9g\u00fcnk t\u00f6bb\" | grep wp_postmeta\nwp_postmeta     meta_key        0       SQL\nwp_postmeta     meta_value      0       PHP\n```\n. I am very sorry. Providing the same replace string is not a good idea.\n$ wp search-replace --dry-run \"C\u00e9g\u00fcnk t\u00f6bb\" \"X\u00e9g\u00fcnk t\u00f6bb\" | grep wp_postmeta\nwp_postmeta     meta_key        0       SQL\nwp_postmeta     meta_value      1       PHP\n. You can very quickly set up php HTTP server and do everything in php.\n. How could requests initiate basic HTTP authentication?\n``` php\n<?php\n// Start the Development Server: php -S 0.0.0.0:80 -t /path/to/docroot this-router.php\n// This PHP file must be in document root.\n// Test with\n// wget --auth-no-challenge --http-user=user --http-password=password -S http://localhost/a/plugin.zip\n// actually wget does not understang non-ascii filenames in filename* attribute\n// Set username and password:\n$http_user = 'user';\n$http_pass = 'password';\nerror_log( 'Serving: ' . $_SERVER['REQUEST_URI'] . ' to: ' . $_SERVER['REMOTE_ADDR'] );\n$plugin_zip = dirname( FILE ) . urldecode( parse_url( $_SERVER['REQUEST_URI'], PHP_URL_PATH ) );\n//DGB error_log('up:'.$_SERVER['PHP_AUTH_USER'] . $_SERVER['PHP_AUTH_PW']);\nif ( isset( $_SERVER['PHP_AUTH_USER'] )\n    && isset( $_SERVER['PHP_AUTH_PW'] )\n    && $http_user === $_SERVER['PHP_AUTH_USER']\n    && $http_pass === $_SERVER['PHP_AUTH_PW']\n) {\n    header( \"HTTP/1.0 200 OK\" );\n    header( \"Content-Type: application/zip\" );\n    header( \"Content-Disposition: attachment; filename*=UTF-8''\"\n        . rawurlencode( basename( $plugin_zip ) ) );\n    header( \"Content-Length: \" . filesize( $plugin_zip ) );\n    header( \"Cache-Control: must-revalidate\" );\n    readfile ( $plugin_zip );\n    exit;\n}\n// allow only authenticated request;\nheader( 'HTTP/1.0 403 Forbidden' );\nexit;\n``\n. @chrisschaub If you need a hand to debug it for free: skype: szepe.viktor\n. This is shared hosting and FTP knows nomove dircommand.\nOn a server it would bemv site/* ./. Thank you. \nMy real problem are  the image urls. Those shouln't change.\n. Is there a way to change only virtual urls?\n. @shawnhooperdbcommands execute without WordPress core, excepttables`.\nSee in Runner\n. This is just a rough example: https://gist.github.com/667914761ebdd3892e35\nPlease try to follow wp-cli reusage:\nbash\nwp db export --tables=$(wp db-multisite tables 1-3,5)\nA real db community command for you:\nhttps://github.com/szepeviktor/wp-cli-database-prefix-command/blob/master/wp-cli-database-prefix-command.php\n. You could go wp network db tables ...\n. Oh! Could you look up the php command by which -a php, then ls -l <PHP'S PATH>\nMaybe it is not cli but cgi.\nDefault cgi location is /usr/lib/cgi-bin/php5, cli's location is /usr/bin/php5 (at least on Debain)\nTry /usr/bin/php5 wp-cli.phar --info!\n. On Debain\n``` bash\nwhich -a php\n/usr/bin/php\nls -l /usr/bin/ph\nlrwxrwxrwx 1 root root 21 Oct 29 22:51 /usr/bin/php -> /etc/alternatives/php\nls -l /etc/alternatives/php\nlrwxrwxrwx 1 root root 13 Oct 29 22:51 /etc/alternatives/php -> /usr/bin/php5\nand this is a real executable (9 MB)\nls -l /usr/bin/php5\n-rwxr-xr-x 1 root root 8952816 Oct 22 20:06 /usr/bin/php5\n```\n. ### Rochen Benefits\nOptimal configuration of PHP in CGI mode with su_php\n. The current (0.17.0) phar file's MD5 sum is\n309395fb826308759aff4084b5cbc49c\nPlease check yours! md5sum wp-cli.phar\n. Please paste this into test.php\n``` php\n!/usr/bin/env php\n<?php\nprint 'This is php file test.' . PHP_EOL;\n```\nMake it executable: chmod +x test.php\nAnd start it in these two ways:\nbash\n/usr/bin/php-cli test.php\n./test.php\nWhat is your output?\n. I do not understand how that could start wp-cli. AFAIK wp-cli contains no BOM or invalid UTF-8.\nBut there may a lot of invalid UTF-8-s in the phar that is a ZIP.\nhttp://php.net/manual/en/ini.core.php#ini.zend.detect-unicode\n. CHECK TABLE in sql.\n. btw. the example in wp db tables appends an extra comma:\nwp db tables --url=sub.example.com | tr '\\n' ','\nprezi_users,prezi_usermeta,prezi_posts,prezi_comments,prezi_links,prezi_options,prezi_postmeta,prezi_terms,prezi_term_taxonomy,prezi_term_relationships,prezi_commentmeta,\n. It works:\nwp db tables | paste -s -d\",\"\n. https://github.com/wp-cli/wp-cli/pull/1472\n. paste is in the coreutils package, so I think it is a core command in other Unices too.\n. I've already used this today! But it looks longer in my case because of sudo:\nwp-lib.sh --root=$PWD dowp db query \"CHECK TABLE $(wp-lib.sh --root=$PWD dowp db tables|paste -s -d\",\");\"\n. wp term list-taxonomies\nwp user list-taxonomies\n. php\n<?php\necho html_entity_decode(\"Installing What&#039;s running (1.8)\");\nproduces Installing What&#039;s running (1.8)\nIt might be a  missing entity in PHP 5.5\n. No!\nphp\necho html_entity_decode( \"Installing What&#039;s running (1.8)\", ENT_QUOTES );\nInstalling What's running (1.8)\n. We should both read http://php.net/manual/en/function.html-entity-decode.php\n. Now there are 78 commits. When do you plan 0.18?\n. The test would be duplicating this one\nhttps://github.com/wp-cli/wp-cli/blob/master/features/plugin.feature#L237-L244\nwith whats-running. Should I add it?\n. Use case: wp plugin is-installed will work.\n. Do you mean is-installed will return double true? Or another subcommand of plugin?\n. mu-plugins should be suffixed by -mu. Or prefixed.\n. There is a workaround for that already:\nhttps://github.com/szepeviktor/wordpress-plugin-construction/blob/master/mu-protect-plugins/protect-plugins.php\nDo you see any way to detect is-installed for mu-plugins?\n. Do you mean add_filter( 'pre_option_active_plugins' ... ?\n. Silent plungin install failure?? https://github.com/wp-cli/wp-cli/pull/1389#issuecomment-62126430\n. Precharge plugin/theme cache before tests?\nhttps://github.com/wp-cli/wp-cli/blob/master/features/plugin.feature#L240\nhttps://github.com/wp-cli/wp-cli/blob/master/features/theme.feature#L6\n(And check for errors.)\n. Do maybe_unserialize() on the response body!\n. Store WP files locally + /etc/hosts + php -S\nBTW I think Importer plugin install silently fails.\n. I would gladly provide a HTTP proxy server. Only for the Travis IP range or based on a knock.\n. And I would set 1 day expiration time.\n. You can set up a lightweight HTTP proxy before the tests on Travis also.\n. Would it be OK that I regularly test WP API-s, plugin and theme repo from Travis and publish the results?\n. I think you answered the previous comment.\nThis one is about testing WP infrastucture and report errors publicly.\n. Then what does this mean?\n\nWe could build and maintain a cache ourselves, if we had some way of also testing that WordPress.org connections were working.\n. Is it that?\nwp comment delete $(wp comment list --status=trash --format=ids)\n. @danielbachhuber Should they be wp transient get name --site or wp transient get-site name?\n. Beacuse we use a WP core class, should I get update URL-s from update_plugins and update_themes?\n. @sebastiaandegeus Go for it and get the update URLs!\n. ...but first get the answer for https://github.com/wp-cli/wp-cli/issues/1503#issuecomment-74387195 from @danielbachhuber\n. @sebastiaandegeus It seems like a copy&paste job.\n. Have you checked the salts in wp-config?\n. 1. wp plugin list --field=update_package\n2. WP_CLI::get_http_cache_manager()->whitelist_package( $api->download_link, $this->item_type, $api->slug, $api->version );\n\nOK?\n. wp plugin list --field=update_package\nPHP Notice:  Undefined property: stdClass::$update_package in phar:///usr/local/bin/wp/php/WP_CLI/Formatter.php on line 159 for mu-plugins!\n. We only need to get someone who writes the PR.\n. I use that code in Adminer autologin. I would also go the non-eval() way.\n. Or it is tagged milestone:next?\n. Thank you!\nI was desperately looking for the mu version numbers.\n. Solution:\nhttps://github.com/wp-cli/wp-cli/issues/1283#issuecomment-49613109\nThis is recurring question.\nhttps://github.com/szepeviktor/debian-server-tools/blob/master/debian-setup.sh#L342-L348\nSee syslog for suhosin ALERT! (But maybe it could silently skip .phar execution.)\n. Yes. It turns OFF suhosin. Add:\nini\nsuhosin.executor.include.whitelist=phar\nDo not worry, only turns off for CLI providing you have separate php.ini-s. Suhosin should not be loaded for CLI.\n. This is almost my uwp script!!\nhttps://github.com/wp-cli/wp-cli/wiki/Shell-Tips#start-wp-cli-with-abspath-in-the-current-dir-and-under-the-current-dirs-owner\n``` bash\n!/bin/bash\n\nExecute wp-cli as the current directory's owner.\n\nVERSION       :0.1\nDATE          :2014-12-19\nAUTHOR        :Viktor Sz\u00e9pe viktor@szepe.net\nLICENSE       :The MIT License (MIT)\nURL           :https://github.com/szepeviktor/debian-server-tools\nBASH-VERSION  :4.2+\nLOCATION      :/usr/local/sbin/uwp\nTHIS_OWNER=\"$(stat . -c %U)\"\nsudo -u \"$THIS_OWNER\" --  wp --path=\"$(pwd)\" \"$@\"\n```\nIt works only in ABSPATH.\n. On Debian based systems you have separate php.ini for CLI and other SAPI-s.\n. This is my very-short and solid install/update script:\nbash\nWPCLI_URL=\"https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\"\nwget -O /usr/local/bin/wp \"$WPCLI_URL\" && chmod +x /usr/local/bin/wp\nWPCLI_COMPLETION_URL=\"https://github.com/wp-cli/wp-cli/raw/master/utils/wp-completion.bash\"\nwget -O- \"$WPCLI_COMPLETION_URL\"|sed 's/wp cli completions/wp --allow-root cli completions/' > /etc/bash_completion.d/wp-cli\nhttps://github.com/szepeviktor/debian-server-tools/blob/master/debian-setup.sh#L342-L348\nMaybe you shouldn't update at the time of a new release. Wait for the bugs!\n. Could it be a namespace problem?\nFatal error: Call to undefined function cli**mb_detect_encoding()\n. Cause: missing error message.\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/media.php#L56\n. Cause: poor error checking, missing error message.\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/CommandWithMeta.php#L85-L86\n. Is the meaning of die(1) documented somewhere?\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/CommandWithMeta.php#L89-L90\n. There was a typo:\nIS** the meaning of die(1) documented somewhere?\nMy PHP knowledge goes beyond die() :smile: \nSo I meant: It should be documented: Return exit code 1 upon empty meta data.\n. > That's not quite right. The idea was to use exit code 1 when trying to get a custom field that didn't exist. However, WP doesn't seem to have a reliable API for checking that; null is equal to false or empty.\nIs there a difference in output between empty value and non-existent custom field?\n. Now I also understand your problem.\n. Bug: rd is only for directories, hello.php is a file.\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/plugin.php#L650\n. You are free to submit a PR with test:\nhttps://github.com/wp-cli/wp-cli/edit/master/php/commands/plugin.php#L650\nlike https://github.com/szepeviktor/wp-cli/commit/247c9b341ae7c8136628baeb8eff8d73b60b32a0, now all you need to do is the test.\n. Very nice feature.\n. These are typos in ~~wp-cli~~ like $regexp   = '/Nonexistant/'; note the a.\n. Oh! Sorry.\nI've realized.\n. OK! Done.\n. Please add tests. https://github.com/wp-cli/wp-cli/issues/1545#issuecomment-65897008\n. @lordspace The Travis failure is a known one.\n. Maybe here ?\n. On a multisite installation, you need to pass a --url parameter, so that WP-CLI knows which site it\u2019s supposed to be operating on...\n. You are using const DOMAIN_CURRENT_SITE not define().\n. Please consider replacing your const-s with define-s.\nhttp://codex.wordpress.org/Editing_wp-config.php\n. wp-config.php seems to me like (I don't remember the english word for programming by functions, the opposite of classical)\nhttp://php.net/manual/en/language.oop5.constants.php\n. I don't like many parts of PHP's syntax neither.\n. @sebastiaandegeus Thanks. They are not the same.\n. Very handy fix.\n. Thank you! i've searched and not found.\n. Oh no! I mean list taxonomies only:\nwp taxonomy list\n. Sorry. I got it now.\nwp term list-taxonomies\n. Is there anyone taking care of it?\n. Try error_log()-ging here: https://github.com/wp-cli/wp-cli/blob/f4dac3bef26c57285ba898f8424ceb36ae80cf14/php/utils.php#L438\n. Isn't mkdir WP_CLI_REQUESTS_CACHE_DIR missing?\n. Yes.\nSorry.\n. You could also error_log() into Travis log? \n. I am happy that you've found it out.\n. I was putting this in http_request():\nphp\nerror_log('HTTP/'.serialize($request->status_code));\nerror_log('Response:'.serialize($request->headers));\nBut behat silenced stderr.\n. What could have changed?\nphp\nhash_hmac( 'sha256', 'requests_' . $url . serialize( $headers ) . serialize( $data ) . serialize( $options ), '' )\n. A community command, and then - myabe - a merge.\n. It effects me right now.\nCloning DB .....\n. I think @codecowboy has some cli-unaware logic in wp-config.php.\n. Does this if prevent this behaviour?\n. Try moving add_filter () to a MU plugin. It can be used after WP core is loaded.\n. A class_exists() in CommandFactory.php:20 ?\n. @danielbachhuber Could you help where <type> comes from in upgradables.feature?\n. It is OK earlier?\nhttps://github.com/szepeviktor/wp-cli/compare/wp-cli:master...missing_cmd?diff=unified&name=missing_cmd\n. How come that Travis has a theme called Mercury?\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/50095863#L237\n. I thought it is binary. p2 !== mercury\n. https://github.com/wp-cli/wp-cli/pull/1645\n. 1) You can write a new command for table inclusion.\n2) wp-cli's s&r is from Search Replace DB\nlooks like this\n+1 It is very easy to write a new db command all you need is copy&paste.\nplease close the issue\n. I've imported your JSON value: wp option set xx < /tmp/json There are four of yosilose.ojiva.es and after your wp-cli command four yosilose.local-s.\nDon't be misled by the cloumn name Replacements.\n| wp_options       | option_value          | 1            | PHP  |\nThat 1 means: one variable.\nplease use the latest wp-cli and close the issue\n. I like your website.\n. First set\nphp\n[Phar]\n;phar.readonly = On\nphar.readonly = Off\nin /etc/php5/cli/php.ini.\nAfter composer install run utils/make-phar.php ./wp.phar.\nplease close the issue\n. Glad to help.\n. Learned git rebase -i HEAD~3 :smile: \n. WP_CLI::add_command( 'import', new Import_Command ); in import.php is out of my understanding. PHPDoc says @param string $class The command implementation.\nNor the command cookbook mentions it.\n. The class Import_Command has no constructor. What does new do?\n. 1. Should I change import.php and check $class using is_string()\n2. Or something else I do not see yet?\n. All green.\n. Special case!\nIs it OK?\n``` feature\nFeature: WP-CLI Commands\nScenario: Invalid class is specified for a command\n    Given an empty directory\n    And a custom-cmd.php file:\n      \"\"\"\n      <?php\n  WP_CLI::add_command( 'command example', 'Non_Existent_Class' );\n  \"\"\"\n\nWhen I run `wp --require=custom-cmd.php help`\nThen STDOUT should contain:\n  \"\"\"\n  Error: Class 'Non_Existent_Class' does not exist.\n  \"\"\"\n\n```\n. Could you finish it? My behat test failed here\n`` behat\nWhen I runwp --require=custom-cmd.php help`    # features/steps/when.php:18\n  $ wp --require=custom-cmd.php help\nError: Class 'Non_Existent_Class' does not exist.\n  cwd: /tmp/wp-cli-test-run-54de89a8752648.04528450/\n  exit status: 1\n``\n. Thanks.\nDone.\n. Travis: Just the _usual_. Consider it to be all green.\n. On fake proxy it says:Error: couldn't connect to host, notError: Failed to connect to 127.0.0.1.\n. Haven't read. Sorry.\n. How small it is.\nDo you plan to add a test?\n. What is$basefor? Seems like it is lost withoutglobal $base;`.\n. @qm78 Try \nphp\ndefine( 'SUNRISE', true );\n*edited\n. SUNRISE could have any value. I suggest using true.\n. on seems very much like a real value!\n. We are happy to help.\n. You mean -- \u2192 \u2013?\n. How to make it like in the above comment?\n. I wasn't thiniking about bandwidth but PHP parsing.\n. ...as there is no opcache on CLI.\n. 0.3.0 was 72 kB, now 1.28 MB\n. No.\n\nwget -qO- https://api.github.com/repos/wp-cli/wp-cli/releases|grep -B8 '\"browser_download_url\":.*phar\"'|grep size\n. :smile:  That was wp-cli-0.15.1.phar but I sorted them by value. Sorry.\nLook here: https://api.github.com/repos/wp-cli/wp-cli/releases\n. @danielbachhuber \nhttps://www.openhub.net/p/wp-cli/analyses/latest/languages_summary\n. You have to start wp-cli in the WordPress root folder or give it the path option: wp --path=<path>.\nwp-cli expects wp-config.php end like this. See in php/WP_CLI/Runner.php.\n. Try using --debug also.\n. Do you run wp-cli in the directory where wp-config.php and wp-settings.php resides?\nDo you use sudo -i?\n. Maybe sudo -i changes the current directory.\nsudo attempts to change to that user's home directory before running the shell.\n. I always put wp-cli.yml above the WP root. BTW I use public_html/server, and server is the WP Root and DocumentRoot.\nyaml\nurl: http://www.domain.hu/\ndebug: true\nuser: viktor\ncore update:\n    locale: hu_HU\nskip-plugins:\n    - better-wp-security\n. This is my tool for this problem:\n``` bash\n!/bin/bash\n\nExecute wp-cli as the current directory's owner.\n\nVERSION       :0.1\nDATE          :2014-12-19\nAUTHOR        :Viktor Sz\u00e9pe viktor@szepe.net\nLICENSE       :The MIT License (MIT)\nURL           :https://github.com/szepeviktor/debian-server-tools\nBASH-VERSION  :4.2+\nLOCATION      :/usr/local/sbin/suwp\nTHIS_OWNER=\"$(stat . -c %U)\"\nsudo -u \"$THIS_OWNER\" --  wp --path=\"$PWD\" \"$@\"\n```\nhttps://github.com/szepeviktor/debian-server-tools/tree/master/tools\nYou can also add -i but I do not know why.\n. And the search feature.\n. @danielbachhuber Please help me out with a decision:\nHow should s&r/get_table_list and db/tables be merged?\nAnd maybe extended with search.\n. @danielbachhuber Please remember that this is db export and #1801 is s&r.\nSee https://github.com/wp-cli/wp-cli/pull/1663#issuecomment-98520608\n. This is why I was asking you:\nHow should s&r/get_table_list and db/tables be merged?\n. https://travis-ci.org/wp-cli/wp-cli/jobs/51113195#L198\n. It looks like 4.1.1 has just came out.\n. @danielbachhuber could you add 4.1.1?\nhttps://github.com/wp-cli/wp-cli/blob/master/features/core.feature#L296-L302\n. https://github.com/wp-cli/wp-cli/pull/1666\n. This PR is OK. Only features/core.feature generated a failure.\n. @mwithheld I was in your shoe too.\nhttps://help.github.com/articles/configuring-a-remote-for-a-fork/\nhttps://help.github.com/articles/syncing-a-fork/\n. It is not on WP-org. See: http://www.gravityforms.com/\nIt should have hooked WP update and inserted its data into the update list.\nwp-cli uses its own update method. I think it was not hooked by gravityforms.\n@danielbachhuber Could wp-cli plugin update be hooked?\n. I suspect GF implements it in a way that is far away from WP.\n. This config file seems to be OK.\n. @zzzerotime Please consider removing comments for your own sake.\n. It is in the comments: https://api.wordpress.org/secret-key/1.1/salt/\n. No. Secret keys should be removed beacuse you've just made them public (above).\n. Please share more details like wp --info.\n. Do you have PHP-suhosin https://github.com/wp-cli/wp-cli/issues/1181 ?\n. Try disabling plugins.\nWhat output do you get?\nwp core version\nexit $?\n. Then it works!!\n. Try running wp-cli from source and modify line 23 from eval to echo.\n. https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods#installing-via-composer\n. I suspect this echod wp-config is different from above.\n. I mean the echod one must be different from the one above in your comment.\nBecause that code above in your comment parses OK and executes.\nI hope your removed the secret keys only from the comment above not from your wp-config.\n. > PHP Parse error: syntax error, unexpected '?'\nCould you copy here the output of head -n3 wp-config.php | hexdump -C?\n. Oh BOM! ef bb bf\n. Please set your Windows editor to use Linux lineends.\nFor every project....\nRemove BOM by changing encoding in your editor. Try: http://xhmikosr.github.io/notepad2-mod/\n. And please close this issue.\n. That /less seems strange beacuse of the root dir: /.\nCould you share what your less is really is? ls -la /usr/bin/less\n. https://github.com/wp-cli/wp-cli/pull/1363 would come handy.\n. @codecowboy See: https://github.com/wp-cli/wp-cli/issues/1659\n'-' is really an &ndash;.\n. Yes. There is no recurse-objects = false test.\n. wp-includes/vars.php should not be included. Read the comment in #1546.\nTry searching for the inclusion of vars.php in your themes, plugins.\n. @milesblackwood  It's not fair to advertise my plugins here but What's running may come handy when you are searching for such an inclusion.\nTry cleaning up the HTML on the console or use html2text.\n. Do you mean to check file_exists( $is_file_remote . ':' . DIRECTORY_SEPARATOR )?\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/media.php#L125\n. :smile: Yes.\n. Do you use suhosin PHP extension?\n. > Could not open input file: wp-cli.phar\n...seems strange. Are you sure php is php CLI and not CGI?\nTry where php in Windows.\n. It defaults to now:\n[<next-run>]\n    A Unix timestamp or an English textual datetime description compatible with strtotime().\nDefaults to now.\nWindows may not like single quotes '. Try wp cron event schedule my_hook \"+6 hours\".\n. Have you listed them? wp cron event list What is your output?\n. It is sure now that Windows does not pass the datetime description. Or does not remove the quotes.\n. I was wrong, it does:\n```\nC:\\a\\wamp\\bin\\php\\php5.5.12>php a.php 'apple'\narray(2) {\n  [0] =>\n  string(5) \"a.php\"\n  [1] =>\n  string(7) \"'apple'\"\n}\nC:\\a\\wamp\\bin\\php\\php5.5.12>php a.php \"apple\"\narray(2) {\n  [0] =>\n  string(5) \"a.php\"\n  [1] =>\n  string(5) \"apple\"\n}\n```\nThis is my a.php\nphp\n<?php\nvar_dump($argv);\n?>\n. php\n<?php\nprint strtotime('now') . \"\\n\";\nprint strtotime($argv[1]) . \"\\n\";\nprints\n1427416575\n1427438175\nI do not use Windows for WP. Sorry.\n. Oh no! It is a bug:\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/cron.php#L100\nThat !.\n. @danielbachhuber \"Blame\" shows https://github.com/wp-cli/wp-cli/commit/537c60a96e03b6c47489cc330f772955064aad09 \nThere is no test for this.\n. Nice one.\n. wp-cli sets $_SERVER['DOCUMENT_ROOT'] to ABSPATH.\nSee: https://github.com/wp-cli/wp-cli/search?utf8=%E2%9C%93&q=DOCUMENT_ROOT\n. :smile: php-cli-tools is not upstream. We will fix it.\n. SQL %% -> % could be after strlen().\n. We have a bigger problem. post_title = '%10' fools php-cli-tools.\n. @danielbachhuber In wp-cli's Formatter\\show_table I've added a protection:\nphp\narray_walk_recursive( $data , function ( &$item, $key ) {\n  $item = str_replace( '%', '%%%%', $item );\n} );\nand modified Stream\\render\nphp\n$args[0] = preg_replace('/[^%](%([^%\\w]|$))/', \"%$1\", $args[0]);\nand cli\\safe_str_pad\nphp\n// Protected % signs\n$cleaned_string = str_replace( '%%%%', '%', $cleaned_string );\nIs it too complicated? Now It prints one percent sign per %, and pads accordingly.\n. Background: colorize and sprintf converts %% to %.\n. > we need to escape all values before we pass them to Formatter\nFormatter is called from almost all commands. Do you mean to add an escaping function to these calls?\n. But in php-cli-tools colorize and sprintf converts %% to %, so %%%% wil get shortened to just %.\n. Do you mean % \u2192 %%%% by escaping?\n. Try using absolute path instead realpath($_SERVER['DOCUMENT_ROOT'].\nSee: https://github.com/wp-cli/wp-cli/search?utf8=%E2%9C%93&q=DOCUMENT_ROOT\n. Please close the issue. And use ``\n. In shell it is usuallywp option update -- foo --bar.--turns everything into data preventing interpretation as an option.\n. But wp-cli does not have this data protection (--) feature.\nThe GNUgrep` command behaves the similar way:\n``` bash\n$ grep '--only-matching apply' o.php\ngrep: unrecognized option '--only-matching apply'\nUsage: grep [OPTION]... PATTERN [FILE]...\nTry 'grep --help' for more information.\n$ grep --only-matching apply o.php\napply\n$ grep 'only-matching apply' o.php ; echo $?\n1\n```\n. Use single quotes. \n. You're a moving target. That is:\n'String '\"'\"' !?'\n. If you use shell you should be familiar with quoting Unless you like bad surprises.\nPls close the issue.\n. Oh!! I am very sorry about that.\n. Please excuse me.\n. A unixy solution would be -- as in https://github.com/wp-cli/wp-cli/issues/1745#issuecomment-89670774.\nRelated to https://github.com/wp-cli/wp-cli/issues/1817#issuecomment-98699128.\nAnd http://php.net/manual/en/function.getopt.php#114587.\n. Related https://github.com/wp-cli/wp-cli/pull/1751\n. You may set WP_CLI_CACHE_DIR. Please consider the number of Windows and OSX users.\nBut yes, on linux we could change $home/.wp-cli/cache to $home/.cache/wp-cli. I use XGD paths in my shell scripts. XDG means X Desktop Group.\n. Nice finding.\n. Please share wp --info 2>&1|hexdump -C.\n. So these are real question marks.\nTry cloning the repository, install composer and run composer install in the repo. Then start wp-cli as /path/to/repo/bin/wp --info.\nhttps://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#setting-up\n. @frenkel This is a complete wp-cli v0.21.0-alpha for you.\nhttp://ovh.to/Yc9q1ZG\n. ...or it is phar-related.\n. Here you are http://ovh.to/XAyeV3\n. > You may optionally wish to enable the zlib and bzip2 extensions to take advantage of compressed phar support.\n...but I think wp-cli's phar is not compressed.\n. and:\n\nPHP 5.3 configured with --enable-zend-multibyte makes phar dependant on the ini option detect_unicode. \n. Do you have phar extension on 5.3? php -m\n. Here http://php.net/manual/en/phar.requirements.php\nTry php -d detect_unicode=Off and php -d detect_unicode=On in bin/wp.\n\nhttp://php.net/manual/en/ini.core.php#ini.zend.detect-unicode\n. Sorry, I am out of new ideas.\nI'd try StackOverflow.\n. http://stackoverflow.com/questions/15216292/not-able-to-run-composer-phar\nhttps://bugs.php.net/bug.php?id=42396\n. Just fired up PHP 5.3.3-7+squeeze27 on Digital Ocean and sad :cry: news, no output...\n. BUT!\n$ php -d suhosin.executor.include.whitelist=phar ./wp-cli-0.20.1.phar -- --info works OK.\nsuhosin.executor.include.whitelist = phar should be added to php.ini.\n. Could you try to execute test.php:\n<?php\necho \"OK\\n\";\n__halt_compiler();\n. And how about suhosin.executor.include.whitelist?\n. The phar extension must have a problem.\n\n+36204242498\nEzen a k\u00e9sz\u00fcl\u00e9ken neh\u00e9z g\u00e9pelni. \nEln\u00e9z\u00e9st!\nOn October 8, 2015 4:36:07 PM CEST, Frank Groeneveld notifications@github.com wrote:\n\nSame problem unfortunately.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/issues/1758#issuecomment-146565235\n. Try using --require and hook into WP's shutdown action.\n\nphp\nadd_action( 'shutdown', 'liquibase_database_versioning' );\n. Maybe checking get_template_directory() === get_stylesheet_directory()?\nOr wp_get_theme( $stylesheet, $theme_root ); / 'Template'?\n. This way it is possible to add a site subcommand:\n``` patch\n--- o.php   2015-04-20 06:38:40.902687350 +0200\n+++ wp_cli_site_duplicate_subcommand.php    2015-04-20 06:37:56.171249700 +0200\n@@ -1,18 +1,13 @@\n <?php\n-require_once WP_CLI_ROOT . '/php/commands/site.php';\n/*\n  * Implements duplication command.\n  /\n-\n-class Site_Duplicate_Subcommand extends Site_Command  {\n+class Site_Duplicate_Subcommand extends WP_CLI_Command  {\n /**\n  * Duplicate a site in a multisite install.\n  *\n\n\n\n\n@alias clone\n\n\n*\n\nOPTIONS\n  *\n--slug=\n@@ -30,27 +25,29 @@\n--network_id=\n: Network to associate new site with. Defaults to current network (typically 1).\n  *\n\n\n\n\n--private\n\n\n\n\n[--private]\n: If set, the new site will be non-public (not indexed)\n  *\n\n\n\n\n--porcelain\n\n\n\n\n[--porcelain]\n: If set, only the site id will be output on success.\n  *\n\n\n\n\n--v\n\n\n\n\n[--v]\n: If set, print more details about the new site (Verbose mode). Do not work if --procelain is set.\n  *\n\n\n\n\n--do_not_copy_files\n\n\n\n\n[--do_not_copy_files]\n: If set, files of the duplicated site will not be copied.\n  *\n\n\n\n\n--keep_users\n\n\n\n\n[--keep_users]\n: If set, the new site will have the same users as the duplicated site.\n  *\n\n\n\n\n--log=\n\n\n\n\n[--log=]\n: If set, a log will be written in this directory (please check this directory is writable).\n  *\n\n\n\n\n@alias clone\n\n\n*\n@synopsis --slug= --source= [--title=] [--email=] [--network_id=] [--private] [--porcelain] [--v] [--do_not_copy_files] [--keep_users] [--log=]\n  */\n\n\npublic function duplicate( $_, $assoc_args ) {\npublic function __invoke( $_, $assoc_args ) {\n         if ( !is_multisite() ) {\n             WP_CLI::error( 'This is not a multisite install.' );\n         }\n@@ -190,4 +187,4 @@\n\n}\n-WP_CLI::add_command( 'site', 'Site_Duplicate_Subcommand' );\n\\ No newline at end of file\n+WP_CLI::add_command( 'site duplicate', 'Site_Duplicate_Subcommand' );\n``\n. @pierre-dargham Please watch your code styling.\nRenamewp_cli_site_duplicate_subcommand.phptowp-cli-site-duplicate-subcommand.phpCheck for your class:class_exists( 'MUCD_Functions' )Your sanitization may fail e.g. onsit\u00e9~slug.\nPlease consider adding tests.\n. Here you find the reason:\nhttps://github.com/pierre-dargham/multisite-clone-duplicator/blob/wp-cli/wp-cli/wp-cli-site-duplicate-subcommand.php#L7\nI think wp-cli does not load WP onhelp, thus your class is not available.\nMaybe better check it here https://github.com/pierre-dargham/multisite-clone-duplicator/blob/wp-cli/wp-cli/wp-cli-site-duplicate-subcommand.php#L67\n. Could you add it [here](https://github.com/wp-cli/wp-cli/blob/115a0292066bbceb04979390027b03f1e17e53f0/php/class-wp-cli.php#L258) also?\n. Have you notices that$exitis not used inerror()`?\n. > Nope. If the command exits in any way, there's no way we can capture that action. You should be using a wrapper script.\nWhy is it impossible to add after_invoke in error()?\n. BTW I have a complex wrapper: https://github.com/szepeviktor/wplib\n. Gone in December: https://github.com/wp-cli/wp-cli/commit/6fd93c2fdd9813280b56e8e81a15fb17f06d1f75#diff-ebfa725722979f3a5e288bb8f86269a3L255\n. I think noone calls it. Could it be deprecated?\ngrep -iro \"WP_CLI::error.*,.*;\" *\n. @yudaprama Adding --recurse-objects could be a solution.\nAs of now Polylang is the best plugin for you. Please consider learning how to use it.\n. You can use uwp (like sudo without \"S(uper)\") if your user is in the sudo group.\n. AFAIK putting wp-cli into /usr/bin will pollute that directory, it is only for binaries from packages.\nMaybe /usr/local/bin.\n. Are referring to a memory leak in wp-cli?\n. There are different SAPI-s. One for your webserver and one for PHP CLI. They should have separate config files.\n. Try it with --skip=image_size. Then run wp media regenerate.\nhttp://wp-cli.org/commands/import/\n. PHP CLI should have a separate config file.\n. What is your which php output?\n. That is OK, that is PHP-CLI.\n. Very-very similar to https://github.com/wp-cli/wp-cli/pull/1663\n. Up to 0.19.0 it was possible to grep for \"define.*WP_CLI_VERSION.*;\".\nNow the very end of the phar contains the version string without any fixed string beside it.\n. This method is not stable: tail -n 1 wp-cli.phar | grep -ao \"^[0-9.]\\+\"\n. Do you mean to download the current VERSION file?\nWe are dealing with a phar, there are no files locally.\nCould you merge it?\n. [scope:documentation]\n. Thank you.\nps auxx will display that for a moment.\n. From the docs:\n\nDetermine if the WordPress tables are installed.\n\nPlease be aware that this is database related.\n. You can detect - for example - wp-blog-header.php\nbash\nif [ -f \"./wp-blog-header.php\" ]; then\n. Try this:\nbash\nwp --path=\"$(pwd)\" core is-installed\n. Yes. You don't have to care about cd ABSPATH when using/developing WordPress.\n. wp-cli can even dive into a subdir if it finds the subdir in index.php.\n``` php\nrequire( dirname( FILE ) . '/subdir/wp-blog-header.php' );\n``\n. I always use url, user, debug and skip-plugins in the [config YAML](http://wp-cli.org/config/), but _not_ path beause that is auto-detected.\n. Do you have YAML files?wp --info. This is a _very_ easy way to clone a site:wp search-replace --precise --recurse-objects --all-tables-with-prefix  These items should be replaced:\n1.http://domain.tld(no trailing slash)\n2./var/www/path/to/site(no trailing slash)\n3.email@address.es4.domain.tld(yes, once again without protocol)\n5. Constants in wp-config.php manually\n. And a solution that has a UI: https://github.com/interconnectit/Search-Replace-DB\n. Try installing wp-cli [by composer](https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods)\nand var_dump() [around here](https://github.com/wp-cli/wp-cli/blob/master/php/commands/user.php#L284-L300).\n. Try dumping$userbefore wp_insert_user().\n. @danielbachhuber Could we reopen it asneeds-documentation`?\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/post.php#L328\n. > We're not going to include an example for every argument that WP_Query supports.\nOK. I would add only one example that shows the --post_name <--> --name difference.\n. I also add --allow-root to the completion file. It is dangerous!\nhttps://github.com/wp-cli/wp-cli/blob/master/utils/wp-completion.bash\nAlways run wp-cli as a normal user. http://github.com/szepeviktor/debian-server-tools/blob/master/tools/uwp\n. I know I may WP_Query() by eval-file.\nmeta-query.php\n``` php\n$args = array(\n        'post_type'    => 'attachment',\n        'post_status'  => 'inherit',\n        'meta_key'     => 'optimized',\n        'meta_compare' => 'NOT EXISTS',\n        'fields'       => 'ids',\n        'posts_per_page' => -1,\n);\n$query = new WP_Query( $args );\necho implode( ' ', $query->posts );\n```\n. The answer to the question is\nbash\nwp post list --format=ids --post_type=attachment --post_status=inherit \\\n    --meta_key=optimized '--meta_compare=NOT EXISTS'\n. When you use __ in an option which should be an array: =elem1,elem2,elem3.\n. Thank you.\n. Try to install wp-cli as a PHAR archive.\nhttp://wp-cli.org/#install\n. :smile: Rewrite those commands in PHP.\ndirname looks like this:\n``` php\n!/usr/bin/env php\n<?php echo dirname( $argv[1] );\n```\nthen chmod +x dirname\nAnd extend PATH...\n. Thanks.\nIt is a brand new server with PHP 7.\n. I think DocParser does not work in PHP 7. wp --allow-root help core download\nhttp://php.net/manual/en/reflectionclass.getdoccomment.php\n```\nNAME\nwp core download\nDESCRIPTION\nSYNOPSIS\nwp core download\nGLOBAL PARAMETERS\n--path=\n      Path to the WordPress files\n--url=\n      Pretend request came from given URL. In multisite, this argument is how the target\n  site is specified.\n```\n. But\n```\nphp -r 'var_Export(class_exists(\"Reflection\"));'\ntrue\n```\n. state:confirmed\n. WP runs on PHP 7\n. I think the number of them is close to 1.\n. @danielbachhuber \nResults\n\nphp -r 'var_dump(substr( \"--flag\", strlen( \"--flag\" ) ));' 5.6: bool(false), 7.0: string(0) \"\"\n\nCurrent manual says:\n\nReturns the extracted part of string; or FALSE on failure, or an empty string. \n\nCould it be a bug?? https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/SynopsisParser.php#L62\n- STDOUT/STDERR cause silent failure, ~~php://stderr works.~~\nVery strange, this works with $handle = STDOUT in function _line\nphp\ninclude 'Regular.php';\n$a=new WP_CLI\\Loggers\\Regular(false);\n$a->success('msg');\nstrace says that file descriptor 1 is closed just before it is written to:\nclose(1)                                = 0\nmunmap(0x6c56a0383000, 4096)            = 0\ngetcwd(\"/root/wp-cli\", 4096)            = 13\nwrite(1, \".\", 1)                        = -1 EBADF (Bad file descriptor)\nThis also works:\n``` php\ndefine ('X_STDOUT', fopen('php://stdout', 'w'));\nprivate function line( $message, $label, $color, $handle = X_STDOUT ) {\n``\n.Scenario: Ability to set a custom version when buildingfails on PHP 5.6 too. Is it a bug?PHP Fatal error:  require(): Failed opening required './vendor/autoload.php' in utils/make-phar.php on line 3cwd` is /tmp/wp-cli-test-run-558a0cad917f32.82006223\n. All other things are _green providing E_DEPRECATED is muted in WP core.\n. > Have you come across any relevant bug reports upstream?\nNo.\nhttps://bugs.php.net/search.php?limit=30&order_by=id&direction=DESC&cmd=display&status=Open&bug_type=All&phpver=7.0\n\nI suspect this means that Composer failed in some way.\n\nAlso on PHP 5.6?\n. @danielbachhuber I think the only wp-cli error is\nPHP Warning:  fwrite(): supplied resource is not a valid stream resource in phar:///tmp/wp-cli-phar/wp/php/WP_CLI/Loggers/Regular.php on line 24\n. Could you fix it?\n. The PHP7 ticket: https://core.trac.wordpress.org/ticket/31982\n. Are you planning to add this one to the next release?\n. PHP 7.1.0-dev (cli) (built: Sep 18 2015 19:10:01) is out.\n@danielbachhuber Could you run CI again? I hope they update their nightly.\n... maybe without if ( ! defined( 'STDOUT' ) ) {\nLet's see the output!\n. Which of these solved our comment parsing problem???\nhttps://bugs.php.net/search.php?limit=30&order_by=id&direction=DESC&cmd=display&status=Closed&bug_type=All&phpver=7.0\n. --path does not do that, and there is no --config.\n. Because I haven't read the end of the fourth list item.\n. Should it go into utils-wp.php?\n. Is wp_version_min_410() OK?\n. Even core does not seem to have semver:\nhttps://github.com/WordPress/WordPress/blob/ca542b5d18778f273d18b590fe9fc2cd97ccb28d/wp-includes/version.php#L7\n. wp-cli is much like a command line tool. I think the user experience does not show that it is actually written in PHP. Please try to google for shell piping and stdin stdout to get familiar with the shell.\n. Please close this issue.\n. Tip: execute wp help post generate to get an example.\nLook under EXAMPLES!\n. Do you mean wp-cli's return code is 0 or it does not list administrators?\nwp user list --role=administrator\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 1  | viktor     | v            | viktor@szepe.net | 2014-07-21 18:59:33 | administrator |\n+----+------------+--------------+------------------+---------------------+---------------+\n. Try wp user list and see the roles column!\n. You may have a setup failure. Please share the output (STDOUT) of wp cli info.\n. Maybe the plugin/code that manages non-core roles.\nTry https://wordpress.org/plugins/user-role-editor/\n. wp-cli provides many ways to migrate to user-role-editor.\nPlease test it before you move on.\n. Please close this issue.\n. @danielbachhuber Could it be that the language cache does not get regenerated?\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/64625995#L225\n. But that does not make update column appear.\n. I hope it gets green.\n. @danielbachhuber This error is beyond my understanding.\n. @danielbachhuber Please fix it. It might take 2 minutes for you.\n. Thank you.\n. BTW We have $ wpcs/vendor/bin/phpcs --standard=WordPress-Core --report=summary php\n```\nA TOTAL OF 3693 ERRORS AND 73 WARNINGS WERE FOUND IN 74 FILES\nPHPCBF CAN FIX 3356 OF THESE SNIFF VIOLATIONS AUTOMATICALLY\n``\n. Basically most of 3693 could be corrected in 20 seconds:\nhttps://github.com/szepeviktor/wp-cli/commit/2b14d14b8a900307fac12c94a2cd707db27d1346\n. Yes:continue; }`.\n. Solved!\n. Maybe adding a PHP version test will fix Travis.\n. > sh: 1: [[: not found\nMaybe test was OK because Travis' shell may be dash not bash.\n. Try writing adding tests to roles.feature\n- first user has no role, then clone\n- first user has 1 role\n- first user has several roles\nAfter that, check for the new user and its roles.\n. It's like simple English.\nI usually copy from other tests and modify a bit. Needs no coding.\n. Could any of my stuff get into the next release?\n. https://github.com/wp-cli/wp-cli/issues/1842\nhttps://github.com/wp-cli/wp-cli/issues/1286\nhttps://github.com/wp-cli/wp-cli/pull/1856\n. ``` feature\nFeature: Testing community commands\n@danielbachhuber\n  Scenario: I write a community command\n    Given there is an error in it\n    And I do not notice it\nWhen I try `vendor/behat/behat/bin/behat`\nThen my command should be required and it's .feature file should also be tested\nAnd STDERR should be empty\n\n``\n. No! This just a funny way of writing my answer.\nI'd like to--requiremy community command during behat testing and include my.featurefile in behat testing.\n. No. Sorry.\n. Consider not puttingwp-config.phpunder VCS control.wp-config.php` could live above ABSPATH.\n. Remove all plugins:\nbash\nwp plugin delete $(wp plugin list --field=name)\n. Does your user have permission to write to /var/www/clients/projectname?\n. If your WP directory's permissions are OK (check with ls -ld /path/to/WPROOT) then install my script:\nhttps://github.com/szepeviktor/debian-server-tools/blob/master/tools/uwp\nby chmod +x uwp; mv uwp /usr/local/sbin/uwp. It will launch wp-cli as the current directory's owner.\nbash\nuwp core version\n. If you have the correct user and group: do chown -c -R USER:GROUP /path/to/WPROOT to reset the ownership on all files.\n. Try mkdir -v -p wp-content/upgrade and see mkdir's message.\n. Try wp --debug plugin list.\n. Try adding a condition: if ( defined( 'WP_CLI' ) ).\n. There is another false alarm in the SO question:\n\nIn this case wp-cli uses the PHP-FPM (FastCGI Process Manager) as the SAPI.\n\nAll cli applications run on the CLI SAPI.\n. Does this problem exist in the output of wp plugin status?\n. Ah! So in a network environment inactive means it is not activated network-wide.\nAnd you would like to have a command like wp plugin list --active-anywhere.\n. @danielbachhuber What would be the logic of such a command?\nLoop through all sites??\n. [documentation]\n. ~~I think get_config() does not return an array.~~\nUntil then try\nyaml\napache_modules: mod_rewrite\n. Once I've got\nphp\narray(1) {\n  [0]=>\n  string(13) \"- mod_rewrite\"\n}\nfor the argument.\n. That was a missing space\nyaml\napache_modules:- mod_rewrite\nCould you install wp-cli from source and insert var_dump( WP_CLI::get_config( 'apache_modules' ) ); in public function flush() in php/commands/rewrite.php and share the output?\n. And wp --info also please.\n. > You can get the md5 by appending .md5 to any wordpress.org tar.gz link\nWhat a secret!\n. MD5 checking is a useful feature request.\n. Please try wp --path='' db export db.sql\n. BTW '' is an invalid path. The current directory is --path=.\n. Related: https://github.com/wp-cli/wp-cli/issues/1745\n. wp is a file. Try mkdir /usr/local/bin if you do NOT have that directory.\nrmdir /usr/local/bin/wp to correct this.\n. Please close this issue.\n. Excuse me.\nIt was for @warb2n.\n. Yes. It is wp core verify-checksums.\n. > ... the update pulled just incremental changes between 4.2.1 and 4.2.2 and did not pull the changes from 4.2 and all the other versions between 4.1.1 and 4.2.2.\nAFAIK wp-cli uses WP core's upgrader: https://github.com/wp-cli/wp-cli/blob/master/php/utils-wp.php#L65-L70\n. You can run wp core update; echo $? to see the exit status.\nFiles dates explain the situation. en_US-4.2.2.zip is created on 15 Jun.\n. It could be a partial download.\nbash\nwget -q -O- https://wordpress.org/wordpress-4.2.2.zip | wc -c\n6860180\n. Related: https://github.com/wp-cli/wp-cli/issues/1892\n. The zip in your cache is ~~broken~~ partial. Please purge your file cache and repeat the above.\nI hope it will turn out to be OK.\n. Oh! So partials and fulls have the same file name?\n. 2 sounds good and 1 sounds better.\n. I think MD5 verification should take place when we put something into the cache.\n. But: https://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L1035\n. Sorry. better-wp-security plugin is a version randomizer.\n. > i need to add the --path flag\nNowadays I put path in wp-cli.yml (which sits above docroot)\nyaml\npath: /srv/www/domain/htdocs\n. What is the output of wp eval 'var_export(wp_upload_dir());'?\n. > $_SERVER['DOCUMENT ROOT']\nIt is possible that the _ is missing?\n. This option may help:\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/rewrite.php#L25-L26\n. Adding --hard simply solves this.\n. See the Wiki: https://github.com/wp-cli/wp-cli/wiki/Shell-Tips\nIn a more PHP form:\nphp -r '$i=unserialize(file_get_contents(\"http://api.wordpress.org/plugins/info/1.0/akismet\")); echo $i->sections[\"changelog\"];'|elinks -force-html\n. The one remaining obstacle is a HTML2text converter class in place of elinks.\nGoogle result: https://github.com/mtibben/html2text\n. https://github.com/wp-cli/wp-cli/blob/master/php/commands/cli.php#L175\nDoes it fail by design?\n. The solution could be a get_flag_value( 'allow-admin' ).\n. Are you sure #1935 will solve this issue?\n. I think running wpcli update without --allow-root causes this error. https://github.com/wp-cli/wp-cli/blob/master/php/commands/cli.php#L175\n. Oh! #1932 solves this.\n. wp_cache_post_change() is defined in wp-super-cache/wp-cache-phase2.php.\nIs wp-super-cache plugin active?\n. It is a bug.\n. wp-cli lauches WP core by its php/wp-settings-cli.php so wp-settings.php does not get executed thus advanced-cache.php does not get included thus no wp_cache_postload() thus wp_cache_phase2() does not get called. And the undefined function is in wp-cache-phase2.php.\nI think wp-super-cache-cli is not maintained.\nI also get\nPHP Fatal error:  Call to undefined function wp_cache_post_change() in /var/www/subtwo/2/static/plugins/wp-super-cache-cli-master/cli.php on line 16\nFatal error: Call to undefined function wp_cache_post_change() in /var/www/subtwo/2/static/plugins/wp-super-cache-cli-master/cli.php on line 16\n. All green. Thank you!\n. You're right. I've never knew what happened to my apt-get completions.\n. The temporary solution is to restore $IFS\n``` bash\n_wp_complete() {\n    local OLD_IFS=\"$IFS\"\n# The current function content.\n\nIFS=\"$OLD_IFS\"\nreturn 0\n\n``\n. @danielbachhuber Do you know someone who can help us?\nOur completion function does not look like this:\nhttp://anonscm.debian.org/cgit/bash-completion/bash-completion.git/tree/completions/apt-get\n. That is called _a hack_.\nwpcli's completion script should look like\nhttp://anonscm.debian.org/cgit/bash-completion/bash-completion.git/tree/completions/apt-get\n. If you are willing I prepare a PR with the above \"code\".\n. PR https://github.com/wp-cli/wp-cli/pull/1926\n. Good evening!\nThe documentation says this about--extra-php`:\n\nIf set, the command copies additional PHP code into wp-config.php from STDIN.\n. So it simply copies the code to your wp-config.php once at config time.\nI think you are trying to set WP_ENV's value outside of wp-config.\n. PaaS providers (e.g. Heroku) use environment variables: getenv( 'WP_ENV' ); which can be defined in php.ini or in FPM's pool config.\n. As for wp-cli environment variables can be set in the user's bashrc or in a wrapper script or on the command line:\n\nbash\nWP_ENV=\"development\" wp core version\n. I was experiencing with foreign config values in the YAML file but those are not available in WP, only in wp-cli.\nwp econfig get WP_ENV\nhttps://github.com/szepeviktor/wordpress-plugin-construction/tree/master/wp-cli-commands/wp-cli-extra-config-command\n. Which is your case?\n1. A variable in wp-cli only\n2. In Apache only\n3. In both?\n. If your answer is 3 then I suggest you to set the environment variables in the vhost AND in a file called wpenv above ABSPATH\nwpenv\nexport WP_ENV=\"dev\"\nexport WP_VAR=\"value\"\nand use this wrapper\n``` bash\n!/bin/bash\nABSPATH=\"$(wp --allow-root eval \"echo dirname( ABSPATH );\")\"\nsource \"${ABSPATH}/wpenv\"\nwp \"$@\"\nIn case you wouldn't do everything as root: sudo -u $(stat \"$ABSPATH\" -c %U) -- wp --path=\"$ABSPATH\" \"$@\"\n```\nthen variables will be available for getenv() in your wp-config.\n. You could modify my wp-cli-extra-config-command to set environment variables.\n. > When you run wp core config\nIt is done only at config-time, not run-time.\nSo setting it in the config YAML after config has no effect.\n. If you specify the command core config: then wp-cli uses that value when the command is executed.\nActually wp-cli.yml is parsed on every run, so it's a fully run-time config file.\n. As for now there is no add-it-to-wp-config option in the config.\nHey! There is: require.\n\nLoad PHP file before running the command (may be used more than once) \n. core config: extra-php is an option to a command. require is a global option (for every command).\nPlease see here: http://wp-cli.org/config/\n. > You should use environment variables for this use case.\n\nLike the big guys at Heroku.\n. Yes, it does its job when you execute wp core config. See the above line: core config:.\nPlease do read the docs:\n\nBesides the global parameters described above, config files can also contain defaults for any subcommand.\n\nActually define( 'WP_DEBUG', true ); is only appended to wp-config.php file, not executed.\nUsing environment variables are the recommended solution for you.\n. Could you paste your wp-config without secret data?\n. I've just tried define( 'EMPTY_TRASH_DAYS', 1 ); and it was OK.\n. Try executing wp-cli from PHP\nphp\ndefine( 'WP_CLI_ROOT', '/path/to/wp-cli' );\ninclude WP_CLI_ROOT . '/php/wp-cli.php';\nas in https://github.com/wp-cli/wp-cli/blob/master/php/boot-phar.php\n. Then you may have to fiddle with $GLOBALS['argv'] to set commands and options.\nhttps://github.com/wp-cli/wp-cli/blob/ad54db39f461d5d00cbb8554178dc90d72fdce1f/php/WP_CLI/Runner.php#L517\n. I was also thinking about running wp-cli on shared hosting where there's no shell access.\n. @danielbachhuber Maybe there could be a boot-web.php to handle all these.\nphp\nWP_CLI\\Run( 'command subcommand', array( 'arg1', 'arg2' ) );\n. > $output = shell_exec('wp core download 2>&1');\nTry my snippet:\nhttps://github.com/szepeviktor/wordpress-plugin-construction/blob/master/shared-hosting-aid/wp-unzip-install.php\n. I was supposing this in https://github.com/wp-cli/wp-cli/issues/1924#issuecomment-121929530\n@danielbachhuber Using wp-cli programmatically should be more user-friendly (and hack-free).\n. Please consider that there's a composer package of wp-cli that indicates programmatical usage.\nWould it be hard work to provide one function to start up wp-cli?\n. > to interoperate with web applications\nMaybe with other CLI application? I think Aegir project is a CLI one.\n. Would there be a downside to provide a bootstrap function instead of fiddling with $GLOBALS['argv']?\n. Do you think there are too many (122) open tickets?\n. We have a couple issues for this problem.\nI've proposes PHP's getopt.\nhttps://github.com/wp-cli/wp-cli/issues/1745#issuecomment-110487641\n. This is a known issue: wp-cli cannot handle -- nor quotes.\n. Could you try with https://github.com/wp-cli/wp-cli/releases/download/v0.16.0/wp-cli.phar ?\n. curl may have not followed a redirection.\nbash\nwget -O /Users/mike/Path/wp3 https://github.com/wp-cli/wp-cli/releases/download/v0.16.0/wp-cli.phar\ncd BOILERPLATE\n/Applications/MAMP/bin/php/php5.5.26/bin/php /Users/mike/Path/wp3 term create vendortax \"Two Words\"\n. > In the past I've inserted plenty of terms with spaces using quotes and they all worked.\nWhich version were you referring? Older than 0.16.0?\n. Wait! It is OK for me. (Debian Linux)\nphp ../wp-cli.phar term create category \"new Two\"\n. Could it be that /Applications/MAMP/bin/php/php5.5.26/bin/php is not PHP-CLI??\nPlease share the output of\n/Applications/MAMP/bin/php/php5.5.26/bin/php -v\n. > PHP 5.5.26 (cli)\nIt is CLI for sure. Do you have access to any other computer/server?\n. Bash needs \"$@\" to expand all parameters.\n. Here it is http://www.gnu.org/software/bash/manual/bash.html#Special-Parameters\n\nExpands to the positional parameters, starting from one. When the expansion occurs within double quotes, each parameter expands to a separate word. That is, \"$@\" is equivalent to \"$1\" \"$2\" \u2026.\n. Thank you!\n. I thought @ is not your friend. \n. It is easy here on wp-cli because it always runs on one SAPI.\n. wp-cli is moving fast. You can take a look at the commit messages.\n. And here are the solved issues/PR-s for the next milestone:\nhttps://github.com/wp-cli/wp-cli/issues?q=milestone%3Anext+is%3Aclosed\n. It is a valid bug.\nIt looks like it'll be a breaking change but because the current usage is impossible it won't be really.\n\nAlso for --path.\n. Escuse me. After looking at the code:\nThere is no url field in the database. It is an output-only field made up of domain and path.\nSo you may only filter by those fields.\nI am sending a PR to clear up all these.\n. I suggest to have site_url and site_path to avoid mixing globals and command specific options.\n. Please take a look at https://github.com/wp-cli/wp-cli/pull/1940.\n. > I'm not keen the rename the fields, as it doesn't solve the larger problem.\nThen maybe rename the global --url?\n--request-url ??\n. wp site list --url=example.com/mysite1/ --fields=blog_id,url | grep \"^224\\b\" | cut -f 2\n224 is the site you're looking for.\n. I've missed this test:\nhttps://github.com/szepeviktor/wp-cli/blob/site-conflict/features/site.feature#L19-L23\nPlease help me to understand:\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/72492805#L200-L208\nIs it the new 4.2.3 core???\n. :frowning: \n. I see you have ! in your password.\nBash needs single quotes around '!'.\n. ! is the history expansion character:\nhttp://www.gnu.org/software/bash/manual/bash.html#Quoting\nType history, choose a command, remember its number and type:\n``` bash\n!476\n^ this is your chosen number\n```\nThis will repeat that command.\nBut this is no bash forum :smile: \n. Update core tests for WP 4.2.3\n4.2.3   major   https://wordpress.org/wordpress-4.2.3.zip\n    4.1.6   major   https://wordpress.org/wordpress-4.1.6.zip\n    4.0.6   major   https://wordpress.org/wordpress-4.0.6.zip\n    3.9.7   major   https://wordpress.org/wordpress-3.9.7.zip\n    3.8.9   minor   https://wordpress.org/wordpress-3.8.9.zip\n. Is there a way to write a script that generates this PR?\n. What is your actual command and error message?\n. Could you tell us whether wp-cli shows that an update is available?\n. Does wp-checkout have a build-in (proprietary, non-WP.org) update mechanism?\n. Thanks.\n. Duplicate: https://github.com/wp-cli/wp-cli/issues/1884\n. OK. I make up a criteria list and write a failure-tolerant bash script that does it.\nBTW. if [[ $VERSION == \"v*\" ]]; then doesn't do its job.\nIt is [[ \"$VERSION\" =~ ^v ]], providing you have a modern Bash.\n. It could have hooks: {$hook_name}_{$plugin_slug}.\n. Thank you for your effort.\n. Maybe I hack the maintenance PHP file in the root dir.\n. He must have a\n\ncustom import command\n\noverriding core.\n. In /usr/local/bin files should be owned by root with permissions: 644 and 755 for executables.\nSee: https://github.com/wp-cli/wp-cli/issues/1914\n. > sudo: wp: command not found\nThis shows that /usr/local/bin is not in root's PATH.\nPlease add it to root's PATH.\n. sudo warns you:\n\nWith great power comes great responsibility.\n\nSo if you install wp-cli to a system location then you should know how to upgrade it.\n/usr/local/bin/wp cli update\n. It is useful to follow standards: http://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/usr.html\n. > When you move the wp-cli phar file to /usr/local/bin/wp, root does not have access to this path.\nPlease reconsider your answer.\n. What OS are you running?\n. In Debian /etc/profile\nbash\nif [ \"`id -u`\" -eq 0 ]; then\n  PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nelse\n  PATH=\"/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games\"\nfi\nexport PATH\n. It is quiet sad that Redhat does not follow standards. As /usr/bin is a system dir the best I can tell you is\nln -s /usr/local/bin/wp /usr/bin/\n. Are you using wp-cli from your mu-plugin?\n. Excuse me for mentioning but an environment variable in not secure.\nThe only thing that can be titled secure is a file with permissions 600.\nOr prompt for password: https://github.com/wp-cli/wp-cli/issues/129\n. @jmazzi Try cat /proc/<pid>/environ\n. :+1: \n. @tvahey When googling for the error message: Homebrew undefined methoddesc'`\nYou'll find that the first result is https://github.com/Homebrew/homebrew/issues/41882\nPlease try brew update.\n. To escape the backtick:\nmd\n``Homebrew undefined method `desc'``\n. > How should this work if you could have a theme called 1\n:laughing: \nHave you seen a theme with a single digit name?\n(Although it is a valid use-case.)\n. @tw2113 \nwp theme list --field=name | sed -n '1p;4p' | xargs wp theme delete\nAnd: theme-del.sh 1 4\n``` bash\n!/bin/bash\nwhile [ -n \"$1\" ]; do\n    wp theme list --field=name | sed -n \"${1}p\" | xargs -r wp theme delete\n    shift\ndone\n```\n. :+1:  :+1: \nhttp://wordpress.org/wordpress-4.2.4-no-content.zip\nphp\nprivate function get_download_url( $version, $locale = 'en_US', $file_type = 'zip', $content = '' ) {\n// then call it with\n$content = \"-no-content\"\n. PHP sees a phar file as a mounted filesystem.\nI think your cache directory cannot be written. Try setting WP_CLI_CACHE_DIR\nbash\nexport WP_CLI_CACHE_DIR=\"/home/user/.cache/wp\"\nAs for sudo -u $(which wp-cli.phar) core update\n-u needs a user name and it is useful to provide -- also.\nI suggest you to install wp-cli in you local bin directory under the name wp.\nbash\nwget -O/usr/local/bin/wp https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar && chmod +x /usr/local/bin/wp\nFor switching user see my script:\n``` bash\nTHIS_OWNER=\"$(stat . -c %U)\"\nsudo -u \"$THIS_OWNER\" --  wp --path=\"$(pwd)\" \"$@\"\n``\n. Thank you.\n.register_activation_hook()` is buried in a class.\n``` php\nclass UniteBaseAdminClassRev extends UniteBaseClassRev{\n/\n\n * register the \"onActivate\" event\n /\nprotected function addEvent_onActivate($eventFunc = \"onActivate\"){\n        register_activation_hook( self::$mainFile, array(self::$t, $eventFunc) );\n}\n```\nThere are :cry: poor quality plugins out there.\n. As I do a lot of Bash:\nI suggest you to write a community command\nBash is not for database operations. Think about escaping!\n. > The above command does work if the user exists in the system, when the user is new to our multisite, however, it does work.\nIsn't a not missing?\n. > What's the best way to test if they exist on multisite, but not on a particular blog?\nwp --url=http://a.particular.blog user list --user_login=username tells you whether username exists.\n. I am sorry for missing --network.\n. wp-cli runs on the CLI SAPI that - by default - has no opcache and the phar file has to be unpacked. I think these are the main reasons of starting up in half a second.\nTry enabling opcache.\n. For example in my mini WP-based WAF I do SHORTINIT and then require one more WP core file to be able to use get_option(). You could write a very small PHP file to manipulate the DB in a very fast way.\n. Could you share its output?\nphp\n$output = shell_exec($cmd);\n. Try var_dump()-ing $this->get_wp_config_code() here\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L627\n. Fixed lintian warning in another PR.\n. Zero test per 4 hours??\n. https://travis-ci.org/wp-cli/wp-cli/jobs/81259624#L273\nAll 3 unit tests may have failed because:\nvar_dump( substr( \"--flag\", strlen( \"--flag\" ) ) );\nPHP 5.6: bool(false), 7.0: string(0) \"\" at https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/SynopsisParser.php#L62\nSee: https://github.com/wp-cli/wp-cli/issues/1842#issuecomment-114680220\n. Could you remove PHP 5.3 and 5.6 from .travis.yml and modify:\nphp\nif ( false === $value || \"\" === $value ) {\nOr it collides with wp command --flag=\"\"?\n. Yes, that is the solution.\nI would gladly give you an account on this temporary server if you have no PHP 7.\nGreen:\nOK (30 tests, 114 assertions)\n. Excuse me for the previous comment (deleted), the DotDeb release has very limited mysql support.\nPHP 7 from http://php7.zend.com/repo.php passes even (almost all) behat tests.\n:smile: \n. I hope stdin/stdout in PHP7 will be fixed and Travis will update PHP.\n. Drush empties the cache (just like my class does in #283)\n. I actually use apc.enable_cli in one of my cron jobs. (for ownCloud)\n/usr/bin/php -d \"apc.enabled\" -d \"apc.enable_cli\" /home/owncloud/website/html/cron.php\n. A hardcoded string! :cry: \n. I was thinking about @when before_wp_load also.\n. Is it possible to run before and after WP?\n. Thank you very much.\n. For googlers. To verify checksums without installation:\nwp core verify-checksums --version=4.3 --locale=en_US\n. @danielbachhuber \n```\n$ wp --allow-root --info\nPHP binary:     /usr/bin/php5\nPHP version:    5.6.13-0+deb8u1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:   /root/.wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version: 0.20.2\n$ wp --allow-root core verify-checksums --version=4.3 --locale=en_US\nError: wp-config.php not found.\nEither create one manually or use wp core config.\n```\nWhat am I doing wrong?\n. Could it be that this feature is not released?\n. What is the problem with #524?\n. You add eatmydata /usr/sbin/mysqld .... to the init script, or eatmydata /usr/bin/php ... to the test script and Linux kernel won't commit changes to the disk!\n. I've deployed a new Vultr VPS with Debian jessie and behat ran for 15m5.034s.\nAnd now inserting eatmydata into /etc/init.d/mysqld and bin/wp and before the behat start command...\n. Mounting /tmp in RAM would also help.\n. A small negative gain 15m47.232s :cry: \nThe second run finished in 15m2.798s.\n. Maybe industrial SSD-s are so fast and starting eatmydata takes a little bit of time.\n. FAILED\n. I've noticed it during #2093 \n. Something like\nbehat\nWhen I run `killall php`\n...maybe it will kill behat also?\n. ps a|grep 'php[0-9]\\? -S'|awk '{print $1}'|xargs -r kill\n- list processes\n- filter php -S\n- get PID\n- kill it\n. After some searching I think we should use a pidfile.\n. We could start php -S by a shell script that would output its PID echo $$ > pidfile and later use that to kill it.\n. It is actually $!\n. Are you sure children are killed before masters?\n. As children are killed by their master,  if you kill the master first then you'll won't find any children. \n. > $output = ps -o ppid,pid,command | grep ^$master_pid;\nMy ps emits a space at the beginning of the line\nAnd I suggest to terminate master PID: grep \"^\\s{$master_pid}\\b\"\n. $ ps -o ppid,pid,command|grep 8742\n 8742  8744 -bash\n 8744  8937 grep --color 8742\n. Oops! And exclude grep: | grep -vw grep | grep \"^\\s{$master_pid}\\b\"\n. I have no problem at https://github.com/wp-cli/wp-cli/commit/3f3ef789af7581d0f76c54a19681090cee4824b8\n```\n[viktor@szerver4:~/wp-cliX/wp-cli-szepeviktor:22:03:10:2048]\n./vendor/bin/behat features/server.feature\n@require-php-5.4\nFeature: Serve WordPress locally\nScenario: Vanilla install                                                 # features/server.feature:4\n    Given a WP install                                                      # features/steps/given.php:47\n    And I launch in the background wp server --host=localhost --port=8181 # features/steps/when.php:18\n    When I run curl -sS localhost:8181                                    # features/steps/when.php:24\n    Then STDOUT should contain:                                             # features/steps/then.php:15\n      \"\"\"\n      Just another WordPress site\n      \"\"\"\n    When I run curl -sS localhost:8181/license.txt > /tmp/license.txt     # features/steps/when.php:24\n    And I run cmp /tmp/license.txt license.txt                            # features/steps/when.php:24\n    Then STDOUT should be empty                                             # features/steps/then.php:127\n1 scenario (1 passed)\n7 steps (7 passed)\n0m2.799s\n[viktor@szerver4:~/wp-cliX/wp-cli-szepeviktor:22:03:20:2049]\nphp -v\nPHP 5.6.17-0+deb8u1 (cli) (built: Jan 13 2016 09:10:12)\nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies\n[viktor@szerver4:~/wp-cliX/wp-cli-szepeviktor:22:03:23:2050]\nps -o ppid,pid,command\n PPID   PID COMMAND\n13025 13027 bash -rcfile .bashrc\n13027 13589 ps -o ppid,pid,command\n```\n. No.\nDoes Travis have this problem?\n. @danielbachhuber Could you describe your environment the problem occurs in?\nIt is https://github.com/humanmade/Salty-WordPress on OSX?\n. There are two types of hashes: https://github.com/wp-cli/builds/tree/gh-pages/phar\n. > All right. Hashes don\u2019t help much in proving the integrity.\nDo you mean hash collision?\nWhat is the difference between GPG signing and SHA512 hashing?\n. bash\nwget -qO- https://github.com/wp-cli/wp-cli/releases/download/v0.20.1/wp-cli-0.20.1.phar|sha512sum|cut -d' ' -f1\nwget -qO- https://github.com/wp-cli/builds/raw/gh-pages/phar/wp-cli.phar.sha512\nOh! I see your point: if someone modifies the phar and also the hash then he wins!\n. 3.8\n. Mostly there's no rationale. I'm seeing that is widely supported.\n. Core deprecation stats\nbash\n$ grep -irh _deprecated_ * | grep -o \"'[.0-9]\\+'\" | sort -n | uniq -c\n      1 '0.0'\n      3 '0.71'\n      1 '0.72'\n      1 '1.2'\n      3 '1.3'\n      3 '1.5'\n      1 '1.5.1'\n     14 '2.0'\n     33 '2.1'\n      3 '2.2'\n      3 '2.3'\n     22 '2.5'\n      3 '2.6'\n      7 '2.7'\n     37 '2.8'\n      2 '2.8.1'\n      6 '2.9'\n    114 '3.0'\n     20 '3.1'\n      3 '3.2'\n     34 '3.3'\n     18 '3.4'\n      1 '3.4.1'\n     27 '3.5'\n      6 '3.6'\n      6 '3.7'\n      1 '3.8'\n      6 '3.9'\n      4 '4.0'\n. Core versions usage stats\n\n. Try to use quotes on the command line\nwp plugin install \"http://site.com/download.php?file=blah&key=whatever\"\n. > Deprecated: Methods with the same name as their class will not be constructors in a future version of PHP\nCore still suffers from PHP 4-style constructors?\n. I thought it is WP trunk for PHP7.\n. Thank you. \n. @danielbachhuber Could you help me to suppress these errors?\n. > Your PHP installation appears to be missing the MySQL extension which is required by WordPress.\nCould it be solved by define( 'WP_USE_EXT_MYSQL', false );?\n. @roscom Have you gone through all my commments in #1758?\nAny success?\n. Could there be a warning of incompatible WP version?\n. Oh! I haven't thought about it.\nMy answer would have been: In old wp-cli-s.\n. Seems like a WP 4.4 problem.\n. Could we have a bot asking these questions randomly?\n. @billc108 which -a wp please.\n. Please delete all but one version.\n. Could it be wp cron event run without hook name? Or run --all or run-all\n. Maybe wp-cli is a better tool than my script\nhttps://github.com/szepeviktor/debian-server-tools/blob/master/webserver/wp-cron-cli.sh\n. @danielbachhuber So -all does not respect scheduling, thus not an equivalent of php wp-cron.php?\n. Excuse me, I do not know how to modify a media file's name in WP.\nI've seen two plugins doing this but I have no clue whether that is the way to do it.\n. Would it be possible to implement it in wp media rename ...?\n. Thanks.\nCould you give me a hint where to look for a way to rename media in WP?\n. $ mkdir foo; cd foo\n$ wp --allow-root core download\nDownloading WordPress 4.4.1 (en_US)...\nSuccess: WordPress downloaded.\n$ wp --allow-root help core config\nError: wp-config.php not found.\nEither create one manually or use `wp core config`.\n$ wp --allow-root --info\nPHP binary:     /usr/bin/php5\nPHP version:    5.6.14-0+deb8u1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:   /root/.wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version: 0.21.1\n. wp --allow-root cli update solves it\nBug in 0.21.1\n. Whatever I do with WP-CLI I see the same lines (I am talking only the above 10lines), It would be nice to hide only these 10 lines with a new option and display all other debug lines.\n. OK-OK.\nIt there a way to write a command that mutes these lines?\n. $ time ../wpcli/wp-cli-2369-list-user-perf/bin/wp --allow-root user list --format=count\n62410\nreal    0m0.452s\nuser    0m0.412s\nsys     0m0.032s\n0.97% of the original.\n. Should it exactly work like wp post meta?\n. Thank you @fjarrett\n. Thank you.\nIf you tell me it's so simple I would have implemented it.\n. Try validating your JSON http://jsonlint.com/\nthen issue wp option get option_name --format=json and check the output.\n. :cry: No reworked find_var() from #2467?\n. @mbovel Maybe you find it interesting.\n. Yes, that would be nice.\n. Nice merge!\n. Seems like wp-cli has shrunk a lot!\n. > -bash: cd:/var/www/html/apps/cc-dev/wordpress/wp-content/plugins: No such file or directory\nMy bash outputs one more space after cd:\n-bash: cd: /wppluginpath: No such file or directory\nI hope this helps debugging.\n. And maybe wp plugin path|hexdump -C\n. I suspect some invisible control characters.\n. cd \"$(wp plugin path)\" | hexdump -C\n. >  00000000 08 2f 76 61 72 2f 77 77 77 2f 68 74 6d 6c 2f 61 |./var/www/html/a|\n@jschank ONe of your plugins emits a DEL (ASCII 0x08) char\n. OK.\n. @petenelson Could you share echo $BASH $BASH_VERSION ?\nI noticed two wp-cli-s: ./bin/wp and wp\nYou may find wp-cli by which -a wp\nIn Bash $(...) output could give one string only when it is enclosed in quotes \"$(echo one string)\"\nPlease run the first wp-cli command by this shell script called dump-my-args.sh\n``` bash\n!/bin/bash\necho \"1:'$1' 2:'$2' 3:'$3' 4:'$4' 5:'$5' 6:'$6' 7:'$7' 8:'$8' 9:'$9'\"\n```\nchmod +x dump-my-args.sh; ./dump-my-args.sh ./bin/wp post ... ...\nPlease also share its output.\nThank you.\n. @danielbachhuber Thank you very much.\n. Oops.\n. Because entropy comes from your own server.\n. Please see https://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L149\n. See https://github.com/wp-cli/wp-cli/issues/2489\n. Could you run the commands down here?\nhttp://wp-cli.org/docs/bug-reports/\n. Same functionality for free: https://security.sensiolabs.org/check\n. > What value do you think they provide?\nShow how fast a user will get help.\n. Thank you.\n. Oops, fixed in https://github.com/wp-cli/wp-cli/commit/649b23fb596fe3746fb45bebfe8f6c664ca608ac\n. Thank you.\nI am waiting for the decision.\n. I've developed a TOTP login solution and I need to set the secret code at each edit_user_created_user.\n. Then should I use wp eval ...?\n. I couldn't find that action.\nDo you mean user_register?\n. Thank you!\n. @voldemortensen Could you share your idea?\n. AFAIK forcing a release cycle will result in more bugs. A natural \"roughly three months\" works well.\n. The Debian way is to release packages for every OS release.\nIn the next Debian release there will be a php-cli virtual package: https://packages.debian.org/sid/php-cli\nBut that is not available in the current stable release.\nWe could depend on php5-cli OR php7.0-cli.\nhttps://github.com/wp-cli/wp-cli/blob/master/utils/wp-cli-updatedeb.sh#L34\n@danielbachhuber ?\n. @carlalexander Meanwhile you could dpkg --ignore-depends php-wpcli_latest_all.deb\n. There is only php7.0-mysql\nhttps://packages.debian.org/source/sid/php7.0\n. Here it is https://github.com/wp-cli/wp-cli/pull/3208/commits/8cba590cf01ef6abdfd153893e68a1e16d790e8a\n. > Given $wp_local_package is a variable from version.php, I'm amenable to adding it to wp core version --extra.\nMeaning that someone may send a PR?\n. Should it be called *Installation language or Package language?\n. process one line at a time | xargs -I % ...\nprocess each token (e.g. post ID) | xargs -d \" \" -I % ...\n. :ocean: \n. Try wp cron event run --all\n. Thanks.\nPlease change the above comment to Closes #3228 and GitHub will close the issue when it is merged.\n. @danielbachhuber Could you tell me the reason?\n. > As more people use WP-CLI and ask general usage questions\nI thought.\nThanks.\n. It would call mysqlcheck as other db subcommands do. This time with the (default) --check option.\nMay I send a PR?\n. @danielbachhuber Do you have an idea why PHP7 eats the output?\nhttps://travis-ci.org/wp-cli/wp-cli/builds/151661997\n. Do we have another another test that tests STDOUT? *with external command\n. My fault.\n. I have no clue...\nhttps://github.com/wp-cli/wp-cli/blob/master/php/utils.php#L434\n. When I run wp db check on my box it lists all the tables to STDOUT.\n. @danielbachhuber Could you run wp db check yourself?\n. @danielbachhuber Are you a Behat expert?\n. I am trying to find the solution before you.\n. https://github.com/wp-cli/wp-cli/commit/3ce2409f8de98292df14d27cccaddcaac3e1a9a8 is not fair.\nBehat has a problem, I don't know what it is. It swallows stdout.\n\n+36204242498\nEzen a k\u00e9sz\u00fcl\u00e9ken sok az el\u00fct\u00e9s. \nEln\u00e9z\u00e9st!\nOn August 22, 2016 10:32:49 PM CEST, Daniel Bachhuber notifications@github.com wrote:\n\nClosing in favor of #3332\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/3278#issuecomment-241540683\n. I am fiddling with it in #3280 \n. @danielbachhuber Seems like working...\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/151663486\n. All green. Could we switch to Trusty?\n. > mysqlcheck apparently doesn't output when STDOUT is piped\n\nYou could try mysqlcheck | cat.\nThe cause could be that Travis is not running on a terminal...\n. > The cause could be that Travis is not running on a terminal...\nNo, it fails on my terminal also.\n. The word is: empty\n. Could you restore the whole table list in db.feature?\n. Thanks.\n. Since - at least - 2013 we have $_SERVER['SERVER_NAME'] on CLI - providing one fills in url in the YAML file. (I do)\nhttps://github.com/wp-cli/wp-cli/commit/8881f63add12d67fd7788bfbca9e87f094b05057\n. OK-OK.\nAs far I see, there is no hook/way to hijack the WP.org API HTTP requests in a community command :cry: \nMaybe I implement wp core-cached verify-checksums\n. OK. Running home-travis :)\n. This is not me :(\nSee the spaces: https://github.com/wp-cli/wp-cli/blob/master/features/core-config.feature#L35-L38\nAnd the origin without spaces: https://github.com/wp-cli/wp-cli/blob/master/templates/wp-config.mustache#L62\n. It has something to do with WP version < 4.0\nhttps://github.com/wp-cli/wp-cli/blob/4f6b9b495e0a629707fa28f19f2cdc923601a9f6/php/commands/core.php#L382-L386\n. ### Summary\nUp to this PR the WPLANG test ran on WP < 4.0 also. That is not good. But it did not fail because of spaces.\nI suggest to remove And the wp-config.php file should not contain: and add a new scenario:\nbehat\n@require-wp-4.0\nScenario: No wp-config.php and WPLANG\n  Given a wp-config-extra.php file:\n    \"\"\"\n    define( 'WP_DEBUG_LOG', true );\n    \"\"\"\n  When I run `wp core config {CORE_CONFIG_SETTINGS} --extra-php < wp-config-extra.php`\n  Then the wp-config.php file should not contain:\n    \"\"\"\n    define( 'WPLANG', '' );\n    \"\"\"\n. So we should leave it as it is?\n. #3537 seems to fail. I think we need sudo: false\n. But the MySQL error maybe fixed soon.\n. I think we are all green, except there's no PHP 5.3 in that container.\n. Me neither, just couldn't resist trying out the solution from travis issue.\n\n+36204242498\nEzen a k\u00e9sz\u00fcl\u00e9ken sok az el\u00fct\u00e9s. \nEln\u00e9z\u00e9st!\nOn November 10, 2016 3:51:50 PM CET, Daniel Bachhuber notifications@github.com wrote:\n\nI don't want to run Trusty during the beta period. It's not worth it to\nhave to spend time tracking down why the build is randomly failing.\n\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/3548#issuecomment-259709501\n. Later on PHP 5.3 will need Ubuntu precise\n\nyaml\nmatrix:\n  include:\n    - php: 5.3\n      dist: precise\n. Of course. Don't you remember the --allow-root issue? https://github.com/wp-cli/wp-cli/pull/1933\nPlease issue wp --allow-root cli update\n. Yes, a system file update is the chore of root.\n. Actually\n``` bash\nsudo su -\nEnter your pwd\nwp --allow-root cli update\n```\n. maybe you've missed --allow-root from the two docs commits\n\n+36204242498\nEzen a k\u00e9sz\u00fcl\u00e9ken sok az el\u00fct\u00e9s. \nEln\u00e9z\u00e9st!\nOn November 16, 2016 2:51:51 PM CET, Daniel Bachhuber notifications@github.com wrote:\n\nClosed #3572 via wp-cli/wp-cli.github.com#251.\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/issues/3572#event-861097829\n. You could merge it, this is untested shell code.. Thank you!\n\nSo if I use W3TC and your redis cache then I get Unknown'?. Oh, the order. Thanks.. Do we have information (runcommand/profiler) on what is actually taking so long?\n\nnetwork\ndisk, file copying\nphp execution\ndatabase\n. Could we try\nopcache.enable=1\nopcache.enable_cli=1\nopcache.file_cache=\"/ramdisk/php-file-cache\"\nopcache.file_cache_only=1\nopcache.file_cache_consistency_checks=1\nproviding there is a ramdisk (tmpfs) on Travis?\n. ~7\u00d7 on reruns.. >  1 hr 9 min 58 sec\n\nSee https://travis-ci.org/wp-cli/wp-cli/builds/184062283\nand the new lightspeed thing https://travis-ci.org/wp-cli/wp-cli/builds/184099215. > See some prior conversation in #1557\nThanks!\nIf anyone is interested: https://github.com/szepeviktor/wpcli-git. Could it be that it is just wp core download --force?. Yes, unconfirmed.. > I'm not sure validating the directory name with regex is the correct direction to take, because it could have unintended consequences.\n\"Avoid using numbers for the theme name, as this prevents it from being displayed in the available themes list.\"\nhttps://codex.wordpress.org/Theme_Development\nI think the slug should be [a-z][a-z-]*[a-z] see https://wordpress.org/themes/\n*Some brave guys Do Upper-Case theme slugs. We should not.. > solving: . and other shorthand.\ndirname( realpath( $new_theme_path ) ) === 'themes' maybe?. What was the thing that made tests run so long?. All would be green in 70+ minutes.. I was adding wp core git-update but it was only possible through __invoke(). \\WP_CLI::add_command( 'core', '\\\\WP_CLI_Git\\\\Core_Command' ); overwrote the whole core command.. OK for me but missing from the cookbook.\n. I was opening this issue to spare time for others by adding it to the command cookbook.. @danielbachhuber I hope you will like the result.. I may set opcache.file_cache_consistency_checks=0 instead of 1 to make it even more faster.. And we ran into a known PHP7 bug https://bugs.php.net/bug.php?id=71296. Actually this lightspeed is not so fast.\nhttps://travis-ci.org/wp-cli/wp-cli/builds/184099215. Untill then\n```bash\n!/bin/bash\nWP_CONTENT_DIR=\"$(wp eval 'echo WP_CONTENT_DIR;')\"\nif [ -n \"$WP_CONTENT_DIR\" ] && [ -d \"$WP_CONTENT_DIR\" ]; then\n    rm -rf \"${WP_CONTENT_DIR}/plugins/wp-envato-market\"\n    wp plugin install \"https://github.com/envato/wp-envato-market/archive/master.zip\"\nfi\n. Thank you.. Thanks. Could we implement that *plugin*?\nIt must be no more than registering a hook with OPcache purge function.. @danielbachhuber Is it Ok to hook `upgrader_process_complete` for OPcache purge?. There are my thoughts.php\nif ( function_exists( 'opcache_get_status' ) {\n// After an upgrade Tell PHP behind the webserver to purge its opcode cache\nadd_action( 'upgrader_process_complete', function () {\n    // HTTP/POST to '/wp-admin/admin-post.php?action=opcache_invalidate&wp_nonce=$NONCE'\n} );\n\n// Receive the request to purge\n// admin_post_nopriv_ ???\nadd_action( 'admin_post_opcache_invalidate', function () {\n    // nonce check\n    // is __FILE__ within ini_get( 'opcache.restrict_api' ) ?\n    $status = opcache_get_status();\n    foreach( $status['scripts'] as $script ) {\n        opcache_invalidate( $script['full_path'] );\n    }\n} );\n\n}\n``. Does it mean that we will be able to build smaller phar-s?. Isack` really awk?. > Is ack really awk?\n~~Yes it is \ud83d\ude04~~ No it isn't.\nTry https://github.com/ggreer/the_silver_searcher it is a better product.. Is wp config new or it is a new name for old commands?. Thanks.. Thank you for the solution.\nI was suspecting the branch name removing feature.. There was a Travis timeout (again). Is there a linter for RPM-s?. A package may be functional without any kind of inspection. I test my Debian packages with lintian and act accordingly. I've never took a look at an RPM based server really closely.. So my question is: What kind of linter does Redhat use?. Thank you.\nThat is what I was afraid of. It has 34 messages.\nDebian lintian has 1 zillion messages.\nAlthough that does not stop us to produce a high quality RPM package but surely helps much less than lintian.. Nope. I am Debian user.\nSee my above comment. I am not willing to get closer to a loose system. I like very restrictive systems.\n. Actually:\nhttps://github.com/SosyalAlkolik/wp-cli/blob/master/wp-cli-1.1.0-1.el7.centos.noarch.rpm\nhttps://github.com/SosyalAlkolik/wp-cli/blob/master/wp-cli-1.1.0.spec. You're welcome.\nWould you run an up-to-date rpmlint on it?. @SosyalAlkolik Please try checking your rpmlint version. I've used the latest in Debian.\n$ rpmlint --version\nrpmlint version 1.9 Copyright (C) 1999-2007 Frederic Lepied, Mandriva\nThen please consider checking the package:\nbash\nrpmlint -iv  wp-cli-1.1.0-1.el7.centos.noarch.rpm\n. A script from the Debian package to generate a small man page:\nhttps://github.com/wp-cli/wp-cli/blob/master/utils/wp-cli-updatedeb.sh#L69-L79. > Why we have to create a man page?\nActually we don't have to. I usually follow linters.\nAnyone may issue man wp and - I think - it takes minimal efforts to generate a manual page.\nThe Debian package has one.\nTry running\nbash\n    { echo '.TH \"WP\" \"1\"'; wp --help; } \\\n        | sed 's/^\\([A-Z ]\\+\\)$/.SH \"\\1\"/' \\\n        | sed 's/^  wp$/wp \\\\- The command line interface for WordPress/' \\\n        | gzip -n -9 > wp.1.gz\n. Thank you.\nCould you provide the output of rpmlint -vi wp-cli-1.1.0-1.el7.centos.noarch.rpm ?\nAnd please consider fixing the summary: https://github.com/SosyalAlkolik/wp-cli/pull/2. @SosyalAlkolik Are you prepared for building a new RPM at each release time?. Creating a new Debian package is scripted.. I don't dare to recommend a build script like https://github.com/wp-cli/wp-cli/blob/master/utils/wp-cli-updatedeb.sh. See the Fork button up there!. > Is this okay for only latest version?\nYes.. The popular Remi repo may be the solution: http://rpms.famillecollet.com/. Could you provide the rpmlint -vi wp.rpm output?. Is it possible to resolve Warnings and  Errors?. > Secondly, actually, we don't have to sign these packages because they aren't in an RPM repository.\nI think the E: rror is wp-cli.noarch: E: no-dependency-on locales-cli. Seems like those Debian-based ones have modern rpmlint.\nhttps://github.com/rpm-software-management/rpmlint/releases. > rpmlint has detected that the package uses some capabilities not provided by its dependencies. E.g., the package installs Perl modules but does not require Perl itself.\nhttp://fba.rosalinux.ru/rpmlint/descriptions/no-dependency-on/\nI think by adding locales-cli the error will go away.. Yes.. It is not possible to match for example Red Hat and Fedora Packaging Guidelines, they contradict.\nSee the PR #4203. I think in the third millennium you should use UTF-8 everywhere. . Excuse me.. > Fallback on pdo_mysql or php mysql extension\nCore uses ancient mysql and mysqli. PDO is missing from the core.. How you substitute mysqldump?. Which mysql package excludes MySQL cli commands?. > when you regenerate thumbs for an image which has a dimension smaller than a registered image size\n~~Do you mean the 627x362 image is smaller than 400x400?~~\n*I see! 362 < 400. As git does:\n```\n$ git stati\ngit: 'stati' is not a git command. See 'git --help'.\nDid you mean this?\n        status\n```. Hello @bhubbard  !\nWP-CLI is pluggable! You may hook it here https://github.com/wp-cli/wp-cli/blob/84e55468fc5ed0de5b827f60639c358fd59b990c/php/WP_CLI/Dispatcher/Subcommand.php#L395\nand create any file you need.\nAt this point we have only https://github.com/wp-cli/wp-cli/blob/master/templates/plugin-travis.mustache\n. Hello!\nYou may learn what a Phar file is by googling: https://www.google.com/search?q=PHP+Phar+file\nYou will land on this page: http://php.net/manual/en/intro.phar.php. I've looked it up for you.\nIf you go to a file here on GitHub and press the Blame button you see:\nhttps://github.com/wp-cli/wp-cli/commit/6302579a8b34a1a87fbc86cf3c618d4f77c48284. To restore the old naming:\nbash\nwp db dump \"$(wp eval 'echo DB_NAME;').sql\". I remain a 1.x user till you guys report and fix all of the errors. Maybe I'll try 2.0.2\n@rklrkl Please consider modern PHP. As of modern: even 5.6 is hardly modern. I think refactoring a 5.4 project is a relatively small task.. > Does this make any more sense?\nYes.\nUp to now I use search-replace in dry-run mode.. > if a required PHP extension isn't installed.\nBTW if you want to check your PHP extensions and directives see this small class\nhttps://github.com/szepeviktor/debian-server-tools/blob/master/webserver/php-env-check.php. I am trying to find non-WP.org plugins.\nNow the only work-around is to check each and every plugin through the API.\nbash\nwp plugin list --field=name \\\n | xargs -I% bash -c '[ \"$(wget -qO- \"https://api.wordpress.org/plugins/info/1.0/%.json\")\" == \"null\" ] && echo \"Not WP.org plugin: %\"'\n. Would it be simpler to use only docker?\nNow we use Mock inside a - probably - clean CentOS container.. Maybe Travis' Ubuntu can also put together our highly simplistic RPM.. AFAIK A two-file (phar+man) rpm is the same on every distro.\n-- \n+36204242498\nEzen a k\u00e9sz\u00fcl\u00e9ken sok az el\u00fct\u00e9s. \nEln\u00e9z\u00e9st!\nOn July 11, 2017 3:41:00 PM CEST, James Lavoy notifications@github.com wrote:\n\nMock creates a chrooted environment to build the RPM based on the\nconfig file you give it. It doesn't care what it's host is. While you\ncertainly can use docker I don't see any reason you'd need to. \n-- \nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/pull/3959#issuecomment-314446951\n. @SosyalAlkolik You may cherry-pick from https://github.com/wp-cli/wp-cli/pull/3800/files. I am not much of an RPM guy but the closed PR seems to have more details.. Thanks.. @danielbachhuber We could have a build script that replaces version 0.0.0 and builds the rpm itself.\n\nbash\n$ rpmbuild -bb wp-cli.spec\nExecuting(%prep): /bin/sh -e /var/tmp/rpm-tmp.CAeUki\n+ umask 022\n+ cd /home/viktor/rpmbuild/BUILD\n+ wget -nv -O /home/viktor/rpmbuild/SOURCES/wp-cli.phar https://github.com/wp-cli/builds/raw/gh-pages/phar/wp-cli.phar\n2017-07-07 21:22:33 URL:https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar [6804077/6804077] -> \"/home/viktor/rpmbuild/SOURCES/wp-cli.phar\" [1]\n+ + sed s/^  wp$/wp \\\\- The command line interface for WordPress/\nsed s/^\\([A-Z ]\\+\\)$/.SH \"\\1\"/\n+ echo .TH \"WP\" \"1\"\n+ php /home/viktor/rpmbuild/SOURCES/wp-cli.phar --help\n+ exit 0\nExecuting(%build): /bin/sh -e /var/tmp/rpm-tmp.upuSLu\n+ umask 022\n+ cd /home/viktor/rpmbuild/BUILD\n+ exit 0\nExecuting(%install): /bin/sh -e /var/tmp/rpm-tmp.o7EjdH\n+ umask 022\n+ cd /home/viktor/rpmbuild/BUILD\n+ mkdir -p /home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64/usr/bin\n+ cp -a /home/viktor/rpmbuild/SOURCES/wp-cli.phar /home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64/usr/bin/wp\n+ chmod +x /home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64/usr/bin/wp\n+ mkdir -p /home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64/usr/share/man/man1\n+ cp -v -a /home/viktor/rpmbuild/SOURCES/wp.1 /home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64/usr/share/man/man1/\n'/home/viktor/rpmbuild/SOURCES/wp.1' -> '/home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64/usr/share/man/man1/wp.1'\n+ /usr/lib/rpm/brp-compress\n+ /usr/lib/rpm/brp-strip /usr/bin/strip\n+ /usr/lib/rpm/brp-strip-static-archive /usr/bin/strip\n+ /usr/lib/rpm/brp-strip-comment-note /usr/bin/strip /usr/bin/objdump\nProcessing files: wp-cli-0.0.0-1.noarch\nProvides: wp-cli = 0.0.0-1\nRequires(rpmlib): rpmlib(CompressedFileNames) <= 3.0.4-1 rpmlib(PayloadFilesHavePrefix) <= 4.0-1\nRequires: /usr/bin/env\nChecking for unpackaged file(s): /usr/lib/rpm/check-files /home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64\nWrote: /home/viktor/rpmbuild/RPMS/noarch/wp-cli-0.0.0-1.noarch.rpm\nExecuting(%clean): /bin/sh -e /var/tmp/rpm-tmp.UbyEKV\n+ umask 022\n+ cd /home/viktor/rpmbuild/BUILD\n+ /bin/rm -rf /home/viktor/rpmbuild/BUILDROOT/wp-cli-0.0.0-1.x86_64\n+ exit 0. Thank you.\nrpmlint told me to include it but I have no clue what it is.. I've installed a CentOS7 server which is the latest but it has still ancient PHP and rpmlint.. Yes it is. It is the max I've found.. Almost done in #4216 \nI am not familiar with secret GitHub uploads.. Only Ubuntu Trusty has the dependencies of rpmlint.\nhttps://packages.ubuntu.com/search?suite=all&searchon=names&keywords=rpmlint\nrpmlint is only available in xenial.\n. ~~Trying~~ Done in https://github.com/wp-cli/rpm-build/pull/1. Could you proceed with auto-committing to wp-cli/rpm-builds?. Committing the RPM package to wp-cli/rpm-builds when there is a new release.\nWith the same mechanism as the phar goes to wp-cli/builds.. > when there is a new release\nWhen /VERSION is included in the current commit and does not end with -alpha.. OK.. @danielbachhuber Could we get a small audience to install our RPM and send us some feedback?. Thank you.\nOf course the script in this PR generates the package.. Thanks.. Back when there were typewriters CR was moving the cartridge, LF was moving the paper.\nThen in computers it was: LF for UNIX, CR for Apple and CRLF for Microsoft.\nThen Apple realized LF makes sense.\nNowaday there is \"Ubuntu for Windows\" https://msdn.microsoft.com/en-us/commandline/wsl/about\nIn couple of years Windows will support LF - I think.... Now the phar is only 4 MB.. > Is it possible to run the script on Travis or does it need to be run inside a Docker container?\nYes it is. As creating the package is just copying five files into a .deb archive.\n. https://github.com/szepeviktor/wp-cli-debbuild/blob/master/.travis.yml. The output will be ./php-wpcli_1.3.0_all.deb and the symlink.. Done.. You're welcome.\n. This is the symlink\nhttps://github.com/wp-cli/builds/blob/gh-pages/deb/php-wpcli_latest_all.deb\nand it is outdated now.. The deb is as good as it can be:\nI: php-wpcli: extended-description-is-probably-too-short\nE: php-wpcli: depends-on-obsolete-package depends: mysql-client => default-mysql-client\nE: php-wpcli: php-script-but-no-php-cli-dep usr/bin/wp. BTW the analysis appears at the end of each build log:\nhttps://travis-ci.org/wp-cli/deb-build#L753-L754. I am trying to detect whether a (custom) command is installed.\nIn Bash wp --allow-root cli cmd-dump | jq -r '.subcommands[].name | select(. == \"find\")'\nor wp --allow-root cli cmd-dump | grep -o '{\"name\":\"find\",' (very lazy). The new tool wp-choose.sh checks its dependencies, and the find command is not built-in.\nhttps://github.com/szepeviktor/debian-server-tools/blob/master/tools/wp-choose.sh#L21-L22\n\n. > in the wp cli * namespace\nI agree.. > List the known commands\n... could be wp cli cmd-dump --format=table. > honors\n\ud83e\udd23 . Isn't it a bug?\nhttps://wordpress.slack.com/archives/C02RP4T41/p1506037113000147\n. How do git and drush do it?\nSomething like http://php.net/manual/en/function.levenshtein.php ?. Git by Levenshtein:\nhttps://github.com/git/git/blob/e0aaa1b6532cfce93d87af9bc813fb2e7a7ce9d7/help.c#L302. Drush does not try to correct typos:\n$ drush watchdog-shoe\nThe drush command 'watchdog-shoe' could not be found.. \ud83d\udc4d for Levenshtein.. Thank you.\nNowadays I am not up-to-date with WP-CLI.. You're welcome.. @danielbachhuber Many WP-CLI repos have the vendor dir. cached. Could you figure out a way to \"mass-check\" their Travis config?. > Either way, the expected behavior would be to only prompt for values that were not yet provided.\n\ud83d\udc4d . Could it be the cause?\n```\nwp --allow-root package install wp-cli/scaffold-package-command\nError: The \"https://wp-cli.org/package-index/packages.json\" file could not be downloaded: Peer certificate CN=ssl391970.cloudflaressl.com' did not match expected CN=wp-cli.org'\nFailed to enable crypto\nfailed to open stream: operation failed\n```\nMaybe php 5.3 does not speak SNI.. But SNI is enabled\n$ php -r 'echo OPENSSL_TLSEXT_SERVER_NAME;'\n1\nhttp://php.net/manual/en/openssl.constsni.php\neven\nhttps://github.com/composer/composer/blob/master/src/Composer/Util/StreamContextFactory.php#L102-L108\n. @schlessera I think I try docker run -it --rm tomsowerby/php-5.3:cli /bin/bash. We use a skeleton (without actual values) wp-config with 20+ env-s.\nSomething like https://m.dotdev.co/secure-your-wordpress-config-with-dotenv-d939fcb06e24\nIn PHP-FPM envs are in the pool config file. When running on CLI I need a WP-CLi-integrated solution to set envs.\nSo an env: section would be great.. BTW The DotEnv project is for development only, for example Laravel caches its values in a plain PHP file.. You know it seems much simpler to me.\n\nstore secrets in the current ~/website/wp-cli-envs.php file (also a file)\nstore secrets in ~/website/wp-cli.yml resulting in one less file (also a file)\n\nI generally discourage developers to use .env for WordPress. Using real environment variables is OK.\nps. my policy is to have one Linux user with a /home/ directory for each website - usually 1 website per server\nps2 document root is ~/website/code/ so wp-cli.yml lives above it. > than having them in ~/website/.env, though.\nIt could be a misunderstanding. In my case there is no such option!\nhttps://github.com/vlucas/phpdotenv says:\n\nphpdotenv is made for development environments, and generally should not be used in production.\n\nso I do not allow it nor in PHP-FPM nor in CLI.\nIt is a wp-cli-envs.php vs. wp-cli.yml decision, not a wp-cli.yml vs. .env one.\n. Yes\nhttps://github.com/wp-cli/wp-cli/blob/master/composer.json#L11\nWhy??? :). Yes.. composer validate complained about the greater sign. That is from \nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L612-L616\n. To be clear you could --define disable_functions=\"\"\n. Should I put these in else{}-s?\n. Check for no results?\n. To get the total autoload size.\n. Please comment here your ideas.\n. ? and * as in shell globals?\n. It will be.\nIt creates a mess. Very long values.\n. Do you mean spaces in brackets?\n. No. Few lines above ['Description']\n. What is the purpose of adding ! $assoc_args['patch']?\n. Thank you.\n. Is there a Behat then table that includes this row?\nI think there isn't.\nI am no Behat guy (yet).\n. ? is also a glob.\nWP coding style: false !== strpos( $table, '*' )\n. Could you go dirname()?\nphp\nrequire dirname( dirname( __FILE__ ) ) . '/{{plugin_slug}}.php';\nAlso in scaffold.feature.\n. $(dirname ${WP_TESTS_DIR})/wp-tests-config.php\n. Thank you!\n. Could you go {$att_desc} in all of your variable usage?\n. That is OK.\nI was just pointing out to wrap the variables in { braces }.\n. > It's not necessary to wrap with curly braces\nYes it isn't but it makes it more readable for humans.\n. $clone here please.\n. Also else needs {}.\n. Please consider $cap => $value for readability.\n. Would get_flag_value() be suitable here?\n. I hope this helps\n\nPHP Notice:  Undefined index: /var/www/subdirwp/server/static/themes/p2 in php/WP_CLI/CommandWithUpgrade.php on line 270\n. $items_to_update has the value of\n\nphp\narray(1) {\n  [\"/var/www/subdirwp/server/static/themes/p2\"]=>\n  array(9) {\n    [\"name\"]=>\n    string(2) \"p2\"\n    [\"status\"]=>\n    string(8) \"inactive\"\n    [\"update\"]=>\n    bool(true)\n    [\"update_version\"]=>\n    string(5) \"1.5.5\"\n    [\"update_package\"]=>\n    string(50) \"https://downloads.wordpress.org/theme/p2.1.5.5.zip\"\n    [\"version\"]=>\n    string(5) \"1.4.2\"\n    [\"update_id\"]=>\n    string(2) \"p2\"\n    [\"title\"]=>\n    string(2) \"P2\"\n    [\"description\"]=>\nMAybe $message = $result[ $info['name'] ]?\n. Yes. That says: P2 updated successfully from version 1.4.2 to version 1.5.5\nMaybe I am wrong.\n. @danielbachhuber Here is the fix.\n. Could it be compacted?\n``` php\n        $assoc_args['admin_password'] = getenv( 'WP_ADMIN_PASSWORD' );\n    if ( empty( $assoc_args['admin_password'] ) ) {\n        \\WP_CLI::error( \"Environment variable WP_ADMIN_PASSWORD must be defined.\" );\n    }\n\n``\n. Would get_flag_value() be suitable here?\n. D. Crockford showed that an anonymous function should be declaredfunction ()(with a space) to avoid confusion with a function namedfunction.\n. Oops!'20' !==. @danielbachhuber$wp_local_packageis used throughout core but **is** a read-only variable.\n.\\s+?is really\\s*. Please writePackage Languagehere also.\n. You could spare a!by reversing the two.\n. Actually WPCS says$arrray['contant-without-surrounding-spaces']`\n. I was encouraged by the other two tests.\nDoes this seem OK?\nwp_cli_test.wp_commentmeta                         OK\nwp_cli_test.wp_comments                            OK\nwp_cli_test.wp_links                               OK\nwp_cli_test.wp_options                             OK\nwp_cli_test.wp_postmeta                            OK\nwp_cli_test.wp_posts                               OK\nwp_cli_test.wp_term_relationships                  OK\nwp_cli_test.wp_term_taxonomy                       OK\nwp_cli_test.wp_termmeta                            OK\nwp_cli_test.wp_terms                               OK\nwp_cli_test.wp_usermeta                            OK\nwp_cli_test.wp_users                               OK\n. @danielbachhuber Yes.\n. OK :( Let's be serious.\n. ",
    "robsonpeixoto": "The error continues ...\n```\n$ wp core download\nPHP Strict standards:  Non-static method WP_CLI::add_command() should not be called statically in /opt/local/lib/php/pear/wp-cli/commands/internals/core.php on line 3\nPHP Stack trace:\nPHP   1. {main}() /opt/local/lib/php/pear/wp-cli/wp-cli-boot.php:0\nPHP   2. include() /opt/local/lib/php/pear/wp-cli/wp-cli-boot.php:8\nPHP   3. WP_CLI::run_command() /opt/local/lib/php/pear/wp-cli/wp-cli.php:61\nPHP   4. WP_CLI::load_command() /opt/local/lib/php/pear/wp-cli/class-wp-cli.php:351\nPHP   5. include() /opt/local/lib/php/pear/wp-cli/class-wp-cli.php:365\nStrict standards: Non-static method WP_CLI::add_command() should not be called statically in /opt/local/lib/php/pear/wp-cli/commands/internals/core.php on line 3\nCall Stack:\n    0.0003     228096   1. {main}() /opt/local/lib/php/pear/wp-cli/wp-cli-boot.php:0\n    0.0006     261712   2. include('/opt/local/lib/php/pear/wp-cli/wp-cli.php') /opt/local/lib/php/pear/wp-cli/wp-cli-boot.php:8\n    0.0025     470536   3. WP_CLI::run_command() /opt/local/lib/php/pear/wp-cli/wp-cli.php:61\n    0.0025     471400   4. WP_CLI::load_command() /opt/local/lib/php/pear/wp-cli/class-wp-cli.php:351\n    0.0184     538088   5. include('/opt/local/lib/php/pear/wp-cli/commands/internals/core.php') /opt/local/lib/php/pear/wp-cli/class-wp-cli.php:365\nDownloading latest WordPress (en_US)...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 4432k    0 4432k    0     0   224k      0 --:--:--  0:00:19 --:--:--  340k\nSuccess: WordPress downloaded.\n.\n$ wp --version \nwp-cli 0.6.0\n```\n$ php --version \nPHP 5.4.8 (cli) (built: Oct 19 2012 16:13:26) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\n    with Xdebug v2.2.1, Copyright (c) 2002-2012, by Derick Rethans\nInstalled using pear\n. ",
    "tddewey": "I have a patch in the works...\n. Seems to me that only search/replacing part of the database makes this command smarter than it should be\nPlus, I can't really think of a use case where you wouldn't want any keys to be modified. It is, after all, search and replace. Not search and replace some things.\nMy vote is to make the tool stupid and happy.\n. ",
    "sebastiaandegeus": "@jmslbam @scribu Yes. We can rewrite the custom post type and taxonomy scaffolding for a first pull request. We'll have to clean up the skeletons a bit more.\n. I think this is a very good idea. It would improve the speed of normal actions. Especially on the plugin command where you have to type the complete plugin name and sometimes they are pretty long.\n. Oh nevermind :P\n. Thats nice but isn't it best practice to always define the update messages and register the post type on the correct hook?\n. Yes, I think inverting it would be a nice idea. So with --raw you can just\ngenerate a very quick post type without all the fuss and edit it by\nyourself later on.\nOn Wed, Nov 28, 2012 at 4:48 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nSure, you could invert it and have a --raw flag instead of an --extraflag. The main idea is making the scaffold templates reusable.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/226#issuecomment-10807461.\n\n\nMet vriendelijke groet,\nSebastiaan de Geus\nhoppinger\ninternetconcepten  websites  applicaties\nLees op ons blog over social media, webdevelopment\nen ontwikkelingen op internetgebied: www.hoppinger.com/blog/\nHoppinger bv\nLloydstraat 138c\n3024 EA Rotterdam\nt: +31 10 221 01 90\ne: sebastiaan@hoppinger.com\nw: www.hoppinger.com\n. Do you want me to make a pull request ?\n. I'll give it a try. \nI need to change the core-config.txt and then use ronn to make the core-config.1 file?\n. Ok, I''ll state my problem again as in 418. \nMy problem is that right now is that w-cli extending needs a wordpress plugin and what I would like to do is making wordpress installations/builds/etc. Therefor there is no wordpress so plugins won't work. I would like to extend wp-cli with a command or some commands and at the same time use existing commands like wp core download.\nI liked the idea of Daniel of a package manager.\n. Any news on which solution we will choose? My preferred solution would be to read the /users/username/.wp-cli folder for commands and load them into wp-cli. This is highly flexible and everybody can do what they want without forcing things on someone else. Also you can keep updating your wp-cli whenever you want.\nWhichever solution we will choose I'm willing to dedicate my time to make this happen. I've but my project on hold until I know how can implement this the official way.\n. I'm not saying I'm in a hurry to rush things. I'm saying I'm willing to help out with whatever solution we choose. I'm also a fan of a package manager of some kind. \n. Thanks for the advice. If that's all that is needed it's fine with me. I have some time tonight so I'll have a look on what I can make happen.\n. The above always generates:\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpress or run wp core download.\nThis only works when I run this in an installed wordpress httpdocs folder.\n. Apparently I have wp-cli 0.10.1\nHow do I install that alpha version?\n. Ah yes thanks, I still get some errors about Boris.\nProblem 1\n    - Installation request for d11wtq/boris @stable -> satisfiable by\nd11wtq/boris[v1.0.1].\n    - d11wtq/boris v1.0.1 requires ext-pcntl * -> the requested PHP\nextension pcntl is missing from your system.\nBut I will try to fix that later. I have to go out now. Thanks for the help.\n. That would be pretty awesome. Great idea. Package maintainers have control of their own package and people can update their packages when they want. \n. Most important for my own project is that I can benefit from non bootstrapped commands and use my own non bootstrapped commands.\nAnd at the same time keep everything nice and clean and in line with wp-cli concerning error handling, feedback to the developer, required and non required arguments and man pages.\nIf people could install my automatization tool as a wp-cli package and then start using it. Simply fantastic.\n. Yes I would be very interested to make this happen in one shape or form that is still open for discussion. What do you mean about bandwith, did you use it as a metaphore or real bandwith / hosting of some kind.\n. I think the goal is to make it possible for people to implement custom commands that don't lean on a bootstrapped WordPress without having in in the core. I believe only commands that are useful to everyone should be in the core and specific commands for specific use cases should be outside the core. Plugins are nice if they require a bootstrapped WordPress but other don't.\nThere are also other ways of reaching this goal. Like the discussion of reading/loading a directory from a the user's home folder. A package manager is a nice way to let people decide which packages they need and which they can leave alone.\nPersonally I would vote for the simplest solution because not many people actually need non bootstrapped commands. Why implement a pretty complicated package manager if only a handful of people use it. I love the idea, but maybe it's overkill for what is needed now.\n. > And when would a command not make sense as a plugin?\nRight now I'm working on a tool that builds wordpress installations with the plugins/themes in the versions you put in your make file. Updating a plugin then becomes changing 1 line in the make file and rebuilding. \nThe above cannot be done from a plugin but I would love to use wp-cli as a base and keep it in line. So if people could install it as a package that would solve a problem. Also it's easier to promote packages when they are all added the same way.\nAnother advantage of not having a plugin is that you don't need to update this plugin in all your installations. For instance we have a plugin command that exports/imports fields from Advanced Custom Fields. We have to maintain this plugin in 20-30 wordpress installations. If we could pull this out of the plugin and let each developer maintain the package this would be a great improvement.\nMaybe let the package command create the composer.json file in the users/username/wp-cli folder. Or put it inside the normal wp-cli directory and gitignore it.\n. Because the architecture is open for discussion I'll put in my thoughts on this.\n1. Have a directory for extra commands and packages of commands in wp-cli itself. Make sure this for exists by gitignore or gitkeep file in it. gitignore everything else in the directory. People can just download and move in or symlink their commands/package. This way people can install extra commands for all wp instances. Note: if this offers problems with composer updates then we have to drop this part and only use number 2:\n2. Let users put commands/package of commands in their home directory in .wp-cli Or in a subdirectory if you think that is better. This way people can install commands for their own wp instance. \nAutomating this proces can be done later so a package manager can just install, uninstall, update packages in those directories.\n1. Autoload the commands and packages by letting command/package developers implement simple naming conventions for their commands/packages.\n2. Use wp-cli.ylm per project to load in extra commands by adding the paths. \n3. Use the global config file ~/.wp-cli/wp-cli.ylm file for adding paths to commands and packages for all your wordpress projects.\nThis idea of extra commands, commands without a loaded WP and package managers has gone roundabout a couple times now and I think we are approaches the complete circle again to rethink why we are doing this and how we should solve it.\nIn my opinion simpler is better. If we burden each wp-cli user with complicated package managers and rebuilding their project I think the learning curve would suffer the amount of developers picking this up. \n.\n. I agree with both in a way. If we have a solid foundation that just works by dragging around some files and folders in the right place or adding an extra line in some config file then we a solid basis to build automation on via a package manager of some sort. And yes that automation can be a community package or command on itself. Software that uses its own basis to extend itself is just simply awesome.\n. Very interesting development going on in this pull request. I completely support the ability to run more commands before WP is loaded (or before any WP install has been done)\n. I see that in my description that I made a mistake. I mean that in the core download command the assoc_args['path'] is not used but I guess you already understood what I meant to say.\nTo fix this specific issue with core download we could also check in the download function if $assoc_args['path'] is set. If so we use that as the path and not ABSPATH. Because the path is passed correctly into the function. \n. I have no experience with Behat. How do I set this up in my current wp-cli project.\n. What scenario do you wish me to write a test for?\nI've been discussing this with a colleague and he says I need to write a test for a missing or unwritable directory. But my argument was that I merely added a missing way of adding the path through calling the command internally instead of the command line. \nSo in short. A missing directory test is already missing. Is it in the scope of this pull request to add that test?\n. The issue is that I run this command from a new package of commands through the package manager. I cannot really write a test for my own command which is not in the core. \nHere is the code of that command: \n`````` /\n   * make a build from source\n   \n   * @subcommand build\n   * @when before_wp_load\n   /\n  public function build( $args, $assoc_args ) {\n    $src_path       = ABSPATH . 'src';\n    $builds_path    = ABSPATH . 'builds';\n    date_default_timezone_set('Europe/Amsterdam'); // [TODO] let's find a smart solution for this later on\n    $new_build_path = $builds_path . '/' . date( 'YmdHis', time() );\n    $make_file      = $src_path . '/' . 'makefile';\nif ( ! file_exists( $builds_path ) ) {\n  mkdir( $builds_path );\n}\n\nmkdir( $new_build_path );\n\nif ( ! file_exists( $make_file ) ) {\n  WP_CLI::error( \"{$file} does not exist.\" );\n} else {\n  if ( ! function_exists ( 'spyc_load_file' ) ) {\n    WP_CLI::error( \"Spyc class was not loaded. WP-CLI should have this by default.\" );\n  } else {\n    // we use Spyc that was loaded by wp-cli\n    $options = spyc_load_file( $make_file );\n\n    $version  = ( isset( $options['core']['version'] ) ) ? $options['core']['version'] : NULL;\n    $locale   = ( isset( $options['core']['locale'] ) ) ? $options['core']['locale'] : NULL;\n\n    WP_CLI::run_command( array( 'core', 'download'), array( \n      'path'    => $new_build_path . '/httpdocs', \n      'version' => $version,\n      'locale'  => $locale,\n    ) );\n  }\n}\n\n}```\n``````\n. The \"bug\" was that path was never used in the download command and it used ABSPATH by default.\nABSPATH is the directory I ran the command from but I wanted to use the path builds/42342842342/httpdocs\nI could traverse down the directory with cd but I find that a bit dirty. That why I proposed this change.\nIn essence this changes nothing about the way the download command worked from  the command line. It only made it possible to specify a path also when you use it from another command.\nI hope this clears it up.\n. I use ABSPATH a lot but for a project with a different structure. For instance a bedrock project WP isn't located in the root of the project but in web/wp\nIt's a bit difficult to figure that out because many different setups exist in the wild.\nFor some command I made a function that travelled up the directory structure until it found a certain file. But here I want to go back down a config directory from that root point. I'll figure something out again :) Thanks\n. The point of a checksum is to check if the package is complete and valid. If you remove anything from the package then the checksum should fail. \nIf people rename the sample file it is something in their work process which causes the checksum to fail. But I don't see why this would require a change on the checksum verification code. There are so many different WP structures in the wild that it will be a slippery slope indeed. Some remove licence, some remove readme, some remove translations, themes, etc.\n. Ah now I understand. It's possible to run the command itself but not $ wp\nSo you cannot really see if the command is available from the normal informational overview. \nIt would be nice if the wp menu and options could be loaded when wp is not installed but that's a different issue I guess.\nThanks, this can be closed.\n. It could be a possible to show only the registered commands that actually work without WP being installed and loaded. The core command, install commands and any other command that don't need a working WP.\n. @danielbachhuber @mboynes \nIs anyone picking this up? If not I can do it.\n.  @danielbachhuber am I still needed on this or is @szepeviktor picking this up?\n. Are you domain constants ok? Are you using a multidomain, subdomain or directory multisite?\n. I would say, stick to composer in some way. It solved many of the problems you will end up dealing with when building/using a package manager. It also makes it much easier to support a broader range of use by vcs (svn/git/mercurial), packages, packagist & wpackagist.\n@Rarst The embedded composer looks promising. \nWhen using composer we only need to fix the WP-CLI specific problems and not reinvent the whole package wheel all over again.\n. My first try at the package command. See the pull request info for more details:\n. Hmm, we could remove the dashicon- prefix in the mustache template allowing for both the dashicon and the file reference. But I think the use case of adding a file reference while adding a cpt on the command line is very rare. In that case the dev could simply open up the generated code and change the default menu_icon value to a file reference, wherever that may be.\n. So in short, we don't support it on the assumption that nobody is going to use like that anyway.\n. Ok some clear points. \nHow would requiring composer as a library look like? Do you mean adding the composer.phar in the WP-CLI codebase and calling that specific composer instead of the global installed?\n. @danielbachhuber sorry, yes I will take this forward. \n. const Foo = 'Bar' and define( 'Foo', 'Bar' ) is not the same. \nYou have to be careful and think when to use either define or const\n. Maybe make it optional to use a regex but not by default so normal replace can remain fast.\n. Is it really important for a tool to measure the size of the codebase? It's not downloaded on a page request like jquery.\n. We are working on a couple rebuilds from another system to WordPress. We choose to use the WP-API to do the import. \nAs for an export. We also have good experiences with using the same WP-API to export everything into another system by letting a script crawl the paged API endpoints and handle the JSON on the other side (in this case ruby)\n. I still get the following error:\nPHP Fatal error:  Cannot redeclare class Spyc in /PATH/TO/PROJECT/vendor/mustangostang/spyc/Spyc.php\nIt seems that both WP-CLI and my project require Spyc and the autoloaders conflict. \nHow should we fix this?\n. In this case we use WP-CLI globally and our project has 1 composer file to require plugins and other packages. One of them is \"mustangostang/spyc\": \"^0.5.1\"\nThis was not a problem, until we added that line to our composer.json\nThe site runs fine from apache2 without any errors so we have narrowed it down to WP-CLI mode which gives this error on every command.\n. We have tried the following solution: Use WP-CLI as a dependency of the project by adding:\njson\n\"require\": {\n    \"wp-cli/wp-cli\" : \"~0.22\"\n}\nAnd then run wp like so:\n$ ./vendor/bin/wp\nThat works. \nBut unfortunately this results in completely different errors when we run our project our acceptance environment. Errors that pop up when running WP in the context of Apache2:\n```\nNotice: Use of undefined constant WP_CLI_ROOT - assumed 'WP_CLI_ROOT' in PATH/TO/PROJECT/vendor/wp-cli/wp-cli/php/class-wp-cli.php on line 38\nWarning: include(WP_CLI_ROOT/php/config-spec.php): failed to open stream: No such file or directory in PATH/TO/PROJECT/vendor/wp-cli/wp-cli/php/WP_CLI/Configurator.php on line 31\nWarning: include(): Failed opening 'WP_CLI_ROOT/php/config-spec.php' for inclusion (include_path='.:') in PATH/TO/PROJECT/vendor/wp-cli/wp-cli/php/WP_CLI/Configurator.php on line 31\nWarning: Invalid argument supplied for foreach() in PATH/TO/PROJECT/vendor/wp-cli/wp-cli/php/WP_CLI/Configurator.php on line 41\nWarning: Invalid argument supplied for foreach() in PATH/TO/PROJECT/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/CompositeCommand.php on line 242\nFatal error: Call to undefined function WP_CLI\\Utils\\mustache_render() in PATH/TO/PROJECT/vendor/wp-cli/wp-cli/php/WP_CLI/Dispatcher/CompositeCommand.php on line 263\n``\n. While that might be a solution; I don't think Spyc is really at fault here. This errors pops up in the context of using a wp-cli dependency in wp-cli and inside the project that you are using a globally installed wp-cli. In theory this could happen with any of the other wp-cli dependencies. \n. I've investigated further: the errors _Apache mode_ only pop up when composer was ran with optimize autoloader:composer install --optimize-autoloader`\nInteresting. It's like the perfect storm between WP-CLI, WordPress, Composer and some extra dependency :cloud: \nThanks for the help. I guess it will be a fork or the non optimized autoloader option.\n. The fact that WP-CLI errors out when installed with composer install --optimize-autoloader is more of a valid issue with WP-CLI?\n. Ok, what I have done is adding WP-CLI as a depedency in my project with:\njson\n\"require\": {\n    \"wp-cli/wp-cli\" : \"~0.22\"\n}\nThat fixes the problems on the command line by using wp locally instead of globally with vendor/bin/wp\nBut when requests happen to the actual WordPress website WP-CLI gives a bunch of errors described 4 comments ago. This is caused by composer install --optimize-autoloader.\nWhen installed without an optimized autoloader classmap the errors go away: composer install. In local development I run with the standard composer install but in production the optimized autoloader classmap should be used for performance reasons.\nQuestions:\n- Why does WP-CLI gets loaded inside the web requests context? We never require it anywhere so it's loaded by itself?\n- Why does WP-CLI error out when --optimize-autoloader is used?\n. Yes you are right, I don't see much hope in fixing Spyc at this point.\nI've found a solution in a different direction.\nI have replaced Spyc with Symfony/YAML. \nWorks like a charm. We can use WP-CLI globally again and avoid all those problems as well.\nThanks for the help guys. Much appreciated. \n. Removed the help method: https://github.com/linepress/wp-cli/commit/b1d709c024f45b190b8ba5b4e1e28f9712477362\n. Ok, I will change this. WPML use context so maybe it slipped into my mind this way :)\n. The way it's setup now fits perfectly in the way we develop our corporate websites but you are right that we should provide flexibility. \nMaybe we could parse to the stdout but keep a flag for the theme? --theme to keep the current way working just as well.\n. Removed those checks.\nOn Tue, Nov 27, 2012 at 8:11 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nIn src/php/wp-cli/commands/internals/scaffold.php:\n\n\n}\n}\n  +\n/**\n* Subcommand taxonomy\n*\n* @param string $args Name of taxonomy\n* @param array $assoc_args The ussual WordPress arguments\n*\n*/\nfunction taxonomy( $args, $assoc_args ) {\nglobal $wp_filesystem;\n  +\nif( !isset( $args[0] ) ) {\nWP_CLI::error( \"Please provide a taxonomy\" );\n}\n\n\nThis check will not be necessary once you add the @synopsis tag above.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/226/files#r2240163.\n\n\nMet vriendelijke groet,\nSebastiaan de Geus\nhoppinger\ninternetconcepten  websites  applicaties\nLees op ons blog over social media, webdevelopment\nen ontwikkelingen op internetgebied: www.hoppinger.com/blog/\nHoppinger bv\nLloydstraat 138c\n3024 EA Rotterdam\nt: +31 10 221 01 90\ne: sebastiaan@hoppinger.com\nw: www.hoppinger.com\n. Also we use the theme as the textdomain right now but what should we provide as a default value if none is set?\n. Ok, let's just remove that so it's simpler.\n. hmm. Yes those hooks are front-end related because we use custom post types a lot in our themes a lot. This way you can easily start customizing the single and archive main query. But this is not useful if you are scaffolding a post type for a plugin of some sort. \nMaybe leave this in and only parse it when you set the --theme flag because in 90% of those cases you want those hooks added there. \n. The lp_ prefix was part of the linepress prefix when we first started with this idea. We could just rename it so something that is more related to the post type itself?\n. fixed: 792b33a\n. Changed this to a init hook: e3fabda\n. My original idea was also to generate single and archive templates for the custom post type too. That's why it's so theme related. But the direction is going more towards general post type scaffolding. \nLet's remove the hooks and maybe I'll work this out in another command that is more theme development specific or a plugin command of some kind.\n. ",
    "Ipstenu": "That command sounds aces :)\n. Help is wrong :)\nwp site-meta get 1 site_admins\nShould be\nwp network-meta get 1 site_admins\nWhich throws this...\nwp network-meta get 1 site_admins\narray (\n  0 => 'Ipstenu',\n)\n. Add cape, while awesome, would be less forward thinking of possible future roles :) (an alias Easter egg?)\nSent from my iPhone\nOn Aug 28, 2013, at 9:39 AM, Cristi Burc\u0103 notifications@github.com wrote: \n\nOr, how about wp user add-cape . :)\n\u2014\nReply to this email directly or view it on GitHub.\n. Just FYI, this is because PHP is a bit of an idiot.\nThe SERVER_NAME is not available when you run PHP from the CLI for that very same reason.\nWhen you run PHP from the CLI, you start your own PHP intepreter that runs whatever code you passed to it, without any kind of server. So from the CLI, PHP knows nothing about your web server that you do not explicitly tell it.\n\nhttp://stackoverflow.com/questions/626416/php-server-name-from-command-line\nYou're not doing it wrong, PHP is doing it right and it's unexpected. WP-CLI doesn't fully populate the #_SERVER array because PHP can't via command line :( Not an answer, but hopefully an explanation that helps.\n. I would not drop support, since by allowing it to run on 3.5.2, you can run 'wp core update' and get someone on the newest version quickly. If there's no technical reason (like supporting it prevents development, or causes a security hole) then it should be fine to leave alone.\nIf you DID want to remove support, it would be really nice to still have a way to run the core update. Maybe limit the feature set to JUST updates to encourage people to upgrade :)\nIf dropping support leaves users out in the cold without an easy upgrade path, then you will end up with less secure people. Any time you can avoid that, do it :)\n. @scribu - Not 2.9 you can't, that I'm aware of. Last time I tried it told me I had an out of date version and it wasn't supported. I'll test again. I may not have used --force, but why would that be needed? It's out of date so it should be updated.\n@danielbachhuber - \"getting in the way of development\" is a technical reason. ;) If you can't write new code because of old code, that's totes valid. As long as it spits back \"Dude, you're on an annncient version of WP. Upgrade by running 'wp core update --you-fool'!!!\" with Mr T, I'm for it ;)\n. Ah, you were talking 'download' and I was talking 'upgrade'\nwp core upgrade should keep working is what I mean. Yes, download works, but that's illogical for most users (and sadly many tech support).\n. Belated followup - I think @voldemortensen's suggestion is a good one. While I'd love a longer release cycle (and I think WP should have only two majors a year), in order to keep parity with WordPress, this is necessary.\n. In my case it was becuase the 7.0.10 package for CentOS was buggy and didn\u2019t install CLI properly. If you ran php -v, you got (cgi-fcgi) instead of (cli). It auto-reinstalled itself last night and works now. I can\u2019t even\u2026 So! \u201cWP-CLI and most other command like PHP apps won\u2019t behave as expected if your PHP isn\u2019t cli on the cli.\" \ud83d\ude35 \n. FYI this is the bug in core - https://core.trac.wordpress.org/ticket/37736\n. @danielbachhuber - I see 'why' it's failing, but I have no idea why it's failing NOW and not a million years ago.\nhttps://core.trac.wordpress.org/browser/trunk/src/wp-includes/pluggable.php#L324\nThat has this:\n$sitename = strtolower( $_SERVER['SERVER_NAME'] );\nThat's a problem because it will not work on command line. Why? When you run PHP via CLI, it doesn't know about your webserver, so there's no Server name :(\nI don't know why this was working before, though. That seems weird, since THAT part of the code hasn't changed in a long time.\n@rmccue opined this:\n\nWonder if it was changed as a side-effect of the wp-cli loading changes with wp-settings\n\nWhich is very possible. It's not setting the server name so it's going to fail :(\nCorrection, this is totally it. How do I know?\nwp user update 1 --user_pass=password --url=example.com works.\n. I think Ryan's suggestion about the WP-settings change is the culprit. I'm unclear on how WP-cli used to pick up or pass through the domain name, but at a guess here if you defaulted --URL to the value of the main domain (i.e. Site URL) wouldn't that cover this and pretty much anywhere else that WP thinks it needs a domain? It would also stop plugins like Postfix SMTP and others that call server name from failing. \n. I disagree (in part).\nYes it's a core bug, but in light of having the same flippin' argument on core (which I suspect will be \"It's command line, we don't support that, don't care\" or a remark of \"Well if you can't debug it...\" to me), would it not be best to have the discussion here so the full situation and possible direction of a fix be passed on, rather than just passing the buck?\nBecause it really sounds like you passing the buck (perhaps to me, perhaps to core) and sounding like you don't care. Which I know isn't true, but that's what happens when you say \"No support here.\" without doing the modicum of troubleshooting to actually determine where the issue is, so we (the community) can actually get the bloody issue fixed. Because as it stands? Core works fine and wp-cli is broken, no matter who is at ultimate fault here.\nSo. Knowing sod-all about this, I did some basic troubleshooting testing to figure out more of what's going on, in the hopes that a core patch can be applied.\n- WP 4.5.x - WP-CLI 0.24.1 - Works\n- WP 4.6.x - WP-CLI 0.24.1 - Fails\nThis lends credence to your claim of 'It's a core bug.'\nThe changes made here - https://core.trac.wordpress.org/changeset/38058#file0 - had to do with changing $phpmailer from using FromName and From to setFrom:\n$phpmailer->FromName = apply_filters( 'wp_mail_from_name', $from_name );\n        $phpmailer->From = apply_filters( 'wp_mail_from', $from_email );\nThose were removed. So I added them back in and commented out this: $phpmailer->setFrom( $from_email, $from_name );\nIt works. Why? Well ... get this. setFrom actually checks that the email is valid!!\nThis lends credence to my theory of \"Actually it's a wp-cli being cli bug.\"\nI think this has actually always been a bug in wp-cli, due to command line being command line, and we just never noticed because it was a silent fail.\nQuick edit: I did some echoing of output and it appears to always have been setting the email as wordpress@ even on WP 4.5.x!\n. I'll leave a comment in core trac. I am curious as to what unintended consequences? The only one that popped up is Multisite and activating plugins and themes, though I don't believe that would change wether or not you define the URL (i.e. it always default to mommy/main blog). But that's a different horse to chase down and well OT.\n. FYI this is the bug - https://core.trac.wordpress.org/ticket/37736\n. @shynii - The point is that WordPress itself isn't passing the domain to the $from_email variable.. Hey guys? Stop beating a dead horse.\nRead https://core.trac.wordpress.org/ticket/37736 - It's an issue in core. And Daniel instituted a fix in https://github.com/wp-cli/wp-cli/pull/3449\nUpgrade WP-CLI and stop posting here (Daniel, you may ask well lock this ticket since people aren't RTFMing). I ran this:\nwp core multisite-install --url=http://local.wp-cli.dev --title=\"Just Another WP Site\" --admin_user=admin --admin_password=password --admin_email=admin@example.com --skip-email\nAnd while $ wp option get site-admins is empty, I got this:\n$ wp super-admin add admin\nWarning: User 'admin' already has super-admin capabilities.\nNo changes.\nI added a second user (bobby) and ran this:\n$ wp super-admin add bobby\nSuccess: Granted super-admin capabilities.\nAgain, no output with wp option get site_admins but it totally worked.\nAnd this would be because the site_admins is stored in wp_sitemeta and not wp_options \ud83d\ude04 \nYou're looking for this:\n$ wp network meta get 1 site_admins\narray (\n  0 => 'admin',\n  1 => 'bobby',\n)\n. We chain commands at DreamHost, instead of an all in one, so that shouldn't impact us except in places where we're interactively running them (like a person would actually see the error).  I'm triple checking to be sure though :)\n. I (personally) would advocate for opt-in, given the general view of tracking in the WordPress community. That said, IF it stays, this is something that should be as loudly and publicly announced as WordPress' auto-updates. It's a massive shift and not something that should be swept under the radar. That said I know Daniel's traveling atm so I'm not saying OMG NOW! Just that this should be done before the code drops.. That query would be perfect.. ",
    "philcryer": "Sorry, had hit 'save' when I wanted to hit preview, question now explained.\n. This failed for me, as did the original with the --recursive flag because of an outgoing firewall rule. I reran the git clone via http with the flag while the firewall was disabled and it worked. Thanks\n. ",
    "SpikesDivZero": "Sorry, I should've been more clear. Total failure on my part!\nYes, I did mean wp user create.\nSeeing both this and #129 happen would be ideal, even if separately, would also be pretty awesome, but I understand that #129 may be significantly more complex.\nWith regards to the fix in #128, and with all due respect, I can't say I'm all too fond of that approach, as there's security implications with it. More specifically, when running interactively, passwords are logged into a plain text shell history file.\nJust my 2c anyhow, from my own historical no-goodery.\n. @danielbachhuber \n\n[...] how are your customers accidentally running WP-CLI as root? Should they have root access in the first place?\n\nCustomers may get full root access on VPS/Dedicated offerings.\nIt's human error to sometimes forget to \"su -s /bin/bash - USER\" (or whatever your preferred shell is) before running commands like wp-cli.\nEven beyond that, in the sections where customers can get root access to their boxes, we have posted warnings reminding/informing users of the dangers they may encounter. While I'd like to assume that users proceeding past this point would be knowledgeable about what they're doing, the reality is that while most are, this is not always the case.\n\nCould whatever problem you're seeing be solved at the host-level, instead of a one-off in WP-CLI?\n\nWe could do this in a system-wide wp-cli plugin, as we've done for some of our other needs. However, this issue may also affect anyone else who may unintentionally run it as root. (Other hosting companies' customers.)\nAlong this vein, I tried to make this patch as flexible as possible. If a user would like to pull a Leeroy Jenkins, it should be quite easy to add a --allow_root flag on the CLI. :)\n. Rename to --allow-root is done. I'll look into the before_wp_load bit later today.\n. > the check doesn't seem to be needed when running commands that have the @when before_wp_load tag\nI've replied to your email off-GitHub with my thoughts on this. Suffice it to say, it might tie the same already compromised install scenario we've been talking about.\nI don't really like forever-secrecy, so if/when this is merged, I'll share the details more publicly on this bug for other watchers to know exactly what I was bringing up.\n. Re: @when before_wp_load, per email, @scribu agrees that moving it down there isn't something that should happen. (Logging on the bug for reference.)\n. > For example, say you have Apache running under the www-data user. If you run sudo -u www-data wp media regenerate, then all the newly created thumbnails will still be editable from /wp-admin/, without setting extra permissions on them.\nYeah, I can certainly see this as being something that'd make sense.\nHowever, Apache should never be set to run as root -- most distributions include either a user specific to Apache for it to run under (httpd, www-data, apache, etc), and all of these users have a non-zero UID so wouldn't really be related to this PR as I understand it?\n. Unfortunately no, @nikolay. At the time this patch was written, WP-CLI didn't really have a flexible enough configuration system to say \"only allow setting this in a config file at the root-level\". \nI forgot to post a public description of the exact problem that this is meant to solve, so I'm writing that  up now and will update this again after a bit.\n. I hope this helps clarify the situation, for anyone stumbling across this down the road.\nScenario:\nA WP site is compromised, most commonly by either an insecure plugin or theme. The attacker gets filesystem access, and can upload/update arbitrary files. The attacker decides to update wp-config.php to contain some malicious code. I'll leave it to your imagination what you can accomplish from there.\nNext, a site administrator sees that their site is acting a bit strange, so they go to use wp-cli to troubleshoot/fix it. So they log into their VPS as root (because they don't know better), and start running commands.\nNow you've got malicious code able to do whatever it so pleases on the server, since it's being ran as root.\nWhy not allow a config file to specify allow-root?\nWP-CLI loads all config files at once, and composites them into a single config array. There's no option available, as best I could find, to say \"this setting should only be defined in a system-wide configuration, only writable by root\".\nWith this in mind, if we allowed setting allow-root=true in a config file, then an attacker could merely upload their own config file in the WordPress install's DocRoot, and they'd have effectively bypassed this sanity check.\nWhy not put the check_root after @before_wp_load happens?\nSimilar to the config file problem above, before_wp_load requires plugins as specified in a config file. This means that all an attacker would have to do to bypass this check is to tell WP-CLI to load an arbitrary plugin that the attacker uploaded.\n. You're right, it can and did break things for some legitimate use cases (see above where some consumers of WP-CLI had to adjust their tool chains).\nKnowing that there were some legitimate use cases, I tried to make the best compromise reasonably possible here -- adding an allow-root flag while having the error message as informative as possible (without being overly verbose).\nI wish there was a way not to break things in closing this hole, but it was inevitable in addressing a problem of this nature. =S\n. @bellwood \nPlease don't use the --allow-root flag without very good cause and a full understanding of the security implications it carries -- running untrusted code as root, no matter how much you try to lock it down, is an inherently dangerous proposition given the insanely brilliant creativity of attackers.\nTo expand upon that, however, let's offer a fairly small example...\n``` php\nUNTESTED\nob_start();\nThis file contains all the hashed user passwords. The security\nlevel of the hashing uses varies based on several factors, but can\nbe rather weak on some systems, meaning easy to crack hashes.\nGiven the importance of this file, it is only readable by root.\ninclude('/etc/shadow');\n$shadow = ob_get_clean();\nob_end_clean();\n```\nYou likely noticed that the functions I've mentioned above -- include and Output Buffering -- are required for WP to operate without issue.\nFrom there, an attacker has a few different options on how to ship the contents of the shadow file to a remote server, but really, any function that provides a way to make an HTTP request is more than enough. WP Core also makes simple HTTP requests as part of it's usual operations.\nNow, this is just one small but real example. There's so many more things one can do with just a little bit of creativity.\nIn choosing what to write here as an example, I had thought of a handful of far more dangerous potential examples that would work without issue in your sample scenario. (I hesitated to put any example here at all, but the use of OB functions with include is prior/known art.)\n. I opted to use posix_geteuid primarily for cross-platform support.\nI see that wp-cli has a bin/wp.bat, which suggests that wp-cli hopes to be cross-platform. Executing /usr/bin/id directly is not cross-platform, and may leak warnings/errors through STDERR, in addition to having possibly undefined behavior. (I say \"may\" since I don't use Windows enough to speak to this definitively.)\nI am unfortunately fully aware that PHP's POSIX extension is hit and miss. While they're enabled by default for PHP builds in POSIX-like environments, they are sometimes disabled by distributions.\n. If you're running as root, neither sudo nor su will ask for a password.\n. ",
    "trepmal": "Ah - missed that wp theme update-all command, must not have run help after updating. Silly me...\n. Yeah... I didn't love that either, but from what I can tell there's no convenient way to do that on a role-by-role basis. I'll take a closer look and see if there's a nicer way handle it\n. Updated to rely on populate_roles(). I'm not sure of the best way to verify a role has been reset, so its still just assuming it was successful and outputs a success message at the end.\n. Sorry to take forever.... Wanted to try my hand at the Behat tests, hopefully I got it\n. Thank you @scribu. I've made the recommended changes. \n. Added several tests. Can certainly remove and/or improve some if that's better - I'm still getting used to behat...\n. Looks like what you're looking for is part of the term subcommand. For example (from wp help term create):\nwp term create category Apple --description=\"A type of fruit\"\n. Hi,\nYou can set it via the theme mod command, for example:\nwp theme mod set background_image http://webdesignledger.com/wp-content/uploads/2009/09/pattern_places_9.jpg\n. I also noticed this recently when using wp import\n. Just adding an elif block fixed it for me. If you want to check it out before I get around to a pull request, see it here https://github.com/trepmal/wp-cli/commit/81d15849f6917d67d21acdad3db50ccf83439f13\n. I'd like to see 4.0 features included as well. I agree with @szepeviktor, I think wp-cli managed sites are more likely to be up-to-date.\nI also think it's easier to roll back to an earlier version of wp-cli for an old WP site than to have to install community commands separately for an up-to-date site.\n. For what it's worth, I have https://github.com/trepmal/wp-cli-unconfirmed-users\n. Don't forget the double hyphen before dbpass,  --dbpass\n. Any chance the $plugin variable is sometimes empty? Alternatively, what happens when you unquote $plugin in the install line?\nWhen I run wp plugin install \"\" (need the quoted empty string), I end up installing the first result of \nwp plugin search \"\" which not long ago had super-emoji-plus. \nEdit: Looks like $force may not be set? in which case you'd be passing an empty quoted string to the install command resulting in what I describe above.\n. @jschank I should have made my comment edit a reply so you'd get the email notification...\n\nEdit: Looks like $force may not be set? in which case you'd be passing an empty quoted string to the install command resulting in what I describe above.\n. I'm going to sneak some help in, but Github issues aren't for general support questions anymore. There are other venues you can try: http://wp-cli.org/#support\n\nYou can pass posts_per_page to wp post list \nwp post list --format=ids --posts_per_page=30\nI do not know off-hand what the maximum number of arguments is.. Can I ask what version of wp-cli you're using? Help info looks okay on my end (WP-CLI 1.1.0-alpha)\n\n. > majority of users only know some smaller subset of what WP-CLI is capable of\nAbsolutely. For as much as I love and use WP-CLI, I know there's stuff that I don't even realize is there, let alone newer and more casual users. But I don't know that these are the users that are going to take a survey though (just a feeling, I have no evidence to back this up). \n\nIf we can increase their awareness of what's possible\n\nI'd love to see this. On my own, I've made some attempts to get more people interested (occasional blog post, WordCamp talk... been meaning to do more/better). Are there specific ways you saw this happening? . This could certainly be made clearer. I'm assuming that if someone is doing wp search-replace orange orange they're trying to safely test how many replacements will be made. Suggesting --dry-run in the hopes they'll adjust their command to wp search-replace orange apple --dry-run\nPerhaps instead of 'Use --dry-run', (which could imply rerunning the command with that tacked on at the end) it should be a little less forceful, like \"See the --dry-run option\"\n. ",
    "ericmann": "\nShouldn't that be > 1? \n\nNo. You need at least one argument before you can select the element at index 0, so the size of the array must be >0.  You could also do >=1, but a strict >1 will not work.\n\nThis has nothing to do with the proposed fix, so it shouldn't be in here.\n\nFair enough, but Github wouldn't let me cherry-pick changed files from within a commit for creating a pull request. Feel free to ignore/revert the change to .gitignore But ultimately that change won't affect anything anyway.\n. In that case, yet, you'll need to use count( ... ) > 1.\nI didn't catch that it was a multi-line conditional, so I didn't see that we were checking self::$arguments[1].  New commit should fix this (and removes the change to .gitignore to keep things clean for other repos).\n. Done. And totally my bad. Not sure why my repo didn't track with your merge, tho ... never run into that before.\n. > wouldn't it be better to start with git clone\nThat depends. Using Composer, we can assume packages are hosted on Packagist. Using Git, we'd either have to specify the hosting repository or mandate something like GitHub (i.e. no in-house packages, no Gitlab, no Bitbucket).\nIf we want to keep the installation command simple, we need to stick with a single repository hosting them. Whether this is GitHub or Packagist doesn't matter too much ... it's just that Packagist is \"the\" source for Composer packages while GitHub is just one of many for Git.\n. ",
    "jjeaton": "I believe this is because there's no wp-config.php file for wp-cli to get the database connection info from. I get the same error when I run wp-cli without having MAMP turned on.\n. ",
    "mliao2": "@jjeaton is correct, wp commands only work if there is a wp-config file.\n. ",
    "tolgap": "Yes I'm using the lastest git version. Right now, it's just in the /commands folder with all the other internal commands.\n. The problem seemed to be extending the Plugin_Command class. I extended the WP_CLI_Command_With_Upgrade, and implemented the methods. This seemed to help my issue. I also made it a WP Plugin.\n. It could be possible that the php-cli-tools have a better way with dealing with aligning text. If that's possible, this line could be improved using the php-cli-tools way.\n. That should be a different issue on itself. This one was specifically opened for plugins.\n. I would gladly like to contribute to this. Will look into it today.\n. I cannot recreate that build failure. I ran vendor/bin/behat and this was the result:\n44 scenarios (44 passed)\n390 steps (390 passed)\n12m49.834s\nAlso, when I run wp help I dont get such a warning.\nI will update the man pages and look into the functional test for them.\n. Without the flag would make the code simpler and the changes less drastic. (if they are considered drastic.) \n. Gotta install some must use plugins and sort that out. Will get to that tomorrow.\n. ",
    "davidfavor": "net1# pwd\n/cluster/vhost/dev.davidfavor.com/wordpress\nnet1# wp\nnet1# ll wp-load.php wp-config.php\n-rw-r--r-- 1 www-data www-data 3524 Dec 29 10:38 wp-config.php\n-rw-r--r-- 1 www-data www-data 2408 Oct 26 14:40 wp-load.php\nNo database tables are installed, as I'm planning on using wp\nto auto Wordpress installs.\nSo are you saying wp only works for fully installed (tables installed)\nversions of Wordpress?\n. wp core install seems to fix the problem.\n. The problem is with Wordpress using the ridiculous '@' shut-up operator\nto mask pure coding.\nWhen xdebug.scream is turned on (which disables all shut-up operator suppressions)\nthe warning is generated.\n. This Wordpress bug has been fixed in the dev tree now.\nhttp://core.trac.wordpress.org/ticket/23093\nThis fix will propagate as part of WordPress-3.5.2 so this ugly traceback will disappear from wp-cli shortly.\nWhew...\n. Better to use the existing /etc/mysql/debian.cnf on Ubuntu + Debian + the RedHat/Fedora equivalent, if there is one.\n. That's complex, because I require testing a ticket I fixed in Wordpress...\nSo you're saying wp-cli fails when using a local copy of wordpress (via tar extract).\nThink I'll just patch wp-cli with install.php + retest.\n. Clarify how this is managed via wp core download... this meaning WP version + changed files.\nMaybe I can figure out how to work around this.\nThanks.\n. Looks like maybe all that's required is adding in the setting of some option via...\nwp option add $something\nIf this might be a fix + you have an idea what option to set, pass it along.\nThanks.\n. Ah I see... you mean when you hit the core API service... http://api.wordpress.org/core/version-check/1.6/...\nBTW, you might go ahead + bump the version-check rev from 1.5 to 1.6 in php/commands/core.php to use latest API.\n. I must be missing something here, because php/commands/core.php includes wp-admin/includes/upgrade.php rather than running either wp-admin/install.php or wp-admin/upgrade.php directly.\n. This is still broken.\nIf there is a work around, please add all steps.\nNothing I do seems to actually update the .htaccess file contents.\n. Cristi Burc\u0103 wrote:\n\nNothing I do seems to actually update the .htaccess file contents.\nIs it updated if you change the permalinks from wp-admin?\n\nYes. Works fine from wp-admin.\nIf I camp on the wordpress directory with inotifywait, .htaccess just\nnever seems to change via wp-cli.\n. Works fine with sudo -u USER, so this is the workaround till bug is fixed.\n. Oh... Maybe what I did in the past is this...\n1) use svn to download a clone trunk\n2) zip up the directory (including .svn control directory) into something like svn-latest.zip\n3) wp core download --path=svn-latest.zip\nThen do - svn up + $site/wp-admin/upgrade.php - to upgrade site files + database.\nSomeone do let me know if there's a more correct or elegant way to do this.\n. Actually I misspoke. The --path argument specifies the target directory for where the WordPress install will be installed.\n. Okay... Here's how to do it...\n1) pull a copy of trunk somewhere\nsvn checkout --force http://core.svn.wordpress.org/trunk/ wordpress\nBe sure to pull into a directory named wordpress\n2) make a gzip tarball of this directory with correct language\ntar czf en_US-4.1-trunk.tar.gz wordpress\n3) move the gzip tarball to wp-cli cache\nmv en_US-4.1-trunk.tar.gz /root/.wp-cli/cache/core/.\n4) Then when doing an install, point to the gzip tarball.\nwp core download --version=4.1-trunk\n5) Then to update to latest SVN, just - cd WordPress-install-root - and do a normal svn up.\nI just ran through this process + it works great.\nAnytime an svn up is done, be sure to navigate to $site/wp-admin/upgrade.php to catch any database updates.\n. #3 sounds like a winner, as this likely resolves the partial updates masquerading a full updates.\nDaniel, Kudos to you for getting to the bottom of this gnarly situation.\n. Same behavior occurs for me using wp-cli-0.22 where steps are...\nwp core download\nwp core config ...\nwp core install ...\nVerify site is working...\nwp-cli.phar --allow-root rewrite structure '/%postname%' --hard\nResulting .htaccess file is empty.\nNavigating to Settings + Save creates .htaccess correctly.\n\nMy runtime environment.\n\nnet4-dev# osver\nubuntu-15.10\nnet4-dev# uname -a\nLinux net4.bizcooker.com 4.2.0-22-generic #27-Ubuntu SMP Thu Dec 17 22:57:08 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\nnet4-dev# wp core version\n4.4.1\nnet4-dev# wp --info\nPHP binary: /usr/bin/php5\nPHP version:    5.6.11-1ubuntu3.1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.22.0\n. Still not working for me. Steps taken...\nlxc-rmt-lightweight-vivid# export WP_CLI_CONFIG_PATH=/david-favor/etc/wp-cli/wp-cli.yml\nlxc-rmt-lightweight-vivid# cat $WP_CLI_CONFIG_PATH\n    apache_modules:\n        - mod_rewrite\nlxc-rmt-lightweight-vivid# wp-cli.phar --allow-root rewrite structure '/%postname%' --hard\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\nSuccess: Rewrite structure set.\nlxc-rmt-lightweight-vivid# cat .htaccess\ncat: .htaccess: No such file or directory\nMaybe there's other mandatory cruft required in .yml file.\nLet me know the complete + minimal .yml file for this to work.\nThanks.\n. So export WP_CLI_CONFIG_PATH=... doesn't work as docs say... Guess I can symlink a common .yml file into every WordPress directory. I provide High Speed WordPress Hosting in LXC containers, so symlinking is complex.\nTested...\n1) WP_CLI_CONFIG_PATH=... fails to work as stated in docs\n2) wp-cli.yml in WordPress root directory works\nThanks.\n. I've tried export WP_CLI_CONFIG_PATH + setting WP_CLI_CONFIG_PATH=... prior to command.\nNeither of these work.\nEnvironment variables are environment variables.\nAnd bash is bash.\nDifficult to imagine this is an environment problem.\nLet me know if there's a way to debug what's occurring + I'll report my findings.\n. Oops. Missed the trailing --debug...\nnet4-dev# WP_CLI_CONFIG_PATH=/david-favor/etc/wp-cl wp-cli.phar --allow-root rewrite structure '/%postname%' --hard --debug\nwp-cli/\nnet4-dev# WP_CLI_CONFIG_PATH=/david-favor/etc/wp-cli/wp-cli.yml wp-cli.phar --allow-root rewrite structure '/%postname%' --hard --debug\nDebug: Using global config from WP_CLI_CONFIG_PATH env var: /david-favor/etc/wp-cli/wp-cli.yml (0.013s)\nDebug: No project config found (0.015s)\nDebug: ABSPATH defined: /sites/drf/fastseohosting.com/wordpress/ (0.027s)\nDebug: Begin WordPress load (0.028s)\nDebug: wp-config.php path: /sites/drf/fastseohosting.com/wordpress/wp-config.php (0.028s)\nDebug: Loaded WordPress (0.319s)\nDebug: Running command: rewrite structure (0.32s)\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\nSuccess: Rewrite structure set.\nnet4-dev# ln -s /david-favor/etc/wp-cli/wp-cli.yml\nnet4-dev# wp-cli.phar --allow-root rewrite structure '/%postname%' --hard --debug\nDebug: No readable global config found (0.019s)\nDebug: Using project config: /sites/drf/fastseohosting.com/wordpress/wp-cli.yml (0.02s)\nDebug: ABSPATH defined: /sites/drf/fastseohosting.com/wordpress/ (0.038s)\nDebug: Begin WordPress load (0.039s)\nDebug: wp-config.php path: /sites/drf/fastseohosting.com/wordpress/wp-config.php (0.039s)\nDebug: Loaded WordPress (0.292s)\nDebug: Running command: rewrite structure (0.292s)\nSuccess: Rewrite structure set.\n. This bug is about - plugin install.\nPlease read the bug again. Plugin uninstall works fine.\nPlugin install is what's broken... either in wp-cli or WP core.\n. This behavior occurs first time a plugin is installed, so appears to have no relation to left over plugin residue from an uninstall.\n. Might be useful to mention how you installed wp.\nFor example...\ncurl -s -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nOr by other means. Using the http://wp-cli.org instructions (above curl invocation) resolved many challenges I was having.\n. Thanks. Be great if --config can be retained through future, as this is highly useful in situations where many 100s-1000s of WordPress installs are managed on a physical machine... and...\nDifferent config files are passed for different operations.\nThanks for your consideration of this retention request.\n. Hum... Appears --config no longer works... Refers users to use WP_CLI_CONFIG_PATH which seems to fail in some cases.\nnet4-dev# wp-cli.phar --allow-root --config=/david-favor/etc/wp-cli/wp-cli.yml rewrite structure '/%postname%' --hard --debug\nWP-CLI: The --config global parameter is deprecated. Use the WP_CLI_CONFIG_PATH environment variable instead.\nDebug: No readable global config found (0.019s)\nDebug: No project config found (0.02s)\nDebug: ABSPATH defined: /sites/ms1/liveallheart.com/wordpress/ (0.038s)\nDebug: Begin WordPress load (0.038s)\nDebug: wp-config.php path: /sites/ms1/liveallheart.com/wordpress/wp-config.php (0.038s)\nDebug: Loaded WordPress (0.273s)\nDebug: Running command: rewrite structure (0.273s)\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\nSuccess: Rewrite structure set.\nnet4-dev# cat .htaccess\ncat: .htaccess: No such file or directory\n. Identified problem.\nDebug file was set as...\nini_set( 'error_log', dirname(ABSPATH) . '../logs/wp-debug.log' );\nRather than this...\nini_set( 'error_log', dirname(ABSPATH) . '/logs/wp-debug.log' );\nThe first path is missing, so an error must have been generated which was quietly suppressed.\nUnsure of best message approach. Maybe including the entire error message generated, rather than just \"eval()'d code on line 95\" might speed up debugging.\n. davidsword wrote:\n\nThanks for your replies.\nAnyway I can pinpoint the connection/permission issues with my filesystem?\nI followed the instructions to a tee on reinstallation and it didn't \nwork out. I've been trying to resolve this for more hours than I'd like \nto admit.\n\nI host many sites in many LXD containers.\nHere's my setup approach to keep debugging simple.\n1) Install XDebug - On Ubuntu, apt-get install php-xdebug\n2) In xdebug.ini, ensure xdebug.scream = 1\n3) Do an Apache reload or restart (depends on your distro)\n4) Verify xdebug.scream == 1 for Apache, via phpinfo.php\n    file to dump your PHP environment\nEnabling scream short circuits the PHP '@' (shutup) operator, which\nsuppresses all manner of meaningful debug info.\nEnable WP_DEBUG.\nNow execute your failing wp-cli command(s) + refer to your WP debug log.\nLikely wp-cli will spew diagnostics or your WP debug log will contain\nwhat you're looking for.\n. aelsharawi wrote:\n\nHello\nI have a script that backups a wp-cli DB daily\nthe script runs fine manually (recived the backup sql) and when in cron \nit dosent backup the db (size always 20b)\nthis is the part tht belongs to WP-CLI\n|wp db export $BACKUPPATH/$s/$DATEFORM-$s.sql --allow-root --skip-themes \n--skip-plugins cat $BACKUPPATH/$s/$DATEFORM-$s.sql | gzip > \n$BACKUPPATH/$s/$DATEFORM-$s.sql.gz rm $BACKUPPATH/$s/$DATEFORM-$s.sql|\nI,m on centminmod with php 7 and nginx 10.12 with latest version of \nwp-cli and wordpress\nany ideas?\n\ngrep CRON /var/log/syslog or whatever file logs CRON events on your system.\nLikely this will turn up some good debug information.\nAlso, your command uses \"wp\" rather than something like \"wp-cli.phar --allow-root\",\nso... if \"wp\" is an alias + your root shell startup file only creates aliases if\nthere's a TTY (default behavior on most systems), then wp will never exist in cron.\nSimple test workaround, change \"wp\" to \"wp-cli.phar --allow-root\" + check syslog.\n. Ah... Let's make sure I understand... If this is returned...\nSuccess: Your one-time login URL is: http://wp.dev/wp-login.php?user_id=1&one_time_login_token=eb6f4de94323e589addb9ad3391883e1d6233bc3\nThen I'd use this one time login to reference a page by crafting a URL like...\nhttp://wp.dev/post-slug-name?user_id=1&one_time_login_token=eb6f4de94323e589addb9ad3391883e1d6233bc3\nLet me know if I have this correct.\nIn other words, trying to understand how to apply the token to any URL.\nThanks.\n. Nicolas Juen wrote:\n\nHello,\nYes unfortunately I haven't found a solution for the unit test, the \nopcache.cli_enable can only be changed on the php.ini file or in the \nhttpd.conf file. So it's not possible to do it.\nI have tried to make the Namespace WP_CLI before rewriting the function \n|get_cfg_var| but in the end, the Runner.php does not found the |WP_CLI| \nclass itself.\nSo I have included the |php/class-wp-cli.php| file at the beginning of \nthe file but not working either unfortunately.\n\nMaybe build a temporary php.ini file making any appropriate changes, then\nrun php as php --php-ini temp-php.ini file + then destroy the temp file.\nA bit ugly + likely this will work.\n. Problem: wp-cli attempts unpack files using tar -xJf which works for xz files + not for gzip files.\nSolution: Any .tar.gz file should use tar -xzf instead + likely all will be well.\nIn fact, likely best to write wp-cli to use a switch statement, so any known extensions will be correctly unpacked + if switch falls through, an exception is raised.\nThis will handle any future cases where WordPress might change their default archive format.. You might consider adding the question...\nHow many total sites do you administer with wp-cli?\nIn my case I'd have to could all sites for all clients, many 100s.\nThis data might give you a clue about people using wp-cli all day, every day.\nHaving a list of these people might provide you a way to reach out + gather more specific data from them, as I'm guessing data from these people might lead to more pervasive deployment into mass hosting companies.\nJust a guess.. ",
    "erwanlr": "What about replace that :\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L59-L61\nphp\nif ( WP_CLI::get_config('quiet') ) ob_start();\nrequire ABSPATH . '/wp-admin/setup-config.php';\nif ( WP_CLI::get_config('quiet') ) ob_end_clean();\nby this :\n``` php\nob_start();\nrequire ABSPATH . '/wp-admin/setup-config.php';\n$buffer = ob_get_clean();\nif ( false === strpos( $buffer, 'WordPress can now communicate with your database' ) )\n  # error\nelse\n  WP_CLI::success( 'Configuration created' );\n```\nAs I do not know how you handle a possible error from the setup-config.php, I've let a comment in the if section\n. The problem is that when there is an error in setup-config.php, it dies so the result is output and cannot be caught with ob_get_clean() :/\nATM, the code is this one :\n``` php\nob_start();\nrequire ABSPATH . '/wp-admin/setup-config.php';\n$buffer = ob_get_clean();\nif ( false !== strpos( $buffer, 'WordPress can now communicate with your database' ) )\n  WP_CLI::success( 'Configuration created' );\n```\nIf this behavior is suitable for you, I can send the push request\n. +1 with that :)\n. Unfortunately, I do not have the time to switch to my dev machine to do so\n. Well, it's worse than expected :p\nThe --path option is not even in the $assoc_args\nI've put a var_dump($assoc_args) to see it's content\nwp core download --path=wordpress351 --version=3.5.1\narray(1) {\n  [\"version\"]=>\n  string(5) \"3.5.1\"\n}\nSo, there is something wrong somewhere else :p\n. That leads to another issue :\nphp\nvar_dump(ABSPATH);\nwp core download --path=wordpress351 --version=3.5.1\nstring(13) \"wordpress351/\"\nwp core download  --version=3.5.1\nstring(35) \"/home/tests/wp-cli/test-core/\"\n. w/o the --path option, ABSPATH is an absolute path - no problem with that\nhowever, with the option, it's a relative one\n. php\nprivate static function set_wp_root( $config ) {\n        if ( !empty( $config['path'] ) ) {\n            define( 'ABSPATH', rtrim( $config['path'], '/' ) . '/' );\n        } else {\n            define( 'ABSPATH', getcwd() . '/' );\n        }\n    }\nShould be something like\n``` php\nprivate static function set_wp_root( $config ) {\n        $path = getcwd() . '/';\n    if ( !empty( $config['path'] ) )\n        $path .= rtrim( $config['path'], '/' ) . '/';\n\n    define( 'ABSPATH', $path );\n}\n\n```\nHowever, as there is not test for the Runner, I do not want to break something :D\n. I'm currently fixing it :p\nWill send a pull request in a few minutes\n. It fails because of this :\nphp\n        if ( false === strpos( $command, '--path' ) ) {\n            $command .= \\WP_CLI\\Utils\\assoc_args_to_str( array(\n                'path' => $this->install_dir\n            ) );\n        }\ne.g : when the command has a pipe like wp user list | wc -l, the --path is not at the right place : wp user list | wc -l --path='/tmp/wp-cli-test-512dd489ed31d3.92337052'\n. Just one thing about your commit : you must create the ABSPATH is it does not exist ;)\n. rha, it has included the other one grrr\n. Now it's clean :)\n. That's strange, it didn't work yesterday, now it is oO\nSorry for that\n. Arg, I didn't see that one\n. After further investigation, the email is not set, but the user is created in the db :o\nThat's disturbing for a required field oO\n. ",
    "drrobotnik": "Tested and that worked. I also replaced all the commented lines to #.\n. True, I was thinking it could include any sorts of things like default admins UN, PW, email. DB host, permalink construct. Like the general stuff that's pretty consistent. But a bash script is doable, pretty much what I've started now.\n. I think Underscores has something behind the scenes set-up already. Their online form allows you to add your project slug, author name, description, which get applied throughout the files (prefixing functions).\nIn the meantime, for underscores specifically, I just curl the form and extract it into my themes folder so I start out with all the beneficial prefixes.\n. So in your brunch example:\nThe theme author would include whatever prompts he wants? Would the template files that get pulled in be run through eval() in order to apply these optional parameters? Then in a sense you could build your skeleton with handlebars style variables, which is already a wp-cli dependency. Is that what you were getting at?\nIf so how would your config file be organized. I really like how brunch configs are light JSON.\n$ wp scaffold theme --skeleton=https://github.com/Automattic/_s\nTheme Author: \n$ drrobotnik\nAuthor email: \n$ me@gmail.com\nGive me a site prefix [_s]:\n$ sheen_\nskeleton.php looks like:\n{\n    \"require\": {\n        [\n            \"description\": \"Theme Author\",\n            \"default\": \"\"\n        ],\n        [\n            \"description\": \"Author Email\",\n            \"default\": \"\"\n        ],\n        [\n            \"description\": \"Give me a site prefix\",\n            \"default\": \"_s\"\n        ]\n    }\n}\n. _s doesn't really have any public facing scaffolding, do they? Either way, I'm fine with picking a different theme. \nMy thought is that if every developer builds their own method of configuration won't that quickly scale up away from being just a skeleton theme? I'd think it'd be easier to do some hand holding. At least in V1.\nMy example above would need some modification, but you could set-up your skeleton theme in this way:\nfunction {{slug}}_widgets_init() {\nregister_sidebar( array(\n    'name' => __( 'Sidebar', '{{slug}}' ),\n    'id' => 'sidebar-1',\n    'before_widget' => '<aside id=\"%1$s\" class=\"widget %2$s\">',\n    'after_widget' => '</aside>',\n    'before_title' => '<h1 class=\"widget-title\">',\n    'after_title' => '</h1>',\n) );\n}\nadd_action( 'widgets_init', '{{slug}}_widgets_init' );\n. submitted https://github.com/wp-cli/wp-cli/pull/285\n. I was able to change the shell_exec into wp_remote_post, but I don't have any experience unzipping files and removing the leftover zip.\n```\n$body['underscoresme_name'] = $data['theme_name'];\n$body['underscoresme_slug'] = $theme_slug;\n$body['underscoresme_author'] = $data['author'];\n$body['underscoresme_author_uri'] = $data['author_uri'];\n$body['underscoresme_description'] = $theme_description;\n$body['underscoresme_generate_submit'] = \"Generate\";\n$body['underscoresme_generate'] = \"1\";\n// Request Array\n$request = array(\n    'method' => 'POST',\n    'body' => $body,\n    'sslverify' => false\n);\n$result = wp_remote_post('http://underscores.me',$request);\n//shell_exec($prepare); // Don't know the WordPress way of doing this.\n\nif($result['response']['code']==200)\n    $theme_zip = $theme_path.'/underscores.zip';\n    $this->create_file( $theme_zip, $results['body'] );\n```\n. Okay, my remote post is working but $this->create_file( $theme_zip, $results['body'] ); Is just creating an empty file.\nIf I echo out the second parameter it's not empty. Am I using create_file incorrectly?\n. I had trouble unzipping and activating the theme through the wp_cli class. It kept saying theme not found in the WP repository. I assume this is because WP doesn't expect the file to be living outside the install? Either way I used the unzip_file function and reverted the activate to how I had it originally.\n. Added man-src page, and fixed those formatting issues. I'll try to be more consistent. \n. Fixed that, but I also get:\nWarning: unknown --author parameter\nWarning: unknown --author_uri parameter\nNot sure why, they pass through and are applied correctly.\n. Running like a champ now!\n. I guess I didn't. Fixed the undefined. My fork is a little behind, i have a doing_it_wrong notice you've fixed in wp-cli:master i assume if my addition is merged that wont cause any problems?\n. Nice!\n. +1. Maybe an --interactive flag, that prompts with sensible defaults? Similar to Yeoman:\n\n. The interactive flag would be optional, and they'd have to have sensible defaults set, so you'd just hit enter unless you needed something different. Also with a bit of conditional logic you could slim down the prompts. For example for post types, if you chose --show_in_menu=false, you don't need to ask [--menu_position] and [--menu_icon]. I could further slim it down by pre-entering the ones I remember off the top of my head:\nwp scaffold post-type projects --interactive --singular='project' --description='list of my projects' --has_achive=false\n. It does not have a wp-config file.\n. I've investigated the issue a little bit more. And part of the issue was I wasn't grasping how wp db create established the user credentials (from the wp-config file). Now knowing this, my problem is not solved because I actually have a wp-config file one level above. So when I run wp core config --dbuser=x --dbname=x it throws an error that my config file already exists one level above. wp db create should check one level up for config files similarly to the how the core does.\n. Not an error with wp-cli. It was an error with my code selecting the db in my parent wp-config file. I was using $_SERVER['PHP_SELF'] to grab which local site needs credentials and grabbing my db name based on that. This isn't set, or is set differently when you run wp db create. Sorry for the distraction, hope my explanation helps someone making the same mistake.\n. Nice! I haven't been following for awhile, didn't know that was an option.\n. I think it should be since the slug is used to generate prefixed function names and the themes name can potentially be long and impractical as a fn prefix. --theme_name is only used in the doc block, so it wouldn't be too much of a hassle to adjust if it forgotten.\n. Yes, it's me. Should I have placed this issue in #285?\n. Yes, the slug is mandatory, but we're picking it up through the theme name if it's not present. Part of the original issue was that I was getting unexpected results. I'd rather it not take the slug from the theme name and return an error w/explanation.\n. Okay, I ran through and you're right. I've fixed the script I use to include quotes, so I shouldn't have this issue anymore. What's the conclusion? Is it fine to leave 'sort of working when you do it wrong' cases out there? I doubt this is high priority just wondering. I don't mind closing the issue.\n. My first instinct was to change it to a flag, but stopped because what you described.\n. Mine were prettier...\n. check the output of $_SERVER['DOCUMENT_ROOT'] when run through cli. Sometimes it's blank or different than when used through http request. It would probably install the theme higher up your server path within a themes folder.\n. ",
    "v9n": "Thanks @scribu \nThis makes sense.\n. ",
    "gabrielstuff": "yup ! \nthis work\nI should have remove with\nsudo pear uninstall wpcli/wpcli\nThanks !\n. ",
    "TechnologyArchitectureLLC": "or maybe just :transparent; the background? not sure... just started messing with this feature\n. ",
    "daithi-coombes": "@scribu\nwe need this feature for our current multisite blog (see reference above from @ryanholder). Am going to contribute a PR for this issue and hopefully have this feature ready for merge by the end of the day.\nThe command line format I'm looking at, and also taken from #40\nbash\nwp search-replace foo bar --multisite #search all tables for all blogs\nwp search-replace foo bar --blog_id #search for tables within specific blog, error report if not multisite install\n. sorry the reference above was from a private repo, didn't realise it at the time. Basically I'm working on implementing a multisite search-replace feature and would like to contribute a PR of the code but need permissions. The feature branch I have currently isn't ready for merge just debate (I have a feature test as per CONTRIBUTING.md, but its failing - behat is unkown to me and looking at the current unit tests i'm not sure if this would require one?)\n100% agree about the --blog_id, missed that. \nCan't find a dynamic method of pulling all multisite tables, such as $wpdb->tables so I am thinking of looping through the sites to build unique array from site\\$wpdb->tables then merge a fixed array of multisite table names as per multisite tables v3.0+, unless better method arises. Just short of permissions to push if all is ok.\n. @scribu I have tested this by changing a username and blog name, and checked that the text/varchar fields are used from each table. Think this PR maybe ready for a merge or the next state\n. @scribu sorry, think I might have merged with master twice after you. Got numerous errors when trying to merge the pr with remote/master, hope its all working (sorry if i've given you extra headache there)\n. typo:\ngit: 'ci' is not a git command.\n. also from git reset remote/master\ngit reset remote/master\nfatal: ambiguous argument 'remote/master': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]'\nmy config:\n[core]\n        repositoryformatversion = 0\n        filemode = true\n        bare = false\n        logallrefupdates = true\n[remote \"origin\"]\n        url = https://github.com/daithi-coombes/wp-cli.git\n        fetch = +refs/heads/*:refs/remotes/origin/*\n[branch \"master\"]\n        remote = origin\n        merge = refs/heads/master\n[branch \"multisite-find-replace\"]\n        remote = origin\n        merge = refs/heads/multisite-find-replace\n[remote \"upstream\"]\n        url = git://github.com/wp-cli/wp-cli.git\n        fetch = +refs/heads/*:refs/remotes/upstream/*\n. looking at the network chart not sure if that went through right?\nhttps://github.com/wp-cli/wp-cli/network\n. sure I have time. Will start on it imediately\n. I have added wp_2_options:value to the feature check, and now tables with primary key are skipped and this is reported in the table printout.\nOne issue is that its failing the CI test (the 3rd ci test) but I can't recreate the failure on my machine\n. ready for review,\nif go-ahead, then i'm gonna:\nbash\ngit fetch upstream\ngit reset upstream/master\ngit commit -am \"merge msg\"\ngit push -f\n?\n. done ;) Cheers for the tips, especially commenting the \"why\" and not \"how\", learn something new everyday\n. good point, lol. Replace ABSPATH with ../../../\ncool I'll create a feature branch\n. @scribu \nseems WP_CONTENT_DIR and WP_PLUGIN_DIR aren't available either\n. true. We could default to the hard-coded path and have the option to set the env var so users can then run tests against different unittest suites if they like, then non tech users would still be able to run the tests without messing with env vars?\n. Good point about version control. Will revert to just adding the throw\nexception.\nOn Jul 4, 2013 10:17 AM, \"Cristi Burc\u0103\" notifications@github.com wrote:\n\nThat hardcoded path would end up under version control, which is ugly\nand it would subtly discourage collaboration.\nAlso: \"Non tech\" users don't need to run unit tests.\nOn Thursday, July 4, 2013, daithi-coombes wrote:\n\ntrue. We could default to the hard-coded path and have the option to set\nthe env var so users can then run tests against different unittest\nsuites\nif they like, then non tech users would still be able to run the tests\nwithout messing with env vars?\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/wp-cli/wp-cli/pull/569#issuecomment-20466576>\n.\n\n\nhttp://scribu.net\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/569#issuecomment-20467133\n.\n. I'm wondering if trying to use subdomains on localhost could be the issue?\n\nJust notice on manual installation wordpress forces sub-directories...\nBecause you are using localhost, the sites in your WordPress network must use sub-directories. Consider using localhost.localdomain if you wish to use sub-domains.\nI'm thinking a warning should also be given in wp-cli?\n. cool.\ncan take ownership of this as well. \n@danielbachhuber just gonna go through my last contribution first, refresh my memory ;)\n. - for reference *\nthere is a solution involving editing the 'hosts' file to give localhost a tdl here:\nhttp://wpdreamer.com/2013/08/how-to-setup-a-localhost-wordpress-sub-domain-multisite-environment/#edit-hosts\n. sorry, had to deal with unexpected bottlekneck.\nyep I'd created the pr first for discussion, will be working on it today/tonight.\n. @danielbachhuber \nI've placed the warning immediately after $domain is defined. This should catch both Core::multisite_install() and Core::multisite_convert().\ni'm ready for merge\n. will do, ill be finishing this later this evening\nOn Dec 5, 2014 11:33 PM, \"Daniel Bachhuber\" notifications@github.com\nwrote:\n\n@daithi-coombes https://github.com/daithi-coombes Looks like you need\nto debug why your test is failing.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/1522#issuecomment-65871655.\n. perfect ;)\n. just noticed... if a user's password hash contains the keyword being replaced then there will be login issues. Is there currently a blacklist of tables:cols?\n. \n",
    "mpeshev": "I'm interested in that, but I'm not sure what would the process look like. \nMy ideas are mostly related to 1) placing an empty (or almost) index.php with a scaffolded style.css (maybe with reset styles, or blank), or rather 2) use a base theme such as _s or other blank startup theme for that (which could basically be done with the theme installer).\n. So, using that scaffolding command with the possible slugs/names, downloading the theme and running replace on all templates? Is it to pull the zip from GitHub or reusing the underscores.me service with form submission and getting the theme ready?\nI can poke that over the weekend, if it's not too late, as soon as we agree on the approach.\n. So, any real decision on this one?\n. Do you get this issue running any other WP-CLI command?\nI get warning/notice messages when I run anything whenever my site has a broken theme/plugin which is not related to WP-CLI in this case. Is your site throwing errors in the error_log when you browse the site?\n. For the record, I was playing with this today on a WP 3.2 installation. wp core update failed, but wp core download --force and then refresh of the site worked for me.\nWhen I tried to run wp core update-db after wp core download --force, it failed to update it (I got success message, but site was still feeling like 3.2). When I ran wp core download --force right after the update-db call, it was back on track.\nIt's not a great behavior and it might not work always, but it's good to note that an update process from 3.2 to 3.6 is still possible with this (I tested it twice) so we could either try to reuse it with some experimental argument, or document it (until a possible upgrade of the updater)?\n. I think it's a good idea to place it there, yes.\n. I've added a paragraph on that based on my experience, does it sound well-structured enough?\n. It doesn't make sense to me, but it worked that way 2 times in a row. I could use another test for confirmation, it may be system specific or cache related.\nI could try next week, if it works (either way) is it worth to introduce a helper command that runs these for older versions to avoid the big refactoring?\n. As a matter of fact, it all runs smoothly once you comment out The error call. 3.2 went to 3.6 in seconds with a single step.\nI'm not fully aware of the entire flow of operations so not sure how could this be disabled only for the update command (because it happens before executing the command code itself).\n. Maybe we could add some input arguments to make this check_wp_version call optional?\n. Confirmed - 2.7 won't do wp core update.\nThe wp core download --force + wp core update-db worked without a second wp core download --force for 2.7 to 3.6 though.\n. Since you seem open to the general suggestion for caps, I'm going to try to prep some test cases tomorrow :) I have Behat and Mink, but I am not very experienced there and will try to come up with some samples.\nTwo questions:\n1) Would it make sense to replicate that functionality for roles too? add_cap/remove_cap work on both user and role levels.\n2) I didn't see a lot of verification on the input data in other callback functions, is there any working mechanism (as a pattern in the code used already) to check for, say, the number of args, or their type or anything like that?\n. Don't we already have wp user set-role etc.?\nI was actually thinking about wp role add-cap instead, if it makes sense.\n. I have tried to define some test, but most of the previous tests get skipped so I can't really verify on my end - is that essentially what needs to be done/added?\n. I would assume it's something in my setup. I have all the tools set, together with the test database as described in the docs.\nHowever, running everything I get:\n70 scenarios (6 passed, 64 failed)\n612 steps (56 passed, 492 skipped, 64 failed)\n1m25.659s\nIf I only call ./vendor/bin/behat /features/user.feature then it would skip 45 out of 50 as well.\nAs I said earlier, I'm not experienced with the testing process with Behat so it's quite possible to get that on my setup only.\n. Hey scribu, anything else needed on my end? Not sure if it's good to merge now or I need to edit something.\n. Sure, just wasn't sure if there is any blocker from my end. Thanks.\n. Added some conditionals. I think there are some other cases that require some checks here and if I find them, I'll submit few more improvements as well.\n. Fixed with pull request 653\n. That if ( thing is counter-intuitive for me, but standards are standards - and thanks for the exit(1) hint\n. better?\n. Sure thing. I'm still green with Behat and not sure if I'll be able to run these tests properly, but will give it a shot and ask for opinion later today.\n. I'm not sure I understand - I have only one scenario on the tests and that's what I see here, or am I wrong?\n. Finally understood, this one should be from my working repo so it should be fine\n. I don't get notifications, just can see the red/green light next to a pull request whenever I refresh. Was able to test locally and had 8 passed this time, should be good.\n. @danielbachhuber commented in your PR, also created it for a use case of mine here based on the Roles' exists function (as mentioned in the PR description).\n. Will tackle it later today or tomorrow\nsent from Android\nOn 8 Aug 2013 23:00, \"Cristi Burc\u0103\" notifications@github.com wrote:\n\n@mpeshev https://github.com/mpeshev, since you'd be able to see if it\nhelps with the certificate issue, if you would like to tackle this, it's\nall yours.\nIf not, I'll get to it eventually.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/654#issuecomment-22351141\n.\n. Currently it's part of the $ignored_keys in the validator, FYI.\n. Would something like that make sense for ignoring the ignored keys whenever the Synopsis value is not optional?\n. @mpeshev That seems like the right direction.\n\nIt works for me, and it seems okay for being non-restrictive to other arguments. The way I see it is that Synopsis should be able to override the default ignored values if it's explicitly setting required arguments.\nLet me know if you want this as a pull request or any modifications there.\n. I'm currently tracking where they are lost, now browsing the Runner as it's invoke() doesn't read the --url as an incomming argument. Will track it down and submit an update for the next deployment test.\n. Correct me if I'm wrong, but I think the argument is getting lost here as it is reserved for other actions. I didn't see it being registered as an argument outside of the core command and it's getting parsed as an invalid argument.\nIf it's being used somewhere else (I'm not aware of all internals) maybe we could rename it? Otherwise the parser should be tuned to understand whenever there is an incoming url attribute for the core commands.\n. @danielbachhuber that's what I was saying, my link is from the next step in the stack after yours. It's a key in $this->spec which has this data on my local setup and ignored as an $assoc_arg for that reason.\n. I can't reproduce the problem with latest version and the format seems OK to me, which WP-CLI version are you using?\nYou could test calling wp --version.\n. I use the master version (which is the same) and it works for me. Maybe\nanother test case from other user would help\nOn Tue, Aug 13, 2013 at 5:14 PM, Michael McNeill\nnotifications@github.comwrote:\n\nWP-CLI 0.11.0-alpha2 is the version I'm using.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/668#issuecomment-22567625\n.\n. I love that improvement. Could help with PR proposal tomorrow if you need help.\n. I agree with the concerns @scribu outlined in the comments above, but not sure if they have to be a stopper for the overall implementation. At some point it might be better to have this working for most commands, but still curious on what mandatory arguments/flags should be handled and how. \n\nGiven the fact that we have a non-prompt option available, I think we're good to merge that even if it's not the 100% supported option for now (there is a proven working plan B either way).\n@scribu I know that most of the code is still using trim( fgets( STDIN ) ) (as is @danielbachhuber's read), is cli\\input() a less elegant solution to avoid?\n. @danielbachhuber I understood your initial idea and I thought I could implement ask() first (to be used later when needed) and try the concept for a given function I needed.\nThe problem I got with the Synopsis solution were asking questions such as:\n1. Is the prompt for all required params, or not?\n2. What message should be printed for these params? Is it all the same or should be different for some commands?\n3. Should we manage some arguments separately?\n4. Do we need additional syntax for 1) and 2)?\nI might be wrong, but I think that the extra abstraction layer here could lead to other complications.\n. Looks good to me, except for the theme slug used for the demo (based on the Travis run).\n. I'm probably wrong, but I think it's related to strtotime and dates after 2038. @Rarst I was able to reproduce it with a normal import so it's related to the updated import data (recently they've changed a few versions consecutively).\nI filed a ticket on Trac - may not be in the right direction, but that's what I found while browsing around for that issue.\n. Moslty nasty date issues in other programming languages, but got into some late debugging into Rarst's report :)\n. The Test data has been updated today so at least the standard import process should go with no bugs for now.\n. Yes, totally hardware/PHP/WP Core related but not WP-CLI in that matter. Also, whenever you and Otto migrate to some Unix-based OS, every software would work as a charm for the entire WP community. :)\n. On a semi-related note, is there a way to pass another $_ENV array or a user to fetch variables from? As in calling a process from another user or just overriding some variables?\nI have specific paths set in my ~/.bash_profile including an override of the default mysql paths. However, WP-CLI is opening a process with another user which leads to other results (in my case - broken command because mysql is called from the wrong place).\n. I didn't explain the user thing properly, it's clear that executing as another user would be impossible in terms of security. I was referring to adding some user specific arguments before calling the command in question. Some distros have different sudo policies as to who can sudo what and how (as in by default you might be unable to sudo your own user unless allowed in the sudoers files) which is an extra complication to running the command.\nI guess it's not a major concern and we could leave it as is for now.\n. Now I think it might be related to the fact that wp-content is outside of the WP directory. It works for the other plugins and wp plugin list returns the results, but the installer says that the directory no longer exists.\nIt still works for the other plugins, maybe some edge case with timeout + trying to install in the wrong place after that.\n. I was able to update properly now, my only guess leaves the timeout issue with incomplete or wrong download after some time (when the connectivity is wonky and it takes longer to download).\n. Just as a note, I could test this if needed since I can reproduce the certificate issues.\n. @scribu I tried that, but I found another issue.\nI don't get the warning with the current version of the file. However, now it turns out that verify was set to false by default. If I add 'verify' => true to the options array above the call and I use your warning, I get the following message:\nDownloading latest WordPress (en_US)...\nWarning: cURL error 60: SSL certificate problem, verify that the CA cert is OK. Details:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\n. @rmccue is verify false by default in the new version? I am sure that it was true when I was testing it two months ago. Might be the global WP-CLI setup or some local issue, but it was always falling in the catch before since the verification was enabled.\n. Almost ready, commented in the last commit\n. @rmccue your solution might as well be correct.\nYour default verify is using a decent certificate so I assume that in practice this could work. Given the tests above my warning wasn't displayed, but testing it now it seems that it doesn't fall in the catch block either, ergo the request should be successful. \nSwitching true/false is deceptive as your verify allows for a certificate link, therefore if we remove the last commit by @scribu then Requests would use a certificate and the code should work for as long as the certificate is legitimate. \nIt could probably get another test or two, but looking at your code it makes sense to me now :)\n. Ryan's test case was related to folders with space, so any ABSPATH including a folder with space would do, not sure if the test cases could override a define though.\n. Somewhat related - #566 \n. I tried to use the Utils class functions as said above to display it as a table with cap -> true/false or anything like that, but I can list them per line in a few min\n. the message is still there, but the caps are on a new line each, still up for dropping the notification message?\n. Didn't we discuss using both error and success because that's how I read it in the issue for roles?\n. Yeah I decoupled it to avoid displaying a \"comment exist\" success message for each approve/unapprove call without having to use extra arguments :)\n. We played with few options here but Travis didn't feel like accepting that, also dev-master seems \"work in progress\" to me too - any chance a static version could be used (like 1.5.0)?\n. forgot to mention that in the comment. Wasn't sure if it has to reuse WP_CLI::line as well, should it?\n. ",
    "evansolomon": "Feel free to use/borrow/steal at will.\n. ",
    "brainysmurf": "For posts created this way, when you look at the post in the wordpress backend it doesn't seem to indicate that it has been scheduled in any way, simply published. Previous wordpress versions worked as expected: it showed up as scheduled.\n. Well that's embarrassing...\n. ",
    "zamoose": "So here's the problem: there are two ways of enabling APC -- for the web runtime and the CLI. They're enabled separately (see http://www.php.net/manual/en/apc.configuration.php#ini.apc.enable-cli for enabling for CLI). I think this is a bad check and it's killing our ability to use CLI on servers with APC enabled. This needs a different approach.\n. That, or dump with an error but add a flag similar to --allow-root.\n--allow-apc?\nOn Fri, May 23, 2014 at 10:20 AM, Cristi Burc\u0103 notifications@github.comwrote:\n\nAn alternative approach would be to output a prompt:\nWarning: Running WP-CLI while the APC object cache is activated can result in cache corruption. Continue? [y/n]\nThus, we leave it up to the user to make the call.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/283#issuecomment-44014505\n.\n\n\n-Doug\n. Any further thoughts on this one? \n. ",
    "samargulies": "It would be nice to be able to edit the post title and metadata as well. Maybe display a post in a format similar to Jekyll?\n. ",
    "thanj": "+1000, although I haven't thought of a use-case yet for it.\nIt would seem like making this functionality available to wp post create would be useful as as well, maybe with an additional flag like --editor which will open the editor to build the post content before creating the post.\nHas anyone started on it yet? I'm willing to give it a shot if not.\n. ",
    "landongn": "I've tried this on both wordpress 3.5 and 3.5.1.  I get the same error. \n. it works if i use wp core download and then set up the config file-- but a straight from wordpress.org download and setup does not.  Totally clean site.\n. Sorry-- Should have been clearer. \n\"Works\": \n~ mkdir ./test\n~ cd test\n~ wp core download\n~ wp core config (etc)\n~ wp option get siteurl\n\"Doesn't Work\"\n~ cd /var/www/[existing_site]\n~ wp\n[two blank lines to stdout]\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /var/www/[existing_site]/wp-includes/load.php:18) in /var/www/[existing_site]/wp-includes/load.php on line 33\n. nothing in wp-content/mu-plugins.  Copied over the plugins from [existing_site] to ./test and running wp standalone gives me the help text. \n. ./test has the following output:\n``/var/www/test|\u21d2  wp plugin status\n22 installed plugins:\n  A akismet\n  A contact-form-7\n  A easyrecipe\n  A google-analytics-async\n  A google-sitemap-generator\n  A gravityforms\n  I gravityformsaweber\n  A gravityformsmailchimp\n  I hello\n  A wpmu-dev-seo\n  A magic-action-box-pro\n  A magic-action-popup\n UI mappress-google-maps-for-wordpress\n  I popup-domination\n  A psmu-shortcodes\n  A share-this\n  A sidebar-domination\n  A social-media-widget\n  A wp-smushit\n  I wp-super-cache\n  I wufoo-shortcode\n  A yet-another-related-posts-plugin`\n```\nwp-config of existing site is as follows: \n```\n<?php\n    //  MySQL settings - You can get this info from your web host  //\n    /* The name of the database for WordPress /\n    define('DB_NAME', 'xxxxx');\n/** MySQL database username */\ndefine('DB_USER', 'xxxxxx');\n\n\n/** MySQL database password */\ndefine('DB_PASSWORD', 'xxxxxx');\n\n/** MySQL hostname */\ndefine('DB_HOST', 'xxxxxx');\n\n/** Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8');\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n\n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * @since 2.6.0\n */\ndefine('AUTH_KEY',         'xxxx');\ndefine('SECURE_AUTH_KEY',  'xxxx');\ndefine('LOGGED_IN_KEY',    'xxxx');\ndefine('NONCE_KEY',        'xxxx');\ndefine('AUTH_SALT',        'xxxx');\ndefine('SECURE_AUTH_SALT', 'xxxx');\ndefine('LOGGED_IN_SALT',   'xxxxx');\ndefine('NONCE_SALT',       'xxxxx');\n\n/**#@-*/\n\n/**\n * WordPress Database Table prefix.\n *\n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n */\n$table_prefix  = 'wp_';\n\n/**\n * WordPress Localized Language, defaults to English.\n *\n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n */\ndefine('WPLANG', '');\n\n/**\n * For developers: WordPress debugging mode.\n *\n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n */\ndefine('WP_DEBUG', false);\ndefine('CONCATENATE_SCRIPTS', false);\ndefine('WP_MEMORY_LIMIT', '64M');\ndefine('FS_METHOD', 'direct');\n\n/* That's all, stop editing! Happy blogging. */\n\n/** Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(__FILE__) . '/');\n\n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');\n\n```\n. I haven't made any modifications to the core files, no.\n. send me a twitter DM and i'll set you up. @landongn\n. Stunning.  Thanks for the follow-up!\n. ",
    "dangardner": "For anybody still getting this error on a Debian system, I fixed it on my system by modifying the last line of the site-specific configuration file in, e.g. /etc/wordpress/config-example.com.php to only load wp-settings.php when not running under WP-CLI as follows:\nif (!class_exists('WP_CLI\\Runner'))\n        require_once(ABSPATH . 'wp-settings.php');\nThe problem is that WP-CLI expects everything to happen in the single wp-config.php and removes any lines which load wp-settings.php via the regexp fixed in eeba0afaf5005101a92cc9b60ec3adf882561c1e. However on Debian wp-config.php loads a site-specific config file which in turn loads wp-settings.php and that load isn't caught by the regexp.\n. ",
    "ocean90": "In Subcommand::get_patterns() you could add array( 'assoc', \"--$p_name=[0-9]+\", 1, 1 ),\n. Does it work when you execute this command:\nsudo ln -s /Applications/MAMP/tmp/mysql/mysql.sock /tmp/mysql.sock\n. Sorry!\n. Yeah, not necessary for each process. Maybe just once at the end (line 68).\n. @danielbachhuber Does the code look proper to you? Happy to provide a PR with one or two tests then.\nAnother idea would be public static function error( $message, $exit = true, $exit_code = 1 ) {}.\n. Was there already a change for that? That's what I currently get:\n\n. > But, you can also just re-install using cURL, so I'm not sure it's worth adding a new feature.\nTrue, but the same applies for an update. ;)\n. @voldemortensen For WordPress yes, but this is about wp-cli. :)\n. > WP-CLI should be calling wp_set_current_user() at roughly the same time WordPress normally does. That it doesn't is a bug.\nHmm...\n1) WP-CLI loads wp-settings-cli.php here: https://github.com/wp-cli/wp-cli/blob/a9828f8ce90f2a2faf31d0d0e0c6742253a433a0/php/WP_CLI/Runner.php#L856-L857\n2) WP sets the user here: https://github.com/wp-cli/wp-cli/blob/c1fdcb0ea17138fbe89a7a8062e4b13b1d98f242/php/wp-settings-cli.php#L360\n3) WP checks for ms_site_check() here: https://github.com/wp-cli/wp-cli/blob/c1fdcb0ea17138fbe89a7a8062e4b13b1d98f242/php/wp-settings-cli.php#L373\n4) WP-CLI sets the user based on the --user arg here: https://github.com/wp-cli/wp-cli/blob/a9828f8ce90f2a2faf31d0d0e0c6742253a433a0/php/WP_CLI/Runner.php#L867-L870\nWhat am I missing?\n. My bad, I misread \"That it doesn't is a bug.\" as \"This isn't a bug.\".\n. @ernilambar That ticket isn't related to your notice. It comes from https://github.com/WordPress/WordPress/blob/4.5.2/wp-admin/includes/class-wp-upgrader.php#L1399.\n. Should create site and delete site add a trailing slash instead? This would be consistent with site list see https://github.com/wp-cli/wp-cli/blob/v0.24.1/php/commands/site.php#L511.\n. @danielbachhuber The output of the install command is now more verbose. Example:\n$ wp core language install en_AU\n      Downloading translation from https://downloads.wordpress.org/translation/core/4.6.1/en_AU.zip...\n      Unpacking the update...\n      Installing the latest version...\n      Translation updated successfully.\n      Success: Language installed.\nThe upgrader is currently using the Automatic_Upgrader_Skin skin class. Using Utils\\get_upgrader() forces the use of UpgraderSkin. I don't see that as an issue though. What are your thoughts?. @danielbachhuber I'm happy if you are! :)\nCode styling could be improved a bit, but this should probably be done in a separate PR because it affects CoreUpgrader too.. Only WP 4.7+ will be fully compatible with PHP 7.1, see https://core.trac.wordpress.org/ticket/37772 and https://core.trac.wordpress.org/ticket/37295.. I had to compare the options of one network between stage and prod. My idea was to filter the options by site_id, sort them and use diff. Similar to http://wpkrauts.com/2015/compare-user-roles-in-a-multisite-with-wp-cli/.. Isn't that what wp core language list does? \ud83e\udd14. Ah, there's only Core_Language_Command which sets $obj_type. CommandWithTranslation::get_installed_languages() would support plugins and themes too.. Localized packages have their own checksums. Example: https://api.wordpress.org/core/checksums/1.0/?version=4.7.2&locale=ja\nThis sounds like either wp core update had loaded the en_US version and checked against the checksum of the localized packages or the other way around. (Or something else. \ud83d\ude42). @danielbachhuber Thanks, removed in f6a6f71.\n. This test is still failing locally:\n``\n@require-wp-4.0\n  Scenario: Core translation CRUD                                                                    # features/core-language.feature:4\n    Given a WP install                                                                               # features/steps/given.php:47\n    And an empty cache                                                                               # features/steps/given.php:14\n    When I runwp core language list --fields=language,english_name,status# features/steps/when.php:29\n    Then STDOUT should be a table containing rows:                                                   # features/steps/then.php:44\n      | language | english_name            | status      |\n      | ar       | Arabic                  | uninstalled |\n      | az       | Azerbaijani             | uninstalled |\n      | en_US    | English (United States) | active      |\n      | en_GB    | English (UK)            | uninstalled |\n    When I runwp core language install en_GB# features/steps/when.php:29\n    And I runwp core language install en_AU`                                                       # features/steps/when.php:29\n    Then the wp-content/languages/admin-en_GB.po file should exist                                   # features/steps/then.php:149\n    And the wp-content/languages/en_GB.po file should exist                                          # features/steps/then.php:149\n    And the {SUITE_CACHE_DIR}/translation/core-default-([\\d.]+)-en_AU-([\\d]+).zip file should exist # features/steps/then.php:149\n      $ wp core language install en_AU\n      Downloading translation from https://downloads.wordpress.org/translation/core/4.6.1/en_AU.zip...\n      Unpacking the update...\n      Installing the latest version...\n      Translation updated successfully.\n      Success: Language installed.\n  cwd: /var/folders/vr/z6wqt2xs6ys87x5rl53_xc900000gn/T/wp-cli-test-run-5835a8892966f0.10018847/\n  exit status: 0\n\n```. ",
    "tlovett1": "I'm thrilled you guys are building this. I'm testing it now on a local import. I had a hard time figuring out how the --authors argument was supposed to be used. I initially assumed it would be a comma separated list of ID's not a file path. You probably already know, but this needs a bit more explanation\n. Not sure why the build failed. I'll try to find out.\n. I like your idea better. I'll write the patch.\n. That's actually how it is now. If you don't specify any arguments, it just deletes everything. I'll rename the arguments.\n. Yep, I like wp blog empty too. I had it there until I realized the command was only available to MS. Core was the best fit I could think of.\n. Perhaps it makes sense to make wp blog available to single site and just disallow certain subcommands. There will probably more subcommands that fit into wp blog that need to be available to all WP installations\n. Sounds good. I'll make a new pull request.\n. I was referring to a PR for making wp blog available to all WP installations\n. Ok, I grouped all of it into this PR. Let me know what you guys think. Unfortunately, we can't name a method empty because it is a reserved word in PHP so I went with truncate instead.\n. Will do.\n. I agree with Daniel. I think it is useful for development to leave options. I'll add some tests.\n. The functional tests are in the works. I'm having an issue getting them to work with the extra prompt request that this command does.\n. I really think this should be in core WP-CLI. The way I see it working is copying a blog table for table incrementing the site id. There would be one argument: . I'd be happy to move this command forward.\n. Yep, if SUBDOMAIN_INSTALL is false, assume the slug is a domain name and add it to blog URL, otherwise add the slug to path.\n. It is native WP functionality to create a new site on a network and copy the settings/content from another site. This command would just make the operation one step instead of 20. wp site empty does the same thing; it simplifies a long process into one quick step.\n. \"That's again a matter of opinion. WP core itself, for instance, doesn't have such functionality.\"\nYou can accomplish this with WP core; it just takes a few steps.\nI had a situation where we turned a single site install into MS. We needed to copy the settings and posts of the main site to another site on the network. This command would also help me in local development.\n. 1. Create new site\n2. Copy settings manually\n3. Copy menus manually\n4. Copy widgets manually\n5. Import/export posts\n   ...\n. I would say duplicate the attachments as well. I think it's as much core WP functionality as is wp site empty.\n. @scribu The built-in WP functions do, yes. However, we an easily look up a term with just and id using DB utils.\n@danielbachhuber Wouldn't [--<term>=<term-id>] make more sense? I agree the --category argument should be deprecated. Should I do that in this pull request?\n. Can you guys answer my questions here?\n. The point of this is to allow the user to export posts based on a term id that could be in any taxonomy. So it would make sense for the param name to be term not taxonomy. Does that make sense?\n. That should do it.\n. I'll make this change.\n. I used wp_parse_args so I wouldn't have to do that check.\n. Ah ok, my inner-Java came out there.\n. Will fix.\n. I agree. Doing the subcommand with the arguments well seems like it is more trouble than it is worth..\n. If we are just deleting all the posts, truncate table is much quicker.\n. Command classes need a constructor. If I remove the constructor, it adds __construct to the list of commands for whatever reason.\n. ",
    "micalexander": "I really feel like this should be re-evaluated. For scripting and automating purposes, it would be really nice to be able that have things like --supports=... as a parameter to pass, and not have to go back and edit these one or two lines manually.\nI understand it doesn't look pretty in the outputted help, however, I think it's an issue of fixing the output (maybe stacking the parameters for instance).. ",
    "westonruter": "Here's the .travis.yml that I'm adding to all of our plugins: https://github.com/x-team/wp-plugin-dev-lib/blob/master/.travis.yml\nBesides the before_script commands you reference above, it invokes phpcs via:\nyml\nscript:\n    - phpcs --standard=$(if [ -e ruleset.xml ]; then echo ruleset.xml; else echo WordPress; fi) $(find . -name '*.php')\nMight be better to glob for the XML file, e.g. *ruleset*.xml\n. @scribu excellent point! I will append another commit here that will check for wp-load.php as it walks up the tree, and stop searching for wp-cli.yml when it finds it.\n. @scribu ok, now with 7fdf7ab it handles when there is no wp-cli.yml. It uses the ancestor directory containing wp-load.php as the default path.\n. @scribu I've pushed commits for those two edge cases you discovered, d0e20df and 6aefeaa, respectively\n. Yeah, for wp-cli-ssh we'd need the values ready in the config to be be arbitrary data structures of any depth, even deeper than this, for example:\nyml\nssh:\n  staging:\n    cmd: ssh %pseudotty% util.example.com %cmd%\n    url: staging.example.com\n    path: /var/www/staging.example.com/current/docroot\n    disabled_commands:\n      - db drop\n      - db reset\n      - plugin install\n      - core multisite-convert\nCommands could just be allowed to read from the raw config directly (or even just their namespaced config). This is thwarted right now because the config paths (global_config_path and project_config_path) are private, and the raw result from self::load_config( $config_path ) ); is not stored:\nphp\n$configurator->merge_config( self::load_config( $config_path ) );\n. Oh?\n``` php\nclass Runner {\n    private $global_config_path, $project_config_path, $config;\n\n``\n. That would be perfect.\n. Oh! :smile: \n. Here's a command I wrote to do the network upgrade, adapting @mjangda's original work from 2011: https://gist.github.com/westonruter/beb6120e61e9691e88ac\n. Or a format to only export user/usermeta tables.\n. I'll open another issue for this discussion.\n. :heart:wp db list-tables. As for a format for listing out subsets of tables, there are logical groupings (identified in$wpdb, below) that would be likely candidates for common table subsets which would need go get exported separately, as I'm sure you're aware of. So there could be awp db list-tables --subset=global_tables`:\n```\n    [tables] => Array\n        (\n            [0] => posts\n            [1] => comments\n            [2] => links\n            [3] => options\n            [4] => postmeta\n            [5] => terms\n            [6] => term_taxonomy\n            [7] => term_relationships\n            [8] => commentmeta\n            [9] => p2p\n            [10] => p2pmeta\n        )\n[global_tables] => Array\n    (\n        [0] => users\n        [1] => usermeta\n    )\n\n[ms_global_tables] => Array\n    (\n        [0] => blogs\n        [1] => signups\n        [2] => site\n        [3] => sitemeta\n        [4] => sitecategories\n        [5] => registration_log\n        [6] => blog_versions\n    )\n\n```\n. I actually coded up a quite fast db-export-with-replacements script last year which we've used internally, and I'll try to open a pull request sometime over the next week that shows how it could enhance WP-CLI.\n. Yeah, sorry, this has been on my todo list for awhile but it got sidelined.\nI've been thinking about it, and I think that actually the translating export functionality here would be better located in the search-replace command, rather than  adding --search and --replace to the export command. For example:\nbash\nwp search-replace www.example.com staging.example.com --export=staging.sql\nIf the --outfile option is supplied, then search-replace would not do a $wpdb->update in place, but rather would write $wpdb->prepare'd SQL out to a file (or to STDOUT if -). \nThoughts?\n. @danielbachhuber when working with widgets, I would have expected the widget-id to be relied on primarily, instead of sidebar-id + id-base + position-in-sidebar\n. I wasn't aware that PHPCS could do this static analysis, but indeed here is the sniff to do this undefined variable detection: https://github.com/illusori/PHP_Codesniffer-VariableAnalysis/blob/master/Sniffs/CodeAnalysis/VariableAnalysisSniff.php\nAlso, this seems like the kind of thing what PHPMD is designed for. I also yesterday found PHPMD being used in a WordPress .travis.yml, along with PHPCS.\n. Brilliant.\n. It seems to me that ideally WP-CLI would provide some more hooks to allow extensions to do some lower-level things:\n- Allow the Configurator spec to be extended with new global parameters (e.g. --ssh-host) and global configs (e.g. the ssh array entry in wp-cli.yml). #520\n- Allow the config array to be mutated instead of just accessed (e.g. add a WP_CLI::set_config() method) so that we can override disabled_commands.\n- Make available an early-early invoke hook, for example right after the requires are processed.\n. As discussed with @jonathanbardo, we're going to see if we can refactor the logic to add an ssh command, with wildcarded subcommands which then get forwarded to the remote server. https://github.com/x-team/wp-cli-ssh/issues/4\n. @jonathanbardo has rewritten the command to operate by registering an ssh command: https://github.com/x-team/wp-cli-ssh/blob/master/wp-cli-ssh.php\nNote that he's dome some magic with the Reflection API. We should eliminate the need for that. Most should be resolved by #520, except for find_command_to_run() and overriding the config-loaded disabled_commands.\n. Yeah, that's true. It is useful though for checking against the overridden disabled_commands, so the server never even is pinged if you're doing something forbidden. But in that case, the invoked command could be manually checked against the disabled_commands provided in the ssh config.\n. @scribu sure, just addressed wp db import in c68837d. However, in this case of STDIN, there would be no difference between using wp db query or using wp db import -, right? They would be effectively aliases.\n. @scribu where should such helper classes be located? Appended to the end of search-replace.php?\n. @scribu fixed conflicts. I still need to refactor handle_table() as you requested.\n. @danielbachhuber be my guest! You can clearly see I've not been on top of this :smile: \n. Nice! This was on my todo list as an issue to report. :+1: \n. Either the class name in Jetpack or Twenty Fourteen (or both!) should get a prefix.\n/cc @blobaugh\n. In other words, wp import --skip=fetch_remote_file\n. Seems like a problem with some PHP taint checking feature. Maybe PHP Safe Mode?\n. Regarding snappiness, the completions for a given command could be cached in a Bash variable or even to disk the first time they are obtained.\n. Speaking of automatically generating the readme.txt, we've been using a generate-markdown-readme script to automate the generation of a readme.md from a WordPress readme.txt. This is key for projects which are hosted on GitHub, so that two separate READMEs don't have to be maintained.\n. If you wanted to supply a default item in the instance array, it would be title. Also, you could actually invoke the widget's form() method, and parse out the inputs in there, and use default values from that as the instance supplied when saving a widget. The fields could be used as a schema for guiding a user for what data to input when creating a widget from the command line. Like if you add a wp widget add recent-posts --help it could show the inputs that the form is expecting.\n. Amazing and awesome :)\n. Wouldn't wp core version remain as an alias?\n. By the way, it seems that unless it is desired to support the same widget instance appearing multiple times in the same sidebar (which the admin UI does not support), it doesn't really make sense for Widget_Command::move_sidebar_widget() to take a $current_index argument. We should always set it to the current index as returned by array_search(), for example:\nphp\n$widgets = $all_widgets[ $current_sidebar_id ];\n$current_index = array_search( $widget_id, $widgets );\n. Right, so this is probably because the --url param is ambiguous, referring either to the global WP-CLI --url parameter which sets the HTTP_HOST, instead of the widget instance item url. It would probably be better to prefix all such instance arguments with something like instance_ or to require passing JSON when setting the instance.\n. @szepeviktor work has already been started on this. See #709 (Add search-replace to db export), and the associated PR #899.\n. > Would you expect more than one event to be run in this situation?\nI did.\n. :clap: \n. > The pattern we've established elsewhere is to JSON-encode data when we need to present it in a table or CSV. Is there a reason you'd like it to be PHP-serialized?\nThat's fine. I'm just wary of there being data not serializable to JSON, like a serialized class. But this is probably an edge case. If the args were serialized to JSON for the display table, then this would be good.\n. 1337! #leet\n. Nice idea.\n. Really? It is working for me. In one of my scripts in fact, I have a command to grab the production database via:\nbash\nssh example.com 'cd ~/example.com && wp db export -' > production.sql\nAnd it works as expected. \nIt could be a problem with wp-cli-ssh.\n. I think the /S option is the Windows-equivalent to the Linux -p:\n\nAllows you to create more than one directory at a time. For example, if you need to create the directory C:\\ONE\\TWO\\THREE and none of the named directories exist, you can use /S to have MD create all of the necessary subdirectories in a single command (without the /S, this command will fail because the parent directory C:\\ONE\\TWO does not exist):\nmd /s \\one\\two\\three\n\nVia http://jpsoft.com/help/md.htm\n. :heart: \n. @danielbachhuber not exactly, but two reasons come to mind:\n1. I wasn't aware of ssh2_connect().\n2. And ssh2_connect() isn't a core PHP function but part of a PECL extension.\n. > Would you mind testing out the current implementation when you have a moment, and let me know what you think? Specifically, I'm looking for feedback on the implementation, and any additional features you think it needs.\n@timneutkens actually, since you've been using WP-CLI SSH most frequently of late (AFAIK), would you give this PR a try and provide feedback?\n. It would be useful if any automated tests for packages could be run regularly on the latest WP-CLI codebase. If there was a process that iterates over each package and runs the package's tests on the current development version, then this would provide a useful service for package authors to inform them when there is a breakage and it would serve as a way to inform WP-CLI of backwards-incompatible changes being introduced.\n. But this still depends on the package developers to do something on their end to run the tests, right? I meant specifically to run the tests on the WP-CLI side periodically. Given each community package, WP-CLI could iterate over each of them on its own weekly build routine to do a health check on all community packages to find out if there are regressions/incompatibilities as WP-CLI core codebase evolves.\n. Wholeheartedly agree with this change. This will allow the checks to be used in shell conditionals. Something to look for when check for scripts to update is for any scripts that include set -e. Before this change, a WP-CLI exit failure would not cause the script to exit at that point. Now, however, scripts that use set -e will need to explicitly acknowledge failures, like:\n``` sh\nset -e\n...\nif ! wp post generate; then\n    echo \"Failed to generate posts, but oh well. Keep going!\"\nfi\n...\n```\n. I think the comparison logic should be something like this:\n```php\n/\n * Compare two WordPress version numbers which look like '4.9-alpha-40870-src'.\n \n * @param string $ver_a Version A.\n * @param string $ver_b Version B.\n * @return int Comparison.\n /\n$compare = function( $ver_a, $ver_b ) {\n    $ver_a_parts = explode( '-', $ver_a );\n    $ver_b_parts = explode( '-', $ver_b );\n// Compare semantic versions.\n$semver_a = array_shift( $ver_a_parts );\n$semver_b = array_shift( $ver_b_parts );\n$comparison = version_compare( $semver_a, $semver_b );\nif ( 0 !== $comparison ) {\n    return $comparison;\n}\n\n// Compare pre-release identifiers 'alpha', 'beta', 'rc'.\n$prerelease_a = array_shift( $ver_a_parts );\n$prerelease_b = array_shift( $ver_b_parts );\n$comparison = strcmp( $prerelease_a, $prerelease_b );\nif ( 0 !== $comparison ) {\n    return $comparison;\n}\n\n$rev_a = intval( array_shift( $ver_a_parts ) );\n$rev_b = intval( array_shift( $ver_b_parts ) );\n\n// If either version is a src (but not both) then consider them equal.\n$src_a = 'src' === array_shift( $ver_a_parts );\n$src_b = 'src' === array_shift( $ver_b_parts );\nif ( $src_a xor $src_b ) {\n    return 0;\n}\n\n// Compare revision numbers.\nreturn $rev_b - $rev_a;\n\n};\n``. @scribu it is actually an array not a string, as this is the$config_spec(returned from [Utils\\get_config_spec()](https://github.com/wp-cli/wp-cli/blob/master/php/utils.php#L34-49)) not$this->config. So before this conditional,$config_spec['path']` is the array:\nArray\n(\n    [runtime] => =<path>\n    [file] => <path>\n    [synopsis] =>\n    [default] =>\n    [desc] => Path to the WordPress files\n)\nSo my change here is to set the default config path to actually reflect the location of WordPress relative to the current working directory, but this can still be overridden via a config file or via the --path option, naturally.\n. @danielbachhuber what if the master branch does not correspond to the latest stable release? In such case, in addition to the Git repo source URL for the package, the yml package manifest could include a ref like refs/heads/stable or refs/tags/v1.0 so that the specific branch or tag could be referenced. Likewise, a specific commit hash could be listed in the manifest.\n. @danielbachhuber what about throwing in some I/O redirection?\nphp\n$cmd = sprintf( 'git clone %s %s', escapeshellarg( $clone_url ), escapeshellarg( $local_dir ) );\n@exec( $cmd . ' 2>&1', $results, $return );\n. @scribu how should we handle synopses that allow passing arbitrary associative arguments?\nRight now running the behat test via php behat.phar features/db.feature results in:\n``\n    When I runwp db export /tmp/wp-cli-behat.sql`                   # features/steps/basic_steps.php:101\n      $ wp db export /tmp/wp-cli-behat.sql\n      Success: Exported to /tmp/wp-cli-behat.sql\n  Warning: The `wp db export` command has an invalid synopsis part: ...\n  cwd: /tmp/wp-cli-test-run-5251bfd4bfed58.38985113\n  exit status: 0\n\n```\n. Are you cloning it into the Standards directory? See: https://github.com/x-team/wp-plugin-dev-lib/blob/d0194bb5fa9698a327fa67b373262a8ca83840fd/.travis.yml#L23\ngit clone git://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $(pear config-get php_dir)/PHP/CodeSniffer/Standards/WordPress)\n. Oh yeah, I didn't notice install.sh moves the PHPCS standard into the proper location.\n@scribu I think you need to wrap the <property> in a <properties> element, like this example.\n. Right! Much better. I was still thinking of wp db export (#898 ) which requires - since omission defaults to an export filename containing the DB. Fixed in 43917fc78cd93e0aae368c1ee584b73d6a0ddc46.\n. Where does wp db export mention -?  There is general mention of it in the definition of the <file> option in the class phpDoc:\n* <file>\n * : The name of the SQL file for import/export. If '-', then inputs from STDIN and outputs to STDOUT. If omitted, it will be '{dbname}.sql'.\nThe export command just has:\n``` php\n/**\n * Exports the database using mysqldump.\n *\n * @alias dump\n *\n * @synopsis [<file>]\n */\n\n```\nDo you want - noted explicitly in the comment block for both the export and import methods?\n. @danielbachhuber instead of sidebar-id + name + position, why not just a single widget-id?\n. @danielbachhuber should this not echo the widget-id?\n. @danielbachhuber also, instead of args including sidebar-id + name + position, the args passed could be sidebar-id + widget-id. Additionally, you wouldn't even need sidebar-id in this case, as the sidebar can be looked up just from a widget-id\n. @danielbachhuber if using a widget-id, the args could be widget-id + new-sidebar-id + position\n. @danielbachhuber what if the widget in question is not a multi-widget at all? What about old single widgets?\n. Likewise, there could be a widget deactivate command which would move the supplied widget-id to the wp_inactive_widgets sidebar.\n. Oh wait a minute: maybe I am assuming that a widget can only be assigned to one sidebar. I know the UI doesn't support this, but can a widget be programmatically added to multiple sidebars?\n. We added support for them in Widget Customizer which is now in core, and Nacin did a report from the plugin repo and apparently 20% of all widgets are the non-multi variety.\n. Good. Because I realized that this would probable cause Widget Customizer to blow up as well :smile: \n. What if wp-admin/includes/update.php got modified to maliciously change get_core_checksums() to return checksums to match any files which it also maliciously modified?\n. Done: #1262\n. @danielbachhuber This is why there was recent support for a wpcli_command config to handle situations where wp isn't on the PATH: https://github.com/xwp/wp-cli-ssh/pull/27\n. No, I didn't. Also, perhaps the PHAR isn't even aliased as wp on the target environment. I think that there will ultimately need to be a way to provide an alternate path.\n. ",
    "Boztown": "I had to change my DB_HOST from \"localhost\" to \"127.0.0.1\" on my machine.  This might just be because of how my Mac is networked but I thought I'd mention it.\n. I'm getting this problem.  My connection is good so maybe it's something else.  Here's my errors:\nwp core download\nDownloading latest WordPress (en_US)...\nWarning: cURL error 28: Operation timed out after 30000 milliseconds with 3309241 out of 4594818 bytes received\nError: cURL error 28: Operation timed out after 30000 milliseconds with 3653305 out of 4594818 bytes received\nInfo:\nPHP binary:  /Applications/MAMP/bin/php/php5.4.10/bin/php\nPHP version:    5.4.10\nphp.ini used:   /Applications/MAMP/bin/php/php5.4.10/conf/php.ini\nWP-CLI root:    /Users/ryanbosinger/.wp-cli/vendor/wp-cli/wp-cli\nWP-CLI config:  \nWP-CLI version: 0.12.1\n. @scribu will do.  Thank you.\n. @scribu FYI, it worked!  That commit is probably worth it ;).\n. ",
    "ajmorris": "@scribu \n``` shell\nwhich php\n/usr/bin/php\necho $WP_CLI_PHP\n/Applications/MAMP/bin/php/php5.3.14/bin/php\nwp --info\nTue Feb 26 12:45:53 ->wp --info\nPHP binary: \nPHP version:    5.3.15\nphp.ini used: \nwp-cli root:    phar://wp-cli.phar/php/\nwp-cli config:\nwp-cli version: 0.9.0-alpha2\n```\n. @scribu Sweet that got it working!! Thanks so much!\n. I should mention that FWIW I did see https://gist.github.com/samstoller/efc38eb309e62df392ea and thought it was close to a solution for me, but none of that worked.\nI also read somewhere (I think another Issue) that WP-CLI uses a different wp-settings.php file. If that's true, maybe that leads me down a road to something I could set in my wp-cli.local.yml file.\n. This has been fixed. It was simply the wrong order of operations and VVV not setup to work with symlinks in a shared folder (this is a known issue).\n. ",
    "ifmeister": "I was getting an error establishing a database connection and a PHP Notice: Undefined index: SERVER_NAME in wp-cli/php/wp-cli.php\nTyping which php in console returned: \n/Applications/MAMP/bin/php/php5.4.4/bin/php\nTyping echo $WP_CLI_PHP returned a blank.\nMy method of dealing with the problem involved hardcoding the WP_CLI_PHP constant to the ~/.profile\nexport WP_CLI_PHP=\"/Applications/MAMP/bin/php/php5.4.4/bin/php\"\nAfter reloading source ~/.profile, I ran wp-cli/utils/dev-build again. Then I tried to echo $WP_CLI_PHP again which now returns the path to PHP.\nThis allowed me to run the wp command but I was still getting an Undefined index due to the use of a custom wp-config.php for multiple environments. Reverting to the default wp-config.php solved the SERVER_NAME problem.\nIs there a better way to get around these issues?\n. ",
    "coreyp": "I'm also having the SERVER_NAME problem @ifmeister \u2026 I haven't tried reverting the wp-config.php to default because that would bork my project. Is this something to start a new issue over? I should say I'm not using MAMP but Ubuntu and native PHP.\n. ",
    "rumoru": "Changing localhost to 127.0.0.1 in wp-config.php sorted for me too (OSX)\n. Not exactly. How WP_CLI is included?\nEven if it is in a plugin is still needs to be run from cli.\n. No, running PHP from cli is great. I meant:\nphp\n<?php \nshell_exec('php wp-cli.php some_command');\nis weird.\nI tried it and it works, but it looks unreliable, at least for me. Maybe with some modifications to wp-cli framework it could be achieved, but it feels same like editing wp core and I don't want to kill a kitten or whatever else in this case :)\nThanks for your quick response.\n. Thanks for reply.  Sorry I haven't seen this issue.. ",
    "yratof": "this doesn't work for me. Still getting \"can't connect to database\" despite being able to access the wordpress through the browser & installing and being able to run around the dashboard.\n. Try this. https://gist.github.com/yratof/c3295a5bbf68641884c6\n. Fantastic, running wp media regenerate -url='http://demo.dev/deepthought worked exactly how it should. Only 5000 images remaining!\n. ",
    "josephfusco": "After doing this, anytime I use wp now it is extremely slow. wp --info is taking close to 5 seconds to output.\n. ",
    "lecahipe": "if you have a local domain for you project you just should change the val of DB_HOST for your defined local domain ('DB_HOST', 'local.mywebsite.com');\nthis worked for me :)\n. ",
    "holisticnetworking": "I tried following the directions above for ajmorris. But in the end, I type wp and get an HTML file?\nI'm guessing the file has moved?\nDeleted the HTML because it's obviously a 404. But changing to this url  https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar, then following your directions:\nsudo -s\ncurl https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar > /usr/share/wp-cli.phar\necho '/Applications/MAMP/bin/php/php5.3.14/bin/php /usr/share/wp-cli.phar $@' > /usr/bin/wp\nchmod +x /usr/bin/wp\nNow WP command does nothing. \n. @yratof Thanks for the reply. But now as I look at it, the $WP_CLI_PHP variable now appears to be empty:\n`Ganymede:~ tomb$ wp --info\nGanymede:~ tomb$ which php\n/usr/bin/php\nGanymede:~ tomb$ echo $WP_CLI_PHP\nGanymede:~ tomb$ `\n. +1 for this. Dead in the water trying to unit test my favourite framework.. Right. Iconv is enabled per the data I provided. Both links shared here presuppose that it isn't installed?. @gitlost I've got xdebug installed. But can you give me a little insight as to what you want to see?\nSorry, but I've only ever used xdebug with PHPStorm locally, and even that, not terribly successfully.... I'm not sure what the problem is or was: I've had mbstring installed\nforever and certainly installed all the dependencies. However, after\ninstalling xdebug and reloading the server, now everything's fine.\nCall it gremlins. But I guess I'm ok.\nThanks for the help, everybody!\nThomas J Belknap\nSenior Web Developer\n585.305.1619\nhttp://holisticnetworking.net\nhttps://mailtrack.io/trace/link/abb5508045d177a63c5d69231d66fd940472a506?url=http%3A%2F%2Fholisticnetworking.net&userId=1948639&signature=d36b12d5ffc25b6b\nOn Mon, Feb 26, 2018 at 6:48 PM, gitlost notifications@github.com wrote:\n\nOkay reproduced the error message with a PHP with iconv() disabled (and\nxdebug installed):\nFatal error: Uncaught Error: Call to undefined function Symfony\\Polyfill\\Mbstring\\iconv() in phar:///home/mburke/bin/wp/vendor/symfony/polyfill-mbstring/Mbstring.php:534\nStack trace:\n0 phar:///home/mburke/bin/wp/vendor/symfony/polyfill-mbstring/bootstrap.php(46): Symfony\\Polyfill\\Mbstring\\Mbstring::mb_strwidth('Table', 'ASCII')\n1 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/cli.php(345): mb_strwidth('Table', 'ASCII')\n2 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/Colors.php(200): cli\\strwidth('Table', 'ASCII')\n3 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/table/Ascii.php(138): cli\\Colors::width('Table', false, 'ASCII')\n4 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/Table.php(146): cli\\table\\Ascii->row(Array)\n5 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/Table.php(125): cli\\Table->getDisplayLines()\n6 phar:///home/mburke/bin/wp/vendor/wp-cli/search-replace-command/src/Search_Replace_Command.php(376): cli\\Table->display()\n7 [i in phar:///home/mburke/bin/wp/vendor/symfony/polyfill-mbstring/Mbstring.php on line 534\nso I think the PHP you're using must have iconv() disabled, despite the\nresults of php --ri iconv posted.\nGiven that according to\nRelated: symfony/polyfill#66\nhttps://mailtrack.io/trace/link/c34da5d7718f6980d069e8988253a361ddef499e?url=https%3A%2F%2Fgithub.com%2Fsymfony%2Fpolyfill%2Fissues%2F66&userId=1948639&signature=15be0a1ceebcc8ec\nnot including the iconv polyfill is deliberate Symfony policy, maybe\nadding a check to WP-CLI to warn if both iconv and the mbstring aren't\navailable is something to be considered, to avoid this user experience...\n(May also gird myself up to raise an issue/PR about this at Symfony as\nit's poor behavior really...)\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://mailtrack.io/trace/link/c5e71c7ab79a5197263f62d52831bdef0a5de027?url=https%3A%2F%2Fgithub.com%2Fwp-cli%2Fwp-cli%2Fissues%2F4700%23issuecomment-368692811&userId=1948639&signature=9ccf6281ae5e6aa2,\nor mute the thread\nhttps://mailtrack.io/trace/link/7bc2609cf74411ddd848f1f040c10764dda79cf0?url=https%3A%2F%2Fgithub.com%2Fnotifications%2Funsubscribe-auth%2FABGFsJU3l51Sr47UX2YX4R9hyYwOpXcMks5tY0K4gaJpZM4SOLu6&userId=1948639&signature=f05fd4300b4ad60f\n.\n. \n",
    "rob-gordon": "Having the same issues as @holisticnetworking \nwp --info prints out an html file and echo $WP_CLI_PHP prints nothing\n. For anyone else having trouble here - it has to be ~/.bash_profile \u2013 even if you running the command from zsh or some other shell. That threw me off for a minute. Thanks @alessandrotesoro!. ",
    "stephendwolff": "@scribu I used your suggestion - but altered it a little - as it was splitting quoted arguments which had spaces (ie page titles, and content etc):\nsudo -s\ncurl http://wp-cli.org/packages/phar/wp-cli.phar > /usr/share/wp-cli.phar\necho '/Applications/MAMP/bin/php/php5.3.14/bin/php /usr/share/wp-cli.phar $@' > /usr/bin/wp\nchmod +x /usr/bin/wp\nbecame;\nsudo -s\ncurl http://wp-cli.org/packages/phar/wp-cli.phar > /usr/share/wp-cli.phar\necho '/Applications/MAMP/bin/php/php5.3.14/bin/php /usr/share/wp-cli.phar \"$@\"' > /usr/bin/wp\nchmod +x /usr/bin/wp\nThen, this worked:\nwp post create ./post-content.txt --post_category=201,345 --post_title='Post from file'\n. Hi grahamlutz, you could\na) check mysql is running \n$ ps aux | grep mysql\nb) check you can connect to mysql via the command line, ie\n$ mysql -u root -p\nc) check your database connection settings (in the wordpress folder - ie in wp-config.php)\n. ",
    "grahamlutz": "I followed the install instructions at wp-cli.org and am unable to connect to database. I am using a newly installed (this morning) version of MAMP PRO.\n```\nwhich php\n/usr/bin/php\necho $WP_CLI_PHP\n/Applications/MAMP/bin/php/php5.5.14/bin/php\nwp --info\nPHP binary:     /usr/bin/php\nPHP version:    5.5.14\nphp.ini used: \nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:  \nWP-CLI global config: \nWP-CLI project config:\nWP-CLI version: 0.24.1\n```\nThen, I followed @scribu's directions above: \n    sudo -s\ncurl http://wp-cli.org/packages/phar/wp-cli.phar > /usr/share/wp-cli.phar\necho '/Applications/MAMP/bin/php/php5.3.14/bin/php /usr/share/wp-cli.phar $@' > /usr/bin/wp\nchmod +x /usr/bin/wp\nand I am still getting Error: Error establishing a database connection\n. Thanks guys!  I ended up add the following to ~/.bash_profile to get whatever PHP version MAMP is using:\n```\nMAMP Madness\nexport PATH=/Applications/MAMP/Library/bin:$PATH \nPHP_VERSION='ls /Applications/MAMP/bin/php/ | sort -n | tail -1'\nexport PATH=/Applications/MAMP/bin/php/${PHP_VERSION}bin:$PATH\n```\n. Ok, thanks @danielbachhuber.\nFor anyone who got here with the same problem, this is what ended up working for me - I put the following in my ~/.bash-profile:\n```\nMAMP Madness\nexport PATH=/Applications/MAMP/Library/bin:$PATH\nPHP_VERSION=ls /Applications/MAMP/bin/php/ | sort -n | tail -1\nexport PATH=/Applications/MAMP/bin/php/${PHP_VERSION}bin:$PATH\n```\n. ",
    "kawi3462": "Check database connection.There are two causes of database connection error.Your wordpress database could be corrupted or problem with your hosting.These troubleshooting methods will help you.http://techoverload.net/fix-error-establishing-database-connection-wordpress/\n. ",
    "ramilS": "define('DB_HOST', '127.0.0.1:8889'); worked for me. ",
    "selrond": "@ramilS @rumoru why it works though? I'd like to know where the problem lies. ",
    "janeschindler": "@ramilS worked for me too (none of the other solutions worked). ",
    "christophrumpel": "Hi, this time it worked, but i get another error.(see below) I am not sure what to do. Where do i have to create a php.ini?\nCheers\n```\n\u00b1 sudo utils/dev-build\n!/usr/bin/env php\nSome settings on your machine make Composer unable to work properly.\nMake sure that you fix the issues listed below and run this script again:\nThe detect_unicode setting must be disabled.\nAdd the following to the end of your php.ini:\n    detect_unicode = Off\nA php.ini file does not exist. You will have to create one.\nIf you can not modify the ini file, you can also run php -d option=value to modify ini values on the fly. You can use -d multiple times.\nmv: rename composer.phar to /usr/local/bin/composer: No such file or directory\nutils/dev-build: line 10: composer: command not found\nln: /usr/bin/wp: No such file or directory\nln: /usr/local/etc/bash_completion.d/wp: No such file or directory\n```\n. Thanks, this one helped me creating the php.ini\nhttp://stackoverflow.com/questions/9343151/where-is-php-ini-in-mac-os-x-lion-thought-it-was-in-usr-local-php5-lib\nbut i then i got this error:\nLoading composer repositories with package information\nInstalling dependencies from lock file\n- Installing mustache/mustache (v2.0.2)\n  Loading from cache\n- Installing wp-cli/php-cli-tools (dev-master f3def25)\n  Cloning f3def25b862bb0c5330a6347c6c04d62a99eb217\nGenerating autoload files\nln: /usr/bin/wp: No such file or directory\nln: /usr/local/etc/bash_completion.d/wp: No such file or directory\nThe \"wp\" command is still not working. Do i need to create these directories?\n. ",
    "erezmus": "what is the option name? doesn't seem to be listed in the doc...\n. oh you mean as a new feature?\n. ",
    "eugeneware": "I've fixed this problem with #563 by introducing a new config variable called apache_modules which is a list of apache modules that are to be reported as loaded. By putting mod_rewrite in this list you can now get this command to work. See the PR for more details.\n. Yup. http://codex.wordpress.org/Editing_wp-config.php#MySQL_Sockets_or_Pipes\nIt's actually the default in most cases for a localhost connection. At least on OS X. \n. I've tested the script on both Mac OSX and also the latest Ubuntu.\n. There are two core use cases. \n1. Doing testing in a managed development environment where the mysql server is on a separate host.\n2. Running another mysql instance on the same server but on another port so that it doesn't conflict at all with the running instance. We have our own testing framework that will set up another mysql instance so that we can easily have a testing instance of mysql.\n. You're right. I'm not 100% what the different option are! \n. Yeah. I wasn't 100% sure. That's why I wanted your opinion. Ideally this stuff wouldn't even live in this file, as other files may want to change the .htaccess or rewrite rules. I'm not sure where the best place is to put this code. Yes, the apache_mod_loaded checks phpinfo(). I have tried to make ini_set() fake it, but have not had success. I don't think you can set ini vars that php or the module system doesn't know about.\nIn any case, putting it in via ini_set would be a bit of a hack and a little fragile as the current code just does a string search for the module in the phpinfo() code. If they were to be more thorough in the future, then this wouldn't work.\nI think the question is, where can we introduce this function that makes sense given the architecture of wp-cli. Any thoughts?\n. Oops. Removed now.\n. No problems. I've just added the comment and pushed it to the PR.\n. It's to escape against paths for unix sockets. Eg. if I pass in locahost:/tmp/mysql.sock\n. Ah yes. Have fixed it in 0004bbc\n. That's probably cleaner. Fixed in 047fdc7\n. Cool. Fixed in 9a14844\n. It's a common bash idiom, basically a ternary operator:\n[[ condition ]] && (do this stuff if true) || (do this stuff if false)\nI can easily rewrite this as an if else block if you like though.\nBasically is the OS if 'Darwin' (ie. Mac OSX) then the inplace modifier is i \"\" otherwise it will be just -i. \n. :- won't throw an error if $4 is undefined. So if DB_HOST is not defined then DB_HOST will default to localhost. (According to these docs in any case)\nThe if block on https://github.com/wp-cli/wp-cli/pull/576/files#L1R43 only will change things if a port or socket is defined.\nThe default is basically to have DB_HOST to be localhost in any case because that's what the host field in the wp-tests-config.php file is set to in any case.\nLeaving the DB_HOST field blank has no unintended side effects compared to previous behaviour.\n. Perhaps we're not talking about the same thing.\nLet's say for test.sh:\n```\n!/bin/bash\nDB_HOST=${1:-localhost}\necho $DB_HOST\nDB_HOST2=${1:?localhost}\necho $DB_HOST2\n```\nWhen I run it with a parameter:\n$ ./test.sh hello\nhello\nhello\nWhen I run it without a parameter:\n$ ./test.sh\nlocalhost\n./test.sh: line 6: 1: localhost\nThe version with the ? throws an error with the missing param. The version with the - doesn't. \nUnless I'm doing something wrong?\n. No problems. I've updated the PR.\n. My mistake. I misunderstood your original comment. Your comment was about using :- vs -. No problems. I've fixed it in the PR. Sorry for the misunderstanding. \n. Fixed in fd265ff\n. ",
    "twentyfortysix": "I have deleted all previous files and followed the updated instructions, logged out and looged in.\ntyped:\nuser@webhosting ~ $ wp\n/home/user/git/wp-cli/bin/wp: line 52: which: command not found\n/home/user/git/wp-cli/bin/wp: line 79: /home/user/git/wp-cli/bin/../php/boot-fs.php: Permission denied\n/home/user/git/wp-cli/bin/wp: line 79: exec: /home/user/git/wp-cli/bin/../php/boot-fs.php: cannot execute: Permission denied\nno problem:\nuser@webhosting ~ $ chmod +x /home/user/git/wp-cli/bin/../php/boot-fs.php\nbut still:\nuser@webhosting ~ $ wp\n/home/user/git/wp-cli/utils/../bin/wp: line 52: which: command not found\n/home/user/git/wp-cli/bin/../php/boot-fs.php: line 1: ?php: No such file or directory\n/home/user/git/wp-cli/bin/../php/boot-fs.php: line 3: 5.3: No such file or directory\n/home/user/git/wp-cli/bin/../php/boot-fs.php: line 5: syntax error near unexpected token{'\n/home/user/git/wp-cli/bin/../php/boot-fs.php: line 5: if ( 'cli' !== PHP_SAPI ) {'\nin normal case it says that I'm not in the Wordpress folder but not this time ;(\nthanks for help\n. hello\nuser@webhosting ~/git/wp-cli/php $ php --version\nPHP 5.4.8--pl0-gentoo (cli) (built: Dec 18 2012 18:30:55) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\nuser@webhosting ~/git/wp-cli/php $ php /home/user/git/wp-cli/bin/../php/boot-fs.php\nCould not open input file: /home/user/git/wp-cli/bin/../php/boot-fs.php\nuser@webhosting ~/git/wp-cli/php $\nif the problem is a hosting problem, then forget it I can fix it with the hoster.\nthank you\n. yep it works\nI think it has something to do with the virtual environment.\nJust a question, will you change the wp-cli code that it will looks for the home relative path and not traverse from the root, or your solution is based on something I have no clue about.. I just want to know If I have to speak with the hoster.. which is not a problem.\nThough I think ther will be more people trying the same thing on virtual machines... I've been working lately on couple virtual hostings, or servers and this aka root path has been problem couple times.\nthanks for help\n. Don't know why they did not use it. But it's there now and it works.\nThank you again\n. elegant :)\n. It is hard to say where is the problem, I've submitted ticket on WPML.. Hi, I guess it's over.\nI can't remember now on what website I've been doing this ..it's two years old issue.. ",
    "ashfame": "Hey Scribu,\nIt works now. I have rebooted my machine since then so it must have been about picking changes up. Thank you!\n. ",
    "Android63": "1) Yes, wp.org has later versions.\n2) Yes, I just updated one of them.\n. 1) 3.5.1\n2) 1.6.1 (jigoshop)\n. Trying your steps, I got:\nwp core version\n151\n. Done. Now, from wp core version I get 336\n. OK, I'll try that and get back to you...\n. Done. I launched another Amazon EC2 server instance and it was OK at first (wp core version returned 3.5.1) but the same weirdness came up after I rsynced my existing site over to the new server.\n. OK, I'll try to find it by a process of elimination...\n. It seems to be caused by the better-wp-security plugin. After reinstalling this (from wp-cli), the wp core version problem went away and the wp plugin update-all seemed to work.\nI say \"seemed\" to work because, despite the command line reporting the new version of jigoshop, the WP dashboard still reports it as out of date.\nCorrection: ignore the last para. It's late now, so I'll double-check tomorrow...\n. Hmmm, now I can't reproduce the error. Maybe it's something to do with tables created by the Better WP Security plugin. Perhaps it doesn't like the server's IP address suddenly seeming to change when I move my site. Anyway, at least I now have a workaround in case this problem occurs again.\nTo be on the safe side, I'm going to include a wp core version check in my plugin update script and, if it returns a strange number (without dots), I will deactivate better-wp-security and try again.\nThanks for your help.\n. ",
    "gresakg": "Hi! I confirm, at least in case of multisite install, that the problem is caused by better-wp-security. \nwp plugin list command prints out a list of all plugins with update column set to none\nif I enter this however\nwp plugin list --skip-plugins=better-wp-security\noutdated plugins have 'available' mentioned in the updated column.\nSo I could update all the plugins using the command \nwp plugin update --all --skip-plugins=better-wp-security\nMy core version is 4.0, freeBSD deployment with php v. 5.4.6, wp-cli 0.17.0\n. ",
    "kzap": "i've seen this happen also to me, it seems cache related, like wp-cli is caching a list of plugin versions and you have to get that cache to update somehow\n$ wp plugin list --debug\nDebug: No readable global config found (0.005s)\nDebug: No project config found (0.005s)\nDebug: ABSPATH defined: /PATH/ (0.014s)\nDebug: Begin WordPress load (0.014s)\nDebug: wp-config.php path: /PATH/wp-config.php (0.014s)\nDebug: Loaded WordPress (0.363s)\nDebug: Running command: plugin list (0.364s)\n+----------------------------------------------+----------+--------+----------+\n| name                                         | status   | update | version  |\n+----------------------------------------------+----------+--------+----------+\n| adaptive-images                              | inactive | none   | 0.6.42   |\n| Gravity-Forms-ACF-Field                      | active   | none   | 1.1.0    |\n| advanced-custom-fields-pro                   | active   | none   | 5.3.2.2  |\nthen after:\n$ wp plugin list --skip-plugins=optimizePressPlugin --debug\nDebug: No readable global config found (0.005s)\nDebug: No project config found (0.005s)\nDebug: ABSPATH defined: /PATH/ (0.014s)\nDebug: Begin WordPress load (0.014s)\nDebug: wp-config.php path: /PATH/wp-config.php (0.014s)\nDebug: Loaded WordPress (0.36s)\nDebug: Running command: plugin list (0.36s)\n+----------------------------------------------+----------+-----------+----------+\n| name                                         | status   | update    | version  |\n+----------------------------------------------+----------+-----------+----------+\n| adaptive-images                              | inactive | none      | 0.6.42   |\n| Gravity-Forms-ACF-Field                      | active   | none      | 1.1.0    |\n| advanced-custom-fields-pro                   | active   | available | 5.3.2.2  |\n| aftership-woocommerce-tracking               | active   | available | 1.4.6    |\nI think some how --skip-plugins is making this cache update\nor maybe its bad plugins which affect this,\nusing --skip-plugins=optimizePressPlugin helped solve my problem\n. Yep its annoying and you have to ignoring each plugin one by one\nOn Jan 5, 2017 3:21 AM, \"Joe di Stefano\" notifications@github.com wrote:\n@kzap https://github.com/kzap I just wanted to confirm that the\noptimizepress seems to be causing this issue. If I temporarily disable it,\nthe run wp plugin update --all all plugins get updated.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/370#issuecomment-270461201, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AADzBZwAoGsVSSApf3LXdEjJYqfG8UwRks5rO_EqgaJpZM4AikTP\n.\n. ",
    "joeydi": "@kzap I just wanted to confirm that the optimizepress plugin seems to be causing this issue. If I temporarily disable it, then run wp plugin update --all all plugins get updated.\n. ",
    "collinkrawll": "For me, it was my wp-content/object-cache.php file. I removed the file and then was able to update my plugins.  I ended up replacing it with a different implementation of the object cache. The different implementation doesn't have any issues with wp-cli.. ",
    "minac": "--skip-plugins should skip loading all of them and thus showing the correct update status for each one of them right? Because there are a couple that I can see have updates on the dashboard but wp-cli shows that there is no update for them. :(. ",
    "amandafrench": "Just a note that I use a plugin called Exclude Plugins on my multisite install that lets me exclude plugins for subsite users. Exclude Plugins causes the same error, and deactivating it allows me to update plugins that otherwise are erroneously shown as not installed. . ",
    "j3lamp": "Done, I will keep that in mind in the future.\n. Unrelated: How do you create the PHAR file?\n. I'm going to look into the Travis failure.\n. Okay, the Travis failure doesn't make any sense to me. The root cause appears to be post::get() passing in an array for one of the table cells, which doesn't happen when I test locally. The word press documentation states that the type of every field is either an integer or a string. (http://codex.wordpress.org/Function_Reference/get_post) I suppose the solution is to, somehow, force every value to be a string no matter what.\nAlso if I run post get --format=table on a real WordPress install with a rather long post then I get a sprintf() error. Removing the content from the table fixes that problem so I'm wondering if including post_content in the table output is a good idea.\n. Thanks for your patience and help.\n. I'll agree with that. I was staying similar to post create which accepted a filename  or --post-content.\n. A good idea. I have one question, though, if the argument woud be --format=json that implies other formats, which could be? I'd add in YAML, even though it's a little redundant.\n. That would be easier, except I don't create the whole JSON object in the test, I only included the 3 fields I know. So either I need to fix the test and use assertJsonStringEqualsJsonString() or I need to rename my function and clean it up.\n. ",
    "swalkinshaw": "Sorry bad assumption on my part. Didn't realize that WP only allows you to have wp-config.php one level up of your install.\nThe issue with symlinks still remains. Basically I'm trying out Composer for managing dependencies (WP included) and I'd rather everything reside in vendor. Then I'd symlink vendor/wordpress to just wp.\n. I was actually setting up wp-cli first like an idiot without testing WP itself. However, comparing wp-load.php to how wp-cli looks for the file, there is a difference.\nWP uses dirname to check the parent dir rather than ../wp-config.php and then expanding via realpath.\nhttps://github.com/WordPress/WordPress/blob/master/wp-load.php#L34\nvs\nhttps://github.com/wp-cli/wp-cli/blob/master/php/utils.php#L187\nI'll do an actual test later today but it looks like WP would work symlinked.\n. After testing this won't work anyway (at least not without modifying wp-load.php). __FILE__ expands symlinks which means this is a no go.\nI don't expect you to add an option for an experimental setup so closing this.\n. ",
    "pylanglois": "I did an htop this morning to follow the issue. I also used a little script called ps_mem.py (http://www.pixelbeat.org/scripts/ps_mem.py) to trace the memory over time. \nThe script (https://gist.github.com/pylanglois/5419964) toke 5 to 10 minutes to complete. The server was idle before I started it. During the execution of the script, the number of process \"/usr/sbin/apache2 -k start\" has grown from 5 to more than 20. Each time a new apache thread was started, a new chunck of memory was eaten. At start apache was taking 65MB when the script ends apache was taking more than 2GB. I did a apache2ctl graceful but it did not fix the problem (look like there are some connections that are not closed properly). Only the apache2ctl restart solved the issue and released all memory to get back to normal.\nI don't know where is the issue. Is it wordpress, wp-cli? I am pretty sure that it's not apache. I'm running ubuntu 12.04 and my server is updated every day.\n. Here is the output of wp --info:\nhttps://gist.github.com/pylanglois/5421766\nGood idea on looking at URLs that apache is serving in the process. I still don't understand why Apache appears in the process since wp-cli is a command line tool that use php-cli. \nAfter looking at urls served in the process, no one is related to the wp-cli command. I did a \"strace -fp apache_parent_pid\" trying to find something interesting but my server is too busy right now to be able to find something useful. I will retry Tuesday morning when there is less request.\n. I have cloned my production server to do more test and the issue was not reproduced! The only difference between the 2 was that no request was sent to the cloned server. This lead me to think that the issue is caused by the \"maintenance mode\" of wordpress. Maybe the client connection with apache are not freed properly while wordpress is in maintenance mode. Still don't know if the issue is on the wordpress side or in apache side. But now I'm pretty sure that wp-cli is not responsible of this problem.\nThanks for your help!\n. Just for the records.\nI have tweak my apache2.conf to lower the KeepAliveTimeout and the number of thread in mpm_worker_module and now I can auto update all my wordpress at once with my script. Another solution would be to raise the amount of memory available to my server. \nThanks again!\n. ",
    "jasperf": "Never mind. Was because of Themefuse maintenance plugin . When active it caused this error. When turned off it all started working again.\n. ",
    "coreymckrill": "https://gist.github.com/jupiterwise/5462060\nAnd here is the full stack trace:\n\n. ",
    "PhillipDyhrHobbs": "Wow your fast man,\nWhat do you mean? (I had mamp running)\nwpninja:~ Phillip$ git clone git://github.com/wp-cli/wp-cli.git ~/git/wp-cli\nfatal: destination path '/Users/Phillip/git/wp-cli' already exists and is not an empty directory.\nwpninja:~ Phillip$ cd ~/git/wp-cli\nwpninja:wp-cli Phillip$ ./utils/dev-build\n./utils/dev-build: line 5: php: command not found\nPassword:\nmv: rename composer.phar to /usr/local/bin/composer: No such file or directory\n./utils/dev-build: line 10: composer: command not found\nwpninja:wp-cli Phillip$ git clone git://github.com/wp-cli/wp-cli.git ~/git/wp-cli\nCloning into /Users/Phillip/git/wp-cli...\nremote: Counting objects: 11022, done.\nremote: Compressing objects: 100% (5965/5965), done.\nremote: Total 11022 (delta 5424), reused 10522 (delta 4951)\nReceiving objects: 100% (11022/11022), 2.32 MiB | 316 KiB/s, done.\nResolving deltas: 100% (5424/5424), done.\nwpninja:wp-cli Phillip$ cd ~/git/wp-cli\nwpninja:wp-cli Phillip$ ./utils/dev-build\ncan't find PHP binary\nwpninja:wp-cli Phillip$ \n. still no luck \nwpninja:~ Phillip$ git clone git://github.com/wp-cli/wp-cli.git ~/git/wp-cli\nCloning into /Users/Phillip/git/wp-cli...\nremote: Counting objects: 11022, done.\nremote: Compressing objects: 100% (5965/5965), done.\nremote: Total 11022 (delta 5424), reused 10522 (delta 4951)\nReceiving objects: 100% (11022/11022), 2.32 MiB | 380 KiB/s, done.\nResolving deltas: 100% (5424/5424), done.\nwpninja:~ Phillip$ cd ~/git/wp-cli\nwpninja:wp-cli Phillip$ curl -sS https://getcomposer.org/installer | php\n-bash: php: command not found\nwpninja:wp-cli Phillip$ ./utils/find-php\n/Applications/MAMP/bin/php/php5.3.6/bin/php\nwpninja:wp-cli Phillip$ export WP_CLI_PHP=/path/to/php-binary\nwpninja:wp-cli Phillip$ curl -sS https://getcomposer.org/installer | php\n-bash: php: command not found\n. Your GREAT!!\nLast login: Fri Apr 26 23:17:26 on ttys001\nYou have new mail.\nwpninja:~ Phillip$ ln -s $(./utils/find-php) /usr/bin/php\n-bash: ./utils/find-php: No such file or directory\nwpninja:~ Phillip$ ./utils/find-php\n-bash: ./utils/find-php: No such file or directory\nwpninja:~ Phillip$ cd ~/git/wp-cli\nwpninja:wp-cli Phillip$ ln -s $(./utils/find-php) /usr/bin/php\nln: /usr/bin/php: Permission denied\nwpninja:wp-cli Phillip$ sudo ln -s $(./utils/find-php) /usr/bin/php\nPassword:\nwpninja:wp-cli Phillip$ ln -s $(./utils/find-php) /usr/bin/php\nln: /usr/bin/php: File exists\nwpninja:wp-cli Phillip$ curl -sS https://getcomposer.org/installer | php\n!/usr/bin/env php\nAll settings correct for using Composer\nDownloading...\nComposer successfully installed to: /Users/Phillip/git/wp-cli/composer.phar\nUse it: php composer.phar\nwpninja:wp-cli Phillip$ php composer.phar install\nLoading composer repositories with package information\nInstalling dependencies from lock file\n- Installing mustache/mustache (v2.0.2)\n  Downloading: 100%       \n- Installing wp-cli/php-cli-tools (dev-master f3def25)\n  Cloning f3def25b862bb0c5330a6347c6c04d62a99eb217\nGenerating autoload files\nwpninja:wp-cli Phillip$ \nwpninja:wp-cli Phillip$ wp\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpress or run wp core download.\nwpninja:wp-cli Phillip$ \n. Hi Scribu,\nhere is what I did after reading the above\nhttp://www.your-virtual-ninja.com/jing/2013-06-13_0013.swf\nand then added the line, am I missing something?\nhttp://www.your-virtual-ninja.com/jing/2013-06-13_0015.swf\n. Hi Scribu,\nThat helped but now I have a new issue :)\nProblem 1\n    - Installation request for d11wtq/boris dev-master -> satisfiable by d11wtq/boris[dev-master].\n    - d11wtq/boris dev-master requires ext-pcntl * -> the requested PHP extension pcntl is missing from your system.\n. great!\n. Its at this that I have an issue:\nand then update the value of the WP_CLI_PHP variable in your .bashrc file.\nHow do I do that?\n. Maybe I dont have one?\nhttp://www.your-virtual-ninja.com/jing/2013-07-26_0024.png\n. ## Great! Thankyou\n\nPhillip Dyhr Hobbs\n// WordPress Specialist\nWebsite: http://phillip-dyhr-hobbs.com/\nLinkedIn: http://www.linkedin.com/pub/phillip-dyhr-hobbs/10/65/54b\nURL(til dansker): http://www.your-virtual-ninja.dk/\nOn Jul 26, 2013, at 12:52 AM, Cristi Burc\u0103 notifications@github.com wrote:\n\nYou can use .bash_profile instead.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ryanhellyer": "Any chance this will be added in future?\nIn the mean time, I'll just update via SVN, but via WP CLI would be a little cleaner as it avoid all that pesky .svn garbage littering my file system.\n. ",
    "khromov": "@davidfavor \nIt is possible in MySQL to grant all privileges on a wildcard database prefix.\nSo you could create a non-root user that has the right to create databases that have a prefix, for example: \nuser_db1\nuser_db2\netc.\nCould that work for you?\n. Great snippet @danielbachhuber \nIf anyone is looking to reinstall themes in the same manner, the command is:\nwp theme install $(wp theme list --field=name) --force. @danielbachhuber Sounds like a great idea!. @schlessera I'm not sure the original issue is resolved. Here is an example using WP-CLI 1.3.0:\n```\nwp config create --allow-root --dbname=foo --dbuser=bar --dbpassword=baz\nError: Parameter errors:\n unknown --dbpassword parameter\n```\nMy suggestion was to include a hint when there is a typo like this. No such hint has been implemented?. ",
    "danielmerriott": "bump :-)\nSo from my point of view db create will work 'as is' in most dev or hosted environments where it is needed.\ni.e. if the dbuser specified in wp-config.php is root (hopefully dev environments only!) or if the dbuser specified already exists and already has permissions to create a database (e.g. for example I have used various hosts that allow new databases to be created with a specific prefix - as mentioned above by @khromov). In other hosted environments, the database will likely have to be created via whatever control-panel (or will be created for the user) so db create isn't needed anyway.\nHowever for those who are using their own vhost in non-dev environments, automating the creation of the database and the database user would still be useful. Having the option via command-line switch or config file to either load the current user's own ~/.my.cnf or another defaults file (ala --defaults-file /etc/mysql/debian.cnf) and then go ahead with the database and user creation would pretty much plug the need for automating this part of the wordpress install I think?\n. ",
    "ReflexivR": "Figured it out. Specified the path on line 52 of /wp-cli/bin/wp.\n. ",
    "DavertMik": "Hi, I'm the guy from @codeception twitter.\nLet me oppose. Phar is great stuff when you want to get things up and running. Especially If you don't need bash completions, and hack files. That happens when you use wp-cli as automation tool for Continuous Integration stuff, deployment scripts, etc. \nFor this cases \n- we don't need global install\n- we don't need redownload all packages by their own\n- we don't need completions\n- we don't need file changes\n- we just need to grab it, and execute it locally.\nBtw, this is highly insecure to pipe an external resource to bash.\nHere is how I used @wp-cli in Travis-CI setup script: https://github.com/Codeception/WordPress-plugin-testing/blob/master/setup.sh Maybe I did smth wrong, but I'd really like to simplify that 3 initialization lines into one.\nAnyway, building and maintaining phar is not a hard task. In Codeception we use the phar version as primary, because it's much easier for newbies and for portability. So I think it's a good idea to leave phar as an option.\n. > It kind of is, when you're using Composer heavily.\nReally not a problem. You may still use Composer to load all the dependencies but then you just pack all the vendors into phar. Probably you will need a compiler class like this one: https://github.com/Codeception/Codeception/blob/master/package/Compiler.php\n. Phar is optional distribution. If user wants to install additinal package,\nbetter way to do it via Composer.\nIf there is no purpose in using Composer, then phar is quite enough.\n2013/8/9 Cristi Burc\u0103 notifications@github.com\n\nYou may still use Composer to load all the dependencies but then you just\npack all the vendors into phar.\nNot if we want to allow users to install additional Composer packages. If\nWP-CLI was distributed as a Phar archive, we'd have to have two autoloaders\nand two composer.json files:\nThe one compiled into the Phar archive and a separate one inside ~/.wp-cli,\nwhich users can modify.\nRelated: #602 https://github.com/wp-cli/wp-cli/issues/602\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/pull/439#issuecomment-22395378\n.\n. Awesome! I will include wp-cli into the next part of \"WordPress Testing\" series. \n. \n",
    "kalabro": "I want to set defaults for any wp-cli settings so I can use shorter commands:\n``` bash\nwp core install --url=test2.home --title=\"Testing Wordpress\"\ninstead of\nwp core install --url=test2.home --admin_password=123456 --admin_email=kalabro@ya.ru --title=\"Testing \nWordpress\"\nbecause I use the same email all the time.\n```\n``` bash\nwp core config --dbname=wp_test2\ninstead of\nwp core config --dbname=wp_test2 --dbuser=root --dbpass=password\nbecause I use the same db settings on my dev machine\n```\nI know I can create shell aliases but it simpler for me to store settings in special file rather than in shell configs.\nYes, I came from Drush, too :)\n. @scribu For example here https://github.com/wp-cli/wp-cli/blob/master/php/commands/scaffold.php#L116 slash was added correctly. \n. ",
    "swergroup": "Another use-case for a per-folder config file is this one: we are adding to our projects many wp-cli development/debug commands, and one of our favourites is \"wp reset\": it loops several wp-cli commands to reset db, reinstall wp with some given defaults, init some other project-related routines and so on. We'd love to let those routines be part of the released code \"as is\" and let developers and testers have their own config file and nothing more. \nSpeaking of parameters in config file I'd go for every \"wp core config/install\" args: for each other needs usually wp-config.php is enough. I could have a working proof of concept within days if needed.\nHope it helps, thank you for your amazing work so far anyway!\n. ",
    "rpmsk": "Ya, I did that and error, yes. I'll do it again to get them for you ..\n$ wp core download\nDownloading latest WordPress (en_US)...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0cygwin warning:\n  MS-DOS style path detected: /fwin/ampp/htdocs/aword/F:\\x07mpp\\htdocs\\x07word\n  Preferred POSIX equivalent is: /fwin/ampp/htdocs/aword/F:\\x07mpp/htdocs\\x07word\n  CYGWIN environment variable option \"nodosfilewarning\" turns off this warning.\n  Consult the user's guide for more details about POSIX paths:\n    http://cygwin.com/cygwin-ug-net/using.html#using-pathnames\ntar: F\\:\\ampp\\\\htdocs\\aword: Cannot open: Not a directory\ntar: Error is not recoverable: exiting now\n  2 4895k    2  143k    0     0   136k      0  0:00:35  0:00:01  0:00:34  142k\ncurl: (23) Failed writing body (0 != 16384)\n. Sorry. The '/fwin' part of the path will confuse you. I set that up to shorten windows paths in /etc/fstab with ..\n     \nC:/ /cwin ntfs binary,posix=0,nouser 0 0\nF:/ /fwin ntfs binary,posix=0,nouser 0 0\nOk. I just read you last 2 replies. thank you. If you get any more ideas I will check them all! Thank you.\n. I will leave one more note and then see if this rookie (= me) can do anything. No good to start debug in core.php\nwp core version; wp home; etc; same result which is getting output from here ..\n.composer\\vendor\\wp-cli\\wp-cli\\php\\WP_CLI\\Runner.php                \nat line 305 ..\n                \"This does not seem to be a WordPress install.\\n\" .\n. It works! I had many doubts. Tough sledding to get stuff to work in windows when it was designed for linux.\nIn cygwin here are some results:\n$ wp theme status\n4 installed themes:\n  A autobahn     1.5\n  I genesis      1.9.2\n.. // ..  \nI have a band-aide for it at least. The paths were being double in ~/.composer/vendor/wp-cli/wpcli/WP_CLI/Runner.php in function set_wp_root. I simple commented out the following:\n/*if ( !empty( $config['path'] ) ) {\n        if ( self::is_absolute_path( $config['path'] ) )\n            $path = $config['path'];\n        else\n            $path .= '/' . $config['path'];\n    }*/\nHere is an example of what was in the ABSPATH constant that is defined in set_wp_root before the commenting out ..\nABSPATH: 'F:\\ampp\\htdocs\\myword/\\F:\\ampp\\htdocs\\myword/'\nI am thrilled to use wp-cli in windows. Nice!\nCan you tell why the absolute path boolean does not work here? Would be nicer yet to fix the code ..\n. Yes, your code works over here. That's better. The bandaide is in the\ntrash. Thank you :)\nOn Sun, May 12, 2013 at 6:39 AM, Cristi Burc\u0103 notifications@github.comwrote:\n\nTry to apply c8a5b12https://github.com/wp-cli/wp-cli/commit/c8a5b120904579f3e3e7debbd63e8788ad37a12amanually and see if it works without the band aid.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/447#issuecomment-17778067\n.\n. \n",
    "codingfutures": "add_command was generating method not found error in latest stable pulled from curl http://wp-cli.org/installer.sh\nSo might be worth updating your docs until the next stable release.\n. codingfutures:public_html timnash$ wp example hello bob\nPHP Fatal error:  Call to undefined method WP_CLI::add_command() in /Users/timnash/Sites/ym_trunk/public_html/wp-content/plugins/test_wp-cli.php on line 34\nPHP Stack trace:\nPHP   1. {main}() /Users/timnash/git/wp-cli/src/php/wp-cli/wp-cli.php:0\nPHP   2. require_once() /Users/timnash/git/wp-cli/src/php/wp-cli/wp-cli.php:90\nPHP   3. require_once() /Users/timnash/Sites/ym_trunk/public_html/wp-load.php:29\nPHP   4. require_once() /Users/timnash/Sites/ym_trunk/public_html/wp-config.php:90\nPHP   5. include_once() /Users/timnash/Sites/ym_trunk/public_html/wp-settings.php:195\nFatal error: Call to undefined method WP_CLI::add_command() in /Users/timnash/Sites/ym_trunk/public_html/wp-content/plugins/test_wp-cli.php on line 34\nCall Stack:\n    0.0005     678400   1. {main}() /Users/timnash/git/wp-cli/src/php/wp-cli/wp-cli.php:0\n    0.0028     882224   2. require_once('/Users/timnash/Sites/ym_trunk/public_html/wp-load.php') /Users/timnash/git/wp-cli/src/php/wp-cli/wp-cli.php:90\n    0.0029     900272   3. require_once('/Users/timnash/Sites/ym_trunk/public_html/wp-config.php') /Users/timnash/Sites/ym_trunk/public_html/wp-load.php:29\n    0.0035    1031552   4. require_once('/Users/timnash/Sites/ym_trunk/public_html/wp-settings.php') /Users/timnash/Sites/ym_trunk/public_html/wp-config.php:90\n    0.2253   35080464   5. include_once('/Users/timnash/Sites/ym_trunk/public_html/wp-content/plugins/test_wp-cli.php') /Users/timnash/Sites/ym_trunk/public_html/wp-settings.php:195\n. At the time the example code from the cookbook page. swapping add_command to addCommand fixed the issue. Hence the suggestion to update the docs :)\n. ",
    "cyberhobo": "Good idea. Really we ought to skip any primary key column I suppose. But for now how about hardcoding ID and adding other columns from the parameter?\n. Well maybe it's not difficult...\n. Ha - it was already skipping primary keys. The code is making happiness.\n. I didn't think it was that easy - I'll include a test with my next request.\n. The test that fails makes 1000 replacements in the guid column, changing http://example.com to http://newdomain.com. The bug happens when the iterator then tries to get the next chunk using WHERE guid LIKE %http://example.com% LIMIT 1000 OFFSET 1000, but the columns that have been changed no longer match the LIKE. There are 200 matches left to change still, but they are now in the first chunk and the OFFSET 1000 skips them.\n. The tests for this are slow. Would it be worth making chunk size a parameter to facilitate smaller tests?\n. I took a stab at handling this in the iterator instead.\n. I see it - just above fields is set to array( $primary_key, $col ), so the first column is null. But I worry about the update later on. It seems to me if null is passed for the $where argument, no updates will be made. I think the current strategy requires a primary key.\n. In the case of wp_signups, there is a field ('meta') that contains serialized data. Option a) seems safer to me. Maybe instead of zero column counts in the output for that table we could have an output row indicating the table was skipped.\n. ",
    "jplew": "Hi Scribu:\nthanks for the personal reply, what a privilege. :)\nI tried your suggestion but it gives me the exact same error message as\nbefore:\n!/usr/bin/env php\n\nSome settings on your machine make Composer unable to work properly.\nMake sure that you fix the issues listed below and run this script again:\nThe detect_unicode setting must be disabled.\nAdd the following to the end of your php.ini:\n    detect_unicode = Off\nA php.ini file does not exist. You will have to create one.\nIf you can not modify the ini file, you can also run php -d option=value\nto modify ini values on the fly. You can use -d multiple times.\n\nCheers,\n-JP\nOn Wed, May 22, 2013 at 6:23 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nYou should try manually installing Composer:\ncd ~/.composer\ncurl https://getcomposer.org/installer | php\nand follow the instructions that it gives you.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/466#issuecomment-18275947\n.\n. That worked. As per your suggestion I ran this command, and composer was installed no problem:\n\ncurl https://getcomposer.org/installer | /Applications/MAMP/bin/php/php5.4.4/bin/php\nHowever, now when I run this:\ncurl http://wp-cli.org/installer.sh | bash\neverything installs fine except the Boris package:\n```\nInstalling the Boris package...\n\ncomposer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nYour requirements could not be resolved to an installable set of packages.\n  Problem 1\n    - Installation request for d11wtq/boris dev-master -> satisfiable by\nd11wtq/boris[dev-master].\n    - d11wtq/boris dev-master requires ext-pcntl * -> the requested PHP\nextension pcntl is missing from your system.\nInstallation failed, reverting composer.json to its original content.\nWP-CLI files have been succesfully installed.\nTo test, run:\n/Users/[username]/.composer/bin/wp --info\n```\nSorry to keep bugging you, but any ideas what the problem is?\n. Hi Scribu:\nI know, the git commit message problem annoys me to no end! I just use git commit -m \"blah blah\"\nI just submitted the pull request.\nAlso, since this is my first time, I had a question about contributing. On the Contribute page it says:\n\n\nFork the repository.\nClone the repo and run ./utils/dev-build.\nMake the code changes in your fork.\nOpen a pull request.\n\n\nFor step 2, am I supposed to clone the repo to any arbitrary location to my drive? If so, then how do I test the changes? It seems that in order to test, I need to use the clone that already exists at ~/.composer/vendor/wp-cli/wp-cli. Then I upstream that to my github fork, is that correct?\n. I discovered a simple solution for MacVim users. Vim can be run with a -f flag which triggers Foreground mode. This has the same effect as using non-gui vim: the shell waits for the session to complete. All I had to do was change my EDITOR to \"mvim -f\". This works for git commits too, by the way. More details here: http://stackoverflow.com/questions/4737381/git-editor-not-working-with-macvim, and also from the vim documentation: \n-f\nForeground.  For the GUI version, Vim will not fork  and  detach  from  the shell  it was started in...This option should be used when Vim is executed by a program  that will  wait  for  the  edit session to finish (e.g. mail).\nThe cli version of Textmate has a \"mate -w\" flag too, incidentally. If anyone else wants their editor supported they can reopen this issue, otherwise it's solved for me.\n. no problem. I've been busy lately, hope I can contribute something to this\nproject in the next while.\nOn Wed, Jul 24, 2013 at 11:50 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nThat's pretty much the best possible solution. Thanks for sharing!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/505#issuecomment-21505096\n.\n. Yeah, I get the exact same error when I switch to vim.\nHowever, with some quick tests, I did get it to work with TextEdit and BBEdit, and there's no reason we can't make it compatible with SublimeText, TextMate, etc...\n\nSo what do you think, am I a fringe case or is this a feature worth supporting? \nAs you hint at, wouldn't it be possible in the WP-CLI config to set an option like \"using-non-terminal-editor= true | false\", then use separate launch functions for each of them?\n. > You could add a flag so that one could run something like wp post edit --gui 123, yes.\nOne option is to simply add a flag. In this case --gui would use EDITOR and launch the alternate GUI launch function.\nAnother option is to add an optional associative argument, which would be specified like this: wp post edit --gui=MacVim 123\nThis would allow the user to specify a text editor on the fly. Without an argument it would still fall back on EDITOR.\nDo you agree the second option is preferable?\n. alright cool, I'll try to make a new commit later this week\n. problem solved on user end, no need to edit code: https://github.com/wp-cli/wp-cli/issues/505\n. I'm having a bit of trouble right now getting ronn installed, but this is good to know for future reference\n. that doesn't seem too hard, I will work on it when I get the chance\n. Just followed the homepage instructions for updating:\ncd ~/.composer\nphp composer.phar self-update\nphp composer.phar update --no-dev\n. well now there's nothing to update: \n[ 18:12:45 !511 ] $  php composer.phar update --no-dev\nLoading composer repositories with package information\nUpdating dependencies\nNothing to install or update\nGenerating autoload files\nWhat should I do, search the log files for the output?\nI should note however that I decided to do a fresh install of version 11.1 using curl https://raw.github.com/wp-cli/wp-cli.github.com/master/installer.sh | bash, updated all my PATHS in .bash_profile, and now everything is working fine (from the new ~/.wp-cli directory).\nEven though WP-CLI works fine now, it still throws up this error every time I run it, even when I configure the core wp-config with real values:\nNotice: Undefined index: HTTP_HOST in /Users/[username]/.wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php(20) : eval()'d code on line 26\nAlso, I noticed that the installer tells the user to update .bashrc, while the homepage instructions says to add the bash completion lines to .bash_profile. Is this is intentional? Intuitively it would make more sense to pick one or the other, no? \n. here is line 26:\ndefine( 'WP_CONTENT_DIR', dirname( FILE ) . '/content' );\nOn Wed, Aug 14, 2013 at 6:31 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nAlso, I noticed that the installer tells the user to update .bashrc, while\nthe homepage instructions says to add the bash completion lines to\n.bash_profile.\nFixed.\nNotice: Undefined index: HTTP_HOST in\n/Users/jkirtan/.wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php(20) : eval()'d\ncode on line 26\nIt seems like there's some funky code in your wp-config.php file, at line\n26. Could you paste that block of code?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/676#issuecomment-22633535\n.\n. Line 27!\ndefine( 'WP_CONTENT_URL', 'http://' . $_SERVER['HTTP_HOST'] . '/content' );\n\nOn Wed, Aug 14, 2013 at 7:07 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nThat's not it (it's eval's fault). Look for a line that contains\n'HTTP_HOST'\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/676#issuecomment-22635729\n.\n. oh that's right, my bad\n. ok, this isn't a wp-cli problem at all. The errors are indeed logging to my php_error.log file. I guess now I'm just looking for a way for them to show up in STDOUT.\n. ok, just thinking aloud now. I just learned that the following command reports syntax errors in a file:\n\nphp -l import-script.php\nThis is exactly what I want output to my shell when a script fails. Anyone have an idea how to do that?\n. ok.\nsorry if this is beyond the scope of this forum, but do you know how to output my errors to the terminal? \n. ok thanks\n. ",
    "tareq1988": "Okay, thanks.\n. ./utils/dev-build fixed the problem. Thanks :-)\n. Haven't tried to hack around wp-cli. But I would like to give it a shot.\n. Sure, worth to give it a try ;)\n. Looks like @trepmal took over this :-/\n. ",
    "hipnoddic": "Just installed WP-CLI and when I try to execute commands I get the redirect error:\nWarning: Some code is trying to do a URL redirect. Backtrace:\n0  WP_CLI\\Utils\\wp_redirect_handler(http://mysite.com/)\n1  call_user_func_array(WP_CLI\\Utils\\wp_redirect_handler, Array ([0] => http://mysite.com/)) called at [/Applications/MAMP/htdocs/mysite/wp-includes/plugin.php:173]\n2  apply_filters(wp_redirect, http://mysite.com/, 302) called at [/Applications/MAMP/htdocs/mysite/wp-includes/pluggable.php:865]\n3  wp_redirect(http://mysite.com/, 302) called at [/Applications/MAMP/htdocs/mysite/wp-includes/pluggable.php:923]\n4  wp_safe_redirect(http://mysite.com/) called at [/Applications/MAMP/htdocs/mysite/wp-content/plugins/woocommerce/admin/woocommerce-admin-functions.php:258]\n5  woocommerce_prevent_admin_access()\n6  call_user_func_array(woocommerce_prevent_admin_access, Array ([0] => )) called at [/Applications/MAMP/htdocs/mysite/wp-includes/plugin.php:406]\n7  do_action(admin_init) called at [/Users/username/.wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php:35]\n8  include(/Users/username/.wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php) called at [/Users/username/.wp-cli/vendor/wp-cli/wp-cli/php/boot-fs.php:17]\nI passed the user flag (with an admin user), but I still get the same error: \nwp export --dir=/tmp/ --user=myadmin\nAny other options?  \nWP-CLI version: 0.11.1\n. The dev version worked for me - thanks for the quick (and very helpful) response!\nWP-CLI version: 0.12-alpha2\n. ",
    "eyedarts": "I'm using WP-CLI version: 0.12-alpha2 and am still having this problem whether I pass the admin user or not. The conflicting plugin seems to be Simple IP Ban (http://www.sandorkovacs.ro/ip-ban-wordpress-plugin/) because I'm able to use WP-CLI once I deactivate that plugin. Do you have any suggestions for how I might be able to use both WP-CLI and this plugin? Thanks.\n. Thanks for looking into this. I don't know enough PHP to be able to help much, sorry.\n. ",
    "wojsmol": "Hello\n@scribu I found this plugin on wordpress.org - http://wordpress.org/plugins/simple-ip-ban/\nRegards\n. Welcome\nToday I tested to pass multiple values according to this syntax. The values are correctly passed to the database, but I have two minor comments:\n1 If the value contained in the database, and the value set by the WP-CLI are the same WP-CLI would return a message.\n2 A good idea would be to add to the man page describing the wp option example  for upgrade options with a few values.\nRegards\n. Hello\nIs there would be a possibility to add such features in future versions of WP-CLI? For instance via an additional switch.\nRegards\n. Clarification: In my first comment I used the word \"salt\", instead I should use the term \"security keys\".\n. I came up with yet another idea that should work even in the current version of WP-CLI. Using awk first read the old data into the database to the variables then by mv create a backup of the old wp-config.php file, and finally use the wp core config to create a new wp-config.php file that already contains security keys. The only problem would be the possible need for set WPLANG because from what I see you can not directly pass to the wp core config locale parameter.\n. My use case: I have a lot of WP installed before I started using WP-CLI by a shell script that does not generate security keys. Now I want to add security keys to these Wordpress installations, but because of the amount adding them manually by editing the wp-config.php would take a very long time.\n. As I mentioned in this comment https://github.com/wp-cli/wp-cli/issues/543#issuecomment-19861336 I could generate a new file wp-config.php for these domains using the wp core config if as the optional parameter to this command could pass a parameter locale.\n. This commit solve situations for packages with integrated language, but not if the language was manually added.\n. I do not know well enough php to add this parameter.\n. I see differences between the two commands even while waiting for the results in the console. As if wp plugin status resulted in a connection to wordpress.org to check the version and wp plugin update-all benefited from the cache - I had in the console results much faster.\n. In earlier versions of WP-CLI a command wp plugin update-all was enough.\n. Hello\nIMHO commands wp core update and wp core update-db should work whenever possible in the WP versions lower than 3.4.\nRegards\n. Hello\nStrictly speaking lockdown wp admin plugin generates a 404 error when calling the login form at /wp-admin/ and another plugin generates a 301 redirect to the blog main page when an 404 error occurs. Here is the backtrace after entering the wp plu<TAB>:\n```\nWarning: Some code is trying to do a URL redirect. Backtrace:\n0  WP_CLI\\Utils\\wp_redirect_handler(http://domain.com)\n1  call_user_func_array(WP_CLI\\Utils\\wp_redirect_handler, Array ([0] => http://domain.com)) called at [/home/**/domains/****/public_html/wp-includes/plugin.php:173]\n2  apply_filters(wp_redirect, http://domain.com, 301) called at [/home/**/domains/domain.com/public_html/wp-includes/pluggable.php:865]\n3  wp_redirect(http://domain.com, 301) called at [/home/**/domains/domain.com/public_html/wp-content/plugins/link-juice-keeper/link-juice-keeper.php:60]\n4  LinkJuiceKeeper->status_header(HTTP/1.0 404 Not Found, 404)\n5  call_user_func_array(Array ([0] => LinkJuiceKeeper Object (),[1] => status_header), Array ([0] => HTTP/1.0 404 Not Found,[1] => 404)) called at [/home/**/domains/domain.com/public_html/wp-includes/plugin.php:173]\n6  apply_filters(status_header, HTTP/1.0 404 Not Found, 404, Not Found, HTTP/1.0) called at [/home/**/domains/domain.com/public_html/wp-includes/functions.php:888]\n7  status_header(404) called at [/home/**/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:619]\n8  WP_LockAuth->throw_404() called at [/home/**/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:316]\n9  WP_LockAuth->setup_hide_admin() called at [/home/**/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:66]\n10 WP_LockAuth->__construct() called at [/home/**/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:671]\n11 ld_setup_auth()\n12 call_user_func_array(ld_setup_auth, Array ([0] => )) called at [/home/**/domains/domain.com/public_html/wp-includes/plugin.php:406]\n13 do_action(init) called at [/home/**/wp-cli/vendor/wp-cli/wp-cli/php/wp-settings-cli.php:304]\n14 require(/home/**/wp-cli/vendor/wp-cli/wp-cli/php/wp-settings-cli.php) called at [/home/****/wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php:29]\n15 include(/home/**/wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php) called at [/home/****/wp-cli/vendor/wp-cli/wp-cli/php/boot-fs.php:17]\n```\nRegards\n. When calls wp plugin status --user=adminname I get the following backtrace:\n```\nWarning: Some code is trying to do a URL redirect. Backtrace:\n0  WP_CLI\\Utils\\wp_redirect_handler(http://domain.com)\n1  call_user_func_array(WP_CLI\\Utils\\wp_redirect_handler, Array ([0] => http://domain.com)) called at [/home/*/domains/domain.com/public_html/wp-includes/plugin.php:173]\n2  apply_filters(wp_redirect, http://domain.com, 301) called at [/home/*/domains/domain.com/public_html/wp-includes/pluggable.php:865]\n3  wp_redirect(http://domain.com, 301) called at [/home/*/domains/domain.com/public_html/wp-content/plugins/link-juice-keeper/link-juice-keeper.php:60]\n4  LinkJuiceKeeper->status_header(HTTP/1.0 404 Not Found, 404)\n5  call_user_func_array(Array ([0] => LinkJuiceKeeper Object (),[1] => status_header), Array ([0] => HTTP/1.0 404 Not Found,[1] => 404)) called at [/home/*/domains/domain.com/public_html/wp-includes/plugin.php:173]\n6  apply_filters(status_header, HTTP/1.0 404 Not Found, 404, Not Found, HTTP/1.0) called at [/home/*/domains/domain.com/public_html/wp-includes/functions.php:888]\n7  status_header(404) called at [/home/*/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:619]\n8  WP_LockAuth->throw_404() called at [/home/*/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:316]\n9  WP_LockAuth->setup_hide_admin() called at [/home/*/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:66]\n10 WP_LockAuth->__construct() called at [/home/*/domains/domain.com/public_html/wp-content/plugins/lockdown-wp-admin/lockdown-wp-admin.php:671]\n11 ld_setup_auth()\n12 call_user_func_array(ld_setup_auth, Array ([0] => )) called at [/home/*/domains/domain.com/public_html/wp-includes/plugin.php:406]\n13 do_action(init) called at [/home/*/wp-cli/vendor/wp-cli/wp-cli/php/wp-settings-cli.php:304]\n14 require(/home/*/wp-cli/vendor/wp-cli/wp-cli/php/wp-settings-cli.php) called at [/home/***/wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php:29]\n15 include(/home/**/wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php) called at [/home/*/wp-cli/vendor/wp-cli/wp-cli/php/boot-fs.php:17]\n```\nRegards\n. Fixed backtrace in the comment https://github.com/wp-cli/wp-cli/issues/582#issuecomment-20572193 - missed one line at the end.\n. Hello\nI found a workaround for this problem. If at the beginning of the script you change through mysql query value of the option ld_hide_wp_admin to the value for the disabled state then WP-CLI is operating normally.  At the end of the script just change the value of this option by WP-CLI.\nRegards\n. Hello\n\nwp core download --force is basically what people did manually, before automatic updates landed in Core.\n\n@scribu this sentence is IMHO in contrary to the Wordpress documentation http://codex.wordpress.org/Updating_WordPress#Manual_Update. Is it possible to download instead latest.zip package compliant to the above article?\nRegards\n. Hello\nI set WP_CLI_PHP in .profile, but since version 0.11.0 provide a path to php.ini via the parameter -c causes the error.  How in version 0.11.0 properly pass the path to php.ini?\ngreeting\n. Hello\nIf in .profile I have:\nexport WP_CLI_PHP='/usr/local/php5.3/bin/php -c /usr/local/php53.ini';\nFor example wp --info returns\nuser@server:~$ wp --info\n/home/user/wp-cli/bin/wp: line 66: /usr/local/php5.3/bin/php -c /usr/local/php53.ini: No such file or directory\n/home/user/wp-cli/bin/wp: line 66: exec: /usr/local/php5.3/bin/php -c /usr/local/php53.ini: Can not start: No such file or directory\nGreeting\n. Hello\nIf I change the line 66 in file /home/user/wp-cli/vendor/wp-cli/wp-cli/bin/wp from\nexec \"$php\" \"$SCRIPT_PATH\" \"$@\"\nto\nexec $php \"$SCRIPT_PATH\" \"$@\"\nand in .profile I have:\nexport WP_CLI_PHP='/usr/local/php5.3/bin/php -c /usr/local/php53.ini';\nthen according to my preliminary tests WP-CLI is operating normally.\nRegards\n. Hello\nI know that, I followed quite closely the changes between WP-CLI 0.10.2 and WP-CLI 0.11.0. Unfortunately, this change means that additional parameters passed by WP_CLI_PHP are treated as part of the path to php.\nGreeting\n. Hello\nThis proposal sounds very good. I have an additional question: Is WP_CLI_PHP_INI is available at the WP-CLI 0.11.0 and what paths are taken into account? I ask because in my case WP-CLI is installed at the account level, but used the php.ini supplied by the server.\nGreeting\n. Welcome\nRegarding https://github.com/wp-cli/wp-cli/issues/582 workaround is to temporarily disable blocking /wp-admin/ from a bash script and re-enable the feature after as last command by WP-CLI.\nGreetings\n. Hello\nFrom what I can see at least at this stage can not manage individual widgets.\nRegards\n. Hello\nI have tried many options, including writing arguments without quotes. IMHO the problem is related to the generation of security keys.\nRegards\n. Hello\n@th3fallen see https://github.com/wp-cli/google-sitemap-generator-cli/blob/master/google-sitemap-generator-cli.php#L16\nRegards\n. Hello\nDespite the download a file from https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar get the same checksum as @wvega in https://github.com/wp-cli/wp-cli/issues/942?source=cc#issuecomment-31903891.\nRegards\n. Hello\n[USER]@server:~/bin$ shasum wp-cli.phar\ne5a6cfaf739bc5f382d89ddfc650c4bc756374fb  wp-cli.phar\nadditionally receives the following error when trying to execute wp-cli.phar --info\n```\nWarning: Unexpected character in input:  '\\' (ASCII=92) state=1 in phar:///home/[USER]/bin/wp-cli.phar/php/wp-cli.php on line 13\nWarning: Unexpected character in input:  '\\' (ASCII=92) state=1 in phar:///home/[USER]/bin/wp-cli.phar/php/wp-cli.php on line 13\nParse error: syntax error, unexpected T_STRING in phar:///home/[USER]/bin/wp-cli.phar/php/wp-cli.php on line 13\n```\nRegards\n. Hello\nThis error may be partly due to server configuration - already reported to the provider - will write again when I get a response from technical support.\nRegards\n. Hello\nIt seems that the same path to php and php.ini defined in ~/.profile work for version based  on Composer and do not work for the version based on the phar archive.\nRegards\n. Hello\nThis script should rather look like this, if I understand the idea correctly\n``` bash\n!/usr/bin/env bash\nexec \"${WP_CLI_PHP}\" $WP_CLI_PHP_ARGS /path/to/wp-cli.phar \"$@\"\n```\nRegards\n. Hello\nIMHO the script should be added to the repository and the corresponding information to the https://github.com/wp-cli/wp-cli/wiki/Alternative-Install-Methods or http://wp-cli.org/\nRegards\n. Hello\n@santagada How do you plan to handle properly serialized data?\nRegards\n. @danielbachhuber current wp-cli homebrew formula is here. From what I can see the name of the repository has been changed so that this part of the wiki needs to be corrected.\n. I do not know, I found just a new address to the formula through google. I do not use homebrew so its not tested.\n. @danielbachhuber @torounit for WP_VERSION=latest assume latest tag - see http://stackoverflow.com/a/5245544\n. @Justin-Maxwell see https://github.com/wp-cli/wp-cli/issues/956\n. @roscom see https://github.com/wp-cli/wp-cli/issues/1758\nCC: @szepeviktor \n. @IAmJulianAcosta see http://wp-cli.org/commands/core/config/\n\n[--skip-check]\n    If set, the database connection is not checked.\n. @jorfermo --debug Show all PHP errors; add verbosity to WP-CLI bootstrap\n. To avoid such errors in my script I use\n\nwp core download\nwp core install (...)\nwp core language install pl_PL --activate\n. @jschank Show results of\necho $IFS\n. @lordspace REST API is available as a command in the WP-CLI so there should not be a problem.\n. @diggy Please see https://github.com/diggy/wp-cli/pull/1\n. @Deaton64 use wp-cli core verify-checksums --path=$sitename &> /tmp/wpcore.txt see http://tldp.org/LDP/abs/html/io-redirection.html\n. The same parameter would be needed for wp theme install.\n. @lordspace see https://github.com/wp-cli/wp-cli/issues/2435#issuecomment-178812787\n. @davidfavor This error occurs during the analysis by the wp-cli wp-config.php file.\n. @ClodClod Please describe the problem.. @twentyfortysix Your issue description is clear. I ask @ClodClod :smile: . @schlessera There is chenge in https://github.com/Roave/SecurityAdvisories see https://github.com/wp-cli/wp-cli/pull/4179/files. The separate problem is that the script did not show the package as changed in PR coomment.. @mikeyb31 Please delete /home/vagrant/.wp-cli/cache/core/wordpress-4.8.1-en_GB.tar.gz cache file and run again second set of commands.. on enviramant with error plese check if zlib php extesion is enabled\nreference https://github.com/composer/composer/issues/984. @danielbachhuber see http://www-01.ibm.com/support/docview.wss?uid=swg21270445. @danielbachhuber I do not have a better idea than opening a ticket on the right tracker and request to re-create the archive.. @swissspidy  see \nhttps://github.com/wp-cli/entity-command/blob/4cbd6081319b2f4bee8d9ec6bbfe6317eaef9385/features/bootstrap/FeatureContext.php#L63-L64\n\nThe directory that the WP-CLI cache (WP_CLI_CACHE_DIR, normally \"$HOME/.wp-cli/cache\") is set to on a \"Given an empty cache\" step.\nVariable SUITE_CACHE_DIR. Lives until the end of the scenario (or until another \"Given an empty cache\" step within the scenario).. @schlessera I can prepare PR in few minutes if you wont.. See https://github.com/wp-cli/wp-cli/issues/631 for discussion when WP_CLI_PHP_ARGS was added.. I merged changes from https://github.com/wp-cli/wp-cli/pull/4843  on https://github.com/wp-cli/wp-cli/pull/4843/commits/d9216fa77a3ef4172d0979600b619501dae6d6cf to this PR.. should be fixed now - thanks. This was merged as part of https://github.com/wp-cli/wp-cli/pull/4854. @schlessera extension command  v1.2.1 is not visible on https://packagist.org/packages/wp-cli/extension-command (thanks to @GaryJones for help with determining this). @ds250568 Please see last sentence  in @schlessera reply.. @schlessera IMHO no need for public here https://github.com/wp-cli/wp-cli/blob/64228901d29810ddc3559929d5c933803fbd4a17/php/utils.php#L1493. @schlessera Maybe comment on https://github.com/composer/composer/issues/7516 will be a good idea?. paste config minus any secrets.. https://make.wordpress.org/cli/handbook/config/#config-files - see how example file is formatted . @schlessera see https://travis-ci.org/wp-cli/automated-tests/jobs/412157685#L510-L513. Hi\nPlease see WP-CLI r2.0 release blog post, for normal use with all commands remove wp-cli/wp-cli and require wp-cli/wp-cli-bundle. @lordspace Do you use in wp-config.php values of $_SERVER['SERVER_ADDR'] and $_SERVER['REQUEST_URI']? Whole $_SERVER is not set in cli environment.. @jukefr Please provide commands you are executing immediately before error.. curl --silent --show-error https://getcomposer.org/installer | php &&\\\n    php composer.phar config --global github-oauth.github.com $GITHUB_OAUTH &&\\\n    php composer.phar global require wp-cli/wp-cli-bundle:2.0.0 &&\\\n  #  /var/www/.composer/vendor/bin/wp package install jukefr/wp-cli-media-cleanup &&\\\n #   /var/www/.composer/vendor/bin/wp package install typisttech/image-optimize-command:0.1.2 &&\\\n #  /var/www/.composer/vendor/bin/wp package install wp-cli/profile-command:0.3.0\nSee WP-CLI v2.0.0 Release Notes. Packages require update for WP-CLI v2.00.. @thrijith Please see https://github.com/wp-cli/wp-cli/blob/b208ed22287134462a9899df38d65d3ce72de2cc/features/config.feature#L15-L36 for exaple. @thrijith We have slit backlog on travis right now. Please post error here on join on #clii slack channel if passible.. @KushibikiMashu Please see my PR to your branch.. @KushibikiMashu Please see https://github.com/KushibikiMashu/wp-cli/pull/2 for remaining tests fixes.. @SeijiSensei Minimum php version required for wp-cli 2.x is 5.4.x.. unexpected [ is caused by use of short array syntax [] instead of array(). Short array syntax was introduced in php 5.4.x.. @swissspidy See this systems task for root cause of the 404 errors.. fixed in https://github.com/wp-cli/wp-cli/pull/4906/commits/4a782e0b8822dcd941c7812fb0956cd0bec2545e. fixed in https://github.com/wp-cli/wp-cli/pull/4906/commits/4a782e0b8822dcd941c7812fb0956cd0bec2545e. @swissspidy config.yml is valid config filename but not in this location.l This can be fixed by changing \nWhen I run `wp cli alias get @foo`\nto\nWhen I run `WP_CLI_CONFIG_PATH=config.yml wp cli alias get @foo`. We have a similar tests in this scenario https://github.com/wp-cli/wp-cli/blob/a0c973927761ea84f79ac49c976931808f129e03/features/aliases.feature#L151. \n",
    "quinncomendant": "I notice that Warning: Some code is trying to do a URL redirect will also occur if WP_HOME or WP_SITEURL is empty (e.g., because it's trying to get it from HTTP_HOST which isn't available on the CLI).. ",
    "ergonlogic": "These changes pass all test expect a couple 'help --gen' ones. I believe these are unrelated, and appear to be due to lacking the 'ronn' gem.\n. As things stand, there may not be such a test-case without patching Wordpress itself. Here's what I'm trying to accomplish: http://core.trac.wordpress.org/ticket/24563. The scenario described in the second comment (though I haven't tested it yet, could form a good test-case.\n. ",
    "brianfeister": "This issue is kind of holding me back - any chance of getting this merged to master.  The regex check seems to work fine.\n. Thanks @scribu!  Sorry I wasn't able to find it before :/\n. vagrant@artsite-vagrant:/vagrant$ wp --info\nPHP binary: /usr/bin/php5\nPHP version:    5.4.9-4ubuntu2.3\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root:    /home/vagrant/.wp-cli/vendor/wp-cli/wp-cli\nWP-CLI config:  /vagrant/wp-cli.local.yml\nWP-CLI version: 0.12.1\n. Helpful command btw - thanks for that!  wp-cli.local.yml is pointing /srv/www --> /vagrant/.  Does WP-CLI care about the differing base paths between /vagrant/ and /srv/www/?\n. Thanks @scribu - I'm mounting WP-CLI via NFS in my Vagrantfile so I already have access to the CLI source for debugging.   Just for experimenting, I overrode $path in utils.php at this line.  \nBut you're saying probably not a path issue, so that's fine.\nI reverted all of my (intentional) debugging changes inside /WP-CLI and the git diff comes clean.  \nI also re-installed WP-CLI per your suggestion, but \ncurl https://raw.github.com/wp-cli/wp-cli.github.com/master/installer.sh | bash\nIs what I was already using via Salt Stack to install WP-CLI.\n. Sorry for the confusion!  Followed your instructions, installed the dev build successfully, and I have the same error as with the previous version installed via curl https://raw.github.com/wp-cli/wp-cli.github.com/master/installer.sh | bash.\n. Ouch, I didn't realize the eval()'d code on line 104 was pointing to wp-config.php line 104.  Really sorry!  :disappointed: \nI had this code block, which is I think some legacy junk for handling functionality previously not available in WP-CLI.  I was trying to reference this to a github commit or PR but couldn't find where the discussion had happened previously:\n```\nif ( ! defined( 'WP_INSTALLING' ) || ! WP_INSTALLING ) {\n    define('WP_ALLOW_MULTISITE', true);\n    if ( ! defined( 'WP_CLI' ) || ( defined( 'WP_CLI' )\n    && array( 'core', 'install-network' ) != WP_CLI::$runner->arguments\n    && array( 'core', 'is-installed' ) != WP_CLI::$runner->arguments ) ) {\n        define( 'SUBDOMAIN_INSTALL', true );\n        define( 'PATH_CURRENT_SITE', '/' );\n        define( 'SITE_ID_CURRENT_SITE', 1 );\n        define( 'BLOG_ID_CURRENT_SITE', 1 );\n        define( 'MULTISITE', true );\n    define('NOBLOGREDIRECT', 'http://'.DOMAIN_CURRENT_SITE);\n}\n\n}\n```\n. Commenting it out fixes the issue so I should be good to go from here.  Thanks for the help!\n. ",
    "tekapo": "Thank you!\nIt works fine now!\n. ",
    "om4james": "Thanks for the quick reply.\nUpon further investigation, this only occurs when using WordPress Multisite:\nwp plugin update-all\nEnabling Maintenance mode...\nDisabling Maintenance mode...\nSuccess: Updated 0/0 plugins.\nNormal WordPress simply outputs:\nwp plugin update-all\nSuccess: Updated 0/0 plugins.\nI agree though @scribu, sounds like a fix is needed in WordPress core.\n. @scribu, this commit is one way to fix this in wp-cli.\nThe other would be for me to submit a patch for WordPress core that adds checks to Plugin_Upgrader::bulk_upgrade() and Theme_Upgrader::bulk_upgrade() only act if the array passed to them isn't empty.\n. Core bug report: http://core.trac.wordpress.org/ticket/24496\nPull Request: #492\nThanks @scribu.\n. > Core bug report: http://core.trac.wordpress.org/ticket/24496\nThis bug has now been fixed in core and will be included in WordPress 3.7.\n. Thanks for the feedback @scribu!\n. The tests just added in e749f71 demonstrate this bug. \nWithout the other two commits (bug fixes) then some of those new tests will fail.\nWith the bug fixes, those new tests should pass.\n. > combine plugin and theme tests into features/upgradables.feature, since the logic is the same for both\nI did think about doing that, but (at least) the install from repo tests for both should be separate I think. Otherwise the Theme_Command::install_from_repo() and Plugin_Command::install_from_repo() functions wouldn't both get tested. Those functions are ~35 lines of code each, so they deserve their own separate tests I think?\nSo although the tests are (mostly) duplicated in between plugins.feature and themes.feature, the most reliable way to test and ensure no issues occur would be to keep the two lots of tests separate.\nI suppose some of the tests I added in e749f71 were to expand the test coverage of the existing functionality, and then I also added a test to demonstrate the bug/issue reported in this PR.\nWhat do you think @scribu?\n. I didn't know about the Scenario Outlines feature - thanks @scribu.\nI've combined the new plugin/theme tests into features/upgradables.feature, and updated them to use the new download step.\n. Thanks for the feedback @scribu. man-src updated in 0281324.\n@synopsis tags in Plugin_Command::install() and Theme_Command::install() are already up to date I think.\n. @scribu, I looked at http://plugins.svn.wordpress.org/, and some plugins have complex slugs (folder names) including non alphanumeric characters.\nMy new approach in b26cade should work ok I think.\n. ",
    "ramondelafuente": "Something like that?\n. ",
    "johnbillion": "Thanks for taking a look!\n\nNot sure about wp blog home and wp blog admin. You can already do:\nopen $(wp eval 'echo home_url();')\n\nTrue, but they are added for convenience. wp blog home is more convenient and less susceptible to a syntax error when typed.\nFor example, you can type wp eval 'echo get_option(\"foo\");' but wp-cli provides the wp option get foo command for convenience.\n\nActually, I'm not that sure about wp blog info either. All the info can already be obtained pretty easily\n\nI added the wp blog info command as a high-level helper. It doesn't provide much use for building other commands, but it still has a use in the same way that other 'info' commands do. Not so bothered about this one though.\n. > Create a wp open command for core or as a community command (see #424), and have wp open home-url, wp open admin-url, wp open term-link <term-id>\nThat might be a better approach. My patch was mirroring how wp home behaved, but looking back I wasn't expecting it to open my browser when I entered it. A wp open command would make this clearer.\n. But wp open would be the convenience wrapper to open that uses WP functions to fetch the URL you want to open.\nwp open home\nvs.\nopen $(wp eval 'echo home_url();')\n. Cheers!\n. Yep I think this makes the most sense. I still think there's merit in a command which opens the URL in the browser, but I'm not sure the best way to do it (something like wp post url 123 --open starts to get as long as open $( wp post url 123 )).\n. Agreed\n. Yep I'll get it updated\n. I made the mistake of doing these changes on the master branch. Learnt my lesson now.\n. Any movement on this? If not, I'll tackle it.\n. Related ticket on core Trac that I'm working on refreshing: http://core.trac.wordpress.org/ticket/18852\n. The rules that get output will be server-dependent though (Apache/IIS, and Nginx eventually). How about wp rewrite server-rules.\n. Yeah I'm using this config currently to tell WP-CLI that I'm running Apache. https://github.com/wp-cli/wp-cli/blob/1832b74ec6459206f70251cdf4e9e060460ecbd9/php/commands/rewrite.php#L131-L136. It's a shame that config needs to happen. Maybe the individual wp rewrite htaccess-rules, wp rewrite iis-rules and wp rewrite nginx-rules commands would be best. Not sure. It's far from ideal.\n. I had a look at this last week but it looks like we're still a way off complete language pack support in core. Let's see how they develop in 3.8.\n. > I don't think translations are stored in the SVN repo mentioned in the codex anymore.\nYeah the repo has been out of date for some time now. I wrote a very rough and ready wp language install command that checked out the translations from that repo, before I realised it's not a reliable source.\n\nLanguage packages still don't work yet because of the infrastructure.\n\nThis is also what I saw. Part of the problem is that language packs aren't entities themselves, rather they are made up of translations for core, plugins and themes. There's currently no means to get a new language pack (no functions in core and no API endpoints). Updates to languages are returned as part of the update process for core.\nMaybe we should speak to Dion and see what his plan is.\n. Looks like we've now got an alpha API for grabbing translations: https://core.trac.wordpress.org/ticket/28577. Once the API is stable I'll take a punt at this command.\n. Yep. There are some pending changes to the Language API regarding ISO codes and language variants but I can certainly make a start.\n. > Why would alphabetical order make more sense?\nSorting them aids legibility if you're using the command from the command line. There's currently no command to determine whether a given role has a given cap, so you need to use wp cap list <role> and then scan down the list for the command you're looking for. \n. Good work scribu, makes sense. This is why I hadn't gone with format_items() in #711.\n. Note that we have the same problem here as I originally mentioned in #642. The WP-Cron system is made up of events and schedules, so ideally the commands would be:\nwp cron event [list|add|etc]\nwp cron schedule [list|add|etc]\nwp cron test\nI refactored the commands in WP Crontrol (not pushed yet) so they look like this\nwp crontrol-event list\nwp crontrol-schedule list\nwp crontrol test\nHow should the cron command(s) look if they were implemented in WP-CLI? wp cron event list means we'd need to fix #642 first. wp cron-event list works but means three separate top-level commands.\n. Another issue is that a handful of users have reported a bug with the date that WP Crontrol displays.\nWP-Cron stores timestamps as GMT, and WP-Crontrol converts this to the site's local timezone using get_date_from_gmt() when it displays it.\nFor some reason, a few users are reporting that this is doubling up the GMT offset. I've investigated this and cannot see why. The only reason this would be happening is if WP-Cron is in fact not storing the timestamp as GMT and is instead storing it as the local timezone.\nThis needs some more investigating.\n. Now we have #642 and #1005 in place I'll take another look at this.\n. Yep, I'll get a PR up in the next few days.\n. PR: https://github.com/wp-cli/wp-cli/pull/1142\n. <moan type=\"irrelevant\">\n\"smth\" is an incredibly lazy way to type the word \"something\". Why do you shorten that word and no others?\n</moan>\n. There seem to be several object cache issues on the server so I'm closing this off as a server issue.\n. Actually this is reproducible with the built-in wp * meta commands that have just been introduced, such as wp comment meta.\n. I'm trying to decide what the best format for the new wp cron event add command is.\nShould it accept an arbitrary list of associative arguments like wp post create does? Or should there be an --args argument which accepts a JSON encoded array? Another option?\nSuggestions welcome.\n. Whoops, missed out a crucial part there. I was talking about the format of the $args parameter when you add an event.\n. I've added some commits which address the points you raised the other day.\nIn addition there's a new wp cron event schedule <hook> command for scheduling new events.\nItems remaining:\n- [ ] Add some more examples in the docblocks\n- [ ] Complete the Behat tests (first time I've ever written one)\n- [ ] Decide if the [--<field>=<value>] format for event arguments is the best method or if we need something different\n- [ ] Decide if interval() and time_since() should remain in Utils or move into the Cron_Event_Command class\n. Few updates:\n- Add some more examples in the docblocks\n- Add some Behat tests\n- Converted the next_run and recurrence arguments to optional positional arguments\n- Moved interval() and time_since() out of Utils\n. Okay I'm happy with the current status. Feel free to review.\nThere is an issue relating to wp cron test which I'll document separately. I think it's an underlying WP-CLI issue.\n. Ok I've updated the wp cron test feature test so it correctly checks and handles STDERR, and added tests to check wp cron event delete has worked.\nReady for review.\n. Nope, no alias in place. which wp gives the correct location for wp:\nbash\n$ which wp\n/usr/local/bin/wp\n$ wp\n-bash: /usr/bin/wp: No such file or directory\n. Calling the full path ($ /usr/local/bin/wp) works as expected and outputs WP-CLI's command list.\n. Hurrah! User error after all. I restarted Terminal and all is well.\nI previously had a shortcut for wp in /usr/bin which I deleted but I'm guessing Terminal was still using that and a restart fixed it.\nSorry for the noise.\n. I would say that if you run wp cron event delete foo that it does indeed delete all foo events, not just the first one.\nAs for wp cron event run foo, I'm not quite so sure. Would you expect more than one event to be run in this situation?\n. Good stuff\n. Note that wp_strip_all_tags() can't be used in place of strip_tags() because it calls trim() on the output which strips trailing newlines.\n. #1646 doesn't strictly replace this, because some HTTP API errors bail out early and miss the http_api_debug action (see core's #25747).\nI think I agree that this is low level and we could just do it for the HTTP API errors instead. I'll do another patch.\n. As I suspected, the error message isn't consistent across platforms/transports. The tests are currently failing on Travis because the connection error message doesn't match what I'm testing for. I'll update the tests so they check that the generic error message isn't present.\n. Yeah like I said above, I think the actual message varies depending on the transport/platform/day of the week. More robust patch on its way.\n. Whoops, got the version comparison the wrong way around.\n. I'm just thinking if someone's running WP < 4.0 then it'll remain accurate.\n. wp post term was added in version 0.18.0, so you'll need to update WP-CLI.\n. > If you really care about running your tests against trunk, you can specify WP_CORE_DIR.\nThis would add unnecessary complexity to a .travis.yml file, for example.\nI guess my argument is for making it easier to test against trunk/nightlies, without the need to write a command to separately manage an installation of trunk and its configuration, and without the need to add more logic to a CI implementation.\nWhether the tests subsequently explode isn't relevant (failures can be ignored).\n. Whoops, dupe of #2118.\n. FYI 3.7 is now the minimum version that can be tested using the new test-install.sh introduced in #2050, because 3.7 was the first version which included the test suite.\n. > Is this test failure somewhere I can see? It'd be nice to track down the root cause.\nhttps://travis-ci.org/johnbillion/user-switching/jobs/85599895\n. Looks like the problem is actually that did_action() doesn't get reset. In the job above the test fails because it's expecting 0 but getting 2.\n. Personally I'd like to set the minimum test suite version to 4.0 even if <4.0 is being tested, but I'm not overly fussed about it. I've altered the test install script for my plugins where this is a problem.\n. Just spotted this new flag. This is very handy indeed.\n. Do you get the same error if you attempt to install a plugin or theme through the corresponding 'Add New' screen in the WordPress admin area?\n. > What would be your proposed fix?\nI don't have one just yet. An interim solution could be to display the current/total file, eg 1 of 3 files in addition to the current/total posts. Not ideal though. A complete solution would be to be able to read the total number of posts in all files at the start of the import process, but that would require loading each file into WP_Import.\n\nAnd, should we just commit @rmccue's new importer to WP-CLI instead?\n\nNeed to give it a look :)\n. That's pretty clear I think. An indication of the total number of files would be a bonus.\n. Awesome, hadn't seen that.\n. I think this might be somehow related to SecureTransport on OS X, but I've not had time to look into it properly. I'll re-open if I can find the root cause or a workaround.\n. Looks good \ud83d\udc4d \n. I actually removed these tests from my own plugins because they cause otherwise passing builds to fail after every minor and major WP version is released.\nRefs:\n- https://github.com/johnbillion/user-switching/commit/f7963b8841e679c1a22737e971af02ad5211d31e\n- https://github.com/johnbillion/query-monitor/commit/26defd396d73b9ee355aa60f82c50e40b81881fa\n. The coverage file will be placed in the root of the plugin directory. However, as ernilambar points out, this is unrelated to WP-CLI.\n. Actually, I don't mean piping, I mean sending output to a file, for example with wp my command > file.csv.\n. Yeah I have some other changes that I made. I'll implement your feedback and push it up.\n. @danielbachhuber Just pushed my latest code. Feel free to carry on, otherwise I'll continue when I get some more time!\n. I attempted to get around the problem with the --force flag, which is logical but may not be desired as it actually serves another purpose (to force an upgrade to an equal or lower version).\nMaybe a different flag and/or a confirmation message. I've not looked into the locking code though so I don't know what would explode if a method of ignoring the lock is introduced.. That's correct. The backslashes are unnecessary escaping.. My steps to reproduce were incorrect. I've updated the ticket description.. The new build stages feature on Travis could work for this.. Neat. Query Monitor has a pretty well battle-tested one too: https://github.com/johnbillion/query-monitor/blob/9b604e8972b09dad9ba17df84af5770118068fb6/classes/Util.php#L171-L252. Yep!. > Perhaps accepting a question mark at each prompt which then displays the expanded info\nI like this idea. It's inline with several other prompts too, including git add -p.\n\nHow would I input ? as a value for the field then?\n\nMaybe on the re-prompt the input is treated as literal input (ie. you can't show the description using ? more than once). Not ideal, but workable.. Spitballing here. Is it possible to open the main Help overlay during a prompt? If we can come up with a good way to trigger the help, it would at least offer a good UI for presenting the field description.. Also, composer install --prefer-source takes ages because it installs from source for every dependency. I doubt there's anything that can be done about that, though.. > Just to clarify, you did need to run composer install to install the project's other dependencies.\nAh yes\n\nIs this already covered by wp-cli/handbook#57 ?\n\nThe reason I opened the issue here is I thought this should be documented in the readme. I think if a developer finds a bug in WP-CLI and wants to find out how to install the development version, they're likely to read the readme on GitHub first. Having this in place in both the readme and the handbook might be a good idea.. Does GitHub search the repo description when searching for repos? If so, adding something like the following would help: This repo provides the following commands: wp user, wp this, wp that.. I don't think you need to add all the commands to the description, just the top level commands. eg. user, post, term, etc.. Perfect!. If we could solve https://github.com/wp-cli/entity-command/issues/19 programatically, then it could lead to this being possible.. > Can you share which command you were trying to see help for?\nSpecifically, I was looking for help for wp config so I could un-break my installation :-)\n\nHow would WP-CLI access a command provided by an active plugin without a valid database connection?\n\nGood point. I wonder if it could check the database connection and fall back to displaying help only for built-in commands if the database connection isn't valid.. > Could you provide more context as to how you ran into this issue?\nI've written a package that lists the installed status of PHP extensions as a boolean. The displayed value for boolean false in tabular output appears suboptimal to me.\nWould you consider a change that switches tabular output to display true and false for boolean values? I understand it would be a breaking change. For CSVs, I'm not really sure on the best output, but I was expecting a 0 to appear for false values.. Oh, this was prompted by the fact I recently discovered over 150 plugins include a WP-CLI command (more specifically, they include the string extends WP_CLI_Command).\nResults: https://gist.github.com/johnbillion/0e8fb24ad4b1cbf3671cbfe4b4c3fb6f. FWIW I would favour JSON syntax over PHP syntax, as it's more portable and more straight forward to parse.. Thanks for the tips, @grappler and @miya0001. Unfortunately it seems that the command still needs to be run from inside the subdirectory that contains the VM. Even running the Vagrant command vagrant ssh <machine> doesn't work if you're not in the directory and you use the machine name, only if you use the machine id from the id column of vagrant global-status (which I don't believe is portable).. It doesn't cause a problem, but it's also not ideal. A program should be aware of the correct places to apply appropriate escaping, not apply escaping just in case.. Is it possible to detect whether the command is being run interactively and only produce output if so? That might work, or it might be an anti-pattern.. I originally thought it was, but no that's not the case. The Y is always uppercased for boolean flags, even when the default is n (for example the --theme and --force flags for wp scaffold taxonomy).. In addition, parameters such as --post_type operate with default values that aren't reflected in the prompt, but that's a somewhat deeper issue to address.. Which web server are you running? You'll note there's an index.php prefix on your permalink structure, which indicates that WordPress has determined that URL rewriting isn't available on your site.\nYour CLI configuration for PHP might differ from your CGI/FPM configuration, which could explain the difference in behaviour. For example, mod_rewrite might not be enabled on the CLI.. Ah then your CLI has a separate configuration from CGI/FPM. Run php --info on the CLI and take a look at the output for .ini and it should show you where the configuration file is being read from. Compare it with what you see in phpinfo() in the browser.. I went through all the commands, and this is what I've got:\n```\n* text=auto\n.distignore                      export-ignore\n.editorconfig                    export-ignore\n.gitattributes                   export-ignore\n.github                          export-ignore\n.gitignore                       export-ignore\n.mailmap                         export-ignore\n.travis.yml                      export-ignore\nbehat.yml                        export-ignore\nbin                              export-ignore\nci                               export-ignore\nfeatures                         export-ignore\nphpcs.xml.dist                   export-ignore\nphpunit.xml                      export-ignore\nphpunit.xml.dist                 export-ignore\ntests                            export-ignore\ntravis-append.yml                export-ignore\ntravis-before_install-append.yml export-ignore\ntravis-cache-append.yml          export-ignore\n``. Yep let's ignorewp-cli.yml. I didn't see a repo containingphpcs.xml`. If there is one, then let's ignore that too.\nI didn't ignore CONTRIBUTING.md, README.md, and LICENSE mostly because I thought it's useful information for someone to see when looking through the files, but happy to ignore any of those if you don't think they're needed.. I thought you might ask about this. The reason for not doing WP_CLI::error( $events ) is because not having any scheduled cron tasks is not technically an error. It's just a statement of fact, so it's output as a plain message rather than an error. In other commands where the user is requesting to run or delete an event and there are none, then this is indeed an error. I'm not bothered either way though because it's rare for a site not to have any scheduled events.\n. As discussed above, WP_CLI::error() does indeed accept a WP_Error object.\n. Righto\n. The reason they're part of Utils is so they're reusable of course. That said, I might actually pull these out completely and go with WordPress' built-in human_time_diff(). The reason I didn't use it originally is because it only outputs one chunk of time (ie. \"1 hour\" instead of \"1 hour 15 minutes\") but for the sake of simplicity I'll go with human_time_diff() for now.\n. Hmm, what's the issue here? It matches the formatting in the existing tests.\n. Good points. ",
    "twratajczak": "will a simple check like https://github.com/espeo/wp-cli/commit/ce7f0e41b59c650da85a46ffc66547c203710e8e be enough?\n. ",
    "MattiaG": "Off topic, but inherent these lines of code...\nSome plugins (like revslider) save urls and paths in the db escaping the slashes, eg.\nhttps://github.com/wp-cli becomes https:\\/\\/github.com\\/wp-cli\nMaybe this does not make sense, but an option to replace the escaped version of the string might be useful...\n. Proposed (not tested) solution:\nreplacing line 44 with the following (the last line is the actual line 44 preceded by \"else \")\nif ( isset( $assoc_args['locale'] ) &&  isset( $assoc_args['version']) {\n  $download_url = 'https://'. substr($assoc_args['locale'],0,2) .'wordpress.org/wordpress-' . $assoc_args['version'] . '-' .$assoc_args['locale']. '.tar.gz';\n  WP_CLI::log( sprintf( 'Downloading WordPress %s (%s)...', $assoc_args['version'], $assoc_args['locale'] ) );\nelse if ( isset( $assoc_args['locale'] ) ) {\n. CORRECTED AND TRANSFORMED IN PULL REQUEST, CLOSING THE ISSUE\n. ",
    "mmarod": "$ wp --info\nPHP binary: /usr/bin/php\nPHP version:    5.3.3-7+squeeze15\nphp.ini used:   /etc/php5/cli/php.ini\nwp-cli root:    /usr/share/wp-cli/vendor/wp-cli/wp-cli/php/\nwp-cli config:\nwp-cli version: 0.10.0-alpha\n. Confirmed\n$ wp plugin install login-security-solution --version=0.39.0\nInstalling Login Security Solution (0.39.0)\nDownloading install package from http://downloads.wordpress.org/plugin/login-security-solution.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\n. Looks like I am still having trouble...\n$  wp plugin install login-security-solution --version=0.39.0\nInstalling Login Security Solution (0.39.0)\nDownloading install package from http://downloads.wordpress.org/plugin/login-security-solution.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\n$ wp plugin install w3-total-cache --version=0.9.2.10\nInstalling W3 Total Cache (0.9.2.10)\nDownloading install package from http://downloads.wordpress.org/plugin/w3-total-cache.0.9.2.10.zip...\nUnpacking the package...\nInstalling the plugin...\nPlugin installed successfully.\n$ wp plugin update w3-total-cache --version=0.9.2.11\nWarning: The plugin is at the latest version.\n$ wp plugin status w3-total-cache\nPlugin w3-total-cache details:\n    Name: W3 Total Cache\n    Status: Inactive\n    Version: 0.9.2.10\n    Author: Frederick Townes\n    Description: The highest rated and most complete WordPress performance plugin. Dramatically improve the speed and user experience of your site. Add browser, page, object and database caching as well as minify and content delivery network (CDN) to WordPress.\n. $ wp core version\n3.5.1\n. I figured out the problem and it had to do with my DNS configuration. Basically, Wordpress wasn't able to discover updates to plugins because it could not resolve api.wordpress.org on line 205 of wp-includes/update.php.\n$raw_response = wp_remote_post('http://api.wordpress.org/plugins/update-check/1.0/', $options);\nOnce I updated my resolv.conf to an actual resolver (not the virtual gateway given to my vagrant VM) it worked fine.\n. Isn't the error message saying that wpcli was unable to undo what Wordpress did because it is not allowed to set the memory_limit to -1? \n. It works fine if I either comment out the memory_limit line or if I set a positive value like ...\n@ini_set( 'memory_limit', '256M' ); \nHowever, when I stick with the default of ...\n@ini_set( 'memory_limit', -1 );\nthat I am getting the alert..\nAnyway I am cool with commenting out the line since the issue was fixed in 3.5.1.\nThanks,\n. @ini_set( 'memory_limit', '10G' );\nsuhosin[16941]: ALERT - script tried to disable memory_limit by setting it to a negative value -2147483648 bytes which is not allowed (attacker 'REMOTE_ADDR not set', file '/usr/share/wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php', line 32)\n. Still getting the fail ... The message is this now\nsuhosin[17168]: ALERT-SIMULATION - script tried to disable memory_limit by setting it to a negative value -1 bytes which is not allowed (attacker 'REMOTE_ADDR not set', file '/usr/share/wp-cli/vendor/wp-cli/wp-cli/php/wp-cli.php', line 32)\n. I'm just going to give it a positive value for now (512M in my case) which should be sufficient to avoid the annoying log messages. Looks like Debian dropped suhosin in Wheezy so when we upgrade from Squeeze it should resolve itself.\nThanks for the help.\n. ",
    "eoberle": "Thank you for this!   \nSorry for the dumb question, but where should I put those files?  And is there a separate command to \"activate\" them? \nthanks again,\neric\n. ",
    "XedinUnknown": "Editing is pretty easy. However, retrieving configuration that is used by WP CLI itself is not easy. I need to find out what are the values that WP CLI is going to use when run - from inside a bash script. I don't want to have to parse the YML file, and also, even if I do parse it, I have no guarantee that I will get the same result as what WP CLI will actually use. Please re-open, this is a very valuable feature - even more so now that WP CLI is becoming increasingly popular.\n. @szepeviktor, very interesting, thank you for the mention. I'm not an expert in WP CLI, but it seems to me like this allows you to retrieve values only from a sub-section of the configuration, and not any value: the standard configuration seems to be stored in the runner's $config property (still unsure why this is a public property). So, you might need to fall back to that. Also, I'm not familiar with the internal format of the configuration, so unsure how to get values that are more than 1 level deep.. Not sure what that is an answer to, but I guess it's to my question about the internal format. In that case, I hope there's a miscommunication here, because if internally the YAML config is stored as YAML, i.e. a string, then it's not very helpful for retrieving values.. Yes, I know that the file is YAML. I was referring to the format of the array.. ",
    "rezzafr33": "I put this line before sourcing bash_completion:\nautoload -U +X bashcompinit && bashcompinit\nbashcompinit command will create complete function for the Z shell.\nhttps://github.com/croach/nvm/commit/205117bed46a31a5dbde56b659720f2ecfe306ee\n. ",
    "fjarrett": "Thanks, it worked for me!\nFor anyone else using VVV this is what I did:\nbash\n$ vagrant ssh\n$ echo \"autoload -U +X bashcompinit && bashcompinit\" >> ~/.zshrc\n$ echo \"source /srv/www/wp-cli/utils/wp-completion.bash\" >> ~/.zshrc\n$ source ~/.zshrc\n. @szepeviktor Now that multiple hooks are supported by the run subcommand if you want to run only the events that are due now, rather than using the --all flag, you can do:\nsh\n$ wp cron event run $( wp cron event list --fields=hook,next_run_relative --format=csv | awk -F, '$2==\"now\" {print $1}' )\n. OK yeah by automatically I meant to the end user :smile: \n. > I don't know that hooking into debug mode is the best approach.\n:+1: \n\nWe could instead just include the total execution time, though.\n\nDo you mean the total execution of all events ran, or for each event?\n. Beat me to it, thanks :smile_cat: \n. > Good call, I'll clean that up.\nThanks.\n\nIf you start throwing Exceptions in your cron callbacks, you'll break your WordPress :)\n\nWell that makes a ton of sense... :)\n. Thanks @danielbachhuber,\n\n... which will halt if the first command fails.\n\nThat makes a lot of sense for actual installation failures. And not to broaden the scope here too much, but I'd argue that if the goal is to install something, and that thing is already installed, then it's not really a blocking failure.\nAnd if you really did need to treat it as one, you would just do:\nwp plugin is-installed <slug> || { wp plugin install <slug> && wp plugin activate <slug> }\nOf course wp core language is-installed doesn't exist yet. So maybe that's a spin-off issue.. Hey @danielbachhuber, a few questions:\n\nWill this result in outbound HTTP requests for every command executed?\nWill the values passed to $args and $assoc_args always be ignored?\n\n\nwp user update ~1 --user_pass=mysecret --user_email=myprivate@email.com~\nwp option update ~my_social_security_number 123-45-6789~. Could have used %f here for the time value.\n. \n",
    "aaronsmulktis": "you da man @rezzafr33 \n. ",
    "mlopezcoria": "Thank you very much for your help @jorgeorpinel ! I made a script to install the completion into zsh (OhMyZsh!). Maybe it can be useful for anyone:\n```\n! /bin/bash\nprintf \"Downloading WP-CLI...\\n\"\nwget -O ~/wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nprintf \"\\nInstalling \\'wp\\' command...\\n\"\nchmod +x ~/wp-cli.phar\nsudo mv ~/wp-cli.phar /usr/local/bin/wp\nprintf \"\\nDownloading WP-Cli zsh completion...\\n\"\nwget -O ~/wp-completion.bash https://raw.githubusercontent.com/wp-cli/wp-cli/master/utils/wp-completion.bash\nprintf '\\n# WP-CLI Bash completions\\nautoload bashcompinit\\nbashcompinit\\nsource ~/wp-completion.bash' >> ~/.zshrc\nsource ~/.zshrc\nprintf \"\\nWP-CLI installation done!\\n\"\n```\nRegards!. ",
    "adamholte": "Yeah, no output at all.\n$ wp\n$ (no output)\nThe only command that I've gotten to work is wp help. The plugin redirects users with significant privileges to another page, so I'm guessing that wp-cli is being redirected.\n. Thanks. I missed the user flag, that will help. It'd be nice if wp-cli warned if the page was redirected. That was my main issue. I had no idea what was happening. Finally I realized it worked when the plugin was disabled so I figured out what was happening.\n. ",
    "jonathanbardo": "Will this only work with subcommand?\nFor wp-cli-ssh it would be nice to have something like :\nyaml\nssh:\n  vagrant:\n    cmd: vagrant ssh-config > /tmp/vagrant_ssh_config && ssh -q %pseudotty% -F /tmp/vagrant_ssh_config default %cmd%\n    url: local-www.example.com\n    path: /srv/www/\n. I'm glad we were able to use this because it gave me access to private method I couldn't have used otherwise. @scribu is right, we need a better of doing things because this could easily break.\n. @scribu At first, I liked the fact of using wp-cli to send request to remote servers like vagrant. \nNow that I think about it, having a separate utility would imply we don't even need to install wp-cli on local anymore (because it's installed part of vvv for example) and would only need the PHP install.\nWhat do you think @westonruter ? \n. Thanks @scribu ! This is awesome :sparkles: \n. This is a nice addition. Sometimes I also want to see the memory consumption (but hey I could implement this myself if we don't want to bloat the feature too much).\n. I think at the time we also needed to be able to ssh into a jump server before reaching the final web server. This was going to be easier to do using passthru().\n. @danielbachhuber I agree, SSH config for non standard port number makes sense.\n. I think this is definitely the way to go and at first look will have minimal impact on our side at GoDaddy.\n. @danielbachhuber That's a valid scenario and I don't think we ever faced that problematic while we developed wp-cli-ssh.\n. ",
    "dllh": "My use case is I want to export all post types except for one. :) I may not know off hand or desire to go digging to see what all post types there are or to specify them every time. I have a recurring export job in which I have to export all but type foo. So it's useful to be able to specify, without thinking or digging around, all types but foo.\n. That seems ok to me. I don't love that syntax in general, but since it's already in core, it probably makes more sense than what I had proposed.\n. ",
    "rajuginne": "just look at my problem here \nnetwork super admin missing in dashboard (3 posts)  http://wordpress.org/support/topic/network-super-admin-missing-in-dashboard?replies=3#post-4381522\n. ",
    "MiteshShah": "@scribu \nI don't know where is installer.sh so i copied here :(\nThanks for pointing me correct locations\n. Instead of providing password we can ask from user like in EasyEngine\nif user is not comfortable to save password in .bash_history then we should ask password like \n``` bash\nGet WordPress Site Title\necho -e \"\\033[34m WordPress Information Required... \\e[0m\"\nread -p \"Site Title: \" SITETITLE\nread -p \"Username [admin]: \" WPADMINUSER\nTurn Off Echo For Passwords\nstty -echo\nread -p \"Password: \" WPADMINPASS\nstty echo\necho\nread -p \"Email: \" WPADMINEMAIL\nIf Enter Is Pressed, Then Use admin As WordPress Admin Username\nif [[ $WPADMINUSER = \"\" ]]\nthen\n    WPADMINUSER=admin\n    #echo $WPADMINUSER\nfi\nCreate WordPress Tables\ncd /var/www/$DOMAIN/htdocs || OwnError \"Unable To Change Directory For WP-CLI\"\nwp core install --url=$DOMAIN --title=\"$SITETITLE\" \\\n--admin_name=$WPADMINUSER --admin_password=$WPADMINPASS --admin_email=$WPADMINEMAIL \\\n|| OwnError \"Unable To Create WordPress Tables For $DOMAIN\"\n```\n. Its looks like 404 on following github pages \nhttps://github.com/wp-cli/php-cli-tools\n. Submit a patch: https://github.com/wp-cli/wp-cli/pull/737\n. Why wp-cli need  $WP_CLI_PHP variable?\nwp-cli works fine without $WP_CLI_PHP  variable and don't have a headache to change $WP_CLI_PHP variable manually when php binary location is changed.\nYou have to either change it manually or remove it from your environment.\n@scribu  Without wp-cli we can manually configure WordPress but we all like automation\n. I'm tried to install wp-cli on fresh system at first time i'm tried following command\nbash\nMiteshShah:~# curl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash\nMiteshShah:~# echo $?\n0\nThe above command do nothing and exit with status 0\nExit satus 0 means previous command executed susscessfully.\nOn second try same same result so i'm tried on third time then its started installation of wp-cli as you can see on above messages\n. Created a fresh virtual machine and running above command.\nAt first its exited without any message and at second try its display composer.phar: command not found\n``` bash\nroot@UbuntuEE:~# curl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash -x\nroot@UbuntuEE:~# curl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash -x\n+ '[' -z /usr/share/easyengine/wp-cli ']'\n+ '[' -z '' ']'\n+ VERSION=@stable\n+ '[' -z '' ']'\n++ find_php\n++ read -r -d '' AMP_PATHS\n++ for amp_php in '$AMP_PATHS'\n++ [[ /Applications/MAMP/bin/php5.3/bin/php == php5.2 ]]\n++ '[' -x /Applications/MAMP/bin/php5.3/bin/php ']'\n++ for amp_php in '$AMP_PATHS'\n++ [[ /Applications/MAMP/bin/php//bin/php == php5.2 ]]\n++ '[' -x '/Applications/MAMP/bin/php//bin/php' ']'\n++ for amp_php in '$AMP_PATHS'\n++ [[ /Applications/xampp/xamppfiles/bin/php == php5.2 ]]\n++ '[' -x /Applications/xampp/xamppfiles/bin/php ']'\n++ for amp_php in '$AMP_PATHS'\n++ [[ /opt/lampp/bin/php == php5.2 ]]\n++ '[' -x /opt/lampp/bin/php ']'\n++ which php\n++ which php-cli\n++ return 1\n+ WP_CLI_PHP=\n+ '[' 1 -gt 0 ']'\n+ read -p 'path to PHP binary: ' WP_CLI_PHP\n+ mkdir -p /usr/share/easyengine/wp-cli\n+ cd /usr/share/easyengine/wp-cli\n+ '[' '!' -x composer.phar ']'\n+ echo 'Installing Composer in /usr/share/easyengine/wp-cli'\nInstalling Composer in /usr/share/easyengine/wp-cli\n+ echo -------------------\n\n\ncurl -sS https://getcomposer.org/installer\n'[' 0 -gt 0 ']'\nCOMPOSER=' composer.phar'\n'[' '!' -f composer.json ']'\ncomposer.phar init --stability dev --no-interaction\nbash: line 64: composer.phar: command not found\ncomposer.phar config bin-dir bin\nbash: line 65: composer.phar: command not found\ncomposer.phar config vendor-dir vendor\nbash: line 66: composer.phar: command not found\ncommand -v bin/wp\n\necho\n\n\necho 'Installing WP-CLI in /usr/share/easyengine/wp-cli'\nInstalling WP-CLI in /usr/share/easyengine/wp-cli\n\necho -----------------\n\n\n\ncomposer.phar require --prefer-source wp-cli/wp-cli=@stable\nbash: line 73: composer.phar: command not found\n'[' 127 -gt 0 ']'\necho 'WP-CLI was not successfully installed.'\nWP-CLI was not successfully installed.\nexit 1\n\n```\n. In above i'm forget to install php so i'm install php and run following command\nbash\ncurl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash -x\nAt first time exited without any message and on second try its works fine.\n``` bash\nroot@UbuntuEE:~# curl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash -x\nroot@UbuntuEE:~# curl -s http://wp-cli.org/installer.sh | INSTALL_DIR='/usr/share/easyengine/wp-cli' bash -x\n+ '[' -z /usr/share/easyengine/wp-cli ']'\n+ '[' -z '' ']'\n+ VERSION=@stable\n+ '[' -z '' ']'\n++ find_php\n++ read -r -d '' AMP_PATHS\n++ for amp_php in '$AMP_PATHS'\n++ [[ /Applications/MAMP/bin/php5.3/bin/php == php5.2 ]]\n++ '[' -x /Applications/MAMP/bin/php5.3/bin/php ']'\n++ for amp_php in '$AMP_PATHS'\n++ [[ /Applications/MAMP/bin/php//bin/php == php5.2 ]]\n++ '[' -x '/Applications/MAMP/bin/php//bin/php' ']'\n++ for amp_php in '$AMP_PATHS'\n++ [[ /Applications/xampp/xamppfiles/bin/php == php5.2 ]]\n++ '[' -x /Applications/xampp/xamppfiles/bin/php ']'\n++ for amp_php in '$AMP_PATHS'\n++ [[ /opt/lampp/bin/php == php5.2 ]]\n++ '[' -x /opt/lampp/bin/php ']'\n++ which php\n+ WP_CLI_PHP=/usr/bin/php\n+ '[' 0 -gt 0 ']'\n+ mkdir -p /usr/share/easyengine/wp-cli\n+ cd /usr/share/easyengine/wp-cli\n+ '[' '!' -x composer.phar ']'\n+ echo 'Installing Composer in /usr/share/easyengine/wp-cli'\nInstalling Composer in /usr/share/easyengine/wp-cli\n+ echo -------------------\n\n\n/usr/bin/php\ncurl -sS https://getcomposer.org/installer\n\n!/usr/bin/env php\nAll settings correct for using Composer\nDownloading...\nComposer successfully installed to: /usr/share/easyengine/wp-cli/composer.phar\nUse it: php composer.phar\n+ '[' 0 -gt 0 ']'\n+ COMPOSER='/usr/bin/php composer.phar'\n+ '[' '!' -f composer.json ']'\n+ /usr/bin/php composer.phar init --stability dev --no-interaction\n+ /usr/bin/php composer.phar config bin-dir bin\n+ /usr/bin/php composer.phar config vendor-dir vendor\n+ command -v bin/wp\n+ echo\n\necho 'Installing WP-CLI in /usr/share/easyengine/wp-cli'\nInstalling WP-CLI in /usr/share/easyengine/wp-cli\necho -----------------\n\n\n\n/usr/bin/php composer.phar require --prefer-source wp-cli/wp-cli=@stable\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n\nInstalling symfony/finder (dev-master 46881af)\n    Cloning 46881af03b48e942001e8e9450c2c4ccaeccfc8d\n\n\nInstalling rmccue/requests (v1.6.0)\n    Cloning 756374edd59ac69268ed35481a506ebd4e732525\n\n\nInstalling rhumsaa/array_column (1.1.2)\n    Cloning c09744baae0e023d1021055f9c65755b88a9721f\n\n\nInstalling mustache/mustache (v2.5.0)\n    Cloning dd528e765afcaaae20ce3bebdda3162456d93b47\n\n\nInstalling wp-cli/php-cli-tools (v0.9.3)\n    Cloning 339f50279cc7494b87343689ef664896bd5b5dc1\n\n\nInstalling wp-cli/wp-cli (v0.13.0)\n    Cloning a7eaaecc62b8f5004cdf3b32273ed04884cbca2a\n\n\nwp-cli/wp-cli suggests installing psy/psysh (Enhanced wp shell functionality)\nWriting lock file\nGenerating autoload files\n+ '[' 0 -gt 0 ']'\n+ echo\n\necho 'WP-CLI files have been successfully installed.'\nWP-CLI files have been successfully installed.\ncat\n\nTo test WP-CLI, run:\n    /usr/share/easyengine/wp-cli/bin/wp --info\n\nMake sure you have the following line in your .bash_profile file:\n    # WP-CLI directory\n    export PATH=/usr/share/easyengine/wp-cli/bin:$PATH\n\n++ which php\n+ '[' /usr/bin/php '!=' /usr/bin/php ']'\n```\n. @scribu \nIt's better to create a vm and try yourself to conform this issue.\nAt first i'm think its a local squid cache issue so create a fresh system outside the squid and face same issue.\n. Its strange installer.sh return HTTP Status: 302 and 200 randomly.\n```\nroot@UbuntuEE:~# curl -I http://wp-cli.org/installer.sh\nHTTP/1.0 302 Moved Temporarily\nDate: Tue, 17 Dec 2013 11:56:05 GMT\nPragma: no-cache\nCache-Control: no-cache\nLocation: /installer.sh\nX-Cache: MISS from localhost\nX-Cache-Lookup: MISS from localhost:3128\nVia: 1.0 localhost (squid/3.1.20)\nConnection: keep-alive\nroot@UbuntuEE:~# curl -I http://wp-cli.org/installer.sh\nHTTP/1.0 302 Moved Temporarily\nDate: Tue, 17 Dec 2013 11:56:09 GMT\nPragma: no-cache\nCache-Control: no-cache\nLocation: /installer.sh\nX-Cache: MISS from localhost\nX-Cache-Lookup: MISS from localhost:3128\nVia: 1.0 localhost (squid/3.1.20)\nConnection: keep-alive\nroot@UbuntuEE:~# curl -I http://wp-cli.org/installer.sh\nHTTP/1.0 200 OK\nServer: GitHub.com\nDate: Tue, 17 Dec 2013 11:49:51 GMT\nContent-Type: application/octet-stream\nContent-Length: 1983\nLast-Modified: Fri, 06 Dec 2013 21:17:40 GMT\nExpires: Tue, 17 Dec 2013 11:59:51 GMT\nCache-Control: max-age=600\nVary: Accept-Encoding\nAccept-Ranges: bytes\nVary: Accept-Encoding\nX-Cache: MISS from localhost\nX-Cache-Lookup: MISS from localhost:3128\nVia: 1.0 localhost (squid/3.1.20)\nConnection: keep-alive\n```\n. @danielbachhuber I'm mostly used NGINX FastCGI cache with w3 total cache.\nAbove warning is only come for single WordPress websites\nFor WordPress Multisite i'm not get any warning messages\n. We don't use APC as APC is not good with php 5.5\nAlso this is fresh WordPress install with nginx-helper and w3tc plugins installed only\nbash\nwp --allow-root option get active_plugins\narray (\n  0 => 'nginx-helper/nginx-helper.php',\n  1 => 'w3-total-cache/w3-total-cache.php',\n)\nYou can see the details logs at https://travis-ci.org/rtCamp/easyengine/builds/28306071\nYou can see the above warning only for single wordpress installation\n. Its seems like you changed the wp-cli installation way\nHow can we install the particular version of wp-cli?\nFor example in your website wp-cli.org you mentioned below\nInstalling (And Upgrading)\nFirst, download wp-cli.phar using wget or curl. For example:\nbash\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nBut its always install the latest wp-cli, How can we install the particular version of wp-cli\n. Its seems like old way work for wp-cli 0.14.1 but not work for latest wp-cli 0.16.0\n``` bash\ncurl -sL https://raw.github.com/wp-cli/wp-cli.github.com/master/installer.sh | INSTALL_DIR='/usr/share/wp-cli' VERSION=0.14.1 bash\nInstalling WP-CLI in /usr/share/wp-cli\n./composer.json has been updated\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Installing nb/oxymel (v0.1.0)\n    Cloning cbe626ef55d5c4cc9b5e6e3904b395861ea76e3c\n\n\nInstalling symfony/finder (dev-master 45fbbe9)\n    Cloning 45fbbe9444b04be0a8595a86d91808278a0d22fc\n\n\nInstalling rmccue/requests (v1.6.1)\n    Cloning 6aac485666c2955077d77b796bbdd25f0013a4ea\n\n\nInstalling rhumsaa/array_column (1.1.2)\n    Cloning c09744baae0e023d1021055f9c65755b88a9721f\n\n\nInstalling mustache/mustache (v2.6.1)\n    Cloning 1430ca884912eaba2b3830856b45685733b16789\n\n\nInstalling wp-cli/php-cli-tools (v0.9.5)\n    Cloning 89461455b360693da07355460a2597baa0108c1d\n\n\nInstalling wp-cli/wp-cli (v0.16.0)\n    Cloning 1e363d53030ff9f1f658fa2b1085ca9c0e2a2c0b\n\n\nwp-cli/wp-cli suggests installing psy/psysh (Enhanced wp shell functionality)\nWriting lock file\nGenerating autoload files\nWP-CLI files have been successfully installed.\nTo test WP-CLI, run:\n\"/usr/share/wp-cli\"/bin/wp --info\n\nMake sure you have the following line in your .bash_profile file:\n# WP-CLI directory\nexport PATH=\"/usr/share/wp-cli/bin:$PATH\"\n\n```\nIts really a pain to change the installation way after the release of 0.16.0 and don't provide the backward compatibility :(\n. @scribu Thanks for the update how can we install the particular version of wp-cli\nDo you have any plan to fix the backward compatibility for latest wp-cli 0.16.0 ?\n. @scribu and @danielbachhuber \nIts always good to change the way that make our users life easy but we should have to provide \nbackward compatibility so our users can easily use the old way for our latest release.\nDo you have any plan to fix the backward compatibility for latest wp-cli 0.16.0 ?\nIf you guys fix the backward compatibility its helps lots of wp-cli users.\n. @jmslbam If its deprecated then you guys have to write note that install.sh is a deprecated.\n\nAlso @danielbachhuber if it's deprecated then we might as well remove it from the WIKI to prevent situations like this, cool?\n\n+1 for this or just mention this way of installation is deprecated.\n. @szepeviktor Yup :)\n. ",
    "bluepresley": "A couple of things have happened where we have needed this functionality, and indeed we turned to \"wp help config\" since it's description was \"Manage the wp-config file.\"\nThe first scenario was a mishap on our part where a templated install of wordpress got shipped with the same wp-config.php file, and thus the same security keys. This was a security concern so we went back in and created new config files with WP-CLI. The second was when working on a bug related to the WP NONCE system, and we kept getting the error \"Are you sure you want to do this?\"\nThe only way to remedy that during the debugging process was to change out the keys and delete the SESSION_TOKENS key from the wp_usermeta database.\nSo, if the option is still on the table to have something like ''wp config --regenerate-salts\" is still an option, I'd lke to put in a +1 for the functionality. They may have been edge cases, but that would have been a real time saver.\nIn any case though, I wanted to post here and share this link. If a person does need regenerate keys quickly, this link will do that for you automatically, and you can simply copy and paste. Refresh the page to get a new set of keys.  Hope that helps someone.\nhttps://api.wordpress.org/secret-key/1.1/salt/. ",
    "bvansomeren": "Hi,\nI'm terribly sorry. After some deeper inspection it would seem this can be fixed on CentOS systems by installing the php-process package.\nAfter installing this base package the functionality works as desired.\n. Hi,\nHere it is\nPHP binary: /usr/bin/php\nPHP version:    5.3.3\nphp.ini used:   /etc/php.ini\nwp-cli root:    /home/site/.composer/vendor/wp-cli/wp-cli/php/\nwp-cli config:  \nwp-cli version: 0.10.2\nThe OS is CentOS 6\n. Minor bit of additional information. W3 Total cache and WP-CLI seem fine as long as you don't enable Object caching (and possibly the other options except for page caching). I've raised a support query with them as well, linking them to this issue\n. Minor note: I did not use APC based object caching (just using the disk or memcached variant) . Just FYI.\nIf I hear anything back from W3 Edge I'll update the ticket further\n. Still no word from W3 Edge, but in case somebody else runs into this problem. Disable the Object caching and at least WP-CLI will work properly again. Found this out because the object caching was causing a massive slowdown on wp-admin and turned it off, only to find WP-CLI being it's happy, helpful self again\n. ",
    "bkuhl": "Thanks for patching this, I'm going to use your patched version in Dispatcher.\n. ",
    "jubstuff": "Just the same thing. \nI managed to make it download by adding the -k flag to $cmd = \"curl -f $silent %s | tar xz --strip-components=1 --directory=%s\"; in ~/.composer/vendor/wp-cli/wp-cli/php/commands/core.php\nbut after that when I issue wp core config --dbname=dbname --dbuser=user --dbpass=pass it doesn't create a wp-config.php file. I don't know if it could be related.\n. This is a screenshot of the output after adding the -k flag\n\nAnd this is the output for wp core version\nError: wp-config.php not found.\nEither create one manually or use `wp core config`.\n. Instead of modifying the core.php file adding the -k flag, I disabled the certificate check with\necho insecure >> ~/.curlrc\nNow the wp core version command is working too\n. ",
    "sha-one": "In windows 7 using Cygwin64 I'm encountering this error after running: wp core download\n```\nDownloading latest WordPress (en_US)...\nWarning: cURL error 60: SSL certificate problem, verify that the CA cert is OK. Details:\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\ntar (child): Cannot connect to C: resolve failed\ngzip: stdin: unexpected end of file\ntar: Child returned status 128\ntar: Error is not recoverable: exiting now\n```\n$ wp --info\nPHP binary:     /cygdrive/c/wamp/bin/php/php5.3.9/php\nPHP version:    5.3.9\nphp.ini used:   C:\\wamp\\bin\\php\\php5.3.9\\php.ini\nWP-CLI root:    C:\\cygwin64\\home\\ShaOne\\.wp-cli\\vendor\\wp-cli\\wp-cli\nWP-CLI config:\nWP-CLI version: 0.12.1\nAlso tried adding: insecure \nTo .curlrc\nWhich makes no difference\n. @scribu Thanks, yup that fixed it :)\n. ",
    "urre": "Seems like it's not using correct php binary\nPHP binary: /usr/bin/php\nPHP version:    5.3.15\nphp.ini used:   /private/etc/php.ini\nwp-cli root:    /Users/urre/.composer/vendor/wp-cli/wp-cli/php/\nwp-cli config:\nwp-cli version: 0.10.2\n. Thanks, missed that instruction earlier!\nEverything works fine now!\n. Some settings on your machine make Composer unable to work properly.\nMake sure that you fix the issues listed below and run this script again:\nThe suhosin.executor.include.whitelist setting is incorrect.\nAdd the following to the end of your php.ini or suhosin.ini (Example path [for Debian]: /etc/php5/cli/conf.d/suhosin.ini):\n    suhosin.executor.include.whitelist = phar \nThe php.ini used by your command-line PHP is: /etc/php5/cli/php.ini\nIf you can not modify the ini file, you can also run php -d option=value to modify ini values on the fly. You can use -d multiple times.\n. PHP binary: /usr/bin/php5\nPHP version:    5.4.3-5uwsgi1\nphp.ini used:   /etc/php5/cli/php.ini\nwp-cli root:    /root/.composer/vendor/wp-cli/wp-cli/php/\nwp-cli config:\nwp-cli version: 0.10.0-beta2\n3.5.1\n. strange, i get. -bash: composer: command not found\n. I just found out that i didn't have the php5-gd package installed on my VPS. After installing that the wp media regenerate worked just fine!\n. 1. Yes, correct. Worked\n2. Yes, would be good with some error handling and maybe add it as a requirement. \n. ",
    "BUGHUNTER": "OMG, I got it; it needs to be installed as a wordpress plugin... ok, I go to sleep now...\n. ",
    "jlambe": "I've added a condition statement to my theme's function and it passes.\nif (!defined('WP_CLI') && WP_CLI) {}\nIs there a way to avoid a check for wp-cli on custom theme functions ?\n. @miya0001 Paths are correct and like explained, we don't have full control over the server. So if we had to change anything on the filesystem, it's not possible.\nThe WordPress site is working correctly. When using the wp-cli, it reads the wp-config.php but looks like it ignores the defined SQL user from the project.\n2 things that I would like you to perhaps consider:\n1. Is there any other check that wp-cli could do when detecting the SQL user?\n2. What about to provide global parameters when running commands where we can define the dbuser and other related informations ?\nThanks. ",
    "iPhrankie": "Thanks! I used the following command. It produces the following warnings, but everything seems to work correctly.\nwp media import --title=\"Mountain 003\" --alt=\"Mountain 003\" /Users/JDoe/Desktop/mountain_003.jpg --post_id=$(wp post create --post_title=\"Mountain Photo 003\" --post_status=publish --porcelain)\nWarning: unknown --alt parameter\nWarning: unknown --post_id parameter\nSuccess: Imported file /Users/JDoe/Desktop/mountain_003.jpg as attachment ID 117 and attached to post 116.\n. I'm using Mac OS X - 10.6.8\nI installed WP-CLI the other day using the following command.\ncurl http://wp-cli.org/installer.sh | bash\nwp --info\nPHP binary:      /usr/bin/php\nPHP version:    5.3.15\nphp.ini used:    /private/etc/php.ini\nwp-cli root: /Users/JDoe/.wp-cli/vendor/wp-cli/wp-cli/php/\nwp-cli config:\nwp-cli version:  0.10.2\n. ",
    "yumyo": "Hi, still get the error:\nW3 Total Cache version: 0.9.3\nWP-CLI version: 0.13.0\n. ",
    "exula": "Disabling Object-Cache let wp run, still throwing errors, but at least running now.\n. ",
    "brunolanevik": "No it do not work inside the wp directory. However in a standard wp install it works as it should\n. No, it is not some custom code since it works on my vagrant that is running ubuntu 12 with wp cli. However on OSX it does not work. I have tried the debug flag and it outputs nothing. This only happens on OSX. It also does not happen on the servers which use Ubuntu 12 server edition.\n. Yes I am writing to it through a mounted folder. The best way to get production environment on OSX is through vagrant in my honest opinion. Here is my wp --info\nOSX:\nPHP binary: /Applications/MAMP/bin/php/php5.3.20/bin/php\nPHP version:    5.3.20\nphp.ini used:   /Applications/MAMP/bin/php/php5.3.20/conf/php.ini\nWP-CLI root:    /Users/Bruno/Documents/wp-cli\nWP-CLI config:\nWP-CLI version: 0.11.0-alpha\nVagrant:\nPHP binary: /usr/bin/php5\nPHP version:    5.4.17RC1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root:    /srv/www/wp-cli\nWP-CLI config:\nWP-CLI version: 0.11.0-alpha\n. I have tried to update to the latest version but I am still getting the same result.\niMac:web Bruno$ wp search-replace --path=wp/\niMac:web Bruno$\nIt is not a MU wp site.\nMySQL:\nOSX: \nmysql  Ver 14.14 Distrib 5.5.30, for osx10.8 (i386) using readline 5.1\nVagrant:\nmysql  Ver 14.14 Distrib 5.5.31, for debian-linux-gnu (i686) using readline 6.2\n. Oh I am not using MAMP. That is why I have Vagrant. Vagrant creates a virtual server environment in which I can run an identical production environment locally on my development computer. The only reason why I use MAMP is because I am using wp cli locally for my deployment system. Everything is running on the vagrant server except for wp cli and my deploy system. WP is connected to the database using the vagrants external ip and the user is accepting wildcard host.\n. After I compiled PHP from php.net and set the WP_CLI path it worked again so I guess it is a MAMP related issue.\n. ",
    "rodrigoprimo": "Is this still an issue?\nI couldn't reproduce it. The following test pass on my environment:\n```\nFeature: Test output in a multisite install with custom base path\n  Scenario: Test output in a multisite install with custom base path\n    Given a WP install\nWhen I run `wp core multisite-convert --title=Test --base=/test/`\nAnd I run `wp post list`\nThen STDOUT should contain:\n  \"\"\"\n  Hello world!\n  \"\"\"\n\n```\n. Is there a place for issue related tests?\nMaybe I should create an issues.feature file where each scenario could reference an issue?\n. Maybe just stopping the script execution with an error when an unregistered parameter is used is a good start?\n. I'm in favor of stopping the execution for invalid parameters instead of just showing a warning.\nShould I open a PR?\n. I can't reproduce the build error. Can you?\n. I'm not sure what is the best way to fix this problem. But it seem to me that it is related with WordPress theme cache not being flushed after the theme is installed in version 3.4. So when wp-cli tries to activate the installed theme, WordPress return that the theme is not installed (according to the cache).\nI made https://github.com/rodrigoprimo/wp-cli/commit/a49cf7a0047acd403f78616b9fd6fec3e315be8c just to show what I have found. There must be a better place the code to flush the theme cache.\n. What about:\nwp post generate --post_content=\"`curl http://loripsum.net/api/5`\"\n. This way we don't have to handle with the API parameters and the user can choose which API to use.\nIf in the future we implement ipsum_text( $words = 50 ) we can use that.\n. Done!\nFor my use case it is fine to have the same post content for all generated posts. If I need different post content for each post I would use wp post create in a loop.\n. My pleasure\n. I wonder how we could catch PHP notices like this one in the test suite.\nAny ideias?\n. Done, I've replaced WP_CLI::print_value() with WP_CLI::line(). Thanks for your feedback.\n. To be honest I don't have a use case for admin-url subcommand.\nI just saw this https://github.com/wp-cli/wp-cli/issues/497#issuecomment-19110743 comment you made and thought it would be fun to implement it.\nI was expecting you had a use case for it or maybe I misunderstood you.\nAnyway, the second commit is important for the url subcommand as well. It is easy to merge just one commit or should I open another PR?\n. No worries.\n. Should work now.\n. I tried the change suggested by @Melmoth-the-Wanderer but unfortunately I couldn't see any significant improvement in the performance of wp search-replace. To test it I used a WP install with 40k posts generated with wp post generate. The database is using InnoDB. Below are the results.\nWithout the patch:\n```\n$ time wp search-replace localhost anotherdomain\nSuccess: Made 39146 replacements.\nreal    0m8.081s\nuser    0m0.456s\nsys 0m0.063s\n```\nWith the patch:\n```\n$ time wp search-replace localhost anotherdomain\nSuccess: Made 39146 replacements.\nreal    0m7.932s\nuser    0m0.466s\nsys 0m0.040s\n```\nI don't understand all the details behind this change so I might be missing something (might be a problem in my implementation) or maybe it is necessary to use a bigger database. The code used is available in the link below in case anyone else wants to further investigate this:\nhttps://github.com/rodrigoprimo/wp-cli/commit/369f0e661f96a6921f3591be7cdc66c3c9f3c9cc\n. @scribu I have php5-readline installed but I can't use the arrow keys as well. Is anything else necessary?\n. ```\n$ php -i | grep -A2 readline\n/etc/php5/cli/conf.d/20-readline.ini,\n/etc/php5/cli/conf.d/20-xdebug.ini\n--\nreadline\nReadline Support => enabled\n```\n. I think I found the source of the problem. Turns out php-cli-tools is not using using readline(), it uses fgets(STDIN) instead:\nhttps://github.com/wp-cli/php-cli-tools/blob/master/lib/cli/Streams.php#L130\nThe following seem to fix this issue:\n```\ndiff --git a/lib/cli/Streams.php b/lib/cli/Streams.php\nindex b750636..081a6bd 100755\n--- a/lib/cli/Streams.php\n+++ b/lib/cli/Streams.php\n@@ -126,6 +126,8 @@ class Streams {\n            if( $format ) {\n                    fscanf( static::$in, $format . \"\\n\", $line );\n\n\n} else if ( function_exists( 'readline' ) ) {\n$line = readline();\n                } else {\n                        $line = fgets( static::$in );\n                }\n```\n\nBut another problem is created, if you use the left arrow to go to the beginning of what you typed, the cursor goes to the beginning of the line, before the question presented to the user. I think this happens because readline() expects the question as a parameter. So we will need to change that as well.\n. Sure: https://github.com/wp-cli/php-cli-tools/issues/72\n. The problem is that the wp help non-existent-command doesn't work without a WP install. The test was passing because it was checking just if STDERR was not empty. The command was returning the unexpected error \"This does not seem to be a WordPress install\" instead of the expected \"'non-existent-command' is not a registered wp command\".\nSo instead of changing the test spec we should fix wp help non-existent-command to work without a WP install, right?\nShould we open a new PR for that or use this one?\nDo you happen to know why two of the travis-ci builds are failing? The error seems to be unrelated with the change I made.\n. Thanks for your explanation. In the last commit I have split the test scenario into two as you suggested.\n. Related #905\n. > Are there any way to avoid hacking the database before calling the search-replace or is that just how WordPress works for now?\nIf pass the old domain to --url parameter wp search-replace will work:\nwp search-replace --url=example.com example.com example.dev\nIf working with a WordPress MS database use:\nwp search-replace --network --url=example.com example.com example.dev\n. @bjshirey --url will work for search-replace command. The problem is that --url is a global parameter and for now they are not displayed for all commands. There is another issue open to fix this behavior: #1032\n. I saw this warning as well when importing a file generated with wp export from an old WordPress install. I don't know how but the fact is that there are some users without e-mail address in the database. So it seems that it is valid to have an author without e-mail in the WXR file.\n. @szepeviktor I might be missing something but I don't the change you mentioned fix this problem. It has no relation with comments. Could you please elaborate?\n. After updating PHP to version 5.5.16 (Ubuntu 14.04 comes with PHP 5.5.9) this issue is fixed. So it seems that this is a PHP problem. I'm not sure if there is anything we can do on WP-CLI side.\n@beckspaced updating PHP to the latest version fix the problem for you as well?\n. @szepeviktor, as @danielbachhuber mentioned, we are talking about two different issues.\nAnyway, it seems that this issue is caused by a problem in PHP so I'm not sure if there is anything we can do on WP-CLI side. So maybe we could indeed close it.\nAny thoughts @danielbachhuber?\n. @szepeviktor I'm sorry but I'm not running PHP 5.5.9 anymore so I can't easily reproduce the problem I reported. \n. Well spotted, thanks.\n. Ops :-)\n. Thanks for your feedback. I have updated the branch with your suggestions.\nFor now I will use | wc -l to check a exact table match. What I don't like from this approach is that we have to write two different tests instead of just one.\nIf I have some time in the next days, I will try to implement a new behat step to deal with exact table matches. But this is not a priority for me as well.\n. @danielbachhuber on 1dcc78f you have also implemented the output filter by field. Should I remove this functionality from this PR?\nI was hesitant about opening a single PR addressing two different issues but since one was a prerequisite to the other I thought this would be a better option rather than having a PR depending on another.\n. Done\n. @tiagohillebrandt great to see other Brazilians contributing to WP-CLI!\nLet me know if you need help with the functional tests.\n. Done\n. Maybe I'm missing something but the following seems to be working:\n$ wp post create --post_title='UTF-8 ch\u00e1r\u00e2ct\u1ebdrs'\n$ wp post get 6 --field=post_title\nUTF-8 ch\u00e1r\u00e2ct\u1ebdrs\n$ wp search-replace ch\u00e1r\u00e2ct\u1ebdrs characters\nSuccess: Made 1 replacements.\n$ wp post get 6 --field=post_title\nUTF-8 characters\n. Done\n. I'm planning to create a PR for this in the next days.\nI'm thinking the syntax should be:\nwp taxonomies list [--post_type=page]\n@danielbachhuber any preference?\n. Actually wp taxonomy instead of wp taxonomies\n. On #2145 I created wp taxonomy list with the following fields:\nname\nlabel\ndescription\npublic\nhierarchical\nDo any of you think that other fields returned by get_taxonomies() are useful and should be included as well?\nI would like to be able to see the list of capabilities associated with a taxonomy but I'm inclined to add this as another command. Maybe wp taxonomy cap <taxonomy>. Thoughts?\n. Actually <taxonomy>=<term-slug> is exactly what I was looking for. I misread the documentation for the {tax} argument of WP_Query and that is why I thought it was not possible to list all the posts associated to a specific term. Thanks!\n. https://core.trac.wordpress.org/ticket/30497\n. @danielbachhuber I'm not able to reproduce this anymore so I guess it was fixed somehow. Closing the issue. Thanks.\n. @ernilambar I was testing with Brazilian Portuguese activated on my WP. Are you able to reproduce this issue again? Maybe it is necessary to make sure translation files are outdated and that is what I missed last time I tried to reproduce it?\n. @ernilambar thanks for taking the time to test this. I wasn't able to reproduce the same behavior. Which version of WP-CLI are you running? I just tested with the latest version from the master branch. Here is what I did:\n$ wp core download --version=4.5.3\nDownloading WordPress 4.5.3 (en_US)...\nUsing cached file '~/.wp-cli/cache/core/wordpress-4.5.3-en_US.tar.gz'...\nSuccess: WordPress downloaded.\n$ wp core config --prompt         \nSuccess: Generated 'wp-config.php' file.\n$ wp core install --prompt\nSuccess: WordPress installed successfully.\n$ wp core language install hi_IN \nSuccess: Language installed.\n$ wp core language activate hi_IN\nSuccess: Language activated.\n$ wp core update\nUpdating to version 4.6 (hi_IN)...\nhttps://downloads.wordpress.org/release/hi_IN/wordpress-4.6.zip \u0938\u0947 \u0905\u092a\u0921\u0947\u091f \u0921\u093e\u0909\u0928\u0932\u094b\u0921 \u0915\u0930 \u0930\u0939\u0947 \u0939\u0948\u0902...\n\u0905\u092a\u0921\u0947\u091f \u0905\u0928\u092a\u0948\u0915\u093f\u0902\u0917...\nCleaning up files...\nNo files found that need cleaned up.\nSuccess: WordPress updated successfully.\nAre you running the same commands and getting the HTML output?\n. @ernilambar maybe there was an language update available when you first tested? Do you happen to know how to downgrade a language package so that we can test what happens when we run the commands above with an outdated language package? Thanks for your help!\n. It used to be a core bug but I'm not sure anymore since now I can't reproduce it :smile: \n. @danielbachhuber I don't understand what you would like to know (might be a language problem). Could you please elaborate?\n. Thanks for the clarification.\nYes, this is ready to be merged. \n. +1\n. Sure: https://core.trac.wordpress.org/ticket/22435#comment:47\n. I had to change the new exporter.\nI'm using it only in the command line and I'm not sure if I will have time to add a user interface to it to create a patch to the new exporter on Trac. I'm also not sure if that ticket is the best place to discuss improvements to the new exporter since it is not even clear if WP will ever use it. What do you think?\nIf it helps someone else the code to export posts by term can be found in the link below:\nhttps://github.com/rodrigoprimo/wp-cli/commit/eca8cf9e0baea37d65aa54d20a1cb0fc22e75bac\n. I accidentally deleted this branch and this closed the PR. Reopening.\n. I didn't find any documentation describing the different between the two statuses.\nThe best I could find was this comment on a thread:\nhttps://wordpress.org/support/topic/what-happens-when-a-blog-is-archived?replies=4#post-2007830\nBut on a quick test it seems to me that, contrary to what Ipstenu said, both an archived and a deactivated site are unavailable to an anonymous user.\n. wp search-replace --url=site.company.com site.company.com sitedev.company.com works.\nIt is not intuitive. After discussion on #1232, @danielbachhuber added this to the command examples but I think we could make it more explicit.\n@danielbachhuber, what if we create a new command called wp migrate-url old-domain new-domain as an alias to wp search-replace --url=old-domain old-domain new-domain? Or maybe we could add a new flag to wp search-replace called --migrate-url or something like that?\n. Since you are dealing with a multisite install you have to use the --network flag to perform changes in every table and not just in the tables of the main site.\n. :+1:\n. Done! :-)\n. Only the user name was used by the importer. It was getting this information from the posts as @mavin said. User e-mail, display name and other info were missing. I have added a test case that will illustrate the problem. \n. Done, I keep forgetting about this.\n. The only easy way I found to fix this is using ms_site_not_found hook (https://github.com/rodrigoprimo/wp-cli/commit/0b8a45d78e0f24c9bf12fb1ebd7943860027c716). Should I open a PR or you prefer to first investigate if there is another solution?\n. PR created. See #1909 \n. @francescolaffi as far as I know WP-CLI will not fail silently when called without a --url param in a multisite install. It simply assumes the current site is the main site. Which command exactly you are calling without a --url param and WP-CLI is failing silently?\n. Are you testing this on a multisite install? If so, see #2017.\n. Unfortunately this change won't affect wp rewrite structure --hard since this commands calls wp rewrite flush via WP_CLI::launch_self() without checking for errors.\n. @danielbachhuber I have replaced the error with a warning as you suggested.\nAs I mentioned above ideally this warning message should appear when using wp rewrite structure --hard as well. I tried to make it work by changing this line https://github.com/wp-cli/wp-cli/blob/master/php/commands/rewrite.php#L125 to:\n$process = \\WP_CLI::launch_self( 'rewrite flush', array(), $new_assoc_args, false, true );\nBut then there seems to be a problem with WP_CLI::launch_self as it is returning an unexpected warning message saying that mod_rewrite is not in apache_modules configuration (see $stderr below). I think that this method is not properly loading WP-CLI config when launching a new WP-CLI process but I haven't investigated this further.\nclass WP_CLI\\ProcessRun#140 (6) {\n  public $stdout =>\n  string(0) \"\"\n  public $stderr =>\n  string(161) \"Warning: Regenerating a .htaccess file requires special configuration. See usage docs.\nWarning: WordPress can't generate .htaccess file for a multisite install.\n\"\n  public $return_code =>\n  int(0)\n  public $command =>\n  string(138) \"/usr/bin/php5 /home/rodrigo/devel/wp-cli/bin/../php/boot-fs.php rewrite flush   --hard --path='/home/rodrigo/devel/wordpress-develop/src/'\"\n  public $cwd =>\n  NULL\n  public $env =>\n  array(0) {\n  }\n}\nThoughts?\n. On a related note, do you happen to know why core doesn't generate .htaccess for multisite?\n. Previously: #1032\nI find global parameters on every help page useful for new users (see @scribu comment on the issue above).\n. Related: #1519 \n. I just added a new commit that makes wp taxonomy list exposes the same fields that are exposed by WP-API. There are two exceptions:\n- Taxonomy labels is present in the WP-API but I think it is too much information for wp taxonomy list. My feeling is that we should add it only in wp taxonomy get (it seems now we have a reason to create this sub command).\n- The field public is missing in the WP-API (no idea why) but it seems useful information so I kept it.\nAlso the names of the fields in the WP-API are different from those returned by get_taxonomies() (for example, WP-API uses \"types\" instead of \"object_type\"). I kept the names used by the function.\n. The first build failed because my branch was not synced with wp-cli/master. After updating it the build passed.\n. :+1: \n. Thanks!\n. Ok, I will make sure to check that in the next PRs.\n. Is there a way to check that a table has only the expected rows instead of checking that a table contains the expected rows? I couldn't find it. Should we create it?\n. It is necessary to add space between the section with the global parameters and the rest of the output when help is called for a subcommand like wp post get. This space is not necessary when wp --help is called.\nBut now that you asked I notice that this extra space is not necessary for commands like wp post --help. Since this PR has been merged already I should open a new one, right?\n. I'm not sure if this is the best way to check when we should add the extra lines.\nThe first condition works for most of the cases, except for subcommands with subcommands like wp post meta. We also want to add the extra lines for subcommands with subcommands, so I had to add the second condition. Is there a better way to check for a subcommand with subcommands?\n. I asked myself the same question and to be honest I'm not sure. There is more information to show about a taxonomy but I just don't know if it is going to be useful to someone.\nI started this wp taxonomy because a few weeks ago I needed to see the capabilities associated with a taxonomy and realized that is not possible with WP-CLI. wp taxonomy list seemed a good starting point.\nThe idea now is to create wp taxonomy cap to achieve my initial goal. But I can see taxonomy capabilities inside wp taxonomy get as well.\n. @danielbachhuber I noticed that this method is duplicated in most command classes and that the only difference is the third parameter passed to \\WP_CLI\\Formatter(). Do you think it is a good idea to move this method to a parent class common to all command classes that uses it? Maybe we could create a CommandWithFormatter extending WP_CLI_Command.\n. I'm not sure it is the best abstraction as well so I will just leave it for now.\nI added it as a method anticipating that other sub commands will probably use it (like wp taxonomy get if we decide to add it).\n. I assumed it was not necessary to have two different tests just because description field is not present in WP <= 3.7\n. @danielbachhuber get_taxonomy() returns fields in a seemingly random order (labels, description, public, hierarchical, show_tagcloud, cap, name, object_type and label) so I created this $data variable to organize them.\n. I like wp post-type better because wp type sounds too generic to me. But I don't have a strong opinion on this and I can see the benefits of using the same names used by WP-API. Which do you prefer?\n. ",
    "rickard2": "Yes but in a multi site install that will only show active plugins for the main site. How do you display status for a sub-site ?\n. Ok, so that gives me plugins per site information. I think there still is a need for which sites are using a particular plugin. \nFor example, if some plugin isn't working or is having some kind of problem, I want an easy way to know how many of my sites are using it. \nI'm thinking maybe adding Activated on: xyz.com, abc.foo.net to wp plugin status <slug> or some other command. \n. Yes it seems like a better approach. You could get the full status from wp plugin status with a new parameter.\n. Great, will try it out. thanks!\n. I'd like to be able to pass at least --lock-tables to mysqldump to be able to dump large multi site installations. Is there anything I can do to help push this issue forward? Or is it relevant to open another issue for just the table locking issue?\nA short background of the issue: when dumping and locking tables mysqldump needs to open a lot of files, and if the system doesn't allow enough files to be open simultaneously you will get an error from mysqldump. If you disable table locking you can still dump databases with lots of tables in them.\n. Didn't quite understand at first but after a second read i get what the idea is. That seems like a great solution, I was thinking about doing that manually but just hacking the PHP source seemed like a quicker hack. \nDo you think adding this command would be a suitable first time contribution for me? \n. I'm not getting the password warning but it seems that quoting the host in a sub shell isn't working: \nmysqldump: Got error: 2005: Unknown MySQL server host ''127.0.0.1'' (0) when trying to connect\nSorry for crappy testing before submitting the PR, I'm closing this one. \n. Where is the docblocks used? I only saw them in wp help db \nI'll add an example \n. Sure, was thinking about credentials or creds - but with charset in there it doesn't make much sense.. \n. ",
    "h4xnoodle": ":+1: \nI was the one who asked and so I'd like to get involved with constructing this :) Does anyone know if there is a machine-friendly feed for the list of plugins? I've tried dropping feed[.php] on /plugins with no luck.\n. ",
    "jeremyescott": "I am trying to find a stock apple mountain lion to try to recreate.  hard to do while traveling.\n. ",
    "francescolaffi": "I had a look to upgraders, it's easier than I hoped for! the base upgrader has the method download_package(url)->filename and its used by the specific upgraders, so it just need to have 3 custom upgraders (core, plugins, themes) that override that method (this would be just the right use for php54 traits, but i guess its too soon for utilities to depend on it).\nI'll fork and do a pull request in the next few days, I'll outline it here for feedback.\nFileCache class for handling the file download and caching:\n- use curl for everything (core commands already use it for install, so its already a dependency)\n- cache structure similar to ~/.composer/cache/ \n- cache logics (expecially cleaning based on ttl and max size) similar to composer Cache class (maybe borrow some code, both project use MIT license; this would depend on Symfony Finder component)\nadd static command to WP_CLI class to get a configured FileCache instance, make it run cache cleaner randomly every few times (composer do it this way, with 1/50 probability, i.e. Composer/Downloader/FileDownloader)\nextend the wp specific upgraders to use the FileCache class, make (non)destructive upgraders inherit these new upgraders. change to upgraders classes in core,plugin,theme commands\nchange core install command to download and extract in two separate steps, and use FileCache for the first step\nsuggestion on how to handle cache dir configuration? I'd say an env var like $WP_CLI_CACHE_DIR cause its something common to all installs and specific to the system (default dir as suggested)\n. > Or we could introduce a global wp-cli.yml file\nthat would be nice, my 2 cents: if you plan to have a ~/.wp-cli/ folder for stuff, maybe the global yml should be in there, like the global composer json file in ~/.composer/, then like $COMPOSER_HOME or $RBENV_ROOT you can have an env var to choose an alternate location for ~/.wp-cli/ (e.g $WPCLI_HOME) then the default cache location would be $WPCLI_HOME/cache or customized via global yml\n\n\ncache structure similar to ~/.composer/cache/\n\nNot sure if that makes sense. We just need one level of directories:\n\nyep, was thinking something like that too, definitely a nice structure for packages from the official repo like plugin and themes, but I'd like the caching class to be flexible and be able to cache from everywhere, using a nice structure when indicated to. It's then up to the caller of the cache functions to indicate the nice cache key for the recognized data. (I took composer cache as example because at least in mine there is some stuff with nice cache keys and other stuff with ugly cache keys derived from urls)\nI agree to start with only plugins and theme from official repo, but it make sense to me to define from the beginning flexible file caching api for custom commands and other caching implemented later (e.g cache remote zips in plugin/theme install if --cache flag)\n. its missing phpunit tests and behat features, but I wont be able to work on it for few days, so meanwhile I attached the commit for feedback. I also never used behat so if someone wanna help with it its welcome :)\nI only tried it on mac, I'll use it on ubuntu, but I wont be able to try it on windows\nI needed to use a different cache dir so for now it looks for an env var and it then use $HOME/.wp-cli/cache\nas for dash vs slash in the cache key: its using slash for now, imho its more tidy, anyway its just a detail and a char to change in 2 locations\n. given the way upgraders work this is the only other solution I see without overriding too much code.\nthis way is also easy to implement something like wp plugin install http://myremotezip --cache[=ttl] \n. this would really be the work for traits, in the meanwhile we can work something out with an external class for the cachable urls logic, but the stuff more specific to the upgraders will be duplicated anyway. \nthis time the behat test didn't pass for some issue in the cleaning that runs with 1/50 probability, there was also a chance to pass it all and go unnoticed, luckily it got it... it definetly shouldnt try to clean the cache if its unable to create the cache dir at all, it also seem that in the travis env there is some problem in recognizing the home folder, this should be taken in consideration before creating behat tests on the cache\n. I changed the approach, forget about the upgraders and cache at the wp http api level (with url whitelisting), much cleaner (imho) and reusable.\ncollateral changes:\n- the plugins and themes folders inside the cache folder lost the plural and are now plugin and theme so I could reuse CommandWithUpgrade->item_type; \n- since I needed the new theme/plugin version in the scope of CommandWithUpgrade->update_many I used the new info to improve the table showed when running update with dry-run, adding the column with the new version, this change is not related to caching.\nTests are coming\n. I created another temp test dir (SUITE_CACHE) that is the same for all the features/scenario for one behat run, but is deleted after the suite is done, using it for the packages cache. the existing test folders didnt seem ideal for this, CACHE_DIR is not deleted between behat runs and RUN_DIR is deleted after each scenario...\n. running the test locally with same php 5.3 and wp 3.4.2 gives no error, one is a curl error in core config (fetching salts) maybe the wp.org api had some problem during the build, could you trigger a rebuild?\n. Well, I cant reproduce it at all, this time the previous failing tests succeded (they were in plugin and upgradables features) but another one in core feature failed, and its failing a core download in the core feature with a curl timeout error...considering that this pull request doesn't touch the core command at all and the core download its handled directly by requests with no cache involved I'd say that is a sporadic connection problem. What do you think?\n. I activate travis on my fork to play around with this but it went green https://travis-ci.org/francescolaffi/wp-cli/builds/12577898 ... \n. So, either travis is a bit stressed, or I introduced a heisenbug\nIt could be a good idea to put some logic to retry a request when it fails. \n. I already drafted it when working on packages cache, I'll clean it up and submit a pull.\n. Right now it only cache on the core download command, but I'd also like to cache core update, but they use different archive format (tarball vs zip) and the updates have some package types (full, no-content, new-bundled, partial); for the cache to be effective it would need some standardization.\nThe only package that can always be applied is the full zip, so I'd like to change the download command to use zip instead of tarball and make the update command always use the full package (i.e. removing the other types from the api response).\nWhen updating using the full package instead of new-bundled or no-content won't make it re-install the stuff removed for the special packages (like akismet or default themes) since that logic is on the upgrade php code.\nOpinions?\n. I forgot to say, this whole bug was only in situation where siteurl != home, for me its standard since I use wp as a read-only dependency, so the wp core url is on a subpath of the actual installation url, its not too uncommon considering #790. Although the fix is for this case, the behat test is for the general case to give coverage against regression on the general command, but it doesnt test the siteurl!=home case.\n. if you want 100% coverage yes, but there is usually some tradeoff between edge cases coverage and tests sanity and runtime; the case siteurl != home is not currently tested in any scenario, imo wp-cli should assume a good wp core handling of edge cases, otherwise there should be tests for stuff like:\n- siteurl != home in all behat features\n- custom wp-content in all features\n- and so on ...\nin this particular case wp doesn't handle the \".htaccess generation on simulated apache from the command line when siteurl and homeurl are different\" case very well, and we are using a shim to fix it, but I would not expect regressions on this edge case that do not affect the general case, so I dont see a specific test as necessary.\n. I could reproduce it on a remote server but not locally, it was because in my local php.ini I didnt have E in http://php.net/manual/en/ini.core.php#ini.variables-order so php didnt load $_ENV, the mysql command env didnt have HOME and ~/.my.cnf was ignored, this is the common case so maybe its why you cant reproduce it\n. Should plugins that create tables also register them on wpdb? It doesn't seem that http://codex.wordpress.org/Creating_Tables_with_Plugins mentions it so I wouldn't expect most plugins developers to do it. Also the properties with tables list in the wpdb class have the @access private phpdoc tag, so I'm not sure they are supposed to be changed by plugins.\nBackground: I recently updated wpcli on a server that was a bit behind (<0.17) and the sync scripts between environments started behaving differently as search-replace started running on less tables that before. One example of a plugin with extra tables that aren't search-replaced anymore is wp mu domain mapping.  The current workaround is manually listing the extra tables, but I would say its not ideal.\nAs long as the default behaviour is conservative (same as now) and the documentation is clear I don't see the risks.\n. great, I'll implement it\n. About the behaviour options I proposed initially I opted out for \"all the tables with the prefix in use (like pre-0.17)\"\nIn the test I added a column to the extra table because it only had the pk that is ignored by search-replace, actually the existing test that checks that it doesn apply to extra tables was broken (always positive)\n. :+1: \n. thanks! I also found the silent failing confusing in similar situations, but I didn't though of fixing it (or I didnt see a way)\nwould this also catch the similar situation where silently failing on a multisite without specifying a --url param? if this is the case maybe it would make sense to use a different error message suggesting to use the --url param it it wasn't specified at all\n. good point, how about this:\nin CommandWithUpgrade->install_from_repo slug and version are already available and the package url is passed to the upgraders. move the cache or download logic there and always pass a local path to the upgrader. nuke the two upgraders i wrote that are now useless.\n. but then it would miss the updates, those are handled by wp... so I dont see other straightforward solutions, and overriding lot of upgrader logic or moving update logic to wpcli would both introduce several stuff to mantain vs maintaing the format of the url...\n. its a ternary operator short circuit, see php.net \"Since PHP 5.3, it is possible to leave out the middle part of the ternary operator. Expression expr1 ?: expr3 returns expr1 if expr1 evaluates to TRUE, and expr3 otherwise.\"\nin this case if $HOME is not empty it is used (everything but windows), otherwise it uses HOMEDRIVE and HOMEPATH (windows). I put it because i wasnt sure that cygwin set the HOME env or use the windows one...\n. yep, however it seems that cygwin always defines it anyway... is it possible to use wp-cli on win without cygwin? otherwise I could just use HOME\n. not sure about this, the cache manager its just for caching the wp http api, as it is now you cant use it for caching other stuff, you would need to use the file cache directly and I believe it makes sense that way.\nif you think you'll ever need other backends than there should be a cache interface and filecache implementing it, but the get_cache should still be public returning whatever implementation you choose.\n. rookie mistake :grin: \n. ",
    "dandc": "I was not sure of the operating system, but I can check. The fix I did, seemed to get past the first error, but am unsure what is causing the current error. (403)\n. ",
    "cmmarslender": "I had this issue today actually, and it was because at the top of the wordpress-importer.php file, there is the following: \nif ( ! defined( 'WP_LOAD_IMPORTERS' ) )\n    return;\nApparently, when using wp-cli, WP_LOAD_IMPORTERS is not defined, so the class never gets defined, and that makes wp-cli import command think the plugin is not activated.\nI prevented the file from returning if it detects I am using WP CLI, and it works great now.\n. @hawkeye126 \nNot just requiring composer to be latest version - also needed to update wp-cli dependencies\n1. Change to your wp-cli directory\n2. run composer update\ni.e.\n    cd /srv/www/wp-cli\n    composer update\n. ",
    "madhippie": "Thank you guys so much! Right now I'm on vacation and I can't fix this. I'll get back to you next week. Again: Thank you very much for all the responses.\nKind regards,\nmadhippie. \n. Hm seems strange - I'll post a detailed report of my setup and a log of all the steps when i'm back at home on wednesday. Thanks again!\n. ",
    "prettyboymp": "I've been able to reproduce this, but only when trying to run the import command from another command using WP_CLI::run_command().  The issue seems to be more of a problem with the wordpress-importer plugin than WP_CLI though.\nSteps to reproduce:\n1. Create a custom WP_CLI command that loads after the wordpress-importer, either by having a higher order plugin name, or within the theme.\n2. Have the command call WP_CLI::run_command(array('import', ...));\nDefining 'WP_LOAD_IMPORTERS' has no affect in this case because wordpress-importer.php has already loaded, but returned.  You also can't force it to load again by directly requiring it because the 'wordpress_importer_init' function will have already been created during the initial plugin load even though the file returns at the top.\n. ",
    "dangtrinhnt": "I just encountered this error and finally find out the reason:\nI was using the \"--skip-plugins\" parameter when importing. That of-course ignored any plugins and did not load the WP_LOAD_IMPORTERS constant.\n. Is there any update on this issue? Seem like I have to hack into the source of WP-CLI. Basically, I just folk the WP-CLI source and modify the export.php/get_filename_template() function\n1. Clone the wp-cli project:\n$ git clone https://github.com/wp-cli/wp-cli.git\n2. Install composer and install WP-CLI's dependencies:\n$ composer install\n3. Modify the get_filename_template function in /path-to-wp-cli-src/php/commands/export.php. For example, I want to name the exporting file after the blog's path: blog-1-path.xml\nprivate static function get_filename_template() {\n    $export_file_name = get_bloginfo('url') . \".xml\";\n    $export_file_name = str_replace(\"http://\", \"\", $export_file_name);\n    $export_file_name = str_replace(\"/\", \"\", $export_file_name);\n    if( is_multisite()) {\n        $export_file_name = str_replace(\"my.multisite.com\", \"\", $export_file_name);\n    }\n    return $export_file_name;\n}\n4. Then run the export command\n$ /path-to-wp-cli-src/bin/wp export --path=/path/to/wordpress/root --dir=/path/to/export/ --url=http://my.multisite.com/blog-1-path/\nNot an elegant solution but it works for me.\n. ",
    "joshbetz": "@scribu I can open a pull request. Though, now I'm wondering if it would be much more than a wrapper for is_plugin_active().\n. @scribu I fixed the test and it passes now. I had too much white space before the start of the expected output.\n. :+1: \n. cc: @sboisvert in case you have anything to add here. We should chat about profiling wp import and wp export in Quickstart.\n. That's fine. Can I explicitly set allow-root in the wp-cli config though?\n. ",
    "jtsternberg": "@scribu \n\n. @danielbachhuber I was really looking for a way to programmatically use the data returned and this is what I came up with. I think it's a pretty cool little addition, but I suppose it might also be a little bit of overkill. Hopefully @scribu and even @tollmanz will weigh in, but if the consensus is to skip that functionality, I'll be happy to push up another update to remove it.\n. And that would somehow make the data available to wp-cli for the other plugin/theme methods? Sorry, not sure I follow.\n. Sounds like it's just a feature I would enjoy. Personally, I think it's easier to remember a key from the search results than to remember the slug, especially if it's a long weird one (dsgnwrks-instagram-importer is pretty weird). And sure you can copy/paste, but wp-cli is awesome because your hands don't need to leave the keyboard. ;)\nYou guys are the pros.. I'm just hacking here. I'll remove it and push up the update.\n. I like it! I'll add a new Issue referencing this one. Thanks!\n. Any word? Is this good to go? Sorry to be bothersome, but I'm pretty excited about both the feature and the bragging rights. ;)\n. Fixed the parse error which was causing the Travis CI tests to fail. I JUST figured out unit tests & got phpunit working last weekend... The behat thing looks interesting, but I have no idea how to implement and test, and php composer.phar install --dev gives me \"Could not open input file: composer.phar\" so I'm off to a bad start. If you'd care to school me on setting it up, I'd love to do it. Otherwise, it could be a while before I can get that all figured out.\nIs that a barrier to getting this included?\n. My composer was installed in a different directory. I got it all installed and is in the middle of running the last test, vendor/bin/behat --expand\n. It's still running the behat scenarios. I assume it will test the search feature by default? Or do I need to configure something somewhere?\n. If the whole suite doesn't need to be run, I'd recommend https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#running-the-tests gets updated: \n. vendor/bin/phpunit looks good:\nhttp://b.ustin.co/5m9k\nvendor/bin/behat --expand:\n69 scenarios (68 passed, 1 failed)\n605 steps (604 passed, 1 failed)\nhttp://b.ustin.co/Rn9d\nvendor/bin/behat --expand features/upgradables.feature:\n2 scenarios (2 passed)\n74 steps (74 passed)\n. Tests added.\n. Awesome! Thanks for your help. \n. More details from @scribu \nAdd an --interactive flag to wp plugin search.\nAfter it shows you the list of results, it shows a prompt:\nComma-separated list of plugins to install (see Key column):\nAnd you enter the numbers: 1, 5, 6 and then the command calls wp plugin install internally, using WP_CLI::run_command().\n. Ok, so i'm clear, change from:\nfunction search(\nto:\npublic function search(\nright?\n. ",
    "bobthecow": "Bonus advantage:\n- You can write custom PsySH commands which proxy the wp-cli commands... Then, from inside wp shell, you can run things like:\n```\n\n\n\npost delete 123 --force\ncache set my_key my_value my_group 300\n  ```\n. Yeah, but you'd just ask WP-CLI for its commands. Something like this:\n\n\n\nhttps://gist.github.com/bobthecow/7c0426b20bb9b498ca29\nNote that I didn't actually test this. Or even open it in a text editor to see if the syntax highlighted correctly. I typed it into Gist and submitted. But it should at least give the gist of it :)\n. ",
    "mattes": "@scribu In general, will you merge this PR if a test is written for it? Or are there other plans? \n. ah cool. i like the TCP support there. will update my fix.\n. thanks!\n. Please see https://github.com/mattes/wp-cli-quick-install-command\nWhile wp-cli-quick-install-command.php has the following content:\n``` php\n<?php\nclass Quick_Install_Command extends WP_CLI_Command {\n/*\n   *  @when before_wp_load\n   /\n  function test($args, $assoc_args) {\n    WP_CLI::warning(\"Hello!\");\n  }\n}\nWP_CLI::add_command( 'quick-install', 'Quick_Install_Command' );\n```\nCalling it with wp quick-install test\n. Its included with autoload:\n...\n    \"autoload\": {\n        \"files\": [ \"wp-cli-quick-install-command.php\" ]\n    }\n    ...\ncomposer.json in main directory:\n{\n    \"name\": \"wp-cli/wp-cli\",\n    \"description\": \"A command line interface for WordPress\",\n    \"keywords\": [ \"cli\", \"wordpress\" ], \n    \"homepage\": \"http://wp-cli.org\",\n    \"license\": \"MIT\",\n    \"bin\": [\n        \"bin/wp.bat\", \"bin/wp\"\n    ],\n    \"require\": {\n        \"php\": \">=5.3.2\",\n        \"wp-cli/php-cli-tools\": \"0.9.3\",\n        \"mustache/mustache\": \"~2.4\",\n        \"rhumsaa/array_column\": \"~1.1\",\n        \"rmccue/requests\": \"~1.6\",\n        \"mattes/wp-cli-git-command\": \"dev-master\",\n        \"mattes/wp-cli-quick-install-command\": \"dev-master\"\n    },\n    \"require-dev\": {\n        \"symfony/finder\": \"~2.3\"\n    },\n    \"suggest\": {\n        \"psy/psysh\": \"Enhanced `wp shell` functionality\"\n    },\n    \"autoload\": {\n        \"psr-0\": { \"WP_CLI\": \"php\" },\n        \"files\": [ \"php/Spyc.php\" ]\n    },\n    \"repositories\": {\n        \"wp-cli\": {\n            \"type\": \"composer\",\n            \"url\": \"http://wp-cli.org/package-index/\"\n        }\n    }\n}\ncomposer.json for the command\n{\n    \"name\": \"mattes/wp-cli-quick-install-command\",\n    \"type\": \"command\",\n    \"description\": \"Install WordPress with one command.\",\n    \"keywords\": [\"wp-cli\", \"install\", \"quick\", \"wordpress\"],\n    \"homepage\": \"https://github.com/mattes/wp-cli-quick-install-command\",\n    \"require\": {\n        \"wp-cli/wp-cli\": \">=0.11\"\n    },\n    \"license\": \"MIT\",\n    \"authors\": [\n        {\n            \"name\": \"Matthias Kadenbach\",\n            \"email\": \"matthias.kadenbach@gmail.com\",\n            \"homepage\": \"http://matthiaskadenbach.de\"\n        }\n    ],\n    \"support\": {\n        \"issues\": \"https://github.com/mattes/wp-cli-quick-install-command/issues\",\n        \"source\": \"https://github.com/mattes/wp-cli-quick-install-command\"\n    },\n    \"autoload\": {\n        \"files\": [ \"wp-cli-quick-install-command.php\" ]\n    }\n}\n. I updated the repo. Please ignore the \"Developer Note\". I don't use any symlinks at the moment.\n\nEditing the main WP-CLI composer.json is not how community packages are supposed to be installed.\nAre you sure you ran composer update after editing composer.json?\n\nI installed it as described here: https://github.com/mattes/wp-cli-quick-install-command#installation\n. I dont have anything under ~/.wp-cli/. I installed wp-cli with homebrew (see formula). Everything is under /usr/local/opt/wp-cli\n. Okay, cool. I just learned about the wp-cli.yml file. I wasnt aware that such a thing exists. \nSo ~/.config/wp-cli.yml works, right?\nIs https://github.com/wp-cli/wp-cli/wiki/Community-Packages#installing-community-packages-manually outdated then?\n. Okay, thank you for the information. Is there anything I can help with? \n. Unfortunately, removing the extra space didn't solve the problem.\n. Using this approach: https://github.com/wp-cli/wp-cli/wiki/Community-Packages#wiki-installing-a-package-without-composer and having no extra white space works.\n. Hey guys. I see some good progress on this topic. I think installing packages is a little confusing at the moment. Is there anything I can help with so that the wp packge command can be officially released soon?\n. I guess this is somehow related: https://github.com/wp-cli/wp-cli/issues/887\nUPDATE: Probably not related.\n. ",
    "beaucollins": "Here's the php setup I used:\nphp --version\nPHP 5.4.16 (cli) (built: Aug  7 2013 21:52:38) \nCopyright (c) 1997-2013 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies\nAnd the terminal showing some requests:\nbeaucollins@Collins wp-cli (server)$ ./bin/wp --path=/Users/beaucollins/Sites/wp server --port=4001\nBooting WordPress server on port 4001\nRequest: GET / HTTP/1.1\nError: 8: Undefined index: REQUEST_METHOD in /Users/beaucollins/Sites/wp/wp-includes/template-loader.php at #10\nError: 8: Trying to get property of non-object in /Users/beaucollins/Sites/wp/wp-includes/admin-bar.php at #4298: Trying to get property of non-object in /Users/beaucollins/Sites/wp/wp-includes/admin-bar.php at #441\nResponse in 299 ms\nRequest: GET / HTTP/1.1\nError: 8: Undefined index: REQUEST_METHOD in /Users/beaucollins/Sites/wp/wp-includes/template-loader.php at #10\nError: 8: Trying to get property of non-object in /Users/beaucollins/Sites/wp/wp-includes/admin-bar.php at #4298: Trying to get property of non-object in /Users/beaucollins/Sites/wp/wp-includes/admin-bar.php at #441\nResponse in 303 ms\nProducing the HTML for the page (static files not handled):\n\n. For reference see issue #648.\n. Cool, I'll continue work on a package.\n. ",
    "hawkeye126": "How did you fix this?  I've updated composer but to no avail.  Any help or advice would be much appreciated!  Thanks!\n. I have added the feature.  Please let me know if it checks out.\n. @scribu thank you for the direction, I am a first timer.  The pull request has been opened.\n. ",
    "pjohanneson": "Thanks, that fixed a problem I was having too.  Much appreciated, @cmmarslender.\n. I had this issue today (after upgrading wp-cli to the latest version), and the solution for me was to add suhosin.simulation = On to the end of my CLI php.ini. Anyone know if there are security implications to this? (This is on a local test server, but I'd hate to do this on a production server and find out I shouldn't have.)\n. This is on an Ubuntu VM, and there are indeed separate php.ini files for CLI and my Apache server.\n. Tried it again, and this time it worked fine off the cached copy. No errors. I'm closing this as it seems to be a one-time issue on my end.\n. Solution:\nInstall php-dom.\nIn my case it was apt-get install php-dom; others may need apt-get install php5-dom.\n. ",
    "michaelryanmcneill": "WP-CLI 0.11.0-alpha2 is the version I'm using.\n. @scribu Just updated and issue still persists. \n. @scribu I also just tested on a clean install of WP and it still doesn't work.\n. @scribu Can you possibly decode that error and tell me where the problem could lie?\n. @scribu or is there someway I can get you to look at this environment? I don't mind paying you to.\n. After further reviewing this, it seems to be related to 3.6, as 3.5.2 installs don't have that problem. I'm going to try a clean install and see if it does the same thing.\n. @danielbachhuber not more than it had something to do with 3.6, because 3.7 and 3.5.2 were not affected. Could not figure out more than that.\n. In addition, I tried running an import, and it says all posts that are importing are already there, even though they aren't, and it continues to migrate the post metadata, even though there are no posts. It makes no sense.\n. Determined this was an environmental problem. \n. I was searching for an issue and somehow accidentally filed an issue.\n. Have you tried it without the quotes around the arguments? I can't reproduce currently, but locally I'm not running 0.11.2.\n. So, redirection isn't network activated, it is only active on some sites. But, I went ahead and deactivated the plugin temporarily everywhere by moving it out of the plugins directory. Even after doing so, the issue is still present. I also did some querying on the sites that failed and not all of them have redirection active. Other ideas?\n. Cool. What is the best way to get more information? Right now, if the return code isn't 0, then it discards stdout (and I don't believe it does anything with stderr). Could we instead capture stdout and stderr and display that if the --debug flag is set as a traceback?\nhttps://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L1406-L1418\nif ( 0 == $process->return_code ) {\n                    // See if we can parse the stdout\n                    if ( preg_match( '#Success: (.+)#', $process->stdout, $matches ) ) {\n                        $message = rtrim( $matches[1], '.' );\n                        $message = \"{$message} on {$url}\";\n                    } else {\n                        $message = \"Database upgraded successfully on {$url}\";\n                    }\n                    WP_CLI::log( $message );\n                    $success++;\n                } else {\n                    WP_CLI::warning( \"Database failed to upgrade on {$url}\" );\n                }\n. This afternoon I spent some time troubleshooting this issue. First, I added in some debugging logic that printed stderr. When I did this, I got no output besides the debug message itself from using WP_CLI::debug. So, I decided to add stdout as well to see what the output of the command was. Then, I began to see things like this:\nWarning: Database failed to upgrade on XXX/\nDebug:  (4.681s)\nDebug: Success: WordPress database already at latest db version 37965.\n (4.681s)\nSo, I decided to add the return code as well to see what was going on. That is when things got weird. The return code was empty. \nWarning: Database failed to upgrade on XXX/\nDebug:  (3.355s)\nDebug: Success: WordPress database already at latest db version 37965.\n (3.355s)\nDebug:  (3.355s)\nThen, I began digging into the code of wp-cli with @earnjam. We then drilled down to see where the return code is being generated, which is here: https://github.com/wp-cli/wp-cli/blob/964d8e06dc3c5b16caa057f0888989e2a679e365/php/WP_CLI/Process.php#L54\n'return_code' => proc_close( $proc ),\nThen, I decided to do a var_dump on $process->return_code and got the result of:\nint(-1)\nWarning: Database failed to upgrade on webdev.unc.edu/\nDebug:  (3.355s)\nDebug: Success: WordPress database already at latest db version 37965.\n (3.355s)\nDebug:  (3.355s)\nAfter reviewing the proc_open manual page: http://php.net/manual/en/function.proc-close.php I saw these two things:\n\nReturns the termination status of the process that was run. In case of an error then -1 is returned.\nIf PHP has been compiled with --enable-sigchild, the return value of this function is undefined.\n\nSo I went and took a look at our PHP build process (since we custom compile PHP for all of our installs) and saw that we do in fact compile with --enable-sigchild. I am in the process of recompiling to test without --enable-sigchild, but wanted to update you what we have found so far. \nFrom the docs, Stack Overflow posts, etc. that we've read, it seems that proc_close isn't very reliable in determining a valid exit code and it makes me wonder if there is a better way to accomplish it that isn't impacted by this issue. At this time, I have no suggestions though on how to do that, just wanted to throw it out there as a possible resolution. \nMore details to come...\n. Yep, dropping --enable-sigchild does indeed resolve the problem. \nSo, to me, four things should be done here:\n1. Add to the \"Common issues and their fixes\" page details about this issue and how to resolve it (by recomplining without the --enable-sigchild option.\n2. Add additional debugging details that includes a traceback of stderr, stdout, and return_code which are shown upon failure when --debug is passed to the command.\n3. Allow --skip-plugins (and other global flags?) to be passed to the WP_CLI::launch_self call to help prevent issues with plugins such as redirection, wp-require-login, etc. \n4. Look to determine a better way to receive an exit code from processes or don't rely on exit codes at all for WP_CLI::launch_self. There are suggestions out there for getting the real exit code, but I'm not sure that is the best way to go about it either: http://stackoverflow.com/a/7841550/836695\nIf you think this sounds good, I'll get moving on 1-3. 4 will definitely require some additional brainstorming, but I'm glad to help, brainstorm, propose patches, etc. \n. I'll submit a PR on 1 shortly and I'll keep an eye on #3139 for 3/4. \nIn regards to 2, should we have a different warning show up when the exit code is -1? Something like:\nif ( 0 == $process->return_code ) {\n    // See if we can parse the stdout\n    if ( preg_match( '#Success: (.+)#', $process->stdout, $matches ) ) {\n        $message = rtrim( $matches[1], '.' );\n        $message = \"{$message} on {$url}\";\n    } else {\n        $message = \"Database upgraded successfully on {$url}\";\n    }\n    WP_CLI::log( $message );\n    $success++;\n} elseif ( -1 == $process->return_code ) {\n    WP_CLI::warning( \"The database upgrade returned an exit code of -1 on {$url}. This is generally caused by a custom compiled version of PHP that uses the --enable-sigchild option. Read more about this issue here: <link to Common issues and their fixes page>. \" );\n} else {\n    WP_CLI::warning( \"Database failed to upgrade on {$url}\" );\n}\nObviously that is a very rough example, but hopefully the point is clear.\n. ",
    "md2k": "need to try both variants.\nAs for me, my current goal that w3tc do flush properly for blogs, as for example:\ninside WP blog have domain example.com , by mapping plugin it mapped to example.net, so we accessing this blog by http://example.net/  that mean inside Varnish we have exactly this domain and we should purge exactly it, not original domain .com\nWhen im doing purge from wp-admin interface , w3tc purging correct domain (after remap, so it purge example.net)\n. ",
    "audionerd": "I'm getting a similar warning re: HTTP_HOST.\nI can fix it if I resort to setting the HTTP_HOST value manually in wp-config.php, which I'm sure is a bad idea long-term !!\n$_SERVER['HTTP_HOST'] = \"localhost\";\nFWIW I'm using the wp-config.php setup from wordpress-boilerplate, which overrides some folder locations:\nhttps://github.com/Darep/wordpress-boilerplate\nAny idea how to fix this properly?\n. @scribu Thanks! That's a good workaround.\nJust tried setting an environment variable (in my bash script which calls wp-cli) and that also fixes it.\nexport HTTP_HOST='localhost'\nObviously localhost is problematic, and I'd rather not hardcode the actual domain at all...\n. ",
    "MZAWeb": "oh, exporting HTTP_HOST is a great solution. Thanks.\n. ",
    "jmichelsen": "This isn't a wp-cli issue turns out. There are custom functions added into wp-config, only on this server. \n. ",
    "nyordanov": "This issue should probably be closed now. I've reflected the changes after #1539 in https://github.com/wp-cli/wp-cli/wiki/Release-Checklist\n. My proposal:\nOn shutdown: run wp cli check-update once a day in the background. Write the results to a cache file.\nOn startup: check if the cache file exists and if it does - read its contents. If there are any updates, print a message\nIf this is acceptable, I'll implement it once #1535 is merged (both modify the same code).\n. Isn't Oh My ZSH obtrusive? It prevents you from doing anything until you state whether you want to update.\nThis won't be a problem if we can reliably detect if WP-CLI is used in a script or in an interactive shell, but can we do this from a Phar? \n. @danielbachhuber I would, but after May 20. When is v0.20.0 scheduled to be released?\n. I'm sorry I'm terribly late with this - other things took priority. Please check #2223.\n. Is it possible to have Travis cache the four plugins which are used for the feature tests in some GitHub repo? It already has access to the builds repo.\n. There's also http://www.pluginmirror.com/ \n(https://github.com/wp-plugins/akismet/archive/3.0.4.zip as opposed to https://downloads.wordpress.org/plugin/akismet.3.0.4.zip)\nWe'll need some way of getting the latest stable tag without using plugins_api(). Also, as far as I can see, there is no readily-available mirror for the themes repo.\n. @danielbachhuber I don't think that this is fixed. For example, try this:\n```\n\nwp core download --version=4.1.0 --force\nDownloading WordPress 4.1.0 (en_US)...\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'internal corruption of phar \"/tmp/wp_5521145e1831a.tar.gz\" (__HALT_COMPILER(); not found)' in phar:///usr/local/bin/wp/php/commands/core.php:190\nStack trace:\n\n0 phar:///usr/local/bin/wp/php/commands/core.php(190): PharData->__construct('/tmp/wp_5521145...')\n1 phar:///usr/local/bin/wp/php/commands/core.php(176): Core_Command::_extract('/tmp/wp_5521145...', '/home/vamtam/pu...')\n2 [internal function]: Core_Command->download(Array, Array)\n3 phar:///usr/local/bin/wp/php/WP_CLI/Dispatcher/CommandFactory.php(52): call_user_func(Array, Array, Array)\n4 [internal function]: WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher{closure}(Array, Array)\n5 phar:///usr/local/bin/wp/php/WP_CLI/Dispatcher/Subcommand.php(295): call_user_func(Object(Closure), Array, Array)\n6 phar:///usr/local/bin/wp/php/WP_CLI/Runner.php(304): WP_CLI\\Dispatcher\\Subcommand->invoke(Array, Array, Array)\n7 phar:///usr/local/bin/wp/php/WP_CLI/Runner.php(311): WP_CLI\\Runner->run_comman in phar:///usr/local/bin/wp/php/commands/core.php on line 190\n\ncat /tmp/wp_55211685646a0.tar.gz \nRelease not found.\n```\n\nThe problem is that the supposedly .tar.gz file is just a plain text file containing \"Release not found.\" Perhaps you need to catch the exception, and then check the contents of the downloaded file?\nThe problem here is that the error message (UnexpectedValueException) is not descriptive enough. Exiting with \"Error: Release 4.1.0 (en_US) not found.\" would be better.\n. Related: #680, #1199, #1390 \nAlso, one of the jobs of the Travis build fails because the WP Importer plugin is not installed. I don't see how this could have been caused by the changes introduced in this PR.\n. > What do you think is the best way to do this?\nWe could have make-phar.php take a parameter: --version=[patch|minor|major|x.y.z]. patch will be the default value. This will modify the define( 'WP_CLI_VERSION', '0.17.1' ); line - this way people who don't use the Phar release will still have version information.\nDo you want me to open another PR for #680?\nI'll create an issue with a task list for everything update-related.\n. > [...] setting WP_CLI_VERSION to an \"incorrect\" value at the beginning of the build just for the purposes of one test.\nSuch test will need an entirely different build anyway. After performing wp cli update the Phar will be useless as it will be overwritten by the latest stable release.\n\nInstead, we probably should set it at runtime. How do you feel about this?\n\nHow can we expose this to the tests but not to regular users?\n. I've added a new features/cli.feature file which tests the following:\n- Building a temporary Phar with a custom version shouldn't change the contents of VERSION\n- There should be some updates after version 0.0.0 (output of wp cli check updates should contain package_url when the Phar's version is set as 0.0.0)\n- Successful wp cli update for a Phar with a version set as 0.0.0\nAlso:\n- A new --store-version flag for utils/make-phar.php - if missing the contents of VERSION will not be changed.\n- New function set_file_contents() in utils/make-phar.php which acts as add_file(), but instead of using file_get_contents() expects the contents to be passed as a third argument. I can merge it with add_file() if that's preferred.\n- New Given...:\n  - a new Phar with version \"...\" - stores the path to the Phar in {PHAR_PATH}\n  - save the ... file ... as ... (based on save (STDOUT|STDERR))\n- New Behat variable - $this->variables['SRC_DIR'] = realpath( __DIR__ . '/../..' );\n. > I'll set aside some time next week to check the branch out and test throughly.\nSure. I'll do #1011 when this is merged.\nEdit: Sorry, didn't see #1547\n. @danielbachhuber please see https://github.com/nyordanov/wp-cli/commit/e7610a62cd1fbe0a5e6b3d15fa270e1c1b92727e\nWe can detect Git installs by the presence of a .git directory. I'm not sure what is the correct way to detect if this is a Composer install.\n. @danielbachhuber done\n. @danielbachhuber the tests pass when I run them locally, but I only have php 5.5 right now and I've noticed that Travis fails only on 5.3. I'm busy until the end of next week, so I won't be able be able to look more closely into what's causing this until then.\nIf the problem is not fixed by then, I'll try to fix it when I'm back.\n. I just can't reproduce this locally. I tried the same PHP version as Travis (5.3.29) and the rewrite tests pass just fine. Yet, they consistently fail in Travis.\nAny idea what's behind the 255 exit code?\n. It looks like it was a PHP 5.3 issue after all (or possibly specific to the 5.3 used by Travis?). The tests pass if I don't force SHA512 to be used as the algorithm for the Phar self-check.\n. @danielbachhuber have I broken the commits to https://github.com/wp-cli/builds? The last build is wp-cli/wp-cli@b09a45a\n. Fails at the same place as before...\n. Your PR made me realize that there is only one PHP change, so I removed it. #1555 now passes the tests. I still don't know why it didn't pass before though.\n. I agree, but the top-level command should be kept as a (deprecated) alias.\n. @b-long - if you manually replace /usr/local/bin/wp with this file, what happens if you then run wp cli update --debug? This is a \"fake\" 0.19.0 - it is the current master branch + https://github.com/nyordanov/wp-cli/commit/1a76044c2d3de6317b9467450f76a5a7f8224238 Feel free to build it yourself if you'd like to.\nThis should show us why replace() fails. The more interesting question is why is_writable() returns a false positive.\nIn any case sudo wp cli update --allow-root should work.\n. --debug didn't work because the update didn't fail this time.\nAnyway, it appears the issue is this: http://superuser.com/a/331124\nI'm not sure what we can do about this. Do you have the same problem when updating composer? wp cli update is similar to composer self-update and they also use rename to replace the currently installed file with the update: https://github.com/composer/composer/blob/69210d5bc130f8cc9f96f99582a041254d7b9833/src/Composer/Command/SelfUpdateCommand.php#L189\n. > Running the update check on shutdown is a neat idea, although I don't know if it offers any key advantages.\nThe main advantage is that the check is non-blocking. Also, if there is a way to reliably detect an interactive session we will be able to show the \"update available\" message immediately.\nStoring the next check time is a good idea, see https://github.com/nyordanov/wp-cli/commit/148c4098d0537af85e9a62876643652b8ec9b421.\n\nblock the current execution of wp or wp help and indicate which version is available (and which version the user currently has), and perform the update if y is provided at the prompt.\n\nSomething like https://github.com/nyordanov/wp-cli/commit/6f308217cd7ee0cf4aacf9e6eb4176338f263b3f? This is not ideal, though - help will perform an additional cli check-update and block, which might make it unusable if you can't reach Github. Perhaps we can do cli check-update in the background, so that by the time the user exits the pager, we would have already fetched the list of updates?\n. Check the write permissions of /usr/local/bin/wp. If you've moved the file there with sudo mv wp-cli.phar /usr/local/bin/wp you may need to update it with sudo as well:\nsudo wp cli update --allow-root\nPersonally, I keep the wp Phar in ~/bin/wp, which I've previously added to my PATH.\n. It would be nice if, when the time comes to remove those commands from the Phar release, we can make the update processes automatically install any packages necessary for preserving backwards-compatibility.. Nowhere, they don't really make sense. I've documented them since I'm using the code from check_update.\nMy proposal is to introduce --only-patch and --only-minor which are more useful for the update feature.\n. Sure.\n. I'm now printing the output of php $temp --version in case of a failure. It will look like this: \n\nSee nyordanov/wp-cli@777218040353a8c3b5bd002a47c6dd7c16b4beab\n. OK\n. Would you rather have a WP_CLI::error_box() or remove this entirely?\nAlso, what the $exit param?\n. I've added a task in #1536\n. Fixed.\n. Sorry, my mistake - I was confused by the options' descriptions. The current options do just that. That is, --patch lists only patch updates and --minor lists only minor updates.\nI've changed the descriptions of the two and added --ignore-patch and --ignore-minor in https://github.com/nyordanov/wp-cli/commit/a036ec39d8afedec11b8d5570c6a0eaf4222adf3. Is this ok?\n. WP_CLI::error_multi_line() is now in https://github.com/nyordanov/wp-cli/commit/6fd93c2fdd9813280b56e8e81a15fb17f06d1f75\n. Where should I put the new function?\n. I've done that in https://github.com/nyordanov/wp-cli/commit/3270b1151111392bf4c9e658f5b27e6e406ef5d6\n. Changed in https://github.com/nyordanov/wp-cli/commit/696dc1697057118c0a6853dd8b2de52fb14c4d1b\n. Fixed in https://github.com/nyordanov/wp-cli/commit/910e65012d05534174805b54f7e6c9fe44796142\n. Fixed in https://github.com/nyordanov/wp-cli/commit/910e65012d05534174805b54f7e6c9fe44796142\n. A test for patch updates is possible (say, fake 0.14.0 to 0.14.1), but a minor update will always go to the latest stable release at the time of running the test. I don't think that the CI can have reliable information regarding the version string of the latest minor update - after all, this info will depend on the same API we'd be testing.\nI've added scenarios updating from 0.14.0 with --patch and --no-patch in https://github.com/nyordanov/wp-cli/commit/e02362b5ab8d6b05cc8301731975a098ea4b92c3\n. Takes care of --no-patch. This will behave in the exact same way as --minor until 1.0.0 is released.\n. I removed the default argument value in 01bebd9, so I should never be empty now. \n. ",
    "parse": "I tested the solution provided a few posts back (https://github.com/wp-cli/wp-cli/issues/683#issuecomment-22771135) and it worked, however, I came up with this solution:\n```\n    function update( $args, $assoc_args ) {\n        global $wpdb;\n        require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );\n    if ( empty( $args['network'] ) ) {\n        wp_upgrade();\n        WP_CLI::success( 'WordPress database upgraded successfully.' );\n    } else {\n        $blog_list = $wpdb->get_results( \"SELECT domain FROM \" . $wpdb->base_prefix . \"blogs\" );\n        foreach ( $blog_list as $blog ) {\n            WP_CLI::run_command( array( 'core', 'update-db', $blog->domain ) );\n        }\n    }\n}\n\n```\nStruggling with my environment right now, so I was unable to test it, so its just pseudo. Is it a good idea to put it in this update()-task? Should I create a pull request for a final version of this? \n. ",
    "mackensen": "It seems like this requires two commands to accomplish with the current version of wp-cli:\n- wp site list --field=url | xargs -n 1 -I % wp core update-db --url=% (update the sites in the network)\n- wp network meta update 1 wpmu_upgrade_site <version> (to dismiss the notice in the network admin)\nAm I missing something?\n. I'm on RHEL6 for a little while longer, but I have options. In the short term is there a reason why I shouldn't locally downgrade the symfony components to ~2.3?\n. Thanks. That gets me over the 4.5 upgrade hump and hopefully I'll be off RHEL6 before 4.6 rolls around. I can't imagine too many other people are in this position.\n. ",
    "nikolay": "This is a subset of https://github.com/wp-cli/wp-cli/pull/688 and I think having a configuration file with more than just plugins is the right way to implement state.\n. My $.02:\nI know YAML is used for WP-CLI's configuration, too, but if you're gonna support a single data format, JSON is something that's more appropriate for the WordPress demographic. Ideally, multiple formats should be supported, but, in practice, YAML and JSON will cover 99% of the market.\n. @scribu It's a vastly more popular standard, so, it has a lower entry point (you and I know what YAML is, but this doesn't meant most PHP developers do as it's primarily part of the Python and Ruby stacks) and it's becoming more and more integral part of the WordPress stack (with Jetpack's JSON API, web development heavily relying on JSON, etc.). YAML you need to install and maintain just for WP-CLI if you want to automatically generate project.yml and so on.\nThere are and always be competing configuration formats like TOML today, but they all essentiallywill be an array() after parsing in WP-CLI, so, it's not hard to make this exntesible, though, I'm not sure if it's necessary. I'm sure though that if you do a survey, most people will pick the well-familiar JSON given the DevOps guys are less. If you want to target just DevOps than you're not doing a favor to the long tail WordPress user base.\n. @scribu I agree that it's easy to produce invalid JSON, but it's easy to to make hard-to-detect errors with YAML on the other hand. I'm not saying WP-CLI should only support JSON, but that it should in addition to YAML.\n. Hi @scribu!\nIf you use Chef, SaltStack, CloudFormation, etc., you have some environment settings, you have code in source control, and you have scripts that provision a server using the environment's settings, the immutable code (for both WordPress and the system scripts), i.e. the deployment process does not alter any state outside of the particular environment being provisioned.\nCurrently, I rely on WP-CLI to download the desired version of WordPress, auto-generate the wp-config.php based on the options I pass, and install plugins and themes from WordPress.org. If I have to build the initial directory myself, then it's much easier for me to not use WP-CLI at all and do all myself and only use it after the working directory is done. The beauty of WP-CLI was that I don't have to maintain a copy of wp-config.php and constantly merge changes from upstream they may come with new versions of WordPress.\n. If \"--skip-salts\" is more aligned with your vision, guys, then it's still better than what's currently in place. Do you want me to re-work the PR?\n. @scribu @danielbachhuber Are you okay with the commits so that I can now write the Behat tests?\n. I am such a moron: \"Fixed a typoe in ...\" Anyway, thank you!\n. :+1:\n. @scribu This is a bit hacky, honestly. I suggested this to @danielbachhuber as a hack, too, but checking for a config in a standard location in your home is pretty conventional technique and doesn't require touching your shell profile.\n. @scribu How about at least checking an environment variable then?\n. @scribu It's not a compromise, it's common practices to look for configuration file in an environment variable (higher priority) and $HOME\\.project\\config. Just look at Git as an example. There are global settings, there are per-repository, there are conventions, and there are environment variables. Some projects even implement inheritance across the levels I mentioned. There's no single best practice. Every developer, team, and project have their specifics. Aliases are meant for shortcuts, not to be used as crutches although they could be used for that, too.\n. I am sorry of not being clear. I see what you propose, but you want to introduce limitations in the global config, in other words, in common use case, which @danielbachhuber and I are trying to address, i.e. where you have a single active WordPress project on the system - Vagrant box, large WordPress installation, etc., - a global config with limitations will be of no practical use. If, instead, an inheritance mechanism is implemented (which is pretty trivial), the solution will work for either use case - single or multi.\n. --config should have the highest priority. Then, the environment variable (if it ever gets implemented), then the config found via find_file_upward().\nThinking about it, ~/wp-cli/config.yml will be a source of issues. If you have crons that use WP-CLI, then it's not gonna work as those will possible run under www-data user, not the user you CLI as so you will have to copy or symlink. Just adding an environment variable, which will set the default value of --config, for example, will work best for all use cases.\nIt would be great to have a more DRY configuration where you have server defaults overridden by project-specific settings and then having limitations will make sense (although Apache modules are generally shared on a default-setup Apache configuration), but I think given there aren't that many configuration options right now, it will be an overkill at the moment.\nI'd be happy if you at least allow --path to be defaulted to an environment variable if --config is too much with questionable for you benefit.\n. Nice! Can't wait! For now, my workaround is to put a file in the root. Ugly, but works.\n. +1\n. @ryanduff It's a common mistake not to escape underscores in MySQL LIKE statement. The WHERE clause should look like this:\nsql\n`option_name` LIKE '\\_transient\\_%'\nIt's ugly, but correct.\n. @scribu I'm not a WordPress pro like you, guys. I'm happy that WordPress has such a powerful arsenal.\n. Beautiful!\n. Yeah, even better.\n. wp option set home \"${SITE_URL}\"\nwp option set siteurl \"${SITE_URL}\"\n. Well, after digging a bit into it, it came out that if you have WP_HOME and WP_SITEURL constants set in wp-config.php, then wp option set home ... and wp option set siteurl ... don't work consistently. For example, if you have in the constant http://test.com and try to set to http://test.com/, it will then fail even on the first call. If you try to set it to http://test.com/something, then it works the first time, but then it will fail on the second. Anyway, it's weird, and I'm closing the issue, but it would be nice to warn if you're trying to set home or siteurl while you have the constants set.\n. Can this be configured in wp-cli.yml?\n. @SpikesDivZero I understand the security concerns, but my issue is that a minor version broke backward-compatibility for me, and I'm sure I'm not gonna be the only one having this issue out of the blue. Well, I am happy with this feature at the end though as I haven't considered the scenario where an attacker will patiently wait for me to run manually WP-CLI commands as root.\n. If it's in the .phar file, it can be extracted from there with a single command otherwise it becomes a bit complicated to keep both the .phar and the wp-completion.bash on the same exact version.\n. @danielbachhuber Thanks! That is what I've done. I tied my installation to a specific version and I download the corresponding wp-cli.phar and bash wp-completion.bash.\n. ",
    "Martin1982": "I was already thinking of that as well. Having a make command out of the box would make it easier to automate deployments, version all sorts of changes (configuration + code + dependencies) and standardise that, I got my inspiration from drumroll... Drupal through this presentation; http://www.slideshare.net/nuvoleweb/code-driven-development-using-features-effectively-in-drupal-6-and-7 .\nBut there's still so many work to be done (and like every developer; there's so little time). So moving it to a package sounds more than sensible to me.\n. @danielbachhuber I'm not quite sure about putting the project.yml file in the webroot. This would make it accessible to the world and could impose a security threat if it contains sensitive information. Even something like a username can be considered 'sensitive' as not all users would like to show their presence on a website.\nThis also makes it too easy to find out which plugins might be active and run a bot against these plugins to test for known exploits.\nSo a project.yml / project.json is definitely something I'd love to see, just not in my accessible web root.\nConfiguration vs. Content: My feeling is that configuration is something you do want to version, you don't want to setup a development environment (or even better; a Vagrant box + provisioner) and do the configuration over and over again. Also when deploying to a production server you want to make sure that all configuration options set during development are there in the working state.\nContent is something you can mimic or even import and export from another environment, content is constantly growing and your codebase shouldn't be dependant on it.\nIt would be nice though to have an option to mark content as 'makeable' for those rare cases where functionality does rely on content. This way it would totally be the developers choice and responsibility.\nRegarding the CPT files; I'm not too experienced with Wordpress yet and have no knowledge over these files. But the community is large, this will probably be one of the hurdles we need to overcome.\n. @scribu @nikolay YAML is being advertised as having JSON as a subset. When creating such functionality using JSON as a basis should be sufficient to make it portable to YAML as well.....in theory :)\n. Chef, Capistrano and SaltStack all require to learn about how to work with this software (which I do encourage actually), bundling it or providing the most common workflows through WP-CLI makes the learning curve less steep.\nBut I do respect the decision to not make this part of the core WP-CLI with all the risks and complexity involved in this idea. Whenever I find the time I'll try and make a community package to work on it and experience the difficulties involved :)\nI do appreciate the serious feedback on my branch and the pro-active approach to discuss it in an early stage. That really shows that WP-CLI is a serious, active and high quality product! I will keep supporting it among the communities here so everyone can enjoy it's benefits.\n. ",
    "lordspace": "FYI\n```\nWarning: require(C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli/php/Spyc.php): failed to open stream: No such file or directory in C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\composer\\autoload_real.php on line 58\nCall Stack:\n    0.0006     127776   1. {main}() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\boot-fs.php:0\n    0.0009     133680   2. include('C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\wp-cli.php') C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\boot-fs.php:17\n    0.0047     336120   3. WP_CLI\\Utils\\load_dependencies() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\wp-cli.php:19\n    0.0050     338200   4. require('C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\autoload.php') C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\utils.php:45\n    0.0055     347888   5. ComposerAutoloaderInitd55cc07d085ffc0f51977d492be59529::getLoader() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\autoload.php:7\n    0.0096     523584   6. composerRequired55cc07d085ffc0f51977d492be59529() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\composer\\autoload_real.php:49\nFatal error: require(): Failed opening required 'C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli/php/Spyc.php' (include_path='C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor/phpunit/phpunit-mock-objects;C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor/phpunit/php-token-stream;C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor/phpunit/php-code-coverage;C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor/phpunit/phpunit;C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor/symfony/yaml;.;C:\\php\\pear') in C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\composer\\autoload_real.php on line 58\nCall Stack:\n    0.0006     127776   1. {main}() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\boot-fs.php:0\n    0.0009     133680   2. include('C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\wp-cli.php') C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\boot-fs.php:17\n    0.0047     336120   3. WP_CLI\\Utils\\load_dependencies() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\wp-cli.php:19\n    0.0050     338200   4. require('C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\autoload.php') C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\php\\utils.php:45\n    0.0055     347888   5. ComposerAutoloaderInitd55cc07d085ffc0f51977d492be59529::getLoader() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\autoload.php:7\n    0.0096     523584   6. composerRequired55cc07d085ffc0f51977d492be59529() C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\\vendor\\composer\\autoload_real.php:49\n```\n. Is there an update on this?\nI am getting the same error when on my cloned repo.\nUpdate: I found the cause for the error. This error can be seen if you've cloned the repo and ran ./bin/wp --info\nI missed the \"composer install\" step from CONTRIBUTING.md\n. Maybe I should've mentioned that I ran this on Windows 8.\n. What if we have right after  $path = str_replace( \"/\", \"\\\", $path ); this check?\n`if (is_file($path)) {\n   $command = \"del /q /f\";\n}\n. yep. will do.\n. Daniel,\nI created a branch and committed the change there but I couldn't test as it I am getting \"Internal error: Can't find Composer autoloader.\" when running\nC:\\projects\\default\\htdocs\\github\\wp-cli>bin\\wp --info\nThe composer error shows up even with latest composer\nC:\\projects\\default\\htdocs\\github\\wp-cli\\bin>composer -V\nComposer version 1.0-dev (a422d67e2701860a44a4634f62f88b58b8636468) 2014-12-18 10:37:32\nOlder version from (Nov 2014)\nC:\\projects\\default\\htdocs\\github\\wp-cli\\bin>composer -V\nComposer version 1.0-dev (b23a3cd36870ff0eefc161a4638d9fcf49d998ba) 2014-11-21 17:59:11\nAny ideas?\n. ok. I found the cause for the error. \nI missed the \"composer install\" step from CONTRIBUTING.md\nNow the Hello Dolly plugin deletion worked.\nC:\\projects\\clients\\site.com\\htdocs>xwp plugin delete hello\ndel /f /q -C:\\projects\\clients\\site.com\\htdocs\\wp-content\\plugins\\hello.php\nC:\\projects\\clients\\site.com\\htdocs>xwp plugin delete hello\n\u2190[32;1mSuccess:\u2190[0m Deleted 'hello' plugin.\nxwp is  a .bat file pointing to the cloned repo and not to the .phar file.\n@ECHO OFF\nC:\\projects\\default\\htdocs\\github\\wp-cli\\bin\\wp.bat %*\nPull request sent!\n. You're very welcome Daniel. \nAgain, the team did a great job with this awesome tool!\n. Thanks! That could work.\n. I just ran into this. \nWhy other fields are --post_title, --post_content etc and the slug is just --name?\nCan we have an alias for --post_name ?\n. @pixelprogrammer  have you redirected STDERR to see what's the actual error?\nexec('wp --info 2>&1');. Sounds good Daniel\n. Hmm, I see what you're saying.\nI just wanted things to be standard so I can switch to local or live wp copy\n. The other semi-annoying thing is that the wp package contains the wordpress folder. Will have to do some moving/renaming after the unzip \n. I was thinking of having that in addition to the other approaches\n. I've just experienced the same problem. \nIt seems the directory didn't have the right permissions.\nit would have been really convenient to have some sort of an error in addition to the exit code.. Cool\n. Hi Daniel,\nOk. Will check about an example.\nyes, I am aware of the dash parameter but it's not clean approach in my case.\nI have a wrapper method that prepares parameters to be run by exec.\nIt captures the exec time and many other cool things.\nGithub doesn't allow me to attach php files so here's how to reproduce it.\nSlavi\n```\n<?php\n/*\n * This code shows how when post content has new lines only the first line gets used and the rest is ignored.\n * Slavi Marinov | http://orbisius.com & http://qSandbox.com\n/\n/\nPHP binary:     c:\\php5\\php.exe\nPHP version:    5.4.17\nphp.ini used:   C:\\php5\\php.ini\nWP-CLI root dir:        C:\\Copy\\Dropbox\\cloud\\dos\\wp-cli\nWP-CLI packages dir:    /.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.24.0-alpha\n/\n$content = file_get_contents( FILE );\n// nl2br breaks it totally i.e. the post doesn't have any content for some reason ?!?\n//$content = nl2br( $content );\n//echo $content;\n// Solution: remove new lines\n//$content = preg_replace( '#[\\r\\n]+#si', ' ', $content );\n$content_esc = escapeshellarg( $content );\n$cmd = \"wp post update 1 --post_content=$content_esc\";\necho $cmd 2>&1;\n```\n. escapeshellarg was supposed to do that, right?\nI have tried putting \\ in front of them but still nothing.\n. I decided to do this:\n```\n$arg = str_replace( array( \"\\r\\n\", \"\\n\\r\", \"\\r\", \"\\n\" ), ( $flags & self::NL2BR ) ? '' : ' ', $arg );\n            $arg = str_replace( array( \"\\t\", \"\\0\", \"\\x0B\" ), ' ', $arg ); // \\x0B vertical tab?\n```\n. Thanks Daniel. That would work in many post types.\nWhat about attachment / image thumbnail url?\n. Thanks Daniel. The thing is I have 1-2 apps that are calling wp-cli and -cannot use the wp-cli rest api\n. I've also tried the hooks that the codex suggested for replacing the callbacks for updating the update but that still didn't stop the notification. Thanks @gitlost for the workaround. It worked.\nI will use that idea for other similar cases.\nI've named the file: wp_cli_init.php\n@danielbachhuber , I have an installer that does multiple things and some of them are done in background. Requiring a separate is not ideal. It's just 3-4 lines of code to add that filter. \n. FYI: @schlessera only @gitlost's suggestion worked in the context of wp-cli.. Here's the same call on a different server. It's running ea-php71.\nThe STDOUT warning is not showing up but Content-type is.\n```\nroot@qsandbox.com-vps1300 [/home]# sudo -H -u qs9 bash -c '/usr/local/bin/wp --info'\nContent-type: text/html; charset=UTF-8\nOS:     Linux 3.10.0-042stab127.2 #1 SMP Thu Jan 4 16:41:44 MSK 2018 x86_64\nShell:  /bin/bash\nPHP binary:     /opt/cpanel/ea-php71/root/usr/bin/php-cgi\nPHP version:    7.1.21\nphp.ini used:   /opt/cpanel/ea-php71/root/etc/php.ini\nWP-CLI root dir:        phar://wp-cli.phar/vendor/wp-cli/wp-cli\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\nWP_CLI phar path:       /usr/local/bin\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 2.0.1\n```. ",
    "keithdechant": "In case anyone is still looking for how to do this, I was able to display errors by adding the following lines to the PHP file being run by wp eval-file:\nini_set( 'display_errors', 1 );\nerror_reporting(E_ALL);\n. ",
    "iandunn": "@scribu, can you explain the reasoning behind overriding display_errors in \\Utils\\wp_debug_mode()? I would expect WP_CLI to respect the display_errors value I set via WP_DEBUG in wp-config.php.\nWhen writing scripts that will be ran with wp eval-file, it's inconvenient to have to check an error log whenever the script appears to have failed, rather than having the information immediately available. In many cases, it might not even be obvious that an error occurred at all. It'd also be annoying to have to manually call Core's wp_debug_mode() just to re-set display_errors, after it's already been called by WP-CLI.\nBackground information:\n- php/utils-wp.php#L26\n- https://github.com/wp-cli/wp-cli/commit/cb57cc0a7c7d57d595eeb275940d612da12f6522\n- https://github.com/wp-cli/wp-cli/pull/786\n. @danielbachhuber, do you know the answer to https://github.com/wp-cli/wp-cli/issues/706#issuecomment-203610437 ?\n. Ok, since this is already closed, I created #3220 to discuss whether or not that behavior is desired.\n. Hmm, it's probably something unique to my setup, then. I'll dig into it further and try to isolate it.\n. I created a package for this.\nwp package install iandunn/wp-cli-rename-db-prefix\nwp rename-db-prefix <new_prefix>\n. Sorry, I probably just didn't describe that clearly. \nSteps to reproduce:\n\ndefine( 'WP_DEBUG', true); in your dev environment's wp-config.php\nCreate test.php with these contents:\n\n``` php\n   <?php\necho \"hello\";\n   calling_function_that_doesnt_exist();\n   ``\n3. Runwp eval-file test.php`\nExpected output:\n``` shell\n\nwp eval-file foo.php\nhello\nFatal error: Call to undefined function calling_function_that_doesnt_exist() in test.php on line 3\n```\n\nActual output:\n``` shell\n\nwp eval-file foo.php\nhello\n```\n\ndisplay_errors has been disabled by \\Utils\\wp_debug_mode(), so any notices/warnings/errors thrown by PHP are not directed to STDOUT.\n. Running php test.php behaves as expected since display_errors is on by default in my dev environment:\n``` shell\n\nphp foo.php \nhelloPHP Fatal error:  Call to undefined function calling_function_that_doesnt_exist() in test.php on line 3\n```\n. Yeah, that makes sense to me. I'll work on a PR :)\n. Sorry about that, my schedule got more packed than I expected. \n\nI think it's totally fine to consider it open, I didn't mean to call dibs or anything. I'm still planning to get to this, but if someone else wants to submit a PR first that's totally fine with me.\n. Huh, that test passes for me too, and now I can't reproduce the problem in any of my environments. That's odd, since I've been experiencing it for years.\nI've updated WP and WP-CLI since opening this issue, but can't think of any other changes that'd be relevant. IIRC, I tested with a fresh WP install before opening the issue, too, to rule out external causes.\nOh well, I guess I'll just consider this resolved unless I run into it again in the future. Sorry for the trouble.\n. I'm re-opening this because I can reproduce it again, using the steps in https://github.com/wp-cli/wp-cli/issues/3220#issuecomment-236649813\nI think there may be a few extra conditions necessary:\n Xdebug must be enabled.\n xdebug.force_display_errors must be disabled.\nI'll send a PR that shows the test failing.\n. Thanks, 153c57d fixes that.. > Are you still looking into this?\nIt's still on my list, but there are lots of other things on my plate too. It's something I plan on doing eventually, but it's not a priority for today, and I don't have a specific ETA or deadline for it. \nIf having an open PR bugs you, feel free to close it and I can re-open it once I get it to the next step.\n\nThe test was meant to provoke a failure, but it currently passes.\n\nIt fails on my system, so I'm guessing it's just a difference between my environment and Travis. The scenario has some statements in the wp-cli.yml file that attempt to simulate Xdebug being enabled, and they work on my system (when I disable Xdebug), but maybe they don't work in Travis?\n```bash\n\nbehat --name=\"WP_DEBUG\"\n\nOS: Darwin 17.5.0 Darwin Kernel Version 17.5.0: Mon Mar  5 22:24:32 PST 2018; root:xnu-4570.51.1~1/RELEASE_X86_64 x86_64\nShell:\nPHP binary: /usr/local/bin/php\nPHP version:    7.1.12\nphp.ini used:   /usr/local/etc/php/7.1/php.ini\nWP-CLI root dir:    /Users/iandunn/vhosts/tools/wp-cli\nWP-CLI vendor dir:  /Users/iandunn/vhosts/tools/wp-cli/vendor\nWP_CLI phar path:\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 2.0.0-alpha\nWordPress 4.9.4\nFeature: Global flags\n@require-wp-3.9\n  Scenario: Debug respects WP_DEBUG defined to true                                                                                   # features/flags.feature:100\n    Given an empty directory                                                                                                            # features/steps/given.php:8\n    And WP files                                                                                                                        # features/steps/given.php:55\n    And a test.php file:                                                                                                                # features/steps/given.php:36\n      \"\"\"\n      <?php\n      echo \"hello\";\n      calling_function_that_doesnt_exist();\n      \"\"\"\n    And a wp-cli.yml file:                                                                                                              # features/steps/given.php:36\n      \"\"\"\n      core config:\n        extra-php: |\n          define( 'WP_DEBUG', true );\n          define( 'WP_DEBUG_DISPLAY', true );\n          define( 'WP_CLI_FORCE_BEHAT_ERROR_REPORTING', false );\n      // Simulate Xdebug being enabled.\n      if ( ! function_exists( 'xdebug_debug_zval' ) ) {\n        function xdebug_debug_zval() {}\n      }\n\n      ini_set( 'xdebug.force_display_errors', 'Off' );\n  \"\"\"\nWhen I run `wp core config {CORE_CONFIG_SETTINGS}`                                                                                  # features/steps/when.php:29\nAnd I run `wp db create`                                                                                                            # features/steps/when.php:29\nAnd I run `wp core install --url=wp.dev --title=\"WP Dev\" --admin_user=wpcli --admin_password=wpcli --admin_email=wpcli@example.com` # features/steps/when.php:29\nThen STDOUT should not be empty                                                                                                     # features/steps/then.php:138\nWhen I run `wp eval 'echo var_dump( constant( \"WP_DEBUG\" ) );'`                                                                     # features/steps/when.php:29\nThen STDOUT should contain:                                                                                                         # features/steps/then.php:15\n  \"\"\"\n  bool(true)\n  \"\"\"\nAnd STDERR should be empty                                                                                                          # features/steps/then.php:127\nWhen I try `wp eval-file test.php`                                                                                                  # features/steps/when.php:29\nThen the return code should be 255                                                                                                  # features/steps/then.php:7\nAnd STDOUT should be:                                                                                                               # features/steps/then.php:15\n  \"\"\"\n  hello\n  \"\"\"\nAnd STDERR should contain:                                                                                                          # features/steps/then.php:15\n  \"\"\"\n  Call to undefined function calling_function_that_doesnt_exist()\n  \"\"\"\n  $ wp eval-file test.php\n  hello\n  cwd: /var/folders/vj/szwk8wpx2sqbcxx6x62wzwzc0000gn/T/wp-cli-test-run-flags.feature.100-5ac3aaa8e45cb7.15998191/\n  run time: 0.27728700637817\n  exit status: 255\n\n1 scenario (1 failed)\n15 steps (14 passed, 1 failed)\n0m3.768s\n```. ",
    "lkraav": "Hmm, so a few years later, as far as I can tell only https://deliciousbrains.com/wp-migrate-db-pro/doc/multisite-tools-addon/ has CLI interface available for one direction \"subsite -> single site\" implementation.\nIs anybody here still interested in getting WP-CLI modules for all migration combinations going:\n- subsite -> single-site\n- single-site -> subsite\n- subsite -> subsite\nI guess https://gist.github.com/westonruter/6277456 does subsite -> subsite right?\nBackupBuddy probably has the most complete implementation of all these migration options, but they gave up developing it further long ago because of GUI and networking issues complexity. There's some intricacies involved in the process, such as managing the relevant user records on exports/imports. I believe that CLI could get this to the finish line, since it would eliminate a lot of complex timeout problems etc that hinder the GUI.\nThoughts?\n. Hm. I happen to have a container where the mysql socket is bind-mounted in a custom location (can't mount things into container's tmpfs locations).\nwp db cli is impossible here because --no-defaults forces mysql binary to find compile time socket location, ignoring /etc/mysql/my.cnf which has the correct socket location defined.\nOnly solution is to manually symlink custom socket location to the expected compile time defined location, just to have db commands working, while everything else works correctly as is. This doesn't seem right, but maybe this is #1324 topic? Thoughts?\n. To clarify for people googling, the solution is SHELL_PIPE=0 wp post list | less\n. Thanks. --scope=blog --all-tables-with-prefix is what I needed to get. Looks like I had to switch from 0.21.1 to master to get this goodness. Bit of a puzzling moment when wp db tables --help only showed one available parameter.\n. Mad strace skills revealed the culprit: wp-content/upgrade.\n. @danielbachhuber it is of course \"not enough permissions\" and that's fine. this is a ux perspective issue, just needed to quickly know which directory owner/group to adjust... without going hardcore on it with strace type stuff.\n. It'd actually be nice to have additional documentation about the GUID thing. Not everybody is likely to be aware of why you should skip that column. Is https://codex.wordpress.org/Changing_The_Site_URL#Important_GUID_Note the only consideration?\n. @danielbachhuber wp-cli 2.0.1\nWP-CLI version: 2.0.1\n[convers@pill2 ~/www]# wp option delete foo bar\nError: Too many positional arguments: bar\nI'm not sure why this issue was closed as :ship:?\nWorkaround\nfor key in `cat options.txt`; do wp option delete $key; done. Y, thanks. I forgot the command split, but also wanted to know the rationale here, whether there was something I missed.. Ouch, this naming difference took me for a spin for a good minute.\n. Looks like the same thing as\nhttps://wordpress.org/support/topic/make-function-public-instead-of-private\nwhich points us to\nhttps://github.com/10up/ElasticPress/issues/522\nNot sure what the way forward here. Is it OK for the object cache implementations to have those class members as public, or are the users accessing them incorrectly?\n. Unfortunately that was just a github-retyping error. I checked and wp-cli.yml was correctly formatted.\n. Thanks, I will test tomorrow\n. Seems to work! Tyvm (y)\nNext on the list: alias bash-completion\n. Solution seems to be using --status=any. This is confusing, because https://developer.wordpress.org/reference/classes/wp_comment_query/__construct/ says default status => 'all', which would imply the default query to return everything without further arguments needed. Why this naming difference? PS using --status=all doesn't work.\n. Ty. I'm not sure how I missed spotting that (or hitting Ctrl+F there). Feels like a small documentation patch here with an additional example here about this would be incrementally useful for world sanity.\n. > Also, that would just break if WP-CLI would not be available, because it would have been declared in WP-CLI.\n@schlessera yes exactly, which is why I'm thinking maybe something core level.. I also see weird subcommand breakage w/ 1.5.0. Reverting to 1.4.1 works. I can't tell from the surface whether it's related to this specific issue #4689 or not.\nBreaking example:\n```\n[convers@pill2 ~/www/wp-content/plugins]# wp wc memberships plan\nusage: wp wc memberships plan create [--=]\n   or: wp wc memberships plan delete ...\n   or: wp wc memberships plan get  [--field=] [--fields=] [--format=]\n   or: wp wc memberships plan list [--field=] [--fields=] [--format=]\n   or: wp wc memberships plan rule \n   or: wp wc memberships plan update  [--=]\nSee 'wp help wc memberships plan ' for more information on a specific command.\n[convers@pill2 ~/www/wp-content/plugins]# wp wc memberships plan list\nError: 'plan' is not a registered subcommand of 'wc memberships'. See 'wp help wc memberships' for available subcommands.\n```. ",
    "dd32": "Bluntly, there's no Core API's available for you to use, nor any publicly available location to get po/mo's from, as core hasn't enabled core language packs yet (We've got to deal with quite a few languages who need more than just po/mo files).\nhttp://i18n.svn.wordpress.org/ is the best source, which is often outdated or only half the translations. The Wordpress-{$locale}.zip is the only location at present with core translations you can use.  As for Plugins/Themes, it's in their Plugin SVN directories still, since we haven't released the language pack management tools yet.\n. @markoheijnen timeline is as soon as we have time to, quite a few languages need some attention on their $locale.php files so that we can roll it out (which we don't want in LP's for various reasons).\nMe and nacin planned to attack those during 3.8 while we also built the plugin language pack back ends so 3.8 release was a hopeful target..\n. Posted a comment explaining more details about the SSL issues on http://core.trac.wordpress.org/ticket/25716\nBut yes, cURL on the Travis system is compiled with GnuTLS which cannot communicate with most nginx servers due to it being strict and sticking to the standards (much like what early browsers tried to do, then gave up and realised people were never going to create perfect HTML), the fix is to fallback to HTTP which is what the 3.7 branch/3.7.1 will be doing (although it'll emit a PHP Warning/Notice, which may play with your failure stats too)\n. So basically wp-cli is doing it wrong, through a badly named/used Requests parameter.\nRequests bundles with it a root SSL Certificate Authority bundle (Just as WordPress does) which allows it to verify SSL connections, by default, it validates connections. but by passing true, you're asking it to use the systems certificates (Which are often out of date, or inaccessible).\nSwitching Requests to using it's own bundled version fixes it. See PR #860\n. ",
    "guaka": "Reminder to self: add this to http://codex.wordpress.org/Installing_WordPress_in_Your_Language as soon as it's actually working.\n. For the record:\nwp core language  # can do what?\nwp core language list\nwp core language install fr_FR\nwp core language activate fr_FR\n. Excellent!\nI added that information here: http://codex.wordpress.org/Changing_The_Site_URL#wp-cli\n. No I hadn't, just created wp-cli.yml in the site's root with this:\napache_modules:\n  - mod_rewrite\nbut it still doesn't work.\nThe fact that it doesn't work doesn't bother me so much in itself, it's more the complete lack of feedback.\n. Actually, drush vget test shows all variables that have a name that contains test if there's no variable test (in which case it would show the content of the variable).\nAn example use case: I want to turn off comments on my wordpress sites. Now I had to wp db cli and SELECT * FROM wp_options WHERE option_name LIKE '%comment%' to find out which option to use. Would be great if could just do wp option list|grep comment, or wp option get comment.\n. ",
    "brandwaffle": "So I just discovered I want this too :) Any progress vis a vis language packs, or would this still be a worthwhile addition for CLI?\n. ",
    "emzo": "Yes, it works as expected on a clean WP install. Apologies, I should have tried that first. I'll try and figure out what's causing the issue, and report back in case it helps anyone else in the future.\n. I did have a PHP Warning and a couple of Notices in my error log, but even after fixing them, the problem persisted. I'm just going to have to go through and disable all plugins one-by-one to see where the problem is :(\n. Seems as if it's WooCommerce causing the problems I'm having with output buffering in the wp-cli shell REPL\n. Yup, I can confirm that updating to WP-CLI 0.11.2 fixed the issue. Thanks @scribu \n. ",
    "iloveitaly": "Might be obvious, but output will be blocked if the W3 Total Cache\u00a0plugin is activated.\n. ",
    "kaptron": "Interestingly, I just noticed the same wp shell output buffer issue when using the \"BWP Google XML Sitemaps\" plugin, which seems pretty random. Deactivating the plugin allows me to use the shell just fine. This is with the latest WP-CLI 0.13-alpha2.\n. ",
    "spinx": "I'm seeing this in WP 3.8 and lastest WP-CLI, latest W3TC: 0.9.3 as well \n. ",
    "chadothompson": "I'm seeing this issue with wp-cli as well, though the root cause appears to be a problem with composer itself:\nhttps://github.com/composer/composer/issues/2228\n\n. ",
    "simonwheatley": "\nYou shouldn't need to escape at all. The message is passed through colorization by accident, not by intention.\n\nThanks!\n\nThat said, any particular reason you're using '%20' instead of a simple space?\n\nI'd like to pass an example here, and %20 is valid as part of the string I'm using for the example. I can avoid it in this instance, but wondered how to deal with similar issues when I come across them in the future. :)\n. > Just to clarify, the example you posted should now work as expected (if you update to 0.12-alpha2).\nWorks for me. Thanks very much!\n. Tried reverting to v0.12.1 (git checkout 0.12.1), and the download command works fine.\n. Working for me. Thanks!\n. Pull request coming up\u2026\n. I'll try and do this tomorrow. Do I just reset to this commit, https://github.com/wp-cli/wp-cli/commit/6d0c75e93aa4df7b3c7ff111ab96a716b84ab25a, and give it a whirl? If not, just let me know the steps to get the import running on the old code.\n. I'm sorry it's taken me so long to get back to you.\nYes, this issue does occur on the old version. The while blocks which are similar to the topologically_sort_terms function, and which gets similarly hung up on the term with a non-existent parent, are: export.php#L382-L388 and export.php#L390-L396.\n. > I had to cat .ssh/id_rsa | base64 the SSH private key, because no amount of escaping it as a string would get to echo properly as a file.\nHow frustrating. \nI have it working over here. Prior to pasting the private key into the repo settings, I replaced all newlines with \\n and then when pasting into repo settings in Travis I surrounded it with quotes, e.g. \"KEY\\nHERE\\n\".. This method is called before the exporter writes out all the terms in the head of the WP Export XML, I assume if the child terms are output after the parent terms then the importer can run more efficiently (as it doesn't need to worry if a parent is present when creating terms).\n. Another option might be to throw an error and bail on the export, with the assumption that the user should fix the data and retry?\n. ",
    "mattzee": "Many thanks ...\n. ",
    "smhmic": "The issue I was addressing was a limitation in the @synopsis syntax for subcommands.  I see now this pull request was misguided.  But I'm unsure of the best place to address this issue, so I'll continue on this thread.\nI just realized that the no- prefix also works for flags on subcommands, so allowing it to be set to a false value is unnecessary.  But, indicating how to turn off a flag is necessary for flags with a dynamic default value (like --color).  The optional no- prefix can be included in the longdesc, but I think it should also be clear in the usage synopsis.\nThe only way to indicate how to turn a flag off in the usage synopsis is [--flag] [--no-flag], but this is not concise (nor semantically correct).  Perhaps the synopsis parser should allow (but ignore) a leading \"[no-]\" before flag names.  That way, @synopsis [--[no-]flag] would be valid, without changing the way it's interpreted.\n. Ugly, but is there a better way? See pull request 754.\n. In general, a flag is off by default, and only needs to be passed to switch it on.  In the case that it makes more sense for a flag to be on by default, then the flag should simply be renamed (e.g. --quiet instead of --verbose).  But when a flag has a dynamic default value, the user usually should be able to override the dynamic behavior and force the flag on or off.\n. Oops.  I had is_string(), and meant to change it to !is_bool() just before committing.  Sorry about that.\n. ",
    "almai": "Thank you, that worked!\nIn the meanwhile I was able to find a cli version on the server. And now it works without commenting out those lines.\n. I installed wp-cli on client and server, but when I try following command...\nwp rest attachment list --ssh=xxxx --path=~/path/to/wp/installation\n...I get the afore mentioned error message:\nbash: wp: command not found\n. ",
    "kokoye2007": "its work for multi site ?\n```\nwp site  list\n| 5       | http://chitkoko.ubuntu-mm.net/        | \nwp site option update 5 siteurl \"https://chitkoko.ubuntu-mm.net/\" \nwp site option update 5 home \"https://chitkoko.ubuntu-mm.net/\" \n```\nlike that \nhttp to https for multisite \n--url=\nfor target, but not working. ",
    "moonpixel": "wp core version says 3.5.2\n. these sites were not installed using wp-cli, so I wonder if it could be the reason? \nI was using for the timebeing wp core update --version=3.6.1 --force, would that be a good way as well?\nbut with plugins it seems that I just cannot simply do update all and need to update individually, \nis there a better way to do this?\nthank you for your answers, appreciate it\nwp-cli is a fantastic tool, just this issue is making it not as good as it could be for me at the moment\n. as I mentioned get_site_transient( 'update_core' ) would return NULL,\nwhile within a theme it would return all the update related info, so I guess that is my issue \n. Thanks for the hint, you are right, it was a plugin - Better WP Security which I have on each site, deactivating it, then running updates and activating it back did the trick\n. ",
    "c10b10": "nvm. seems this has already been added.\n. ",
    "ctayloroomphinc": "If a user is testing imports, then the media files will have potentially already been transferred to the site's uploads directory as a result of previous import runs. Also, the thumbnails may already exist as well, and so this code attempts to detect which thumbnails are already on disk and then add that to the attachment meta. In some cases this negates the need to regenerate thumbnails after each import run, or once the site is ready to go in to production.\nAlso, I'd like to note that this code will not work on PHP < 5.4. I only realized this after I submitted. Apparently PHP < 5.4 does not support using $this within anon functions. So the code will need to be refactored slightly to work with older versions of PHP. Let me know if you want me to submit a patch with these changes or if you all can take care of those changes (assuming you'd like to incorporate this upstream).\n. Will do. I'll submit the suggested updates at some point today.\n. I'm considering removing the thumbnail size detection logic.. It's not fool-proof in all cases and so it will not negate the need to run 'wp media regenerate' anyways.. If there is some fast, more reliable way to detect existing thumbnails on disk, then I'll try that as well. I'll submit a revision to this pull request once I'm able to do some more testing in that area of things.\n. Just posted a patch to remove the thumbnail detection logic. Let me know what else you guys need me to do to have this merged upstream. There was mention of a features/media.feature file.. Can you explain what this file is for and what I should add there?\n. Added functional test and command doc update. Let me know if this looks good..\n. ",
    "whimsy-github": "Jezza:public_html flutterby$ wp --info\nPHP binary: /Applications/MAMP/bin/php/php5.3.14/bin/php\nPHP version:    5.3.14\nphp.ini used:   /Applications/MAMP/bin/php/php5.3.14/conf/php.ini\nWP-CLI root:    /Users/flutterby/.wp-cli/vendor/wp-cli/wp-cli\nWP-CLI config:  /path/to/my/wp-cli.yml\nWP-CLI version: 0.11.2\n. wp plugin path now outputs:\nstring(66) \"/path/to/public_html/wordpress\"\n/path/to/public_html/wordpress/wp-content/plugins\n(plugin path is unchanged)\nNow my local (testing) MAMP webserver outputs:\nstring(56) \"/path/to/public_html\"\nI didn't have any reason I can identify to choose $_SERVER['DOCUMENT_ROOT'] instead of  dirname(FILE). I just took the example from the WordPress Codex here: http://codex.wordpress.org/Editing_wp-config.php#Moving_wp-content_folder\n. ",
    "vvondra": "Sure, will do. I just needed an issue URL to post in a workaround commit message in the meantime.\n. ",
    "borekb": "Database connection requirement seems to be quite restrictive in more cases, e.g. doing a simple wp help should IMO show some help in all cases, not only when the db connection is working.\nThis is, however, probably quite a deep issue because, as I understand it, WP-CLI requires DB connection simply because wp-settings-cli.php is run before the commands are loaded and the db connection is required there. So supporting WP-CLI on installation that currently have problems connecting to MySQL database would probably need some fundamental changes to how WP-CLI is bootstrapped.\nIt would be a nice change, though.\n. Ok, I have written and rewritten a response to this five times already and don't know how to approach this. On one hand, I feel that wp help should give at least some help in all situations (and there are commands that can run just fine even if WP is installed but db is inaccessible so it feels \"wrong\" that wp help and WP-CLI in general ignores them). On the other hand, I can probably achieve what I need for my command using things like --require and @when before_wp_load. So I'll just leave it at it.\n. Force would be nice, I am executing the config command via https://github.com/xwp/wp-cli-ssh and having to run two separate commands just complicates things. Hopefully this could be reconsidered.\n. Sorry I probably should have been more specific. I understand that there are probably some commands that require the \"heavy\" dependency on mysql binary but when I tried to simply use WP-CLI to download and install WordPress I was a bit surprised that mysql must be on the path when this task could easily work without it.\nBut if there isn't an easy way to swap the mysql commands with pure-PHP implementation then OK, it's not a big deal, WP-CLI would just be easier to use if common commands worked without external dependencies.\n. Yes, mkdir c:\\temp\\1\\2\\3 will create the whole structure even if c:\\temp doesn't exist.\n. Well, the recursive behavior should work since Windows XP and certainly does on my PC. I'll submit a pull request with a simple fix and if there are complaints later for some specific cases, maybe it could be improved then.\n. Fixes #1456 \n. Yeah, just realized that. Thanks :)\n. It was caused by our plugin that normally has composer's vendor folder in it but in this specific deployment, that folder was missing. Shouldn't I see at least some kind of PHP error from WP-CLI or something like that?\n. The problem was this: WP-CLI was loaded both as my global composer package and it was also accidentally added as a local dependency, in the vendor folder, so it resulted in PHP fatal error.\nIn my php.ini, I have both display_errors and error_reporting values set correctly so it was probably some other code that was hiding it. I was not able to figure out what core. Fortunately, the error was logged in the php error log file.\n. :fork_and_knife: (for the lack of chopsticks)\n. For reference: discussion on Slack.\n. Aha, didn't notice that because WP-CLI disables pagination on Windows.\nAs someone on Windows, I think WP-CLI should behave this way:\n1. try less first (many power users will have this available e.g. through Git for Windows)\n2. if it isn't available use more (docs)\nMost of the pain caused by GLOBAL PARAMETERS would go away, that's true, although I would still prefer to get command help output only as I generally think the GLOBAL PARAMS are not very useful (in 99% cases, and for the remaining 1% there would still be an info how to get them).\n. (Creating this issue separately from #2051 where it was first discovered; will try to prepare pull request for it.)\n. Yes I am on Windows and really keen to get this working :)\n. @danielbachhuber BTW do I think correctly that (on Linux / Mac OS X systems) the help output doesn't stay in the console? The less pages seems to discard the output as soon as you quit it, right? In some cases, I would like to keep the help output in the history but I guess that would be for another ticket.\n. It is a bit tricky. This is the code I've tried:\n``` php\n$pagers = array( 'less -r', 'more' );\nforeach ($pagers as $pager) {\n    $exitCode = proc_close( proc_open( $pager, $descriptorspec, $pipes ) );\n    if ($exitCode == 0) {\n        return;\n    }\n}\n```\nIt will mostly work but will leave the ugly \"'less' is not recognized as an internal or external command,\noperable program or batch file.\" message in the console. I don't think there is an easy way to get rid of that, only a couple of workarounds like executing less separately just to find out if it is available, which seems wasteful.\nMy feeling is that the pages should be user-configurable, with some default values like less on Linux and more on Windows. Personally, even if I were on Linux, I'd probably prefer less -X rather than less -r so it would be nice if I could influence this through config.yaml or configuration in general.\nJust putting my thoughts down, I'll probably start by hardcoding more for Windows.\n. Are environment variables part of standard configuration mechanism? If not, putting it into config.yml feels more in line with the rest of WP-CLI.\n. What pager to use feels similar to me to whether to colorize the output or not, i.e., it is a UI configuration, not a system configuration. But whatever the way I would be happy to be able to customize this.\n. I've created a separate issue for that as I believe just enabling more on Windows (PR #2100) is enough for this issue to be closed.\n. .htaccess is no longer distributed with WordPress (despite Codex suggesting otherwise), it is generated on-the-fly as the permalink settings are updated.\n. Very good idea!\n. The Trac tricket now has a working patch.\n. Wiki is technically a Git repo, couldn't the website pull it periodically and just render the Markdown files there? (Not sure how the website is done, if it's static HTML only, the HTML would be generated by some script / CI server that would watch the wiki repo.)\n. So what is this task technically about? Move the Markdown files to this repo? To some other repo?\n. Looks good to me \u2013 anything in particular you'd like to get feedback on?\nRegarding tests, I'm not sure how you're gonna test this \u2013 it's full of side effects by definition. How do Composer guys test composer self-update?\n. I think we encountered similar issue with VersionPress and came to the conclusion that this is how WordPress behaves. @JanVoracek might remember some more details..\n. Same problem here, if you're looking for a confirmation of the issue. It's already fixed in master.\n. 0.23.1 release? I'm not sure how these things are supposed to be handled.\n. master worked for me because I already had \"minimum-stability\": \"beta\" in composer.json, sorry.\n. I still think wp option list should not be outputting 16,000 character long lines by default but I'll be able to work around it with the --no-transients flag.\n. Given that there is a command for transients, wp vp transient, one could even argue that transients should not be outputted by the option command at all. But I understand that it would be controversial and also a breaking change.\n. I believe so, it was even a DOS command. This is what I found: more command availability.\n. ",
    "almhorn": "curl https://raw.github.com/wp-cli/wp-cli.github.com/master/installer.sh | bash\n. Worked like a charm with the Phar build, thanks. \n. ",
    "nullvariable": "Testing more, I narrowed it just to the wp_options table with the same results.\nrunning it on the wp_users table however did work fine.\n. looks like some serialized settings for a plugin that I wrote. the plugin stores its settings as an object.\nphp\nstring(10966) \"a:15:{s:11:\"use_wp_cron\";a:5:{s:5:\"value\";i:1;s:5:\"label\";s:18:\"Use WordPress Cron\";s:4:\"type\";s:8:\"checkbox\";s:12:\"mapped_field\";b:0;s:4:\"help\";s:266:\"enable or disable the use of the WordPress cron system to automatically sync the data<br/>\\n                    you can ensure that the WordPress cron is run by running a unix cron job that calls <code>http://**clientsite**.org/wp-cron.php</code>\\n                \";}s:16:\"wp_cron_interval\";a:6:{s:5:\"value\";s:5:\"daily\";s:5:\"label\";s:23:\"WordPress Cron Int\"...\n. https://gist.github.com/nullvariable/f40d6bff6bae0aa85cab\n. ok try it now: https://gist.github.com/nullvariable/f40d6bff6bae0aa85cab\n. agreed, it's probably overkill on my part with the plugin in question but is there a way we can write the so it either fails in a nice way, or ignores something like this? I'd wager I'm not the only person who has done a plugin settings config in this fashion.\n. ok, here's the relevant code that generates those settings in the plugin: https://gist.github.com/nullvariable/1fd1eb4c6c4a7ea04ba6  \nthe function is a part of a class, which is loaded as an object inside the main class.\nThis is how I'm saving the options:\nphp\n    function update_setting($setting, $newvalue) {\n        $this->settings[$setting]['value'] = apply_filters(<constant>.'-updatesetting-'.$setting, $newvalue);;\n        update_option(<constant>, $this->settings);\n    }\n. FWIW what's being stored is just a giant array only two levels deep. No objects or anything.\n. Here's a working method for dealing with recursion: http://stackoverflow.com/questions/9042142/detecting-infinite-array-recursion-in-php\nI'm thinking that'd be a fairly big performance hit but I'm not really sure.\n. I can do that. I read through it and saw that it already had some code for handling an object and it seemed like the top level of an object wouldn't be likely to break things so I redid it this way. Easy enough to just ignore objects if that works better for you.\n. yeah I see that. Should I remove or rewrite?\n. you bet, glad to help.\n. seems like you could just scrape the wp-content/plugins directory for version numbers and then compare them. It would be slower, but wouldn't need the db for anything.\n. personally I'd just script it to wget the latest file from wordpress.org and overwrite everything, but it seems like we'd all benefit from integrating it more inline with the conventions in this project than if I just wrote my own script. And I'd imagine occasionally version number selection would be handy.\n. I agree. What I'm envisioning is really just a shortcut for downloading the file from .org vs having to do it manually. \n. This doesn't seem to work with plugins though and that's where I'm more\ninterested in this feature.\nOn Apr 15, 2014 12:28 PM, \"Cristi Burc\u0103\" notifications@github.com wrote:\n\nClosed #1097 https://github.com/wp-cli/wp-cli/issues/1097.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/1097\n.\n. \n",
    "johnjjsmith": "Any updates on this?\n. ",
    "th3fallen": "insp@insp.com [~/public_html]# wp --info\nPHP binary: /usr/local/bin/php\nPHP version:    5.4.19\nphp.ini used:   /usr/local/lib/php.ini\nWP-CLI root:    /usr/local/vendor/wp-cli/wp-cli\nWP-CLI config:\nWP-CLI version: 0.11.2\ninsp@insp.com [~/public_html]# wp core version\n``` html\n<!DOCTYPE html>\n Ticket #11289, IE bug fix: always pad the error page with enough characters such that it is greater than 512 bytes, even after gzip compression abcdefghijklmnopqrstuvwxyz1234567890aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz11223344556677889900abacbcbdcdcededfefegfgfhghgihihjijikjkjlklkmlmlnmnmononpopoqpqprqrqsrsrtstsubcbcdcdedefefgfabcadefbghicjkldmnoepqrfstugvwxhyz1i234j567k890laabmbccnddeoeffpgghqhiirjjksklltmmnunoovppqwqrrxsstytuuzvvw0wxx1yyz2z113223434455666777889890091abc2def3ghi4jkl5mno6pqr7stu8vwx9yz11aab2bcc3dd4ee5ff6gg7hh8ii9j0jk1kl2lmm3nnoo4p5pq6qrr7ss8tt9uuvv0wwx1x2yyzz13aba4cbcb5dcdc6dedfef8egf9gfh0ghg1ihi2hji3jik4jkj5lkl6kml7mln8mnm9ono\n\n\n\n\nWordPress \u203a Error\n",
    "ArnaudBan": "Same for me.\n. ",
    "paddelboot": "Thanks, adding ~/.wp-cli/bin to PATH did it.\n'php composer.phar self-update' works.\n. I had the same error after running the install-wp-tests.sh with sudo, and permission issues when running it as non-sudo user.\nI had to manually update the permissions of /tmp/wordpress, which were drwxr-xr-x originally:\n$ sudo chown -R myuser /tmp/wordpress\n$ sudo chmod -R 755 /tmp/wordpress\n\nAfter that, the sample test in /tests ran successfully.. ",
    "ghost": "Newcomers might also want to review this for further processing this information:\nhttps://wordpress.stackexchange.com/questions/273884/wp-cli-command-to-update-all-plugins-and-core-fails-when-executed-from-cron/275204#275204. That is excellent news, works perfectly now thanks Scribu.\n. For what it's worth, I just had an issue where an update notification would stick but nl_NL was already updated. Switching from NL to EN and back to NL again from options-general.php helped to get rid of the notification.\n. would it be an option to honor the PAGER environment variabele?\n. Trivial question, how do i update wp-cli?\n. some info:\n```\n wp --allow-root --info\nPHP binary:     /usr/bin/php5\nPHP version:    5.5.20-1~dotdeb.1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.18.0\ncat /etc/issue\nDebian GNU/Linux 7 \\n \\l\nuname -v\n1 SMP Wed Apr 9 22:06:23 UTC 2014\nuname -r\n2.6.32-5-vserver-amd64\nlsb_release -c\nCodename:       wheezy\ncat /etc/debian_version\n7.8\n```\nThe first time i do\nwp --allow-root core download\ni get this:\n```\n wp --allow-root core download\nDownloading WordPress 4.1 (en_US)...\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'phar error: \"/tmp/wp_54b7cada132f7.tar.gz\" is a corrupted tar file (truncated)' in phar:///usr/bin/wp/php/commands/core.php:190\nStack trace:\n0 phar:///usr/bin/wp/php/commands/core.php(190): PharData->__construct('/tmp/wp_54b7cad...')\n1 phar:///usr/bin/wp/php/commands/core.php(176): Core_Command::_extract('/tmp/wp_54b7cad...', '/var/www/wpgate...')\n2 [internal function]: Core_Command->download(Array, Array)\n3 phar:///usr/bin/wp/php/WP_CLI/Dispatcher/CommandFactory.php(52): call_user_func(Array, Array, Array)\n4 [internal function]: WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher{closure}(Array, Array)\n5 phar:///usr/bin/wp/php/WP_CLI/Dispatcher/Subcommand.php(295): call_user_func(Object(Closure), Array, Array)\n6 phar:///usr/bin/wp/php/WP_CLI/Runner.php(304): WP_CLI\\Dispatcher\\Subcommand->invoke(Array, Array, Array)\n7 phar:///usr/bin/wp/php/WP_CLI/Runner.php(311): WP_CLI\\Runner->run_command(Array, Array)\n8 phar:///usr/bin/wp/php/WP_CLI/Runn in phar:///usr/bin/wp/php/commands/core.php on line 190\n```\n2nd or 3rd time i run the function, i get this:\nwp --allow-root core download\nDownloading WordPress 4.1 (en_US)...\nWarning: cURL error 23: Failed writing body (364 != 4096)\nError: cURL error 23: Failed writing body (364 != 4096)\nand once more\n```\n wp --allow-root core download\nWarning: cURL error 77: error setting certificate verify locations:\n  CAfile: /tmp/wp-cli-cacert.pem\n  CApath: /etc/ssl/certs\nDownloading WordPress 4.1 (en_US)...\nWarning: cURL error 77: error setting certificate verify locations:\n  CAfile: /tmp/wp-cli-cacert.pem\n  CApath: /etc/ssl/certs\nError: cURL error 23: Failed writing body (364 != 4096)\n```\nto get back to the 1st error i above i delete all the tar.gz files in the /tmp directory, then it goes back to this:\n```\nwp --allow-root core download\nDownloading WordPress 4.1 (en_US)...\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'phar error: \"/tmp/wp_54b7cba0eeff2.tar.gz\" is a corrupted tar file (truncated)' in phar:///usr/bin/wp/php/commands/core.php:190\nStack trace:\n0 phar:///usr/bin/wp/php/commands/core.php(190): PharData->__construct('/tmp/wp_54b7cba...')\n1 phar:///usr/bin/wp/php/commands/core.php(176): Core_Command::_extract('/tmp/wp_54b7cba...', '/var/www/wpgate...')\n2 [internal function]: Core_Command->download(Array, Array)\n3 phar:///usr/bin/wp/php/WP_CLI/Dispatcher/CommandFactory.php(52): call_user_func(Array, Array, Array)\n4 [internal function]: WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher{closure}(Array, Array)\n5 phar:///usr/bin/wp/php/WP_CLI/Dispatcher/Subcommand.php(295): call_user_func(Object(Closure), Array, Array)\n6 phar:///usr/bin/wp/php/WP_CLI/Runner.php(304): WP_CLI\\Dispatcher\\Subcommand->invoke(Array, Array, Array)\n7 phar:///usr/bin/wp/php/WP_CLI/Runner.php(311): WP_CLI\\Runner->run_command(Array, Array)\n8 phar:///usr/bin/wp/php/WP_CLI/Runn in phar:///usr/bin/wp/php/commands/core.php on line 190\n```\ni have tried this, and it does not work - from #1505 \nrm -rf ~/.wp-cli/cache\n. Thanks for the heads up--I'm checking the plugins and themes directory, to no avail, but I'll try to find the source of that include.\n. Found this;\nhttp://torquemag.io/using-wp-cli-to-set-up-a-test-version-of-your-site/\nI will use a script and wp-cli commands to perform what I need.\n. Now that you mention it that makes sence. I compared the version number with my local installation which also runs 0.21, but I forgot to SSH into vagrant where the actual export was performed.\nThanks!\nEdit: I've confirmed that this was the issue.\n. Thank you for trying to help me !\nNothing happens. I have a \"success\" line telling me that the option has been updated but my options in back end are still \"empty\" (without my settings). \n. Thanks @ernilambar that fixed my issue!\n. Hi, I am still not sure if this is a bug. Either way, one can reproduce this by trying the same command.. Explanation on the problem, including solution, is available in this Q&A session.\nI explained the nature of the problem in way accessed to all levels of usage.. Some extra information:\nWP CLI v\nvagrant@vagrant:/vagrant$ php wp-cli.phar --path=public_html --debug cli info\nDebug (bootstrap): No readable global config found (0.087s)\nDebug (bootstrap): No project config found (0.088s)\nDebug (bootstrap): argv: wp-cli.phar --path=public_html --debug cli info (0.088s)\nDebug (bootstrap): Running command: cli info (0.088s)\nPHP binary:     /usr/bin/php7.0\nPHP version:    7.0.19-1~dotdeb+8.1\nphp.ini used:   /etc/php/7.0/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\nWP_CLI phar path:       /vagrant\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 1.3.0\nWordPress v\nvagrant@vagrant:/vagrant$ php wp-cli.phar --path=public_html --debug core version\nDebug (bootstrap): No readable global config found (0.087s)\nDebug (bootstrap): No project config found (0.087s)\nDebug (bootstrap): argv: wp-cli.phar --path=public_html --debug core version (0.087s)\nDebug (bootstrap): ABSPATH defined: /vagrant/public_html/ (0.088s)\nDebug (bootstrap): Running command: core version (0.089s)\n4.7.3\nAvailable updates\nvagrant@vagrant:/vagrant$ php wp-cli.phar --path=public_html --debug core check-update\nDebug (bootstrap): No readable global config found (0.084s)\nDebug (bootstrap): No project config found (0.084s)\nDebug (bootstrap): argv: wp-cli.phar --path=public_html --debug core check-update (0.084s)\nDebug (bootstrap): ABSPATH defined: /vagrant/public_html/ (0.085s)\nDebug (bootstrap): Begin WordPress load (0.086s)\nDebug (bootstrap): wp-config.php path: /vagrant/public_html/wp-config.php (0.086s)\nDebug (commandfactory): No doc comment for timber. (0.337s)\nDebug (bootstrap): Loaded WordPress (0.417s)\nDebug (bootstrap): Running command: core check-update (0.418s)\n+---------+-------------+-------------------------------------------------------------------+\n| version | update_type | package_url                                                       |\n+---------+-------------+-------------------------------------------------------------------+\n| 4.7.5   | minor       | https://downloads.wordpress.org/release/en_GB/wordpress-4.7.5.zip |\n| 4.8.1   | major       | https://downloads.wordpress.org/release/en_GB/wordpress-4.8.1.zip |\n+---------+-------------+-------------------------------------------------------------------+\nUpdate\nvagrant@vagrant:/vagrant$ php wp-cli.phar --path=public_html --debug core update\nDebug (bootstrap): No readable global config found (0.083s)\nDebug (bootstrap): No project config found (0.083s)\nDebug (bootstrap): argv: wp-cli.phar --path=public_html --debug core update (0.084s)\nDebug (bootstrap): ABSPATH defined: /vagrant/public_html/ (0.084s)\nDebug (bootstrap): Begin WordPress load (0.087s)\nDebug (bootstrap): wp-config.php path: /vagrant/public_html/wp-config.php (0.088s)\nDebug (commandfactory): No doc comment for timber. (0.491s)\nDebug (bootstrap): Loaded WordPress (0.626s)\nDebug (bootstrap): Running command: core update (0.627s)\nUpdating to version 4.8.1 (en_GB)...\nDownloading update from https://downloads.wordpress.org/release/en_GB/wordpress-4.8.1.zip...\nUnpacking the update...\nCleaning up files...\nNo files found that need cleaned up.\nSuccess: WordPress updated successfully.\nvagrant@vagrant:/vagrant$ php wp-cli.phar --path=public_html --debug checksum core\nDebug (bootstrap): No readable global config found (0.084s)\nDebug (bootstrap): No project config found (0.085s)\nDebug (bootstrap): argv: wp-cli.phar --path=public_html --debug checksum core (0.085s)\nDebug (bootstrap): ABSPATH defined: /vagrant/public_html/ (0.085s)\nDebug (bootstrap): Running command: checksum core (0.086s)\nWarning: File doesn't verify against checksum: wp-admin/includes/dashboard.php\nWarning: File doesn't verify against checksum: wp-admin/includes/class-wp-posts-list-table.php\nWarning: File doesn't verify against checksum: wp-admin/includes/template.php\nWarning: File doesn't verify against checksum: wp-admin/includes/media.php\nWarning: File doesn't verify against checksum: wp-admin/includes/meta-boxes.php\nWarning: File doesn't verify against checksum: wp-admin/nav-menus.php\nWarning: File doesn't verify against checksum: wp-admin/custom-header.php\nWarning: File doesn't verify against checksum: wp-login.php\nWarning: File doesn't verify against checksum: wp-includes/class-wp-customize-manager.php\nWarning: File doesn't verify against checksum: wp-includes/formatting.php\nWarning: File doesn't verify against checksum: wp-includes/class-wp-xmlrpc-server.php\nWarning: File doesn't verify against checksum: wp-includes/class-phpmailer.php\nWarning: File doesn't verify against checksum: wp-includes/functions.php\nWarning: File doesn't verify against checksum: wp-includes/media-template.php\nWarning: File doesn't verify against checksum: wp-includes/media.php\nError: WordPress install doesn't verify against checksums.. ",
    "riconeitzel": "As far as I see it happens globally.\nI used wp themes status and it only showed the standard themes in /wordpress/wp-content/themes/ not the ones in /wp-content/themes/\nRico\n. Thank you!\nI just searched the open issues - my bad!\nRico\n\nAm 10.10.2013 um 18:50 schrieb Cristi Burc\u0103 notifications@github.com:\nIt doesn't work because that guide tells you to use $_SERVER:\ndefine('WP_CONTENT_DIR', $_SERVER['DOCUMENT_ROOT'] . '/wp-content');\nClosing a duplicate of #785.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "shawnhooper": "I like the wp plugin directory approach @danielbachhuber.\n. I saw the CI failed. I'll fix that when get home. Wrote that patch while\ntravelling, Still haven't quite tweaked my laptop settings.\nI like the clone name. Shorter and clear.\nI'll take a stab at the tests. May ask for help once I get into it.\nCheers.\nOn Mon, Jun 1, 2015, 6:18 PM Daniel Bachhuber notifications@github.com\nwrote:\n\nSeems reasonable. CI is choking because your indentation is off.\n1. What do you think about renaming the parameter to --clone= ?\n2. Can you add functional tests\n   https://github.com/wp-cli/wp-cli/blob/master/CONTRIBUTING.md#functional-tests\n   ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/1863#issuecomment-107734086.\n. @szepeviktor I've never written tests in the .feature file format before.  Reading up on them, but not quite comfortable writing them yet. \n. Why not provide the shortcut of being able to specify the URL directly? \n\nI would think the same logic that applies to the other commands (being able to use URLs) should be here for consistency, no?\nThe use case I was thinking of was being able, in one command, to install the theme unit testing data. \n. Fair enough. Thanks for the reply.\n. Hi @xavierartot - What version of WP-CLI are you running?\nTo install WordPress 4.4, you'll need to make sure you're running at least WP-CLI 0.21.1.\nThe \"wp core install\" command doesn't with WP 4.4 and older versions of the CLI. \n. Also, just a tip, you could replace:\nmysql -u root -p\"root\" -e \"CREATE DATABASE \\$rep`;\"`\nwith\nwp db create\nand run it right after you've created your config file. \n. It was worth a shot :)  Your decision makes sense though, thanks @danielbachhuber \n. ",
    "aaroncampbell": "How'd I miss that?  Thanks.\nhttps://github.com/wp-cli/wp-cli.github.com/pull/26\n. Yep, looks like I had a second install somewhere that was symlinked from /usr/bin/wp.  I removed everything (including that symlink) and re-installed, but wp didn't work.  It kept saying bash: /usr/bin/wp: No such file or directory.  I guess that symlink isn't created by default and I couldn't seem to make it look elsewhere (even though I did have wp in my $PATH).  I ended up deciding it wasn't worth the wasted time and I put the symlink back in /user/bin/ but pointed it to the right install.  Seems to work fine now.\n. Sorry, no PR.  I got pulled away onto some client work.\n. ",
    "heydonovan": "Oh, I didn't catch that. Now I feel silly, haha. Sweet! :)\n. Eh, guess I didn't explain it too well, haha. The problem I face is getting and setting values within the wp-config.php file. I'm stuck using sed or awk to do so. Was just curious to know if a more elegant solution existed out there (these would be python scripts to call WP-CLI, instead of operating on it as if it were just another text-file).\n. ",
    "nickdaugherty": "As is, any WP_Query that uses WP_Date_Query internally will cause a fatal on CLI, as that class hasn't been included in the CLI environment.\nSee below for where WP_Query uses WP_Date_Query\nhttp://core.trac.wordpress.org/browser/trunk/src/wp-includes/query.php#L879\nhttp://core.trac.wordpress.org/browser/trunk/src/wp-includes/query.php#L2311\nhttp://core.trac.wordpress.org/browser/trunk/src/wp-includes/query.php#L2318\n. I like the --by solution to remove ambiguity. An alternative would be to attempt to load a category with that name, then failing that, load by id - though that's inefficient and imprecise.\n. ",
    "QWp6t": "That's weird. It builds for me (mingw). I definitely tested it because it's the only way I could get the download command to work. I made sure overwriting also works. Thought I did good enough QA but I guess not. I'll set up a VM and get to the bottom of this. \n. The error is because it doesn't like the file extension. On Windows systems, PHP appends .tmp to temp file names generated with tempnam(). \nOne workaround here would be to use $temp = sys_get_temp_dir() . '/' . uniqid('wp_') . '.tar.gz';, and although that works, I actually discovered something else that's wrong with this: it doesn't implement a --strip-components=1 equivalent. I hadn't noticed this behavior initially because my first time getting the download command to work was with my implementation. lol\nThis might be something worth revisiting one day, though.\n. I had assumed you guys wouldn't be okay with that since it's not as graceful. I went ahead and implemented that and re-opened the pull request.\n. It works as expected for me in PHP 5.5.13 on CentOS x86-64\n```\n[05:53 PM]-[vagrant@localhost]-[~] \n$ wp core\nusage: wp core config --dbname= --dbuser= [--dbpass=] [--dbhost=] [--dbprefix=] [--dbcharset=] [--dbcollate=] [--locale=] [--extra-php] [--skip-salts] [--skip-check]\n   or: wp core download [--path=] [--locale=] [--version=] [--force]\n   or: wp core install --url= --title= --admin_user= --admin_password= --admin_email=\n   or: wp core is-installed [--network]\n   or: wp core multisite-convert [--title=] [--base=] [--subdomains]\n   or: wp core multisite-install [--url=] [--base=] [--subdomains] --title= --admin_user= --admin_password= --admin_email=\n   or: wp core update [] [--version=] [--force] [--locale=]\n   or: wp core update-db \n   or: wp core version [--extra]\nSee 'wp help core ' for more information on a specific command.\n[05:54 AM]-[vagrant@localhost]-[~] \n$ php -v\nPHP 5.5.13 (cli) (built: Jun  5 2014 16:44:19) \nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies\n    with Xdebug v2.2.5, Copyright (c) 2002-2014, by Derick Rethans\n```\n@boreal, if you don't mind doing php -i in your console and pasting it into pastebin or gist or something and linking it here, I can compare it with my own output and see if there are any differences between the two. (note: php -i dumps your environment variables as well, so be sure to scan it for any sensitive text)\n. Can this be an option in the wp-cli.yml file as well?\n. I meant it not as something that someone needs to configure, but something that someone can configure in circumstances in which the sniffer fails to sniff out someone's esoteric setup.\n. Wouldn't it be as simple as setting the constant WP_USE_THEMES to false?\n. I think this should possibly require --force. The reason is because if you deactivate a plugin that's missing, it won't be able to fire any of the deactivation events, which can include data cleanup, something you won't get by wiping the plugin from the file system.\n. composer global require wp-cli/wp-cli also works fine on Windows. I'm surprised that method isn't on there already since it's cross-platform and it can be updated with composer global update.\n. I run commands against archive sites all the time. Just set --url parameter and it works fine.\nOr maybe he's wanting to target all archived sites with some sort of parameter? idk.\n. Copying/renaming it is not correct. It's an ascii detached signature.\nPer the build instructions, you generate it like this:\ngpg --output wp-cli.phar.asc --default-key releases@wp-cli.org --detach-sig --armor wp-cli.phar\nNot sure why it's not making its way to the GH releases, though, since it is right there in the build instructions. \ud83e\udd14 . @danielbachhuber \ud83e\udd14 . These two lines might need explaining: \nL82 is removing '.tar.gz' (7 chars long) to create the directory name. \nSo the tmp folder might contain something like...\n- /tmp/wp_xxxxxxxxxxxxx.tar.gz\n- /tmp/wp_xxxxxxxxxxxxx/\n- /tmp/wp_xxxxxxxxxxxxx/wordpress\nL83 is creating an offset for '/wordpress' (10 chars long).\nThese functions are more efficient than str_replace(). There's also the added benefit of not having to take \\ or / into consideration.\n. To be clear, the reason I use substr() instead of *_replace is because it's easier (i.e., fewer lines of code), not because it's faster. It just happens to be faster as well.\nBut anyway, how about pathinfo() instead of substr() to create $tempdir value? (L82) That would be both readable and easy to implement.\nFor $tempOffset, I can use strlen($tempdir . '/wordpress') and that would increase readability and give us the same value, so we could still use it as the offset in L86-87. Or we can implement a *_replace() approach. I just have an aversion to using string replacement when the portion to be replaced is in the exact same part of each value. This is precisely what substr() was created to address.\nBut it's your call. Let me know which approach you want to take, and I'll add another commit sometime over the weekend.\n. I did it this way so that the garbage collector would destroy the iterator immediately after the loop.\nI could do something like this instead...\nphp\n$allfiles = new RecursiveIteratorIterator ( new RecursiveDirectoryIterator( $source, $flags ), RecursiveIteratorIterator::CHILD_FIRST )\nforeach( $allfiles as $src ) {\n    // [...]\n}\nunset( $allfiles );\nrmdir( $source );\nBut I figured you would frown on the use of unset(), which would have been required to use rmdir(), otherwise PHP will keep the temp folder in use.\n. ",
    "bordoni": "Big +1 for this!\n. @scribu A solution, might be to use something like a --by param, using as reference get_term_by.\n. Loving this Addition to the WP-CLI\n. I intend to start working on a Pull Request for the issue this weekend.\nWill go based on what you did on wp-cli/wp-cli.github.com#159 \n. Yes I do, got to wrap what I've started and Pull Request it.\n. Hey @danielbachhuber, I was thinking about using a JS localization tool to allow us to translate the global scoped variables/templates, like Navigation and things of that nature.\nI was looking at i20n from Mozilla looks really easily usable on the GH Pages structure.\n. The problem is that we could end up with huge _config.yml file, where with this method we can place the strings on the language Folder, as well as having an Original File (.dist) to allow new languages to follow.\n. Actually, you are are right, so what would be the best way to store these strings?\nFolders as _data/l10n/{lang} and contents:\n{string}: {translation}\n{string}: {translation}\n. ",
    "joshkadis": "Thanks. It might be helpful to put that in that Wiki. It says @when \"has no effect if the command using it is defined in a plugin\" which I interpreted as meaning to define the command in a theme. Obviously it makes sense that the theme is loaded after WP is loaded.\nNow I have the before_wp_load correct, and I can see that the register_early_invoke() is happening before do_early_invoke(). However, I'm having trouble hooking into the actions defined in wp-settings-cli.php. In the Query_Vars_CLI_Command::run_test() example above, it seems like WP_CLI::add_action('init', function(){ //do stuff }); should hook in here. Am I still doing it wrong? :)\n. I guess I have slight preference for number of days because it's easier to explain to non-devs. \nI wrote a plugin last year that allows our editors to download tab-delimited reports of stuff like word count for each post, and it made a lot more sense to them when I told them it downloaded the last 30 days rather than the last 700 posts (we do about 23 posts per day).\nRequiring as a separate package would of course work fine, but some other folks who work on high volume sites liked the idea when I brought it up at a meetup. So I figured it would be a nice addition.\n. Totally. Control over export and import would be even better. However, we\nare hosted on WP.com VIP so we only have control over the import.\nThere is also a use case if you are importing a WXR that was exported from\na stock wp-admin interface and not wp-cli.\n. It's broken up, I believe it basically gives you a WXR-formatted dump of wp_posts in chunks of 1000 posts. However, it may be best to apply the number of days cutoff only for Posts and attachments where the parent is older than the cutoff. You would still want to import Pages, menu items, custom post types, etc that are older. \nI can write it as a separate package to require and send you a Gist to see if you want to include it. I think it would be useful for a fair number of folks.\n. Works for me, thanks!\n. ",
    "tecking": "Worked well with 0.13-alpha3 :-)\nThanks!\n. ",
    "blackcat": "scribu, thanks for your answers and documentation fixes!\n\nErm... not sure what you mean here\n\nI have fixed last part of question:\nFrom 'Terminology' block: \"Sub-command = child command. Examples: wp post generate, wp plugin status.\"\nFrom 'wp help': \n$wp help\n...\nSYNOPSIS \nwp <subcommand>\n(github parser swallowed the word)\nSo it's look like mistake in \"wp help\"\n. ",
    "lancewillett": "+1\n. (Edited for clarity.)\n. Something like this:\n\n[07-Jul-2014 22:39:37 UTC] PHP Notice:  Constant XYZ already defined in /path/to/the-wpcli-dir/somephp-file.php on line 3\n[07-Jul-2014 22:39:37 UTC] PHP Stack trace:\n[07-Jul-2014 22:39:37 UTC] PHP   1. {main}() /path/to/wp-cli/php/boot-fs.php:0\n[07-Jul-2014 22:39:37 UTC] PHP   2. include() /path/to/wp-cli/php/boot-fs.php:17\n[07-Jul-2014 22:39:37 UTC] PHP   3. WP_CLI\\Runner->before_wp_load() /path/to/wp-cli/php/wp-cli.php:15\n[07-Jul-2014 22:39:37 UTC] PHP   4. WP_CLI\\Utils\\load_file() /path/to/wp-cli/php/WP_CLI/Runner.php:413\n[07-Jul-2014 22:39:37 UTC] PHP   5. require() /path/to/wp-cli/php/utils.php:41\n[07-Jul-2014 22:39:37 UTC] PHP   6. define() /path/to/the-wp-cli-dir/some-file.php:3\n\nWhere somephp-file.php has a PHP constant defined with define( 'XYZ', true ); and /the-wp-cli-dir/wp-cli.yml requires some-file.php as I mentioned.\n. ",
    "mjangda": "\nTheoretically, we should be able to set HTTP_HOST to a dummy value and use switch_to_blog(). In practice, I'm sure one or ten things will have to be creatively side-stepped. :)\n\nYep, one of the biggest problems is that the theme and other plugins for the blog aren't loaded, which can be an annoyance.\n. export --category=100 throws the following: Warning: Could not find a category matching 100\n. ",
    "felipelavinz": "Hi! \nI haven't been able to work on this yet, but I'll definitively apply the proposed changes and build the tests\nThanks for your comments\n. ",
    "dev169": "Here it is:\nbash\n$ wp --info\nPHP binary:     /usr/bin/php\nPHP version:    5.3.10-1ubuntu3.8\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root:    /home/dev169/.wp-cli/vendor/wp-cli/wp-cli\nWP-CLI config:\nWP-CLI version: 0.12.1\n. No .curlrc present in either installation (both are stock Ubuntu images, one as provided by DigitalOcean, the other bootstrapped directly from the untouched ISO in a local VM). I've looked at #566 but i'm not sure they are related, since in my case, calling curl directly works. I'm including some output:\n``` bash\n$ curl -v https://api.wordpress.org/\n About to connect() to api.wordpress.org port 443 (#0)\n   Trying 66.155.40.250... connected\n successfully set certificate verify locations:\n   CAfile: none\n  CApath: /etc/ssl/certs\n SSLv3, TLS handshake, Client hello (1):\n SSLv3, TLS handshake, Server hello (2):\n SSLv3, TLS handshake, CERT (11):\n SSLv3, TLS handshake, Server key exchange (12):\n SSLv3, TLS handshake, Server finished (14):\n SSLv3, TLS handshake, Client key exchange (16):\n SSLv3, TLS change cipher, Client hello (1):\n SSLv3, TLS handshake, Finished (20):\n SSLv3, TLS change cipher, Client hello (1):\n SSLv3, TLS handshake, Finished (20):\n SSL connection using ECDHE-RSA-RC4-SHA\n Server certificate:\n        subject: O=.wordpress.org; OU=Domain Control Validated; CN=.wordpress.org\n        start date: 2011-11-17 21:13:12 GMT\n        expire date: 2014-12-15 20:11:21 GMT\n        subjectAltName: api.wordpress.org matched\n        issuer: C=US; ST=Arizona; L=Scottsdale; O=GoDaddy.com, Inc.; OU=http://certificates.godaddy.com/repository; CN=Go Daddy Secur\n        SSL certificate verify ok.\n\nGET / HTTP/1.1\n\n```\n\nAny ideas?\n. Thanks for being able to reproduce it, i was starting to question my sanity. For the record, i am using the 64-bit builds.\nThe files are indeed downloaded correctly, but fetched over plain HTTP instead. I would consider this issue an error, not a warning, as it automatically falls back to an insecure connection. At least give me a prompt to consider and accept the risk.\nThis issue affects all outgoing connections (such as those initiated by wp core config, etc).\n. Much obliged.\n. ",
    "connor11528": "I got the same error as the original post today. is there something I can do to download wordpress with wp core download?\n. hmm I'm using Ubuntu 12.04, ran the command and now get: wp: command not found\nI ran php composer.phar self-update\nand here's my ~/.bash_profile:\n```\nWP-CLI directory\nexport PATH=/home/jasonshark/.wp-cli/bin:$PATH\nWP-CLI Bash completions\nsource $HOME/.wp-cli/vendor/wp-cli/wp-cli/utils/wp-completion.bash\n```\n. that worked. You're the man\n. yeah I needed composer http://getcomposer.org/download/ (new to php and wordpress command line)\n. ",
    "Kevinlearynet": "Understandable :)\nI barely noticed it myself.\n. No problem,\nThanks for making and publishing the cli\n. ",
    "ValentinCreative": "My mistake I just had to add an alias in my bash profile\n. ",
    "ziz": "The dark rituals are well established within the dark heart of WP-CLI - they already are used in summoning up Shub-wp-config.php-aroth, The King in (DOMAIN|PATH)_CURRENT_SITE, and Northot, the __FILE__ and __DIR__ substition That Should Not Be (and possibly others - I dare not read further lest I go mad(der than I already am)).\nAs for creating wp-cli.yml files - that's what I'm doing right now, and the number of sites I touch on a regular basis that need me to do that finally pushed me to write this patch, but I can go on doing that if detection - by this method or another - isn't feasible.\n. ",
    "tiagohillebrandt": "Okay, will do that :)\n. Hope this works! :-)\n. Done\n. \"If DB_CHARSET and DB_COLLATE do not exist in your wp-config.php file, DO NOT add either definition to your wp-config.php file unless you read and understand Converting Database Character Sets. Adding DB_CHARSET and DB_COLLATE to the wp-config.php file, for an existing blog, can cause major problems.\"\nUnfortunately, it is common to see existing installs (updated from older WP versions) running without these constants on wp-config.php.\nAlso, for example, it isn't rare to see blogs running WP tables with latin1 and plugins tables with utf8. Thus, keep DB_CHARSET as empty can be a workaround.\n. Regarding the core bracing standards, will update the code.\nSorry, the second part is not clear for me. The issue today is that constant value is empty. Thus, following your suggestion, what constant value it should assume if DB_CHARSET is set as empty?\n. The deactivate option already exists, just changed it to work with activate one as well.\nGoing to work on functional tests this week, will update the branch as soon as possible.\n. @benqzq Just released WP-CLI in a PPA for Ubuntu, that could be helpful for you: https://launchpad.net/~tiagohillebrandt/+archive/ubuntu/wp-cli. ",
    "montchr": "Thanks, I didn't realize that had an effect here.\nThe output:\nPHP Notice:  Undefined index: HTTP_HOST in /var/www/vhosts/site.com/httpdocs/wp-includes/ms-settings.php on line 25\nNotice: Undefined index: HTTP_HOST in /var/www/vhosts/site.com/httpdocs/wp-includes/ms-settings.php on line 25\nI should note that this is an old multisite install from the pre-3.0 days \u2013 I inherited the site, so I'm not sure if its original maintainers missed a step during installation, as suggested in issue #78.\n. @danielbachhuber I actually found that the exact opposite was the case \u2013 WP-CLI died silently when setting the --url argument to the new domain. When I set it to the old domain, things worked out fine. Why might that have happened?\nMy issue, initially, was that I wasn't using --url at all. :persevere: Tried both domains, and the old one worked (but only after removing the Bad Behavior plugin that had been giving me the notice Undefined index: REMOTE_ADDR).\nAnyway, the replacement operation worked out fine in the end. :)\n. Haha I'd be surprised too \u2013 to clarify, it's running 3.7.1 now but when I was first contracted to work on it,\nthe site was running 3.2 and not in good shape.\nOn Tuesday, November 26, 2013, Cristi Burc\u0103 wrote:\n\nI should note that this is an old multisite install from the pre-3.0 days\nI'm surprised WP-CLI worked at all.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/888#issuecomment-29271168\n.\n\n\n\nChris Montgomery\nmont.chr@gmail.com\nWeb Editor\nThe Temple News\ntemple-news.com\nweb@temple-news.com\nWeb Developer\nSchool of Media and Communication\nTemple University\nsmc.temple.edu\nmontchr@temple.edu\nSous les pav\u00e9s, la plage.\n. Correct. I was expecting behavior similar to the old Debug Bar Console which reflects changes on the fly, but this behavior makes sense in the case of wp shell. Thanks.\n. Okay, all set.\n. > If we supported ..., WP-CLI could interpret this as \"add 2=>foo to post 1\" or \"add STDIN to meta key foo for posts 1 and 2\". This ambiguity would be a bug.\nThis makes sense.\n\nI'm not a huge fan of the CSV approach, because it'd be inconsistent with our other command arguments.\n\nInconsistent in the sense that no other command would support it? Or in some other way? If the former, why not add CSV support to other commands too?\n. Same issue here, but we're on a private repo so I implemented @danielbachhuber's fix from the above repo (https://github.com/bonny/WordPress-Simple-History/pull/95) and that did the trick. Thanks.\n. ",
    "mboynes": "I'm all-for using some other parser or using a custom one. I started with simply outputting getDocComment to get something up and start hearing outside opinions before moving forward. I haven't had a chance to dive in to what the help command uses to parse the docs; is that generic enough to use? Otherwise, it would be simple enough to parse and reformat PHPDoc blocks to improve the command's output.\n. I updated this to make for a much nicer experience. Given the variety of docblocks in core, it's not going to work everywhere, but it should be pretty flexible.\nOpen to any suggestions!\n. > I can't seem to get it to work for class properties. Tried wp doc WP_Query::$query and wp doc WP_Query '$query'. If it only works for static properties, you should mention that.\nThe issue is the $. I think it would be best to tell people to omit it, since their shell will interpret it as a variable (unless it's in quotes). I'll update the script to work with them all the same, but you can try it with either wp doc WP_Query query or wp doc WP_Query::query\n. > WP_Query has both a query() method and a $query property.\nGood catch, thanks. I improved how it would work. If you include the $ then it will specifically look for a class property. If you don't include it, a property may still be retrieved, but methods are prioritized.\n. Any ideas on how we might pull docs for actions and filters? I've got three ideas, none of which I'm thrilled with:\n1. Build a service that takes an action or filter and a WP version and returns the docblock(s) from a pre-populated database. Ugh to maintain.\n2. Include a pre-populated database (could be sqlite, could even be a text file) of actions/filters and their docs. Double ugh to maintain.\n3. Build and include a shell script which greps the entire source and finds/returns the docblock on-the-fly. Hard to get 100% accurate and would be relatively slow.\nI don't necessarily mind building and hosting (1), and there would be other advantages to such an API, but I'm sure we'd all much rather the solution be packaged with wp-cli for the purposes of sustainability. (3) seems like best way to go, but I really want there to be a better solution. I'd love to hear some other opinions!\n. > Can you make sure to include functional tests?\nAbsolutely, I'll try to have them in the PR by tonight.\n\nWhat should happen if either of these are called on a single- site instance?\n\nGood point, it should probably fail gracefully in that circumstance. I'll add an is_multisite check.\n\nShould wp theme list somehow indicate network-enabled vs site-enabled themes?\n\nThat's an interesting idea and I think that would be really helpful. Perhaps we should open that as a separate issue?\n. > Regarding the functional tests: you don't actually check the effect that the command should have (i.e. dis/allowing a theme to be used as the active theme on a particular site).\nWell, that was silly of me. Tests added, thanks for pointing that out!\n\nRelated question: if a theme is not enabled on the particular site, should it show up in wp theme list at all?\n\nSince you can activate a theme without enabling it (though that's probably not a great idea), I think all themes should show up in wp theme list regardless of their enabled/disabled state. I think that when running wp theme list, if the current site is in a multisite install, then the table should include the network-enabled and site-enabled columns that @danielbachhuber suggested. I'm going to take a quick swing at doing that.\n. I like that idea. Since they function independently, do you think it might still be helpful to know if a theme is both site and network enabled? If so, we could add a fourth value to this, e.g. \"both\". I'm picturing a scenario where someone sees \"network\", then network disables the theme, then goes to a site and sees it's still enabled. On the other hand, the same condition exists in WordPress, so perhaps it's acceptable.\n. Yeah, very confusing. How about no, site, network, site,network?\n. Scratch that test, I confused myself. Update forthcoming.\n. I mistakenly added a test for deleting multiple menu items, forgetting I was testing deleting menus, not menu items. I left the test from a933770, since deleting multiple menu items didn't have test coverage either :-).\n. > It seems like making this change could break something in a bad way.\nI know, I actually didn't expect it to work. And when it did, I really didn't expect the existing tests to all pass; you can imagine my surprise when they did.\nThe url isn't really required for single-site installs. It is for multisite installs, because they will redirect the request if the url doesn't match (which is why the initial example fails silently), but single-site installs are a bit more flexible.\n\nAn alternative: what if we added some fancy regex to sniff out and execute those conditional includes?\n\nWe could certainly try for some common exceptions, like wp-config-local.php, but I don't think it's worth it, because we'd still just be guessing.\n\nwp core , wp config , and wp db * all run in that method, as well as any commands hooked into the before_wp_load hook.\n\nIf it weren't for the hook, I think we'd be safe. I checked the core, core config, and db commands and as far as I can tell none of them use the url except install and multisite-install which both explicitly require it as a flag. The hook is enough to take me back to the drawing board, I think.\nThe gist of what I'm trying to resolve here is two-fold. First, it's too easy to forget to explicitly set the URL, and the current guesswork is good enough to make the anomalies a head-scratcher. Second, having a yaml config or passing the url flag seems unnecessary, because the data is available -- if not in the config, then in the DB. If we can suss out the url without requiring it from the user, that makes wp-cli that much more simple to use. Here are a couple other ideas:\n- What if we read the value of siteurl from the DB if the url isn't explicitly set otherwise? Can we do that if the db creds haven't been read from the config yet?\n- What if we processed the config earlier in the process? Aside from core config, would anything else be affected by that? The hook is still a problem in this case, I suppose.\nI'm open to other ideas and happy to work on the solution if we come up with a good option.\n. I think the next step then would be to add a battery of tests for it. I'll try to get that done this weekend and we'll go from there.\n. I apparently got distracted and forgot all about this. I'll try to work up some tests soon, but if anyone else can pitch in that would be great. I think this would help solve a ton of issues surrounding #1631 (and the slew of tickets that it references, like #1514, #1596, and #1667).\n. I started on this problem in #1362 but ended up getting distracted with something else. I'll try to revisit it again real soon. It's done and works, just needs tests.\n. This is awesome and will be extremely useful. I agree with @jonathanbardo, whenever I add a similar debug call, I always output the memory usage (current and max). I also agree with keeping the feature light, so maybe it would be worth making this debug_time() and consider adding a debug_memory()?\n. > Given max is relatively consistent\nNot if you're doing any level of garbage collection (e.g. clearing out in-memory object cache). On long-running scripts like migrations, I often find the max usage to be more informative than the current. That said, a process like that is a lower-percentage situation that one can certainly code his- or herself, so adding only the current usage should be sufficient.\n. I agree. Where would you like this function to go? Perhaps \\WP_CLI\\Formatter?\n. ",
    "alanablett": "Awesome, that worked much better thanks.\nMy only other note would be that I didnt have svn or wget installed on my Mac, maybe these should be documented as requirements.\n. ",
    "getdave": "I was also having this issue but it was because I had installed wpcli globally via composer and I'd not updated it.\nRan composer global update and then removed all testing related files and dirs from my plugin. Then went through this process again and it worked.\nSchoolboy error...\n. ",
    "8ig8": "I think the installer script is a good idea, but I'd suggest including some system checks like Composer does with their PHAR installer.\nThe Composer installer just helped me track down an issue running wp-cli on a server. In my case, I couldn't get wp-cli.phar to run so to check if it was a .phar issue, I decided to install Composer and that's when the install script told me I needed detect_unicode = Off in php.ini. That got wp-cli.phar running.\n. Closing... Looks like this change has been incorporated into the next release (6a2adbacd819c19ce1b2a0d0c1a0422a949e68de). Thank you.\n. ",
    "korsvanloon": "I ended up making a request to this url\nhttp://api.wordpress.org/core/version-check/1.7/\nlike this:\n$data = json_decode('http://api.wordpress.org/core/version-check/1.7/'), true);\nreturn $data['offers'][0];\n. update_version doesn't work anymore in 0.16.0:\n$ wp plugin list --field=update_version\nError: Invalid field: update_version.\nAlso, this full list of plugin fields would be nice to see in the help of the command.\n. ",
    "derickschaefer": "I agree that this is the right starting point.  If it gets popular, we could always consider.  If WP had a remote location to pull the md5 hashes without the create, it would be a no-brainer to add the command.  That array is getting bigger by the way in terms of the number of files to hash.  :)\nI'll get this together and contribute.  I'll get Dax to review to make sure it is in the spirit of the way he envisioned it.\n. I agree in that transient list could be a mess.  A summary command would be much more helpful.\nLet me do a little work on this.\n. ",
    "websynthesis": "In an internal class with a healthcheck call, we do something like this:\nMemory Usage: 53.1 MB\nWordPress Version: 3.9\nTransient Variables: 28\nActive Plugins: 20\nAutoloaded Options Count: 1717\nAutoloaded Options Size: 0.5 MB\nWordPress Cron Calls: 18\nNetwork Status: false\nI wouldn't introduce to the CLI in this way but having a transient count along the lines of \n\nSELECT substring(option_name,1,6) as x,count() FROM $wpdb->options group by x HAVING x = '_trans' order by count() desc;\n\nIs a helpful indicator as to whether something is wrong or not.\n. ",
    "mastef": "I must have overlooked this. Thanks for replying so quickly!\nAs I'm not familiar with the wp-cli code architecture and test cases I'd rather not want to mess anything up :)\n. How does caching work in that case?\nUse case for me would be to pull the plugins before mysql is available. Wonder if that'd be possible with wp-cli\n. :+1: \n. ",
    "tierra": "This happens since it's also included by Twenty Fourteen, but WP-CLI tries to activate Jetpack after the theme is loaded instead of before the theme as core does, at least, as far as I can tell. I'm not sure how to fix this for WP-CLI.\n. Themes should be able to expect that plugins are loaded first, and this is just one side effect of potentially many more issues caused by a theme being loaded before a plugin is activated. So this is something that should be fixed in WP-CLI if at all possible, regardless of changes in Jetpack or Twenty Fourteen.\n. Looks like you're right, Jetpack doesn't even include the Featured_Content class unless the plugins_loaded hook is fired (and it's not during activation at all).\nI'm not sure how this is being included and conflicting with Twenty Fourteen then (but it certainly is, and only when using WP-CLI to activate Jetpack, not when activating from wp-admin).\n. ",
    "filtered": "Thanks for the patch @scribu. Also the suggestion made by @tierra to switch the theme to twentythirteen, activate jetpack, and then switch back to twentyfourteen works as an immediate stop gap measure if upgrading wp-cli is difficult in your enviroment.\n\nwp theme activate twentythirteen\nwp plugin install jetpack --activate\nwp theme activate twentyfourteen\n. \n",
    "jeremyfelt": "Nice, thanks!\n. We should be good in VVV core now.\n@merchantguru You'll want to modify the usage of wp in your auto site setup script as well. Feel free to open up an issue at VVV if you have any trouble.\n. Awesome! Thanks much. :)\n. Yeah, there are a few improvements that are needed for the network db upgrade process in general.\nFor an update to be successful, the server needs to be able to access the individual site with wp_remote_get() so that all of the code is loaded in the context of that site when the upgrade occurs. If a domain is invalid, if a cert is bad, or if the server itself doesn't have the proper DNS for that to occur, then an update will fail.\nIn core, we loop through the sites 5 at a time. Once the last set of 5 is reached, the network option is updated so that the notice disappears. If any site fails, wp_die() fires and halts the entire thing, which is really ugly. There's no great way to continue.\nI've done some ugly custom stuff in our configuration to help get past broken domains/certs and continue with the upgrade process. It'd be really nice to clean that process up and provide more helpful information.\nThat all said, WP-CLI is probably handling it correctly from a command line perspective. If not all sites were successfully upgraded, and they are going to be left as is, then the update of the network level version should be done manually.\n. > But in core, just active sites are upgraded (not archived, spam and deleted), right? I think WP-CLI should follow core behavior on this.\nAhh, I missed that part before. Yes, the query is explicitly for \"active\" sites.\n. $site_id and $public are others in ms-settings.php. :disappointed: Not sure if that has the same impact somewhere.\nhttps://github.com/WordPress/WordPress/blob/0e7c1d3b14db5614e012c2cae1401e2fce71d3bd/wp-includes/ms-settings.php#L198-L207\n. Ooph, reading back... that was a dump of a request. Thanks for parsing it. :)\n\nI do see an argument for making it easier to filter wp site list to only display the primary site for each network. You could then do something like wp site list --network-primary --field=url and pass to xargs.\n\nI think this is probably the right idea.\nWordPress doesn't really track the relationship between a network and its primary site. The best way to do it now is to compare the domain and path of each row from wp_site with the matching record in wp_blogs. Right now this would mean an additional query per network to generate that list.\nIs that too hacky for something to build into WP-CLI?. ms-load.php and ms-default-constants.php should be loaded after ms-blogs.php. Not sure if that would cause Travis to fail though.\n. What @schlessera said. And it's probably also possible a couple other ways through some crazy configs. The most specific way of saying this is probably something like Site {$domain}{$path} not found on network {$domain}{$path}.. ",
    "thiagof": "Got the nightly build the still can't run my site.\nI'm usin this deploy environment for my wordpress installation.\n. I might not fully understand the code, but actually the regexp matches the path. dirname isn't causing any issue\n```\nResults:\n/^\\srequire.+([\\'\"])(.wp-blog-header.php)\\1/ matches require( dirname( FILE ) . '/wordpress/wp-blog-header.php' );\nSuffix = );\nGroups:\n$0 = \"require( dirname( FILE ) . '/wordpress/wp-blog-header.php'\"\n$1 = \"'\"\n$2 = \"/wordpress/wp-blog-header.php\"\n```\n. Using the config file worked to locate wp-core, but my local setup had another problem\nSince this setup use sqlite-integration ([link(http://dogwood.skr.jp/wordpress/sqlite-integration/)) some mysql functions are not available.\nPHP Notice:  Undefined variable: table_prefix in phar:///usr/bin/wp/php/wp-cli.php(18) : eval()'d code on line 22\nPHP Stack trace:\nPHP   1. {main}() /usr/bin/wp:0\nPHP   2. include() /usr/bin/wp:4\nPHP   3. include() phar:///usr/bin/wp/php/boot-phar.php:5\nPHP   4. eval() phar:///usr/bin/wp/php/wp-cli.php:18\nYour PHP installation appears to be missing the MySQL extension which is required by WordPress.\nWordPress is going to release its core in PDO soon, so major changes to database inspecting will be needed.\nDo you think its time to investigate the issue or let to another time? Let me know and I fill the issue..\n. ",
    "xavierartot": "Thanks\n. wp --info\nPHP binary:     /Applications/MAMP/bin/php/php5.4.10/bin/php\nPHP version:    5.4.10\nphp.ini used:   /Applications/MAMP/bin/php/php5.4.10/conf/php.ini\nWP-CLI root dir:        /Users/xartot/.wp-cli/vendor/wp-cli/wp-cli\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.13.0\n. Thanks\n. I have the WP-CLI 0.20.2, \nCan I do? \nwp db create $rep\nEDIT: I fixed thank you.\n. ",
    "eliorivero": "PR here\nhttps://github.com/wp-cli/wp-cli/pull/935\nin addition to the command, also had to change the forward slashes to back slashes and \\Utils\\is_windows() didn't work for me but \\WP_CLI\\Utils\\is_windows() did\n. ",
    "kurtpayne": "There are two different use cases here:\n1.) I, as a customer, want to use wp-cli and I know my site is working and I expect that any plugins automatically augment wp-cli's functionality.  I trust all of my plugins because I installed them.\nIn this case, I want \"skip\"\n2.) I, as a administrator / host / ops / agency want to use wp-cli to manage a customer's site.  I don't trust their plugins because I didn't install them.  If they install a plugin that break's wp-cli's functionality, I have a very bad day.\nIn this case, I want \"enable\"\nCan we have it both ways with a config value or flag?\n. Yep, works for both cases.\nThis really should encompass the current theme as well.  Bad code in functions.php, for example, can cause the same problems as bad code in a plugin.  Should there be another switch for --skip-theme as well?  Or can that be rolled in somehow?\n. New PR is #1155 \n. I'm good with this being outside the main repo.  I'm not sure if there's a better place for it to live.  I use RPM for managing wp-cli mostly because that's how our ops infrastructure works (puppet/spacewalk) so a single phar file doesn't match that paradigm.\n. ",
    "bellwood": "I re-downloaded to no avail:\nphp wp-cli.phar --info\nFatal error: Uncaught exception 'PharException' with message 'phar \"/usr/local/src/wp-cli.phar\" has a broken signature' in /usr/local/src/wp-cli.phar:4\nStack trace:\n0 /usr/local/src/wp-cli.phar(4): Phar::mapPhar()\n1 {main}\nthrown in /usr/local/src/wp-cli.phar on line 4\n. This is still an issue:\nI've added display errors:\n``` php\n!/usr/bin/env php\n<?php\nini_set('display_errors',1);\nPhar::mapPhar();\ninclude 'phar://wp-cli.phar/php/boot-phar.php';\n__HALT_COMPILER(); ?>\n...\n```\n```\nPHP Fatal error:  Uncaught exception 'PharException' with message 'phar \"/usr/local/bin/wp\" has a broken signature' in /usr/local/bin/wp:4\nStack trace:\n0 /usr/local/bin/wp(4): Phar::mapPhar()\n1 {main}\nthrown in /usr/local/bin/wp on line 4\nFatal error: Uncaught exception 'PharException' with message 'phar \"/usr/local/bin/wp\" has a broken signature' in /usr/local/bin/wp:4\nStack trace:\n0 /usr/local/bin/wp(4): Phar::mapPhar()\n1 {main}\nthrown in /usr/local/bin/wp on line 4\n```\nCurrent shasum (without ini_set) for:\nhttps://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nshasum wp-cli.phar\n25cc12d9fb9cafff0b42ac2956ec198114ce0207  wp-cli.phar\n... and ...\nhttps://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n shasum wp-cli.phar\n3f2de45a914bbd8c357996c4f7553259f057a41b  wp-cli.phar\nSo, this page:\nhttp://wp-cli.org/\n...is linking to two different files, neither of which have the same shasum and neither of which match what it should be above...\n```\nphp -v\nPHP 5.4.36 (cli) (built: Dec 31 2014 10:34:07)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies\n    with the ionCube PHP Loader v4.5.0, Copyright (c) 2002-2013, by ionCube Ltd., and\n    with Zend Guard Loader v3.3, Copyright (c) 1998-2013, by Zend Technologies\n    with Suhosin v0.9.35, Copyright (c) 2007-2014, by SektionEins GmbH\ncat /etc/redhat-release\nCentOS release 5.11 (Final)\nuname -a\nLinux -redacted- 2.6.18-400.el5 #1 SMP Thu Dec 4 12:48:38 EST 2014 x86_64 x86_64 x86_64 GNU/Linux\n```\n. Hate to reopen, but, if PHP has the following:\ndisable_functions => exec,passthru,shell_exec,system,proc_open,popen,show_source,eval\nHow would any malicious code inside the PHP files cause any issues if ran from root?\n. No debate there, just asking if the scenario I provide would be mitigated in terms of the risk.\n. I understand it to the extent that it's been explained in this issue.\nIn a scenario where:\n1) users have no shell\n2) php is prohibited from making system level calls/commands\n3) php is ran as safe cgi where no custom php.ini can be loaded\n...and from your explanation, everything is loaded up as the user running the commands; I am trying to come up with a scenario where in any malicious could harm the system.\nPerhaps I'm naive (very may well be) but even if something in that wordpress was malicious:\nexec(\"rm -rf /\") \n...exec is explicitly disabled and would not run.\nPerhaps what would be a better approach to \"allow-root\", would be, if so desired, the ability to enable a shell (jail shell for cpanel, or otherwise) on-the-fly under which wp-cli runs for the duration of the command.\nThis to me would:\n-remove the need for root\n-only allow php to run within the users permitted directories (open_basedir or otherwise)\nIt would be a rather trival use of usermod to make happen and would require the current user to be root.\n. While I do agree that running anything as root has it's risks and one can't simply account for all instances the above example renders nothing on my system.\nIt is denied access to the file as it is outside its allowed open_basedir pathing.\nI do completely agree with your stance to enforce allow-root, 100%, no questions asked =)\n. ",
    "jvanatta": "I'm having a similar problem (though I'm trying to install wp-cli for the first time). wget the file, then\nshasum wp-cli.phar\n25846e52eedbbbb413b767630c6d6ce84dfd4ba0  wp-cli.phar\nI've tried downloading a few times and keep getting the same hash. Maybe I need to get an older version?\n. ",
    "wvega": "I'm getting the same result from shasum as @jvanatta:\n[vagrant@localhost ~]$ wget --quiet https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n[vagrant@localhost ~]$ shasum wp-cli.phar \n25846e52eedbbbb413b767630c6d6ce84dfd4ba0  wp-cli.phar\nDownloading the file from https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar seems to work.\n[vagrant@localhost ~]$ wget https://github.com/wp-cli/wp-cli/releases/download/v0.13.0/wp-cli.phar --quiet\n[vagrant@localhost ~]$ shasum wp-cli.phar \ne5a6cfaf739bc5f382d89ddfc650c4bc756374fb  wp-cli.phar\nSomething seems to be wrong with the Phar referenced in http://wp-cli.org/.\n. ",
    "mfioretti": "whoa! It works. Where is this documented? Thanks. \n. ",
    "tomjn": "This version of Shell::columns removes the str_repeat issue and results in a shortened progress bar when the above situation happens. I get a single warning related to the exec fork issue now instead of 2 warnings, and it handles the Windows use case:\nstatic public function columns() {\n        if ( stripos( PHP_OS, 'indows' ) === false ) {\n            $columns = exec('/usr/bin/env tput cols');\n            if ( is_numeric( $columns ) ) {\n                return $columns;\n            }\n        }\n        return 80; // default width of cmd window on Windows OS, maybe force using MODE CON COLS=XXX?\n    }\n. This is also relevant:\nhttps://bugs.php.net/bug.php?id=18833\nI'd suggest querying for the terminal width once, and passing it into the display() method of the progress class rather than doing it on every tick. This would reduce exec calls to 1\n. I've opened https://github.com/jlogsdon/php-cli-tools/issues/39 regarding refactoring\n. Wooo!!\n. ",
    "chuckingit": "okay - now i understand why passing the first and last names might be hard ... in looking at this table -> https://codex.wordpress.org/Database_Description#Table:_wp_users - i did not realize first and last names are not in there and probably are meta fields hence the limits on wp create ... \n. ",
    "madalinignisca": "``` bash\nmadalin@NOHA /c/websites/woocommerce\n$ wp core config --dbname=woocommerce --dbuser=madalin\n'mysql' is not recognized as an internal or external command,\noperable program or batch file.\nmadalin@NOHA /c/websites/woocommerce\n$ mysql --version\nc:\\zamp\\mysql55\\bin\\mysql.exe  Ver 14.14 Distrib 5.5.35, for Win64 (x86)\n```\non windows the same situation. I have mysql bin folder in my path and can run it from the command line.\n. bash\n$ wp eval 'echo getenv(\"PATH\");'\nc:\\Users\\madalin\\bin;.;C:\\Git\\local\\bin;C:\\Git\\mingw\\bin;C:\\Git\\bin;c:\\WINDOWS\\system32;c:\\WINDOWS;c:\\WINDOWS\\System32\\Wbem;c:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\;c:\\Program Files\\Microsoft SQL Server\\110\\Tools\\Binn\\;c:\\zamp\\php55;c:\\ProgramData\\ComposerSetup\\bin;c:\\Users\\madalin\\AppData\\Roaming\\npm;C:\\Git\\cmd;c:\\Python33;c:\\Ruby193\\bin;c:\\nodejs\\;c:\\zamp\\php55;c:\\zamp\\mysql55\\bin;c:\\zamp\\Apache24\\bin;c:\\bin;c:\\zamp\\mongodb\\bin;c:\\zamp\\wp-cli\\bin\nmadalin@NOHA /c/websites/wordpress\nMySQL cli client is in the PATH (c:\\zamp\\mysql55\\bin)\nI'm on WP-CLI 0.14\nIn what file should I look for the MySQL client part implementation, I'd like to try to fix it for Windows.\n. ",
    "clemens-tolboom": "I get the same error \n$ wp core config --dbname=site_wp --dbuser=site_wp\nsh: mysql: command not found\nSo cannot run:\n$ wp eval 'echo getenv(\"PATH\");'\nError: wp-config.php not found.\nEither create one manually or use `wp core config`.\nAfter a browser install I can run it. It's result is the same as $ echo $PATH\nI'm on a MAC and new to wp-cli.\n. Having probed wp db cli\nphp\nfunction run_mysql_command( $cmd, $assoc_args, $descriptors = null ) {\n...\n    \\WP_CLI::log(\"MYSQL: $final_cmd using environment keys: \" . join(\",\", array_keys($env)));\n    $proc = proc_open( \"which mysql ; set ; \" . $final_cmd, $descriptors, $pipes, null, $env );\n...\n}\nI get quite an empty env :-(\nMYSQL: mysql --no-defaults --database='XXX_wp' --host='localhost' --user='XXX_wp' --default-character-set='utf8' using environment keys: MYSQL_PWD\nBASH=/bin/sh\nBASH_ARGC=()\nBASH_ARGV=()\nBASH_EXECUTION_STRING='which mysql ; set ; mysql --no-defaults --database='\\''XXX_wp'\\'' --host='\\''localhost'\\'' --user='\\''XXX_wp'\\'' --default-character-set='\\''utf8'\\'''\nBASH_LINENO=()\nBASH_SOURCE=()\nBASH_VERSINFO=([0]=\"3\" [1]=\"2\" [2]=\"51\" [3]=\"1\" [4]=\"release\" [5]=\"x86_64-apple-darwin13\")\nBASH_VERSION='3.2.51(1)-release'\nDIRSTACK=()\nEUID=501\nGROUPS=()\nHOSTNAME=Clemens-Tolbooms-MacBook-Pro.local\nHOSTTYPE=x86_64\nIFS='\n'\nMACHTYPE=x86_64-apple-darwin13\nMYSQL_PWD=XXX_wp\nOPTERR=1\nOPTIND=1\nOSTYPE=darwin13\nespecially\nPATH=/usr/gnu/bin:/usr/local/bin:/bin:/usr/bin:.\nPIPESTATUS=([0]=\"1\")\nPOSIXLY_CORRECT=y\nPPID=60330\nPS4='+ '\nPWD=/Users/clemens/Sites/bouwfonds/wp/www\nSHELL=/bin/bash\nSHELLOPTS=braceexpand:hashall:interactive-comments:posix\nSHLVL=1\nTERM=dumb\nUID=501\n_=mysql\nsh: mysql: command not found\nSo we're not getting the current ENV I guess. Not sure why!?!\n. Fixing bin/wp like\nbash\nexec \"$php\" -d variables_order=ES $WP_CLI_PHP_ARGS \"$SCRIPT_PATH\" \"$@\"\nmakes it work. But doing this through php/boot-fs.php fails due to it's nature PHP_INI_PERDIR (http://www.php.net/manual/en/configuration.changes.modes.php).\nThis makes debugging hard through ie NETBEANS :-(\nphp\n<?php\nini_set(\"variables_order\", \"ES\");\nCan we fix this for debuggers?\n. Hmmm ... it is through my debug session with netbeans it's PATH is almost empty. This needs some more thoughts on my behalf.\n. The problem is the shell PATH values are not available through bin/wp\nIs @samme running the .phar or bin/wp?\nWe need two solutions\n- make sure the PATH settings are available for the scripts bin/wp thus make developers like me happy.\n- is running the .phar getting the current PATH or an empty\nIMHO #1029 is a good solution for developers but I'm not sure how to tackle the .phar variant.\nWe should add the runtime variant to wp cli info telling using the .phar or bin/wp\n. @scribu you missed my point. If I want to debug it would be nice to see the command logged somewhere. Using --debug is not helping ie to find what is executing.\nIt would be great to have ie $ wp user --debug to see what calls are made.\nSo please reopen and bare with me :)\n. I use drush a lot and get ie\nbash\n$ drush --debug\nBootstrap to phase 0. [0.01 sec, 2.4 MB]                             [bootstrap]\nDrush bootstrap phase : _drush_bootstrap_drush() [0.01 sec, 2.53 MB] [bootstrap]\nLoading drushrc \"/Users/clemens/.drushrc.php\" into \"user\" scope. [0.01 sec, 2.54 MB]                                                                                                                                                [bootstrap]\nCache HIT cid: 7.0-dev-commandfiles-0-ab6795f38b1e467ef3bfe4ef2b4c8cbc [0.01 sec, 2.56 MB]                                                                                                                                              [debug]\nBootstrap to phase 0. [0.19 sec, 10.05 MB]                                                                                                                                                                                          [bootstrap]\nBootstrap to phase 0. [0.33 sec, 10.05 MB]                                                                                                                                                                                          [bootstrap]\nFound command: help (commandfile=core) [0.33 sec, 10.05 MB]                                                                                                                                                                         [bootstrap]\nindicating it's about to run help located in the core file.\nRunning\nbash\n$ wp --debug\ngive no clue whatsoever what command is about to run. I'm fine with a failure running but there is no distinction between\nbash\n$ wp core version\nError: This does not seem to be a WordPress install.\nPass --path=`path/to/wordpress` or run `wp core download`.\nand the debug version\nbash\n05:04:46 ~$ wp core version --debug\nError: This does not seem to be a WordPress install.\nPass --path=`path/to/wordpress` or run `wp core download`.\nBottom line is I would like to see the command execution flow :-)\n. I close this for now ... maybe a PR emerge from this.\nI needed the set -x to get to the php / xdebug hoop :p\n. This could reduce ci/prepare.sh with 2 lines :)\n. I'm having trouble with #950 so cannot test behat :(\nLet's see what travis thinks about the changes.\n. :-)\n. Fixes #1022 \n. Failure is about\n01. $ wp eval 'echo CONST_WITHOUT_QUOTES;' --debug\n    Executing: /tmp/wp-cli-phar/wp eval echo CONST_WITHOUT_QUOTES; --debug\n    CONST_WITHOUT_QUOTES\n. Hmmm ... this is a mere behat problem I guess ... need to learn that first :-/\n. @scribu any thoughts on this failure?\n. @danielbachhuber @scribu this issue felt of my radar ... not sure I find time soon ... haven't done WP since ~ last commit.\nSo please take over :-/\n. @scribu I did not get your hint that way ... please explain again :-)\n. lol ... this was about intent ... I did not get it. Now I do \"do not create ones own environment\"\n. We don't want to get those into the actual build.\ncomposer install --no-dev does not add these which is great IMHO\n. I stole that from https://packagist.org/packages/behat/behat ... no particular other reason.\n. ",
    "samme": "In my case, I solved this by linking /usr/local/mysql/bin/mysql (that's from the OS X Installer) to /usr/local/bin/mysql. That worked even with an empty $_ENV. :)\ngetenv(\"PATH\") does get my path:\n$ wp eval 'echo getenv(\"PATH\");'\n/usr/local/sbin:/usr/local/mysql/bin:/usr/local/var/rbenv/shims:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/usr/local/git/bin\n. ",
    "itsananderson": "I decided to go with the utils approach\n. Hmm, that's not good. I'll take a look and see if I can figure out why it's failing.\n. Interesting. I added that because without it one of the cyclical array tests was causing an infinite loop, but now that it's removed, the problem seems to be gone. I must have misdiagnosed the source of the infinite loop.\n. I should have explained my workaround attempts more thoroughly.\nThe way wp db export passes associative args to mysqldump doesn't allow the --tables parameter to be passed through to mysqldump correctly.\nmysqldump expects the following format: msyqldump --tables table1\nIf you call wp db export --tables table1 it exports everything to a file named \"table1\". This makes sense since that's the implied meaning of that positional argument.\nIf you instead call wp db export --tables=table1 you get this:\n```\n\n\n\nwp db export --tables=table1\nmysqldump: option '--tables' cannot take an argument\n```\n\n\n\nPer the mysql dump documentation for --tables: \n\nmysqldump regards all name arguments following the option as table names.\n\nhttp://dev.mysql.com/doc/refman/5.1/en/mysqldump.html#option_mysqldump_tables\nIf there's some other way of doing this with the existing implementation, that's great. If not, I'm happy to iterate on a solution.\n. Wouldn't that hide options like --where that actually need an =?\nhttp://dev.mysql.com/doc/refman/5.1/en/mysqldump.html#option_mysqldump_where\nWhat if I update run_mysql_command() to take a list of positional arguments as well as associative arguments. Something like this:\nphp\n$final_command = $cmd . implode(' ', $args) . assoc_args_to_str( $assoc_args );\nThen db export could just pass any extra positional arguments through to run_mysql_command()\n. Of course, we'd probably want to keep the run_mysql_command() signature backward compatible, so $args or $positional_args or whatever could be the last param, with a default value.\nphp\nfunction run_mysql_command( $cmd, $assoc_args, $descriptors = null, $positional_args = array() ) {\nFeels clunky to just dump it on the end, though, so hopefully there's a better way :)\n. Good idea\n. ",
    "Melmoth-the-Wanderer": "That is true, and it probably concerns every command that uses databes CRUD. Would be nice if transactions are built into wp-cli without any unwanted after-effects.\n. Pity i cant reproduce the environment and the database is missing. I'll keep an eye on the problem and let you know if anything happens.\n. ",
    "santagada": "any reason why this idea hasn't been implemented? I can provide a patch for it if it is the problem.\n. maybe it is a small database\n. I've tried the @rodrigoprimo branch on a big database (2gb) and it took 10 min without the patch and 9:30 with the patch, and I think the difference was mostly a fluctuation as I only ran the test once. I still think that there is something wrong on the patch, on theory a more coarse transactions should speed things up.\n. A colleague of mine explained to me that wordpress serialises some structures to mysql and its format has the string size in it so we can't just let mysql change it.\nWhat we can do is special casing wp_posts (which doesn't have serialised data right?) to directly change its data, and maybe some fields in wp_post_meta and other tables. Another optimisation would be to see if both strings have the same size so it can change it without being worried about serialised sizes.\nThat would be enough for our big wordpress installations (in the order of 10gb db), but if someone has a really huge database that need even more speed it can just write a sql procedure that understands php/wp serialisation.\n. Perfect, it is exactly what I want to do :), will try it wednesday night, let's see what I can do.\n. Can someone test this on some databases and see if performance is up? For a database that was taking hours for us with this patch it takes 7 minutes. This combined with the begin/end transaction is a huge speed up.\nIt is supposed to support multisite installations too.\n. Any idea on what to test? The regular behave tests already stress this.\n. With serialized contents in wp_posts/comments this would fail for sure... One thing I could do is first search for some token of php serialization on the column and then do a fast or slow replacement... I will try to do it later, first I need to understand how php serialization works.\n. reading here just searching for LIKE s:%:\"%\"; should be enough to catch columns which have serialized strings.\n. Any chance you can post the results of the search-replace? at least with your numbers maybe we can look at any tables that are not posts and comments\n. maybe docs should be updated, I really got the impression that the command would fail on a multisite without --network, how do I choose which site to operate on?\n. nice man. I will take a look also :+1: \n. any numbers on the impact of checking for serialised data first? If it is too big letting people white list some tables might be preferable.\n. Great! @danielbachhuber can it be merged now?\n. bailing on any serialized data is what seems right... I also think the algorithm should be dumb, but I really never used s-r for anything other than changing url's.\n. I saw you wanted to use composer, but both composer being alpha and commands being relatively simple, wouldn't it be better to start with git clone and the move to composer if someone do the patch for it?\n. ",
    "TheLastCicada": "My --output-document trick seemed to work on 1 server, but didn't work on another.  Not sure what is going on with that, but note my proposed work-around might be crap.\n. Confirmed curl method works - also I get the same as you on Ubuntu with wget, so it does seem CentOS specific.  Which is pretty annoying.  \nI'd like to see a note in the download instructions on wp-cli.org to use curl -L [download link] > wp-cli.phar for CentOS.  I use wget all the time like this and haven't seen this happen, so it wouldn't be an obvious thing for CentOS users to recognize.  Plus, since I'm always using wget, my knowledge of curl flags suck, so that little bit of info would be a big improvement in user-friendliness for those in my boat.\n. Thanks!\n. I would be interested in a fix that excluded the posts table and comments table from the serialized  check and just did a simple mysql find/replace.  Neither of these tables should have serialized data (at least I haven't seen any time where serialized data was stored in these tables) and are usually the 2 tables which will cause a search-replace to be slow.  We have this problem on a 2+ GB database with just a ton of posts and revisions.  I've monitored it and probably 98% of the time is spent in the posts table.\n. Testing this today and it is indeed improving performance.  On a database with almost 700,000 rows in the wp_posts table, the search-replace took about 20 minutes vs 12 hours on https://github.com/Varying-Vagrant-Vagrants/VVV\nI'm going to run through more rigorous tests today and post my progress here.\n. Check out the code in pull request #1261 - worked on this with @lkwdwrd over the weekend and we took the basic idea here and added a check for serialized data on every field.  If no serialized data is found, we do just a regular MySQL search and replace.  This way it is safe even if you are an edge case and using serialized data in posts.  I need to do some work on the Behat tests before we can merge this and I'd love it if you could test it as well.\n. I see where some of these are failing the tests - I can work on cleaning that up.  Wednesday probably the earliest I can work on it.\n. Ran the test on my huge database that takes 8 to 12 hours to do a wp search-replace on with the current implementation.  With the fast-s-r changes, it took about 20 minutes.  Tried a variety of different solutions, including white listing tables, and found the check for serialized data does not add significantly to the amount of time this process takes.  I wasn't able to get less than 16 minutes in any tests, so 20 minutes is pretty close.  Since this is so much safer and has the least complexity from the user perspective, I'd advocate for this being the way to go.\n. I've been having this same problem with wp import on vipquickstart when importing VIP sites.  Same symptoms - as it runs, memory usage grows uncontrollably until it hits PHP's memory limit, and then the process crashes.\n. @danielbachhuber that's how we've been making it work, but is it expected behavior that a wp-cli import needs over 1GB of RAM?  My experience with this has been that on some imports, we need to set the WP_MAX_MEMORY_LIMIT to 2GB to get it to import, and even then it seems like we just got lucky and it imported before it hit the memory limit.  Is this how I should expect the importer to work?  Seems like an awful lot of RAM to need for this, especially when WordPress itself will run on almost nothing.\n. Ah I was afraid of that.  If there's a more efficient way wp-cli can interact with the importer to limit the memory footprint, that would be a tremendous improvement to my quality of life right now :)\n. Looking forward to these improvements!\n. I use Nginx on many many sites and have never had a problem updating WordPress with wp-cli.  'wp core update' works fine.  Have never had any issue with any wp-cli command and Nginx compatibility.\n. If you have any further details I can provide a more focused answer.  Seems like a specific configuration issue to me.\n. I'm having this same issue with wp-cli version 1.0.0.  Running wp core update-db --network returns that all sites are already at the latest db version.  Here is the output of that command, anonymized a bit to protect site names:\nwp --allow-root core update-db --network\nWordPress database already at latest db version 38590 on example.com/\nWordPress database already at latest db version 38590 on internal.example.com/\nWordPress database already at latest db version 38590 on internal.example.com/projects/\nWordPress database already at latest db version 38590 on jobs.example.com/\nWordPress database already at latest db version 38590 on internal.example.com/sys/\nWordPress database already at latest db version 38590 on internal.example.com/bot/\nWordPress database already at latest db version 38590 on internal.example.com/luci/\nWordPress database already at latest db version 38590 on internal.example.com/docs/\nWordPress database already at latest db version 38590 on internal.example.com/fff/\nWordPress database already at latest db version 38590 on internal.example.com/pm/\nWordPress database already at latest db version 38590 on internal.example.com/proj/\nWordPress database already at latest db version 38590 on internal.example.com/ux/\nWordPress database already at latest db version 38590 on internal.example.com/design/\nWordPress database already at latest db version 38590 on internal.example.com/accounts/\nWordPress database already at latest db version 38590 on internal.example.com/plugins/\nSuccess: WordPress database upgraded on 15/15 sites.\nYet in wp-admin, I still see this banner:\n\nI chatted with @jeremyfelt and determined that this was due to the mult-network setup on here and the db version not being updated in sitemeta for one of the networks.  I would say this is a bug in wp-cli, but the support for multi-network in core is also spotty, and so few people are using a multinetwork setup, I think it is hard to justify spending much time addressing this.  So I'm just going to leave this comment here to document that update-db does not work 100% as expected on a multi-network install.  . New issue https://github.com/wp-cli/wp-cli/issues/3657. Here is the wp_blogs table.  Notice the 2 sites on site_id 1 and the rest on site_id 2.\n+---------+---------+-------------------+---------------------+\n| blog_id | site_id | domain            | path                |\n+---------+---------+-------------------+---------------------+\n|       1 |       1 | example.com          | /                   |\n|       2 |       2 | internal.example.com | /                   |\n|       3 |       2 | internal.example.com | /projects/          |\n|       4 |       1 | jobs.example.com     | /                   |\n|       5 |       2 | internal.example.com | /sys/               |\n|       6 |       2 | internal.example.com | /bot/               |\n|       7 |       2 | internal.example.com | /luci/              |\n|       8 |       2 | internal.example.com | /docs/              |\n|       9 |       2 | internal.example.com | /fff/               |\n|      10 |       2 | internal.example.com | /pm/                |\n|      12 |       2 | internal.example.com | /proj/              |\n|      14 |       2 | internal.example.com | /ux/                |\n|      15 |       2 | internal.example.com | /design/            |\n|      16 |       2 | internal.example.com | /accounts/          |\n|      17 |       2 | internal.example.com | /plugins/           |\n+---------+---------+-------------------+---------------------+\nHere is the wp_site table:\n+----+----------------------+------+\n| id | domain               | path |\n+----+----------------------+------+\n|  1 | example.com          | /    |\n|  2 | internal.example.com | /    |\n+----+----------------------+------+\nYou can see the issue by looking at wpmu_upgrade_site in the wp_sitemeta table:\n+---------+---------+-------------------+------------+\n| meta_id | site_id | meta_key          | meta_value |\n+---------+---------+-------------------+------------+\n|      11 |       1 | wpmu_upgrade_site | 38590      |\n|      48 |       2 | wpmu_upgrade_site | 37965      |\n+---------+---------+-------------------+------------+\nThe current db value is 38590, which both should be after running wp core update-db --network.  You can see only site_id 1 actually got the wpmu_upgrade_site value updated.  I think the actual database update itself happened, but it just didn't tick over the counter.  \nLet me know if there any more info I can get you on this.  . ",
    "aaroneaton": "I'd like to add that when using --force, sudo seems to be required even when I've set directory permissions to 777. I otherwise get the following error, repeated for every file in WP:\nPHP Warning:  copy(//wp-includes/class-phpmailer.php): failed to open stream: Permission denied in phar:///usr/bin/wp/php/commands/core.php on line 110\nMost importantly, the files do not exist after a 'successful' download. It's as if WP was downloaded to a different location.\nI have removed all traces of wp-cli and reinstalled with the instructions from the wp-cli website.\nwp-cli works as it should on existing installs on the same server.\nOn Ubuntu Server 13.10\n. I would just get the 'No wp-config.php found' error since the file doesn't actually exist.\nI ran a find for wp-config-sample.php to see where that file exists and only got existing, working WP install locations.\nI am able to download using the --path flag and everything works normally after that. wp eval 'WP_CLI::line(ABSPATH);' shows the correct path once WP has been installed.\n. ",
    "mannieschumpert": "I'm still having this issue with the latest version. \nI really have nothing else to add as the symptoms are the same as Aaron's. wp eval 'WP_CLI::line(ABSPATH);' shows the outer WP install.\n. Well, of course I checked the version before stating I had the latest. But perhaps the 'alpha' part is significant.\n\n. Thanks for the follow-up, @scribu.\n. I still can't get post_category to work, using the syntax indicated in the commit linked above. It won't work with a single ID or with multiples separated by commas.\nWith the stable release I get the \"Warning: array_filter() expects parameter 1 to be array, string given\" error.\nWith the nightly, I don't get the error, but the categories still are not applied to the post.\n. Arg, I'm an idiot. I was using the wrong term slug.\nDisregard. All is well.\n. ",
    "BjornW": "No, I think the --force flag would be better because overwriting existing configurations or installations is quite a destructive thing to do. By forcing the user of wp-cli to add the --force flag to these operations she has been made aware that what she wants is not the usual behaviour and the potential result may cause issues (such as losing the current installation). I'd not change the exit status due to this and people relying on the current behaviour. \n. Ok, that would not solve my issue since I do not get the same results as the first time e.g. a freshly installed WordPress. \n. What happens if there is no wp-config.php file or when there is no db to reset? If it will continue without issues (exit status 0) it could be a perfect way to implement a --force flag. I'll have to think about a bit more. \n. Ok, I'll test it out and see if it works. Thanks for your help!\n. Thanks\n. Sure, I'm not using different table prefixes, because both installs should use the same database. It looks similar to this: \n\n   loadbalancer\n      |   |              \n  wpmu1  wpmu2\n        |\n     database   \n      storage\n\nSo wpmu1 and wpmu2 are both Nginx webservers running a WordPress Network installation which is using 1 database and a shared nfs storage. This makes it easy have some downtime on wpmu1 while wpmu2 continues for instance.\nThe command which is run from within Ansible is: \nwp core multisite-install --url={{wordpress_url}} --title=\"{{wordpress_title}}\" --admin_user={{wordpress_admin_user_name}} --admin_password={{wordpress_admin_password}} --admin_email={{wordpress_admin_email}} chdir={{wordpress_install_path}} --allow-root\n. I need to run it per server so that the wp-config.php is changed. I've created a workaround in Ansible, where I check if the sitemeta table already exists and if it does I just add the required multisite constants to the wp-config.php file myself. It would be nice if running the wpcli multiple times would change the wp-config.php if it has not been changed yet, but the database indicates it should be a multisite installation. If that makes sense?\n. Ok, I presumed my usecase was a bit far-fetched for the general usage of wpcli. Nonetheless thanks for considering.\n. ",
    "salbanese": "wp core version works.\neven starting fresh I can do wp core download and wp core config but after that most things result in a segmentation fault. \n. Just stepping through the source, it seems it fails when trying to load wp-config.php\nIt loads just fine, but the eval call eval( WP_CLI::get_runner()->get_wp_config_code() ); blows up.\nif I essentially copy and past the output of WP_CLI::get_runner()->get_wp_config_code() in place of that eval and run php ../wp-cli/php/boot-fs.php directly it works great.\n. yea, doesn't make sense to me either but it fixes the issue.\nstill trying to figure out why.\nI can clearly replicate the issue outside of wp-cli.\nthis causes a segmentation fault:\neval( preg_replace( '/\\s/', '', 'print(\"foo bar\");'));\nthis does not:\n$a = preg_replace( '/\\s/', '', 'print(\"foo bar\");');\neval($a);\n. Uninstalling xdebug also fixes the issue. Lots of mentions of eval causing segfaults with xdebug around, but nothing specific to what I'm seeing yet. \nEither way, it's clearly not an issue with wp-cli. should I close this request?\njust for reference\nhttps://bugs.launchpad.net/ubuntu/+source/xdebug/+bug/578819\n. ",
    "spacetrack": "... thank you very much for adding the \"--skip-plugins\"-feature! :-)\nWhile this was my first github fork, I wonder what to do next with my fork: I simply could delete it?\n. ... even better ... thank you! :-)\n. ",
    "Twanneman": "Which user should be used when using wp cli? Should I create one ? Or use an already created user? \nI'm just getting started using WP CLI and Ubuntu so I'm not sure which user I should use. I'm running  ubuntu 14.04 LTS and I've got the following users:\ndaemon\nbin\nsys\nsync\ngames\nman\nlp\nmail\nnews\nuucp\nproxy\nwww-data\nbackup\nlist\nirc\ngnats\nnobody\nlibuuid\nsyslog\nmessagebus\nsshd\navahi\nmysql\nCould anyone advise or point me in the right direction? \nKind regards :)\n. ",
    "bartaakos": "The spaces got replaced with tabs and I introduced the get_download_url() function which is used both is download() and update()\n. ",
    "johannesjo": "@scribu Sorry, should have mentioned that I'm trying to install acf for this error. Thanks for the link. I will check this out.\n. I used the wrong plugin-name in the end. Not sure though what fixed the error for the correct requests before. Thanks everybody! \n. Just wanted to confirm, that this happening for me as well on Ubuntu.\n. Its a duplicate of #1189 \n. ",
    "enricodeleo": "Thank you for your reply.\nOf course I understand the intention and your method is absolutely correct when you deal with an 'import'. \nIn this case I am using this feature kinda improperly, 'cause what I mean to do is actually a migration.\nThe WP world is quite poor when you come to user management (and all the connected operations). \nI also bought a plugin to do so but it is very slow and poor of settings, other plugins out there are old or without support for password either. \nWP-CLI allowed me to do the process in a fast and convenient way (something like wp user list etc > users.csv) so absolutely thumb up for wp-cli. Even the import process was fast and consistent, but still, I would appreciated a --no-pass-encode option that would have turn in a 2-steps job for me.\nAt the moment, I solved by importing the csv with wp user import, then I exported the user table from phpmyadmin, switched the user_pass column with that of the original csv, and finally reimported in phpmyadmin with overriding allowed.\nIn my previous wp installation I had more than a thousend users and I couldn't lose basic user informations, on other hand I wanted to get rid of a lot of attributes I don' t need anymore. Doing so I managed to maintain my users but \"cleaned\" from any non-default stuffs...\n. I agree. Even if one day I'm sure we'll have some tools like those you can find in other cms (eg that one that begins with d and ends with rupal :)).\nI'll try to accomodate time enough for this feature (from time to time a giveback to the community is absolutely a must!).\nThank you for this nice discussion and for the time you kindly gave me.\n. ",
    "heyfletch": "@TheLastCicada and @jeremyfelt - I was just about to do a pull request with the --allow-root addition! I've already added it to my site setup script, which I forked off this: https://github.com/simonwheatley/vvv-demo-1.  Will do a pull request there shortly. \n. ",
    "raptor235": "sidekick/sidekick.php\nsidekick/sidekick_Local.php\nsidekick/sidekick_Qa.php\nWe have each separated as different plugin names which works fine in WP but for some reason CLI lists each one as the same plugin name or maybe it just gets the name for the directory?\n. It's a dev version of a plugin that's why there are 3 versions but not being able to activate a plugin by the actual name is preventing me from activating the specific plugin \n. Hey scribu, thanks for the help but the last point isn't working\ndrwxr-xr-x 7 sidekick sidekick  4096 Jan 28 18:16 .\ndrwxr-xr-x 8 sidekick sidekick  4096 Jan 28 18:16 ..\ndrwxr-xr-x 2 sidekick sidekick  4096 Jan 28 18:16 build\ndrwxr-xr-x 2 sidekick sidekick  4096 Jan 28 18:16 css\ndrwxr-xr-x 3 sidekick sidekick  4096 Jan 28 18:16 dist\ndrwxr-xr-x 2 sidekick sidekick  4096 Jan 28 18:16 images\ndrwxr-xr-x 5 sidekick sidekick  4096 Jan 28 18:16 js\n-rw-r--r-- 1 sidekick sidekick  7657 Jan 28 18:16 readme.txt\n-rw-r--r-- 1 sidekick sidekick  4576 Jan 28 18:16 sidekick_Dev.php\n-rw-r--r-- 1 sidekick sidekick 18758 Jan 28 18:16 sidekick_embed.php\n-rw-r--r-- 1 sidekick sidekick  8080 Jan 28 18:16 sidekick_Local.php\n-rw-r--r-- 1 sidekick sidekick 18532 Jan 28 18:16 sidekick.php\n-rw-r--r-- 1 sidekick sidekick 18780 Jan 28 18:16 sidekick_Qa.php\n-rw-r--r-- 1 sidekick sidekick   837 Jan 28 18:16 sk_init.php\nsidekick@server:[~/www/qa/3.8.1]: wp plugin activate sidekick/sidekick_Qa.php\nWarning: The 'sidekick/sidekick_Qa.php' plugin could not be found.\nsidekick@server:[~/www/qa/3.8.1]: \n. ugh nevermind... if I strip .php it works! thanks!\n. @danielbachhuber this was stored in the options table I belive, we also tried putting it in excerpt in wp_posts just to run as a test and the serialized object wasn't replaced but a plain string was. \nWhen you guys loop over tables and columns do you look for serialized data in every column and row or is it on specific columns?\n. Sorry Mario, I'm hijacking your thread, here is some info\nBefore Upgrade\nhttps://www.dropbox.com/s/ld6lybjexbo8yfb/Screenshot%202016-02-25%2008.50.10.png?dl=0\n1 update\nhttps://www.dropbox.com/s/rhte7rbh22cb28y/Screenshot%202016-02-25%2008.50.36.png?dl=0\nResult\nhttps://www.dropbox.com/s/stx8ed5p0twwvn4/Screenshot%202016-02-25%2008.50.48.png?dl=0\n. Test #2 on options table\nhttps://www.dropbox.com/s/drgfxxykbs049zj/Screenshot%202016-02-25%2008.52.07.png?dl=0\n1 Update \nhttps://www.dropbox.com/s/bmz2cvspe67zxv9/Screenshot%202016-02-25%2008.52.23.png?dl=0\nhttps://www.dropbox.com/s/ngksh6sti9y53qu/Screenshot%202016-02-25%2008.52.37.png?dl=0\nvagrant@hgv:/hgv_data/sites/sob_tabletal$ wp search-replace '/uploads/sites/5' '/uploads' --skip-columns=guid --recurse-objects --precise --verbose\nChecking: wp_commentmeta.meta_key\n0 rows affected using PHP (in 0.003s)\nChecking: wp_commentmeta.meta_value\n0 rows affected using PHP (in 0.006s)\nChecking: wp_comments.comment_author\n0 rows affected using PHP (in 0.005s)\nChecking: wp_comments.comment_author_email\n0 rows affected using PHP (in 0.004s)\nChecking: wp_comments.comment_author_url\n0 rows affected using PHP (in 0.007s)\nChecking: wp_comments.comment_author_IP\n0 rows affected using PHP (in 0.003s)\nChecking: wp_comments.comment_content\n0 rows affected using PHP (in 0.026s)\nChecking: wp_comments.comment_approved\n0 rows affected using PHP (in 0.002s)\nChecking: wp_comments.comment_agent\n0 rows affected using PHP (in 0.007s)\nChecking: wp_comments.comment_type\n0 rows affected using PHP (in 0.003s)\nChecking: wp_links.link_url\n0 rows affected using PHP (in 0.001s)\nChecking: wp_links.link_name\n0 rows affected using PHP (in 0s)\nChecking: wp_links.link_image\n0 rows affected using PHP (in 0s)\nChecking: wp_links.link_target\n0 rows affected using PHP (in 0s)\nChecking: wp_links.link_description\n0 rows affected using PHP (in 0s)\nChecking: wp_links.link_visible\n0 rows affected using PHP (in 0s)\nChecking: wp_links.link_rel\n0 rows affected using PHP (in 0s)\nChecking: wp_links.link_notes\n0 rows affected using PHP (in 0.001s)\nChecking: wp_links.link_rss\n0 rows affected using PHP (in 0.001s)\nChecking: wp_options.option_name\n0 rows affected using PHP (in 0.001s)\nChecking: wp_options.option_value\n1 rows affected using PHP (in 0.009s)\nChecking: wp_options.autoload\n0 rows affected using PHP (in 0s)\nChecking: wp_postmeta.meta_key\n0 rows affected using PHP (in 0.005s)\nChecking: wp_postmeta.meta_value\n0 rows affected using PHP (in 0.018s)\nChecking: wp_posts.post_content\n0 rows affected using PHP (in 0.007s)\nChecking: wp_posts.post_title\n0 rows affected using PHP (in 0.002s)\nChecking: wp_posts.post_excerpt\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.post_status\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.comment_status\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.ping_status\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.post_password\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.post_name\n0 rows affected using PHP (in 0.002s)\nChecking: wp_posts.to_ping\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.pinged\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.post_content_filtered\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.post_type\n0 rows affected using PHP (in 0.001s)\nChecking: wp_posts.post_mime_type\n0 rows affected using PHP (in 0.001s)\nChecking: wp_term_taxonomy.taxonomy\n0 rows affected using PHP (in 0.001s)\nChecking: wp_term_taxonomy.description\n0 rows affected using PHP (in 0.001s)\nChecking: wp_terms.name\n0 rows affected using PHP (in 0.001s)\nChecking: wp_terms.slug\n0 rows affected using PHP (in 0.001s)\nChecking: wp_usermeta.meta_key\n0 rows affected using PHP (in 0s)\nChecking: wp_usermeta.meta_value\n0 rows affected using PHP (in 0.001s)\nChecking: wp_users.user_login\n0 rows affected using PHP (in 0s)\nChecking: wp_users.user_nicename\n0 rows affected using PHP (in 0s)\nChecking: wp_users.user_email\n0 rows affected using PHP (in 0s)\nChecking: wp_users.user_url\n0 rows affected using PHP (in 0s)\nChecking: wp_users.user_activation_key\n0 rows affected using PHP (in 0s)\nChecking: wp_users.display_name\n0 rows affected using PHP (in 0s)\n+------------------+-----------------------+--------------+------+\n| Table            | Column                | Replacements | Type |\n+------------------+-----------------------+--------------+------+\n| wp_commentmeta   | meta_key              | 0            | PHP  |\n| wp_commentmeta   | meta_value            | 0            | PHP  |\n| wp_comments      | comment_author        | 0            | PHP  |\n| wp_comments      | comment_author_email  | 0            | PHP  |\n| wp_comments      | comment_author_url    | 0            | PHP  |\n| wp_comments      | comment_author_IP     | 0            | PHP  |\n| wp_comments      | comment_content       | 0            | PHP  |\n| wp_comments      | comment_approved      | 0            | PHP  |\n| wp_comments      | comment_agent         | 0            | PHP  |\n| wp_comments      | comment_type          | 0            | PHP  |\n| wp_links         | link_url              | 0            | PHP  |\n| wp_links         | link_name             | 0            | PHP  |\n| wp_links         | link_image            | 0            | PHP  |\n| wp_links         | link_target           | 0            | PHP  |\n| wp_links         | link_description      | 0            | PHP  |\n| wp_links         | link_visible          | 0            | PHP  |\n| wp_links         | link_rel              | 0            | PHP  |\n| wp_links         | link_notes            | 0            | PHP  |\n| wp_links         | link_rss              | 0            | PHP  |\n| wp_options       | option_name           | 0            | PHP  |\n| wp_options       | option_value          | 1            | PHP  |\n| wp_options       | autoload              | 0            | PHP  |\n| wp_postmeta      | meta_key              | 0            | PHP  |\n| wp_postmeta      | meta_value            | 0            | PHP  |\n| wp_posts         | post_content          | 0            | PHP  |\n| wp_posts         | post_title            | 0            | PHP  |\n| wp_posts         | post_excerpt          | 0            | PHP  |\n| wp_posts         | post_status           | 0            | PHP  |\n| wp_posts         | comment_status        | 0            | PHP  |\n| wp_posts         | ping_status           | 0            | PHP  |\n| wp_posts         | post_password         | 0            | PHP  |\n| wp_posts         | post_name             | 0            | PHP  |\n| wp_posts         | to_ping               | 0            | PHP  |\n| wp_posts         | pinged                | 0            | PHP  |\n| wp_posts         | post_content_filtered | 0            | PHP  |\n| wp_posts         | post_type             | 0            | PHP  |\n| wp_posts         | post_mime_type        | 0            | PHP  |\n| wp_term_taxonomy | taxonomy              | 0            | PHP  |\n| wp_term_taxonomy | description           | 0            | PHP  |\n| wp_terms         | name                  | 0            | PHP  |\n| wp_terms         | slug                  | 0            | PHP  |\n| wp_usermeta      | meta_key              | 0            | PHP  |\n| wp_usermeta      | meta_value            | 0            | PHP  |\n| wp_users         | user_login            | 0            | PHP  |\n| wp_users         | user_nicename         | 0            | PHP  |\n| wp_users         | user_email            | 0            | PHP  |\n| wp_users         | user_url              | 0            | PHP  |\n| wp_users         | user_activation_key   | 0            | PHP  |\n| wp_users         | display_name          | 0            | PHP  |\n+------------------+-----------------------+--------------+------+\nSuccess: Made 1 replacements.\n. Yes, did you need anything else?\n. Well as I mentioned wp-cli won't execute any commands when my.cfn has user or password information in it... I was just getting access denied... is that expected behaviour? \n. Sure that makes sense... but the user that was specified in my.cfn file is\nthe same user I'm using in wp-config... the user is confirmed working from\ndirect mysql command line login and from a remote server.\nHowever when the same user is specified via my.cfn WP-CLI gets access\ndenied... that's what's actually not working.\nOn Thu, Aug 18, 2016 at 6:26 PM, Daniel Bachhuber notifications@github.com\nwrote:\n\nWP-CLI uses the mysql binary under the hood in some cases #1324\nhttps://github.com/wp-cli/wp-cli/issues/1324\nFor commands that call the mysql binary, I think it'd make sense that\nmy.cfn is used, no?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3322#issuecomment-240875889, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AATJ4VpkIuflnSegQk3DqQH0ModdLX2Fks5qhNwGgaJpZM4Jn8XJ\n.\n\n\n\nBart Dabek\n\nCo-Founder & CTO of FlowPress Inc.  | Sidekick.pro | WPUniversity.com\n647.588.6285  |  bart@flowpress.ca  |  @bartdabek\n. I was running the wp db import command kept getting\nERROR 1045 (28000): Access denied for user 'root'@'localhost' (using\npassword: NO)\nOn Thu, Aug 18, 2016 at 6:32 PM, Daniel Bachhuber notifications@github.com\nwrote:\n\nHowever when the same user is specified via my.cfn WP-CLI gets access\ndenied... that's what's actually not working.\nOk. What's the bug in WP-CLI then?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3322#issuecomment-240877106, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AATJ4RqddfwqBduOz3Xom4lgixa1Wrm3ks5qhN2AgaJpZM4Jn8XJ\n.\n\n\n. Ok...\nStep #1 create my.cfn\nStep #2 - add user = root\nStep #3 - add password = root\ntry to run any wp-cli command and it will fail... \nI'm not sure how much clearer I can be... the user is valid but when the same user is within my.cfn it breaks wp-cli... in my eyes that's a bug...\n. Would be nice to get a sample code on how to do this... @tedmasterweb did you figure it out by any chance?\n. Very strange... so I've added a bunch of test dumps into wp_version_check() \nWhen I dump out all the $offers back from the server I get 4.7.9 included as one of the offers yet WP CLI is reporting that the install is up to date... \nYou can see that 4.7.8 is picked up from versions.php and the server responds as it should\nhttp://www.flowpress.com/screenshots/screenshot_2018-01-22_at_1.41.40PM.png\nWhen I run the wp cli command with the debug dumps I can see 4.7.9 included as well but the message results in update not being required\nhttp://www.flowpress.com/screenshots/screenshot_2018-01-22_at_1.42.29PM.png\nGoing to keep digging.. Just to give some background here...the DB is running 4.7.9 but the files aren't. We run the production site on WP Engine who automatically upgraded the build. But our git repo is behind... so we're trying to run an automatic update but cli is saying it's up to date when in reality the file system isn't.. @gitlost is it possible for you to run a test where you run the update... then revert the entire file structure and leave db in tact... see what WP CLI responds with at that point?. By the way when I log into the install WP is reporting the correct number\nhttp://www.flowpress.com/screenshots/screenshot_2018-01-22_at_1.49.22PM.png. ",
    "garex": "\nBut defining it only on plugin activation is an interesting suggestion.\n\n@scribu so what prevents us from doing this?\n. > Defining WP_ADMIN generally for WP-CLI causes more problems than it solves.\nNobody talks to define it globally.\nIt could be defined only for plugin activation/upgrade.\nSee original comment by @scribu  https://github.com/wp-cli/wp-cli/issues/984#issuecomment-33698510\nDo you know any issues when defined WP_ADMIN breaks something in WP CLI during plugin activation?\nIn WordPress it's defined because those operations are processed by admin and through wp-admin area.\n. >  I don't think it's worth the effort to conditionally define it in the case of wp plugin activate.\nThen this tool becomes incompatible with it's purpose:\n\nYou can update plugins, configure multisite installs and much more, without using a web browser.\n\nYou can't actually install/update plugins that depends on is_admin() internally. You should state that in README then and also provide ugly workaround with --require=/tmp/enable-admin.php  in docs for those who want to have trully compatible tool.\n. ",
    "jchatard": "Oh oh, that's awesome!\nThanks!\n. ",
    "jackmcconnell": "Thanks for the quick reply. \nLine 6 is just the beginning of the HTML file. \n```\nhtml\n\n\n\n\n```\n. That's odd.\n\nI'm writing this in the terminal: \ncurl -L https://github.com/wp-cli/wp-cli/releases > wp-cli.phar\nphp wp-cli.phar --info\nThe second command shows HTML output though. \n. Not sure what I was doing wrong but I downloaded it manually and then it worked. \nMust have been picking up the wrong file. \nWorking with MAMP's PHP now too. \nThanks for your help. \n. Doh. Oddly, last night it was working fine and I was using the same URL.\nThanks for your help in getting me back on track - it's a real timesaver.\n. I'm very interested in seeing this feature - when implemented do we need to update wp cli in anyway?\n. Brill, thanks. Is there any easy way to be alerted of new updates that are in master? \n. I see generating .pot files was added in 0.19.0 but I don't understand how to generate them. \nCan you help by telling me what WP-CLI command to use? \n. Ok, thanks. I'll take a look.\n. Sure: \nPHP binary: /Applications/MAMP/bin/php/php5.5.10/bin/php\nPHP version:    5.5.10\nphp.ini used:   /Applications/MAMP/bin/php/php5.5.10/conf/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.14.1\n. Ah ha! \nThat helped. \nIt stated it was in usr/bin/wp which was dated March of this year. \nOnce I deleted that and did which wp again, it showed as being in usr/local/bin/wp and the correct version. \nThanks for your help!\n. This also worked for me after I updated to Max OS X El Capitan.\n. Ok it seems this is because I am running my script to build a site using sudo however, if I don't it won't create the folders with the correct privileges in order to create directories, etc. I've tried adding the following but it's not setting the permissions for the folder correctly but nothing's working: \nsudo mkdir Build\nsudo wp core download --allow-root\nsudo wp core config [...] --allow-root\n. Ok, it turns out that for some reason, it wasn't creating the Build folder with the correct permissions. \nI had to use chown to set me to the owner and then everything fell into place. \nThanks for your help. \n. Nope, still not right. It looks like when WordPress is installing, even though I now have full permission and ownership of the 'Build' folder, it's not completing the installation.\nThe uploads folder is missing. \n. Sorry, but that's not correct, WordPress creates an uploads and updates folder inside of wp-content on install. If it doesn't, it shows an error in the dashboard that there isn't permission and that imports and uploads aren't possible. \nThey're now being created (although i'm not sure how I fixed it). \n. Ok, thanks. \n. I'm also getting this on Mac OS X 10.11.3 using WP-CLI 0.22.0.\nWhilst in a WordPress installation root directory, using the command wp plugin delete hello from the terminal don'ts result in the hello.php file being deleted. wp plugin uninstall hello also has the same issue. \nNo errors or messages are outputted and --debug doesn't reveal anything. \nIf you use the  --deactivate flag on the uninstall command, it does say: \nWarning: Plugin 'hello' isn't active. but that's it. \n. Brill, got it working. Thanks!\n. I can confirm that the plugin exists because I haven't deleted it out of a standard installation yet. \nNot suppressing errors, no. Using --debug shows some info prior to this command but nothing after.\nDoes either of these commands require that the plugin has been previously installed and/or activated in order to uninstall or delete? I imagine the WordPress installation process just dumps the plugin files/folders there which will allow them to display in the Plugins screen when in the WP Admin. \n. As the same thing is happening with Akismet, I tried using wp plugin uninstall akismet but I get no output at all.\n. In further testing, it does seem to be my 'hardening' that is causing the problem. Not sure why but it works before I do it and not after.\nInterestingly, I also noticed that hello.php is distributed with WordPress but if deleted and then re-installed from the plugin repo, it's a different version - it's a folder with files in called 'hello-dolly' as opposed to a single file called 'hello.php'. This caused some confusion for a while. \nI have also noticed that if you don't deactivate a plugin before uninstalling, it seems to think it's still activated so when you try and re-install it, it thinks it's already installed. Not sure if this is an issue with WordPress or WP-CLI. Can you clarify? \n. ",
    "tchwpkgorg": "Here it is:\n``` php\n<?php\n/\n * The base configurations of the WordPress.\n \n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information\n * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n \n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to \"wp-config.php\" and fill in the values.\n \n * @package WordPress\n /\n//  MySQL settings - You can get this info from your web host  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', 'AAAAAAAAA');\n/* MySQL database username /\ndefine('DB_USER', 'BBBBBBBB');\n/* MySQL database password /\ndefine('DB_PASSWORD', 'CCCCCCCC');\n/* MySQL hostname /\ndefine('DB_HOST', 'localhost');\n/* Database Charset to use in creating database tables. /\ndefine('DB_CHARSET', 'utf8');\n/* The Database Collate type. Don't change this if in doubt. /\ndefine('DB_COLLATE', '');\n/#@+\n * Authentication Unique Keys and Salts.\n \n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n \n * @since 2.6.0\n /\ndefine('AUTH_KEY',         '[#bTGX&v:qry7L~T.H-?B!|G_z;Axr ss6]Lzu=-Kew=6i[nC4kx{1pBi!6m]9');\ndefine('SECURE_AUTH_KEY',  '3N-1l9Z-WmN;i1/a$}');\ndefine('LOGGED_IN_KEY',    'gQmNOBek[|;Mk#$=V|jnuCRo3dqT3Zl-t%6|$mO$y<^&H-C|iG^1~]RCIvB2 Ko@');\ndefine('NONCE_KEY',        '#qJtU)4l%h1H-<{DW+11f=rIG3eCI?G~N,9b-I?Ugv(;japXO@ZEBQj Bh{t5=');\ndefine('AUTH_SALT',        'w]|&WR+xt>Boz)!@enyB_M+4_<scJ?:fh%uv>urs2qq5wMPbaFV6GOVlV1!8^0hq');\ndefine('SECURE_AUTH_SALT', 'T:FUln~u1D=VT}Vote;~x<NVV/}KY8, R:Nrf]b=#<(|5o=>#3HEYnu@?)f}+Ls;');\ndefine('LOGGED_IN_SALT',   'lU:F?hZu6_/{tQDi@*1z%pL_LbI]52dfu=8|n(Ij[6[ i)#Z}{?MV&Hk^');\ndefine('NONCE_SALT',       'P#]|s*H[mfbHj~<p^@h^P|aVNt nvh#(GL8d7[Q[~,5yO$c23)^(w:[@Lr!V]L%');\n/*#@-/\n/\n * WordPress Database Table prefix.\n \n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n /\n$table_prefix  = 'wp_';\n/\n * WordPress Localized Language, defaults to English.\n \n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n /\ndefine('WPLANG', '');\n/\n * For developers: WordPress debugging mode.\n \n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n /\ndefine('WP_DEBUG', false);\n/ That's all, stop editing! Happy blogging. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n        define('ABSPATH', dirname(FILE) . '/');\n/* Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\n```\nPlease note that identical file, but with only the following options hand-edited (so it uses credentials for a different wordpress, where wp-cli has no problems) just works:\n```\ndefine('DB_NAME', 'AAAAAAAAA');\n/* MySQL database username /\ndefine('DB_USER', 'BBBBBBBB');\n/* MySQL database password /\ndefine('DB_PASSWORD', 'CCCCCCCC');\n```\n. $ wp --info\nPHP binary:\nPHP version:    5.3.3-7+squeeze18\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.13.0\n$ wp core version\n3.8.1\n$ wp --skip-plugins plugin status\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\n$ wp --url=www.ptraveler.com plugin status\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\n. $ php wp-cli.phar --info\nPHP binary:\nPHP version:    5.3.3-7+squeeze18\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.14.0-beta\n$ php wp-cli.phar\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\n$ php wp-cli.phar --skip-plugins\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\n$ php wp-cli.phar --url=www.ptraveler.com plugin status\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:18) in /srv/www/site/htdocs/wp-includes/load.php on line 32\n. I guess that doesn't bring anything new?\n```\n0  require() called at [phar:///srv/www/site/htdocs/wp-cli.phar/php/wp-settings-cli.php:16]\n1  require(phar:///srv/www/site/htdocs/wp-cli.phar/php/wp-settings-cli.php) called at [phar:///srv/www/site/htdocs/wp-cli.phar/php/wp-cli.php:26]\n2  include(phar:///srv/www/site/htdocs/wp-cli.phar/php/wp-cli.php) called at [phar:///srv/www/site/htdocs/wp-cli.phar/php/boot-phar.php:5]\n3  include(phar:///srv/www/site/htdocs/wp-cli.phar/php/boot-phar.php) called at [/srv/www/site/htdocs/wp-cli.phar:4]\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:19) in /srv/www/site/htdocs/wp-includes/load.php on line 33\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /srv/www/site/htdocs/wp-includes/load.php:19) in /srv/www/site/htdocs/wp-includes/load.php on line 33\n```\n. ",
    "ssbarnea": "Why is this bug closed? I can fully reproduce it with current version. see\n```\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /usr/share/wordpress/wp-includes/load.php:18) in /usr/share/wordpress/wp-includes/load.php on line 32\nwww-data@sbarnea:~$  wp --skip-plugins plugin status\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /usr/share/wordpress/wp-includes/load.php:18) in /usr/share/wordpress/wp-includes/load.php on line 32\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /usr/share/wordpress/wp-includes/load.php:18) in /usr/share/wordpress/wp-includes/load.php on line 32\nwww-data@sbarnea:~$ wp core version\n3.8.5\nwww-data@sbarnea:~$\nwww-data@sbarnea:~$ wp wp --info\nPHP Fatal error:  Cannot redeclare wp_unregister_GLOBALS() (previously declared in /usr/share/wordpress/wp-includes/load.php:18) in /usr/share/wordpress/wp-includes/load.php on line 32\nFatal error: Cannot redeclare wp_unregister_GLOBALS() (previously declared in /usr/share/wordpress/wp-includes/load.php:18) in /usr/share/wordpress/wp-includes/load.php on line 32\nwww-data@sbarnea:~$ wp --info\nPHP binary:     /usr/bin/php5\nPHP version:    5.5.9-1ubuntu4.5\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        /usr/share/wp-cli\nWP-CLI global config:   /var/www/.wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version: 0.17.1\n```\n. I was able to fix it by adding he if not wp-cli on the include of wp-settings file. i will post more when I reach the computer.\n/sorin\n\nOn 21 Dec 2014, at 14:07, Cristi Burc\u0103 notifications@github.com wrote:\n@ssbarnea Please paste the contents of your wp-config.php file (without sensitive data, like passwords).\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "samtuke": "I also have this issue with Wordpress 4.1.\n. ",
    "bgelfand": "I figured out it was a poorly made plugin, it was doing require_once($root.'/wp-settings.php'); and I suspect it may be the cause for other people out there. Look for if wp-settings.php is being required anywhere else but in the core, as it was at least the cause for my troubles.\n. ",
    "sibprogrammer": "We use wp-cli for mass management of WP instances and needed in titles and descriptions. We use list command with json format and there is no such thing as \"table\". So I only give an ability to obtain this info using single command (\"list\") instead of generating bunch of \"gets\". Also take into account that these new fields were not added to default list of columns, so didn't affect anyhow command line usage.\n. ",
    "tox2ik": "Wow, this is stupid :) Please disregard. I may do a pull request instead.\n. ",
    "GaryJones": "WP-CLI version: 0.14.0-alpha (which is the latest version that SiteGround currently have available).\n. 39822 is now fixed in WP core.. > I don't think most WordPress developers use an IDE. I personally don't. I'm not sure it's something we need to optimize for.\n\nIt's not a wide-spread pattern in WordPress, which is the community / developer pool we're working with.\n\nMost WordPress developers aren't going to be making changes or even necessarily reading the source code for wp-cli. wp-cli is a tool that does not have to stick with anti-patterns that WP source uses.. Once #4402 is (presumably) merged, I can handle this.\nNotes:\n```yml\n.travis.yml\nmatrix:\n  fast_finish: true\n  include:\n    - php: 7.1\n      env: WP_VERSION=latest SNIFF=1\n```\n```sh\ntest.sh\nRun CodeSniffer\nif [[ $SNIFF == '1' ]]\nthen\n    vendor/bin/phpcs\nfi\n```. Stages are currently in beta - are you sure you want to rely on it (especially when my notes above should be the only changes needed)?. Noting that PRs for the commit references above are not yet created, until a blocker has been fixed.. @danielbachhuber said that pull requests that contained small groups of files that addressed multiple standards was acceptable, so that's what I've done, referenced in the 11 PRs above.\n. Hmmm. That will make visual reviewing trickier since the sniffs work together to produce the end result.\nThere's no easy way that I know of (ping @jrfnl) to limit exclusions to just one group of files.\nThe other option is just to do all sniffs for all files in one go, which is what I wanted originally. Yes, it's a lot to review in one go, but the tests will pass, and it's the technical debt repayment for letting it get this far. The tests passing should show that no functionality has been changed and that it's safe to merge.. > To land the pull requests that have already been submitted, I've been reverting the \"PHPCS: Remove exclusions that can be fixed\" changeset so Travis passes.\n\nOnce all of the pull requests are merged, I'll create a new pull request restoring \"PHPCS: Remove exclusions that can be fixed\".\n\nThat's a great approach - nice one.. A couple of the excludes are handled in open PRs.. > The tests are skipped if no phpcs.xml[.dist]\nPHPCS config files may also start with a period \u2013 .phpcs.xml[.dist] \u2013 so it should probably check for the presence of them before skipping.. Hi @miya0001,\n3703 is from January 2017.\nSince then though, @danielbachhuber himself opened #4058 in May 2017, to which this PR directly (partially) addresses (including only the code in this repo), so I'd strongly infer that this PR is still relevant.. > I'd like to merge everything related to 1. for now\nI can pull into a new branch and create a PR.\n\nhe'd like to have 1 PR per sniff\n\nAs I updated my original post, this doesn't make sense from a practical point of view.. May I recommend that instead of small batches of sniffs across all files, that the approach is all of the sniffs fixed in single / small batches of files? That should reduce the workload needed before accepting a PR before it goes stale.\nUltimately, the goal is not to review the code such as  \"did it meet this part of the code standard, did it meet that part of the code standard\" (which would be derived from arbitrarily grouping sniffs), but \"does this file now meet the code standards without breaking functionality\".\nIf that's acceptable, then I'm happy to make a start on it.. My branches are done, but I'll wait until #4339 can be merged before doing the PRs, to save them all failing Travis build and having to be re-triggered.. > The DealerDirect Composer plugin breaks on PHP 5.3, which is the required minimum we're testing against.\nI'll see if I can do a PR to make it 5.3 compatible, since it only seems to be short array syntax that's the issue.\n\n. https://github.com/DealerDirect/phpcodesniffer-composer-installer/pull/39 submitted.\nIf / when this is merged and released, I'll adjust the PR here to require 0.4.3 of the plugin.. Rebased to avoid merge conflict.. > can you adapt the PR so that it requires a minimum of v0.4.3\nWill do :-). > CS: Fix case for array keyword\nThe issue wasn't actually the case (though that should have been, as was, fixed as well), but the presence of a space between the array and the (.. > Can you resolve the merge conflict?\nDone.. Travis looks to have broken due to something else, other than the code changes here.. > Up for wiring this into Travis too?\nMight not be until tomorrow, but I can take a go, yes.. Notes for myself:\nThe ci/prepare.sh file already contains the composer install, which should be all that's necessary to install PHPCS, the phpcodesniffer-composer-installer Composer plugin, and the WPCS & PHPCompatibility standards.\nThere's no need for the composer global install of WPCS any longer.\nThe phpcodesniffer-composer-installer package should register WPCS and PHPCompatibility with PHPCS automatically at the end of the composer install.\nphpcs is run in ci/test.sh.. It took a few goes to work out what the problem was, but it's now there.\nThe solution was to remove the explicit global composer install of WPCS (and implicit install of phpcs which is a dependency of WPCS), and instead, let the existing composer install add all of the dependencies locally. Once the phpcs command is adjusted to use the vendor/bin/phpcs instead, then that version of PHPCS has all  of the relevant standards registered and available, and so the phpcs.xml.dist is able to be used without causing a failure.. > Is this expected output?\nYes. The 'p' flag enables that progress meter (otherwise, the lack of anything is the only way to know nothing failed). Dots for each file is a good thing.\nWhat may be a little confusing, is that there's no 68/68 (100%) at the end of the last line, but there are 8 dots there, signifying that those files passed too. See https://github.com/squizlabs/PHP_CodeSniffer/issues/1697.\nIf errors, or warnings were present (i.e. violations of the code standards), you'd get something like:\n\nIn terms of testing against syntax introduced in a version later than PHP 5.3, you'd get something like the following (I added scalar type declaration, return type and short  array syntax to demonstrate):\n\nIf the config value was then bumped to 5.4-, but with the same introduced errors:\n\n(i.e., short array syntax would now not be reported, as all versions in our range support short array syntax, but return type and scalar type declaration would be.). Didn't think this one through enough. . I'm refactoring the code in is_windows() to hopefully avoid what I think is a false positive, so will try adding a unit test as well.. This Travis failure seems unrelated to the code that's been changed?. Ah - my fault for not interpreting the message correctly.\nI've pushed a new commit to address the int vs string type difference.. > I'm refactoring the code in is_windows() to hopefully avoid what I think is a false positive, so will try adding a unit test as well.\nFWIW, the false positive has been addressed.\n\n\"In the mean time, for the love of code, can someone refactor that line to a readable code block ?\". > Because this includes functional changes, it should include corresponding tests.\n\nI'm on it.. First of the rebased commits adds unit tests for existing functionality. You can check out that commit, and run phpunit --group autoloadsplitter and see the tests pass:\n\nSecond commit makes the non-breaking change, and the tests still pass as they were.\nThe third commit makes the opinionated change that stops /wp-cli/-command/ and similar non-typical paths now be non-conforming (see the change in the test file). Obviously, this is optional, but I'm not sure what benefit there would be to the community to continue allow these non-typical patterns.. I'm not sure if this thread was also inviting others to contribute - probably not, but since my flurry of PRs seemed to trigger the discussion, I'll add my 2 pennies anyway:\nAs a new(er) contributor who doesn't know the internals of WP-CLI off by heart, but does know about code standards and documentation, and can run the (Php Inspections) inspector in PhpStorm to get a list of small improvements, then my ability to contribute is somewhat limited to that domain. \nDoes a project like WP-CLI need contributions like that or not? Well, #4058 suggested it did, and the number of smaller code fixes that were possible to find and easily make PRs on (some would have been more in-depth changes, for only the same small benefit) in one sitting also indicates that there was room for improvement within the code.\n\nMy position is that if it's explicitly in WordPress PHP Coding Standards, then fine.\n\nThat should also cover the Inline PHP Docs in the Handbook as well, of which WordPress-Docs is a starting point. It's far less complete in terms of checks, compared to WordPress-Core, but it catches 660+ items on the current WP-CLI code base, so I'll be pushing for that here.\nIt's worth noting that the PHP Code Standards page in the handbook is not complete - it's full of holes, and doesn't even touch on how things like namespaces and use statements should be formatted.\nOne of the things we (the WPCS team) are trying to do, is get more of the WordPress-Extra checks moved over into WordPress-Core, so it wouldn't hurt any project related to WordPress, to start trying to adhere to that standard as well (it's what I'll also be encouraging here).\nFrom my perspective, the WP-CLI core committers and main contributors can focus on the big features and bug fixes for end users, and let the likes of me help bring the quality of the project code up to speed to make your future lives easier. One doesn't have to pick one or the other.. Done.\nNote, that this is only for WordPress-Core. If WordPress-Extra is enabled, then these are the additional violations:\n```\nPHP CODE SNIFFER VIOLATION SOURCE SUMMARY\n\nSOURCE                                                       COUNT\n\n\n[ ] WordPress.PHP.StrictComparisons.LooseComparison              37\n[ ] WordPress.CodeAnalysis.AssignmentInCondition.Found           23\n[ ] WordPress.PHP.StrictInArray.MissingTrueStrict                19\n[ ] WordPress.Security.EscapeOutput.OutputNotEscaped             14\n[ ] WordPress.WP.AlternativeFunctions.json_encode_json_encode    13\n[ ] WordPress.PHP.DiscouragedPHPFunctions.runtime_configuration  10\n[ ] WordPress.WP.GlobalVariablesOverride.OverrideProhibited      10\n[x] WordPress.Classes.ClassInstantiation.MissingParenthesis      9\n[ ] WordPress.WP.AlternativeFunctions.file_get_contents_file_ge  9\n[ ] WordPress.WP.AlternativeFunctions.file_system_read_fwrite    8\n[x] Squiz.Classes.SelfMemberReference.NotUsed                    6\n[ ] WordPress.WP.DiscouragedConstants.UsageFound                 6\n[ ] WordPress.PHP.DiscouragedPHPFunctions.runtime_configuration  5\n[ ] WordPress.PHP.DevelopmentFunctions.prevent_path_disclosure_  5\n[ ] WordPress.WP.AlternativeFunctions.file_system_read_fclose    5\n[ ] WordPress.WP.AlternativeFunctions.parse_url_parse_url        5\n[ ] WordPress.CodeAnalysis.AssignmentInCondition.FoundInWhileCo  3\n[ ] WordPress.PHP.DevelopmentFunctions.error_log_trigger_error   3\n[ ] WordPress.WP.AlternativeFunctions.file_system_read_fopen     3\n[ ] WordPress.WP.AlternativeFunctions.strip_tags_strip_tags      3\n[ ] WordPress.WP.AlternativeFunctions.file_system_read_file_put  2\n[ ] WordPress.PHP.DiscouragedPHPFunctions.runtime_configuration  2\n[ ] WordPress.PHP.DevelopmentFunctions.error_log_var_export      2\n[ ] Generic.CodeAnalysis.UselessOverridingMethod.Found           2\n[ ] WordPress.WP.AlternativeFunctions.rand_mt_rand               2\n[ ] PSR2.Methods.MethodDeclaration.Underscore                    2\n[x] PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter          1\n[x] PEAR.Files.IncludingFile.UseRequireOnce                      1\n[ ] WordPress.WP.TimezoneChange.timezone_change_date_default_ti  1\n[ ] WordPress.CodeAnalysis.AssignmentInCondition.FoundInTernary  1\n[ ] WordPress.PHP.DevelopmentFunctions.error_log_debug_print_ba  1\n[ ] WordPress.PHP.DiscouragedPHPFunctions.system_calls_shell_ex  1\n[ ] WordPress.PHP.DiscouragedPHPFunctions.system_calls_proc_ope  1\n[ ] Generic.CodeAnalysis.ForLoopWithTestFunctionCall.NotAllowed  1\n[ ] WordPress.PHP.DiscouragedPHPFunctions.system_calls_passthru  1\n[ ] WordPress.PHP.DiscouragedPHPFunctions.urlencode_urlencode    1\n[ ] WordPress.WP.AlternativeFunctions.curl_curl_errno            1\n[ ] Generic.Strings.UnnecessaryStringConcat.Found                1\n[ ] Squiz.PHP.DisallowSizeFunctionsInLoops.Found                 1\n[ ] Squiz.Scope.MethodScope.Missing                              1\n\nA TOTAL OF 222 SNIFF VIOLATIONS WERE FOUND IN 40 SOURCES\nPHPCBF CAN FIX THE 4 MARKED SOURCES AUTOMATICALLY (17 VIOLATIONS IN TOTAL)\n```\nIf WordPress-Docs is added in (which although not complete to the Handbook, does highlight some easy-to-miss items), these are the extra violations:\n```\nPHP CODE SNIFFER VIOLATION SOURCE SUMMARY\nSOURCE                                                       COUNT\n\n\n[ ] Squiz.Commenting.InlineComment.InvalidEndChar                121\n[ ] Squiz.Commenting.FunctionComment.MissingParamTag             84\n[ ] Squiz.Commenting.FunctionComment.Missing                     83\n[ ] Squiz.Commenting.FunctionComment.MissingParamComment         81\n[ ] Squiz.Commenting.FunctionComment.ParamCommentFullStop        66\n[ ] Squiz.Commenting.FileComment.Missing                         62\n[x] Squiz.Commenting.FunctionComment.SpacingAfterParamType       51\n[ ] Generic.Commenting.DocComment.MissingShort                   51\n[ ] Squiz.Commenting.VariableComment.Missing                     48\n[ ] Squiz.Commenting.FunctionComment.MissingParamName            23\n[ ] Squiz.Commenting.FunctionComment.ParamNameNoMatch            13\n[x] Generic.Commenting.DocComment.SpacingBeforeTags              10\n[ ] Squiz.Commenting.FunctionCommentThrowTag.Missing             10\n[x] Squiz.Commenting.InlineComment.WrongStyle                    8\n[ ] Squiz.Commenting.FunctionComment.InvalidNoReturn             7\n[ ] Squiz.Commenting.FileComment.WrongStyle                      6\n[ ] Generic.Commenting.DocComment.ShortNotCapital                5\n[ ] Squiz.Commenting.FunctionComment.WrongStyle                  5\n[ ] Squiz.PHP.CommentedOutCode.Found                             5\n[x] Squiz.Commenting.InlineComment.SpacingAfter                  4\n[ ] Squiz.Commenting.ClassComment.Missing                        4\n[ ] Squiz.Commenting.FunctionComment.ExtraParamComment           2\n[ ] Squiz.Commenting.VariableComment.MissingVar                  2\n[x] Squiz.Commenting.BlockComment.NoNewLine                      1\n[x] Squiz.Commenting.InlineComment.Empty                         1\n[ ] Squiz.Commenting.FileComment.MissingPackageTag               1\n[ ] Squiz.Commenting.VariableComment.WrongStyle                  1\n\nA TOTAL OF 755 SNIFF VIOLATIONS WERE FOUND IN 27 SOURCES\nPHPCBF CAN FIX THE 6 MARKED SOURCES AUTOMATICALLY (75 VIOLATIONS IN TOTAL)\n``. Also not addressed, would be obvious changes of comparison from equality to identity, like this.. Travis failing here, with complaint about it not following Yoda conditions.. Let #4389 take priority, and I'll fix conflicts after its merged.. Yes. If line 134 is hit, then no more of these conditions (line 135 onwards) are hit since thecontinuetakes us out of theforeach. It's like areturn`.\nThat means that anything that did resolve as false to the condition on line 133, would then check the condition on line 137; it doesn't matter if it's a new if or an elseif. \nWe could probably even make it like so:\nphp\nif ( false === $details['runtime'] || isset( $details['deprecated'] ) || isset( $details['hidden'] ) ) {\n    continue;\n}\nIt doesn't matter if it's one condition being checked after another, or a set of conditions joined with ||, it's exactly the same outcome.. ",
    "sboisvert": "Yes you completely understood, thank you. \nMy apologies that I wasn't as descriptive in my reasoning as I could / should of been.\n. ",
    "JDGrimes": "Yeah, I meant to link to that...\n. What version of WordPress are you using? Symlinked plugins aren't handled properly except in 3.9, which is the version currently under development.\n. > What are these comments? *#@+ *#@-\nThey are markers used by PHPDocumentor.\n. ",
    "gizburdt": "Yes, using wp core config\n. If you have some spare time, can you have a look at my project? https://github.com/Gizburdt/Wordpress-Conductor\nI would like to install wordpress and some plugins with grunt and wp-cli, but wp-cli will install plugins in wordpress/wp-content/plugins and want them in wp-content/plugins/.\n. define( 'WP_CONTENT_DIR', dirname(__FILE__) . '/../wp-content' ); worked for me\n. Thanks! But I'm not very good at bash and stuff like that. Can you copy my command above and change it to the right command? Would be very helpful to me :)\nThanks!\n. You're right! Sorry. But sometimes an example helps with the first steps..\n. ",
    "dnavarrojr": "Thanks for the clarification.\nI'm personally more interested in exporting from single-site into multisite.\nHas there been any communication with the Ryan McCue's JSON project?  What would be fantastic would be the ability to access data from a remote site via JSON for import into a local site.\nI've been doing more reading on the Wiki and through the issue threads here and I think I need to take apart one of the plugins that has direct support for WP-CLI.  That would probably be the easiest way for me to contribute is through a plugin that works with WP-CLI rather than messing with the WP-CLI code itself.\n. Okay, looking at \"wp db export\" and \"wp db import\" and what I'm not seeing is a way to deal with individual tables or individual sites in a multisite install.\nAlso, I just found \"eval-file\" and my question would be, does it work like a plugin?  That is, does the specified file have access to the WordPress API when it's executed?\n. Thanks Daniel, looks like I have a lot of work to do. :)\n. --url= is not documented on the \"wp file-eval\" page.  So I didn't know that it worked.\nAnd I'm not gonna try and dictate syntax... :)  I just need the ability to pass parameters to the php file, even if it's just:\nwp file-eval myfile.php --param=\"param1=1&param2=2&etc\"\nWith that, I can write scripts for tasks like doing a full import of a standalone site into a multisite install. Or synching media between sites.  And then put those scripts on the wiki.  That, I'm comfortable doing as opposed to mucking with your code.\n. Great, thanks!\n. ",
    "jason404": "Is there anything I can do about this?  Is it a problem, or can I just safely ignore this when it happens?  Thanks.\n. I mentioned earlier that I get errors on updates as well:\nPHP Warning:  copy(/home/jason/.wp-cli/cache/plugin/contact-form-7-3.7.2.zip): failed to open stream: Permission denied in phar:///srv/bin/wp/php/WP_CLI/FileCache.php on line 164\nWarning: copy(/home/jason/.wp-cli/cache/plugin/contact-form-7-3.7.2.zip): failed to open stream: Permission denied in phar:///srv/bin/wp/php/WP_CLI/FileCache.php on line 164\nThe permissions for /srv/bin/wp are \n-rwxr-xr-x 1 jason admin 1101392 Feb 22 04:35 wp\n. No, they all have separate WordPress directories.\n. Hi, no.  Both those commands give no output either.\nThe same wp-cli installation works on two of four of the other sites.\n. I did some testing to see what was causing this and I have isolated the problem:\nTo increase performance I had enabled memory caching using Opcode: Alternative PHP Cache (APC) in the W3 Total Cache settings.\nReverting to standard disk caching has made wp-cli start working again.\nIs this an issue that is likely to be addressed, or do I have to stick with disk caching in order to use wp-cli?  Thanks.\n. I had been using 0.14.  I just upgraded to 0.14.1, but still the same problem.\nI tried enabling the different types of APC caching one by one in the W3 Total Cache settings and found this:\nPage Cache: APC - works\nMinify Cache : APC - works\nDatabase Cache: APC - Does not work.\nDatabase Cache : memcached - works\nObject Cache: APC - Does not work\nObject Cache : memcached - works\nSo at the moment on one site I have APC enabled for Page and Minify caching and memcached enabled on Database and Object caching.\nAnd I don't know if this is a desirable configuration.\nI've not yet tested on anything apart from wp plugin list, so far.\n. @lolux  It's working fine for me, with just about all features of w3tc enabled.  It's just that APC caching does not work for Database and Object caching without breaking wp-cli, so I am using memcached for those instead.\n. The site found the updates after I went into the wp-admin interface at /wp-admin/update-core.\n/wp-admin/update-core.php?force-check=1 didn't seem to be required.\nIsn't there a way to trigger this using wp-cli?\n. I did that many times, but it did not find the updates that had already been installed on another site.\nMaybe things are not working properly here.  I have also noticed that when I just type wp, I used to get the help, but now I get this:\n$ wp\nPHP Fatal error:  Cannot redeclare class Network_Meta_Command in phar:///srv/bin/wp/php/commands/network.php on line 21\nFatal error: Cannot redeclare class Network_Meta_Command in phar:///srv/bin/wp/php/commands/network.php on line 21\n. Erm, it's stopped happening now.\n. I've never tried installing WordPress using wp-cli before,  but have updated it many times.\nThis is not working:\n$ wp core download --locale=en-GB\nError: The requested locale (en-GB) was not found.\nThis usually works fine:\nwp core update --locale=en-GB\n. @danielbachhuber  Ah thanks.  \nMy .bash_history seems say that I have been using wp core update --locale=en-GB successfully, so that's quite odd.  Maybe I have not been updating with the intended language?\n. Just FYI, it does seem to work with wp core update --locale=en-GB.\n$ wp core update --locale=en-gb\nUpdating to version 4.3 (en_GB)...\nSuccess: WordPress updated successfully.\nDownloading update from https://downloads.wordpress.org/release/en_GB/wordpress-4.3.zip...\nUnpacking the update...\n. ",
    "davekiss": "I'm using the latest nightly of 3.9. The plugin isn't symlinked, it just seems that the plugin_basename( __FILE__ ) is returning /private/tmp/wordpress instead of /tmp/wordpress, which is what WordPress is looking for in plugin_basename\n. ",
    "tigerstrikemedia": "No amount of fiddling with the flags worked for me, the user being in or our of cageFS on the cloudlinux server made no difference.\nI managed to get around it by using the following command syntax.\nI also found that the current directory was lost and to get it to work I had to pass into wp-cli the --path paramater\nsu - username -c \"wp core version --path=$path_to_original\"\n. perhaps an update to the displayed text would be in order?\n. ",
    "zedejose": "\ni18n-tools is easy enough to use\n\nCompletely agree with @danielbachhuber :) (i.e. so is the rest of WordPress, and yet you can do most things with wp-cli, that's the whole point)\nMy issue with the approach is a different one, namely how do we guarantee that the tools themselves are present. Ought we to:\n- Assume that the user has them checked out and working? This feels somewhat less than optimal, but it may very well be just me\n- Check them out for the user, with a wp-cli i18n get-tools(example)? I'm not sure what that would imply, aside from the requirement that svn needs to be installed and working.\n- Get the tools some other (non-svn) way? This may also be troublesome, as that repo needs a svn:external from GlotPress (the pomo library)\nWhat would you recommend?\n. ",
    "phh": "Would be fantastic to have the i18n integrated into wp cli. Much easier for theme and plugin developers to add a .pot file in their projects.\nAnother nice feature would be if the tool not only was looking for the translate functions but also were looking for the textdomain instead of adding text string for everything!\n. This is awesome! Just works. Thank you so much!\n. Oh, awesome! Didn't know that the --url worked as site specific in a multisite.\nThank you for your very fast answer!\n. I made a pr that will work for pre 4.0 installations \nhttps://github.com/wp-cli/wp-cli/pull/1393\n. https://github.com/wp-cli/wp-cli.github.com/pull/46\n. Also removes escaping on $wpdb->prefix. Is that really necessary to use there?\n. 7c2bb43\nUses a method instead of a check in each on the methods.\n. Oh, thanks for the quick reply :)\nWhen you're developing plugins you might want to test out the activation hooks.\nYou can use\nwp plugin toggle\nwp plugin toggle\nTo retrigger that single thing but that means the plugins activation state should be the exact same as what you're trying to test.\nre(de)activate gives you an option to force trigger either the activation of the deactivation of the plugin.\n. Well the uninstall could easily be achieved- just uninstall and install/uninstall.\nIs that something I should Work on? Does it makes sense to use these \"re\" names? It could also be something like wp plugin trigger --activate/deactivate/uninstall. How about that instead? Would also mean one command instead of 3.\n. Why would'nt a deactivation and a activation not trigger til activation hook? Seems to work here...\nwp uninstall --no-delete seems to do what I'm trying to do with activation/deactivation. Would adding a --reload to wp plugin activate/deactivate make more sense?\n. Hmm. Maybe I could update the command to Bash script: Search/replace production to development url (multisite compatible) or add a #!/bin/bash at the start of it.\nAny ideas?\n. Updated (and added the same example for wp db drop --yes. Do you want me to keep the $? Seems like I couldn't find any examples containing it.\n. Aha - makes sense. Will keep it like that then :)\n. Awesome! Both added.\n. ",
    "geminorum": "See also : wemakecustom/wp-pot-generator\n. ",
    "sun": "Please consider to re-open this issue.\nWP-CLI is the natural go-to solution for all WordPress plugin and theme developers.  All of the mentioned alternatives are not.\nThe suggestion wasn't to duplicate efforts and waste everyone's time.  The suggestion was to (re-)use and leverage the existing code of the existing i18n/l10n scripts in WP-CLI.\nThe seemingly official set of i18n/l10n scripts is barely documented.  And, Grunt is an insane workaround, because Grunt is not able to reliably interpret PHP code.\nThis topic does not only affect contributed plugins and themes, it also affects custom plugins and themes.  Developers constantly have to regenerate and manage translations for their custom extensions.  No one is aware of how painful this work is, as it happens behind the scenes.\nThe workflows of WordPress extension development have to become more accessible.  This is your unique chance to pave the way for major improvements in the WordPress eco-system.  Do not miss this chance.\nThis is what we're looking for:\nsh\n$ wp translation template <plugin/theme-path> [<new-pot-file-pathname>]\n$ wp translation create <plugin/theme-path> <locale>\n$ wp translation ...\nFocus is on the very first command (for now).\nThoughts?\n. FWIW, I don't think that this should be \"officially supported\" by WP-CLI, but people may already be happy to come here and find a working solution.\nI've summarized the different suggestions into a quick script.  To use:\n\n\nDownload/upload wp-cli.phar to your web space.\n\n\nCreate cli.php (the script below) and upload it into the same folder of wp-cli.phar.\n\n\nTest that it works by accessing it; e.g., http://example.com/cli.php\n\n\nReplace the last arguments (cli info) within the script with your desired arguments and options in the same way you'd specify them normally on the command line.\n\n\nAccess it again; e.g., by reloading.\nNote that some commands (such as search-replace) assume STDOUT to be a writable stream resource, which doesn't exist in this execution context, so you will see errors like the following instead of the actual output:\n\nWarning:  fwrite() expects parameter 1 to be resource, string given in phar:///path/to/htdocs/wp-cli.phar/vendor/wp-cli/php-cli-tools/lib/cli/Streams.php on line 66\n\nI'm relatively sure there's a trick around that, but I didn't need that for my purposes.\n\n\nDelete both files cli.php and wp-cli.phar.\n\n\n\ncli.php:\n```php\n<?php\nini_set('display_errors', 'on');\n//error_reporting(E_ALL);\necho \"\\n\";\n@see https://github.com/wp-cli/wp-cli/issues/1924#issuecomment-122075194\n$GLOBALS['argv'] = explode(' ', 'wp --path=' . DIR . ' cli info');\n@see https://github.com/wp-cli/wp-cli/blob/master/php/boot-phar.php\nconst WP_CLI_ROOT = 'phar://wp-cli.phar';\ninclude WP_CLI_ROOT . '/php/wp-cli.php';\n?>\n```\n. ",
    "davemac": "I'm having trouble getting this to work as well . The example doesn't work for me either. I've spent hours trying to work this out.\nAny chance of throwing us a bone and showing a working example of extra-php used in a config.yml file?\n. OK have worked it out, this works in my config.yml:\ncore config:\n    dbuser: root\n    dbpass: \n    dbhost: localhost\n    extra-php: define( 'WP_DEBUG', true );\\ndefine('SAVEQUERIES', true);\\ndefine( 'DISALLOW_FILE_EDIT', true );\n. Excellent, thank you \n. ",
    "mattyhead": "This is a bit late to chime in, but you can also do:\necho \"define( 'WP_DEBUG', true);\" | wp core config --extra-php . ",
    "planetahuevo": "The solution is this one: \nhttps://github.com/wp-cli/wp-cli/issues/1268\nAdd \"=\" at the end and problem solved for me. \n--extra-php=\"STRING\"\nwp core config --dbname=test --dbuser=root --dbpass=root --dbhost=localhost --extra-php=\"define('WP_DEBUG',true);\\n\". ",
    "diggy": "A recipe to read from a php file:\ntail -n+2 path/to/file.php | wp core config --extra-php --dbname=\"lorem\" .... @danielbachhuber the patch in #2671 fails for me:\nFatal error:  Class 'WP_CLI\\WP_CLI' not found in /usr/local/Cellar/wp-cli/0.23.1/php/WP_CLI/CommandWithTranslation.php on line 346\nLooks like the global namespace separator is missing?\n\\WP_CLI::error( $response );\n. @ernilambar @wojsmol still no cigar. should I close and reopen to rerun the test?\n. @danielbachhuber Yes, proposing this change merely for the sake of consistency. I was running some commands and saw a nice green success message telling me the theme was already active, expecting a warning like the ones emitted for plugins. No hard feelings if you decide to drop this :)\n. Test command here: https://gist.github.com/diggy/163c2672f5a422c32fafc1888de311a9\nScreenshots\nwp test test --format=table\n\nwp test test --format=table --ltr=1\n\nwp test test --format=csv\n\nwp test test --format=csv --ltr=1\n\n. @grappler not sure if you're developing for private or public use, just wanted to let you know there's a discussion going on about an \"official\" polylang cli component here.\n. @danielbachhuber has this issue been resolved? Running into the exact same error with WP 4.6 and WP-CLI 0.24.1 (doing search-replace on remote server)\n. @danielbachhuber OK, but not really my point. Deprecation does not equal removal. A random definition plucked from the interwebs: \"should not be used because there is (or there will be) a better alternative in that software that should be used instead\". It would be nice to have at least a little time to transition.\n\nCustom commands shouldn't call WP-CLI command class methods directly\n\nActually, I'm not following. Looks like this is encouraged in the WP_CLI::run_command() docs, no? Why should I write my own list subcommand if can just pass the data to a core command w/ run_command?\n. loosely related trac ticket: https://core.trac.wordpress.org/ticket/41171#comment:4. What about other subcommands? Maybe coincidence but I had trouble with package-readme a few minutes ago: Error: 'package-readme' is not a registered subcommand of 'scaffold'. See 'wp help scaffold' for available subcommands.. ",
    "onetrev": "Thanks @planetahuevo that worked nicely for me! I had to use this solution for using WP CLI in Windows Powershell because <<PHP causes an error.\nOnly thing for me is the new line tag \\n showed up as plain text so I had to remove it. Would be cool if you could get the new line in there still, but at least it works!. ",
    "lolux": "Similarly, for me, using wp-cli with w3tc activated returns the following errors:\nPHP Warning:  require_once(WP_PLUGIN_DIR/w3-total-cache/inc/functions/compat.php): failed to open stream: No such file or directory in [***scrubbed***]/wp-content/plugins/w3-total-cache/inc/define.php on line 1449\nWarning: require_once(WP_PLUGIN_DIR/w3-total-cache/inc/functions/compat.php): failed to open stream: No such file or directory in [***scrubbed***]/wp-content/plugins/w3-total-cache/inc/define.php on line 1449\nPHP Fatal error:  require_once(): Failed opening required 'WP_PLUGIN_DIR/w3-total-cache/inc/functions/compat.php' (include_path='.:') in [***scrubbed***]/httpdocs/wp-content/plugins/w3-total-cache/inc/define.php on line 1449\nFatal error: require_once(): Failed opening required 'WP_PLUGIN_DIR/w3-total-cache/inc/functions/compat.php' (include_path='.:') in [***scrubbed***]/wp-content/plugins/w3-total-cache/inc/define.php on line 1449\nDeactivating w3tc is the only way I have found thus far to run wp-cli without errors.\n. @jason404 @scribu Thanks for the tips. Since I only have \"disk\" caching enabled in w3tc's settings, I'm not sure that the APC bit applies in my case. Perhaps it has something to do with PHP 5.5's built-in Zend Opcache.\n. Quick follow up: disabling the Object Cache option in w3tc (even though I had it set to the disk method) allows wp-cli to work.\nThanks again for the help!\n. Ahh, noob indeed\u2014yes\u2014found a rogue double definition in wp-config. Thanks!\nLoving wp-cli. Thanks so much for such a great program.\n. ",
    "joshkoenig": "Seeing this with the latest download from the releases page, FYI. \n. So, maybe someone should look into why the download on this page:\nhttps://github.com/wp-cli/wp-cli/releases\nDoes not have that MD5sum?\n. FWIW version fetched via https://raw.github.com/wp-cli/builds/gh-pages/phar/wp-cli.phar is about 5x as big as the release packaged on the releases page, though the --info command says both are 0.14.1\n. Thanks! I am good now that I have the proper release. Was just confused. \n. Hm... paying a little more attention, there are all these too:\nhttps://github.com/wp-cli/php-cli-tools\nSo I suppose using the table API there is the right path?\n. Thanks for the pointer! I'll review that thread now.\nHere's the config with identifying info anonymized:\n```\n<?php\n/\n * This config file is yours to hack on. It will work out of the box on Pantheon\n * but you may find there are a lot of neat tricks to be used here.\n \n * See our documentation for more details:\n \n * http://helpdesk.getpantheon.com/\n */\n/\n * Local configuration information.\n \n * If you are working in a local/desktop development environment and want to\n * keep your config separate, we recommend using a 'wp-config-local.php' file,\n * which you should also make sure you .gitignore.\n /\nif (file_exists(dirname(FILE) . '/wp-config-local.php') && !isset($_ENV['PANTHEON_ENVIRONMENT'])):\n  # IMPORTANT: ensure your local config does not include wp-settings.php\n  require_once(dirname(FILE) . '/wp-config-local.php');\n/\n * Pantheon platform settings. Everything you need should already be set.\n */\nelse:\n  if (isset($_ENV['PANTHEON_ENVIRONMENT'])):\n    //  MySQL settings - included in the Pantheon Environment  //\n    / The name of the database for WordPress */\n    define('DB_NAME', $_ENV['DB_NAME']);\n/** MySQL database username */\ndefine('DB_USER', $_ENV['DB_USER']);\n\n/** MySQL database password */\ndefine('DB_PASSWORD', $_ENV['DB_PASSWORD']);\n\n/** MySQL hostname; on Pantheon this includes a specific port number. */\ndefine('DB_HOST', $_ENV['DB_HOST'] . ':' . $_ENV['DB_PORT']);\n\n/** Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8');\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n\n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * Pantheon sets these values for you also. If you want to shuffle them you\n * can do so via your dashboard.\n *\n * @since 2.6.0\n */\ndefine('AUTH_KEY',         $_ENV['AUTH_KEY']);\ndefine('SECURE_AUTH_KEY',  $_ENV['SECURE_AUTH_KEY']);\ndefine('LOGGED_IN_KEY',    $_ENV['LOGGED_IN_KEY']);\ndefine('NONCE_KEY',        $_ENV['NONCE_KEY']);\ndefine('AUTH_SALT',        $_ENV['AUTH_SALT']);\ndefine('SECURE_AUTH_SALT', $_ENV['SECURE_AUTH_SALT']);\ndefine('LOGGED_IN_SALT',   $_ENV['LOGGED_IN_SALT']);\ndefine('NONCE_SALT',       $_ENV['NONCE_SALT']);\n/**#@-*/\n\n/** A couple extra tweaks to help things run well on Pantheon. **/\nif (isset($_SERVER['HTTP_HOST'])) {\n  define('WP_HOME', 'http://' . $_SERVER['HTTP_HOST']);\n  define('WP_SITEURL', 'http://' . $_SERVER['HTTP_HOST']);\n}\n// Don't show deprecations; useful under PHP 5.5\nerror_reporting(E_ALL ^ E_DEPRECATED);\n\nelse:\n    /\n     * This block will be executed if you have NO wp-config-local.php and you\n     * are NOT running on Pantheon. Insert alternate config here if necessary.\n     \n     * If you are only running on Pantheon, you can ignore this block.\n     /\n    define('DB_NAME',          'database_name');\n    define('DB_USER',          'database_username');\n    define('DB_PASSWORD',      'database_password');\n    define('DB_HOST',          'database_host');\n    define('DB_CHARSET',       'utf8');\n    define('DB_COLLATE',       '');\n    define('AUTH_KEY',         'put your unique phrase here');\n    define('SECURE_AUTH_KEY',  'put your unique phrase here');\n    define('LOGGED_IN_KEY',    'put your unique phrase here');\n    define('NONCE_KEY',        'put your unique phrase here');\n    define('AUTH_SALT',        'put your unique phrase here');\n    define('SECURE_AUTH_SALT', 'put your unique phrase here');\n    define('LOGGED_IN_SALT',   'put your unique phrase here');\n    define('NONCE_SALT',       'put your unique phrase here');\n  endif;\n/**\n * WordPress Database Table prefix.\n *\n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n */\n$table_prefix  = 'wp_';\n\n/**\n * WordPress Localized Language, defaults to English.\n *\n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n */\ndefine('WPLANG', '');\n\n/**\n * For developers: WordPress debugging mode.\n *\n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n *\n * You may want to examine $_ENV['PANTHEON_ENVIRONMENT'] to set this to be\n * \"true\" in dev, but false in test and live.\n */\ndefine('WP_DEBUG', false);\n\n/* That's all, stop editing! Happy Pressing. */\n\n\n\ndefine('RootDepth', 0);\ndefine('LimzMigration', false);\n\ndefine( 'SUNRISE', 'on' );\n\n/* Revisions */\n//define( 'WP_POST_REVISIONS', 0 );\n\n/* Multisite */\ndefine( 'WP_ALLOW_MULTISITE', true );\n\ndefine('MULTISITE', true);\ndefine('SUBDOMAIN_INSTALL', false);\n\n$environment = $_ENV['PANTHEON_ENVIRONMENT'];\nif($environment === 'live'){\n    define('DOMAIN_CURRENT_SITE', 'www.foo.com');\n} else if($environment === 'test'){\n    define('DOMAIN_CURRENT_SITE', 'pantheon-test.foo.com');\n} else if($environment === 'dev'){\n    define('DOMAIN_CURRENT_SITE', 'pantheon-dev.foo.com');\n}\n\ndefine('PATH_CURRENT_SITE', '/');\ndefine('SITE_ID_CURRENT_SITE', 1);\ndefine('BLOG_ID_CURRENT_SITE', 1);\n\n/* That's all, stop editing! Happy blogging. */\n\n/** Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(__FILE__) . '/');\n\n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');\n\nendif;\n``\n. I'll triple test for that, but considering it's how we do everything, and this same setup works in a few other contexts, I am pretty confident it is populated. ;)\n. I haven't had a chance to circle back (been out sick). I'll give it a look and report back. Thanks!\n. One note from the peanut gallery: it looked to me as though there were cases where twoLIKE` queries were being run: one to count rows (looking for a match) and then a very similar query to get the row IDs. \nIf so, that's an easy candidate for optimization by dispensing with the explicit COUNT query by just counting the number of IDs returned in the second query. In the event that there are 0, the load on the DB is the same, as running a COUNT query forces the DB to do just as much work as actually fetching back the IDs. \n. +1 seems legit.. ",
    "martinmalanik": "I moved my wp-config.php above the webroot direcotry for security reasons as WordPress automatically looks one level up if wp-config.php is not found within the installation directory. However wp-cli now fails to run, throwing: Error: Strange wp-config.php file: wp-settings.php is not loaded directly.\nIs there any way around this? If it works with WordPress itself, shouldn't it work with WP-CLI as well?\n. ",
    "bburky": "Thanks @robertboloc!\nYou can use this for setting up a dev server backed by SQLite and it works:\n``` bash\nwp core download\nwp core config --skip-check --dbname=wp --dbuser=wp --dbpass=pass\ncd wp-content/plugins\ncurl -O https://downloads.wordpress.org/plugin/sqlite-integration.1.5.zip\nunzip sqlite-integration.1.5.zip\nrm sqlite-integration.1.5.zip\nmv sqlite-integration/db.php ../\ncd ../../\nwp core install --title=Dev --admin_name=admin --admin_email=\"admin@example.com\" --admin_password=pass --url=\"http://localhost:8080/\"\nwp server\n```\nThis issue can probably be closed now that #1068 been merged.\n. ",
    "kierzniak": "\nIn that way I would must overwrite constants like DB_NAME which will give me notice. \n   1.1 I could pass --dbname with database name which force me to to change my build script for each project and enviroment\nI would rather want to generate config for each enviroment than requiring files. I don't want to share enviroment information across different servers.\nAnd it is much elegant to keep your config in one enviroment file then spliting it on another. Solution which you suggest is forcing me to create wp-cli.{enviroment}.yml and also extra-config.{enviroment}.yml. Nowadays when we have multiple files like Gemfile for gems, bower.json for assets, composer.json for packages, building scripts and so on I'm trying to keep everything as simple as possible.\n. > Well, I still don't think that defining constants directly in wp-cli.yml is a good idea.\n\nWhy not? I came to this idea inspired by capistrano which is storing more sensitive data in their config files. Not mention about symfony which has database credentials in yaml file.\n. You have convinced me. I'm looking forward to YAML's multiline support.\n. I tried this before. Unfortunately this force me to add commad by WP_CLI::add_command. Which I have to determin during execution local, production, development etc. Which is not a big problem. \nThere are two problems:\nwp-cli is validating full command with subcommands and parameters. So e.g. if I want to execute such a command:\nwp production core download \u2014locale=en_US I must add this subcommands and parameters to my production command on the fly which I don\u2019t know how to do it.\nSecond problem is that I have to somehow determin also on the fly when my production command will be executed. Before wp load or after. \nDuring implementation I decide it is much easier to modify $argv.\n. Hi @danielbachhuber,\nthank you to your response.\n\nCould you share more details on what you're trying to do, so we can see if there's an existing alternative?\n\nI'm trying to automate my work everywhere I can. wp-cli is helping me to download, configure and install WordPress. Depending on the current environment I need to pass different arguments to wp-cli. \nNow I'm passing dotenv variables in my phing build.xml file. Which is basically creating the same wp-cli commands with own arguments from dotenv file. Everytime I want to execute wp-cli command with dotenv variables I have to add build task.\nI feel like I am doing work which was already done. I came up with idea to write a plugin to replace wp-cli arguments with dotenv variables.\nI seen some suggestions to create seperate wp-cli files like wp-cli.development.yml, wp-cli.production.yml and load them by changing WP_CLI_CONFIG_PATH but I don't want to keep my development and production configuration in VCS.\nEnviromental variables are widely supported e.g. in travis and gitlab where they are kept in secret and can be different depending on the deploy target. Also my solution is based on phing task system which is not very popular. When I want to introduce my workflow to my teammates and community they are confused about many tools. I would like to keep it simple.\n. ",
    "lflorent": "Great !\nThank you.\n. ",
    "jwmarshall": "The underlying problem is a privileges issue with the user and mysql, but as stated the result reports success.\nhttps://gist.github.com/jwmarshall/9626425\n. After fixing the privileges error:\nsh: 1: /usr/sbin/sendmail: not found\nSuccess: WordPress installed successfully\nThis one doesn't worry me as much since this is my local development environment.\n. With the error reported in the first comment it would fail because the user did not have permissions to create tables. I don't know specifically what error error message it would give though.\nFWIW both errors were caused by me, wrong db permissions on the first, and not having sendmail on the second. But both returned a 'Success' message and the successful exit code which caused unexpected results in my configuration management tool.\n. I will test and report back for you on the exact results I see when it fails.\n. You are correct wordpress does throw the same errors and still reports success at the very bottom. I will try to file a bug with them as well. Thanks!\n. Found a ticket in Wordpress Trac about the same issue... It's over 4 years old.\nhttps://core.trac.wordpress.org/ticket/12671\nScreenshot of error (Success!): http://i.imgur.com/c1hDW9C.png\n. ",
    "lgellert": "Just ran into this as well...  many customized sites use mu-plugins. I guess I'll make the directory it wants in /plugins/ then move everything it generates into /mu-plugins/.   Rather than a flag, it would be delightful if it would auto-detect this scenario.\n. Case in point, the custom plugin I'm currently writing for a high end Wordpress development shop.\nIt is required to live in mu-plugins so it does not appear in the plugins list and is automatically loaded. It has classes containing business logic that will benefit from unit tests.\n. Thank you sir!\n. ",
    "gthb1": "wp --info\nX-Powered-By: PHP/5.4.25\nContent-type: text/html\nPHP binary:     /usr/bin/php\nPHP version:    5.4.25\nphp.ini used:   /usr/local/lib/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.14.1\nphp --version\nPHP 5.4.25 (cgi-fcgi) (built: Feb 20 2014 11:18:10)\nCopyright (c) 1997-2014 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies\nOn Tue, Mar 25, 2014 at 1:17 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nPlease paste the output from running php wp-cli.phar --info. If even that\ndoesn't work, run php --version.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/1085#issuecomment-38562438\n.\n. And what is the solution to this, as I need to of course move beyond\nlearning about the problem ;)\n\nOn Tue, Mar 25, 2014 at 2:19 PM, Cristi Burc\u0103 notifications@github.comwrote:\n\nPHP 5.4.25 (cgi-fcgi)\nHere's your problem: you're not using a true php-cli binary, but a CGI one.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/1085#issuecomment-38569235\n.\n. Found it at\n/usr/bin/php-cli\n\nHow do I fix the error with that tool?\n. Here is the output after applying above instructions:\nwp --info\nPHP binary:     /usr/local/bin/php\nPHP version:    5.4.26\nphp.ini used:   /usr/local/lib/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.14.1\n\nCan I now use wp-cli to fix a plugin problem re\nABSPATHwp-admin/includes/plugin.php and\ninclude_path='.:/usr/lib/php:/usr/local/lib/php'?\n. It is related to:\nWarning: fopen(/plugin/do.php): failed to open stream: No such file or\ndirectory in /home/user/public_html/site/wp-includes/functions.php\non line 3666\nwhich happens to all WP plugins that call fopen(), foreach(), fclose(), etc.\nAs the hosting account was deleted/renewed, and WP+plugins have been reinstalled, all robo installs by cpanel and then mojo+installatron (both!), it is unclear where this is coming from.\nAny ideas how to solve this, investigate it, or how to proceed?\n. ",
    "tivnet": "@scribu This patch is not in the WP-CLI 0.14.1 yet, correct?\n. Thank you\n. Or\n```\nif ( ! isset( $_SERVER['HTTP_HOST'] ) ) {\n     $_SERVER['HTTP_HOST'] = 'localhost';\n}\n```. ",
    "mattheu": "Thanks for your feedback, I've updated the pull request.\n. ",
    "jopacicdev": "Can you write an example of how can I search and replace serialized values properly? Thanks!\n. I know it's not a bug, just the docs are very short in description, and not much examples. \nI'm trying to build an automated script that handles this, so that's why I'm trying to do it with WP CLI.\nAnyways, thanks for your help!\n. ",
    "mattonomics": "PHP 5.3.27\nApache/2.2.22\nMySQL Version 5.1.55-rel12.6\nPHP Handler cgi-fcgi\nWP 3.8.1\nPretty basic Media Temple site, really. No plugins or anything.\nI was using wp-cli to do the download/config/install. The process is in this script. Trying to flush the rules here and the option changes but the pages still 404.\nDid you try doing this on a fresh install only using wp-cli for the entire setup?\n. @danielbachhuber \n1. Correct, I'm using single site.\n2. This appears to be the issue. .htaccess is not getting generated.\n3. The rewrite output is spot on.\n. I have confirmed that they are running as the same user.\nThere is no warning about .htaccess not being created.\n. ",
    "WebEndevSnippets": "I am seeing the same thing as mattonomics. Fresh install of WP. \nI am getting success messages for both\nwp rewrite structure '/%postname%' --hard\nwp rewrite flush --hard\nbut I still get the 404's, as mattonomics mentioned above. \nApache 2.2.27, PHP 5.4.27, mySQL 5.5.36, and WordPress 3.9. Server is a standard config at KnownHost.\nThank you.\n. Not meaning to hijack this issue... If I am, please tell me to get lost :)\nI also verified that the .htaccess file is not getting generated. I am using the root user as the shell user, with full permission on the server. It should not be a permissions issue.\nAnd FYI, I am not getting an error from WP-CLI on failing to write .htaccess. I will try to check the server logs and see if I can find anything.\nThanks.\n. apache_modules:\n- mod_rewrite\nSolved it...\nThanks\n. Hi Daniel,\nAhhhh, very nice!\nI'll try that, but I am sure that it will work.\nThank you for the help!\n. +1 for this :)\n. @scribu - that worked well. Thank you.\n. Ugh... it still says version 0.14.1?\nI was sure it was 0.15.0 before\nI must not know how to update to the new version correctly.\n. It was a struggle, but I got it. Thanks.\n. It was my lack of understanding on how to update to the new version, in combination with trying to do in on local dev (XAMPP), and not getting the PATH right.\n. Hello scribu,\nI knew it was my lack of bash knowledge :)\nThank you so much for time and patience in answering.\nThat worked great.\nHave a great day!\n. Hi Daniel,\nSo I take it that there was a problem :) and that you have already put in a fix.\nIs there a way I can get the update now, with the fix included? Or do I have to wait for another release? \nThanks for your fast response on this :)\n. jmslbam - I shouldn't have missed that \nThanks!\n. Hi Daniel,\nIt sounds like you have this one on the run already. \nThanks for all you do!\n. Hi Daniel,\nYes, at command line. It worked fine once before. Now not working. http://screencast.com/t/lH8stTGcVf\nAnd here is the content\nhttp://screencast.com/t/q0wwd8zuzZv\n. Hi Daniel,\nIt is CURL version 7.24.0\n. whoops sorry 7.19.7 http://screencast.com/t/xxP0KR6Qg8\n. Wow, 7.19.7 is 4 years old....\n. Hi Daniel,\nI'm not able to update to a later version of CURL (Centos/cPanel issue), but wget did the trick. You pointed me to the issue though, with CURL version.\nThanks for the help.\n. Hi Trepmal,\nI searched and searched and missed that. Thanks much for pointing me in the right direction!\n. Disregard... it's already there\n. What the heck... I can't read... It's not there lol. Reopening...\n. Hi Daniel,\nOk, I understand now. \nYes, a global --skip-email would be the perfect solution.\nI would help, but my skill level is not adequate.\nThanks\n. +1\n. @szepeviktor - I would help, but you are far beyond my level of comprehension, :)\nSorry...\nI do think it is a great idea though!\n. Thank you Victor!\n. ",
    "dsawardekar": "I added the PR(wp-cli/php-cli-tools#2), to the php-cli-tools repo that addresses this. It keeps the existing behaviour intact. But if a SHELL_PIPE environment variable is present the isPiped() result depends on it's value instead of the tty detection.\nI think this is a simpler solution, otherwise I'd have to touch a lot of moving parts like Formatter, the cli Table, and so on.\n. ",
    "hgl": "Thanks for the help.\nLooks like pixline isn't very active right now. Any way I can directly use your fork? I'm new to composer, is it possible for composer to directly consume a github repo?\n. OK. Thank you very much.\nOn Apr 13, 2014, at 7:31 PM, Cristi Burc\u0103 notifications@github.com wrote:\n\nYes, you can add another entry to the \"repositories\" section in your composer.json, like you did with the WP-CLI package index.\nOr you could just clone the repo directly: https://github.com/wp-cli/wp-cli/wiki/Community-Packages#installing-a-package-without-composer\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "byordereurope": "perfect...\nwebber@server:~/test$ wp core download --locale=nl\nError: The requested locale (nl) was not found.\nwebber@server:~/test$ wp core download --locale=nl_NL\nDownloading WordPress 3.8.2 (nl_NL)...\nUsing cached file '/home/webber/.wp-cli/cache/core/nl_NL-3.8.2.tar.gz'...\nSuccess: WordPress downloaded.\nstill get the cert errors and not sure what those permissions mean,\ni should ask my server-manager\n. That's correct, that was my problem too.\n. ",
    "greenbicycle": "My problem was that I used wp core download under two different users. I got the error because the file in the temp folder was still there and the second user didn't have sufficient rights to that file. \n. ",
    "shakaran": "The tmp writting problem is not really fixed well, see my comment at https://github.com/wp-cli/wp-cli/issues/1118#issuecomment-332073056. This should be reopened. If the file is already created by other user is always reporting\nWarning: copy(/tmp/wp-cli-cacert.pem): failed to open stream: Permission denied in phar:///usr/local/bin/wp/php/utils.php on line 29\nThe wp-cli should check if the file is present and try write another one instead if it cannot delete it because is written by other user (in a shared hosting).\nFor example write /tmp/wp-cli-cacert.pem.1 if it is already written or /tmp/wp-cli-cacert.pem.2, etc\nAlternatively, the wp-cli, should always delete the temporal file created when it finish, because I have to execute always the following in terminal for avoid errors with other users or executions:\nrm -rf /tmp/wp-cli-cacert.pem. Not sure why, but I am getting the error and using debugging, appears that wp-cli is failing to eval() the php files but fails silenty because it doesn't catch the eval fail:\n[18-Oct-2017 23:18:37 UTC] PHP Parse error:  syntax error, unexpected '?' in phar:///usr/local/bin/wp/php/WP_CLI/Runner.php(1020) : eval()'d code on line 1\nEven if the wp-config.php has 777 permissions I get:\ncli\nDebug (bootstrap): No readable global config found (0.473s)\nDebug (bootstrap): No project config found (0.475s)\nDebug (bootstrap): argv: /usr/local/bin/wp core check-update --debug (0.475s)\nDebug (bootstrap): ABSPATH defined: /home/myproject/public_html/blog/ (0.495s)\nDebug (bootstrap): Begin WordPress load (0.496s)\nDebug (bootstrap): wp-config.php path: /home/myproject/public_html/blog/wp-config.php (0.496s)\nNotice: Use of undefined constant DB_USER - assumed 'DB_USER' in /home/myproject/public_html/blog/wp-includes/load.php on line 404\nNotice: Use of undefined constant DB_PASSWORD - assumed 'DB_PASSWORD' in /home/myproject/public_html/blog/wp-includes/load.php on line 404\nNotice: Use of undefined constant DB_NAME - assumed 'DB_NAME' in /home/myproject/public_html/blog/wp-includes/load.php on line 404\nNotice: Use of undefined constant DB_HOST - assumed 'DB_HOST' in /home/myproject/public_html/blog/wp-includes/load.php on line 404\nNotice: Undefined variable: table_prefix in /home/myproject/public_html/blog/wp-settings.php on line 109\nError: Error establishing a database connection. This either means that the username and password information in your `wp-config.php` file is incorrect or we can\u2019t contact the database server at `DB_HOST`. This could mean your host\u2019s database server is down.\nAfter try deleting the wp-config and generating a new one with:\ncli\nDebug (bootstrap): No readable global config found (0.397s)\nDebug (bootstrap): No project config found (0.4s)\nDebug (bootstrap): argv: /usr/local/bin/wp config create --debug --dbname=db_wp --dbuser=db_wpuser --dbpass=mypass --dbprefix=myprefix (0.4s)\nDebug (bootstrap): ABSPATH defined: /home/myproject/public_html/blog/ (0.423s)\nDebug (bootstrap): Running command: config create (0.428s)\nSuccess: Generated 'wp-config.php' file.\nI could update, but still says no wp-config found at first time:\ncli\nDebug (bootstrap): No readable global config found (0.459s)\nDebug (bootstrap): No project config found (0.462s)\nDebug (bootstrap): argv: /usr/local/bin/wp core check-update --debug (0.462s)\nDebug (bootstrap): ABSPATH defined: /home/myproject/public_html/blog/ (0.469s)\nDebug (bootstrap): Begin WordPress load (0.47s)\nDebug (bootstrap): wp-config.php path: /home/myproject/public_html/blog/wp-config.php (0.47s)\nDebug (bootstrap): Loaded WordPress (1.183s)\nDebug (bootstrap): Running command: core check-update (1.19s)\nSuccess: WordPress is at the latest version.\n. ",
    "halfgaar": "We also have problems writing to wp-cli-cacert.pem because we have multiple wordpress sites running, all as different user. The first one that creates the file, blocks the others. \nAnd, writing to a predictable name is a symlink attack vulnerability.\n. ",
    "acki": "+1\n. @danielbachhuber Plz reopen this ticket. It is not solved yet. (WP CLI 1.4.0). ",
    "skoblenick": "I would agree with @johnbillion your CLI should have a defined and consistent pattern for options not following the poor design choices made by existing tools/APIs/frameworks. For example the PHP string library, the naming conventions follow two completely different patterns simply because they were written by different people; i.e. str_replace and strpos. This subject was nicely covered by Kevin Lacker at Parse Developer Day 2013 in a talk about How to Design Great APIs.\n. ",
    "onimsha": "Yes, i mean there's an update for almost of my plugin , but it doesn't show in wp-cli .\nYou can see  the status on WP Admin page , most of them has new version .\n\n@jmslbam : wp plugin update --all show 0/0 Updated plugins , because wp-cli cannot get the status about new plugin version :) \n. Thanks @jmslbam  , it works correctly now :) . but is there anyway to update antivirus and/or better-wp-security with wp-cli  ? You have any idea about that ?\n. ",
    "elcapo": "Sorry if I'm bothering too much but, Is adding a defined( 'WP_CLI' ) check in the plugin the best approach to solve this issue? It maybe the best approach but I'm just wondering if it can also be a problem of the security context of WP-CLI.\nIn my instance, I'm logged in as admin who has id=1. If I navigate to the plugins page at the administration panel, I can see the updates even if Better WP Security is active (because it checks that I have manage_options permissions).\nWhat I can't understand is why, if I execute wp plugin list --user=1 I still can't see the updates. Shouldn't it be the same security context? It's wierd because if I run the command current_user_can( 'manage_options' ) in a wp shell --user=1, it answers bool(true).\nIs it possible that the parameter --user isn't always being taking into account?\n. (None of these instances is multisite).\n. ",
    "ryanjbonnell": "I encountered the same problem using WP-CLI v0.15 on Mac OS X 10.9 \"Mavericks\" \u2014 installing the nightly build fixed the problem.\nFatal error: Call to undefined function ngettext() in\nphar:///usr/local/bin/wp/php/commands/media.php on line 53\n. ",
    "phikai": "Confirming this does fix completion for myself in zsh.\n. ",
    "iamrobertv": "This fixes completion in zsh for me as well. Thanks!\n. ",
    "awkwardusername": "on WP-CLI 0.17.1, I'm getting this error too. Here's the output.\n```\n$ wp core download\nDownloading WordPress 4.0.1 (en_US)...\nFatal error: Uncaught exception 'UnexpectedValueException' with message 'DirectoryIterator::__construct(/tmp/wp_54871b8aa2cf1/): failed to open dir' in :\nStack trace:\n0 (): DirectoryIterator->__construct()\n1 (): FilesystemIterator->__construct()\n2 phar://wp-cli.phar/php/commands/core.php(197): RecursiveDirectoryIterator->__construct()\n3 phar://wp-cli.phar/php/commands/core.php(190): Core_Command::_copy_overwrite_files()\n4 phar://wp-cli.phar/php/commands/core.php(167): Core_Command::_extract()\n5 (): Core_Command->download()\n6 phar://wp-cli.phar/php/WP_CLI/Dispatcher/CommandFactory.php(52): call_user_func()\n7 (): {closure}()\n8 phar://wp-cli.phar/php/WP_CLI/Dispatcher/Subcommand.php(293): call_user_func()\n9 phar://wp-cli.phar/php/WP_CLI/Runner.php(304): WP_CLI\\Dispatcher\\Subcommand->invoke()\n10 phar://wp-cli.phar/php/WP_CLI/Runner.php(311): WP_CLI\\Runner->run_command()\n11 phar://wp-cli.phar/php/WP_CLI/Runner.php(52): WP_CLI\\Runner->_run_command()\n12 phar://wp-cli.phar/php/WP_CLI/Runner.php(599): WP_CLI\\Runner->do_early_invoke()\n13 phar://wp-cli.phar/php/wp-cli.php(20): WP_CLI\\Runner->before_wp_load()\n14 phar://wp-cli.phar/php/boot-phar.php(5): include()\n15 /usr/local/bin/wp(4): include()\n16 {main}\n```\nHHVM Version is,\n$ php --version\nHipHop VM 3.4.0 (rel)\nCompiler: tags/HHVM-3.4.0-0-g817b3a07fc4e509ce15635dbc87778e5b3496663\nRepo schema: 0e12aaa31fae66b5591f65603de50c9d62caafac\nExtension API: 20140829\nI can confirm that the tar.gz file is in /tmp/\n. ",
    "alexissusset": "It seems that this issue still exists, compiled wp-cli from github master code and still getting the following error:\nDownloading WordPress 4.2.1 (en_US)...\nFatal error: Uncaught exception 'UnexpectedValueException' with message 'DirectoryIterator::__construct(/tmp/wp_55474735c30a2/): failed to open dir' in :\nStack trace:\n0 (): DirectoryIterator->__construct()\n1 (): FilesystemIterator->__construct()\n2 /usr/local/php/commands/core.php(211): RecursiveDirectoryIterator->__construct()\n3 /usr/local/php/commands/core.php(204): Core_Command::_copy_overwrite_files()\n4 /usr/local/php/commands/core.php(181): Core_Command::_extract()\n5 (): Core_Command->download()\n6 /usr/local/php/WP_CLI/Dispatcher/CommandFactory.php(52): call_user_func()\n7 (): Closure$WP_CLI\\Dispatcher\\CommandFactory::create_subcommand()\n8 /usr/local/php/WP_CLI/Dispatcher/Subcommand.php(295): call_user_func()\n9 /usr/local/php/WP_CLI/Runner.php(304): WP_CLI\\Dispatcher\\Subcommand->invoke()\n10 /usr/local/php/WP_CLI/Runner.php(311): WP_CLI\\Runner->run_command()\n11 /usr/local/php/WP_CLI/Runner.php(52): WP_CLI\\Runner->_run_command()\n12 /usr/local/php/WP_CLI/Runner.php(608): WP_CLI\\Runner->do_early_invoke()\n13 /usr/local/php/wp-cli.php(20): WP_CLI\\Runner->before_wp_load()\n14 /usr/local/php/boot-fs.php(17): include()\n15 {main}\nThis issue happens when running Ubuntu 14.04.2 LTS with HHVM installed from http://dl.hhvm.com/ubuntu repository\n. ",
    "amadex": "Is there already any solution on this?... It seems the script tries to find a folder like \"/tmp/wp_55474735c30a2/\" when the folder that is uncompressed is \"/tmp/wordpress/\"...\n. ",
    "malfborger": "same issue on ubuntu with hhvm\n. ",
    "mosamlife": "same issue with hhvm \n. ",
    "chuckreynolds": "same\n. realizing now that's an old branch... is fixed in master branch. closing. \n. ",
    "Ore4444": "same\n. ",
    "clov3r": "Ah, ok! Well that's great. \nStill learning ;)\n. ",
    "aokolovskis": "Thanks, for the solution. \n. ",
    "filipiz": "Awesome...\nDidn't expected this fix so fast. Thanks!\nIs there a  date planned for the release of the next milestone with this fix included?\n. ",
    "JosefJezek": "No, this generate new config. I need manage existed config from cmd line.\n. ``` sh\nwp config get wplang\nwp config update wplang cs_CZ  # add or update and will convert to uppercase WPLANG\nwp config delete wplang\nwp config toggle wp_debug_display\n``\n.--path ../wp-config.php` for config outside base dir\n. Thank you for this tools.\n. ",
    "charleslouis": "Thanks @jmslbam and @scribu for your quick responses !\nWhatever the directory I move it to\n- I can run wp from anywhere in drive \"C:\" (where my home - usr/bin - ProgramData directories live)\n- However, no way to get it to work form anywhere in drive \"F:\" (where my Dropbox/wamp/wwww dir live)\nThe above is true if I add wp-cli-location/wp to the $PATH, store it on a directory mentionned in the $PATH (tried several) + create an alias alias wp='php /ProgramData/wp'\n...I don't have the problem with other cli tools so far.\nI won't give up but I'm a bit lost at that point.\nMany Thanks again.\nCharles\n. Thanks for your answer @szepeviktor !\nI can't skype at the moment but thank you for offering a hand !\n\n1) $PATH is for directories only, no files names: wp-cli-location/wp : \n\nGood point indeed, I didn't now that ! Thanks.\n\n2) to execute a phar archive you have to have a shell like bash or a batch file like\n\nI use cygwin (http://cygwin.com/) as a shell. So far I can execute wp-cli.phar from anywhere in C:. but I can't in F:.\nFollowing @scribu and @szepeviktor comments I've tried both of the following :\n- I've moved wp-cli.phar to different location already included in $PATH\n\n\nI've moved wp-cli.phar to c/wp-cli/wp and added c:/wp-cli to $PATH ++\nI've added an alias wp=\"php /wp-cli/wp\" \n\n\nAgain, results are still the same as before : if I cd F:/somedir; wpit works fine.\nBut if Icd F:/somedir ; wp I get Could not open input file: /wp-cli/wp\nI have two Php available. Can this have any influence ?\nOne is in /Php (PHP 5.3.6 (cli)). The second is /wamp/bin/php/php5.4.12/php (PHP 5.4.12 (cli))\n. > If is is inside cygwin - I suggest this path - alias wp='php /usr/local/bin/wp'\nThat's what I tried first. It works ... only in C:.\n\nIf it is on C: then alias wp='php /cygdrive/c/some-other-dir/wp'\n\nI've tried many times writing it that way with no success so far ...\n\nC:\\wamp\\bin\\php\\php5.4.12\\php.exe\n\nAND .... You've made my day !!\nUsing a windows-style notation in my alias did the trick !! \nalias wp='php C:/usr/local/bin/wp' instead of a linux-style onealias wp='php /usr/local/bin/wp \nThanks you so much for that tips. I've been struggling for so long getting it to work !\nNow when I test in wamp it throw and error \"stream_socket_client()\" but that is another story !\n. Quoting myself :\n\nNow when I test in wamp it throw and error \"stream_socket_client()\" but that is another story !\n\nSimply uncomment ;extension=php_openssl.dll in php.ini to enable ssl\n. A mess as you say !\nThanks again\n. Hi @jmslbam !\nThank for your quick answer.\nI've search around wp option with no success so far but now that I get your point I'm good.\nI didn't know we can find all available options per GUI op domain.com/wp-admin/options.php !\nwp option list would be a good fearture to have I guess.\nI whish I could build it but so far I don't know how to contribute.\nMay you have any tips for me to code for wp-cli I could give it a try...\nThanks again !\n. Thank you for all the work and advices !\n. ",
    "korney4eg": "So for now I install all plugins via wget and unzip them.\nTo install wordpress I use Chef Opscode. So WP-CLI used there to initial install wordpress and configuring it and activate only listed plugins. Whith example akimtest I meant that plugin name was misspelled and I would expect error, so installation fails. But I get only warning.\nI wold like to configure following:\nbash\nwp plugin activate right_plugin\nSuccess\nwp plugin activate misspelled_plugin\nError\nIs there any way to configure it somehow?\nNow I just see that all worked fine, without errors, but then I see on wordpress that some plugins were not installed.\nThank you.\n. ",
    "avaly": "Ahh, cool. Sorry for the noise then.\nWould be nice to have the MD5 checksum on the nightly build also, in order to be able to download it via saltstack or other tools which require checksums.\n. ",
    "doctordesh": "Hmm, you seem to be right. I don't get the errors when I'm setting up a new project. I'm at home now, let me check back at work tomorrow before you close the issue.\n. Hello again. It was a faulty wp-config file in my project. Sorry for this. Please close this issue. \n. ",
    "boonebgorges": ":thumbsup: \n. :kiss: \n. Yeah, let me first set up a couple vms to see if I can narrow down the\nversion where the problem was introduced.\nOn 05/14/2014 06:42 PM, Daniel Bachhuber wrote:\n\n@boonebgorges https://github.com/boonebgorges up for opening a ticket\non bugs.php.net? I'd classify this as a genuine bug, and it would be\ngood to see through to its completion.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/1208#issuecomment-43147254.\n. Yeah, that's kinda what I was thinking - looks at a glance like the main\nfeature of |update| is that it checks against the 'update_version'\nstring collected by WP's periodic checks against the plugin repo, but if\na version is specified, there's no reason to do this.\n\nOn 11/12/2014 11:17 AM, Daniel Bachhuber wrote:\n\nAlthough, |wp plugin update  --version=1.2.3| could just call\n|wp plugin install  --version=1.2.3| under the hood\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/1488#issuecomment-62744516.\n. I take it that these would be behat tests, right? Can you point me to\nthe proper place in the repo, so I can figure out how to do it properly?\n\nOn 11/24/2014 12:24 PM, Daniel Bachhuber wrote:\n\nCan you merge master to fix tests, and add some tests to cover this\nbehavior?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/1510#issuecomment-64229622.\n. Tests added in 6380146 and e492c44. \n. Yeah, good points @scribu. \n\nI'm going to go ahead and build a subcommand that scratches my particular itch. If others like it, maybe at some point it can be fleshed out for inclusion in wp-cli. Thanks for the feedback.\n. For anyone following this ticket: I created a very simple, inflexible version and put it on github at https://github.com/boonebgorges/wp-cli-git-helper. It's built very much with my specific use case in mind, so YMMV.\n. Done.\n. You mean on my branch? I guess because I rebased?\n. What's the difference? Less confusion for you? :) Thanks for the merge.\nOn 05/07/2015 10:13 PM, Daniel Bachhuber wrote:\n\nMerged #1823 https://github.com/wp-cli/wp-cli/pull/1823.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/1823#event-299862877.\n. Yeah, I know how rebases work, but I don't see how this particular \nrebase was destructive. Anyway, I will merge in the future.\n\nOn 05/08/15 09:00, Daniel Bachhuber wrote:\n\nWhat's the difference? Less confusion for you? :)\nRebasing is destructive, merging is not:\nhttps://www.atlassian.com/git/tutorials/merging-vs-rebasing/conceptual-overview\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/1823#issuecomment-100225362.\n. > Should we do the same for other core objects?\n\nThe only other core object type that respects wp_suspend_cache_invalidation() is posts. But (a) clean_post_cache() doesn't accept an array of IDs like clean_term_cache() does, meaning we'd have to patch core or reproduce much of the function in order to avoid looping through it, and (b) clean_post_cache() doesn't regenerate a hierarchy like in the case of terms, which means there's very little overhead. So, no, I don't think it's necessary.\n. Because I hadn't thought of it. Updated PR.\n. ",
    "joshlevinson": "http://environmentvariables.org/HomePath\nhttp://www.wilsonmar.com/1envvars.htm\nBoth suggest that HOMEPATH has an opening slash all the way back to Windows XP, so this fix should be ok.\n. Example: wp export --post__in=\"$(wp post list --channel=opinion --posts_per_page=5 --format=ids)\"\nwhere opinion is a term in the custom channel taxonomy\n. ",
    "quacos": "I found out why after enabling display_errors\nWarning: proc_open() has been disabled for security reasons\n. ",
    "samstoller": "Good thinking. Almost worked. Ran into path issues with the wp-settings.php file (ie. it's not being skipped and throws a \"No such file\" warning).\n. Sure thing.\nThe reason for these changes is I've installed WordPress as a git submodule. This requires a bit of modification to how things are normally set up. I will share with you my install process, which may seem a bit convulted at first but it's really quite simple. I also use a custom shell script to deploy so I've automated the entire process. If you search for installing WP as a submodule you will find plenty of developers doing the same thing so it's not such an unsual way of going about installing WP these days as it has many benefits.\nHere's a simplified version of my install script: https://gist.github.com/samstoller/3f080f65d4126fe5b9c5\nOnce you've got the correct layout, try using wp-cli and you will find that it struggles with the config file path. To get around this for now, I forked the wp-cli repo, made some hacky changes to the core so it looks in my custom conf/ dir and compiled the tool and everything seems to work pretty well. This lead me to thinking a config path option would work.\n. Yes, that's the error I receive.\nSo I tried the idea of tricking WP-CLI into thinking it has found the line with wp-settings.php. The regex prevents anything but spaces before the require statement which made the solution a bit evasive at first, but I worked it out to:\n/*\nrequire-wp-settings.php\n*/\nSo I ran a command and got a 'Cannot redeclare' type error and realized that when WP-CLI parses the actual config file it doesn't skip the call to wp-settings.php on the second time round thereby including wp-settings.php when it's not supposed to.\nThe same issue happened when I tried the --require attribute. Essentially there's no way to skip the loading of wp-settings.php.\nIdeally, it would be great to see locate_wp_config() (ref) consult a setting before searching other file paths.\n. Exactly right. I made a gist for this for anyone still having trouble. HTH.\nhttps://gist.github.com/samstoller/efc38eb309e62df392ea\n. ",
    "orev": "This is causing issues for me as well, as I have my wp-config in /etc/wordpress and I'm using a stub wp-config to load it from there using require_once.\nI see that this is closed, but I don't think it's uncommon to want to move the wp-config outside of the web directory.\n. ",
    "kevin-coyle": "Yeah I'm having the same issue as this. I really would like to keep the wp-config outside of a directory that apache can read to.\n. ",
    "credwards27": "@orev @kevin-coyle\nAs @danielbachhuber said, the stub wp-config.php file needs to have the following line in it for WP-CLI to parse it correctly:\nphp\nrequire_once( ABSPATH . 'wp-settings.php' );\nRemove that line from your custom wp-config.php (outside web root), and place it after the require_once statement in your wp-config.php stub. As long as the stub is in the same directory as the rest of Wordpress core, WP-CLI shouldn't have any issues.\n. @dweidner I suspect you and I have the same issue. Assuming you left the Bootstrap Wordpress section of the Wordpress Skeleton custom wp-config.php unchanged, the issue seems to be with the last line of that file:\nphp\nrequire_once( ABSPATH . 'wp-settings.php' );\nRemove that line from the custom wp-config.php file in your site root (from Wordpress Skeleton) and add it to the end of a wp-config.php stub file that you will need to create inside the wp/ subdirectory. (Yes, this is a little messy since Wordpress is a submodule, but it gets the job done and will survive submodule updates.)\nThe stub wp/wp-config.php file:\nphp\n<?php\nrequire_once(dirname(__DIR__)) . \"/wp-config.php\");\nrequire_once(ABSPATH . 'wp-settings.php');\nThat should get WP-CLI up and running as it will properly load wp-settings.php and you won't run into function redefinition issues by wp-settings.php being loaded twice.\nHopefully this helps you or anyone else who might come across this thread with the same problem.\n. ",
    "gilzow": "I know this closed but add another +1 to the request to allow us to define the location of wp-config.php via parameter.. Nothing like raising an issue from the dead, but I too am running into the exact same issue.  We have several instances of files/folders that are locked where wp-cli is not able to access them which causes a hard fail when trying to verify checksums.  Interestingly enough, these are files/directories completely unrelated to the WordPress install.  \nIs there a reason why wpcli doesnt use RecursiveIteratorIterator::CATCH_GET_CHILD?. Here you go. Hopefully nothing in the transfer changed the line endings\nmsa-wp-config.txt\n. ",
    "JonathanReeve": "I was directed here from this StackOverflow question where I'm trying to add an RSS widget using the --url flag, unsuccessfully. Is there a workaround for this? \n. ",
    "alessandrotesoro": "Fixed by adding to the bash profile\nexport PATH=$PATH:/Applications/MAMP/Library/bin/\n. I'm having the same issue and using mamp too, any suggestion?\n. I'd be happy to help with the Italian translation, there's just a problem, I'm going on holiday next week and I'll be back end of August. If by then you haven't found anybody, just let me know \ud83d\udc4d \n. ",
    "dendeffe": "Thanks for posting the solution. Worked for me.\n. ",
    "jepser": "So much thanks man! Worked for MAMP PRO in El Capitan.\n. ",
    "krajinovicm": "Thank you!. ",
    "lufox": "Oh my... It was indeed a problem with the wp-config. It started with an incomplete php tag:\nThere was <? instead of <?php\nNow, it works like a charm! Thank you guys :)\nThanks a lot!\n. ",
    "TrilipuT": "scribu, --quiet just hides Success: Made 10 replacements. message. And it doesn't work if i pass it in WP_CLI::run_command();\nLike\nWP_CLI::run_command(array(\n    'search-replace',\n    $from,\n    $to\n), array('recurse-objects' => true, 'quiet' => true));\n. ",
    "toby-griffiths": "@danielbachhuber I use $ php -a\nHere's the output of the wp --info command...\n$ wp --info\nPHP binary: /opt/boxen/phpenv/versions/5.4.10/bin/php\nPHP version:    5.4.10\nphp.ini used:   /opt/boxen/config/php/5.4.10/php.ini\nWP-CLI root dir:    /opt/boxen/homebrew/Cellar/wp-cli/0.15.0\nWP-CLI global config:   /Users/toby/.wp-cli/config.yml\nWP-CLI project config:  \nWP-CLI version: 0.15.0\nAnd here's some other useful info...\n```\n$ which php\n/opt/boxen/phpenv/shims/php\n$ cat /opt/boxen/phpenv/shims/php\n!/usr/bin/env bash\nset -e\n[ -n \"$PHPENV_DEBUG\" ] && set -x\nprogram=\"${0##/}\"\nif [ \"$program\" = \"php\" ]; then\n  for arg; do\n    case \"$arg\" in\n    -e | -- ) break ;;\n    / )\n      if [ -f \"$arg\" ]; then\n        export PHPENV_DIR=\"${arg%/*}\"\n        break\n      fi\n      ;;\n    esac\n  done\nfi\nexport PHPENV_ROOT=\"/opt/boxen/phpenv\"\nexec \"/opt/boxen/phpenv/libexec/phpenv\" exec \"$program\" \"$@\"\n$ php -i | grep \\.ini\nConfiguration File (php.ini) Path => /opt/boxen/config/php/5.4.10\nLoaded Configuration File => /opt/boxen/config/php/5.4.10/php.ini\nScan this dir for additional .ini files => /opt/boxen/config/php/5.4.10/conf.d\nAdditional .ini files parsed => (none)\nuser_ini.filename => .user.ini => .user.ini\n```\n. ",
    "bjshirey": "how does this work? When I run the search-replace command, the --url parameter doesn't appear to be supported.\n. ",
    "ScreamingDev": "It's wp something something --prompt ... nevermind :D\n. Just found this in a \"behat.php\":\nif ((!$loader = includeIfExists(__DIR__.'/../vendor/autoload.php')) && (!$loader = includeIfExists(__DIR__.'/../../../autoload.php'))) {\n    fwrite(STDERR, '...);\n    exit(1);\n}\n. Almost latest:\nPHP binary:     /usr/bin/php\nPHP version:    5.5.20\nphp.ini used:   /etc/php.ini\nWP-CLI root dir:        .../Sites/foo/vendor/wp-cli/wp-cli\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.19.0\n. Thanks for merging so fast! :)\nLooking forward for the release.\n. wp 0.22.0 on Ubuntu 15.10:\nwp plugin delete hello\nWorks fine - the plugin exists and is gone afterwards. No problems here. This commands runs almost every day for some weeks now on our server.\nBut after that / when plugin is gone:\nwp plugin delete hello\necho $?\nShows a 255 error without any messages.\n. I really like to use this command for testing (CI) if the core has been changed by accident or other stupid reasons. By hand I can ignore them but for automation it's a bit harder.\nUnfortunately the return code is \"1\" no matter what the error or warning is about.\nIn this case some files are okay for being deleted while all other shall still be checked against the checksum.\n. It's to obscure information for security reasons. WPScan for example complain about those files as well as iThemes Security does. So having a bit of flexibility or multiple exit codes would be great.\nIn addition: Security plugins suggest to delete them.\n. Your commit for ~1.0.0-beta still blocks an update from 0.22 to 0.23 unless the\nminimum-stability is set to beta.\nOne step forward but still unusable for production which only wants stable releases unless composer itself is stable.\nSad for me because I really like to see my fix for the vendor-dir ;) So I need to wait for the release of composer 1.0.0\n. Thanks @wesm87 . Or \"composer/composer:1.0.0-alpha11\" as wp-cli is using this particular release.\nThat's what I did yesterday. It doesn't feel good but solves it until composer has some final release.\n. Okay. I investigated further.\nThis is the call stack until I check for DOING_CRON:\n- vendor/wp-cli/wp-cli/php/boot-fs.php:17\n- vendor/wp-cli/wp-cli/php/wp-cli.php:21\n- vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php:755\n- vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php:807\n- vendor/wp-cli/wp-cli/php/wp-settings-cli.php:287 (this part loads all plugins via wp_get_active_and_valid_plugins() )\n- after here comes my plugin, loading cron jobs / looking for DOING_CRON\nDOING_CRON is not defined there. The wp-cli part https://github.com/wp-cli/wp-cli/blob/master/php/commands/cron.php#L227-L229\ncomes later.\nIt should be moved to an earlier position before loading the plugins. The source looks like that:\n``` php\n<?php\nif ( ! defined( 'DOING_CRON' ) || ! DOING_CRON ) {\n    // no need for this part, when cron is not running\n    return;\n}\nfunction my_plugin_cron_foo() {\n// ...\n```\n. You know that I write packages and bin thingys too.\nWhat I do is basically (no good code, just an example):\n$dir = __DIR__;\n$composer = [];\nwhile ('/' !== $dir = dirname($dir)) {\n  if (fileexists($dir . '/composer.json')) {\n    $composer[] = $dir;\n  }\n}\nOne of that is the answer. Maybe the one that is close to getcwd. \nYes, all packages should not solve it like that. This is a composer issue. But as long as everyone bitch around I hope wp-cli adapt some solution here.. ",
    "mAAdhaTTah": "@danielbachhuber  I'm getting this issue reported here: https://github.com/mAAdhaTTah/WP-Gistpen/issues/25 - I can't reproduce yet though. Can this be reopened?\n. Yeah, I'm not sure this is possible, or at least not easy.\n. Awesome, thanks for your help.\n. Sweet, thanks.\n. I don't know if this counts as a bug, but if I have wp-cli required as a dependency for a plugin I'm working on, which is installed in a WordPress install, and I run wp-cli from a globally installed phar, I've gotten some either class missing or cannot redeclare class errors (can't remember offhand).\nWhich means I haven't been requiring wp-cli as a dev dependency in my plugins.\nI like the idea of having the test installer as a wp-cli command, but the way it's currently autoloaded conflicts when it's a plugin dependency. Also, does wp-cli only function within a Wordpress context? How would this work for running the installer for plugin tests?\n. > Why does WP-CLI gets loaded inside the web requests context? We never require it anywhere so it's loaded by itself?\nYes, that's what an autoloader does.\nUnfortunately, Spyc looks like abandonware at this point, so I don't see any chance of that PR getting merged and the Spyc-related issues being resolved. However, I have had similar issues as you're describing attempting to use WP-CLI as a composer dev dependency for a plugin. I gave up trying to load it as a project dep that way and just keep it installed globally only.\n. ",
    "beckspaced": "hello daniel ;-)\nthanks a lot for your fast reply!\nactually not sure if my enviroment is unique? it's an opensuse box 12.2\nwp --info gives the following output:\n\nex4:~ # wp --info\nPHP binary:\nPHP version:    5.3.15\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.15.1\n\n\ni tried another command as the default one didn't work:\n\n\nwp comment delete $(wp comment list --status=spam --fields=comment_ID)\n\n\nwith this command it gave me a warning that it cannot delete a comment with ID 'comment_ID', the table outut column, but after that it deleted all the comments the right way:\n\n\nSuccess: Deleted comment 1.\nSuccess: Deleted comment 2.\nSuccess: Deleted comment 3.\n\n\netc ...\ni was looking to write a small shell script with wp-cli to delete all spam comments on a multisite wordpress install. something like this:\n\n\nwp comment delete $(wp comment list --status=spam --format=ids) --url=domain.com/site1\nwp comment delete $(wp comment list --status=spam --format=ids) --url=domain.com/site2\nwp comment delete $(wp comment list --status=spam --format=ids) --url=domain.com/site3\n\n\nbut as far as i remember wp-cli sort of complained about the --url param with the comment delete command ... i think it doesn't recognize the --url param?\ndo you think a shell script with wp-cli is possible to delete the spam comments via a daily cron job?\nthanks a lot for your ideas and time!\ngreetings\nbecki\n. hello there ;-)\n@rodrigoprimo well, to be honest i didn't dig any deeper into the issue as my general plan to use WP-CLI on a multisite install to delete SPAM comments for each site in the network doesn't seem to be possible at the moment ...\ni thought of using a command like this for each site in the netwrok in a cronjob\nwp comment delete $(wp comment list --status=spam --format=ids) --url=domain.com/site1\nwp comment delete $(wp comment list --status=spam --format=ids) --url=domain.com/site2\nwp comment delete $(wp comment list --status=spam --format=ids) --url=domain.com/site3\nmentioned here: https://github.com/wp-cli/wp-cli/issues/1240\nso instead i wrote a small PHP script, which gets all sites in the network and then loops through each site and deletes all comments marked as spam.\ni also didn't upgrade PHP to a more recent version. the latest one i got is 5.4.20 and if i find time for testing i will report back ;-)\nanyway ... really thanks for such a nice piece of software\ngreetings\nbecki\n. @szepeviktor just to reconfirm. installed the latest nightly build 0.17.0 and running the following command:\nwp comment delete $(wp comment list --status=spam --format=ids)\ndeleted all SPAM comments as expected:\nSuccess: Deleted comment 49395.\nSuccess: Deleted comment 49394.\nSuccess: Deleted comment 49393.\netc .. etc ... etc\nso ... problem solved ;-)\nthanks & all the best\n. ",
    "rdswd": "-rw-r--r-- 1 www-data www-data 2.3K Aug  6  2013 hello.php\n. Different user. Not root. Do I simply need to chown wp-cli with www-data? \nE.g. in /usr/local/bin \nPermissions:\n-rwxrwxr-x 1 nonroot  nonroot  2.1M Jun 19 12:42 wp \n. sudo -u www-data wp plugin delete hello works. I guess I'm not positive how to change the correct ownership so I don't have to use the sudo -u www-data for all wp commands\n. ",
    "boreal321": "Hi @jmslbam!\nYes, I can install a vagrant based VM. Do you have a vagrantfile I can use?\nBTW, I've tested this on 2 different VMs. One on Digital Ocean and the other on some private hardware running Xen. Exactly the same results. Odd eh. Or as Scoob would say, \"Ruh roh, Raggy!\"\nCould I be missing a PHP module? Are the full requirements for wp-cli available anywhere?\n. @danielbachhuber, you bet. Let me know what I can do.\n. Here's the php -i output\nhttps://gist.github.com/boreal/b5b1f9055d1e2c1d3bfe\n. @danielbachhuber I'm not sure what I need to do to debug further. Reflection is built into PHP and there's no config associated so it would seem I have the required parts.\n. @danielbachhuber, will do. Thanks!\n. I spun up a new VM and ran my ansbile playbook on it task by task which helped me discover the culprit. Turns out it was the opcache.ini config that caused the issue. The default install of php includes an empty (or disabled) opcache.ini but my playbook copies a custom opcache config for the PHP-FPM service. The /etc/php5/cli/conf.d directory contains symlinks to the same mods-available directory as the fpm config so php on the command line loads the opcache module and config. After I deleted the symlink to the opcache.ini wp-cli started to produce the expected output.\n. Good question. I will re-enable the opcache for the cli and go through it line by line.\n. opcache.save_comments = 0\nMakes sense, eh. Setting it to 1 also fixes the issue. Here's my working config:\nzend_extension=opcache.so\nopcache.memory_consumption=1024\nopcache.interned_strings_buffer=16\nopcache.max_accelerated_files=50000\nopcache.save_comments=1\nopcache.load_comments=0\nopcache.fast_shutdown=1\nopcache.revalidate_freq=60\nopcache.enable_cli=1\nopcache.error_log=\"/var/log/php-opcache-errors.log\"\n. Oops, forgot to mention... scooby dooby doo!\nGuys, thanks for responding and not leaving me out to dry. This project is just so freakin great.\n. ",
    "iam-merlin": "Thx for the quick answer.\nReasons are multiple.\n1. .phar must be update manually (self-update required).\n2. I use WP-CLI with composer for dependencies\n3. WP-CLI is used in custom task  (phing). If I used shell_exec or any exec I will add multiple dependencies (php cli path, shell etc...)\n4. I'm creating a POC for creating, building and deploying wordpress website, for that, my build env is himself a php project (reusable ofc) but tools come from a composer repository and I can update WP-CLI in the same command that's cool\n5. Usi wp-cli as a requirement, I can extend easily wp-cli and for example create wp-cli command (must be verify)\nIf it's achievable using shell exec('...');it's completely possible... but the WP-CLI will fit to my POC but not really integrated.\nps: hope my english is not awful and understandable... \n. Seems the is no quick way :/\nI think we can close this topic.\n. No problem and thank you again. I will try and give you feedback. Should be interesting ;)\nRomain Dary\n\nOn 3 juil. 2014, at 07:01 PM, Daniel Bachhuber notifications@github.com wrote:\nClosed #1245.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "MatthewEppelsheimer": "Updated my 'better' example to only display the warning if WP_DEBUG is true. \nBut, @drewapicture brought to my attention that this still may not be ideal, because it's an interface solution for what's really a code issue\u2026 I'm opening a Trac ticket to propose throwing _doing_it_wrong() the slug exceeds 20 characters, which would obviate the need for this. \n. @jmslbam I agree that makes sense, especially if my _doing_it_wrong() patch or something similar does end up in core. I'd like to leave this open until that gets some resolution.\n. FYI https://core.trac.wordpress.org/ticket/28683\n. No kidding! Since my patch on the Trac ticket has been committed (modified a bit) and should ship with WP v4.0, I will close this issue out. Much better resolution. #1256 remains relevant, and I'll submit a PR in a day or so. \n. Same problem with Query Monitor, which also calls register_activation_hook() from inside of a class. (Related WP.org support ticket)\nIs putting register_activation_hook() inside of a class really a bad practice? It seems common. Is the __construct() method's protected keyword the problem?\n. ",
    "lkwdwrd": "@TheLastCicada and @santagada - I fixed the behat test, the extra table row to indicate use of the fast s/r options was throwing things off. In addition I've added a scenario to test various situations with fast s/r with flags and string length.\nSpeaking of which, if the string length of the search term and replace term are the same, I switched it to always use the fast version since it wont affect serialized data. The mb_strlen is much more accurate with utf-8 than strlen which can report different lengths for non-standard characters.\n. In making some of the adjustments @danielbachhuber suggested, I found an inconsistency with the all fast search and replace triggered by input strings of the same length. It doesn't hurt the serialization, exactly, it unserializes just fine. However, it affects keys since these are in the string.\nThe PHP search-replace method does not replace search terms in array/object keys, while the SQL only version for string of the same length does replace keys. Thinking through, I think the PHP version of not affecting keys is preferable, so the SQL only replace should be pulled, but wanted to get opinions.\ncc/ @TheLastCicada @santagada \nEXAMPLE:\nGiven a serialized version of\nphp\narray(\n  'test' => 'mytest'\n);\nwhen we run PHP search-replace\nbash\nwp search-replace --safe test same\nwe get\nphp\narray(\n  'test' => 'mysame'\n);\nbut when we run SQL search-replace\nbash\nwp search-replace test same\nwe get\nphp\narray(\n  'same' => 'mysame'\n);\n. @danielbachhuber took out the check for same length strings and renamed methods and functions to 'php' and 'sql' instead of 'fast'. Also changed the flag to --precise instead of --safe to make it clearer what is going on.\nLooks like merging master back in makes the diff look right.\nProps to @tddewey for actually making the changes, since my arm is broken and I can't code.\n. ",
    "felnne": "Sorry, i'm an idiot,\nI hadn't properly echoed out a template variable - should of checked, sorry!\n. ",
    "odesk2dot2by": "Yeah, seems it is not issue, seems false positive with patched file. My mistake. It may be closed without comments. sorry\n. ",
    "ziodave": "Ok, it's understandable. An alternative solution would be to change line 45 from svn co --quiet http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ to svn co --quiet -r 28964 http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ to avoid checking out the code with the issue, as a temporary fix until https://core.trac.wordpress.org/ticket/28738 is solved.\nWould that be an option?\n. Okie dokie.\n. hello @danielbachhuber, just to let you know that the issue has been fixed in the WordPress repo.\n. ",
    "billerickson": "thanks!\n. ",
    "msundquist": "\nYou'll want to make sure wp is available on cron's PATH. Alternatively, try specifying the full path to wp\n\nThanks for chiming in. I've tried the full path (crontab entry updated in my original post.) Same results: works fine when executed directly from the command-line but no joy when executed via the crontab entry.\nI've done quite a bit of searching for similar symptoms, and I notice there isn't much in the way of WP-CLI + cron discussion (everything seems to be specific to WP-Cron.) As a sanity check, I'm wondering if you or anybody else has had any success using WP-CLI+eval-file together with cron.\nUPDATE:\nPotentially related. I'm noticing this warning when I pipe the cron output to disk:\nWarning:  fwrite() expects parameter 1 to be resource, string given in phar:///usr/local/bin/wp/php/WP_CLI/Loggers/Regular.php on line 12\nI'm not sure if the above warning would indicate any critical failure with WP-CLI, but at least I know that WP-CLI is doing something. I'm using the latest version of WP-CLI (0.16). Perhaps STDOUT isn't defined for some odd reason when run via cron?\n. The crontab entry was originally running using the appropriate non-root user, but I decided to fall-bak to root as a way to rule out permissions issues. Same symptoms no matter what user the crontab is run (and again, normal expected operation when I run directly via the command line while logged in is that user.)\nI've widdled the script down to basically nothing as a way to test:\nphp\n<?php error_log( time(), 3, __DIR__ . '/' . 'test.log' );\nWith what version of PHP were you testing? I'm currently running PHP 5.5.12.\n. Confirmed the script does run properly when run directly via PHP through cron. At this point I'm inclined to believe this issue is specific to my server/configuration.\nWould you mind providing the crontab entry which you tested successfully?\nAlso are you seeing the same warning if you pipe the cron output?\nWarning: fwrite() expects parameter 1 to be resource, string given in phar:///usr/local/bin/wp/php/WP_CLI/Loggers/Regular.php on line 12\n. Testing these crontab entries:\n* * * * 1-5 /usr/local/bin/wp cli version >> /home/test_site/public_html/test.log 2>&1\n* * * * 1-5 cd /home/test_site/public_html/ ; /usr/local/bin/wp eval 'echo __DIR__;' >> /home/test_site/public_html/test.log 2>&1\nOutput I'm seeing in test.log:\n```\nX-Powered-By: PHP/5.5.12\nContent-type: text/html\nWP-CLI 0.16.0\nX-Powered-By: PHP/5.5.12\nContent-type: text/html\n\nWarning:  fwrite() expects parameter 1 to be resource, string given in phar:///usr/local/bin/wp/php/WP_CLI/Loggers/Regular.php on line 12\n```\nIf I run this command directly:\ncd /home/test_site/public_html/ ; /usr/local/bin/wp eval 'echo __DIR__;'\nstdout as expected:\nphar:///usr/local/bin/wp/php/commands\nWP-CLI itself appears to work fine - the trouble seems to be with WP-CLI eval/eval-file in the context of cron execution. So it seems that it might possibly be an issue with PHP 5.5.12. I will fiddle with the source and see if I can come to a resolution. Thanks for your assistance. I'll let you know if I discover anything.\n. > Oh, another idea \u2014 there's actually an error happening, and WP-CLI is failing to output it because STDERR isn't available. Can you test if this is the case?\nHmm, perhaps that explains the warning I'm seeing in the output:\n<b>Warning</b>:  fwrite() expects parameter 1 to be resource, string given in <b>phar:///usr/local/bin/wp/php/WP_CLI/Loggers/Regular.php</b> on line <b>12</b><br />\nReviewing Regular.php, this is intending to print some log output. The warning indicates to me that STDOUT isn't available - but perhaps under that warning is an error being raised, and the warning is just a side-effect of WP-CLI trying to log said error.\nTrying to figure out a way to test this. I will hopefully report back shortly.\nUPDATE:\nConfirmed STDOUT/STDERR is not available when WP-CLI eval/eval-file is executed via cron. This is troublesome when troubleshooting/debugging via cron, as errors will not be properly displayed/logged. (This appears to be normal operating behavior in all versions of PHP where a script is read using stdin.)\nThe actual error which wasn't being reported:\nError: This does not seem to be a WordPress install.\nPass --path=`path/to/wordpress` or run `wp core download`.\nUPDATE:\nUltimately the cause of my issue was that I needed to have the actual Wordpress installation in a nested directory, e.g., /home/test_site/public_html/wordpress/ with the front-controller at /home/test_site/public_html/index.php, and the wp-content directory at /home/test_site/public_html/content/. In the crontab, changing directory with cd does not seem to work with this particular structure (I also tried the && boolean operator). Resolved by using the --path argument instead.\nMy final crontab entry:\n* * * * 1-5 /usr/local/bin/wp --path=\"/home/test_site/public_html/wordpress/\" eval-file /home/test_site/public_html/content/scripts/my-script.php 2>&1\nThanks very much for your help!\n. Relevant information here:\nhttp://php.net/manual/en/features.commandline.io-streams.php\nRegarding STDOUT/STDERR:\n\nThese constants are not available if reading the PHP script from stdin.\n\nI'm assuming this is the case when we eval-file a PHP script using WP-CLI via cron.\n. @danielbachhuber Yes, FastCGI.\n. ",
    "ambrosiawt": "For what it's worth, I just last night implemented a new crontab with eval-file and got this result on php 5.3.26, plus the file being evaluated is NOT processed. \nArt Smith, Owner\nAmbrosia Web Technology, LLC\n515-491-8747\nart@ambrosiawt.com\nhttp://ambrosiawebtechnology.com\n\nOn Jul 18, 2014, at 10:22 AM, msundquist notifications@github.com wrote:\nTesting these crontab entries:\n- * * * 1-5 /usr/local/bin/wp cli version >> /home/test_site/public_html/test.log 2>&1\n- * * * 1-5 cd /home/test_site/public_html/ ; /usr/local/bin/wp eval 'echo DIR;' >> /home/test_site/public_html/test.log 2>&1\n  Output I'm seeing in test.log:\nX-Powered-By: PHP/5.5.12\nContent-type: text/html\nWP-CLI 0.16.0\nX-Powered-By: PHP/5.5.12\nContent-type: text/html\n\nWarning:  fwrite() expects parameter 1 to be resource, string given in phar:///usr/local/bin/wp/php/WP_CLI/Loggers/Regular.php on line 12\nIf I run this command directly:\ncd /home/test_site/public_html/ ; /usr/local/bin/wp eval 'echo DIR;'\nstdout as expected:\nphar:///usr/local/bin/wp/php/commands\nWP-CLI itself appears to work fine - the trouble seems to be with WP-CLI eval/eval-file in the context of cron execution. So it seems that it might possibly be an issue with PHP 5.5.12. I will fiddle with the source and see if I can come to a resolution. Thanks for your assistance. I'll let you know if I discover anything.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks!  Using the path= fixed this for me as well!\n. \n",
    "bendoh": "+1 can confirm this behavior and that using --path fixes it. \nEven when my shell script cd'd into the WordPress root before running the wp command...\n. +1 this change please!\n. ",
    "ronshe": "Regarding STDOUT/STDERR, I created a script to solve this:\n```\n!/bin/bash\nSuppress errors by including this generated file\necho \"<?php if(!defined('STDIN'))  define('STDIN',  fopen('php://stdin',  'r')); if(!defined('STDOUT')) define('STDOUT', fopen('php://stdout', 'w')); if(!defined('STDERR')) define('STDERR', fopen('php://stderr', 'w')); error_reporting(0); @ini_set('display_errors', 0);\" > /tmp/__pre.php\nowner=stat -c %U .\nsudo -u $owner /usr/local/bin/wp --path=$PWD --color --require=/tmp/__pre.php $*\nrm -f /tmp/__pre.php\nexit\n```\n. I'm glad that I could help :)\n. ",
    "itsravenous": "@ronshe that worked for me - thanks so much!\n. ",
    "ibertrix": "Not sure if it is related but trying to run:\n* * * * 1-5 /usr/local/bin/wp --path=/home/myuser/public_html/wordpress core version >> /root/test.log 2>&1\nand I\u00b4m getting in test.log:\nContent-type: text/html; charset=UTF-8\nIt\u00b4s what I\u00b4m getting from any bash script with wp-cli commands. Those scripts run fine from command line:\n```\n!/bin/bash\nWP=/usr/local/bin/wp\narray=($(find /home -maxdepth 6 -type d -name 'wp-content' -exec dirname {} \\;))\nfor x in ${array[@]} ;do\n echo \"Checking:\" $x\n $WP --allow-root --path=$x core version \ndone\n```\n. Thanks! Ok, I was using only wp db size --all-tables.\nThe help is confusing:\nwp db size [--size_format] [--tables] [--format] [--scope=] [--network] [--all-tables-with-prefix] [--all-tables]\nit seems that --all-tables is an alternative to --tables option. Doesn\u00b4t make sense to change --tables option to --core-tables? Doesn\u00b4t make sense to use either --tables or --all-tables? Just a question of economy. What\u00b4s the difference between --all-tables-with-prefix and --all-tables? I don\u00b4t see any difference in the output.... ",
    "theMikeD": "How about an option to read and use WP_SITEURL, WP_HOME, WP_CONTENT_URL and WP_CONTENT_DIR when they are set in wp-config.php? Pretty sure it would solve this issue in one step.\n. php\nadd_action( 'init', 'md_create_type_taxonomy', 0 );\nfunction md_create_type_taxonomy()  {\n    $labels = array(\n        'name'                       => _x( 'Types', 'Taxonomy General Name', CF_TXT ),\n        'singular_name'              => _x( 'Type', 'Taxonomy Singular Name', CF_TXT ),\n        'menu_name'                  => __( 'Types', CF_TXT ),\n        'all_items'                  => __( 'All Types', CF_TXT ),\n        'parent_item'                => __( 'Parent Type', CF_TXT ),\n        'parent_item_colon'          => __( 'Parent Type:', CF_TXT ),\n        'new_item_name'              => __( 'New Type Name', CF_TXT ),\n        'add_new_item'               => __( 'Add New Type', CF_TXT ),\n        'edit_item'                  => __( 'Edit Type', CF_TXT ),\n        'update_item'                => __( 'Update Type', CF_TXT ),\n        'separate_items_with_commas' => __( 'Separate Types with commas', CF_TXT ),\n        'search_items'               => __( 'Search Types', CF_TXT ),\n        'add_or_remove_items'        => __( 'Add or remove Types', CF_TXT ),\n        'choose_from_most_used'      => __( 'Choose from the most used Types', CF_TXT ),\n        'popular_items'              => __( 'Popular Types', CF_TXT ),\n        'not_found'                  => __( 'No Types found', CF_TXT ),\n        'view_item'                  => __( 'View Type', CF_TXT ),\n    );\n    $rewrite = array(\n        'slug'                       => 'story-types',\n        'with_front'                 => false,\n        'hierarchical'               => true,\n    );\n    $args = array(\n        'labels'                     => $labels,\n        'hierarchical'               => true,\n        'public'                     => true,\n        'show_ui'                    => true,\n        'show_admin_column'          => true,\n        'show_in_nav_menus'          => true,\n        'show_tagcloud'              => false,\n        'rewrite'                    => $rewrite,\n        'query_var'                  => true,\n        'args'                       => array( 'orderby' => 'term_order' ),\n    );\n    register_taxonomy( 'typetax', 'post', $args );\n}\nadded to functions.php of clean 4.1.1 twentyfifteen with no plugins yields an error. Note that i made one change: that it applied to posts rather than a CPT for simplicity's sake.\n. 31-Mar-2015 03:56:46 Europe/Berlin] PHP Notice:  Undefined index: HTTPS in phar:///usr/local/bin/wp/php/wp-cli.php(23) : eval()'d code on line 22\n[31-Mar-2015 03:56:46 Europe/Berlin] PHP Notice:  Undefined index: SERVER_NAME in phar:///usr/local/bin/wp/php/wp-cli.php(23) : eval()'d code on line 23\nFrom my console. Note that these lines also appear when a successful insertion is done using post_tag\n. wp-config.php in case it's relevant\n``` php\n// Note that $_SERVER['DOCUMENT_ROOT'] will return a string with a trailing slash on\n//  some systems and not others, so we'll make sure it's gone in all cases where there\n//  is ambiguity by using rtrim.\n// Also note that this is above the loading of the wp-config-*.php files so that these can\n//  be over-ridden as required.\n$md_http = ($_SERVER['HTTPS']) ? 'https://': 'http://';\n$md_server_name = rtrim($_SERVER['SERVER_NAME'],\"/\");\n$md_document_root = rtrim($_SERVER['DOCUMENT_ROOT'],\"/\");\n// The wordpress install is in its own folder, so we force that setting here\ndefine('WP_SITEURL', $md_http . $md_server_name . '/wordpress');\ndefine('WP_HOME',    $md_http . $md_server_name);\n// The wordpress wp-content folder is outside of the git WordPress submodule so\n//     tell WP where it is. These may have to be set manually in some cases\ndefine('WP_CONTENT_URL', $md_http . $md_server_name . '/wp-content');\ndefine('WP_CONTENT_DIR', $md_document_root . '/wp-content');\n// Four stages\n// local = local development on my workstation\n// staging = site is on my staging server\n// live = site is live and under my ongoing maintenance\n// released = site is live and I play no role in maintenance. In this case, the logic \n//  block below is removed and everything reverts back to a single file, and all traces\n//  of git are purged leaving a normal site. This is all done manually btw.\nif ( file_exists( dirname( FILE ) . '/wp-config-local.php' ) ) {\n    define( 'MD_LOCAL_DEV', true );\n    include( dirname( FILE ) . '/wp-config-local.php' );\n// I don't need cron running, so turn it off\ndefine( 'DISABLE_WP_CRON', true );\n\n} else if ( file_exists( dirname( FILE ) . '/wp-config-staging.php' ) ) {\n    define( 'MD_STAGING_DEV', true );\n    include( dirname( FILE ) . '/wp-config-staging.php' );\n// Disable all core updates, as they are handled on local machine and done via git\ndefine( 'WP_AUTO_UPDATE_CORE', false );\ndefine( 'DISALLOW_FILE_MODS', true );\ndefine( 'AUTOMATIC_UPDATER_DISABLED', true );\n\n// I Handle cron via system cron, so disable wp_cron\ndefine( 'DISABLE_WP_CRON', true );\n\n} else if ( file_exists( dirname( FILE ) . '/wp-config-live.php' ) ) {\n    define( 'MD_LIVE', true );\n    include( dirname( FILE ) . '/wp-config-live.php' );\n//Disable all core updates, as they are handled on local machine and done via git\ndefine( 'WP_AUTO_UPDATE_CORE', false );\ndefine( 'DISALLOW_FILE_MODS', true );\ndefine( 'AUTOMATIC_UPDATER_DISABLED', true );\n\n// Disable all debugging\ndefine('WP_DEBUG', false);\n\n}\n// NOTE: If upgrading from an old installation and DB_CHARSET and DB_COLLATE do not exist \n//  in the wp-config.php file, DO NOT ADD THEM. Read more here\n//  https://codex.wordpress.org/Editing_wp-config.php#Database_character_set\n// Database Charset to use in creating database tables.\ndefine('DB_CHARSET', 'utf8');\n// The Database Collate type. Don't change this if in doubt.\ndefine('DB_COLLATE', '');\n/\n * Authentication Unique Keys and Salts.\n \n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n \n * @since 2.6.0\n */\n// NOTE: This is a placeholder replaced with new salts via the site creation script\n//  It will throw an error if not done correctly. This is by design.\ndefine('AUTH_KEY',         '+/l:+c+^-RimCPsX7D]|[ G7>Yq2+lP T2[7/If2p-.${)((v-c*i|RCp>S1>XDq');\ndefine('LOGGED_IN_KEY',    ')|adOIXS>U(x 0UOV^.LhebLn_GUk,^x.I-0~R6<ig;q|e2X%rimG4S%cO2NYE|');\ndefine('NONCE_KEY',        'G;tydGEsOy1Wg9d%x{_+j~Z7@DI}^)fq$fNTu!82oVU!5S|y+lS[s~()&0fz&]-');\ndefine('AUTH_SALT',        'Z1TvD2qp|ZJF.:uS3#P]%U/J&|ktGQe}HA@NQVXBFW?GM{?n.!h:aK!o-]hpU 5G');\ndefine('SECURE_AUTH_SALT', ' 3NK2z#TK,X1FIv6#4C0iEQl$}ebQ{|-IHEm.wo;6/Fsp;8$xmb:]K?m,>6-z.-');\ndefine('LOGGED_IN_SALT',   'o+oy|w}?n8!V^ybzDqq-NiJ5NuQ0%FF/-I3w?zspN T!3C&b`_!YIADI');\ndefine('NONCE_SALT',       '6lhg~>o:FBfm|j H<Nb++tqg$zyjp--?VWs$XAOa+T3{aN}dZq)4FBzo^54n)xz');\n/\n * WordPress Localized Language, defaults to English.\n \n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n /\ndefine('WPLANG', '');\n/ That's all, stop editing! Happy blogging. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/* Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n. Note that the exact setup I'm using can be duplicated by going here https://github.com/theMikeD/wp-base-tools and using addwordpress.sh with no options.\n. A fresh install using only wp-cli works. Perhaps it's not parsing variables in wp-config.php properly\n. This is a dev site never to see the light of day. This ain't my first rodeo :)\nWhat it appears to be is that WP_CONTENT_DIR and/or WP_CONTENT_URL are being ignored. \n. UPDATE: The actual issue is that $_SERVER is not being set up when wp-cli is run. If you put\nerror_log($_SERVER['SERVER_NAME']);\ninto wp-config.php and run and wp command, you'll get a blank line. Is this an expected result?\n\nHere is how to duplicate the bug. And yess, the numbering is off thanks to GH not recognizing a continuing list. \n1. Create an empty folder for testing. This will be referred to as \"root\"\n2. Install WP into root, but put it into its own folder called wordpress following these steps. After doing so, run the install process and verify that WP is working.\n3. in admin, activate the Twenty Fifteen theme.\n4. copy wordpress/wp-content to root, making it parallel with the wordpress/ folder.\nAt this point you will have two copies of wp-content/: one under root ( /wp-content/ ) and one under the WP install folder ( /wordpress/wp-content/ )\n1. Add the following code to wp-config.php\n``` php\n$md_http = ($_SERVER['HTTPS']) ? 'https://': 'http://';\n$md_server_name = rtrim($_SERVER['SERVER_NAME'],\"/\");\n$md_document_root = rtrim($_SERVER['DOCUMENT_ROOT'],\"/\");\ndefine('WP_CONTENT_URL', $md_http . $md_server_name . '/wp-content');\ndefine('WP_CONTENT_DIR', $md_document_root . '/wp-content');\n```\nThis tells WP to use the wp-content/ folder in root. Verify that the admin is still working. \n[UPDATE: This is the bug. Setting these two options manually doesn't reveal the bug, but setting them programmatically does. $_SERVER is not being set up bu wp-cli]\n1. Add the following custom taxonomy code to /wp-content/themes/twentyfifteen/functions.php\n``` php\nadd_action( 'init', 'md_create_type_taxonomy', 0 );\nfunction md_create_type_taxonomy()  {\n    $labels = array(\n        'name'                       => _x( 'Types', 'Taxonomy General Name', CF_TXT ),\n        'singular_name'              => _x( 'Type', 'Taxonomy Singular Name', CF_TXT ),\n        'menu_name'                  => ( 'Types', CF_TXT ),\n        'all_items'                  => ( 'All Types', CF_TXT ),\n        'parent_item'                => ( 'Parent Type', CF_TXT ),\n        'parent_item_colon'          => ( 'Parent Type:', CF_TXT ),\n        'new_item_name'              => ( 'New Type Name', CF_TXT ),\n        'add_new_item'               => ( 'Add New Type', CF_TXT ),\n        'edit_item'                  => ( 'Edit Type', CF_TXT ),\n        'update_item'                => ( 'Update Type', CF_TXT ),\n        'separate_items_with_commas' => ( 'Separate Types with commas', CF_TXT ),\n        'search_items'               => ( 'Search Types', CF_TXT ),\n        'add_or_remove_items'        => ( 'Add or remove Types', CF_TXT ),\n        'choose_from_most_used'      => ( 'Choose from the most used Types', CF_TXT ),\n        'popular_items'              => ( 'Popular Types', CF_TXT ),\n        'not_found'                  => ( 'No Types found', CF_TXT ),\n        'view_item'                  => __( 'View Type', CF_TXT ),\n    );\n    $rewrite = array(\n        'slug'                       => 'story-types',\n        'with_front'                 => false,\n        'hierarchical'               => true,\n    );\n    $args = array(\n        'labels'                     => $labels,\n        'hierarchical'               => true,\n        'public'                     => true,\n        'show_ui'                    => true,\n        'show_admin_column'          => true,\n        'show_in_nav_menus'          => true,\n        'show_tagcloud'              => false,\n        'rewrite'                    => $rewrite,\n        'query_var'                  => true,\n        'args'                       => array( 'orderby' => 'term_order' ),\n    );\n    register_taxonomy( 'typetax', 'post', $args );\n}\n``\n1. Refresh the admin page to verify that the Type custom taxonomy is listed under Posts.\n2. run this command in the shell:wp term create typetax 'Banana'It will fail.\n3. Remove the custom taxonomy code just added and now add it to/wordpress/wp-content/themes/twentyfifteen/functions.phpIOW the copy of Twenty Fifteen that WP would use by default, but is not actually using thanks to thewp-config.phpmods.\n4. Refresh the admin page to verify that the custom taxonomy is NOT listed under Posts.\n5. run this command in the shell:wp term create typetax 'Banana'`\n   It will succeed.\nBug.\n. I'll add this last comment here to make sure the update is seen.\nThe actual issue is that $_SERVER is not being set up when wp-cli is run. If you put\nerror_log($_SERVER['SERVER_NAME']);\ninto wp-config.php and run any wp command, you'll get a blank line. For my setup, this sets WP_CONTENT_URL and WP_CONTENT_DIR to invalid results, and the command fails. Is this an expected result?\n. Maybe we should close this one and use #785 to track this instead? They are tracking the same issue.\n. Dammit. Rookie mistake: older version is earlier path location. Sorry about that.\n. Yes, that's what I meant. Thanks, all better.\n. I'm doing a huge conversion of a custom CMS to WP (huge meaning 27,000 posts) which is why I'm getting all these corner cases. I'll help however I can.\n. Using bash this also fails\ntouch /tmp/t\nwp post create /tmp/t --post_title=\"This will fail !?\"\nbecause !? is being interpreted by the shell as the previous command. The exact error will vary depending on what the previous command was.\nThis does too\ntouch /tmp/t\nwp post create /tmp/t --post_title=\"This will fail $\u00c2\"\nbecause $\u00c2 is being interpreted as a variable with an invalid name.\nFYI\n/bin/bash --version\nGNU bash, version 3.2.51(1)-release (x86_64-apple-darwin13)\nCopyright (C) 2007 Free Software Foundation, Inc.\n. wp post create /tmp/t --post_title='This will fail \\' !?'\nalso fails. However now we're into the syntax of escaping single quotes within single quotes, which is a mess all its own. And because it's a mess, not many people will do it. Which means that most people will use \" not '. Which makes the !? thing still valid, but probably a wontfix because it's a cantfix.\n. Yes, that is the quagmire to which I was referring. Thanks for the help :)\n. The issues I added today were added to this bug because I thought they were related. As it turns out, they are not. That does not imply the original bug is invalid.\nAs for what I should or shouldn't be familiar with if I'm using the command line, there are many levels of experience. I suggest you keep that in mind, as statements such as yours come off as condescending when I'm sure they are not intended to be.\n. No problems Viktor, really! :) I have the same problems too. In fact, my reply could be interpreted that way too. It's all good, we all want the same thing: wp-cli to be the best it can be.\n. Sounds like a shell script would be ideal for this...?\n. I'm a bit confused by the use case as written in the OP, sorry if I'm missing something. Is there a reason why the shell script can't be versioned and put into PATH for your team? And does the DB versioning command change every time you use it? Or only when you use it on different installs?\n. I'm confused here @danielbachhuber . The OP asked about updating, you replied with a command that used install, and I updated the docs to reflect your command. What did I miss?\n. Ah, I hit the wrong file, my bad. \nThat said, if you'd like updates to the docs by those without intimate familiarity with the code, it would be helpful if the proper place/method to update them was listed in the wp-cli.github.com readme file or some other obvious place because, if it is described somewhere, it's not obvious.\n. \"However, that is just because I use the $_SERVER['REQUEST_URI'] at a place in my code.\"\nThis is the root issue. I brought it up in #1734 too. It's a known problem despite that issue being marked as \"unconfirmed.\" I suggested using #785 to track this issue in one spot.\n. Sure\nwp post create /tmp/_tmp_post_content_ --post_title=\"Knowing the Secret without knowing.\"\nThe problem is not with the command. The problem is that wp-cli barfs on the post body that contains special characters.\n. I can provide an example file if you tell me where to upload it\n. Maybe this is an issue with 0.19.1. How do I get a previous build, specifically 0.19.0?\n. Both of those services may convert the encoding. Is there a way to get a zip file to you?\n. Sample zip file is in slack\n. This has been discovered by taking the contents of one DB field and using it as the contents of a new story being injected into WP. The collation of the source field is latin1_swedish_ci and wp_posts is utf8_general_ci. Is this the likely issue?\n. Is there perhaps a way to get wp-cli to be a bit more specific with the error message? All I get is \"Could not insert post into the database\"\n. When I manually change the encoding from \"Western (ISO Latin 1)\" to \"Unicode(UTF-8)\" using BBEdit, the insertion works fine.\n. I can confirm that this is an encoding conflict.\n. Closing, because I think the issue is elsewhere. Sorry for the noise. FTR this is related to WP-CLI not populating $_SERVER\n. [mike@macster:BOILERPLATE]$ wp term create vendortax \"Two Words\"\nError: Too many positional arguments: Words\n. I get the same thing with the default sh environment so it's nothing I did there. I'll try a different PHP version next.\n. php version doesn't seem to have an effect:\n[mike@macster:wp-cli]$ curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1333k  100 1333k    0     0  1817k      0 --:--:-- --:--:-- --:--:-- 1878k\n[mike@macster:wp-cli]$ echo '/Applications/MAMP/bin/php/php5.4.42/bin/php /usr/share/wp-cli.phar $@' > /Users/mike/Path/wp2\n[mike@macster:wp-cli]$ chmod 755 /Users/mike/Path/wp2\n[mike@macster:wp-cli]$ wp2 --info\nPHP binary: /Applications/MAMP/bin/php/php5.4.42/bin/php\nPHP version:    5.4.42\nphp.ini used:   /Applications/MAMP/bin/php/php5.4.42/conf/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.19.2\nthen\n```\n[mike@macster:BOILERPLATE]$ wp2 --info\nPHP binary: /Applications/MAMP/bin/php/php5.4.42/bin/php\nPHP version:    5.4.42\nphp.ini used:   /Applications/MAMP/bin/php/php5.4.42/conf/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config: \nWP-CLI project config:\nWP-CLI version: 0.19.2\n[mike@macster:BOILERPLATE]$ wp term create vendortax \"Two Words\"\nError: Too many positional arguments: Words\n. I'm not sure that's true. In the past I've inserted plenty of terms with spaces using quotes and they all worked.\n.\n[mike@macster:wp-cli]$ curl -O https://github.com/wp-cli/wp-cli/releases/download/v0.16.0/wp-cli.phar\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   391    0   391    0     0   1815      0 --:--:-- --:--:-- --:--:--  1994\n[mike@macster:wp-cli]$ sudo cp wp-cli.phar /usr/share/wp-cli-0.16.0.phar\n[mike@macster:wp-cli]$ echo '/Applications/MAMP/bin/php/php5.5.26/bin/php /usr/share/wp-cli-0.16.0.phar $@' > /Users/mike/Path/wp3\n[mike@macster:wp-cli]$ chmod 755 /Users/mike/Path/wp3\n[mike@macster:wp-cli]$ wp3 --info\nYou are being redirected.[mike@macster:wp-cli]$ \n```\n. Did that, same problem as OP: \n[mike@macster:BOILERPLATE]$ wp4 term create vendortax \"Two Words\"\nError: Too many positional arguments: Words\n[mike@macster:BOILERPLATE]$ wp4 --info\nPHP binary: /Applications/MAMP/bin/php/php5.5.26/bin/php\nPHP version:    5.5.26\nphp.ini used:   /Applications/MAMP/bin/php/php5.5.26/conf/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.16.0\n. I don't remember exactly, whatever was current in early june. Do you get the same results when you try it?\n. [mike@macster:wp-cli]$ /Applications/MAMP/bin/php/php5.5.26/bin/php -v\nPHP 5.5.26 (cli) (built: Jul  6 2015 14:26:26) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.5.0, Copyright (c) 1998-2015 Zend Technologies\n. Yeah, give me a bit. Man this is maddening. Thanks for your help! :)\n. I'm getting the same thing on a different machine. They are both using the same version of MAMP however, so perhaps that is the issue?\nIt's happening with post create as well.\n. More clues\n[mike@macster:BOILERPLATE]$ /Applications/MAMP/bin/php/php5.5.26/bin/php ~/git/wp-cli/wp-cli.phar post create /Users/mike/git/Wordpress.tools/wp-base-tools/page-font-test.txt --post_type=page --post_title=\"Fonts Test\" --post_status=\"publish\"\nSuccess: Created post 87.\n[mike@macster:BOILERPLATE]$ wp post create /Users/mike/git/Wordpress.tools/wp-base-tools/page-font-test.txt --post_type=page --post_title=\"Fonts Test\" --post_status=\"publish\"\nError: Too many positional arguments: Test\nSo something about how this\necho '/Applications/MAMP/bin/php/php5.5.26/bin/php /usr/share/wp-cli.phar $@' > /Users/mike/Path/wp\nis messing something up.\n. Was using GNU bash, version 3.2.51(1)-release (x86_64-apple-darwin13) and changed to GNU bash, version 4.3.33(1)-release (x86_64-apple-darwin13.4.0)  same problem\n. This fixed it\n/Applications/MAMP/bin/php/php5.5.26/bin/php /usr/share/wp-cli.phar \"$@\"\nApparently the $@ need quotes. I wish I could remember where I found the page describing how to do this so I could see if I copied it wrong or if the instruction is wrong. in any case, it's fixed now. Thanks for the help all!\n. Yeah i know that part. There was a page that described the echo command to make wp-cli work in this way, and I can't remember where that page was. Anyway, thanks gain.\n. [mike@macster:\u0085 /glwc/] $ wp term update countrytax $(wp term list countrytax --format=ids) --description=\"test\"\nError: Too many positional arguments: 61 11 69 80 67 12 42 6 4 68 9 8 13 58 60 7 14 63 5\nThis is the same issue is it not? I think adding a CSV option would be quite helpful unless I'm missing something. The tr thing is fine but a csv option would def. add value.. ",
    "pippinsplugins": "Would --random=100 give you 100 items that start at an arbitrary point?\n. Updated with error messages for both cases.\n. behat tests are entirely new to me. Any tips ?\n. I think I have it figured out but it seems you can't test the contents of STDOUT when it's an error. Is there a method for testing what error was returned?\n. Ok looks like I can use STDERR. I have this:\nWhen I run `wp option update blog_public 0`\n    Then STDERR should contain:\n      \"\"\"\n      Error: Value passed for\n      \"\"\"\n    And STDOUT should be empty\nIt fails though with:\n\n. Thanks @danielbachhuber !\n. One for general failure and one for equal values, right?\n. ",
    "pdewouters": "Interesting, how would the config differ from the plugin one?\n. no problem, what would be the best place to make a note of this? readme or FAQ?\n. I was thinking, a section in the FAQ:\n\nDoes WP CLI support HHVM? No, at the moment there are no plans for supporting HHVM\n\nor something of that nature\n. awyeah\n. ",
    "aristath": "writing unit tests for themes is a lot harder than writing tests for plugins...\nIn the bootstrap.php file we'll have to make sure that the theme is activated, and then the .travis.yml file should be a lot different...\nexample: https://github.com/Automattic/_s/blob/master/.travis.yml (that file just checks for syntax errors and WP-Coding standards but you get the point on why it's different...\nThe theme has to be moved to wp-content/themes before the tests start.\n. ",
    "halvardos": "It's baffling how hard it is to find good sources on testing themes for wordpress. An effort towards providing developers with an easy way to run integration / unit tests on themes would really benefit the wp community.\n. ",
    "christ0ph3r": "This would be awesome.   I had to do this recently and this is how I did it:\nwp-content/themes/themeName/tests/test-main.php\n``` php\n<?php\nclass main_test extends WP_UnitTestCase {\n  // your test code goes here\n  $this->assertTrue( TRUE );\n}\n```\nwp-content/themes/themeName/tests/bootstrap.php\n``` php\n<?php\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\nif ( ! $_tests_dir ) {\n    $_tests_dir = '/tmp/wordpress-tests-lib';\n}\nrequire_once $_tests_dir . '/includes/functions.php';\nfunction _manually_load_plugin() {\n    require dirname( dirname( FILE ) ) . '/functions.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\nrequire $_tests_dir . '/includes/bootstrap.php';\n```\nwp-content/themes/themeName/phpunit.xml\n```\n\n\n\n./tests/\n\n\n\n```\nwp-content/themes/themeName/.travis.yml\n```\nlanguage: php\nnotifications:\n  email:\n    on_success: never\n    on_failure: change\nphp:\n  - 5.3\n  - 5.6\nenv:\n  - WP_VERSION=latest WP_MULTISITE=0\nmatrix:\n  include:\n    - php: 5.3\n      env: WP_VERSION=latest WP_MULTISITE=1\nbefore_script:\n  - bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION\nscript: phpunit\n```\nwp-content/themes/themeName/bin/install-wp-tests.sh\n``` sh\n!/usr/bin/env bash\nif [ $# -lt 3 ]; then\n    echo \"usage: $0    [db-host] [wp-version]\"\n    exit 1\nfi\nDB_NAME=$1\nDB_USER=$2\nDB_PASS=$3\nDB_HOST=${4-localhost}\nWP_VERSION=${5-latest}\nWP_TESTS_DIR=${WP_TESTS_DIR-/tmp/wordpress-tests-lib}\nWP_CORE_DIR=${WP_CORE_DIR-/tmp/wordpress/}\ndownload() {\n    if [ which curl ]; then\n        curl -s \"$1\" > \"$2\";\n    elif [ which wget ]; then\n        wget -nv -O \"$2\" \"$1\"\n    fi\n}\nif [[ $WP_VERSION =~ [0-9]+.[0-9]+(.[0-9]+)? ]]; then\n    WP_TESTS_TAG=\"tags/$WP_VERSION\"\nelif [[ $WP_VERSION == 'nightly' || $WP_VERSION == 'trunk' ]]; then\n    WP_TESTS_TAG=\"trunk\"\nelse\n    # http serves a single offer, whereas https serves multiple. we only want one\n    download http://api.wordpress.org/core/version-check/1.7/ /tmp/wp-latest.json\n    grep '[0-9]+.[0-9]+(.[0-9]+)?' /tmp/wp-latest.json\n    LATEST_VERSION=$(grep -o '\"version\":\"[^\"]*' /tmp/wp-latest.json | sed 's/\"version\":\"//')\n    if [[ -z \"$LATEST_VERSION\" ]]; then\n        echo \"Latest WordPress version could not be found\"\n        exit 1\n    fi\n    WP_TESTS_TAG=\"tags/$LATEST_VERSION\"\nfi\nset -ex\ninstall_wp() {\nif [ -d $WP_CORE_DIR ]; then\n    return;\nfi\n\nmkdir -p $WP_CORE_DIR\n\nif [[ $WP_VERSION == 'nightly' || $WP_VERSION == 'trunk' ]]; then\n    mkdir -p /tmp/wordpress-nightly\n    download https://wordpress.org/nightly-builds/wordpress-latest.zip  /tmp/wordpress-nightly/wordpress-nightly.zip\n    unzip -q /tmp/wordpress-nightly/wordpress-nightly.zip -d /tmp/wordpress-nightly/\n    mv /tmp/wordpress-nightly/wordpress/* $WP_CORE_DIR\nelse\n    if [ $WP_VERSION == 'latest' ]; then\n        local ARCHIVE_NAME='latest'\n    else\n        local ARCHIVE_NAME=\"wordpress-$WP_VERSION\"\n    fi\n    download https://wordpress.org/${ARCHIVE_NAME}.tar.gz  /tmp/wordpress.tar.gz\n    tar --strip-components=1 -zxmf /tmp/wordpress.tar.gz -C $WP_CORE_DIR\nfi\n\ndownload https://raw.github.com/markoheijnen/wp-mysqli/master/db.php $WP_CORE_DIR/wp-content/db.php\n\n}\ninstall_test_suite() {\n    # portable in-place argument for both GNU sed and Mac OSX sed\n    if [[ $(uname -s) == 'Darwin' ]]; then\n        local ioption='-i .bak'\n    else\n        local ioption='-i'\n    fi\n# set up testing suite if it doesn't yet exist\nif [ ! -d $WP_TESTS_DIR ]; then\n    # set up testing suite\n    mkdir -p $WP_TESTS_DIR\n    svn co --quiet https://develop.svn.wordpress.org/${WP_TESTS_TAG}/tests/phpunit/includes/ $WP_TESTS_DIR/includes\nfi\n\ncd $WP_TESTS_DIR\n\nif [ ! -f wp-tests-config.php ]; then\n    download https://develop.svn.wordpress.org/${WP_TESTS_TAG}/wp-tests-config-sample.php \"$WP_TESTS_DIR\"/wp-tests-config.php\n    sed $ioption \"s:dirname( __FILE__ ) . '/src/':'$WP_CORE_DIR':\" \"$WP_TESTS_DIR\"/wp-tests-config.php\n    sed $ioption \"s/youremptytestdbnamehere/$DB_NAME/\" \"$WP_TESTS_DIR\"/wp-tests-config.php\n    sed $ioption \"s/yourusernamehere/$DB_USER/\" \"$WP_TESTS_DIR\"/wp-tests-config.php\n    sed $ioption \"s/yourpasswordhere/$DB_PASS/\" \"$WP_TESTS_DIR\"/wp-tests-config.php\n    sed $ioption \"s|localhost|${DB_HOST}|\" \"$WP_TESTS_DIR\"/wp-tests-config.php\nfi\n\n}\ninstall_db() {\n    # parse DB_HOST for port or socket references\n    local PARTS=(${DB_HOST//\\:/ })\n    local DB_HOSTNAME=${PARTS[0]};\n    local DB_SOCK_OR_PORT=${PARTS[1]};\n    local EXTRA=\"\"\nif ! [ -z $DB_HOSTNAME ] ; then\n    if [ $(echo $DB_SOCK_OR_PORT | grep -e '^[0-9]\\{1,\\}$') ]; then\n        EXTRA=\" --host=$DB_HOSTNAME --port=$DB_SOCK_OR_PORT --protocol=tcp\"\n    elif ! [ -z $DB_SOCK_OR_PORT ] ; then\n        EXTRA=\" --socket=$DB_SOCK_OR_PORT\"\n    elif ! [ -z $DB_HOSTNAME ] ; then\n        EXTRA=\" --host=$DB_HOSTNAME --protocol=tcp\"\n    fi\nfi\n\n# create database\nmysqladmin create $DB_NAME --user=\"$DB_USER\" --password=\"$DB_PASS\"$EXTRA\n\n}\ninstall_wp\ninstall_test_suite\ninstall_db\n```\nAnd then once I push live I make sure these files are excluded from deployment.\nHope that helps someone.\n. @Jeger I felt similar.  There is not much resources for WordPress testing.  You have to look around. This persons blog has some great info that helped me a lot \nhttp://codesymphony.co/writing-wordpress-plugin-unit-tests/\nAnother way I learned was by searching repos on github and seeing how they tested.\nHere are a few specific WordPress examples you may find helpful.\n``` php\n    // test action hooks\nfunction test_music_create_post_type_has_action() {\n    $this->assertGreaterThan( 0, has_action( 'init', 'music_create_post_type' ) );\n}\n\n    // test filters\nfunction test_remove_thumbnail_dimensions_has_filters() {\n    $this->assertGreaterThan( 0, has_filter( 'post_thumbnail_html', 'remove_thumbnail_dimensions', 10 ) );\n}\n\n    // test post type exists\nfunction test_music_create_post_type_now_exists() {\n    $this->assertTrue( post_type_exists( 'music' ) );\n}\n\n```\n. \"CTRL + C for searching through bash history\"\nI think you meant to say Control + R for searching?  Control + C usually cancels programs.\n. Thanks for contributing.  One thing I noticed is the spacing is not best practice.\nSee space usage:\nhttps://make.wordpress.org/core/handbook/best-practices/coding-standards/php/\n. Nice.\nget_site_option('recently_activated')\nOne last thing I see is this should be\nget_site_option( 'recently_activated' )\nIf you expand source code here you will see thats how it is written with the spacing.\nhttps://developer.wordpress.org/reference/classes/wp_plugins_list_table/prepare_items/\nAlso I am not 100% sure but I am guessing it may be best to combine all these commits.  It will make the commit history cleaner.\nWhat I would reccomend:\nFix the last spacing issue and then push.  You will have 4 commits.\nThen take your last 4 commits and combine them into 1.  There is other ways ( so feel free to take another route ) but this is how I usually do it.\ngit reset --soft HEAD~3\ngit commit --amend\ngit push -f\n*NOTE - the HEAD~3 would be for 4 commits.\n. For sure, my bad.  Thanks for the heads up.\n. ",
    "drew3000": "So what is the way to uninstall it before doing a fresh install?\n. ",
    "dlh01": "I'm not sure. Maybe $can_export? Mainly because it doesn't obviously derive from args that are included like $public or $show_ui. \nPersonally, I like the smaller scaffold, but I don't have a strong preference and am happy to defer to others.\n. ",
    "korobochkin": "@iandunn great thank you so much! ~~but I noticed that this package (command) doesn't support multisite :)~~\nUPD:Already discovered the issue related to multisite installs.. @szepeviktor almost works :) On multisite it doesn't work because one variable missed (typo I think) and for site with ID = 1 there is no wp_1_options table. Updated part:\n``\nforeach ( $blogs_columns as $blog ) {\n  // Skip for default site with ID = 1 since this site have wp_options table not wp_1_options\n  if( $blog == 1 ) {\n    continue;\n  }\n  $new_blog_options_table = $new_prefix . $blog. '_options';\n  $query = $wpdb->prepare(\n    sprintf( 'UPDATE%s', $new_blog_options_table ) . ' SEToption_name= %s WHEREoption_name` = %s LIMIT 1',\n    $new_prefix . $blog . '_user_roles',\n    $wpdb->base_prefix . $blog . '_user_roles'\n  );\n  echo $query;\n$blog_id_query = $wpdb->query($query);\n  if ( false === $blog_id_query ) {\nreturn 'user_roles update failure';\n\n}\n}\n```. ",
    "ivomarino": "If I connect as root, setting .env to do so, all is fine but it should work as non-root mysql user also.\n. Seems so, I can recheck, but as you can see CLI mysqldump with that users works (verified), that's why it's strange. Is there some way to print out the commands which dump actually executes? Thanks\n. I've also tried mysqldump --no-defaults from CLI, works. Would be great to be able the print the whole command in action when invoking db dump.\n. All fixed I think in stage and prod DB_HOST=mysql.tt was completely missing in .env.\n. Errate corrige: The problems is still there, I have to work as root.\n. As root al fine i push and pull DBs from prod to local back to stage and so on, that's OK as local root. Another strange problem comes up: when I pull the DB or push it to somewhere the site which receives the new DB show just the white blank page in the frontend, backend works fine with updates data from DB.\nAfter something like 10 mins also frontend works fine, can this be due to some kind of caching? I use APCu and Varnish, I've tried to clear Varnish and APCu cache, also restarted Apache2, but it always takes more or less 10 mins to show up the frontend right. Any suggestions? Thanks.\nPS: I also to string replacement after push or pull.\n. I'm currently busy but we may keep in contact, add me on Skype ivo.marino, should be the first in list. Today I bought WP Migration DB Pro, trying this out, it has also a CLI interface.\n. The problem written above can also be due the theme, I need to double check this.\n. Not yet, still root is required\n. ",
    "bryansammon": "I was having the same problem and in my case I solved it by  removing my login path (client in my case) from mysql_config_editor:  mysql_config_editor remove --login-path=client\n. ",
    "cjhaas": "Yeah, I grepped and saw those and don't know if they can be fixed. But right now I can't even run wp help without this.\n. It really doesn't seem like too many commands rely on it, actually:\n1. wp db * - Absolutely everything in db depends on it\n2. wp core download does unless you specify and pre-create --path so that still works. This could be changed over to use wp_mkdir_p possibly\n3. wp post create --edit - Attempts to launch your editor which won't work and there's no way around that\n4. wp rewrite structure requires it to launch wp rewrite flush but you can still manually invoke the latter command. (This is the only command I could find that uses the launch_self helper, too)\n5. wp plugin delete requires it to delete the folder recursively and forcfully. Seems like the _rmdir from the core command could just be reused\n6. wp plugin update requires it only if --version=dev is passed to it\nSo one entire command, db, two specific parameter versions, wp post create --edit and wp plugin update --version=dev and three broken unless you know the work around, wp core download, wp rewrite structure and wp plugin delete.\nI'm not arguing that these commands need to be patched (although I'd be happy to submit pulls for most of them) but I think that 99% of wp-cli is functional without the ability to run proc_open().\nMy specific use-case for this is that as a host I try to never run as root unless absolutely necessary. I'm caged just as my users are. I'd like to add wp-cli to my list of go-to tools but as I explore wp-cli as well as 3rd-party commands I can't easily discover what they do since I can't invoke the help system. It just seems weird that the entire help system depends on an, albeit very handy, still optional feature. And there's already an escape hatch for Windows which doesn't support less.\n. wp_mkdir_p won't work for wp core download since functions.php won't exist yet.\n. We disable things like proc_open and shell_exec for our clients for security reasons. We try to run with the same permissions as our clients so we know that if we can fix something, they can fix the same thing, too, and we don't just have special permissions. If I can remove a directory and they can't then something else is broken and should be fixed. However if they're just doing it wrong I can move on.\nThis whole thing actually started because of some misconfigured cron tasks that we were trying to troubleshoot with a client. Our options were either query the database (ugly), install a plugin (not the end of the world but still not ideal) or a simple one line command wp cron event list. Both the client and I can run this command just fine. If i'm in a weird edge case I guess I'm fine with running sudo to get to the help system and I'll tell the client to just use the online manual.\n. Sorry, I missed that part, I thought it was related to the returned fields. Thanks!\n. ",
    "esaheiskanen": "I noticed that when i move wp-cli.phar to /usr/local/bin/wp it starts to use system php no matter what (WP_CLI_PHP exports in .bash_profile).\nMy solution is to leave wp-cli.phar to my home directory and create alias :\nalias wp=\"/Applications/xampp/xamppfiles/bin/php /Users/{myusername}/wp-cli.phar \"\n. ",
    "aubreypwd": "For anyone else hitting this, edit your ~/.bash_profile on OSX and add:\nexport PATH=\"/Applications/XAMPP/xamppfiles/bin\":$PATH;\nMake sure this is at the very top of your file or before any other $PATH modifications. This should preference the PHP binary in xamppfiles/bin above system PHP.\n. ",
    "codep0et": "Most probably related yes.\nBut one thing I noticed is on my Linux server I get this error with wp-cli 0.16.0, but locally on windows with WAMP I do not get the error. I get success, database reset. Local I have wp-cli 0.16.0 also\n. ",
    "eimajenthat": "I saw this issue mentioned in the docs here: \nhttp://codex.wordpress.org/Configuring_Automatic_Background_Updates#Conflict_with_wp-cli\nI'm not using wp-cli, so I don't know if this will work, but couldn't you just wrap the filters in a conditional block?  Like this:\nphp\n    <?php\n    if(php_sapi_name() == 'cli' || empty($_SERVER['REMOTE_ADDR'])) {\n        define( 'FORCE_SSL_LOGIN', true );\n        define( 'FORCE_SSL_ADMIN', true );\n        define( 'WP_AUTO_UPDATE_CORE', true );\n        add_filter( 'allow_major_auto_core_updates', '__return_true' );\n        add_filter( 'automatic_updates_is_vcs_checkout', '__return_false', 1 );\n        add_filter( 'auto_update_plugin', '__return_true' );\n        add_filter( 'auto_update_theme', '__return_true' );\n        apply_filters( 'auto_core_update_send_email', false, success, $core_update, $result );\n    }\nSure, it's not the most elegant solution, but it's better than saying \"sorry, you'll have to use a plugin\".\nAlternatively, when you have wp-cli strip out the require call, you could have it define dummy functions that don't do anything, so you don't get an error.  Sure, those settings aren't set, but I don't think that matters in this scenario.  I doubt wp-cli cares whether the auto-update features are enabled.\n. ",
    "jamesmehorter": "Sorted this out in vipqs by running sudo wp cli update --nightly --allow-root\n. ",
    "lsmith77": "same issue .. using the nightly solved the issue .. but raises the question when we can expect the next release?\n. nevermind .. seems like the release was done but the phar at https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar doesn't seem to point to the latest version\n. ",
    "enoch85": "@jamesmehorter Thanks!\n. @danielbachhuber Sorry for bumping an old issue but I have this in my config:\ndefine('FORCE_SSL_ADMIN', true);\n// in some setups HTTP_X_FORWARDED_PROTO might contain \n// a comma-separated list e.g. http,https\n// so check for https existence\nif (strpos($_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false)\n       $_SERVER['HTTPS']='on'; \nHow should it look like instead?\nI get these messages: PHP Notice:  Undefined index: HTTP_X_FORWARDED_PROTO in phar:///usr/local/bin/wp/php/WP_CLI/Runner.php. @danielbachhuber Feel like a noob now, but how do I fix that issue? --allow-root would be one afaik (not tested). But if I want to run as the 'wordpress' user, would I need to set some config then? like .xml file or similar...?\n. @danielbachhuber Thanks for the... help. :)\n. www-data works :). ",
    "evertramos": "Hi @danielbachhuber\nI am not complaining or anything... just to confirm, but I having the same issue, solved with an update, the new version 0.24.1 became very slow, am I the only one?\nNot sure if should be posted here... though might be any filtering problems, although I do not have any filtering configuration in my wp-config.php file, but still got this error with the older version of wp-cli.\nThanks!\n. ",
    "dannyb195": "For VVV users, going to www/wp-cli and pulling master (in my case I needed a git reset --hard HEAD then a git pull origin master to resolve this. Didn't dig any deeper though.\n. ",
    "toleabivol": "@dannyb195 what have VW drivers with this ?!\n. How would I do it if I usually login with :\nssh -i ~/.ssh/pemfiles/yyyy.pem ec2-user@yyy.com\n. ",
    "rmendoza3": "Yes there was.  Thank you so much.  I did not even think about checking the wp-config.php file.\n. ",
    "tillkruss": "I wasn't using defined() in my wp-config.php, thanks!\n. I didn't install it myself, it's on a SiteGround Cloud Hosting account and this is the wp cli info output:\nPHP binary: /usr/local/php54/bin/php-cli\nPHP version:    5.4.33\nphp.ini used:   /usr/local/php54/lib/php.ini\nWP-CLI root dir:    /chroot/wp-cli/vendor/wp-cli/wp-cli\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.17.0\nwhich wp returns:\n/chroot/wp-cli/vendor/wp-cli/wp-cli/bin/wp\n. I added suhosin.executor.include.whitelist=\"phar\", that solved the issue.\n. Yes, thanks!. Thanks @danielbachhuber!. Thanks will fix that. Just that the 15min CI... holy glob!. ",
    "mqudsi": "This can also happen if you have a really old WordPress installation that you've been updating all these years, as WP didn't always ship with the if (!defined... guard.. ",
    "duanecilliers": "PHP binary: /Applications/MAMP/bin/php/php5.4.4/bin/php\nPHP version:    5.4.4\nphp.ini used:   /Applications/MAMP/bin/php/php5.4.4/conf/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.16.0\nYes I have tried reinstalling with WP-CLI instructions. I've also tried uninstalling PHPUnit and reinstalling WP-CLI.\nI've also tried adding phpunit to MAMP's php.ini include_path.\ninclude_path = \".:/Applications/MAMP/bin/php/php5.4.4/lib/php:/usr/local/bin/phpunit\n. ",
    "VSpike": "Wow, what service! Many thanks!\n. PHP binary:     /usr/bin/php5\nPHP version:    5.4.31-1+deb.sury.org~precise+1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.14.1\nPHP binary:     /usr/bin/php5\nPHP version:    5.4.31-1+deb.sury.org~precise+1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.14.1\n. No, I have no ~/.wp-cli at all.\n. ",
    "drzraf": "This is still a bug to be reopened.\n$ wp post update --tax_input='{\"footype\":[\"news\"]}' --post_type=post 1129\nweb/wp/wp-includes/post.php:3508:\nPHP Warning:  Invalid argument supplied for foreach() in /web/wp/wp-includes/post.php on line 3509\n$postarr['tax_input'] == string(24) \"{\\\"footype\\\":[\\\"news\\\"]}\". for reference: https://github.com/wp-cli/extension-command/issues/26. > > That would imply a way to pass SQL-conditions to the command line tool in some way\n\n\nWhy can't you just use a SQL statement in this case? post content shouldn't have serialized data\n\n\nindeed, I could and you're may be right.\nThe best way would then be:\n1* SQL UPDATE on wp_post\n2* wp-cli --excluding' the whole wp_post table\nand that wouldn't needs modification to wp-cli.\nfeel free to close\n. This change did not considered the -i option of docker exec.\nWithout this, stdin can not be passed which keeps wp db import from running.. It's not about quotes, it's about wp-cli synopsis syntax.\nIn a shell, \",\" (comma) is not a special character.\nwp XXX YYY,ZZZ is the same as wp \"XXX\" \"YYY,ZZZ\". @danielbachhuber : once again today :\n\ncommand has an invalid synopsis part: <url,...>\ncommand has an invalid synopsis part: <url...>\ncommand has an invalid synopsis part: [url,...]\ncommand has an invalid synopsis part: <url>[,...]\ncommand has an invalid synopsis part: <url>,...\ncommand has an invalid synopsis part: [url],...\ncommand has an invalid synopsis part: [url]\ncommand has an invalid synopsis part: ...    (for [url] ...)\n\n[edit] Oh... finally found it:\n<url>...\nI would have liked to find it in the documentation.\n[edit] Found it inside the documentation: https://make.wordpress.org/cli/handbook/commands-cookbook/\n<name> is a required positional argument. Changing it to <name>... would mean the command could accept one or more positional arguments.\nCan't understand I overlooked it, or maybe it's a recent addition. Maybe adding the keyword \"multiple\" may help?. Sorry, I currently can't do it. (@chriszarate maybe ? :)). ",
    "mikevanwinkle": "I think this is a good ticket. Looking at the code in php/commands/db.php, many of the methods there execute the mysql binary. For instance: \nprivate static function run_query( $query ) {\n                self::run( 'mysql --no-defaults', array( 'execute' => $query ) );\n        }\nI think in containerized systems this would be a common problem. \n. Anyone working on this yet? I would be happy to take a stab at it if not. \n. FYI, I think Laravel relies on sqlite to accomplish this. See this article: http://code.tutsplus.com/tutorials/testing-like-a-boss-in-laravel-models--net-30087\n. ",
    "clakeb": "One scenario I'm running into with required MySQL support is when I just want to install plugins. Really I just want the plugin downloaded to the plugin dir as I use VVV as my dev environment (no local access to MySQL). I'll activate at a later time and just the code sitting there shouldn't need MySQL.\n. ",
    "karellm": "I second @clakeb bog time on that one. \nImagine a Docker setup, one container runs mysql, one runs apache/php. I simply want to install wordpress and the plugins in the apache/php one. I'll activate them and do all the rest when I boot the stack. Without this, I'm actually forced to install plugins at every start of the server.\n. @clakeb if that helps, in the meantime:\n```\npluginsList=(\n  wordpress-seo\n  wordpress-importer\n)\nInstall plugins\nfor plugin in \"${pluginsList[@]}\"\ndo\n  echo \"\"\n  echo \"Install $plugin\"\n  curl -LOk http://wordpress.org/extend/plugins/download/${plugin}.zip\n  unzip -q ${plugin}.zip\n  rm ${plugin}.zip\ndone\n```\n. @danielbachhuber If it was fixed can you please release it? We use wp-cli in a docker image and it feels counter productive to modify the image to address that issue when it was already fixed. Thanks a lot!\n. ",
    "eni23": "I have the same issue and do not understand why you rely on a binary when wordpress fully works without it. This makes the tool complete unuseable for Deployments inside Docker Containers or a PaaS environment like Kubernetes where you not have mysql inside your web container and you do not want that deps installed in it just for the Setup.. ",
    "gitowiec": "I can't use wp-cli inside wordpress Docker container, could You reopen this issue and fix it? \nPeople saying same thing here in this thread, how to do wp export db on a dockerized Wordpress?. I have the same problem.\nI just installed wp-cli on my webfaction account (CentOS Linux release 7.3.1611 Core) and I have another wp-cli installation on my vbox vm(Ubuntu 16.0.4.2). I entered alias of webfaction account into wp-cli.yml configuration file. I know that ssh connection from vbox -> webfaction is ok, I did setup it with ssh-copy-id so there is no need to use password, public key does the authentication.\n@staging:\n  ssh: login@webXXX.webfaction.com/home/login/webapps/project_staging\nNow I want to run wp @staging core version but I got error bash: wp: command not found.\nIf I do: wp @staging core version --debug I get\nDebug (bootstrap): No readable global config found (0.018s)\nDebug (bootstrap): Using project config: /workspace/strefatradera_proj/public_html/wp-cli.yml (0.019s)\nDebug (bootstrap): No package autoload found to load. (0.108s)\nDebug (bootstrap): Required file from config: /workspace/strefatradera_proj/public_html/config/wp-cli/quiet.php (0.108s)\nDebug (bootstrap): SSH host: totumfacky@webXXX.webfaction.com (0.109s)\nDebug (bootstrap): SSH port:  (0.109s)\nDebug (bootstrap): SSH path: /home/login/webapps/project_staging (0.109s)\nDebug (bootstrap): Running SSH command: ssh -q login@webXXX.webfaction.com -t cd /home/login/webapps/strefatradera_staging; wp 'core' 'version' '--debug' (0.109s)\n**bash: wp: command not found**\nThen I run by hand same command as in debug log's last but one line:\nssh -q totumfacky@webXXX.webfaction.com -t cd /home/login/webapps/strefatradera_staging; wp 'core' 'version' '--debug'\nAnd my output is\nDebug (bootstrap): No readable global config found (0.019s)\nDebug (bootstrap): Using project config: /workspace/strefatradera_proj/public_html/wp-cli.yml (0.02s)\nDebug (bootstrap): No package autoload found to load. (0.109s)\nDebug (bootstrap): Required file from config: /workspace/strefatradera_proj/public_html/config/wp-cli/quiet.php (0.109s)\nDebug (bootstrap): ABSPATH defined: /workspace/strefatradera_proj/public_html/ (0.11s)\nDebug (bootstrap): Running command: core version (0.11s)\n**4.7.3**\nWhat am I doing wrong?\nSorry for reporting it here but I didn't find any help looking here http://wp-cli.org/#support\nEdit: obviously I edited PATH variable on remote server, logging onto webfation's server and issuing wp anywhere in my users folder runs that script. Ok, I found error, got to report is as new https://github.com/wp-cli/wp-cli/issues/3990. It could be superb to allow wp-cli run on pure wordpress docker container (in that case there is no mysql client).. @gitlost thanks, I managed to run wp db on my container. I installed mysql-client and connected it with db container.. Ok, you can close it, here is my real bug :) http://stackoverflow.com/questions/940533/how-do-i-set-path-such-that-ssh-userhost-command-works.\nAghhh its too late!. Thanks for the tip! I just edited my ~/.bashrc and moved there PATH declaration!\nBest regards!. ",
    "schlessera": "Related: https://github.com/wp-cli/ideas/issues/52. @betweenbrain This is problem with your environment configuration. WP-CLI should not arbitrarily replace host strings and make wild guesses in such a way.\nWhat I might consider though is to have WP-CLI detect this case on non-UNIX systems and produce a hint about what the likely problem might be.. @merlinsilk This is unrelated to WP-CLI and is caused by the way you set up your filesystem. You will have to set up group write permissions on the folder and add relevant users to that group. WP-CLI will only have the permissions of the user that is running it, so it cannot create files with access outside of that boundary.. As mentioned on Twitter, I'd suggest looking into adding \"Composer plugin\" functionality to WP-CLI ( see Setting up and using plugins ).\nThe basic mechanism would work like this:\n1. You tell Composer through your composer.json that WP-CLI is of \"type\": \"composer-plugin\".\n2. You \"require\": { \"composer-plugin-api\": \"^1.0\" }.\n3. You tell Composer what class represents the plugin entry point: \"extra\": { \"class\": \"WP_CLI\\\\Composer_Plugin\" }\n4. Your class WP_CLI\\Composer_Plugin implements Composer\\Plugin\\PluginInterface.\n5. In WP_CLI\\Composer_Plugin::activate() you can get access to all the internal Composer configuration.\n6. In WP_CLI\\Composer_Plugin::getSubscribedEvents you can attach your own methods to Composer events.\nThe difference between this and the script hooks that Composer provides is:\n- This is not only executed for the root process, but also for all dependencies at all levels.\n- This is more tightly integrated into the Composer flow and lets you manipulate pretty much anything.\nI would estimate that you should be able to hook into the pre-install event and prevent the dependency from being processed.\nI'm pressed for time atm, but I would probably be able to look into this in more detail on Friday, if you think it might be worth a try.\n. As a simple example of how to use this, you can look at one of my recent repos here: https://github.com/brightnucleus/geolite2-country/blob/master/src/DatabaseUpdater.php\nI wanted to have a way of automatically keeping a geolocation database up-to-date on each composer update. This was not possible using the script hooks, as these are only executed for the root package.\nAt DatabaseUpdater.php L40-L41 you can see that you can attach arbitrary hooks to the Composer events in this way.\n. I had a quick look at the wp scaffold package command.\nFirst of all, I wonder why you did not reuse composer create-project functionality. As it stands now, the command itself has to know all the details about how a package is structured. It would be cleaner and more maintainable if you had one \"boilerplate\" package that gets pulled in through composer create-project and customized via a post-create-project-cmd script. I'll add this as a new issue to consider.\nThen I was wondering about how to make a freshly created package available immediately. A possible solution might be to have a composer.lock file be generated upon scaffolding.\nWhen you hit composer install, it first checks whether there is a composer.lock file. If it finds one, it does not scan the repositories at all, it just fetches the packages from the URL that is stored in the composer.lock file. So, theoretically, you could have a local URL stored in that composer.lock file, and then composer install would just work.\nGenerating a valid composer.lock without running composer update might be troublesome, though. But combined with the approach above (having a boilerplate package be pullled in), it might just be a simple regex-replace.\n. > Do you have much experience with repositories? I was thinking it might be possible to specify a repository of a local path, but it didn't seem to work in my testing when the path was already in the vendor directory.\nI have been experimenting a lot with more complex Composer setups lately, and so far I found a solution for pretty much anything with enough of digging.\nThe \"path\" repository type does indeed let you specify a local path to include. However, the whole point is to symlink whatever path you pass into it into your vendor folder. So, if you choose a package already located within you vendor folder, it will fail because the symlink target also exists, and even if it would work would not do much.\nIf your package is already located within your vendor folder, you don't need to pull it in anymore with composer install, if there is a composer.lock that already has stored the same version. Composer will just assume that it already fetched the correct version, without scanning the repositories.\nAlternatively, you could store the package somehwere other than the vendor folder (a temporary folder for wp-cli?), and then the \"path\" repository type will work, symlinking it into the vendor folder.\n. This is done by the package authors, by adding the type key to their composer.json.\nAs an example, this is used for WordPress plugins, by setting \"type\" => \"wordpress-plugin\" in the plugin's composer.json. Together with https://github.com/composer/installers, this makes sure that plugins get installed into the wp-content/plugins folder instead of the vendor folder.\n. @lukapaunovic Can you be more specific? What exactly are you doing and what is the result?\nAnd more importantly, are you setting the WPSITEURL setting in your wp-config.php file?. Yes, that is the correct syntax, it is documented under <file> in the docs:\n\nDo note that this differs from how post generate works for achieving the same thing, though:\n\n. Yes, that behavior is to be expected.\nAlso, if you are using \"path\" repositories, keep in mind that if the source is an active local git repository, it will be linked to as such, and any changes you make to the source (in whatever location that is stored) are also reflected in the symlinked vendor folder then.\nYou would first need to find out whether the changes in that git repository are something you did manually (in which case this error should stay as is), or whether the changes were somehow introduced by WP-CLI intself during an install/update process.\n. That might cause merge conflicts on git stash pop.\n. I also don't like just blindly trusting the HTTP_PROXY environment variable with WP-CLI, especially now that everyone just assumes it doesn't based on the prior lack of support.\nHowever, I think something like the following would solve the problem, and not cause a surprising change in behavior on existing installations:\n\nProvide support for a way to set a proxy through wp-cli.yml configuration files.\nAccept the value HTTP_PROXY as such a config-based proxy, which would tell WP-CLI to fall back to the environment variable.\n\nThis way, you can set WP-CLI up to honor the HTTP_PROXY environment variable if you so want, but you need to explicitly enable this because it opens up a new attack vector on your server.\n@c33s I assume this would solve your specific use case?. What is your \"minimum-stability\" set to? The version that would have been pulled in is marked as a pre-release version, so the \"minimum-stability\" needs to be set to a level that supports that: https://getcomposer.org/doc/04-schema.md#minimum-stability\nIf you do that, remember to set the \"prefer-stable\" to true as well, to avoid pulling in development versions for everything...\n. Composer seems to use /Users/danielbachhuber/salty-wordpress/wp-cli/packages/composer.json to pull in this package...\n. Can you post the final composer.json that is being used? I think it is modified on the fly, right?\n. > WP-CLI will exit with return code 1 if one or more of the operations failed.\nDid you think about having variable return codes to provide more context to the caller?\nFor example, you can differentiate between partial failures (two of the seven plugins did not install) and complete failures (no write access to install plugins), which allows the subsequent tools to decide how to proceed. For a partial failure, additional cleanup work / a rollback might be needed.\nThe scripts that don't care about this additional information can still just check for a non-zero exit code, the additional information is optional.\nFor reference, here's the list of exit codes with special meanings, that shouldn't be used: http://www.tldp.org/LDP/abs/html/exitcodes.html\n. Composer makes a difference between downloading packaged releases and downloading from a source repository.\nWhen downloading packaged releases, these are served from a server that already has the metadata about the package (i.e. the version number). This metadata was stored from the composer.json that was found inside the release package. So, as a simplified example, it requests the package xyz/awesome at version 1.0.0, and the server can immediately fetch the exact version that is needed.\nWhen downloading from a source repository, the server (in this case usually a git server) does not provide such metadata. The actual metadata is found in the composer.json file as part of one of the source files. Unfortunately, this file exists in all branches, across all tags, and can be different between these. As there's no guarantee that a given tag or branch actually reflects the exact content of the composer.json file (i.e. the source code in tag v1.0.5 has the \"version\" set to 1.0.4 within its composer.json file)., Composer is forced to look through all branches, fetch the composer.json from each, and look through its contents, to be sure it finds the best possible version.. Ah, it seems the downloads are indeed packaged releases, so this should be configurable on the server that serves these releases.. There are three packages that would make immediate sense: the annotated commands, the standardized output formatter and the bootstrapper.\nI personally would love to have a generalized bootstrapper that can deal with all sorts of environments/frameworks, where the individual frameworks just provide the information that is needed.\nHowever, if WP-CLI really does keep the PHP 5.3 requirement, all of this is moot anyway. PHP versions progress faster now, and everyone should pretty much just drop PHP 5 support by now. This is done by some of the major libraries, so depending on external libraries is not an option anymore in this case.. No,ack is a specialized version of grep, meant to be used to search through source code.\nawk is a tool to extract and reformat text.. Profile of package-install.feature: https://blackfire.io/profiles/989896cf-c6d2-4a3d-b7b2-4bcbec688656/graph. Profile of framework.feature: https://blackfire.io/profiles/9b097d0b-b939-43d0-83ff-c57069d29664/graph. Yes, the profiling does not tell us much we don't know yet.. @danielbachhuber PSR-4, like the command.\nEither include with the src and adapt folders as needed, or split into two different PSR-4 roots. Having only 1 root is preferable for a package, though.. @danielbachhuber I guess it depends on how you want to split everything up. From your question, I assume you want to build 1 package with all of these commands, because they require the same base class, correct?\nThere's two other options:\nA. Have a base package wp-cli/db-command-base (or something along these lines) that provides the class for the above package, as well as any other external, third-party packages. Each actual command can then go into a separate package, and they require the base class through Composer.\nB. Keep the base class within the core package. (I don't like this approach though, seems messy to me)\nWith alternative A., naming is pretty straight-forward, and it allows third-party commands to make use of that base class as well, so I think I would prefer that to having everything wrapped into one single package.. Well, the Yaml parser package we're using is basically one class only as well.\nWhat do you think will be more complicated when splitting it up like this?. The tests that cover the general \"dealing with a db object\" would be in that separate package. And the command packages would only include their respective, specific tests.\nI'll think some more about this. I don't see an immediate issue with having small, granular packages per se. But I need to think through how the tests are being done in more detail.\nIn general, I always assume that you should be able to split packages at logical boundaries. If that should not be easily feasible, it might hint to a design flaw somewhere (which we might or might not want to change as a result).. Apparently, when you run wp language core, WP takes care of updating plugins and themes language files automatically now.\nWe'd probably need to set this filter: https://github.com/WordPress/WordPress/blob/master/wp-admin/includes/class-language-pack-upgrader.php#L74-L82\nI just think that WP-CLI should be very explicit about what it does, and what it doesn't. It is okay for WP to hook into an admin backend button click and do some magic. But I don't think that WP-CLI should do that sort of magic as well.. The Fedora project (community branch of Red Hat Enterprise Linux) uses a tool called rpmlint:\nhttps://fedoraproject.org/wiki/Packaging:Guidelines#Use_rpmlint. Might be interesting/relevent/a use case:\nhttps://github.com/pantheon-systems/rpmbuild-wp-cli. Ah, the issue was not very clear, sorry. I was referring to #3784 which originally only included PHP 7.0, but not PHP 7.1. Here's a profile run for wp package install binarygary/db-checkpoint:\nhttps://blackfire.io/profiles/4852c68c-d545-4c07-998b-39d4a763bd0f/graph. So, at first glance, 76 packages are being considered, resulting in 180k rule nodes.\nThe operation needs 242 MB (on PHP 7.0.15), of which roughly one third goes into json_decode().\nThere's no immediate general issue that I can identify, with the main culprit just being the fact that there's a lot of dependency rules to take care of.. Related: https://github.com/composer/composer/pull/6168. Yes, I agree. Ideally, there should never be fatal errors, and users should be offered meaningful next steps to resolve any issues they might encounter.. No, at least not as a priority.\nThe tests within one single package probably cannot be run concurrently anyway. That would only have made sense with several testing areas that don't overlap.\nI'll close this, and if we still have major performance problems with the tests after having everything split up, we can reconsider this.. wp_basename is just a one-liner: https://core.trac.wordpress.org/browser/tags/4.5.3/src//wp-includes/formatting.php#L4311\nAs the WP version does not have an include guard, we should probably just provide a WP-CLI specific version to not run into conflicts.. A mechanism to avoid double inclusion/definition/declaration. In this case, it would be wrapping it in:\nif ( ! function_exists( 'wp_basename' ) { ... }\nEDIT: Well, not sure these are called \"include guards\" in PHP. I'm used to that term from C/C++, where they were literally meant to guard you from including the same header file twice (these languages didn't have an include_once).. Related: https://github.com/wp-cli/ideas/issues/52. I'd suggest adding these in to accelerate the most common use case and add an option to disable these optimizations for the few cases where they might still cause an issue.. A basic algorithm could be to look for tables in the DB that match a known suffix, so that you can then extract the corresponding prefix and match that against the other tables.\nSo:\nCheck for list of tables to find a string that ends on options. Let's say you find a string random_options. Peeling options off of random_options leaves you with random_ as a possible prefix. If you then find a {$possible_prefix}posts and a {$possible_prefix}postmeta, you probably found the correct prefix. Compare whether it is a different one than the one in wp-config.php and let the user know about the findings.. @Lewiscowles1986 No, WP-CLI has a mechanism to load the variables from wp-config.php without triggering wp-settings.php.. Whether it is \"pragmatic\" is difficult to say, it mostly depends on what the effort would be.\nHaving a separate Composer package for the test suite would keep the other repos cleaner. Otherwise, every change to the test suite will need commits across all other repositories.\nI'd suggest focussing on #3850 first, and then use an hour or two to discover the exact amount of work this would need.\nI still think it would be worthwhile to do in terms of code quality and maintenance, but I'm not yet sure how easy it is to pull off.. Hi Thorsten,\nCan you add a test case for the optional switch, please?\nSee https://make.wordpress.org/cli/handbook/pull-requests/ for more details.. You're right, nothing changes in the result.\nHowever, the flag --skip-optimization introduced an alternate code path. The tests should at least make sure that this alternate code path is run through as well and doesn't produce an error.\nAdding the following will probably do the trick already:\n```\n  Scenario: Import from database name path by default while skipping optimizations\n    Given a WP install\nWhen I run `wp db export wp_cli_test.sql`\nThen the wp_cli_test.sql file should exist\n\nWhen I run `wp db import --skip-optimizations`\nThen STDOUT should be:\n  \"\"\"\n  Success: Imported from 'wp_cli_test.sql'.\n  \"\"\"\n\n``. If the SQL is valid, it shouldn't fail with--skip-optimizations` flag applied, but it could maybe fail when the flag is not applied, as the optimizations might not work in some edge cases with still valid SQL.\nNot sure that is possible with truly valid SQL, though, as the selection of arguments that @tfrommen chose seems pretty safe either way.. However, if SQL is passed in that is not strictly valid, but would still somehow work, the results would be different between the two code paths, and the --skip-optimizations one would fail where the other would still import (although with potentially corrupted data).. I could indeed have used that command myself recently, as I was dealing with a DB prefix that was not correctly being set, so I agree about the usefulness.\nHowever, given your use case, wouldn't you actually want to have a command to get the path to the config that is currently being used? So, that would return either <some/path>/wp-config.php or <some-path>/wp-config-local.php.. Yes, right. As I said, I had a related issue lately where seeing the prefix being used would have helped me save some time with troubleshooting.\nI wonder whether having access to the password would make sense as well. Someone being able to run WP-CLI would also be able to directly look into the wp-config.php or .env file (or access the DB directly anyway), so I don't think that would cause a security issue. Combined with RESTful access, it would potentially allow for more simple cloning of sites.. From Slack:\n\ndanielbachhuber [6:44 PM] \nok. the issue seems too abstract at this point. it'd be good to identify one or two actionable aspects, solve those, and address the rest of it later\nschlessera [6:45 PM] \nOk. I've had trouble in the past coming up with \"evolutionary steps\" when dealing with architectural issues like these.\nSometimes, there's no small steps to cross a given distance, it only works with a leap. I think this might be something along these lines. (edited)\nBut that's just a feeling. I'll think some more about this and try to find more concrete issues and solutions related to this.\ndanielbachhuber [6:46 PM] \nit's important to aways ask too: is this a solution in search of a problem?\nschlessera [6:46 PM] \nYes, which might be the case here.\ndanielbachhuber [6:47 PM] \nI think the use case \"can I use this command right now?\" is a valid one\ne.g. wp export requires a working WordPress install\nmight be a good place to start. I have currently two specific use cases for the above issue. They are both from the Bootstrap refactor, as this makes the loading of commands more flexible, and thus is more dependent on specifying loading order.\n\n\n\nThe test Removing a subcommand should remove it from the index from features/command.feature.\nThis test tries to remove the comment subcommand and asserts that it has gone from the list of available commands in the help screen\n\n\nThe test Installed packages work as expected from features/runcommand.feature.\nThis test tries to install the scaffold package subcommand through the package manager and asserts that the command appears on the list of available commands in the help screen.\n\n\nBoth of these currently fail with the bootstrap refactor due to loading order. The subcommands get removed/added when the main command they depend on has not yet been loaded and added.\nWhile thinking about these, I devised very basic mechanism that should solve the above cases and that satisfies the following conditions:\n\nIt fits within the current architecture without introducing a new concept.\nIt is backwards-compatible.\nIt is optional, and code can still keep using the current approach (as long as it is working as expected).\nIt allows for both the loading of commands/subcommands in the correct order as well as deactivating commands that don't make sense in the given context.\n\nThe mechanism would just be an extension of the hooks system, adding before and after hooks to each add_command() call, with the name of the command as a suffix: before_add_command:<command> and after_add_command:<command>.\nThe after_add_command:<command> hook can be used to define loading order. So, for the use case 1. above, we would solve it by attaching the remove_command() call to after_add_command:comment.\nTh before_add_command:<command> hook can be used to check requirements. The hook should get a reference to a value that defines whether WP-CLI should proceed with the loading or not. For example, we could have the callback return a WP_Error for the db command if the database configuration cannot be read. The error string would then be shown as the reason within the help screen, as illustrated in the above mock screenshot.\nThe only change we would need is to allow the do_hook() to pass arguments to the hooks. If these are passed by reference, they can be used as a kind of return value as well. This can easily be done in a way that won't break existing code.. Ah, nice, so this should be very easy to implement, then.\nI'll do a PR with the hooks and a few tests.. In defense of your brain, the corresponding documentation is missing => https://github.com/wp-cli/wp-cli/issues/4028. For the hook name, we need to decide on a way to encode command/subcommand relationships.\nSo, for example, for the hook that adds the subcommand scaffold package, these would be straight-forward options:\n\nbefore_add_command:scaffold:package - keeps the colon as the separator\nbefore_add_command:scaffold/package - has the slash as the command relationship separator, keeping it separate from the hook separator\nbefore_add_command:scaffold.package - has the dot as the command relationship separator, keeping it separate from the hook separator\n\nAny preference? Any additional options that make sense?. Hmm, if that works in all cases. Given the command-line environment, I'm very paranoid about spaces... :). Yes, I already made the change.\nThe system is basically done, I just need to wait for https://github.com/wp-cli/wp-cli/issues/4030 to be merged.. The hooks are now in, and this type of simple dependency resolution should work.\nHowever, I'd like to look further into providing feedback like in the mockup above about why a command might not be available. The before_add_command:<command> hook passes a WP_CLI\\Dispatcher\\CommandAddition object to the callback, which has an abort( $reason ) method.\nI'm thinking about adding a new command object for this, something like WP_CLI\\Dispatcher\\DisabledCommand. When preparing the help screen, we can then still cycle over all commands, but provide different output for the disabled ones. They should also not be available to be actually run.\nWhat do you think?. Created new issue: #4035. The package I suggested to add in #3877 includes an auto-commit feature that commits any changes on composer update whenever package versions changed: https://github.com/pyrech/composer-changelogs/blob/master/doc/autocommit.md. As noted in Slack, you might want to take a look at https://github.com/pyrech/composer-changelogs/blob/master/doc/autocommit.md for this ticket.. Your database schema seems off. The site_id is the ID of the \"network\" within a \"multi-network\" (a network of multiple multisites) install of WordPress (which is not supported out of the box yet). For a normal multisite install (a network of multiple single sites), you should only have 1 single site_id (=1), and it should point to the root domain of the multisite install.\nSo, what you would want to see is this (note the ID and the domain):\nMariaDB [mm11]> select * from WBPNsite;\n+----+-----------------------------------+------+\n| id | domain                            | path |\n+----+-----------------------------------+------+\n|  1 | staging.example.com               | /    |\n+----+-----------------------------------+------+. How about this:\n3. Use both as dependencies to determine order\nCreate a separate composer.json for testing, that includes both the package to test as well as WP-CLI nightly as dependencies, in that order. This will create one common autoloader where the package to test is in front of WP-CLI nightly. Then we can create a kind of bootstrap file that first loads that common autoloader and then kicks off the tests.. Well, as far as I understood, the functionality will be removed from the main package within the source code, and would only be provided by the bundled PHAR version. The bundled PHAR would already contain the external Composer package, so a wp package install wp-cli/cron-command would not do anything. However, the bundled PHAR would at that point already come with the previously tested Composer version.\nSo, if I understood correctly, the problem is limited to finding a way to test commits to the external package against a WP-CLI nightly that already comes bundled with that same package in a pre-commit version.. > Incorrect. There are two composer.json files, one for WP-CLI and one for installed packages. The packages autoloader is loaded much later: https://github.com/wp-cli/wp-cli/blob/90332c4399f99b6a52a6fbcfd2662df880891808/php/WP_CLI/Runner.php#L811\nNot sure we are talking about the same thing here.\nWhat is the expected behaviour when you run wp package install wp-cli/cron.command when the cron command is already installed as a package? I would say that the expected behaviour should be that you get a message that the package is already installed, and no change is made.\nThe more interesting question would be whether you can run a wp package update wp-cli/cron.command to update an external more recent version of the cron package over an outdated bundled version.\nIn that case I would say that the expected behavior should be that the outdated cron package is replaced by the up-to-date cron package, and that later calls to wp cron would make use of the updated package.\nConceptually, I would like to see WP-CLI as the framework only come with the wp package command built in. All of the other commands should be external packages, but some of them could be bundled with the PHAR release. So, WP-CLI-the-framework is a package manager for WordPress command-line commands. Within this concept, there should be no direct technical difference between a command that was already installed (or bundled in PHAR) and a command that is added later on via the wp package install command.\nAssuming the above assumptions would be true, tests for external commands would need to be either done against a Composerized version of WP-CLI, or add the WP-CLI PHAR nightly as I suggested above as a second autoloader after the actual command to test.. Just a note about an implementation detail:\nWe can provide a \"meta\" Composer package that defines the commands to be bundled. This would then be used by the PHAR build process, and it could also be used by people wanting to quickly install WP-CLI through Composer with a basic set of commands.. So, the composer.json that comes included with the PHAR is hardcoded, it cannot be changed, the PHAR being read-only (or at least it needs to be considered that way).\nAs WP-CLI needs to be aware of two composer.json files with two separate autoloaders either way, there's two general routes:\n1. adapt the order of loading between PHAR autoloader and home folder autoloader.\n2. initialize home folder autoloader to included PHAR stuff on first use and then swap to home folder autoloader only.\nI'll have a closer look into the code now to see what the exact execution order is.. The current code contains this in WP_CLI\\Runner::start() line 807-809:\n// Load bundled commands early, so that they're forced to use the same\n        // APIs as non-bundled commands.\n        Utils\\load_all_commands();\nOf course, forcing to loading bundled versions first is a major problem in the context of this ticket.\n@danielbachhuber, can you elaborate on the comment in that snippet? What was the problem that this force-loading was meant to solve?. I probably still ignore why you wanted to force load bundled commands early. Provided that whatever reason there is can be dealt with in a different manner, it would probably be fairly simple to turn the loading around so that the package commands are loaded first, and then the bundled commands are loaded wherever they have not been replaced by a packaged command yet. In this way, package-installed commands would take precedence, with a fall back to the bundled versions.. When we swap around the loading of the commands in this way, we can avoid loading the autoloader for the bundled commands up until the point where the autoloader for the packaged commands has already been loaded, and all the packaged commands have already been registered.. I found the initial addition of the loading code, but it didn't come with an issue number: https://github.com/wp-cli/wp-cli/commit/782a6b71f2382ebb29614bfb8f441bd8e0f3ff5a\nIn the WP_CLI\\Utils\\load_dependencies() function, we could probably already check whether there's a home folder autoloader, and load this one first. I'll try to summarize the bootstrap process:\n\nSet up environment, and find out where main WP files are\nLoad package autoloader\nLoad WP_CLI autoloader\nLoad PHAR hardcoded autoloader\nRegister package management\nRegister packaged commands\nRegister PHAR hardcoded commands that haven't been registered through packaged commands yet\n. Found a bit of information for the commit that changed the load_command() to load_all_commands():\nAlso modifies the bootstrap process to always register commands, instead\nof lazyloading them based on command name. Packages and required\ncommands are always loaded, so we should follow similar behavior with\ncore commands.\n. Yes, indeed. I would assume that we need to have the autoloaded be active before loading the --require file, as it will probably make use of previously defined classes.\n\nSo, updated summary:\n\nSet up environment, and find out where main WP files are\nLoad package autoloader\nLoad WP_CLI autoloader\nLoad PHAR hardcoded autoloader\nRegister package management\nLoad --require file (in case this is an autoloader, it will not be able to override the autoloaders under 2., 3. & 4.)\nRegister packaged commands that have not been registered through --require yet\nRegister PHAR hardcoded commands that haven't been registered through either --require or the packaged commands yet. Do you want me to have a go at this in a pushed branch? Seems like a good way to get more intimate with the code... ;). The following scenarios should be covered by the tests to reliably make changes to the bootstrap process:\n\nTo test normal code changes:\n- [x] Git WP-CLI -> override command with --require\n- [x] Git WP-CLI -> override command with package install\nTo test for regressions:\n- [x] Downloaded PHAR WP-CLI -> override command with --require\n- [x] Downloaded PHAR WP-CLI -> override command with package install\nTo test new bundled builds:\n- [x] PHAR from Git WP-CLI -> override command with --require\n- [x] PHAR from Git WP-CLI -> override command with package install\nTo test Composer builds:\n- [x] Composer stack WP-CLI -> override command with --require\n- [x] Composer stack WP-CLI -> override command with package install\n- [x] Composer stack WP-CLI -> override command with composer require. I have completed the test suite that should cover the possible bootstrap interactions for overriding commands.\nAt this time, one single test scenario fails: Composer stack with override requirement before WP-CLI\nThis is the scenario that should cover what we want to achieve for the tests of the external commands, as discussed above.\nI will now proceed to make changes to the bootstrap process, all the while running the changes through all the tests that are tagged with @bootstrap.\n@danielbachhuber Can you confirm that the above makes sense?\n. I do think that the \"files\"already checks for Composer autoloader order, but I agree that it would probably be safer to also add classes with a PSR-4 autoloader as well.. One bigger issue I am facing is the early need for cli\\Shell class located in a Composer package, as I want to load the actual WP_CLI autoloader only after having loaded the package autoloaders.\nDependencies involved:\npackage autoloaders -> logging\nlogging -> colorization\ncolorization -> cli\\Shell::isPiped()\nTo get around this issue for now, I will add cli\\Shell::isPiped() to WP_CLI\\Utils\\isPiped() (it is currently being used in 2 places).\nOnce I've gone through a working refactor, we'll need to rediscuss some of the code layout either way.. I have refactored the bootstrap process (trying to make the least amount of changes to surrounding code). However, the actual problem we want to solve cannot be dealt with through rearranging only.\nBefore investing more time into this, I'd like to discuss the implications.\nFirst of all, a short summary of what the bootstrap process looks like now.\nThe actual \"kick-off\" is simplified: https://github.com/wp-cli/wp-cli/blob/0addae7296c3fcc55f5b31d5308856c185bc37a4/php/wp-cli.php#L14-L15\nIt basically just makes the bootstrap classes available, and then cycles through them to invoke each one.\nThe order in which the bootstrap steps are invoked can be found here: https://github.com/wp-cli/wp-cli/blob/0addae7296c3fcc55f5b31d5308856c185bc37a4/php/bootstrap.php#L13-L30\nWe might even want to make this filterable somehow later on.\nHere's how the class diagram for the WP_CLI\\Bootstrap namespace:\n\nIn general, I think that this bootstrap process is preferable to the procedural way it was done before. It offers much more control and lets us easily make modifications in a more sane way.\nThe main problem we wanted to solve is that Composer-required packages should override packages that were bundled. The main issue is that the Composer-required packages will need to have the framework autoloader be available already, to make use of the framework API. However, this framework autoloader is the exact same one that has the bundled commands and hence their autoloader. I tried providing a separate custom autoloader to load the framework API in advance, and only loading the rest of the bundled Composer autoloader later. This does not work, though, as there are some external dependencies that are needed early on, like the YAML parsing library.\nWe need to find a way to separate the autoloader generated for the bundled commands (like wp-cli/cron-command) from the autoloader that provides the external dependencies for the framework itself.\nOne idea would be to have a Composer plugin hook into the autoloader generation and filter out the commands from the normal vendor/autoload.php and put them into a separate vendor/autoload-commands.php.\nAnother idea would be to have a different mechanism for including the bundled commands, somehow using a \"bundled package install\" or something.. I think the splitting of the autoloader works pretty much as expected. I could iron out most of the issues now, except for a rather annoying YAML issue. The YAML library that is being used in the WP_CLI\\Configurator is procedural code, not class-based. As the splitting of the autoloader can only be done per class, this is not loaded with the framework code.\nWe already have the Symfony YAML library included as a dependency as well, and I wonder why that one is not being used. It would solve this issue, as Symfony is strictly OOP.. Yes, but I thought the problem came from using a PHAR while testing? Won't we ever have the need to make this work with PHARs?. Thanks, @fjarrett !. Although the labels might differ between the packages (as they also include the scope), the coloring for the shared labels should be made consistent.\nNote the good-first-issue label in the screenshot below:\n\n. This is now implemented for commands, but parameters are not yet affected by this implementation.. Types of user entry to implement suggestions for:\n- [x] (sub)commands\n- [x] parameters\n- [x] aliases. Resolved with #4004, #4008 and #4109.. @khromov You are right. While implementing the suggestion feature, we had discussed the more distant changes like these, and decided that we want to keep the threshold low, but add a pre-built dictionary of suggestion mappings instead.\nHere's the issue for that: https://github.com/wp-cli/wp-cli/issues/4379. @khromov This is an issue with your local Mac setup, namely the hostname.\nAs you can see in the error message, your hostname seems to be set to 57434, which is not valid. As localhost is resolved to this hostname you'll get the above error.\nYou need to properly configure a valid hostname for your Mac.. So, the basic code is good now and seems to work as expected. There are still failing tests, which are either nuances I didn't pay attention to while refactoring or genuine changes in behaviour that we need to either fix through hardcoding or mark as breaking changes (TBD on a case by case).\nWhat I am doing now is mark all of the broken tests with a @broken tag and add a snippet to Travis to skip these by default.\nThis allows us to go through them one by one and always have meaningful Travis output when we commit a change and remove the @broken tag (otherwise Travis is useless until all is perfect).. Next step is to get rid of remaining test failures:\n- [x] Detect cyclic autoloading and add class_exists() guard\n- [x] Change remove_command test and discuss better approach for loading order\n- [x] Hardcode wp cli info for now and discuss better approach for \"safe\" commands\n. @danielbachhuber This should now be ready to be merged.\nAs we had already discussed, there's still two tests that are marked as @broken (and hence skipped on Travis):\n\n\nComposer stack with override requirement after WP-CLI\nThe expected behavior is that the original WP-CLI command should run, not the override. The test shows that the override is run instead, though.\nI'm not yet sure whether the expected behavior is even feasible, but it should not pose any problem to existing code, as such a scenario was not at all supported before.\n\n\nComposer stack with override requirement before WP-CLI\nThis is teh same test as 1., but in the opposite order, where we would expect the override to be active instead of the original command.\nThe test shows that this is the case, but then the clean-up mysteriously fails and blocks Behat. I suspect this is due to the way the branch is pulled in. This will need further examination, but does not directly have anything to do with the behavior that is being tested.. This change was introduced to decrease the chance of SQL dumps being accessible from the web at predictable URLs, as you can see here: https://github.com/wp-cli/wp-cli/pull/3765#issue-202674584\n\n\nIf your scripts rely on the name to be fixed, you should change them to export to a fixed name, as @szepeviktor has already shown above.. #3876 needs to taken care of first before switching the library.. Given that #3876 can not be easily resolved without introducing major breaking change, the preferable course of action might be to either submit a patch to mustangostang/spyc or fork it (it is only a single file) so that we can load the Spyc class through the class map.. Closed in favor of https://github.com/wp-cli/wp-cli/issues/3882. If I understand the specs correctly, this is even a bug in the Spyc library with the YAML 1.0 spec, so the proper resolution would be to get rid of such notations.\nHowever, the way WP-CLI parses the YAML into command line arguments seems to heavily rely on this bug, so a change would very probably break lots of real-world usage.. Yes, agree.. pyrech/composer-changelogs is PHP 5.4+.\nIt seems that the only 5.4-specific feature that is being used is short array syntax. I'll submit a quick PR to see if the maintainer if willing to lower the requirement.. Related PR: https://github.com/pyrech/composer-changelogs/pull/44. @danielbachhuber If we want to have an automated way, we can make use of Composer, as that is the component that pulls in the bundled commands. Also, we're forced to keep this up-to-date, as the failure to do so will break the full Phar test-suite we're working on.\nAs an example, here's the data that Composer currently generates in vendor/composer/autoload_commands_classmap.php:\n\n\n    'CLI_Command' => $baseDir . '/php/commands/src/CLI_Command.php', \n    'Cache_Command' => $vendorDir . '/wp-cli/cache-command/src/Cache_Command.php', \n    'Capabilities_Command' => $vendorDir . '/wp-cli/role-command/src/Capabilities_Command.php', \n    'Checksum_Command' => $vendorDir . '/wp-cli/checksum-command/src/Checksum_Command.php', \n    'Comment_Command' => $vendorDir . '/wp-cli/entity-command/src/Comment_Command.php', \n    'Comment_Meta_Command' => $vendorDir . '/wp-cli/entity-command/src/Comment_Meta_Command.php', \n    'Config_Command' => $vendorDir . '/wp-cli/config-command/src/Config_Command.php', \n    'Core_Command' => $vendorDir . '/wp-cli/core-command/src/Core_Command.php', \n    'Core_Language_Command' => $vendorDir . '/wp-cli/language-command/src/Core_Language_Command.php', \n    'Cron_Command' => $vendorDir . '/wp-cli/cron-command/src/Cron_Command.php', \n    'Cron_Event_Command' => $vendorDir . '/wp-cli/cron-command/src/Cron_Event_Command.php', \n    'Cron_Schedule_Command' => $vendorDir . '/wp-cli/cron-command/src/Cron_Schedule_Command.php', \n    'DB_Command' => $vendorDir . '/wp-cli/db-command/src/DB_Command.php', \n    'EvalFile_Command' => $vendorDir . '/wp-cli/eval-command/src/EvalFile_Command.php', \n    'Eval_Command' => $vendorDir . '/wp-cli/eval-command/src/Eval_Command.php', \n    'Export_Command' => $vendorDir . '/wp-cli/export-command/src/Export_Command.php', \n    'Import_Command' => $vendorDir . '/wp-cli/import-command/src/Import_Command.php', \n    'Media_Command' => $vendorDir . '/wp-cli/media-command/src/Media_Command.php', \n    'Menu_Command' => $vendorDir . '/wp-cli/entity-command/src/Menu_Command.php', \n    'Menu_Item_Command' => $vendorDir . '/wp-cli/entity-command/src/Menu_Item_Command.php', \n    'Menu_Location_Command' => $vendorDir . '/wp-cli/entity-command/src/Menu_Location_Command.php', \n    'Network_Meta_Command' => $vendorDir . '/wp-cli/entity-command/src/Network_Meta_Command.php', \n    'Option_Command' => $vendorDir . '/wp-cli/entity-command/src/Option_Command.php', \n    'Package_Command' => $vendorDir . '/wp-cli/package-command/src/Package_Command.php', \n    'Plugin_Command' => $vendorDir . '/wp-cli/extension-command/src/Plugin_Command.php', \n    'Post_Command' => $vendorDir . '/wp-cli/entity-command/src/Post_Command.php', \n    'Post_Meta_Command' => $vendorDir . '/wp-cli/entity-command/src/Post_Meta_Command.php', \n    'Post_Term_Command' => $vendorDir . '/wp-cli/entity-command/src/Post_Term_Command.php', \n    'Post_Type_Command' => $vendorDir . '/wp-cli/entity-command/src/Post_Type_Command.php', \n    'Rewrite_Command' => $vendorDir . '/wp-cli/rewrite-command/src/Rewrite_Command.php', \n    'Role_Command' => $vendorDir . '/wp-cli/role-command/src/Role_Command.php', \n    'Scaffold_Command' => $vendorDir . '/wp-cli/scaffold-command/src/Scaffold_Command.php', \n    'Search_Replace_Command' => $vendorDir . '/wp-cli/search-replace-command/src/Search_Replace_Command.php', \n    'Server_Command' => $vendorDir . '/wp-cli/server-command/src/Server_Command.php', \n    'Shell_Command' => $vendorDir . '/wp-cli/shell-command/src/Shell_Command.php', \n    'Sidebar_Command' => $vendorDir . '/wp-cli/widget-command/src/Sidebar_Command.php', \n    'Site_Command' => $vendorDir . '/wp-cli/entity-command/src/Site_Command.php', \n    'Site_Option_Command' => $vendorDir . '/wp-cli/entity-command/src/Site_Option_Command.php', \n    'Super_Admin_Command' => $vendorDir . '/wp-cli/super-admin-command/src/Super_Admin_Command.php', \n    'Taxonomy_Command' => $vendorDir . '/wp-cli/entity-command/src/Taxonomy_Command.php', \n    'Term_Command' => $vendorDir . '/wp-cli/entity-command/src/Term_Command.php', \n    'Term_Meta_Command' => $vendorDir . '/wp-cli/entity-command/src/Term_Meta_Command.php', \n    'Theme_Command' => $vendorDir . '/wp-cli/extension-command/src/Theme_Command.php', \n    'Theme_Mod_command' => $vendorDir . '/wp-cli/extension-command/src/Theme_Mod_Command.php', \n    'Transient_Command' => $vendorDir . '/wp-cli/cache-command/src/Transient_Command.php', \n    'User_Command' => $vendorDir . '/wp-cli/entity-command/src/User_Command.php', \n    'User_Meta_Command' => $vendorDir . '/wp-cli/entity-command/src/User_Meta_Command.php', \n    'User_Session_Command' => $vendorDir . '/wp-cli/entity-command/src/User_Session_Command.php', \n    'User_Term_Command' => $vendorDir . '/wp-cli/entity-command/src/User_Term_Command.php', \n    'WP_CLI\\\\CommandWithDBObject' => $vendorDir . '/wp-cli/entity-command/src/WP_CLI/CommandWithDBObject.php', \n    'WP_CLI\\\\CommandWithMeta' => $vendorDir . '/wp-cli/entity-command/src/WP_CLI/CommandWithMeta.php', \n    'WP_CLI\\\\CommandWithTerms' => $vendorDir . '/wp-cli/entity-command/src/WP_CLI/CommandWithTerms.php', \n    'WP_CLI\\\\CommandWithTranslation' => $vendorDir . '/wp-cli/language-command/src/WP_CLI/CommandWithTranslation.php', \n    'WP_CLI\\\\CommandWithUpgrade' => $vendorDir . '/wp-cli/extension-command/src/WP_CLI/CommandWithUpgrade.php', \n    'WP_CLI\\\\CoreUpgrader' => $vendorDir . '/wp-cli/core-command/src/WP_CLI/CoreUpgrader.php', \n    'WP_CLI\\\\DestructivePluginUpgrader' => $vendorDir . '/wp-cli/extension-command/src/WP_CLI/DestructivePluginUpgrader.php', \n    'WP_CLI\\\\DestructiveThemeUpgrader' => $vendorDir . '/wp-cli/extension-command/src/WP_CLI/DestructiveThemeUpgrader.php', \n    'WP_CLI\\\\Fetchers\\\\Comment' => $vendorDir . '/wp-cli/entity-command/src/WP_CLI/Fetchers/Comment.php', \n    'WP_CLI\\\\Fetchers\\\\Plugin' => $vendorDir . '/wp-cli/extension-command/src/WP_CLI/Fetchers/Plugin.php', \n    'WP_CLI\\\\Fetchers\\\\Post' => $vendorDir . '/wp-cli/entity-command/src/WP_CLI/Fetchers/Post.php', \n    'WP_CLI\\\\Fetchers\\\\Site' => $vendorDir . '/wp-cli/entity-command/src/WP_CLI/Fetchers/Site.php', \n    'WP_CLI\\\\Fetchers\\\\Theme' => $vendorDir . '/wp-cli/extension-command/src/WP_CLI/Fetchers/Theme.php', \n    'WP_CLI\\\\Fetchers\\\\User' => $vendorDir . '/wp-cli/entity-command/src/WP_CLI/Fetchers/User.php', \n    'WP_CLI\\\\LanguagePackUpgrader' => $vendorDir . '/wp-cli/language-command/src/WP_CLI/LanguagePackUpgrader.php', \n    'WP_CLI\\\\NonDestructiveCoreUpgrader' => $vendorDir . '/wp-cli/core-command/src/WP_CLI/NonDestructiveCoreUpgrader.php', \n    'WP_CLI\\\\REPL' => $vendorDir . '/wp-cli/shell-command/src/WP_CLI/REPL.php', \n    'WP_CLI\\\\SearchReplacer' => $vendorDir . '/wp-cli/search-replace-command/src/WP_CLI/SearchReplacer.php', \n    'WP_Export_Base_Writer' => $vendorDir . '/wp-cli/export-command/src/WP_Export_Base_Writer.php', \n    'WP_Export_Exception' => $vendorDir . '/wp-cli/export-command/src/WP_Export_Exception.php', \n    'WP_Export_File_Writer' => $vendorDir . '/wp-cli/export-command/src/WP_Export_File_Writer.php', \n    'WP_Export_Oxymel' => $vendorDir . '/wp-cli/export-command/src/WP_Export_Oxymel.php', \n    'WP_Export_Query' => $vendorDir . '/wp-cli/export-command/src/WP_Export_Query.php', \n    'WP_Export_Returner' => $vendorDir . '/wp-cli/export-command/src/WP_Export_Returner.php', \n    'WP_Export_Split_Files_Writer' => $vendorDir . '/wp-cli/export-command/src/WP_Export_Split_Files_Writer.php', \n    'WP_Export_Term_Exception' => $vendorDir . '/wp-cli/export-command/src/WP_Export_Term_Exception.php', \n    'WP_Export_WXR_Formatter' => $vendorDir . '/wp-cli/export-command/src/WP_Export_WXR_Formatter.php', \n    'WP_Export_XML_Over_HTTP' => $vendorDir . '/wp-cli/export-command/src/WP_Export_XML_Over_HTTP.php', \n    'WP_Iterator_Exception' => $vendorDir . '/wp-cli/export-command/src/WP_Iterator_Exception.php', \n    'WP_Map_Iterator' => $vendorDir . '/wp-cli/export-command/src/WP_Map_Iterator.php', \n    'WP_Post_IDs_Iterator' => $vendorDir . '/wp-cli/export-command/src/WP_Post_IDs_Iterator.php', \n    'Widget_Command' => $vendorDir . '/wp-cli/widget-command/src/Widget_Command.php', \n\n\n\u00a0\nSo, it might be as simple as checking the get_class() of the current command being executed against this list.\nComposer can also generate this list in a more convenient way for the tracking functionality, if that should be needed.. Want me to do a PR for a WP_CLI::is_bundled_command( $command ): bool?. I added it to the WP_CLI\\Utils file, because it doesn't need WP to run, and thus can be better tested that way.. The Travis job failed for 7.1 for having failed to clean up 1 file. I restarted it because I suspect that might just have been a temporary issue.. Looks like this needs the same change as https://github.com/wp-cli/wp-cli/pull/3887/commits/c91c53dc01fda0ef2f8e4da93f9f950bfc4b5c02 to make the tests pass.. > This is correct. It's a common WordPress pattern.\nYes, unfortunately. ;)\n\nHow often does this happen?\n\nI have no hard numbers here, but, in the context of WordPress, I suspect that a large number of bugs or newbie coding requests are caused by this (\"my query does not work...\"), and it is one of the reasons why developers need to constantly look up stuff in the documentation or source code when working with WordPress, instead of just being assisted by their IDE like in any other environment.\n\nDo the benefits of these means outweigh the costs? Some costs include: deviation from standard patterns, additional code complexity, time spent on this vs. other focuses.\n\n\n\"deviation from standard patterns\" -> the more wide-spread pattern is to make code DRY and only use one single source of truth to avoid the possibility of typos;\n\"additional code complexity\" -> Only if you consider adding a section with all known constants at the top of a class additional complexity. I would argue that it does the contrary. You have one place where you see at a glance what the possible options are, and you get immediate feedback in your IDE if you use something else;\n\"time spent on this vs. other focuses\" -> I'm not saying we should rewrite the entire code base. But whenever we touch related code, we might introduce such constants and slowly improve usage of them. Making the transition complete can be evaluated at a later time as opportunity arises. Starting with it would however build more robust conventions for future commands.. > What about a class with multiple methods that each accept multiple arguments?\n\nYes, still preferable to the arguments array.\nBasically, the arguments array takes all of the improvements PHP has made to its typing system, to its OOP mechanisms, etc... and throws it out the window to replace everything with dumb strings. All of the assistance that both the language and the tools provide are gone, you can only validate by hand to make sure your strings are the exact strings that you were looking for.... Quick preview of how these class constants look from within an IDE...\nYou define the class constants where they make the most semantic sense. In PHP, class constants can also be defined in interfaces, not only in classes.\nDefining them like this makes the list of choices very explicit and self-documenting.\n\nThen, from within the consuming code, you get a list of available options and can easily choose one. As auto-completion is active, although the references contain more characters, they are faster to type then the raw strings. And you can't introduce typos.\n\n. This might not be that relevant here, but here's another argument against arrays, for completeness' sake:\nhttps://twitter.com/nikita_ppv/status/847855830821109760\nIn case the tweet is not expanded:\nSome graphs comparing memory usage of arrays and objects (with declared properties) in PHP 7. Arrays need between 2x and 6x more memory.. > This is a common code pattern in the WordPress world.\nHa, now you're taking the easy way out.\nOf course it isn't. WordPress code in general is of very low quality, and most of the common code patterns are for procedural legacy PHP.\nBut I agree this is not a high impact. I'm not suggesting we go ahead and rewrite major parts of WP-CLI.\nHowever, I would really like stuff like this to be considered when we are creating new code. There's no need to repeat issues like these when creating code from scratch.\nAs a sidenote: I don't really understand the argument about IDEs. Yes, there's more advantages to be had when using an IDE. That doesn't mean that it removes anything for people not using an IDE. In fact, I would even go so far as to say that code patterns like the \"$args\" pattern are what make people believe that there's no inherent difference between a text editor and an IDE, as both just force you to type everything out in the same manner.. > Happy to consider it when creating new code. Not sure why it's worth bringing up when taking about old code.\nTo give examples of what we should try to avoid in the future. The cross-referenced issue just now happended to be a case that demonstrated a type of mistake that is avoidable through code patterns.\n\nThe $args pattern makes everything readable in a few short lines. Introducing a half dozen class variables is harder to read and understand when you're not using an IDE that interprets it.\n\nClass constant definitions can be just as short. But they do provide semantic meaning, which the random strings are lacking.\nI'm happy that this has at least been discussed and can be considered for future code.. Travis failed on merge, on PHP 5.6 only:\n```\n01. $ wp scaffold _s starter-theme --sassify\n    Success: Created theme 'Starter-theme'.\ncwd: /tmp/wp-cli-test-run-58c39c974c5645.45775690/\nexit status: 0\nIn step `And the {THEME_DIR}/starter-theme/sass directory should exist'. # features/steps/then.php:158\nFrom scenario `Scaffold starter code for a theme with sass'.             # features/scaffold.feature:312\nOf feature `WordPress code scaffolding'.                                 # features/scaffold.feature\n\n422 scenarios (421 passed, 1 failed)\n4345 steps (4344 passed, 1 failed)\n27m43.348s\n```\nLooks like a random error, I restarted the Travis build.. Travis build passed without issues upon restart.. Travis failed on a bad WP Core download checksum, restarting.. This broke a different test:\n```\n01. $ wp cli alias\n    ---\n    @all: Run command against every registered alias.\n    @testdir:\n      path: /tmp/wp-cli-test-run-58c734c6a29c39.58476041/testdir\ncwd: /tmp/wp-cli-test-run-58c734c6a29c39.58476041/\nexit status: 0\nIn step `Then STDOUT should be YAML containing:'.             # features/steps/then.php:117\nFrom scenario `List available aliases'.                       # features/aliases.feature:103\nOf feature `Create shortcuts to specific WordPress installs'. # features/aliases.feature\n\n391 scenarios (390 passed, 1 failed)\n4101 steps (4096 passed, 4 skipped, 1 failed)\n27m21.415s\n```. I suggest having a flag you can set to just add the PHPCS test to one of the existing environments. This removes the need to completely set up one additional environment just for the PHPCS check.\nAs an example, here's a constant that is defined in the matrix setup: https://github.com/brightnucleus/config/blob/master/.travis.yml#L22\nThen, further below, this constant is checked to conditionally run the tests: https://github.com/brightnucleus/config/blob/master/.travis.yml#L54-L55\nBenefits:\n\nYou don't need to setup an additional environment just for the check.\nYou can easily choose in which environment to run the tests. If needed, it can be run in multiple environments as well.. No, this should be handled with the following set of Composer options:\n\"minimum-stability\": \"dev\",\n    \"prefer-stable\": true,. Yes. That should have the same effect, using the latest matching stable as far as possible, and falling back to dev-master if no stable fits the requirements.. That would be very useful, although we'd need to do some heavy thinking about how to do this in a safe and reliable way. First thoughts are that we would need to have a list of meta data about the individual packages, that we could then run through templates.. I thought some more about this. To move quickly, I suggest the following:\n\nTo run commands across packages, I suggest using gr for now. You can set it up in a matter of minutes, and it allows you to run arbitrary commands across a subset of the repos (like gr @wp-cli-commands composer update).\nTo build scripts to simplify common tasks, I suggest using robo. It allows us to build arbitrary functionality, has built-in support for VCS, Phars, etc... It will be one file at the root of the organization folder (provided your folder layout mirrors the GitHub org setup).\nI also suggest building a generalized behat feature that tests for all that we want to see in an external command. Stuff like having the correct version strings in the requirements, proper Travis setup, etc... Every time we make a change to our \"ideal setup\", we should not only change the scaffolding system, but also the tests described above to make sure we are actually using the latest changes across all packages as well. Travis will then help us keep all of our packages at the same state.. The problem with WP-CLI is that it needs a WordPress install to even start doing something.. I actually don't really care about what tool to use, gr just happens to be ready and you can set it up in 10 minutes' time. We should at least consider it as a temporary solution.. > Temporary solutions have a tendency to become permanent solutions.\nOh, yes, I can affirm... :)\nI wonder, though, where do we draw the line between \"makes sense to include in WP-CLI\" and \"I have a hammer, everything looks like a nail\"?\nRunning some kind of upgrade procedure across a multitude of GitHub repositories... does that still have anything to do with the \"command line interface to WordPress\"? It is on the command line, yes, but it does not have anything to do with WordPress for my understanding.\nSo, more generally, are we building WP-CLI-CLI? :). Agree, but it's also a very easy fix that might save time and processing power.. @danielbachhuber If I understand correctly, adding fast-finish to the Travis configuration would allow for what you want above, but get rid of multiple runs of PHPCS:\n\nWith fast finishing enabled, Travis CI will mark your build as finished as soon as one of two conditions are met: The only remaining jobs are allowed to fail, or a job has already failed. In these cases, the status of the build can already be determined, so there\u2019s no need to wait around until the other jobs finish.\n\nSo, having the PHPCS only on the first entry in the matrix, with fast-finish set to true, would immediately fail the entire build if PHPCS fails.. This looks like an issue specific to your environment. The PHP error you see probably means that the WordPress upgrade action returned false, which means that there were connection/permission issues with your filesystem. Verify the filesystem and FTP settings of your installation.. I just noticed that we haven't yet merged the branch alias stuff (in branch wp-cli/package.command@1-phar-access. So the currently pulled-in version of wp-cli/package-command has no branch alias at all.. As the current PR that includes the branch alias has other changes and currently fails to build, I added another PR to just deal with this issue to resolve it quickly.. Urgh. The \"quick-fix\" PR to just include the branch alias in wp-cli/package-command of course fails on all the make-phar issues.. Which version are you running?\nThe current stable version seems to work as expected:\n\n. My current reasoning is the following:\nwp-cli/wp-cli framework package should work with both Symfony 2.x and 3.x. It should be able to adapt the current environment and the additional dependencies that come with the rest of the given project.\nFor a build that needs Symfony 2.x, we would need to run composer update in such a way that the platform is perceived as being PHP 5.3.29 (the current required minimum for WP-CLI). As Symfony 3.x doesn't work with this requirement, Composer would automatically choose Symfony 2.x for that build step.\nFor building a Phar, this can be easily done with a separate package for the Phar build pipeline as discussed in https://github.com/wp-cli/wp-cli/issues/3950. This package can then have a platform requirement of \"php\": \"~5.3.29\", and all should work as expected.\nFor the composer.lock file, things are a bit more complicated, but the question is in what ways we even need the composer.lock file (given that the lock file is only even considered as a root package, not a dependency):\n\nUsing WP-CLI as a Phar - Phar meta-package is used, composer.lock is irrelevant.\nUsing WP-CLI through a ZIP - not supported.\nUsing WP-CLI as a global Composer install - composer.lock is irrelevant.\nUsing WP-CLI as a Composer dependency within a project - composer.lock is irrelevant.\nRunning tests in Travis - PHP matrix is used and pulls in WP-CLI via Composer - composer.lock is irrelevant.\n\nDid I miss a use case where we do indeed directly depend on the composer.lock file now for the wp-cli/wp-cli package?. Having the same composer.json file for the Phar as well as for the rest makes it difficult to force the platform requirement for the Phar while not forcing it for the rest of the use cases.\nThe normal composer.json file can only dictate a minimum PHP version, and composer update will then use whatever PHP version is currently running as long as it meets that minimum.\nFor the Phar building, we would want to dictate an exact major PHP version of 5.3.x, to make sure that nothing is being used that doesn't match that requirement, even if we're building the Phar on a PHP 7 machine.\nIf you don't want to go down that route, then other options would be to either build the Phar within a container (like it is done inside of Travis), or make a run-time change of the composer.json file before building the Phar (creating a copy and injecting the PHP 5.3.x platform requirement into that copy). I think a Phar meta-package would be cleaner, though.. That is already happening. But the tests should prefer the Composer version, that's why this is in front of the standard path.\nFor the tests, you want to control the exact version you use, not just pick the random one you currently have installed globally.. I would go with a separate repository (option 2 above). This is less \"magic\" and better to reason about and work on.\nMaybe we should think about having a more strict separation between logic and build tools. The Phar building process should ideally be invisible to the actual code. We won't manage to go that far, but we should at least try to only contain the Phar-specific code to as few locations as possible.. From Slack:\nThe general approach I would like to take is to have a separate repository be responsible for building the Phar (to get these build tools out of the main framework repo, and more importantly, to get a separate composer.son for the Phar). The Travis CI tests for this repo would then test the framework together with all bundled commands.\nIf the wp-cli/wp-cli in the composer.json of this repo is versioned against a specific commit, we could generate a pull request whenever there's a push to wp-cli/wp-cli:master. This pull request would contain a commit to adapt the wp-cli/wp-cli version in composer.json, and thus cause the Travis CI to run the tests for the entire Phar suite against that commit.\nThe pull requests could be automatically merged as long as the tests ran successfully. If not, we'll get a notification.. Maybe just run a nightly with the latest commit? Would that be sufficient?. So, I'm currently playing around with this.\nI have a script that runs the tests across all commands after a composer install of the latest wp-cli/wp-cli:dev-master. We might add a different one specific for the Phar nightly as well, but I think the \"on-going development\" is more important right now. Chances that the Phar nightly breaks although the composer install succeeds are pretty slim.\nThe question now is what to do when these tests fail.\nIn the beginning I thought about creating pull requests to let the tests run through Travis, but then we'll have a lot of trouble getting rid of these pull requests. So now, the tests are run through the cron job (which I hope is no problem for the server you wanted to run these on). This allows us to act on the failures in a more differentiated way.\nWhat I want to do is to let the tests for each command run, catch the output, and if that test failed, create an issue in the repo of that command with the test output as ticket.\nHowever, I don't want to flood the commands with issues if we don't get to immediately fix something. My current thinking therefore is to make sure we only ever have one issue about the tests currently failing. The issue should contain the hashes of the wp-cli/wp-cli and the command refs it was run against. For a failed test:\n- If an issue with the same refs already exists, move on.\n- If an issue with the same refs does not yet exist, close all issues with other refs and create a new one with the current refs.. > Reporting the test failure to Slack, a la WordPress\nI'll send to Slack #cli-firehose.\n\nSlim, but catastrophic. One common failure for the Phar nightly is that files are missing from the build.\n\nOkay, that would indeed be bad. But I think I can just add the Phar building and then set the wp executable to use for Behat.... Command repos are now extracted out of the composer.json file:\nREPOS=$(cat composer.json | grep -oE \"wp-cli/([a-z\\-]*)-command\")\nVery na\u00efve approach, but good enough I'd say.. Test suite seems to run as intended.\nHooking it up to the release process will be tackled in https://github.com/wp-cli/wp-cli/issues/4108. Maybe we could just extract the version from latest and trunk and do at least a numeric comparison.\nOtherwise, it would mean that we always have trouble testing \"cutting-edge\" functionality until it is not cutting-edge anymore.. The above approach actually breaks tests in a different use case right now: https://travis-ci.org/wp-cli/entity-command/jobs/366509094#L589\nThe problem: The test does @require-wp-5.0 because it tests code that is only available from 5.0 onwards. However, for all tests run on WordPress latest, the tags do not get properly created, and so that test runs nevertheless and throws an error.\nWe need to actually resolve what version we're using when stating latest to be able to have tests for upcoming versions of WordPress not break.. Resolved with https://github.com/wp-cli/entity-command/commit/1a34b38a29250698d63abaf370b5d2d09ca86353. This looks like an usage error on your part (wrong package names). I've noted some details in the Slack channel, please continue the discussion there.. Ah, yes, nevermind then.\nMy PHPStorm showed me an error, and I failed to notice the func_get_args().. Fixes https://github.com/wp-cli/entity-command/issues/6. How about some kind of \"PathFinder\" object that we can just query for relative paths? We can then add both a FilesystemPathFinder and a PharPathFinder version, and it is easily extensible for future needs.. The build failed on a command that is using --url in a seemingly non-standard way. The output:\nunknown --url parameter\n    Did you mean '--url'?\nI will have to look into why that specific parameter behaves differently.. Global parameters should already be taken care of. Not sure what the deal is with that particular parameter use.. I understand the problem, but I'm not sure the solution would be a fitting one.\nThese stubs are provided in the way they are because the functions they reference are not actual PHP code, but rather C code in an extension. That's why you can't just load the corresponding PHP file as an alternative.\nWhy not just add wp-cli/wp-cli as a development dependency through Composer? An IDE like PHPStorm will be able to properly load that in and autocompletion just works. This does not need any additional stub files we would need to maintain separately from the regular code base, and it is the default mechanism with which PHP -> PHP relations are now handled.\nDo you have a use case where pulling in the actual PHP code through Composer (as a dev dependency) would not work?. Something weird going on with the commits (GitHub seemed to be out-of-sync).\nThis should be merged as one single squash commit.. I went through the generated files in detail, and my conclusion is that the above behavior is just not possible through standard Composer autoloading.\nComposer first builds a tree of dependencies, and then builds the lock file in the order of this tree. Within a same level of this tree, dependencies are sorted alphabetically, but the dependency levels take precedence.\nIn the context of the relationship between wp-cli/wp-cli and wp-cli/cli-override-command, this causes the wp-cli/wp-cli package to always be the top-most root of the dependency tree, and therefore be included as the last package within the lock file, irregardless of the order in which you've put the two packages into the require statement.\nSo this is not actually a bug, but just the way Composer dependency resolution works.. Maybe related: https://github.com/wp-cli/package-command/commit/47fedd9c04e6b8ee73fa49b86655fa574cb1b018. The problem seems to simply be that the rm -r command asks for confirmation for each single folder and file, probably because of a slight difference in permissions.\nAdding an -f argument solves the issue, but I feel nervous about this. I'll add a small check to make sure we're only ever deleting stuff from the temp dir.. I'd like to see an interface for data we want to send, because we might want to send other information apart from command executions AND we should centralize the sending so that we can modify throttling/caching/sending/etc... in one central place.\nI'm thinking of something like this:\n```php\n<?php\ninterface DataPoint extends JsonSerializable {}\nabstract class TimedDataPoint implements DataPoint {\n    public function start() { / ... / }\n    public function stop() { / ... / }\n    public function jsonSerialize() {\n        return array(\n            'event' => $this->get_event();\n            'context' => $this->get_context();\n            'environment' => $this->get_environment();\n            'execution_time' => $this->get_execution_time();\n        );\n    }\n    protected function get_environment() { / ... / }\n    protected function get_execution_time() { / ... / }\n    abstract protected function get_event();\n    abstract protected function get_context();\n}\nfinal class CommandExecutionDataPoint extends TimedDataPoint {\n    public function __construct( $command, $args, $assoc_args ) { / ... / }\n    protected function get_event() { return $this->command; }\n    protected function get_context() {\n        return array(\n            'args' => $this->args,\n            'assoc_args' => $this->assoc_args\n        );\n    }\n}\ninterface Tracker {\n    public function track( DataPoint $data_point );\n    public function send();\n}\nfinal class RemoteTracker {\n    public function track( DataPoint $data_point ) {\n        $this->data_points []= $data_point;\n    }\n    public function send() {\n        foreach( $this->data_points as $data_point ) {\n            $json = json_encode( $data_point );\n            // Send through HTTP\n        }\n    }\n}\nclass WP_CLI {\n    / ... /\n    public static function track( DataPoint $data_point ) {\n        self::get_tracker()->track( $data_point );\n    }\n    public static function on_shutdown() {\n        self::get_tracker()->send();\n    }\n```\nThis is a simplified example.\nBenefits of this approach:\n\n\nAs we have an interface for a DataPoint, we can create as many different types of data points we want to collect, and they will all be handled through the exact same mechanism. They are flexible enough to store arbitrary data while still providing a basic structure.\n\n\nWe can change the actual storage (in memory, in a file, etc...) as well as the sending (a HTTP request, a Redis database, etc...) in one central location, without needing to change either the individual data points or the consuming code.\n\n\nAs we have an interface for the Tracker, we can change the exact implementation or we can attach decorators (like a caching decorator, a logging decorator, etc...) without the rest of the code ever noticing.\n\n\nThrough such a decorator as in 3., we can provide throttling in a transparent way, so that we don't flood the system on tight loops.. Ah, I forgot to show an example of how this is used.\n\n\nFor the consuming code, it would be very simple:\nphp\n/* ... */\n        $whitelisted_commands = array(\n            'option get',\n            'option update',\n        );\n        $monitored_execution = null;\n        if ( in_array( $cmd, $whitelisted_commands, true ) && ! getenv( 'WP_CLI_DISABLE_USAGE_ANALYTICS' ) ) {\n            $monitored_execution = new CommandExecutionDataPoint( $cmd, $args, array_merge( $extra_args, $assoc_args ) );\n            $monitored_execution->start();\n        }\n        call_user_func( $this->when_invoked, $args, array_merge( $extra_args, $assoc_args ) );\n        if ( ! is_null( $monitored_execution ) ) {\n            $monitored_execution->stop();\n            WP_CLI::track( $monitored_execution );\n        }\n/* ... */. - [x] Dev-note about bootstrap refactoring.. wp-cli/package-command might need an update: https://github.com/wp-cli/package-command/pull/16. For the Autoloader class itself, or for the code that uses it for the bootstrap process?. Well, it can't silently break, as soon as the autoloader does not work, all tests will fail.\nThe problem was that I forgot I had the autoloader included, and then added manual include statements that did the same thing, but would need manual updates.. ... So, it was never broken, it was just using an alternative (and inferior) solution.. Force merging, failed tests are due to version_compare() inconsistencies.. Punted to 1.3.0. As discussed in Slack:\nRight now, the classes are split based on a regex on the package name. As I didn't want to have a manually maintained list of packages, this regex was a good compromise.\nThe solution would be to read the composer.json of the framework package and collect the list of packages in there.\nThe point where the regex is currently applied is a merged list of all Composer packages (all dependencies).\nAs we have several somewhat hacky instances of reasoning about bundled packages, it might be good to abstract this info into one central location.\nThis could then be used for other stuff like building the handbook, etc.... Punted to 1.4.0.. Not needed for now, as we'll stay with the standard build flow for 1.2.0.. The obvious solution would be to throw an error when you try to add a sub-command for a parent that is not known yet.\nHowever, I wonder if a smarter approach is not preferable since we now have the additional hooks. In such a case, we could run a new add_command() call that gets hooked to the after_add_command_<command> for the parent command. If the parent gets added later, it will trigger adding of the child automatically. Otherwise, nothing will happen, as the action is never triggered.. I'll add an automated dependency resolution mechanism to get around this, as discussed in Slack:\n```\nschlessera [6:35 PM] \nhttps://github.com/wp-cli/wp-cli/issues/4084 (edited)\n[6:36] \nI had proposed an approach that might automatically fix dependency resolution issues with commands (the 2nd option in my comment).\n[6:36] \nIt sounds a bit too easy in my mind, so I wanted to go through this to make sure I'm not missing something obvious.\ndanielbachhuber [6:37 PM] \noh, now I understand your comment\nschlessera [6:37 PM] \nThe way I think we can solve this is to make use of the new hook we added from within the add_command(). The basic approach would be that the add_command() is deferred by the fact that it hooks itself up to the parent command.\ndanielbachhuber [6:38 PM] \ndeferring command registration could work, but we'd still run into race conditions potentially\n[6:39] \nif WP_CLI::add_command( 'scaffold package' ) is still hooked before WP_CLI::add_command( 'scaffold' ), then the latter would be registered over the former\n[6:39] \none approach would be to special-case bundled commands to always register before package commands\n[6:39] \ner\nschlessera [6:39 PM] \nNo, if WP_CLI::add_command( 'scaffold package' ) runs too early, it would hook itself up to after_add_command:scaffold.\ndanielbachhuber [6:40 PM] \nwhat if after_add_command:scaffold  never fires?\nschlessera [6:40 PM] \nWe can have a counter and throw a warning.\n[6:41] \nIt won't break anything that is not already broken now, and it will probably fix any reasonable use case. (edited)\ndanielbachhuber [6:42 PM] \nI'm most concerned with restoring the pre-v1.2.0 behavior\nschlessera [6:43 PM] \nThat was basically \"hope package combination and alphabetic file ordering do their jobs\".\ndanielbachhuber [6:43 PM] \nyeah, not good enough :slightly_smiling_face:\nschlessera [6:43 PM] \nI would guess that, with the above hook system, any existing packages will probably work without issues.\ndanielbachhuber [6:44 PM] \nif we don't fix it in v1.2.0, then we'll have to fix it with v1.2.1\nschlessera [6:44 PM] \nThis change is quickly implemented, I would suggest adding it into a branch and let the reporter of the above ticket run a test with their custom command.\ndanielbachhuber [6:45 PM] \nok\n[6:45] \nyou should be able to test and reproduce, too\nschlessera [6:45 PM] \nIf it works as I think it does, it would keep all existing packages working, and be overall a reliable system to deal with ordering. (edited)\n[6:46] \n\nyou should be able to test and reproduce, too\nYes, of course.\n\ndanielbachhuber [6:46 PM] \nok\nschlessera [6:47 PM] \nThe basic algorithm is:\n\"if dependency is met -> add command; if dependency is not met -> hook up \"add command\" to \"after-dependency-loaded\"\ndanielbachhuber [6:48 PM] \nright. we just need the last step of \"if dependency is never loaded, then register the command\"\nschlessera [6:48 PM] \nBut that would just break...\ndanielbachhuber [6:48 PM] \nthat's how the current behavior is though\n[6:49] \nbecause the current system doesn't support declaring dependencies\n[6:50] \nthe current system is WP_CLI::add_command( 'scaffold', 'Scaffold_Command' ) is run before packages are loaded, which means packages can call WP_CLI::add_command( 'scaffold foo', 'Foo_Command' ); to register a foo subcommand in the scaffold command namespace\n[6:50] \nif this works in v1.1.0, then it also needs to work (without changes) in v1.2.0 (edited)\nschlessera [6:51 PM] \nYes, and it would, no matter in what order both of these are loaded. (edited)\ndanielbachhuber [6:51 PM] \nright, but...\n[6:51] \nthe current system also supports calling WP_CLI::add_command( 'foo bar', 'Bar_Command' );, even if foo isn't ever registered.\n[6:52] \nSee wp network meta for an example of that\n[6:52] \nso, v1.2.0 also needs to support registering a subcommand to a parent namespace, if the parent namespace never exists\n[6:52] \ndoes this make sense?\nschlessera [6:53 PM] \nAh, I understand. Yes, makes sense.\n[6:53] \nDo we have a hook that is triggered right after all commands have been loaded?\n[6:53] \nbefore_wp_load ?\ndanielbachhuber [6:54 PM] \nbefore_wp_load probably isn't correct\n[6:54] \nwe can create a new hook for it\nschlessera [6:54 PM] \nMaybe add a new one for this purpose then?\n[6:54] \nOk.\ndanielbachhuber [6:54 PM] \nyep\nschlessera [6:54 PM] \nAny naming preference? after_commands_loaded?\ndanielbachhuber [6:54 PM] \nworks for me\nschlessera [6:55 PM] \nDo you want me to handle this, or will you do it?\ndanielbachhuber [6:55 PM] \ngo for it :slightly_smiling_face:\n``. Does it make sense to filterwp-make-coffee`?. @danielbachhuber This should be ready now.. It is currently the case for all released packages, yes. I had other plans at one point, but I don't think the architecture allows for these.\nClosing this for now, it has been recorded for reference anyway.. Tests passed, merging immediately to continue troubleshooting.. Maybe related: https://github.com/composer/composer/pull/6378. I now found out that the actual issue is a very stupid one.\nThe package has wp-cli/wp-cli:* as a dependency, which curently pulls in 1.1.0 by default. This has mustangostang/spyc as a dependency.\nThen, for the tests, we are doing a composer require wp-cli/wp-cli:dev-master to make sure we test against the latest framework. This pulls in wp-cli/mustangostang-spyc as our own fork.\nHowever, as we don't do a composer update, the original mustangostang/spyc package is never removed.\nI'll directly target wp-cli/wp-cli:dev-master for now, and we should turn that back to wp-cli/wp-cli:* once we've released 1.2.0.. Just as a quick explanation on why these types of error cannot be avoided, for future reference:\nWP-CLI needs to provide the same behavior than your WordPress install, so that the same resources are available (like custom post types created through plugins) and the same results are generated (like updating a post running through filters added through a plugin).. @danielbachhuber I'm not sure about the first item on the check list. Maybe we're not talking about the same thing here...\nThe current repository was originally built to run checks before building the Phar, as a result of a pull request. So, it pulls everything in via the source packages, and then runs the test suites of all these packages.\nFor the first item, I suppose you want to have the tests run against the final nightly build of the Phar instead, not the source that would be used for that build.\nSo the question is: do you want me to change the tests to download the Phar nightly and run the tests against this? Or maybe just have both mechanisms, to detect problems in either source or Phar use cases?. Options:\n wp-cli/test-runner\n wp-cli/nightly-tests\n* wp-cli/automated-tests\nI think I like that last one best, as it makes it clear there's no human action required, and it is general enough to be able to take on additional related roles if it makes sense.. Related: https://meta.trac.wordpress.org/ticket/3025. @danielbachhuber Let's discuss this tonight. There's something off that I just can't put my finger on right now (and the tests take an eternity to run). Maybe you have an idea what is happening there.\nJust to give you a quick overview of the problem I have:\nThe tests have failures where the actual testing code that is being run seems to not match the version of the code that is executed. So, for the nightly Phar, there might be very small discrepancies, but as the Phar is the latest master of wp-cli/wp-cli, it should actually be a match for a 24h window.\nHowever, I have tests failing like this:\n```\n01. $ wp --require=custom-cmd.php command invalid\nError: 'invalid' is not a registered subcommand of 'command'. See 'wp help command' for available subcommands.\nDid you mean 'valid'?\ncwd: /var/folders/ct/673d2dy510s3dlwb_2bfwdnw0000gn/T/wp-cli-test-run-5992908b79ad11.00160541/\nexit status: 1\nIn step `Then STDERR should contain:'.               # vendor/wp-cli/wp-cli/features/steps/then.php:15\nFrom scenario `Invalid subcommand of valid command'. # vendor/wp-cli/wp-cli/features/command.feature:84\nOf feature `WP-CLI Commands'.                        # vendor/wp-cli/wp-cli/features/command.feature\n\n```\nThis failed just now, and the code to test this as well as the implementation were comitted 6 days ago.... I asked @pento for assistance regarding the broken Slack notifications. Maybe there's something off with the webhook we're using.. Related: https://meta.trac.wordpress.org/ticket/3025. There's hope...\n\n. I forgot we had renamed the package to wp-cli/mustangostang-spyc.. Yes, indeed. But I cannot think of a better way, or a better check upfront.. Using spaces in commands should still work, as WP-CLI uses this itself, for example for the network meta command, where no network parent exists: https://github.com/wp-cli/entity-command/blob/master/entity-command.php#L17\nI'll test this on my local machine to see what the problem might be.... @philipnewcomer A first test with your gist through a require command cannot reproduce this:\n\nFor now I have to assume this might have something to do with your specific platform. Can you share more details that could help replicate the issue?. @philipnewcomer I can confirm now that this breaks for plugins and mu-plugins. Our tests did not cover this specific scenario.\nI'll investigate and update you as soon as we have a fix.. @philipnewcomer I have fixed the issue in https://github.com/wp-cli/wp-cli/pull/4123\nAs soon as this is merged and the next nightly is built, you can update to the latest nightly with wp cli update --nightly to get the fix.. Ah, yes, makes sense, we will need two passes:\n\nLoad external package commands\n=> Add deferred external package commands\nLoad plugin commands\n=> Add deferred plugin commands. Hello Pierre,\n\nThanks for the feedback.\nWe are indeed trying to work on making WP-CLI be a well-behaving Composer citizen. However, given that most of the existing codebase comes from a procedural approach, this is not without its difficulties. There are still many components within WP-CLI that simply cannot be auto-loaded at all, as they are not classes/interfaces/traits.\nCan you share a bit more about your setup to help us pinpoint the current issues?. The parts that activate WP-CLI through Composer are the procedural files that get loaded through the Composer \"files\" autoloader directive. This is just part of dealing with procedural file in the autoloader.\nSo, basically, every command that is added through the \"files\" directive will at least call the WP_CLI::add_command() method.\nWe can however put a kill switch into WP_CLI::add_command() that will immediately bail when not in CLI.. Okay, that kill-switch should prevent the errors on the front end. However, I noticed that we should change our \"standard\" command addition file.\nInstead of if ( ! class_exists( 'WP_CLI' ) return; we should check for if ( !defined( 'WP_CLI' ) ) return;. The class exists on the front end as well if it is part of the same autoloader.. Two alternatives I can think of, but not sure they're necessarily better:\n\n\nProvide external access to the code that checks for deferred commands, and directly run it in the correct spot.\n\n\nAdd priorities to hooks and run the check for deferred commands at after_wp_load:9999.\n. Yes, that would probably make sense, although I'm not sure we already have a custom step to check the frontend.. Thanks @pierre-dargham for the great work on the test!. @VaLeXaR This is a known issue: https://github.com/wp-cli/autoload-splitter/issues/5\n\n\nTo get around this for now, you can manually add an additional configuration key to your global composer.json file, like described here: https://github.com/wp-cli/autoload-splitter/pull/6#issue-233269100 (under \"I was able to resolve the error with the following config setting:\"). Resolved by https://github.com/wp-cli/autoload-splitter/pull/9. @JPry This scenario will not test the version of the WP-CLI framework currently being evaluated through Travis, but rather the latest stable release.\nThe tests need to be built so that they test against the actual PR that is being run through Travis.. @JPry Look into the repository type \"path\": https://getcomposer.org/doc/05-repositories.md#path\nThat should allow you to use the current code and have Composer put a copy/symlink to it into the vendor folder.. @JPry Are you still up for working on this test?. @JPry Yes, it already includes code to create a WP Composer stack to test with, using the \"path\" repository type we've been discussing previously.. Hey @JPry ,\nAre you still up for contributing this test? We're currently working on wrapping up a new release, and I'd like to merge https://github.com/wp-cli/autoload-splitter/pull/6 for that.. @JPry Although this is not merged, thank you very much for all the great work and fruitful discussion!. @pierre-dargham wp-cli/composer-changelogs has been removed in master, please merge the latest changes.. > Composer : In behat context, we can not start a sample project with both wp-cli and wordpress as composer dependencies, because we need to test wp-cli before it is released, and with composer, we can only install wp-cli existing versions. So we just require wordpress as a composer dependency in a wp-cli project, calling wp-cli with path bin/wp\nThat will unfortunately not help test the specific issue we're facing. The main problem we want to test against only happens when wp-cli/wp-cli is not the root project, and is a dependency at the same level as the WordPress core.\nI'll need to think about how best to approach this.. > Related : At current state, I'm not sure it solves wp-cli/autoload-splitter#6 needs for a new test case. But with the same strategy, creating a wp-cli project with a custom vendor-dir path as extra composer config key, and a few changes, I think we could have it. If you do agree, I could work on it within a few days.\nTesting for a custom vendor folder is a good idea, and I would even have that as a separate scenario to the wp-cli/wp-cli & wordpress-core as dependencies scenario. One can break independently of the other.. @pierre-dargham I just went through this PR in more detail. Most of the code in the FeatureContext class looks good, but I think it tests a scenario that is unlikely to be used in real-world setups.\nMore specifically, it tests adding a WordPress installation as a dependency of the wp-cli/wp-cli framework package. I think the test should work the other way around, adding the wp-cli/wp-cli framework as a dependency to a WordPress Composer setup. I don't think normal WordPress projects will start as an extension to the wp-cli/wp-cli framework...\nCan you elaborate on why you've built it this way? Were there some technical limitations you've hit?. Ah, I should perhaps add why I think the way the setup is working now might be an issue:\nUsing Composer for the framework itself is constantly being tested, and should work more or less reliably. What is more prone to bugs and is not currently being tested enough is the use cases where wp-cli/wp-cli is not the root package, which makes Composer treat some of the configuration in a different way.\nIn your current test setup, wp-cli/wp-cli is still the root package, with 1 added dependency that is unlikely to break much.. > with Composer, we can not require the actual version of wp-cli we want to test, because it is not released yet.\nYou can pull in an arbitrary folder (in this case the TRAVIS_BUILD_DIR or one of its subfolders) through using the \"path\" repository mechanism of Composer: https://getcomposer.org/doc/05-repositories.md#path\nThis allows you to point Composer to an arbitrary folder containing a composer.json file, and it will then copy/symlink that folder to fulfill the requirement it represents.\n\nDo you see some other differences on wp-cli being / not being the root package ?\n\nYes. There are some configuration settings that Composer only loads and processes for root packages, and skips for any dependencies: require-dev, autoload-dev, minimum-stability, prefer-stable, repositories, config, scripts. See all of the schema entries that contain the (root-only) mention in the docs here: https://getcomposer.org/doc/04-schema.md\nThis can cause all sorts of bugs when switching from root package to non-root package, so it is important to specifically test the non-root case.\nI think the tests should be changed so that the travis code is pulled in as a requirement to a normal WordPress Composer setup using the \"path\" mechanism. Let me know if you need assistance in making the required change, or feel free to experiment if you are curious. ;). Good catch, @gitlost, that typo is very probably the culprit.\nClass names for autoloading are not case-sensitive, but array keys in the optimized Composer autoloader are.. @dmblack WP-CLI is run the PHP CLI SAPI, whereas WordPress runs through the PHP Web SAPI (probably php-fpm). On most environments, the web server runs with different permissions than a shell access process, the php-fpm will be run using the web server's permissions.\nSo, although having different permissions between WordPress and WP-CLI can be problematic, it is probably not something we can avoid.. Related issue: https://github.com/wp-cli/wp-cli/issues/4103. Looking at the test, I assume you didn't find a way to actually turn on OPcache at runtime. Can you provide a small comment of what you looked into and why it didn't work, for reference?. Thank you for the pull request!\nThere's only minor code style issues, and I would like the text to be more specific.. @johnbillion The best place to suggest such commands so far is https://github.com/wp-cli/ideas/issues .. They are using a tiny URL forwarding server to make the error links shorter.\nI'm not sure we need that, though, as we have `https://wp-cli.org, which is already pretty short.\nI like the idea of having one central location for storing the error messages, though. It provides a layer of abstraction between the error links and the actual documentation. This means that we change and restructure the documentation without needing changes in the source code, we just need to adapt the links in these centralized error messages.\nHow about creating a repository wp-cli/error with entry point error message documentation?\nSo, if you're argument XYZ was invalid, you'd get a detailed error message link to https://wp-cli.org/error/invalid-xyz, which would open the wp-cli/error/invalid-xyz.md document on GitHub (or within one of our real sites).\nThe markdown document can then contain a short explanation of what the issue is, some standard ways of getting rid of the error, and links to the extensive reference documentation.. Not yet, it seems to run just fine on my system, though I have PHP 7.0.19, not PHP 7.0.20. Trying to upgrade now to recheck with the same version as Travis.... Hmm, brew's latest stable is still PHP 7.0.19.... Probably OPcache related then.... @chetansatasiya Please add a test case to check for actually adding such a subcommand.. @chetansatasiya In case you don't know how to proceed with the tests, here's a brief overview: https://make.wordpress.org/cli/handbook/pull-requests/#running-and-writing-tests .\nLet me know if you need any additional guidance!. Test seemed to have randomly failed for PHP 5.6, restarted.... @danielbachhuber Yes, I read the same thing. This is probably also to have a final review on their part to make sure the safe space is respected.. I've implemented this for the refactoring in the following way so far:\n Everything is based on Composer scripts, for the simple reason that Composer abstracts away the location of binaries, so you can split them up across packages and every individual package can still properly locate them.\n Tests are now run through composer test for all tests, composer phpunit for PHPUnit tests or composer behat for Behat tests. You can define additional arguments to these testing frameworks by prepending them with a double dash to separate them from Composer arguments. As an example, to run only a single feature file through Behat, you can use composer behat -- features/cli-info.feature. For Behat tests, absence of a features folder skips the tests. For PHPUnit tests, absence of a phpunit.xml[.dist] skips the tests.\n Linting is run through composer lint. This starts multiple linters in parallel by default to improve performance.\n Standards & compatibility tests are run through composer phpcs. The tests are skipped if no phpcs.xml[.dist] is found.\n The database is initialized on first use for the tests through composer prepare-tests.\n The requirements and the logic for all of these resides in a separate package called wp-cli/wp-cli-tests. More details can be found here: https://github.com/wp-cli/wp-cli-tests/blob/master/README.md. @danielbachhuber There's no actual change here. I was under the impression the script only generates PRs when packages were updated. Did this change?. Ah, good catch, @wojsmol.\nYes, I think that that package does some magic to always get updates in a forceful way.. @oahoo Did you meant to create this issue or was it unintended?. Hi @googlebe,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. I'll try to move #4108 forward, it is one of the tasks I wanted to be done for 1.3.0 as well.. Solved by #4189, but still discussing #4187 .. Shouldn't we look into a long-term solution for this? Changing that line every 15 years sounds like a lot of unnecessary maintenance hassle... ;). Oh, just noticed that @gitlost was meant to review this because of https://github.com/wp-cli/wp-cli/pull/4187\nThis won't hurt, though, no matter what we'll decide for #4187 .. No, the search does not seem to work.\nActually, I do think it should already show these PRs if you just search for your own assigned pull requests, not only for those assigned to the group. If I'm part of a group, and you assign something to that group, I want to see it if I search for the stuff that's assigned to me. Otherwise, there's no real point in having these groups...\nLooks like an unfinished feature to me so far.. @danielbachhuber No, all good, merging now.. What if the local version sends its own version string in a transparent way? The remote can then emit a warning, and still try to complete the command. No additional connection needed.. From what I've been able to read in the change logs and the documentation, fthe sudo: required container might still come with PHP 5.3.29.\nSo, the combination of sudo: required and dist: precise might still do the trick after September 1st, 2017. We'll have to run tests, though, as I've read about conflicting results with this approach.. All the code is being automatically tested against PHP versions from 5.3 to 7.1.\nMaybe there is a problem with your 5.5 installation, or it has been compiled in an unusual way?. A possible problem could be that the environment variables necessary for running your PHP install are not brought over from one process to the next.. I suspect this has more to do with the peculiarities of MAMP, rather than being a bug in WP-CLI, so this falls under support, which is out of the scope of this issue tracker.\nPlease head over to the #cli channel in the make.wordpress.org Slack if you want to get help with this issue.. It was not meant to be dismissive, we're just trying to redirect communication to where it gets the best results.\nIf you still feel this could be a problem with WP-CLI and have specific steps for us to reproduce, please feel free to just add these steps to this ticket, and I'll reopen if I can confirm.. Seems reasonable. Let's go through the milestone this evening to decide what we want to include.. @corradomatt Thanks for your feature request.\nWould you mind moving this over to https://github.com/wp-cli/ideas/issues ?\nThat's the central location where we want to discuss potential features, and besides, the wp-cli/wp-cli does not contain the site command anymore.\nThanks!. Yes, closing.. Travis failed to connect to the database on PHP 7, I restarted the job to see if it was a temporary issue.. Thanks for submitting, @evilebottnawi \nThis looks like a race condition within Composer, where it uses the dev dependencies while deleting them. I will investigate whether we can include a safeguard to avoid throwing this exception somehow.. Related: https://github.com/wp-cli/autoload-splitter/issues/8. Resolved by https://github.com/wp-cli/autoload-splitter/pull/9. Hi @hzektser,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. @hzektser The import fails because the taxonomy you want to add data to does not exist, as it is only registered for premium installs of Yoast SEO. The solution would be to make sure the required plugin is installed. Otherwise, if WP-CLI would add this data without the taxonomy being registered, it would create orphaned elements in the database that take up space without being referenced.\nHow would you expect WP-CLI to handle this? Do you think there should be an option to force importing \"faulty\" data?\nRight now, the above result is the currently expected behavior, which is why I don't consider it a bug. I'm open to investigating a different approach and maybe changing the expected behavior if it makes sense, though, so feel free to open an enhancement proposal in https://github.com/wp-cli/ideas/issues .. @johnbillion You can already sort some lists by an arbitrary field. For example, the optional --<field>=<value> parameter for wp post list allows you to add arbitrary WP_Query arguments to the query. As an example, to sort the list of posts by title in ascending order, you'd do:\nwp post list --orderby=post_title --order=ASC\nThis is not implemented for all lists, and I think the two examples you've provided are amongst the ones that don't support that yet. I'd suggest adding this generalized --<field>=<value> to these as well, so that people can add arbitrary WP_Query filters to them.\nDoes that make sense?. @danielbachhuber For the repo url, it is currently safe to assume that the Composer package name matches the repo slug on Github. So, fetching the Composer package name lets us build a default GitHub URL for the repo.. For the global parameters, would it make sense to include an accordion (or a similar UI element that only displays the lot on demand) with a short reference of all of them, instead of showing an arbitrary subset?. @pierre-dargham Great work!\nYou don't want to pull in the code from packagist, you want to pull a specific commit from the GitHub repo. To do this, you have to add the repo as a new source repository first, so that Composer knows where to look. In your composer.json file, you'll need to add something like this:\n{\n    \"repositories\": [\n        {\n            \"type\": \"vcs\",\n            \"url\": \"https://github.com/wp-cli/autoload-splitter\"\n        }\n    ],\n    \"require\": {\n        \"wp-cli/autoload-splitter\": \"dev-master#0ef16f7b75d51b0eedf890a84ae8fc3d73b91f78\"\n    }\n}. I think the use case you need this pull request for seems to be as a case of misusing the wp-config.php file. That file is meant to prepare WordPress to be loaded, so using the WordPress Plugin API inside of that file is not the right way to go.. @1Pauletto I understand that you want to work with whatever your clients can come up with. However, when it comes to WP-CLI, we as the maintainers have to draw a line somewhere.\nImagine we add this functionality now, meaning we need to take care of maintaining this part of the code indefinitely, and everything that would result out of it. Now, what if your client adds one of the WP classes next? We'd need to add another set of functionality to stub out classes.\nThis cycle of clients adding the wrong stuff and WP-CLI adapting could go on indefinitely, with WP-CLI growing technical debt to support misuses of the wp-config.php file.\nYou can probably agree that this is not the direction we want to take for the long-term evolution of WP-CLI.\nI'd suggest you head on over to our #cli Slack team to discuss how to solve your particular issue without degrading the WP-CLI core. I'm sure we can find a solution that you can use locally for your specific needs.. Depends on whether you want to:\n1. Find a list of commands that match a specific pattern - wp cli find-command or wp cli cmd-find\n2. Check whether a specific command is known - wp cli has-command or wp cli cmd-exists\n3. List the known commands - wp cli command list or wp cli cmd-list\nThese three approaches could solve the above problem.. @Sidsector9 I think we need to go with 1. here. The name of a command is basically the entire series of words, like term delete. Just looking for delete does not make much sense in my eyes.\nAlso, the command should work like the help command, in the sense that you can just add multiple words and it will accept these as one command.\nSo, both of these should work:\nwp cli has-command \"term delete\"\nwp cli has-command term delete. Fixed by https://github.com/wp-cli/wp-cli/pull/4349. As already discussed, I would make this grey, to visually distinguish it from the stuff that you \"just type as is\":\n\n. @hearvox As the pull requests will need to go into the separate repos, having the issues in there as well with the discussion would improve linking.\nAlso, having a separate issue per proposal will also better allow us to discuss.. @ako80218 Ah I see, sorry about that.\nMy thinking is that it is difficult to discuss the individual descriptions in here, as we'll have intertwining comments in a huge list in the end. That's why I proposed to create separate issues, because each issue will then collect one discussion thread. Also, it will allow us to close individual issues as soon as they are done with, instead of having one huge issue that goes on and on until the very last description has been completed.\n@danielbachhuber, @gitlost What do you think? Let's agree on something first before proceeding.. @hearvox As you said these have been discussed and decided in a team, would you mind providing the profile names of the people involved?\nAs someone else is already doing pull requests, I'd like to mention the contributor's profile names in each pull request.. Ah, going through the above discussion, it seems it was only @hearvox and @ako80218 , is that correct?. @miya0001, @gitlost:\nOkay, let's make progress now and merge the descriptions that are not controversial. I agree that they are better than what we have so far, and we can still tweak them later on.\nHere are the checks I want us to go through for each description:\n\nMake sure the language is consistent with the new format (which seems to generally be the case).\nMake sure all main functionalities are covered (which might need to be done at differing granularities to keep the length in check).\nApply the PR and make sure the description displays properly (mainly because of the length).\nFor all merged PRs, have the two original authors of the description (@hearvox & @ako80218) be part of the issue's props, even if they didn't create the actual PR.\n\nIf you see a description PR that matches the above, feel free to merge. Once we've merged them all, we'll have the actual command reference page as an overview to discuss any final tweaking.. @hearvox Here's what we currently have in terms of how to document commands: https://make.wordpress.org/cli/handbook/commands-cookbook/#optional-registration-arguments. Related: https://github.com/wp-cli/ideas/issues/52. Ha, I have the same problem with verbosity. Maybe we should hire Ghost-writers... ;). @fmonera I suspect you may have outdated dependencies in the installation of your external commands.\nCould you please try to run the following commands:\ncd ~/.wp-cli/packages/\ncomposer update\nThat should hopefully update your internal version of wp-cli/php-cli-tools.. Related: https://github.com/wp-cli/wp-cli/issues/4332. @fmonera If you type wp cli info, it will show which folders it is using. There's a WP-CLI packages dir in there as well.. @GaryJones The PR touches two different (albeit related) topics: 1. \"Setting up WPCS as a dev dependency\" and 2. \"Code style fixes that can be automatically applied\".\nI'd like to merge everything related to 1. for now, but want to have an issue created for 2. first (or add comments to #4058 if this makes sense), to discuss how to go about this. As @danielbachhuber had pointed out in #4058 , he'd like to have 1 PR per sniff, to re-enable them in a controlled fashion. Also, this would need to be somewhat coordinated with the bundled commands, as the testing suite setup is sporadically \"applied\" (through the scaffolding tools) to the commands as well. So, re-enabling a sniff would mean it needs to be dealt with across all official repos.. > I can pull into a new branch and create a PR.\nYes, please do, so that we can at least merge this change for now.\n\nAs I updated my original post, this doesn't make sense from a practical point of view.\n\nHmm, yes, I see. Let's put this on hold until @danielbachhuber is back online to discuss with him. Although I would love to have cleaner code, I find it to be difficult already to step through the project's blame as it is. I don't want to merge another blanket change across the entire codebase unless we're all on the same page about it.. How about adding the links as footnotes? Something like this maybe (or any other type of syntax that we can just automate):\n```\nSee references for [Roles and Capabilities:1] and [WP User class:2].\n\n[1] https://codex.wordpress.org/Roles_and_Capabilities\n[2] https://codex.wordpress.org/Class_Reference/WP_User\n```\nIt would keep both the proper, descriptive sentence and provide real links in an easy to copy way.. @danielbachhuber Any feedback on the actual format to use? I provided one possible example, but not entirely sure about the [<anchor>:<number>] format.... Huh! The DealerDirect Composer plugin breaks on PHP 5.3, which is the required minimum we're testing against.. See error here: https://travis-ci.org/wp-cli/wp-cli/jobs/273239552#L212. @Potherca Thanks for letting us know!\n@GaryJones , can you adapt the PR so that it requires a minimum of v0.4.3 ?. I found the case to be the more pressing issue... ;). As @gitlost has said, this is the expected behavior of WP-CLI. Unless told otherwise, it will replace all occurrences in the database of blog with foo.\nIn case you were trying to replace the site name, you should always work with actual domains (like blog.dev), and hopefully unambiguous ones.. Updating the test suites should always be done through the automated scaffolding:\nwp scaffold package-tests . --force\n( See https://github.com/wp-cli/scaffold-package-command/#wp-scaffold-package-tests )\nJust make sure you run this with the latest WP-CLI version.. I would do a run over all packages this week.. @miya0001 Ah, okay, that is a good idea.\nWill you cover both the tests and the README files?. This is done with:\nwp scaffold package-readme . --force\n( See https://github.com/wp-cli/scaffold-package-command/#wp-scaffold-package-readme ). Thanks for the pull request, @shadyvb !\nIf you're interested in providing documentation, we have started gathering instructions for running commands remotely here: https://github.com/wp-cli/handbook/blob/master/running-commands-remotely.md\nThis does not contain the docker-specific scheme either, though.. Looks good so far.\nA general note:\nwp is not actually part of the command name, it is the name of the executable that was used to start up the WP-CLI framework. So, something like wp post list could just as well be php ~/wp-cli.phar post list.\nAs regards to testing, you could go through the following steps:\n- check whether the command scaffold package can be found - this should return an error, as the command is not part of the bundled commands\n- install the wp-cli/scaffold-package-command\n- check again whether the command scaffold package can be found - this time it should be positive. @mikeyb31 I currently suspect this problem is either specific to your environment or specific to the file you're trying to download (WP 4.8.1 in en_GB). \nDid you try using a different locale, just to be able to rule out that the actual en_GB release is broken?. As we cannot know what other commands might use Utils\\exapnd_globs(), the safe approach is probably to provide a polyfill indeed (and not try to get rid of brace usage).\nAs Utils\\expand_globs() works in a namespace, we could also provide an external compatibility package that provides Utils\\glob as a polyfill, instead of copying a class into the framework package. This way, you can only install this if needed. However, I wonder whether that wouldn't create more hassle than it is worth.. > Wondering how to make that work.\nSomething like: wp package install wp-cli/glob-polyfill.. No, I thought to define a WP_CLI\\Utils\\glob() function instead. As glob() is being used relatively, if a WP_CLI\\Utils\\glob() exists, it will be preferred over the global \\glob().. Ah, yes, sorry.\nMaybe something like this:\n```php\nfunction expand_globs( $paths, $flags = null ) {\nstatic $brace_warning_issued = false;\nif ( ! defined( 'GLOB_BRACE' )\n        && ! class_exists( 'Zend_Glob' )\n        && ! $brace_warning_issued ) {\n      WP_CLI::warning( \"No GLOB_BRACE support, this operation might return the wrong results. We recommend installing a compatibility package using the following command: 'wp package install wp-cli/glob-polyfill'\" );\n      $brace_warning_issued = true;\n   } elseif ( null === $flags ) {\n      $flags = GLOB_BRACE;\n   }\n``. @szepeviktor We are already usinglevenshtein()`: https://github.com/wp-cli/wp-cli/blob/c79ff2e6895a468b9783cc7bafe1d6c8f4ca6895/php/utils.php#L1077\nThe issue above is for the cases where the distance would be so large that we cannot provide a meaningful threshold anymore. A high threshold just produces random suggestions.. Ha, no worries. See it as a confirmation that we all found your idea worthwhile! ;). Right now, we have 1 entry:\n'dbpassword' => 'dbpass'\nI'd suggest starting with that one and adding whenever we find a type/wrong parameter name that we think should produce a meaningful suggestion but doesn't.. Fixed with #4392 . Also, that would just break if WP-CLI would not be available, because it would have been declared in WP-CLI.. Fixed with https://github.com/wp-cli/entity-command/pull/94. @danielbachhuber Same issue for testing as here: https://github.com/wp-cli/core-command/pull/38\nI looked into dropping time-out for cURL to 1ms, but that doesn't work reliably, it often falls back to 1s on some systems.\nSo, right now, I'd say we avoid these tests to not cause unnecessary HTTP requests.. @danielbachhuber Feel free to merge if you agree, or let's discuss the merits of tests and their implementations otherwise.. If the autoloader was dumped as \"optimized\" (-o), it is actually a classmap, and won't notice additions until you regenerate it.. Of course this is all up for debate, just want to state that most of these changes are not necessarily for the better. The corresponding rule seems a bit simplistic.. But I don't feel strongly about any of this. If it allows for having proper checks in place, I'm all for it.. Looks good to me!\nI'll merge the current collection, we can always add more later on.\nThanks for the work on this, @n8finch !. > Obviously, this is optional, but I'm not sure what benefit there would be to the community to continue allow these non-typical patterns.\nNote: this is only used for the WP-CLI bundled commands, not for third-party commands. So, we can do it as strict as we want, as long as we make sure that our own bundled commands still work correctly.. My personal opinion is that code standards and consistency in applying are very debatable in terms of how they improve readability or code comprehension or any other metric in that same vein.\nHowever, where I find they provide huge productivity gains is when your code adheres to exactly 100% to them, and you can just switch on the systems in your IDE that take care of formatting and stuff automatically. One key stroke - done!\nWhenever code is not 100% there, you not only need to do manual adjustments that take time, but you have to consciously think about the standards in place and the places they're not being followed, creating an additional mental hurdle.\nWith 100% standards adherence and automated application/enforcement, the entire topic just disappears, from your time tracker as well as from your mind. And in the end, it does not even matter much, what specific standard is being followed then - that's the point: you shouldn't need to care!. I still like to add, though, that I also personally dislike the \"avoid variable assignment in statements\", because it changes the scoping of the variables involved. But I don't have any strong opinions about it. I just want us to get to the point where I can let my IDE deal with all these inconsequential details and concentrate on the actual problem at hand.. I think the problem stems from the wp-cli.yml file that immediately requires the command file.. We could try to provide some semi-smart guesses and adapt the URL accordingly. For example, if FORCE_SSL is set to true, the expected URL should generally be HTTPS.. Yes, that might work as well and be less of a hack. There's a filter that provides both the original and the changed URL.. Fixed in #4467 . Great, now works on Mac OS X as well. Thanks for the PR, @ryotsun !. @danielbachhuber:\nThe way this is now done will overwrite an existing git hook in the developer's local codebase.\nFor a safer approach, maybe consider using https://github.com/php-composter/php-composter. I can confirm, the issue is fixed for me as well on nightly.. I think you should be able to configure the credentials so that they are secure.\nHere's a comment from the S3 example's travis.yml file:\n```\nIt assums S3 credentials to be set up in the repository settings\nor to be configured as encrypted env vars here.\n```. A possible solution seems to be https://docs.travis-ci.com/user/jwt .\nHowever, I don't think it's supported by S3.... I think WP-CLI usage goes hand in hand with how comfortable users are with the shell in general. For a lot of people trying to start with WP-CLI, the shell is the hurdle, not WP-CLI itself.\nSo, maybe add a question to the survey about how comfortable/capable they feel with the shell.\nAlso, at one point, I'd like to work on a more linear part of the handbook that takes users through the initial hurdles of the shell and slowly builds on that knowledge. I have already started on this indirectly through talks (see these slides as an example), and I think that would be a major opportunity to increase usage.. @danielbachhuber Personally, I think that the data we'll get with the above questions will not do much except generate some work for all involved. It does not really serve a purpose and won't have any meaningful impact.\nI'd prefer surveys to be used as a tool to serve a specific goal. So, for example, if we have a big decision to make, a survey could help find out what the community's best interest is. Surveys should be goal-driven and result in an actionable data set.\nJust knowing who uses WP-CLI how much will not answer any meaningful question, as long as we're not in the business of selling demographics data.. Working on releasing wp-cli/core-command now, after I've fixed the tests.. While core-command is running its tests, working on releasing wp-cli/search-replace-command.. Changing milestone for wp-cli/search-replace-command from v1.1.5 to v1.2.0m because of the change in table output (now sorted).. Release completed. Great work, all!. This would now be a use case for an external test suite package, that could be separately versioned. This way, we could add breaking changes by bumping the major version. Different commands could use different versions of the tests.\n(... and probably break our automated full test suite in the process...? ). I think that // Table-specified should be // Table-specific, but not sure:\nhttps://github.com/wp-cli/wp-cli/pull/4527/files#diff-d5c3b8c65ee5ccc5dd15286817c05a2cR1312\nOther than that, ready to merge.. Wow, thanks for all that work, @DrewAPicture !. Yes, we should remove it. This will probably remain an on-going process for a while until we've detected every single offender.. Hi Beth,\nI think we haven't yet changed all of the single-person entries to third-person yet. If you can detect singular use in the documentation for the commands, PRs are of course always welcome.\nIt might make sense to first create a checklist with the different packages first, though, so we can check them off once they were controlled. Otherwise, it is difficult to know what has been verified already and what hasn't.. That should be fixed in nightly: https://github.com/wp-cli/wp-cli/pull/4470. Hey @grantpalin , thanks for the pull request.\nAs you can see in the Travis log, a number of tests now fail, because the tests rely on the strings that normally produce \"install\" in some form: https://travis-ci.org/wp-cli/wp-cli/jobs/313135279\nYou will need to adapt the existing tests to take the string changes into account as well.. Argh, nevermind my previous comment. You did change the tests, but the actual code is not changed yet.\nWe'll need to coordinate these changes across several PRs instead.. Huh? I meant \"dictionary-based\", of course.... @johnbillion I had already created a related meta trac issue: https://meta.trac.wordpress.org/ticket/3126. Try running wp plugin status --skip-plugins to see whether that changes the output. If it does, it is indeed a plugin issue.\nEither way, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. I'm closing this now, feel free to hit us up on Slack in the #cli team for further discussion & support.. @sandrodz Thanks for reporting.\nI can confirm, some of the templates will produce code that does not pass WPCS.\nCould you please open this issue in the correct repository under https://github.com/wp-cli/scaffold-command ?. I have a hunch:\nI suspect that the following while loop runs endlessly, because the modification to $cmd does not work as expected: https://github.com/wp-cli/wp-cli/blob/master/php/utils.php#L1348. Oh, I didn't notice that the proc_open_compat() code is so fresh. Maybe it fixes  the actual problem...\n@rarst Could you try running the WP-CLI nightly? Depending on how you installed it, a simple wp cli update --nightly would do the trick.. Yes, should be the same.. Great debugging, @gitlost !\nDo you think it makes sense to add a fix for this in WP-CLI, as you suggested?. Here's the current check to detect a WP installation:\nphp\nprivate function wp_exists() {\n    return is_readable( ABSPATH . 'wp-includes/version.php' );\n}\nWe could check \"existence\" and \"readability\" separately, and adapt the error message accordingly.. Fixed via #4626 . Yes, adding digits (except as the first character) makes sense, to adhere to POSIX:\nEnvironment variable names used by the utilities in the Shell and Utilities volume of IEEE Std 1003.1-2001 consist solely of uppercase letters, digits, and the '___' (underscore) from the characters defined in Portable Character Set and do not begin with a digit. Other characters may be permitted by an implementation; applications shall tolerate the presence of such names.\nI wonder though whether digits were left out because of a technical reason further down the pipe...?\n. Yes, let's go ahead with adding digits then. \ud83d\udc4d . We already have both Debian and RPM packages available for download.. The problem is not one of approval, but rather that no one is able and willing to maintain these.\nIf some one steps up and volunteers to take care of these reliably, I'm all for it.. Thanks for the pull request, @thrijith !\nHowever, it seems like something went wrong when you tried to merge latest master branch, so the PR is polluted with unrelated changes.\nCan you either clean up the PR (which is quite difficult to do) or close this one and create a new, clean one instead?. @killown Can you try using the ID of the category to assign it? That should work.\nAccording to the documentation, using name or slug should work as well, but it didn't for me with some quick tests.. No, wp core update is not deprecated.\nA lot of site owners actually disable the automatic updates, to have full control over the state of their state. They still want to be able to run manual updates.\nAlso, a conflict is unlikely, as an update starts with a check to see if updates are available. If they have already been done, no new ones are available, so nothing happens really.. I wonder if people use the output from wp cli info for scripting purposes. If so, the above is a breaking change. I'll ask in #cli to get some (limited) feedback.. I'm opposed to this change.\nWhile the \"hack\" we had included to keep memory usage in check was trying to isolate the flushing to local memory only, calling wp_cache_flush() will ensure that we also invalidate the entire persistent remote cache, without any obvious reason.\nThe contents of the remote cache have nothing to do with WP-CLI memory usage, and just flushing it for not reason is irresponsible when dealing with larger sites.. Yes, I agree, JSON is probably easier. I'd like to test whether we can make both work, so people can copy-paste array renderings in there. But at least JSON should be functional.. @kirtangajjar I had left it open because I'd like to go through the commands and make a list of parameters that would require/benefit the use of parse_shell_arrays(). So far, we have only implemented this for 1 single parameter, I'm sure there are more that should be converted.. Implementation should be rather trivial, but testing is more problematic here, so I agree. Let's remove it from the milestone. We'll include it with either 1.5.1 or 2.0.0.. I think this is better handled with the tools that vagrant or the environment provide.\nWhat you give to the vagrant: prefix is a host name. Having something like <subdirectory>/<hostname> does not make conceptual sense.\nAlso, the main purpose of adding the vagrant: prefix in the first place was to be able to conveniently use @alias notation to refer to your machines. This is meant to work no matter where you are located, so a relative subdirectory does again not make sense.\nClosing this for now. Feel free to reopen in case I have missed a blocking technical limitation.. I cannot reproduce either:\n\nFeel free to investigate further if you still think this might be a bug, and reopen this issue if you discover something.\nIn case you just want to get ahead with your site, you can use this command to force an update to 4.7.9:\nwp core update --version=4.7.9 --force. The immediate problem I see is that this always runs PHPCS over the entire codebase, not over the commit that was staged.\nIt would be preferable to only check the files or even only lines that are being modified, otherwise you might not be able to commit something due to unrelated problems.. Yes, you're right. Let's just go with this and try how it plays out. There's nothing preventing us from changing it down the line in case it is problematic.. Hmm, already regretting to have merged this with full check:\n\nTakes 25.5 seconds on my system to produce an empty commit.. It just takes too much time. I'll add another PR to change this so it only checks files that were changed.. Big props to @BhargavBhandari90 for doing a lot of the preliminary work.. While you're absolutely right that this should be consistent, this is just a huge effort without any immediate gain. Let's remove this from the 1.5.0 milestone for now.. Thanks for the PR, @websupporter !. I confirm that I can reproduce this, even with the latest master.. Moved to https://github.com/wp-cli/search-replace-command/issues/58. @AaronHolbrook I suspect this is a problem with your Composer setup, which only happens to work in a certain loading order.\nHowever, it is difficult to tell as you omitted the autoloading configuration from the composer.json file. Is it possible to see the complete composer.json file (the one you're actually using)?. Where and how do you load your Composer autoloader?\nDid you do modifications to the wp-config.php file?. @remcotolsma From your debug trace, I assume you're using a \"files\" segment in your Composer's autoloader, which adds class aliases.\nAre you aware that the \"files\" segment in the Composer autoloader is not actually an autoloader, but rather a hard include as soon as that file is parsed?. Did you try clearing all Composer caches?\nDid you try with a clean ~/.composer folder?. @AaronHolbrook Do you have any new insights re. the above? Most importantly, did you find a reproducible way of triggering this?. @andrejpavlovic Do you get a PHP error/notice with the first (non-working) version? If not, can you try to replace require_once with require to see what happens?\nI currently suspect that the following might be happening:\n\nThe WordPress configuration is not actually parseable, so we use the hack to eval() the file after having removed some execution bits (the loading of wp-settings.php mainly).\nThis eval() is probably triggering your require_once the first time. PHP marks that file to have been included already.\nWithin eval(), the namespaces don't work correctly (known limitation of eval()), so the autoloading functionality probably does not work as expected.\nWhen actually loading the WordPress installation, the call to require_once the autoloader will be skipped, as that file has been marked to already have been loaded.. @andrejpavlovic \nIf not, can you try to replace require_once with require to see what happens?\n\n\n\nDid you try this?. @flurinduerst Yes, @chriscroome is probably right. WP-CLI downloads the zipped core to a temporary location, and then extracts it into the target location. Your login probably doesn't have the correct permissions to write into whatever the system claims to be the temporary folder.. Invalid, WP-CLI framework version mismatch on my part.. This needs to be merged first so that the tests in the modified commands can pass.. Hmm, after further exploration I don't think that's the case, and the related bug seems to be caused by a different issue. I couldn't reproduce the above as an actual problem in any of my tests.\nClosing for now.. Looks like a temporary Composer issue at first glance.. This will probably not work as is, as GitHub/Travis does not have my private GPG key, GitHub only has the public one.\nThe private key is needed to sign something, however.\nFor a proper solution: https://stackoverflow.com/questions/45188811/how-to-gpg-sign-a-file-that-is-built-by-travis-ci. @miya0001 This was not meant to be merged, as it will not work. GPG does not have a corresponding private key on the Travis side.\nI'm reverting this for now.. Discussion should happen here: #4659 . > after they are receiving the '\n@marksabbath I'm not sure what you mean by that? I don't think we're directly adding quotes anywhere, they are only added by escapeshellarg(). Or am I missing something?. Love the idea of storing the versions!. We should also discuss how the public key is being distributed, as that goes hand in hand with the signing of the releases.. How about detecting whether the pager command worked, and if not put the safest option (more) into the config files, with a short warning about what is happening?\nWarning: The default pager couldn't be used on your system, saving the use of the\ncompatibility fallback pager 'more' into your ~/.wp-cli/config.yml file.\nThis would then automatically adapt to any environment, while still giving users several options to override.. WP-CLI commands are meant to solve one single problem and then be composable, so that you can script solutions to whatever complex needs you have (see Philosophy in the Handbook).\nYou can easily use variables for the above use case. If you do this time and time again, create your own script that combines these (and other) commands behind a shortcut.. I agree with @danielbachhuber 's sentiment, there's no real difference to simply using grep or find. I'm not sure what the benefit is of having this as a WP-CLI command.. Moved to https://github.com/wp-cli/media-command/issues/94. Thanks, @aj-adl !\nWe're aware of the issue and working on a fix.. Related: https://github.com/wp-cli/handbook/issues/202. Commands are back online again.. The 4.9.3 Core is not yet released for that locale, that's why it can't be found. At the time of writing, this is what the official en-GB page shows as the latest release:\n\nI suppose that when you originally switched, you were facing this issue instead, which has since been resolved: https://github.com/wp-cli/wp-cli/issues/4370. This should probably not throw a \"WordPress database error\", but rather catch this error and provide helpful feedback.\nLet's keep this open for further investigation.. The main issue here is that you cannot run the \"unit tests that are supposed to test the framework\" without including the hidden dependency of the bundled command. So not only are they not \"unit\" tests (which, I know, is something WordPress does not really care about at all), but they also break when you just want to test your \"package\" in isolation.. That division is not so artificial. I had to build a Composer plugin that splits 1 autoloader setup into two, just to make it work.... How about:\nwp post list --name='Testing' --format=count. We'll discuss the roadmap for v2.0.0 during the upcoming office hours. We'll then decide how we want to handle dependencies.. @tapetersen:\nWP-CLI v2 is planned for end of July.\nUp until then, a possible workaround is to use Phive or Tooly to use the Phar-version of WP-CLI with Composer.. This should now work correctly as of v2.0.0.. Thanks for the report.\nI can confirm, this is due to the fact that we are only filtering readme.txt as a soft change, not README.txt (note the case): https://github.com/wp-cli/checksum-command/blob/master/src/Checksum_Plugin_Command.php#L339-L345\nI'll open a new issue in the checksum repo to make the soft change detection more flexible.. Moved to https://github.com/wp-cli/checksum-command/issues/34. Related: https://github.com/symfony/polyfill/issues/66. Hey @jigsawsoul,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support\nEasiest is to hit us up in the #cli channel on the official make.wordpress.org Slack team.. Could you try running these commands with --debug to see what specific step is taking so long?. @robertmylne I tried to investigate what could cause such an issue, and I don't think this has something to do with WP-CLI code. My best bet right now is that either something triggers a network request or similar in your su, which times out because the environment is misonfigured, or working through the credentials is somehow locking.\nWhat you can do is to use strace to find out what the exact thing is that takes such a long time to complete.. @jbcoder I cannot fully make sense of what you are exactly doing and need more information.\nYou say that the error happens during create-project of a theme, but at that point, you couldn't yet include the wp-cli/wp-cli dependency. Are you using a custom fork that you create-project ? If so, can you post the composer.json file of that fork?. Our own break can be fixed either way. Let's discuss reverting during office hours today.. @robertboloc Just use single quotes to quote your string, not double quotes:\n--dbpass='&@^&@@$-@~-!!'. Related: https://github.com/symfony/polyfill/issues/66. I consider this a bug. When I run a command remotely, I expect it to exhibit the exact same behavior as if I would run it locally (minus whatever restrictions are needed for security).\nYou should be able to configure a site through its local wp-cli.yml file and have this configuration be respected when doing remote operations on the same site.. @ScreamingDev This is currently a known problem, but there's no immediate solution.\nComposer would need to provide the information about where to find the vendor folder through a constant or static method, but it doesn't, and it doesn't seem like it ever will => https://github.com/composer/composer/issues/2904. Although Composer does allow very flexible configuration of the vendor folder, I would currently recommend against doing so and keeping with the defaults for anything that goes beyond pure PHP OOP code. It is lacking a mechanism to deal with code that cannot rely on autoloading alone.. The above will still break if you put your vendor folder outside of the folder where the root package resides.. Adding a --skip-email parameter to this command does not make much sense, as wp option is meant to manage all options. For all but one, the --skip-email flag would be useless. I don't want to start building contextual parameters like this, as that path quickly leads to a wild mixture of random, conflicting flags.\nThis is part of the filterable default WordPress behavior, and can thus be easily changed through the normal means that WordPress provides.. The make-coffee bot basically ensures that our tests are run with every single new version of our dependencies.\nRemoving the composer.lock file is tempting, as it often causes frustration, but you'll only replace immediate errors and some manual fiddling with hard-to-debug random errors that get introduced without our knowledge.. Thanks for your work so far, @dustinvanbuskirk !\nGiven there is already an official and working image, I agree with @danielbachhuber that this is sufficient and no further maintenance burden should be added for now.\nAfter the next rebuild of the handbook, it will contain links to the corresponding images with a mention of how to use them.. @alzearafat :\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support\nI'm closing this now, as it is very likely only a misconfiguration of your local development setup.. @joshbetz There's still an issue with the code (accessing a non-existent index).\nAlso, can you add tests for this distinction as well?. The test breaks for an unrelated reason: With debug output enabled, you get a notice on WP3.7 because it uses the old mysql_connect(). You could circumvent this by adding a @require-wp-3.9 tag to the test.. @iandunn Are you still looking into this?\nThe test was meant to provoke a failure, but it currently passes.\nThis means that either we're testing the wrong thing or in a wrong way, or the bug we're trying to provoke is not reproducible within Travis.. > If having an open PR bugs you, feel free to close it and I can re-open it once I get it to the next step.\nNot at all, and no pressure. Just wanted to see whether there's still interest. All good.\n\nIt fails on my system, so I'm guessing it's just a difference between my environment and Travis. The scenario has some statements in the wp-cli.yml file that attempt to simulate Xdebug being enabled, and they work on my system (when I disable Xdebug), but maybe they don't work in Travis?\n\nAh, for the tests we use phpenv to disable the xdebug extension being loaded. So the ini_set probably doesn't work because at that point, xdebug was not loaded and doesn't exist.\nTo make this work, we would have to use a different mechanism of disabling xdebug.... Related: https://wordpress.slack.com/archives/C02RP4T41/p1540995345199900. Thanks for the PR, @janw-oostendorp !. @dking3876 No, this has not been solved yet. The goal is to remove Symfony dependencies entirely from the base WP-CLI framework, which we'll do for WP-CLI v2.0.0. The only hard dependency on Symfony will be in wp-cli/package-command, which is not needed when you pull in WP-CLI into a Composer project anyway.\nFor now you can solve this by pulling in WP-CLI as a Phar through tools like Phive or Tooly.. Another small detail: the wp-cli/wp-cli group should come first, with the rest sorted alphabetically.. Thanks, @danielbachhuber, it's looking great!. The new package https://github.com/wp-cli/regenerate-readme now takes care of this. By simply requiring this package as a development dependency, it will become active (through the use of the PHP Composter framework):\ncomposer require --dev wp-cli/regenerate-readme\nThis will cause the following:\n On precommit, it will compare the hash of the README.md file before and after a vendor/bin/wp scaffold package-readme . --force. If the hashes were different, it will create a file called .commit-readme-md.\n On postcommit, it will check whether a file .commit-readme-md exists and if it does, it does a git add README.md followed by a git commit --amend -C HEAD --no-verify. This modifies the commit after the fact to include the modified README.md file.\nThis means that contributors don't need to take care of manually regenerating the README.md file anymore. If they change some doc blocks or some partial markdown files, the README.md file will automatically be adapted.. The main functionality has been added with v2.0.0, but was only used within the wp-cli/wp-cli-tests repo.\nThis needs to be further tested and then implemented within all packages.. There's only two foreseeable breaking changes I can think of so far:\n1. #4748 will cause a breaking change if a third-party command is being pulled-in via Composer AND that third-party command relies on running bundled commands as well. This will seldom be the case and will be an easy fix. Installations using the Phar will not be impacted.\n2. #4749 will cause a breaking change if a third-party command relies on one of the removed Symfony packages AND hasn't declared that requirement in its own Composer configuration. This will seldom be the case and will be an easy fix. Installations using the Phar will not be impacted as the package manager still comes with these requirements included.. All items not yet solved for v2.0.0 have open issues milestoned to v2.1.0.\nClosing this one now.. Nice!. @apb1963 wp post meta list is for extracting tables of information.\nTo get the single value output you want above, you can use the following command:\nwp post meta get 203 _thumbnail_id. Oh yes, absolutely. I wonder though whether that was not the original behavior and we had a regression at some point...?\nEither way, the expected behavior would be to only prompt for values that were not yet provided.. @danielbachhuber:\nWhat I didn't yet do is update the handbook, as I'm not sure how this can be done to only cover 1.5.1.\nOther than that, everything should be taken care of already.. @danielbachhuber:\nOh, I assumed the Debian and RPM builds would be triggered automatically. I'll go through your list.. @danielbachhuber: Yes, the RPM & DEB builds haven't been completed yet. I had trouble with Travis last time I wanted to do that, and went down a rabbit hole (trouble which is still not resolved, unfortunately).\nI'll try triggering the builds.. @catchmyfame This issue tracker is for bug reports and for working on the WP-CLI framework, not for making feature requests.\nIf you want to introduce a feature request and think other people might be interested in this as well, please open an issue (with more details) in https://github.com/wp-cli/ideas/issues.\nIf you need this functionality now, your best bet is to work on a pull-request yourself. Please see https://make.wordpress.org/cli/handbook/contributing/#creating-a-pull-request for more information about how to do this.. GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support\nTL;DR: Just come to the Slack #cli team and we can discuss this.. Moved to https://github.com/wp-cli/ideas/issues/96. Force-merged because I suspect we have a circular issue here that lets tests fail.. Closing for now to reconsolidate updates.. Yes, they are the same thing.\nTo fix this in a BC way, we could just accept both whenever that particular format is used.\nHowever, I think that the plaintext one is only used when a string is returned, so it might make more sense to users in that case.. Related: https://github.com/wp-cli/automated-tests/pull/21. Closing for now to reconsolidate updates.. WP-CLI lets WordPress itself handle the database connection. If your WordPress site is correctly set up (and doesn't require webserver-specific details to deduce the database server) then WP-CLI will work as well.\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. Fixes #4766 . Closing for now to reconsolidate updates.. Are you referring to the global parameter --user=<id|login|email> ?\nRight now, it assumes an ID if is_numeric() returns true. It looks like there's currently no way to have something like 9 not be interpreted as an ID. A workaround would be to use that user's actual ID, or that user's email.. I don't think it is that hard to solve, actually.\nAssuming that we want to avoid adding further global parameters like --user-id, --user-email, ... the best approach I can think of is to allow for JSON-encoded values that make the type unambiguous:\n--user={\"id\":9}\nvs\n--user={\"login\":\"9\"}\nThis will not change anything for regular uses but allows for more unambiguous usage in advanced cases.. There's many places around the codebase where the arguments are not as expressive as some users might need them to be. This is one of these cases.\nI don't see this as a priority or something I will work on myself in the near future.\nBut I'd like to keep the issue open for now and maybe at a later point do a push for improving the consistency of how arguments are handled. Another ticket in the same vein is https://github.com/wp-cli/wp-cli/issues/4616.\nEvery time WP-CLI is less expressive than regular WordPress usage, I feel we're failing with our UNIX philosophy.. Closing for now to reconsolidate updates.. Hi @Stefan-Adam and thanks for the detailed bug report.\nWP-CLI uses the WordPress function wp_install to do the actual installation process.\nMy first assumption is that this has to do either with your current environment or with an upstream bug in WordPress Core. WP-CLI basically just passes on arguments to the WordPress function, and if the arguments would be off, we'd see issues everywhere.\nI'm marking this as unconfirmed for now, but I keep the issue open for a while in case you can find additional insights into this particular problem or other people can confirm the problem.. @Stefan-Adam : Thanks for the update.\nI'm closing this issue now, but please post any further updates in here if you gather more data or actually solve the problem, so that people with the same issue in the future will find help.. Closing for now to reconsolidate updates.. Closing for now to reconsolidate updates.. Force-merging, as I suspect we have a circular issue that is breaking tests.. This is probably some plugin that is currently active on your site that breaks in CLI context.\nYou can try to run your commands by adding the flag --ski-plugins.\nIf you need further support, please review support options at http://wp-cli.org/#support. > It would really be useful if WP-CLI could offer a bit more debugging information.\nWP-CLI uses WordPress for pretty much all of the actual logic, it is just the interface wrapper. While WP-CLI does produce quite a bit of debugging information or other feedback, WordPress generally doesn't. It just fails silently.\n\nAlso, it's difficult for users to understand what is considered a valid bug and if reporting errors here is actually welcome.\n\nBug are in general an error that is reproducible. So, given a same command run in a same context, the error should be the same for everyone. If an error happens to only occur in an individual environment, we first assume that there's a problem with the environment, not WP-CLI, as the error would be common for all users otherwise.\nYour bug reports are of course always welcome.\nHowever, in this case, reading through your output, I see that you are using MAMP, which is known to cause all sorts of weird issues with PHP, as it deviates from a standard setup.\nThe line your error message refers to is this one: https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L1138\nThis lets me assume that you don't have a valid config file in the installation you're using (or it can't be properly detected/parsed), and your environment is broken in such a way that the error message cannot be printed.\nPlease feel free to continue discussing a possible diagnostic of the above issue in Slack. But until further evidence, I have to assume that this is not a reproducible bug.. I'd suggest doing Perhaps add some options, e.g. to only remove cached translations. in a follow-up ticket in case someone does actually find it useful. I'd guess that the need for such a thing is pretty small.. The command looks good to me, but the tests do not do much yet and don't verify the behavior at all.. @swissspidy Keep in mind that we always add logic to FeatureContext.php.\nSo, just think of the English sentences that describe the logic of how to test. We can then add implementations as needed.. I'm adding a new step Given a ... *cache* file to wp-cli/wp-cli-tests: https://github.com/wp-cli/wp-cli-tests/issues/22\nTests can then be something like this:\n```gherkin\n  Scenario: Remove all but newest files from cache directory\n    Given an empty cache\n    And a file-a-12345.tmp cache file:\n      \"\"\"\n      -empty-\n      \"\"\"\n    And a file-a-23456.tmp cache file:\n      \"\"\"\n      -empty-\n      \"\"\"\n    And a file-b-12345.tmp cache file:\n      \"\"\"\n      -empty-\n      \"\"\"\n    And a file-b-23456.tmp cache file:\n      \"\"\"\n      -empty-\n      \"\"\"\n    And a file-b-01234.tmp cache file:\n      \"\"\"\n      -empty-\n      \"\"\"\n    And a file-c-12345.tmp cache file:\n      \"\"\"\n      -empty-\n      \"\"\"\nWhen I run `wp cli cache prune`\nThen STDOUT should be:\n  \"\"\"\n  Success: Cache pruned.\n  \"\"\"\nAnd the {SUITE_CACHE_DIR}/file-a-12345.tmp file should not exist\nAnd the {SUITE_CACHE_DIR}/file-a-23456.tmp file should exist\nAnd the {SUITE_CACHE_DIR}/file-b-12345.tmp file should not exist\nAnd the {SUITE_CACHE_DIR}/file-b-23456.tmp file should exist\nAnd the {SUITE_CACHE_DIR}/file-b-01234.tmp file should not exist\nAnd the {SUITE_CACHE_DIR}/file-c-12345.tmp file should exist\n\n``\n.Given a ... cache fileis now part ofwp-cli/wp-cli-tests` v2.0.10+.. I think I can top that!\nWhen running composer test -- features/cli-cache.feature, I get the following error in the above test:\nClass 'features/cli-cache' could not be found in '/Users/alain/dev/wp-cli-dev/wp-cli/features/cli-cache.feature'.. Oh, nevermind the last comment, user error. The command should have used behat, not test. The error came from PHPUnit.. @swissspidy This is still marked as WIP. I got the tests to pass now. Is this ready for merging?. Closing for now to reconsolidate updates.. Closing for now to reconsolidate updates.. * The problem seems to be limited to the 5.3 branch: https://travis-ci.org/wp-cli/wp-cli/builds/377594092\nThis might indicate that it is caused by either dependency versions that are pulled in for 5.3, or by the custom Travis setup that we need to use for 5.3, as the default Travis image does not support 5.3 anymore.\nIt might just be one more hint that it is time to get rid of PHP 5.3 support.... @szepeviktor I tried to investigate this, but failed to make any meaningful progress.\nI now decided to just drop testing on PHP 5.3. See https://github.com/wp-cli/wp-cli/pull/4798 for the reasoning behind this.\nThanks for your help on getting to the bottom of this!. Unfortunately, dropping PHP 5.3 did not solve the issue. This has at least produced new data, though:\n\nIt breaks on PHP 5.4 too.\nIt is unrelated to the special, legacy PHP-5.3-enabled distro that Travis uses.. Finally figured out the reason. WP-CLI uses the cacert.pem for its SSL verification, but for Composer in the package-command code, it does not extract that file from the Phar first and directly points to the file from within the Phar filetree. Composer fails to properly read the file from inside the Phar.\n\nResolved in https://github.com/wp-cli/package-command/issues/82. The error message already states the reason: the user you're running WP-CLI with does not have the permission to read the wp-config.php file.\nAlso, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. Yes, which renders my theory of the problem being specific to the 5.3 Travis environment invalid.. Test failure was fixed via https://github.com/wp-cli/package-command/pull/83\nClosing this for now as it is not needed yet.. Not sure how reliable that would be, but it's certainly worth a try to see whether we can get that to work.. Related: https://github.com/wp-cli/search-replace-command/issues/45\nI'm closing this issue in here as it is in the wrong repository. Please feel free to add feedback/insights/suggestions to the above related ticket.. We already solved this locally for wp-cli/entity-command here https://github.com/wp-cli/entity-command/pull/171.\nWe need to replicate it throughout the other repositories as well.. Looks like wp-cli/wp-cli & wp-cli/automated-tests were the only packages that were not yet processed.\nFixed in https://github.com/wp-cli/wp-cli/pull/4806 & https://github.com/wp-cli/automated-tests/commit/5e0713e061603540264fba4d3a0f13f1cb640093. GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support\nTL,DR; Head over to Slack #cli channel, and we can discuss this.. This should be fixed now in the latest release file for 1.5.1.\nSorry for the oversight!. @0x6d617474 Thanks, I've retagged the correct version. This should be fixed as well now.. Release was built, merging this is not needed.. Thanks, @andtos90.\nThis is a temporary issue while I retag the packages to fix an issue with the 1.5.1 build (see #4811).\nI'll ping you in here as soon as the issue is resolved.. Fixed. Sorry about that. Apparently, everytime I move the tag for a release, Github puts that release on \"Draft\" again and it becomes unavailable.. Note: The link you've posted above is wrong. Here's the correct link for the 1.5.1 Phar: https://github.com/wp-cli/wp-cli/releases/download/v1.5.1/wp-cli-1.5.1.phar. @syhe Yes, I will not do that again. If something needs to be changed, for whatever reason, I will just push a new release instead.. Thanks for the report, @papakay, and thanks for the link to Homebrew, @mistydemeo !\nI commented on the Homebrew ticket. As soon as the hash is adapted on their side, the above issue should be fixed.. Looking at the diff from the two Phars, I'm surprised to see these changes, though. The release was made by pulling the branch from which the original 1.5.1 was made and only changing one file.\nIf that process introduces so many changes to the final release, I think we need to re-check how our releases are being processed.. Related: https://github.com/wp-cli/wp-cli/issues/4817. Homebrew sticks with the old release of v1.5.1 for now, which they provide through a backup location.. I think the cli_init hook should be at the earliest possible moment when the \"WP-CLI subsystem\" has been properly initialized (even if WP might not be fully loaded yet). If people then need to hook into a later stage, they can do something like this:\nadd_action( 'cli_init' function () {\n   add_action( 'plugins_loaded', [ $this, 'prepare_all_commands' ] );\n}\nI'm not actually sure yet what the \"earliest possible moment\" is, though.. > One thing I tried was to require a class directly (without using a Composer autoloader), and one documentation caveat we would have is that the require statement should be within the hook, as well. I assume, of course, that that's already true today, but it's worth mentioning here, just in case.\nI don't see this as a caveat. We are just providing a hook. This does not override any PHP language requirements attached to this.. Related: https://github.com/wp-cli/search-replace-command/issues/45\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. Hey @schrapel,\nCan you post the composer.json file you're using (minus any sensitive data)?. Note: I'm asking this because I suspect there might be some other code that pulls in either an old version of justinrainbow/json-schema or an old version of wp-cli/wp-cli (like a custom command you've built, for example).. I'm working on heavily improving Composer support by changing how packages are structured: #4752 \nHopefully, this will resolve some of the issues people face when pulling in WP-CLI through Composer.. It is more of a theoretical concern, but given that there's so few updates, there's also not that much of a maintenance burden to just lock it to a release for now.\nLet's just change the link from master to v1.5.1 to stay on the safe side and show best practices applied. If we never change the file again, then this is inconsequential anyway.. @jmslbam Oh, nice, I didn't know about this tool!. @girishpanchal0007 Thanks for the bug report!\nHowever, for generating this file, we just post all of our available data to the Underscores API (which powers https://underscores.me/) and get a generated ZIP file in return.\nYou should post a bug report in the upstream Underscores.me repository instead, which you can find here: https://github.com/Automattic/underscores.me. WP-CLI is not responsible for deciding what PHP ini file to use, that's done through the way PHP is set up in your environment. I think you should be able to override what your system does with the PHP_INI_SCAN_DIR environment variable.\nTools like WAMP do all sorts of magic with PHP and often make PHP work for their purposes while breaking them for the rest of the system, unfortunately.\nAlso, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get further support is to join us in the #cli channel on the Make WordPress Slack Team.. @JayHoltslander The blog post you're linking to is out of date and has you use a deprecated command: wp-cli-ssh has been integrated into WP-CLI since v0.24.\nHere's the documentation on how to use WP-CLI remotely: https://make.wordpress.org/cli/handbook/running-commands-remotely/\nAlso, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. Fixed via #4841 . I can confirm, I get the same error. It probably causes the php binary to recognize an empty $WP_CLI_PHP_ARGS as a separate positional argument and thinks this is the file to load.... Looked through this again, and I think this issue was not valid. Adding quoting actually breaks here. Let's close this for now.. Fixed via #4842 . Thanks for the pull-request, @wojsmol !. Thanks for the fix, @wojsmol !. The primer theme does not work on WordPress 3.7:\n'PRIMER_MIN_WP_VERSION', '4.4'\nEither we look for a different combination, or we tag this test as @require-wp-4.4.\nDo you think we can manage to find a theme combination that supports WordPress 3.7?. Hi @xwulfus,\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. @wojsmol The tests fail because your check (whether the function theme_setup exists) is wrong.\nThe parent theme you've picked is built using objects, not using procedural code. So your check needs to look for a class or method, not a function. Use something like the following:\n// For stargazer parent theme:\nwp eval 'var_export( class_exists( \"Stargazer_Theme\" ) );'\n// For buntu child theme:\nwp eval 'var_export( function_exists( \"buntu_theme_setup\" ) );'. Thanks for your continued effort on this, @wojsmol !. @killown This functionality already exists under wp option: https://developer.wordpress.org/cli/commands/option/. At first glance I have to assume that this is caused by a bug in PHP itself (in version 7.2.5 more specifically), or a problematic build of that PHP version on your current distribution.\nAre you able to test this on the same system with a different version of PHP?. @echodreamz I just tested this now and cannot replicate. When I have a single spam comment, I can delete it just fine with the above command.\nCan you give us more details about your environment?\n- wp cli info --debug\n- echo \"$IFS\" | cat -ETv. Yes, I agree, this could use cleanup, and I love the addition of comments.\nSome observations:\n .DS_Store should indeed be part of the global gitignore file. However, many developers are unaware of how this works, and if we remove this, we'll have half of the PRs in the future messed up with this file. We might add this to precommit checks first.\n config.yml is the local WP-CLI configuration file you can put in a folder. This can for example be used for pointing WP-CLI to a specific site when running tests.\nI'll need to examine what the /cache and /packages folders are about. This might be historical, or it might be the fallback for when the user's home folder is not writeable.. Yes, I agree, we should use dirname as well to make behavior match WordPress.. Isn't this what the uppercase letter shows?. Thanks for the pull request, @chesio !. @mirzazeyrek From what I can see in the trace, my first guess would be that either Cavalcade, WooCommerce or a WooCommerce plugin messes up the 'site_url', which requires 4 arguments but seems to be passed in with 1 argument only.\nI'd grep the code of the site to see what happens with that 'site_url' filter first.. @GaryJones would you be up to adding the needed fix in an additional commit? Both the PHPCBF automatic fixes, and the ignore for the eval uses.. Hi @jzeus !\nFirst of all, thank you for the pull request (PR) and your willingness to contribute to the project.\nThere's several reasons why I cannot accept the above pull request, though:\n1. The PR claims to fix an issue that is already closed (meaning it was either already fixed, or it is not meant to be fixed).\n2. The PR contains multiple, unrelated changes. Each PR should only solve one specific issue.\n3. The PR does not obey the WordPress Coding Standards.\nYou can read more about the expectations we have for pull requests here: https://make.wordpress.org/cli/handbook/pull-requests/#expectations\nI'm closing this pull request, as 1. above is not something you can fix with code updates. If you think there still is a fix needed here, please join us in WP-CLI Slack chat (#cli channel in the WordPress.org Slack team) to discuss upfront.. Note: your issue might also be that the value you want to replace could be serialized in such a way that wp search-replace cannot reliably change it yet.\nAnyway, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. Related:\n Add WP_CLI\\Utils\\is_bundled_command( $command ) function - https://github.com/wp-cli/wp-cli/pull/4049\n Capture and report anonymized usage statistics - https://github.com/wp-cli/wp-cli/issues/3886. @Reiner030 The main issue seems to be that when you use -i for sudo, it passes the command to execute on to the executed login shell via that one's -c argument. This means that one layer of quotes is being stripped.\nFor example:\n```\nsudo -i -- wp search-replace \"before\" \"after\" --dry-run\n                 |\n                 v\n\nwp search-replace before after --dry-run`\n```\nThis means that an empty argument is not properly recognizable anymore, which causes the error message you're seeing:\n```\nsudo -i -- wp search-replace \"before\" \"\" --dry-run\n                 |\n                 v\n\nwp search-replace before  --dry-run\n```\nThis also means that multi-word replacements could do unexpected changes:\n```\nsudo -i -- wp search-replace \"some term\" \"\" --dry-run\n                 |\n                 v\n\nwp search-replace some term --dry-run`\n```\nSo, instead of removing \"some term\", it will actually replace the word \"some\" with the word \"term\".\nA simple fix is to wrap quotes into quotes to get around this. So either wrap single quotes in double quotes or vice-versa:\n```\nsudo -i -- wp search-replace \"'some term'\" \"''\" --dry-run\n                 |\n                 v\n\nwp search-replace 'some term' '' --dry-run\n```\nThis way, the command works again.\nNote: This is only the case if you're using the -i flag to sudo.\nI'm open to a pull-request if you care to add the above caveat to the documentation.. @szepeviktor GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions.\nBut just join me in #cli channel and we can discuss what you are trying to do.. @tofumatt The docker container seems to have permission problems, at least when creating directories (as the first warning already shows). Without the possibility to create a temporary folder, the update's zip file cannot be extracted.\nYou should ensure that the user that executes these commands within your Docker container has the needed permissions.. I'll close this issue because it seems that it is a problem with your environment. Just hit me up in the #cli channel in case you need further assistance.. I'm adding tests as well now.... This should be good to go now.. Did you make sure it is not due to a stale Composer cache?. The issue seems to be caused by the wp-cli/autoload-splitter we're using to get around package structure limitations in WP-CLI ~v1.\nThe files vendor/composer/autoload_commands_classmap.php and vendor/composer/autoload_framework_classmap.php contain only empty arrays.. Yes, but they don't mention anything in the changelog about the autoloader generation.. @wojsmol The problem is already solved in commit https://github.com/composer/composer/commit/a74b63985e7cd811e5cdde30753249d8466666dd\nThe next update to Composer will fix this again.. To get around this issue for now while we're waiting on a new version of Composer, you can pull the latest development snapshot of Composer like this:\ncomposer self-update --no-plugins --snapshot\n              ^            ^           ^\n              |            |           +-- latest snapshot, instead of stable release\n              |            +-------------- skip plugins as they are broken with v1.7.0\n              +--------------------------- let Composer update itself. That the Yaml standard accepts some notation does not mean that our interpreter library understands it as well. Yaml is a hugely complex format with more than one broken implementation.\nThe syntax I usually use is this:\nskip-plugins:\n  - my-plugin. @wojsmol This pull-request is a no-op, both commits cancel each other out. What are you trying to do here?. @wojsmol Ignore theses tests for now, as long as we have not yet switched all of wp-cli/wp-cli-bundle to v2, these tests are meaningless, as they are pulling on old code.. Yes, requiring wp-cli/wp-cli-bundle will pull in all the bundled command. wp-cli/wp-cli is the pure framework only now.. Closing, as this is almost certainly an issue of how the wp-config.php file of the site is set up.. @lordspace GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. @BKirev If you can put this HTML into a file, you can send it through STDIN:\ncat myhtml.txt | wp post create --post-title=\"My Title\" -\nNote the dash at the end to denote receiving the content through STDIN.\nHope this helps!. A quick test revealed that using curly brace syntax is not enough here and still fails.\nNot casting, but using either an object or an array, as @danielbachhuber suggested, does work for this specific case.\n@javorszky Recovered from Brighton and up for a PR?. @timkite WP-CLI v2 will stay on PHP 5.4+, that was part of the goals of this major version bump.\nWe had more and more trouble just keeping our tests running on PHP 5.3, and it took a disproportionate amount of time and effort to support. We communicated the plans ahead of time and have made sure we leave people that cannot update with a working release.\nFor the foreseeable future, you can still use WP-CLI v1.5.1. If a critical problem should surface with 1.5.1, we can discuss doing a hotfix, within reasonable limits. Apart from that, I consider it stable enough and feature complete as-is.. @kshaner Please see https://github.com/wp-cli/php-cli-tools/issues/134#issuecomment-414751843 for a resolution to the above issue.. @kshaner No, not really, as the docblocks that mention this are currently not being pulled in as internal API pages. I've created an issue here to correct this: https://github.com/wp-cli/wp-cli/issues/4915. Thanks for the pull-request, @soulseekah !. @danielbachhuber Yes, but I think (if I deduced that correctly) that it currently runs on some private server of yours.\nRight now, it should run on both wp-cli/wp-cli & wp-cli/wp-cli-bundle, but I'm still reflecting on whether wp-cli/wp-cli should even include a lock file or not.. @thrijith This changed behavior will need a functional test to verify it works as expected.\nAre you up for writing this test?. Okay, so after having looked through this in more detail, here's how I think it should work:\n\nThere's two types of configuration: global config files and project config files. As you can see here, the actual used config is a merging of all possible configuration files: https://github.com/wp-cli/wp-cli/blob/3caf20113a12f72de476f6ad38f29e0aad5c98b1/php/WP_CLI/Runner.php#L860-L903\nYou should provide a flag to choose between acting on global or project config. It should default to auto, which tries to be smart but fails with an error if something is ambiguous.\nFor read operations (list & get), auto should work on the entire merged list of aliases. This can be done easily through WP_CLI::get_runner()->aliases.\nFor change operations (update & delete), auto should work on the file that contains the actual alias. If both global & config contain that same alias, throw an error (meaning the user needs to specify).\nFor additions (add), auto should default to global.\n\nDoes that make sense to you?. I think I would prefer --config=global or --config-file=global instead of --scope=global. \"Scope\" is so generic that it could be easily misunderstood.. Since v2, the wp-cli/wp-cli package is only the framework itself, without any of the actual commands (except for cli and help). Pulling in the framework for your project does not make sense, it should only be indirectly used as a dependency of commands.\nYou can either:\na) Pull in the specific command packages you need. For plugin ... for example, this would be the wp-cli/extension-command package.\nb) Pull in the entire bundle, which gives you all the commands that are part of the default PHAR-based distribution. Just require wp-cli/wp-cli-bundle to make this happen.\nAlso, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. #4985 already makes a change, but it deals with parent & child commands. This ticket is specifically about adapting the debug output for adding commands of type WP_CLI\\Dispatcher\\CommandNamespace, as these commands will be replaced  by real commands of a same name later on.. I think I know what the problem is. The Composer lock file in wp-cli/wp-cli-bundle locks to a tagged release of wp-cli/wp-cli (2.0.1 in this case).\nI think I need to pull in dev-master of wp-cli/wp-cli for wp-cli/wp-cli-bundle, instead of ^2.. > Run wp cli update --nightly to end up the latest nightly build.\n\nRun wp cli update --stable to revert back to the latest stable build.\n\nTested this just now and it works as expected again.. Fixed through https://github.com/wp-cli/extension-command/pull/137 with https://github.com/wp-cli/extension-command/releases/tag/v2.0.2. Thanks for the report, @halilemreozen, but I'm not 100% sure I follow.\nThe initial description lets me assume you had your plugins permanently deactivated as a result of using --skip-plugins. However, the steps you show to replicate this just contain one command. That the plugins are not active while you are using --skip-plugins is expected behavior. Am I missing something with your reproduction steps?. My guess would be that the notice is produced twice because:\n- WP-CLI evaluates the config without the last include to get configuration values.\n- WordPress loads the config to bootstrap itself.\nWe might want to silence notices while WP-CLI evaluates the config, to avoid double notices like this.. Thanks for the pull request, @KushibikiMashu!. @Salman7870 This is probably something you should contact your hosting provider's support about, or the general WordPress Support forum: https://wordpress.org/support/\nThis place here is for contributing to the development of WP-CLI, the WordPress command line interface.. Closed in favor of #5063 . Sounds like this would make conceptual sense, but do you have any data or insights on how many installs would be able to make reasonable use of the wp db * commands then?\nI'd assume that with lower WP versions, you'll hit more and more compatibility problems with WP itself, but I might be wrong.\nAlso, another (minor) issue I see is that we would need to add one or more WP versions < 3.7 to Travis to actually test this.. This will require changes in some of the feature tests.\nThey might be using something like the following:\nAnd STDERR contains:\n\"\"\"\nError: This is not a multisite install.\n\"\"\"\nThe easiest fix will be to remove the period (.)  at the end of those entries in the feature tests, as they will then match both old and new versions of the error message.\n@henrywright Do you feel up to discovering the repos that need this change in the feature tests and submit issues/PRs as well?. Ha, good catch, @Calinou, thanks for the PR! \ud83d\ude04 . I don't necessarily dislike the idea, but I think this might be outside of the scope of WP-CLI.\nWhy are your environment variables not part of your normal WP bootstrap, if they are needed? Is there a specific reason why this type of setup couldn't just be part of your actual project, instead of coded into WP-CLI?. Trying to discuss through this to find out whether we're actually improving something here...\nSo you have your environment variables as real environment variables on your server, not inside of a .env file. That is generally how you should set up a production server, whereas you'd be fine with a .env file on development machines. All fine here if the servers you are referring to are production machines and you access them over SSH.\nHowever, what you have proposed above to add an env: section to wp-cli.yml would have the same security drawbacks than a regular .env file, only that is then specifically tied to a WP-CLI implementation, instead of the more standard .env file convention.\nThe only way to avoid reintroducing the drawback of a .env with such a config change would be to have the env: section in your global user config ~/.wp-cli.yml under aliases. However, that means that you have all sorts of project internals for all of your sites inside of one global config. Are you sure that would improve your situation?. > I generally discourage developers to use .env for WordPress. Using real environment variables is OK.\nIn your scenario, I don't see why having environment variables in ~/website/wp-cli.yml would be any better than having them in ~/website/.env, though. The only difference I can see is that the latter is a standard convention.\nI'll leave this issue open here for now, and maybe mention it during office hours, to see whether other folks might have insights to share.. @binooetomo Did you try quoting the email you're passing? The @ will be interpreted in some shells.. Yes, indeed. Are you up for providing a PR for that?. No need to be sorry, pointing out the issue was already a win for the project! So, thanks for that! :). This probably means you're running WP-CLI through your webserver SAPI instead of cli SAPI.\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. Fixed in (not yet released) https://github.com/wp-cli/extension-command/pull/137. > I don't know about nested aliases feature. Do you have some doc' about what this means?\nI actually meant (nested) groups of aliases. Let me put together an example:\nwp-cli.yml file:\n```\n@dev-a:\n  ssh: user@{alias}.some-domain.com\n@dev-b:\n  ssh: <...>\n@dev-*:\n  require: some-file-{alias}.php\n@all-dev:\n  @dev-a\n  @dev-b\n```\n\nIs @dev-* triggered when I run wp @dev-a ...?\nIs @dev-* triggered when I run wp @dev-all ...?\nIs @dev-* triggered when I run wp @all ...?\nIs {alias} always mapped to the bottom-most alias that is being executed? Or are there maybe cases where it would need to map to what you actually typed? So, for 2., for example, will {alias} be dev-a or dev-all?. Thanks for the PR, @VladimirAus !. This is not necessarily what was meant with #4937, but it is a good change nevertheless.. To get rid of these issues once and for all, I'll decouple the autoloading from the framework (which we want to control) from the autoloading done through Composer (which we don't always control).\n\nWe already have an autoloader included for the bootstrapping steps, so it's just a matter of replacing the PSR-4 entry in composer.json for the framework with a call to that custom autoloader.. I found out why the existing tests did not detect this problem. To keep the dependencies for the tests in check, the bootstrap tests only ever tried to override the cli version command.\nThe cli * commands are part of the commands directly included with the framework, and are pulled in via the RegisterFrameworkCommands bootstrap step.\nA --debug output shows that these are the only ones that don't get mixed into the regular Composer commands, so they are actually the only ones that still work as intended:\nDebug (bootstrap): Framework autoloader paths: /Users/alain/dev/newcli/wp-cli/vendor/autoload.php (0.058s)\nDebug (bootstrap): Loading detected autoloader: /Users/alain/dev/newcli/wp-cli/vendor/autoload.php (0.058s)\nDebug (commands): Adding command: db (0.058s)\nDebug (commands): Adding command: comment (0.058s)\nDebug (commands): Adding command: meta in comment Namespace (0.058s)\nDebug (commands): Adding command: menu (0.058s)\nDebug (commands): Adding command: item in menu Namespace (0.058s)\nDebug (commands): Adding command: location in menu Namespace (0.058s)\nDebug (commands): Deferring command: network meta (0.058s)\nDebug (commands): Adding command: option (0.058s)\nDebug (commands): Adding command: post (0.058s)\nDebug (commands): Adding command: meta in post Namespace (0.058s)\nDebug (commands): Adding command: term in post Namespace (0.058s)\nDebug (commands): Adding command: post-type (0.058s)\nDebug (commands): Adding command: site (0.058s)\nDebug (commands): Adding command: meta in site Namespace (0.058s)\nDebug (commands): Adding command: option in site Namespace (0.058s)\nDebug (commands): Adding command: taxonomy (0.058s)\nDebug (commands): Adding command: term (0.058s)\nDebug (commands): Adding command: meta in term Namespace (0.058s)\nDebug (commands): Adding command: user (0.058s)\nDebug (commands): Adding command: meta in user Namespace (0.058s)\nDebug (commands): Adding command: session in user Namespace (0.058s)\nDebug (commands): Adding command: term in user Namespace (0.058s)\nDebug (commands): Adding command: network (0.058s)\nDebug (hooks): Processing hook \"after_add_command:network\" with 1 callbacks (0.058s)\nDebug (hooks): On hook \"after_add_command:network\": Closure in file /Users/alain/dev/newcli/wp-cli/php/class-wp-cli.php at line 624 (0.059s)\nDebug (commands): Adding command: meta in network Namespace (0.059s)\nDebug (commands): Adding command: plugin (0.059s)\nDebug (commands): Adding command: theme (0.059s)\nDebug (commands): Adding command: mod in theme Namespace (0.059s)\nDebug (commands): Adding command: eval (0.059s)\nDebug (commands): Adding command: eval-file (0.059s)\nDebug (commands): Adding command: core (0.059s)\nDebug (commands): Adding command: config (0.059s)\nDebug (commands): Adding command: package (0.059s)\nDebug (bootstrap): Loading packages from: /Users/alain/.wp-cli/packages/vendor/autoload.php (0.059s)\nDebug (bootstrap): Loading detected autoloader: /Users/alain/.wp-cli/packages/vendor/autoload.php (0.059s)\nDebug (commands): Adding command: scaffold (0.064s)\nDebug (commands): Adding command: admin (0.064s)\nDebug (commands): Adding command: package in scaffold Namespace (0.067s)\nDebug (commands): Adding command: package-readme in scaffold Namespace (0.067s)\nDebug (commands): Adding command: package-tests in scaffold Namespace (0.067s)\nDebug (commands): Adding command: package-github in scaffold Namespace (0.067s)\nDebug (bootstrap): Adding framework command: /Users/alain/dev/newcli/wp-cli/php/commands/cli.php (0.068s)\nDebug (commands): Adding command: cli (0.069s)\nDebug (commands): Adding command: cache in cli Namespace (0.069s)\nDebug (bootstrap): Adding framework command: /Users/alain/dev/newcli/wp-cli/php/commands/help.php (0.069s)\nDebug (commands): Adding command: help (0.07s)\nDebug (bootstrap): Fallback autoloader paths: /Users/alain/dev/newcli/wp-cli/vendor/autoload.php (0.071s)\nDebug (bootstrap): Loading detected autoloader: /Users/alain/dev/newcli/wp-cli/vendor/autoload.php (0.071s)\nDebug (bootstrap): Using default global config: /Users/alain/.wp-cli/config.yml (0.071s)\nDebug (bootstrap): No project config found (0.071s)\nDebug (bootstrap): argv: /Users/alain/dev/newcli/wp-cli/bin/../php/boot-fs.php cli version --debug (0.071s)\nDebug (bootstrap): ABSPATH defined: / (0.071s)\nDebug (hooks): Processing hook \"before_run_command\" with 1 callbacks (0.071s)\nDebug (hooks): On hook \"before_run_command\": WP_CLI\\Bootstrap\\RegisterDeferredCommands->add_deferred_commands() (0.071s)\nDebug (bootstrap): Running command: cli version (0.071s). @danielbachhuber Not sure what you mean. All commits were meant to pass and did pass, but the second one added edge cases the first one didn't test against.\nThird one is just a simplification.. Oh, and the tests do fail with the original regex.. Right now I assume that there might be a difference between WP-CLI behavior and Core behavior here.\nThe core behavior is not directly used from Core, but has been (at least partially) copied to a separate WP-CLI method: https://github.com/wp-cli/core-command/commit/02ce185f7d3e92b30e60adbcdc68e9649d72db54\nThis copying has happened in 2013, and the method has probably never been checked to make sure it is still in sync with current Core behavior. I'll go through this in more detail when I find the time to see whether there are deviations.. GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. Bug reports need to be reproducible with a fresh WordPress install. If your issue only reproduces in your environment, then it's likely specific to your environment. For support options, please review http://wp-cli.org/#support. WP-CLI does indeed require the ZipArchive extension (which is usually built into PHP from PHP 5.3+ onwards).\nI haven't tested this, but you should be able to get ZipArchive to work on CentOS by running the following command (as root, probably):\nyum install php-pecl-zip\nI'll add this requirement to the composer.json manifest.. @franzarmas WP-CLI does trigger the activation hook when you activate a plugin that was not activated before.\nGiven you're non-standard way of defining the hook, I assume you might have an issue with scope (activation hooks run in a different scope than the normal behavior) or hook naming (the SM_CORE_FILE constant you're using might be different and create a different action).\nI cannot tell you more without seeing the rest of the code.\nPlease keep in mind that GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. I suggest you join me in the #cli channel on the Make WordPress Slack Team so we can discuss this further.. Your installation throws an error because it assumes to be run within a web server context (which is not true for WP-CLI):\nPHP Notice:  Undefined index: HTTP_HOST in /site/wp-includes/functions.php on line 4363\nNotice: Undefined index: HTTP_HOST in /site/wp-includes/functions.php on line 4363\nSee here for a possible solution: https://make.wordpress.org/cli/handbook/common-issues/#php-notice-undefined-index-on-_server-superglobal\nAlso, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team.. This is something that has been bugging me for a while as well.\nWe should create a helper function to deal with paths like these and turn them into absolute paths.\nWe should pull https://github.com/wp-cli/wp-cli/pull/4150 and https://github.com/wp-cli/scaffold-package-command/pull/127 into the framework and reuse them.\nRelated: https://github.com/wp-cli/scaffold-package-command/issues/119. WP-CLI just reuses the WordPress Core functionality to switch the active theme (as you can see here).\nThis is probably because the theme makes some assumption that is not true in the context of WP-CLI. You should contact the support of the theme about this.. \ud83d\ude32 Why is wp_is_stream() not a simple in_array() check instead of a dynamically constructed regex?. The code first checks for the presence of :// and bails early.\nFrom there on, you could just substring the part before the :// and do an in_array() instead. Faster and more portable.. Here's my suggested version:\n```php\nfunction wp_is_stream( $path ) {\n    $scheme_separator = strpos( $path, '://' );\nif ( false === $scheme_separator ) {\n    // $path isn't a stream\n    return false;\n}\n\n$stream = substr( $path, 0, $scheme_separator );\n\nreturn in_array( $stream, stream_get_wrappers(), true );\n\n}\n```\nSee https://3v4l.org/BTHk0. This first iteration only takes care of providing the new code for now. In subsequent commits, I will deal with BC and transitions.. @swissspidy Yes, makes sense. I'll add it.. I'm wondering... should Path also contain the logic to retrieve the locations that can be configured or have to be figured out? \ud83e\udd14 \nSomething like Path::package_folder() or Path::global_config().... Other ideas:\nphp\nPath::locate( 'global_config' );\nPath::locate( Location::GLOBAL_CONFIG );\nLocation::global_config();\nPath::to( 'global_config' );\n.... Note: the breaking change is actually from v2.0.0 to this PR. The PR moves the behavior back to how it was pre-2.0.0.. Indeed, we should do a similar check than Composer does here: https://github.com/composer/composer/blob/master/src/Composer/Cache.php#L47-L51. As this is an interactive tool and not trivial to test, I'll merge this without test for now. It won't be used in scripting anyways, and users will probably provide feedback if it doesn't behave as it should.. Yes, that's what I thought as well, but I couldn't get this to work across multiple arguments, which is needed here.\nI'll have another go, maybe I messed it up somewhere along the way.... \ud83d\ude0a I found out why it didn't work... I forgot to actually pipe the file in the final call.. Ok, I added support for positional arguments and made the test work.. Oh, that was not intentional. Let's remove that particular requirement again, then, and just make sure we're safeguarding the affected calls accordingly.. I understand your point, but there's no logic that could be affected here one way or the other. The only astonishment we'll have is for most people to think that the operator is on the \"wrong\" side, as not a lot of WordPress devs are used to that kind of C-like syntax.. Does this actually break any of the sniffs? It is clear the variable does not serve an actual function, but this type of syntax increases the readability of the code as compared to non-descript scalar values as arguments.... @Rarst Did you check whether your PAGER environment variable might have been set?. Nvm, that would break on both Phar and source then.\nNot sure why there would be a difference in the first place, though.... Can you please try the following with both versions to see if Windows is properly detected?\nwp eval \"var_dump( WP_CLI\\Utils\\is_windows() );\". Thanks for the PR, @yahilmadakiya !. This is probably due to networking issue while downloading the ZIP file.\nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe easiest way to get support is to join us in the #cli channel on the Make WordPress Slack Team. So, if you want help in debugging this specific problem, just join us there, and we can chat.. Looks like a download error, you should try re-downloading the Phar file.. HHVM is not officially supported (and it has stopped being a drop-in replacement for PHP at some point), so I cannot help you much on that front.\nI'll close this issue as I don't think it has much to do with WP-CLI (except for the intentional lack of support for HHVM), but feel free to post your results in here in case you find out more, it might help other poeple.. @sjaakbanaan I cannot reproduce this, so I suppose this is due to your server environment.\nIf you want to get to the bottom of this, feel free to join us in the #cli channel on the Make WordPress Slack Team.. Good catch, thanks for the PR!. Fixed, thanks!. Regarding WP-CLI PHP minimum requirement: https://make.wordpress.org/cli/2019/01/15/wp-cli-php-requirements-strategy/. I'd suggest just copying that single function over and then dropping it once we raise the PHP minimum past 5.5.. Another option is to switch over to the symfony/polyfill-php55 package: https://github.com/symfony/polyfill/tree/master/src/Php55. @killua99 The approach looks good. I added a few change requests, which are mostly about grammar only.. Evaluating through https://github.com/wp-cli/wp-cli-bundle/pull/70 first before merging this one as well.... Thanks for the PR, @killua99!. If we can define a universal .gitattributes that works for all repositories, I can just run a script that generates a pull request on all of them.\nIf we need to consider differences between packages, then we should start with a checklist of repositories to make sure we keep track of what was or wasn't done, use a script to create an issue in each package and finally create PRs manually to solve said issues.. 1. I think the wp-cli.yml file can be added as well, it just provides a convenient way to run the command under development.\n2. What about phpcs.xml, is that not needed?\n3. I think we can also addCONTRIBUTING.mdas well.\n4. What aboutREADME.md? Does it make sense to have that inside of a dependency package? Composer metadata already points to the repository...\n5. What about theLICENSEfile? Does the package all of a sudden become unlicensed if we don't include that in a release distribution?. The thing is thatwp config createwill create or replace your WordPress installation's config file... which includes the credentials for WordPress to connect to the database. So without a configuration file, we cannot use WordPress to connect to the DB.\n. Note. That is the reason why the--skip-check` flag was added. We don't need a DB connection to create a configuration file, we only need it to verify that the credentials we stored in there actually work.. @felicianotech I remember you helped us move our CircleCI scaffolding to v2.0.\n\nDo you think the CircleCI Open Source plan is a good fit for the WP-CLI project's requirements?\nIs the migration from Travis CI to CircleCI something you would be willing to help with?. > it's more difficult to run against different PHP versions\n\nWhy is that?. @felicianotech Yes, please, that would be highly appreciated. I think we should start with one of the command packages, as these should all reuse the exact same config. The framework and bundle will require special handling.. That looks like the doctor-command, so total requirements would be:\n- PHP 5.4+\n- MySQL (+ mysql binary)\n- ext-curl\n- ext-readline\n- ext-json\nDo you have a complete log of the test failures so I can try to see a pattern?. This is a known bug in WordPress that was never fixed.\nI think we should compare the password to its slashed version and show a corresponding warning if they are not equal.. Huh? No, I meant if you do something like --admin_password=\"it'sweird\" with WP-CLI, it should show a warning that your password will not be what you expect when using the graphical login page.. Thanks for looking into the test failure!. Yes, I think these hard requirements cause more issues than they help. I'm open to removing them again, and add both a check in the --prompt and a Composer suggest clause instead.\nAre you up for providing a PR for the above?. Ah, great, then we can just add a suggest section in the Composer file and that's it.. @JeffCleverley Can you try adding a trailing slash to your URL to see whether that works?. Indeed, this is currently not possible. I looked into the before_ssh hook, but that is useless here, I don't see any way of injecting this additional argument with the current code.\nHowever, you can provide per-host configuration of the identity file in your configuration file (usually ~/.ssh/config): https://man.openbsd.org/ssh_config.5#IdentityFile. If we would add another argument, it would be more along the lines of --ssh-args=<additional-arguments> and accept any additional arguments to SSH.. Thanks for the PR, @atanas-angelov-dev!. @tfrommen Does SOURCE work with a file name of -?. WPCS: Functions should only have an @access tag if they are private.. WPCS: Missing period.. Not sure what's your stance on this. Shouldn't we make sure all doc blocks contain complete information?\nIn this case, short summaries, with an Optional. and the default value for $suffix are needed.. WPCS: trailing comma recommended. I was looking for a command that would not be split out, to use for the tests. So, the tests do test all of the different ways to override this command.\nFor this to work, however, the command itself needs to be autoloaded on-demand, not immediately loaded upon bootstrap.. I'm currently trying to figure out the autoloading in general here. There's still an issue with the Spyc class, my proposed change did not really help at all.. No need for double quotes here.. Shouldn't this be run together with one of the other environments to save one iteration?. Should be weren\\'t. Double quotes introduce additional processing that single quotes don't.\nBut I have no strong opinion no this. Will approve and merge.. Yes, I agree that is preferable. Now that most of the package have been taken out, it can more easily be contained.. Yes, indeed.. No, apparently not, as it seems to miss these. Will fix.. I'm not sure what you mean by that.\nThe autoloader splitter is meant to separate framework code and bundled commands code (because these are both part of the same composer.json file).\nCommands pulled-in as additional external commands via the Package Index (or via any other means) are already located in a different autoloader anyway.. Yes, I will add the reason of its existence as well.. No, changed to array().. Changed.. I wanted to make sure that the bootstrapping process does not depend on part of the bootstrapping process (i.e. loading utility functions) being completed already.\nI am aware this is not DRY, but I wanted to err on the safe side, at least while we don't yet know how we might re-arrange the bootstrapping steps.. I had looked at what the other code is doing and didn't find any reference to PHP_EOL. But I agree it is preferable.\nThe line breaks were to match what git is doing, but I have no strong feelings about that.\nSo, right now, it looks like this:\n```\nError: 'clu' is not a registered wp command. See 'wp help'.\nDid you mean 'cli'?\n``. Your second variant probably reads better for humans, but I think it might make parsing of the result unnecessarily complicated.. It's a way of better documenting the code, instead of only having a raw scalar value in there. Using such an assignment makes it obvious what the purpose of the2` is.. Could make sense, yes. I'll add a set of unit tests.. This function is for generally moving a given path inside of the Phar structure.\nThe actual paths you want to use depend on the package you're in, and how the packages have been included. So, I'm not sure we can reduce this problem to 1 single constant.. I want to run some tests now to see how the getcwd() will behave. If this works as expected in all scenarios, then it works across the board for getting rid of all the \"three-different-ways-of-getting-a-path\" issues.. Ah, I understand. So you want to still do the replacement above, but want to catch a constant early on instead of the potentially changing getcwd()? Yes, that makes sense.. danielbachhuber [10:15 PM]\nactually, `php/boot-fs.php` would still move around. we'd want to set it when\nrunning `utils/make-phar.php\nWe need to still keep this dynamic in nature, not bake it into the Phar in a compiled way. The Phar file can be moved around, so we need to catch the folder early on when running the Phar.. I currently think that the best place for this constant would be php/wp-cli.php. This comes immediately after php/boot-fs.php / php/boot-phar.php, and I think that there has not yet been a possibility to mess with getcwd() at this point.. No, as we only need it within a Phar, php/boot-phar.php is better.. The mechanism works by having something to diff against __DIR__.\n__DIR__ => phar:///home/alain/test/wp-cli.phar/php\ngetcwd() => /home/alain/test\nThis gives us the bit in front of the phar name, and it even works with different phar names.. Ah, I should add: the getcwd() produces the path to the Phar, not to a file from within the Phar.. Well, these packages can then simply pull in the Phar dependency. What use case do you think would currently break with this change?. I can add the wp-cli/phar-build package to the dev dependencies of wp-cli/wp-cli. That would make sure that the wp-cli/phar-build is always available when tests should be run.. This can also be triggered if DOMAIN_CURRENT_SITE is set, but the database did not contain the specific site that has been targeted (not set up yet, error in database, ...). Changed my mind about this, see https://github.com/wp-cli/wp-cli/issues/4095. This was transforming the $template_name to make its path work from within the Phar. It is not needed anymore as templates are passed through phar_safe_path(), and besides that it was broken under some circumstances.. Nope.. Nope.. Please add a reference to this hook in the doc block of WP_CLI::add_hook(): https://github.com/wp-cli/wp-cli/blob/3ccde5b05bb42c4ce4213e636e96d36e96f24bc3/php/class-wp-cli.php#L206-L215. The text should be a bit more specific. Maybe something like this:\n\"It looks like your PHP CLI runtime has OPcache enabled.\\n\" .\n\"This can produce inconsistent behavior and cause random bugs.\\n\" .\n\"You can disable OPcache in your php.ini by setting the 'opcache.enable_cli'  key to the value 0.\". Code style: if (. Code style: Add new line at the end of files.. Code style: Use StudlyCaps for classes OpCache.. Just for reference:\nThe current wp-cli can later be extracted as a variable, so that one can have alternatives like a dependency on stable wp-cli or a dependency on wp-cli v1.0.0.\nI think the PR is good for now and we should only do this if we indeed need it for additional tests.. Code style: spaces between parentheses.. Code style: spaces around parentheses.. Code style: space after false.. Yes, according to WPCS, this should be isset( $env['TRAVIS_BUILD_DIR'] ) instead.. My bad, I should have been more precise with the actual \"location\" of the missing spaces.. Why assign the key to $_ here? You could just as well omit the key assignment, unless I'm missing something.... Use a short package identifier here:\nWhen I run{PHAR_PATH} package install wp-cli/scaffold-package-command`. Probably just because Travis hit the git rate limiting.\nWith the short package identifier, in this case, you fetch the ZIP through the old package index, instead of the GH versioned source.. For the examples, you should follow the notation convention, as @danielbachhuber had provided:\nComments start with #, and the command starts with the \"basic\" prompt $. Lines without either are output.\nHere's one example:\n/**\n * ## EXAMPLES\n *\n * # The \"site delete\" command is registered.\n * $ wp cli has-command \"site delete\"\n * $ echo $?\n * 0\n */. Here's a link to the documentation for this: https://make.wordpress.org/cli/handbook/documentation-standards/#command-annotation. This is a private helper method. The $callable was already checked before to assert that it is a subclass of the namespace class.. With suggestions like this one (and the 'trash' => 'delete' one as well), we should first make sure that only valid options are presented as suggestions (see #4578).\nThere's some overlap for these terms across the different commands, so we want to make sure they are only shown when they are actually relevant.\nAlso, once #4578 got in, we would probably want to provide these options in both directions.. I cannot reproduce this behavior. Here's what I get when I remove the \"hack\" to fix it:\n\nAre you running on latest master ?. @johnbillion #4578 was now fixed.\nCould you pull in latest master, and add the two suggestions that might make sense in both directions in swapped direction as well?. Does it make sense to pick the codepage through an overrideable ENV variable? That way, impacted users can switch if needed.. The comment about variable name requirements is not technically correct anymore.. I'm not a fan of leading underscores in method names when we can just mark them as private.\nInstead of matching the other functions, maybe consider just changing them to get rid of that underscore in all of them.. I think this should be inside of the above conditional's block, to avoid comparisons against latest, nightly and trunk.. Shouldn't this produce ~@less-than-wp-4.6 as well, as 4.6 is not less than 4.6 ?. Picky is good. Why did you merge anyway?\nI'll add a bug report as a good first issue.. See https://github.com/wp-cli/wp-cli/issues/4629. I cannot push to this branch, I'll merge and then create an additional PR instead.. single site install => multisite install. $filename => $title. windows => Windows. reduced to a single. => reduced to a single one.. You need to ensure that the 'out' index even exists in $assoc_args before accessing it.\nThis is generally done through wp_parse_args().. Ah, right, my bad. WordPress may or may not be loaded yet.. The tests currently only test the output of the command, not whether it actually does what it pretends to do.\nTesting should maybe download 2 or 3 files, verify their presence in the cache, and then verify that a cache clear/prune actually removes some or all of them again.. I'll look into how best to do this.. So, the general approach should be the following:\n1. Initialize a separate, empty cache dir:\n   Given an empty cache dir\n2. The cache dir that was generated is now available from within the tests under the SUITE_CACHE_DIR variable\n3. Make some operation that should cache something\n4. Verify that a file was created under SUITE_CACHE_DIR\n5. Clear the cache\n6. Verify that the file is gone under SUITE_CACHE_DIR. Yes, they should be available with a simple When I run \"wp something something\".. Maybe stick with Core, as I want to reduce the amount of inter-dependencies that the tests introduce.\nI think you can force multiple versions of Core to be downloaded, so this will allow you to test the prune as well.. I'm still not 100% certain this is the best possible timing for the action.\nHere are some alternatives I'd like to discuss:\n1. Adding the action to the bootstrap process controlled here: https://github.com/wp-cli/wp-cli/blob/master/php/bootstrap.php#L15-L34 . This would let us provide the hook as early as possible. A good fit might be between RegisterFrameworkCommands and IncludeFallbackAutoloader.\n2. Add it after the $this->load_wordpress() call also found within the Runner::start() method. This would make the Plugin API be available without fail when cli_init is being used.\nBoth might be inconsequential if people only ever use the hook within plugins. But maybe they want to use it in a drop-in, for example? (not sure that even makes sense)\nWhat are your thoughts on this, @jmichaelward?. CS: No period after the scenario name.. If you are not actually running the command, there's no point in creating a command implementation. This is probably the shortest form of a command that you can verify on wp help:\nWP_CLI::add_command( 'custom', function () {} );\nThis way, you can get rid of the class-custom-command.php file and everything related.. This is misleading, WP-CLI packages don't need this.\nIt should be something like:\n// Set up hook for plugins & themes to conditionally add WP-CLI commands.. CS: Missing new line.. This is a duplicate and needs to be removed (as it is also in the wrong section).. There's an issue with the indentation here.. No, the line is still there. https://github.com/wp-cli/wp-cli/commit/4a782e0b8822dcd941c7812fb0956cd0bec2545e only fixed the indentation problem.. dirname() replaces the .. subpath that traverses to the parent folder, so you need to remove this bit from wp-config.php file.. Why are you loading the aliases directly here? This code seems to break in certain contexts, as the global config path might be modified (for Behat for example).\nWhy not just use the following?\nsuggestion\n        $aliases       = WP_CLI::get_runner()->aliases;. In Behat, you can see that there is actually no global config: https://travis-ci.org/wp-cli/wp-cli/jobs/439284200#L612\nWhen you create a new file wp-cli.yml in the WP folder, that would actually be a project config, so you could try with the get_project_config_path() method instead.. No, get_project_config_path() would actually be wrong as well, you need the merged version, and need to make changes to the global one by default and maybe the project one when provided with a flag.. This is probably to suppress the warning that can be generated:\n\nWe don't need to suppress these for WP-CLI, we're not generating HTML here, so I'd prefer to get rid of the error silencing.. suggestion. I'd remove the 4 blank lines here, the code complexity or importance does not warrant so much real estate.. suggestion. suggestion. suggestion. Why is there a leading space here?\nI'd suggest removing that unexpected whitespace and start at the beginning of the line.\nAlso, no need for positional placeholders here, WP-CLI does not use translated strings.\nsuggestion\n                WP_CLI::log( \"{$key}: {$value}\" );. Tests can be strict here. See below for the removal of the leading space that breaks this.\nsuggestion\n    Then STDOUT should be:. Tests can be strict here.\nsuggestion\n    Then STDERR should be:. suggestion\n    Then STDERR should be:. I don't think this correctly works as syntax format for all use cases. As the documentation states:\n```\nAn alias can include 'user', 'url', 'path', 'ssh', or 'http'\n``\nSo we would need to enable users to add any of these fields to the alias, not just thessh` one.\nI'd recommend going with the following signature instead:\nwp cli alias add [--user=<user>] [--url=<url>] [--path=<path>] [--ssh=<ssh>] [--http=<http>] [--grouping=<comma-separated list of aliases>]\nFor the --grouping, this would mean that the following command:\nwp cli alias add @someservers --grouping=first,second,third\nwould create the following config file:\n@someservers\n  - @first\n  - @second\n  - @third. This would need to be adapted in a similar way than the add command to allow for updating all of the possible values.. suggestion\n                throw new Exception( \"Config file does not exist: {$config_path}\" );. suggestion\n                throw new Exception( \"Config file is not writable: {$config_path}\" );. Why throw and catch exceptions here? You can just immediately use WP_CLI::error() instead.. Again, no need for an exception here.. suggestion\n                WP_CLI::success( \"Updated '{$alias}' alias.\" );. suggestion\n            WP_CLI::error( \"No alias found with key '{$alias}'.\" ) );. suggestion\n    private function validate_config_file( $config_path ) {. suggestion\n    private function get_aliases_data( $config, $alias ) {. This is cleaner:\nsuggestion\n            WP_CLI::error( \"No alias found with key '{$alias}'.\" );. suggestion\n        $this->validate_config_file( $config_path );. No need for private methods to be prefixed with an underscore, that is PHP 4 code style.\nsuggestion\n        list( $config_path, $aliases ) = $this->get_aliases_data( $config, '' );. suggestion\n            $aliases[ $alias ]['ssh'] = \"{$login}:{$wp_path}\";. suggestion\n                WP_CLI::success( \"Added '{$alias}' alias.\" );. suggestion\n            WP_CLI::error( \"Key '{$alias}' exists already.\" );. suggestion\n        list( $config_path, $aliases ) = $this->get_aliases_data( $config, $alias );. suggestion\n        $this->validate_config_file( $config_path );. suggestion\n                WP_CLI::success( \"Deleted '{$alias}' alias.\" );. suggestion\n            WP_CLI::error( \"No alias found with key '{$alias}'.\" );. suggestion\n        list( $config_path, $aliases ) = $this->get_aliases_data( $config, $alias );. suggestion\n        $this->validate_config_file( $config_path );. suggestion\n            $aliases[ $alias ]['ssh'] = \"{$login}:{$wp_path}\";. suggestion\n                WP_CLI::error( \"Key '{$alias}' found in more than one path. Please pass --config param.\" );. suggestion\n    Then STDERR should be:. Yes, http and url are added just like the others.\n--grouping only works alone. If --grouping is provided, any other properties should throw an error.. As there is no other logic to this statement apart from the increment, we should default to the more common postfix increment, like we do in other parts of the code.\nsuggestion\n            $i++;. As there is no other logic to this statement apart from the increment, we should default to the more common postfix increment, like we do in other parts of the code.\nsuggestion\n            $i++;. suggestion\n     * Confirm that a global configuration parameter does exist.. suggestion\n  Scenario: Check whether a global configuration parameter exists. suggestion\n                  WP_CLI::log( \"Global configuration '{$args[0]}' does exist.\" );. suggestion\n                  WP_CLI::log( 'Global configuration `url` does not exist.' );. suggestion. suggestion\n     * @param string $key Config parameter key to check.. The key should not be optional here.\nsuggestion\n    public static function has_config( $key ) {. suggestion\n      Global configuration 'url' does exist.. suggestion\n      Global configuration `url` does not exist.. suggestion\n                  WP_CLI::log( \"Global configuration '{$args[0]}' does not exist.\" );. suggestion\n      Global configuration 'dummy' does not exist.. suggestion\n  Scenario: Checking whether a global configuration parameter exists or not. suggestion\n           * Custom command to validate a global configuration does exist or not.. suggestion\n           * : Configuration parameter name to check for.. This message needs to be displayed when the actual namespace object is being added, otherwise it serves no purpose.\nTo check whether a command to be added is a namespace, you can use:\nphp\nif ( $leaf_command instanceof Dispatcher\\CommandNamespace ) { }. Add a comment here to explain what the regex does:\nsuggestion\n            // Disable the cache if a null device like /dev/null is being used.\n            if ( preg_match( '{(^|[\\\\\\\\/])(\\$null|nul|NUL|/dev/null)([\\\\\\\\/]|$)}', $dir ) ) {. CS: Leave an empty line between two pieces of logic:\n```suggestion\n            }\n. Rephrase:suggestion\n  Scenario: Using a null device disables the cache without throwing an error\n```. ",
    "BrianHenryIE": "To resolve/install it: sudo apt-get install mysql-client. ",
    "nschoenholtz": "Thank you!\n. ",
    "billc108": "Ok.  Reported to the plugin dev.   Thanks. \n. > just for completeness it was a <? what has to be a <?php\n\nphp-cli seems to be more strict with this. \n\nPHP.net recommends no longer using <? as some servers do not support the short tag.   It's considered better coding practice. see  https://php.net/manual/en/language.basic-syntax.phptags.php\nMy most recent server build disallows <?\n. Thanks Chris!\n. > which -a wp\n\n/usr/bin/wp\n/usr/local/bin/wp\n/usr/bin/wp\n. Worked.\n\nThanks\nOn 12/9/15 5:31 PM, Daniel Bachhuber wrote:\n\n|rm /usr/bin/wp|\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/wp-cli/wp-cli/issues/2275#issuecomment-163436455.\n\n\nBill Christensen\nhttp://SustainableSources.com\nhttp://LinkedIn.com/in/billc108\n. ",
    "0dp": "Well srv is not a path it should look in either. Base_opendir is set to\n/srv/http/ among others\nOn Aug 14, 2014 7:02 PM, \"Daniel Bachhuber\" notifications@github.com\nwrote:\n\nWP-CLI is looking for your wp-config.php\nhttps://github.com/wp-cli/wp-cli/blob/master/php/utils.php#L112 most\nlikely, and doesn't have read access to /srv\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/1332#issuecomment-52211339.\n. As of now I am just trying to install it properly. $ wp-cli --info as\nexplained in the docs.\n\nAfter moving it to /usr/local/bin I was forced to add it to open_basedir to\nremove several warnings.\nI'm on arch linux with php 5.5.14\nOn Aug 14, 2014 7:50 PM, \"Daniel Bachhuber\" notifications@github.com\nwrote:\n\nWell srv is not a path it should look in either.\nWhere it looks is based on get_cwd() or a supplied --path. I guess we\ncould have some respect for open_basedir if the value is set.\nCould you describe your configuration in greater detail, and what you're\ntrying to do, so I can better understand the context for the report?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/1332#issuecomment-52217522.\n. If I go to a specific wp site and execute wp-cli it will display the\ncommands available but the warnings are still showing.\nOn Aug 14, 2014 8:40 PM, \"Daniel Bachhuber\" notifications@github.com\nwrote:\nMakes sense. I'll keep this open until we handle it more gracefully.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/1332#issuecomment-52224337.\n. \n",
    "ashnur": "After I install wp-cli, running php wp-cli.phar --info gives:\nWarning: is_readable(): open_basedir restriction in effect. File(/) is not within the allowed path(s): (/srv/http/:/home/:/tmp/:/usr/share/pear/:/var/www) in phar:///home/ashnur/wp-cli.phar/php/utils.php on line 112\nPHP binary:     /usr/bin/php\nPHP version:    5.6.3\nphp.ini used:   /etc/php/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.17.1\nNotice the Warning and that it talks about File(/). No matter from where I run wp-cli, or even if I give a --path to it, it will still complain about / not being reachable. \n. ",
    "HLFH": "Same issue.\n. ",
    "Keithsc": "Hi, thanks for the quick reply....\nWe have a proxy specified in the wp-config.php, we specify the address=\"proxy\" and port=\"8080\"\nWe actually have two proxies, one called \"proxy\" that is just a normal proxy server and we also have transparent proxy.\nI had to remove \"popen\" from the disabled functions line before I could get the wp-cli shell to work. I currently just specify the proxy in the shell with #export http_proxy=http://proxy:8080   and   #export https_proxy=http://proxy:8080\nI think I know what the problem might be !  If I run Requests::get( 'http://api.wordpress.org' ); then the results come back ok but if I change it to Requests::get( 'https://wordpress.org' ); then I get the following error.\nI have seen a similar issue before and have had to add a line into the curl setting to get thing to work... CURLOPT_SSL_VERIFYPEER to false. I have tried to edit the wp-cli file earlier but my editor doesn't seem to like the encoding so when I make a change I am unable to run the script again.\nwp> Requests::get( 'https://api.wordpress.org' );\nFatal error: Uncaught exception 'Requests_Exception' with message 'cURL error 77: Problem with the SSL CA cert (path? access rights?)' in phar:///usr/local/bin/wp/vendor/rmccue/requests/library/Requests/Transport/cURL.php:280\nStack trace:\n0 phar:///usr/local/bin/wp/vendor/rmccue/requests/library/Requests/Transport/cURL.php(123): Requests_Transport_cURL->process_response(false, Array)\n1 phar:///usr/local/bin/wp/vendor/rmccue/requests/library/Requests.php(317): Requests_Transport_cURL->request('https://api.wor...', Array, NULL, Array)\n2 phar:///usr/local/bin/wp/vendor/rmccue/requests/library/Requests.php(194): Requests::request('https://api.wor...', Array, NULL, 'GET', Array)\n3 phar:///usr/local/bin/wp/php/WP_CLI/REPL.php(31) : eval()'d code(1): Requests::get('https://api.wor...')\n4 phar:///usr/local/bin/wp/php/WP_CLI/REPL.php(31): eval()\n5 phar:///usr/local/bin/wp/php/commands/shell.php(39): WP_CLI\\REPL->start()\n6 [internal function]: Shell_Command->__invoke(Array, Array)\n7 phar:///usr/local/bin/wp/php/WP_CLI/Dispa in phar:///usr/local/bin/wp/vendor/rmccue/requests/library/Requests/Transport/cURL.php on line 280\nwp> Requests::get( 'http://wp-cli.org' );   = Had to add this to our proxy allowed list.\n[\"headers\"]=>\n  object(Requests_Response_Headers)#206 (1) {\n    [\"data\":protected]=>\n    array(11) {\n      [\"server\"]=>\n      array(1) {\n        [0]=>\n        string(10) \"GitHub.com\"\n      }\n      [\"date\"]=>\n      array(1) {\n        [0]=>\n        string(29) \"Thu, 14 Aug 2014 18:59:29 GMT\"\n      }\n      [\"content-type\"]=>\n      array(1) {\n        [0]=>\n        string(24) \"text/html; charset=utf-8\"\n      }\n      [\"last-modified\"]=>\n      array(1) {\n        [0]=>\n        string(29) \"Tue, 22 Jul 2014 12:45:41 GMT\"\n      }\n      [\"expires\"]=>\n      array(1) {\n        [0]=>\n        string(29) \"Thu, 14 Aug 2014 19:09:29 GMT\"\n      }\n      [\"cache-control\"]=>\n      array(1) {\n        [0]=>\n        string(11) \"max-age=600\"\n      }\n      [\"vary\"]=>\n      array(1) {\n        [0]=>\n        string(15) \"Accept-Encoding\"\n      }\n      [\"content-encoding\"]=>\n      array(1) {\n        [0]=>\n        string(4) \"gzip\"\n      }\n      [\"age\"]=>\n      array(1) {\n        [0]=>\n        string(2) \"93\"\n      }\n      [\"x-cache\"]=>\n      array(1) {\n        [0]=>\n        string(18) \"HIT from f-proxy-a\"\n      }\n      [\"x-cache-lookup\"]=>\n      array(1) {\n        [0]=>\n        string(23) \"HIT from f-proxy-a:8080\"\n      }\n    }\n  }\n  [\"status_code\"]=>\n  int(200)\n  [\"success\"]=>\n  bool(true)\n  [\"redirects\"]=>\n  int(0)\n  [\"url\"]=>\n  string(17) \"http://wp-cli.org\"\n  [\"history\"]=>\n  array(0) {\n  }\n  [\"cookies\"]=>\n  object(Requests_Cookie_Jar)#205 (1) {\n    [\"cookies\":protected]=>\n    array(0) {\n    }\n  }\n}\nThanks\nKeith.\n\nFrom: Daniel Bachhuber [notifications@github.com]\nSent: 14 August 2014 17:58\nTo: wp-cli/wp-cli\nCc: Scott Keith (NATIONAL SERVICES SCOTLAND)\nSubject: Re: [wp-cli] verify-checksums with proxy error (#1333)\nTo confirm, your proxy is at the server level and isn't doing any modifications to the WordPress runtime?\nBehind the scenes, wp core verify-checksums and wp core download usehttps://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L137 Requests, a standalone PHP library.\nCan you try:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp shell\nwp> Requests::get( 'http://wp-cli.org' );\nwp> Requests::get( 'http://wordpress.org' );\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/1333#issuecomment-52210801.\n\nThis message may contain confidential information. If you are not the intended recipient please inform the\nsender that you have received the message in error before deleting it.\nPlease do not disclose, copy or distribute information in this e-mail or take any action in reliance on its contents:\nto do so is strictly prohibited and may be unlawful.\nThank you for your co-operation.\nNHSmail is the secure email and directory service available for all NHS staff in England and Scotland\nNHSmail is approved for exchanging patient data and other sensitive information with NHSmail and GSi recipients\nNHSmail provides an email address for your career in the NHS and can be accessed anywhere\n\n. Figured it out. It was the url/build that wp-cli was requesting from wordpress\nOur Wordpress build was on the latest build and wp-cli was requesting the following url.\nhttps://api.wordpress.org/core/checksums/1.0/?version=396&locale=en_US  just we just get = {\"checksums\":false}\nwe have tried it on another of our wordpress sites and it works fine!!\nhttps://api.wordpress.org/core/checksums/1.0/?version=3.7.1&locale=en_US\nI am not sure why this is happening but I think we can figure this out now as it's defiantly not our proxy server thats causing this issue.\nRegards\nKeith\nOn 14/08/14 17:58, Daniel Bachhuber wrote:\nTo confirm, your proxy is at the server level and isn't doing any modifications to the WordPress runtime?\nBehind the scenes, wp core verify-checksums and wp core download usehttps://github.com/wp-cli/wp-cli/blob/master/php/commands/core.php#L137 Requests, a standalone PHP library.\nCan you try:\nsalty-wordpress \u279c  wordpress-trunk.dev  wp shell\nwp> Requests::get( 'http://wp-cli.org' );\nwp> Requests::get( 'http://wordpress.org' );\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/1333#issuecomment-52210801.\n\nThis message may contain confidential information. If you are not the intended recipient please inform the\nsender that you have received the message in error before deleting it.\nPlease do not disclose, copy or distribute information in this e-mail or take any action in reliance on its contents:\nto do so is strictly prohibited and may be unlawful.\nThank you for your co-operation.\nNHSmail is the secure email and directory service available for all NHS staff in England and Scotland\nNHSmail is approved for exchanging patient data and other sensitive information with NHSmail and GSi recipients\nNHSmail provides an email address for your career in the NHS and can be accessed anywhere\n\n. Viktor you got it !!!! We've been experimenting with the iSecurity plugin and completely forgot about the version obscuring feature. Thanks for helping us, not sure how long it would have taken us to have figured that out ourselfs :>)\nCheers\nKeith\n\nFrom: Viktor Sz\u00e9pe [notifications@github.com]\nSent: 18 August 2014 18:01\nTo: wp-cli/wp-cli\nCc: Scott Keith (NATIONAL SERVICES SCOTLAND)\nSubject: Re: [wp-cli] verify-checksums with proxy error (#1333)\nDo you use iThemes Security or other plugin that randomizes core version?\nwp-cli.yml\nskip-plugins: better-wp-security\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/wp-cli/wp-cli/issues/1333#issuecomment-52521972.\n\nThis message may contain confidential information. If you are not the intended recipient please inform the\nsender that you have received the message in error before deleting it.\nPlease do not disclose, copy or distribute information in this e-mail or take any action in reliance on its contents:\nto do so is strictly prohibited and may be unlawful.\nThank you for your co-operation.\nNHSmail is the secure email and directory service available for all NHS staff in England and Scotland\nNHSmail is approved for exchanging patient data and other sensitive information with NHSmail and GSi recipients\nNHSmail provides an email address for your career in the NHS and can be accessed anywhere\n\n. ",
    "spacedmonkey": "I am also getting this error. \n. There should be a sub-command of posts called terms. This command should work similar to meta command, with similar sub commands. I would have \nAdd \nUpdate \nRemove\nList \nAdd, update and remove should all allow a list of ids to be passed to. \nThis should be simple enough to write. If I were to submit some code to do this, what are the steps to get it merged? \n. This is my first pass at the command. There are not tests. I just wanted to know if it was in the correct format etc. \nhttps://gist.github.com/spacedmonkey/0409ac984a58b2bf159b\n. I am not exactly sure where to put the code. At the moment it is a sub command of post, but I am not sure where to put it. Should it go in this file, should it be in it's own file? Should it be it's own command?\nAlso I was thinking about the unit test I was going to run, I am not sure exactly what to test. Everything is just a copy of what was already in post command and calls to wordpress functions...\n. That is a big change to the code. It also stops the biggest use case this code for me. \nIf it is an abstract class, then it means that it isn't locked down to posts. However, firstly it means killing most of the code that I have written here, making what I did a little bit pointless. Also it means it would not  extend \\WP_CLI\\CommandWithDBObject . I am extending this class because it makes it easy to pass multiple ids. The main use case for this command (at least for me) would be to bulk add terms to a list of posts.  \nMaybe shouldn't be a subcommand and just be terms. \n. With everything I just said, I decided you maybe right and rewrote it. See above a pull request. Thoughts...\n. I have done all the feedback, I think.. Wasn't sure with some of them. \n. I saw you wanted tests, but I can't find any good example of other tests. I don't know how detailed you want the tests etc. \n. So I did a tonne of work on this last night. Removed a lot of the code those didn't make sense. Even wrote some tests. \n. Okay so it is worth noting a couple of things at this point. \nFirst with new class I have created is just a copy and paste job of commandwithmeta. This was to keep the same coding style etc. so much of your feedback on my class should applied to the meta class. So a improvement to be made of list method in both classes is that the list method should detect empty array and display a message of \"no results found\" instead displaying an empty table. \nAlso, a lot the formatting issues I am having are because of the editor I am using, PHPstorm. It looks prefect when submit it but for reason it doesn't look the same on GitHub. Very strange. I will look into it. \nAlso I am new with behat testing, so my test bash at testing isn't great. I believe my code is pretty sound at this point. Just need prove it. \nThanks for your feedback. Will action when I get time. \n. I have rewritten the tests, took some tweaking and playing around but my tests are passing locally. But some reason all the other tests (not mine) are not failing on travis. It is a little confusing. Not sure what to do it about it. Otherwise I am happy with the code now.\n. I made the changing of the ordering of the params as requested. The only really last thing to discuss is the list method. We have been talking about this for a while and I feel like we are going around in circles. To cut to the chance, will you not merge this until I have made the change you have requested or are you willing to listen to my views on it?\n. You have said before about the branch. I am sorry, as I said before I now know for next time. \nWhat I don't understand is I get different results from travis and my vvv box. Everything is passing for me. How are you running the tests? Do you know why they are failing? \n. That is what I am doing and I am getting different results. As I am adding new command I will add new test and fix them then. \n. Why? It is what we discussed above? I am already going to have to change the list command and tests for the changes you have requested. \n. Fair enough. Can I create another issue / pull request after this is merge. What is the likelihood that pull request will be merged? Do you think that the idea of a method to list taxonomies is a useful one?\nSo if I fix up the tests and change up list method to take taxonomies args, is that it? Is that the end / scope? If I am going to commit anymore time to this, I want to know where the end point is. \n. Also do you want me to squash the commits when I am finished? Make the pull request a little tidier. \n. Sorry for my last reply, been busy with client stuff and christmas is a busy time. \nI am going to try and change up the list function tonight, but I need to invest a lot of time into why the tests are passing for me and not in travis. I am on this, expect to see some commits in the week. \nDo you have any deadline? Like trying to hit 0.18 version deadline..\n. Closing pull request, will reopen from branch\n. > Looks like the build only fails right now because wp_remove_object_terms() doesn't exist until WordPress 3.6. I'd recommend just copy and pasting it to a protected method on the class, and mention that it's a backwards compat shim.\nDo you have a good example of this anywhere else in the code base?\n. So you want me to copy wp_remove_object_terms function into my command? It feels like there should be a better way, but I can't think of one. \n. Feedback done and test passing :smile: \n. Do you know when this will be put into stable build 0.18.1 or 0.19.0? The message bugs me :smile: \n. It doesn't. If you look at jetpack it is using git as well. Look here. It checkouts of from the develop branch of wordpress that contains the WP tests. It is using WP_UnitTestCase.\n. It means that I have to have SVN installed on any machine I want to run the tests on. It is a pain, as I (and most developers I know) use git full time now. I had a look around at everyone else was doing for their unit tests and saw many are just using git. It is about making it easier to run the test, but your point is valid if you don't have git installed. \nLook, personally I am going to write this for my tests, change the install script to use git. I just wondering if you guys want to make the change / push this upstream with a pull request. \n. Not sure what you mean here?\n. Why? The CommandWithMeta class doesn't do this?\n. Again, the CommandWithMeta doesn't do this. \nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/CommandWithMeta.php#L113\nDoesn't it make it harder to test as we don't control what is outputted. If WordPress changes for it's output or if different language is loaded, the message would be different. \n. I believe it should mirror wp post meta list. Requiring taxonomies make this function less useful. If you don't know the name of the taxonomies you will not be able list it. For example tags and posts formats are named post_tag and post_format. Unless you know those names, you would not  be able to list them. If you do a list of all terms, you can them work out the taxonomy list.\n. Good idea!\n. My bad, I changed it from update to set and forgot remove that\n. The only reason I have a fetcher in post terms is because I need to get the post object to get the post type. It isn't required here. The test coverage for posts might be a good idea.\n. I didn't ignore you when you posted this before. I just don't agree with this feedback. I will refer you to my reply earlier. https://github.com/wp-cli/wp-cli/pull/1443#discussion_r18750278\nRequiring taxonomy names make this method MUCH less useful. \n. But you are keeping it consistencies to taxonomy, but it is more similar to meta. I also don't really want to make this method less useful just for consistencies sake.\n. It is associated data with an object, where the key (taxonomy) is not defined by the user but the data is. One of the use cases of meta list function is to find the meta key name. Once that key is found you can then modify the data. When using plugins, we don't always know the key name (taxonomy name) that you want to modify. Without looking through all the plugin code in the codebase, there is no way to find that find that taxonomy name. \nIf there there were a command like this. \nwp taxonomy <object_type>\nThis would be different, as I could daisy chain commands.\n. How would wp post term taxonomies work for custom post types or any other object type? The use case I am discussing is a custom post type with custom taxes on it. The user will not know the tax name as it is not built in and they may not have registered them. What you suggest removes functionality and makes it hard for users to get information. If all you want is just every term linked to an object, it adds more work for the user. I don't understand why is unclear about it. Consistencies is not a good reason to remove functionality, even it is different, it is better user interaction. \nDaisy chaining commands means nested commands like this.\nwp post delete $(wp post list --post_type='page' --format=ids)\nTo if you wanted to do what the current functionality you would have to do something like this. \nwp post term $(wp term taxonomies --fields=name) 123\nAbove is just a pain to do and most users will not bother. \n. I understand where you going with this now. But it would have to be something like this. \nwp post term taxonomies <post_id>\nThis keeps it inline with the other command and should be easier to implement. \nAlso asking for data is not helpful, there is none, I am just giving you my opinon as a day to day user, being facetious is not helpful. \n. > The end point is list, add, set, and remove terms from posts and users, with corresponding test coverage.\nYou told me that this was the end point. I have used time to get to this point and now you are adding new things. What the hell?\n. How would you go about doing this then?\n. I do not wish my time to be wasted. I don't know anyone that would. I agree with you, \n\ntreat others as you'd like to be treated\n\nI will not waste your time, so don't waste mine. \n. I think this is out of scope of this first PR. \n. I believe I can do this pretty easily, because it is already doing it. It is doing an explode on a commas. I can implement it as you wish. I just change \n``` php\npublic function add( $args, $assoc_args ) {\n        list( $object_id, $taxonomy, $term ) = $args;\n    $this->set_obj_id( $object_id );\n\n    $this->taxonomy_exists( $taxonomy );\n\n    $terms = explode( \",\", $term );\n\n    $result = wp_set_object_terms( $object_id, $terms, $taxonomy, true );\n\n    if ( ! is_wp_error( $result ) ) {\n        WP_CLI::success( \"Added term.\" );\n    } else {\n        WP_CLI::error( \"Failed to add term.\" );\n    }\n}\n\n```\nTo\n``` php\npublic function add( $args, $assoc_args ) {\n                $object_id      = array_shift( $args );\n                $taxonomy     = array_shift( $args );\n                $terms           = $args;\n    $this->set_obj_id( $object_id );\n\n    $this->taxonomy_exists( $taxonomy );\n\n    $result = wp_set_object_terms( $object_id, $terms, $taxonomy, true );\n\n    if ( ! is_wp_error( $result ) ) {\n        WP_CLI::success( \"Added term.\" );\n    } else {\n        WP_CLI::error( \"Failed to add term.\" );\n    }\n}\n\n```\nWhat do you think? Should I change the tests as well?\n. What do you mean here? That statement isn't very clear.\n. Still confused by this. See examples \n\n\n. I just copied the meta command on that one. I have removed it :smile: \n. I see what are you saying, but there should be a better way of testing it. \n. ",
    "omarabid": "I wonder why this is closed. I'm too getting this error.\n. Okay, got this resolved. Had to use 127.0.0.1instead of \"localhost\" on OSX. I wonder if it's the same issue for the other guys.\n. @danielbachhuber Working like charm :+1: \n. ",
    "dweidner": "Currently I am experimenting with different Git/WordPress workflows. I do not know if I will stick with my current approach to symlink WordPress core from several project folders. Probably an extraordinary use case. I would add the missing tests if it will be of use for anyone else. At the moment though, I have the feeling it is only me :).\n. Well this is not pretty (as it leaves a dirty submodule), but indeed it works. Thank you for sharing.\n. ",
    "achasseux": "Thanks for the fix.\nIndeed, the real repo is mustangostang/spyc. It seems to be maintained. The pull request 2 was from lespoilus and composer.json was fixed in this commit \n. ",
    "sabreuse": ":+1: \n. ",
    "nacin": "Taking what @trepmal said a step further: A group of commands bailing with the error that it can only be run on 4.0+ installs is even more trivial than the need to roll back.\nAdding backwards compatibility shims for newer core features to work on older versions in general makes a lot of sense, but at some point those goals cannot easily be applied. Much of the groundwork for language packs was laid as early as 3.7, so the code could be made to work, but no language packs exist for that time, so it doesn't actually make a whole lot of sense pre-4.0. But take the new session tokens API: this is a brand new concept that has no bearing on 3.9 installs and cannot be made backwards compatible (short of bringing the core API to installs and completely hijacking core authentication). Yet not supporting it for installs that have it would make little sense.\nIf we just added the concept of plugins in 4.0, would we not want to add commands for them, and bail for when you're running an older version of WP? Or would we relegate plugin management to a community command until WP-CLI's minimum WP versions catch up?\nI do think that supporting a number of WP versions of WP-CLI is a good idea because it helps with allowing people to easily maintain and update to newer versions. But it shouldn't be against the rules to add new commands for entirely new concepts when new versions of WP ship.\n. wp_download_language_pack() only works with core. You should probably use Language_Pack_Upgrader directly anyway. I can help with this.\nget_available_languages() is old-school API that is only for core languages. The newer, better version of this is wp_get_installed_translations(), which accepts a $type argument.\nThere is no uninstall API for language packs at the moment. I guess there could be. We don't actually (yet) remove them when deleting a theme or plugin, though that will probably come in 4.1 (cc @ocean90). Simply removing the file is sufficient.\nTranslations can be updated, as well. It's not as obvious because this happens at the same time as core, plugin, and theme updates. A translation can be updated (say, to fix a typo) and still be the same version (of the core/plugin/theme) \u2014 the difference is in the PO file creation dates, which are compared API-side. \nIt's actually all super complicated, the more I think about it. No wonder it took this long to do...\n. What about translation updates? Left for later?\n. I pushed a new nightly build. Didn't notice the new commits to switch over. That seems fine, too.\n. ",
    "jeichorn": "Do you want fixup commits like this squashed\n. I added the table because the verbose output output is hard to read and doesn't contain the previous info.\nWe are logging all plugin updates so having the previous version in the logs is very important since it makes roll backs easy.\nSince the verbose output comes from wordpress I can't easily change it.  It might be better to hide the wp output by default and just show the table, with formatting options (long term storing these logs as json might be the best for pagely).  But i figured i'd start with enough output to cover my minimum use case.\n. Seems like a reasonable change, I can't think of any cases where this would cause us problems at Pagely\n. ",
    "jerrylt": "I'm in the process of doing a merger.  On a dedicated dev box with a fresh install of WP, I've moved over only the 2 MySQL DBs.  Imported 1 DB, ran WP to export.  Dumped 1st DB and imported 2nd DB.  Ran WP import process and noticed there were now year/month directories with media files (~50MB).  Made some changes to one of the exports, deleted the entire wp-content/uploads directory contents, and ran the import again.  Checked the uploads directory again and new year/month media files were added.\nAs the import is still running, I do see:\nProcessing post #320976 (\"A Blanchard\") (post_type: attachment)\n-- 4,202 of 16,806\n-- Thu, 28 Aug 2014 17:00:04 +0000\nFailed to import Media &#8220;A Blanchard&#8221;: Fetching attachments is not enabled<br />\nOnce the import is finished, I'll see if I can correlate a media file with the import log to see if I can find anything.\n. I can confirm this isn't an issue.  Not entirely sure what caused it -- perhaps a process running in a separate screen.\n. It seems with \"--skip=attachment\" it goes considerably slow during this process.  If its not creating records and not downloading attachments, why does it go so slow at this point.  Post imports fly by hundreds per minute.  \nProcessing post #255092 (\"American Presidents\") (post_type: attachment)\n-- 12,450 of 17,630\n-- Sat, 30 Aug 2014 15:19:40 +0000\nFailed to import Media \u201cAmerican Presidents\u201d: Fetching attachments is not enabled\nThese go by 1 every 1-1.5 seconds.\n. These are on 16GB Ram Digital Ocean servers.  Swap is 0.\ntop - 15:48:22 up 4 days, 14:52,  2 users,  load average: 0.86, 0.86, 0.86\nTasks: 176 total,   1 running, 175 sleeping,   0 stopped,   0 zombie\n%Cpu(s): 11.5 us,  1.7 sy,  0.0 ni, 86.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nKiB Mem:  16433872 total,  5589656 used, 10844216 free,   200180 buffers\nKiB Swap:        0 total,        0 used,        0 free.  4324088 cached Mem\n. @danielbachhuber all set.  There should be a way to use skip attachments, but actually have it add the attachment record but skip downloading the media files if you have already rsync'd them over.\n. ",
    "Zyles": "Doh! Forgot to add write access to the SQLite database on the file system for the CLI tool.\nThanks for a great tool. :)\n. ",
    "jesseoverright": "Looks like the issue was introduced in v0.16.0, search-replace works in PHP 5.3.3 using v0.15.1\n. I created a pull request https://github.com/wp-cli/php-cli-tools/pull/64 to address this issue. Please let me know any feedback you have.\n. @scribu nice catch! I read that documentation as introduced in php 5.4. My mistake! \nThere is still a dependency on the non-default php-mbstring extension, though. The above fatal error is a result of not having that module enabled.\n. edited title for clarity\n. ",
    "matgargano": "Sure.\nAfter rebooting and running the script I kept getting false errors that the DB couldn't be created, I looked into it and realized that the script tries to create the DB and doesn't do any handling to check if the DB already exists -- it just tries to create it.\nI also tried to install it on a machine that didn't have SVN installed and ran into the script dying without any feedback. Another user who I had test the script didn't have mysqladmin installed on their server.... So I built in checks for everything.. \nSo ultimately this script is to make sure the user gets the unit tests set up --- or in the event that they cannot tell them how they can rectify their server so the scripts will work.\n. @danielbachhuber just curious if you had any other questions about this PR\n. @danielbachhuber made those updates to this branch and ran a quick test and everything worked. let me know if you have any questions or need anything else.\n. @danielbachhuber I'm not sure what made the tests fail?\n. :) It was annoying when I kept testing, I can add it back in if it's helpful.\n. cURL is just used to test if the version of wordpress is available, but cURL is not required. It's just an optional feature to check if the version-built-url exists.\ne.g. if a user requests version 4.2 right now, it will check if http://wordpress.org/wordpress-4.2.tar.gz returns a 200 and error out if not.\nIf the system doesn't have cURL it skips it.\n. I think this is much easier, but it's not necessary, it's more luxury than anything. I always assume the user is going to ask for things that don't exist. Always over-prepare.\n. ",
    "djdefi": "+1\n. ",
    "helmuthva": "+1\n. ",
    "TheLorus": "just for completeness it was a <? what has to be a <?php\n php-cli seems to be more strict with this. \n. ",
    "duncanjbrown": "Fair enough. I entered it by accident when I copy-pasted a url from the WP\nplugin repository.\nOn 12 September 2014 13:22, Daniel Bachhuber notifications@github.com\nwrote:\n\nWhy are you entering a trailing slash?\nThere are a lot of places we could have input validation, but don't. It's\nyour responsibility as a user to double-check the arguments you're passing.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/1397#issuecomment-55395244.\n. Great! PR to follow. Given that the composer init process offers the option to .gitignore vendor, and there's no composer.json by default (though maybe there should be) I'll start with just node_modules and .DS_Store.\n. \n",
    "xslidian": "I'm running wp-cli in a cron job to update all installations.\nOne of the websites might be hacked. WP codes are run when wp-cli is called.\nSo I can't just use a php-cli.ini instead of php.ini where open_basedirs are defined for each site.\nIt's unwise to keep two copies of open_basedir entries either.\n\nActually the update functions work fine in a environment that all WordPress features are functional.\nOnly the help viewer is affected. I've submitted another pull request: #1407\nBut it will be better if wp-cli can run safely in a environment that WP works.\n. Thanks for your suggestion!\nI was not sure if =\"\" works in all environments, so I used the second example here.\nTested just now. Looks like your solution works everywhere. :D\nCommit b129dcf added to this pull request.\n. ",
    "wout": "That's the thing, permissions are at their most flexible (while not being insecure) and I am running everything as root. To me it seems like the --path variable isn't passed properly.\n. Ok, I found the problem. The proper capistrano command is:\nruby\nrun \"#{ try_sudo } /usr/local/bin/wp --path=\\\"#{ release_path }/public\\\" --allow-root total-cache flush\"\nThanks for closing the issue before it was resolved. You've been very helpful :)\n. ",
    "chadwatson": "Sure thing. Strangely enough it works for some people here at work and not for others. Also, FWIW, this wp-config was generated by WP-CLI as well\nhttps://gist.github.com/chadwatson/62c35ad7658e6358e038\n. Sorry, it was a MySQL config error! Thanks.\n. ",
    "KingYes": "1) Maybe. I have posts with Hebrew lang. What you need from me to check?\n2) I know this parameter. I just ask about multiple post_type. Do you know any way to do this?\n. Hi !\n1) I will, yes.\n2) It's not works with comma.\n. ",
    "Tin-Woodman": "Thank you!  Could you provide a link to wp-cli documentation, where I might learn all I need to make full sense of your kindly advice? \n. Thank you!  I'll try that if the problem recurs.  IDK what was at cause, but the next AM it worked fine, has ever since.  NSFN installed/configs wp-cli on their servers. I did install it on my own sever space as well, hoping I could run my own version and escape their install's bug, but to no avail.  There's little I could do to troubleshoot their install from my end, but if it recurs I'll know to try disabling plugins when I execute.\n. ",
    "dbernar1": "Export a wxr file which contains only the content of one of the sites in multi-site\n. Thank you.\n. I could add it to the docs, in the example section, if you would like and if there is a way for me to do a pull request.\n. ",
    "dillongilmore": "__destruct is supposed to be marked as public, even if you don't put public it's implied as public.\n1 <?php                                                                                                                                                                                          \n  2 # t.php                                                                                                                                                                                               \n  3 class Test {                                                                                                                                                                                   \n  4     protected function __destruct() {                                                                                                                                                          \n  5         echo \"Hello world\";                                                                                                                                                                    \n  6     }                                                                                                                                                                                          \n  7 }                                                                                                                                                                                              \n  8                                                                                                                                                                                                \n  9 new Test;\n```\n$ php t.php \nPHP Fatal error:  Call to protected Test::__destruct() from context '' in /Users/dillon/Dev/src/php/sw_vagrant/src/wordpress/t.php on line 9\nFatal error: Call to protected Test::__destruct() from context '' in /Users/dillon/Dev/src/php/sw_vagrant/src/wordpress/t.php on line 9\n```\nWhen I mark it as private or protected this is what happens.\n```\n<?php\nclass MyCommand extends WP_CLI_Command {\n   public function __construct() {\n      echo \"Init...\";\n   }\n   protected function __destruct() {\n      echo \"Hello world\";\n   }\npublic function hello() {\n       echo \"World\";\n   }\n}\nWP_CLI::add_command('test', 'MyCommand');\n```\n$ wp test hello\nPHP Fatal error:  Call to protected Sw\\Commands\\TestCommand::__destruct() from context 'WP_CLI\\Dispatcher\\CommandFactory' in /usr/local/Cellar/wp-cli/0.16.0/php/WP_CLI/Dispatcher/CommandFactory.php on line 52\nFatal error: Call to protected Sw\\Commands\\TestCommand::__destruct() from context 'WP_CLI\\Dispatcher\\CommandFactory' in /usr/local/Cellar/wp-cli/0.16.0/php/WP_CLI/Dispatcher/CommandFactory.php on line 52\nWhen removing public and just having it be implied the issue from my first comment above still exists.\n. ",
    "bcole808": "I got the same error as @tonya-lunarwp with the SampleTest. I was able to resolve it by manually creating the directory /tmp/wordpress/wp-content/uploads on my machine. \nI had followed the tutorial on this wiki page and I used the install script to set up the test environment: bash bin/install-wp-tests.sh wordpress_test root '' localhost latest\n. ",
    "gnarlymedia": "I got the same error. First the permissions error when I ran the bash/install-wp-tests.sh command. I checked that file's permissions, they are certainly strange: --wxrw--wt. Not sure what the t means. However it has user execute permissions, so not sure what the problem is. Had to use sudo.\nThen I got the same \"UnexpectedValueException...No such file or directory\" error, which went away after I manually created the /tmp/wordpress/wp-content/uploads/ directory.\nCurious.\n. ",
    "keesiemeijer": "Same here\n``````\nDownloading WordPress 4.0 (en_US)...\nUsing cached file '/root/.wp-cli/cache/core/en_US-4.0.tar.gz'...\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'phar tar error: \"/root/.wp-cli/cache/core/en_US-4.0.tar.gz\" already exists as a regular phar and must be deleted from disk prior to creating as a tar-based phar' in /srv/www/wp-cli/php/commands/core.php:181\nStack trace:\n0 /srv/www/wp-cli/php/commands/core.php(181): PharData->__construct('/root/.wp-cli/c...')\n1 /srv/www/wp-cli/php/commands/core.php(154): Core_Command::_extract('/root/.wp-cli/c...', '/srv/www/wp-ref...')\n2 [internal function]: Core_Command->download(Array, Array)\n3 /srv/www/wp-cli/php/WP_CLI/Dispatcher/CommandFactory.php(52): call_user_func(Array, Array, Array)\n4 [internal function]: WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher{closure}(Array, Array)\n5 /srv/www/wp-cli/php/WP_CLI/Dispatcher/Subcommand.php(293): call_user_func(Object(Closure), Array, Array)\n6 /srv/www/wp-cli/php/WP_CLI/Runner.php(304): WP_CLI\\Dispatcher\\Subcommand->invoke(Array, Array, Array)\n7 /srv/www/wp-cli/php/WP_CLI/Runner.php(311): WP_CLI\\Runner->ru in /srv/www/wp-cli/php/commands/core.php on line 181```\n``````\n. I think the WP_TESTS_DIR that phpunit is using is set in bootstrap.php. If the environment variable is set it will always use that version of the testsuite. What's the reason the environment variable is used here? Without it you can download and point it to a correct version of the test suite.\n. I've provisioned my vagrant (VVV) and use the new install-wp-tests.sh file (from 0.21.0-alpha). I'm still getting the fatal errors regarding this issue locally and not in Travis CI. \nFatal error: Class 'WP_REST_Server' not found\nThis is because the VVV bash_profile points the WP_TESTS_DIR to the test framework from the development branch. I can fix this by removing that line from from the bash_profile, but I think it will confuse a lot of users using VVV.\nAnother point regarding the new install-wp-tests.sh code when installing WordPress for the tests:\nbash\nif [ -d $WP_CORE_DIR ]; then\n        return;\nfi\nConsider the following scenario:\nDo tests for WordPress latest (4.3.1) with\nbash\nbash bin/install-wp-tests.sh wordpress_test root '' localhost latest\nphpunit\nThis will create the WP core directory and use the latest WordPress version for your test.\nAfter that  do tests for  WordPress 4.2\nbash\nbash bin/install-wp-tests.sh wordpress_test root '' localhost 4.2\nphpunit\nNow the WP core directory exists (with WP 4.3.1 ) and as a result you test with the wrong version of WP (4.3.1)  instead of the version you wanted (4.2) .\nThere should be a check if the WP core directory contains the WordPress version you want to test against. Or just download the correct WP version without checking.\n. I will open an issue with VVV. Thanks for all the work you do for this project.\n. I understand you cannot remove it for backwards compatibility. The trac ticket assumes you only use the test framework from the installed branch. With VVV and and the current plugin scaffolding I get the undefined function is_post_type_viewable() error because the WP_TESTS_DIR is set in the bash_profile.\nFor myself, I will use the bootstrap.php and install-wp-tests.sh files from this pull request because I really don't want to add shims of future WordPress functions (used in the test framework) in my plugins.\n. Same with filters (test suite < 4.0). If you use a filter in one test, and then in another test after that, the filtered value from the first test is used in the filter for the second test. Remove the filters and actions you use in your tests in a tearDown() (for versions < 4.0).\n. I think WP-CLI test scaffolding should always use the test suite from the same branch as the WP version used in the tests. The test scaffolding should be a boilerplate and should not introduce unnecessary complications by adding a conditional for the version of the test suite used. Developers can change the created files to load whatever version they want or rewrite their tests to comply with older versions.\n. ",
    "joelworsham": "+1 for this... any word on it? Just had this error:\n```\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'phar tar error: \"/home/vagrant/.wp-cli/cache/core/en_US-4.0.1.tar.gz\" already exists as a regular phar and must be deleted from disk prior to creating as a tar-based phar' in /srv/www/wp-cli/php/commands/core.php:182\nStack trace:\n0 /srv/www/wp-cli/php/commands/core.php(182): PharData->__construct('/home/vagrant/....')\n1 /srv/www/wp-cli/php/commands/core.php(155): Core_Command::_extract('/home/vagrant/....', '/srv/www/test/h...')\n2 [internal function]: Core_Command->download(Array, Array)\n3 /srv/www/wp-cli/php/WP_CLI/Dispatcher/CommandFactory.php(52): call_user_func(Array, Array, Array)\n4 [internal function]: WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher{closure}(Array, Array)\n5 /srv/www/wp-cli/php/WP_CLI/Dispatcher/Subcommand.php(295): call_user_func(Object(Closure), Array, Array)\n6 /srv/www/wp-cli/php/WP_CLI/Runner.php(304): WP_CLI\\Dispatcher\\Subcommand->invoke(Array, Array, Array)\n7 /srv/www/wp-cli/php/WP_CLI/Runner.php(311): WP_CLI\\ in /srv/www/wp-cli/php/commands/core.php on line 182\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpress or run wp core download.\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpress or run wp core download.\n```\n. ",
    "bdruth": "Related to this - even in the case when doing a wp plugin install of only a single plugin, when that plugin install fails (couldn't download the URL, find the plugin file, whatever) - the return code is still zero. When setting up automation via puppet/Chef, this presents a problem as it makes the success/failure indeterminate.\n. As near as I can tell, token authentication still requires the client to send HTTP user/pass w/o a challenge:\nhttps://wiki.jenkins-ci.org/display/JENKINS/Authenticating+scripted+clients (see wget example)\n. ",
    "fabiokr": "How about a --fail option that would force failure?\n. ",
    "ypid": "Shell\nwp plugin uninstall $active_plugin\nshould return something else than 0 \u2026\n. You can sign releases also when they are build on Travis :wink: Please check it out.\nhttps://www.gnupg.org/gph/en/manual/x135.html\n. In short: To ensure integrity. Hashes are a start, but the question is here how does the user know the hashes? For the record: Can you point me to the hashes. That would be a start.\nhttps://en.wikipedia.org/wiki/Web_of_trust\nhttps://en.wikipedia.org/wiki/Code_signing\n. All right. Hashes don\u2019t help much in proving the integrity. For this to properly be done you could build locally and sign it (only for releases). In case wp-cli builds deterministicly, you could just build it locally, compare the binary and then sign it (without touching the Travis build stuff).\n. > Oh! I see your point: if someone modifies the phar and also the hash then he wins!\nGotcha :smile: Also see https://github.com/jchaney/owncloud/pull/12 (to which I refer in such cases when the use case of GPG is not obvious to everyone).\n. > If someone was able to modify the pharmacy and the hash, then wouldn't they possibly also be able to create a new signed version?\nIdeally not but that depends, as you mentioned, on your ability to keep your private key private.\n. @danielbachhuber Thanks. I\u2019m looking forward to it :wink: \n. ",
    "pdwalker": "Excellent! \nThank you.\n. ",
    "franz-josef-kaiser": "Composer scripts (docs) can sniff that quite easily: \npublic static function( Event $event )\n{\n    $config = $event->getComposer()->getPackage()->getConfig();\n    $target = $config['vendor-dir'];\n    // $target now is the custom vendor dir\n}\n. I don't know if this works. There's no info on how the phar packages are built (in the builds repo). In other words: Without a README or access to the repo I can't investigate further and come up with a solution as I don't know which possible obstacles there could be. By now the suggestion only targets Composer installs.\n. I didn't perform the tests locally. But as I was curious, I now ran the (PHP)Unit tests locally and in the VM and they passed (running with PHP 5.6).\nAbout Behat: It's quite stupid that the errors aren't shown, so I can't add any info to that. As I was already in the VM, I ran the behat setup bash script, but ran into a permission denied. I honestly don't have the time to fix that one as well right now. The same goes for reprovisioning my VM to perform the tests on 5.3 and try it with older WP versions.\nLet's face it: It's a 1:1 replacement with just the current PHP versions code and theoretically can't fail. Aside from that, I use that pretty much everywhere and know that it works flawlessly.\nHow do you want to proceed? Perform the tests yourself? Close the ticket? If you nuke this one, it's ok, as I just ran into it when reading the core code to see why Composer gets loaded a second time and just quickly added it.\n. > But it does fail?\nI don't know. I would have get Behat running in that context.\n\nTests need to pass before I can merge this. As it exists now, the tests are failing.\n\nUnderstandable. But as I don't have the time and there seems to be no shared devbox with the same provisioning (to make it comparable to Travis) that I can load and run this on, I can't check it. I'll leave the PR open for someone else as I really ain't got the time to fix the permission/user issue and eventually start reproducing the CI setup if it works for me but fails for Travis. Sorry Daniel, but I have to pass here because time.\nIf you want to close it: No hard feelings. It's a drive by improvement anyway.\n. It does not. That's the problem. Just had that with Memcached. Alloptions array is cached.\n. I'd say, it should get fixed where it's needed. When I look at how long some of my tickets are rotting in trac\u2026\n. ",
    "jrunestone": "+1 :)\n. ",
    "tyedco": "Here is the wp-config.php with comments:\n```\n<?php\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wordpress');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_HOST', 'db');\ndefine('DB_CHARSET', 'utf8');\ndefine('DB_COLLATE', '');\ndefine('AUTH_KEY',         'randomstring');\ndefine('SECURE_AUTH_KEY',  'randomstring');\ndefine('LOGGED_IN_KEY',    'randomstring');\ndefine('NONCE_KEY',        'randomstring');\ndefine('AUTH_SALT',        'randomstring');\ndefine('SECURE_AUTH_SALT', 'randomstring');\ndefine('LOGGED_IN_SALT',   'randomstring');\ndefine('NONCE_SALT',       'randomstring');\n$table_prefix  = 'wp_';\ndefine('WP_DEBUG', true);\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\nrequire_once(ABSPATH . 'wp-settings.php');\n$plugins = get_option( 'active_plugins' );\nif ( count( $plugins ) === 0 ) {\n  require_once(ABSPATH .'/wp-admin/includes/plugin.php');\n  $wp_rewrite->set_permalink_structure( '/%postname%/' );\n  $pluginsToActivate = array( 'nginx-helper/nginx-helper.php' );\n  foreach ( $pluginsToActivate as $plugin ) {\n    if ( !in_array( $plugin, $plugins ) ) {\n      activate_plugin( '/usr/share/nginx/www/wp-content/plugins/' . $plugin );\n    }\n  }\n}\n```\n. Here is the wp-config.php with comments:\n   <?php\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wordpress');\ndefine('DB_PASSWORD', 'password');\ndefine('DB_HOST', 'db');\ndefine('DB_CHARSET', 'utf8');\ndefine('DB_COLLATE', '');\ndefine('AUTH_KEY',         'randomstring');\ndefine('SECURE_AUTH_KEY',  'randomstring');\ndefine('LOGGED_IN_KEY',    'randomstring');\ndefine('NONCE_KEY',        'randomstring');\ndefine('AUTH_SALT',        'randomstring');\ndefine('SECURE_AUTH_SALT', 'randomstring');\ndefine('LOGGED_IN_SALT',   'randomstring');\ndefine('NONCE_SALT',       'randomstring');\n$table_prefix  = 'wp_';\ndefine('WP_DEBUG', true);\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\nrequire_once(ABSPATH . 'wp-settings.php');\n$plugins = get_option( 'active_plugins' );\nif ( count( $plugins ) === 0 ) {\n  require_once(ABSPATH .'/wp-admin/includes/plugin.php');\n  $wp_rewrite->set_permalink_structure( '/%postname%/' );\n  $pluginsToActivate = array( 'nginx-helper/nginx-helper.php' );\n  foreach ( $pluginsToActivate as $plugin ) {\n    if ( !in_array( $plugin, $plugins ) ) {\n      activate_plugin( '/usr/share/nginx/www/wp-content/plugins/' . $plugin );\n    }\n  }\n}\n. Thank you very much. I deleted the lines after require_once('wp_settings.php'). I love working on the commandline.\n. ",
    "georgestephanis": "When I built it out last summer, that sort of subcommand support wasn't supported -- I believe there was an open pull request that had been idling for quite a while.  As it sounds from above that it is now supported, I'll look at getting it in.\nThanks for the ping!\n. ",
    "Extracreative": "wp option update timezone_string Europe/London \n. ",
    "iamntz": "Oh, you are right :+1: \nThanks!\n. ",
    "schrauger": "```\nwp eval \"global $shortcode_tags;\"\nPHP Parse error:  syntax error, unexpected ';', expecting variable (T_VARIABLE) or '$' in phar:///usr/local/bin/wp/php/commands/eval.php(15) : eval()'d code on line 1\nPHP Stack trace:\nPHP   1. {main}() /usr/local/bin/wp:0\nPHP   2. include() /usr/local/bin/wp:4\nPHP   3. include() phar:///usr/local/bin/wp/php/boot-phar.php:5\nPHP   4. WP_CLI\\Runner->after_wp_load() phar:///usr/local/bin/wp/php/wp-cli.php:34\nPHP   5. WP_CLI\\Runner->_run_command() phar:///usr/local/bin/wp/php/WP_CLI/Runner.php:696\nPHP   6. WP_CLI\\Runner->run_command() phar:///usr/local/bin/wp/php/WP_CLI/Runner.php:311\nPHP   7. WP_CLI\\Dispatcher\\Subcommand->invoke() phar:///usr/local/bin/wp/php/WP_CLI/Runner.php:304\nPHP   8. call_user_func() phar:///usr/local/bin/wp/php/WP_CLI/Dispatcher/Subcommand.php:293\nPHP   9. WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher{closure}() phar:///usr/local/bin/wp/php/WP_CLI/Dispatcher/Subcommand.php:293\nPHP  10. call_user_func() phar:///usr/local/bin/wp/php/WP_CLI/Dispatcher/CommandFactory.php:52\nPHP  11. Eval_Command->__invoke() phar:///usr/local/bin/wp/php/WP_CLI/Dispatcher/CommandFactory.php:52\n```\n. ",
    "aljafor": "Hi @danielbachhuber, no problem. \nI was indeed using 0.17.0:\n$ wp cli info\nPHP binary: /usr/bin/php5\nPHP version:    5.5.9-1ubuntu4.4\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    /srv/www/wp-cli\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.17.0\nLet me know if there's anything you need me to do to get you more info.\n. ",
    "VickG": "I am having the same problem. I am usinglatest version 0.18 and I am getting same error:\nError: Term is missing a parent.\nwhen doing an export. Any resolution? \nCan I somehow with a SQL query find what term is orphan? I might just be able to delete it.\n. @danielbachhuber thank you for your quick reply! and thanks for WP CLI! :)\n. ",
    "grappler": "I tried to do this today and it did not work. We have our purchased premium plugins on a server behind a http auth.. I ran wp media regenerate and I got the following errors for the image file wpzoo-signete_simple.svg\nWarning: Illegal string offset 'file' in commands/media.php on line 237\nNotice: Uninitialized string offset: 0 in commands/media.php on line 237\nWarning: Illegal string offset 'file' in commands/media.php on line 238\nNotice: Uninitialized string offset: 0 in commands/media.php on line 238\nWarning: Couldn't regenerate thumbnails for \"wpzoo-signete_simple\" (ID 2217)\nI know that WordPress core does not support SVG images but it would be great if I could hook into wp-cli and exclude svg files.\nThe code that I added to allow svg to be uploaded is:\n```\n/*\n * Allow SVG to be uploaded\n /\nfunction wpzoo_svgs_upload_mimes( $mimes ) {\nif( current_user_can( 'administrator' ) ) {\n    $mimes['svg'] = 'image/svg+xml';\n}\n\nreturn $mimes;\n\n}\nadd_filter( 'upload_mimes', 'wpzoo_svgs_upload_mimes' );\n``\n. I was using version0.18.0. Updating to version0.20.2` helped but I did not like the error message. I found a better way to handle it in my own mini SVG plugin.\n``` php\nfunction wpzoo_svg_generate_attachment_metadata( $metadata, $attachment_id ) {\n    if ( ! empty( $metadata ) ) {\n        return $metadata;\n    }\n$type = get_post_mime_type( $attachment_id );\nif ( 'image/svg+xml' == $type ) {\n    $att_desc = sprintf( '\"%1$s\" (ID %2$d).', get_the_title( $attachment_id ), $attachment_id );\n    return new WP_Error( 'svg-images', sprintf( __( 'Thumbnails not generated for SVG file: %1$s', 'wpzoo-svg' ), $att_desc ) );\n}\n\nreturn $metadata;\n\n}\nadd_filter( 'wp_generate_attachment_metadata', 'wpzoo_svg_generate_attachment_metadata', 10, 2 );\n``\n. Sorry, I am not sure what you mean by \"functional tests\"?\n. This can be closed due to https://github.com/wp-cli/wp-cli/pull/2751\n. This issue does not seemed to be fixed as I am getting this error inv0.24.1. The PR did not touch the line 169 where the error was coming from. The code being$plugin_data = array_shift( get_plugins( '/' . $update->slug ) );`\nToday the code in line 195 https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/CommandWithTranslation.php#L195\nPHP binary:     /usr/local/php/bin/php_cli\nPHP version:    7.0.9\nphp.ini used:   /etc/php/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.24.1\n. @danielbachhuber So what I would like to do is not possible with wp-cli but is possible with wp-rest-cli?\n. > Can you share or point me to a copy of the full command?\nhttps://gist.github.com/grappler/1f214baf5329497cb0fe7e42990aa8e5\n\nJust to verify, you've added @when before_wp_load to the command's synopsis to ensure the command itself is running before WordPress loads?\n\nYes, but I don't think it will work as I am loading the command from a plugin. How do you develop commands before they are added to the package index.\n\nI'm not sure why you need to run the code on wp_loaded\n\nBecause the command id dependant on other code that is only run later.\nhttps://github.com/polylang/polylang/blob/243bcf1af1df3bc37f65bf20cfd9b65b7bb03042/admin/admin.php#L59\nThank you for your help.\n. > It's still not clear to me why the code needs to hook exactly on to wp_loaded.\nA object gets added to a global which the command needs in wp_loaded at priority 5. If my command runs before the object gets added to the global then the code fails with a PHP error.\n\nWhy can't you just remove the @when before_wp_load and run the command in the scope of a fully-loaded WordPress?\n\nI could, the code just needs to run after wp_loaded.\n. @danielbachhuber Ah, I think I know why my code was failing. The command need to run as if it were in the admin area and not on the front end.\n@diggy I am developing it for private use but am willing to contribute it publically once it is ready and there is a home for it.\n. But I am not sure how to do that.\n. Ok, I got it to work. I needed to define the URL and USER parameter as the Polylang code required to be run in the admin context and the user needed to have the correct capabilities.\nI misunderstood the problem. Thank you for your help.\n. Have you thought about adding a link to CONTRIBUTING.md or create an ISSUE_TEMPLATE with a bit of text?\n. Ok, thanks.\nI found a partial solution. I checked for the PHP error caused in my code when the global parameter is not defined and the set a warning.\n. I was able to get it work by changing the PHP version that I used to install the package e.g. php71 wp package install wp-cli/profile-command\nThe alias for the different PHP version may be different on other hosts.. What if as of 1.3.0 there was a success code and if that did not exist then there would be a warning. Though any improvements that we make now will only help if version >=1.3.0 is being used remotely or locally.\nWhat we should also think about is when the remote version is higher than the local version.\nIf the remote does not receive the version then it would emit a warning too.. I found an issue with the Gutenberg Block Scaffold. https://github.com/wp-cli/scaffold-command/pull/96/files#r164610714\nIt is not serious but seems not to be valid code.. @gitlost The temp solution today would be to remove the text domain. Once there is a correct way of adding the text domain that could be added in a future release... \nI have created an issue. https://github.com/wp-cli/scaffold-command/issues/123. You can use the hostname fromvagrant ssh-config and use that instead.. > Unfortunately it seems that the command still needs to be run from inside the subdirectory that contains the VM.\nYou only need to run vagrant ssh-config once and copy the output to ~/.ssh/config.  A quick shortcut would be vagrant ssh-config > ~/.ssh/config. Sorry for not being clearer before.\nThis is the output of one of our vagrant boxes where vagrant config is in a subfolder.\nHost wearerequired\n  HostName 127.0.0.1\n  User vagrant\n  Port 2222\n  UserKnownHostsFile /dev/null\n  StrictHostKeyChecking no\n  PasswordAuthentication no\n  IdentityFile /Users/grappler/Documents/webdev/wearerequired.local/_vagrant/puphpet/files/dot/ssh/id_rsa\n  IdentityFile /Users/grappler/.vagrant.d/insecure_private_key\n  IdentitiesOnly yes\n  LogLevel FATAL\n  ForwardAgent yes. ",
    "camb416": "Sure. Here it is before modification (3.8.2 though I'm hearing it persists in 4.0)\nhttps://github.com/camb416/WordPress/blob/4a428f55d267c6af076257e7bf182b0e7cdba96a/wp-config-sample.php\n. Of course, sorry. Here are my configs as they are on my local machine (the issue is on local clones for development... Pantheon has their own CLI on their servers)...\nwp-config.php\n```\n<?php\n/\n * This config file is yours to hack on. It will work out of the box on Pantheon\n * but you may find there are a lot of neat tricks to be used here.\n \n * See our documentation for more details:\n \n * http://helpdesk.getpantheon.com/\n */\n/\n * Local configuration information.\n \n * If you are working in a local/desktop development environment and want to\n * keep your config separate, we recommend using a 'wp-config-local.php' file,\n * which you should also make sure you .gitignore.\n /\nif (file_exists(dirname(FILE) . '/wp-config-local.php') && !isset($_ENV['PANTHEON_ENVIRONMENT'])):\n  # IMPORTANT: ensure your local config does not include wp-settings.php\n  require_once(dirname(FILE) . '/wp-config-local.php');\n/\n * Pantheon platform settings. Everything you need should already be set.\n */\nelse:\n  if (isset($_ENV['PANTHEON_ENVIRONMENT'])):\n    //  MySQL settings - included in the Pantheon Environment  //\n    / The name of the database for WordPress */\n    define('DB_NAME', $_ENV['DB_NAME']);\n/** MySQL database username */\ndefine('DB_USER', $_ENV['DB_USER']);\n\n/** MySQL database password */\ndefine('DB_PASSWORD', $_ENV['DB_PASSWORD']);\n\n/** MySQL hostname; on Pantheon this includes a specific port number. */\ndefine('DB_HOST', $_ENV['DB_HOST'] . ':' . $_ENV['DB_PORT']);\n\n/** Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8');\n\n/** The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n\n/**#@+\n * Authentication Unique Keys and Salts.\n *\n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n *\n * Pantheon sets these values for you also. If you want to shuffle them you\n * can do so via your dashboard.\n *\n * @since 2.6.0\n */\ndefine('AUTH_KEY',         $_ENV['AUTH_KEY']);\ndefine('SECURE_AUTH_KEY',  $_ENV['SECURE_AUTH_KEY']);\ndefine('LOGGED_IN_KEY',    $_ENV['LOGGED_IN_KEY']);\ndefine('NONCE_KEY',        $_ENV['NONCE_KEY']);\ndefine('AUTH_SALT',        $_ENV['AUTH_SALT']);\ndefine('SECURE_AUTH_SALT', $_ENV['SECURE_AUTH_SALT']);\ndefine('LOGGED_IN_SALT',   $_ENV['LOGGED_IN_SALT']);\ndefine('NONCE_SALT',       $_ENV['NONCE_SALT']);\n/**#@-*/\n\n/** A couple extra tweaks to help things run well on Pantheon. **/\nif (isset($_SERVER['HTTP_HOST'])) {\n  define('WP_HOME', 'http://' . $_SERVER['HTTP_HOST']);\n  define('WP_SITEURL', 'http://' . $_SERVER['HTTP_HOST']);\n}\n// Don't show deprecations; useful under PHP 5.5\nerror_reporting(E_ALL ^ E_DEPRECATED);\n\nelse:\n    /\n     * This block will be executed if you have NO wp-config-local.php and you\n     * are NOT running on Pantheon. Insert alternate config here if necessary.\n     \n     * If you are only running on Pantheon, you can ignore this block.\n     /\n    define('DB_NAME',          'lookeydb');\n    define('DB_USER',          'root');\n    define('DB_PASSWORD',      'root');\n    define('DB_HOST',          'localhost');\n    define('DB_CHARSET',       'utf8');\n    define('DB_COLLATE',       '');\n    define('AUTH_KEY',         '!A8$YSc?e_ia9.Hk9w]g}gOEgFSl(g>OMOJQYsw(OC qg+_');\n    define('SECURE_AUTH_KEY',  '1clU0|NPgm)R:/tj|.L(ODSR$At|4s%2-=XZQGhPNC9x8.wXzW~]rz9|:lxTz(G');\n    define('LOGGED_IN_KEY',    ',.?!z(X.d<3%7Cq1b!it6i,DGd./#o-}z,*iz$}l_Z[:zD0[BM0C1O!&|%A[Li)S');\n    define('NONCE_KEY',        'Wt0MPMkK@KwN&U.gH8NrR;$#yg{u1.q9u+A9u-|?#D*=<{R{4#mf)ar!V^RfvWi');\n    define('AUTH_SALT',        '{#|Jl;J;Qsh?V571V5$Ar3 N I|9;@%56h,$Zxe.(%<]Z,sW-K)c17/mL$:trMfa');\n    define('SECURE_AUTH_SALT', '6P[m?bn<=Czi=At#{6+25ZZ{=7a(t%ZL|?4V6-M:oY:z#z&R< AT|(#uQxP3RtOF');\n    define('LOGGED_IN_SALT',   '0i|C-f8Hc;;c125!M+0|+@#]4ofI6O)(;I;KF:|}e j[OI=G6wuCjx8pJs?)7hpt');\n    define('NONCE_SALT',       'MBF=2iMrcam!SSzRkgmg.w[#_t G;%m3Ao6jWv,|SAN[8lnvFUsDmMQD7t;Z<~');\n  endif;\nendif;\n/ Standard wp-config.php stuff from here on down. /\n/\n * WordPress Database Table prefix.\n \n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n /\n$table_prefix = 'wp_';\n/\n * WordPress Localized Language, defaults to English.\n \n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n /\ndefine('WPLANG', '');\n/\n * For developers: WordPress debugging mode.\n \n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n \n * You may want to examine $_ENV['PANTHEON_ENVIRONMENT'] to set this to be\n * \"true\" in dev, but false in test and live.\n */\ndefine('WP_DEBUG', false);\n/ That's all, stop editing! Happy Pressing. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/* Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\n```\nwp-config-local.php:\n```\n<?php\n/\n * The base configurations of the WordPress.\n \n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information\n * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n \n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to \"wp-config.php\" and fill in the values.\n \n * @package WordPress\n /\n//  MySQL settings - You can get this info from your web host  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', 'lookeydb');\n/* MySQL database username /\ndefine('DB_USER', 'root');\n/* MySQL database password /\ndefine('DB_PASSWORD', 'root');\n/* MySQL hostname /\ndefine('DB_HOST', 'localhost');\n/* Database Charset to use in creating database tables. /\ndefine('DB_CHARSET', 'utf8');\n/* The Database Collate type. Don't change this if in doubt. /\ndefine('DB_COLLATE', '');\n/#@+\n * Authentication Unique Keys and Salts.\n \n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n \n * @since 2.6.0\n /\ndefine('AUTH_KEY',         '!A8$YSc?e_ia9.Hk9w]g}gOEgFSl(g>OMOJQYsw(OC qg+_');\ndefine('SECURE_AUTH_KEY',  '1clU0|NPgm)R:/tj|.L(ODSR$At|4s%2-=XZQGhPNC9x8.wXzW~]rz9|:lxTz(G');\ndefine('LOGGED_IN_KEY',    ',.?!z(X.d<3%7Cq1b!it6i,DGd./#o-}z,*iz$}l_Z[:zD0[BM0C1O!&|%A[Li)S');\ndefine('NONCE_KEY',        'Wt0MPMkK@KwN&U.gH8NrR;$#yg{u1.q9u+A9u-|?#D=<{R{4#mf)ar!V^RfvWi');\ndefine('AUTH_SALT',        '{#|Jl;J;Qsh?V571V5$Ar3 N I|9;@%56h,$Zxe.(%<]Z,sW-K)c17/mL$:trMfa');\ndefine('SECURE_AUTH_SALT', '6P[m?bn<=Czi=At#{6+25ZZ{=7a(t%ZL|?4V6-M:oY:z#z&R< AT|(#uQxP3RtOF');\ndefine('LOGGED_IN_SALT',   '0i|C-f8Hc;;c125!M+0|+@#]4ofI6O)(;I;KF:|}e j[OI=G6wuCjx8pJs?)7hpt');\ndefine('NONCE_SALT',       'MBF=2iMrcam!SSzRkgmg.w[#_t G;%m3Ao6jWv,|SAN[8lnvFUsDmMQD7t;Z<~');\n/*#@-/\n/\n * WordPress Database Table prefix.\n \n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n /\n$table_prefix  = 'wp_';\n/\n * WordPress Localized Language, defaults to English.\n \n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n /\ndefine('WPLANG', '');\n/\n * For developers: WordPress debugging mode.\n \n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n /\ndefine('WP_DEBUG', false);\n/ That's all, stop editing! Happy blogging. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/* Sets up WordPress vars and included files. /\nif ( ! defined( 'WP_CLI' ) ) require_once(ABSPATH . 'wp-settings.php');\n```\nnote the conditional on the last line... That was my workaround to make it WP-CLI work. Without the conditional, WP-CLI complains about redeclaring (Which seems to be because it didn't successfully strip out the wp-settings.php require after only looking in wp-config.php, not wp-config-local.php)\n. Thanks @danielbachhuber ! \n. ",
    "remino": "Does the production.sql file actually has a MySQL dump?\nLike I said, I tried with wp-cli-ssh and without, just using a command similar to yours. With ssh, the output file only contains \"Success: Exported to -\" with ANSI escape sequences. When logging on the server, the - file is there, with the dump in it.\n. Turns out my provider had a preinstalled version of wp-cli, version 0.7.0 alpha. I got 0.17.0 to work instead and it's all good now. Thanks!\n. ",
    "chrisschaub": "\nWe are the hosting company, but we just apply cPanel updates, the nightlies, pretty stock stuff.\nSame thing happens.\nOnly get two php notices, just bad code in a few plugins. No errors.\n. Ok, I'll look into it. But it's pretty stock cPanel which is very common. I'll try on some Ubuntu hosts.\n. \n",
    "aheckler": "\nSimilarly, if readme.html is missing, should checksum fail?\n\nPerhaps, though maybe deciding file-by-file what should and should not trigger a checksum failure is a bit of a slippery slope. I only mentioned wp-config-sample.php because the official instructions for installing WordPress endorse renaming it as a valid method for creating wp-config.php.\n\nHow did you discover this, and what impact has it had to your workflow?\n\nJust poking around the wp-cli documentation and playing around with some commands on a new site of mine. :) No impact on my workflow really, just seemed odd.\n. ",
    "richardbuff": "Thanks for the reply @szepeviktor .   I've shared this with my host and here is the response:\n\nI can confirm that it outputs the same in CGI or CLI mode;\n[playgrou@gibraltar ~]$ /usr/bin/php wp-cli.phar --info\nX-Powered-By: PHP/5.3.28\nContent-type: text/html\np?\n[playgrou@gibraltar ~]/usr/bin/php -v\nPHP 5.3.28 (cgi-fcgi) (built: Jul 3 2014 01:33:47)\nCopyright (c) 1997-2013 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2013 Zend Technologies\nwith the ionCube PHP Loader v4.6.1, Copyright (c) 2002-2014, by ionCube Ltd., and\nwith Zend Guard Loader v3.3, Copyright (c) 1998-2010, by Zend Technologies\nwith Suhosin v0.9.33, Copyright (c) 2007-2012, by SektionEins GmbH\n[playgrou@gibraltar ~]$ /usr/local/bin/php -v\nPHP 5.3.28 (cli) (built: Jul 3 2014 01:31:09) \nCopyright (c) 1997-2013 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2013 Zend Technologies\nwith the ionCube PHP Loader v4.6.1, Copyright (c) 2002-2014, by ionCube Ltd., and\nwith Zend Guard Loader v3.3, Copyright (c) 1998-2010, by Zend Technologies\nwith Suhosin v0.9.33, Copyright (c) 2007-2012, by SektionEins GmbH\n[playgrou@gibraltar ~]$ /usr/local/bin/php wp-cli.phar --info\np?\n[playgrou@gibraltar ~]$ /usr/bin/php-cli wp-cli.phar --info\np?\n\nAny further ideas on what could be wrong?\n. Hi @szepeviktor, thanks again for your continued help.  Here are the results:\nChecksum:  the values are identical.\n[playgrou@gibraltar public_html]$ /usr/bin/php-cli test.php\nThis is php file test.\n[playgrou@gibraltar public_html]$ ./test.php\n./test.php: line 1: ?php: No such file or directory\n./test.php: line 2: print: command not found\n. My webhost and I appear to have resolved the issue by adding 'detect_unicode = Off' to php.ini.  \nI got the idea to try this for wp-cli when trying to install Composer and it gave me an error warning me that I should do exactly that in order for Composer to work.  \nMaybe it would be worth it to add a check for  Suhosin and 'detect_unicode = Off' into wp-cli to help people in the future (and lessen the number of Github issues)?   Composer warns about both issues when attempting to retrieve the installer.\n. Ah, I will know next time to do that myself, sorry I had overlooked that the docs were available in their own repo. ",
    "bradt": "Should I be able to only define [--no-delete] or [--no-whatever] in the command header and not get an unknown parameter error?\n. Fair enough.\n. ",
    "tedsecretsource": "I know this is kind of old but I'm not finding answers elsewhere. Does the above mean that if you have a taxonomy called \"people\" you can do wp post list --people=fred or would it be more like --tax_query=people=fred?\nThanks in advance.. ",
    "iamnewton": "@danielbachhuber yeah, installing xCode Command Line Tools fixed it.\n. ",
    "Lewiscowles1986": "I just came to see any issues and it looks like there is a commit from @joshbetz in 2014 on this; looks like it's from the wp-cli repo so is --force now a flag, is --skip-update now dead, or are both in existence?\n. for me this was because 4.6 update failed part way through (unknown why as it did not error out), and that led to version.php missing. \n- Updated my wp-cli\n- Downloaded the WP 4.6\n- unpacked everything apart from wp-content over my existing WP install\n- cleared opcache 'just-in-case'\nThen everything worked. Like most things WordPress-y, determination and focusing on honing process have a lot to offer\n. NP :wink: it's always awesome to have a quick-fix\n. What would be the situation for a WordPress install if the prefix was unknown though?\nSHOW TABLES LIKE '%posts' could return a post table (if there are more than one, logic would have to be that it's multi-site or multiple installs). You can dig deeper from that point I suppose.\nI'd be more worried you can't easily load wp-config.php and settings without it calling in wp-settings.php. Assuming you do load, won't it attempt to load options from the DB (which would crash if WP doesn't know the prefix right?)\nhttps://dev.mysql.com/doc/refman/5.7/en/show-tables.html. Then the details to connect are present and the command should yield results in a database with a posts table right? \nThe problem would be if there were multiple installs of wp (more than two rows), you'd essentially have to short-circuit out or guess (I'd lean more toward short-circuiting out). \nAlso if wp-config.php can be loaded without executing wp-settings.php, the site it's loaded from shouldn't work without a prefix (or should be in perpetual setup mode), right?\nIs this more for people that are DB switching inside of wp-config.php based upon URL or other SAPI provided value? I'd like to know more about the problem and the situations that can lead to not being able to read a prefix.. ",
    "ernilambar": "I got similar output when I upgraded from 4.5.3 to 4.6. I ignored it thinking some language update issue. Hindi language was activated in my system. May be it appears in update in language other than default English.\n. Steps to reproduce.\n- Install WP 4.5.3\n- Install and activate hi_IN language\n- Update to 4.6.\n- After update:\nUpdating to version 4.6 (hi_IN)...\nhttps://downloads.wordpress.org/release/hi_IN/wordpress-4.6.zip \u0938\u0947 \u0905\u092a\u0921\u0947\u091f \u0921\u093e\u0909\u0928\u0932\u094b\u0921 \u0915\u0930 \u0930\u0939\u0947 \u0939\u0948\u0902...\n\u0905\u092a\u0921\u0947\u091f \u0905\u0928\u092a\u0948\u0915\u093f\u0902\u0917...\n<p>\u0905\u092a\u0928\u0947 \u0905\u0928\u0941\u0935\u093e\u0926 \u0915\u0941\u091b \u0905\u092a\u0921\u0947\u091f \u0915\u0940 \u091c\u0930\u0942\u0930\u0924 \u0939\u0948\u0964 \u0939\u092e \u0915\u0947 \u0930\u0942\u092a \u092e\u0947\u0902 \u0905\u091a\u094d\u091b\u0940 \u0924\u0930\u0939 \u0938\u0947 \u0909\u0928\u094d\u0939\u0947\u0902 \u0905\u0926\u094d\u092f\u0924\u0928 , \u091c\u092c\u0915\u093f \u0915\u0941\u091b \u0914\u0930 \u0938\u0947\u0915\u0902\u0921 \u0915\u0947 \u0932\u093f\u090f \u0924\u0902\u0917 \u092c\u0948\u0920\u094b\u0964</p>\n<div class=\"update-messages lp-show-latest\"><h2>Date Today Nepali (hi_IN)&#8230; \u0915\u0947 \u0932\u093f\u090f \u0905\u0928\u0941\u0935\u093e\u0926 \u0915\u093e \u0905\u0926\u094d\u092f\u0924\u0928 \u0915\u093f\u092f\u093e \u091c\u093e \u0930\u0939\u093e \u0939\u0948\u0964</h2><p><span class=\"code\">https://downloads.wordpress.org/translation/plugin/date-today-nepali/2.2/hi_IN.zip</span>&#8230; \u0938\u0947 \u0905\u0928\u0941\u0935\u093e\u0926 \u0921\u093e\u0909\u0928\u0932\u094b\u0921 \u0915\u093f\u092f\u093e \u091c\u093e \u0930\u0939\u093e</p>\n<p>\u0905\u092a\u0921\u0947\u091f \u0905\u0928\u092a\u0948\u0915\u093f\u0902\u0917&#8230;</p>\n<p>\u0928\u0935\u0940\u0928\u0924\u092e \u0938\u0902\u0938\u094d\u0915\u0930\u0923 \u0938\u094d\u0925\u093e\u092a\u093f\u0924(\u0907\u0928\u094d\u0938\u091f\u0949\u0932) \u0915\u0930 \u0930\u0939\u0947 \u0939\u0948\u0902&#8230;</p>\n<p>\u0905\u0928\u0941\u0935\u093e\u0926 \u0938\u092b\u0932\u0924\u093e\u092a\u0942\u0930\u094d\u0935\u0915 \u0905\u092a\u0921\u0947\u091f \u0915\u093f\u092f\u093e \u0917\u092f\u093e.</p>\n</div><script type=\"text/javascript\">\n                    (function( wp ) {\n                        if ( wp && wp.updates.decrementCount ) {\n                            wp.updates.decrementCount( \"translation\" );\n                        }\n                    })( window.wp );\n                </script>Cleaning up files...\nNo files found that need cleaned up.\nSuccess: WordPress updated successfully.\n. Ahh, I had tested in existing WordPress setup. But now I checked again and there is no such output. I am not sure what happening actually :grin: \n. I saw such output once. I tried but could not specifically reproduce it again. \n. However, not all of the Query classes support querying by *__in and persisting the order. In particular, WP_Comment_Query only added support in WP 4.1\nRe term: In get_terms(), include as value for orderby was introduced in 4.1.\n. Update: include and orderby has some bug. Fixed in 4.7 https://core.trac.wordpress.org/ticket/37904\n. What did I do wrong here? I just changed the spacing around parenthesis as per WordPress Coding Standard.\n. @danielbachhuber is there any quick hack for this until full feature is merged?\n. Ok, I will try. But I am quite new at Behat. I found test cases regarding comment in comment.feature.  Can you suggest me how can I get two digit comment ID in this case? When we do wp create comment comment ID is generated automatically and it starts with 1 in a scenario, I guess. Loop till 10 times? :D \n. Finally test is passed :D \n. > Have you actually run into a problem with this?\nTechnically its not a problem. May be its just my bug bite from Theme Review. :D When I see function in a theme not prefixed with theme slug, it hurts. Just a standard, not critical issue.\n\nDon't we already have a --theme_name argument?\n\nYes, but when that parameter is not passed, theme name is generated automatically. Its just issue of making our command more intelligent I guess.\n\nSure, more tests are always welcome :)\n\nI will try my hand in more testing. :)\n. See PR https://github.com/wp-cli/wp-cli/pull/2734\n. I checked Travis report. Though build is failed, I am not guilty here :D \n. Gist of updated list of command examples. https://gist.github.com/ernilambar/298920de65d88b65981f42341810cd9f\nCurrent status: \nCompleted: 104\nRemaining: 169\n. Current status:\nCompleted: 226\nRemaining: 47\n. When there is error, I have displayed same error send from WP. What do you say about this? Do you suggest custom error message? If PR is good then I will add some tests scenario.\n. wp transient get sample_key --format=json also gives same error.\n. Ah. I checked with incorrect SQL command and it displayed error. Should we assume success if no message displayed in the command run? Or adding success message would be any beneficial?\n. I have removed following existing example for now. It is giving error.\nwp export --post__in=$(wp post list --post_type=post --orderby=rand --posts_per_page=8 --format=ids)\nOutput:\nError: Too many positional arguments: 1016 1 1149 1031 1176 568 1171\n. See #2831 \n. I have few queries regarding new syntax of default.\n- How could I change Set the database collation. Default: '' to new syntax?\n- For date field like this?\n  [--post_date=<yyyy-mm-dd>]\n  : The date of the generated posts. Default: current date\n- For this type of parameter?\n  [--post_author=<login>]\n  : The author of the generated posts. Default: none\nnone is not the exact value going to pass here. NULL or empty string will be used I believe.\n. Apart from few instances which we ignored after discussion, I would say this ticket can be closed. When we are at new decision for those undecided format, we can create new ticket fot those.\n. First pass completed. Closing ticket now. If any new issue found then we can deal in new tickets.\n. @danielbachhuber Should not this be in our next milestone? This error comes in almost every listing commands.\n. @danielbachhuber Can you please check the build result? What did I do wrong :-) \nhttps://travis-ci.org/wp-cli/wp-cli/jobs/133088641#L295\n. @danielbachhuber I have fixed the test. I had used two STDOUT variables {TERM_ID_1} and {TERM_ID_2}. But somehow `{TERM_ID_2} was not being replaced with the term ID. So that was giving WP_Error.\n. Few examples are collected. It will be helpful may be. https://gist.github.com/ernilambar/7ffddef287004ee16f224685253625b6\n. @diggy You need to update test scenario also to reflect changes. See error message https://travis-ci.org/wp-cli/wp-cli/jobs/134097322#L296 \n. @danielbachhuber can you please run travis test for this PR?\n. @danielbachhuber how do you suggest to keep example of package browse. Its very big table. \n. #2897 is also incorporated in this PR. \n. I believe adding --version would good enhancement. Say I am at 0.23.0. Currently it is not possible to go to version 0.22.0. Or is it possible? I have no detail idea :)\n. @danielbachhuber anything I need to do in this PR?\n. Seems to be core issue, rather than CLI issue. https://core.trac.wordpress.org/ticket/36615\n. Interesting and it is valid use case. But this is not limited to user get only. Example wp post get only accepts numeric ID. And similar to other several commands.\nMay be we can introduce new --type parameter where it will be like ID or email or user_login or term based on command type. If there is no --type parameter it will work as it is currently working.\n. @danielbachhuber Like in Git clone command git clone <repository> [<directory>], we have option of directory to which folder we want to clone. Can we add some similar parameter in the command? Then it wont be Github specific and works for any Git URLs.\n. @danielbachhuber I will try to create patch. But want to ask one question. What should we do if - is passed as file and also there is --porcelain? Which will have higher priority?\n. AFAIK, database should already exist for db import. And it should be as per DB_NAME in wp-config.php.\nIt does not empty database. It just executes queries those are in the sql file.\n. @danielbachhuber May be we can close this now.\n. In Regenerate thumbnails, file names are wrapped by double apostrophe.\n\"cropped-triforce-wallpaper.jpg\" (ID 1700) was successfully resized in 0.369 seconds.\n\"spectacles\" (ID 1692) was successfully resized in 0.164 seconds.\nIn Apache errors, filenames are wrapped with small brackets.\ndescription: The requested resource (/MyApp/init) is not available.\nWindows generates errors like this.\nCan't rename \"Pictures\" because a file or folder with name already exists.\nSome app uses error messages like this.\nCannot create file C:\\WINDOWS\\system32\\shell32.dll.\nhttp://prntscr.com/bi5q05\nArchive app.\nUnable to expand \"scip-3.2.0.tgz\" into \"Desktop\".\nhttp://prntscr.com/bi5rfm\nSo, generally in success/error messages, filenames and folder names are wrapped with some character. We could also use something like that. May be \" or '.\n. @danielbachhuber for confirmation, which are we going to use \" or '? This applies to both filename and folder name, right?\n. I tried to merge conflict and fix issues. Is this right approach for fixing merge conflict? If not, I will create new PR.\n. I have jotted down some points regarding examples.  It could be helpful. https://gist.github.com/ernilambar/7543adac4a50dcc84080cb340bbf1875\n. I have added few points regarding command messages. https://gist.github.com/ernilambar/7543adac4a50dcc84080cb340bbf1875#successerror-messages\n. May or may not be related. If post title has Unicode characters, then table format is distorted.\n\n. I checked Unicode with latest master branch. Its similar as before.\n\n. That PR fixed the Chinese. But Nepali unicode is same. It seems good for Arabic letters also. I have no idea how that calculation is done in Devnagari(Nepali, Hindi and similar) letters.\n\n. To fetch all posts from 2015, command should be similar to\nwp post list --post_type=post --format=ids --year=2015\nCurrently query parameters are directly merged with default and passed to the WP_Query call. https://github.com/wp-cli/wp-cli/blob/master/php/commands/post.php#L351 I doubt such type of query is currently possible. May be we can introduce some kind of mechanism where list command accepts multi level query parameters.\nwp post list --post_type=post --format=ids --date_query='{\"before\":{\"year\":\"2015\"}}'\nJust one noob idea :D \nThen we can support meta_query and tax_query in similar way.\nOr will this be too much for a single command? \n. Above command worked when used like this.\nwp export --category=sample-category --post_type=post\nDoes --post_type always need to be there?\n. Ohh, my bad. I got this crazy idea from And save STDOUT 'Writing to file %s' as {EXPORT_FILE} in test. I wrapped filename like this \"Writing to file '%s'.\" in the command message. I was looking for a way to get exact file name. When wrapped, value of EXPORT_FILE came like this '/tmp/filename.xml', expected /tmp/filename.xml. I will try out if other method is possible.\n. > PHP Parse error: syntax error, unexpected '_' (T_STRING) in phar:///david-favor/tools/wp-cli.phar/php/WP_CLI/Runner.php(871) : eval()'d code on line 95\nThere seems to be some PHP error in wp-config.php file. Can you please post content of wp-config.php? Please remove your password before posting.\n. This idea comes from my helper tool which I frequently use in the development process.\n1. One is reset all sidebars at once.\n2. Add widget ( say Text widget ) to every registered sidebars. Widget title be like Test widget: %d. %d replaced by sidebar ID. This helps a lot in theme development.\n. @danielbachhuber I also felt that when I had to copy functions from Widget command. I even had this crazy idea of using launch_self for some tasks, but on searching I could only found two places where it is used now. So, I assumed it is best to avoid in core commands.\nSince this is basically related to sidebar, I tried to keep it under sidebar command. Adding it under widget is also one approach I guess.\nwp widget reset\nAre we up for this?\n1. wp widget reset sidebar-1\n2. wp widget reset sidebar-1 sidebar-2\n3. wp widget reset --all\n4. wp widget reset [This should also throw error I believe. Like we do in plugin update - Error: Please specify one or more plugins, or use --all. ]\n5. wp widget reset wp_inactive_widgets [Should throw error.]\nRe 5: There is button Clean Inactive Widgets in the /wp-admin/widgets.php. This functionality could be incorporated for command in 5. Or may be we should implement separately creating separate ticket?\n. @danielbachhuber build error seems due to tochange in comment in trunk. Should I restart the build?\n. Finally All checks have passed. :smile: \n. Personally, ids should not be necessarily numeric ID. It could be unique key for the object which could be used to manipulate data.\nExample: in sidebar list, output will be like sidebar-1 footer-1 footer-2.\nAnother example:\nwp widget list sidebar-1 --format=ids\nSample output:\nsearch-2 recent-posts-2 recent-comments-2\nSo, may be we need to fix error by adding support rather than removing support. :smile: \n. > So the location?\nIn this case, yes.\n. @apertureless Will you be available to create new PR for this? \nCommand:\nwp menu location list --format=ids.\nOutput would be similar to primary footer social. \nlocation values separated by a space. \n. I was expecting some error with these changes but it passed in my local setup. May be we need to improve test more regarding site command.\n. Yes, we can get similar with this command.\nwp site list --field=blog_id\nOutput:\n1\n2\n3\nWe can live with that as output is similar. And it can be fed to xargs with \\n separator. But for parity also we could add it.\nAdding this will make this type of command more breeze. \nwp site archive $(wp site list --format=ids)\nOtherwise we would have to like this:\nwp site list --field=blog_id | xargs -0 -d '\\n' -I % wp site archive %\nwhich seems pretty daunting.\nJust my 2 cents :smile: \n. Tested upto parameter is going to be deprecated after new release of Plugins Directory. After that, it can be managed from the admin panel.\nhttp://prnt.sc/bnbw06\n. May be we should wait until new Plugins directory is live. Lets keep as it is for now.\n. Should I do something special to accept override from config.yml in post list?\nWhen doc is changed like this:\n`\n- [--format=]\n- : Render output in a particular format.\n\n\ndefault: table\noptions:\n\n\ntable\n\n\n\n\ncsv\n\n\n\n\nids\n\n\n\n\njson\n\n\n\n\ncount\n\n\n\n\nyaml\n\n\n\n\n`\nsetting in config.yml\npost list:\n  format: count\nis ignored.\n. @danielbachhuber  https://github.com/wp-cli/wp-cli/pull/3111 is not related to this issue, I believe.\n. ToDos\n- [x] search-replace in dry run mode\n- [x] widget delete\n- [x] widget deactivate\n- [x] theme mod remove\n- [x] menu item delete\n- [x] menu delete\n. Closing ticket. :smile: \n. It would be great if we target this for 0.24.0.\n. I will try to prepare PR this weekend.\n. I guess it is not good practice to use sudo with wp command. That is explained in the command output also.\nIs anyone else also facing this issue? If not may be there is something wrong in my Ubuntu setup. I am not sure.\n. You can use custom hook to commands. See docs https://wp-cli.org/docs/internal-api/wp-cli-add-hook/\n You can check this example for reference. https://runcommand.io/to/wp-site-empty-custom-database-tables/\n. Is this related to WP-CLI? It seems you are asking in general.\n. @Nikschavan thanks for the PR. I was really looking forward for Gitlab implementation. :smile:\n. I can reproduce this. But I am also not sure this is expected behavior or not.\nEdit:\nI checked code and found that cron events are fetched from this function. https://github.com/wp-cli/wp-cli/blob/master/php/commands/cron.php#L372\nEvents lists are saved in array. Duplicated events will also have same event ID so, it is overridden in the array and only one is remained.\n. I am closing this PR for now. May be this is above my brain. If I am able to resolve it then I will submit new PR.\n. Is there specific I need to do for WP 3.7? https://travis-ci.org/wp-cli/wp-cli/jobs/145729518#L304\nI had assumed $hook-$sig-$time will give unique array key. I am not sure.\n. No, I generally test with latest trunk in local. May be I need to setup WP 3.7 also.\n. @danielbachhuber I tried PR in WP 3.7 and its working as expected in local environment. Any idea what could be the cause of failed build?\n. I tried the PR in WP 3.7. Output is as expected. http://prntscr.com/bvr7z0\nI dumped value from get_cron_events() function and all events are returned in array.\n. @mbtamuli no need to assign ticket. You can simply submit PR. It will be merged after review.\n. I will try to prepare PR.\n. Current locale info would be nice. But I believe wp core version --extra is not best place to put that information because we are displaying only version info there. \nI would not mind if we could introduce wp core info for basic information of the current WP system.\n. After 4 new PR are merged, I believe we are good.\n. I intentionally used Related so that issue will not close automatically. @danielbachhuber will have to add labels and milestone there.\n. Can you please try wp --allow-root core is-installed --path=/app/wordpress/ without wrapping path value?\n. wp core is-installed does not display value. It return exit status. Try wp --allow-root core version --path=/app/wordpress/ to check if its working. \nSee example here: https://wp-cli.org/commands/core/is-installed/\n. $ wp core version\n4.6-RC1-38238\n$ wp core update --version=nightly\nSuccess: WordPress is up to date.\nThen I downloaded zip from https://wordpress.org/nightly-builds/wordpress-latest.zip and checked version.php. It is $wp_version = '4.7-alpha-38242';\n. I believe wp core update should take WP install to valid available version, whether it is stable release or nightly release.\n. I tried this PR. In Terminal, I got expected output. But in Behat test, table output is not there, only Success: Database checked..\n. Test for user session destroy. It may be helpful. :) https://gist.github.com/ernilambar/63a7e985f328d2171a799b182088fbdd\n. @gothmog123 Can you please post output of wp --info?\n. You are using 0.23.1 version. To make compatible with WP 4.6, please update WP-CLI to 0.24.1.\n. Are you using 0.24.1 version of WP-CLI? If not, please upgrade.\n. Can you please post output of wp --info?\n. You are using 0.23.1. Please upgrade to WP-CLI 0.24.1.\n. Screenshot http://prnt.sc/ccu25c\n. This should be fixed in other repo. https://github.com/wp-cli/wp-cli.github.com/blob/master/docs/common-issues/index.md\nWanna submit PR?\n. wp option update _cbc_yt_api_key '{\"key\":\"keyvalue\",\"valid\":true}' --format=json --debug\nOutput:\nSuccess: Updated '_cbc_yt_api_key' option.\nIts working as expected in my side.\n. Github issues are no longer an appropriate venue for support. Please review http://wp-cli.org/#support\n. Can you please post output of wp --info?\n. > \"Installing package\" would be more helpful if we actually indicated the package being installed.\nAre you referring this in Installing markri/wp-sec (dev-master)?\n. Multiple plugins can be updated like this wp plugin update plugin1 plugin2\n. You can also try wp plugin update --all. This will update all plugins.\n. This seems to be a bug. I also can reproduce this.\n. - Make some PHP fatal error in activated theme\n- Try this command wp db query \"CHECK TABLE $(wp db tables | paste -s -d',');\" --skip-themes\n. Transients are just a small part of options table. There is currently --search where it add LIKE in the query. May be we could add other parameter which would use NOT LIKE. It would be good enhancement to the command I believe.  Just my 0.02 dollar :)\n. Personally I am opposite to adding such specific filter parameter. I believe, in core, we should be adding base achieve such feature. So that user can easily achieve other filter parameters like --widgets/--no-widgets or --theme-mods/--no-theme-mods or similar.\n. I meant here. https://github.com/wp-cli/wp-cli/blob/master/php/commands/media.php#L11\nWe have added progress indicator before each message.\n. Its missing in some places. I will prepare PR by next few days.\n. \u0928\u0947\u092a\u093e\u0932\u0940 translation -  https://github.com/wp-cli/wp-cli.github.com/pull/231\n. Ok sure. I will list those down.\n. This is the list of new packages added since July 27. https://gist.github.com/ernilambar/e2abfa37eef2e732e171c20fdebd977b\n. What if we build a theme ourself rather than depending upon other. Doing this will get us full control over it. . I tried to reproduce the error but could not. It is working as expected.\nwp option update my_opt_one iamold@gmail.com\nwp option update my_opt_two iamold@gmail.com\nwp post meta update 1 my_post_meta iamold@gmail.com\nwp search-replace 'iamold@gmail.com' 'iamnew@gmail.com'\nSuccess: Made 3 replacements.\nI tested with v1.0.0 and also with latest master branch.\n. I believe this is expected behaviour. --version is not global parameter. It is only available in few sub-commands of core command.\nTry wp help core download. I dont think this is currently available, but this would be a great CLI package. It would be very handy for site migration.. Yes. Latest version should have been downloaded.\nCurrently it is downloading,\nDownloading translation from https://downloads.wordpress.org/translation/core/4.4.2/cs_CZ.zip.... I assumed that command will return total number of approved comments. :) Sorry for my silly mistake.\n. @danielbachhuber What name would you suggest? list?\n. I don't have any better idea, honestly. Three keywords are there. If we keep available options for that, we would have 6 combination from those three keywords.\n. When wp widget reset --all and there is no any registered sidebar in the theme.\n. $this->docparser->get_arg_desc( $spec_arg['name'] ); should return argument description, no?\n. To make array key unique. I dont think it is used anywhere else.\n. @danielbachhuber Ideally we should. I digged down re term query. Only after 4.1 'orderby'=>'include' was introduced in get_terms(). I am not sure what is the best path here. But personally I think, anything we are planning to deprecate, we should do it before 1.0.0 or even earlier.\n. Trailing slash could be removed from this example also.\n. There was two full stops in the end. https://github.com/wp-cli/wp-cli/blob/master/php/commands/media.php#L46\n. ",
    "tmuka": "I came here to ask about this too. It would be nice if there was a way. Thanks!\nedit: or maybe make an option similar to \"--dry-run\" for \"--precache_downloads\".\n. i ran into this issue today too. eg.\nwp search-replace 'src=\"http://some.dev' ' src=\"http://some.livedomain.com'\n. The other thing that worked for me in combination with sudo without -E, was to define WP_CLI_CACHE_DIR in /root/.bashrc. I noticed this referenced on the blog, wanted to pop by with a warning to be careful since the one-liner will happily delete the required parent theme of a wp child theme.\nOn my servers I use something like this to whitelist a few themes I know are parent themes.\nsudo wp --allow-root theme list --status=inactive --enabled=no --field=name | egrep -v \"(twentyfifteen|genesis|business|thematic|twentytwelve)\" | xargs -0 -d\"\\n\" wp --allow-root theme delete\nA better way would be to first list the active theme, then grep it's style.css file for \"Template:\"  which would indicate it's a child theme. i didn't have a one liner for this, but i might try to come up with one using something like this to return the active theme's parent.\ngrep \"Template:\" $(find . -name $(wp --allow-root theme list --status=active --field=name))/style.css | cut -d: -f2 | xargs\nmaybe it'd be cleaner to make the parent of an active theme return a status that isn't \"inactive\"...\n. yeah, i like that.\n. You probably already know how this works, but get_template_directory will return the active parent, might be useful inside is_active_theme() in place of get_stylesheet_directory(),  or perhaps in a different fn that gets called with that in theme->get_status().\nthanks for the awesome work here!\nmaybe something like...\ndiff --git a/php/commands/theme.php b/php/commands/theme.php\nindex c387928..30d9a67 100644\n--- a/php/commands/theme.php\n+++ b/php/commands/theme.php\n@@ -107,6 +107,9 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade {\n        }\nprotected function get_status( $theme ) {\n-               if($this->is_parent_theme( $theme ) ){\n-                       return 'parent';\n-               }\n              return ( $this->is_active_theme( $theme ) ) ? 'active' : 'inactive';\n      }\n@@ -238,6 +241,9 @@ class Theme_Command extends \\WP_CLI\\CommandWithUpgrade {\n        private function is_active_theme( $theme ) {\n                return $theme->get_stylesheet_directory() == get_stylesheet_directory();\n        }\n-       private function is_parent_theme( $theme ) {\n-               return $theme->get_template_directory() == get_template_directory();\n- ```\n    }\n/**\n   * Get the path to a theme or to the theme directory.\n  ```\n. rock on!\n. Thanks for adding the theme \"parent\" status!\nI noticed some php \"notices\" probably related to this code... hopefully this is helpful, if not, feel free to ignore it :)\nthanks!\n```\n wps theme status\n11 installed themes:\n  I default          1.7.2\nNotice: Undefined index: parent in phar:///usr/local/bin/wp/php/WP_CLI/CommandWithUpgrade.php on line 381\nNotice: Undefined index: parent in phar:///usr/local/bin/wp/php/WP_CLI/CommandWithUpgrade.php on line 370\n   flatonpro        1.4.9\n  A my-child-theme 1.0.0\n  I twentyfifteen    1.4\n  I twentyfourteen   1.6\n  I twentyten        2.1\n  I twentythirteen   1.7\n  I twentytwelve     1.9\n  I vantage          1.4.4\nNotice: Undefined index: parent in phar:///usr/local/bin/wp/php/WP_CLI/CommandWithUpgrade.php on line 381\nNotice: Undefined index: parent in phar:///usr/local/bin/wp/php/WP_CLI/CommandWithUpgrade.php on line 109\nNotice: Undefined index: parent in phar:///usr/local/bin/wp/php/WP_CLI/CommandWithUpgrade.php on line 110\nLegend: I = Inactive,  = , A = Active\nwps cli version\nWP-CLI 0.22.0\n```\n. you rock!\n. > > So what I would like to do is not possible with wp-cli but is possible with wp-rest-cli?\n\nYes:\nwp rest post list --after=\"2014-12-31T23:59:59\" --before=\"2016-01-01T00:00:00\"\n\njust to save other people seeing this solution time,  wp rest post list is only capable of returning 100 post results at a time... it was more efficient for me to run wp post list --year queries for each year's worth of posts i needed to modify. . this permissions issue happens to me whenever i run a wp-cli command as root.  eg wp-cli --allow-root option get blogname.  For whatever reason, even after i fix the wflogs/config.php file permissions they get overwritten every time i use wp-cli as root.  It'd be nice if that config wasn't overwritten every time.   Perhaps Wordfence should create the wflogs directory with g+s permissions or something?. ",
    "miya0001": "Done. Thanks! :)\n. duplicate with #1828 \n. Thanks. :smile: \n\nCan you have this test for the entire line?\n\nYou mean that you want it to be like this?\nhttps://github.com/miya0001/wp-cli/commit/95f8b30fd45433fb82738323a6393da378f5cd83\n. Oh I've merged #1827 by mistake.\nBut it is problem with same command.\nI want to close #1827. Is it OK?\n. Please try.\nhttps://github.com/wp-cli/wp-cli/pull/1827/files\n. There is unnecessary includes when I ran install-wp-tests.sh with no environment variables.\n++ ls -A /tmp/wordpress-tests-lib/includes\nls: /tmp/wordpress-tests-lib/includes: No such file or directory\n+ '[' '!' '' ']'\n+ INCLUDES_DIR=/tmp/wordpress-tests-lib/includes/includes/\n+ mkdir -p /tmp/wordpress-tests-lib/includes/includes/\nSo includes should be removed from line 14.\n``` diff\ndiff --git a/templates/install-wp-tests.sh b/templates/install-wp-tests.sh\nindex 8f5b5de..9699f4f 100644\n--- a/templates/install-wp-tests.sh\n+++ b/templates/install-wp-tests.sh\n@@ -11,7 +11,7 @@ DB_PASS=$3\n DB_HOST=${4-localhost}\n WP_VERSION=${5-latest}\n-WP_TESTS_DIR=${WP_TESTS_DIR-/tmp/wordpress-tests-lib/includes}\n+WP_TESTS_DIR=${WP_TESTS_DIR-/tmp/wordpress-tests-lib}\n WP_CORE_DIR=${WP_CORE_DIR-/tmp/wordpress/}\nset -ex\n```\n. Anyway, It should remove following database and directory before running tests on local machine.\n- Database\n  - wordpress_custom_plugin_test_1\n  - wordpress_custom_plugin_test_2\n- Directory\n  - /tmp/wordpress\n  - /tmp/wordpress-2\n  - /tmp/wordpress-tests-lib\n  - /tmp/wordpress-tests-lib-2\nBut I couldn't found out for doing it. :smile: \n. Yes, but I couldn't find solution. Do you have any hints for me?\n. I want to remove dummy database for phpunit after behat.\n. I found it.\nhttps://github.com/miya0001/wp-cli/blob/master/features/bootstrap/FeatureContext.php#L183-L186\nI am thinking adding here. :smile: \n. OK, I'll try. Thanks!\n. > I'm not sure why .editorconfig should be added for wp scaffold plugin-tests and wp scaffold package-tests\nAh, certainly... :sweat: \nFixed.\n. > Can you move this into the create_files() call above?\nDone! :smile: \n. I will make time and challenge to fix it. \ud83d\ude04 \n. Roger that. \ud83d\udc4d \n. \ud83c\udf7b  #2759 \n. I came up with an idea.\nRun ssh server and connect itself on travis like following.\nSorry I haven't tried yet... \ud83d\ude04 \nci/setup_ssh_server.sh\n```\n!/bin/sh\nsudo apt-get update -qq\nsudo apt-get install -qq libssh2-1-dev openssh-client openssh-server\nsudo start ssh\nssh-keygen -t rsa -f ~/.ssh/id_rsa -N \"\" -q\ncat ~/.ssh/id_rsa.pub >>~/.ssh/authorized_keys\nssh-keyscan -t rsa localhost >>~/.ssh/known_hosts\nexport SSH_PRIVATE_KEY=\"$HOME/.ssh/id_rsa\"\nexport SSH_PUBLIC_KEY=\"$HOME/.ssh/id_rsa.pub\"\n```\n.travis.yaml\n```\nlanguage: php\nphp:\n  - 5.3\n  - 5.4\n  - 5.5\nbefore_script:\n  - sh ./ci/setup_ssh_server.sh\n  - ./ci/prepare.sh\nscript: ./ci/test.sh\n```\n. @danielbachhuber \nI thought that people might want to see error for this command.\nHow do you like that?\nFollowing is example of error.\n$ wp core verify-checksums --locale=ja\nWarning: File doesn't verify against checksum: wp-includes/version.php\nWarning: File doesn't verify against checksum: readme.html\nWarning: File doesn't verify against checksum: wp-config-sample.php\nError: WordPress install doesn't verify against checksums.\n. Will localized homepages have their own repository?\nFor example:\n- URL: ja.wp-cli.org\n- Repo: https://github.com/wp-cli/ja-wp-cli.org\nI feel it will be easy for people who isn't a programmer, so they can translate just clicking the edit button on the GitHub. :)\nI can say to everybody \"hey Japanese people! I want to translate it! Help me!\". \ud83d\ude04 \nBut tracking changes of the original documentation will seem to be difficult.\n. I found the translation guide of the ghost.\nhttp://docs.ghost.org/translations/\n. > let's just focus on making the homepage available in a few different languages.\nThanks, I felt that the way of the Ghost project is simple.\nI will try to translate using their approach after a couple of days. \ud83d\ude04 \n. I'll send a PR to provide translations today.\nThat will include,\n- Menu for translations\n- Translation example\n- Readme of the workflow to translate\n. I've sent PR.\nHow does everybody feel about it?\nhttps://github.com/wp-cli/wp-cli.github.com/pull/162\n. @danielbachhuber OK, I will move them into php/WP_CLI/CommandWithMeta.php. \ud83d\ude04 \n. > The examples are going to be inaccurate when rendered for posts, terms, and users. Thoughts on how we could make them somewhat more abstracted?\nOh ...\nGive me this week.  I want to look for a solution. \ud83d\ude0e \n. I finished Japanese translation.\nAnyway, can you tag like v0.24.1 on wp-cli.github.com repository too when new version is released.\nWe can know the diff with like following url.\nhttps://github.com/wp-cli/wp-cli.github.com/compare/v0.24.1...master\nI am thinking that I write the tag into commit message when I translate it, so I can track where should I translate.\nThanks!\n. @danielbachhuber \nI moved some tests for bash completion from features/flags.feature to features/cli-bash-completion.feature.\nAnd update tests like following, because space at the end of the line will be removed by .editorconfig.\nhttps://github.com/wp-cli/wp-cli/blob/master/.editorconfig#L13\nBefore:\nThen STDOUT should be:\n      \"\"\"\n      eval \n      eval-file \n      \"\"\"\nAfter:\nThen STDOUT should contain:\n      \"\"\"\n      eval\n      \"\"\"\n    And STDOUT should contain:\n      \"\"\"\n      eval-file\n      \"\"\"\n. Does SSH alias mean .ssh/config?\nSSH alias is only in .ssh/config and sometimes I don't want to add aliases to there for vagrant machines.\nThis PR allows us to place ssh aliases in the working directory.\n. OK, thanks \ud83d\ude04 \n. Some people in the theme review team are trying to develop automated theme review.\nWe talked about the same idea at theme review team meeting a few weeks ago. \ud83d\ude04 \nThanks!\n. The default value of $WP_CLI_BIN_DIR looks empty.\nhttps://github.com/wp-cli/wp-cli/blob/master/ci/prepare.sh#L22\nI ran export WP_CLI_BIN_DIR=/tmp/wp-cli-phar everytime. \ud83d\ude13 \n. Following is the same as it.\nhttps://github.com/wp-cli/scaffold-package-command/blob/master/bin/install-package-tests.sh#L18\nShould they need default value?\n. ? I tried again so it worked fine...\nMaybe I made mistake.. We had the same problem today.\nWe could solve the problem after running the following command.\n$ wp option delete core_updater.lock\nHowever, I do not know it was a safety or not.... Did it!. The second commit allows us to run wp scaffold plugin-tests ../...\nSo I updated to reject . and /.. Finally, I found same problems on wp scaffold plugin, wp scaffold child_theme and wp scaffold _s.\nThey will be fixed.. Additional note:\n\nI want to allow a slug like example.com, because I sometimes use the domain name for my client work.\nIt allows us to be only in wp-content/plugins or wp-content/themes if --dir option isn't used.\nTo use . and .. for slug will always be rejected.. HAHAHA, I'm very happy. All my work for it had been done!  \ud83d\ude04 . My ruleset is following.\n\n```\n<?xml version=\"1.0\"?>\n\n See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml \n See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/develop/WordPress-Core/ruleset.xml \n<!-- Set a description for this ruleset. -->\n<description>A custom set of code standard rules to check for WP-CLI</description>\n\n<exclude-pattern>vendor/*</exclude-pattern>\n<exclude-pattern>codesniffer/*</exclude-pattern>\n<exclude-pattern>PHP_Codesniffer-VariableAnalysis/*</exclude-pattern>\n\n<!-- Include the WordPress ruleset, with exclusions. -->\n<rule ref=\"WordPress\">\n    <exclude name=\"Squiz.Commenting.FunctionComment.Missing\" />\n    <exclude name=\"Squiz.Commenting.ClassComment.Missing\" />\n    <exclude name=\"Squiz.Commenting.FileComment.Missing\" />\n    <exclude name=\"Generic.WhiteSpace.ScopeIndent.IncorrectExact\" />\n    <exclude name=\"Generic.WhiteSpace.ScopeIndent.Incorrect\" />\n    <exclude name=\"PEAR.Functions.FunctionCallSignature.Indent\" />\n    <exclude name=\"WordPress.XSS.EscapeOutput.OutputNotEscaped\" />\n    <exclude name=\"WordPress.VIP.FileSystemWritesDisallow.FileWriteDetected\" />\n</rule>\n\n\n```. > Do you know of another comparable project that's successfully completed this type of initiative?\nI don't know. \ud83d\ude13 \n\nmakes it more difficult to git blame\n\nAh, You have a point.\nI tried it for a few days and it was actually very hard.\nI close this issue, thanks!. Thanks. \ud83d\udc4d . I tried that then passed on my local environment. (macOS Sierra + PHP7.0.14)\nBut failed on Travis CI... Why.... I found that test fails in this line.\nhttps://github.com/miya0001/wp-cli/blob/master/tests/test-search-replace.php#L36\nhttps://travis-ci.org/miya0001/wp-cli/jobs/189074128. I put var_dump() like following.\nhttps://github.com/miya0001/wp-cli/blob/624b94dc905452bf59dff7bf8cbb7998306e0898/php/WP_CLI/SearchReplacer.php#L97-L102\nFollowing is result in my local machine.\n```\n$ phpunit \nPHPUnit 5.6.2 by Sebastian Bergmann and contributors.\n.................Debug: This is a test message. (0.001s)\n...int(2)\n................                              36 / 36 (100%)\nTime: 88 ms, Memory: 10.00MB\n```\nBut number hasn't displayed on Travis CI\nhttps://travis-ci.org/miya0001/wp-cli/builds/189092231\nThere is an infinite loop. But I haven't found the cause of it now.. Ah, There are not *RECURSION* on Travis ...\narray(2) {\n  'prop' =>\n  string(3) \"foo\"\n  'self' =>\n  array(2) {\n    'prop' =>\n    string(3) \"foo\"\n    'self' =>\n    &array\n  }\n}\nBut on my local environment\narray(2) {\n  [\"prop\"]=>\n  string(3) \"foo\"\n  [\"self\"]=>\n  &array(2) {\n    [\"prop\"]=>\n    string(3) \"foo\"\n    [\"self\"]=>\n    *RECURSION*\n  }\n}. Yes! It is really interesting. I am seeing documentation of the php.ini.. I sometimes use domain name like example.com for our client.\nBecause I want to prevent duplication with theme name on wordpress.org.\nPlease allow . too. \ud83d\ude04 . I tried API and I see it doesn't support ..\nSorry, I misunderstood. \ud83d\ude13 . Ah, wp core install was not right.\nTry following today. \n$ wp core download --version=latest --locale=ja\nOther languages have the same problem too.\nwp core download --version=latest --locale=tr_TR. Ah, sorry for lack of explanation.\nI found a problem that some countries have two or more time zone.\nMy solution doesn't work for those languages.\nAlso, almost all users will use wp core download and my solution doesn't solve this command.\nSo I am trying to solve this problem on wp core download and I am thinking we shouldn't add options that make use case difficult to understand.\nThanks!. No, it doesn't. It will be executed at the time of a new installation with localized version.\nBut we can't use localized version when it hasn't been released.\nIf you are worried about this, I think it can add some command line options about it.. > How long does it typically take to release the localized version?\nMaybe 2 days or so, but some country is maybe later.. Nice! I am very happy if this problem will be solved.. I've added --set-date-time option and update tests.. Thanks for the review. I updated them.. @danielbachhuber Are there any work to solve error on Travis?. @danielbachhuber \nI found some problems in this PR, and it does not solve our problem.\nI want to rethink and close it.\nThanks!. The cause of the problem of wp core download --locale=xxx is probably same.\n. Do we add an option --skip=wp-config-sample.php to wp core verify-checksums for now?. @ocean90 \nThere is a time lag before the localized package is released, and the API doesn't work.\nAnd wp core download --locale=xxx doesn't work for same reason.\nI am trying to fix it, but I can't find the solution. Do you have any idea? . OK! Thanks!\nI'll write tests for wp core download and wp core check-update too.\nThey also have a similar problem.. @danielbachhuber \nUgh, I couldn't reproduce those problems.\nJapanese package was already released.\nI want to reproduce the same situation, but I have no idea... \ud83d\ude22 \nBut I found the solution for temporary use.\nMaybe, following will be same with the localized package.\n$ wp core download\n$ wp core language install ja --activate\n$ wp option update timezone_string $(wp eval \"echo _x( '0', 'default GMT offset or timezone string' );\")\n$ wp option update date_format $(wp eval \"echo __( 'M jS Y' );\")\nI will implement them and update our Vagrant solution and I would like to wait for feedback from our users. \ud83d\ude0e \nThanks!. Ah, I will continue to investigate to solve this.. > For this particular issue, I think the problem to solve would be adding PHPUnit 6 support to WordPress core. Want to create a Trac ticket for it?\nOK, I try it. Thanks. :). Done, but I am not sure that my solution is ok ... \ud83d\ude13 \nhttps://core.trac.wordpress.org/ticket/39822. Ah I wrote the check_target_directory() and I'm sorry for this bug. \ud83d\ude13 \nI think the problem will be solved if we modify as follows.\nBut I haven't use WP-CLI on Windows. \nCan anyone try it?\nhttps://github.com/wp-cli/scaffold-command/blob/master/src/Scaffold_Command.php#L790-L808\nAfter line 795:\n$parent_dir = str_replace( DIRECTORY_SEPARATOR, '/', $parent_dir );. Oh! Sorry I made mistake... \ud83d\ude13 . It isn't working.\n$ wp scaffold movefile\nError: 'movefile' is not a registered subcommand of 'scaffold'. See 'wp help scaffold'.. This PR was opened at contributor day in WordCamp Kyoto. \ud83d\ude04 . Ah, I saw that wp help has to find commands in WordPress plugins.\nI close it. :). @Nann \nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nThe PHP path isn't same with MAMP's PHP. You have to add path to the MAMP's PHP to $PATH environment variables.. * [x] wp admin https://github.com/wp-cli/admin-command\n [x] wp doctor https://github.com/wp-cli/doctor-command\n [x] wp find https://github.com/wp-cli/find-command\n [x] wp profile https://github.com/wp-cli/profile-command\n [x] wp rest https://github.com/wp-cli/restful\n* [x] wp scaffold package* https://github.com/wp-cli/scaffold-package-command. I like wp cli has-command. :). Please try WP-CLI 1.3.0.\nIt looks working fine for me with the newest version.\nThe current version of WP-CLI is the only officially supported version.\n```\n$ wp --info\nPHP binary: /usr/bin/php7.0\nPHP version:    7.0.8-0ubuntu0.16.04.3\nphp.ini used:   /etc/php/7.0/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI vendor dir:  phar://wp-cli.phar/vendor\nWP_CLI phar path:   /var/www/html\nWP-CLI packages dir:    /home/vagrant/.wp-cli/packages/\nWP-CLI global config:   /home/vagrant/.wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version: 1.3.0\n$ wp package install iandunn/wp-cli-rename-db-prefix \nInstalling package iandunn/wp-cli-rename-db-prefix (dev-master)\nUpdating /home/vagrant/.wp-cli/packages/composer.json to require the package...\nUsing Composer to install the package...\n\nLoading composer repositories with package information\nUpdating dependencies\nResolving dependencies through SAT\nDependency resolution completed in 0.492 seconds\nAnalyzed 4456 packages to resolve dependencies\nAnalyzed 177659 rules to resolve dependencies\nPackage operations: 1 install, 0 updates, 0 removals\nInstalls: iandunn/wp-cli-rename-db-prefix:dev-master 95ce5b2\n - Installing iandunn/wp-cli-rename-db-prefix (dev-master 95ce5b2)\nWriting lock file\nGenerating autoload files\n\nSuccess: Package installed.\n$ wp package list \n+---------------------------------+----------+------------+--------+----------------+\n| name                            | authors  | version    | update | update_version |\n+---------------------------------+----------+------------+--------+----------------+\n| iandunn/wp-cli-rename-db-prefix | Ian Dunn | dev-master | none   |                |\n+---------------------------------+----------+------------+--------+----------------+\n```\nAnyway, GitHub issues aren't for general support questions, but there are other venues you can try: https://wp-cli.org/#support.\nThanks.. Oh, the test has been passed...\nhttps://github.com/wp-cli/wp-cli/blob/master/features/help.feature#L12. I realized that this problem will be seen when WP_DEBUG is true.. @gitlost \nOK, thanks! \ud83d\ude04 . I reverted the php/WP_CLI/Runner.php then removed WP_ADMIN definition.. I guess we should add a new context a WP install with debug mode to the features/steps/given.php.\nBecause this error is a different error than what I reported, so I want to reproduce this error in a actual WordPress environment.\na WP install with debug mode will install WordPress with WP_DEBUG.\nIt looks reasonable and we don't need to handle another problem.\nHow about my idea?\nBut I am sorry I will work for it tomorrow. \ud83d\ude04 . @gitlost @danielbachhuber \nI remove the WP_ADMIN definition and add a new context a WP install with debug mode.\nThen I reproduced this problem with a new context and there is a problem which is related on #4265 .\nI am thinking we should leave this problem for now and look into more about #4265, #4285.. Some pull requests related to this are coming from some people.\nI think it is difficult to judge whether it should be merged, because there will be various opinions.\nSo, I want to ping to @hearvox and @ako80218 from those pull-requests.\nCould you check those pull-requests? \nIf you feel good, please post +1 or so. \ud83d\ude04 \nWe need consistency for those description, so it should be judged by same people.\nThen we will review and merge. :)\nHow about this plan?. @hearvox \n\n@ako80218 and I wrote improved command descriptions together at WordCamp for Publishers two weeks ago. Since then we've tried in different ways to submit the descriptions, but the procedure has not been clear to us -- we've gotten conflicting instructions.\n\nAh, I am sorry. I didn't know you are working for it since WordCamp for Publishers.\nOK, I will check if PR will be merged on the following list:\n\n[ ] admin\n[x] cache https://github.com/wp-cli/cache-command/pull/12\n[x] cap https://github.com/wp-cli/role-command/pull/7\n[x] checksum https://github.com/wp-cli/checksum-command/issues/9\n[ ] cli\n[x] comment https://github.com/wp-cli/entity-command/pull/83\n[ ] config\n[ ] core\n[ ] cron\n[ ] db\n[ ] eval\n[ ] eval-file\n[ ] export\n[ ] help\n[ ] import\n[ ] language\n[x] media https://github.com/wp-cli/media-command/pull/40\n[x] menu https://github.com/wp-cli/entity-command/pull/72, https://github.com/wp-cli/entity-command/pull/83\n[ ] network\n[x] option https://github.com/wp-cli/entity-command/pull/83\n[x] package https://github.com/wp-cli/package-command/pull/32\n[x] plugin https://github.com/wp-cli/extension-command/pull/38, https://github.com/wp-cli/extension-command/pull/43\n[x] post https://github.com/wp-cli/entity-command/pull/77\n[x] post-type https://github.com/wp-cli/entity-command/pull/75, https://github.com/wp-cli/entity-command/pull/83\n[x] rewrite https://github.com/wp-cli/rewrite-command/pull/9\n[x] role https://github.com/wp-cli/role-command/pull/7\n[ ] scaffold\n[ ] search-replace\n[ ] server\n[x] shell https://github.com/wp-cli/shell-command/pull/9\n[x] sidebar https://github.com/wp-cli/widget-command/pull/7\n[x] site https://github.com/wp-cli/entity-command/pull/83\n[x] super-admin https://github.com/wp-cli/super-admin-command/pull/11\n[x] taxonomy https://github.com/wp-cli/entity-command/pull/83\n[x] term https://github.com/wp-cli/entity-command/pull/83\n[x] theme https://github.com/wp-cli/extension-command/pull/43\n[x] transient https://github.com/wp-cli/cache-command/pull/11\n[x] user https://github.com/wp-cli/entity-command/pull/83\n[x] widget https://github.com/wp-cli/widget-command/pull/7\n\nThanks!. Thanks @hearvox , if you open a new pull-request, please link to this issue.\nCommitter will update the list as soon as possible. \ud83d\ude04 . Thanks @hearvox \nSome people already open pull-request, please check existing PRs before open new PR. :). @schlessera @hearvox @ako80218 \nI am thinking those PRs should be merged at once. :)\nI want to do final check before merge them.\n(I am sorry PR for wp menu already merged in my mistake.). I feel uncomfortable at the position of the line break when it has long description.\nI want to hear opinion from @wp-cli/committers .\nExample:\n\n. @hearvox \nDo you have list of descriptions? Can you share it?\nI am thinking we need to review whole descriptions.\n@gitlost \nSorry, I guess I shouldn't have merged some changes yet.\nBut it is not too late, we have a couple of month until next release. \ud83d\ude04 \nI want to solve the word-wrapping problem in long description in a few weeks or so. #4336 \nBut I am not sure about the third-person-singular problem. We need more opinion for it.. Hi @SergioScabuzzo \nGitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\nActually, the current version of WP-CLI is the only officially supported version.\nPlease ask question on the slack or so, then people will help you. :blush:. I will try to look into the source and fix it.. @danielbachhuber \nAh, I found out a reason.\nI placed the WP_CLI::add_hook() at the mu-plugins, but WordPress hasn't been loaded at the hook before-invoke.\nI want to keep features/hook.feature as a example.\nIs it ok?. Hi @jlambe \nPlease try wp --info and which php, then please check the path of those PHPs.\nAnyway, GitHub issues are meant for enhancement requests and specific, reproducible bugs, not for general support questions. For support options, please review http://wp-cli.org/#support\n. wp-cli is requiring the wp-config.php, so db account should be loaded from it.\nPlease ask us on the slack, if you have questions more.\nhttp://wp-cli.org/#support. @danielbachhuber \n\nWhy is this a problem?\n\nAh, I read following. It is OK.\n\nhttps://github.com/wp-cli/wp-cli/issues/996\nhttps://github.com/wp-cli/wp-cli/issues/129\n. Oh! Thanks!. Hi @GaryJones \n\nThanks for PR.\nBut we had a discussion about this. We are having a several repositories, I think it is very hard.\nPlease see #3703 \nI am very sorry, but I want to close it.. @GaryJones \nThanks :)\n\nincluding only the code in this repo\n\nAh, OK.\nI open again for now, but I want to have discuss with other committers.\n@wp-cli/committers Any thoughts?. Thanks @gitlost :)\nI am thinking following options.\n\nHide long description on command line help.\nHide only url in long description on command line help.\n\nIt should be displayed on the handbook, either way.. I tried:\n\nIt looks better than before.\nActually if we remove the url as I said, it is not useful. \ud83d\ude04 . I came up with another idea.\nIt changes long description to be list of the reference URLs.\n. > The first might be more robust and apply to more cases?\nI thinks so too.\nBut I just wrote the second example as follows, so it looks easy to solve the problem. :)\n/**\n * Manages user roles, including creating new roles and resetting to defaults.\n *\n * References:\n * * https://codex.wordpress.org/Roles_and_Capabilities\n * * https://codex.wordpress.org/Class_Reference/WP_User.. I am not sure for now. I want to see whole list of the long description.. Oh, I like it. \ud83d\udc4d . Following are examples:\nExample 1:\n\nExample 2:\n\nI like Example 2. \ud83d\ude0a . > Lastly, I think reference links should only be parsed out on display in the terminal, not when piping (e.g. generating docs).\nYes, you are right. \nDo you have an idea how should it detect terminal or piping?\nWill we add global parameters?. Great! Thanks \ud83d\ude0a . @schlessera \nThere is the function pluralize() in wp-cli/scaffold-command.\nIt looks similar problem as follows.\nhttps://github.com/wp-cli/scaffold-command/issues/48\nShould pluralize() be moved into wp-cli/wp-cli and solve #48?. Ah, we will have contributor day at WordCamp Tokyo at 9/16. :). Oh, I see!\nOK, I will ask new contributors to update this file in Tokyo. :). Note:\nhttps://github.com/wp-cli/scaffold-package-command/blob/master/features/bootstrap/FeatureContext.php#L77-L88. @schlessera \n\nI would do a run over all packages this week.\n\nI want to do them with Japanese people at contributor day in this weekend in Tokyo. :). > Will you cover both the tests and the README files?\nYes . :). Ah, but we have some commands that aren't updated description.\nhttps://github.com/wp-cli/wp-cli/issues/4302#issuecomment-326804539\nWe will need to update readme again for some commands.\nI'll create a check sheet on #4344 which is a list of the updated.. Thankfully, we will have 10 or more attendees at CLI team at contributor day.\nI want to keep their tasks. :). * [x] admin\n [x] cache\n [x] cap\n [x] checksum\n [x] cli\n [x] comment\n [x] config\n [x] core\n [x] cron\n [x] db\n [x] eval\n [x] eval-file\n [x] export\n [x] import\n [x] language\n [x] media\n [x] menu\n [x] network\n [x] option\n [x] package\n [x] plugin\n [x] post\n [x] post-type\n [x] rewrite\n [x] role\n [x] scaffold\n [x] search-replace\n [x] server\n [x] shell\n [x] sidebar\n [x] site\n [x] super-admin\n [x] taxonomy\n [x] term\n [x] theme\n [x] transient\n [x] user \n* [x] widget. \u3297\ufe0f . Oh, nice! I like it. :). I am thinking that can we get ssh configuration from vagrant ssh-config automatically?\nDo you have any idea?. I have same problem with latest nightly version.\n$ wp core download --path=/var/www/html/ --version=latest --force\nDownloading WordPress 4.8.2 (en_US)...\nmd5 hash verified: 2e8744a702a3d9527782d9135a4c9544\nError: Couldn't extract WordPress archive. unable to decompress gzipped phar archive \"/tmp/wp_59c24f71218a2.tar.gz\" to temporary file\n. It is working on MacOS, but not working on Ubuntu.\nFollowing is a result of behat.\n```\n$ vendor/bin/behat features/core-download.feature \nPHP binary: /usr/bin/php\nPHP version:    7.0.22-0ubuntu0.16.04.1\nphp.ini used:   /etc/php/7.0/cli/php.ini\nWP-CLI root dir:    /vagrant/core-command/vendor/wp-cli/wp-cli\nWP-CLI vendor dir:  /vagrant/core-command/vendor\nWP_CLI phar path: \nWP-CLI packages dir:  \nWP-CLI global config:   /tmp/wp-cli-package-test/config.yml\nWP-CLI project config:  /vagrant/core-command/wp-cli.yml\nWP-CLI version: 1.3.0\n[RuntimeException]                                                                                                                   \n  Exception has been thrown in \"beforeSuite\" hook, defined in FeatureContext::prepare()                                                \n  $ wp core download --force --path='/tmp/wp-cli-test-core-download-cache'                                                             \n  Creating directory '/tmp/wp-cli-test-core-download-cache/'.                                                                          \n  Downloading WordPress 4.8.2 (en_US)...                                                                                               \n  md5 hash verified: 2e8744a702a3d9527782d9135a4c9544                                                                                  \n  Error: Couldn't extract WordPress archive. unable to decompress gzipped phar archive \"/tmp/wp_59c256f2e306e.tar.gz\" to temporary file\n  cwd:                                                                                                                                 \n  run time: 13.057976961136                                                                                                            \n  exit status: 1                                                                                                                         \nbehat [--init] [-f|--format=\"...\"] [--out=\"...\"] [--lang=\"...\"] [--[no-]ansi] [--[no-]time] [--[no-]paths] [--[no-]snippets] [--[no-]snippets-paths] [--[no-]multiline] [--[no-]expand] [--story-syntax] [-d|--definitions=\"...\"] [--name=\"...\"] [--tags=\"...\"] [--cache=\"...\"] [--strict] [--dry-run] [--stop-on-failure] [--rerun=\"...\"] [--append-snippets] [--append-to=\"...\"] [features]\n```. I found that failed at following line.\nhttps://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Extractor.php#L78. Oh, yes...\nIt looks package problem.\n$ ./bin/wp core download --path=/home/vagrant/wp --locale=sv_SE --force\nDownloading WordPress 4.8.2 (sv_SE)...\nmd5 hash verified: bfc6e58c9018e4344620caae85323547\nCleaning up files...\nFile removed: wp-includes/js/tinymce/skins/lightgray/fonts/readme.md\nFile removed: wp-includes/js/tinymce/skins/lightgray/fonts/tinymce.json\nFile removed: wp-includes/js/tinymce/skins/lightgray/fonts/tinymce-small.json\nFile removed: wp-includes/js/tinymce/skins/lightgray/skin.ie7.min.css\nFile removed: wp-includes/js/tinymce/plugins/media/moxieplayer.swf\nFile removed: wp-includes/js/tinymce/plugins/wpembed/plugin.js\nFile removed: wp-includes/js/tinymce/plugins/wpembed/plugin.min.js\n7 files cleaned up.\nSuccess: WordPress downloaded.. I am asking people on slack.\nhttps://wordpress.slack.com/archives/C02RQBWTW/p1505911408000389. @gitlost :)\n$ php --version\nPHP 7.1.8 (cli) (built: Aug  7 2017 15:02:45) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies. Hmm it is working on MacOS.\n$ wp core download --version=latest --path=wordpress --force\nDownloading WordPress 4.8.2 (en_US)...\nUsing cached file '/Users/miyauchi/.wp-cli/cache/core/wordpress-4.8.2-en_US.tar.gz'...\nSuccess: WordPress downloaded.\nAnd I can extract tar.gz on linux.\nI am not sure is it problem of the package or not.\n\nCan we made so WP core download use default locale instead of US?\n\nThe default locale is en_US.\n. @ZeroX66 \nIf you want to change default locale, you can set default locale to ~/.wp-cli/config.yml like following.\ncore download:\n  locale: de_DE. @ZeroX66 \nOh! Sorry, the file name of the config is ~/.wp-cli/config.yml.\nhttps://make.wordpress.org/cli/handbook/config/\n(I updated above. \ud83d\ude04 ). Hmm,\nFollowing is on Ubuntu and it is not working wp core download.\n$ php -i | grep zlib\nRegistered PHP Streams => https, ftps, compress.zlib, php, file, glob, data, http, ftp, phar, zip\nRegistered Stream Filters => zlib.*, string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, dechunk, convert.iconv.*, mcrypt.*, mdecrypt.*\nzlib\nStream Wrapper => compress.zlib://\nStream Filter => zlib.inflate, zlib.deflate\nzlib.output_compression => Off => Off\nzlib.output_compression_level => -1 => -1\nzlib.output_handler => no value => no value\nFollowing is on MacOS and it is working wp core download.\n$ php -i | grep zlib\nConfigure Command =>  './configure'  '--prefix=/usr/local/Cellar/php71/7.1.8_20' '--localstatedir=/usr/local/var' '--sysconfdir=/usr/local/etc/php/7.1' '--with-config-file-path=/usr/local/etc/php/7.1' '--with-config-file-scan-dir=/usr/local/etc/php/7.1/conf.d' '--mandir=/usr/local/Cellar/php71/7.1.8_20/share/man' '--enable-bcmath' '--enable-calendar' '--enable-dba' '--enable-exif' '--enable-ftp' '--enable-gd-native-ttf' '--enable-mbregex' '--enable-mbstring' '--enable-shmop' '--enable-soap' '--enable-sockets' '--enable-sysvmsg' '--enable-sysvsem' '--enable-sysvshm' '--enable-wddx' '--enable-zip' '--with-freetype-dir=/usr/local/opt/freetype' '--with-gd' '--with-gettext=/usr/local/opt/gettext' '--with-iconv-dir=/usr' '--with-icu-dir=/usr/local/opt/icu4c' '--with-jpeg-dir=/usr/local/opt/jpeg' '--with-kerberos=/usr' '--with-mhash' '--with-ndbm=/usr' '--with-png-dir=/usr/local/opt/libpng' '--with-xmlrpc' '--with-zlib=/usr' '--with-readline=/usr/local/opt/readline' '--without-gmp' '--without-snmp' '--with-libxml-dir=/usr/local/opt/libxml2' '--with-pdo-odbc=unixODBC,/usr/local/opt/unixodbc' '--with-unixODBC=/usr/local/opt/unixodbc' '--with-bz2=/usr' '--with-openssl=/usr/local/opt/openssl' '--enable-fpm' '--with-fpm-user=_www' '--with-fpm-group=_www' '--with-curl' '--with-xsl=/usr' '--with-ldap' '--with-ldap-sasl=/usr' '--with-mysql-sock=/tmp/mysql.sock' '--with-mysqli=mysqlnd' '--with-pdo-mysql=mysqlnd' '--disable-opcache' '--enable-pcntl' '--without-pear' '--enable-dtrace' '--disable-phpdbg' '--enable-zend-signals'\nRegistered PHP Streams => https, ftps, compress.zlib, compress.bzip2, php, file, glob, data, http, ftp, phar, zip\nRegistered Stream Filters => zlib.*, bzip2.*, convert.iconv.*, string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, dechunk\nzlib\nStream Wrapper => compress.zlib://\nStream Filter => zlib.inflate, zlib.deflate\nzlib.output_compression => Off => Off\nzlib.output_compression_level => -1 => -1\nzlib.output_handler => no value => no value. Should we open new ticket on trac?. > They'll ask what's corrupt with the file though, to which we should have an answer.\nI thinks so too. But I have no idea for now. \ud83d\ude13 . I tried same command on the Ubuntu 16.04.\n```\nvagrant@vccw:~$ php -r \"new PharData( 'latest.tar.gz' );\"\nPHP Fatal error:  Uncaught UnexpectedValueException: unable to decompress gzipped phar archive \"/home/vagrant/latest.tar.gz\" to temporary file in Command line code:1\nStack trace:\n0 Command line code(1): PharData->__construct('latest.tar.gz')\n1 {main}\nthrown in Command line code on line 1\nvagrant@vccw:~$ echo $?\n255\nvagrant@vccw:~$ php --version\nPHP 7.0.22-0ubuntu0.16.04.1 (cli) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.0.22-0ubuntu0.16.04.1, Copyright (c) 1999-2017, by Zend Technologies\n    with Xdebug v2.4.0, Copyright (c) 2002-2016, by Derick Rethans\n. I merged #4371 . I would close when https://meta.trac.wordpress.org/ticket/3150 will be closed.\nThanks. :). !? I tried `php -r \"new PharData( 'latest.tar.gz' );\"` with each version of PHP on Travis CI.\nThen, ... It is passed! \ud83d\ude2e \nhttps://travis-ci.org/miya0001/test-phardata. @ZeroX66 Nightly build is working for now. :)\nhttps://make.wordpress.org/cli/handbook/installing/#installing-nightly-via-phar. I tried as follows on Amazon Linux too.\n$ wget https://wordpress.org/latest.tar.gz\n$ php -r \"new PharData( 'latest.tar.gz' );\"\n```\nThen it worked as expected.. @gitlost \nIt worked fine on my custom docker environment which is using phpenv + php-build too.\nI saw the php-build repository and I can't find the patch what you said.\nhttps://github.com/php-build/php-build/tree/master/share/php-build/patches\nI guess Travis CI is using same solution. :)\n. I tried wp plugin list with WordPress 3.7 + PHP 5.3.\n$ wp plugin list\n+---------+----------+--------+---------+\n| name    | status   | update | version |\n+---------+----------+--------+---------+\n| akismet | inactive | none   | 2.5.6   |\n| hello   | inactive | none   | 1.6     |\n| no-mail | must-use | none   |         |\n+---------+----------+--------+---------+\nThe version number of akismet is 2.5.6, but version 4.0 is available.\nI tried wp cron event run --all and run wp plugin list again.\nBut it couldn't find update as expected.\nubuntu@82f7db666203:/tmp/wp-cli-test-run-plugin-update.feature.3-59c4a89329e7b5.66075305$ \n/shared/vendor/bin/wp cron event run --all \nExecuted the cron event 'wp_version_check' in 2.928s.\nExecuted the cron event 'wp_update_plugins' in 0.626s.\nExecuted the cron event 'wp_update_themes' in 0.506s.\nSuccess: Executed a total of 3 cron events.\nubuntu@82f7db666203:/tmp/wp-cli-test-run-plugin-update.feature.3-59c4a89329e7b5.66075305$ \n/shared/vendor/bin/wp plugin list\n+---------+----------+--------+---------+\n| name    | status   | update | version |\n+---------+----------+--------+---------+\n| akismet | inactive | none   | 2.5.6   |\n| hello   | inactive | none   | 1.6     |\n| no-mail | must-use | none   |         |\n+---------+----------+--------+---------+. Related:\n https://github.com/wp-cli/export-command/pull/12\n https://github.com/wp-cli/extension-command/pull/45. I tried to run following tests with older version of WordPress.\nhttps://github.com/wp-cli/extension-command/blob/master/features/plugin-update.feature\nThen I found WordPress 3.7 - 3.9 have a same problem. \ud83d\ude13 . @gitlost Oh, I didn't see log. :). @danielbachhuber \nThe problem for extension-command had been solved.\nBut the problem for the export-command is not, I guess @gitlost is working for it at https://github.com/wp-cli/export-command/pull/12#issuecomment-333160356.. Hi @Dan33l \nYou can use --path parameter, also you can set default path by ~/.wp-cli/config.yml.\nThere are other options in documentation.\nhttps://make.wordpress.org/cli/handbook/config/\nThanks :). @wp-cli/committers \nDo you know how test STDIN with phpunit?. @gitlost Thanks, you always help me a lot. \ud83d\ude0a \n@danielbachhuber OK, I opened new PR. https://github.com/wp-cli/entity-command/pull/100\nThanks again!. > Just so it's stated, let's refrain from merging this until v1.4.0 has landed.\nAgreed \ud83d\ude0a . @danielbachhuber I did. \ud83d\ude0a . I changed the order of arguments of implode().\n\nit may be less confusing to use the documented order of arguments.\nhttp://php.net/manual/en/function.implode.php. @gitlost OK, thanks \ud83d\ude0a . @gitlost It is finished! \ud83d\ude0a . I removed @when after_wp_load form wp cli has_command, because it is executed at before_wp_loaded and this command doesn't need WP.\nAlso, this command is tested with empty directory.. I changed my mind. \ud83d\ude0a \nI reverted after_wp_load for wp cli has_command and updated the scenario for this.. @danielbachhuber \nvar_dump( function_exists( 'home_url' ) );\n\nIt is nice idea. I did it.. \ud83d\ude0a . @schlessera Oh, thanks. hehehe. \ud83d\ude0a . If there is a ~/.wp-cli/config.yml in the vagrant machine and it has path: /var/www/html, we can connect --ssh=vagrant only.. There is WP:\n```\n$ time ~/wp-cli/wp-cli/bin/wp cli completions --line='wp p' --point=100 \npackage \nplugin \npost \npost-type \nreal    0m0.287s\nuser    0m0.208s\nsys 0m0.061s\n```\nThere is no WP:\n```\n$ time ~/wp-cli/wp-cli/bin/wp cli completions --line='wp p' --point=100\npackage \nplugin \npost \npost-type \nreal    0m0.146s\nuser    0m0.092s\nsys 0m0.041s\n```\nHmm, It makes slow down very little. \ud83d\ude13\nI don't feel so stressed. \nBut I changed my mind, I will revert cli completions and this patch should improve has-command only.. @danielbachhuber I removed functions for loading WordPress from bash completions.. > What if we had some lightweight, short expiration caching mechanism for bash completions?\nSounds good. :)\nAnd I am thinking another idea that adds an option like --advanced-completion which enables some more completions like plugin name or so.. > Decisions, not options :)\nOh, yes... hahaha \ud83d\ude04 \nI'll try to implement cache.. You can write wp-cli.yml like following.\n@local:\n  ssh: vagrant:<machine-name>:<path>\nAnd you can define <machine-name> in Vagrantfile.\nconfig.vm.define \"<machine-name>\" do |v|\n  # Nothing to do. :)\nend\nThen you can run command wp @local plugin list.\nSee example:\n https://github.com/vccw-team/vccw/blob/master/Vagrantfile#L42-L43\n https://github.com/vccw-team/vccw/blob/master/provision/playbooks/templates/wp-cli.yml. I guess it will be solved by php://temp.\nBut I can't reproduce this problem with the 100,000 posts.\n$ wp post generate --count=100000\n$ php -d memory_limit=64M /usr/local/bin/wp post list --format=csv\nMy environment is following.\n$ wp --info\nOS: Darwin 17.3.0 Darwin Kernel Version 17.3.0: Thu Nov  9 18:09:22 PST 2017; root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64\nShell:  /bin/bash\nPHP binary: /usr/local/Cellar/php72/7.2.1_12/bin/php\nPHP version:    7.2.1\nphp.ini used:   /usr/local/etc/php/7.2/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI vendor dir:  phar://wp-cli.phar/vendor\nWP_CLI phar path:   /Users/miya/Desktop/wp\nWP-CLI packages dir:    /Users/miya/.wp-cli/packages/\nWP-CLI global config:   \nWP-CLI project config:  /Users/miya/Desktop/wp/wp-cli.yml\nWP-CLI version: 1.5.0-alpha-f51bf89. Oh... Nice :+1:  I like it!\n. :wink:\n. I thought, WP_UnitTestCase should be placed into /tmp/wordpress-tests-lib/includes.\nhttps://github.com/miya0001/wp-cli/blob/master/templates/bootstrap.mustache#L15\nAnd wp-tests-config.php should be placed in parent directory of the includes.\n$config_file_path = dirname( dirname( __FILE__ ) );\nif ( ! file_exists( $config_file_path . '/wp-tests-config.php' ) ) { \n    // Support the config file from the root of the develop repository.\n    if ( basename( $config_file_path ) === 'phpunit' && basename( dirname( $config_file_path ) ) === 'tests' )\n        $config_file_path = dirname( dirname( $config_file_path ) );\n}\n$config_file_path .= '/wp-tests-config.php';\nhttp://develop.svn.wordpress.org/trunk/tests/phpunit/includes/bootstrap.php.\nAre there any problems?\n. Ah, I forgot to test with WP_TESTS_DIR env ... \n. /usr/bin/env wp ?\nI haven't tested yet. \ud83d\ude04 \n. I can get $PATH via following command but alias doesn't work...\nssh user@example.com \"source /etc/profile; echo \\$PATH\"\n. Ah it looks difficult.\n- Place the ~/.ssh/environment into local machine.\n- Add PermitUserEnvironment yes in /etc/ssh/sshd_config on remote server.\nhttp://stackoverflow.com/questions/216202/why-does-an-ssh-remote-command-get-fewer-environment-variables-then-when-run-man\n. > Is [:<pass>] actually supported?\nOh ... orz\n. Thanks!\n. It is from my six sense ...\nI'll investigate it! \ud83d\ude04 . Oh! Yes!. Ah, It allows like ../../../../.... ",
    "ioben": "I'm be happy to do the legwork on this (it is a bit of an edge case after all), I just need to know what direction to go in.  I'll see how the SHORTINIT works, and if that isn't viable I'll poke around with parsing options (maybe nikic's php parser or something).\n. ",
    "niktrix": "fresh install of wordpress works fine, \n. ",
    "mikekauffman": "After further debugging, it looks like this bug occurs is in the wp_insert_post function. Carry on.\n. @danielbachhuber Upon further, further, further debugging, this is actually a problem with the pg4wp \"plugin\".  tl;dr - it uses core MySQL functions (e.g. mysql_insert_id) against the Postgres database, and given certain data permutations, it yields the wonkiness above. :disappointed: \nAnyway, you guys are good to go.  :+1: \n. ",
    "JPry": "In this particular case, I'm building WP CLI into a web-based API. There's a wrapper that handles user input and then passes it to WP CLI to execute. Any output generated by WP CLI would be returned via the API and could be displayed in the web interface.\nUsing wp cli cmd-dump could indeed give me the data that I need, but it would require re-processing that data to display the correct portion based on input. If there was a --raw flag (or something similar) that allowed --help to dump text data, then this would mean that it is not necessary to recreate something that already exists inside of WP CLI.\n. @danielbachhuber @scribu \n\nI just checked: paging is already disabled if the command is piped to something else - compare wp help with wp help | cat.\nIsn't that enough?\n\nI've done some more testing. You're right, the current functionality is enough. I'll go ahead and close this.\n. Fixed by #1697 \n. @danielbachhuber It might be good to have some kind of general helper function for checking boolean flags, and then consistently use that instead of having to remember to do this:\nphp\n$foo = isset( $assoc_args['foo'] ) && $assoc_args['foo'];\n\ud83d\ude09\n. > It would be nice to clean up the logic in get_table_list() to handle each of these cases, instead of having conditional logic in two places.\n@danielbachhuber Do you want me to do this refactoring as part of this PR?\n. @danielbachhuber I just pushed some updates. It's possible that these updates will also address #1696, at least for this particular command.\n. > One other nit to address. Plus the build should pass.\nI'll address that. I was waiting on the Travis build.\n\nI'm not keen on introducing a helper function as a part of this PR.\n\nIf I move the helper function into a private method of the Search_Replace_Command class, would that be OK? Or would you prefer not doing it that way at all, and just sticking to isset()?\n. @danielbachhuber Update submitted, and the build is passing.\n. > If you have some programmatic control over the config file, why do you need to modify it with WP-CLI?\nThe programmatic control is primarily over the creation of the wp-config.php file. Technically it could be changed, but at this point there are a significant number of existing sites that have the old template and a different default \"token\".\n. > I don't think it makes sense to have this packaged with WP-CLI. You could take the code you have, and perform some after the fact transformation.\nThat's very easy to say without seeing the current codebase. The idea is to make it so that an existing tool with widespread adoption (e.g. WP CLI) can be used. Why re-invent the wheel?\nThere are other use-cases, besides the one I mentioned. What if someone wants to specify another line in their wp-config.php file where they want the code to go, and not necessarily have it at the end of their existing set of defines? It's not that unusual for some people to care about where things go in their config file.\nThis is something that will directly benefit WP Engine as well as all of their customers. I think it's reasonable to add it in, especially since this isn't an abstract request; all of the code is written, and it is a change that is completely transparent to current users.\n. @danielbachhuber \n\nIf you have the time to contribute, I would love help with #1564\n\nIf I get a chance, I would love to help out with some other needed improvements. However, that particular issue doesn't relate to this one. I respectfully request that you reopen this PR and consider it for submission.\n. I'll gladly add some functional tests. \n. My use case was that I was building a command that could optionally accept multiple taxonomy slugs as arguments. I found a way to do what I wanted with an array of arguments. However, I thought of other command-line libraries (specifically Symfony Console) where you can specify that options can be reused and will generate an array. While I found another solution this time around, I'm sure there would still be a benefit to either myself or others if an option could be specified as an array.\nThis is the code I ended up with:\n``` php\nclass JPry_CLI_Command extends WP_CLI_Command {\n    /\n     * Perform an initial sync of all taxonomies from the main site in the network to each subsite in the network.\n     \n     * ## OPTIONS\n     \n     * [...]\n     * : One or more taxonomy slugs to sync. If omitted, then all taxonomies will be synced.\n     \n     * @subcommand initial-tax-sync\n     * @alias initial-taxonomy-sync-to-language-sites\n     /\n    public function initial_taxonomy_sync_to_language_sites( $args, $assoc_args ) {\n        try {\n            $taxonomy_sync = new JPry_CLI_Initial_Taxonomy_Sync( $args );\n            $taxonomy_sync->do_sync();\n        } catch ( \\Exception $e ) {\n            WP_CLI::error( $e->getMessage() );\n        }\n    }\n}\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n    WP_CLI::add_command( 'jpry', 'JPry_CLI_Command' );\n}\n```\n``` php\nclass JPry_CLI_Initial_Taxonomy_Sync {\n    /*\n     * @param array $taxonomies Array of taxonomy names to sync.\n     /\n    function __construct( $taxonomies = array() ) {\n        if ( empty( $taxonomies ) ) {\n            $taxonomies = get_taxonomies();\n        } else {\n            $this->ensure_taxonomies_exist( $taxonomies );\n        }\n    $this->taxonomies = $taxonomies;\n}\n\n/**\n * Ensure that the given taxonomies exist.\n *\n * @param array $taxonomies The taxonomies to check.\n *\n * @throws \\Exception When any one of the taxonomies doesn't exist.\n */\nprivate function ensure_taxonomies_exist( $taxonomies ) {\n    foreach ( $taxonomies as $taxonomy ) {\n        if ( ! taxonomy_exists( $taxonomy ) ) {\n            throw new \\Exception( sprintf( 'The taxonomy %s does not exist.', $taxonomy ) );\n        }\n    }\n}\n\npublic function do_sync() {\n    // code here...\n}\n\n}\n``\n. @danielbachhuber Let me see if I can put something together within the next week or so.\n. @schlessera Do you have any suggestions on how to achieve that? Dynamically specifying a composer dependency based on the current working branch isn't something I've done before. If you have any examples, that would be helpful.. @schlessera I am indeed. I'm assuming I should refactor to build off of the work done in #4140 ?. @schlessera @pierre-dargham It looks like version0.1.4of the autoload-splitter no longer throws an exception. I can confirm that explicitly requiring version0.1.3` restores the error.\nI was concerned that the autoload splitter wasn't running at all. To test that concern, I added some checks for the files that are created as a result of the autoload splitter. This seems to be passing as well. Unfortunately, I'm getting different results when I do the checks manually outside of the test environment. To do this manual process, I copied all of the commands that the tests are running, and dropped them into a simple setup.sh file:\n```\n!/bin/bash\ncomposer init --name=\"wp-cli/composer-test\" --type=\"project\" --no-interaction\ncomposer config vendor-dir custom-vendor\ncomposer require johnpbloch/wordpress --no-interaction --optimize-autoloader\ncomposer config repositories.wp-cli '{\"type\":\"path\",\"url\":\"/tmp/wp-cli-clean\",\"options\":{\"symlink\":false}}'\ncomposer require wp-cli/wp-cli:dev-master --no-interaction --optimize-autoloader\n```\nI then run the script inside a new directory, and then run ls -1 custom-vendor/, and I do not see the autoload_commands.php or autoload_framework.php files.\nAt this point, I believe that the problem has to do with which composer binary is being executed during the test. When setting up a new process, the FeatureContext::get_process_env_variables() method is called. This method sets up the $PATH variable to include the repository of the main repo itself, where composer has already been initialized. I believe that this is the actual problem. The composer binary being run has already autoloaded the autoload splitter as one of its dependencies, and so it's not showing an error. But when doing a test separately without an existing composer binary set up by WP CLI, then there's still the missing files that should be put in place by autoload splitter.\nMy thought is that we should explicitly call the composer binary provided by Travis. Alternatively, perhaps it would be best to not change the path environment variable at all.\nI'm certainly open to suggestions \ud83d\ude04 . I'm closing this in favor of #4255.. @wojsmol \n\non enviramant with error plese check if zlib php extesion is enabled\n\nThat's a good thought, but it appears that zlib is enabled:\nphp -i | grep zlib\nRegistered PHP Streams => https, ftps, compress.zlib, php, file, glob, data, http, ftp, phar, ssh2.shell, ssh2.exec, ssh2.tunnel, ssh2.scp, ssh2.sftp, zip\nRegistered Stream Filters => zlib.*, string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, dechunk, convert.iconv.*, mcrypt.*, mdecrypt.*\nzlib\nStream Wrapper => compress.zlib://\nStream Filter => zlib.inflate, zlib.deflate\nzlib.output_compression => Off => Off\nzlib.output_compression_level => -1 => -1\nzlib.output_handler => no value => no value\n@ZeroX66 \n\nI think the problem might be the arguments in this line\ntar xz --strip-components=1 --directory=%s -f $tarball\n\nI don't think that line is the problem. That line is only executed if the PharData class does not exist. The class does exist. The exception happens on $phar = new PharData( $tarball ); as was mentioned by @miya0001\nSo it seems that there's some issue between the package and the PharData class. I'm not sure how to determine which of them is to blame.. I have an idea for a solution.\nWe could do a try {} catch () block within the \\WP_CLI\\Extractor::extract_tarball() method. We could try the PharData class first, but if it throws an exception we could fall back to using a command line exec to do the extraction. If that still fails, then throw an exception and let it bubble back up to the existing block.. @ZeroX66 \n\nHm, It's still some trouble with it. I change to this and it works with \"nightly\".\n\nNightly is the only way to have the fix. There hasn't been a release yet.. I tested this with my local VVV instance and the nightly phar, and it worked.\nvagrant@vvv:/tmp$ mkdir test\nvagrant@vvv:/tmp$ cd test/\nvagrant@vvv:/tmp/test$ php ../wp-cli-nightly.phar core download\nDownloading WordPress 4.8.2 (en_US)...\nmd5 hash verified: 2e8744a702a3d9527782d9135a4c9544\nWarning: unable to decompress gzipped phar archive \"/tmp/wp_59c2ff8e7af4a.tar.gz\" to temporary file\nSuccess: WordPress downloaded.\nSlack message: https://wordpress.slack.com/archives/C02RP4T41/p1505951665000145?thread_ts=1505948297.000185&cid=C02RP4T41. Would it make more sense to have the default be only WordPress tables, rather than all tables? I ask because that's the current behavior. That would give 4 total options:\n- wordpress (default)\n- network\n- all-tables-with-prefix\n- all-tables\n. So... With the last commit I pushed, all of the tests are passing (including the one I added). Do we still want to refactor the parameter for get_table_list()? I feel like generating and passing different strings to it requires more code and conditionals than just using the $assoc_args array directly.\n. Something just occurred to me here: We should probably use escapeshellarg() on $vendor_directory.. ",
    "lsl": "For those who show up here from google.\nRespecting PAGER was eventually added in https://github.com/wp-cli/wp-cli/pull/2264\nPAGER=cat wp help\n. Edit, nevermind looks like pager respect was eventually added in https://github.com/wp-cli/wp-cli/pull/2264\nPAGER=cat wp help\n\nCan we re-open this?\nBusyBox's version of less lacks the -r option.\nI believe the previous reasoning was that if you need the output in another command you can pipe it and the output will be passed through by less. \nIn the case of BusyBox you get an error on less and it does not pipe through.\n/ $ wp | cat\nless: unrecognized option: r\nBusyBox v1.26.2 (2017-11-23 08:40:54 GMT) multi-call binary.\nUsage: less [-EIMmNSh~] [FILE]...\nView FILE (or stdin) one screenful at a time\n        -E      Quit once the end of a file is reached\n        -I      Ignore case in all searches\n        -M,-m   Display status line with line numbers\n                and percentage through the file\n        -N      Prefix line number to each line\n        -S      Truncate long lines\n        -~      Suppress ~s displayed past EOF\n/ $\n. ",
    "tapetersen": "Yes and that command enables the theme for all the sites but doesn't activate it.. You can't actually use --activate and --network at the same time (you can but it's only activated for the main site)\nThat's why i found it strange. Solved it with a simple bash loop and the url parameter in the meantime.\n...\n[--activate]\nIf set, the theme is activated for the current site. Note that the \u201cnetwork\u201d flag has no influence on this.\n...\n. Is there any progress on this or anyone found a reasonable workaround to be able to  require and use wp cli commands in a project using symfony 4. . Ok thanks for that. My problem is not that  I want to use wp-cli the tool in a project using symfony bot rather use some of the classes/functions from it in a couple of symfony commands and I can't install those in the same project it seems. \nEven if the individual commands can be installed they lacked some class from the main project (missing dependency).\nIt's not breaking for me and I solved it by replicating the commands I needed but thanks for the timeline update.\n. ",
    "jancbeck": "I just realised, that parameters can be passed in when the event is scheduled. Either as the 4th argument of wp_schedule_event or when running wp cron event schedule.\nThis is a non-issue then.\n. ",
    "corradomatt": "Sorry about the vague issue description!\nThe fatal error says that the function (wp_is_mobile) is not defined. The function is being used in a plugin to add a class to a div within the plugin template output.\n. Now that I look into it more closely, it looks like we're calling wp_is_mobile within a function callback on the init hook which is too early. We're going to move the hook to something like wp which seems to work better because it ensures that function is loaded.\nI guess it's our issue and not WP-CLI. Thanks @danielbachhuber, wp-cli is awesome btw!\n. Any update on this? I'm interested in installing some community packages....works with composer but just a few extra hoops to jump through at the moment since the package index is currently down.\n. @gulaholic from my understanding wp-cli runs most (if not all) of the WordPress core runtime behind the scenes. This includes plugin and theme code. This is why there are --skip-plugins and --skip-themes flags to skip some or all of these addons when running commands. If there is a php warning or fatal error caused by a plugin you'll see that output to the console when running wp-cli commands.. Well, now it seems like I'm offending people which was not my intention. I just thought the documentation on wp-cli.org was some of the best documentation for a tool like this I've seen. I don't feel good about the new documentation on wp.org\nBesides the global parameters....\n When on https://developer.wordpress.org/cli/commands/ (I get there because I bookmarked wp-cli.org/commands and I'm redirected) I see breadcrumbs. The breadcrumbs show /home/commands but when I click on home I would expect to be directed to a main wp-cli page ... not the developer resources page.\n There's no clear organization between wp-cli docs - I would expect to be able to navigate between pages of cli docs with links or some context. For example, https://developer.wordpress.org/cli/ doesn't exist.\n There should be a link to a main wp-cli documentation page here - https://developer.wordpress.org/\n The link to \"github issues\" on single command pages on wp.org doesn't work\n* The leave a comment link on single command pages doesn't work\nI get it, it takes time to build these pages out and move content over from the current site. But until it's setup to have all the content and relevant info from wp-cli.org there's no reason to forward people to the wp.org site. Let's build it out in tandem and then we can turn off the wp-cli.org site when the content on wp.org is great! Not sure if I'm able to help with the wp.org site, but I can volunteer a few hours a week to help make it happen (that the least I can do....wp-cli has been such a huge help to me on a daily basis).. Thanks for the reply Daniel.\nFor the github issues, I failed to realize that it's filtering for those particular commands....very cool. And thanks for being receptive to my gripes. In spite of what it may sound like I really appreciate and respect the work you've done for wp-cli and the rest api.. @danielbachhuber awesome! The docs are much improved on wp.org now. I especially like the new chapters menu sidebar on https://make.wordpress.org/cli/handbook/ - that's a great homepage for the project.\nPersonally I think that the commands page should have the same navigation sidebar as the handbook pages. . Thanks @danielbachhuber -- the docs are getting WAY better!. sure @schlessera - thanks!. ",
    "mozai": "No don't do either of those.  You don't want suhosin turned off every time you run php or you run code in any PHarchive (*.phar)\nTurn off suhosin ONLY when you're running wpcli from a terminal. This is what I use in bash:\nwhoownshere() { stat . -c%U; }\nWPCLI() { sudo -u $(whoownshere) -- /usr/local/bin/php -d suhosin.simulation=On /usr/local/bin/wp-cli $* ; }\nso then I can run \"WPCLI plugin list\" and it works properly.\n. ",
    "aosmichenko": "I have full control. It\u2019s Amazon Unix system. What exactly are you interesting in? I can provide you any information!\n\nOn Dec 3, 2014, at 4:26 PM, Daniel Bachhuber notifications@github.com wrote:\nCan you look into how this might be the case\n. \n",
    "michalkleiner": "I think it could be just an \"Info\" prefix of the message like so:\nInfo: Finished regenerating the image.\nOr empty:\nFinished regenerating the image.\n. I'd be interested in this flag to preserve old images as well. I might give it a crack and submit a pull request, the change is not that big as I already briefly browsed the code.\n. Thanks for a prompt reaction. It's not the same, I have a file that even doesn't have any metadata, don't know how it's possible but it's there. So I just moved the condition few lines above.\n. I tested with both phar file and clone of master too.\n. I think the condition should test for array as I suggested otherwise you can receive a PHP notice on trying to access a property of non array. For the file causing my issue wp_get_attachment_metadata returns empty string.\nAlso it's a good practise to test for existence of array keys prior to using them but that part can be omitted with less pain :)\n. Fair point, thanks for clarifying.\n. Fixed the indentation for Travis to pass and updated to latest master.\n. Thanks @danielbachhuber for integrating this.\n. Hi, I think that the variable shouldn't have the trailing full stop in it as it can't be used in the middle of sentence, that's why I changed it. Is it a big issue?\n. Ah, I see. It's not necessary to wrap with curly braces as it's a simple variable name. It would maybe make sense with object properties or multi level arrays. More examples at https://php.net/manual/en/language.types.string.php#language.types.string.parsing.complex.\nWhy are you after this? Is it causing you any issues or so?\n. It's nowhere in the code so I didn't introduce it just in my modification. You can of course create a separate pull request but that would be such a broad change that I'm not sure if the maintainers would be keen to accept it.\n. I understand @danielbachhuber, my point was to have this approach consistent across whole project, not just in one minor change.\n. Yeah, could do, I was more thinking about adding a standalone functionality not affecting any other switches or so. But yes, it's possible and it would make sense.\n. ",
    "Frique": "I've got the same issue on OSX 10.10.5, WP CLI 0.23.0.\nI can install plugins but not delete/uninstall any. It does print out a success message in the terminal, but the files are still there. It does work fine with themes.\n. ",
    "jazbek": "FTR, I would definitely use the aforementioned subcommand, hope you will share it! I was pretty excited when I saw this issue, but have to admit that I do agree with scribu's comments to some degree.\n. ",
    "pvanbavel": "After changing the EOL characters  the following worked just fine\n$ cd  $home\n$ ~/.bash_profile\n$ source \"/cygdrive/d/Users/Paul/Tempvb/wp-completion.bash\"\nSo  now I started the whole procedure all over with the following result:  -bash: wp: command not found\nPaul@PC-Paul /usr/local/bin/wp\n$ curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 1286k  100 1286k    0     0  63957      0  0:00:20  0:00:20 --:--:--  298k\nPaul@PC-Paul /usr/local/bin/wp\n$ php wp-cli.phar --info\nPHP binary:     /usr/bin/php\nPHP version:    5.5.19\nphp.ini used:   /etc/php5/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.17.1\nPaul@PC-Paul /usr/local/bin/wp\n$ chmod +x wp-cli.phar\nPaul@PC-Paul /usr/local/bin/wp\n$ ls -la\ntotal 1288\ndrwxr-xr-x+ 1 Paul           None       0 Dec 12 10:50 .\ndrwxr-xr-x+ 1 Paul           None       0 Dec 12 10:38 ..\n-rwxr-xr-x  1 Administrators None 1317194 Dec 17 18:33 wp-cli.phar\nNow try running wp --info.\nPaul@PC-Paul /usr/local/bin/wp\n$ wp --info\n-bash: wp: command not found\n. Sorry\n. ",
    "ChrisWiegman": "Hey y'all. This is the first I've heard of this. I'll add an override into iThemes Security to fix it.\n. I've already committed a fix for this to iThemes Security. We're in a release freeze until Jan 5th at which time I'll push it.\n. ",
    "simplenotezy": "Here, running localhost (with mamp):\n```\n<?php\n/\n * The base configurations of the WordPress.\n \n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information\n * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n \n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to \"wp-config.php\" and fill in the values.\n \n * @package WordPress\n /\n//  MySQL settings - You can get this info from your web host  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', 'wordpress');\n/* MySQL database username /\ndefine('DB_USER', 'root');\n/* MySQL database password /\ndefine('DB_PASSWORD', 'root');\n/* MySQL hostname /\ndefine('DB_HOST', 'localhost');\n/* Database Charset to use in creating database tables. /\ndefine('DB_CHARSET', 'utf8');\n/* The Database Collate type. Don't change this if in doubt. /\ndefine('DB_COLLATE', '');\n/#@+\n * Authentication Unique Keys and Salts.\n \n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n \n * @since 2.6.0\n /\ndefine('AUTH_KEY',         ',;{<(}s3F>}~G%Z.IW9O8r0IpI>Rg(Isu{I&^||}5$rI45My-F]TVsU#x&~FdIp');\ndefine('SECURE_AUTH_KEY',  'RlVF(TrUsH-a(: AO/qC7L5sBCsIkOy;jb4VNCo-i$EP8sG1U=H7 1DQ-g78-9');\ndefine('LOGGED_IN_KEY',    'oQ}3pCO8r;TqhEf{m:OZ0{b-TjGS3(qMGsyrF=@qsKuL!Al|Bf}7#]Qx,lhPPT');\ndefine('NONCE_KEY',        '-S%j-Uu7 Xf{Whz^vGZ6<$524Y.3#xZee@X<2Lw=0FzAgRzY_I;1m');\ndefine('SECURE_AUTH_SALT', 'ht{Y[ss+-l|FV;xXxU[F-eIvf/xdsDz8H73~.:TAp_t#xp@D=6b$;T-lhim^rne');\ndefine('LOGGED_IN_SALT',   '$H=|>j/x;Vb=[Mtt :B=]}C%LqaEy)w$]yNa0&5(5iEiv9Wfkr>cWH&v%0ajlev');\ndefine('NONCE_SALT',       '&pT)v.eV?e~8=zjUNG0bs|=RusQBN.#d7% T)YuDTpBId5E3CL_u2DU^s8d_`p');\n/*#@-/\n/\n * WordPress Database Table prefix.\n \n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n /\n$table_prefix  = 'wp_';\n/\n * WordPress Localized Language, defaults to English.\n \n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n /\ndefine('WPLANG', '');\n/\n * For developers: WordPress debugging mode.\n \n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n /\ndefine('WP_DEBUG', false);\n/ That's all, stop editing! Happy blogging. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/* Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\nadd_filter( 'http_api_transports', function()\n{\n    return array( 'streams' );\n});\n```\n. Great, thanks - it now works! But strange, because I never put this filter here. Came with the original wp-config I guess.\nAnyways; I am getting error:\n    Error: Error creating file: /Applications/MAMP/htdocs/wordpress/wp-content/plugins/myplugin/tests/bootstrap.php\n(tried creating the folder 'tests' manually, but still fails).\nWould you know why?\n. ",
    "hdeadman": "I am using version 0.17.1\n. The problem was the permissions on the wp-content/upload folder. It looks like the problem is from Wordpress so I will close this. \n. ",
    "gpspake": "Ok, that seems to do something at least but after knocking out a few errors I'm down to this:\nPHP Fatal error:  Call to undefined function cli\\mb_detect_encoding() in phar:///home/username/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/cli.php on line 164\nwhich looks like the same issue in #1537. Not sure what's going on there.\nIf it helps, I'm using PHP 5.3.3 on CentOS\n. Update: I installed the mb_detect_encoding module which solved my previous issue. Now search replace completes but makes 0 replacements. I tried the following:\nwp search-replace --url=old-domain old-domain new-domain\nwp search-replace --url=old-domain old-domain new-domain --precise\nBoth complete successfully but make no changes. Just to ensure that I'm not confused and I'm using the correct strings, I tried the interconnectit search replace again and it worked.\n. @danielbachhuber and @rodrigoprimo I really like the idea of aliasing this specifically to replace the domain, since that's probably the most common use case. One note there: It might be a good idea to include an option to replace it in wp-config.php as well in case it's hard-coded for multi-site installs.\n. No; I'm still trying and it's still not working for me. Here are some more details...\nI'm moving a site from site.company.com to sitedevl.company.com\nOnce I've moved the database and the files from site.company.com to sitedevl.company.com I need to replace every instance of site.company.com in the database with sitedevl.company.com\nNote: This is a multisite install so, at this point, the wpconfig file still defines the current domain as site.company.com:\ndefine( 'DOMAIN_CURRENT_SITE', 'site.company.com' );\nso if I try to go to sitedevl.company.com in a browser, I'm just redirected to the old site.\nSo if I run any of the following commands, nothing happens. I don't get any output at all:\nwp search-replace site.company.com sitedevl.company.com\nwp search-replace --url=site.company.com site.company.com sitedevl.company.com\nwp search-replace --url=site.company.com site.company.com sitedevl.company.com --precise\nIf I change the entry in wpconfig to define the domain as sitedevl.company.com: \ndefine( 'DOMAIN_CURRENT_SITE', 'sitedevl.company.com' );\nand got to sitedevl.company.com in a browser I'm no longer redirected but I get a database connection error (Since the database still contains site.company.com)\nSo let's see what happens now...\nOnce I've changed the config file, all of the commands listed above return <h1>Error establishing a database connection</h1> which is the same output I get in a browser. This seems odd.\nFinally, just to make sure I'm trying to do the right thing, I drop the Interconnectit search replace tool in my wp directory, navigate to it in my browser and do a search replace for site.company.com to sitedevl.company.com and it works and I can access the site from sitedevl.company.com\nSo, with all that being said, what could I be missing? Since wp search-replace command isn't giving me any output, is there anyway to see logs or find out what might be wrong?\n. Update: I made some changes to my wp-cli config file and tried again and got the following: \n```\n$ wp search-replace --url=site.company.com site.company.com sitedevl.company.com --precise\n+------------------+-----------------------+--------------+------+\n| Table            | Column                | Replacements | Type |\n+------------------+-----------------------+--------------+------+\n| wp_commentmeta   | meta_key              | 0            | PHP  |\n| wp_commentmeta   | meta_value            | 0            | PHP  |\n| wp_comments      | comment_author        | 0            | PHP  |\n| wp_comments      | comment_author_email  | 0            | PHP  |\n| wp_comments      | comment_author_url    | 0            | PHP  |\n| wp_comments      | comment_author_IP     | 0            | PHP  |\n| wp_comments      | comment_content       | 0            | PHP  |\n| wp_comments      | comment_approved      | 0            | PHP  |\n| wp_comments      | comment_agent         | 0            | PHP  |\n| wp_comments      | comment_type          | 0            | PHP  |\n| wp_links         | link_url              | 0            | PHP  |\n| wp_links         | link_name             | 0            | PHP  |\n| wp_links         | link_image            | 0            | PHP  |\n| wp_links         | link_target           | 0            | PHP  |\n| wp_links         | link_description      | 0            | PHP  |\n| wp_links         | link_visible          | 0            | PHP  |\n| wp_links         | link_rel              | 0            | PHP  |\n| wp_links         | link_notes            | 0            | PHP  |\n| wp_links         | link_rss              | 0            | PHP  |\n| wp_options       | option_name           | 0            | PHP  |\n| wp_options       | option_value          | 6            | PHP  |\n| wp_options       | autoload              | 0            | PHP  |\n| wp_postmeta      | meta_key              | 0            | PHP  |\n| wp_postmeta      | meta_value            | 8            | PHP  |\n| wp_posts         | post_content          | 1324         | PHP  |\n| wp_posts         | post_title            | 0            | PHP  |\n| wp_posts         | post_excerpt          | 0            | PHP  |\n| wp_posts         | post_status           | 0            | PHP  |\n| wp_posts         | comment_status        | 0            | PHP  |\n| wp_posts         | ping_status           | 0            | PHP  |\n| wp_posts         | post_password         | 0            | PHP  |\n| wp_posts         | post_name             | 0            | PHP  |\n| wp_posts         | to_ping               | 0            | PHP  |\n| wp_posts         | pinged                | 0            | PHP  |\n| wp_posts         | post_content_filtered | 0            | PHP  |\n| wp_posts         | guid                  | 5266         | PHP  |\n| wp_posts         | post_type             | 0            | PHP  |\n| wp_posts         | post_mime_type        | 0            | PHP  |\n| wp_term_taxonomy | taxonomy              | 0            | PHP  |\n| wp_term_taxonomy | description           | 0            | PHP  |\n| wp_terms         | name                  | 0            | PHP  |\n| wp_terms         | slug                  | 0            | PHP  |\n| wp_usermeta      | meta_key              | 0            | PHP  |\n| wp_usermeta      | meta_value            | 7            | PHP  |\n| wp_users         | user_login            | 0            | PHP  |\n| wp_users         | user_nicename         | 0            | PHP  |\n| wp_users         | user_email            | 0            | PHP  |\n| wp_users         | user_url              | 0            | PHP  |\n| wp_users         | user_activation_key   | 0            | PHP  |\n| wp_users         | display_name          | 0            | PHP  |\n+------------------+-----------------------+--------------+------+\nSuccess: Made 6611 replacements.\n```\nThe problem is... it still doesn't seem to work. After that, I still get a database connection error when I go to the site. So if I run interconnectit search replace in the browser again, it makes an additional 66005 replacements and the site works.\nFor reference here's my wp-cli config.yml file\npath: /var/www/wordpress\ndebug: true\ndisabled_commands:\n  - db drop\n  - plugin install\ncore config:\n        dbname: dbname\n        dbuser: dbusername\n        dbpass: dbpassword\n. Aw snap. that did it @rodrigoprimo\nThis is what ended up working:\nwp search-replace --network --url=site.company.com site.company.com sitedevl.company.com --precise\nThanks for all the help guys.\n. @danielbachhuber Now that I understand everything, I think the docs cover it all pretty clearly. I probably could have done a better job of reading them :)\nThe only thing I could think of is maybe including an example with --url on the search-replace page since it might not work if you have one hardcoded in your config file. It makes sense to me now but I was missing that originally.\nOnce I got it working, I ended up setting up my own script to use search-replace and used sed to search and replace the same inputs in wp-config. I don't know if it would be dangerous to include that but if you're replacing  the domain on a network db, it's necessary. It might be nice to work that in as a --domain option or something.\n. ",
    "mjmunger": "Had the same problem with a single-site. It should be noted here that you must create a config file (http://wp-cli.org/config/) that includes the path to your wordpress install and the user / pass for database access in order for this to work. \n. ",
    "Bubelbub": "Its not working on windows.\nC:\\xampp\\htdocs\\wordpress>wp search-replace example.org localhost\n+-------+--------+--------------+------+\n| Table | Column | Replacements | Type |\n+-------+--------+--------------+------+\n+-------+--------+--------------+------+\nSuccess: Made 0 replacements.\nBut this works.\nC:\\xampp\\htdocs\\wordpress>wp user list\n+----+-------------+-------------+-------------+-------------+----------------+\n| ID | user_login  | display_nam | user_email  | user_regist | roles          |\n+----+-------------+-------------+-------------+-------------+----------------+\n| 1  | johndoe      | John Doe | john@doe.com | 2015-12-12  | administrator  |\n+----+-------------+-------------+-------------+-------------+----------------+\nAnd on Linux it's working, too.\nI installed wp-cli through the composer.phar in C:\\xampp\\wp-cli and added C:\\xampp\\wp-cli\\bin in the PATH settings.\n. ",
    "displaynone": "I now it is closed. \nI had the same issue, the problem was that you have to remove quotes:\n\nwp search-replace 'site.company.com' 'sitedev.company.com'\n\nChange it for\nwp search-replace site.company.com sitedev.company.com\n. ",
    "cfxd": "Just want to thank you for posting this. I experienced the same issue while trying to perform a wp media regenerate. Almost all other commands worked and changing my DB_HOST to 127.0.0.1 from localhost did the trick. Thank you \ud83d\ude4f\ud83c\udffb. Indeed that appears to be the issue, @danielbachhuber. The Gravity Forms db tables all begin with <$table_prefix>_rg_ and are absent from the export.\nWhy is this behavior different from a standard $ wp db export command (which I confirmed actually does export the entire db including the Gravity Forms tables)?\nEDIT\nThe different behavior between $ wb db export and a search-replace with the --export flag is disconcerting but adding the --all-tables flag to the search-replace command appears to successfully export the entire database. Thanks @danielbachhuber.\n. Thank you, @danielbachhuber!\n. ",
    "SuperstrongBE": "Encounter the same issue ! Solved. As @cfxd Say thank for the trick !. ",
    "betweenbrain": "Just adding that I also ran into this issue, and changing the wp-config.php, from define('DB_HOST', 'localhost'); to define('DB_HOST', '127.0.0.1'); solved the issue. Since localhost is the WordPress default, is this some WP-CLI could handle?. ",
    "oneumyvakin": "It's same issue as i've described here https://github.com/wp-cli/wp-cli/issues/1483\nI have a lot of WordPress instances with a non-public or commercial themes and plugins which code quality is low. I'm not a owner of this WordPress instances so I can't just fix it, or report bugs to a vendors(because it's actually a lot of different vendors), or disable theme. \nRight now I'm using my own patches on wp-cli, but they are not production ready.\n. I've create PR #1595, may be it can help you.\n. As I remember there can be a list of themes in CLI: \n--skip-themes=t1,t2\nor config: \nskip-themes:\n- t1\n- t2\nIn my case config is a global config for several independent WPs, so I can skip problem themes by name and do not skip all other themes.\n. Sorry guys, I've to create new PR #1599 \nTests are added.\n. ",
    "DaveHewy": "Do you have some code in the wp-config file which looks at the HTTP_HOST in $_SERVER ?\n. ",
    "dnaber-de": "I've got a similar problem here: fresh WP 4.1 multisite install. (Ubuntu 12.04) \n$ wp core check-update\nPHP Notice:  Undefined index: HTTP_HOST in /var/www//***/wp-includes/ms-settings.php on line 30\nNotice: Undefined index: HTTP_HOST in /var/www/***/wp-includes/ms-settings.php on line 30\n$ wp cli info\nPHP binary: \nPHP version:    5.3.10-1ubuntu3.15\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.17.1\nThe wp-config.php:\n```\n<?php\n/\n * MySQL credentials\n */\nconst DB_NAME     = '**';\nconst DB_USER     = '*';\nconst DB_PASSWORD = '*';\nconst DB_HOST     = 'localhost';\nconst DB_CHARSET  = 'utf8';\nconst DB_COLLATE  = '';\n$GLOBALS[ 'table_prefix' ] = '**_';\n/\n * multisite\n */\nconst WP_ALLOW_MULTISITE    = TRUE;\nconst MULTISITE             = TRUE;\nconst DOMAIN_CURRENT_SITE  = '****.dev';\nconst PATH_CURRENT_SITE    = '/';\nconst SITE_ID_CURRENT_SITE = 1;\nconst SUBDOMAIN_INSTALL    = TRUE;\nconst COOKIE_DOMAIN        = '';\n/*\n * debugging\n /\nconst WP_DEBUG         = TRUE;\nconst WP_DEBUG_DISPLAY = TRUE;\nconst WP_DEBUG_LOG     = FALSE;\nconst SCRIPT_DEBUG     = TRUE;\n/\n * security keys\n \n * @link https://api.wordpress.org/secret-key/1.1/salt/\n /\ndefine('AUTH_KEY',         '**');\ndefine('SECURE_AUTH_KEY',  '*');\ndefine('LOGGED_IN_KEY',    '');\ndefine('NONCE_KEY',        '');\ndefine('AUTH_SALT',        '');\ndefine('SECURE_AUTH_SALT', '');\ndefine('LOGGED_IN_SALT',   '');\ndefine('NONCE_SALT',       '*');\nif ( ! defined( 'ABSPATH' ) )\n    define( 'ABSPATH', DIR . '/' );\nrequire_once ABSPATH . 'wp-settings.php';\n``\n. Able maybe but out of free time. At least not before the end of the week.\n. Well, I won't believe it but @szepeviktor pointed it out. TheRunner::guess_url()parses thewp-config.phpand [looks fordefine` statements](https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L214):\n$re_define = \"#.*define\\s*\\(\\s*(['|\\\"]{1})(.+)(['|\\\"]{1})\\s*,\\s*(['|\\\"]{1})(.+)(['|\\\"]{1})\\s*\\)\\s*;#iU\";\nDo you want it to be fixed? It should also look up for const statements as this is also a valid method to define constants. \nMight be worth a own issue as I'm not sure whether it's also fits @rnaby's problem.\n. Using const Foo = 'Bar'; is semantically identical to define( 'Foo', 'Bar' ); yet better readable and maintainable. However, it is supported since PHP 5.3.0 and as WP-CLI requires at least PHP 5.3.2 one could expect that it is aware for the const keyword. \nIf you want to have this issue fixed, I would work on a fixture for that and provide a pull request.\n. Well, I see no reason why these WP constants need to be defined at run-time. Beside that, it's a small performance benefit.\nI'm not sure what we are talking about here. The underlying problem is that the parsing of wp-content.php is not really solid. So the regular expression also detects constants which are \u00bbdefined\u00ab inside comments. It wouldn't take much effort to make it at least aware of the const keyword. \nHowever, I offered my help, and I still do. Meanwhile my wp-config.php looks like this:\nconst WP_ALLOW_MULTISITE   = TRUE;\nconst MULTISITE            = TRUE;\nconst DOMAIN_CURRENT_SITE  = '*********';\nconst PATH_CURRENT_SITE    = '/';\nconst SITE_ID_CURRENT_SITE = 1;\nconst BLOG_ID_CURRENT_SITE = 1;\nconst SUBDOMAIN_INSTALL    = TRUE;\nconst COOKIE_DOMAIN        = '';\n/**\n * fix for WP-CLI\n * @see https://github.com/wp-cli/wp-cli/issues/1596\n *\ndefine( 'DOMAIN_CURRENT_SITE', '*******' );\ndefine( 'PATH_CURRENT_SITE', '/' );\n */\n. @danielbachhuber Well the necessity of interpreting the wp-config.php without including it, is clear. The most reliable way would be to use a PHP parser instead of regular expressions.\nHowever, I still don't know why it would be a problem to make Runner::guess_url() aware of the const statement (additionally to the defnie function) using the same way like it looks for define (reg exp).\n. This isn't a support request, it's a bug report.\n. Well obviously the Requests-lib shipped with WP-CLI is incompatible with that one in WP-Core. This can only be handled by WP-CLI.\n. Thanks. I didn't noticed the available update (0.25.0).\n. Actually a duplicate of #4600. ",
    "codemascot": "Yes. I've modified the folder structure to make version management easy. @DaveHewy . Is this causing the problem ?\n. ",
    "yivi": "Yup, I think that optional regex would be the way to go. But having the option would be a lifesaver ocasionally. Again, in the project I mentioned early that's the way it works: regular search unless you specify regex.\n. In a regular wp install (without putting wp files in a separate folder, and using just wp-content) it does generate the theme files.\n. That's the first thing I checked :)\nNo, no theme files in wordpress/wp-content.\nStill; it would surprise me, since it in scaffold.php:191 it is using WP_CONTENT_DIR as a location to put the theme in.\n\n. $_SERVER['DOCUMENT_ROOT'] seems to be blank, when running a simple php script through the cli  that does print_r($SERVER)\nBeen looking around higher up in the machine's path, but couldn't find it anywhere.\nAnd why does it work when the structure is the default one (wordpress files in the root directory, and with wp-content among those files)?\n. Since $_SERVER['DOCUMENT_ROOT'] was blank, my WP_CONTENT_DIR wasn't being set properly.\nI changed that define to: define( 'WP_CONTENT_DIR', dirname( __FILE__ ) . '/content' ); and now it works properly.\nStill, for me the main problem was the false report of success. I added this code to scaffold.php to account for this:\n``` php\n        $unzip_result = unzip_file( $tmpfname, $theme_path );\n        unlink( $tmpfname );\n    if ( TRUE === $unzip_result ) {\n        WP_CLI::success( \"Created theme '{$data['theme_name']}'.\" );\n    } else {\n        WP_CLI::error( \"Could not decompress your theme files ('$tmpfname') at '$theme_path': \" . $unzip_result->get_error_message() );\n    }\n\n```\nIt's probably too trivial to merit a pull request, and maybe the error is too verbose for some people? I just thought that it would give the appropriate hints for people like me who would stumble on something like this.\n. Sorry about all the uppercase booleans. My IDE is set to autoformat on save and I didn't realize I had changed things all around the file... :P\nI don't know anything about functional tests. I'll try to read some later tonight to see if I can whip up something for tomorrow. Should I include my tests in scaffold.feature? (If I manage to understand things well enough)\n. Sorry Daniel, had no time yet. Tomorrow Saturday I'll spend some time\nreading about tests and trying to finish this, or I'll tell you if I find I\ncan't do it in time.\nRegards,\n2015-04-02 14:52 GMT+02:00 Daniel Bachhuber notifications@github.com:\n\n@yivi https://github.com/yivi Will you be able to complete this?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/1699#issuecomment-88886870.\n. @danielbachhuber , finished with the functional test for this check.\nHopefully it's what you were looking for, and the test is not too simplistic.\n\nSince I think that there could be other scenarios where the unzip could fail (permissions come to mind), rather than trying to think all the possible situations that would bring a failed outcome I'm just setting wp_content_dir so the following unzip operation will generally fail, and hopefully cover more ground that way.\nRegards\n. Merged, @danielbachhuber \nThere are a couple tests that fail on my machine:\nimport.feature:43\npost.feature:32\nuser.feature:203\nBut they don't aren't related to this PR, and they seem to fail for small output differences...\nRegards,\n. ",
    "lukerollans": "@danielbachhuber index.php is indeed in the root directory. I'm confused as to the need for logic as wp-config.php should always be in the root?\n. Is it possible to add an option to write the resultant wp-config.php file to the current directory wp is running from?\n. I wouldn't agree that WordPress core in a subfolder is of limited utility, but thanks for your time\n. ",
    "athoune": "I work with old school sysadmins. Table and user creations are admin jobs, not a developer task.\nBut devops exist, and they can create their own db. I don't know what can be the \"right behavior\". Something like --restricted-user, --mutualized-db ?\n. ",
    "igmoweb": "Thanks for the quick response but you may want to execute multisite tests and also single sites tests for the plugin. Instead of setting a global variable you'd just need to run phpunit -c ... It's quicker I think.\n. ",
    "connerbw": "@danielbachhuber I'm also getting this error. The plugin I work on is exclusively for WP multi-site and will not work in single site.\nWhere do I set WP_MULTISITE environment variable? I already have it in my wp-config. The WP-CLI is putting the files it uses in /tmp with no config. It is unclear to me what you are proposing.\nHelp?\n. Whoops, nevermind.\nAdded \nxml\n    <php>\n        <const name=\"WP_TESTS_MULTISITE\" value=\"1\" />\n    </php>\nto phpunit.xml, worked. Thanks.\n. > Why?\nTwo reasons:\n- I encountered a bug (https://github.com/sebastianbergmann/phpunit/issues/1898) which is fixed in 4.8\n- Your wiki explicitly says: \"Note: phpunit 4.8.x is required (5.x won't work)\" but travis-ci.org, with the current yaml config generated by WP-CLI, runs PHPUnit 4.5.0.\n. Woops, sorry. Nobug. \nWP_CACHE was defined twice in the config. \nThanks.\n. ",
    "tobyhage": "i ran into this issue today too. is there already a fix?\n. ",
    "kossmann": "Any workaround until there is no fix?\n. ",
    "here": "@kossmann @tobyhage -- Use regex support? :)\nSee https://github.com/wp-cli/wp-cli/issues/1600 https://github.com/wp-cli/wp-cli/pull/1861\n. Confirming that this now works to toggle the \"Search Engine Visibility\" setting under Settings -> Reading Settings\nwp option update blog_public 0. Related release notes regarding v21.1 and WordPress v4.4+ at http://wp-cli.org/blog/versions-0.21.1-and-0.20.4.html\n. ..and someone helpfully points out that the wp-cli.org homepage clearly shows \"WordPress 3.5.2 or later\".\nUnless there is further detail or comment, this can be closed.\n. ",
    "janmazanek": "The same problem on my installation. Double quotes are not escaped:\nError: Database error: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%\" LIMIT 1000 OFFSET 0' at line 1\nWordPress database error: [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%\"' at line 1]SELECT COUNT(*) FROM wp_options  WHERE `option_value` LIKE \"%www.vyrobnihaly.cz/ll\"%\"\nWordPress database error: [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '%\" LIMIT 1000 OFFSET 0' at line 1]SELECT `option_id`, `option_value` FROM wp_options  WHERE `option_value` LIKE \"%www.vyrobnihaly.cz/ll\"%\" LIMIT 1000 OFFSET 0\n. ",
    "2ndkauboy": "No problem @danielbachhuber. I haven't used mustache before, so i didn't know that they are needed.\n. It's version 0.22.0, so if you fixed it in the newest release, it might be OK.\n. OK, it seems that with 0.23.0 everything is fine. Sorry for reporting the same issue again, but I haven't found it.\n. Your welcome. As I use this scaffold command regularly and I had always problems with the translation, I checked the current string and found my issue with it :)\n. ",
    "jawittdesigns": "\nYou mean, all of the code that install-wp-tests.sh add gets erased, or the actual file itself? In either case, neither of these should be helping.\n\nAll the code in the file gets erased as soon as I run a test\n\nThis should happen when WordPress is installed. Did you wait that long?\n\nWell, I waited until it was done. It wasn't unusually long. \n. Yeah, I'm not too sure about it either. \nI was using MAMP, so I uninstalled that and just set up a basic Apache, mySQL, PHP stack. That seemed to work, because now everything is working fine. I'm not even sure if I can reproduce the issue now.\n. ",
    "codecowboy": "Looks like I need a config file containing:\nurl: http://local.mydevsite\n    user: myuser\n    color: false\n    core config:\n        dbuser: dbuser\n        dbpass: dbpass\n        extra-php: |\n            define( 'WP_DEBUG', true );\n. thanks, is it me or are the docs not consistent on the '-' and '--' ? The note on multisite at http://wp-cli.org/ says '--' but the command page - http://wp-cli.org/ - has a single '-'\n. ",
    "nextgenthemes": "Fatal error: Call to undefined function add_filter() in phar:///home/xxxxxx/bin/wp/php/wp-cli.php(23) : eval()'d code on line 92\nI am on webfaction if that matters. And I use Q2A WP intergration, so i have the following added to my wp-config.php (start and end)\n```\n<?php\n/\n * The base configurations of the WordPress.\n \n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information\n * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n \n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to \"wp-config.php\" and fill in the values.\n \n * @package WordPress\n /\ndefine('COOKIEPATH', '/');\ndefine('COOKIE_DOMAIN', '.nextgenthemes.com');\n--- normal config removed ---\nadd_filter('allowed_redirect_hosts', 'qa_wordpress_redirect_hosts');\nfunction qa_wordpress_redirect_hosts($content) {\n    $content[] = 'community.nextgenthemes.com';\n    return $content;\n}\n```\n. @szepeviktor Awesome thanks, I somehow guessed this but did ask b4 thinking of mu-plugins.\n. @zzzerotime I would not post my database name publicly. Not sure how risky it is since there is of course no user+pw but still.\n. ",
    "EndemolUK": "As a quick and simple fix then the following mod at the end of wp-config.php should always work I think?\nChange:\n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');\nTo \nif(!function_exists('wp_unregister_GLOBALS'))  {\n    /** Sets up WordPress vars and included files. */\n    require_once(ABSPATH . 'wp-settings.php');\n}\nThis way if using wp-cli's internal version of wp-settings.php we don't load the site's version, and the regex that wp-cli requires to work is preserved. If just running the site as normal it'll still load too. \nI don't see this as a permanent answer to the issue but it works for me.\n. ",
    "bloqhead": "@EndemolUK that actually worked for me as well. Thank you!\n. ",
    "danyalette": "if you are using Pantheon and are having this issue (i.e. getting a seemingly random fatal error - \u00e0 la Fatal error: Cannot redeclare wp_is_mobile() (previously declared in /path/vars.php:126) in phar:///usr/local/bin/wp/php/wp-settings-cli.php on line 271  when you attempt to use the wp cli):\nthe require statement giving you trouble is in wp-config-local.php, not in wp-config.php .\nI simply commented out require_once(ABSPATH . 'wp-settings.php'); in wp-config-local.php (and left it as-is in wp-config.php). This solved my wp-cli problem and doesn't appear (so far) to have any adverse effects (since wp-settings.php does still get loaded in wp-config.php)\n. because of how common this issue appears to be, it might make sense for wp-cli itself to set an environment variable? i can imagine a variety of situations, beyond loading the config, that could benefit from the ability to detect whether the request is coming from wp-cli \n. @AlexeyKrivoruchko: as per @danielbachhuber you can bypass the need for an env var and simply check for \nif ( defined( 'WP_CLI' ) && WP_CLI )\nin your config.php\nEveryone on Pantheon attempting to use wp-cli will encounter this issue. \nPantheon advocates the use of wp-cli. \n. ",
    "benlk": "If it's any use diagnosing this bug, the described behavior does not occur when run with the --debug flag, using Wordpress 4.5.2 and a Wordpress-generated wp-config.php:\nvagrant@precise64:/vagrant$ wp --debug\nDebug: No readable global config found (0.02s)\nDebug: No project config found (0.023s)\nDebug: No package autoload found to load. (0.04s)\nDebug: ABSPATH defined: /vagrant/ (0.041s)\nDebug: Begin WordPress load (0.044s)\nDebug: wp-config.php path: /vagrant/wp-config.php (0.045s)\nDebug: Loaded WordPress (2.491s)\nDebug: Running command: help (2.596s)\nand then I pressed q to exit the help list.\nRunning without --debug::\nvagrant@precise64:/vagrant$ wp\nPHP Fatal error:  Call to undefined function apply_filters() in /vagrant/wp-includes/load.php on line 315\nSystem information:\n```\nvagrant@precise64:/vagrant$ php --version\nPHP 5.3.10-1ubuntu3.23 with Suhosin-Patch (cli) (built: May 19 2016 20:38:03) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2012 Zend Technologies\nvagrant@precise64:/vagrant$ uname -a\nLinux precise64 3.2.0-23-generic #36-Ubuntu SMP Tue Apr 10 20:39:51 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n``\n. That's not quite what happened, but you're right that that install was using themaster` branch of https://github.com/wordpress/wordpress. Thanks! I'll downgrade it to 4.5.2.\n(https://github.com/INN/deploy-tools has a command fab wp.install, which I ran without the required version number argument, which downloaded the master branch of wordpress instead of failing. I'm not using VVV)\n. ",
    "senica": "For those that got here because of the add_filter error, just wrap your add_filters in a if(function_exists('add_filter')){ /* your add_filter functions here */ }\nIf you don't want to move them to a plugin or some of the other suggested routes.. ",
    "decadence": "It also fails if you have <? open tag in wp-config.php instead of <?php. @nickbreen glad you solved it. ",
    "temujin9": "Any chance that add_filter could be defined as a no-op fuction in this context, so that WP CLI can be used without requiring modifications? (EDIT: apparently, no. I'd forgotten that you can't redefine functions in PHP.). ",
    "paulschreiber": "I hit this because the last two lines in my wp-config weren't the expected:\n/** Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');. ",
    "nickbreen": "@decadence your comment led me to my fix. I had <?Php rather than <?php at the start of wp-config.php.\nThe cryptic error message in my case was:\nPHP Parse error:  syntax error, unexpected '<', expecting end of file in phar://\n/usr/local/share/php/wp-cli.phar/php/WP_CLI/Runner.php(941) : eval()'d code on line 1\nWhich, of course, implies some PHP file has a syntax error.. +1 for @ernilambar's suggestion... specification of the directory is ideal, as it also identifies the plugin in subsequent commands (like activate).\nI wrote my own (primitive) equivalents of this for GitHub and for Bitbucket, but only included them in my docker image: https://github.com/nickbreen/docker-wp-setup / php. In this case I renamed the ZIP folder to the name of the repository. This also supports specification of a tag/branch, and for GitHub by default fetches the releases list and chooses the most recent release (rather then master).\nWorth considering is that for GitHub we'll also want the option to specify an OAuth token (for private repos, and for rate limiting), and for Bitbucket a key and a secret (for private repos).\n. ",
    "MikeMikjaer": "I suspect this is the culprit: (from wp-config.php)\ndefine(?~@~XWPLANG?~@~Y, ?~@~Xda_DK?~@~Y);\n. I changed it to:\ndefine(\"WPLANG\", \"da_DK\");\nNow the warning's gone.\nShould we implement some way of validating the php-code before we invoke it?\n. Fair .. i wont submit a patch then :-)\n. ",
    "mjot": "Thanks Daniel. :)\n. Thanks Tom, great work!\n. ",
    "heiglandreas": "Hope that works out as expected. Especially the changes to templates/install-package-tests.sh I haven't been able to test by running the script. I just couldn't get it to run. What did I miss?\n. Great! Thx!\n. ",
    "Ramoonus": "Yes and no\nNot if you want to keep it supported \n\nOp 5 feb. 2015 om 20:18 heeft Daniel Bachhuber notifications@github.com het volgende geschreven:\nThanks! Can you drop 4.0 then?\n\u2014\nReply to this email directly or view it on GitHub.\n. then you can drop ...\n. you could make an if and replace tar xf with unzip\n. some lintworm playing up\nhttps://lint.travis-ci.org. there it goes\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/180142823 . \n",
    "acusti": "This is beautiful! In fact, this whole project, combined with _s, is beautiful, but this is the final piece that enables my ideal WP development workflow. Can\u2019t wait until the next release!\n. :+1: :godmode:\n. Right on. Should I create an issue for wp scaffold _s and make the same change there? I noticed the API for wp theme and wp plugin diverge (wp theme enable vs wp plugin activate).\n. Regarding adding an option for --activate-network, or whatever the nomenclature should be, like: wp scaffold _s starter-theme --activate-network\n. Alright, sounds good. Did you see my reply about removing the background section from the functional tests in scaffold.feature?\n. @danielbachhuber Thanks for merging it in!\n. @danielbachhuber I think I made this close from a commit that I rolled back in my previous PR, but the final PR doesn\u2019t actually implement this functionality. If adding these options to scaffold _s is something you agree would be worthwhile to add, I will make a new branch with the change and submit a PR, and I suppose this issue should be reopened until that makes it in.\n. I needed to use Given a WP multisite install on the --activate-network test; it\u2019s gross to add all the repetition, I know\n. That\u2019s the same line you commented on earlier that you suggested I change to an else if, no? This line fixes #1709, while the other lines fix #1711.\n. Okay. I rolled back to the last commit before I added the multisite-related changes to theme activation.\n. ",
    "isGabe": "Awesome! :beers: \n. ",
    "mikelyons": "The field value info here: http://wp-cli.org/commands/post/create/\nreferences the array of post attributes here: https://codex.wordpress.org/Function_Reference/wp_insert_post\nas I embarassingly discovered here: http://wordpress.stackexchange.com/questions/190540/how-do-i-set-and-list-page-template-with-wpcli/190542#190542\n. ",
    "ractoon": "Perfect, thanks!\n. ",
    "skynet": "No, just a matter of consistency on my end. Up to you if you want to merge or not. Thanks.\n. :+1:  Understand. We're all fans of different things in life :). Thanks for the great work with wp-cli!\n. ",
    "qm78": "Hi Daniel,\nplease see: http://pastebin.com/XHVPFBxr for my wp-config.php no secrets.\n. Indeed on was the problem. Thanks!\n. ",
    "Melindrea": "Exploring it further, it works if I give the exact path to the particular install. This is a fairly old installation (as in, it's been around a long time, not that it's outdated), is there something in the wp-config that could be missing from it?\n. It is in the WP root folder when I run it. The two wp-config.php files end as follows:\n```\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\ndefine('WP_CACHE', true);\n/* Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n```\n/ Det var allt, sluta redigera h\u00e4r! Blogga p\u00e5. /\n/* WordPress absoluta s\u00f6kv\u00e4g till Wordpress katalogen. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/* Anger WordPress v\u00e4rden och inkluderade filer. /\nrequire_once(ABSPATH . 'wp-settings.php');\n?>\n```\nRunning wp --debug plugin path doesn't give me more info than wp plugin path does\n. Yes to both (using www-data for a user)\n. eugh, yeah, that probably explains it. I'll have to learn to live with it, then. Thanks for the help!\n. ",
    "acobster": "@danielbachhuber , could you elaborate or a provide a link describing what you mean by \"compatible with WordPress core\"? Thanks for this awesome tool.\n. ",
    "mwithheld": "We've got ~4000 tables on a remote server at the moment.  With auto-rehash starting mysql takes ~2-3 minutes to gather the table and column names before it'll actually run a query.\n. I don't really understand why the build is failing on this now (https://travis-ci.org/wp-cli/wp-cli/jobs/51318140).  The output shows a bunch of rows and then says there isn't any rows.\n. Do I need to re-commit now that build 3707 (fixing the version check to allow 4.1.1) has gone through?\n. I don't know how to do that, sorry.  I've rebased my clone if that helps.\n. Here's  a variant for the cli.php code that works for me, in case it helps someone else:\n```php\n<?php\nerror_reporting(E_ALL | E_STRICT);\nini_set('display_errors', '1');\necho \"\\n\";\nif(!defined('STDIN'))  define('STDIN',  fopen('php://stdin',  'r'));\nif(!defined('STDOUT')) define('STDOUT', fopen('php://stdout', 'w'));\nif(!defined('STDERR')) define('STDERR', fopen('php://stdout', 'w'));\necho \"Started\\n\\n\";\n$return_status = false;\n$output = array();\n$executable = '/path/to/php-executable -c /path/to/php.ini -d error_reporting=\"E_ALL & ~E_NOTICE\" -d memory_limit=\"2048M\" -d max_execution_time=43200 wp-cli.phar ';\n//Redirect stdERR so we see warnings/errors\n$suffix = ' 2>&1';\n//echo 'Built executable='.$executable.\"\\n\";\n$command = 'user delete johnsmithfake --network --yes';\n$full_command = $executable.$command.$suffix;\necho \"About to execute command=\\n{$full_command}\\n\";\nexec($full_command, $output, $return_var);\necho \"---------------\\n\";\necho implode(\"\\n\", $output).\"\\n\";\necho \"---------------\\n\";\necho \"Return status (false/0 is success)=\".($return_status?1:0).\"\\n\";\necho \"\\nDone\\n\";\n```. PHP has the ability to run shell commands built-in (which may be disabled by server admins).  All the script does is build the command and run it, using built-in PHP to capture the output.. Suggestions for security -- don't capture data hackers could use, e.g. :\n\nIP, hostname, url, username running the processes\nSome parameter values, config values\n\nThe more info is released, the more likely admins are to opt out.\nYou might want to re-assure why admins should trust releasing data rather than opting out.. OK you're one level of awesome up!  Close to what I was looking for.  Maybe you could update\nhttp://wp-cli.org/commands/user/list/\nto indicate you can use --meta_key= --orderby=meta_value_num and --order=desc\nor add a link to where is says that in the docs.\nToo bad --fields can't also return last_activity or meta_value or meta_value_num\nAnd I can't see how to do the WHERE clause filtering, but that could get a bit nasty.\nThis sql gets close:\ndb query \"SELECT ID, user_login, um.* FROM uvwp_users u JOIN uvwp_usermeta um ON u.ID=um.user_id Where um.meta_key='last_activity' AND UNIX_TIMESTAMP(meta_value)<UNIX_TIMESTAMP('2017-1-1 00:00:01') ORDER BY um.meta_value\". IMO might not be worth implementing anything here more than what you've got.. ",
    "lukecav": "Also Gravity Forms now has https://github.com/gravityforms/gravityformscli\n. WP-CLI should be packaged in the WordPress application.\nhttps://bitnami.com/stack/wordpress. @danielbachhuber \nYes correct that use case would be for removing specific tables and not the entire database.\n. @blindpet \nYep correct.\nSeems like an option that would be of use. Again it might be an edge case, but I see it as being of use.\n. ",
    "Axisar": "Confirm. Same problem here. i`ve set --url=\"www.\" and all became good. but before, when i tried http://www.domain.com/, result was \"www.domain.comdomain.com\" after installation\n. ",
    "sepehr125": "Thank\nNope. Still in the dark about what could be causing this. Would be awesome\nto diagnose it. I imagine it's something in the hhvm config files.\nAny ideas on what to look for?\nThanks,\nSepehr\nOn Tuesday, March 3, 2015, Daniel Bachhuber notifications@github.com\nwrote:\n\nApologies for the late reply. Were you able to sort this out?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/1671#issuecomment-77093204.\n\n\nSent from Mobile\n. ",
    "danielst-vccp": "Yessir... nothing to see here.\n. ",
    "aaemnnosttv": "How about checking the file(s) that match the plugin slug in active_plugins,  {plugin-slug}/anything.php, and simply test for it's existence in the filesystem.  If it doesn't exist, then it should be safe to deactivate.\n. After taking a deeper look into the code behind this, I see that it is a little more complicated than I thought.\nThe main reason this doesn't work already is due to the Plugin Fetcher get method is based on get_plugins() which of course only returns installed plugins.\nOne solution might be to merge active_plugins as (object) ['name' => $path, 'file' => $path] with this list although I'm not sure as to what the best way to implement that might be.  The activation status checking is purely option-based, so those would return correctly thus allowing deactivation. \nI've tested this to work, so I am preparing a PR as a proof of concept and will submit this shortly :)\n. Thanks!\n. That sounds like a good change to me.  :+1:\n. This should be expected behavior because the packages are installed as dev-master each installed package is a cloned git repository. When Composer attempts to update a package installed as a git repository, it will try to checkout the new reference.  Since the installed package in this case had modified files, git can't checkout the new reference because the working directory is dirty.  I believe when running a composer update normally, Composer will ask you if you want to keep or discard the modifications with a prompt in a situation like this, but I'm guessing WP-CLI is running this non-interactively and so the safter default to not discard them is used.\nI would think we would want to preserve this behavior as well to prevent accidental loss of changes.  Perhaps we could add a --force flag which would do a git reset --hard or simply just delete the installed repo first to force a clean install?\n. This seems like the way to go, as both launch_self and run_command didn't work for me and I was more/less forced to reimplement this based on what you did in the rest diff command there.\n. I think a key point to add to that list of criteria would be something along the lines of:\n\n\nFollows semantic versioning.\n\n\nWP-CLI would probably then want to define some guidelines as to what that means specifically (what version of Semver, etc), but IMO this should be a fairly baseline requirement for an \"Extraordinary\" package.\nAlso, it might be cool to offer such packages as a subset in browse?\nwp package browse --league\nWhere can we start to collaborate on some guidelines?\n. I was thinking about that, but I'm not sure what the best way to handle that would be.  I would need to modify the packages composer.json that the wp-cli tests use.  Can you point me in the right direction there?\n. Hey Daniel, see what you think about the test I added.  It's a little more verbose with the scripting in the scenario, but it works.  You have any ideas as to how to clean that up, or you think it's ok?\n. Not sure why this failed...\n\nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\n\nRetry?\n. All of the assertions of the test are passing, but it's just hanging there at the end, which is what happened on Travis too.  Really strange..  any idea why it would be locked up like that?  I've tried it a bunch of different ways but it keeps getting stuck at the end and I have to ctrl-c it to stop it, and then it goes to the next scenario.\n\nChanging the package directory to a sub directory doesn't change anything either.\nYou seen anything like that before?\n. Success!\n. Anything more here before we can merge this one?\n. I would say that this is a feature request on the internal API level.\nA simple example would be a get_flag($flag, $default = null) method on said class.\nThen within the class, within any of the methods you can simply $this->get_flag('foo') rather than passing the $assoc parameter around and calling the big namespaced function.\nOr we could even make use of the synopsis to access parameters using names\nSomething like \nphp\n/**\n * Follow a user\n * <user> <network> [--send-happy-face]\n *\nWe might be able to access the parameters like so:\n``` php\n// pseudo code\n{\n    $this->param('user')\n    $this->param('network')\nif ($this->get_flag('send-happy-face')) {\n    // deploy happy face\n}\n\n}\n```\nBy making parameters available on the class at call-time, other cool things become possible, while still remaining compatible with the current way of doing things.\n. Thanks for the link there, the Request class is an interesting idea.  I've been playing with it a bit, but I don't feel like it is a good fit in this case.\nI agree with you in regards to making something available as a package first before including in core, but I think we might need a few minor additions in core first (I'll open a new issue).\nUsing the Request class to solve this is a bit awkward because its re-parsing and processing all the arguments from the $argv global rather than accessing what is already done and should be available.  I get that there may be use cases where this makes sense, but in my case, I really just want access to the arguments for the command before the method is invoked.\nConsider this simple command:\n``` php\nuse WP_CLI\\Request;\nclass TestCommand\n{\n    /\n     * Say something\n     \n     * \n     * : What to say?\n     \n     * @when before_wp_load\n     */\n    public function say()\n    {\n        WP_CLI::line(Request::get_from_argv()->get_positional_args()[0]);\n    }\n}\nWP_CLI::add_command('test', TestCommand::class);\n```\nThis produces undesired results because it lacks the context of the command being invoked.\n$ wp test say hi\ntest\nThe command outputs \"test\" instead of \"hi\".\nAfter digging into this more, it seems like a better alternative to achieve the result I'm looking for would be to hook into the before_invoke:{$cmd} wp-cli hook, and get the arguments there, but of course that isn't possible right now.  \nThe other part that I mentioned as a nice enhancement would be the ability to access positional arguments with names is not possible with the Request class as it is now.  In the above example the use would look something like:\nphp\n$this->argument('what') // returns \"hi\"\nI'm not sure that could be done as a package either as it would require access to the invoked command's spec including positional arguments.\n. Yeah, thanks for reminding me.\nI think it's necessary for making wp-cli more extensible as you suggested in #3354, as merely having lifecycle events without providing any data are not very useful in my opinion.\nThis becomes especially useful for events which would fire before_wp_load where using the core plugin api is unavailable.\nIn the aforementioned issue, my use case there is that the experience of writing commands could be improved by making the arguments available before the method is invoked (there's more to it than that of course but I won't rehash that whole issue again here).  The least obtrusive way this can be made available (without having to reparse everything from the request) would be publishing an event with that data.\nI was a bit surprised to see that the internal hook system doesn't allow for data passed to it's hook callbacks and I don't really see much reason not to.  Was this ever considered before?\n. > Why can't you have your callback access WP_CLI::get_runner()->arguments and WP_CLI::get_runner()->assoc_args ?\nBecause they're not the same.\nConsider this example:\n``` php\n/\n     * Say something\n     \n     * ## OPTIONS\n     \n     * []\n     * : What to Say\n     * ---\n     * default: Hi there!\n     * ---\n     \n     * [--loud=]\n     * : How loud?\n     * ---\n     * default: 5\n     * options:\n     *   - 1\n     *   - 5\n     *   - 10\n     *   - 11\n     * ---\n     \n     * @when before_wp_load\n     */\n    public function say($method_args, $method_assoc)\n    {\n        $runner = WP_CLI::get_runner();\n    print_r([\n        'args' => [\n            'method' => $method_args,\n            'runner' => $runner->arguments\n        ],\n        'assoc' => [\n            'method' => $method_assoc,\n            'runner' => $runner->assoc_args\n        ]\n    ]);\n}\n\n```\nRunning wp test say outputs totally different results\n```\nArray\n(\n    [args] => Array\n        (\n            [method] => Array\n                (\n                    [0] => Hi there!\n                )\n        [runner] => Array\n            (\n                [0] => test\n                [1] => say\n            )\n\n    )\n\n[assoc] => Array\n    (\n        [method] => Array\n            (\n                [loud] => 5\n            )\n\n        [runner] => Array\n            (\n            )\n\n    )\n\n)\n```\nIs there a way to get the same arguments that are passed to the method before it's called?\n. This looks like a great idea! do_hook() can already pass arguments to its callbacks as of #3470 ;). Does it need to be encoded? Other hooks currently preserve the space such as before_invoke:{$cmd}. I like the dot syntax, and agree with the paranoia but I am using this hook in it's current form so be careful to change it :). Any reason not to bump PHP to 5.6? 5.5 has been end of life for 8 months already and 5.6 is at least supported until 2019. http://php.net/supported-versions.php. I realize this is a runcommand thing, but is it not the same as\nwp hook the-cron-event-name\ne.g.\n```\nwp cron event list\n+---------------------+---------------------+-------------------+------------+\n| hook                | next_run_gmt        | next_run_relative | recurrence |\n+---------------------+---------------------+-------------------+------------+\n| wp_version_check    | 2017-02-25 21:55:38 | now               | 12 hours   |\n| wp_update_plugins   | 2017-02-25 21:55:38 | now               | 12 hours   |\n| wp_update_themes    | 2017-02-25 21:55:38 | now               | 12 hours   |\n| wp_scheduled_delete | 2017-02-25 21:57:15 | now               | 1 day      |\n+---------------------+---------------------+-------------------+------------+\nwp hook wp_version_check\n+--------------------+---------------------------+----------+---------------+\n| callback           | location                  | priority | accepted_args |\n+--------------------+---------------------------+----------+---------------+\n| wp_version_check() | wp-includes/update.php:24 | 10       | 1             |\n+--------------------+---------------------------+----------+---------------+\n```\n@johnbillion are you suggesting a kind of combined table for combining the output of wp hook for each cron in the list?. I hear you. I guess I don't see it being too much of a burden as it could be added over time and I feel like the examples I gave would be loose enough that they shouldn't need to be changed in big swaths across the codebase. It should only need to be changed when you're working on a new feature or updating an old one.\n\nPersonally, when I'm working on a specific scenario, I tag it with @daniel and then run behat --tags=\"@daniel\"\n\nThis is kind of what I've been doing too.  Is this documented anywhere?  If this is the recommended way right now, it would be useful to others as well.. > If you want to spend a bit more time writing docs, it'd be great if you worked on a consolidated document: wp-cli/handbook#3\nI may do that.. I can't argue that it is necessary but it would certainly be a really nice convenience and support for DRYer command methods. For example, if you had several sub-commands in the class which all have some common initialization code to run at the beginning which relies on command argument values, you would have to duplicate that in each method. This would allow you to consolidate that into __call() if you wish.\nIt's quite a simple change on the internal side of things. Is there a reason why we should not allow for this?. Yeah I saw that, nice catch :D \nStrange that PHP cares about case for properties but not for class names.. Nope.  It doesn't even decode it internally, it uses all regex for manipulating it.\n. Sounds good \ud83d\udc4d \n. I think I know what you mean? Next iteration will be much cleaner.\n. That's a great idea.  Although, there's really no need to put it into a sub-directory, we can just treat the \"empty\" directory as the package-directory itself.\n. Oh right. That xD. ",
    "zzzerotime": "Thanks, but howcan i fix this, is there any way to make it work\u00bf\n. I have to remove the secret keys from config to make  wp-cli work? Thanks!\n. OK, so in order to make wp-cli work, is there something I can do?, thanks\n. PHP binary:     /usr/bin/php5\nPHP version:    5.4.36-0+deb7u3\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.18.0\n. No, not at the moment. I have 2 wordpress installations, wp-cli works only in one of them.\n. Both installations are on the same server\n. wp core version\n4.1\n. why if I only type wp I get this error?, it does not work for the rest of operation. For instance, trying to access plugins functions, I get database error.\n. I get same error, but before it, i get an echo of the wp-config.php file.\n. Sorry, I don't understand. I just want to make wp-cli work on my installation. Echod wp-config.php and wp-config.php are the same.\n. Thanks for clarify. Ok I understand now. \n- My wp-config.php file and the echod wp-config.php file are the same.\n- keys remain in my wp-config.php, and also in the echod wp-config.php.\nSo, it still does not work. I still get same error.\n. 00000000  ef bb bf 3c 3f 70 68 70  20 0a 2f 2a 2a 20 0a 20  |...<?php ./** . |\n00000010  2a 20 43 6f 6e 66 69 67  75 72 61 63 69 c3 b3 6e  |* Configuraci..n|\n00000020  20 62 c3 a1 73 69 63 61  20 64 65 20 57 6f 72 64  | b..sica de Word|\n00000030  50 72 65 73 73 2e 0a                              |Press..|\n00000037\n. I am sorry, what do you mean by oh BOM!?\n. Thank you so much!, I will try this asap.\n. it works now. I hope this helps others. This wp-config.php was old, so maybe someone edited it in windows with notepad.\nI close the issue, thanks for all your patience.\n. ",
    "rask": "This one happened here too. Stripping BOMs fixed it as in OPs situation. All commands that loaded wp-config.php returned that unexpected '?' error while other worked fine. I already started looking for syntax errors which contain question marks but a quick Google landed me here.\nIn PhpStorm you can just use File -> Remove BOM to achieve this. Other editors may have similar tools or saving modes.\n. To clarify:\n\nCore and plugins are installed using Composer\nCore sits at app/public_html/wp and wp-content is at app/public_html/wp-content and is defined with WP_CONTENT_DIR which is defined inside app/wp-config.php\nThere is a app/public_html/wp-config.php which just includes the app/wp-config.php file.. I found that a 3rd party package was somehow overriding my wp-config.php (i.e. creating one where one should not be). I need to verify this was not the cause of my issues here and get back to you.. Hello and sorry for the delay, forgot to get back to you. It was indeed an issue with a Behat extension messing with paths and now things are in working order as far as I know.. \n",
    "joshlsullivan": "I wish I knew. I love WP-CLI and have been using it for a long time. :/\n. ",
    "JeyKeu": "cool\n. ",
    "onet4": "\nThe error is probably with this call:\n\nThat particular error is caused by the line accessing github.com but the error \"ERROR: cannot verify x's certificate\" occurs on every line using wget with SSL in that script including the line accessing wordpress.org.\nI downloaded a certification file from here and used the --ca-certificate option of wget and it does not give the error.\nwget -nv -O wordpress.tar.gz https://wordpress.org/wordpress-latest.tar.gz --ca-certificate gd-class2-root.crt\nI thought this kind of certification issue only occurs on Windows which does not natively support wget. However, this issue seems to be not uncommon among different platforms and applications. What about changing it to use curl instead of wget?\n. That would be ideal.\nWhat about adding a workaround for the time being? It requires two lines of change.\nThis line https://github.com/wp-cli/wp-cli/blob/v0.18.0/templates/install-wp-tests.sh#L48\nsed $ioption \"s:dirname( __FILE__ ) . '/src/':'$WP_CORE_DIR':\" wp-tests-config.php\nto \nsed $ioption \"s:dirname( __FILE__ ) . '/src/':getenv( 'TEMP' ) . '/wordpress/':\" wp-tests-config.php\nAnd https://github.com/wp-cli/wp-cli/blob/v0.18.0/templates/bootstrap.mustache#L4\nif ( !$_tests_dir ) $_tests_dir = '/tmp/wordpress-tests-lib';\nto\nif ( !$_tests_dir ) $_tests_dir = getenv( 'TEMP' ) . '/wordpress-tests-lib';\n. ",
    "Ilya-Kuchaev": "Package less-436-13.el6.x86_64 already installed and latest version\nless\nMissing filename (\"less --help\" for help)\n. echo $PATH\n/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin\nwhich less\n/usr/bin/less\n. ",
    "bobbywalters": "Two tests were added to verify scenarios when standard and non-standard ports are supplied on an https URL. Sorry for not adding the functional tests initially, this was my first encounter with Behat and I have to say it's pretty slick and I like the way you have the wp-cli test code organized around it.\n. ",
    "Fab1en": "The following code in Core_Command class should be modified to take into account non-english installs : \nprivate static function modify_wp_config( $content ) {\n    $wp_config_path = Utils\\locate_wp_config();\n    $token = \"/* That's all, stop editing!\";\n    list( $before, $after ) = explode( $token, file_get_contents( $wp_config_path ) );\n    file_put_contents( $wp_config_path, $before . $content . $token . $after );\n}\nFor example, in french installs, the $token value should be /* C'est tout, ne touchez pas \u00e0 ce qui suit !. This value could be extracted from the wp-config-sample.php file which contains the initial content for wp-config.php file and is not modified.\n. Thanks for the time your spent on this. I know that this could cause regressions, but here is what I propose : when the english token is not found, why not trying to get the one used in wp-config-sample.php file ? The token can be easily extracted from this file (it's 5 lines before the end) and is more than likely to match.\n. ",
    "stevegrunwell": "FWIW, WP_MAX_MEMORY_LIMIT is set to 6G on the server where the importer's getting killed.\n. You mean so I don't break the build like I did with the initial commit? ;)\nI'll work on getting some tests added to the branch this evening. Thanks for your consideration!\n. Hey Daniel,\nI apologize that it took me so long to get back to this, but the PR should be in a better state for consideration. Thank you for your feedback and guidance, WP-CLI was my first attempt at BDD via Behat.\n. ",
    "ryanmarkel": "\nThe WordPress importer is a pile of rubbish.\n\nIt is long overdue for an overhaul or even replacement and as someone who does an awful lot of large site importing I would love to be part of a conversation regarding coming up with something better.\n. ",
    "blobaugh": "@danielbachhuber has this resolved it for you? I am running into this issue as well. 3 import files totaling several hundred megs. Spins its wheels for a while, starts importing and after a few dies :S\n. WP-CLI 0.15.0\nJust upgraded to 0.19.0 and rerunning the importer\n. Thank you Ryan!!!! This has bitten me several times :)\n. ",
    "Clorith": "Hi,\nI'm seeing two things, the command needs a double dash and quotes around the URL for the parameter to be read, so --url=\"sitename.com\", also did you ensure the URL is the correct one as seen by WordPress, you can check this with wp site list.\n. I was hunting the email sending bug 37736, so I'd love to provide my input here.\nI feel this is something that should be fixed on WP-CLI's side of things, core has been doing it wrong up until this point in time when we finally used phpmailer internals properly, and are now getting exceptions thrown when they should be in this case.\nIdeally a sane default value for $_SERVER['SERVER_NAME'] from siteurl should probably be applied by WP-CLI to address this (and potential other pitfalls we've just not realized exist from the lack of a super global).\n. ",
    "warrenseine": "I think wp-cli should exit with an error code if no site is matched for a --url. Currently, it returns 0 and displays nothing in the standard or error output.\n. I don't think that's totally true. For instance with search-replace, there are 3 cases (put aside missing arguments):\n- stdout says \"Made 0 replacements\"\n- stdout says \"Made n replacements\" (n > 0)\n- stdout is empty\nExit code is always 0, but the last case seems to happen only if the site root is invalid.\n. tag_base, which has a value of \"\", is correctly retrieved, so this must be specific to \"0\" value.\n. Why would wp option get unset a value?\n. I'm doing both commands in a row. If I do list again after get, the value is right there:\nbash\n$ wp core version\n4.4.2\n$ wp --version\nWP-CLI 0.23.0\n$ wp option list | grep posts_per_page\nposts_per_page  10\n$ wp option get posts_per_page\n10\n$ wp option list | grep users_can_register\nusers_can_register  0\n$ wp option get users_can_register\n$ echo $?\n1\n$ wp option list | grep users_can_register\nusers_can_register  0\nI should test with a clean WordPress install.\n. Other options with the same value get retrieved properly:\nbash\n$ wp option get use_trackback\n0\nThere must be something interfering indeed.\n. Well, it turns out that I just need to update the post_content with the Markdown content, which will be copied to post_content_filtered as is, and then converted to the HTML version.\nIn the end, everything just works magically if I just send Markdown instead of HTML.\n. ",
    "jaredatch": "I think that would be plenty adequate, for sure. \nI wasn't concerned about the default setting so much as 1) be more clear that images are removed in documentation 2) provide flag so the behavior can be opt out.\nI know on most large existing sites I work on, when I come in I have no idea where odd image sizes might be used in posts or linked to in various ways, so I would typically opt to leave older \"legacy\" images alone.\n. :+1: thanks Daniel!\n. That definitely makes sense. Thanks for tracking that down \ud83d\ude00 \n. ",
    "nickcernis": "I know this is ancient, but just wanted to mention the reason for the image-600x253.jpg file becoming image-600x254.jpg after being regenerated \u2013 it's likely due to this bug in WP core: https://core.trac.wordpress.org/ticket/18532. (WP used to round image sizes down instead of up.)\nThat was fixed in WP 4.1, so an image resized in WP 4.0 might be 253px high. If you then update WP to 4.1 or higher and regenerate thumbnails, the same image will then 254px high. I can reproduce this locally:\n\nIt's not a bug in WP CLI, of course, but just wanted to document this in case others encounter it and wonder why.\n. Thanks for your work on this, @danielbachhuber \u2013 appreciate it. :-)\n. ",
    "mstoldt": "Back from the future: Thanks for making this issue clear @nickcernis as I'm about to regenerate 20k images for a high-traffic blog and was concerned about possible errors!. ",
    "mavin": "Is there a publicly available spec for WXR? I couldn't find any evidence of one with a quick search.\nThese changes do bring wp-cli closer in line with the changes in core: \nhttps://github.com/WordPress/WordPress/blob/60b0cd7943b9150b5f69e3ebc9fd06828b9f1e75/wp-admin/includes/export.php#L268\n. +1 I was just going to make a PR for this same issue however I can't explain why the importer isn't failing.\nI suspect it's because of this:\nhttps://plugins.trac.wordpress.org/browser/wordpress-importer/trunk/wordpress-importer.php#L235\n. ",
    "FortuneAlex": "That's how I actually installed it. Trying it again doesn't fix it either\n. Tried removing it, but it's absolutely necessary for \" bundle exec cap development wpcli:db:push\" to run it seems, or else at the 8th step in the trace it tells me it's not found.\nIf it can helps, I'm trying to deploy the database with capistrano. Pushing the files works nicely enough with \"bundle exec cap development deploy\", it just refuses to push the database.\nIf it can help I'm following this:\nhttp://efeqdev.com/tutorial/using-bedrock-for-wordpress-for-the-first-time/\nExcept that I changed the net-ssh to the newer version since their version doesn't exist anymore\nHere's the full trace:\nhttp://pastebin.com/BxiAq859\nIt's slightly frustrating, it's literally the last step to make it work\nthanks\n. Well I got it, I'm a dummy.\nActually had to remove wp-clip from composer.json ... However, you have do to composer update after (duh?...). Then of course push the changes to git. Then use the deploy command, then the database command and it should work. Hopefully it will fix your problem if you come across this\nAnyways, problem solved, I got it, it was my own fault. Thanks for helping!\n. ",
    "lukejanicke": "Check your wp-config.php file and make sure any files that are included/required in it do not also require wp-settings.php. The last statement in wp-config.php is usually require_once( ABSPATH . 'wp-settings.php' );. If any other included/required file also has that line, it will be executed twice. Two calls to require wp-settings.php means two calls to require wp-includes/vars.php, which means wp_is_mobile() is declared twice.\n. ",
    "bobbingwide": "I didn't propose a solution. Would is_dir() make more sense? \n. ",
    "rossedman": "This has been causing errors for me all day. I can't even update or use wp-cli at this point because of this. I can confirm this is an issue.\n. ",
    "morganestes": "Didn't realize there was an open PR on this when I submitted my issue + patch. See #1723 for comparison.\n. ",
    "BenjaminBarnett": "I have a little more info now. \n- First off, Red Hat linux server. \n- Package does indeed install into /var/cache/yum/rhel-x86_64-server-5/packages/wp-cli-phar\n- BUT, error_log entry in same directory: \" [24-Mar-2015 16:05:27 America/New_York] PHP Fatal error:  Class 'Phar' not found in /var/cache/yum/rhel-x86_64-server-5/packages/wp-cli.phar on line 3 \"\n- first few lines of phar file:\n!/usr/bin/env php\n<?php\nPhar::mapPhar();\ninclude 'phar://wp-cli.phar/php/boot-phar.php';\n__HALT_COMPILER(); ?>\n\u00afQ\u0000\u0000\u001d\u0001\u0000\u0000\u0011\u0000\u0000\u0000\u0001\u0000\u000b\u0000\u0000\u0000wp-cli.phar\u0000\u0000\u0000\u0000\f   ...etc.\nDoes this help troubleshoot at all?\n. Sorry for the lack of follow-up communication... abandoned wp-cli for now and found another workaround. Thanks for the attempted help though.\n. ",
    "tkmoney": "Just tried that but got the same result\n. Yes. It returns the list of crons with the one I just added. The one I just added says \"now\" for the \"next_run_relative\" column.\n. are you able to reproduce the bug?\n. ",
    "jxn": "Oops, human error, sorry.\n. ",
    "wrnx": "We can replace the 'updated' column, with the date, by an 'update' column, with the available/none message as the shown in the wp plugin list command.\nAbout the translation API. I think it is since WordPress 4.0. I found these references:\nInternationalization goals for 4.0\nWordPress.org API - Translations\nChangeset 29630 \u2013 WordPress Trac\nCode Reference: translations_api\n. I also not sure about the name, but I can't think of any other that expresses what the function does.\nI think the main issue with the WP_CLI\\Utils namespace is that some functions do not have documentation. It will be nice if we have some well documented helpers to work with. Thus, it will be easier to extend the functionality.\n. When refactoring, I found some cases like this:\nphp\nisset( $assoc_args[ $key ] ) ? $assoc_args[ $key ] : $value;\nWe could change the function and it will fit in both cases.\nphp\n/**\n * Return the flag value or, if it's not set, the $default value.\n *\n * @param array  $args    Arguments array.\n * @param string $flag    Flag to get the value.\n * @param mixed  $default Default value for the flag. Default: NULL\n * @return mixed\n */\nfunction get_flag_value( $args, $flag, $default = null ) {\n    return isset( $args[ $flag ] ) ? $args[ $flag ] : $default;\n}\nThe only case the procedure will change is when comparing with an expected value:\nphp\nif ( \\WP_CLI\\Utils\\get_flag_value( $args, 'flag' ) === 'yes' ) { /* ... */ };\n. I found others as well (core.php:133, core.php:875, user.php:262-286, scaffold.php:616-618, ...), but I'll see if I find any code that still needs refactoring and then I make these changes in a local branch to see if it's worth.\n. Okay, I didn't found additional codes that needs the function \\WP_CLI\\Utils\\check_flag, so I changed it like I said in https://github.com/wp-cli/wp-cli/pull/1732#issuecomment-90993933.\nWith the changes, the new function is used in over thirty new entries, totaling about one hundred and thirty uses.\nNow we need to evaluate whether the changes are worth or reverse it.\n. Yes. I think that \"English (US)\" would be even better.\nphp\n\\WP_CLI::success( \"Translations updates are not needed for the 'English (US)' locale.\" );\n. Although not documented, it seems to be the default behavior of the WordPress.org API.\nAnd the WordPress class Language_Pack_Upgrader relies on this to make the decision of which directory store the translation.\n. Done.\n. It just gets a list of translation updates from the database.\nThe functions wp_version_check, wp_update_themes and wp_update_plugins checks for updates (which include translations updates) and store it in the database. After that, the function wp_get_translation_updates gets the info and return it as an array.\nTranslations updates are performed by the method upgrade (single update) or bulk_upgrade (all updates at once) of the WordPress class Language_Pack_Upgrader.\n. I didn't notice that the  WP_CLI::warning method doesn't return some error code.\nI think that a simple behavior would be: WP_CLI::success exits with 0; WP_CLI::warning with 1; and WP_CLI::error with 2, since these methods may be used only for exit messages and maybe have a parameter to not do so.\nI will put messages like \"Translation updated successfully\" or \"Translation update failed\" after each update to make it clear for the user what is going on.\n. Yes, they can.\n. Ok.\n. The Language_Pack_Upgrader::async_upgrade method returns HTML tags to the standard output.\nI corrected this by adding a call to the wp core language update command after the remove_action function:\nphp\n\\WP_CLI::run_command( array( 'core', 'language', 'update' ), array( 'dry-run' => false ) );\nYou still need to run the command manually after the update, because after the plugin/theme update it will automatically check for translations updates to the older version of the plugin/theme instead of the new. Its the same behaviour as the default method, so its seems like a WordPress bug.\n. I'm not sure about this, because these functions do not check only for translation updates.\n. I thought as the command deals with translations of plugins, themes, and core, it would be \"Translations\" (plural).\n. Alright then. Like this?\nphp\nwp_clean_update_cache(); // Clear existing update caches.\nwp_version_check();      // Check for Core translation updates.\nwp_update_themes();      // Check for Theme translation updates.\nwp_update_plugins();     // Check for Plugin translation updates.\n. ",
    "damirock": "Hi! Can't find language update in master version in my shell. Is it shipped?\n. ",
    "WileESpaghetti": "What plugin is creating the CT?\nI was able to get register_taxonomy( 'typetax', 'stories', $args ); to work with WP-CLI 0.18.0, WordPress 4.1.1 with default theme (Twenty Fifteen 1.0).\nI set up a fresh WordPress install and added the following to the end of the Twenty Fifteen functions.php to create the custom post type and taxonomy.\n``` php\nadd_action( 'init', 'create_post_type' );\nfunction create_post_type() {\n  register_post_type( 'stories',\n    array(\n      'labels' => array(\n        'name' => ( 'Stories' ),\n        'singular_name' => ( 'Story' )\n      ),\n      'public' => true,\n      'has_archive' => true,\n    )\n  );\n}\nadd_action( 'init', 'create_book_tax' );\nfunction create_book_tax() {\n    register_taxonomy(\n        'typetax',\n        'stories',\n        array(\n            'label' => __( 'typetax' ),\n            'rewrite' => array( 'slug' => 'typetax' ),\n            'hierarchical' => false,\n        )\n    );\n}\n```\n. ",
    "joshfleming": "EDIT: Using a switch wasn't working for wp-admin URLs because the basename was outputting wp-admin. Using if and strstr to check if the cwd had a string in it works for both wp-admin and the live site. It feels clunky but it's an option. \nIn case anyone's looking for a workaround: getcwd() will get the current path and works in php cli php4+. Note that when accessing wp-admin it includes wp-admin because these requests aren't handled by the index.php in the wordpress root. That's why I'm using strstr to check if my path exists in the string.\nDepending on your environment directory naming scheme this can work for multiple wp-config.php settings. \n\nif(strstr(getcwd(),'/full/path/to/wp/dev')) {\n      // DEV code / settings\n   }\n   elseif(strstr(getcwd(),'/full/path/to/wp/stage')) {  // STAGE\n      // STAGE code / settings\n   }\n   else {   // PRODUCTION\n     // PRODUCTION code / settings\n   }\n. \n",
    "szabeszg": "Thank you @joshfleming for the workaround!. ",
    "joehandsome": "my wp-config.php looks like that:\ndefine('WP_HOME','http://test.de');\ndefine('WP_SITEURL','http://test.de/wordpress');\ndefine('WP_CONTENT_URL', 'http://test.de/content');\ndefine('WP_CONTENT_DIR', realpath($_SERVER['DOCUMENT_ROOT'] . '/content'));\nif ( !defined('ABSPATH') )\n        define('ABSPATH', dirname(__FILE__) . '/');\nrequire_once(ABSPATH . 'wp-settings.php');\nand my Document_Root looks like that:\nwordpress/\ncontent/\nindex.php\nwp-config.php\n. bedrock has a different directory structure, all wordpress stuff is in the directory wp.\nI have my core in the directory wordpress and all the other content, like uploads,theme,plugins,... in directory content.\nSo i still guess, that \"WP_CONTENT_DIR\" is maybe not used correctly by wp-cli ?\n. i also tried to define WP_PLUGIN_DIR and WP_PLUGIN_URL in wp-config.php and 'wp plugin path' is still empty :(\n. thanks, i use dirname(__FILE__) now instead of $_SERVER['DOCUMENT_ROOT'] and it works.\n. ",
    "bmackinney": "Going to try again. \n. It does work. The error I experienced yesterday was due to a typo in my naming of the function, and eliminating the {{parent_theme}}_parent to match the codex examples eliminated the error. The changes on lines 3 and 5 can be omitted. They did not contribute to the problem's solution. \n. @danielbachhuber do you want me to re-name the function?\n. All done @danielbachhuber \n. ",
    "asanger": "ah, nice! I'll give this a shot shortly, and if it works I'll go ahead and close this. Thanks!\n. Alright - so the issue now is that wp-cli uses the wp-config.php values for db commands, so while setting the WP_CLI_CONFIG_PATH does load the specified yml file, it will still just pull the values from whatever wp-config.php has.\nIs there a way to override wp-config.php values when running a command? Or maybe specify the path of the wp-config.php so I can have a wp-config.production.php? Or will I have to run wp core config any time I need to switch environments?\n. Correct - there's a production install (remote), and then theoretically an infinite number of other installs that will be based on that remote production.\nMy workflow is as follows:\nAssume that a production environment exists. I need to do some development work locally, so I clone the repository to my desktop, run a script to fetch the production (remote) database, dump it to a local file, import the file to my local db, and search/replace the URLs with localhost.\nThis exact same process would need to be performed if I wanted to push everything to a staging server to be tested. Staging server would fetch the production db, load it locally, and replace the prod url with the staging url.\nGet where I'm going with this?\n. Appreciate the ideas. I'm going to play around with mixing wp-cli and straight mysqldump within a bash script to see if I can get the desired results. Thanks again!\n. ",
    "captin411": "wp theme list --status=inactive --field=name | while read THEME; do wp theme delete $THEME; done;\n. I should have explained that last command a bit better. I'm sorry.\nFirst this runs the command theme list and puts each inactive theme name on one line.\nThen I pipe (|) each line through the shell 'while read X; do ....; done;' portion.\nThis takes each line and assigns it to a variable named 'THEME'.  Then it runs the wp theme delete command with that shell variable.\n. I wonder, should wp-cli warn if a umask looks suspect?\n. You may try a regular expression similar to this:\ns/<?([^p])/<?php\\1/g\nand\ns/([^p])?>/\\1php?>/g\nTest these before blindly copying and pasting - consider these 'pseudo regular expressions' as I have not run them myself.\nSyntax and escaping of the parenthesis and backspace will vary depending on the language or quoting you are using.  The '\\1' may also be done differently again dependent on the regular expression engine in your language of choice.\nHowever, the spirit of this expression is:\n- match '<?'\n- if it is followed \"by anything but a 'p'\"\n  -- save \"that thing that is not a 'p'\"\n  -- replace <?[thing] with <?php[thing] -- this is good for example if it is a space and you want \"<?php \" properly\nThe caveat is that if you have an actual string in php that has a <? in it this will be na\u00efve.  Probably not likely but you'll want to at least use some process to look at your changes after you make them... perhaps using git diff for a before and after.\n. ",
    "joshsmith01": "Perfect!\n. The command was: wp theme delete $(wp theme list --field=name); wp theme install twentyfifteen\nI have since resolved the issue using this command: wp theme list --status=inactive --field=name | while read THEME; do wp theme delete $THEME; done;\nand this\n. ",
    "b-long": ":+1: Nice find @theMikeD \n. Sorry about that; the permissions are 775: \nshell\n[user@host /tmp]$ ls -l /tmp/wp_55c02efd45b5c.phar\n-rwxrwxr-x 1 user user 1365588 Aug  4 03:18 /tmp/wp_55c02efd45b5c.phar\n. Perhaps it has something to do with permissions?\n``` shell\n[user@host /tmp]$ rm /usr/local/bin/wp\nrm: cannot remove \u2018/usr/local/bin/wp\u2019: Permission denied\n[user@host /tmp]$ ls -l /usr/local/bin/wp\n-rwxrwxr-x 1 user user 1368135 Jun  5 02:23 /usr/local/bin/wp\n[user@host ~]$ getfacl /usr/local/bin/wp \ngetfacl: Removing leading '/' from absolute path names\nfile: usr/local/bin/wp\nowner: user\ngroup: user\nuser::rwx\ngroup::rwx\nother::r-x\n```\nI replaced /usr/local/bin/wp with the wp-cli.phar (renamed and ensured permissions were the same), however the output didn't include any extra deubug information.  I did opt to build it myself (from your cli-update-errors branch; I'm not sure why the --debug flag didn't seem to work: \nshell\n[user@host html]$ wp cli update --debug\nSuccess: WP-CLI is at the latest version.\n. I'm not sure if this is actually solved (at least for RHEL / Amazon Linux users) @danielbachhuber @nyordanov  .  Consider this : \nshell\n[user@host ~]$ wp cli update\nError: /usr/local/bin is not writable by current user\n[user@host ~]$ sudo !!\nsudo wp cli update\nsudo: wp: command not found\n[user@host ~]$ cat /etc/*release\nNAME=\"Amazon Linux AMI\"\nVERSION=\"2015.03\"\nID=\"amzn\"\nID_LIKE=\"rhel fedora\"\nVERSION_ID=\"2015.03\"\nPRETTY_NAME=\"Amazon Linux AMI 2015.03\"\nANSI_COLOR=\"0;33\"\nCPE_NAME=\"cpe:/o:amazon:linux:2015.03:ga\"\nHOME_URL=\"http://aws.amazon.com/amazon-linux-ami/\"\nAmazon Linux AMI release 2015.03\nFollowing the normal install process (per http://wp-cli.org/ ), it seems that the root user can't see /usr/local/bin/wp\n. @szepeviktor I agree it's not on root's PATH :smile: I was trying to point out that either the install instructions should be modified (on http://wp-cli.org/ ), or when wp-cli is run as a normal user, it could try to escalate privileges.  Otherwise, it's inevitable that other user's will run into this who may not be familiar with modifying permissions / PATH.  If we fix the install procedures we won't have to address future user's who have this problem.\n. ",
    "marcinant": "Everything is described here:\nhttp://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html\nAll modern Linux distributions support XDG and by default applications keep their config in: \n~/.config/[appname]\nand cache in:\n~/.cache/[appname]\nSo, cache should go to ~/.cache/wp-cli/core instead of ~/.wp-cli/cache/core\nOn Ubuntu and Debian systems $XDG_CACHE_HOME, $XDG_DATA_HOME and $XDG_CONFIG_HOME environment variables are not set and these systems just use defaults as described in basedir-spec. For example:\n\"If $XDG_DATA_DIRS is either not set or empty, a value equal to /usr/local/share/:/usr/share/ should be used.\"\nWP-CLI should just test if $XDG_* variables are set and fallback to defaults suggested by xdg specification. That's all.\n. You can also take a look how it's now solved in Composer:\nhttps://github.com/composer/composer/pull/1407\n. @danielbachhuber  I'm not sure if we are talking about similar case. However I had a problem with:\nnohup ./vendor/bin/wp server --docroot=/wp > php.log 2>&1 & echo $! > server.pid\nAnd could not kill server (child process)... Then finally get into this:\nkill -- -$(ps opgid= $(cat server.pid))\n. ",
    "COLABORATI": "Composer has this feature now, it would be great if it wp-cli would follow. What is the status?\n. Hey, Daniel, please reconsider this. It is really a great idea to have wp-cli and all the tools, commands and libraries at hand when writing your own scripts for any wordpress environment, and of course writing these scripts in php and not in ruby, bash or anything else makes sense, so it would be really great to have you support the usage of wp-cli not only as a command line tool to exec but also as an ecosystem for wordpress that anybody can just include in their own php shell scripts. \nI am defnitely not writing about using wp-cli from a web request - this would be material for some funny absurd recursive anti-hack :) However, for a shell script with php having wp-cli at hand would be great. \nI do not think the use like mlufty described above is too complicated or hacky. I just wanted to confirm that the use of wp-cli & friends as a library is a great way to make use of it in php shell scripts and should be supported and not break in future. \nOf course this might be an indicator that writing your own wp-cli commands for three lines of shell script is still too involved... have to check that again. \n. ah, this was from the tools page... ok, then these seem to be no packages. However, the code looks like in fact these are packages, well, ok.\n. I would like to propose that the update to the new ssl-only wp-cli version also changes the configuration automatically in .wp-cli/packages/composer.json - if that is the only place. \n. Thanks for taking the time to react in a way that helps me to learn how a mature project works.\nHowever, how would you implement the default behaviour for wp plugin install with a package?\n. This is not a support question - I have to assume that you understand that very well.\n. Forget it, I will take another route.\nI just occasionally have to dive into this dark php and wordpress underworld, fortunately for this use case at hand it is not too late to switch.\nHave fun!\n. ",
    "voldemortensen": "I've never had this issue. Maybe its a server configuration issue?\nBesides that, I'm hesitant to run those commands because it will ruin any scripts that need the executable permission. i.e. all my shell/perl scripts.\n. Removing the erroneous not check completely broke my code... I'll refactor and push a new fix.\n. Sorry for the first 4 commits. Should be good now though.\n. Now that this is working properly, what else needs to happen to get this merged?\n. Sounds like the theme is doing something wrong. A workaround would be to add the --skip-themes flag to prevent the theme files from loading.\n. Even though $_SERVER is in an PHP block, bash (or whatever shell) is trying to interpret $_SERVER as a bash variable. You need to escape the dollar signs with a backslash.\n. Currently you can just do wp core download --version=<version> to get down to the right version, this now even deletes unused files between versions. \n. LOL! \ud83d\ude02   ...wanders away\n. I have a feeling that restarting that failed test would make it pass.\n. I don't do anything with multisite, but wouldn't\nwp site list --field=id (or ID, idk what inconsistent thing core has done here)\ndo the same thing?\n. I like this idea. I don't currently have any packages, but I have at least one kicking around in idea form.\n. My first thoughts are that I'd like the release cycle to fall inline with WordPress Core releases, but ~1 month beforehand. That would give larger organizations that use it in apps time to do regression testing, breaking change fixes, and deployments prior to a Core release.\nI have to mull the rest over.\n. I think it would only result in more bugs if devs tried forcing as many issues as possible into a release.\n. > I hadn't thought about it this way, but I suppose we're already on a pretty nice rhythm. Is this how it works for Bluehost right now?\nEssentially. The current rhythm has worked out pretty well (minus those two unexpected point releases, but that shouldn't happen anymore). We have a fairly large app that uses WP-CLI very heavily.\n. This would require quite a few changes to tools at Bluehost. They'd probably be relatively easy changes, but time consuming to go hunt everything down.\n. It seems I misremembered some code and I don't think adding this functionality would effect us.\n. ",
    "robertjw1": "Wasn't necessarily suggesting you add the commands, just passing along what I did. I only run that in the directory where I've done a new download.\nwp core download\nI wouldn't think you would want any executable scripts in the WP directory structure.  \nI think I'm running a pretty standard configuration.  Running ubuntu with a standard Apache server. \nIf I get a few minutes I'll try to break it down further.  I haven't had this problem when pulling a latest.tar.gz down and extracting it.\n. Hmm... that's different than mine\n[bob@aramis temp]$ wp core download\nDownloading WordPress 4.1.1 (en_US)...\nUsing cached file '/home/bob/.wp-cli/cache/core/en_US-4.1.1.tar.gz'...\nSuccess: WordPress downloaded.\n[bob@aramis temp]$ ls -alh\ntotal 724K\ndrwxrwxr-x  5 bob bob 4.0K Apr  9 15:38 ./\ndrwxr-xr-x 61 bob bob 4.0K Apr  9 15:24 ../\n-rw-------  1 bob bob 539K Dec 15  2011 .bashrc\n-rw-rw-r--  1 bob bob  418 Apr  9 15:38 index.php\n-rw-rw-r--  1 bob bob  20K Apr  9 15:38 license.txt\n-rw-rw-r--  1 bob bob 7.1K Apr  9 15:38 readme.html\n-rw-rw-r--  1 bob bob 4.9K Apr  9 15:38 wp-activate.php\ndrwxrwxr-x  9 bob bob 4.0K Apr  9 15:38 wp-admin/\n-rw-rw-r--  1 bob bob  271 Apr  9 15:38 wp-blog-header.php\n-rw-rw-r--  1 bob bob 4.9K Apr  9 15:38 wp-comments-post.php\n-rw-rw-r--  1 bob bob 2.7K Apr  9 15:38 wp-config-sample.php\ndrwxrwxr-x  4 bob bob 4.0K Apr  9 15:38 wp-content/\n-rw-rw-r--  1 bob bob 2.9K Apr  9 15:38 wp-cron.php\ndrwxrwxr-x 12 bob bob 4.0K Apr  9 15:38 wp-includes/\n-rw-rw-r--  1 bob bob 2.4K Apr  9 15:38 wp-links-opml.php\n-rw-rw-r--  1 bob bob 2.7K Apr  9 15:38 wp-load.php\n-rw-rw-r--  1 bob bob  33K Apr  9 15:38 wp-login.php\n-rw-rw-r--  1 bob bob 8.1K Apr  9 15:38 wp-mail.php\n-rw-rw-r--  1 bob bob  11K Apr  9 15:38 wp-settings.php\n-rw-rw-r--  1 bob bob  25K Apr  9 15:38 wp-signup.php\n-rw-rw-r--  1 bob bob 4.0K Apr  9 15:38 wp-trackback.php\n-rw-rw-r--  1 bob bob 3.0K Apr  9 15:38 xmlrpc.php\n. Right, I assign ownership, and that's not your problem, but the permissions are different.  Notice how mine are rw on the group, while yours aren't?  Why are they different?\n. Probably a umask setting on my local system.  Makes sense now.  Thanks!\n. My umask is the default Ubuntu setting of 002, something about USERGROUPS_ENAB defaulting to yes and giving group permissions to everything.\n. ",
    "spwebtest": "Hey thanks Daniel I did a re-install and as you suggested and all it good :)\n. ",
    "michaelbeil": "The install-wp-tests.sh script pulls from SVN for the PHPUnit tests available in trunk, whereas Yoast is using the Git repo of WordPress for testing builds of his plugin against the latest version of WP and several versions of PHP on https://travis-ci.org. Hence, svn co --quiet https://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ (see: https://github.com/wp-cli/wp-cli/blob/master/templates/install-wp-tests.sh#L53) is for local development testing. \nDoes that make sense? \n. ",
    "centminmod": "here's output\nwp --info 2>&1|hexdump -C\n00000000  3f 3f 3f 0c 70 3f                                 |???.p?|\n00000006\n. FYI, PHP 7.0.0 Alpha1 is released and WP-CPI throws up a bunch of errors on installing some WP Plugins https://community.centminmod.com/posts/14892/\n. yeah ran into similar as @tw2113 with PHP 7.0.0RC1 at https://community.centminmod.com/posts/17561/\nwp cli update --allow-root\nWarning: The `wp cli update` command has an invalid synopsis part: [--patch]\nWarning: The `wp cli update` command has an invalid synopsis part: [--minor]\nWarning: The `wp cli update` command has an invalid synopsis part: [--yes]\nSuccess: WP-CLI is at the latest version.\nalso\nWarning: The `wp core download` command has an invalid synopsis part: [--force]\nDownloading WordPress 4.3 (en_US)...\nSuccess: WordPress downloaded.\nWarning: The `wp core config` command has an invalid synopsis part: [--extra-php]\nWarning: The `wp core config` command has an invalid synopsis part: [--skip-salts]\nWarning: The `wp core config` command has an invalid synopsis part: [--skip-check]\nSuccess: Generated wp-config.php file.\nSuccess: WordPress installed successfully.\nPHP\nphp -v\nPHP 7.0.0RC1 (cli) (built: Aug 19 2015 21:30:01) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v3.0.0-dev, Copyright (c) 1998-2015 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2015, by Zend Technologies\nmodules loaded\n```\nphp -m\n[PHP Modules]\nbcmath\nbz2\ncalendar\nCore\nctype\ncurl\ndate\ndom\nenchant\nexif\nfilter\nftp\ngd\ngeoip\ngettext\ngmp\nhash\niconv\nimagick\nimap\nintl\njson\nlibxml\nmbstring\nmemcached\nmysqli\nmysqlnd\nopenssl\npcntl\npcre\nPDO\npdo_mysql\npdo_sqlite\nPhar\nphpdbg_webhelper\nposix\npspell\nreadline\nReflection\nsession\nshmop\nSimpleXML\nsnmp\nsoap\nsockets\nSPL\nsqlite3\nstandard\nsysvmsg\nsysvsem\nsysvshm\ntidy\ntokenizer\nxml\nxmlreader\nxmlrpc\nxmlwriter\nZend OPcache\nzip\nzlib\n[Zend Modules]\nZend OPcache\n```\n. FYI, PHP 7.0.0 Alpha1 is released and WP-CPI throws up a bunch of errors on installing some WP Plugins https://community.centminmod.com/posts/14892/\n. ",
    "frenkel": "Same problem on OpenBSD with php-5.3.29. Unfortunately I'll not be able to try the steps you suggested.\n. @szepeviktor Thanks. That package does not give me any problems, so I guess the bug was fixed already.\n. Yes, of course, that might be possible as well. It is possible for you to build a simple \"hello world\" phar that I can use to test?\n. $ php-5.3 hello.phar                                                           \n??????$    \n$ php-5.6 hello.phar                                                           \nTot straks, Frank!\nFound the cause! Somewhere between php 5.3 and 5.6 the phar functionality was fixed.\n. It is compiled with --enable-zend-multibyte and I do have the Phar extension on 5.3. I don't see detect_unicode anywhere on the php.net site. Where did you find that quote?\n. None produce the result we want:\n$ php-5.3 -d detect_unicode=Off hello.phar  \n$ php-5.3 -d detect_unicode=On hello.phar   \n??????\n. That prints:\nOK\n. Same problem unfortunately.\n. ",
    "timnashcouk": "Well it would be ideal to execute something post the command, but given the existing limitations it makes more sense for it to be a another PHP file.\nHowever I suspect you actually meant, why not wrap the two actions inside a shell script? \nPretty much for the reasons outlined above, a shell script is only useful if everyone has it within the team and executes it. Much easier for it to be set as part of the wp-cli config if its going to be executed each time. The second big benefit in my DB versioning example, is with no knowledge of which commands are being executed, you would need to either write a wrapper for WP-CLI and execute that or have an awful lot of shellscripts.\nThe third reason for not using shell scripts is that it helps reduce down the number of moving parts and mirrors existing use cases inside WP-CLI codebase.\n. I think I have confused the issue with demoing two use cases at the same time and we have latched on to the interesting one and ignoring the boring one. \nSo to simplify, currently WP-CLI offers the ability to load a PHP file either globally via config or manually prior to executing command. \nTo have the same behaviour post command opens up an equal number of opportunities as the require does to pre command.\n\nUsing shell scripts for both require and post command are feasible though as detailed above not ideal and while require means you can load additional classes which commands may rely on, all the additional benefits of require basically exist for a post command equivalent.\n@szepeviktor Require runs prior to wp-cli bootstrapping Wordpress, which is both a benefit and a curse so you can't use actions and hooks in it.\n. Realistically I really see 2 primary use cases for this,\n1) notifying something the command has completed\n2) modifying / cleaning up after a command has run\nI suspect most usecases sit in number 1, be it calling 3rd party logging, simply notifying slack that a command was run through to my slightly convoluted use case of doing db revisions. \nWhile number 1 could be done by bundling commands into a shell script, it's adding an extra layer of complication, and in some cases could be adding considerable work. The downside is as you say if we added a hook, no guarantee it fires, especially if the command fails or simply never exists. The other alternative is within the commands, which is fine for plugins and community packages that you are building but not an option with core commands.\nHowever I think that's ok, if a function fails or doesn't exit then my action doesn't fire thats sort of assumed behaviour, infact in most circumstances for 1 you wouldn't want it to fire on non competition.\nFor number 2 style uses, the no guarantee of running is perhaps more of an issue, but again these would be isolated.\n. That works well :)\n. This is mainly an attempt to standardise behaviour across commands, while also allowing a bit more flexibility.\nSo the use case is identical to that for allowing core download and update to point to non w.org url:\nThe plugin might not exist on the repository or you might not have access to the repository but do have access to local copy.\nLet's take a pretty standard example we have a set of plugins we install and a run a script to update plugins regularly.\nto install:\nwp plugin install akimet, bbpress, http://myplugin.zip, hello-dolly\nto update:\nwp plugin update akismet, bbpress, hello-dolly\nwp plugin install http://myplugin.zip --force\nFine for just one or two plugins but quickly get's messy at a few hundred, so even if under the hood all it's doing is wp plugin --force it makes sense for:\nwp plugin update akimet, bbpress, http://myplugin.zip, hello-dolly\nWhich at leasts puts the two commands in sync.\nExtending that, point to a known location for core at download and update means wp-cli features can still be used in a standardised (i.e won't break scripts way) in closed networks.\n. ",
    "Onyx808": "@danielbachhuber I just tried and got the following result\nwp post delete $(wp post list --post_status=trash --format=ids)\nusage: wp post delete <id>... [--force] [--defer-term-counting]\nWhat am I doing wrong?. it was actually a new feature on mysql 8 \"Caching SHA-2 Pluggable Authentication\". ",
    "swissspidy": "@Onyx808 That sounds like you have no trashed posts. Just run wp post list --post_status=trash --format=ids to see if it returns any IDs.\nHowever, please don't ccomment on 3-year-old closed issues on GitHub if you have questions about WP-CLI. Open a new one or ask on Slack. . @lkraav Because the suggested change (https://github.com/wp-cli/wp-cli/issues/2972#issuecomment-223836243) to solve the reported issue was added to WP-CLI with #3033. The example added there was wp option list --search=\"theme_mods_*\" --field=option_name | xargs -0 -d '\\n' -I % wp option delete %\nAlthough for key incat options.txt; do wp option delete $key; done is totally fine,  some inconsistency exists. It is possible to delete multiple posts, comments, terms, etc. but not options.\nI opened an issue to discuss this in the https://github.com/wp-cli/entity-command repository: https://github.com/wp-cli/entity-command/issues/220. Please follow that one instead of commenting on closed issues from two years ago :-). Reopening due to the comment above and the open PR.. I already mentioned the tagging issue to Ryan a few days ago, seems like he's quite busy at the moment. This would solve issues like ServerPress/ds-cli#3 that have been brought up after the 4.6 release.\n. @schrapel Backward compatibility would be a concern I guess.\n. Sorry & thanks then!\n. Pull Request for the German translation created. I found it difficult to know what changed without going through the whole file again.\n. @gitlost I just created a branch for this to work on: https://github.com/wp-cli/language-command/tree/plugin-theme-command\nwp language plugin list <plugin...> already works. I'll try to continue with the rest as well.. The version requirement has come up today in https://github.com/wp-cli/makepot-command/pull/16. I agree with @schlessera that we might need to reinvestigate how to deal with this. Not only for the bump to 5.4, but also for future requirement changes.\nFor example, the i18n command might consist of multiple sub commands in the future, only one of which has a hard requirement for PHP 5.4 so far. This is being checked using the before_invoke argument. However, that one sub command also relies on a composer package which requires PHP 5.4 or higher.\nNow, if you're on PHP 5.3 and still want to use all other i18n commands, you can't do that because of the composer dependency. Alain mentioned that installing WP-CLI over Composer would also break on PHP 5.3 in this case because of the version mismatch (assuming the i18n command is bundled with WP-CLI).\nThe only solution I can think of right now would be to use --ignore-platform-reqs for the build. This way, you can still use all of the PHP 5.3 commands while the 5.4 command does not work because of before_invoke. If it's a non-bundled package, users will need to use --ignore-platform-reqs as well when trying to manually install it (given that their also using PHP 5.3). I'm not familiar with the build / distribution process, so bear with me \ud83d\ude42\nIn addition to that, the packages could also explicitly specify their minimum required PHP version (or even the WP-CLI version if needed. Using * is always tricky). in composer.json to make things more clear during installation.. I don't yet have a good way to test the wp cache prune command, at least not with the way I wrote the code (check for timestamp in file name, not actual file modification time). IIRC I did it that way to really make sure two files with different timestamps belong together. Perhaps I have to re-think that.\nThe only commands I could find that use the cache directory are the core command and the language command.\nIn the language command, the timestamp in the file name is dynamic:\nhttps://github.com/wp-cli/language-command/blob/67cba55d96fd8eeda24dc3ac4ab554ec2102ebe6/src/WP_CLI/LanguagePackUpgrader.php#L58-L60\nPlus, there's no reliable way to update a language pack in a test in order to have multiple versions.\nIt would be easier if I could create some fake files in the cache directory, but as far as I can see, the Given an xy.zip file: step creates files relative to the current directory and doesn't take absolute paths.. Thanks. I'm aware of {SUITE_CACHE_DIR} since @schlessera pointed it out to me and I actually use it already.\nBut I can't use Given an {SUITE_CACHE_DIR}/foo/xy.zip file: because that would use the wrong path:\nhttps://github.com/wp-cli/wp-cli-tests/blob/90f71595d52bf20301961201e9d39bb190d5ddab/features/steps/given.php#L49-L50. I'm weirdly getting PHP Fatal error:  Uncaught Error: Call to undefined method WP_CLI\\FileCache::prune() in php/commands/src/CLI_Cache_Command.php:61 when running wp cli cache prune in tests... No idea why.. Nice! In this case I think we can merge this for now :-). I mostly see WooCommerce in the call stack. Have you tried disabling or skipping WooCommerce for that command?\nAlso, it\u2018s probably more of a bug in Cavalcade than WP-CLI itself. So if it persists even without WooCommerce I\u2018d rather report it to Cavalcade.. Any chance we could first discuss revisiting #3886 again as a fully opt-in solution?. Formatting should be fine I think. Have never really seen YAML files with brackets but apparently it's a thing: http://symfony.com/doc/current/components/yaml/yaml_format.html\nI just tried to set the skip-pkugins option locally and I am able to reproduce the issue.. > The syntax I usually use is this:\nThat's the format I tried locally and didn't seem to work.. Does this still happen with WP-CLI 2.0?\nHave you tried running wp core update --version=4.9.8? Or at least wp core update --debug?\nAlso, what does wp core check-update say?\nIt could be that the version check / outgoing HTTP requests fail, hence no updates are shown.. Thanks for posting this. We're aware of the issue with the documentation import script. I hope we can fix it soon.. Yeah wp-cli/wp-cli-bundle now contains the actual bundled comamnd, wp-cli/wp-cli is just the framework.\nGlad you were able to resolve it.\nFor future questions, please note that GitHub issues are meant for tracking enhancements to and bugs of existing commands, not general support. For that we have a Slack channel and the support forums, see https://github.com/wp-cli/wp-cli#support.. @thrijith This is coming along well, thanks for your efforts!. @thrijith We're very close, just left a comment regarding the failing test. Let's get this over the finish line :-)\nLet me know if I can help with anything.. Have you tried running WP-CLI with the --skip-plugins and --debug arguments?\nNote that's easier for us to help you with support in the #cli Slack channel instead of GitHub. GitHub is for keeping track of enhancements and bugs.. Thanks for the PR!\nI just noticed that there are a few more instances of \"WordPress install\" instead of \"WordPress installation\" (e.g. No WordPress install found) in the following files:\n\nfeatures/config.feature\nfeatures/help.feature \nphp/config-spec.php \nphp/WP_CLI/Runner.php \n\nWanna change these as well while you are at it? \ud83d\ude42 . Please have a look at https://make.wordpress.org/cli/handbook/troubleshooting/ and also https://make.wordpress.org/cli/handbook/common-issues/.\nGitHub issues are meant for tracking enhancements and bugs, not general support.  So if your problem persists I suggest joining our Slack channel or posting in the support forums with the tag WP-CLI. Running WP-CLI as root is extremely dangerous. When you execute WP-CLI as root, any code within your WordPress instance (including third-party plugins and themes you\u2019ve installed) will have full privileges to the entire server. This can enable malicious code within the WordPress instance to compromise the entire server. That's why we as a project strongly discourage running WP-CLI as root. See also #973 for some background\nSince the same issue with tab completion as root came up in #1829 I'm closing this one as a duplicate.. Why the error silencing?. @VladimirAus My bad, I thought I had added this as an inline comment. Refined the question now.. Note: This was introduced in https://core.trac.wordpress.org/ticket/6821 / https://core.trac.wordpress.org/changeset/22094\nin_array() is not enough I guess because the regex also checks for ://. Yeah that's true. I'm sure we can submit a core ticket for this :-). Can we add an is_stream() helper function to this?\nThen we can fix #5008 by leveraging this new class in the normalize_path() utility function.. > The only way I can fix this is by pressing the 'Save changes' button on this page.\nThe WP-CLI equivalent for that action is wp rewrite flush. Have you tried that as well?\nThe error message Publishing failed can have many causes. Please debug using the Network tab in your browser's developer tools, disable all plugins, etc.\nAlso note that we don't provide support via GitHub. You're welcome to join our Slack channel though, see https://wp-cli.org/#support.. That PHP warning comes from WordPress, not WP-CLI. It should actually be fixed in core already, see https://core.trac.wordpress.org/ticket/44543. > but what happens if no browser is used?\nThen you'd need to run wp core update-db after deployment.. I don\u2018t think it\u2018s a good idea to show errors/warnings for every command when the DB is not up to date, especially since DB updates are usually rather rare and minor.\nBut perhaps we could add a command to check whether the DB version is current?. Yeah I know \ud83d\ude1e\nCan you point me to the right direction, how I should do these downloads, etc.? I'm sure there are some helper methods for that I don't yet know about.. > Make some operation that should cache something\nAre things like the language command available in the tests? Or perhaps the command to download WP core?. With WP_CLI::add_command( 'cli alias', 'Alias_Command' ); this should enable usage as wp cli alias <get|list|add|..>. Missing empty line afterwards. I'd also verify this with wp cli alias list, just like in the \"Add an alias\" scenario above.. I'd also verify this with wp cli alias list, just like in the \"Add an alias\" scenario above.. These examples need to be wp cli alias now I guess \ud83d\ude42 . This should probably be wp-cli.yml. That's the file name WP-CLI uses for its config.. I see. In this case I would use wp-cli.yml though. Its not this test's job to verify whether WP_CLI_CONFIG_PATH + a custom file name works.. Why the error silencing here? @ silences errors in PHP, see http://php.net/manual/en/language.operators.errorcontrol.php.. ",
    "pierre-dargham": "Thank you for the answers !\nI followed some of @szepeviktor recommandations, it looks better now : https://github.com/pierre-dargham/multisite-clone-duplicator/blob/wp-cli/wp-cli/wp-cli-site-duplicate-subcommand.php\n@danielbachhuber : my subcommand works fine, when I type wp site duplicate <args>, it runs. But wp site help still doesn't mention my subcommand. Do you think I did something wrong, or could it be some bug in wp-cli core ?\nBest regards,\nPierre\n. After looking for the problem in wp-cli php files, I'm pretty sure custom subcommands does not show on wp help <command> because it is runned before wp-settings-cli.php is loaded.\nCan we do something about it ? I opened a pull-request that solve the problem, can you see if you agree with the changes I made ?\n. Thank you ! We'll be waiting for 0.19.0 !\nBest regards\nPierre\n. Thank you for the answers.\nI just checked the fix in #4126 and it solves the issue : no more fatal error in WP frontend.\nI agree it is probably the best solution for a short-term / 1.2.1 patch.\nBut in the long term, I would suggest a refactoring of the wp-cli bootstrap like suggested by @romaingugert, that seems a better solution than https://github.com/wp-cli/wp-cli/issues/3928 because it avoids to load multiple wp-cli command files during WP frontend bootstrap, and it solves the circular dependencies issue between wp-cli framework and wp-cli commands.\nBests regards,\nPierre. Regarding previous issue https://github.com/wp-cli/wp-cli/issues/4124, should we also think about checking that WP frontend bootstrap runs without error ? Could be useful if we go further on the autoloader refactoring, as discussed in https://github.com/wp-cli/wp-cli/issues/3928. I have made some progress on the 2 tests (command-line & web), I will clean my code and submit a PR within the week. It seems that in Travis context, requests to github.com api fail, because of github.com api rate limits as reported in https://github.com/wp-cli/wp-cli/issues/1612\nRequests to github.com are caused by the custom vcs repository for wp-cli/composer-changelogs in wp-cli composer.json file : https://github.com/wp-cli/wp-cli/blob/v1.2.1/composer.json#L20:L25\nI added a commit to add the github-api tag to the 2 new behat scenarios, so we could run them manually, without having CI tests fail, but it goes against the primary goal of this PR, meant to improve compatibility with composer projects, using CI tests.\nI think that wp-cli/composer-changelogs is used to improve commit messages after composer updates, but is never directly called by wp-cli, neither in production or development context. Should it really be a dependency ? It may be a better solution that main contributors install it globally on their local environments as it is related to contributing guidelines, and not wp-cli building or running.\nI can update the PR, deleting the github-api behat tag and removing the wp-cli/composer-changelogs dependency, so we could really test wp-cli behavior in composer project with continuous integration, but It may be wrong to mix issues here. What do you think of it ?\nBests regards,\nPierre. I rebased my PR and reverted last commit to remove github-api tags on behat scenarios. Now it runs the 2 new tests during Travais CI tests, and it passed with success. Thank you for the quick action on removing wp-cli/composer-changelogs !\nI will reply to your comments later, because it is not that simple, but to summarize :\n\nThat will unfortunately not help test the specific issue we're facing\n\nThe test works for https://github.com/wp-cli/wp-cli/issues/4124 (see my examples in the PR above) but may not work for https://github.com/wp-cli/autoload-splitter/pull/6#issuecomment-306548084 Do you refer to this specific issue ? Maybe we should work on a different PR for this one ?\nI'll come back to you,\nPierre. Hello @schlessera\nYou're right, the real-world \"Composer stack\" use case is something like a PHP project with both WordPress core and wp-cli as Composer dependencies (and ./vendor/autoload.php being loaded during application bootstrap.) Especially, a test for this scenario would have made Travis CI fail for release 1.2.0 on the issue we reported: https://github.com/wp-cli/wp-cli/issues/4124\nBut ...\n\nCan you elaborate on why you've built it this way? Were there some technical limitations you've hit?\n\nYes, I think there is a major limitation here: with Composer, we can not require the actual version of wp-cli we want to test, because it is not released yet. We want to test the code of wp-cli at its state on the head of the current local git repository (the one the contributor is working on / the one Travis is running with).\nThe only way of testing / requiring a non-released code of wp-cli as a Composer dependency would be to create a temp VCS Composer repository inside the test context, which I think would lead to a very messy test (we want to avoid such complex operations inside Travis environment as much as possible).\nThis is why we used the current wp-cli code as the Composer base project, requiring only WordPress Core. It should be almost equivalent to have an empty Composer project with only 2 dependencies (wp-cli and WordPress Core). The main difference I see with the real-world case, is only that wp-cli must be called using ./bin/wp instead of ./vendor/bin/wp. I may be wrong, but in theory, the rest should work the same way. Do you see some other differences on wp-cli being / not being the root package ?\nAs reported in the PR description, we checked that this test failed on issue https://github.com/wp-cli/wp-cli/issues/4124 before the fix https://github.com/wp-cli/wp-cli/pull/4126 and then, the test succeeded after the fix https://github.com/wp-cli/wp-cli/pull/4126. So we have a test for an important (and real) use-case : a WordPress bootstrap that loads ./vendor/autoload.php, itself loading wp-cli autoloader. It should allow to require wp-cli as a dependency on production projects, knowing it won't break anything in the WP frontend.\nTo summarize : this scenario doesn't test Composer or WordPress Core, but tests WordPress bootstrap in a Composer stack with wp-cli autoloader being loaded.. Ok, I agree.\nI didn't know about the path repository type, and you're right, it should solve my limitations here :)\nI should be able to make the required changes within a few days. I'll let you know if I don't succeed.. I rebased the PR and made the required changes\nI checked that the test fail on #4124 before fix #4126 and succeed after fix #4126\nThe path Composer repository type worked pretty well, I think we've made some progress here. @JPry is right in his comment https://github.com/wp-cli/wp-cli/pull/4139#issuecomment-319482942 :\n\nWhen running the test with Behat, autoload_commands.php and autoload_framework.php are created\nWhen running the same test manually, autoload_commands.php and autoload_framework.php are not created\n\nIt is because in Behat context :\n- FeatureContext::proc( 'composer ...' ) creates a composer command with the environment variable PATH extended to the vendor/bin directory of wp-cli\n- Then composer command uses vendor/bin/composer of wp-cli\n- Then in https://github.com/wp-cli/autoload-splitter/blob/master/src/ComposerPlugin.php , self::getExtraKey(self::LOGIC_CLASS_LOCATION_KEY, 'vendor/wp-cli/wp-cli/php/WP_CLI/AutoloadSplitter.php'); returns the extra key of wp-cli, instead of the fallback\nIt it why the test succeeded, but it doesn't match the reality.\nIn this PR, I modified the calls to FeatureContext::proc( 'composer ...' ) so we always use the composer binary of the system, and not the one of wp-cli :\n- Now in https://github.com/wp-cli/autoload-splitter/blob/master/src/ComposerPlugin.php , self::getExtraKey(self::LOGIC_CLASS_LOCATION_KEY, 'vendor/wp-cli/wp-cli/php/WP_CLI/AutoloadSplitter.php'); doesn't find the extra key, and returns the fallback\n- Then the test fails, as it should\nNow I think that we can update this test, requiring a version of the autoloader-splitter with the fix https://github.com/wp-cli/autoload-splitter/pull/6 , and the test should pass.\nAfter that, we'll have a roadmap like :\n- We merge https://github.com/wp-cli/autoload-splitter/pull/6 and publish a new release of autoload-splitter\n- We update this PR to make wp-cli require the autoload-splitter new release\n- If all test are successful, we merge this PR\nDo you agree ?\nNote: I don't find anymore branch dev-pr/6 in https://packagist.org/packages/wp-cli/autoload-splitter so I can not require the fix from my PR. Last week, It was still possible, why ? Maybe the PR on autoload-splitter needs to be rebased on the master branch, having no more conflict, to be available on packagist ?. I had to add some extra change to allow composer to require the specific commit in the root project without error (it was something about the minimum stability of the nested packages), but we will revert those extra changes as soon as the autoload-splitter gets a new release with the fix.\nNow the test is successful locally, and i hope it will be the same with Travis\nI'll check it tomorrow\nBests regards :)\nPierre. Hello @schlessera ,\nI've made some updates on the PR.\nI think we'll need to merge https://github.com/wp-cli/autoload-splitter/pull/6 into a temporary branch to have the test pass with Travis CI :\n\n\ncomposer is able to fetch commit https://github.com/wp-cli/autoload-splitter/pull/6/commits/3fe41be41bf7c3e314704fd0f3ed6cb9245a836c from repository https://github.com/wp-cli/autoload-splitter/ but it throws an error/warning that Travis understands as a failure (we could fetch the same commit from https://github.com/JPry/autoload-splitter without error but it is not ideal for the test, even if temporary)\n\n\nrequiring from github.com is OK locally, but in Travis CI context it fails because of github.com api rate limits being always hit by Travis (I think it's a known issue, and we don't want to introduce auth token here, or skip the test with github-api behat tag)\n\n\nIf we merge the fix in a temporary branch, it will be possible to require dev-<branch> version from packagist, we'll have no github.com more rate limits issue, and the test will match the reality better.\nLet me know if you're ok :+1: . Note: in the future, we may want to use a lock version of wp-coding-standards/wpcs from the require-dev section of the project, instead of requiring it only in Travis CI, it would allow:\n\nBetter version control\nDevelopers to use a single command of phpcs (or integrated in Behat tests) to run the codings standards tests locally, without having anything more to configure. I'm not sure about this one (and I'm not familiar with how github PR reviews work) : do you refer to line 468 ? I see only the missing space between parentheses on isset($env['TRAVIS_BUILD_DIR']) but is there any space missing around parentheses ?. \n",
    "gerhardsletten": "No, I am not sure, but I got it from this thread:\nhttp://wordpress.stackexchange.com/questions/70424/posts-per-page-doesnt-work \nThe plugins on the installation where I was working on where:\nbash\n+-------------------------+----------+--------+---------+\n| name                    | status   | update | version |\n+-------------------------+----------+--------+---------+\n| codepress-admin-columns | active   | none   | 2.4.1   |\n| adrotate                | active   | none   | 3.11.3  |\n| advanced-custom-fields  | active   | none   | 4.4.1   |\n| lightbox-gallery        | active   | none   | 0.8.2   |\n| liveblog                | active   | none   | 1.4     |\n| p3-profiler             | active   | none   | 1.5.3.9 |\n| regenerate-thumbnails   | inactive | none   | 2.2.4   |\n| scripts-n-styles        | active   | none   | 3.3     |\n| varnish-http-purge      | active   | none   | 3.4     |\n| w3-total-cache          | active   | none   | 0.9.4.1 |\n| wordpress-importer      | inactive | none   | 0.6.1   |\n| wp-all-import-pro       | inactive | none   | 4.1.3   |\n+-------------------------+----------+--------+---------+\n. ",
    "DrLightman": "Update.\nRegarding this issue, I discovered the existence of the WP constant:\nWP_MAX_MEMORY_LIMIT\nWhich, if not defined in wp-config, defaults to 256M and it was limiting every setting I was trying to use to that value.\nTo prove this I've put:\ndefine('WP_MAX_MEMORY_LIMIT', '512M');\nIn wp-config.php and now the crash occurs exactly at 536870912 bytes (512M), yay:\n\nProcessing post #227486 (\"405532\") (post_type: attachment)\n-- 182 of 24,413\n-- Wed, 22 Apr 2015 14:45:41 +0000\nPHP Fatal error:  Allowed memory size of 536870912 bytes exhausted (tried to allocate 277499 bytes) in /var/www/html/--CUT--/wp-includes/class-http.php on line 1600\nFatal error: Allowed memory size of 536870912 bytes exhausted (tried to allocate 277499 bytes) in /var/www/html/--CUT--/wp-includes/class-http.php on line 1600\n\nWith this established, now I have to understand what the hell is going on on the importer to consume those helluva of resources to hit 512M for an image resize of 812K.\nDo wp-cli import flush cache time to time if you know? And frees/unset unused variables?\n. I'll have to ask the sysadmin, I'm a developer with a low-medium knownledge of unix system.\nAs for the memory leak, to me it seems it should free/unset unused variables maybe, that accumulates and occupy ram, but I haven't dug in the code, I'm not sure.\nBy the way with these lines in wp-config.php the import has run up until 50% of the 24413 post/attachments:\nset_time_limit( 86400 );\ndefine('WP_CACHE', false);\ndefine('WP_MEMORY_LIMIT', '1G');\ndefine('WP_MAX_MEMORY_LIMIT', '1G');\nBut just now it crashed again, with a new error at the bottom:\n\nProcessing post #129058 (\"Foo bar baz\") (post_type: post)\n-- 14,393 of 24,413\n-- Wed, 22 Apr 2015 17:33:55 +0000\n-- Imported post as post_id #129058\nPHP Fatal error:  Maximum execution time of 60 seconds exceeded in /var/www/html/--CUT--/wp-includes/plugin.php on line 216\nFatal error: Maximum execution time of 60 seconds exceeded in /var/www/html/--CUT--/wp-includes/plugin.php on line 216\nzend_mm_heap corrupted\n\nzend_mm_heap corrupted\n. Tried, but crashed again at about 60% of total xml, same max_execution_time of 60 seconds error, even if the script was running for 3 hours straight because the server's mysql was a bit occupied with the other hosted sites. This makes no sense! :(\n\nProcessing post #128969 (\"fooo\") (post_type: post)\n-- 14,304 of 24,413\n-- Wed, 22 Apr 2015 22:08:51 +0000\nPHP Fatal error:  Maximum execution time of 60 seconds exceeded in /var/www/html/--CUT--/wp-includes/wp-db.php on line 1588\nFatal error: Maximum execution time of 60 seconds exceeded in /var/www/html/--CUT--/wp-includes/wp-db.php on line 1588\n\nAt this point I don't know, maybe I try to split/export in chunks to import smaller XMLs.\n. Well, I finally got it working, the import has reached 100%.\nBut, as I wrote earlier, I had to make a small edit to a Wordpress core file, to remove a set_time_limit call.\nfile: /wp-includes/functions.php around line 573\n``` php\nfunction wp_get_http( $url, $file_path = false, $red = 1 ) {\n//  @set_time_limit( 60 ); <-- commented out this\nif ( $red > 5 )\n    return false;\n\n```\nSo, this hack plus both:\ndefine('WP_MEMORY_LIMIT', '1G');\ndefine('WP_MAX_MEMORY_LIMIT', '1G');\nin wp-config.php\nremoved the fatal errors.\nOnly small problem now is that I didn't see the finale message \"Import complete, have fun\", I closed manually, maybe it took much time to do the final calculations, but with no output feedback was hard to understand what was going on, but this is a problem with the default importer not wp-cli.\n^\nedit: added some echos here and there, it's the backfill_attachment_urls function that takes much time it seems.\n. Thanks for the utiliy/patch for the memory.\nI don't know if I'll manage to test it soon, the \"official\" import after the test is already running.\nI'm new to tha phar thing, if I update wp-cli with the auto updater or redownload it, will the patch be already available?\n. After digging disperately, I found this in /wp-includes/functions.php:\n\nfunction wp_get_http( $url, $file_path = false, $red = 1 ) {\n  @set_time_limit( 60 );\n\nTo fetch attachments I presume that this function is called many times each for every attachment obviously minimum. It does indeed at row 909 of /plugins/wordpress-importer/wordpress-importer.php\n\n// fetch the remote url and write it to the placeholder file\n$headers = wp_get_http( $url, $upload['file'] );\n\nAnd I don't want to belive that this function forces max execution time to 60. Neither I want to belive that it doesn't even restore it to the previous value if the function succeedes.\nAny idea on how to solve this matter that does not involve editing WP core files?\n(still I thought set_time_limit had no effect on cli scripts)\n. /usr/bin/php\n. Yes, it shouldn't affect cli scripts, first time I face that issue with PHP in general.\nBut It's also awkward the presence of that call in wp_get_http\n. ",
    "compilingEntropy": "Okay, so it sounds like what you're saying is that it's intentionally looking up one level for a wp-config.php file to use. That's fine, just not the behavior I was expecting, but what about verify-checksums? That also seems to be looking up one level, and not just for the database credentials. This is also intended?\n. Thanks for taking a look guys. =)\n. ",
    "benjamin74": "Nevermind, found the issue.\nWhen using MAMP you need to edit the bash profile like indicated on this post\nhttp://www.ltconsulting.co.uk/getting-wp-cli-work-mamp/\nThat's what I did a year or so ago when I first install WP-CLI...\nBut you need to know than when you UPGRADE Mamp, you'll need to change the path as the PHP version is not the same and your previous php version indicated in your bash profile might not exist anymore...\n. ",
    "eduardoarandah": "(0_o ') never done that but I'll try.\nSome ideas on where the problem could be?\nI have feelings that it should be some replace regex.\nI always develop using .loc domain and then replace it manually to .com for\nproduction as they are same length and dont mess with serialized strings.\nI'll do some tests myself\nEl viernes, 1 de mayo de 2015, Daniel Bachhuber notifications@github.com\nescribi\u00f3:\n\nHm, I don't have any good ideas for this, unfortunately. Can you do a bit\nmore debugging by installing via git clone; composer install and adding\ndebug checkpoints?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/1814#issuecomment-98261690.\n\n\nEnviado desde mi m\u00f3vil\n. Its running on Windows 10 / cygwin\nI haven't had problems with international characters with any other script.\nI'll do some tests on Ubuntu\nEl lunes, 14 de marzo de 2016, Daniel Bachhuber notifications@github.com\nescribi\u00f3:\n\nThe example you've provided seems to work fine for me:\nsalty-wordpress \u279c  wordpress-develop.dev  wp term create category 'Espa\u00f1a'\nSuccess: Created category 2.\nsalty-wordpress \u279c  wordpress-develop.dev  wp term list category\n+---------+------------------+---------------+---------------+-------------+--------+-------+\n| term_id | term_taxonomy_id | name          | slug          | description | parent | count |\n+---------+------------------+---------------+---------------+-------------+--------+-------+\n| 2       | 2                | Espa\u00f1a        | espana        |             | 0      | 0     |\n| 1       | 1                | Uncategorized | uncategorized |             | 0      | 1     |\n+---------+------------------+---------------+---------------+-------------+--------+-------+\nTo verify, this is a stock install of WordPress with all plugins disabled,\na default theme in use, etc.?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/wp-cli/wp-cli/issues/2564#issuecomment-196627036\n\n\nEnviado desde mi m\u00f3vil\n. ## Result in Linux\nstk2@h2.sinetiks.com [~/public_html/sinetiks.com]# php wp-cli.phar term create category 'Espa\u00f1a'\nSuccess: Created category 62.\nstk2@h2.sinetiks.com [~/public_html/sinetiks.com]# php wp-cli.phar term list category\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| term_id | term_taxo | name      | slug      | description | parent | count |\n|         | nomy_id   |           |           |             |        |       |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| 62      | 63        | Espa\u00f1a    | espana    |             | 0      | 0     |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\nResult in windows 10 / Cygwin\n```\n    eduardo@DESKTOP-BPCK5J7 /cygdrive/c/wamp/www/demo.sinetiks.com\n    $ php wp-cli.phar term create category 'Espa\u00f1a'\n    Success: Created category 5.\neduardo@DESKTOP-BPCK5J7 /cygdrive/c/wamp/www/demo.sinetiks.com\n$ php wp-cli.phar term list category\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| term_id | term_taxo | name      | slug      | description | parent | count |\n|         | nomy_id   |           |           |             |        |       |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| 5       | 5         |           | espana    |             | 0      | 0     |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n\n```\nResult in windows 10 / Powershell\nPS C:\\wamp\\www\\demo.sinetiks.com> php wp-cli.phar term create category 'Espa\u00f1a'\nSuccess: Created category 3.\nPS C:\\wamp\\www\\demo.sinetiks.com> php wp-cli.phar term list category\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| term_id | term_taxo | name      | slug      | description | parent | count |\n|         | nomy_id   |           |           |             |        |       |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| 3       | 3         |           | espana    |             | 0      | 0     |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\nResult in windows 10 / Command line\n```\nC:\\wamp\\www\\demo.sinetiks.com>php wp-cli.phar term create category 'Espa\u00f1a'\nSuccess: Created category 4.\nC:\\wamp\\www\\demo.sinetiks.com>php wp-cli.phar term list category\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| term_id | term_taxo | name      | slug      | description | parent | count |\n|         | nomy_id   |           |           |             |        |       |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n| 4       | 4         |           | espana    |             | 0      | 0     |\n+---------+-----------+-----------+-----------+-------------+--------+-------+\n```\n. ",
    "jasondewitt": "+1 on this issue, I'm working on some bash scripts today that I would love to be able to use wp-cli for to pull info out of the db, but I don't want the column names or the grid. I'd love to be able to use wp db query for this, rather than resorting to direct use of the mysql client\n. ",
    "gitname": "I was running WordPress version 4.2.1.\nI re-did the same experiment, this time using the command you used, which was slightly different from the one I first used (shorter username and different email address). That is so we are using a common command.\nI saw the same behavior as I saw before (i.e. \"Success\" message, but no user being created).\nThat behavior is shown here:\n``` bash\n[vagrant@wordpress wordpress]$ wp core version\n4.2.1\n[vagrant@wordpress wordpress]$ wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n+----+------------+--------------+------------------+---------------------+---------------+\n[vagrant@wordpress wordpress]$ wp user create 12345678vv12345678vv12345678vv12345678vv12345678vv12345678vv d+test1@danielbachhuber.com\nPHP Notice:  Undefined variable: role in phar:///usr/share/wp-cli/phar/wp-cli.phar/php/commands/user.php on line 309\nNotice: Undefined variable: role in phar:///usr/share/wp-cli/phar/wp-cli.phar/php/commands/user.php on line 309\nSuccess: Created user 0.\nPassword: !LWK%OMy3gz5\n[vagrant@wordpress wordpress]$ wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n+----+------------+--------------+------------------+---------------------+---------------+\n```\nI then updated WordPress from 4.2.1 to 4.2.2.\nTo my surprise, I saw the same behavior as I did with WordPress 4.2.1 (i.e. a \"Success\" message, but no user being created). In other words, although I am using the same WordPress version and same command as you, I saw different behavior from that which you saw.\nHere is the behavior I saw:\n``` bash\n[vagrant@wordpress wordpress]$ wp core version\n4.2.1\n[vagrant@wordpress wordpress]$ wp core update --version=4.2.2\nUpdating to version 4.2.2 (en_US)...\nDownloading update from https://wordpress.org/wordpress-4.2.2.zip...\nUnpacking the update...\nSuccess: WordPress updated successfully.\n[vagrant@wordpress wordpress]$ wp core version\n4.2.2\n[vagrant@wordpress wordpress]$ wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n+----+------------+--------------+------------------+---------------------+---------------+\n[vagrant@wordpress wordpress]$ wp user create 12345678vv12345678vv12345678vv12345678vv12345678vv12345678vv d+test1@danielbachhuber.com\nPHP Notice:  Undefined variable: role in phar:///usr/share/wp-cli/phar/wp-cli.phar/php/commands/user.php on line 309\nNotice: Undefined variable: role in phar:///usr/share/wp-cli/phar/wp-cli.phar/php/commands/user.php on line 309\nSuccess: Created user 0.\nPassword: #Xif23UPbgPw\n[vagrant@wordpress wordpress]$ wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n+----+------------+--------------+------------------+---------------------+---------------+\n```\n. I installed wp-cli using the following command:\n``` bash\n[vagrant@wordpress ~]$ composer create-project wp-cli/wp-cli --no-dev\nInstalling wp-cli/wp-cli (v0.19.0)\n  - Installing wp-cli/wp-cli (v0.19.0)\n    Downloading: 100%\nCreated project in /home/vagrant/wp-cli\nLoading composer repositories with package information\nInstalling dependencies\n  - Installing wp-cli/php-cli-tools (v0.10.4)\n    Downloading: 100%\n\n\nInstalling nb/oxymel (v0.1.0)\n    Downloading: 100%\n\n\nInstalling mustache/mustache (v2.8.0)\n    Downloading: 100%\n\n\nInstalling ramsey/array_column (1.1.3)\n    Downloading: 100%\n\n\nInstalling rmccue/requests (v1.6.1)\n    Downloading: 100%\n\n\nInstalling symfony/finder (v2.6.7)\n    Downloading: 100%\n\n\nWriting lock file\nGenerating autoload files\n[vagrant@wordpress ~]$\n```\nThen, I ran the experiment again, using this wp-cli instance. The console excerpt below shows this new instance of wp-cli behaves the same way as the old one, when I try to create a user with a 60-character name: \n``` bash\n[vagrant@wordpress bin]$ /home/vagrant/wp-cli/bin/wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n| 21 | xyz        | xyz          | xyz@example.com  | 2015-05-11 07:35:20 | subscriber    |\n+----+------------+--------------+------------------+---------------------+---------------+\n[vagrant@wordpress bin]$ /home/vagrant/wp-cli/bin/wp user create 12345678vv12345678vv12345678vv12345678vv12345678vv12345678vv d+test1@danielbachhuber.com\nPHP Notice:  Undefined variable: role in /home/vagrant/wp-cli/php/commands/user.php on line 309\nNotice: Undefined variable: role in /home/vagrant/wp-cli/php/commands/user.php on line 309\nSuccess: Created user 0.\nPassword: p1IRKa4pNAbi\n[vagrant@wordpress bin]$ /home/vagrant/wp-cli/bin/wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n| 21 | xyz        | xyz          | xyz@example.com  | 2015-05-11 07:35:20 | subscriber    |\n+----+------------+--------------+------------------+---------------------+---------------+\n[vagrant@wordpress bin]$\n```\nNext, I added var_dump() invocations to the file wp-cli/user.php, among the lines you highlighted. Here is what that part of my modified wp-cli/user.php files looks like:\n``` php\n                if ( is_multisite() ) {\n                        $ret = wpmu_validate_user_signup( $user->user_login, $user->user_email );\n                 // DEBUG\n                    printf(\"dumping \\$ret after calling wpmu_validate_user_signup\\n\");\n                    var_dump($ret);\n\n                    if ( is_wp_error( $ret['errors'] ) && ! empty( $ret['errors']->errors ) ) {\n                            WP_CLI::error( $ret['errors'] );\n                    }\n                    $user_id = wpmu_create_user( $user->user_login, $user->user_email, $user->user_login, $user->user_pass );\n\n                 // DEBUG\n                    printf(\"dumping \\$user_id after calling wpmu_create_user\\n\");\n                    var_dump($user_id);\n\n                    if ( ! $user_id ) {\n                            WP_CLI::error( \"Unknown error creating new user\" );\n                    }\n                    $user->ID = $user_id;\n                    $user_id = wp_update_user( $user );\n\n                 // DEBUG\n                    printf(\"dumping \\$user_id after calling wp_update_user\\n\");\n                    var_dump($user_id);\n\n                    if ( is_wp_error( $user_id ) ) {\n                            WP_CLI::error( $user_id );\n                    }\n            } else {\n                    $user_id = wp_insert_user( $user );\n\n                 // DEBUG\n                    printf(\"dumping \\$user_id after calling wp_insert_user\\n\");\n                    var_dump($user_id);\n\n            }\n\n```\nWith those debug statements in place, I again tried creating a user with a 60-character name. Like before, I saw a success message, but I did not see the new user in the user list.\nHere is what the shell prompt showed (now that I have the var_dump() invocations in place). According to the debug output, the call to wp_insert_user(...) on line 299 of the original file, returned int(0).\n``` bash\n[vagrant@wordpress wp-cli]$ vi /home/vagrant/wp-cli/php/commands/user.php\n[vagrant@wordpress wp-cli]$ /home/vagrant/wp-cli/bin/wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n| 21 | xyz        | xyz          | xyz@example.com  | 2015-05-11 07:35:20 | subscriber    |\n+----+------------+--------------+------------------+---------------------+---------------+\n[vagrant@wordpress wp-cli]$ /home/vagrant/wp-cli/bin/wp user create 12345678vv12345678vv12345678vv12345678vv12345678vv12345678vv d+test1@danielbachhuber.com\ndumping $user_id after calling wp_insert_user\nint(0)\nPHP Notice:  Undefined variable: role in /home/vagrant/wp-cli/php/commands/user.php on line 329\nNotice: Undefined variable: role in /home/vagrant/wp-cli/php/commands/user.php on line 329\nSuccess: Created user 0.\nPassword: sve#(PyJ*YDH\n[vagrant@wordpress wp-cli]$ /home/vagrant/wp-cli/bin/wp user list\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 8  | abc        | abc          | abc@example.com  | 2015-05-06 22:46:05 | subscriber    |\n| 1  | admin      | admin        | vccw@example.com | 2015-05-06 22:12:21 | administrator |\n| 21 | xyz        | xyz          | xyz@example.com  | 2015-05-11 07:35:20 | subscriber    |\n+----+------------+--------------+------------------+---------------------+---------------+\n[vagrant@wordpress wp-cli]$\n```\nIn summary, the new instance of wp-cli behaves the same way the old one did, and the call to wp_insert_user on line 299 returns int(0).\n. ",
    "jthayne": "I have tried several variations from the WP_Query documentation here but the result is the same every time.  The only filter that does anything is --post-type=page and then all other filters are ignored.\n. ",
    "ethanclevenger91": "Huh, I had usually had trouble doing it that way on Windows but everything works great. Aliased to wp and all is well. Thanks for the (obvious) suggestion - should have tried it first.\n. Ah, now that I get going, I remember the issue - that alias is in my .bashrc and if I try to run a shell script with the wp command in it, it fails because the alias doesn't persist outside of Bash, which is why I've used the alternative install method in the past, giving me a .bat file.\n. But installing via composer this morning is panning out, so whatever. Sorry about all that.\n. The above is actually invalid PHP. You can only include a variable directly in your string if you've done double quotes, so either:\nshell_exec( \"wp option update github_updater '$github_updater_args' --format=json\" );\nor concatenate strings:\nshell_exec( 'wp option update github_updater \\''.$github_updater_args.'\\' --format=json' );\nBoth of which still get the Invalid JSON error.\n. That's functionally the same as \nshell_exec( \"wp option update github_updater '$github_updater_args' --format=json\" );\nSo results in the same error. If you're fairly certain this isn't a WP-CLI issue, I can definitely open something on StackOverflow to get some more general help.\n. GitHub doesn't support .lock files, so I changed it to .txt. \ncomposer.txt\nOutput the first time I gave it a go this morning: \n```\n$ composer update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\n  - Removing symfony/finder (v2.7.5)\n  - Installing symfony/finder (v2.8.0)\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 30%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 80%m\n    Downlo    Downloading: 100%\n\nRemoving symfony/yaml (v2.7.5)\n\nInstalling symfony/yaml (v2.8.0)\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 40%m\n    Downlo    Downlo    Downlo    Downlo    Downloading: 100%\n\n\nRemoving symfony/filesystem (v2.7.5)\n\n\nInstalling symfony/filesystem (v3.0.0)\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 100%9\nm\n\n\nRemoving symfony/config (v2.7.5)\n\n\nInstalling symfony/config (v2.8.0)\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 25%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 65%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 100%9\nm\n\n\nInstalling symfony/polyfill-mbstring (v1.0.0)\n    Downlo    Downlo    Downlo    Downlo    Downloading: 100%\n\n\nRemoving symfony/console (v2.7.5)\n\n\nInstalling symfony/console (v2.8.0)\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 20%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 50%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 80%m\n    Downlo    Downlo    Downlo    Downlo    Downloading: 100%\n\n\nRemoving symfony/dependency-injection (v2.7.5)\n\n\nInstalling symfony/dependency-injection (v2.8.0)\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 20%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 50%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 80%m\n    Downlo    Downlo    Downlo    Downlo    Downloading: 100%\n\n\nRemoving symfony/event-dispatcher (v2.7.5)\n\n\nInstalling symfony/event-dispatcher (v2.8.0)\n    Downlo    Downlo    Downlo    Downlo    Downloading: 100%\n\n\nRemoving symfony/translation (v2.7.5)\n\nInstalling symfony/translation (v2.8.0)\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 20%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 50%m\n    Downlo    Downlo    Downlo    Downlo    Downlo    Downloading: 80%m\n    Downlo    Downlo    Downlo    Downloading: 100%\n```\n\nAnd now:\n$ composer update\nLoading composer repositories with package information\nUpdating dependencies (including require-dev)\nNothing to install or update\nGenerating autoload files\nFWIW, Windows 10. Composer itself is also up-to-date.\n. Shouldn't composer update update the composer.lock file?\n. Also - removing composer.lock and then running composer update regenerates the lock file and still doesn't update.\n. Will it be updatable if I leave off the --no-dev?\n. Fair enough. I've never figured out .phar and Windows, but may give it another stab. Thanks!\n. I'll keep an eye out then. Thanks!\n. Depends on what kind of unexpected behavior you're potentially foreseeing. In my experience, I'm almost exclusively using intermediate sizes that I've declared rather than the built-in ones.\n. ",
    "pkosenko": "I do not understand.  No explanation is being offered here for why the @ECHO line gives the error.  It is happening to me in GIT Bash regardless of trying to run wp-cli.phar.  If the first line of my .bat file has @ECHO OFF, I get the error.  Is there a way to fix THAT?\nIt looks to me like GIT Bash simply does not understand @ECHO or PAUSE (also).\n. But I now see that the workaround is to alias the wp-cli.phar executable in .bashrc if I want to run in GIT Bash rather than DOS (which would require the  .bat file).\n. ",
    "jaworskimatt": "I'm having a similar issue with 0.19.11 (using Vagrantpress)\nrequire_once(/tmp/wordpress//wp-includes/class-phpmailer.php): failed to open stream\n@danielbachhuber  @miya0001  @lassebunk \n\n. ",
    "LjupcheVasilev": "If you're on Windows, open wp-tests-config.php and change the ABSPATH with absolute path to your TEMP folder. For example:\ndefine( 'ABSPATH', 'C:\\Users{User}\\AppData\\Local\\Temp/wordpress/' );\nI changed this and phpunit worked! This code is on line 7 in %TEMP%/wordpress-tests-lib/wp-tests-config.php . If you're on Windows, open wp-tests-config.php and change the ABSPATH with absolute path to your TEMP folder. For example:\ndefine( 'ABSPATH', 'C:\\Users{User}\\AppData\\Local\\Temp/wordpress/' );\nI changed this and phpunit worked! This code is on line 7 in %TEMP%/wordpress-tests-lib/wp-tests-config.php . ",
    "kevindoole": "I'm actually having a bit of trouble figuring out how to run wp-cli outside of the tests. For example, if i want to try out --verbose on one of my local databases, how can i actually just run the search-replace command in a way that includes my changes?\n. Worked like a charm, thanks!\nHere's full sample output for one of my sites.\nChecking: wp_commentmeta.meta_key\n0 rows affected\nChecking: wp_commentmeta.meta_value\n0 rows affected\nChecking: wp_comments.comment_author\n0 rows affected\nChecking: wp_comments.comment_author_email\n0 rows affected\nChecking: wp_comments.comment_author_url\n3 rows affected\nChecking: wp_comments.comment_author_IP\n0 rows affected\nChecking: wp_comments.comment_content\n2 rows affected\nChecking: wp_comments.comment_approved\n0 rows affected\nChecking: wp_comments.comment_agent\n0 rows affected\nChecking: wp_comments.comment_type\n0 rows affected\nChecking: wp_links.link_url\n0 rows affected\nChecking: wp_links.link_name\n0 rows affected\nChecking: wp_links.link_image\n0 rows affected\nChecking: wp_links.link_target\n0 rows affected\nChecking: wp_links.link_description\n0 rows affected\nChecking: wp_links.link_visible\n0 rows affected\nChecking: wp_links.link_rel\n0 rows affected\nChecking: wp_links.link_notes\n0 rows affected\nChecking: wp_links.link_rss\n0 rows affected\nChecking: wp_options.option_name\n2 rows affected\nChecking: wp_options.option_value\n14 rows affected\nChecking: wp_options.autoload\n0 rows affected\nChecking: wp_p2p.p2p_type\n0 rows affected\nChecking: wp_p2pmeta.meta_key\n0 rows affected\nChecking: wp_p2pmeta.meta_value\n0 rows affected\nChecking: wp_postmeta.meta_key\n0 rows affected\nChecking: wp_postmeta.meta_value\n424 rows affected\nChecking: wp_posts.post_content\n883 rows affected\nChecking: wp_posts.post_title\n4 rows affected\nChecking: wp_posts.post_excerpt\n0 rows affected\nChecking: wp_posts.post_status\n0 rows affected\nChecking: wp_posts.comment_status\n0 rows affected\nChecking: wp_posts.ping_status\n0 rows affected\nChecking: wp_posts.post_password\n0 rows affected\nChecking: wp_posts.post_name\n9 rows affected\nChecking: wp_posts.to_ping\n0 rows affected\nChecking: wp_posts.pinged\n0 rows affected\nChecking: wp_posts.post_content_filtered\n0 rows affected\nChecking: wp_posts.guid\n23683 rows affected\nChecking: wp_posts.post_type\n0 rows affected\nChecking: wp_posts.post_mime_type\n0 rows affected\nChecking: wp_term_taxonomy.taxonomy\n0 rows affected\nChecking: wp_term_taxonomy.description\n0 rows affected\nChecking: wp_terms.name\n0 rows affected\nChecking: wp_terms.slug\n0 rows affected\nChecking: wp_usermeta.meta_key\n0 rows affected\nChecking: wp_usermeta.meta_value\n29 rows affected\nChecking: wp_users.user_login\n0 rows affected\nChecking: wp_users.user_nicename\n0 rows affected\nChecking: wp_users.user_email\n0 rows affected\nChecking: wp_users.user_url\n0 rows affected\nChecking: wp_users.user_activation_key\n0 rows affected\nChecking: wp_users.display_name\n0 rows affected\n+------------------+-----------------------+--------------+------+\n| Table            | Column                | Replacements | Type |\n+------------------+-----------------------+--------------+------+\n| wp_commentmeta   | meta_key              | 0            | SQL  |\n| wp_commentmeta   | meta_value            | 0            | PHP  |\n| wp_comments      | comment_author        | 0            | SQL  |\n| wp_comments      | comment_author_email  | 0            | SQL  |\n| wp_comments      | comment_author_url    | 3            | SQL  |\n| wp_comments      | comment_author_IP     | 0            | SQL  |\n| wp_comments      | comment_content       | 2            | SQL  |\n| wp_comments      | comment_approved      | 0            | SQL  |\n| wp_comments      | comment_agent         | 0            | SQL  |\n| wp_comments      | comment_type          | 0            | SQL  |\n| wp_links         | link_url              | 0            | SQL  |\n| wp_links         | link_name             | 0            | SQL  |\n| wp_links         | link_image            | 0            | SQL  |\n| wp_links         | link_target           | 0            | SQL  |\n| wp_links         | link_description      | 0            | SQL  |\n| wp_links         | link_visible          | 0            | SQL  |\n| wp_links         | link_rel              | 0            | SQL  |\n| wp_links         | link_notes            | 0            | SQL  |\n| wp_links         | link_rss              | 0            | SQL  |\n| wp_options       | option_name           | 2            | SQL  |\n| wp_options       | option_value          | 14           | PHP  |\n| wp_options       | autoload              | 0            | SQL  |\n| wp_p2p           | p2p_type              | 0            | SQL  |\n| wp_p2pmeta       | meta_key              | 0            | SQL  |\n| wp_p2pmeta       | meta_value            | 0            | SQL  |\n| wp_postmeta      | meta_key              | 0            | SQL  |\n| wp_postmeta      | meta_value            | 424          | PHP  |\n| wp_posts         | post_content          | 883          | SQL  |\n| wp_posts         | post_title            | 4            | SQL  |\n| wp_posts         | post_excerpt          | 0            | SQL  |\n| wp_posts         | post_status           | 0            | SQL  |\n| wp_posts         | comment_status        | 0            | SQL  |\n| wp_posts         | ping_status           | 0            | SQL  |\n| wp_posts         | post_password         | 0            | SQL  |\n| wp_posts         | post_name             | 9            | SQL  |\n| wp_posts         | to_ping               | 0            | SQL  |\n| wp_posts         | pinged                | 0            | SQL  |\n| wp_posts         | post_content_filtered | 0            | SQL  |\n| wp_posts         | guid                  | 23683        | SQL  |\n| wp_posts         | post_type             | 0            | SQL  |\n| wp_posts         | post_mime_type        | 0            | SQL  |\n| wp_term_taxonomy | taxonomy              | 0            | SQL  |\n| wp_term_taxonomy | description           | 0            | SQL  |\n| wp_terms         | name                  | 0            | SQL  |\n| wp_terms         | slug                  | 0            | SQL  |\n| wp_usermeta      | meta_key              | 0            | SQL  |\n| wp_usermeta      | meta_value            | 29           | PHP  |\n| wp_users         | user_login            | 0            | SQL  |\n| wp_users         | user_nicename         | 0            | SQL  |\n| wp_users         | user_email            | 0            | SQL  |\n| wp_users         | user_url              | 0            | SQL  |\n| wp_users         | user_activation_key   | 0            | SQL  |\n| wp_users         | display_name          | 0            | SQL  |\n+------------------+-----------------------+--------------+------+\nSuccess: Made 25053 replacements.\n. Yay! Thanks for the help. \n. Tossed together some tests on a decent-size database i have here to get a rough idea:\n0 replacements\n- wp_postmeta.meta_key with 101,698 rows took 24s\n- wp_postmeta.meta_value with 101,698 rows took 27s\n- wp_posts.post_content with 29,452 took 13s\nwith some replacements\n- wp_postmeta.meta_value with 98,277 rows and 1607 replacements took 26s\n- wp_posts.post_content with 38,496 rows and 8702 replacements took 27s\n. I'm not sure if this nails it on the head, but here's a couple comparisons on the same database (38,496 rows in wp_posts and 98,277 rows in wp_postmeta).\nWith 0 replacements:\nnot --regex: 9s\n--regex: 171s\nWith 18,250 replacements:\nnot --regex: 15s\n--regex: 176s\n. Sounds good. I'll run it on a couple other databases when I get home tonight to see roughly how long it takes for smaller / larger databases. Given the couple attempts i made, it's sitting right now at about 20x slower.\nMight be worth opening a ticket to see if anyone knows how to speed this up. My mysql skills aren't great, so there could easily be a way around this, which is really what slows it down so significantly.\n. So...\n- on about 1.3 million rows, it took 16x longer with --regex\n- on about 409k rows, it took 17x longer with --regex\nSo, the warning message.\nRuns the search using a regular expression. Warning: search-replace will take about 15-20x longer when using --regex.\n. cool, warning added.\n. This was passing the build before, but fails now. Not clear to me what caused the problem, which seems unrelated. The failing test is wp scaffold _s -- it creates the theme, but then cannot enable it.\nIs it possible builds just fail sometimes, or should I be hunting down the problem?\n. Thanks for the help! Oh, i briefly looked into the diff idea, but it looked to me like it would require adding a composer package. Figure it best to leave it for now.\n. (Aack, somehow didn't notice the original pull request for this one yesterday. fwiw, the discussion there leans toward a file-by-file confirmation.)\n. Agreed. So, something like:\n```\n$ wp scaffold plugin blah\nFile already exists:\n/Users/kevindoole/code/htdocs/agcanada/wp-content/plugins/blah/blah.php\nSkip this file, or replace it with scaffolding? [s/r] r\nFile already exists\n/Users/kevindoole/code/htdocs/agcanada/wp-content/plugins/blah/readme.txt\nSkip this file, or replace it with scaffolding? [s/r] s\nFile already exists\n/Users/kevindoole/code/htdocs/agcanada/wp-content/plugins/blah/package.json\nSkip this file, or replace it with scaffolding? [s/r] s\nFile already exists\n/Users/kevindoole/code/htdocs/agcanada/wp-content/plugins/blah/Gruntfile.js\nSkip this file, or replace it with scaffolding? [s/r] r\nSuccess: Created /Users/kevindoole/code/htdocs/agcanada/wp-content/plugins/blah\nFile already exists\n/Users/kevindoole/code/htdocs/agcanada/wp-content/plugins/blah/tests/bootstrap.php\nSkip this file, or replace it with scaffolding? [s/r] r\nSuccess: Created test files.\n$ wp scaffold plugin blah --force\nSuccess: Created /Users/kevindoole/code/htdocs/agcanada/wp-content/plugins/blah\nSuccess: Created test files.\n```\n. Totally! I'll keep it in mind this afternoon when I make these changes -- could be simple to include.\n. I think i've covered everything here at this point, although i wrote no tests. Seems like this should be tested, no?\n(WP_CLI@prompt is pretty rickety -- just mocked it up quick in order to prepare this output.)\nIn any case, here are some examples. Long story short, it prompts when a file will be overwritten. At the end of the process, it gives a success message when files are written, or a message that all files were skipped. There's the option of, along with the success message, additionally showing which files were created.\n```\n$ wp scaffold taxonomy test --theme=twentythirteen\nSuccess: Created /Users/kevindoole/code/htdocs/wptests/wp-content/themes/twentythirteen/taxonomies/testing.php\n$ wp scaffold taxonomy test --theme=twentythirteen\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/themes/twentythirteen/taxonomies/testing.php\nSkip this file, or replace it with scaffolding? [s/r] s\nSkipped creating /Users/kevindoole/code/htdocs/wptests/wp-content/themes/twentythirteen/taxonomies/testing.php\n$ wp scaffold taxonomy test --theme=twentythirteen\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/themes/twentythirteen/taxonomies/testing.php\nSkip this file, or replace it with scaffolding? [s/r] r\nSuccess: Created /Users/kevindoole/code/htdocs/wptests/wp-content/themes/twentythirteen/taxonomies/testing.php\n```\n```\n$ wp scaffold plugin testing\nSuccess: Created plugin files.\nSuccess: Created test files.\n$ wp scaffold plugin testing\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/testing.php\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/readme.txt\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/package.json\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/Gruntfile.js\nSkip this file, or replace it with scaffolding? [s/r] s\nAll plugin files were skipped.\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/tests/bootstrap.php\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/bin/install-wp-tests.sh\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/.travis.yml\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/phpunit.xml\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/tests/test-sample.php\nSkip this file, or replace it with scaffolding? [s/r] s\nAll test files were skipped.\n$ wp scaffold plugin testing\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/testing.php\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/readme.txt\nSkip this file, or replace it with scaffolding? [s/r] r\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/package.json\nSkip this file, or replace it with scaffolding? [s/r] r\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/Gruntfile.js\nSkip this file, or replace it with scaffolding? [s/r] s\nSuccess: Created plugin files.\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/tests/bootstrap.php\nSkip this file, or replace it with scaffolding? [s/r] r\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/bin/install-wp-tests.sh\nSkip this file, or replace it with scaffolding? [s/r] as\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/.travis.yml\nSkip this file, or replace it with scaffolding? [s/r] s\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/phpunit.xml\nSkip this file, or replace it with scaffolding? [s/r] r\nWarning: File already exists:\n/Users/kevindoole/code/htdocs/wptests/wp-content/plugins/testing/tests/test-sample.php\nSkip this file, or replace it with scaffolding? [s/r] s\nSuccess: Created test files.\n```\n. Tests added, --force works correctly. The output has changed slightly:\n$ wp scaffold plugin test\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/test.php already exists.\nSkip this file, or replace it with scaffolding?[s/r]: s\nSkipped\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/readme.txt already exists.\nSkip this file, or replace it with scaffolding?[s/r]: s\nSkipped\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/package.json already exists.\nSkip this file, or replace it with scaffolding?[s/r]: r\nReplaced\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/Gruntfile.js already exists.\nSkip this file, or replace it with scaffolding?[s/r]: s\nSkipped\nSuccess: Created plugin files.\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/tests/bootstrap.php already exists.\nSkip this file, or replace it with scaffolding?[s/r]: s\nSkipped\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/bin/install-wp-tests.sh already exists.\nSkip this file, or replace it with scaffolding?[s/r]: s\nSkipped\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/.travis.yml already exists.\nSkip this file, or replace it with scaffolding?[s/r]: s\nSkipped\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/phpunit.xml already exists.\nSkip this file, or replace it with scaffolding?[s/r]: r\nReplaced\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/tests/test-sample.php already exists.\nSkip this file, or replace it with scaffolding?[s/r]: r\nReplaced\nSuccess: Created test files.\n$ wp scaffold plugin-tests test --force\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/tests/bootstrap.php already exists.\nReplaced\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/bin/install-wp-tests.sh already exists.\nReplaced\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/.travis.yml already exists.\nReplaced\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/phpunit.xml already exists.\nReplaced\nWarning: /Users/kevindoole/code/htdocs/wptests/wp-content/plugins/test/tests/test-sample.php already exists.\nReplaced\nSuccess: Created test files.\n. Ah, yeah; i was screwing around with it a bit -- fixed!\n. Ok, fixed everything, but left prompt_if_files_will_be_overwritten() as is for now.\n. Good question. If the intention of the verbose flag is simply to report progress, it probably only needs to explain the table and columns it's working on. Might also be nice to include whether or not it found anything to replace as it goes. Something like this:\n```\n$ wp search-replace 'blah' 'blurp' --verbose\nChecking: wp_posts.post_content\n0 rows affected\nChecking: wp_posts.post_title\n0 rows affected\nChecking: wp_posts.post_excerpt\n1 row affected\n[...]\n``\n. Yeah, this could definitely get pulled into_run`. Pulling it out into a function was my knee-jerk reaction to nesting ifs inside ifs, but it definitely still reads.\n. added\n. ",
    "rahul286": "@joshbetz you can add an alias wp=\"wp --allow-root\" inside your .bashrc\nIn one-line:\necho 'alias wp=\"wp --allow-root\"' >>  ~/.bashrc\nHowever, using root is not recommended. So avoid this on a production server.\n. @ixkaito Thanks for the improvement. :-)\n. TL;DR; \n- Try brew update && brew upgrade and fix brew doctor (if you use brew)\n- Install all system updates/latest packages. \n\nMe and @chandra-patel (above) sit together and managed to fix the issue on @chandra-patel machine.\nWe tried many things. Just few before issue got fixed, I remember running: \nbrew update && brew upgrade\nChandra recently switched to Mac and started using brew but did not update packages. I suspect, by the error message description, that some encoding library was not upto date.\nWhen we run brew upgrade 40+ packages upgraded which solved issue.\nWe also fixed all warnings and error thrown by brew doctor.\nSome article on Internet suggests updating openssl to latest version >1.0. My Mac also running old version but never had this issue.\nOther things we try was - Chandra uses MAMP and had MAMP's PHP/WP-CLI version in PATH. I replaced MAMP's wp-cli version with the latest one from github. I used brew install wp-cli to install wp-cli on @chandra-patel machine.\nDuring debugging we misled by output of:\nopenssl s_client -showcerts -connect wordpress.org:443\nopenssl s_client -showcerts -connect wp-cli.org:443\nwordpress.org SSL worked nicely but there were some issues with wp-cli.org SSL. But that error doesn't affect wp package commands.\n. ",
    "ixkaito": "@rahul286\nFound a problem of using alias wp=\"wp --allow-root\". We won't be able to use WP-CLI aliases. Adding the following code to the .bashrc will solve this problem.\nwp() {\n  /usr/local/bin/wp \"$@\" --allow-root\n}\n. ",
    "alexstandiford": "For those running docker-compose I was able to get by the --allow-root nag by changing my entrypoint to include the --allow-root flag\ncli:\n    build: .\n    volumes:\n      - ~/.ssh:/root/.ssh/\n    volumes_from:\n      - wp\n    links:\n      - 'db:mysql'\n    entrypoint: wp --allow-root. ",
    "leehblue": "I don't have includes as part of the path in the environment variable. If you have includes as part of the env variable then the extraction works but running phpunit doesn't. This is what I have set up for the environment variables.\nexport WP_TESTS_DIR=/Users/lee/tmp/wordpress-tests-lib\nexport WP_CORE_DIR=/Users/lee/tmp/wordpress/\n. The fallback when you are not using env vars has a superfluous /includes on then end of the WP_TESTS_DIR value. So I removed that as well which should resolve the issue. If not, let me know and I'll keep working on it.\n. I just created a branch, fresh from the wp-cli repo, where the only change was changing this:\nWP_TESTS_DIR=${WP_TESTS_DIR-/tmp/wordpress-tests-lib/includes}\nto this:\nWP_TESTS_DIR=${WP_TESTS_DIR-/tmp/wordpress-tests-lib/}\n(removing the trailing includes from the fallback path)\nThen I ran:\nbash bin/install-wp-tests.sh <dbname> <dbuser> <dbpass>\nThe result was that the files did not get extracted into the includes directory and instead looked like this:\n/tmp/wordpress-tests-lib\n\u271d ls\nbootstrap.php           functions.php           mock-image-editor.php   testcase-canonical.php  trac.php\nexceptions.php          install.php             mock-mailer.php         testcase-xmlrpc.php     utils.php\nfactory.php             mock-fs.php             testcase-ajax.php       testcase.php            wp-profiler.php\nI think this is because of line #59:\nsvn co --quiet http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ $WP_TESTS_DIR\nBecause $WP_TESTS_DIR does not end with /includes (since that is the change made in this test branch)\nThen running\nphpunit\nProduced the expected error of:\nWarning: require_once(/tmp/wordpress-tests-lib/includes/functions.php): failed to open stream: No such file or directory\nSince the files were not installed in the includes directory.\nAll this is to say, that it seems like both changes in this pull request appear to be necessary. Please let me know if there's anything else I can do to help sort all this out. (sorry for the long comment)\n. Is anyone waiting on me for anything? I certainly didn't mean to drop the ball. It looks like the last comment was my long message about these changes. I'm just not sure what I'm supposed to be doing now - if anything. Thanks :)\n. ",
    "ingomueller-net": "This is what happens when I run wp:\n$ ./vendor/wp-cli/wp-cli/bin/wp\n./vendor/wp-cli/wp-cli/bin/wp: line 11: dirname: command not found\n./vendor/wp-cli/wp-cli/bin/wp: line 11: cd: : No such file or directory\n./vendor/wp-cli/wp-cli/bin/wp: line 26: dirname: command not found\n./vendor/wp-cli/wp-cli/bin/wp: line 39: which: command not found\n./vendor/wp-cli/wp-cli/bin/wp: line 46: exec: : not found`\nThis answer on Stackoverflow describes a way how to check for the existence of commands with only bash built-ins. Maybe doing this kind of check for all non-built-in commands is a solution?\n. Using the PHAR archive works, but I loose the ability to install it with composer.\n. It is an edge case and I will find a solution. Thanks for the two ideas!\n. I am automating deployment with ansible. This and other similar tools bring a remote system into a desired state and report whether or not changes were needed to do so. In our case, I want the remote system \"to have an up-do-date wordpress database\". If I want to correctly report whether a change was made, I need to implement a changed_when command. Maybe #2172 could be enough to achieve that by parsing the output of update-db.\nStill with ansible, I might want to backup the database before running the upgrade. I would then implement a changed_when command using update-db-status or update-db --dry run and parse the output. If an update is available, I would trigger a backup + update of the database using ansible's notify. Here #2172 would not be enough.\n(Sorry for accidentally closing the issue.)\n. Awesome :)\n. ",
    "digitalchild": "Clear out your .wp-cli cache/core directory and try again. I had this issue just yesterday. \n. ",
    "tw2113": "Just some hopefully helpful notes. I'm using https://atlas.hashicorp.com/rasmus/boxes/php7dev for my PHP7 source and am not running into much for issues, other than the ones below and similar.\nWarning: The `wp plugin install` command has an invalid synopsis part: [--force]\nWarning: The `wp plugin install` command has an invalid synopsis part: [--activate]\nWarning: The `wp plugin install` command has an invalid synopsis part: [--activate-network]\nHowever, I am also using the .phar file locally in the folder instead of having it in a place like /usr/local/bin.\nNot sure how related it is, but food for thought.\n. my thoughts were something like wp plugin changelog $plugin_name or whatever best fits, and it displays the available changelog similar to how the modal popup does when you click the \"View version #.#.# details.\" link on the updates page. Fetch and display the same content.\n. @danielbachhuber it wouldn't be named \"1\", the number would just correspond to the same position in the list so that someone could type \"1\" instead of \"longer-theme-name\"\n. ",
    "andyexeter": "I tried to set the environment variable in a couple places in the command but it doesn't seem to have an effect. First I tried:\nWP_CLI_CACHE_DIR=/var/www/vhosts/site1/.wp-cli/cache sudo -u $USER  /usr/local/bin/wp \"$@\" --path=/var/www/vhosts/site2\nThen I tried placing the variable after sudo:\nsudo -u $USER WP_CLI_CACHE_DIR=/var/www/vhosts/site1/.wp-cli/cache  /usr/local/bin/wp \"$@\" --path=/var/www/vhosts/site2\nBut the CLI still downloaded and cached the plugin I was updating for every install. Am I doing something wrong?\n. Thanks. To anyone else looking to do the same thing, I had to specify the -E flag to sudo to preserve environment variables:\nexport WP_CLI_CACHE_DIR=/var/www/vhosts/site1/.wp-cli/cache\nsudo -u $USER -E /usr/local/bin/wp \"$@\" --path=/var/www/vhosts/site2\n. Is it any more ambiguous than --skip-columns=<columns>? If I add a column to the --skip-columns flag I would expect it to skip that column in any table the search/replace is being performed in. If I added a column to an --include-columns flag I'd expect the opposite of that i.e include that column in any table the search/replace is being performed in (therefore excluding all other columns in that table)\nThe only issue I can see with your idea about the wp_posts:post_content syntax is that table names can contain colons and possibly other characters, so if someone (rather stupidly) added a table to their database  called wp_posts:post_content, how would the parser know if the user is referring to that table or the post_content column in the wp_posts table? The delimiter would need to be something that's not a valid character in a MySQL table or column name I guess.\n. I changed the test, hopefully it's ok - I haven't worked with behat before.\n. ",
    "merlinsilk": "I have this working so far, but run into a permission issue and don't know how to fix that:\nStarting with an empty directory I run the update for the first user ('cnr') which creates my cache directory and all folders under that owned by cnr:\ndrwxr-xr-x 3 cnr  cnr    4096 Feb  9 19:50 cache\nthis is only writable by user cnr, that means that other wp users later, e.g. alex can not put cached files into that directory. Is there a way to create all those files in the cache as read/write for all?. thank you @schlessera!\nI might need a bit of hand-holding on accomplishing the group/other write permission when wp-cli creates its cache files. If I set umask to all 0 when I su to a user, then all files created will be writable for all, not only the cache files. Any idea how to do this?\nThanks, Merlin. ",
    "vovodroid": "Actually the same can be applied to plugins and themes (though their versioning may be less strict).\n. My WP copy has version \"4.2.2\"\n. ",
    "dfisek": "This would be a great feature.\nA general security practice is \"not allowing the application server user to write to the application source code\". This also means breaking the auto update functionality of Wordpress itself.\nIf wp-cli had this feature, we could emulate the automatic update functionality of Wordpress by running wp core update --minor periodically from cron.\n. 3.7 is the way to go. Since we still get security updates for 3.7 installations (latest 3.7.11).\nI believe this could be a general rule, once Wordpress core drops support for a version, wp-cli can too.\n. Sorry I must have missed the previous comment.\nNo, I hadn't. But I can't reproduce the behavior now. Sorry for a non-reproducable bug report :(.\nWhat do you think about a parameter to update to the latest minor version functionality? (e.g.: wp core update --minor)\n. Thank you, I had had looked at older issues but I must have missed this one too :(.\n. Will do. Can you assign the issue to me?\n. ",
    "nicomollet": "Interested in this feature too.\n. ",
    "chrismccoy": "ya that works fine for me too, its when I pass the url param it doesnt. this is for multisite.\n. chris@golf:~/sites/domain.com$ wp comment status 8779\nunapproved\nchris@golf:~/sites/domain.com$ wp comment list --status=unapproved\n+------------+-----------------+--------------+------------------+----------------+----------------------+\n| comment_ID | comment_post_ID | comment_date | comment_approved | comment_author |     comment_author_email |\n+------------+-----------------+--------------+------------------+----------------+----------------------+\n+------------+-----------------+--------------+------------------+----------------+----------------------+\nsee above (this is a non multisite) its for comments that are pending, ones that are spam will show up.\n. tried it on another fresh install, when setting status to unapproved nothing shows same as other install, running latest wp cli and latest wordpress, wp comment list lists them though.\ni can do --comment_approved=0 though which works\n. solved the problem, the --status=unapproved was incorrect,\n--status=hold is what i needed.\neven though the value was unapproved when getting the status\n. i just did a wp package install on a list of packages, bascially\nwp package install name\nwp package install name\netc\n\n. ya those are the only two that showup, installed over 6 packages, and those are the only 2 that showup, both on ubuntu and osx\n. ive installed almost all the packages, except 2 or 3. in the list. would that one fatal cause the others from not being installed? i installed the packages in order they are listed on the packages page\n. ",
    "goodpixels": "aaah, sorry, i should have been more thorough. thanks!\n. sorry, I should've been more clear- it doesnt return any users, and it doesn't return 0. results table is always empty.\nSent from my iPhone\n\nOn 29 May 2015, at 20:07, Viktor Sz\u00e9pe notifications@github.com wrote:\nDo you mean wp-cli's return code is 0 or it does not list administrators?\nuwp user list --role=administrator\n+----+------------+--------------+------------------+---------------------+---------------+\n| ID | user_login | display_name | user_email       | user_registered     | roles         |\n+----+------------+--------------+------------------+---------------------+---------------+\n| 1  | viktor     | v            | viktor@szepe.net | 2014-07-21 18:59:33 | administrator |\n+----+------------+--------------+------------------+---------------------+---------------+\n\u2014\nReply to this email directly or view it on GitHub.\n. when  i run wp user list --role=administrator, i get nothing:\n\n+----+------------+--------------+------------+-----------------+-------+\n| ID | user_login | display_name | user_email | user_registered | roles |\n+----+------------+--------------+------------+-----------------+-------+\n+----+------------+--------------+------------+-----------------+-------+\ni've double-checked in wp-admin and i definitely have two admins:\nAll (5,766) | Administrator (2) | Editor (5) | Subscriber (2) | Partner (5,706) | Pending (50) | User Admin (6)\nin addition to the original issue, it seems that running wp user list --format=count returns an incorrect number of users!\nwp user list --format=count, gives me this:\n5759\nhere's the output of wp cli info:\nPHP binary: /Applications/MAMP/bin/php/php5.6.7/bin/php\nPHP version:    5.6.7\nphp.ini used:   /Applications/MAMP/bin/php/php5.6.7/conf/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.19.1\nplease note, that all other commonly used functions seem to work properly. i can add, edit and delete users, activate and deactivate plugins, etc.\n. hm. we're using wpfront-user-role-editor. yeah, i guess it might be the plugin, as running get_users( array('role'=>'administrator') ) in the shell mode didn't return any users either.\n. ",
    "stephenharris": "Do you mean something like wp user meta import? That could work, though from user-end perspective you are potentially importing on the same file twice - once for the user, and then again for the user meta. \nWith regards to solving the parity, this could be addressed with a meta key option to include meta data in the export (either all, or specified keys)\nI think the real blocker is the one you identified with regards to handling existing meta keys for a user...\nOne potential solution to that might be for each meta key found in the CSV, to delete all associated meta values, before adding the ones found in the CSV. In that sense the CSV is then the intended state of users after the import. (Though this I think is inconsistent with current handling of roles, which just adds roles).\n. I agree :). Looking forward to WP-API integration.\n. As I understand it wp-cli simply uses a plain-text skin for WordPress' WP_Upgrader - so I think the problem is upstream: https://github.com/WordPress/WordPress/blob/master/wp-admin/includes/class-wp-upgrader.php#L133\n. Thanks for the heads up - I seem to remember you raising that point elsewhere, but I couldn't find it. I had thought it might be easier than it probably will be as get_download_url() defaults to 'zip', but I see now that wp-cli uses .tar.gz and leverages WordPress to install updates/plugins/themes which use zip.\nDigging into Core's upgrader, it boils down to this function which either uses ZipArchive or this the PclZip class bundled in core, depending on availability.\nI'll first work on the assumption that ZipArchive is available, and supporting infrastructures without it can be considered later.\n\nWhat's the actual difference between a locale copy and a normal copy?\n\nA locale copy includes the translation files in wp-content/languages. \n. I'll follow up with some Behat tests.\nDocumentation tells me PharData supports zip files too. But it just produced garbled file contents (filenames and directory structure was intact). I haven't explored the potential of using command line tools as is currently used if available for extracting tar files.\nmd5 checksums are not available for trunk downloads so I just display a warning. You get a similar error when trying to overwrite an existing download.\nOne future change, which would be nice but isn't within the scope of this issue would be to move the logic for determining which tool to use (tar,PharData,ZipArchive etc) to a factory class which gives us back a instance of class fulfilling a common interface - so the command doesn't know (or care) what tool is being used to extract and move the download.\nThat would allow additional tools to be added easily, and would tidy the logic of extracting to a directory, and then moving the contents of the wordpress directory to the desired location out of the command class.\n. @danielbachhuber Any idea why that one test is failing? It failed for me locally too, but it appears to be false positive. I don't understand why a WordPress version already exists if I have a 'clean directory'?\nOddly, it does seem to be specifically trunk. I ran it locally using nightly and it worked.\n. Link to test: https://github.com/wp-cli/wp-cli/pull/3127/commits/9ec1d1425b9345fbe46be6c7cd17d53cf1e360db#diff-5106025468b362f7cee39e2f2349ef80R99\n. @danielbachhuber ignore the above, I see the error in test now. I misread the error output.\n. The test was running download twice (as was intended), but I thought the error was occurring for the first  command not the second. Fixed with 9eea025.\n. @danielbachhuber implemented those changes. For the extension check I had to use regular expressions as pathinfo() gives (correctly) the extension of file.tar.gz as .gz.\n. @danielbachhuber The documentation for --version is behaving weirdly for me. It's breaking before the 'latest' and 'nightly' (see https://cloudup.com/c6pMLEZScve). Are quotation marks not allowed there?\n. For those wanting to check if an blog exists with that URL I have written this rather clunky script:\n```\nGet the url from the database\ndburl=\"$(wp --url=${url} option get siteurl)\";\nCheck the database URL matches the url we gave it (strip protocol and trailing slash).\ndburl=${dburl#'https://'}\ndburl=${dburl#'http://'}\ndburl=${dburl%'/'}\ncleanurl=${url#'https://'}\ncleanurl=${cleanurl#'http://'}\ncleanurl=${cleanurl%'/'}\nif [ \"$dburl\" = \"$cleanurl\" ]; then\n    # They match\nelse\n    # They do not\nfi;\n```\n. I'm not quite sure what the logic is, but that check doesn't fail if the passed url is has the correct domain.\nE.g. multisite and example.dev and --url=example.dev/this-site-doesnt-exist. I guess this is probably because it's interpreted as page on example.dev.\n. It does, but the 'current blog' is populated as the main site and it still runs the command. \nSo wp --url=example.dev/this-site-doesnt-exist option get home returns example.dev.\nPerhaps this isn't an issue for wp-cli to solve. I had a script to be run across specific sites of a network (to change the theme) and wanted to see what would happen if there was a typo in the url, and it changed the theme of the main site.\n. That works thanks\n. Yeah, this is something I had thought of. I wasn't sure how best to approach it. With existing user & meta key you can do one of three things\n1. Add an additional value (add_user_meta)\n2. Update all existing values to this new value\n3. Update a specific meta value to this new value\nYou can distinguish between (1) and (2) by expecting add_meta_key_{meta-key} and update_meta_key_{meta-key} - though I'm not a fan. But trying to support (3) would be even messier. \n. Potentially yes. What would be the best way of handling this? We should ask for what we actually want. But what should happen if we ask for a 'tar.gz' of the nightly build - an exception?\n. > Given it's a private method, so we don't need to worry about backwards compat concerns, could we just remove the third argument and make sure the calling function handles the archive file correctly, regardless of type?\nThat would be fine for the download command - but the update command passes responsibility to WordPress' Core_Upgrader, which I believe only expects a zip. \nSo I think we should either note in the docbloc that get_download_url() always returns a zip for trunk version or call WP_CLI::error(). The second option doesn't feel necessary.\n. Are they not the same?\n. Currently there's no validation of the extension, so I kept it has default behaviour, but I guess it doesn't hurt.\n. Agreed\n. @danielbachhuber It's caught here: https://github.com/stephenharris/wp-cli/blob/9eea025df9b69eab496b6c2a5dc3207a05702f4a/php/commands/core.php#L216\nR.e. the early check, makes sense\n. What's the expected behaviour here? Currently it just ignores the locale setting as they aren't any language specific nightly builds.\n. That's a good point, missed that.\n. ",
    "tamlyn": "For the benefit of newbies like me who followed the link from https://github.com/wp-cli/server-command, please not that although the server command is now in the main repository, it is not yet included in the main wp-cli build. I spent a long time trying figure out what I was doing wrong before realising this.\n. ",
    "marcelgleis": "sorry, my fault!\nI've used on an installed wp. Therefore it automatically converts my wp to multisite. Instead I should use multisite-convert.\nThanks!\n. ",
    "jklepatch": "I am new to linux, so not very knowledgable yet.\nAll I know is that I need to do sudo + command to execute a command in this directory. I guess it means my user does not have enough permission for this directory ?\nI tried the same wp cli command in my ~/ directory, and it worked perfectly \n. ",
    "psyche699": "Hello,\nI have the same problem , but I can not seem to solve it.\nI check all permissions, but nothing to do!.\nas root , I can install it in the / home / \"user\" / folders.\nSo I think it's still a permission problem.\nbut where ?\nPlease Help me !\n. ",
    "jschank": "It gives me some clues, which is what I was looking for at this point.\nThank you.\nJohn\n\nOn Jun 11, 2015, at 7:27 PM, Daniel Bachhuber notifications@github.com wrote:\nIf I echo the return code, I can see that it is 255.\nThis is most likely a PHP fatal with error notices suppressed: http://serverfault.com/questions/153634/php-exit-status-255-what-does-it-mean http://serverfault.com/questions/153634/php-exit-status-255-what-does-it-mean\nYour plugin is likely fataling in WP-CLI context (or even generally). Does this give you enough information to debug further?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/1881#issuecomment-111305659.\n. Confirmed that this is not a problem with WP-CLI.\n\nMy situation is that xdebug was overriding php.ini settings, and hiding error messages. When I realized that and was able to see stack traces, the problem was entirely that our plugin was relying on getallheaders() which is implemented in the apache context, but not in the CLI context.\nSee this link for details.\nhttp://stackoverflow.com/questions/30769256/wordpress-wp-cli-generates-error-call-to-undefined-function-getallheaders)\nSorry for the false alarm.\n. Yep that is what I did.\nI just wanted to comment on the issue that this really was not a problem with WP-CLI,\nand I furnished a link to one possible solution, in case others have this problem.\nBut, thank you for the reply. I do appreciate it.\nYou guys were very responsive.\nJohn\n\nOn Jun 22, 2015, at 3:18 PM, Viktor Sz\u00e9pe notifications@github.com wrote:\nTry adding a condition: if ( defined( 'WP_CLI_ROOT' ) ).\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/1881#issuecomment-114225810.\n. ```\n\nwhich -a wp\n/usr/local/bin/wp\n/usr/bin/wp\n```\nSo I deduce from this that I have two versions deployed?\n. Yep, and I see that the /usr/bin/wp version is the latest. But my path is pulling /usr/local/bin in preference.\nNot even sure how the /local one got there. but I'll kill em both and reinstall.\n. Interesting note: I tried which before, but I wasn't aware of the -a flag. TIL\n. I really appreciate your reply. It is pretty frustrating.\nI am issuing the command, via cut and paste, in my project directory. Which is where my wp-cli.yml is.\nIve tried both $() syntax, and backticks, which i think will do the same thing, and i get the same results.\nIve tried just $ wp plugin path, and it does report the entire, correct, existing path.\nIt seems like cd is the problem, like it strips the space, or adds the colon.\nSent from my iPad\n\nOn Feb 15, 2016, at 7:40 AM, Daniel Bachhuber notifications@github.com wrote:\ncd $(wp plugin path) seems to work for me on Ubuntu:\nsalty-wordpress \u279c  wordpress-develop.dev  cd $(wp plugin path)\nsalty-wordpress \u279c  plugins  wp plugin path\n/srv/www/wordpress-develop.dev/src/wp-content/plugins\nI'm not sure why you're ending up with cd:/var/ when it should be cd /var/. How are you calling the command in centos6? Do other WP-CLI commands work?\n\u2014\nReply to this email directly or view it on GitHub.\n. Same results\n\n[vagrant@localhost cc-dev]$ cd \"$(wp plugin path)\"\n-bash: cd:/var/www/html/apps/cc-dev/wordpress/wp-content/plugins: No such file or directory\nIf it helps\n[vagrant@localhost cc-dev]$ wp --info\nPHP binary: /usr/bin/php\nPHP version:    5.5.32\nphp.ini used:   /etc/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:  /var/www/html/apps/cc-dev/wp-cli.yml\nWP-CLI version: 0.22.0\n\nOn Feb 15, 2016, at 9:56 AM, Daniel Bachhuber notifications@github.com wrote:\nCan you try quoting the command? cd \"$(wp plugin path)\"\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/2473#issuecomment-184238976.\n. also, other wp-cli commands do work fine.\nIn fact the entire site was set up by using wp-cli\nOn Feb 15, 2016, at 9:56 AM, Daniel Bachhuber notifications@github.com wrote:\nCan you try quoting the command? cd \"$(wp plugin path)\"\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/2473#issuecomment-184238976.\n. Hmm,\n\nThis works: cd $(echo /var/www)\nbut these do not:\n[vagrant@localhost ~]$ cd /var/www/html/apps/cc-dev/\n[vagrant@localhost cc-dev]$ cd $(echo $(wp plugin path))\n-bash: cd:/var/www/html/apps/cc-dev/wordpress/wp-content/plugins: No such file or directory\n[vagrant@localhost cc-dev]$ cd $(echo \"$(wp plugin path)\")\n-bash: cd:/var/www/html/apps/cc-dev/wordpress/wp-content/plugins: No such file or directory\nCould the wp-cli, plugin path command\u2019s output be confusing cd?\n\nOn Feb 15, 2016, at 9:56 AM, Daniel Bachhuber notifications@github.com wrote:\nCan you try quoting the command? cd \"$(wp plugin path)\"\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/2473#issuecomment-184238976.\n. Daniel now this is interesting\u2026\n\n[vagrant@localhost cc-dev]$ echo $foo\n/var/www/html/apps/cc-dev/wordpress/wp-content/plugins\n[vagrant@localhost cc-dev]$ echo \"+$foo+\"\n/var/www/html/apps/cc-dev/wordpress/wp-content/plugins+\n[vagrant@localhost cc-dev]$ echo \"$foo\"\n/var/www/html/apps/cc-dev/wordpress/wp-content/plugins\n[vagrant@localhost cc-dev]$ bar=\"fred\"\n[vagrant@localhost cc-dev]$ echo \"+$bar+\"\n+fred+\nnotice that there is no leading + when I echo $foo bracketed by + signs\nunless that coincidentally has something to do with the leading / ??\n\nOn Feb 15, 2016, at 9:56 AM, Daniel Bachhuber notifications@github.com wrote:\nCan you try quoting the command? cd \"$(wp plugin path)\"\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/2473#issuecomment-184238976.\n. OK\nI suspect the problem is the trailing \\n on the emitted line\nin \n    /\n     * Display a message in the CLI and end with a newline.\n     * Ignores --quiet flag. To respect, use WP_CLI::log()\n     \n     * @access public\n     \n     * @param string $message\n     */\n    public static function line( $message = '' ) {\n        echo $message . \"\\n\";\n    }\n\nIt may well be a bash config issue, but I don\u2019t know which setting.\nDigging further :)\n[vagrant@localhost cc-dev]$ foo=\"/var/www/html/\\n\"\n[vagrant@localhost cc-dev]$ echo foo\nfoo\n[vagrant@localhost cc-dev]$ cd $foo\n-bash: cd: /var/www/html/\\n: No such file or directory\n[vagrant@localhost cc-dev]$ foo=\"/var/www/html\"\n[vagrant@localhost cc-dev]$ cd $foo\n[vagrant@localhost html]$\n\nOn Feb 15, 2016, at 10:41 AM, Daniel Bachhuber notifications@github.com wrote:\nCould the wp-cli, plugin path command\u2019s output be confusing cd?\nIt's more likely a bash configuration issue.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/2473#issuecomment-184258448.\n. no, I think trailing newlines are stripped, and they definitely are if I use echo.\n. [vagrant@localhost ~]$ echo $IFS\n\nLooks like it is a blank line\n\nOn Feb 15, 2016, at 12:35 PM, Wojciech Smoli\u0144ski notifications@github.com wrote:\n@jschank https://github.com/jschank Show results of\necho $IFS\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/2473#issuecomment-184318975.\n. [vagrant@localhost ~]$ echo \"+$IFS+\"\n+\n+\nOn Feb 15, 2016, at 12:35 PM, Wojciech Smoli\u0144ski notifications@github.com wrote:\n@jschank https://github.com/jschank Show results of\necho $IFS\n\u2014\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/issues/2473#issuecomment-184318975.\n. I will follow up on these suggestions. I appreciate them. But I wanted to mention...\nI'm using vagrant, so centos is running in a vm. I don't expect this to make much difference. BUT I can say that I had a vagrant vm from a couple weeks ago and $ cd $(wp plugin path --dir) \nworked fine in the older vm, but after I destroyed it and recreated it, I got the results I mention here.\n\nSo... Something changed in the last week or two, to break this. I don't know if it is wp-cli, wordpress, or the vagrant guest tools.\nI can say that my vagrant set up uses the latest available wordpress and wp-cli. \nthat is:\nwordpress 4.4.2\nand\n[vagrant@localhost cc-dev]$ wp --info\nPHP binary: /usr/bin/php\nPHP version:    5.5.32\nphp.ini used:   /etc/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:  /var/www/html/apps/cc-dev/wp-cli.yml\nWP-CLI version: 0.22.0\n. @szepeviktor\n[vagrant@localhost cc-dev]$ wp plugin path|hexdump -C\n00000000  08 2f 76 61 72 2f 77 77  77 2f 68 74 6d 6c 2f 61  |./var/www/html/a|\n00000010  70 70 73 2f 63 63 2d 64  65 76 2f 77 6f 72 64 70  |pps/cc-dev/wordp|\n00000020  72 65 73 73 2f 77 70 2d  63 6f 6e 74 65 6e 74 2f  |ress/wp-content/|\n00000030  70 6c 75 67 69 6e 73 0a                           |plugins.|\n00000038\n. @danielbachuber - agreed. I'm trying to figure out what it might be.\n. OK, so I deactivated all of my plugins and now the cd command works. So this is an incompatibility with one of the plugins (likely the one my company develops)\nI can narrow it down from here.\nI do appreciate the suggestions from the community here.\nEspecially the one from @szepeviktor, because I was looking for a way to do what was suggested.\nThank you all.\nI'll close the thread\n. FYI, when the command works the hexdump looks like this...\n[vagrant@localhost plugins]$ wp plugin path|hexdump -C\n00000000  2f 76 61 72 2f 77 77 77  2f 68 74 6d 6c 2f 61 70  |/var/www/html/ap|\n00000010  70 73 2f 63 63 2d 64 65  76 2f 77 6f 72 64 70 72  |ps/cc-dev/wordpr|\n00000020  65 73 73 2f 77 70 2d 63  6f 6e 74 65 6e 74 2f 70  |ess/wp-content/p|\n00000030  6c 75 67 69 6e 73 0a                              |lugins.|\n00000037\nThe difference is the leading 0x08, when my plugins are active.\n. @szepviktor, yep, I agree. Now I have to figure out how to grep/ack/search for that. But that's why the internet was invented... So I can Google stuff.\n:)\n. Totally found it and fixed the problem.\nUsed ack to find the culprit\n[vagrant@localhost ~]$ ack '[\\b]'\n. $Plugin can't be empty, because the script echos the value, and there is no output to indicate an empty value is being used. I'll try some test cases now that i know where the problem is. Perhaps a clue will appear. I can say this is relatively new behavior. Perhaps last week or two.\nSent from my iPad\n\nOn Apr 29, 2016, at 7:54 PM, Kailey Lampert notifications@github.com wrote:\nAny chance the $plugin variable is sometimes empty? Alternatively, what happens when you unquote $plugin in the install line?\nWhen I run wp plugin install \"\" (need the quoted empty string), I end up installing the first result of \nwp plugin search \"\" which not long ago had super-emoji-plus.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\n. Ah! That is definitely likely \n\nSent from my iPad\n\nOn Apr 29, 2016, at 10:24 PM, Kailey Lampert notifications@github.com wrote:\n@jschank I should have made my comment edit a reply so you'd get the email notification...\nEdit: Looks like $force may not be set? in which case you'd be passing an empty quoted string to the install command resulting in what I describe above.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\n. Confirmed. If you run wp plugin install \"\" --allow-root \"\"\nThen you get two plugins installed. The one you want, and a super-bonus random plugin you never asked for.\n\nI have patched my script to no longer pass an empty string. But regardless of that. I believe that wp-cli has incorrect behavior. It should not install some random, unknown plugin, regardless of how it gets called.\nThanks to @trepmal, for noticing the empty string.\n. ",
    "harry-m": "Yes - I have worked around this by supplying --url to specify a given blog and then merging all of the results into one json object, where any active status overrides an inactive one. But it's pretty hacky.\nI can see the logic in having a command to retrieve a list of plugins for a specific site, which is what it's doing now. But from a site management perspective, I only really care if a plugin is in use on any site - the specific site it's on is less relevant.\n. Exactly that.\nI couldn't see a way to do it other than looping through all sites, as the list is in each site's wp_options table.\nI think \"Inactive\" does just mean it's not active on the site you're querying - I don't think there's any special logic there. The confusing thing is that when you run this on a multisite install it defaults to the network site without telling you.\n. ",
    "StephanMeijer": "I will do that.\nYou will receive the output tomorrow, or the day after tomorrow :).\n. ",
    "aeyoll": "Ok, it seems that the tar.gz file is corrupted in http://fr.wordpress.org/, but not the zip file, so it's not a wp-cli issue, sorry for that! However, maybe it's possible to add an error message when the md5sum of the tar.gz file is not valid?\n. You can get the md5 by appending .md5 to any wordpress.org tar.gz link (eg. https://wordpress.org/wordpress-4.2.2.tar.gz.md5 or http://fr.wordpress.org/wordpress-4.2.2-fr_FR.tar.gz.md5).\n\nAnd, what if the md5 represents the corrupted file?\n\nWell, that's the problem, sadly it happens to be the case for the 4.2.2.fr_FR release, making the sum unusable\u2026 Anyway, md5sum could be a good idea in a larger scale, to check if the file has been correctly transfered.\nAlso, maybe the UnexpectedValueException could be catched to display an error message.\n. ",
    "JRGould": "``` bash\n$ wp --path='' db export db.sql\nError: '--path=' is not a registered wp command. See 'wp help'.\n$ wp --path='.' db export db.sql\nSuccess: Exported to db.sql\n```\nJust using wp db as an example, this is an issue with how arguments are parsed.\nIf this is confirmed as a bug I'm happy to submit a PR with a fix.\n. There were no tests for the Configurator class so I added a new file for that and included a few tests for the extract_assoc method.\n. It looks like the issue here is that the string /nas/content/live/sobeys/wp-content/uploads/sites/5 is a key in an associative array and the SearchReplacer only operates on the values of unserialized data - it makes no attempts to run search/replace operations on array keys.\n. I can't really think of anything...  WP-CLI already uses date_default_timezone_set in wp-settings-cli.php to override the system's default to UTC, so if anything it might make more sense to just move that into the bootstrap file and remove this instance. \nI actually had to unset the timezone in my php.ini to get this error, so it only happens in the case that you don't already have a timezone set. Using @date_default_timezone_get() will just set the TZ to UTC if it's null, but will preserve the ini setting if it's there.\nAdditionally, this is the call that's generating the error and it seems to be the one of the few (maybe only) instances in Composer where TZ isn't passed to the DateTime constructor, so I'm not sure if it's an oversight or what.\n. Could probably add a flag to \\WP_CLI\\REPL and strip out the newline just the first time the prompt is printed. Not sure about Psy or Boris though. Happy to open another issue/PR for that if you think it's worth the tinker?\n. ",
    "warb2n": "sry for my noobish i am new in this theme\u2026\nWhat i do\n\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nthen i do mkdir /usr/local/bin/wp , cuz i don't have wp folder\nsudo mv wp-cli.phar /usr/local/bin/wp\nwp --info and i get wp: command not found\n\necho $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n\nUpdate\ni do export PATH=$PATH:/usr/local/bin/wp\necho $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/bin/wp\n\nbut still now working =(\n. @szepeviktor Why close?\nstill not working =@\n@danielbachhuber   Yes is a directory.\n\necho $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n. @danielbachhuber Thx for U help man, all work now. \nI am new in terminal, and  i was confused\u2026\n. \n",
    "novazembla": "Thanks! But as I ended up from a working 4.1.1. version to a half-complete 4.2.2 something must tripped the upgrade progress. Could it be that the cached version applied was for whichever reason the wrong one. I wonder why there is a .zip and a .tar.gz file in my cache? Both of which have been downloaded by wp-cli Comparing the file sizes I would wager that my wp core udpate used the .zip.\n. Hi, \nI've cloned the folder and reverted my commits to the repository. So I started with the same codebase version 4.1.1 then I did the same as yesterday however used wp core verify-checksums\nHere is the log:\nNovazembla:xxx novazembla$ wp core version\n4.1.1\nNovazembla:xxx novazembla$ wp core verify-checksums\nSuccess: WordPress install verifies against checksums.\nNovazembla:xxx novazembla$ wp core update \nUpdating to version 4.2.2 (en_US)...\nUsing cached file '/Users/novazembla/.wp-cli/cache/core/en_US-4.2.2.zip'...\nUnpacking the update...\nSuccess: WordPress updated successfully.\nNovazembla:xxx novazembla$ wp core verify-checksums\nWarning: File doesn't verify against checksum: wp-settings.php\nWarning: File doesn't verify against checksum: wp-cron.php\nWarning: File doesn't verify against checksum: wp-comments-post.php\nWarning: File doesn't verify against checksum: wp-admin/link-parse-opml.php\nWarning: File doesn't verify against checksum: wp-admin/js/editor.js\nWarning: File doesn't verify against checksum: wp-admin/js/user-profile.min.js\nWarning: File doesn't exist: wp-admin/js/tags-box.js\n...\nAs you can see it used the .zip file. Leading to an incomplete upgrade. \nMany thanks guys!\n. ",
    "Ciantic": "No you can't solve wp-content/* directories with it, but I can at least skip versioning the WP core files and directories.\nadd and if I use versioning for WP core files, why would I use verify-checksums in the first place?\n. ",
    "Vinsanity": "Thanks Daniel. Here is what I got on var_dump for the $fullsizepath. It appears that it is not prefixing the full path to the file. Should be \"/srv/www/sitename/htdocs/content/uploads/\" and then what you see below.\nFound 7 images to regenerate.\nstring(21) \"2015/06/TopImage3.jpg\"\nWarning: Can't find \"TopImage3\" (ID 68).\nstring(21) \"2015/06/TopImage4.jpg\"\nWarning: Can't find \"TopImage4\" (ID 69).\nstring(22) \"2015/06/TopImage_1.jpg\"\nWarning: Can't find \"TopImage_1\" (ID 66).\nstring(21) \"2015/06/TopImage2.jpg\"\nWarning: Can't find \"TopImage2\" (ID 67).\nstring(24) \"2015/06/test-product.jpg\"\nWarning: Can't find \"test-product\" (ID 65).\nSuccess: Finished regenerating all images.\nI'll try some additional debugging on my end and let you know what i find.\n. @szepeviktor Thanks for the help.\nI did try this and it does fix the issue of having to specify the --path flag but I still get the \"Can't Find\" message. The full file path string is not being appended/concatenated.\n. Funny you should mention that. I was just testing that and noticed that It was reporting the directory without the full path. I tried changing the WP constant I have defined for WP_CONTENT_DIR from $_SERVER['DOCUMENT ROOT'] to dirname(_FILE_) and it works now. \nIt appears that vagrant returns the $_SERVER['DOCUMENT ROOT'] differently. \nThanks for the help guys. Sorry for the false lead.\n. No, the underscore is there. Markdown cutout my _ in my response (I had the wrong markdown syntax in there). Thanks again though. :)\n. ",
    "AminMkh": "Thanks a lot mate for the update, I did try wp rewrite flush nothing happened, but no problem I do write the content of .htaccess manually.\nThanks again, feel free to close this issue.\n. ",
    "mrwweb": "A big ol' +1 for this. A couple quick additions:\n1. I like the wp plugin changelog <plugin-name> syntax proposed.\n2. I could also see this built in to wp plugin search instead of\u2014or in addition to\u2014that first option via wp plugin search <search> --field=changelog\n3. Being able to pick out a specific version's changes with wp plugin changelog <slug> [--version=<version>] would be super-extra awesome but, I suspect, unfeasible.\n. Unless the website is behind the repo, this is still an issue. I just came here to report the same thing.. ",
    "jonathan-dejong": "So I know this is a closed issue but I'm on v 0.18 and attempts to update with no luck. \nRunning sudo wp cli update --allow-root results in:\nPHP Warning:  max(): Array must contain at least one element in phar:///usr/local/bin/wp/php/WP_CLI/Loggers/Regular.php on line 87\nError: The downloaded PHAR is broken, try running wp cli self-update again.\nHow should I go about updating so this issue is rid off? The owner is www-data which I don't have access to :/\n. Thanks @danielbachhuber  \nIt worked. I saw the docs before but failed to notice the little note \"Upgrade using the same procedure.\" at the end. \n. Thanks for the info Daniel!\nI've actually looked into Composer now and it seems a good way to go.. now to get it working with my private repos instead! ;) \n. ",
    "mondalaci": "I could already see that wp_cache_post_change() is defined in wp-super-cache/wp-cache-phase2.php.\nYes, the super cache plugin is active.\n. Could you please elaborate on that? I need to use the super cache cli plugin quite badly.\n. Thanks a ton for being so helpful and quick, guys! In the meantime, I've fixed the fix at https://github.com/wp-cli/wp-super-cache-cli/pull/6 :)\n. Sure, I'll do it soon. In the meantime could you please merge https://github.com/wp-cli/wp-super-cache-cli/pull/6 ?\n. @danielbachhuber Please give me some guideance regarding why the remaining test breaks. I don't have a clue based on the error output.\n. @danielbachhuber Bump.\n. ",
    "joelataylor": "Right - but I would've thought that setting php vars in the wp-cli.yml file would be available in wp-config.php - just like they are if you require an external php file.\nSetting the variables in the vhost doesn't help because wp-cli doesn't use apache.\n. @szepeviktor - the work around isn't a concern to me, there are a ton - most simply to just hard-code the value in wp-config.php. My point in this Git Issue - is that I would've expected the behaviour to act as if the php code in the yml file was run prior to wp-config being called.\nMaybe someone else can confirm that my assumption is incorrect.\n. @danielbachhuber - can you tell me if I should expect the yml settings for custom php code, to translate into available vars in wp-config.php?\n. @danielbachhuber Oh - I thought it WAS a runtime configuration. Are you saying that all the wp-cli.yml settings are using for the building of the wp-config.php? If so, I totally misunderstood it's usage.\nAlso, if that is also true, IS there a run-time configuration that could be used?\n(And @szepeviktor I'm sorry that I misunderstood your explanation above)\n. Ok - then my situation is still valid. If the wp-cli.yml file is run on each wp command, then it should run the core config: extra-php code and make those variables available in the wp-config.php. Like it does when you specify a require option in the yml file.\nUnless, the extra-php is scoped?\nTo be clear, I'm looking to set global variables in the wp-cli.yml file for run-time usage in the wp-config.php.\n. Ok, then can I suggest updating the documentation. The wp-cli.yml example shows a define( 'WP_DEBUG', true ); which I interpreted to overriding a setting in wp-config.php - but it's ONLY used for when the wp-config file is generated.\nThx.\n. ",
    "primozcigler": "$ php -v\nPHP 5.6.8-1+deb.sury.org~trusty+4 (cli) (built: May 14 2015 09:13:06) \nCopyright (c) 1997-2015 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2015 Zend Technologies\n    with Zend OPcache v7.0.4-dev, Copyright (c) 1999-2015, by Zend Technologies\n. Here is my wp-config.php:\n``` php\n<?php\ndefine('WP_CACHE', true); // Added by WP Rocket\n/\n * The base configurations of the WordPress.\n \n * This file has the following configurations: MySQL settings, Table Prefix,\n * Secret Keys, WordPress Language, and ABSPATH. You can find more information\n * by visiting {@link http://codex.wordpress.org/Editing_wp-config.php Editing\n * wp-config.php} Codex page. You can get the MySQL settings from your web host.\n \n * This file is used by the wp-config.php creation script during the\n * installation. You don't have to use the web site, you can just copy this file\n * to \"wp-config.php\" and fill in the values.\n \n * @package WordPress\n /\n//  MySQL settings - You can get this info from your web host  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', 'aaa');\n/* MySQL database username /\ndefine('DB_USER', 'aaa');\n/* MySQL database password /\ndefine('DB_PASSWORD', 'aaa');\n/* MySQL hostname /\ndefine('DB_HOST', 'localhost');\n/* Database Charset to use in creating database tables. /\ndefine('DB_CHARSET', 'utf8');\n/* The Database Collate type. Don't change this if in doubt. /\ndefine('DB_COLLATE', '');\n/#@+\n * Authentication Unique Keys and Salts.\n \n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n \n * @since 2.6.0\n */\n/*#@-/\n/\n * WordPress Database Table prefix.\n \n * You can have multiple installations in one database if you give each a unique\n * prefix. Only numbers, letters, and underscores please!\n /\n$table_prefix  = 'wp_';\n/\n * WordPress Localized Language, defaults to English.\n \n * Change this to localize WordPress. A corresponding MO file for the chosen\n * language must be installed to wp-content/languages. For example, install\n * de_DE.mo to wp-content/languages and set WPLANG to 'de_DE' to enable German\n * language support.\n /\ndefine('WPLANG', '');\n/\n * For developers: WordPress debugging mode.\n \n * Change this to true to enable the display of notices during development.\n * It is strongly recommended that plugin and theme developers use WP_DEBUG\n * in their development environments.\n /\ndefine('WP_DEBUG', false);\ndefine('EMPTY_TRASH_DAYS', 0);\n/ Multisite /\ndefine( 'WP_ALLOW_MULTISITE', true );\ndefine('MULTISITE', true);\ndefine('SUBDOMAIN_INSTALL', false);\ndefine('DOMAIN_CURRENT_SITE', 'demo.proteusthemes.com');\ndefine('PATH_CURRENT_SITE', '/');\ndefine('SITE_ID_CURRENT_SITE', 1);\ndefine('BLOG_ID_CURRENT_SITE', 1);\n/ everything else /\ndefine('FS_METHOD', 'direct');\ndefine('EMPTY_TRASH_DAYS', 1);\ndefine( 'AUTOSAVE_INTERVAL', 600 );\ndefine( 'WP_POST_REVISIONS', 2 );\ndefine('SITEORIGIN_PANELS_DEV', true);\nNavXT plugin - breadcrumbs\ndefine( 'BCN_SETTINGS_USE_LOCAL', true );\nthis is HTTPS!!!!\n$_SERVER['HTTPS'] = 'on';\n/ That's all, stop editing! Happy blogging. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/* Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n. OMG, what a shame. Sorry for this, bro :disappointed: \n. ",
    "Thirty8Digital": "Well, I only got as far as this:\n$output = shell_exec('wp core download 2>&1');\necho \" \";\nForgive any obvious noob errors - I'm more a hacker than a proper dev :-)\nI get this error:\n/usr/bin/wp: line 1: /Applications/MAMP/bin/php/php5.3.14/bin/php: No such file or directory\nIf I run my shell script in the same location, it works fine..\n. Um, no. But there are more recent versions of PHP in there. Unclear how/where the php version is specified....\n\n. So this:\n$output = shell_exec('which php');\necho \" \";\noutputs just \n/usr/bin/php\n. That gives\n-rwxr-xr-x  1 root  wheel  9970848 May 19 18:12 /usr/bin/php\n. Thanks @danielbachhuber - I'll keep fiddling. It's good to know it's basically possible.\n@szepeviktor - thanks for help, but want to use WPCLI rather than other methods :-)\n. ",
    "mlutfy": "I have done similar testing for the Aegir project (aegirproject.org, a Free Software farm hosting for Drupal, but I want to add WordPress support). Aegir itself is a Drupal instance that installs other Drupal instances (using drush sub-modules). It probably sounds a bit wacky, but it's basically a set of PHP scripts that happen to run within Drupal (for user/access management, admin dashboard, etc).\nSo far, I have been using this:\nhttps://github.com/mlutfy/hosting_wordpress/blob/7.x-3.x/hosting_wpplatform/drush/install.wordpress.provision.inc#L83\n$GLOBALS['argv'] = array(\n    'wp',\n    '--path=' . d()->root . '/',\n    'core',\n    'install',\n    '--url=' . d()->uri,\n    '--title=' . d()->uri,\n    '--admin_user=admin',\n    '--admin_email=' . $admin_email,\n    '--admin_password=FIXME',\n  );\n  define('WP_CLI_ROOT', '/var/aegir/.composer/vendor/wp-cli/wp-cli');\n  require_once WP_CLI_ROOT . '/php/wp-cli.php';\nThe main motivations for using wp-cli this way:\n- we could generate a password and not pass it on the command line (where it could be seen by other users in the process list)\n- to have more clear logging of warnings/errors (ideally using a custom logging class).\nI would much prefer to use WP_CLI::run_command(), but I could not figure the details on how to pass the parameters.\n~~On the other hand, maybe it's not worth it. I heard that WP 4.3 will have support to automatically create a strong password. There would then be the logging issue, but between the output and the error code, it could be sufficient for my needs.~~\nUpdate: actually, using PHP is really the ideal way for me, since for Aegir we use a form of multi-site, where the wp-config.php has db variables inherited from the Apache vhost ($_SERVER['dbname']). So I can't do an exec.\n. ",
    "truongluu": "thanks mwithheld. works for me. ",
    "pixelprogrammer": "@mwithheld you ingenious son of a gun. That worked! How did you come up with that solution and could you explain it a little as to why it would work?. interesting, because what was failing for me wasn't using \nexec('wp --info')\nbut doing something like \nexec('wp core install --url=\"example.com\" --path=\"/path/to/wordpress\"....)\nWhenever I used core install it would work on the command line but would fail when run through the exec() function in php. Adding the $output and $return parameters to the exec() function returned no output but returned 1 (which means error). So something was failing anytime I ran commands that needed to interact with Wordpress but not anything simple like wp --info.\nAnyways, your solution worked so thank you.. @lordspace No I hadn't tried that one.. ",
    "benfavre": "Nice to see people are open to ideas and discussion on what is one of the biggest open source projects powering the web.. ",
    "senadir": "well is it solved? I'm still getting the error even when using the docs example\nwp eval 'echo WP_CONTENT_DIR;'\nError: Too many positional arguments: WP_CONTENT_DIR;'. ",
    "tarikhamilton": "I feel like the solution posted wasn't clear enough if you got here from Google, so to help anyone else who may come across this issue, let me explain:\nThis issue in particular I believe was a WP-CLI bug, which was fixed, but you can still get this error on your own through user error. I was getting it when doing this:\nWrong: wp eval 'wp_set_object_terms('${POST_ID}', '${TERM}', \"service_category\");'\nCorrect: wp eval \"wp_set_object_terms('${POST_ID}', '${TERM}', 'service_category');\"\nIn single quotes (wp eval \"these guys\"), ${VAR}s are evaluated differently. It'll split things up by spaces, giving that error. Hope this is accurate and hope this helps.. ",
    "Kwapi": "I'm still getting this error on PHP 7.2 and WP-CLI 2.0.1\nboth \nwp menu create 'Main Menu' and wp menu create \"Main Menu\" fail with the same error:\nError: Too many positional arguments: Menu\nIt works if I just stick to one word. ",
    "Kluny": "Same error with create term - \n$ wp term create category --name=\"Business Examiner - Victoria, BC\" --porcelain --debug\nError: Too many positional arguments: - Victoria, BC\n. ",
    "shivapoudel": "If the file path will be require_once( 'C:\\Users\\Shiva Poudel\\AppData\\Local\\Temp\\wordpress-tests-lib/includes/functions.php' ); then there exists no problem\n. Fix with Environment Variables. In Windows OS we have to set:\n- WP_TESTS_DIR = ./tmp/wordpress-tests-lib\n- WP_CORE_DIR  = ./tmp/wordpress/\n./your-folder is added because Windows listen to real temporary directory intead of current directory =/\n. If we hook any functionality on switch_theme action hook then that should definitely execute while switching theme only. It work while we surf admin themes page and switch theme. But my point is if we activate the theme via wp theme activate next-theme, none of the functionality from switch_theme action hook is triggered =/\nIMO WP-CLI should trigger switch_theme hook changes when theme is switched or activated :)\n. ",
    "the-infinity": "... ah. After some tests: it's this way when multisite is active.\n. Active plugins on global level on both installations ist wordpress mu domain mapping and w3 total cache. Both installations have running productive sites, so it's difficult to test it by switching these plugins off.\n. ",
    "irontoby": "Thanks for looking into it! So it looks like this functionality would only be for update --all and not updating individual items (e.g. wp-cli plugin update akismet)?\n. Well that's exactly what I needed then, thanks!! At that point I could even write a script to parse the result & automatically commit changes on success (I prefer having each theme/plugin install/update as a separate commit in case I need to rollback later...)\n. ",
    "Aninstance": "Sure, output is: \n+ install_wp\n+ '[' -d /tmp/wordpress/ ']'\n+ return\n+ install_test_suite\n++ uname -s\n+ [[ Linux == \\D\\a\\r\\w\\i\\n ]]\n+ local ioption=-i\n+ '[' '!' -d /tmp/wordpress-tests-lib ']'\n+ cd /tmp/wordpress-tests-lib\n+ '[' '!' -f wp-tests-config.php ']'\n+ install_db\n+ PARTS=(${DB_HOST//\\:/ })\n+ local PARTS\n+ local DB_HOSTNAME=localhost\n+ local DB_SOCK_OR_PORT=\n+ local EXTRA=\n+ '[' -z localhost ']'\n++ echo\n++ grep -e '^[0-9]\\{1,\\}$'\n+ '[' ']'\n+ '[' -z ']'\n+ '[' -z localhost ']'\n+ EXTRA=' --host=localhost --protocol=tcp'\n+ mysqladmin create wordpress_test --user=root '--password=my_password' --host=localhost  --protocol=tcp\n. After another retry, it's now working fine. \nI have absolutely no idea why this occurred; I've gone back and attempted to replicate the error by changing various installation conditions but now can't seem to get it to fail!\nI did refactor my plugin code between initial failures and the successful install, changing a few plugin filenames and so forth, so I'm thinking perhaps some problem traversing my plugin may have caused some kind of error cascade when installing the test, that led to the download command for the wordpress-tests-lib not to be triggered...\nIn any case, it's working well now, that's the main thing. If I can replicate the issue in future I'll report back - maybe submit a pull request if I can figure out exactly what was causing the problem.\nThanks for the suggestions and for all your work on this plugin - very much appreciated.\n. ",
    "sjalgeo": "@danielbachhuber I have to repeat the fix \nrm -rf /tmp/wordpress-tests-lib; bash bin/install-wp-tests.sh wordpress_test root '' localhost latest \neverytime I reboot.\nIs it something to do with it being a temp file? Any input appreciated\n. ",
    "rochapablo": "I'm getting the same error and at #support there is nothing about it.\nThe database it's been created, but none tmp folder.\nHere's the output:\n$ rm -rf /tmp/wordpress-tests-lib; bash bin/install-wp-tests.sh wordpress-server-tests root '' localhost latest\n+ install_wp\n+ '[' -d /tmp/wordpress/ ']'\n+ return\n+ install_test_suite\n++ uname -s\n+ [[ MINGW32_NT-10.0-WOW == \\D\\a\\r\\w\\i\\n ]]\n+ local ioption=-i\n+ '[' '!' -d /tmp/wordpress-tests-lib ']'\n+ mkdir -p /tmp/wordpress-tests-lib\n+ svn co --quiet https://develop.svn.wordpress.org/tags/4.7.2/tests/phpunit/includes/ /tmp/wordpress-tests-lib/includes\n+ svn co --quiet https://develop.svn.wordpress.org/tags/4.7.2/tests/phpunit/data/ /tmp/wordpress-tests-lib/data\n+ '[' '!' -f wp-tests-config.php ']'\n+ download https://develop.svn.wordpress.org/tags/4.7.2/wp-tests-config-sample.php /tmp/wordpress-tests-lib/wp-tests-config.php\n++ which curl\n+ '[' /mingw32/bin/curl ']'\n+ curl -s https://develop.svn.wordpress.org/tags/4.7.2/wp-tests-config-sample.php\n++ echo /tmp/wordpress/\n++ sed 's:/\\+$::'\n+ WP_CORE_DIR=/tmp/wordpress\n+ sed -i 's:dirname( __FILE__ ) . '\\''/src/'\\'':'\\''/tmp/wordpress/'\\'':' /tmp/wordpress-tests-lib/wp-tests-config.php\n+ sed -i s/youremptytestdbnamehere/wordpress-server-tests/ /tmp/wordpress-tests-lib/wp-tests-config.php\n+ sed -i s/yourusernamehere/root/ /tmp/wordpress-tests-lib/wp-tests-config.php\n+ sed -i s/yourpasswordhere// /tmp/wordpress-tests-lib/wp-tests-config.php\n+ sed -i 's|localhost|localhost|' /tmp/wordpress-tests-lib/wp-tests-config.php\n+ install_db\n+ '[' false = true ']'\n+ PARTS=(${DB_HOST//\\:/ })\n+ local PARTS\n+ local DB_HOSTNAME=localhost\n+ local DB_SOCK_OR_PORT=\n+ local EXTRA=\n+ '[' -z localhost ']'\n++ echo\n++ grep -e '^[0-9]\\{1,\\}$'\n+ '[' ']'\n+ '[' -z ']'\n+ '[' -z localhost ']'\n+ EXTRA=' --host=localhost --protocol=tcp'\n+ mysqladmin create wordpress-server-tests --user=root --password= --host=localhost --protocol=tcp\nmysqladmin: [Warning] Using a password on the command line interface can be insecure.\nAnother question is\n+ sed -i s/youremptytestdbnamehere/wordpress-server-tests/ /tmp/wordpress-tests-lib/wp-tests-config.php\n+ sed -i s/yourusernamehere/root/ /tmp/wordpress-tests-lib/wp-tests-config.php\n+ sed -i s/yourpasswordhere// /tmp/wordpress-tests-lib/wp-tests-config.php\nShould I change those values (youremptytestdbnamehere, yourusernamehere, yourpasswordhere)?\nIf YES, what should I put in the password since it's empty, which take me to others errors.. ",
    "kadimi": "Before re-running the shell script, I would recomment deleting all WordPress file in /tmp, not only /tmp/wordpress-tests-lib/includes, so:\n```shell\nrm -fr /tmp/wordpress* &&  bash bin/install-wp-tests.sh \"wp.dev\" db_user db_pass db_host latest. ",
    "mylonasg88": "Removing everything from /tmp/ folder regarding wordpress did the job! Thanks @kadimi \n$ sudo bash bin/install-wp-tests.sh wp_test_db vagrant vagrant localhost latest\nAfter that I had error regarding svn command not being installed.\nsudo apt-get install subversion to install it. \nNow I'm getting PHPUnit_Util_Test errors but that's an other story \ud83d\ude04 . ",
    "priscillamc": "Having two different --url parameters seems confusing. I'd prefer using a different name. \n. Any recommendations on a way to look up a certain site's id? wp db query?\n. ",
    "muddylogic": "Would it be possible, rather than requiring positional arguments to change the filter parameters to be prefixed by filter? Something like --filter-url and --filter-path? Adding this, rather than changing existing parameters would allow for deprecation of the other filters while adding immediate functionality.\n. ",
    "johnnywinter": "Output:\nSuccess: Updated post 10294.\nBut nothing happened the post category not change.\n. wp_insert parameters:\n'post_category'  => [ array(, ...) ] // Default empty.\nI think that I must add an array. How can I do this?\n. ",
    "poorgeek": "Why yes, yes it does. I had totally overlooked the ID option to --format. :(\nMaybe it makes sense to have an exists subcommand as an alias to wp * list --field=ID. If not, maybe this issue will help someone else trying to do the same thing we are.\n. @danielbachhuber Sorry, but I spoke too soon. I went to try this out and no matter what field/value combination I enter, the list subcommand always returns the full list. \nGiven the above example, --post_name=sock returns the same result as --post_name=hello-world.\n. Ah that got it. Little confusing with the switch to WP_Query syntax there, but it works so I'm good.\n. ",
    "chrisbloom7": "I was having the same issue. According to the post list docs:\n```\n[--=]\n    One or more args to pass to WP_Query.\n...\nAVAILABLE FIELDS\n...\n\n\npost_name\n```\n\n\nThat would seem to indicate that I could search on post_name, especially since the examples on that page follow the same format. Updating the docs with this would be helpful.\n. Same issue on a single site install. The rewrite command does not generate a .htaccess file. I also tried using touch to create an empty one first, but rewrite still doesn't update it. Using --debug on the command doesn't show anything irregular.\n$ wp cli info\nPHP binary: /usr/bin/php5\nPHP version:    5.5.29-1+deb.sury.org~precise+3\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   /home/vagrant/.wp-cli/config.yml\nWP-CLI project config:  \nWP-CLI version: 0.20.1\n$ cat /home/vagrant/.wp-cli/config.yml\ncolor: true\npath: /var/www/html\napache_modules:\n  - mod_rewrite\n$ cat /var/www/html/.htaccess \n$ ls -l /var/www/html/.htaccess \n-rwxr-xr-x 1 vagrant vagrant 0 Sep 24 14:36 /var/www/html/.htaccess\n$ wp rewrite structure \"/%year%/%monthnum%/%postname%\" --hard --tag-base=tags --category-base=topics --debug\nSuccess: Rewrite structure set.\n$ cat /var/www/html/.htaccess \n$ ls -l /var/www/html/.htaccess \n-rwxr-xr-x 1 vagrant vagrant 0 Sep 24 14:36 /var/www/html/.htaccess\nThis is on a fresh install of WP using wp core download --locale=en_US\n. Just noticed that this seems to work:\nwp rewrite structure \"/%year%/%monthnum%/%postname%\" --hard --tag-base=tags --category-base=topics\nwp rewrite flush --hard\nSo the extra flush --hard is necessary. Shouldn't structure --hard do that on its own though?\n. ",
    "pczupil": "actual command: wp plugin update wp-checkout --version=1.8.9\nwp does show that that plugin update is not available\n. ",
    "elimc": "@danielbachhuber I just tried my script with an incorrect config.yml and was somehow able to generate a functional site with an .htaccess file. I don't know how this was able to occur.\nI have quite a script setup. You can check it out here if you want to mess with it: https://github.com/elimc/jumpstart-install-script\nEdit: Disregard previous. I had forgot to modify the global config.yml. When I ran my script, I was still able to generate the .htaccess file, and I even received a nice warning message.\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\nSuccess: Rewrite structure set.\nWarning: Regenerating a .htaccess file requires special configuration. See usage docs.\nThanks for the hard work @danielbachhuber \n. ",
    "gavelino": "Hi Daniel,\nThank you for your answer. \n. ",
    "drywall": "Thanks! What version of wp-cli supports this?\n. ",
    "mortona42": "Thanks for a fast response!  Here's what I'm seeing:\n[vagrant@localhost wp-cfm]$ wp scaffold package-tests .\nError: Invalid package directory. composer.json file must be present.\n[vagrant@localhost wp-cfm]$ wp scaffold package-tests /vagrant/public/wp-content/plugins/wp-cfm/\nError: Invalid package directory. composer.json file must be present.\n[vagrant@localhost wp-cfm]$ pwd\n/vagrant/public/wp-content/plugins/wp-cfm\n[vagrant@localhost wp-cfm]$\n. I created a composer.json file containing:\n\"autoload\": {\n    \"files\": [ \"includes/class-wp-cli.php\" ]\n}\nNow the scaffold command works.  Then I installed behat using composer (added it the composer.json file).  Now the default test is working.\nHere's where I'm stuck, after switching the default command to one in this plugin [wp config bundles]:\n[vagrant@localhost wp-cfm]$ ./vendor/behat/behat/bin/behat\nPHP Fatal error:  Class 'WP_CLI_Command' not found in /vagrant/public/wp-content/plugins/wp-cfm/includes/class-wp-cli.php on line 7\n. ",
    "jarednova": "@danielbachhuber I'm having the same issue as @mortona42. I tried adding the file to my autoload as he suggested with...\njson\n  \"autoload\": {\n    \"files\": [ \"vendor/wp-cli/wp-cli/php/class-wp-cli.php\" ]\n  },\nBut when running tests I get:\n``` sh\nPHP Fatal error:  Call to a member function error() on a non-object in /srv/www/timber/vendor/wp-cli/wp-cli/php/class-wp-cli.php on line 256\nFatal error: Call to a member function error() on a non-object in /srv/www/timber/vendor/wp-cli/wp-cli/php/class-wp-cli.php on line 256\n```\nI've tried autoloading /vendor/wp-cli/wp-cli/php/wp-cli.php but got this error:\nsh\nFatal error: Call to undefined function WP_CLI\\Utils\\load_dependencies() in /srv/www/timber/vendor/wp-cli/wp-cli/php/wp-cli.php on line 18\n. ",
    "dougaxe1": "The term counts would be up to date at the end of the run. wp_defer_term_counting(false) will trigger the recount, but in batch (deduped) as opposed to each item. \nThe term count would be incorrect if the command was aborted, hence the flag requiring opt-in.\nI don't know if I would get to it this soon, but working on a PR I could run some benchmarks.\n. ",
    "rnickmccandless": "Instead of moving the wp-cli.phar executable to /usr/local/bin/wp as suggested by http://wp-cli.org/#installing, it's best to put it in one of the following listed directories in $ sudo su -c 'echo $PATH'. You can move wp-cli by $ sudo mv /usr/local/bin/wp /usr/bin/. After, any user (including root now) can use it with or without sudo, and any user can update wp-cli via sudo. Remember to log out and log back in again after you've moved wp-cli - otherwise you will get an error like: $ wp\n-bash: /usr/local/bin/wp: No such file or directory.\n. > Why?\nWhy not? The goal is to allow either have sudo access or root access to wp-cli so that wp-cli can be used and updated via root or sudo. When you move the wp-cli phar file to /usr/local/bin/wp, this is not a part of root's $PATH.\n\nThis is incorrect. If the directory you've moved WP-CLI to is already on your PATH, you don't need to log out and log back in.\n\nHave you tried this? You should know that bash can cache the full path to the commands. When you move the already installed wp and then try to wp, it can fail because it tries to access the original directory in /usr/local/bin/wp. Another way is to clear the bash cache via $ hash -d wp or $ hash -r instead of logging out / in. \n. @szepeviktor revised. \n. Thanks for the suggestion @szepeviktor.\nWe're using RedHat 6.6. The root $PATH only includes /sbin:/bin:/usr/sbin:/usr/bin.\nI thought about just including the directory /usr/local/bin/ to the root $PATH, but we don't want to include all commands listed in this directory all the time.\nPerhaps instead of moving wp-cli to /usr/bin, one could execute: sudo su - -c \"wp\" which will include the current user's $PATH (including the /usr/local/bin) into the root $PATH for that session only. To update, sudo su - -c \"wp cli update\" to update wp-cli or do any other privileged activities with wp-cli with sudo. Additionally, one could also login with sudo: sudo su - which - helps to include the user's $PATH. \n. ",
    "oaigudmundsson": "Yeah, it does work now :+1: \nCheers\n. Weird. The server is WHM and a new one. Also i can do other cmds except '\nwp core download'\nWe do use default installation.\ncheers\nDen 22 dec. 2016 15:52 skrev \"Daniel Bachhuber\" notifications@github.com:\n\nHi @vietzon https://github.com/vietzon,\nIt sounds like this is an environmental issue (e.g. specific to your\nserver configuration), not a bug with WP-CLI. Per the bug report\nguidelines http://wp-cli.org/docs/bug-reports/, bugs need to be\nreproducible with a stock WordPress install.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3686#issuecomment-268815249, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmzt__OEtfG7c9PTwdnAkMR-Gr6jQ2sks5rKo61gaJpZM4LT8k6\n.\n. Hello\n\nthanks for tip. Will write down a checklist in case we install new WHM next\ntime\ncheers\nDen 16 jan. 2017 7:14 PM skrev \"Michael\" notifications@github.com:\n\n@vietzon https://github.com/vietzon in my case it's caused by low\nmemory_limit. make sure you have it in at least 64M or better 128M. If\nyou're using WHM you must have error_log file inside the directory where\nyou're trying to download WP to. It also may help\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3686#issuecomment-272930597, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmztxyDfUx5U5CrMO3wzK58sHF9PY5_ks5rS7ONgaJpZM4LT8k6\n.\n. \n",
    "Soben": "No, Twig/Timber is using it, that's where the issue lied. This post was more of an \"informative\" thing.\nThankfully, in my case, it was a non issue as Timber was entirely set up as a experiment, so I didn't need it, and I wasn't concerned with it conflicting. I just removed Timber/Twig.\nTwig/Timber were using Composer and CLI... and tried declaring cli\\render() too, which causes this conflict.\n. ",
    "gmcmillan": ":+1: \n. As someone who has this integrated into provisioning systems, I would much prefer the new behavior. If anything, this will improve our provisioning as we can better know when a failure happens and respond accordingly.\nIMO even for interactive use of wp-cli, the exit code should return 1 or something non-zero if only 1 out of the 2 plugin installations succeeded in that scenario. That is a failure in my book because the operation being requested (install 2 plugins -- not maybe_install 2 plugins) has failed.\nHaving visibility into which operation failed is important. If we are installing 10 plugins and the only thing we get back is a return code of 1, it would be helpful to have information about which of those operations failed (and maybe even which, if any, succeeded)? Perhaps that can be sent to stderr?\n. Same issue for me. Works on Mac (High Sierra), but doesn't work on Ubuntu Xenial w/PHP 5.6 (via the ondrej PPA).. ",
    "jmazzi": "@jmslbam that seems to be dealing with what's displayed on screen and not what shows in the process list. ps auxwww would still show the argument passed to --admin_password. I'm less worried about someone watching me type over my shoulder and more concerned about the fact the the password shows in the system process list for other users on the system. \n. @szepeviktor yes, without proc restrictions, that is true. I'm open to using a configuration file if that is something this project would consider merging.\n. @danielbachhuber is there any other information from us that could help narrow it down? This issue has been especially troubling for us.\n. @danielbachhuber would calling remove_action( 'init', 'wp_cron' ) give us the same effect?\n. The problem seems to be specific to gzip, not tar.\n```\nubuntu@controller-us-east-1:/tmp/f$ php -r '$f=new PharData( \"wp_59c3ce5c83746.tar.gz\" );$f->extractTo(\"/tmp/wordpress\");'\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'unable to decompress gzipped phar archive \"/tmp/f/wp_59c3ce5c83746.tar.gz\" to temporary file' in Command line code:1\nStack trace:\n0 Command line code(1): PharData->__construct('wp_59c3ce5c8374...')\n1 {main}\nthrown in Command line code on line 1\nubuntu@controller-us-east-1:/tmp/f$ gunzip wp_59c3ce5c83746.tar.gz \nubuntu@controller-us-east-1:/tmp/f$ php -r '$f=new PharData( \"wp_59c3ce5c83746.tar\" );$f->extractTo(\"/tmp/wordpress\");'\nubuntu@controller-us-east-1:/tmp/f$ ls -al /tmp/wordpress/\ntotal 80\ndrwxrwxr-x    3 ubuntu ubuntu  4096 Sep 21 14:55 .\ndrwxrwxrwt 2593 root   root   69632 Sep 21 14:55 ..\ndrwxrwxr-x    5 ubuntu ubuntu  4096 Sep 21 14:55 wordpress\nubuntu@controller-us-east-1:/tmp/f$ \n```. ",
    "tvahey": "brew update seems to have fixed this issue.\nBut, I updated brew and got a different error message.\n==> Installing wp-cli from homebrew/homebrew-php\ncomposer: Missing PHP53, PHP54, PHP55, PHP56, PHP70 from homebrew-php. Please install one of them before continuing\nFYI - I'm running MAMP 3.0.7.3. I'll update to MAMP 3.4. \nConsider this issue closed. I'll open a new issue if there are further problems.\n. ",
    "gegere": "This is the error message by having a symlinked wp directory.\n$ wp plugin list --allow-root\nError: Strange wp-config.php file: wp-settings.php is not loaded directly.\n. Here is a simple way to produce this issue and move it along quicker.\nhttps://github.com/wp-cli/wp-cli/issues/1974#\nmkdir ~/temp && cd temp\ngit clone https://github.com/markjaquith/WordPress-Skeleton.git wordpress && cd wordpress\ngit submodule update --init --recursive\nwp plugins list --allow-root\nThis works, let's say I edit the database credentials, everything will work correctly.\nMove WordPress Core back a directory\nmv wp ../\nSymlink the directory\nln -s ~/temp/wp wp\nwp-config.php needs to point to the correct one\necho '<?php include_once(\"${_SERVER['DOCUMENT_ROOT']}/wp-config.php\");' >> wp/wp-config.php\nwp plugins list --allow-root\nThis does NOT work\n$ \"Error: Strange wp-config.php file: wp-settings.php is not loaded directly.\"\n. ",
    "emersonthis": "Interestingly, this works just fine:\n$ ./wp-content/plugins/wp-github-pipeline/vendor/wp-cli/wp-cli/bin/wp plugin list\n+--------------------+--------+--------+---------+\n| name               | status | update | version |\n+--------------------+--------+--------+---------+\n| wp-github-pipeline | active | none   | 0.1.0   |\n+--------------------+--------+--------+---------+\n. After a lot of trial and error, the install script works, but then when I run phpunit I get...\n```\n$ phpunit\nPHP Warning:  mysqli_real_connect(): (HY000/1045): Access denied for user 'root'@'localhost' (using password: NO) in /private/tmp/wordpress/wp-includes/wp-db.php on line 1452\nPHP Stack trace:\nPHP   1. {main}() /private/tmp/wordpress-tests-lib/includes/install.php:0\nPHP   2. require_once() /private/tmp/wordpress-tests-lib/includes/install.php:21\nPHP   3. require_wp_db() /private/tmp/wordpress/wp-settings.php:79\nPHP   4. wpdb->__construct() /private/tmp/wordpress/wp-includes/load.php:350\nPHP   5. wpdb->db_connect() /private/tmp/wordpress/wp-includes/wp-db.php:649\nPHP   6. mysqli_real_connect() /private/tmp/wordpress/wp-includes/wp-db.php:1452\nWarning: mysqli_real_connect(): (HY000/1045): Access denied for user 'root'@'localhost' (using password: NO) in /private/tmp/wordpress/wp-includes/wp-db.php on line 1452\n```\nI'm attempting to follow the exact instructions here.\n. @danielbachhuber Thanks for the clarification. I had actually switched it so everything was running on the MAMP (mysql, php, etc). But the gotcha was that I had already run the install script with the OSX mysql credentials. I re-ran it again, but it took me a long time realize that the install script won't overwrite existing files. Right? So I thought I was starting over but I wasn't. After I manually edited the wp-config.php to use the right DB credentials, it worked perfectly.\nIs this the expected behavior of the installation script? Do you want a PR mentioning this in the docs?\n. ",
    "mikeschinkel": "@TheLastCicada Thanks for the follow up. \n. > you're aware that wp post content - (where the first argument is a dash) will read post_content from STDIN?\nTurns out, as per @danielbachhuber in Slack that wp post content - was incorrect.  The following syntax will work instead (it assumes you have multiline post content in post-content.html):\ncat post-content.html | wp post create --post_type='post' --post_title='My Test Post' -\nBe sure to include the trailing dash (-).\n. @schlessera Thanks. Yes, I didn't happen to find the <file> doc, I had just googled and this link was what I found, and then got stuck trying wp post content -. So after asking on Slack I thought I would help the next person who finds this while looking for the same thing.. ",
    "Yanchek99": "@danielbachhuber Yes \napache_modules:\n  - mod_rewrite\nIs declared in~/.wp-cli/config.yml\n. @danielbachhuber  sure thing, the weird part is the output looks successful. \nuser@ubuntu:~$ more /var/www/html/wordpress/.htaccess \nuser@ubuntu:~$ wp rewrite structure '/%category%/%postname%/' --hard\nSuccess: Rewrite structure set.\nuser@ubuntu:~$ more /var/www/html/wordpress/.htaccess\n. @danielbachhuber Initially there was a blank .htaccess file that was created by me using touch.  This was to ensure the file had the proper file owner/group permissions.  Then the wp-cli command was run to overwrite that file.  I just tried removing it and running wp-cli to see if it would create the file but had no luck.  Note: When .htaccess does not exist I can not update it through the UI.  There needs to be a blank file with the correct permissions in order for me to update with UI.\nuser@ubuntu:~$ more /var/www/html/wordpress/.htaccess\n/var/www/html/wordpress/.htaccess: No such file or directory\nuser@ubuntu:~$ wp rewrite structure '/%year%/%monthnum%/%day%/%postname%/' --hard\nSuccess: Rewrite structure set.\nuser@ubuntu:~$ more /var/www/html/wordpress/.htaccess\n/var/www/html/wordpress/.htaccess: No such file or directory\n. @rodrigoprimo No this is just on a single site install.\n. ",
    "Stephen-Cronin": "I'll just chip in and say I get the same behaviour as @chrisbloom7 reported above: \nwp rewrite structure '%category%/%postname%' --hard\ndoes not work on it own. The .htaccess file is not generated. However, when I follow that with:\nwp rewrite flush --hard\nit does generate successfully.\nSetup info:\n- I have the config.yml set up with mod_rewrite entry. \n- WP-CLI version: 0.23.0\n- PHP version: 5.6.15\n- Apache version: Apache/2.4.17 (Win32) OpenSSL/1.0.2d \n- Using XAMPP locally on Windows 8.1\n. Hi @danielbachhuber ,\nUnfortunately that doesn't fix the problem (for me at least).\nWith 0.23.0 launch_selfpasses this $command onto launch:\nC:\\xampp56\\php\\php.exe C:/SJCHD/Dev/!Sites/wp-cli/bin/../php/boot-fs.php rewrite flush   --hard\nVar_dumping $results in launch shows it's failing because of a database connection error:\nobject(WP_CLI\\ProcessRun)#441 (6) {\n  [\"stdout\"]=>\n  string(1) \"\n\"\n  [\"stderr\"]=>\n  string(892) \"Warning: mysqli_real_connect(): php_network_getaddresses: getaddrinfo failed: No such host is known.  in C:\\SJCHD\\Dev\\!Sites\\wpa\\wp-includes\\wp-db.php on line 1489\nWarning: mysqli_real_connect(): (HY000/2002): php_network_getaddresses: getaddrinfo failed: No such host is known.\n in C:\\SJCHD\\Dev\\!Sites\\wpa\\wp-includes\\wp-db.php on line 1489\nDeprecated: mysql_connect(): The mysql extension is deprecated and will be removed in the future: use mysqli or PDO instead in C:\\SJCHD\\Dev\\!Sites\\wpa\\wp-includes\\wp-db.php on line 1515\nWarning: mysql_connect(): php_network_getaddresses: getaddrinfo failed: No such host is known.  in C:\\SJCHD\\Dev\\!Sites\\wpa\\wp-includes\\wp-db.php on line 1515\nWarning: mysql_connect(): php_network_getaddresses: getaddrinfo failed: No such host is known.  in C:\\SJCHD\\Dev\\!Sites\\wpa\\wp-includes\\wp-db.php on line 1515\nError: Error establishing a database connection\n\"\n  [\"return_code\"]=>\n  int(1)\n  [\"command\"]=>\n  string(95) \"C:\\xampp56\\php\\php.exe C:/SJCHD/Dev/!Sites/wp-cli/bin/../php/boot-fs.php rewrite flush   --hard\"\n  [\"cwd\"]=>\n  NULL\n  [\"env\"]=>\n  array(0) {\n  }\n}\nWith 0.24.0-alpha, the passed $ command becomes:\nWP_CLI_CONFIG_PATH=\"C:\\Users\\Stephen Cronin/.wp-cli/config.yml\" C:\\xampp56\\php\\php.exe C:/SJCHD/Dev/!Sites/wp-cli/bin/../php/boot-fs.php rewrite flush --hard\nand $results shows it's now failing because WP_CLI_CONFIG_PATH is not recognized as a command:\nobject(WP_CLI\\ProcessRun)#1214 (6) {\n  [\"stdout\"]=>\n  string(0) \"\"\n  [\"stderr\"]=>\n  string(109) \"'WP_CLI_CONFIG_PATH' is not recognized as an internal or external command,\noperable program or batch file.\n\"\n  [\"return_code\"]=>\n  int(1)\n  [\"command\"]=>\n  string(159) \"WP_CLI_CONFIG_PATH=\"C:\\Users\\Stephen Cronin/.wp-cli/config.yml\" C:\\xampp56\\php\\php.exe C:/SJCHD/Dev/!Sites/wp-cli/bin/../php/boot-fs.php rewrite flush --hard\"\n  [\"cwd\"]=>\n  NULL\n  [\"env\"]=>\n  array(0) {\n  }\n}\nI can enter WP_CLI_CONFIG_PATH=\"C:\\Users\\Stephen Cronin/.wp-cli/config.yml\" as a command in Bash (using ConsoleZ and Git for Windows), but in cmd.exe I get the same error as above, so I guess this a Windows ... thing.\nHope that info helps. And thanks for maintaining such a great project! \nAs an aside, I added wp-cli.yml with the mod_rewrite entry to the project folder and verified it's being picked up using wp --info and that didn't help with either 0.23.0 or 0.24.0-alpha.\n. @danielbachhuber - Thanks. That prompted me to do some further testing and I found that it's not even a Windows problem (Powershell works fine). It's something specific to Git for Windows (or maybe the way I've got it set up) and it happens for any php script using $GLOBALS['argv'] with a slash as the first character in a parameter. \nSorry for wasting your time.\n. ",
    "jalefkowit": "I know this is old and closed, but I just wanted to add my $0.02: a tool's default behavior should be to operate the way it's intended to be used. If changing GUIDs is a Very Bad Thing that people should generally not be doing, WP-CLI should require you to do something affirmative (like passing an option flag) before it changes them. Requiring people to pass an option flag each time in order for WP-CLI to not do the Very Bad Thing just means that some percentage of people are going to forget (or not know) to pass it each time they do a search-replace, thereby shooting themselves in the foot.\n  . ",
    "gitlost": "The problem is backward compatibility. Although that should be the behaviour, we're stuck with what we have.... Was thinking of giving this a bash. I'll close the issue here soon and re-open it in language-command.... Okay I kept getting distracted on this and didn't follow through. It'd be nice to have for 1.5.0 if someone wants to give it a go and if I do get a run at it I'll bags it again.... Closing this in favour of https://github.com/wp-cli/language-command/issues/24. I should add that PATHINFO_FILENAME also suffers from the same malaise, and I suppose should be dealt with too, though the 2 places it's used aren't that likely to encounter UTF-8 as of now. Also, there's no WP core equivalent for it (there should be!), but then it's only a two-liner.. @gitowiec which wp commands are failing for you? From what I can see on a quick scan of the source, the only commands that directly use the mysql client executable are wp config create (which can be got around by using --skip-check) and wp db commands.. This was fixed by https://github.com/wp-cli/core-command/pull/13. @zahardoc thanks for reporting back - maybe you could raise a documentation issue (or better yet - a PR!) on scaffold-command?. I suppose one could resolve \"latest\" at least by using https://api.wordpress.org/core/version-check (there doesn't seem to be an equivalent for \"trunk\"?) but it seems like a lot of work and complication for little gain.. > Maybe we could just extract the version from latest and trunk and do at least a numeric comparison.\nHow to do that though? And is it worth it?!\n\nOtherwise, it would mean that we always have trouble testing \"cutting-edge\" functionality until it is not cutting-edge anymore.\n\nPerhaps using a tag like \"wp-require-trunk\" would meet this use case? See https://github.com/gitlost/wp-cli/pull/1 for an implementation of this. The build of which threw up a couple of things:\n\nAlot more tests get run!\nA test failure in \"taxonomy.feature\" due to a data change in the link_category taxonomy in WP 4.4 (see https://core.trac.wordpress.org/ticket/34284).\n. Ah I see, very good, so that's the way to do it then.. My! Components come and go so quickly here! Will do.... It seems to be in eg \"features/bootstrap.feature:23\" on a composer install, the \".git/objects/pack/*\" files are readonly so causing rm to ask \"remove write-protected regular empty file?\"\n\nIt would be cleaner and nicer I think to do the remove in PHP rather than shelling out, eg Symfony\\Filesystem (which just so happens to be available!) has a recursive remove. I tried this out in https://github.com/gitlost/wp-cli/pull/7 and it works well.. Very nice! (I probably messed up your tests by review-merging that!). Where?!. Unfortunately as you can see it's not possible to do it that way as the tests will fail, so I think the originally suggested approach of only enabling one or two sniffs globally at a time is the way to go.\n. > the sniffs work together to produce the end result.\nFrom my experimenting, many are independent.\n\nThe tests passing should show that no functionality has been changed\n\nAlas the tests are far from comprehensive.\nAnyway I got phpcbf (2.9.1) working locally and noticed that (without changing the current phpcs.xml.dist, which passes phpcs) running phpcbf applied PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket and PEAR.Functions.FunctionCallSignature.CloseBracketLine which messed up the source. After adding these to the exclusion list phpcbf ran without changing anything.\nThen commenting out the first excluded rule (one of the scariest but also probably the most useful) Generic.ControlStructures.InlineControlStructure.NotAllowed produced what looked like a good result with only one indentation error that would need to be fixed manually.\nSo I'd recommend going with this:\n```\n@@ -20,7 +20,7 @@\n     /vendor/\n <rule ref=\"WordPress-Core\">\n\n\n\nexclude name=\"Generic.ControlStructures.InlineControlStructure.NotAllowed\" /\n\n\n\n@@ -31,6 +31,8 @@\n         \n\n\n Unreported by phpcs but applied by phpcbf \n Unreported by phpcs but applied by phpcbf \n\n\n\n```\nas the basis for the first PR, to be reviewed by everyone before merging.. > Have only one PR, but have a series of commits in that PR each addressing a different thing\n\nApart from a time lag issue with this, per-commit reviewing would be difficult to follow I think, and just doesn't sit well with github.\n\nThere is a reason for those two being enabled for the fixer while being disabled for the sniffer\n\nI'm sorry but I consider this a bug. phpcbf should never apply anything not reported by phpcs.\n\nI would strongly suggest using PHPCS master or at least 3.0.2 \n\nTa, will do.. Perhaps accepting a question mark at each prompt which then displays the expanded info (and re-prompts), as I just discovered Composer does when you update and have modified files!. Yes, say something like this:\nwp scaffold theme-tests --prompt\n1/4 [<theme>] (theme, ?): twentyseventeen\n2/4 [--dir=<dirname>] (dirname, ?):\n3/4 [--ci=<provider>] (provider, ?): ?\nChoose a configuration file for a continuous integration provider.\ndefault: travis\noptions:\n- travis\n- circle\n- gitlab\n3/4 [--ci=<provider>] (provider, ?): circle\n4/4 [--force] (Y, n, ?): Y\nSuccess: Created test files.. Does \n\nWhereas if you cd to the application directory and ditch the -i then no more problems:\n\nsudo -u jenkins  -- wp cache flush\nSuccess: The cache was flushed.\nnot work for you?. What's the situation where you're running as root in the first place, is it to do with Jenkins (about which I know nothing btw!)?  . You can skip loading plugins with the --skip-plugins global parameter. Try\nwp --skip-plugins plugin deactivate wordpress-seo\n(PS support questions are best asked elsewhere http://wp-cli.org/#support).. This could be any number of issues relating to your server setup I think. You could try\ncurl --data 'underscoresme_name=testing theme&underscoresme_slug=testingtheme&underscoresme_author=aris setiawan&underscoresme_generate_submit=Generate&underscoresme_generate=1&underscoresme_sass=1' http://underscores.me -o /tmp/testingtheme.zip\nand see if that works, and if so unzip \"/tmp/testingtheme.zip\" into your \"wp-content/themes\" directory. (You'll need sudo apt-get install curl and sudo apt-get install unzip if you haven't them already.)\n(PS support questions are best asked elsewhere http://wp-cli.org/#support).. Changed to use environment variable and default to 80 (though it's a bit narrow - I think it might be more a 100 chars is the norm now).. > Does this / should this wordwrap examples?\nYes, added to tests.. I think either way there should be a check before prefixing /usr/bin/env that it's not on Windows (and perhaps that /usr/bin/envis executable). The prefixing is only done here:\nconfig-command/src/Config_Command.php:          Utils\\run_mysql_command( '/usr/bin/env mysql --no-defaults', array(\ndb-command/src/DB_Command.php:      $command = '/usr/bin/env mysqldump --no-defaults %s';\ndb-command/src/DB_Command.php:      self::run( '/usr/bin/env mysql --no-defaults --no-auto-rehash', array( 'execute' => $query ) );\ndb-command/src/DB_Command.php:      self::run( '/usr/bin/env mysql --no-defaults --no-auto-rehash', $assoc_args );\ndb-command/src/DB_Command.php:      self::run( '/usr/bin/env mysql --no-defaults --no-auto-rehash', $assoc_args );\ndb-command/src/DB_Command.php:      self::run( '/usr/bin/env mysql --no-defaults --no-auto-rehash', $mysql_args );\ndb-command/src/DB_Command.php:      self::run( Utils\\esc_cmd( '/usr/bin/env mysqlcheck --no-defaults %s', DB_NAME ), array(\ndb-command/src/DB_Command.php:      self::run( Utils\\esc_cmd( '/usr/bin/env mysqlcheck --no-defaults %s', DB_NAME ), array(\ndb-command/src/DB_Command.php:      self::run( Utils\\esc_cmd( '/usr/bin/env mysqlcheck --no-defaults %s', DB_NAME ), array(\ndist-archive-command/features/bootstrap/FeatureContext.php:     Utils\\run_mysql_command( '/usr/bin/env mysql --no-defaults', array(\ndoctor-command/features/bootstrap/FeatureContext.php:       Utils\\run_mysql_command( '/usr/bin/env mysql --no-defaults', array(\npackage-command/features/bootstrap/FeatureContext.php:      Utils\\run_mysql_command( '/usr/bin/env mysql --no-defaults', array(\nphp-cli-tools/lib/cli/Shell.php:                $columns = (int) exec('/usr/bin/env tput cols');\nscaffold-package-command/features/bootstrap/FeatureContext.php:     Utils\\run_mysql_command( '/usr/bin/env mysql --no-defaults', array(\nwp-cli/features/bootstrap/FeatureContext.php:       Utils\\run_mysql_command( '/usr/bin/env mysql --no-defaults', array(\nExcluding the FeatureContext cases, it's only done in Config_Command, DB_Command and Shell and in the Shell case it's only done when not on Windows. Perhaps add a WP_CLI\\Utlls\\maybe_prefx_env() helper.. See https://github.com/gitlost/wp-cli/pull/10 for adding a simple WP_CLI\\Utils\\maybe_prefix_env() function. I think this is a candidate for 1.2.1.\nFor not using /usr/bin/env on Windows, see for instance https://github.com/composer/composer/blob/14c77130e8f717ceb154720e1abefafe99124cb9/src/Composer/Installer/PearInstaller.php#L62. Updated https://github.com/gitlost/wp-cli/pull/10 to do that.. Well for 1.2.1 an idea obviously would be to default WP_CLI_HELP_WORDWRAP_WIDTH to 90 which was (sort of) what it was before. As for good ideas...those if any may have to be awaited.... Hm indeed. I found a number of issues with my previous \"fix\" https://github.com/wp-cli/wp-cli/pull/4105. One was not understanding wordwrap() - can't use the break parameter with anything but \\n really without doing gymnastics. Also need to de-tab before using it. Also need to wordwrap the command list separately in order to preserve its columns.\nSee https://github.com/gitlost/wp-cli/pull/8 for fixes for these, which also dispenses with the arbitrary WP_CLI_HELP_WORDWRAP_WIDTH - which never made sense really - to use the very nice existing function \\cli\\Shell::columns() to wrap to the actual terminal width.\nA small issue with \\cli\\Shell::columns() is that it's not test friendly - the tput command it uses will throw a error if not run interactively, so https://github.com/gitlost/wp-cli/pull/8 needs also the one-line change https://github.com/gitlost/php-cli-tools/pull/1 to suppress it - I had to temporarily point composer to this in order to get the tests to pass.\nExtra, more precise tests have been added, and one test changed to wrap to 40 instead of 30 in order to avoid the unwrappable --ssh=[<user>@]<host>[:<port>][<path>] pushing out the max line length.\n. Tested on a Windows 10 virtual box and ended up changing cli\\Shell::columns() a fair bit to get good results on the various bash-like shells available. Also ran into the /usr/bin/env issue https://github.com/wp-cli/wp-cli/issues/4120.. This case typo https://github.com/wp-cli/extension-command/blob/master/src/Theme_Mod_Command.php#L20 looks very suspicious - if it's fixed and I understand composer (which I don't), then the error seems to go away.. The runtime config args aren't getting passed down in run_alias_group https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L759 - PR to follow.. Oh, I didn't think of that. (And I don't really understand composer so can't offer a solution!) I'll do as you suggest and add it to Scaffold_Command instead, and close this PR.. @danielbachhuber Is there some issue or discussion on project dependencies on wp-cli/wp-cli around? Thinking about it a bit more it obviously is problematic that the main framework is kind of frozen for the other projects (if that is the case that is).. Thanks for that. I'm a total noob with composer and my experience so far has been deeply painful so\n\nuse version dependency management sparingly, and opt for as much version-agnostic compatibility as possible.\n\nsounds good to me, for what it's worth, which is little. I will however muse further.... What do you get when you run\nsudo /usr/bin/env php --version\nsudo which php\nsudo su -c 'echo $PATH'\n? (edit: was sudo echo $PATH which just echoes your local PATH!). Using an environment variable is the wp-cli way to make such functions testable - see eg https://github.com/wp-cli/wp-cli/blob/master/php/utils.php#L513 and https://github.com/wp-cli/wp-cli/blob/master/tests/test-utils.php#L147.\n(Also some nitpicks - perhaps use the more normal ini_get() rather than get_cfg_var(), and a simple if ( ! ini_get(...) ) as the cast doesn't add anything.). Actually just tried it with PHP 7.1.4 where opcache.enable_cli is enabled by default (as of 7.1.2 opcache.configuration) so ini_get() must be used.\nThough more importantly this makes a strong case for having wp-cli work with opache enabled anyway.\nWhich makes the reliance on comments for basic functionality such as the hooks mechanism a problem, as it doesn't work with opcache.save_comments disabled (related https://github.com/wp-cli/wp-cli/issues/1243). For instance, https://github.com/wp-cli/core-command/issues/14 can be reproduced by doing\ncd `mktemp -d`\nphp -dopcache.enable_cli=1 -dopcache.save_comments=0 `which wp` core download --debug\nas $docparser->get_tag( 'when' ) returns empty at https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Dispatcher/CompositeCommand.php#L35.\n@Demayl could you confirm whether or not opcache.save_comments was disabled in your case?\nSo I think in the medium term perhaps move away from using comments for basic functionality such as hooks etc, and use some explicit registration system or something instead - this obviously needs thought and discussion!\nIn the short term wp-cli should be tested with opcache.enable_cli=1 and opcache.save_comments=1 to see if there are any opcache issues apart from comments.\nAlso re the current issue, the check_opcache() should throw a fatal if save_comments is disabled, eg\nif ( ini_get( 'opcache.enable_cli' ) ) {\n    if ( ! ini_get( 'opcache.save_comments' ) ) {\n        WP_CLI::error( \"wp-cli requires the PHP INI directive `opcache.save_comments` to be enabled.\" );\n    }\n    if ( ! ini_get( 'opcache.load_comments' ) ) {\n        ini_set( 'opcache.load_comments', '1' );\n    }\n    WP_CLI::warning( \"blah\" );\n}\nAlso it should be tested using the php -d mechanism (no need for env vars etc) - cheers @davidfavor for the essential idea there! - and using behat instead or as well might be better.\n. Ta v much - the case for the prosecution grows!. >  To refactor would require a huge amount of effort.\nI'm guessing there's a good chance it could all be done programmatically - but anyway I'll open an idea about it.... Yes, the DocParser https://github.com/gitlost/wp-cli/blob/master/php/WP_CLI/DocParser.php#L82 doesn't allow numbers (or uppercase or dot) while the Configurator https://github.com/gitlost/wp-cli/blob/master/php/WP_CLI/Configurator.php#L37 does.. Ah yes - that's what I thought you meant in the first place!\nYes, that leads to a long PHP 7.1 build - see https://travis-ci.org/gitlost/wp-cli/builds/244175178?utm_source=github_status&utm_medium=notification for comparative times. (That build comes from https://github.com/gitlost/wp-cli/pull/11)\nI'll do that anyway on https://github.com/wp-cli/wp-cli/pull/4161 and you can see what you think. (It also requires a fix on cli.feature to make it \"re-entrant\".). Ok we're still at cross-purposes I think. There is no scenario specific to opcache.save_comments being disabled. There is one scenario \"bootstrap.feature:3\" (https://github.com/wp-cli/wp-cli/blob/master/features/bootstrap.feature#L3) which can't be run with opcache.save_comments disabled as it installs and runs wp-cli 1.1.0 which then craps out. . Oh ok I'll remove that job from the travis then.. Fixed https://github.com/wp-cli/wp-cli/pull/4169. Ha! - Though it's probably more like they find me.... Well thinking about it just issuing a warning in WP_CLI\\Runner::start() after check_root() in a check_proc_open() function would probably be enough. It could also do a check in Runner::run_alias_group() (the original incident) to return an explicit error perhaps  - it was really that it was so mysteriously failing to process aliases with no indication and yet seeming to go through them that appeared puzzling and unfriendly.\nEdit: The implementation would just be to do if ( ! function_exists( 'proc_open' ) || ! function_exists( 'proc_close' ) )... . Yes. Looking through there seem to be 4 cases that should error:\n\nRunner:run_alias_group()\nUtils::run_mysql_command()\nWP_CLI::launch() (via Process)\nWP_CLI::runcommand()\n\nand 2 cases which could error or just pass through their input:\n\nHelp_Command::pass_through_pager()\nUtils::launch_editor_for_input()\n. I'll do this - probably not a good first issue anyway.. The format is --ssh=[<user>@]<host>[:<port>][<path>] - if you're not specifying a port then there's no colon.. Thanks, could you do a phpunit test please? (See https://github.com/wp-cli/wp-cli/blob/master/tests/test-utils.php#L58).. Thanks @Ippey - could you have wp-cli use the new function - see WP_CLI::get_cache() (https://github.com/wp-cli/wp-cli/blob/master/php/class-wp-cli.php#L77) and also the 3 instances in WP_CLI\\Runner?\n\nAlso to avoid test bleed it's nice if tests leave things as they find them so could you save/restore the environment in the test (see eg https://github.com/wp-cli/php-cli-tools/blob/master/tests/test-shell.php#L15). Also the test should also use the WP coding style. Ta!. Yes, are there ideas floating around as to how to do that?!. Hi (was away for several days)\n\nThis seems like a lot of complexity to manage, things that could break, etc.\nCan we get away with simply using #4189 instead?\n\nYes, I agree - that's a much simpler solution.\n\nIf we want to run @github-api tests in CI, we could do so by only running them in one job and setting a GITHUB_TOKEN to increase our rate limit to 5000\n\nI'll give that a try tomorrow (it wasn't/isn't clear to me that it works), so I'll close this PR.. Using a token seems to work fine - see https://github.com/gitlost/wp-cli/pull/13, running all jobs (actually I left out PHP 7.1 but that was a mistake), if slowly (a nice side-effect of using a cache now lost was speed).\nIf you want to go ahead with this I can do a PR. If you want to it just in one job I suppose PHP 7.0 as the most \"mainstream\" currently? Also I created a personal token WP_CLI_GITHUB_TOKEN on my fork so I suppose you (or is there a \"wp-cli\" user?!) would be best to do that on this repo.. Actually getting rate limiting errors on trying it today so either I'm doing it wrong or it doesn't work.. Got a chance to properly debug it and quelle surprise I was doing it wrong - had the format wrong in travis.yml and wasn't exporting it in get_process_env_variables() and the http_request() args were wrong anyway.\nAnyway after testing with the fixes it does work, so I think this PR is now a runner seeing as it no longer needs the \"primed cache\" hack.. Do you think the environment variable should be GITHUB_TOKEN or WP_CLI_GITHUB_TOKEN? Also could you post the output of (as appropriate)\ntravis encrypt WP_CLI_GITHUB_TOKEN=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -r wp-cli/wp-cli\nplease?\nThe current plan is to replace github-api in features/cli.feature with a new tag travis-github-token (as github-api is still being used in package-command/features/package-install.feature:123) and to add to ci/behat-tags.php\n```\nSkip Github API tests that require WP_CLI_GITHUB_TOKEN if on Travis and it's not available.\nif ( getenv( 'TRAVIS' ) && ! getenv( 'WP_CLI_GITHUB_TOKEN' ) ) {\n    $skip_tags[] = '@travis-github-token';\n}\n```\nI've veered back to thinking that caching (and paging) should be done with or without a token. It respects what the api.github.com/repos request is saying - that the data is good (and should be cached) for max-age seconds. So I think this PR is the appropriate place to do things (with the prime cache stuff (and the unrelated remove directory fix) removed).\n. > I entered it through the Travis backend\nOkay, so apply it to all jobs then?\n\nIt adds complexity to the build system\n\nIn what way?\n\nI suspect there are more important things for us to work on.\n\nI think getting tests working fully and speedily on travis and locally, with as few exceptions as possible and with no extraneous errors, is a very important thing to be working on, and will improve all our lives! The slowness is a particular millstone, and having exceptions or errors is confusing and leads one to miss bugs.\n. > It's additional code executed\nYou could say that about anything!\n\nNotably, caching is notorious for introducing issues that are only intermittently reproducible\n\nI can't see that applying in this case - either the cache is there or it isn't. If it isn't it doesn't matter. If it is, it's checked and only then used. It's pretty fail-safe I hope (famous last words).\n\na number of issues that will yield higher impact\n\nI'm sure there are! I wasn't claiming otherwise or making comparisons (which are always odious).\n\n4108 is arguably critical and much higher priority than this\n\nI'm sure it is! Alain's doing that though isn't he?\n\nI don't mean to discount your work on this\n\nI'm sure you don't. I'm not emotionally attached to this PR. If you're set against it, I'll drop it. I just think it's the right thing to do.. Cool. Consider it dropped!. > Is assigning the team for review sufficient?\nI think so...\nEdit: Actually not being able to search for that (as far as I can see - review-requested:wp-cli/committers and variants don't seem to work) is awkward.. Thanks @aaemnnosttv!. It may be cleaner and more portable but it's slower.... Thanks @paulgibbs, your suspicion\n\nit is not passing the value of WP_CLI_STRICT_ARGS_MODE if set\n\nis correct! You could try as a workaround\nWP_CLI_SSH_PRE_CMD='export WP_CLI_STRICT_ARGS_MODE=1' wp.... Okay that doesn't work.. Yes it would - didn't realize that dependency. Back to the drawing board.. Actually bothered to do some performance testing and shelling out is faster for recursive copying and deleting (at least in the case of copying/deleting something substantial like WP) so this can go in the dustbin.. I think it would be nicer to keep remove_dir() in FeatureContext, and for all dir deletes to use it, eg\nphp\nProcess::create( Utils\\esc_cmd( 'rm -rf %s', $dir ) )->run_check();\nrather than having variously varying variants around.. I'll do it in another PR and let this proceed.... Yes I've been running it locally. I meant to mention about tests - there's just the one test at step cli.feature:46 which runs without version options. It's difficult to test as the output is (or should be) the same. It would be nice to have something.\nEdit: thinking....!. I added \"Success: Updated WP-CLI to the latest stable release.\" to the two cases (the --no-patch is also in effect no options) that trigger the default. Better than nothing I suppose...\nEdit: ah of course, the message changes (which was why it was left blank) - you get \"Success: Updated WP-CLI to 1.2.1.\" if the change is disabled. So there is an output difference. Hmm.. Ah it's quite a severe behaviourial change so it's a non-runner I think - trying too hard to get the tests running fast. The very nice \"WP-CLI is at the latest version.\" message is lost. I'll close it.. That last commit is the way to go, following the 2 golden rules in these situations:\n\nNormalize your input as early as possible.\nDenormalize your output as late as possible.\n\nIn between you just deal with the normalized input, ie \\n in this case. So PHP_EOL and \\r shouldn't be used, except at the very beginning/end.\nI couldn't resist doing this, see https://github.com/gitlost/wp-cli/pull/14, although it will probably go nowhere. It'd be interesting anyway if you @electrokit could give it a bash (do you have the behat tests running on Windows?).\n. php\n$docComment = preg_replace( '/\\R/', \"\\n\", $docComment );\nshould just be\nphp\n$docComment = str_replace( \"\\r\\n\", \"\\n\", $docComment );. Will do.... Ha! Also on ZX Spectrums... curious, do you have the behat tests running on Windows?. The error though is originating at Runner::set_wp_path().\nThere must be something in your environment/setup @Asenar that is setting ABSPATH before Runner::set_wp_path() gets called - for instance using the PHP ini auto_prepend_file as mentioned in https://core.trac.wordpress.org/ticket/26592 or something else? (So this could be a legitimate use case).. That's around the 4th or 5th time I've seen the built-in PHP server flake out on PHP 5.6, though the first time for PHP 5.6.24.... It might be worth considering dropping the AutoloadSplitter class and just using a regex instead, eg \"splitter-preg\": \"/blah1|blah2/\", not as flexible but may be expressive enough.\n. WP-CLI only accepts lower-case in option names - see https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/SynopsisParser.php#L96. It's fairly standard to convert camelCase to camel-case or camel_case in these situations.... Oh very good, didn't think of that - yes, might be good to highlight it in the Commands Cookbook.. Okay WP_CLI_PHP_ARGS only works for shell script wp (obs!) so will have to think of something else.. Hi @jc21, for the first issue you can set the environment variable PAGER to be what you want.\nThe second issue is caused by Shell::columns() in php-cli-tools https://github.com/wp-cli/php-cli-tools/blob/master/lib/cli/Shell.php#L53. The error should be suppressed. I'll open an issue on the php-cli-tools repo for it.. Pushing against the old branch issue_4170 doesn't seem to work so I'll open a new one.. Point 4 I hope!\nEdit: OMG it is 4MB - was misreading it as 400K.. There feels something wrong with adding this generally though just to solve a test situation - I think maybe having a 'command' (or something) build option to trigger it would be nicer... . Ah I see, ta.. Yes I see that but you've asked for help. You should be able to browse the help freely without having to set options or have a WP install.. Well maybe append (or prepend) that info to the command error?. I think it's :ship: for now anyway, so I'll close.... I'm going to upload a new PR for this, which is basically the same as the old ones plus https://github.com/wp-cli/wp-cli/pull/4291/commits/571de94fc8ba3cc2dd0cede69835666c175381ea, ie defining WP_DEBUG (instead of WP_ADMIN) to get around the die() in dead_db(), and which I'll justify in the PR.\nJust to clarify here that the failure in https://travis-ci.org/wp-cli/wp-cli/builds/264638663 (which has nothing to do with WP_DEBUG) mentioned in https://github.com/wp-cli/wp-cli/pull/4291#issuecomment-322402505 is current broken behaviour, and the reason the test was introduced in https://github.com/wp-cli/wp-cli/pull/4285.\nThe current behaviour can be reproduced by a variant of the script given in https://github.com/wp-cli/wp-cli/pull/4266#issuecomment-321643179:\nbash\nset -v\nwget https://github.com/wp-cli/wp-cli/releases/download/v1.3.0/wp-cli-1.3.0.phar -nc -q && chmod +x wp-cli-1.3.0.phar\nrm -rf /tmp/issue_4265_wp_install\nmkdir /tmp/issue_4265_wp_install\nmysql --user=wp_cli_test --password=password1 --execute='DROP DATABASE IF EXISTS wp_cli_test;'\n./wp-cli-1.3.0.phar core download --path=/tmp/issue_4265_wp_install\n./wp-cli-1.3.0.phar config create --dbname=wp_cli_test --dbuser=wp_cli_test --dbpass=password1 --path=/tmp/issue_4265_wp_install\n./wp-cli-1.3.0.phar help core --path=/tmp/issue_4265_wp_install\nwhich produces:\n\n(In passing note that the check for DB connection in wp config create might be expanded to include checking the database exists as at the moment it only checks that the user/password/host is good.)\n. Doesn't seem to be a Linux version of that - will come up with something.... Here's a before/after screenshot of running this bash script https://gist.github.com/gitlost/e895eb50068aff4ca36a61de3f74a2e7 in the suggest_help branch:\n\nRe removing the code from Help_Command, the idea is to consolidate the exiting and error messages in Runner. At the moment help will exit if it determines that WP is loaded but will just return otherwise. The error it gives on exiting is different than that that occurs when other commands don't execute (and which don't do this WP loaded check). It's confusing and inconsistent, and leads to odd behaviour at the moment, so I think it's better if help just tries to help and exit, and otherwise let Runner look after things.\n. Thanks @danielbachhuber, actually was trying to come up with a proper less hand-waving explanation when I noticed that there's an issue with help if the WP install is partial, as tested for in \"Help when WordPress is downloaded but not installed\" in features/help.feature:49, and reproducible by:\nbash\nwget https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar -nc -q && mv wp-cli-nightly.phar wp-nightly.phar && chmod +x wp-nightly.phar\nrm -rf /tmp/pull_4266_wp_install\nmkdir /tmp/pull_4266_wp_install\nmysql --user=wp_cli_test --password=password1 --execute='DROP DATABASE IF EXISTS wp_cli_test;'\n./wp-nightly.phar core download --path=/tmp/pull_4266_wp_install\n./wp-nightly.phar config create --dbname=wp_cli_test --dbuser=wp_cli_test --dbpass=password1 --path=/tmp/pull_4266_wp_install\n./wp-nightly.phar help core is-installed --path=/tmp/pull_4266_wp_install\n./wp-nightly.phar help --path=/tmp/pull_4266_wp_install\nwhere the help commands give Error: Can\u2019t select database. errors (but won't on help core install for instance).\nWhich probably explains why help config and help core install/multisite-install/verify-checksum/version and help db are treated specially.\nI'll push a fix to a new PR which involves adding a special help_wp_die_handler to cater for this, though it's a bit hacky.\n. You need to make sure you have wp-cli/php-cli-tools 0.11.4 at least - try doing a composer update.. @colorful-tones the problem might be that your ~/.wp-cli/packages/composer.json is corrupted (see https://github.com/wp-cli/package-command/issues/27, fixed for upcoming release 1.5.0 https://github.com/wp-cli/package-command/pull/64).\nIf your symptoms are the same as https://github.com/wp-cli/package-command/issues/27 you could try editing your ~/.wp-cli/packages/composer.json to remove references to the package that failed to install and then try to install again.... Could you do wp cli info...\nOh sorry you did that!. I'll close this in view of https://github.com/wp-cli/wp-cli/pull/4293 and the reopening of https://github.com/wp-cli/wp-cli/issues/4265. Hi @miya0001, yeah it's awkward to force PHP Notices to stderr at the moment in the tests. I think looking at wp_debug_mode() https://github.com/wp-cli/wp-cli/blob/master/php/utils-wp.php#L15 the magic formula is\nphp\n<?php define( 'WP_DEBUG', true ); define( 'WP_DEBUG_DISPLAY', null ); define( 'WP_DEBUG_LOG', false ); ini_set( \"error_log\", '' ); ini_set( 'display_errors', 'STDERR' );\nI'll push this change against this branch.\nThe error was introduced by me in https://github.com/wp-cli/wp-cli/pull/4285 in defining WP_ADMIN true at https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L1143. I have an additional hack to fix this which I'll push here once the tests fail.. I think this hack is fairly reasonable given that it's only executed on help and that it's really a bug in core not to check that the preg_match() could fail at \"wp-includes/vars.php:31\".. Well I say it's a core bug, but opinions could differ (\"Why would it ever fail?\"). Also it could take months.\nThe original hack of defining WP_ADMIN is also an attempt to get around what I would consider the poor core behaviour of using die() instead of wp_die() (die() should only be used in a very few places I think), which makes portions of the code base untestable, apart from anything else.\nAnyway I'll see if I can come up with a better hack than defining WP_ADMIN.... @diggy - thanks, interesting, and confirms really that the answer to \"Why would it ever fail?\" is \"It shouldn't\".\n@danielbachhuber @miya0001 Howabout defining WP_DEBUG instead, which seems to work...?. I'll close this in view of https://github.com/wp-cli/wp-cli/pull/4293 ... to be continued (edit: in https://github.com/wp-cli/wp-cli/issues/4265)!!. With reference to PR https://github.com/wp-cli/cache-command/pull/8, I like the style of the current wp cli short description:\n\nReview current WP-CLI info, check for updates, or see defined aliases.\n\nso for instance for the cache command something like:\n\nFlush the WP Object Cache, manipulate its values, determine which cache is being used.\n\nhere leaving out \"or\" or \"and\" at the end as it's implied, which I'd also do in the wp cli case:\n\nReview current WP-CLI info, check for updates, see defined aliases.\n. > I feel uncomfortable at the position of the line break when it has long description.\n\n@miya0001 the word wrapping for the command line help deals poorly with long non-spaced runs, in particular with links such as Capabilities](https://codex.wordpress.org/Roles_and_Capabilities) - seeing as they're becoming common in the new descriptions it should deal with them better. I'll open an issue for this.\n\nLong and multiple sentences in the descriptions are a problem because forced line breaks...look funny when imported into the Handbook\n\n@hearvox again this looks to me that this should be programmatically fixed when generating the handbook. I'll open an issue for this also.\nI suppose it's too late but I'm not a fan of using the third person singular instead of the imperative in the descriptions. These are commands and\nAdd, remove, and list capabilities of a user role.\nreads better to me than the passive\nAdds, removes, and lists capabilities of a user role.\nIf this was done in analogy to function descriptions then I think it's misapplied...(but it's not a big deal, and it's too late anyway!).. Well what's been merged is better than what was there before so that's fine I think, and I don't want to derail these improvements or bog them down in small details. So I think leaving things progress as now (without an overall review) may be best, and as you say it's not too late and we can always iterate.\n\nI want to solve the word-wrapping problem in long description in a few weeks or so\n\nWe will!\n\nBut I am not sure about the third-person-singular problem.\n\nYes, that's definitively just my take, and others may differ.. > If that's the choice of the WP-CLI crew, maybe state it somewhere, for when stray Docs folk like myself come wondering thru.\nThere's no us and them here. It was just a suggestion, by me alone, as stated above.\nI find the tone of this conversation tiresome, and won't be participating further.\n. @hearvox thanks for responding, no offence taken.. Opened https://core.trac.wordpress.org/ticket/41655. Hi @b4dnewz \n\nMaybe I misunderstood the use of --skip-things during wp core download,\n\nYes, the --skip-things options only affect WP-CLI itself, telling it not to load plugins/themes/packages when it loads. It does not affect commands as such.\n\nI would like to skip the installation/extraction of themes and plugins.\n\nwp core download just extracts whatever is in the official WordPress release. I don't think it would be good for it to do anything else. So use wp plugin delete and wp theme delete to customize your install.\n\nI can't find a way to avoid to using the cache, I mean a global option like --no-cache or something\n\nI think a --no-cache (or similar) option to wp core download might be a good idea. Could you open an issue at wp-cli/core-command https://github.com/wp-cli/core-command/issues/new to suggest this enhancement?\nIn general, see also http://wp-cli.org/#support if you haven't already. Thanks!. @b4dnewz A key principle of WP-CLI is composability but I can see that such an easy --all option would be convenient so certainly go ahead and suggest such an option at wp-cli/extension-command https://github.com/wp-cli/extension-command/issues/new (warning: all suggestions may be rejected!).. > All scenarios have been written from the perspective of starting with a fresh WordPress install.\nThe caching should be totally transparent, ie it's the exact same - database and disk - as if a wp core install were done.\n\nany concrete numbers for the performance boost\n\nFor local testing, running all the tests (ie not using behat-tags.php or any tags - currently 148 scenarios and 1502 steps), then I'm seeing about a 20% improvement - ie. if the tests normally take about 7m, then with the caching they take about 5m30s. This to be prefixed by the usual disclaimers re local machine activity, server lag (wordpress.org, github.com etc), weather conditions etc.\nFrom a Travis point of view you could probably halve that figure to a 10% improvement but Travis is so variable it's hard to say.\nThat 20% figure is just for wp-cli/wp-cli obs - for the bundled commands it's usually lower - for some that are download-bound or database-bound such as extension-command or media-command the improvements are much less.\n(I've implemented some instrumentation on tests which I'll upload in another PR soon...)\n\nmay want to introduce a Given a cached WordPress install\n\nThat shouldn't be necessary as as stated above the caching is transparent - or if it isn't then it's broken and worthless.\n. > Pretty neat.\nTa!\n\nDoes it make sense to include this in one of the Travis jobs?\n\nMight do, maybe one of the middle ones so it doesn't slow down getting jobs 6 and 7 going.... Well it's overhead, probably negligible.. @danielbachhuber yes, ta.. It looks like $required should just be removed as it's not used, see https://github.com/wp-cli/wp-cli/commit/25a08b330601068c649fca8ca4d5d84318dadf24#diff-30b993a666ffc5a03ac0cb9e9eac5726. It would be good to have a reproducible instance of this bug, as as mentioned in slack, neither https://github.com/wp-cli/doctor-command/issues/113 (stale composer.json) nor https://github.com/wp-cli/wp-cli/issues/4330 (packages not installed??) seem to apply.. I'd be more inclined to hide the square brackets and their content and the opening/closing round brackets around the url, so eg\n[Roles and Capabilities](https://codex.wordpress.org/Roles_and_Capabilities)\nbecomes just\nhttps://codex.wordpress.org/Roles_and_Capabilities\nas the url is useful and the link description isn't so much (especially given well named links such as in the codex).\nAnother option is not to hide the link description or the url but (programmatically) insert a space between the ]( (and maybe lose the opening/closing round brackets around the url).. Both of them are excellent! The first might be more robust and apply to more cases?. Just to be clear, for the second are you suggesting a documentation change or to do it programmatically?. stackoverflow uses [title][1] (where 1 can be anything) for what it's worth https://stackoverflow.com/help/formatting.. > Should pluralize() be moved into wp-cli/wp-cli\nI think that would be overkill here given the limited vocab involved - I've written a function to do the past tense anyway (probably overkill as well), PR to follow.. There's blog_charset (and also blog_public, blogdescription and blogname) in wp_options.option_name so that is probably causing the issue. You could try\nbash\nwp search-replace blog foo --skip-columns=option_name\nto get around this, or use a regex to replace only the word blog\nbash\nwp search-replace '\\bblog\\b' foo --regex. > But I guess following function is not working as expected.\nNote that the FeatureContext in extension-command is old https://github.com/wp-cli/extension-command/blob/master/features/bootstrap/FeatureContext.php#L126-L137 and doesn't have the WP_VERSION-specific download cache added in https://github.com/wp-cli/wp-cli/pull/4287.. Don't know anything about vagrant but just going on the doc https://www.vagrantup.com/docs/cli/ssh.html the format for the command looks wrong - does this work for you @shadyvb ? It looks from the doc that the format should be something like:\nphp\n$escaped_command = sprintf(\n    'vagrant ssh %s -c %s%s',\n    escapeshellarg( $bits['host'] ),\n    escapeshellarg( $wp_command ),\n    $is_tty ? ' -- -t' : ''\n);\nie the \"host\" (vagrant machine ID) should come first.. Hmm, installed vagrant (1.9.1 on Ubuntu 17.04) and if I do vagrant ssh -t I get\n```\nAn invalid option was specified. The help for this command\nis available below.\nUsage: vagrant ssh [options] [name|id] [-- extra ssh args]\nOptions:\n-c, --command COMMAND            Execute an SSH command directly\n-p, --plain                      Plain mode, leaves authentication up to user\n-h, --help                       Print this help\n\n```. Thanks for the report @gd-jroberts. Apart from the notice, if braces were used (not sure if they are) then it would fail.\nI see from the link you've given that the Zend framework has a polyfill https://github.com/zendframework/zend-stdlib/blob/master/src/Glob.php, so it'd probably make sense to copy this class into WP-CLI and use it in Utils\\expand_globs() if GLOB_BRACE isn't defined.\n(For reference, GLOB_BRACE is also used in import-command, https://github.com/wp-cli/import-command/blob/master/src/Import_Command.php#L58.). I did a test implementation of this using the simple copy/require method:\n```php\nfunction expand_globs( $paths, $flags = null ) {\n    // Compatibility with systems without GLOB_BRACE.\n    $glob_user_func = null;\n    if ( ! defined( 'GLOB_BRACE' ) || getenv( 'WP_CLI_TEST_EXPAND_GLOBS_NO_GLOB_BRACE' ) ) {\n        if ( ! class_exists( 'WP_CLI\\Utils\\Zend_Glob', false ) ) {\n            require DIR . '/foreign/class-zend-glob.php';\n        }\n        $glob_user_func = array( 'WP_CLI\\Utils\\Zend_Glob', 'glob' );\n        if ( null === $flags ) {\n            $flags = Zend_Glob::GLOB_BRACE;\n        }\n    } elseif ( null === $flags ) {\n        $flags = GLOB_BRACE;\n    }\n$expanded = array();\n\nforeach ( (array) $paths as $path ) {\n    $matching = array( $path );\n\n    if ( preg_match( '/[' . preg_quote( '*?[]{}!', '/' ) . ']/', $path ) ) {\n        $matching = ( $glob_user_func ? call_user_func( $glob_user_func, $path, $flags, true ) : glob( $path, $flags ) ) ?: array();\n    }\n\n    $expanded = array_merge( $expanded, $matching );\n}\n\nreturn array_unique( $expanded );\n\n}\n``\nwith very light edits to Zend'sGlob.php(here copied asforeign/class-zend-glob.php`) to make it WP-CLI and PHP 5.3 compat.\n\nwe could also provide an external compatibility package\n\nThat would be nicer.\n\nThis way, you can only install this if needed.\n\nWondering how to make that work.. And then plug it in with something like:\nphp\nfunction expand_globs( $paths, $flags = null ) {\n    if ( ! defined( 'GLOB_BRACE' ) ) {\n        WP_CLI::warning( \"No GLOB_BRACE. Do wp package install wp-cli/glob-polyfill.\" );\n    } elseif ( null === $flags ) {\n        $flags = GLOB_BRACE;\n    }\nI suppose? May or may not be worth it as you say.. Yes I understood that, just wondering about the user experience. Actually in the above code, would probably still need to use Zend_Glob::GLOB_BRACE, as defining GLOB_BRACE in the polyfill could be messy and confusing and have other issues.. It's when a Linux (such as Alpine) has been built with a libc (such as musl) that doesn't implement it, so there's no system configuring that can get around it.\nI went ahead with this anyway by just copying and adapting the relevant code (around 70 lines) from the Zend Framework into a new utils function - it avoids the confusing GLOB_X flags issue of the Zend stuff, which expects you to use its class Glob::GLOB_X flags. PR to follow.. @miya0001 I think it's more likely to be a PHP / PharData memory problem or something, and due to a recent change. It fails for me with PHP 7.0.23 and 7.1.9 but succeeds with PHP 7.0.18, PHP 5.6.22, PHP 5.5.38 (all on Ubuntu 17.04) and PHP 7.0.19 (Windows).\nWhat version of php did you run on MacOS?. Very suspicious!. If it's a memory problem or something then different tars could randomly work.\n@DeaZy07 could you give the full PHP version numbers please?\n(@ZeroX66 I tried with the exact same arguments tar xz --strip-components=1 --directory=%s -f $tarball and it worked (and changed the source to fall back to this on a PharData exception and it worked also).)\n. > I tried php -r \"new PharData( 'latest.tar.gz' );\" with each version of PHP on Travis CI.\n@miya0001 very interesting. I've (sort of) tracked it down locally to this build patch \"0022-lp564920-fix-big-files.patch\":\n```\nFrom: Debian PHP Maintainers pkg-php-maint@lists.alioth.debian.org\nDate: Sat, 2 May 2015 10:26:54 +0200\nSubject: lp564920-fix-big-files\n\nmain/streams/plain_wrapper.c | 8 +++++++-\n 1 file changed, 7 insertions(+), 1 deletion(-)\ndiff --git a/main/streams/plain_wrapper.c b/main/streams/plain_wrapper.c\nindex 9dbc4246b..c65571f94 100644\n--- a/main/streams/plain_wrapper.c\n+++ b/main/streams/plain_wrapper.c\n@@ -681,7 +681,13 @@ static int php_stdiop_set_option(php_stream *stream, int option, int value, void\n            switch (value) {\n                case PHP_STREAM_MMAP_SUPPORTED:\n\n\nreturn fd == -1 ? PHP_STREAM_OPTION_RETURN_ERR : PHP_STREAM_OPTION_RETURN_OK;\nif (fd == -1)\nreturn PHP_STREAM_OPTION_RETURN_ERR;\n/ Don't mmap large files /\ndo_fstat(data, 1);\nif (data->sb.st_size > 4 * 1024 * 1024)\nreturn PHP_STREAM_OPTION_RETURN_ERR;\nreturn PHP_STREAM_OPTION_RETURN_OK;            case PHP_STREAM_MMAP_MAP_RANGE:\n                if(do_fstat(data, 1) != 0) {\n\n\n\n``\nwhich causes memory mapping of the input file to be disabled (as it's > 4MB) so PHP uses a 8KB chunk read-write loop instead, which fails at the last 7 byte chunk for some reason (8192 * 999 + 7 = 8183815, the size ofwordpress-4.8.2-en_US.tar.gz). There's azlib.inflate` filter on the output stream which may be the culprit.\nBut it's a bit surprising that Travis wouldn't use this patch also.. Ah maybe. How Travis builds its stuff has always been (and likely always will be) a mystery to me.\nThe patch above is from the Ubuntu php7.0 package, eg for 17.04 https://launchpad.net/ubuntu/+archive/primary/+files/php7.0_7.0.22-0ubuntu0.17.04.1.debian.tar.xz, for 16.04 https://launchpad.net/ubuntu/+archive/primary/+files/php7.0_7.0.22-0ubuntu0.16.04.1.debian.tar.xz, but is present in older distributions also.. I tracked down the guilty party to here https://github.com/php/php-src/blob/master/ext/zlib/zlib_filter.c#L124 in the zlib_filter where it returns without updating the bytes_consumed variable, as if a .tar.gz is 1 to about 10 bytes over modulo 8192 then no output might be needed (the last 4 bytes are just a checksum anyway) but the bytes have been consumed, and not reporting them as such causes the calling function to error.\nAs mentioned above this is only triggered for files > 4MB on distributions with the Debian patch but even so it's surprising it hasn't been noticed before.. @chriscroome Could you post the output of php --version please?. Note the export-command issue isn't related, it's just buggy code.. There's an issue here with a double file read (https://github.com/wp-cli/wp-cli/pull/4389/files#diff-96c026ad1c6dc030a7c7dfe32107aa0cR159).\nBut apart from that I don't think disallowing a time-honoured PHP paradigm like (https://github.com/wp-cli/wp-cli/pull/4389/files#diff-445ef2877063cddd8d2d17a2f58e44f7R133)\n$positional_args = $assoc_args = $global_assoc = $local_assoc = array();\nadds anything. Similarly this paradigm (https://github.com/wp-cli/wp-cli/pull/4389/files#diff-ebfa725722979f3a5e288bb8f86269a3L834), one of the most recognizable in the history of programming\nwhile ( ( $line = fgets( STDIN ) ) !== false ) {\nThe rule for Squiz.PHP.DisallowMultipleAssignments cites Clever Code but it's not in these cases, nor in most of the others.\n. > Why is that an issue?\nBecause it's needlessly reading the file twice.. I'm deeply unhappy about this.. Yes, good idea. Will do.... @danielbachhuber happy might be an overstatement but I'm reasonably ok with it so I'll merge, ta.. That info is wrong, see https://bugs.php.net/bug.php?id=72500. The correct info is http://php.net/manual/en/migration70.incompatible.php#migration70.incompatible.variable-handling.indirect, and global $$key is not one of the incompatible cases.. If it's needed to get the PHP compatibility checker https://github.com/wp-cli/wp-cli/pull/4402 working, which may be useful, then no.\nIn general it can be taken as read that I'm opposed to all this sort of code fiddling, for what it's worth.. I don't think functional changes like this should be made on general principles which may or may not apply, but be thought about with unit tests and preferably an actual bug report.. For just unit testing Iterators\\CSV, exec is your man:\n```php\n<?php\nclass IteratorsTest extends PHPUnit_Framework_TestCase {\nfunction testIteratorsCSVStdin() {\n\n    $php = \"require '\" . dirname( __DIR__ ) . \"/php/WP_CLI/Iterators/CSV.php';\\n\";\n    $php .= <<<'EOD'\n\n$iterator = new WP_CLI\\Iterators\\CSV( '-' );\nforeach( $iterator as $i => $line ) {\n    echo \"$i\";\n    foreach ( $line as $j => $field ) echo \":$field\";\n    echo \"\\n\";\n}\nEOD;\n    $stdin = <<<'EOD'\n\nuser_login,user_email,display_name,role\nstdinuser1,bobjones@example.com,Bob Jones,contributor\nstdinuser2,newuser1@example.com,New User,author\nexistinguser,existinguser@example.com,Existing User,administrator\nEOD;\n    $stdin = escapeshellarg( $stdin );\n    $php = escapeshellarg( $php );\n\n    $output = array();\n    exec( \"echo $stdin | php -r $php\", $output );\n\n    $this->assertSame( 3, count( $output ) );\n    $this->assertSame( '0:stdinuser1:bobjones@example.com:Bob Jones:contributor', $output[0] );\n}\n\n}\n```. The issue for me isn't churn as such, but fiddling, ie. making changes to code for no reason apart from \"best practices\" or \"readability\" or \"consistency\" or \"insert subjective rationale here\".\n\n\nIf it's a small change (logically equivalent, easy to understand, and is covered by existing tests), then I think it's fine to merge.\n\n\nThe problem with that is that there are an infinite amount of such improvements that could be made. I or anyone could rattle off about 10 PRs per minute that would match that criteria. The core mantra \"Code refactoring should not be done just because we can\" has a lot going for it.\nRe 2.1, if a change has a proven need then that's not what I'm opposed to.\n\nI'm generally supportive of coding standard changes\n\nMy position is that if it's explicitly in WordPress PHP Coding Standards, then fine. If not, such as https://github.com/wp-cli/wp-cli/pull/4389, then not fine. The beauty of the WP document is that it's short, has few rules and is easy to follow, You just accept it and get on with your coding.\n\nGreater consistency subtly makes the entire codebase easier to understand.\n\nConsistency of coding style is nice to look at. I'm not that sure it makes a codebase easier to understand, unless the existing style is particularly bad and all over the place.\n\nwe should focus our efforts on increasing confidence about making changes (e.g. by adding more tests or otherwise)\n\nYes we should!\n\nHow would you clarify further?\n\nI'd go with a soft variant of Code Refactoring - Make WordPress Core but that's just me.. > don't show any message about skips\nIf null it won't show any message about the number of fails, even if $failures is non-zero. This is the BC behaviour.\nIf null or zero if won't show any message about skips.. There's @BeforeFeature etc tags used by Behat itself so I think maybe do:\nphp\nif ( preg_match( '/copyright|licen[sc]e|\\(c\\)|@before|@after/i', $t[1] ) ) {\n    // Keep for copyright and behat reasons.\n    return $t[1];\n}. > Including comments in scaffolded files seems like a feature, not a bug. As such, comments shouldn't be stripped from them.\nAgree, they shouldn't.\n\nBut, we don't currently have a determinate way of identifying files that are scaffolded into other codebases.\n\nInvestigating.... It looks to me that the .php files copied are only in features/bootstrap and features/steps, and also features/extra/no-mail.php (has no comments) and utils/behat-tags.php. So they could be excluded. Are there others?\nBut given the issues just now arising and the closeness of the release date a revert of https://github.com/wp-cli/wp-cli/pull/4391 is probably the most prudent thing to do.. Looks really nice and works well. A few nitpicks, all ignorable, would be that the regex doesn't need the all-including brackets so could be simplified to '/\\[.+?\\]\\((https?:\\/\\/.+?)\\)/', as $matches isn't needed and then $references = $m[1]. Also in general a count() should be assigned and not used in a loop test expression.\n(Also overall you could argue that preg_replace_callback() is a more natural fit here, as str_replace() could theoretically replace more than it should. But it's highly unlikely.). (I've had this secretly running in my test lab branch https://github.com/gitlost/wp-cli/pull/12 for a while, against trunk.)\nAlso one test needs to be tagged @less-than-7.2, \"features/help.feature:97\", as it downloads the latest WP. (Or it could be changed to download trunk/nightly, I suppose).\n(Related  https://core.trac.wordpress.org/ticket/40109.). Sorry, it's @less-than-php-7.2.. It'd be good to use error_get_last() also like in https://github.com/wp-cli/core-command/blob/master/src/Core_Command.php#L138. I'm thinking that the file_exists() check before it https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/FileCache.php#L261-L264 should be removed and just let mkdir() fail.\nAlso could you do a phpunit test?! Not sure what directory value to use to make it fail. Maybe just touch() it so it's a file and then with the file_exists() check gone it will fail. Not great. (For an example of testing for warning output see https://github.com/wp-cli/wp-cli/blob/master/tests/test-utils.php#L421). Removed this from the 1.5.0 milestone per office hours slack https://wordpress.slack.com/archives/C02RP4T41/p1516726954000467. I couldn't reproduce it locally https://github.com/wp-cli/package-command/issues/44#issuecomment-340524161, except by doing\nbash\ncomposer global require -dev dealerdirect/phpcodesniffer-composer-installer\nwhich was why I was hesitant. Is/was there a global require in your ~/.composer/composer.json?. Okay, I'm just puzzled what's triggering the lookup. It'd be nice to nail it.. Okay it must be in your ~/.wp-cli/packages/vendor/composer/installed.json for some reason (as it's not in ~/.composer/composer.json and wouldn't be in ~/.wp-cli/packages/composer.json) - I think.\n(A topical little twist in light of https://github.com/wp-cli/package-command/issues/43 is that the git hub user is the mixed-case DealerDirect...). Sorry forgot to go back to it after waiting for Travis to complete.. The PHP 5.3 issue is to do with it not having a PHP_BINARY define I think, so WP_CLI::get_php_binary() needs to be updated to fall back to PHP_BINDIR as well - will push a fix for it.... Oh just noticed that FeatureContext has its own version of get_php_binary() - that should probably be updated as well.... Ha and also be made static.... I think you've just mixed up the spec there at the end - the dist:precise is missing from the 5.3 one and there's a duplication which belongs to the deploy bit.. > What are you referring to?\nIgnore me. Thought there was duplication as previously the deploy was on PHP 5.3.. So maybe just forget about the \"wp-cli/db-command\": \"dev-15-after-wp-config-load\" change to composer.json and merge the db-command change https://github.com/wp-cli/db-command/pull/57 and just restart the builds when they fail?! Will try it.... Yes maybe do it immediately after 1.4.1 is released.... Hmm looking at the patch I had it would break backward compatibility not just for bundled commands (which is dealable with, if tedious) but for any external code that uses the behat test suite - is that acceptable?. > In what way?\nAs it stands it changes WP_CLI\\Process to throw an error if stderr (as opposed to STDERR) is non-empty, so some And I run steps need changing to And I try steps and the expectation that the return code will be non-zero (or not) needs to be explicitly specified...will do PR anyway.... My guess is that your mysql server mysqld as at localhost and the mysql user apb does not exist on it or has insufficient privileges - see https://dev.mysql.com/doc/refman/5.7/en/adding-users.html. You're confusing 2 different users - the mysql user and the WordPress user - and 2 different hosts - the mysql host and your site domain. They have nothing to do with each other. The original error message you got\nERROR 1045 (28000): Access denied for user \u2018apb\u2019@\u2019localhost\u2019 (using password: YES)\nis a MySQL error and apb@localhost refers to the mysql user and mysql host ( <dbuser>@<dbhost>). The mysql user and mysql host are only used by WordPress to connect to the database. They have nothing to do with WordPress users or your site's domain.. Oh ta, forgot to ask for a review agin.. Okay so here's the packages that have changes and need releasing that I can see:\n\n[x] \"wp-cli/checksum-command\": 1.0.6 - 1.0.8 released\n[x] \"wp-cli/config-command\": 1.1.8 released\n[x] \"wp-cli/core-command\": 1.0.9 released\n[x] \"wp-cli/db-command\": 1.3.3 released\n[x] \"wp-cli/entity-command\": 1.2.0 released\n[x] \"wp-cli/export-command\": 1.0.6 released\n[x] \"wp-cli/extension-command\": 1.1.9 released\n[x] \"wp-cli/media-command\": 1.1.4 released\n[x] \"wp-cli/package-command\": 1.0.11 released\n[x] \"wp-cli/scaffold-command\": 1.1.2 released\n[x] \"wp-cli/search-replace-command\": 1.2.0 released\n[x] \"wp-cli/handbook\": needs release 1.5.0. Seems to be a time delay with the dash - checksum was closed 30 odd minutes ago and just closed embed and no change.... Thanks @grappler, so there doesn't seem to be a solution currently?\n\nIf possible could you raise an issue about it when you have the time on https://github.com/wp-cli/scaffold-command/issues. > Is this actually the case though?\nThose tests that do an And I run step that produce non-empty stderr will fail until adjusted - a simple example is those that use the --debug flag, eg in package-command/features/package-install.feature#L31.. > But they're only fail after I run wp scaffold package-tests\nSorry, yes (I think!).. Cool. How do you want to deal with fixing the test breakages in the bundled commands? If you want to split them out and assign them I'm good for several hours now.... Okay I'll start going through them alphabetically.... Yeah it's missing the @github-api tag, and GITHUB_TOKEN isn't defined for automated tests by the look.. > **Something got really slow too :(\nI think a lot depends on Travis load but yeah, various of the suites need some major work to speed them up - a obvious target is the repetitive downloading which could be cached in a lot of cases.... Cool (surprised to be honest!).\n\nWhere? WordPress core, plugin, and theme downloads are cached, unless the cached is purged.\n\nI'll respond to this soon, after some fact-checking!. Thanks @richardbuff ! Will do PR on https://github.com/wp-cli/handbook. Ok a lot of instances have been changed thanks to @DrewAPicture and others, but probably not all, so am thinking of removing this from the 1.5.0 milestone @schlessera ?. Thanks for the report @CommanderxDoge, have confirmed this on git bash on Windows 10.\nThe problem is in Subcommand::prompt():124 when readline() isn't available and it uses stream_get_line() with ending PHP_EOL - changing this to \"\\n\" works on git bash and on cygwin bash and DOS box.. Taking the liberty here of also documenting the use mentioned in https://github.com/wp-cli/search-replace-command/pull/55#issuecomment-350175945. One job for the merge build for \"features/bootstrap.feature:213\" on Then the HTTP status code should be 200 failed with\ncURL error 7: Failed to connect to localhost port 8080: Connection refused\nwhich might be caused by the PHP built-in server not having started yet, so might be worth doing a sleep( 1 ) after starting the server in FeatureContext::start_php_server() to help avoid this.\nRestarting build.... Now one job for \"features/help.feature:90\"  doing wp core download failed with\nError: Failed to get url 'https://downloads.wordpress.org/release/wordpress-4.9.1.tar.gz.md5': cURL error 28: Operation timed out after 10000 milliseconds with 0 bytes received.\nRestarting build.... Thanks @paulgibbs , confirmed this on a Windows 10 VirtualBox by renaming the PHP install directory to have a space in it.\nget_php_binary() in WP_CLI\\runcommand needs to be escapeshellarg()ed. There's also https://bugs.php.net/bug.php?id=49139 that needs to be catered for. \nThis plus various other fixes get the phpunit tests running on Windows 10, which would be a good baby step to get an Appveyor CI for WP-CLI set up, apart from fixing this immediate issue. PR incoming.. Yes I looked at doing this before, and faltered when it became clear that it requires quite a bit of rejigging of FeatureContent.... WP-CLI itself should work without mbstring (or intl) being enabled (although you'll get degraded UTF-8 results), so maybe one of your plugins or themes is using mbstring functions without checking first?. > If the plugins required mbstring, wouldn't that mean that the WordPress website would be broken on the front-end\nPhp on the command line usually uses different php.ini and conf.d ini files than the server does, so an extension could be enabled on the server and not on the command line.\nDid anything appear in your error_log?. I can't reproduce this on Windows 10 with (downloaded from http://windows.php.net/download):\nPHP 7.1.12 (cli) (built: Nov 23 2017 04:34:08) ( ZTS MSVC14 (Visual C++ 2015) x86 )\nor\nPHP 7.2.0 (cli) (built: Nov 29 2017 00:17:00) ( ZTS MSVC15 (Visual C++ 2017) x86 )\nor with their x64/NTS versions (or with PHP 7.0) evoking either the nightly or stable wp-cli.\n\nI suspect that the following while loop runs endlessly\n\nI doubt it....:). Okay have reproduced with PHP 7.2.0 on a Windows 7 virtualbox - will report back when I set up cygwin/git/composer etc...!. Okay the \"Not enough memory.\" error is actually being printed by the Windows 7 more.com program. It does this when wp-cli is run from cmd.exe, but not when run from the Cygwin Terminal.\nThe issue appears to be related to the console code page, as there's extra processing for this in PHP 7.1+ that wasn't in PHP 7.0, and apparently more.com doesn't support Unicode (65001). Setting the code page on the command line with chcp 1252 fixes it on cmd.exe, as does adding these lines to Help_Command::pass_through_pager() in \"php/commands/help.php\" after setting the $pager variable:\nif ( Utils\\is_windows() && 'more' === $pager && version_compare( PHP_VERSION, '7.1', '>=' ) ) {\n    sapi_windows_cp_set( 1252 );\n}\nSo this might be worth doing, though it'd be better if it also determined that it was on Windows 7 and only do it then...\nAnother way around it if you have cygwin installed is to set the PAGER environment variable eg\nSET PAGER=C:\\cygwin64\\bin\\less\nOr just run under the Cygwin Terminal (didn't try Git Bash).. Shucks thanks!\n\nDo you think it makes sense to add a fix for this in WP-CLI, as you suggested?\n\nI think so, as being able to display help is so important. Also found out there's a PHP_WINDOWS_VERSION_MAJOR constant available so can make it specific to < Windows 10.\n(I've actually done a fair bit to get the phpunit tests and (most of) the behat tests working on Windows 10 and on appveyor (Windows Server 2012 R2) so will be doing some PRs related to that soon... concentrating on getting https://github.com/wp-cli/embed-command/issues/18 in at the moment with a review/PR incoming very soon...). Cool, will merge as soon as Travis stops messing about. Might create a Windows 8 virtualbox and check it out before release if poss.... Was thinking about allowing numbers in standard variable names (except at start), as it's a bit of a gotcha?. > adhere to POSIX\nEven better!\n\nI wonder though whether digits were left out because of a technical reason further down the pipe...?\n\nIt's good it's restrictive as it makes special processing such as here possible, but I can't think of any issue that could arise by allowing digits...\n. Made that digits change. Also added steps.feature to test it.\nRe latter there's some changes to steps I needed to make to get behat running on Windows where it wasn't obvious that the behaviour wasn't comprised or slightly different so it'll good to have this to \"test the tests\", plus could act as documentation/examples.\n. Closed via https://github.com/wp-cli/wp-cli/pull/4604.\n. Looks interesting, thanks for pointing it out. Certainly something to consider for 1.5.0. I'd guess creating a second copy of the GPG (rather than renaming, for BC) with extension .phar.asc would be the way to go.... Yes for hierarchical taxonomies such as categories need to give ids due to this wp-includes/post.php#L4131 check casting the array to ints.\nSo need to update the docblock, and check and give warnings (errors?) if given non-int category ids., for both post create and post update.\nThanks for raising the issue @killown !\nEdit: as an enhancement, we could look up and resolve the category names/slugs, which would be nice.. Thanks @BhargavBhandari90, could you add tests, for both the single and multisite scenarios in db-tables.feature with given eg\nAnd I run `wp db query \"CREATE TABLE xx_wp_posts ( id int );\"`\n    And I run `wp db query \"CREATE TABLE wp_xx_posts ( id int );\"`\n    And I run `wp db query \"CREATE TABLE wp_posts_xx ( id int );\"`\nand check STDOUT does/doesn't contain xx  as appropriate, plus variations of the wildcard in wp db tables '*_posts', with various options etc?!\n. Hmm, I think the wildcard case needs to be put through the same filtering as the non-wildcard case. This is what I'm using locally (testing single site only and default options only for the moment):\n``\n  Scenario: List database tables on a single WordPress install\n    Given a WP install\n    And I runwp db query \"CREATE TABLE xx_wp_posts ( id int );\"And I runwp db query \"CREATE TABLE wp_xx_posts ( id int );\"And I runwp db query \"CREATE TABLE wp_posts_xx ( id int );\"`\nWhen I run `wp db tables`\nThen STDOUT should contain:\n  \"\"\"\n  wp_users\n  wp_usermeta\n  wp_posts\n  wp_comments\n  wp_links\n  wp_options\n  wp_postmeta\n  wp_terms\n  wp_term_taxonomy\n  wp_term_relationships\n  \"\"\"\nAnd STDOUT should not contain:\n  \"\"\"\n  xx\n  \"\"\"\n\nWhen I run `wp db tables --format=csv`\nThen STDOUT should contain:\n  \"\"\"\n  wp_users,wp_usermeta,wp_posts,wp_comments,\n  \"\"\"\nAnd STDOUT should not contain:\n  \"\"\"\n  xx\n  \"\"\"\n\nWhen I run `wp db tables '*_posts' --format=csv`\nThen STDOUT should be:\n  \"\"\"\n  wp_posts\n  \"\"\"\nAnd STDOUT should not contain:\n  \"\"\"\n  xx\n  \"\"\"\n\nWhen I run `wp db tables 'wp_post*' --format=csv`\nThen STDOUT should be:\n  \"\"\"\n  wp_postmeta,wp_posts\n  \"\"\"\nAnd STDOUT should not contain:\n  \"\"\"\n  xx\n  \"\"\"\n\n``. Hmmm. My understanding - this is all without the--all-tablesoption being set - would be thatwp db tables 'wp_'should only return tables registered to$wpdb, regardless of the wildcard. Sowp db tables 'wp_'andwp db tables` should return the same thing.\nA real-world example is the woocommerce plugin, which creates quite a few tables (eg woocommerce_order_items, wp_woocommerce_tax_rates etc) but only registers two: woocommerce_payment_tokenmeta and woocommerce_order_itemmeta. So one gets:\n$ wp db tables\nwp_users\nwp_usermeta\nwp_posts\nwp_comments\nwp_links\nwp_options\nwp_postmeta\nwp_terms\nwp_term_taxonomy\nwp_term_relationships\nwp_termmeta\nwp_commentmeta\nwp_woocommerce_payment_tokenmeta\nwp_woocommerce_order_itemmeta\nMy expectation would be that wp db tables 'wp_woocommerce_*' would give only:\n$ wp db tables 'wp_woocommerce_*'\nwp_woocommerce_payment_tokenmeta\nwp_woocommerce_order_itemmeta\n@schlessera have I got this right?!?\nOne could argue that this breaks BC though, which may be an issue.... Yes, I think the code needs to be refactored to put the filtering done based on the passed-in $assoc_args in a function (similar to the way the $get_tables_for_glob is at the moment), and then applied whether $args given or not. Note that the current behaviour is broken even without wildcards, for instance:\n$ wp db tables wp_nonexistent_table\nwp_nonexistent_table\n!!!\nFor BC there might be a case to add an option --restrict-args (or similar) that gives the new behaviour if set, otherwise gives the old behaviour. But this isn't pretty and given the above buggy behaviour probably not a good idea.... As discussed with @BhargavBhandari90 in slack (and thanks for all your work so far!), I'm closing this is favor of https://github.com/wp-cli/wp-cli/pull/4624. Thanks for the PR @tiagohillebrandt but there's already a PR outstanding for this issue https://github.com/wp-cli/wp-cli/pull/4604 so I'll close this one.. Close via https://github.com/wp-cli/wp-cli/pull/4610. Yes, apologies for the misleading comment @thrijith, although the output does look a lot better (though could do without the header). Please note this isn't a high priority at the moment so won't be reviewed immediately and may not make 1.5.0.. > will remove the header.\n@thrijith if instead you have time to investigate https://github.com/wp-cli/scaffold-command/issues/109 and whether the output is compliant in other cases apart from the taxonomy one you fixed that would very much be appreciated!. @thrijith am going to leave this PR out of 1.5.0 but will revisit shortly afterwards, ta!. @thrijith re headerless table, at the moment need to workaround limitations of Utils\\format_items(), WP_CLI\\Formatter and cli\\Table so maybe do\n$table = new \\cli\\Table;\n            $table->setRows( $info );\n            $table->setRenderer( new \\cli\\table\\Ascii );\n            $lines = array_slice( $table->getDisplayLines(), 2 ); // Remove header and border.\n            foreach ( $lines as $line ) {\n                \\WP_CLI::line( $line );\n            }. You don't seem to be running WP-CLI via the command line php CLI, see https://github.com/wp-cli/wp-cli/issues/1346.. Might as well do this I think in spite of https://github.com/wp-cli/wp-cli/issues/4617 in case it's being used externally.. Oh okay, so just remove the call to wp_cache_flush() and keep the checks on the properties?. Removing this from the 1.5.0 milestone in favor of https://github.com/wp-cli/wp-cli/issues/4638. @schlessera I forgot to discuss this in office hours. It's something I'd really like to happen for 1.5.0 but that seems unlikely now, so should be removed from the milestone?. Can't reproduce this using a WP 4.9.1 site, wp core check-update --minor returns 4.9.2. If I artificially edit wp-includes/version.php to be 4.7.8 I get 4.7.9 returned.\n\nHow is the version actually checked in the DB or in the file system?\n\nIt uses core functions wp_version_check() and get_site_transient( 'update_core' ).. Hi @scarstens, yes your right, it's a bug, it's just taking the last but one dir name, instead of what's before archive. Thanks for pointing it out. I'm going to create a new issue on the wp-cli/extension-command repo for it, and will close this then.... Closing in favor of https://github.com/wp-cli/extension-command/issues/80. Hi @killown, no, there's no way at the moment, and I'm guessing unlikely to be in the future... Is doing it in one statement important to you?!. Ah I see, very good. Will open the issue on the wp-cli/entity-command repo as an enhancement request and close this issue.... I should add that if https://github.com/wp-cli/wp-cli/issues/4616 were implemented then that would be an alternative method of updating lots of meta at once.... Closing in favor of https://github.com/wp-cli/entity-command/issues/132. Thanks for the PR @tiagohillebrandt! Although marked for the 1.5.0 milestone, this issue isn't a priority at the moment so it may take a little while before your PR is reviewed.. > Isn't this better than waiting for Travis to build, and then having to come back ground to it?\nNo!. Removing this from the 1.5.0 milestone in favor of https://github.com/wp-cli/wp-cli/issues/4638\nEdit: doh, meant to do it to https://github.com/wp-cli/wp-cli/issues/4616. Cool, I'll do some though if the opportunity arises.. Just noting we never added tests for this.. Ta @swissspidy.. Merging this for now to try out on https://github.com/wp-cli/db-command/pull/79.. @AaronHolbrook I followed your steps and couldn't reproduce it. The composer.lock generated was the exact same as the one you posted. I suppose something to do to debug what's happening would be to add a dump of the autoload functions:\nerror_log( __FILE__ . \" spl_autoload_functions=\" . print_r( spl_autoload_functions(), true ) );\nto wp-content/mu-plugins/app/app.php after the require_once __DIR__ . '/vendor/autoload.php'; line and compare the failing phar case to the succeeding git case...\n. Ok it's probably easiest if I close this and use the other one.. Was https://github.com/wp-cli/wp-cli/pull/4634. Thanks very much @kirtangajjar !. Close via https://github.com/wp-cli/wp-cli/pull/4623. Closing this as doesn't need any changes re wp-config-transformer.\nHowever I think composer.lock info needs to be written to the phar so it's known exactly which packages it contains so will do a PR for make-phar.php for that.\nEdited: (For instance db-command Version 1.2.4 is in WP-CLI 1.4.1 although Version 1.3.0 was released before WP-CLI 1.4.1 - probably stale composer.lock gotcha.). For ref, the Travis merge for PHP 7.2 job failed with\nThe \"http://packagist.org/p/provider-2017%2421bb2d8cd3a3a3e705654c14ad365ec3747205a9b4f4e269089f2e745fdba374.json\" file could not be downloaded (HTTP/1.1 404 Not Found)\nfor steps features/bootstrap.feature:203 and features/bootstrap.feature:213, restarting job.\nEdit: so no deployment.. This should be removed from the 1.5.0 milestone now?. So leave this for now and do manually as you suggest on slack some time after release?. Well I think it's just simpler to program, to escape once for the local shell and once for the remote. Is it causing an issue?. Thanks @thrijith but your merged PR https://github.com/wp-cli/wp-cli/pull/4610 will cover it when 1.5.0 is released as the README is generated from the docblocks, so it will be updated then (hopefully!), so I'll close this.\nBut if you think of anything else let us know!. Could you open separate issues for each of these on https://github.com/wp-cli/media-command/issues instead @killown  (or one issue on https://github.com/wp-cli/ideas/issues)?. Strange error alright.\n\nIs there any way to get any more detailed info to track this stray ? down?\n\nYou could create a require file, eg wp-config-dump.php:\n```\n<?php\nWP_CLI::add_hook( 'before_wp_config_load', function () {\n    echo WP_CLI::get_runner()->get_wp_config_code();\n} );\nand then do `wp option get siteurl --require=wp-config-dump.php` to see what WP-CLI is evaling.. Ah okay the initial `<?php` isn't getting stripped for some reason, so this regex `'|^\\s*\\<\\?php\\s*|'` is failing. I'm thinking there may be invisible non-whitespace characters before the `<?php` - and the first one that jumps to mind is a `BOM`. Could you do\nhexdump -C wp-config.php| head -1\n``\nand see if there's stuff before the<?php(it'll beef bb bfforBOM)? (And if so remove using your favourite (hex) editor!). Good stuff @wpbullet ! We should probably change that [regex](https://github.com/wp-cli/wp-cli/blob/v1.5.0/php/WP_CLI/Runner.php#L573) to'/^[\\x00-\\x20\\x80-\\xff]*<\\?php/'or similar to deal with cases like this.. The standard solution reless -ris to set thePAGERenvironment variable to what you want. This needs to be documented explicitly I think, as it's a common issue https://github.com/wp-cli/wp-cli/search?q=busybox&type=Issues&utf8=\u2713. It might also make sense to have aENVIRONMENT VARIABLESsection after theGLOBAL PARAMETERS` section in the help.\nAlso I'm wondering if the -r option shouldn't just be removed, as I don't think any help docblocks use (or should use) color escape sequences.\nRe detecting if on Busybox, as it can be installed standalone on any repo (it is on my Ubuntu 17.04 for instance), your example wouldn't work unfortunately. Googling shows a number of other possible methods, but I'm wondering if the SHELL variable could be used? It's set to /bin/ash on a VirtualBox Alpine I half-installed, which although just a symlink to /bin/busybox seems a good bet as being distinctive enough (mind you PAGER is also set to less so not sure why that isn't working for other instances such as yours). (Edit: also could do a realpath on the SHELL.). > Also I'm wondering if the -r option shouldn't just be removed, as I don't think any help docblocks use (or should use) color escape sequences.\nAh just occurred to me that escape sequences are used to bold the section headers commands/help.php#L91 so that's why it's used. However a better option would probably be to use the LESS environment variable to set options, which is recognized by GNU and macOS less.\n. Can't reproduce this. Might be something wrong with your local setup. Does\ncurl -LO https://github.com/wp-cli/wp-cli/releases/download/v1.5.0/wp-cli-1.5.0.phar\nwork for you?. Thanks for reporting anyway @ajitbohra (and for closing!).. @edubacco was wondering if there were other errors thrown prior to the one reported above? I'm struggling to see how $wpdb->dbname could be empty. Also if you have the time could you post the wp-config.php for the site in question (with sensitive info redacted)? Ta either way!. @pdobrescu thanks, could you post the wp-config.php being used (with sensitive info redacted)? Also could you expand on what the custom setup is?. Thanks @zacscott , but could you post your wp-config.php please, it would help a lot. (The \"fix\" in a sense here is easy, just check whether $wpdb->dbname is empty, but how $wdb->dbname would be empty is puzzling to me, especially if no previous errors are thrown.). > We are using HyperDB\nAh thanks @zacscott , that explains your case at least as it doesn't select a database on construction (ie call wpdb::db_connect()) and that isn't catered for in Utils\\wp_get_table_names(). Will look at a fix tomorrow or over the weekend, ta!. Hi @pdobrescu, thanks for the feedback, no, the wp-config.php isn't needed anymore ta, if you don't think it'll help.\n\nI remember that we had another case where $wpdb->dbname was empty, so we'll also be looking into that.\n\nAnother case not involving search-replace? Utils\\wp_get_table_names() is also used by the commands db tables, db size and db search so the case you remember may be one of them.\nSo that's 2 of the 3 reports using HyperDB. Its use may also explain @edubacco 's comment\n\nor specify the blogs.\n\nthough as wp-includes/wp-db.php is drop-in replaceable a generalized solution is probably needed.. Thanks @kirtangajjar ! (Mea culpa - PR incoming.). Ta @kirtangajjar , it's failing and giving output because mac tar outputs verbosely to STDERR. Fix incoming.... Thanks @kirtangajjar . Not 100% sold on the philosophical argument but these are poor tests as they're never run on the phar so should have been fixed with https://github.com/wp-cli/wp-cli/pull/4597. Will refactor as behat tests.. Well I find the whole bundled versus framework division artificial. But that should be part of the Great Package Debate following on from the last office hours.... Thanks for reporting @acki. Your suggested solution of using a random runtime ID sounds good to me, so eg in Utils\\extract_from_phar() would have\n$tmp_path = get_temp_dir() . uniqid( \"wp-cli-extract-from-phar-\", true ) . \"-$fname\";\n(Used in server-command also so would need to check there but should be ok.). Thanks @benoitchantre , yes looks like a bug, am going to move this to entity-command where Site_Command lives.... Closing in favor of https://github.com/wp-cli/entity-command/issues/143. It's unusual for iconv() not to be enabled but it seems like a bug in vendor/symfony/console and vendor/symfony/translation in that they require symfony/polyfill-mbstring and call mb_encoding_convert() which uses iconv() but don't require symfony/polyfill-iconv.\n@roscom you should also get them to install the PHP extension mbstring (and preferably intl) if possible for performance and reliability reasons anyway.. I can't reproduce this. Could you post the output of wp cli info please @SergeC , and also try running the command(s) with the --debug flag?\n(Just to note the error message at Scaffold_Command.php#L1097 should use $template_path not $template). Okay this is a weird bug which depends on how your WP-CLI phar is named and where it resides, and follows from https://github.com/wp-cli/wp-cli/pull/4024 so is present from v1.2.0 on. It doesn't arise if your WP-CLI phar has a .phar extension or if it's not in your pwd (PHP getcwd()) path.\nSo as a temporary workaround if you rename your v1.5.0 /Users/sergey/Desktop/catalog/wp-cli phar to /Users/sergey/Desktop/catalog/wp-cli.phar then the issue should go away, or if you move it to say /usr/local/bin or anywhere not under your current working directory, in which case you don't need the .phar extension.. @lkraav this doesn't look like the same issue to me. Could you create a new issue for this? (Though I note that woocommerce memberships is a paid-for plugin so it will be difficult to reproduce/test. Also standard woocommerce commands seem to work ok (on limited testing).). Ok this is failing due to https://github.com/wp-cli/wp-cli/pull/4613, and this check in CLI_Command::update()  at CLI_Command.php#L325 for WP-CLI version: (note colon at end). Which answers this question https://github.com/wp-cli/wp-cli/pull/4613#issuecomment-357598216\n\nI wonder if people use the output from wp cli info for scripting purposes. \n\nwith \"Yes! We do!\".\nProbably better to revert https://github.com/wp-cli/wp-cli/pull/4613 than to modify the check...?. Yes! just tracked this down to this recent change https://core.trac.wordpress.org/ticket/42299 in trunk which gets around a bug in WP_Site_Query::query() that doesn't ignore domain__in when given empty arg and which will probably be properly addressed by https://core.trac.wordpress.org/ticket/42252\nHave PR ready!...\n. Weird though in this case if iconv() is enabled, hard to make sense of it.... @holisticnetworking would it be possible for you to install the PHP extension xdebug so that a stack backtrace is generated on the error in order to debug further what's happening here?. Just wanted to see what was calling mb_strwidth() to cause the error you're getting at Mbstring.php#L534. With xdebug installed, should get a Stack trace which will show what's calling it. Only need to run WP-CLI with it enabled on the command line...\n(May not give much more info, to be honest, but may build a PHP with iconv disabled if have further clues...). @holisticnetworking if you could post the output of wp cli info it'd be useful as well ta.... Hmm, just noticed you said you've got xdebug already installed! Could you do php --info | grep xdebug to be sure?!. Okay reproduced the error message with a PHP with iconv() disabled (and xdebug installed):\n```\nFatal error: Uncaught Error: Call to undefined function Symfony\\Polyfill\\Mbstring\\iconv() in phar:///home/mburke/bin/wp/vendor/symfony/polyfill-mbstring/Mbstring.php:534\nStack trace:\n0 phar:///home/mburke/bin/wp/vendor/symfony/polyfill-mbstring/bootstrap.php(46): Symfony\\Polyfill\\Mbstring\\Mbstring::mb_strwidth('Table', 'ASCII')\n1 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/cli.php(345): mb_strwidth('Table', 'ASCII')\n2 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/Colors.php(200): cli\\strwidth('Table', 'ASCII')\n3 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/table/Ascii.php(138): cli\\Colors::width('Table', false, 'ASCII')\n4 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/Table.php(146): cli\\table\\Ascii->row(Array)\n5 phar:///home/mburke/bin/wp/vendor/wp-cli/php-cli-tools/lib/cli/Table.php(125): cli\\Table->getDisplayLines()\n6 phar:///home/mburke/bin/wp/vendor/wp-cli/search-replace-command/src/Search_Replace_Command.php(376): cli\\Table->display()\n7 [i in phar:///home/mburke/bin/wp/vendor/symfony/polyfill-mbstring/Mbstring.php on line 534\n``\nso I think the PHP you're using must haveiconv()disabled, despite the results ofphp --ri iconv` posted.\nGiven that according to\n\nRelated: symfony/polyfill#66\n\nnot including the iconv polyfill is deliberate Symfony policy, maybe adding a check to WP-CLI to warn if both iconv and the mbstring aren't available is something to be considered, to avoid this user experience...\n(May also gird myself up to raise an issue/PR about this at Symfony as it's poor behavior really...). My fault, didn't revert https://github.com/wp-cli/wp-cli/pull/4613 yet.. @aaronjorbin if you try it now it should work (2.0.0-alpha-1c6a5bd).. Bah bad timing automated-tests - just killed it temporarily until this deploys.... Thanks @swiffer. Could you try doing\nexport SSL_CERT_FILE=phar://wp-cli.phar/vendor/rmccue/requests/library/Requests/Transport/cacert.pem\nand see if it fixes it? If so will reopen in package-command as that might be the easiest workaround.\nThe list of things that Composer tries can be seen here CaBundle.php#L64.. Thanks for the feedback @swiffer , will close this in favor of https://github.com/wp-cli/package-command/issues/72. Thanks for the report anyway @mister-cairns , we're very interested in improving memory usage in WP-CLI  so if you have the time to post some more info it would be appreciated:\n\nWhat did you have to set the memory limit to?\nThere should have been a PHP error message in your error_log. If so, could you post this please?. Yes, it only parses one of wp-cli.local.yml, wp-cli.yml in that order. You could simulate the behaviour you want by doing:\n```yaml\n\nwp-cli.local.yml\n_:\n  inherit: wp-cli.yml\n@two:\n  ssh: baz\n  user: qux\n``. A bit premature to be doing this isn't it? I think this should be reverted pending discussion and preparation.... Wellscaffold package` will have to be updated and then all the packages for a start. Nothing can be built at the moment. Plus it's not clear to me this should be a hard requirement anyway. > Does that block this?\nThis blocks building packages.\n\nCan you point me to this issue?\n\nSee https://github.com/wp-cli/extension-command/pull/89 and https://github.com/wp-cli/scaffold-command/pull/131 plus any other attempt to build a package now.\n\nCan you clarify further?\n\nThere is nothing in WP-CLI that requires PHP 5.4 for it to run. So a hard requirement is artificial.. Overriding send_site_admin_email_change_email works for me, eg with no_admin_email.php:\n```php\n<?php\nWP_CLI::add_hook( 'after_wp_load', function () {\n    add_filter( 'send_site_admin_email_change_email', '__return_false' );\n} );\n```\nwp option update admin_email 'email@example.com --require=no_admin_email.php\n\nit would be good to be able to pass --skip-email option\n\nMight be something to consider, though it's very specific to admin_email.. Thanks for the report @diegomagikal . Using UTF-8 in PHP arguments doesn't work on Windows for PHP <= 7.0, however it will work for PHP >= 7.1, as it was fixed as part of Support for long and UTF-8 path. A workaround for PHP <= 7.0 is to use the --prompt option:\nbash\necho \"Per\u00edcias Cont\u00e1beis\" | wp post create --post_type=page --post_status=publish --prompt=post_title\nThis issue should probably be added to https://make.wordpress.org/cli/handbook/common-issues/. > copied it from latest the WP Core\nAh cool, somehow I wasn't aware of this function wp_normalize_path(). There's a trunk version that deals with PHP stream wrappers changeset [42387] but we can ignore that for now I think.\nIf you could copy the core test also, to tests/test-utils.php, it'd be good.\n\nI didn't modify any other functions\n\nThat's fine, will be done in another PR.\n\nI think it's great that we now have this normalization function\n\nAbsolutely!. Just to note the Travis failure for the trunk job is due to this recent change https://core.trac.wordpress.org/ticket/43228. @ericgopak Just to note we also have to wait for the trunk issue to be resolved (or if that takes too long workaround it - which is easy to do but better if we don't).. O cool, wot a system! Have done that https://github.com/wp-cli/wp-cli.github.com/pull/280. Ah I see - changed to env var.. Will do.. Maybe a test arg like is_windows( $test = null ) instead - an env var is a bit \"dangerous\"?!. Okay will do.. I'm thinking though as long as a \"\\n\" is in the EOL, then this is safer - unless the files are Mac formatted circa 1990s with a single \"\\r\"! If it is Windows \"\\r\\n\" then the existing code is agnostic to that, so works regardless of file format.. That was actually the way I tried it first off, but it makes the PHP 7.1 job very long, whereas there's some parallelism doing it separately (and you get early failure in the first key case) - but it's much of a muchness - I'll put it into the existing job and see what you think.. No, that was running the whole thing with save_comments disabled, sorry missed that. Do you mean just run it on a subset of the features? (The tag @require-opcache-save-comments is only to avoid a test.). The test tagged @require-opcache-save-comments can't be run with opcache.save_comments disabled - I'm not getting you.. It depends on the context though. I found 4 cases where PHP_EOL is being used in similar contexts (ie parsing a file): https://github.com/wp-cli/wp-cli/blob/master/features/steps/given.php#L75, https://github.com/wp-cli/wp-cli/blob/master/features/bootstrap/support.php#L146, https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/DocParser.php#L158 and https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Dispatcher/Subcommand.php#L279 - in all 4 cases it would be better (ie more portable) to use \"\\n\" instead of PHP_EOL - as is done for instance in get_longdesc() https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/DocParser.php#L56.. Cool, I'll remove the job - that only leaves the Great Newline Debate... I left the tag in the \"bootstrap.feature\" test as a sort of reminder/comment. That and the passing of WP_CLI_PHP_ARGS in FeatureContext::get_process_env_variables() are unnecessary now - should I remove them?. Missing \"https://\" in the two urls here.. (Using this solution yes as the 1.2.1 version will hit the rate limiting as it doesn't cache.). Could you use the (unnatural, hard to read & pointless) \"yoda\" style here to conform to WPCS?. Me taking out this is probably the issue.. I'll remove the arg and rename the method _run_command_and_exit() and have the case after the 1st help attempt just use run_command( args...).. Ok.. Well if it does find the command then it doesn't return...if it doesn't then it does...then find_command_to_run() runs the same loop as find_command_to_help() so it will fail too and return a suggestion...100%!. Because it's a poor relation of what find_command_to_run() is doing.... I've changed it now to use Runner::find_command_to_help() to address https://github.com/wp-cli/wp-cli/pull/4266#discussion_r131228598 fully, and removed find_command_to_help() (previously Help_Command::find_subcommand()) altogether - I'll expand below as the review commenting is getting a bit messy.. Fixed.. Removed amazingly amusing error message and now Help_Command uses Runner::find_command_to_run() so should be 100% confident.. Done and will do.. Done.. Agree, changed.. Changed it to one line \"No WordPress install found. If the command...\".\nThe idea behind mentioning about plugin/theme is to address your comment https://github.com/wp-cli/wp-cli/issues/4265#issuecomment-320046901 where the command could be added in a plugin/theme.. WP 4.6 and higher, as \"wp-settings-cli.php\" has the wbdb->error check and wp_die() after require_wp_db().. Will do.... Was just a bit worried about having a large array - I'll make it a property of the Process as suggested which is nicer.. Yes, STDERR doesn't make much sense - I'll get rid of it and make STDOUT the default always, keeping the error_log option (my preference).. Having before_wp_load is an issue as it won't detect commands added in plugins/themes. Actually, this is an issue for cmd-dump as well as the whole CLI_Command class is marked as before_wp_load. So I think the before_wp_load needs to be removed from the CLI_Command class and added to the individual commands, except for this command and cmd-dump, where after_wp_load should be used.. See below.. It'd be simpler just to do $args = explode( ' ', implode( ' ', $_ ) ); which allows any old arg format.. It'd be nicer to make prefixing with wp optional by doing if ( 'wp' === $args[0] ) { array_shift( $args ); }. Re-using Runner::find_command_to_run() would make sense here:\nWP_CLI::halt( is_array( WP_CLI::get_runner()->find_command_to_run( $args ) ) ? 0 : 1 );\nmaking the recursive_search() function below and the command_to_array() call above unnecessary.. In general in-function comments shouldn't be docblocks and if they're one liners should use // I think.. Oh, ok - I'll open an issue re individual function whens not being honoured if there's a class when as it probably needs discussion.. It was just an oversight by me not to yodafy $depth-- === 0 to 0 === $depth--, there's nothing logic-wise against it.. It's called in a lot of places - do mean just in invoke_proc() https://github.com/wp-cli/wp-cli/blob/v1.4.1/features/steps/when.php#L7?. Hmm, that would make the code a bit yuck, which usually isn't a good sign. Is the BEHAT_RUN check not exclusive enough?. I'll add it as a new function run_check_stderr() - that should keep us both happy.... Noticed that if you change this to something that will get replaced, eg wp search-replace example bar --network then Search_Command will throw a PHP fatal as it relies on the WP functions esc_sql() (and like_escape()) being available so will need to shim these in Search_Command.\n. I haven't followed the logic but it's probably some multisite peculiarity in loading - if you make that change to the test do you see the fatal?. They're trivial functions so I'll do a PR on search-command with them copied in.... Ok - will hold fire.... Cool. (Shimming those functions might still be something to consider as it leaves search-replace only dependent on $wpdb, which could be useful.). Yes, looks funny too - will remove underscore from all.... Good point. Need also to always set @less-than-wp tags in those cases I think... hack incoming.... Ha, very good point! This means that the @less-than-php tags are also wrong.. Changed @less-than-wp to do the right thing, and also changed @less-than-php as well for consistency.\nAlthough the latter is technically a BC break it doesn't cause us issues as it's just compared against (at most) the major/minor version, and unlikely to cause others issues either. Removed unnecessary use in features/cli.feature also anyway.\n. Extra space before the \"The\". Also could you expand the comment to\nOptional. The interval in milliseconds between updates. Default 100.\n?. Well, it'd be nice, but probably not worth it!. Could you move this block before $runner = WP_CLI::get_runner(); please?\nAlso might as well give as much info as possible so:\n$system_os = sprintf( '%s %s %s %s', php_uname( 's' ), php_uname( 'r' ), php_uname( 'v' ), php_uname( 'm' ) );\n(only leaving out host name 'n' which people mightn't want exposed)?. So this system_architecture line would go.. I think just $shell for the variable - \"current\" doesn't add anything. Also could you use getenv() instead and for Windows use ComSpec if SHELL not available:\n$shell = getenv( 'SHELL' );\nif ( ! $shell && Utils\\is_windows() ) {\n    $shell = getenv( 'ComSpec' );\n}. So this line system_architecture goes.. And this becomes:\n'shell' => $shell,. Thinking just shorten Operating System to OS.. And this line system_architecture goes.. And this line becomes:\nWP_CLI::line( \"Shell:\\t\" . $shell );\nAlso could you move both lines to the start, before PHP binary? Seems more logical to me and looks slightly better...\n(The formatting here with tabs isn't good and we should be using a table but we'll leave it for the moment...). Yeah, I've become a bit of a Windows guru over the last few weeks (don't use it locally or for servers)! ComSpec always returns path to cmd.exe, even on PowerShell, so isn't that great but looks a bit better anyway.... Cool, thanks @thrijith !. To be picky this should be if ( ! is_string( $argument ) || 0 === strlen( $argument ) ) { to deal with if given '0'.. Ha, I merged because we've so many bugs, PRs and other stuff outstanding and release is 8 days from now!. Sorry just to be \"modern\" could you change this to:\nif ( ! is_string( $argument ) || '' === $argument ) {\nplease? (My fault).. Removing the extra space after the equals will satisfy the wpcs sniff, so '' ===  $argument goes to '' === $argument (hard to see on github!).. I think it would be better to do this as\nget_temp_dir() . uniqid( \"wp-cli-extract-from-phar-\", true ) . \"-$fname\";\nto keep the extension the same.. The wp-cli- bit though is covered by the arg to uniqid(). To add my nitpicks, can just remove this comment \"Allows for WIndows network shares.\" (taken from the since I see) as it's covered above. Also maybe add Copied from core wp_normalize_path(). or similar, and access public and category System tags as in for instance trailingslashit().. ",
    "marcaddeo": "I've removed it completely now, and the functionality still works!\nAs far as the deprecation warning goes, I think that may be out of the scope of my pull request and understanding of the project :)\nWould love to see this get merged in and into nightly as soon as possible, as I'm relying on nightly now for the server command.\n. ",
    "GCorbel": "That was it. Thanks for your help. It could be nice to create the directory if it doesn't exist.\n. ",
    "tersmitten": "We have to same problem. This occurs when we set options:\nwp-cli --allow-root --no-color --path='/var/www/example.com/www/public_html' option update 'comments_notify' '0'\nThe output is always:\nSuccess: Value passed for '####' option is unchanged\nI must say we use W3 Total Cache and the problem is gone when we disable that. Is there any way to fix this problem on the wp-cli side?\n. Both object and database cache\n. I thought I fixed the problem doing this, but options still are not set :-(\n. Sorry.\n- wordpress 4.5\n- no multisite install\nThe problem seems to occur when I omit the --skip-update setting of wp user import-csv.\nAll other commands that we use work just fine.\n. Thanks! I'll see if this resolves the error.\n. Some related issues:\n- https://github.com/wp-cli/wp-cli/issues/2680\n- https://github.com/wp-cli/wp-cli/issues?q=is%3Aissue+W3+Total+Cache+is%3Aclosed\n. ",
    "Fizzadar": "Weird, still happening here on 0.19.2:\nvagrant@blog:/opt/wordpress$ wp --info\nPHP binary: /usr/bin/php5\nPHP version:    5.5.9-1ubuntu4.11\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.19.2\nvagrant@blog:/opt/wordpress$ wp plugin install advanced-excerpt --version=4.2.2 --path=/opt/www/wordpress\nError: Can't find the requested plugin's version 4.2.2 in the WordPress.org plugin repository (HTTP code 0).\n. ",
    "kminh": "Not sure if it's a bug, but after I run my tests all tables in test database are still there.\n. My bad should have extended the WP_UnitTestCase class.\n. ",
    "duritong": "The cli ui looks like:\n```\nwp language list | grep -v uninstalled\nlanguage    english_name    native_name status  update  updated\nde_DE   German  Deutsch installed   available   2015-09-04 18:46:16\nen_US   English (United States) English (United States) active  none    \nwp core language update\nSuccess: Translations updates are not needed for the 'English (US)' locale.\n```\nHowever, the wordpress looks like:\n\n. ",
    "middlesister": "+1 for this.\nI have a site that has two languages installed, but the active language is en_US\nAfter updating anything - core, plugin or theme - i need to\nwp core language activate sv_SE\nwp core language update\nwp core language activate en_US\nI now do it every time after an update as a routine, since I don't want to bother with going to the admin UI to see if there are new translations. If there would be a way to automate this further I would be happy.\n. ",
    "fazen": "@middlesister , same problem here, but I can't update!\nwp core language activate it_IT; wp core language update\ngives:\nSuccess: Language activated.\nSuccess: Translations updates are not needed for the 'English (US)' locale.\n. ",
    "apermo": "+1 I have the same issue.\nI would be fine having the option to use (if it existed):\nwp core language update --locale=de_DE\n. ",
    "danlasota": "OK. So, if a user exists in multisite, then how do you go about adding them to a particular blog then? (or another way of thinking about it is, assigning another role on an additional blog.\n. Thanks Dan. I have been pouring through the docs, I must have filtered out the set-role subsection for the user commands. I didn't think to even look in there.\n. That's it. Thanks very much!\n. > You may also have some hooks firing on user creation that are slowing things down. This seems pretty slow. How many users do you have to import in total?\nThis is an academic environment. New student registrations. About 400-500 new class registrations per semester. A big portion of the students already have usernames in multisite though.\nI am retrieving account names and blog memberships (class registrations) from the institutional registration system. It gets updates every hour as people get enrolled through self actions via the web, through instructor adds, and through the old fashioned way of people walking up to a counter and having a clerk manually add them. I'd like to run my import script about every hour.\nI realize that its inefficient to have a script that keeps trying to add users who already exists in terms of cpu, but its efficient in scripting time...\n\nHave you considered wp user import-csv to get around WordPress load time?\nI would consider it, but again, I'm looking at it handling a mix of users who already have accounts/usernames.\n\nIt might be nice if there is a way to have wp-cli just take usernames and 'try' to add them. If the user already exists in the network, fine. Just add them to the particular blog. If they already exist at the particular blog, fine, do nothing.\n. I will check that out.\nOver lunch I thought of a strategy to check for the existence of a user on the SQL side in the wp_users tables. If they are in there, I change the role. If zero rows are returned, I need to add them.\nThanks.\n. ",
    "veganista": "Sorry i should have been a bit clearer. \nI'm trying to install my plugin system wide, but was unsure where to put the files as i have installed via homebrew.\nJust looking for a \"this is what i would do\" kind of answer\n. ",
    "mattclegg": "Ok, no problem. I was just having a problem installing community commands for all users until I found that you can specify WP_CLI_CONFIG_PATH manually. I'll add this to the docs.\n. It is to solve having to use \"--url\" by defaulting to whatever url is in the database (without having to know whatever that maybe) https://github.com/wp-cli/wp-cli/issues/2215\n. It removes the requirement to have 'DOMAIN_CURRENT_SITE' defined in wp-config. Additionally when migrating a database between different urls then the url in the database might not match.\nFor example:\nIf I have a multiple urls of the same site. ie production and test;\n- http://www.example.com\n- http://test.example.com\nI can copy the database from 'www' to 'test' and then I want to update the site work under the new url by running something like; wp --network search-replace http://www.example.com http://test.example.com\nHowever wp-cli will fail saying \"Error: Site  not found.\" I need to use the --url parameter even though the url in the database might be completely unrelated to what is in wp-config.\n. It causes the same problem for any wp-cli plugins that also rely on --url so it's not just specific to wp search-replace.\nIs there a problem with loading with loading the url from the database if one hasn't been defined?\nI can create a Behat test case if this helps?\n. Ah yes, you are correct. It's weird that in the documentation there is a & before $pipes to suppress errors of it not being defined.\n. Oh yeah sorry, I think I need another coffee..\n. ",
    "philcook": "Basic details of\npath: public_html/\nurl: http://wizzi.dev\nuser: admin\ntheme-name: wizzi\ncore download:\n  locale: en_GB\ncore config:\n    dbname: wizzi\n    dbuser: root\n    dbpass:\ncore install:\n    title: Wizzi\n    admin_user: admin\n    admin_password: password\n    admin_email: admin@admin.dev\nWould also be nice if it did the plugin names and then was able to loop on this to install when another developer comes to work on the project\nplugin install:\n  - breadcrumb-navxt\n  - contact-form-7\n  - scripts-to-footerphp\n  - wp-scss\n  - https://github.com/wp-sync-db/wp-sync-db/archive/master.zip\n  - https://github.com/wp-sync-db/wp-sync-db-media-files/archive/master.zip\n. Hi @danielbachhuber \nFirstly, sorry if I am not explaining it correctly. We could create these YML files manually however we have hundreds of wordpress sites created before using WP CLI.\nTherefore as and when we come to work on these projects again it would be good to have a command to run on the production server that would generate this YML file from the existing site. Commit that to the repo and then the developers pulls this down to a local repo on their machine.\nThen to setup their local environment they then run a few WP CLI commands based off that YML file.\nThis is just a time saving feature request to save the manual creation of the YML file from a pre-existing wordpress site.\n. ",
    "jaggedsoft": "I am in fact trying to install wordpress into an empty directory. I'm currently switched to that directory and I run 'wp core update'. This command has worked for months and I'm not sure why it's doing this since I updated.\n--debug is also not helping to explain the situation. No different:\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpress or run wp core download. (I've tried --path, no change.)\nMy issue seems to happen due to core.php's version(). It's looking for wp-includes/version.php and it doesn't exist yet. The folder and all before it are permissions 0755.\n. It's wp core download ..my mistake.\n/home/jaggedsoft/nextlocal/nextlocal.ca\n/home/jaggedsoft/nextlocal/nextlocal.me\n/home/jaggedsoft/nextlocal/nextlocal.io\n/home/jaggedsoft/nextlocal/nextlocal.us\n/home/jaggedsoft/nextlocal/nextlocal.net\n/home/jaggedsoft/nextlocal/nextlocal.solar\n/home/jaggedsoft/nextlocal/staffing-agency.io\n/home/jaggedsoft/nextlocal/contractor.best\n/home/jaggedsoft/nextlocal/electrician.best\n/home/jaggedsoft/nextlocal/garage-door.io\n/home/jaggedsoft/nextlocal/mortgage-agent.io\n/home/jaggedsoft/nextlocal/mortgage-broker.io\n/home/jaggedsoft/nextlocal/locksmith.best\n/home/jaggedsoft/nextlocal/plumber.best\n/home/jaggedsoft/nextlocal/pest-control.best\nAnd I keep all my customer hosted sites in /home/jaggedsoft/nextlocal/hosted/\nIn this case I wanted to create a new domain, /home/jaggedsoft/nextlocal/nextlocal.solar\nI navigate to the new folder I just created, and try wp core download and the result is this:\njaggedsoft@nextlocal:~/nextlocal/nextlocal.solar# wp core download\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpress or run wp core download.\nI have since created my own shell script to download and install Wordpress, I just thought I'd let you know that myself and some of my friends have started running into this bizarre issue and I can not explain it.\n. The directory structure has correct ownership/group and permissions all the way down. I've also tried as root:\nroot@nextlocal:~/nextlocal/nextlocal.solar# wp core download --allow-root --force --debug\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpress or run wp core download.\nroot@nextlocal:~/nextlocal/nextlocal.solar#\nThere is nothing else in the directory. Thanks for looking in to this. If you need me to test anything, it's not a problem.\n. Nope, newly created directory with correct permissions and ownership. I mean, it does now, but it didn't then.\nPHP binary:     /usr/bin/php5\nPHP version:    5.6.13-0+deb8u1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.20.0\nJust for kicks, updated to WP-CLI version 0.20.1. System Linux 3.16.0-4-amd64 #1 SMP Debian 3.16.7-ckt11-1+deb8u3 (2015-08-04) x86_64 GNU/Linux\nHere's a new directory and I'm testing as root:\nroot@nextlocal:/home/jaggedsoft/nextlocal/multisite/nextlocal.pw# ls -a\n.  .. (empty)\nroot@nextlocal:/home/jaggedsoft/nextlocal/multisite/nextlocal.pw# wp core download --allow-root --force --debug\nError: This does not seem to be a WordPress install.\nPass --path=`path/to/wordpress` or run `wp core download`.\nroot@nextlocal:/home/jaggedsoft/nextlocal/multisite/nextlocal.pw#\nAll of those paths leading down to /home/ have correct ownership and permissions as well. And none of them contain an index.php.\nFor some more kicks, I went down to / my root directory and experience the same issue:\nroot@nextlocal:/# mkdir wordpress && chmod 0777 wordpress && cd wordpress\nroot@nextlocal:/wordpress# wp core download --allow-root\nError: This does not seem to be a WordPress install.\nPass --path=`path/to/wordpress` or run `wp core download`.\nThanks for helping to figure this out. There is no rush, but I would really like to know why this is happening.\n. I understand but I would still like if you could add more debugging information to help figure out why\n. If you would like an alternative to wp core download, this will create a new wordpress install in your current directory named 'wordpress'\nwget https://wordpress.org/latest.tar.gz && tar -xzvf latest.tar.gz\n. Just to confirm, this happens for me in a brand new, completely empty directory, whether I'm root or not. My permissions for every folder are 0775. (rwx rwx r-x) and all owned by the correct user.\nThe output of wp core download --debug for me is:\nDebug: No readable global config found (0.016s)\nDebug: No project config found (0.017s)\nDebug: ABSPATH defined: /home/jaggedsoft/nextlocal/hosted/nextlocal.website/ (0.037s)\nError: This does not seem to be a WordPress install.\nPass --path=`path/to/wordpress` or run `wp core download`.\nThe output of wp --info for me is:\nPHP binary:     /usr/bin/php5\nPHP version:    5.6.17-0+deb8u1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.22.0\nIs there any command to skip the version check? Can we add one for testing?\nCould we please re-open this and drop the state:unconfirmed tag now that there's at least 3 people experiencing this?\n. > Are you able to reproduce in another environment? it only reproduces in maybe one other environment.\nMyself, prosti, GavinCS above all have the same issue. I cannot speak about them but I'm running on a pretty ordinary debian installation off of digitalocean. Of course PHP is installed.\nOn line 747 of core.php you will see:\nif ( !is_readable( $versions_path )\nThe issue is you're triggering an error if you want to install in a blank folder, because is_readable is returning false since there is no \"wp-includes/version.php\"\nDoes that make sense?\n/home/jaggedsoft/nextlocal/hosted/nextlocal.website/ exists, it's an empty folder. Therefore is_readable() on that folder is true.\nHowever, is_readable() fails on /home/jaggedsoft/nextlocal/hosted/nextlocal.website/wp-includes/version.php because wp-includes is not a folder (yet)\nwp core download should work on completely empty folders, should it not?\n. ",
    "GavinCS": "I can confirm that I am having the same issue.\nI am running  wp core download in an empty directory and receive the same error message\n. ",
    "prosti": "I can confirm the same running wp core download in an empty directory. I receive the same error message.\nMy wp --info\nPHP binary: /usr/bin/php5\nPHP version:    5.6.11-1ubuntu3.1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.22.0\n. Hello,\nI my case I must to say I don't have this problem any more. I had a script and I think it was a typo...\nlike wp core downlaod. It was my bad. Sorry.\n. ",
    "wonder32": "for me wp cli threw this when I tried commands against a mounted network drive..\nbut it works when the wordpress setup is on the local machine\n. ",
    "mikejolley": "@shivapoudel The code which handles switch_theme and admin notices is loaded only in when is_admin() is true, and after init hook is fired. I assume CLI doesn't load admin?\n. ",
    "davidbarratt": "@danielbachhuber,\nCan you define a remote host like this?\nhttps://github.com/drush-ops/drush/blob/master/examples/example.aliases.drushrc.php#L336-L337\nor even a local root?\nhttps://github.com/drush-ops/drush/blob/master/examples/example.aliases.drushrc.php#L334\nMaybe I just don't undertand the current alias system.\n. @danielbachhuber why would it be discouraged within a docker container? The entire thing is sandboxed anyways.\nEvery other CLI has to run as root anyways (composer, npm, etc.). @danielbachhuber well the only alternative would be to run as the Apache user (www-data), which would be less secure.. ",
    "nightelf": "\"Must-use plugins (a.k.a. mu-plugins) are plugins installed in a special directory inside the content folder and which are automatically enabled on all sites in the installation.\" ( https://codex.wordpress.org/Must_Use_Plugins ) No need to \"install\" must-use plugins. They are installed just by putting them in the directory. ",
    "torounit": "+1\n. Thanks Marge and Review and Fix!\n. @danielbachhuber Thanks review!\nrevert my change and chekout phpunit/data only. \n. I have also felt the same problem.\nSorry, but not know how to tie the version number and the \"latest\".\nIn addition, in the case of plugins, \"Tested up to:\" is in the Readme.txt.\nSo I think should be tested in the explicit version. What do you think?\n. ",
    "a1exus": "@danielbachhuber it's intermittent issue. I am using standard theme (twentyfifteen 1.3).\n. sorry, i meant to say intermittent issue, which means it doesn't always happens and it's hard to replicate...\n. ``\n[alexus@j ~]$ for i in PHP_BINARY WP_CLI_PHP_USED WP_CLI_PHP ; do export $i=which php` ; done\n[alexus@j ~]$ sudo wp cli update\nPassword:\nYou have version 0.20.0. Would you like to update to 0.20.1? [y/n] y\nDownloading from https://github.com/wp-cli/wp-cli/releases/download/v0.20.1/wp-cli-0.20.1.phar...\n php: not found\n\nError: The downloaded PHAR is broken, try running wp cli update again.\n[alexus@j ~]$ \n. I would assume that also wouldn't work, since `wp cli update` didn't work at the first place...\n.\n[alexus@j ~]$ wp cli version\nWP-CLI 0.21.0-alpha-a2f40ae\n[alexus@j ~]$ sudo wp cli update\nSuccess: WP-CLI is at the latest version.\n[alexus@j ~]$ \n``\n. @danielbachhuber,wp cli updatedidn't work so using (or not)--nighlywouldn't make any difference, and since I pulled nightly manually, now both works (with or without--nightly`).\n[alexus@j ~]$ sudo wp cli update --nightly\nYou have version 0.21.0-alpha-a2f40ae. Would you like to update to the latest nightly? [y/n] y\nDownloading from https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar...\nNew version works. Proceeding to replace.\nSuccess: Updated WP-CLI to the latest nightly release\n[alexus@j ~]$\nThanks!\n. right, the problem was that wp cli update wasn't working (that's the idea behind this issue), so after you guys fixed it and i pulled that nightly manually, now it will work for me)\n. ",
    "jasonhai": "I've a same problems on it. Please help to to resolve it :(. Thanks...\n. ",
    "cesarizu": "@danielbachhuber  I just tested this and, for me it's not working:\n```\nDebug (bootstrap): No readable global config found (0.012s)\nDebug (bootstrap): Using project config: /home/user/src/project/wp-cli.local.yml (0.012s)\nDebug (bootstrap): No package autoload found to load. (0.048s)\nDebug (bootstrap): ABSPATH defined: /home/cesar/src/project/ (0.048s)\nDebug (bootstrap): Begin WordPress load (0.049s)\nDebug (bootstrap): wp-config.php path: /home/cesar/src/project/wp-config.php (0.049s)\nPHP Notice:  Undefined index: DATABASE_URL in phar:///home/cesar/bin/wp/php/WP_CLI/Runner.php(941) : eval()'d code on line 21\nPHP Notice:  Undefined index: user in phar:///home/user/bin/wp/php/WP_CLI/Runner.php(941) : eval()'d code on line 28\nPHP Notice:  Undefined index: pass in phar:///home/user/bin/wp/php/WP_CLI/Runner.php(941) : eval()'d code on line 31\nPHP Notice:  Undefined index: host in phar:///home/user/bin/wp/php/WP_CLI/Runner.php(941) : eval()'d code on line 34\nPHP Fatal error:  Uncaught Error: Call to undefined function mysql_connect() in /home/user/src/project/wp-includes/wp-db.php:1522\nStack trace:\n0 /home/user/src/project/wp-includes/wp-db.php(658): wpdb->db_connect()\n1 /home/user/src/project/wp-includes/load.php(371): wpdb->__construct(NULL, NULL, '', NULL)\n2 phar:///home/user/bin/wp/php/WP_CLI/Runner.php(1085): require_wp_db()\n3 /home/user/src/project/wp-includes/plugin.php(235): WP_CLI\\Runner->WP_CLI{closure}(true)\n4 phar:///home/user/bin/wp/php/wp-settings-cli.php(91): apply_filters('enable_wp_debug...', true)\n5 phar:///home/user/bin/wp/php/WP_CLI/Runner.php(962): require('phar:///home/ce...')\n6 phar:///home/user/bin/wp/php/WP_CLI/Runner.php(904): WP_CLI\\Runner->load_wordpress()\n7 phar:///home/user/bin/wp/php/wp-cli.php(21): WP_CLI\\Runner->start()\n8 phar:///home/user/bin/wp/php/boot-phar.php(5): include('phar:///home/us...')\n9 /home/user/bin/wp(4): include('phar:///home/u in /home/user/src/project/wp-includes/wp-db.php on line 1522\nFatal error: Uncaught Error: Call to undefined function mysql_connect() in /home/user/src/project/wp-includes/wp-db.php:1522\nStack trace:\n0 /home/user/src/project/wp-includes/wp-db.php(658): wpdb->db_connect()\n1 /home/user/src/project/wp-includes/load.php(371): wpdb->__construct(NULL, NULL, '', NULL)\n2 phar:///home/user/bin/wp/php/WP_CLI/Runner.php(1085): require_wp_db()\n3 /home/user/src/project/wp-includes/plugin.php(235): WP_CLI\\Runner->WP_CLI{closure}(true)\n4 phar:///home/user/bin/wp/php/wp-settings-cli.php(91): apply_filters('enable_wp_debug...', true)\n5 phar:///home/user/bin/wp/php/WP_CLI/Runner.php(962): require('phar:///home/us...')\n6 phar:///home/user/bin/wp/php/WP_CLI/Runner.php(904): WP_CLI\\Runner->load_wordpress()\n7 phar:///home/user/bin/wp/php/wp-cli.php(21): WP_CLI\\Runner->start()\n8 phar:///home/user/bin/wp/php/boot-phar.php(5): include('phar:///home/us...')\n9 /home/user/bin/wp(4): include('phar:///home/u in /home/user/src/project/wp-includes/wp-db.php on line 1522\n```\nMy wp-config.php contains: \n```\n//  Heroku Postgres settings - from Heroku Environment  //\n$db = parse_url($_ENV[\"DATABASE_URL\"]);\n//  MySQL settings - You can get this info from your web host  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', trim($db[\"path\"], \"/\"));\n/* MySQL database username /\ndefine('DB_USER', $db[\"user\"]);\n/* MySQL database password /\ndefine('DB_PASSWORD', $db[\"pass\"]);\n/* MySQL hostname /\ndefine('DB_HOST', $db[\"host\"]);\n```\n. ",
    "danimalweb": "Found the wordpress test directory where its supposed to be in /tmp. My bad. Closing issue.\n. Also confirming same issue: https://travis-ci.org/lambdacreatives/tofino/jobs/84341056\n. ",
    "a7127cff69cab32e5c4723e8446e21c4b7325dc": "@danielbachhuber can you offer some more insight?  I'm not sure regex is the way to go either, but I would be interested in your reasoning, or even your opinion on the general approach of whitelisting definitions and declarations.\n. It does seem that the test array does not work well with the exclusion of the ABSPATH conditional, so I am working on fixing that.\n. @danielbachhuber It seems we need a real php parsing method for this then, do you have any preferences or should I just experiment?\n. Thanks @danielbachhuber I'll see what I can do to figure this out.\n. ",
    "spectranets": "Thanks! It's a simple thing and I can't believe it took me a few hours to figure out what was going on. I am sure others may struggle with the same issue depending on the passwords they use. Cheers! Amazing project keep up the good work.\n. ",
    "bbrdaric": "Ah, somehow I overlooked that line of code :)\nThis is the output of wp core update-db --network\nDatabase upgraded successfully on xxx1\nWarning: Database failed to upgrade on xxx2\nDatabase upgraded successfully on xxx3\nDatabase upgraded successfully on xxx4\nWarning: Database failed to upgrade on xxx5\nDatabase upgraded successfully on xxx6\n...\nSuccess: WordPress database upgraded on 1677/1708 sites.\nNow I see that these sites where db upgrade fail are all archived or deleted.\nI have (sub)domain mapping set for them eg. xxx1.mydomain.com so when site is deleted or archived, subdomain is removed and from that moment, that site is not accessible.\nCould that be the issue here? I also have that problem when doing \"manual\" network upgrade from network admin panel, so in order to upgrade these sites, I need to archive / delete them before.\nI have also looked westonruter/multisite-network-upgrade command and what I see is that only sites that are not archived / deleted / spam are being upgraded.\n. You mean WordPress core?\n. But in core, just active sites are upgraded (not archived, spam and deleted), right? I think WP-CLI should follow core behavior on this.\nThe problem is, when I run wp core update-db --network the notice won't dissappear, so I have to run manual network update from browser which will then remove it (because it won't try to upgrade archived / spam / deleted sites).\nCurrent approach also has potential performance issue on networks with large number of such sites, network upgrade will take considerably more time than really needed.\n. It works really nice now :+1: \nDatabase upgraded successfully on xxx1\nDatabase upgraded successfully on xxx2\nDatabase upgraded successfully on xxx3\nDatabase upgraded successfully on xxx4\nDatabase upgraded successfully on xxx5\nDatabase upgraded successfully on xxx6\n...\nSuccess: WordPress database upgraded on 1099/1099 sites.\nwp core update-db --network  203,37s user 36,34s system 43% cpu 9:08,13 total\nThank you for this great tool and support!\n. Hmm, good idea, tried that also (editing wp-config.file to remove fancy lookup), but then it clashes with domain mapping plugin\nbsamardz@srv:/usr/share/wordpress$ wp themes list --debug\nDebug: No readable global config found (0.01s)\nDebug: No project config found (0.011s)\nDebug: ABSPATH defined: /usr/share/wordpress/ (0.012s)\nDebug: Begin WordPress load (0.012s)\nDebug: wp-config.php path: /usr/share/wordpress/wp-config.php (0.012s)\nPHP Warning:  Creating default object from empty value in /usr/share/wordpress/wp-content/sunrise.php on line 10\nPHP Fatal error:  Call to undefined method stdClass::escape() in /usr/share/wordpress/wp-content/sunrise.php on line 11\n. ",
    "srguglielmo": "I'm seeing this issue on WP-CLI 0.23.0.\nI upgraded WP core using wp core update. Then I ran wp core update-db --network to update the database for all sites on my network. It cycles through all the sites and prints a success message:\n\"Database upgraded successfully on ...\"\nand finally ends with:\n\"Success: WordPress database upgraded on 1952/1955 sites\"\nHowever, in the admin dashboard on any of the sites on my network, it is still prompting me to update.\n\n\nRunning wp core update-db --network a second time does not get rid of the notice.\nRed Hat Enterprise Linux Server release 5.11\nPHP 5.3.3 (we have plans to upgrade the entire server & PHP  in progress)\nWordPress 4.5.2\nWP-CLI version: 0.23.0\nNo packages in wp-cli\n. Ah, didn't realize that. Thanks!\n. Hm, I originally thought this was the issue (I had been using a private browsing window, but I think it still uses cookies from the non-private browsing).\nHowever, I just tried it again and logged out completely, then tried to navigate to the site. I'm getting the same result. Here's what I did:\n1. Log in as netadmin.\n2. Find a site to test on and determine site ID.\n3. Log out.\n4. Browse to site. It works.\n5. wp site deactivate $id\n6. Browse to site. It works. Refresh, clear browser cache, still works.\n7. Log in as netadmin.\n8. Find site (it is marked as deleted now with a red background).\n9. Activate site then immediately deactivate site.\n10. Log out.\n11. Browse to site. It says \"This site is no longer available.\"\n. It's not vanilla. It's a pretty active site with various plugins and theme modifications. Since you can't reproduce it, I'm going to assume it's an issue specific to my site.\nThanks!\n. @danielbachhuber Any estimate when the bug will be fixed? Not to rush you; I'm trying to plan for a project and will need to handle things a different way if it will be a few weeks before a fix. If you can point me to the proper location in the code, I'd be happy to try to fix it and send a pull request.\n. I'm not familiar with behat or functional tests, but I added a scenario.\n. Closed. Multisite-specific limit.\n. ",
    "Justin-Maxwell": "Hi, thanks.\nI've cloned down the git, but I'm at a bit of a loss how to now install it on the hosting site.\nFor now, I've created a script, that seems to do the job.  Through some form of black magic, tab-completion half works...  I'm well outside my comfort zone, so any tips appreciated.  \n```\n!/bin/bash\n/usr/bin/php-5.4-cli ~/usr/bin/wp-cli \"$@\"\nbash-3.2$ wp ex[tab][tab]\ncli completions --line=wp ex --point=5  export \nbash-3.2$ wp ex\n```\n```\nbash-3.2$ echo $PATH\n/usr/local/bin:/bin:/usr/bin:/var/sites/s/staging.tibdit.com/usr/bin\nbash-3.2$ which php\n/usr/local/bin/php\n```\n. Agree - I'd suggest some short additional instructions though, especially\naround the use of the WP_CLI_PHP var, and other ways to 'hardcode' which\nphp executable to run (i.e. basically just explaining what you've set out\nabove)\nCheers.\n[image: tibdit icon] http://www.tibdit.com/ tibdit\nhttp://www.tibdit.com/\n@tibdit on twitter http://www.twitter.com/tibdit\nFacebook page https://www.facebook.com/pages/tibdit/470144859751000\nGoogle+ page https://plus.google.com/+tibditMicropayments/posts\njustin maxwell ceo & founder\n@Justin_Maxwell_ http://twitter.com/Justin_Maxwell_\nlinkedin.com/in/tibditJustin\nOn Mon, Sep 28, 2015 at 8:57 PM, Daniel Bachhuber notifications@github.com\nwrote:\n\nClosed #2095 https://github.com/wp-cli/wp-cli/issues/2095.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/2095#event-421160158.\n. \n",
    "360Zen": "I was able to get this to work using sudo -u www-data  -- wp <command> instead of sudo -u www-data -i -- wp <command>\n. ",
    "grantnorwood": "Using the Roots.io Trellis stack (Ubuntu 14.04 Trusty LTS, Nginx, MariaDB, PHP 5.6 + Composer, WP-CLI, sSMTP, Memcached, Fail2ban, ferm)\nHere's my wp --info:\nshell\nPHP binary: /usr/bin/php5\nPHP version:    5.6.13-1+deb.sury.org~trusty+3\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   \nWP-CLI project config:  /srv/www/example.com/current/wp-cli.yml\nWP-CLI version: 0.20.1\nUsing WP 4.3.1.  No caching plugins installed, but here's my plugin list:\nshell\n$ wp plugin list --status=active\n+----------------------------+--------+--------+----------+\n| name                       | status | update | version  |\n+----------------------------+--------+--------+----------+\n| advanced-custom-fields-pro | active | none   | 5.3.0    |\n| taxonomy-terms-order       | active | none   | 1.4.6.1  |\n| geoip-detect               | active | none   | 2.5.2    |\n| gravityforms               | active | none   | 1.9.13.7 |\n| members                    | active | none   | 1.0.2    |\n| multiple-post-thumbnails   | active | none   | 1.6.6    |\n| pods                       | active | none   | 2.5.5    |\n| taxonomy-images            | active | none   | 0.8.0    |\n| wordpress-seo              | active | none   | 2.3.5    |\n+----------------------------+--------+--------+----------+\nLet me know if you need anything else!\n. I honestly haven't come back to this, but I can take another look in a couple days.\nMy wp-cli.yml file simply contains:\nyaml\npath: web/wp\nThank you for following up, Daniel!\n. ",
    "nonameolsson": "This isn't solved for me :-/ I can't do this on my development machine, nor on the staging and production server. I get the same error messages as above.\nDoes this work for you?. ",
    "johnfitz00": "I was also getting the Error: Could not update option 'blog_public'. error and unable to get wp option update blog_public 1 to work.\nFor anyone coming across this problem, I found a solution that worked for me:\nwp db query \"UPDATE $(wp db prefix)options SET option_value = 1 WHERE option_name = 'blog_public';\". ",
    "steelbrain": "Is it going to stay that way or are we going to add support for it?\n. ",
    "bretweinraub": "use $PAGER ! ;)\n. ",
    "mvattuone": "I'm confused.  I've never required this anywhere directly, AFAIK.  I don't seem to recall having to do anything special to have wp server work before.  \nGoing to dig into older issues but... yeah, not really sure what to do.\n. Oh jeez, I see what you mean.  Forgive my denseness there.\nWe're good!  Thanks Daniel.\n. ",
    "AndrewCloss": "After deleting the directory and rerunning the script this is the output:\n- install_wp\n- '[' -d /tmp/wordpress/ ']'\n- mkdir -p /tmp/wordpress/\n- '[' latest == latest ']'\n- local ARCHIVE_NAME=latest\n- download https://wordpress.org/latest.tar.gz /tmp/wordpress.tar.gz\n  ++ which curl\n- '[' /opt/lampp/bin/curl ']'\n- curl -s https://wordpress.org/latest.tar.gz\n- tar --strip-components=1 -zxmf /tmp/wordpress.tar.gz -C /tmp/wordpress/\n- download https://raw.github.com/markoheijnen/wp-mysqli/master/db.php /tmp/wordpress//wp-content/db.php\n  ++ which curl\n- '[' /opt/lampp/bin/curl ']'\n- curl -s https://raw.github.com/markoheijnen/wp-mysqli/master/db.php\n- install_test_suite\n  ++ uname -s\n- [[ Linux == \\D\\a\\r\\w\\i\\n ]]\n- local ioption=-i\n- '[' '!' -d /tmp/wordpress-tests-lib ']'\n- mkdir -p /tmp/wordpress-tests-lib\n- svn co --quiet http://develop.svn.wordpress.org/trunk/tests/phpunit/includes/ /tmp/wordpress-tests-lib/includes\n  svn: E000110: Unable to connect to a repository at URL 'http://develop.svn.wordpress.org/trunk/tests/phpunit/includes'\n  svn: E000110: Error running context: Connection timed out\nLooks like it's on my side. I'm working behind a firewall but I did set a system-wide proxy.\n. It looks like the deleting the empty /tmp/wordpress folder fixed it. Thanks for the help!\n. ",
    "kraftbj": "Correction (and fully describing since I butchered talking about it in #core):\ndevelop.svn -- the full development repo.. (currently 4.4-alpha-33636-src)\ncore.svn - build versions (build.trac.wordpress.org as a frontend).\n. ",
    "tianon": "~~Was the public key for these artifacts ever published anywhere?  It appears to have short ID 2F6B6B7F, but it's not on the keyservers and I can't seem to find any other mention of it.  Any chance it could be pushed somewhere for verifying these artifacts? :pray: (or I could be linked to where I missed it? :innocent:)~~\nsee https://github.com/wp-cli/wp-cli/issues/2919#issuecomment-222678309 / https://github.com/wp-cli/builds/blob/gh-pages/wp-cli.pgp\nI think it's probably also worth pointing out that the .gpg artifacts included in the existing wp-cli releases are full signed copies, so the best way to verify/use them (once that key gets shared to the keyservers) would be something like this:\n```console\n$ wget -O wp-cli.phar.gpg 'https://github.com/wp-cli/wp-cli/releases/download/v1.0.0/wp-cli-1.0.0.phar.gpg'\nonly need to download the single \".phar.gpg\" artifact since it contains the original with a signature\n$ gpg --keyserver ha.pool.sks-keyservers.net --recv-keys 3B9191625F3B1F1BF5DD3B47673A02042F6B6B7F\ndownload the public key -- also available at https://github.com/wp-cli/builds/blob/gh-pages/wp-cli.pgp\n$ gpg --batch --decrypt --output wp-cli.phar wp-cli.phar.gpg\nthis should take \"wp-cli.phar.gpg\" and extract from it the signed bits into \"wp-cli.phar\"\n$ chmod +x wp-cli.phar\nready for use! (move/rename to suit personal taste)\n```\nIn the future, it might be worth considering switching to detached signatures instead, so that the workflow becomes instead:\n\ndownload wp-cli.phar and the associated detached signature\ngrab the public key to verify from somewhere\nverify the file's signature (gpg --batch --verify wp-cli.phar.asc wp-cli.phar, for example)\nprofit :moneybag: \n\nhttps://www.gnupg.org/gph/en/manual/x135.html#AEN160 has a bit about that, but generally it'd be changing from\ngpg --output wp-cli.phar.gpg --sign wp-cli.phar\nto something like\ngpg --output wp-cli.phar.sig --detach-sig wp-cli.phar\nor even\ngpg --output wp-cli.phar.asc --detach-sig --armor wp-cli.phar\n(--armor will create a plain-text version rather than a binary signature file). Just found https://github.com/wp-cli/wp-cli/issues/2919#issuecomment-222678309 -- sorry for the noise! :+1:  (hopefully threading this needle forward helps some other future travellers find this info). Sorry if this isn't an appropriate place to ask (happy to re-file elsewhere), but was it intentional for 1.5.1 to not include wp-cli-1.5.1.phar.gpg?\n(Seems to still be included in https://make.wordpress.org/cli/handbook/release-checklist/#updating-the-phar-build, and https://github.com/wp-cli/wp-cli/issues/4647 / #4600 seems to imply it was not intentionally removed and that perhaps might be expanded to also include a detached .asc signature? :pray:)\n:heart:. ",
    "laverboy": "It looks like Spy_REST_Server extends WP_REST_Server but WP_REST_Server does not exist in the latest Wordpress version.\n. It was a clean install. I'll try again though.\n. phew thought it was just me!\n. ",
    "ankitpokhrel": "Confirming same issue: https://travis-ci.org/ankitpokhrel/Dynamic-Featured-Image/jobs/84380375\n. ",
    "bonny": "This is my project/plugin with the same problem:\nhttps://github.com/bonny/WordPress-Simple-History\n. ",
    "kilbot": "Thanks for the fix @danielbachhuber, the updated install-wp-tests.sh worked for me. :raised_hands: \n. ",
    "aendrew": "Hey, I test against WP 3.6.1 and the updated install-wp-tests.sh fails:\nsvn: URL 'https://develop.svn.wordpress.org/tags/3.6.1/tests/phpunit/includes' doesn't exist\nThe command \"bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION\" failed and exited with 1 during .\nI'm rectifying it by updating that to 3.7, but figured you should know.\n. @danielbachhuber Thanks for getting back to me! That's good to know, I don't think I actually run anything on <3.7 but just use it as a way of testing my code still works with older releases. Backwards compatibility in WordPress 'n' all that, y'know? :smile: \n. @misfist I experienced the same thing. You need to delete /private/tmp/wordpress-tests-lib and run install-wp-tests.sh again.\n. ",
    "misfist": "I'm still experiencing the error even after replacing the file with the one posted https://raw.githubusercontent.com/wp-cli/wp-cli/master/templates/install-wp-tests.sh and then re-initializing. \nInstalling...\nRunning as single site... To run multisite, use -c tests/phpunit/multisite.xml\nPHP Fatal error:  Class 'WP_REST_Server' not found in /private/tmp/wordpress-tests-lib/includes/spy-rest-server.php on line 3\nFatal error: Class 'WP_REST_Server' not found in /private/tmp/wordpress-tests-lib/includes/spy-rest-server.php on line 3\n- WP-CLI version: 0.20.3\n- PHPUnit: 4.8.16\n- PHP version: 5.5.27\n. ",
    "donnapep": "@aendrew Followed your suggestion, and deleted that folder and ran install-wp-tests.sh again but got the following error:\nRevision 35499 doesn't match existing revision 35491 in '/srv/www/wordpress-develop/tests/phpunit/includes'\n. ",
    "richardsweeney": "I'm still having this issue on my VVV box. I've updated to the latest wp-cli version, checked the install script file (it's correct), deleted the database, deleted /tmp/wordpress/. I have no /private directory to delete. Help?!\n. ",
    "indietravel": "Good question: internally, we have some development plugins that also have the same prefix, so we'd also use it to kill them/toggle them if this was available. \n. ",
    "dwainm": "Hi @danielbachhuber, thank you for the awesome work you gusy are putting into WP-Cli.\nDo you think it would it be possible to reconsider this? \nWe deal with many plugins in our workflow. Enabling and disabling them all the time. It would be really helpful if we could call:\nwp plugin activate *long-plug*\nThis compared to having to write out 'extremely-long-wordpress-plugin-slug-text'\n. ",
    "Ugoku": "I'd say it's safe to bump it to at least 3.7, since this page suggests lower versions do not get any updates at all, whereas 3.7 might get updates if any bugs found are serious enough.\nJust my two cents as a recent wp-cli user who happened to stumble upon this issue :)\n. ",
    "nbyloff": "@danielbachhuber It is still unsuccessful, but the error is different with v0.20.0. In that version, it doesn't find my domain name, which I believe was fixed in a previous ticket. (See below for output)\nAs far as this bug, it's a command issue I would think? My expected use case was to be able to wp db import from a different environment, then do a wp search-replace old new like you can with a standard Wordpress install. However it appears, the search-replace function does a check to make sure the wp_site and wp_blogs represent the local domain in my config file before it can even update the domains. So essentially in the beginning of the process, it's looking for mydomain.dev in the DB tables, but it hasn't done the replace yet, so it finds stg.mydomain.com, and then errors out before it can replace anything.\nI don't know much about the inner workings, but I would think 1) search-replace should skip this domain check when --network is present so it doesn't fail replacing the old domain because it's already expecting the new domain at that point or 2) add a --force option that allows the user to ignore the failure of finding the correct domain name and continue on updating all tables within the DB.\njavascript\nvagrant@mydomain:/srv/www/mydomain.dev/current$ wp search-replace 'http://stg.mydomain.com' 'http://mydomain.dev' --network --debug\nPHP Warning:  Unterminated comment starting line 22 in phar:///usr/bin/wp/php/wp-cli.php(23) : eval()'d code on line 22\nPHP Stack trace:\nPHP   1. {main}() /usr/bin/wp:0\nPHP   2. include() /usr/bin/wp:4\nPHP   3. include() phar:///usr/bin/wp/php/boot-phar.php:5\nPHP Notice:  Undefined index: HTTP_HOST in /srv/www/mydomain.dev/current/web/wp/wp-includes/ms-settings.php on line 30\nPHP Stack trace:\nPHP   1. {main}() /usr/bin/wp:0\nPHP   2. include() /usr/bin/wp:4\nPHP   3. include() phar:///usr/bin/wp/php/boot-phar.php:5\nPHP   4. require() phar:///usr/bin/wp/php/wp-cli.php:26\nPHP   5. require() phar:///usr/bin/wp/php/wp-settings-cli.php:114\nError: Site  not found.\nvagrant@mydomain:/srv/www/mydomain.dev/current$\n. ",
    "r-a-y": "I'm experiencing the same problem with memcached.\nIf I use wp cron event list and compare it to the cron event list generated by the WP-Crontrol plugin, the list is different.  WP-Crontrol appears to have a more, updated event list even though both wp-cli and WP-Crontrol are using _get_cron_array().. ",
    "e-webstyle": "Thanks guys. That was a cache plugin indeed.\n. ",
    "elnicknamio": "Thanks,\nWP_SITEURL works for me.\nthe solution for me:\n$url => http://localhost/wp_test\nwp core config --dbname=\"$dbname\" --dbuser=\"$dbuser\" --dbpass=\"$dbpass\" --dbhost=\"$dbhost\" --extra-php <<PHP\ndefine( 'WP_SITEURL', '$url' );\nPHP\n\n(@danielbachhuber: the home option had the same value as site_url)\n. ",
    "gbcxjoe": "this worked\nwp core config --dbname=\"$dbname\" --dbuser=\"$dbuser\" --dbpass=\"$dbpass\" --dbhost=\"$dbhost\" --extra-php <<PHP\ndefine( 'WP_SITEURL', '$siteurl' );\nPHP\nthanks\n. variables are entered on the command line and passed to the following. i tried it with and without --path=$SITEPATH\ndownload Wordpress core\nsudo -u $username /wp core download\ncreate wp-config.php file\nsudo -u $username /wp core config --dbuser=$SQLUSER --dbname=$SQLDBNAME --dbpass=$SQLPASS --dbhost=$SQLHOST --dbprefix=$SQLPREFIX\nWordpress install\nsudo -u $username /wp core install --url=$SITEURL --title=\"$SITETITLE\" --admin_user=$ADMINUSER --admin_password=$ADMINPASS --admin_email=$ADMINEMAIL --path=$SITEPATH\nThanks\n. I moved the $sitepath to the bottom of the script and got the same results\n\nSQLHOST=\"localhost\"\nSQLUSER=\"$username\"\nSQLPASS=\"$dbpw\"\nSQLDBNAME=\"$username\"\nSQLPREFIX=</dev/urandom tr -dc '12345abcdefghijaklanopqrstuvwxyz' | head -c4; echo \"_\"\necho Enter Site URL i.e. http://dev.yoursite.com\nread SITEURL\necho the title of the WordPress site i.e. My Big Blog\nread SITETITLE\necho Enter WordPress admin user account login name\nread ADMINUSER\nADMINPASS=</dev/urandom tr -dc '12345qwertQWERTasdfgASDFGzxcvbZXCVB' | head -c8; echo \"\"\necho enter WordPress admin user account email\nread ADMINEMAIL\nSITEPATH=\"/home/$username/public_html\"\ncd $SITEPATH\n. Perfect! that worked\n. Still getting the error in 4.6.1\n. thanks. also found this\nsudo -u annas /wp db export ./annas.sql. ",
    "lukapaunovic": "This is an issue, how do I fix that without this creepy workaround?\nbecause in database site url stays wrong.\nWhy is it adding path if I define site URL via --url. This isn't fixed. This is the script I wrote\nhttps://gist.githubusercontent.com/lukapaunovic/3a8f59f80c8f0ecb15e572a2781b23ae/raw/6ae0643aa570d15adf38c47514d1ac820435347d/create_wp.sh\nsudo -H -u$user /home/$user/wp core install --url=\"$domain\" --title=\"Moj Wordpress\" --admin_user=\"admin\" --admin_password=\"$password\" --admin_email=\"webmaster@$domain\" --path=$WORKINGDIR\nEven though example.com is specified and path is correct.\nThe wordpress for some reasons sets url like\nwww.example.com/public_html\nI do not remember correctly but I know it appends the directory name wp files are in. which is crazy.\nAnd then I need to\nmysql -u$DBUSER -p$PASSWDDB -e \"USE $DBUSER; update wp_options set option_value = 'http://www.$domain' where option_name = 'siteurl';update wp_options set option_value = 'http://www.$domain' where option_name = 'home';\"\n. ",
    "dtolj": "I have dozens of plugins and I want the beauty of a one-liner :(\n. I have the same problem. When I set WP_PROXY_HOST in my wp-config.php and try \"wp plugin install\" it fails. As soon as I comment it out, the plugin is downloaded using the https_proxy env variable. \nI need WP_PROXY_HOST for web interface as well. Whats causing wp to get confused?\nI am using php-7.0.14 and curl-7.29 on rhel7.\n. wp plugin install bbpress --allow-root --debug\nDebug (bootstrap): No readable global config found (0.009s)\nDebug (bootstrap): No project config found (0.009s)\nDebug (bootstrap): No package autoload found to load. (0.048s)\nDebug (bootstrap): ABSPATH defined: /var/www/html/practicalapps/ (0.048s)\nDebug (bootstrap): Begin WordPress load (0.048s)\nDebug (bootstrap): wp-config.php path: /var/www/html/practicalapps/wp-config.php (0.049s)\nDebug (bootstrap): Loaded WordPress (0.461s)\nDebug (bootstrap): Running command: plugin install (0.461s)\nPHP Notice:  An unexpected error occurred. Something may be wrong with WordPress.org or this server&#8217;s configuration. If you continue to have problems, please try the <a href=\"https://wordpress.org/support/\">support forums</a>. (WordPress could not establish a secure connection to WordPress.org. Please contact your server administrator.) in /var/www/html/practicalapps/wp-admin/includes/plugin-install.php on line 164\nNotice: An unexpected error occurred. Something may be wrong with WordPress.org or this server&#8217;s configuration. If you continue to have problems, please try the <a href=\"https://wordpress.org/support/\">support forums</a>. (WordPress could not establish a secure connection to WordPress.org. Please contact your server administrator.) in /var/www/html/practicalapps/wp-admin/includes/plugin-install.php on line 164\nWarning: bbpress: An unexpected error occurred. Something may be wrong with WordPress.org or this server&#8217;s configuration. If you continue to have problems, please try the <a href=\"https://wordpress.org/support/\">support forums</a>.\nSteps to reproduce:\n1) set Define('WP_PROXY_HOST','prxy123.com'); and Define('WP_PROXY_PORT', '8080');\n2) run wp plugin install fails\nConfigs: wp-config.php\nDefine('WP_PROXY_HOST','prxy123.com');\nDefine('WP_PROXY_PORT', '8080');\nenv|grep http\nhttp_proxy=http://prxy123.com:8080\nhttps_proxy=http://prxy123.com:8080\nNo changes to php.ini. php70u-common-7.0.14-2.ius.el7.x86_64\nphp70u-fpm-7.0.14-2.ius.el7.x86_64\nphp70u-pdo-7.0.14-2.ius.el7.x86_64\nphp70u-fpm-nginx-7.0.14-2.ius.el7.noarch\nphp70u-json-7.0.14-2.ius.el7.x86_64\nphp70u-mysqlnd-7.0.14-2.ius.el7.x86_64\nphp70u-cli-7.0.14-2.ius.el7.x86_64. php70u-curl was already installed, I solved the problem by updating wp cli to 1.0 and then it worked.. /usr/bin/env: php: No such file or directory\nwhy is it looking in there, my php is located in /usr/bin, both paths are in my sudo secure_path variable.\nwhich: no php in (/usr/local/bin)\n/usr/lib64/qt-3.3/bin:/opt/rh/rh-mysql57/root/usr/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/dejant/bin. ",
    "coreyworrell": "@szepeviktor that doesn't help, wp-cli is looking for a filename that ends in .zip only, to differentiate between a slug and a local/remote zip file. \n. @danielbachhuber yes, the headers are set just like that example. If you want to save a HEAD request though, you could simply check for a / in the argument, that would mean it can't be a plugin slug, and then check for :// to determine if it's a local or relative path (to specify a local path in the current working directory, one would have to prefix it with ./ which is a common practice anyways). \n. I would say that you could also just set a flag that explicitly states that the argument you're passing is a remote url, but that won't help much when doing wp plugin update --all, since the arguments are coming from WP itself. \n. > I'm not really convinced it should support downloading arbitrary URLs, and hoping they're zip archives. I think it's a reasonable assumption to inspect the extension.\nYou're excluding many external/commercial plugins with this though. And yes the workaround works manually, but when doing wp plugin update --all that plugin (like ACF Pro and many others) will always fail the update and require a manual wget and all. Updating WP-cli is much easier/better than convincing many plugin authors to change their perfectly valid URL structures. \nInstead of checking for / you could check for a . (period) instead. That will determine if it's a slug vs a url/path. None of the 1000s of WP plugins (https://plugins.svn.wordpress.org) have a period in their slug, and looks as if WP prevents that. \n. I agree. But it doesn't have to be wp-cli's responsibility too check if a resource is available before attempting a download. One more idea could be to check if the passed string contains https?:// (or even just :// to allow other protocols), if it does then it's a URL to a .zip file (if it leads somewhere else then someone else messed up, not wp-cli), if not then it is a local file path or a plugin slug, which you can just test via is_file. Saves a request and is pretty bullet-proof. \n. @danielbachhuber any update on when this will be handled? I can submit pull request if needed. Thanks.\n. This should be updated in the docs right? https://make.wordpress.org/cli/handbook/installing/#installing-via-composer. ",
    "nickrouty": "Well, after posting this I can clearly see that I don't have those two wrapped in a defined check. Argh. It's late. However, I am still getting an error with the plugin install. I'm running this on a VVV (Varying Vagrants Vagrant) box.\n. @danielbachhuber Yeah, you're right, I can see now that I can get the correct slug by searching with the 'search' command. Imagine that. :) Better error display would be great, but glad to know it was purely user error. Thanks Daniel.\n. ",
    "jbkc85": "Certainly, I apologize about how vague it is.\nI will use Drush as an example.  In Drush I am able to supply a 'make' file that will go out and download each plugin specified.  With a very simple set of instructions I now have a basic file setup of a Drupal site without any need for the database to be initialized (which is the obvious second step).\nMuch like you do a wp core download, I would love to do a 'wp plugin download ' to simply download the plugin in the appropriate directory.  I don't want to have to have wp-config.php or the active_plugins to fire off due to the fact i may not have a wp-config.php in place.\nTo be completely forth coming, I am using this in a Dockerfile.  I am trying to make a completely immutable WordPress instance and if i am able to download plugins on each Docker build, I can automate the upgrading/updating of a WordPress container without the end-user needing to know anything about how to install the plugins (obviously this restricts some features of WP, but I personally don't like the idea of WP installing things on my behalf unless I initiate it via the CLI)\nLet me know if i blabbered on too much :-)\n. Thank you for your response.  I will certainly look into creating a WP-CLI command.  I was hoping to avoid having to specify a version number for the plugin, as once again anytime I want to 'build' WordPress I want it to pull down everything brand-spanking-new.\n. ",
    "cbravo": "@danielbachhuber I am in the same boat here... the only problem with using wget is that not EVERY plugin has the version in the url. Some urls only have the plugin slug in the zip name for the current version so one cannot reliably know what version you are downloading. Is there any kind of recommendation you can make with regards to creating a custom wp-cli command that simply downloads the plugin zip?\nEssentially I want to treat plugins the same way i would treat NPM packages or any other dependency and bake them into my docker image. ",
    "BloomPhilippe": "Possible solution : \nmkdir $1\ncd $1\nwp core download --locale=fr_FR --force\nfor PLUGIN in gotmls disable-comments better-wp-security jetpack imsanity advanced-custom-fields wp-optimize p3-profiler\ndo\n    printf \"installation plugin $VARIABLE\"\n    curl -O https://downloads.wordpress.org/plugin/$PLUGIN.zip\n    unzip $PLUGIN.zip -d wp-content/plugins/\n    rm $PLUGIN.zip\ndone. ",
    "Nikschavan": "Yes, this is how the .gitlab-ci.yml looks like, I had to modify the install-wp-tests.sh a bit into a new file install_gitlab_tests.sh. The main difference is Travis requires creating a new database while Gitlab requires installing some basic packages to start testing like here\n. > Want to put together a PR for this?\nI would be happy to!\n. @danielbachhuber I have submitted a pull request for Gitlab tests.\nI have added Gitlab specific configurations to its .yml, but as this needs to skip creating a databse, I have added a new option in install-wp-tests.sh to bail early in install_db()\n. ",
    "modelm": "I think the spacing is good now and I've added the warning message check.\n. ",
    "dmleach": "Sure thing! I had it in the back of my mind that I needed to look over the WP naming conventions before I pushed, but of course got a step ahead of myself.\n. ",
    "roscom": "Yes. Upgraded php from 5.3.29 to 5.5.30. Problem solved\n. Hi Daniel\nOutput of the offending command with plugins & themes skipped:\n[civilcel@server2 public_html]$ wp core verify-checksums\nSuccess: WordPress installation verifies against checksums.\n[civilcel@server2 public_html]$ wp user create bob bob@gmail.com --user_pass=C2n6qfZMDSP --debug --skip-themes --skip-plugins\nDebug (bootstrap): No readable global config found (0.181s)\nDebug (bootstrap): No project config found (0.182s)\nDebug (bootstrap): argv: /usr/local/bin/wp user create bob bob@gmail.com --user_pass=C2n6qfZMDSP --debug --skip-themes --skip-plugins (0.182s)\nDebug (bootstrap): ABSPATH defined: /home/civilcel/public_html/ (0.182s)\nDebug (bootstrap): Begin WordPress load (0.182s)\nDebug (bootstrap): wp-config.php path: /home/civilcel/public_html/wp-config.php (0.182s)\nDebug (bootstrap): Loaded WordPress (0.309s)\nDebug (bootstrap): Running command: user create (0.309s)\nNothing to see in the above.\nHowever, the user list command might be more instructive insofaras the command not working is concenred.\n[civilcel@server2 public_html]$ wp --skip-plugins --skip-themes user list --debug\n    Debug (bootstrap): No readable global config found (0.183s)\n    Debug (bootstrap): No project config found (0.184s)\n    Debug (bootstrap): argv: /usr/local/bin/wp --skip-plugins --skip-themes user list --debug (0.184s)\n    Debug (bootstrap): ABSPATH defined: /home/civilcel/public_html/ (0.184s)\n    Debug (bootstrap): Begin WordPress load (0.184s)\n    Debug (bootstrap): wp-config.php path: /home/civilcel/public_html/wp-config.php (0.184s)\n    Debug (bootstrap): Loaded WordPress (0.313s)\n    Debug (bootstrap): Running command: user list (0.314s)\n    Fatal error: Call to undefined function Symfony\\Polyfill\\Mbstring\\iconv() in phar:///usr/local/bin/wp/vendor/symfony/polyfill-mbstring/Mbstring.php on line 534\n    [civilcel@server2 public_html]$\nError would not seem to be plugin or theme related.\nHope this helps.. Thanks.\nNope. I have no idea.. Thank you. That's done & I'll post the results.. iconv compiled in and both wp user list and wp user create now function correctly.\nThank you all for your help. ",
    "joemaller": "ok, thanks. It would nice if WordPress stored the entire blob of plugin metadata so more intelligent actions could be taken.\nAssuming most third party plugins were installed from WordPress.org, a simple script wrapping wp option get active_plugins should fix most cases. \n. ",
    "samuelnasta": "Success: WordPress downloaded.\nSuccess: Generated wp-config.php file.\nSuccess: Database created.\nPHP Warning:  mysqli_real_connect(): (HY000/2002): No such file or directory in /Applications/MAMP/htdocs/neu/wp-includes/wp-db.php on line 1452\nWarning: mysqli_real_connect(): (HY000/2002): No such file or directory in /Applications/MAMP/htdocs/neu/wp-includes/wp-db.php on line 1452\nPHP Deprecated:  mysql_connect(): The mysql extension is deprecated and will be removed in the future: use mysqli or PDO instead in /Applications/MAMP/htdocs/neu/wp-includes/wp-db.php on line 1482\nDeprecated: mysql_connect(): The mysql extension is deprecated and will be removed in the future: use mysqli or PDO instead in /Applications/MAMP/htdocs/neu/wp-includes/wp-db.php on line 1482\nPHP Warning:  mysql_connect(): No such file or directory in /Applications/MAMP/htdocs/neu/wp-includes/wp-db.php on line 1482\nWarning: mysql_connect(): No such file or directory in /Applications/MAMP/htdocs/neu/wp-includes/wp-db.php on line 1482\nError: \nErro ao estabelecer conex\u00e3o com o banco de dados\nIsto tanto pode significar que as informa\u00e7\u00f5es de nome de usu\u00e1rio e senha em seu arquivo wp-config.php est\u00e3o incorretas, ou que n\u00e3o pudemos contactar o servidor do banco de dados em localhost. Pode ser tamb\u00e9m que o servidor de hospedagem do seu banco de dados esteja fora do ar.\n\nVoc\u00ea tem certeza que possui o nome de usu\u00e1rio e senha corretos?\nVoc\u00ea tem certeza que digitou corretamente o nome do servidor de hospedagem?\nVoc\u00ea tem certeza que o servidor do banco de dados est\u00e1 funcionando?\n\nProcure o seu servidor de hospedagem se voc\u00ea n\u00e3o tem certeza do que estes termos significam. Se ainda assim voc\u00ea precisar de ajuda, visite o F\u00f3rum de Suporte do WordPress.\nThis last part is the \"Can't connect to database\" WordPress error in portuguese\n. Yes and yes.\nIndeed there's a notice saying\nSuccess: Database created.\nDatabase was created but with no tables.\n. I think it's because of \nPHP Deprecated: mysql_connect(): The mysql extension is deprecated and will be removed in the future: use mysqli or PDO instead\nhttp://php.net/manual/en/migration55.deprecated.php\n. I've tried reseting my mac but didn't make any difference.\nYou're saying that wp-cli was tested in PHP 5.5 and worked alright and these are just notices, with the functions working okay.\nSo, what could be the errors, since the credentials are just root/root and the MAMP is running?\n127.0.0.1 instead of localhost?\nI have another wp-config that's just the same root/root. Don't get it why it doesn't work.\n. ",
    "marcelo2605": "Thanks Daniel, I agree.\n. ",
    "dylannirvana": "Thinking of the other parameters of creating multiple pages at once; for example,\nwp post generate --count=3 --post_cat=something , adding a parameter to the command, or\nwp post generate --count=3 | wp post term set --category=something  , rather as a pipe. In other words, I would like to generate multiple posts, pages and assigning their categories.. ",
    "gnotaras": "I see. I had missed the announcement. Many thanks for pointing this out!\n. That's so great, Daniel!\n. @danielbachhuber Marvelous work, Daniel! Thank you very much!\n. ",
    "davidrgreen": "I'm not sure using WP_CLI::launch is the best method to obtain the cache info. Happy to make changes if needed.\n. ",
    "dsifford": "Doh! Thanks.. :smile: \n. Will this be added to the documentation page on the website?\n. :+1: Great, thanks! \n. Thanks for the fix @danielbachhuber \nAny idea on when this newer version will make it to the install url listed on this page.\nThe url => https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nStill seem to be getting the last version.\nThanks! \ud83d\udc4d \n. the host db is referring to a linked container named db (this configuration has worked in the past)\n. AHA! Those sneaky semicolons might be the root of all this evil... Checking now... Will report back\n. Yep, that was the issue. \nSemicolons: 1, Me: 0.\n. ",
    "gsf": "Installed with composer. See the deploy script at https://github.com/CityOfPhiladelphia/phila.gov/blob/master/scripts/deploy.sh and deploy output at https://travis-ci.org/CityOfPhiladelphia/phila.gov/builds/92986082.\n. Looks like this is related to https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md. Thanks for pointing me in that direction!\n. ",
    "vercotux": "Best workaround so far is to set\n\"config\": {\n    \"bin-path\" : \"bin\"\n}\nand then use ./bin/wp from your repository.\n. I tried that, but it failed. Then I removed the plugin and ran a regular install and it worked. So clearly something is different. Should I open a new bug report for that?\n. ",
    "gilbitron": "Sure. I've never used behat but I'll give it a go.\n. Done.\n. @danielbachhuber Changes committed :+1: \n. @danielbachhuber done.\n. @danielbachhuber I fixed it by removing the file count from the test (to account for differences in the way cleanup is done).\n. Just to clarify @sakrow's comment, --format=table and --format=summary work as expected if you are not using --dry-run. However when using --dry-run the output is always a table.\n. :+1: \n. @danielbachhuber While putting together this PR I realised that the output of --format=json and --format=csv should probably not include the progress updates. For example:\nEnabling Maintenance mode...\nDownloading update from https://downloads.wordpress.org/theme/twentyfifteen.1.4.zip...\nUsing cached file '/Users/gilbitron/.wp-cli/cache/theme/twentyfifteen-1.4.zip'...\nUnpacking the update...\nInstalling the latest version...\nRemoving the old version of the theme...\nTheme updated successfully.\nDisabling Maintenance mode...\nSuccess: Updated 1/1 themes.\nAny ideas how we would get around this?\n. @danielbachhuber Almost there. However when using --format=json and --format=csv I'm still getting this single line of output before the json/csv:\nUsing cached file '/Users/gilbitron/.wp-cli/cache/theme/twentyfifteen-1.4.zip'...\nAny ideas how to mute that?\n. Also my tests are looking for incomplete data because of the fact they don't know what the \"upgrading to\" version will be. Any ideas how to get around that? Is there a way we can find the \"upgrade to\" version and do something like And save STDOUT as {UPGRADE_VERSION}?\n. @danielbachhuber Done. Only issue I had was using variables like {UPDATE_VERSION} in tables (STDOUT should be CSV containing) didn't seem to work.\n. So often I do something like:\nwp db drop\nwp db create\nin a script to make sure there is a fresh database before running the install. However the first time the script is run wp db drop spits out an error because the database hasn't been created yet.\n. Yeh not a big deal. Was just thinking this would be neater.\n. :+1: \n. I'm going to have a crack at porting some of these today. Will submit PRs over on https://github.com/wp-cli/wp-cli.github.com.\n. @danielbachhuber Should these docs go under a /wiki subdirectory or be top level pages?\n. Have you considered using something like CloudFlare? It has a free plan and works with GitHub pages.\n. I don't think there is anything wrong with you making money from WP-CLI via your separate commercial venture. That's a perfectly normal way of profiting from open source work (see Taylor Otwell's side businesses).\nHaving some form of organisation in place to protect the long term development of the project is a separate issue. I think the WordPress/Ghost non-profit structure seems to work well. Setting up and running an org like that would be a time suck though, so you would need to be sure the WP-CLI project justifies it.\n. @danielbachhuber I'm not saying WP-CLI doesn't need formal representation with an organization (I think it's a good idea), maybe just not yet? I'm just playing devil's advocate and wondering if an org would be more of a distraction than a benefit at this point.\n. This could potentially be a lot of files. Would it better to just output a count of files?\n. Sure. Got an idea of the kind of tests you would like to see?\n. Could we remove the version comparison check and just do this for all upgrades/downgrades?\n. Currently if either of the checksum calls fail no files will be removed. Is this a reasonable fallback?\n. :+1: \n. :+1: \n. Yes I forgot about that. Will fix.\n. In the foreach https://github.com/wp-cli/wp-cli/pull/2638/files#diff-97e24ceb3b4ab63c888f11417f6f356fR847 you're skipping the wp-content folder, but they still exist in the $checksums array.\n. @danielbachhuber Not sure why this isn't working. Any idea how to create an extra file to test this with?\n. @danielbachhuber Still can't get this to work?\n. That's the one :+1: Thanks.\n. ",
    "13pixlar": "@danielbachhuber Sure. I have edited the page and added a Windows section.\n@QWp6t Please expand the Windows section i added with composer global require wp-cli/wp-cli if you like.\n. ",
    "stevector": "Hi @danielbachhuber! I understand and would not expect you to merge a failing test. I simply see writing the failing test as the first step in fixing the bug. As this bug appears to be in WordPress itself I'll work on getting the underlying bug fixed in Trac.\n. ",
    "dancrumb": "$ wp --info\nPHP binary: /usr/bin/php5\nPHP version:    5.6.11-1ubuntu3.1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI global config:   \nWP-CLI project config:  \nWP-CLI version: 0.21.1\n. Using WP version 4.3.1\n. @danielbachhuber I'll have a chance to try this today.\n. Looks like I have a ReCAPTCHA plugin that attaches to that hook. It always used to work. Did the wp-cli plugin change to use this?\n. To confirm: using --skip-plugins worked\n. ",
    "demizer": "For those trying to get help output dumped from a wrapped command, use:\nPAGER=\"cat\" wp help\n. ",
    "arelidev": "Through the ssh terminal\n-----Original Message-----\nFrom: \"Daniel Bachhuber\" notifications@github.com\nSent: \u200e12/\u200e8/\u200e2015 7:16 PM\nTo: \"wp-cli/wp-cli\" wp-cli@noreply.github.com\nCc: \"The Areli Group\" webmaster@theareligroup.com\nSubject: Re: [wp-cli] Uninstall package (#2271)\nHow did you install it?\n\u2014\nReply to this email directly or view it on GitHub.\n. curl -O\nhttps://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nI'm just looking to uninstall this.\nOn Tue, Dec 8, 2015 at 7:52 PM, Daniel Bachhuber notifications@github.com\nwrote:\n\nYou'll need to be more clear than that. Can you provide the exact commands\nyou used to install WP-CLI? There are multiple installation methods.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/2271#issuecomment-163071956.\n\n\nKeith Petrillo\nSr. Developer / Project Manager\nThe Areli Group http://www.theareligroup.com/ - Branding, Design,\nDevelopment, and Digital Marketing.\np: (855) 902-7354 ext 702\nt: @KeithPetrillo http://www.twitter.com/keithpetrillo\nin: Keith Petrillo http://www.linkedin.com/keithpetrillo\nSkype: Keith.Petrillo\n. Simple enough. Thank you!\n. ",
    "hansfilipelo": "Fixed with 0.21.1 - though this relase is not available as a .deb-file (yet?). \n. ",
    "ryanshoover": "@danielbachhuber Yep that's about the same as what I get -- \nWarning: The `wp transient set` command has an invalid synopsis part: [<expiration]\nError: Too many positional arguments: 2592001\n. LGTM\n\n. ",
    "David-Brown": "I was unaware that this was already fixed in 0.20.4. Closing. \n. ",
    "rklrkl": "My assumption here is that the old WP_CLI version correctly used $wp_local_package to determine the locale (falling back to en_US if it isn't set in wp-includes/version.php) whereas the latest WP_CLI just defaults to en_US only unless --locale is supplied.\nThis seems a downgrade in functionality because I'm now going to have to scan wp-includes/version.php myself to see if $wp_local_package is set and then supply --locale with the locale value if it is - a lot more work for the end user, IMHO. I suspect most users would expect the locale to default to the WordPress locale if --locale isn't supplied, so this is quite unexpected behaviour in the latest WP-CLI for anyone not in the en_US locale. The fact that an older WP_CLI did it correctly is also quite frustrating.\n. When people quote PHP versions, they often only refer to the php.net versions and their support periods, but long term Linux distros engage in backporting and typically have much longer support periods for a particular PHP version they've baselined on. And it's long term distros that hosters often run, so it's worth noting what their baseline PHP versions are (they backport fixes from later versions, but don't add new features from them).\nRHEL/CentOS 6 ends support in Nov 2020 and ships PHP 5.3.3, whereas RHEL/CentOS 7 ends support in June 2024 and ships PHP 5.4.16. Now you can upgrade PHP fairly easily using the IUS repo at https://ius.io/ and I've done that successfully with CentOS 7 (now running the latest 5.6.X release and, yes, you can even pick a PHP 7.X version), but if you've already got a lot of sites running on, say, 5.3.3, this can cause breakage due to language changes between 5.3.X and 5.6.X.\nIt would be great if the WP-CLI 1.X series could be kept alive for as along as possible with no new features at all and just fixes for security issues and, of course, making sure it still works with the latest WordPress release. If that's the case, then I'm all for WP-CLI 2.X baselining its minimum PHP above even what CentOS 7 ships. I always manually update WP-CLI anyway and would just stay on the 1.X versions for \"older\" PHP installs.. ",
    "webspecnick": "Co-worker here to confirm. The workaround is to manually replace the files in the wp-cli folder or deleting the folder and running a new composer create-project wp-cli/wp-cli --no-dev\n. @danielbachhuber All I had to do to get mysql to run was having the bin folder on my path. I am using XAMPP's mysql executable. I tested with a blank .bashrc and still got the same error.\nI also tested on a co-worker's Windows machine. 1.2.0 causes the error, downgrading to 1.1.x fixes the error. I used a blank .bashrc, their mysql is from wamp added to their path.\n. ",
    "rangerer": "Hi Daniel,\nI just asked my coworker to supply some timing information (we do log wp-cli calls and their timing).\nThe major issue however is that plugin activation/deactivation was totally out of sync with WordPress and even broke the WordPress ability to manage plugin status itself.\n. > This sounds like a problem with something else in your stack, stale cache for instance, not WP-CLI.\nJust what I thought, but I even disabled the cache completely - I also tried running it against different versions of WordPress. I will try to dig deeper into the issue when I have time - its reproducible for me, so I should be able to gather more insight.\n. Long story short I tracked down the problem to different globals handling ...\nWe set $memcached_servers in our wp-config.php and while this should be in the global scope (and it definitely is for WordPress and v0.20.4) and is not in the global scope for v0.21.1.\nOf course the fix is as easy as using $GLOBALS['memcached_servers'] but you might want to consider rewriting the globals handling for this case, as setting a global in wp-config.php is quite common practice.\n. Compare\n- https://github.com/wp-cli/wp-cli/blob/v0.20.4/php/wp-cli.php#L23 and\n- https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L731\n. > Globals need to be explicitly globalized, now that WP-CLI loads WordPress inside of a function\nNo problem for me, but others might run into similar issues ...\n. > @rangerer FYI - this will be fixed magically in v0.22.0, see #2318\nGood stuff - didn't know about get_defined_vars() so far.\nI tend to agree with @danielbachhuber that defining globals explicitely is the more elegant (and maintainable) solution - especially in wp-config.php, where I have control over it - just a suggestion for future readers of this thread.\n. ",
    "zephod": "This is a huge problem IMO, because lots of theme designers and plugin authors will have broken this rule without any clue of the implications. We use 30+ third-party plugins in our stack, including major plugins like https://en-gb.wordpress.org/plugins/redirection/ (400,000+ installs globally). WP CLI 0.21.1 will crash on load. \n(It also took 2+ hours to work out why WordPress loads OK in the browser but not at all on the CLI. I count this as a very obscure bug...).\nObviously we can't afford to fix all third-party plugins, nor insure against future plugins breaking our stack, so we are now forced to downgrade WP CLI.\n. Yes, I've specified which plugin is causing the current crash -- it's WP Redirection, which is not a niche or unpopular plugin.\nI think the problem is worse than you're willing to admit: If you're running a business with WordPress in it (we maintain a growing number of WP sites in the .gov TLD) every code commit and every plugin activation must be checked against this additional constraint. We're going to have to build another test harness, because this is the kind of bug that sneaks in and then becomes apparent one day when a cron job mysteriously crashes in production.\n. > I'd encourage you to proactively solve the problem now, lest it becomes a larger problem for you in the future.\nThis is important: Plugin/theme authors are not going to stop using global variables because of this. If we clean up our current stack the problem does not go away; we will always have to watch for this, and every new plugin needs to be double-checked before deployment. Customers won't want to hear that their custom code can't be deployed \"because it's not compatible with one of our back-office tools\", and we can't afford the additional technical burden of having to rewrite it for them. \nI'm grateful to WP CLI for saving me many hours of work, and I understand where you are coming from, but you must see how much friction this change will cause. Putting my management hat on: We are more likely to throw away this one tool than to add maintenance burden to the other thirty tools.\n. You are correct about --skip-plugins, and to be honest it does solve the problem for us, as long as we don't write any CLI Extensions inside a plugin (spoiler alert: We totally do, but will rewrite them...)\n. Thanks. Although that won't help when connecting to an arbitrary WordPress instance which might have yet-unseen plugins installed by a client or technician which could contain undeclared globals. It might be possible to do something crazy like: wp --skip-plugins plugin list | xargs ... to grab the list of plugins and disable everything except recognised whitelisted plugins.\n. ",
    "moses-moore-spafax": "Understood.  Duplicate of #2284 \n. Had this problem on a cPanel machine, because /usr/bin/php that cpanel / EasyApache installs is weird.\nI had to explicitly call php-cli wp-cli.phar --info to get it working properly.\n. > which version\nv0.24.1  I just downgraded, re-ran the command and got the same warning.  I must be misremembering.\n\ntruthy but non-object  in update_core transient?\n\nNo idea.  \"wp transient type\" says I the transients are saved to the wp_options table, so I should be able to find it in there, right?\n[mistakes deleted]\nmysql mach_wp <<<\"select * from wp_options where option_name like '%update_core%';\"\noption_id   \n    970218  \noption_name \n    _site_transient_update_core \noption_value    \n    O:8:\"stdClass\":4:{s:7:\"updates\";a:1:{i:0;O:8:\"stdClass\":10:{s:8:\"response\";s:6:\"latest\";s:8:\"download\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.6.1.zip\";s:6:\"locale\";s:5:\"en_US\";s:8:\"packages\";O:8:\"stdClass\":5:{s:4:\"full\";s:59:\"https://downloads.wordpress.org/release/wordpress-4.6.1.zip\";s:10:\"no_content\";s:70:\"https://downloads.wordpress.org/release/wordpress-4.6.1-no-content.zip\";s:11:\"new_bundled\";s:71:\"https://downloads.wordpress.org/release/wordpress-4.6.1-new-bundled.zip\";s:7:\"partial\";b:0;s:8:\"rollback\";b:0;}s:7:\"current\";s:5:\"4.6.1\";s:7:\"version\";s:5:\"4.6.1\";s:11:\"php_version\";s:5:\"5.2.4\";s:13:\"mysql_version\";s:3:\"5.0\";s:11:\"new_bundled\";s:3:\"4.4\";s:15:\"partial_version\";s:0:\"\";}}s:12:\"last_checked\";i:1476472540;s:15:\"version_checked\";s:5:\"4.6.1\";s:12:\"translations\";a:0:{}}    \nautoload\n    yes\n. Edited the last comment for markdown typos and a dumb update_core/core_update mistake.\n. I just copied the site & db over to another staging machine where I have four other wordpress sites, and php 5.5.9.  Updated wp-cli and I still get the \"foreach()\" warning with the mach site, but not the other four sites.  The mach site functions well, nothing broken as a website. and wp core update reports \"Success: WordPress is up to date.\" with no warnings.  This is bizarre, and I'm thinking the mach site is a fluke.  Is there a way to reset transients, or force wordpress to wipe and remake the update_core transient?\n. weird.\n```\nsudo -u mach php-cli /usr/local/bin/wp-cli transient delete --all\nSuccess: 25 transients deleted from the database.\nsudo -u mach php-cli /usr/local/bin/wp-cli core check-update\nWarning: Invalid argument supplied for foreach() in phar:///usr/local/bin/wp-cli/php/commands/core.php on line 1389\nSuccess: WordPress is at the latest version.\n```\nsame on the staging server clone, 'cept I can use php directly instead of php-cli first.\n. When I run wpcli core check-update I get:\nversion update_type package_url\n4.7.1   minor   https://downloads.wordpress.org/release/wordpress-4.7.1-partial-0.zip\n\n... but I'm pretty sure that's the wrong file to download.  Shouldn't it be \"https://downloads.wordpress.org/release/wordpress-4.7.1.zip\" ?\n. ",
    "penghuajun": "Please update WP-CLI WP-CLI version:    0.22.0\n. ",
    "thinkhuman": "I get the error too. I've got the latest wp-cli installed, because I blew it away and installed anew. WP version is 4.5.2. \nwp-cli update still doesn't work for me. Result message: Error: 'cli update' is not a registered wp command.\n. ",
    "leedo": "One reason I would find this handy is that we'd like to run wp-cron on a multisite blog outside of any HTTP request.\nYes, we can do it with php wp-cron.php, however, it is tricky to avoid using an HTTP request for for secondary multisite blogs. I think we could manage this with an ENV variable and some checks in wp-config.php or sunrise.php. But it seems that wp-cli already has functionality to trigger cron events on individual blogs.\n. ",
    "heymo": "I know this is an old issue, but just for reference I think the command needs to read like this:\nwp core check-update && wp plugin list --update=available && wp theme list --update=available. ",
    "garybrowne": "No, but it seems to be working again, although I am still presented with the same PHP notice. Not sure what happened there. Thanks for your response anyway.\n. ",
    "entr": "Can't reproduce using https://github.com/pantheon-systems/wp-redis\nThanks.\n. ",
    "jacobischwartz": "Hi Daniel,\nGood to know. I was able to get it working.\nFYI - I had tried the import previously through the web interface, which had imported all the files before pooping out. So I used the CLI to empty the site before trying an import. I think the issue might have been that I still had the uploaded files in the uploads directory before running the CLI import. I guess if the files are already there, the attachments aren't created...? When I cleared out the files and did a fresh import, the attachments were created fine.\nThanks,\nJacob\n. Yessss the hard way :P\nIt would be a good thing to note on the command's reference page, if it's a known issue. Wordpress VIP support also spent a fair amount of time trying to help me with it.\nI can see a few ways to potentially solve it in WP-CLI, but if the plugin is being rewritten then maybe it's a waste of time. Do you happen to know what kind of a timeline that has?\n. Ok, well it looks like the plugin might not have an issue with parsing multiple XML structures in one file. So the simplest solution might be to just concatenate all the files before passing them to the plugin. I'll test later this week and let you know if that solves it. If it works, I'm happy to write the change in the wp-cli command. Sound good?\n. Ok. Really, the only thing that needs to persist between WXR files is the processed_posts property on WP_Import. It's a pretty simple array of keyed IDs. I doubt it'd be a huge memory risk if that array were grabbed at the end of the import, stored in an Import_Command property, and merged it into subsequent importers shortly after the importer is initialized.\n. Possible implementation: https://github.com/wp-cli/wp-cli/pull/2545\n. @danielbachhuber mayyyyybe. I'm not familiar with Behat, so it might take me a little while.\n. @danielbachhuber sorry, I've been pretty strapped for time. I haven't been able to put together any automated tests. If you want to take over the testing, feel free! Otherwise I can probably get started with them over the next week or two.\n. @danielbachhuber I've added testing for this and it seems to be passing. Please let me know what you think!\n. > I think the formatting change is causing the test to fail on Travis though. Can you change it back?\nI was getting failures locally without the formatting, I guess because of this:\nhttp://stackoverflow.com/questions/30927590/wc-on-osx-return-includes-spaces\nBut I can pipe through sed to strip the whitespace.\n. I've removed the sed usage. But some notes on the failing Travis tests:\nThe importer plugin itself fails to import menu items at all with either WP 3.7.11 (any PHP version) or PHP 7 (any WP version). I've created a scenario to demonstrate the failures, titled \"Export and import page and referencing menu item\". The failures predates my changes, I guess I'm just the first one to expose them with a test.\nHere's the reference on the PHP 7 issue:\nhttps://wordpress.org/support/topic/importer-fails-to-import-menu-items-in-php7\nI'm not sure that these are things that can be fixed by wp-cli. Which means that you can either have good testing for this feature, or you can have no Travis failures... Unless we mark the failures as expected under the conditions noted above (I'd need help doing that).\n. Thanks for your help and feedback @danielbachhuber! The trac ticket is here: https://core.trac.wordpress.org/ticket/36281\nThe only feedback I'd give about the docs for contributing / writing tests specifically, would be that getting started with Behat was enough of a stumbling block to delay my completed solution by almost 2 weeks. I don't know how common knowledge Behat is, but a really quick straightforward example on your page might have gotten me finished a lot quicker. It's not that it was an overly complex thing to learn (it was really quite easy once I read their introduction). It's one more thing for me to have to figure out, rather than just doing the work. If I were planning on contributing a whole bunch of functionality, I probably wouldn't have cared about spending 30 minutes or an hour ramping up. I'd like to say that I'm going to use Behat again, but I probably won't unless I'm submitting more tests for wp-cli.\nThe other thing I'd mention is that it'd be really useful to have a link to known issues from each command's page. You could include github tickets and support forums connected to the plugin itself. It'd be even better to actually have the major known issues (and limitations) listed on the command's page. Just so I don't have to fail first, rule out a bunch of other options, then go searching to see if my (fairly common) situation was known to have issues in the first place. This is especially important with things like the importer, which apparently is known to have a number of issues and is being rewritten for this reason. And as we now know, there are some standing incompatibilities with versions of WP and PHP...\nAnyway, you've obviously made great efforts so that it's really easy to use wp-cli. Thank you!\n. PHP binary: /usr/bin/php5\nPHP version:    5.6.18-1+deb.sury.org~precise+1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:    /home/vagrant/.wp-cli/packages/\nWP-CLI global config:   /srv/www/wp-cli.yml\nWP-CLI project config:\nWP-CLI version: 0.23.0\n. Thanks! That fixed it. To be honest, I've been using VIP Quickstart without connecting the dots to using the nightly updates on the CLI.\n. Do you mean a bash variable or something in Behat?\n. Done.\n. Done.\n. Done.\n. ",
    "sugengsuprayogi": "My script\nphp wp-cli.phar --url=$url core update-db --nightly\nError: Parameter errors:\n unknown --nightly parameter\n. ",
    "jbellow": "Sorry..wrong base repo...more coffee needed.\n. ",
    "mselner": "HI I also have this issue. I could provide the variables as part of the CLI context or pass them on the command line like used for \"wp core config\".\nthanks\n. Hello. I didn't think it was that simple!\nI ran it like this (all one line):\nWP_DB_NAME =\"example\" WP_DB_USER =\"example\" WP_DB_PASSWORD =\"secret\" WP_DB_HOST =\"localhost\"  /path/to/wp-cli  --path=/path/to/example/site  core check-update\nand it worked:\nSuccess: WordPress is at the latest version.\nTo clarify, I set the variables in the apache config file inside my  section like this:\nSetEnv WP_DB_NAME \"example\"\nSetEnv WP_DB_USER \"example\"\nSetEnv WP_DB_PASSWORD \"secret\"\nSetEnv WP_DB_HOST \"localhost\"\nand reference them in wp-config.php like this:\ndefine('DB_NAME', $_SERVER['WP_DB_NAME']);\ndefine('DB_USER', $_SERVER['WP_DB_USER']);\ndefine('DB_PASSWORD', $_SERVER['WP_DB_PASSWORD']);\ndefine('DB_HOST', $_SERVER['WP_DB_HOST']);\nAnd this works fine for normal WP access (Apache passes environment vars within $_SERVER).\n. ",
    "austinjp": "Okay I worked out why -- I hadn't run the web-based Wordpress installation process. Doh!\nYou can safely ignore this -- although perhaps the error message could prompt the user \"Have you installed Wordpress, or completed the installation process?\" or similar.\n. Hi @schrapel \nI didn't want to run wp core install because apt had already installed Wordpress. Pointing my web browser at the server and completing the basic setup there fixed things, and wp-cli happily completed the upgrade after.\nThe apt package installs 3.8 by default, and I wanted to use wp-cli to perform an upgrade, which it did.\n. ",
    "schrapel": "You could've just ran the command 'wp core install' as suggested\n. This is blocking us upgrading to 4.6.\n@rmccue when are you able to tag this?\nThanks\n. @evilebottnawi in the meantime we are using this in our made composer.json\n\"rmccue/Requests\"                                               : \"dev-master#c887fdbbee5e012ae642eb2e0560b5a42fb4782e as 1.6.1\",\n. @danielbachhuber really though if this is now included in core surely we don't need to require it in wp-cli since it will load when we load wordpress?\n. We ended up forking wp-cli but thanks @PatelUtkarsh . No code brings in a older version of justinrainbow/json-schema that is what the composer why command shows. \nHowever, found the issue. Another one of our repos had \"wp-cli/php-cli-tools\": \"0.11.1\" and that locked the version of wp-cli/wp-cli we could use. Since later version of wp-cli need 0.11.2 or higher\nhttps://github.com/wp-cli/wp-cli/blob/master/composer.json#L58\nThanks for helping though. . ",
    "dennisjac": "wp --skip-themes makes it work but I can find no reference to wp-includes/load.php in wp-content/themes/*.\n. What is wrong with including this file in a theme? wp-cli does include it as well after all. Shouldn't wp-cli actually use require_once to prevent this kind of collision?\n. Indeed functions.php in the theme includes wp-config.php which seems rather pointless. Removing that line fixes things. Sorry for the noise and thanks for pointing me in the right direction.\n. ",
    "rosswintle": "I know this is closed, but I just wanted to add a weird behaviour that I've noticed that may be related.\nThis is with WP-CLI 0.23.0 running on PHP 5.5.27 on an up-to-date Mac.\nIf I run WP-CLI from inside the theme directory I get fatals for duplicate function definitions:\nFatal error: Cannot redeclare oikos_nav_menu_basic() (previously declared in /some/path/wordpress/wp-content/themes/my-theme/functions.php:76) in /some/path/wordpress/wp-content/themes/my-theme/functions.php on line 97\nIt looks like if I run WP-CLI in a theme's directory, it tries to load the functions.php file twice for some reason.\nIf I change to a different theme's directory (the non-active theme) and run WP-CLI there I also get odd errors.\nDoes WP-CLI try to load a functions.php file in the directory that you run it in?\n. Thanks Daniel. Would you believe it, I tracked it down to a dodgy plugin that does:\ninclude(functions.php');\n\ud83d\ude16\nWell...yes, you probably would. \n. I've often wondered about this. WP-CLI is incredibly valuable and yet seems to be maintained by a small number of people (i.e. mostly you). This means that both a) its future stability and development is not assured (as much as you are committed to working on it) and b) as it has such value it could almost certainly be monetised.\nWhile your goal to be a-commercial is noble, it has often seemed to me that some form of commercialisation is desirable for you, for WP-CLI users, and for the project.  So I wonder why you are so against it?\nI would point to Laravel and Taylor Otwell's businesses as a great example of how this can all fit together. Laravel is very open source, has a great community, and is in itself essentially a-commercial, but Taylor and other key players in the Laravel space have built up a load of services around Laravel that make use of it but that are commercial (Forge, Envoyer, Laracasts and, more recently, Spark).\nHaving these money-making commercial asides gives me confidence that there will be resources in the future to support Laravel's development without the a-commercial nature of Laravel itself being compromised. I like this model.\nI don't know if WP-CLI is big enough in itself to build up it's own eco-system of stuff around it as Laravel has, but I like the way that Laravel is looked after.\n. Another thought: sponsorship could work if you can maintain a-commerciality along with it.  e.g. I like how LetsEncrypt is funded by a group of organisations with an interest in making the web more secure. It seems obvious to me that commercial entities making use of WP-CLI would want to secure its future and so opportunities to fund it would probably be taken up.\n. Added a simple check in pull request: https://github.com/wp-cli/wp-cli/pull/3724\nNot sure if I can link the issue to the pull request - or is that something you can do?\nThanks. The _s API does not support ., primarily because the slug is used to generate PHP function names.\nStepping back a little to explain: when you do wp scaffold _s my_theme, wp-api uses an API provided by _s at http://underscores.me/ to build and download a custom theme package. This theme package uses function names prefixed with the theme slug. PHP function names can not contain .'s so the _s API will reject such a request.\nWe could replace . in the slug with _ or something before passing it on, but I think it makes more sense to enforce the constraint on the slug, otherwise your slug will be example.com in some places and example_com in others.\nI would suggest using example_com as your slug for example.com to ensure consistency.. Yes, but probably not today. I added a Behat case locally, but haven't tested the test. Will it need a unit test too?. Added functional test for my case. Ran Behat (never done this before) and got:\n29 scenarios (29 passed)\n175 steps (175 passed)\n3m46.316s\nSo I guess that's good.\nYou could add endless test cases for this. Do you think this is sufficient?  It's simple to add more (now that I'm set up and know what to do).. Seriously, thanks for helping me through this - it's been really good to do!\nI THINK I did that merge right. Hope the PR is now OK. I'm off to bed (UK time!). Let me know if you need anything else.. Oh. Also, I didn't re-run functional tests because it didn't seem necessary - I've not changed anything! And I guess travis will do this for us anyway.  Thanks!. ",
    "lehelmatyus": "Hi everyone,\nI am using WP CLI on my local.\nI am getting:\nFatal error: Cannot redeclare wp_get_server_protocol() \n1. $ wp --skip-themes --skip-plugins  <- don't seem to help\n2. didn't find require('wp-includes/load.php') in themes or plugins\nBUT I do have a custom weird wp-config.php \nWhat do?\n. alright.. ",
    "jmfield2": "I was bit by this because I have slightly modified my wp-config.php to better control how wp-settings is loaded.  \nThe problem for me was the way the WP_CLI Runner tries to grab everything in wp-config EXCEPT the require_once for wp-settings (https://github.com/wp-cli/wp-cli/blob/d9d405a4ca01ba23e80277b8cb9000857e84e0cd/php/WP_CLI/Runner.php#L432) \nIt seems like this could be done in a smarter way, but adding //require_once('wp-settings.php'); to the end of my custom require_once line was enough to fix it for now.\n. ",
    "pooledge": "I know it's closed, but it might by a problem solution for those using wp-config-local.php when it's available. Having same issue by getting:\nFatal error:  Cannot redeclare wp_get_server_protocol() (previously declared in /siteroot/v1/wp-includes/load.php:16) in /siteroot/v1/wp-includes/load.php on line 21\nI was able to overcome it by removing usual:\n/** Use local config file if exists */\nif ( file_exists( dirname( __FILE__ ) . '/wp-config-local.php' ) ) {\n    include( dirname( __FILE__ ) . '/wp-config-local.php' );\n}\nfrom the wp-config.php file.\nMight it make sense to add this check to wp-cli? Or is there a proper way to use wp-config-local.php so that wp-cli still works?. ",
    "MaximeCulea": "Can I ask if it's on the tube to make wp cli compatible with composer like installs ? @danielbachhuber \nBecause doing @pooledge 's manipulation on server each time when using wp-cli is killing my envy of using it :(. ",
    "lucasbracher": "Downloading compose and source solved the issue for me.\nThank you! :)\nLucas Bracher\n+55 32 8458-7377\n+55 21 98669-8461 (Whatsapp)\nOn Tue, Jan 19, 2016 at 1:11 PM, David Favor notifications@github.com\nwrote:\n\nMight be useful to mention how you installed wp.\nFor example...\ncurl -s -O\nhttps://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nOr by other means. Using the http://wp-cli.org instructions (above curl\ninvocation) resolved many challenges I was having.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/2390#issuecomment-172882609.\n. \n",
    "ahmadawais": "Thanks for the quick response @danielbachhuber !\nHere's my .zshrc file and the exact lines where I have a few aliases and a function for WP CLI https://github.com/ahmadawais/dotFiles/blob/master/.zshrc#L409-L454\nThis is really annoying, most of the time a new tab just gets stuck. Any advice would be appreciated. Pointers about where to look in. What is the auto-run directory? \n. @danielbachhuber  :(\nIt's installed in the local bin /usr/local/bin/wp. See if you could suggest something.\n. @danielbachhuber Found the issue. \nIt was a buggy alias \n```\nalias wpdb=\"wp post delete $(wp post list --post_type='vr_booking' --format=ids)\"\n```\nI deleted WPCLI and ZSH told me the error\n```\n/Users/ahmadawais/.zshrc:457: command not found: wp\n```\nThen I removed this alias and reinstalled WPCLI. \nEverything is fine now. \nJust in case anyone gets the same error.\n. @danielbachhuber Huge props for your work at WPCLI as the current maintainer of the project. I have it on my to-do list to contribute to WPCLI project, I am a terminal junkie and absolutely love WPCLI. Over time, I have built certain routines to go along with my workflow.\nAs far as the sponsorship is concerned, I think the best way to go about it is KickStarter as well as asking for one or two agencies to sponsor design of the new site.\n. @danielbachhuber Let me know what you need to reproduce this issue. It is not specific to my system. \nHere's the bash script for backup and restore setup an instance of Ubuntu 16.04 on DO or Vultr and you'll be able to reproduce this issue. \nAny suggestions or pointers? What could be the cause?. Thanks for responding. \nMy bad I forgot to mention. It's EasyEngine 3.7.4. MySQL (10.1.22-MariaDB).\n. OK, let's move this chat there. . ",
    "thebeline": "After digging, it seems this is possible, with the config.yml property require:\nrequire:\n    - /path/to/db_override.php\n<?php\ndefine(DB_USER, 'privileged_user');\ndefine(DB_PASSWORD, 'privileged_password');\nI would have rathered it was possible using the dbuser and dbpass directives, on the root, or the extra-php directive, but this will work fine enough.  Sorry to bother you.\n. Ack, I see now that extra-php is explicitly for generating the wp-config.php file.  Alas.  require it is.\n. ",
    "theuruguayan": "I actually figure out why is doing that, you need to first create the configuration file before installing wordpress you need to pass the --dbhost=remoteip, then wp-cli will take that data per default then it will work. If not it will not because it seems to fail when there is no mysql.sock on the server ( is not reading the /root/.my.cnf either)\ncould be nice to be able to do wp-cli --host=remoteip so it will create the wordpress config file / etc automatically.\n. ",
    "kevinquinnyo": "Can we reopen this?  I don't know how I'm supposed to run commands when the server is either remote, or configured to use local TCP/IP (not a UNIX socket).\nI think it's possible, incidentally with wp core config since there is a dbhost= option that both configures and uses that host for it's connection.  No such option seems to exist for other commands, such as wp-cli --allow-root core install which will result in an error like this:\n```\nwp-cli --allow-root core install --url=\"some-site.com\" --title=\"Some Title\" --admin_user=\"some_user\" --admin_password=\"p4ssw0rd\" --admin_email=\"email@example.com\"\nPHP Warning:  mysqli_real_connect(): (HY000/2002): Can't connect to local MySQL server through socket '/var/run/mysqld/mysqld.sock' (2) in /var/www/...\n[..snip..]\nError: Error establishing a database connection\n```\nNote that I can access mysql just fine, manually:\n```\nnetstat -tnlp | grep mysql\ntcp        0      0 127.0.0.1:3306          0.0.0.0:*               LISTEN      28921/mysqld    \nmysql -u root -h 127.0.0.1 -p\nEnter password: \nWelcome to the MySQL monitor.  Commands end with ; or \\g.\n[..snip..]\n```\n. @danielbachhuber  Oh, I see it now.  DB_HOST in wp-config.php needs to be '127.0.0.1' -- for some reason it was 'localhost' in this wp-config.php which was making mysql try the unix socket.  If I switch localhost to 127.0.0.1 in wp-config.php it works. \nThis must have been a wp-config.php that was not installed by wp-cli.  Thanks for helping me get to the bottom of this!  We can close now.\n. ",
    "AlexeyKrivoruchko": "My wp-config.php file:\n\nphp\n// Disables all auto updates.\ndefine( 'AUTOMATIC_UPDATER_DISABLED', true );\n// Disables all core updates.\ndefine( 'WP_AUTO_UPDATE_CORE', false );\n// Disable editing theme files via wp-admin\ndefine( 'DISALLOW_FILE_EDIT', true );\n// Disable native WP-cron\ndefine( 'DISABLE_WP_CRON', true );\n// Set localization language\ndefine( 'WPLANG', 'ru_RU' );\n\nif ( isset( $_SERVER['MY_ENV'] ) && $_SERVER['MY_ENV'] ) {\n    $env = $_SERVER['MY_ENV'];\n}\ndefine( 'MY_ENV', $env );\n\n// wp-config-env.php, where my DB connection\n$configFile = **DIR** . '/wp-config-' . MY_ENV . '.php'; \n\ninclude_once( $configFile );\n\n/*\\* Absolute path to the WordPress directory. */\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(**FILE**) . '/');\n\n/*\\* Sets up WordPress vars and included files. */\nrequire_once(ABSPATH . 'wp-settings.php');\n</pre\n\n\nand my wp-config-env.php file:\n\nphp\n// Enable updating  files via WP\ndefine( 'FS_METHOD', 'direct' );\n\n// *\\* MySQL settings - You can get this info from your web host *\\* //\n/*\\* The name of the database for WordPress */\ndefine('DB_NAME', 'my_db_name');\n\n/*\\* MySQL database username */\ndefine('DB_USER', 'my_db_user');\n\n/*\\* MySQL database password */\ndefine('DB_PASSWORD', 'my_db_pass');\n\n/*\\* MySQL hostname */\ndefine('DB_HOST', 'localhost');\n\n/*\\* Database Charset to use in creating database tables. */\ndefine('DB_CHARSET', 'utf8mb4');\n\n/*\\* The Database Collate type. Don't change this if in doubt. */\ndefine('DB_COLLATE', '');\n\n/**\n- WordPress Database Table prefix.\n  *\n- You can have multiple installations in one database if you give each\n- a unique prefix. Only numbers, letters, and underscores please!\n  */\n  $table_prefix  = 'wp_';\n\n/**\n- For developers: WordPress debugging mode.\n  *\n- Change this to true to enable the display of notices during development.\n- It is strongly recommended that plugin and theme developers use WP_DEBUG\n- in their development environments.\n  *\n- For information on other constants that can be used for debugging,\n- visit the Codex.\n  *\n- @link https://codex.wordpress.org/Debugging_in_WordPress\n  */\n  define('WP_DEBUG', true);\n  </pre\n\n\n. Thank you, that worked. I use env setting option!\n. ",
    "agentmoller001": "Thanks! I was receiving the same error as well.\nError establishing a database connection\nif ( defined( 'WP_CLI' ) && WP_CLI ) worked great.\nI needed to use a TCP connection for wp-cli instead of a Unix socket. Adding this to the wp-config.php fixed my issue as well.\n```\n/* Tell WP-CLI to use TCP instead of socket connection /\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n/* MySQL hostname for WP-CLI /\ndefine('DB_HOST', '127.0.0.1:3306');\n} else {\n/* MySQL hostname /\ndefine('DB_HOST', 'localhost:3306'); }\n```\nReference - https://www.howtoforge.com/community/threads/ispconfig-3-wp-cli.73682/#post-346741\n. ",
    "A5hleyRich": ":+1: \n. ",
    "mautematico": "Thank you very much!\nI'll keep an eye on https://github.com/danielbachhuber/wp-rest-cli\nFor those who may be interested, I managed to get what I need in a dirty way, using cgi:\nhttps://gist.github.com/mautematico/eb2351dc5362da54dc29\nI'm using cgi here just because I don't need (nor want) to load ALL the wordpress things to display a single post. I know this solution is not optimal, but it's enough for me. :D \n. Thank you very much!\njq seems exactly what I need on this case, I'll give it a try!\n. Yep, I think this will do the trick.\nFor those who may be interested, have a look at this:\nhttps://realguess.net/2014/05/18/split-a-large-json-file-into-smaller-pieces/\n. And... Here you have!\nhttps://gist.github.com/mautematico/5567fb3f1cad166dbc82\nAgain, Thank you, @danielbachhuber \n. ",
    "johnReeve": "I suppose I should add that I can just \nswitch_theme();\nBut it would be nice to stick with the very convenient API you've written.\n. ",
    "sakrow": "I have the same problem, the code is (one example):\nwp-cli theme update --dry-run --all --format=summary --path=/var/www/vhosts/domain.com/httpdocs \n--allow-root\nAnd\nwp-cli theme update --dry-run --all --format=table --path=/var/www/vhosts/domain.com/httpdocs \n--allow-root\nThe output:\n\n. The export from the Wordpress admin interface works fine.\n<item>\n        <title>Cr\u00eaperie La Saint-Georges</title>\n        <link>http://ti-domain.fr/city/rennes/listing/creperie-la-saint-georges-rennes/</link>\n        <pubDate>Tue, 17 Feb 2015 13:03:27 +0000</pubDate>\n        <dc:creator><![CDATA[jean-albert]]></dc:creator>\n        <guid isPermaLink=\"false\">http://domain.fr/?post_type=listing&#038;p=418</guid>\n        <description></description>\n        <content:encoded><![CDATA[]]></content:encoded>\n        <excerpt:encoded><![CDATA[]]></excerpt:encoded>\n        <wp:post_id>418</wp:post_id>\n        <wp:post_date><![CDATA[2015-02-17 13:03:27]]></wp:post_date>\n        <wp:post_date_gmt><![CDATA[2015-02-17 13:03:27]]></wp:post_date_gmt>\n        <wp:comment_status><![CDATA[open]]></wp:comment_status>\n        <wp:ping_status><![CDATA[open]]></wp:ping_status>\n        <wp:post_name><![CDATA[creperie-la-saint-georges-rennes]]></wp:post_name>\n        <wp:status><![CDATA[publish]]></wp:status>\n        <wp:post_parent>0</wp:post_parent>\n        <wp:menu_order>0</wp:menu_order>\n        <wp:post_type><![CDATA[listing]]></wp:post_type>\n        <wp:post_password><![CDATA[]]></wp:post_password>\n        <wp:is_sticky>0</wp:is_sticky>\n        <category domain=\"listingtags\" nicename=\"35000\"><![CDATA[35000]]></category>\n        <category domain=\"listingtags\" nicename=\"bretagne\"><![CDATA[Bretagne]]></category>\n        <category domain=\"listingcategory\" nicename=\"creperies\"><![CDATA[Cr\u00eaperies]]></category>\n        <category domain=\"listingtags\" nicename=\"ille-et-vilaine\"><![CDATA[Ille-et-Vilaine]]></category>\n        <category domain=\"listingtags\" nicename=\"rennes\"><![CDATA[Rennes]]></category>\n        <wp:postmeta>\n            <wp:meta_key><![CDATA[_aioseop_keywords]]></wp:meta_key>\n            <wp:meta_value><![CDATA[creperie, cr\u00eaperie, rennes]]></wp:meta_value>\n        </wp:postmeta>\n    </item>\n. I'm using the wp-cli 0.22 version, the WP have a WPML plugin but the WP not have any post in other languages, only in french \nThe admin panel is in english.\nYou need other data type?\nWP Version = 4.4.2\nWPML Version = 3.3.6\nPHP Version = 5.6.18\nTheme = SportFinder\nTheme Version = 1.0.12\nTeEvolution = 2.2.16 \nTeEvolution Directory = 2.0.14\n. ",
    "Falc": "@danielbachhuber I see that it only supports table and summary, and both of them display the same output (@sakrow posted a good example).\nIs theme update going to support JSON as format? How could I help with it?\n. @danielbachhuber we are using WP-CLI for WP management. Suppose we have 3 servers: wpmanager, wp1 and wp2. wpmanager has a web UI that allows to manage WP instances installed on wp1 and wp2 through SSH (or a REST API), so we need commands to output JSON for interoperability purposes.\nThe web UI runs daily checks to show outdated core, plugins and themes, and stores info about the available updates for displaying some alerts and keeping the action history/log. In some cases the core, plugins and themes are updated automatically, and we need to know which ones where updated and the version.\nSo we would run something like...\nwp-cli theme update --all --format=json --path=/wordpress/wptest.com\n...and expect JSON output to know the new version and/or wether the update finished successfully:\njson\n[\n    {\n        \"name\": \"twentyfourteen\",\n        \"status\": \"inactive\",\n        \"version\": \"1.5\",\n        \"update_version\": \"1.6\"\n    },\n    {\n        \"name\": \"twentyfifteen\",\n        \"status\": \"active\",\n        \"version\": \"1.3\",\n        \"update_version\": \"1.4\"\n    }\n]\nSince theme update does not output JSON, we decided to parse the output when format is summary or table, but we realized that both of them are identical. This is not a blocking issue for us, since we can workaround all of this by running wp-cli theme list --format=json before and after updating the themes and comparing the result. But it is strange to have JSON format support only for some commands.\n. ",
    "tannerm": "Sweet! I just imported a bunch of images and their attachment pages are all broken presumably since they were side-loaded without a title. Not 100% on that, but that's my running theory.\nI'm pretty slammed this week but happy to submit a patch next week.\n. ",
    "colmrs": "Thank You!\nYou were correct, I simply didn't up it high enough, sorry about that. \nHave a great day!\n. ",
    "lordgiotto": "My code is organized in this way:\nfunctions.php in theme root folder require_once different php file from inc/ directory. Everyone of this file contains a single istance of a class that handle specific funcitonality (like a lot of plugins that use hooks in __construct, public methods for that hooks and private methods for class internal use) and maybe some global function for site wide functionalities.\nI've just noticed that defined class and functions are working, sorry for that: the problem is that i usually use globals for conveniente inside the site wide functions ( gobal $istance; $istance->method() )... I'll rewire classes like singletons to avoid it.\nI'm really sorry!! Howevet the issue is still real only for globals.\n. ",
    "iamra": "@danielbachhuber this is after exporting the user tables and importing into a single install. the users that do not belong to the sub site are listed as none role in the dash, empty string in the role field in cli.\n. Thank you for your suggestion. I guess I will output the list to a file and then remove any users with roles before feeding this list back to wp-cli for removal.\n. ",
    "jorfermo": "1.- It works fine\n2.- No, they don't\n3.- The only \"special\" thing that I can think of is that the database is pointing to a different server\n. What do you mean by wpdb drop-in?\nThis is my wp-config. I removed all the passwords and db server name\n```\n<?php\n/ Don't try to create this file by hand. Read the README.txt and run the installer. /\n//  MySQL settings  //\ndefine('DB_NAME', 'blogs');    // The name of the database\ndefine('DB_USER', 'blogs_user');     // Your MySQL username\n.....\ndefine('DB_HOST', '');    // 99% chance you won't need to change this value\ndefine('DB_CHARSET', 'utf8');\ndefine('DB_COLLATE', '');\ndefine('VHOST', 'yes');\n$base = '/';\n// Change SECRET_KEY to a unique phrase.  You won't have to remember it later,\n// so make it long and complicated.  You can visit http://api.wordpress.org/secret-key/1.0/\n// to get a secret key generated for you, or just make something up.\n...........\n// double check $base\nif( $base == 'BASE' )\n   die( 'Problem in wp-config.php - $base is set to BASE when it should be the path like \"/\" or \"/blogs/\"! Please fix it!' );\n// You can have multiple installations in one database if you give each a unique prefix\n$table_prefix  = 'wp_';   // Only numbers, letters, and underscores please!\n// Change this to localize WordPress.  A corresponding MO file for the\n// chosen language must be installed to wp-content/languages.\n// For example, install de.mo to wp-content/languages and set WPLANG to 'de'\n// to enable German language support.\ndefine ('WPLANG', 'es_ES');\n// uncomment this to enable wp-content/sunrise.php support\ndefine('SUNRISE', 'on' );\ndefine('WP_DEBUG', false);\ndefine('WP_DEBUG_LOG',true);\ndefine('WP_DEBUG_DISPLAY', false);\ndefine('WP_ALLOW_REPAIR', TRUE);\ndefine('WP_MEMORY_LIMIT', '512M');\ndefine( 'WP_POST_REVISIONS', 2 );\n// Uncomment and set this to a URL to redirect if a blog does not exist. (Useful if signup is disabled)\n// Browser will redirect to constant( 'NOBLOGREDICT' ) . \"?new=blogname\" where blogname is the unknown blog\n// define( 'NOBLOGREDIRECT', '' );\ndefine( \"WP_USE_MULTIPLE_DB\", false );\n/ That's all, stop editing! Happy blogging. /\ndefine('ABSPATH', dirname(FILE).'/');\nrequire_once(ABSPATH.'wp-settings.php');\n?>\n.\nwp option get home --url=**** --allow-root\nwpOpenID plugin not configured\n```\n. --skip-plugins does nothing and I still get the OpenID plugin error message\nNow I don't get the database error but it seems the command is not executed\n```\nwp site deactivate 149 --skip-plugins --allow-root --url=\nwp site archive 149 --skip-plugins --allow-root --url=\n```\nThen I check site with ID=149 in the network admin and it's active and not archived\n. Is there any way I can help you with the debugging?\nI can tell you that this worked with previous versions and suddenly stopped working. Unfortunately I cannot tell you exactly with what version because it's an automated process and I realized  it wasn't working anymore after a while.\n. Is there any debug option to get verbose output of what the command is doing?\n. ```\nwp site deactivate 149 --skip-plugins --allow-root --url=*** --path=/mnt/disco2/web/ --debug\nDebug: No readable global config found (0.006s)\nDebug: No project config found (0.007s)\nDebug: ABSPATH defined: /mnt/disco2/web/ (0.017s)\nDebug: Set URL: blogs.upv.es (0.017s)\nDebug: Begin WordPress load (0.018s)\nDebug: wp-config.php path: /mnt/disco2/web/wp-config.php (0.018s)\nPHP Notice:  Undefined index: reset in /mnt/disco2/web/wp-content/mu-plugins/cets_blog_defaults.php on line 1050\nNotice: Undefined index: reset in /mnt/disco2/web/wp-content/mu-plugins/cets_blog_defaults.php on line 1050\nPHP Notice:  Undefined index: lsPluginVersion in /mnt/disco2/web/wp-content/themes/upv2015/functions.php on line 141\nNotice: Undefined index: lsPluginVersion in /mnt/disco2/web/wp-content/themes/upv2015/functions.php on line 141\nPHP Notice:  Use of undefined constant avada_enable_order_notes_field - assumed 'avada_enable_order_notes_field' in /mnt/disco2/web/wp-content/themes/upv2015/framework/woo-config.php on line 947\nNotice: Use of undefined constant avada_enable_order_notes_field - assumed 'avada_enable_order_notes_field' in /mnt/disco2/web/wp-content/themes/upv2015/framework/woo-config.php on line 947\nPHP Notice:  Use of undefined constant avada_woocommerce_review_order_after_payment - assumed 'avada_woocommerce_review_order_after_payment' in /mnt/disco2/web/wp-content/themes/upv2015/framework/woo-config.php on line 959\nNotice: Use of undefined constant avada_woocommerce_review_order_after_payment - assumed 'avada_woocommerce_review_order_after_payment' in /mnt/disco2/web/wp-content/themes/upv2015/framework/woo-config.php on line 959\nwpOpenID plugin not configured\n```\n. Ok that was a problem. There was a line in that plugin killing wp-cli execution\nThank you very much!\n. ",
    "jgraup": "That was the problem exactly. I never had a way to check that error until now so thank-you for the quick response.\nAfter adding some empty checks I don't have any errors, but I also don't have any output. Is there something else that can cause this to go silent? --info shows but nothing beyond that.\n. Thanks for the --debug tip! I'm trying to teach myself this as I go and I appreciate the fast response.\nLooks like more assumptions of the server that are failing. I'll clean those up but looking at the output, do I need a global config or project config for the future? \n``` bash\nDebug: No readable global config found (0.057s)\nDebug: No project config found (0.059s)\nDebug: ABSPATH defined: /var/xyz/www/ (0.077s)\nDebug: Begin WordPress load (0.077s)\nDebug: wp-config.php path: /var/xyz/www/wp-config.php (0.077s)\nPHP Notice:  Undefined index: SERVER_PORT in /var/xyz/www/mu-plugins/lame.php on line 143\n``\n. I removed the last error but silence again. I may have added too many direct access checks which could be causing it todie`. I'll double check everything.\nIs there a debug section on the wiki? Seems like this is basic stuff that could go into a section like that.\n. Looks like I had created an mu-plugins/GeoIP Blocker which also blocked anyone without a $_SERVER['HTTP_USER_AGENT'] defined. The random errors before might have been fine but the die was definitely causing the no show of data.\nNow I can see a whole slew of new notices. Would this be considered a wp-social-login issue or more bad server setup?\nbash\nBacktrace from warning 'session_start(): open(/my/php/session/sess_xyz123, O_RDWR) failed: Permission denied (13)' at /var/xyz/www/wp-content/plugins/wordpress-social-login/wp-social-login.php 63:\n  /var/xyz/www/wp-content/plugins/wordpress-social-login/wp-social-login.php 63 calling session_start()\n  phar:///usr/local/bin/wp/php/wp-settings-cli.php 286 calling include_once()\n  phar:///usr/local/bin/wp/php/WP_CLI/Runner.php 770 calling require()\n  phar:///usr/local/bin/wp/php/WP_CLI/Runner.php 721 calling load_wordpress()\n  phar:///usr/local/bin/wp/php/wp-cli.php 21 calling start()\n  phar:///usr/local/bin/wp/php/boot-phar.php 5 calling include()\n  /usr/local/bin/wp 4 calling include()\nThank-you for your help. I've been using WP-CLI locally recently and I hope to make it part of the everyday workflow.\n. Turns out, like many AWS EC2 issues, this is a permissions problem; root, apache and ec2-user walk into a bar... but only one can drink at a time.\nThe solution:\nsudo chown -R apache:group /my/php/session\nOk. No more errors. WP-CLI is working perfectly. My life is complete.\n. Similarly, it would be nice to use the alias as a location for rapid deployment.\nwp @local db import @remote\nwp @remote db export @local:/folder/for/my.sql\nI was playing around with pipes to do something similar without the filesystem requirement but I only tested locally with a new database;\necho \"$(wp @remote db export -)\" | wp @local db import -\nand compression seems like a must for a large DB;\nDB_EXPORT=$(echo \"$(wp @remote db export -)\" | gzip | base64 -w0); echo \"$DB_EXPORT\" | base64 -d | gunzip | wp @local db import -\n. Thanks @danielbachhuber - I figured it was a stretch. I'll stick to the other locations for questions like these in the future. Thanks for your time. \n. When the issue is revisited \ud83e\udd1e I could see this as an opt-in setting in the config.yml. Much in the same way you can disabled_commands  and set configurations per @alias to keep this process transparent and granular. \nOn a multisite with 85+ sites, I personally do not want to incur a performance hit running crons per site every 5 minutes or during ANY data migration tasks. I also don't want to have to remember to ask my ops team to make production config changes to maintain company privacy.\nHowever, I would happily contribute analytics to THIS project for any site I am working on that is not under some sort of NDA.. ",
    "shankie-san": "Ah, I wasn't aware of community commands!\nSure, @bones5 and I could work on this. It would be really useful for us.\n. ",
    "tommarshall": "Thanks @danielbachhuber.\nTo clarify, what exactly should the command be to pin the major and minor version but install the latest patch version?\nwp core update --minor --version=4.4\n?\n. Aah. I was describing the versions assuming semver's MAJOR.MINOR.PATCH, but I see that's not how they're describing things. That clarifies the issue. Thanks for the prompt response, and for adding --minor :+1:.\n. Thanks for the prompt response.\n\nCan you try running wp core update with the --skip-plugins and --skip-themes flags?\n\nThat worked.\nsh\n$ sudo -u www-data -H wp --debug core update --version=4.4.2 --locale=en_GB --skip-plugins --skip-themes\nDebug: No readable global config found (0.016s)\nDebug: No project config found (0.017s)\nDebug: ABSPATH defined: /var/www/htdocs/ (0.062s)\nDebug: Begin WordPress load (0.062s)\nDebug: wp-config.php path: /var/www/htdocs/wp-config.php (0.062s)\nDebug: Loaded WordPress (0.358s)\nDebug: Running command: core update (0.358s)\nUpdating to version 4.4.2 (en_GB)...\nDownloading update from https://en.wordpress.org/wordpress-4.4.2-en_GB.zip...\nUnpacking the update...\nSuccess: WordPress updated successfully.\n\nAlso, do other WP-CLI commands that make use of WordPress work as expected? Can you try wp option get home and share the output?\n\nGives a similar looking failure.\n``` sh\n$ sudo -u www-data -H wp --debug option get home\nDebug: No readable global config found (0.015s)\nDebug: No project config found (0.017s)\nDebug: ABSPATH defined: /var/www/htdocs/ (0.037s)\nDebug: Begin WordPress load (0.037s)\nDebug: wp-config.php path: /var/www/htdocs/wp-config.php (0.037s)\n$ echo $?\n255\n```\n. Ok thanks.\nThe only reference to WP_CLI that I could find was in w3-total-cache. I've deactivated the plugin and deleted the files in wp-content/plugins, however I'm still seeing the same issue.\nI can't find any remaining reference to WP_CLI in the whole of the htdocs. Is there anything else that I should be looking for?\n``` sh\n$ sudo grep -ri 'WP_CLI' *\n$ echo $?\n1\n$ sudo -u www-data -H wp --debug option get home\nDebug: No readable global config found (0.016s)\nDebug: No project config found (0.017s)\nDebug: ABSPATH defined: /var/www/htdocs/ (0.037s)\nDebug: Begin WordPress load (0.037s)\nDebug: wp-config.php path: /var/www/htdocs/wp-config.php (0.049s)\n$ echo $?\n255\n``\n. Thanks. Didn't realise I could pass a slug to--skip-plugins`. I should have checked the docs.\nLooks to be an issue with addthis:\nsh\nfor slug in `ls wp-content/plugins`; do sudo -u www-data -H wp --skip-plugins=\"$slug\" option get home && echo $slug; done\nhttp://example.com\naddthis\nWe're on a slightly older version of that plugin, so I'll upgrade to the latest and see if that helps. \nThanks again for your help with this.\n. FYI upgrading the addthis plugin from version 5.1.2 to 5.2.3 resolved the issue. Thanks again for your help with this.\nLooks like addthis fixed an issue in 5.2.2. https://wordpress.org/plugins/addthis/changelog/\n. ",
    "dirad": "@danielbachhuber i did mean the wp-cli tool, and not the entirty of wordpress.. \nYour switch help me plenty though. thanks again.\n. ",
    "gnowland": "Ah, alright.\nExpected output should probably be added to the man page \ud83d\ude09\n. ",
    "adis-io": "Ruby's irb or pry :) But if PHP's shell also exits, so I think it's ok.\n. ",
    "mbovel": "Oh sorry, I didn't see the issue you're referring to.\nI see the problem for $wp_local_package.\nI understood how to use --version and --local, but I'm concerned about the security of doing wp core verify-checksums alone without arguments. Is it not a security issue to execute the files before checking them?\nCouldn't we verify the checksums directly during wp core download, as we have all needed information about version and locale here?\n. You're welcome, thanks to you for your amazing tool :)\nI'm sorry I read CONTRIBUTING.md too late, I juste noticed that I should have made a separate branch for my changes, is there any way I can correct this or is it too late?\nAlso, would you like me to write documentation block for the find_var method? If yes, can I do it in mbovel/master?\nHave a nice day!\n. Oh nice, maybe I can add it to my pull request #2464 ? :) I'll try to make this tomorrow.\n. Corrected \ud83d\ude04 . Why is this unsafer than loading the whole WordPress installation? Does WordPress redefine this global somewhere? (I've done a quick search and it doesn't seem to be the case.)\n. I hesitated for the name, I choose get_version() because, after all, the file is named version.php. But get_wp_details() sound perfectly OK to me too.\n. ",
    "bhagerty": "Thanks for the quick response. Yes, the table prefix is registered in wp-config.php. If you're asking me how the site loaded before running the search and replace, my answer is that the front page loaded successfully. I didn't try to load any other pages because they weren't going to work until the URLs were replaced.\nI'm a little confused by your answer. You say:\n\nYou can use wp search-replace   --all-tables to search and replace against all tables in the connected database. WP-CLI uses the tables registered to $wpdb by default.\n\nMaybe the --all-tables switch would have worked, but I'd call that a workaround, not really a solution. \nDoesn't it seem strange to you that wp db tables and wp db repair return a different set of tables? And doesn't it seem strange that wp search-replace [string1] [string2] --dry-run showed NO affected tables, even the small set of tables returned by wp db tables, when it's a fact that even this small set of tables included [string1]? \nIf you're saying that somehow my tables didn't get registered to $wpdb in a way that WP-CLI understood, then how can I solve that problem? Everything in wp-config.php was set up properly, and as I said, the PHP script from interconnect/It worked flawlessly to search and replace the strings in this database. So it's hard for me to see how this could be a problem with my setup, as opposed to a bug in WP-CLI.\nI love WP-CLI, but it seems like something related to the search-replace function needs to be fixed. I am happy to provide any information that I can to help you fix it. (I don't know enough to fix it myself.)\n. DUH!\n. ",
    "artifex404": "I agree, it is helpful in many cases. However, even if wp db create is invoked with a --quiet parameter, it still shows MySQL error. A WP-CLI notification would be nicer.\nA new useful feature for the matter would be a new command: wp db exists.\n. ",
    "s7e7v7e7n7": "--only-missing not for me. I need to create all the pictures again. \n--skip-delete not skip big files\nbut problem have just big images. maybe problem is my php.ini file... i dont know...\nis it possible? How do I make an adjustment in php.ini (or another config) process large images ?\nIs there a limit to regenerate process?\n. ",
    "plutocrat": "Thanks. That did indeed help, and I can confirm that wp-cli does actually start up now, so I can use some non-theme related commands. I'll see what the theme developer has to say on the matter. \n. So yeah, tried to contact the developer but they won't let you submit any support requests without purchasing a theme. \nTried a bit of debugging. Commented out the first function, and then got another PHP Fatal error from another file in the theme framework which referenced tf_add_shortcode. There were too many references for me to deal with, so had to abandon ship. Will stick with the --skip-themes workaround. \n. ",
    "nylen": "\nIgnoring keys is expected behavior for wp search-replace.\n\nHi @danielbachhuber - out of curiosity, why does wp search-replace not replace inside serialized array keys too?  Is this intentional, or would a patch be accepted to change this?. Cool - we should make sure we don't modify array key order.  Any other potential gotchas you can think of?  Edit: another one: we should not do the key replacement if the array already has a key that is the same as the replacement value.\nAny reason to go with an environment variable rather than a documented CLI option?. >Is this environment variable already implemented ?\nNot yet. I've been meaning to look at this for a while but haven't had time yet.\n\nIt really appeared to me as an undesired effect, when you do a search replace you expect every occurence of the string to be replaced not just the values of the serialized data..\n\nFor what it's worth, I also think replacing array keys should be the default behavior, as long as the new key doesn't already exist in the array.. Another option would be to make replacing keys the default behavior.  This is what most people would expect, I think.\nStill need to look out for edge cases:\n\ndon't modify array key order\nmake sure the replacement array key does not already exist. That is not simpler or safer.. FWIW, in https://github.com/WordPress/gutenberg/pull/986 and https://github.com/WordPress/gutenberg/pull/1022 we've simplified our phpcs config significantly, to the point where all options are contained inside phpcs.xml (which is used by default), and no find or custom command-line flags are needed.. \n",
    "Tofandel": "Is this environment variable already implemented ?\nI have a serious use case for it, I've tried changing the slugs of woocommerce attributes with wp search replace (to merge attributes for example) and then I noticed that the attributes in the products metas where not renamed (because they are stored as keys and not values)\nIt really appeared to me as an undesired effect, when you do a search replace you expect every occurence of the string to be replaced not just the values of the serialized data... What about converting the serialized data to array then to json and doing the replace on the string? And then reserialize it ? It's much slower but the simpler and safer way to do it. ",
    "mkdizajn": "Hey guys why did this thread stopped,, feel like this is needed much? (WooCommerce anyone?)\nCan we add some custom flag for ex: --keys=true default=false\n. ",
    "tevert": "Yeah, on further inspection, the aptitude package actually includes a custom wp-config.php. That's definitely part of the problem here. \n\nI think adding a custom search term fails the tenet of decisions, not options. Using a custom search term is a minority use case, and a small one at that. The alternative, modifying wp-config yourself, is perfectly reasonable.\n\nI'll agree that it's likely a small use case, but I disagree that manual edits are perfectly reasonable. Wordpress's huge failing point is its lack of automation, and since this tool is designed to help compensate for that deficiency, I would expect that it would strive to more fully solve that problem. It's entirely possible that I've misunderstood the vision of the project though. \n. ",
    "maraymer": "Hi,\nI'm using the following:\nwp user meta add 3 test fun --format=json --path=location of my wordpress\nMatthew\n. Daniel,\nThanks.  I think I understand my confusion now.  I was thinking in terms of output -- but in this case there isn't anything more than a confirmation of output.  So, it does make sense that the format would refer to the input!\nMatthew\n. ",
    "AbdealiJK": "@danielbachhuber Thanks for the quick reply.\nBut that didnt work, still giving the same error\n. Ah, I never tried opening the wordpress installation as civicrm hadnt completed doing it's stuff (failed in between).\nLet me try that out.\n. Well, that's interesting. When I go to the \"Add plugins\" page, and try to browse, I get the same error.\nSo, I guess this is not a wp-cli issue\nAlthough, could you give me some pointers on what the issue could be ? Or even which log I can look at ?\n(The server error logs say the same error as I got with wp-cli.)\nPS: Closing this issue as it's not a wp-cli issue.\n. Thanks for that bit of info :) I'll figure it out\n. Just an FYI for people who get the same issue:\nhttps://wordpress.org/support/topic/cannot-install-plugins-unexpected-http-error solves the issue\nThey recommend changing the timeout in wp-admin/includes/plugin-install.php for the function wp_remote_post() from 15 to 60.\nFor some weird reason if this is done, the page loads within 2-3 seconds ... (Not sure why it timed out in the first place)\n. ",
    "garrett-eclipse": "Thanks @danielbachhuber, if the db already exists from a failed install will not dropping it cause any issues with the 'wp core install' that follows the 'wp db create' command? Will it's contents simply be replaced?\nOr would it make more sense to tie the continue execution command to the wp db drop command like\nwp db drop --yes || true\nAppreciate your input. Thanks\n. Thanks @danielbachhuber \nI would like the script to function regardless if it's a new install or replacing an existing install (be it corrupt or not). To me it seems wp db reset only works on existing so would have to either reset or create depending on there existing a db already.\nI opted for the drop command with the '|| true' conditional so if there's a database existing it will be removed, otherwise nothing will occur and we'll move along to creating the database.\nI appreciate you hashing that out with me, your input has been very helpful.\nCheers\n. Hi @artursopelnik here's the original article my bash script concept and initial version came from;\nhttps://indigotree.co.uk/automated-wordpress-installation-with-bash-wp-cli/\nMine just does a few more custom plugin/theme installs but the core script hasn't changed much.\nOne core change I did make that is mentioned in this thread is the dropping of existing database which is done like so;\n```\ncreate database, and install WordPress\nif mysql --user=$dbuser --password=$dbpass -e \"use $dbname\"; then\n    wp db drop --yes\nfi\nwp db create\n```\nLet me know if you get stuck or need some guidance, happy to help.\nCheers. ",
    "artursopelnik": "@garrett-eclipse Could you show me how your bash script work? Maybe it could help me \u2026. @garrett-eclipse if the database not exists your condition gives me an error\nERROR 1049 (42000) at line 1: Unknown database 'ars_wordpress'. ",
    "benoitchantre": "Thanks!\n. After having looked at the source, I see that the wp scaffold _s relies on underscores.me and I understand better your answer. I thought wp-cli was doing the process directly.\n. You can run a command like wp scaffold post-type my-post-type and it will return\nfunction my_post_type_init() {\n    register_post_type( 'my-post-type', array(\n        'labels'            => array(\n            'name'                => __( 'My post types', 'YOUR-TEXTDOMAIN' ),\n            'singular_name'       => __( 'My post type', 'YOUR-TEXTDOMAIN' ),\n            'all_items'           => __( 'All My post types', 'YOUR-TEXTDOMAIN' ),\n            'new_item'            => __( 'New my post type', 'YOUR-TEXTDOMAIN' ),\n            'add_new'             => __( 'Add New', 'YOUR-TEXTDOMAIN' ),\n...\nI read again the Codex and Code Reference: dashes are allowed but there are some drawbacks :\n\nif the post type contains dashes you will not be able to add columns to the custom post type's admin page\n\nI have noticed another drawbacks when using a filter of Polylang to set that the posts are translatable: it doesn't work when the post name has dashes.\nI think it is better to avoid to register a post type with dashes, because you loose a lot of time to understand why some things don't work. Then you loose time again to make an upgrade process to update the entries in the database.\n. ",
    "markkimsal": "when i tried to search and replace my production URL with development URL using the wp_*_options syntax it snagged a table created by a plugin and gave the following error.\nWordPress database error Unknown column '1name' in 'where clause' for query SELECT value FROM wp_wp_super_edit_options WHERE id=1name=tinymce_scan made by include('wp-cli/php/wp-cli.php'), WP_CLI\\Runner->start, WP_CLI\\Runner->_run_command, WP_CLI\\Runner->run_command, WP_CLI\\Dispatcher\\Subcommand->invoke, call_user_func, WP_CLI\\Dispatcher\\CommandFactory::WP_CLI\\Dispatcher\\{closure}, call_user_func, Search_Replace_Command->__invoke, Search_Replace_Command->php_handle_col, W3_Db->query, W3_DbCache->query, W3_DbCallUnderlying->query, W3_Db->query, W3_DbProcessor->query, W3_Db->default_query\nAs you can see, the WHERE clause was \"id=1name=tinymce\" instead of \"id='1' AND name='tinymce'\"\n. I would have to refactor a lot of php_handle_col in the Search_Replace_Command class.  Would that amount of rework be accepted in a PR?\n. I didn't see the behat stuff, was only looking at tests/* and thinking about having to mock $wpdb or refactor the $where_sql generation parts into another private function\n. ",
    "mingfyp": "I tried wp package ,wp --require=,  global config, all result in the same error.\nhere is my wp --info output \n\nPHP binary:   /usr/local/bin/php\nPHP version:  5.5.30\nphp.ini used: /usr/local/lib/php.ini\nWP-CLI root dir:  phar://wp-cli.phar\nWP-CLI packages dir:  /home/{user}/.wp-cli/packages/\nWP-CLI global config: /etc/wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version:   0.23.0-alpha-1116515\n\nhere is my wp --info output by calling from php\n\nPHP binary:   /usr/local/bin/php\nPHP version:  5.5.30\nphp.ini used: /usr/local/lib/php.ini\nWP-CLI root dir:  phar://wp-cli.phar\nWP-CLI packages dir:  /.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version:   0.23.0-alpha-1116515\n. and I get this when trying to uninstall the package\nFatal error: Call to undefined function add_action() in /home/{user}/.wp-cli/packages/vendor/wp-cli/wp-super-cache-cli/wp-super-cache-cli.php on line 20\n. \n",
    "adriantoll": "Yep, that works - I can feed that back to the hosting team to see if they'd consider changing their setup.  However, would it make sense to you (in both technical and cost / benefit terms) if any require / include functions in wp-config.php respected the --path flag if the strings were were relative?\n. Yep, they (Pagely) have a reasonably complex setup, and /wp-admin/ definitely works!  I take your point about absolute paths though - I'll suggest they use that to require that file.  Thanks for the pointer.\n. ",
    "rems75": "Thanks for your answer!\nIt helped me find the problem: during a server migration, the wordpress user lost its privileges over the sql db, hence could not create any table. \n. ",
    "wesm87": "One way that I know of would be to initialize a git repository for the new Composer package, then specify a custom repository URL pointing to the local Git repo. For example:\n\"repositories\": [\n  {\n    \"type\": \"vcs\",\n    \"url\": \"/path/to/new/package\"\n  }\n],\n\"require\": {\n   \"author/package\": \"dev-master\"\n}\nI've used this method before so I could test local changes without having to push everything up to a remote repository. It looks like you're requiring the author information in the form of author/package so that's not an issue, but I'm not sure how complicated it would be to manage the list of custom repositories, and if someone were to move the package to a different folder it would break the custom repository URL. Still, it might be worth exploring the idea.\n. \ud83d\udc4d\n. :+1:  PR submitted ( #2588 )\n. Sorry if I'm missing something obvious but I don't see what would need updating in bootstrap.mustache or test-sample.php. Could you be more specific about what needs to be changed?\nAs for the tests, it looks like I need to update the Scaffold a plugin scenario to check the main plugin file headers, since it's not doing that currently. That being the case, should I add checks for all of the headers, or just the updated ones (Plugin Name and @package)?\n. Ah okay, my forked repo wasn't up-to-date with the changes from the last week or so, so the template files I had didn't actually have those file headers. I'll update those now and then push the changes up.\n. @sourcerer-mike As a temporary fix you can add the following line to your composer.json:\n\"composer/composer\": \"~1.0.0@dev\"\nBasically what that does is set the minimum stability to \"dev\" for Composer, while still using \"stable\" for all your other packages.\n. @danielbachhuber Yeah I don't think there's anything you can do on your end until a stable version of Composer is released. Composer uses the minimum-stability setting for any packages that you install, as well as any dependencies those packages try to install. This article outlines the problem pretty well. The default value is stable so anyone who doesn't specify a minimum stability of beta or lower will run into this issue trying to install WP-CLI.\nFor anyone who's having this issue, there are two different ways you can get around it:\n1 - Manually specify the minimum stability for Composer as I mentioned in my previous comment. You can use @dev, @alpha, or @beta (dev includes both alpha and beta).\n2 - Change your minimum stability to beta and then add \"prefer-stable\": true in the root of your composer.json, like so:\njson\n\"minimum-stability\": \"beta\",\n\"prefer-stable\": true\n. ",
    "haroldangenent": "To my knowledge, there would be three (simple) options to include a local repository:\n- Add a repository with \"type\": \"vcs\" (as mentioned above)\n- autoload the local package\n- Add a repository with \"type\": \"path\" (as mentioned above)\nThe path option would probably be the most appropriate option in this case. There would be no downside of actually needing a VCS repository that only checks out committed files (type: vcs).\nThe only minor downside (that all options have) is that you'll have to re-add the local package when composer.json is changed, for example when changing the autoloaded file in the package (default when scaffolding: command.php).\nvendor/\nIn all cases, packages cannot be loaded from vendor/. To my knowledge, this is not possible (and probably not recommended), because Composer either checks out the files to vendor/ (type: vcs) or creates a symlink there (type: path). Even franzliedke/studio, created for local development with Composer, doesn't support this (it uses type: path as well).\n. ",
    "hinoue-work": "Wow!  This is great.  Thanks.\nI just tried it out - It works.\n. Here is my setup:\nI added the usual\nphp\ndefine('WP_PROXY_HOST', \"<my proxy's address>\");\ndefine('WP_PROXY_PORT', \"<my proxy's port>\");\nto my wp-config.php file.\nUsing wireshark, I looked at the traffic when I installed a plugin from the administrator web interface, and when I used the plugin install <slug> --activate command.  Installing a plugin from a browser uses the proxy settings.  Using the command line does not.  I can see it trying to directly contact the wordpress servers.  I've started tracing the differences in the execution path between the two, but haven't gotten far, yet.\nI have php5-curl installed, if you think it makes a difference.\n. The behavior is different depending on whether php5-curl is installed.  It ignores the proxy settings if I have it installed.  Without it, I receive the error message expected in your new test case, even with proper proxy settings.  The internal error message is:\nstream_socket_client(): unable to connect to  (Failed to parse address \"\")\"\n. I get the behavior you describe if I uninstall php5-curl.  If I have php5-curl installed, wp-cli will install the plugin without using the proxy settings.  The web gui will install the plugin with the proxy in both cases.\nWithout php5-curl, however, I always get the error with wp-cli, even when the proxy settings are correct.\n. ",
    "tarunlalwani": "Just to add the user is root and the directory in the error does exist with proper rights. I can reproduce the problem using normal php also for the same directory but not for /tmp.\nWhat could be the reason?\n. Okie it seems the issue was because of hhvm. I had php set to HHVM as default and that was causing some issue. Replace it using below\nroot@TARLABS2:~$ update-alternatives --install \"/usr/bin/php\" \"php\" \"/usr/bin/php5.6\" 90\nAnd now it works fine\n. ",
    "theDanielJLewis": "Oops, yes. I'm talking about wp search-replace.\nBut I'm pointing out that there are these holes, despite what controls we have. Especially if you target a site with url=, it misses the important network-level tables (wp_blogs and wp_domain_mapping) for the search-and-replace operation.\n. In that case, I suggest removing or editing this example from the documentation:\n```\nTurn your production database into a local database\nwp search-replace --url=example.com example.com example.dev wp_*_options\n```\nBecause this is not thorough enough to change the domain.\n. From my limited dev knowledge, I would suggest WP-CLI simply recognize serialized data regardless of where it appears in the field. It does, after all, follow the same pattern.\nPractically, this seems as simply as adding wildcards before and after the serialization. Effectively saying, \"regardless of what's before this or after this, reserialize this data that's clearly serialized in the middle.\". > Would storing those 4 lines of data in 4 different rows be a viable option? \nI understand that's ultimately more desirable. But this is the way PowerPress and a couple other plugins work.\n\nRecognising serialized data anywhere in the post could break actual post content that talks about serialization, so it's a bit crazy to do that IMO.\n\nBut if you want to find-and-replace the data in that post's serialization example, wouldn't you want the serialization to be updated, too?\nI did, in the meantime, discover https://github.com/tokmak/Fix-Serialization, which works to fix the inaccurate serialization that WP-CLI leaves behind.. I've sent this thread to the PowerPress developer.. ",
    "EvanHerman": "Hey Daniel,\nThanks for the response. I opened up a ticket over on vvv, and was able to resolve things after some additional tinkering.\nhttps://github.com/Varying-Vagrant-Vagrants/VVV/issues/856\nIn short, I deleted the WordPress-* directories, and re-provisioned and the directories were in fact created properly. For whatever reason, WordPress wasn't installed to the WordPress-Develop directory after provisioning, so I copied over the installation files files (wp-content/wp-includes/wp-admin) from WordPress-Default and things began to work again as expected.\nNot sure why WordPress wasn't installed, but the deleting and re-provisioning did in fact seem to resolve the directory creation issue.\n. ",
    "lemats": "Make sure your password does not contain #.. ",
    "nathanell": "Oh my.... ",
    "balintsera": "Sorry, I've just realized from travis output that behat is missing.\n. Hi,\nsorry for the mess, my initial intention was to update wp-cli to symfony 3 because I wanted to install wp-cli via Composer along with WP inside of a Symfony 3 installation :) \nThe problem is, wp-cli depends on different symfony packages. \nIt\u2019s just an experiment, but if you like the idea maybe it could find its way to some dev branch, so I can try it in the wp + symfony 3 env. \nI realized that there are hardcoded mysql creditentials in Behat, so I tried to replace it to an environment variable based solution but it breaks on travis (but not locally). I\u2019m a bit confused about this, and have to create a pr every time I want to find out why travis fails. :( \nSo please ignore these pr-s :)\nBalint Sera\n\n\nm\u00e1rc. 27. d\u00e1tummal, 13:37 id\u0151pontban Daniel Bachhuber notifications@github.com \u00edrta:\n\nCould you explain in greater detail your intent with this pull request?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub https://github.com/wp-cli/wp-cli/pull/2593#issuecomment-202045744\n. ok, thank you, good idea, I'm on it\n. \n",
    "bebablub": "I'm now using PHP5 because i think it's more decent:\nsudo -u www-data -i -- 'php5' '/var/www/wordpress/wp-cli.phar' --path='/var/www/wordpress' --infoPHP binary:    /usr/bin/php5\nPHP version:    5.5.9-1ubuntu4.14\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:    /var/www/.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.23.0\nI think i found an error message now (but with all that output it's hard to find). After typing:\nsudo -u www-data -i -- php5 /var/www/wordpress/wp-cli.phar --path='/var/www/wordpress' post create /var/www/runtastic_stats/gpx/posttemplate --post_category=2 --post_title='test' --post_status=publish --post_date='2016-03-27 18:00:00' --post_author=1 --post_excerpt='test' --porcelain > test.html \ni got:\nPHP Notice:  Undefined index: SERVER_PORT in phar:///home/www-data/wordpress/wp-cli.phar/php/WP_CLI/Runner.php(792) : eval()'d code on line 19\n. The output doesn't depend on command, also:\nsudo -u www-data -i -- php5 /var/www/wordpress/wp-cli.phar --path='/home/www-data/wordpress/' wp core version\nfails with page source.\nIt's like: https://wordpress.org/support/topic/using-wp-cli-running-any-command-other-than-info-returns-html-of-site-page\nBut i'm running recent version of wp-cli\n. Wow thank you! That solved my issue. My scripts are running again. So seems that theres a problem with one of the plugins in combination with wp-cli. \n. ",
    "mrwells1996": "Solution! Daniel, thank you for replying, but miraculously after a week of failing I finally got it to work. The issue was with the xml file that was created through my IDE from the command line tools. Once I updated to a new version the signature did not match the XML, because the XML had been created with an outdated signature!\n. ",
    "sunilkumarverma": "Install and Configure the AWS CloudHSM Client (Linux), when i am trying to execute below command on EC2 instance\nwget https://s3.amazonaws.com/cloudhsmv2-software/CloudHsmClient/Xenial/cloudhsm-client_latest_amd64.deb \n Connecting to s3.amazonaws.com (s3.amazonaws.com)|52.216.134.45|:443... failed: Connection timed out. coming...\nAny help would be highly appreciated. ",
    "davetgreen": "hey @danielbachhuber \nI'll be honest, up until now when I've seen the failure in the Vagrant log, I've always just assumed it was because of our set-up. It dawned on me this morning that we weren't supplying the --path parameter to point it to build/wordpress in the above structure.\nSo, having tried that, I'm getting the following error:\nFatal error: Class 'WP_Widget' not found in /Users/davetgreen/Vagrant/www/bloom-design/build/wordpress/wp-includes/widgets/class-wp-widget-pages.php\nA quick Google turned up a suggestion to upgrade WP-CLI itself, which I've done. Everything now works perfectly.\nHopefully this will be of use to anyone reading this issue. Apologies for wasting your time. :)\n. ",
    "NateWr": "Error was in my config, sorry.\n:tired_face: \n. Sorry, my mistake! I must have had one of the early betas running on the site. Thought I was on RC1.\n. Just putting in my perspective as a small solo operator: I would happily donate or kickstart whatever small amount I'm able if there were a way to do so. If there were an affordable subscription for independents and that's an easier/better model for you, I'd happily consider that too.\n(off topic: ditto for the REST API or any other valuable infrastructural projects that are excluded from core for one reason or another.)\n. When I run ./vendor/bin/phake I get a PHP notice:\nPHP Notice:  Undefined variable: param in /media/Storage/projects/wp-cli.github.com/command.php on line 137\nAnd the /blog page does appear. There are just no posts there.\n. What are the installation requirements? WP version? PHP version?\n. For the Support section, did you have in mind the content on the Bug Reports page from the docs site?\n. Ok, updated according to your comments. All pretty straightforward except take a look at the language under Support and the second demonstration of a command under Using.\n. Ok, updated the PR with your changes. Sorry for the delay.\n. ",
    "Ruriko": "How you fixed it cause I have same error. ",
    "ShashwatMittal": "I faced the same error, for me the same constant WP_ALLOW_MULTISITE was defined twice in my wp-config.php. Removing one of them fixed the issue.. ",
    "petenelson": "Will do!\n. You're welcome, and thank you for inspiring me to start adding unit tests and CI to my own projects!\n. I had contributed some code to this repo recently, so I was using my local 0.24.0-alpha install with some var_dump() statements to debug it, hence the ./bin/wp calls, but I had first encountered it with the 0.23.0 version in /usr/local/bin/wp\nTonight though, I can't recreate the issue and I wonder if it's simply a case of \"have you tried turning it off and back on again?\"  I had been on this vagrant box a couple days working on some plugins, shut it down this morning, then fired it back up this evening and it's working correctly.  Might be that either logging out or restarting it cleared whatever issue was happening in bash.\nHere's 0.24.0-alpha working correctly.  I think the only other bash command-line work I had been doing was unit tests via some grunt tasks, so I think you can close this issue.  If I can consistently recreate the scenario, then I'll make sure it's repeatable before opening a new ticket.\nvagrant@vvv:/srv/www/wp-baconipsum/wp-content/plugins/wp-rest-api-log$ echo $BASH $BASH_VERSION\n/bin/bash 4.3.11(1)-release\nvagrant@vvv:/srv/www/wp-baconipsum/wp-content/plugins/wp-cli$ ./bin/wp --info\nPHP binary: /usr/bin/php5\nPHP version:    5.5.9-1ubuntu4.14\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    /srv/www/wp-baconipsum/wp-content/plugins/wp-cli\nWP-CLI packages dir:    /home/vagrant/.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.24.0-alpha\nvagrant@vvv:/srv/www/wp-baconipsum/wp-content/plugins/wp-cli$ ./bin/wp post list --post_status=draft\n+----+------------+-----------+-----------+-------------+\n| ID | post_title | post_name | post_date | post_status |\n+----+------------+-----------+-----------+-------------+\n+----+------------+-----------+-----------+-------------+\nvagrant@vvv:/srv/www/wp-baconipsum/wp-content/plugins/wp-cli$ ./bin/wp post generate --count=3 --post_status=draft\nGenerating posts  100% [================================================================================================================================================] 0:00 / 0:00\nvagrant@vvv:/srv/www/wp-baconipsum/wp-content/plugins/wp-cli$ ./bin/wp post list --post_status=draft --format=ids\n5621 5620 5619vagrant@vvv:/srv/www/wp-baconipsum/wp-content/plugins/wp-cli$ ./bin/wp post delete $(./bin/wp post list --post_status=draft --format=ids)\nSuccess: Trashed post 5621.\nSuccess: Trashed post 5620.\nSuccess: Trashed post 5619.\n. That didn't work, but adding a conditional to the register_taxonomy args took care of it.\nif ( defined( 'WP_CLI' ) && WP_CLI ) {\n    $args['public'] = true;\n}\nThanks!\n. Talking about running a manual SQL update to the wp_term_taxonomy table, then running the recount function and verifying the change afterward?  Sure, that makes sense.\n. Will do, FYI the docblock for comments is missing one as well, I can add that.\n/**\n     * Recount the comment_count value for one or more posts.\n     *\n     * <id>...\n     * : IDs for one or more posts to update.\n     */\n. It might be helpful to have a parameter to specify the term ID or slug (or a list of these) to update specific terms, though it gets tricky if we try to do that for multiple taxonomies.  I'm just not sure of a scenario where someone wouldn't want to update the count for one term while leaving other terms with possibly incorrect counts.\n. Cool, I took a look at the comment-recount.feature and that'll get me started in the right direction for the test.\n. ",
    "x2764tech": "Can you say what commands you ran?\n. Thanks - what are the values of the variables?\n. What you've put isn't valid PHP\ntry:\ndefine( 'VHP_VARNISH_IP' , '124.140.78.130' ); \n(note the quote marks, which make the values into strings)\n. ",
    "Benno007": "Hi @danielbachhuber , sorry I didn't get back to you. I got pulled onto another project at work.\nI'm not too sure how to get solid metrics from the database, but what I can do on Monday is export our DB manually with extended inserts and run import it via command line - it'll show the time taken, and then I can show the time taken to import the file outputted by WP-CLI.\nOur DBA said that he thinks its a disk I/O issue between using extended inserts or single inserts, because the number of inserts (~70,000) in the wp-cli export, vs ~1500 extended insert statements has a time difference or approx 30 mins on our databases. \nI'll set aside some time Monday or even perhaps over the weekend if I get time to get those stats for you. It would be really beneficial for us to have it as extended inserts, because we have issues where the DB import dies because someone/thing loads wordpress up after a DROP TABLE, before it inserts all the wp_option rows and creates some default options (so we get a uniqueness error about 20mins into the import each time). I was going to try and also wrap the insert statements in a LOCK TABLE tablename; but not sure how to do that with bash/sed.\n. Note: since I originally posted this issue we managed to reduce the DB size by about 30mb, so its faster than originally noted, but still quite slow.\nRun 1 (extended inserts, exported from MySQL Workbench):\nExport size 31,320KB\nInsert statements: 41\nTime Taken: 19 seconds\n10:03:59 Restoring C:\\Apps\\xampp\\htdocs\\Dump20160516\\out.sql\nRunning: mysql.exe < \"C:\\Apps\\xampp\\htdocs\\Dump20160516\\out.sql\"\n10:04:18 Import of C:\\Apps\\xampp\\htdocs\\Dump20160516\\out.sql has finished\nRun 2: WP-CLI\nExport size: 38724KB\nInsert Statements: 109,158\nTime Taken: 17mins 20 seconds\n05-May-2016 16:02:09    Importing Database: mysql  dbName < /home/deploy/dbName.sql\n05-May-2016 16:19:29    Import Successful\n. ",
    "anttiviljami": "Thanks, @gilbitron. Needed this! :)\n. We could easily look at the list of filenames returned from the wordpress.org checksums api and compare that to the local file trees for wp-includes and wp-admin. \n. Just found #2283 and #2638. Didn't look at closed issues when researching this issue. \nAwesome! :)\n. ",
    "discopatrick": "Actually, you are right. Normal behaviour is that your item is inserted at the position you specify, and everything else bumps down.\nSo this is only an issue when you try to use --position=1 - the item will be inserted at position 2.\n. Agreed, this needs to be fixed in WP Core.\n. ",
    "dsXLII": "In the event that the site gets moved/copied to an environment that doesn't have my HyperDB configuration, it would fall back to the configuration in wp-config.php. My goal is to minimize the chance that such a fallback causes problems (by, say, having a test site pointing to the production database). But I freely admit my use case is probably very limited.\n. I've had, and still have, exactly this same issue. I too am using HyperDB, and have had other odd issues with wp-cli and database interactions before. For me, at least part of the problem is that wp-config.php has bogus info -- the database host name defaults to \"localhost\" which is almost always wrong in my environment.\nA more generalized approach to handling HyperDB (or other database drop-ins) would be ideal, but there's going to be a few things broken by it. First thing that comes to mind: If you're using a DB drop-in for sharding, things like db cli become ambiguous if not meaningless.\nFWIW the same fix (adding the --all-tables flag) works for me. Fortunately I don't use multi-site, so I don't have to worry about the potentially nasty repercussions. :). ",
    "eriktorsner": "Adding a line to load class-wp-metadata-lazyloader.php at the top of add_or_update_item() in wp-cli/php/commands/menu.php seem to fix the issue, at line 503:\n```\n/*\n * Worker method to create new items or update existing ones\n /\nprivate function add_or_update_item( $method, $type, $args, $assoc_args ) {\nrequire_once( ABSPATH . WPINC . '/class-wp-metadata-lazyloader.php' );\n\n```\nI'm getting started with a pull-request, just need to read up on the contribution guidelines.\n. In the environment where I found the issue:\nvagrant@bootstrap:/vagrant$ wp --info\nPHP binary: /usr/bin/php5\nPHP version: 5.5.9-1ubuntu4.14\nphp.ini used: /etc/php5/cli/php.ini\nWP-CLI root dir: /vagrant/vendor/wp-cli/wp-cli\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.22.0\n(installed via composer)\n/Erik\nOn Wed, Apr 13, 2016 at 12:22 PM, Daniel Bachhuber <notifications@github.com\n\nwrote:\nCan you share wp --info?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/2653#issuecomment-209356362\n\n\n/Erik Torsner\nTel: 0733-118503\nSkype: eriktorsner\n. Hi Daniel.\nI should probably redo that pull request because wpcli needs to work on\nprevious WP versions as well. Terribly sorry.\nObviously I'm not very experienced or comfortable working in the wp-cli\ncode base. Please advice if you prefer I rewrite the patch or if you prefer\nto go ahead fixing this without my help.\n/Erik\nOn Wed, Apr 13, 2016 at 12:24 PM, Erik Torsner erik@torgesta.com wrote:\n\nIn the environment where I found the issue:\nvagrant@bootstrap:/vagrant$ wp --info\nPHP binary: /usr/bin/php5\nPHP version: 5.5.9-1ubuntu4.14\nphp.ini used: /etc/php5/cli/php.ini\nWP-CLI root dir: /vagrant/vendor/wp-cli/wp-cli\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.22.0\n(installed via composer)\n/Erik\nOn Wed, Apr 13, 2016 at 12:22 PM, Daniel Bachhuber \nnotifications@github.com wrote:\n\nCan you share wp --info?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/2653#issuecomment-209356362\n\n\n/Erik Torsner\nTel: 0733-118503\nSkype: eriktorsner\n\n\n/Erik Torsner\nTel: 0733-118503\nSkype: eriktorsner\n. ",
    "dsgnr": "Thank you Daniel, adding the extra line to the bash profile seemed to do the trick! Not 100% sure why it stopped working all of a sudden. \n. ",
    "5tormTrooper": "@dsgnr What extra line did you add? I'm having the same issue.. ",
    "hamid": "if you use MAMP , you should set the latest PHP version provided by MAMP and do not use the default PHP binary.\nsee : https://make.wordpress.org/cli/handbook/installing/#using-a-custom-php-binary. ",
    "bfolliot": "Yes i know, that's what I did, but i do not find it logical to have to lower the level of stability \n. Yes i agree, it can wait for the v0.24 release.\nThanks\n. > It might also be a good idea to use ^1.0.0 and not ~1.0.0 as the version selector. The API will now remain stable until 2.0 at least.\nYes or \"~1.0\"\n. Thanks\n. ",
    "dzuelke": "Could you please tag a 0.23.1 with this fix @danielbachhuber? I use Composer as the install method for e.g. https://github.com/dzuelke/wordpress-12factor and pull in WP-CLI as a dependency. That's currently not deployable without dropping minimum-stability.\n. It might also be a good idea to use ^1.0.0 and not ~1.0.0 as the version selector. The API will now remain stable until 2.0 at least.\n. Thanks!\n. ",
    "gedex": "Sorry for late reply, was distracted by other things. Thanks for adding the tests!\n. ",
    "mahnunchik": "Hi @danielbachhuber\n$ wp --allow-root core language install ru_RU\n. @danielbachhuber Thanks!\nIt is my workaround:\nbash\ncurl https://downloads.wordpress.org/translation/core/$(wp core version)/ru_RU.zip -o ru_RU.zip\nunzip -o ru_RU.zip -d languages/\n. ",
    "kristn": "i have these error on my website \nFatal error: Cannot use object of type WP_Error as array in /home/ericgelman1ab25/public_html/wp-content/themes/gelman/single-houselist.php on line 18\nhere is the link: http://www.ericgelman.com/houselist/blocks-downtown-san-anselmo/\ncan you please advise on what to do? \nwordpress version .4.7.5. ",
    "technicalpickles": "I tracked down my specific wordpress problem to an automatic update of jetpack breaking everything (oh the irony). Once I disabled it (ie renaming it), the site started working, and so did wp.\nIf there's any tests I can do to help debug with the bad plugin in place, let me know.\n. > I tracked down my specific wordpress problem to an automatic update of jetpack breaking everything (oh the irony). Once I disabled it (ie renaming it), the site started working, and so did wp.\nLooks like it was this, for anyone wondering: https://wordpress.org/support/topic/fatal-error-when-updating-to-jetpack-40-read-this\n. Would it be worth keeping this open? There were a couple prior of previous issues where wp doesn't output anything if there's a problem with the install. I think if it could output the problem it ran into, that'd be super useful for debugging.\n. ",
    "ymazuz": "So, I can see why you closed this, but I\u2019m having a similar issue with 0.24.1. As I see it, even in the scenario above, the problem isn\u2019t WP-CLI exiting with a fatal error. It\u2019s the fact that it\u2019s doing so silently.\nI discovered my problem when I made a change to a local site, typed wp shell, and nothing happened. I thought WP-CLI was broken, downloaded and reinstalled it, got the same error, and then finally opened a web browser and saw error messages. Fixed my bugs and wp shell worked. \nGreat! So the fatal error was my site\u2019s fault. But a little later I was in a WP-CLI interactive shell and mistyped a function name, and it just exited. The exiting is expected, but it used to spit out \u2018Fatal error: call to undefined function\u2026\u201d It doesn\u2019t do that anymore on this machine, it just dies silently. This is on a Mac running 10.11.6 and the DesktopServer/XAMPP PHP binary. I don\u2019t actually do dev stuff daily so I can\u2019t be sure of what\u2019s changed since WP-CLI was correctly outputting error messages. I also don\u2019t have this problem when I ssh into my host and use 0.24.1 there.\n. I just realized I have email notifications off for Github, but I wanted to thank you for responding! I\u2019ll try and figure out other ways to work this out.\n. ",
    "mantismamita": "We've tried to identify exactly which tables are affected and what data needs to be included and came up with a script that was pretty close. (I can include the whole thing if you're interested) but missed something somewhere in the serialisation. The result was that one of the sites in a multisite of 45 sites became unresponsive. The environments: pre-prod and prod are exactly the same with the exception of the url. \nHere is a list of the tables identified:\n- wp_site\n- wp_sitemeta\n- wp_blogs\n- wp_blog_versions\n- wp_signups\n- wp_registration_log\n- wp_42_commentmeta\n- wp_42_comments\n- wp_42_links\n- wp_42_options\n- wp_42_postmeta\n- wp_42_posts\n- wp_42_term_relationships\n- wp_42_term_taxonomy\n- wp_42_terms\nI did a search for the url in order to determine which ones were affected as that should be the only difference between the environments.\nthe export script was wp db export --tables=wp_site,wp_sitemeta,wp_blogs,wp_blog_versions,wp_signups,wp_registration_log,wp_42_commentmeta,wp_42_comments,wp_42_links,wp_42_options,wp_42_postmeta,wp_42_posts,wp_42_term_relationships,wp_42_term_taxonomy,wp_42_terms\n. Yeah fair enough, I think we are going to just do bash scripting and wp-cli to add the bulk of it and then just do all we can to avoid having to change things manually (PHP script sounds like a good idea). Keeping an eye on wp-rest-cli and appreciate your hard work :) Thanks for all your help.\n. Works with former versions of wp-cli and WordPress on the same environment.\n. Sure,\nIn the root folder of WordPress install in a debian/jessie environment. \ntyping wp core update-db --network\nsame problem with several other commands including wp user list \nThere don't seem to be any problems with other commands and no problems with debian/wheezy\nPHP binary:     /usr/bin/php5\nPHP version:    5.6.24-0+deb8u1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI packages dir:    \nWP-CLI global config:   \nWP-CLI project config:  /var/www/dev.example.com/data/releases/20160914091523/www/wp-cli.yml\nWP-CLI version: 0.24.1\nI'm not sure what else would be useful but happy to provide any additional information.\n. Ok thanks. Turned out to be a problem with space characters at the bottom of the wp-cli.yml file  in case anyone runs into this.\n. ",
    "blindpet": "I investigated a bit more and it is probably because of a missing .htaccess, when I log in and save the permalinks the .htaccess is created with the rewrite rules\n. Added a touch .htaccess to the installer and no change so it seems the wp option update doesn't make the changes to .htaccess even if it exists\n. Will give this a whirl, I was trying to avoid using a yml if possible but will test later today.\nI can see there is no flag for apache mods according to http://wp-cli.org/config/ is there a reason for that? It would solve the issue of environment variables not being found too.\n. Maybe the command should be wp table drop instead to avoid confusion?\n. I understand that @danielbachhuber but @lukecav was asking if the same or a similar command to drop specific prefixes (i.e. tables) exists. I was just suggesting if you were going to add this feature then it may be appropriate to add a separate command specifically for tables.\nIt sounds like @lukecav wants to drop specific tables with specific prefixes, this wouldn't be dropping the database just a table or two.\n. @ernilambar at the end it says I updated to the latest version and now I just get Unknown when running wp cache type\n. Sure\nPHP binary:     /usr/bin/php5\nPHP version:    5.6.25-1~dotdeb.7.1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.24.1\n. That explains it @danielbachhuber where can I request plugins that are checked by wp-cli for object cache?\n. Shame it doesn't work @jdanarola as lkraav says it should work \nI have everything working with this forked and fixed memcached \nI recommend using unix sockets too for extra speed \n. ",
    "Clemzd": "No, it doesn't. But it suggests the lines that needs to be changed when a network is enabled. Exactly like the wp-config.php file. So in my opinion, this plugin should also do that. \n. ",
    "DrewAPicture": "\nIs the plugin active on the subsite?\n\nWow. Thanks buddy :)\n. I believe I've covered all of the commands at this point with the above linked PRs. Please let me know if I've missed anything.. ",
    "namaserajesh": "@danielbachhuber Whenever user tries to search using our search box suggestions should be shown there, like Google. Is it possible? \n. ",
    "chmac": "Interesting, thanks for the feedback.\nAgreed, the cache corruption is a risk. I figure flushing the cache is fine, it's a low traffic site anyway. I had written some bash magic to remove the file, but this approach would be cooler. :-)\n. ",
    "andreasciamanna": "Thank you @danielbachhuber.\nThe package already has the wp-cli.yml (it was automatically built by the scaffold command and files were created in the ~/.wp-cli/packages/vendor directory).\nBut it looks like this is not enough.\nIt seems the only way to make it run is to use --require=<path-to-file>, as you suggested, and which definitely works.\nSo, what I have is enough for me to keep developing, but I wonder why I can't make it work using the first of your suggestions.\nThanks again.\n. I'm in a very early stage (just playing with it, for now), but you can see it here: https://github.com/sciamannikoo/otgs-wp-cli\nTo recap:\n- wp wpml --require=/my-home-dir/.wp-cli/packages/vendor/otgs/wpml/command.php works just fine\n- wp wpml outputs Error: 'wpml' is not a registered wp command. See 'wp help'.\n. Either I change the command registration to WP_CLI::add_command( 'wpml', ... or I call wp wpml list from the terminal, I keep getting the same result.\nAlso, I take for granted (but I might be wrong) that if I can make it work with the --require argument, it should work the same without it.\n. Ah, I now realize I misread your initial suggestion, sorry!\n\nYou can use a wp-cli.yml or config.yml file to --require=, see http://wp-cli.org/config/\n\nAt this point, does it matter if I have or not the yml file, when using --require=<path-to-file>?\nI know I must have it anyway for releasing the package, in fact it's there already: I'm just trying to get a full picture now :)\n. ",
    "spafax": "[deleted]\n. ",
    "xdamman": "\n(...) key players in the Laravel space have built up a load of services around Laravel that make use of it but that are commercial (Forge, Envoyer, Laracasts and, more recently, Spark).\nHaving these money-making commercial asides gives me confidence that there will be resources in the future to support Laravel's development without the a-commercial nature of Laravel itself being compromised. I like this model.\n\nI like that too.\nIn a way it's a bit like freelancers getting together and putting some percentage of their income to build common tools that will benefit their group (such as a central way to manage billing, rent an office together, etc.)\nNow do s/freelancers/companies and s/common tools/open source.\nAll the \"money-making commercial asides\" that make use of WP-CLI and benefit from it (i.e. make money) should contribute to a collective with the purpose to maintain and improve this tool common to all of them (it would be great to have someone making money out of WP-CLI to chime in this conversation).\nThen you shouldn't feel bad (or at least less bad) to take that money because it's basically money that was made possible in the first place partly thanks to this code. And it's money that would be set aside for the purpose of maintaining this project.\n. > Setting up and running an org like that would be a time suck though, so you would need to be sure the WP-CLI project justifies it.\nIndeed. It doesn't make sense for each open source project to reinvent the wheel and create yet another legal entity that needs to be maintained. \n\nAn other option is to do it through one of my companies and to be very transparent about the ins and outs. This might be a good solution on the short term as setting up a legal structure can be quite a hassle (we also need to decide where we do it).\n\nThat's exactly what OpenCollective is doing. It keeps tracks of all the ins and outs in a very transparent way so that the entire community can see. We can either host it on our own legal entity or we can host it on someone's legal entity.\nSee for example https://OpenCollective.com/yeoman \nYou can see that they spent money for stickers and servers. \nIt's still early days and our goal is to have more open source projects to learn and share the results with others. If you are up for it, we would love to also have you onboard and figure out with you those challenges around how to spend the money. I'd see this as an experiment and an opportunity to contribute to the larger debate of how should we find open source projects to make sure they can be maintained and have a larger bus factor. It can not only helps WP-CLI but the learnings will also help the open source community at large. It feels like we haven't made much progress on those questions in the past 10 years (if not more), and it feels like the best way to make progress is by trying and be transparent along the way and share the lessons.  \nPaying designers to come up with a great logo and design for the website is a great use of the money imho. \nI also like the idea of @andreascreten of giving a fixed monthly amount to the core developers for the maintenance. That makes a clear distinction between contributions which are not paid and maintenance of the project. \n. We are also happy to offer fiscal sponsorship if that helps. If you'd like to apply: https://opencollective.com/opensource/apply\nWhat we offer:\n- Github Integration (see https://github.com/mochajs/mocha)\n- Full transparency (see https://opencollective.com/mochajs)\n- Online interface to submit expenses (see https://opencollective.com/mochajs/expenses/new)\n- Open source platform (see https://github.com/opencollective/opencollective)\n- Growing community of open source projects (see https://OpenCollective.com/opensource)\nOnly condition is to have at least 100 stars on Github and at least 2 contributors.\nYou can also change the fiscal sponsor anytime (in fact, we would love the Software Freedom Conservancy, SPI, Apache Foundation and others to also use the platform that we are developing in open source, the goal is to streamline this concept of fiscal sponsorship and ensure transparency. If you know people there we'd love to get in touch!)\n. ",
    "kingkool68": "What if you solicit donations through something like www.patreon.com and use the funds to direct future development and features. \n. ",
    "clovepod": "\nI've heard that businesses find it easier, from a legal perspective, to buy a service than to make a donation. Not sure how true it is.\n\nI think this is very true. I work for a large-ish software company and I use WP-CLI for our intranet infrastructure. It is actually difficult (but possible) for us to even get our software purchasing department to understand the concept of paying for annual support of an open-source product, and we can't expense anything software related if we pay for it ourselves, because the software purchasing department needs to have control over the licenses we agree to, from a legal perspective.  So while I am sure my management would be on board with the idea of financially supporting software that I rely on, finding a way to actually get company funds in your hands would be next to impossible in a donation setup.  Now, a support subscription would be far easier to manage. We did that with a couple of premium plugins and that should have paved the way.\n. ",
    "davidwolfpaw": "@danielbachhuber Echoing some of the sentiments that I had on Twitter:\nThe Kickstarter route proved that there are people who are willing to donate to you working on this, but a one-time donation drive isn't sustainable, and something more longterm is required.\nCorporate sponsorships could be a way to go, but my concern there is transparency and oversight. What would stop you from making decisions that would favor a specific host or sponsor based on the amount that they donate? That said, if that hurdle is cleared, it would be in good interest of popular WordPress hosts and development firms to help fund ongoing work.\nOn the legal side, I imagine that it would be easier for most companies to sponsor the \"WP-CLI Foundation\" than directly to you. Definitely something to consult a legal expert on.\n. ",
    "piamancini": "Hi, I'm Pia from OpenCollective, \n\nThe Kickstarter route proved that there are people who are willing to donate to you working on this, but a one-time donation drive isn't sustainable, and something more longterm is required.\n\nI agree, and that's why we default for monthly donations. We are trying to help oss get recurring funding on a sustainable and transparent way. Some projects like Yeoman are using it for swag, and servers, while other like MochaJS are using it to pay their maintainers, or Chimp that they want to use the money to pay specifically for new features they are not able to build with the current contributors' time. \nOne idea, is we can give it a try. From experience we'll see how useful it can be for this community. Deciding how to spend the money is the trickiest part. A hack is to post an inssue with the proposal and ask for +1/-1... I know it's rudimentary but might give you a sense on where you are standing. \nlmk, happy to set one up for you to pilot \n. ",
    "brainwane": "\nAt this time, we don\u2019t have plans to establish a legal WP-CLI organization. We\u2019ve decided the operational complexities exceed the benefits.\n\nHave you considered the more lightweight option of becoming a member project of a \"fiscal sponsor\", an umbrella nonprofit that would take care of the paperwork/admin complexity, such as the Software Freedom Conservancy?\nI'm going to mention a few options here just in case it's useful to you for this project or other open source projects facing this sort of question. A good place to find more is to check out http://conferences.oreilly.com/oscon/oscon2013/public/schedule/detail/29249 and the slideshow (ODP file) linked from that. The three fiscal sponsors that I hear about a lot and that aren't programming-language-specific or framework-specific are:\n1) Software Freedom Conservancy: https://sfconservancy.org/members/apply/\nprerequisites: project ongoing for ~ a year? established project. A license that's FSF-approved and OSI-approved. Evaluation by Board of Directors.\n2) Software in the Public Interest: http://www.spi-inc.org/projects/associated-project-howto/\nprerequisites: License that meets Debian Free Software Guidelines, and evaluation by Board of Directors.\n3) Apache Software Foundation: https://incubator.apache.org/incubation/Process_Description.html\nprerequisites: more, including following the Apache Way and going through an incubator process. Takes quite some time. https://incubator.apache.org/faq.html\nSeparately: I wrote a blog post you might find useful, called \"How To Improve Bus Factor In Your Open Source Project\". From a quick glance at your pull requests, you're already taking care of one of the biggest things, which is getting back to contributors quickly and nurturing new and continuing contributors. And my post \"What is Maintainership? Or, approaches to filling management skill gaps in free software\" may be helpful as something to throw into the discussion -- I think you're already doing the \"sustain\" approach and adding some discussion and encouragement around the \"skill\" path might be helpful (I may well be wrong as I don't know your community well).\nHope at least some of this is helpful!\n. ",
    "villevuor": "Thanks for comments!\nI just committed a feature that breaks the the insert statement into chunks. After the weekend I'll check out some performance data and maybe add option to specify the chunk size.\n. Thanks again. I fixed the parts you pointed. (I also found a mistake in my previous commits that slowed export a lot, but it\u2019s now fixed.)\nI did some performance testing with exporting. I basicly ran wp search-replace 'http://example.com' 'http://example2.com' --export=dump.sql and measured time with time command. Import times were tested on command line running mysql -u user -p dbname < dump.sql --debug-info.\nSearch-replace export with WP CLI 0.23.1\n| Posts in WP install | 200 | 3000 | 35 000 |\n| --- | --- | --- | --- |\n| Export file size | 191 kb | 2 863 kb | 28 287 kb |\n| Export time | 1.655s | 1.884s | 11.109s |\n| Import time (locally) | 1.1s | 5.3s | 79.8s |\n| Import time (VPS) | 2.3s | 11.3s | 146.1s |\nSearch-replace export with this branch\n| Posts in WP install | 200 | 3000 | 35 000 |\n| --- | --- | --- | --- |\n| Export file size | 89 kb | 893 kb | 10 686 kb |\n| Export time | 1.284s | 1.770s | 9.065s |\n| Import time (locally) | 1.1s | 1.2s | 2.4s |\n| Import time (VPS) | 1.2s | 1.8s | 4.2s |\nI didn\u2019t test with millions of rows, but this already seems good. Export was tested on my Macbook Pro (8GB i5). Import was tested on my local machine and also on cheapest VPS from Scaleway.\n. I think next I could implement the chunk size flag and find out what is the best default value. After that I think this starts to look good?\n. I added export_insert_size flag that defines number of rows in single INSERT query. It would be good to check that out, I'm not sure did I do the flag validation the best way. I think number of rows is fair enough at this points.\nI'll check out the failing tests tomorrow.\n. Have you experienced this before?\nNo output has been received in the last 10 minutes, this potentially indicates a stalled build or something wrong with the build itself.\nhttps://travis-ci.org/wp-cli/wp-cli/jobs/130767916\n. > Given the context, it appears your code is incompatible in some form with PHP 5.3.\nNew merge solved this.\nEverything done now? :)\n. > Meaning this is a complex conditional and difficult to review / understand the logic of. Can it be written more simply?\nI think it is quite straightforward now. Added some comments though to clarify the logic.\n. What you mean by this?\n. ",
    "withinboredom": "Closing this: It helps to have the plugin activated ;)\n. ",
    "timneutkens": "@westonruter @danielbachhuber Will do. Bet I will have time to review this tomorrow.\n. Hey @danielbachhuber, looks good :)\nOnly thing I noticed is that wp is hardcoded here: https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L356.\nFew weeks ago I created a pull request on wp-cli-ssh (https://github.com/xwp/wp-cli-ssh/pull/27) to add support for a custom command to be ran. So you could do something like: wpcli_command: php ./vendor/bin/wp (https://github.com/xwp/wp-cli-ssh/blob/master/wp-cli.sample.yml#L22) when you install wp-cli using composer.\nThe hook you implemented probably solves the issue I had wanting to use a different php command for wp-cli. Just not the part where you would want to use a different path to the command.\n. That's a fair point. You could alias wp using the hook. So that will do.\n. I also noticed that you can provide WP_CLI_PHP to use another version php. So that is an even better solution to the issue I had \ud83d\ude04 \n. I agree, that's the best syntax for supporting ports \ud83d\udc4d \n. Thanks Daniel, will have to make so changes to our internal setup \ud83d\udc4d \n. ",
    "Danw33": "Shot in the dark here - Could it be that you have multiple PHP environments and the PHP on your $PATH is different from the one being used by your web server? \nOn the command line:\n-  which php will show you the PHP on your $PATH.\n- php -m | grep mysql will show you if the MySQL module is being loaded (if you get nothing/blank then it's not being loaded)\n- wp --info will give us some info on where wp-cli is looking for PHP, the version, etc. - If you could post the output of this it would probably help \ud83d\udc4d \n. My guess would be the upgrade - If it was a third-party build it may have installed the newer version along side the old one (so php would be the 5.3, and for example php55 might be the newer install). That, or the the new install needed the required modules installing (apt-get install php-pdo, etc.)\nAs for not being a dev-ops guru - Me neither, it's like the blind leading the blind \ud83d\ude06 \n. ",
    "joelstransky": "Could be. Not sure.\nOur vagrant boxes start with Ubuntu 12.04 and PHP 5.3. Following a suggestion here, I upgraded to PHP 5.5 before I installed wp-cli which is when I got this error.\nI then destroyed the box and this time upgraded to PHP 5.4 which worked. Perhaps that can shed some light as I'm not a dev-ops guru.\n. ",
    "tddamith": "please help me...\nhow to fix this issue \nYour PHP installation appears to be missing the MySQL extension which is required by WordPress.. ",
    "kkoppenhaver": "There is now a brief sentence on updating on the homepage\nYou can update WP-CLI with wp cli update (doc), or by repeating the installation steps.\nWhat about a section for the installation guide just after Wondering what to do next? that goes something like this:\nUpdating WP-CLI\nOnce WP-CLI is installed you can update it at any time by running wp cli update.  \nYou will be prompted to confirm that you wish to update with a message similar to the following: \nYou have version 0.21.1. Would you like to update to 0.23.1? [y/n]\nAfter you accept, you should see a success message:\nSuccess: Updated WP-CLI to 0.23.1\nFor more information, including flags and options that can be used, read the full docs page on the update command.\n. Also, am I correct in assuming that the eventual change to incorporate this would have to be made on the wp-cli.github.com repo?\n. @danielbachhuber Still something you want to do? I could start putting together an outline.\n. I'm thinking:\n~45 seconds: Installing WP-CLI (phar method) \n~90 seconds: Setting up a WordPress site (wp core download && wp core install)\n~30 seconds: Installing a Plugin from the repo (wp plugin install jetpack)\nTotal: ~2m45s\n. Yup, been working on it off and on. Hope to have a rough cut uploaded somewhere shortly.\n. @danielbachhuber First cut here: https://www.youtube.com/watch?v=GyhK_sJAqtY (unlisted for now, open to wherever you eventually want to host it)\nMy thoughts:\n- Want to smooth out an audio glitch in the middle\n- Maybe want to re-record the installation section (condense, tighten up wording a bit)\nOther than that, I'm open to any and all feedback from you or others.\n. First draft. Any feedback more than welcome.\nWelcome and thanks!\nFirst off, thank you for considering contributing to WP-CLI. It's people like you that make continue to make it such a great tool.\nFollowing these guidelines helps to communicate that you respect the time of the developers managing and developing this open source project. In return, they should reciprocate that respect in addressing your issue, assessing changes, and helping you finalize your pull requests.\nWhat kinds of contributions are we looking for?\nWP-CLI is an open source project and we love to receive contributions from our community \u2014 you! There are many ways to contribute, from writing tutorials or blog posts to help spread the word about WP-CLI, improving the documentation, submitting bug reports and feature requests or writing code which can be incorporated into WP-CLI itself. To get started, take a look at any of the currently open issues.\nYour First Contribution\nIf you're looking to make your first contribution, take a look at issues that have been tagged as good for beginners.\nNever made an open source contribution before? You can learn how from this free series, How to Contribute to an Open Source Project on GitHub.\nOnce you've found an issue you want to tackle, check out our process for making a pull request. Please make sure any code you submit follows the WordPress Coding Standards.\nMore detailed information on submitting your contribution can be found on our Pull Requests page.\nReporting a Bug\nFor more information on how to report a bug, please see the detailed docs on bug reports.\nCommunity\nAdditional discussion around WP-CLI can be found in the #cli channel of the Make WordPress Slack.  For more information on joining the Make WordPress Slack Team, see their information page.\n. Sure thing.\nhttps://docs.google.com/document/d/1eRfCEoO2B1SbMgWERv2sCsiIGVgrvFZdPikuqZ66V2M/edit\n. Good thoughts on the opening paragraph. Accepted the suggestions.\n. @danielbachhuber No worries. Since you're looking for more contributions, it seems only fitting that you craft the document that shapes how those contributions come in.  Just glad I could get the ball rolling on this one.\nI can definitely take on 'Improving our documentation'. Is there a separate issue for discussion of that or are we just keeping that here?\n. First version: \nhttps://docs.google.com/document/d/1k74bG1ZvAG-ItHNyDIssrT21P-whbfrUZnJnyxlrOlU/edit?usp=sharing\nPossibly related issues (may want to include information from these tickets in the description):\nhttps://github.com/wp-cli/wp-cli/issues/3037\nhttps://github.com/wp-cli/wp-cli/issues/2769\n. Condensed some sections based on @danielbachhuber 's feedback and made some additional edits.\n. @danielbachhuber Can do. I'm assuming you want it on the contributing page? https://wp-cli.org/docs/contributing/\n. Latest should address all your notes.\n. ",
    "iamnotjason": "I'm going to draft up an updated page with some good examples and output shortly. How do you feel about animated .gif files for the images on that page? It makes the page more flashy but it would allow for two - five second clips that can illustrate it in action.\n. ",
    "ivandotv": "It should detect that that it's just an empty directory. \nIt should detect that it's not a valid theme if there are no mandatory theme files inside.\n. Tried if with --force\nInstalling Myth (1.0.3)\nDownloading install package from https://downloads.wordpress.org/theme/myth.1.0.3.zip...\nUnpacking the package...\nInstalling the theme...\nRemoving the old version of the theme...\nWarning: Could not remove the old theme.\nTheme update failed.\nIt also fails as user root so it's not a permission issue.\n. I mean that the myth directory is empty.\n. Admin correctly detects that the theme doesn't exist, i.e there is no myth theme in backend.\n. wp-cli even allows me to activate the theme, but as soon as a reload wordpress in browser, it reverts to default theme. \nAnd them if I check on the command line if the myth is activated, it correctly says it's not.\nAlso myth is just an example theme (first one I grabbed from wordpress theme repository)\n. I've looked at the code, it seems that you use wordpress function wp_get_theme()\nIt must correctly return false (1) if we query if the theme is installed.\n\nWe can add some logic to verify the theme is valid before listing it or permitting it to be activated.\n\nTheme is never listed, when calling wp theme list\n. This will land in 0.24.0? \nIf so, when is the release date? \nCan I try it now?\n. Just updated.\nSame scenario:\nDirectory myth exists inside theme folder, but is empty.\nNow when I run wp theme is-installed myth it correctly returns 0 (theme not installed)\nHowever, in next step when I try to install the theme I get back:\nWarning: myth: Theme already installed.\nUsing --force\nInstalling Myth (1.0.3)\nDownloading install package from https://downloads.wordpress.org/theme/myth.1.0.3.zip...\nUnpacking the package...\nInstalling the theme...\nRemoving the old version of the theme...\nWarning: Could not remove the old theme.\nTheme update failed.\nwp theme list and\n wp theme status myth\nReturn the same results as in previous discussion.\n. If there is a directory for the theme, but it's empty or it doesn't have required files for a valid theme,\nyou get \"Broken themes\" list at the end of all installed themes.\n\nSo wp admin knows that something is broken with that theme.\n1. Forcing the install of the theme should be successful. So I could override broken theme as Wordpress admin says. This currently doesn't work.\n2. Optionally, wp theme status should detect broken theme.\n. It appears that there is a problem with mounted directories in docker, which has nothing to do with wp-cli \nThe wp-cli code works correctly, I can delete, and --force install the theme.\n. ",
    "hideokamoto": "Thanks for review!\nI added space \ud83d\udc4d \n. Change \"wp cli param-dump\" format.\nand display some of the results only.\nthanks.\n. ",
    "crissoca": "It will keep the same version as it's installed and not get the latest version.\nThis is useful for people that somehow got issues with the latest versions and break their sites with latest updates.\n. ",
    "jpSimkins": "I tried something similar to that too with no luck. \nIt seems that the real problem here is that I cannot specify the wp-config.php file's location and it's trying to find it on it's own. I am going to test with using wordpress in a sub-directory and just let my devs use this setup only for unit testing.. Seems a bit redundant but it's important to get this to work for now. Hopefully a future update will allow for config specifications of:\nwp-config.php\nwordpress location\nwp-content location\nI cannot get past the wp-config issue so I am not aware if custom wp-content directories will cause issues yet.\nMy issue is that I have a wp-config.php file that is no the acutal wp-config as it's a global to set defaults and it includes the project specific wp-config using the $_SERVER['DOCUMENT_ROOT'] and $_SERVER['SERVER_NAME'] variables. It's names wp-config due to the way WordPress autoloads the config file. Since this script assumes the wp-config.php file includes the wp-settings.php it is breaking. If I call that file in my global, then the pathing is incorrect on wp-cli. I can see this when debugging as it shows my global wp-config in wp-config.php path:\nIt seems my only option is to install WordPress into a sub directory for each site I want to tests on...\n. ",
    "styledev": "@jpSimkins I use a similar setup and this is what I do:\nif ( $_SERVER['DOCUMENT_ROOT'] === '/Users/<username>/Sites/wordpress' ) $_SERVER['DOCUMENT_ROOT'] = $_SERVER['PWD'];\nWhere /Sites/wordpress is where I keep Wordpress Core and inside my wp-config.php reference to /Sites/SITE's wp-config.php where I define things for that site.\n$_SERVER['PWD'] for me equals /Site/SITE\nAdditionally when I run wp cli I use:\nwp user list --field=ID --path=wp --url=__SITE__.test\n/Site/SITE/wp is an alias to /Site/wordpress. ",
    "andreiglingeanu": "Some helpful ones I use every day (tested only on OS X):\nkill-all-php-servers\nstart unyson testing\nThe last one will download wp, and Unyson framework for it. Basically it will create a full featured working environment in a couple of seconds.\n. Maybe try to use this? \nUnyson is happy with that.\nhttp://github-api-cache.unyson.io/\nAnd you query api like normally, while having caching done by this 3rd party package. Just switch the hosts out.\n. @danielbachhuber Why would you even keep CloudFlare in the game, in this case?\n. I think they have some sort of excluding mechanisms, no? \nWhat about forcing CloudFlare to skip caching for api subdomain at all and make it point to a WebFaction server directly that will serve the GitHub API cache?\nSeems legit to me.\n. > Also, consistent messaging simplifies parsing for third-party systems.\nThis.\nI stumped so many times upon that thing -- when the software tries to be way smarter than it needs to be.. Yup, that helped. Thanks!. ",
    "myselfhimself": "The use of --yes\n. Hello, it would be nice to document how to get the current debug verbosity.. For now I have found by myself:\nif(\\WP_CLI::get_config('debug')) {\nThanks for the very good WP_CLI!!\n. ",
    "martijn94": "Thanks!\n. ",
    "noloader": "\nI think this might be somehow related to SecureTransport on OS X\n\nProbably not.\nOS X provides OpenSSL 0.9.8 by default. It sounds like an updated OpenSSL needs to be installed, and the word press tool needs to use the updated OpenSSL.\nIts usually not as easy as \"just install an updated OpenSSL\", however. OS X's downlevel OpenSSL is on-path, so it often get used first. It usually takes finesse to get expected results. Usually you have to build OpenSSL with an install name, but most versions of OpenSSL are not configured to do so by default. Then you build your tools, like cURL, using the updated OpenSSL.\nIn the absence of install names, you usually use DYLD_LIBRARY_PATH on OS X like you use LD_LIBRARY_PATH on Linux (also see dyld(1) man page). But you still have to build your tools with the updated OpenSSL because OpenSSL 0.98 is _not_ binary compatible with modern versions of OpenSSL.\nHere's what the openssl program looks like once the library is modified to use install names. Other tools should look the same (i.e., the other tools will link to an updated OpenSSL).\n$ otool -L /usr/local/ssl/darwin/bin/openssl \n/usr/local/ssl/darwin/bin/openssl:\n    /usr/local/ssl/darwin/lib/libssl.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/local/ssl/darwin/lib/libcrypto.1.0.0.dylib (compatibility version 1.0.0, current version 1.0.0)\n    /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 169.3.0)\n\nIn Error 0D0C50A1, \u201cunknown message digest algorithm\u201d when installing WP packages from Stack Overflow, a user is experiencing the same issue. If wp-cli is not using OpenSSL, then one of the tools, like cURL, is using the downlevel OpenSSL.\nIf a tool like cURL is the culprit, then they probably need to use MacPorts or Brew and install an updated version of the tool. MacPorts or Brew supply an updated OpenSSL, and tools like cURL will use the updated OpenSSL. MacPorts and Brew are also install name aware, and they will do the right thing so tricks like DYLD_LIBRARY_PATH are not needed.\n. $ wlcr  openssl version -a\nOpenSSL 0.9.8zh 14 Jan 2016\n...\nInstall Brew or MacPorts. MacPorts is probably a better choice since Brew has done something to cause users on Stack Overflow to experience problems. Then, use the updated Wget, cURL, OpenSSL, etc provided by the port.\nOpenSSL 0.9.8 is anemic. It lacks most Elliptic Curve support, so it can't do TLS 1.2. It also lacks other goodies present in OpenSSL 1.0.2 and 1.1.0. Check the change log for a list of improvements.\n. ",
    "Tmeister": "I'm having the same issue here.\nI try to update OpenSSL and cURL using brew with not success.\nMaybe the next details can help.\n\u2601 wcrc wp package install wp-cli/scaffold-package-command\nError: The \"https://wp-cli.org/package-index/packages.json\" file could not be downloaded: SSL operation failed with code 1. OpenSSL Error messages:\nerror:0D0C50A1:asn1 encoding routines:ASN1_item_verify:unknown message digest algorithm\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\nFailed to enable crypto\nfailed to open stream: operation failed\nOpenSSL Details\n\u2601  wlcr  openssl version -a\nOpenSSL 0.9.8zh 14 Jan 2016\nbuilt on: May 15 2016\nplatform: darwin64-x86_64-llvm\noptions:  bn(64,64) md2(int) rc4(ptr,char) des(idx,cisc,16,int) blowfish(idx)\ncompiler: -arch x86_64 -fmessage-length=0 -pipe -Wno-trigraphs -fpascal-strings -fasm-blocks -O3 -D_REENTRANT -DDSO_DLFCN -DHAVE_DLFCN_H -DL_ENDIAN -DMD32_REG_T=int -DOPENSSL_NO_IDEA -DOPENSSL_PIC -DOPENSSL_THREADS -DZLIB -mmacosx-version-min=10.6\nOPENSSLDIR: \"/System/Library/OpenSSL\"\ncURL details\n\u2601  wlcr  curl --version\ncurl 7.43.0 (x86_64-apple-darwin15.0) libcurl/7.43.0 SecureTransport zlib/1.2.5\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\nFeatures: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz UnixSockets\nAnd finally my Mac details\n```\n\u2601  wlcr  system_profiler SPSoftwareDataType\nSoftware:\nSystem Software Overview:\n\n  System Version: OS X 10.11.6 (15G1004)\n  Kernel Version: Darwin 15.6.0\n  Boot Volume: Macintosh HD\n  Boot Mode: Normal\n  Computer Name: Beau\n  User Name: Enrique Chavez (tmeister)\n  Secure Virtual Memory: Enabled\n  System Integrity Protection: Enabled\n  Time since boot: 3 days 18:47\n\n```\n. ",
    "chandrapatel": "I am also getting this error on mac. Any solution? I also update openssl but still getting error.\n. ",
    "jambox": "Having this issue as well (OS X 10.10.5, WP-CLI 0.25.0). Did a few things that seemed like I was on the right track but I'm stuck:\n1. Ran brew update && brew upgrade\n2. overrode the existing openssl v.0.9.8 executable with a symlink as specified in this post to version 1.0.2j\n3. Installed wp-cli via brew install wp-cli and changed $PATH to hit that version\nAll versions seem to be current but I'm still getting the unknown message digest algorithm error. Any clues would be helpful!\n. I first saw the aliases on the blog in the v0.24.0 release. Then I referenced the config page for a syntax refresher. But in terms of figuring out the port issue, I just dug through some of closed issues up here and found the discussion around non-standard ports which was sometime in May I think. \nI'd say a comment in the .yml example on the bottom of the config page would be sufficient, but I also think it'd be helpful to have a link to the aliases setup anywhere the global --ssh flag is described. And that, of course, could ultimately link to the bottom of the config page again.\n. Now that I'm thinking more about this, it might be better suited as a deploy package instead of core functionality. Anyone else have thoughts or interested in this functionality in general?\n. great resources and solution. Thanks as always @danielbachhuber \n. ",
    "adampatterson": "I am also getting the same error, I have updated brew and don't have anything outstanding. I also installed WP-CLI using CURL.\nI'm running OSx Sierra using OpenSSL 0.9.8zh 14 Jan 2016 built on: Jul 30 2016.\nThe exact command and error is:\n$ wp package install pantheon-systems/wp_launch_check\nError: The \"https://wp-cli.org/package-index/packages.json\" file could not be downloaded: SSL operation failed with code 1. OpenSSL Error messages:\nerror:0D0C50A1:asn1 encoding routines:ASN1_item_verify:unknown message digest algorithm\nerror:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\nFailed to enable crypto\nfailed to open stream: operation failed\nEnv:\n$ wp --info\nPHP binary: /Applications/MAMP/bin/php/php7.0.0/bin/php\nPHP version:    7.0.0\nphp.ini used:   /Applications/MAMP/bin/php/php7.0.0/conf/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:    /Users/adampatterson/.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 1.0.0. @remi-lebigre Works! Had more issues updating MAMP than I expected but its now working.\nThanks!. ",
    "remi-lebigre": "Hello @adampatterson,\nHad the same issue than you, then I searched for those stackoverflow posts:\nfirst post\nsecond post\nThose worked for me.\nIn short, MAMP < 4.0.0 OpenSSL version is not compatible with wp-cli package install.\nI upgraded MAMP to > 4.0.0, now it works fine.. ",
    "michaellopez": "@danielbachhuber For our case it is sufficient to upload the hashes and signatures that are available at https://github.com/wp-cli/builds/tree/gh-pages/phar for each release on https://github.com/wp-cli/wp-cli/releases.\nThis feature request is aimed at having a URL like (for each released version)\n- https://github.com/wp-cli/wp-cli/releases/download/v0.23.1/wp-cli-0.23.1.gpg\n- https://github.com/wp-cli/wp-cli/releases/download/v0.23.1/wp-cli-0.23.1.md5\n- https://github.com/wp-cli/wp-cli/releases/download/v0.23.1/wp-cli-0.23.1.sha512\nwhere we can be sure to get the signatures and hashes for a specific version, not only latest stable from https://github.com/wp-cli/builds/tree/gh-pages/phar\nI hope I'm making myself clear :)\n. Also, I can't seem to find your public key anywhere...any info on that?\n. @danielbachhuber Great! Thanks.\nCan you post that key to a public key server or publish it as a file for download? It helps with automation tools. Thanks.\nInfo on that: http://security.stackexchange.com/questions/406/how-should-i-distribute-my-public-key\n. @danielbachhuber Great support, thanks. Will test this out when 0.24.0 lands. Leaving it open until then.\n. @danielbachhuber Awesome, thanks. I'll try it out when I get a window in my schedule :)\n. ",
    "deltamualpha": "Not to be a pest, but when is the release of 0.24.0? This issue renders fresh installs of vip-quickstart impossible: https://github.com/Automattic/vip-quickstart/issues/500 \n. ",
    "infn8": "For those who get here via google now you can now just run wp cli update without the --nightly to fix this.\n. +1 for @danielbachhuber shutting down everybody who wants this across multiple threads  I came here looking for this too and now I have a better idea as to why I should totally not want this.  It's easy to make the argument of \n\nBut I'm super smart and I'm an edge case and I won't break my stuff.\n\nbut the team isn't building for edge cases and if you're super smart you can totally add an alias to your profile.. ",
    "arobbins": "@infn8 That worked for me, thanks.\n. ",
    "Deaton64": "Wow, thanks for the quick reply.\nAll I'm doing is \"wp-cli core verify-checksums --path=$sitename > /tmp/wpcore.txt\"\n. Great, that works fine.\nThanks both \ud83d\udc4d \n. ",
    "john-bonachon": "I actually need to update user fields. Their user login is their employee ID, which is why it turned out to be numerical...\nOk. Seems like I'm the only one on this.\n. ",
    "vdwijngaert": "I also think using a regular expression is the way to go to check for serialized objects. I believe it would hurt overall performance and cleanness to replace this check with something else. Maybe it is enough to just check whether or not the query returned an error (using wpdb's $last_error property?) and fall back to PHP replacement. \nI currently don't have a test environment set up, so I can't supply a pull request right now, but maybe later today or tomorrow.\n. As far as I can see, this could be accomplished by running pcretest -C and checking for the \"No UTF-8 support\" string. \nGranted, this could give inconclusive results if a user has multiple AMP stacks installed on his computer, so to make it airtight, one would have to check for the existence of \"pcretest\", check the right binary is used and finally check for the \"No UTF-8 support\" string when running the command. Sounds like a lot of work just to check that. \nDoes wpdb save the error code? In that case, one can match the code against 1139, that narrows things down to \"issues with the regular expression in your query\". In which case, I think, WP-CLI should always be prudent and fall back to PHP replacements. \n. ",
    "bitstarr": "looks good. i will update and try next week\n. In my experience WordPress is serving the core as tar.gz but not the plugins.\nMy preferred way is to set an option on core download.\nAnd yes, you are right, maybe it's only my machine. But i am expecting this on all my virtual servers as well. Is unzipping slower on virtualized environments?\n. ",
    "pothi": "At times, having \"master\" helps to identify if the plugin is installed from w.org repo or from Github.\n. ",
    "c33s": "for example puppet will and also handle the chmod/chown stuff.\nalso if you have only a root user and the rest are very restricted users, it would really help to allow an admin to disable this warning. some of them are knowing what they are doing.\nthink just closing this and saying \"shouldn't do that\" is not really a good thing, there are circumstances where it helps and the person who is using your tool knows what he/she is doing. \nits like windows asking me \"are you sure?\" all the time. thought linux would safe me from forced indoctrinations which i can't disable. :smile: (rm -rf * is also dangerous but it works)\n. > Right, but you don't appear to know the historical context for why we've intentionally made it difficult to use --allow-root\n\nnow you are making me   curious. bother to tell why?\n\ncurrently it is possible to use it as root just calling it with --allow-root (which i prefer when i work in dev env in vagrant, don't like to care for working with another user), so it is possible. i can create workarounds like making me a wrapper script, compile it myself... and so on. why not making the user choose what he prefers?\nthere are many webservers out there not using firewalls, wordpress installations without updates, outdated php versions, ... so just adding this warning and prevent user to set an env var to disable that feels, as i wrote before, indoctrinating. \nthis often leads to much worse situations than before. for example browsers warn from self signed certs, so users prefer http over https because of the huuuuge warning (thanks letsencrpyt for making that better). anotherone is email encryption, enigmail prevents the user to completely decrypt their emails in the mail browser, because of security, making the user simply not using encryption because the mails are not searchable anymore. \nof course --allow-root doesn't really fit in my examples but i think you get what i want to tell you :smiley: \n. if i try to run wp core download it connects directly not using the exported proxy. so it runs in a timeout because of the lan setting only allowing to connect to the net trough the proxy. \nso reading the proxy settings from the env variables and connection through that proxy would be awesome, because then it could be used in proxied & firewalled environments.\n. @rkok i think the prefect place for supporting this functinality would be the requests libary but often people act in the \"i don't use/need it, so you don't need it too\" matter. often this people haven't been confronted with such environments where proxies are used.\ni hoped that @danielbachhuber will help me in the issue i opened at the requests lib, but he also don't need it. https://github.com/rmccue/Requests/issues/218#issuecomment-234360678\nwith wordpress and its surrounding tools you leave the enterprise compatible world, where LTS, SemVer and standards like HTTP_PROXY are followed. one of the reasons i stay with symfony and tools build with this framework.\nyou can try the following workaround (not tested with this tool):\nphp.ini\nauto_prepend_file = \"proxy.php\"\nproxy.php\n```\n<?php\n$stream_default_opts = array(\n  'http'=>array(\n    'proxy'=>\"tcp://proxy.example.com:1080\",\n    'request_fulluri' => true,\n  )\n);\nstream_context_set_default($stream_default_opts);\n```\nwith the auto_prepend_file the file listed there is automatically prepended to all your php files (don't know if this also works for phars). in the file you can set the stream defaults, so all for example  file_get_contents calls will be called with this default options. not sure if you need to provide the $context manually (which will break this workaround).\n. ",
    "rkok": "Can you please support http proxying, at least as a command-line argument? It's quite common for corporate build servers to require a proxy for outgoing traffic; this is the situation I'm in currently, and I reckon a lot of other developers, too.\nI think the Requests library is not a good place to put this functionality; helper libraries work best if they only do exactly what they're told by their user (wp-cli, in this case).. It turns out that this error message on wp core download:\nFailed to get url 'https://api.wordpress.org/core/version-check/1.6/?locale=en_US':\nstream_socket_client(): unable to connect to ssl://api.wordpress.org:443 (Operation timed out).\n\ncan be circumvented easily by installing the PHP curl extension, which appears to honour http_proxy/https_proxy.\nThat solved the problem I was having.. ",
    "brandonpittman": "It turns out you can specify a default proxy setting in $HOME/.wp-cli/config.yml through extra-php and define calls.\nThat solved my issues\u2014kind of.. @devnewton I will when I get back on Monday. . ",
    "devnewton": "Could you please post your config.yml ? I cannot get wp-cli working behind corporate proxy.. ",
    "velara3": "It looks like they have WP-CLI already installed. Thanks\n. ",
    "aaronjorbin": "Do you want to merge this and then have me bump the version or the other way around? \n. There is a plugin that does this.  Not sure if it belongs in wp-cli core. \n. Some events and what I would hope to discover\n\nwp help calls ( what commands generate the most documentation views? Could those commands be made better?)\nskip-plugins / skip-themes (in order to discover if there are any plugins/themes commonly skipped and thus there is a need to work with the team/people behind them)\nnot a registered subcommand and not a registered wp command triggers.  (Could help find common misspellings/mistypes that the system should handle with grace or potentially inspire new commands). What about a hybrid opt it/out.  Essentially this:\n\n1) No data is collected until there has been an affirmative consent.\n2) Upon upgrading, when a command is entered in interactive mode, a user is\nprompted asking if they consent to data collection.  This question defaults\nto yes (i.e. they have to type no or N in order to opt out).\n2a) If a command is run in noninteractive mode, the return value is\nappended with a notice to please make a selection with the dream that these\nare being logged somewhere and someone looks at the log files.\n3) Once a user enters a choice on data collection, it's stored on a system\nlevel in  the WP_CLI_CONFIG_PATH file. This also allows people to\npreemptively opt-out before running any commands. (i.e. after we scream\nfrom the rooftops)\nhttp://aaron.jorb.in\ntwitter: twitter.com/aaronjorbin\nOn Wed, May 10, 2017 at 7:05 PM, Daniel Bachhuber notifications@github.com\nwrote:\n\nI'm reverting.\nFor posterity, this did produce pretty cool data:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/36432/25924952/79b78572-359a-11e7-8019-60b9e35b3ce1.png\n[image: image]\nhttps://cloud.githubusercontent.com/assets/36432/25924941/6a37a3b6-359a-11e7-814a-d2010660b067.png\n[image: image]\nhttps://cloud.githubusercontent.com/assets/36432/25924945/701cbc12-359a-11e7-872c-924009c3e0e7.png\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3886#issuecomment-300637160, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAmAB_QLkD0lOShO3hDIlH1R8VUpeWAaks5r4kLBgaJpZM4MW2U5\n.\n. Homebrew was my inspiration :)\n\nI don't think that it's a compromise solution. It's a solution that satisfies the needs of everyone.  \nAs there is no close status, by closing do you mean to signify this that the project is no longer interested in this functionality or something else? . Success!  Thanks @gitlost! . ",
    "jscontrust": "I have the same problem, but with code in my theme:\nI include 2 files to my functions.php:\n```\n timber.php \n(...)\n$gi_timber_helper = new giTimberHelper();\n(...)\n definition.php \nfunction form_with_context_function( $atts, $content = ''){ \n    (...)\n    global $gi_timber_helper;\n    $context = $gi_timber_helper->get_timber_context();\n    (...)\n}\nadd_shortcode( 'form_with_context', 'form_with_context_function' );\n```\nIf I call wp update (page_id) --post_status=draft I get the error\nPHP Fatal error:  Call to a member function get_timber_context() on null in (...)/themes/mytheme/definition.php on line 68\nFatal error: Call to a member function get_timber_context() on null in (...)/themes/mytheme/definition.php on line 68\nIn WP-Admin I can save and update the page without a problem. I am able to save posts of other post types without problems, too.... ",
    "gd-jroberts": "Thanks Aaron and Daniel, that's exactly what I needed.\n. Sorry, I'm not sure my depth of knowledge is deep enough to answer that question. Just grasping for a way to be able to automate user account creation through wpcli and not have Wordfence complain each time. Can you help me understand why wpmu_create_user() is preferred? From what I'm reading (https://developer.wordpress.org/reference/functions/wpmu_create_user/) it seems specific to multisite installs. I don't have any multisites or rules to apply to each new user account. . Thanks. I'll open a support ticket with Wordfence and see what happens.. ",
    "kraftner": "Okay so concerning the docs - is there any example/format how warnings are meant to look/be written for WP-CLI? I couldn't find any examples. And the docs are generated from the source, right?\nConcerning doing the calculation - yes we could actually. So what we would need to do is for each image calculate the thumb sizes using the current resizing and the legacy version from pre #30660. Then we can detect mismatches. Probably has some performance impact.\nAnyway this only detects potential problems. We could of course also scan post_content but I think that is more fragile. Also references to the URLs might be in post meta or whatnot. So I think the first approach of potential issues is better.\nMaybe if we do this before actually doing any regenerating we can abort with a warning and require a flag to still do the regeneration. What do you think?\n. Docs is definitely a good idea. But for that reason totally abandoning the idea of caring in the command - I'm not sure. But your argument not to break existing scripts is of course a strong one.\nWhat if we at least have an option to be defensive about this? If you opt in any performance impact is also less of an issue. I'd have a look into how complex this is unless you can already say you definitely wouldn't merge it.\n. Ah, how I love \"Decisions, not options\" :wink: \nBut I get your point and I'll give it some more thought if we can handle it the way you just said. I'll report back when I have more information on that approach.\n. Sorry, not yet. But I have it on my list of issues I want to look into - time permitting.\n. ",
    "jmichaelward": "Thanks for the link to your WCEU presentation, and specifically for the links to the open documentation issues, Daniel. I think these are great starting points and help clear up a lot of questions I'd had. Hopefully it has helped others, as well.\n. Hmm, this is perplexing. When running this example, it appears that the string that gets passed in to WP_CLI::runcommand looks like:\n\"post create --post_title=\"Hello world!\"\"\nWhich means the single quotes are getting replaced with double quotes before the query gets to the method. This is therefore causing the world! string to be treated as a separate argument instead of a part of the string.\nThere is a $launch condition inside runcommand that parses those arguments differently - when $launch is true, the value of $GLOBALS['argv'] is used, but when it's false, the string gets passed to a helper function Utils\\parse_str_to_array that clearly isn't processing the command the same way. It seems like looking into that method is a great first place to start, but I'd also investigate whether there's a way to handle quote formation issue.. These two lines in php/utils.php's parse_str_to_argv method are responsible for the error:\npreg_match_all( '/(?<=^|\\s)([\\'\"]?)(.+?)(?<!\\\\\\\\)\\1(?=$|\\s)/', $arguments, $matches );\n$argv = isset( $matches[0] ) ? $matches[0] : array();\nThe method accepts a string parameter named $arguments, which in the example is \"post create --post_title=\"Hello world!\"\". preg_match_all finds this array of $matches:\narray(3) {\n  [0] =>\n  array(4) {\n    [0] =>\n    string(4) \"post\"\n    [1] =>\n    string(6) \"create\"\n    [2] =>\n    string(19) \"--post_title=\"Hello\"\n    [3] =>\n    string(7) \"world!\"\"\n  }\n  [1] =>\n  array(4) {\n    [0] =>\n    string(0) \"\"\n    [1] =>\n    string(0) \"\"\n    [2] =>\n    string(0) \"\"\n    [3] =>\n    string(0) \"\"\n  }\n  [2] =>\n  array(4) {\n    [0] =>\n    string(4) \"post\"\n    [1] =>\n    string(6) \"create\"\n    [2] =>\n    string(19) \"--post_title=\"Hello\"\n    [3] =>\n    string(7) \"world!\"\"\n  }\n}\nIt's not clear to me whether this regex can be updated to look for double quotes and ignore them, but it seems that this method will need additional consideration if this problem is to be resolved.. Ah, sorry about that, @danielbachhuber. To answer your previous question, I had ^1.5 as the constraint for WP-CLI and was attempting to install symfony/console:^4.0. I believe you and I had had a one-off conversation about removing Symfony altogether at one point in the past, but I'd assumed that had been taken care of before it cropped up again last week. I'll keep an eye on #4678, though I believe #4749 is the correct solution, since the WP-CLI itself doesn't seem to use Symfony Console at all.. I think I have a lead on this, based on the comments above and some testing in a sample plugin I created for this ticket.\nWe should be able to register this action at the top of the start() method in php/WP_CLI/Runner.php, something like:\npublic function start() {\n    WP_CLI::add_wp_hook('plugins_loaded', function() {\n        do_action('cli_init');\n    });\n        //...\n}\nPlugin authors can then do something like:\n```\nrequire_once DIR . '/vendor/autoload.php';\nadd_action('cli_init', function () {\n    $command = new \\WDS\\CLI\\CustomCommand();\n    $command->register_commands();\n});\n```\nAnd they will see their command in the listing, as expected.\nOne thing I tried was to require a class directly (without using a Composer autoloader), and one documentation caveat we would have is that the require statement should be within the hook, as well. I assume, of course, that that's already true today, but it's worth mentioning here, just in case.. @kitchin I'm digging into this one a little bit to try and replicate. Can you share the permissions that are set on your plugins directory and on Jetpack? . Note: This ticket appears to be a duplicate of https://github.com/wp-cli/extension-command/issues/90.. ",
    "shulard": "I think I can help with french, how can I start the translation ?\n. It seems nice to me.\n(only the jQuery thing that hurt me a little :smile:, I don't think we need it)\n. Ok I'll take a look very soon !\n. I've submited the PRs :\n- wp-cli/wp-cli.github.com#165\n- wp-cli/wp-cli.github.com#166\n. Hello !\nIt's an interesting approach but why using JavaScript in the browser to translate that strings ?\nI think that adding a dictionary in YML like _config.yml and using it will be more effective (the compiled version of Jekyll pages will be directly translated)...\n. You can do exactly the same thing in Jekyll, with data files : https://jekyllrb.com/docs/datafiles/\nWe can create a _data/{lang} which will contains all localizations.\nWith a JS translation system, we don't help Google and others search engines viewing the right labels (maybe they can interpret JS, maybe only some JS, maybe no JS...) and I think it can became an issue...\n. It seems a nice pattern. For me the lang must be the \"ISO alpha2\" to avoid collision on user defined keys : https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\nThen we can access with something like {{site.data.l10n[isoCode].stringToBeTranslated}}\nI already submitted a PR (wp-cli/wp-cli.github.com#176) which retrieve the iso based on current path. You can check that here: https://github.com/wp-cli/wp-cli.github.com/pull/176/commits/bc819d5ec4eb755993b507ca8e0c45a1a3e65488#diff-822e9cf54ee310f9a7ebd0d16c9ae066R1\nI don't know if it's the cleaner way to do that but it works :smile:\n. Hello !\nMaybe you can make a group of \"translators\" and ping them in an issue when there are some changes to be made, I think it's the simplest way to get notified...\n. I'll make the french update on monday...\n. PR for french made too: wp-cli/wp-cli.github.com#237\nJust a question, we are talking about 0.25.0 version but in the index.md it's still 0.24.1 which is mentioned. Is there an automatic process to update version in files ?\n. I know that PDO is missing from the core, maybe relying on mysql native php extension can be enough.\nI don't know how I can substitute MySQL dump. For me the problem is that WP-CLI doesn't handle the case when MySQL binaries are not installed on the machine :\nsh: mysql: not found\nFor example if I have a MySQL server detached from my Application server, the last one don't need any MySQL CLI command. I know that there are some package (mysql-client, mariadb-client) that allow to install only the client binaries but they are not required on the machine...\nI think that most of the time, WP-CLI don't need to rely on an external MySQL command because PHP is bundled with a mysql client. It also must fail with an clear error message when the binaries are not available.\nFor example with mysqldump, the database export command just can't be used if the binary missing.. ",
    "mustafauysal": "Here is Turkish homepage \u2013 https://gist.github.com/mustafauysal/1a8340711b3886ac81775a40740dd7c8\n. I've submitted PR for Turkish language pack: https://github.com/wp-cli/wp-cli.github.com/pull/169\n(sorry for delay)\n. PR ready for Turkish \n. ",
    "taianunes": "Hi @danielbachhuber, me and @bordoni can take care of pt-br translation!\n. Hi @danielbachhuber, we already have a \"translators\" group for notifications?\n. Sorry, found mail now. Thanks! \ud83d\udc4d \n. PR is ready for Brazilian portuguese translation!\n. ",
    "chantalcoolsma": "I can help with Dutch.\n. How do we translate? Do we have a tool for that?\n. Thanks. Started working on Dutch. Will do a PR when ready.\n. ",
    "apertureless": "Sure! Feature test added @danielbachhuber \n. Ups \ud83d\ude48 CI seems to fail.\nI will rework the part with array_column. Seems that its accepting objects as an input only since PHP 7 .\nMy bad :c\n. Okay, rewritten array_column to array_map. Now it should work with >= 5.3\n. Well it's an unsupported format. Because menu locations doesn't have ids. You could only get, the menu ids, assigned to the location. \n. @ernilambar oh now I see what you mean. \nYeah sure, will change it.\n. @danielbachhuber can be closed I guess.\n. Oh yeah, I forgot to merge the origin to my fork. Gonna fix this later.\n. ",
    "cclass": "cheers @danielbachhuber \n. ",
    "roelveldhuizen": "Fixed the CS\n. So, again, more spaces :-) No squashed commits. \n. ",
    "bretmette": "Found the issue. The permalinks structure had /index.php/ in it, which would obviously cause .htaccess not to be generated.\n. ",
    "rachelbaker": "@danielbachhuber I got the error last night while working with a WP install running the latest checkout of https://develop.svn.wordpress.org/trunk via composer based installation.\nWP-CLI version:    0.24.0-alpha\n. @danielbachhuber Looks like I was just missing this commit: https://github.com/wp-cli/wp-cli/commit/196e69ebb51b6ede4bc7b8ff6635387a3d3b7e75\nI can confirm wp-settings.php is loading now.\n. ",
    "timeassistant": "Thank you for the response, the runcommand.io link was perfect ! I would strongly advise you to add this into the WP-CLI docs as I was struggling for a while to remove the script.\nI think I have fixed the problem now but I have fully removed it just to be safe and plan to reinstall. \nThe alias for the site that had the wrong path was the issue. WP-CLI never seemed to have been installed to $PATH so it must have been alias only. (i removed the alias for now)\nMy last comment you quoted now makes sense, I had the wp-cli.phar file in the root dir of the users, and the /usr/local/bin/wp was created by root as the sub users cannot move the file to that location. \nThe reason one of the sites was working is because it had the correct alias brought over from the old VPS. \nI believe now I can get this corrected but I still have one extra question / issue\nWhen I go to reinstall WP-CLI this command sudo mv wp-cli.phar /usr/local/bin/wp does not work as the user as Sudo is not available, So I am wondering will performing mv wp-cli.phar /usr/local/bin/wp as root still have the same desired effect if I go and add an alias to each user such as alias wp='php /home/{USERNAME}/wp-cli.phar'\nThanks\n. Fantastic thank you !\n. ",
    "hansgv": "Unfortunately I don't have the means to test on any other setup than the one I currently have and it's not a fresh install or Twenty Sixteen theme. Sorry.\nAs a matter of fact, I believe there aren't any additional theme or plugin defined thumbnail sizes on a fresh setup. So testing would be kinda pointless, I guess.\n. ",
    "eracadmin": "Also, I'm trying to install globally on my cpanel server. Thanks! Email me at maoz@techtone.ca so I can provide you with SSH access if you need it.\n. ",
    "DavidAnderson684": "I had this problem on cPanel too. /opt/cpanel/ea-php56/root/usr/bin/php works but /opt/cpanel/ea-php70/root/usr/bin/php does not (but gives the same output as in this issue).. ",
    "heron-brito": "\nI had this problem on cPanel too. /opt/cpanel/ea-php56/root/usr/bin/php works but /opt/cpanel/ea-php70/root/usr/bin/php does not (but gives the same output as in this issue).\n\nI had this same behavior with cPanel.. ",
    "PatelUtkarsh": "@danielbachhuber Sure will do. \n. @danielbachhuber \nI have a use-case, I created a role fake\nIf I run wp reset role fake or wp reset role --all should we remove this fake role?\nOr we only reset default roles? (Currently, it is only resetting default roles)\nSo if we are only resetting default roles when you said \n\nCould we add a message for when a role is removed too, and make sure there's a test for it?\n\nDo we have a use-case for that? \n. Okay, I'll add verbosity.\nWe can have command like\nwp role reset --all (reset default and remove extra roles)\nwp role reset --default (only reset default roles)\nBut as it is already implemented changing it would be difficult. Should I\ncreate an issue for same?\nOn Saturday, July 9, 2016, Daniel Bachhuber notifications@github.com\nwrote:\n\nIf I run wp reset role fake or wp reset role --all should we remove this\nfake role?\nOr we only reset default roles? (Currently, it is only resetting default\nroles)\nOh. I assumed wp reset role --all would delete custom roles. If the\ncustom roles don't get deleted, maybe we should have some verbosity instead\nthat says \"Custom role 'fake' not affected\" or similar.\nSo if we are only resetting default roles when you said\nIf we're only resetting default roles, then what I said was incorrect. My\nbad.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/3132#issuecomment-231539427, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/AEyHwTt3xLnwTwjQTz8rp-0m_qyZjv1jks5qT7vygaJpZM4JImF7\n.\n\n\nRegards,\nUtkarsh Patel\n. @danielbachhuber \n\nverbosity instead that says \"Custom role 'fake' not affected\"\n\nIs remain I will update it in new PR.\n. I have not tested this but you can add this lines in composer.json to fix dependency issue.\nWARN: It may break wp-cli.\n\"symfony/console\": \"3.2.1 as 2.7\",\n\"symfony/debug\": \"3.2.1 as 2.7.9\",\n\"symfony/process\": \"3.2.1 as 2.6.9\",\n\"symfony/yaml\": \"3.2.1 as 2.8.9\"\nRef: https://getcomposer.org/doc/articles/aliases.md#require-inline-alias. I had to add if condition so so they are indented to one more level. \n. Sure will update. \n. We are removing entire role and adding it back but we can get the diff of capability and show message like in this case Restored 1 capability and removed 0 capabilities from 'author'\nDo you want to show message in case of 0 capability changed ?\nLike in above case message should it only display Restored 1 capability from 'author'?\n. Sure.\n. In this case, Do you want to show a message like Restored 1 capability and removed 0 capabilities from 'author' or Restored 1 capability from 'author' ?\n. Just \n\nSuccess: Role didn't need resetting.\n\nor \n\nNo changes necessary for 'author' role.\nSuccess: Role didn't need resetting.\n\n?\n. In case of single role passed as param like wp role reset author\nYou want Restored 10 capabilities to and removed 9 capabilities from 'author' role. this message to be skipped and add Success: Role reset. ? \n. Same usecase as https://github.com/wp-cli/wp-cli/pull/3132#discussion_r70182808 ? \n. In case of\nWhen I run `wp cap remove author read`\nand I run `wp role reset --all`\nWhat should be the output? \n. ",
    "TimothyBJacobs": "I don't think this is ready to close yet, from looking at the code, it looks like this also needs addressing in the other three object commands.\n. Yep.\n. ",
    "thatryan": "Each post with the same custom tax will have the same featured image, yes.\n. So this is the args and register part of the function,\n$args = array(\n    'labels'                     => $labels,\n    'hierarchical'               => true,\n    'public'                     => true,\n    'show_ui'                    => true,\n    'show_admin_column'          => true,\n    'show_in_nav_menus'          => true,\n    'show_tagcloud'              => false,\n);\nregister_taxonomy( 'system_type', array( 'sqms_prod_select' ), $args );$args = array(\n    'labels'                     => $labels,\n    'hierarchical'               => true,\n    'public'                     => true,\n    'show_ui'                    => true,\n    'show_admin_column'          => true,\n    'show_in_nav_menus'          => true,\n    'show_tagcloud'              => false,\n);\nregister_taxonomy( 'system_type', array( 'sqms_prod_select' ), $args );\nand I have a term named \"Ductless\" slug of \"ductless\"\nI ran this command, \nwp post list --system_type=ductless\nAnd return is an empty table. Am I misunderstanding something?\nThank you!\n. Ah gotcha! Makes sense, returns this error, is this WP CLI related?\nFatal error: Class 'WP_Metadata_Lazyloader' not found in /srv/www/plugin-dev/htdocs/wp-includes/meta.php on line 865\n. Sweet, my bad.\nGot that going, curious what this line does,\nATTACHMENT_ID=\"$(wp media import ~/Downloads/image.png --porcelain)\"\nDoes that create a local variable to store the image for the next command?\n. ",
    "enrico-sorcinelli": "I just updated PR to assure only one slash.\n. ",
    "n8xja": "Looking further, on the site that exists without error or any output, the follow command \"wp --debug help\" produces the same six lines of debug output., without displaying any help. \n. Used:  wp --skip-plugins plugin list --field=name | awk '{print \"wp --skip-plugins=\"$1\" plugin list \"}' \nTo cycle through each plugin, and found that:\nwp --skip-plugins=redirect plugin list\nwhich maps to a plugin that appearently hasn't been updated in 8 years.\nDeactivating that plugin allows wp-cli to work on this site. Thank you for the troubleshooting \"baby-sitting\".\n. ",
    "cgsmith": "Just a side note, i didn't know i had to match nightly until digging through #1310 and a comment on #1631 \nA normal user should not have to dig that far to find out they need to update to nightly. Let me know how i can help with this as well.\n. In order to get around wp-cli errors I had to update it to the nightly build. This was not immediately clear while searching, I thought wp-cli was just broken.\nIt appears that /usr/local/bin is assign root:root by default. I was also wrong as composer self-update does require elevated permissions.\nMy thoughts are to allow a user to run sudo wp update without a warning message - if they are running sudo they should understand the risks. \n. Should the documentation be updated to explain that /usr/local/bin should be writable by the user?\n. ",
    "mbtamuli": "I would like to work on this. This will be my first time. Can I be assigned this issue?\n. ",
    "promethe42": "I don't see any unit tests for wp post meta. Should I create a new file?\n. @danielbachhuber I honnestly don't think I'll have the time :(\n. ",
    "PowerKiKi": "I'd suggest to release a 1.0.0 to represent the maturity achieved in the last five years and the fact that it's widely used in production environments.\nOther than that stick to semver, release patches \"often\", and release minor \"from time to time\". So basically what you did so far. I believe wp-cli tool is easy to update often, so as long as it's non breaking stuff (that would warrant a major version), then there is no problem to release whenever there is something to be released.\n. ",
    "mamchenkov": "Whatever you were doing so far, worked great for us! :+1: Thanks for all the hard work. :smile: \nP.S.: WP-CLI is part of project-template-wordpress which we use to manage dozens, if not hundreds, of WordPress projects.\n. ",
    "ben-morin": "It's not invalid syntax, jetpack is the command but is being excluded.\n$wp --skip-plugins=hello jetpack status\n...might be a better example. The point is that excluding hello shouldn't exclude jetpack.  Also note that in my example jetpack is network activated. That's where the problem lies in sitewide plugins.\n. Excellent.\n. ",
    "bitwombat": "Is --no-debug still a part of this PR?  Because I don't want to get all the notices and warnings from the CLI just because I've set WP_DEBUG true for the site itself.  Not sure if that should be its own issue.. ",
    "rahulsprajapati": "@danielbachhuber oops, I was thinking that my PR was closed. \n. @danielbachhuber Please can you suggest me what should I use for language : Package language OR Installation language.\n. @danielbachhuber Yes, I will include test case for a non-en_US locale asap. \n. yes, I fixed it already.\n. For comparing the default capability and exist capability of a role in the database, we needed list/array of default capability of a role for dry-run. As for reset role we first remove role and store the capability in the array, then we add the roles with default capability again. After that, we check count using that array.\nHere I didn't found any WordPress core function to fetch the default capability of the role. We can add this function in core.\nThere is one another way without using this method, we can add the removed capability after resetting role for dry-run. But I was not sure if that's a good idea because I think in dry-run we should not do any changes in the database. \n. Yeah, sure. \nMeanwhile, I will try to find the alternative solution. Thank you.\n. ok\n. yes. :+1: \n. Thank you. :)\n. No, we don't need dry-run as class variable as we are not using it in any other method. :+1: \n. @danielbachhuber Is this looks good ? :) \n. @danielbachhuber I was thinking if we can use this array of roles function in WordPress core \ni.e. : https://core.trac.wordpress.org/browser/trunk/src/wp-admin/includes/schema.php#L631\n```\nfunction populate_roles_160() {\n// Dummy gettext calls to get strings in the catalog.\n/* translators: user role */\n_x('Administrator', 'User role');\n/* translators: user role */\n_x('Editor', 'User role');\n/* translators: user role */\n_x('Author', 'User role');\n/* translators: user role */\n_x('Contributor', 'User role');\n/* translators: user role */\n_x('Subscriber', 'User role');\n\n$roles = array(\n    'administrator' => 'Administrator',\n    'editor'        => 'Editor',\n    'author'        => 'Author',\n    'contributor'   => 'Contributor',\n    'subscriber'    => 'Subscriber'\n);\nforeach ( $roles as $role_key => $role_name ) {\n    add_role( $role_key, $role_name );\n    $role = get_role( $role_key );\n    // We can add second parameter to fetch roles for respective versions\n    $role_capabilities = get_role_capability( $role_key, \"roles_160\" );\n    foreach ( $role_capabilities as $role_capability ) {\n        $role->add_cap( $role_capability );\n    }\n}\n\n}\n```\nAnd we can use get_role_capability function in wp-cli, also in future for new user role(capability) we need to change/update get_role_capability function only. \nLet me know your thought. :) \n. OK. No prob. :)\n. ",
    "andrewbanchich": "Oh that's awesome! I was looking for that on the website documentation under 'wp cront event delete'. Thanks!\n. ",
    "mike503": "Very odd. I wonder if it's due to the fact the cron hook might be hitting a die() because it's too easy for people to write poor plugins. I tested it with another hook and it did show the next_run_relative changed. My apologies. The documentation didn't make this clear either, which is why I was thinking it wasn't done by default.\n. ",
    "kasperrt": "Nothing is returned when not wrapping the path.\nIt's installed in the system's root directory, so error isnt with the given path.\n. My bad, it's working now.\n. ",
    "helgatheviking": "Well, at the very least I would suggest that the instructions or common issues include information on required permissions settings. \n. Ideally someone who knows about permissions should write that and if I knew what the correct permissions were (that were also reasonably secure) I wouldn't have opened this thread in the first place.\n. ",
    "JamesTheHacker": "Same problem here too.. ",
    "harry-wood": "It's a documentation issue, and also the warning/error message itself should give a tiny bit more info, stating where it's trying to create a directory. I've spun that out as a new issue: https://github.com/wp-cli/wp-cli/issues/4446  ...which has just been very rapidly closed. sigh\nAnyway...  the answer is, it's trying to create something under wp-content/upgrade/ I found it was enough to temporarily change ownership on that one directory, run the updates, and then change it back again:\nsudo chown harry:harry wp-content/upgrade/\nwp core update\nwp plugin update --all\nsudo chown root:root wp-content/upgrade/. ",
    "romulodl": "Hello @danielbachhuber.\nThank you for fixing this! \ud83d\udc4d \n. ",
    "mfissehaye": "The output of wp --info\nPHP binary:     /ramdisk/php/54/bin/php54-cli\nPHP version:    5.4.43\nphp.ini used:   /root/wp-cli/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.19.2\nThe output of wp cli update\nError: /root/php/54/usr/bin/wp is not writable by current user\n. I followed the installation instruction and instead of moving wp-phar.cli to /usr/bin/wp I moved it to my ~/bin/wp directory.\nwhich wp gives me nothing\nwhich ~/bin/wp gives me /home1/username/bin/wp\n. ",
    "jorgeatorres": "@danielbachhuber: thanks for your answer. I know this is a minor thing, but I've submitted a PR for this (#3283), just in case.\n. Sure. I'm on it.\n. @danielbachhuber: added. Please let me know if everything checks out.\n. ",
    "jb510": "Oh fancy! Thanks!\nQuestion (obviously I'm not that versed in bash scripting): Is the first $ your bash prompt?  I use zsh and have a custom prompt, but I it didn't work when I included the first $.\nwp plugin install $(wp plugin list --field=name) --force\nObviously I'm not that versed in bash syntax....   I found this https://www.gnu.org/software/bash/manual/bash.html#Command-Substitution which I assume is that function, just want to make sure I'm not missing something.\n. So this normally works, but I'm getting fatals from plugins and the theme calling a member function on null (old code using globals).  Normally --skip-plugins and --skip-themes would bypass that, but here I get\n```\n% wp plugin install $(wp plugin list --field=name) --force --skip-plugins --skip-themes\nusage: wp plugin install ... [--version=] [--force] [--activate] [--activate-network]\n```\nI guess you can't skip when installing?  Seems odd though as I thought those were global params https://developer.wordpress.org/cli/commands/plugin/install/ \n. damn it... that thought occurred to me briefly and then I forgot to try it. You bash skilled are legendary...  . @gothmog123 have you tried wp cli update ? You may be correct that you need to wait for someone with privileges to update it for you. \n. ",
    "thefrosty": "\nAs it turns out, Composer is dependent on symfony/process\n... and Composer is dependent on symfony/finder\n\nSo it's reliant on both of these? \nI'll gladly test out the version updates. Hoping it could work out since we're running PHP 7.x. \n. ",
    "gothmog123": "Hi ernilambar,\nHere it is:\nPHP binary: /usr/local/php/5.6.24-nfsn1/bin/php\nPHP version:    5.6.24-nfsn1\nphp.ini used:   /usr/local/php/5.6.24-nfsn1/etc/php-cli.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:    /home/private//.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.23.1\nSome command actually work, but most don't.\n. Thanks for the replies. I think I'm not allowed to access wp cli files. It's a shared server at NFSN...\n. ",
    "JonathanDoughty": "Same problem; only when I back out the changes that led to the \"PHP Fatal error:  Call to undefined function apply_filters()\" and try to wp cli update I get \"Error: The downloaded PHAR is broken, try running wp cli update again\" - repeatedly. I can curl -O https://github.com/wp-cli/wp-cli/releases/download/v0.24.1/wp-cli-0.24.1.pharand the result has an sha256 of ba1ba7a66f6a2a983910d4497771a255dfa8212ab7787fb4fbd21cd9102f2dbc\nwp --info\nPHP binary: /usr/bin/php5\nPHP version:    5.6.24-0+deb8u1\nphp.ini used:   /etc/php5/cli/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:    /home/admin/.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.23.1\n. ",
    "evilebottnawi": "@danielbachhuber be good if we fast fix this and release, if we need i can help :smile: \n. @schrapel Thanks!\n. @manuelRod use https://github.com/wp-cli/wp-cli/issues/3315#issuecomment-242084985, we should wait when new version was released.\n. @danielbachhuber option contain only ID. I need:\n1. Create attachment, but if i create attachment i can't use site_icon_image_sizes filter there containt sizes for favicon :sob: .\n2. Update option.. @danielbachhuber just run composer install. Simple steps:\n1. cd /home/user/web/mysite\n2. composer install\n3. vendor/bin/wp or vendor/bin/wp --help and etc, always error.\nTried from usual user and root. \nshell\nPHP 7.0.19-1~dotdeb+8.1 (cli) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.0.19-1~dotdeb+8.1, Copyright (c) 1999-2017, by Zend Technologies\nshell\nComposer version 1.4.2 2017-05-17 08:17:52. Start debugging. @danielbachhuber found problem.\nSetting config.classmap-authoritative to true in composer.json throw this error.. @danielbachhuber seems some classes don't put into the classmap composer.(https://getcomposer.org/doc/articles/autoloader-optimization.md#how-to-run-it--2). \nI am not familiar with wp-cli on deep level :disappointed: . @schlessera try to remove cache, not solved problem. @schlessera hm, but it is work as expected with 1.6.5 version, looks something changed in composer. Fixed in composer@1.7.1.. ",
    "manuelRod": "do you know guys if is there any progress on that?\n. ",
    "pmirek": "Thanks!\n. The thing is that searches from WP itself works fine. Results show up in the web interface. But I can't get them via proxy & wp-cli.\n. ",
    "harryfinn": "Thanks for the speedy response @danielbachhuber! It's definitely something myself and colleagues\nwould benefit from, primarily when we've got different WP projects with alternating php config options required and wanting to test locally etc. \n. ",
    "jdanarola": "I am facing same problem. We are using Redis cache only. We tried to change private to public but still it gives error. \nHave you find any solution for it?\n. ",
    "blue928": "Thank you for the quick response. Yes, I understand that using root is discouraged, and I'm trying to setup the environment correctly so that I don't have to.\nTrying to run  wp-cli as WWW-DATA throws an error that the account does not exist.\nWhat do I need to do so this works correctly? Which user do I run it as?\n. The issue is not about debugging it but having documentation that explains its correct usage for different environments, even, if that's necessary. Is this documented somewhere?\n. ",
    "RomkaLTU": "I done this with alias\nnano ~/.bashrc\nadd\nalias wp='wp --allow-root'\nLogout and login again after that.. ",
    "jonathanlaf": "Yes I have normal post, let me a couple of minute I will share a video link of my console with you.\n. Oh WP-CLI god, can you forgive me ? I can't reproduce my \"bug\" so I assumed that I was typing it wrong all that time. I'm so sorry! \nSorry for wasting your time I just tested it again and again to show it to you and I can't reproduce the problem, I don't type post_type and it default to post like it should. \nHave a good day! \nP.S. Still a good idea to tell that we can select multiple status / post_type with comma.\n. ",
    "tienloc1": "I still don't know how to use dropbox direct link, the problem here: when get dropbox direct link and using it, it will get back 403 forbidden. Maybe you can investigate it?\n. ",
    "MarioKnight": "This seems to have been exactly it, mine also seems to have reinstalled itself on that server last night, now shows (cli), and my scripts are working again.  Very good to know to keep an eye out for, thank you!  =D\n. ",
    "ccarrascom": "I have the same problem, empty messages but php-v shows (cli). \nWhen i run php -v this is what i see\nPHP 5.6.26 (cli) (built: Sep 27 2016 03:23:51)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with the ionCube PHP Loader (enabled) + Intrusion Protection from ioncube24.com (unconfigured) v5.1.1, Copyright (c) 2002-2016, by ionCube Ltd.\n    with Zend Guard Loader v3.3, Copyright (c) 1998-2014, by Zend Technologies\n    with Suhosin v0.9.38, Copyright (c) 2007-2015, by SektionEins GmbH. i found a solution, add this line into php.ini \nsuhosin.executor.include.whitelist = phar\nThis will whitelist phar packages execution\n. ",
    "marcus-downing": "So I'd need a whole second WordPress installation in order to reference an alternative database?\n. ",
    "guillaumemolter": "@ernilambar was working on it :-) PR opened\n. ",
    "matmar-91": "@gbcxjoe \nSimple workaround for this is creating php file where you set SERVER_NAME variable, which is not available from CLI, but used by wordpress core. Then you can pass this file to command with --require flag. \nyour_file.php\n<?php $_SERVER[ 'SERVER_NAME' ] = 'your.host.com'; ?>\nNow you can for example do this:\nwp user create username email@example.com --display_name=\"John Doe\" --first_name=John --last_name=Doe --send-email --require=your_file.php\n. ",
    "r0xsh": "wp-includes/pluggable.php:352\nReplace\n$phpmailer->setFrom( $from_email, $from_name, false );\nBy\n$phpmailer->setFrom( \"wordpress@foobar.com\", $from_name, false );. ",
    "markparolisi": "I had this issue as well running WP v4.6 and WP-CLI v0.23.1\nUpdating CLI to v0.24.1 fixed it.\n. ",
    "cipher-code": "The example came from the v0.24 code, which came from the latest.phar download at the time. I also updated to v0.24.1 through cloning this repo and setting it up, fixed the issue for me.\nI'm running WordPress 4.6\n. ",
    "info2000": "but in my install, isn't working, and in other installs works\n. ",
    "DenisPopov15": "@halian-vilela I have exactly the same issue, do you have any progress here?\nUpdate:\nFor me resolve issue update system PHP version to the using by MAMP\n. ",
    "gravyboat": "\nDoes it happen for other commands too (e.g. installing a plugin), or just installing a theme? - This is unique to theme installations, other commands do not cause this http request to be created.\nDoes the issue reproduce consistently, or intermittently? - Consistently. We've noticed it happen on several domains that just happened to be parked at GoDaddy parked pages, typically domains don't point elsewhere so while we can reproduce it, it is rare. If a domain is pointed to an actual hosted platform where the request will complete the process does not stall at this stage.\nAre you running custom code? Does the issue produce on a stock install of WordPress, or when you include --skip-plugins --skip-themes? - No custom code going on here.\nCan you share the full output of the command? - This is the full output of the command, it doesn't go past this point.\n. This issue should be reproducible by having a domain pointed to a provider (in this case GoDaddy, though it may occur elsewhere) where a domain is not actually hosted, so a generic parked page that doesn't have a wordpress installation. Then simply run /usr/local/bin/wp --path=/path_to_wordpress_install theme install --activate https://domain.s3.amazonaws.com/path/theme.zip and the issue should present itself where this command hangs and then silently fails.\n. \n",
    "itspriddle": "Hey @danielbachhuber, I did some digging and found some more information. This isn't actually a problem with wp theme install directly, but a combination of two things.\nWe believe that the GoDaddy domain that initially caused this issue is tarpitting us. That's obviously not a WP-CLI issue, but it is the cause of the slowness and a side-effect of a bug (or feature?).\nIt seems that WP-CLI can randomly trigger wp-cron to fire (aside from wp cron commands due to this. Is this by design? It seems unexpected to me, but I will admit may be missing something. As a work-around, we can explicitly define( 'DOING_CRON', true ) in a script and wp --require=script.php, but we weren't sure if this is expected behavior.\nSo what's happening in our example, is that wp theme install file.zip (any wp command really) is sometimes running at just the right moment to trigger wp-cron and GoDaddy is tarpitting us resulting in a huge delay for the command to complete.\nLet us know what you think, and thanks for the help! \n\nIf you want to see this in action these are the steps I used (an example GoDaddy domain that can be used is montemorano.com, but it doesn't really matter):\n1. Setup a bare WordPress 4.6.1 instance\n2. In one terminal: sudo ngrep -qt 'T' | grep wp-cron (this was on OS X, maybe ngrep -qt 'TCP' for Linux)\n3. In another terminal: while true; do wp > /dev/null; done\n4. Back in the terminal running ngrep, you will eventually see output like POST /wp-cron.php?doing_wp_cron=1473888795.2733130455017089843750 HTTP/1.1\n. Cool, thanks for the info!\n. ",
    "mmaton": "I've run into the same issue (I think!)\n[vagrant@localhost wordpress]$ wp core multisite-install --url='local.example.com' --title='Example Site' --admin_email='wp@example.com' --admin_name='admin' --admin_password='administrator123'\nWarning: Unable to create directory wp-content/uploads/2017/09. Is its parent directory writable by the server?\nCreated single site database tables.\nSet up multisite database tables.\nSuccess: Network installed. Don't forget to set up rewrite rules.\n[vagrant@localhost wordpress]$ wp core version\n4.8\n[vagrant@localhost wordpress]$ wp cli version\nWP-CLI 1.3.0\nAnd we check the database:\n[vagrant@localhost wordpress]$ mysql -uroot -e \"select * from wordpress.wcp_sitemeta where meta_key = 'site_admins'\"\n+---------+---------+-------------+------------------------+\n| meta_id | site_id | meta_key    | meta_value             |\n+---------+---------+-------------+------------------------+\n|       9 |       1 | site_admins |                        |\n|      25 |       1 | site_admins | a:1:{i:0;s:5:\"admin\";} |\n+---------+---------+-------------+------------------------+\n[vagrant@localhost wordpress]$\n\nThis ensures that the following code evaluates to not false, but an empty string, ensuring that we now have an incorrect site_admins option which is cached when using an object cache. This is playing up with the 'redis-cache' plugin https://github.com/WordPress/WordPress/blob/4.8/wp-includes/option.php#L1159\n. ",
    "rtofvnt": "ok - I'll promise to read FULL manual next time.\nThanks\n. Cheers -  as I was mentioned - I can't update all, that's why solution with comma separated is the best solution for me. \nThanks \n. ",
    "afragen": "If you add an access token to the API request the limit increases to 5000 per hour. \n. It's a simple query arg in the format ?access_token=xxxxxxxxxxxxxxxxxxxxxxxxx\nYou would have to set it; but simple enough to define as a constant in wp-config.php. Also, the access token needs to only have read public repo privileges. Unless you're dealing with private repos but I assume you would have come across this before. \ud83d\ude09 \n. Hmm, well if you can figure out how to add it, it should solve the timeout issue.\n. @danielbachhuber can you point where in the code this is, it like to take a look at it. Not sure I can help, but never know. \n. ",
    "realgeek": "Damnit. It's in backfill_attachment_urls() in wordpress-importer.php.\n. ",
    "fabianskii": "oh. my bad. Its a mistake with the blanks. RESULT = something seems not to work. RESULT=something does.. :-/\nI'll do a new pull request in a minute\n. @danielbachhuber then I close this pull request, and open a new one via a newly forked repo?\n. @danielbachhuber currently not. I tryed to set up a clean environment at home but could not finish it in time. I'll try to have a look on it by the end of the week.\n. yap, those are redundant. I removed them in my last commit. Thought they'd be needed because I had errors while trying to establish the connection, but they are not. \n. ",
    "hakre": "The discrepancy in detail:\nThe wp-cli interface reports:\n$ wp core language update \nSuccess: Translations updates are not needed for the 'English (US)' locale.\nWhile in the wordpress admin there is\n\nTranslations \\n  New translations are available.\n\nreported, and updates are actually available and then done:\n\nUpdating translations for Twenty Fifteen (<ISO-LANG-CODE>)\u2026\nUpdating translations for Twenty Ten (<ISO-LANG-CODE>)\u2026\n\nSo just technically a\n$ wp core language update -- [ISO-LANG-CODE ..]\nwould be working in my case.\nAlternatively if it would work out of the box with Polylang would be extremely comfortable but I'm more for a general  solution than specific to a plugin and I can't say the exact cause of the flaw, so Polylong is just what I assume.\n. Sorry, I thought it was clear from my report. It could qualify as a bug, however, more clarity for me would be if I can specificy the ISO-code with the core language update command sequence.\nIt can be reproduced by installing more than the default language.. ",
    "anhskohbo": "When you run wp import wp.xml without --debug flag.\n. Sorry, I misunderstood idea. I think WP_CLI::success( \"Finished importing from '$file' file.\" ); will be display after a blank line.\nClose pull request!\n. ",
    "danielpataki": "Hi @danielbachhuber,\nYes, it seems to work fine. I haven't done any proper testing on 7.1.0 but I did click around the admin, add some posts and whatnot - no issues so far. \nSome more info: when I use sudo wp core is-installed --allow-root I do not get the segmentation fault, but I also don't get any output at all. \nI checked a bunch of logs:\n- /var/log/syslog/\n- /var/log/nginx/default-error.log\n- /var/log/nginx/error.log\n- /var/log/nginx/php-fpm_error.log\nMy Nginx error log is set to the error.log file in there and I modified the reporting level to debug, still nothing. I know a little bit about error logs and I find my way around the terminal and servers but I'm no sysadmin, sorry if I'm not of huge help here. \n. Also, I thought I'd mention that I have used WP-CLI heavily on PHP Version 7.0.11-1 before without issues so this might be a problem with the Vagrant box. I suspect that if this was a widespread issue on 7.x there would be a lot more issues about this :) \n. ",
    "louisremi": "@danielbachhuber Shouldn't the doc in the wiki be updated to instruct people to use phpunit 4.8 or 5.* according to the PHP version they're running?. Sure! See PR link above :-). ",
    "stillatmylinux": "Actually it's --url= \nwp media regenerate --url='http://demo.dev/deepthought. ",
    "GitHub-Mike": "Yes, with:\n- wp core download --locale=de_DE\n- wp core config ...\n- wp core install ...\n- wp plugin install woocommerce --activate\n2016-10-17 18:21 GMT+02:00 Daniel Bachhuber notifications@github.com:\n\nDoes the problem reproduce in a fresh WordPress install?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3476#issuecomment-254256695, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ARwSPI206pWN-QTPp0OtVEyTATpdBU_Dks5q06BugaJpZM4KY0RF\n.\n. No problem with new wordpress installation and new database, without\nplugins.\n\nWordPress version: 4.6.1\nDatabase revision: 37965\nTinyMCE version:   4.401 (4401-20160726)\n2016-10-17 18:49 GMT+02:00 Daniel Bachhuber notifications@github.com:\n\nDoes it reproduce without WooCommerce activated?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3476#issuecomment-254264603, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ARwSPAFeM4_s2TphmY8pQ3umENzQCrYvks5q06cPgaJpZM4KY0RF\n.\n. No,\n\nI installed woocommerce plugin only. No other plugins!\nWP CLI supports woocommerce commands.\nReopen issue, please.\n2016-10-17 19:33 GMT+02:00 Daniel Bachhuber notifications@github.com:\n\nClosed #3476 https://github.com/wp-cli/wp-cli/issues/3476.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/3476#event-826293898, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ARwSPFdXISG5yIfqbyR-2uKV4NWWkQMCks5q07GEgaJpZM4KY0RF\n.\n. \n",
    "tommcgee57": "Ah, thanks. Adding --archived=0 to the site list command worked.\n. ",
    "kouratoras": "I created pull request for Greek translation.\n. ",
    "michaelalhilly": "This is a dev image so there's no sensitive info. Here you go. I should mention this file is generated using wp core config.\n```\n<?php\n//  MySQL settings  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', 'wordpress');\n/* MySQL database username /\ndefine('DB_USER', 'username');\n/* MySQL database password /\ndefine('DB_PASSWORD', 'password');\n/* MySQL hostname /\ndefine('DB_HOST', 'mariadb');\n/* Database Charset to use in creating database tables. /\ndefine('DB_CHARSET', 'utf8mb4');\n/* The Database Collate type. Don't change this if in doubt. /\ndefine('DB_COLLATE', '');\ndefine('AUTH_KEY',         'Ib6$kid,>ehYSD#-<9&@E]zwQ!/ _-,=7#.=ULaHQ!k!EQMbS@zlKl0L2US9yw');\ndefine('SECURE_AUTH_KEY',  'XQSI@NpzA<r@-d/~)o.*u*OG%KeF3IbJIK)&<Pf{w^]N[t_DzxOf}1@J!ZNB>(rK');\ndefine('LOGGED_IN_KEY',    'l}$WZ(AWTZvWw;iKc!=^k2_y4o.^A]ffB[V}# fW+8hZ9R gO!-KbW7~j2[x0h7');\ndefine('NONCE_KEY',        'S&3v(U&G-2+FF +[c3ef-bV|Hr:_t|gMcOCS49Z98x:zr^w,{h|L7]Rmf)t1D');\ndefine('AUTH_SALT',        '%/VR;;&8SF2C6DLztqh|m?/npU,2}4hn@J]n|Eo%|zi9vjLiyLS~r&8KF%,Q|VX');\ndefine('SECURE_AUTH_SALT', 'yndN6PBHfdV~rU{d1x-IU.7VfOso:%A.#KE6.ta$QF.T?|FUS>wRgNW]|H?x|q2');\ndefine('LOGGED_IN_SALT',   'k3zvd6 J|$u0wW6jf9bGkmAzJCLqcb)d$Hgq]]:c|SXStF_EGt3?|x!4Zkspctk');\ndefine('NONCE_SALT',       '?%$Wzp-1^s=BObFh]4sz@Tt&BIh:pDcPuU,8/rv+f(> !MCpf_mR&PVhu!-LUo ');\n$table_prefix = 'wp_';\nif (isset(['HTTP_X_FORWARDED_PROTO']) && ['HTTP_X_FORWARDED_PROTO'] == 'https') ['HTTPS'] = 'on';\n/ That's all, stop editing! Happy blogging. /\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n    define('ABSPATH', dirname(FILE) . '/');\n/* Sets up WordPress vars and included files. /\nrequire_once(ABSPATH . 'wp-settings.php');\n```\n. You're right. It's this line:\nif (isset(['HTTP_X_FORWARDED_PROTO']) && ['HTTP_X_FORWARDED_PROTO'] == 'https') ['HTTPS'] = 'on';\nKinda need that line since the site is eventually deployed to AWS behind an ELB. Hmmm... I'll work on it.\nSorry for the false alarm. I'll close the issue.\n. ",
    "amiga-500": "Ahh thank you very much!\n. Much appreciated...now i know i am not crazy. . Seems i am using WP-CLI 1.0.0\nThe wp cli update says i have the latest.\nSo i have to assume your WP-CLI 1.1.0-alpha is not out yet but figure a wp cli update --nightly will bump my version up to that, fixing my problem.  I'll give it a try.\nThanks\n. Sadly...after updating mine to the alpha version:   WP-CLI 1.1.0-alpha-80ddf39 i am still seeing the same problem:\n\nOnce again, take note of the indentation AND also take note how there is no \":\" before the description: \"Stop the active page cache priming session.\" . Hi @danielbachhuber  i figured it out finally...it seems when a  php file saves in PC-style Line Ending instead of UNIX then WP-CLI collapses and is unable to parse the help text correctly (as seen in the pix above).  When i re-saved the text file in UNIX style WP-CLI then was able to work correctly\nDo you think that including files saved as PC style could be supported too?  I figure you'd simply be looking for \\r\\n and not just \\n ?. ",
    "migueldemoura": "@danielbachhuber, sure, but I think is either a bug, a badly documented feature or an uninformative error message (the debug flag doesn't help either). I thought each one of those lines changed the corresponding option_value in wp_options. It appears that's not the case.\nCommand descriptions:\nsite - Perform site-wide operations.\noption - Manage site options.\nupdate - Update a site option.\nMaybe change the site command description to \"Perform site-wide operations in a multisite install\"?\nTo anyone stumbling upon this on a single-site install, this is a way to fix it using wp-cli:\nwp db cli <<< \"UPDATE \\wp_options` SET `option_value` = 'https://domain.tld/~studentID/wordpress' WHERE `option_name` IN ('siteurl', 'home')\"`\n. Thanks for the tip. I would change the command description though ;)\nCode changes:\nwp option update siteurl \"https://domain.tld/~studentID/wordpress\"\nwp option update home \"https://domain.tld/~studentID/wordpress\"\n. ",
    "mopquill": "It doesn't work out of the box... would you care to point me in the right direction?\n. Yes, I read that, which is how I found many of the links I mentioned. As I stated in my original post, my thoughts were that it not working out of the box on a cookie-cutter system might indicate an issue, which I wanted to confirm, especially as the error isn't actually telling me the problem it's running into. Thanks.\n. If anyone else ends up seeing this and needing it, this error is related to the parsing of config.php in such a way that you cannot use WordPress functions. The error failing out is cryptic, and this has been reported by the same guy that closed my thread. It was marked as a bug that will not be fixed: https://github.com/wp-cli/wp-cli/issues/1631\nThe solution is to move anything causing errors to mu-plugins as a workaround.\n. That's not the same issue. It's also a fatal error, but that's about it. If that is intended to be the same error, something more along the lines of \"wp-cli attempts to parse your wp-config.php and removes the code that starts WordPress. Attempting to call a WordPress function will result in a failure. Any modifications that cause this can be moved to an mu-plugin as a workaround.\"\nFrom my perspective, I was reporting a bug that had already been reported, which would not fall under support. It would have been reasonable to link me to that specific report, as earlier, I was not looking at things that were classified as bugs, as I would have thought they would be dealt with or detailed on the issues page -- which was perhaps an oversight on my part. Closing the thread as support and linking me to the page I already read doesn't seem to be in good faith, especially considering the time and effort I put into my original post for what turned out to be a bug after all.\nAs a fellow developer, I understand that burnout can set in from overwhelming amounts of support requests for a free product (and that's not to say I don't appreciate all the work! -- and believe me, I really empathize), but I'd rethink the philosophy behind this behavior -- clearly I wasn't being lazy, I just wasn't familiar with the idiosyncrasies of this hitch.\nIn any case, thanks for creating this in the first place. It seems like it will be really useful to keep everything running well, so I look forward to that. Have a good day. :)\n. > To help the next person that comes along, could you submit a PR to the \"Common Issues\" doc with your suggested changes?\nSure, I can do that.\n\nOk. I think part of the problem may be that we have two different working definitions of \"support\".\n\nThat is possible. To me, support is \"fix my problem for me\" as opposed to \"this is a bug that is not practical to fix, see: https://github.com/wp-cli/wp-cli/issues/1631\" which takes about as much effort as closing the thread and linking me to the support section on the main site.\n\nSure, but please appreciate the implicit demand of time you're making on someone else. Even though it was helpful for you to put together a comprehensive report, it's ultimately self-serving \u2014 to solve your own issue.\n\nI absolutely do. I took the time to write this report because it didn't work out of the box, after following all instructions perfectly. I could have taken the time to just try fixing my issue alone (which I did after it looked like I wasn't going to hear anything, and it only took like 10 minutes of searching -- stack exchange was less helpful and I thought it would be more helpful). I figured rather than just trying to fix it for myself, I'd spend a while compiling all of that information, and pouring over everything because this seems like a good project, and it would help to hammer something like that out if possible for future users. Yes, I would benefit from it, but not as much as I would not dedicating time to writing up an issue for something I thought might be an unknown bug and just fixing my own stuff. It seems like something that should be made very apparent if a wordpress CLI can't run built-in wordpress commands from the config. I absolutely understand why that is so, but it's not at all apparent to a newcomer to wp-cli, you know?\n\nWhat would you suggest doing instead, that doesn't increase the maintenance burden?\n\nI personally usually do extensive FAQs. Make sure they cover all of the stuff people run into, so you really can just link them the page and close the thread. Then anyone coming in is lazy, or reporting an actual bug.\nEDIT: screwed up the Markdown.\n. > Just for the record, while it may not seem to take a lot of effort, it does take more effort for me to work with you to track down the bug. I didn't know it was that issue at the time; if so, I would've linked to it.\nWell, knowing the issue now, I would say that Call to undefined function add_filter() makes the issue obvious, but I can certainly understand not having the time to read through all the details of a post like this.\n\nOh, you indirectly gave me an idea. I should clarify that bugs need to be reproducible in a fresh WP install: wp-cli/wp-cli.github.com#253\n\nThat's a good idea.\n\nAs you learn how to use WP-CLI, and want to share your findings, pull requests to improve the documentation are more than welcome.\n\nOkay, cool, will do. I just finished the changes to the .md for common issues, going to fork and file a pull request in a moment. I do most things via command line and an IDE, and I know git, but not github, so bear with me for a few minutes while I figure out the GUI equivalents to the commands. Github keeps showing me a unicorn, so that is only further complicating matters. :P\n. ",
    "GabLeRoux": "Found this issue from a google search with following error message:\n\nPHP Fatal error:  Uncaught Error: Call to undefined function add_filter() in phar:///usr/local/bin/wp/php/WP_CLI/Runner.php(1070) : eval()'d code:110\n\nUseful things from above comments:\n\nwp-cli attempts to parse your wp-config.php and removes the code that starts WordPress. Attempting to call a WordPress function will result in a failure. Any modifications that cause this can be moved to an mu-plugin as a workaround.\n\nRelated documentation: wp-cli common issues: PHP Fatal error: Call to undefined function \\ #\nI installed fresh install of a wordpress bitnami installation on aws as their suggested installation method and the undefined function add_filter() error occurs because bitnami has a custom wp-config.php file where it adds the following lines at the end of the file:\n```php\n//  Disable pingback.ping xmlrpc method to prevent Wordpress from participating in DDoS attacks\n//  More info at: https://docs.bitnami.com/?page=apps&name=wordpress&section=how-to-re-enable-the-xml-rpc-pingback-feature\n// remove x-pingback HTTP header\nadd_filter('wp_headers', function($headers) {\n    unset($headers['X-Pingback']);\n    return $headers;\n});\n// disable pingbacks\nadd_filter( 'xmlrpc_methods', function( $methods ) {\n        unset( $methods['pingback.ping'] );\n        return $methods;\n});\nadd_filter( 'auto_update_translation', '__return_false' );\n```\nError message is indeed obvious, we need to get rid of the add_filter functions from wp-config.php.\nA simple workaround for this is to move these lines from wp-config.php to your theme's functions.php instead.\nSuggestion for a wp-cli fix\nInstead of failing with the error, the script could also parse the document with a regex to find calls to add_filter since this seems quite common, strip them in a similar way to what it does with require_once(ABSPATH . 'wp-settings.php');, and write a warning with links to the  wp-cli common issues: PHP Fatal error: Call to undefined function \\ #.\nNot a big deal anyway. Thanks for the awsome wp-cli :v:. Checking for WP_CLI is indeed a much better solution, thanks for passing by :). ",
    "jotamartos": "Hi @GabLeRoux , Bitnami Engineer here. \nAs a workaround in the Bitnami stack, you can simply include the pingback's configuration lines in the wp-config.php file inside a if block like this one:\nif ( !defined( 'WP_CLI' ) ) {\n// remove x-pingback HTTP header\n...\n}\nWe also noticed that we need to set the HTTP_HOST variable when using WP CLI and that can be fixed using this:\nif ( defined( 'WP_CLI' ) ) {\n     $_SERVER['HTTP_HOST'] = 'localhost';\n}\nI hope this information helps.\nJota. ",
    "JayWood": "@danielbachhuber to be clear, are we talking a rewrite of WP_CLI::warning() to exit with 1? Or just the above mentioned commands?\n. Thanks @danielbachhuber - it's not a huge issue with me, but figured it wouldn't hurt to ask \ud83d\ude04 . ",
    "markng": "This would affect Liquid Web minimally (enough that we'd appreciate the warning), and the change would help us in the future.\n. ",
    "greg-1-anderson": "LGTM. New behavior is highly desirable, and shouldn't cause any problems at Pantheon.\n. Opened #3580 to discuss gmcmilan's suggestion.\n. Drush itself primarily uses this facility when running drush @remote command. This uses backend invoke, which is a wrapper around proc_open that manages I/O in such a way as to allow the user to see incremental output, and still return structured data that includes the different log messages, the rendered output, the original php object or array that produced the output, and so on. This is useful for scripts that might want to call Drush and act on the results.\nThe current behavior is sufficient for most uses. Folks can use ob_start() with a callback function when they call exec or passthru to call wp-cli. They can ask for results in json format or what-have-you, as supported. Backend invoke is more convenient, and using a library could add consistency; however, it's also possible to just insert write(stderr, json_encode(...)) where needed in wp-cli. That would likely be messier / harder to maintain / potentially less consistent, but certainly would be sufficient.\n. I'll update this issue when I start factoring out backend invoke.\n. @danielbachhuber The history of Consolidation commands is:\nWP-CLI annotated commands -> Robo (submitted by third party via PR) -> Annotation format standardized to match phpdoc -> Refactored into consolidation/annotated-command -> Use of library in Drush and Terminus.  Terminus 0.x, as you may know, was a fork of wp-cli 0.x, and Terminus 1.x was then ported to use the annotated command library. This effort was very successful; you could ask @TeslaDethray and @ronan about their impressions.\nThe main addition that Consolidation added along the way is the output formatters project, which makes it very convenient for commands to produce structured output (e.g. tables) that can be rendered in human-readable format, with selected / reordered columns, converted to yml or json, etc. etc.\nThe main cost to WP-CLI would be that all of the command annotations would need to be reformatted to match the new syntax. Also, there are command hooks offered that are annotation based; these could optionally be adopted in place of the hook system WP-CLI is using now. I'm not sure if there is any immediate benefit to this; however, the annotated command hook system is extremely flexible and easy to use.\nIf you didn't want to take the leap to WP-CLI 2.0, you could also immediately benefit from the output formatters by using them directly. Output formatter support is automatic with no additional code when using the annotated command project, but you can also add them in to any Symfony Console per the API overview in the README. This would not be hard.\nIt would be great to have wp-cli join consolidation as a full user of annotated commands, though, as then, any future improvements to the parser / processor / outputter would benefit all of the associated tools using it.. Consolidation works back to php 5.4 -- but 5.3 is a non-starter. I'd like to see WP-CLI use the output formatter, but it would have to accept php 5.4 as a minimum php version in order to do so.\nThe bootstrap component is conceptual; it is not in use in any project. There is less use for a generalized bootstrapper when every CLI works with just one framework, as WP-CLI and Drupal Console have always done. With Drush 9 moving in the same direction, I don't know if that component will ever be finished.. ",
    "kkmuffme": "wp --info\nPHP binary:     /usr/bin/php\nPHP version:    7.0.9\nphp.ini used:   /etc/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI packages dir:    /home/USERNAME/.wp-cli/packages/\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.23.1\nwp core version\n4.5.1\n. ",
    "squarecandy": "Ok, submitted.. https://github.com/wp-cli/wp-cli.github.com/compare/master...squarecandy:patch-1?expand=1#diff-9d9b5c8cae9fcf9f6ec2aee8d25b6167\nhttps://github.com/squarecandy/wp-cli.github.com/tree/patch-1. ",
    "austinginder": "I ran into the same argument error while attempting to use wp post meta update with a very large piece of data. I overcame the argument limitation using here documents which will instead stream it to the command. This same approach can be applied for this use case. Here are some examples.\nDeletes massive list of posts IDs \nwp post delete --prompt << heredoc\n$(wp post list --format=ids)\nheredoc\nUpdates post meta with contents of a massive json file.\nwp post meta update 123 custom_field << heredoc\n$(cat massive.json)\nheredoc\nOr similar, updates post meta with contents of a massive bash variable.\nwp post meta update 123 custom_field << heredoc\n$json\nheredoc. ",
    "ClodClod": "For use WP-CLI the only solution for now is disable WPML plugin and reactive after use WP-CLI.. ",
    "jjcampbell": "OK I found a problem with wordfence ownership issues of its log files.\nDon't know why this happened - nothing I did. Nor do I understand why this\nstarted happening right after wp-cli was installed.\n. ",
    "Guardian101": "I am getting this same issue, how was this bug closed??. ",
    "noplanman": "@mikejakobsen and all others having this issue.\nAn easy workaround is to manually call composer to complete the installation:\n1. wp package install <package> (which fails, ok)\n2. composer -d=\"$(wp package path)\" update\n3. Happy! Go and use wp <whatever-you-just-installed>\nSometimes I still run into the memory limit issue, but running command 2 multiple times seems to work at some point, as it installs packages bit by bit.. @danielbachhuber I saw and tried that already, but unfortunately some hostings have their fixed limits, so there doesn't seem to be any workaround \ud83d\ude15 \nHopefully in the future, composer can become lighter and more resource-friendly, let's see.. @grappler That's a good tip!\nTried that as well back then, with the different versions available, but sometimes the memory error popped up, sometimes not.\nComposer is like the cookie monster, but for memory \ud83d\ude04  . Oh, ok. So it's a feature but not supported?. I see. Well if it ever does become a supported feature, my branch will stay online.\nThanks @danielbachhuber . As far as I can tell, this has been implemented, right?\nExecuting wp @remote --info shows that the remote config file(s) are being used.. @wojsmol The above code blocks are each the ~/.wp-cli/config.yml I've tried.\nMore complete, would be like this, using it for a subsite on a multisite install:\nyaml\n@example-com: {ssh: example, url: example.com, path: public_html, skip-plugins: my-plugin}\n(As mentioned above, I've also tried to move the skip-plugins into the global context). I haven't dug into the code, but assume it's some forgotten snippet when skip-plugins was introduced, as the functionality is there when using CLI.. @danielbachhuber Thanks for your reply and explanation.\nAaah, just noticed now that by having a remote configuration (using @host), the local configuration gets skipped entirely and instead only the remote config(s) get used.\nBy adding the settings to the ~/.wp-cli/config.yml on the remote server, it works as it should.\nIs this intended? To me, the local config should apply too, but maybe my thinking is off a bit or there is a hidden flag for this.\nRegarding inheritance, could you elaborate a bit more or point me in the right direction where I can learn how that works, please?. As far as I can tell, the problem stated in #4708 is fixed and wp-cli works like this now.\nExecuting wp @remote --info shows that the remote config file(s) are being used.\nWhat I'm looking for, is that the local config gets used for remote calls.\ne.g. If I have a handful of different sites and want them all to share the same config, instead of having to set the config files on all the remotes, it would be great to have the configs read from a local config file.\nI've tried with inherit or defining the necessary parameters in each remote alias, but none of that works.\nAm I missing something fundamental?\n@swissspidy As you mentioned above, setting the config directly in the aliases should work, right? Even if it's the \"local\" config file that defines the aliases. (Which is kind of the whole point here...). ",
    "rlaan": "@noplanman thanks for your tip, it brought me onto the right track. \nI did need a slight variation and some further digging =>\nthe composer command I needed was:\ncomposer --working-dir=\"$(wp package path)\" update\nhowever wp-cli (1.5.1) had reverted the composer.json file allready after the failed install...\nSo I manually checked (using cat) the shortly changed composer.json file before it got reverted (but after the package install command), then manually change the file afterwards and it worked :)\n. ",
    "david-treblig": "Are you for real? I'm so used to be ignored with my silly requests on open source projets and 24h hours later it's done? Thanks! \ud83d\udc4d \u2764\ufe0f . ",
    "hason": "@danielbachhuber This PR does not contain hard update to Symfony 3. On PHP 5.3 would be installed symfony 2.7 and on PHP >= 5.5 would be installed Symfony 2.7 or Symfony 3.. @danielbachhuber Yes, https://getcomposer.org/doc/06-config.md#platform. ",
    "harrissAvalon": "If I add my environment variables to the $env_vars array should that be enough for me?. @danielbachhuber Sorry I hit enter by accident before finishing typing. @danielbachhuber I missed the wp-cli.yml step. Thank you for the clarification.. ",
    "chriscct7": "If you haven't already I would reach out to Travis's dev team. I remember when TravisCI didn't have so many boxes a couple years ago and EDD's constant pushing would literally hold up every other travis job from all other organizations for a lot of time [1], and when talking with them they actually were happy we were at their limits because it and worked with us to reduce the time to execute [2]. \nMight be different now they're larger, but @joshk from TravisCI was always really approachable and helped us quite a lot. Not sure who is his equivalent (or maybe he's still the go-to guy for this) there atm.\n[1] \"you have 2k jobs in the queue, with each build taking about 2+ hours to completed due to the 72 job matrix\" - Oops.\n[2] \"but tbh we love you putting Travis through its paces. So please don't worry about trying out fun and crazy things with it.\". ",
    "joshk": "Hello\nWhat's the goss? How can I help?. Huzzah!. ",
    "willemdh": "Restored a backup and did an upgrade from cli with \nsudo wp core update --path='/var/www/outsideit.net/public_html/'\nWhich worked.\nSo I guess this can be closed..?. ",
    "Kladizkov": "This is the step to recreate.\nI have option_value like this\na:24:{s:18:\"notification_email\";a:1:{i:0;s:16:\"example@gmail.com\";}s:12:\"backup_email\";a:1:{i:0;s:16:\"example@gmail.com\";}s:15:\"lockout_message\";s:5:\"error\";s:20:\"user_lockout_message\";s:64:\"You have been locked out due to too many invalid login attempts.\";s:25:\"community_lockout_message\";s:77:\"Your IP address has been flagged as a threat by the iThemes Security network.\";s:9:\"blacklist\";b:1;s:15:\"blacklist_count\";i:3;s:16:\"blacklist_period\";i:7;s:19:\"email_notifications\";b:1;s:14:\"lockout_period\";i:15;s:18:\"lockout_white_list\";a:0:{}s:12:\"log_rotation\";i:14;s:8:\"log_type\";i:0;s:12:\"log_location\";s:68:\"/home/xxxxxxxxx/public_html/wp-content/uploads/ithemes-security/logs\";s:14:\"allow_tracking\";b:0;s:11:\"write_files\";b:0;s:10:\"nginx_file\";s:38:\"/home/xxxxxxxxx/public_html/nginx.conf\";s:24:\"infinitewp_compatibility\";b:0;s:11:\"did_upgrade\";b:0;s:9:\"lock_file\";b:0;s:12:\"digest_email\";b:0;s:14:\"proxy_override\";b:0;s:14:\"hide_admin_bar\";b:0;s:8:\"log_info\";s:40:\"xxxxxxxxx-EVruqkpMtfJbhKHYq8LGqjExCZ6ujc\";}\nThat is a single string with two occurrence of example@gmail.com.\nI'm trying to change the email address example@gmail.com to something@gmail.com. I did\n./wp-cli search-replace example@gmail.com something@gmail.com\nIt changed the first occurrence, but second occurrence remained unchanged. Then I ran the same command again and it changed the other occurrence. So i realize that it doesn't do the search-replace if there is multiple occurrence in a single string ( as if we are not using 'g' ( global ) option in sed ). You can do it in a stock wordpress. ( The video recording https://youtu.be/lu4IRjWZmiA will make it more clear for you )\nLets add a row to wp_options.\nINSERT INTO wp_options (option_id, option_name, option_value, autoload) VALUES (NULL, 'itsec_global', 'a:24:{s:18:\"notification_email\";a:1:{i:0;s:20:\"some.thing@gmail.com\";}s:12:\"backup_email\";a:1:{i:0;s:20:\"some.thing@gmail.com\";}s:15:\"lockout_message\";s:5:\"error\";s:20:\"user_lockout_message\";s:64:\"You have been locked out due to too many invalid login attempts.\";s:25:\"community_lockout_message\";s:77:\"Your IP address has been flagged as a threat by the iThemes Security network.\";s:9:\"blacklist\";b:1;s:15:\"blacklist_count\";i:3;s:16:\"blacklist_period\";i:7;s:19:\"email_notifications\";b:1;s:14:\"lockout_period\";i:15;s:18:\"lockout_white_list\";a:0:{}s:12:\"log_rotation\";i:14;s:8:\"log_type\";i:0;s:12:\"log_location\";s:68:\"/home/xxxxxxxxx/public_html/wp-content/uploads/ithemes-security/logs\";s:14:\"allow_tracking\";b:0;s:11:\"write_files\";b:0;s:10:\"nginx_file\";s:38:\"/home/xxxxxxxxx/public_html/nginx.conf\";s:24:\"infinitewp_compatibility\";b:0;s:11:\"did_upgrade\";b:0;s:9:\"lock_file\";b:0;s:12:\"digest_email\";b:0;s:14:\"proxy_override\";b:0;s:14:\"hide_admin_bar\";b:0;s:8:\"log_info\";s:40:\"xxxxxxxxx-EVruqkpMtfJbhKHYq8LGqjExCZ6ujc\";}', 'no');\nHere I'm going to replace two occurrence of some.thing@gmail.com to example.com\nOnly one occurrence will change at first execution, then I have to run it again in order to change the second occurrence.\nI have a video recording of this issue at https://youtu.be/lu4IRjWZmiA. ",
    "vmasto": "WordPress admin works correctly. It identifies the base and only requires the slug. . ",
    "diamondfish": "I have read that issue and was not able to find a solution.\nI create the wp-config.php file by using this command:\nwp core config --dbname=\"$dbName\" --dbuser=\"$dbUser\" --dbpass=\"$dbPass\" --locale=\"$dbLocale\" --dbcharset=\"$dbCharset\" --dbcollate=\"$dbCollate\"\nThe wp-config file reads like this:\n```\n//  MySQL settings  //\n/* The name of the database for WordPress /\ndefine( 'DB_NAME', 'wp_project3' );\n/* MySQL database username /\ndefine( 'DB_USER', 'root' );\n/* MySQL database password /\ndefine( 'DB_PASSWORD', 'mypassword' );\n/* MySQL hostname /\ndefine( 'DB_HOST', 'localhost' );\n/* Database Charset to use in creating database tables. /\ndefine( 'DB_CHARSET', 'utf8' );\n/* The Database Collate type. Don't change this if in doubt. /\ndefine( 'DB_COLLATE', 'utf8_general_ci' );\n```\nI have tried changing to 127.0.0.1 as host, edit MySQL settings in my.ini, creating another database account etc, but with no effect. And I can run other db commands like this:\nproject3 $ wp db query 'SHOW TABLES' --debug\nDebug (bootstrap): No readable global config found (0.007s)\nDebug (bootstrap): No project config found (0.01s)\nDebug (bootstrap): No package autoload found to load. (0.097s)\nDebug (bootstrap): ABSPATH defined: C:\\www\\project3/ (0.098s)\nDebug (bootstrap): Running command: db query (0.101s)\n+-----------------------+\n| Tables_in_wp_project3 |\n+-----------------------+\n| wp_commentmeta        |\n| wp_comments           |\n| wp_links              |\n| wp_options            |\n| wp_postmeta           |\n| wp_posts              |\n| wp_term_relationships |\n| wp_term_taxonomy      |\n| wp_termmeta           |\n| wp_terms              |\n| wp_usermeta           |\n| wp_users              |\n+-----------------------+\nThe rewrite command with --debug added looks like this:\nproject3 $ wp rewrite structure '/%postname%/' --debug\nDebug (bootstrap): No readable global config found (0.007s)\nDebug (bootstrap): No project config found (0.008s)\nDebug (bootstrap): No package autoload found to load. (0.097s)\nDebug (bootstrap): ABSPATH defined: C:\\www\\project3/ (0.097s)\nDebug (bootstrap): Begin WordPress load (0.098s)\nDebug (bootstrap): wp-config.php path: C:\\www\\project3\\wp-config.php (0.098s)\nDebug (bootstrap): Loaded WordPress (1.277s)\nDebug (bootstrap): Running command: rewrite structure (1.277s)\nPHP Notice:  Undefined variable: key in phar://C:/lib/wp-cli-phar/wp-cli.phar/php/class-wp-cli.php on line 1003\nNotice: Undefined variable: key in phar://C:/lib/wp-cli-phar/wp-cli.phar/php/class-wp-cli.php on line 1003\nDebug (bootstrap): No readable global config found (0.007s)\nDebug (bootstrap): No project config found (0.008s)\nDebug (bootstrap): No package autoload found to load. (0.098s)\nDebug (bootstrap): ABSPATH defined: C:\\www\\project3/ (0.098s)\nDebug (bootstrap): Begin WordPress load (0.099s)\nDebug (bootstrap): wp-config.php path: C:\\www\\project3\\wp-config.php (0.099s)\nError: Error establishing a database connection. This either means that the username and password information in your `wp-config.php` file is incorrect or we can\u00d4\u00c7\u00d6t contact the database server at `localhost`. This could mean your host\u00d4\u00c7\u00d6s database server is down.\nI've also tried correcting the bug (Undefined variable: key in phar) that you fixed in an upcoming release, according to this git issue.. Is there anything I can force to make it work? Or at least test?. If i use wp rewrite structure, which actually changes the option of permalinks in WP even though it gives error afterwards, followed by wp rewrite flush, will I get the same result as if the first command didn't give any error? If you understand what I mean. I'm just worried that some important action after the option is set in WP is missed due to the error.\nwp rewrite flush gives me success message so it should work fine for me to do both, given that nothing is missed like I said.\nThe settings I played around with was (in various combinations):\n```\n[client] \nhost=\"localhost\"\nhost=\"127.0.0.1\"\nprotocol=tcp\nsocket = \"\"\n[mysqld]\nsocket = \"\"\nsocket=MySQL\nenable-named-pipe=1\ndefault-time-zone=SYSTEM\nmax_allowed_packet = 32M\nbind-address=\"127.0.0.1\" \n```. That's nice. So then I can call both functions and getting full functionality even with the error message I assume.\nI use the following added to my System Variable PATH:\nC:\\xampp\\xampp-5.6.24\\php\nC:\\xampp\\xampp-5.6.24\\mysql\\bin\nC:\\xampp\\xampp-5.6.24\\apache\\bin\nC:\\lib\\wp-cli-phar. That sounds interesting! Although, I'm not sure exactly what to change. Can you please provide a little bit more information on this?. I don't know if this helps you, but the only mysql*.exe files I have is within my C:\\xampp\\xampp-5.6.24\\mysql\\bin\\ folder.\nI've narrowed down the error to wp-cli\\php\\commands\\rewrite.php:158 and the following command:\n$process_run = WP_CLI::runcommand( $cmd );\nSo just like you said, it's runcommand that seems to have insufficient information.. ",
    "mkeerth": "@danielbachhuber : I'm getting the same exception \"Error establishing connection\". But i'm running this command \"wp --allow-root rewrite structure\" from inside php:7.2-fpm-alpine3.6 Docker container.\ncan you please help me?\nbash-4.3# wp --info\nOS:     Linux 4.9.60-linuxkit-aufs #1 SMP Mon Nov 6 16:00:12 UTC 2017 x86_64\nShell:\nPHP binary:     /usr/local/bin/php\nPHP version:    7.2.2\nphp.ini used: \nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\nWP_CLI phar path:       /var/www/html\nWP-CLI packages dir:  \nWP-CLI global config:   /root/.wp-cli/config.yml\nWP-CLI project config:\nWP-CLI version: 2.0.0-alpha-1531aed\n. ",
    "webdesignermall": "Getting same issue using MAMP typing in something simple like wp plugin list. I get PHP Warning:  \n\nmysqli_real_connect(): (HY000/2002): No such file or directory in /Applications/MAMP/htdocs/wordpress49/wp-includes/wp-db.php on line 1531\nWarning: mysqli_real_connect(): (HY000/2002): No such file or directory in /Applications/MAMP/htdocs/wordpress49/wp-includes/wp-db.php on line 1531\nError: Error establishing a database connection. This either means that the username and password information in your wp-config.php file is incorrect or we can\u2019t contact the database server at localhost. This could mean your host\u2019s database server is down.\n\nCan someone shed some light?. ",
    "4ernovm": "+1 for this. recently issuing same problem on several WHM servers.. @vietzon in my case it's caused by low memory_limit. make sure you have it in at least 64M or better 128M. If you're using WHM you must have error_log file inside the directory where you're trying to download WP to. It also may help. ",
    "mrme44": "I'm not looking for support with using the wp-cli tool. I'm reporting that the phar file is broken. If this isn't the place to report bugs, where do I report them?. Sorry for not being clear about how I got that output. I'm not executing the phar file. All I'm doing is going to the URL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar in Chrome. Once the phar file is downloaded, I open it up with vi, and I see the message about the compiler halting followed by a bunch of garbage. That is why I say that the phar file is broken. The same thing happens if I download the phar file using curl.. \n. Oh. I didn't know what phar was, and so I opened it, and I saw the message about the compiler having halted, and I figured that was the cause of the problems I've been having with installing wp-cli, but if that's the way it's suppose to be than I guess it's fine. Sorry to have bothered you about this.. ",
    "toolstack": "I discovered the issue as part of GlotPress, we use the global to get the table prefix to define our tables.\nWe extend WP-CLI with several commands that then act on GP, in multi-site the --url parameter is used but has no effect due to the global not being updated.\nWhen WP normally runs, it is updated without any issue and GP support multi-site.  It's only when WP-CLI is used that it fails.\n. FYI, this is the GitHub issue from GlotPress.. You can see $GLOABLS['table_prefix'] being updated as part of the core switch_to_blog() logic in ms-blogs.php, around line 789.. ",
    "mmcev106": "The option documentation has been added, and I went ahead and took a crack at a basic command unit testing solution.  Let me know what you think.. I'm not sure when I'll have time, but I would like to learn Behat and convert these tests soon.  To clarify, you used the term \"integration test\".  Does that suggest you'd like the tests to actually call mysql?. I can commit to making them, but I cannot tell you when.  As you might\nguess, this is a unfortunately a very low priority for me time-wise.\nOn Mon, Jan 9, 2017 at 8:10 AM, Daniel Bachhuber notifications@github.com\nwrote:\n\n@mmcev106 https://github.com/mmcev106 Can you commit to making the\nnecessary changes, or should I wrap this up for you?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/pull/3696#issuecomment-271293234, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACgZDluGVl97Xb9iZkKVCoD7w3TxBSxQks5rQj_jgaJpZM4LXRrc\n.\n. Thanks for picking up the torch!. \n",
    "vfonic": "That's it! Didn't know I can have more parameters to help command. Thanks!. ",
    "metodiew": "Ah, I thought I did submit the pull request, but I looks like I haven't sent it. Here is the PR https://github.com/wp-cli/wp-cli/pull/3722 :)\nLet me know if there is anything else I have to check/update.. ",
    "jonathanbossenger": "Would it make sense to raise separate issues for each package to be split? Thereby allowing different developers to work on different packages.. I'm just spitballing here, but would a combination of --dry-run and --export work here? --dry-export=file or something? That way you could expand the details of the dry run and export that to a file, for the user to review before running search-replace properly.. WP-CLI version:    1.1.0\nIt's probably because the command is being run outside of a WP install, as I keep my 'in-development' plugins in a separate folder and symlink them to a WP install. However as I understand it the dist-archive package can be run independently from a WP install.\n. @schlessera consider me stepping up to take care of this reliably.\nNow, how does one go about that?\nI'm happy to do the research myself, but if anyone already has documentation they could point me to, that would be helpful.\n@tiagohillebrandt would it not be possible for us to tag-team on this, you've already created the build, I could manage the part of submitting it to the Debian repos.\nOpinions, suggestions, experiences in this area, and comments welcome.. What do we think of the concept of using a snap?\nhttps://snapcraft.io/\nWould solve the problem of wanting to be able to install and update wp cli with a single command, without needing to submit and maintain an official Debian package?\nWould also work across multiple Linux platforms.. ",
    "bgeihsgt": "Forgot to mention I'm using wp rewrite structure to update permalink rules. It looks like https://github.com/wp-cli/wp-cli/issues/3640 is the exact issue I'm hitting.\nI think the right solution here is to just pass NULL for the env parameter. That way it will inherit the environment of the parent PHP process. @danielbachhuber what do you think?. I haven't tested it yet, was going off of the docs here: http://php.net/manual/en/function.proc-open.php\nWill test shortly.. What's the easiest way to make a change and test it locally? (sorry, I'm a PHP n00b). For now going with installing it as a project and testing it that way. @danielbachhuber I tested it locally and verified it works. Please see PR #3730 above.. ",
    "jareis": "The main idea behind the request is the same as the difference between the man pages and the -h argument for a *nix terminal application. If you do man wget on a terminal you will get the full manual page for wget, but you can also do wget -h just to get commands help. \nWhen you issue the help command it opens up a manual page, this is helpful if you want more information about a command. But sometimes you just need to take a quick view on the subcommand list and the help command is not very friendly for that.. ps: i notice now that the proposed list subcommand may be in conflict with some commands, like:\n$ wp plugin list\nmaybe add \"-h\" for consistence with terminal commands?\n$ wp plugin -h\n. just ignore only now i have noticed what you said above... i wasn't really easy to perceive a 1st.\n. ",
    "niladam": "Hi @danielbachhuber,\nFirst of all sorry for my ignorance. I forgot to provide you with the details about WP-CLI (even though now i'm seeing they were of no help, i am using 1.0.0);\nSecond of all, the script i'm trying to build is a personal script that tries to automatically generate a backup of the current WordPress dir. The way it works is it does some checks first like the existence of wp-cli, and the fact that WordPress is actually installed.\nRight now, because of this issue -- i'm using a sort of prone to error solution:\nif [ ! -f \"$WPEB_CWD/wp-includes/version.php\" ]; then\n        # nope, not WordPress, let's abort..\n        echo \"This script needs to be executed in the main WordPress folder that you're trying to backup. Aborting...\"\n        exit 1\n    fi\nWhich obviously cannot be relied upon. So, that's why i wanted to use the is installed check. I was thinking the checks are more thorough and i can actually rely upon that... Yeah, i could use use &>/dev/null -- but i thought that the --quiet flag should do it. My bad.\nThat's a really good idea, however for this particular case i've decided to build my own shell script as i couldn't find anything really simple and effective. For now it's just a pretty simple bash script called wpeb that i intend to further maintain.\nThanks for your time.. Of course i'd be interested. But i'm not really sure about my code quality (PSR, tests and so on), so i might not be the best for this. But i'd love to give a helping hand! Anytime!:). ",
    "tedmasterweb": "As is often the case, the problem seems to have vanished with time\u2026 Revslider has an importer and exporter. In the end we just exported the slides and imported them independent of the rest of the database. IINM, this is only a problem (only manifests) when URLs are stored in serialized arrays (meta, mostly). wp-cli actually deserializes these values and does a search and replace in PHP. If you pass the --regex flag, you should be able to construct a pattern that will match these backslashed values.\nFor example, given http://localhost/ should be changed to https://anotherdomain/ and that the input has a raw value of http:\\/\\/localhost\\/ when trying to match via regex, then the pattern should probably be http:\\\\/\\\\/localhost\\\\/ (note the double backslash).\nPlease note, I have not tested this but it should point you in the right direction. Good luck!. --skip-themes was exactly what I was looking for, actually, so for me, problem solved!\nThank you!. ",
    "balbuf": "Let me know if you want any code comments or if anything should be changed/removed from this PR.. Hey @danielbachhuber! Let me see if I can get to that tomorrow.. Hey @danielbachhuber I added functional tests (including one to check that multiple images are imported) and also fixed a variable name (so the tests already paid off...)\nLet me know what you think.. @danielbachhuber that failing test should be fixed now - we shall see!. hmm...seems like unrelated tests failed now due to some connectivity issues with downloads.wordpress.org. Can the tests be run again? Do they need to be?. Not always ;). ",
    "Squybee": "So what should I do? file_get_content() my file and force feed it directly in the value, giving it a --format=json option?. I ended up using update_option in the end, because WP_CLI::runcommand() isn't versatile enough to allow for complex JSON values. I believe it is because it uses Utils\\parse_str_to_argv() to parse its arguments into an array, thus over-analyzing the value. I think it shouldn't do that in case --format=json is passed.. ",
    "Sher-Chowdhury": "Sorry, it is working after all. I was being silly. . Hi Daniel,\nSorry my mistake. I didn't realise that double quotes are used as an escape character in csv files!\nI'll close this ticket. \nThanks for the fast response!\nKind regards,\nSher Chowdhury\n. ",
    "grumpa": "So I will contact Wordpress Czech translation team. Thanks.. ",
    "inderpreet99": "The summary is not sufficient. It raises eyebrows for falsepositives (rare case though). I'm always wary of what it is going to replace before I execute the replace.\nThe idea is coming from in-house BU search-replace script that does diffs using php-diff and outputs them into CSV files. It lacks regex searching. We're in the mode to adopt wp-cli more in the future, hence the feature request.\nI hadn't seen db-ack before. That's pretty cool. I'll add it to my toolbox. db ack's output of found search results is pretty neat. That's what I would expect from search-replace:\n the relevant rows that are about to be changed (like db ack)\n what they will end up being after the replacement\nIf the output is too much to handle, it could be a verbosity option.. ",
    "ShinichiNishikawa": "I get the same warning.\nJapanese WordPress package has a different wp-config-sample.php, which is a translated version of the original one. After overwriting the file to the original one, I don't get the error. \n. ",
    "cpxi-admin": "PHP binary:    /usr/local/Cellar/php55/5.5.36/bin/php\nPHP version:    5.5.36\nphp.ini used:   /usr/local/etc/php/5.5/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 0.24.1. Great! no more error thank you!. ",
    "murtzsarialtun": "Thanks for correction. @szepeviktor \nI used rpmlint on CentOS7. This result in a attached file\n\n@danielbachhuber \nI tried this package with some wp commands using and also I checked installed files list. \nSecondly, yes, I will happy for commiting my spec file to wp-cli.spec repo and I will glad to try to produce new releases when you have.\n. @szepeviktor \nThanks for comment. I used v1.9 and I will fix its errors soon.. I updated my rpm and spec files. I did not fix \nwp-cli.noarch: W: no-documentation\nwp-cli.noarch: W: no-manual-page-for-binary wp\nwp-cli.noarch: E: no-signature\nBecause wp-cli already use help inline\nhttps://github.com/wp-cli/wp-cli/pull/548. Why we have to create a man page? This program already has it in in-line help.. Hi back, I changed RPM package for v1.1.0. I added man pages in the package.\nhttps://github.com/SosyalAlkolik/wp-cli/blob/master/wp-cli-1.1.0-1.el7.centos.noarch.rpm. \nrpmlint -vi wp-cli-1.1.0-1.el7.centos.noarch.rpm command output. Summary was equalized with deb package and URL was fixed.. I think, my files are correct now.\nhttps://github.com/SosyalAlkolik/wp-cli/blob/master/wp-cli-1.1.0-1.el7.centos.noarch.rpm\nhttps://github.com/SosyalAlkolik/wp-cli/blob/master/wp-cli-1.1.0.spec\nCould you check the package and spec file?\nEdit:\nI am creating other versions packages. I'm going to upload those packages and spec files.. Yes, I'm ready to create a new RPM package when it release.. If you open a /rpm/ directory, I can pull a new request to submit rpm file.. @danielbachhuber  Uploads are disabled in this branch.. @szepeviktor Thanks. Hi, do I have to build RPM packages for older versions of wp-cli? Is this okay for only latest version? In addition to el7 rpm, I am going to prepare a package for el6.. Thank you @szepeviktor! Today, I will prepare it for el6.. I cannot prepare for el6 because centos 6 doesn't support php 5.3.29 or higher. What do you want me to do?. I builded RPM package for el6. There are latest rRPM packages in these links.\nhttps://github.com/SosyalAlkolik/builds/blob/gh-pages/rpm/wp-cli-1.1.0-1.el7.centos.noarch.rpm\nhttps://github.com/SosyalAlkolik/builds/blob/gh-pages/rpm/wp-cli-1.1.0-1.el6.noarch.rpm. Hi, I created RPM packages for v1.2.0 and v1.2.1. I added spec files and rpm packages.\nhttps://github.com/SosyalAlkolik/wp-cli-1/tree/master/utils\nhttps://github.com/SosyalAlkolik/builds/tree/gh-pages/rpm. ```\n$ rpmlint -vi Downloads/wp-cli-1.2.0-1.el7.centos.noarch.rpm \nwp-cli.noarch: I: checking\nwp-cli.noarch: W: manpage-not-compressed bz2 /usr/share/man/man1/wp.1.gz\nThis manual page is not compressed with the bz2 compression method (does not\nhave the bz2 extension). If the compression does not happen automatically when\nthe package is rebuilt, make sure that you have the appropriate rpm helper\nand/or config packages for your target distribution installed and try\nrebuilding again; if it still does not happen automatically, you can compress\nthis file in the %install section of the spec file.\nwp-cli.noarch: I: network-checks-disabled http://wp-cli.org/\nChecks requiring network access have not been enabled in configuration, see\nthe NetworkEnabled option.\nError checking signature of Downloads/wp-cli-1.2.0-1.el7.centos.noarch.rpm: env: \u2018rpm\u2019: No such file or directory\nwp-cli.noarch: E: no-dependency-on locales-cli\n1 packages and 0 specfiles checked; 1 errors, 1 warnings.\n\n$ rpmlint -vi Downloads/wp-cli-1.2.1-1.el7.centos.noarch.rpm \nwp-cli.noarch: I: checking\nwp-cli.noarch: W: manpage-not-compressed bz2 /usr/share/man/man1/wp.1.gz\nThis manual page is not compressed with the bz2 compression method (does not\nhave the bz2 extension). If the compression does not happen automatically when\nthe package is rebuilt, make sure that you have the appropriate rpm helper\nand/or config packages for your target distribution installed and try\nrebuilding again; if it still does not happen automatically, you can compress\nthis file in the %install section of the spec file.\nwp-cli.noarch: I: network-checks-disabled http://wp-cli.org/\nChecks requiring network access have not been enabled in configuration, see\nthe NetworkEnabled option.\nError checking signature of Downloads/wp-cli-1.2.1-1.el7.centos.noarch.rpm: env: \u2018rpm\u2019: No such file or directory\nwp-cli.noarch: E: no-dependency-on locales-cli\n1 packages and 0 specfiles checked; 1 errors, 1 warnings.\n. For first warning, I will use bz2 manpage and solve that warning. Secondly, actually, we don't have to sign these packages because they aren't in an RPM repository. The reason for using signatures is to ensure that the correct packages are installed from the correct repositories. If you want, my company tells me, they can give an RPM repository service for you.. This error appears when I run rpmlint on Mint or another deb based distros. When I run on the rpm based distros, the output is (on openSUSE)\nrpmlint --version\nrpmlint version 1.8 Copyright (C) 1999-2007 Frederic Lepied, Mandriva\nrpmlint -vi wp-cli-1.2.0-1.el7.centos.noarch.rpm \nwp-cli.noarch: I: network-checks-disabled http://wp-cli.org/\nChecks requiring network access have not been enabled in configuration, see\nthe NetworkEnabled option.\nwp-cli.noarch: I: checking\n1 packages and 0 specfiles checked; 0 errors, 0 warnings.\n. Latest version of rpmlint is available on Fedora 25.\nhttps://pkgs.org/download/rpmlint\nOutputs with latest version (1.9.9) of rpmlint:\nrpmlint -V\nrpmlint version 1.9 Copyright (C) 1999-2007 Frederic Lepied, Mandriva\n1.2.0\nrpmlint -vi wp-cli-1.2.0-1.el7.centos.noarch.rpm\nwp-cli.noarch: I: checking\nwp-cli.noarch: W: spelling-error %description -l en_US multi -> mulch, mufti\nThe value of this tag appears to be misspelled. Please double-check.\nwp-cli.noarch: I: checking-url http://wp-cli.org/ (timeout 10 seconds)\n1 packages and 0 specfiles checked; 0 errors, 1 warnings.\n1.2.1\nrpmlint -vi wp-cli-1.2.1-1.el7.centos.noarch.rpm\nwp-cli.noarch: I: checking\nwp-cli.noarch: W: spelling-error %description -l en_US multi -> mulch, mufti\nThe value of this tag appears to be misspelled. Please double-check.\nwp-cli.noarch: I: checking-url http://wp-cli.org/ (timeout 10 seconds)\n1 packages and 0 specfiles checked; 0 errors, 1 warnings.\n```\n. Everything is OK?. Do you intend to publish these packages to a repo?. I changed the name of file.. Thanks @behzod I fixed RPM packages.\nhttps://github.com/SosyalAlkolik/builds/tree/gh-pages/rpm. Hi, locales-cli isn't a package. An RPM package which based on this spec file cannot install. We cannot add locales-cli as a require.. You should try to run rpmlint on RPM based systems.. You can choose a distribution which has latest rpmlint version according to this website.\nhttps://pkgs.org/download/rpmlint. Ok, I changed spec file my forked repo. https://github.com/murtzsarialtun/wp-cli/blob/master/utils/wp-cli-rpm.spec. @danielbachhuber Ok, I submitted. Waiting for the checks. ",
    "behzod": "@SosyalAlkolik I found and fixed a minor typo in your spec file. You may want to re-create your rpm files. See this merge request: #4014 . ",
    "anantshri": "I would suggest looking at https://github.com/jordansissel/fpm rpm, deb, osx pkg multiple output options available. I am using it to build deb packages (not wp-cli but others) but rpm and others should not be a problem too:  https://github.com/AndroidTamer/Packaging_Tools/blob/master/bin/build_package#L8. ",
    "viktorbijlenga": "Looks like the issues is related to different collations in the database, so I would guess that it doesn't have anything to do with WP CLI.\n@jisaksson This thread on Stackoverflow might be a good starting point to solve the error.. ",
    "jisaksson": "@danielbachhuber You are correct. It's indeed problem with my database, thanks.\n@viktorbijlenga Yup, my bad.. ",
    "CalebJTSmith": "Any tips on how to deal with this issue in the short term?. ",
    "bobbravo2": "@holisticnetworking @Failcookie  In composer.json, specify the PHPUnit 5.7.x branch. ",
    "cyberscribe": "+1. ",
    "horne3754sg": "Hi, I understand that Github is not the appropriate location to ask for support questions (hence why I didn't ask here first). However I have circled the web looking for answers and when I asked on WordPress StackExchange they sent me back here.\nSince the support link you highlighed above says WordPress StackExchange forums, I feel like im going round in circles. \nIs there a more appropriate channel to get some answers about custom code or at least some examples for themes not in the WP repo and using WP CLIs update commands and I will ask there.\nThank you for your time.. ",
    "arunsathiya": "@horne3754sg Just to note, one can upload the .zip file of the latest theme to the media library of a WordPress site, and use theme install {link} --force to install this version of the theme. I am not very sure of what it would break though.. ",
    "mathieuhays": "Sorry I missed that. Thanks for the answer. ",
    "kcarwilemiller": "Our plugin is a developer utility and is most generally installed from the command line. It's built version contains composer dependencies and other meta files that are not present in the repository, so the packaged version of the plugin is actually built and committed as a file in the repo itself. It can't be installed by using the github auto generated branch archive.\n$ wp plugin install https://github.com/Miller-Media/modern-wordpress/raw/master/builds/modern-framework-stable.zip --activate\nBecause of the renaming logic in the WP CLI, attempting to install from the raw url causes the directory contained in the build to be renamed incorrectly and breaks things in the plugin. We currently have no way to install correctly from the url above using the WP CLI.\nUploading to the releases page is also not an ideal solution because then we will not have a static url which always points to the latest release.\nWe need a way to tell the WP CLI to treat the plugin archive being installed from github like any other archive (and not attempt to smartly rename the plugin slug).\n. The plugin is expected to be installed to a folder called 'modern-framework'. For many reasons including other plugins that depend on it checking if it is installed, internal methods attempting to load resources, etc. So when it is installed, and the WP CLI renames the correct install folder from 'modern-framework' to 'modern-framework-stable', bad things start to happen as a result.. php\n/**\n * Detect plugin. For use in Admin area only.\n */\nif ( is_plugin_active( 'plugin-directory/plugin-file.php' ) ) {\n  //plugin is activated\n}\nThis is a core wp function. It depends on a plugin to be installed at a particular location.. https://codex.wordpress.org/Function_Reference/is_plugin_active. Ok, but obviously it was a concern that plugins were being installed in an unexpected directory, otherwise why would the renaming functionality be added to the WP CLI in the first place?. ",
    "leepeterson": "@danielbachhuber I think perhaps the language should reflect exactly what did not load themes, or perhaps why themes were not loaded.\n\nWarning: Some rewrite rules may be missing because themes weren't loaded.\n\n...might change to...\n\nWarning: Some rewrite rules may be missing because themes weren't loaded by WP-CLI.\n\n...or...\n\nWarning: Some rewrite rules may be missing because skip-themes is set.\n\nIn the case of WordPress living in its own subdirectory, if WP_DEFAULT_THEME is not set, or if register_theme_directory() is not called, a wp-cli user may think a step was missed during setup when \"themes weren't loaded\" is encountered.. Yes, sir. Thank you.. ",
    "tfrommen": "Hey Alain,\nno, I'm afraid I can not.\nFirst, I don't know (and don't have the necessary time to read into) Behat. Second, the actual behavior shouldn't change at all. Only what is passed to MySQL, and thus what exactly is performed - with the same result.\nI'm open to suggestions, but ... nothing in here changes when merging the pull request.. @schlessera if the filename is - then the mysql call does not include any query to execute, but prompts the CLI.. ",
    "sir-gon": "Yes, i'm using the following to run a shell of my docker:\ndocker exec -it www_php_1 /bin/sh -c \"export TERM=xterm; export PAGER='busybox less'; exec sh\"\nWorks, but... is just a workaround.. ",
    "vovimayhem": "For those of you suffering from garbled output when using busybox less as a value for the PAGER env variable, use more instead. Works beautifully!\n(Thanks to @jeffyjefflabs for the tip used in nbgallery/jupyter-docker@e471c470f4bc906c6763cf9a9232386c6c741f9f). ",
    "dws122": "what was the resolution to this error message? \nreceiving the same error message on one of our servers when attempting to update WP-CLI from 1.4.0 to 1.5.0\nall other servers updated properly\n\n. @danielbachhuber worked now. thanks!. ",
    "ivankruchkoff": "Correct :). Put out a PR for the issue: https://github.com/wp-cli/wp-cli/pull/3879. ",
    "Steveorevo": "Submitted pull request https://github.com/wp-cli/wp-cli/pull/3868. Updated server.php to use WP_CLI::get_php_binary() in lieu of PHP_BINARY. This complies with other wp-cli commands (info, update, run command, etc) that leverage get_php_binary.. ",
    "geekoun": "Yes and no. When you make a tutoriel you give your sources.\nYou do not let people without a minimum guide them. And Google does not justify everything!\nWhen you possess a lot of knowledge, I think that it is essential to share at best and to be most possible teacher, it is a responsibility. ;-). ",
    "tmugford": "Wow, that was a quick response!\nThere are checksums published for wp-content/index.php, but I realise there are otherwise very few files under wp-content that will never change as part of the normal upgrade process. As you say, this might be better suited to wp doctor (which is a fantastic addition by the way).\nI think it might be better to go the documentation root on this one. I\u2019ll take a look and submit a PR.\nKeep up the great work.. ",
    "cAstraea": "Noticed can use wp user meta add 123 bio but would still need t know the user id beforehand. Is there a command that merges the 2 commands to do everything in one command ? Was planning to use a wrapper like https://github.com/gtg092x/node-wp-cli in the express app.. ",
    "lilmike": "Hi there,\nJust FYI, it works on my arch linux vps, php 7.1.3. Tested with wp theme install twentyseventeen.\n-Michael.\n. Maybe wp option update a[z] c Though more complex use-cases would probably require more thought. I just had an issue where I needed to update an option that literally was a 500kb option or so, and it was not easy :-).\n-Michael.\n. I don't think so. Basically what I meant is if I wanted to replace all occurrances of \"test\" with \"test2\", but skip any row that had the user column set to 2, for example.\n-Michael.\n. Basically I would want to see any column/value pair in the database, or possibly limited by table, that contains a certain phrase. Does this make any more sense?. ",
    "davidsword": "Thanks for your replies.\n~Anyway I can pinpoint the connection/permission issues with my filesystem?~\n~I followed the instructions to a tee on reinstallation and it didn't work out. I've been trying to resolve this for more hours than I'd like to admit.~\n--skip-plugins made the ERROR's on all update actions AOK. It was from folders in themes/ and plugins/ I soft-deleted by renaming and setting permissions of 700. I had done that around the same time I updated to php7.1, but forgot about it. . Thats a really great tip, thank you so much @davidfavor . ",
    "Robin-Andrews": "Also gives same error on creating new plugin scaffolding:\nwp scaffold plugin new-plugin\nSuccess: Created plugin files.\nError: Invalid plugin slug specified.. That would be great. Like I said, it seems the issue was introduced post v0.25.0. ",
    "FarizF": "Hi guys!\nI have a Wordpress project set up locally using XAMPP. I'm trying to use the scaffold command to add plugin-tests to my plugin using the XAMPP command line on Windows.\nWhen I use wp plugin list, it lists my plugins correctly: \n\nWhen I try running the command wp scaffold plugin-tests tjs-autoradam --ci=circle, it returns Error: Invalid theme slug specified..\nI squinted hard and long enough to be able to confirm that the inserted plugin name in the last command I've executed matches the name in the plugin list. Could this mean that the issue hasn't yet been resolved? Or is it just \"'cause Windows\"?. I see! I'll do that now. Thanks!. ",
    "zahardoc": "Hello, still have this issue on Ubuntu 16.04, php 7.0. Updated to the latest wp-cli version with wp cli update --nightly. Am I missing something?\nwp scaffold plugin-tests test\nError: Invalid plugin slug specified\nwp scaffold theme-tests test\nError: Invalid theme slug specified.\nwp scaffold plugin test\nSuccess: Created plugin files.\nSuccess: Created test files.\n. Tried on the absolutely different environment - Gentoo 2.2 with php 5.4 - result is the same.. My fault - I should create directory first. After creating theme dirrectory files have been created flawlessly. Thanks for your work.. ",
    "romanrev": "We are trying to centralise the user creation across the WP environments and going to maintain a central registry with the user:password details for each of them. We do not want to store the passwords in clear form there as the registry will be open for all users, so we do not want them to be able to use credentials they are not entitled to.. @danielbachhuber: with the dynamic teams of 5 to 15 people working on WP instances running in autoscaling groups on AWS, having to maintain a central server providing SAML authentication seems like an overkill, at least to my taste.\nI wonder how you defined that 80% of WP users don't need the feature, but that's not really relevant to this discussion.\nI'll have a look at the custom commands at the link you provided, thank you.\nBTW: we are not \"syncing\" passwords at all: we keep them in DynamoDB table, and encrypt the records with individual KMS keys at the moment, however that implies that every WP should also have an AWS user account or an access to IAM role with the access to that KMS key to allow them to store/change their password - and that isn't really a convenient solution when we need to provide a temporary access to an external user.. I had a look at the wpmu_create_user function source and realised that the issue is not with the WP-CLI but the Wordpress PHP code itself. There is just no provision for supplying an encrypted password whatsoever.\nIronically it will be easier to implement using any other scripting language (say Python or even plain Bash) and plain SQL - in accordance with the guidelines on Resetting your password. \nSeems like a blast-from-the-past bad design decision on behalf of the WP devs.. I think you conjecture too much @danielbachhuber, I have not had an intention to express any sort of disrespect. All of us make decisions: good and bad, myself included.. ",
    "jalavoy": "By the way, I'm not sure if you wanted this to just be attached to #3800 but I wanted to start fresh. Apologies if that's not convenient. . It's your project bro, I just laid out an example. Whenever/whatever you decide is fine. . Mock creates a chrooted environment to build the RPM based on the config file you give it. It doesn't care what it's host is. While you certainly can use docker I don't see any reason you'd need to. . ",
    "nerrad": "I'm willing to work on this as a pull request - might be able to get something by the end of this week.. What specific coverage are you looking for?  I see there is current coverage of the doc parser and the synopsis parser.  Are you wanting to have some test coverage on WP_CLI::run_command handling of that third argument array?  Are you okay with more integration type tests for that or should I break out the third argument parsing there into smaller methods that can be more traditionally unit tested using PHPUnit?. Not yet.  I was fully intending on doing stuff that week but then I got swamped again with other jobs.  I do still want to contribute to this but understand if either someone else picks it up or it gets closed because you decide you don't want it in the project. . ya that should do fine.  Sorry for not picking this up :(. ",
    "leonixyz": "@danielbachhuber I see the same result as without --post_status=any:\n~~~\n+----+------------+-----------+-----------+-------------+\n| ID | post_title | post_name | post_date | post_status |\n+----+------------+-----------+-----------+-------------+\n+----+------------+-----------+-----------+-------------+\n~~~. So, regarding the original topic:\nwhy does wp --path=$(pwd) post list --post_type=this_post_type_doesnt_exist\nalways return something, instead of raising an error?\nThis seems to be related to wp-cli and has nothing to do with the plugin. ",
    "loyukfai": "Would you consider adding this as a feature in future releases?\nCheers.. How about a command within WP-CLI to clean up the cache folder?\nCheers.. Like, being convenient to some unknown number of end users (could be just one) who may possibly appreciate not having to set up a cron job or environment variable (which doesn't work for me because /tmp is still counted towards the usage) or make his/her own bash script to clean up the cache files left behind by WP-CLI...\nBut anyway, you've made your point, and it's valid and sound.\nCheers.. ",
    "aerogus": "Kind of. But it's more linked to the parsing of root index.php that the wp-config.php one ?\nNevertheless I read #1631 with attention \ud83d\udc4d . All I know is changing \"require_once\" by \"require\" solved (or seem to) the parsing error.\nMy only diff (in /index.php) :\n```\n< require_once dirname(FILE) . '/wp/wp-blog-header.php';\n\n\nrequire dirname(FILE) . '/wp/wp-blog-header.php';\n```\ndon't know if it helps .... \n",
    "LC43": "There's more details about @danielbachhuber's suggestion here: \nhttps://danielbachhuber.com/tip/wp-ssh-custom-path/. ",
    "aelsharawi": "I think it is PHP 7 incompatibility.. no errors shown from wp-cli step\nI couldn't use wp-cli.phar, not working\nI used this\n/usr/bin/wp db export $BACKUPPATH/$s/$DATEFORM-$s.sql --allow-root\nand still have the same results.\nthis is my log for the cron\nI used echo to know the steps running\nbackup domain.com: /home/nginx/domain.com/public\n^[[0;34m check remote backup folder exists on gdrive\n^[[0;31m deleting old backup\n craeting local backup folder\n getting the full wordpress path\nbackup wordpress folder\n starting the wp-cli sql export\n get google drive folder list\n create google drive folder if not present\n upload to google drive wordpress folder\nUploading /tmp/backups/domain.com/2017-04-23-domain.com.tar.gz. ",
    "BhargavBhandari90": "@danielbachhuber \nCan you look into this: https://github.com/BhargavBhandari90/wp-cli/commit/0f857c4c7b04a486ec864e2ed6d65c8369e05b91#diff-d5c3b8c65ee5ccc5dd15286817c05a2cR1165\nI tried something for this. Need some info from you.. Requested it.\nhttps://github.com/wp-cli/wp-cli/pull/4022. Hi @danielbachhuber,\nSorry for the delay. Actually I didn't get any success about this. For now. I have just added a detailed notice.\nAnd I am not aware of the functional test.. @danielbachhuber I just updated a functional test, but it is failing in travis. I don't understand why?. seems compressed file is not proper.. Hey @gitlost. I just saw your feedback now. I added test without checking your feedback. I'll make changes according to that.\n  . @gitlost if we are checking default prefix, then wp_xx_posts will be there in output.\nAnd in this case, it should display using wp list tables. But it's not displaying. I am little confused here.\n  . @gitlost I got your point.\nBut in the current solution, it's not showing proper output while we add wildcard.\nLet's say we have added a new table named wp_xx_posts.\nSo if we do wp db tables, it won't show the newly created table as it is not registered to $wpdb.\nBut if we do wp db tables \"*_posts\", then it's showing in output.\nSo this solution needs to improve.. All right @gitlost Will try by this weekend. Thank you.. @gitlost Made some changes. Please check.. Currently I found the only scenario for this.. How can I define an invalid value for that?. ",
    "1naveengiri": "https://github.com/wp-cli/language-command/pull/4. @danielbachhuber  @schlessera @johnbillion \nI think wp core language uninstall should also have support to uninstall multiple languages at once. \n. Yes, :). should I create an issue for it or just send PR?\n. @danielbachhuber https://github.com/wp-cli/language-command/pull/5 . ",
    "wonderyann": "Yes it fixed the cited bug.\nBut so many plugin use unexplicit globals that it will be hard to make wp-cli to work :\\\nThank you very much @danielbachhuber \n. Per - fect another thouthand thanks!!. ",
    "KwadroNaut": "\nHave you seen the --due-now flag?\n\nThe --due-now flag is treated like a regular argument, not a flag, and executes all cron events that are due now, see #4020 \n\nI think implementing this specific feature might be better suited for a bash script, so you can ignore the return code if you want. I'm not sure why WP-CLI needs to include an option controlling the return code.\n\nWP-CLI doesn't need an option to control the return code, it should give a correct return code. Compare with an empty unix cron file: you won't get a warning or an error, there's nothing to execute. The absence of a cron job must not give an error message. An argument can be made for using a suppressible warning (--quiet).. > But, in the example you provided, you included a cron job that didn't exist?\nPoint is: sometimes there's an article to be published -in the near or far future- sometimes not. And this changes irregularly. When it exists, there's nothing to be done most of the time, since publishing at a specific time happens only once for each article.\n\nIf a unix cron file has a path to a non-existent executable, it will error when it tries to execute it.\n\nIt's a WP core job, it might be apples and oranges, but wp-cron is always there, that job isn't always there, the function exists though.\nAt the moment, I'll dump all errors to /dev/null, unless you've got a better idea.. Seems you're right about get_user_meta() not actually checking the data it has, thus not emitting any warnings nor errors. However, the --format stuff, seems to be from wp-cli? I expected a notice, warning or error when such serialized entries are obviously incorrect and I try to show them in a (re-)formatted way. Is the is_serialized() from wp doing any meaningful checks?\nThe most basic checks for WP-CLI, could be: check if it's a string, check the length. I think that 98% of the broken data would be noticed that way. . I get your point, and I'll revert to sanitizing/dealing with the content and strings with tools that are designed for parsing the data wp-cli agnostically spits out.. ",
    "cagross": "\n\nCan you verify my-db-user has permission to create new databases?\n\n\nI can try, but I'd need some assistance doing that.  I've tried a couple\nthings to determine privileges, but with no luck:\nI tried opening phpmyadmin, and as I understand, there should be a 'Users'\noption, but there is none.  But now, after some cursory research, I see\nthat perhaps this feature was removed for cpanel users of phpmyadmin.\nI tried opening cpanel-->MySQL Databases, but that just seems to list the\nusers, their names, and allow me to add, remove, or change password.  I can\nalso add users to databases here.  But I don't see an option to check user\nprivileges.\nI have SSH access to my server, although to date I have not used it to\nconnect to MySQL.  Perhaps I should try, then use SHOW GRANTS\nhttps://dev.mysql.com/doc/refman/5.7/en/show-grants.html?\nFYI my web hosting is done by Go Daddy, and I'm on a shared server.\nOn Wed, May 10, 2017 at 12:24 AM, Daniel Bachhuber <notifications@github.com\n\nwrote:\nCan you verify my-db-user has permission to create new databases?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/wp-cli/wp-cli/issues/4056#issuecomment-300240022, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AJsc8LqwtbtOBqZ3thGFz9iQb4bXOecUks5r4KFngaJpZM4NVn4o\n.\n. \n",
    "Potherca": "FYI: The related merge-request(s) in dealerdirect/phpcodesniffer-composer-installer have just been released as v0.4.3.. FYI: The related merge-request(s) in dealerdirect/phpcodesniffer-composer-installer have just been released as v0.4.3.. ",
    "jrfnl": "\nThere's no easy way that I know of (ping @jrfnl) to limit exclusions to just one group of files.\n\nPHPCS 3.x contains a gitmodified filter which may be useful here to limit the report to only those files which were modified. I haven't played with it yet, but I suspect this filter may only work in a pre-commit state, so not sure whether it would actually be useful here.\nLooking at the discussion here, I would like to offer an alternative approach to the PR(s) for consideration:\nHave only one PR, but have a series of commits in that PR each addressing a different thing. The final commit should then be a passing build, but having the individual commits in the PR will make it easier to review the PR.\nThe commits could either be the way @GaryJones has set things up already:\n- removing all the exclusions\n- addressing parts of the codebase in separate commits folder by folder\nAn alternative would be to:\n- remove one exclusion, run phpcbf over all code, review & commit\n- remove the next exclusion... etc\nThe first approach make reviewing commits easier as you see the final result for each file.\nThe second approach makes reviewing commits easier in that the reviewer only has to focus on one particular type of change for each commit.\n\nAnyway I got phpcbf (2.9.1) working locally and noticed that (without changing the current phpcs.xml.dist, which passes phpcs) running phpcbf applied PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket and PEAR.Functions.FunctionCallSignature.CloseBracketLine which messed up the source. After adding these to the exclusion list phpcbf ran without changing anything.\n\nThere is a reason for those two being enabled for the fixer while being disabled for the sniffer, see https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/968 and https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/pull/1020\nAs a side-note, I would say that the PEAR sniff used for this may need to be replaced by a more WP specific sniff, but that's going to be quite a lot of work, so might still take a while before that change is made in WPCS.\nSide-note for @gitlost: I would strongly suggest using PHPCS master or at least 3.0.2 for big codebase fixing projects at the moment, as the WP Core CS project has led to improvement upstream which will be in the 3.x branch, but mostly won't be in the 2.x branch of PHPCS.\nAnyway, hope this input helps.. @danielbachhuber If you like, you can simplify that block to exclude the complete sniffs as you're now excluding (nearly all) the individual error messages.\nThe difference is that if WPCS would add new errors to one of these existing sniff, you would with the above block still get the new errors, while with the below block, you wouldn't see them. Up to you what you prefer.\nxml\n<rule ref=\"WordPress-Core\">\n    <exclude name=\"WordPress.Files.FileName\" />\n    <exclude name=\"WordPress.NamingConventions.ValidFunctionName\" />\n    <exclude name=\"WordPress.NamingConventions.ValidVariableName\" />\n</rule>\n. @danielbachhuber I'm working on other things atm, so will happily leave it for someone else to pick up.. For whomever will be working on sorting out the ruleset - you may find the WPCS custom properties wiki page useful as well.. @Rarst I'm aware, but I don't think those kind of measures should need to be taken to install a tool like wp-cli.. @schlessera  While post-increment may be more common (largely due to people learning the wrong thing from for() statement example code), pre-increment is preferred from a best practices perspective as it complies better with the principle of least astonishment.. @schlessera I've adjusted the PR to post-increment, though I personally still think pre-increment would be better, but that can be addressed if and when WPCS would add a sniff about it.. > Does this actually break any of the sniffs?\nYes, the \"assignment in condition\" sniff will be triggered here as the function call is within an if statement.\nAdditionally, a second sniff is triggered which complains about the assignment not being at the start of the line/statement.\n\nincreases the readability of the code as compared to nondescript scalar values as arguments\n\nIf that's the goal, a pattern like this would have the same effect and would make the code comply with the CS checks:\nphp\n$fallback = false;\nif ( $this->state->getValue( BootstrapState::IS_PROTECTED_COMMAND, $fallback ) ) {\n. ",
    "mimecine": "...and this explains why I couldn't skim my way to where it would be implemented. It's in a different repo:) Thanks!. ",
    "EricBusch": "OK, thanks. No problem. I found the --debug flag shortly after posting this ticket and that led me to the issue which I believe is with the SSL plugin. I will contact them.\nCheers!. Thanks Daniel! Issue resolved. :) . ",
    "r-nicol": "The param sent to defined() needs to be quoted, thus it should be:\nif (defined('WP_CLI') && WP_CLI) {\n     $_SERVER['HTTP_HOST'] = 'host.local';\n}.\n",
    "David-Else": "USER ERROR!! I did not notice the install script used:\ncurrentdirectory=${PWD##*/}\nwp core install --url=\"http://localhost/$currentdirectory\"\nThis was the problem, arrgghh!!. ",
    "robrecord": "How do we get around the problem highlighted by @gregharvey ?\n``\nError: This does not seem to be a WordPress install.\nPass --path=path/to/wordpressor runwp core download`.\n````. Yes it does, but it seemed that @danielbachhuber was suggesting it wasn't wise (and hence wouldn't change the docs) because the .profile wouldn't be loaded - although I can't see how this affects me.\n(Currently finding the whole situation a bit inelegant, wondering how to simplify.). ",
    "madebyaris": "hi @gitlost , when I tried to run that command, it's working great and I can unzip it via command,\nyeah maybe there some issue with mine :/ . ",
    "strarsis": "For a demo a WordPress container is started - the official one installs itself after container startup.\nBefore the setup.sh script can begin setting up the WordPress installation, it has to wait until WordPress (and database) became ready, see in this script: https://github.com/strarsis/twentyseventeen-onepage/blob/master/live-demo/setup.sh#L9. wp db check is sufficient for me because it checks for core files in place and for database ready.. ",
    "gulaholic": "Hi,\nI think I found the issue. It was caused by a plugin, caching plugin to be exact.\nThe question is, how can a plugin interferes WP CLI function.\nI thought WP CLI is a standalone software or does it use Wordpress core function to check updates?\nThank you Daniel,. ",
    "philipnewcomer": "@schlessera it works for me as well when I use the require command like you did. However, it's broken when the command is included as an mu-plugin, with wp-cli-test.php placed in the mu-plugins directory and not loaded through the require command.. ",
    "kalinichenko88": "I have this issue too. I use own project structure looks like Bedrock (https://github.com/roots/bedrock)/. @danielbachhuber fix #4126 solves the issue. Thanks!. ",
    "romaingugert": "Hello,\nUsing the \"files\" property from composer, is it really a good solution ?\nEven if the bootstraping file to add the command to WPCli does nothing, PHP still executes the file.\nUsing your own autoloader when WPCli is initializing would not be better ?\nFor example, if you using composer as a dependency, it is possible to do an autoloader like this:\n```\n<?php\nuse Composer\\DependencyResolver\\Pool;\nuse Composer\\Factory;\nrequire_once DIR .'/vendor/autoload.php';\n// initialize composer\n$composer = Factory::create(new Composer\\IO\\NullIO());\n$repo = $composer->getRepositoryManager()->getLocalRepository();\nforeach ($repo->getPackages() as $package) {\n    if ($package->getType() === 'wp-cli-package') {\n        // If extra key\n        $extra = $package->getExtra();\n        $file = isset($extra['register_command_file']) ? $extra['register_command_file'] : 'register_command.php';\n        $filePath = $composer->getInstallationManager()->getInstallPath($package) . '/' .$file;\n        if (file_exists($filePath)) {\n            include $filePath;\n        }\n    }\n}\n```\nAdditionally, using the WP Cli commands as a suggestion rather than as a direct dependency on the project would allow developpers to select only the commands they need and thus lighten the WP Cli load.\nLike consolidation/robo, it is possible to build the phar with the suggestion set.. ",
    "VaLeXaR": "@schlessera Thanks.\nIn global composer.json not working. I added to project's composer.json.. ",
    "monolux": "I am referencing this issue https://github.com/wp-cli/wp-cli/issues/4145 since that is a direct outcome of the wp-cli installation via Composer. If it is not possible to get the WP-CLI packages dir automatically set up during installation with Composer I would like to know if it is possible to set the WP-CLI packages dir manually. Hence I created the second issue.. Unfortunately Compose does not set the wp-cli environment variable automatically. This is not possible or won't be done with the installation of wp-cli through Composer.\nHowever i can be done manually like so.\nDue to help from @schlessera and @danielhuesken on the #cli WordPress Slack channel I found out what I had to do.\nInstead of setting a PATH value in the Windows environment variables I had to make a new variable called WP_CLI_PACKAGES_DIR and set the value of that variable to C:\\Users\\YOUR_WINDOWS_YOURSERNAME_HERE\\.wp-cli\\packages.\nI also had to create the folder packages under C:\\Users\\YOUR_WINDOWS_YOURSERNAME_HERE\\.wp-cli\\.  The folder was not created automatically.\nAfter that though Composer was complaining that PHP does not have enough memory and so I permanently increased the memory from 128M to 512M in the php.ini file.\nNow I could install the wp-cli package just fine, ran it and it also worked perfectly.\nReference links:\nhttps://superuser.com/questions/949560/how-do-i-set-system-environment-variables-in-windows-10\nhttps://make.wordpress.org/cli/handbook/common-issues/#php-fatal-error-allowed-memory-size-of-999999-bytes-exhausted-tried-to-allocate-99-bytes. @danielbachhuber Yes, in that issue I ask how to get the WP-CLI packages dir set up automatically using the installation guide via Composer. If however that is not possible I would like to know if I could somehow set the WP-CLI packages dir manually, hence this second issue. If you think these two issues are the same feel free to close. I fear that if setting the WP-ClI packages dir is not possible via Composer install I won't have any positive outcome on this, though I don't know, hence these two issues, perhaps I am being too careful.\nUpdate: oh gosh, now I see you pointed to the wordpress forum support, not the github issues. Basically I just followed what I found here http://wp-cli.org/#support and asked on two separate sites. Hope you don't mind? If I find a solution you can be sure I will answer my own questions so that people that have the same issue find the solution as well.. Due to help from @schlessera and @danielhuesken on the #cli WordPress Slack channel I found out what I had to do.\nInstead of setting a PATH value in the Windows environment variables I had to make a new variable called WP_CLI_PACKAGES_DIR and set the value of that variable to C:\\Users\\YOUR_WINDOWS_YOURSERNAME_HERE\\.wp-cli\\packages.\nI also had to create the folder packages under C:\\Users\\YOUR_WINDOWS_YOURSERNAME_HERE\\.wp-cli\\.  The folder was not created automatically.\nAfter that though Composer was complaining that PHP does not have enough memory and so I permanently increased the memory from 128M to 512M in the php.ini file.\nNow I could install the wp-cli package just fine, ran it and it also worked perfectly.\nReference links:\nhttps://superuser.com/questions/949560/how-do-i-set-system-environment-variables-in-windows-10\nhttps://make.wordpress.org/cli/handbook/common-issues/#php-fatal-error-allowed-memory-size-of-999999-bytes-exhausted-tried-to-allocate-99-bytes. ",
    "dmblack": "@danielbachhuber \nTo clarify; does this mean the permissions of files are those as within the archives downloaded from WordPress directly? And that the permissions of the themes inside the core archive then differ from the permissions of the theme archive?. @danielbachhuber \nThanks for your time so far. Can you point me in the right direction in wp-cli source for;\n\nhow commands are executed against php-cli\nwhere wp core download execution begins\n\nI'm not trying to be lazy, as I have genuinely spent the last hour trying to understand the code base. Unfortunately; I'm not a daily PHP developer - and the abstraction is real! And I certainly don't expect you to do my homework.\nExplanation / Reason:\nI've compared the files downloaded by wp-cli to those downloaded directly from WordPress The md5sums match (Not that this would impact file permissions), as built into wp-cli. However; the result permissions of manual extraction, and wp-cli core download output differ.\nSo something related only to the core download function is resulting in different permissions than desired, likely to the way wp-cli uses php to execute functions - relative to system or user environment configuration.. @schlessera & @danielbachhuber \nThank you for your responses, and time so far!\nSpeaking with the core team at WordPress, they were also suggesting this cause. Specifically; they suggested it may be the umask in execution of wp-cli. It's unusual result; the permissions in the core install theme child directories are actually less restrictive than the desired, and that of the actual base archive.\nThis is why I am confused; as the wp core download method is obviously not yet able to call a WordPress API call, right? And when it can call, for the wp theme install function - the permissions are as desired.\nI should perhaps have been clearer in my original ticket; the tasks I'm working on at the moment are CI and TD development orientated. This is probably the only reason I picked up the change, as the permissions in these directories did not meet my test criteria.\nThe web service (Apache2) is configured to use php7.1-fcgi (php7.1.5 - run as user).\nI also have php7.1-cli installed, I assume this is what wp-cli is using.\nI think I've identified where the 'consideration' may be.\nJust can't work out now how to rebuild the bin/wp* files.. ",
    "Rahe": "Hello,\nYes unfortunately I haven't found a solution for the unit test, the opcache.cli_enable can only be changed on the php.ini file or in the httpd.conf file. So it's not possible to do it.\nI have tried to make the Namespace WP_CLI before rewriting the function get_cfg_var but in the end, the Runner.php does not found the WP_CLI  class itself.\nSo I have included the php/class-wp-cli.php file at the beginning of the file but not working either unfortunately.. ",
    "Demayl": "@gitlost opcache.save_comments=0. ",
    "chetansatasiya": "I have added my PR to allow the numbers into the subcommand Sanitizing.\n@danielbachhuber & @schlessera Please let me know if any changes in my PR. ",
    "wonderWomantotheResue": "sorry..send button was clicked before completing entry. Here's the rest of the row from the sitemeta tables\nmeta_value  column:\nO:8:\"stdClass\":5:{s:12:\"last_checked\";i:1498008801;s:7:\"checked\";a:120:{s:40:\"add-to-facebook-plugin/addtofacebook.php\";s:5:\"1.4.3\";s:53:\"add-users-sidebar-widget/add-users-sidebar-widget.php\";s:5:\"1.0.3\";s:37:\"advanced-excerpt/advanced-excerpt.php\";s:5:\"4.2.3\";s:45:\"advanced-menu-widget/advanced-menu-widget.php\";s:5:\"0.4.1\";s:19:\"akismet/akismet.php\";s:5:\"3.3.2\";s:33:\"author-avatars/author-avatars.php\";s:4:\"1.11\";s:19:\"authors/authors.php\";s:5:\"2.4.5\";s:43:\"auto-post-thumbnail/auto-post-thumbnail.php\";s:5:\"3.4.1\";s:19:\"bbpress/bbpress.php\";s:6:\"2.5.12\";s:29:\"bruteprotect/bruteprotect.php\";s:3:\"2.5\";s:28:\"category-posts/cat-posts.php\";s:5:\"4.7.2\";s:49:\"cimy-user-extra-fields/cimy_user_extra_fields.php\";s:5:\"2.7.2\";s:36:\"contact-form-7/wp-contact-form-7.php\";s:3:\"4.8\";s:27:\"coursepress/coursepress.php\";s:7:\"1.2.6.5\";s:25:\"dead-blogs/dead_blogs.php\";s:5:\"1.0.5\";s:37:\"disable-comments/disable-comments.php\";s:3:\"1.6\";s:37:\"download-manager/download-manager.php\";s:6:\"2.9.52\";s:57:\"dynamic-content-gallery-plugin/dynamic-gallery-plugin.php\";s:5:\"3.3.6\";s:49:\"elegant-themes-updater/elegant-themes-updater.php\";s:3:\"1.1\";s:27:\"email-users/email-users.php\";s:5:\"4.8.6\";s:45:\"enable-media-replace/enable-media-replace.php\";s:5:\"3.0.6\";s:33:\"events-manager/events-manager.php\";s:5:\"5.7.3\";s:44:\"featured-content-gallery/content-gallery.php\";s:5:\"3.2.0\";s:44:\"wp-file-permission-check/file-perm-check.php\";s:5:\"1.0.4\";s:41:\"flash-video-player/flash-video-player.php\";s:5:\"5.0.4\";s:24:\"flickr-rss/flickrrss.php\";s:5:\"5.3.1\";s:59:\"force-regenerate-thumbnails/force-regenerate-thumbnails.php\";s:5:\"2.0.6\";s:25:\"form-maker/form-maker.php\";s:6:\"1.11.6\";s:27:\"fusion-core/fusion-core.php\";s:5:\"1.6.1\";s:49:\"gd-bbpress-attachments/gd-bbpress-attachments.php\";s:3:\"2.4\";s:31:\"get-the-image/get-the-image.php\";s:5:\"1.0.1\";s:49:\"google-analytics-async/google-analytics-async.php\";s:5:\"3.1.2\";s:36:\"google-document-embedder/gviewer.php\";s:5:\"2.6.2\";s:17:\"wpgform/index.php\";s:4:\"0.91\";s:29:\"gravityforms/gravityforms.php\";s:8:\"2.0.7.12\";s:9:\"hello.php\";s:3:\"1.6\";s:17:\"iframe/iframe.php\";s:3:\"4.3\";s:19:\"jetpack/jetpack.php\";s:3:\"5.0\";s:53:\"jj-nextgen-jquery-carousel/jj-ngg-jquery-carousel.php\";s:5:\"1.1.8\";s:38:\"jquery-hover-footnotes/jqFootnotes.php\";s:3:\"1.4\";s:27:\"LayerSlider/layerslider.php\";s:5:\"5.3.2\";s:35:\"light-shortcode/light-shortcode.php\";s:3:\"1.0\";s:45:\"limit-login-attempts/limit-login-attempts.php\";s:5:\"1.7.1\";s:43:\"list-category-posts/list-category-posts.php\";s:4:\"0.72\";s:45:\"list-pages-shortcode/list-pages-shortcode.php\";s:5:\"1.7.4\";s:25:\"login-logo/login-logo.php\";s:3:\"0.7\";s:37:\"mailchimp-for-wp/mailchimp-for-wp.php\";s:5:\"4.1.4\";s:47:\"mappress-google-maps-for-wordpress/mappress.php\";s:6:\"2.44.3\";s:33:\"media-library-assistant/index.php\";s:4:\"2.54\";s:25:\"media-tags/media_tags.php\";s:7:\"3.2.0.2\";s:30:\"mendeleyplugin/wp-mendeley.php\";s:6:\"1.1.17\";s:27:\"mobilepress/mobilepress.php\";s:5:\"1.2.2\";s:43:\"wordpress-mu-theme-stats/ra-theme-stats.php\";s:5:\"2.8.3\";s:45:\"my-twitter-timelines/my_twitter_timelines.php\";s:3:\"1.0\";s:49:\"network-plugin-auditor/network-plugin-auditor.php\";s:6:\"1.10.1\";s:31:\"blogtemplates/blogtemplates.php\";s:5:\"2.6.1\";s:43:\"next-active-directory-integration/index.php\";s:6:\"2.0.14\";s:61:\"nextgen-flex-slider-template/nextgen-flex-slider-template.php\";s:3:\"1.7\";s:29:\"nextgen-gallery/nggallery.php\";s:6:\"2.2.10\";s:31:\"openbook-book-data/openbook.php\";s:5:\"3.5.1\";s:23:\"orangebox/orangebox.php\";s:5:\"3.0.0\";s:27:\"p3-profiler/p3-profiler.php\";s:7:\"1.5.3.9\";s:49:\"plugin-vulnerabilities/plugin-vulnerabilities.php\";s:6:\"2.0.46\";s:21:\"podpress/podpress.php\";s:9:\"8.8.10.17\";s:33:\"prezi-embedder/prezi-embedder.php\";s:3:\"2.1\";s:41:\"publish-to-facebook/publishtofacebook.php\";s:3:\"1.0\";s:19:\"q-and-a/q-and-a.php\";s:7:\"1.0.6.2\";s:60:\"quick-pagepost-redirect-plugin/page_post_redirect_plugin.php\";s:5:\"5.1.8\";s:47:\"really-simple-captcha/really-simple-captcha.php\";s:3:\"2.0\";s:47:\"regenerate-thumbnails/regenerate-thumbnails.php\";s:5:\"2.2.6\";s:27:\"wpmu-no-nag/wpmu-no-nag.php\";s:5:\"1.3.0\";s:57:\"restrict-multisite-plugins/restrict-multisite-plugins.php\";s:5:\"1.1.3\";s:68:\"restrict-password-changes-multisite/tr_restrict_password_changes.php\";s:3:\"0.1\";s:23:\"revslider/revslider.php\";s:5:\"4.6.5\";s:27:\"role-scoper/role-scoper.php\";s:5:\"1.4.4\";s:28:\"rv-embed-pdf/rv_embedpdf.php\";s:3:\"1.1\";s:29:\"shadowbox-js/shadowbox-js.php\";s:10:\"3.0.3.10.2\";s:37:\"shadowbox-js/shadowbox-title-push.php\";s:10:\"3.0.3.10.2\";s:21:\"sharebar/sharebar.php\";s:5:\"1.4.1\";s:24:\"share-this/sharethis.php\";s:3:\"7.8\";s:31:\"sidebar-login/sidebar-login.php\";s:5:\"2.7.3\";s:35:\"signup-password/signup_password.php\";s:5:\"1.0.5\";s:49:\"google-calendar-events/google-calendar-events.php\";s:5:\"3.1.9\";s:39:\"simple-custom-css/simple-custom-css.php\";s:3:\"3.3\";s:31:\"simple-facebook-connect/sfc.php\";s:3:\"1.5\";s:43:\"simple-image-widget/simple-image-widget.php\";s:5:\"4.4.1\";s:43:\"simple-import-users/simple-import-users.php\";s:3:\"1.1\";s:43:\"simple-ldap-login_old/Simple-LDAP-Login.php\";s:5:\"1.6.0\";s:45:\"simple-local-avatars/simple-local-avatars.php\";s:3:\"2.0\";s:42:\"slick-contact-forms/dcwp_slick_contact.php\";s:5:\"1.3.7\";s:30:\"smart-youtube/smartyoutube.php\";s:3:\"4.3\";s:45:\"soundcloud-shortcode/soundcloud-shortcode.php\";s:5:\"3.0.2\";s:17:\"styles/styles.php\";s:3:\"1.2\";s:47:\"subscribe-to-comments/subscribe-to-comments.php\";s:3:\"2.3\";s:43:\"the-events-calendar/the-events-calendar.php\";s:5:\"4.5.5\";s:37:\"tinymce-advanced/tinymce-advanced.php\";s:5:\"4.6.3\";s:51:\"twitter-hash-tag-widget/twitter-hash-tag-widget.php\";s:3:\"1.1\";s:27:\"unconfirmed/unconfirmed.php\";s:5:\"1.3.1\";s:33:\"user-switching/user-switching.php\";s:5:\"1.0.9\";s:46:\"ustream-for-wordpress/utream-for-wordpress.php\";s:5:\"2.3.1\";s:43:\"vimeo-simplegallery/vimeo_simplegallery.php\";s:3:\"0.2\";s:49:\"vipers-video-quicktags/vipers-video-quicktags.php\";s:5:\"6.6.0\";s:23:\"wordfence/wordfence.php\";s:6:\"6.3.11\";s:35:\"wordpresscom-popular-posts/wppp.php\";s:5:\"2.6.0\";s:57:\"wordpress-amazon-associate/wordpress_amazon_associate.php\";s:5:\"2.0.0\";s:41:\"wordpress-importer/wordpress-importer.php\";s:5:\"0.6.3\";s:27:\"wp-optimize/wp-optimize.php\";s:5:\"2.1.1\";s:27:\"wp-pagenavi/wp-pagenavi.php\";s:4:\"2.91\";s:27:\"wp-showhide/wp-showhide.php\";s:4:\"1.04\";s:39:\"wp-table-reloaded/wp-table-reloaded.php\";s:5:\"1.9.4\";s:27:\"wp-bandcamp/wp-bandcamp.php\";s:5:\"1.1.1\";s:37:\"wpcommentcleaner/WPCommentCleaner.php\";s:3:\"1.2\";s:35:\"wp-dash-message/wp-dash-message.php\";s:5:\"1.1.2\";s:32:\"wp-google-fonts/google-fonts.php\";s:6:\"v3.1.4\";s:57:\"wpms-site-maintenance-mode/wpms-site-maintenance-mode.php\";s:5:\"1.0.3\";s:40:\"wpmudev-updates/update-notifications.php\";s:5:\"4.0.8\";s:26:\"wp-post-thumbnail/wppt.php\";s:5:\"0.1.8\";s:47:\"wp-security-audit-log/wp-security-audit-log.php\";s:5:\"2.6.4\";s:19:\"wptouch/wptouch.php\";s:6:\"4.3.18\";s:21:\"zotpress/zotpress.php\";s:5:\"6.1.6\";}s:8:\"response\";a:1:{s:27:\"coursepress/coursepress.php\";O:8:\"stdClass\":8:{s:2:\"id\";s:25:\"w.org/plugins/coursepress\";s:4:\"slug\";s:11:\"coursepress\";s:6:\"plugin\";s:27:\"coursepress/coursepress.php\";s:11:\"new_version\";s:5:\"2.0.7\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/coursepress/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/coursepress.2.0.7.zip\";s:6:\"tested\";s:5:\"4.7.4\";s:13:\"compatibility\";O:8:\"stdClass\":0:{}}}s:12:\"translations\";a:0:{}s:9:\"no_update\";a:105:{s:40:\"add-to-facebook-plugin/addtofacebook.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/add-to-facebook-plugin\";s:4:\"slug\";s:22:\"add-to-facebook-plugin\";s:6:\"plugin\";s:40:\"add-to-facebook-plugin/addtofacebook.php\";s:11:\"new_version\";s:5:\"1.4.3\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/add-to-facebook-plugin/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/add-to-facebook-plugin.zip\";}s:53:\"add-users-sidebar-widget/add-users-sidebar-widget.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:38:\"w.org/plugins/add-users-sidebar-widget\";s:4:\"slug\";s:24:\"add-users-sidebar-widget\";s:6:\"plugin\";s:53:\"add-users-sidebar-widget/add-users-sidebar-widget.php\";s:11:\"new_version\";s:5:\"1.0.3\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/add-users-sidebar-widget/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/add-users-sidebar-widget.zip\";}s:37:\"advanced-excerpt/advanced-excerpt.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:30:\"w.org/plugins/advanced-excerpt\";s:4:\"slug\";s:16:\"advanced-excerpt\";s:6:\"plugin\";s:37:\"advanced-excerpt/advanced-excerpt.php\";s:11:\"new_version\";s:5:\"4.2.3\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/advanced-excerpt/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/advanced-excerpt.4.2.3.zip\";}s:45:\"advanced-menu-widget/advanced-menu-widget.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:34:\"w.org/plugins/advanced-menu-widget\";s:4:\"slug\";s:20:\"advanced-menu-widget\";s:6:\"plugin\";s:45:\"advanced-menu-widget/advanced-menu-widget.php\";s:11:\"new_version\";s:5:\"0.4.1\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/advanced-menu-widget/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/advanced-menu-widget.zip\";}s:19:\"akismet/akismet.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:21:\"w.org/plugins/akismet\";s:4:\"slug\";s:7:\"akismet\";s:6:\"plugin\";s:19:\"akismet/akismet.php\";s:11:\"new_version\";s:5:\"3.3.2\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/akismet/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/akismet.3.3.2.zip\";}s:33:\"author-avatars/author-avatars.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/author-avatars\";s:4:\"slug\";s:14:\"author-avatars\";s:6:\"plugin\";s:33:\"author-avatars/author-avatars.php\";s:11:\"new_version\";s:4:\"1.11\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/author-avatars/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/author-avatars.1.11.zip\";}s:19:\"authors/authors.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:21:\"w.org/plugins/authors\";s:4:\"slug\";s:7:\"authors\";s:6:\"plugin\";s:19:\"authors/authors.php\";s:11:\"new_version\";s:5:\"2.4.5\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/authors/\";s:7:\"package\";s:50:\"https://downloads.wordpress.org/plugin/authors.zip\";}s:43:\"auto-post-thumbnail/auto-post-thumbnail.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/auto-post-thumbnail\";s:4:\"slug\";s:19:\"auto-post-thumbnail\";s:6:\"plugin\";s:43:\"auto-post-thumbnail/auto-post-thumbnail.php\";s:11:\"new_version\";s:5:\"3.4.1\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/auto-post-thumbnail/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/auto-post-thumbnail.3.4.1.zip\";}s:19:\"bbpress/bbpress.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:21:\"w.org/plugins/bbpress\";s:4:\"slug\";s:7:\"bbpress\";s:6:\"plugin\";s:19:\"bbpress/bbpress.php\";s:11:\"new_version\";s:6:\"2.5.12\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/bbpress/\";s:7:\"package\";s:57:\"https://downloads.wordpress.org/plugin/bbpress.2.5.12.zip\";}s:29:\"bruteprotect/bruteprotect.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:26:\"w.org/plugins/bruteprotect\";s:4:\"slug\";s:12:\"bruteprotect\";s:6:\"plugin\";s:29:\"bruteprotect/bruteprotect.php\";s:11:\"new_version\";s:3:\"2.5\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/bruteprotect/\";s:7:\"package\";s:55:\"https://downloads.wordpress.org/plugin/bruteprotect.zip\";}s:28:\"category-posts/cat-posts.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/category-posts\";s:4:\"slug\";s:14:\"category-posts\";s:6:\"plugin\";s:28:\"category-posts/cat-posts.php\";s:11:\"new_version\";s:5:\"4.7.2\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/category-posts/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/category-posts.4.7.2.zip\";}s:49:\"cimy-user-extra-fields/cimy_user_extra_fields.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/cimy-user-extra-fields\";s:4:\"slug\";s:22:\"cimy-user-extra-fields\";s:6:\"plugin\";s:49:\"cimy-user-extra-fields/cimy_user_extra_fields.php\";s:11:\"new_version\";s:5:\"2.7.2\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/cimy-user-extra-fields/\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/plugin/cimy-user-extra-fields.2.7.2.zip\";}s:36:\"contact-form-7/wp-contact-form-7.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/contact-form-7\";s:4:\"slug\";s:14:\"contact-form-7\";s:6:\"plugin\";s:36:\"contact-form-7/wp-contact-form-7.php\";s:11:\"new_version\";s:3:\"4.8\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/contact-form-7/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/contact-form-7.4.8.zip\";}s:25:\"dead-blogs/dead_blogs.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:24:\"w.org/plugins/dead-blogs\";s:4:\"slug\";s:10:\"dead-blogs\";s:6:\"plugin\";s:25:\"dead-blogs/dead_blogs.php\";s:11:\"new_version\";s:5:\"1.0.5\";s:3:\"url\";s:41:\"https://wordpress.org/plugins/dead-blogs/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/dead-blogs.1.0.5.zip\";}s:37:\"disable-comments/disable-comments.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:30:\"w.org/plugins/disable-comments\";s:4:\"slug\";s:16:\"disable-comments\";s:6:\"plugin\";s:37:\"disable-comments/disable-comments.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/disable-comments/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/disable-comments.zip\";}s:37:\"download-manager/download-manager.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:30:\"w.org/plugins/download-manager\";s:4:\"slug\";s:16:\"download-manager\";s:6:\"plugin\";s:37:\"download-manager/download-manager.php\";s:11:\"new_version\";s:6:\"2.9.52\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/download-manager/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/download-manager.zip\";}s:57:\"dynamic-content-gallery-plugin/dynamic-gallery-plugin.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:44:\"w.org/plugins/dynamic-content-gallery-plugin\";s:4:\"slug\";s:30:\"dynamic-content-gallery-plugin\";s:6:\"plugin\";s:57:\"dynamic-content-gallery-plugin/dynamic-gallery-plugin.php\";s:11:\"new_version\";s:5:\"3.3.6\";s:3:\"url\";s:61:\"https://wordpress.org/plugins/dynamic-content-gallery-plugin/\";s:7:\"package\";s:79:\"https://downloads.wordpress.org/plugin/dynamic-content-gallery-plugin.3.3.6.zip\";}s:27:\"email-users/email-users.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/email-users\";s:4:\"slug\";s:11:\"email-users\";s:6:\"plugin\";s:27:\"email-users/email-users.php\";s:11:\"new_version\";s:5:\"4.8.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/email-users/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/email-users.4.8.6.zip\";}s:45:\"enable-media-replace/enable-media-replace.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:34:\"w.org/plugins/enable-media-replace\";s:4:\"slug\";s:20:\"enable-media-replace\";s:6:\"plugin\";s:45:\"enable-media-replace/enable-media-replace.php\";s:11:\"new_version\";s:5:\"3.0.6\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/enable-media-replace/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/enable-media-replace.zip\";}s:33:\"events-manager/events-manager.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/events-manager\";s:4:\"slug\";s:14:\"events-manager\";s:6:\"plugin\";s:33:\"events-manager/events-manager.php\";s:11:\"new_version\";s:5:\"5.7.3\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/events-manager/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/events-manager.5.7.3.zip\";}s:44:\"featured-content-gallery/content-gallery.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:38:\"w.org/plugins/featured-content-gallery\";s:4:\"slug\";s:24:\"featured-content-gallery\";s:6:\"plugin\";s:44:\"featured-content-gallery/content-gallery.php\";s:11:\"new_version\";s:5:\"3.2.0\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/featured-content-gallery/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/featured-content-gallery.3.2.0.zip\";}s:44:\"wp-file-permission-check/file-perm-check.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:38:\"w.org/plugins/wp-file-permission-check\";s:4:\"slug\";s:24:\"wp-file-permission-check\";s:6:\"plugin\";s:44:\"wp-file-permission-check/file-perm-check.php\";s:11:\"new_version\";s:5:\"1.0.4\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/wp-file-permission-check/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/wp-file-permission-check.zip\";}s:41:\"flash-video-player/flash-video-player.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:32:\"w.org/plugins/flash-video-player\";s:4:\"slug\";s:18:\"flash-video-player\";s:6:\"plugin\";s:41:\"flash-video-player/flash-video-player.php\";s:11:\"new_version\";s:5:\"5.0.4\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/flash-video-player/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/flash-video-player.5.0.4.zip\";}s:24:\"flickr-rss/flickrrss.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:24:\"w.org/plugins/flickr-rss\";s:4:\"slug\";s:10:\"flickr-rss\";s:6:\"plugin\";s:24:\"flickr-rss/flickrrss.php\";s:11:\"new_version\";s:5:\"5.3.1\";s:3:\"url\";s:41:\"https://wordpress.org/plugins/flickr-rss/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/flickr-rss.5.3.1.zip\";}s:59:\"force-regenerate-thumbnails/force-regenerate-thumbnails.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:41:\"w.org/plugins/force-regenerate-thumbnails\";s:4:\"slug\";s:27:\"force-regenerate-thumbnails\";s:6:\"plugin\";s:59:\"force-regenerate-thumbnails/force-regenerate-thumbnails.php\";s:11:\"new_version\";s:5:\"2.0.6\";s:3:\"url\";s:58:\"https://wordpress.org/plugins/force-regenerate-thumbnails/\";s:7:\"package\";s:70:\"https://downloads.wordpress.org/plugin/force-regenerate-thumbnails.zip\";}s:25:\"form-maker/form-maker.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:24:\"w.org/plugins/form-maker\";s:4:\"slug\";s:10:\"form-maker\";s:6:\"plugin\";s:25:\"form-maker/form-maker.php\";s:11:\"new_version\";s:6:\"1.11.6\";s:3:\"url\";s:41:\"https://wordpress.org/plugins/form-maker/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/form-maker.1.11.6.zip\";}s:49:\"gd-bbpress-attachments/gd-bbpress-attachments.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/gd-bbpress-attachments\";s:4:\"slug\";s:22:\"gd-bbpress-attachments\";s:6:\"plugin\";s:49:\"gd-bbpress-attachments/gd-bbpress-attachments.php\";s:11:\"new_version\";s:3:\"2.4\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/gd-bbpress-attachments/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/gd-bbpress-attachments.zip\";}s:31:\"get-the-image/get-the-image.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:27:\"w.org/plugins/get-the-image\";s:4:\"slug\";s:13:\"get-the-image\";s:6:\"plugin\";s:31:\"get-the-image/get-the-image.php\";s:11:\"new_version\";s:5:\"1.0.1\";s:3:\"url\";s:44:\"https://wordpress.org/plugins/get-the-image/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/get-the-image.1.0.1.zip\";}s:36:\"google-document-embedder/gviewer.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:38:\"w.org/plugins/google-document-embedder\";s:4:\"slug\";s:24:\"google-document-embedder\";s:6:\"plugin\";s:36:\"google-document-embedder/gviewer.php\";s:11:\"new_version\";s:5:\"2.6.2\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/google-document-embedder/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/google-document-embedder.zip\";}s:17:\"wpgform/index.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:21:\"w.org/plugins/wpgform\";s:4:\"slug\";s:7:\"wpgform\";s:6:\"plugin\";s:17:\"wpgform/index.php\";s:11:\"new_version\";s:4:\"0.91\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/wpgform/\";s:7:\"package\";s:55:\"https://downloads.wordpress.org/plugin/wpgform.0.91.zip\";}s:9:\"hello.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/hello-dolly\";s:4:\"slug\";s:11:\"hello-dolly\";s:6:\"plugin\";s:9:\"hello.php\";s:11:\"new_version\";s:3:\"1.6\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/hello-dolly/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/hello-dolly.1.6.zip\";}s:17:\"iframe/iframe.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:20:\"w.org/plugins/iframe\";s:4:\"slug\";s:6:\"iframe\";s:6:\"plugin\";s:17:\"iframe/iframe.php\";s:11:\"new_version\";s:3:\"4.3\";s:3:\"url\";s:37:\"https://wordpress.org/plugins/iframe/\";s:7:\"package\";s:53:\"https://downloads.wordpress.org/plugin/iframe.4.3.zip\";}s:19:\"jetpack/jetpack.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:21:\"w.org/plugins/jetpack\";s:4:\"slug\";s:7:\"jetpack\";s:6:\"plugin\";s:19:\"jetpack/jetpack.php\";s:11:\"new_version\";s:3:\"5.0\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/jetpack/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/jetpack.5.0.zip\";}s:53:\"jj-nextgen-jquery-carousel/jj-ngg-jquery-carousel.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:40:\"w.org/plugins/jj-nextgen-jquery-carousel\";s:4:\"slug\";s:26:\"jj-nextgen-jquery-carousel\";s:6:\"plugin\";s:53:\"jj-nextgen-jquery-carousel/jj-ngg-jquery-carousel.php\";s:11:\"new_version\";s:5:\"1.1.8\";s:3:\"url\";s:57:\"https://wordpress.org/plugins/jj-nextgen-jquery-carousel/\";s:7:\"package\";s:75:\"https://downloads.wordpress.org/plugin/jj-nextgen-jquery-carousel.1.1.8.zip\";}s:38:\"jquery-hover-footnotes/jqFootnotes.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/jquery-hover-footnotes\";s:4:\"slug\";s:22:\"jquery-hover-footnotes\";s:6:\"plugin\";s:38:\"jquery-hover-footnotes/jqFootnotes.php\";s:11:\"new_version\";s:3:\"1.4\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/jquery-hover-footnotes/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/jquery-hover-footnotes.zip\";}s:45:\"limit-login-attempts/limit-login-attempts.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:34:\"w.org/plugins/limit-login-attempts\";s:4:\"slug\";s:20:\"limit-login-attempts\";s:6:\"plugin\";s:45:\"limit-login-attempts/limit-login-attempts.php\";s:11:\"new_version\";s:5:\"1.7.1\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/limit-login-attempts/\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/plugin/limit-login-attempts.1.7.1.zip\";}s:43:\"list-category-posts/list-category-posts.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/list-category-posts\";s:4:\"slug\";s:19:\"list-category-posts\";s:6:\"plugin\";s:43:\"list-category-posts/list-category-posts.php\";s:11:\"new_version\";s:4:\"0.72\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/list-category-posts/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/list-category-posts.0.72.zip\";}s:45:\"list-pages-shortcode/list-pages-shortcode.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:34:\"w.org/plugins/list-pages-shortcode\";s:4:\"slug\";s:20:\"list-pages-shortcode\";s:6:\"plugin\";s:45:\"list-pages-shortcode/list-pages-shortcode.php\";s:11:\"new_version\";s:5:\"1.7.4\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/list-pages-shortcode/\";s:7:\"package\";s:69:\"https://downloads.wordpress.org/plugin/list-pages-shortcode.1.7.4.zip\";}s:25:\"login-logo/login-logo.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:24:\"w.org/plugins/login-logo\";s:4:\"slug\";s:10:\"login-logo\";s:6:\"plugin\";s:25:\"login-logo/login-logo.php\";s:11:\"new_version\";s:3:\"0.7\";s:3:\"url\";s:41:\"https://wordpress.org/plugins/login-logo/\";s:7:\"package\";s:57:\"https://downloads.wordpress.org/plugin/login-logo.0.7.zip\";}s:37:\"mailchimp-for-wp/mailchimp-for-wp.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:30:\"w.org/plugins/mailchimp-for-wp\";s:4:\"slug\";s:16:\"mailchimp-for-wp\";s:6:\"plugin\";s:37:\"mailchimp-for-wp/mailchimp-for-wp.php\";s:11:\"new_version\";s:5:\"4.1.4\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/mailchimp-for-wp/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/mailchimp-for-wp.4.1.4.zip\";}s:47:\"mappress-google-maps-for-wordpress/mappress.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:48:\"w.org/plugins/mappress-google-maps-for-wordpress\";s:4:\"slug\";s:34:\"mappress-google-maps-for-wordpress\";s:6:\"plugin\";s:47:\"mappress-google-maps-for-wordpress/mappress.php\";s:11:\"new_version\";s:6:\"2.44.3\";s:3:\"url\";s:65:\"https://wordpress.org/plugins/mappress-google-maps-for-wordpress/\";s:7:\"package\";s:84:\"https://downloads.wordpress.org/plugin/mappress-google-maps-for-wordpress.2.44.3.zip\";}s:33:\"media-library-assistant/index.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:37:\"w.org/plugins/media-library-assistant\";s:4:\"slug\";s:23:\"media-library-assistant\";s:6:\"plugin\";s:33:\"media-library-assistant/index.php\";s:11:\"new_version\";s:4:\"2.54\";s:3:\"url\";s:54:\"https://wordpress.org/plugins/media-library-assistant/\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/plugin/media-library-assistant.2.54.zip\";}s:25:\"media-tags/media_tags.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:24:\"w.org/plugins/media-tags\";s:4:\"slug\";s:10:\"media-tags\";s:6:\"plugin\";s:25:\"media-tags/media_tags.php\";s:11:\"new_version\";s:7:\"3.2.0.2\";s:3:\"url\";s:41:\"https://wordpress.org/plugins/media-tags/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/media-tags.3.2.0.2.zip\";}s:30:\"mendeleyplugin/wp-mendeley.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/mendeleyplugin\";s:4:\"slug\";s:14:\"mendeleyplugin\";s:6:\"plugin\";s:30:\"mendeleyplugin/wp-mendeley.php\";s:11:\"new_version\";s:6:\"1.1.17\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/mendeleyplugin/\";s:7:\"package\";s:57:\"https://downloads.wordpress.org/plugin/mendeleyplugin.zip\";}s:27:\"mobilepress/mobilepress.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/mobilepress\";s:4:\"slug\";s:11:\"mobilepress\";s:6:\"plugin\";s:27:\"mobilepress/mobilepress.php\";s:11:\"new_version\";s:5:\"1.2.2\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/mobilepress/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/mobilepress.zip\";}s:43:\"wordpress-mu-theme-stats/ra-theme-stats.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:38:\"w.org/plugins/wordpress-mu-theme-stats\";s:4:\"slug\";s:24:\"wordpress-mu-theme-stats\";s:6:\"plugin\";s:43:\"wordpress-mu-theme-stats/ra-theme-stats.php\";s:11:\"new_version\";s:5:\"2.8.3\";s:3:\"url\";s:55:\"https://wordpress.org/plugins/wordpress-mu-theme-stats/\";s:7:\"package\";s:73:\"https://downloads.wordpress.org/plugin/wordpress-mu-theme-stats.2.8.3.zip\";}s:45:\"my-twitter-timelines/my_twitter_timelines.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:34:\"w.org/plugins/my-twitter-timelines\";s:4:\"slug\";s:20:\"my-twitter-timelines\";s:6:\"plugin\";s:45:\"my-twitter-timelines/my_twitter_timelines.php\";s:11:\"new_version\";s:3:\"1.0\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/my-twitter-timelines/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/my-twitter-timelines.zip\";}s:49:\"network-plugin-auditor/network-plugin-auditor.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/network-plugin-auditor\";s:4:\"slug\";s:22:\"network-plugin-auditor\";s:6:\"plugin\";s:49:\"network-plugin-auditor/network-plugin-auditor.php\";s:11:\"new_version\";s:6:\"1.10.1\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/network-plugin-auditor/\";s:7:\"package\";s:72:\"https://downloads.wordpress.org/plugin/network-plugin-auditor.1.10.1.zip\";}s:43:\"next-active-directory-integration/index.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:47:\"w.org/plugins/next-active-directory-integration\";s:4:\"slug\";s:33:\"next-active-directory-integration\";s:6:\"plugin\";s:43:\"next-active-directory-integration/index.php\";s:11:\"new_version\";s:6:\"2.0.14\";s:3:\"url\";s:64:\"https://wordpress.org/plugins/next-active-directory-integration/\";s:7:\"package\";s:83:\"https://downloads.wordpress.org/plugin/next-active-directory-integration.2.0.14.zip\";}s:61:\"nextgen-flex-slider-template/nextgen-flex-slider-template.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:42:\"w.org/plugins/nextgen-flex-slider-template\";s:4:\"slug\";s:28:\"nextgen-flex-slider-template\";s:6:\"plugin\";s:61:\"nextgen-flex-slider-template/nextgen-flex-slider-template.php\";s:11:\"new_version\";s:3:\"1.7\";s:3:\"url\";s:59:\"https://wordpress.org/plugins/nextgen-flex-slider-template/\";s:7:\"package\";s:75:\"https://downloads.wordpress.org/plugin/nextgen-flex-slider-template.1.7.zip\";}s:29:\"nextgen-gallery/nggallery.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:29:\"w.org/plugins/nextgen-gallery\";s:4:\"slug\";s:15:\"nextgen-gallery\";s:6:\"plugin\";s:29:\"nextgen-gallery/nggallery.php\";s:11:\"new_version\";s:6:\"2.2.10\";s:3:\"url\";s:46:\"https://wordpress.org/plugins/nextgen-gallery/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/nextgen-gallery.2.2.10.zip\";}s:31:\"openbook-book-data/openbook.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:32:\"w.org/plugins/openbook-book-data\";s:4:\"slug\";s:18:\"openbook-book-data\";s:6:\"plugin\";s:31:\"openbook-book-data/openbook.php\";s:11:\"new_version\";s:5:\"3.5.1\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/openbook-book-data/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/openbook-book-data.3.5.1.zip\";}s:23:\"orangebox/orangebox.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:23:\"w.org/plugins/orangebox\";s:4:\"slug\";s:9:\"orangebox\";s:6:\"plugin\";s:23:\"orangebox/orangebox.php\";s:11:\"new_version\";s:5:\"3.0.0\";s:3:\"url\";s:40:\"https://wordpress.org/plugins/orangebox/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/orangebox.3.0.0.zip\";}s:27:\"p3-profiler/p3-profiler.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/p3-profiler\";s:4:\"slug\";s:11:\"p3-profiler\";s:6:\"plugin\";s:27:\"p3-profiler/p3-profiler.php\";s:11:\"new_version\";s:7:\"1.5.3.9\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/p3-profiler/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/p3-profiler.1.5.3.9.zip\";}s:49:\"plugin-vulnerabilities/plugin-vulnerabilities.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/plugin-vulnerabilities\";s:4:\"slug\";s:22:\"plugin-vulnerabilities\";s:6:\"plugin\";s:49:\"plugin-vulnerabilities/plugin-vulnerabilities.php\";s:11:\"new_version\";s:6:\"2.0.46\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/plugin-vulnerabilities/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/plugin-vulnerabilities.zip\";}s:33:\"prezi-embedder/prezi-embedder.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/prezi-embedder\";s:4:\"slug\";s:14:\"prezi-embedder\";s:6:\"plugin\";s:33:\"prezi-embedder/prezi-embedder.php\";s:11:\"new_version\";s:3:\"2.1\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/prezi-embedder/\";s:7:\"package\";s:61:\"https://downloads.wordpress.org/plugin/prezi-embedder.2.1.zip\";}s:41:\"publish-to-facebook/publishtofacebook.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/publish-to-facebook\";s:4:\"slug\";s:19:\"publish-to-facebook\";s:6:\"plugin\";s:41:\"publish-to-facebook/publishtofacebook.php\";s:11:\"new_version\";s:3:\"1.0\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/publish-to-facebook/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/publish-to-facebook.zip\";}s:60:\"quick-pagepost-redirect-plugin/page_post_redirect_plugin.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:44:\"w.org/plugins/quick-pagepost-redirect-plugin\";s:4:\"slug\";s:30:\"quick-pagepost-redirect-plugin\";s:6:\"plugin\";s:60:\"quick-pagepost-redirect-plugin/page_post_redirect_plugin.php\";s:11:\"new_version\";s:5:\"5.1.8\";s:3:\"url\";s:61:\"https://wordpress.org/plugins/quick-pagepost-redirect-plugin/\";s:7:\"package\";s:79:\"https://downloads.wordpress.org/plugin/quick-pagepost-redirect-plugin.5.1.8.zip\";}s:47:\"really-simple-captcha/really-simple-captcha.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:35:\"w.org/plugins/really-simple-captcha\";s:4:\"slug\";s:21:\"really-simple-captcha\";s:6:\"plugin\";s:47:\"really-simple-captcha/really-simple-captcha.php\";s:11:\"new_version\";s:3:\"2.0\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/really-simple-captcha/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/really-simple-captcha.2.0.zip\";}s:47:\"regenerate-thumbnails/regenerate-thumbnails.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:35:\"w.org/plugins/regenerate-thumbnails\";s:4:\"slug\";s:21:\"regenerate-thumbnails\";s:6:\"plugin\";s:47:\"regenerate-thumbnails/regenerate-thumbnails.php\";s:11:\"new_version\";s:5:\"2.2.6\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/regenerate-thumbnails/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/regenerate-thumbnails.zip\";}s:27:\"wpmu-no-nag/wpmu-no-nag.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/wpmu-no-nag\";s:4:\"slug\";s:11:\"wpmu-no-nag\";s:6:\"plugin\";s:27:\"wpmu-no-nag/wpmu-no-nag.php\";s:11:\"new_version\";s:5:\"1.3.0\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/wpmu-no-nag/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/wpmu-no-nag.1.3.zip\";}s:57:\"restrict-multisite-plugins/restrict-multisite-plugins.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:40:\"w.org/plugins/restrict-multisite-plugins\";s:4:\"slug\";s:26:\"restrict-multisite-plugins\";s:6:\"plugin\";s:57:\"restrict-multisite-plugins/restrict-multisite-plugins.php\";s:11:\"new_version\";s:5:\"1.1.3\";s:3:\"url\";s:57:\"https://wordpress.org/plugins/restrict-multisite-plugins/\";s:7:\"package\";s:75:\"https://downloads.wordpress.org/plugin/restrict-multisite-plugins.1.1.3.zip\";}s:68:\"restrict-password-changes-multisite/tr_restrict_password_changes.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:49:\"w.org/plugins/restrict-password-changes-multisite\";s:4:\"slug\";s:35:\"restrict-password-changes-multisite\";s:6:\"plugin\";s:68:\"restrict-password-changes-multisite/tr_restrict_password_changes.php\";s:11:\"new_version\";s:3:\"0.1\";s:3:\"url\";s:66:\"https://wordpress.org/plugins/restrict-password-changes-multisite/\";s:7:\"package\";s:78:\"https://downloads.wordpress.org/plugin/restrict-password-changes-multisite.zip\";}s:27:\"role-scoper/role-scoper.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/role-scoper\";s:4:\"slug\";s:11:\"role-scoper\";s:6:\"plugin\";s:27:\"role-scoper/role-scoper.php\";s:11:\"new_version\";s:5:\"1.4.4\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/role-scoper/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/role-scoper.zip\";}s:28:\"rv-embed-pdf/rv_embedpdf.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:26:\"w.org/plugins/rv-embed-pdf\";s:4:\"slug\";s:12:\"rv-embed-pdf\";s:6:\"plugin\";s:28:\"rv-embed-pdf/rv_embedpdf.php\";s:11:\"new_version\";s:3:\"1.1\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/rv-embed-pdf/\";s:7:\"package\";s:55:\"https://downloads.wordpress.org/plugin/rv-embed-pdf.zip\";}s:29:\"shadowbox-js/shadowbox-js.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:26:\"w.org/plugins/shadowbox-js\";s:4:\"slug\";s:12:\"shadowbox-js\";s:6:\"plugin\";s:29:\"shadowbox-js/shadowbox-js.php\";s:11:\"new_version\";s:10:\"3.0.3.10.2\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/shadowbox-js/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/shadowbox-js.3.0.3.10.2.zip\";}s:37:\"shadowbox-js/shadowbox-title-push.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:26:\"w.org/plugins/shadowbox-js\";s:4:\"slug\";s:12:\"shadowbox-js\";s:6:\"plugin\";s:37:\"shadowbox-js/shadowbox-title-push.php\";s:11:\"new_version\";s:10:\"3.0.3.10.2\";s:3:\"url\";s:43:\"https://wordpress.org/plugins/shadowbox-js/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/shadowbox-js.3.0.3.10.2.zip\";}s:21:\"sharebar/sharebar.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:22:\"w.org/plugins/sharebar\";s:4:\"slug\";s:8:\"sharebar\";s:6:\"plugin\";s:21:\"sharebar/sharebar.php\";s:11:\"new_version\";s:5:\"1.4.1\";s:3:\"url\";s:39:\"https://wordpress.org/plugins/sharebar/\";s:7:\"package\";s:57:\"https://downloads.wordpress.org/plugin/sharebar.1.4.1.zip\";}s:24:\"share-this/sharethis.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:24:\"w.org/plugins/share-this\";s:4:\"slug\";s:10:\"share-this\";s:6:\"plugin\";s:24:\"share-this/sharethis.php\";s:11:\"new_version\";s:3:\"7.8\";s:3:\"url\";s:41:\"https://wordpress.org/plugins/share-this/\";s:7:\"package\";s:53:\"https://downloads.wordpress.org/plugin/share-this.zip\";}s:31:\"sidebar-login/sidebar-login.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:27:\"w.org/plugins/sidebar-login\";s:4:\"slug\";s:13:\"sidebar-login\";s:6:\"plugin\";s:31:\"sidebar-login/sidebar-login.php\";s:11:\"new_version\";s:5:\"2.7.3\";s:3:\"url\";s:44:\"https://wordpress.org/plugins/sidebar-login/\";s:7:\"package\";s:62:\"https://downloads.wordpress.org/plugin/sidebar-login.2.7.3.zip\";}s:49:\"google-calendar-events/google-calendar-events.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/google-calendar-events\";s:4:\"slug\";s:22:\"google-calendar-events\";s:6:\"plugin\";s:49:\"google-calendar-events/google-calendar-events.php\";s:11:\"new_version\";s:5:\"3.1.9\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/google-calendar-events/\";s:7:\"package\";s:71:\"https://downloads.wordpress.org/plugin/google-calendar-events.3.1.9.zip\";}s:39:\"simple-custom-css/simple-custom-css.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:31:\"w.org/plugins/simple-custom-css\";s:4:\"slug\";s:17:\"simple-custom-css\";s:6:\"plugin\";s:39:\"simple-custom-css/simple-custom-css.php\";s:11:\"new_version\";s:3:\"3.3\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/simple-custom-css/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/simple-custom-css.zip\";}s:43:\"simple-image-widget/simple-image-widget.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/simple-image-widget\";s:4:\"slug\";s:19:\"simple-image-widget\";s:6:\"plugin\";s:43:\"simple-image-widget/simple-image-widget.php\";s:11:\"new_version\";s:5:\"4.4.1\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/simple-image-widget/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/simple-image-widget.4.4.1.zip\";}s:43:\"simple-import-users/simple-import-users.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/simple-import-users\";s:4:\"slug\";s:19:\"simple-import-users\";s:6:\"plugin\";s:43:\"simple-import-users/simple-import-users.php\";s:11:\"new_version\";s:3:\"1.1\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/simple-import-users/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/simple-import-users.1.1.zip\";}s:43:\"simple-ldap-login_old/Simple-LDAP-Login.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:31:\"w.org/plugins/simple-ldap-login\";s:4:\"slug\";s:17:\"simple-ldap-login\";s:6:\"plugin\";s:43:\"simple-ldap-login_old/Simple-LDAP-Login.php\";s:11:\"new_version\";s:5:\"1.6.0\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/simple-ldap-login/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/simple-ldap-login.1.6.0.zip\";}s:45:\"simple-local-avatars/simple-local-avatars.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:34:\"w.org/plugins/simple-local-avatars\";s:4:\"slug\";s:20:\"simple-local-avatars\";s:6:\"plugin\";s:45:\"simple-local-avatars/simple-local-avatars.php\";s:11:\"new_version\";s:3:\"2.0\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/simple-local-avatars/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/simple-local-avatars.2.0.zip\";}s:42:\"slick-contact-forms/dcwp_slick_contact.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/slick-contact-forms\";s:4:\"slug\";s:19:\"slick-contact-forms\";s:6:\"plugin\";s:42:\"slick-contact-forms/dcwp_slick_contact.php\";s:11:\"new_version\";s:5:\"1.3.7\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/slick-contact-forms/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/slick-contact-forms.1.3.7.zip\";}s:30:\"smart-youtube/smartyoutube.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:27:\"w.org/plugins/smart-youtube\";s:4:\"slug\";s:13:\"smart-youtube\";s:6:\"plugin\";s:30:\"smart-youtube/smartyoutube.php\";s:11:\"new_version\";s:3:\"4.3\";s:3:\"url\";s:44:\"https://wordpress.org/plugins/smart-youtube/\";s:7:\"package\";s:56:\"https://downloads.wordpress.org/plugin/smart-youtube.zip\";}s:45:\"soundcloud-shortcode/soundcloud-shortcode.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:34:\"w.org/plugins/soundcloud-shortcode\";s:4:\"slug\";s:20:\"soundcloud-shortcode\";s:6:\"plugin\";s:45:\"soundcloud-shortcode/soundcloud-shortcode.php\";s:11:\"new_version\";s:5:\"3.0.2\";s:3:\"url\";s:51:\"https://wordpress.org/plugins/soundcloud-shortcode/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/soundcloud-shortcode.zip\";}s:17:\"styles/styles.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:20:\"w.org/plugins/styles\";s:4:\"slug\";s:6:\"styles\";s:6:\"plugin\";s:17:\"styles/styles.php\";s:11:\"new_version\";s:3:\"1.2\";s:3:\"url\";s:37:\"https://wordpress.org/plugins/styles/\";s:7:\"package\";s:53:\"https://downloads.wordpress.org/plugin/styles.1.2.zip\";}s:47:\"subscribe-to-comments/subscribe-to-comments.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:35:\"w.org/plugins/subscribe-to-comments\";s:4:\"slug\";s:21:\"subscribe-to-comments\";s:6:\"plugin\";s:47:\"subscribe-to-comments/subscribe-to-comments.php\";s:11:\"new_version\";s:3:\"2.3\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/subscribe-to-comments/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/subscribe-to-comments.2.3.zip\";}s:43:\"the-events-calendar/the-events-calendar.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/the-events-calendar\";s:4:\"slug\";s:19:\"the-events-calendar\";s:6:\"plugin\";s:43:\"the-events-calendar/the-events-calendar.php\";s:11:\"new_version\";s:5:\"4.5.5\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/the-events-calendar/\";s:7:\"package\";s:68:\"https://downloads.wordpress.org/plugin/the-events-calendar.4.5.5.zip\";}s:37:\"tinymce-advanced/tinymce-advanced.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:30:\"w.org/plugins/tinymce-advanced\";s:4:\"slug\";s:16:\"tinymce-advanced\";s:6:\"plugin\";s:37:\"tinymce-advanced/tinymce-advanced.php\";s:11:\"new_version\";s:5:\"4.6.3\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/tinymce-advanced/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/tinymce-advanced.4.6.3.zip\";}s:51:\"twitter-hash-tag-widget/twitter-hash-tag-widget.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:37:\"w.org/plugins/twitter-hash-tag-widget\";s:4:\"slug\";s:23:\"twitter-hash-tag-widget\";s:6:\"plugin\";s:51:\"twitter-hash-tag-widget/twitter-hash-tag-widget.php\";s:11:\"new_version\";s:3:\"1.1\";s:3:\"url\";s:54:\"https://wordpress.org/plugins/twitter-hash-tag-widget/\";s:7:\"package\";s:70:\"https://downloads.wordpress.org/plugin/twitter-hash-tag-widget.1.1.zip\";}s:27:\"unconfirmed/unconfirmed.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/unconfirmed\";s:4:\"slug\";s:11:\"unconfirmed\";s:6:\"plugin\";s:27:\"unconfirmed/unconfirmed.php\";s:11:\"new_version\";s:5:\"1.3.1\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/unconfirmed/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/unconfirmed.1.3.1.zip\";}s:33:\"user-switching/user-switching.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:28:\"w.org/plugins/user-switching\";s:4:\"slug\";s:14:\"user-switching\";s:6:\"plugin\";s:33:\"user-switching/user-switching.php\";s:11:\"new_version\";s:5:\"1.0.9\";s:3:\"url\";s:45:\"https://wordpress.org/plugins/user-switching/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/user-switching.1.0.9.zip\";}s:46:\"ustream-for-wordpress/utream-for-wordpress.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:35:\"w.org/plugins/ustream-for-wordpress\";s:4:\"slug\";s:21:\"ustream-for-wordpress\";s:6:\"plugin\";s:46:\"ustream-for-wordpress/utream-for-wordpress.php\";s:11:\"new_version\";s:5:\"2.3.1\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/ustream-for-wordpress/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/ustream-for-wordpress.zip\";}s:43:\"vimeo-simplegallery/vimeo_simplegallery.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:33:\"w.org/plugins/vimeo-simplegallery\";s:4:\"slug\";s:19:\"vimeo-simplegallery\";s:6:\"plugin\";s:43:\"vimeo-simplegallery/vimeo_simplegallery.php\";s:11:\"new_version\";s:3:\"0.2\";s:3:\"url\";s:50:\"https://wordpress.org/plugins/vimeo-simplegallery/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/vimeo-simplegallery.0.2.zip\";}s:49:\"vipers-video-quicktags/vipers-video-quicktags.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:36:\"w.org/plugins/vipers-video-quicktags\";s:4:\"slug\";s:22:\"vipers-video-quicktags\";s:6:\"plugin\";s:49:\"vipers-video-quicktags/vipers-video-quicktags.php\";s:11:\"new_version\";s:5:\"6.6.0\";s:3:\"url\";s:53:\"https://wordpress.org/plugins/vipers-video-quicktags/\";s:7:\"package\";s:65:\"https://downloads.wordpress.org/plugin/vipers-video-quicktags.zip\";}s:23:\"wordfence/wordfence.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:23:\"w.org/plugins/wordfence\";s:4:\"slug\";s:9:\"wordfence\";s:6:\"plugin\";s:23:\"wordfence/wordfence.php\";s:11:\"new_version\";s:6:\"6.3.11\";s:3:\"url\";s:40:\"https://wordpress.org/plugins/wordfence/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/wordfence.6.3.11.zip\";}s:35:\"wordpresscom-popular-posts/wppp.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:40:\"w.org/plugins/wordpresscom-popular-posts\";s:4:\"slug\";s:26:\"wordpresscom-popular-posts\";s:6:\"plugin\";s:35:\"wordpresscom-popular-posts/wppp.php\";s:11:\"new_version\";s:5:\"2.6.0\";s:3:\"url\";s:57:\"https://wordpress.org/plugins/wordpresscom-popular-posts/\";s:7:\"package\";s:75:\"https://downloads.wordpress.org/plugin/wordpresscom-popular-posts.2.6.0.zip\";}s:41:\"wordpress-importer/wordpress-importer.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:32:\"w.org/plugins/wordpress-importer\";s:4:\"slug\";s:18:\"wordpress-importer\";s:6:\"plugin\";s:41:\"wordpress-importer/wordpress-importer.php\";s:11:\"new_version\";s:5:\"0.6.3\";s:3:\"url\";s:49:\"https://wordpress.org/plugins/wordpress-importer/\";s:7:\"package\";s:67:\"https://downloads.wordpress.org/plugin/wordpress-importer.0.6.3.zip\";}s:27:\"wp-optimize/wp-optimize.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/wp-optimize\";s:4:\"slug\";s:11:\"wp-optimize\";s:6:\"plugin\";s:27:\"wp-optimize/wp-optimize.php\";s:11:\"new_version\";s:5:\"2.1.1\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/wp-optimize/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/wp-optimize.2.1.1.zip\";}s:27:\"wp-pagenavi/wp-pagenavi.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/wp-pagenavi\";s:4:\"slug\";s:11:\"wp-pagenavi\";s:6:\"plugin\";s:27:\"wp-pagenavi/wp-pagenavi.php\";s:11:\"new_version\";s:4:\"2.91\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/wp-pagenavi/\";s:7:\"package\";s:59:\"https://downloads.wordpress.org/plugin/wp-pagenavi.2.91.zip\";}s:27:\"wp-showhide/wp-showhide.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/wp-showhide\";s:4:\"slug\";s:11:\"wp-showhide\";s:6:\"plugin\";s:27:\"wp-showhide/wp-showhide.php\";s:11:\"new_version\";s:4:\"1.04\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/wp-showhide/\";s:7:\"package\";s:54:\"https://downloads.wordpress.org/plugin/wp-showhide.zip\";}s:39:\"wp-table-reloaded/wp-table-reloaded.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:31:\"w.org/plugins/wp-table-reloaded\";s:4:\"slug\";s:17:\"wp-table-reloaded\";s:6:\"plugin\";s:39:\"wp-table-reloaded/wp-table-reloaded.php\";s:11:\"new_version\";s:5:\"1.9.4\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/wp-table-reloaded/\";s:7:\"package\";s:66:\"https://downloads.wordpress.org/plugin/wp-table-reloaded.1.9.4.zip\";}s:27:\"wp-bandcamp/wp-bandcamp.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:25:\"w.org/plugins/wp-bandcamp\";s:4:\"slug\";s:11:\"wp-bandcamp\";s:6:\"plugin\";s:27:\"wp-bandcamp/wp-bandcamp.php\";s:11:\"new_version\";s:5:\"1.1.1\";s:3:\"url\";s:42:\"https://wordpress.org/plugins/wp-bandcamp/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/wp-bandcamp.1.1.1.zip\";}s:37:\"wpcommentcleaner/WPCommentCleaner.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:30:\"w.org/plugins/wpcommentcleaner\";s:4:\"slug\";s:16:\"wpcommentcleaner\";s:6:\"plugin\";s:37:\"wpcommentcleaner/WPCommentCleaner.php\";s:11:\"new_version\";s:3:\"1.2\";s:3:\"url\";s:47:\"https://wordpress.org/plugins/wpcommentcleaner/\";s:7:\"package\";s:63:\"https://downloads.wordpress.org/plugin/wpcommentcleaner.1.2.zip\";}s:35:\"wp-dash-message/wp-dash-message.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:29:\"w.org/plugins/wp-dash-message\";s:4:\"slug\";s:15:\"wp-dash-message\";s:6:\"plugin\";s:35:\"wp-dash-message/wp-dash-message.php\";s:11:\"new_version\";s:5:\"1.1.2\";s:3:\"url\";s:46:\"https://wordpress.org/plugins/wp-dash-message/\";s:7:\"package\";s:64:\"https://downloads.wordpress.org/plugin/wp-dash-message.1.1.2.zip\";}s:32:\"wp-google-fonts/google-fonts.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:29:\"w.org/plugins/wp-google-fonts\";s:4:\"slug\";s:15:\"wp-google-fonts\";s:6:\"plugin\";s:32:\"wp-google-fonts/google-fonts.php\";s:11:\"new_version\";s:6:\"v3.1.4\";s:3:\"url\";s:46:\"https://wordpress.org/plugins/wp-google-fonts/\";s:7:\"package\";s:58:\"https://downloads.wordpress.org/plugin/wp-google-fonts.zip\";}s:57:\"wpms-site-maintenance-mode/wpms-site-maintenance-mode.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:40:\"w.org/plugins/wpms-site-maintenance-mode\";s:4:\"slug\";s:26:\"wpms-site-maintenance-mode\";s:6:\"plugin\";s:57:\"wpms-site-maintenance-mode/wpms-site-maintenance-mode.php\";s:11:\"new_version\";s:5:\"1.0.3\";s:3:\"url\";s:57:\"https://wordpress.org/plugins/wpms-site-maintenance-mode/\";s:7:\"package\";s:75:\"https://downloads.wordpress.org/plugin/wpms-site-maintenance-mode.1.0.3.zip\";}s:26:\"wp-post-thumbnail/wppt.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:31:\"w.org/plugins/wp-post-thumbnail\";s:4:\"slug\";s:17:\"wp-post-thumbnail\";s:6:\"plugin\";s:26:\"wp-post-thumbnail/wppt.php\";s:11:\"new_version\";s:5:\"0.1.8\";s:3:\"url\";s:48:\"https://wordpress.org/plugins/wp-post-thumbnail/\";s:7:\"package\";s:60:\"https://downloads.wordpress.org/plugin/wp-post-thumbnail.zip\";}s:47:\"wp-security-audit-log/wp-security-audit-log.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:35:\"w.org/plugins/wp-security-audit-log\";s:4:\"slug\";s:21:\"wp-security-audit-log\";s:6:\"plugin\";s:47:\"wp-security-audit-log/wp-security-audit-log.php\";s:11:\"new_version\";s:5:\"2.6.4\";s:3:\"url\";s:52:\"https://wordpress.org/plugins/wp-security-audit-log/\";s:7:\"package\";s:70:\"https://downloads.wordpress.org/plugin/wp-security-audit-log.2.6.4.zip\";}s:19:\"wptouch/wptouch.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:21:\"w.org/plugins/wptouch\";s:4:\"slug\";s:7:\"wptouch\";s:6:\"plugin\";s:19:\"wptouch/wptouch.php\";s:11:\"new_version\";s:6:\"4.3.18\";s:3:\"url\";s:38:\"https://wordpress.org/plugins/wptouch/\";s:7:\"package\";s:57:\"https://downloads.wordpress.org/plugin/wptouch.4.3.18.zip\";}s:21:\"zotpress/zotpress.php\";O:8:\"stdClass\":6:{s:2:\"id\";s:22:\"w.org/plugins/zotpress\";s:4:\"slug\";s:8:\"zotpress\";s:6:\"plugin\";s:21:\"zotpress/zotpress.php\";s:11:\"new_version\";s:5:\"6.1.6\";s:3:\"url\";s:39:\"https://wordpress.org/plugins/zotpress/\";s:7:\"package\";s:57:\"https://downloads.wordpress.org/plugin/zotpress.6.1.6.zip\";}}}. Here's the entry from the row added to the options table:\noption_id     0\noption_name _transient_2__536483053\noption_value        {\"photocrati-ajax#ajax.min.js|1\":\n. ",
    "freegenie": "I've found debugging SSH url parser function that port must be provided, surprisingly. I took for granted it was falling back to a default like other tools like  scp and git do. . Sure, later today. Sorry I didn't see test were setup already. \n\nIl giorno 24 giu 2017, alle ore 21:41, gitlost notifications@github.com ha scritto:\nThanks, could you do a phpunit test please? (See https://github.com/wp-cli/wp-cli/blob/master/tests/test-utils.php#L58).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Done and rebased on latest master.. Ok, I managed to solve this issue by the way.  It was caused by a configuration injected in wp-config.php by serverpilot: \n\n// define('SP_REQUEST_URL', ($_SERVER['HTTPS'] ? 'https://' : 'http://') . $_SERVER['HTTP_HOST']);\n// \n// define('WP_SITEURL', SP_REQUEST_URL);\n// define('WP_HOME', SP_REQUEST_URL);\nCommenting these lines solved the problem.. ",
    "googlebe": "Find the problem\uff0ci custom defined the table_prefix \"bpgmZ\" in the wp-config.php,how can i fix it?. ",
    "Ippey": "@gitlost Thank you for your checking! I'll try them tonight.. ",
    "computersalat": "Sorry, wasn't aware that github is producing such a bullshit :(. I do when it is worth to do :-P. ",
    "paulgibbs": "Thanks for getting this fixed promptly!. Amazing investigation @gitlost, thanks for looking into this!. ",
    "electrokit": "@danielbachhuber, is the update acceptable? The two changes should not do anything different in *nix environments with files with LF line endings.. $docComment = str_replace( \"\\r\\n\", \"\\n\", $docComment );\nwill break on e.g. Mac OS 9. Maybe not a problem because of the performance increase?. ",
    "gfolin": "Mostly a joke, just that I think that \\R results in nicer code (removes the definition of newlines away from the code). But for performance reasons alone (around a factor 2), I think the code that @gitlost wrote is better.. Just so everyone knows, I'm @electrokit as well. Work account.. ",
    "madebycaliper": "It's very possible there's a problem with my setup, sure. My guess is it has to do with the nested calls to wp commands. Can you think of anything that would cause an unexpected failure when using runcommand from within another command?\nI ran everything using --debug and didn't see anything unusual.\nshould I look in the system PHP logs to see whats going on? apache? thanks for the help. Thanks for response, though it feels dismissive to me. Maybe it's my lack of understanding of how your automatic testing works, but how can you be so sure that this is because of my setup?\nI tried MANY different internal command in the script (launch(),launch_self(),run_command(), etc) ALL of which failed to run with wp cli v1.2.1 and PHP 5.4, whereas they worked perfectly for 6 months at least with wp cli v1.0.0 and PHP 5.4.  The only thing that was changed on my setup was an update to wp-cli.... Totally understand, thanks for your reply! I'll try to find some time to post a set of reproducable steps.. ",
    "Asenar": "Thanks for your answer, but it seems WP-CLI parses wp-config.php after setting ABSPATH (so my current PR will not fix the notice, but the problem still exists).\nFrom what I understood, the problem is in method Runner->start():\nCurrently, the command self::set_wp_root (at line 856) always define ABSPATH. Which is fine only when the optional param --path is present (with the method find_wp_root). When it's not, the method Runner->find_wp_root() try to \u00abguess\u00bb the correct location, based on the presence of some key files, and can eventually return nothing (so ABSPATH might potentially be defined to an empty string).\nThe presence of the file wp-config.php is checked 30 line after, at line 884, and it's loaded with eval() at line 892 with eval($this->get_wp_config_code()) \nNote the ABSPATH constant is supposed to be always defined at the end of wp-config.php (if not already defined).\nI think than in Runner::start(), the call of self::set_wp_root($this->find_wp_root()); must not be called if --path is missing, and must show an error if --path is defined and wp-config.php already exists.\nSo, should I correct my PR, by calling set_wp_root only if --path has been provided (instead of what I did, based on the constant ABSPATH) ?\n. Are you really sure ?\nSorry to insist on this, but in Runner.php I see than ABSPATH is defined before any parsing of wp-config.php.. ",
    "Sidsector9": "@schlessera If I understood this issue correctly, then, what if we could compare the names before running composer?\nWe have the path = 'github.com/user/package';\nwe could compare user/package with the name in ( in case of GitHub ) https://raw.githubusercontent.com/user/package/master/composer.json, if it doesn't matches then throw an error?. @szepeviktor @danielbachhuber , what will has-command return if the command is found?\nBoolean?\n. Cool.\nI have 2 implementations, just needed some clarity over this before I submit a pull request\n1. Using recursive algorithm, it will detect if a command as wp term wp term delete exists or not. However, this will return false if you don't provide input in the correct sequence. For example, wp cli has-command \"delete\" will return false whereas wp cli term delete will return true.\n\nThe other implementation will detect any command/subcommand and return true. For example wp cli has-command \"delete\" or wp cli has-command \"list\" will return true.\n\nWhich of the above 2 is more suitable for this feature request?. @danielbachhuber What would be the correct way to fix minor issues like these?. @danielbachhuber Cool, will follow it henceforth.. Made changes as per review. I think the compression is faulty.\nSteps I followed:\n1. Downloaded the en_US version\n2. $phar = new PharData( 'wordpress-4.8.2.tar.gz' );\necho $phar->getFileName();\nThis failed\n3. Extracted the tarball manually and compressed it again.\n4. Tried step 2 and it worked perfectly.. For EasyEngine users, there's a blog with 2 workarounds -\nhttps://easyengine.io/blog/solution-couldnt-extract-wordpress-archive-error/\nThanks to @danielbachhuber, @miya0001 and @gitlost . This is just such a beautiful way to do this, I did not know about this!. @schlessera, Why didn't git clone work?. I see :eyes: . You're correct, there wasn't a need to generate a phar. I replaced it with wp @danielbachhuber . ",
    "emilushi": "@danielbachhuber Thanks for the help.\nI will give a try with that as for the moment I resolved that by creating a function to convert snake_case to camelCase.. ",
    "hzektser": "@schlessera I'm not clear why this isn't a bug? It seems pretty clear-cut that it is.. Take a default install, run wp export and add this to the xml before re-importing;\n<wp:term>\n<wp:term_id>3981</wp:term_id>\n<wp:term_taxonomy>yst_prominent_words</wp:term_taxonomy>\n<wp:term_slug>steve</wp:term_slug>\n<wp:term_parent/>\n<wp:term_name>\n<![CDATA[ ? by @steve ]]>\n</wp:term_name>\n</wp:term>\nEven if this is an unsupported element for import, at the very least it should be ignorable. Just failing seems like incorrect behavior.. @schlessera my miss -- didn't realize I had to activate Yoast! My bad, you are absolutely right!. ",
    "iamkingsleyf": "I am having the same problem, i have installed YOAST but seems not to work. ",
    "chriszarate": "After https://github.com/wp-cli/wp-cli/pull/4241 is addressed/merged, I can rebase so that tests pass.. @danielbachhuber No, no remaining work from me. Thanks!. I'm wondering if it would be better to set/override the --path arg below.. I wonder so many things; I should probably try to cut down. General uninformed feeling:\n\nLess code, takes advantage of built-in escaping below.\nDoing it \"the WP-CLI way.\"\nCurrently, if user supplies path in connection string AND --path arg, the --path arg \"wins\" even though it's not clear why or how.\n\nAfter writing out point 3, though, I realize changing it would be rather arbitrary. If we wanted to be explicit, we could just drop support for path in the connection string and direct users to the --path arg.. Makes sense.. ",
    "florianbrinkmann": "Didn\u2019t notice that Windows is not officially supported, sorry :) Will take a look at the links, thanks!. I had the same problem on Windows. Using set instead of export fixed it there (just for reference, if some Windows user has the same problem and finds this issue before the new WP-CLI version with the fix gets published :)):\nset SSL_CERT_FILE=phar://wp-cli.phar/vendor/rmccue/requests/library/Requests/Transport/cacert.pem. ",
    "mapk": "\n\nSeems like the correct placement for this would be in the main content. A reference at the bottom? I can help design this.\n\n\nIn order to get the https://developer.wordpress.org/cli/ site to mimic the current make/cli handbook, we need to move over the O2 Plugin I think. @pento or @ocean90 might have a stronger idea how to make this happen. It will give us the new look and feel with the sidebar navigation.\n\n\nWould this be a page by itself? A section that exists across all pages? Seems like the simplest would be a stand alone page that could highlight these? I can help design this as well.. 1. If we're adding global parameters to each page, it might be a good idea to include them in an accordion-type of table so they aren't visually overwhelming. I've cleaned up some table styling here: https://codepen.io/mapk/pen/brwPOL?editors=0110 \n\n\nTake a look and let me know if that works for no. 1.. @danielbachhuber If you don't mind committing it yourself, please do. I'll work on the issue notifications (no. 3) today. . I've got No.3 ready to go as well. Take a look at this: https://codepen.io/mapk/pen/YxpJqL\n\n. Excellent. I guess that depends how important it is for the user to see. \nIf the user is there because they want to research information (which is most likely the case), then contributing through Github would probably be secondary for them. So maybe at the bottom?. @danielbachhuber It's probably missing the regular button styles. Try pulling them in from the Plugin Directory theme. Can you do that?. @danielbachhuber Looks like the buttons are a lot closer now.\n\nDid you want to add the .btn-group css as well?. I was viewing them in FF, you were viewing them in Chrome maybe? We need to fix the styling so it applies to all browsers. I can take a look.. Looks like this change in the CSS on the anchor tag should work.\nFROM\n-webkit-appearance: button;\nTO\n-webkit-appearance: none;. ",
    "emcniece": "For those seeking a solution: PAGER='busybox less'\nhttps://github.com/pry/pry/issues/1494#issuecomment-318067013\nAnd a better solution: PAGER='more'\nhttps://github.com/wp-cli/wp-cli/issues/3840#issuecomment-318067057. ",
    "nebulon42": "@danielbachhuber Please reopen. The referenced issue does not solve the issue with less. I think this is a bug.. ",
    "1Pauletto": "@schlessera  of course you are right, but we use wp-cli for our clients, and we can not be sure that they don't have these functions in their wp-config.php.\n@danielbachhuber with this thing we can prevent badly written wp-config.php and out wp-cli won't be failed. . And the main point, that we have clients with stable work sites, who wrote to wp-config code with functions that I described above.. Ok, thank you.. ",
    "emgk": "@danielbachhuber Is these issue  inside https://github.com/wp-cli/handbook ? . ",
    "YewTreeWeb": "Hi @miya0001 thank you for your reply. I'm still having the same issue with 1.3.0 but I will try support \ud83d\ude42 . ",
    "BenBrostoff": "I'm actually having the same issue as @miya0001 and using WP-CLI 1.3. @YewTreeWeb - did you find anything helpful in support?\nEDIT: figured I would post here for the benefit of others. Bumping the memory limit from 128m to 512m in php.ini (or whatever path php.ini used is set to in wp --info) solved this issue. That said, I believe this is important enough that it should be in the documentation; this solution wasn't obvious.. ",
    "colorful-tones": "@YewTreeWeb @BenBrostoff \nI'm curious if you have any further insight to report back, because I'm currently running up against this same issue and I'm running WP-CLI 1.4.1 with php.ini memory limit 512M.. I was able to cd /Users/my_cool_user/.wp-cli/packages/ and composer install, which then allows me to get a list with wp pacakage list. I'm not sure what is blocking Composer.\nThe only oddity is if I run php -r \"echo ini_get('memory_limit').PHP_EOL;\" I get back 128M, which makes no sense, because: \n\nwhich php gives me: /Applications/MAMP/bin/php/php7.1.8/bin/php, and\nwp --info gives me: php.ini used:  /Applications/MAMP/bin/php/php7.1.8/conf/php.ini\n\nAnd the php.ini for MAMP's PHP 7.1.8 is currently now at 2G. \u00af_(\u30c4)_/\u00af. @gitlost thanks for the help. I deleted /Users/my_cool_user/.wp-cli/packages/composer.json and then installed a package and I seem to be back in working order.. ",
    "bpb54321": "Increasing the memory from 128M to 512M in my php.ini fixed the issue! Thanks @colorful-tones !. ",
    "danfsd": "Increasing memory also did the trick here. Using 512M now. Thanks!. ",
    "ryotsun": "Hello, I just would like to know more details what do you want to do, to clarify this issue.\nI guess installing path is depending on the composer library... is it right? :cold_sweat:\nhttps://github.com/wp-cli/server-command/blob/master/features/bootstrap/FeatureContext.php#L649-L651\nIt will be generated composer.json and will be made wordpress folder after composer install...\nTherefore, I'm a bit confused.... reading around here.\nwill keep investigation... \ud83d\ude47 \nhttps://github.com/wp-cli/server-command/blob/master/features/bootstrap/FeatureContext.php#L647. @danielbachhuber Noted on this.\nThank you. \ud83d\ude47 . ",
    "hearvox": "We'll be proposing in this thread new descriptions for the top-level commands. If approved we'll fork/edit the file and submit a pull request. (The description grammar follows WP Code Ref pattern of starting with plural verb, e.g.: \"Retrieves details...\".) Here's the format of my suggestions:\nURL (truth-src)\ncommand | Current description.\nProposed:\nFirst sentence of new description (<80 chars; becomes command post's excerpt).\nSometimes a second sentence to include a link (to Codex or Plugin/Theme Handbook reference).\n. https://github.com/wp-cli/media-command/blob/master/src/Media_Command.php\nwp media | Import new attachments or regenerate existing ones.\nProposed:\nImports files as attachments and regenerates thumbnails.. https://github.com/wp-cli/entity-command/blob/master/src/Menu_Command.php\nwp menu | List, create, assign, and delete menus.\nProposed:\nManages menus for the WordPress site.\nLists, creates, assigns, and deletes the active theme's navigation menus.. (Note: This command has no description now: Don't think it has a truth-src file.\nThere's one for its subcommand:\nhttps://github.com/wp-cli/entity-command/blob/master/src/Network_Meta_Command.php\nShould we create Network_Command.php a file in the entity-command repo?)\nwp network | (none)\nProposed:\nManages meta fields for multisite networks.. https://github.com/wp-cli/entity-command/blob/master/src/Option_Command.php\nwp option | Manage options.\nProposed:\nRetrieves and sets site options, including plugin and WordPress settings.\nSee the Plugin Settings API and the \nTheme Options for more information on adding customized options.. Or do you prefer we submit the proposed description chnages in the individual repos? If so, we will.. miya0001,\n@ako80218 and I wrote improved command descriptions together at WordCamp for Publishers two weeks ago. Since then we've tried in different ways to submit the descriptions, but the procedure has not been clear to us -- we've gotten conflicting instructions.\nOur latest attempt was to:\n Submit the description as an issue in each repo.\n Wait for discussion.\n Revise, if there are suggestions.\n Submit a pull request for the change(s) in each repo..\n@ako80218 and I are NOT submitting pull requests for the same commands: We've split them up: He's submitting some, me others. All the descriptions he and I are submitting as pull requests should be consistent: We wrote them together for consistency.\nAre we still missing a step, or have we followed the required protocol to submit these simple improvements to the command descriptions?\n. Thanks for the reply, @miya0001, and for approving the PRs. Now that we're sure we're following the correct procedure, @ako80218 and I will be submitting more suggested command descriptions as Issues, then as PRs. Appreciate your patience in ushering us thru this process.. @miya0001, thanks for adding links to this issue on my PRs. Once the first of those is merged (all are now Approved), I and @ako80218 will be sure we're doing everything right, then we'll submit more PRs with our already written command descriptions. FYI, mine so far:\nhttps://github.com/wp-cli/rewrite-command/pull/9\nhttps://github.com/wp-cli/package-command/pull/32\nhttps://github.com/wp-cli/media-command/pull/40. Correct, @schlessera:  @hearvox and @ako80218 \nWe wrote them together at a recent WordCamp. Got more PRs ready to submit once we're sure we've done everything right (i.e, after the first is merged).. Added 2 more PRs, both with multiple file changes:\nhttps://github.com/wp-cli/media-command/pull/40\nhttps://github.com/wp-cli/extension-command/pull/39\nStill waiting/hoping for our first merge. If we've done something incorrectly in submitting these new command description, please tell us. (Or maybe this long a post-approval wait for merge is normal, in which case: I just gotta learn more patience.). Long and multiple sentences in the descriptions are a problem because forced line breaks read OK in the code, for example, of this existing description:\nhttps://github.com/hearvox/shell-command/edit/master/src/Shell_Command.php\nBut are grammatically wrong, bad for a11y, and look funny when imported into the Handbook:\nhttps://developer.wordpress.org/cli/commands/shell/. > third person singular instead of the imperative in the descriptions\n@gitlost, We started command descriptions with a third-person-singular verb to match most common case in the Code Reference resource, as in these recent functions: \nhttps://developer.wordpress.org/reference/since/4.8.0/\nAiming for consistency between WP dev resources would be a good target. But maybe more important is consistency within the same resource. The WP-CLI Commands reference varies grammatically tho many sub-command descriptions do start with the imperative:\nhttps://developer.wordpress.org/cli/commands/cache/\nIf that's the choice of the WP-CLI crew, maybe state it somewhere, for when stray Docs folk like myself come wondering thru. Maybe that somewhere could state other WP-CLI docs preferences myself and @ako80218 stumbled upon or were told along the way, like:\n The source of truth for command descriptions are in each repo's /src/ dir.\n The command description's first sentence becomes the post_excerpt in the WP-CLI Commands reference.\n Try to keep first-sentence line lengths <81 chars.\n Avoid unneeded \"the\", \"of\" and \"and\" words when possible.\nHad we known the above earlier we would have saved ourselves many hours and rewrites. I'd be happy to write these up into a file somewhere, if y'all think it's worth it and tell me what file.\n. @gitlost, Hope I didn't offend. I certainly didn't mean to. You brought up a great point about the \"person\" of the starting verb in these command descriptions. The WP-CLI Command reference and the Codex/Code Reference you both the 3rd-singular and the imperative. Both make sense, and whichever way y'all want to go is the way we'll write 'em. But for now, unless we hear different, we'll stick w/ 3rd-singular.. ",
    "ako80218": "@gitlost, @schlessera, @danielbachhuber I have received contradictory advice as to whether we should propose changes to command descriptions here or create a separate issue per proposal. @hearvox and I are happy to proceed either way but we need an agreement from you all as to which way to proceed. Thanks!. ",
    "b4dnewz": "@gitlost thanks for your help, anyway I would like to have another clarification after looking at wp plugin command I noticed there isn't a  \"easy\" way to remove all plugins, I assume is the same for themes, it could be possible archived by doing this:\nwp\u00a0plugin\u00a0delete\u00a0$(wp\u00a0plugin\u00a0list\u00a0--field=name) \nI think it could be useful to have an aliased option to this like --all for both theme and plugin commands.\nedit: maybe it should skip by default the active things to avoid issues with --status=inactive\nWhat do you think?. ",
    "fmonera": "@schlessera There is no such folder for people that installs WP-CLI the official way (downloading the PHAR file).\n$ cd ~/.wp-cli/packages\n-su: cd: /home/nginx/.wp-cli/packages: No such file or directory\nWhat would be the \"wp-cli/packages\" folder to run \"composer update\" for people who downloads the PHAR?\n(sorry if I am not understanding something). @schlessera The packages dir is empty. I suppose it is always empty if you download the PHAR instead of building from source but I don't really know.\n$ wp cli info\nPHP binary:     /opt/php/bin/php\nPHP version:    7.0.23-dev\nphp.ini used:   /etc/php/7.0/fpm/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\nWP_CLI phar path:       /home/nginx\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 1.3.0. ",
    "shadyvb": "Thanks! Main aim here is to ship default wp-cli.yml files with tools like Chassis and VVV so it works out of the box.. I did try that, but piping the config to ssh command via process substitution was the only clean way I could find, but it wasn't supported by sh shell, and frankly I didn't spend that much time trying to make it work since vagrant ssh was good enough.. Thanks for investigating! \n-- separator is for arguments sent to the ssh command itself, not the vagrant ssh which is what -t is for. Unfortunately the docs are lacking couple of arguments to the command, but using cli help should clear this up. \nAnd yes it is working for me, been using it since.. Ah, so it has been removed, okay. Then only the -t needs to go. The name|id is the last argument as you can see ( which is usually default and can even be omitted ) . And we don't have extra SSH args to add AFAIK.\nNice catch!. @schlessera Cool, just issued a PR for updating the docs to reference the new vagrant scheme.\nhttps://github.com/wp-cli/handbook/pull/146. ",
    "gritdigital-mibu": "@wojsmol Still no luck :(\nvagrant@vagrant:/vagrant$ rm /home/vagrant/.wp-cli/cache/core/wordpress-4.8.1-en_GB.tar.gz\nvagrant@vagrant:/vagrant$ php wp-cli.phar --path=public_html core download --force --locale=en_GB --debug\nDebug (bootstrap): No readable global config found (0.089s)\nDebug (bootstrap): No project config found (0.09s)\nDebug (bootstrap): argv: wp-cli.phar --path=public_html core download --force --locale=en_GB --debug (0.091s)\nDebug (bootstrap): ABSPATH defined: /vagrant/public_html/ (0.091s)\nDebug (bootstrap): Running command: core download (0.092s)\nDownloading WordPress 4.8.1 (en_GB)...\nmd5 hash verified: 4c18244563187acdd705ea4d641e07f3\nSuccess: WordPress downloaded.\nvagrant@vagrant:/vagrant$ php wp-cli.phar --path=public_html checksum core\nWarning: File doesn't verify against checksum: wp-admin/includes/dashboard.php\nWarning: File doesn't verify against checksum: wp-admin/includes/class-wp-posts-list-table.php\nWarning: File doesn't verify against checksum: wp-admin/includes/template.php\nWarning: File doesn't verify against checksum: wp-admin/includes/media.php\nWarning: File doesn't verify against checksum: wp-admin/includes/meta-boxes.php\nWarning: File doesn't verify against checksum: wp-admin/nav-menus.php\nWarning: File doesn't verify against checksum: wp-admin/custom-header.php\nWarning: File doesn't verify against checksum: wp-login.php\nWarning: File doesn't verify against checksum: wp-includes/class-wp-customize-manager.php\nWarning: File doesn't verify against checksum: wp-includes/formatting.php\nWarning: File doesn't verify against checksum: wp-includes/class-wp-xmlrpc-server.php\nWarning: File doesn't verify against checksum: wp-includes/class-phpmailer.php\nWarning: File doesn't verify against checksum: wp-includes/functions.php\nWarning: File doesn't verify against checksum: wp-includes/media-template.php\nWarning: File doesn't verify against checksum: wp-includes/media.php\nError: WordPress install doesn't verify against checksums.. Hi @schlessera \nI've just extracted the wordpress-4.8.1-en_GB.zip file manually on the box and the files are all correct and the archive size matches the download available from https://en-gb.wordpress.org/wordpress-4.8.1-en_GB.zip\nI think you're right about it being environment specific as I did successfully update another project with no problems. I have however seen this problem occur on multiple projects but they both have similar environments.\nI just deleted the cached downloads and tried it again but I'm still getting file mismatches and an empty wp-login.php file.\n\nI'm keen to workout what's going on so I'll feedback to you if I find anything.\nCheers\n. @schlessera I can confirm this is environment specific.\nI believe (but not certain) that it's related to the \"winnfsd/vagrant-winnfsd\" Vagrant plugin which adds support for NFS on Windows. . ",
    "OnnoGeorg": "Same problem here on Linux Mint and PHP 5.6.\n$ lsb_release -a  \nNo LSB modules are available.  \nDistributor ID: LinuxMint  \nDescription:    Linux Mint 18.1 Serena  \nRelease:    18.1  \nCodename:   serena\n$ php -v\nPHP 5.6.31-2+ubuntu16.04.1+deb.sury.org+1 (cli) \nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n    with Xdebug v2.5.5, Copyright (c) 2002-2017, by Derick Rethans\n$ wp --version\nWP-CLI 1.3.0. Yes, the problem is with the US package - at least the  German one runs well with wp core download --locale=de_DE\nThe Swedish as well as @ZeroX66 wrote.. ",
    "ZeroX66": "This will work\nwp --allow-root core download --locale=sv_SE\nThe problem is with US files .... I think the problem might be the arguments in this line\ntar xz --strip-components=1 --directory=%s -f $tarball\nWhen you use wp core download you get a temp archive in /tmp folder. Try to unpack it with these arguments like\ntar xz --strip-components=1 --directory=wordpress -f your_archive.tar.gz\nI can't make it work , but if I use a much simple line like this it's work.\ntar -xvzf wp_59c228df6f742.tar.gz\nI think the US package have som issue here .... Can we made so WP core download use default locale instead of US?. I agree, but it should be some misbehavior in the argument vs the package. Like I told before I can use \"tar\" with a simple line. The arguments troubled it up .... Can we change the default locale to our own lang?. This is bad coz we use Easy Engine and EE use wp-cli to get the WordPress. So maybe we should talk with these who update WP in US. \nWhat is the differens between a sv/de vs us, I wonder?\n. If I use arg --version it works\nwp --allow-root core download --version=\"4.8.1\"\n. @miya0001 \nI try to add that file , but it seems to still get the us. Do I need to restart something?\n. @miya0001 \nGreat, now it works .... Anyway, I think it still some troubling with the package so can you do try-catch is the best now otherwise we all need to change the locale.\nThe best solution is WP go back in US and then create a new package like the others :). @howinator , I think you misunderstood me. I told that was fixed coz it works for me if I change the locale to Sweden. The problem with en_US is still there.. Hm, if I use (en_US)\nwp --allow-root core download\nI still have som trouble here ...\nError: Couldn't extract WordPress archive. unable to decompress gzipped phar archive \"/tmp/wp_59c3b83ee90f5.tar.gz\" to temporary file\n. Hm, It's still some trouble with it. I change to this and it works with \"nightly\".\nwp cli update --nightly. ",
    "andreapinti": "Hi,\nsame problem here (ubuntu 14)\nTried with php 5.6, php 7.0 and php 7.1. @gitlost sure\nPHP 7.1.9-1+ubuntu14.04.1+deb.sury.org+1 (cli) (built: Sep  2 2017 06:17:11) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.1.9-1+ubuntu14.04.1+deb.sury.org+1, Copyright (c) 1999-2017, by Zend Technologies\nPHP 7.0.21-1+ubuntu14.04.1+deb.sury.org+1 (cli) (built: Jul  6 2017 09:38:10) ( NTS )\n Copyright (c) 1997-2017 The PHP Group\n Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n     with Zend OPcache v7.0.21-1~ubuntu14.04.1+deb.sury.org+1, Copyright (c) 1999-2017, by Zend Technologies\nPHP 5.6.31-4+ubuntu14.04.1+deb.sury.org+4 (cli) \n Copyright (c) 1997-2016 The PHP Group\n Zend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\nAnyway i changed the locale to it_IT and now it works.. ",
    "howinator": "I hate to do a me too, but @ZeroX66 said it was fixed which is not our experience. We're definitely still getting a failure on Ubuntu.. @ZeroX66 ah that makes more sense.\n@danielbachhuber of course\nphp --version\nPHP 5.6.31-4+ubuntu14.04.1+deb.sury.org+4 (cli)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\ntar --version\n```\ntar (GNU tar) 1.27.1\nCopyright (C) 2013 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later http://gnu.org/licenses/gpl.html.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nWritten by John Gilmore and Jay Fenlason.\n```\nLet me know if you need anything else.. Getting much the same\n```\nubuntu@ip-172-31-42-90:/tmp$ php -r \"new PharData( 'wp_59c2c0dea6e1f.tar.gz' );\"\nPHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'unable to decompress gzipped phar archive \"/tmp/wp_59c2c0dea6e1f.tar.gz\" to temporary file' in Command line code:1\nStack trace:\n0 Command line code(1): PharData->__construct('wp_59c2c0dea6e1...')\n1 {main}\nthrown in Command line code on line 1\nubuntu@ip-172-31-42-90:/tmp$ php --version\nPHP 5.6.31-4+ubuntu14.04.1+deb.sury.org+4 (cli)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with Zend OPcache v7.0.6-dev, Copyright (c) 1999-2016, by Zend Technologies\n```. ",
    "Santana1053": "php -r \"new Phardata('wp_59c2e507dbd4e.tar.gz');\"\n```\nPHP Fatal error:  Uncaught UnexpectedValueException: unable to decompress gzipped phar archive \"/tmp/wp_59c2e507dbd4e.tar.gz\" to temporary file in Command line code:1\nStack trace:\n0 Command line code(1): PharData->__construct('wp_59c2e507dbd4...')\n1 {main}\nthrown in Command line code on line 1\nphp --version\nPHP 7.1.9-1+ubuntu14.04.1+deb.sury.org+1 (cli) (built: Sep  2 2017 06:17:11) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.1.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.1.9-1+ubuntu14.04.1+deb.sury.org+1, Copyright (c) 1999-2017, by Zend Technologies\n    with Xdebug v2.5.5, Copyright (c) 2002-2017, by Derick Rethans\n``. Could it be some issue with the WP archive? wp core download --version=4.8.1 --forcesucceeds. wp core download --version=4.8.2 --force` fails.. ",
    "Codestar": "Thanks for effort @miya0001 . ",
    "vintagesucks": "Thanks for the fix.  \ud83d\udc4d \nIs there any ETA for a new stable release or should I use the nightly version in my Travis builds for now? @danielbachhuber \n\nStable\nDownloading WordPress 4.8.2 (en_US)...\nmd5 hash verified: 2e8744a702a3d9527782d9135a4c9544\nError: Couldn't extract WordPress archive. unable to decompress gzipped phar archive \"/tmp/wp_59c3b89bba349.tar.gz\" to temporary file\nNightly\nDownloading WordPress 4.8.2 (en_US)...\nmd5 hash verified: 2e8744a702a3d9527782d9135a4c9544\nWarning: PharData failed, falling back to 'tar gz' (unable to decompress gzipped phar archive \"/tmp/wp_59c3ba8e8d989.tar.gz\" to temporary file)\nSuccess: WordPress downloaded.. ",
    "chriscroome": "Just to say that I have also hit this issue on Debian Stretch:\n```\nwp --allow-root core download\nDownloading WordPress 4.8.2 (en_US)...\nmd5 hash verified: 2e8744a702a3d9527782d9135a4c9544\nError: Couldn't extract WordPress archive. unable to decompress gzipped phar archive \"/tmp/wp_59c96e95f100a.tar.gz\" to temporary file\nwp --allow-root core download --locale=en_GB\nDownloading WordPress 4.8.2 (en_GB)...\nmd5 hash verified: 28571832a9c0c95cbc8767a896c987d4\nSuccess: WordPress downloaded.\n```. @gitlost sorry not to have replied sooner. the server is running PHP7.0 from Debian Stretch:\nphp --version\nPHP 7.0.19-1 (cli) (built: May 11 2017 14:04:47) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.0.19-1, Copyright (c) 1999-2017, by Zend Technologies\n. Could it be an issue with not having write permissions for the TMPDIR? . Do'h, thanks \ud83d\ude42 .. ",
    "matthewsuan": "i had this problem as well. the --version=4.8.1 fix worked for me.. ",
    "surrealchemist": "We saw this on our Ubuntu 16/ php70 server last week, and today a developer got it while trying to provision a VCCW vagrant environment. \nHad to manually do 4.8.1 to get around the issue. \nAlso the message \"unable to decompress\" was misleading at first. It would be more useful if it said why exactly it is having a problem. At first we thought it was permissions and had to go through checking /tmp etc. and disk space till we realized the file was in /tmp and we could untar it fine by hand. . ",
    "TheSkyHeart": "sorry just noticed someone else posted the same issue. ",
    "Dan33l": "Thank you for the link. It is written :\n\nWP-CLI has a series of global parameters (e.g. --path= and --user=) which work with all commands. They are called global parameters because they affect how WP-CLI interacts with WordPress, and have the same behavior across all commands.\n\nThis sentence should be added also at the top of page https://developer.wordpress.org/cli/commands/. ",
    "n8finch": "\nSounds good. To address this issue fully, it'd be great to have someone spend ~30 minutes reviewing arguments for all bundled WP-CLI commands and produce a list of a dozen mapping suggestions we can start with.\n\nJust to clarify, are you looking for parameters only, or subcommands as well? \nFor example:\n\nSubcommand should be: wp cli check-update\nArray could include: 'check' => 'check-update' , 'check update' => 'check-update'\nErrors received:\nError: 'check' is not a registered subcommand of 'cli'. See 'wp help cli' for available subcommands.\n\nOr\n\nCommand with parameters should be: wp core download --locale=en --version=4.2\nArray could include: 'language' => 'local' , 'v' => 'version'\nError received: \nError: Parameter errors: unknown --language parameter\nError: Parameter errors: unknown --v parameter\n\nIf those are the droids--I mean arrays--you're looking for, I'd be happy to take this on and get the associative array rolling. \ud83e\udd13 \n. Great! I'll get on that.. Sounds good, and thanks!. ",
    "erayd": "Fixed in justinrainbow/json-schema#455.. ",
    "MoreKoo": "Thanks for the link, Daniel. Actually skipping plugins fixed the issue, so there's a conflict somewhere..... ",
    "gziolo": "I had the same issue. Executing composer dump-autoload solved it.. ",
    "treehousetim": "I too need the directory name so I can check permissions.  this error is worthless.. ",
    "uglyrobot": "We are running into issues with network_site_url() function in multisite as well. It always returns http even when site is https. In this case it's happening with plugins that rely on that when commands are triggered or cron is run via wp cli.. ",
    "eric-gagnon": "Sorry, it was not appropriately filed but I think it is a bug because the constructed plugin generated a file that was not working as expected (failed build in CircleCI). This is reproductible. But I do realise now that it should have been reported here : https://github.com/wp-cli/scaffold-package-command.. ",
    "apb1963": "Yes.  I wrote a bash script to do exactly that, and so I reinstall over and over for testing purposes.  I do an apt-get purge prior to reinstalling each time, and I don't add any plugins except woocommerce & storefront.\nHowever, based on your question I did it differently this time (i.e. w/out my script) on the command line and so get a different error than originally stated.  Although I see what's wrong, I don't know how or the best way to fix it.\nIt wants /etc/wordpress/config-.php which of course doesn't exist, instead of /etc/wordpress/config-localhost.php - as that file actually exists.  Presumably it needs HTTP_HOST to have a value which is why it's looking for the wrong file I guess.  I don't know why it doesn't have a value.... other than the fact I'm not calling it through a browser; which is kind of the point of wp-cli, yes?  So it's possible there are actually two potentially related bugs - the original one I first reported and now this second one.\nsudo apt install wordpress\nReading package lists... Done\nBuilding dependency tree     \nReading state information... Done\nThe following additional packages will be installed:\n  wordpress-l10n\nSuggested packages:\n  php-ssh2\nThe following NEW packages will be installed:\n  wordpress wordpress-l10n\n0 upgraded, 2 newly installed, 0 to remove and 0 not upgraded.\nNeed to get 0 B/7,871 kB of archives.\nAfter this operation, 48.6 MB of additional disk space will be used.\nDo you want to continue? [Y/n] \nSelecting previously unselected package wordpress.\n(Reading database ... 241392 files and directories currently installed.)\nPreparing to unpack .../wordpress_4.4.2+dfsg-1ubuntu1_all.deb ...\nUnpacking wordpress (4.4.2+dfsg-1ubuntu1) ...\nSelecting previously unselected package wordpress-l10n.\nPreparing to unpack .../wordpress-l10n_4.4.2+dfsg-1ubuntu1_all.deb ...\nUnpacking wordpress-l10n (4.4.2+dfsg-1ubuntu1) ...\nProcessing triggers for man-db (2.7.5-1) ...\nSetting up wordpress (4.4.2+dfsg-1ubuntu1) ...\nAdded to /var/lib/wordpress/wp-content/themes: index.php twentyfifteen twentyseventeen twentysixteen \nAdded to /var/lib/wordpress/wp-content/plugins: akismet hello.php index.php \nAdded to /var/lib/wordpress/wp-content/languages: admin-ar.mo admin-bs_BA.mo admin-ca.mo admin-cy.mo admin-da_DK.mo admin-de_DE.mo admin-el.mo admin-es_ES.mo admin-es_PE.mo admin-et.mo admin-eu.mo admin-fa_IR.mo admin-fi.mo admin-fr_FR.mo admin-gl_ES.mo admin-he_IL.mo admin-hr.mo admin-it_IT.mo admin-ja.mo admin-ko_KR.mo admin-my_MM.mo admin-network-ar.mo admin-network-bs_BA.mo admin-network-ca.mo admin-network-cy.mo admin-network-da_DK.mo admin-network-de_DE.mo admin-network-el.mo admin-network-es_ES.mo admin-network-es_PE.mo admin-network-et.mo admin-network-fa_IR.mo admin-network-fi.mo admin-network-fr_FR.mo admin-network-gl_ES.mo admin-network-he_IL.mo admin-network-hr.mo admin-network-it_IT.mo admin-network-ja.mo admin-network-ko_KR.mo admin-network-my_MM.mo admin-network-ru_RU.mo admin-network-sk_SK.mo admin-network-sl_SI.mo admin-network-sq.mo admin-network-sr_RS.mo admin-network-sv_SE.mo admin-network-ug_CN.mo admin-network-zh_CN.mo admin-network-zh_TW.mo admin-ru_RU.mo admin-sk_SK.mo admin-sl_SI.mo admin-sq.mo admin-sr_RS.mo admin-sv_SE.mo admin-ug_CN.mo admin-zh_CN.mo admin-zh_TW.mo ar.mo bg_BG.mo bn_BD.mo bs_BA.mo ca.mo ckb.mo continents-cities-bg_BG.mo continents-cities-bs_BA.mo continents-cities-cs_CZ.mo continents-cities-cy.mo continents-cities-da_DK.mo continents-cities-de_DE.mo continents-cities-el.mo continents-cities-en_CA.mo continents-cities-es_PE.mo continents-cities-et.mo continents-cities-eu.mo continents-cities-fa_IR.mo continents-cities-fi.mo continents-cities-fr_FR.mo continents-cities-gd.mo continents-cities-he_IL.mo continents-cities-hr.mo continents-cities-hu_HU.mo continents-cities-it_IT.mo continents-cities-ja.mo continents-cities-ka_GE.mo continents-cities-ko_KR.mo continents-cities-lv.mo continents-cities-mk_MK.mo continents-cities-my_MM.mo continents-cities-nb_NO.mo continents-cities-nn_NO.mo continents-cities-pl_PL.mo continents-cities-pt_BR.mo continents-cities-pt_PT.mo continents-cities-ro_RO.mo continents-cities-ru_RU.mo continents-cities-sk_SK.mo continents-cities-sl_SI.mo continents-cities-sq.mo continents-cities-sr_RS.mo continents-cities-su_ID.mo continents-cities-sv_SE.mo continents-cities-ta_LK.mo continents-cities-tr_TR.mo continents-cities-ug_CN.mo continents-cities-vi.mo continents-cities-zh_CN.mo continents-cities-zh_TW.mo cs_CZ.mo cy.mo da_DK.mo de_DE.mo el.mo en_CA.mo eo.mo es_CL.mo es_ES.mo es_PE.mo et.mo eu.mo fa_IR.mo fi.mo fr_FR.mo gd.mo gl_ES.mo he_IL.mo hr.mo hu_HU.mo id_ID.mo it_IT.mo ja.mo jv_ID.mo ka_GE.mo ko_KR.mo lv.mo mk_MK.mo ms_MY.mo my_MM.mo nb_NO.mo nl.mo nl_NL.mo pl_PL.mo pt_BR.mo pt_PT.mo ro_RO.mo ru_RU.mo ru_UA.mo si_LK.mo sk_SK.mo sl_SI.mo sq.mo sr_RS.mo su_ID.mo sv_SE.mo sw.mo ta_LK.mo th.mo tr_TR.mo ug_CN.mo uk.mo ur.mo vi.mo zh_CN.mo zh_HK.mo zh_TW.mo \nSetting up wordpress-l10n (4.4.2+dfsg-1ubuntu1) ...\napb@yellow:~$ sudo wp option update home http://localhost --path=/usr/share/wordpress --allow-root\nPHP Notice:  Undefined index: HTTP_HOST in phar:///data/local/bin/wp/php/WP_CLI/Runner.php(1070) : eval()'d code on line 10\nNeither /etc/wordpress/config-.php nor /etc/wordpress/config-.php could be found.  Ensure one of them exists, is readable by the webserver and contains the right password/username.\napb@yellow:/usr/share/wordpress$  sudo cat wp-config.php\nwp-config.php pasted below (because oddly, .php uploads are not supported by github and changing the extension to .txt doesn't fool it.)\n```\nphp\n/***\n * WordPress's Debianised default master config file\n * Please do NOT edit and learn how the configuration works in\n * /usr/share/doc/wordpress/README.Debian\n ***/\n\n<p/ Look up a host-specific config file in\n * /etc/wordpress/config-.php or /etc/wordpress/config-.php\n /\n$debian_server = preg_replace('/:./', \"\", $_SERVER['HTTP_HOST']);\n$debian_server = preg_replace(\"/[^a-zA-Z0-9.-]/\", \"\", $debian_server);\n$debian_file = '/etc/wordpress/config-'.strtolower($debian_server).'.php';\n/ Main site in case of multisite with subdomains /\n$debian_main_server = preg_replace(\"/^[^.]./\", \"\", $debian_server);\n$debian_main_file = '/etc/wordpress/config-'.strtolower($debian_main_server).'.php';\nif (file_exists($debian_file)) {\n    require_once($debian_file);\n    define('DEBIAN_FILE', $debian_file);\n} elseif (file_exists($debian_main_file)) {\n    require_once($debian_main_file);\n    define('DEBIAN_FILE', $debian_main_file);\n} elseif (file_exists(\"/etc/wordpress/config-default.php\")) {\n    require_once(\"/etc/wordpress/config-default.php\");\n    define('DEBIAN_FILE', \"/etc/wordpress/config-default.php\");\n} else {\n    header(\"HTTP/1.0 404 Not Found\");\n    echo \"Neither $debian_file nor $debian_main_file could be found.  Ensure one \nof them exists, is readable by the webserver and contains the right password/username.\";\n    exit(1);\n}\n/ Default value for some constants if they have not yet been set\n   by the host-specific config files /\nif (!defined('ABSPATH'))\n    define('ABSPATH', '/usr/share/wordpress/');\nif (!defined('WP_CORE_UPDATE'))\n    define('WP_CORE_UPDATE', false);\nif (!defined('WP_ALLOW_MULTISITE'))\n    define('WP_ALLOW_MULTISITE', true);\nif (!defined('DB_NAME'))\n    define('DB_NAME', 'wordpress');\nif (!defined('DB_USER'))\n    define('DB_USER', 'wordpress');\nif (!defined('DB_HOST'))\n    define('DB_HOST', 'localhost');\nif (!defined('WP_CONTENT_DIR') && !defined('DONT_SET_WP_CONTENT_DIR'))\n    define('WP_CONTENT_DIR', '/var/lib/wordpress/wp-content');\n/ Default value for the table_prefix variable so that it doesn't need to\n   be put in every host-specific config file /\nif (!isset($table_prefix)) {\n    $table_prefix = 'wp_';\n}\nif (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https')\n    $_SERVER['HTTPS'] = 'on';\nrequire_once(ABSPATH . 'wp-settings.php');\n?>\n```\n. Your comment here: https://github.com/wp-cli/wp-cli/issues/4073 is likely applicable.  I just filed a bug with launchpad, and in the meantime I'll give your suggestion a try and add it to the config file and see what happens.  . I think you're referencing what appears to be a single hyphen as opposed to double?  No, it's a double, that's apparently a copy/paste translation issue with this forum/github.com software.  --dbhost  has two hyphens.  It shows up that way in the preview tab... lets see if it stays that way.... Hmm.  It did.. I don't know why it showed up that way... but there are two hyphens as required.  Lets try again:  sudo wp config create --path=/usr/local/src/myhost.mydomain --url=https://myhost.mydomain --dbhost=myhost.mydomain --dbname=myhostDBName --dbuser=apb --dbpass=123 --allow-root\nERROR 1045 (28000): Access denied for user 'apb'@'localhost' (using password: YES)\n. Well after I went through the signup process, I went there, and have been sitting there, but I don't see you.. Reproducing this bug requires a similar if not identical environment.  \nSo, installing ubuntu 16.04.3 is the first step, although skipping this step until later is a possibility.  i.e. If you can reproduce without having to install that OS, then you can skip installing it.  If not, then installing ubuntu is the only way to accurately attempt reproduction of this bug. \nThe next step to reproduce requires creating the directory.  i.e.  mkdir /usr/local/src/myhost.mydomain\nThen, using wp-cli install wordpress into that directory.\nThen, remove the config file i.e. rm /usr/local/src/myhost.mydomain/wp-config.php or else wp-cli complains (in the next step below) that it already exists and I don't know a way to force an overwrite using wp-cli.   Maybe you do.\nNext, run the given command (sudo wp config create --path=/usr/local/src/myhost.mydomain --url=https://myhost.mydomain --dbhost=myhost.mydomain --dbname=myhostDBName --dbuser=apb --dbpass=123 --allow-root) to recreate the config file (because I have different parameters then the stock config file and I need to change it).  Substitute your own existing non-root user for \"apb\". \nNote that replacing \"apb\" with \"root\" works, but leaves me with the wrong user (root) in the wp-config.php file.  Obviously I can post process it with various tools, but I think fixing the bug is the better solution.  YMMV. Hmm... I thought that replying to the email I received would end up posting it here, but apparently not.  So I'll paste my emails next.... On 11/13/2017 04:45 PM, Daniel Bachhuber wrote:\n\nThen, remove the config file i.e. rm /usr/local/src/myhost.mydomain/wp-config.php or else wp-cli complains (in the next step below) that it already exists and I don't know a way to force an overwrite using wp-cli. Maybe you do.\n\nWhy does wp-config.php already exist? Can you please share exact output of all commands you've run?\n\nSorry, I forgot to mention that I copy an existing wp install to the above path, so the wp-config.php is from that copy, which is of course not relevant to the current install.  In any event, I remove it before doing anything further. \nWhen I first started I didn't know that it would use a cached copy of wp instead of downloading again, so I felt that copying would be more efficient than re-downloading it.  I haven't had a chance to go back and change it and I don't think it makes much difference.  Let me know if you do, this is what I would do if so, unless it's wrong:\nsudo -u apb wp core download --path=/usr/local/src/myhost.mydomain --force --version=latest --allow-root\nThe intent is to have a pristine, unaltered site /usr/share/wordpress and then also create a template site under /usr/local/src/template which includes woo, storefront and whatever other plugins, then copy it to another installation site - say maybe for example \"onions.mydomain\" and change the relevant parameters to match.\nAlthough I'm specifying multi-site so far, I don't think I'll actually be using it.  I'm trying to plan for the future, with the hope & expectation that the store will be wildly successful.  So, towards that end I want each site to have its own DB rather than sharing the same DB, which is what multi-site does if I understand correctly.  That way if a particular site gets significant traffic I can move it to its own server without too much hassle I think.  That's the current thinking anyway.\n\nIf not, then installing ubuntu is the only way to accurately attempt reproduction of this bug.\nIf this is the case, then the bug is with Ubuntu and not WP-CLI.\n\nWith all due respect, I disagree.  To use an unrelated and contrived example, (but which should help to clarify my point) if ubuntu requires that you use 'open(filename, \"mode\")' but you use 'open(\"mode\", filename)' instead because that's how OS-X does it, then the bug is not with ubuntu, as you have failed to provide ubuntu with what it requires.  Similarly, if ubuntu adds something to its environment that causes a problem for wp, it's not a bug in ubuntu, it's a failure of the application to acknowledge reality.  There are of course exceptions to just about every rule. \nThe problem may very well be something that's different in my environment that I'm unaware of, seeing as I'm relatively new to wp in all its forms.  The problem is, I don't know where I should be looking or what I should be looking for.\nIf you say wp doesn't explicitly tack on the @localhost, I believe you.  But, that still leaves the question of where the heck it's coming from.  ubuntu doesn't just randomly insert things, there's got to be a reason.  As the error occurs outside of my script as well as inside, the error can not possibly be with my bash script - i.e. I'm not using the script and still get the error).  If you're up to it, I can give you an account on my machine if you think investigating up close would be helpful.\nI can workaround the problem by using root instead of apb, but then I have to modify the wp-config.php file after it's generated as it stuffs the dbuser (now root instead of apb) into the file.  It's not a big deal, a couple of simple sed statements and finished but it's really not how it should be done in my opinion.  I guess I can repress my sensibilities if I have to.\nWith all that said --skip-check allows me to bypass the issue.  Unfortunately, when I do so, it does not include any of:\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'root');\ndefine('DB_PASSWORD', '123');\ndefine('DB_HOST', 'localhost');\ndefine('WP_CONTENT_DIR', '/usr/share/wordpress/wp-content');\nin the file.\nI can certainly add them to my script easily enough, but I thought I'd mention it since I'm not sure what behavior to expect when using --skip-check.\nThank you. \nOn 11/13/2017 11:58 PM, gitlost wrote:\n\nMy guess is that your mysql server mysqld as at localhost and the mysql user apb does not exist on it or has insufficient privileges - see https://dev.mysql.com/doc/refman/5.7/en/adding-users.html\n\nThanks for your response.  The mysqld server is in fact at localhost and to my knowledge, is correct.  You are correct in that apb@localhost does not exist.  \nHowever, that's the correct answer to a question that wasn't asked. \nThe question was, why is \"@localhost\" getting tacked on whether I want it or not?  apb@localhost@localhost is not a valid user, nor will nor should it ever be.\nThe simple solution is to add apb@localhost as a valid user, but considering the administrator should be at apb@myhost.mydomain, the simple solution isn't a solution at all.  And specifying apb@myhost.mydomain ends up as apb@myhost.mydomain@localhost so that solution is not helpful either.\nWith that said, this is where my inexperience comes in and you've started my brain juice churning and now you've got me wondering if I'm taking the right approach forcing/requiring/expecting the admin to be at the same domain.  Perhaps I should simply add apb@localhost as the administrator of myhost.mydomain and xyz@localhost as admin of myhost2.mydomain, and so on.  That would circumvent the issue I think.  So that might be the easiest work-around until someone can figure out why it's adding @localhost for no apparent reason.  I'll give it a try.\nThank you!\n. > The mysql user and mysql host are only used by WordPress to connect to the database.They have nothing to do with WordPress users or your site's domain.\nI agree with the rest of what you've stated and am aware of it, thank you.  But in regard to the above quoted statement... Hmmm.  You may have hit the nail on the head.  I am in fact a bit confused about that point.  \nDoes that mean all I need is root@localhost as my user for all WordPress databases?  So I actually don't need different wp-config.php files for each one??  Well actually... I kinda do.  If DB1 becomes ultra-popular, I may need to tune the memory limit and/or other parameters for that one DB alone.  Right?  I guess at that point I'd move that one DB to another server I suppose.  Hmmm - I guess it depends on details of the future situation; hard to plan for that.\nSo, following this to its conclusion to specify/assign/create/etc. a different admin for each WP DB (and in truth, I'm not clear at this point what those admins would be doing exactly) I guess I'd use \"wp user create\" and \"wp user add-cap\" to create the admin user?  And presumably the potential capabilities are documented somewhere.  Or maybe it's add-role I need?  Guess I have some reading to do.  Focused links are appreciated.\nThanks for pointing me in the right direction!. ",
    "dingo-d": "Woops, sorry, will ask in the correct place :). ",
    "prajapatisagar": "Hi @ibertrix \nwp db size --tables only displays WordPress core tables. For list all the tables you will need to run wp db size --tables --all-tables command.\nThanks. Hi @ibertrix \nDifference:\n--all-tables-with-prefix: List all tables that match the table prefix even if not registered on $wpdb.\n--all-tables: List all tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --all-tables-with-prefix.\nPlease check https://developer.wordpress.org/cli/commands/db/size/ for more detail.\nThanks\n. ",
    "elTiempoVuela": "VIsion Remota Opina. A\u00f1adir Repositorios... Loading composer repositories with package information\nUpdating dependencies (including require-dev)\nPackage operations: 0 installs, 1 update, 0 removals\nWriting lock file\nGenerating autoload files. Publicamos Desde VISION REMOTA\n. ",
    "janw-me": "Check;\nhttps://github.com/wp-cli/ideas/issues/69\nPS It might be a bit hard to explain. But the fix is a simple check which I highly doubt would give problems.. ",
    "kimipooh": "Thank you for your reply.\nI understood how to create wp-config.php with the proxy setting by your comment.\nThis is great information!\nCould you change, delete, or add the wp-config.php setting as the command?\nIt seems that \"wp config create\" command cannot use in case of existing wp-config.php.\n. Sound good!\nThank you for the comment!\nAt least, I will use --extra-php command when generating new WordPress using WP-CLI :-)\n. ",
    "grantpalin": "Added PRs for wp-cli, core-command, and find-command respectively.\nMade numerous in-code changes on the first, as outlined above, but only readme edits on the latter two as pointed out. However there are code changes doable in the later two as well of a similar nature to those in wp-cli; I can push those changes up too if needed, though the readme only may have been specified for a reason.\nThe readme for super-admin-command was updated already, yet there are code changes possible similarly to the rest if desired.. @danielbachhuber The changes do seem to fall into three different buckets:\n/ (readme and composer)\n/features\n/php\n/utils\nCould do it bucket-by-bucket. Alternatively could do code-based changes separate from documentation-based. What say you?. When I make multiple commits on the same branch of my fork, they are auto pushed to the same PR. I don't get the chance to do separate PRs.. Maybe I'll start over with this pr. ",
    "bethannon": "Hi Alain! You added the Hacktoberfest label recently, but the trac ticket looks closed. I'm not much for coding, but I'm happy to help with documentation editing. Still need help on this?. ",
    "zmoazeni": "Seconding @davidbarratt here.\n\nIt's still a vector for privilege escalation.\n\nCan you explain this more? I'm running into this when I'm already root. Why would wp-cli try to protect me from a privilege I already have?. @danielbachhuber Sure, and I appreciate the default set as it is. I wouldn't want to change that.\nBut shouldn't I, the person with root access, be able to make that choice to change that default without making each invocation of wp-cli more cumbersome?\nI'm in the same boat as @davidbarratt using docker. I don't care if unknown third-party code is running as root in this case. That is already a risk I'm willing to accept.. ",
    "Charl13": "+1 for adding a environment variable for this. I would add it to my default docker template.. ",
    "wstoettinger": "@danielbachhuber i don't understand your objections to adding a config option when it is anyways already possible to run it with the '--allow-root' option. Anyone can add this option to his commands as should anyone be able to add this to a config file. Of course the user should be made aware of the implications but it should in the end be the user's choice to add it to the config file or not.\nIn times of Docker and CI your default response that it's discouraged, shutting down all further discussions seems a bit ignorant to the whole concept of docker.. ",
    "michaelzangl": "When using wp-cli in scripts, I always add --allow-root. This won't do any harm (I assume the people starting the scripts know what they are doing) and allows them to be run in docker containers without problems.. ",
    "gmazzap": "@danielbachhuber  I spend an hour reading docs before opening the issue... With last changes everything is clear. Thanks!. PS: Might I suggest to use:\nphp\n$flag = false !== filter_var( $flag, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE );\nto validate a flag?\nThis way --aflag=false, --aflag=no, --aflag=off, and  --aflag=0  would be considered false, and anything else would be true.\nhttps://3v4l.org/lSZaM. ",
    "atanas-angelov-dev": "My proposed PR: wp-cli/entity-command#241. ",
    "lucidheart": "Thanks for the suggestion about possible mbstring issues/requirements in the plugins.  If the plugins required mbstring, wouldn't that mean that the WordPress website would be broken on the front-end as well?   Because, from what I can tell, all of the plugins were functioning just fine from the front facing website, as well as from the wp-admin interface.\nFor the record.  Here are the plugins I have installed.\n  I akismet  4.0.2\n  A jetpack  5.6.1\n  A woocommerce  3.2.6\n  A woocommerce-gateway-paypal-powered-by-braintree  2.0.4\n  A woocommerce-services  1.9.1\nAnd the themes, for completeness.\n2 installed themes:\n  A galleria 2.2.12\n  P storefront 2.2.5\n. ",
    "sandrodz": "ah, got it, opening in correct repo.. ",
    "bendqh": "I saw that in 2016 there was a try to have an apt command:\napt-get install php-wpcli\n\nI didn't understand why it wasn't approved (?) but I think the original examples like apt-get install wp-cli or apt-get install wpcli are best.\nhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=692353. ",
    "thrijith": "@schlessera  sorry for the mess above i closed the pr, will create a new one and submit again . ok @schlessera  . no problem @gitlost  will remove the header.\n. ok @gitlost will work on it then. cool didn't know about that thanks. @schlessera sure, let me try that if I am not able to do that will let you know.. >Error: config file does not exist.\n@swissspidy what needs to be done in test cases to add a config? I guess that's why tests are failing. Link\n. @schlessera  Thanks for the input. \ud83d\ude03 \nSo something like --scope=global to run the command on specific config?. Closing, for now, will reopen or create a new one when I am done with changes.. ok @gitlost  on it . thanks @gitlost for this\nif ( ! $shell && Utils\\is_windows() ) {\n    $shell = getenv( 'ComSpec' );\n}\ni didn't know about this.. I tested the code on Windows 7 ( installed VirtualBox just for that ) works perfectly:100: . Ok. Ah \ud83d\ude04 . @swissspidy I've updated config file name but doesn't seem to work as expected also checked in local setup but tests aren't passing, also this build hasn't started yet \ud83d\ude15 . @swissspidy Could you please help with the tests? Also, let me know if something else has to be added or updated in this PR.. @schlessera I've done changes for other suggestions.\nhttps://make.wordpress.org/cli/handbook/config/\n@staging:\n    ssh: wpcli@staging.wp-cli.org\n    user: wpcli\n    path: /srv/www/staging.wp-cli.org\nI am not sure about other params in the doc for http and url. Will they be added like rest of them?\nAnd if --grouping is provided we will ignore the rest of the input?. ",
    "killown": "this worked after you tip: wp post term set 1000 category test --allow-root --path='/var/www/html' thanks a lot\nOn Jan 10 2018, at 7:37 pm, gitlost notifications@github.com wrote:\n\nYes for hierarchical taxonomies such as categories need to give ids due to this wp-includes/post.php#L4131 (https://github.com/WordPress/WordPress/blob/master/wp-includes/post.php?recipient=reply%2B00005f855e0cdd6dbe7bcf037a6f36511e9d55abde806b8b92cf00000001166e49aa92a169ce111c4756%40reply.github.com#L4131) check casting the array to ints.\nSo need to update the docblock, and check and give warnings (errors?) if given non-int category ids., for both post create and post update.\nThanks for raising the issue @killown (https://github.com/killown?recipient=reply%2B00005f855e0cdd6dbe7bcf037a6f36511e9d55abde806b8b92cf00000001166e49aa92a169ce111c4756%40reply.github.com) !\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/wp-cli/wp-cli/issues/4605?recipient=reply%2B00005f855e0cdd6dbe7bcf037a6f36511e9d55abde806b8b92cf00000001166e49aa92a169ce111c4756%40reply.github.com#issuecomment-356744861), or mute the thread (https://github.com/notifications/unsubscribe-auth/AABfhcxoJWTooU3TR_24Kdxo_9GxJilCks5tJS2qgaJpZM4RXug0?recipient=reply%2B00005f855e0cdd6dbe7bcf037a6f36511e9d55abde806b8b92cf00000001166e49aa92a169ce111c4756%40reply.github.com).\n\n. The issue is that I have to set meta in hundred of posts and every post has 10 meta values and for every post I need to execute one line from wp cli and every line takes almost 2 seconds to finish, so the issue here is performance, if possible, could you implement this feature?\nOn Jan 19 2018, at 8:03 am, gitlost notifications@github.com wrote:\n\nHi @killown (https://github.com/killown?recipient=reply%2B00005f857873fbc080e0bbdbcf8b309c125572c8e159ec4892cf000000011679845c92a169ce114756a6%40reply.github.com), no, there's no way at the moment, and I'm guessing unlikely to be in the future... Is doing it in one statement important to you?!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/wp-cli/wp-cli/issues/4621?recipient=reply%2B00005f857873fbc080e0bbdbcf8b309c125572c8e159ec4892cf000000011679845c92a169ce114756a6%40reply.github.com#issuecomment-358920637), or mute the thread (https://github.com/notifications/unsubscribe-auth/AABfhUrH6GQBLbjefnEwIu-iMbSntlbcks5tMGhcgaJpZM4RkGJk?recipient=reply%2B00005f857873fbc080e0bbdbcf8b309c125572c8e159ec4892cf000000011679845c92a169ce114756a6%40reply.github.com).\n\n. Thank you!\nOn Jan 19 2018, at 8:15 am, gitlost notifications@github.com wrote:\n\nI should add that if #4616 (https://github.com/wp-cli/wp-cli/issues/4616?recipient=reply%2B00005f8595e843ca15001509ea5468b1ba11f630db7587b692cf000000011679874e92a169ce114756a6%40reply.github.com) were implemented then that would be an alternative method of updating lots of meta at once...\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub (https://github.com/wp-cli/wp-cli/issues/4621?recipient=reply%2B00005f8595e843ca15001509ea5468b1ba11f630db7587b692cf000000011679874e92a169ce114756a6%40reply.github.com#issuecomment-358923769), or mute the thread (https://github.com/notifications/unsubscribe-auth/AABfhTefdbu8c4yEYmkALTxttvFjhBZPks5tMGtOgaJpZM4RkGJk?recipient=reply%2B00005f8595e843ca15001509ea5468b1ba11f630db7587b692cf000000011679874e92a169ce114756a6%40reply.github.com).\n\n. I will do that, thank you for reply. well sorry, wp post list --field=post_name is enough. worked!! thank you. thank you @danielbachhuber but this method is too slow . ",
    "nandulal8272": "How can I remove those error, and add that cron?\nWhat steps I need to follow to add that cronjob for \"wp cli update\"?. # php -v\nea-php-cli Copyright 2017 cPanel, Inc.\nPHP 7.0.26 (cli) (built: Nov 30 2017 12:31:33) ( NTS )\nCopyright (c) 1997-2017 The PHP Group\nZend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies\n    with Zend OPcache v7.0.26, Copyright (c) 1999-2017, by Zend Technologies. ",
    "kirtangajjar": "@schlessera @gitlost Looks like we can close this as we have parse_shell_arrays.. Sorry looks like I accidentially created new PR #4635. I published commit to my patch-1 branch, but somehow it didn't show here :/\n. @danielbachhuber grep uses filesystem to search for files. This command would search in database if that particular file exists. Yes we can use wp db search but this can be a nice wrapper around it.. @gitlost The tar issue prevails. Here's phpunit output in mac - \n```\nPHPUnit 7.0.0 by Sebastian Bergmann and contributors.\n...............................................................  63 / 243 ( 25%)\n...................................................a wordpress\na wordpress/xmlrpc8.php\na wordpress/wp-config6.php\na wordpress/license2.php\na wordpress/wp-admin\na wordpress/wp-includes\na wordpress/index1.php\na wordpress/wp-includes/file7.php\na wordpress/wp-admin/includes\na wordpress/wp-admin/about3.php\na wordpress/wp-admin/widgets5.php\na wordpress/wp-admin/includes/file4.php\nF\n.......Debug: This is a test message. (0s)\n.... 126 / 243 ( 51%)\n............................................................... 189 / 243 ( 77%)\n......................................................          243 / 243 (100%)\nTime: 5.25 seconds, Memory: 16.00MB\nThere was 1 failure:\n1) Extractor_Test::test_extract_tarball\nFailed asserting that true is false.\n/Users/apple/code/rtcamp/wp-cli/tests/test-extractor.php:119\nFAILURES!\nTests: 243, Assertions: 705, Failures: 1.\n``\nThe$output` array is empty on line 119.\nAlso, where is this strange output coming from?\na wordpress/xmlrpc8.php\na wordpress/wp-config6.php\na wordpress/license2.php\na wordpress/wp-admin\na wordpress/wp-includes\na wordpress/index1.php\na wordpress/wp-includes/file7.php\na wordpress/wp-admin/includes\na wordpress/wp-admin/about3.php\na wordpress/wp-admin/widgets5.php\na wordpress/wp-admin/includes/file4.php\nIt does not appear in linux. Requesting to re-open the issue.. @gitlost The thing is wp-cli is an excellent shell rather than being just a wp specific utility. So if we manage the code in such a way that it does not depend on wp specific commands, it will be very easy to fork the code and use it as a base to build another cli utility on top of it.. @danielbachhuber I have manually verified in all wp-cli repos. Most of them already had 2018 in license. Some had 2017, there I've sent a PR. Some did not have LICENCE. There i've opened issue in repo.\nI think it's safe to close this issue now.. NVM. Figured it out - https://github.com/wp-cli/wp-cli/blob/master/php/WP_CLI/Runner.php#L1151. There was an issue in my wp-config.php.. Oh! Sorry I didn't notice it.. ",
    "remcotolsma": "I'm having the same issue with a WordPress plugin which is using Composer PSR-4 autoload feature. The plugin and autoloading of classes is working good if we use WordPress frontend/backend. If we use for example WP-CLI command wp plugin list we get class loading issues:\n\u279c  pay.test git:(develop) \u2717 wp plugin list\nPHP Warning:  Class '\\Pronamic\\WordPress\\Pay\\Plugin' not found in /Users/remco/Workspace/wp-pronamic-ideal/includes/deprecated-classes.php on line 3\nPHP Stack trace:\nPHP   1. {main}() /usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar:0\nPHP   2. include() /usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar:4\nPHP   3. include() phar:///usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar/php/boot-phar.php:8\nPHP   4. WP_CLI\\bootstrap() phar:///usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar/php/wp-cli.php:23\nPHP   5. WP_CLI\\Bootstrap\\LaunchRunner->process() phar:///usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar/php/bootstrap.php:75\nPHP   6. WP_CLI\\Runner->start() phar:///usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar/php/WP_CLI/Bootstrap/LaunchRunner.php:23\nPHP   7. WP_CLI\\Runner->load_wordpress() phar:///usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar/php/WP_CLI/Runner.php:1032\nPHP   8. require() phar:///usr/local/Cellar/wp-cli/1.4.1/libexec/wp-cli-1.4.1.phar/php/WP_CLI/Runner.php:1105\nPHP   9. include_once() /Users/remco/Websites/pay.test/wp-settings.php:305\nPHP  10. require_once() /Users/remco/Workspace/wp-pronamic-ideal/pronamic-ideal.php:55\nPHP  11. ComposerAutoloaderInitae6bf1b5c0d5bd9784c168d0e08d8978::getLoader() /Users/remco/Workspace/wp-pronamic-ideal/vendor/autoload.php:7\nPHP  12. composerRequireae6bf1b5c0d5bd9784c168d0e08d8978() /Users/remco/Workspace/wp-pronamic-ideal/vendor/composer/autoload_real.php:60\nPHP  13. require() /Users/remco/Workspace/wp-pronamic-ideal/vendor/composer/autoload_real.php:70\nPHP  14. class_alias() /Users/remco/Workspace/wp-pronamic-ideal/includes/deprecated-classes.php:3\nI have installed WP CLI with brew install wp-cli, if i use the WP CLI Git clone of the release-1-4-1 branch i don't have this issue:\n\nA colleague of my has the same setup but he is not having issues when running wp plugin list.. I just also tried the composer require wp-cli/wp-cli version of WP CLI and this version is also working. Only the WP CLI version installed with brew install wp-cli is giving this issue on my setup.\n\n. Also tried the 'Recommended installation' version of WP CLI:\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nThis version is also giving issues, so i think this issue is limited to the Phar build of WP CLI.\n\n. Also tried the nightly version of WP CLI:\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar\nSame issue:\nphp wp-cli-nightly.phar plugin list\n\n. Maybe it's related to used Composer version? The Phar build of WP CLI is shipped with Composer version 1.5.2?\nwp eval 'echo Composer\\Composer::VERSION;' --skip-plugins\n1.5.2\n./vendor/bin/wp eval 'echo Composer\\Composer::VERSION;' --skip-plugins\n1.6.2\nphp wp-cli.phar eval 'echo Composer\\Composer::VERSION;' --skip-plugins\n1.5.2\nphp wp-cli-nightly.phar eval 'echo Composer\\Composer::VERSION;' --skip-plugins\n1.5.6\n\nhttps://github.com/composer/composer/blob/master/CHANGELOG.md\nMaybe update to Composer version 1.6.2?\nhttps://github.com/wp-cli/wp-cli/blob/master/composer.json#L25\ncomposer outdated\n\n. Composer version doesn't seems to make a difference:\n```\n\u279c composer require composer/composer 1.6.2\n\u279c ./vendor/bin/wp eval 'echo Composer\\Composer::VERSION;' --skip-plugins\n1.6.2\n\u279c ./vendor/bin/wp plugin list\n+----------------+----------+--------+---------+\n| name           | status   | update | version |\n+----------------+----------+--------+---------+\n| akismet        | inactive | none   | 4.0.2   |\n| hello          | inactive | none   | 1.6     |\n| pronamic-ideal | active   | none   | 4.7.0   |\n+----------------+----------+--------+---------+\n```\n\n```\n\u279c composer require composer/composer 1.5.2\n\u279c ./vendor/bin/wp eval 'echo Composer\\Composer::VERSION;' --skip-plugins\n1.5.2\n\u279c ./vendor/bin/wp plugin list\n+----------------+----------+--------+---------+\n| name           | status   | update | version |\n+----------------+----------+--------+---------+\n| akismet        | inactive | none   | 4.0.2   |\n| hello          | inactive | none   | 1.6     |\n| pronamic-ideal | active   | none   | 4.7.0   |\n+----------------+----------+--------+---------+\n```\n\n. If i generate my own WP CLI Phar build it is also working:\n```\n\u279c php -dphar.readonly=0 ./wp-cli/utils/make-phar.php test.phar\n\u279c php test.phar --version\nWP-CLI 1.5.0-alpha\n\u279c php test.phar plugin list\n+----------------+----------+--------+---------+\n| name           | status   | update | version |\n+----------------+----------+--------+---------+\n| akismet        | inactive | none   | 4.0.2   |\n| hello          | inactive | none   | 1.6     |\n| pronamic-ideal | active   | none   | 4.7.0   |\n+----------------+----------+--------+---------+\n```\nSo no idea why official Phar builds have this issue.\n\nhttps://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nhttps://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli-nightly.phar\n. In my case we load the Composer autoloader file in the plugin file.\n\nrequire_once plugin_dir_path( __FILE__ ) . 'vendor/autoload.php';\nI don't have special modifications in the wp-config.php.\n\nAre you aware that the \"files\" segment in the Composer autoloader is not actually an autoloader, but rather a hard include as soon as that file is parsed?\n\nYes, i know, but also without the files segment i have the same issue.. I just tried to reproduce the problem on another machine, but unfortunately i can't reproduce this issue on that machine. Also tried to reproduce this issue on Travis CI but als with no luck: https://travis-ci.org/remcotolsma/wp-cli-composer-issue. I'm out of ideas for now.. I removed the vendor dir from the plugin and run composer clear-cache and composer install, this fixed the issue for me.. ",
    "hews": "Also having this error: appeared out of the blue. (Not an especially helpful comment, I know, but there is so much context my environment that it wouldn't help to include it here \u2013 these examples are much more straightforward).. Note: was able to fix it. In my case this came from having something out of sync in my Composer install (not hard as I'm using a Bedrock-style repo inside containers, where in dev I am bind-mounting my codebase). Had to rm -rf vendor/, .../plugins/* & .../mu-plugins/* (except the Bedrock mu-plugin loader), composer.lock and my caches on my host and containers, then re-run Composer. Turns out some files within the plugins were out of sync in terms of versions.. ",
    "andrejpavlovic": "I came across this issue as well using WP-CLI 2.0.1. After some debugging, it looks like WP-CLI does some manual search/replace of __DIR__ in the wp-config.php file and then does an eval() of it.\nNot sure why but manually executing something like php ..\\vendor\\wp-cli\\wp-cli\\php\\boot-fs.php plugin list would work, while excuting wp plugin list would not be able to autoload my classes (my autoload.php would not even be executed).\nThe workaround I found was to wrap the require_once with realpath or using DIRECTORY_SEPARATOR.\nphp\n// Doesn't work:\nrequire_once __DIR__ . '/../vendor/autoload.php';\n// Works:\nrequire_once realpath(__DIR__ . '/../vendor/autoload.php');\n// Or works:\nrequire_once __DIR__ . implode(DIRECTORY_SEPARATOR, ['', '..', 'vendor', 'autoload.php']);\nNote, I was using Windows (PHP 7.1.11), but maybe it would help on Linux too.. @schlessera The error I get is that a class that is supposed to be autoloaded is missing. I added an echo statement to my autoload.php file just to see if it gets loaded at all, and it doesn't echo the statement. It only echo's it if I make the fix above.\nActually things get even more interesting. So if I rename my autoload file from autoload.php to autoload2.php and include that, everything works fine! When I run print_r(get_included_files()); the file doesn't show up when I use autoload.php, but it does show up when using autoload2.php.. @schlessera Yeah didn't make a difference.. ",
    "flurinduerst": "Thanks for your answers, appreciate it! \nThe error occurs within the installation process of WPDistillery which is using scotchbox and uses ssh to login to the vagrant-box as root. Not sure why there is a permission problem.\nusr/local/bin/*wp* permissions are: -rwxr-xr-x so there shouldn't be a problem being logged in as root, right?. ",
    "marksabbath": "I've been looking into this and it does seem that it's scaping the arguments and commands after they are receiving the ', causing that weirdness.\nIMHO running the escapeshellarg would be required for each argument, but before the argument parse (or after, but removing the ' at the begging and at the end of the strings).\nDoes this approach sounds reasonable for you guys?. @schlessera you're correct. It's escapeshellarg() that's adding the ' for each argument. I'll keep digging into this to find a good solution.. ",
    "wpbullet": "Unfortunately I was wrong, I removed all of the salts to test and I still get the error, even with --skip-plugins  --skip-themes\nIs there any way to get any more detailed info to track this stray ? down?\nI did try turning on short_open_tag in the CLI's php.ini but no luck there either\nThe --debug flag shows\nDebug (bootstrap): No readable global config found (0.077s)\nDebug (bootstrap): No project config found (0.077s)\nDebug (bootstrap): argv: /usr/local/bin/wp option get siteurl --debug (0.077s)\nDebug (bootstrap): ABSPATH defined: /var/www/html/ (0.078s)\nDebug (bootstrap): Begin WordPress load (0.078s)\nDebug (bootstrap): wp-config.php path: /var/www/html/wp-config.php (0.078s)\nPHP Parse error:  syntax error, unexpected '?' in phar:///usr/local/bin/wp/php/WP_CLI/Runner.php(1138) : eval()'d code on line 1. Thanks @gitlost here is my output from your suggestion, perhaps it is somewhere else? I did notice the advanced-cache.php and object-cache.php drop-ins and I removed those but same results\n```\n<?php\n/ Redis Configuration /\ndefine('WP_REDIS_PASSWORD', 'domain!');\ndefine('WP_CACHE_KEY_SALT', 'domain.com');\n/ Redis Configuration /\ndefine('WP_CACHE', true); // Added by WP Rocket\n/\n * The base configuration for WordPress\n \n * The wp-config.php creation script uses this file during the\n * installation. You don't have to use the web site, you can\n * copy this file to \"wp-config.php\" and fill in the values.\n \n * This file contains the following configurations:\n \n *  MySQL settings\n *  Secret keys\n *  Database table prefix\n *  ABSPATH\n \n * @link https://codex.wordpress.org/Editing_wp-config.php\n \n * @package WordPress\n /\n//  MySQL settings - You can get this info from your web host  //\n/* The name of the database for WordPress /\ndefine('DB_NAME', 'wordpress');\n/* MySQL database username /\ndefine('DB_USER', 'wordpress');\n/* MySQL database password /\ndefine('DB_PASSWORD', 'passw0rd');\n/* MySQL hostname /\ndefine('DB_HOST', 'localhost');\n/* Database Charset to use in creating database tables. /\ndefine('DB_CHARSET', 'utf8mb4');\n/* The Database Collate type. Don't change this if in doubt. /\ndefine('DB_COLLATE', 'utf8mb4_general_ci');\n/#@+\n * Authentication Unique Keys and Salts.\n \n * Change these to different unique phrases!\n * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}\n * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.\n \n * @since 2.6.0\n */\ndefine('AUTH_KEY',         'x]XZ,_Fdh~u)c)Jl;0QV@VzUA0M R>k)-eheqw>2:u7#- Jxth3?/h]qW!nv# r');\ndefine('SECURE_AUTH_KEY',  'lh8i-rzj&dm/<ykNpO()iQQ[Pm>#l>hl0#!CBOeoiV+0LtHIT=mLpF j>XpA 3');\ndefine('LOGGED_IN_KEY',    '#wZPtLyf,3deZ@{)Pl]XW.I45Vmfc(*FenzE[W(/[d9)Kg)@.ZvX1U(8W$wYZ3k*');\ndefine('NONCE_KEY',        'Eqi$Z K3]Q=5ASNy3TaQ!T:_Cknqb80V7w1/Fi6rq^Y-/0;jy$wdW/O)6t6 Wn{');\ndefine('AUTH_SALT',        'VxD[pA8HJO.^(,Zvm(nwuI~Om=hJ ;1n=]_.:ID;2l<*MXVk/97aKSag5 !CdT6');\ndefine('SECURE_AUTH_SALT', 'z5q~.}^R{K7j2kz3$$*t]&kwFy.x=m=U&iN5^()o,#J, s[#T:N}B1jj^D7W3bF');\ndefine('LOGGED_IN_SALT',   'O&T/7-?&?S-voHs#EH~o#g#ajjZ,[rXzC_V53COFk2K$!ne>y6-qv9R/Ei$+IIf{');\ndefine('NONCE_SALT',       'd@?l}kkI[c_AEtk+CK{[NVI,)eZ$~WM^k@>xOQs9r]7_kkRW#$EI?$ZyKNDvgF!1');\n/*#@-/\n/\n * WordPress Database Table prefix.\n \n * You can have multiple installations in one database if you give each\n * a unique prefix. Only numbers, letters, and underscores please!\n /\n$table_prefix  = 'wp_';\ndefine(\u2018WP_MEMORY_LIMIT\u2019, \u2018256M\u2019);\n/ That's all, stop editing! Happy blogging. /\ndefine( 'WP_DEBUG', true );\ndefine( 'WP_DEBUG_DISPLAY', false );\ndefine( 'WP_DEBUG_LOG', true );\n/* Absolute path to the WordPress directory. /\nif ( !defined('ABSPATH') )\n        define('ABSPATH', dirname('/var/www/html/wp-config.php') . '/');\n/* Sets up WordPress vars and included files. /\nPHP Parse error:  syntax error, unexpected '?' in phar:///usr/local/bin/wp/php/WP_CLI/Runner.php(1138) : eval()'d code on line 1\n```. @gitlost thank you so much, this has been truly illuminating! Here are the hexdumps\nFrom the broken wp-config.php\n00000000  ef bb bf 3c 3f 70 68 70  0d 0a 0d 0a 2f 2a 20 52  |...<?php..../* R|\nFrom a working wp-config.php\n00000000  3c 3f 70 68 70 0a 2f 2a  2a 0a 20 2a 20 54 68 65  |<?php./**. * The|\nThese ellipses seem to be the issue so will strip those out and see what I find\n. So I used backspace to delete the entire <?php line and retyped it manually, now it works!\nThank you so much @gitlost !. ",
    "ajitbohra": "Was trying to update it on the server (DigitalOcean) ended up manually updating/reinstalling latest copy. Will try on few other servers and confirm if same persist.. works perfect on other servers seems like an issue specific server config.. ",
    "edubacco": "resolved, I have to add --all-tables, or specify the blogs.\nhttps://make.wordpress.org/cli/\n. ",
    "pdobrescu": "hi everyone. I'm getting the same error even on a single WordPress install, hosted on a custom setup. Adding --all-tables makes it work, but this shouldn't be necessary in this situation. Please let me know what kind of information you need about our setup in order to make it work out of the box. Thanks. hi @gitlost, same setup in my case, using HyperDB and not having issues before this version. I guess the wp-config.php file isn't needed anymore, right? I remember that we had another case where $wpdb->dbname was empty, so we'll also be looking into that. Thanks for reopening this issue!. hi @gitlost, by other cases I was actually trying to say that we've bumped into this issue with another plugin and I believe it was an older version of WPML. Therefore there was no other error with wp-cli of this sort.\nAny idea of a potential fix? For the moment it works with all-tables\u00a0but it's not always the best way to go (on a multisite install you might not want to use all-tables all the time). \nThanks. ",
    "zacscott": "I get the same issue on a WooCommerce site, so don't think it is multi-site specific.\nHere is the error I get;\n$ wp search-replace \"[redacted]\" \"[redacted]\" --dry-run --url=[redacted]\nWordPress database error Unknown column 'Tables_in_' in 'where clause' for query SHOW TABLES WHERE `Tables_in_` IN ('wp_users', 'wp_usermeta', 'wp_posts', 'wp_comments', 'wp_links', 'wp_options', 'wp_postmeta', 'wp_terms', 'wp_term_taxonomy', 'wp_term_relationships', 'wp_termmeta', 'wp_commentmeta', 'wp_woocommerce_payment_tokenmeta', 'wp_woocommerce_order_itemmeta') made by WP_CLI\\Utils\\wp_get_table_names\nSuccess: 0 replacements to be made.\nIt is also resolved by using the --all-tables flag. Hi @gitlost,\nHere is our wp-config (sensitive info redacted).\nWe are using HyperDB which might be causing issues, though this is the same set up as we have used for other sites and we've never had this problem before.\nReader slave is configured via SLAVE_DB_HOST\n```\n<?php\nif ( file_exists( dirname( FILE ) . '/local-config.php' ) ) {\ndefine( 'WP_LOCAL_DEV', true );\ndefine( 'WP_ENV',       'local' );\n\ninclude( dirname( __FILE__ ) . '/local-config.php' );\n\n// Salt keys, [redacted]\n\n} else if ( isset( $_SERVER['HTTP_HOST'] ) && strpos( $_SERVER['HTTP_HOST'], 'staging' ) !== false ) { // STAGING\n// TODO configure for staging\n\n} else {\ndefine( 'WP_ENV',       'production' );\ndefine( 'WP_LOCAL_DEV', false );\ndefine( 'USE_MEMCACHE', true );\ndefine( 'WP_CACHE',     true );\n\ndefine( 'DB_NAME',       '[redacted]');\ndefine( 'DB_USER',       '[redacted]');\ndefine( 'DB_PASSWORD',   '[redacted]');\ndefine( 'DB_HOST',       '[redacted]');\ndefine( 'SLAVE_DB_HOST', '[redacted]' );\n\ndefine( 'WP_SITEURL',    'https://[redacted]/');\ndefine( 'WP_HOME',       'https://[redacted]/');\n\ndefine( 'WP_CACHE_KEY_SALT', md5( DB_NAME ) );\n\nini_set( 'display_errors',      0 );\nini_set( 'post_max_size',       '100M');\nini_set( 'upload_max_filesize', '100M');\n\ndefine( 'WP_DEBUG',         false );\ndefine( 'WP_DEBUG_DISPLAY', false );\ndefine( 'SAVEQUERIES',      false );\n\ndefine( 'DBI_AWS_ACCESS_KEY_ID',     '[redacted]' );\ndefine( 'DBI_AWS_SECRET_ACCESS_KEY', '[redacted]' );\n\n$memcached_servers = array(\n    array( '[redacted]', '11211' ),\n    array( '[redacted]', '11211' )\n);\n\n// Salt keys, [redacted]\n\n}\ndefine( 'WP_CONTENT_DIR', dirname( FILE ) . '/wp-content' );\ndefine( 'WP_CONTENT_URL', 'https://' . $_SERVER['HTTP_HOST'] . '/wp-content' );\n$table_prefix  = 'wp_';\ndefine( 'DB_CHARSET', 'utf8' );\ndefine( 'DB_COLLATE', '' );\ndefine( 'WPLANG',          '' );\ndefine( 'FS_METHOD',       'direct');\ndefine( 'WP_MEMORY_LIMIT', '100M');\ndefine( 'DISABLE_WP_CRON',            true );\ndefine( 'DISALLOW_FILE_EDIT',         true );\ndefine( 'AUTOMATIC_UPDATER_DISABLED', true );\nif ( ! defined('WP_DEBUG') ) {\n    define( 'WP_DEBUG', false );\n    define( 'WP_DEBUG_DISPLAY', false );\n}\nif ( !defined( 'ABSPATH' ) )\n    define( 'ABSPATH', dirname( FILE ) . '/wp/' );\nrequire_once( ABSPATH . 'wp-settings.php' );\n```. Thanks @gitlost . ",
    "vasikgreif": "Another HyperDB user here, same problem. I would like to use the search replace for duplicating the site in multisite, ie. dump the blog db, replace prefix, import back and than run search-replace. That means I cannot use all-tables, as it messes up the original website.\nAny chance to get this fixed?. ",
    "Erutan409": "Any update on this?  Encountering this on an Nginx server using the latest (as of 9/4/18).. ",
    "CurtisBelt": "Another HyperDB user here facing this same issue and it's going to force me to write a lot of extra scripting -- is this fixable?. ",
    "paulcanning": "Never mind, I read the Internal API docs. runcommand() looks like the thing I need :). ",
    "robertmylne": "[root@whm ~]# su mylinuxuser -c 'cd ~/public_html && wp user update mywpuser --user_pass=123123 --debug'\nDebug (bootstrap): No readable global config found (0.088s)\nDebug (bootstrap): No project config found (0.088s)\nDebug (bootstrap): argv: /usr/local/bin/wp user update mywpuser --user_pass=123123 --debug (0.088s)\nDebug (bootstrap): ABSPATH defined: /home/mylinuxuser/public_html/ (0.088s)\nDebug (bootstrap): Begin WordPress load (0.089s)\nDebug (bootstrap): wp-config.php path: /home/mylinuxuser/public_html/wp-config.php (0.089s)\nDebug (bootstrap): Loaded WordPress (0.265s)\nDebug (bootstrap): Running command: user update (0.266s)\nNotice: Undefined index: SERVER_NAME in /home/mylinuxuser/public_html/wp-includes/pluggable.php on line 330\nSuccess: Updated user 1.\nThen it just hangs after Success: Updated user 1. for around 25-30seconds. ",
    "bportman": "Hello, I am seeing this same error on a CentOS linux server with cPanel running in which I have just installed the WP-CLI according to the installation instructions.  It seems to have installed correctly but when I run pretty much any command I get \n<br />\n<b>Warning</b>:  fwrite() expects parameter 1 to be resource, string given in <b>phar:///usr/local/bin/wp/php/WP_CLI/Loggers/Base.php</b> on line <b>61</b><br />\nFor example i am trying to run 'wp rewrite flush' to flush permalinks on a site and this error is produced and the permalinks are not flushed.\nHere is my wp --info:\nwp --info\nX-Powered-By: PHP/5.6.36\nContent-type: text/html; charset=UTF-8\nOS: Linux 3.10.0-862.3.2.el7.x86_64 #1 SMP Mon May 21 23:36:36 UTC 2018 x86_64\nShell:  /bin/bash\nPHP binary: /opt/cpanel/ea-php56/root/usr/bin/php-cgi\nPHP version:    5.6.36\nphp.ini used:   /opt/cpanel/ea-php56/root/etc/php.ini\nWP-CLI root dir:    phar://wp-cli.phar\nWP-CLI vendor dir:  phar://wp-cli.phar/vendor\nWP_CLI phar path:   /usr/local/bin\nWP-CLI packages dir:\nWP-CLI global config:\nWP-CLI project config:\nWP-CLI version: 1.5.1\nand here is my php --version output:\nphp --version\nPHP 5.6.36 (cgi-fcgi) (built: May 29 2018 01:54:51)\nCopyright (c) 1997-2016 The PHP Group\nZend Engine v2.6.0, Copyright (c) 1998-2016 Zend Technologies\n    with the ionCube PHP Loader v4.7.5, Copyright (c) 2002-2014, by ionCube Ltd.\nAny help would be appreciated!. ",
    "SergeC": "scaffold plugin-tests crashes with the same error as scaffold theme-tests.. > \u279c  catalog git:(master) \u2717./wp-cli cli info\nOS:     Darwin 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\nShell:  /bin/zsh\nPHP binary:     /usr/local/Cellar/php72/7.2.2_13/bin/php\nPHP version:    7.2.2\nphp.ini used:   /usr/local/etc/php/7.2/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\nWP_CLI phar path:       /Users/sergey/Desktop/catalog\nWP-CLI packages dir:  \nWP-CLI global config: \nWP-CLI project config:  /Users/sergey/Desktop/catalog/wp-cli.yml\nWP-CLI version: 1.5.0\n\u279c  catalog git:(master) \u2717 php wp-cli-1.4.1.phar cli info                   \nPHP binary:     /usr/local/Cellar/php72/7.2.2_13/bin/php\nPHP version:    7.2.2\nphp.ini used:   /usr/local/etc/php/7.2/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\nWP_CLI phar path:       /Users/sergey/Desktop/catalog\nWP-CLI packages dir:  \nWP-CLI global config: \nWP-CLI project config:  /Users/sergey/Desktop/catalog/wp-cli.yml\nWP-CLI version: 1.4.1\n\u279c  catalog git:(master) \u2717 ./wp-cli scaffold theme-tests coinnews --debug\nDebug (bootstrap): No readable global config found (0.107s)\nDebug (bootstrap): Using project config: /Users/sergey/Desktop/catalog/wp-cli.yml (0.108s)\nDebug (bootstrap): argv: ./wp-cli scaffold theme-tests coinnews --debug (0.108s)\nDebug (bootstrap): ABSPATH defined: /Users/sergey/Desktop/catalog/wp/ (0.108s)\nDebug (bootstrap): Begin WordPress load (0.109s)\nDebug (bootstrap): wp-config.php path: /Users/sergey/Desktop/catalog/wp/wp-config.php (0.109s)\nDebug (bootstrap): Set URL: catalog.com/ (0.112s)\nDebug (bootstrap): Loaded WordPress (0.359s)\nDebug (bootstrap): Running command: scaffold theme-tests (0.359s)\nError: Couldn't find install-wp-tests.sh\n\u279c  catalog git:(master) \u2717 php wp-cli-1.4.1.phar scaffold theme-tests coinnews --debug\nDebug (bootstrap): No readable global config found (0.098s)\nDebug (bootstrap): Using project config: /Users/sergey/Desktop/catalog/wp-cli.yml (0.1s)\nDebug (bootstrap): argv: wp-cli-1.4.1.phar scaffold theme-tests coinnews --debug (0.1s)\nDebug (bootstrap): ABSPATH defined: /Users/sergey/Desktop/catalog/wp/ (0.102s)\nDebug (bootstrap): Begin WordPress load (0.102s)\nDebug (bootstrap): wp-config.php path: /Users/sergey/Desktop/catalog/wp/wp-config.php (0.102s)\nDebug (bootstrap): Set URL: catalog.com/ (0.106s)\nDebug (bootstrap): Loaded WordPress (0.35s)\nDebug (bootstrap): Running command: scaffold theme-tests (0.352s)\nSuccess: Created test files.\n. > \u279c  catalog git:(master) \u2717cat wp-cli.yml \npath: wp. I've added .phar extension and 1.5.0 successfully generated tests.\n\n\u279c  catalog git:(master) \u2717 ./wp-cli.phar scaffold theme-tests coinnews --debug \nDebug (bootstrap): No readable global config found (0.108s)\nDebug (bootstrap): Using project config: /Users/sergey/Desktop/catalog/wp-cli.yml (0.109s)\nDebug (bootstrap): argv: ./wp-cli.phar scaffold theme-tests coinnews --debug (0.109s)\nDebug (bootstrap): ABSPATH defined: /Users/sergey/Desktop/catalog/wp/ (0.109s)\nDebug (bootstrap): Begin WordPress load (0.11s)\nDebug (bootstrap): wp-config.php path: /Users/sergey/Desktop/catalog/wp/wp-config.php (0.11s)\nDebug (bootstrap): Set URL: catalog.com/ (0.115s)\nDebug (bootstrap): Loaded WordPress (0.359s)\nDebug (bootstrap): Running command: scaffold theme-tests (0.36s)\nSuccess: Created test files.\n\u279c  catalog git:(master) \u2717 ./wp-cli.phar cli info                           \nOS:     Darwin 16.7.0 Darwin Kernel Version 16.7.0: Thu Jun 15 17:36:27 PDT 2017; root:xnu-3789.70.16~2/RELEASE_X86_64 x86_64\nShell:  /bin/zsh\nPHP binary:     /usr/local/Cellar/php72/7.2.2_13/bin/php\nPHP version:    7.2.2\nphp.ini used:   /usr/local/etc/php/7.2/php.ini\nWP-CLI root dir:        phar://wp-cli.phar\nWP-CLI vendor dir:      phar://wp-cli.phar/vendor\nWP_CLI phar path:       /Users/sergey/Desktop/catalog\nWP-CLI packages dir:  \nWP-CLI global config: \nWP-CLI project config:  /Users/sergey/Desktop/catalog/wp-cli.yml\nWP-CLI version: 1.5.0\n. \n",
    "swiffer": "Yes, this fixed the issue!. ",
    "mister-cairns": "Looks like it was a memory issue. I increased the memory limit in wp-config.php and it's running. . No error message.\nI upped the memory limit to 1024MB as I was churning through 88k media files.\nOn Fri, Mar 2, 2018 at 3:58 AM, gitlost notifications@github.com wrote:\nThanks for the report anyway @mister-cairns [https://github.com/mister-cairns] , we're very interested in improving memory usage in WP-CLI so if you have the time to post some more info it would be appreciated:\n\nWhat did you have to set the memory limit to?\nThere should have been a PHP error message in your error_log . If so, could you post this please?\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub [https://github.com/wp-cli/wp-cli/issues/4705#issuecomment-369658318] , or mute the thread [https://github.com/notifications/unsubscribe-auth/ABgjHs1ZBcRm0uyTy2g0EktqFfvQYiIsks5taCjOgaJpZM4SUSIk] .. ",
    "diegomagikal": "Thanks, I updated my environment to php 7.2.30 and it works fine.. ",
    "ericgopak": "I didn't modify any other functions (like e.g. Utils\\get_temp_dir) to make use of this path normalization, since I am not sure it won't break anything for Windows users.\nI think it's great that we now have this normalization function, since everyone can now use it for cross-platform (in other words, Windows-friendly) path operations.. Thanks a lot @schlessera and @gitlost for the feedback. I'm very happy to see the high bar for the code quality :)\nI've addressed all of your feedback above, please review!\nI've also added a unit test for the new function, where I copied all of the WP Core test cases plus added a couple of new ones (like empty-string test and root-only test).\n\nThere's a trunk version that deals with PHP stream wrappers changeset [42387] but we can ignore that for now I think.\n\nYes, I agree, no need to worry about it for now, but in general I like the idea of having a wrapper for paths - if done well, that would alleviate quite a bit of potential path-related headache :)\n. Thanks @gitlost for the note!\nThen we're just waiting for @schlessera to approve this PR.. ",
    "dustinvanbuskirk": "Pipeline YAML\n```\nversion: '1.0'\nsteps:\n  BuildingDockerImage:\n    title: Building Docker Image\n    type: build\n    image_name: dustinvanbuskirk/wp-cli\n    working_directory: ./\n    dockerfile:\n      content: >-\n        FROM php:7-alpine\n    MAINTAINER Dustin Van Buskirk\n\n\n    ENV VERSION=${{CF_BRANCH}}\n\n\n    RUN docker-php-ext-install mysqli\n\n\n    RUN curl -Lo /bin/wp\n    https://github.com/wp-cli/wp-cli/releases/download/${VERSION}/wp-cli-${VERSION//v}.phar\n    && \\\n        chmod +x /bin/wp\n\n    ENTRYPOINT /bin/wp\n\n\n    CMD wp --info\ntag: '${{CF_BRANCH_TAG_NORMALIZED}}'\n\nRunningUnitTests:\n    title: Running Unit Tests\n    image: '${{BuildingDockerImage}}'\n    working_directory: IMAGE_WORK_DIR\n    entry_point:\n      - /bin/sh\n      - /codefresh/volume/cf-generated/unit_test_script\n    create_file:\n      path: /codefresh/volume/cf-generated\n      name: unit_test_script\n      content: wp --info | grep $(echo ${{CF_BRANCH}} | sed -e 's/v//')\n    on_success:\n      metadata:\n        set:\n          - '${{BuildingDockerImage.imageId}}':\n              - CF_QUALITY: true\n    on_fail:\n      metadata:\n        set:\n          - '${{BuildingDockerImage.imageId}}':\n              - CF_QUALITY: false\n  PushingToDockerRegistry:\n    title: Pushing to Docker Registry\n    type: push\n    candidate: '${{BuildingDockerImage}}'\n    tag: '${{CF_BRANCH_TAG_NORMALIZED}}'\n    registry: dockerhubdvb\n```\nI've used my own Docker Hub repository until one is selected by contributors.\nhttps://hub.docker.com/r/dustinvanbuskirk/wp-cli\nGiven this is utilizing a tag like v1.5.0 I used Codefresh CLI to execute the build, this can be done as part of a release process if someone would like.\nCommand: codefresh run 5aa6cd5fff6d7500019a4b2e -b v1.5.0\nYou can detach from the process as well and let it finish on its own outside your CI.\nBadge for README specific to v1.5.0 \nYou cannot visit this link without a Codefresh user but we can set those up.  We're also working currently to enable settings to expose this similar to your TravisCI for open source projects like this.. I've created the initial Docker image and CI pipeline.  For now I have pushed this up to my personal Docker Hub repository.  https://hub.docker.com/r/dustinvanbuskirk/wp-cli/. ",
    "simison": "Just noting that Docker community is maintaining WordPress and WP-CLI images here: https://hub.docker.com/_/wordpress/\nNot that it should stop anyone doing the same, of course. ;-). ",
    "kevinvhengst": "@jmichaelward I'm facing the same issue. I'm unable to install WP-CLI using Composer.. ",
    "dking3876": "Installation of wp-cli is failing due to symfony/console dependency and incompatablility with 4.0.11 this thread indicates this was solved but im still having issues. can someone assist please. ",
    "catchmyfame": "Thanks. I'll add it as a feature request as I know zip about tcsh scripting and how it differs from bash scripting.. ",
    "daniel-banciulea": "I have the exact same issue as described above. Nothing has changed in my environment which used to work just fine a couple of months ago when I last tested.. ",
    "Stefan-Adam": "Hi,\nI have done some more looking and testing into this issue, and it definitely seems to be an environment thing, probably with our CloudLinux setup. I cannot reproduce the issue on any other OS. (I have tested on CloudLinux, Centos 6 Server, and Ubuntu 16.04 LTS)\nIf anyone has any thoughts on what to change in my environment to fix it, I would appreciate it, but at this point, I don't think it is a bug specifically with the WP CLI's wp core install function.\nThank you all for your time.. ",
    "ecobux": "@schlessera All plugins were deactivated. Please read my initial post.\nI know http://wp-cli.org/#support - that's how I came here.\nIt would really be useful if WP-CLI could offer a bit more debugging information. Also, it's difficult for users to understand what is considered a valid bug and if reporting errors here is actually welcome.. ",
    "raggascum": "I have and there's been no response. I see people asking for help here often so why now is it a big issue? If you know how to help can't you just help instead of trying to display your dominance?. ",
    "antongorodezkiy": "@schlessera \nI had this issue when the code in wp-config.php file looked like this:\n[...]\n/** Sets up WordPress vars and included files. */\\r\\rrequire_once(ABSPATH . 'wp-settings.php');\nNote: \\r\\r was invisible in my atom editor but I could see those symbols by using sed -n 'l' wp-config.php (do not ask why the code was formatted like this. it wasn't my code)\nI think it's an issue, because wordpress actually worked with that code so PHP interpret it as correct.. ",
    "0x6d617474": "I'm still seeing 2.0.0-alpha in the VERSION file for the 1.5.1 tag, and in the 1.5.1 tar.gz file. It does appear to be fixed in the phar though. . ",
    "andtos90": "It's working now, thanks. ",
    "dougshults": "Seems to be an issue still \nDownload failed: https://dl.bintray.com/homebrew/mirror/wp-cli-1.5.1.phar. ",
    "lightstrike": "Thanks for the quick fix! I've updated the link for posterity :smile: . ",
    "syhe": "~@schlessera I see this was an accident, but it actually rebuilt the package with different contents, which in turn resulted in different checksums, which broke our build (because we pin on checksums and versions, to get (mostly) reproducible results).~\n~Is this likely to occur again in the future?~\nEdit: Just saw #4817 and #4811 \u2026it seems this was a one-off occurence.\nDiff for reference:\n````\n% diff wp-cli-1.5.1/COMPOSER_VERSIONS wp-cli-1.5.1.new/COMPOSER_VERSIONS \n1,3c1,3\n< wp-cli/wp-cli 1.5.1 2018-04-21T09:34:42+00:00\n< composer/ca-bundle 1.1.0 943b2c4fcad1ef178d16a713c2468bf7e579c288\n< composer/composer 1.5.6 4f7f9c12753ec43f1e4629e2a71cabe81f2a4eab\n\n\nwp-cli/wp-cli 1.5.1 2018-05-31T14:27:15+00:00\ncomposer/ca-bundle 1.1.1 d2c0a83b7533d6912e8d516756ebd34f893e9169\ncomposer/composer 1.6.3 88a69fda0f2187ad8714cedffd7a8872dceaa4c2\n5,6c5,6\n< composer/spdx-licenses 1.1.6 2603a0d7ddc00a015deb576fa5297ca43dee6b1c\n< justinrainbow/json-schema 5.2.6 d283e11b6e14c6f4664cf080415c4341293e5bbd\n\n\n\ncomposer/spdx-licenses 1.3.0 7e111c50db92fa2ced140f5ba23b4e261bc77a30\njustinrainbow/json-schema 5.2.7 8560d4314577199ba51bf2032f02cd1315587c23\n13c13\n< seld/jsonlint 1.6.2 7a30649c67ee0d19faacfd9fa2cfb6cc032d9b19\n\n\n\nseld/jsonlint 1.7.1 d15f59a67ff805a44c50ea0516d2341740f81a38\n15,25c15,25\n< symfony/config v2.8.32 f4f3f1d7090c464434bbbc3e8aa2b41149c59196\n< symfony/console v2.8.32 46270f1ca44f08ebc134ce120fd2c2baf5fd63de\n< symfony/debug v2.8.32 e72a0340dc2e273b3c4398d8eef9157ba51d8b95\n< symfony/dependency-injection v2.8.32 d3e81e5402c38500770eb5595d78a6d85ea9e412\n< symfony/event-dispatcher v2.8.32 b59aacf238fadda50d612c9de73b74751872a903\n< symfony/filesystem v2.8.32 15ceb6736a9eebd0d99f9e05a62296ab6ce1cf2b\n< symfony/finder v2.8.32 efeceae6a05a9b2fcb3391333f1d4a828ff44ab8\n< symfony/polyfill-mbstring v1.6.0 2ec8b39c38cb16674bbf3fea2b6ce5bf117e1296\n< symfony/process v2.8.32 d25449e031f600807949aab7cadbf267712f4eee\n< symfony/translation v2.8.32 0c63d56516c4c4c323228ca6348eadb7c91b1daf\n< symfony/yaml v2.8.32 968ef42161e4bc04200119da473077f9e7015128\n\n\n\nsymfony/config v2.8.38 ecacddeaf76732231eea1657f6f5b062dade94c9\nsymfony/console v2.8.38 7f78892d900c72a40acd1fe793c856ef0c110f26\nsymfony/debug v2.8.38 4486d2be5e068b51fece4c8551c14e709f573c8d\nsymfony/dependency-injection v2.8.38 3d7cbf34cd75ede7f94b9b990f85bd089e15cd55\nsymfony/event-dispatcher v2.8.38 9b69aad7d4c086dc94ebade2d5eb9145da5dac8c\nsymfony/filesystem v2.8.38 125403a59e4cb4e3ebf46d0162fabcde613d2b97\nsymfony/finder v2.8.38 423746fc18ccf31f9abec43e4f078bb6e024b2d5\nsymfony/polyfill-mbstring v1.7.0 78be803ce01e55d3491c1397cf1c64beb9c1b63b\nsymfony/process v2.8.38 ee2c91470ff262b1a00aec27875d38594aa87629\nsymfony/translation v2.8.38 72235c1121ae282254e897e342c001f3d4bb7e8d\nsymfony/yaml v2.8.38 be720fcfae4614df204190d57795351059946a77\n28c28\n< wp-cli/checksum-command v1.0.9 89a319440651f2867f282339c2223cfe5e9cc3fb\n\n\n\nwp-cli/checksum-command v1.0.8 360c0c658242919e9a74ba06917fd8a691484174\n37c37\n< wp-cli/extension-command v1.1.9 dfacef02b88baed07058c88064afd582f4150a97\n\n\n\nwp-cli/extension-command v1.1.10 3fd9ff469311bb2d6935997bc7d7e9f157fe29e6\n42,43c42,43\n< wp-cli/package-command v1.0.13 c912f5bbad216997d7496d46fc5c05af0e16fc5b\n< wp-cli/php-cli-tools v0.11.9 766653b45f99c817edb2b05dc23f7ee9a893768d\n\n\n\nwp-cli/package-command v1.0.12 bb8b02d9ba1cded95564767000738ceaefbc885b\nwp-cli/php-cli-tools v0.11.8 363c75349f5dde561e0b416dd00f7aaa76fa2c27\n45,47c45,47\n< wp-cli/role-command v1.1.0 f50134ea9c27c108b1069cf044f7395c8f9bf716\n< wp-cli/scaffold-command v1.1.3 659348f05ebb47e70d7286b2e989146893a3c588\n< wp-cli/search-replace-command v1.3.0 df1092f65a5953dddace5fc060a9155f430a560e\n\n\n\nwp-cli/role-command v1.0.5 be7f8ea91922864d0c75e45953fbe41d44bebb25\nwp-cli/scaffold-command v1.1.2 a7ef51b2abd88a2ecb17ecdf7aaad92da37d1eb7\nwp-cli/search-replace-command v1.2.0 c688e51b35bb87b26a3de308287d6a30cda78e44\n````. \n",
    "mistydemeo": "There's some more discussion on the Homebrew tracker: https://github.com/Homebrew/homebrew-core/pull/28579#issuecomment-394058348\nIt looks like the file changed yesterday. 1.5.1 was released April 21, but the current tag now says it was released 1 day ago and is tagged at 3aac73bc4d629372531f3e15bbb67945d19b5d5a, which is only 2 days old.\n\n@ilovezfs has a copy of the original 1.5.1 .phar, and was able to diff the contents. They're very different. https://gist.github.com/ilovezfs/2095a51cd8a552840aaed34bd0a074e3. ",
    "birgire": "I saw the info for the upcoming WP-CLI hack day tomorrow and out of curiosity I had a little source peek  :)\nI wonder if  php/WP_CLI/Runner.php would be a suitable place for this?\nIf so then maybe within the Runner::setup_bootstrap_hooks() method we could add (with relevant inline docs):\n```\nWP_CLI::add_wp_hook( 'init', function(){\n    do_action( 'cli_init' );\n} );\n``\nFirst I thoughtWP_CLI::do_hook( 'cli_init' );would be needed within the callback, but it seems to only work withdo_action( 'cli_init' );`\nShould the same be done for admin_init ?  \nIs the inithook the preferred way of hooking (e.g. commands) into WP-CLI?\nThose who prefer 'plugins_loaded' action instead of 'init', should they check if WP_CLI is defined before adding the action, as previosly ?\n. ",
    "mikelking": "Currently the file is accessible to unauthenticated users via both of these URLs:\n    https://raw.githubusercontent.com/wp-cli/wp-cli/master/utils/wp-completion.bash\n    https://raw.githubusercontent.com/wp-cli/wp-cli/v1.5.1/utils/wp-completion.bash\n. ",
    "CodeProKid": "fwiw, when I added this change locally, I was getting the following error: Could not open input file: don't know nearly enough about this to know what that means though.. ",
    "Mte90": "I don't think that this error depend on that change.\nAfter all this is only a check for bash that avoid the splitting of the var content.. ",
    "xwulfus": "Sorry, thanks for link!. ",
    "echodreamz": "No this is still an issue.. Confirmed it still happens with build 2.0.1.\n\nwp comment delete $(wp-cron comment list --status=spam --format=ids)\nWarning: Failed deleting comment 18921. \n",
    "mirzazeyrek": "Thanks for the insights @schlessera and @swissspidy, I can confirm that deactivating WooCommerce Subscriptions By\u00a0Prospress Inc. solves the issue. \n. ",
    "Reiner030": "Hi, \nI had some equal problem - only 6 out of 18 tables where registered in $WPDB handler.\nFor this the documentation offers several parameters for every needs, in your case the --all-tables-with-prefix should match or the --all-tables if the temporary tables haven't same prefix:\nhttps://developer.wordpress.org/cli/commands/search-replace/\n\n[<table> \u2026]\nList of database tables to restrict the replacement to. Wildcards are supported, e.g. 'wp_*options' or 'wp_post*'.\n[--all-tables-with-prefix]\nEnable replacement on any tables that match the table prefix even if not registered on $wpdb.\n[--all-tables]\nEnable replacement on ALL tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides \u2013-network and -\u2013all-tables-with-prefix.\n[--skip-tables=<tables>]\nDo not perform the replacement on specific tables. Use commas to specify multiple tables.\n[--skip-columns=<columns>]\nDo not perform the replacement on specific columns. Use commas to specify multiple columns.\n[--include-columns=<columns>]\nPerform the replacement on specific columns. Use commas to specify multiple columns.\n\n\n(and every command has it's own repository here I found out 2 days ago :smile: so right choice would be: https://github.com/wp-cli/search-replace-command/issues ). Thats not working as you (and I first also) expect it; I have tested this combination before opening this issue.\nHere with logging and only wp_options table checked; as you can see the single quote would be included as replacement - tested with option -i and option -s with same behavior:\n```\nroot@test-server ~ # sudo -u www-data -s -- wp search-replace \"something\" \"''\" wp_options --path=/path/to/wordpress/staging/current --report-changed-only --dry-run --log\nwp_options.option_value:52338\n< ssues\">open a new issue if you find something to add. Theme Review Team Laun\n\nssues\">open a new issue if you find '' to add. Theme Review Team Laun\nwp_options.option_value:52342\n< e to evaluate the options and put forth something bite sized for core to start with. Buil [...] learn how to write my first Behat test (something that has been on my to-do list for a lo [...]  come out and do a demo of WordPress or something like that, but generally our plan right [...] to rectify. \u201cThere is also something special planned but I don\u2019t want  [...] ct with individuals who want to achieve something; small business owners, designers, phot [...] ors, and anyone who is struggling doing something on the web,\u201d Nishikawa said. \u201cBy coming [...] WordCamp Ogijima about how everyone has something unique to bring to the community to hel [...] #8221; Bobich said. \u201cBut building something like Just Write shows us that there\u2019s m [...] e of the other noise, this might not be something they end up liking\u2026 or maybe it w [...] Portland WordPress User Group to ask if something I was seeing was possibly an issue that [...] ly add them every time I wanted to test something. As Gutenberg blocks get more dynamic a\ne to evaluate the options and put forth '' bite sized for core to start with. Buil [...] learn how to write my first Behat test ('' that has been on my to-do list for a lo [...]  come out and do a demo of WordPress or '' like that, but generally our plan right [...] to rectify. \u201cThere is also '' special planned but I don\u2019t want  [...] ct with individuals who want to achieve ''; small business owners, designers, phot [...] ors, and anyone who is struggling doing '' on the web,\u201d Nishikawa said. \u201cBy coming [...] WordCamp Ogijima about how everyone has '' unique to bring to the community to hel [...] #8221; Bobich said. \u201cBut building '' like Just Write shows us that there\u2019s m [...] e of the other noise, this might not be '' they end up liking\u2026 or maybe it w [...] Portland WordPress User Group to ask if '' I was seeing was possibly an issue that [...] ly add them every time I wanted to test ''. As Gutenberg blocks get more dynamic a\n+------------+--------------+--------------+------+\n| Table      | Column       | Replacements | Type |\n+------------+--------------+--------------+------+\n| wp_options | option_value | 2            | PHP  |\n+------------+--------------+--------------+------+\nSuccess: 2 replacements to be made.\n\n```. ",
    "ds250568": "yes you are right. This is a bug for which I need a fix or a suggestion how to fix in search-replace command. what ever the value is not replace is in wp_options table in option_value which a default wp table. \nYour this statement \"Note: your issue might also be that the value you want to replace could be serialized in such a way that wp search-replace cannot reliably change it yet.\", I think fits to the situation but it is creating a huge blocker for me. \nCan you provide a fix for this. . ",
    "tofumatt": "Yeah, I'm actually trying that out now, realising that https://github.com/WordPress/gutenberg/commit/0b368452b84a309e416f3a312d969ed8156e4e88 might've been in our code to cover the permissions issue.. Yup, you're totally right. Thanks and sorry for the noise! \ud83d\udc4d. ",
    "bondansebastian": "Thanks for pointing out @wojsmol !. ",
    "truongwp": "Thanks @wojsmol,\nIt solves my problem as well. The WordPress handbook should be updated.. ",
    "jukefr": "curl --silent --show-error https://getcomposer.org/installer | php &&\\\n    php composer.phar config --global github-oauth.github.com $GITHUB_OAUTH &&\\\n    php composer.phar global require wp-cli/wp-cli:1.5.1 &&\\\n    /var/www/.composer/vendor/bin/wp package install jukefr/wp-cli-media-cleanup &&\\\n    /var/www/.composer/vendor/bin/wp package install typisttech/image-optimize-command:0.1.2 &&\\\n    /var/www/.composer/vendor/bin/wp package install wp-cli/profile-command:0.3.0\nwith 1.5.1 no problem\ncurl --silent --show-error https://getcomposer.org/installer | php &&\\\n    php composer.phar config --global github-oauth.github.com $GITHUB_OAUTH &&\\\n    php composer.phar global require wp-cli/wp-cli:2.0.0 &&\\\n    /var/www/.composer/vendor/bin/wp package install jukefr/wp-cli-media-cleanup &&\\\n    /var/www/.composer/vendor/bin/wp package install typisttech/image-optimize-command:0.1.2 &&\\\n    /var/www/.composer/vendor/bin/wp package install wp-cli/profile-command:0.3.0\nall hell breaks loose and get error in 1st post. Alright I skimmed the changelog too fast I guess then, thanks.. ",
    "timkite": "Sadly, if I had the time to do that, I'd happily maintain a local repo of PHP 7 for RHEL6 and 7 and not worry about reverse compatibility. As it stands I understand that the most likely scenario is limping these systems along until we can replace them, and replacing them as quickly as possible.. ",
    "kshaner": "Thanks @schlessera, is this officially documented somewhere I can point colleagues to?. ",
    "Weej1": "Hi @danielbachhuber \nSorry, I tried Slack but on my work PC I can't use it (I assume its blocked via company policies?) I hope you don't mind me using GitHub. \nTo answer your question: I fear plugins may be the reason but we're using WPMU in production and we have over 100 plugins. It's a mix of Active and Inactive - and the inactive ones aren't accurate - they may be inactive for MOST of the sites but might be functioning on one or two portals. \nSo I just can't disable them all - is there a method to test which all plugins that may cause a clash so I can minimize disabling each plugin?. ",
    "chesio": "Hi @Weej1 ,\nwhen running WP-CLI command, you can use --skip-plugins parameter to skip all or specified plugins, see also: https://make.wordpress.org/cli/handbook/identify-plugin-theme-conflict/. @SeBsZ I recommend to open new issue and include more information (run the command with --debug flag for example).. Shouldn't the comparison be reversed here, ie. PHP_MAJOR_VERSION < 7?. ",
    "kitchin": "wp-cli 2.0.1, and the command was wp plugin update jetpack\n. I know why it failed, I'm just reporting the incorrect Success message. It's exactly like #3761, except for updates instead of installs.. Ah, it is a dupe of wp-cli/extension-command#90 . I'll comment there.. ",
    "ventz": "It looks like wptouch is incorrectly casting the array on line 58:\nforeach( $haystack_array as $key => $value ) {\nIt should be:\nforeach( (array) $haystack_array as $key => $value ) {\nI fixed it locally, and it resolved the issue. I contacted them to let them know. Assuming someone missed this on their side recently during an upgrade.. ",
    "jdelvecchio": "Hi, same error here. Theme cannot be found on activate. ",
    "16dyui": "Hi, Theme's name is Internally it is treated in lowercase letters.\nwp theme install Divin --activate  #can't activate\nwp theme install divin --activate  #success\nSupplement\nwp theme install Divin\nwp theme list\n+-----------------+----------+--------+---------+\n| name            | status   | update | version |\n+-----------------+----------+--------+---------+\n| divin           | inactive | none   | 1.1.2   |\n+-----------------+----------+--------+---------+. I found Specification change.\nhttps://github.com/wp-cli/extension-command/pull/126. Issue moved to wp-cli/extension-command #132 via ZenHub\n. ",
    "halilemreozen": "Hi @schlessera  ,\nWhen I use the --skip-plugins flag, yes all of my plugins are being deactivated until I manually re-activate them, when I used this flag I was expecting just skip the plugin load stage only for that wp-cli command.\nIs it should works like wp plugin deactivate --all ?. ",
    "ConanMan": "it is \n   error_reporting(E_ALL);\nini_set('log_errors', 0);\nini_set('display_errors', 1);\n\nif you throw an error it reports it to stdout\n    . no, this happens by design because PHP does what it is told: when you use ini_set('display_errors', 1); and then throw an Error  or Exception (whether otr not you intend for this to happen, it will) PHP ALWAYS reports it to ERROR_LOG immediately so if you use error_reporting(E_ALL); it reports it to STDOUT, if you then try/catch and write error_log($e->getMessage(),0); or echo $e->getMessage() depending on your ini_set('display_errors', 1); / error_reporting(E_ALL); settings you will potentially see it twice. ",
    "KushibikiMashu": "@swissspidy Thank you for your advise!\nI'll check these files and give some commits during WordCamp Tokyo\ud83d\ude04. @swissspidy Hi!\nI read Travis log and tried to modify the code to resolve the problem in failing.\nI'll try to run behat test locally and examine the code in detail\ud83d\ude05\n. ",
    "killua99": "The function main description is:\nphp\n        /**\n     * Get values of global configuration parameters.\n     *\n     * Provides access to `--path=<path>`, `--url=<url>`, and other values of\n         * the [global configuration parameters](https://wp-cli.org/config/).\n        ...\nAs a public static function in case not returning or not finding the option it shouldn't thrown a warning but a debug message in case we want to debug what we know already was NULL. We're getting a NULL from it, is not we're completely blind.\nTo exposed more clearly:\nphp\n// We show a message.\necho \"The message\";\nWhat is the different of:\nphp\necho \"Unknow config ...\";\nreturn null;\nThe logic itself is not been affected. I cannot seem myself checking a warning message after a WP_CLI::get_config() in case of NULL.. @schlessera Double check everything seems ok. Alright, I thought this was week like make none sense what I did, but perhaps with the condition of instanceof perhaps makes more sense. I'll correct it for today.. ",
    "henrywright": "Partially addresses #4541 . Thanks @schlessera for pointing that out and thanks @mkdizajn for reviewing.\nThe following wp-cli repositories will need a change.\n\nhttps://github.com/wp-cli/extension-command\nhttps://github.com/wp-cli/handbook\nhttps://github.com/wp-cli/scaffold-command\nhttps://github.com/wp-cli/core-command\nhttps://github.com/wp-cli/entity-command. \n",
    "SeijiSensei": "Updating to the most recent PHP release for this platform, 5.3.3-49, did not resolve the problem.. I'll see what I can do about upgrading.  I haven't built PHP from source in some time now.  CentOS 6 and RedHat 6 are still a very popular and well-supported platforms.\nStill an \"unexpected [\" error doesn't seem likely to be a versioning problem, but I'll see what I can find.. Works with php client 5.6 from http://repo1.dal.innoscale.net/remi/enterprise/6/php56/x86_64/repoview/\nThanks for the help!. ",
    "Roy-Orbison": "@swissspidy I'm not entirely convinced you actually read the issue. I completely understand why executing such 3rd party code as root is dangerous, hence the compliment above. I tried to make it clear, even giving an example, that I am referring to the literal wp cli ... sub-commands, not wp-cli commands in general. Two have already been whitelisted. I find it hard to believe that it's okay to run wp cli update as root, but not wp cli check-update.. ",
    "cooperdk": "Well, as you can see from my output, I am NOT running thru the webserver SAPI, but CLI and using path, not URL for the Wordpress root.\nAlso, the stated execution time of 300 seconds is not what I have actually set in either PHP-CLI or the webserver's PHP-settings.. ",
    "henriquebs12": "Any updates? I have the same issue. And tried to overwrite in several places the execution time and it just ignores, and keeps the 300 seconds.. ",
    "andreasanta": "+1. ",
    "move[bot]": "@schlessera commented on Oct 23, 2018, 5:57 PM UTC:\nI think I (cautiously) like this idea.\nSome observations:\n\n\nWould the wildcard also work in random locations? I.e., support something like this:\n```\n'@*-dev':\n  require: /some/folder/development-additions.php\n```\n\n\nWhat happens with the {alias} placeholder in nested aliases? Multiple aliases will then be active.\n\n\nHow are groups handled? How is @all handled? There's no list of possible values anymore. Are placeholder-aliases just ignored in these cases?. @drzraf commented on Oct 24, 2018, 2:25 PM UTC:\n\n\nwildcard in random locations, if support is easy, could work the same. preg_match()-based globbing could make it. The issue is more about overlapping expression: first win vs latest win.\n\nI don't know about nested aliases feature. Do you have some doc' about what this means?\nAbout groups, I don't know how both feature would combinate but wildcard-aliases being generic by nature, they could not be handled by @all (=> ignored).. @drzraf commented on Jun 15, 2018, 7:32 PM UTC:\n\nAnother strange behavior:\nyaml\n'@ae':\n    path: /web/wp\ndisabled_commands:\n-   db drop\n(notice the space being between dash and value rather than before the dash)\nis correct YAML (ansible/ansible#28427 (comment))\nbut fails with PHP Warning: in_array() expects parameter 2 to be array, string given in phar:///usr/local/bin/wp/php/WP_CLI/Runner.php on line 541. @schlessera commented on Jun 26, 2018, 5:01 PM UTC:\nThanks for the report, @drzraf !\nI'll have to look in more detail into the Yaml-parsing code. It might well be, that this happens to be a \"close-to-Yaml\" format instead... ;). @schlessera commented on Jun 26, 2018, 5:02 PM UTC:\nNote: In case this turns out to be problematic syntax for Yaml, we will still allow it for backward-compatibility purposes, but we might add an alternative syntax for people that need to parse the file externally as well.. @danielbachhuber commented on Aug 15, 2018, 1:45 PM UTC:\n@drzraf Should we support '@ae' too then?. @drzraf commented on Aug 16, 2018, 1:32 PM UTC:\nI believe '@ae' is the only way to setup dict keys containing special characters, so I'd would say that yes, it should continue to work too (I currently use that notation as a workaround). This issue was moved by schlessera to wp-cli/extension-command#141.. ",
    "VladimirAus": "@swissspidy You need to be more specific. Who is silencing and which error?. Yep, that's exactly what core is doing. \nHappy to do normal call.  . ",
    "mipon": "XAMPP locally on Windows 7. PHP 7.2.5 Apache 2.4.33.0 WP-CLI 2.0.1.\nRunning the below script from browser, it says Enabled as expected.\nphp\necho in_array( 'mod_rewrite', apache_get_modules() ) \n    ? 'Enabled' \n    : 'Not enabled';\nBut if I run the script from console, it gives PHP Fatal error:  Uncaught Error: Call to undefined function apache_get_modules(). \n$ php.exe -i > info.txt\ninfo.txt\n...\nConfiguration File (php.ini) Path => C:\\Windows\nLoaded Configuration File => C:\\xampp7.2\\php\\php.ini\nScan this dir for additional .ini files => (none)\nAdditional .ini files parsed => (none)\n...\nIn browser,\n\n\nSo the same configuration file seems to be loaded.\n. ",
    "bizmate": "your request doesnt sound wp-cli related. Could you please ask on stack overflow?. ",
    "pannous": "sorry, php install is broken . ",
    "FranzArmas": "@schlessera  The variable is defined as follows:\ndefine ('SM_CORE_FILE', __FILE__);\nall that is in the same main file of the plugin\nWhat do you mean with scope? ... Could you explain this a bit more in detail? ...\nI would appreciate it very much.. ",
    "acs-ferreira": "Ok no problem.\nBut even after adding:\nif ( defined( 'WP_CLI' ) && WP_CLI && ! isset( $_SERVER['HTTP_HOST'] ) ) {\n    $_SERVER['HTTP_HOST'] = 'example.com';\n}\nin wp-config.php, PHP notice is gone but wp-cli Could not update option.... ",
    "SeBsZ": "I'm experiencing the same issue. For some reason I can't update home nor siteurl. It doesn't matter what I try to update it to, if it contains the same domain name as my HTTP_HOST then it will fail.\nFor example:\nwp option update siteurl \"http://mydomain.com/wordpress\"\nwill fail with Error: Could not update option 'siteurl. Even when I have defined $_SERVER['HTTP_HOST']. As a workaround, I temporarily override $_SERVER['HTTP_HOST'] with some other domain by using the --url option:\nwp option update siturl \"http://mydomain.com/wordpress\" --url=temp.com\ndoes work, and this allows me to update the setting.\nIs this a bug that is going to be fixed?. ",
    "archon810": "@schlessera Will you reopen this, as it seems like a legitimate bug?. ",
    "ddarbyson": "Yup, I experience this too... After using --position option, my db results also show duplicated menu_order values.\nwp_posts table:\n```\nmenu_order\n\n1\n2\n3 <- duplicate\n3 <- duplicate\n4\n5\n6\n``. Here's a screenshot to showwp_poststable when filtering bynav_menu_item`\n. ",
    "Andargor": "@schlessera I did a wget a second time, same result. Before the previous wget, I had initially used curl from the website install instructions: https://wp-cli.org/\nIt might have something to do with phar not being enabled in HHVM\n```bash\n~ wget https://github.com/wp-cli/wp-cli/releases/download/v2.0.1/wp-cli-2.0.1.phar\n--2018-12-18 16:38:04--  https://github.com/wp-cli/wp-cli/releases/download/v2.0.1/wp-cli-2.0.1.phar\nResolving github.com (github.com)... 192.30.255.113, 192.30.255.112\nConnecting to github.com (github.com)|192.30.255.113|:443... connected.\nHTTP request sent, awaiting response... 302 Found\nLocation: https://github-production-release-asset-2e65be.s3.amazonaws.com/2360755/b3c02c80-a748-11e8-9caa-fd00d36fb85f?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181218%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181218T164014Z&X-Amz-Expires=300&X-Amz-Signature=f5418caca4c928f892017b7e55f248ee362a94dc0f35ca62d903dc4f2fadc12c&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Dwp-cli-2.0.1.phar&response-content-type=application%2Foctet-stream [following]\n--2018-12-18 16:38:05--  https://github-production-release-asset-2e65be.s3.amazonaws.com/2360755/b3c02c80-a748-11e8-9caa-fd00d36fb85f?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20181218%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20181218T164014Z&X-Amz-Expires=300&X-Amz-Signature=f5418caca4c928f892017b7e55f248ee362a94dc0f35ca62d903dc4f2fadc12c&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=attachment%3B%20filename%3Dwp-cli-2.0.1.phar&response-content-type=application%2Foctet-stream\nResolving github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)... 52.217.1.204\nConnecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.217.1.204|:443... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 5366981 (5.1M) [application/octet-stream]\nSaving to: \u2018wp-cli-2.0.1.phar.1\u2019\n100%[========================================================================================================================================>] 5,366,981   5.40MB/s   in 0.9s\n2018-12-18 16:38:06 (5.40 MB/s) - \u2018wp-cli-2.0.1.phar.1\u2019 saved [5366981/5366981]\n```. ",
    "tyrann0us": "Off topic: There seem to be multiple outdated links across several WP-CLI repositories which should probably be checked too.\nExample: Link to docs here: https://make.wordpress.org/cli/handbook/commands-cookbook/#quick-and-dirty-execution.. ",
    "a2d8a4v": "@swissspidy  Sorry for bothering you, I understood, yes you're right, It a bug from wordpress not wp-cli\nPlease help me close the issue, thank you for your caring!. I understood. So maybe It could be the one new function in one day? I think put setting in ~/.ssh/config is also a method to achieve this goal, but wp-cli could have this function itself it could be more great and convenient. Maybe add one more argument --ssh-key-path= or something else like it. I guess.. Thank you very much! Hope the new function would come soon!. ",
    "arbitrarily": "updating wordpress version corrected this for me\nwp core update. ",
    "dependencies[bot]": "This PR has been automatically closed in favor of #5072.. This PR has been automatically closed in favor of #5084.. This PR has been automatically closed in favor of #5087.. This PR has been automatically closed in favor of #5091.. ",
    "Hlsgs": "@schlessera Yes, but the main issue is that wp db create cannot do it's work through PHP and relies on access to mysql.exe. ",
    "salahuddinjony": "Thank for approved!. ",
    "felicianotech": "1) I'm not sure, what are your requirements?\n2) Yes. I can provide a PR for a CircleCI config if you all are still interested. Unless someone tells me no, I'll provide one sometime today (Tuesday).. What's needed for this to run other that PHP, Composer, and MySQL? I'm running into an issue where only 20 of the 73 pass.\n```\nWordPress 5.1\n...F----F------F---F---...F-------F----------F---F-----F----...F--F--- 70\n---F------...F--F------F--F--F-----F----F-----F-------...F-------F---- 140\n-----F-------------F--------F---------F-----------...F--F-----...F---- 210\n--------------F---------F---------F----------F-----F---...F---F-----.. 280\n.F----F---F----F---F---------------F---...F---F---...F--F---F--------- 350\n-F---F----------F--F----........................................F----- 420\n--F---\n(::) failed steps (::)\n\n\n$ wp core install --url='http://example.com' --title='WP CLI Site' --admin_user='admin' --admin_email='admin@example.com' --admin_password='password1' --skip-email\ncwd: /tmp/wp-cli-test-run-check-autoload-options-size.feature.11-5c7f1d949e22e1.01251757/\nrun time: 0.10646200180054\nexit status: 255\nIn step Given a WP install'.                            # vendor/wp-cli/wp-cli-tests/features/steps/given.php:93\nFrom scenarioAutoloaded options are less than 900 kb'. # features/check-autoload-options-size.feature:11\nOf feature `Check the size of autoloaded options'.       # features/check-autoload-options-size.feature\n```\n\n\n73 scenarios (20 passed, 53 failed)\n426 steps (73 passed, 300 skipped, 53 failed)\n0m27.907s\nWhat I currently have for the config: https://gist.github.com/felicianotech/dbeb0c73be2076d9ce3168e1aa243354. I was missing mysqli.\nI'll open a PR in the doctor command repo in the next day or so.. Initial example config for the doctor command: https://github.com/wp-cli/doctor-command/pull/144. ",
    "tristanleboss": "Okay, it does solve the problem. Maybe WP Cli should give an error (\"Database verson mismatch. You need to execute wp core update-db\") when the database is not at the expected/correct version instead of trying to complete the request? Because it may lead to weird WP errors like in my example.. ",
    "prometherion": "Thanks for the support @danielbachhuber!\nHowever, I wanted to test your proposed workaround but even escaping on my own single quote, I still cannot log in.\nI also did an additional test:\nbash-4.4$ wp shell\nwp> wp_set_password(\"it'sweird\", get_user_by('login', \"test.user\")->ID)\n=> NULL\n// unable to login with `it'sweird`\nbash-4.4$ wp shell\nwp> wp_set_password(\"itsweird\", get_user_by('login', \"test.user\")->ID)\n=> NULL\n// able to login with `itsweird`. My bad, you're right... :)\nSince I'm automating all the stuff with Go there were some escaping issues: works like a charm, thanks for the support @danielbachhuber!. ",
    "msaggiorato": "@danielbachhuber added a specific test which fails on the previous version and with the PR works. Hopefully that's enough.. ",
    "glebis": "Hi, ok, thanks, I'll try to fix this soon! (It's my first commit ever to someone else's project so sorry for any inconvenience!) \n\nIn php/commands/scaffold.php:\n\n@@ -146,6 +146,39 @@ function _s( $args, $assoc_args ) {\n}\n-   /\n-    * Generate empty child theme (twentytwelve by default).\n-    \n-    * @synopsis  [--theme_name=] [--parent_theme=] [--author=] [--author_uri=] [--theme_uri=] [--activate]\n-    /\n-   function child_theme( $args, $assoc_args ) {\n  +\n-       $theme_slug = $args[0];\n-       $theme_path = WP_CONTENT_DIR . \"/themes\";\n  +\n-       $data = wp_parse_args( $assoc_args, array(\n-           'theme_name' => ucfirst( $theme_slug ),\n-           'parent_theme' => 'twentytwelve',\n  I'm not sure defaulting to Twentytwelve is a good idea. What if the user deleted it at some point? I think --parent_theme should be a mandatory parameter.\n\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "andrewwoods": "Agreed,  but i was getting an error on the foreach just after it because it wasn't an array. this seemed like the best way to fix it.\n. ",
    "diablodale": "truetrue. Should then we make the sister code in restful also use WP_CLI_TEST_DBHOST?. done. "
}