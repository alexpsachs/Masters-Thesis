{
    "evoactivity": "I get this in FF5. \n. I get this in FF5. \n. ",
    "ericbae": "Any updates on this?\n. Ignore this. This works by pressing enter, after typing each value.\n. Any updates on this?\n. Ignore this. This works by pressing enter, after typing each value.\n. ",
    "fastmanu": "same here with safari 5\n. same here with safari 5\n. ",
    "otac0n": "Same here in FF11.  It only happens after I have removed all text in the field.\n. Also \"NOT\"\n. Same here in FF11.  It only happens after I have removed all text in the field.\n. Also \"NOT\"\n. ",
    "lantins": "Safari 5.1.5 (7534.55.3)\nWhile holding backspace...\nHappens if one or more facets and values have been added.\n. Safari 5.1.5 (7534.55.3)\nWhile holding backspace...\nHappens if one or more facets and values have been added.\n. ",
    "dboze": "Occurs in Chrome 22\n. Occurs in Chrome 22\n. ",
    "oskbor": "I get this on Chrome 22 on Mac OS X 10.8\n. I get this on Chrome 22 on Mac OS X 10.8\n. ",
    "samuelclay": "Now fixed!\n. I'm going to close this pull request in lieu of #43, which addresses the issue slightly differently. But the real cause is that it's a headache of autocomplete debugging and broken keyboard shortcuts that still need to be addressed.\n. Tested with jQuery 1.4.4. Works fine. Added jQuery 1.4.4 in b5dc4c9\n. Apologies for sitting on this. Just moved across the country and am only now getting tethering on my phone so I can work on this during my commute on Caltrain.\nThe idea I started with is that you get the serialized query, but if you want the raw Collection, just ask VS.app.searchQuery for specifics. It's a Backbone Collection, and if you look in search_query.js, you'll notice a handful of convenience functions, such as find, count, values, has, and withoutCategory.\nI'm going to be making VS.js instance-based, so you'll get a reference to the SearchQuery Collection when you instantiate a new visual search. Does this do the trick? It's how we interact with specific facets in DocumentCloud.\n. Exactly, instance-based means you get a local reference after initialization. You will no longer be able to just called VS.options, but instead have to use myVS.options.\nAs for changing the parameters, I'm fine with giving the collection back and having to use queryCollection.serialize() to get the search string you're getting now. I'll change that in later today.\n. Added a second parameter in 0739056a3eb097d8201b2b513e34761ef0420012. It's not exactly this pull request, but it's pretty close. It's the Backbone.Collection of the search facets, so it should be just what you need. Hope that helps.\n. So I closed this in the other pull request, as it was out of scope. Although now I can see the use. If you want to re-submit this pull request with the updated code (and possibly using the new hooks), I would gladly work it in.\n. It depends on whether you add the facet to the unquotable option. If name is in unquotable, then only the first word is added to the facet. Otherwise, it should be quoting it, but only if you are in the facet.\n. This pull request has become a bit mangled. Also, I think a date picker is out of scope for visual search, although I could be convinced otherwise.\n. We just don't have any non-text based inputs.\n. These are great ideas but I'm afraid they are way out of scope for VisualSearch.js. That's a bit beyond the simple use of AND'ing all of the basic facets together. You'd have to have a tertiary value in every facet - the comparison value. That would add an unrealistic bit of complication to the interface.\n. Upgraded to latest jQuery UI and I can now successfully use the scroll bar.\n. How are you clearing the searches? \n. This is proposed in another pull request. I'm thinking of adding in an option to show the facets available after 0 characters--effectively on click/focus.\n. This has launched a few months ago, I just forgot to update this ticket. Try clicking on an empty search box -- it will now show all of the available options. Effectively, minlength = 0.\n. There's a few ways you can focus in to a facet. First off, decide which one you want, and then do one of these types of focus on the facet (try this on demo.html):\nvisualSearch.searchBox.facetViews[0].selectText();\nvisualSearch.searchBox.facetViews[0].enableEdit();\nvisualSearch.searchBox.facetViews[0].setCursorAtEnd();\n. I'm hitting up the backlog of VS.js issues later this week, but I wanted to pop in and say thanks for such an awesome and well-written pull request. This is a fantastic addition. I'll clean up a few more lingering issues, change the search callback, and put out version 0.2 soon.\n. Agreed. Deployed.\n. Yeah, I don't think this is in scope for VisualSearch.js. It seems you could build such a tool, but it wouldn't be something that I plan on offering with VS.\n. Unfortunately for this use case, VisualSearch.js is a text box replacement, so having an image in there doesn't translate to the idea that it is a single string query.\n. I'm able to use dashes in facet names now. Check out the latest code.\n. Just re-initialize the search box with your new query. You'll have to convert it into a full text query, but it should be trivial if it's just checkboxes.\nTry running this on demo.html:\nvisualSearch.searchBox.value('country: \"South Africa\"')\n. The top result is the currently selected value. \n\nCheck to make sure the facet's value is empty.\nAlso, check search_facet.JS -- VS.ui.SearchFacet.autocompleteValues(): http://documentcloud.github.com/visualsearch/docs/search_facet.html#section-11. Note these line:\nresp(_.sortBy(matches, function(match) {\n  if (match == value || match.value == value) return '';\n  else return match;\n}));\nThat's ensuring that the current value is moved to the top.\n. The latest release (0.2.1) allows custom ordering. Enjoy!\n. Thanks for the PR. This took a bit more needling in order to make it work as expected. See 8b0b1004433ae898ab64afaeef4e3c330c645afa for complete details. I also changed the preserveOrder parameter into an options hash, for future-proofing.\n. Great find. Thanks!\n. New features are added because pull requests are offered with the request. While the code may not have been finished, it was enough of an incentive to push the feature through.\niOS is not supported, unfortunately. Since much of VisualSearch.js requires keyboard input, it wouldn't make sense to try to offer the same interface on iOS.\n. Sure thing! So the \"structured search query\" is not actually returned to you. You just have to call it. And I agree, this could be way better documented. I'm adding it to the README now.\n```\n// Returns the unstructured search query\nVS.searchBox.value() \n// country: \"South Africa\" account: 5-samuel title: \"Pentagon Papers\"\n// Returns an array of Facet model instances\nVS.searchQuery.facets()\n// [FacetModel, FacetModel, FacetModel]\n```\n. Take a look at Issue #52, which is effectively the same issue as this. To quote: \" So I'm finally realizing why we can't have this ability. If you click on the label, does it switch to its value? The search query is a literal serialization of the search box. In other words, what you see is what you get. That's why labels are supported for the drop-down but not for the input itself.\nChanging to use labels instead of the values in the search box is out of scope for this type of facetted search. In that case, just present the user with options or a drop down. VisualSearch.js is intended to be a search box enhancement. Unfortunately, this feature does not work with a search box that searches for what you are typing.\"\n. Yeah, right now there's no way to do that. You could easily change the text from 'Text' to something else. VisualSearch is not under active development, so modifying the source wouldn't cause you as much of a headache as it would on a more actively developed project.\n. Ack, this was asked a while ago. Sorry! But yes, you should totally contribute to this. I am aware of this behavior, but never considered it bad enough. But you're right, it should be doing exactly what you describe. If you write it, I'll stick it in. I suppose it's about time to add a CONTRIBUTORS doc, so if you write this up (use demo.html to test) I'll start that list.\n. Yeah, it's something in your CSS. There's an invisible div that's positioned nearby (look for it in the DOM), which is used to measure the width of text. Check the auogrowInput() method to see how it's being created. From https://github.com/documentcloud/visualsearch/blob/master/lib/js/utils/jquery_extensions.js#L29-35:\nvar $tester = $('<div />').css({\n    opacity     : 0,\n    top         : -9999,\n    left        : -9999,\n    position    : 'absolute',\n    whiteSpace  : 'nowrap'\n  }).addClass('VS-input-width-tester').addClass('VS-interface');\nYou'll want to change your styling to allow for that element.\n. Hey, I'm out traveling but this looks great. I'll get to testing it in just a few days. Thanks for being so patient. \n. I'm getting this in today, but there's a few small glitches that arise when the autocomplete list for facet names shows up immediately. I'll try to get that fixed, but another issue is the verbosity of the name facetAutocompleteMinLength. Got any ideas on how to shorten that up a bit? Also, maybe we just want to make it a boolean that controls whether the facet options show up immediately or on a single keystroke? I don't see much of a need for delaying until more than a single character is given.\n. Thanks for this. I cleaned it up a bit, but now demo.html shows the new option.\n. Looks great! Thanks for this.\n. I'm working through this, but I'm not sure that it covers all possible cases. Firstly, I want to change autosearch to searchOnChange (thanks @jashkenas for the suggestion). Secondly, this pull request disables the ability to select an option from a facet's dropdown, so it needs some tweaking.\nOn which specific interactions do you want to disable automatic searching? Pressing enter will search, but so will clicking on a value from the dropdown. Additionally, deleting a facet will also search. Of those three, you want to disable everything but enter? If you select something from the drop down, the value needs to be committed to the facet (saved to its underlying model), which is currently handled in the search code.\nI just want a bit of confirmation on what specific behavior you want to disable, so I can check those cases.\n. Yeah, this is a nice change that I'd love to see, but the real reason it hasn't been implemented is that there are a couple of keyboard shortcuts that break, along with some autocomplete headaches that need to be resolved. I'll keep this pull request open as a reminder, and if there's any additional encouragement, I could be persuaded to finally work through the madness that this feature brings in terms of debugging.\n. Thanks to issue #41, you can now click on a search box and it will show all possible facets.\nAs for this pull request, looks good.\n. Great idea. I'd prefer to have the option be explicit about the filtering behavior rather than the \"preservation\" behavior. It can be defaulted to true, so maybe filterMatches? But just to confirm, you're already filtering server side, right?\n. I'll be adding this feature later this week. Stay tuned. (It's in a branch that I haven't pushed due to lack of time.)\n. Yup, in release 0.3.0.\n. Err, those are the same link. Tried http://jsfiddle.net/GGYCg/2/ but no luck. Got another link?\n. Thanks!\n. You can. Since Backbone is already present on the page, you can just hook into vs.app.searchQuery's events: [add, remove].\nOn the demo.html page, try adding the following:\nwindow.visualSearch.searchQuery.bind('add', function() { console.log(['Added', arguments]); })\nAdditionally, you could serialize the facet and stick it into pushState call in the search callback:\ncallbacks  : {\n        search : function(query, searchCollection) {\n          console.log([\"query\", searchCollection.facets(), query]);\n        }\n }\nYou can then set the value with:\nwindow.visualSearch.searchBox.value(\"Hello: world\")\n. Thanks again!\n. Awesome. I merged this with one change. Thanks!\n. I don't think this fits with any sizable use cases, but it's a fine change to make on a fork. Considering it's such a minor code change, a fork would be just as easy to pull from. But I only see this adding complexity, and if you're already custom rendering at this stage beyond what the callbacks and events provide, then you will likely have to do some serious heroics anyhow.\n. So I'm finally realizing why we can't have this ability. If you click on the label, does it switch to its value? The search query is a literal serialization of the search box. In other words, what you see is what you get. That's why labels are supported for the drop-down but not for the input itself.\nChanging to use labels instead of the values in the search box is out of scope for this type of facetted search. In that case, just present the user with options or a drop down. VisualSearch.js is intended to be a search box enhancement. Unfortunately, this feature does not work with a search box that searches for what you are typing.\n. Yeah, this is a possibility, but only if you use multi-word categories. It's a reasonable expectation, but the solution is to use single-word categories.\n\"state capital\": \"Columbus, Ohio\" year: 2012 \"density function\": \"wave form\"\nThis is too slow to parse for a human, so the expectation is to just use a single word.\n. Went back and got it working. I'll issue a new release after a few more closed bugs, but this is now integrated on master.\n. Vestigial code is vestigial.\n. Just terrific. Thanks!\n. Here you go:\n```\n// Returns the unstructured search query\nvisualSearch.searchBox.value() \n// \"country: \"South Africa\" account: 5-samuel title: \"Pentagon Papers\"\"\n// Returns an array of Facet model instances\nvisualSearch.searchQuery.facets()\n// [FacetModel, \n//  FacetModel, \n//  FacetModel]\n// Set the search query with raw text\nvisualSearch.searchBox.value(\"Country: US State: \\\"New York\\\" Key: Value\")\n``\n. It's the developer's responsibility for doing something to the search query. So serialize the query using the searchBox.value() method, and then send it using ajax or whatever method you were using.\n. A placeholder as an option would make a great pull request. Unquotable menas that the unquotable category will not have quotes around it. This example hasstate` as an unquotable:\ncountry: \"United States\" state: California\nAlthough you probably don't want state as an unquotable, since New York belongs in quotes. If the category is not in unquotable, then it will get wrapped in quotes, even if it's a single word.\n. Looks fixed in #60\n. You can easily just change the facetMatches callback to hide used facets (which you can see by calling visualSearch.searchQuery.pluck(\"category\"))\n. ```\n\n\n\nvisualSearch.searchQuery.pluck(\"category\")\n[\"country\", \"account\", \"U.S. State\", \"filter\", \"access\"]\n``\n. You'll have to use the textual name of the operator. The regex that handles parsing queries isn't setup to support anything but letters and non-letters as word delimiters. \n. Unfortunately, this is a breaking API change. Also, if what you want is the internal data structure (the facet model), then feel free to directly address the facet collection and grab it.\n. Actually, the control is intended to feel like one big text box. So deleting should continue deleting the previous facet's value. As intended, although to be honest I did originally build it this way. But it isn't as natural.\n. The query parser uses a simple regex to figure out words. As long as\\w+matches an entire word in Russian/Cyrillic (and there's no reason it shouldn't) VisualSearch.js should have any problems with Unicode/non-ascii characters.\n. Nice thing about waiting 7 months to address this issue is that it looks like it resolved itself in the latest Firefox. Hurray!\n. Yeah, mobile support wasn't originally a priority, and I feel that just using a non-faceted search box for mobile visitors might work better for you. It's a hard interface to get right with touch. I suppose you could just convert all of the mousedown/click events into touch events, but it would still be wonky. Much of VisualSearch.js is keyboard based.\n. Not easily. VisualSearch uses Backbone, so either use both (ick), or spend a loooong time porting VS over. Hah, good luck.\n. Looks good. Thanks!\n. Aside from the mistake in the singular method, don't bother making a new method. Just extend the current one and I'll accept this pull request. Thanks!\n. I would hook into the callbacks on search and then just manually hit your backbone router to update the url. In the other direction, have your router instantiate the search box with the query you extract from the url. Handle it manually, but use the search callback provided.\n. You will want to handle this on your end, since some folks will be running queries that place an OR between phrases. You should keep a list of used keys, and then when VisualSearch's callbacks check for categories, just don't give the categories that have been used.\n. Make sure you check this against the many edge cases:\n- Deleting facets should show the menu, since the cursor is now placed in the empty spot where the facet was deleted.\n- Arrowing between facets (hit left-left-left-left many times, or similarly with right) should show the menu correctly.\n. This was actually covered in an earlier patch that was a bit more comprehensive. See issue #41 for the pull request. Anyway, it's now in and I'll be pushing a new release shortly.\n. ...and done. Thanks!\n. You should handle this in your code by keeping track of the number of facets and then refusing to autocomplete with more. Otherwise, this is a bit out of scope for the project.\n. Take a look at https://github.com/documentcloud/visualsearch/blob/master/demo.html#L300-L308. It's an easy setting for category labels.\n. Sure! Just inspectvisualSearch.searchBox.currentQueryon click/submit of the button.\n. Good catch, thanks for this!\n. Yup, just updated all vendor dependencies to latest. See commit 1602fec.\n. Thanks for letting me know. It's possible that it is the result of creating a new jQuery UI autocomplete menu. I just upgraded the vendor dependencies to latest, so it's possible this is no longer an issue. Also, looking in search_input.js, where.autocomplete()` is used, it should be recycled until the facet is removed, at which point it is left to the browser to GC.\n. Fair enough point. This makes it easier to get a reference to the resulting VisualSearch object.\n\n\n\nvar vs = VS.init(...);\nI don't believe it's a worthwhile change, but if you feel fit to write up a pull request with this change, I wouldn't object. :-)\n. Does this patch work on the older version of jQuery UI (1.8)? I noticed you removed a preventDefault, which might have unintended consequences for the older jQuery UI.\n. That's a huge undertaking that I don't think will be happening anytime soon. If you would like to submit this as a contribution, I would consider a pull request. Good luck with that. :-)\n. Not sure I understand the issue. I think what you're getting at is that you want to prevent a search from going through if it matches the previous search? I think you should handle this in your implementation and response functions, not in the visualsearch code.\n. Yep, it's easy. Just perform a search with:\nvisualSearch.searchBox.value(\"Country: US State: \\\"New York\\\" Key: Value\")\n. Just upgraded to latest jQuery and jQuery UI.\n. Just added a callback to it, which you can hook onto with a removedFacet callback.\nremovedFacet : function (facet, query, options) {\n  this.app.options.callbacks.removedFacet(facet, query, options);\n}\n. You'll want to build a new view that uses that data you get from visualSearch.searchQuery.facets(). The view for that organizer is on the document-cloud repo: https://github.com/documentcloud/documentcloud/blob/master/public/javascripts/ui/organizer/organizer.js.\n. That's out of scope for this project, but I would just add a flag with a key and value. Instead of ShowOnlyNew, change it to show: new vs. show:all (default).\n. Looks good. I was also able to repro the bug and this fixed it. Thanks!\n. Fixed in #100. Thanks for this! I'll be upgrading the libraries momentarily...\n. Having built the original on Backbone.js, I think there is almost no possible way for this is to rewritten with Angular.js support without a complete rewrite. You might as well start a new project.\n. There is support! You just need to implement the logic yourself in the valueMatches and facetMatches callbacks.\n. Thank you!\n. Well, try to determine how much space you have and limit your facet results/values to only 2 or 3 at a time. Otherwise, see if you can integrate it into the page, since an iframe will never let things like that bleed over the border.\n. This is out of scope for the project, but you shouldn't have much of a problem implementing that with a medium dose of JS.\n. The idea is that the search box matches perfectly what's being sent. I suppose this could change, but it's non-trivial and quite a departure from knowing that the query you see is the query that gets sent.\n. Problem is that for version 0.5.0 they all use template variables. I'd be open to a pull request if somebody wants to take the time to rewrite the templates so that they no longer rely on Underscore's .template.\n. Thanks for this PR, but it needs to follow the convention of the source code around it. Also, I'm not sure what it does, as it looks like it doesn't work. Feel free to fix it up and provide a test case.\n. Thanks!\n. I'm wondering if it's a jQuery 2.0 bug. Try using jQuery 1.10, which is the only supported version.\n. Rranauro's right, just make sure you've included all of the dependencies. Compare the dependencies listed by your browser on http://documentcloud.github.io/visualsearch/ to your own site.\n. See those callbacks in the facetMatches on the VS.js homepage? Stick your ajax call in there, and on success, return your data with the callback function.\n. If you go to the visualsearch.js homepage and open the console and type visualSearch.searchBox.value(), you should get a single string anyhow. You're probably using visualSearch.searchQuery.facets() which gives you the full facet models.\n. I'm not getting the issue in Safari, Firefox, or Chrome. I _just updated all dependencies to latest (backbone, underscore, query, and jquery UI), so I bet that this issue is now fixed.\n. I accepted the PR, but why bother binding to the removeFacets event? By removing a facet, a search event is triggered. Wouldn't that be better to watch, since you can just remain stateless and search on the new query.\n. As you can see with the comment above the search box's removedFacet method, I write:\n// When removing a facet, potentially do something. For now, the adjacent\n// remaining facet is selected, but this is handled by the facet's view,\n// since its position is unknown by the time the collection triggers this\n// remove callback.\nremovedFacet : function (facet, query, options) { ... }\nSo you're not going to have a reference to what was just deleted, so why not just listen to the search event?\n. Is this my code or your code? As for this.box being undefined, check your reference and see what the this keyword points to.\n. Thanks for this PR. This is quite a big one, so I'll only have time to look at it in a few weeks. Ping me if it takes too long. This will require some testing and verification.\n. Thanks! They should update http://bower.io/docs/creating-packages/, which still shows:\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n. You could just add a check to the blur callback for any difference between the latest query and a cached value of the last search query.\n. To achieve what you want just turn the autosearch option false. Search the codebase for references to app.options.autosearch. This turns off automatic searching when removing facets and autocompleting facets.\n. Also, it shouldn't be blurring the input on tab. If that's happening thats a bug and should be filed separately. Make sure you mention your browser and OS.\n. Now fixed!\n. I'm going to close this pull request in lieu of #43, which addresses the issue slightly differently. But the real cause is that it's a headache of autocomplete debugging and broken keyboard shortcuts that still need to be addressed.\n. Tested with jQuery 1.4.4. Works fine. Added jQuery 1.4.4 in b5dc4c9\n. Apologies for sitting on this. Just moved across the country and am only now getting tethering on my phone so I can work on this during my commute on Caltrain.\nThe idea I started with is that you get the serialized query, but if you want the raw Collection, just ask VS.app.searchQuery for specifics. It's a Backbone Collection, and if you look in search_query.js, you'll notice a handful of convenience functions, such as find, count, values, has, and withoutCategory.\nI'm going to be making VS.js instance-based, so you'll get a reference to the SearchQuery Collection when you instantiate a new visual search. Does this do the trick? It's how we interact with specific facets in DocumentCloud.\n. Exactly, instance-based means you get a local reference after initialization. You will no longer be able to just called VS.options, but instead have to use myVS.options.\nAs for changing the parameters, I'm fine with giving the collection back and having to use queryCollection.serialize() to get the search string you're getting now. I'll change that in later today.\n. Added a second parameter in 0739056a3eb097d8201b2b513e34761ef0420012. It's not exactly this pull request, but it's pretty close. It's the Backbone.Collection of the search facets, so it should be just what you need. Hope that helps.\n. So I closed this in the other pull request, as it was out of scope. Although now I can see the use. If you want to re-submit this pull request with the updated code (and possibly using the new hooks), I would gladly work it in.\n. It depends on whether you add the facet to the unquotable option. If name is in unquotable, then only the first word is added to the facet. Otherwise, it should be quoting it, but only if you are in the facet.\n. This pull request has become a bit mangled. Also, I think a date picker is out of scope for visual search, although I could be convinced otherwise.\n. We just don't have any non-text based inputs.\n. These are great ideas but I'm afraid they are way out of scope for VisualSearch.js. That's a bit beyond the simple use of AND'ing all of the basic facets together. You'd have to have a tertiary value in every facet - the comparison value. That would add an unrealistic bit of complication to the interface.\n. Upgraded to latest jQuery UI and I can now successfully use the scroll bar.\n. How are you clearing the searches? \n. This is proposed in another pull request. I'm thinking of adding in an option to show the facets available after 0 characters--effectively on click/focus.\n. This has launched a few months ago, I just forgot to update this ticket. Try clicking on an empty search box -- it will now show all of the available options. Effectively, minlength = 0.\n. There's a few ways you can focus in to a facet. First off, decide which one you want, and then do one of these types of focus on the facet (try this on demo.html):\nvisualSearch.searchBox.facetViews[0].selectText();\nvisualSearch.searchBox.facetViews[0].enableEdit();\nvisualSearch.searchBox.facetViews[0].setCursorAtEnd();\n. I'm hitting up the backlog of VS.js issues later this week, but I wanted to pop in and say thanks for such an awesome and well-written pull request. This is a fantastic addition. I'll clean up a few more lingering issues, change the search callback, and put out version 0.2 soon.\n. Agreed. Deployed.\n. Yeah, I don't think this is in scope for VisualSearch.js. It seems you could build such a tool, but it wouldn't be something that I plan on offering with VS.\n. Unfortunately for this use case, VisualSearch.js is a text box replacement, so having an image in there doesn't translate to the idea that it is a single string query.\n. I'm able to use dashes in facet names now. Check out the latest code.\n. Just re-initialize the search box with your new query. You'll have to convert it into a full text query, but it should be trivial if it's just checkboxes.\nTry running this on demo.html:\nvisualSearch.searchBox.value('country: \"South Africa\"')\n. The top result is the currently selected value. \n\nCheck to make sure the facet's value is empty.\nAlso, check search_facet.JS -- VS.ui.SearchFacet.autocompleteValues(): http://documentcloud.github.com/visualsearch/docs/search_facet.html#section-11. Note these line:\nresp(_.sortBy(matches, function(match) {\n  if (match == value || match.value == value) return '';\n  else return match;\n}));\nThat's ensuring that the current value is moved to the top.\n. The latest release (0.2.1) allows custom ordering. Enjoy!\n. Thanks for the PR. This took a bit more needling in order to make it work as expected. See 8b0b1004433ae898ab64afaeef4e3c330c645afa for complete details. I also changed the preserveOrder parameter into an options hash, for future-proofing.\n. Great find. Thanks!\n. New features are added because pull requests are offered with the request. While the code may not have been finished, it was enough of an incentive to push the feature through.\niOS is not supported, unfortunately. Since much of VisualSearch.js requires keyboard input, it wouldn't make sense to try to offer the same interface on iOS.\n. Sure thing! So the \"structured search query\" is not actually returned to you. You just have to call it. And I agree, this could be way better documented. I'm adding it to the README now.\n```\n// Returns the unstructured search query\nVS.searchBox.value() \n// country: \"South Africa\" account: 5-samuel title: \"Pentagon Papers\"\n// Returns an array of Facet model instances\nVS.searchQuery.facets()\n// [FacetModel, FacetModel, FacetModel]\n```\n. Take a look at Issue #52, which is effectively the same issue as this. To quote: \" So I'm finally realizing why we can't have this ability. If you click on the label, does it switch to its value? The search query is a literal serialization of the search box. In other words, what you see is what you get. That's why labels are supported for the drop-down but not for the input itself.\nChanging to use labels instead of the values in the search box is out of scope for this type of facetted search. In that case, just present the user with options or a drop down. VisualSearch.js is intended to be a search box enhancement. Unfortunately, this feature does not work with a search box that searches for what you are typing.\"\n. Yeah, right now there's no way to do that. You could easily change the text from 'Text' to something else. VisualSearch is not under active development, so modifying the source wouldn't cause you as much of a headache as it would on a more actively developed project.\n. Ack, this was asked a while ago. Sorry! But yes, you should totally contribute to this. I am aware of this behavior, but never considered it bad enough. But you're right, it should be doing exactly what you describe. If you write it, I'll stick it in. I suppose it's about time to add a CONTRIBUTORS doc, so if you write this up (use demo.html to test) I'll start that list.\n. Yeah, it's something in your CSS. There's an invisible div that's positioned nearby (look for it in the DOM), which is used to measure the width of text. Check the auogrowInput() method to see how it's being created. From https://github.com/documentcloud/visualsearch/blob/master/lib/js/utils/jquery_extensions.js#L29-35:\nvar $tester = $('<div />').css({\n    opacity     : 0,\n    top         : -9999,\n    left        : -9999,\n    position    : 'absolute',\n    whiteSpace  : 'nowrap'\n  }).addClass('VS-input-width-tester').addClass('VS-interface');\nYou'll want to change your styling to allow for that element.\n. Hey, I'm out traveling but this looks great. I'll get to testing it in just a few days. Thanks for being so patient. \n. I'm getting this in today, but there's a few small glitches that arise when the autocomplete list for facet names shows up immediately. I'll try to get that fixed, but another issue is the verbosity of the name facetAutocompleteMinLength. Got any ideas on how to shorten that up a bit? Also, maybe we just want to make it a boolean that controls whether the facet options show up immediately or on a single keystroke? I don't see much of a need for delaying until more than a single character is given.\n. Thanks for this. I cleaned it up a bit, but now demo.html shows the new option.\n. Looks great! Thanks for this.\n. I'm working through this, but I'm not sure that it covers all possible cases. Firstly, I want to change autosearch to searchOnChange (thanks @jashkenas for the suggestion). Secondly, this pull request disables the ability to select an option from a facet's dropdown, so it needs some tweaking.\nOn which specific interactions do you want to disable automatic searching? Pressing enter will search, but so will clicking on a value from the dropdown. Additionally, deleting a facet will also search. Of those three, you want to disable everything but enter? If you select something from the drop down, the value needs to be committed to the facet (saved to its underlying model), which is currently handled in the search code.\nI just want a bit of confirmation on what specific behavior you want to disable, so I can check those cases.\n. Yeah, this is a nice change that I'd love to see, but the real reason it hasn't been implemented is that there are a couple of keyboard shortcuts that break, along with some autocomplete headaches that need to be resolved. I'll keep this pull request open as a reminder, and if there's any additional encouragement, I could be persuaded to finally work through the madness that this feature brings in terms of debugging.\n. Thanks to issue #41, you can now click on a search box and it will show all possible facets.\nAs for this pull request, looks good.\n. Great idea. I'd prefer to have the option be explicit about the filtering behavior rather than the \"preservation\" behavior. It can be defaulted to true, so maybe filterMatches? But just to confirm, you're already filtering server side, right?\n. I'll be adding this feature later this week. Stay tuned. (It's in a branch that I haven't pushed due to lack of time.)\n. Yup, in release 0.3.0.\n. Err, those are the same link. Tried http://jsfiddle.net/GGYCg/2/ but no luck. Got another link?\n. Thanks!\n. You can. Since Backbone is already present on the page, you can just hook into vs.app.searchQuery's events: [add, remove].\nOn the demo.html page, try adding the following:\nwindow.visualSearch.searchQuery.bind('add', function() { console.log(['Added', arguments]); })\nAdditionally, you could serialize the facet and stick it into pushState call in the search callback:\ncallbacks  : {\n        search : function(query, searchCollection) {\n          console.log([\"query\", searchCollection.facets(), query]);\n        }\n }\nYou can then set the value with:\nwindow.visualSearch.searchBox.value(\"Hello: world\")\n. Thanks again!\n. Awesome. I merged this with one change. Thanks!\n. I don't think this fits with any sizable use cases, but it's a fine change to make on a fork. Considering it's such a minor code change, a fork would be just as easy to pull from. But I only see this adding complexity, and if you're already custom rendering at this stage beyond what the callbacks and events provide, then you will likely have to do some serious heroics anyhow.\n. So I'm finally realizing why we can't have this ability. If you click on the label, does it switch to its value? The search query is a literal serialization of the search box. In other words, what you see is what you get. That's why labels are supported for the drop-down but not for the input itself.\nChanging to use labels instead of the values in the search box is out of scope for this type of facetted search. In that case, just present the user with options or a drop down. VisualSearch.js is intended to be a search box enhancement. Unfortunately, this feature does not work with a search box that searches for what you are typing.\n. Yeah, this is a possibility, but only if you use multi-word categories. It's a reasonable expectation, but the solution is to use single-word categories.\n\"state capital\": \"Columbus, Ohio\" year: 2012 \"density function\": \"wave form\"\nThis is too slow to parse for a human, so the expectation is to just use a single word.\n. Went back and got it working. I'll issue a new release after a few more closed bugs, but this is now integrated on master.\n. Vestigial code is vestigial.\n. Just terrific. Thanks!\n. Here you go:\n```\n// Returns the unstructured search query\nvisualSearch.searchBox.value() \n// \"country: \"South Africa\" account: 5-samuel title: \"Pentagon Papers\"\"\n// Returns an array of Facet model instances\nvisualSearch.searchQuery.facets()\n// [FacetModel, \n//  FacetModel, \n//  FacetModel]\n// Set the search query with raw text\nvisualSearch.searchBox.value(\"Country: US State: \\\"New York\\\" Key: Value\")\n``\n. It's the developer's responsibility for doing something to the search query. So serialize the query using the searchBox.value() method, and then send it using ajax or whatever method you were using.\n. A placeholder as an option would make a great pull request. Unquotable menas that the unquotable category will not have quotes around it. This example hasstate` as an unquotable:\ncountry: \"United States\" state: California\nAlthough you probably don't want state as an unquotable, since New York belongs in quotes. If the category is not in unquotable, then it will get wrapped in quotes, even if it's a single word.\n. Looks fixed in #60\n. You can easily just change the facetMatches callback to hide used facets (which you can see by calling visualSearch.searchQuery.pluck(\"category\"))\n. ```\n\n\n\nvisualSearch.searchQuery.pluck(\"category\")\n[\"country\", \"account\", \"U.S. State\", \"filter\", \"access\"]\n``\n. You'll have to use the textual name of the operator. The regex that handles parsing queries isn't setup to support anything but letters and non-letters as word delimiters. \n. Unfortunately, this is a breaking API change. Also, if what you want is the internal data structure (the facet model), then feel free to directly address the facet collection and grab it.\n. Actually, the control is intended to feel like one big text box. So deleting should continue deleting the previous facet's value. As intended, although to be honest I did originally build it this way. But it isn't as natural.\n. The query parser uses a simple regex to figure out words. As long as\\w+matches an entire word in Russian/Cyrillic (and there's no reason it shouldn't) VisualSearch.js should have any problems with Unicode/non-ascii characters.\n. Nice thing about waiting 7 months to address this issue is that it looks like it resolved itself in the latest Firefox. Hurray!\n. Yeah, mobile support wasn't originally a priority, and I feel that just using a non-faceted search box for mobile visitors might work better for you. It's a hard interface to get right with touch. I suppose you could just convert all of the mousedown/click events into touch events, but it would still be wonky. Much of VisualSearch.js is keyboard based.\n. Not easily. VisualSearch uses Backbone, so either use both (ick), or spend a loooong time porting VS over. Hah, good luck.\n. Looks good. Thanks!\n. Aside from the mistake in the singular method, don't bother making a new method. Just extend the current one and I'll accept this pull request. Thanks!\n. I would hook into the callbacks on search and then just manually hit your backbone router to update the url. In the other direction, have your router instantiate the search box with the query you extract from the url. Handle it manually, but use the search callback provided.\n. You will want to handle this on your end, since some folks will be running queries that place an OR between phrases. You should keep a list of used keys, and then when VisualSearch's callbacks check for categories, just don't give the categories that have been used.\n. Make sure you check this against the many edge cases:\n- Deleting facets should show the menu, since the cursor is now placed in the empty spot where the facet was deleted.\n- Arrowing between facets (hit left-left-left-left many times, or similarly with right) should show the menu correctly.\n. This was actually covered in an earlier patch that was a bit more comprehensive. See issue #41 for the pull request. Anyway, it's now in and I'll be pushing a new release shortly.\n. ...and done. Thanks!\n. You should handle this in your code by keeping track of the number of facets and then refusing to autocomplete with more. Otherwise, this is a bit out of scope for the project.\n. Take a look at https://github.com/documentcloud/visualsearch/blob/master/demo.html#L300-L308. It's an easy setting for category labels.\n. Sure! Just inspectvisualSearch.searchBox.currentQueryon click/submit of the button.\n. Good catch, thanks for this!\n. Yup, just updated all vendor dependencies to latest. See commit 1602fec.\n. Thanks for letting me know. It's possible that it is the result of creating a new jQuery UI autocomplete menu. I just upgraded the vendor dependencies to latest, so it's possible this is no longer an issue. Also, looking in search_input.js, where.autocomplete()` is used, it should be recycled until the facet is removed, at which point it is left to the browser to GC.\n. Fair enough point. This makes it easier to get a reference to the resulting VisualSearch object.\n\n\n\nvar vs = VS.init(...);\nI don't believe it's a worthwhile change, but if you feel fit to write up a pull request with this change, I wouldn't object. :-)\n. Does this patch work on the older version of jQuery UI (1.8)? I noticed you removed a preventDefault, which might have unintended consequences for the older jQuery UI.\n. That's a huge undertaking that I don't think will be happening anytime soon. If you would like to submit this as a contribution, I would consider a pull request. Good luck with that. :-)\n. Not sure I understand the issue. I think what you're getting at is that you want to prevent a search from going through if it matches the previous search? I think you should handle this in your implementation and response functions, not in the visualsearch code.\n. Yep, it's easy. Just perform a search with:\nvisualSearch.searchBox.value(\"Country: US State: \\\"New York\\\" Key: Value\")\n. Just upgraded to latest jQuery and jQuery UI.\n. Just added a callback to it, which you can hook onto with a removedFacet callback.\nremovedFacet : function (facet, query, options) {\n  this.app.options.callbacks.removedFacet(facet, query, options);\n}\n. You'll want to build a new view that uses that data you get from visualSearch.searchQuery.facets(). The view for that organizer is on the document-cloud repo: https://github.com/documentcloud/documentcloud/blob/master/public/javascripts/ui/organizer/organizer.js.\n. That's out of scope for this project, but I would just add a flag with a key and value. Instead of ShowOnlyNew, change it to show: new vs. show:all (default).\n. Looks good. I was also able to repro the bug and this fixed it. Thanks!\n. Fixed in #100. Thanks for this! I'll be upgrading the libraries momentarily...\n. Having built the original on Backbone.js, I think there is almost no possible way for this is to rewritten with Angular.js support without a complete rewrite. You might as well start a new project.\n. There is support! You just need to implement the logic yourself in the valueMatches and facetMatches callbacks.\n. Thank you!\n. Well, try to determine how much space you have and limit your facet results/values to only 2 or 3 at a time. Otherwise, see if you can integrate it into the page, since an iframe will never let things like that bleed over the border.\n. This is out of scope for the project, but you shouldn't have much of a problem implementing that with a medium dose of JS.\n. The idea is that the search box matches perfectly what's being sent. I suppose this could change, but it's non-trivial and quite a departure from knowing that the query you see is the query that gets sent.\n. Problem is that for version 0.5.0 they all use template variables. I'd be open to a pull request if somebody wants to take the time to rewrite the templates so that they no longer rely on Underscore's .template.\n. Thanks for this PR, but it needs to follow the convention of the source code around it. Also, I'm not sure what it does, as it looks like it doesn't work. Feel free to fix it up and provide a test case.\n. Thanks!\n. I'm wondering if it's a jQuery 2.0 bug. Try using jQuery 1.10, which is the only supported version.\n. Rranauro's right, just make sure you've included all of the dependencies. Compare the dependencies listed by your browser on http://documentcloud.github.io/visualsearch/ to your own site.\n. See those callbacks in the facetMatches on the VS.js homepage? Stick your ajax call in there, and on success, return your data with the callback function.\n. If you go to the visualsearch.js homepage and open the console and type visualSearch.searchBox.value(), you should get a single string anyhow. You're probably using visualSearch.searchQuery.facets() which gives you the full facet models.\n. I'm not getting the issue in Safari, Firefox, or Chrome. I _just updated all dependencies to latest (backbone, underscore, query, and jquery UI), so I bet that this issue is now fixed.\n. I accepted the PR, but why bother binding to the removeFacets event? By removing a facet, a search event is triggered. Wouldn't that be better to watch, since you can just remain stateless and search on the new query.\n. As you can see with the comment above the search box's removedFacet method, I write:\n// When removing a facet, potentially do something. For now, the adjacent\n// remaining facet is selected, but this is handled by the facet's view,\n// since its position is unknown by the time the collection triggers this\n// remove callback.\nremovedFacet : function (facet, query, options) { ... }\nSo you're not going to have a reference to what was just deleted, so why not just listen to the search event?\n. Is this my code or your code? As for this.box being undefined, check your reference and see what the this keyword points to.\n. Thanks for this PR. This is quite a big one, so I'll only have time to look at it in a few weeks. Ping me if it takes too long. This will require some testing and verification.\n. Thanks! They should update http://bower.io/docs/creating-packages/, which still shows:\n{\n  \"name\": \"my-project\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"**/*.txt\"\n  ],\n  \"dependencies\": {\n    \"<name>\": \"<version>\",\n    \"<name>\": \"<folder>\",\n    \"<name>\": \"<package>\"\n  },\n  \"devDependencies\": {\n    \"<test-framework-name>\": \"<version>\"\n  }\n}\n. You could just add a check to the blur callback for any difference between the latest query and a cached value of the last search query.\n. To achieve what you want just turn the autosearch option false. Search the codebase for references to app.options.autosearch. This turns off automatic searching when removing facets and autocompleting facets.\n. Also, it shouldn't be blurring the input on tab. If that's happening thats a bug and should be filed separately. Make sure you mention your browser and OS.\n. ",
    "philfreo": "+1\n. +1\n. +1\n. +1\n. ",
    "ghost": "+1\n. Is there any update on this? I'm in need of this feature as well, and it doesn't appear that anything's changed with the most recent 0.2.2 release\n. Awesome, that's exactly what I needed\n. copy&paste is a very annoying issue for end-users. \nit seems that binding to keyup isn't enough. search \"paste\" here\nhttp://documentcloud.github.com/visualsearch/docs/visualsearch.html\n. +1\n. Is there any update on this? I'm in need of this feature as well, and it doesn't appear that anything's changed with the most recent 0.2.2 release\n. Awesome, that's exactly what I needed\n. copy&paste is a very annoying issue for end-users. \nit seems that binding to keyup isn't enough. search \"paste\" here\nhttp://documentcloud.github.com/visualsearch/docs/visualsearch.html\n. ",
    "tholder": "I would second this but would prefer to see on down key or a help button at the end of search box.\n. I would second this but would prefer to see on down key or a help button at the end of search box.\n. ",
    "delambo": "I cleaned this up, per tswicegood's comment.\njashkenas - are you not interested in this extra parameter, or would you like to see it implemented differently?\n. I fixed the valueObj function, per jashkenas suggestion.\nsamuelclay - do you see any need for this?\n. @samuelclay - passing back a collection sounds good - a lot better than just a serialized string.  Thanks! \n. I cleaned this up, per tswicegood's comment.\njashkenas - are you not interested in this extra parameter, or would you like to see it implemented differently?\n. I fixed the valueObj function, per jashkenas suggestion.\nsamuelclay - do you see any need for this?\n. @samuelclay - passing back a collection sounds good - a lot better than just a serialized string.  Thanks! \n. ",
    "jashkenas": "I think you should ask @samuelclay ... also -- Object in JavaScript has no reduce function. You need to fix your valueObj method.\n. Instead of having the API be a big switch that returns back into a single callback ... might it be better to have the API call for the category of thing it's looking for directly?\n```\naccountMatches: function(callback) { ... },\ntitleMatches: function(callback) { ... },\npersonMatches: function(callback) { ... },\n```\netc.\n. Fair enough. Sounds like a plan.\n. Yes -- I believe Sam and I have discussed this before, thanks for bringing it up. We should change the behavior so that, after tabbing through the facets to the right-hand edge of the search box, you exit to the next input.\n. Nothing like that is in the cards -- DocumentCloud doesn't have any real structured date data by default. Sounds like it would make for a great plugin, or fork, depending on how you implement it.\n. Hmm. I wonder if this is a jQuery.autocomplete bug.\n. How about calling it VS.VisualSearch instead of VS.Instance?\nOtherwise, if you can do a \"find in project\", and not see any \"VS.app\" or \"VS.options\" lingering on, I think we're good.\n. To argue for the opposition -- I'm thinking that we should stop having facet deletion fire callbacks ... usually when I want to delete a facet, it's because I'm about to type in something else ... not because I want to search for the more general case -- when I do, it's easy enough to press Enter.\n. Pinging @samuelclay.\n. This smells a bit funny -- given that the user is entering text in a field ... the value has to be a string. Just put value: \"100\" in your code instead.\n. Nice stuff. Pinging @samuelclay to take a peek at this.\n. This looks like a good option to have -- but I wonder about what the name of the config should be... Any thoughts, @samuelclay?\n. Guys -- please cut it out with the +1's. They're terribly bad etiquette on GitHub. Thanks!\n. For what it's worth -- the behavior is due to the fact that in DocumentCloud (the original implementation), it's likely to have valid user-defined facets that the client doesn't know about. So you need to be able to enter anything as a facet, if you wish.\nThat said, if you want to contribute an option that turns this behavior on and off...\n. I think you should ask @samuelclay ... also -- Object in JavaScript has no reduce function. You need to fix your valueObj method.\n. Instead of having the API be a big switch that returns back into a single callback ... might it be better to have the API call for the category of thing it's looking for directly?\n```\naccountMatches: function(callback) { ... },\ntitleMatches: function(callback) { ... },\npersonMatches: function(callback) { ... },\n```\netc.\n. Fair enough. Sounds like a plan.\n. Yes -- I believe Sam and I have discussed this before, thanks for bringing it up. We should change the behavior so that, after tabbing through the facets to the right-hand edge of the search box, you exit to the next input.\n. Nothing like that is in the cards -- DocumentCloud doesn't have any real structured date data by default. Sounds like it would make for a great plugin, or fork, depending on how you implement it.\n. Hmm. I wonder if this is a jQuery.autocomplete bug.\n. How about calling it VS.VisualSearch instead of VS.Instance?\nOtherwise, if you can do a \"find in project\", and not see any \"VS.app\" or \"VS.options\" lingering on, I think we're good.\n. To argue for the opposition -- I'm thinking that we should stop having facet deletion fire callbacks ... usually when I want to delete a facet, it's because I'm about to type in something else ... not because I want to search for the more general case -- when I do, it's easy enough to press Enter.\n. Pinging @samuelclay.\n. This smells a bit funny -- given that the user is entering text in a field ... the value has to be a string. Just put value: \"100\" in your code instead.\n. Nice stuff. Pinging @samuelclay to take a peek at this.\n. This looks like a good option to have -- but I wonder about what the name of the config should be... Any thoughts, @samuelclay?\n. Guys -- please cut it out with the +1's. They're terribly bad etiquette on GitHub. Thanks!\n. For what it's worth -- the behavior is due to the fact that in DocumentCloud (the original implementation), it's likely to have valid user-defined facets that the client doesn't know about. So you need to be able to enter anything as a facet, if you wish.\nThat said, if you want to contribute an option that turns this behavior on and off...\n. ",
    "tswicegood": "fyi, @delambo, if you include the \"@\" before a name, it'll show up as a notification to the person if they aren't participating.  Not sure if @samuelclay is getting notifications here or not beyond what @jashkenas said.\nI'm on the fence about this change.  Do you need both query and queryObj to be passed in?  I'd prefer one or the other as they seem to provide duplicate data.  I lean toward including a real object instead of a string as I think that's more useful, but I wonder if we shouldn't just pass the raw Collection in.  That provides a lot more functionality than a simple value object and makes sure that any changes made during search are propagated back up the chain (not that it's a good idea to change them during the searchEvent, but\u2026)\nOne other thing I would add here is turning the search callback to function(query, callback) and use callback to determine whether it passed or failed.  That allows it to fail asynchronously and brings it in line with facetMatches and valueMatches.\n. Not sure I follow on the \"VS.js instance-based\" comment.  Something like:\nvar myVS = VS.init({})\n  myVS.search.count()\n??  That could work, but I do like the idea of each callback being handed the data that makes sense for it to have.  That makes it easier to re-use callbacks across multiple instances.\n. Hope it wasn't too presumptive of me, but I went ahead and committed the rebuilt versions that include the new code.  If that gets in the way of a merge due to conflicts, let me know and I'll revert that commit.\n. For the valueMatches I actually have a working copy locally that delegates everything to the server side along the lines of (possible encoding issues aside):\nvalueMatches : function(category, callback) {\n  $.getJSON(\"http://example.com/search/values/?category=\" + category, callback);\n},\nfacetMatches : function(callback) {\n  $.getJSON(\"http://example.com/search/facets/\", callback);\n}\nI think both valueMatches and facetMatches are going to be dynamic like these in a lot of cases.  If the facets change, it gets tricky to handle all of the <type>Matches().  Thoughts?\n. This probably still needs some work, but it's starting down the right path and demo.html works with two different VS boxes.\n. This is ready.  TL;DR, VS.init still works, but it returns a VS.Instance object and all of the internals are updated to use that rather than the VS.app global object.  There was talk about making the syntax new VisualSearch(\"#some_selector\"), but that's not BC.  Might be a better long-term solution, but my goal was to make it work. :-)\nAny comments or feedback?\n. Already a step ahead of you.  grep was how I found all of them in the first place. :-)\nChanged the name in c76409995471a83e9ee897982658f6217a9b8b50, so I think we're ready.\n. Thank for doing all of the heavy lifting and getting this off of the ground. :-)\nOne thing I may add is the ability to limit the number of results that can be added. I have a use case where I may end up with just one result. \n. This is ready to be pulled.  I haven't documented this outside of the annotated docs.  That can be done, but my thought is that someone wanting to hook into something that deep into VS is going to go looking. :-)\n. heh - ignore my comments.  I forgot that most of the web still requires a reload to make sure you're looking at the latest.\nThanks for the quick merge.\n. Big +1 on this.  We've got some code in hatband that needs it.\n. fyi, @delambo, if you include the \"@\" before a name, it'll show up as a notification to the person if they aren't participating.  Not sure if @samuelclay is getting notifications here or not beyond what @jashkenas said.\nI'm on the fence about this change.  Do you need both query and queryObj to be passed in?  I'd prefer one or the other as they seem to provide duplicate data.  I lean toward including a real object instead of a string as I think that's more useful, but I wonder if we shouldn't just pass the raw Collection in.  That provides a lot more functionality than a simple value object and makes sure that any changes made during search are propagated back up the chain (not that it's a good idea to change them during the searchEvent, but\u2026)\nOne other thing I would add here is turning the search callback to function(query, callback) and use callback to determine whether it passed or failed.  That allows it to fail asynchronously and brings it in line with facetMatches and valueMatches.\n. Not sure I follow on the \"VS.js instance-based\" comment.  Something like:\nvar myVS = VS.init({})\n  myVS.search.count()\n??  That could work, but I do like the idea of each callback being handed the data that makes sense for it to have.  That makes it easier to re-use callbacks across multiple instances.\n. Hope it wasn't too presumptive of me, but I went ahead and committed the rebuilt versions that include the new code.  If that gets in the way of a merge due to conflicts, let me know and I'll revert that commit.\n. For the valueMatches I actually have a working copy locally that delegates everything to the server side along the lines of (possible encoding issues aside):\nvalueMatches : function(category, callback) {\n  $.getJSON(\"http://example.com/search/values/?category=\" + category, callback);\n},\nfacetMatches : function(callback) {\n  $.getJSON(\"http://example.com/search/facets/\", callback);\n}\nI think both valueMatches and facetMatches are going to be dynamic like these in a lot of cases.  If the facets change, it gets tricky to handle all of the <type>Matches().  Thoughts?\n. This probably still needs some work, but it's starting down the right path and demo.html works with two different VS boxes.\n. This is ready.  TL;DR, VS.init still works, but it returns a VS.Instance object and all of the internals are updated to use that rather than the VS.app global object.  There was talk about making the syntax new VisualSearch(\"#some_selector\"), but that's not BC.  Might be a better long-term solution, but my goal was to make it work. :-)\nAny comments or feedback?\n. Already a step ahead of you.  grep was how I found all of them in the first place. :-)\nChanged the name in c76409995471a83e9ee897982658f6217a9b8b50, so I think we're ready.\n. Thank for doing all of the heavy lifting and getting this off of the ground. :-)\nOne thing I may add is the ability to limit the number of results that can be added. I have a use case where I may end up with just one result. \n. This is ready to be pulled.  I haven't documented this outside of the annotated docs.  That can be done, but my thought is that someone wanting to hook into something that deep into VS is going to go looking. :-)\n. heh - ignore my comments.  I forgot that most of the web still requires a reload to make sure you're looking at the latest.\nThanks for the quick merge.\n. Big +1 on this.  We've got some code in hatband that needs it.\n. ",
    "Mischosch": "+1 for it - would be really nice to have it!\n. +1 for it - would be really nice to have it!\n. ",
    "ulmus": "Easiest way would probably be through the jquery UI datepicker plugin, seeing as you already require jquery UI. Then you get i18n of the datepicker for free. I'll see what I can get together, I'm not an expert backbone.js programmer, but I've done some tinkering.\n. I'm looking at some way to add options to facets (for a more general way of handling different kind of facets), right now I'm adding an option to the VS.init() called categoryOptions like this:\nVS.init = function(options) {\n  var defaults = {\n    container       : '',\n    query           : '',\n    unquotable      : [],\n    categoryOptions : [],\n    callbacks       : {\n      search          : $.noop,\n      focus           : $.noop,\n      facetMatches    : $.noop,\n      valueMatches    : $.noop\n    }\n  };\nThis could be set on the format:\ncategoryOptions : [\n  {category: 'dates', suggest: 'date'},\n]\nAnd the facetMatches could look like this:\nfacetMatches : function(callback) {\n  callback([\n    'author', 'title', 'editor',\n    { label: 'written',    category: 'dates' },\n    { label: 'last edited', category: 'dates' },\n    { label: 'published', category: 'dates' },\n  ]);\n}\nThis way further suggest types could be added later on and other category options. As this addition is kind of broad in nature and I'm not fully initiated in your code or thinking, it would be great with some feedback on this way to handle options. Any other ideas?\n. Easiest way would probably be through the jquery UI datepicker plugin, seeing as you already require jquery UI. Then you get i18n of the datepicker for free. I'll see what I can get together, I'm not an expert backbone.js programmer, but I've done some tinkering.\n. I'm looking at some way to add options to facets (for a more general way of handling different kind of facets), right now I'm adding an option to the VS.init() called categoryOptions like this:\nVS.init = function(options) {\n  var defaults = {\n    container       : '',\n    query           : '',\n    unquotable      : [],\n    categoryOptions : [],\n    callbacks       : {\n      search          : $.noop,\n      focus           : $.noop,\n      facetMatches    : $.noop,\n      valueMatches    : $.noop\n    }\n  };\nThis could be set on the format:\ncategoryOptions : [\n  {category: 'dates', suggest: 'date'},\n]\nAnd the facetMatches could look like this:\nfacetMatches : function(callback) {\n  callback([\n    'author', 'title', 'editor',\n    { label: 'written',    category: 'dates' },\n    { label: 'last edited', category: 'dates' },\n    { label: 'published', category: 'dates' },\n  ]);\n}\nThis way further suggest types could be added later on and other category options. As this addition is kind of broad in nature and I'm not fully initiated in your code or thinking, it would be great with some feedback on this way to handle options. Any other ideas?\n. ",
    "alex-caelus": "Ulmus has passed this problem to me (he is my employer) and I have made a pull request on a possible solution. \nPlease comment on it :)\n. Ulmus has passed this problem to me (he is my employer) and I have made a pull request on a possible solution. \nPlease comment on it :)\n. ",
    "masklinn": "I think this could be better done via custom facet views (if @samuelclay is OK with pull request 50, which adds a hook for that). Although that would be easier if there was some sort of \"readonly\" minimally complete search facet (I'm trying to extract one but it's a bit gnarly as there's lots of code to keep in order to not break VS's nice keyboard-based behaviors) which could be extended to alter/edit the \"value\" half with customizable display and behavior.\nThat way, there wouldn't be a need to stuff VS.ui.SearchFacet, some sort of DateFacetView could be instantiated instead iif the facet to render calls for datetime picking.\n. Sorry, second link should have been http://jsfiddle.net/GGYCg/\n. Wrong branch\n. I think this could be better done via custom facet views (if @samuelclay is OK with pull request 50, which adds a hook for that). Although that would be easier if there was some sort of \"readonly\" minimally complete search facet (I'm trying to extract one but it's a bit gnarly as there's lots of code to keep in order to not break VS's nice keyboard-based behaviors) which could be extended to alter/edit the \"value\" half with customizable display and behavior.\nThat way, there wouldn't be a need to stuff VS.ui.SearchFacet, some sort of DateFacetView could be instantiated instead iif the facet to render calls for datetime picking.\n. Sorry, second link should have been http://jsfiddle.net/GGYCg/\n. Wrong branch\n. ",
    "oshanz": "@samuelclay why do you think its out of scope.?\n. @samuelclay why do you think its out of scope.?\n. ",
    "archaeron": "plus maybe the AND's and and OR's should be localizable :)\n. I've seen now that this is present at the moment more or less (my first test didn't work, the second did).\nBut there is a problem.\nIn the example above, if i type 'a' the facet in the dropdown says: 'address' and when i klick it it is changed to the expected 'Adresse'\n. nice. Thank you for this.\n. i have merged it in for my own version. It's working\n. plus maybe the AND's and and OR's should be localizable :)\n. I've seen now that this is present at the moment more or less (my first test didn't work, the second did).\nBut there is a problem.\nIn the example above, if i type 'a' the facet in the dropdown says: 'address' and when i klick it it is changed to the expected 'Adresse'\n. nice. Thank you for this.\n. i have merged it in for my own version. It's working\n. ",
    "mrchief": "This would be a great addition.\n. This is an enhancement and not an issue but my github-fu is obviously weak.\n. This would be a great addition.\n. This is an enhancement and not an issue but my github-fu is obviously weak.\n. ",
    "lukasztyrala": "Same problem for me.\n. Same problem for me.\n. ",
    "mgcrea": "Any news / possible fix on this issue?\n. Any news / possible fix on this issue?\n. ",
    "juherpin": "I made a test with jquery.autocomplete only and there's no bug.\n. I made a test with jquery.autocomplete only and there's no bug.\n. ",
    "ChetanGoti": "still not fixed after 10 months ?\n. duplicate.\n. still not fixed after 10 months ?\n. duplicate.\n. ",
    "ChrisMcKee": "Bug still exists. Tested using the demo http://documentcloud.github.com/visualsearch/#demo \nIf you type country, enter, the country list appears; try to drag the scroll down (rather than say using a mouse wheel)\nChrome 18.0.1025.168 m \nWin7 x64 \n. Sorry, posted this on behalf of one of our front-end-devs; I believe this was simply pressing backspace till the box was empty.\n. perfect :)\n. Bug still exists. Tested using the demo http://documentcloud.github.com/visualsearch/#demo \nIf you type country, enter, the country list appears; try to drag the scroll down (rather than say using a mouse wheel)\nChrome 18.0.1025.168 m \nWin7 x64 \n. Sorry, posted this on behalf of one of our front-end-devs; I believe this was simply pressing backspace till the box was empty.\n. perfect :)\n. ",
    "tphalp": "Bug still there. I tested it the same way that ChrisMcKee did. Any drop-down that requires a scrollbar exhibits the behavior, it seems.\nChrome 22.0.1229.79 m\nWin7 x64\n. Bug still there. I tested it the same way that ChrisMcKee did. Any drop-down that requires a scrollbar exhibits the behavior, it seems.\nChrome 22.0.1229.79 m\nWin7 x64\n. ",
    "mgmorcos": "Presents in Chrome on Ubuntu as well.\nUbuntu 12.04, Google Chrome 21.0.1180.89\n. Presents in Chrome on Ubuntu as well.\nUbuntu 12.04, Google Chrome 21.0.1180.89\n. ",
    "jaygooby": "Also same problem in Safari 5.1.7 OS X 10.7.5\n. Also same problem in Safari 5.1.7 OS X 10.7.5\n. ",
    "belenos12345": "It seems there was a problem with jQuery. That has been fixed.\nBut actually I'm having the scrollbar problem with IE. I'm using the latest jQuery / UI / etc. versions. Even the VisualSearch demo shows the bug in IE.\nIs there any work around?\n. I'm looking for such an option, too. Is there any chance to implement it? Would be great!\n. It seems there was a problem with jQuery. That has been fixed.\nBut actually I'm having the scrollbar problem with IE. I'm using the latest jQuery / UI / etc. versions. Even the VisualSearch demo shows the bug in IE.\nIs there any work around?\n. I'm looking for such an option, too. Is there any chance to implement it? Would be great!\n. ",
    "WildStyle69": "@belenos12345  -- please see my temporary workaround for IE in issue #132 \n. This is still an issue - its a bit of a hack, however I coded a temporary work-around to enable my projects current code to be usable... as this was a complete blocker for us, as the client uses IE.\nSo... in the two places that the Autocomplete is instantiated I added the following code.\n1) To the 'open' event:\njavascript\nthis.box.autocomplete('widget').on({\n    mouseover: function () {\n        $(box).data('uiwidgetfocused', true);\n    },\n    mouseout: function () {\n        $(box).data('uiwidgetfocused', false);\n    }\n});\n2) Immediately after / oustside the code block above where the Autocompleted is instantiated:\njavascript\nvar $box = this.box;\nvar originalClose = $(this.box).data(\"ui-autocomplete\").close;\n$(this.box).data(\"ui-autocomplete\").close = function (event) {\n    var uiwidgetfocused = $($box).data('uiwidgetfocused');\n    if ((uiwidgetfocused === undefined) || !uiwidgetfocused) {\n        originalClose.apply(this, arguments);\n    }\n};\nLike I say.. its not beautiful, however it seems to work well and got me out of a pinch.\nCheers...\n//WildStyle\n. @belenos12345  -- please see my temporary workaround for IE in issue #132 \n. This is still an issue - its a bit of a hack, however I coded a temporary work-around to enable my projects current code to be usable... as this was a complete blocker for us, as the client uses IE.\nSo... in the two places that the Autocomplete is instantiated I added the following code.\n1) To the 'open' event:\njavascript\nthis.box.autocomplete('widget').on({\n    mouseover: function () {\n        $(box).data('uiwidgetfocused', true);\n    },\n    mouseout: function () {\n        $(box).data('uiwidgetfocused', false);\n    }\n});\n2) Immediately after / oustside the code block above where the Autocompleted is instantiated:\njavascript\nvar $box = this.box;\nvar originalClose = $(this.box).data(\"ui-autocomplete\").close;\n$(this.box).data(\"ui-autocomplete\").close = function (event) {\n    var uiwidgetfocused = $($box).data('uiwidgetfocused');\n    if ((uiwidgetfocused === undefined) || !uiwidgetfocused) {\n        originalClose.apply(this, arguments);\n    }\n};\nLike I say.. its not beautiful, however it seems to work well and got me out of a pinch.\nCheers...\n//WildStyle\n. ",
    "iksnimak": "Hi, \nWildStyle69, I tried your fixing code, but it doesn't work for me. Maybe I understood wrongly where to put changes. Can you support a full code of modified version of visualsearch.js ?\nI tried something like this:\n``` javascript\n                        ...\n            this.box.autocomplete({\n                source    : .bind(this.autocompleteValues, this),\n                minLength : 0,\n                delay     : 0,\n                autoFocus : true,\n                position  : {offset : \"0 5\"},\n                create    : .bind(function(e, ui) {\n                    $(this.el).find('.ui-autocomplete-input').css('z-index','auto');\n                }, this),\n                select    : .bind(function(e, ui) {\n                    e.preventDefault();\n                    var originalValue = this.model.get('value');\n                    this.set(ui.item.value);\n                    if (originalValue != ui.item.value || this.box.val() != ui.item.value) {\n                        if (this.app.options.autosearch) {\n                            this.search(e);\n                        } else {\n                            this.app.searchBox.renderFacets();\n                            this.app.searchBox.focusNextFacet(this, 1, {viewPosition: this.options.order});\n                        }\n                    }\n                    return false;\n                }, this),\n                open      : .bind(function(e, ui) {\n                    var box = this.box;\n                    this.box.autocomplete('widget').find('.ui-menu-item').each(function() {\n                        var $value = $(this),\n                            autoCompleteData = $value.data('item.autocomplete') || $value.data('ui-autocomplete-item');\n                    if (autoCompleteData['value'] == box.val() && box.data('ui-autocomplete').menu.activate) {\n                        box.data('ui-autocomplete').menu.activate(new $.Event(\"mouseover\"), $value);\n                    }\n                });\n                // part 1 of extracode\n                this.box.autocomplete('widget').on({\n                    mouseover: function () {\n                        $(box).data('uiwidgetfocused', true);\n                    },\n                    mouseout: function () {\n                        $(box).data('uiwidgetfocused', false);\n                    }\n                });\n                // end part 1 of extracode\n            }, this)\n        });\n        // part 2 of extracode\n        var $box = this.box;\n        var originalClose = $(this.box).data(\"ui-autocomplete\").close;\n        $(this.box).data(\"ui-autocomplete\").close = function (event) {\n            var uiwidgetfocused = $($box).data('uiwidgetfocused');\n            if ((uiwidgetfocused === undefined) || !uiwidgetfocused) {\n                originalClose.apply(this, arguments);\n            }\n        }; \n        // end part 2 of extracode\n        ...\n\n```\n. Hi, \nWildStyle69, I tried your fixing code, but it doesn't work for me. Maybe I understood wrongly where to put changes. Can you support a full code of modified version of visualsearch.js ?\nI tried something like this:\n``` javascript\n                        ...\n            this.box.autocomplete({\n                source    : .bind(this.autocompleteValues, this),\n                minLength : 0,\n                delay     : 0,\n                autoFocus : true,\n                position  : {offset : \"0 5\"},\n                create    : .bind(function(e, ui) {\n                    $(this.el).find('.ui-autocomplete-input').css('z-index','auto');\n                }, this),\n                select    : .bind(function(e, ui) {\n                    e.preventDefault();\n                    var originalValue = this.model.get('value');\n                    this.set(ui.item.value);\n                    if (originalValue != ui.item.value || this.box.val() != ui.item.value) {\n                        if (this.app.options.autosearch) {\n                            this.search(e);\n                        } else {\n                            this.app.searchBox.renderFacets();\n                            this.app.searchBox.focusNextFacet(this, 1, {viewPosition: this.options.order});\n                        }\n                    }\n                    return false;\n                }, this),\n                open      : .bind(function(e, ui) {\n                    var box = this.box;\n                    this.box.autocomplete('widget').find('.ui-menu-item').each(function() {\n                        var $value = $(this),\n                            autoCompleteData = $value.data('item.autocomplete') || $value.data('ui-autocomplete-item');\n                    if (autoCompleteData['value'] == box.val() && box.data('ui-autocomplete').menu.activate) {\n                        box.data('ui-autocomplete').menu.activate(new $.Event(\"mouseover\"), $value);\n                    }\n                });\n                // part 1 of extracode\n                this.box.autocomplete('widget').on({\n                    mouseover: function () {\n                        $(box).data('uiwidgetfocused', true);\n                    },\n                    mouseout: function () {\n                        $(box).data('uiwidgetfocused', false);\n                    }\n                });\n                // end part 1 of extracode\n            }, this)\n        });\n        // part 2 of extracode\n        var $box = this.box;\n        var originalClose = $(this.box).data(\"ui-autocomplete\").close;\n        $(this.box).data(\"ui-autocomplete\").close = function (event) {\n            var uiwidgetfocused = $($box).data('uiwidgetfocused');\n            if ((uiwidgetfocused === undefined) || !uiwidgetfocused) {\n                originalClose.apply(this, arguments);\n            }\n        }; \n        // end part 2 of extracode\n        ...\n\n```\n. ",
    "sunflowerlab": "Any update on this bug?\n. I am new to visual search. Can you provide source code for this? I like to hide the facet once its used in search. Thanks\n. Any update on this bug?\n. I am new to visual search. Can you provide source code for this? I like to hide the facet once its used in search. Thanks\n. ",
    "EugeneLiang": "+2\n. +2\n. ",
    "olgen": "+3\n. Works fine for me in: Chrome 5.0.1364.99 and Safari 6.0.2 (8536.26.17).\nThanks a lot, @dennis-g !\n. I would be interested in helping. Switching all to ng currently...\nAm 25.04.2013 10:26 schrieb \"Prajwal Manjunath\" notifications@github.com:\n\nThis isn't really an issue; just a shout out to check if anyone is\ninterested in helping me port this to AngularJS. To me it's both a learning\nexercise, and to test how far Angular can be taken without jQuery.\nI've started on this actually, it probably even has a better base (my\nimplementation can take more than 2 levels of menus), but the UI\nimplementation really has me flummoxed. If anyone is interested do PM me.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/documentcloud/visualsearch/issues/101\n.\n. +3\n. Works fine for me in: Chrome 5.0.1364.99 and Safari 6.0.2 (8536.26.17).\n\nThanks a lot, @dennis-g !\n. I would be interested in helping. Switching all to ng currently...\nAm 25.04.2013 10:26 schrieb \"Prajwal Manjunath\" notifications@github.com:\n\nThis isn't really an issue; just a shout out to check if anyone is\ninterested in helping me port this to AngularJS. To me it's both a learning\nexercise, and to test how far Angular can be taken without jQuery.\nI've started on this actually, it probably even has a better base (my\nimplementation can take more than 2 levels of menus), but the UI\nimplementation really has me flummoxed. If anyone is interested do PM me.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/documentcloud/visualsearch/issues/101\n.\n. \n",
    "ewang": "Your argument makes sense. However, I think it'd make sense for the \"clear all\" to return the results list to the original, unfiltered state. The issue I am facing right now is to have the results list be representative of the query. It becomes confusing if the user forgets to press enter. What about changing the current behaviors to having 2 config flags that can be optionally enabled to fire callbacks on facet deletion and \"clear all\". Alternatively, we can fire the current facet deletion callback upon unfocus and not on each facet deletion.\n. Your argument makes sense. However, I think it'd make sense for the \"clear all\" to return the results list to the original, unfiltered state. The issue I am facing right now is to have the results list be representative of the query. It becomes confusing if the user forgets to press enter. What about changing the current behaviors to having 2 config flags that can be optionally enabled to fire callbacks on facet deletion and \"clear all\". Alternatively, we can fire the current facet deletion callback upon unfocus and not on each facet deletion.\n. ",
    "gsf": "I'm not seeing how a multiple-select would work with the UI for VisualSearch. I really appreciate the way one can compose a search without the mouse -- how would one select multiple with just the keyboard? \nAs it stands now, one could enter \"state: Alabama  state: California  state: Missouri\" -- would that suit your requirement?\n. I'm not seeing how a multiple-select would work with the UI for VisualSearch. I really appreciate the way one can compose a search without the mouse -- how would one select multiple with just the keyboard? \nAs it stands now, one could enter \"state: Alabama  state: California  state: Missouri\" -- would that suit your requirement?\n. ",
    "MB34": "No, Majority of our users use mouse but I'm not counting out KB users. To select multiples in regular combo, you use arrow keys and space bar.\n. No, Majority of our users use mouse but I'm not counting out KB users. To select multiples in regular combo, you use arrow keys and space bar.\n. ",
    "doobdargent": "javascript\nresp(matches);\nwas the answer. \nI'm a no-brainer sometimes!\n. javascript\nresp(matches);\nwas the answer. \nI'm a no-brainer sometimes!\n. ",
    "richstandbrook": "This would be really great!\n. This would be really great!\n. ",
    "magicshui": "There comes an error --->\nUncaught TypeError: Object # has no method 'blur'\nVS.ui.SearchBox.Backbone.View.extend.removeFocus            search_box.js:366\nVS.ui.SearchFacet.Backbone.View.extend.disableEdits           earch_facet.js:229\nVS.ui.SearchFacet.Backbone.View.extend.remove                    search_facet.js:310\nf.event.dispatch                                                                                  jquery-1.7.min.js:3\nf.event.add.h.handle.i\nHow to solve it?\n. There comes an error --->\nUncaught TypeError: Object # has no method 'blur'\nVS.ui.SearchBox.Backbone.View.extend.removeFocus            search_box.js:366\nVS.ui.SearchFacet.Backbone.View.extend.disableEdits           earch_facet.js:229\nVS.ui.SearchFacet.Backbone.View.extend.remove                    search_facet.js:310\nf.event.dispatch                                                                                  jquery-1.7.min.js:3\nf.event.add.h.handle.i\nHow to solve it?\n. ",
    "metinex": "Fixing dash issue in facet names\ncommitting demo.html changes for showing that labels are possible for facet names\n. That sounds very good. I will check some time.\nNice work!\nFethi O. Sonmez\nTechnologist @ Wall Street Journal\nLinkedin http://goog_1479347269/ | Twitter\nhttp://twitter.com/sonmez_nyt| NYC\nTurqoiuse IT http://www.meetup.com/NYC-Turk-IT | WSJhttp://blogs.wsj.com/\n*\nhttp://www.jobtracky.com/*\n*\n*\nOn Thu, Nov 24, 2011 at 12:25 AM, Samuel Clay <\nreply@reply.github.com\n\nwrote:\nI'm able to use dashes in facet names now. Check out the latest code.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/documentcloud/visualsearch/pull/29#issuecomment-2858461\n. Fixing dash issue in facet names\ncommitting demo.html changes for showing that labels are possible for facet names\n. That sounds very good. I will check some time.\n\nNice work!\nFethi O. Sonmez\nTechnologist @ Wall Street Journal\nLinkedin http://goog_1479347269/ | Twitter\nhttp://twitter.com/sonmez_nyt| NYC\nTurqoiuse IT http://www.meetup.com/NYC-Turk-IT | WSJhttp://blogs.wsj.com/\n*\nhttp://www.jobtracky.com/*\n*\n*\nOn Thu, Nov 24, 2011 at 12:25 AM, Samuel Clay <\nreply@reply.github.com\n\nwrote:\nI'm able to use dashes in facet names now. Check out the latest code.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/documentcloud/visualsearch/pull/29#issuecomment-2858461\n. \n",
    "jbrooksuk": "How can it be already selected if there has never been a chosen value so far?\n. How can it be already selected if there has never been a chosen value so far?\n. ",
    "tijmenb": "Hmm okay. It's not in the code btw: I'm loading the facet autocomplete values from JSON, that's where the numbers come from. I'll convert them somewhere.\n. Hmm okay. It's not in the code btw: I'm loading the facet autocomplete values from JSON, that's where the numbers come from. I'll convert them somewhere.\n. ",
    "jlank": "I just pulled master from github and tried this, seems to be broken (version 0.2.1)?  I see the following functions VS.model.SearchFacet, VS.model.SearchQuery, but invoking value() on those throws an error.  In the console if I do dir(VS); I don't see a searchBox attribute in the object.\n. Awesome, I'm finishing up another project and will soon be moving on to one that will utilize VisualSearch.  I need to support RTL languages so I may come across some edges that inevitably crop up when swapping a layout from LTR.  Looking forward to contributing this fix and some possible enhancements, thanks for the great tool!\n. I just pulled master from github and tried this, seems to be broken (version 0.2.1)?  I see the following functions VS.model.SearchFacet, VS.model.SearchQuery, but invoking value() on those throws an error.  In the console if I do dir(VS); I don't see a searchBox attribute in the object.\n. Awesome, I'm finishing up another project and will soon be moving on to one that will utilize VisualSearch.  I need to support RTL languages so I may come across some edges that inevitably crop up when swapping a layout from LTR.  Looking forward to contributing this fix and some possible enhancements, thanks for the great tool!\n. ",
    "uklawitter": "+1\n. +1\n. +1\n. +1\n. +1\n. +1\n. ",
    "thaberkern": "+1\n. +1\n. +1\n. +1\n. ",
    "neyer": "i'm having this same problem; i think it's with bootstrap. what'd you do to fix this?\n. ahh, got it. thanks @littlebee \n. i'm having this same problem; i think it's with bootstrap. what'd you do to fix this?\n. ahh, got it. thanks @littlebee \n. ",
    "littlebee": "See above, \"hack on hack\".   I created have a fork but it has some other changes to facilitate other requirements I was given like \"Facet Menu (autosuggest) Should Appear When Input Gets Focus\".   That's actually now configurable in my fork.  I should probably transfer that fork over to Pathable (https://github.com/pathable) since other colleagues are also contributing to it.  For now though it's at https://github.com/littlebee/visualsearch\n. note that the commit on my fork does it a little different than above and allows you to change the extra padding via css.  see, https://github.com/littlebee/visualsearch/commit/383bf97331bfd4cbc370fb5e29ab8339e377a8b7\n. No problem, I'm out next week traveling.  No rush.\n. See above, \"hack on hack\".   I created have a fork but it has some other changes to facilitate other requirements I was given like \"Facet Menu (autosuggest) Should Appear When Input Gets Focus\".   That's actually now configurable in my fork.  I should probably transfer that fork over to Pathable (https://github.com/pathable) since other colleagues are also contributing to it.  For now though it's at https://github.com/littlebee/visualsearch\n. note that the commit on my fork does it a little different than above and allows you to change the extra padding via css.  see, https://github.com/littlebee/visualsearch/commit/383bf97331bfd4cbc370fb5e29ab8339e377a8b7\n. No problem, I'm out next week traveling.  No rush.\n. ",
    "devdemon": "Just would like to mention this for future reference:\nSometimes your box-sizing is set to border-box, for visualsearch.js this has to be set to content-box\ncss\n.VS-search * {-moz-box-sizing:content-box; -webkit-box-sizing:content-box; box-sizing:content-box;}\n. Just would like to mention this for future reference:\nSometimes your box-sizing is set to border-box, for visualsearch.js this has to be set to content-box\ncss\n.VS-search * {-moz-box-sizing:content-box; -webkit-box-sizing:content-box; box-sizing:content-box;}\n. ",
    "redstone99": "It looks like in the current version of visualsearch.js, this enhancement has disappeared?  I was looking for the ability to set the min length to zero.\n. It looks like in the current version of visualsearch.js, this enhancement has disappeared?  I was looking for the ability to set the min length to zero.\n. ",
    "johncongdon": "Honestly, I blogged about this a long time ago.  I was just going through\ncomments and someone asked me to send it in a pull request.\nI think the way I was using was not really meant for search.  It was in our\nbackend management system, I wanted just the functionality to choose\nsomething like OrderNumber and then type in the number and hit search. Or\nFirstName which would be a facet, type the name, and then go, but not\nnecessarily do the search via ajax, because it was too slow for me.  Not\nbecause of your code, but because of my searching functions.\nMy goal was to use this instead of a select box followed by an input box.\n But I never brought this into fruition, started playing with it in a\nbranch and just never went back to it.\nJohn\nOn Wed, Feb 15, 2012 at 12:32 PM, Samuel Clay <\nreply@reply.github.com\n\nwrote:\nI'm working through this, but I'm not sure that it covers all possible\ncases. Firstly, I want to change autosearch to searchOnChange (thanks\n@jashkenas for the suggestion). Secondly, this pull request disables the\nability to select an option from a facet's dropdown,so it needs some\ntweaking.\nWhich specific interactions do you want to disable automatic searching?\nPressing enter will search, but so will clicking on a value from the\ndrop-down. Additionally, deleting a facet will also search. Of those three,\nyou want to disable everything but enter? If you select something from the\ndrop down, the value needs to be committed to the facet (saved to its\nunderlying model), which is currently handled in the search code.\nI just want a bit of confirmation on what specific behavior you want to\ndisable, so I can check those cases.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/documentcloud/visualsearch/pull/43#issuecomment-3984853\n. Honestly, I blogged about this a long time ago.  I was just going through\ncomments and someone asked me to send it in a pull request.\n\nI think the way I was using was not really meant for search.  It was in our\nbackend management system, I wanted just the functionality to choose\nsomething like OrderNumber and then type in the number and hit search. Or\nFirstName which would be a facet, type the name, and then go, but not\nnecessarily do the search via ajax, because it was too slow for me.  Not\nbecause of your code, but because of my searching functions.\nMy goal was to use this instead of a select box followed by an input box.\n But I never brought this into fruition, started playing with it in a\nbranch and just never went back to it.\nJohn\nOn Wed, Feb 15, 2012 at 12:32 PM, Samuel Clay <\nreply@reply.github.com\n\nwrote:\nI'm working through this, but I'm not sure that it covers all possible\ncases. Firstly, I want to change autosearch to searchOnChange (thanks\n@jashkenas for the suggestion). Secondly, this pull request disables the\nability to select an option from a facet's dropdown,so it needs some\ntweaking.\nWhich specific interactions do you want to disable automatic searching?\nPressing enter will search, but so will clicking on a value from the\ndrop-down. Additionally, deleting a facet will also search. Of those three,\nyou want to disable everything but enter? If you select something from the\ndrop down, the value needs to be committed to the facet (saved to its\nunderlying model), which is currently handled in the search code.\nI just want a bit of confirmation on what specific behavior you want to\ndisable, so I can check those cases.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/documentcloud/visualsearch/pull/43#issuecomment-3984853\n. \n",
    "plaflamme": "I chose 'preserveMatches' because of the other option called 'preserveOrder', but any naming scheme is fine with me.\nAnd yes, in my case, the values of a category are coming from the server and are already filtered to match the partial term.\n. I chose 'preserveMatches' because of the other option called 'preserveOrder', but any naming scheme is fine with me.\nAnd yes, in my case, the values of a category are coming from the server and are already filtered to match the partial term.\n. ",
    "danielebailo": "ok great! \nmany thanks.\n. ok great! \nmany thanks.\n. ",
    "fabdouglas": "The issue is around line 552: \njavascript\nthis.box.val(this.model.get('value'));\n'value' (id) should not be stored as additional property such as \"data-refid\" and the label from model should be used \n. This patch works for me (1.9.2). \nThanks a lot.\n. The issue is around line 552: \njavascript\nthis.box.val(this.model.get('value'));\n'value' (id) should not be stored as additional property such as \"data-refid\" and the label from model should be used \n. This patch works for me (1.9.2). \nThanks a lot.\n. ",
    "fabarea": "Sad! Looking at the SearchFacet model, it almost looks as this feature was foreseen.\n// If provided, use a custom label instead of the raw value.\n  label : function() {\n      return this.get('label') || this.get('value');\n  }\n. Sad! Looking at the SearchFacet model, it almost looks as this feature was foreseen.\n// If provided, use a custom label instead of the raw value.\n  label : function() {\n      return this.get('label') || this.get('value');\n  }\n. ",
    "stoussaint": "Hi,\nI only achieve to do this by simulating the 'keypress' event on 'enter' like this :\nvar e = jQuery.Event(\"keypress\");\ne.which = 13;\n$(\"input.ui-autocomplete-input:first\").trigger(e);\nIs this a good way to do this, or is there something more efficient ?\nThanks\n. Thanks for those simple get/set commands.\nI replace my use of :\nvisualSearch.searchBox.setQuery(query);\nby\nvisualSearch.searchBox.value(query)\nBut still the search request is not send automatically. I still need to simulate a keypress event.\n. Hi,\nI only achieve to do this by simulating the 'keypress' event on 'enter' like this :\nvar e = jQuery.Event(\"keypress\");\ne.which = 13;\n$(\"input.ui-autocomplete-input:first\").trigger(e);\nIs this a good way to do this, or is there something more efficient ?\nThanks\n. Thanks for those simple get/set commands.\nI replace my use of :\nvisualSearch.searchBox.setQuery(query);\nby\nvisualSearch.searchBox.value(query)\nBut still the search request is not send automatically. I still need to simulate a keypress event.\n. ",
    "schue": "you can trigger the search by using visualSearch.searchBox.searchEvent({}) after setting value() or setQuery(). The empty object is probably an incorrect hack but it doesn't throw an error.\n. you can trigger the search by using visualSearch.searchBox.searchEvent({}) after setting value() or setQuery(). The empty object is probably an incorrect hack but it doesn't throw an error.\n. ",
    "brycecorkins": "See https://github.com/documentcloud/visualsearch/issues/89\n. Following up with the solution:\n``` javascript\nsearch:       function(query, searchCollection) {\n// Update routers\nvar searchdata = [];\nvar searchuri = 'search/';\nsearchdata = searchCollection.facets();\n\n// Build the search URI\nfor(var i = 0; i < searchdata.length; i++) {\n    $.each(searchdata[i], function(k, v) {\n        searchdata[i][k] = searchdata[i][k].replace('&','\\%and');\n    });\n    searchuri = searchuri + $.param(searchdata[i]);\n    if(i < (searchdata.length - 1)) {\n        searchuri = searchuri + \"&\";\n    }\n}\n\nVS.app.searcher.navigate(\"/\" + searchuri);\n\n...\n```\nThen outside the VS.init function:\n``` javascript\nVS.utils.Searcher = Backbone.Router.extend({\n    routes: {\n        \"search/:query\": \"search\"  // matches http://site.com/#search/query\n    },\n    search: function(query) {\n    if(!query) {\n        return;\n    }\n    var result = new Array();\n\n    query = query.replace(/\\+/g, ' ');\n\n    $.each(query.split('&'), function(index, value){\n        if(value){\n            value = value.replace('%and','&');\n            result.push(value);\n        }\n    });\n\n    visualSearch.searchBox.value('');\n\n    $.each(result, function(index, value) {\n        var param = value.split('=');\n        visualSearch.searchBox.addFacet(param[0], param[1], 99);\n    });\n\n    visualSearch.searchBox.searchEvent({});\n}\n\n});\n// Initiate the router\nVS.app.searcher = new VS.utils.Searcher;\n// Start Backbone history a necessary step for bookmarkable URL's\nBackbone.history.start();\n```\n. For example:\n``` javascript\nfacetMatches: function(callback) {\n    var facets = $.parseJSON(your_facet_source);\n    var currentFacets = visualSearch.searchQuery.pluck(\"category\");\nfacets = facets.filter( function( el ) {\n    return currentFacets.indexOf( el ) < 0;\n});\n\n\ncallback(facets, {\n    preserveOrder: true\n});\n\n}\n```\n. Just had this issue too, here's a hackish solution: https://github.com/documentcloud/visualsearch/issues/133\n. Having this problem as well.\n. Answered my own question. Dumb luck mostly, and it's ugly, but it does work:\n``` javascript\n            facetMatches: function(callback) {\n                var facets; //array of facets\n            if(facets.length == 1) {\n                visualSearch.searchBox.addFacet(facets[0], '', 99);\n            } else {\n                callback(facets, {\n                    preserveOrder: true\n                });\n            }\n        }\n\n```\n. See https://github.com/documentcloud/visualsearch/issues/89\n. Following up with the solution:\n``` javascript\nsearch:       function(query, searchCollection) {\n// Update routers\nvar searchdata = [];\nvar searchuri = 'search/';\nsearchdata = searchCollection.facets();\n\n// Build the search URI\nfor(var i = 0; i < searchdata.length; i++) {\n    $.each(searchdata[i], function(k, v) {\n        searchdata[i][k] = searchdata[i][k].replace('&','\\%and');\n    });\n    searchuri = searchuri + $.param(searchdata[i]);\n    if(i < (searchdata.length - 1)) {\n        searchuri = searchuri + \"&\";\n    }\n}\n\nVS.app.searcher.navigate(\"/\" + searchuri);\n\n...\n```\nThen outside the VS.init function:\n``` javascript\nVS.utils.Searcher = Backbone.Router.extend({\n    routes: {\n        \"search/:query\": \"search\"  // matches http://site.com/#search/query\n    },\n    search: function(query) {\n    if(!query) {\n        return;\n    }\n    var result = new Array();\n\n    query = query.replace(/\\+/g, ' ');\n\n    $.each(query.split('&'), function(index, value){\n        if(value){\n            value = value.replace('%and','&');\n            result.push(value);\n        }\n    });\n\n    visualSearch.searchBox.value('');\n\n    $.each(result, function(index, value) {\n        var param = value.split('=');\n        visualSearch.searchBox.addFacet(param[0], param[1], 99);\n    });\n\n    visualSearch.searchBox.searchEvent({});\n}\n\n});\n// Initiate the router\nVS.app.searcher = new VS.utils.Searcher;\n// Start Backbone history a necessary step for bookmarkable URL's\nBackbone.history.start();\n```\n. For example:\n``` javascript\nfacetMatches: function(callback) {\n    var facets = $.parseJSON(your_facet_source);\n    var currentFacets = visualSearch.searchQuery.pluck(\"category\");\nfacets = facets.filter( function( el ) {\n    return currentFacets.indexOf( el ) < 0;\n});\n\n\ncallback(facets, {\n    preserveOrder: true\n});\n\n}\n```\n. Just had this issue too, here's a hackish solution: https://github.com/documentcloud/visualsearch/issues/133\n. Having this problem as well.\n. Answered my own question. Dumb luck mostly, and it's ugly, but it does work:\n``` javascript\n            facetMatches: function(callback) {\n                var facets; //array of facets\n            if(facets.length == 1) {\n                visualSearch.searchBox.addFacet(facets[0], '', 99);\n            } else {\n                callback(facets, {\n                    preserveOrder: true\n                });\n            }\n        }\n\n```\n. ",
    "ismell": "+1!\n. +1!\n. ",
    "yassersouri": "+1\nwe need this!\nhow can I fix this?\n. @mkavakebi I tried what you said, but that did not work. Can you share your working version with persian list?\n. +1\nwe need this!\nhow can I fix this?\n. @mkavakebi I tried what you said, but that did not work. Can you share your working version with persian list?\n. ",
    "mkavakebi": "there is the same bug for unicode regex match.\nautocompleteValues in search_facet.js doesn't match \nbut autocompleteValues in search_input.js matches\ni tried it using persian lists.\nthe difference is between this two lines of code:\nA)var matcher    = new RegExp('^' + re, 'i');\nB)var matcher = new RegExp('\\b' + re, 'i');\nfirst one works fine but not the second one for my persian values.\nyou can just replace (B) in search_facet.js with (A) in search_input.js\n. there is the same bug for unicode regex match.\nautocompleteValues in search_facet.js doesn't match \nbut autocompleteValues in search_input.js matches\ni tried it using persian lists.\nthe difference is between this two lines of code:\nA)var matcher    = new RegExp('^' + re, 'i');\nB)var matcher = new RegExp('\\b' + re, 'i');\nfirst one works fine but not the second one for my persian values.\nyou can just replace (B) in search_facet.js with (A) in search_input.js\n. ",
    "dgiunta": "Good call on the splatting of arguments... Also, I'm fine to ditch the plural method, and just extend the singular one... See the latest commit.\n. Good call on the splatting of arguments... Also, I'm fine to ditch the plural method, and just extend the singular one... See the latest commit.\n. ",
    "shreyankg": "Thanks :-)\n. Both edge cases work. Let me know if there is anything else to be worked on before this is mergable. \n. Thanks :-)\n. Both edge cases work. Let me know if there is anything else to be worked on before this is mergable. \n. ",
    "blittle": "This should probably be changed from:\njavascript\nif (autoCompleteData['value'] == box.val()) {\n  //box.data('autocomplete').menu.activate(new $.Event(\"mouseover\"), $value);\n}\nto:\njavascript\nif (autoCompleteData['value'] == box.val() && box.data('autocomplete').menu.activate) {\n  box.data('autocomplete').menu.activate(new $.Event(\"mouseover\"), $value);\n}\n. If you look in my fork, the built js files are updated to support jQuery 1.9 although the actual dependencies.js file still is jQuery 1.6.1. \nDownload visualsearch.js and visualsearch.css at https://github.com/blittle/visualsearch/tree/master/build\n. @tomaswitek Which version of jQuery and jQuery UI are you running it with?\n. @tomaswitek I just pushed a fix for this bug, download the latest https://github.com/blittle/visualsearch/blob/master/build/visualsearch.js\nLet me know if you see other problems.\n. @samuelclay As far as I have been able to tell, everything is working fine in jQuery UI v1.8.24. I haven't extensively tested different versions and combinations on jQuery and jQuery UI. Please let me know if you see any problems.\n. This should probably be changed from:\njavascript\nif (autoCompleteData['value'] == box.val()) {\n  //box.data('autocomplete').menu.activate(new $.Event(\"mouseover\"), $value);\n}\nto:\njavascript\nif (autoCompleteData['value'] == box.val() && box.data('autocomplete').menu.activate) {\n  box.data('autocomplete').menu.activate(new $.Event(\"mouseover\"), $value);\n}\n. If you look in my fork, the built js files are updated to support jQuery 1.9 although the actual dependencies.js file still is jQuery 1.6.1. \nDownload visualsearch.js and visualsearch.css at https://github.com/blittle/visualsearch/tree/master/build\n. @tomaswitek Which version of jQuery and jQuery UI are you running it with?\n. @tomaswitek I just pushed a fix for this bug, download the latest https://github.com/blittle/visualsearch/blob/master/build/visualsearch.js\nLet me know if you see other problems.\n. @samuelclay As far as I have been able to tell, everything is working fine in jQuery UI v1.8.24. I haven't extensively tested different versions and combinations on jQuery and jQuery UI. Please let me know if you see any problems.\n. ",
    "flipdoubt": "Is this available to download somewhere? I followed the links to the blittle repository but could not find a branch where the jQuery file names changed. I still don't get git and don't trust my understanding to apply the patch and produce something that should work.\n. That does work for us. Thank you very much.\n. Is this available to download somewhere? I followed the links to the blittle repository but could not find a branch where the jQuery file names changed. I still don't get git and don't trust my understanding to apply the patch and produce something that should work.\n. That does work for us. Thank you very much.\n. ",
    "mattbrun": "Just found your patch after resolving the _renderItemData() bug by myself...\nAnyway, thanks a lot for your work. Your pull request works like a charm for me with jQuery 1.8.3 and jQuery UI 1.9.2 :)\n. Just found your patch after resolving the _renderItemData() bug by myself...\nAnyway, thanks a lot for your work. Your pull request works like a charm for me with jQuery 1.8.3 and jQuery UI 1.9.2 :)\n. ",
    "tomaswitek": "Hi, the patch works fine with new jquery version, but witch older one I am getting this error:\nUncaught TypeError: Object # has no method '_renderItemData' \nHow did you fix this?\nThx\n. jQuery JavaScript Library v1.8.3, jQuery UI 1.8.24. With this version I have a problem. But when I run jQuery UI Core 1.9.2 everything is OK.\n. @blittle works great in all versions I tested. Thanks. Great work ;)\n. Hi, the patch works fine with new jquery version, but witch older one I am getting this error:\nUncaught TypeError: Object # has no method '_renderItemData' \nHow did you fix this?\nThx\n. jQuery JavaScript Library v1.8.3, jQuery UI 1.8.24. With this version I have a problem. But when I run jQuery UI Core 1.9.2 everything is OK.\n. @blittle works great in all versions I tested. Thanks. Great work ;)\n. ",
    "knowtheory": "And in fact DocumentCloud uses multiple facets and merges them into an OR statement.  This is definitely something for a server to decide upon.\n. Hey, fork away guys, although I think we'd be more interested in taking a web-component-y crack at this, and working on being interoperable regardless of how VisualSearch is implemented internally.\nAny interest in that?\n. I'm having trouble replicating the issue (and our usage in DocumentCloud does appropriately set up a text facet when you paste in \u0393\u03b9\u03ac\u03bd\u03bd\u03b7\u03c2 or type in other unicode), do you happen to have a page I could hit to see what's happening?\n. Yep, happy to take a PR if you'd like to submit one!\n. And in fact DocumentCloud uses multiple facets and merges them into an OR statement.  This is definitely something for a server to decide upon.\n. Hey, fork away guys, although I think we'd be more interested in taking a web-component-y crack at this, and working on being interoperable regardless of how VisualSearch is implemented internally.\nAny interest in that?\n. I'm having trouble replicating the issue (and our usage in DocumentCloud does appropriately set up a text facet when you paste in \u0393\u03b9\u03ac\u03bd\u03bd\u03b7\u03c2 or type in other unicode), do you happen to have a page I could hit to see what's happening?\n. Yep, happy to take a PR if you'd like to submit one!\n. ",
    "devmondo": "hi, \nthanks for reply, what i actually meant is not serverside, what i meant if user search on City facet, i dont want him to again, see City from the drop down Facets List, this will confuse him, hope i am clear on this.\n. hi, \nthanks for reply, what i actually meant is not serverside, what i meant if user search on City facet, i dont want him to again, see City from the drop down Facets List, this will confuse him, hope i am clear on this.\n. ",
    "nfriend": "@devmondo - As far as I can tell, this functionality isn't provided by the plugin.  However, this effect can be accomplished by querying the searchbox in the plugin's callbacks for the searchbox's current contents and returning only the facets and facet items that haven't already been used.  It's a little heavy-handed, but it does work.\n. @devmondo - As far as I can tell, this functionality isn't provided by the plugin.  However, this effect can be accomplished by querying the searchbox in the plugin's callbacks for the searchbox's current contents and returning only the facets and facet items that haven't already been used.  It's a little heavy-handed, but it does work.\n. ",
    "fnicollier": "Tested on Chrome 25.0.1364.152 m, works great, thanks @dennis-g!\n. Tested on Chrome 25.0.1364.152 m, works great, thanks @dennis-g!\n. ",
    "kooliokey": "I've built VisualSearch into a web app of mine and I need to be able to use it on an iOS devices as well. It works fine for selecting the facets, but it doesn't let you enter any search in addition to the facets; the keyboard just pops up and then hides itself immediately. Is there a way to get the keyboard to stay up?\n. I've built VisualSearch into a web app of mine and I need to be able to use it on an iOS devices as well. It works fine for selecting the facets, but it doesn't let you enter any search in addition to the facets; the keyboard just pops up and then hides itself immediately. Is there a way to get the keyboard to stay up?\n. ",
    "doubletaketech": "I have this issue as well. But iOS keyboard doesn't even popup to enter text.  This is opening a web app on the device. \nShould the keyboard work now? Or is this still a bug?\nThanks,\nDon\n. I have this issue as well. But iOS keyboard doesn't even popup to enter text.  This is opening a web app on the device. \nShould the keyboard work now? Or is this still a bug?\nThanks,\nDon\n. ",
    "mszoernyi": "You could use this one for these cases: http://ivaynberg.github.io/select2/#tags\n. You could use this one for these cases: http://ivaynberg.github.io/select2/#tags\n. ",
    "darkfrog26": "The idea was to be able to incorporate both facet/value and facet-only into one search.  So for example you might have: \"Country: USA  ShowOnlyNew\".\n. The idea was to be able to incorporate both facet/value and facet-only into one search.  So for example you might have: \"Country: USA  ShowOnlyNew\".\n. ",
    "josx": "Hi all!\nI am facing the same problem please can you merge this code.\n. great thanks!\n. Sorry But breaks with master branch on Backbone, at least with this as latest commit:\nhttps://github.com/jashkenas/backbone/commit/517624db111cbf3e392a73ae91e590a0cd73c77d\n. After researching a little I found a change on view's options.\nYou can check it out on https://github.com/jashkenas/backbone/pull/2461\nSo for VS to work we need to add to views:\n...\ninitialize : function(options) { \n    this.options = options;\n...\n. Ok no problem I will do it tomorrow\n. @knowtheory If you have time take a look on it ;)\n. i think it has to be merged for bb 1.1.0 support\nCan someone review it?\n. Also using it on https://github.com/inaes-tic/mbc-caspa for 5 months.\n. Hi all!\nI am facing the same problem please can you merge this code.\n. great thanks!\n. Sorry But breaks with master branch on Backbone, at least with this as latest commit:\nhttps://github.com/jashkenas/backbone/commit/517624db111cbf3e392a73ae91e590a0cd73c77d\n. After researching a little I found a change on view's options.\nYou can check it out on https://github.com/jashkenas/backbone/pull/2461\nSo for VS to work we need to add to views:\n...\ninitialize : function(options) { \n    this.options = options;\n...\n. Ok no problem I will do it tomorrow\n. @knowtheory If you have time take a look on it ;)\n. i think it has to be merged for bb 1.1.0 support\nCan someone review it?\n. Also using it on https://github.com/inaes-tic/mbc-caspa for 5 months.\n. ",
    "zhakid": "can i help too!.\nSo?\n. can i help too!.\nSo?\n. ",
    "edgarnadal": "I'm interested on that. Let's work on that @knowtheory \n. I'm interested on that. Let's work on that @knowtheory \n. ",
    "FoxxMD": "I'd also be interested in this\n. I'd also be interested in this\n. ",
    "amcdnl": "This is really similar; thought i'd share for others : http://dnauck.github.io/angular-advanced-searchbox/\n. This is really similar; thought i'd share for others : http://dnauck.github.io/angular-advanced-searchbox/\n. ",
    "escapedcat": "good share @amcdnl \n. good share @amcdnl \n. ",
    "tangokhi": "Did anyone port it to angular ?\n. Did anyone port it to angular ?\n. ",
    "mewynn": "You can fix this bug yourself : \nThe problem is autocomplete menu is displayed if a category match the last word or if last word is empty. The regx that match last word in code doesn't work properly.\nJust replace : \nvar lastWord   = searchTerm.match(/\\w+?$/); // Autocomplete only last word.\nby\nvar lastWord   = searchTerm.match(/[^\\ ]$/); // Autocomplete only last word.\non autocompleteValues function on SearchInput definition.\n. You can fix this bug yourself : \nThe problem is autocomplete menu is displayed if a category match the last word or if last word is empty. The regx that match last word in code doesn't work properly.\nJust replace : \nvar lastWord   = searchTerm.match(/\\w+?$/); // Autocomplete only last word.\nby\nvar lastWord   = searchTerm.match(/[^\\ ]$/); // Autocomplete only last word.\non autocompleteValues function on SearchInput definition.\n. ",
    "tuping": "I have made it. Something like this:\njavascript\nvalueMatches : function(facet, searchTerm, callback) {\n  if (facet.match(/^data_/i)) {\n    var selectedFacetView = visualSearch.searchBox.selected()[0];\n    var textInput = selectedFacetView.$el.find('input');\n    textInput.removeClass('ui-autocomplete-input');\n    textInput.datetimepicker({\n      pickTime: false,\n      language: \"pt-BR\"\n    });\n  }\nand to avoid any calendar \"floating\" around:\njavascript\nfacetMatches : function(callback) {\n  $('[class~=bootstrap-datetimepicker-widget]').hide()\n  ...\nThere are some minor glitches to solve though... For example: the \"search\" and the \"facetMatches\" callbacks are not being called after a date is selected. The user has to click outside the date input (and inside the search box) to make theese callbacks work.\n. I have made it. Something like this:\njavascript\nvalueMatches : function(facet, searchTerm, callback) {\n  if (facet.match(/^data_/i)) {\n    var selectedFacetView = visualSearch.searchBox.selected()[0];\n    var textInput = selectedFacetView.$el.find('input');\n    textInput.removeClass('ui-autocomplete-input');\n    textInput.datetimepicker({\n      pickTime: false,\n      language: \"pt-BR\"\n    });\n  }\nand to avoid any calendar \"floating\" around:\njavascript\nfacetMatches : function(callback) {\n  $('[class~=bootstrap-datetimepicker-widget]').hide()\n  ...\nThere are some minor glitches to solve though... For example: the \"search\" and the \"facetMatches\" callbacks are not being called after a date is selected. The user has to click outside the date input (and inside the search box) to make theese callbacks work.\n. ",
    "nbasili": "You can try it here:\nhttp://documentcloud.github.io/visualsearch/\nJust clear out all fields and type in or paste the non-english text.\nIt seems that the problem is that when you start typing with non-english characters the facet dropdown does not get cleared out. \nFor example, if I type 'a' the 'access' facet is displayed. As soon as I press 'v' (av), the dropdown disappears as there is not match for 'av'. But it seems that it fails with other Unicode chars.\nSo it the url above, if I paste (or type) \"John\", the dropdown is cleared. If I paste (or type) \"\u0393\u03b9\u03ac\u03bd\u03bd\u03b7\u03c2\", the dropdown stays open with \"access\" preselected.\nTested on latest Chrome and Firefox.\n. You can try it here:\nhttp://documentcloud.github.io/visualsearch/\nJust clear out all fields and type in or paste the non-english text.\nIt seems that the problem is that when you start typing with non-english characters the facet dropdown does not get cleared out. \nFor example, if I type 'a' the 'access' facet is displayed. As soon as I press 'v' (av), the dropdown disappears as there is not match for 'av'. But it seems that it fails with other Unicode chars.\nSo it the url above, if I paste (or type) \"John\", the dropdown is cleared. If I paste (or type) \"\u0393\u03b9\u03ac\u03bd\u03bd\u03b7\u03c2\", the dropdown stays open with \"access\" preselected.\nTested on latest Chrome and Firefox.\n. ",
    "rranauro": "Make sure you have included the jquery-ui.js library. That should fix it.\n. Make sure you have included the jquery-ui.js library. That should fix it.\n. ",
    "Ciwan1859": "Hi Samuel, Merci for the reply.\nAssuming you're the only one working on VisualSearch.js, then yes this would be your code :)\nI did as you suggested, and placed a break-point in Chrome debugger on that line, and got the following:\n\nThe code again is below:\n``` javascript\n        this.box.data('ui-autocomplete').renderMenu = function(ul, items) {\n            var category = '';\n            .each(items, _.bind(function(item, i) {\n                if (item.category && item.category != category) {\n                    ul.append(''+item.category+'');\n                    category = item.category;\n                }\n            if(this._renderItemData) {\n                this._renderItemData(ul, item);\n            } else {\n                this._renderItem(ul, item);\n            }\n\n        }, this));\n    };\n\n```\n. It turns out my dependencies were not correct in terms of their versions.\nNote to everyone reading this ... to ensure you get no headaches, use the dependencies file that comes with the download of Visual Search.\nThanks\n. Hi Samuel, Merci for the reply.\nAssuming you're the only one working on VisualSearch.js, then yes this would be your code :)\nI did as you suggested, and placed a break-point in Chrome debugger on that line, and got the following:\n\nThe code again is below:\n``` javascript\n        this.box.data('ui-autocomplete').renderMenu = function(ul, items) {\n            var category = '';\n            .each(items, _.bind(function(item, i) {\n                if (item.category && item.category != category) {\n                    ul.append(''+item.category+'');\n                    category = item.category;\n                }\n            if(this._renderItemData) {\n                this._renderItemData(ul, item);\n            } else {\n                this._renderItem(ul, item);\n            }\n\n        }, this));\n    };\n\n```\n. It turns out my dependencies were not correct in terms of their versions.\nNote to everyone reading this ... to ensure you get no headaches, use the dependencies file that comes with the download of Visual Search.\nThanks\n. ",
    "edgarRd": "I've seen this happening too. Anyone knows if there's a reason for that or is it just a bug?\n. I've seen this happening too. Anyone knows if there's a reason for that or is it just a bug?\n. ",
    "dgastudio": "same here,http://c2n.me/jq8E87.png\n. same here,http://c2n.me/jq8E87.png\n. ",
    "vikadlimatti": "Hi, i am unable to use above code block, can you guys show me how it looks in visualsearch.js.\nThanks\nVinod\n. Thanks It really helped me and i got it worked .\nI have one more question: Can we Allow Multi-select in dropdowns? Example if i want to Select 3-4 states with mouse.\nThanks Once again in advance.\nVinod\n. Hi, i am unable to use above code block, can you guys show me how it looks in visualsearch.js.\nThanks\nVinod\n. Thanks It really helped me and i got it worked .\nI have one more question: Can we Allow Multi-select in dropdowns? Example if i want to Select 3-4 states with mouse.\nThanks Once again in advance.\nVinod\n. ",
    "rosariosanto": "I got it working by commenting a line. I still need to do some testing to ensure that it does not break something else. LINE //this.box.bind('blur',  this.deferDisableEdit);\n// Rendering the input sets up autocomplete, events on focusing and blurring\n  // the input, and the auto-grow of the input.\n  render : function() {\n    $(this.el).html(JST'search_input');\n```\nthis.setMode('not', 'editing');\nthis.setMode('not', 'selected');\nthis.box = this.$('input');\nthis.box.autoGrowInput();\nthis.box.bind('updated.autogrow', this.moveAutocomplete);\n//this.box.bind('blur',  this.deferDisableEdit);\nthis.box.bind('focus', this.addFocus);\nthis.setupAutocomplete();\nreturn this;\n```\n},\n. I got it working by commenting a line. I still need to do some testing to ensure that it does not break something else. LINE //this.box.bind('blur',  this.deferDisableEdit);\n// Rendering the input sets up autocomplete, events on focusing and blurring\n  // the input, and the auto-grow of the input.\n  render : function() {\n    $(this.el).html(JST'search_input');\n```\nthis.setMode('not', 'editing');\nthis.setMode('not', 'selected');\nthis.box = this.$('input');\nthis.box.autoGrowInput();\nthis.box.bind('updated.autogrow', this.moveAutocomplete);\n//this.box.bind('blur',  this.deferDisableEdit);\nthis.box.bind('focus', this.addFocus);\nthis.setupAutocomplete();\nreturn this;\n```\n},\n. ",
    "michael-harrison": "+1 I'm having the same problem\n. +1 I'm having the same problem\n. ",
    "cousine": "So after a lot of poking around, I found a workaround; you can override the click even on the button and add the following to trigger visualsearch to detect the facets:\nvisualSearch.searchBox.disableFacets();\nhope this helps any other soul trapped with this legacy!\n. So after a lot of poking around, I found a workaround; you can override the click even on the button and add the following to trigger visualsearch to detect the facets:\nvisualSearch.searchBox.disableFacets();\nhope this helps any other soul trapped with this legacy!\n. ",
    "zekedroid": "@cousine thank you so much! that was a great solution to this problem.\n. Going along these lines, is it possible to make the \"tab\" key on a \"value\" go to the next set of facet, value inputs? As opposed to what happens now which is that it blurs the input. Basically what I'm asking is for a way to \"match\" the value regardless of whether it actually matched or not. The use case is that we allow for values not in the callbacks of the facetMatching method.\nI considered a 'keydown' event, checking for a 'tab' keypress. However this won't work because I can't attach an event to non-existing input fields.\nI also tried setting this as the value matching callback:\nvalueMatches: function(facet, searchTerm, callback) {\n    callback([searchTerm])\n}\nAt first I thought it might be an ugly solution, but it still won't work because it will actually execute a search on tab (which incidentally does what @Intrepidd wanted to do). So maybe if this is the only simple solution, is there a way to stop the search event from firing on tab?\n. Alright let me give that one a try. And as for the blurring, I could've sworn it was the intended behavior. Try it out on the fiddle that Intrepidd posted on this thread.\nMeanwhile, here it is:\nOS: Windows, Linux, Mac OS\nBrowsers: Chrome latest (45), Edge, Safari\nTo replicate, enter a category, tab over to the value, enter something, tab again. After that tab, it won't go to the next set but will just blur out.\n. @cousine thank you so much! that was a great solution to this problem.\n. Going along these lines, is it possible to make the \"tab\" key on a \"value\" go to the next set of facet, value inputs? As opposed to what happens now which is that it blurs the input. Basically what I'm asking is for a way to \"match\" the value regardless of whether it actually matched or not. The use case is that we allow for values not in the callbacks of the facetMatching method.\nI considered a 'keydown' event, checking for a 'tab' keypress. However this won't work because I can't attach an event to non-existing input fields.\nI also tried setting this as the value matching callback:\nvalueMatches: function(facet, searchTerm, callback) {\n    callback([searchTerm])\n}\nAt first I thought it might be an ugly solution, but it still won't work because it will actually execute a search on tab (which incidentally does what @Intrepidd wanted to do). So maybe if this is the only simple solution, is there a way to stop the search event from firing on tab?\n. Alright let me give that one a try. And as for the blurring, I could've sworn it was the intended behavior. Try it out on the fiddle that Intrepidd posted on this thread.\nMeanwhile, here it is:\nOS: Windows, Linux, Mac OS\nBrowsers: Chrome latest (45), Edge, Safari\nTo replicate, enter a category, tab over to the value, enter something, tab again. After that tab, it won't go to the next set but will just blur out.\n. ",
    "golubev": "Okay! Thanks for the response!\n. Okay! Thanks for the response!\n. ",
    "utrerano": "Did you get this? I\u00b4m trying to do the same.\n. Did you get this? I\u00b4m trying to do the same.\n. ",
    "fmkw": "Did you find a solution? \n. Did you find a solution for that problem? \n. did you find a solution for that problem? \n. Did you find a solution? \n. Did you find a solution for that problem? \n. did you find a solution for that problem? \n. ",
    "manukbenjamin": "Anyone find a solution for this?\n. Anyone find a solution for this?\n. ",
    "mamezito": "yeap have the same problem , that needs to be solved.\nmultiple faces of same type\nalso issue on stackoverflow - http://stackoverflow.com/questions/24822171/how-to-avoid-already-selected-value-from-the-facetslist-visualsearch\n. yeap have the same problem , that needs to be solved.\nmultiple faces of same type\nalso issue on stackoverflow - http://stackoverflow.com/questions/24822171/how-to-avoid-already-selected-value-from-the-facetslist-visualsearch\n. ",
    "nathanstitt": "Hi Vinod,\nAt the present, what is displayed in the UI must match the query object's keys.  The distributed CSS does apply \"text-transform: uppercase;\" styling, but the text itself is identical.\nOne work-around for this is to keep another object that contains a lookup table and use that to rename the keys once a selection is made.  For instance in order to rename the \"U.S. State\" keys from the demo page:\n```\nvar keyLookupTable = {\n    \"U.S. State\": \"state\"\n};\nvar query={};\n_.each(searchCollection.models, function(model){\n    var key = keyLookupTable[model.get('category')] || model.get('category')\n    query[key]=model.get('value');\n});\nconsole.log(query)\n```\n. Hey @vikadlimatti,\nVisualSelect doesn't currently support multi-selection.  It uses the jQuery UI Autocomplete widget for the selection dropdown which does support multi-selection, so it should be possible to support it:  http://jqueryui.com/autocomplete/#multiple-remote We'd definitely be interested in contributions in this area\nIf you're interested in taking a poke at it, the code that initializes the drop down is https://github.com/documentcloud/visualsearch/blob/7f538e6896292bebe620d50301077553640760e5/lib/js/views/search_facet.js#L71-L109\nI suspect that adding multi-selection will be a bit more difficult than just setting the appropriate options on the Autocomplete initialization.  You'll also have to work through areas that currently return a string, and will now be returning an array.\n. Closing, duplicate of #142 \n. Hi Vinod,\nAt the present, what is displayed in the UI must match the query object's keys.  The distributed CSS does apply \"text-transform: uppercase;\" styling, but the text itself is identical.\nOne work-around for this is to keep another object that contains a lookup table and use that to rename the keys once a selection is made.  For instance in order to rename the \"U.S. State\" keys from the demo page:\n```\nvar keyLookupTable = {\n    \"U.S. State\": \"state\"\n};\nvar query={};\n_.each(searchCollection.models, function(model){\n    var key = keyLookupTable[model.get('category')] || model.get('category')\n    query[key]=model.get('value');\n});\nconsole.log(query)\n```\n. Hey @vikadlimatti,\nVisualSelect doesn't currently support multi-selection.  It uses the jQuery UI Autocomplete widget for the selection dropdown which does support multi-selection, so it should be possible to support it:  http://jqueryui.com/autocomplete/#multiple-remote We'd definitely be interested in contributions in this area\nIf you're interested in taking a poke at it, the code that initializes the drop down is https://github.com/documentcloud/visualsearch/blob/7f538e6896292bebe620d50301077553640760e5/lib/js/views/search_facet.js#L71-L109\nI suspect that adding multi-selection will be a bit more difficult than just setting the appropriate options on the Autocomplete initialization.  You'll also have to work through areas that currently return a string, and will now be returning an array.\n. Closing, duplicate of #142 \n. ",
    "Vineeth-Mohan": "I have reproduced the issue here - http://factweavers.com/VisualSearchIssueDemo/\nYou can checkout the code from here - https://github.com/Vineeth-Mohan/VisualSearchIssueDemo\nAs you can see if i select some facet , the UI is almost not responsive.\nKindly look into it.\nVisualSearch is a great tool , I would love to embed it in my application.\nBut then if we cant fix this , I am thinking of writing one from scratch.\n. I have reproduced the issue here - http://factweavers.com/VisualSearchIssueDemo/\nYou can checkout the code from here - https://github.com/Vineeth-Mohan/VisualSearchIssueDemo\nAs you can see if i select some facet , the UI is almost not responsive.\nKindly look into it.\nVisualSearch is a great tool , I would love to embed it in my application.\nBut then if we cant fix this , I am thinking of writing one from scratch.\n. ",
    "kaystrobach": "@Vineeth-Mohan first link is dead ...\n. yes it's possible http://stackoverflow.com/questions/18381933/implementing-visualsearch-js-using-jquery-ajax-rest-api-and-neo4j-graphdb\n. @Vineeth-Mohan first link is dead ...\n. yes it's possible http://stackoverflow.com/questions/18381933/implementing-visualsearch-js-using-jquery-ajax-rest-api-and-neo4j-graphdb\n. ",
    "carminexx": "Something was done with the Search.js fork: https://github.com/hirokiosame/search.js/tree/master\nUnfortunately last update is 2 years old and it's not supported anymore..\nAnyway, +1! Would be a nice feature\n. Something was done with the Search.js fork: https://github.com/hirokiosame/search.js/tree/master\nUnfortunately last update is 2 years old and it's not supported anymore..\nAnyway, +1! Would be a nice feature\n. ",
    "andremleblanc": ":+1: \n. :+1: \n. ",
    "kkirsche": "I'm going to see if that's a github page and change that\n. bower/bower.github.io#143\n. I'm going to see if that's a github page and change that\n. bower/bower.github.io#143\n. ",
    "Intrepidd": "Of course, but I thought this could be VS responsibility \n. Of course, but I thought this could be VS responsibility \n. ",
    "dnauck": "Take a look at: https://github.com/documentcloud/visualsearch/issues/101#issuecomment-75980661\n. Take a look at: https://github.com/documentcloud/visualsearch/issues/101#issuecomment-75980661\n. ",
    "tallam85": "Can any one help to fix it\n. Can any one help to fix it\n. "
}