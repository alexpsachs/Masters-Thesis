{
    "tmontgomery": "Not able to reproduce this. However, the NPE from the driver seems to be that the exception message is not set and this use case is not handled in the event logger codec for exceptions.\n. This naturally occurs right now when trying to run the StreamingPublisher with a RateReceiver with default settings. The publishing client writes an entire term buffer and then rotates before the receiver sends the initial SM. This triggers cleaning of the active buffer for the driver and livelocks the sender thread.\nA possible solution is to only allow the driver to set the status to NEEDS_CLEANING when the LogScanner has deemed the buffer complete.\n. It's not flow control. Theoretically, it could happen with very small windows. It's a flaw in the fact that cleaning occurs irregardless of LogScanner state on the driver.\n. Right now, flow control only allows writing 1 term buffer (default 16MB) + 128K ahead. So, it is much less than 2x 16MB.\nUpdate: it is 1 term buffer + min(128K, term capacity / 4)\n. No worries. I'm going to try a couple ideas and see how it shakes out.\n. This turns out to be remarkably tricky. I've got some planned changes to Publication and LogAppender that make sense, but I need to play with them some more before committing.\n. I see that the logic on the subscription side also allows this to occur. In other words the Connection can lag behind and the driver will clean out from under it, thus causing the LogReader to spin in the same manner as the LogScanner will.\n. Hold on, this might be a flow control issue after all.\n. This is invalid. The current logic is the best. This was a flow control issue manifesting oddly.\n. The connection cleanup must be a staged process.\n-  Stage 1: initial timeout of publisher (no frames): ACTIVE transition to INACTIVE\n-  Stage 2: check for draining by all receiver/subscribers or timeout: INACTIVE transition to LINGER  and sending of ON_INACTIVE_CONNECTION to inform clients\n-  Stage 3: timeout to allow clients to unmap then on timeout, final cleanup and delete of files\n. Staged logic is now in place.\n. All functionality is in now. However, might still be possible for Sender thread to access unmapped byte buffer.\n. Sending now checks the state of the driver publication. If not in the correct state, it won't send. This combined with the other changes should make this safe. So, going to close.\n. I should also add that I used number of messages set to 10.\nI believe the JVM crash is due to inappropriate cleanup in the app.\n. Or maybe not...\n. JVM crash is cleanup related. Which is addressed. But examples do not yet work.\n. The exceptions come when the ON_OPERATION_SUCCEEDEDs are received from the driver when the application is exiting. It's from the closes and releases of the subscription and publication. Signal is not working correctly. However, it is actually working fine overall. The app is working... until it is done and is cleaning up.\n. The HdrHistogram usage is not threadsafe. So, that needs to be fixed.\n. The index out of range is due to there being high RTT values trying to be recorded.\nPrevious runs are still around. And a late joiner on the pongSubscription gets them replayed. This overflows the range of the histogram causing the one issue.\n. I've made the max RTT value for the histogram 10 seconds to deal with potential pauses a little better. This and other changes should make Ping and Pong much more resilient. So, closing.\n. These were coming from not handling cleanup correctly and reusing orphaned state in the driver. This has been redone. Should behave better now.\n. There has been some protections put in to avoid sending on a closed channel. Closing.\n. A possible solution is to create new files for the invocation of the subscription so that they don't overlap.\n. For completeness, was the media driver restarted between runs?\nIf so, then something else has grabbed the port. If not, then how long after running Ping was Pong started up?\n. Good info. I'll look at this later.\nThanks!\n. What URIs are being used for Ping and Pong?\n. It might be good to just include any changes to Ping/Pong and the command lines.\n. I think what might be happening is that the channel used for Ping and Pong, once swapped are not bindable due to the IP address used. Let me give an example and correct me if my assumptions are not valid. If assumptions hold, then this is user error. Which we can probably make cleaner from a reporting angle to aid in debugging.\nhostA starts running Ping. hostB starts running Pong.\nSettings:\naeron.example.ping.channel set to udp://hostA:40123\naeron.example.pong.channel set to udp://hostB:40124\nPing on hostA will bind to hostA:0 for pingPublisher and hostA:40124 for pongSubscriber.\nPong on hostB will bind to hostB:40123 for pingSubscriber and hostB:0 for pongPublisher.\nThis is all good.\nHowever, running Pong on hostA with the same settings results in Pong trying to bind to hostB:40123 which will fail (it has no hostB interface when run on hostA). This is the error I think you are seeing.\nFor this to work, the ping and pong channels need to be changed to accommodate what is going on when switching.\nTo test this assumption, I tried running Pong with aeron.example.ping.channel set to a bogus IP to see what happens. And it resulted in the same exception seen here. (IP is actually one from memory, but it isn't one on my laptop).\njava -cp aeron-examples/build/libs/examples.jar -Daeron.dir=/tmp/aeron1 -Daeron.example.ping.channel=\"udp://157.182.194.39:40123\" uk.co.real_logic.aeron.examples.Pong\nSubscribing Ping at udp://157.182.194.39:40123 on stream Id 10\nPublishing Pong at udp://localhost:40124 on stream Id 10\nException in thread \"main\" uk.co.real_logic.aeron.exceptions.RegistrationException: java.net.BindException: Can't assign requested address\n. I think we will want to make this easier to diagnose and clearer. Let me see how best to handle this. So, re-opening. But marking as enhancement.\n. I simply added the channel to the exception information. This brings a little more context and attention to the exception. Not sure this is enough. But it does make it slightly clearer.\nBTW, even with this error, the driver is fine. It seems to work well after this error is seen.\n. Bumping this for need.\nOne option is possibly to use the driver KA value in the cnc file as an indication of driver existence. This is already updated by the driver.\nIf I new driver starts and there is an existing cnc file, it checks the nanoTime in it. If too old, then it cleans out everything (warning as it does so). But if not, then it exits and won't launch indicating an existing driver is already using the directory.\nThoughts?\n. Proposal for directory management:\n- The default namespace for the Aeron directory based on Java system property user.name. Thus looking like: system-TMP-or-/dev/shm/aeron-user.name. For example, if on Linux and /dev/shm is accessible and username is \"tmont\", then location would be /dev/shm/aeron-tmont/.\n- Liveness of a driver using a given directory is indicated by the CnC file ManyToOneRingBuffer used for commands to the driver. This liveness is already used by the clients. Checking this liveness will be packaged into CnCFileDescriptor as a method for ease of use externally. The timeout value for the driver would be based on the client liveness. This is currently, Aeron.DEFAULT_MEDIA_DRIVER_TIMEOUT_MS. This would be moved to CommonContext so it can be accessed by the driver and client.\n- Removal of aeron.dir.delete.on.exit. The default will be NOT to delete on exit as Java is incredibly bad at this when shutdown in an abnormal way.\n- Addition of aeron.dir.delete.on.start. The default will be false. This indicates whether the directory should be deleted on startup or not irregardless of the existence of a CnC file and driver liveness.\n- When a driver starts up, the following would be done:\n  - If no directory, then create and start\n  - If directory and aeron.dir.delete.on.start set to true, then delete directory contents and start, WARN of directory existence\n  - If directory, but no CnC file in directory, delete directory contents and start, WARN of directory existence\n  - If directory, CnC file exists, but liveness is too old, then delete directory contents and start, WARN of directory existence\n  - If directory, CnC file exists, liveness is young, and aeron.dir.delete.on.start set to false then DO NOT START, log error and exit.\nUpdate: add API to do a manual directory cleanup as suggested by @jessefugitt \n. @brianhorst One of the points of cleaning up at the start is to have the media driver always start with a clean slate. Hopefully a media driver failing will be less and less likely. But if it does, the app should consider that to be a pretty big failure and should restart everything anyway. In the future, we could look at doing that and making it easier, though.\n@jessefugitt I like the idea of an API to do cleanup. That is a very good suggestion and will incorporate it.\nFor an embedded driver, I'm not sold on it automatically generating a random dir name. Would like to hear @mjpt777 , @lbradstreet , and @MichaelDrogalis weigh in on. For an embedded driver, I think it is more important to control the location directly and think it would be good to force that, really.\n. naming after the PID would also help with identifying the driver...\n. @rlankenau can you explain the multi-user issue? Doesn't just using user.name address a multi-user collision?\n. @MichaelDrogalis the driver could crash on startup before it could create the directory. But not sure we can fix that. There could be a crash in a static that happens before main. Or the parent directory could not be writable by the user, etc.\n. BTW, IIRC Windows \"re-uses\" PIDs pretty aggressively. Also, PIDs roll pretty quick in a busy system.... or one that has extended uptime.\n. @rlankenau good point about the same user doing an embedded and standalone driver at the same time.\n. Going to bite this off myself soon.\nAlso, both @mjpt777 and I think the random UUID generation is more problematic than usable. Thus, I plan to remove it.\n. Proposal for directory management:\n- The default namespace for the Aeron directory based on Java system property user.name. Thus looking like: system-TMP-or-/dev/shm/aeron-user.name. For example, if on Linux and /dev/shm is accessible and username is \"tmont\", then location would be /dev/shm/aeron-tmont/.\n- launchEmbedded will generate a UUID-based directory appended to the base directory after the user.name. For example, /dev/shm/aeron-tmont-UUID. Removal of launchEmbedded from EmbeddedThroughput and EmbeddedPingPong as this is hampering tuning and monitoring with AeronStat.\n- Liveness of a driver using a given directory is indicated by the CnC file ManyToOneRingBuffer used for commands to the driver. This liveness is already used by the clients. Checking this liveness will be packaged into CnCFileDescriptor as a method for ease of use externally. The timeout value for the driver would be based on the client liveness. This is currently, Aeron.DEFAULT_MEDIA_DRIVER_TIMEOUT_MS. This would be moved to CommonContext so it can be accessed by the driver and client.\n- Removal of aeron.dir.delete.on.exit. The default will be NOT to delete on exit as Java is incredibly bad at this when shutdown in an abnormal way.\n- Addition of aeron.dir.delete.on.start. The default will be false. This indicates whether the directory should be deleted on startup or not irregardless of the existence of a CnC file and driver liveness.\n- CommonContext API for manual cleanup of driver directory. Suggested by @jessefugitt \n- When a driver starts up, the following would be done:\n  - If no directory, then create and start\n  - If directory and aeron.dir.delete.on.start set to true, then delete directory contents and start, WARN of directory existence\n  - If directory, but no CnC file in directory, delete directory contents and start, WARN of directory existence\n  - If directory, CnC file exists, but liveness is too old, then delete directory contents and start, WARN of directory existence\n  - If directory, CnC file exists, liveness is young, and aeron.dir.delete.on.start set to false then DO NOT START, log error and exit.\n- I would like to add a means for the MediaDriver to read in a property file for its settings.\n. Changes (aside from property file) are in.\n. Going to move property file request to its own issue and close this.\n. New URI scheme has been in place for a while thanks to @mikeb01 !\n. closing this. With the new BufferClaim idea, this goes away.\n. The C++ build is an early work in progress. Lots more to do. So, this is awesome feedback. Thanks!\nKeep it coming!\nIs the desire to stay away from cmake because of pure GNU concerns? Or something else?\nThe .cmd file is very early and needs some work (along with the cppbuild script itself).\n. That sounds awesome! Be very interested to hear how things work out! This could be a very interesting use case that would love to see happen.\nThe reason for CMake is ease of porting and easier to modularize builds. Which is why KDE, LLVM, etc. use it. We are more worried about the former than the latter, though. However, I think having a generated generic makefile from CMake that is included in the repo might be a way to do what you want. Instead of having to use cmake, if it is on a select platform, just running a make might be easy enough. We will have to look into that and see if that might be viable. An alternative might be to include a basic Makefile for a specific platform or platform(s).\nWhat specific environments do you need, BTW?\n. @mekishizufu thanks for the correction. I did know about the paths, etc., but since there is such a wide assortment of generators, was kinda hoping someone had that already. Oh well.\n. Moving to maven from gradle would be a hard sell to @mjpt777 and I.\nYou can install locally to maven by doing the equivalent in maven, but with gradle:\n$ ./gradlew clean install\nIf you want to also run the tests:\n$ ./gradlew clean build install\nI will add it to the default tasks list as well.\nNOTE: I found that the group name for Agrona was wrong. This has been changed in Agrona as of real-logic/Agrona@447c462af1f403c63eedf81bc52e1d67414e1186 and in Aeron as of 5131f32f0ed6ddcc08a942687bae27bddd1c9daa\n. Hmmm. This looks more like a gmock/gtest issue than an Aeron one... but will take a look and see if we are doing something that is dangerous here.\nThanks!\n. This is not dangerous and does not give a false positive. So, it should be OK.\nAll the same, expect a cleaner build in the future anyway.\n. @kspinka I think this might be worth considering. Would like to hear @mjpt777 thoughts. Making the directories user.name specific could be useful as a default.\n. Might be good to discuss it in #14 \nMulti-user environs should feel natural.\n. Aeron should go ahead and query the max and grab it. The tests shouldn't fail, obviously. Thanks for hunting this down!\nBTW, one of the advice given in the Performance Testing Guide is setting the rmem_max.\n. Actually, we can just use getOption for SO_RCVBUF to get the system default on a newly cerated socket.\nFor the tests, yes, they should be OK with about any value since they aren't throughput specific that I can think of.\nHow about this? Let me know if it works...\n1. Check system default by creating socket and getOption for SO_RCVBUF\n2. If system default < needed, try to set. If successful, then all is good.\n3. If system default < needed, & try to set fails, then warn, but continue?\n. @mjpt777 routinely uses Linux (he'll have to chime in on distro and version) & Windows.\n@RichardWarburton routinely uses Linux (again, he'll have to chime in on distro and version).\nI make sure Mac is OK.\nI've not seen these errors. Nor heard of them lately.\nI would think that some earlier version of the build has the ports. That would explain the bind errors. But the DriverConductorTest and similar should not really fail. Haven't seen these.\nWhat distro is in use?\n. Hmmm. Not sure how the wrapper handles that... I'll check into it a bit...\n. Not sure what is going on with CentOS here...\n. assigning to myself. We'll discuss timing of this for a 1.0 release.\n. Should revisit this soon.\n. Watch this space....\n. It is done. Aeron 0.1 is submitted to maven.\nArtifacts:\n1. aeron-client for client only\n1. aeron-driver for driver and client\n1. aeron-all for client and driver and Agrona\n1. aeron-tools and aeron-system-tests also included if desired\n. FYI, I will be doing a release of SBE tomorrow.\n. This probably should be added as an FAQ item... opinions?\n. The default flow control strategy for multicast uses an aggressive scheme where the sender only cares about the most forward receiver. Also, it doesn't track number of receivers or consider slow receivers.\nThus the behavior is that the first subscriber \"unblocks\" the sender. Subsequent receivers may miss messages as they wait for a SETUP frame to come down. Under load, this means loss.\nIf additional semantics of coordinating initial setup are needed, then a custom flow control strategy is the desired way to make this work.\n. There is no retransmission buffer per se. It depends on the term buffer rotation how much is available for retransmit at any one time. In practice, this can vary between 1 term size and 2 term sizes depending on location in the stream and cleaning. Notice that flow control interacts here and slows things down if too fast for a receiver to consume. This tries to keep the term in range for NAKing and retransmission.\nThe term window is used as a flow control construct. It is essentially how much space is available to be immediately sent between either publisher to driver, driver to driver, or driver to subscribers. It's not really for retransmission, it's for flow control.\nIn terms of \"unlock\"ing a receiver without an SM, currently no. But if you wanted to do it, it would be possible to do it a number of ways. Again, I wouldn't do this since flow control is actually a good thing.\nHere is a possible way to do it... have DriverConductor periodically call into the strategy as a \"tick\". i.e. call a method on a periodic basis that could be used as a token bucket rate limiter. This could then move the position ahead in a way to keep things moving at any specific rate desired.\nCheck how the conductor handles liveness checks for a way to do the handling of the periodic call.\nIt might not be bad to have a periodic update for the strategy anyway...\n. Thanks for the catch. That was a holdover from a refactor, I think. I'll make a note to clean it up.\nSetting the initial position limit should be OK. It effectively disables flow control between drivers. But, the sender may overrun the receiver. So, you might see errors from that. Overruns are dropped. So, may need to up the receiver window size to compensate.\nCouple thoughts on the points you raise.\nYour first point is, essentially, most market data systems using snapshot and delta. Works fine. Can build that with Aeron just fine... some additional points on how flow control handles spikes in a second, though.\nYour second point is also the same. Depends on how flow control handles spikes.\nAeron's flow control is deliberately designed to support very large windows for various reasons without back pressuring until it all is full. As SMs come back very frequently, the only real time a publisher is flow controlled is when it has exceeded the fastest receiver by over a full term size. As the term size can be set to pretty high values (as long as they fit in memory), this means that spikes of well over several gigabytes should be supportable. This is very different than TCP where the window is small. In Aeron, the windows are large and can only back pressure when full.\nIn short, if you actually don't want to backpressure the publisher, then use a big term size as you would for handling loss recovery, but think more in terms of how far ahead you could possibly want the publisher to be before it should be held back (as a last resort).\n@mjpt777 has a great blog post about flow control and back pressure. I'm sure you've seen it. Having written these systems with and without flow control in the past, I prefer flow control and making being able to use big windows for it as a fallback.\n. The protocol spec should allow a sender that sends without having an SM. The implementation right now, may not, however. But, I think a modification to allow this to occur with a custom flow control strategy has some merit.\n@mjpt777 @RichardWarburton what are your thoughts on allowing the ability for a flow control strategy that can send in the absence of receivers? Perhaps one that is just rate limited?\n. Opening back up for comments and visibility.\n. I've got battle scars for receiver notifications. They can't really be made reliable notifications in a multicast case unless receivers are tracked. Which might be a good flow control mechanism. However, as the protocol does do some of the job of helping make them more best-effort, maybe they become more usable. Interested in @mjpt777 views as well.\n. For larger receiver sets, over 25 or so, I would not use flow control. And I would (and have) used FEC (both proactive and NAK-based) for receiver sets of that size and much, much larger. It's a different set of requirements and environment. Aeron isn't well suited for that at this point. It might be later, though.\nI'll take a look at your branch and have a think on what else we might need to change or make less strict in the protocol. I'm busy with the holidays & prep for YOW! next week. So, won't be immediate.\n. @mjpt777 and I are at YOW! and we've talked a little bit about this. More discussion to follow. However, I think we both think that a fixed rate limiter as a strategy makes total sense.\n. After some discussion, the plan is to disallow Publication.offer to succeed unless at least one subscriber is known.\n. We might be able to. Initial thought was to mask it so that it is just a window of 0. Are you thinking the app should be informed this is different than a normal flow control?\n. 0 for most POSIX stuff means success. So, I would reserve it for returning position 0  (as in the first message to a stream). Then as @mikeb01 suggests, negative values for different errors.\nThen the normal pattern of error checks is like it is with most syscalls for POSIX.\nc\nif (Publication.offer(...) < 0)\n{\n     // handle error\n}\n. No solid plans. But a lot of interest. I think it is quite likely that this will be done in the future. But if someone wants to take it on now, that would be awesome!\n. Absolutely fine to ask questions in issues. Also, might be an idea to use gitter.im room for real-logic/Aeron for IRC style interactions. Can't guarantee I (or we) would be there, but we can try to be and it is persisted, so if we aren't online, we will see it later.\n. Well, not quite the same.... nothing beats trolling IRC.... not that I know about that <<..... >>....\n. Going to close this. Gitter is the way forward! Tally-HO!\n. Looks vaguely similar to #30 . Is this CentOS?\n. Anyone else have Windows 7 that can confirm this problem?\n. Closing for now as lots has changed.\n. For situations like this where it is not possible to know apriori the optimal mapping, it is fairly useful to do simple striping across whatever boundaries the messaging system provides. In Aeron, that is channel (assuming multicast), then streamId. My recommendation is to take something similar to what you have (hash(topic) -> channel + streamId) controlling the hash function to evenly spread out the topic onto a range of channel and streamIds that is a property of the hash. As long as the hash is stable, you should be fine. For channel,  consider the hash to generate multicast group address ranges or (for unicast) port ranges.\n. I think the subtlety is from the single access of logAppenders[activeIndex] as well as visibility around the store IIRC. However, since the code has changed, I could be misremembering what Publication.nextTerm used to do. @mjpt777 and I both looked at it quite a while and convinced ourselves of correctness multiple times wrt term ID and state changes. The current way seems a lot clearer.\n. Only a quick glance back to refresh my memory. @mjpt777 will have to correct me when I am inevitably wrong here.\nThere are several things here...\nactiveIndex is set before the status is ordered updated to NEEDS_CLEANING. That is what I meant by the store. However, looking at it, I don't think that is what makes activeIndex workable. There are lots of other barriers....\nensureClean has inside at least a getIntVolatile and a possible compareAndSet before the assignment. Also, activeTermId has get and lazySet before the assignment. In addition, there is a position call that does a getLongVolatile when the flow control limit is checked. But that is after the activeIndex is loaded. But, no load barrier on the caller to offer/tryClaim, correct.\nbut it shouldn't matter.\nTo get into nextTerm the offer (or tryClaim) had to be the one to trip (not fail) the LogAppender call, thus in the worse case of someone using the previous activeIndex it would simply fail and not trip and rotate. It goes into the subtle part of how the LogAppender works. If you trip, you rotate, but there is no harm (beyond returning fail) on using an old (still dirty) log appender. i.e. having an old activeIndex value used for the offer/tryClaim.\nCombined with flow control to prevent using a cleaned log buffer as an old log buffer, this gives the needed protections.\n. You raise good points. And as this is ground that we went over quite a while ago now... and as it was before we allowed multiple publications to the same Publication object, it might be the case we missed something.\nHowever, limit flow control check keeps this in pretty close range. i.e. an edge. Putting the data into the \"new\" log buffer is OK. It's just out of order and caught an edge.\n. And there you have a fine example of a race between @mjpt777 and I. He seems to have won by a few minutes, but browser didn't see it visible until I hit comment.\n. agreed!\n. Sorry for the delay. I'll check into this.\n. What version of CentOS is this? CentOS 7 is packaged with gcc 4.8.2 and not 4.9.0. Did you build the compiler yourself?\n. OK. Will make this an enhancement to not skip the RPATH. This makes sense.\nThanks!\n. If I understand your concern, how is the case handled where an overwrite could write just the correct thing into the tail offset field of the record header while it is being copied out. Correct?\nAssuming you mean an overwrite after the receiveNext validate step.\n. I don't see that anything stops the case you mention. I very vaguely remember talking about this with @mjpt777 a long time ago.... but can't remember what, if anything, we came to a conclusion on.\nThe case of reading when already overwritten is protected some better. But the receiver being interrupted after receiveNext and before validate is not as protected.\n. Daydreaming of SSE4 CRC32 access in Java....\n. Odd. The addition of find_package(Threads) should add that naturally.\nWhen you run cppbuild, what is the output of the cmake part? i.e. the initial bit from a clean build.\n. I think ${CMAKE_THREAD_LIBS_INIT} might be needed for the aeron-samples target_link_libraries. That's a guess based on the error and what I see.\nThis does not seem to be a problem for CentOS 7 with gcc 4.8.2 and things build and test fine there.\nCould you try adding that to your copy and see if it works? Adding to the flags directly is a bit uglier since it might break some other systems later if/when ported.\n. Yesterday I added the libs as well. So, the Debian build should be OK now. Seems to be OK on Mac & CentOS. Windows is not happy at this moment with one usage, but I will be cleaning that up soon.\nFreeBSD, I would love to support. But will have to be done as time allows right now. The C++ API is still under a good deal of change and won't be feature complete for a little bit.\n. Going to close this. Seems to currently build fine on CentOS. And I think Windows builds OK for the moment. C++ still in a state of flux and under active change, though.\n. Awesome! Thanks! I'll be looking at this tonight and tomorrow.\n. I think this is due to the default flow control strategy not tracking activity of the receivers and timing them out. It's all very simplistic and taking the position min irregardless of receiver activity. That will be changing as we add IPC support and have to deal with this cleaner.\nBTW, you could take a maximum position strategy and avoid the pause.\n. I think the \"could not find\" is due to the driver timing out the underlying pub/sub pieces. Which is fine. However, the hang is not. I think it might be due to the API not seeing a response to it's correlation Id in the error. Have to consider how best to handle this one.\n. The error handling has been redone a bit. This has probably been changed. Worth a retest.\n. Thanks! This is great stuff to follow up on.\nPretty clear evidence that something is not right with how ArrayList handles multiple operations somehow. Worth a look.\n. I believe this is due to fragmentation getting the tail off. I can reproduce this behavior with the following.\n$ java -cp aeron-samples/build/libs/samples.jar -Daeron.sample.messageLength=8144 uk.co.real_logic.aeron.samples.EmbeddedThroughput\n8144 should be exactly 2 full frames. 8192 - (2* header length).\n. drat! Everything lined up on that one. But now we have a data point that it isn't just fragmented messages.\n. @strangelydim can you re-run with the latest changes and see if these changes work for you?\n. This should be possible to add. Not really needed for operation due to how the LogRebuilder works, but definitely nice for dissection.\n. I'll move the shared memory for linux check into common from samples. Then hook it into the media driver config.\n. Plan is to do this and to make it so that if /dev/shm is not available to default back to /tmp or more precisely java.io.tmpdir.\n. The exception is due to sending a message larger than the max message length. Which is expected. I'll add a method to grab the max message length from the Publication for ease of use.\nHowever, why that is causing a frame to be sent that is malformed is undesirable. I'll take a deeper look.\n. Looks like this is isolated to publishers that are created and then never send anything. The heartbeat can't send any data since no data has been sent. So, it sends a 0 length UDP datagram. Which is dropped as malformed. This is benign. But noisy.\nThis behavior is different than it was in the past. So, some of the refactoring of the DriverPublication probably got rid of some checks.\nWill be looking at this logic a little closer.\nWorkaround for now is to send at least a single piece of data.\n. Note that the change committed means that your app will see inactive connections since on data has been sent. This will be a new connection immediately as the SETUP frame will come in again.\nI think this is the right semantics. Until data is sent, it's really not a true stream.\nThoughts?\n. Downside to that might be more branching in the client subscription.\n. Not without changing the LogRebuilder, no. We decided at one point to remove 0 length data frames so that we can simplify the processing on the receiver.\n. It's not that bad to keep the receiver active with the SETUP frame. I'm just not convinced it is the right semantic...\n. Here is a couple questions I am interested in hearing opinions on.\n- Is the liveness of a stream only indicated by the publisher being alive?\n- Does the liveness of a stream depend on there being data?\nWhat it comes down to: \"is a stream with no data considered alive\"?\nMaybe this is too metaphysical...\n. The issue here was that it wasn't actually 0 length Aeron Data Frame. It was a 0 length UDP datagram. No UDP payload to hold an Aeron header. The receiver got the message, logged it got it and dropped it. It couldn't even know what the session Id or anything else was since it had no Aeron header. Clearly shouldn't be sent since it has no value Aeron can assume from it.\nA 0 length Aeron Data frame is valid. And should be fine.\nThis was simply noise. And it wasn't operating correctly.\nI've been warming to the idea of keeping the stream alive while the sender is alive as I thought about it over the weekend.\n. Yes. Length of last send in the DriverPublication is 0. We sent 0 UDP length datagram when we tried to send a heartbeat.\n. I'll be looking at the cleanest way to use a SETUP frame to keep a connection active. I've been looking at it more from the usability angle and it only makes sense. The metaphysical angle brings up other \"uncomfortable truths\" that should be left out anyway.\n. Just an update. We intend to change the heartbeat to be a 0 frame length data frame. I.e. all heartbeats will be a single data frame with a frame length of 0. This should elegantly solve the keepalive issue as well as provide a cleaner heartbeat all around. Timeframe is \"soon\".\n. I suspect this is due to the term length max being too small. This controls the template file size. Which is used to zero out. In that case, the end of a \"cleaned\" term could contain junk and something like this could be seen.\nI'll look into this and see if I can reproduce and then put a check in place to prevent.\nUpdate: there is already a check in place for this. Somehow it is not being hit, though.\n. What arguments are used to start the subscriber media driver?\n. I think I know what this could possibly be. And will be trying to reproduce.\nThe max being too small for the size on the publisher AND the subscriber being on a separate driver without such a restriction.\n. I think with the latest change to #87, this could be gone. So, closing this for now. Please re-open if seen again.\n. The C++ port is incomplete yet. And the Java version has been ongoing with some changes that could effect the C++ API.\nThanks for pointing out the fault. Once we stabilize the changes for Java, I'll be jumping back onto C++. Until then, it may be good to wait on using C++.\n. Back pressure is expected. As what you are doing is spinning on tryClaim, it should be normal to see quite a few fail. You might also try doing a yield between claim attempts as well.\n. I will sort this out.\n. I have no issue making conclude package scope.\n. When driver is embedded, does it use the normal driver directory? if so, then 2 drivers using the same directory might be clobbering one another in bad ways.\n. Fascinating that it is so regular in the number of possible missed offsets. Bet that is a clue.\n. OK. And what is the message size then? That should give us an idea of gap and equate to Terms and offsets.\n. What about the length of the message being 0? Wouldn't the checksum then be 0?\n. When running checksum over the header with the checksum field set with the checksum value, it should always come out to 0. IP, UDP, and TCP all do this on the receiving side to check. i.e. check against 0 instead of blanking the field.\nJust throwing ideas out, actually, to why it could be 0.\n. @mjpt777 Not just quite yet. Once I put some changes I am doing to bed in the next couple days, I will look deeper into this and see what I can find.\n. something is really quite odd.\nThe receiver isn't just sometimes seeing old data, it seems to also (from the output you showed) be seeing into the future also. Alternating between them.\n. Worth doing a run with the latest update to see if the duplicate data goes away.\nThe original issue reported, though, probably isn't addressed.\n. I'll look at this soon. When I moved everything to the cnc file, I used the then current sizes as specified. Which didn't seem right, but I wanted to not change them at that time. But, yes, they do need to be modified.\n. Reopening to set different sizes for buffers.\n1MB values\n1MB labels\n256 bytes label size\n. From @mjpt777 : Label size of 124 bytes + 4 bytes for length so each is 2 cache lines. This will be the same as the counters.\n. These look to be great changes. If the PR can be updated, I will merge it in.\n. merged.\n. Thanks! This looks good to me. Great additions and changes. Can you update the PR with the latest changes so that it can be merged?\n. There has been a change that could effect #87 so would be great to see if that addresses this. I think it very well could.\n. Can you try this again with the latest and see if it still occurs after we addressed #87 ?\n. Are these errors still seen with the latest set of changes?\n. Are you running two media drivers?\n. For Windows, the Publication logbuffer is held until the Publication is explicitly closed by the application. Then the driver will timeout it's state and delete the file. What might be happening is that the application is not calling Publication.close when it is done with the Publication.\n. There have been some cleanup changes on the client that might address this. Would be great if you could retest.\n. Will clean this up when getting back to the C++ driver.\n. The SubscriberTool shares the media driver, correct?\nSo, the media driver stays up the entire time, correct?\n. Would you be so kind as to retest this with the latest changes?\n. Have not seen a retest on this since the client threading model was redone. Let us know if this still persists.\n. There are a number of things to tease out here.\nThe intention is to have multiple processes that can send to the same streamId and sessionId on the same channel as long as they are using the same media driver. The data structures and Publication, etc. are all designed with this in mind. If that is not working, we should look and understand why and plan to address them. The plans we have for IPC revolve around this, so any issues need to be ironed out. Are these effects happening with the same media driver with 2 Publication apps?\nThe suggestion of using a publication ID might work. Will have to think about that. But it does change the API a bit and will change the underlying protocol between the client and driver. Not necessarily bad, though.\nI'll mark as enhancement for now.\nThe restarted driver with a set sessionId is potentially a more difficult problem. The initialTermId picked would have to fit into the receiver window, which is small. So, right termId and offsets. This is unlikely. Combined with liveness, this is well within most usage. Or should be.\nHowever, an unsettable invocation Id that can be unique might be a possibility. Or wrapping that into a sessionId.\nSetting sessionId for Publications is advanced usage and takes with it more responsibility. But, it would be good to know the boundaries and maybe soften them a bit.\n. Thanks, @jessefugitt !\nWill start looking at this and #96 soon. Multiple apps using the same Publication is a use case we want and will require sessionId to be set (or something else).\n. We do not intend to allow a restarted Media Driver pick up any existing publications. In addition, any usage of session Id generation by the application comes with it a number of responsibilities and coordination. So, at this time, we don't intend to add any additional limitations.\n. The timerwheel exceptions might put the trackRebuild processing into a weird state. i.e. half work done, etc.\nThe overruns might have something to do with that.\nHowever, overruns with no other exceptions would be weird.\n. Just as an aside...\nAs the publisher is blasting out as fast as possible on 100 UDP streams, I would expect massive loss as the buffers* are way too small to allow that on a single socket (as they are all using the same channel). In that case, the flow control windows should be a good deal smaller to avoid that loss.\nUpdate: * = socket buffers\n. I think the best would be congestion control. Grow and shrink the receiver window. And it will find the right sizes for each stream automagically with minimal (but not 0) loss.\n. #110 mentions also bad behavior with a large number of streams being published on.\nHowever, the TimerWheel issue should be isolated and analyzed.\n. Think I traced this back to the RetransmitHandler adding and removing timers on the Sender thread and the LossDetector adding and removing timers on the Conductor thread. As TimerWheel is not thread safe, this was back and could lead to the situation described.\nThe solution was to remove the TimerWheel usage totally from the driver. Which has other advantages as well.\nLeaving this open for the moment, but this should be fixed now.\n. Technically, as TimerWheel is gone, this can't happen. So, closing this.\n. I added a check for this exact scenario. faa5689bc8d8f3742636235c04dfe273adf1c016\nI no longer see these in Thwacker runs.\n. Would you be so kind to retest this with the latest and let us know what happens?\n. I believe that if the publisher is trying to saturate all 100 streams without congestion control that it is likely that huge amounts of loss will occur and slow everything down painfully.\nIt would be great to see what happens now with the latest set of changes, though.\n. What OS is this?\nOn Mac, I can reproduce this. But I've also tracked it down to over 9GB of space on the file system and the VM subsystem being totally thrashed causing the timeout.\n. 90K messages to 100 pubs/subs. So, 200 for a single driver. As fast as possible. A bit of pressure on the VM. Just a tad.\nIt's also almost 10GB of space in the Aeron directory.\nOn Mac, I can sustain this at 100 mps without really breathing hard. Things are fine.\n. On Linux, I couldn't create 100 pubs/subs, /dev/shm runs out of memory. However, when I reduce this to 50, everything is created and runs fine even at no rate set.\nSo, I am closing this.\n. Several changes should address this.\nWould you be so kind as to retest?\n. As the client has been redone and have not heard from a retest, going to close. If this still occurs with latest, let us know.\n. Is it always this particular test? Or is it sometimes others? Just trying to understand. I don't see it, so...\n. @mjpt777 that was also Windows 7, correct? Not that I think it should matter.\n. It is interesting that the stack trace has it waiting in addSubscription at the second stage. I wonder if this could be exposing some possible client side issue...\nIf it is always the same test and same stack trace, that is.\n. Quite possible.\n. Thanks!\nWe plan to redo how the client conductor handles this. And will most likely be eliminating Signal usage and making it much simpler.\n. The client API model has been redone. With the elimination of Signal, this should act differently.\nWould you be so kind as to retest this with the latest?\n. With the latest, this does not throw the signal error. It does throw the driver inactive timeout as one would expect from the code. So, this appears to be addressed.\n. Can this be retested now with the latest set of changes?\n. I'm not seeing any hung threads here. Or I should say, any threads that are waiting on stuff from Aeron for whatever reason.\nI think what is happening is that the publication goes inactive since the client (publisher) doesn't show liveness. It therefore is reclaimed by the media driver as intended. When it comes back, it continues to publish, but the media driver isn't paying attention.\nThe publisher is still able to publish, though, into the logbuffer. But it isn't going anywhere.\nIn short, the client (publishers and receivers) have to show liveness or they will be timed out. If the timeout is too short, then it can be extended via configuration.\nOne additional check, when the publisher is subsequently closed, does the media driver still work?\n. Does this still happen with latest changes?\n. In the past, this has indicated further problems with the client threading model.\nHowever, major changes coming here soon. So, this will probably be going away as we plan to eliminate Signal usage.\n. Can you retest with the latest set of changes? Let us know if it is still happens.\n. The driver should always use the canonical form internally (aside from logging and for counters, etc.). The client can't use the canonical form since it has no idea how that is generated for the media (and it is media specific).\nInvalid and unknown fields in the URI should cause it to be rejected.\nIn short, I don't know why the deafness is seen, but it is OK for the driver to send back to the client the originalUriString as the client shouldn't be interpreting the string and should only be doing a check to see if it matches the original string it got from the user.\n. Thanks, @mikeb01 . Would like to know why this causes deafness, though.\n. I think I know why this happens now.\nWhen the ConnectionReady is sent out, it contains the first URI only. The client can't match up both subscriptions. So, only the first subscription gets data. The second is deaf because it never sees a matching URI from ConnectionReady.\nThis indicates to me that making sure unknown params cause an invalid URI is the right way to go.\nAlso, one additional thing to notice is that if multiple URIs are used that have different params, but the same canonical form, then they will not match either. Thus causing the same behavior. One thing to do about that is to either WARN or invalidate when the originalUri does not match when the canonical forms are the same. thoughts?\n. @jessefugitt I think I see why that behavior is seen. The URI strings don't match, so the client can't tell.\nThe change in behavior I suggest would cause a warning (or an invalid URI exception) for this.\n. @mjpt777 and I discussed it a bit earlier and I'm going to look at doing away with the string in the ConnectionReady and using an ID. Have to work it through, though.\n. Turns out that the ConnectionReady flyweight already explicitly contains all the registration IDs for all the subscriptions. w00t!\n. Is this fixed now?\n. With the change to #128 the need to reject is less. I see the value of allowing the unknown fields to exist. And now, they shouldn't matter if they do.\n@mikeb01 what is your opinion? As a user would it be more convenient to reject? or just ignore?\n. After careful thought, I don't think we should reject with unknown fields. Mostly for back/forward compatibility. But also for the fact that fields might be useful to the applications.\n. Update the PR and I can merge it for updating the tools.\n. Thanks!\nYes, disk persistence is something that the LogBuffer structure and general architecture of Aeron fit very well with. @mjpt777 has mentioned this in his talks as well.\nPersistence is, in fact, on our TODO lists and something we have spent a good bit of time thinking about and designing already.\n. Combining the position information into simple pieces of logic allows much more complex behaviors without adding that behavior internally.\n. I'll be looking at flow control strategies after C++ API is complete.\n. I've been playing with this on a single machine. Here are the command lines for running it with 3 embedded drivers. Must have the latest changes to SubscriberTool for setting the control channel port.\njava -cp aeron-tools/build/libs/tools.jar -Daeron.dir=$TMPDIR/aeron-sub1 -Daeron.tools.controlChannelPort=62778 uk.co.real_logic.aeron.tools.SubscriberTool --driver embedded -c 'aeron:udp?interface=127.0.0.1|group=224.17.17.13:32511#5'\njava -cp aeron-tools/build/libs/tools.jar -Daeron.dir=$TMPDIR/aeron-sub2 -Daeron.event.log=\"CMD_OUT_IMAGE_READY,REMOVE_IMAGE_CLEANUP,CMD_OUT_ON_INACTIVE_IMAGE,CMD_IN_ADD_SUBSCRIPTION,CMD_OUT_ON_OPERATION_SUCCESS\" uk.co.real_logic.aeron.tools.SubscriberTool --driver embedded -c 'aeron:udp?interface=127.0.0.1|group=224.17.17.13:32511#5' -r 10mps\njava -cp aeron-tools/build/libs/tools.jar -Daeron.dir=$TMPDIR/aeron-pub uk.co.real_logic.aeron.tools.PublisherTool --driver embedded -c 'aeron:udp?interface=127.0.0.1|group=224.17.17.13:32511#5' -r 100000m@30mps -s 1000\nFor me, this is behaving well. However, I do see a potential issue that I will drill down into soon. I don't think it explains what you observed, though.\nSince the issue was filed, we made some changes that could effect what was seen. So, it could be OK now. However, I will keep this open until I can fully understand the potential issue I see is.\n. The potential issue has been dealt with via a cooldown added with 6fa50af . This seems to work as expected now with a long run.\n. I'll be looking at flow control strategies after C++ API is complete.\n. This is acting as expected. The answer is that 2 Subscriptions sharing a media driver should act differently than 2 Subscriptions with 2 media drivers. When sharing a media driver, the observed behavior in this issue is the correct behavior.\nThe reasoning has to do with the media driver being the agent of flow control information. This is so that multiple Subscriptions can share the same resources. i.e. a unicast channel or the same multicast channel. So, no matter how many Subscriptions use the same Image (sessionId, channel, and streamId), the flow control sent back to the Publication is aggregated by the media driver.\nIf this behavior is not desired, then multiple media drivers should be used.\n. Please retest and let us know if this is fixed.\n. Perhaps. However, couple questions:\n1. Why is DriverConductor line 243 the event read and not the read of the command queue from Sender? This looks like not everything was updated to the latest in the run.\n2. Why would the event log be having any data on it? I don't see aeron.event.log being set on the command line for the media driver.\n. Sorry, was looking at wrong dump.\nIt is possible. But the event log should only be seeing exceptions. Which would indicate something else is going terribly wrong if it has that many exceptions.\n. Wait, no... line 243 in DriverConductor is not a ManyToOneRingBuffer in the latest code.\nhttps://github.com/real-logic/Aeron/blob/master/aeron-driver/src/main/java/uk/co/real_logic/aeron/driver/DriverConductor.java#L243\nThe stack doesn't jive with the latest code.\n. That combination of events sounds what @brianhorst has been tracking down. It might be the same thing.\nHere is a little information, though, on what you mention.\nA subscription in the dispatcher is protected by ref counts (in essence). So, the only time the subscription should be removed is when no one wants that subscription. A subscription is unique to a channel + streamId. As a NetworkConnection is specific to a channel + streamId, they should not be shared by another subscription unless that subscription is also the same channel + streamId.\n. From what you are saying, the sequence of events is:\n1. ADD_SUBSCRIPTION\n2. new connection\n3. REMOVE_SUBSCRIPTION\n4. ADD_SUBSCRIPTION (before Receiver thread can set status)\nCorrect?\n. Thanks! Yes, I see the test. I was just making sure I had the sequence of events correct from what you observed. The system test is great, but it is harder to make the sequence happen with. A test under DriverConductorTest is ideal in that it can assert the exact sequence and verify behavior.\nAlso, knowing the sequence let's me think how best to handle it.\n. By allowing the conductor thread to set the connection status, it could flap back from LINGER to INACTIVE, I think, if the Receiver deems the connection not getting data for a while. This results in double ON_INACTIVE_CONNECTION events.\nSaw this a couple weeks ago and fixed it by adhering to a stricter means of changing status.\n. I changed this to look at the network connection subscriber count and avoid setting the status. This seems to work. So, going to close this as of c39160d4904424b85e1073484cf226557c0893a9\nA quick check on your end, @jessefugitt , would be great.\n. I've incorporated this fix with a new unit test. So, closing the PR.\n. Initial page created and content in.\n. I've updated the initial issue to include the constant channel namespace for IPC. The string should follow the Aeron URI scheme. Probably aeron:ipc.\n. 42fda59e093493893e6d96418f50b9459f6327e3 has removed SessionID as a parameter of Aeron.addPublication and as of this commit, the driver has responsibility for SessionID generation as mentioned above.\n. The semantics with IPC have been added. The channel is aeron:ipc. Should be fully usable now.\nSemantics are slightly different than network channels.\n- an addSubscription will create the Image if not already created and an onAvailableImage will always be triggered. This notification says nothing about the Publication. An Image can exist with IPC without an active Publication.\n- the Image exists as long as there are either Subscriptions or Publications alive. Once all are gone, the Image will be reclaimed. As the application must have closed the Subscriptions and Publications previous to the image going away (or timedout), there really is no onUnavailableImage delivery to the application.\n. Thanks! Will look into how to reword.\n. I noticed that since the changes, one of the different behaviors is that if a Publication is closed and then restarted that the old Publication is re-used for the new Publication. This works fine.\nHowever, PingPong waits on a latch that comes in, so re-using a Publication may not trigger the newImage callback and thus not countdown the latch.\n. I am guessing that is what is going on.\nBut I did notice the behavior when I was playing with BasicPublisher and BasicSubscriber.\n. This is beyond Ping Pong. \nWhile trying to add proper support for Publication.offer returning NOT_CONNECTED, I've been chasing an odd behavior where re-used Publications would wedge. I thought it was definitely my changes. But it doesn't appear to be. And after taking out my changes, it still happens.\n1. Start driver\n2. Start RateSubscriber\n3. Start StreamingPublisher with 500M 40 byte messages. Let it run to completion. Then don't continue.\n4. Re-Start StreamingPublisher\nI've been seeing the second invocation stop right after about 200K messages, then stopping on the send.\nStreaming 500,000,000 messages of size 40 bytes to udp://localhost:40123 on stream Id 10\n2.6e+05 msgs/sec, 1.0e+07 bytes/sec, totals 262143 messages 9 MB\n0.0 msgs/sec, 0.0 bytes/sec, totals 262143 messages 9 MB\n0.0 msgs/sec, 0.0 bytes/sec, totals 262143 messages 9 MB\nThere is something a little deeper than just the Ping/Pong app going wrong. I'll change the title.\n. BTW, the messages sent show (200K of them) are simply filling up flow control window between the Publication and the Sender. They don't seem to make it out to the wire.\nWhich might partially explain what is happening.\n. What I have found out... so you can use it as you progress.\n- SMs are being sent and come in. There is plenty of flow control room.\n- Plenty of data (I think) in the LogBuffer to be sent.\n- Sender thread won't send. isActive seems to be set.\n. The change to eliminate re-using the Publication when it is removed is the best solution for many reasons.\nHowever, I would love to know why re-using them in the first place was failing like it was.... only because it is a mystery that I didn't solve. :)\n. What version of gcc are you using and what platform are you compiling on?\n. Ah. I see in the title. Clicking from gitter is always annoying.\nI've only been trying gcc 4.9.2. Which seems fine.\n. Let me know what you see. Can change the iterators to be non-const as it isn't a big deal.\n. Is gcc 4.8.3 the latest version for CentOS 7?\n. Hmmm. I'll remove the const iterator need. It isn't a latency critical path and it might be better to stay up to date with CentOS instead.\n. Try this last commit with gcc 4.8.3 to see if it works and let me know.\n. No worries. Glad it works now with the default gcc! :smile: \n. This is still a plan. However, have not had time to get to it.\n. Currently, a C API is planned for the media driver. And would like to extend that API to cover the Aeron client API. However, no timeline is set for that yet.. :+1: I'm in that area and can take this one.\n. It is a little odd in the that clients concern (for client liveness) is interval between keepalives. And the driver side is max lifetime.\nThe client uses the driver timeout to check driver liveness. The driver uses driver timeout to see if an existing cnc file is considered \"old\" or not.\ni.e. it is a little different than the client keepalive interval and timeout/lifetime.\n. Client timeout now settable in the context.\n. Agrona 0.4.3 has been released to maven central.\n. Thanks! Glad you like it!\nI don't see this. Seems to be working correctly.\nHere is what I did. Default args.\n- Start Media Driver\n- Start BasicPublisher\noutput of publisher:\n$ java -cp aeron-samples/build/libs/samples.jar uk.co.real_logic.aeron.samples.BasicPublisher\nPublishing to udp://localhost:40123 on stream Id 10\noffering 0/1000000Offer failed because publisher is not yet connected to subscriber\noffering 1/1000000Offer failed because publisher is not yet connected to subscriber\noffering 2/1000000Offer failed because publisher is not yet connected to subscriber\noffering 3/1000000Offer failed because publisher is not yet connected to subscriber\noffering 4/1000000Offer failed because publisher is not yet connected to subscriber\nThis is the application output when Publication.offer returns NOT_CONNECTED.\n- Start RateSubscriber while publishing above.\noutput of publisher:\noffering 5/1000000yay!\noffering 6/1000000yay!\noffering 7/1000000yay!\noffering 8/1000000yay!\noffering 9/1000000yay!\noffering 10/1000000yay!\n...\nThis is acting as expected. I believe what you might be expecting is that if all subscribers go away, that NOT_CONNECTED is returned. That is not the case. Once a subscriber is seen, NOT_CONNECTED will not be returned from offer again even if all subscribers die or go away.\n. I don't think this is due to platform or embedded driver. But can't rule it out. I did my test on Linux and Mac, BTW. Also, IIRC, some of the unit tests check for a 0 value on the limit (which is used for NOT_CONNECTED).\nThe behavior of offer is to aid in semantics with multiple subscribers on multicast. Until at least one subscriber is seen, the offer is not allowed. Once one is seen, it is opened up based on flow control. New subscribers see the latest position as they come and go. However, the existence of individual subscribers are not tracked by Aeron.\nIt is entirely possible (if not likely) that a publisher reaches the flow control boundary when all subscribers goes away before any tracking could assume to be timed-out. Setting NOT_CONNECTED in that case would be late and only helps give the application a new condition to check for. i.e. it should only handle BACK_PRESSURE which it must do anyway. And Aeron, by default, would have to do more work that adds really no value to the application.\nHowever, the flow control strategy is exposed fully. So, if you wanted, you could add a flow control strategy that tracks subscribers and upon timeout of all subscribers could set the limit to 0 and have a publisher see NOT_CONNECTED again.\n. The application works for me on Mac, Windows 8.1 (I don't have Windows 10 yet), and Linux (Ubuntu) with the latest HEAD. Not sure what to tell you. Could it be Windows 10 specific? Possible, but as I don't have access to Windows 10, I can't confirm that. I have a new Windows laptop on order, though. It will have Windows 10. I'll check once I have it (which won't be for a couple weeks). I will wait until I have a Windows 10 build (or maybe @mjpt777 or @RichardWarburton have Windows 10 and can try this out) to close the issue or confirm it.\nFor flow control strategies, it is straight forward. The flow control strategies return a long which is the position. A value of 0 means NOT_CONNECTED. Check the FlowControl interface javadoc. You can check how UnicastFlowControl and the max multicast one work. i.e. compute the position, add the window and return it. On idle, just return the position saved. For a NOT_CONNECTED being returned once subscriptions go away, just handle it as onIdle checking for SM liveness (this is where you would have to track each subscriber by InetSocketAddress) and return 0 as position if no subscriber was considered \"alive\".\n. Actually, thinking about how best to implement a flow control strategy that sets NOT_CONNECTED when no subscribers are seen, I think it can be done without tracking.\nSpecifically, save the time each FlowControl.onStatusMessage is called (just call System.nanoTime()). When onIdle is called, if it has been over a set amount of time, then return 0 as the position. i.e. if enough time goes by without any SMs, then assume all subscribers are gone. And on the next Status Message, set the position back to normal. That should give you the semantics you desire.\n. Aeron and 0MQ are somewhat orthogonal. 0MQ is a messaging system and Aeron is a transport. Aeron could be used as a transport under 0MQ. And some have interest in seeing that happen. I think it would be awesome!\nIf an application has needs that are quite modest in terms of messaging semantics, then Aeron might be a great option. However, if a more fully featured messaging semantic is desired (specifically, topics/subjects, security, etc.) then 0MQ might be more desirable. Performance-wise, Aeron is quite a bit different then 0MQ.\n. From what I gather about TIPC, it is more in line with 0MQ in that it is a messaging system. It also provides auto discovery, etc. I believe it looks like a mesh, so latency-wise, it will likely have much more latency than Aeron and probably also have a great deal more variance in that latency.\nIf AWS supports multicast, then, yes, Aeron should be able to leverage it. However, not having played with it yet, I can't say if it will be very good or not. Loss rate and unknown latency can have a big impact.\n. I don't see this on Mac or Linux. I would anticipate that this might be a thread starvation issue, though. So, maybe try it with a Threading model of SHARED (set aeron.threading.mode to SHARED). Which will lower the throughput, but if the machine can't keep the driver active due to thread oversubscription, then throughput isn't as important.\nBTW, aeron-tools are not supported and are going away soon (as in today).\n. One thing to check here is the version of Aeron used by the driver and the clients matches up. Also, if Agrona is in the mix that the right version of Agrona is being used for driver and clients.\n. With these changes, this should be good to go.\n. It is possible for the data structures. In fact, it is consequence of the design.\nHowever, currently there is no interface to do it. It would be quite easy to add this, though. It would be a little different version of some of the driver internal objects.\n. Awesome stuff!\nI will not be able to review until tomorrow afternoon. But will do so as soon as I can and merge then.\n. @mikeb01 I think this is handled now. Can you check?\n. @MKSoftechnician if this still occurs with the latest, please create a new issue for it so we can track it as this is a closed issue. Thanks!\n. I pushed a change to ignore these exceptions. Let me know if this works.\n. Various packet erasure codes can definitely be supported. Fountain codes are one family. But better options might be normal packet erasure codes that combine normal/clear data and parity data.\nWhether increased latency results is a function of how it is integrated and the code in use. A configuration with a \"clear\" channel and a \"parity\" channel should only incur a latency hit when loss is seen. And that latency hit will be less than a selective retransmit which requires an RTT at minimum. Due to the design of the logbuffer data structure, there is also no hit on the parity generation on the publisher.\nLet me explain.\nOne of the consequences of the design of the logbuffer is that it is easy to have multiple non-contending readers. So, a separate thread could be generating parity and sending it on the publisher side without contending on the logbuffer publisher. This means no latency hit to the normal/clear data.\nOn the receiver side, parity is only required if there is loss. And that can easily be determined by position checks which are done already. If no loss, then no hit on latency.\nAeron is uniquely designed so that it can use some forms of FEC without a latency hit. Which opens up some interesting use cases.\n. That sounds like a great idea to me as an option.\nFirst thing is to use byte weaving to inject the tracing/logging. This could be one of the options to weave in. Going to assign this to myself.\n. Since the suggestion, we've done a few refactorings of the publication logic. Looking quickly, I don't think returning a 0 from a flow control strategy will set the publisherLimit to 0 right now. This is mostly because we reduced the cache traffic between the Conductor and the Sender threads by changing how updating of limit was done and communicated.\n@mjpt777 and I will discuss and see if this is something we want to allow and when one of us can get to it to make sure it doesn't regress performance-wise.\n. Soon as we have time to discuss, will get back.\nAs another option, you could use the strategy you have to fill another counter (you would need to make a file and use the counters manager, but that is quite simple) that the app can use for knowing if the receiver has sent an SM or not within some time. The publisherLimit was a suggestion to perhaps utilize current semantics. The approach can work just by setting a counter that the application can read just as well and removes any changes we happen to make to publisherLimit.\nJust IMO, I think the use case mixes couple bits of application logic into the transport where it probably should not be. One is liveness, another is message durability.\nMixing liveness (sender or receiver) into the transport is something I usually avoid.\nTo take this away from Aeron, let's consider TCP. Imagine a TCP connection becomes half-open. i.e. one side crashes or becomes unreachable. The sender will fill the TCP window (this can happen even in the time it takes for a RST to arrive). Then the sender sees a blocking send, just as if it were flow controlled. TCP, however, may or may not even see a RST in this case to close the connection. It wouldn't in the case of an unreachable, for example. Applications relying on TCP connection state for liveness is a common issue and cause of fragility. Best to make it an application concern instead and build it into the protocols of interaction.\nNow Aeron is slightly different in that it does not provide notification of receiver liveness. In my experience, this is a good thing in that it is best to do application liveness and semantics at the application instead of mixing into the transport. The questions of what to do, etc. you mention are best handled by application semantics and not by tying them to transport mechanics.\nAnother part you mention is whether a receiver should get messages that were sent while it was gone.\nSimply stopping sending isn't enough to do this. Knowing what was received (and what wasn't) is a key to this. This is very different than what was sent. So, relying on receiver liveness via SMs doesn't really help here. Just as it doesn't help in TCP.\n. @mjpt777 and I have discussed this at some length. And here is our thoughts.\nWhen Publication.offer or Publication.tryClaim can NOT succeed, we see a lot value in distinguishing the reason for that. One of the reasons might be that the receivers have all gone away and no SMs have progressed flow control AND the flow control windows have filled up. In this case, the right thing to do is to return NOT_CONNECTED. It is not, however, the job of the transport to return NOT_CONNECTED if there is room in flow control to place the data. We intend to make this the default operation and to take it out of the realm of the flow control strategy.\nWhat this means is that by default, NOT_CONNECTED will be returned if flow control has been filled and the time of the last seen SM has been too long (this will probably be configurable on the client). We also intend to make the time of last SM seen queriable by the Publication as a monitoring aid.\nIf tighter constraints on sending are required, such as knowing prior to flow control being full if there is a live receiver, this should be built into the application protocols of interaction.\nThe timeline for this change will be sometime in Q1. We intend to get to it fairly quickly.\n. @postol ah, great! I was somewhat convinced that this wasn't quite what you wanted. So, that is great that it is useful to you.\n. With 3e8b361e0ab1c03ee799df392273a056887146a7 there is now some support for querying the status on a Publication to see if the subscribers are active or not. It is not currently returned by offer or tryClaim, but when BACK_PRESSURE is returned, it is possible to call isStillConnected to see if subscribers are active.\n. I should amend my statement and say that isStillConnected may be called at any time. Not just when offer/tryClaim fails.\n. With the latest commits, this behavior is now completely in.\n. :+1: \n. URI params could be for stream also. Just means that when canonicalized, they are ignored.\n. One thing mentioned by @mjpt777 is flow control and loss in this type of scenario. Flow control is per streamId. But when sharing a channel, it is quite easy to overflow the network (congestion) or the receiver RCVBUF. When multiple channels are used, the buffer sizing works out. But when sharing, it could be too small and too much on a single stream. This is really the area of congestion control.\nSo, @mikeb01, a few questions:\n- how fast does the app send? It it sends as fast as Aeron allows, this probably will cause loss\n- what is the NAK stats in AeronStat? This might be a symptom\nThe thought here is that loss of SETUPs (which come on the data channel) might delay connecting for some time.\nWhat happens if the rate of sending is lowered?\n. No NAKs sent. So, highly unlikely that the issue is loss related. And plenty of SMs received.\n. There are a number of subscribers on each streamId it seems.\n. Is the media driver log from the same run? Having trouble matching things up.\n. Ah. Seems that the start of the log is missing until correlationId 80 or so\n. I'm following in the log that some Images are being removed very quickly after being added. Not sure why.\n. @mikeb01 have you changed any timeout settings?\nSpecifically, the image liveness timeout, aeron.image.liveness.timeout. The log is showing very fast timeouts.\n. I was able to reproduce the available/unavailable sequence with a custom app. And do have an explanation.\nI think the Receiver and possibly the Sender thread is being starved out and causing the timeout on the Image before it can send an SM.\nWhat I did:\n- used a single app that had many publications and many subscriptions (400 in this case)\n- used SHARED for threading model to exaggerate any starvation\nThis caused unavailable images to be seen while subs and pubs being created.\nWhat I did to remove the unavailable images:\n- moved to the aeron-throughput.properties for the MediaDriver so that it has multiple threads with aggressive idle strategies.\nThis was on MacOS, but I believe that starvation of the Receiver thread might be easier when all traffic goes through a single socket. Each datagram is a single recv() even if it is a single socket.\n. As it takes a while to create all the logbuffers, etc. This puts more pressure on the threads as well. What I would suggest is to use a setup that uses DEDICATED threading model as well as up the image liveness timeout.\n. @mikeb01 makes sense. And probably makes the situation easier to happen. The IdleStrategy for the Receiver is probably the more critical one. But the Sender also needs to get things out pretty regularly.\nYou might lower the load somewhat by adjusting the heartbeat interval.\nAlso, SleepingIdleStrategy is there for you as well.\n. BTW, I believe that most of this is a startup artifact. The number of files, etc. is a non-trivial amount of load being generated. Once up and running, it should be better. So, one tactic might be to create Publications and Subscriptions slower.\n. A pause between addPublication does wonders here. Just tried it out. The publication creates at least 1 logbuffer. And may trigger an Image if the same media driver is in use. Which is a second logbuffer. So, in my test, I added a 30 msec pause between addPublication and things worked with SHARED threading model. Once up, sending worked fine.\n. SHARED may make it worse. Or at least it does for me.\n. The main bottleneck is actually the driver conductor thread, I think. What IdleStrategy is it using?\n. Try changing it to NoOp instead. Or make it so that it spins more. When I use the properties below, even with a 30ms sleep between addPublications, it takes about 11.5 seconds to create all of 400 publications.\naeron.term.buffer.length=65536\naeron.image.liveness.timeout=10000000000\naeron.conductor.idle.strategy=uk.co.real_logic.agrona.concurrent.NoOpIdleStrategy\nagrona.disable.bounds.checks=true\nEdit: added 64K term buffer length\nEdit: stopwatch time added\n. My thought is that the Receiver thread is less busy and can multiplex better when with many lightly loaded sockets using Select than a single busy one that is resource constrained. Also, when using Selector, it is only calling recv() on those sockets that are ready instead of polling a single one all the time. So, less load on the Receiver thread.\n. and it probably is better with the Backoff strategy on the Receiver thread than the polling one is\n. No. The actual Receiver in the conductor that receives data from the sockets and places it in the logbuffers for the Subscribers.\n. Making the Receiver thread more responsive might help keep things alive. The Sender thread needs to be sending heartbeats also, but with a longer image timeout, things are slightly more forgiving.\nI think it is possible to find a good combo here that lets things get all up and running. And the same changes needed for the Sender, Receiver, and Conductor threads will probably also help the system itself have lower latency.\n. What I would suggest then is:\n- longer heartbeat timeout. Probably set via MediaDriver.Context\n- longer image timeout, aeron.image.liveness.timeout\n- more responsive IdleStrategy for Receiver\n- DEDICATED threading model\n- slight delay between addPublications (maybe a sleep(1) only)\nHave you tried using 2 channels and splitting things between them instead of all 400 or 1?\n. BTW, unless you need to log events, the logging should be off as the event reader is on the Conductor thread.\n. With the properties file added with a90201cec9420ed54dbdc13510b49a23c091d87d and the property added with d969c827c1a57df8c5967e92ab668da7e4cc473e , this seems to be more stable. My test takes about 2 seconds to create all 400 pubs and subs and sends just fine.\n. The BiInt2ObjectMap is used for dispatching SMs and NAKs. So, it would be possible that if the map drops entries....\n@RichardWarburton looks like the map may have an issue.\n. My guess would be that the key isn't handling negative keyPartB correctly. Could be how the compoundKey is calculated.\n. I've added a fix for compoundKey that seems to work. @mikeb01 feel free to retest. Seems to work for me.\n. BTW, this clicks everything into place and explains a lot. The more demuxing (less channels), then more likely for there for be a collision in the map, etc. Also, if testing with positive streamIds, never would see this.\n. No worries. Have a great weekend!\n. Is this a multicast or unicast channel?\n. That explains the first exception. Not sure what would be on 40162 either....\n. Ping binds to the PONG channel. And Pong binds to the PING channel. Looks like you might be running them the wrong way around.\n. @Reinholdtsen You should be using the new URI scheme and not mixing things. Take a look at Configuration to see the syntax or the wiki https://github.com/real-logic/Aeron/wiki/Channel-Configuration\nYou might want to change Pong to display the available Image to help see if Pong is seeing pingers channel.\nFrom a quick look, the output of Ping looks like it should work. It seems to see the image for Pong as an available image. Which means that the channel from Pong to Ping seems to be OK. By adding a display of available image to Pong, you can see if Pong sees Ping.\nWhen you mention it \"hangs\", how long are you waiting? Going over the network can be a lot longer than over localhost. So, you might want to lower the warmup number of messages and iterations to see if it truly is hanging or just slow.\n. I have added the ability to have Pong display available/unavailable images. Just set aeron.sample.info to true.\n. The numbers would seem to be quite possible given the base ping times. Those times are quite high for a LAN, though.\n. - ciphers\n  - OpenSSL AES-256\n- authentication/authorization\n  - with cipher(s)\n- multicast concerns\n  - source non-repudiation\n  - revocation of rights (re-keying on group leave/ejection)\n  - re-keying periodically for crashed receivers\n- implementation\n  - using channel endpoint instances\n. @phaynes does having the cleartext in shared memory pose an issue?\n. @phaynes what is the definition of \"transitory\"? Would laying in a logbuffer for an arbitrary time period violate that?\n. Data in a logbuffer isn't \"cleared\"/zeroed until more data pushes it out. So, if a system stops, the data is still accessible. This would seem to be marginal for your use case.\n. If that is OK, then, it would seem that an attack vector of the logbuffer contents is not an issue. So, something like DTLS might be an option for unicast. For multicast, DTLS has some extensions, but support is not apparent.\n. Doing the codec at the app level instead is actually easier. And doing it as a pipeline is probably much faster as well. I do have some concerns about replay attacks, though. And I was doing some research yesterday to see if it opened any obvious side channel attacks.\n. At the app tier, there is no protection on the Aeron headers. Which contain offset, term Id, etc. So, some information is available. But the data is mostly secure. My biggest concern is an attack utilizing NAKs for replay and using that information. I haven't been able to definitively determine there is an attack that way, though. It's somewhat like having an encrypted file, you can look at any part of it over and over, but it doesn't mean you can determine anything about how it was encrypted by doing so (in a general sense).\n. @phaynes you might check out the Intel AES instructions https://software.intel.com/en-us/articles/intel-advanced-encryption-standard-aes-instructions-set directly instead of going through the JDK. An (en|de)cryption pipeline using logbuffers should be able to leverage them directly.\n. JNI, not really. I am thinking a pipeline Java API -> logbuffer -> encrypter (in C/C++) -> logbuffer -> driver. A single thread used for encrypting all buffers.\n. Those numbers look good. Respectable.\nOne of the advantages of an encrypter/decrypter that is native, taking in a logbuffer on one side and offering to another on the other side is that it isolates the platform specific piece into a very localized area. So, porting should be quite easy.\n. It is a set of tradeoffs.\nA separate process is only mildly less secure than another process in terms of the cleartext being in another logbuffer in shm as an attack vector.\nA native module that could use a private memory-based logbuffer for encryption/decryption would be slightly more secure.\n. @phaynes sounds good to me. Logical Key Hierarchies (LKH) work fairly well for key distribution/management in large multicast fan out. Rekeying can be done with a single message also. Revocation is also possible, although, tricky to get right.\nI've thought that the elegance of EC keying with LKH basics is an untapped way to dramatically improve key management in distributed apps.\n. We will be working on this right after the new year. The basic infrastructure, that is. i.e. encryption/decryption and a framework for various cyphers. Doing something with EC and LKH could follow on from that if there is interest.. @luengnat still on the list to do as mentioned. Clustering took precedence, but it is stabilizing quite nicely.. Picking this up today\n. The Subscribers always deliver in order and do not skip gaps. From that perspective, retransmissions are necessary to keep a Subscriber delivering data.\nIn cases where loss is acceptable, a Subscriber could use the techniques in the TermGapScanner to find the end of a gap and simply skip over it and move on. Some other pieces would have to adapt, but it could be done.\nHowever, who use Aeron, or any transport protocol really, if loss is acceptable?\n. The use case makes sense. And as I mentioned, it can be done. Just takes several changes. It would also have an impact on flow control semantics as loss, by consequence, slows down consumption, which helps in the safety aspects of flow control quite nicely. To preserve this, loss should then influence the receiver window to make sure that when things go very very badly and flow control should back pressure that it actually does.\nHowever, a potentially much better solution that can both recover quicker and reduce traffic would be packet erasure FEC on a side channel. Something @mjpt777 and I have discussed a few times.\n. The parameters of NAKing are many and varied. Delay before sending a NAK is just one of them and is required in multicast even when the source is the only one performing retransmission. The LossDetector is a good starting point, but also the RetransmitHandler is a good place as well.\n. It can be written a number of ways, actually. And has been if you look at the commit log for the file. However, this seems to optimize well and is simple.\n. This is something that others have built on top of Aeron a few times now.\nWhen we get some time, we do plan to provide this built on top as well.\n. Somewhat, yes. Checkout the Aeron Archive. https://github.com/real-logic/aeron/tree/master/aeron-archive. Thanks, Mike. Will take a look.\n. This looked to be gcc specific. The aeron_client_test target delayed the linkage of aeron_client until building the test executable. Which seemed to be fine. But I made it explicit to link aeron_client which seems to have fixed this.\n. You should try the sample BasicPublisher and BasicSubscriber and save the output.\nWhat environment is this in? Are you sure both entities have multicast connectivity to each other?\n. \ud83d\udc4d \nThe concept that we originally thought of for RDMA was to use the memory region directly and see if we could emulate the logbuffer memory semantics directly. However, the RDMA work was put on hold. There is a lot of potential here that would be worth exploring at some point.\nIf there is interest, though, especially sponsored interest, please let @mjpt777 and/or I know.\n. @neomantra if you have access to Solarflare environment, would be great to talk to you. Want to support ef_vi directly with the C media driver. Feel free to contact @mjpt777 and I directly.. Still on the list. I've had some hardware issues, but mainly have been busy with other features. Will get back to ef_vi once Clustering is more feature-ful.. BTW, the original idea was to undef DISABLE_BOUNDS_CHECKS for all tests, but keep the main code dependent on the build type. At some point, the bounds check undef didn't happen.\n. @mjpt777 I can see that the fix for the test works. But why does it fail in the original version with a bounds check. Surely the original position of TERM_LENGTH - 1 is valid and shouldn't access out of bounds....\n. ah, yes. The test should have set the initial position aligned instead. No coffee yet.\n. A counter variable for a channel can be used. key is the channel. Value is 0 (creating), 1 (ok), 2 (errored, see error log).\n. From @mjpt777 The id can be the the registration id of the subscription or publication that created it.\n. I've added some status indicators to the counters as mentioned. Right now, the app can look directly at the counters to see the status of a channel.\nThe values for the status are (here):\n- 0: initializing\n- 1: active (OK)\n- -1: errored (see ErrorLog)\n- 2: closing\nAdding the ability for the client to associate status via adding to the control protocol I am on the fence about.\nAn application might best check status via polling the stats and looking for the channel typeId and channel string. The only thing that might be odd is when channels get normalized and the string doesn't exactly match new strings. However, that only matters for the second pub/sub that uses the same  channel and normalizes to an existing channel differently. This would seem to be less useful in those cases.\n. @vdidenko how would version.txt be pulled in for this?\nIf that can work well, then I would be all for bumping to CMake 3.0.2 and adding the version that way.\n. \"bypass\" is good for me. Will update.\n. After looking at this in depth, it can't be made totally transparent, in the multicast case, without requiring the driver to receive the data stream and filter. Additionally, for unicast streams, it requires some additional checks that are likely to have an adverse effect on performance.\nHence, tabling this enhancement for now until we can figure out a means to avoid the downside.\n. I was just preserving the enhancement since #150 is closed and most of it is done and in.\n. Indeed. My thoughts as well.\n. To make usage nice and easy, we've decided to make the usage of a spy part of the URI.\nA spy is designated by adding a prefix to the URI that is aeron-spy:. So, for example the following would be a URI for a spy Subscription:\njava\naddSubscription(\"aeron-spy:aeron:udp?endpoint=localhost:40123\", 10);\nIn all ways, a spy subscription acts like a normal subscription object. Support for languages should not require any specific interactions to use a spy.\n. For the sourceIdentity of Image that are spies, they contain the original URI of the channel. This should aid in determining if an Image is a spy or not.\n. With the addition of 170f8b2 this seems to be working well enough to start using.\n. This is the spirit of #211 \n. Thanks, @mikeb01 . Is this reproducible? But maybe different streams when it happens?\nAlso, what version is this against? Does it change when tried against the previous version(s)?\n. I think it is fairly apparent here that the SM receiver window combined with the publication term window is too big and causing the cleaning of the publication term from under the receivers trying to NAK.\nThe publication term window length is set by aeron.publication.term.window.length. This defaults to term buffer length / 2. But if overridden might be an issue without taking the term buffer length into account.\nThe receiver window (in the SMs) is the min of term length and aeron.rcv.initial.window.length which defaults to 128K.\nSo, by default, the publication limit (pub-lmt) should only be ahead of a receiver consumption point (the sub-pos) by at most 1.5 term lengths. This seems to be about what is going on from the position counters of pub-lmt, snd-pos, sub-pos, etc.\nThis seems to be almost assured with 64K term lengths to cause a cleaning to happen like this.\nI think what needs to happen is that the SM receiver window should be min of term length / 2 or 128K.\n@mikeb01 if you can try setting aeron.rcv.initial.window.length to 64K/2 and let me know how that works for you that would be fantastic.\nIn general, I think this is mostly an artifact of that window being too large wrt small term buffers for certain loss cases.\n. BTW, the initial cause of the loss is a question. My guess would be the SO_RCVBUF sizes in comparison to the receiver window. How much buffer are you using?\n. I've changed the value used for the receiver window to be what I suggested. So, you shouldn't need to change the window length.\n. If this setup uses a single multicast channel (or a few channels) and mostly just different streamIds, then loss is probably going to happen normally. Things should progress in any case, but it might be good to increase the buffer sizes anyway.\n. It is immensely useful to be able to inject loss. Which is why Aeron provides the debugging versions of the channel endpoints to simulate loss.\n. Probably should tighten up the language in the spec. The intent was to define media very broadly. Should narrow it down now.\n. @jh0x was nice enough to do this. Thanks!. The min of the sub-pos will be the position that is set at 384. That will be the consumption position in the SMs and from which the window will begin.\nWith the other sub-pos values and if that Subscription is being polled, the only way I can see that position not incrementing is if there is loss that isn't being repaired right at the point and the other subscriptions started right after the loss point.\nThe internal contiguous position, rebuildPosition, isn't tracked by a counter. This makes me think it might be good to make it a counter along with the rcv-hwm.\n@mjpt777 Images are a little different than publication buffers. The tail isn't really used. Instead, the term reading is totally controlled by the presence of unfilled framelength values (or reaching capacity of the term while reading). The nature of Images might make the log inspector output seem strange. In any case, a closer look at the Image logbuffer might give us an idea of what has happened.\n. I'll add the rcv-pos counter. It would be quite useful.\nNice thing is with the image logbuffer and log inspector and the stats, we could look at what is likely to have occurred. Or at least what might have occurred. \n. The system counters would be good. The counts of NAKs, invalid packets, etc.\n. Let me add some more stats for tracking so that when run again, there is more information. Will look at that later today.\n. Possibly. It definitely means that less than 40% of NAKs are being answered. It could be because the retransmit is not found when scanning, though.\n. Thanks, Mike.\nLooks like the everything is normal, actually. The joining position is 576. Which is where registrationId 1136 is located. Others have this same joining position and moved on just fine. The rcv-pos is equal to rcv-hwm is equal to snd-pos. So, there is no loss detected from 576 onward. Which means that delivery should have continued just fine.\nIt would be good to know if that subscription has continued to poll.\nI'll take a look at extending LogInspector to handle logbuffers that start with zero as this one will as the lowest joining position is 576.\nSomething interesting is that the joining position of several subscriptions is the current snd-pos, etc. Nothing wrong with that, really. Just interesting.\nAs the lowest join position is 576, this means that there is/was a separate media driver for this stream or that a previous run on this media driver used this stream and moved it from 0 to 576.\n. I've added an option to LogInspector to scan over zeroes to take a look at the Image file.\nThere is a frame at offset 576 in Term index 0. Which is the active index. So, there is data at the position.\nSo, given that there is data at the position, the only ways I can see poll not delivering are:\n1. poll is not called. Unlikely given what you have monitored.\n2. this image isn't the one being polled somehow. Maybe weirdness of mapping?\nOne thing that might be useful would be the sequence of commands that show Available/Unavailable images. To help with the later above.\nSomething I noticed is that some messages at the Publication are 0 length. While not an issue, I wanted to mention it in case it isn't intentional.\n. It would be good to know the sequence of pub/sub adds/removes here as well as the available/unavailable images. It looks from the registrationIds and join positions that there is a good bit of add/remove of subs and pubs around this streamId going on.\n. Thanks, @mikeb01 Those should work fine. Remember that the logging now uses the aeron-agent if you haven't used it in a while.\n. Simply didn't get around to doing it.\n. @mikeb01 is it possible that an exception is being seen on the fragment handler for that stream?\nAlso, are the 0 length messages intentional?\n. The only other thing that is suspicious is that the joining positions are non-0. This can only really happen if there is another Media Driver and subscription that is listening and/or a different Flow Control strategy or channel endpoint.\n. @mikeb01 correct. Joining in is fine. And gives the semantics you mention.\nBut to get into that state, another media driver must be around... or flow control strategy, etc.\n. I don't believe this should be a problem. Just something I have noticed. While trying to simulate what you are seeing, I have been trying to make things happen, etc.\n. @mikeb01 is there any exceptions in the Aeron client error handler for any of the clients? or any evidence of FD or VM exhaustion in the applications?\n@mjpt777 and I are talking about possibly the mappings being 0 due to VM or FD exhaustion somehow.\n. correct on acronyms, yes.\n. @mikeb01 I assume the image unavailability also stops with upping the liveness?\n. @mikeb01 back a while ago, you identified that an unavailable image was causing data to stop. At the time we tracked that down to SETUP not being used when data was not sent causing things to stop. I wonder, though, if somehow the unavailable image is not being handled appropriately.\nYou are calling Subscription.poll and not Image.poll directly, correct?\nAs images go unavailable and come back, they are new images. Polling on old ones will be fruitless. Subscription manages this. Or should. Which I have looked at a number of times in the last few weeks. Nothing I see should be perpetually out of whack.\n. Should also add a means to have the BroadcastReceiver on the client track the number of missed messages and expose it for clients to be able to see. For debugging, that is.\n. Ah. The CopyBroadcastReceiver has the check. Was just looking at the BroadcastReceiver. Seems odd to place that behavior there to me at the moment. But that is probably just initial reaction since I wrote the C++ version a while ago (and it has the check also).\n@mikeb01 do you have logs and logbuffers for the last run you had that demonstrated the issue? (i.e. not the clean run, but the bad one with the stats above). If not, that is OK. I just want more data to stare at.\nLet me work through some logic...\nThe state machine has almost no dependency to subscriptions aside from event purposes. And, the logs look normal from an image management perspective. Unless I am missing something. And, the unavailable image event has nothing to do with the subscription position. It simply informs the client that the image is not available. Then the client matches the image correlation Id per Subscription. Thus, only a single event per image is needed. If state management of the image were a problem in the driver, the log would show something odd. If state management of the image were a problem in the client, then it would be fairly obvious since the logic is quite simple and is totally driven by events.\nThe thread starvation causing an image to go unavailable is a temporary thing and the system should eventually resume. It could be pathological, though. 10 seconds of no DATA or SETUP is a long time. And loss indications point to a lot of congestion and/or starvation of the Receiver thread. But the stats indicate there is data received and delivered to all but one subscriber. Which means the data does make it into the logbuffer. And the logbuffer files indicate that also.\nEdit: 10 seconds of image liveness were in use.\n. Hmmm. I think I might see something. Another event log might help to confirm.\naddImage looks for sessionId. But I see on an addSubscription that the same sessionId is being added twice. Which is fine for situations where there is an image going away and being re-instated. Which is this case. But it is on a new subscription.\nThis might be a timing thing related to adding a subscription while one is in linger. Somewhat like you mention, @mjpt777 , but actually, not. :)\n. The anomaly in the log indicates some potential issues. It may not be the issue, though. But it could explain the behavior. Would rather have some more event logs and stats of bad runs to solidify.\nWhat I am thinking is that relying on sessionId for addImage is the wrong thing to do on the client. It needs to be correlationId instead.\nThat is one thing, but there is another.\nAnother is that sending unavailable image on going into linger is fine, but then it is imperative to not send available image after that when doing an addSubscription. This must be coordinated in the driver between Receiver and Conductor threads correctly. Or waiting for unavailable image to just before cleanup.\nEdit: Forcing this behavior for testing is not going to be easy...\n. I've done 6f2d1f14d02ce0fce825ba6eb1b560f9eb0b3d92 to try and avoid issuing an availableImage when doing an addSubscription on an image that is not ACTIVE. This should help avoid the case seen in the one event log that could explain things.\nI don't know if this also addresses anything else seen, though.\nEdit: I believe that it is a good idea to also adjust the addImage to use correlationId instead of sessionId. But I want to see if this change addresses anything or not first.\n. Convinced myself to go ahead and make the addImage filtering be correlationId based. bbaf75dba0d6f42435d1ca9bfc9628559e85c9ed\n. Just trying out latest snapshot should say whether things are working better or not. Gathering any logbuffers and event logs and stats from it should help.\n. Thanks, @mikeb01 !\n. The intention is to use the channel itself to search for. The channel is held in the label as well as in the metadata just like the other counters.\n. Just for reference, the Java side is specified in StreamPositionCounter which is something like the following.\ncpp\nstruct\n{\n    std::int64_t registrationId;\n    std::int32_t sessionId;\n    std::int32_t streamId;\n    std::int32_t channelLength;\n    // channel up to channelLength in size encoded as UTF-8\n}\n. The CnC file is the one that needs to be handled carefully. It should be the last thing to create and moving it into place (rename) is the last thing to do.\n. This should also serve as the max window size for congestion control purposes.\n. We did an Executor version early on and dropped it (both client and driver). But ThreadFactory might be more appropriate. Also, we have more experience now.\n. The client monitors the liveness of the driver. If/When a driver is seen to be dead for other the timeout interval, the errorHandler is called with a DriverTimeoutException. The client logic closes all logbuffers, etc. at that point also.\nA client application should therefore handle this as a serious error and totally restart. Cleaning up all Publications, Subscriptions, and the Aeron client itself and then restarting.\n. I agree with @mjpt777 .\n. There is both a client liveness detection on the driver and an inter service timeout in the client. If a client conductor thread is stopped, the driver and the client will determine it is dead and not allowed to continue. So, stopping the threads for this long is not supported behavior.\n. As there are other timeouts involved, chances are just upping those might not be enough to still be on the right side of what you are trying to replicate.\nA network partition that lasts longer than Image timeout means the image will become unavailable. If that subscription is the last subscription, it will back pressure the publication when the flow control window fills up. This is by design.\nIf/when the partition is healed and the publication is still active, this will create a new Image on the subscription.\nSimulating this behavior by changing timeouts and pausing threads will add in all kinds of other undesired behaviors. If you want to test network spurious connectivity, a better way is to use firewall rules.\n. The incremental cleaning is cleaning behind the current point that data would be coming in on. So, not seeing how it could stomp on it off hand.\n. And another data point, I can't make the system test fail on Mac.\n. Same here.\n. The last time the buffer was read is the value there. So, it definitely looks like a stale value. Although, you would think it would have been cleaned.\n. @kdkavanagh With the latest change and release, this is worth retesting.\n. Windows is a low priority platform (especially for C++) at the moment. So, will get to it when we can.\n. For Aeron media driver shutdown, the best way to handle that is to restart the Aeron instances and that means restarting the Publications and Subscriptions they use as well. Consider it a hard error and a total restart. The Aeron errorHandler will deliver errors for media driver liveness, etc. so the application does not have to.\nFor application pub/sub process death, it depends on the applications semantics that are required. If the application must know about live/dead publications, then application level heartbeats are needed. If the application must know about live/dead subscriptions, then application level group membership semantics should be provided. Both of those are best handled as protocols on top of Aeron.\nAeron will work just fine with Subscriptions and Publications that go away. Unless the Subscription application is doing Image polling directly, it does not need to do anything special. All new instances of pubs and subs are handled internally just fine. Depending on the timing of the Publication process death and restart, a Subscription may or may not see the restart as a new Publication. A Subscription is not tracked by a Publication, so there are no concerns for a Publication application with a Subscription that goes away.\n. From my experience, if you are tracking subscriber state in the publisher, you are most likely too tightly coupling them together.\nThe polling model you mention can work fine. Would very much depend on what you are trying to achieve.\nOften the desire to know the state of something and track it somewhere else doesn't pay for itself in any real way. i.e. it's just wasted work in the grand scheme of the system itself.\n. This belongs in the Channel Configuration wiki doc because it is simply a modification of the channel format.\nhttps://github.com/real-logic/Aeron/issues/230#issuecomment-224733744\n. The sender and rcv-hwm are setting at position 1,627,656,896. However, the subscription has only consumed (and the rcv-pos) is 2,176.\nHow big is the term length?\nAny other settings in use from the defaults?\nAlso, you mention this is low traffic. But did you really send something like 1.5GB of data on that channel?\n. The positions don't make a lot of sense, honestly.\nAre you sure that all drivers and clients are using the same 1.0.1 version? it might be worth a shot to use the latest snapshot/head also just to see.\n. @mjpt777 anything come to mind for you?\n. If the positions are correct, then looking at the images is going to be mostly fruitless. The hwm and sub-pos, for example, will be many term buffers in difference. Surely violating the cleaning assumptions.\n. The stats show only 20MB sent/received, so the high position value is definitely off for some reason. The only reason I can think for this occurring would be corruption of the header in some way that infers a different position. This seems to be happening as the message is put into the term as the snd-pos and pub-lmt are also corrupted. A possibility might be setting the reservedValue with an incorrect offset or a tryClaim that has messed with the offset incorrectly.\nnode-1\n0:           20,745,216 - Bytes sent\n  1:           20,370,624 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                   16 - NAKs sent\n  6:                4,917 - NAKs received\n  7:                3,340 - Status Messages sent\n  8:                3,282 - Status Messages received\n  9:                5,697 - Heartbeats sent\n 10:                5,311 - Heartbeats received\n 11:                    3 - Retransmits sent\n 12:                    0 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                  696 - Client keep-alives\n 18:                    7 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    1 - recv-channel: aeron:udp?endpoint=ip-172-31-10-77:25520\n 24:        1,627,656,896 - snd-pos: 8 1287205435 1 aeron:udp?endpoint=ip-172-31-8-204:25520\n 25:                    1 - send-channel: aeron:udp?endpoint=ip-172-31-8-204:25520\n 26:        1,636,045,504 - pub-lmt: 8 1287205435 1 aeron:udp?endpoint=ip-172-31-8-204:25520\n 27:              170,432 - sub-pos: 1 434696915 1 aeron:udp?endpoint=ip-172-31-10-77:25520 @0\n 28:              170,432 - rcv-hwm: 7 434696915 1 aeron:udp?endpoint=ip-172-31-10-77:25520\n 29:           19,750,176 - sub-pos: 2 434696916 2 aeron:udp?endpoint=ip-172-31-10-77:25520 @0\n 30:           19,750,176 - rcv-hwm: 9 434696916 2 aeron:udp?endpoint=ip-172-31-10-77:25520\n 31:           19,750,176 - rcv-pos: 9 434696916 2 aeron:udp?endpoint=ip-172-31-10-77:25520\n 32:           28,953,216 - pub-lmt: 10 1287205436 2 aeron:udp?endpoint=ip-172-31-8-204:25520\n 33:           20,564,608 - snd-pos: 10 1287205436 2 aeron:udp?endpoint=ip-172-31-8-204:25520\nnode-2\n0:           20,086,208 - Bytes sent\n  1:           20,681,152 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                4,917 - NAKs sent\n  6:                   16 - NAKs received\n  7:                3,282 - Status Messages sent\n  8:                3,320 - Status Messages received\n  9:                5,312 - Heartbeats sent\n 10:                5,657 - Heartbeats received\n 11:                   16 - Retransmits sent\n 12:                    0 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                  599 - Client keep-alives\n 18:                    2 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    1 - recv-channel: aeron:udp?endpoint=ip-172-31-8-204:25520\n 24:                    1 - send-channel: aeron:udp?endpoint=ip-172-31-10-77:25520\n 25:            8,559,040 - pub-lmt: 3 434696915 1 aeron:udp?endpoint=ip-172-31-10-77:25520\n 26:              170,432 - snd-pos: 3 434696915 1 aeron:udp?endpoint=ip-172-31-10-77:25520\n 27:           28,138,784 - pub-lmt: 4 434696916 2 aeron:udp?endpoint=ip-172-31-10-77:25520\n 28:           19,750,176 - snd-pos: 4 434696916 2 aeron:udp?endpoint=ip-172-31-10-77:25520\n 29:                2,176 - sub-pos: 1 1287205435 1 aeron:udp?endpoint=ip-172-31-8-204:25520 @0\n 30:        1,627,656,896 - rcv-hwm: 5 1287205435 1 aeron:udp?endpoint=ip-172-31-8-204:25520\n 31:                2,176 - rcv-pos: 5 1287205435 1 aeron:udp?endpoint=ip-172-31-8-204:25520\n 32:           20,500,992 - sub-pos: 2 1287205436 2 aeron:udp?endpoint=ip-172-31-8-204:25520 @0\n 33:           20,500,992 - rcv-hwm: 6 1287205436 2 aeron:udp?endpoint=ip-172-31-8-204:25520\n 34:           20,500,992 - rcv-pos: 6 1287205436 2 aeron:udp?endpoint=ip-172-31-8-204:25520\n. @mjpt777 agreed. The only way snd-pos increments is via sending data. And as there is no way I can see sending that much data because of the byte counts, the snd-pos, hwm, and pub-lmt must be invalid somehow.\n. For the Publication logbuffer. Data is 0 until offset 2176 (position 2176). Which happens to be the sub-pos and rcv-pos. For a publication, this seems very very unusual normally. \nFor the Image logbuffer, there is data up to position 2176, then it is 0.\nOne possibility is that snd-pos was corrupted. If it got corrupted, then it would update pub-lmt with a bad value. Also, sending would use that position for scanning and might send junk (depending where it was). Wouldn't quite explain why rcv-hwm is at that value, though. But whatever hit snd-pos could hit rcv-hwm and corrupt it separately.... but it is a separate machine and file.\nThe 0 of the data in the publication might be explained by the snd-pos. Cleaning might do that if snd-pos was corrupted.\n. @patriknw is the stat values being read (or written to) by the app? Anything that could touch the cnc file?\n. @mjpt777 BTW, the rcv-hwm is incremented on a heartbeat irregardless of overrun. So, it would be possible to have a heartbeat message come in that sets the rcv-hwm up to some value if (and especially if) the snd-pos was corrupted. The snd-pos is used to fill the heartbeat.\n. Probably. But it's an orthogonal issue. The corruption of snd-pos is problematic.\n. Sure. Can validate that the position is one that was sent. I assume you mean on the Publication side processing an SM. Although, not seeing how a bad SM could effect the snd-pos like what is observed. The Publication logbuffer has data from 2,176 to 317,632 and is 0 afterward. A bad SM could allow more to be sent, but not seeing how it could change snd-pos directly.\n. There is no counter for NAKs that are filtered by being outside of a termLength. Most of the NAKs received in the stats are filtered because of snd-pos being off by so much.\n. something else that is \"odd\" is that there is no rcv-pos on node-1 for the image with sessionId 434696915. The image logbuffer is there, though. And it has data up to the hwm, which is 170,432.\nNow, it could be that the snapshot was taken just at the moment that the image was being closed and the rcv-pos was removed. But it is odd that it is not there.\nEdit: a supposition is that perhaps the allocation of counters used slot 24 for both snd-pos and rcv-pos. However, this wouldn't account for the actual value and how they are handled. Also, all allocation and freeing of counters is done on the driver conductor thread and appears to normally work just fine.\n. @patriknw in the test, does the application create and release/close any other Publications or Subscriptions not shown in the stats?\n. what about catching the exception?\n. I think I have a way to handle this a little cleaner. Will self-assign and look when I can.. Should not throw now. Instead calls the error handler. So, should be fine.. Bufferbloat effects everything and Aeron is not immune to it.\nCoDel is, primarily, a queue management technique for routers (and other edge devices) and doesn't have anything to really do with how flow control is handled in Aeron. So, there really isn't a way to \"add it to Aeron\" effectively.\n. I did mention \"primarily\" and \"flow control\" in my brief message. Sorry for being terse. Allow me to explain in more detail.\nLet's not conflate flow control and congestion control. Bufferbloat is best handled by congestion control and not flow control. Aeron does not currently do anything with congestion control. This is due to the original direction of Aeron and its primary operating environments within low latency trading. Quite simply, slowing down due to increasing RTT is undesirable. In fact, even after loss, slow down is less desirable, but necessary for stability.\nThere is no reason for Aeron flow control to account for bufferbloat since it is the wrong mechanism. Aeron congestion control would be more ideal but does not yet exist.\nAs we have seen interest in Aeron in other environments, recently a sponsor has stepped up to aid us in developing a few congestion control strategies for Aeron. One will most likely be RTT based and be akin to BBR (once details are known) and attempt to have an effect similar to CoDel from the service time measurement influencing rate adjustment. However, not all desired strategies must rely on RTT. It is likely at least one strategy will rely solely on loss.\n. If you mean latency while sending at a certain throughput rate (like 2M msgs/sec), then latency will increase slightly. But it depends on if the Publication is being flow controlled. If flow controlled, latency will increase quite a bit because the Subscription(s) are not keeping up. Basic queuing theory.. No worries. Gitter and Github were not notifying me of everything for some reason. So, I am catching up.. @dondank have you tried it out to see? Using C++11 as the memory operations might work. The C driver is not 32bit compatible, but the C++ API and Java might be.. Unless I am missing something, the commit only removed the unused epochClock. Something else before then removed using the epochClock itself on SMs.\nThe key is the use of wall clock time between the client and driver. The SM time must be in wall clock time.\nUpdate: the actual faulty commit was 0e57a49dbf52b3bb58532caccd25a42f4478babc that removed the use of epochClock for the time.. @sthornington I don't think it would, no.. @nikkekin correct. The reason I tracked down the commit was to see what was impacted. 1.0.5 should be the only release effected. Aside from the head.. @nitsanw would it be better to have the calling thread be the Subscription.poll thread?. This should be fine. Looks good. \ud83d\udc4d . You can use the NOT_CONNECTED return value from offer/tryClaim as a means to determine connectivity. However, if you need to know that a publisher is listening in a more detailed way, this is best handled as a protocol at the application layer.. For UDP unicast, a new subscription will pick up on an existing publication. By closing a subscription, you are not closing the connection, actually. At least initially. If you rapidly create a new subscription while a publication is active, you will see that publication be picked back up by the new subscription. If you create multiple publications, then each will be seen by the same subscription individually. Even unicast, it acts more like pub/sub than a single connection.\nFor IPC, it is pretty much the same.\nFor the corruption, are you rewrapping the SBE codecs on the encoder and decoder sides correctly each time? And also, when you send are you sending the correct length? SBE is very sensitive to correct usage. Incorrect usage can result in message corruption.. If you are closing the Publication, then it should not be reused.... unless you create a new Publication before closing the previous one. What you mentioned, I thought, was closing the Subscription.\nOnce unreferenced, Publications linger for a bit. But new Publications should not use it. They will create a new one. However, since Publications lingers, they may send any pending data that was not sent out.\nIf you want to handle a situation where a controlled Subscription and Publication need to coordinate without shutting down the driver, you can do it a couple ways. \nOne is to let the Subscription linger in the app a little while after the Publication has been closed until the Image has gone unavailable (meaning the Publication has lingered and then timed out from the Subscriptions perspective). This takes about 10 seconds (assuming all data has been flushed).\nAnother option is to make sure the Publication has sent all data and been received. Put a formatted message in the stream to indicate the end. Close, the Publication. Wait for the Subscription to see the end message. Then create a new Publication. Keep the Subscription around. You should see new messages just fine. And as the application has waited for the end of one stream before starting the next, it should be fairly simple.\nAnd another option is to use the Header sessionId on the Subscription side to manage interleaved messages coming from multiple Publications.\n. Still needed for C media driver, BTW.. How odd is it that C has a much better solution for this than Java..... I'm not able to see this with either a single publication or a single subscription. lsof reports no FDs or mappings in use after either a Publication.close or an UnavailableImage.\nWhat is the pattern of usage for publications and subscriptions you have?\nOr do you have something simple that reproduces this?\nUpdate: is this C++ or Java?. mapExisting for C++ did not have a close of the FD. Give the latest a shot (not 1.2.5 unfortunately as this change happened after the release) and see if the FDs are around or not.. The performance of IPC batching will depend on the bursting done by the publication as well as the max fragments per poll. But this is not a situation where \"little is good, so more must be better\". In this type of test, it is a little tricky to set this up so that the publication can fully burst so that the subscription isn't blocked. Also, there should be no difference between 20 bytes and 32 bytes for payload length as 20 bytes will align out to what 32 bytes would be.\nTo get a full burst, you should set the term length to be enough to not back pressure the burst. 500K messages at 64 bytes each message is 32MB. Default term length is 16MB. So, likely your burst is being effected by flow control much more than you realize. And flow control is effected by poll fragment count because it means how big a jump the subscriber position makes. You want it to move on some chunks, but 100K is almost assuredly too big and will probably introduce some back pressure on the burst. You might want to try 1, 10, 100, and 250 instead of a huge value like 100K.\nAnd you probably want to measure reception throughput instead of time spent in poll. Measuring the time taken by the poll call itself isn't very useful. In either case (poll 1 fragment 500 times or poll 500 fragments 1 time), the calls to the fragment handler will be the same (500 calls). What gets effected more, as I mentioned, is how the subscriber positions are moved forward for flow control.\nYou might take a look at Throughput.cpp and try different fragmentCountLimits to see what happens.. Correct. For IPC, 64MB is the default. My mistake. However, this puts the burst at just the end of the flow control window. Which will likely still flow control.\nFlow control is more than just back pressure. It has a lot to do with how Aeron works for position tracking.\nFor your test, I would do several things:\n- make sure each call to poll returns max fragment count. If not, then the test is being artificially blocked. Thread scheduling, flow control, etc. can all have an impact.\n- make sure the Media Driver is setup for this type of benchmark. Look at the Java versions of EmbeddedBufferClaimIpcThroughput. Off the top of my head, SHARED threading model and NoOp shared idle strategy. Disable bounds checking.\n- make sure your receive loop has a pause idle strategy (C++ BusySpinIdleStrategy). Or pin the receive thread so it is not bothered with.\n- make sure C++ bounds checking is turned off when you build your application.\n- make sure you have sufficient CPUs available for the entire test.\n- try various smaller max fragment counts 10, 20, 100 as well as larger ones.. @mjpt777 makes a good point about the timing cost in the fragment handler. Not the time in the fragment handler. In other words, the additional time it takes in the fragment handler to grab the time twice. Depending on what your Timer actually is this could be significant.. On Linux for me running TimeTests which is in the repo, high_resolution_clock::now takes about 600ns each call. So, each fragment handler call would take 1.2 micros due to timing.. Depends on the lib in use.. This is simple enough at the protocol level.\nOne thing to realize is that EOF markers like this act slightly differently than TCPs FIN. A receiver could have persistent tail loss or loss can be long in duration. So, in that case, a timeout would be seen. Thus an EOF is not an assured thing to rely on. Just like TCP FIN is not assured. It's an optimization.\nHowever, the API needs to understand this as well on the poll side. I think a simple Header method of isEndOfStream with a length of 0 in the callback might work.. Actually, recv() returns 0 on a clean EOF (from FIN). A RST can cause a -1 return (or SIGPIPE in some cases). So, not quite the same.\nA return of -1 from a Subscription.poll is a little hard to handle with EOF being a per Image concept.. Oh. I see. length for the handler being passed as 0. Yeah, that could work. And Header.flags could also be set (as it would be from the protocol).. Some of the initial machinery is in e0bb87c4538125c577a653f20f5865a6d6d8dc95 . I will be updating the protocol spec shortly. The CnC version has been bumped.\nMissing pieces:\n- [ ] C++ API support\n- [x] EOS for IPC publications\nBut I wanted to discuss the API usage.\nI think we can do callbacks for notification of End of Stream. Somewhat similar to the (un)available Image handlers. However, this just somehow just doesn't feel right. And it also would require that all applications are checking EOS periodically internally.\nWhat feels more correct might be to use the C feof approach to query for EOS. This is what I have so far implemented with Image.isEndOfStream and Subscription.isEndOfAllStreams. This way the application can query anytime it desires. This also makes it more like checking connectivity on the Publication side.\nThoughts?\n. Made a change to be callback based that feels right. Replaced Subscription.isEndOfAllStreams with a callback based poll instead. This feels right for the Subscription and leaves the Image to check based on a boolean. This feels better. The check/poll can be done in the same thread as normal polls for fragment handling and can be done by the application logic when it makes sense.\nWill let this set and reflect in C++ if it holds together after more thought.. There are a couple problems with using a comparison of onComplete and the Rx semantics. And some limitations to consider.\n\nThe EOS is triggered by initiation of linger. Which can result from a remove or from a client timeout. There is no means for the application to signal a clean vs. timeout EOS currently. Which means it isn't necessarily an onComplete. It could also be an onError instead. The semantics are more dependent on the expected payload. This is one reason why ReactiveSocket is needed in this type of scenario to be able to distinguish end-to-end app intentions.\nFrom the API standpoint, it would be great to specify the EOS handler on the poll call. That way the app can, in comparison, pass the handlers for onNext and onComplete and onError all in one go. However, this means the signature for a poll-type method has 3 callbacks (that can be lambdas) or 1 non-functional (thus non-lambda-able) interface with 3 methods (or 2 if just using onNext and onEos for example). Language limitations do make this less than ideal (you can work around it in C++ via a struct, though).\n\nI did consider making new overloaded poll methods that take 2 args (FragmentHandler and EndOfStreamHandler) that check for EOS whenever no fragments delivered. Simply overload and call the original, capture the return value, and check if return value was 0. These also feel OK to me.\n. It's good to think about. What do you think about overloaded poll methods with the EndOfStreamHandler?. Here is my thinking.\nThe standard way of handling EOF in Java is a -1 on the InputStream.read. SocketChannel is similar. For C on most UNIXes, read and recv both return 0 for EOF. For C portable fread, the return of error and EOF needs to be distinguished via feof. All of this tends to lead to logic that involves checking for EOF as a condition of return value or from state of the object/connection in the same specification of the message handling logic.\nFor Rx-style operation, the specification of onComplete is combined with the specification of onNext, onError, etc. usually via a single class implementing the interface. This means the logic for handling the end of the stream via complete or error is in the same specification as handling the messages and often can or does access the same state. However, often users of Rx never see this detail since they often only combine operators instead of building their own.\nEndOfStreamHandler being instantiated at addSubscription time instead of at poll time feels awkward to me. The actions of handling the end of a stream depends on the stream and state and often the previous message state. With the action of handling EOS being specified at a different instantiation time than normal message processing, this seems harder to do without creating additional coupling (in time) or limiting the poll specification to be at instantiation time.\n. Allocating ahead by some chunk/file size? i.e. number of terms...?. Makes sense. What about an idle strategy that has a hook for only doing work when idle? Then hook in and do allocate ahead when idle? If not idle and need to allocate, do it in the hot path.. Session ID is a good thing to use. This is consistent and metadata.. No. IP Multicast does not go out all interfaces. It goes out only one. When sending IP multicast, the kernel looks at the sockets IP_MULTICAST_IF and then at the routing table and it goes out the indicated interface.\nhttp://www.tldp.org/HOWTO/Multicast-HOWTO-6.html\nHowever, there is no loopback only multicast interface.... unless you configure one for this explicit purpose in the OS and explicitly make it the default multicast interface.\nSo, what you are observing.... multicast traffic going out to a multicast address outside the machine, is the intended TCP/IP socket behavior for multicast. If a multicast receiver is listening to that multicast address and port, and a network switch supports multicast, then it will forward all traffic to that machine that matches that address and port.. Well, Aeron is restricted to the IP multicast semantics of the kernel. Changing some of that is not possible. And in some cases, not really advised. It is simpler and cleaner to go with the IP multicast semantics that are well understood instead of hiding them, in my experience.\nBTW, if you want only loopback behavior, you are much better served by using IPC than by using multicast.. @jordanxlj Spies apply back pressure to the publication just as normal IPC subscriptions would.. Not seeing this with the latest. What version and OS are you using?. After many attempts, I can not reproduce this behavior on the subscription or publication side.\nHere is also why this doesn't seem to make sense for the Publication side. The client doesn't unmap the files on a driver timeout. The default for the examples is to call exit in the error handler after printing the driver timeout exception.. GCC 6.3.0 is not something we are currently trying to support. I wonder if an optimization could be interferring somehow. Can you try with GCC 5?. Does this happen with the latest release, 1.3.0?. very odd. The client doesn't munmap anything on driver failure. So, even if the driver goes away, the file should still be mapped (until the client dies).\nHow are you killing the driver? Does a SIGINT work different than SIGKILL?. 1.3.0 on Ubuntu (16.04 LTS) running linux 4.4.0-72 and gcc 5.4.0 does not exhibit this. And I've had reports that this does not happen on previous Ubuntu releases. Still waiting for a report on RHEL.\nAs I have mentioned, the C++ client does not unmap the logbuffer. So, the fact that somehow the publication unmaps it indicates something very different in how the kernel with CentOS handles it and how the kernel with Ubuntu and MacOS is handling it. The unlinking of the file should not cause the client application to unmap the file. It's actually unspecified what happens to mmapped segments, IIRC, when a file is deleted (at least officially). Unofficially, it is relied upon to be legal by many applications. However, for the media driver the file will only be deleted on a graceful shutdown. A KILL or TERM is not graceful and the files should still be around. So, why those would cause an unmap seems to be a broken behavior.\nHonestly, if the kernel unmaps the logbuffer underneath the client, there is not much Aeron can do to prevent that.... why Java would act different is probably a myriad of things. Including how SIGBUS is handled in the JVM.\n. BTW\nYes, I tried it out with the new version as well\n. Feel free to send this change as a PR.. You should look at the Ping/Pong examples to make sure you are retrying appropriately from back pressure on offer/tryClaim, etc.. In terms of how to do a request/response system with Aeron, you have some options.\n\n\nUse a static back channel that is setup between components in your system. Fairly typical messaging system approach where each request is labeled with a response ID so that multiple requests can be differentiated with ease.\n\n\nUse a dynamic back channel where the responder sets up a Publication to send responses back on as needed. Still need a response ID as with a static channel. Only real difference is that the response channel isn't always active.\n\n\nUse a dual channel approach where each channel has a response channel and the act of setting up the request must also set up the response channel.\n\n\nSeveral users have built request/response systems into their apps. Many different ways to go about it.\nSomeday, though, we will get time to build a generic method hopefully.. @neekolashall do you happen to have the error logs from the media driver? Will be in the current directory.. Thanks! I see the same cause for those. The ImagesBufferReadyFlyweight is possibly misaligned on the sourceIdentity field length depending on filename length. \nThat is one we kind of know about. @mjpt777 and I have discussed changes for this. In trying to keep compatible with SBE, this is an issue as SBE has no way to prevent misaligned varData length fields. Although, we do know the charset and can use the fact that the field can be padded with nulls. Sadly, it's not a general fix for SBE, but would be something to consider.\nHowever, not sure why that one would fire on a BasicPublisher, though.. OK. So, timing. If the addPublication is executed at the same time that an error is sent..... glad the C++ API matches up the error with the correlationId.\nNote: a network publication without any spies isn't matched against network subscriptions since these have to come in via the network.. Thanks for this. What was the error being reported?. The CnC file contains the client liveness timeout that the driver will use. This needs to be communicated to the clients. The timeout that the clients should use for the driver depends on how often the driver updates the timestamp.\nDriver incarnation is a black hole that adds no value. Each time the driver starts it starts with a clean state. If a client knows it is communicating with an \"old\" driver, it will make assumptions that can not hold. There is no real value to making assumptions like this.\nUpdate: let me elaborate. Allowing the driver to pick back up from current state is more complicated than it seems. For the IPC data structures, it is possible to try and pick back up. But far from simple. For the Aeron protocol, it is not designed to handle this resumption. It is far cleaner to restart from a clean state for both the client and the driver.\nAn incarnation value would only allow a client to make a (probably incorrect) assumption about state of the media driver.\nAlso, the driver can already force a clean when it starts to start immediately if it knows the state is stale. Which allows the timeout to be ignored.. cc @mjpt777 \nLingering doesn't solve the underlying issue. The same thing exists in the Java version, I do believe. Lingering simply moves the time horizon. At its heart this is a race between the munmap due to the inter service timeout and the BufferClaim commit/abort operations.\n. I will reflect in C++ in the next couple days if not sooner. Also, I want to make the C++ API have the agent invoker type option soon.. @goglusid Hmmm. Very very good point. That might work. Will give it a think. Yeah, that might be a nice way to handle it. Might also be usable for Java as well. Keep it around until Publication.close.. Agreed. Was thinking about Java as well. Which requires an explicit close of the Publication instead of it simply going out of scope.. @goglusid go ahead and see about this now. The Publication (and ExclusivePublication) have a shared_ptr to the LogBuffers. So, this should be cleaner now.. Thanks! No worries! We'll be making some other changes in this area shortly as well.. Experimenting with reference counting the mappings for #365 so multiple mappings are not needed. Also want to add the agent invoker style thread control to C++. And also change the mapping flags.. Host2 is a subscriber to ping channel and a publisher to pong channel. Host1 is a subscriber to pong channel and a publisher to ping channel. Subscribers can only subscribe to a local IP.\nThat is why the second configuration works and the first does not.\nIf you look in Host2's error log when you run the first configuration, you might see a message about bind not working as it can not bind t 10.20.30.19 when it tries to bind the pong channel.. Another possibility would be Multi-Destination-Cast that we added not too long ago. What it allows is to have a Publication that can send to multiple Subscriptions like multicast, but with multiple unicasts instead. Take a look at the System Tests and the Wiki Channel Config Guide.. I think if you simplify the scenario, it might make more sense.\n1 - producer claims message (claims spot in stream)\n2 - current subscriber goes away, meaning no subscribers\n3 - new subscriber comes in. Join position is after last claimed message. I.e. claim message has no consequence and no consumers waiting on it.\nRight at that point, anything before the producer position at the time of the new subscriber isn't going to be consumed by anyone. When a claim is done, it is claiming a spot in the stream. The commit is simply marking it safe to consume. The claim is the critical spot in the stream. Not the commit. The claim happened before the new consumer was added to the stream.\nThe cleaning doesn't really matter to the message, honestly. It will never be consumed anyway. But also, the cleaning is held back from the trip-limit and proposed limit. Which prevents the cleaning from running over the consumers.\n. @goglusid ah. yes. Did not see the issue initially. \nJust something to point out. The cleaning position only moves with cleaning. This is the left edge of the cleaning window. The change that @mjpt777 put in keeps the edge from skipping over any non-committed, non-aborted messages.. I noticed this possibility as well while adding unblock logic to the C media driver. But haven't had time to test it out.\nSame possibility for network publications might also exist.\nAlso, replay publications are being worked on for replay. I didn't want to touch this until @mjpt777 and @nitsanw are happy with the changes that were involved with that.\nThe fix you mentioned is not quite correct, I don't think. It won't work for network publications is one reason. Another is that it is only the initial check call that has the issue as it has not had a chance to block for the timeout period.\nA possible solution is to init timeOfLastConsumerPositionChange to current time of publication creation.. Upon reflection (perhaps without enough coffee...) I'm not entirely sure that this is limited to a subscriber change on IPC.\ntimeOfLastConsumerPositionChange is only updated upon last consumer position and current position being different (or an added subscriber now).\nSo, it would seem to be the case that this sequence could occur.\n\n\nconsumerPosition = lastConsumerPosition = producerPosition (idle publication)\ntimeOfLastConsumerPositionChange = T0\n\n\nWait for instance 2* unblockTimeoutNs\n\n\nClaim a message but don't commit for a brief (< unblockTimeoutNs) period \n\n\ncheckForBlockedPublisher occurs before commit of message\n\n\nAt this point, consumerPosition = lastConsumerPosition < producerPosition\ntimeOfLastConsumerPositionChange = T0 and timeNs >= T0+ 2*unblockTimeoutNs\nThis looks more like a race of the checkForBlockedPublisher and the commit on an idle IPC publication.\nAm I missing something or just not enough time for coffee to fully kick in?\nI have a big sense of Deja Vu with this.... I remember it when I put in the original unblock check. But can't see how it gets avoided now.. On the client, the Images are reclaimed after being lingered, yes.. Yes, as I said, after the linger. The assumption is that the app will not block for an inordinate amount of time (i.e. longer than the linger timeout) in its poll. . @goglusid agreed. It is less than ideal. If you have a solution that does not rely on an atomic increment (and subsequent optimizations being avoided) on each subscription poll, I am very interested.. Our best solution currently is the linger one. Sadly. It's a tradeoff of performance for more app responsibility (not blocking for linger timeout on the poll).\nAnother tradeoff is to single thread the client like is done in the Java version with the AgentInvoker. I do plan to port something close to that into the C++ API, though. That avoids the issue, but also means the app now takes on more responsibility (to call the client conductor duty cycle timely enough).. @goglusid have to try it. I tried early on an RCU technique that was similar. Anything that stops migration within the Image loop cancels a host of optimization opportunities. Once it is outside that loop (like the loads for the array and the number of images), it is much better. However, that's the tricky bit. Needs to be within the loop to be useful.. @goglusid FYI. See 33c1033f6 for AgentInvoker support in C++.. @goglusid correct.. I think 16MB is more than generous.. Everything in computing has practical limits. Is 36 threads reasonable? Maybe. But is sending 128MB messages reasonable.... no. It's not. If you NEED 128MB messages, you are making the wrong tradeoffs.. At some point, any messaging system has to push back the responsibility of chunking to the application. 16MB is a practical limit that most applications will fit well within. And besides, once messages become too big, the application MUST assess the tradeoffs and decide for itself.. < 16MB fits in with the wait-free tradeoff. You want wait-free, you use smaller messages. You want convenience of obscenely large messages, then I think giving up wait-free and doing chunking at the application level is a good tradeoff.. For the C++ side, we can definitely do a compile time check for the value and break the build if the limit is changed.. We could have the driver enforce a limit on the number of addPublication to a given logbuffer as well.. @tkowalcz A Publication.close lingers the Publication around a little while to avoid trampling from an offer. So, you have a short period of time to keep an offer/tryClaim thread from doing any harm. Although, it is a good practice anyway to avoid having another thread sending while trying to shutdown.\nThe stack looks like it is awaiting a response from the driver when it fails. And not in the offer/tryClaim calls stack. Are you doing any other cleanup when this type of situation occurs?. Added.. The case of the removeImage while a poll takes an interrupt is possible.\nTesting with vector did not show nearly the needed performance on the iteration side over a raw array. So, a raw array does much better in this case.\nA couple potential fixes here, though. \n1 - encapsulate the array into a dynamic array type. This was done originally and dropped due to some optimizations being missed. It is well past time to revisit.\n1 - Re-read the array length after grabbing the array to make sure it is the same length and has not changed. This might prevent some migration and hinder optimizations.\n1 - Add in a change number scheme such as used with the driver conductor/receiver handoff for SMs and NAKs. This might also deal well with lingering the array and buffers.\nAll three need to be tried and looked at.. @mjpt777 yes, re-reading the length suffers from ABA. I realized it late last night while thinking on it. Encapsulating the length and array into a dynamic array (or @goglusid struct) is also appealing if it can allow the optimizations to work themselves out. The lifetime is easy since we already linger the array itself anyway. But that can be cleaned up as well.\n@goglusid one of the items we want to do is to refcnt the logbuffers. So, that complicates the lingering slightly as then logbuffers can be polled from multiple threads.. @goglusid we could do this. Actually, I have a different option in mind that is similar. We intend to soon make more changes, though. One is the refcnt of logbuffers so that the footprint of the mappings can be lower. And another is a change number technique similar to what you proposed for lingering resources. So, this is a temporary change until after next release and we make more changes.. Two separate issues here. One is the volatile read. That clearly is needed.\nThe isDriverActive check itself purposefully did a single check so it did not block and could be called in a loop (although it needed a volatile read just like the other). Also, driver startup would immediately return on this case as well. Now it is blocking for a period based solely on driverTimeoutMs. I'm not sure that is not going to cause some issues with existing code.. Well, false means no driver active. Which could be a disaster as it kinda means go ahead and create one.\nMy initial thoughts are:\n- add a timeout param to spin/wait for. This should be low.\n- keep IllegalStateException for when version > 0, but not == current.\n- if still 0 after the timeout, then return 'true' and optionally logProgress \"version 0 after timeout. Possibly retry?\"\n- if (timeout >= driverTimeoutMs), then can throw DriverTimeoutException\nAm I overthinking it?\n. You almost want a trinary return. ALIVE, DEAD, and Schr\u00f6dinger. I think a spin is fine. Just not sure how long. DriverTimeoutMs is a long one.... maybe @lbradstreet has a view on this.. The term length can be set on a per publication basis by passing it in the URI. At the moment, it is only documented in the Javadoc, though. Take a look at https://github.com/real-logic/aeron/blob/master/aeron-client/src/main/java/io/aeron/ChannelUriStringBuilder.java. I would suggest you try it yourself for the exact case you want.\nFirst, though, you can't call addPublication on an existing stream. Each time addPublication is called, it creates a Publication object. So, 2 calls creates 2 Publication objects. So, the second call has no impact on the first call. i.e. the existing Publication will be fine in all cases. Under the hood, the same logbuffer for both Publications may be used, though. And I suspect that is your real question.\nThe question is how does the second non-exclusive addPublication with the same streamId and channel, but different term buffer size, get handled. The answer to that is that if the MTU or Term Length is different than the existing publication, then the addPublication will fail with an error back on the client.\naddExclusivePublication is available for those situations where you have a single Publication and desire to not use any existing Publications. In this case, it will be 2 different Publications and logbuffers.\nResizing a term is not done after creation and not something we support.. @bcaimano yes, you are correct. The layout will need to change to account for padding. One option is to simply pad out and mark the real length as the last 8 bytes in the file. That would preserve all the previous logic. But it is ugly.\nWe want to do several improvements in this area. Such as refcnt logbuffers, etc. So, sorry for the silence, we've just been busy.. @bcaimano did you set aeron.file.page.size to the hugepages page size?\nEdit: For example, \n$ java -cp aeron-all/build/libs/aeron-all-1.5.0-SNAPSHOT.jar -Daeron.file.page.size=2097152 io.aeron.driver.MediaDriver\nProduces logbuffers that are multiples of 2MB in length. In this case, the logbuffers are:\n$ ls -l /var/folders/_p/pkchjzk95vg057my92f1drp00000gn/T/aeron-tmont/publications/\ntotal 102400\n-rw-r--r--  1 tmont  staff  52428800 Oct  3 14:45 UDP-00000000-0-7f000001-40123-a922db5-a-1.logbuffer\n. @bcaimano BTW, be sure to place the -D arg before the MediaDriver class name. Java will think it is a MediaDriver program arg if not. ;). @bcaimano you mean the timeout you intentionally set very low, correct? Not that it was too low in the client code.. Closing this as I believe it is done now.. This is Java media driver, correct?\nFYI, C++ addPublication is asynchronous. Any errors will come through findPublication.. BTW, what is the error in the ErrorLog?. Ah. That helps. Thanks. Let me look at it.. I've made 2 changes. One to the Java Media Driver and the other to the C++ API. These seem to work for me. But not doing any real tests besides BasicSubscriber and BasicPublisher.. I don't know of any public ones.  Aeron is used in some internal logging frameworks that I know of that are not public.\nBest place to ask would be on gitter. I'll be looking at this this week. Porting of all the things!. In terms of an iterator, maybe. Not a huge fan of anything but an array for this. But feel free to toss a PR and I will look at it.. I'm not following what you are referring to. Can you be more specific?. If you mean how to traverse a NAT.\nPublication client on private side of NAT: use normal endpoint as Subscription\nSubscription client on private side of NAT, Publication on public side of NAT: Have Publication use multi-destination-cast and subscription use dynamic multi-destination-cast. See the wiki.. I'm not sure what you are referring to here. Aeron does not use gettimeofday. Google Mock/Test and/or Benchmark might, but they should be smart enough to know what platform they are on and act accordingly.. @guidomedina You might look at ControllableIdleStrategy and it's usage in Aeron. It's an idle strategy that can be controlled via a status indicator. So, it is possible to have something else signal to the strategy what mode it should be operating in.. Sorry for the delay. I'll look at this tomorrow for a full review. To be honest, not sure I like following the C++ algorithms technique of iterator template params. Not sure it fits here. But I'll review with an open mind. A std::array version feels closer.. @nicklauslittle thanks! I spent some time exploring this and it does fairly well. It's a more C++-ishy way than using a native array. And probably better overall. Leaving options for usage with the standard algorithms is quite handy. Nice work!. Will take a look. Thanks!. If you narrow it down, let us know. Will see what I can see via code inspection.. Try this latest change and let me know if this is better.. No worries. Will close for now. Thanks!. I've changed the member name to avoid macro substitution going wild here.. Initially pub-lmt is 0 until a Subscription is connected.\nUsing pub-lmt can give you a sense of the amount of space.... but be aware that it is not guaranteed to always go forward (i.e. not go back). i.e. it is quite possible that the positionLimit might go backward from the time the method is called and an offer/tryClaim is performed. Unlikely, but flow control strategies (and congestion control strategies) are allowed to do that. In addition, if a Publication is shared, then other threads may be sending and eating into the limit at any time. And to make it more complicated, you could trip over the end of a term (ADMIN_ACTION) on a offer/tryClaim even if pub-lmt has room for a message.\nGiven these possibilities, using it as a guide is very rough. i.e. be aware that just because it says there is space, it may not be exact and it may change its mind or have other circumstances that would prevent publication from being successful.\nThe best way to consider it is how select() handles FD_READ and FD_WRITE as a hint and not a guarantee.\nIs there a reason you need to know the amount of data before back pressure before you send?\n. With flow control at the network level (not just pub-lmt), you can't be assured that a set of fragments will arrive together on the Receiver side nor that they will batch together. For IPC, you might be able to make this assumption, though. But I wouldn't.\nThis sounds like a transactional boundary. You can use something like Image.controlledPeek to see if everything is there or not to actually process. Saving data for processing in a single pass is not ideal, I know. But often necessary.\n. This also would create coupling between flow control and TermAppender. Which is not desirable.. Awesome! Thanks!. Dependency added for PingPong. Thanks for pointing this out.. You are talking about the Java code and not the C++ code, correct... the use of \"::\" had me confused.\nIf I follow your logic, there are some tests for this case. Specifically, doesn't shouldUnblockWhenPositionHasNonCommittedMessageAndTailPastEndOfTerm work how you mention? Or at least the spirit of it.\nIf I don't understand the test case, it should be straight forward to construct it in LogBufferUnblockTest.java.. Let me know when you are happy and I will review and reflect on the C side.. @goglusid I'm jetlagged badly, so it takes very little to confuse me. ;). What version are you using?. Try the 1.5.2 release tag.. I like treating warnings as errors. However, due to how we have to handle older platforms with both clang and gcc, we can't do it easily. So, we can't really use it.\nBSD_SOURCE is needed for all Linuxes. While it is deprecated currently, it has not always been such. So, it needs to stay as is.\ndlsym is a known issue for gcc. Wrapping it this way is not how we should handle it, though. So, please leave as is.\nGo ahead and remove the calculated_n from the loss detector.c file. It is a holdover from an earlier part.\nThe change in transport_poller.c is odd. Why was that added?\n. Great info. Thanks!\nThe immediate observation is that error log should not have the IOExceptions. Those would be worrying as they should not occur. And since they do, I would try to understand why. Isolating these would be ideal first step. They seem to happen much earlier in the run.\nIf my math is correct, then 6 hours at 1000 msgs per 10 seconds gives message total of 2160000. Does that match what was intended? Message length is 6 bytes. So, aligned frame length is 64 bytes per message (32 header + 6 data aligned to 32 bytes). For a total stream length of 131 MB. I don't see any info on the term length (from the driver config or setting it via the URI). 16MB is the default, so that should be near 10 rotations.\nObservations/Questions:\n- any changes to default config on the media driver?\n- the AeronStat output is great. Would be really good if you could happen to have caught the stream positions of the individual pubs/subs. These would help a lot.\n- the client should error out on any offer return that is negative (except BACK_PRESSURED and ADMIN_ACTION). Just to be sure of any missing paths causing any weirdness or potentially a subscription going unconnected, for example.\n- typically old messages usually indicate some sort of cleaning issue. Or it has in the past. Combined with the IOExceptions on the Sender thread make me think something is perhaps not right with it's cleaning. @mjpt777 would you agree? Then again, 6 hours would mean several rotations. Not sure how that might happen off hand.\n. I have not been able to reproduce this after a few hours of running. Nor can I find anything by inspection. Nor do I see the IOExceptions.. BTW, what is the JVM version you are using?. I've had no luck as of yet reproducing the symptoms. However, I am not using your client app. I'm trying to duplicate a single stream so we can isolate behavior. Your app has a lot of additional stuff going on that may or may not be relevant to the issue. Also, multi-hour runs aren't real productive to work through. Also, only a single box. Paying for EC2 instances for multi-hour runs is not quite feasible.. As we don't know what the issue may be.... only some very sloppy theories, we can't know what is causing it or not. Working from a known good behavior to finding bad is either you add or you take away..... in this case, it is easier to add more things and work up than remove behavior.\nWhy would it not be able to be run on 1 machine with 2 media drivers? The network can indeed cause issues, but what do you consider to be critical to Setup 2?. @dillonhicks we test with randomized loss on single machines with multiple media drivers. In fact, our systems tests do this on every build. Beyond that I do additional randomized loss tests periodically to make sure that we handle loss at rate correctly and that nothing has broken loss recovery.\nThe biggest culprit of things we can control in Aeron has to do with how we handle loss (sending NAKs and retransmitting). Simulating it with random loss allows us to make things more repeatable and to see changes in behavior that would effect scaling.\nAs we don't know why this is occurring, we can't say that it has anything to do with the network between the peers or not. Lack of making something happen does not equate to lack of existence. Simply means it did not occur... or it did not manifest as it should. Once we know what it is we can determine if it is caused by the network or not.\nSo, if we assume this is caused by the network, then some things come immediately to mind that fit the evidence so far (and would need to be eliminated from contention):\n1) it could be UDP checksum failures leading to corrupted payload data. It happens. It's why all apps should consider their own checksums on data or validating inputs when using UDP and TCP. Aeron has a number of validations for frame headers, etc. but does not directly validate the payload. It is one use of the Reserved Value field for Publications for ease of checksumming. Just because it is reproducible doesn't mean that it isn't checksum failures. Long runs tend to generate them anyway which is why long runs are not good to try and debug unless this can be ruled out. Which is very difficult to do. And the loss seen in the tests indicate probably a bit of \"background noise\" already. So, you might want to check if UDP checksums are on or not and even if on, they can be foiled. Verification of this requires a full packet capture, though.\n1) the \"message too long\" exceptions (and from the debug log) look to be UDP Path MTU discovery. The receive exception on the Sender also points to Path MTU Discovery also. Linux can report it on receive from earlier sends. We should catch the exceptions and handle them as short sends. But they don't seem to corrupt state form what I can tell. I would, though, suggest trying to turn off Path MTU discovery. see http://man7.org/linux/man-pages/man7/udp.7.html\nNotice these are not changes to Aeron (aside from handling the exceptions and those appear to be benign at this point). And thus... if they are occurring.... they can be tough to eliminate as possibilities unless a more controlled approach is taken.\n. @bedding Just some clarifications.\n- if cksums are disabled, interface stats will not show any errors\n- if cksums are enabled, but foiled due to error patterns, then interface stats will not show errors for those datagrams that pass validation. If may show some errors that do get caught.... maybe.\nIn other words, the absence of errors on the interface isn't a guarantee.\nLooking through the logs several times, they have some irregularities. One is a frame that is larger coming in than going out. Which could be explained by corruption (and no cksum). However, the loss occurs during bursts in throughput. It is unclear whether this is congestion in the network or if it is buffer overrun on the receiver.\nOne thing to do is to lower the receive window so that when bursts happen, they are contained a little bit more to avoid buffer overrun.\n@cesaref Short sends are almost always going to be resource starvation and/or SNDBUF sizing combined with window size. i.e. make window smaller and add more SNDBUF and they should reduce frequency for bursts (at the expense of latency, that is).. The app sends in 1000 message bursts every 10 seconds. Plus same on other stream. The default window length (128KB) is probably too large compared to the RCVBUF settings and the fact that there are 2 streams on the channel.. @bedding apparently fragmented IP packets (such as with Aeron MTU of 4096) have a high level of checksum errors on AWS. At least according to checking with some who are heavy users of AWS with UDP and from some posts on the net. So, if checksums are off, then it would fit the evidence. It would also be right in line that moving to a smaller MTU reduces the occurrences.. The tx/rx queues can change a little too quickly to catch. Sorta hard to catch in the act before they drain. You might look at LossReport and use it to track loss events. That will give some timings and might be a good way to help isolate resource starvation interactions.. Try with the latest. fefc259b6613175946bc07fa4172fffe249f6fe6 is a change that should address this.\n. This should be fairly straight forward. It does change a couple checks, but it should not require new state be added. It will require a new tombstone in the data packet dispatcher for the possibility of unwanted session Ids.. Thanks! This is now addressed by initializing the type to UNKNOWN.. All done.. The NotYetConnectedException is the result of trying to send after a conflict on the publication side. This can also happen if the OS hasn't been connected for a couple reasons. So, we can't simply stop on this particular exception as it can be spurious.\nHowever, this particular exception should be caught and ignored on sending.\n. Some now handled by 1b437856fa405c4921b0f35f7fdabdea3fc7de7f to reduce number of exceptions.. In addition, we should add in a force close command response so that a Publication/Subscription/Counter can be forcibly closed by the driver and the client informed. In addition, this response could be used to inform the client of a driver being shutdown.. Why use 32-bit C++?\nEdit: nevermind.\nI have not tried VS2017 for a while. So, not sure.. I don't think the build optimizes for VS2017 compiler options by default. You would have to pass them in via the cmake command or do it via the IDE after project generation.\nAlso, the msvc atomic methods are fairly totalitarian. i.e. they could be made less restrictive and let code flow more. Enabling better optimizations.\n. The thread_fence() in https://github.com/real-logic/aeron/blob/master/aeron-client/src/main/cpp/concurrent/atomic/Atomic64_msvc.h is probably strangling some optimizations. Also, /O2 may not be the best option.\nEdit: in other words, some needs to be changed to acquire or release based on semantics. Or changed to the equivalent for gcc x86.\nAll in all, VS2017 has not had nearly the optimizations for other platforms.. Thanks! Please do!. @mjpt777 the changes are what I suggested above. Also, msvc could use a few other changes. But they get a little more invasive.. The C media driver isn't ported to MSVC yet. When it does, we'll use compatible operations.. MDC isn't explicitly for NAT traversal. It just so happens that dynamic MDC allows a Subscription to be behind a NAT. i.e. on the private side. The reason is that dynamic MDC on the Subscription side sends a periodic SM that can initiate data flow back.\nTo set that up in the setup above requires a dynamic MDC as the connect request response information (cs). And the server to setup a Publication for MDC. The client needs to setup a dynamic MDC Subscription.\nBut back to the normal setup (sans MDC) with a client with a Subscription. The connect request can include the public IP (if known)... or the server can get the public IP as the source identity of a new image. This combined with a port forward can allow NAT traversal. This is already being done by at least a couple users, I believe. It means more control of the NAT (for port forwarding), but it is possible.. Actually, I was thinking that the max recordingId could be kept. I know we can go from what is read, though. But I was thinking to keep from reusing Ids after trimming and restarting. Even, though, that is fine.. All in now. Naming of \"Mark\" files instead of CnC files.. Renamed to open up any new semantics we can come up with.. I've not heard of a comparison of the implementations.\nSeveral of the concepts present in the NORM protocol are used. As is the case for any NAK oriented protocol, actually, since NORM incorporates the best known techniques. Several specifics are different, but the basics of NAK operation haven't drastically changed from SRM semantics. http://www.icir.org/floyd/srm.html\nFrom an implementation standpoint, the design of Aeron is very very different than the NORM implementation. Especially related to throughput and latency.. With the head, I do not see this occurring. Can you try it with the latest head of the repo?\nBTW, I am not using your BasicSubscriber, just using 2 instances of BasicSubscriber.. @mjpt777 and I have talked about a release soon. Want the current round of archive and cluster changes to be in, though.. I think you are correct. Would probably be better to use copy semantics instead for add/remove.. Move semantics in now. Feel free to examine it. Feedback always welcome.. This is changing. Drastically. It'll be the same format as ClusterMember.parse. Including the memberId.. I've pushed the format change. I agree with @mjpt777 , the format used should be US-ASCII.. Yes, an interrupt that is longer than the linger timeout is a known issue in C++ as well as Java.\nLess than ideal. We also know a few ways to address it and will eventually get to it. But until then, using a long enough linger is required. . Not sure if we've added it as a note on the javadoc or not. If so, then it might have been added to the C++ doxygen as well. Will check into that.\nLet's leave this here for a little bit. I'll mark it as a question.\nThanks!. This broke the build for me. ClusterNodeRestartTest broken.. I can grab this. Will rev the CnC version. Anything else needed to be added?\nStart timestamp?. All in for Java, C++, and C. This has been requested a few times. And thus would be fairly nice to have.. Might be good to do this for all image specific counters.... rcv-pos, rcv-hwm, and sub-pos.. Presumably, this would need to also handle truncating on a previous segment than the last and unlinking the segment file.. From the exceptions, UDP port 4050 and port 4051 on IP 192.168.0.3 and 192.168.0.4 are not assignable. Make sure Subscriber2 is actually on IP 192.168.0.5 and has nothing else bound to that port. Same with Publisher, etc.\n. For MDC, the publisher \"control\" is the local IP and port (or can be localhost, but then traffic is limited to the local machine). The subscription \"endpoint\" is the local IP (to the subscription) and port. As you are doing a manual MDC, you need to use Publication.addDestination for each subscription.. Glad it's working.. Yes, this is a problem. Fix incoming.. I believe this is now fixed with 9935f6204. To be clear what was effected. Shared publications (non-exclusive, same streamId+channelId) would miss track reference count when clients would close publications, but keep clients active.. No problem. Thanks for the details! Was very clear.. Fine with me. I've requested Martin to review.. A service timeout on the Aeron client indicates the client has not been responsive for the client liveness timeout in the driver. Thus the driver, in most cases, will consider the client to be dead.\nThis means the client should close and recreate all publications and subscriptions.\nYou should not need to recreate publications on failed offers. Even after a number of attempts. Unless the return indicates CLOSED. And in that case, it is most likely that the client timed out on the driver and all publications and subscriptions should be closed and recreated.\nIn general, handling timeouts of the client by closing and recreating is necessary. And should probably be considered a clean restart of the application.\nTimeouts like this, if you are getting them often, indicates a need to provision the application better (much less STW pauses from GCs, less resource starvation from threading, etc.). You can increase the client liveness timeout on the driver to account for some pauses, but this is not very useful unless the cause of pauses is known and accounted for.. The C++ API has this functionality.\nhttps://github.com/real-logic/aeron/blob/master/aeron-client/src/main/cpp/Aeron.h#L180. Currently, reception is poll based and delivered via a fragment handler. For low rate streams, using something like SleepingIdleStrategy between polls will be more than friendly to the OS and other threads.. Thanks for pointing this out.\nI've added a handler for exclusive publications. The semantics of using the existing new publication handler if this new handler is not set, makes sense to me anyway. This also has the behavior of being compatible with existing applications as pointed out.\n. What is the output of CMake at the beginning? You should see something akin to:\n-- Looking for stdint.h\n-- Looking for stdint.h - found\n-- Looking for stddef.h\n-- Looking for stddef.h - found\n-- Check size of struct mmsghdr\n-- Check size of struct mmsghdr - failed\n-- Looking for recvmmsg\n-- Looking for recvmmsg - not found\n-- Looking for sendmmsg\n-- Looking for sendmmsg - not found\n. What is the actual output you see?. The output I showed is from Mac where mmsghdr doesn't exist and thus falls back to defining it. As you mention that sys/socket.h has the definition and it appears to be finding it, I'm not sure how the CMake output is exactly what is shown, but the compilation fails on the struct being already defined.\nLinux gcc/glibc versions are a little odd in that the flags vary quite a bit for compat. As gcc 4.8 is a bit behind, it might be better to use a newer gcc.. Glad it can be worked around.\n@manishbaphna can you paste the output of CMake where it does its configure? It is the start of the build and contains the lines I mentioned as well as compiler, etc.\nIt's strange that uuid must be found int the CMake find_library, but the final link fails. And would like to see if something is missed here.. Actually, the build tries to find libuuid and the uuid functions/headers separately. I would bet that the functions and headers are not found, but in the process, the library is found. But something else is not allowing it to be linked correctly. Probably a path is not correct for this setup as your original output mentions libuuid is found in a different directory (/usr/lib64).\nIf uuid can't be used, it falls back to a pure random generation for the receiver id. That is probably what is happening. But because CMake has found the lib, it tries to link the lib anyway. And fails. That is why when you remove the UUID libs, it works.\nBTW, you might try installing libuuid and libbsd. But since it looks like you are using a non-standard compiler, things might not be in the correct configuration to make everything work.\n. Very nice! Thanks!. aeron-client has a BUILD_TEST conditional. That can probably be removed with these changes since the directory should not be added if not needed.. Great! Thanks!. SSM is not currently supported. All multicast reception is currently (*,G). Adding SSM is fairly straight forward, though.. Try setting the BasicPublisher and BasicSubscriber channels to communicate in each direction, then try transposing those addresses into Ping and Pong channels.. Did Ping crash immediately or only after some time of Pong being terminated?. Was not able to reproduce this as of yet.\nThink this is the normal chance of the image being caught at the same time as it is removed by the driver.. 0d16bf360 should make this cleaner.\nThe initial behavior was to wait for a file for a timeout. This behavior can now be customized by setting aeron.ClusterTool.timeoutMs. This allows startup of a cluster to be waited on if desired. The default is not to wait.. Sorry for the delay, did not see any notification of the issue.. I would like to make this cleaner. But changing the API has some issues for current users.. Wrapping a client agent invoker + polling mechanism into a duty cycle that also calls epoll for a set of FDs is not too hard to do and can be quite efficient. Instead of having Aeron indicate data by triggering an FD, you can simply call Subscription::poll and the client agent invoker from your duty cycle. i.e. instead of waiting on epoll, poll it, then poll Aeorn and agent invoker, and then if no work to do, use an idle strategy with a backoff. It's essentially what epoll does anyway in many cases with active FDs.\n. you mean 10 milli or 10 micro?. What do you mean the C driver was showing delays?. Ah. The wording made it sound that strace was showing something.\nDoes the stats show any loss on either machine?. BTW, my best guess here would be that there is something odd with recvmmsg and sendmmsg going on with those machines. But loss needs to be ruled out first since that is much more likely.. @lukepalmer yes, perfectly normal strace.. Interesting.\nThe C driver will use PAUSE on a busy spin. Java on Java 8 will do an actual busy spin (no PAUSE).\nIs there any CPU differences between the machines? especially between hyperthreads vs. physical threads?. Images go unavailable due to the Publication going away. Or perceived to be going away. Due to inactivity mainly. In the case of an image going unavailable, then becoming available again, that is by design for Subscriptions that can not keep up in a multi Subscription environment.. The \"sub-session\" language is referring to stream Ids. It represents the fact that, from a PURELY specification perspective, it is fine to have the same Session ID on 2 different Stream IDs.. Yes. The position can be filled however you like for the poll. Can come in via another channel, etc. Or could be computed, etc.. The short answer is that I don't think it would make more sense. Unreliable delivery is for handling loss. Not for changing flow control semantics. It is very ill suited for that.\nThe long answer.... is more complicated.\nStreamingPublisher sends as fast as flow control will allow. This is what is contributing to this behavior. Well designed Aeron apps (that fall into the camp of favoring loss over sending delay by being unreliable) would not be sending flat out normally, but sending below flow control as to allow bursting. So, the app and situation is somewhat artificial. If running as fast as flow control would allow, then MinFlowControl is the wrong choice for this scenario. Even with reliability turned off.\nThere is a clear difference between loss and flow control. Just because something is not waiting for loss to be repaired doesn't mean it is going to be able to keep up with a slow consumer. These are different things. They can have a correlation, but not necessarily causation. As you see in the stats, there is  only 1 gap fill.\nAdditionally, the reason the overrun is used is to keep Aeron stable. The idea of NAKing on an overrun actually defeats the purpose of flow control and would lead to instability. The same with gap filling (although it has less of a systemic effect due to no NAK being generated).. No worries.\nI would suggest that the receiver window should be increased (assuming the default). And probably using the suggested params for throughput performance.\nhttps://github.com/real-logic/aeron/wiki/Performance-Testing (2M window)\nhttps://github.com/real-logic/aeron/tree/master/aeron-samples/scripts\nThe receiver window defines the overrun. So, a larger window is essential. Especially for bursts. But making it too big will mean issues. So, sizing it appropriately is mandatory for stability.\nBeyond that, I would do some performance testing to see what the good param values would be to maintain a very low (or non-existent) back pressure on the Publication under normal situations. This would be a combination of Aeron params and subscriber logic handling. Goal would be to make it so that back pressure only occurs under situations you know it should. i.e. not under bursts unless those bursts are very high (for some definition you probably already have a feel for in the system).\nIn other words, you only want that situation of a subscriber image going inactive and then active (aka bouncing) when the situation is well beyond the normal and only when it is key for stability.. Awesome that you've got a conan package for Aeron! Thanks!\nChanging to off_t was done more for cleaning up. Don't think it is used for win32 build. off_t is a normal type, though, to have for Linux (and most POSIX) anyway. So, that is quite odd that it isn't finding the type. Could this be an include issue (or some sort of compat flag issue?). We have this somewhat in the C driver. But, yes, some includes should be moved to the headers in the C++ API.. This is known NIO behavior. In terms of Aeron avoiding it, there are a few things we might do. But they do not work with all of the flow control strategies that need to know receiver IP. Also, they do not work with RTT measurement for congestion control. It might be possible to special case this to use read instead. We can look at that. But the caching of the inet address is in the NIO stack and somewhat what we have to live with.\nBTW, the C media driver does not suffer from this limitation.. They are essentially the same and you should be able to mix and match Java, C++, Go, .NET clients with either just fine.\nThe C media driver has some advantages over the Java media driver in terms of usage of sendmmsg/recvmmsg on Linux which can make it very efficient throughput-wise. Going forward, the ef_vi support as well as security will use the C media driver.\nCurrently, the C media driver is lacking the very latest commands added to support clustering and archiving. However, we will be adding this support as we have time.. Others are using Aeron for low bandwidth wireless on small devices as a research topic. And others have used Raspberry Pis with Aeron Cluster running.\nAeron is somewhat unique in that it's easy to experiment with flow and congestion control in a multicast setting. Also, the logbuffer structure opens up some interesting FEC options over higher loss environments. And Multi-Destination-Cast has some advantages over serial TCP connections.. This can happen quite easily if you have Aeron trying to close a Publication on a closed driver. Specifically, in this case (shared outside here), I think there are 2 closes of Aeron, media driver, and pubs/subs racing against one another. And the Aeron instance uses a NoOpLock ClientLock and invoker. This combination is unsafe. The clientLock is used to keep 2 simultaneous closes from trampling one another. A NoOpLock has no protections.. 1.11.2. This looks like it is failing in normal memory ops. i.e. std::shared_ptr. As mentioned, CMake probably needs to specify to enable/disable. Odd. I would think this would be handled by the normal options... which leads me to think something has changed in the normal flags between 2015 and 2017.... The C media driver does not yet support session specific subscriptions nor multi-destination subscriptions. Thus the C media driver does not support the archive.. I'll review this shortly.. Yes, this is because of the RCVBUF sizes on most Linux distributions.. Can this be brought up to date? Right now it has conflicts.. with 095fb9ff8 the C media driver and Java media driver both use 0.0.0.0:0 for endpoint when not set. So, this works the same. However, error checking should be added to ensure endpoint is set on the Subscription side for both C and Java media drivers.. Would rather enforce that a Subscription MUST specify endpoint if it specifies control even if endpoint uses 0.0.0.0:0. Just makes it clear. This must work with tags as well.\n. We don't have any Subscription or Publication URI checks. We need those going forward, I think.. There is an additional point here, which is why I suggested @ratcashdev file the issue. If an election takes a significant amount of time that a client session timeout causes it to close, should the new leader try to inform the client or not? i.e. if quorum is lost for longer than the timeout, then what is the result of the sessions all timing out?. Another requirement that the test app needs. Needs to send a heartbeat. As well as retry/timeout logic on the leader.. Others have asked for a reserved parameter that can be used as an alias to hold metadata for a URI (that Aeron won't interpret, but will preserve). Tags are a little different in that they refer to channels and subscriptions/publications (depending on usage). Subtle difference, but quite distinct, I think.\n. @mjpt777 indeed it will. I'll reserve \"alias\" as a parameter and add it to the builders, etc.. Alias added to URI params in eef60cf31. Tags are used to tell the driver \"this subscription/publication/channel\" is to use the same as this tagged channel.\nAlias is a application level string attached to a channel that is not interpreted by the driver or API. An example: aeron:udp?endpoint=localhost:45678|alias=OutboundToProcessor. It's purely for the application. So, AeronStat and other tools, etc. As well as what you have been looking at, the Archive recording listings looking for channels like alias=OutboundToProcessor for example.. Tags can be num, [num,], and [num,num]. So, it would be tough.. No worries.. These have now been renamed. So, should not conflict. Thanks!. @mjpt777 can confirm, but I believe the desired effect is to delete all the segment files. This then allows ClusterTool to mark the entry as INVALID when run with verify.. 1.13.1 will be tagged when we do our next release. Unless we do 1.14 instead.. This also needs to support HTTP/1.1 retrieval of file.. Step 6 creates something we don't support. i.e. a cluster member that is out of step in terms of state. i.e. no snapshot from the previous shutdown.\nI can't quite seem to reproduce this without that step, though. Can you check to see if without that step you can get this to occur?\nEdit: Not entirely correct. Step 6 seems to do something (or might). What should happen is that the old node will need to catchup the entire log. This is not actually a replay as the node has not executed the shutdown. Since the shutdown takes a snapshot, it needs to execute it while catching up. And that will terminate the node. I think the lack of previous snapshots somehow causes the issue later on. Will look into it more.. I misspoke. Step 6 actually is supported. Just not ideal. The behavior is that the member will try to replay the log. If the leader doesn't have it (such as if during the shutdown, the leader got rid of anything earlier than the snapshot), the member will not be able to catchup. So, blowing away the log on one member is not advised unless the other members can replay from position 0. Which in this case it was. Just not obvious with the snapshots in the shutdown.\nThe issue is that somehow the snapshot recording in the snapshot is not being handled properly and after a while it figures this out.\nHowever, it opens an issue I am trying to figure out a better solution to. The shutdown creates a snapshot that must be performed during the catchup. That snapshot when doing a catchup is executed. But it also executes the shutdown attached to it. Causing the node to stop. Because the shutdown is coupled to the snapshot. So, trying to figure out if separating the actions is necessary or we have to create complexity to execute the snapshot but not the shutdown. And in that case, need to find the right indicator that the shutdown should not be done.... it's not simple as the shutdown could be initiated during a catchup and timing might make it so that the node performing catchup doesn't shutdown.... which would cause an election, etc.. I'm in the middle of changing this. The shutdown will be separated from the snapshot. SHUTDOWN and ABORT will no longer be events in the log. Same functionality, but a SHUTDOWN for the control toggle will trigger and snapshot and a termination coordination with the followers and their services. An ABORT will simply cause a coordinated termination without a snapshot being taken. This means that a replay will not have to deal with a shutdown or abort event.. In a situation where a node was catching up, it needed to execute the log. Since SHUTDOWN and ABORT were events in the log, they needed to be executed. That is no longer the case.. In general, this is not a bad start. But it will need a lot of work. In general (just initial thoughts from a review):\n\nno C++ in C media driver lib or main\nclean (or as clean as existing build is) for existing Linux and MacOS builds\nno pollution of existing namespace by porting Linux system calls and thus making linking with cygwin/msys impossible. i.e. prefix all functions, etc. with aeron_, etc.\nan initial cut can avoid it, but a real Windows port should use RIO\nflags to file view, etc. need to accommodate some of the options that reflect the other platform behaviors. The defaults do not.\nshould support a DllMain (I did not see it) since some TLS is in use\nshould support a static lib setup in the main driver calls. @farnyser I will review later today once I have some time. Thanks!. This looks really nice now. Thanks so much. There's a few little cleanup things, but this is very well done. Thanks for putting the time, effort, and putting up with our long list of requests! Very happy to merge. And I will give it a spin soon as well.. You did not change the client keepalive interval. So, it's only sending keepalives every 500ms. Thus, after the initial subscriptions/publications, the clients will timeout very quickly. \n\nThis will cause the publications and subscriptions to be removed in the driver.\nPlease do not adjust the client liveness without adjusting the rest of the timeouts and intervals in an appropriate way.. The inter service timeout is there to tell the client that it probably has been timed out by the driver. i.e. to catch this situation. However, it is not a guarantee and it operates on a assumption of a proper configuration (keepalive < timeout and in relation to slow tick cycle, etc.).\nSo, if you want to adjust the timeout of the driver (which sets the client inter service timeout), then you will need to adjust other timeouts and intervals also. Depending on what you are trying to do it's not simply the liveness of the client to consider....\nIf you need a 30 second timeout, is this due to thread starvation or GC? If so, then you need to consider much more than simply client liveness for things to operate reliably.\n. Liveness is checked on the slow tick.... roughly once a second. Timing with settings like this can easily cause the same situation to occur. The liveness timeout needs to be more than 5x or 10x or more than the interval. And since it is checked each second (assuming no starvation), it should be minimum of several seconds.\n\nIf liveness timeout has occured and the media driver does remove the publication and subscriptions. How is the publisher client able to successfully offer?\n\nIt can because the client is keeping the logbuffer around. The driver is done with it since it has timed out. As far as the driver is concerned, the client is done and gone. That is why the timeout needs to be long and the keepalive interval short.\n\nYes I had set the timeout to 30 seconds due to thread starvation or GC. Mind you this situation has happened only twice in 6 months. That too under really heavy load when our engine is processing a lot of Market Data\n\n30 seconds is a long time, as you know, I am sure. Heck 10 seconds is a very very long time. The best solution is to keep the system responsive. Compensating for long pauses like this have to, as I have said, account for quite a few timeouts, etc. to keep things alive.... like Images, etc.\n\nLastly my point is I understand we need to tune our system to handle this edge cases but there was no indication from the Publisher, even though all the other Subscribers were not receiving messages.\n\nSo, are you positive that the client didn't have an Inter Service Timeout on the publisher? I mean it is possible that the client due to timing misses the service timeout, but the driver times out the client, but unlikely....\nAlso, you said the publisher Images went unavailable on the subscription side.... why is that not an error for the system? Is it expected?. > * What is the best way to detect live publication and live subscribers in a pub sub environment?\nVia timeout of activity. The application needs to have a means of detecting communication failure. Relying on the transport to ALWAYS provide an error is not going to happen. This is not just Aeron. This is TCP as well. If you don't build this into the application protocol, the application system will not be robust to failure. \n\n\nIs there any way to recover from such a situation, that is detect dead publisher for example on publisher side and then close and restart the publisher programatically. At this point the offer returns normally.....\n\n\nLack of activity should pretty much always be the signal. And usually the result is an application restart.... or a graceful (or as graceful as possible) shutdown. Depends on the application.\n\n\nOr is the only other option to monitor alerts and have someone to bounce processes manually? This would not be a great option\n\n\nI agree. I would build activity detection into the application protocol and then use that.... honestly, there are enough edge cases (I know this is IPC, but you should treat it as UDP anyway) that Aeron will not be able to detect and provide an indication that the application needs to know that communication is not possible and to attempt a shutdown or restart.\nThe symptom you are seeing where a Publication.offer is a silent failure is not uncommon to a net split scenario. Or to a situation where the Subscription logic has hung. The logbuffers are big and it takes a while for them to drain slowly (if at all). Relying on Aeron (or TCP) to always inform you of an error is not a viable solution for the system. You can use errors as indications of problems before a timeout happens, but relying solely on them is doomed to miss a LOT of problems.. @mjpt777 the change you made to clamp pub-lmt only applies until the Counter is reclaimed. Which is 1 second. So, while it can help make the window smaller, it can't eliminate the possibility (especially in a 30 second client timeout as originally mentioned).\nAt the end of the day, InterServiceTimeout can say the driver has possibly timed out the client. But it is unreliable. The driver can timeout the client without it firing just due to timing. \nI think what we should do is to have a client keepalive for an unknown client generate an onError from the driver. The client that sees that error can know it has timed out then. Use clientId for the offending Id. We can also add a system counter for tracking those if we wish.\nIf we simply add a client timeout event to the toClients buffer, that can help, but it could also be lost by a client (unlikely, but possible). A response on each keepalive means one will eventually get through.. A client close is a one shot and can be lost, as I mentioned. Still can do it, though. But an error on client keepalive could act as a backup.. Broadcast buffer is unreliable. Messages may be lost.. It is unlikely, yes. But in the event of a lot of activity, say a lot of timeouts happening at the same time and a lot of other events all at the same time, it is quite possible it will be lost due to a client not keeping up.. that exception comes in, I think, via the error handler. Not sure that all applications will see that as a terminating error.. Well, if we force a close of the client on a wrap, then we can just send a message on client timeout to notify the client. If it's wrapped, then the close will catch that anyway.. Agreed.. I will handle the client timeout notification. But it'll have to wait until tomorrow.. I've added a client timeout notification to the Java driver. Will add to the C driver today.. C driver now generates the event also from a3be7292a. going to close this now. The generation of the client timeout event should help this situation. But notice that the client must read the broadcast. So, it will not be immediate and it means that the client conductor thread must eventually be given some time to run.. We've moved to a cleaned up set of classes for this type of thing. See ClusterTest, TestCluster and TestNode. The uri_length using strlen - 1 is probably an error. It seems to only be used for doing the copy of the URI for storage as the original URI.. @mjpt777 has pushed a fix instead.. Couple/Few things.\n\nnot sure about asserting on clz value of 0. I know why. Just not comfortable with it instead of a guard.\nContext.conclude is needed in general. We could get away with it, but better to keep it.\nI've tried various things with Images. Copying vs. Moving, etc. This is fine. But I think in general, we will eventually need to move to be compatible with how Java does it instead of trying to be local with the array. In other words, Image should be a standalone object. And the array in Subscription should be an array of pointers to Images.. I think a move for a reference doesn't make as much sense. But, in general, we can take this and then deal with that when it is needed.\n\nThe guard I was thinking of would be a return of the bit size as Java does.. Those tests are fairly sensitive to starvation or resources. Just by their very nature.. Clustering is not released yet. We have plans for more usage, etc.. It will fail on Windows (probably), but better to define for specific platforms that need it.. C media driver agent could use this also. ;). The spacing and formatting should be consistent with the rest of the Aeron code base.\n. Remove @Overrides that got added.\n. Newline after **\n. I believe that the style is \"static\" imports after other imports.\n. Remove @Overrides\n. Should \"static\" imports come first before other imports?\n. Wouldn't it be better to disable NAKs as a static final and just skip the entire activation instead? @mjpt777 thoughts?\n. System.out.format instead?\n. indent to 4 spaces\n. Might be better to use try-with-resources version. See the BasicPublisher, etc.\n. Please avoid \"get\" and \"set\" for accessors.\n. indent to 4 spaces.\n. This feels like it should be simpler and cleaner. While I am sure it works, it is a bit hard to follow. And I can feel @mjpt777 twitching.\n. indent to 4 spaces\n. Move static block up after members. Makes it easier to find.\n. check into BiInt2ObjectMap.\n. There is a new Java8 technique for this now. ThreadLocal.withInitial(). Might be a little bit more readable.\n. null initializers not need.\n. might want to add MTU length as it has been added to the log meta data\n. how is this different than LogInspector?\n. Probably can remove these style comments since git works well to know this. :)\n. What does this and Pong do differently than the samples Ping and Pong?\nAlso, why does this do its own calculations instead of using HdrHistogram?\n. I think these tasks clutter up the build. It's not too bad to execute java at the command line and bring in a tools.jar instead. Somewhat like we do with samples.\n. When the Receiver does a removeSubscription from the dispatcher, I think it does this check already. Why do it here?\n. Why is this necessary for the unit test?\n. This a little bit weird. But here is where a little is explained. Having the conductor set the state for this creates some cache traffic on the Receiver thread.\n. Changing the README and saying this will be supported on Windows is a bit early. And that is @mjpt777 and I to decide when that is ready.. which functions are needed from Iphlpapi?. We don't want C++ inside the C media driver. Tests can use C++, but not the base driver.. This is not equivalent to pause is it?. use of MemoryBarrier is a little heavy for these.. As the C media driver will need to be able to be embedded, need to avoid the use of all non-Aeron namespaced function names so that cygwin and others will not collide.. Should not need to use C++ for this.. Why not use _mm_pause directly?. C media driver can be used as a library and brought into anything as a binary dep.. An inline function can reduce the impact for those that are trivial. Some of them are different enough that it isn't a straight \"make a version for Windows with the same name\". So, refactoring what is being done might be more appropriate.. I think due to the nature of Aeron, this should be kept as __mm_pause.. I see it actually is that. Thanks!. ",
    "RichardWarburton": "I think this is actually a flow control bug. The flow control should stop Publication from writing more than 2 buffers ahead of DriverPublication.\n. Oh, sorry I initially misunderstood the bug report.\n. Varargs definitely allocates. Its also probably worse than a capturing lambda as well, because it needs to initialise the array of arguments.\nI think really the only people who should be using this API are advanced users of the IPC case who are being bottlenecked by the additional copying cost of the current API. Do we want to caveat that in the javadoc for this class?\n. It looks like the bug wasn't that harmful, since it just resulted in larger state buffers after they get initialised by the log template - but that's still wasting memory. Good spot thanks.\n. You're more than welcome to implement a port yourself though. Aeron client instances talk to the media driver over a defined protocol, so it should be fairly straightforward to port to a go client from either the Java or C++ sources. I suspect that you could also implement a go client as a wrapper around the C++ client.\n. I'm not sure that this is the right direction to go in. I think the expected use of Aeron is to have a single media driver per machine and any number of client processes all talking to the same media driver instance. The client processes may be running as different users - so making them all default to different directories isn't necessarily helpful. You would still have to make sure those directories are readable/writeable to different users.\nNB: I'm not saying this is the right thing for everyone - some deployments may have security concerns which preclude sharing buffers between users on a system but I think the default should be to encourage one media driver per machine, rather than one per user.\nWhat are your thoughts @tmontgomery and @mjpt777 ?\n. @kspinka I'm not sure there's a need to close the pull request. My comment and it not being merged are a reflection that there's not been a decision on whether its a good idea or not, rather than it being rejected without being rejected.\nI certainly think your suggestion that if we're not going to make things user specific then we should probably setup the permissions so anyone can read them is an interesting alternative direction to go in.\n. Couldn't replicate the Java problem on my platform - perhaps you can supply more detail.\nI've added some includes which fix the C++ build issues.\n. I'm using ubuntu 14.04. I've not seen these errors before.\n. Excellent stuff!\n. +1 for FAQ entry and adding it the examples on the wiki.\n. Hi Ruediger,\nIf the goal is to throw away data until you have subscribers isn't that a concern that can be handled in an application protocol? Your publisher would write an INIT message at the start and then throwaway any data until it receives a JOIN message for any machine which is subscribing to the feed. Now it knows you've got subscribers you can start publishing messages as normal.  This satisfies the usecase without changing Aeron's flow control and the only added complexity is that the subscribers whose joins you care about also need to be publishers.\n. I think its a reasonable addition. Implementing it will certainly ensure that flow control is decoupled from other parts of the system ;)\nI think Ruediger has also suggested another feature here as well - the ability to receive notifications on subscribers joining a stream. I can see that also being a useful feature for people wanting to monitor/report on what is going on with Aeron. Do we want to consider adding that as well?\n. Different users of Aeron have different requirements that can be accommodated with a common core. Are we all in agreement that flow control should be decoupled from the rest of the implementation and pluggable?\nThere are different strategies that can be catalogued:\n- Just apply a fixed rate limit.\n- Slow everyone down to ensure every subscriber keeps up. I think this is Todd's existing optimal multicast strategy. I think there are plenty of situations where people will want this kind of thing.\n- Slow everyone down to ensure n subscribers keep up, allowing m other subscribers to fall behind. Here the n are critical systems which should influence backpressure and m are things like monitoring or debugging services which shouldn't slow the other subscribers down.\nAm I missing any strategies here?\n. There is now a gitter room at https://gitter.im/real-logic/Aeron. As Todd says - that does the same job as irc.\n. There's a few new files here. Previously we've been adding licensing and copyright notices to all the files. We should probably stick to this for clarity's sake. Code looks fine.\n. @phaynes You'll find that the guts of Unsafe are really implemented in hotspot as JVM intrinsics in order to avoid the overhead of a JNI call when you just want a single assembly instruction emitted. To the best of my knowledge this is all defined in library_call.cpp (http://hg.openjdk.java.net/jdk8/jdk8/hotspot/file/tip/src/share/vm/opto/library_call.cpp). If you care about get and set operations then see line 806 and 2797 onwards. Unfortunately it might be a bit hard to read what is going on because intrinsics in hotspot (as with many other VMs) are written as functions that generate JIT compiler IR sub-graphs rather than assembly, but it is the canonical source of truth.\n. Docs look good. Is there any reason we don't make the conclude() method of the Aeron.Context class package scoped? This would discourage API users from calling it.\n. Currently on my laptop and trying to reproduce the problem, but of course the build is now rock solid!\n. No - I've just pulled/reinstalled and its still segfaulting. Will try to narrow it down a bit more.\n. Managed to produce another segfault around what looks to be the same/similar issue:\nStack: [0x00007efef9787000,0x00007efef9888000],  sp=0x00007efef9886240,  free space=1020k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nJ 870 C1 uk.co.real_logic.aeron.common.concurrent.logbuffer.TermReader.read(ILuk/co/real_logic/aeron/common/concurrent/logbuffer/DataHandler;I)I (117 bytes) @ 0x00007eff113068a9 [0x00007eff113066c0+0x1e9]\nJ 869 C1 uk.co.real_logic.aeron.Connection.poll(I)I (86 bytes) @ 0x00007eff11307aac [0x00007eff11307820+0x28c]\nJ 882 C1 uk.co.real_logic.agrona.concurrent.AtomicArray.doLimitedAction(IILuk/co/real_logic/agrona/concurrent/AtomicArray$ToIntLimitedFunction;)I (85 bytes) @ 0x00007eff1132430c [0x00007eff11324000+0x30c]\nJ 865 C1 uk.co.real_logic.aeron.Subscription.poll(I)I (48 bytes) @ 0x00007eff1130c404 [0x00007eff1130c140+0x2c4]\nJ 879 C1 uk.co.real_logic.fix_gateway.logger.Archiver.doWork()I (10 bytes) @ 0x00007eff11324a94 [0x00007eff11324a00+0x94]\nj  uk.co.real_logic.agrona.concurrent.AgentRunner.run()V+33\nj  java.lang.Thread.run()V+11\nv  ~StubRoutines::call_stub\nV  [libjvm.so+0x627306]  JavaCalls::call_helper(JavaValue*, methodHandle*, JavaCallArguments*, Thread*)+0x1056\nV  [libjvm.so+0x627811]  JavaCalls::call_virtual(JavaValue*, KlassHandle, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x321\nV  [libjvm.so+0x627cb7]  JavaCalls::call_virtual(JavaValue*, Handle, KlassHandle, Symbol*, Symbol*, Thread*)+0x47\nV  [libjvm.so+0x6a0e4e]  thread_entry(JavaThread*, Thread*)+0x7e\nV  [libjvm.so+0x9e2fef]  JavaThread::thread_main_inner()+0xdf\nV  [libjvm.so+0x9e31b5]  JavaThread::run()+0x1b5\n. Yes, I think this is fixed thanks.\n. Ok. Thanks for your feedback gents. I see your point, we're just encouraging race conditions if we expose the field.\nI'm a bit concerned that if you have two subscriptions to the same stream, then closing one of them at the moment seems to mean that you close both of them. This puts a lot of burden on the API user to manage their resources which I think we should be managing for them. In fact I can't see a way of managing this nicely in my code without reference counting my subscriptions and closing them at the end.\nWouldn't it be better to have the close method close the single subscription object, and not other subscriptions? Apologies if this has been discussed before, but i can't recall a reason why that's an issue.\n. In that case I'm going to close this issue and raise another issue to handle the subscriber close scenario.\n. Apologies, the title and text on the original issue had a typo in. I meant \"subscription\" where I wrote \"subscriber\". Does that make more sense now?\n. I've not seen this issue now, so I'm going to close it.  If it crops up again then I'll re-open.\n. I'm not sure committing to a roadmap/schedule is a good idea necessarily. It often sets false expectations which disappoint. I think having a list of features which we would like to implement without committing to timing is a better plan.\n. Semantically I think these changes all sound great.\nHowever I think we should think about the use of Aeron as a tool that decouples producers and consumers from the underlying mechanism as much as possible. I would like to be able to write an application (for example the project I'm currently working on) where I can reconfigure my application to use IPC or Unicast Aeron streams as appropriate.\nIf the Aeron.addSubscription(Channel, streamID) method also allows me to use IPC by using a channel string such as \"ipc\" then the API becomes more flexible. My application built on top of Aeron can just set a property to be the channel and I can put in \"ipc\" if I want. This still makes the choice explicit, but lets end users defer that choice to the startup of their application rather than at compile time. It also lets users more easily benchmark IPC vs UDP based streams and then make the architectural choice based upon that data.\nIt also wouldn't preclude offering a Aeron.addSubscription(StreamID) and Aeron.addPublication(StreamID) overloads which are more fluent and just delegate to passing in \"ipc\" as a parameter.\nThere might be other ways API-wise to do it and I'm not attached to that API necessarily but I think whatever API is picked we should try and make switching between IPC and UDP based streams as painless an operation as possible.\nDoes that make sense?\n. Can you clarify what you mean by a \"CLI\" version?\n. I'm not sure this is an \"issue\".\nDo you want an FAQ entry that compares Aeron to ZeroMQ or a wiki page or something?\n. Is it not possible to declare the apply plugin in the top level gradle file and have it apply to all subprojects, by putting it in the subprojects { ... } declaration?\n. Thanks.\n. It is worth noting that communicating over MXBeans has always been garbagey for me in the past, and their default transport layer is over RMI which periodically forces a full gc. Is this really the right means of control in an otherwise steady-state allocation free system? I'm not really up to date with the logging side of things, so feel free to disregard me if you've already addressed this issue in previous discussion ;) just thought I would raise the question.\n. I would love to recommend Java 8's removeIf() method which looks good for this kind of pattern, but annoyingly it allocates a bitset on every call, even if there's nothing to remove + in practice the lambdas capture which is more allocation.\nhttp://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/8u40-b25/java/util/ArrayList.java#ArrayList.removeIf%28java.util.function.Predicate%29. I appreciate that this isn't exactly what you're looking for, but just in case you aren't aware of it there is an AvailableImageHandler that can be registered on a per-client basis. You should be able to implement the desired functionality on top of that.. There might be a few things going on here, without seeing your entire code its hard to know what exactly is wrong.\n\n\nDo you have another subscription to the same stream? if you're not polling this subscription or it isn't making progress then you might get back pressured.\n\n\nIf you receive a back pressure message at your publisher then you need to retry that operation. Are you repeatedly retrying the offer? Does it eventually publish a message or is it just blocked?. Happy to be of help.. The github Aeron build may be a snapshot and may have snapshot dependencies, that is because its under frequent development and improvement.\n\n\nIf you want a stable version of Aeron to use in your application then you should use the latest released version from maven central.\nIf you want to contribute to aeron then you may need to install the snapshot version of Agrona from github as well.. +1 - mentioned this to @mjpt777 the other day.\nI think its worth thinking about whether to mark things as internal that have to be public, or to mark things as exported and declare anything else internal.. Come to think of it, There is a pattern that I've used for this. Suppose you've got a class called Foo that has a method call bar() that you want to invoke from another package within your project, but not outside. You can make bar() package scoped, then create public class FooAccessor.\npublic class FooAccessor\n{\n  public void bar(Foo foo)\n  {\n    foo.bar();\n  }\n}\nYou need to make sure that you can only create FooAccessor from within your project - for example by taking a class literal of a package scoped class from your project and validating its name + package id in FooAccessor's constructor or by getting FooAccessor to register a reference to its constructor somewhere internal to your project but keeping a private constructor. It's a bit gnarly, but it does enable you to fake \"friend\" classes.. Responding specifically to the data loss issue - I think the problem is that you aren't retrying when something gets BACK_PRESSURED. I would have another look at the example code in the Aeron project that does this. If you get back pressured then the fragment that you've offered won't be sent.. As Martin said in his reply you need to retry when you get an admin action as well.. Also the condition on your retry loop is wrong - you're looping while the result == 0, not == BACK_PRESSURED and == ADMIN_ACTION.. Thanks.. It might have been that the problem you were encountering with a two core processor is that a LowLatencyMediaDriver will be burning three cores hot in a spin-loop. This model of operation gives great throughput and latency but required that you have at least 3 cores dedicated to processing the media driver threads as well as cores for whatever else your machine is running on.\nYou can more generally spot this kind of problem from looking at the context switching rates on your machine. If you're context switching like there's no tomorrow and burning all your cores to the max then your probably don't have enough cores to run in low latency mode.. How do you mean \"close and start recording a new data file\"? CRCs let you detect whether a file has been corrupted by some underlying mechanism such as a faulty SSD, Hard Disk or Controller.. Hi,\nHave you got the media driver running in the background? If not then you need to start it, or get one of the samples to start an embedded media driver by passing -Daeron.sample.embeddedMediaDriver=true.\nHope that helps.. No problem.\nI think it depends how you want to use Aeron. Media Driver instances sit on a box an send/receive UDP packets over the network, whilst ensuring that the mapped files and cleaned and rotated. If you've got multiple publishers or subscribers sitting in different processes on the same box then probably your best bet is to run separate a instance of the media driver and have it manage all the processes.\nIf you're going to just have a single process on a machine with the publishers and subscribers inside then its probably easiest to just keep it embedded within the process. Just my opinion of course ;). Happy to help. Looks like you've found the examples and that this query is resolved so I'll close the issue.. I appreciate that its not the same thing, but there is a gitter chat room for asking ad-hoc questions - gitter.im/real-logic/Aeron.. ",
    "mjpt777": "Fixed by commit https://github.com/real-logic/Aeron/commit/4e0bb6d78fa18e9540393f0ef2169f7503ef2fe8#diff-d41d8cd98f00b204e9800998ecf8427e\n. I've fixed a number of bugs in the Signal handler on top of @tmontgomery fixes so should be more stable now.\n. NPE was due to lambdas having no associated file for the class they represent.\n. It think it necessary to go further and protect the same user loading the driver twice. This could be achieved with a lock file.\n. I like the data being left after a crash so it can help you diagnose.\n. It would be possible to design the media driver to support restart but that would be a fair bit of work. For now best to assume it would not restart and pick up residual data. We should work out how to make the driver very solid. Does not matter so much if clients die.\n. If the driver is embedded would it not makes sense to name the file after the PID?\n. The PID approach is much easier for debugging a running system.\n. @rlankenau http://stackoverflow.com/questions/35842/how-can-a-java-program-get-its-own-process-id\n. As  general principle we should rank usability higher than outright flexibility. Engineers often don't consider the needs of the many users to their detriment.\n. +1\n. Currently in progress.. The statement is that the data is copy-free in the processing the log buffers. This is very unusual in a message transport.\nHowever it is funny that you mention because this week I'm working on an additional API that will allow the claiming of a range in the log buffer so it can be written directly into. This will not really matter when going off box but should make a difference in the IPC case on box. The API will look something like:\n```\nfinal LogClaim logClaim = new LogClaim(); // Can be stored for future use\nif (publication.claim(messageLength, logClaim))\n{\n    final MutableDirectBuffer buffer = logClaim.buffer();\n    final int offset = logClaim.offset();\n// insert data directly into the buffer or wrap with a flyweight\n\nlogClaim.publish();\n\n}\n```\n. I've pushed a commit that offers this functionality. https://github.com/real-logic/Aeron/commit/8ed70c4365a4697049075b41912565b58c07db9f\nWorks like the following:\n```\nfinal BufferClaim bufferClaim = new BufferClaim(); // Can be stored for future use\nif (publication.tryClaim(messageLength, bufferClaim))\n{\n    final MutableDirectBuffer buffer = bufferClaim .buffer();\n    final int offset = bufferClaim .offset();\n// insert data directly into the buffer or wrap with a flyweight\n\nbufferClaim .commit();\n\n}\n``\n. It is a good point and something people have to be carefully about. The issue with such a lambda is that is it likely to be capturing and thus will allocate and have an impact on latency.\n. In your examplebb` will be captured and thus allocation will take place.\n. OK I see what you are doing. This can work for a single argument which might be sufficient for many cases. Could be an option  consider.\n. This is even more advanced that the Disruptor as you get direct access to the underlying buffer. Definitely an advanced feature only.\n. Many of the data structures have been migrated out to the Agrona project. Over time I more to migrate.\nhttps://github.com/real-logic/Agrona\n. Most of the data structures have unit tests which show usage. If I find the time I may add some more documentation about the internals. For now we have more to focus on with our road map.\nAs always, feel free to contribute and add documentation yourself so others can benefit.\n. Can you prove a file plus line reference and what is the issue that causes?\n. I see the code you mean. This pattern avoids a load of references via the this indirection in performance critical code.\n. Currently no plans.\n. Multi user environments are particularly useful in CI. One of the main reasons I added the ThreadingMode is for easing resource contention in such environments.\nI'd like to think about this some more. It is always something we can experiment with.\n. I'm not sure it is possible to query the max in a platform independent manner. The code use to silently fail to set a larger buffer which I thought was worse than failing fast by throwing an exception if it failed.\nMaybe the tests should use a conservative value to avoid the failure?\n. I cannot recreate this on Ubuntu or Fedora so will close for now unless someone care recreate.\n. Yes we plan to publish to Maven Central in the not too distant future.\n. I think we can have a sweep of the current bugs and then look to doing a 0.1 release.\n. This will happen shortly when we release 0.1 beta.\n. For mapping to the object universe, SBE has been improved for tighter integration.\n. @RuedigerMoeller Objects directly mapping to messages is like objects directly mapping to database tables. There are fundamental differences which are best respected. I like to treat messages as first class and not pretend objects can be turned into messages by magic. To have clear separation of concerns a message should just contain the information that must be communicated and not be coupled to how it is transformed to and from object implementations. I get such bad feeling in my stomach when I see DTOs.\n. @RuedigerMoeller We can agree to differ :-)\nFor me objects fundamentally have state and behaviour and they tend to exist within a graph of dependencies. Messages on the other hand should just be data represented in a cross language and cross platform manner. Messages should also be individually versioned, and belong to a interaction protocol that is versioned in itself.\nReactive streams is about reacting to events which are encapsulated in messages. Not about reacting to objects. We may implement in actual classes for an language but the semantics are different. I find that when the differences are respected then a lot of good properties flow. I'd put my messages in a shared context from a DDD perspective.\nI'm not arguing against useful abstractions. I just think messages are a better abstraction for communication than objects.\n. The system property must be set on JVM load otherwise the existing value is cached. Same issue happens on Windows.\n. The first subscriber gets the initial term window. Once the window is full then back pressure is applied.\nHow exactly this behaviour should work I have been mulling for sometime.\n. I've thought it is odd that a publisher can offer up until the publication term limit and have this delivered to the first subscriber but not subsequent subscribers. I'm coming round to thinking that a publication should be clamped by flow control until at least one subscriber connects.\nI think we need to consider flow control in a wider context when we introduce local IPC connected subscribers. They can be much faster consumers than remote consumers.\nI think the default should be to gate on all subscribers using the slowest for pace setting. This will be the least surprising for most users. We could then add strategies that allow slow consumers to be discarded but need to consider how those applications get notified that they have fallen behind and allow hooks for optional replay from a persistence service or restart at current position.\n. So every time you have a subscriber fail just outside the NAK window for fastest subscriber then you initiate recovery, or restart, for the subscriber that stumbled? \n. Yes you can have multiple publishers to the same channel and stream. However they will be a different session. The subscribers can register for notifications of when new connections occur when a new session connects for a given channel and stream.\n. When we change the offer to return the position, 0 can mean not yet connected, -1 is back pressure, and any positive value is the new position. Would that work?\n. C# client is on the backlog now but is of low priority. C/C++ will come first.\n. I can check on Windows 7 when I get home on Friday.\n. @maoxianfly Can you try using the gradlew wrapper as this is a later version? Just run ./gradlew in the project root directory.\n. I've built and successful run the tests on a Windows 7 machine.  I suspect this issue is to do with the wrong version of Gradle. @maoxianfly can you run the gradle wrapper script that comes with the repo?\n. The maxMessageLength is currently restricted to 1/8th the size of a term buffer. The term buffer size can be configured by setting the aeron.term.buffer.size system property.\nYour question did highlight a limit that maxMessageLength was capped to the lower of 1/8th the term buffer size or 2^16. The limit of 2^16 is no longer applicable so I removed it.\n. The LowLatencyMediaDriver configuration takes a busy spin approach to minimise latency. This is typical for a server in the trading domain. If you wish to conserve energy then experiment the threading mode and idle strategies. This can be seen in the best practices guide - Best Practices Guide.\n. Does your application receive all 1024 topics on each host? I think you are saying this is not the case but \"My current plan is to still have the 1024 topics in my application process\" suggests otherwise.\n. By batching this way you will introduce latency. Is such a small header really a limiting factor based on measurement?\nYou could batch as you suggest using the BufferClaim. However if one claim takes a long time before committing it will hold up all subsequent claims. It might be a better strategy to keep a thread local buffer that when full gets sent via the normal copying API. Copy cost is so minimal these days and keeps getting better.\nWhatever you do it is not worth batching greater than MTU size as the header is required for each MTU fragment.\n. One to consider is that when message plus header fits neatly into a cache line then you get great throughput and low latency due to not suffering any copy or false contention costs. You still take the hit to get the cache line and transfer it so the \"wasted\" space is often more helpful than harmful these days when you do not genuinely want to piggyback more data in the same cache line. Sometimes I've padded out messages to 64 byte alignment to see performance benefits.\n. In your case with batching it would not benefit. If you did not batch then it gets interesting.\nI've found that the bandwidth on the wire on 10GigE LANs is seldom an issue these days. More contention occurs at the end points. As always measure to see what works best for your use case.\n. The syscall overhead often dominates. For throughput try increasing the MTU size so more messages are batched across the syscall with -Daeron.mtu.length=16384 and adjust the other buffers appropriately. When we do the C++ port it will be interesting to play with sendmmsg() and recvmmsg(). Better still I'm looking forward to playing with Omni-Path next year.\n. The LogBuffer will always be clean due to flow control. The check is here in case the Publication was ever used without flow control. As this condition cannot happen in normal usage it is therefore wait-free.\n. What was happening was too subtle and related to the store barrier on the needs cleaning flag. I've tightened it up to help clarity and make a clear relationship to the activeTermId.\n. On looking back there are probably possibilities for it to be wrong if the compiler was very aggressive with register caching. Not likely but possible. Much happier with the logic now.\nIn the register cached case it would do the LOCK XADD on the tail and one of three things would happen. It is beyond the capacity and this just fails and the offer return false, which is the only possibility if about to be zero'ed. Or the zeroing has happened in which case it will insert into the cleaned buffer and this will not be lost but will be out of order. Or the buffer is back to being active and it is OK.\n. The great thing about having public review of concurrent algorithms is that we can shake out the bugs. I don't see how we can have much confidence in closed source concurrent products. Just the same issues as we have with security implementations.\n. I agree in general that circular dependencies can be troublesome. In this case it happens because the command objects have been pulled out into a sub-package for clarity. The relationships are valid and could only be broken by adding lots of interfaces that would increase complexity for no return.\nIf you know of a better way to semantically identify a group of classes in Java that are really part of a package I'd be interested to know about it.\n. You need to build and install the latest version of Agrona.\n. Are you connected to a network when running the tests? The multicast tests do not work without a network present.\n. Yes this is a possibility. With data being aligned and need to match exactly 8 bytes it is highly unlikely. The likelihood further reduces with each additional message having to match the exact pattern all over again. It also requires the receiver not being able to keep up with a very low volume stream of messages.\nThe broadcast data in Aeron is not critical so this can be considered a pragmatic solution. \nHaving said all that I may put in another solution that is totally safe and just a little less efficient. I'm aware of a few ways to do this.\nThe current approach never impacts the producer at all and that is why it was chosen. These sorts of pragmatic approaches are often employed in network protocols.\n. A simple fix is for the producer to write a counter of the total bytes it has written then delta this after the copy to ensure the read is in buffer range. This will cause one additional cache misses when a new message is read, and possibly another in burst scenarios.\n. Don't @tmontgomery ! You'll only annoy me...\n. All of these points are being considered. We plan to add the necessary APIs to Aeron so that services such as replication, persistence, and historical query/replay can built on top without impacting the performance of the core.\nBecause of the core design decisions to have all the log buffer data structure as effectively immutable within a constrained range, plus the ability to uniquely identify an exact position in a stream across time these things can fall out relatively easily. @tmontgomery and I had this direction in mind right form the outset.\nWatch this space as more will come in the not too distant future.\n. Closing due to no further issues reported with the new error handling.\n. Bug in the sample application. It should wait for the subscriber to complete before shutting down Aeron.\n. I can recreate this with the following code in the StreamingPublisher.\n```\n                ATOMIC_BUFFER.putLong(0, i);\n            final int len = ThreadLocalRandom.current().nextInt(SIZE_OF_LONG, ATOMIC_BUFFER.capacity());\n\n            while (!publication.offer(ATOMIC_BUFFER, 0, len))\n            {\n                OFFER_IDLE_STRATEGY.idle(0);\n            }\n\n```\n. @tmontgomery This does fix one class of bug but I can still make it happen with message lengths that are less than MTU size minus header.\n. Turned out to be an off-by-one error. Hate those!\n. Poor guy. I'll have to look at getting him some help... :-) Great spot.\n. Fixed in https://github.com/real-logic/Aeron/commit/a83b02880041d03315d37831defc233d3153a8cf\n. Nice spot on detail. Thanks!\n. Good idea. We should do that.\n. We could create a scanner for retransmission that sets the bit in the header before sending. We should keep the logic out of the fast path for normal transmission.\n. \"Blow up the application\" now that is a little harsh. Well if you don't handle your exceptions correctly ;-)\nSeriously though we do need to think what is the correct strategy. I put this in place so it is not forgotten about. A log entry feels too soft. Some sensible middle ground is required.\n. Currently it passes a DriverTimeoutException to the provided default error handler in the client context. The default error handler prints out an error and exits the client.\nYou can prove your own Aeron.Context.errorHandler(final Consumer<Throwable> handler) and decide what to do.\n. We probably could change the rebuilder to handle 0 length messages and make the hearbeat work correctly now that we are position based. I could have a look at doing this if it would be useful?\n. @tmontgomery I like to think that everything has a life cycle, or a state machine if you want to think of it another way. There needs to be an event that takes something into the alive state. In this case it springs into life when the connection is made, not on first data packet.\nAnother way to think of this is if I send one message and then not send another for a long time but the publisher is still active would you kill the stream? We currently do not. I think as long as the publisher is alive then the connection is alive.\nStream with no data is the same as a stream with no data in a long while to me. It is an attentive stream waiting to receive data along as the source is alive.\n. Also if we send a heartbeat data frame with a frame length of 0 it should be processed on the receiver side correctly. A position of 0 plus a length of 0 takes the position to 0 which will imply a heartbeat at start of stream. Any data packet that if it was applied takes the stream to the current position is considered a heartbeat without actually processing it. Having moved to position based makes this quite easy.\n. @tmontgomery do you know how we ended up sending a zero length datagram?\n. Thanks\n. Thanks\n. Thanks Mike.\n. Closing for now as C++ is not yet complete.\n. Obvious question is are you calling commit()?\nIt is possible the try is failing due to backpressure. If the network cannot keep up then it will return false to indicate back pressure.\nDefault Linux has very small send and receive socket buffer which can easily be overrun by Aeron when going fast. You need to size these appropriately.\n. It is also worth running AeronStat to see if the Sender is being back pressured by the Receiver.\n. Even on the same box with well sized buffers I see back pressure. This can be in the region of 50% of total offers. This is not bad. All it is saying is that the publication is not the bottleneck when going flat out. The publication path is faster than the subscription path.\n. Closing this because no more data has been provided and we cannot recreate and issue that is behaviour other than back pressure.\n. I'm seeing this after building in aeron-samples/build/libs/samples.jar\nIf I run gradlew clean it is cleaned.\nCan you provide more details? A clone of the latest repo is working fine for me.\n. Is built now as part of standard build.\n. What was the startup error you are seeing? I'm not seeing that.\nThe two cache lines was for the trailer that contains the counters. In the last Agrona I've reduced this to one cache line but that is not pushed to Maven Central yet.\n. No worries :-)\n. I have an open issue that the driver needs to use a lock file incase two\ndrivers use the same directory.\n. Can you bisect the history and find the point it was introduced?\n. Let me know if I'm the one that needs to mop the rain!\n. I found one potential issue that could explain a difference and committed a change.\n. Nice one!\n. That looks like you are using an old version of Aeron. We have not used the file format for a few months.\n. I think you are right. The labels file should be significantly larger than the counters file by about 16X. \n@tmontgomery can you have a look?\n. Within the scope of the callback you should be able to read the data any number of times. The buffer is not valid beyond the callback. This looks like a bug.\n. This looks like an invalid range has been requested for retransmission on a NAK. It is likely to be related to whatever has gone wrong when the completion code got migrated and raised issue #87.\n. I cannot recreate in recent versions. Closing due to no further feedback that it is still occurring.\n. Thanks! Good spot.\n. It feels like if we include RTT into the window calculation then we could avoid this type of situation. Probably useful to do longer term anyway. Window could be reduced until RTT is established.\n. Thanks for the PR. I had to fix compilation and checkstyle errors. I guess your fork has not by kept up to date.\nDatagramChannel.write(ByteBuffer) is giving a ~0.3us reduction in latency compared to DatagramChannel.send(ByteBuffer, InetSocketAddress) so this could be a worthy addition to shaving a little further latency off Aeron. Results are from testing with Java 1.8.0_45 on Linux 3.19 kernel and 2.2 Ghz Ivy Bridge processor.\n. Can you create a test case?\n. Without more information we cannot recreate.\n. The counter should have been zero'ed on allocation not on free. Does the follow fix work for you?\nhttps://github.com/real-logic/Agrona/commit/160eca7c12479e8cdf8bc73b82635d6e4def108d\n. Can you change the ThwackerTool to catch this exception and get it to report the length it was trying to offer at the time?\n. Would one of you guys like to have a go at diagnosing this? @tmontgomery and I are busy getting ready for Chicago in just over a weeks time.\n. Do you have the latest version of Aeron?There was a bug with the alignment in the CnC file that I fix earlier this week.\n. Out of curiosity is this a 32-bit JVM?\n. 32-bit should work OK. Just not something I test on much these days.\nI assume the fix I committed works for you now?\n. @pdct-futurewei Are you running with the latest build?\n. @pdct-futurewei  Can you paste a stack trace for where you are seeing it?\n. How does that work now?\n. Better?\n. That should be those ones fixed.\n. Hopefully that is most of them now. I don't have a 32-bit machine to cleanly test on.\n. This looks like a race in creating the conductor thread shutting it down again. I'll need to update Agrona to protect against this.\n. Fixed by https://github.com/real-logic/Agrona/commit/a3affdac9b45ed4e8125770cf7556272adbaedf8\n. Nice spot Eric! Thanks.\n. Looks good. With a few minor corrections it is good to merge.\n. I've also seen it on the pongTest on a constrained ultrabook.\n. Correct.\n. I wonder is it related to https://github.com/real-logic/Aeron/issues/112\n. The signally mechanism in the client has been rewritten after we noticed a number of race conditions that can be explain this. I'll close for now and see if it reoccurs.\n. It does have a performance impact. I'm closing for now unless you believe you cannot make progress without it?\n. Powermock can be used as an alternative which can mock final methods.\n. Can you prove a simple test case?\n. I've added a system test for this and it passes without an access violation. \nhttps://github.com/real-logic/Aeron/blob/master/aeron-system-tests/src/test/java/uk/co/real_logic/aeron/MultiSubscriberTest.java\nIs it possible your subscription has been closed and you are using it after that?\n. I've added checks to ensure publications and subscriptions are open when being used. Can you check if this catches the issue?\n. I believe this now should be fixed. Can you confirm?\n. @strangelydim I agree and the \"edge conditions\" I referred to are not common but as you point out are possible.\nMy vote is to do the volatile check but allow it to be be something that can be turned on or off via a system property.\n. Additionally, we can provide the option to no unmap the buffers and leave them to GC. This way it is fast and safe but is a strategy that could not be used in tests or a server that never runs GC.\n. Closing due to no further information.\n. Subscriptions are single threaded and each subscriber should have their own subscription which they are responsible for closing. This is different from publications that are shared and ref counted.\n. The subscriptions are independent and should not be shared. I cannot recreate. Can you provide more details?\n. Signal is no longer used.\n. I'm looking are removing the orginalUriString from the UdpChannel and always just use the canonical form as a key.\n. Nice spot!\n. @amit2103 Client acknowledgement is not something we have been considering. I tend to address this by having a application level protocol on top of messaging. Putting it into the messaging leads to designs that don't cope well with failure and retry scenarios. JMS has a lot of bad things to answer for ;-)\n. I case you have not noticed it is possible to track position on any stream. Offers to a publication return the position of the stream after successful offer. Callbacks on a subscription also have the position in the header that has been consumed to. These figures are also available via AeronStat. We designed the systems so that stream progress is observable. So it would be possible to track consumption out of band.\n. Did you get a stack dump of the media driver to see what the threads were doing? You can do this with jstack.\n. Thanks, the stack trace was very useful. I was able to recreate this and have pushed a changed to Agrona that fixes an issue with the ManyToOneRingBuffer.\nWhen we required a padding record that was exactly header length then the length field was set to zero which blocked the driver conductor forever. The length field now includes the header length. As an added bonus I changed the algorithm to not block on the consumer size if the producer takes an interrupt part why through writing a record which should make the driver conductor more responsive.\n. Todd,\nThis looks like the consumer of the event log is not keeping up and is\nblocking the consumer.\nI was thinking that the event log should be a broadcast to avoid such\nissues. What do you think?\nMartin...\nOn 1 June 2015 at 15:41, Vinay Singh notifications@github.com wrote:\n\nI tried to retest the fix this morning and ran into similar issue. Looks\nlike Media Driver (Producer side) is stuck and java process is running at\n99.8 % cpu\nvsingh@cooper SlowAeron >jstack 15265\n2015-06-01 09:35:55\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode):\n\"Attach Listener\" #12 https://github.com/real-logic/Aeron/issues/12\ndaemon prio=9 os_prio=0 tid=0x00007f3268001000 nid=0x3c15 waiting on\ncondition [0x0000000000000000]\njava.lang.Thread.State: RUNNABLE\n\"driver-conductor\" #11 https://github.com/real-logic/Aeron/issues/11\nprio=5 os_prio=0 tid=0x00007f32901c8000 nid=0x3bad runnable\n[0x00007f3294314000]\njava.lang.Thread.State: RUNNABLE\nat java.lang.Thread.yield(Native Method)\nat\nuk.co.real_logic.aeron.common.event.EventLogger.logException(EventLogger.java:186)\nat\nuk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:449)\nat\nuk.co.real_logic.aeron.driver.DriverConductor$$Lambda$34/764308918.onMessage(Unknown\nSource)\nat\nuk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:159)\nat\nuk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:117)\nat\nuk.co.real_logic.aeron.driver.DriverConductor.doWork(DriverConductor.java:243)\nat uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:93)\nat java.lang.Thread.run(Thread.java:745)\n\"receiver\" #10 https://github.com/real-logic/Aeron/issues/10 prio=5\nos_prio=0 tid=0x00007f32901c6000 nid=0x3bac waiting on condition\n[0x00007f3294415000]\njava.lang.Thread.State: TIMED_WAITING (parking)\nat sun.misc.Unsafe.park(Native Method)\nat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)\nat\nuk.co.real_logic.agrona.concurrent.BackoffIdleStrategy.idle(BackoffIdleStrategy.java:103)\nat uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:94)\nat java.lang.Thread.run(Thread.java:745)\n\"sender\" #9 https://github.com/real-logic/Aeron/issues/9 prio=5\nos_prio=0 tid=0x00007f32901c4800 nid=0x3bab waiting on condition\n[0x00007f3294516000]\njava.lang.Thread.State: TIMED_WAITING (parking)\nat sun.misc.Unsafe.park(Native Method)\nat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)\nat\nuk.co.real_logic.agrona.concurrent.BackoffIdleStrategy.idle(BackoffIdleStrategy.java:103)\nat uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:94)\nat java.lang.Thread.run(Thread.java:745)\n\"Service Thread\" #7 https://github.com/real-logic/Aeron/issues/7 daemon\nprio=9 os_prio=0 tid=0x00007f32900a7000 nid=0x3ba9 runnable\n[0x0000000000000000]\njava.lang.Thread.State: RUNNABLE\n\"C1 CompilerThread1\" #6 https://github.com/real-logic/Aeron/issues/6\ndaemon prio=9 os_prio=0 tid=0x00007f32900a3800 nid=0x3ba8 waiting on\ncondition [0x0000000000000000]\njava.lang.Thread.State: RUNNABLE\n\"C2 CompilerThread0\" #5 https://github.com/real-logic/Aeron/issues/5\ndaemon prio=9 os_prio=0 tid=0x00007f32900a1800 nid=0x3ba7 waiting on\ncondition [0x0000000000000000]\njava.lang.Thread.State: RUNNABLE\n\"Signal Dispatcher\" #4 https://github.com/real-logic/Aeron/issues/4\ndaemon prio=9 os_prio=0 tid=0x00007f329009f800 nid=0x3ba6 runnable\n[0x0000000000000000]\njava.lang.Thread.State: RUNNABLE\n\"Finalizer\" #3 https://github.com/real-logic/Aeron/issues/3 daemon\nprio=8 os_prio=0 tid=0x00007f3290072000 nid=0x3ba5 in Object.wait()\n[0x00007f3295344000]\njava.lang.Thread.State: WAITING (on object monitor)\nat java.lang.Object.wait(Native Method)\n- waiting on <0x00000000ec70f438> (a java.lang.ref.ReferenceQueue$Lock)\n  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:142)\n- locked <0x00000000ec70f438> (a java.lang.ref.ReferenceQueue$Lock)\n  at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:158)\n  at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\"Reference Handler\" #2 https://github.com/real-logic/Aeron/issues/2\ndaemon prio=10 os_prio=0 tid=0x00007f329006d800 nid=0x3ba4 in Object.wait()\n[0x00007f3295445000]\njava.lang.Thread.State: WAITING (on object monitor)\nat java.lang.Object.wait(Native Method)\n- waiting on <0x00000000ec70f5f0> (a java.lang.ref.Reference$Lock)\n  at java.lang.Object.wait(Object.java:502)\n  at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:157)\n- locked <0x00000000ec70f5f0> (a java.lang.ref.Reference$Lock)\n\"main\" #1 https://github.com/real-logic/Aeron/issues/1 prio=5 os_prio=0\ntid=0x00007f3290009000 nid=0x3ba2 waiting on condition [0x00007f32977a4000]\njava.lang.Thread.State: WAITING (parking)\nat sun.misc.Unsafe.park(Native Method)\nat java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)\nat\nuk.co.real_logic.agrona.concurrent.SigIntBarrier.await(SigIntBarrier.java:53)\nat uk.co.real_logic.aeron.driver.MediaDriver.main(MediaDriver.java:84)\n\"VM Thread\" os_prio=0 tid=0x00007f3290068800 nid=0x3ba3 runnable\n\"VM Periodic Task Thread\" os_prio=0 tid=0x00007f32900b4000 nid=0x3baa\nwaiting on condition\nJNI global references: 286\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/140#issuecomment-107536051.\n. Aeron is aiming to be the scalpel, rather than the multitool, of messaging that focuses on being a pure streaming message transport. Other services may in time be built on top of it but should never pollute or encumber the core.\n\nCompared to other products you will have to judge for yourself and if it meets your needs. From my perspective the focus of Aeron is simplicity and outright performance.\n. @RichardWarburton Those points make very good sense to me. If we go that way we should add an IPC constant to the client library that documents the usage.\n. It is in the current release but we would not recommend using it until the next release we put out. I've found a couple of bugs in the current release with it plus it needs optimising. \nIt should be good to go within a month.\n. I've updated the error messages to indicate which properties should be changed in each case. \nWith regard to how to set OS buffer sizes, I agree with @rolandyoung that doing this in an OS independent manner is not really possible. A basic level of networking configuration knowledge is required when working with UDP messaging system.\n. How to change the buffers sizes and startup properties are provided in the performance testing section on the Wiki.\nhttps://github.com/real-logic/Aeron/wiki/Performance-Testing\n. I think the old publication should not be reused once all refs to it are gone. I thought I handled that but most have missed something.\n. I'll have a look into it tomorrow.\n. Closing until someone is willing to sponsor the work.. Multi-destination now implemented.. Sure if you'd like to submit a PR we would welcome that. Are you able to put the effort in?\n. We don't have the time on our side to do it unless someone wanted to sponsor the development.\nThe various things you have asked for are significant development rather than simple features. They are not likely to happen unless someone has a reason to do them. What work we do we are willing to share but our time is limited.\n. I've done a partial change to cover the images. Client is a bit more messy.\n. Driver timeout is in MS; client timeout is in NS. This should be more consistent.\n. Client keepalive value is in two places. ClientConductor and Configuration on driver side. It feels like these should be on CommonContext like the driver timeout.\n. Feel free to continue and complete if you are in the area.\n. No worries. We welcome the feedback. \n. +1 Great idea!\n. I'm thinking that rather than return a boolean to indicate if the position should be advanced from a handler we could return an enum with semantics like the following:\nPosition.ADVANCE // Advance to next message but do not commit position yet\nPosition.REWIND // Stop further processing and rewind to position at the start of the message\nPosition.COMMIT // Commit the position as of the end of this message and continue processing\n. The first cut of this has been implemented and can be used by passing a ControlledFragmentHandler to the Subscription or Image controlledPoll method in the Java client.\n. Comparison to other messaging systems is beyond the scope of this repository. We would be happy helping out if someone built this benchmark elsewhere.\n. I cannot get the tests to fail on Windows 8.1 with both a dual core and a quad core machines. I'll try to mess with the timing in this test to see if I can trigger it.\n. I've pushed a potential fix. Does the test work now?\n. This is currently by design. Rather than have a loop in a loop, the caller should be looping to deal with back pressure anyway. Similar behaviour happens in other network stacks to keep code simple.\nWhy are you \"not interested\" in retrying? \n. We could look at returning a different status code for this case.\n. I could add a new return code of ADMIN_ACTION that means the operation should be applied.\n. This is fairly easy to do. I had the case before and simplified it to keep the surface area down.\n. @grzegorz-gierlach Can you try if that works for you?\n. Have you built and run the Java Media Driver?\n. We currently have the media driver in Java with clients in Java and C++. We may have a native media driver in the future if someone is willing to sponsor that.\nIf you follow the examples for Java and then swap a Java client for a C++ client it should work for you.\n. This part of the documentation refers to the packets on the network that might be lost or arrive out of order. Aeron will detect this and retransmit packets if necessary and assemble the messages in the order they where sent within streams before delivering them to the subscribers.\nAeron is \"reliable\" in a similar, but slightly better, way as TCP is reliable. While the stream is connected Aeron will ensure messages are deliver in order and only once.\n. I've put a clarification in the documentation.\n. Yes, if the messages can be routed across a network between them.\n. Sender cannot send until at least one receiver is present. Receivers can join at any time but they will only see messages from the point they join onward.\nBTW the Gitter group is a good place to ask general questions. https://gitter.im/real-logic/Aeron\n. AeronStat is a useful little tool to understand media driver state that can be found in the samples.\nIt can also be useful to turn on event logging. This can be enabled with the following property:\n-Daeron.event.log=all\nThe value can be all, prod, admin, or a comma separated list which can be found in EventConfiguration.\n. The broadcast buffer is a circular buffer that is reused so it does not roll.\n. Add a wiki page on how to inspect the error log.\n. As @RichardWarburton points out this would also be useful for storing a checksum such as a CRC when archiving a stream.\n. It can also fail to complete on a single run with a large enough run of sample messages, e.g. > 1 million.\n. Please run the full build with PRs. The PR failed checkstyle.\nAre you aware that the lambdas are capturing and will allocated on each call to the methods?\n. Let me check why the checkstyle passed for you. I updated it recently. For example, we should have caught the curly bracket misalignment and 4 space indentation.\n. My bad. My IDE settings are not all reflected in checkstyle config.\n. Sorry for that :-/\n. You also uncovered a little bug in Checkstyle: https://github.com/checkstyle/checkstyle/issues/2818\n. Fixed in https://github.com/real-logic/Aeron/commit/c8f21e8d04a90cb1d891fcdab23c6be119dfa5bc\n. Yes this could be possible. There could be a Aeron.addPublication() that takes a termLength argument.\n. Would this be better as a method argument when adding the publication or as a uri param on the channel. \nThe method argument is more discoverable. Uri params allow for more flexibility in future usage.\n. Uri params also fits with the pattern established for multicast TTL. However it is stream specific and may be different by stream in the same channel.\n. What should be the behaviour in the following scenario?\nA publication is added and this sets up a channel. A term length is provided as a URI param and this is use for the first publication. Then two later publications are setup. One provides the same channel but with a different value for the term length as a URI param and the other provides no URI param. I suggest the second one that provides the URI param uses that one. What about the one without? Does it take one of the two previously supplied params?\n. Also what should happen if a publication is added in one process with a term length and another is added with the same channel and stream but with a different length? Should the second one error?\n. Note that when using IPC if the subscription is created first then the length must be set via a channel param on the subscription. The creator of the subscription or publication wins. Later adds take the settings of the creator.\n. The media-driver-admin.txt has the following suspicious line:\n[1836955.275960] CMD_OUT_ON_UNAVAILABLE_IMAGE [73/73]: \ufffd\u0673z\ufffd\ufffd\u0006 W   aeron:udp?group=239.193.0.1:10000|interface=1 -1523337006 [7653]\n. That media-driver-admin.txt file also has a lot of other unprintable characters. Does the original file have this issue or is a GitHub posting thing?\n. I've pushed a change the deals with the corrupted log. @mikeb01 can you try again?\n. Is this with the event logger fixes?\n. @mikeb01 Can you retest with master?\n. I think this PR makes the code less clear. I do not believe it should be merged.\n. Some for these PRs have failed checkstyle on the project. Please run the full build before submitting.\n. I don't agree as this makes lambda expression more difficult to spot in the code.\n. This usage is deliberate for purpose of performance testing to ensure a pause does not occur during a run. \n. What version of Aeron? Platform including JDK and OS?\n. Was this the first exception in the log for that run?\n. Happy to close. For reference you can close an issue yourself. Thanks.\n. Are you able to write a simple Java program that binds to the appropriate sockets to see if your machines and network allows it?\n. Is this still an issue?\n. Yes this can be possible. For messages over a few MB in size you will need to split it into chunks and then send a stream of chunks.\n. The most efficient way to do this will be to set the Aeron MTU to be 16KB or 32KB. Use the Publication.tryClaim() to copy in the MTU size minus a 24 byte header, this will avoid a double copy. Then it is a case of setting the SO_SNDBUF and SO_RCVBUF to account for the bytes in flight.\n. With UDP the datagram can be larger than the Ethernet MTU. UDP will fragment the datagram and reassemble it again. This is done in the kernel and saves on system calls. If one fragment is lost then the whole datagram must be retransmitted but this does not tend to happen often on local networks that are not congested. The main cause of loss is incorrectly sized socket buffers. Aeron will flow control and so loss is not common with properly sized socket buffers.\n. No immediate plans. It is in discussion and might happen towards the end of the year.. Thanks\n. A possible solution would be to provide the ability to unblock an Image in a similar way to how Publications are unblocked when publishers die. That is, after a timeout, loss could be patched rather than NAK'ed. We could consider making the loss handling strategy pluggable so that such a strategy could be employed.\n. @MKSoftechnician Aeron does wait before NAKing to avoid the problem you are describing. You can see this in the LossDetector class.\n. I'm closing this as a question.\n. The loops are written this way to help them benefit from bound check elimination on the arrays.\n. We should do this with a global config option that can have channel specific overrides. \n. Hi @chrisjstevo Can you move this to another issue so we can track and discuss it separately? \n. Sorry @chrisjstevo I misread. I thought you wanted to change PUBLICATION_UNBLOCK_TIMEOUT_PROP_NAME. Duh!\n. Aeron depends on Agrona. We have some changes in both at present. You need to build Agrona locally first. If you run the standard gradlew in each they will install into local Maven repository cache.\nhttps://github.com/real-logic/Agrona\n. If a message is not fragmented then the Begin and End flags will both be set. All fragments have a term offset and length so we can determine exact position in a stream and thus can be reassembled in order.\nFor fragments between the begin and end then these flags are not set. The offset within the term is all that is required. Streams are reassembled purely on position via offset. The begin and end flags allow for demarking messages within the reassembled streams.\n. One PublicationImage is a rebult image of a NetworkPublication containing many messages as a stream of rotating term buffers. \nThe best way to understand is to read the code for full detail.\n. Thanks!\n. Can you provide more details of what you are doing and what failures you are seeing?\n. @zhao141 I don't quite understand what you are asking. Can you provide an example?\n. If you want to encode and decode messages with Aeron then SBE integrates well and is very efficient. \nhttps://github.com/real-logic/simple-binary-encoding\n. That is correct. Aeron has not be tested on Android. We only support Java 8 and C++ clients at present.\n. This is not currently supported nor do we have plans for such.\nWhat would be the usecase?\n. There would also be issues with this like shared state. The control is used for things like status update and NAKs. One driver would not know what is the state of another driver.\n. Aeron is probably not the right solution for you then. It is not designed for such usage.\n. We have plans to produce a native media driver and then add ef_vi support for Solarflare.. Once the C based media driver is complete we will be doing some work on this.  Access to environments with Solareflare NICs and high end switches would be appreciated for testing.. This could be part of the duty cycle in the conductor so it is continuously monitored.\n. I'll see if I can get round to adding this before the next release.\n. @lbradstreet Can you check if this meets your needs?\n. It does not fail for me locally but I think there is a problem in the test. It should be checking end of buffer condition and not end of buffer - 1. I've pushed a change. @tmontgomery Can you confirm this makes sense?\n. The tests for Java run in with bounds checking on. We should change the C++ to do the same.\n. It is not valid as it is trying to read a 4 byte word at TERM_LENGTH - 1 which overruns by 3 bytes.\n. The test did not consider alignment which would have meant the situation could not have existed.\n. It is being developed for a specific use case. This may prove to be sufficiently general. Time will tell. Sorry but we cannot provide concrete information at this stage.\n. The counter id can be returned in the control protocol so the client can directly poll it when a Subscription or Publication is added.\n. Hi @buybackoff. Interesting timing. There is an official port of the Aeron client in .NET that will be released in the very near future. This will be a full client. Might be interesting to see if it works for your needs.\n. Weeks, possibly a month at the outside.\n. The main stand out from aeron:ipc is that these transparent IPC streams would be fragmented for MTU whereas normal IPC streams are not fragmented as MTU is effectively maximum message size.\nI'm not sure on the name \"transparent\". I know it is used for the likes of \"Transparent Huge Pages\" in Linux for example but I prefer the something more like \"bypass\", whereby these streams bypass the network stack when local.\n. In what cases would this be needed if we have #150 ?\n. I guess having spy then means it can be programatically used whether the bypass is enabled or not. This is probably the desired behaviour for archiving/replicating.\n. Could you provide a worked example of how the API would function?\n. We could add an option to add a number of optional counters per channel/stream so this could be enabled when needed and not crowd out the counters when not. Not sure if this is best but worth considering.\n. A more holistic approach to detecting loss is now available with the LossReport.\nhttps://github.com/real-logic/Aeron/wiki/Monitoring-and-Debugging#loss-reporting. There are lots of examples of this in the archive and cluster code with publishers on the producer side and adapters on the consumer side.\nhttps://github.com/real-logic/aeron/blob/master/aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlPublisher.java\nhttps://github.com/real-logic/aeron/blob/master/aeron-cluster/src/main/java/io/aeron/cluster/service/ServiceControlAdapter.java\n. Added with this commit. https://github.com/real-logic/Aeron/commit/6dd3540eba7ed1e4343590483543036ade7236b3. We do not have plans to support TCP for Aeron streams. TCP in many ways goes against the spirit of Aeron. I'm not sure how we gave the impression that was going to be supported? Is there some source we need to correct?\nFor sending between data centres then a gateway and tunnelling solution would be best, if UDP cannot be routed. We have discussed building such a gateway with some clients that would tunnel Aeron streams down a TCP connection. So far these have only been discussions. If you would be interested in sponsoring such a feature then we can discuss it. The buffering and connect requirements are different for such situations compared to UDP on a LAN.\n. It looks like the log is in its initial term and has been half filled by the position counters. However the termOffset suggests the tail has not been incremented which is just wrong. I'd like a closer look at that log buffer. Can you send it?\n. @mikeb01 Are the client subscribers in the same process or different processes?\n. @tmontgomery You are right. I forgot that Images do not have the tail updated. They don't need it.\n+1 I think it would be useful to have a rcv-pos counter that is the rebuild position for monitoring.\n. I think it would be useful to record the joining position in the log buffer for images for later tracking.\n. @mikeb01 Do you have a screen grab of the system counters from this time? I see you have some from the positions.\n. Thanks Mike. As an observation that machine is seeing a lot of loss. It might be worth increasing the size of the socket buffers to see if it comes more under control by compensating for the congestion once this gets resolved.\n. @tmontgomery Does that ratio of NAKs to retransmits look fishy to you?\n. @mikeb01 The beginning of the term being zeros is very odd. If it happens again can you grab another image of the publication or the source publication to see if they are the same?\n. @mikeb01 Can you post the config options you have applied?\n. I think it makes sense to have the properties stored in the C'n'C file as a section that can be read with a tool. They are not really counters.\n. I have a suspicion that something might be corrupting the log. I've pushed a new feature that allows images to be mapped read-only which should catch this. It is now the default and can be changed from the client context.\n. Yes\n. @mikeb01 I tracked CPU usage to a busy spinning setup thread when configuring a large number of streams. It can take a number of milliseconds to setup each new publication or subscription in creating log buffers and sockets. The client thread now sleeps awaiting the operation to finish and thus frees the CPU resource to carry out that task when in a contended environment such as CI.\n. @mikeb01 Also given you are using the shared threading mode in the driver for CI then the move to incremental cleaning should make things more responsive.\n. If the client cannot keep up with the broadcast buffer it gets an IllegalStateException. I assume this has not been observed in the client?\n. @mikeb01 The exception will propagate up the call stack if it occurs during operation to add or release a subscription/publication, or to the error handler if it occurs during the duty cycle of the client conductor.\n. The fact that a change in image liveness timeout makes me think it is worth investigating the state machine for image cleanup for when many subscriptions exist.\n. Thanks @mikeb01 all the feedback has been really helpful.\n. Yes this was a genuine bug. The isValid test should have allowed for a full header at the end of the buffer. Thanks for providing such a good bug report!\n. You need to build Agrona locally as the current version of Aeron depends on the SNAPSHOT build of Agrona.\n. @philgentric I don't use Eclipse, I use IntelliJ IDEA. Eclipse complains that things like Unsafe and Signal are not supported APIs. This is true by they are necessary for an application like Aeron. Come Java 9 we should be getting alternatives to Signal and Unsafe.\n. @mikeb01 Can you pick this up as a Eclipse user?\n. Thanks\n. Also the key contains the channel string. Simply query for channel typeId and the key you require.\n. We should make the creation of the CnC file atomic. That is, create it under another name then rename it when sized and initialised.\n. What should the behaviour be if a client starts and the driver has not yet started? Should it fail immediately or should it retry for a period?\n. It throws an IllegalStateException when the version is not correct. You get an IOException if the file is not there.\nAn approach we could take is to write the version field last with an ordered write in the driver. If the file is there then the client will spin with a timeout on this field. This way the file does not need renamed.\n. @mikeb01 You should be able to start up the client and driver in whatever order now.\n. @mikeb01 It will timeout using the normal driver timeout.\n. Java is the primary platform for our client who sponsored this work. Sure a native driver could be even higher performance but it is nice to have a Java implementation that is lower and more predictable latency than the native competitors which have expensive licences :-)\nAlso Java is a faster to develop in. In time someone may be willing to sponsor a native driver. We'd be very happy to take that work on.\n. Publication.tryClaim() is restricted to a payload that cannot fragment. You could set a larger MTU if your network does not suffer from much loss. If you cannot do that then you will be better off with Publication.offer()\n. MTU is a configuration option. The current option is to set it for the whole driver.\nhttps://github.com/real-logic/Aeron/wiki/Configuration-Options\n. The timeouts are use to detect dead clients. If your application is experiencing such delays then you may want to better configure it for low-latency.  While you are improving your application and GC settings you can increase the timeouts.\nhttps://github.com/real-logic/Aeron/wiki/Configuration-Options\n. Sorry but there is not sufficient information here to diagnose the issue.  What errors are you seeing? Can you make a UDP connection without using Aeron? Are you sure you have the IP addresses correct? Do you have firewalls in the way?\n. Thanks. If you run AeronStat on each machine you will see the connections appear, or not, in the position counters.\nTo debug try the tools on the page below:\nhttps://github.com/real-logic/Aeron/wiki/Monitoring-and-Debugging\n. Note the first-machine has an error recorded. Use the ErrorStat program to find out what it is.\n. The question then is why is a bind failing to that address on your machine?\n. So do you know what to do now to close the issue?\n. That's it. :-)\nSorry I did not realise this is what you were doing earlier. Not using actual IP addresses or machine names threw me off.\n. The remove code does not use these fields though they are probably useful for debugging, e.g. if an exception occurs in the driver then the log entry will have the client id.\nI noticed the Java takes a different approach and can reuse a buffer with them already set. Give me a good opportunity to simplify things a little on the Java side as I'd not looked at it in a while.\nhttps://github.com/real-logic/Aeron/commit/f07738b2a6edacaf9b090e3dbeda24db2bae6313\n. Where does the responsibility for starting the thread or calling run() exist in this approach?\n. What do you mean by recovery? What state do you return to?\n. > Is there any reason why a media driver being restarted is so dramatic in Aeron? What problems could arise if you installed an error handler that caught the DriverTimeoutException and simply switched to 'recovery' mode?\nDetermining the exact state of a system under failure is tricky. There is no \"simply\" to it usually. You can handle this yourself and try to reconnect. We provide the basics if you use:\nhttps://github.com/real-logic/Aeron/blob/master/aeron-client/src/main/java/io/aeron/CommonContext.java#L374. The current version of Aeron offers delivery guarantees similar to TCP. Future versions may offer stronger delivery guarantees.\n. How about adding the thread factories to the context like you suggest and then pass them appropriately to startOnThread rather than hold a reference in the AgentRunner?\n. Thanks!\n. Thanks\n. The  Image log buffer is zero'ed out behind the slowest subscriber. Packets coming in are only inserted if they are within the receive window that has been advertised via the status messages. The receive window is ahead of the slowest subscriber.\n. Thanks for tracking this down. I believe you found an interesting bug. This would have been introduced by the incremental cleaning.\n. It is great seeing others help :-)\n. Do you have the log buffers for this?\n. Many Thanks!\n. @franz1981 I don't get your point on the producer side. The code looks fine to me. The direct buffer is referenced from within the atomicBuffer and it is used repeatedly within the test.\nWhat do you mean by \"no esplicit release of the unsafe buffer\"?\n. I've been able to recreate this once in an independent test. I have found a few issues in the referenced test. For example there are 9 bytes, and not 8, read in the printf output. Also System.exit is not a great way to shut down such a system. These issues should be independent.\n. @franz1981 I can make this test fail with the srcBuffer stored in a field of the class. See the commit https://github.com/real-logic/Aeron/commit/e22c98935ab94d892ffc3aad7bbb455d9442a9ee .\n. I've been playing with the test and if I create messages that align on rotation, i.e. 96 byte message length, then the bytes observed are the value in the term buffer from 3 terms previous. This suggests we have a problem with cleaning and observing the previous value within a message. Term length is 16MB.\nIssue at message number transition: 534670 -> 141455\noffset: 1329056\nlength: 96\nexpected bytes: 0 0 0 0 0 2 28 8f\nreceived bytes: 0 0 0 0 0 0 28 8f\nmessageValue on second read: 534671\nmessageValue on third read: 534671\n. For another data point, I cannot make the test fail on Windows 10.\n. Also it does not seem to manifest if the driver is run in SHARED or SHARED_NETWORK threading mode which might mean a resource starvation issue.\n. I don't think it is a partial write problem given this failure.\nThe difference between the expected message and the first read is exactly 3 terms worth of messages.\nThree terms:\n1024 * 1024 * 16 * 3  = 50,331,648\nMessage number difference:\n736981 - 343765 = 393216\n393216 * 128 = 50,331,648\nIssue at message number transition: 736980 -> 343765\noffset: 10447520\nlength: 96\nexpected bytes: 0 0 0 0 0 2 3e d5\nreceived bytes: 0 0 0 0 0 1 3e d5\nexpected bits: 10110011111011010101\nreceived bits:  1010011111011010101\nmessageValue on second read: 736981\nmessageValue on third read: 736981\n. Had another failure with exactly 3 terms difference again.\nIssue at message number transition: 787265 -> 394050\noffset: 106784\nlength: 96\nexpected bytes: 0 0 0 0 0 3 3 42\nreceived bytes: 0 0 0 0 0 1 3 42\nexpected bits: 11000000001101000010\nreceived bits: 1100000001101000010\nmessageValue on second read: 787266\nmessageValue on third read: 787266\n. If I rewrite the TermRebuilder code to do the following it still fails which further suggests it is the zeroing out of the memory which is the culprit or the getLong returning a stale value.\n``` java\n    public static void insert(final UnsafeBuffer termBuffer, final int termOffset, final UnsafeBuffer packet, final int length)\n    {\n        /*\n        final int firstFrameLength = packet.getInt(0, LITTLE_ENDIAN);\n        packet.putInt(0, 0);\n        UnsafeAccess.UNSAFE.storeFence();\n    termBuffer.putBytes(termOffset, packet, 0, length);\n    frameLengthOrdered(termBuffer, termOffset, firstFrameLength);\n    */\n\n    for (int i = 8; i < length; i += 8)\n    {\n        termBuffer.putLong(termOffset + i, packet.getLong(i));\n    }\n\n    termBuffer.putLongOrdered(termOffset, packet.getLong(0));\n}\n\n```\nIssue at message number transition: 560123 -> 166908\noffset: 4587040\nlength: 96\nexpected bytes: 0 0 0 0 0 2 8b fc\nreceived bytes: 0 0 0 0 0 0 8b fc\nexpected bits: 10001000101111111100\nreceived bits: 101000101111111100\nmessageValue on second read: 560124\nmessageValue on third read: 560124\n. @kdkavanagh Thanks for re-testing.\n. Why build with Gradle 3.0 and not that wrapper? Also can you give the spec for your machine in processors and memory?\n. I'll look into upgrading to Gradle 3.0 and see why it is taking so long. Windows seems to be much slower than Linux for this test anyway. I may need tweak by OS.\n. I've upgraded to Gradle 3.1 and have it passing on Ubuntu 16.04 and Windows 10.\n. The MediaDriver and AeronClients map the same file. Have they all unmapped it?\n. It should be a single mapping for the whole file. It is not that large.\n. I've looked at the code and the MediaDriver does unmap the file in the close() operation. The system tests need to unmap for this to work, and it does on windows.\nIs it possible create a standalone test case?\n. Yes it is nice that this can be turned on automatically but enabling RMI MXBeans is not a good option.\n. Would it be possible to have an example of resetting with an agent attachment rather than MXBeans?\nThe system can be tested by starting the driver with agent script and a test publisher and subscriber started after.\n. Thanks for the ideas. I'll close this one for now. We do not switch logging at runtime. I normally use BTrace for dynamically connecting to a running system when necessary.\n. None of our paying customers have requested this so it has not gotten any attention.  Some help with doing it would be welcome if it is generally useful.. I think it would be worth looking at the publication and image buffers if you still have them. Also what at the first 30 counters so we can see the aggregate picture?\n@tmontgomery I think it might be worth putting the Aeron version AeronStat output.\n. I don't see how the rcv-pos or sub-pos can get so far behind the rcv-hwm.  No flow control over or under runs so this would have been rejected. It is like something corrupted the counters. The image should have the latest contents.\n. We should probably filter that out as an overrun.\n. Looking at the code I think we should validate status messages for flow control to be in a valid range.\n. Support can be purchased for Aeron.. @nitsanw Added the issue label.. I found a potential race condition that can happen under CPU resource starvation that I improved with this commit.\nhttps://github.com/real-logic/Aeron/commit/ae359673fe7071c4fcd33c0bdb6299e5a43c80ef\nPrevious to this we could have released the publication and taken an interrupt or GC pause before lingering the resource. The resource should be lingered before calling the driver which I have done.\n. I've put an old laptop under a lot of pressure by having Chrome use a lot of memory and can then get the interservice timeout to occur.\n. Thanks. I've limited knowledge of OSGi. I understand this replaces the default manifest. What are the implications of this?\n. It is likely you run out of memory and the log file failed to allocate in the storage location. In Aeron 1.0.3 I added a check for sufficient storage for the allocation and a warning when it is running low. If retry with 1.0.4 then you may get a more informative error.\nHave you checked for sufficient storage for the number of streams you have connected? /dev/shm/ on Linux may need to be increased from the default settings for your usecase.\n. Yes you are correct. This code did not reflect the same semantics as the Java client. Thanks!. Doing something like this is difficult without a performance impact. On the offer side you are being back pressured and thus should do other work or sleep/yield until the backlog drains. If this is a regular problem then you have an imbalanced system and need to look at your design more holistically.\nThe poll side is more interesting. With the current design it is difficult to do this efficiently. However it would be possible to build a lightweight client for this type of implementation that follows the Aeron media protocol. This could be less resource intensive but with performance costs. Unless someone is willing to sponsor such an implementation then we are unlikely to do it.. Support can be purchased for Aeron.. What do you mean by \"2w/sec\"?\nThe latency of message transfer is effected by idle strategies and if they are backing off. With spinning strategies and sufficient CPU resource Aeron adds less than 1 microsecond to one way latency between machines.\nhttps://github.com/real-logic/Aeron/blob/master/aeron-samples/src/main/java/io/aeron/samples/LowLatencyMediaDriver.java. Just seen this fail again.\nio.aeron.FlowControlStrategiesTest > shouldSlowDownToSlowPreferredWithPreferredM\nulticastFlowControlStrategy FAILED\n    org.mockito.exceptions.verification.TooLittleActualInvocations:\n    fragmentHandler.onFragment(\n        <any org.agrona.DirectBuffer>,\n        <any integer>,\n        992,\n        <any io.aeron.logbuffer.Header>\n    );\n    Wanted 192 times:\n    -> at io.aeron.FlowControlStrategiesTest.shouldSlowDownToSlowPreferredWithPr\neferredMulticastFlowControlStrategy(FlowControlStrategiesTest.java:361)\n    But was 189 times:\n    -> at io.aeron.logbuffer.TermReader.read(TermReader.java:74)\n        at io.aeron.FlowControlStrategiesTest.shouldSlowDownToSlowPreferredWithP\nreferredMulticastFlowControlStrategy(FlowControlStrategiesTest.java:361)\nResults: FAILURE (39 tests, 38 successes, 1 failures, 0 skipped). I've not seen this exception in many builds since this https://github.com/real-logic/Aeron/commit/c9eb6126a3f21062368d58a54da7efe222baab2a commit.. It started to occur much more often again.. Some of the tests did not account for driver A getting behind.. It has been increased to 380 with this commit to Agrona.\nhttps://github.com/real-logic/Agrona/commit/645f4f3ad91039cf76b71fe5d27fb135739862a3. If a process crashes and it is external to the media driver then it will timeout and resources will be garbage collected. \nYou can call Subscription.close() in Java and it will reduce the reference count in the driver and if no remaining references exist then it will be reaped. The C++ client does similar with the RAII pattern.. The close behaviour is the same if the media driver is embedded or external. The liveness tracking is on the client process, not individual threads which would not be possible. Can you provided a worked example that illustrates the problem you are observing?. You cannot assume that a message will reach a subscriber just because it was successfully offered. At high rates you could fill the buffer before a timeout was even reached with the subscriber already well dead. If you want to be sure you need an application level protocol. TCP would have similar but slightly different issues.\nWe could look at clamping back the positionLimit to 0 if is over a timeout on getting status messages which would detect it a sooner at slow rates. However the fundamental issue still exists that you need an application level protocol to ensure liveness at that level.. Please provide a worked example. This is insufficient information to recreate.. This will be the result of no Subscribers being yet connected. Publishers need to have one or more Subscribers before they can publish.. Messages can only flow when both the publisher and subscriber are connected. This is normal behaviour and very similar to TCP. Aeron is not a messaging system that allows messages to be sent when a connection is not in place.. The script is there as a simple example. If we want to separate out the system params for Java from the real args then please submit a fix.. This can now be done by setting a JVM_OPTS environment variable. This gets added at the end of the jvm options in all the sample scripts for both bash and windows script files.\nbash\n    $ export JVM_OPTS=-Daeron.dir=path/to/aeron/directory\n    $ aeron-stat. The order of the list does not matter so can be removed by whatever manner is efficient.. The only reliable means to check for availability is with an application level heartbeat.  One second is a very low value considering all the possible pauses which can happen. If you want a timely close of a stream then send an application level message to indicate the end of the stream.\nThe Aeron timeouts are transport related. For example, consider a healthy driver at the source but the publishing thread has got blocked for some reason. The subscribers would be getting transport level heartbeats but no indication from the publisher. Concerns have to be applied at the appropriate level to be reliable. Vendors who promise otherwise are misleading or naive.. +1\nMaybe a signature more like\nSubscription.availableImageHandler(handler) to be more consistent with existing API in the context.\n. In addition to calling the registered handler in the context, we could iterate over the active subscriptions and call the handler of any that are registered when new image comes in which match the subscription.. We could provide an overload to addSubscription() that takes the handler to avoid the race and it can be a final field this way.. Agreed.. @tmontgomery it would be good to get a review of this.. Thanks. The driver will not map files larger than 1GB due to the design of the protocol and restrictions in Java.. I'd just focus on the warnings rather than changing behaviour. @tmontgomery what do you thing?. Are you checking the return code from the offer call? You cannot publish until a subscriber has connected.. The Java is synchronous in setting up the Publication object, C++ is asynchronous. Nether is connected until a subscriber has sent a status message.. If the offer returns a negative number then you try again. Keep trying until your first success. If you want to be explicit you could try something like the following:\n```java\n    while (!publication.isConnected())\n    {\n        Thread.sleep(1);\n    }\n// Then continue but keep checking the return code\n// to see if you are back pressured or need to try again.\n\n```. Thanks. This was discovered by another user a few weeks ago. It happens on a resource starved machine were a timeout occurs during shutdown. I put in a fix last week that will make the next release.. Sometime this week.. I'm going to close this so that a more specific issue can be raised if reproducible test case can be created. This seems like a bug in the application code.. This could be that you still have a link to the inode. Are all the Aeron clients closed too?. Fixed with https://github.com/real-logic/Aeron/commit/5532206ba7fa3fb5236dc97897f084b9b4d11bf0. Complete with this commit. https://github.com/real-logic/aeron/commit/ed3901f3c80e627833f3092b16bd413055c2756c. \ud83d\udc4d +1. Good idea.. What are throughput rate you are seeing? Can you provide a capture from AeronStat? How did you come up with the configuration options above as they are quite unusual? Please provide more information to the usage pattern.  Without more detail we cannot help.. The unknown are likely ADMIN_ACTION which is expected on log rotation. Simply offer again.\nThe short sends a a give away. This is likely due to incorrectly set buffer lengths. I asked before why you choose the buffer lengths in your config but you have not answered this.. Also note with performance testing that you need to give the Java driver time to warm up and JIT the code otherwise it is just running in the interpreter. A few short runs of 15000+ messages should do that.. The Java Media Driver needs to warm up. You need to look into how a Just In Time (JIT) compiler works. We are working on a C Media Driver but for now there is only Java.. @GenuineJyn If you are enjoying the benefits from using a free OSS project then maybe you should at least investing the time to understand what it is built on and maybe contribute back where possible.. @pwebbitrs  Was it the same test?. @pwebbitrs On looking at that stack trace it seems not to be related to this issue but another one. My guess would be you have a timeout out client that the driver is cleaning up but it still has logs. I've seen this happen with long GC pauses (> 5 sec) or when running the client in a debugger.. I'm closing this for now with the changes I've made to the archiver so that future issues should be more specific.. This has been increased to 380 in Aeron 1.2.4.. I don't understand the question. Can you try to rephrase it?. Have you considered using MDC with the control-mode being dynamic, i.e. don't set it? Then allow subscribers to dynamically connect. For try true one-to-many multicast is a much better solution.. Subscribers get added automatically when the control-mode is dynamic. The publisher will get a status message that sets up the connection if it goes to the control address.\nMulticast has pretty much the same performance as unicast. Sounds like you have some issue in your network setup. Multiple unicast streams will use much more bandwidth than a single multicast stream.. The Archiver is not complete yet. That is coming in a future release.. \ud83d\udc4d . The docs already say this. I'll expand that so hopefully it will be more clear.. I've tried to recreate this but with no luck. Seems like there might be a race condition in the start stop logic. 1.2.4 is more efficient for startup and shutdown. I'm made a change to Agrona that should avoid any potential race conditions in this area.. This is very helpful. There is a race on shutdown which I have addressed.. Can you check with Aeron 1.2.5 which has just been released?. This seems a very odd way to benchmark. Messaging is about flow and for flow the producer and consumer are both active at the same time for concurrent exchange. What you are describing will just test your memory controller as it gets paged out of the cache and back in again. There is no concurrency. Can you explain what you are trying to achieve with this test?. The flow control you are experiencing is effectively just a limit on how much buffer you are using. It is not an active thing whereby the producer(s) is being kept within a window of space ahead of the consumer(s).. Also are you taking a time measurement in each fragment handler callback? If so, the timing cost is much greater than poll cost per fragment.. For reference two threads exchanging memory via the L3 cache concurrently have significantly more bandwidth available than when the writes and reads are separated in time and the data is written out to main memory when evicted from the cache. This may not be the issue you are seeing but it is very relevant for concurrent exchange. It is the reason why modern network cards use DDIO.. Can you post your whole benchmark in a gist so we can have a better understanding?. Note that with a 32-core machine you will have multiple sockets. It could be that your data is not just going to memory, it could be going to memory on a remote socket and needs to cross the QPI link. If your machine is old it might not have pre-fetch support across the QPI link and this will really hurt throughput. Without the full benchmark it is difficult to tell what is happening.. If you run your test with Linux \"perf record\" it should give a good idea to where the time is spent.. Try removing the timer use in your fragment handler and see how it performs. :-). Then either profile or post the whole benchmark. We are just guessing based on partial information otherwise.. Can you try removing the code from your fragment handler so that it is just a counter tracking calls? This way you are isolating the Aeron usage and not what's in your handler that we cannot see.. To address QPI and NUMA issues you could try running with numactl -m 1 -N 1 <app> to see if that is involved.. If we don't have more detail about what you are doing in the callback handler or a profile then we cannot help. . The archiver is not yet released. Why are you using it?. Try the archive now. I'm going to focus on this in more detail beginning next week.. SBE does support C++.. What was the exception in the error log?\nhttps://github.com/real-logic/Aeron/wiki/Monitoring-and-Debugging#errors. How was the receiver thread terminated? There is a top level exception handler for all agents so they log and continue.. Google Benchmark upgraded to 1.4.0.. Is this the standard ping pong test? What JDK, OS, and Aeron version are you running on?. Are you able to post the code that can recreate it?. Is there a low file space warning output from the driver?. This is an interesting possibility. http://bugs.java.com/view_bug.do?bug_id=6244515. BTW the publication term window length will be minimum of what you provide and the half the term buffer length so providing one larger than half the term buffer length is not necessary.. I think the issue is with the test. I'm investigating now.. There was a bug in the samples that did not account for messages larger than MTU length reliably. Can you try with the latest?. @tnjohansson The java.lang.InternalError can happen in a low memory situation.  Are you low on memory and maybe using sparse term buffers?. Race condition. It had to be sufficiently larger to make it happen more repeatably.. @tmontgomery This is just a reminder that we need to pick up the same change for C++. Whichever of us gets to it first.. This has been fixed. Please upgrade to Aeron 1.2.5.. The current product direction for Aeron is to be a message transport and not a general purpose messaging system. It is designed so that it can be foundational for building other services on top. Please feel free to build whatever you like on top of Aeron.. Totally agreed it is an optimisation and not something to be relied on. We could also have the callback from poll pass a length of -1 to indicate EOF so it is in keeping with socket based APIs.. Good point. I forgot about that. Returning a length of 0 makes more sense.. BTW I meant the callback getting a length of -1 not the return of Image.poll.. Yes the flag could be set on the last frame in the log buffer when a heartbeat has been received with the flag for EOF/EOS.. I was thinking that it might be a nicer way to think of completion rather than EOS. That is have an onComplete(Image) handler and Image.isComplete() method. It is complete from a consumption point of view like in RX. Thoughts?. Good points. Just a thought on my side :-). I think the EndOfStreamHandler is best invoked from within the poll operations when no data is available and it is set on the Subscription during the addSubscription call. This way it is not a separate polling operation for EOS and it just happens when the poll for data is complete. Passing the handler on the poll calls feels too messy with too many overloads.. Replay and recording can be done on different Agents. Initially we can schedule them as composite agent on the same runner.. Allocating ahead can provide benefits when reusing the file. Do you have a case where it benefits when it will just be written once and not resident in memory?\nRegularly checking for available space is a different thing and worth its own feature.. This tends to be file system specific. I'm closing for now and it can be reconsidered in the future if the specific requirement arises.. Can you please refine the question? It is not clear what you are asking.. @jordanxlj For the local to avoid loopback have you considered using a spy subscriptions?. With 1.3.0 the driver no longer truncates the files. It simply deletes them.. Closing for now. Please reopen if it can be recreated.. This has been done. You pass a flag to the appropriate fragment assembler to indicate what type of buffer you would like. It was also a good opportunity to not allocate any buffer until needed.. Is this OK to close now?. Thanks. We have not done much testing on Sparc but it should work and this is one we missed. We'll look at how best address this and will check all the protocol codecs for alignment in case we might have missed others.. @neekolashall  I've committed a fix for this. Can you please build and test to see if it works for you?. We are bumping the CnC version on the next release so this is a good time to address this. Can you try the latest build? I've just made another change.. Please close this one and investigate the other issue. \nIt may be helpful to use the logging media driver and set logging to all. Also worth using the LogInspector to view the created publications or images.\nhttps://github.com/real-logic/Aeron/blob/master/aeron-samples/scripts/logging-media-driver\nhttps://github.com/real-logic/Aeron/wiki/Monitoring-and-Debugging\n. @neekolashall I think I've tracked this to a big endian issue that will be fixed in the next release.  Please let us know if the a release after 1.10.4 works for you.. There is a change in the SBE 2.0 RC spec that allows for var data and repeating group headers to be aligned. We could take a similar approach and align the var data length fields. I can find two sources: ImagesBufferReadyFlyweight  and CounterMessageFlyweight.. It will happen on the basic-publisher when the new publication matches an existing subscription and it is filtering the broadcast events and the error happen in the driver.. @neekolashall Can you try the latest build?. Thanks. I've pushed a few more changes that you might have not tripped over with this test. Seems that machine is not exactly fast.\nFor why big endian consideration. ARM can support big and little endian but does not require aligned access.. @neekolashall BTW are you using the C or Java Media Driver?. Thanks. Fixed.. The Sender has to linearly search over streams for sending the data and the subscribers will do similar when receiving data. The higher this number then the larger the latency. \nI've seen customers run with 100s or even a 1000 streams and be happy with the results.. Happy to merge. These things don't matter so much in tests. Best if in hot path of code.. What do you mean by mapped twice? Is that the once on the client and once in the driver or do you mean something else?. If it is to do with them being mapped once for the publication and then once for the subscription in the client then this is because they can have difference lifetimes and even be in different processes.. The publications are concurrent so are treated differently. We could save a mapping on the subscriber side but is it really worth it? Consider that the memory is mapped, it is the same memory just under a different mapping. It is not like more physical memory is required.. The mappings in the driver cannot be reduced as the absolutely essential. The only potential saving is the buffers in the client for subscriptions. I can take a look at how much effort that would be consolidate and ref count. It would save on TLB entries and maybe help the Archiver.\nI feel sorry for you on 32-bit Windows :-) You will also pay a significant performance penalty for that.. Try closing all clients, i.e. Aeron.close(), before restarting the driver.. You should just ignore closing the publications and subscriptions and just close the Aeron client. This is more forceful. I'll update the release as it does not need the driver check.. I've added the ability to set the driver timeout in milliseconds via the aeron.driver.timeout system property. \nDue to garbage collection, page cache flushing, zone reclaims, scheduling starvation, etc. it is unwise to set a timeout less than a few seconds unless you have a very well tuned and setup machine. . Do you have a line number for the SIGSEGV in the core dump?. If you try with the latest build it should close the client on a driver timeout.. I'm going to close this for now. Any follow up can be opened as specific issues.. I've renamed the git project from Agrona to agrona. I'm looking at doing the Aeron one next.. Thanks, that is interesting to know. I think going to lowercase is useful anyway as I've seen issues with case on windows.. The Java code does not call the unavailable handlers when a forced close happens. I've also just pushed a change that will linger the resources for 1ms on a normal close and 1s on an inter service timeout.. @jordanxlj Have you updated to the latest version of Aeron from master?. This could happen due to a large GC pause whereby your client was not able to perform the duty cycle for over 5 seconds. It could also happen due to resource starvation in the client or the archive conductor thread blocked waiting on some action such as IO. \nYou could increase the aeron.client.liveness.timeout system property on the driver to see if it no longer happens.\nGiven that you are using development code in a non-standard way and not keeping up with the latest build we cannot offer support without a support contract.. An interservice timeout indicates very long GC pauses or resource starvation on the machine which is not a situation to be in for low-latency applications.\nCan you provide more information on what Aeron version, JDK, and OS you are using?\nWhen this happens it is useful to run AeronStat to get a view of the counters on each machine?. After a ConductorServiceTimeoutException you will need to close the Aeron client and reconnect.. Thanks for reporting this. Initially @tmontgomery used the consumer position for this and I now believe his instincts were right. I later thought it made more sense to use the producer position to join at.\nThe main issue here is that in the case you describe it is possible to miss a blocked publisher that would be skipped over or worse they could come back as a zombie and corrupt the log.. Interesting issue this. It is different for IPC and network publications. The network publication is easily fixed using the timestamp on construction. For IPC it is more complicated as the consumers can come and go.\nThe timestamp can be reset when transitioning from 0 to 1 IPC subscribers. This will however reset the clock on a timeout if a publication had really become blocked before the subscriber got added. . If we reset the timeout on each check if the consumer position has not changed but the producer has not advanced then it seems like we would be OK. Does this now work? Also means we don't need to care about number of subscribers.. @goglusid The Subscriber will not crash in the case you mentioned because it still has its own independent mapping that cannot be removed.. Yes. It is marked closed and removed from the subscription so further usage is safe while in linger. Even after that the object when polled, if referenced directly, will return 0. This is in the Java client.. @goglusid I think you are correct. I'll create a test case and follow this up.. I've taken a different approach and allowed any publishing thread to perform the rotation. This will also be better if the thread doing the rotation gets interrupted never mind dying. I've found one other issue which I'll address separately.. Imagine the case of a large number of publishers all failing to complete the rotation. The driver needs to detect this and then unblock after the flow control window is exhausted. Quite a complicated one but ultimately possible.. @goglusid Yes these are issues we are aware off and practically they are not an issue. On overflowing the first 32 bits we would need a number of threads all to be offering the maximum message length all to have passed the publication limit at the same time and be able to wrap. Have you done the calculation on how many threads it is for the different term lengths and message lengths?\nThe reaching max position is similar in that it is a LOT of data with anything but the smallest term lengths. Then it is a close the stream and open a new session to continue. We could look at an automated close in this case. However I'd be very interested in discussing alternative solutions to this.. No :-) For the network publication max message length is 1/8 of term length. So that is 4 * 8 = 36.. It is the same for IPC.. I also think 1/8 GB for a single message is a bad design. Does not stream well. We should pragmatically put a cap on that. @tmontgomery What do you think of a 16MB message cap?. At a 16MB cap it is very pragmatic.. Any message that does not fit in less than 1/2 cache size is a questionable design. Bigger than that should be in chunks and be streamed.. @goglusid That is a nice observation on storing the multiple of 32. Maybe we should combine that with the message limit which would encourage better design anyway.. If a inter service timeout occurs in 1.3 then it quite aggressively closes down the client which can cause this issue if you have threads aggressively offering or using tryClaim.  The next release will have a linger on close to help avoid this. A long GC pause can cause the issue you are seeing with 1.3.. @tkowalcz yes I am referring to the some of the changes to resolve issue #368. Maybe this week if all goes well.. Thanks. It should return 0 to be consistent with the Java implementation.. Thanks for this. It looks like the increment got missed in the port from Java.. @tmontgomery  Re-reading the array length could suffer from the ABA problem. The better solution is to have a change number applied to two counters for the before and after change complete. We use this effectively in the PublicationImage for NAK signalling which is your third suggestion.\n@goglusid How do you ensure the access lifetimes to the pointed struct is appropriate?. I'm going to close this for now as it cannot be recreated. If a test that reproduces it can be created then we will investigate.. I've pushed a fix for this. There was a race.. Maybe it should return false rather than throw the exception?. I'm thinking to be safe you spin like currently and then timeout. This is likely to be quick unless a real issue exists then you want to wait for the timeout anyway.. @tom-smalls The issue here is that then another driver could assume no driver is active and delete the CnC file and start itself.. This also needs to happen for log buffers. A log is 3 times term length plus a trailer which is a 4k page in size. . Can you pull the latest version and then run gradlew in the root directory? It sounds like you have an out of date version.. That error suggests you have an older build of Aeron which requires a local build of Agrona which is not in your repository. Please pull the latest version of Aeron.. It is quite simple. The previous week the build of Aeron required a local build of Agrona. The current repo is depending on a release of Agrona which can be fetched from Maven Central thus not requiring the additional step.. Have you looked at the internal implementation of Boolean.getBoolean()? It is doing what your change does.\nCan you further explain what is going wrong?. Interesting learning experience at least :-). Aeron is designed to be a high performance messaging system with round trips are typically measured in microseconds. We need to detect dead clients so they can be unblocked, thus allowing others to make progress, and we do this with timeouts. One such timeout is the inter-service-timeout which has been triggered here. The exception you see is Aeron doing what it is expected to do. It has not crashed. It has thrown an exception indicating that the conditions it is expecting are not being meet.\nIf you are designing a system for performance why have a clock drifting so far from the actual time? Such a large clock adjustment will result in timeouts being triggered an any system that uses intervals smaller than the likely clock adjustments.. Complete for Java and now need to add c++.. Can you provide a better explanation and test case if possible?. We would welcome any help on this.. The focus for Aeron so far has been low-latency and high-throughput. We are beginning to look at ways of better supporting lower resource systems but this is not a priority. I'll have a look later this week to see what I can find if I can replicate your test.. There are many threads and idle strategies that can be applied in Aeron. Can you provide more details on which thread this is applied to? I'm struggling to recreate what you are seeing.\nAlso can you explain how you came up with figures you passed to the BackoffIdleStrategy? The number for yields seems very high.. The question seems conflated. Maybe I'm misunderstanding. If you are sending then you can add routes for each of the interfaces you want to send to. This is a Linux, or other OS thing, and not a specific Aeron question. If you are talking about receiving then you can do a default subscribe, or you can subscribe on a specific interface with Aeron, i.e. add the interface param to the channel configuration.\nCan you provide more details on the usecase you are trying to address?. Closing due to no follow up.. Thanks.. BTW it would only happen if the producer was 3 or more terms behind as the result of an interrupt taken between reading the active index and then the tail.. Can you try and ask the question another way? I don't quite understand.. If this happens then the publisher is at least 3 terms behind and expectations of latency are seriously in question. I'd prefer to keep it simple and notify that system is under resourced. If you care about performance then running on machine with insufficient cores to run active threads is not a good place to be. \nAll that being said it is best to reduce the potential states and instruction where possible and rechecking the publication limit and trying to make progress goes against that.. This failure can be replicated if the seed is set in the test to : 422830290689147.. Turns out the test has invalid assumptions. The above seed will have 320 remaining in the starting term and the first message ends up being 874 bytes and does not fit so a padding record is inserted and the term is rotated thus the actual termId is one greater than the expected.. Failed due to another instance running at the same time.. It was an arbitrary decision but we decided to limit on beginning and not end of a message.. The limit is only 1/2 a term greater than slowest consumer and we have 3 terms.. 1/2 term is the case for network publication and 1 term for IPC.. Thanks. Yes you are correct. I've pushed a fix.. Thanks. I was already fixing it.. Yes you are right they are not in the archive JAR. They are in the archive-all.jar and aeron-all.jar.  However this should be fixed.. Looks good on initial review. I'll review in more detail tomorrow. Thanks!. Thanks. I made a couple of commits to refactor the code to be more in keeping.. Have you run JHiccup on your machine at the same time to see if it is suffering any systemic pauses?\nhttps://www.azul.com/downloads/jhiccup/. During that run did you have offer times greater than 4ms? If so, what filesystem is containing the aeron directory? Are you seeing IO latency there? Have you profiled the IO to ensure you are not getting page faults on those memory mapped files? It maybe some odd issue with Aeron but given the magnitude of those pauses it is more likely something in that environment that needs discovering and tuning. If not on native OS then these things can be difficult to track down.. Thanks. I've merged and move to Agrona so it can be applied beyond the driver configuration.. I've did a little more on this and pushed a change. The approach taken here has resulted in ~10% drop in throughput. I've a good idea why and will restructure the code to see if I can get the performance back.. This has been posted against the wrong project. Zero MQ is elsewhere.. I think this is an issue in the Java code. I've been testing and about to push a fix. It has been a typo when I realised a missing case and my solution is not right.. It would be good to review if what I pushed makes sense.. That last push has an issue. I'm fixing.. Closing this for now unless an explicit need arises then it can be raised again.. Yes you are correct that the error reporting should be better in such cases. I'm going to revisit this code.. No memory leak is occurring.  The Publication was going not connected and then connecting again with a new session. I've tightened up the logic to ensure the session is aborted if either inbound image or outbound publication drops.\nWhen an inbound requests comes and no return path can be determined then sending back an error is tricky. @tmontgomery and I are looking at a number of ways to address this. One simple way would be for a having a commonly known error stream. An alternative is the concept of a full duplex Aeron style socket which is in development for other uses that this could benefit from.\nFor now if you get an error then reconnect.. I've pushed a change that detects the connection is broken and gives a more informative message.. I've addressed those two potential situations.. This is a good observation. However consider what can happen. When I considered it the log is only rotated by one publisher. This means that if the publisher pauses and the driver rotates by unblocking then the publisher will set it to the same same value it is. If the publisher wins then the driver is CAS'ing and so will make no difference. I went with this to keep the code consistent. Do you think I missed something?. It should not go forward and then back. The only race is to set it to the same value. It is a race but should be a benign race.. Yes. Thanks for spotting that.. Added with this commit. https://github.com/real-logic/aeron/commit/453e50b036ac46bd507fa1d4550ce9398d206356. Is this still an issue with 1.7.0?. The largest claim is Publication.maxPayloadLength() which is the MTU length minus header. MTU defaults to 4KB but can be up to just under 64KB. This is the length of a Aeron fragment.. No because it needs to be fragmented and have headers applied to each fragment.. Is this between machines or over local loopback? If loopback then I see Windows achieve about 50-60% the throughput of Linux if Windows 10 and Linux 4+ kernel. Older Windows is much slower. Linux has a highly optimised stack for loopback compared to Windows in default mode. Windows has SIO_LOOPBACK_FAST_PATH  for TCP which can be enabled per socket and got added in Java 8 update 60.\nIf I'm reading you correctly you are suggesting it is more than an order of magnitude slower which suggests something more serious is going on.. I hear there is interest in advancing the Go client again from @stanliberman. Good to encourage it. A lot of contributions happen on peoples own time.  I know a number of people are interested in this one.. The Java media driver needs to warm up so that the JIT compiler can kick in an compile the hot code. The C2 JIT compiler will need to see 10K+ observations of a method to consider it hot. This means that the size of the messages being less than or greater than the MTU will warm up different paths.\nIt is best to warm up with a realistic profile. Similar length messages and number of streams as this will give the JIT compiler better data to make its optimisation decisions.\nEven our CPUs need to warm up these days with gathering data for branch prediction and priming caches, etc.. Whenever a publisher or subscriber is attempting there is a race to set up the connection. To be sure a connection is in place you can call isConnected() on either a Publication or Subscription. The SimplePublisher example should have been updated some time ago when we changed publications so that it was not possible to offer until a connection is established. I've corrected the sample.\nThe BasicPublisher and BasicSubscriber are working correctly. Sometimes the first publication offer may succeed or not as it is racing with the connection being established. The example is simply attempting to offer and it is reporting that the connection is not yet established.. If you do not have the Subscription.isConnected() method then this suggests you are on an older version. Upgrading would be a good start.\nHave you looked at the Aeron counter stats? Look for NAKs, short sends, and if the connections are established. If it happens and you can grab dump of the counters then this would help a lot with debugging.. Credit should go to @goglusid for the observation.. Does the aeron stat counters show that the connection was dropped and re-established by the driver receiving the duplicate? That will show up with a sub-pos have a joining position later on, e.g. ... @<xxx> on the end of the label.. BTW do you know the reason for the InvalidChannelExceptions? Is this something in your code that you have fixed? I'd like to filter out the noise.. What is the MTU length you are using for Aeron? This might be the result of a restriction in the OS setup and the default 4096 of Aeron being too large, then at some stage you batch up enough messages into a datagram to exceed the OS or network tunnel limit. \nTry setting the MTU to be 1400 and see if it still happens.. @bedding Any reason for closing? I've pushed some changes that will capture more data on the exceptions. If you try this we might have more of an idea.. @bedding Yeah, sorry I should have said the nearest multiple of 32 to 1400. 1024 should work fine for the test. The reason I'm suggesting this is to test if the default datagram was too large in some cases and thus resulting in the exceptions.. @bedding Thanks. I note from the errors that you are not using the latest build as it would have listed the length of the buffer sent.. @cesaref I find it interesting that there is some loss and short sends on this run. Suggests something is not quite well in this test. I've seen short sends under resource starvation.. @bedding Can you confirm that checksums are 0 in the UDP packet header? This will tell us if checksums are on or off - zero is off. You can use the poorly named tcpdump to capture UDP packets ;-). @dillonhicks When you say you have seen no errors is that UDP errors or does it also include no errors in delivered messages? Are you still seeing message delivery errors?. This was addressed with the following commit and will be in the next release.\nhttps://github.com/real-logic/aeron/commit/ef13afbd1cdd21d8e89af2e60b7c2cb15ec86f63. Aeron Cluster is in active development and what you can see is only a partial implementation. In time we will be adding a full Raft implementation with automated leader election and the features to operate clustered services. That is coming next year. At this stage we don't want to be distracted with answering questions on the partial implementation you can see.\nThe design of the Archive we have considered delegating to another Archive for long term storage which can be on higher capacity but lower performance storage, or even in the likes of S3. The feature set we currently offer is what our clients have been willing to sponsor the development for. If you would are interested in additional features then we can consider a commercial arrangement for that.. Done with these commits.\nhttps://github.com/real-logic/aeron/commit/9f5a87a363c81a7f0bc71f0b056ab77c2bde9c1f\nhttps://github.com/real-logic/aeron/commit/2fb9863b1f2e596980ba3ef092dda5bf5109bbc7. The session-id can be a filter as a channel param so the API does not need to be modified.. This is done now for the Java driver and needs porting to C.. You control the client inter service timeout by setting the aeron.client.liveness.timeout property on the driver. The client has the ability to change this for testing only which I've made package private.. A number of people have requested this but no one has been willing to sponsor the development. It is not something we would add without a major client that sponsored the development.. Sorry but I don't have time at present to go into the details of a possible design. I'll close this now and it can be reopened if someone is willing to sponsor the development.. By similar do you mean that the 64-bit C++ is similar to Java 64-bit?. @goglusid Are you testing 32 or 64 bit C++ and compared to what word size for Java?. You are running 64-bit Java.\n\nJava HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode). On a quite review a number of these approaches are out of date. I'll look at updating which should give more performance.. @goglusid Please try with the latest build and see if it improves things.. At present little can be done given the Java API and behaviour.. You can have one publication per client if you use exclusive publications. With the current master you can also specify a session-id on the publication and subscription side as a channel param. Session ids are normally automatically assigned but the next release will support a reserved range of ids that can be manually assigned by the publication.. Exclusive publications are not just single threaded there is a new log buffer created for each. If you are using master and provided a session-id param in the subscription for the matching publication then you receive only that session. That is if the subscription and publication have the same session-id then traffic only goes between them providing no wild card (default) session id subscriptions exist on the same channel and stream pairing.. Closing the discussion. We can reopen another for further exploration of specific points.. > - archive: current recordingId counter\n\nI think you mean:\n * cluster: recordingId of active log\nFor the cluster it will have a channel URI and stream id for the local archive but not the directory.. The current master for Aeron requires Agrona and SBE to be be cloned and built locally. \nhttps://github.com/real-logic/agrona\nhttps://github.com/real-logic/simple-binary-encoding\n. They can also be stopped early if necessary by the normal API. This may be because multiple publishers are keeping it active when not wanted.. Archive recording that are session specific can be marked as such and when the Image closes then the recording subscription can be removed by tracking this in the session.. Close this for now as not immediately required. Can be reopened in the future if required.. What version of the Aeron, client and media driver type?. What if it is explicitly set as a system property?. Yes. Set the channel to IPC.\nhttps://github.com/real-logic/aeron/blob/master/aeron-samples/src/main/java/io/aeron/samples/EmbeddedIpcThroughput.java#L37. It would be better with a more specific question.. The same issue applies to the poll methods and other client iteration methods.. You can increase the length of the term buffer but this is ultimately limited to 16MB maximum for Aeron. However really large messages are a design smell. It is better to break up you message into chunks for transmission.. If we do specify I feel it would be better to restrict to US-ASCII.. Yes start timestamp would be useful.. There is insufficient space for this given the inclusion of the channel URI.. Added with this commit. https://github.com/real-logic/aeron/commit/d07ede1c0df8353121143ddf5e408039936141aa. Thanks Mike.. It is also a good strategy to keep your software up to date. Both your Aeron version and JDK are very out of date.. Thanks @denizevrenci. This is not expected behaviour, it is a bug. I'm surprised we have not seen this before. I've pushed fixes for the C++ and Java implementations.. This method should have been sbePosition which has now been renamed. This will be breaking for those who used this method which should not have been a common occurrence. \nhttps://github.com/real-logic/simple-binary-encoding/commit/1e7a70e2a8a467ef411f9abb18be86726871db3d. Closing this due to no further activity.. The threads are named in the Java implementation and this helps with debugging. Feel free to submit a PR for this.. Do not create a new FragmentAssember on each poll operation. You need to keep this reuse it across poll operations.\njava\n            strategy.idle(subscriber.poll(new FragmentAssembler((buff, offset, length, header) -> {\n                final byte[] data = new byte[length];\n                buff.getBytes(offset, data);\n                onMessage(data);. You do not change this param. This is a deliberate design decision to discourage bad designs that use overly large messages. Large messages should be broken up into chucks and streamed then reassembled at the other end. See the following samples for how to do this.\nhttps://github.com/real-logic/aeron/blob/master/aeron-samples/src/main/java/io/aeron/samples/FileSender.java\nhttps://github.com/real-logic/aeron/blob/master/aeron-samples/src/main/java/io/aeron/samples/FileReceiver.java. We would welcome sponsorship of this feature.. Please provide more details and a repeatable example.. Was this the Java or C media driver?. Cannot reproduce.. Sorry we cannot move protocol flyweights are they can be used for log and protocol inspection. Best keeping them together. Moving them would also be a breaking API change due to the package change.. Yes.. I've pick out the relevant bits. Thanks James.. Thanks.. The archive should enqueue new recordings.\nI'll also update the Aeron client so it detects a reentrant call when current request is active.. Try running the build again. Sometimes things fail to fetch from maven central.. Seems that sometimes https://plugins.gradle.org is not available. Once cached locally then it tends to be OK.. What is the goal to be achieved with the change?. This broke the build and so reverted it.. Another option to consider is is to put the connections into non-blocking mode and busy poll everything.. Are the files all stored in /dev/shm? If in the normal file system then page faults could explain the difference.. Does it make a difference if you run with and without onload?. Are these setups starved of CPU cores in some way? HT turned off? Containers used?\nIf sched_yield() = 0 is called then this suggests they are not busy spinning.. Closing due to no further information.. How many cores do you have allocated to each VM? To busy spin successfully like this you require at least six available cores per VM.. Sessions identify an active stream source on a driver. Adding the same channel and stream-id for a publication ends up sharing a concurrent publication that can be shared across threads and processes. It is possible to create an exclusive publication that cannot be shared across threads that will get a new unique session-id.. Maybe @tmontgomery can clarify as he wrote the wiki page ;-). You cannot. Stream IDs providing multiplexing within a channel, and session ids are individual instances of streams on a given channel for a given stream id.. What @tmontgomery is saying is that session ids must be unique on a channel and stream id pairing at a given instance in time.. The actually Aeron implementation will have unique session ids for all publications on a given driver by default.. I've made some updates to the spec which will hopefully help.. @nitsanw Is this any specific object types?. @mattgodbolt Is this happening in the client or driver process?. With the latest version the linger timeout on resources is configurable in the Java client. You can set this figure high for debugging. https://github.com/real-logic/aeron/commit/ac2847d7f6275260d60fa4cc1e85c90c3e89ba77. Consulting services are available for application specific setup and tuning. If you have budget then please contact Real Logic.\nRegarding SSM this is a duplicate of https://github.com/real-logic/aeron/issues/513.. Can you attach the error log? - hs_err_pid41528.log\nIt is likely to be a GC or starvation issue.. A case that often comes up is another thread calling close on the Aeron client while one is polling.. There are a lot of threads in that process. Do you have sufficient cores to run without timeout? Also what is the contents of the error logs and system counters?. I can see that is only a 2 core machine. Try run with the ThreadingMode.SHARED on the driver and a backoff idle strategy. The polling clients will also need an idle strategy.. For that error to occur then the CnC file would need to have been unmapped. Something in your code as called Aeron.close() while under resource starvation. This commit should avoid the segfault and help track down what is happening. https://github.com/real-logic/aeron/commit/96278bd68853fd13632c66686a1df32dab44c306. You should call Aeron.close() when finished with the Aeron client and any associated Publications, Subscriptions, or Counters.. Closing the media driver is a separate concept.. @tmontgomery how do you feel about moving to a convention that each file can compile on its own with dependencies? If a header has dependencies it includes them. This should address such issues.. How about just letting the Aeron client go out of scope and it will clean itself up? When you detect the exception then delete the client.. Best to not call close from within the error handler. You should set some state to indicate that the system is in error and be closed by separate action.. I've raised this issue on the NIO mailing list but there seems to be little appetite at present to address it.\nhttp://mail.openjdk.java.net/pipermail/nio-dev/2018-September/005404.html\nWe are hoping for improvements to NIO in future Java releases but if that does not happen we will focus more on making the C Media Driver the primary implementation.. There was a bug but the fix is different to what you suggest. Should be fixed now.. Without a test case I'm going to close this for now. Also there is not indication of what version or language this involves.. All JVMs I know of have safepoint polling. The issue here is the method may be inlined in a counted loop and so the safepoint poll may not happen until the loop completes. By instructing the JVM to not inline this method then a safepoint poll will be inserted on the method entry or exit depending on the JVM.. This feature would be fairly easy to add. Would your company be interested in sponsoring the development?. If you want to sponsor development and contribute back for the benefits you get from Aeron then please reach out.. I'm going to close this for now as no sponsored work is being proposed.. Thanks but note the C driver build failed due to missing flag for the C build.. No clients have requested support for Aeron on android. We have no idea if it works or not.. @mattgodbolt Did you ever get any further with this?. What is the date and git version for the cloned repo?. The value after the @ is the joining position of the subscriber. It is the same value as Image.joinPosition().. Yes. Thinking of races with the service running a bit behind. I think a single commit position counter should be used now the log is monotonic across leadership terms. This way the counter carries forward. Closing would cause issues as the service is catching up.. Code is now migrated to a single commit position counter.. @lukepalmer do you plan to address this? . Closing after revert until another approach is proposed.. Thanks. What version did this happen on? In 1.10.5 I made some changes that improved the clean up code on close.. If multiple threads are entering the Aeron client then a lock must be used. In the case of a lock being used I've added detection of an interrupt when waiting for a response from the driver to avoid this issue on a forced closed with https://github.com/real-logic/aeron/commit/d1eea2eb5e8b600ba227556286737038a34ae1d4 and https://github.com/real-logic/aeron/commit/fc0511c4219834b6a015e4d50509bb63de573ca0.\n. What value is being provided for recordCount? Also what version of Aeron and JDK is this running with?. A better test case is required here. I've tried to recreate this and can do 1 million queries per minute without any noticeable slowdown using current build.. I can now recreate a similar issue which I'm debugging. Thanks.. I've improved the archive client while tracking this down. The issue was clashing streams with the recorded basic publisher.. The link to the failing build is broken.. Thanks. At some stage we would like to bring the C media driver up to feature parity with the Java media driver. This will be driven by clients wishing to sponsor the work. . Thanks @lukepalmer. I've been considering adding a CI build for Aeron. I have some concerns about sufficient CPUs being available for the system tests for example.\nIf we add the support for C/C++ then the C driver should also be built and with a matrix of compilers. The build for SBE could serve as a template. https://github.com/real-logic/simple-binary-encoding/blob/master/.travis.yml. The build failure is a timeout. Likely due to insufficient CPU resource. I also note it is building with Java 10.0.1 rather than 8.. Thanks. I've swapped Oracle JDK 11 for OpenJDK 11 and all seems to be passing now.. Seems reasonable to me. @tmontgomery do you have a view?. Could you be doing something like using an exclusive publication from many threads? Is bounds checking enabled in your app in case some thread is writing outside the bounds of a buffer and corrupting the system?. Can you send the output of AeronStat when this happens?. Closing due to no further followup.. This can happen when the Aeron client is closed while being used by other threads. This can particularly happen with bad coding or in application experiencing GC pauses greater than 5 seconds and the client is considered inactive by the driver.\nWhat version of Aeron are you using? The latest 1.11.3 has some protections to makes this a bit less likely.. Where does the Aeron client get closed? It should only be closed after the publications and subscription created via it are no longer used.. The buffers for connections are stored by default in /dev/shm on Linux. The more connections the more log buffers are allocated. These can be shared between clients via a shared media driver which using the same aeron.dir system property for the directory holding the shared files. Review the samples to see how this works.. Start the media driver on its own and then use the same aeron.dir for it and all the clients.. I assume this is C# given the code sample? If so then best addressed to https://github.com/AdaptiveConsulting/Aeron.NET.\nIt is not clear what part you are asking is thread safe. Publications and the Aeron client are threadsafe.\n1.4.0 is a very old version and no longer supported.. I think we need to consider some sort of timeout on this so that it is remove eventually, like it does in the initial connect case. For example, if ingress is still working then keepalive is not applied if egress is not connected.. We need to consider if there is so it is covered.. What idle strategies have you configured?. You can use a shared, or shared network threading mode to further reduce CPU usage. However you are trading off responsiveness for CPU resource. Aeron is a not a system that will use no CPU at idle. If this is a concern for you then Aeron is maybe not such a good fit as a solution.. BTW these idle strategies use less CPU on Linux that what you are seeing on OS X.. Java has a progressive backoff strategy and I've raised a issue for this. . Fixed with this commit. https://github.com/real-logic/aeron/commit/363a85c71ea7949cef8be8bfb635e36c5ca05472. Thanks. @tmontgomery I agree. I found it confusing that it was not a requirement.. We have some basic checks like for the triplet when setting a starting position. More makes sense.. Yes, as @JPWatson has pointed out you need to poll egress to get the new leadership event.. Offer of a message does not guarantee reception within the cluster. You need to have an application protocol level acknowledgement to ensure reception and processing. The cluster does not loose messages that it has reached consensus on, until then messages are considered in-flight.. Client session timeouts are reset to allow for a full timeout duration after a leader change regardless of the time it takes for the election. If the new leader cannot connect to the client within this timeout and the client does not then send a heartbeat if will timeout. Regardless the client should have some concept of timeout itself and if it cannot connect to the cluster within this time it should retry or give up.. For the listRecordingsForUri operation, the channel you pass is used for a String contains operation for the original URI. Try with just tags=123, rather than the full URI.. I just realised I did not push the changes for this in the last release. Master has it now.. @tmontgomery The change I just pushed will support that.. The behaviour is as expected. After a full truncate back to startPosition there are no segment files and the entry in the catalog reflects this. This commit show clarifies the state after a full truncate. https://github.com/real-logic/aeron/commit/0c0d0b54178521246d8c6208e0639d2eb5b40c6e. @QIvan This is a reasonable way to raise an issue. A refinement would be to raise an issue and reference a PR. In the PR it is good to @Ignore the test so CI can pass the PR.. The catalog retains the entry because the recording id should not be reused.. Sorry but this repo is not a  place to get consulting advice on the China stock exchange.. Did you add this to the wrong repo by mistake?. The archive can record and replay data at the full speed of a 10GigE Ethernet connection if you have a sufficiently fast SSD. SBE is designed to be allocation free as the flyweights can be reused.\nRecording can be done in parallel with live subscribers for no impact to latency.\nWe do offer consultancy services if this is important to your company.. Yes.. You only need to run an archive on one machine to record messages and replay them. You can run on more machines for redundancy but have to be prepared to manage that. It is important to address the appropriate archive for the source of the replay. Start simple and run one archive on the publisher. The archive clients need to be configured to address the archive on the publisher in this case.\nIf you restart the publisher it will create a new recording as this is a new session. It is possible to extend an existing recording if you wish to have a single continuous stream.\nWhen running with multicast the choice of flow control strategy is important. The default \"max\" strategy can leave behind the slowest. \"Min\" and \"Preferred\" are options.\nWhen using multi-homed machines or containers then you may wish to consider which interface the multicast address is serviced via. Docker is notorious for the poor quality of network implementation.\nThis should get you started.. > Does it mean I only need to run archive_media_driver on the publisher machine and run a regular media_driver on each of the subscriber machines?\nYes.\n\nWhat do you mean \"archive clients\" here? are they the subscribers?\n\nAn archive client is a client that creates a control session to an archive for requesting recordings or replays, etc. This may or may not be a subscriber.\n\nThanks, extending an existing recording is exactly what I want, however, I didn't see any wiki to configure that. Would you mind to point out the example?\n\nhttps://github.com/real-logic/aeron/blob/master/aeron-system-tests/src/test/java/io/aeron/archive/ExtendRecordingTest.java\n\nI see, I also see there are another mode called Multi-Destination-Cast, so in terms of performance, which one is faster? Multicast or MDC? what tradeoffs are there we need to consider?\n\nMDC is a means of simulating multicast using multiple unicast streams. This is useful for when you require multicast semantics but the network does not support multicast, e.g. most cloud environments. MDC is not as efficient as true multicast as the driver has to do a lot of the work normally done in network hardware, however it does tend to be much more efficient than if someone does this at the application layer.\n. This is not a simple change. The time is used for heartbeats across processes that can, and likely will, be implemented in different languages. It sounds like you have a time issue in your environment. You should not be seeing time jumps of 5+ seconds in a reasonable environment. How large are the jumps you are seeing?. Thanks. A lot of the approach looks good. However it breaks the build for other platforms. You can see the errors in the Travis CI build.. Passing now on Linux but not on OSX. I also see a lot of warnings with this build.. Feel free to keep it open. It will not be going anywhere, especially as it currently does not build on OSX or Linux.. We have not had time or sponsorship to look in any detail at this yet.\n. Quite simply we have not had the time or sponsorship to look at it in any detail so we cannot comment on how well it works or not. The code looks reasonable but missing a few features and we have not tested it.. I'm not aware of posted binaries for Windows. People tend to build their own version if they want to use it. We can provide supported builds for clients with a support contract.. Thanks. Can you post the output from AeronStat when this happens?. > 24: 3 - Client liveness timeouts\nThis indicates the clients have been detected as not alive and thus will be cleaned up. You can see no counters for publications or subscriptions as they have been cleaned up. When subscriptions go away the publication does not instantly know as they have a flow control buffer which is in use. They will get back pressured once this buffer is exhausted or when the status message timeout occurs from the receiver which is 5s by default.\nI do not believe you are seeing a bug and it is a case of mis-configuration in an environment without sufficient resources to run the tests you require.. Are you saying you can offer beyond 5s of the subscribers being disconnected?. @harnitbakshi Can you try with the build from master?. @tmontgomery I was thinking similar but more reactive would be to send a new client close message when a client is timed out that is for a particular client id.\nThe clamping of the window I was thinking is very useful in the network case as the publication lingers. Less useful as you point out in the IPC case but still of some but limited value.. How can it be lost via the broadcast buffer? The error would surely come later?. Messages are only lost with the broadcast buffer on wrap, which is highly unlikely given traffic, and if it does there is an exception and client should end which is what we want.. I'm testing a change that will make the wrap situation cleaner.. Close on wrap feels like the right thing anyway. Makes no sense to continue when you don't know what you missed.. > Hello, could you please tell me what is meant by close on wrap?\nThe driver will broadcast events to connected clients. In the unlikely event that the client has been inactive for more time than a full revolution of the buffer used for broadcasting events then the client detects the wrap of this buffer and will automatically close itself.. We will likely do a new release in a few weeks time. Sorry but we do not offer back ports unless it is to a customer with a support contract.. Try this with the latest build. I fixed something similar earlier today ;-). I've updated how contexts work so that this type of usage pattern is not supported.. Is this still relevant?. This really is asking for trouble. I'll look at how to potentially avoid this issue but it does feel like you get what you deserve if you do this. ;-). BTW this does not build. You need to run the build before submitting.. Thanks Ivan. I've made some changes that hopefully clarify usage.. The build failed due to checkstyle. The indent level was 8 in your PR but the project rules are for 4. I merged before the build Travis CI build completed and fixed it.. I'm not convinced this is the correct approach. It means the Consensus Module and services must use the same term length and MTU.  Given that the Consensus Module sends back almost no traffic then this puts a throughput limitation on the service that seems unnecessary, especially in burst scenarios.. This also introduces head-of-line blocking when there are multiple services.. @tmontgomery This makes the case of a service having to wait on the publication connecting go away which is nice to have. However I want to make sure we don't give up too much or miss other ways to do it.. There are a number of benefits to this that probably outweigh the consequences.  We can always revisit it later.. Submit a PR and we can review it.. We currently have no plans for adding module support. If your company was willing to sponsor the work or purchase support then we could look into it.. Please send a PR for that then.. What do you see as the modules and then we can suggest suitable names?. Before reviewing this in any detail you should note that it does not pass the build which should be a minimum.\nCan I ask why does a simple latency test require fork-join pool? This seems total overkill.\n. This still fails the build. I'm made few comments to help give some ideas where to start.\nThe approaches illustrates a number of fundamental misunderstandings about developing low-latency or high-throughput systems. To do much more work on this feels like free consultancy. Hopefully you have a few pointers to get started with. Next step would be learning to use a profiler and understanding the costs of your code. If you are seriously about learning how to do this better then maybe consider getting some professional coaching or training.. It should be pretty clear from the results of the sample and your code that the approaches give very different performance results. It is best if you try to migrate your coding style to the samples than going the other way if you wish to retain performance. If you want guidance on how to build something more significant than the sample then look at how the Aeron Archive or Cluster is designed and implemented.. Thanks @mianos. I noticed a similar issue just recently and missed fixing this case too. I can pick this up.. I've pushed a fix https://github.com/real-logic/aeron/commit/40fb737fff97a37487a1a5cacedaedf040f3647c\nI've no idea why the -1 was there either. Maybe @tmontgomery knows?. A lot of this looks good. However removing the Context::conclude() changes the semantics for how contexts are used by convention. This will expand with archive and cluster being integrated.\n. @ZachBray This is failing the checkstyle build. Please do a full build and fix then I'll review and merge.. Thanks. This was a transcription error from the Java implementation. The Java is correct.. The use of SBE schema version and mark file version have been conflated by mistake. We'll look at how to address this and give priority in the solution to those with a support contract.. Fixed with this commit. https://github.com/real-logic/aeron/commit/d3fc6b7d8e26108dcc05afc08e81cb8efab44584. Thanks Mark. I'll make some changes to it tomorrow so that it can work if the archive or cluster is run separate from the driver.. What is the value in adding \"@Override\"? It just clutters up the code and is poorly defined for Java as most uses are implements rather than a true override.\n. Really? Is a comment needed for things like this? I'd prefer no comments in a code base unless it is genuinely tricky to describe in code or referencing an external algorithm or paper.\n. Formatting seems a bit messed up in some of the files. Are you using tabs?\n. Indent to 4 spaces.\n. Please just don't do comments :-)\n. Why package private?\n. Could be improved with Java 7 multiple exception catch blocks.\n. All args on next line with hanging indent of 4.\n. New line after double ** in javadoc\n. Hanging indent on next line for args.\n. Why introduce SLF for a dependency. I think this sets a bad example. We should support high performance logging and take no dependencies. \n. Formatting screwed up.\n. If using abbreviations do it with only the first letter capitalised. Or better just spell out for clarity.\n. Add 3rd party dependencies need to be agreed in advance.\n. Why not just use a lambda expression?\n. Do you really think a comment like this adds value? :-)\n. The problem is by adding the tools module it drags in other dependencies. Why not go for standard java.util.logging if not performance critical?\n. Can you give it a name that signifies why it is different?\n. Align args\n. What is the exception you are expecting to catch?\n. What is this name? :-)\n. Why not try with resources?\n. Why not re-throw and have top level handler. Don't like local handling that outputs without control.\n. Again what exception are you expecting?\n. For one liners it is OK. If 2 or more then top and tail. IntelliJ will do this for you.\n. Better. It is starting to say what it is. \n. Sign of too many silly comments :-)\n. When you ref another class then use the JavaDoc @link tag.\n. Definitely turn things off at runtime with public final static fields.\n. use \"new\" rather than \"make\" in the method name when creating a new object.\n. I think it is an anti-pattern to put an author name on a file. Collective code ownership. If you want to know who actually made a change then that is what version control is for.\n. Hanging indent of 4.\n. No authors in code.\n. Why package scope?\n. Use a lambda expression.\n. We can go with Apache CommandLine for now. \nDo you really need to parse that many options to pull in a lib?\n. Why not call it LatencyUnderLoadTest then? I like things to be more obvious.\n. Use things like {@link Receiver} in javadoc so the class is linked and refactoring works. Don't just use a raw class name. The comment had something like TLRandom without markup.\n. I'd ask a different question. Why do you need comments on normal fields? It is always a smell to me when things need comments. Over time the code changes and the comment become misleading and even plain wrong.\nIf the code is so unclear then how will a comment help? If the person cannot write clear enough code that it requires comments then what makes you think the comments are going to be better than then code?\n. Why throw and then immediately catch?\n. Use try with resources.\n. Use try with resources.\n. Don't wrap a string in a string.\n. The parseSize method below only supports int. Should do a long method with a range check for if the int value is allowed.. I think it would be simpler and more efficient to simply check the last character and see if it is not a digit.. propValue is a better name than propString like in the long overload.. A switch on a char is more efficient than on a String.. Upper and lower case can be checked with a fall through.\njava\n    case 'k':\n    case 'K':\n        return value * 1024;. In the int case the only valid value is 1. It would be best to range check  as this can also check for overflow.. This code will be ported to C so keeping it simple makes that easier by not using a regex. Startup time also matters and simple code is faster in the interpreter plus it generates less garbage.. Profiling has shown us that String.format is very costly. I appreciate that this is an exception case but in general we are trying to avoid its use.. This change would involve repeated field access rather than reuse from a register.. We cannot assert because we must wait until they all reach that state.. Why remove the static declaration from methods? Would this not be a breaking API change?. Also when updating these why not move to using std::atomic fences given you specified C17 for windows. I'd feel happier with C11 for wider support.. Yes stay with C, not C++.  I meant stdatomic.h.. I see in Herb's blog post that they are preferring C++ over C. I guess you will have to go with the deprecated macros.. This is a very expensive operation to perform in a low latency system. Allocate once and reuse.. ",
    "stanliberman": "MediaDriver was not restarted.\nTime between the end of Ping to run Pong was a couple minutes. In the reverse case, I killed Pong process and tried running Ping within a few seconds with the same results.\nMore details: RHEL 6.5, SolarFlare NIC\n. You're right. It was exactly like this. User error.\n. Based on personal experience, I would also recommend setting multicast TTL as in 1a15b01dfe8b220d47500b1a8ec765236e39d752 to a higher than 0 value.\n. ",
    "jessefugitt": "Defaulting to a value with the user.name makes sense to me as well as removing the auto-delete on exit feature if it doesn't work in all cases.  However, I would suggest adding a API to do a manual directory cleanup  (mostly for the embedded media driver use case) that would at give the user an optional way of deleting the directory on a clean shutdown if they wanted that.\nFor a case with multiple processes on a machine with each running an embedded media driver, it would be ideal if the associated aeron dir would be auto-deleted when the process that is running that embedded media driver stops, but this is probably not possible.  However, you also don't want to end up with a bunch of directories in the temp space scattered about (one for each run of an embedded media driver).  Along with the suggestion of having a manual API to do cleanup, it might also be nice if the embedded media drivers defaulted to a location inside the new user specific aeron dir as a convenient place to clean up crashed processes (assuming the unlikely event that anyone running Aeron ever hits a bug or closes uncleanly).\nSomething like:\n/dev/shm/aeron-tmont/default - as described above\n/dev/shm/aeron-tmont/embedded/{uuid} - these get generated by embedded media drivers and can be cleaned up manually via an API at shutdown or manually via the command line later for no longer running processes\n/dev/shm/aeron-tmont/{somename} - this is the recommended directory layout if you wanted to create a shared media driver that is used with more than one process and you don't want to collide with the default\nTo clarify, my suggestion is more around default directory layout and I'm not suggesting any changes to the startup and shutdown behavior being proposed above (no special case behavior based on different directories).\n. Pulled the latest, fixed the conflict, built and tested the samples and then updated the PR.\n. Sure. I pulled down the latest and fixed the conflict with the multiple changes to the EmbeddedThroughput sample and then pushed back up to my branch.\n. Agreed that this can probably be a lower priority since the workaround is to avoid setting sessionId.  We removed the code that sets sessionId from our test tools and the problems we were seeing went away so if others using Aeron see similar problems, this issue may help provide some background.\nAlso, to confirm, I was using a single media driver with one or two publications and I was running some tests that involved stopping the media driver and starting it again (which really cannot be known to a publisher app whether a media driver has been stopped or the machine has been rebooted, etc).  \nSteps to reproduce in the most basic case are:\n1) Start a media driver and a subscriber on a separate machine\n2) Start a media driver on the local machine\n3) Start a publisher app on the local machine that sets sessionId to some number (ex: 57)\n4) Send 1 message and let the publisher app exit\n5) Stop the local media driver (or reboot the machine, etc)\n6) Start the local media driver again\n7) Start the publisher app on the local machine again that sets sessionId to the same number, 57 (or actually start any publisher app on any machine in the system and set sessionId to 57)\n8) Send any number of messages\nExpected result:\nSubscribers will received those messages sent in step 8 without errors\nActual result:\nSubscribers will not receive any messages in step 8 or they will cause errors and problems (depending on the random value given to initialTermId in step 7)\nWorkaround:\nDon't set sessionId via the API (more specifically, it isn't safe to reuse a sessionId in two publications if there is a chance the media driver will ever stop, the machine will ever be rebooted, etc)\n. Agreed that it looked to me like trying to reject invalid arguments could still lead to the same deafness issue by using variations on ordering or weird values and that the ideal approach would be to standardize on one value for they keys in the code (original or canonical).\n. I had a chance to test this with only valid fields in the URI and I can still create the deafness as mentioned earlier (by just swapping the order of remote and local) so the invalid URI fields are definitely fine to be treated as a separate issue.  Basically this works as expected:\nprivate static final String CHANNEL1 = \"aeron:udp?remote=127.0.0.1:40123|local=127.0.0.1\";\nprivate static final String CHANNEL2 = \"aeron:udp?remote=127.0.0.1:40123|local=127.0.0.1\";\nprivate static final int STREAM_ID1 = 10;\nprivate static final int STREAM_ID2 = 11;\nbut this causes the second stream to be deaf:\nprivate static final String CHANNEL1 = \"aeron:udp?local=127.0.0.1|remote=127.0.0.1:40123\";\nprivate static final String CHANNEL2 = \"aeron:udp?remote=127.0.0.1:40123|local=127.0.0.1\";\nprivate static final int STREAM_ID1 = 10;\nprivate static final int STREAM_ID2 = 11;\nThe UdpChannel in the media driver code sort of becomes a merged version representing both clients but yet it only has a single originalUri string from the first one and in the future, it only uses that originalUri when it communicates back to the client (meaning no communication seems to flow back to the second channel/stream).\n. Warning in the media driver and then allowing deafness seems a little tough from a usability standpoint to me, especially when the input parameters are all valid but just in a different order.  \nIt seems like the media driver should have the capability to distribute back out to each client from the underlying media regardless of what order they entered their parameters (maybe create two UdpChannels each with its own key or a a single UdpChannel with a list originalUris keys or something) or else the parameter input needs to be tightened up a lot to prevent entering invalid URIs (I suppose parameters would all need to be required and in a specific order).  The danger at preventing it with URI validation is that as soon as a future version adds a new parameter, you'll get the deafness again when two clients with different versions share the same media driver and have different originalUris that are both valid for that client version..\n. Tested with the latest pull and the code that was previously failing due to this bug is now working as expected for me.  Thanks @tmontgomery.\n. I don't have a test that proves the correctness of this bug but I can confirm that with the latest pull, I can see @mjpt777 has changed the code in the original bug report to the following code below (which looks correct to me):\n```\n    public int poll(final int fragmentCountLimit)\n    {\n        ensureOpen();\n    int index = ++roundRobinIndex;\n    if (index >= connections.size())\n    {\n        roundRobinIndex = index = 0;\n    }\n\n    return connections.doLimitedAction(index, fragmentCountLimit, Connection::poll);\n}\n\n```\n. A related comment is that for convenience I have several cases where I'm loading an Aeron channel/stream as a single string (like as the value in a Java properties file) and I've been using the form:\nkey=aeron:udp?remote=127.0.0.1:40123|streamId=10\nas input to the function:\npublic static AeronUri parse(CharSequence cs)\nCurrently, the AeronUri class can parse the value and it stores the streamId as a key into its custom map.  I still have to manually use that value when I create a publication/subscription but it is handy that Aeron can do the parsing for me at the moment and store the streamId (or whatever other custom fields I needed).  Actually, it would be nice if there was a constructor for publications/subscriptions that could take an AeronUri or some single string value rather than the string/int combination but even without that enhancement, I still find there is some value in the AeronUri having support to parse a streamId (either with the current custom fields implementation or with an explicit field if we go the route of rejecting unknown fields).\n. Added a bit of debug logging today to try to figure out this issue.  It appears that there are some soft spots related to having multiple subscriptions on the same channel but on different streams.  Closing one of the subscriptions appears to mess up the NetworkConnection object which leads to no data being delivered to future subscriptions.  Specifically, the problem happens after this code runs in DataPacketDispatcher:\n```\n    public void removeSubscription(final int streamId)\n    {\n        final Int2ObjectHashMap connectionBySessionIdMap = sessionsByStreamIdMap.remove(streamId);\n        if (null == connectionBySessionIdMap)\n        {\n            throw new UnknownSubscriptionException(\"No subscription registered on stream \" + streamId);\n        }\n    connectionBySessionIdMap.values().forEach(NetworkConnection::ifActiveGoInactive);\n}\n\n```\nIt looks like some of the code related to addSubscription/removeSubscription and addConnection/removeConnection as well code from the calling functions don't correctly support events coming in the order:\naddSubscriber\naddConnection\nremoveSubscriber\naddSubscriber (won't receive data)\n. Ya I've been working with @brianhorst and it seems like a separate bug but in the same general area.  He has a small fix that allows the inactive connection callback to work but it doesn't fix the subscription deafness problem I'm seeing.\n. After more digging on this issue, the root cause seems like it is actually composed of two major issues.  The first issue is that the a REMOVE_SUBSCRIPTION client command ends up being handled in two parts in the driver (on two different threads) and in that window, an ADD_SUBSCRIPTION client command in the DriverConductor can end up being associated with the NetworkConnection that is about to immediately be marked inactive and removed.  The second issue is that after the receiver thread marks the connection inactive, the subscription on the client never fixes up its state causing the client subscription to never get data for the specific publication.\nMore Details\nThe subscription is being cleaned up as part of the remove client command and leads to a RemoveSubscriptionCmd (receiver command) being put on the receiver's command queue which will later cause the NetworkConnection to be marked inactive and then cleaned up.  Meanwhile, the ADD_SUBSCRIPTION client command being processed on the conductor thread becomes associated with the NetworkConnection (just before it is marked inactive) and that connection and log file information is communicated back to the client because it appears to be valid at that instant.  The NetworkConnection then goes away after being marked inactive on the receiver thread and no data is ever delivered back to the client but yet the client continues to believe that it is still connected to a valid NetworkConnection for a given publication's sessionId even though new NetworkConnections are being created and delivered by the driver for that publication.\nI don't see an obvious fix other than reworking how the remove subscription flow works and possibly setting a flag when the refCount goes to 0 for a given channelEndpoint/streamId to prevent add subscriptions from being associated to something that is about to be cleaned up.  Any other ideas for a fix @tmontgomery ?\n. There is a new system test in the pull request (see StopStartSecondSubscriberTest in https://github.com/jessefugitt/Aeron/commit/2db7d96e03ebf6bf55f96b674da9fdf8f739be14) that reproduces this behavior every time and basically, yes, you just need a publication running and then do ADD_SUBSCRIPTION, REMOVE_SUBSCRIPTION, ADD_SUBSCRIPTION.\n. Also, the other tricky thing about reproducing is that you must have another subscriber on the same channel but on a different stream.  In the system test, 3 of the 4 tests pass (the one that fails is *SameChannelDifferentStreams)\n``````\n    @Test(timeout = 10000)\n    public void shouldReceiveMessagesAfterStopStartOnSameChannelSameStream() throws Exception\n    {\n        shouldReceiveMessagesAfterStopStart(CHANNEL1, STREAM_ID1, CHANNEL1, STREAM_ID1);\n    }\n@Test(timeout = 10000)\npublic void shouldReceiveMessagesAfterStopStartOnSameChannelDifferentStreams() throws Exception\n{\n    shouldReceiveMessagesAfterStopStart(CHANNEL1, STREAM_ID1, CHANNEL1, STREAM_ID2);\n}\n\n@Test(timeout = 10000)\npublic void shouldReceiveMessagesAfterStopStartOnDifferentChannelsSameStream() throws Exception\n{\n    shouldReceiveMessagesAfterStopStart(CHANNEL1, STREAM_ID1, CHANNEL2, STREAM_ID1);\n}\n\n@Test(timeout = 10000)\npublic void shouldReceiveMessagesAfterStopStartOnDifferentChannelsDifferentStreams() throws Exception\n{\n    shouldReceiveMessagesAfterStopStart(CHANNEL1, STREAM_ID1, CHANNEL2, STREAM_ID2);\n}```\n\n``````\n. It seems fine to check the connection subscriber count as you are doing now (so that you don't need to modify connection status from the driver conductor thread).  Also, when I run the newly added system test (which was failing) from the pull request that you merged, it now passes and the original use case of stopping and restarting a subscriber process also works as expected so this one looks fixed to me.\n. Closing this pull request because Aeron had breaking changes to the API and this system test will be submitted in another pull request.\n. It wasn't clear which thread should own the ability to write state to the NetworkConnection objects (currently multiple threads appear to).\nThis code could be removed from the Receiver class and just moved here to the DriverConductor but I'm not sure if other calls expect it to also happen in the Receiver code (like in response to network events).  As reported in issue #141, if it isn't done here, it triggers the bug described in the issue because the \"work\" will be put on a queue for another thread to do later, which opens a window where new \"add subscriber\" messages from the client will temporarily get attached to this NetworkConnection before it gets marked inactive on the other thread and then they never recover or receive messages.\n. ",
    "brianhorst": "Is there going to be an effort to be able to start a media driver and have it resume where a previous one left? Right now, if a media driver goes down, all clients need to close and re-create publications and subscriptions (which kind of sucks). The proposed file management doesn't seem to take into account this possible feature. In this case, a separate lock file may be needed.\nI also like the ability to have the driver delete the files it created without starting a new one. An API call on the MediaDriver would be sufficient if we plan on removing the delete on close feature. I think it's OK to leave files if the driver terminates abnormally.\n. It should probably be protected or be able to be called more than once. conclude is overridden from CommonContext which is in another package so it can't be package scoped.\n. The 0 checksum may be an artifact of the SubscriberTool. If I understand what's happening correctly, the two subscribers are both reading from the same log buffer. In  the MessageStream checksum verification each subscriber independently sets the checksum to 0 in the log buffer before doing updating the CRC32. It does set the checksum value back when done, but that leaves an amount of time where the checksum is read as 0 by the other subscriber. The buffer being used in the MessageStream class is misnamed \"copybuf\" because DirectBuffer.wrap just sets the address of the buffer. A quick check to verify this could be to copy out the data or remove the need to change the data in the log buffer.\n. I've tracked this down to a line in Agrona in CountersManager.free():\ncountersBuffer.putLongOrdered(counterOffset(counterId), 0L);\nI don't know why it puts 8 bytes of zeros before adding it to the free list, but the position being read by the subscription is in that location. The subscriber then believes it needs to read from the beginning. Removing that line causes this issue's behavior to go away. I don't know what other issues might be caused by the removed code but all system tests and unit tests in both projects still pass.\n. Yep, I don't see the issue after that change to Agrona.\n. I agree that Subscriptions should be independently manageable from the client API. This is even more important if there is some kind of persistence strategy where an individual Subscription needs to report what it has read. Additionally, I would be wary of excessive configuration. Configuration should be possible only when absolutely necessary.\n. I ran this scenario and I still see the unusual behavior.\nOne additional thing I noticed is the Subscribers all report the inactive notification, as expected, if they are running before the publisher starts. There must be something on that initial wire up that causes some to be left out.\nI'm going to attempt to write a system test to reproduce this.\n. This is a sample application. Everything it's doing should be clearly documented.\n. Yep the spacing is wrong, but it's just spaces since checkstyle rules prevents tabs.\n. Should be private. I checked the rest of the code and the accessors are used everywhere.\n. Do you have a suggestion of what to use instead? The logging framework is not used in any performance critical areas, and the publisher tool is a functional verification application not a performance test.\n. These are probably just added by the various IDEs. We can remove them.\n. ok, we can do that.\n. I can do this, but I'll dearly miss typing .get and having intellisense show me all my options.\n. I think a comment here is worth having. what makes the code unclear is the list of generic types. Saying what's actually used to access the per producer object is very helpful. It may be more clear if we created a new class just to hold and access that information, but that might not be worth it. We thought for a second one existed in BiInt2ObjectMap, but that wasn't the case.\nAs for javadoc and refactoring, it won't work without being in the standard /** form (at least it doesn't in intellij). This isn't in javadoc and isn't specifically identifying any classes so there shouldn't be any problems there.\nAs an additional side note, you don't need to repeat types when creating the new hash map. I.e. it could just be \"messageStreams = new HashMap();\".\n. I also noticed subscriber tool has some \u201cincorrect\u201d whitespace formatting. Want me to clean that up?\n\nOn May 4, 2015, at 2:51 PM, Martin Thompson notifications@github.com wrote:\nIn aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/SubscriberTool.java https://github.com/real-logic/Aeron/pull/108#discussion_r29616645:\n\n\nprivate final RateController rateController;\n  +\n/* All subscriptions we're interested in. */\nfinal Subscription subscriptions[];\n/* Just the subscriptions we have reason to believe might have data available - these we actually poll on. */\nfinal Subscription activeSubscriptions[];\nint activeSubscriptionsLength = 0;\n  +\nprivate final Publication controlPublication;\nprivate final Subscription controlSubscription;\n/* Doesn't use TLRandom, since this really does need to be random and shouldn't\n* be affected by manually setting the seed. */\nprivate final int controlSessionId = ThreadLocalRandom.current().nextInt();\n  +\n/* channel -> stream ID -> session ID */\nprivate final HashMap>> messageStreams =\n  I'd ask a different question. Why do you need comments on normal fields? It is always a smell to me when things need comments. Over time the code changes and the comment become misleading and even plain wrong.\n\n\nIf the code is so unclear then how will a comment help? If the person cannot write clear enough code that it requires comments then what makes you think the comments are going to be better than then code?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/real-logic/Aeron/pull/108/files#r29616645.\n. \n",
    "MichaelDrogalis": "I'm used to frequently using UUIDs as directory names when I'm the one who has to name something that I consider ephemeral to my application. If that's what Aeron offered, I'd be totally okay with it.\n. Does that assume you can recover the process ID of the driver before it crashes? What about the case where the driver cashes very quickly?\n. I'd greatly appreciate a Maven artifact before 1.0.\n. That'd be swell, I can make immediate use of that. Thanks @mjpt777!\n. Hooray! Congrats everyone!\n. I've been able to reproduce this, and can confirm it's a problem.\n. ",
    "rlankenau": "@MichaelDrogalis That's what I was thinking.  For an embedded driver, you're dealing with ephemeral state, and it should be created and deleted along with the application.  In that case, it doesn't really matter what the directory is called as long as it doesn't collide with others.  The case where the directory is left after a crash isn't optimal, but it does mean that you have the data for crash analysis...\nA standalone driver is much more of a managed resource, and should have a well-known name/location, and can have its data lifecycle managed independently of the process accessing the data.\n. My thought was that a PID was less portable than simply using a UUID, and didn't really provide a great deal of identifying information, especially if you're debugging a crash.\n. I agree that having the PID makes it easier to identify the directory of a running driver.\nIf that's the long-term solution, we should probably put some code into Agrona to fetch the PID in a portable manner. \n. I'm fine with using ManagementFactory.getRuntimeMXBean().getName() as the unique part, and I think @jessefugitt suggested a good directory layout to avoid the multi-user issues the commit I put in was intended to fix.\n. @tmontgomery \nRight, your original layout using user.name works to address the collision, but I think using /dev/shm/user.name/default, /dev/shm/user.name/embedded, etc. results in a much cleaner layout.  If you use the top-level directory (i.e. /dev/shm/user.name/) It gets a bit ugly when you want to run an embedded driver and a standalone driver on the same box as the same user.\nBoth you and Jesse had good suggestions, I think Jesse's is a bit cleaner.\nSo if we put all of this together, we have:\nDefault\n- /dev/shm/user.name/default\nEmbedded\n- /dev/shm/user.name/pid@hostname\nExplicitly Named\n- /dev/shm/user.name/default\nIf there's quite a bit of work to be done to allow driver restart on an existing directory, maybe we should just default to clearing the selected directory on both startup and shutdown to allow both a clean start and a clean stop.  We can change the default when we revisit the driver restart idea.\nAn abnormal stop will leave the directory for analysis.\n. Well, as long as he hasn't seen any previous fragments.  If he's been up the whole time, as you mentioned at the end of your initial report, he needs to do loss handling for that fragment.\nProbably worth putting together a test case for that particular scenario as well.\n. Is this related to #33?\n. Or rather, exactly the same thing?\n. I agree that a log entry feels too soft, and if you're going to handle it programmatically, requires parsing.  Some sort of context-level callback is easier to encapsulate for a user.\nI'm assuming that the exception is thrown from a thread started by the Aeron context, so catching it at the application level would be a bit of a trick.\n. If there's a severity included in the callback, that could work.  If we expect that the media driver going away is a common transient condition that the client is going to be able to recover from, I'd think that a log message with a low severity would be okay, maybe escalating the severity after some threshold.\nI prefer a more strongly typed notification for severe and well-defined system events, but I recognize that those can rapidly bloat the application code for handling events.\n. Ah, well, that actually seems just fine to me.\n. Too fast on my feet.  Looks like there's another place where a random dir generated that can leave a trailing /tmp/aeron or /tmp/shm/aeron with the original user's permissions as well.  I'll fix that and update the pull request.\n. I've run this a number of times since @tmontgomery's latest fixes, and I haven't seen any SEGVs on the BasicSubscriber. \n. I agree.  We have been burned by conveniently tearing down related state in\nthe past.  If there is a reason for creating multiple subscriptions, then\nthey need to be independently manageable.\nIt may not seem critical now, but when that subscription is buried in some\ntype of abstraction layer, having a subscription closed automatically is\nmysterious and dangerous.\nOn May 12, 2015 8:10 AM, \"David Ameiss\" notifications@github.com wrote:\n\n\"Unique receivers\" anyone? :-)\nHaving a close method close only the specific subscription object (and not\nother subscriptions) allows much more flexibility. For example, two\nsubscriptions to the same stream could serve completely different purposes\nsemantically, or be the result of two independent threads (who don't know\nof the other's existence). Closing all subscriptions to a stream would seem\nkind of... well, rude.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/121#issuecomment-101269801.\n. This still happens with the latest code.  I'm working on tracking down more details.\n. Here's a jstack while it's hung:\n\n2015-06-09 11:18:39\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.31-b07 mixed mode):\n\"Attach Listener\" #17 daemon prio=9 os_prio=31 tid=0x00007fc80910c800 nid=0x5807 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"DestroyJavaVM\" #16 prio=5 os_prio=31 tid=0x00007fc80a0a4000 nid=0xe07 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"aeron-client-conductor\" #12 prio=5 os_prio=31 tid=0x00007fc8098f8000 nid=0x5403 waiting on condition [0x000000012e65b000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n    at sun.misc.Unsafe.park(Native Method)\n    at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)\n    at uk.co.real_logic.agrona.concurrent.SleepingIdleStrategy.idle(SleepingIdleStrategy.java:41)\n    at uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:94)\n    at java.lang.Thread.run(Thread.java:745)\n\"Service Thread\" #9 daemon prio=9 os_prio=31 tid=0x00007fc809803800 nid=0x5003 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C1 CompilerThread3\" #8 daemon prio=9 os_prio=31 tid=0x00007fc809005800 nid=0x4e03 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C2 CompilerThread2\" #7 daemon prio=9 os_prio=31 tid=0x00007fc808843000 nid=0x4c03 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C2 CompilerThread1\" #6 daemon prio=9 os_prio=31 tid=0x00007fc808842000 nid=0x4a03 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=31 tid=0x00007fc808875000 nid=0x4803 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=31 tid=0x00007fc809805800 nid=0x3d0b runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"Finalizer\" #3 daemon prio=8 os_prio=31 tid=0x00007fc809801800 nid=0x3503 in Object.wait() [0x000000012c0a8000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on <0x000000076ab062f8> (a java.lang.ref.ReferenceQueue$Lock)\n    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:142)\n    - locked <0x000000076ab062f8> (a java.lang.ref.ReferenceQueue$Lock)\n    at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:158)\n    at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\"Reference Handler\" #2 daemon prio=10 os_prio=31 tid=0x00007fc80886d800 nid=0x3303 in Object.wait() [0x000000012bfa5000]\n   java.lang.Thread.State: WAITING (on object monitor)\n    at java.lang.Object.wait(Native Method)\n    - waiting on <0x000000076ab05d68> (a java.lang.ref.Reference$Lock)\n    at java.lang.Object.wait(Object.java:502)\n    at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:157)\n    - locked <0x000000076ab05d68> (a java.lang.ref.Reference$Lock)\n\"VM Thread\" os_prio=31 tid=0x00007fc80886b000 nid=0x3103 runnable \n\"GC task thread#0 (ParallelGC)\" os_prio=31 tid=0x00007fc808818800 nid=0x1907 runnable \n\"GC task thread#1 (ParallelGC)\" os_prio=31 tid=0x00007fc808819000 nid=0x2313 runnable \n\"GC task thread#2 (ParallelGC)\" os_prio=31 tid=0x00007fc80881a000 nid=0x2503 runnable \n\"GC task thread#3 (ParallelGC)\" os_prio=31 tid=0x00007fc80881a800 nid=0x2703 runnable \n\"GC task thread#4 (ParallelGC)\" os_prio=31 tid=0x00007fc80881b000 nid=0x2903 runnable \n\"GC task thread#5 (ParallelGC)\" os_prio=31 tid=0x00007fc80881b800 nid=0x2b03 runnable \n\"GC task thread#6 (ParallelGC)\" os_prio=31 tid=0x00007fc80881c800 nid=0x2d03 runnable \n\"GC task thread#7 (ParallelGC)\" os_prio=31 tid=0x00007fc80881d000 nid=0x2f03 runnable \n\"VM Periodic Task Thread\" os_prio=31 tid=0x00007fc808843800 nid=0x5203 waiting on condition \nJNI global references: 338\n. ",
    "ghost": "would be great if C++ compilation could be done by something else than cmake, and the .cmd file would not contain any link to Visual Studio. Am working on a pure Linux / GNU environment, and am very interested to compile Aeron on Solaris :+1: \n. OK, here is some full disclosure :-) \nI am working on a rather new Big Data idea: indexed HDFS. As you may know, it is currently not possible to index an HDFS file: Apache Hadoop \"eats\" itself through a file, again and again; same thing for applications, languages and whatever there is on top of Hadoop, e.g. Pig. I thought this was silly, and decided to create Stratus, aka Indexed HDFS. In order to do that, I need to be able to put the lines of a text line somewhere, during that file's upload to an HDFS cluster; when the upload is done, I'll take the lines, and build an index out of them. Having done that, I'll store the index redundantly on the same cluster as the one the file lives on. [ Nice extra feature: you can separate the index from the file, and make it available to whomever, while \"hiding\" the original file ! ] I need a distributed log to do that; think big clusters ( > 100 - 1000 nodes ). Think Airbus, think Shell. Think Virgin Atlantic's Boeing 787s, producing 0.5 TB of data per flight. I did a presentation at Airbus R & D about one month ago, and those guys got enthusiastic. Up to that point, the best distributed log I'd found was Apache Kafka. \nThen I came across Aeron, not earlier than this morning, and I am already loving it. [ Well, except for Gradle, and the checkstyle part, which seems a bit pedantic to me. Details, however. ]  My stuff, Stratus, is going to be pure Java, but data transport - to and from the underlying distributed log - should really go as fast as possible. Microseconds ? Forget it. Nanoseconds. I saw Martin Thompson's talk on youtube this morning early ( shard by Peter Lawrey on Google+ ), downloaded and built Aeron, and was sold. \nI simply can't come to Airbus R & D and say \"Hey guys, I'm bringing some great stuff along - alas, we're going to need something rather unknown, called cmake, to compile it, and yeah - Visual Studio  is also in it\". Simply can't. \nMission:: shovel Terabytes of data over local clusters, and index them. \nFirst step: define demonstrators and prototypes on Linux, in a pure GNU environment. Not my reqs, but Airbus'.\nNext step: move to Solaris, rinse repeat. If we can do that, a startup might even grow out of it. \nI hope this helps :+1: \n. Kewl, that you guys would be prepared to include makefiles for specific environments. \nI would need to compile with\n1) Linux: gnu gcc >= 4.8.1 / x86-64\n2) Solaris: CC ( note capitals ), the Solaris C/C++ compiler shipped with Oracle Solaris 11.x, on x86-64\n( basically, in both cases, x86-64 means Xeon E3 / E5 / E7  )\n1 would be absolutely crucial;  #2 I could prolly figure out by myself, iff #1 would work.\n. @mekishizufu  Point taken, in an absolute way. In  a relative way, however, companies like Airbus can be fairly conservative, and concentrated upon what they know and have. That is all I wanted to say regarding CMake and, for as far as my mission is concerned, a hard req :-) \n. I'll do a maven build in the coming days, and provide poms, as soon as I have time. Not so hard, it seems. Nothing bad about gradle - but maven is, still, simply the more widely adopted build system. Yes, I heard the remark in Martin's talk, too. But then again... \n. Tend to agree with Richard Warburton. In typical production environments as\nI see them ( e.g., this week with Airbus R & D ), multi-user on cluster\nnodes is not even an issue.\n*Fortuna audaces adiuvat - hos solos ? *\nOn 19 November 2014 11:28, Kristofer Spinka notifications@github.com\nwrote:\n\nThinking about this further, there are many reasons one may desire\nmultiple media drivers. Here are a few:\n1. More network capacity than a single-core (thread) can satisfy: remember\nthat even in 3-threaded mode, there is only 1 each of Sender and Receiver\ninstances in the media driver.\n2. NUMA isolation: even on simple 2-node boxes, I would be motivated to\nrun a distinct Aeron instance per-node.\n3. Traffic prioritization: take a basic case of unicast fan-out. You\ncertainly wouldn't want your fan-out Media Driver to be the same as your\nsource Media Driver because there would be obvious priority issues.\n4. NUMA I/O bus locality: self-explanatory, multiple NICs attached to\ndistinct nodes.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/pull/27#issuecomment-63619901.\n. Kewl. I had already \"mavenized\" Aeron by myself, but having Aeron on Maven\nCentral is much better, of course :-)\n\n*Fortuna audaces adiuvat - hos solos ? *\nOn 24 November 2014 at 17:09, Martin Thompson notifications@github.com\nwrote:\n\nYes we plan to publish to Maven Central in the not too distant future.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/31#issuecomment-64216703.\n. aeron 1.7.0\nI reproduced issue using io.aeron.driver.MediaDriver (no changes), io.aeron.samples.BasicPublisher (no changes), io.aeron.samples.BasicSubscriber (just added logic with second subscription and reconnection). BasicSubscriber.zip\n\nPlease see changes in BasicSubscriber.\nIf you commented lines 72-75 - all good.. Awesome!\nThank you.\nDoes not work in 1.7.0 but works fine in head.\nWhen do you plan next release?. Works fine with 1.8.0.\nThank you.. ",
    "jiripospisil": "\nHowever, I think having a generated generic makefile from CMake that is included in the repo might be a way to do what you want.\n\n@tmontgomery Unfortunately that's not going to work. CMake generated Makefiles are not independent (and there's no option to make them so AFAIK). The Makefile will contain hard-coded paths specific to the machine that generated it, not to mention CMake is invoked as part of the actual building process via Make.\n\nHey guys, I'm bringing some great stuff along - alas, we're going to need something rather unknown, called cmake, to compile it\n\n@exercitussolus I think it's a bit harsh to call CMake unknown given how ubiquitous the tool is these days.\n. ",
    "ohpauleez": "Just adding some support for this issue here.\nI used Aeron in some UIO/kernel-bypass recently.  Having a C version of the Driver would allow for dropping in lower.  This change could give rise to using DPDK, Netmap, or plugging Aeron directly into virtio.  Let me know anyway I can help.\n. Is there any sense when this will land on an official release?\n. Awesome - thanks a ton.  Feel free to reach out if there's anyway I can help.\n. ",
    "RajivKurian": "I was expecting something like this:\n// Just allocate a buffer flyweight object without having it point to real memory.\nprivate static final UnsafeBuffer BUFFER = new UnsafeBuffer(0);\n// This tries to reserve lengthOfMyData bytes on the underlying logbuffer.\n// If we managed to reserve the appropriate number of bytes, then change BUFFER's internals to the right pointer + length.\nfinal boolean result = publication.offer(BUFFER, lengthOfMyData);\nif (result) {\n// Do optional bounds checking to make sure we don't go past lengthOfMyData.\nBUFFER.putByte(byte1);\nBUFFER.putByte(byte2);\n.....\n}\n. Awesome!\n. Thanks Todd. That makes sense.\n. You are right - I haven't measured. But a 24 byte header for  25 byte header is 50% odd waste.\nI see your point about copying. Copying is indeed very cheap. My threads will have a timeout too after which they will just commit the BufferClaim instead of waiting for the entire batch to fill. Something like wait for 10 ms or 25 messages whichever happens first.\n10 messages for me is only 250 bytes, 20 is 500 bytes - so I am hopefully nowhere near MTU size.\n. Hmm that would be an interesting experiment. I wonder if padding would help or harm here, given ultimately there is a network transfer. I've regularly padded objects 64 bytes for an in memory random read heavy workload, so that a random access into the object will give me all it's state in one cache miss. But I wonder what the trade-off is w.r.t waste on the network.\nWhy would there be extra contention? I allocate a buffer of say 500 bytes (for 20 of my messages) on one thread and I start writing to it from the front, another thread will get the next 500 bytes via a LOCK XADD on the tail and start writing to it's section. Given that when they start writing to their respective sections they are separated by 500 bytes odd, the chance of them contending on the same cache line is not very high I'd assume given they are working down their sections. In fact the larger the buffer, the less the chances of two threads contending on the same cache line right?\n. Thank you for the tips. Looking forward to the C++ port. I've had very good luck in the past with sendmmsg() and recvmmsg() especially the latter. Omni-Path looks great, sadly I won't be able to depend on it given EC2 will probably never have support for it. Heck I'll be happy if they start supporting multicast...\n. Re before the change: I saw the store barrier on the needs cleaning flag.logAppenders[previousIndex].statusOrdered(LogBufferDescriptor.NEEDS_CLEANING); That would simulate a release operation. But I don't see a corresponding acquire operation in the offer() method\npublic boolean offer(final DirectBuffer buffer, final int offset, final int length)\n    {\n        boolean succeeded = false;\n       // My comment: Where is the load barrier, before accessing the activeIndex to match the corresponding store barrier on the previous LogAppender's status flag.\n        final LogAppender logAppender = logAppenders[activeIndex];\n        final int currentTail = logAppender.tailVolatile();\n       .....\n    }\n. Hmm - I still don't understand how it used to work. From https://github.com/real-logic/Aeron/commit/ac161cc9c71b2b22254b1c5435d28473784c728, before this diff the code looked like:\npublic boolean tryClaim(final int length, final BufferClaim bufferClaim)\n     {\n         boolean succeeded = false;\n         // My comment: No load barrier, before loading activeIndex. The compiler could legally keep\n         // activeIndex in a register forever.\n         final LogAppender logAppender = logAppenders[activeIndex];\n         ....\n   }\nprivate void nextTerm()\n     {\n      .......\n      // My comment: plain old assignment to activeIndex.\n      activeIndex = nextIndex;\n      // My comment: The only store barrier after the write to activeIndex is to the PREVIOUS log appender's state buffer's\n      // NEEDS_CLEANING field. There is no corresponding load barrier, or any kind of load barrier for that \n     // matter before using activeIndex in tryClaim or Offer.\n      logAppenders[previousIndex].statusOrdered(LogBufferDescriptor.NEEDS_CLEANING);\n     }\n. Thanks Todd. But is it not legal for a caller to tryClaim/offer to keep activeIndex in a register and never refresh it? I understand that if the activeIndex has not been refreshed, it would just fail instead of doing anything harmful. However what prevents it from failing forever (again imagine that the compiler decided to keep activeIndex in a register forever)? Also I am not sure if flow control will prevents it from actually trying to do a LOCK XADD on a buffer that is being cleaned? AFAIT flow control means a buffer 2 rotations back will be cleaned - logAppenders[previousIndex].statusOrdered(LogBufferDescriptor.NEEDS_CLEANING). But what happens if two other producers cause the buffers to be rotated twice, while this one producer still has an old value of activeIndex. Now this producer which has a cached (in a register) copy of activeIndex will race with the background thread which is doing a memset of 0 on the buffer. So the cleaner could do a memset to 0, and then this producer with a stale value of activeIndex would do a LOCK XADD of the tail and it would succeed. So there are two possibilities:\ni) The producer has a cached in register copy of activeIndex and will keep failing forever potentially. If this producer keeps calling offer() and did not trigger the nextTerm() call it could happen.\nii) Again if the producer only calls offer() there is a possibility of corruption. I am less certain about that, but seems like it's possible.\n. The arcane art of multi threaded programming - so difficult to test these things too.\n. +1\n. ",
    "mikeb01": "What will happen to the state of the LogBuffer if client code calls tryClaim(), but never calls BufferClaim.commit().  Would it be useful to support passing in a lambda and ensure that the commit is always called?\n```\npublic boolean tryClaim(final int length, final BufferClaim bufferClaim, Consumer callback)\n{\n    boolean claimed = tryClaim(length, bufferClaim);\n    if (claimed)\n    {\n        try\n        {\n            callback.accept(bufferClaim);\n        }\n        finally\n        {\n            bufferClaim.commit();\n        }\n    }\nreturn claimed;\n\n}\n```\n. You can work around the capturing, by allowing arguments to be floated through.  The Disruptor's EventSink interface does this.  See the description about using Java 8, it has a couple of notes around capturing Lambdas.\n. Not in the second example, where a method reference is used.\n. I supported up to three and varargs (although varargs will potentially allocate).  In the multi-producer case, failing to call commit/publish will leave the Disruptor (and similarly the LogBuffer - I think) in an invalid and unrepairable state.  The most common case of this occurring is when the caller fails to do their exception handling correctly (commit must be in a finally block).  With the Disruptor I recommend the publishEvent call as the default approach only only use next()/publish() if some advanced use case is required.  I would suggest something similar for Aeron.\n. I think this may be fixed by pull request #75.\n. @mjpt777 As a variant on your suggestion, perhaps negative values can be a series of errors codes, e.g:\n- -1 Not connected\n- -2 Back pressure\n- -3 some other error...\nFeels more consistent and extensible.\n. Good point, oversight on my part.\n. Could you run ifconfig and post the output?\n. This is caused by my recent merge.  The NetworkUtil.determineDefaultMulticastInterface() is no longer used and the algorithm used to pick an interface is subtly different.  Such that it will fail on some systems and not others (e.g. is passes on both my mac and linux boxen).  I'm going to soften the constraints of that test so that it is not flaky.\nWould you mind trying this patch? https://gist.github.com/mikeb01/f8663a2184892d374b2f#file-unittest-patch\n. I'll have a look at this.  There is an alternate URL format that supports IPv4 and IPv6.  I'll make sure that it sets the family correctly.\n. @dameiss Can you try the pull request linked above (#75)?  I don't get the same behaviour on my Linux box, so I can be sure that change fixes the problem.\n. We could change the URI parser to reject invalid arguments, but I suspect that it would be possible to trigger the same behaviour without weird parameters.  Due to defaulting of some values (like local address), so that canonical URI are the same, but the initial strings are different.\n. I'll fix up the parsing/rejecting of unknown fields in the URI.  I'll raise a separate bug for that.\n. Don't take this pull request yet.  Doesn't compile on Linux or with GCC.  Fixing.\n. The update should allow it to compile on Linux with GCC (#169 not withstanding).\n. Closing this as I'm moving stuff about in my repo, will reopen if desired.\n. Yep fixed.\n. Yay!  This will be really useful.  Also worth considering what should happen if a RuntimeException is thrown from a callback (advance or not).\n. Good call, even if there was only 2 cases (rewind, commit) an enum is a better idea.  Has a clearer description of intent.\n. Personally I think the other one (with unspecified term length) should use the value configured on the media driver's context as it keeps things simple and easy to predict what size it will use.\n. That would make the most sense.  I wonder if the second should succeed if the length is unspecified?  And just pick up the previously specified value?\n. I've attached the output of the media driver logs, when I use a channel per stream.  Interesting difference is that the non-working case seems to go through a cycle of:\nAvailable Image -> Unavailable Image -> Remove Image -> Available Image...\n[1836079.127465] CMD_OUT_AVAILABLE_IMAGE...\n[1836089.834921] CMD_OUT_ON_UNAVAILABLE_IMAGE...\n[1836089.843762] CMD_OUT_AVAILABLE_IMAGE...\n[1836099.843195] REMOVE_IMAGE_CLEANUP...\n[1836100.843985] CMD_OUT_ON_UNAVAILABLE_IMAGE...\n[1836100.875779] CMD_OUT_AVAILABLE_IMAGE...\n[1836110.860664] REMOVE_IMAGE_CLEANUP...\n[1836111.860625] CMD_OUT_ON_UNAVAILABLE_IMAGE...\nmedia-driver-admin2.txt\n. This happens during start up, so a number of heartbeat messages are sent (around 100/s).  I'll lower that and try again.  I'll also have a look at the depth of the OS receive buffers.\n. I've reduced the number of messages per second down to 10-20 per second.  These are mainly heartbeats, so very small (<30 bytes).  Still the same issue.  The Send-Q and Recv-Q values from netstat are 0.  I've attached a full capture of AeronStat and another grep of the media driver admin logs.\naeron-stat.txt\naeron-media-driver3.txt\n. I had attempted to increase the imageLivenessTimeout, but actually made is shorter.  I've removed the setting and I'm rerunning.  However, I was seeing the images being added and removed quickly before that too.\nI'll post new logs.  Note that the media driver log was filtered by a specific streamId, which was one of the ones have issues.  I'll post the full log next time.\n. For a bit more background this is testing our whole app (all 40 services) on a fairly powerful workstation (28 logical cores, 64GB ram).  I've had to use a IdleStrategy that does a Thread.sleep(1) in order to reduce the CPU load.  Lots of threads (40) spinning on LockSupport.parkNanos() does result in high CPU usage (load average around 20).  I'v also reduced the termBufferLength to 64K otherwise it runs out of memory.\n. I've made the services start up sequentially and added a 30ms pause.  Still see the same issue, but on fewer topics.  Moving back to SHARED for threading mode to see if that reduces load on the system.\n. I see the same problem with both.  Serialising and slowing start up has improved it, but now it takes >13 minuntes to start my system instead of ~3.5.\n. BackOff...\n. That still isn't working for me.  I think the basic problem is that I'm CPU constrained.  Switching to NoOp pushes up the load average.  I'm still confused as to why it works fine when I put all of the topics on separate channels.\n. By receiver do you mean for polling subscriptions?\n. I've currently got that one set to backoff, but the numbers are very small so it is probably just falling back to LockSupport.parkNanos().\n. At this point I'm not really concerned about latency or performance in general.  I really need a low resource use configuration so that I can have a functional system on dev workstations and in CI.  I will have a significantly different configuration in production and performance testing environments where I'll have the processes spread across multiple machine and far less resource contention.\n. Will do on Friday, have an afternoon allocated for Aeron time.\n. I've done a fair amount of experimentation today and found that if I distribute the publications across 50 addresses our system works and with 49 it fails.  I've used logging on the media driver to capture all of the ADD_PUBLICATION and ADD_SUBSCRIPTION events and built a test with that set of connections (tests are attached).\nThe test creates all of the subscriptions and publications then does a quick set intersection to ensure that there are no publications that don't have a subscription (some of the publications are commented out to make sure this criteria is met).  A thread is spawned that consumes all of the messages from the subscriptions, while the main thread publishes 1 message a second to each of the publications and counts how many of those publications reject the message with a NOT_CONNECTED response.  I've attached 2 tests PubSubTest_49Addresses.java and PubSubTest_50Addresses.java.  The 49 address implementation shows that 6 of the 592 publications report NOT_CONNECTED and with the 50 addresses variant only 1 does[1].  The test expects a media driver to be already running.\ntests.zip\n[1] Worth noting that while 50 addresses allows the particular smoke test to run on our system, it is still not 100%.  My test isn't exercising that topic(s) that would be broken.\n. I've traced this to a bug in BiInt2ObjectMap.  Here is a test case the replicates the issue:\n```\n@Test\npublic void shouldPutAndGet() throws Exception\n{\n    map.put(721632679, 333118496, \"a\");\n    assertThat(map.get(721632679, 333118496), is(\"a\"));\nmap.put(721632719, -659033725, \"b\");\nassertThat(map.get(721632719, -659033725), is(\"b\"));\n\nmap.put(721632767, -235401032, \"c\");\nassertThat(map.get(721632767, -235401032), is(\"c\"));\n\nmap.put(721632839, 1791470537, \"d\");\nassertThat(map.get(721632839, 1791470537), is(\"d\"));\n\nmap.put(721633069, -939458690, \"e\");\nassertThat(map.get(721633069, -939458690), is(\"e\"));\n\nmap.put(721633127, 1620485039, \"f\");\nassertThat(map.get(721633127, 1620485039), is(\"f\"));\n\nmap.put(721633163, -1503337805, \"g\");\nassertThat(map.get(721633163, -1503337805), is(\"g\"));\n\nmap.put(721633229, -2073657736, \"h\");\nassertThat(map.get(721633229, -2073657736), is(\"h\"));\n\nmap.put(721633255, -1278969172, \"i\");\nassertThat(map.get(721633255, -1278969172), is(\"i\"));\n\nmap.put(721633257, -1230662585, \"j\");\nassertThat(map.get(721633257, -1230662585), is(\"j\"));\n\nmap.put(721633319, -532637417, \"k\");\nassertThat(map.get(721633319, -532637417), is(\"k\"));\n\n}\n```\n. I'll pick it up on Monday.\n. Fix is all good, closing.\n. I'm running with the Debug configuration.  If you are using the Release config the bounds checking is disabled.  That might be why it doesn't fail for you.\n. As long as all of the bounds checking happens in header, we can just undef DISABLE_BOUNDS_CHECKS.  I'll have a look this evening.\n. Your change fixes the test.  I've made a change to the CMake build files so that the DISABLE_BOUNDS_CHECKS is only set on the production code, but not the tests.  Even in 'Release' configuration.\n. I can reproduce is fairly reliably in our test environments (running it concurrently on 25+ servers makes finding these issues pretty easy).  I'll try the window length option next week.\nThe particular topic that experiences this issue gets a burst of traffic just after the start up process completes (priming a bunch of caches with some reference data).\nThis was on the latest release (Aeron 0.9.8 & Agrona 0.5.1).\n. The environment where I've been testing is probably running with defaults for buffer sizes, but I will double check when I'm back in the office.\nIn this environment, I'm not really worried about performance, so a few naks and occasional back pressure is okay as long as the messages get through within our various application timeouts.\n. In some ways it's quite useful to have a bit of packet loss during our acceptance test runs, gives us confidence that the system will run okay in the face of real packet loss in production.\n. Didn't get a chance to test this week, will test again this Friday hopefully.\n. Closing.  I'm not seeing over cleaning occurring after setting aeron.rcv.initial.window.length to termLength/2.  I haven't tried the updated build as the configuration seems to be sufficient.\n. I've attached the publication and the image data (aeron-data.zip) for the specified stream.  The subscriptions are in separate process to the publication.  A few of the subscriptions share a process.  The media driver is also in separate process too.\n. Is there any other information that would be useful for debugging this issue.  I can do some re-testing on Friday.\n. Having the Aeron data files sit around after shut down is very useful...\n20:33:27 - Aeron Stat\n=========================\n  0:           88,291,136 - Bytes Sent\n  1:          899,057,984 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:              266,102 - NAKs sent\n  6:              260,676 - NAKs received\n  7:           12,875,602 - Status Messages sent\n  8:           12,805,048 - Status Messages received\n  9:           25,018,505 - Heartbeats sent\n 10:           24,203,284 - Heartbeats received\n 11:              100,482 - Retransmits sent\n 12:                4,978 - Flow control under runs\n 13:               55,875 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:              493,189 - Client keep-alives\n 18:                  439 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    1 - send-channel: aeron:udp?group=239.193.0.1:10000|interface=172.29.1.1\n. I plan to do some more testing tomorrow, so will do.  I can replicate this fairly easily.  Around half of the ~60 application instances in CI run into this problem.\n. Our setup is below.  The OS buffer memory max size is probably less than is specified.  As an aside, I wonder if it would be worthwhile having the configuration options stored as counters so they could be retrieved via AeronStat.\n```\n        System.setProperty(\"aeron.event.log\", \"CMD_IN_ADD_PUBLICATION,CMD_IN_ADD_SUBSCRIPTION\");\n        System.setProperty(\"aeron.socket.so_sndbuf\", \"2097152\");\n        System.setProperty(\"aeron.socket.so_rcvbuf\", \"2097152\");\n        System.setProperty(\"aeron.rcv.buffer.length\", \"16384\");\n        System.setProperty(\"agrona.disable.bounds.checks\", \"true\");\n        System.setProperty(\"aeron.term.buffer.sparse.file\", \"true\");\n    final int termBufferLength = 64 * 1024;\n\n    final MediaDriver.Context ctx = new MediaDriver.Context()\n            .threadingMode(ThreadingMode.SHARED)\n            .sharedIdleStrategy(SlowIdleStrategy.INSTANCE)\n            .imageLivenessTimeoutNs(10_000_000_000L)\n            .publicationTermBufferLength(termBufferLength)\n            .initialWindowLength(termBufferLength / 2);\n\n```\n. I've run the 0.9.9-SNAPSHOT version through our CI system and I get the same sort of failure.\nAeronStat (stream: -1762877036 is the one of interest here):\n```\n02:35:40 - Aeron Stat\n=========================\n  0:           94,747,936 - Bytes sent\n  1:           97,622,944 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:               37,100 - NAKs sent\n  6:               37,100 - NAKs received\n  7:            1,393,407 - Status Messages sent\n  8:            1,393,634 - Status Messages received\n  9:            2,696,965 - Heartbeats sent\n 10:            2,472,784 - Heartbeats received\n 11:               11,251 - Retransmits sent\n 12:                1,158 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:               55,230 - Client keep-alives\n 18:                  433 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n1306:               65,792 - pub-lmt: 896 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n 1307:               33,024 - snd-pos: 896 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n 1480:               33,024 - sub-pos: 76 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1481:               33,024 - sub-pos: 201 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1482:               33,024 - sub-pos: 265 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1483:               33,024 - sub-pos: 302 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1484:               33,024 - sub-pos: 379 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1485:               33,024 - sub-pos: 491 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1486:               33,024 - sub-pos: 711 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1487:               33,024 - sub-pos: 770 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1488:                  576 - sub-pos: 1136 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @576\n 1489:               33,024 - rcv-hwm: 1182 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n 1490:               33,024 - rcv-pos: 1182 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n 1513:               33,024 - sub-pos: 1207 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @24,160\n 1578:               33,024 - sub-pos: 1261 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @24,256\n 1906:               33,024 - sub-pos: 1492 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @33,024\n 2090:               33,024 - sub-pos: 1639 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @33,024\n 2217:               33,024 - sub-pos: 1745 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @33,024\n 2332:               33,024 - sub-pos: 1848 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @33,024\n 2360:               33,024 - sub-pos: 1875 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @33,024\n 2391:               33,024 - sub-pos: 1913 926135193 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @33,024\n```\nThe log buffer data (aeron-buffer.zip) is also available.\nIs there any other data that would be useful to capture?\n. Thanks @tmontgomery.  The subscription should still be polled.  I forgot to capture it on the latest run, but our code hasn't changed since the previous so I would expect it to be.\nI'm assuming that the information around pub/sub adds/removes as well as the available/unavailable images is available via logging.  I'll have a look at getting that switched on and do another run.\n. I'll look to capture the following:\nCMD_IN_ADD_PUBLICATION\nCMD_IN_REMOVE_PUBLICATION\nCMD_IN_ADD_SUBSCRIPTION\nCMD_IN_REMOVE_SUBSCRIPTION\nCMD_OUT_PUBLICATION_READY\nCMD_OUT_AVAILABLE_IMAGE\nCMD_OUT_ON_UNAVAILABLE_IMAGE\n. Just look at that now.  Is there a reason why you configure the agent using a system property?  The typical approach for configuring the java would be:\n-javaagent:agent.jar=aeron.event.log=admin,FRAME_IN\n. I'll do some more digging on Friday.  I think the zero length messages are intentional, but I will need to double check.  I'll also run through the code to make sure there are no silent exceptions occurring.\n. Are the joining positions the values after the @ in AeronStat?\n. I don't think that is too big a deal.  With out system it is possible that a subscription could occur after publication has been created and messages have already been sent.  In that case our late join capability should kick in to provide redeliver messages where enabled and in other cases the message loss is inconsequential.\nI'm assuming that for a multicast channel, a subscription can join a stream at any point and receive messages from that point onward.  Messages delivered prior to joining won't be seen by the new subscription, but for messages sent after, the new subscription will be included in the set of Subscriptions that can create back-pressure.\n. I'll have to compare to what I see locally.  I am running ~60 instances of the application each with a separate media driver on separate virtual machines.  Each is using a dummy interface to keep all of the multicast traffic local to that instance.  However they will be sharing multicast addresses so I'll make sure that multicast traffic is not leaking across somehow.\n. Checking my acronyms, FD == file descriptor and VM == virtual memory?  I'll double check the file descriptor ulimits, but they should be okay.  As for memory, we have 16GB allocated to /dev/shm and during a run have used <1GB of that.  I'll grab some more data when I do some more runs through tomorrow.\n. Another run through today.  File descriptors and memory looks okay\n[barkerm@lddev-build-sas018 ~]$ sysctl fs.file-nr\nfs.file-nr = 22560  0   3265313\n[barkerm@lddev-build-sas018 ~]$ pgrep -f name=aeron-media-driver\n22694\n[barkerm@lddev-build-sas018 ~]$ lsof -a -p 22694 |  wc -l\n5\n[barkerm@lddev-build-sas018 ~]$ cat /proc/meminfo \nMemTotal:       32878504 kB\nMemFree:        16942308 kB\nBuffers:          329116 kB\nCached:          3647380 kB\n...\nFor this run it was stream -215825341 that failed.\nAeronStat:\n```\n01:35:57 - Aeron Stat\n=========================\n  0:          101,125,472 - Bytes sent\n  1:          103,091,488 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:               14,199 - NAKs sent\n  6:               14,199 - NAKs received\n  7:            1,475,304 - Status Messages sent\n  8:            1,475,030 - Status Messages received\n  9:            2,870,423 - Heartbeats sent\n 10:            2,781,648 - Heartbeats received\n 11:                4,989 - Retransmits sent\n 12:                  831 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:               58,353 - Client keep-alives\n 18:                  433 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n78:               64,928 - pub-lmt: 48 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n79:               32,160 - snd-pos: 48 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n1285:               32,160 - rcv-hwm: 1104 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n1286:               32,160 - rcv-pos: 1104 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n1289:               32,160 - sub-pos: 1017 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1327:                  288 - sub-pos: 1127 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @288\n1873:               32,160 - sub-pos: 1374 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @6,848\n2115:               32,160 - sub-pos: 1583 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,160\n2211:               32,160 - sub-pos: 1658 1039395103 -215825341 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,160\n```\nI've included the publication and image files, along with the event log in \naeron-data.zip.\nInterestingly the image does go unavailable during the run, then becomes available again.\n[3225040.590694] CMD_OUT_AVAILABLE_IMAGE [150/150]: 1039395103:-215825341 [0:1470:1017] \"172.29.1.1:32933\" [1018]\n[3225050.909230] CMD_OUT_ON_UNAVAILABLE_IMAGE [73/73]: aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 -215825341 [1018]\n[3225051.761203] CMD_OUT_AVAILABLE_IMAGE [150/150]: 1039395103:-215825341 [0:1289:1017] \"172.29.1.1:32933\" [1104]\n[3225054.078744] CMD_OUT_AVAILABLE_IMAGE [150/150]: 1039395103:-215825341 [0:1329:1127] \"172.29.1.1:32933\" [1018]\n[3225054.078805] CMD_OUT_AVAILABLE_IMAGE [150/150]: 1039395103:-215825341 [0:1327:1127] \"172.29.1.1:32933\" [1104]\n[3225079.567818] CMD_OUT_AVAILABLE_IMAGE [150/150]: 1039395103:-215825341 [0:1873:1374] \"172.29.1.1:32933\" [1104]\n[3225114.814036] CMD_OUT_AVAILABLE_IMAGE [150/150]: 1039395103:-215825341 [0:2115:1583] \"172.29.1.1:32933\" [1104]\n[3225123.918616] CMD_OUT_AVAILABLE_IMAGE [150/150]: 1039395103:-215825341 [0:2211:1658] \"172.29.1.1:32933\" [1104]\nI've also added a bunch of additional exception handling on the subscriber side, with logging.  The logs are quiet, so it doesn't seem to be an exception in the handler breaking it.\nI also tracked down the zero length messages.  The run that I've included the data from still has those messages, but I've had subsequent runs without the zero length messages and I still see the same behaviour.\n. Retesting with 0.9.10-SNAPSHOT, still seeing the same issue:\n```\n15:44:09 - Aeron Stat\n=========================\n  0:           95,839,872 - Bytes sent\n  1:           97,988,320 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:               14,815 - NAKs sent\n  6:               14,815 - NAKs received\n  7:            1,434,072 - Status Messages sent\n  8:            1,434,250 - Status Messages received\n  9:            2,785,669 - Heartbeats sent\n 10:            2,695,995 - Heartbeats received\n 11:                5,692 - Retransmits sent\n 12:                  239 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:               57,004 - Client keep-alives\n 18:                  423 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    1 - send-channel: aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1\n721:               64,800 - pub-lmt: 880 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n722:               32,032 - snd-pos: 880 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n858:               32,032 - sub-pos: 1153 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @64\n1323:               32,032 - sub-pos: 73 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1324:               32,032 - sub-pos: 171 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1325:               32,032 - sub-pos: 276 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1326:               32,032 - sub-pos: 300 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1327:               32,032 - sub-pos: 382 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1328:               32,032 - sub-pos: 542 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1329:               32,032 - sub-pos: 848 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1330:               32,032 - sub-pos: 855 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1331:               32,032 - rcv-hwm: 1009 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n1332:               32,032 - rcv-pos: 1009 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 \n1459:                    0 - sub-pos: 1099 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @0\n1553:               32,032 - sub-pos: 1213 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @8,320\n1794:               32,032 - sub-pos: 1358 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,032\n2073:               32,032 - sub-pos: 1575 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,032\n2211:               32,032 - sub-pos: 1685 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,032\n2320:               32,032 - sub-pos: 1786 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,032\n2350:               32,032 - sub-pos: 1812 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,032\n2375:               32,032 - sub-pos: 1848 -747111497 -1762877036 aeron:udp?endpoint=239.193.0.1:10000|interface=172.29.1.1 @32,032\n```\n. Increased imageLivenessTimeout to 30 seconds and the system appears to work.\n. @tmontgomery I unfortunately didn't get the logs on the run that managed to start, so I'm not sure if the unavailable image events went away or not.  I'll do some more runs and capture that information.\nWe are using Subscription.poll.  Let me know if there is any additional logging I can include to try and track down what it going on.  It is pretty easy for me to repeat the failure.\n. I'll give a run next week.\n. @mjpt777 Not to my knowledge.  Certainly in the cases where the system failed to start I didn't see any exceptions originating from Aeron.  Would the IllegalStateException surface in the registered error handler?\n. I don't have any to hand, but I can produce some later this week.\n. Which version do you want me to gather data from?  Latest release or latest snapshot?\n. I think this is now fixed.  3 runs with the latest snapshot and the problem is yet to recur.  Not sure if it is due to less aggressive spinning (b8d83be5baeb4eb731a6cd632d5039204b173fb3) or using correlationIds in addImage (bbaf75dba0d6f42435d1ca9bfc9628559e85c9ed).\n. Have a look at #244 and #234, these may relate to the issue that you're seeing.\n. @mjpt777 I haven't been an Eclipse user for over a year.  I've removed the Eclipse instructions as they are out of date.\n. My preference would be for there to be some way to wait for a driver to have started.  At the moment I have a loop that catches the IllegalStateException thrown when trying to construct Aeron client and retries until it succeeds or times out.\nIf you want to have it fail immediately for simplicity's sake, then that would be okay too.  However, for that case a checked exception like DriverUnavailable would be better than IllegalStateException.\n. In the same place, check out pull requests #261 and real-logic/Agrona#68.\n. Image, publication and cnc file attached aeron-data.zip.\n. @grzegorz-gierlach I thought the issue might have the same cause.  I'll pick up the head build and test again next week.\n. Closing this one.  Started successfully with version 1.0.1.  Think that #268 has fixed it.\n. Thank you for the fix.. I'll have a look at this.. Excellent.. ",
    "sirinath": "Great. is it possible to have some more documentation on Agrona? May be a Wiki into like in Aeron.\n. I don't think I am the best person to do the PR. \n. A pure safe .net version so you can communicated with clients written in a .net language. It should have read as \"CIL\". \"CLI\" was a typo. \n. Basically run VS C++ to generate CIL/CLI/CLR/.Net target using /clr:safe option fixing the performance regression (this is the hard part) which is your strong suite. Perhaps you can publish on NuGet also one are recreations are fixed.\n. ",
    "mingfai": "I think the scope of the dependency is not correct:\naeron-client has \"compile scope\" dependency to aeron-common:\n<dependency>\n      <groupId>uk.co.real-logic</groupId>\n      <artifactId>aeron-common</artifactId>\n      <version>0.1-SNAPSHOT</version>\n      <scope>compile</scope>\n    </dependency>\nit should be runtime/default dependency.\nIt's easy to workaround, just add the aeron-common dependency explicitly.\n. ",
    "kspinka": "If all users on a multi-user system are to be \"encouraged\" to share the same media driver, then the permissions need to be fixed.\nBut take your pick, as at the moment neither works:\n1. Allow multiple instances (precluded only today by single-path situation)\n2. Change permissions on the single-instance concept and trust your neighbors (security concerns)\nI personally like the idea of security first, hence the patch.\n. Thinking about this further, there are many reasons one may desire multiple media drivers.  Here are a few:\n1. More network capacity than a single-core (thread) can satisfy: remember that even in 3-threaded mode, there is only 1 each of Sender and Receiver instances in the media driver.\n2. NUMA isolation: even on simple 2-node boxes, I would be motivated to run a distinct Aeron instance per-node.  NUMA I/O bus locality: self-explanatory, multiple NICs attached to distinct nodes.\n3. Traffic prioritization: take a basic case of unicast fan-out.  You certainly wouldn't want your fan-out Media Driver to be the same as your source Media Driver because there would be obvious priority issues.\n4. Kernel module media driver that is shared system wide (remember, everyone is just spinning on pages, not making syscalls beyond the channels and mappings) vs userspace instances.\n5. Distinct media driver per installed network interface type: Infiniband, PCI-E, Ethernet, Omni-Path.  They may even come from other vendors.\nBut this is a long story about other use cases.  My original complaint still stands that we should choose one concept or the other, because neither works (sharing amongst uid's nor distinct per-uid).\n. @exercitussolus If I understand you correctly, my proposal would be transparent to you since you're using the same uid on all processes.\nAll, please remember this is also about adoption.  In my particular case, I had setup a test case in a development cluster and then asked a team member to verify my results.  But he was put-off by wasting time trying to understand why he was unable to simply run the test cases because the Aeron directory was already created and owned by my uid.\n. @tmontgomery I think we close this in favor of something more complete.  This was only meant to be temporary for adoption purposes, but it seems my environment where developers are sharing hosts may be a minority case.\n. ",
    "btorpey": "Many thanks -- that does fix the C++ build.\nHere's a snip from Java build:\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers(DriverConductorTest.java:287)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutSubscriptionOnKeepAlive FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldNotTimeoutSubscriptionOnKeepAlive(DriverConductorTest.java:409)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber(DriverConductorTest.java:262)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownSessionId FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldErrorOnRemoveChannelOnUnknownSessionId(DriverConductorTest.java:313)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveMultipleStreams FAILED\n    Wanted but not invoked:\n    senderProxy.closePublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveMultipleStreams(DriverConductorTest.java:237)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveMultipleStreams(DriverConductorTest.java:237)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownStreamId FAILED\n    org.mockito.exceptions.verification.TooManyActualInvocations: \n    eventLogger.logException();\n    Wanted 1 time:\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyExceptionLogged(DriverConductorTest.java:443)\n    But was 2 times. Undesired invocation:\n    -> at uk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:324)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyExceptionLogged(DriverConductorTest.java:443)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldErrorOnRemoveChannelOnUnknownStreamId(DriverConductorTest.java:331)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutSubscription FAILED\n    Wanted but not invoked:\n    receiverProxy.addSubscription(, 10);\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyReceiverSubscribes(DriverConductorTest.java:433)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyReceiverSubscribes(DriverConductorTest.java:433)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldTimeoutSubscription(DriverConductorTest.java:393)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutPublicationOnKeepAlive FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldNotTimeoutPublicationOnKeepAlive(DriverConductorTest.java:371)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddMultipleStreams FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddMultipleStreams(DriverConductorTest.java:203)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddMultipleStreams(DriverConductorTest.java:203)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSingleSubscription FAILED\n    Wanted but not invoked:\n    clientProxy.operationSucceeded(1429);\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSingleSubscription(DriverConductorTest.java:177)\nHowever, there were other interactions with this mock:\n-> at uk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:333)\n    at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSingleSubscription(DriverConductorTest.java:177)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutPublication FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldTimeoutPublication(DriverConductorTest.java:356)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveSingleStream FAILED\n    Wanted but not invoked:\n    senderProxy.closePublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveSingleStream(DriverConductorTest.java:216)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveSingleStream(DriverConductorTest.java:216)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSinglePublication FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:471)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSinglePublication(DriverConductorTest.java:163)\nuk.co.real_logic.aeron.driver.UdpChannelTest > shouldHandleCanonicalFormForMulticastCorrectly SKIPPED\nuk.co.real_logic.aeron.driver.UdpChannelTest > shouldParseValidMulticastAddress SKIPPED\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldSendMultipleDataFramesPerDatagramUnicastFromSourceToReceiver FAILED\n    java.lang.IllegalStateException: Failed to set SO_RCVBUF: attempted=131072, actual=124928\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:102)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:58)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldSendMultipleDataFramesPerDatagramUnicastFromSourceToReceiver(SelectorAndTransportTest.java:185)\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldSendEmptyDataFrameUnicastFromSourceToReceiver FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:112)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:58)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldSendEmptyDataFrameUnicastFromSourceToReceiver(SelectorAndTransportTest.java:135)\nCaused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:77)\n        ... 2 more\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldHandleSmFrameFromReceiverToSender FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:112)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:58)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldHandleSmFrameFromReceiverToSender(SelectorAndTransportTest.java:236)\nCaused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:77)\n        ... 2 more\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldHandleBasicSetupAndTeardown FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:112)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:58)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldHandleBasicSetupAndTeardown(SelectorAndTransportTest.java:103)\nCaused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:77)\n        ... 2 more\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldNotOverwriteDataFrameWithHeartbeat FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:145)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:160)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldOverwriteHeartbeatWithDataFrame FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:145)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:160)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldHandleNonZeroTermOffsetCorrectly FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:145)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:160)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldInsertDataIntoLogAfterInitialExchange FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:145)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:160)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldCreateRcvTermAndSendSmOnSetup FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:145)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:160)\nResults: FAILURE (77 tests, 53 successes, 22 failures, 2 skipped)\n77 tests completed, 22 failed, 2 skipped\n:aeron-driver:test FAILED\nFAILURE: Build failed with an exception.\n- What went wrong:\n  Execution failed for task ':aeron-driver:test'.\n\nThere were failing tests. See the report at: file:///shared/Aeron/aeron-driver/build/reports/tests/index.html\n- Try:\n  Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\nTotal time: 19.425 secs\n. Distro is CentOS 6.5.  Both selinux and iptables are disabled.\n[/shared/Aeron] uname -a \nLinux centos65 2.6.32-431.el6.x86_64 #1 SMP Fri Nov 22 03:15:09 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux\n[/shared/Aeron] lsb_release -a\nLSB Version:    :base-4.0-amd64:base-4.0-noarch:core-4.0-amd64:core-4.0-noarch:printing-4.0-amd64:printing-4.0-noarch\nDistributor ID: CentOS\nDescription:    CentOS release 6.5 (Final)\nRelease:    6.5\nCodename:   Final\n[/shared/Aeron] java -version\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b17)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\nAlso, ports didn't seem to be in use at the time:\n[/shared/Aeron] lsof -i :40123\n[/shared/Aeron]\n. Fair enough, and I've confirmed that I don't see those errors on mac.\nHappy to help get it working on RH, that's the only platform I really care about.\nP.S.  Looks like both Agrona and Aeron download gradle -- perhaps because Agrona uses https: and Aeron uses http: url.  Not a biggie, but I noticed it because I was on a cell network...\n. OK-- updated Agrona and java build runs on OSX.\nOn CentOS I get the following:\n```\n:aeron-driver:test\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers(DriverConductorTest.java:286)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutSubscriptionOnKeepAlive FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldNotTimeoutSubscriptionOnKeepAlive(DriverConductorTest.java:408)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber(DriverConductorTest.java:261)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownSessionId FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldErrorOnRemoveChannelOnUnknownSessionId(DriverConductorTest.java:312)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveMultipleStreams FAILED\n    Wanted but not invoked:\n    senderProxy.closePublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveMultipleStreams(DriverConductorTest.java:236)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveMultipleStreams(DriverConductorTest.java:236)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownStreamId FAILED\n    org.mockito.exceptions.verification.TooManyActualInvocations: \n    eventLogger.logException();\n    Wanted 1 time:\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyExceptionLogged(DriverConductorTest.java:442)\n    But was 2 times. Undesired invocation:\n    -> at uk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:324)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyExceptionLogged(DriverConductorTest.java:442)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldErrorOnRemoveChannelOnUnknownStreamId(DriverConductorTest.java:330)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutSubscription FAILED\n    Wanted but not invoked:\n    receiverProxy.addSubscription(, 10);\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyReceiverSubscribes(DriverConductorTest.java:432)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyReceiverSubscribes(DriverConductorTest.java:432)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldTimeoutSubscription(DriverConductorTest.java:392)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutPublicationOnKeepAlive FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldNotTimeoutPublicationOnKeepAlive(DriverConductorTest.java:370)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddMultipleStreams FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddMultipleStreams(DriverConductorTest.java:202)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddMultipleStreams(DriverConductorTest.java:202)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSingleSubscription FAILED\n    Wanted but not invoked:\n    clientProxy.operationSucceeded(1429);\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSingleSubscription(DriverConductorTest.java:176)\nHowever, there were other interactions with this mock:\n-> at uk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:333)\n    at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSingleSubscription(DriverConductorTest.java:176)\n\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutPublication FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldTimeoutPublication(DriverConductorTest.java:355)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveSingleStream FAILED\n    Wanted but not invoked:\n    senderProxy.closePublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveSingleStream(DriverConductorTest.java:215)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveSingleStream(DriverConductorTest.java:215)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSinglePublication FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSinglePublication(DriverConductorTest.java:162)\nuk.co.real_logic.aeron.driver.UdpChannelTest > shouldHandleIpV6CanonicalFormForMulticastCorrectly SKIPPED\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldSendMultipleDataFramesPerDatagramUnicastFromSourceToReceiver FAILED\n    java.lang.IllegalStateException: Failed to set SO_RCVBUF: attempted=131072, actual=124928\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:101)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldSendMultipleDataFramesPerDatagramUnicastFromSourceToReceiver(SelectorAndTransportTest.java:184)\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldSendEmptyDataFrameUnicastFromSourceToReceiver FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:111)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldSendEmptyDataFrameUnicastFromSourceToReceiver(SelectorAndTransportTest.java:134)\n    Caused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:76)\n        ... 2 more\n\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldHandleSmFrameFromReceiverToSender FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:111)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldHandleSmFrameFromReceiverToSender(SelectorAndTransportTest.java:235)\n    Caused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:76)\n        ... 2 more\n\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldHandleBasicSetupAndTeardown FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:111)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldHandleBasicSetupAndTeardown(SelectorAndTransportTest.java:102)\n    Caused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:76)\n        ... 2 more\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldNotOverwriteDataFrameWithHeartbeat FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldOverwriteHeartbeatWithDataFrame FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldHandleNonZeroTermOffsetCorrectly FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldInsertDataIntoLogAfterInitialExchange FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldCreateRcvTermAndSendSmOnSetup FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nResults: FAILURE (90 tests, 67 successes, 22 failures, 1 skipped)\n90 tests completed, 22 failed, 1 skipped\n:aeron-driver:test FAILED\nFAILURE: Build failed with an exception.\n\n\nWhat went wrong:\nExecution failed for task ':aeron-driver:test'.\n\nThere were failing tests. See the report at: file:///shared/Aeron/aeron-driver/build/reports/tests/index.html\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n\nBUILD FAILED\nTotal time: 23.178 secs\n[/shared/Aeron] \n```\n. Did that ...\n```\n[/shared] git clone https://github.com/real-logic/Agrona.git\nInitialized empty Git repository in /shared/Agrona/.git/\nremote: Counting objects: 338, done.\nremote: Compressing objects: 100% (127/127), done.\nremote: Total 338 (delta 120), reused 277 (delta 98)\nReceiving objects: 100% (338/338), 140.29 KiB, done.\nResolving deltas: 100% (120/120), done.\n[/shared] cd Agrona\n[/shared/Agrona] ./gradlew\n:clean UP-TO-DATE\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:jar\n:javadoc\n:javadocJar\n:sourcesJar\n:assemble\n:checkstyleMain\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:checkstyleTest\n:test\n:check\n:build\n:install\nBUILD SUCCESSFUL\nTotal time: 28.497 secs\n[/shared/Agrona] cd ../Aeron\n[/shared/Aeron] ./gradlew\n:clean UP-TO-DATE\n:aeron-client:clean UP-TO-DATE\n:aeron-common:clean\n:aeron-driver:clean UP-TO-DATE\n:aeron-samples:clean UP-TO-DATE\n:aeron-system-tests:clean UP-TO-DATE\n:aeron-common:compileJava\n:aeron-common:processResources UP-TO-DATE\n:aeron-common:classes\n:aeron-common:jar\n:aeron-client:compileJava\n:aeron-client:processResources UP-TO-DATE\n:aeron-client:classes\n:aeron-client:jar\n:aeron-client:javadocJar\n:aeron-client:sourcesJar\n:aeron-client:assemble\n:aeron-client:checkstyleMain\n:aeron-common:compileTestJava\n:aeron-common:processTestResources UP-TO-DATE\n:aeron-common:testClasses\n:aeron-common:testJar\n:aeron-client:compileTestJava\n:aeron-client:processTestResources UP-TO-DATE\n:aeron-client:testClasses\n:aeron-client:checkstyleTest\n:aeron-client:test\nResults: SUCCESS (37 tests, 37 successes, 0 failures, 0 skipped)\n:aeron-client:check\n:aeron-client:build\n:aeron-common:javadocJar\n:aeron-common:sourcesJar\n:aeron-common:assemble\n:aeron-common:checkstyleMain\n:aeron-common:checkstyleTest\n:aeron-common:test\nResults: SUCCESS (123 tests, 123 successes, 0 failures, 0 skipped)\n:aeron-common:check\n:aeron-common:build\n:aeron-driver:compileJava\n:aeron-driver:processResources UP-TO-DATE\n:aeron-driver:classes\n:aeron-driver:jar\n:aeron-driver:javadocJar\n:aeron-driver:sourcesJar\n:aeron-driver:assemble\n:aeron-driver:checkstyleMain\n:aeron-driver:compileTestJava\n:aeron-driver:processTestResources UP-TO-DATE\n:aeron-driver:testClasses\n:aeron-driver:checkstyleTest\n:aeron-driver:test\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers(DriverConductorTest.java:286)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutSubscriptionOnKeepAlive FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldNotTimeoutSubscriptionOnKeepAlive(DriverConductorTest.java:408)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertNotNull(Assert.java:621)\n        at org.junit.Assert.assertNotNull(Assert.java:631)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber(DriverConductorTest.java:261)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownSessionId FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldErrorOnRemoveChannelOnUnknownSessionId(DriverConductorTest.java:312)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveMultipleStreams FAILED\n    Wanted but not invoked:\n    senderProxy.closePublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveMultipleStreams(DriverConductorTest.java:236)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveMultipleStreams(DriverConductorTest.java:236)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownStreamId FAILED\n    org.mockito.exceptions.verification.TooManyActualInvocations: \n    eventLogger.logException();\n    Wanted 1 time:\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyExceptionLogged(DriverConductorTest.java:442)\n    But was 2 times. Undesired invocation:\n    -> at uk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:324)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyExceptionLogged(DriverConductorTest.java:442)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldErrorOnRemoveChannelOnUnknownStreamId(DriverConductorTest.java:330)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutSubscription FAILED\n    Wanted but not invoked:\n    receiverProxy.addSubscription(, 10);\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyReceiverSubscribes(DriverConductorTest.java:432)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifyReceiverSubscribes(DriverConductorTest.java:432)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldTimeoutSubscription(DriverConductorTest.java:392)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutPublicationOnKeepAlive FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldNotTimeoutPublicationOnKeepAlive(DriverConductorTest.java:370)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddMultipleStreams FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddMultipleStreams(DriverConductorTest.java:202)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddMultipleStreams(DriverConductorTest.java:202)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSingleSubscription FAILED\n    Wanted but not invoked:\n    clientProxy.operationSucceeded(1429);\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSingleSubscription(DriverConductorTest.java:176)\nHowever, there were other interactions with this mock:\n-> at uk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:333)\n    at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSingleSubscription(DriverConductorTest.java:176)\n\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutPublication FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldTimeoutPublication(DriverConductorTest.java:355)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveSingleStream FAILED\n    Wanted but not invoked:\n    senderProxy.closePublication();\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveSingleStream(DriverConductorTest.java:215)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToRemoveSingleStream(DriverConductorTest.java:215)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSinglePublication FAILED\n    Wanted but not invoked:\n    senderProxy.newPublication(\n        \n    );\n    -> at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n    Actually, there were zero interactions with this mock.\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.verifySenderNotifiedOfNewPublication(DriverConductorTest.java:470)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.shouldBeAbleToAddSinglePublication(DriverConductorTest.java:162)\nuk.co.real_logic.aeron.driver.UdpChannelTest > shouldHandleIpV6CanonicalFormForMulticastCorrectly SKIPPED\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldSendMultipleDataFramesPerDatagramUnicastFromSourceToReceiver FAILED\n    java.lang.IllegalStateException: Failed to set SO_RCVBUF: attempted=131072, actual=124928\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:101)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldSendMultipleDataFramesPerDatagramUnicastFromSourceToReceiver(SelectorAndTransportTest.java:184)\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldSendEmptyDataFrameUnicastFromSourceToReceiver FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:111)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldSendEmptyDataFrameUnicastFromSourceToReceiver(SelectorAndTransportTest.java:134)\n    Caused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:76)\n        ... 2 more\n\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldHandleSmFrameFromReceiverToSender FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:111)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldHandleSmFrameFromReceiverToSender(SelectorAndTransportTest.java:235)\n    Caused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:76)\n        ... 2 more\n\nuk.co.real_logic.aeron.driver.SelectorAndTransportTest > shouldHandleBasicSetupAndTeardown FAILED\n    java.lang.RuntimeException: channel \"udp://localhost:40123\" : java.net.BindException: Address already in use\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.(UdpChannelTransport.java:111)\n        at uk.co.real_logic.aeron.driver.ReceiverUdpChannelTransport.(ReceiverUdpChannelTransport.java:57)\n        at uk.co.real_logic.aeron.driver.SelectorAndTransportTest.shouldHandleBasicSetupAndTeardown(SelectorAndTransportTest.java:102)\n    Caused by:\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.UdpChannelTransport.<init>(UdpChannelTransport.java:76)\n        ... 2 more\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldNotOverwriteDataFrameWithHeartbeat FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldOverwriteHeartbeatWithDataFrame FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldHandleNonZeroTermOffsetCorrectly FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldInsertDataIntoLogAfterInitialExchange FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldCreateRcvTermAndSendSmOnSetup FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:436)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:706)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:143)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:158)\n\nResults: FAILURE (90 tests, 67 successes, 22 failures, 1 skipped)\n90 tests completed, 22 failed, 1 skipped\n:aeron-driver:test FAILED\nFAILURE: Build failed with an exception.\n\n\nWhat went wrong:\nExecution failed for task ':aeron-driver:test'.\n\nThere were failing tests. See the report at: file:///shared/Aeron/aeron-driver/build/reports/tests/index.html\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\n\nBUILD FAILED\nTotal time: 23.178 secs\n[/shared/Aeron] \n```\n. Sorry for the delay.  System is CentOS 6.5 -- I've got mult. compilers on the machine, details at http://btorpey.github.io/blog/2015/01/02/building-clang/.\nJust updated source, and it built fine and all tests ran, but I did have to tweak LD_LIBRARY_PATH so the tests could find the right libstdc++.so.  That is a general issue with using non-bundled compilers, and is discussed at length in the blog post mentioned above.\nIf you want to include RPATH in executables you can add something like the following to your main CMakeLists.txt:\nset(CMAKE_SKIP_RPATH false)\nget_filename_component(CXXLIBS ${CMAKE_CXX_COMPILER} DIRECTORY)\nset(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS}  -Wl,-rpath,${CXXLIBS}/../lib64\")\nset(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS}  -Wl,-rpath,${CXXLIBS}/../lib64\")\nThat will make it easier for people (like me), who need to use RH/CentOS but don't want to be shackled to its outdated compilers etc.\nThanks!\n. ",
    "RuedigerMoeller": "messy task ahead :-)\n2015-03-06 21:17 GMT+01:00 Michael Drogalis notifications@github.com:\n\nI'd greatly appreciate a Maven artifact before 1.0.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/31#issuecomment-77627995.\n. drum roll\n. +1 ;) will experiment to lift aeron to an object-universe. I think I'll call it Egon :)\n. Haven't looked for a while into SBE. I thought about providing a generic SBE codec for fst-ser some time ago, this would enable to mix the convenience+productivity of a \"top down approach\" with performance and platform-neutrality of SBE's bottom up approach. However unsure on how to achieve this. Either generating SBE message layouts from classes or define a generic java-object message (don't know if this could be expressed with SBE).\n(edit: .. SBE-IR !)\n. @mjpt777 I'd disagree here. \nFirst, modelling a network connection as a stream of objects isn't that a leaky abstraction compared to what is done in the db-mapping domain.\nSecond, it depends on the productivity/flexibility/performance tradeoffs one is willing to make. \n\nSee:\nBy implementing the reactive-streams spec for kontraktor (just a few 100 lines of code) I get:\n- remotable reactive streams for free (generic remoting)\n- connectivity using tcp, websockets, [+http] for free\n- Binary encoding or Json encoding for free.\n- javascript cross platform connectivity (mostly for free)\nat a reasonable end to end performance (up to 1.8 million remoted reactive stream msg per sec). The application on top deals with object-level streams and object level async remote calls, so I can run it on a load of different topologies (incl. single process). If I add e.g. an Aeron connector, existing code will profit immediately without requiring a change.\nWill you run a low latency HFT app on that ? Probably not, but its possible to build a reasonable performing distributed application with very little amount of code and manpower, in addition level of distribution becomes kind of a deployment time decision, only pay for remoting if you actually need it.\nLifting the level of abstraction enables generic optimizations which would have to be done manually  otherwise. So top-down abstraction has upsides and downsides same as Java vs. C.\n. @mjpt777 I agree regarding semantics of Objects vs Messages. I am talking of representation. An immutable class can be semantically treated as a message.\nIf one uses the class-level representation as a foundation of encoding/message generation it has the benefit that protocol behaviour can be developed at higher level (object/class universe) allowing to share a single behaviour implementation across various transports and wire formats.\nThat was the point I was trying to make regarding reactive streams (proof of concept): I implemented the behaviour once at high level (async rpc) and can use this with various network transports and encodings as well as in-process.\nVersioning/cross platform: Depends, if its just streaming some data from one backoffice system to another, there might be some YAGNI ;) .\n. Nevermind have overseen  '@224.10.9.9' option to signal multicast ..\n. Saw you already use this in your test setup gradle stuff ..\nFollow up: setting \"System.setProperty(\"java.net.preferIPv4Stack\",\"true\" );\" in the main class is not sufficient. Worked for debug mode, but failed when running (probably class init order or something). The option has to be set at vm level using -D to be safe. Just in case other (documentation ignorers ;) ) people run into this\n. Edit (after having some wiki):\nI do not completely understand how to set retransmission buffer size and in which ways this interacts with various windows. So questions:\n1) How is the size of the buffer avaiable for retransmission determined (sender backlog) and does this interact with term window size ?\n2) In a scenario where some publishers stream high volume all day long, its quite common for subscribers to just get the first-message that is not part of a fragmented message, as a replay might kill first subscribers in case of large \"term windows\" [<= unsure how big these might get].\n. If I read the source correctly, there is a problem when trying to \"unlock\" a sender using custom flow control:\nno receivers => no status messages => flow control is not invoked => no chance for custom flow control to manipulate positionLimit along the lines of\njava\npublic long onStatusMessage( .. ) {\n     return Long.MaxValue;\n}\n(would fail anyway as diff to current position is calculated using int).\nWhat I like to achieve is to never block the sender regardless if there are subscribers or not (so even more agressive than current flowcontrol). If a subscriber can't keep up, it will have to drop. Any ideas ?\n. Thanks for clarification, very much appreciated.\nBUT:\nI think there are (some if not many) usecases where this behaviour is a no-go:\n1) Think of a system of high volume realtime data streams. You have subscriber processes which perform real-time computation on those streams. You don't want to have message loss on each hickup (so reliable udp is favourable), but in case receivers can't keep up, they have to accept the loss and resync their computation (so basically just have some gaps in their computed output stream data series then).\nThe Main Sender of input data never should get blocked under no circuumstances as erm its realtime data :-).\n2) there are subscribers which can keep up with data rate but may suffer Full GC's on accident. By ensuring large \"retransmission buffers\", one can assure they don't get unrecoverable message loss even when Full GC'ing (though this happens twice a year).\nSidenote 1: When choosing a multicast address, Aeron still defaults to UnicastSenderFlowControl\nSidenote 2: I came up with the following idea to achieve zero-sender blocking:\nSet initialLimit to MAX_LONG, ignore onStatusMessage's\n``` java\npublic class NonBlockingFlowControl implements SenderFlowControl {\n@Override\npublic long onStatusMessage(int termId, int completedTermOffset, int receiverWindowSize, InetSocketAddress address) {\n    return -1;\n}\n\n@Override\npublic long initialPositionLimit(int initialTermId, int termBufferCapacity) {\n    return Long.MAX_VALUE;\n}\n\n}\n```\nin addition computation in DriverPublication\njava\nprivate int sendData()\n{\n    final int bytesSent;\n    final long lastSentPosition = senderPosition.position();\n    final long availableWindow = (senderLimit.get() - lastSentPosition); // don't int cast here\n    final int scanLimit = (int)Math.min(availableWindow, mtuLength); // but there\nand\njava\npublic void updatePositionLimitFromStatusMessage(final long limit)\n{\n    if ( limit < 0 ) // no limit set\n        return;\nWould this screw up Aeron ?\n. There's probably a typo in Configuration.java defaulting MulticastFlowControl to UnicastFlowControl (shouldn't this be MaxMulticast*FlowControl ?) ...\n. Hm .. sorry to nag you, I see your points, however consider:\n- if I have huge term windows (e.g. 1-2GB), the first subscriber will get a big load of old data as it gets a replay of the full term window (see original complaint above). Its common to have publisher start and then subscribers join an ~hour later.\n- Stalling the sender does not really make sense (for my use case) as receivers are forced to consume a full window of outdated events, one would rather have them 'drop' and resync to current data or have the sender backlog work like a ringbuffer and overwrite oldest parts of buffered events (that's how wllm, fastcast work).\nOfc I have read most of the stuff of mjp, on the other hand I also have spent some years dealing with backpressuring/controlling high load event systems/clusters ... the current behaviour of blocking the sender if no receivers are present just won't work for us (especially with large term windows).\nAnyway I really would like to embrace Aeron as it seems it has excellent latency behaviour outclassing other libs. Code base looks clean+well organized. Like ;-)\nBTW my tweak above does not work, sender still stalls if no receivers are present. To be continued ..\n. Hi Richard,\nHm .. I am into Aeron just since some hours .. if there is the possibility for a publisher to detect subscribers, your proposal would solve the issue. \n1) Can you give me a quick hint  how to detect this ?\n2) What happens if subscribers vanish and come back later, can I reliably track this from sender side ?\n. Still: consider the subscribers are not under my control (e.g. controlled by third parties). In the morning there are only some 2 slow subscribers, so data stream is pressured back and starts lagging significantly (ofc it will catch up time to time as sender will skip messages if blocked, but with large windows there will be plenty of outdated stuff being sent).\nNow another party joins and initially gets a whole bunch of outdated data (e.g. 1GB) until it catches up. Assumed it is the fastest receiver then, this will lead to a drop of the initial 2 slow subscribers all over a sudden. So subscribers are capable of side effecting each other.\n. From my experience its very hard and cumbersome to make Publishers aware of Subscribers. Agree with @tmontgomery . It will increase complexity of rel. multicast and might be too unreliable to have a real use (except monitoring maybe).\nI tried with with a NonBlockingMulticastFlowControl (see my branch), what's missing is to ensure the highwatermark is automatically increased (currently sender gets blocked once term is full).\nUnfortunately we had a not-so-good release on monday so I am busy 23x7 fixing things :/ this week ..\nFrom a broader view: backpressure ofc is useful, however in many systems there are ~ 'Master Publishers' which have kind of higher priority so don't should be backpressured by less important processes.\nAdditionally I think one should not get too obsessed with advanced flow control. Simple things like (adaptive/heuristic) rate limiting work pretty well and (most important:) are predictable once you have 50+ nodes in a cluster.\n. Being 'busy with holidays' sounds like a good thing to have :-)\nI meant 50+ receiving processes running on 10..15 boxes, so probably still doable with plain NAK (at least with hardware setup I tested)\n. Hi Martin,\nDisclaimer: I can only talk for our use cases ..\n\"\nI've thought it is odd that a publisher can offer up until the publication term limit and have this delivered to the first subscriber but not subsequent subscribers. I'm coming round to thinking that a publication should be clamped by flow control until at least one subscriber connects.\n\"\nThis would also work fine, as all subscribers would be treated equal.\n\"\nI think the default should be to gate on all subscribers using the slowest for pace setting. This will be the least surprising for most users. \n\"\nI disagree, default should be the most agressive flow control policy. With the \"wait for slowest\", any misbehaved subscriber would slow down the whole cluster (e.g. java subscriber with mem leak full-GC'ing frequently, but not dying). Same applies to network issues/failures.\nAny kind of failover will likely create hickups in throughput then under high load. By sizing the term window appropriate one defines the range of accepted \"peak slowdown/fall-behind\" for subscribers. If they fall behind more than that, forcing subscriber failure / unrecoverable loss (with notification) is favourable [cluster resilence].\nIt really depends on use case, though. E.g. if an application is multicasting large file data, things look different.\n. Yes, that's common. Additionally, the publisher has a rate limit (can be dynamically adjusted by the messaging layer if there are too many drops, consensus-alike), so there is kind of a QOS contract between Publishers and Subscribers. \nApplying unicast patterns to multicast communication does not work well imo, as backpressure put onto the sender affects all subscribers which is unwanted. E.g. a new node starting up (unjitted) will slow down whole cluster. \nFrequently a subscriber can recover from message loss by \"resyncing\" (e.g. when doing calculations on a time series window, it just resubscribes). Sender backlog of 1-2GB are not uncommon. As Aeron holds one buffer per machine (as far i understood), it could have great savings compared to messaging products which hold buffers per process.\nThis applies to realtime systems only, as you cannot backpressure \"the Market\" (well if somebody manages to do this then its called a 'crash' ;-) )\n. Agree so far, however as far I understood Todd, current default strat for mutlicast is to keep up send rate with fastest subscriber, so any slower will be dropped.\n\"\nSlow everyone down to ensure n subscribers keep up, allowing m other subscribers to fall behind. Here the n are critical systems which should influence backpressure and m are things like monitoring or debugging services which shouldn't slow the other subscribers down.\n\"\ncurrently n = 1, I wanted n = 0, martin proposed n = M. (M = number of subscribers) \n. just another question: \nIs having multiple senders on a stream/topic supported ?\n. That's good news :-)\n. Actually this seems like an elegant and low effort solution. Sounds like a\ngood idea to me :)\n2015-03-31 19:52 GMT+02:00 Todd L. Montgomery notifications@github.com:\n\nAfter some discussion, the plan is to disallow Publication.offer to\nsucceed unless at least one subscriber is known.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/34#issuecomment-88187192.\n. On the other hand, can a sender distinguish this from backpressure being\napplied by slow receivers ?\n\n2015-03-31 21:45 GMT+02:00 R\u00fcdiger M\u00f6ller moru0011@gmail.com:\n\nActually this seems like an elegant and low effort solution. Sounds like a\ngood idea to me :)\n2015-03-31 19:52 GMT+02:00 Todd L. Montgomery notifications@github.com:\n\nAfter some discussion, the plan is to disallow Publication.offer to\nsucceed unless at least one subscriber is known.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/34#issuecomment-88187192.\n. @mjpt777 & @tmontgomery \nI think this could work. From a sender perspective, if there are no subscribers, the rejected message can be discarded. In case of block caused by backpressure, a sender might want to either \"alarm\" or apply kind of adaptive netting to reduce send rate.\n. \n\n",
    "brianfromoregon": "+1 :)\n. ",
    "erdem-aslan": "Finally :)\n. ",
    "krisskross": "Sweet!\n. Awesome tools! Thanks Martin.\n. @tmontgomery Are there examples of this on github?. ",
    "strangelydim": "I ran into the behavior reported in the original issue report today... and was similarly perplexed.  Seems odd that the behavior a new receiver gets is different if it was the first receiver vs. a subsequent receiver.  Not what I would have expected to see.\n. Putting the random sleep only on the subscriber is also enough to reproduce, it seems.  Probably doesn't even have to be random; I would bet the bug has more to do with control-c'ing the subscriber while it is still in the middle of message delivery or with several messages waiting to be delivered.\n. Doing similar tests (sending large random-sized messages as fast as I can) using my own modified versions of the BasicPublisher/BasicSubscriber apps sometimes also results in the driver spewing out a stream of these:\n[94314.322378] EXCEPTION [591/591]: java.lang.IndexOutOfBoundsException(index=-967317636, length=4, capacity=33554432)\nuk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck UnsafeBuffer.java:795\nuk.co.real_logic.agrona.concurrent.UnsafeBuffer.getIntVolatile UnsafeBuffer.java:423\nuk.co.real_logic.aeron.common.concurrent.logbuffer.FrameDescriptor.frameLengthVolatile FrameDescriptor.java:262\nuk.co.real_logic.aeron.common.concurrent.logbuffer.LogScanner.scanNext LogScanner.java:114\nuk.co.real_logic.aeron.driver.DriverPublication.onRetransmit DriverPublication.java:235\nWhile my test apps have been modified a bit to do some message checksumming, etc., the driver hasn't been changed and is running in its own separate process.\n. I have also seen cases where, in AeronStat, the counts of NAKs and retransmissions also both go up slowly (along with the other counters originally mentioned in this report).\n. Yep, will do.\n. I know - poor guy.  If only someone had been around to tell him it was all going to be okay, that he could just throw fragments away until he got a header with the Begin bit set and go from there... It didn't have to end this way.\n. Maybe allow the user to hook up their own custom error log callback when they create the Aeron context? (can they already do that?  I didn't look...)\n. Ah, whoops. I just missed context.errorHandler(). So not really a bug - although maybe either: 1. specifying an errorHandler should be mandatory or 2. the default error handler should just log a message but not exit.\nOtherwise, I'm worried that someone might write an app and test it (not very thoroughly), thinking that all is well, until the first time they get a context error and their app unexpectedly quits on them.\n. I get a stream of these:\n[1426808727.658380] MALFORMED_FRAME_LENGTH [0/0]: COMMAND_UNKNOWN\njust running this incredibly simple test app:\n```\npackage uk.co.real_logic.aeron.tools;\nimport uk.co.real_logic.aeron.Aeron;\nimport uk.co.real_logic.aeron.Publication;\nimport uk.co.real_logic.aeron.Subscription;\nimport uk.co.real_logic.aeron.common.concurrent.logbuffer.Header;\nimport uk.co.real_logic.aeron.driver.MediaDriver;\nimport uk.co.real_logic.agrona.DirectBuffer;\npublic class MalformedTest\n{\npublic static void onMessage(DirectBuffer buffer, int offset, int length, Header header)\n{\n\n}\n\npublic static void main(String[] args)\n{\n    final MediaDriver driver = MediaDriver.launch();\n\n    final Aeron.Context ctx = new Aeron.Context();\n\n    final Aeron aeron = Aeron.connect(ctx);\n\n    final Publication pub = aeron.addPublication(\"udp://localhost:40001\", 10000, 12345);\n    final Subscription sub = aeron.addSubscription(\"udp://localhost:40001\", 10000, MalformedTest::onMessage);\n\n    while (true)\n    {\n        try\n        {\n            Thread.sleep(1000);\n        }\n        catch (final InterruptedException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n}\n```\nNo actual sending or receiving of messages required - just a publication and a subscription on the same channel in the same app.\nHowever, for some reason, the EmbeddedPingPong sample app works fine for me without the MALFORMED errors.\nIf I don't create either the Subscription or the Publication in the app, no errors.  They both have to be created.\n. How about if no data has been sent on a connection, you don't get a newConnection notification for the connection at all?  So no newConnection/inactiveConnection notification flapping, just no notifications at all unless the publication actually sends something.\n. Is it possible to send a non-0-byte message, then, as the heartbeat even when no data has yet been sent?  Just a dummy message with a few bytes of padding that the client knows to ignore?\n. Whoops, opened this prematurely.\n. I believe I only had one driver running. That's why there's only one command-line with --driver=embedded in the report; that causes that particular instance of the tool to start up a driver as well. The default is to not start a driver.\n. Even more worrisome than the initial report:  running a single subscriber also runs into problems of apparent redelivery of old messages every now and again.  Running just a single subscriber:\njava -cp aeron-tools/build/libs/tools.jar  uk.co.real_logic.aeron.tools.SubscriberTool --driver=embedded\nand a single publisher:\njava -cp aeron-tools/build/libs/tools.jar  uk.co.real_logic.aeron.tools.PublisherTool\nResults in some interesting output on the receiver side.  You'll notice it's getting a couple million messages per second, and only spitting out a handful of complaints of getting messages out-of-order, but the complaints are there nonetheless:\nWARNING: conductor directory already exists: /var/folders/qy/rphc92v92yd_42kxt9zfhmkw0000gn/T/aeron/conductor\nWARNING: data directory already exists: /var/folders/qy/rphc92v92yd_42kxt9zfhmkw0000gn/T/aeron/data\nsubscriber-thread 0 subscribing to: udp://localhost:31111#1\n1.000031: 0.000 msgs/sec 0 bps\n0.999988: 0.000 msgs/sec 0 bps\nNEW CONNECTION: channel \"udp://localhost:31111\", stream 1, session 1\n1.000167: 2.063 Mmsgs/sec 528.2 Mbps\n0.999897: 2.288 Mmsgs/sec 585.8 Mbps\n1.000038: 2.378 Mmsgs/sec 608.9 Mbps\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 6292143, but was expecting 7190919. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 7489800, but was expecting 6591024. Possibly missed 898776 messages.\n0.999948: 2.228 Mmsgs/sec 570.3 Mbps\n0.999950: 2.330 Mmsgs/sec 596.4 Mbps\n1.001989: 2.192 Mmsgs/sec 561.2 Mbps\n0.998010: 2.168 Mmsgs/sec 554.9 Mbps\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 16177968, but was expecting 17076744. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 17076745, but was expecting 16177969. Possibly missed 898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 16179872, but was expecting 17078648. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 17376336, but was expecting 16477560. Possibly missed 898776 messages.\n0.999998: 2.082 Mmsgs/sec 532.9 Mbps\n1.000007: 2.271 Mmsgs/sec 581.5 Mbps\n0.999992: 2.172 Mmsgs/sec 556.0 Mbps\n1.000002: 2.278 Mmsgs/sec 583.2 Mbps\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 24867578, but was expecting 25766354. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 26064504, but was expecting 25165728. Possibly missed 898776 messages.\n0.999999: 2.074 Mmsgs/sec 530.8 Mbps\n1.000002: 2.282 Mmsgs/sec 584.1 Mbps\netc.  So either it's getting gaps in the message delivery which are then retransmitted, or messages are being delivered out of order, or... something.  All I know is that it certainly didn't used to do this a few weeks ago - the tools could run for quite some time without complaint.\n. It appears that things became borked up on commit: 01464d7088af084658553fc77b1e85f5725f62a1 , \"Moved completion tracking from the Receiver to Conductor thread in the driver\", on April 3rd.\nIf I check out at the commit immediately before that, b912b4b8a5c7804a6d01e023fde45f55b3c2917e , everything works fine.\n. Probably is.  The tools themselves send their own sequence number in the payload of the messages they're sending, and keep track of the next expected SQN.  PublisherTool always starts at SQN 0 and increments the SQN by one for each message it successfully sends.  SubscriberTool expects to get SQN 0 as the first SQN on a given stream, and then expects SQN N + 1 next.  If it gets an unexpected SQN, it reports that and then adjusts its expectations for the next message.  So if it gets 0, 1, 2, 3, 5, then it will issue a warning upon receipt of 5 that it possibly missed 1 message, but then set its expected SQN to 6.\nSo the output above is talking about the tool-specific sequence numbers, not Aeron positions or offsets.\n. As another possible hint, if I'm running with two subscribers as per the original bug report, then in addition to SQNs being delivered out of order or with gaps, I also get message checksum errors on both subscribers like these:\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -515913915\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -1437035475\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated 1661765329\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated 1762207865\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -613421714\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -2101812506\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -27597524\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated 1441910465\nWhen verifiable messages are used, PublisherTool writes in an application header at the beginning of each message that includes a CRC32 checksum of all the bytes in the message (including the header itself, with the checksum field temporarily set to 0).  It's rather unlikely (1 out of 4 billion-ish) that the checksum is going to happen to be 0, and yet that's what SubscriberTool is receiving, and then calculating that it should've been something else.  So for those messages, I'm not even sure if non-mangled data is being delivered, let alone being delivered in the correct order without gaps.\n. Message size is 32 bytes.\nAeron driver options are all defaults.\n. The checksum would be whatever Java's default CRC32 class's initial checksum is set to.  But in any case... When verifiable messages are used, there's a minimum message length of 16 bytes enforced on PublisherTool, to account for the application-level verifiable message header.  And remember the data that is used to produce the per-message checksum includes that header, with the checksum field temporarily blanked out to 0.  So in a default run, if SubscriberTool is receiving a 0-length message, or if PublisherTool is sending one, something has already gone pretty wrong.\n. I didn't do IP-style checksums, I just did a simple CRC32 checksum with the correct value (not necessarily zero) being sent as part of the message.  See MessageStream:getNext for the publisher side, and MessageStream:putNext for the subscriber side of things.\n. Same problems after the commit... but at least another potential bug got fixed.\n@tmontgomery : Not really seeing into the future - remember, the subscriber is adjusting his expected next SQN to what it received + 1 each time it gets a message, even if what it received wasn't what it was expecting.  So if it receives SQNs 0, 1, 2, 4, 3, 5, in that order, for example, then when it gets SQN 5 it's going to say it was \"expecting\" 4 (even though it already got it) - so 5 will appear to be from \"the future\".  It's not using a bitmap for tracking a window of the last N SQNs received or anything fancy, just a single, simple expected next SQN.\n. I added a few lines of code to grab the term ID and offset, etc. of the messages that SubscriberTool was getting, and save the values from the previously-delivered message so I could compare them to the values on the first message the triggers the out-of-order exception.\nUsually, even when the exception is hit, the values seem to make sense.  The previous message and the current exception-triggering message are both in the same term ID.  The current message's offset is exactly a frame length ahead of the last message's.\nHowever, sometimes - and it may possibly be easier to hit with larger-than-the-default message sizes, as I can hit this at message size of 160 bytes - the values do not, in fact, make any sense at all.  The previous message might have a term ID of 1297779264, and the current message has a term ID of 1297779261, as one real example.  I would expect the term ID of the current message to be either the same as that of the previous message or exactly one higher.  I wouldn't expect it to be lower than the previous message.\nBut like I said - sometimes, I still hit the exception, but all the header values seem to be what I'd expect - so the header looks reasonable, but the message payload itself is not right.\n. I just did another run with the latest changes to see if anything had changed magically; looks like this is still a bug.  But I do notice something interesting... The sequence numbers reported in the exceptions in this run are always ahead/behind by the same number of messages, exactly 898776.  The frame lengths in this run are going to always be 56 (or should be, anyway - 24 bytes of header plus 32 byte application payload).  Term sizes are all defaults.\n$ java -cp aeron-tools/build/libs/tools.jar uk.co.real_logic.aeron.tools.SubscriberTool --driver=embedded\nWARNING: conductor directory already exists: /var/folders/5q/shz1fbsx1vs9mnkszj2m5c7m0000gn/T/aeron/conductor\nWARNING: data directory already exists: /var/folders/5q/shz1fbsx1vs9mnkszj2m5c7m0000gn/T/aeron/data\nsubscriber-thread 0 subscribing to: udp://localhost:31111#1\n1.000037: 0.000 msgs/sec 0 bps\n0.999984: 0.000 msgs/sec 0 bps\nNEW CONNECTION: channel \"udp://localhost:31111\", stream 1, session 1\n1.000056: 1.489 Mmsgs/sec 381.1 Mbps\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 1200453, but was expecting 2099229. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 2133217, but was expecting 1234441. Possibly missed 898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 1234519, but was expecting 2133295. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 2133587, but was expecting 1234811. Possibly missed 898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 1234884, but was expecting 2133660. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 2133806, but was expecting 1235030. Possibly missed 898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 1235062, but was expecting 2133838. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 2134349, but was expecting 1235573. Possibly missed 898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 1348859, but was expecting 2247635. Possibly missed -898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 2396736, but was expecting 1497960. Possibly missed 898776 messages.\n[subscriber-thread 0] WARN uk.co.real_logic.aeron.tools.SubscriberTool - Channel udp://localhost:31111:1[1]: Verifiable message stream received sequence number 2698498, but was expecting 3597274. Possibly missed -898776 messages.\n0.999987: 2.207 Mmsgs/sec 565.1 Mbps\nAlso, note that when an older sequence number message is suddenly delivered out of order, it appears that the next few old messages after that one are also being delivered before suddenly switching back to the current stream.  It's a whole run of older messages; the length of the run isn't consistent, though.  The first run of older messages appears to be 33988 messages long (1234441 - 1200453).  But the second run of old messages is only 292 (1234811 - 1234519).\n. A quick test with the updated code looks promising for addressing the single-subscriber case.  Running for a couple minutes doesn't give me any out-of-order old messages.  I'll do a longer-running test tomorrow.\nSadly, two subscribers is still an issue; if I start two instances of SubscriberTool and then start PublisherTool, I get tons of these on both SubscriberTool instances:\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated 245542246\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated 2090063423\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -1453958975\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated 245504540\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -1909512619\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -275125590\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -247174118\nWARN Channel udp://localhost:31111:1[1]: Verifiable message per-message checksum invalid; received 0 but calculated -1379873868\nSo I'm not sure what sort of messages are being delivered, but in those instances, they're not the messages I sent... The output above was over about a second of wall-clock time, during which that particular instance of SubscriberTool received a little under 2 million messages.  So 8 messed-up messages out of 2 million is not a big percentage, but it's more than 0%, so something's still up.\n. Ahhhh, that would make a lot of sense. You're probably right... Let me try that out first and see if that's all it is. At least there was one real bug here.\n. OK - turns out Brian was right, and the 0-checksum problem was the test tool itself.  It didn't occur to me that the two different subscribers using the same media driver on the same machine would, of course, be reading out of the same buffer.  I changed the code a bit to treat the buffer as immutable - but still calculate the checksum - and all is now well.\nSo - feel free to close this bug out if you like.\n. Yep, correct. There's just one media driver, and it stays up the whole time.\n. Another run saw no TimerWheel exceptions, but still had the flow control overrun output.  And then, after a few seconds, got wedged and stopped sending altogether.\n. Here's a simpler test app that reproduces the problem.\nRun a driver:\njava -cp aeron-tools/build/libs/tools.jar uk.co.real_logic.aeron.tools.MediaDriverTool\nand run a subscriber listening to the publications created in the test app:\njava -cp aeron-tools/build/libs/tools.jar uk.co.real_logic.aeron.tools.SubscriberTool -c udp://localhost:30123#1\nAnd then run this test app:\n```\nimport java.util.concurrent.ThreadLocalRandom;\nimport uk.co.real_logic.aeron.Aeron;\nimport uk.co.real_logic.aeron.Aeron.Context;\nimport uk.co.real_logic.aeron.Publication;\nimport uk.co.real_logic.agrona.concurrent.UnsafeBuffer;\npublic class TwoThreadSendTest implements Runnable\n{\n    private static final String CHANNEL = \"udp://localhost:30123\";\n    private static final int STREAM_ID = 1;\n    private static final int NUM_PUBS = 1;\n    private static final int NUM_THREADS = 2;\n    private static Publication[] pubs = new Publication[NUM_PUBS];\n    private static Thread[] threads = new Thread[NUM_THREADS];\nprivate static final int NUM_SENDS = 100000000;\n\nprivate final int pubIndex;\n\npublic TwoThreadSendTest(final int pubIndex)\n{\n    this.pubIndex = pubIndex;\n}\n\npublic static void main(final String[] args)\n{\n    final Context ctx = new Aeron.Context();\n    final Aeron aeron = Aeron.connect(ctx);\n\n    for (int i = 0; i < NUM_PUBS; i++)\n    {\n        pubs[i] = aeron.addPublication(CHANNEL, STREAM_ID);\n    }\n\n    for (int i = 0; i < NUM_THREADS; i++)\n    {\n        threads[i] = new Thread(new TwoThreadSendTest(i % NUM_PUBS));\n        threads[i].start();\n    }\n\n    try\n    {\n        for (int i = 0; i < NUM_THREADS; i++)\n        {\n            threads[i].join();\n        }\n    }\n    catch (final InterruptedException e)\n    {\n        e.printStackTrace();\n    }\n\n    for (int i = 0; i < NUM_PUBS; i++)\n    {\n        pubs[i].close();\n    }\n\n    aeron.close();\n    ctx.close();\n    System.out.println(\"Done!\");\n}\n\npublic void run()\n{\n    final UnsafeBuffer buf = new UnsafeBuffer(new byte[128]);\n\n    for (int i = 0; i < NUM_SENDS; i++)\n    {\n        /* Send!  Send!  Send! */\n        pubs[pubIndex].offer(buf, 0, ThreadLocalRandom.current().nextInt(100 - 64) + 64);\n    }\n}\n\n}\n```\nAnd you should get a nice:\nException in thread \"Thread-2\" java.lang.IndexOutOfBoundsException: index=16777200, length=24, capacity=16777216\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:303)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:216)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:143)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.TwoThreadSendTest.run(TwoThreadSendTest.java:82)\n    at java.lang.Thread.run(Thread.java:745)\nspit out.\n. So here's what I believe is going on.  You've got two threads, both calling offer on the same publication at the same time.  The term buffer is nearly full; let's say it only has 128 bytes left before the end.\nThread A is trying to write a message that would finish out the term and then require a padding frame.  Let's say it's trying to write a 93 byte message.  So its required aligned frame length is going to be 93 + 24 for the header, rounded to the nearest 4 bytes, so 120.  So after that we'll have only 8 bytes left in the term, which isn't enough for another full 24-byte header, therefore thread A decides that instead of actually writing the message to the buffer, it's going to just write a padding frame and return TRIPPED, allowing the user to try the offer again.  So far, so good...\nThread B, meanwhile, is following the same path, but with a slightly different message size.  Let's say it's trying to write a 99 byte message.  So its aligned frame length is going to be 124.  After thread A already reserved 120 bytes in the term buffer, thread B is left with just 8 bytes remaining, so it too decides it's not going to actually write the message, but instead write a padding frame.\nBut, you might have noticed, with only 8 bytes left in the buffer, it doesn't actually have enough space even to write a padding frame, which needs 24 bytes.  Unfortunately, that doesn't (currently) prevent it from trying...\nIf I change this code snippet in LogAppender:appendUnfragmentedMessage :\n```\n        if (isBeyondLogBufferCapacity(frameOffset, alignedLength, capacity))\n        {\n            if (frameOffset < capacity)\n            {\n                appendPaddingFrame(termBuffer, frameOffset, capacity);\n                return TRIPPED;\n            }\n            else if (frameOffset == capacity)\n            {\n                return TRIPPED;\n            }\n        return FAILED;\n    }\n\n```\nto this:\n```\n        if (isBeyondLogBufferCapacity(frameOffset, alignedLength, capacity))\n        {\n            if ((frameOffset + HEADER_LENGTH) <= capacity)\n            {\n                appendPaddingFrame(termBuffer, frameOffset, capacity);\n                return TRIPPED;\n            }\n            else if (frameOffset == capacity)\n            {\n                return TRIPPED;\n            }\n        return FAILED;\n    }\n\n```\nto try to account for the header length of the padding frame itself... things seem to work fine.  I assume that if that really does fix things, the same change would need to be made to the same code block in appendFragmentedMessage as well.\nIf my understanding of what's going on is correct, then requiring two different message sizes or random message sizes has nothing to do with it; you can use the same message size for both threads so long as you happen to pick a size that doesn't divide evenly into the term buffer and leaves you with a remainder less than a HEADER_LENGTH.  And, in fact, running a test with both threads sending 64-byte messages (application messages, so 88 bytes aligned with header) also causes the exception.\nNow... things can \"appear\" to work for the wrong reasons, and I don't understand enough about padding frames and alignment at the moment - particularly about how a receiving media driver scanning for new messages is going to behave at the end of a log buffer that has < HEADER_LENGTH worth of padding bytes in it - to be sure that I've fixed anything without introducing more trouble.  But I believe I've at least found the problem.\n. I would vote for no.\nThere's no good thread-safe way to answer the question; all you can get, at best, is a hint.  You might read .isClosed in Thread A and it returns false, and so you decide to do something with the object, only to have Thread B close it a moment later after the check.\nAnd the only way around that problem is making just about every method on an object fully synchronous with a lock.  That's never going to be acceptable for performance.  Users should keep track of Publications and Subscriptions and manage their lifecycle themselves; allowing anything else encourages bad application design by usually allowing users to get away with it.\n. A nice small PR this time!\n. Hold off on merging this for just a second... we're fixing one more bug.\n. OK, this is good to merge now.\n. I'm all for these upcoming changes to get rid of using Signal as a means of synchronizing threads...\n. For forward-compatibility, it might be nicer to warn-and-continue, and just ignore the parts of the URL that aren't understood.\nOn the other hand, you might have the opposite opinion, that a newer option given to an old version that doesn't understand it really should be a hard failure.\nOpinions?\n. Java already has a ThreadLocalRandom, spelled out.  It was named differently to distinguish it from that.  TLRandom exists to allow the random seed to be set or gotten via a callback, which for unknown idiotic reasons, Java's built-in ThreadLocalRandom doesn't allow.  Do you have a suggestion for a better name that isn't too long or silly?  CoolAeronToolsThreadLocalRandom ?\n. In the future, we'll be sure to run them by you for anything we're planning on doing a PR for; how about for now?  Can we agree on using Apache's CommandLine now?  I don't think there's a license incompatibility.  The alternative is for us to write and include our own getopt parsing class, which seems a little silly.\n. A lot of the import re-organization was done automagically by Eclipse upon saving the files, so the style we used is whatever the default style Eclipse thinks is good.  If you guys don't like the default Eclipse style, we can change it.  I assume it's the Eclipse default because it's some kind of standard practice, though.\n. Yeah, we had this as a try-with-resources originally, and changed it just to make the code much more explicit and give us a place to comment on cleaning up resources.  So not using try-with-resources was very much on purpose.\n. Iiiinteresting.  Didn't know that existed, but it looks like what I was wanting.\n. I think Phil was meaning to remove those for the PR and just hadn't gotten to them.\n. Hm, maybe not.  It does look useful, but I wanted the ability to distinguish between having an entry with a given stream ID, but no session ID yet, and not having the stream ID at all... So I think I still need the 3-step lookup.  The full lookup - starting with the channel String - doesn't happen except during setup, so it shouldn't be too expensive.\n. Yep, we really do.\n. I'll fix that in the files in the PR - but a grep through the main Aeron source shows missing newlines all over the place, too.\n. As I'm going through and adding newlines, it's looking really ridiculous doing it for one-line docs like this:\n/** Application should print advanced usage guide with help */\nboolean showUsage;\nDo you really want those to look like this instead?:\n/**\n * Application should print advanced usage guide with help */\nboolean showUsage;\n.  How about \"SeedableThreadLocalRandom\"?\n. Not sure what you mean - I should be putting a @link tag somewhere in this comment:\n/* channel -> stream ID -> session ID */\n?\n. Elsewhere Martin commented that it's fine to have everything on one line if it's just a one-line comment.  So... ?\n. Yep.\n. Oh, gotcha.  Todd's original comment here was for a line a few lines down.\n. Should I use @link even in comments that are normal, non-Javadoc-style code comments like this one?  Will those still get found and changed during a refactor?  Should I convert normal comments to /** javadoc-style comments?  I would expect not, since I don't think we'd want to clutter up the actual generated doc like that.\n. Go for it.\n\nOn May 4, 2015, at 16:23, Brian Horst notifications@github.com wrote:\nIn aeron-tools/src/main/java/uk/co/real_logic/aeron/tools/SubscriberTool.java:\n\n\nprivate final RateController rateController;\n  +\n/* All subscriptions we're interested in. */\nfinal Subscription subscriptions[];\n/* Just the subscriptions we have reason to believe might have data available - these we actually poll on. */\nfinal Subscription activeSubscriptions[];\nint activeSubscriptionsLength = 0;\n  +\nprivate final Publication controlPublication;\nprivate final Subscription controlSubscription;\n/* Doesn't use TLRandom, since this really does need to be random and shouldn't\n* be affected by manually setting the seed. */\nprivate final int controlSessionId = ThreadLocalRandom.current().nextInt();\n  +\n/* channel -> stream ID -> session ID */\nprivate final HashMap>> messageStreams =\n  I also noticed subscriber tool has some \u201cincorrect\u201d whitespace formatting. Want me to clean that up?\n  \u2026\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. \n\n\n",
    "maoxianfly": "os : windows 7 x64\nGradle 1.10\njava version \"1.8.0_25\"  64-Bit\n. ",
    "phaynes": "lo0: flags=8049 mtu 16384\n    options=3\n    inet6 ::1 prefixlen 128 \n    inet 127.0.0.1 netmask 0xff000000 \n    inet6 fe80::1%lo0 prefixlen 64 scopeid 0x1 \n    nd6 options=1\ngif0: flags=8010 mtu 1280\nstf0: flags=0<> mtu 1280\nen0: flags=8863 mtu 1500\n    ether 3c:15:c2:ea:9c:bc \n    inet6 fe80::3e15:c2ff:feea:9cbc%en0 prefixlen 64 scopeid 0x4 \n    inet 192.168.12.66 netmask 0xffffff00 broadcast 192.168.12.255\n    nd6 options=1\n    media: autoselect\n    status: active\nen1: flags=8963 mtu 1500\n    options=60\n    ether 72:00:04:ed:0c:80 \n    media: autoselect \n    status: inactive\nen2: flags=8963 mtu 1500\n    options=60\n    ether 72:00:04:ed:0c:81 \n    media: autoselect \n    status: inactive\np2p0: flags=8843 mtu 2304\n    ether 0e:15:c2:ea:9c:bc \n    media: autoselect\n    status: inactive\nawdl0: flags=8843 mtu 1452\n    ether aa:53:3a:99:39:6b \n    inet6 fe80::a853:3aff:fe99:396b%awdl0 prefixlen 64 scopeid 0x9 \n    nd6 options=1\n    media: autoselect\n    status: active\nbridge0: flags=8863 mtu 1500\n    options=63\n    ether 3e:15:c2:ae:75:00 \n    Configuration:\n        id 0:0:0:0:0:0 priority 0 hellotime 0 fwddelay 0\n        maxage 0 holdcnt 0 proto stp maxaddr 100 timeout 1200\n        root id 0:0:0:0:0:0 priority 0 ifcost 0 port 0\n        ipfilter disabled flags 0x2\n    member: en1 flags=3\n            ifmaxaddr 0 port 5 priority 0 path cost 0\n    member: en2 flags=3\n            ifmaxaddr 0 port 6 priority 0 path cost 0\n    nd6 options=1\n    media: \n    status: inactive\nvmnet1: flags=8863 mtu 1500\n    ether 00:50:56:c0:00:01 \n    inet 192.168.3.1 netmask 0xffffff00 broadcast 192.168.3.255\nvmnet2: flags=8863 mtu 1500\n    ether 00:50:56:c0:00:02 \n    inet 192.168.3.1 netmask 0xffffff00 broadcast 192.168.3.255\nvmnet8: flags=8863 mtu 1500\n    ether 00:50:56:c0:00:08 \n    inet 192.168.3.1 netmask 0xffffff00 broadcast 192.168.3.255\nen5: flags=8863 mtu 1500\n    options=4\n    ether 78:31:c1:f3:0f:b3 \n    inet6 fe80::7a31:c1ff:fef3:fb3%en5 prefixlen 64 scopeid 0x7 \n    inet 192.168.0.40 netmask 0xffff0000 broadcast 192.168.255.255\n    nd6 options=1\n    media: autoselect (100baseTX )\n    status: active\n. The build now passes with this patch.\n. Todd, when looking at the code, reading it with the JDK source would be handy.  A couple of functions have \"+m\" in the assembler. These are lifted from mintomics. for the getAndSetIntXX functions, I trolled through the unsafe.cpp function ran out of time trying to find where it was implemented to trace down behaviour. \n. @RichardWarburton Thanks very much for pointing this out. I have been experiencing a bit of of cognitive dissonance this past couple of weeks reading code purporting to implement Unsafe not 100% lining up with the instructions actually emitted from the JVM despite my test cases passing. library_call.cpp doesn't seem that much harder to reading than the JNI implementation with the added advantage that it what is actually called. I will continue check implementations. \n. Martin, thanks for the rapid response.\nGot to the bottom of the issue.\nWe have been running  gradlew install to ensure artefacts are published into maven repos.\nThis fails to produce the sample.jar. \ngradlew by itself works.\n. I breath a sign of relief.\nThe full error is per below.\nI was pulling from the Agrona snapshot release rather than 0.3 maven central version. \nI have adjusted the build to use the 0.3 Agrona rather than the snap shot release and the problems disappears.\njava -Daeron.mtu.length=16384 -Daeron.socket.so_sndbuf=16384 -Daeron.socket.so_rcvbuf=2097152 -Daeron.rcv.buffer.length=16384 -Daeron.rcv.initial.window.length=2097152 -Dagrona.disable.bounds.checks=true -jar mediadriver-0.0.2-SNAPSHOT-jar-with-dependencies.jar \nException in thread \"main\" java.lang.IllegalStateException: Capacity must be a positive power of 2 + TRAILER_LENGTH: capacity=1048640\n    at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastBufferDescriptor.checkCapacity(BroadcastBufferDescriptor.java:63)\n    at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastTransmitter.(BroadcastTransmitter.java:55)\n    at uk.co.real_logic.aeron.driver.MediaDriver$Context.conclude(MediaDriver.java:342)\n    at uk.co.real_logic.aeron.driver.MediaDriver.(MediaDriver.java:105)\n    at uk.co.real_logic.aeron.driver.MediaDriver.launch(MediaDriver.java:164)\n    at com.threatmetrix.cm.CMMediaDriver.main(CMMediaDriver.java:22)\n. Our specific use case is to transmit > 10^9 4K events per day from a real-time security decisioning system via multi-cast within a data centre. Approx 12 attributes within events contain PII data (e.g. email and IP addresses) that security folk require encryption over the network.  Noting that I am not a security person, I don't think  we particularly need authentication / reputation and we have an existing key server when the system recovers - but maybe I am wrong. It is important that it is a recognised high grade industry security standard so the approach can be explained to others. \nMy current SLA is 5ms for initial message processing and I can probably negotiate another 1ms for security. In practice this means I have about 50-100 microseconds on average to encrypt / decrypt a message - a stable and small latency tail would help here.\nWe use both the C++ and Java versions of Aeron so one solution that works with both would be ideal but not essential. A C++ / JNI version to start?\nAES-256 has x86 instruction support so my un-measured guess is that this could be useful. The OpenSSL AES implementation is mainly ASM, but it was written in 2000 and at first glance it doesn't look like it particularly takes advantage of hardware aware optimisations.  \nPerformance concerns include startup time of the encryption, block size, feedback loops on the data that will impact latency ala CBC, the ability to use multiple cores to encrypt / decrypt.\nI was thinking of starting by doing some basic performance characterisation and engaging with those more knowledgeable on these matters.\n. sergiotudela - I have no specific preconceptions. Just something that works and I can sell to the security folk without too much effort.\n. Some additional non-technical requirements:\n1. After dutifully impressing the technical executive of a major bank about Aeron's performance, when asked by the CSO on the encryption approach used the smiles continue.\n2. A technical demonstration of Aeron is given at DEFCON and members of the conference are unable to decrypt network traffic (even if they can cause some disruption to operation).\n3.  Reviewing the Aeron approach to encryption with cryptographers within the \"Five Eyes\" community, it is clear that they are irritated that they can't trivially gain access to PII data being transmitted.\n. Todd suggests DTLS. As an option this has the advantage of being added to JDK 9. http://openjdk.java.net/jeps/219\n. This is going to depend on your security use case. We have multiple secure of data centres in different juristictions and our reading that for PII purposes is that clear text in SHM is OK  a) as long as the data is transitory and  b) doesn't get persisted to the new persistent SHM (usual legal caveats apply). In gaming or high end intelligence use cases they would insist the SHM was encrypted also. \n. A definition of transitory - this has been quite the subject of debate. When do you consider RAM the new disk and in what context do you define \"arbitrary time period\"? For example, our system includes a facility for guaranteed message delivery (GMD). In the normal case, messages containing clear text PII come in, they are stored in replica across multiple machines in SHM and then deleted - usually within a couple of milliseconds. Rightly or wrongly, this is being deemed transitory. \nHowever, when services around the GMD facility become unavailable, PII data remains available in RAM that could theoretically be viewed by a rouge sys admin until external services recover. This is being view as OK, since it is relatively rare event and the consequences of losing messages is worse than having clear text PII siting in SHM. It just means additional operational controls are required should this transpire.  \nNow some of the PII data may be selected for further processing and the TTL of this is up to 7 days. This is being considered as no longer transitory since it falls outside of the normal expectation of how the data will be used and by design large quantities of PII data could be available for an extended periods.  So here we encrypt, hash or delete PII.\nThus our definition of \"transitory\" is a couple of ms in the normal case, longer in case of failure, but by design in normal operation up to 7 days - no.\nAnyway, this is our interpretation others please feel free welcome to agree or disagree.\n. Yes. Trivial amounts of data in the situation a system designed not to stop, stops.\n. Reviewing Australian security classifications, it is system availability that is key, rather than small amounts of data of that would not even get a protected security rating.  Multicast is a key feature and if DTLS is to be used, we would have to make the support apparent.\n. Poking through DTLS and TLS standards + a bunch of others such as the expired https://datatracker.ietf.org/doc/draft-keoh-dice-multicast-security/. It seems DTLS puts requirements onto the protocol such as having to have records fit within a single datagram and assumes records may be re-ordered.  With Aeron these assumptions don't have to be true and perhaps something like a SecureFragmentAssembler is implemented with other messages for key exchange. Obviously something like this would not deliver optimal performance but would potentially be far simpler to implement.\n. I think it is going to depend on the scope of the work. At the protocol level you are going to be able to harden the system against Byzantine scenarios and the like - but if all you want to do is keep a secret, then is the app tier sufficient? I am pinging some others about consequences of encrypting at the protocol versus app level. \n. Obviously if the header information is public it easier to disrupt network operation, execute MITM attacks and using message size and meta-information to determine the cypher (although this seems a long bow). That stated, scanning the secure multi-cast comms literature my concern is that going down the protocol level route is that it opens up bunch new research problems. Further, my guess is that the primary use of Aeron will be within a secure datacenter and many of these attacks will probably not apply. Here application level encryption will be more than adequate for use cases like ensuring different trading desks don't spy on each other and the like. But maybe going down the protocol route is simpler than I guess.\n. Also I did some numpty performance tests to see ascertain approx performance. For AES 128 on JDK (which uses x86 instructions) I am getting ~.25M encrypts per sec and similar for decrypting 64 byte messages. For AES 256, depending on parameters set I saw approx 50K per second (or much worse).  Although these numbers could certainly be optimised, it is already making me keen to separate secure and clear text traffic down different  channels. If AES is to be used - I am already thinking getting waivers just for AES 128.\n. So you think a JNI approach should be used for Aeron java? I will look at the instruction set directly - at this stage I am just getting indicative numbers to inform the design / approach.\n. OK - after a bit of fiddling to get a SDC linux VM that supports AES instructions (KVM doesn't work), I got some high level numbers from the Intel_AESNI_Sample_Library_v1.2 with much better results than Java.\nThe following table show performance numbers from test results which no doubt could be improved further based on some of the optimisations mentioned in the paper above. I have simulated 64 byte and 1024 byte messages. Tests were run on a CPU E5-2660 Xeon.\nBoth implementation's would need tightening and support for cross platform. \n\naes-results.txt\n. I agree a encrypter/decrypter filter process has a number of advantages not least of which is the addition of a security module remains the responsibility of the operations team. Security updates can be performed using existing IT processes. An application level design, would inevitably require application re-deployments with a cycle time likely to fall outside the timings needed to correct a vulnerability in a hurry.\nOn the negative, I see two issues:\n1.  A separate process leaves the system open to side channel attacks with data passing in clear text through a conveniently located place in SHM.\n2. Sociability. Deploying Aeron into our data centre we had to deal with multiple complaints of the integration chewing through CPU resources simply to meet latency concerns.  This was almost a show stopper for Aeron. A separate process would exacerbate this.\nThus my thoughts for the morning were for a native encrypter / decrypter module that is dynamically loaded by the Aeron client.  \nThoughts?\n. Continuing to do initial research and started developing a module design that can be reviewed. It has occurred to me there are two main effort vectors - symmetric encryption and asymmetric multi-cast key exchange. \nOn the first front, we are starting work on a POC for AES 256 symmetric encryption. For a variety of reasons we going down a cross platform JNI route with a separate C++ executable. In this way either a standalone or loadable module can be used. Once basic symmetric encryption works, (rightly or wrongly) my thought a goal could be a version of a library that would work with an enterprise key store as a first increment.\nRE: Public Key Exchange. There is obviously quite the literature here that I have been making my way through to better engage people who have built production key exchanges, security modules as well as cryptographers. I will detail thoughts in a design doc.  \nAny preference for design publication? Does this seem an acceptable way to tackle the problem?\n. ",
    "GenuineJyn": "Aeron/aeron-driver/src/main/java/io/aeron/driver/Configuration.java\n/* \n     * Length (in bytes) of the log buffers for publication terms.                                \n/                                                                                           \n    public static final String TERM_BUFFER_LENGTH_PROP_NAME = \"aeron.term.buffer.length\";           \n/**                                                                                             \n * Default term buffer length.                                                                  \n */\n\npublic static final int TERM_BUFFER_LENGTH_DEFAULT = 16 * 1024 * 1024;\n\nYou can use -Daeron.term.buffer.length=XXX to configure it.. publisher\uff1a\n15:30:33 - Aeron Stat (CnC v5), client liveness 5,000,000,000 ns\n===========================\n  0:        5,165,587,488 - Bytes sent\n  1:                    0 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                    0 - NAKs sent\n  6:                  522 - NAKs received\n  7:                    0 - Status Messages sent\n  8:                  284 - Status Messages received\n  9:                   78 - Heartbeats sent\n 10:                    0 - Heartbeats received\n 11:                  469 - Retransmits sent\n 12:                    0 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:           33,408,734 - Short sends\n 17:                   90 - Client keep-alives\n 18:                    1 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=10.160.113.243:40456\n 25:        5,469,244,000 - pub-lmt: 1 543133268 10 aeron:udp?endpoint=10.160.113.243:40456 \n 26:        5,200,808,544 - snd-pos: 1 543133268 10 aeron:udp?endpoint=10.160.113.243:40456 \n 27:        5,335,026,272 - snd-lmt: 1 543133268 10 aeron:udp?endpoint=10.160.113.243:40456 \njava -cp aeron-samples/build/libs/samples.jar \\\n     -Daeron.term.buffer.sparse.file=false \\\n     -Daeron.term.buffer.length=536870912 \\\n     -Daeron.publication.term.window.length=536870912 \\\n     -Daeron.rcv.initial.window.length=134217728 \\\n     -Daeron.mtu.length=16384 \\\n     -Daeron.socket.so_sndbuf=212992 \\\n     -Daeron.socket.so_rcvbuf=212992 \\\n     -Dagrona.disable.bounds.checks=true \\\n     -XX:BiasedLockingStartupDelay=0 \\\n     -XX:+UnlockDiagnosticVMOptions \\\n     -XX:GuaranteedSafepointInterval=300000 \\\n     io.aeron.driver.MediaDriver\nsubscriber\uff1a\n15:32:30 - Aeron Stat (CnC v5), client liveness 5,000,000,000 ns\n0:                    0 - Bytes sent\n  1:        5,168,282,144 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                  522 - NAKs sent\n  6:                    0 - NAKs received\n  7:                  335 - Status Messages sent\n  8:                    0 - Status Messages received\n  9:                    0 - Heartbeats sent\n 10:                   81 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                   23 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                  161 - Client keep-alives\n 18:                    0 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - rcv-channel: aeron:udp?endpoint=10.160.113.243:40456\n 25:        5,200,808,544 - sub-pos: 1 543133268 10 aeron:udp?endpoint=10.160.113.243:40456 @0\n 26:        5,200,808,544 - rcv-hwm: 2 543133268 10 aeron:udp?endpoint=10.160.113.243:40456 \n 27:        5,200,808,544 - rcv-pos: 2 543133268 10 aeron:udp?endpoint=10.160.113.243:40456 \necho \"Start Media Driver...\"                                                                      \njava -cp aeron-samples/build/libs/samples.jar \\                                                   \n     -Daeron.term.buffer.sparse.file=false \\                                                      \n     -Daeron.threading.mode=DEDICATED \\                                                           \n     -Daeron.term.buffer.length=536870912 \\                                                       \n     -Daeron.publication.term.window.length=536870912 \\                                           \n     -Daeron.rcv.initial.window.length=134217728 \\                                                \n     -Daeron.mtu.length=16384 \\                                                                   \n     -Daeron.socket.so_sndbuf=134217728 \\                                                         \n     -Daeron.socket.so_rcvbuf=134217728 \\                                                         \n     -Dagrona.disable.bounds.checks=true \\                                                        \n     -XX:BiasedLockingStartupDelay=0 \\                                                            \n     -XX:+UnlockDiagnosticVMOptions \\                                                             \n     -XX:GuaranteedSafepointInterval=300000 \\                                                     \n     io.aeron.driver.MediaDriver \n    uint32_t total_times = 1000;\n    uint32_t time = 0;\n\n    auto begin = std::chrono::system_clock::now();\n    //buffer_len = 5845200;\n    while (time < total_times) {\n        const std::int64_t result = publication->offer(src_buffer, 0, buffer_len);\n        if (result < 0) {\n            if (NOT_CONNECTED == result) {\n                std::cout << \" not connected yet.\" << std::endl;\n            } else if (BACK_PRESSURED == result) {\n                std::cout << \" back presured.\" << std::endl;\n            } else {\n                std::cout << \" ah?! unknown \" << std::endl;\n            }\n        }\n        ++time;\n        std::this_thread::sleep_for(std::chrono::milliseconds(40));\n        //std::this_thread::sleep_for(std::chrono::microseconds(800));\n    }\n    auto end = std::chrono::system_clock::now();\n\nPUB  publish 1000times * 5845200\uff0c every 40 milliseconds\uff0c and there are many BACK_PRESSURED and a little \" ah?! unknown \"  in return values. About 110 packages are lost.\nthanks a lot.. the size of Communication data is 5845200, so the buffer sizes is as shown. if the buffer sizes is small, the question is more serious.\nI know  likely ADMIN_ACTION\nstatic const std::int64_t BACK_PRESSURED = -2;\nstatic const std::int64_t ADMIN_ACTION = -3;\nstatic const std::int64_t PUBLICATION_CLOSED = -4;\nadd offer again,  but about 50 package is still lost. and what size should buffer lengths be set, there is a empirical value?\n    uint32_t total_times = 1000;\n    uint32_t time = 0;\n\n    auto begin = std::chrono::system_clock::now();\n    //buffer_len = 5845200;\n    while (time < total_times) {\n        std::int64_t result = publication->offer(src_buffer, 0, buffer_len);\n        if (result < 0) {\n            if (NOT_CONNECTED == result) {\n                std::cout << \" not connected yet.\" << std::endl;\n            } else if (BACK_PRESSURED == result) {\n                std::cout << \" back presured.\" << std::endl;\n                do {\n                    result = publication->offer(src_buffer, 0, buffer_len);\n                    std::this_thread::sleep_for(std::chrono::milliseconds(40));\n                } while (result == 0);\n            } else {\n                std::cout << \" ah?! unknown \" << std::endl;\n            }\n        }\n        ++time;\n        std::this_thread::sleep_for(std::chrono::milliseconds(40));\n        //std::this_thread::sleep_for(std::chrono::microseconds(800));\n    }\n    auto end = std::chrono::system_clock::now();.             if (result < 0) {\n            if (NOT_CONNECTED == result) {\n                std::cout << \" not connected yet.\" << std::endl;\n            } else if (BACK_PRESSURED == result) {\n                std::cout << \" back presured.\" << std::endl;\n                do {\n                    result = publication->offer(src_buffer, 0, buffer_len);\n                    std::this_thread::sleep_for(std::chrono::milliseconds(40));\n                } while (result == 0);\n            } else {\n                std::cout << \" ah?! unknown \" << std::endl;\n                do {\n                    result = publication->offer(src_buffer, 0, buffer_len);\n                    std::this_thread::sleep_for(std::chrono::milliseconds(40));\n                } while (result == 0);\n            }\n        }\n\nthe data loss still exists!. while (result == 0);   Sorry, It's my fault!!!   thanks a lot!!!. The problem seems to be solved. I'll seriously take a look at the buffer length. Thank All again.. what you have said i do not understand. Can you be more specific?. OK, I\u2018ll do that.. CNC_VERSION = 7;\nI run a java media driver and a C++ client.\nint Aeron.cpp:\n116         while (0 == ringBuffer.consumerHeartbeatTime())                                           \n117         {                                                                                         \n118             if (currentTimeMillis() > (startMs + context.m_mediaDriverTimeout))                   \n119             {                                                                                     \n120                 throw DriverTimeoutException(std::string(\"No driver heartbeat detected.\"), SOURCEINFO);\n121             }                                                                                     \n122                                                                                                   \n123             std::this_thread::sleep_for(IDLE_SLEEP_MS_1);                                         \n124         }                                                                                         \n125                                                                                                   \n126         const long long timeMs = currentTimeMillis();                                             \n127         if (ringBuffer.consumerHeartbeatTime() < (timeMs - context.m_mediaDriverTimeout))         \n128         {                                                                                         \n129             if (timeMs > (startMs + context.m_mediaDriverTimeout))                                \n130             {                                                                                     \n131                 throw DriverTimeoutException(std::string(\"No driver heartbeat detected.\"), SOURCEINFO);\n132             }                                                                                     \n133                                                                                                   \n134             cncBuffer = nullptr;                                                                  \n135                                                                                                   \n136             std::this_thread::sleep_for(IDLE_SLEEP_MS_100);                                       \n137             continue;                                                                             \n138         }                              \n. compile cannot pass. So sorry\uff0c I found One of my colleagues has modified the code and used gettimeofday().. ",
    "RajivSignal": "Sorry - for the confusing wording. Not every subscriber host will receive all 1024 topics. In fact the subscribers will divide the 1024 topics amongst themselves and consume them based on an arbiter assigned subscriber -> List<Topic> mapping. But every producer will produce to 1024 logical topics. Every message that the producer outputs is basically hashed onto one of these 1024 topics, and put on the topic. Each consumer consumes from a disjoint set of these topics based on the arbiter assigned subscriber -> List<Topic> mapping. This ensures (more or less) that messages with the same id are always processed by the same subscriber process. This is required because the subscribers hold in memory state and processing of messages requires prior state and mutates this state during processing. So in a typical brokered system this would look like the following:\n1) Many producers put messages on the same logical topic. So every producer writes to every topic.\n2) Consumers consume from a disjoint set of topics and hence read messages from each producer that published on that topic. No two consumers however consume the same topic.\n. ",
    "goglusid": "Indeed, what prevents the transmitter to wrap around and overwrite the memory pointed to by the message record offset in such a way that the length is < capacity and the tail stamp == cursor. If all messages would be of equal size then a tail stamp would always be at the same offsets in the buffer but otherwise I don't see how it would work given a previous tail stamp could later be part of a new message. I hope this clarify my point. Not that easy to discuss threading issues.\n. I agree it is very unlikely but still possible.  \nPossible Fix: Forcing messages to always start at given offsets in the buffer would work given the headers would always be at the same places in the buffers. All of this at the expense of wasting space in the buffer.\n. Already fixed.. Sorry for the misunderstanding and thanks for the fast reply.\nEx:\nTermBufferSize: 8 MB\nProcess#1: Creates an 2 IPC Publications on stream 10\nProcess#2: Creates 2 IPC Subscriptions  on stream 10.\nProcess#3: Creates 4 IPC Subscriptions  on stream 10.\nIn this example:\nProcess#1: Has a working set memory size: ~29 MB\nProcess#2: Has a working set memory size: ~54 MB\nProcess#3: Has a working set memory size: ~103 MB\nGiven that an IPC Subscription is, from what I understand, a sequence id on top of a publisher's term buffers, then why are we mapping these term buffers for each IPC subscriptions? \nMoreover, we already do this optimisation for the 2 IPC Publications in Process#1.\n. In this example, the MediaDriver as a working set memory size: ~109 MB. Meaning it also maps the same term buffers multiple times.\n. I'm running in a process compiled in 32 Bits. On Windows, when using the large address space process flag, I can have a max of 4 GB of application space. My current understanding is that each mapping subtracts from this 4 GB limit. Also since Subscription aren't thread safe, I need one for each thread within that process. Add to this the fact that I'm planning to have a lot of remote hosts meaning a term buffer per host. I would say it is worth it but maybe only for my case.\nMy takeaway is that: \"We could save a mapping on the subscriber side \"  So if I need to go there to save virtual address space then I will do it. \nRegards and Thanks for taking the time to respond. ;)\n. If we were to delay the call to MemoryMappedFile::cleanUp() X ms after the actual ClientConductor::onInterServiceTimeout then we could avoid this crash.\nThis period (X ms) would represent the maximum amount of execution time for a single call to Publication::offer or the time elapsed between calling Publication::tryClaim and BufferClaim.commit. For reference, I'm talking about the following code when I talk about the management of Image's log buffers has lingering resources:\nvoid ClientConductor::onUnavailableImage(\n    std::int32_t streamId,\n    std::int64_t correlationId)\n{\n    const long long now = m_epochClock();\n    std::lock_guard lock(m_adminLock);\nstd::for_each(m_subscriptions.begin(), m_subscriptions.end(),\n    [&](const SubscriptionStateDefn &entry)\n    {\n        if (streamId == entry.m_streamId)\n        {\n            std::shared_ptr<Subscription> subscription = entry.m_subscription.lock();\n\n            if (nullptr != subscription)\n            {\n                std::pair<Image*, int> result = subscription->removeImage(correlationId);\n                Image* oldArray = result.first;\n                const int index = result.second;\n\n                if (nullptr != oldArray)\n                {\n                    **lingerResource(now, oldArray[index].logBuffers());**\n                    lingerResource(now, oldArray);\n                    entry.m_onUnavailableImageHandler(oldArray[index]);\n                }\n            }\n        }\n    });\n\n}. I agree that lingering only reduce the probability of having this issue.\nIf we were to store a smart ptr in the Publication instance returned by findPublication then the application would control the lifetime of the logbuffers without possible race. Anything I am missing here?. @tmontgomery I meant keep it around until Publication::~Publication. @tmontgomery Your awesomeness knows no bounds! ;p Problem solved. Thanks :D. @tmontgomery Could you please elaborate a bit on the other changes in this area?\n. Thinking of it we could create a subscriber in the publisher process just to protect the claim buffer. Maybe we could have a built-in subscriber position within a publisher, when we call offer we would set it to the producer position and when we call the bufferclaim we would not advance it untill the BufferClaim::commit is called. \nSorry for discussing with myself here ;p\nI think the cleanest way to deal with this use case is to have a noop subscriber to each publications. That way the MediaDriver will not cleanup claimed buffer.\n. My understanding is that the memory needs to be zeroed prior to be available for use by the publication.  Otherwise a consumer might read a garbage value among other thing for the frame-length. \nCommitting a claimed message after the execution of the cleaning will set the frame length bytes to at least 32. \nWhen the publication wrap around and reuse that memory, a consumer may read a message that is not valid. That is if the frame length falls on the same term offset. \n. @tmontgomery  Indeed, joining at the consumerPosition prevents stepping over any uncommited messages. \n@mjpt777 I shall say thank you very much indeed! ;). Following is a scenario leading to this situation:\n1) Create a new publication (consumerPosition=0, lastConsumerPosition=0, producerPosition=0)\n2) Create a new subscription (joinPosition=0)\n3) Publication::tryClaim(X Bytes) producerPosition=X (+32 bytes for the header but that's details)\nWe now enter the following function with:\nconsumerPosition=lastConsumerPosition=0\nand\nproducerPosition() > consumerPosition\nand\ntimeNs > (timeOfLastConsumerPositionChange + unblockTimeoutNs)\nwith timeOfLastConsumerPositionChange =0\nSo as soon as timeNs > unblockTimeoutNs, we call LogBufferUnblocker.unblock.\nprivate void checkForBlockedPublisher(final long timeNs)\n    {\n        if (consumerPosition == lastConsumerPosition)\n        {\n            if (producerPosition() > consumerPosition &&\n                timeNs > (timeOfLastConsumerPositionChange + unblockTimeoutNs))\n            {\n                if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, consumerPosition))\n                {\n                    unblockedPublications.orderedIncrement();\n                }\n            }\n        }\n        else\n        {\n            timeOfLastConsumerPositionChange = timeNs;\n            lastConsumerPosition = consumerPosition;\n        }\n    }. I changed the following code and I no longer have the issue. However, I don't know if there's a better fix to that.\npublic void onTimeEvent(final long timeNs, final long timeMs, final DriverConductor conductor)\n    {\n        if (subscriberPositions.length == 0)\n        {\n            timeOfLastConsumerPositionChange = timeNs;\n        }\ncheckForBlockedPublisher(timeNs);.  My understanding is that this problem is still present for the first message published after a transition between having no subscribers and having at least one subscriber.\nEx:\n1) A publication had subscriber but now have none. \na possible case is this: consumerPosition = lastConsumerPosition = producerPosition\ntimeOfLastConsumerPositionChange = T0\n2) Wait for instance 2* unblockTimeoutNs\n3) Add a new subscription\n4) Claim a message but don't commit\n5) At this point, we have\nconsumerPosition = lastConsumerPosition < producerPosition\ntimeOfLastConsumerPositionChange = T0\nand timeNs >= T0+ 2*unblockTimeoutNs\nSo we call LogBufferUnblocker.unblock and the publication claimed message is forcefully commited by the media driver.\n. I concur this will solve this issue.\nIf I take into account the amount of money I paid to get Aeron in the first place (0$ ;p) I shouldn't complain but yet I will respectfully.\nFrom what I understand, if an IPC subscriber stops consuming messages for more than the unblock period then the MediaDriver will start to unblock the IPC Publisher.  \nThe same thing happens if a publisher takes more than the unblock period between claim and commit.\nAlso for the Subscriber's Image, if a Subscriber takes more than the lingering period to read messages then it will crash because the Image and Log Buffers it reads are deleted.\nThis is the type of things that should be documented (if possible avoided) because it is like juggling with razor blades as it makes the system going into an undefined behavior.\nIt would be better if we would only free resources or unblock messages only if we know it is safe to do so.\nObviously if I find a better way to do it. I'll share it with you.. @mjpt777 I will test/review this later today or tomorrow.. @mjpt777 From what I understand the image mapping is removed after the lingering period. @tmontgomery ?. @tmontgomery  The following line in bold destroys the mapping for a given image after the lingering timeout. So if during this period, we have an IPC subsription scanning the log buffers then it will crash. That's what happens when I debug for instance.\n```cpp\nvoid ClientConductor::onCheckManagedResources(long long now)\n{\n    std::lock_guard lock(m_adminLock);\n// erase-remove idiom\n\n// check LogBuffers\nauto logIt = std::remove_if(m_lingeringLogBuffers.begin(), m_lingeringLogBuffers.end(),\n  [now, this](const LogBuffersLingerDefn& entry)\n{\n  return (now > (entry.m_timeOfLastStatusChange + m_resourceLingerTimeoutMs));\n});\n\n**m_lingeringLogBuffers.erase(logIt, m_lingeringLogBuffers.end());**\n\n```. @mjpt777  Indeed if you call poll after the close/removeImage  you are safe. However if you  call poll prior to these calls and don't return from poll during the lingering period then it will crash.\nObviously, you can put a huge timeout to cover most case but still relying on timeouts for this is risky.. @tmontgomery  I know, ideally we need to figure out an approach that doesn't need to use a shared_ptr increment/decrement of atomic for each poll. I'm thinking of it.. @tmontgomery Ok what about this. Given a subscription is only accessed by one thread, we could call periodically a fct ex Subcription::safePoint to notify the ClientConductor that we aren't in the poll function anymore. Safepoint could increment an atomic...not frequently though. When removeImage is called we would take a copy of this safePoint counter and later the ClientConductor would compare if the current safePoint is > than its copy, if so then it is safe to delete managed resources.\nBasically, the responsability of knowning the safePoint is on the Subsriber side. If you accept to use more memory then you can call safePoint every hour. \n. @mjpt777 Right now I can't see why your latest changes wouldn't work. (double negation) ;p That being said lock free programming leads to an increase of the possible states your program can reach so who knows... In my test, it only unblocks if the timeout is reached. Thank you very much. @tmontgomery Using a C++ AgentInvoker for the ClientConductor would be very useful to make the lingering of resources safe. \nI'll think about a way to notify the MediaDriver when it is safe to delete lingering resources. Stay tuned!. @tmontgomery That was fast Thanks . @tmontgomery In the mean time I implemented the following to make sure deleting resources is safe. Note that it only works for single threaded application. I added a produderId and consummerId both atomic values. When the media driver add a new resource to linger it increase the producer id, When the application calls a new fonction on the Aeron instance, it sets the consummer id = producer id. The media driver monitors the consummer id for each resource waiting to be deleted. when consummerID >= Resource.copyOfProducerId then it is safe to delete that resource.. @tmontgomery BTW using AgentInvoker as a way to make sure deleting resource is safe also implies having all the subscribers and the agent invoker run a single thread. . @mjpt777 \nCould you please confirm that the following use case isn't covered:\nIf a process calling a publication::offer crashes just before setting the active partition index then the media driver doesn't unblock this publication.\nprivate long newPosition(final int index, final int currentTail, final long position, final long result)\n    {\n       ....\n        else if (termOffset == TermAppender.TRIPPED)\n        {\n            final int nextIndex = nextPartitionIndex(index);\n            initialiseTailWithTermId(logMetaDataBuffer, nextIndex, termId(result) + 1);\n        **>>>>> Publication's Process Crashes Here <<<<<<<**\n\n        activePartitionIndexOrdered(logMetaDataBuffer, nextIndex);\n    }\n\n    return newPosition;\n}\n\nprivate void checkForBlockedPublisher(final long timeNs)\n    {\n        final long consumerPosition = this.consumerPosition;\n     **>>>>> producerPosition() == consumerPosition so we don't call unblock <<<<<**\n\n    if (consumerPosition == lastConsumerPosition && producerPosition() > consumerPosition)\n    {\n        if (timeNs > (timeOfLastConsumerPositionUpdateNs + unblockTimeoutNs))\n        {\n            if (LogBufferUnblocker.unblock(termBuffers, metaDataBuffer, consumerPosition))\n            {\n                unblockedPublications.orderedIncrement();\n            }\n        }\n    }\n    else\n    {\n        timeOfLastConsumerPositionUpdateNs = timeNs;\n        lastConsumerPosition = consumerPosition;\n    }\n}\n\n. In order to test that I simply commented the line \nactivePartitionIndexOrdered(logMetaDataBuffer, nextIndex);\nThat way it emulates a crash and the following calls to offer all fail given that the term rotation is lost.. I am curious to know more about this other issue.. @mjpt777 \nThere's another problem:\nLet's assume a lot of threads simultaneously calling Pulication::offer checking and passing the publication limit condition and all entering the TermAppender::appendUnfragmentedMessage. Given that each thread will increment the rawTail and the fact that the rawTail only has 32 bits for the offset, it is possible that the offset grow larger than 2^32 and start to mess with the upper bound of the rawTail (the termId). Do you agree this is an issue?\nAnother issue of using only 32 bits for the TermId is that you are limited to termLength*2^31 Bytes/Publication. This also mean that you now need to deal with a new Maxposition error  in the client.\nIn order to deal with the previous issues, I changed the way to manage the rawTail by bitshifting the termId according to the number of bits needed for the offset based on the term length. This allow 2^63 Bytes/Publication.  Also because the rawTail can no longer keep the termId I added another 64 bits to store the beginPosition of a term (TermId << bitshift). I would be willing to Skype you to discuss in more details.\n. @mjpt777 \nFor a termlength of 1GB that is only 4 threads offering 1GB message. It is practically possible. No?. I meant IPC Publication. Still 36 threads isn't that much.. So if a publication is 32 bytes from term tripping and 36 threads tries to offer the max msg at the same time then we end up in a wrong state? You don't think this is practically an issue?. @tmontgomery \n:) I like your \"obscenely large messages\" lol\nWith a max of 16 MB messages then it is more practically impossible to encounter the issue that I saw. Maybe it could be documented so if someone change this limit it may cause overflow in the rawTail.\n. Note that if we were to store offset as a multiple of 32 Bytes instead of #Bytes then we would avoid the overflow even more...even with bigger messages ;p Indeed the offset is a multiple of 32 bytes so there are 5 bits available.. @tmontgomery What about the following? You still get the performance of using an array but you need only one atomic load so no interleaving.\nstruct ImageArray\n{\n   size_t imageCount;\n   Image* images[1];\n};\nYou could also allocate size and array as a contiguous memory block to avoid having an array of 1 image when count is zero. It is the same idea anyway.\nImageArray* images = std::atomic_load(&m_images);\n. @mjpt777 Well in the current design, you use a timeout to deal with the lifetime of these image arrays and logbuffers. So my proposed change still works with lingering...even if it is risky to use timeouts. Fair enough though a high enough timeout would be practically safer.\nThat being said, in my super dooper version of Aeron. ;) I implemented the following:  \nIn the ClientConductor:\n\nFor every resource being lingered, I increment long long m_lingerPosition. And I take a snapshot of this position along with the actual resource ptr.\nEvery RESOURCE_TIMEOUT_MS I update an atomic m_conductorLingerPosition like this:\n\nm_conductorLingeringPosition.store(m_lingeringPosition, std::memory_order_release);\n\nOnce in a while the application calls a new function on the Aeron class, let's say Aeron::consumeLingerResources().\n\ninline void ClientConductor::consumeLingerResources()\n    {\n      const long long clientLingeringPosition(m_clientLingeringPosition.load(std::memory_order_acquire));\n      const long long conductorLingeringPosition(m_conductorLingeringPosition.load(std::memory_order_acquire));\n  if (clientLingeringPosition < conductorLingeringPosition)\n  {\n    m_clientLingeringPosition.store(conductorLingeringPosition, std::memory_order_release);\n  }\n}\n\n\nThe ClientConductor is safe to delete lingering resources when the m_clientLingeringPosition >= m_conductorLingeringPosition\n\nNote that this approach only works if a all subscribers and the ClientConductor::consumeLingerResources are called by a single thread.\nI'll take a look to the PublicationImage's NAK signalling.. @tmontgomery In order to avoid allocating the ImageList and the actual Image array, how about the following?\nclass ImageList\n{\npublic:\nstatic ImageList create(size_t length)\n  {\n    ImageList imageList = new (new uint8_t[sizeof(ImageList) + (sizeof(Image)*length)]) ImageList(length);\nfor (size_t i = 0;i < length;i++)\n{\n  new (&(imageList->images()[i])) Image();\n}\n\nreturn imageList;\n\n}\nvoid deleteIt()\n  {\n    for (size_t i = 0;i < m_length;i++)\n    {\n      images()[i].~Image();\n    }\ndelete[] reinterpret_cast<uint8_t*>(this);\n\n}\ninline Image* images()\n  {\n    return reinterpret_cast(reinterpret_cast(this) + sizeof(ImageList));\n  }\nconst size_t m_length;\nprivate:\n  ImageList(size_t length) : m_length(length)\n  {\n  }\n~ImageList() {}\n};. Todd, Martin, \nI concur with you. It is after all an abnormal situation and increasing coupling and state/instructions is not worth it. \nWhen a publication is at least 3 terms behind and happens to be in the current active term then incrementing the rawTail will reserve a space that will stay uninitialized untill the media driver unblocks it. This would delay the associated subscriptions by the unblock period. Validating against the pub limit would avoid this additional delay but would require even more code. :s And subscriptions threads aren't probably running anyway if a publication is 3 term behind!\nThank you very much for answering rapidly. Kindest Regards\nSidney . But the limit isn't the slowest subscription? Writing past the pub limit will overwrite data not yet read by at least one subscription. No?. Indeed! sorry ;[\n. The reported issue is applicable to Java and C. \nFor the unblock section of the code I think we should use expectedTermCount.\nFor the rotateLog sections, I think we should still use the activTermCount though.. Sorry I replied too rapidly I will review the latest changes later and post my feedback. The latest changes resolved the issue. ;) Thanks. Indeed, having a rawTail going forward (driver's rotateLog and then backward (publication) could happen. I will go through the code again to see what side effects this would have. I will comment again later with my conclusion.\nThat being said, shouldn't we use the ordered version of put for the LogBufferDescriptor::initializeTailWithTermId? I'm not sure about a normal write wrt CAS.. It must be the Halloween effect...I see bug's ghost everywhere! ;) . I meant C++ in 32/64 bits have similar results.\nI ran the tests again but this time using different CPU using the affinity of the driver/test application.\na) Aeron C++ 32 bits: ~10 M msg/s with 96 Bytes/Frame   (using using Publication::offer) \nb) Aeron C++ 32 bits: ~26 M msg/s with 96 Bytes/Frame   (using using ExclusivePub::offer)                    \nc) Aeron C++ 32 bits: ~620 K msg/s with 8032 Bytes/Frame (using using ExclusivePub::offer)     \nI compiled with /O2 using VS2017 Pro.\n. Thanks for the hint. If I find a way to speed up that thing, I'll comment.. @tmontgomery I tested with an empty thread_fence (no readwrite barrier) and it didn't affect the performance. It is not this. I also ran two thread publishing on the same stream id with one subscription.  I almost double the throughput. So it appears to be the publication that is too slow compared to the Java counterpart...on the same PC!\nEdited:\n2 threads publishing using ExclusivePublication.. @mjpt777 I am testing both C++ in 32/64 bits but I don't see a major difference between these two. The ~2X difference in throughput is between C++ 32/64 bits and Java. \nI assume Java is in 64 bits. I don't know how to check that except by using the following command:\njava -version\njava version \"1.8.0_151\"\nJava(TM) SE Runtime Environment (build 1.8.0_151-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)\nEdited:\nIt says: Java 8 Update 151 (64 bit) in Windows Control Center\n. Ok I now lost all possible credibility. :s Don't ask what happened before...it is too silly. I re-ran the \"real\" 64 bits Aeron C++ executables and this is what I got. This issue is definitely closed! Sorry.\na) Aeron Java 64 bits: ~23 M msg/s  with 96 Bytes/Frame   (using Publication::offer) \nb) Aeron Java 64 bits: ~43 M msg/s  with 96 Bytes/Frame   (using ExclusivePub::offer) \nc) Aeron Java 64 bits: ~900 K msg/s with 8032 Bytes/Frame (using ExclusivePub::offer) \na) Aeron C++ 32 bits: ~10 M msg/s with 96 Bytes/Frame   (using using Publication::offer) \nb) Aeron C++ 32 bits: ~16 M msg/s with 96 Bytes/Frame   (using using ExclusivePub::offer)                    \nc) Aeron C++ 32 bits: ~620 K msg/s with 8032 Bytes/Frame (using using ExclusivePub::offer)                     \na) Aeron C++ 64 bits: ~19 M msg/s with 96 Bytes/Frame   (using using Publication::offer) \nb) Aeron C++ 64 bits: ~37 M msg/s with 96 Bytes/Frame   (using using ExclusivePub::offer)                    \nc) Aeron C++ 64 bits: ~630 K msg/s with 8032 Bytes/Frame (using using ExclusivePub::offer)      \n. @mjpt777 I am intrigued, could you please elaborate on what is exactly is out of date? What is to be updated?. :D Thanks!\na) Aeron C++ 64 bits: ~[18, 19] M msg/s with 96 Bytes/Frame   (using using Publication::offer) \nb) Aeron C++ 64 bits: ~[38, 39] M msg/s with 96 Bytes/Frame   (using using ExclusivePub::offer)                    \nc) Aeron C++ 64 bits: ~ 1 M msg/s with 8032 Bytes/Frame (using using ExclusivePub::offer)         . I assume similar changes using aeron_acquire/release  are also needed in the C media driver.. As usual you are very fast to respond! The changes are fine with me and do resolve the issue I found. Thank you very much!. Indeed that was the issue. Thank you! . ",
    "pdavydov108": "That's the cmake part, including the one generated by gtest:\n-- The C compiler identification is GNU 4.9.1\n-- The CXX compiler identification is GNU 4.9.1\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Looking for include file pthread.h\n-- Looking for include file pthread.h - found\n-- Looking for pthread_create\n-- Looking for pthread_create - not found\n-- Looking for pthread_create in pthreads\n-- Looking for pthread_create in pthreads - not found\n-- Looking for pthread_create in pthread\n-- Looking for pthread_create in pthread - found\n-- Found Threads: TRUE\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/pablo/Aeron/cppbuild\nScanning dependencies of target gmock\n[  3%] Creating directories for 'gmock'\n[  6%] Performing download step (verify and extract) for 'gmock'\n-- verifying file...\n     file='/home/pablo/Aeron/aeron-common/src/main/cpp/3rdparty/gmock-1.7.0.zip'\n-- verifying file... done\n-- extracting...\n     src='/home/pablo/Aeron/aeron-common/src/main/cpp/3rdparty/gmock-1.7.0.zip'\n     dst='/home/pablo/Aeron/cppbuild/gmock-prefix/src/gmock'\n-- extracting... [tar xfz]\n-- extracting... [analysis]\n-- extracting... [rename]\n-- extracting... [clean up]\n-- extracting... done\n[ 10%] No patch step for 'gmock'\n[ 13%] No update step for 'gmock'\n[ 16%] Performing configure step for 'gmock'\n-- The CXX compiler identification is GNU 4.9.1\n-- The C compiler identification is GNU 4.9.1\n-- Check for working CXX compiler: /usr/bin/c++\n-- Check for working CXX compiler: /usr/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Check for working C compiler: /usr/bin/cc\n-- Check for working C compiler: /usr/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Found PythonInterp: /usr/bin/python (found version \"2.7.8\") \n-- Looking for include file pthread.h\n-- Looking for include file pthread.h - found\n-- Looking for pthread_create\n-- Looking for pthread_create - not found\n-- Looking for pthread_create in pthreads\n-- Looking for pthread_create in pthreads - not found\n-- Looking for pthread_create in pthread\n-- Looking for pthread_create in pthread - found\n-- Found Threads: TRUE\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/pablo/Aeron/cppbuild/gmock-prefix/src/gmock-build\n. I added this flag and the build succeded on Debian. Also, on Fedora 21 it builds just fine without any modifications (without adding ${CMAKE_THREAD_LIBS_INIT}). So, maybe it's some issue with debian... FindThreads.cmake and cmake versions are same on both systems. By the way, do you plan FreeBSD support?\n. ",
    "preoctopus": "\"FragmentAssemblyAdapter can't cope with an uncertain world, decides to end it all\" \nSounds tragic.\n. ",
    "dameiss": "Looks like it. I think requiring -Djava.net.preferIPv4Stack=true is... ah... less than optimal.\n. Yes, this seems to fix the problem. Thanks!\n. \"Unique receivers\" anyone? :-)\nHaving a close method close only the specific subscription object (and not other subscriptions) allows much more flexibility. For example, two subscriptions to the same stream could serve completely different purposes semantically, or be the result of two independent threads (who don't know of the other's existence). Closing all subscriptions to a stream would seem kind of... well, rude.\n. ",
    "vksingh70": "Not 100% sure, but I think it was the following:\njava -cp aeron-samples/build/libs/samples.jar -Daeron.dir.data=/tmp/aeron/data -Daeron.dir.conductor=/tmp/aeron/conductor -Daeron.sample.channel=udp://224.168.33.11:5000 -Djava.net.preferIPv4Stack=true uk.co.real_logic.aeron.driver.MediaDriver\nAfter one instance, I have never been able to reproduce it.\n. Sample apps referred in the above bug can be found at \nhttps://github.com/strangelydim/Aeron\n. I just took a dump for one of the Media Driver at the producer side. I will repeat the test and attach more dumps for comparison.\nvsingh@cooper Aeron >jstack 12069\n2015-05-27 08:54:44\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode):\n\"Attach Listener\" #15 daemon prio=9 os_prio=0 tid=0x00007f6f58001000 nid=0x1e22 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"driver-conductor\" #11 prio=5 os_prio=0 tid=0x00007f6f801ba800 nid=0x2f31 runnable [0x00007f6f5d845000]\n   java.lang.Thread.State: RUNNABLE\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.waitForMsgLengthVolatile(ManyToOneRingBuffer.java:312)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:137)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:112)\n        at uk.co.real_logic.aeron.driver.DriverConductor.doWork(DriverConductor.java:224)\n        at uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:92)\n        at java.lang.Thread.run(Thread.java:745)\n\"Service Thread\" #7 daemon prio=9 os_prio=0 tid=0x00007f6f800a9000 nid=0x2f2d runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C1 CompilerThread1\" #6 daemon prio=9 os_prio=0 tid=0x00007f6f800a5800 nid=0x2f2c waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=0 tid=0x00007f6f800a3800 nid=0x2f2b waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=0 tid=0x00007f6f800a1800 nid=0x2f2a runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"Finalizer\" #3 daemon prio=8 os_prio=0 tid=0x00007f6f80072000 nid=0x2f29 in Object.wait() [0x00007f6f707fe000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:142)\n        - locked <0x00000000ec712430> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:158)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\"Reference Handler\" #2 daemon prio=10 os_prio=0 tid=0x00007f6f8006d800 nid=0x2f28 in Object.wait() [0x00007f6f84159000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        at java.lang.Object.wait(Object.java:502)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:157)\n        - locked <0x00000000ec7125e8> (a java.lang.ref.Reference$Lock)\n\"main\" #1 prio=5 os_prio=0 tid=0x00007f6f80009000 nid=0x2f26 in Object.wait() [0x00007f6f85cb7000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        at java.lang.Thread.join(Thread.java:1253)\n        - locked <0x00000000ec7c3dc0> (a java.lang.Thread)\n        at uk.co.real_logic.agrona.concurrent.AgentRunner.close(AgentRunner.java:130)\n        at uk.co.real_logic.aeron.driver.MediaDriver$$Lambda$50/1327763628.accept(Unknown Source)\n        at java.lang.Iterable.forEach(Iterable.java:75)\n        at uk.co.real_logic.aeron.driver.MediaDriver.close(MediaDriver.java:202)\n        at uk.co.real_logic.aeron.driver.MediaDriver.main(MediaDriver.java:87)\n\"VM Thread\" os_prio=0 tid=0x00007f6f80068800 nid=0x2f27 runnable \n\"VM Periodic Task Thread\" os_prio=0 tid=0x00007f6f800ae000 nid=0x2f2e waiting on condition \nJNI global references: 283\n. I tried to retest the fix this morning and ran into similar issue. Looks like Media Driver (Producer side) is stuck and java process is running at 99.8 % cpu\nvsingh@cooper SlowAeron >jstack 15265\n2015-06-01 09:35:55\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.5-b02 mixed mode):\n\"Attach Listener\" #12 daemon prio=9 os_prio=0 tid=0x00007f3268001000 nid=0x3c15 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"driver-conductor\" #11 prio=5 os_prio=0 tid=0x00007f32901c8000 nid=0x3bad runnable [0x00007f3294314000]\n   java.lang.Thread.State: RUNNABLE\n        at java.lang.Thread.yield(Native Method)\n        at uk.co.real_logic.aeron.common.event.EventLogger.logException(EventLogger.java:186)\n        at uk.co.real_logic.aeron.driver.DriverConductor.onClientCommand(DriverConductor.java:449)\n        at uk.co.real_logic.aeron.driver.DriverConductor$$Lambda$34/764308918.onMessage(Unknown Source)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:159)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:117)\n        at uk.co.real_logic.aeron.driver.DriverConductor.doWork(DriverConductor.java:243)\n        at uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:93)\n        at java.lang.Thread.run(Thread.java:745)\n\"receiver\" #10 prio=5 os_prio=0 tid=0x00007f32901c6000 nid=0x3bac waiting on condition [0x00007f3294415000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)\n        at uk.co.real_logic.agrona.concurrent.BackoffIdleStrategy.idle(BackoffIdleStrategy.java:103)\n        at uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:94)\n        at java.lang.Thread.run(Thread.java:745)\n\"sender\" #9 prio=5 os_prio=0 tid=0x00007f32901c4800 nid=0x3bab waiting on condition [0x00007f3294516000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)\n        at uk.co.real_logic.agrona.concurrent.BackoffIdleStrategy.idle(BackoffIdleStrategy.java:103)\n        at uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:94)\n        at java.lang.Thread.run(Thread.java:745)\n\"Service Thread\" #7 daemon prio=9 os_prio=0 tid=0x00007f32900a7000 nid=0x3ba9 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C1 CompilerThread1\" #6 daemon prio=9 os_prio=0 tid=0x00007f32900a3800 nid=0x3ba8 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"C2 CompilerThread0\" #5 daemon prio=9 os_prio=0 tid=0x00007f32900a1800 nid=0x3ba7 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"Signal Dispatcher\" #4 daemon prio=9 os_prio=0 tid=0x00007f329009f800 nid=0x3ba6 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\"Finalizer\" #3 daemon prio=8 os_prio=0 tid=0x00007f3290072000 nid=0x3ba5 in Object.wait() [0x00007f3295344000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000ec70f438> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:142)\n        - locked <0x00000000ec70f438> (a java.lang.ref.ReferenceQueue$Lock)\n        at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:158)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:209)\n\"Reference Handler\" #2 daemon prio=10 os_prio=0 tid=0x00007f329006d800 nid=0x3ba4 in Object.wait() [0x00007f3295445000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x00000000ec70f5f0> (a java.lang.ref.Reference$Lock)\n        at java.lang.Object.wait(Object.java:502)\n        at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:157)\n        - locked <0x00000000ec70f5f0> (a java.lang.ref.Reference$Lock)\n\"main\" #1 prio=5 os_prio=0 tid=0x00007f3290009000 nid=0x3ba2 waiting on condition [0x00007f32977a4000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)\n        at uk.co.real_logic.agrona.concurrent.SigIntBarrier.await(SigIntBarrier.java:53)\n        at uk.co.real_logic.aeron.driver.MediaDriver.main(MediaDriver.java:84)\n\"VM Thread\" os_prio=0 tid=0x00007f3290068800 nid=0x3ba3 runnable \n\"VM Periodic Task Thread\" os_prio=0 tid=0x00007f32900b4000 nid=0x3baa waiting on condition \nJNI global references: 286\n. I have restarted the test with latest code from real-logic repo. Will update you tomorrow evening. \n. I did not see any problem with the latest code. Both the drivers were responsive after overnight run. This issue can be closed.\n. Agree, Will fix that\n. This shows that we can do it without AutoClosable. \nAlso, show the explicit need to close publication and aeron. There may be a case where we wanted to store publication in a variable beyond the try block and eventually need to be closed.\n. Sure\n. Sure\n. ",
    "johnpr01": "I can attach the test code I used if needed (or I can point you to it).\n. I will check the stats tomorrow. Yes I am calling commit. Also, publisher and subscriber are on the same box, and I'm using upd://localhost:[portNum] for the channel.\n. This actually has nothing to do with not being able to use unique directory names (which it can't). The issue with this tool is that the LABEL_SIZE was changed from 1024 to 128 in the CountersManager. I have modified the source to use the LABEL_SIZE from CountersManager directly so that this will not happen again. I will be issuing a pull request with this fix.\n. Sorry, in the previous comment I meant to say (which it can) instead of (which it can't).\n. Will be moving the subproject aeron-tools out of top-level build.gradle and moving to aeron-tools/build.gradle and moving third-party dependencies into the aeron-tools/build.gradle and out of the top-level build.gradle. We will later probably go back and swap out the SLF with java.util.logging.\n. This version is more for the performance testing framework. I didn't want to clutter up the sample version (which I think most people would use). This version is run after builds and then the data is fed through gnuplot to generate our latency graphs per build. I will clean it up and change a couple of method names since I've started using gnuplot instead of having the tool generate scatterplots itself.\n. Correct. This will be removed. I was unable to get to it prior to the pull request being made.\n. I have already moved all of this into the build.gradle in aeron-tools. I also create a separate tools.jar which packages everything together just like samples.jar.\n. Throughputency refers to a type of test. It is a combination of Throughput and Latency, sometimes also called a Latency Under Load test. We defined this term a few years ago while still 29W.\n. ",
    "rmizuta": "Thank you.  That worked.\n\nOn Apr 15, 2015, at 3:07 AM, Martin Thompson notifications@github.com wrote:\nThat looks like you are using an old version of Aeron. We have not used the file format for a few months.\n\u2015\nReply to this email directly or view it on GitHub.\n. Yes. I am running 2 media drivers but using different directories for each media drivers.\n\nThank you.\nRM\n\nOn Apr 17, 2015, at 10:53 AM, Todd L. Montgomery notifications@github.com wrote:\nAre you running two media drivers?\n\u2015\nReply to this email directly or view it on GitHub.\n. I recently updated the code and received a similar error. I only have a single instance of media driver running on the computer.\n\n[2418469.062105] ERROR_DELETING_FILE [124/124]: C:\\driver\\publications\\UDP-00000000-0-7f000001-1001-75862CDF-2-2.logbuffer\nOnce I see the error, it keeps repeating every time I close and restart the application and stops receiving messages from the publisher.  Is there a way to handle the above error so that the driver will keep receiving data after the error? or Is there a way to restart the application without seeing the error repeatedly?\nI have tried restarting it after deleting the whole directory but I would still see the error. What doesn't make sense to me is that it eventually starts working again without showing errors. Could there be some kind of memory leak or is it holding some state outside of the directory?\nUpdate to my above comment:\nI added a code right after closing the Media Drive to delete the file on exit. MediaDriver.Context,dirsDeleteOnExit.  I am getting the following exception if I try to close the application right after the error.\njava.nio.file.FileSystemException: C:\\driver\\publications\\UDP-00000000-0-7f000001-1001-3C53E4A1-2-2.logbuffer: The process cannot access the file because it is being used by another process.\nat sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:86)\nat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)\nat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)\nat sun.nio.fs.WindowsFileSystemProvider.implDelete(WindowsFileSystemProvider.java:269)\nat sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)\nat java.nio.file.Files.delete(Files.java:1126)\nat uk.co.real_logic.agrona.IoUtil.delete(IoUtil.java:106)\nat uk.co.real_logic.agrona.IoUtil.delete(IoUtil.java:97)\nat uk.co.real_logic.agrona.IoUtil.delete(IoUtil.java:97)\nat uk.co.real_logic.aeron.driver.MediaDriver.deleteDirectories(MediaDriver.java:261)\nat uk.co.real_logic.aeron.driver.MediaDriver.close(MediaDriver.java:207)\nThis seems like something in the code isn't closing or releasing the access properly.\nThank you.\nRM\n. ",
    "flxalexo": "Confirmed that this issue has been resolved.\nThank you.\n. Yes, this is a 32-bit JVM, are 32-bit JVMs not supported at the moment?\nOn Fri, May 1, 2015 at 5:48 PM, Martin Thompson notifications@github.com\nwrote:\n\nOut of curiosity is this a 32-bit JVM?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/109#issuecomment-98248004.\n. Yes, the issue has been resolved, thank you.\n. \n",
    "mst4": "Here is a portion of the log from a ThwackerTool run.  It reports the stack trace, the offered length when the Exception was caught, and the subsequent error in verifying the stream when the next message comes in after the exception.\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 92\nWARN Verifiable message stream received sequence number 3488683, but was expecting 3488682. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65520, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 83\nWARN Verifiable message stream received sequence number 3539678, but was expecting 3539677. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 97\nWARN Verifiable message stream received sequence number 3560305, but was expecting 3560304. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 80\nWARN Verifiable message stream received sequence number 3565263, but was expecting 3565262. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 78\nWARN Verifiable message stream received sequence number 3645803, but was expecting 3645802. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65520, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 89\nWARN Verifiable message stream received sequence number 3664445, but was expecting 3664444. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 68\nWARN Verifiable message stream received sequence number 3707712, but was expecting 3707711. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 73\nWARN Verifiable message stream received sequence number 3709140, but was expecting 3709139. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 89\nWARN Verifiable message stream received sequence number 3385996, but was expecting 3385995. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:21\njava.lang.IndexOutOfBoundsException: index=65520, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 69\nWARN Verifiable message stream received sequence number 3723628, but was expecting 3723627. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\njava.lang.IndexOutOfBoundsException: index=65528, length=24, capacity=65536\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.boundsCheck(UnsafeBuffer.java:811)\n    at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.putBytes(UnsafeBuffer.java:740)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendPaddingFrame(LogAppender.java:306)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.appendUnfragmentedMessage(LogAppender.java:218)\n    at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogAppender.append(LogAppender.java:144)\n    at uk.co.real_logic.aeron.Publication.offer(Publication.java:192)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$ThwackingElement.trySendMessage(ThwackerTool.java:883)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.sendOnRandomPub(ThwackerTool.java:470)\n    at uk.co.real_logic.aeron.tools.ThwackerTool.lambda$createAndStartThreads$6(ThwackerTool.java:294)\n    at uk.co.real_logic.aeron.tools.ThwackerTool$$Lambda$63/1940030785.run(Unknown Source)\n    at java.lang.Thread.run(Thread.java:745)\nDEBUG Length Offered: 76\nWARN Verifiable message stream received sequence number 3726653, but was expecting 3726652. Possibly missed 1 messages. StreamID:9876::SessID:-1131199175::ThreadID:22\n. ",
    "pdctuser": "I am encountering the same problem even with the fixes. My setup is a 32-bit laptop running Ubuntu 12.04.5. \n. Yes, cloned it on Monday 5/11.\n. - What went wrong:\n  Execution failed for task ':aeron-client:test'.\n\nThere were failing tests. See the report at: file:///home/dignacio/Projects/Aeron/aeron-client/build/reports/tests/index.html\n- Try:\n  Run with --info or --debug option to get more log output.\n- Exception is:\n  org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':aeron-client:test'.\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69)\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46)\n  at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35)\n  at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64)\n  at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)\n  at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:42)\n  at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)\n  at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)\n  at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)\n  at org.gradle.api.internal.AbstractTask.executeWithoutThrowingTaskFailure(AbstractTask.java:310)\n  at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.executeTask(AbstractTaskPlanExecutor.java:79)\n  at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:63)\n  at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:51)\n  at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:23)\n  at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:88)\n  at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37)\n  at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)\n  at org.gradle.execution.DefaultBuildExecuter.access$200(DefaultBuildExecuter.java:23)\n  at org.gradle.execution.DefaultBuildExecuter$2.proceed(DefaultBuildExecuter.java:68)\n  at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)\n  at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)\n  at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:55)\n  at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:149)\n  at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:106)\n  at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:86)\n  at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:90)\n  at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)\n  at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\n  at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:41)\n  at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)\n  at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:49)\n  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)\n  at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)\n  at org.gradle.util.Swapper.swap(Swapper.java:38)\n  at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:66)\n  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:71)\n  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)\n  at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:246)\n  at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\n  at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\n  Caused by: org.gradle.api.GradleException: There were failing tests. See the report at: file:///home/dignacio/Projects/Aeron/aeron-client/build/reports/tests/index.html\n  at org.gradle.api.tasks.testing.Test.handleTestFailures(Test.java:1129)\n  at org.gradle.api.tasks.testing.Test.executeTests(Test.java:567)\n  at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75)\n  at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.doExecute(AnnotationProcessingTaskFactory.java:226)\n  at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:219)\n  at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:208)\n  at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:589)\n  at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:572)\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)\n  ... 57 more\n\nBUILD FAILED\nTotal time: 10.083 secs\n. Here's the output without stacktrace enabled:\n:aeron-client:test\nuk.co.real_logic.aeron.ClientConductorTest > closingPublicationShouldPurgeCache FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > conductorCachesPublicationInstances FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > cannotCreatePublisherUntilBuffersMapped FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > creatingChannelsShouldNotifyMediaDriver FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > removingSubscriberNotifiesMediaDriver FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > shouldFailToAddSubscriptionOnMediaDriverError FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > closingAPublicationDoesNotRemoveOtherPublications FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > clientNotifiedOfInactiveConnections FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > closingPublicationShouldNotifyMediaDriver FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > publicationsOnlyRemovedOnLastClose FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > registeringSubscriberNotifiesMediaDriver FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > shouldFailToRemoveOnMediaDriverError FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nuk.co.real_logic.aeron.ClientConductorTest > cannotCreateSubscriberIfMediaDriverDoesNotReply FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.broadcast.BroadcastReceiver.(BroadcastReceiver.java:66)\n        at uk.co.real_logic.aeron.ClientConductorTest.(ClientConductorTest.java:79)\nResults: FAILURE (43 tests, 30 successes, 13 failures, 0 skipped)\n43 tests completed, 13 failed\n:aeron-client:test FAILED\nFAILURE: Build failed with an exception.\n- What went wrong:\n  Execution failed for task ':aeron-client:test'.\n. Less failures (8 now, 13 previously) with similar exceptions:\ndignacio@tp-linux:~/Projects/Aeron$ ./gradlew\n:clean\n:aeron-client:clean\n:aeron-common:clean\n:aeron-driver:clean\n:aeron-samples:clean\n:aeron-system-tests:clean UP-TO-DATE\n:aeron-tools:clean\n:aeron-common:compileJava\n:aeron-common:processResources UP-TO-DATE\n:aeron-common:classes\n:aeron-common:jar\n:aeron-client:compileJava\n:aeron-client:processResources UP-TO-DATE\n:aeron-client:classes\n:aeron-client:jar\n:aeron-common:compileTestJava\n:aeron-common:processTestResources UP-TO-DATE\n:aeron-common:testClasses\n:aeron-common:testJar\n:aeron-driver:compileJava\n:aeron-driver:processResources UP-TO-DATE\n:aeron-driver:classes\n:aeron-driver:jar\n:aeron-samples:compileJava\n:aeron-samples:processResources UP-TO-DATE\n:aeron-samples:classes\n:aeron-system-tests:compileJava UP-TO-DATE\n:aeron-system-tests:processResources UP-TO-DATE\n:aeron-system-tests:classes UP-TO-DATE\n:aeron-tools:compileJava\n:aeron-tools:processResources UP-TO-DATE\n:aeron-tools:classes\n:docs\n:docsJar\n:assemble\n:check UP-TO-DATE\n:build\n:aeron-client:javadocJar\n:aeron-client:sourcesJar\n:aeron-client:assemble\n:aeron-client:checkstyleMain\n:aeron-client:compileTestJava\n:aeron-client:processTestResources UP-TO-DATE\n:aeron-client:testClasses\n:aeron-client:checkstyleTest\n:aeron-client:test\nuk.co.real_logic.aeron.ClientConductorTest > closingPublicationShouldPurgeCache FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.ClientConductor.onNewPublication(ClientConductor.java:194)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:78)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.lambda$willNotifyNewBuffer$10(ClientConductorTest.java:383)\n        at uk.co.real_logic.aeron.ClientConductorTest$$Lambda$3/14747556.answer(Unknown Source)\n        at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:34)\n        at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:91)\n        at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n        at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\n        at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\n        at uk.co.real_logic.agrona.concurrent.Signal$$EnhancerByMockitoWithCGLIB$$2f4281ff.await()\n        at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:286)\n        at uk.co.real_logic.aeron.ClientConductor.addPublication(ClientConductor.java:124)\n        at uk.co.real_logic.aeron.ClientConductorTest.addPublication(ClientConductorTest.java:390)\n        at uk.co.real_logic.aeron.ClientConductorTest.closingPublicationShouldPurgeCache(ClientConductorTest.java:200)\nuk.co.real_logic.aeron.ClientConductorTest > conductorCachesPublicationInstances FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.ClientConductor.onNewPublication(ClientConductor.java:194)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:78)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.lambda$willNotifyNewBuffer$10(ClientConductorTest.java:383)\n        at uk.co.real_logic.aeron.ClientConductorTest$$Lambda$3/14747556.answer(Unknown Source)\n        at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:34)\n        at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:91)\n        at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n        at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\n        at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\n        at uk.co.real_logic.agrona.concurrent.Signal$$EnhancerByMockitoWithCGLIB$$2f4281ff.await()\n        at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:286)\n        at uk.co.real_logic.aeron.ClientConductor.addPublication(ClientConductor.java:124)\n        at uk.co.real_logic.aeron.ClientConductorTest.addPublication(ClientConductorTest.java:390)\n        at uk.co.real_logic.aeron.ClientConductorTest.conductorCachesPublicationInstances(ClientConductorTest.java:180)\nuk.co.real_logic.aeron.ClientConductorTest > creatingChannelsShouldNotifyMediaDriver FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.ClientConductor.onNewPublication(ClientConductor.java:194)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:78)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.lambda$willNotifyNewBuffer$10(ClientConductorTest.java:383)\n        at uk.co.real_logic.aeron.ClientConductorTest$$Lambda$3/14747556.answer(Unknown Source)\n        at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:34)\n        at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:91)\n        at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n        at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\n        at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\n        at uk.co.real_logic.agrona.concurrent.Signal$$EnhancerByMockitoWithCGLIB$$2f4281ff.await()\n        at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:286)\n        at uk.co.real_logic.aeron.ClientConductor.addPublication(ClientConductor.java:124)\n        at uk.co.real_logic.aeron.ClientConductorTest.addPublication(ClientConductorTest.java:390)\n        at uk.co.real_logic.aeron.ClientConductorTest.creatingChannelsShouldNotifyMediaDriver(ClientConductorTest.java:164)\nuk.co.real_logic.aeron.ClientConductorTest > closingAPublicationDoesNotRemoveOtherPublications FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.ClientConductor.onNewPublication(ClientConductor.java:194)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:78)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.lambda$willNotifyNewBuffer$10(ClientConductorTest.java:383)\n        at uk.co.real_logic.aeron.ClientConductorTest$$Lambda$3/14747556.answer(Unknown Source)\n        at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:34)\n        at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:91)\n        at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n        at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\n        at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\n        at uk.co.real_logic.agrona.concurrent.Signal$$EnhancerByMockitoWithCGLIB$$2f4281ff.await()\n        at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:286)\n        at uk.co.real_logic.aeron.ClientConductor.addPublication(ClientConductor.java:124)\n        at uk.co.real_logic.aeron.ClientConductorTest.closingAPublicationDoesNotRemoveOtherPublications(ClientConductorTest.java:244)\nuk.co.real_logic.aeron.ClientConductorTest > clientNotifiedOfInactiveConnections FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermReader.(TermReader.java:45)\n        at uk.co.real_logic.aeron.ClientConductor.lambda$onNewConnection$4(ClientConductor.java:235)\n        at uk.co.real_logic.aeron.ClientConductor$$Lambda$11/22632683.accept(Unknown Source)\n        at java.util.ArrayList.forEach(ArrayList.java:1249)\n        at uk.co.real_logic.aeron.ActiveSubscriptions.forEach(ActiveSubscriptions.java:46)\n        at uk.co.real_logic.aeron.ClientConductor.onNewConnection(ClientConductor.java:214)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:95)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.clientNotifiedOfInactiveConnections(ClientConductorTest.java:311)\nuk.co.real_logic.aeron.ClientConductorTest > closingPublicationShouldNotifyMediaDriver FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.ClientConductor.onNewPublication(ClientConductor.java:194)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:78)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.lambda$willNotifyNewBuffer$10(ClientConductorTest.java:383)\n        at uk.co.real_logic.aeron.ClientConductorTest$$Lambda$3/14747556.answer(Unknown Source)\n        at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:34)\n        at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:91)\n        at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n        at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\n        at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\n        at uk.co.real_logic.agrona.concurrent.Signal$$EnhancerByMockitoWithCGLIB$$2f4281ff.await()\n        at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:286)\n        at uk.co.real_logic.aeron.ClientConductor.addPublication(ClientConductor.java:124)\n        at uk.co.real_logic.aeron.ClientConductorTest.addPublication(ClientConductorTest.java:390)\n        at uk.co.real_logic.aeron.ClientConductorTest.closingPublicationShouldNotifyMediaDriver(ClientConductorTest.java:189)\nuk.co.real_logic.aeron.ClientConductorTest > publicationsOnlyRemovedOnLastClose FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.ClientConductor.onNewPublication(ClientConductor.java:194)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:78)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.lambda$willNotifyNewBuffer$10(ClientConductorTest.java:383)\n        at uk.co.real_logic.aeron.ClientConductorTest$$Lambda$3/14747556.answer(Unknown Source)\n        at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:34)\n        at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:91)\n        at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n        at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\n        at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\n        at uk.co.real_logic.agrona.concurrent.Signal$$EnhancerByMockitoWithCGLIB$$2f4281ff.await()\n        at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:286)\n        at uk.co.real_logic.aeron.ClientConductor.addPublication(ClientConductor.java:124)\n        at uk.co.real_logic.aeron.ClientConductorTest.addPublication(ClientConductorTest.java:390)\n        at uk.co.real_logic.aeron.ClientConductorTest.publicationsOnlyRemovedOnLastClose(ClientConductorTest.java:229)\nuk.co.real_logic.aeron.ClientConductorTest > shouldFailToRemoveOnMediaDriverError FAILED\n    java.lang.Exception: Unexpected exception, expected but was\nCaused by:\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.<init>(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.<init>(TermAppender.java:73)\n        at uk.co.real_logic.aeron.ClientConductor.onNewPublication(ClientConductor.java:194)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.onMessage(DriverListenerAdapter.java:78)\n        at uk.co.real_logic.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:84)\n        at uk.co.real_logic.aeron.DriverListenerAdapter.receiveMessages(DriverListenerAdapter.java:56)\n        at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:102)\n        at uk.co.real_logic.aeron.ClientConductorTest.lambda$willNotifyNewBuffer$10(ClientConductorTest.java:383)\n        at uk.co.real_logic.aeron.ClientConductorTest$$Lambda$3/14747556.answer(Unknown Source)\n        at org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:34)\n        at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:91)\n        at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n        at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:38)\n        at org.mockito.internal.creation.cglib.MethodInterceptorFilter.intercept(MethodInterceptorFilter.java:59)\n        at uk.co.real_logic.agrona.concurrent.Signal$$EnhancerByMockitoWithCGLIB$$2f4281ff.await(<generated>)\n        at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:286)\n        at uk.co.real_logic.aeron.ClientConductor.addPublication(ClientConductor.java:124)\n        at uk.co.real_logic.aeron.ClientConductorTest.addPublication(ClientConductorTest.java:390)\n        at uk.co.real_logic.aeron.ClientConductorTest.shouldFailToRemoveOnMediaDriverError(ClientConductorTest.java:214)\nResults: FAILURE (43 tests, 35 successes, 8 failures, 0 skipped)\n43 tests completed, 8 failed\n:aeron-client:test FAILED\nFAILURE: Build failed with an exception.\n. Yes aeron-client tests are passing, however new failures in aeron-driver tests:\n:aeron-driver:test\nuk.co.real_logic.aeron.driver.SenderTest > shouldBeAbleToSendOnChannelTwice FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldBeAbleToSendOnChannelTwiceAsBatch FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldSendMultipleDataFramesAsHeartbeatsWhenIdle FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldSendSetupFrameOnChannelWhenTimeoutWithoutStatusMessage FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldNotSendSetupFrameAfterReceivingStatusMessage FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldNotSendUntilStatusMessageReceived FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldSendMultipleSetupFramesOnChannelWhenTimeoutWithoutStatusMessage FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldSendLastDataFrameAsHeartbeatWhenIdle FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldBeAbleToSendOnChannel FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.SenderTest > shouldNotBeAbleToSendAfterUsingUpYourWindow FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.LogBufferPartition.(LogBufferPartition.java:34)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermAppender.(TermAppender.java:73)\n        at uk.co.real_logic.aeron.driver.SenderTest.lambda$setUp$35(SenderTest.java:127)\n        at uk.co.real_logic.aeron.driver.SenderTest$$Lambda$60/5299118.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.SenderTest.setUp(SenderTest.java:128)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldNotOverwriteDataFrameWithHeartbeat FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.aeron.common.concurrent.logbuffer.TermReader.(TermReader.java:45)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.lambda$setUp$50(ReceiverTest.java:146)\n        at uk.co.real_logic.aeron.driver.ReceiverTest$$Lambda$63/10725376.apply(Unknown Source)\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\n        at java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:512)\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:502)\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:576)\n        at java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:255)\n        at java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:438)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:147)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:156)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldOverwriteHeartbeatWithDataFrame FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:437)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:691)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:141)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:156)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldHandleNonZeroTermOffsetCorrectly FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:437)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:691)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:141)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:156)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldInsertDataIntoLogAfterInitialExchange FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:437)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:691)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:141)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:156)\nuk.co.real_logic.aeron.driver.ReceiverTest > shouldCreateRcvTermAndSendSmOnSetup FAILED\n    java.net.BindException: Address already in use\n        at sun.nio.ch.Net.bind0(Native Method)\n        at sun.nio.ch.Net.bind(Net.java:437)\n        at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:691)\n        at uk.co.real_logic.aeron.driver.ReceiverTest.setUp(ReceiverTest.java:141)\njava.lang.NullPointerException\n    at uk.co.real_logic.aeron.driver.ReceiverTest.tearDown(ReceiverTest.java:156)\nuk.co.real_logic.aeron.driver.UdpChannelTest > shouldHandleIpV6CanonicalFormForMulticastCorrectly SKIPPED\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutSubscriptionOnKeepAlive FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnAddSubscriptionWithInvalidUri FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddAndRemoveSingleSubscription FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownSessionId FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveMultipleStreams FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownStreamId FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutSubscription FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutPublicationOnKeepAlive FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddMultipleStreams FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSingleSubscription FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutPublication FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveSingleStream FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSinglePublication FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nResults: FAILURE (90 tests, 59 successes, 30 failures, 1 skipped)\n90 tests completed, 30 failed, 1 skipped\n:aeron-driver:test FAILED\n. Still getting failures in aeron-driver:tests\n:aeron-driver:test\nuk.co.real_logic.aeron.driver.UdpChannelTest > shouldHandleIpV6CanonicalFormForMulticastCorrectly SKIPPED\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldOnlyRemoveSubscriptionMediaEndpointUponRemovalOfAllSubscribers FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutSubscriptionOnKeepAlive FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnAddSubscriptionWithInvalidUri FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddAndRemoveSingleSubscription FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldKeepSubscriptionMediaEndpointUponRemovalOfAllButOneSubscriber FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownSessionId FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveMultipleStreams FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldErrorOnRemoveChannelOnUnknownStreamId FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutSubscription FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldNotTimeoutPublicationOnKeepAlive FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddMultipleStreams FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSingleSubscription FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldTimeoutPublication FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToRemoveSingleStream FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nuk.co.real_logic.aeron.driver.DriverConductorTest > shouldBeAbleToAddSinglePublication FAILED\n    java.lang.IllegalStateException: AtomicBuffer is not correctly aligned: addressOffset=12 in not divisible by 8\n        at uk.co.real_logic.agrona.concurrent.UnsafeBuffer.verifyAlignment(UnsafeBuffer.java:294)\n        at uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.(ManyToOneRingBuffer.java:65)\n        at uk.co.real_logic.aeron.driver.DriverConductorTest.(DriverConductorTest.java:76)\nResults: FAILURE (90 tests, 74 successes, 15 failures, 1 skipped)\n90 tests completed, 15 failed, 1 skipped\n:aeron-driver:test FAILED\nFAILURE: Build failed with an exception.\n- What went wrong:\n  Execution failed for task ':aeron-driver:test'.\n\nThere were failing tests. See the report at: file:///home/dignacio/Projects/Aeron/aeron-driver/build/reports/tests/index.html\n- Try:\n  Run with --info or --debug option to get more log output.\n- Exception is:\n  org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':aeron-driver:test'.\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69)\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46)\n  at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35)\n  at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64)\n  at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)\n  at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:42)\n  at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)\n  at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)\n  at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)\n  at org.gradle.api.internal.AbstractTask.executeWithoutThrowingTaskFailure(AbstractTask.java:310)\n  at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.executeTask(AbstractTaskPlanExecutor.java:79)\n  at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:63)\n  at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:51)\n  at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:23)\n  at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:88)\n  at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37)\n  at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)\n  at org.gradle.execution.DefaultBuildExecuter.access$200(DefaultBuildExecuter.java:23)\n  at org.gradle.execution.DefaultBuildExecuter$2.proceed(DefaultBuildExecuter.java:68)\n  at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)\n  at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:62)\n  at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:55)\n  at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:149)\n  at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:106)\n  at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:86)\n  at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:90)\n  at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)\n  at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\n  at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:41)\n  at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)\n  at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:49)\n  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)\n  at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)\n  at org.gradle.util.Swapper.swap(Swapper.java:38)\n  at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:66)\n  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:71)\n  at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41)\n  at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n  at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)\n  at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:246)\n  at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\n  at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\n  Caused by: org.gradle.api.GradleException: There were failing tests. See the report at: file:///home/dignacio/Projects/Aeron/aeron-driver/build/reports/tests/index.html\n  at org.gradle.api.tasks.testing.Test.handleTestFailures(Test.java:1129)\n  at org.gradle.api.tasks.testing.Test.executeTests(Test.java:567)\n  at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75)\n  at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.doExecute(AnnotationProcessingTaskFactory.java:226)\n  at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:219)\n  at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:208)\n  at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:589)\n  at org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:572)\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)\n  at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)\n  ... 57 more\n\nBUILD FAILED\nTotal time: 18.465 secs\n. All good now. Thanks for the support.\nBUILD SUCCESSFUL\nTotal time: 1 mins 47.825 secs\n. ",
    "LGLO": "This happens one time per few runs. This exception is thrown concurrently to exception from Agrona's AgentRunner - which is also fatal.\nCode is here:\nhttps://github.com/lech-glowiak/Aeron/blob/master/aeron-system-tests/src/test/java/uk/co/real_logic/aeron/FailExample.java\nThat is output on specific run at Windows 7, i3 processor, JDK8.\n```\nWARNING: aeron directory already exists: C:\\Users\\kot\\AppData\\Local\\Temp\\aeron\nClosing driver: 2197\ncalling addSubscription: 2275\njava.lang.IllegalArgumentException: timeout value is negative: 12290\njava.lang.IllegalArgumentException: timeout value is negative\n    at java.lang.Object.wait(Native Method)\n    at uk.co.real_logic.agrona.concurrent.Signal.await(Signal.java:53)\n    at uk.co.real_logic.aeron.ClientConductor.await(ClientConductor.java:288)\n    at uk.co.real_logic.aeron.ClientConductor.awaitOperationSucceeded(ClientConductor.java:298)\n    at uk.co.real_logic.aeron.ClientConductor.addSubscription(ClientConductor.java:164)\n    at uk.co.real_logic.aeron.Aeron.addSubscription(Aeron.java:187)\n    at FailExample.main(FailExample.java:22)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)\nuk.co.real_logic.aeron.exceptions.DriverTimeoutException: Driver has been inactive for over 10000ms\n    at uk.co.real_logic.aeron.ClientConductor.checkDriverHeartbeat(ClientConductor.java:353)\n    at uk.co.real_logic.aeron.ClientConductor.onKeepalive(ClientConductor.java:338)\n    at uk.co.real_logic.aeron.ClientConductor$$Lambda$49/1971489295.run(Unknown Source)\n    at uk.co.real_logic.agrona.TimerWheel.expireTimers(TimerWheel.java:234)\n    at uk.co.real_logic.aeron.ClientConductor.processTimers(ClientConductor.java:329)\n    at uk.co.real_logic.aeron.ClientConductor.doWork(ClientConductor.java:103)\n    at uk.co.real_logic.agrona.concurrent.AgentRunner.run(AgentRunner.java:83)\n    at java.lang.Thread.run(Thread.java:745)\n\n Timeout from the Media Driver - is it currently running? Exiting.\n\n```\n. ",
    "amit2103": "Todd ,\nThanks. I feel much better now.\nHowever I have one small request. Its always better for people like me who are  following the project if a roadmap is  available. \nCan you please write a roadmap? And it will be great if you could guide me on how to add client acknowledgement , a bit like local acknowledgements in JMS (sorry to JMS in this discussion :)  ).\nRegards\n. Richard,\nA list of features will also be great. Atleast we can then understand which are the features , \"we\" have to build ourselves.\nThanks\n. @mjpt777 I believe keeping a counter of messages we read will also be okay. Thanks for the response though. I dont think rebuilding another Jms like protocol is useful. The performance of some of the Jms providers is abysmal as it is.\nThanks for the answers. I will be closing the issue. A list of planned features will be nice though :)\n. @mjpt777  Yes, I was confident that keeping a counter of messages we read will work, because Aeron internally does provide that. This will help us in ensuring that a consumer does not read duplicate messages.\n. ",
    "matthewdowney": "Came across this error message\u2014and subsequently this thread\u2014and it still took me a minute to resolve because I wasn't familiar with how to set the SO_RCVBUF value. The error message could include a suggestion to use sysctl to set net.core.rmem_max and net.core.rmem_default.\nOnce I'd run \n$ sudo sysctl net.core.rmem_max=131072\n$ sudo sysctl net.core.rmem_default=13107\nEverything worked fine. \n. ",
    "rolandyoung": "I must admit I didn't even think of altering SO_RCVBUF (despite the fact that I was using a VM!) So I wanted to set an Aeron configuration parameter and thought that the error message should have told me which one was the problem. It would be tricky to provide a hint on changing SO_RCVBUF that would apply to all target platforms and fit in a reasonable error message, but maybe the template config file could provide some advice in the form of a comment on the parameter.\n. ",
    "hdw09": "great\nAt 2015-07-25 08:24:42, \"Todd L. Montgomery\" notifications@github.com wrote:\nWhat I have found out... so you can use it as you progress.\nSMs are being sent and come in. There is plenty of flow control room.\nPlenty of data (I think) in the LogBuffer to be sent.\nSender thread won't send. isActive seems to be set.\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "alberthidalgo": "Sorry, forgot to lookup and include that information:\ngcc 4.8.3 on CentOS 7\n. I'll try installing gcc 4.9.2 in my home dir and building with that as well.\n. It builds successfully on my CentOS 7 distro after installing and building with 4.9.2, so this might be specific to gcc 4.8.x\nFor reference to anyone else, this is what I did to install 4.9.2 on CentOS 7\n1. sudo yum install libmpc-devel mpfr-devel gmp-devel\n2. cd ~/Downloads\n3. curl ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/gcc-4.9.2/gcc-4.9.2.tar.bz2 -O\n4. tar jxvf gcc-4.9.2.tar.bz2\n5. cd gcc-4.9.2\n6. ./configure --disable-multilib --enable-languages=c,c++ --prefix=$HOME/gcc-4.9.2\n7. make -j \n8. make install\n9. edit ~/.bashrc and/or ~/.bash_profile with:\nexport PATH=\"${HOME}/gcc-4.9.2/bin:${PATH}\"\nexport LD_LIBRARY_PATH=\"${HOME}/gcc-4.9.2/lib64:${HOME}/gcc-4.9.2/lib:${lD_LIBRARY_PATH}\"\nexport CC=\"${HOME}/gcc-4.9.2/bin/gcc\"\nexport CXX=\"${HOME}/gcc-4.9.2/bin/g++\"\n10. source ~/.bashrc or logout/login on your desktop\n11. gcc --version should show 4.9.2!\n. I believe it ships with 4.8.3 and no devtoolset currently exists for an upgraded version of gcc from a repo like CentOS 6.x or CentOS 5.x\n. That did the trick, it builds on gcc 4.8.3/CentOS 7 now. Thanks!\n. ",
    "buybackoff": ".NET users will also be very happy to use Aeron via P/Invoke! Do you have any ETA? A C API will instantly make Aeron as ubiquitous as ZMQ, native ports like #35 are not needed as much as a simple API.\n. Yes, it does. Thanks!\n. Cool! I wasn't going to proceed with the full client soon, so this is a good news! Since my LogBuffers implementation is binary compatible, it will be easy to switch. BTW, how much is \"very near future\"?\n. Timing indeed was interesting :) .NET version is now on par with Java in this PR https://github.com/AdaptiveConsulting/Aeron.NET/pull/37\n. ",
    "iamthebot": "So, there are now 3rd-party Go and C# ports. For languages with a runtime like Go and C# it totally makes sense to have a native port (otherwise, calling C functions in Go invokes a context switch). For languages like Rust, it's much better to have a wrapper because it can immediately take advantage of updates/bugfixes to aeron. API changes also need minimal work. Interpreted languages like Python would take advantage of the C api.\n. ",
    "Hemanth-Eduru": "@tmontgomery  Any Update over the C API ?. I will see those examples  and will get back here. Edit:- I corrected my mistake (At the limit of filling log buffer offer fails but I forgot to retry making the server to wait for reply for-ever and now I retry if any failure occurs that solved my problem)\nOrginal :-\n```\nNow I was able to Implement the 2 way communication system, \nBut once the messages (total size) reaches near to that of allocated log buffer size t\nhe speed of send and receive drastically slowed down.\n(Initially I was able to send and receive  >1 Lakh messages per-sec\n (using busy spin idle strategy and around 1K messages in SleepingIdleStrategy ( C++)) \nlater the rate is not even touching 1 message per second\nany ideas what could be causing this delay ?\nI am Sending using IPC and Sending on one stream ID and receiving on another stream ID\n```\n. Yup I think we can close this issue now and i am closing this . ",
    "erikvanoosten": "Work around: clone [https://github.com/real-logic/Agrona] and build it.\n. Thanks!\n. @mjpt777 I am a bit vague on purpose because I do not have a deep enough understanding of the Aeron model to suggest something more concrete.\n@tmontgomery Ah, missed that one. I'll close this one then.\n. ",
    "postulka": "Hi Todd,\nthank you for your prompt response. I'm pretty sure that there was no subscriber connected before the publication.offer was called ... the only difference was that I used an embedded media driver, otherwise the code was copy-pasted from BasicPublisher sample. Could this be an issue only in case the embedded media driver is used? Also the test was done on Windows not on Linux ...\nI will send the exact code tomorrow morning which should reproduce the behaviour described above.\nRegarding the comment about NOT_CONNECTED never returned again after all subscribers die or go away. Is there any reason for such behaviour? What we want to implement is that the unsuccessful offer should be retried in case of BACK_PRESSURE (meaning that there is at least one subscriber connected) but should be ignored in case there is no subscriber connected because nobody is interested in the message.\nThanks again.\nPetr\n. Hi Todd,\nhere is the class of Publisher we use to simulate the issue mentioned above - we basically start the publisher without any subscriber and we never receive NOT_CONNECTED as a result of offer call.\nTested on Windows 10 ...\nCan you please try to launch the same thing to see whether you can reproduce on your side?\n```\npackage org.dett.prototypes.aeron;\nimport uk.co.real_logic.aeron.Aeron;\nimport uk.co.real_logic.aeron.Publication;\nimport uk.co.real_logic.aeron.driver.MediaDriver;\nimport uk.co.real_logic.agrona.CloseHelper;\nimport uk.co.real_logic.agrona.concurrent.UnsafeBuffer;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.TimeUnit;\npublic class BasicPublisher\n{\n    private static final int STREAM_ID = 10;\n    private static final String CHANNEL = \"udp://localhost:5555\";\n    private static final long NUMBER_OF_MESSAGES = 1_000_000;\n    private static final long LINGER_TIMEOUT_MS = 1000;\n    private static final boolean EMBEDDED_MEDIA_DRIVER = true;\n    private static final UnsafeBuffer BUFFER = new UnsafeBuffer(ByteBuffer.allocateDirect(256));\npublic static void main(final String[] args) throws Exception\n{\n    System.out.println(\"Publishing to \" + CHANNEL + \" on stream Id \" + STREAM_ID);\n\n    // If configured to do so, create an embedded media driver within this application rather\n    // than relying on an external one.\n    final MediaDriver driver = EMBEDDED_MEDIA_DRIVER ? MediaDriver.launchEmbedded() : null;\n\n    final Aeron.Context ctx = new Aeron.Context();\n    if (EMBEDDED_MEDIA_DRIVER)\n    {\n        ctx.dirName(driver.contextDirName());\n    }\n\n    // Connect a new Aeron instance to the media driver and create a publication on\n    // the given channel and stream ID.\n    // The Aeron and Publication classes implement \"AutoCloseable\" and will automatically\n    // clean up resources when this try block is finished\n    try (final Aeron aeron = Aeron.connect(ctx);\n         final Publication publication = aeron.addPublication(CHANNEL, STREAM_ID))\n    {\n        for (int i = 0; i < NUMBER_OF_MESSAGES; i++)\n        {\n            final String message = \"Hello World! \" + i;\n            BUFFER.putBytes(0, message.getBytes());\n\n            System.out.print(\"offering \" + i + \"/\" + NUMBER_OF_MESSAGES);\n\n            final long result = publication.offer(BUFFER, 0, message.getBytes().length);\n\n            if (result < 0L)\n            {\n                if (result == Publication.BACK_PRESSURED)\n                {\n                    System.out.println(\"Offer failed due to back pressure\");\n                }\n                else if (result == Publication.NOT_CONNECTED)\n                {\n                    System.out.println(\"Offer failed because publisher is not yet connected to subscriber\");\n                }\n                else\n                {\n                    System.out.println(\"Offer failed due to unknown reason\");\n                }\n            }\n            else\n            {\n                System.out.println(\"yay!\");\n            }\n\n            Thread.sleep(TimeUnit.SECONDS.toMillis(1));\n        }\n\n        System.out.println(\"Done sending.\");\n\n        if (0 < LINGER_TIMEOUT_MS)\n        {\n            System.out.println(\"Lingering for \" + LINGER_TIMEOUT_MS + \" milliseconds...\");\n            Thread.sleep(LINGER_TIMEOUT_MS);\n        }\n    }\n\n    CloseHelper.quietClose(driver);\n}\n\n}\n```\nResult from the test is: \nPublishing to udp://localhost:5555 on stream Id 10\noffering 0/1000000yay!\noffering 1/1000000yay!\noffering 2/1000000yay!\noffering 3/1000000yay!\noffering 4/1000000yay!\noffering 5/1000000yay!\noffering 6/1000000yay!\noffering 7/1000000yay!\noffering 8/1000000yay!\noffering 9/1000000yay!\n. Regarding the implementation of our custom flow control strategy to be able to detect when all subscribers are gone. Can you please explain a little bit more how to implement such thing? Is there any code example we can look into? If not can you provide us some basic example?\nThanks a lot for all your help and effort ...\nPetr \n. Excellent ... we will try to implement the FlowControl as you suggest.\nRegarding the issue with NOT_CONNECTED not returned even without subscribers - we will try to run the test on Linux and Windows Server to confirm whether the behavior is Windows 10 specific (btw we tried on 2 different laptops but both with Windows 10)\nThanks again for your help.\n. Just letting you know that I've tested the same code I pasted above on Windows 8 Pro and the behavior is same ... NOT_CONNECTED never returned.\n. My mistake ... I thought I was using 0.1.3 version but I had another reference in gradle for older version (0.1) and therefore it was using the old version. The issue was present in 0.1 but is not present anymore in 0.1.3 - everything works as expected. I'm really sorry for wasting your time ... you can close the issue.\nThank you for your help.\n. Hi Todd,\nperfect, we will give it a try. Thanks a lot for the change, much appreciated.\nPetr\n. ",
    "mlabour": "Thank you very much for your answer. I have 2 follow up questions:\n1) How does Aeron compare to TIPC? If I understand TIPC properly it is also OSI Layer 4.\n2) On AWS, some folks have enabled multicast using n2n, 0MQ and TIPC. https://www.buckhill.co.uk/blog/how-to-enable-broadcast-and-multicast-on-amazon-aws-ec2/2#.VecrA2TBzGc. Do you think n2n + Aeron could be a solution for multicast on EC2/AWS?\nThanks again for your help.\n. ",
    "huiwang": "The whole module aeron-tools are removed with 5fd276c. I suggest closing this issue.\n. ",
    "qed-": "I had the same problem, this should fix it: \nhttps://github.com/real-logic/Aeron/pull/172\n. Yes it is, updated accordingly\n. ",
    "zbhuang": "I tested it and the fix works. Thank qed.\n. ",
    "MKSoftechnician": "I have tried to build Aeron (C++) on windows server 8 64-bit using cppbuild-vs2015.cmd but test failed with 1 error and test completes 93%. Then I opened Aeron.sln in VS 2015 and built project and build failed with \"cannot open include file 'unistd.h' for projects.\n. Thanks for reply.\nNo, I haven't tried Java Media Driver as my requirement is for C++ . But I want to build in C++. After runnning cppbuild-vs2015.cmd, I have opened Aeron.sln in VS 2015 which opens all tests project. \nIsn't there any support for Media Driver in C++  as my requirement is specifically for C++?\nNote: Kindly specify example with steps  for using Aeron in C++ if possible\n. Ok, I will give it a try.\nThank you.\n. In my opinion is it possible to wait for some time duration before NAKing, as dropped packet may be in transit. So when this packet received in that wait time frame, our assumed NAK need not to send and we can avoid burdon on publisher to retransmit.\n. ",
    "robertroeser": "That seems to have fixed the issue.\n. ",
    "gierlachg": "I mean, I prefer dropping messages in case of too slow consumers/too fast producers.\nRetrying, on each back pressure - if I would like to handle full term buffer case - would mean immediately retrying also in flow control scenarios (which most probably doesn't make sense?).\n. If that fits Aeron design it would be more than enough for my case.\n. Works like a charm. Thank you.\nClosing the issue.\n. I think it's a different one. Certainly not #234.\n. Aeron rules anyway.\n. Before running the test I have increased both (driver & client) timeouts to some larger value. Stopping the threads is just one of the ways to quickly replicate the issue - having 2 boxes you can  partition the network for instance and you should see similar results.\n. I'll try to do that tomorrow with some decent network between the boxes.\nHowever, purely theoretically... driver-conductor thread calls PublicationImage.trackRebuild(), what if before it does for the first time (for a recreated publication image) receiver thread kicks in and inserts packets into the log buffers. Won't trackRebuild have a chance to zero out the data just received?\n. Run the test on 2 boxes with iptables dropping and letting the packets through again.\nAs expected getting same results - it was only slightly harder to replicate it; stopping the publishers threads is not a factor here, it's just a handy way to quickly create some load.\nMaybe I'm completely wrong with that cleanPosition being not initialized but...\nIn most cases I'm getting empty subscriber's log buffers, all terms being zeroed out.\nOnce I got this:\n```\nIndex 0 Term Data\n0: DATA Header{frame_length=0 version=0 flags=00000000 type=0 term_offset=0 session_id=0 stream_id=0 term_id=0 reserved_value=0}\n0000\n%n======================================================================\nIndex 1 Term Data\n0: DATA Header{frame_length=1429 version=0 flags=11000000 type=1 term_offset=0 session_id=-167296996 stream_id=1 term_id=-1871178989 reserved_value=0}\n0300\n...\nIndex 2 Term Data\n0: DATA Header{frame_length=4096 version=0 flags=10000000 type=1 term_offset=0 session_id=-167296996 stream_id=1 term_id=-1871178991 reserved_value=0}\n0300\n...\n```\nIf you look at term ids something is clearly wrong - entire -1871178990 which should be in term 0 is missing.\nPublisher log buffers looks fine at the same time.\nOn a rare occasion subscriber's fragment handler is being called with a view onto the buffer which is zeroed out as well.\nAnd finally here is the excerpt from one of the runs from subscriber's AeronStat:\n07:39:27 - Aeron Stat\n=========================\n  0:                    0 - Bytes sent\n  1:       24,968,410,976 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:               29,518 - NAKs sent\n  6:                    0 - NAKs received\n  7:              645,274 - Status Messages sent\n  8:                    0 - Status Messages received\n  9:                    0 - Heartbeats sent\n 10:              103,665 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:              248,793 - Flow control under runs\n 13:              175,682 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                8,621 - Client keep-alives\n 18:                    0 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    1 - recv-channel: aeron:udp?endpoint=10.2.3.68:40123\n 23:                    0 - sub-pos: 1 2026399379 1 aeron:udp?endpoint=10.2.3.68:40123 @0\n 24:                    0 - rcv-hwm: 2 2026399379 1 aeron:udp?endpoint=10.2.3.68:40123 \n 25:                    0 - rcv-pos: 2 2026399379 1 aeron:udp?endpoint=10.2.3.68:40123 \n 26:                    0 - sub-pos: 1 -509907085 1 aeron:udp?endpoint=10.2.3.68:40123 @0\n 27:                    0 - rcv-hwm: 3 -509907085 1 aeron:udp?endpoint=10.2.3.68:40123 \n 28:                    0 - rcv-pos: 3 -509907085 1 aeron:udp?endpoint=10.2.3.68:40123 \n 32:        3,357,621,376 - sub-pos: 1 31588087 1 aeron:udp?endpoint=10.2.3.68:40123 @3,357,621,376\n 33:        3,471,277,568 - rcv-hwm: 25 31588087 1 aeron:udp?endpoint=10.2.3.68:40123 \n 34:        3,357,621,376 - rcv-pos: 25 31588087 1 aeron:udp?endpoint=10.2.3.68:40123\nIn this specific case there are lot of NAKs reported - however it's not a rule, sometimes just SMs are being sent through.\nLet me know if I can test/provide anything else.\n. More tests and some conclusions...\nCorrect me if I'm wrong.\nUninitialized cleanPosition results in starting the cleaning from the very beginning of the stream, it does not take into account the fact we can join in the middle of the stream.\nFor a @0 image that's fine, however for a off/on image it can screw everything up and produce the results I have been seeing.\nFor instance, minSubscriberPosition for a recreated stream can map to the first term buffer which will be cleaned by driver conductor...\nI have created a PR (https://github.com/real-logic/Aeron/pull/270) that seems to fix the issue (unless I'm missing something else).\n. Becoming an Aeron expert ;)\n. @mikeb01 From what I can see subscriber log buffer is zeroed out. I was observing exactly same symptom (#268) and unless it's not a different issue the fix should be already in.\n. ",
    "DzmitryShylovich": "Thank you. \n. ",
    "vontikov": "Thanks!\n. Should the receivers be connected in particular order in this case?\nCan we start for example first receiver then the sender and then other receivers with some delay?\n. OK. Thank!\n. ```\nc++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support is currently experimental, and must be enabled with the -std=c++11 or -std=gnu++11 compiler options.\nerror This file requires compiler and library support for the \\\nIn file included from aeron-client/src/main/cpp/concurrent/AtomicBuffer.h:24:0,\n...\nvirtual const char *what() const AERON_NOEXCEPT\n```\n. ",
    "cbsmith": "Fountain codes require more buffering of data on both the sender and receiver side, which means increased latency. There is certainly a case for it, but it seems in conflict with the rest of the protocol design.\n. ",
    "quixver": "Question: Will it be possible to roll the broadcast buffer logs so that instead of 1 massive (and continuously growing) file, there will be multiple sequentially numbered files?\n. ",
    "nitsanw": "Problem here is that knowledge of the external loop is required to determine if a safepoint poll in the idle() method is required. Given a call to idle already implies we have time to spend it would be ideal if we could somehow force a safepoint poll cleanly (e.g. a ForceSafepointPoll method/loop annotation which would keep a safepoint poll in the face of inlining and/or loop optimizations). Sadly there is no such clean mechanism.\nWith no prior knowledge of callers we must work under the following assumptions:\n1. Call to idle has been inlined\n2. Call to idle is in a counted loop\nIt follows that the idle() implementation must somehow include a 'guaranteed' safepoint poll.\n. @mjpt777 please add a new issue tag for documentation. In archiver there's an assumption that channel length is sub (4K - change).. Thanks for reporting, I have reproduced the issue and can see the mismatch in time source as reported by @lightyang .\nI'll fix shortly.. Can you please provide a procedure for reproducing the issue as well as further details? From description it is not clear that this is an Aeron issue at all.. OK, I'm not familiar with rancher.\nCan you reproduce issue outside of rancher? alternatively can you provide an example I could run to reproduce issue?\nThanks. Yes, I assume this is why we don't use it in the first place. But, more importantly there's no \"removeAndScrewWithOrder\" option, which means removing from the middle of a list involves copying all the elements after the remove index to the \"left\".. Using an onheap counters manager still produces a crash:\n```\n\nA fatal error has been detected by the Java Runtime Environment:\n\nSIGSEGV (0xb) at pc=0x00007f09d51ff170, pid=31358, tid=0x00007f09bc5e1700\n\nJRE version: Java(TM) SE Runtime Environment (8.0_92-b14) (build 1.8.0_92-b14)\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.92-b14 mixed mode linux-amd64 compressed oops)\nProblematic frame:\nJ 586 C2 org.agrona.concurrent.UnsafeBuffer.getAndAddInt(II)I (31 bytes) @ 0x00007f09d51ff170 [0x00007f09d51ff120+0x50]\n\nFailed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n\nAn error report file with more information is saved as:\n/home/yak/git/Aeron/hs_err_pid31358.log\n\nIf you would like to submit a bug report, please visit:\nhttp://bugreport.java.com/bugreport/crash.jsp\n\n. For the error report:\nStack: [0x00007f717feff000,0x00007f7180000000],  sp=0x00007f717fffe8e0,  free space=1022k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nJ 603 C2 org.agrona.concurrent.UnsafeBuffer.getAndAddInt(II)I (31 bytes) @ 0x00007f71cd207870 [0x00007f71cd207820+0x50]\nJ 601 C2 org.agrona.concurrent.errors.DistinctErrorLog.record(Ljava/lang/Throwable;)Z (137 bytes) @ 0x00007f71cd207f88 [0x00007f71cd207ee0+0xa8]\nJ 600 C2 io.aeron.driver.MediaDriver$Context.lambda$conclude$0(Ljava/lang/Throwable;)V (27 bytes) @ 0x00007f71cd208c24 [0x00007f71cd208be0+0x44]\nJ 599 C2 io.aeron.driver.MediaDriver$Context$$Lambda$13.onError(Ljava/lang/Throwable;)V (9 bytes) @ 0x00007f71cd208f20 [0x00007f71cd208ee0+0x40]\nJ 621% C2 org.agrona.concurrent.AgentRunner.run()V (97 bytes) @ 0x00007f71cd212db8 [0x00007f71cd212c20+0x198]\nj  java.lang.Thread.run()V+11\nThis suggests the error log is being unmapped prematurely before the runners have been brought to heel.. This is my bad, code needs to close runner before letting Aeron/Driver close.\n. I'm aware of it and using it, but it's a bit clumsy. In particular it has threading model implications I'm unhappy about.\nI've considered having a further callback on the subscription but callbacks seem to be going against the trend of passive polling.. The semantics I'm looking for are single consumption, so an image is not processed twice. Since subscriptions are not meant for concurrent usage it's not a big overhead. This implies a further managed list of available images...\n. @tmontgomery I think that sinceSubscriptionis not thread safe we can assume it's the same thread.. @mjpt777 the context handler is a callback, this API is easy to match (no extra data structure to match). It does introduce a race with Subscription creation:\ns = aeron.addSubscription();\n// an image became available, but we had no handler to catch it\ns.availableImageHandler(handler);\n```\nAre we happy to go with the callback approach?\nTo avoid the race above we would need to have the handler on construction.. Calls to the handler happen from an \"arbitrary\" thread. I think it needs to be made obvious in the docs for the global call back as well.. This has been implemented (twice due to real world concurrency issue):\nhttps://github.com/real-logic/Aeron/commit/dd8556292d899a6e9e2e696d2c77d58a4ea86ab0\nhttps://github.com/real-logic/Aeron/commit/919064df7e9189d0f6df6005e7f2ccbb72cbd7d9. The archiver currently creates the file as needed, rolling into next file when a file is full. File size is a multiple of term buffer size. The files are sized on creation. It may be helpful to allocate ahead files to avoid this allocation cost on a hot path. This is a place holder item, which may or may not be worth doing, should have made that clearer in the description.. See re-edit of first comment.. @jordanxlj I am failing to understand what you mean. Can you please explain via an example, or point to an article which demonstrates your point?. hi @karypid!\nThere's a gitter channel for informal chats, and the issues and wiki as further searchable resources. I understand your preference for mailing groups, but in the presence of these 3 existing locations I'm not sure adding a mailing list will help.\nI think the process should be:\n Search wiki (offer feedback on anything lacking or confusing)\n Search issues/questions (perhaps useful content from here can be promoted to wiki?)\n* Raise question on GH if you feel it's a clear enough omission from either resource, or pop it on gitter to discuss with users and contributors. These interactions in turn should feed back into wiki/GH items.\nThanks,\nNitsan. Hi @jordanxlj,\nArchiver is under active development, not yet ready for use. Having said that, if you are keen to test it out and give us feedback that is great.\nI'm looking into the issue you described and managed to reproduce for the case where ExclusivePublication is recorded with a starting position such thattermId != initialTermId. I hope to have the issue resolve by EOD.\nThanks for reporting!\n. I've narrowed this down to what seems like an ExclusivePublication bug.. With @mjpt777 fix I can no longer reproduce this issue. Closing for now, but @jordanxlj please re-open if it doesn't fix your case.\nThanks again for reporting.. Hi,\nGiven the active development stage of the archiver it would be good if you can state the git-hash of the codebase for which you report this bug.\nAlso please note how you start the archiver.\nI'll look into this issue ASAP.\nThanks . @jordanxlj ArchiverConductor is internal API so no direct interaction with it is intended. You should launch a ArchivingMediaDriver/LightweightArchivingMediaDriver and interact via the control stream.\nAt the moment the recording is intended for local publications only.\nHaving said that, you may have hit a genuine bug. Can you share your code please?. Can you update your version of Aeron too? you are a month behind. I think you can save yourself some time by updating(to avoid any bugs we may have fixed), and switch to intended usage(to avoid bugs resulting from unplanned interaction). Hi @GenuineJyn ,\nCan you please give the following details:\n- Aeron version(or git hash if you are building from source)\n- I see you are running the C client, are you also running the C media driver\nIt would also be good if you can include the source code for a minimal reproduction of the issue, or a snippet of the relevant client code.\nThanks for reporting!. Hi,\nI think you are running your own version of gradle rather than the wrapper script.\nCan you try again, running the provided gradlew command?. Sounds a bit like compressed oops, based on a similar observation on alignment, and with a similar (minor) overhead of \"uncompressing\" the offset. Cool idea :). IME this can happen due to IDE trying to call .toString on objects at a bad\ntime.\nOn Tue, Aug 7, 2018 at 8:32 PM, Matt Godbolt notifications@github.com\nwrote:\n\nI've experienced a number of JVM crashes when single stepping. My setup is:\n\nJava media driver (in process)\nJava receiver\nC++ separate process sender\nUsing IPC\n\nIf I breakpoint in the java side, the C++ code understandably times out\nand detaches from the media driver.\nThe java code dies:\n**#\nA fatal error has been detected by the Java Runtime Environment:\n\nSIGSEGV (0xb) at pc=0x00007f44159c4c07, pid=5265, tid=0x00007f43c73fa700\n\nJRE version: Java(TM) SE Runtime Environment (8.0_181-b13) (build 1.8.0_181-b13)\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.181-b13 mixed mode linux-amd64 compressed oops)\nProblematic frame:\nV  [libjvm.so+0xa9dc07]  Unsafe_GetShort+0x47**\nSometimes I get a bit of stack in the death throes:\n**# Problematic frame:\nV  [libjvm.so+0xa9dc07]    at io.aeron.ClientConductor.checkServiceInterval(ClientConductor.java:745)\nat io.aeron.ClientConductor.onCheckTimeouts(ClientConductor.java:720)\nat io.aeron.ClientConductor.service(ClientConductor.java:659)\nat io.aeron.ClientConductor.doWork(ClientConductor.java:151)\nat org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:268)\nat org.agrona.concurrent.AgentRunner.run(AgentRunner.java:161)\nat java.lang.Thread.run(Thread.java:748)\n\nio.aeron.exceptions.ConductorServiceTimeoutException: Exceeded (ns): 5000000000\n    at io.aeron.ClientConductor.checkServiceInterval(ClientConductor.java:745)\n    at io.aeron.ClientConductor.onCheckTimeouts(ClientConductor.java:720)\n    at io.aeron.ClientConductor.service(ClientConductor.java:659)\n    at io.aeron.ClientConductor.doWork(ClientConductor.java:151)\n    at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:268)\n    at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:161)\n    at java.lang.Thread.run(Thread.java:748)\n  Unsafe_GetShort+0x47**\nthis is using aeron v1.9.3 on the Java side.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/real-logic/aeron/issues/539, or mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACkWL4RaiBY9HsUSt263X3XVB6438vyoks5uOd1EgaJpZM4Vyq5l\n.\n. @mjpt777 this is due to IDE calling toString so it can show you values in the \"variables\" window. I've seen it before in cases where the resource being used in the toString method is no longer valid, e.g. where the getShort above would be using some offset into a buffer that has been released.. Regrading : \"Is it possible that a JVM implementation may not have a safe-point polling?\"\nIt's possible, but not a reality for any JVM. If a JVM does not have safe point polling though, TTSP is a non-issue.. \n",
    "postol": "Hi Todd,\nthank you for your quick response. Please let me know once you discuss with Martin and what is your conclusion. The thing is that at moment we are basically unable to distinguish between whether the back pressure is caused because of slow consumer(s) which are still connected or because there is no consumer connected anymore. To explain our use case, we have publisher and subscriber, subscriber connects and everything is working fine, then the subscriber disconnects and publisher after a while starts receiving back pressure from offer method becasue the term buffer is full. At that moment we basically don't know what to do - whether we should keep retrying with some sort of timeout or whether we should start discarding the messages and don't wait for timeout (because no one is interested anymore). Other question is in case the subscriber reconnects after a while, let's say one minute - are the messages offered through publication during the disconnection sent to the subscriber or are they discarded?\nSorry if these questions are silly but we just want to understand how exactly this works and whether we are missing something in our design ... I'm pretty sure there is a way to solve this because it seems to me like a standard use case.\nThank you and kind regards,\nPetr\n. Hi Todd,\nagain thank you for the fast response and even more for the decision you and Martin made - the behavior you just described perfectly suits our needs and is basically what we were looking for. It will make Aeron even better ... btw it is awesome project and thank you and Martin for all the hard work - it is much appreciated.\nLooking forward to this and other enhancements in the future.\nPetr\n. ",
    "kirtiteja": "Ah damn, i did run the build with checkstyle, not sure where I went wrong, will verify that now. Sorry for the trouble. I am aware lambdas will be allocated on each call but it wasnt my intention to make it garbage free considering the streams and formatting of output. Encoding into bytebuffer is more of an after thought and one that benefits being garbage free. Will work on it and submit it later. Please let me know if have any inputs or thoughts on using ByteBuffer vs UnsafeBuffer? or regarding data being written or format of encoding?\n. No worries, happens to me all the time .\n. ",
    "theiceguy": "<dependency>\n  <groupId>uk.co.real-logic</groupId>\n  <artifactId>aeron-all</artifactId>\n  <version>0.9.2</version>\n</dependency>\n. me@my_server $ uname -a\nLinux my_server 3.10.0-229.el7.x86_64 #1 SMP Thu Jan 29 18:37:38 EST 2015 x86_64 x86_64 x86_64 GNU/Linux\nmy_server $ java -version\njava version \"1.8.0_74\"\nJava(TM) SE Runtime Environment (build 1.8.0_74-b02)\nJava HotSpot(TM) 64-Bit Server VM (build 25.74-b02, mixed mode)\n. multicast\n. No, I missed this one ...\n[8464805.946096] EXCEPTION [650/650]: java.lang.RuntimeException(channel \"aeron:udp?group=224.2.0.1:40162\" : java.net.BindException: Address already in use)\nuk.co.real_logic.aeron.driver.media.UdpChannelTransport.openDatagramChannel UdpChannelTransport.java:116\nuk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint.openChannel ReceiveChannelEndpoint.java:123\nuk.co.real_logic.aeron.driver.Receiver.onRegisterReceiveChannelEndpoint Receiver.java:108\nuk.co.real_logic.aeron.driver.cmd.RegisterReceiveChannelEndpointCmd.execute RegisterReceiveChannelEndpointCmd.java:32\nuk.co.real_logic.aeron.driver.Receiver.accept Receiver.java:126\n. But, I've no idea why 40162 is already spoken for\n. k, please close\n. ",
    "Reinholdtsen": "I am very excited to try out Aeron, but I am also having trouble running ping and pong on separate hosts. \nI have two Windows 10 computers with Java 8 (64 bit) on a home network, one that I have named pinger (192.168.1.6) and the other ponger (192.168.1.12). Each have a generous firewall rule that enables all incoming UDP traffic.\nI have built a jar with dependencies file that includes Aeron 0.9.4.\nOn each machine I run the media drive with the following command:\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar uk.co.real_logic.aeron.driver.MediaDriver\nOn ponger I run:\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -Daeron.sample.ping.channel=udp://ponger:40123 -Daeron.sample.pong.channel=udp://pinger:40124  uk.co.real_logic.aeron.samples.Pong # Run on ponger\nOn pinger I run:\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -Daeron.sample.ping.channel=udp://ponger:40123 -Daeron.sample.pong.channel=udp://pinger:40124 -Daeron.sample.messages=10000 uk.co.real_logic.aeron.samples.Ping # Run on pinger\nThe console on pinger hangs after outputting:\nC:\\Aeron>java -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -Daeron.sample.ping.channel=udp://ponger:40123 -Daeron.sample.pong.channel=udp://pinger:40124 -Daeron.sample.messages=10000 uk.co.real_logic.aeron.samples.Ping # Run on pinger\nPublishing Ping at udp://ponger:40123 on stream Id 10\nSubscribing Pong at udp://pinger:40124 on stream Id 10\nMessage length of 256 bytes\nWarming up... 5 iterations of 10000 messages\nAvailable image: channel=udp://pinger:40124 streamId=10 session=-10105912\nthe ping pong sample is working if I ping and pong on the same machine:\nRun both on pinger\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -D\"aeron.sample.ping.channel=aeron:udp?endpoint=pinger:40124\" -D\"aeron.sample.pong.channel=aeron:udp?endpoint=pinger:40123\" -Daeron.sample.messages=10000 uk.co.real_logic.aeron.samples.Ping # run on pinger\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -D\"aeron.sample.ping.channel=aeron:udp?endpoint=pinger:40124\" -D\"aeron.sample.pong.channel=aeron:udp?endpoint=pinger:40123\" uk.co.real_logic.aeron.samples.Pong # run on pinger\nRun both on ponger\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -D\"aeron.sample.ping.channel=aeron:udp?endpoint=ponger:40124\" -D\"aeron.sample.pong.channel=aeron:udp?endpoint=ponger:40123\" -Daeron.sample.messages=10000 uk.co.real_logic.aeron.samples.Ping # run on ponger\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -D\"aeron.sample.ping.channel=aeron:udp?endpoint=ponger:40124\" -D\"aeron.sample.pong.channel=aeron:udp?endpoint=ponger:40123\" uk.co.real_logic.aeron.samples.Pong # run on ponger\nI have also tried pointing the ping channel to pinger and the pong channel to ponger with no success in case I misunderstood the roles.\nDoes anyone have an idea what I might be doing wrong?\n. I may have had a mixture of 32 and 64 bit Java installations causing problems. After I reinstalled just 64 bit Java, the following startup commands worked:\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -D\"aeron.sample.ping.channel=aeron:udp?endpoint=ponger:40123\" -D\"aeron.sample.pong.channel=aeron:udp?endpoint=pinger:40124\" -Daeron.sample.messages=200 -Daeron.sample.warmup.messages=10 uk.co.real_logic.aeron.samples.Ping # run on pinger\njava -cp \\Aeron\\pingpong-0.x.0-jar-with-dependencies.jar -D\"aeron.sample.ping.channel=aeron:udp?endpoint=ponger:40123\" -D\"aeron.sample.pong.channel=aeron:udp?endpoint=pinger:40124\" -Daeron.sample.info=True uk.co.real_logic.aeron.samples.Pong # run on ponger\nI got the following statistics:\n[Mean    =    34838.221, StdDeviation   =    15484.790]\n[Max     =   155189.247, Total count    =          200]\n[Buckets =           24, SubBuckets     =         2048]\nGiven the following regular ping results, do the Aeron ping/pong results seem reasonable?\nC:\\Aeron>ping ponger\nPinging ponger.home [192.168.1.12] with 32 bytes of data:\nReply from 192.168.1.12: bytes=32 time=3ms TTL=128\nReply from 192.168.1.12: bytes=32 time=5ms TTL=128\nReply from 192.168.1.12: bytes=32 time=2ms TTL=128\nReply from 192.168.1.12: bytes=32 time=33ms TTL=128\n. ",
    "nxtreaming": "Thanks.\nI will try to slice my data into many small segments to use Aeron to transmit them between two hosts.\n. why can the Areon MTU be 16K  or more? \nBecause  Aeron is based on UDP, UDP's MTU should be very small ( eg: smaller than 1500)?\n. I see.\nThanks.\n. ",
    "sergiotudela": "Hi,\nAre you considering ECC based on CurveCP and NaCl?\n. ",
    "magro": "What's the current status here, do you plan to work on this within the next months? . Ok, thanks! . ",
    "steveturner": "My apologies that I'm coming completely out of no where on this, but the discussion on EC and LKH keying for multicast security with Aeron/Akka sounds particularly interesting. Has anyone worked any prototypes in this area yet?. ",
    "luengnat": "@tmontgomery anything planned out for this area?. ",
    "republisher": "Hi Todd, and many thanks for your prompt reply. Loss is acceptable, but still undesirable --- we send snapshots of internal data structures, and usually the time interval between messages is much less than the link latency. So if we miss a message we'd rather not wait for the retransmission, and just process the next snapshot. We could just send them over UDP, but then we have to re-implement a lot of the functionality already present in Aeron (sequence numbers, streams, heartbeats, wait-free buffers etc.) \n. Many thanks to both of your for considering this. From our perspective we'd like to be able to retrieve the next available message in the buffer, even if this means skipping a gap. I don't know how this could be best implemented ---- an admittedly crude and naive way of doing this could be to disable the NAK mechanism entirely, and allow the subscriber's poll() function to overlook any gaps in the sequence numbers. We would then be able to take advantage of all of the other features that Aeron offers, such as UDP multi-cast and IPC communication, in addition to the messaging features and wait-free structures I mentioned in my previous post. \n. ",
    "kowalczm": "Thanks for quick response. I see now, it is for optimization. \n. ",
    "chrisjstevo": "For reference, adding the below hack into UdpChannelTransport means my multicast gets routed correctly cross datacentre. \nSo adding a TTL definitely allows it to traverse switches.\n```\n            receiveDatagramChannel.setOption(StandardSocketOptions.SO_REUSEADDR, true);\n            receiveDatagramChannel.bind(new InetSocketAddress(endPointAddress.getPort()));\n            receiveDatagramChannel.join(endPointAddress.getAddress(), localInterface);\n            sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_IF, localInterface);\n        //hack\n        receiveDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, 25);\n        sendDatagramChannel.setOption(StandardSocketOptions.IP_MULTICAST_TTL, 25);\n\n        if (null != connectAddress)\n        {\n            sendDatagramChannel.connect(connectAddress);\n        }\n\n```\n. In the vain of:\npublic static final String PUBLICATION_UNBLOCK_TIMEOUT_PROP_NAME = \"aeron.publication.unblock.timeout\"\nso -D param? If so am happy to try a patch out for you to review...\nfor the override by channel, would you see it being grabbed from the Uri somewhere like this:\n//UpdChannel.java:76\n            final AeronUri uri = parseIntoAeronUri(uriStr);\nvalidateConfiguration(uri);\nI had a go at adding it here as an extra param earlier, but favoured to filthy hack to make sure it worked:\nreturn AeronUri.builder()\n            .media(UDP_MEDIA_ID)\n            .param(GROUP_KEY, group)\n            .param(INTERFACE_KEY, inf)\n            .newInstance();\n    }\n?\nChris\n. Ha, will kill the new issue.\nOn 16 March 2016 at 17:44, Martin Thompson notifications@github.com wrote:\n\nSorry @chrisjstevo https://github.com/chrisjstevo I misread. I thought\nyou wanted to change PUBLICATION_UNBLOCK_TIMEOUT_PROP_NAME. Duh!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/209#issuecomment-197417342\n. \n",
    "muc392": "Thank you for reply.\nthen one Publication Image is one complete message am I correct?\nor can one Publication Image contain multiple messages??\nKindly explain me with example if possible(about message not fragmentation).\n. Thank you very much\n. ",
    "frank-zg": "thx all.I have to give up it.because my LAN and cloud server can`t multicast \n. netty protoc decoder and encoder filter. you donw?\nFragmentHandler provides methods too bottom, I want to show my custom method parameters for developers\n. local  has 14ms delayed. sorry. aeron is good! ntp time server is delayed. @mjpt777  help me?. client create:\n```\n final Aeron.Context actx = new Aeron.Context();\n        if (embedded) {\n            actx.aeronDirectoryName(EmbeddedMediaDriver.getInstance().aeronDirectoryName());\n        }\n        actx.availableImageHandler(this::availableImageHandler);\n        actx.unavailableImageHandler(this::unavailableImage);\n        actx.errorHandler(t -> error(\"an exception occurred\", t));\n        aeron = Aeron.connect(actx);\n    aeron.addPublication(channel, streamId)\n\n```\n        .  > \n```\npublic static void offer(Publication publication, BufferFiller fillBuffer, int length, int timeout,\n                             TimeUnit timeUnit) {\n        if (publication.isClosed()) {\n            throw new NotConnectedException();\n        }\n    final MutableDirectBuffer buffer = getDirectBuffer(length);\n    fillBuffer.fill(0, buffer);\n    final long start = System.nanoTime();\n    do {\n        final long current = System.nanoTime();\n        if ((current - start) > timeUnit.toNanos(timeout)) {\n            throw new TimedOutException();\n        }\n\n        final long offer = publication.offer(buffer);\n        if (offer >= 0) {\n            break;\n        } else if (Publication.NOT_CONNECTED == offer) {\n            throw new NotConnectedException();\n        }\n    } while (true);\n\n    recycleDirectBuffer(buffer);\n}\n\n```\nthis method, throw NotConnectedException. i can`t known my subscribers is up. although ,i create.\nappear this exception, i`m try restart subscriber. publisher still not connection.\nsubscriber not stop, try restart publisher. connection is ok.. details?\njust only use rancher hostname not connection. if use LAN ip connection success.\ni use my project.and aeron example ping/pong.and simplePub/Sub. the issuesis still\ni`m use netty udp try. use hostname is success. so.i guess is aeron issues. ",
    "bianbian-org": "Thanks. wanna transfer a file from one computer to the other but because of the security reasons the UDP packages are one-way, i.e.  one can ONLY send and the other can ONLY receive.\n. ",
    "cesaref": "The other week I had a play bridging aeron between hosts using RDMA, and got some very promising looking latency and throughput numbers. My tests out-performed the mediadriver using solarflare under onload, but i'm using both older mellanox RoCE cards, and older solarflare cards, so it's not representative of what is possible with the current generation of cards. Solarflare keep chopping 500ns off the latency with each generation - there's going to be negative latency soon if they keep this up ;-)\nFor ease of implementation I used RC connections, and IB messaging not direct RDMA. Realistically this means that my test would be slower by an IPC write on the target, and there's obviously another memory copy implied by this (as my client is receiving a message to be offered to aeron). The benefit was that it was a doddle to get something up and running quickly to test the principal.. I tried a while back, and got some problems running the unit tests. I'll try again and see what happens with these updates.. I'm going to guess that the publication hasn't been setup yet - addPublication is async, so you get an immediate return with the registration_id, but that doesn't mean it's available yet. You'll get a callback to the context with newPublication when it appears, which is likely to be a few ms after your addPublication call.\nSo, the first calls to offer are likely to return 'NOT_CONNECTED' until the publication is available. Spinning on the offer call waiting for a non-negative answer will resolve this, but by installing a context to handle the actual async callbacks you'll get something a little more understandable (in my opinion).. I should add that this is why various examples instead go for the 'findPublication' route, waiting for it to succeed. It makes a sync call for test programs (not exactly beautiful, and i'd not suggest this for production code):\n    // Find our request_publication\n    while (!(publication_ = aeron_->findPublication(publication_id_)))\n    {\n        sleep(1);\n    }\n\n. I think he is saying that multicast traffic is published to all interfaces from the publishing host, even if the only subscriber is on the localhost loopback?\n\nOn 10 May 2017, at 12:57pm, Martin Thompson notifications@github.com wrote:\nCan you please refine the question? It is not clear what you are asking.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/real-logic/Aeron/issues/354#issuecomment-300459851, or mute the thread https://github.com/notifications/unsubscribe-auth/AJrpD6g4PspQse2X4pJe63vQTdpKjvEBks5r4aYRgaJpZM4NWjlZ.\n\n\n. Daniel,\nI think you are using UDP in your example, so there are no connections being initiated in either direction, just packets being sent between hosts.\nFor a publisher/subscriber model, i\u2019d have thought the most effective way would be to use multicast traffic from the publisher. It\u2019s really a matter of understanding what percentage of the traffic is consumed by each host, and what percentage is discarded. You could for example use multiple multicast groups, with products allocated to groups, so hosts would subscribe to the required multicast groups to receive the events they require.\n\nOn 5 Jul 2017, at 6:46pm, Daniel Schiermer notifications@github.com wrote:\nThanks a lot for the prompt reply Todd. In didn't realise that was a restriction, but in that case it makes perfect sense.\nWe, unfortunately, have a restriction in our network preventing me from initiating connections from host2 to host1, hence my attempt at the above.\nOn another somewhat related note regarding only being able to subscribe locally. Say you have a topology where Host1 is e.g. a market data publisher and you have many hosts wanting to subscribe to this data - and you don't know the list of hosts. I would normally have each host create a subscription pointing at Host1, but since that isn't possible would below be a good way to do it?\nHost1 creates a subscriber on channel localhost:3456 listening for market data requests\nHostX ... HostY creates a publisher with channel host1:3456 and sends a market data request\nHost1 creates a new publisher for each market data request with channel HostX:1234 and publishes market data via all publishers.\nHope that makes sense?\nLet me know if I should open a new question for this.\nOnce again, thanks a lot for your help!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/real-logic/aeron/issues/372#issuecomment-313176172, or mute the thread https://github.com/notifications/unsubscribe-auth/AJrpDyn1dM4sJwZxAu3Mdm3IK7wRbKeEks5sK8vzgaJpZM4OOiMj.\n\n\n. Well in that case multicast looks like the best option, since the publish address is not related to the host interfaces, so as long as you can agree a multicast address mapping between the hosts, their actual interfaces aren\u2019t important (just make sure on multi-homed hosts you publish to only the required interface).\nMapping multiple products to multicast groups is a tricky business - you have a limited IGMP membership on your switch, which will be something like 2,000 or so, therefore you can\u2019t create a group per symbol unless you have a very limited set of symbols to distribute. I imagine you\u2019ll need to understand the traffic shape broken down by symbol, and which hosts require which symbols before you can make a stab at an optimal solution, so just make sure you don\u2019t bake in a single group into your aeron design, so that you have choices in the future.\nOne other thing, if you send to one group, the media driver will make more optimal use of the packet MTU, packing multiple messages into one network packet if your send rate is very high - you won\u2019t be able to take advantage of this with multiple groups though.\n\nOn 5 Jul 2017, at 7:40pm, Daniel Schiermer notifications@github.com wrote:\nHi Cesare,\nSorry, yes, I use UDP. I should have been more clear about the connection \"initiation\". We only have one-way host/ip mappings in our WAN, so we cannot point to host1 from host2, but I can work around this problem for now.\nYou are right, multicast would definitely be a better solution, especially with many subscribers. Great idea to use multiple groups to split by product.\nYour help is much appreciated.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub https://github.com/real-logic/aeron/issues/372#issuecomment-313190345, or mute the thread https://github.com/notifications/unsubscribe-auth/AJrpD5ou4whLJ4Xsro80kADOPg4_a614ks5sK9iVgaJpZM4OOiMj.\n\n\n. Yeah, dealing with older platforms is something i'm not looking at, and i'm not sure about that whole BSD_SOURCE thing anyway, why it was needed before. I'll certainly stick those back in. Is it going to be possible to wrap them in a #if so that we can optionally remove them on some platforms/builds? That way, they stay in place for the older linux platforms, but can be excluded, say, for debug builds with warnings as errors flagged?\nThe dlsym thing was a bit of a leap, and I agree it isn't pretty. I'll see if there is a better way of disabling this one warning, as it makes no sense on modern architectures (I think it's a hangover from segmented memory models from way back).\ntransport_poller.c was an 'unused local variable' in the case where neither HAVE_EPOLL or HAVE_POLL is defined (and the old capacity needs to be kept from before AERON_ARRAY_ENSURE_CAPACITY is called since it modifies the capacity). \nI'll pull out the simple fixes and we can deal with these separately.. I'll close this, i've raised a simpler one for the windows fixes. Well i'm intrigued to know what is going on here.\nI've started your test program on a pair of servers here, and i'll keep at eye on them and see what happens. Hopefully they'll have enough disk space as the logs look quite chatty.... Well i've run for 11 hours or so and not seen this behaviour. No aeron errors or anything unusual. No dropped packets on my network interfaces (which is unsurprising).\nIf the speculation about corrupt UDP packets arriving is the cause, then i'd expect you to see large numbers of (correctly) dropped packets on the interfaces in question, which will show in the interface stats, or in dmesg. Of course, if checksums are disabled on the host this won't happen, so check that as well.\nStats from the two hosts if it helps:\n```\nhost1:\n07:54:03 - Aeron Stat (CnC v10), client liveness 5,000,000,000 ns\n0:          519,070,368 - Bytes sent\n  1:          519,408,640 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:               20,290 - NAKs sent\n  6:               18,645 - NAKs received\n  7:              386,356 - Status Messages sent\n  8:              386,377 - Status Messages received\n  9:              764,945 - Heartbeats sent\n 10:              764,930 - Heartbeats received\n 11:               18,388 - Retransmits sent\n 12:                    9 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                  944 - Short sends\n 17:               77,048 - Client keep-alives\n 18:                    2 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\nHost 2:\n07:54:16 - Aeron Stat (CnC v10), client liveness 5,000,000,000 ns\n0:          519,205,888 - Bytes sent\n  1:          519,324,832 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:               18,645 - NAKs sent\n  6:               20,290 - NAKs received\n  7:              386,505 - Status Messages sent\n  8:              386,486 - Status Messages received\n  9:              765,186 - Heartbeats sent\n 10:              765,199 - Heartbeats received\n 11:               19,880 - Retransmits sent\n 12:                    0 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                  609 - Short sends\n 17:               76,928 - Client keep-alives\n 18:                    2 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n```\n. @tmontgomery I see, so it's likely that the app is a bit bursty, and the send/receive buffers aren't long enough to deal with it. I could try increasing the buffers and re-running (I can the straight java media driver without fiddling with any settings).. It's not clear to me what you are now seeing - does it build with gcc 6.1 but you have some runtime issues?. It sounds to me like you have core contention on your host, as otherwise I can't see why aeron spinning would adversely affect the latency of other processes running on the host (epolling or not).\nAssuming you do have core contention, then i'd suggest re-evaluating whether the hardware has the capacity you need for the latency you are wanting to achieve. You can use csets to provide dedicated cores for the media driver, and consider moving to 1 core rather than 3 for the media driver to partition the hardware resources more appropriately.\nAnother thing to consider would be alternative network hardware with kernel bypass drivers, which has the advantage of reduced context switches and interrupts, lower CPU use, lower latency, and dedicated ports for the aeron traffic.. This is to avoid calling memcpy with observations being a nullptr, as even if the bytes to copy is 0, this is flagged by the undefined behaviour sanitiser (and checking online this is apparently correct).. ",
    "agibsonccc": "@mjpt777 Anywhere we can track this? We are using aeron already in our ML stack and trying to figure out a viable path to this.. ",
    "neomantra": "I was exploring using Solarflare TCPDirect with the C media driver.  It is very straight-forward to port  the existing UDP code to it.  I've really enjoyed using this API and was gonna stab it once you guys release. . ",
    "samratbatth": "Any update on ef_vi with C media driver? . ",
    "lbradstreet": "This would be great. We are pretty tempted to start detecting this issue ahead of time so that our users get more helpful errors.\n. Thank you. There's no rush - I just wanted to let you know we'd find it useful too.\n\nOn 30 Aug 2016, at 19:35, Martin Thompson notifications@github.com wrote:\nI'll see if I can get round to adding this before the next release.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Spin and timeout is fine for us too. We initially delay our health checks, and our health checks include a retry parameter, so the timeout you choose probably won't affect us at all.. \n",
    "vdidenko": "I am just following the existing pattern in CMakeLists.txt. The better CMake way would be:\ncmake_minimum_required(VERSION 3.0.2 FATAL_ERROR)\n.....\nproject(\"aeron\" VERSION 0.9.8)\nfor the CMake requirements and project definition lines, per CMake docs. It only available with CMake 3.0.2, yet Aeron now allow as early as 2.8.4 versions.\n. OK, I have it in another branch, new pull request is #231.\n. ",
    "rodneyparnell": "I may have misinterpreted the information on https://github.com/real-logic/Aeron/wiki/Protocol-Specification where it says:\n\"The Aeron protocol is designed to be run directly over many different types of transmission media, including shared memory/IPC, InfiniBand/RDMA, UDP, TCP, Raw IP, HTTP, WebSocket, BLE, etc. This means that the following assumptions are made:\nTransmission Media may be a stream media, such as TCP or RDMA without inherent frame boundaries.\n.........\"\nI will talk to my employer about the gateway tunnelling possibility although it is a longshot.\nThanks nevertheless for the innovations the team has achieved with Aeron. It will be big!\n. Thank you Todd for your guidance. If I may probe you further, what is your opinion on the pub/sub paradigm? My feeling is that it brings a lot of stateful handing in the server, tracking subscribers and their last-sent offset in the notification stream. Plus monitoring subscriber health and then removing the dead - a bit like writing a garbage collector, and we all know easy that is to get right! \nI am tempted therefore to move to a polling model with the 'subscriber' passing the last-sent offset back to the server to ask for more. Of course there are network overheads with redundant polling but on the other hand no heartbeats or monitoring is required and the server can become stateless, or at least hold no client state. Plus the polling paradigm is inherently self-limiting - the client only polls as often as it is able.\nWhat do you think. Do the advantages of polling outweigh the networking impact?\nMany thanks!!\n. By tracking subscriber state, I meant only keeping a list of subscribers and where they are up to. In my app I can't use a multicast publication mechanism since each subscriber will be at a slightly different point in the notification stream. But even though it is only a small amount of state, it still brings in the need for monitoring subscriber health and garbage collecting them :(  I think I will go with the polling mechanism and use batching of notifications in response to the poll - ie all notifications since last time.\nThanks for your thoughts.\n. ",
    "philgentric": "I cloned Agrona (in the AERON dir) and gradlew it successfully, then for aeron gradlew eclipse works, but when I retry (after erasing) to import in eclipse, I still get errors:\n\"Access restriction: The type 'Signal' is not API (restriction on required library '/Library/Java/JavaVirtualMachines/jdk1.8.0_73.jdk/Contents/Home/jre/lib/rt.jar')\"\ncan you document the exact procedure that works for you ?\n. Thanks.\nMay I suggest you could update the eclipse section in https://github.com/real-logic/Aeron/wiki/Hacking-on-Aeron to document that and avoid bad surprises ?-)\nin the meantime I will try InteliJ IDEA...\n. Done\n. ",
    "sthornington": "Tentatively this looks like my error, using a driver from the previous version due to a name change.\n. Yeah, using the correct driver version (aeron-driver-0.9.9 instead of aeron-driver-0.9.9-SNAPSHOT) cleared it up.\n. Does this have any relation to seeing orphaned deleted images?  I mentioned my issue in glitter but haven't been able to reproduce outside of our lossy environment.... We did switch to 1.0.5, but I couldn't confirm that the issue we have didn't happen on 1.0.4 without downgrading, which I am considering.. This is the same issue I have been seeing and occasionally mentioning in the gitter.. \ud83d\udc4d. For what it's worth, I've seen std::chrono taking (allegedly) ~25ns on real\nmachines and much more in VMs.\nOn Thu, Apr 13, 2017 at 3:43 PM Martin Thompson notifications@github.com\nwrote:\n\nThen either profile or post the whole benchmark. We are just guessing\nbased on partial information otherwise.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/real-logic/Aeron/issues/340#issuecomment-294002578,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB4EhbqP-gbi1n0q0njQd2fpAeiV9YIGks5rvnrFgaJpZM4M7-Sj\n.\n. I'm not sure if this is relevant, but I do recall a change in the last few months where the driver ftruncates \"(deleted)\" images/logs to 0 bytes to mitigate a space leak.  Could that lead to a SIGBUS?. \n",
    "epsitec": "Thank you for explaining the context. And congratulations on the work you have done!\n. ",
    "jiri-dev": "Forgot to mention that to we run our app on Windows and to reproduce this we used Process Explorer (from SysInterals) to suspend the publisher app for around 7secs and then resumed it and then we got the issue. We also run it on Linux where we experienced the issue with GC causing the pause.\n. ",
    "MizukiSonoko": "Thanks.\nCan you make a UDP connection without using Aeron? Are you sure you have the IP addresses correct? Do you have firewalls in the way?\nno problem\nThis script ran correctly.\nuser@second-machine$ echo \"This is a test\" | nc -u first-machine 40123\nand \nuser@first-machine$ nc -u -l 40123\nDetail of status is\n- environments\n  OS:  Ubuntu 16.04  LTS\n- 1 Running media driver in first and second machines.\nuser@first-machine$  java -cp aeron-samples/build/libs/samples.jar io.aeron.driver.MediaDriver\nuser@second-machine$  java -cp aeron-samples/build/libs/samples.jar io.aeron.driver.MediaDriver\n- 2 Write my code is like Basic{Subscriber|Publication}.\n  ...\nAeron.addSubscription(aeron:udp?endpoint=\"second machine IP\":40123, streamId);\n...\nAeron.addPublication(aeron:udp?endpoint=\"first machine IP:40123\", streamId);\n...\n- 3 make, run, and result  \n```\nuser@first-machine$ ./peer\nSubscribe mode\n```\n```\nuser@second-machine$ ./peer\nPublish mode\n```\nNeither of these, no error, no stdout.\nThanks\n. Thanks \nI ran \nuser@first-machine$ java -cp aeron-samples/build/libs/samples.jar   -javaagent:aeron-agent/build/libs/aeron-agent-0.9.10-SNAPSHOT-all.jar   -Daeron.event.log=admin,FRAME_IN   io.aeron.driver.MediaDriver\nresult\nWARNING: /dev/shm/aeron-ubuntu already exists.\nINFO: Aeron directory /dev/shm/aeron-ubuntu exists\nINFO: Aeron CnC file /dev/shm/aeron-ubuntu/cnc.dat exists\nINFO: Aeron toDriver consumer heartbeat is 15985 ms old\nTRANSFORM io.aeron.driver.media.ReceiveChannelEndpoint\nTRANSFORM io.aeron.driver.media.SendChannelEndpoint\nTRANSFORM io.aeron.driver.ClientProxy\nTRANSFORM io.aeron.driver.ReceiverProxy\nTRANSFORM io.aeron.driver.SenderProxy\nTRANSFORM io.aeron.driver.DriverConductor\n[109202.266126] CMD_IN_ADD_SUBSCRIPTION [71/71]: aeron:udp?endpoint=second-machine:40123 12 [-1][0:1]\n[109202.340813] RECEIVE_CHANNEL_CREATION [104/104]: UdpChannel - localData: 0.0.0.0/0.0.0.0:0, remoteData: /second-machine:40123, ttl: 0\n[109202.359479] CMD_OUT_ON_OPERATION_SUCCESS [16/16]: [0:1]\n[109202.763660] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[109203.263965] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[109203.768674] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[109204.269099] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[109204.770394] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[109205.274429] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[109205.775214] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\nand\nuser@second-machine$ java -cp aeron-samples/build/libs/samples.jar   -javaagent:aeron-agent/build/libs/aeron-agent-0.9.10-SNAPSHOT-all.jar   -Daeron.event.log=admin,FRAME_IN   io.aeron.driver.MediaDriver\nresult\nWARNING: /dev/shm/aeron-ubuntu already exists.\nINFO: Aeron directory /dev/shm/aeron-ubuntu exists\nINFO: Aeron CnC file /dev/shm/aeron-ubuntu/cnc.dat exists\nINFO: Aeron toDriver consumer heartbeat is 47562 ms old\nTRANSFORM io.aeron.driver.media.ReceiveChannelEndpoint\nTRANSFORM io.aeron.driver.media.SendChannelEndpoint\nTRANSFORM io.aeron.driver.ClientProxy\nTRANSFORM io.aeron.driver.ReceiverProxy\nTRANSFORM io.aeron.driver.SenderProxy\nTRANSFORM io.aeron.driver.DriverConductor\n[90310.889630] CMD_IN_ADD_PUBLICATION [63/63]: aeron:udp?endpoint=first-machine:40123 12 [0:1]\n[90310.947686] SEND_CHANNEL_CREATION [104/104]: UdpChannel - localData: 0.0.0.0/0.0.0.0:0, remoteData: /first-machine:40123, ttl: 0\n[90311.185585] CMD_OUT_PUBLICATION_READY [111/111]: -791769768:12 23 [1]\n    /dev/shm/aeron-ubuntu/publications/UDP-00000000-0-3b6addd3-40123-D0CE8D58-C-1.logbuffer\n[90311.389157] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[90311.890443] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[90312.394918] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n[90312.897572] CMD_IN_KEEPALIVE_CLIENT [16/16]: [0:0]\n...\n- AeronStat\n  first-machine\n19:04:20 - Aeron Stat\n=========================\n  0:                    0 - Bytes sent\n  1:                    0 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                    0 - NAKs sent\n  6:                    0 - NAKs received\n  7:                    0 - Status Messages sent\n  8:                    0 - Status Messages received\n  9:                    0 - Heartbeats sent\n 10:                    0 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                    0 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    1 - Errors\n 16:                    0 - Short sends\n 17:                   83 - Client keep-alives\n 18:                    0 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                   -1 - recv-channel: aeron:udp?endpoint=second-machine:40123\n--\nsecond-machine\n19:04:19 - Aeron Stat\n=========================\n  0:                    0 - Bytes sent\n  1:                    0 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                    0 - NAKs sent\n  6:                    0 - NAKs received\n  7:                    0 - Status Messages sent\n  8:                    0 - Status Messages received\n  9:                    0 - Heartbeats sent\n 10:                    0 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                    0 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                  131 - Client keep-alives\n 18:                    1 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    1 - send-channel: aeron:udp?endpoint=first-machine:40123\n 23:                    0 - pub-lmt: 1 -630650780 12 aeron:udp?endpoint=first-machine:40123\n 24:                    0 - snd-pos: 1 -630650780 12 aeron:udp?endpoint=first-machine:40123\n--\nThanks\n. Thanks \nI get this error when only Subscription. Even if reverse a role, the same state.\n```\n\n1 observations from 2016-07-12 19:42:09.640+0900 to 2016-07-12 19:42:09.640+0900 for:\n .lang.RuntimeException: channel \"aeron:udp?endpoint=second-machine:40123\" : java.net.BindException: Cannot assign requested address\n    at io.aeron.driver.media.UdpChannelTransport.openDatagramChannel(UdpChannelTransport.java:127)\n    at io.aeron.driver.media.ReceiveChannelEndpoint.openChannel(ReceiveChannelEndpoint.java:127)\n    at io.aeron.driver.Receiver.onRegisterReceiveChannelEndpoint(Receiver.java:115)\n    at io.aeron.driver.cmd.RegisterReceiveChannelEndpointCmd.execute(RegisterReceiveChannelEndpointCmd.java:32)\n    at io.aeron.driver.Receiver.accept(Receiver.java:134)\n    at io.aeron.driver.Receiver.accept(Receiver.java:36)\n    at org.agrona.concurrent.OneToOneConcurrentArrayQueue.drain(OneToOneConcurrentArrayQueue.java:106)\n    at io.aeron.driver.Receiver.doWork(Receiver.java:64)\n    at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:106)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: java.net.BindException: Cannot assign requested address\n    at sun.nio.ch.Net.bind0(Native Method)\n    at sun.nio.ch.Net.bind(Net.java:433)\n    at sun.nio.ch.DatagramChannelImpl.bind(DatagramChannelImpl.java:691)\n    at io.aeron.driver.media.UdpChannelTransport.openDatagramChannel(UdpChannelTransport.java:103)\n    ... 9 more\n1 distinct errors observed.\n```\nthanks\n. Thanks \nThat's correct.\nreceiveDatagramChannel failed binding  to that address when subscriber.\n. Sorry I don't know solution.\nbut, I try to improve it now.\n. Thanks, \nI misunderstood.\nIn first machine.\nAeron.addPublication(aeron:udp?endpoint=\"second machine IP\":40123, streamId);\nand, I must write \"endpoint=\"second machine IP\" in second machine.\nAeron.addSubscription(aeron:udp?endpoint=\"second machine IP\":40123, streamId);\nSubscriber's endpoint is own IP.\nIt works correctly.\nThanks!!\n. ",
    "jiteshvassa": "I'd like to understand a bit more around how either of the Drivers going down would manifest itself in the client / subscriber.  I saw that there's an Aeron.Context.errorHandler, would a notification come through there?\nIn addition if the Driver was started back up, is there any re-connection logic within Aeron or would that need to be handled externally?  If it's the later, then it would be good to know which of the Aeron constructs should be cleared up and recreated.\n. ",
    "karypid": "\nA client application should therefore handle this as a serious error and totally restart. Cleaning up all Publications, Subscriptions, and the Aeron client itself and then restarting.\n\nIs there any reason why a media driver being restarted is so dramatic in Aeron? What problems could arise if you installed an error handler that caught the DriverTimeoutException and simply switched to 'recovery' mode?\nWhat I mean by that, is have applications periodically try to reconnect, waiting for the media driver to come back. When they succeed, thy can re-create subsrciptions/publications and resume operation.\n. So, I did a test in Windows as follows:\n\nA client is in a loop trying to connect.\nWhen connected the client creates a publication.\nClient then enters a loop waiting for a subscriber to appear.\n\nI noticed that the following sequence causes the driver to not be able to run:\n\n\nStart test client\nWait to see it try to connect a few times unsuccessfully...\n\n\nStart media driver\nWait to see client manage to connect; it will create the publication and enter the inner loop waiting for a subscriber to arrive.\n\n\nKill media driver\nWait for client to notice. It closes the publication and connection context.\n\n\nStart media driver again\nThis fails!\n\n\n```\npackage playground;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport org.agrona.CloseHelper;\nimport io.aeron.Aeron;\nimport io.aeron.Publication;\npublic class RunPublisher {\n    private final AtomicBoolean failed = new AtomicBoolean(false);\nprivate final String uri;\nprivate final int streamId;\n\npublic RunPublisher(String uri, int streamId) {\n    this.uri = uri;\n    this.streamId = streamId;\n}\n\npublic static void main(String[] args) throws Exception {\n    new RunPublisher(args[0], Integer.parseInt(args[1])).run();\n}\n\nprivate void run() {\n    final Aeron.Context ctx = new Aeron.Context();\n\n    ctx.errorHandler((Throwable error) -> {\n        error.printStackTrace(System.out);\n        System.out.println(\"Connection died... Will try to re-establish...\");\n        failed.set(true);\n    });\n\n    Aeron aeron = null;\n    Publication publication = null;\n\n    while (true) {\n        aeron = null;\n        publication = null;\n\n        try {\n            System.out.println(\"Reconnecting...\");\n            failed.set(false);\n            aeron = Aeron.connect(ctx);\n            try {\n                System.out.println(\"Connect succeeded! Add publication...\");\n                publication = aeron.addPublication(uri, streamId);\n                try {\n                    System.out.println(\"publication added! Wait for subscriber...\");\n                    while (!failed.get() && !publication.isConnected()) {\n                        System.out.println(\"No active subscribers detected\");\n                        Thread.sleep(1000);\n                        continue;\n                    }\n                    if (!failed.get()) {\n                        System.out.println(\"Subscriber arrived! Goodbye!\");\n                        break;// success!\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace(System.out);\n                    System.out.println(\"Error waiting for subscriber... Resetting...\");\n                    continue;\n                }\n            } catch (Exception e) {\n                e.printStackTrace(System.out);\n                System.out.println(\"Add publication failed... Resetting...\");\n            } finally {\n                System.out.println(\"close(publication)\");\n                CloseHelper.quietClose(publication);\n            }\n        } catch (Exception e) {\n            e.printStackTrace(System.out);\n            System.out.println(\"Connect failed... Will retry...\");\n        } finally {\n            System.out.println(\"close(aeron)\");\n            CloseHelper.quietClose(aeron);\n        }\n    }\n}\n\n}\n```\nApparently when the driver dies, a file handle is left open for the publication on the CLIENT side. This prevents the driver from being able to restart. The exception I get is:\nWARNING: C:\\Users\\karypid\\AppData\\Local\\Temp\\aeron-karypid already exists.\nINFO: Aeron CnC file C:\\Users\\karypid\\AppData\\Local\\Temp\\aeron-karypid\\cnc.dat exists\nINFO: Aeron toDriver consumer heartbeat is 30035ms old\nException in thread \"main\" java.nio.file.AccessDeniedException: C:\\Users\\karypid\\AppData\\Local\\Temp\\aeron-karypid\\publications\\UDP-00000000-0-7f000001-40123-cee8cf5a-a-1.logbuffer\n    at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:83)\n    at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)\n    at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)\n    at sun.nio.fs.WindowsFileSystemProvider.implDelete(WindowsFileSystemProvider.java:269)\n    at sun.nio.fs.AbstractFileSystemProvider.delete(AbstractFileSystemProvider.java:103)\n    at java.nio.file.Files.delete(Files.java:1126)\n    at org.agrona.IoUtil.delete(IoUtil.java:137)\n    at org.agrona.IoUtil.delete(IoUtil.java:128)\n    at org.agrona.IoUtil.delete(IoUtil.java:128)\n    at io.aeron.CommonContext.deleteAeronDirectory(CommonContext.java:318)\n    at io.aeron.driver.MediaDriver.ensureDirectoryIsRecreated(MediaDriver.java:424)\n    at io.aeron.driver.MediaDriver.<init>(MediaDriver.java:163)\n    at io.aeron.driver.MediaDriver.launch(MediaDriver.java:285)\n    at io.aeron.driver.MediaDriver.launch(MediaDriver.java:274)\n    at io.aeron.driver.MediaDriver.main(MediaDriver.java:144)\nI will try in Linux and post back, but it seems to me that a handle is left lingering...\n. There is only one client, the \"publisher code snippet\" given above. It forever reconnects and waits for a subscriber to appear (one never does, I haven't written a subscriber).\nWhen I start the driver (just the default launcher, with java io.aeron.driver.MediaDriver) it manages to connect and create the publication. While it is waiting for subscribers (inner while loop) I press Ctrl-C to stop the driver. The code iterates to reconnect and it does call Aeron.close() before retrying:\n...\nNo active subscribers detected\nNo active subscribers detected\nNo active subscribers detected\nio.aeron.exceptions.DriverTimeoutException: MediaDriver has been inactive for over 10000ms\n        at io.aeron.ClientConductor.checkDriverHeartbeat(ClientConductor.java:551)\n        at io.aeron.ClientConductor.onCheckTimeouts(ClientConductor.java:517)\n        at io.aeron.ClientConductor.doWork(ClientConductor.java:431)\n        at io.aeron.ClientConductor.doWork(ClientConductor.java:143)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:140)\n        at java.lang.Thread.run(Thread.java:745)\nConnection died... Will try to re-establish...\nclose(publication)\nclose(aeron)\nReconnecting...\n. The problem is in class Publication I think:\n```\n    void releasePublication(final Publication publication)\n    {\n        verifyActive();\n    if (publication == activePublications.remove(publication.channel(), publication.streamId()))\n    {\n        lingerResource(publication.managedResource());\n        awaitResponse(driverProxy.removePublication(publication.registrationId()), null);\n    }\n}\n\n```\nverifyActive() throws an exception and publication.channel() is never touched...\nDisclaimer: I literally just started looking into this code; I may be way off.... Thank you, it works after commenting out:\n// System.out.println(\"close(publication)\");\n                    // CloseHelper.quietClose(publication);\nThe change for IllegalStateException should steer users in the right direction. I will add actual subscribers and continue testing (also on Linux) and report here if I run into any other issues.\n. Related question(s):\n1) Driver timeout milliseconds.\nThe description reads \"The timeout in milliseconds after which the driver is considered dead if it does not update its C'n'C timestamp.\" In my testing I lowered this value in order to speed up detection of a \"dead driver\". \n\nAre there any guidelines on its value? 10 seconds seems quite high. How does this affect Aeron if set to (say) 1 second?\nObviously the timeout needs to be set to the same value in all processes using this driver. Unfortunately there is there no system property for it? It's a pity one has to use a custom launcher to set it on the driver side. Would you consider adding one? (I could create a pull request, though it's ridiculously simple).\n\n2) Ensuring same driver incarnation\nI noticed that a new driver will wait until driver timeout milliseconds before trying to take over an existing directory (which makes absolute sense). Still, is there something in Aeron's protocol that discriminates between instances of the driver (to ensure no data is intermixed between an old and new incarnation)? I added a \"sessionId\" in the application layer protocol that increases monotonically every time I connect to a new driver. This ensures that receiving clients can detect a \"new\" incarnation sending data. I suspect there's already something available to do this but is it accessible to subscribers/publishers via the API?\n. @mjpt777 thanks for this change. Your points about GC/OS pauses is noted.\n. @tmontgomery That was precisely what I wanted to ensure: that all previous data \"from the wire\" is discarded. I was worried the new media driver may deliver messages the previous instance received, so therefore the application code needs to defend against it. Based on your explanation I see this is not a concern.. Unfortunately reconnecting in Linux seems to be unstable. Basically, when I restart the media driver, the publisher connects and then tries to add the publication, but I sometimes I get a SIGSEGV.\n```\n\nA fatal error has been detected by the Java Runtime Environment:\n\nSIGSEGV (0xb) at pc=0x00007f7721a879ef, pid=26194, tid=140149143889664\n\nJRE version: Java(TM) SE Runtime Environment (8.0_74-b02) (build 1.8.0_74-b02)\nJava VM: Java HotSpot(TM) 64-Bit Server VM (25.74-b02 mixed mode linux-amd64 compressed oops)\nProblematic frame:\nJ 6135 C2 io.aeron.ClientConductor.doWork()I (59 bytes) @ 0x00007f7721a879ef [0x00007f7721a87860+0x18f]\n\nFailed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n\nAn error report file with more information is saved as:\n/server/hs_err_pid26194.log\n\nIf you would like to submit a bug report, please visit:\nhttp://bugreport.java.com/bugreport/crash.jsp\n\n``\n.# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again`\nI've turned that on and will chase it. Unfortunately it's just hard to reproduce.... Only got it twice in the past 8 hours. Will have more time to fiddle so I'm sure I'll manage to track it.\n. Just a quick update - it seems to me that the SIGSEGV is not the result of some native code but a direct buffer access:\nStack: [0x00007f75e8037000,0x00007f75e8138000],  sp=0x00007f75e8136290,  free space=1020k\nNative frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)\nJ 5767 C1 org.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.write(ILorg/agrona/DirectBuffer;II)Z (110 bytes) @ 0x00007f76312bba11 [0x00007f76312bb6a0+0x371]\nj  io.aeron.DriverProxy.addPublication(Ljava/lang/String;I)J+49\nj  io.aeron.ClientConductor.addPublication(Ljava/lang/String;I)Lio/aeron/Publication;+26\nj  io.aeron.Aeron.addPublication(Ljava/lang/String;I)Lio/aeron/Publication;+15\nj  playground.aeron.AeronConnectionManagerImpl.addPublication(Ljava/lang/String;I)Lio/aeron/Publication;+22\nj  playground.aeron.FxPriceAeronPublisher.onConnected()V+42\nj  playground.aeron.AeronConnectionManagerImpl.notifyOnConnected()V+16\nj  playground.aeron.AeronConnectionManagerImpl.fireOnConnected(Lio/aeron/Aeron;)V+32\nj  playground.aeron.AeronConnectionManagerImpl.run()V+121\nj  playground.aeron.AeronConnectionManagerImpl$$Lambda$32.run()V+4\nj  java.lang.Thread.run()V+11\nv  ~StubRoutines::call_stub\nV  [libjvm.so+0x68c616]  JavaCalls::call_helper(JavaValue*, methodHandle*, JavaCallArguments*, Thread*)+0x1056\nV  [libjvm.so+0x68cb21]  JavaCalls::call_virtual(JavaValue*, KlassHandle, Symbol*, Symbol*, JavaCallArguments*, Thread*)+0x321\nV  [libjvm.so+0x68cfc7]  JavaCalls::call_virtual(JavaValue*, Handle, KlassHandle, Symbol*, Symbol*, Thread*)+0x47\nV  [libjvm.so+0x723d80]  thread_entry(JavaThread*, Thread*)+0xa0\nV  [libjvm.so+0xa69dcf]  JavaThread::thread_main_inner()+0xdf\nV  [libjvm.so+0xa69efc]  JavaThread::run()+0x11c\nV  [libjvm.so+0x91d9d8]  java_start(Thread*)+0x108\nC  [libpthread.so.0+0x7aa1]  start_thread+0xd1\nI am going to switch back to my test publisher and see if I can reproduce this with a snippet.\nI am also considering a different approach: have a custom media driver launcher that picks a new aeronDirectory every time (e.g. /dev/shm/aeron-${pid}) so that a fresh location is used. Clients that notice the driver heartbeat timed out will call Aeron.close() and open a connection to the new directory. I can have the custom launcher lock a file (e.g. /dev/shm/current) and overwrite the content with the name of the new location, so that clients know where to try and reconnect (as soon as content changes).\n. I don't think that will help. It's really more of an Eclipse/Buildship problem\nTo describe it better: you have a repository called Agrona (or agrona, doesn't matter).\nInside it there's a gradle project that has two modules:\nproject(':agrona')\nproject(':agrona-agent')\nNow, when Buildship imports this it creates N+1 projects in eclipse: one per gradle project/module and then an extra \"special\" one for the root folder of the git clone. So it will map:\ngit clone https://github.com/real-logic/agrona.git --> Root local dir: agrona\ngit clone https://github.com/real-logic/Agrona.git --> Root local dir: Agrona\nproject(':agrona') --> agrona\nproject(':agrona-agent') --> agrona-agent\nSo the project agrona clashes with the default local directory \"Agrona\" (or agrona after your rename). It's really a Buildship issue. \nI'll reach out to Buildship later (got to get access to their repo) to suggest they \"detect\" this and if the local git clone is named after one of the modules inside, they should automatically generate a different eclipse project name for the repo. Maybe:\n/path/to/local/git/Agrona --> Agrona-Buildship\nproject(':agrona') --> agrona\nproject(':agrona-agent') --> agrona-agent\nOr they could just prompt the user explaining that they need that extra project and he has to pick some new name to avoid the clash...\n. So, I stand corrected; this DID help. Apparently Buildship is aware of potential clashes so it does check whether one of the modules matches the git directory name, only it does that in a case-sensitive manner.\nTherefore, using \"agrona\" for the git URL will create a local \"agrona\" git clone, meaning Buildship detects this and imports successfully.\nUsing \"Agrona\" for the git URL will create a local \"Agrona\" git clone, meaning Buildship does NOT detect this and fails to import.... ",
    "kdkavanagh": "No longer dependent on any changes to Agrona\n. Thanks, will give it a try in the next few days and report back here\n. Apologies for the delayed feedback - Looks good.  Thanks guys.\n. ",
    "dkonik": "We are using the Oracle JRE 1.8.0_92-x86_64 (bug also manifests itself on the JDK of the same verison) and we\u2019re building the latest HEAD of Aeron (25ab0b382c4784636929ce032c897d2c41e23562).\n. ",
    "franz1981": "Hi guys,\nOnly as a hint...\nThe producer in the test put the new values using:\natomicBuffer.putLong(0, i);\nor inlined:\nUNSAFE.putLong(byteArray, addressOffset + index, value);\nWhile the offer on Publication (inlined):\nUNSAFE.copyMemory(\n            srcBuffer.byteArray(),\n            srcBuffer.addressOffset() + srcIndex,\n            byteArray,\n            addressOffset + index,\n            length);\nfrom the unsafeBuffer (srcBuffer) to the termBuffer, with a call on unsafeBuffer's addressOffset() that do not use the inner byteBuffer's reference.\nAt the end of the producer loop there is no esplicit release of the unsafe buffer, hence no direct usage of the ByteBuffer's reference in the unsafe buffer (nor for reading/wrinting) between the instantiation and the end of the call.\nI do not see (and i can be wrong!) any good reason why the compiler has to retain that (direct) ByteBuffer and probably exist some chances that it will be released at some point (maybe after an OSR?). \nMaybe the issue is not on the consumer side, but on the producer...\nAs soon as i'll have some time i'll write a test to verify that is not the case.\n. @mjpt777 Sorry, i need to explain it better. \nAbout the explicit release of the unsafeBuffer I mean a call on Cleaner::clean against the direct buffer referenced into the unsafeBuffer.\nAFAIK any usage of the byteBuffer field (including the mentioned \"release\" of it) after the loop is fine to tell the compiler to not collect it between all the puts and copyMemory inside the producer loop, because even if the unsafeBuffer instance is used,its byteBuffer field doesn't seem to have other uses after its instantiation.\nI'm reading all the source code with a smart phone and maybe I've missed other usages of that field or misunderstood how the liveness analysis of the compiler work for unused instance fields...\n. @mjpt777 Thank you Martin to have used your time to test it! \n. Got it! Just to know: what could happen to such claim if it will land right after an activation beyond the producer limit?. Np, my fault: I'll try to explain it better.\nSuppose to have a Publication::offer that go through the back-pressure check and is going to perform the (XADD) claim on the term.\nSuppose that it will perform the claim right after the tail has been reinitialised by another producer, but in a termId different from the one used for the backpressure check.\n(A) If the term will have enough capacity the offer operation will succeed.\nNow, suppose to be already in a overclaiming scenario ie where multiple producers has already surpassed the backpressure check and were able to (over)claim until the end of a term: there will be a producer that will trip the term and perform the initialisation of the next term tail before changing the active term.\nThe other (if any) concurrent offers will fail by design and be backpressured (we are already beyond the producer limit!).\nIf a \"late\" claim (described in (A)) will land right after the tail initialisation there won't be any counter-measures to stop that offer to succeed. it is correct?\n. ",
    "leigh-perry": "Mainly to minimise copies of Gradle on my SSD. \nI ran with gradlew, tests passed this time :-)\nLaptop\nOS Name Microsoft Windows 10 Home\nVersion 10.0.14393 Build 14393\nSystem Manufacturer Micro-Star International Co., Ltd.\nSystem Model    GT72 2QD\nSystem Type x64-based PC\nProcessor   Intel(R) Core(TM) i7-4720HQ CPU @ 2.60GHz, 2601 Mhz, 4 Core(s), 8 Logical Processor(s)\nBIOS Version/Date   American Megatrends Inc. E1781IMS.10I, 19/12/2014\nSMBIOS Version  2.8\nEmbedded Controller Version 255.255\nBIOS Mode   UEFI\nBaseBoard Manufacturer  Micro-Star International Co., Ltd.\nBaseBoard Model Not Available\nBaseBoard Name  Base Board\nPlatform Role   Mobile\nSecure Boot State   On\nPCR7 Configuration  Binding Not Possible\nLocale  Australia\nHardware Abstraction Layer  Version = \"10.0.14393.0\"\nInstalled Physical Memory (RAM) 32.0 GB\nTotal Physical Memory   32.0 GB\nAvailable Physical Memory   26.0 GB\nTotal Virtual Memory    36.7 GB\nAvailable Virtual Memory    29.6 GB\nPage File Space 4.75 GB\nPage File   C:\\pagefile.sys\nHyper-V - VM Monitor Mode Extensions    Yes\nHyper-V - Second Level Address Translation Extensions   Yes\nHyper-V - Virtualization Enabled in Firmware    Yes\nHyper-V - Data Execution Protection Yes\n. Thanks for everything Martin.\n. ",
    "nicklauslittle": "315 should fix this.. Normally, yes. But in this case I would say no, simply because we are looking for the next power of 2 rather than the actual leading zero count. By the time compiler optimizations are done (loop-unrolling, etc.), the part that replaces the leading zero count boils down to simple bitwise OR's and shifts, which are extremely fast. Even though the LZCNT instruction would be faster, I would think the overhead of checking for support would make it slower than the generic version.\nIf actually counting the leading zeros is needed, then yes, it would probably be beneficial to make the appropriate optimizations. I am going to go ahead and add the function back in, but will probably add a comment that it only works on 32-bit types using gcc and on some processors using Visual Studio. (i.e. It's not what I would consider a robust function.). Okay. I was mainly going through fixing the warnings in Visual Studio and noticed only the parameters for the lower 32 bits were used. Would it be better to just fix the warnings and leave the existing code as is?. Alright. I pushed a new commit that doesn't have the changed functionality, just the warning fixes.. Can you make it an iterator for C++ rather than an array? I have a commit if you are interested in taking a look.. Submitted PR #401 . I had some time today to review how this is implemented in Java and modified the C++ version to map more closely to it.\nAnother thing I would like some feedback on is that some of the functions could be improved by removing the end iterator as a parameter. Since the length is calculated in the offer function, all the remaining calculations could be based off the length. Would it be beneficial to remove the checks against the end iterator? (Leaving it in will only catch scenarios where the iterator is improperly implemented or where one of the buffers is modified concurrently while being offered.). There were quite a few conflicts, so I had to rebase. Let me know if there's anything else I need to do to get this pushed through.. No worries on the delay.\nMy main reason for wanting to use an iterator is because I have a use case involving a linked list of buffers and would prefer to not have to allocate an array on each offer. I figured that an iterator-based approach could cover both the linked list and array use cases. Unfortunately, this is a very C++-specific solution, so the code doesn't match exactly with the Java side of things. But I still tried to make it match up the best that I could.\nIf you have any questions or comments, or if you want any examples for unit tests or something, let me know. Thanks.. Glad I could help out!. ",
    "drewhk": "close() has been called on both, yes. The tool I used cannot give me more information as it can only report the JVM itself but not say what holds it inside...\n. do you map multiple regions separately from that file?\n. \nAbove is the screenshot. It is taken after both the mediaDriver and client have been closed. I put in there a Thread.sleep() after those calls when I took the screenshot. All other files were properly unmapped. (There are multiple clients and drivers running in the test, hence the multiple files)\n. It is definitely weird. I am reusing your same mapping support for a different purpose. I unmap my stuff and things work fine (file is deleted). What is even weirder is that the cnc.dat mapping is dropped after the test itself exits. Which is in the same JVM (sbt REPL). It is also true that both close() calls have been invoked. Investigating further, if I find a reproducer I will keep this ticket posted.\n. Ok, confirmed there is some other stuff holding on to the cnc.dat file. Nothing to see here :)\n. ",
    "raphw": "Right, did not think of that.\nAn alternative would be to apply the reset on agent attachment when some reset parameter is set. Any agent can be attached multiple times.\n. It is possible to runtime attach an agent multiple times. Depending on the parameter, the agent could choose to rollback a previous transformation. \nThe question is however if this is an actual use case. Alternatively, the resetting mechanism could be dropped altogether. I added it because it was easy to do but did not think of the performance impact of enabling JMX.\n. Sure, entirely forgot about this. Makes perfect sense.\n. ",
    "kaoudis": "Has there been any progress here? Not seeing anything in the repo or any open PRs to this effect.\nParticularly for fedora/RHEL-world, looks like a person needs to be a \"package maintainer\" and follow some steps to get recognized as such so that I imagine one can be contacted in case of issues with one's package (I know packaging things for the Arch AUR isn't too bad, really, sort of an anyone-can-do-it situation, just looks like RHEL has a few more steps) in order to accomplish this: https://fedoraproject.org/wiki/Join_the_package_collection_maintainers?rd=PackageMaintainers/Join\nSo long's as it's not tons of hours of work and y'all are cool with it, I wouldn't mind being the/a package maintainer for RHEL, Arch, Ubuntu, Suse. . OK. My use case for the lib involves including it with Maven in another Java project, so it's not an immediate need or anything for me either to have it available straight from my distro's package manager. I am looking for ways to contribute back in free time though, and kind of unsure what might be both helpful and not in the immediate path of development since I've only got a few hours a week.. ",
    "patriknw": "On stream 1 it's just a few heartbeat messages of a few hundred bytes each per second. It is stuck almost immediately (only few messages get through). Reproducing is not deterministic (about 1 in 10 it happens).\nOn stream 2 it's a lot more messages.\n1.5 GB on the sender side. How can that be possible? I use offer with UnsafeBuffer wrapping an ByteBuffer.allocateDirect of capacity 256 KiB (from our pool). Byte order LITTLE_ENDIAN. \nTerm sizes not changed, using default. All settings default except increased a few timeouts:\n- client-liveness-timeout = 20 seconds\n- image-liveness-timeout = 10 seconds\n- driver-timeout = 20 seconds\n. I'm sure about the version number. Running this on fresh ec2 instances from our sbt build and we have been using 1.0.1 since long back.\nHere are all files: https://dl.dropboxusercontent.com/u/14579199/test35.zip\n. I don't use reservedValue or tryClaim. Only offer and poll.\nI read the stats from a separate process with aeron-samples AeronStats. We are not touching the cnc file, apart from that we poll it periodically for log errors using (a copy) of AeronErrorLog.\nThe media driver is started embedded, if that matters.\nCould it be something with that I continue to offer (in busy-wait loop) even though I get NOT_CONNECTED?\nThe returned positions from offer on node1 looks good (to me):\n```\n[09/29/2016 03:38:37.837]  AeronSink offer result [-1] connected [false] closed [false]\n[09/29/2016 03:39:25.376]  AeronSink offer result [-1] connected [false] closed [false]\n[09/29/2016 03:39:25.444]  AeronSink offer result [320] connected [true] closed [false]\n[09/29/2016 03:39:25.452]  AeronSink offer result [448] connected [true] closed [false]\n[09/29/2016 03:39:26.584]  AeronSink offer result [576] connected [true] closed [false]\n[09/29/2016 03:39:26.643]  AeronSink offer result [768] connected [true] closed [false]\n[09/29/2016 03:39:26.643]  AeronSink offer result [1152] connected [true] closed [false]\n[09/29/2016 03:39:26.647]  AeronSink offer result [1280] connected [true] closed [false]\n[09/29/2016 03:39:27.053]  AeronSink offer result [1664] connected [true] closed [false]\n[09/29/2016 03:39:27.643]  AeronSink offer result [2048] connected [true] closed [false]\n[09/29/2016 03:39:27.738]  AeronSink offer result [2176] connected [true] closed [false]\n...\n[09/29/2016 03:44:26.642]  AeronSink offer result [315776] connected [true] closed [false]\n[09/29/2016 03:44:27.054]  AeronSink offer result [316160] connected [true] closed [false]\n[09/29/2016 03:44:27.067]  AeronSink offer result [316288] connected [true] closed [false]\n[09/29/2016 03:44:27.642]  AeronSink offer result [316672] connected [true] closed [false]\n[09/29/2016 03:44:28.642]  AeronSink offer result [316864] connected [true] closed [false]\n[09/29/2016 03:44:28.642]  AeronSink offer result [317248] connected [true] closed [false]\n[09/29/2016 03:44:29.642]  AeronSink offer result [317632] connected [true] closed [false]\n```\n. I didn't use any filters apart from type=[1-9] with AeronStat.\nHowever, node1 is trying to send to node2 before node2 has been started and after a while we give up that and close the Publication. I see in the logs that this happened in this test run. At 03:38:57. node2 is started 03:39:21 (clocks are in sync within 1 sec).\nSo there was one Publication before the things you see in the stats here.\n. @mbknor I have created this issue for the problem you reported in https://github.com/akka/akka/issues/20623#issuecomment-257564960\nTodd and Martin might have some follow up questions for you.\n. stacks.zip\nHere are some thread dumps, 2 different processes, 3 dumps for each.. great, thanks. ",
    "BardurArantsson": "EDIT: @andrey-lv's answer is much more accurate. NVM.\n. ",
    "andrey-lv": "It is impossible to catch the exception since user-defined destructors in C++11 are noexcept(true) by default. The program aborts immediately.\n. ",
    "steffenyount": "Apparently CoDel isn't just for routers:\nThe data center folks at Google built a patch for Linux's TCP stack using CoDel's max RTT based 'Estimator', 'Setpoint', and 'Control loop' queuing disciplines to reduce their TCP send windows immediately when bufferbloat is detected rather than requiring their routers to trigger TCP send window reductions using packet drops.\nThis \"improved their mean and 99th-percentile latencies from several tens of milliseconds to less than one millisecond\" according to https://tools.ietf.org/html/draft-ietf-aqm-codel-04#section-6.2\nIs there any reason to suspect that a similar performance benefit would not be realizable by integrating these CoDel queuing disciplines into Aeron's \"from Sender to Receiver\" flow control?\nIf one assumes that a similar performance benefit is realizable, wouldn't this imply a performance imperative to implement this kind of a \"Congestion Control\" mechanism based on CoDel queuing disciplines in Aeron?\n(The quoted terms in my 2 questions above reference concepts discussed in the https://github.com/real-logic/Aeron/wiki/Flow-Control documentation.)\nFYI:\nThe https://tools.ietf.org/html/draft-ietf-aqm-codel-04 document is well done, providing a clear explanation of the bufferbloat problem and a clear explanation of how the CoDel queuing disciplines mitigate the bufferbloat problem. It's a pretty good read as far as these kinds of documents go.\nAlso this presentation here is pretty good:\nhttps://www.ietf.org/proceedings/84/slides/slides-84-tsvarea-4.pdf\n. FYI: The BBR paper is available on the ACM queue website: http://queue.acm.org/app/\n. ",
    "oheger": "Correct, the default manifest (which is pretty much empty) is replaced by one containing OSGi-compatible meta data. This includes Import-Package headers defining the packages required by the jar and Export-Package headers listing the packages exposed to client bundles.\nWhen used in a non-OSGi environment this has no impact as the information contained in the manifest is not evaluated. But with the patch it is now possible to deploy the jar as a valid bundle in an OSGi container. Otherwise, OSGi users are forced to somehow process or wrap the jar to add the required meta data manually.\n. Many thanks :-)\n. ",
    "ancapdev": "No worries. Thanks for the quick fix!. ",
    "JatinderSingh": "Hi issue can be reproduced with ami id CentOS-6.5-GA-03.3-f4325b48-37b0-405a-9847-236c64622e3e-ami-6be4dc02.2 (ami-8997afe0).\nSettings included iptables off.\nselinux off \nwith above nc was able to reach to server on udp but Aeron was generating not connected errors. \nI had moved to different ami where things aeron connectivity is working for me, But it would be nice to know steps to identify/debug the issue in general.. ",
    "erichocean": "It's possible I was too conservative with the memory ordering in places, especially the cmpxchg functions.. Any updates on this?. Thanks!. ",
    "dondank": "any plans to be 32bit compatible?. ",
    "julianrz": "I will try with external process, but still feels odd that it behaves differently when subscriber is external. Also I do see subscription.close() have an unintended effect on publication - causing publish() return CLOSED when one of the subscribers is still actively polling - is this also different with external subscriber? . I cannot reproduce the CLOSE status, maybe I was playing in debugger and publisher has timed out on me. But it is interesting that I can reproduce publisher being able to publish long after all subscriptions are closed. I expected NOT_CONNECTED returned in this case. In the implementation code it is not checking subscriptions till position reaches positionLimit, which is large (in my case 8519552, while current position 985248). Calling code will assume that all those messages have reached consumers, but they reached nobody. Sample code attached\nAlso, when you comment out the 100ms delay in publisher loop, it starts returning BACK_PRESSURED in a loop. It thinks there are subscribers, but there are none... \n. \nAttched code \nMain.java.zip\n. Perfectly understandable, and a silly assumption on my side. I find aeron to be a very interesting toolkit, would be nice to have a writeup on the use cases, limitations and best practices, so that it captures a wider audience. ",
    "lightyang": "I can confirm the issue. This seems to be originated from 0ff5c26, which introduced nanosecond-precision time, while the ClientConductor (and maybe other part of the system) still uses ms precision.\njava\n    boolean isPublicationConnected(final long timeOfLastStatusMessage)\n    {\n        return epochClock.time() <= (timeOfLastStatusMessage + publicationConnectionTimeoutMs);\n    }. ",
    "nikkekin": "Thanks for looking into it this fast, and the fact that the problem is in the timeOfLastStatusMessage makes sense to me at least.\nI only saw the problem with the recent 1.0.5 release, so @sthornington unless you've been on 1.0.5 then I doubt it has anything to do with the orphaned deleted images.. ",
    "mh321": "Wouldn't it make more sense to use the builtin whenever possible (and call the right one - e.g.__lzcnt, __lzcnt64) and fallback to the slow version in case of not supported architectures/compilers?. ",
    "aslondon": "Thanks both. \n@mjpt777 yes I am checking the return value, but I'm just printing it for now (as per Aeron's samples). You mention status messages but in my understanding no such message is sent from the receiver until the first publication.\nSo what is the recommended approach to avoid losing messages even when there are subscribers already listening? Shall I just capture the return value and retry the offering until it's no longer NOT_CONNECTED (or times out)? Or shall I come up with a \"setup phase\" of sorts before starting the actual publication?\nThanks again\n. Hi Todd, thanks for your Sunday reply.\nWhat you're saying confirms my suspicion i.e. the publication is not closed and gets reused the next time. So what is the best practice to defend oneself against a situation like this? This is an issue for me as I would like to be able to play around with my tests, start and stop them, without having to bounce the application every time. Is an application-level heartbeat the way forward? So that when the test side disconnects I can close the publication on the application side and open a new one the next time?\nFor the corruption, I believe I'm using SBE correctly as everything's fine both with UDP and in unit tests every single time, so this is really weird. I'll investigate more.\nMany thanks again\n. ",
    "thhart": "The test is running fine in an isolated environment. I did run within a big project before. It looks like a class version conflict. So will look into myself.. I found the problem, it was related to a ThreadPool in which I did run the example.. ",
    "ilveraldino": "Hi, Richard.\nThanks for the input. At a closer look, I do have multiple subscriptions on the same stream, by mistake,\nand this was creating the BACK_PRESSURE at Publisher side.\nThanks for your help!\n. ",
    "guidomedina": "Nice, thanks, better to know that it was a bug and is fixed, a relief.. I had the same issue when I started using akka-remote based on Aeron, here is how I resolved it, using the following function which uses a parameter called idle_cpu_level which is between 1 and 10 where 1 is mostly sleeping, between 2 and 9 a back off and 10 a busy spin:\nhttps://github.com/akka/akka/blob/master/akka-remote/src/main/scala/akka/remote/artery/TaskRunner.scala#L93\nHere is my shared driver code which I use it on development, UAT and production environments, hope it helps, for your case start with  idle_cpu_level = 2 and see if that works for you:\n```\nimport com.typesafe.config.Config;\nimport io.aeron.driver.MediaDriver;\nimport io.aeron.driver.ThreadingMode;\nimport org.agrona.concurrent.*;\nimport java.io.File;\nimport static com.typesafe.config.ConfigFactory.parseFile;\nimport static java.util.concurrent.TimeUnit.MICROSECONDS;\nimport static java.util.concurrent.TimeUnit.MILLISECONDS;\nimport static org.agrona.BitUtil.findNextPositivePowerOfTwo;\npublic class MediaDriverMain {\npublic static IdleStrategy createIdleStrategy(int idleCpuLevel) {\n    switch (idleCpuLevel) {\n      case 1:\n        return new SleepingIdleStrategy(MILLISECONDS.toNanos(1));\n      case 10:\n        return new BusySpinIdleStrategy();\n    }\n    return new BackoffIdleStrategy(\n      1100 * idleCpuLevel - 1000, 5 * idleCpuLevel, 1,\n      MICROSECONDS.toNanos(280 - 30 * idleCpuLevel));\n  }\npublic static void main(String[] args) {\n    final Config config = parseFile(new File(args[0])).getConfig(\"aeron\");\n    final int idleCpuLevel = config.getInt(\"idle_cpu_level\");\n    if (idleCpuLevel < 1 || idleCpuLevel > 10) {\n      System.out.println(\"Invalid IDLE_CPU_LEVEL, valid values are from 1 to 10.\");\n      return;\n    }\n    final int termBufferSize = findNextPositivePowerOfTwo(config.getInt(\"term_buffer_size\"));\n    if (termBufferSize < 2 || termBufferSize > 16) {\n      System.out.println(\"Invalid TERM_BUFFER_SIZE, valid values are 2, 4, 8 or 16.\");\n      return;\n    }\n    System.out.println(\"Starting media driver with IDLE_CPU_LEVEL = \" + idleCpuLevel + \" and TERM_BUFFER_SIZE = \" + termBufferSize);\n    try (MediaDriver ignored = MediaDriver.launch(new MediaDriver.Context().\n      aeronDirectoryName(\"/dev/shm/aeron\").\n      termBufferSparseFile(false).\n      threadingMode(ThreadingMode.DEDICATED).\n      conductorIdleStrategy(createIdleStrategy(idleCpuLevel)).\n      receiverIdleStrategy(createIdleStrategy(idleCpuLevel)).\n      senderIdleStrategy(createIdleStrategy(idleCpuLevel)).\n      publicationTermBufferLength(termBufferSize * 1024 * 1024).\n      dirsDeleteOnStart(true))) {\n      System.out.println(\"Media driver started successfully - waiting for a SIGTERM to exit.\");\n      new ShutdownSignalBarrier().await();\n    } finally {\n      System.out.println(\"Media driver has been shutdown.\");\n    }\n  }\n}\n```\nI'm using https://github.com/typesafehub/config for the configuration passed to that executable and here is a sample configuration:\naeron {\n  idle_cpu_level = 5\n  term_buffer_size = 8\n}\nThe reason for term_buffer_size is because such environments have little RAM, so for example, I have 5 JVMs using the same shared driver which with the default of 16m will consume too much shared memory, hence the tune-ability of the buffer.\nHope that helps, @mjpt777 ideas on tuning this example shared driver are very welcome ;-)\nNote: I recently set it from 9 to 10 in production and maybe it is my impression but the performance seems to be worse than when set to 9.. ",
    "pwebbitrs": "Hi. When is this fix likely to be released? . Many thanks. . FYI.   We are also noticing this occuring intermittently.   Do you know the cause or any work arounds at this stage?   \n```\n2017-04-20 09:25:23.464 ERROR [AeronErrorLog                             ] -  Aeron error: 1 observations from 2017-04-20 09:25:20.474+0200 to 2017-04-20 09:25:20.474+0200 for: java.nio.file.FileSystemException: C:\\QA\\source\\local\\data\\node\\transport\\publications\\UDP-00000000-0-7f000001-5555-C71ABA3B-5-4.logbuffer: The requested operation cannot be performed on a file with a user-mapped section open.\nat sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:86)\nat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97)\nat sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102)\nat sun.nio.fs.WindowsFileSystemProvider.newFileChannel(WindowsFileSystemProvider.java:115)\nat java.nio.channels.FileChannel.open(FileChannel.java:287)\nat java.nio.channels.FileChannel.open(FileChannel.java:335)\nat io.aeron.driver.buffer.MappedRawLog.close(MappedRawLog.java:125)\nat io.aeron.driver.NetworkPublication.close(NetworkPublication.java:207)\nat io.aeron.driver.DriverConductor.onClosePublication(DriverConductor.java:181)\nat io.aeron.driver.cmd.CloseNetworkPublicationCmd.execute(CloseNetworkPublicationCmd.java:32)\nat io.aeron.driver.DriverConductor.onDriverConductorCmd(DriverConductor.java:1014)\nat io.aeron.driver.DriverConductor$$Lambda$21/1352946830.accept(Unknown Source)\nat org.agrona.concurrent.OneToOneConcurrentArrayQueue.drain(OneToOneConcurrentArrayQueue.java:106)\nat io.aeron.driver.DriverConductor.doWork(DriverConductor.java:153)\nat org.agrona.concurrent.AgentRunner.run(AgentRunner.java:122)\nat java.lang.Thread.run(Thread.java:745)\n\n```. ",
    "maspholm": "Thanks for quick reply. Indeed all Aeron clients are closed and GCed. (Also, from what I can see AeronClient::delete does nothing?). I even searched through all FileDescriptor objects on the heap and none of them were pointing to any of the log buffer files.. ",
    "sturgeda": "Yep ok. we're on 1.2.3. We shall upgrade. Thanks for the quick response !. ",
    "jordanxlj": "I think the multi destination control is not a good way for one to many.. I have many messages, each message has only one producer, but many consumers. I could not use the unicast mode with mdc for the consumer number is not specified, and could not use the multicast mode for the performance and connection management. So I want to modify the aeron to let the unicast support one to many, maybe add another message before the setup message.. I have read the source code, only the SendChannelEndpoint's method onStatusMessage could add destination dynamically, how to satify my requirement? If try multicast, the performance is the same as the unicast? I would have many channels more than 50, I am afraid of the bandwidth limit. I have already tested, the multicast of aeron is only 10 percent of the unicast.. Martin, thanks a lot. I have another question, if using dynamic MDC, how to use archiver to record and replay?. My project need record & replay function. Martin, I want to give some advices about archiver.\n1. should support through record.properties file to record and replay, messaging is inconvenient.\n2. I have see you replace the stream instance with stream key, I think why not use streamId as filename directly, such as 10.meta and 10.0.aaf\n3. I think the same archive file size for all stream is improper.. How to reduce the archive storage space, but not sacrifice performance. It's really hard.. I currently met the archive performance bottleneck, I used the ssd hard disk, but the io writing speed only have 10MB. I thought the key point is the logbuffer transferTo the archive file. Because I have a project to use the record and replay function, I cannot wait for the feature releasing. I wanna to write a recorder in c++, I wish the writing speed is closer to the limit of the hard disk. But something bothered me is if the SBE support c++?. Thanks a lot for your timely response, I would try it tomorrow.. I have tried the archiver without DSYNC, the throughput is up to 120MB, maximum is 200MB, thanks.. Martin, sorry, I previous not see the debugging chapter, thanks and close it.. I have tried mac and ubuntu, jdk version is 1.8.021, aeron version is 1.2.5, used the standard ping pong sample code.. I haven't see low space warning on the media driver.. I am sorry, jdk version is 1.8.0121.. I have tried the latest, and the problem disappeared, thanks.. Martin, I cannot completely understand your modification, I have tried the message of 512KB, it is larger than MTU length, why not the problem occur?. thanks Martin, I close the issue.. I suspected the CPU usage of Media Driver is so high, should it affect the throughput?. I change LowLatencyMediaDriver into MediaDriver, the throughput on i7 is up to 500MB. E5 is 8 core and 16 hyper-threads, i7 only 2 cores and 4 hyper-threads. So the throughput of E5 is 4 times than i7. So the difference is reasonable.. I thought the CRC is bad option for the record corruption. It decrease the performance for reliability. I think the proper method is close and start recording a new data file.. @RichardWarburton , For example, if you have an apple fell to the ground broke, how can effectively mark the broken apple, not to give each apple to be marked.. Thank cesaref for your clarification.. @tmontgomery , I understand your meaning, but I just  unfortunately encountered the situation that the switch not support multicast well. But I thought under the situation, is it reasonable to give way to ip protocol stack? From the angle of the design, should we design more efficiently?. @tmontgomery, I have already changed my switch to support multicast well.. @tmontgomery , I could not use IPC, for my case is one-pub and multi-sub on multi-hosts, for the reason of the switch, I temporarily adjust deployment.. @mjpt777 , In my mind, Spy Subscription is just not copy publication term buffer, without back pressure. It is transparent to the publication, so it is useless.. @mjpt777 , thanks for your quick response, it does work.. The screen is from the share memory imag file.. I use the master trunk version of 2017.6.8.. I have already check recording file content, it's OK. The block position is not fixed.. I add some log, buffer claim is committed.\n\n. The subscriber have already processed term(-1134055397) termOffset(@27c0c0), but why it always send NAK termOffset(@83fa0)?\nThe debug info is below, thanks.\ndebug.txt\n. Stat is below:\n15:12:52 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n===========================\n  0:        1,881,375,360 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,065 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,888 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:12:53 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,375,680 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,075 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,894 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:12:54 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,376,000 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,085 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,900 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:12:55 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,376,320 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,095 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,906 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:12:56 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,376,640 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,105 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,912 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:12:57 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,376,960 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,115 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,918 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:12:58 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,377,280 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,125 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,924 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:12:59 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,377,600 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,135 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,930 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n15:13:00 - Aeron Stat (CnC v7), client liveness 5,000,000,000 ns\n0:        1,881,377,920 - Bytes sent\n  1:        8,368,437,024 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                1,800 - NAKs sent\n  6:                    0 - NAKs received\n  7:               21,109 - Status Messages sent\n  8:                4,633 - Status Messages received\n  9:                6,145 - Heartbeats sent\n 10:               11,909 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                  113 - Flow control under runs\n 13:                  710 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                3,936 - Client keep-alives\n 18:                   16 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - snd-channel: aeron:udp?endpoint=224.110.110.111:8090\n 25:                    0 - snd-pos: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 26:                    0 - snd-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 27:                    0 - pub-lmt: 1 1279736809 65535 aeron:udp?endpoint=224.110.110.111:8090 \n 28:                    1 - snd-channel: aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10\n 29:        1,887,433,888 - snd-pos: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 30:        1,887,436,800 - snd-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n 31:        1,887,433,888 - pub-lmt: 5 1279736810 15 aeron:udp?endpoint=225.0.1.3:40464|interface=192.168.0.10 \n^CExiting...\n. @nitsanw , I use the master trunk version of 2017.6.8. I write a recording control, it read the recording stream and channel list, then call ArchiverConductor's startRecording.. @nitsanw , I have about 8 streams for recording, the publishers is over several machines.. I think about the updating, but I also will locate the bug at the mean time. I will collector more debug information of the media driver.. Is the reason that I had recorded too may data?. 192.168.0.11 debug log, I start recording on the host.\n192.168.0.11.txt\n. 192.168.0.10 debug log.\n192.168.0.10.txt\n. 192.168.0.12 debug log.\n192.168.0.12.txt\n. I use 225.0.1.3 multicast address to send data information, use 224.110.110.111 to send topology information.. I send various messages, length from 1.3mb to 200Bytes. The frequency of the different messages is different.. My code is shared below.\naeron-master-07-06.zip\n. @mjpt777 , Could you help see this problem? Thanks.. No,  I haven't update to the latest version of master, I plan to update after the new release version come out. I thought the problem had no relationship with the version. When offer failed, I would tried 5 times to retry. I found when the retring is serious, the problem would occured more possibly.. I will change to use no reliability way to see if the problem will occured.. In 192.168.0.11 debug log, at line 52088, check timeout, and close the archiver. I see the CMD_IN_KEEPALIVE_CLIENT is always recorded, how to find the responding Client of the Recorder?. ",
    "bedding": "The sub/pub pattern is like,\n```\nclass A\n{\n    std::shared_ptr pub;\n    std::shared_ptr sub1; // subscribe to B::pub1\n    std::shared_ptr sub2; // subscribe to B::pub2\n};\nclass B\n{\n    std::shared_ptr sub;\n    std::shared_ptr pub1;\n    std::shared_ptr pub2;\n};\n```\nInstances of class A and B are created/deleted occasionally, but they are always deleted as a pair. The above commit did fix it for me. Thanks a lot!. Thank you very much for the timely reply! I think I need to explain the way my test works a little further because I don't think the problem I've seen is related to back pressure, yet I do need to dig into how flow control works.\nIn my test, the publisher first puts 500k objects onto an IPC stream by calling offer(), it counts the number of successful calls, which is the actual number of objects sent. The number, say N, is usually less than 500k because of back pressure, but there are still a few hundred thousands of them. Then it tells the subscriber, \"Hey! I published N objects for you.\". Then the subscriber will go head to poll from the IPC stream. And I'm measuring how fast I can poll these N objects in order to make sure the subscriber can do a certain amount of work before a given deadline. It turns out the number on my side is at least 200ms for a couple of hundred k objects, which is definitely not suitable for my use case. So I am wondering if where is better configuration or a different way to use Aeron to make it more efficient?\nP.s. I think the default term length is 64MB for IPC, correct me if I'm wrong.. Could you point me to docs that explain how flow control works in Aeron? Most of them I found on the Wiki are about back pressure, and not very much in detail.\nI forgot to mention in my previous reply that I'm also counting how many fragments received on the subscriber side and make sure it matches N, which is the number of successful send. In addition, the subscriber will not start polling until the publisher finishes all the offer() calls and tells it it's good to go. So I'm expecting that at the point when polling starts, the data should be already on the stream. I'm only timing on how long the polling takes, not the time of receiver busy waiting more data to come. I expected the polling will be super fast because the data are already there, I'm confused on where the latency could come from.\nI also tried your recommended settings, I didn't see much different in the stats.\n. The test was ran on a workstation with 32-cores cpu and about 50GB memory. But what I'm trying to do is just publishing a bunch of objects every certain period of time, and then let the subscriber to pull them down and do some work. Although the publisher and subscriber may be on different thread, they need not to be, I don't see any correlation with concurrency problem with what I saw from my test. \nThe point is if polling 500k objects that are already in the buffer (as I think it is) always takes so long, even if I make the publisher and the subscriber running fully concurrently, the subscriber could still never finish its work on time (should be way less than 380ms).\nI did count the timing of my fragment handler callback, as you can see from the original post. It only takes about a few hundreds of microseconds. . + Timer implementation\n```cpp\nclass Timer\n{\npublic:\n    inline void Start()\n    {\n        m_start = std::chrono::high_resolution_clock::now();\n    }\ninline std::int64_t Stop()\n{\n    auto end = std::chrono::high_resolution_clock::now();\n    auto timeElapsed = end - m_start;\n    return std::chrono::duration_cast<std::chrono::microseconds>(timeElapsed).count();\n}\n\nprivate:\n    std::chrono::high_resolution_clock::time_point m_start;\n};\nvoid FragmentHandler(aeron::concurrent::AtomicBuffer &buffer, aeron::util::index_t offset,\n                     aeron::util::index_t length, aeron::Header &header, \n                     std::int64_t& handlerTime)\n{\n    Timer timer;\n    timer.Start();\n// do stuff\n\nhandlerTime += timer.Stop();\n\n}\n// Receive() is not called until all objects are sent.\nvoid Receive(std::shared_ptr sub, int numberOfObjects)\n{\n    Timer timer;\n    timer.Start();\nstd::int64_t handlerTime = 0;\n\naeron::fragment_handler_t handler = std::bind(FragmentHandler,\n                                              std::placeholders::_1, std::placeholders::_2,\n                                              std::placeholders::_3, std::placeholders::_4,\n                                              std::ref(handlerTime));\n\nfor (int i = 0; i < numberOfObjects; )\n{\n    // change the number here doesn't help much on performance\n    int objectRead = sub.poll(handler, 1);\n    i+= objectRead;\n}\n\nauto duration = timer.Stop();\n\nstd::cout << handlerTime << \", \" << duration << \", \" \n   << double(handlerTime) / duration << std::endl;\n\n}\n```\n. So the timer inside fragment handler was added because I found the performance issue without timing the cb itself... I removed it and tried again, the time didn't shrink much.. The hardware that is running this test is an AWS EC2 c3.8xlarge instance. From a different point of view, the test is just doing memory copying of 20MB of data each time, given the fact that IPC streaming is using shared memory. I can't image that can take 380ms.\n. I probably can't post the all the code here because there are so many of them. But main loop is very similar this,\n```cpp\nint main(int argc, char** argv)\n{\n    // ...initialize Aeron stuff...\n    while (true)\n    {\n        int objectsSent = 0\n        for (int i = 0; i < 5000000; i++)\n        {\n            std::uint8_t buffer[20];\n            // ...wrap it in AtomicBuffer...\n            if (pub.offer(atomicBuffer) > 0)\n            {\n                objectsSent++;\n            }\n        }\n    Receive(objectsSent);\n}\n\nreturn 0;\n\n}\n```\n. Dug into the API for a bit. Looks like I need to call addPublication/addSubscription to pass in the new size. As far as I can tell from the name of these two functions, they are going to create a new stream. So what's happening under the hood if I call addPublication on an existing stream and give it a new term buffer size? Does it close the old stream and create a new one? If not, how does it resize the buffer?\n By extending the existing buffer or reallocating a new one? And what will happen to the data in the buffer that has not been consumed by the subscriptions?\nSorry about so many questions ^_^ Response will be highly appreciated!!. Thank you for the reply! I will use a different approach to solve the problem.. Yes it is Java media driver. Following is from the error log,\n```\n\n1 observations from 2017-08-21 21:30:42.287+0000 to 2017-08-21 21:30:42.287+0000 for:\n java.lang.IllegalArgumentException: Negative size\n        at sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:865)\n        at io.aeron.driver.buffer.MappedRawLog.(MappedRawLog.java:63)\n        at io.aeron.driver.buffer.RawLogFactory.newInstance(RawLogFactory.java:154)\n        at io.aeron.driver.buffer.RawLogFactory.newIpcPublication(RawLogFactory.java:124)\n        at io.aeron.driver.DriverConductor.newIpcPublicationLog(DriverConductor.java:798)\n        at io.aeron.driver.DriverConductor.addIpcPublication(DriverConductor.java:1038)\n        at io.aeron.driver.DriverConductor.getOrAddIpcPublication(DriverConductor.java:1025)\n        at io.aeron.driver.DriverConductor.onAddIpcPublication(DriverConductor.java:506)\n        at io.aeron.driver.DriverAdapter.addPublication(DriverAdapter.java:198)\n        at io.aeron.driver.DriverAdapter.onMessage(DriverAdapter.java:89)\n        at org.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:158)\n        at io.aeron.driver.DriverAdapter.receive(DriverAdapter.java:68)\n        at io.aeron.driver.DriverConductor.doWork(DriverConductor.java:146)\n        at org.agrona.concurrent.CompositeAgent.doWork(CompositeAgent.java:79)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:140)\n        at java.lang.Thread.run(Thread.java:748)\n1 distinct errors observed.\n```. Thank you for the quick reply!\nThe reason is that I need to send certain amount of fragments before the subscriber polls. I want to guarantee that these fragments are received as a whole by the subscriber, in another word, the subscriber get everything at a time or nothing. I don't want it to poll partial data and wait for the publisher to send more. The Publication is used only from a single thread.\nAn alternative way to solve my problem is letting the subscriber dismiss the partial data it received. But it would be more efficient to determine the size in advance.\n. I can give it a try. Just FYI, the hardware is a c4.8xlarge AWS EC2 instance.. So I ran jHiccup by attaching it to the media driver. Following is the generated diagram,\n\nThe gap the the beginning is because the test has been running for a while before I attach jhiccup to the driver process.\n. It is the problem of the aeron directory I used with the test! I set it to be under a regular file system not tmpfs. I have it point to /dev/shm and I'm not seeing any spikes now. Thanks for the help!. Thanks for the clarification. I didn't find isConnected in Subscription though. Is it guaranteed that the subscriber can receive the message when isConnected() is true and offer() has succeeded? Is it possible that the subscriber can still miss the message?. Hey, I am still seeing message lost with udp stream with your suggestions. I used isConnected() function to check connectivity before offering anything with publication. I also checked image count on the subscription and I am pretty sure that both media drivers recognized each other. \nTo make sure that messages can be delivered, I sent a connection ack message to the stream before sending any real data. And the ack message can always be received. However, my real data got lost very frequently, although it's not happening every time. And in this case, the offer call was always successful with return value greater than 1.\nWhat may go wrong?. These are the Aeron counters and error logs from both the peers in Setup 2.\nPeer 1 stopped running at the time it received the duplicate message from 6 hours ago, while Peer 2 continued to run. This is why Peer 2 has about double the number of bytes sent than received.\nPeer 1 - c4.8xl\n22:21:24 - Aeron Stat\n=========================\n  0:          392,528,864 - Bytes sent\n  1:          394,128,864 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                  329 - NAKs sent\n  6:                  326 - NAKs received\n  7:              292,610 - Status Messages sent\n  8:              292,350 - Status Messages received\n  9:              578,811 - Heartbeats sent\n 10:              579,149 - Heartbeats received\n 11:                  326 - Retransmits sent\n 12:                  266 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                  164 - Errors\n 16:                    0 - Short sends\n 17:               58,805 - Client keep-alives\n 18:                    3 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\nPeer 2 - c3.8xl\n22:23:04 - Aeron Stat\n=========================\n  0:          628,843,744 - Bytes sent\n  1:          393,384,800 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                  326 - NAKs sent\n  6:                  329 - NAKs received\n  7:              292,455 - Status Messages sent\n  8:              292,497 - Status Messages received\n  9:            7,958,441 - Heartbeats sent\n 10:              578,795 - Heartbeats received\n 11:                  329 - Retransmits sent\n 12:                   85 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                   94 - Errors\n 16:                    0 - Short sends\n 17:              794,353 - Client keep-alives\n 18:                    8 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\nPeer 1 Errors\n``\n **This IllegalArgumentException is known caused by us due to incorrect endpoint specification**\n Commandn Control file /dev/shm/remote-test/cnc.dat\n\n5 observations from 2017-11-23 03:56:53.287+0000 to 2017-11-23 04:03:09.393+0000 for:\n io.aeron.driver.exceptions.InvalidChannelException: java.lang.IllegalArgumentException: Invalid format: 10.2.100.65:8155[\n        at io.aeron.driver.media.UdpChannel.parse(UdpChannel.java:173)\n        at io.aeron.driver.DriverConductor.onAddNetworkPublication(DriverConductor.java:297)\n        at io.aeron.driver.ClientCommandAdapter.addPublication(ClientCommandAdapter.java:225)\n        at io.aeron.driver.ClientCommandAdapter.onMessage(ClientCommandAdapter.java:85)\n        at org.agrona.concurrent.ringbuffer.ManyToOneRingBuffer.read(ManyToOneRingBuffer.java:158)\n        at io.aeron.driver.ClientCommandAdapter.receive(ClientCommandAdapter.java:64)\n        at io.aeron.driver.DriverConductor.doWork(DriverConductor.java:143)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\nCaused by: java.lang.IllegalArgumentException: Invalid format: 10.2.100.65:8155[\n        at io.aeron.driver.media.SocketAddressUtil.parse(SocketAddressUtil.java:64)\n        at io.aeron.driver.media.UdpChannel.getEndpointAddress(UdpChannel.java:431)\n        at io.aeron.driver.media.UdpChannel.parse(UdpChannel.java:96)\n        ... 9 more\n\n109 observations from 2017-11-23 04:04:44.412+0000 to 2017-11-23 12:04:45.136+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:163)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n38 observations from 2017-11-23 04:34:44.461+0000 to 2017-11-23 12:04:45.137+0000 for:\n java.net.SocketException: Message too long\n        at sun.nio.ch.DatagramChannelImpl.receive0(Native Method)\n        at sun.nio.ch.DatagramChannelImpl.receiveIntoNativeBuffer(DatagramChannelImpl.java:414)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:392)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:345)\n        at io.aeron.driver.media.UdpChannelTransport.receive(UdpChannelTransport.java:252)\n        at io.aeron.driver.media.ControlTransportPoller.poll(ControlTransportPoller.java:136)\n        at io.aeron.driver.media.ControlTransportPoller.pollTransports(ControlTransportPoller.java:78)\n        at io.aeron.driver.Sender.doWork(Sender.java:95)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n12 observations from 2017-11-23 07:54:44.765+0000 to 2017-11-23 11:54:45.122+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:168)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n4 distinct errors observed.\n```\nPeer 2 Errors\n``\n Commandn Control file /dev/shm/crossbox-test-2/cnc.dat\n\n8 observations from 2017-11-23 04:04:45.379+0000 to 2017-11-23 11:34:46.081+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:168)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n85 observations from 2017-11-23 04:14:45.395+0000 to 2017-11-23 12:04:46.128+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:163)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n1 observations from 2017-11-23 08:44:45.822+0000 to 2017-11-23 08:44:45.822+0000 for:\n java.net.SocketException: Message too long\n        at sun.nio.ch.DatagramChannelImpl.receive0(Native Method)\n        at sun.nio.ch.DatagramChannelImpl.receiveIntoNativeBuffer(DatagramChannelImpl.java:414)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:392)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:345)\n        at io.aeron.driver.media.UdpChannelTransport.receive(UdpChannelTransport.java:252)\n        at io.aeron.driver.media.ControlTransportPoller.poll(ControlTransportPoller.java:136)\n        at io.aeron.driver.media.ControlTransportPoller.pollTransports(ControlTransportPoller.java:78)\n        at io.aeron.driver.Sender.doWork(Sender.java:95)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n```. Message length is 6 bytes\n- The size of the data message is 16 bytes, although it's still within the 32-bytes alignment.\nIf my math is correct, then 6 hours at 1000 msgs per 10 seconds gives message total of 2160000. Does that match what was intended?\n- Your math is right. The problematic sequence number received was 1188215 from Peer 2 by Peer 1 on which the assertion failed, it was expecting 2922791.\nsequence number is not incrementing by 1 on control stream! expecting: 2922791, received: 1188215\nany changes to default config on the media driver?\n- No\nthe AeronStat output is great. Would be really good if you could happen to have caught the stream positions of the individual pubs/subs. These would help a lot.\n- Unfortunately I don't have stream positions captured for this test run.. I did another test run with Setup 2. However, this time Peer 2 received a sequence number that looks like from the future,\nsequence number is not incrementing by 1 on data stream! expecting: 381343, received: 883279\nI would suggest that you run the code ConnectionSample.cpp since I can reproduce it every test run.\nI also captured stream position every minute with the test run and dumped the debug logs of media drivers to files.\nI looked at @<xxx> in Aeron stats of both Peer 1 and 2, the number is always 0\nPeer 1\n25:              128,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:              127,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:              512,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:              511,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:              896,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:              895,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            1,280,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            1,279,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            1,664,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            1,663,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            2,048,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            2,047,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            2,432,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            2,431,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            2,816,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            2,815,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            3,200,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            3,199,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            3,584,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            3,583,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            3,968,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            3,967,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            4,352,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            4,351,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            4,736,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            4,735,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            5,120,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            5,119,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            5,504,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            5,503,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            5,888,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            5,887,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            6,272,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            6,271,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            6,656,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            6,655,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            7,040,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            7,039,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            7,424,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            7,423,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            7,808,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            7,807,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            8,192,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            8,191,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            8,576,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            8,575,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            8,960,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            8,959,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            9,344,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            9,343,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:            9,728,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:            9,727,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           10,112,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           10,111,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           10,496,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           10,495,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           10,880,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           10,879,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           11,264,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           11,263,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           11,648,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           11,647,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           12,032,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           12,031,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           12,416,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           12,415,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           12,800,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           12,799,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           13,184,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           13,183,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           13,568,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           13,567,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           13,952,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           13,951,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           14,336,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           14,335,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           14,720,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           14,719,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           15,104,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           15,103,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           15,488,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           15,487,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           15,872,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           15,871,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           16,256,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           16,255,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           16,640,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           16,639,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           17,024,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           17,023,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           17,408,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           17,407,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           17,792,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           17,791,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           18,176,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           18,175,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           18,560,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           18,559,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           19,008,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           19,007,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           19,392,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           19,391,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           19,776,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           19,775,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           20,160,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           20,159,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           20,544,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           20,543,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           20,928,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           20,927,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           21,312,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           21,311,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           21,696,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           21,695,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           22,080,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           22,079,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           22,464,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           22,463,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           22,848,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           22,847,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           23,232,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           23,231,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           23,616,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           23,615,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           24,000,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           23,999,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\n 25:           24,384,192 - sub-pos: 1 911199284 10 aeron:udp?endpoint=peer-1:40555 @0\n 35:           24,383,936 - sub-pos: 5 911199285 60 aeron:udp?endpoint=peer-1:40555 @0\nPeer 2\n29:              128,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:              127,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:              512,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:              511,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:              896,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:              895,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            1,280,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            1,279,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            1,664,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            1,663,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            2,048,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            2,047,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            2,496,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            2,495,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            2,880,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            2,879,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            3,264,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            3,263,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            3,648,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            3,647,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            4,032,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            4,031,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            4,416,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            4,415,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            4,800,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            4,799,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            5,184,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            5,183,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            5,568,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            5,567,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            5,952,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            5,951,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            6,336,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            6,335,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            6,720,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            6,719,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            7,104,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            7,103,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            7,488,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            7,487,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            7,872,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            7,871,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            8,256,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            8,255,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            8,640,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            8,639,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            9,024,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            9,023,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            9,408,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            9,407,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:            9,792,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:            9,791,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           10,176,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           10,175,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           10,560,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           10,559,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           10,944,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           10,943,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           11,328,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           11,327,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           11,712,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           11,711,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           12,096,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           12,095,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           12,480,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           12,479,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           12,864,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           12,863,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           13,248,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           13,247,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           13,632,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           13,631,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           14,016,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           14,015,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           14,400,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           14,399,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           14,784,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           14,783,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           15,168,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           15,167,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           15,552,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           15,551,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           15,936,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           15,935,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           16,320,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           16,319,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           16,704,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           16,703,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           17,088,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           17,087,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           17,472,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           17,471,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           17,856,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           17,855,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           18,240,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           18,239,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           18,624,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           18,623,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           19,008,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           19,007,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           19,392,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           19,391,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           19,776,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           19,775,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           20,160,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           20,159,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           20,544,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           20,543,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           20,928,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           20,927,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           21,312,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           21,311,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           21,696,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           21,695,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           22,080,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           22,079,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           22,528,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           22,527,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           22,912,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           22,911,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           23,296,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           23,295,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           23,680,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           23,679,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           24,064,000 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           24,063,936 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\n 29:           24,396,032 - sub-pos: 1 1770702311 10 aeron:udp?endpoint=peer-2:40556 @0\n 32:           24,405,888 - sub-pos: 3 1770702312 50 aeron:udp?endpoint=peer-2:40556 @0\nErrors from Peer 1\n``\n28 io.aeron.samples.ErrorStat\nCommandn Control file /dev/shm/remote-test-11-28/cnc.dat\n\n10 observations from 2017-11-28 04:19:25.679+0000 to 2017-11-28 05:09:25.769+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:163)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n```\nErrors from Peer 2\n``\nCommandn Control file /dev/shm/remote-test-11-28/cnc.dat\n\n9 observations from 2017-11-28 04:19:25.017+0000 to 2017-11-28 05:09:25.099+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:163)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n1 observations from 2017-11-28 04:39:25.048+0000 to 2017-11-28 04:39:25.048+0000 for:\n java.net.SocketException: Message too long\n        at sun.nio.ch.DatagramChannelImpl.receive0(Native Method)\n        at sun.nio.ch.DatagramChannelImpl.receiveIntoNativeBuffer(DatagramChannelImpl.java:414)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:392)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:345)\n        at io.aeron.driver.media.UdpChannelTransport.receive(UdpChannelTransport.java:252)\n        at io.aeron.driver.media.ControlTransportPoller.poll(ControlTransportPoller.java:136)\n        at io.aeron.driver.media.ControlTransportPoller.pollTransports(ControlTransportPoller.java:78)\n        at io.aeron.driver.Sender.doWork(Sender.java:95)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n1 observations from 2017-11-28 05:09:25.098+0000 to 2017-11-28 05:09:25.098+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:168)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n3 distinct errors observed.\n```\nThe full logs are included here\naeron-stats-debug-logs.zip\nAeron stats and counters are in\n- RunAeronStat.2017-11-28.0-peer-1.log\n- RunAeronStat.2017-11-28.0-peer-2.log\nMedia driver debug logs are in\n- run-md-with-debug-peer-1.out\n- run-md-with-debug-peer-2.out\n. That was because when I started the test client application, I gave it an endpoint that happened to contain a wrong character at the end. After I fixed the endpoint, it worked fine.. java version \"1.8.0_144\"\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode). The MTU should be the default. I can try change it to 1400.\n. Sorry about close and reopen the issue. I was going to leave a comment but pressed the wrong button.. I will definitely try to run it with your latest changes.\nAlso a few more questions. Have you been able to reproduce the the problem? Did you run the test from two boxes? Was it running on EC2 instances? I'm asking because till now we can consistently reproduce it with Setup 2.. I don't think this can be reproduced on a single box. We didn't see this happen with Setup 1, which is running two instances of ConnectionSample with each of them connecting to a media driver. I highly doubt a single stream test can capture this case.\nI'm also curious about which part of the ConnectionSample can be a potential cause of the problem?. I was not able to reproduce the problem with Setup 1, but I saw it every time with Setup 2. And the test from yesterday showed that Peer 1 received garbage instead of a duplicate message.\nsequence number is not incrementing by 1 on control stream! expecting: 90087, received: 2922919\nI am going to test it again with MTU=1400 and the latest commit. Will let you know as soon as I can.. I changed configuration of MTU to 1400 and got this exception:\nException in thread \"main\" io.aeron.driver.exceptions.ConfigurationException: mtuLength must be a multiple of FRAME_ALIGNMENT: 1400\n        at io.aeron.driver.Configuration.validateMtuLength(Configuration.java:1025)\n        at io.aeron.driver.MediaDriver$Context.conclude(MediaDriver.java:468)\n        at io.aeron.driver.MediaDriver.<init>(MediaDriver.java:105)\n        at io.aeron.driver.MediaDriver.launch(MediaDriver.java:218)\n        at io.aeron.driver.MediaDriver.launch(MediaDriver.java:207)\n        at io.aeron.driver.MediaDriver.main(MediaDriver.java:83)\nCommand to start media driver that causes the above error\nVERSION=`cat version.txt`\njava -cp aeron-samples/build/libs/samples.jar \\\n-javaagent:aeron-agent/build/libs/aeron-agent-${VERSION}-all.jar \\\n        -Daeron.event.log=all \\\n        -Daeron.dir=/dev/shm/remote-test-11-29-1 -Daeron.mtu.length=1400\\\n        io.aeron.driver.MediaDriver\nAnd then I changed -Daeron.mtu.length=1400 to -Daeron.mtu.length=1024, it worked fine.. I'm running the test with MTU=1024, so far I have not encountered the issue. However, I start to see the same error messages from ErrorStat on Peer 2. (No error occurred on Peer 1 so far)\n``\nCommandn Control file /dev/shm/remote-test-11-29-1/cnc.dat\n\n29 observations from 2017-11-29 20:17:56.753+0000 to 2017-11-29 22:08:38.944+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:163)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n2 observations from 2017-11-29 21:38:18.342+0000 to 2017-11-29 21:48:18.535+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.sendData(NetworkPublication.java:492)\n        at io.aeron.driver.NetworkPublication.send(NetworkPublication.java:248)\n        at io.aeron.driver.Sender.doSend(Sender.java:168)\n        at io.aeron.driver.Sender.doWork(Sender.java:89)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n3 observations from 2017-11-29 21:48:18.534+0000 to 2017-11-29 21:58:28.744+0000 for:\n java.net.SocketException: Message too long\n        at sun.nio.ch.DatagramChannelImpl.receive0(Native Method)\n        at sun.nio.ch.DatagramChannelImpl.receiveIntoNativeBuffer(DatagramChannelImpl.java:414)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:392)\n        at sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:345)\n        at io.aeron.driver.media.UdpChannelTransport.receive(UdpChannelTransport.java:252)\n        at io.aeron.driver.media.ControlTransportPoller.poll(ControlTransportPoller.java:136)\n        at io.aeron.driver.media.ControlTransportPoller.pollTransports(ControlTransportPoller.java:78)\n        at io.aeron.driver.Sender.doWork(Sender.java:95)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n\n1 observations from 2017-11-29 21:48:18.536+0000 to 2017-11-29 21:48:18.536+0000 for:\n java.io.IOException: Message too long\n        at sun.nio.ch.DatagramDispatcher.write0(Native Method)\n        at sun.nio.ch.DatagramDispatcher.write(DatagramDispatcher.java:51)\n        at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)\n        at sun.nio.ch.IOUtil.write(IOUtil.java:51)\n        at sun.nio.ch.DatagramChannelImpl.write(DatagramChannelImpl.java:605)\n        at io.aeron.driver.media.SendChannelEndpoint.send(SendChannelEndpoint.java:195)\n        at io.aeron.driver.NetworkPublication.resend(NetworkPublication.java:320)\n        at io.aeron.driver.RetransmitHandler.onNak(RetransmitHandler.java:96)\n        at io.aeron.driver.NetworkPublication.onNak(NetworkPublication.java:361)\n        at io.aeron.driver.media.SendChannelEndpoint.onNakMessage(SendChannelEndpoint.java:270)\n        at io.aeron.driver.media.ControlTransportPoller.poll(ControlTransportPoller.java:146)\n        at io.aeron.driver.media.ControlTransportPoller.pollTransports(ControlTransportPoller.java:78)\n        at io.aeron.driver.Sender.doWork(Sender.java:95)\n        at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:233)\n        at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:159)\n        at java.lang.Thread.run(Thread.java:748)\n4 distinct errors observed.\n```. @mjpt777 Pulling latest changes takes time and we wanted to kick off a test as quickly as possible to see if changing the MTU setting could yield difference results.\nWe haven't seen the either peer from the test started yesterday aborted yet. The error count on Peer 2 still increases, and errors are all (java.io.IOException: Message too long)\n. Till today we have not see any error (include Aeron errors and ConnectionSample errors) with @dillonhicks 's test setup on EC2. \nTo figure out if the errors I have seen is related to MTU, I ran tracepath between my two peers, and it seems that the path MTU is only 1500 on the first hop, although the link MTU is 9001. This might be the cause of message drop and corruption and probably can explain why the error didn't happen when MTU is set to 1024 bytes. This also could be the reason of Jave errors \"Message too long\" in Media Driver error logs.\n% tracepath -n 10.2.100.65\n1?: [LOCALHOST]     pmtu 9001\n 1:  10.184.160.1      0.089ms pmtu 1500\n 1:  169.254.249.29    0.381ms \n 2:  169.254.1.149     0.336ms asymm  3 \n 3:  169.254.1.149     0.548ms \n 4:  169.254.2.15      0.371ms asymm  3 \n 5:  10.2.100.65       0.396ms reached\nAlso we compared settings of socket receive buffer size on our instances. Mine is only 212992 bytes (default value) while that of @dillonhicks 's is 16MB. Since the ConnectionSample is sending messages on bursts, this could caused resource exhaustion where the OS may start to drop udp packets.\nThis mine\n% sysctl net.core.rmem_max\nnet.core.rmem_max = 212992\nAnd this is from @dillonhicks\n% sysctl net.core.rmem_max\nnet.core.rmem_max = 16777216\nAnd one more evidence that suggests messages might get corrupted at OS level is that there are a lot of packets receive errors on my instances in netstat\n% netstat -us\nIcmpMsg:                                     \n    InType3: 111269                          \n    InType8: 132                             \n    InType11: 10                             \n    InType13: 34                             \n    InType17: 37                             \n    OutType0: 132                            \n    OutType3: 428251                         \n    OutType14: 34                            \nUdp:                                         \n    162003376 packets received               \n    7441502 packets to unknown port received.\n    1338543 packet receive errors            \n    148505188 packets sent                   \n    RcvbufErrors: 1338538                    \n    InCsumErrors: 4                          \n    IgnoredMulti: 11361                      \nUdpLite:                                     \nIpExt:                                       \n    InMcastPkts: 32405                       \n    OutMcastPkts: 32489                      \n    InOctets: 138564063334                   \n    OutOctets: 294452607843                  \n    InMcastOctets: 23483876                  \n    OutMcastOctets: 23487236                 \n    InNoECTPkts: 246087118                   \n    InECT0Pkts: 17639\nSince the ConnectionSample has been running for approximately 13 days(started since 12/2) without any error, we are going to close this issue for now and will let you know if we discover anything new.\nThank you very much for the help! . As far as I know, poll() checks frameLength from the term buffer to determine whether new fragment has arrived. How would you recommend to implement this blocking API if we wanted to do it ourselves?. ",
    "tnjohansson": "Hi, we are seeing the same issue but in our own code (i.e. not the ping-pong test). I don't think we have seen this issue with previous versions of Aeron. We are currently on version 1.2.4.\n2017-04-20T11:16:36.493+0200: 4738.752: [GC (Allocation Failure) [PSYoungGen: 759997K->9103K(789504K)] 1069811K->318941K(1545216K), 0.0160098 secs] [Times: user=0.02 sys=0.00, real=0.01 secs]\nUncaught error from thread [Valo-cluster.presence.dispatcher-9] shutting down JVM since 'akka.jvm-exit-on-fatal-error' is enabled for ActorSystem[Valo]\njava.lang.InternalError: a fault occurred in a recent unsafe memory access operation in compiled Java code\n        at io.aeron.Publication.offer(Publication.java:335)\n        at io.aeron.Publication.offer(Publication.java:311)\n        at com.itrsgroup.cluster.PublicationLogic$class.offer(PublicationLogic.scala:119)\n        at com.itrsgroup.cluster.InstrumentedPublication.offer(InstrumentedPublication.scala:20)\n        at com.itrsgroup.cluster.PublicationLogic$class.offer(PublicationLogic.scala:97)\n        at com.itrsgroup.cluster.InstrumentedPublication.offer(InstrumentedPublication.scala:20)\n        at com.itrsgroup.cluster.network.PresenceActor$$anonfun$receive$1$$anonfun$applyOrElse$9.apply(PresenceActor.scala:143)\nOur setup is;\nOS: CentOS Linux 7 (Core)\nOS Arch: amd64\nJava Version: 1.8.0_51\nWe are trying to replicate with a smaller test and will keep you posted if we make progress.. ",
    "rfernandes": "Centos7 (7.3.1611) with GCC 6.3.0\nAeron 1.2.5 C++ lib, statically linked.\nI'll also include the bt for the BasicSubscriber:\n```\nProgram received signal SIGBUS, Bus error.\n(bt)\n0  getInt32Volatile (offset=, this=) at (...)/AtomicBuffer.h:251\n1  frameLengthVolatile (frameOffset=, logBuffer=...) at (...)/logbuffer/FrameDescriptor.h:142\n2  read (exceptionHandler=..., header=..., fragmentsLimit=, handler=..., termOffset=, termBuffer=..., outcome=...) at (...)/logbuffer/TermReader.h:84\n3  poll (fragmentLimit=, fragmentHandler=..., this=) at (...)/include/Image.h:313\n4  poll (fragmentLimit=, fragmentHandler=..., this=) at (...)/include/Subscription.h:116\n5  main (argc=-268432584, argv=0xe80) at (...)/BasicSubscriber.cpp:137\n```\nPlease let me know if you require additional information.. Unfortunately it would not be easy to test GCC 5 on the current setup but I would be able to test with with GCC4. I'll look into it time permitting.\nIn the meanwhile here's some more information, let me know if I should dig deeper in any of this.\nKernel:\n3.10.0-514.6.1.el7.x86_64 (Centos 7)\nJava:\njava version \"1.8.0_131\"\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\nThe gdb address that triggers the SIGBUS shows as being mapped to a deleted section\n0x7fffecfff000     0x7ffff0000000  0x3001000        0x0 /dev/shm/(...)/publications/UDP-00000000-0-7f000001-40123-6F0238F2-A-1.logbuffer (deleted)\nUnder normal operation running lsof on the that file lists both the media-driver and the publisher.\nRunning the media driver under strace does show that file being unlinked when the media-driver process exits. No notable syscalls happen on the producer. \nI'm assuming the file should be refcounted and thus should not show as deleted on the client side. However none of this explains why it's only happening with the cpp pub/sub.. Yes, I tried it out with the new version as well. Same thing happens for INT TERM and KILL. Haven't tried others.. Appologies for the hiatus, I've been focusing on other tasks.\nI was able to verify that the examples do work as expected under a more recent enviroment, namely Archlinux with a kernel 4.11.3 and gcc 7.1.1.\nI'm therefore inclined to suspect the kernel, moreso than the compiler. I probably won't be able to test any other kernels on the CentOs side of things, though I might be able to upgrade the compiler to 7.1.1.. ",
    "neekolashall": "@mjpt777 Thanks for the quick response.  I can verify that the fix to the StatusMessageFlyweight has stopped it causing a JVM crash.  I did however hit one further alignment issue when starting the MediaDriver in the CncFileDescriptor which also causes a JVM crash.  It looks like the CLIENT_LIVENESS_TIMEOUT_FIELD_OFFSET needs a 4 byte pad, but this would break the CnC compatibility and would need to follow your version strategy I expect.  \nTRANSFORM org.agrona.concurrent.UnsafeBuffer\nTRANSFORM io.aeron.protocol.DataHeaderFlyweight\nTRANSFORM io.aeron.protocol.HeaderFlyweight\nTRANSFORM io.aeron.protocol.SetupFlyweight\nTRANSFORM io.aeron.protocol.RttMeasurementFlyweight\nTRANSFORM io.aeron.protocol.NakFlyweight\nTRANSFORM io.aeron.protocol.StatusMessageFlyweight\nException in thread \"main\" org.agrona.agent.BufferAlignmentException: Unaligned 8-byte access (Index=20, Buffer Alignment Offset=0)\n        at org.agrona.agent.BufferAlignmentInterceptor$Verifier.verifyAlignment(BufferAlignmentInterceptor.java:35)\n        at org.agrona.concurrent.UnsafeBuffer.putLong(UnsafeBuffer.java:370)\n        at io.aeron.CncFileDescriptor.fillMetaData(CncFileDescriptor.java:159)\n        at io.aeron.driver.MediaDriver$Context.conclude(MediaDriver.java:557)\n        at io.aeron.driver.MediaDriver.<init>(MediaDriver.java:164)\n        at io.aeron.driver.MediaDriver.launch(MediaDriver.java:274)\n        at io.aeron.driver.MediaDriver.launch(MediaDriver.java:263)\n        at io.aeron.driver.MediaDriver.main(MediaDriver.java:137)\nI attempted a local patch just to see how far I could get and manged to start the MediaDriver start without ByteBuddy errors and errors reported by ErrorStat.  Unfortunately none of the client's can seem to connect to the media driver.  They get a timeout talking to the driver when creating a publication (I just ran the sample program io.aeron.samples.StreamingPublisher).  The same patch works without issue on Windows, so I wonder if I'm now encountering some other unique platform issue with Solaris/sparc.  I'm not sure what the next steps to debug would be, or if I'm starting to enter rabbit hole territory here.\nException in thread \"main\" io.aeron.exceptions.DriverTimeoutException: No response from driver within timeout\n        at io.aeron.ClientConductor.awaitResponse(ClientConductor.java:478)\n        at io.aeron.ClientConductor.addPublication(ClientConductor.java:187)\n        at io.aeron.Aeron.addPublication(Aeron.java:197)\n        at io.aeron.samples.StreamingPublisher.main(StreamingPublisher.java:79)\n. Thanks again for the quick response.  The media driver now operates without any alignment issues or crashes.  \nI have a residual issue where the clients are still not able to talk to the media driver (embedded or run in a separate JVM).  After tracing system calls and pmap/pfiles the memory mapped files appear to be created without issue but the DriverProxy times out waiting for the response when creating a publication.  The MediaDriver doesn't see the publication message (or any messages) and I experience the DriverTimeoutException as above.  \nAt this point I'm looking at retreating and finding another strategy to share some Redhat x86_64 Kit.  I get the feeling there are a range of other platform issues unique to sparc waiting to be found.  I'm happy to simply accept and close this ticket as the alignment fixes are generally applicable and useful.. Thanks, I\u2019ll give this a test tomorrow.  Out of interest what other big endian architecture did you resolve this for?. @mjpt777 I ran against a current snapshot (f53dab6195a1147dea720543cec92404172ff831) and encountered a jvm crash.  It seems that there are some new byte alignment issues that have crept into the codebase.  \n`$ java -cp aeron-all-1.10.6-SNAPSHOT.jar io.aeron.driver.MediaDriver\nWARNING: /var/tmp/aeron-adm_nh7 already exists.\nINFO: Aeron CnC file exists: /var/tmp/aeron-adm_nh7/cnc.dat\nINFO: Aeron toDriver consumer heartbeat is (ms): 38815\nWARNING: Existing errors saved to: 2018-08-22-09-17-26-145+1000-error.log\nA fatal error has been detected by the Java Runtime Environment:\nSIGBUS (0xa) at pc=0xffffffff7dd77d8c, pid=18330, tid=0x0000000000000046\nJRE version: Java(TM) SE Runtime Environment (8.0_151-b12) (build 1.8.0_151-b12)\n Java VM: Java HotSpot(TM) 64-Bit Server VM (25.151-b12 mixed mode solaris-sparc compressed oops)\n Problematic frame:\n V  [libjvm.so+0xd77d8c]  Unsafe_SetInt+0x168\nCore dump written. Default location: /tmp/aeron-dist/core or core.18330\nAn error report file with more information is saved as:\n /tmp/aeron-dist/hs_err_pid18330.log\nCompiled method (nm)   24553  543     n 0       sun.misc.Unsafe::putInt (native)\n total in heap  [0xffffffff6a54db10,0xffffffff6a54def0] = 992\n relocation     [0xffffffff6a54dc38,0xffffffff6a54dc58] = 32\n main code      [0xffffffff6a54dc60,0xffffffff6a54dee8] = 648\n metadata       [0xffffffff6a54dee8,0xffffffff6a54def0] = 8\n`\nI ran with the media driver with the agrona-agent and it picked up a couple of violations running the BasicPublisher and BasicSubscriber.  There may be more that have been introduced over the past year.\nSubscribing to aeron:udp?endpoint=localhost:40123 on stream Id 10\nException in thread \"main\" io.aeron.exceptions.RegistrationException: errorCodeValue=0 BufferAlignmentException : Unaligned 8-byte access (Index=26, Buffer Alignment Offset=2)\n        at io.aeron.ClientConductor.onError(ClientConductor.java:169)\n        at io.aeron.DriverEventsAdapter.onMessage(DriverEventsAdapter.java:85)\n        at org.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:120)\n        at io.aeron.DriverEventsAdapter.receive(DriverEventsAdapter.java:56)\n        at io.aeron.ClientConductor.service(ClientConductor.java:716)\n        at io.aeron.ClientConductor.awaitResponse(ClientConductor.java:752)\n        at io.aeron.ClientConductor.addSubscription(ClientConductor.java:469)\n        at io.aeron.ClientConductor.addSubscription(ClientConductor.java:443)\n        at io.aeron.Aeron.addSubscription(Aeron.java:269)\n        at io.aeron.samples.BasicSubscriber.main(BasicSubscriber.java:71)\nPublishing to aeron:udp?endpoint=localhost:40123 on stream Id 10\nException in thread \"main\" io.aeron.exceptions.RegistrationException: errorCodeValue=0 BufferAlignmentException : Unaligned 8-byte access (Index=63, Buffer Alignment Offset=7)\n        at io.aeron.ClientConductor.onError(ClientConductor.java:169)\n        at io.aeron.DriverEventsAdapter.onMessage(DriverEventsAdapter.java:85)\n        at org.agrona.concurrent.broadcast.CopyBroadcastReceiver.receive(CopyBroadcastReceiver.java:120)\n        at io.aeron.DriverEventsAdapter.receive(DriverEventsAdapter.java:56)\n        at io.aeron.ClientConductor.service(ClientConductor.java:716)\n        at io.aeron.ClientConductor.awaitResponse(ClientConductor.java:752)\n        at io.aeron.ClientConductor.addPublication(ClientConductor.java:387)\n        at io.aeron.Aeron.addPublication(Aeron.java:241)\n        at io.aeron.samples.BasicPublisher.main(BasicPublisher.java:65)\nThis isn't a critical issue but next cnc update it may be worth resolving the alignment issues.\nCheers.. Sure, here are the jvm crash logs for a few runs.\nhs_err_pid2241.log\nhs_err_pid2595.log\nhs_err_pid3391.log\nhs_err_pid18330.log\n. @mjpt777 I'm happy to report the latest commit 277929dea1afcd4cb16c71aeaf6473f2df17635a seems to have resolved the issues.  I verified with the streaming performance test and the ping/pong latency test.  Hopefully this exercise has contributed some value to Aeron.  Very impressive turnaround.\nI've attached the cpuinfo from kstat and the sample console notes with the notes/console results.\ncpu_info.txt\naeron_solaris_sparcv9.txt\nEnvironment:\n\n$ kstat -p cpu_info | head -17\ncpu_info:0:cpu_info0:brand      SPARC64-VII+\ncpu_info:0:cpu_info0:chip_id    1024\ncpu_info:0:cpu_info0:class      misc\ncpu_info:0:cpu_info0:clock_MHz  2660\ncpu_info:0:cpu_info0:core_id    0\ncpu_info:0:cpu_info0:cpu_fru    hc:///component=/MBU_B/CPUM0\ncpu_info:0:cpu_info0:cpu_type   sparcv9\ncpu_info:0:cpu_info0:crtime     242.0386337\ncpu_info:0:cpu_info0:current_clock_Hz   2660000000\ncpu_info:0:cpu_info0:device_ID  46456528453639\ncpu_info:0:cpu_info0:fpu_type   sparcv9\ncpu_info:0:cpu_info0:implementation     SPARC64-VII+ (portid 1024 impl 0x7 ver 0xc1 clock 2660 MHz)\ncpu_info:0:cpu_info0:pg_id      1\ncpu_info:0:cpu_info0:snaptime   1595164.635855\ncpu_info:0:cpu_info0:state      on-line\ncpu_info:0:cpu_info0:state_begin        1533392977\ncpu_info:0:cpu_info0:supported_frequencies_Hz   2660000000\n$ cat /etc/release\n                   Oracle Solaris 10 1/13 s10s_u11wos_24a SPARC\n  Copyright (c) 1983, 2013, Oracle and/or its affiliates. All rights reserved.\n                            Assembled 17 January 2013\n$ java -version\njava version \"1.8.0_151\"\nJava(TM) SE Runtime Environment (build 1.8.0_151-b12)\nJava HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)\n\nBest run (with defaults and 1 million messages):\n\nPinging 1000000 messages\nHistogram of RTT latencies in microseconds.\n       Value     Percentile TotalCount 1/(1-Percentile)\n\n  16.911 0.000000000000          2           1.00\n  34.207 0.100000000000     100562           1.11\n  36.031 0.200000000000     202668           1.25\n  38.111 0.300000000000     302730           1.43\n  38.911 0.400000000000     408553           1.67\n  40.031 0.500000000000     504301           2.00\n  40.927 0.550000000000     556304           2.22\n  41.311 0.600000000000     609705           2.50\n  41.503 0.650000000000     652310           2.86\n  41.727 0.700000000000     700421           3.33\n  42.015 0.750000000000     771005           4.00\n  42.111 0.775000000000     791981           4.44\n  42.207 0.800000000000     810731           5.00\n  42.303 0.825000000000     827546           5.71\n  42.527 0.850000000000     854662           6.67\n  42.815 0.875000000000     881392           8.00\n  43.007 0.887500000000     892404           8.89\n  43.327 0.900000000000     902229          10.00\n  44.127 0.912500000000     912556          11.43\n  45.503 0.925000000000     925167          13.33\n  47.103 0.937500000000     938000          16.00\n  48.319 0.943750000000     944047          17.78\n  49.503 0.950000000000     950027          20.00\n  52.223 0.956250000000     956276          22.86\n  55.231 0.962500000000     962687          26.67\n  57.823 0.968750000000     968817          32.00\n  60.127 0.971875000000     971914          35.56\n  64.511 0.975000000000     975024          40.00\n  73.023 0.978125000000     978126          45.71\n  84.159 0.981250000000     981256          53.33\n  97.535 0.984375000000     984386          64.00\n 104.511 0.985937500000     985943          71.11\n 111.935 0.987500000000     987512          80.00\n 119.551 0.989062500000     989081          91.43\n 127.743 0.990625000000     990645         106.67\n 135.807 0.992187500000     992197         128.00\n 140.543 0.992968750000     992976         142.22\n 145.407 0.993750000000     993766         160.00\n 150.399 0.994531250000     994539         182.86\n 156.415 0.995312500000     995329         213.33\n 162.943 0.996093750000     996099         256.00\n 167.039 0.996484375000     996490         284.44\n 171.007 0.996875000000     996896         320.00\n 175.615 0.997265625000     997270         365.71\n 181.247 0.997656250000     997659         426.67\n 187.135 0.998046875000     998051         512.00\n 190.207 0.998242187500     998248         568.89\n 194.175 0.998437500000     998441         640.00\n 198.399 0.998632812500     998640         731.43\n 203.903 0.998828125000     998834         853.33\n 210.303 0.999023437500     999028        1024.00\n 213.503 0.999121093750     999126        1137.78\n 217.599 0.999218750000     999220        1280.00\n 221.311 0.999316406250     999319        1462.86\n 226.815 0.999414062500     999415        1706.67\n 232.063 0.999511718750     999513        2048.00\n 235.519 0.999560546875     999562        2275.56\n 239.999 0.999609375000     999610        2560.00\n 244.223 0.999658203125     999660        2925.71\n 249.599 0.999707031250     999708        3413.33\n 255.615 0.999755859375     999758        4096.00\n 260.095 0.999780273438     999781        4551.11\n 264.447 0.999804687500     999805        5120.00\n 270.335 0.999829101563     999831        5851.43\n 276.223 0.999853515625     999854        6826.67\n 284.415 0.999877929688     999879        8192.00\n 288.511 0.999890136719     999892        9102.22\n 293.375 0.999902343750     999903       10240.00\n 298.239 0.999914550781     999916       11702.86\n 301.823 0.999926757813     999927       13653.33\n 306.943 0.999938964844     999939       16384.00\n 317.183 0.999945068359     999946       18204.44\n 321.023 0.999951171875     999952       20480.00\n 331.519 0.999957275391     999958       23405.71\n 335.871 0.999963378906     999964       27306.67\n 344.831 0.999969482422     999970       32768.00\n 345.855 0.999972534180     999974       36408.89\n 355.839 0.999975585938     999976       40960.00\n 357.887 0.999978637695     999979       46811.43\n 373.759 0.999981689453     999982       54613.33\n 394.751 0.999984741211     999985       65536.00\n 398.335 0.999986267090     999987       72817.78\n 404.735 0.999987792969     999988       81920.00\n 428.543 0.999989318848     999990       93622.86\n 433.919 0.999990844727     999991      109226.67\n 441.599 0.999992370605     999993      131072.00\n 444.415 0.999993133545     999994      145635.56\n 444.415 0.999993896484     999994      163840.00\n 446.463 0.999994659424     999995      187245.71\n 447.487 0.999995422363     999996      218453.33\n 454.655 0.999996185303     999997      262144.00\n 454.655 0.999996566772     999997      291271.11\n 454.655 0.999996948242     999997      327680.00\n 491.007 0.999997329712     999998      374491.43\n 491.007 0.999997711182     999998      436906.67\n 497.919 0.999998092651     999999      524288.00\n 497.919 0.999998283386     999999      582542.22\n 497.919 0.999998474121     999999      655360.00\n 497.919 0.999998664856     999999      748982.86\n 497.919 0.999998855591     999999      873813.33\n 498.943 0.999999046326    1000000     1048576.00\n 498.943 1.000000000000    1000000\n\n[Mean    =       41.639, StdDeviation   =       15.027]\n [Max     =      498.943, Total count    =      1000000]\n [Buckets =           24, SubBuckets     =         2048]\n. ",
    "ppolukonda": "Thanks! That really helps. What is the recommended approach on running media driver? embedded or separate instance? Take scenario: Many Pubs Vs Many Subs.\nThanks!. Yes agree. Thats how we have been using chronicle HFT solution at the moment. I can see MediaDriver is more like a broker instance running in the back ground. I am exploring aeron for using in one of our low-latency application. \nIs it possible to share a sample properties file(s) that MediaDriver can use? \nThanks in advance!. I think I can look into one of properties files here: https://github.com/real-logic/Aeron/tree/master/aeron-driver/src/main/resources\nThanks!. ",
    "daschgit": "Thanks a lot for the prompt reply Todd. I didn't realise that was a restriction, but in that case it makes perfect sense.\nWe, unfortunately, have a restriction in our network preventing me from initiating connections from host2 to host1, hence my attempt at the above.\nOn another somewhat related note regarding only being able to subscribe locally. Say you have a topology where Host1 is e.g. a market data publisher and you have many hosts wanting to subscribe to this data - and you don't know the list of hosts. I would normally have each host create a subscription pointing at Host1, but since that isn't possible would below be a good way to do it?\n\nHost1 creates a subscriber on channel localhost:3456 listening for market data requests\nHostX ... HostY creates a publisher with channel host1:3456 and sends a market data request\nHost1 creates a new publisher for each market data request with channel HostX:1234 and publishes market data via all publishers.\n\nHope that makes sense?\nLet me know if I should open a new question for this.\nOnce again, thanks a lot for your help!. Hi Cesare,\nSorry, yes, I use UDP. I should have been more clear about the connection \"initiation\". We only have one-way host/ip mappings in our WAN, so we cannot point to host1 from host2, but I can work around this problem for now.\nYou are right, multicast would definitely be a better solution, especially with many subscribers. Great idea to use multiple groups to split by product.\nYour help is much appreciated.. ",
    "dasch-dk": "Brilliant, thanks for your input Cesare. Will definitely take all of the above into account when doing my design. We'll probably have a maximum of 200 subscribers so should be fine with the IGMP memberships. We do have a pretty good understanding of the traffic shape by symbol and will probably end up having single publishers (machines) for the very high throughput ones, so it is good to know that Aeron will give us even more benefit from this by optimally using the MTU.. Good tip Todd, that I hadn't seen before. Will definitely have a look at that.\nThanks both for your help and guidance - much appreciated.. ",
    "pingvasanth": "Thanks Martin, actually we doing functional testing and got into this issue .. seems our functional testing servers are slow.\nWe using aeron 1.3, JDK 8, and CentOS release 6.6\nThanks for the input, we implementing reconnect mechanism too.\n. ",
    "tkowalcz": "@mjpt777 You are probably referring to #368? When can we expect new release?\n@tmontgomery The Publication is held in a map keyed by destination address (right now there is only one configured). There are many threads trying to retrieve it from the map in order to offer. Before that call every thread will check if the publication is connected. If not then it will close it and do some reconnect stuff (may include closing the Aeron and MediaDriver).. @mjpt777 Thank you. And indeed there was ~6s full gc.. ",
    "stevencasey": "\ud83d\ude03 . ",
    "tom-smalls": "Why iterate at all? The semantics of the call changes to \"wait for driver to be active\" rather than \"is driver active\".\nAssuming 0 was never used as CnC version, just return false if this value is returned as it means the driver is not active yet as the version number hasn't been written.. Ahh, yes. I forgot the MediaDriver uses the same call during construction. ",
    "bcaimano": "I did a little investigation of my own (sorry for the silence).\nThe log/term length seems a tricky thing to change. In several places, either log length is determined from term length or term length is determined from log length. It seems like it might make sense to start storing the term length in the log. The math becomes then much easier: you can determine the the log length from the term length and round that to the increment. To get the term length from a log, you just read it from the meta information.\nThe Loss buffer is also an independent file and thus potentially out of increment, however it can be set manually so people can figure that out.\nNo idea if my thoughts here align with the Aeron design philosophy.. I've done a quick test of the Java driver on 3e36a0c with our usual config and a hugepages mount. It seems that truncate is failing on a size param of 8,392,704 (8 * 1,024 * 1,024 + 4,096). My quickest guess is that the metadata is getting added onto the end of the file after the size is determined.. @tmontgomery, I'll give it a try tomorrow. (Apologies, I realized about an hour ago that I was probably missing something exactly like this.). Forming robust command line schemas is a lost art! :). I was able to successfully start up a single server system sitting on top of hugetlbfs backed Aeron today. I'll try to verify for full multi-server tomorrow.. Okay, I've verified our full set up. Looks good.\nThere was one interesting semi-bug on our end due to a very low media driver timeout (10ms). It appears that while general operation is perfectly satisfied with that timeout, the initial driver connection may not be. I had to increase timeout to 1s to avoid the failure. I suspect that opening a hugepage-backed CnC file as a client provokes a massive page fault/mmap sync operation that stalls the initial connection. It ended up being a trivial fix wherein we mutate the media driver timeout after connection. I found it interesting at least.. Assuming you two don't want us to run specific tests to check for implementation hiccups or the like, I think this ticket can be closed.. Yes, that is correct. I believe @sthornington wanted to use it as a canary for data disruption.. ",
    "GayanSandaruwan": "When remove the apply false from the line 18 It builds.. Thanks.. It helped in that..\nBut now it is giving an error saying \n`\n* What went wrong:\nCould not resolve all files for configuration ':aeron-client:compileClasspath'.\n\nCould not find org.agrona:agrona:0.9.7-SNAPSHOT.\n  Searched in the following locations:\n      https://repo1.maven.org/maven2/org/agrona/agrona/0.9.7-SNAPSHOT/maven-metadata.xml\n      https://repo1.maven.org/maven2/org/agrona/agrona/0.9.7-SNAPSHOT/agrona-0.9.7-SNAPSHOT.pom\n      https://repo1.maven.org/maven2/org/agrona/agrona/0.9.7-SNAPSHOT/agrona-0.9.7-SNAPSHOT.jar\n      file:/home/gayan/.m2/repository/org/agrona/agrona/0.9.7-SNAPSHOT/maven-metadata.xml\n      file:/home/gayan/.m2/repository/org/agrona/agrona/0.9.7-SNAPSHOT/agrona-0.9.7-SNAPSHOT.pom\n      file:/home/gayan/.m2/repository/org/agrona/agrona/0.9.7-SNAPSHOT/agrona-0.9.7-SNAPSHOT.jar\n  Required by:\n      project :aeron-client\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED in 4s\n10 actionable tasks: 1 executed, 9 up-to-date`\nI have successfully build 'Aeron' and 'SMB'. @mjpt777\nYeah it was the issue.. Thanks a lot..\nBut I have one consideration. Th previous one was cloned just before two weeks ago.. During that time why there is so much difference to make the build fail . . ",
    "mogrifier": "Had not looked. What a horrible method name. I don't know why my IDE was not setting the property right, and thinking getBoolean had nothing to do with properties, I changed it and voila, it started working right so I figured that was a bug.\nOh well. At least I made my first pull request ever even if not needed. You can ignore the pull request (as you already know).. ",
    "cx421774557": "I'm sorry, my English is poor, I mean, how to push the message from the public network to the Intranet (the machine inside the LAN)?. Thank you very much, i will try it. Have a nice life.. ",
    "lukeocamden": "Hello, sorry I'm having trouble pinning down exactly when/why this happens. Any ideas would be much appreciated!\nIn client code (not yet pared down to a simple reproducer), I am creating a publication and sending a message in quick succession. When I sleep between doing these two things I am unable to reproduce the bug.. Looks much better, haven't repro'd with that change applied. Thanks for the quick fix!. ",
    "lfn3": "So maybe a more general explanation of why I did it this way is in order.\nI wanted to try and make the time units version more or less the same, even if code isn't shared between them. Imo it's nicer if you can just play spot the difference between the two bits of code. \nSince the time units will be something like ms, ns, and maybe even s, it'll be matching on strings (although we could do something a bit sketch and just match on the first character?). Actually that suggests how we could keep it to a switch on char in that case as well. \nI should be able to fix this commit up over the weekend.. This bit is here rather than below since all of the TimeUnits...toNanos calls return Long.MAX_VALUE when they hit positive overflow. I feel like not allowing Long.MAX_VALUE is an ok trade-off?. ",
    "lukepalmer": "Interested as well. Similar to #529, where @tmontgomery  says:\n\nI would like to make this cleaner. But changing the API has some issues for current users.\n\n. I ended up finding a usable workaround, but happy to revisit if there's a good reason.. Thanks for the reply. I probably didn't explain well. I have a single-threaded process that gets other data via epoll that I also want to use aeron with. It does work if I'm smart about polling, but was wondering about the possibility of getting everything into epoll.. Agree that I can do this as you've suggested- closing.. 10 milliseconds. The good news with that is that hopefully it's just one specific issue.\nI did a quick strace on the C driver which was showing delays and noticed only occasional clock syscalls.. On machines C and D in the setup above I was seeing 10ms latency specifically using the C driver. I ran 'strace aeronmd' just to see if it was making any unexpected syscalls. It was not.. I'll check that and get back to you. Thanks for the response!. @mjpt777 Not that I could easily see. I was running aeronmd with no options and checked that /dev/shm was tmpfs as usual. \nWill check on the loss and get back to you, but note that the java driver worked very well on the same machines. This reproduced 100% of the time.. @mjpt777 I saw the 10ms added latency in the C driver both with and without onload (as well as when specifying the unaccelerated intel NIC). Using the java driver I saw the expected improvement using onload.. Also @tmontgomery, to be clear, strace was showing something, but only entries like the below. This seemed harmless to me.\nclock_gettime(CLOCK_MONOTONIC_RAW, {3229650, 517069955}) = 0\nsched_yield()                           = 0\n. Ok! Got some info. It's still a mystery but I have some data.\nThe reason the C driver behaves differently than the java driver is only because of the default wait strategies. If I configure the java driver to busy spin on sender, receiver, and conductor then it also shows the same unexplained 10ms delay.\nI notice that both the C and java drivers will only spin on 2 cores on the machines where the problem occurs. I would expect 3. Further, if I change any one of the three wait strategies to backoff, it still spins on 2 cores. This is weird.\nI also tested write speed to /dev/shm using dd just to make sure nothing strange is going on there. It looks fine.\nHappy to try anything else if folks have ideas.. I did my setting-changing with the java driver only, but am happy to on the C driver if interesting.\nThe machines have identical CPUs, both E5-2667V4.. They're physical machines that were otherwise empty at the time. I didn't see anything unusual with HT but will check again. \nOn Monday I'll do an strace comparison between good/bad machines. Let me know if you think of anything else to check. I think your idea is good, but I had some trouble. If I delete the client I observe that join() throws when the conductor thread attempts to stop. I'm going to try and make a minimized test case.\nI was able to work around this by using an agentinvoker, which of course I can just stop invoking when I want to.. Well that seems obvious now that you say it.  :)\nWorks fine and I now have two ways to shut down. Appreciate the help.. ...not to mention the near-impossibility of multicast on a carrier network, or that compilers available for mobile platforms are likely to be modern enough. I think you'll do much better with other solutions.. I agree that it's very likely a combination of #555, which was mine, and the prefix arg. I can take a look (probably) tonight.. I'm not able to reproduce the reported issue. What platform are you on? Somewhat related: do you possibly want DESTDIR instead of PREFIX?\n@denizevrenci that's a good suggestion, thank you. I do. Time has been limited with market conditions but hopefully this week.\nIf it's causing problems I'd not be in the least offended if people need to\nback out the change until I've had time to make sure it's right.\nOn Tue, Oct 16, 2018 at 2:33 AM Martin Thompson notifications@github.com\nwrote:\n\n@lukepalmer https://github.com/lukepalmer do you plan to address this?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/real-logic/aeron/issues/560#issuecomment-430117633,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AExJAZGXSwLvoYlwEMvQkIHwL4UV6fOAks5ulX3JgaJpZM4XMXKf\n.\n. I've redone this change as #588. Previously, I also added a travis build matrix to try and catch builds that may be broken for other people.\n\nIf folks who had trouble previously would like to give it a try before it's merged, that'd be fantastic. Please comment on the PR.. Compiler matrix sounds reasonable, I can take a shot at that.\nNote that the submitted change does do both the java and C/C++ builds. So far, the system test does appear to work reliably on the 2 cores travis gives us.\nIs the OS X failure known? Here's an example build. It's consistent.\nhttps://travis-ci.org/lukepalmer/aeron/builds/446126370\n. Ok there we are. All linux builds for now, but we have Oracle JDK 8 and 11 and a full range of C/C++ builds. \nI did see a single timeout failures on JDK11 but worked all other times. . To venture a guess: is 128kB the size that will work on most all linux distributions without having to adjust the kernel UDP receive buffer size?. This seems reasonable to me. Please speak up if anyone else has opinions, I can change if not.. ",
    "zyulyaev": "I think memory leak can actually occur in a scenario when you dropped your AeronArchive for some reason (app crashed or you consider it disconnected) and created a new one with same response channel and stream, while old ControlSession in Archive is still alive.\nThis case actually may lead to another unwanted behavior when your new AeronArchive fail to connect. ControlSession#waitForConnection succeeds immediately as Aeron still considers original Publication connected. And the client may not connect to the server in time and miss the CONNECT response.. @mjpt777 Looks like you've fixed same bug, but on a different line.. Looks like the problem is due to reusing archive egress publication, which leads to sending connect response before client's subscription actually connected.\nCan be fixed by using exclusive publication instead.. > Step 6 creates something we don't support.\nI was afraid of that. But how is it supposed to handle situations where no recording log is available, like if the disk is corrupted?\n\nSince the shutdown takes a snapshot, it needs to execute it while catching up. And that will terminate the node.\n\nIs it intended behaviour? It looks quite weird to me actually :smile:\n\nCan you check to see if without that step you can get this to occur?\n\nI would expect following scenario to do the same thing, but it does not:\n1. Configure 3 node cluster;\n2. Start all 3 nodes;\n3. Send SHUTDOWN command via ClusterControl;\n4. Start all 3 nodes;\n5. Stop one of the nodes.\n6. Send SHUTDOWN command;\n7. Start all 3 nodes - the previously stopped node will shutdown;\n8. Start the down node.\n. I found out that cluster may start with only majority of nodes, so I know how to reproduce this without deleting recoding.log:\n1. Configure 3 node cluster.\n2. Start nodes 1 and 2 and wait for cluster to start.\n3. Send SHUTDOWN command via ClusterControl;\n4. Start nodes 1 and 2 and wait for cluster to start.\n5. Send SHUTDOWN command;\n6. Start all 3 nodes - 3rd node will shutdown.\n7. Start 3rd node - it will shutdown again.\n8. Start 3rd node - it will throw ArchiveException.. Sounds great! I tried to use ABORT command and it looked broken as well. Follower nodes would shutdown on every replay after that command. I was not sure if it is related to this issue though.. Is it fixed in 1.14.0?. ",
    "rayqi36": "1.5.0-SNAPSHOT,maybe it is not a stable version ?. Sorry, late to close this issue.  I'm now using the version 1.6.0, it works good with the cpp dirver and java client.. The code in my program is below\nstd::int64_t subid = aeron->addSubscription(recvchannel, recvstream);\nstd::shared_ptr subscription = aeron->findSubscription(subid);\nsubscription = aeron->findSubscription(subid);\nwhile (!subscription)\n{\n    std::this_thread::yield();\n    subscription = aeron->findSubscription(subid);\n}\nfragment_handler_t handler = AeronMessageHandler();                                                                                                                                        \nsubid = aeron->addSubscription(recvchannel, recvbpstream);\nstd::shared_ptr bpsubscription = aeron->findSubscription(subid);\nbpsubscription = aeron->findSubscription(subid);\nwhile(!bpsubscription){\n    std::this_thread::yield();\n    bpsubscription = aeron->findSubscription(subid);\n}\nfragment_handler_t bphandler = BPMessageHandler();\nwhile(running){\n     int fragmentsRead = subscription->poll(handler, 100);\n     fragmentsRead = bpsubscription->poll(bphandler,100);\n}. I will try it and write the feedback. Thanks. I have run the driver for a week and have never found it core dump again. ",
    "hank-whu": "so there is noway to send zero-copy big msg (e.g 2mb) ?. ",
    "Jsky1989": "Thank you for reply, the above result tested in local loopback. I re-tested local loopback in Windows server 2008, throughput about 700w msg/s. The result of several other scenes is (Linux 4+ kernel local loopback : 2.5kw msg/sec), (Linux 4+ - between machines : 200w msg/sec), (Windows server 2008 between machines: 100w msg/sec).\nIn addition, is there a plan to official support aeron golang client? \nI find this project(https://github.com/lirm/aeron-go), but it does not seem very active, Cnc file version only support up to 5.. ",
    "dillonhicks": "Hi guys, I am working with @bedding and I am familiar with this issue.\n@tmontgomery: To reiterate, we have been able to reproduce the issue only when running with two instances. We have never seen this issue when running two media drivers on one instance. If media drivers are communicating over a loopback interface there might be confounding issues with reproducing our problem, no? \n\nPaying for EC2 instances for multi-hour runs is not quite feasible.\n\nRight, that's understandable. Physical boxes would be ok as long as there is some network separation. What is the configuration you guys use for testing UDP paths? . @mjpt777, @bedding I was able to run tcpdump on own my parallel setup (1 c3.8xl, 1 c4.8xl). Over the last couple of days I have run a few different permutations of the ConnectionSample which included cases where the aeron mtu was under and over the path-mtu.\nGiven: \n[ec2-user@ip-172-31-53-86 ~]$ tracepath -n 172.31.54.217\n 1?: [LOCALHOST]                                         pmtu 9001\n 1:  172.31.54.217                                         0.242ms reached\n 1:  172.31.54.217                                         0.201ms reached\n     Resume: pmtu 9001 hops 1 back 1\n I saw no udp checksum failures when sampling over a handful of random 10 and 60 second intervals on both peers in the last hour or so for the aeron-mtu > path-mtu case (-Daeron.mtu.length=17984). For Peer 2,  a sudo timeout 60 tcpdump  -i eth0 -vv udp dst port 40552 > udp.cap  gives the following: \nip-172-31-54-217.ec2.internal.58939 > ip-172-31-53-86.ec2.internal.40552: [udp sum ok] UDP, length 128\n01:01:00.528350 IP (tos 0x0, ttl 255, id 20778, offset 0, flags [DF], proto UDP (17), length 92)\n    ip-172-31-54-217.ec2.internal.58939 > ip-172-31-53-86.ec2.internal.40552: [udp sum ok] UDP, length 64\n01:01:00.528351 IP (tos 0x0, ttl 255, id 20779, offset 0, flags [DF], proto UDP (17), length 156)\n    ip-172-31-54-217.ec2.internal.58939 > ip-172-31-53-86.ec2.internal.40552: [udp sum ok] UDP, length 128\n01:01:00.528351 IP (tos 0x0, ttl 255, id 20780, offset 0, flags [DF], proto UDP (17), length 92)\n    ip-172-31-54-217.ec2.internal.58939 > ip-172-31-53-86.ec2.internal.40552: [udp sum ok] UDP, length 64\n01:01:00.528352 IP (tos 0x0, ttl 255, id 20781, offset 0, flags [DF], proto UDP (17), length 92)\n... many more lines ...\ngrep \"bad udp cksum\" udp.cap and grep bad udp.cap returns no results.\nWith all of the variations of input parameters to @bedding's ConnectionSample, including a 24 hour send as much as possible version, I have seen no errors. The counters and logs all look similar to the following: \n``\nCommandn Control file /dev/shm/aeron-connsample.peer-2.run-1/cnc.dat\n23:54:13 - Aeron Stat\n=========================\n  0:    3,148,561,812,992 - Bytes sent\n  1:    2,919,191,539,520 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:            7,117,187 - NAKs sent\n  6:           37,847,830 - NAKs received\n  7:           88,412,143 - Status Messages sent\n  8:           95,821,533 - Status Messages received\n  9:               24,868 - Heartbeats sent\n 10:                5,554 - Heartbeats received\n 11:           31,808,043 - Retransmits sent\n 12:              753,135 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:            5,787,630 - Short sends\n 17:              175,303 - Client keep-alives\n 18:           16,280,039 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    1 - rcv-channel: aeron:udp?endpoint=172.31.53.86:40552\n 25:                    1 - snd-channel: aeron:udp?endpoint=172.31.54.217:40551\n 26:    1,574,280,518,016 - snd-pos: 2 -899579184 1 aeron:udp?endpoint=172.31.54.217:40551 \n 27:    1,574,280,518,016 - snd-lmt: 2 -899579184 1 aeron:udp?endpoint=172.31.54.217:40551 \n 28:    1,574,288,906,624 - pub-lmt: 2 -899579184 1 aeron:udp?endpoint=172.31.54.217:40551 \n 29:    1,458,493,867,712 - sub-pos: 1 -1872003812 2 aeron:udp?endpoint=172.31.53.86:40552 @0\n 30:    1,458,493,867,712 - rcv-hwm: 4 -1872003812 2 aeron:udp?endpoint=172.31.53.86:40552 \n 31:    1,458,493,867,712 - rcv-pos: 4 -1872003812 2 aeron:udp?endpoint=172.31.53.86:40552 \n 32:    1,458,493,867,584 - sub-pos: 3 -1872003811 50 aeron:udp?endpoint=172.31.53.86:40552 @0\n 33:    1,458,493,867,584 - rcv-hwm: 5 -1872003811 50 aeron:udp?endpoint=172.31.53.86:40552 \n 34:    1,458,493,867,584 - rcv-pos: 5 -1872003811 50 aeron:udp?endpoint=172.31.53.86:40552 \n 35:    1,574,280,499,264 - snd-pos: 6 -899579183 50 aeron:udp?endpoint=172.31.54.217:40551 \n 36:    1,574,280,499,264 - snd-lmt: 6 -899579183 50 aeron:udp?endpoint=172.31.54.217:40551 \n 37:    1,574,288,887,872 - pub-lmt: 6 -899579183 50 aeron:udp?endpoint=172.31.54.217:40551 \n--\nCommand `n Control file /dev/shm/aeron-connsample.peer-2.run-1/cnc.dat\n0 distinct errors observed.\n```\n@tmontgomery: Thanks for the heads up about the UDP fragmentation on AWS and the send-receive windows. I'll touch base with @bedding on Monday and try to nail down the differences in our configurations.  In your opinion, would a netstat be an ok way to monitor the tx/rx queues if we were trying to pin down a resource starvation issue? . ",
    "BrassyPanache": "Thanks for the quick reply.. ",
    "benalexau": "Hi Martin, thanks for the reply and expanding on the scope. Unfortunately we need to proceed quickly with a POC as such I will roll a simple solution that builds on some of our existing libraries and Raft infrastructure.\nJust in case it's of interest to receive community feedback concerning generic capabilities we've found useful when building SBE and Aeron applications, below is a list of our internally-developed libraries in this regard:\n\nFramed File Format: SBE append-only storage, CRCs, automatic file rollover, flexible replay (ie timeouts, inter-process compatibility including C++ module, callback vs stream patterns), message interleaving (deterministically combine concurrently-written FFFs into a single output stream), bidirectional filename to date resolvers, missing date detection, bulk file verifiers (eg check all are valid, check the last X days are valid etc) etc.\nSBE Auto: Java annotation processor that produces \"EF\" and \"DF\" (encoder framing and decoder framing) pairs. You literally add an @Framing annotation to the SBE package and it's done. Each EF and DF contains its own SBE flyweight, the message header flyweight (if not a composite), and an associated DirectBuffer and ByteBuffer. It simplifies use by offering a single EF/DF to reference or pass around (instead of the flyweight and a buffer), ensures correct use of the message header, introduces a visit pattern (so a message receive function simply uses SomeDF.visit(buffer)), adds utility methods like copy, and reduces field verbosity and confusion in calling classes (ie which flyweight goes with which buffer, has the header been set etc). Plus it's nice to have shorter names when dealing with SBE on narrower screens (eg JunctionMessageEncoder becomes JunctionEF).\nSBE Storage: Write your SBE schemas and then annotate a Dao interface for Agrona CompilerUtil powered runtime code generation of an implementation that persists your SBE in highly efficient, keyed, ordered, transactional LMDB tables. Values use SBE's message header to handle long-term versioning.\nAeron Express: Facilitates servers publishing a single request channel and being able to respond to previously-unknown clients. It does this through versioned handshakes, station identification to reply channel mapping, correlation IDs with rollover etc. It heavily uses ReservedValueSupplier.\n\nWhile these all work well on our internal projects and I'd be happy to share them, unfortunately I lack the time to adequately support them (I'm busy enough with LmdbJava).\nPlease keep up the excellent work on SBE, Aeron and Agrona. We're huge fans.. ",
    "io7m": "\nMDC isn't explicitly for NAT traversal. It just so happens that dynamic MDC allows a Subscription to be behind a NAT. i.e. on the private side. The reason is that dynamic MDC on the Subscription side sends a periodic SM that can initiate data flow back.\n\nYes, I understand. The fact that it can do NAT traversal is just a happy consequence of how it works.\n\nTo set that up in the setup above requires a dynamic MDC as the connect request response information (cs). And the server to setup a Publication for MDC. The client needs to setup a dynamic MDC Subscription.\n\nCould you give me some example channel URIs (and an indication of whether those are subscriptions or publications) for a server at 1.2.3.4 and a client at 10.2.0.1 (behind NAT)?\nIf I'm understanding correctly, I think the client does this:\np = addPublication(\"aeron:udp?endpoint=1.2.3.4:9999\")\nThat's for sending messages to the server. Then the client calls:\ns = addSubscription(\"aeron:udp?endpoint=10.2.0.1:10000|control=1.2.3.4:10001\")\nThat's what the client uses to get response packets from the server. The server has a control port at 1.2.3.4:10001 and the above causes the client to send packets to the server such that the server will respond with packets destined for port 10000 on the client.\nThe client sends messages to the server via p and receives responses via s.\nIs this correct?\nI'm unsure as to what I'd need to specify in terms of publications and subscriptions on the server, though.\n\nBut back to the normal setup (sans MDC) with a client with a Subscription. The connect request can include the public IP (if known)... or the server can get the public IP as the source identity of a new image. This combined with a port forward can allow NAT traversal. This is already being done by at least a couple users, I believe. It means more control of the NAT (for port forwarding), but it is possible.\n\nYes, I understand how that could work. Unfortunately in my case (a multiplayer game engine), it wouldn't be acceptable. It's acceptable for server operators to have to understand how to set up port forwarding and so on, but it would be unacceptable for users running clients to have to set up port forwarding just to be able to talk to a remote server. No multiplayer game that I'm aware of requires this of their clients. Some games use a separate NAT traversal mechanism involving an intermediary, but I'd prefer to keep things simple and direct (and given that the servers are player-run anyway, requiring an intermediary might be counter to that).. I was pulled away from this to work on something else, but I've spent the last couple of days trying to get this working. I've succeeded (including testing that data does actually traverse NAT) with one show-stopping caveat.\nIn my test network, the server lives at 10.2.17.1 and the client lives at 10.10.0.5 on the private side of a NAT router (the router is at 10.10.0.1 and does translation between 10.2.0/16 and 10.10.0/16). The server opens a \"control\" port (for MDC) 9000 and a \"data\" port 9001.\nThe server creates the following publication and subscription:\nhttps://github.com/io7m/aerontest/blob/9bdc3e57d15e9b6accd922e8676b7af4bcc617e9/src/main/java/com/io7m/api_exp2_nat/Server.java#L95\nIn other words, it makes these calls:\nsp = addPublication(\"aeron:udp?control=10.2.17.1:9000|reliable=true|mtu=1216\");\nss = addSubscription(\"aeron:udp?endpoint=10.2.17.1:9001|reliable=true|mtu=1216\");\nsp is used to send messages to connected clients, ss is used to receive messages from connected clients.\nThe client creates the following publication and subscription:\nhttps://github.com/io7m/aerontest/blob/9bdc3e57d15e9b6accd922e8676b7af4bcc617e9/src/main/java/com/io7m/api_exp2_nat/Client.java#L111\nIn other words, it makes these calls:\ncs = addSubscription(\"aeron:udp?endpoint=10.10.0.5:8000|control=10.2.17.1:9000|control-mode=dynamic|reliable=true|mtu=1216\")\ncp = addPublication(\"aeron:udp?endpoint=10.2.17.1:9001|reliable=true|mtu=1216\")\ncs is used to receive messages from the server, cp is used to send messages to the server. The client binds to the local port 8000 and this is the port that effectively receives responses from the server.\nNow this all appears to work correctly. In the example code, the server and client simply exchange UTF-8 strings periodically. I've verified that the server never knows the IP of the client behind NAT, and responses from the server do manage to traverse NAT and make it back to the client.\nThe major caveat: The server has a single publication that it can use to send messages to clients. It doesn't get one publication per client, so all it can do is broadcast the same set of messages to all connected clients. The API doesn't appear to expose a way to individually address clients. How do I get one publication per client on the server?. > You can have one publication per client if you use exclusive publications.\nI assume you don't mean simply use addExclusivePublication to create the initial publication on the server? The example code already does this (I shortened addExclusivePublication to addPublication in the quoted example because I thought [according to the JavaDoc] that an exclusive publication was merely a non thread-safe version of an ordinary publication). If I post messages to the server's exclusive publication all clients receive the messages, so that's obviously not what I want.\nI've tried creating publications in the server's \"image available\" handler, both using the source ID of the image passed to the handler, and also by trying to create a new publication based on the existing server publication channel string but with a session-id parameter manually appended. Neither work. In fact the latter still results in all clients receiving the same messages, but has the apparent effect of causing the media driver to time out about ten seconds after the publication creation is attempted.\n\nSession ids are normally automatically assigned but the next release will support a reserved range of ids that can be manually assigned by the publication.\n\nDoes this mean that clients pick their own session IDs in my case? That sounds like a security risk...\n. Agreed, I will try again with the latest master soon.. Hypothetical (but, I think, possibly realistic) situation where this can be a problem:\nClients subscribe to an introduction publication. A client at address a subscribes and the publication says \"New client at a: Connect to my port p using session ID s\" (encrypted in some fashion so that other subscribers can't read that message). The intention is that port p is freshly allocated, holds a publication (or subscription) specific to that client, and clients other than that single intended client aren't supposed to be able to talk to it. The server works from the assumption that a malicious client won't know a or s and will therefore have a hard time if it wants to spoof packets appearing to come from the permitted client.\nTo implement this, the server carves off a large region of the session ID address space (let's say 24 bits of the address space) that it'll use to pick random session IDs. The space needs to be reasonably large so that a malicious client can't just try every possible value for s in a short amount of time. This leaves only 2 ^ 8 session IDs available for that introduction publication. Knowing that the introduction publication only has 2 ^ 8 usable session IDs, a malicious client can open 2 ^ 8 subscriptions to the introduction publication and this will effectively DOS the server (because the media server will go into an infinite loop and Aeron will get a timeout talking to it).\nA workaround for this would be to implement IP filtering on a per-publication basis. Ideally it'd be possible to declaratively add requirements to pubs/subs such as \"This publication may only have at most four subscribers from a single IP address\" or \"This subscription may only have at most one image\". I'm looking into implementing this right now.. ",
    "JPWatson": "That's the case I'm trying to fix - at the moment, if it's set as a system property then it's being overridden by the default value for the Archiver/Archiver client/Cluster client.. Done. Sorry Todd I should have labelled it better, it was a work in progress for Martin to have a look at in the morning.. I assume same goes for the HeartbeatStatus. Removed..... This was the easiest way I could see to solve this.\nI wonder whether the behaviour might be handled instead by the MediaDriver which could continue to create a 'null publication' that never connects?. I was working on the basis that the session would be timed out anyway because there would be no messages would be coming in.. Try running pollEgress on the client after the election so that it picks up the new leader event and switches the publication to the new leader.. Yep. reverted.. ",
    "StephanDollberg": "@tmontgomery thanks for the swift reply.\nIs this documented anywhere? Might be good to leave a note somewhere.\nAlso feel free to close this issue or keep it open if you want to keep it as a tracking ticket.. ",
    "davidt922": "Sorry, i'm quite new with this library, the ip have to be my machine ip, so 'localhost' if both subcribers and the publisher are on the same machine?\nAnd , If `for example' y have 3 computers conected to the same gateway, one been the publisher and the other two the subcribers with IPv4 address:\n192.168.0.2 for the publisher.\n192.168.0.3 for the subcriber1\n192.168.0,4 for the subcriber2,\nI could do:\nfinal String channel = \"aeron:udp?control=192.168.0.2:4050|control-mode=manual\"; //(for the publiser )\nand:\nfinal String channel = \"aeron:udp?endpoint=192.168.0.3:4051\"\nfinal String channel = \"aeron:udp?endpoint=192.168.0.4:4052\"\nFor both subcribers and it will work?, the configuration that I have just exposed it seems strange for me, because you don't tell to the publisher where the subcribers are.\nEDIT:\nIf the end point is the socket were the publihser will send the message and from which subscriptions will receive messages, it seem's for me that for the subcriptors configuration I have to put the direction of the sender and in the pulisher i have to put the direction of the subcribers, but if I have two subcribers using MDC with Ip address i have to put as the pubihser endpoint?\n. 100% Working, Thank you very much @tmontgomery . ",
    "denizevrenci": "Thank you. That was what I was looking for.\nIf you could allow a follow-up, I understand that on_available_image is telling that a new session has been established with the publisher. I might be missing this one as well but there does not seem to be a method to register a callback in the C++ API for messages (or fragments) received. Methods in both Image and Subscription are polling based. And in the page https://github.com/real-logic/aeron/wiki/Client-Concurrency-Model, there is a statement:\n\nEach subscribing thread must create its own Subscription and poll for updates.\n\nDoes that mean this is the only available interface from aeron-client? I assume this is not an issue for continuous high throughput scenarios. But, in the cases where messages in a session are spread thin, polling sounds inefficient compared to being notified when a message arrives.\n. That answers my question. Thank you.. Thank you for the quick fix.. Thanks for the feedback. I also removed the same option from aeron-driver counterpart. . If the number of fragments in earlier images in the list is larger than fragmentLimit, processing the fragments in the last image in the list takes N calls to poll() as we lose the position (i) in the list. After this change, the subsequent calls \"remember\" the last processed position (i). So poll() can iterate the list faster.\nWith a small number of images, the effect is probably unnoticeable. And if each image has more than fragmentLimit number of unprocessed fragments, this change does not affect the behaviour.\nIt is a micro-optimization that will probably affect very few use cases. If you think it does not serve a purpose, please feel free to close this PR.. Sorry to pollute the commit history. Seems like cluster tests are failing with index out of bounds errors. I'll investigate and update the PR.. Another related problem with the change in #555 is that it breaks build using Ninja as subst and abspath and GNU Make functions not available in other build tools.\nAlso, unlike __FILE__, __FILENAME__ only refers to the cpp file for that particular translation unit. So if the exception is thrown from a header file, the source info does not point to the header file, instead, it points to the source file that included that header. I think that this is a regression of usability.\nI suggest passing ${CMAKE_SOURCE_DIR} as a macro definition and doing the substring operation as a macro that subtracts SOURCE_DIR from __FILE__. It also needs to check whether __FILE__ expands to an absolute path or relative path. With my configuration (GCC 8.2), I get relative paths from __FILE__.. Code to reproduce:\n```cpp\ninclude \ninclude \ninclude \ninclude \nconstexpr auto message_size = 1024u;\nconstexpr auto payload_size = message_size - 32u;\nconstexpr auto msg_count_until_max_pos = 100u;\nconstexpr int64_t get_max_position(const unsigned int term_buf_len_pow) {\n    constexpr auto max_pos_mult_pow = 31;\n    return 1L << (term_buf_len_pow + max_pos_mult_pow);\n}\nauto offer(aeron::ExclusivePublication& pub, const unsigned int value) {\n    uint8_t buf[payload_size];\n    aeron::concurrent::AtomicBuffer transport_buf{buf, payload_size};\n    transport_buf.overlayStruct>(0) = value;\n    auto result = pub.offer(transport_buf);\n    while (result == aeron::BACK_PRESSURED)\n        result = pub.offer(transport_buf);\n    return result;\n}\nauto claim(aeron::ExclusivePublication& pub, const unsigned int value) {\n    aeron::concurrent::logbuffer::BufferClaim claim;\n    auto result = pub.tryClaim(payload_size, claim);\n    while (result == aeron::BACK_PRESSURED)\n        result = pub.tryClaim(payload_size, claim);\n    if (result) {\n        claim.buffer().overlayStruct>(claim.offset()) = value;\n        claim.commit();\n    }\n    return result;\n}\ntemplate \nvoid hit_max_position(\n        aeron::ExclusivePublication& pub,\n        aeron::Subscription& sub,\n        const int64_t initial_position,\n        const int64_t max_position,\n        publish_method_t&& publish) noexcept {\n    auto send_value = 0u;\n    auto expected_rcv_value = 0u;\n    auto expected_position = initial_position;\n    while (send_value != msg_count_until_max_pos) {\n        auto result = publish(pub, send_value++);\n        expected_position += message_size;\n        assert(result == expected_position);\n        sub.poll([&expected_rcv_value] (\n                const aeron::concurrent::AtomicBuffer& buffer,\n                aeron::util::index_t offset,\n                aeron::util::index_t,\n                const aeron::Header&) noexcept {\n            assert(buffer.template overlayStruct(offset) == expected_rcv_value++);\n        }, 1);\n    }\n    assert(expected_position == max_position);\n    auto result = publish(pub, send_value);\n    assert(result == aeron::MAX_POSITION_EXCEEDED);\n    while (expected_rcv_value != send_value) {\n        sub.poll([&expected_rcv_value] (\n                const aeron::concurrent::AtomicBuffer& buffer,\n                aeron::util::index_t offset,\n                aeron::util::index_t,\n                const aeron::Header&) noexcept {\n            assert(buffer.template overlayStruct(offset) == expected_rcv_value++);\n        }, 1);\n    }\n};\ntemplate \nvoid check_mitigation(\n        aeron::ExclusivePublication& pub,\n        aeron::Subscription& sub,\n        publish_method_t&& publish) noexcept {\n    auto send_value = 0u;\n    auto expected_rcv_value = 0u;\n    int64_t expected_position = 0;\n    while (send_value != msg_count_until_max_pos) {\n        auto result = publish(pub, send_value++);\n        expected_position += message_size;\n        assert(result == expected_position);\n        sub.poll([&expected_rcv_value] (\n                const aeron::concurrent::AtomicBuffer& buffer,\n                aeron::util::index_t offset,\n                aeron::util::index_t,\n                const aeron::Header&) noexcept {\n            assert(buffer.template overlayStruct(offset) == expected_rcv_value++);\n        }, 1);\n    }\n    while (expected_rcv_value != send_value) {\n        sub.poll([&expected_rcv_value] (\n                const aeron::concurrent::AtomicBuffer& buffer,\n                aeron::util::index_t offset,\n                aeron::util::index_t,\n                const aeron::Header&) noexcept {\n            assert(buffer.template overlayStruct(offset) == expected_rcv_value++);\n        }, 1);\n    }\n}\nint main() {\n    constexpr auto max_position = get_max_position(26);\n    constexpr int64_t offset = message_size * msg_count_until_max_pos;\n    constexpr auto initial_position = max_position - offset;\naeron::Context c;\nc.aeronDir(\"/dev/shm/transport_test_max_position_exceeded\");\naeron::Aeron client(c);\n\nauto pub_reg_id = client.addExclusivePublication(\"aeron:ipc?init-term-id=0|term-length=67108864|term-offset=67006464|term-id=2147483647\", 0);\nauto sub_reg_id = client.addSubscription(\n    \"aeron:ipc\",\n    0,\n    [] (aeron::Image& i) {std::cout << \"up \" << i.sessionId() << std::endl; },\n    [] (aeron::Image& i) {std::cout << \"down \" << i.sessionId() << std::endl; });\nauto pub = client.findExclusivePublication(pub_reg_id);\nwhile (!pub) {\n    std::this_thread::yield();\n    pub = client.findExclusivePublication(pub_reg_id);\n}\nwhile (!pub->isConnected())\n    std::this_thread::yield();\nauto sub = client.findSubscription(sub_reg_id);\nwhile (!sub) {\n    std::this_thread::yield();\n    sub = client.findSubscription(sub_reg_id);\n}\nhit_max_position(*pub, *sub, initial_position, max_position, offer);\n\npub_reg_id = client.addExclusivePublication(\"aeron:ipc\", 0);\npub = client.findExclusivePublication(pub_reg_id);\nwhile (!pub) {\n    std::this_thread::yield();\n    pub = client.findExclusivePublication(pub_reg_id);\n}\nwhile (!pub->isConnected())\n    std::this_thread::yield();\ncheck_mitigation(*pub, *sub, offer);\n\n}\n```. For convenience, I added the code above as a system test.\nhttps://github.com/denizevrenci/aeron/tree/max_pos_exceeded_test. Ok, found the issue. It isn't a race condition so I will change the issue title.\nProblem is caused by LogBufferDescriptor::indexByPosition() as it casts the result of position >> positionBitsToShift to int. By coincidence, this value is equal to INT_MAX + 1 for the default term buffer size of IPC publications which causes wrap around and we get a negative index from this function. It can simply be fixed by casting after the modulo operation.. Rebased on master.. @mjpt777 I have put back conclude() and just changed the initializers to defaults instead of nulls.\n@tmontgomery What kind of guard do you have in mind instead of assertions? To me, it looked like passing zero to clz and ctz is a programming error that cannot be handled at runtime.\nI suppose the standalone Image can also be moved, so the addition of move semantics here would not have to be retracted later.. https://travis-ci.org/real-logic/aeron/jobs/500250411\nRace condition?. I know I suggested passing CMAKE_SOURCE_DIR but on second thought, it would be better to pass PROJECT_SOURCE_DIR.\nIf Aeron project is included by another project with add_subdirectory, CMAKE_SOURCE_DIR will point to the containing project's source directory while PROJECT_SOURCE_DIR will still point to Aeron's project root.\nThis will not affect standalone builds.. It may break the ABI in case someone wants to compile object files with the new header and link with the client library that was compiled with the old headers. With a simple test case, I confirmed that two object files still link if one of them is inline static and the other is only inline. The advantage is that the resulting binary is smaller as the linker is now free to eliminate repeating inline symbols as they are not internally linked.. ",
    "manishbaphna": "Yes, it did give that.  Though I can see sys/socket.h is available and has the definition.. exactly how you typed.. Here's error for #1 \n[ 63%] Building C object aeron-driver/src/main/c/CMakeFiles/aeron_driver.dir/aeron_driver_sender.c.o\n/home/mb13808/workspace/aeron-master/aeron-driver/src/main/c/aeron_driver_sender.c:26:8: error: redefinition of \u00e2struct mmsghdr\u00e2\n struct mmsghdr\n        ^\nIn file included from /home/mb13808/workspace/aeron-master/aeron-driver/src/main/c/aeron_driver_sender.c:22:0:\n/usr/include/sys/socket.h:102:8: note: originally defined here\n struct mmsghdr\n        ^\ngmake[2]:  [aeron-driver/src/main/c/CMakeFiles/aeron_driver.dir/aeron_driver_sender.c.o] Error 1\ngmake[1]:  [aeron-driver/src/main/c/CMakeFiles/aeron_driver.dir/all] Error 2\ngmake:  [all] Error 2\n. Error for #2 \n[ 49%] Built target Throughput\n[ 50%] Built target TimeTests\n[ 50%] Linking C shared library ../../../../lib/libaeron_driver.so\n/usr/bin/ld: cannot find -luuid\ncollect2: error: ld returned 1 exit status\ngmake[2]:  [lib/libaeron_driver.so] Error 1\ngmake[1]:  [aeron-driver/src/main/c/CMakeFiles/aeron_driver.dir/all] Error 2\ngmake:  [all] Error 2\n. I have tried with gcc version 6.1.0 but issue persists. \nWhile #1 is not a show stopper,, #2 is . Any suggestion how can we work it around ? Tried playing with CMake files but it's not helping. \n. It's still not able to resolve libuuid issue. Worked like charm, thanx Ayub,. I think ,issue is , if uuid is not found, why to even try linking it.\n\ncmake -DBUILD_AERON_DRIVER=ON ../..\n-- The C compiler identification is GNU 6.1.0\n-- The CXX compiler identification is GNU 6.1.0\n-- Check for working C compiler: /home/hj37503/6.1.0/bin/cc\n-- Check for working C compiler: /home/hj37503/6.1.0/bin/cc -- works\n-- Detecting C compiler ABI info\n-- Detecting C compiler ABI info - done\n-- Detecting C compile features\n-- Detecting C compile features - done\n-- Check for working CXX compiler: /home/hj37503/6.1.0/bin/c++\n-- Check for working CXX compiler: /home/hj37503/6.1.0/bin/c++ -- works\n-- Detecting CXX compiler ABI info\n-- Detecting CXX compiler ABI info - done\n-- Detecting CXX compile features\n-- Detecting CXX compile features - done\n-- Looking for pthread.h\n-- Looking for pthread.h - found\n-- Looking for pthread_create\n-- Looking for pthread_create - not found\n-- Looking for pthread_create in pthreads\n-- Looking for pthread_create in pthreads - not found\n-- Looking for pthread_create in pthread\n-- Looking for pthread_create in pthread - found\n-- Found Threads: TRUE\n-- Found Doxygen: /usr/bin/doxygen (found version \"1.8.5\") \n-- Looking for bsd/stdlib.h\n-- Looking for bsd/stdlib.h - not found\n-- Looking for uuid/uuid.h\n-- Looking for uuid/uuid.h - not found\n-- Looking for arc4random\n-- Looking for arc4random - not found\n-- Looking for uuid_generate\n-- Looking for uuid_generate - not found\n-- Looking for poll\n-- Looking for poll - not found\n-- Looking for epoll_create\n-- Looking for epoll_create - not found\n-- Looking for sys/types.h\n-- Looking for sys/types.h - found\n-- Looking for stdint.h\n-- Looking for stdint.h - found\n-- Looking for stddef.h\n-- Looking for stddef.h - found\n-- Check size of struct mmsghdr\n-- Check size of struct mmsghdr - failed\n-- Looking for recvmmsg\n-- Looking for recvmmsg - not found\n-- Looking for sendmmsg\n-- Looking for sendmmsg - not found\n-- Looking for fallocate\n-- Looking for fallocate - not found\nCMake Warning at aeron-driver/src/main/c/CMakeLists.txt:66 (message):\n  Could not find arc4random.  If on Linux, is libbsd installed?\n\nCMake Warning at aeron-driver/src/main/c/CMakeLists.txt:72 (message):\n  Could not find uuid_generate.  If on Linux, is libuuid installed?\n-- Configuring done\n-- Generating done\n-- Build files have been written to: /home/mb13808/junk/aeron-master/cppbuild/Debug\n. ",
    "ayubsayyad": "@manishbaphna :\nworkaround:\ncomment out these lines with ${AERON_LIB_UUID_LIBS} in aeron-driver/src/main/c/CMakeLists.txt\ntarget_link_libraries(\n     aeron_driver\n...\n     #    ${AERON_LIB_UUID_LIBS}\n...\ntarget_link_libraries(\n     aeronmd\n     aeron_driver\n...\n     #    ${AERON_LIB_UUID_LIBS}\n  ...\n target_link_libraries(\n     aeron_driver_agent\n  ...\n     #    ${AERON_LIB_UUID_LIBS}\n..... we can do somethinh like below ?, where uuid path will always be taken from where cmake found it.\n```\nget_filename_component(UUID_LIB_PATH \"${LIBUUID_EXISTS}\" DIRECTORY)\nlink_directories(${UUID_LIB_PATH})\n```. ",
    "leonchen83": "In our scenario, the mesage length is not fixed, the max message length is reach to 32MB. Do you have any suggestions?. I saw the MAX_MESSAGE_LENGTH = 16mb , how can I change this param?\npublic static int computeMaxMessageLength(final int termLength)\n    {\n        return Math.min(termLength / 8, MAX_MESSAGE_LENGTH);\n    }. thanks for answer . I will close this issue. ",
    "stonetang": "while  communicating  in the tow host, one is pub,  another is sub, this err happened.\ni  find sub channel bind socket, while  reading the code,  and why bind remote address?. FAILED: (99) Cannot assign requested address: unicast bind [10.2.237.167:40124] : Cannot assign requested address : std::shared_ptr aeron::ClientConductor::findSubscription(int64_t) : /home/tangminghong/msg-bus/aeron-src/aeron/aeron-client/src/main/cpp/ClientConductor.cpp : 273. please help me;  why Subscription  need to bind  remote address ?  the only locale address band socket. only after some seconds  Ping crash. C media driver. ",
    "ajh300": "Apologies - created in error.. ",
    "benwimpory": "@mjpt777 fixed this. ",
    "cliveseldon": "Thanks. Worked 3rd time.. ",
    "ratcashdev": "the CPU has 4 cores + HT (8th-gen Intel I7-8550U) \nOn the same laptop, when not using docker and starting a single MediaDriver with a Producer and a Consumer the observed latencies are around 10-20 microseconds.. On a second check it became clear the Docker CE was allowed to use only 2 cores. Raising it to 8 made a dramatic difference. Thank you for the hint and feel free to close this.\n. Maybe. \nThis of course depends on the cost, and unless there is an already existing way to guarantee that participating message processing nodes (subscribers) can safely assume that whatever they have received/consumed is/was already persisted. At the same time, we don't want to persist anything (and thus rather reject te publication offer) if there is no processing node on-line (i.e. no other than archiving subscription).. Right. I may be able to submit a PR.. Average WIFI latency is 2-4ms - well above what Aeron is able to achieve on a wired connection:\nhttps://www.quora.com/What-is-the-average-latency-of-a-WiFi-network\nI wonder what would be the advantage of using Aeron in such circumstances compared to, say, KryoNet over TCP - assuming we need a reliable medium.. All right. Thanks for the heads-up. So the egress channel is used to carry also technical messages (new leader) in addition to the user's messages? I have modified the test by having a thread that does not anything else just client.pollEgress();\nI have also realized that using ClusterTool.removeMember actually reconfigures the cluster so that consensus is possible to reach even if there's only a single node running out of the 3. Thus i got rid of this code (and the corresponding waits, since the terminationHook is not fired if I only call close() on the clusteredServices and mediaDrivers).\nSo now it behaves as I would expect: after shutting down the leader, it stops receiving messages. Catch-up kicks in after re-starting a previously shut-down static node. But the expected number of messages is not reached. Some seem to be lost.. I have updated the gist (https://gist.github.com/ratcashdev/bd03856cfab77da206d5bf83f4f40211) to include the periodic egressPoll and heartbeat. \nI understand the important of the ACK, for a guaranteed processing, I think.\nHowever, strictly from a delivery perspective, I thought that:\n1. if the client loses connection to the leader, it will eventually miss a StatusMessage and thus will realize, that the messages since the last SM MAY have been lost. Obviously no leader, no NAK. However, it still has them in its send-buffer. I presume it will try re-sending them (or re-connecting to the new leader and re-sending). So if the (same) leader becomes reachable again, those messages will be delivered. Correct?\n2. the new leader is the one with the highest offset (of the commited log), obviously\n3. the new leader will let the client know, so that the client now knows where to re-send the messages since the last SM.\n4. The new leader will distribute the commited log offset and start replicating his own uncommited log (if any) and that new messages are appended at the end of the uncommited log \nSlight improvement idea:  if a Follower realizes quorum is lost, it becomes a candidate and it could append to their own uncommited log any message they receive (e.g. in a multicast situation) and after becoming the leader they will first replicate the messages received during its candidate status. Messages after reaching LEADER status would be appended at the end of the uncommited log.\nSo combining the above (and assuming my presumptions are correct) it would mean no messages would get lost as long as there is at least a single node running. Either because the client keeps resending the messages since the last SM, or because the client will(?) try-to resend the very same (assumingly undelivered messages) to the newly elected leader.. ",
    "hwasin": "Sub-session is a usage of shared concurrent publication by some process (thread) and all these sub-sessions share same session-id1 (by definition) and stream-id1, because for another stream-id2 separate session-id2 is going to be generated. And here i cannot understand, how to share multiple different stream-id1 and stream-id2 in one session-id as defined in Stream definition above.. @tmontgomery, but from aeron implementation perspective i can't get it how to share a single Session ID on 2 different Stream IDs. it seems to me that I'm missing something.  Is there any sample?. Now i get it. Thank you very much.. hs_err_pid43412.log\n. attached another log but with same cause. I think you are right. Aeron.Context::aeronContext.close() is called in my code. After removing it, the error has gone. Does it mean that i should not close aeronContext in my code, but it should be closed through CloseHelper.close(mediaDriver)?. I get it. Thank you very much.. ",
    "mattgodbolt": "Hi @mjpt777 sorry for the late reply. I'm using an embedded driver so I can't easily tell. I'm debugging the client though.. I just upgraded to clang-tidy 7.0.0 and see the same issue still. It does look like a false positive though, but it would be great to boil this down to a small repro case to give to the clang folks.. +1 to this. I started a quick spike but got distracted by my day job. Doesn't look like it's too much work though.. ",
    "kostya-sh": "Thank you for your answer.  Also thank you for correcting my understanding that NAKs are not used on overrun.\nJust to clarify further I used StreamingPublisher to make it easy to reproduce and demonstrate the described situation. In our real app this happens much less frequently (~1 time a week with normal conditions and up to once every hour during stress test). We would prefer a slow subscriber to drop old messages in the event of a burst. At the moment however it stops receiving messages for image liveness timeout time (that we set to 1 second). Do you have any recommendation how to configure Aeron for this use case?\n. Thank you for the helpful advice.. ",
    "helmesjo": "You're welcome! :)\nYeah, off_t is apparently found in <sys/types.h>. That header is included in MemoryMappedFile.cpp, but should perhaps then have been included in MemoryMappedFile.h instead, before declaring the class.\nHere are the settings & options passed to conan when building the package:\n+------------------------+\n| Profile                |\n|------------------------|\n| include(default)       |\n|                        |\n| [settings]             |\n| arch=x86               |\n| build_type=Release     |\n| compiler=clang         |\n| compiler.libcxx=libc++ |\n| compiler.version=3.9   |\n| [options]              |\n| aeron:shared=True      |\n| [env]                  |\n|                        |\n| [build_requires]       |\n+------------------------+. Fixed! @mjpt777 . @tmontgomery Added link to patch notes for VS regarding this change if it adds some value.. ",
    "dpcleve": "I actually got this working.  I was simply not waiting long enough.  I was seeing the \"warming up...\" but would not see the \"pinging 1000000 messages\".  But after I tried again and waiting for a long time, it appeared.  Checking aeron-stat shows bytes transferring, albeit very very slowly.  Around 260 pings per second.  Its been running for over and hour and still not completed.... ```\n[Mean    =     5402.143, StdDeviation   =     1204.851]\n[Max     =    73531.391, Total count    =      1000000]\n[Buckets =           24, SubBuckets     =         2048]\n```. ",
    "AlphaMufasaOmega": "why would multicast be so impossible on a carrier network? whose to say such a program for mobile has to be compiled on a mobile phone?. ",
    "QIvan": "before creating the issue I did git pull and rechecked the problem \ngit hist \n* d96528f 2018-10-03 | [Java]: make sure to remove MDC control param from URI for live destination. Aded tests for bringing back clean followers. (HEAD -> master, origin/master, origin/HEAD) [Todd L. Montgomery]\n* bfd1271 2018-10-03 | [Java]: make sure to check that transport hasn't been removed before comparing channel. [Todd L. Montgomery]\n* 5a1f9f1 2018-10-03 | [Java]: use replayId from follower when stopping replay for catchup. [Todd L. Montgomery]\nthe branch is master of course.. wow! That was really fast! Thank you! \nChecked the output now is: \n38:          302,401,152 - sub-pos: 5 -1883624095 10 aeron:udp?endpoint=localhost:40123 @0\n 39:          302,401,152 - rcv-hwm: 6 -1883624095 10 aeron:udp?endpoint=localhost:40123\n 40:          302,401,152 - rcv-pos: 6 -1883624095 10 aeron:udp?endpoint=localhost:40123\nIs there a doc about @0 ?  This value is still not clear for me.... if it's non-zero value that means the subscription started to listen a publisher not from the beginning. Right?\nok got it.\nThank you a lot.. for tags=123\n```\njava.lang.IllegalArgumentException: Aeron URIs must start with 'aeron:', found: 'tags=123'\n    at io.aeron.ChannelUri.parse(ChannelUri.java:314)\n    at io.aeron.archive.ArchiveConductor.newListRecordingsForUriSession(ArchiveConductor.java:332)\n    at io.aeron.archive.ControlSession.onListRecordingsForUri(ControlSession.java:148)\n    at io.aeron.archive.ControlSessionDemuxer.onListRecordingsForUri(ControlSessionDemuxer.java:158)\n    at io.aeron.archive.ControlRequestAdapter.onFragment(ControlRequestAdapter.java:163)\n    at io.aeron.ImageFragmentAssembler.onFragment(ImageFragmentAssembler.java:109)\n    at io.aeron.logbuffer.TermReader.read(TermReader.java:77)\n    at io.aeron.Image.poll(Image.java:294)\n    at io.aeron.archive.ControlSessionDemuxer.doWork(ControlSessionDemuxer.java:83)\n    at io.aeron.archive.SessionWorker.doWork(SessionWorker.java:56)\n    at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:268)\n    at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:161)\n    at java.lang.Thread.run(Thread.java:748)\nio.aeron.exceptions.TimeoutException: awaiting recording descriptors - correlationId=19\n    at io.aeron.archive.client.AeronArchive.checkDeadline(AeronArchive.java:948)\n    at io.aeron.archive.client.AeronArchive.pollForDescriptors(AeronArchive.java:1097)\n    at io.aeron.archive.client.AeronArchive.listRecordingsForUri(AeronArchive.java:792)\n    at io.aeron.archive.BasicArchiveTest.archiveTags(BasicArchiveTest.java:154)\n```\n\n\nand for aeron:tags=123\n```\njava.lang.IllegalArgumentException: invalid media: tags=123\n    at io.aeron.ChannelUriStringBuilder.media(ChannelUriStringBuilder.java:159)\n    at io.aeron.archive.ArchiveConductor.strippedChannelBuilder(ArchiveConductor.java:696)\n    at io.aeron.archive.ArchiveConductor.newListRecordingsForUriSession(ArchiveConductor.java:332)\n    at io.aeron.archive.ControlSession.onListRecordingsForUri(ControlSession.java:148)\n    at io.aeron.archive.ControlSessionDemuxer.onListRecordingsForUri(ControlSessionDemuxer.java:158)\n    at io.aeron.archive.ControlRequestAdapter.onFragment(ControlRequestAdapter.java:163)\n    at io.aeron.ImageFragmentAssembler.onFragment(ImageFragmentAssembler.java:109)\n    at io.aeron.logbuffer.TermReader.read(TermReader.java:77)\n    at io.aeron.Image.poll(Image.java:294)\n    at io.aeron.archive.ControlSessionDemuxer.doWork(ControlSessionDemuxer.java:83)\n    at io.aeron.archive.SessionWorker.doWork(SessionWorker.java:56)\n    at org.agrona.concurrent.AgentRunner.doDutyCycle(AgentRunner.java:268)\n    at org.agrona.concurrent.AgentRunner.run(AgentRunner.java:161)\n    at java.lang.Thread.run(Thread.java:748)\nio.aeron.exceptions.TimeoutException: awaiting recording descriptors - correlationId=19\n    at io.aeron.archive.client.AeronArchive.checkDeadline(AeronArchive.java:948)\n    at io.aeron.archive.client.AeronArchive.pollForDescriptors(AeronArchive.java:1097)\n    at io.aeron.archive.client.AeronArchive.listRecordingsForUri(AeronArchive.java:792)\n    at io.aeron.archive.BasicArchiveTest.archiveTags(BasicArchiveTest.java:154)\n```\n=(. @tmontgomery cool! \"Alias\" sounds good. Could you describe the difference \"tags\" vs \"aliases\"? \n. hmm... if the driver doesn't interpret an alias who does? . ahhh i see. I just use tags as aliases right now. But in fact a human-readable word is much-much better then a number. \nThank you very much for your explanation i'm looking forward this feature =) \nBTW may be io.aeron.ChannelUriStringBuilder#tags(java.lang.String) should get an Integer parameter instead of String as soon as tags are numbers only?. oh.. i guess you're right, sorry. \nanyway i verified Martin's commits, it works! \nThank you very much. . @mjpt777 Ok got. The good point about @Ignore thanks. . if we have 2 records: \n0 -> [0 ... 100]\n1 -> [0 ... 200]\nthen we truncate recording 1 to the 0 position. Now we have \n0 -> [0 ... 100]\n1 -> [0 ... 0]\nRight?\nIs it possible somehow to completely remove  a recording then? . > it does feel like you get what you deserve if you do this. ;-)\nIn fact I aggree with you. That was just my duty to report about such way to crush the Aeron which I met in our code. Anyway feel free to remove the code and close the issue.\n\nBTW this does not build. You need to run the build before submitting\n\noh really?... I'm awful sorry but I always run a buld before a push. Maybe I miss somethig this time because on my machine some of cluster tests fail... \nHonestly speaking I'm not fully understand the error\nThe command \"eval git fetch origin +refs/pull/614/merge: \" failed. Retrying, 2 of 3.. > The build failed due to checkstyle. The indent level was 8 in your PR but the project rules are for 4. I merged before the build Travis CI build completed and fixed it.\noops, i'm sorry... That's strange because i fixed this indentation, may be it's some IDE trick. Anyway I'll be careful next time. \nThanks! . we can't assert this conditionals here. Right? \nBecause a publication is connected if there is at least one subscription but here it might be either subscription1(2) or subscriptionWildcard. ",
    "mo2menelzeiny": "@lukepalmer I'm using Ubuntu 16.4 LTS, why are you suggesting that I'd use DESTDIR rather than PREFIX and how would that impact the issue?\nI don't know if it's worth mentioning but I'm using cmake to build the my project so it finds the library and link to my executable using:\nfind_library(AERON_CLIENT_LIB aeron_client)\nfind_library(AERON_DRIVER_LIB aeron_driver)\nfind_library(AERON_AGENT_LIB aeron_driver_agent)\nand of course target_link_libraries to link them. @lukepalmer any updates on this?. ",
    "khvorov": "@mo2menelzeiny I've had a similar issue with my own project & 1.11.2. As a workaround you could try to add the following code to the top-level CMakeLists.txt of your project:\n```\nrelative file paths for use in exceptions\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__FILENAME__='\\\"$(subst ${CMAKE_SOURCE_DIR}/,,$(abspath $<))\\\"'\")\nset(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -D__FILENAME__='\\\"$(subst ${CMAKE_SOURCE_DIR}/,,$(abspath $<))\\\"'\")\n```. ",
    "weilip1803": "I have edited the initial post to have a comprehensive description. You are welcomed. Hope it get fixes soon. . ",
    "everymanhowdy": "\nThis can happen when the Aeron client is closed while being used by other threads. This can particularly happen with bad coding or in application experiencing GC pauses greater than 5 seconds and the client is considered inactive by the driver.\nWhat version of Aeron are you using? The latest 1.11.3 has some protections to makes this a bit less likely.\n\nI switch to the version 1.11.3 but the problem still remains.  I want low latency, thus the sample code borrowed are from SimpleSubscriber.java, SimplePublisher.java, and LowLatencyMediaDriver.java. So the way my code gets ran is to place media driver, publisher, and subscriber in 3 different threads or alike. The main logic of starting Aeron remains the same as sample code. (Code has be simplified)\nval barrier = new ShutdownSignalBarrier\nval driverIO = ... { // constructing thread\n    val driver = MyMediaDriver.create().start\n    barrier.await\n    driver\n}\n\nval subscriptionIO = ... { // constructing subscription \n  val aeron = Aeron.connect(ctx)\n  val sub = aeron.addSubscription(...)\n  sub.receive {\n    (buffer, offset, length, header) =>\n      val data = new Array[Byte](length)\n      buffer.getBytes(offset, data)\n      val hello = new String(data)\n      assert(\"hello\".equals(hello))\n      false // for setting `running` variable to false instead of calling SigInt (https://github.com/real-logic/aeron/blob/master/aeron-samples/src/main/java/io/aeron/samples/SimpleSubscriber.java#L50)\n  }}\n}\n\nval publicationIO = ... { // constructing therad \n  val aeron = Aeron.connect(ctx)\n  val pub = aeron.addPublication(...)\n  pub.send (\n    messageBytes = \"hello\".getBytes\n  )    \n}\n\n// 1. start running media driver first\n// 2. then subscription thread\n// 3. next publication thread\n// 4. calling barrier.signal \n// 5. stop subscription \n// 6. stop publication \n// 7. stop media driver\n\nIs this the right way to execute the code or what is the right way (correct order, and so on) if I want to start up a process in which aeron would be instantiated to send and receive messages?  (Java Programming Guide in wiki contains some information but I don't find the difference between my logic and that described in Java Programming Guide. Perhaps I miss something) \nI appreciate any suggestions. \n. I suppose I find the problem now. It's because before closing Aeron client (the code does close Aeron client) I do not check if it's already been closed.  \nThank you very much for helping out. Really appreciate it! . ",
    "epickrram": "Could this be a problem with a Timer being hydrated from the snapshot:\nhttps://github.com/real-logic/aeron/blob/master/aeron-cluster/src/main/java/io/aeron/cluster/ConsensusModuleSnapshotLoader.java#L122\nPresumably the snapshot needs to be loaded before replay can begin, and it seems as though the replay messages/ConsensusModuleAgent duty cycle are responsible for setting cluster time. If that's the case, then the timer will be added to the TimerService before its current time has been set.. @JPWatson has pointed out that we're scheduling a timer in ClusteredService.onStart, which I guess isn't the correct time. Will fix that up and keep an eye on the logs.. Probably worth having at some point, but I'll close the PR while I get around to re-working it.. ",
    "Sraw": "@mjpt777 Thank you for clarification. So I understand this is not a bug but an expected behavior. But how to config a shared media driver? Do you mean we just need to config aeron.dir to the same directory then shared media driver will be used automatically?. Thanks, I understand.. ",
    "longwallstreet": "Thanks. C# code.. ",
    "yfinkelstein": "Thanks for mentioning this. I was not having any idle strategy settings specified, which means a noop policy as I understood after looking at the code. It would be good to mention existence of these policy names for C++ programs in your documentation:\n```\nstrategies: sleeping, spinning, yielding, noop\nstrategy=sleeping\nexport AERON_CONDUCTOR_IDLE_STRATEGY=$strategy\nexport AERON_SENDER_IDLE_STRATEGY=$strategy\nexport AERON_RECEIVER_IDLE_STRATEGY=$strategy\nexport AERON_THREADING_MODE=DEDICATED\n``\nHowever, even withsleeping` and no workload the driver app is using ~30% of a single core on linux and ~80% of a core on my mac laptop. \nSo, is there a way to not consume CPU in idle state?. \nNote the number of idle wake-ups on mac after just few min of idle run . It does not have to be so binary. Looking at this code: \n```\nstatic void aeron_idle_strategy_sleeping_idle(void *state, int work_count)\n{\n    if (work_count > 0)\n    {\n        return;\n    }\nnanosleep(&(struct timespec){.tv_nsec=1}, NULL);\n\n}\n```\nyou could easily implement exponential sleep time policy where you start with 1 nano and let it grow to 2^n by doubling. Let the user configure the value of n. Given that the policy is accessed by the same thread you just need thread-local memory of the last sleep value used.\nWould like a PR with this?. ",
    "LordNacho": "@tmontgomery any chance I can get you to bump the tag to 1.13.1?. Does this fix pass all the tests now?. ",
    "dmks": "@mjpt777 Thanks for the quick reply. \nI'm very new to aeron, so the questions might be stupid. \nAs you said, \n\nYou only need to run an archive on one machine to record messages and replay them.\n\nDoes it mean I only need to run archive_media_driver on the publisher machine and run a regular media_driver on each of the subscriber machines? \n\nThe archive clients need to be configured to address the archive on the publisher in this case.\n\nWhat do you mean \"archive clients\" here? are they the subscribers? \n\nIf you restart the publisher it will create a new recording as this is a new session. It is possible to extend an existing recording if you wish to have a single continuous stream.\n\nThanks, extending an existing recording is exactly what I want, however, I didn't see any wiki to configure that.  Would you mind to point out the example? \n\nWhen running with multicast the choice of flow control strategy is important. The default \"max\" strategy can leave behind the slowest. \"Min\" and \"Preferred\" are options.\n\nI see, I also see there are another mode called Multi-Destination-Cast, so in terms of performance, which one is faster? Multicast or MDC? what tradeoffs are there we need to consider?\nThanks a lot.. ",
    "aptdevel": "Thank you for the quick turnaround.. ",
    "farnyser": "I'll have a look at the warnings and hopefully it'll fix the OSX tests. . I have less time to look into this this week, but I will try to address all the points you mentioned. \nShould I close the PR until then ?. Hi @tmontgomery \n\nflags to file view, etc. need to accommodate some of the options that reflect the other platform behaviors. The defaults do not.\n\nCan you give me some details on that point ?\nAlso, i'm not sure about my fix to support static linking. Do you have a better idea than what I did in the aeron_dlopen.c file (https://github.com/real-logic/aeron/pull/610/commits/b6e427fe4066d8c0817678746d7d4305bdfa526b) ? \n. @mjpt777 Hi, I Think I have addressed all the point you mentioned (but the one about the flags to mmap https://github.com/real-logic/aeron/pull/610#issuecomment-455169686) \nCan I do anything else to help go forward with this PR ? . It is needed to replace getifaddrs\nIt uses theses functions:\nif_nametoindex\nGetAdaptersAddresses\nConvertLengthToIpv4Mask. For Linux/Mac I have \nvoid proc_yield()\n{\n    __asm__ volatile(\"pause\\n\": : : \"memory\");\n}\nFor Windows I use \n```\ndefine proc_yield YieldProcessor\n```\nwhich should expand to pause through _mm_pause. I'm not sure I understand in which scenario this would be a problem for:\nIf you are building for cygwin, wouldn't you use gcc/clang ? (in which case, AERON_COMPILER_MSVC would not be defined)\nTo support this, we'll need to create an indrection for all that code and the shared/linux code will be impacted too. Is that what you mean/want ? \n. I though you guys wanted to stay with C ?\nI removed all the C++ code, so it should be fine in C11 now. . MSVC does not really support C11, and stdatomic.h does not seems to be supported.  . ",
    "msalai": "Is C media driver for Windows now fully functional?. So this is partially functional, or not functional at all for now? I would like to use it in my project but don't understand in what phase of development for c/c++ it is currently. Does it just need testing or what?. I understand. Is compiled (Windows) version of c/c++ driver available somewhere online since I am unable to build it and I would like to test it?. ",
    "harnitb": "Hi Todd I will retest with the keep alive interval adjusted. But my point was there was no exception seen in both the publisher and subscriber. In our test environment we have the client liveness timeout around 30 seconds and keep alive is unchanged and still it happened\nWill post another run shortly . ",
    "harnitbakshi": "Hi Todd,\nI replicated this again with the following settings:\n- keepAlive was set to 250 ms\n- clientLiveness was set to 300 ms\nWhat I see again is the Publisher happily offers successfully, the image becomes unavailable on all the Subscribers\nSo here are the questions I have:\n\nIf liveness timeout has occured and the media driver does remove the publication and subscriptions. How is the publisher client able to successfully offer?\n\nYes I had set the timeout to 30 seconds due to thread starvation or GC. Mind you this situation has happened only twice in 6 months. That too under really heavy load when our engine is processing a lot of Market Data\n\n\nLastly my point is I understand we need to tune our system to handle this edge cases but there was no indication from the Publisher, even though all the other Subscribers were not receiving messages\n\n\nSo what I am pointing out is we are blind in production in this scenario :(. \nAny thoughts on recommendations on this? \nMartin here is the aeron-stat dump you requested:\n07:41:30 - Aeron Stat (CnC v14), pid 2751\n======================================================================\n  0:               14,624 - Bytes sent\n  1:               12,096 - Bytes received\n  2:                    0 - Failed offers to ReceiverProxy\n  3:                    0 - Failed offers to SenderProxy\n  4:                    0 - Failed offers to DriverConductorProxy\n  5:                    0 - NAKs sent\n  6:                    0 - NAKs received\n  7:                  119 - Status Messages sent\n  8:                  123 - Status Messages received\n  9:                  173 - Heartbeats sent\n 10:                  144 - Heartbeats received\n 11:                    0 - Retransmits sent\n 12:                    0 - Flow control under runs\n 13:                    0 - Flow control over runs\n 14:                    0 - Invalid packets\n 15:                    0 - Errors\n 16:                    0 - Short sends\n 17:                    0 - Failed attempts to free log buffers\n 18:                    1 - Sender flow control limits applied\n 19:                    0 - Unblocked Publications\n 20:                    0 - Unblocked Control Commands\n 21:                    0 - Possible TTL Asymmetry\n 22:                    0 - ControllableIdleStrategy status\n 23:                    0 - Loss gap fills\n 24:                    3 - Client liveness timeouts\n 31:                    1 - rcv-channel: aeron:udp?endpoint=localhost:40123\n 32:    1,547,345,490,262 - client-heartbeat: 2\n 36:    1,547,345,490,437 - client-heartbeat: 5.  Hi Todd,\nThanks so much for your answers\n\nSo, are you positive that the client didn't have an Inter Service Timeout on the publisher? I mean it is possible that the client due to timing misses the service timeout, but the driver times out the client, but unlikely.... \n\nI did not see any Inter Service Timeout, which I was expecting to see as well\n\nAlso, you said the publisher Images went unavailable on the subscription side.... why is that not an error for the system? Is it expected? \n\nActually when this first happened it happened during the shutdown/startup phase of all our applications on our test machine. Also when this happens, I have noticed bouncing subscribers does not help until the publisher was bounced, subscriber simply waits for subscription\nAlso in the test code for BasicPubilsher there is a code which checks publisher.isConnected, so this would also never detect the disconnection from subscribers?\nUsually an image not available is an alert we do receive. I am just thinking what are our options here:\n\n\nWhat is the best way to detect live publication and live subscribers in a pub sub environment?\n\n\nIs there any way to recover from such a situation, that is detect dead publisher for example on publisher side and then close and restart the publisher programatically. At this point the offer returns normally.....\n\n\nOr is the only other option to monitor alerts and have someone to bounce processes manually? This would not be a great option \n\n\nPlease let me know thanks \n. \u201cThey will get back pressured once this buffer is exhausted or when the status message timeout occurs from the receiver which is 5s by default.\u201d\nHi Martin I do not see this happening. I could offer well over 5 seconds, I waited for over a minute and the publisher still offered. Hi Martin will run the tests again in some time and let you know thanks . Hi Martin,\nI ran the tests again, this time its a bit better but still not completely correct, I see the following\n- Both runs employ one Publisher and two Subscribers, transport is IPC\n- First run I see that the Publisher detects that no subscriber is connected, that is return code for offer is NOT_CONNECTED. One subscriber prints image unavailable, the other subscriber does not print anything, instead just stops receiving messages. After I kill both subscribers and restart them they can never get any subscription, meanwhile Publisher keeps printing NOT_CONNECTED. If I bounce the Publisher only then I can get a subscription going again\n- Second run I noticed that after some time the Publisher returns BACK_PRESSURED for the entire test. One subscriber prints image unavailable, the other subscriber does not print anything, instead just stops receiving messages. Even after killing both subscribers, the Publisher keeps printing BACK_PRESSURED well after the subscribers are killed. After I restart the subscribers both cannot get the subscription. If I bounce the Publisher only then I can get a subscription going again\nIs this what you expect to happen here? If yes then how could someone recover from such a scenario. Hello, could you please tell me what is meant by close on wrap?. Got it thanks. Hi Todd/Martin,\nThank you for reverting this so quickly much appreciated, I have tested this and I can see the ClientTimeoutException being received via the errorHandler. Also the Publication is closed on wrap. Hi Todd/Martin,\nWhen do you think is the next release? And is there any chance of back porting this fix on 1.10.x\nThats the version we are currently on\nPlease let me know thank you. ",
    "cowwoc": "@mjpt777 What about just adding an Automatic-Module-Name to MANIFEST.MF? Surely that is easy/quick to do?. @mjpt777 Sure. What module names would you like?. @mjpt777 I'd break it down the same lines as https://search.maven.org/search?q=g:io.aeron\nSo your module names would probably be io.aeron.driver, io.aeron.cluster and so on.. Very cool. Thanks Martin.. ",
    "segabriel": "@mjpt777 Hi\n\nBefore reviewing this in any detail you should note that it does not pass the build which should be a minimum.\n\nyeah, there are some problems with checkstyle.\n\nCan I ask why does a simple latency test require fork-join pool? This seems total overkill.\n\nwithout this, I receive Aeron exception occurred: io.aeron.exceptions.AeronException: reentrant calls not permitted during callbacks. @mjpt777 Thanks a lot!\nI rewrote my tests with already existing ping/pong examples. And I changed only URI channels which they should use and all examples were with enabled of embeddedMediaDriver (https://github.com/segabriel/aeron/pull/2). \nSo results of existing ping/pong gave me: \n```c\n[Mean    =      145.634, StdDeviation   =       82.711]\n[Max     =    21200.895, Total count    =      1000000]\n[Buckets =           24, SubBuckets     =         2048]\n```\nand the same but with using of control endpoint gave me:\n```c\n[Mean    =      200.594, StdDeviation   =      118.529]\n[Max     =    20479.999, Total count    =      1000000]\n[Buckets =           24, SubBuckets     =         2048]\n```\nand results of sending without waiting of its responses (because the previous\u00a0tests sent one request and waited for its response, so I changed a bit this behavior):\n```c\n[Mean    =   114167.109, StdDeviation   =     8795.130]\n[Max     =   141688.831, Total count    =     10000000]\n[Buckets =           24, SubBuckets     =         2048]\n```\n. Then I added simple backpressure support (I send several limited messages and when the limit is achieved I stop sending and wait for responses when they will equal to the specified limit and then again begin sending) and it looks like better and pretty well:\nhere is the results for aeron.sample.request=8:\n```c\n[Mean    =      149.115, StdDeviation   =       63.623]\n[Max     =     6471.679, Total count    =      1000000]\n[Buckets =           24, SubBuckets     =         2048]\n```\nfor aeron.sample.request=16:\n```c\n[Mean    =      167.663, StdDeviation   =       88.051]\n[Max     =    10395.647, Total count    =      1000000]\n[Buckets =           24, SubBuckets     =         2048]\n```\nand for aeron.sample.request=32:\n```c\n[Mean    =      169.890, StdDeviation   =      125.346]\n[Max     =    10387.455, Total count    =      1000000]\n[Buckets =           24, SubBuckets     =         2048]\n```. Ok, but I didn't find a DirectBuffer allocator which I can use to allocate buffers inside it and reuse them to reduce allocate memory. \nI'd like to send buffers and receive them asynchronously even though it will in one thread of eventLoop. \nOk, maybe I need to create only one buffer and reuse it. But I don't know about its potential size.\nI used to have netty-buffers and I could allocate and release them easily.. ",
    "mianos": "Needs some more work for the other unit tests. I'm onto this now.. I seem to have broken the UDP channel parser but in debugging it I hit this line:\nhttps://github.com/real-logic/aeron/blob/master/aeron-driver/src/test/c/aeron_udp_channel_test.cpp#L85\nand I can't figure out why it subtracts one from the string. If you are not going to use this pull request and do it in your own manner go right ahead and I'll use my fixed version with the broken tests until you get yours in master.. ",
    "ZachBray": "Sorry about that. Should be passing the checkstyle build now.. I may be wrong but it looks to me like the follower gets stuck in a while loop inside ConsensusModuleAgent.catchupLogPoll().\nwhile (!missedTimersSet.isEmpty()) ...\nThe follower adds timer event to its missedTimersSet when replaying.\nThe ClusteredService on that follower is never called with onSessionMessage() to register the timer.. FYI this seems to surface when using the ClusterTool but not when running a cluster node. Whilst they both construct ClusterMarkFiles they do so using different constructors. Only the ClusterTool ends up executing MarkFile.mapExistingMarkFile(...) which contains this check that the version is not 0.. I've tried varying the expiry. At 10_000 milliseconds the test does not fail. It seems TimerService.onTimerExpiry() must be triggered on the leader for the test to fail.. This should probably be lower to reduce \"intermittency\". ",
    "BodySplash": "That means also, that most commands in io.aeron.cluster.ClusterTool are not working. \nI guess an easy solution would be to change codecs version from 0 to 1, but I'm not sure what would be the impact. . "
}