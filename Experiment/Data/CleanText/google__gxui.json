{
    "ben-clayton": "Hi mattn,\nBlimey, that was quick - GXUI has only been public for about about 18 hours. I was hoping for a quiet launch so I had time to tidy the source. :)\nThe COMPILE_STATUS test looks like the correct solution. Is this enough to fix your problem?\nIt appears you have signed Google's Contribution License Agreement. Is this correct?\n. > > Because even though COMPILE_STATSUS become GL_FALSE, the log returns No errors.\nRight - I think the problem is that you're checking COMPILE_STATUS for both the shader and the program.\nYou probably want:\ns.Compile()\nif s.Get(gl.COMPILE_STATUS) != gl.TRUE {\n    panic(s.GetInfoLog())\n}\nand:\nprogram.Link()\nprogram.Validate()\nif program.Get(gl.LINK_STATUS) != gl.TRUE {\n    panic(program.GetInfoLog())\n}\nDo you mind seeing if making these changes fixes your issue?\n\n\nYes, I had already signed CLA for golang/go.\n\n\nGreat.\n. LGTM. Thanks!\n. Hi jingweno,\nYes, unfortunately the go-gl-legacy/gl library (which GXUI currently depends on) has a dependency on the GLEW library. \nI can confirm GXUI runs on Windows, OSX and Linux, but the GLEW is the most difficult aspect of getting these various targets to build. I will be looking to simplify / remove this GLEW dependency in the near future.\nIn the meantime, please try following information on: https://github.com/go-gl-legacy/gl\n. @slimsag Thanks Stephen - I've updated to use v3.2-core instead.\n. This should now be fixed after running:\n    go get github.com/go-gl/gl/v3.2-core/gl\n. Hi hajimehoshi,\nThanks for making the fix - even for tiny changes like this one I require you to sign the Google Contributor License Agreement before I can accept the PR.\n\nBTW, I wasn't able to the execute samples without data/SourceCodePro-Regular.ttf. Do you have a plan to put this file to the repository?\n\nI would need to look into whether the license would permit that first. What I'll probably do instead is add some platform dependent code to find a font in the OS's font directory instead. It's a bit rubbish requiring assets just to get some text on the screen.\nCheers,\nBen\n. Great, thank you.\n. I've started the os_fonts branch to search the OS's fonts directory so we can use Arial or something equally common as the default font.\nI need to implement and test for Windows and Linux, which I'll try and do tomorrow.\n. In e44108536, I've changed the default font to Arial.ttf and it now searches the OS font directories. In theory, you no longer need to download any fonts or set the --data= command line argument.\nI've tested windows and OSX, hopefully Linux will also work.\nPlease re-open if you have issues.\n. LGTM. Please can you fill out the Google Individual Contributor License Agreement. This is required before I can accept any PRs, and only has to be done once per contributor.\nMany thanks,\nBen\n. > Do I need to give you any info so you can find it?\n\nNope. I can see it. Thanks!\n. Hi @ShawnMilo - I've made a couple of pushes today that mean GLEW is no longer a dependency, arial is now the default font, and the OS font directory is now searched. Please give this a try - let me know if there's still issues for you.\n. Have you tried the libgl1-mesa-dev package?\n. Thank you.\n. Thank you.\n. Fixed with 08c95fe9c1\n. Hi @tinycedar - that's unfortunate. The hardware specs seem unusual - is this a tablet? It's very odd to find a driver that supports shader model 4, but only GL 1.1.\nUnless you're able to update the drivers to a version that supports a more recent OpenGL API, I'm afraid there's little I can do to help for now. I suppose someone could write a Direct3D driver...\n. I'm afraid there's little we can do to help at the moment. Maybe in the future we can implement alternative drivers or use angle like @crawshaw suggests. Closing for now.\n. argh. So I added some code to look for fonts in the directories specified by FontPaths, I'm guessing Arial.ttf isn't in any of those places? Maybe it is, but has the wrong case?\nI'm guessing your system has an arial font somewhere, do you know where it might be found?\n. I'm not sure what the best option is in this case. \nObviously any text rendering requires a font. With e44108536, the driver scans the known OS font directories, but if we're trying to support a set of operating systems that have no common fonts, then this approach just isn't going to work.\nThe only real option would be to include a font with the GXUI library - which is doable, but has its own problems:\n- We'd have to find a font that looks good and doesn't have any licensing issues.\n- GXUI will have to be told the directory of this font. This is effectively what the --data command line argument does, but I was hoping to try and remove this as it is additional complexity to getting something on the screen.\n\nI can start investigating what our options are with a bundled font. In the meantime, to run the samples you should be able to take any font you like, rename it to Arial.ttf and set --data to the directory that it sits in. For applications you develop yourself, you are always free to call Theme.SetDefaultFont before any text controls are created.\n. I'll keep this issue open as a 'we need bundle a font' issue. It's good to keep the context why.\n. This should now be fixed as we bundle a font. Please let us know if you have more issues.\n. That's great news - thank you for confirming!\n. Please try running:\ngo get code.google.com/p/freetype-go/freetype/raster\nTo explicitly fetch that project. I also noticed that automatic dependency fetching was a little flaky on windows earlier today. \n. Sorry - that's what I should have said in the first place.\nGlad it's now working for you. I've updated the readme to include the dependencies. Hopefully this should avoid this sort of frustration in the future.\nCheers.\n. Thank you. I should probably invest in a spell-checker.\n. Thank you - I'll probably expand on the samples section.\n. LGTM - Thanks\n. Also, if you chose to roll your own image copy function instead of using the one in the image/draw package because of the flipped-y axis, you can use Texture.SetFlipY. \nAs this is an example that will probably be copied (no pun intended), I would prefer it if we used Draw unless there's a good reason not to.\nCheers,\nBen\n. Accepting, and making the changes myself.\n. > BMP is a legacy of past, it stores stuff upside down. Why does this library expect images upside down?\nThe reason isn't a good one, but is based around how GL expects the image data. You are correct though, it's broken on the public API where this really matters. I'll create a bug to get this fixed.\n. > First of all, thanks for starting this project! I think there's a lot of promise in a native Go UI library and I'm looking forward to how it will develop!\nThank you and welcome.\n\nI don't know about you, but what I find disagreeable about the fonts in GXUI is the lack of subpixel rendering.\n\nThis is certainly likely to be a contributor to the poor quality and I definitely would love to have support for sub-pixel rendering, but is unfortunately a minefield for patents. Last time I checked sub-pixel rendering was still disabled by default in freetype.\nI'm sure there's other things that could be done to improve the quality though. Glyphy looks interesting, although the pre-computation and rendering cost seems quite scary.\n. MSAA does not affect texture sampling. It is only used to anti-alias the polygon edges, which in the case of the glyphs should always be fully transparent.\n. > Ah, so each glyph is just a textured quad?\nYes. A very brief overview of how they work:\n- Font.DrawRunes is called to draw a bunch of glyphs.\n- As windows can be dragged between differing DPI displays, the glyph table is looked up for the current resolution.\n- Each rune is iterated over and is checked to see if it has already been rasterized. If it hasn't then the glyph gets rasterized into the first page (texture) with free space.\n- Rasterized runes are then sent to the blitter to be rendered.\n- blitter.blitGlyph accumulates these calls into a buffer so that glyphs can be drawn in batches. These batches get submitted when the glyph page changes or something other than a glyph needs to be drawn. This is one of the reasons Font.LoadGlyphs exists - having frequently used glyphs in separate glyph pages will increase draw call count and severely impact render performance.\n. > Any suggestions on what kind of format you want this in?\nGodoc.\n\nShould we just start playing and documenting what we notice?\n\nIf you end up changing something and/or feel confident in how something works, feel free to issue a PR adding more documentation - it saves me some time and would be much appreciated!\nI am adding documentation whenever I touch a public interface, but it might take me some time at this rate though.\nMany thanks.\n. Hi Daniel,\nIf I understand you correctly, you are asking if the List / Adapter implementation has any form of control recycling. The answer is no, but if we find that this is a performance problem, I don't object to adding it - it would be trivial to add a Destroy method to Adapter that complements the Create.\nI have however seen no real performance problems to suggest this is currently needed - the Go GC certainly seems fast enough for very large datasets on the machines I've tried. For example, one application we have has 250,000 items in a list, each with many sub-controls, and we can quite easily scroll through them without any noticeable stuttering.\nI hope this answers your question.\n. Closing this for now.\nUntil we can prove the lack of recycling is an issue, I'm going to consider this WAI.\n. @dskinner I'm not so sure - one of the design goals of GXUI is that an application should appear identical on all OS's. I'm not keen on having the driver pick a OS specific font, as it will change all sorts of layout calculations.\n. @crawshaw thanks - I'll take a look now.\n. @dskinner I'm not sure I agree. If fitting in with the rest of the user's OS appearance was a goal, then we'd be using the native platform's windows, controls and widgets and this would result in a very different UI library.\nFor the good or bad, GXUI was designed to be cross platform in a way that means you don't have to spend time worrying about how it would look or behave on numerous other OS's. Things like switching fonts may seem minor, but in reality means that the whole UI needs to be manually tested for each target OS. If you want to do this with your application, that's fine - the API allows you to change fonts, but this is not something I want forced on every user of the library.\nIf you would like to have the ability to use the current desktop font in your GXUI application, then please file a request, and I'll see if we can add this to the soon-to-exist font package.\n. @crawshaw is there any reason why the methods couldn't be absorbed into https://godoc.org/golang.org/x/image/math/f32? It's not going to break compatibility.\n. argh, wrong button\n. But then again, it's a bit weird to have that sort of math in an image library.\n. If the methods cannot be brought across, I don't really see the gain in switching to the f32 package - does it not contain just 7 typedefs? Do you see common functionality between GXUI and f32?\n. Yup mgl32 looks like a pretty good replacement. It doesn't have my fantastic unicode art though. :)\n. Sounds sensible - we'll have to implement word-wrapping first.\n. @sesteel Hi - I just took a lot at your project. The similarities are extraordinary. It looks like we had very similar ideas in design.\nIf you'd like to contribute more layout components to GXUI, we'll accept them with open arms.\nBe aware though that I'm in the middle of reworking the Control layout logic, and the whole mixins pattern will probably be vaporized once we figure out how to structure the components the Correct Way.\nKind regards,\nBen\n. @sesteel - It's great to have you on board!\nBefore spending any of your valuable time writing large chunks of new code, please create an issue so that we know it's coming. This means we don't end up implementing the same thing, and we can discuss the pros and cons of various approaches ahead of time.\nMany thanks,\nBen\n. Hi @sesteel. It's in a much better state.\nIf you can get your head around the mixins, I'd say go for it. Feel free to ask many questions, and run lots of code by me. Hopefully if and when you hit issues, I can document and make fixes along the way.\n. That's odd - do you know if any other OpenGL applications run successfully on this machine?\n. Care to elaborate?\nWhat errors are you getting? \nWhat build environment have you set up?\n. I cannot help you without additional information. If you are still having issues, please post more details and reopen.\n. Thanks @crawshaw!\n. The X11: RandR gamma ramp support seems broken message appears to be coming from glfw/x11_init.c.\nThe preceding comment says:\nC\n// This is either a headless system or an older Nvidia binary driver\n// with broken gamma support\nAre you using an old NVIDIA driver?\n. Okay, that's not something I would expect to work unless you somehow switch to a software renderer. Unless someone smarter than me can guide you on how to do this, I'm afraid there's little I can do to help here.\n. Good investigation skills, Sherlock Noury!\nI'm afraid it looks like there's little we can do to help on this particular hardware. A software driver implementation would make it possible to use GXUI, but this is a long way off and would take some serious optimisation.\nClosing for now.\n. Thank you @haisum, I've added these dependencies to the README.\n. Thank you for creating the Wiki - this is really helpful.\nI will put the package dependencies on the README anyway as this seems to be a common problem.\n. If this README gets unwieldy, then I'll point people to the installation wiki page instead.\nThanks for your help guys. \n. Pushed ca02943971c8512202c965f95ab030757733852f, which shows a usage, drops the --file prefix, and shows decent error messages if the file cannot be found / loaded.\n. Thank you @Emasoft. I imagine it's possible with a lot of time, but we already have quite enough on our plate transforming GXUI into a usable library for Go.\n. I'm up for it :)\nLet me know if there's anything I can do to help.\n. @crawshaw - I know you're still getting up to speed on this, but I'd appreciate any feedback you might have.\n. > - I believe the Adaptor index is a flattened view of all of the children. Is this worth it? An adaptor could just index its direct children, and leave it up to the person querying the children to descend into the children.\nI'm guessing you're referring to the TreeAdapterNode?\nIf so - no, the index parameter of ItemAt is the index into the immediate descendants of that node [0 - Count-1]. ItemIndex is a little more complicated, in that it will return the index of the immediate descendants with that item or if that child contains the item indirectly.\n\n\nOnly doing direct descendants raises the possibility of making Adapter a concrete type with a linked list in it, and it containing a general interface with the element/theme-specific implementation. For example, see how the html package represents nodes: http://godoc.org/golang.org/x/net/html#Node\n\n\nIf I follow you correctly, this doesn't really seem much like my idea of an Adapter, but more like another concrete wrapper around the dataset. I agree with @dskinner on this - one of the big wins with this interface is that data can be streamed. This is something that we could really benefit from on our project that uses GXUI.\n\n\nI can't think of a practical situation where you would want more than one theme operating in a process. That leads to a tempting simplification: create a global variable that holds the active theme. A lot of parameters could be removed.\n\n\nHumm, interesting idea. I can't really think of one situation either. I'll mull it over.\n\n(I would usually send this to a mailing list, but we seem to be using github issues like a mailing list. We can keep trying this new world.)\n\nOn my 4th day of using GitHub, I'm actually quite liking it. Some aspects of code-reviews is a bit clunky, but given how angry Gerrit has been making me recently, this is actually quite refreshing. I'm also liking the markdown links - it works really nicely.\nShall we give it another week and see?\n. Branch merged.\n. Thanks!\n. Eww. This streams race condition.\n. I'm sure there is. It's a bit broken at the moment, and is on my TODO list.\n. @shurcooL - wow. That's a might impressive demo you have there.\n\nOpenGL 3.2 Core API is currently used in gxui [1]. But with a few changes (outlined in considerations section), it's possible to reduce what it used so that it can mapped to WebGL API.\n\nThis was a consideration I always had - I intentionally tried to keep the GL API to something that was relatively close to GLES 2 (and therefore, WebGL). Its great to see that you've proved the migration wasn't too hard.\n\nHere's a demo you can try in your browser (no gzip compression on served assets, sorry): http://dmitri.shuralyov.com/projects/gxui-tree/index.html\n\nThis is so figgin cool, I woke up my wife this morning and showed her. She had no idea what she was looking at, but I know she recognized it as figgin cool as I'd normally get punched for waking her that early on a Saturday.\n\nSince the three OpenGL APIs are similar enough, it's possible to create a Go package that has a single OpenGL-like API, but using build tags, it can have three different backend implementations depending on what is available on the given platform\n\nI like this idea - it doesn't stop us building new drivers for non-gl target either.\n\n\nglPolygonMode is not available in WebGL (since its implementation is very inefficient; a shame because it's useful for debugging). I commented it out since it was just a debugging feature.\n\n\nNo worries on this - it's put behind a false conditional anyway. If we wanted to keep it, we could put a function behind a +build rule, and stub the unsupported platforms.\n\n\nIndex buffers with uint32 types were used. It seems my WebGL implementation (latest stable Chrome on OS X) did not support that type, so I dropped it down to uint16 which worked well.\n\n\nI think needing uint32 for indices is going to be pretty rare. I have no objections to making it uint16 by default.\n\nMy WebGL implementation seemed not to support gl.UniformMatrix3fv calls with transpose equal to true, so I had to transpose the matrix before calling the gl func.\n\nThis surprised me, and I was even more surprised to find that actually this is completely correct behaviour. The GLES 2 spec (on which WebGL is based) states:\nThe matrix is specified in column-major order. transpose must be FALSE.\nWe can just make the transpose flag false and then flip the order of multiplies in the the shader to be VEC * MAT.\n\nWebGL fragment shaders require precision to be set, so I added this to all fragment shaders to allow them to compile under all OpenGL/WebGL versions:\n\nlow_p is probably too low for high resolution mobile displays. I'd also probably inject this based on a +build rule again - GLSL shader compilers are notoriously good at throwing wobblys over anything mildly foreign, even if it is perfectly legal. I'm actually amazed that I've not seen any shader compilation failure reports yet.\n\n\nPrevious commits read the font directly from disk via ioutil.ReadFile. This can't work on all other platforms, so it's better to read from a virtual filesystem and each platform can provide that. It's no longer a problem since latest version embeds the font in code.\n\n\nAcknowledged. @crawshaw's solution is a great one, leaving this complication to the application developer. I don't believe complexities of virtual filesystems belong in a UI package.\n\n\nMy existing gogl package happens to use a higher level-style API (similar to x/mobile/gl) with types like *Texture instead of uint32, and it favors using int over int32 or uint32 the way the low-level C-style github.com/go-gl/gl/... packages do.\n\n\nGo way, way, back to Wednesday and we were using go-gl-legacy which has a similar set of APIs. I actually really liked this interface, but in order to drop the GLEW dependency that was giving so many people grief we switched to go-gl/v3.2-core.\nWe could switch again, but I'm guessing @crawshaw might want to get involved in this discussion first.\n\n\nConsts like gl.TRIANGLE_STRIP are not const on all platforms. \n\n\nReally? Do you have any references to back this? I assume that's why you're copying all the GL constants into struct fields?\n\n\nThis issue is to demonstrate what I've created. I'd love to hear feedback and thoughts. If you are interested, I'd love to help out with adding support for mobile and/or web and taking this prototype further.\n\n\nMy thoughts are this is awesome and we should definitely discuss ways of making the gl driver more flexible to make this a thing. I'd like to wait for @crawshaw to share his thoughts, as he's been looking into what's involved in getting something running on mobile.\n\n\nThe imported package is v3.2-core/gl, so that's the API used, but since context version glfw hints are not set, it creates an OpenGL 2.1 context. Add this snippet after gl.Init() call to confirm:\n\n\nYeah, I kind of suspected this - I'll hold off making any changes until we figure out if we want to change GL libraries again.\nThank you Dmitri.\n. > What the mobile/app package should do is, for android/iOS what it does now, and on desktop, it should depend on a standard package that uses glfw.\nThis sounds ideal, but are you happy for golang.org/x/mobile to depend on libraries (directly or indirectly) outside of golang.org?\n\nI modify x/mobile/app to use gxwt in its desktop configuration.\n\nSimilar question, where will gxwt be hosted?\n. Even if it's not used for its primary purpose, you'd still end up with go get golang.org/x/mobile pulling projects from github though, right? Are there any other external dependencies with golang.org projects?\n. Is it okay to close this now @shurcooL ?\n. @BigBoneDaddy - It rather depends on the hardware. Some GPUs (mostly mobile) have limited floating-point precision, and so on some high-DPI display devices rendering may not be 'pixel-perfect'. However, for those devices, the error would probably manifest themselves as tiny texture bi-linear sampling errors and you'd probably not notice them.\nMost desktop GPUs I'm aware of would probably be pixel-perfect, ignoring bad GL implementations.\n. > (ignoring additional size bumps, of course)\nActually, there would not be any increase as the only theme directly pulls in gxfont anyway, which backs the idea more.\n. SGTM. Thanks.\n. @crawshaw please do you mind scanning your eyes over this?\nThere's no rush.\n. Thank you. Will push after testing a little more.\n. I tried using this to build an open-file-dialog sample, and I'm starting to have serious doubts over this approach. Basically, AdapterItems work great as POD types, not so great for more complex types, such as trees.\nLet me explain why:\nIn the case of a directory tree view, it makes sense for the items (the data) to be absolute paths, so a string is the natural item type.\nHowever, for expandable directories the item needs to implement the TreeNode interface, so we need to define a new type. The natural first thought is to declare a new type of string:\ngo\ntype path string\nBut now the implementation of TreeNode now becomes very inefficient:\n``` go\nfunc filesInPath(p path) []path { \n  / some very expensive code that should not be called frequently / \n}\nfunc (p path) Count() int { return len(filesInPath(p)) }\nfunc (p path) ItemAt(index int) AdapterItem { return filesInPath(p)[index] }\nfunc (p path) ItemIndex(item AdapterItem) int { / some complicated logic / }\nfunc (p path) Create(theme Theme, index int) Control { ... }\n```\nWorse still, this implementation is kind of broken - the file system could change at any moment, meaning indices could become invalid at any moment. So, we need some way to cache our view on the file system. Let's try again:\n``` go\ntype file struct {\n  path string\n  children []file\n}\nfunc (f file) Count() int { return len(f.children) }\nfunc (f file) ItemAt(index int) AdapterItem { return f.children[index] }\nfunc (f file) ItemIndex(item AdapterItem) int { / some complicated logic / }\nfunc (f file) Create(theme Theme, index int) Control { ... }\n```\nLooks better - but this doesn't work. AdapterItems \"must support equality and be hashable\", which file now isn't because of the children []file field.\nOkay, so, let's make the AdapterItem a pointer to the file. The contract for AdapterItem is now good, but now it's impossible to use Tree.Select without adding adapter traversal functions, as we can't trivially get the pointer to the file at the specified path. sigh\nAll of this has made me realise that this new TreeNode interface is on the wrong thing - AdapterItems are the data. The Adapter is responsible for transforming that data into something that can be visualized, and this is where the methods of the  TreeNode interface belongs (just probably not with those signatures).\nI'm still not happy with what's in master, but this approach doesn't seem any better.\nOpinions, thoughts or suggestions are welcome on this.\n. Closing in favour of the second attempt.\n. Nope, they were written to behave similarly, but I can completely believe I've screwed up some of the logic - as you can see it's full of fiddly DIP -> pixel space conversion, ascent and alignment calculations.\nI'm not opposed to killing Draw and keeping the more explicit APIs.\n. I believe this to be fixed. Closing.\n. > Enabling the layout border to be drawn it can be seen that the layout size is not adapting to changes in the window size. \nI assume you're referring to LinearLayout. If so, this layout is really simple / dumb - it will start from either the top (for vertical orientation) or left (for horizontal orientation), and layout each of the children to their desired size. The desired size is always limited to the remaining space, which decreases with each consecutive child layout.\nYou are completely right in that this is not perfectly achievable at the moment. @mattn stumbled across a similar limitation when implementing his GXUI based twitter client. In his case, he was after the textbox and send button at the bottom of the window, and a list that filled all remaining space above. In this case, we could solve his problem by adding LinearLayout support for bottom-to-top and right-to-left layouts. The interim solution I offered was to use a SplitterLayout - this isn't perfect either as the split is based on a ratio of weights - there's no way to be explicit about the split in precise units.\nBasically, we're lacking more advanced layout containers. I suspect that the LinearLayout improvements will help provide a solution to a lot of the impossible cases, but relative and absolute layout containers would also be wanted.\nIf anyone wants to help design and implement these, they would be greatly appreciated.\n. > Is it possible for a client to design their own widget, add it to a layout, and have it rendered?\nYes, completely. There's really nothing special about the mixin implementations, but I completely understand that the whole structure is really confusing. We're thinking about how we can clean this lot up, and make it more idiomatic.\nTo very briefly describe the current layout:\n- The top level is the theme. This is really just a factory for a number of control types that implement the interfaces in the GXUI root. The theme can tweak the control's colors and styling by changing fields and overriding some of methods of the mixins.\n- The mixins directory holds full, un-styled implementations of the various controls. They usually 'derive' from one of the types in the base package.\n- The mixins\\base package provides the bulk of the implementation for Control and Container types. They are formed from pulling together a bunch of parts.\n- The mixins\\parts package holds partial implementations of controls. i.e. Layoutable implements the SetMargin, Margin, Bounds, Layout, and Relayout methods the way most of controls would want. You can cherry-pick these parts into your new control to remove boilerplate code.\n\nIf it's possible, this might make for a good, simple example.\n\nI agree more samples are usually good, but I'm wary of giving examples at this stage for things that are very likely to significantly change. I don't think anyone is happy with the way Component are currently built (the whole mixin and FooOuter stuff are like hammering a square-peg in a round hole). If we can sort this out, then I'm more than happy to create step-by-step tutorials.\nIf you'd like any more information on any of this, please ask away. The more information I can share, the higher chance there is that someone can offer a far better and cleaner approach to solve the same problems. :)\n. Hi @tones111. The drop-down list requires a bubble overlay assigned in order to draw the list outside the bounds of the control. Simply create bubble overlay with theme.CreateBubbleOverlay(), add after all other controls to the window, and set it to the drop down list with SetBubbleOverlay.\nI am working on a DropDownList sample, I just haven't finished it yet. If you have something, please feel free to make a pull-request.\nMany thanks.\n. LGTM - Thanks!\n. > I actually started by defining a direction type, but it adds a bit of additional complexity when validating the direction and orientation against each other. What should happen if a client sets a horizontal orientation, then TopToBottom direction? Or they set a LeftToRight direction followed by a vertical orientation. You end up needing validation logic in both objects. What do you do in the event of a discrepency? Do you automatically adjust the other parameter to agree? What's the point then to having two separate types? Should an error be returned? What if the default values for orientation and direction don't agree?\nI wasn't actually suggesting keeping the SetOrientation / Orientation methods on these particular containers - replace them with SetDirection / Direction.\n\nI would actually argue that the the new orientation values are simply less generic versions of horizontal and vertical. They solve the problem without inducing the complexity above or without the ambiguity of having a \"reverse\" method that fails to define the normal/default convention.\n\nI think there's value in having both. Some controls have a Horizontal / Vertical setting that does not have flow direction. For example, I have other controls external to this project that use Orientation as it is now, so I'd like to keep it. It is very likely I will move these into GXUI in the near future.\n\nThis PR addresses the \"We should have an option to reverse the layout order.\" requirement.\n\nI'm not sure this addresses anything at the moment - it's almost the same behaviour as just adding the controls to the layout in the reverse order (except input handling and tab cycling will prioritise differently). The real goal we're after is the option to layout from right or bottom.\n. @tones111 - does this give you what you need?\n. > One minor thing the demo did illustrate is that there could be some use to implementing the major axis alignment options. For example TopToBottom with AlignMiddle. I'll see about adding that. Thanks.\nCool. I agree that having the SetHorizontalAlignment and SetVerticalAlignment is confusing given that it only affects the minor axis. So perhaps the API should be to bring back SetOrientation and use SetHorizontalAlignment and SetVerticalAlignment for major and minor axes?\n. Possibly related to #48\n. This should now be fixed. Please reopen if not.\n. Thank you @tones111.\n\nIt's worth noting that this does not resolve issue #59 as the detach is never getting called during termination.\n\nInteresting - I'll look into this.\n. > I want to use this example as standard library because I don't want to copy codes always I want this.\nYeah, I've been thinking the same thing. I thought I'd throw this out there as a sample for now and maybe with a bit of cleanup we can make a composite component library.\n\nAnd I notice window class doesn't have SetParent to behave like gtk_window_set_transient_for in gtk.\n\nYeah, there's currently no built-in support for parenting windows. I'm not too sure what the desired set of features would be here. \nGLFW doesn't seem to support modal windows, not that I like them anyway.\n. > I'm still wrapping my head around adapters, but LGTM.\nThanks.\nThey're loosely based on the Adapters in android. I agree that the documentation needs more work.\n. > I think you should specify how cheap or expensive the UI library expects these calls to be. If ItemAt is used in tight loops but ItemIndex is not, someone implementing an adapter should design for that.\nI'm on the fence with this. It's not a particularly easy thing to state - \"the UI library\" could be anything. I'm certainly expecting controls to be developed that sit outside of the GXUI package. Hinting that one method is expected to be cheap while the other less-so might match the expectations of our current controls, but might not work well with future ones.\nFor the controls using Adapters inside GXUI, we need to be good citizens and reduce the number of calls to the Adapter to the absolute minimum required in order to function. They aren't too bad at the moment, but there could be more work done to improve this.\nI'll have a think about this - you might be right in that ItemIndex is typically expected to be cheaper.\n. googlebot - go home, you're drunk.\n. More context\n. Also, be aware we are still in an experimental phase - things are changing, APIs are breaking, whole systems might be re-worked. Having another theme would be nice, but would also increase the amount of code to update with each change.\nLike @crawshaw said, it would be nice, but would be a fair amount of initial and maintenance work.\n. @crawshaw - simple PR, just wanted to run it by you as you were touching this code.\n. Ta.\n. What graphics card / drivers do you have installed?\n. I've dropped the GL version down to 2.1.\nHopefully this is enough for your drivers / cards.\n. GXUI does support scaling - on OSX 'retina' screens we will bump the resolution, but keep the physical size the same. All units external to the driver are in DIPs.\nMy guess is that GLFW is not reporting the window as high DPI.\n. I can't really help what GLFW / windows is telling us to display, but I've added a manual scale override with b655aa1.\nUse the new --scaling command line flag to change the display scaling. For example:\nbash\ncd %GOPATH%\ngo run src\\github.com\\google\\gxui\\samples\\tree\\main.go --scaling=2\n. Thanks for reporting this. Fixed.\n. This and #70 are odd. I do not see them, and I have no idea what's causing them.\nDo you mind checking to see if this still occurs with 5faef7f9?\n. I can confirm on go-1.4 I also get a linker error:\n```\nC:\\dev\\src\\go\\src\\github.com\\google\\gxui>go run -race samples\\tree\\main.go\ncommand-line-arguments\nC:\\dev\\go\\pkg\\tool\\windows_amd64\\6l.exe: internal fatal error.\n```\nThanks for taking the time to look into this.\n. Done, thanks.\n. Yes, they are, but I haven't had the time to think about this much yet. I'll keep this open as a reminder.\n. Thanks!\n. Hi @shurcooL \nThe changes to use mobile/gl look good. Thank you!\nI'm not sure about the split in drivers though - this is really going to confuse people who are looking at this code for the first time. I think we should either:\n- We wait until  mobile/gl covers the same support as the current driver (i.e. windows). And just switch the gl driver to use this. Or...\n- We keep the current gl driver, and make gl. StartDriver return the universalgl driver for development and testing under a switch. However, I suspect this switch cannot be dynamic (i.e. a cmd line flag) due to two lots of conflicting CGO symbols, but I could be wrong.\n@crawshaw do you have a feel for how much work there would be in getting mobile/gl to work on Windows? Perhaps this is something I could take a look at implementing.\n. I'm not aware of anything using grayscale images. For now feel free to just pull that path. \n. LGTM - just one thought on the double-click handling.\n. This is completely WAI.\ngo\n    // Select makes the specified item selected. The tree will not automatically\n    // expand to the newly selected item. If the Tree does not contain the\n    // specified item, then Select returns false and the previous selection\n    // remains unaltered.\n\nThis contradicts the tree.go Select documentation in two ways:\n1. Select is supposed to return false when the tree does not contain the specified item\n\nThe tree does contain the item, in this case it is just not visible as one of the ancestors has not been expanded.\n\n\nThe tree's appearance is modified during the Select... \n\n\nThere's nothing in the documentation that says that the appearance won't change. The appearance has changed to indicate that one of the non-visible children is selected. This is the same as selecting a leaf node, then collapsing its parent.\n\nwith the collapsed directory now expanded.\n\nThe expansion is not done with select, it's done with Show. Are you saying that when you comment out this line the tree still expands?\n. Sorry, I replied just after waking up. Now that I've been awake long enough to have my brain work, I've actually understood what you said. This does indeed sound broken. I'll take a look. \n. Awesome. Thank you.\n. Great, thank you.\n. It looks like the default font Roboto-Regular.ttf does not contain the glyphs you are trying to use.\nPlease try loading a true-type font you know to contain your language glyphs and pass this to Driver.CreateFont.\nPlease reopen if this does not work for you.\n. I'll give it a try now.\n. > Does x/mobile/gl support windows yet? (I can't remember if either Hana or I added it.) I hope it's not to hard to add, but I wouldn't want to break any gxui users on windows.\nSo AFAICT, no it doesn't. It doesn't seem trivial to add either. The problem is windows doesn't really have an OpenGL header that's worth using (the system one is OpenGL 1.1, which is pretty worthless). Typically, the drivers support more up to date versions of GL - GXUI has shown that most windows users have a driver that supports at least OpenGL 2.1, but the function pointers need to be obtained using something like wglGetProcAddress.\nI'm not sure what the best course of action is for adding Windows support into x/mobile/gl. Really all you're going to end up with is something using GLEW or something that looks very similar to GLOW.\n. > why change gl driver\uff1flet us focus on ui for desktop first\u3002\nDon't worry. We won't switch until we're confident that desktop (Windows/OSX/Linux) will continue to work. Getting GXUI working on Android / iOS and WebGL would double the number of supported targets, which would be more than a worthwhile goal.\n. @shurcooL, @slimsag, @crawshaw - sorry, I've not had much time to look into this recently.\nGiven that x/mobile/gl windows support recently got labelled unplanned, perhaps it would be simpler to add Android support to go-gl? It seems rather easy to add new targets to GLOW, and I believe it wouldn't take much to do the GetProcAddress for Android.\nWhat do you think?\n. @slimsag wouldn't you want -api=gles2?\nI was playing with GLOW GLES2 generation when I created this bug. Aside from the harmless error, the output looked good.\n\nI'll see what I can do later today about making egl the default for arm and generating the ES2 bindings as part of the go-gl/gl repository (will send a PR).\n\nAwesome, thanks. I confess I haven't tried building and running Go on android yet, but I'm keen to give it a try when I get a chance. \n. > The main reason is that go-gl/gl is not a universal API with multiple backends (the way x/mobile/gl is). It is a collection of distinct low level specific OpenGL API bindings. So if you import go-gl/gl/v2.1/gl you get OpenGL 2.1, if you import go-gl/gl/v4.5-core/gl you get OpenGL 4.5 Core Profile, and if you import a hypothetical - it does not exist - go-gl/gles/2.0/gles package, you get OpenGL ES 2.0 bindings.\nI understand that. My thought was that we could use the same OpenGL ES 2 bindings on Android and on desktop. I know there are subtle differences between GLES and OpenGL, but for what GXUI uses that difference is not substantial.\nUnless there's something I'm missing, this would mean Windows, OSX, Linux and Android would all use this hypothetical GLES 2 go-gl, leaving WebGL as the 'other' target. For that, I was thinking that we could create a simple renderer library to sit between GLES2/WebGL and the gxui/driver. This renderer library would expose the small interface required by GXUI, which in the current form is a handful of GL APIs. We could grow this renderer library as the GXUI driver matures, but I don't see a great deal of additional features for delivering GXUI V1.\n. So, my understanding is this:\n- OpenGL ES 2 is an (almost perfect) subset of OpenGL 3.1, but the profile must also support EGL. The key differences are mostly straight-up fewer APIs, but the incompatible differences are nearly all to do with GLSL.\n- Given that the exposed functions a simple subset, go-gl should be able to resolve the GLES 2 function addresses (all with matching signatures) even if the context was built with a OpenGL profile.\n- Having a context created with the OpenGL ES 2 profile simply means the driver should conform to the OpenGL ES 2 spec. So, the driver should throw errors when calling functions or passing arguments that are not part of the profile, and the driver should handle GLSL slightly differently. Khronos made sure that GLES 2 kept the function signatures the same as desktop GL, even though this resulted in many APIs requiring arguments to be a fixed constant value.\nIf my understanding is correct, none of what I've described should be a problem for GLES 2 go-gl function resolving on desktop - the OpenGL ES / OpenGL differences are all problems to be handled externally - i.e. by this renderer abstraction I mentioned.\n. Hi @shurcooL,\nThank you. I'll try to find time to check this out this weekend. Do you have any instructions on how to try out the WebGL renderer?\n. Thanks for the detailed info @shurcooL.\nI gave the Windows build a try, and unfortunately we get a fatal error on start up initializing gl: \ngl.Init: glActiveTexture\nI believe the problem is that gl.Init must be called after MakeCurrentContext as wglGetProcAddress requires a bound context: When no current rendering context exists or the function fails, the return value is NULL.\nHowever, I can get things running by:\n- Adding to Window in desktop.go:\n``` go\nfunc (w *Window) MakeContextCurrent() {\n    w.Window.MakeContextCurrent()\n    contextSwitcher.MakeContextCurrent(w)\n}\nfunc DetachCurrentContext() {\n    glfw.DetachCurrentContext()\n    contextSwitcher.MakeContextCurrent(nil)\n}\n```\n- And replacing the dummy ContextSwitcher in gl_windows.go with:\n``` go\n// ContextSwitcher is this library's GL context switcher. It facilitates switching\n// between GL contexts, satisfying ContextSwitcher interface.\nvar ContextSwitcher contextSwitcher\ntype contextSwitcher struct{}\nfunc (contextSwitcher) MakeContextCurrent(context interface{}) {\n    if context != nil {\n        if _, seen := contexts[context]; !seen {\n            // First time this context has been made current. Initialize gl.\n            contexts[context] = struct{}{}\n            err := gl.Init()\n            if err != nil {\n                log.Fatalln(\"gl.Init:\", err)\n            }\n        }\n    }\n}\nvar contexts = map[interface{}]struct{}{}\n```\nThis feels a little hacky, but not significantly more than the WebGL context. :) Feel free to ignore this suggestion if you can think of any better solutions.\nCheers.\n. I can confirm Windows and OSX work fine, both in desktop mode and in the browser. I haven't tried linux as I need to dust off my linux-box. I'll try in the coming week.\nIt's very cool. Good work!\nI have a few minor concerns I hope we can address before accepting the PR:\n- As I commented above, I'd like to remove the dependency on golang.org/x/mobile/f32 if possible.\n- Unless there's a reason for it, I'd also like to remove the transitive dependency on honnef.co/go/js/xhr.\n- Calling gl.Init() every time a context is made current isn't good. You mentioned exactly my concern on this bug: GXUI can make frequent switches between contexts when we have multiple windows open. If you have two windows animating, I'm guessing performance is going to suck.\nThis brings me to the ContextWatcher:\n- Perhaps we could add a ContextWatcher.OnCreate(Context) method to the interface for the gl.Init logic?\n- Super-nit - Why not use the name ContextWatcher.OnAttach instead of OnBecomeCurrent?\n. I finally got around to testing on linux, and unfortunately on my desktop machine I get the following panic on startup:\n```\n$ $GOPATH/bin/polygon\npanic: PlatformError: Failed to retrieve context version string\ngoroutine 1 [running, locked to thread]:\ngithub.com/go-gl/glfw/v3.1/glfw.acceptError(0xc208067cb8, 0x2, 0x2, 0x0, 0x0)\n    /usr/local/google/home/bclayton/src/github.com/go-gl/glfw/v3.1/glfw/error.go:164 +0x145\ngithub.com/go-gl/glfw/v3.1/glfw.CreateWindow(0x320, 0x258, 0x7084d0, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0)\n    /usr/local/google/home/bclayton/src/github.com/go-gl/glfw/v3.1/glfw/window.go:264 +0x165\ngithub.com/google/gxui/drivers/gl.newViewport(0xc20801e040, 0x320, 0x258, 0x7084d0, 0x7, 0x0, 0xc208067e80)\n    /usr/local/google/home/bclayton/src/github.com/google/gxui/drivers/gl/viewport.go:79 +0x1a4\ngithub.com/google/gxui/drivers/gl.func\u00b7019()\n    /usr/local/google/home/bclayton/src/github.com/google/gxui/drivers/gl/driver.go:196 +0x66\ngithub.com/google/gxui/drivers/gl.func\u00b7012()\n    /usr/local/google/home/bclayton/src/github.com/google/gxui/drivers/gl/driver.go:61 +0x2f\ngithub.com/google/gxui/drivers/gl.(*driver).driverLoop(0xc20801e040)\n    /usr/local/google/home/bclayton/src/github.com/google/gxui/drivers/gl/driver.go:82 +0x75\ngithub.com/google/gxui/drivers/gl.StartDriver(0x796c40)\n    /usr/local/google/home/bclayton/src/github.com/google/gxui/drivers/gl/driver.go:51 +0x2b9\nmain.main()\n    /usr/local/google/home/bclayton/src/github.com/google/gxui/samples/polygon/main.go:84 +0x2a\n```\nI'm guessing this is the switch from using OpenGL 2.1 to OpenGL ES 2. It is my understanding that GLES on desktop GPUs is not commonly supported. I'm also not sure why we're using OpenGL on Windows and OSX but GLES on linux. Is there a reason for this split?\nIf you'd like me to try getting goxjs/gl running on linux, I can try and reserve some time this week.\nCheers.\n. > The go-gl/v2.1/gl package supports OS X, Linux and Windows well. Do you think that's the way to go? /cc @slimsag\nYeah, keeping with what we know works sounds like a good approach to me. :)\n. So linux runs again (yay!), windows does not (boo!).\nI'm not too sure what happened during this PR, but somewhere along the way we've lost the changes to import \"github.com/goxjs/glfw\" instead of \"github.com/go-gl/glfw/v3.1/glfw\".\nFixing up all of these (and changing the glfw.Init to take the gl.ContextWatcher locally makes windows work again.\n. Sorry, I've had a manic day today and my brain didn't properly context-switch in the 10 minutes I got to test this out. I'm not sure why your OnMakeCurrent calls didn't fix the issue, but it's possible I screwed up something when fetching the PR on the windows box. \nI'll have another test tomorrow morning. Like you say, I can't see why this wouldn't work.\nThanks for bearing with me, and sorry for being so slow in replying. \n. Tried again, and it is working on windows. Accepting the PR. Thanks :).\n. Hi @justay. I just tried minimising each sample on Windows with no panics.\nWhich sample did this happen on?\nWhat operating system?\n. I just tested this code on Windows and OSX - both seem to work with tip-of-tree.\nAre you sure you're up to date? \ngo get -u github.com/google/gxui\n. We haven't added it yet. We still need to move over to x/mobile/gl, and then I need to update the controls to handle touch input.\n. This is working as intended. SetDefaultFont simply changes the default font that is going to be used by new controls - it was not intended for whole style changes this way.\nFortunately, it's not a lot of work to update those already created Controls.\nAdd this interface definition to your code:\ngo\n// setFonter is the interface implemented by types that have a SetFont method.\ntype setFonter interface {\n    SetFont(gxui.Font)\n}\nThen between your calls to theme.SetDefaultFont(ft) and window.Redraw() add:\ngo\n// Traverse all controls in the window, updating the font for each.\ngxui.FindControl(window, func(c gxui.Control) bool {\n    if c, ok := c.(setFonter); ok {\n        c.SetFont(ft)\n    }\n    return false // Traverse all controls\n})\nNote: I made some minor changes to FindControl so that it can take a Window as the root. You will need ToT for this to work.\n. Fixed the late update issue with the DropDownList.\nBy the way: DefaultAdapter has the SetStyleLabel method, which would let you apply the fonts to each of the items in the DropDownList\n. It's a bit hacky, as you're relying on the label text to be the name of the font, but this should work:\ngo\nadpt.SetStyleLabel(func(theme gxui.Theme, label gxui.Label) {\n    name := label.Text() // Assumption: Label's text holds font name.\n    if ttf, err := LoadFonts(fp[name]); err == nil {\n        if font, err := driver.CreateFont(ttf, 13); err == nil {\n            label.SetFont(font)\n        }\n    }\n})\n. A bit embarrassing how little documentation there is, but this will encourage me to write more. Thank you!\n. This is WAI - I'm curious to know what you'd expect the behavior to be in this case.\nI'll try making time to properly document the LinearLayout interface today.\n. BTW - what you're probably trying to accomplish can probably be done with:\n``` go\n   b2t := theme.CreateLinearLayout()\n   b2t.SetDirection(gxui.BottomToTop)\n   b2t.AddChild(bottomRow)\n   b2t.AddChild(main)\nt2b := theme.CreateLinearLayout()\n   t2b.SetDirection(gxui.TopToBottom)\n   t2b.AddChild(topRow)\n   t2b.AddChild(b2t)\n```\n~~although I have not tested this...~~ Tested and works.\n. First pass documentation in 62c937dba870ed541250c6001a59e4b1903bd4c5.\nPlease reopen if this still doesn't work for you, or is still unclear.\n. Sure. I suspect GLFW has good support for fullscreen windows given it is targeted at games.\n. Here's a better way.\n. It is, thanks for looking. Fixed with 120dc55ccc4e5586009dd474270d7a72b26413f8.\n. I'm not sure I entirely understand the question. Are you asking for a control that can be used to draw a Canvas? If so, I could add a Canvas getter / setter to Image without much difficulty. \n. > All images are placed in a container Window. But it is inconvenient. I would like to have a container is to control.\nYes, in the Polygon sample, all child Image controls are added as children to the Window, but there's nothing stopping the Images from being placed into other Containers such as a LinearLayout.\nIt's still not completely clear to me what you're asking. If you'd like more control over what's displayed in an Image, then I think it's not too hard to add:\ngo\n   Canvas() Canvas\n   SetCanvas(Cavas)\nto the Image interface. These would probably replace the existing Polygon properties.\nI hope I'm closer to answering your question.\n. Okay, I think I'm finally understanding exactly what you're asking for. This does kind of layout does not belong in LinearLayout, instead it should probably be a new AbsoluteLayout. \nRegardless, I still believe what you're wanting is a SetCanvas method on Image. Stacking Image controls is an inefficient way to layer polygons. If you had Image.SetCanvas, you would be able to draw layered polygons, rects and fonts all into one canvas, then pass that composed image on to one Image control. \nI'm crazy busy with work at the moment, but if this gives you what you need, I'll try and implement this for you soon. \n. Please take a look at the new polygon sample code. This should show you how you can layer polygons by drawing them to a Canvas, completing the canvas, then passing the complete Canvas to the Image.\nLet me know if this still doesn't solve your issues.\n. I'm afraid there's little I can do to help with this issue, as the problem seems to be with cross-compilation and/or go-gl. I'd recommend raising a bug there if your problem persists.\n. You are hitting the maximum glyph page size which is 512x512. This seemed like a reasonable limit.\nI have to ask, is there a good reason to change this? :)\n. > The limitation comes from font file or gxui?\nGXUI. I've briefly described the font rendering process here.\n\nIf possible, could we remove the limitation?\n\nI could make a glyph page expand to fit the size of the glyph when the page is empty. In your case of enormous glyphs, this would mean each glyph would get its own page (texture), and so every giant glyph would require a separate OpenGL draw call. This would mean performance would be dire if you were to try drawing giant strings, but that doesn't sound like an issue for what you're doing.\n. Duplicate of #60.\n. I looked into this, and indeed there was a bug. This is fixed with 22f19f4e7.\nSample of changing text color and alpha:\n``` go\npackage main\nimport (\n    \"time\"\n\"github.com/google/gxui\"\n\"github.com/google/gxui/drivers/gl\"\n\"github.com/google/gxui/gxfont\"\n\"github.com/google/gxui/math\"\n\"github.com/google/gxui/themes/dark\"\n\n)\nfunc appMain(driver gxui.Driver) {\n    theme := dark.CreateTheme(driver)\nfont, err := driver.CreateFont(gxfont.Default, 75)\nif err != nil {\n    panic(err)\n}\n\nwindow := theme.CreateWindow(380, 100, \"Opacity\")\n\nlabel := theme.CreateLabel()\nlabel.SetFont(font)\nlabel.SetText(\"Hello world\")\n\nlayout := theme.CreateLinearLayout()\nlayout.SetBackgroundBrush(gxui.CreateBrush(gxui.Gray50))\nlayout.AddChild(label)\n\nwindow.AddChild(layout)\n\nticker := time.NewTicker(time.Millisecond * 30)\ngo func() {\n    phase := float32(0)\n    for _ = range ticker.C {\n        r := 0.75 + 0.25*math.Cosf((phase+0.000)*math.TwoPi)\n        g := 0.75 + 0.25*math.Cosf((phase+0.333)*math.TwoPi)\n        b := 0.75 + 0.25*math.Cosf((phase+0.666)*math.TwoPi)\n        a := 0.5 + 0.5*math.Cosf(phase*10)\n        phase += 0.01\n        driver.Call(func() {\n            label.SetColor(gxui.Color{R: r, G: g, B: b, A: a})\n        })\n    }\n}()\n\nwindow.OnClose(ticker.Stop)\nwindow.OnClose(driver.Terminate)\n\n}\nfunc main() {\n    gl.StartDriver(appMain)\n}\n``\n. [Addedgxui/samples/hello_world`](https://github.com/google/gxui/commit/95ce27f0f2d6ce7491b23d3374ccd2db5991f23c).\n. I don't mind having a Selected() method on the interface, I just have issues with OnSelectionChanged. Keeping open to implement. \n. That is very strange indeed. I'll investigate...\n. So the issue is when the tab is dragged - the dragged tab control is destroyed and a new one is created in its place, losing the event subscriptions.\nI'm thinking the PanelHolder interface is broken. PanelHolder.Tab() should probably be removed and PanelHolder should adopt the regular Container interface with:\ngo\nName(Control) string\nSetName(Control, string)\nmethods.\nWhy do you want to know if a tab was clicked? Aren't you really interested in knowing whether the panel is visible? If so, you can always listen to Control.OnAttach and Control.OnDetach on the panel. This approach will also work if the tab is dragged to another panel holder, unlike listening to OnClick or using PanelHolder.SelectedPanel.\n. Proposed new interface:\n``` go\ntype PanelHolder interface {\n    Control\n    Container\n// Select will make the specified Control the selected panel.\n// Select will panic if panel is not a child of this PanelHolder.\nSelect(panel Control)\n\n// Selected returns the currently selected panel, or nil if there are no \n// panels in this PanelHolder.\nSelected() Control\n\n// Name returns the name of the specified child panel.\n// Name will panic if panel is not a child of this PanelHolder.\nName(panel Control) string\n\n// SetName sets the name of the specified child panel, updating the tab text.\n// SetName will panic if panel is not a child of this PanelHolder.\nSetName(panel Control, name string)\n\n}\n```\n. > Although if you store a pointer to the Control name do not need to...\nCare to elaborate?\n\nWhat is the general event is used when replacing the panel to configure the environment ? For example, to clear the current action.\n\nI'm afraid I'm not following again. What action? Are you asking how do you remove all the panels?\n. I'd like to know why you need this.\nAdding events to fire when a panel is made visible in a particular PanelHolder sounds like a bug waiting to happen. Panels can be dragged between PanelHolders - if you want to know whether a panel is visible then use OnAttach and OnDetach. If there's some other reason you'd like to be told when a panel is made active in a single PanelHolder, then I'd like to know what the usage case is before implementing it.\n. > Control.OnAttach and Control.OnDetach must be specified in each panels. Is this not excessive if you want to produce one and the same operation when changing tabs ?\nI don't see it is as excessive as it's the correct thing to do, and I don't think it has a common usage case. As I keep on saying, I believe that having a PanelSelected event will just encourage people to do the wrong thing. If you can give me a reason why knowing what panel is active for a single PanelHolder I'll consider adding it. \n\na simple example: a variable dragged = 1. When changing tabs must dragged = 0. How it can be easy to implement?\n\nWhat's being dragged? For what duration is dragged == 0?\nI know the language barrier is making this hard, but please describe what you are trying to do, and hopefully we can come to some sort of compromise. \n. I still need to implement the interface as discussed.\n. Hi @zhangpy - I gave this a try to see if the LinearLayout.SizeMode could be (ab)used to achieve this, but the two dimensions of flow make that impossible.\nA GridLayout would be a good solution for this - I have also been thinking about some sort of RelativeLayout. These would be somewhat complicated to use without a visual designer, which is another idea I have also been toying with.\nI'm afraid the short answer is, unless we add more containers, this doesn't seem particularly easy or possible right now.\n. Humm, I linked the GridLayout to the TableLayout issue - but actually they might be two separate concepts. The TableLayout proposed uses adapters, which wouldn't work well in this case.\n. Your sample code was correct, the line rendering (very recently added, not well tested) was not. Now fixed.\n. Hi @DoctorovEV,\nCurrently you cannot.\nIf you want this, then:\n- The MouseButton enum should become a MouseButtonState bitfield, and should have the following methods added:\ngo\nfunc (s MouseButtonState) IsLeftDown() bool { ... }\nfunc (s MouseButtonState) IsMiddleDown() bool { ... }\nfunc (s MouseButtonState) IsRightDown() bool { ... }\n- MouseEvent.Button should be renamed to ButtonState.\n- All the places where a MouseEvent is created in viewport.go should be updated to assign the ButtonState field.\n- All the existing code that checks for button equality would have to be updated to use the IsLeftDown() / IsMiddleDown() / IsRightDown() methods instead.\nI can do this, but I'm exceptionally busy this week. I'm happy to review a pull-request if you're comfortable doing this yourself.\nCheers,\nBen\n. @yofu has done the hard work on this. Please reopen if this doesn't give you what you need. \n. LGTM. Thanks!\n. Your problem here is with the goroutines calling SetText. GXUI does not support calls directly from goroutines other than the goroutine that executes the gl.StartDriver callback. You can however use the Driver.Call method to execute your UI code on the correct goroutine:\ngo\n    go func() {\n        for {\n            <-changeFont1Chan\n            driver.Call(func() {\n                label1.SetText(cs[rand.Intn(len(cs))])\n            })\n        }\n    }()\n. Hi @marben,\nThere are two reasons why this doesn't work:\n1. Control.Draw does not request a UI update - it asks the Control to construct and return a new Canvas so it can be drawn into the parent. Container.Redraw is the command to ask a Container and it's full parent hierarchy to redraw. When I get some spare time, I'll try to finally get around to documenting the Control and Container interfaces.\n2. Driver.CreateTexture constructs a Texture from the provided image by copying the data to the GPU once. Mutating the image pixels after the copy has been performed will not alter what's seen on the screen. Your example has highlighted the fact that there is a short window of time between the call to CreateTexture and the GPU copy, which might cause confusion / bugs. The copy should probably be made immediately.\nSo currently, the only way to achieve an update is to re-call Driver.CreateTexture.\nI hope this makes sense.\nCheers,\nBen\n. > So I assume i need to call Release() on the old texture?\nAssume no for now. This is cruft I want to remove, as we shouldn't have ref-counting on any public interface. I'm on vacation at the moment, but I'll make an effort to remove the release logic from the texture and canvas public interfaces when I get back.\n\nAlso the image updates without calling Container's Redraw() method. Is that right?\n\nYes. Calling SetTexture will trigger an internal redraw. Redraw is only public on the Container interface so that a child can propagate the redraw up the parent hierarchy. \n. Reopening for the Release issue.\n. Thanks for reporting. \nI'll update the import URLs next week when I return from vacation. \n. Hi @squiidz - I've looked at the freetype-go project on code.google.com, and that appears to still be the current, active home for the project. What issues do you see when you fetch the project? Do you have a mercurial client installed?\n. Hi @andrebq. You are correct - this is a missing feature of the textbox control.\nThe difficulty here is that the textbox control is virtualized (only the visible lines are resident in memory) and in order to correctly implement horizontal scrolling we need to know the maximum width of all lines.\nHowever, this is just complexity and is certainly achievable.\nI'll have a think about solutions.\n. While I appreciate discussions on the pros and cons of UI and framework design, there is very little in what you have written that I can act upon.\nIf you have suggestions on how Morphic or LivelyKernel's approach could benefit GXUI, please suggest away, or feel free to fork GXUI and try out these ideas. I'm always happy to accept pull requests that improve the code.\n. Hi @Daedfr,\nA label's alignment is mostly used for multi-line text. If you'd like a label to be right aligned in the parent container, consider parenting label under a LinearLayout with the layout's HorizontalAlignment set to AlignRight and its SizeMode set to Fill.\nI hope this helps,\nBen\n. Hi,\nI'm reluctant to add a serialized UI format to the core GXUI package. The reasons being:\n- Binding between the code and the UI is always kludgy and error prone. You either go down the path of looking up controls by name (usually by string), which is a runtime error waiting to happen - or have compile-time identifiers generated by some build tool. The latter requires the code and data to be kept in sync, and an identifier .go file to be generated (where you might as well have generated the entire UI setup logic in Go).\n- These languages usually start simple, with just control nesting and property assignment, but nearly always start feature-creeping with data-binding and inline event handling. Before you know it, you have a language that requires an entire book to describe the language and features.\n- One of the big wins for separating logic from data is that you can update your data without lengthy rebuilds of your code - this is simply not an issue with go.\nWith all that said, I'm not opposed to someone implementing such a thing - it just does not belong as a core component of GXUI.\n@sinni800 - part of your argument was:\n\nGUIs could be sent over the network and displayed somewhere else without having to painstakingly build it up on the other side.\n\nDo you have any real-world examples of where you'd want to do this? Have you seen @shurcooL's WebGL renderer?\nI understand that GXUI requires a designer, and I had started experimenting on such a thing. My thoughts were that the designer could generate (and parse) .go files that contain: \n- a struct representing the root of the designed widget\n- a constructor function that would construct the child Controls, assign properties, hook up events to methods and return the root.\nRegular logic handling could then be placed in another .go file in the same package that implements the necessary methods on the generated struct.\nAlas, work and personal circumstances mean I haven't had much time to focus on GXUI lately, but I'm eager to get back on this when time permits.\n. Unsupported where?\n. Hi @zhangpy,\nThis is currently not supported. I'll keep this open as a feature request.\n. Hi @dskinner. I have a bunch of comments mostly regarding semantics.Otherwise, it looks good. \nThank you for taking the time to do this!\nCheers,\nBen\n. Hi @dskinner - sorry for the insanely long delay in getting back to you on this.\n\nCurrently, I've left Index as an int instead of the suggested uint in your original comment. This was due to the Range function which would allow overflowing the uint and make an error less obvious. For example, TextCursor{Index: 0, Length: -5} is not valid, and being able to instantiate the struct directly skips any checks that might occur during construction.\n\nMakes sense.\n\nI've also added a constructor to help with working with methods such as WordAt and other funcs that return a range, though the name NewTextCursor doesn't feel quite right. The motivation for this is simply that typing TextCursor{Index: end, Length: start-end} is unnecessarily error prone. Somewhere along the way, I had myself accidentally typed TextCursor{e, e-s} and it took a good minute to find. This bothers me.\n\nThe new constructor seems fine to me.\n\nIn retrospect, I'm actually more in favor of how you originally viewed the code as TextCursor{From, To}. This simplifies working with intervals and at worse, makes a single caret index verbose.\n\nshrug What you have in your PR seems like an improvement with ToT, if just for the additional documentation.\n\nAt the same time, this brings into question the interval/ package. This package would play an important role in multiple cursors/selections, syntax highlighting, indexing, etc. I looked through gxui and saw this package was only used for managing cursors/selections, and the code_syntax_layer and subsequent paints.\nThe package contains some oddities though such as the unused U64. It's also curious why the original TextSelection didn't simply make use of IntData, storing caret location at IntData.data and so on (via struct embedding or w/e).\n\nThe interval package has gone through several iterations. A colleague and I spent a week optimizing it as it was used in some particularly hot code in my full-time project, Android GPU profiling tools.\nIf you think the version of the interval package is better, I can port this back again.\n\nThere is another interval package from biogo: https://github.com/biogo/store/tree/master/interval\nI briefly looked at it, though the binary-tree/pointers approach in my experience is typically slower than a slice of struct literals. This may be important for syntax highlighting large files but it may be too soon to say. In general, inserts were five times slower than gxui/interval. I didn't measure GC pause for having all those pointers, not sure how relevant that will be in 1.5 even.\n\nLike you guessed, the interval code can be stressed with lots of syntax layers. I'd prefer to keep the code fast, and in GXUI. If there's ways we can make the interval package easier to use, I'm happy for changes.\n\nSo right now I feel this pull request is premature.\n\nI'm happy to accept it, but it's your call.\nThanks for all your time on this so far Daniel.\n. It was almost certainly a carriage return character being rendered (which doesn't have a glyph). Thanks to @dskinner for the very rapid fix.\n. LGTM, thanks @dskinner.\n. Hi @michael-schaller,\nI have no objections to this being added, but I'm not going to get around to implementing it any time soon. I'm happy to advise if anyone fancies implementing it. This should probably be exposed as an additional CreateTrayIcon method in the the Driver interface. I'm guessing the function would just return an error for targets that do not support it - i.e. the new WebGL backend.\n. Hi @knarfrank - thank you for your pull request.\nI'm not sure about forking the entire dark theme though - unless I'm mistaken, it seems like most of the changes are to the color constants in dark.Theme.\nPerhaps we should rename the gxui/themes/dark package to gxui/themes/basic, and add Dark() and Light() theme constructors, keeping everything in one place?\n. Thank you @knarfrank, I've accepted @dj2's 'inherited' version that uses your colours.\n. LGTM - thanks.\n. Hi @joeblew99 - this has been raised before. Please see the discussion in #117.\n. Pretty horrible - but has caught issues in some projects that uses GXUI.\nOpening as a pull request to hear thoughts from anyone who might have opinions on this.\n. Thanks for the pull-request @waynenilsen. I'm looking to put these screenshots on a GXUI webpage somewhere as I doubt anyone would actually want to grab these screenshots when they checkout the source.\nI'll let you know when that's sorted out.\n. Awesome stuff. Thank you.\n. Awesome, thanks.\n. All of GXUI is labelled experimental. :)\n. Hi @bmcnamar - I'll try and reproduce, but I suspect this is a bug with GLFW.\nYour issue sounds remarkably similar to this issue.\n. Looks good, thanks!\n. Hi @Drahoslav7,\nThanks for the PR. I have two minor comments.\nIt would be more consistent with the rest of GXUI if:\n- The position was represented as a math.Point instead of two ints.\n- Position was used instead of Pos\nHowever, the logic looks good.\nMany thanks,\nBen\n. LGTM - Thank you!\n. I've raised this with @nigeltao, who is one of the primary contributors to freetype-go.\n. SetSize is not to be used by the application code - it is an internal function used by containers only during layout passes.\nI'm afraid there is no such grid container currently implemented and has been requested. I'll bump this in my TODO priority list, but I'm afraid I'm getting little time to work on GXUI lately. If anyone is feeling brave, I'd happily accept a pull request.\n. Hi @ThePiachu. I'm afraid I haven't seen anything like these issues before, and I'm not too sure what would be causing it. I am successfully building and running GXUI applications on a number of Windows 7 machines with WinBuilds. Have you checked your PATH for executables that might be picked before the expected ones?\nYou might have better luck asking on the relevant go-gl projects.\n. Thank you @Mr4x - this is a great start. I've just got some comments regarding the container handling.\n. Thank you for this. I've got a few minor remaining comments.\nIf you're happy with the suggested changes but don't have the time to make them yourself then just say - I'll accept the PR and make the changes myself.\n. @Mr4x - awesome, thank you for these changes.\n. @sunwangme - I'd definitely agree if we had three or more states for this parameter, or more parameters to the function, but I decided a bool here is fine given that Sublime and Atom can both offer parameter info. I also considered adding a 3rd function DataChanged / DataReplaced, but that just seemed even more confusing.\n. Not ready - seems my local pkg dependencies were bad.\n. Much appreciated @shurcooL.\n. That's an odd error. It looks like the graphics driver is reporting the vertex shader's varying output vClp as an attribute input.\nI'm making a wild guess your machine is an HP 250 G1 - can I ask what GPU you have in the machine?\nAlso, do you mind trying out a possible fix? Please try adding the line #version 110 to the top of all the shader source strings in blitter.go?\n. Sounds good to me. Obviously we should also be documenting the interface too. :)\n. LGTM - thank you!\n. Hi @krolaw. GXUI does support different density displays, but it relies on GLFW to report the correct screen density. It sounds like there might be an issue with GLFW and your particular OS / driver.\nHowever, all of the samples have a -scaling flag that multiplies the GLFW reported density with the value provided. For example:\ngo run $GOPATH/src/github.com/google/gxui/samples/tree/main.go -scaling=2\nShould display at a more sensible resolution for your display.\nCheers,\nBen\n. The original code was correct, but admittedly it was not a great interface name. I don't think there's a PaintChildren type in the outer package, so I'm not sure how this compiles. \nAlso, beware #166.\n. Yup, as I said, it wasn't a great interface name. :)\n. unlurks\nHello there,\nThat approach sounds like it could work. The tricky bit is knowing the widest line length - you'd have to calculate this for every line, when the whole implementation tries hard to work only with the lines that are on-screen.\nInstead of plumbing in horizontal scrolling into the CodeEditor (I'd actually recommend working on the TextBox if you go that path), you could embed the text control in a ScrollLayout which creates a scrollable window on a larger child area. You'll still need to figure out the maximum line width, and have to use that size when calculating the desired TextBox size, but then the whole horizontal scrolling logic could be handled for you.\nFeel free to ask more questions. My memory is a bit hazy, and responses may be slow, but I'd still like to help if I can.\nCheers.\n. > I gave the ScrollLayout a shot, but my CodeEditor was having real trouble displaying files over a few hundred lines when it had to render the entire file on every Paint call. \nI think you misunderstood me. I was suggesting using ScrollLayout.SetScrollAxis so that you continue using TextBox's vertical scrolling for virtualization, and ScrollLayout's horizontal scrolling for what you're after. \n. I built GXUI to put together a proof of concept app and to learn Go. It ended up being developed in my spare time, then I became a Dad. As most parents may tell you, between work and parenting you're lucky to find time to sleep, let alone keeping an experimental project going. :)\nMaybe one day I'll get some time to work on GXUI again - if I do, I'll be sure to give it a good reworking - since writing this library, I've learnt a great deal on how to write Go properly... so please don't consider this quality example code!\nThanks for your interest,\nBen. Can we drop this dependency on \"golang.org/x/mobile/f32\" ?\n. Probably the latter for now. Thanks.\n. gles on desktop is not widely supported. See my comments below.\n. If I understand things correctly, index and mark are equivalent to the old start and end fields, except the carat is always displayed at mark, and mark can be before index. If this is true, index and mark are still essentially a half-closed interval. What's not clear is which endpoint is open and which is closed (I guess the smaller of the two is always the closed endpoint). It would be good to have this documented.\nI'm not sold on the field names index and mark. Given that they're interval endpoints, how about From and To? I'm not completely opposed to mark, but index just doesn't seem to work nicely as a counterpart for me. I'm open to other suggestions here. Maybe Carat and Base? I'll stick with From and To for the rest of my comments.\nI'm not sure it's worth bringing in the concept of selection into the TextCursor documentation - it's rather confusing as it guarantees order (unlike TextCursor), and is already well explained below.\nMy stab at documentation (based on my understanding of the code) is as follows (I'm a visual guy):\ngo\n// TextCursor represents an interval of runes, where From and To can be \n// considered as the indices to the gaps between runes. \n// To can be less than, equal or greater to From.\n// When the TextCursor is used as a TextBox selection, the carat should always \n// be displayed at To.\n// The TextCursor represents a single point in a string When the To and From fields are equal.\n//\n// For example, given the string \"Hello world\":\n//\n//      \u250c   \u252c   \u252c   \u252c   \u252c   \u252c   \u252c   \u252c   \u252c   \u252c   \u252c   \u2510\n//        H   e   l   l   o       w   o   r   l   d  \n//      \u2514   \u2534   \u2534   \u2534   \u2534   \u2534   \u2534   \u2534   \u2534   \u2534   \u2534   \u2518\n//      \u2080   \u2081   \u2082   \u2083   \u2084   \u2085   \u2086   \u2087   \u2088   \u2089   \u2081\u2080  \u2081\u2081\n//\n//\n// TextCursor{ From: 0, To: 5 } represents:\n//\n//      \u250c   \u252c   \u252c   \u252c   \u252c   \u2565   \u252c   \u252c   \u252c   \u252c   \u252c   \u2510\n//      \u2502 H   e   l   l   o \u2551     w   o   r   l   d  \n//      \u2514   \u2534   \u2534   \u2534   \u2534   \u2568   \u2534   \u2534   \u2534   \u2534   \u2534   \u2518\n//      \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562 \n//      \u2080                   \u2085\n//\n//\n// TextCursor{ From: 11, To: 6 } represents:\n//\n//      \u250c   \u252c   \u252c   \u252c   \u252c   \u252c   \u2565   \u252c   \u252c   \u252c   \u252c   \u2510\n//        H   e   l   l   o     \u2551 w   o   r   l   d  \n//      \u2514   \u2534   \u2534   \u2534   \u2534   \u2534   \u2568   \u2534   \u2534   \u2534   \u2534   \u2518\n//                              \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n//                              \u2086                   \u2081\u2081\n//\n//\n// TextCursor{ From: 5, To: 5 } represents:\n//\n//      \u250c   \u252c   \u252c   \u252c   \u252c   \u2565   \u252c   \u252c   \u252c   \u252c   \u252c   \u2510\n//        H   e   l   l   o \u2551     w   o   r   l   d  \n//      \u2514   \u2534   \u2534   \u2534   \u2534   \u2568   \u2534   \u2534   \u2534   \u2534   \u2534   \u2518\n//                          \u2551\n//                          \u2085\n. It's probably worth making the two fields public and dropping the getters. It's certainly far more idiomatic. \n. I just did a little poll around the office to see whether Range would suggest a function returning a length/size or two limits, and it was a unanimous vote for the latter. Please can we rename this back to Length?\n. I suggest renaming to Range()\n. Appears unused, I'd just remove it. c.Range() > 0 is more explicit in my opinion.\n. I'd avoid using the term 'indices'. Perhaps:\ngo\n// Offset returns the a new TextCursor with From and To offset by i.\n. I see the uses of this method, but without actually looking them up it was hard to grasp why this exists as a member of TextCursor. It still seems a little contrived. If you choose to make the fields of TextCursor public, how about:\ngo\nfunc NewTextCursor(start, end int, bool toAtStart) TextCursor { ... }\nthen change uses of NewSelection to:\ngo\ngxui.NewTextCursor(s, e, other.ToAtStart())\n. What is at start? Perhaps ToIsAtStart?\n. While TextCursorSlice is technically a far more accurate name, GXUI (for better or worse) tends to stick with the suffix List. I'd rather we kept it consistent for now. We can always change the other types if we feel like Slice is a better term.\n. How about, instead of trying to treat this thing as two indices, we have:\ngo\ntype TextCursor struct {\n  Index uint // Carat index.\n  Length int // If non-zero cursor is a selection.\n}\nWhere Length can be zero, positive or negative. \n. This makes the construction of thr non-selection case simple:\ngo\ngxui.TextCursor{ Index: i }\nt = t.Offset(i) becomes t.Index += i\nThings that don't want to know about selections don't look at the Length field. \nMy concerns with half-closed intervals go away as it's much simpler to understand. \n. Yeah, I also saw that - New is so much nicer, but would require a massive amount of breaking changes (i.e. anyone who uses GXUI), so maybe stick with Create. If we reach a version 1 of GXUI, I'll try doing a massive refactor in one go.\n. We could add to the samples/flags package:\n``` go\nvar flagTheme = flag.String(\"theme\", \"dark\", \"Theme to use {dark|light}.\")\n// CreateTheme creates and returns the theme specified on the command line.\n// The default theme is dark.\nfunc CreateTheme(driver gxui.Driver) gxui.Theme {\n    if *flagTheme == \"light\" {\n        return light.CreateTheme(driver)\n    } else {\n        return dark.CreateTheme(driver)\n    }\n}\n```\nThat way we keep all the sample-specific flags in one place.\n. main() ?\n. You probably want to use Parent instead of Container as adding or removing child controls here wouldn't make sense.\n. What's the w, h units? Number of cells it occupies?\nDocumentation here would be ace.\n. Nit: There's no protection or warning here about overlapping cells - not sure what you could do to help that, or if that's worth the effort anyway.\n. Doesn't this make huge assumptions about the order and number of calls to SetChildAt?\nIf I were you, I'd probably:\n- Make SetGrid pre-populate the container with dummy controls. (We might need to implement a no-op control just to satisfy the interface)\n- Make SetChildAt replace the child at [x, y] with child.\n. Do the above, and then this can be killed.\n. Please run gofmt.\n. As this math is integer, we are likely to have gaps appear on the right / bottom side of the container when we drop the remainder of these divides. Perhaps it would be better to keep the arithmetic as float32 or float64 and cast back to int before laying out the children?\n. Nice sample!\n. I was discussing this CL with one of my colleagues, and we were thinking that perhaps TableLayout is a better name given that it has similarities to HTML's tables - in that you can make children span multiple cells. I was also planning on adding GridList support, and I'm weary of overloading Grid.\n. Done. Thanks for the heads up.\n. ",
    "mattn": "\nThe COMPILE_STATUS test looks like the correct solution. Is this enough to fix your problem?\n\nCOMPILE_STATUS doesn't work well for this case. Because even though COMPILE_STATSUS become GL_FALSE, the log returns No errors.. So checking COMPILE_STATUS is not good for me.\nAbout my commits in above, since first commit is wrong, I forcely pushed second commit. So if you click merge button, the second one will be merged. Please notice.\n\nIt appears you have signed Google's Contribution License Agreement. Is this correct?\n\nYes, I had already signed CLA for golang/go.\n. done. please take a look.\n. Ah, it's better to be PR.\n. Modified to return 0, 0\n. Good. I want to use this example as standard library because I don't want to copy codes always I want this.\nAnd I notice window class doesn't have SetParent to behave like gtk_window_set_transient_for in gtk.\n. @bonly FYI: you can do it with https://github.com/mattn/glfw/commit/d48fc47dc96d7486539c3cf22617f747f36f5c62\n. ",
    "jimmykuu": "CGO_CFLAGS=\"-I/usr/local/Cellar/glew/1.11.0/include/GL\" CGO_LDFLAGS=\"-L/usr/local/Cellar/glew/1.11.0/lib\" go get github.com/go-gl-legacy/gl\n. ",
    "slimsag": "@ben-clayton Hiya (one of the authors of go-gl here) FWIW https://github.com/go-gl/gl (the bindings generated by Glow) do not depend on GLEW for this exact reason.\n. That error is due to libGLEW.so not being on your LD_LIBRARY_PATH (linux) .\nTry LD_LIBRARY_PATH=/path/to/glew/lib/dir go run main.go.\n. @ben-clayton AFAIK you can generate OpenGL ES 2 bindings with:\n(edited)\nglow generate -api=gles2 -version=2.0 -out=./gles2/2.0/gles2\nAnd they already work quite well (I've been using them on Linux desktop, not Android though).\nWe shouldn't need to add a GetProcAddress for Android as it supports EGL, which means you just need to build the code with -tags=egl (we should probably make that the default for arm).\nI'll see what I can do later today about making egl the default for arm and generating the ES2 bindings as part of the go-gl/gl repository (will send a PR).\n. @ben-clayton Oops -- yes! I had copied the wrong line from one of my shell scripts. Apologies.\nI haven't built any Go code for Android yet either, but I'm excited to see how it plays out.\n. @ben-clayton After talking with @shurcooL a bit over Slack, it appears I've probably misunderstood.\nIf we go with go-gl/gl here, we'll effectively have to add separate duplicate drivers gxui/drivers/gl3 (Windows/Linux/OSX) gxui/drivers/gles2 (Android/iOS) and gxui/drivers/webgl (HTML5). It would be difficult compared to what adding Windows support to /x/mobile/gl would probably take.\n. ",
    "nstratos": "I encountered the same problem but reached a little further. Now I am getting:\n/tmp/go-build140376053/command-line-arguments/_obj/exe/main: error while loading shared libraries: libGLEW.so.1.12: cannot open shared object file: No such file or directory\nexit status 127\nI am using Ubuntu 14.04 64bit and I suppose it means that it doesn't know the location of the glew library to link it.\nWhat I've done is:\n- Installed glew. The make install output is:\ninstall -d -m 0755 \"/usr/include/GL\"\ninstall -m 0644 include/GL/wglew.h \"/usr/include/GL/\"\ninstall -m 0644 include/GL/glew.h \"/usr/include/GL/\"\ninstall -m 0644 include/GL/glxew.h \"/usr/include/GL/\"\nsed \\\n        -e \"s|@prefix@|/usr|g\" \\\n        -e \"s|@libdir@|/usr/lib64|g\" \\\n        -e \"s|@exec_prefix@|/usr/bin|g\" \\\n        -e \"s|@includedir@|/usr/include/GL|g\" \\\n        -e \"s|@version@|1.12.0|g\" \\\n        -e \"s|@cflags@||g\" \\\n        -e \"s|@libname@|GLEW|g\" \\\n        -e \"s|@requireslib@|glu|g\" \\\n        < glew.pc.in > glew.pc\ninstall -d -m 0755 \"/usr/lib64\"\ninstall -m 0644 lib/libGLEW.so.1.12.0 \"/usr/lib64/\"\nln -sf libGLEW.so.1.12.0 \"/usr/lib64/libGLEW.so.1.12\"\nln -sf libGLEW.so.1.12.0 \"/usr/lib64/libGLEW.so\"\ninstall -m 0644 lib/libGLEW.a \"/usr/lib64/\"\ninstall -d -m 0755 \"/usr/lib64\"\ninstall -d -m 0755 \"/usr/lib64/pkgconfig\"\ninstall -m 0644 glew.pc \"/usr/lib64/pkgconfig/\"\n- go get github.com/go-gl-legacy\n- cd  .../gxui/samples/progress_bar\n- go run main.go\n/tmp/go-build140376053/command-line-arguments/_obj/exe/main: error while loading shared libraries: libGLEW.so.1.12: cannot open shared object file: No such file or directory\nexit status 127\nHow can I tell go run to use the location of my installed glew?\n. Alright that worked. I used:\nLD_LIBRARY_PATH=/usr/lib64 go run main.go\nI am trying to run one of the samples, specifically the progress_bar. What I got is:\nlibGL error: pci id for fd 4: 80ee:beef, driver (null)\nOpenGL Warning: glFlushVertexArrayRangeNV not found in mesa table\nOpenGL Warning: glVertexArrayRangeNV not found in mesa table\nOpenGL Warning: glCombinerInputNV not found in mesa table\nOpenGL Warning: glCombinerOutputNV not found in mesa table\nOpenGL Warning: glCombinerParameterfNV not found in mesa table\nOpenGL Warning: glCombinerParameterfvNV not found in mesa table\nOpenGL Warning: glCombinerParameteriNV not found in mesa table\nOpenGL Warning: glCombinerParameterivNV not found in mesa table\nOpenGL Warning: glFinalCombinerInputNV not found in mesa table\nOpenGL Warning: glGetCombinerInputParameterfvNV not found in mesa table\nOpenGL Warning: glGetCombinerInputParameterivNV not found in mesa table\nOpenGL Warning: glGetCombinerOutputParameterfvNV not found in mesa table\nOpenGL Warning: glGetCombinerOutputParameterivNV not found in mesa table\nOpenGL Warning: glGetFinalCombinerInputParameterfvNV not found in mesa table\nOpenGL Warning: glGetFinalCombinerInputParameterivNV not found in mesa table\nOpenGL Warning: glDeleteFencesNV not found in mesa table\nOpenGL Warning: glFinishFenceNV not found in mesa table\nOpenGL Warning: glGenFencesNV not found in mesa table\nOpenGL Warning: glGetFenceivNV not found in mesa table\nOpenGL Warning: glIsFenceNV not found in mesa table\nOpenGL Warning: glSetFenceNV not found in mesa table\nOpenGL Warning: glTestFenceNV not found in mesa table\nlibGL error: core dri or dri2 extension not found\nlibGL error: failed to load driver: vboxvideo\npanic: open data/SourceCodePro-Regular.ttf: no such file or directory\nEdit: Hmm it seems the problem might be that I am running Ubuntu through virtualbox. I will run it natively and post results later. Thanks for the help.\nEdit2: To get rid of the error\nlibGL error: core dri or dri2 extension not found\nlibGL error: failed to load driver: vboxvideo\nI disabled the 3D accelaration on the Ubuntu machine from Virtualbox.\nAbout\npanic: open data/SourceCodePro-Regular.ttf: no such file or directory\nI downloaded the fonts from 1001freefonts on ~/Downloads/sourcecodepro-fonts/ as described on #5 and then I run\ngo run main.go -data ~/Downloads/sourcecodepro-fonts/\nNow the samples work.\n. ",
    "ShawnMilo": "If someone has this working, and is feeling generous, would you create a Dockerfile that builds it, perhaps using the official \"golang\" Docker image as the base, please? I'd like to help out where I can, and having a working environment without having to \"junk up\" my actual machine with various dependencies would be wonderful.\n. Thanks, I've filled it out. Do I need to give you any info so you can find it? I didn't get a confirmation number or anything. I used this github account.\n. Thanks. In a fresh golang container, the build fails due to GL dependencies. I'm going to see if there's an easy fix. In the meantime, here is the output from my attempt:\n```\n$ docker run -it --rm golang /bin/bash\nroot@e4feff5f8ad7:/go# go get github.com/google/gxui  \nroot@e4feff5f8ad7:/go# cd src/github.com/google/gxui/samples/progress_bar/\nroot@e4feff5f8ad7:/go/src/github.com/google/gxui/samples/progress_bar# go get\ngithub.com/go-gl/glfw/v3.1/glfw\nIn file included from ../../../../go-gl/glfw/v3.1/glfw/context.go:4:0:\nglfw/include/GLFW/glfw3.h:185:21: fatal error: GL/gl.h: No such file or directory\n   #include \n                     ^\ncompilation terminated.\ngithub.com/go-gl/gl/v3.2-core/gl\n../../../../go-gl/gl/v3.2-core/gl/procaddr.go:52:21: fatal error: GL/glx.h: No such file or directory\n  #include \n                     ^\ncompilation terminated.\n```\n. Update: \nWas able to install gl.h by installing mesa-common-dev. Then it was missing Xrandr.h. Fixed by installing libxrandr-dev. Then missing Xcursor.h, needed libxcursor-dev. Then xf86vmode.h (installed libxxf86vm-dev). Then XInput2.h. Installed libxi-dev. Then Xinerama.h. Installed libghc-x11-dev. \nAfter all that, now I get this error, and I don't know how to fix it. I did a Google search on the error and found similar issues, but wasn't able to adapt them to solve this issue.\n```\nroot@e4feff5f8ad7:/go/src/github.com/google/gxui/samples/progress_bar# go get\ngithub.com/go-gl/gl/v3.2-core/gl\n/usr/bin/ld: cannot find -lGL\n/usr/bin/ld: cannot find -lGL\ncollect2: error: ld returned 1 exit status\ngithub.com/go-gl/glfw/v3.1/glfw\n/usr/bin/ld: cannot find -lGL\ncollect2: error: ld returned 1 exit status\n``\n. Thanks, Ben. That solves mygo get` problems. I'm now getting an execution error due to the Arial font, but I'll open a separate ticket for that.\nWorking Dockerfile:\nFROM golang \nENV DEBIAN_FRONTEND noninteractive\nRUN apt-get update\nRUN apt-get install libgl1-mesa-dev libxrandr-dev libxcursor-dev libxi-dev libghc-x11-dev -y\nRUN go get github.com/google/gxui\nWORKDIR src/github.com/google/gxui/samples/progress_bar/\nRUN go get\nRUN go build\nCMD /bin/bash\nTo run:\nBuilds container. Replace gxui with anything you like. Have Dockerfile in the current working directory.\ndocker build -t gxui .\nTo use (will delete container upon exit):\ndocker run -it --rm gxui \nTo mount a volume (so you can compile a binary and copy it to the host system):\nmkdir /tmp/gxui\ndocker run -it --rm -v /tmp/gxui:/gxui gxui\n. There is now a Dockerfile that allows a build, so this issue is satisfied.\n. Evidently I have no Arial.ttf.\nRun as root:\n$ find / -iname arial.ttf\nNo results\nI'm running Xubuntu 14.04.\nI do have a bunch of fonts in /usr/share/fonts/truetype/.\n```\n $ pwd\n/usr/share/fonts/truetype\n$ find . -iname '*.ttf'\n./kacst-one/KacstOne-Bold.ttf\n./kacst-one/KacstOne.ttf\n./liberation/LiberationSerif-Bold.ttf\n./liberation/LiberationMono-BoldItalic.ttf\n./liberation/LiberationSerif-BoldItalic.ttf\n./liberation/LiberationSans-Italic.ttf\n./liberation/LiberationSansNarrow-Regular.ttf\n./liberation/LiberationSans-Regular.ttf\n./liberation/LiberationSansNarrow-Italic.ttf\n./liberation/LiberationMono-Regular.ttf\n./liberation/LiberationSansNarrow-BoldItalic.ttf\n./liberation/LiberationSansNarrow-Bold.ttf\n./liberation/LiberationSans-BoldItalic.ttf\n./liberation/LiberationMono-Bold.ttf\n./liberation/LiberationSerif-Italic.ttf\n./liberation/LiberationMono-Italic.ttf\n./liberation/LiberationSans-Bold.ttf\n./liberation/LiberationSerif-Regular.ttf\n./ttf-punjabi-fonts/lohit_pa.ttf\n./ttf-punjabi-fonts/Saab.ttf\n./fonts-japanese-gothic.ttf\n./lyx/msbm10.ttf\n./lyx/cmr10.ttf\n./lyx/eufm10.ttf\n./lyx/cmsy10.ttf\n./lyx/msam10.ttf\n./lyx/rsfs10.ttf\n./lyx/esint10.ttf\n./lyx/cmex10.ttf\n./lyx/cmmi10.ttf\n./lyx/wasy10.ttf\n./freefont/FreeSerifBoldItalic.ttf\n./freefont/FreeSerifBold.ttf\n./freefont/FreeSansOblique.ttf\n./freefont/FreeMono.ttf\n./freefont/FreeSans.ttf\n./freefont/FreeSansBoldOblique.ttf\n./freefont/FreeSansBold.ttf\n./freefont/FreeSerif.ttf\n./freefont/FreeMonoBoldOblique.ttf\n./freefont/FreeMonoOblique.ttf\n./freefont/FreeMonoBold.ttf\n./freefont/FreeSerifItalic.ttf\n./takao-gothic/TakaoPGothic.ttf\n./kacst/KacstDigital.ttf\n./kacst/KacstLetter.ttf\n./kacst/KacstScreen.ttf\n./kacst/KacstPoster.ttf\n./kacst/KacstArt.ttf\n./kacst/KacstQurn.ttf\n./kacst/KacstNaskh.ttf\n./kacst/KacstDecorative.ttf\n./kacst/KacstTitleL.ttf\n./kacst/KacstTitle.ttf\n./kacst/KacstPen.ttf\n./kacst/mry_KacstQurn.ttf\n./kacst/KacstBook.ttf\n./kacst/KacstFarsi.ttf\n./kacst/KacstOffice.ttf\n./lao/Phetsarath_OT.ttf\n./tibetan-machine/TibetanMachineUni.ttf\n./sinhala/lklug.ttf\n./abyssinica/AbyssinicaSIL-R.ttf\n./tlwg/Norasi-BoldItalic.ttf\n./tlwg/Garuda.ttf\n./tlwg/TlwgMono.ttf\n./tlwg/TlwgTypewriter-Bold.ttf\n./tlwg/Garuda-Bold.ttf\n./tlwg/TlwgTypist-Oblique.ttf\n./tlwg/TlwgTypist.ttf\n./tlwg/Umpush-LightOblique.ttf\n./tlwg/Waree-Bold.ttf\n./tlwg/Kinnari-Bold.ttf\n./tlwg/Norasi.ttf\n./tlwg/Kinnari.ttf\n./tlwg/Umpush-Bold.ttf\n./tlwg/Kinnari-BoldOblique.ttf\n./tlwg/Kinnari-Italic.ttf\n./tlwg/TlwgTypo-Bold.ttf\n./tlwg/TlwgMono-Oblique.ttf\n./tlwg/TlwgTypewriter-BoldOblique.ttf\n./tlwg/Norasi-BoldOblique.ttf\n./tlwg/Norasi-Bold.ttf\n./tlwg/TlwgTypist-BoldOblique.ttf\n./tlwg/TlwgTypist-Bold.ttf\n./tlwg/Umpush-Light.ttf\n./tlwg/Garuda-BoldOblique.ttf\n./tlwg/Norasi-Italic.ttf\n./tlwg/Purisa.ttf\n./tlwg/Sawasdee-Bold.ttf\n./tlwg/TlwgTypo-BoldOblique.ttf\n./tlwg/Purisa-Bold.ttf\n./tlwg/Kinnari-Oblique.ttf\n./tlwg/Umpush-BoldOblique.ttf\n./tlwg/Loma-Oblique.ttf\n./tlwg/TlwgTypewriter-Oblique.ttf\n./tlwg/Kinnari-BoldItalic.ttf\n./tlwg/Purisa-Oblique.ttf\n./tlwg/Garuda-Oblique.ttf\n./tlwg/TlwgTypo.ttf\n./tlwg/Umpush-Oblique.ttf\n./tlwg/TlwgMono-Bold.ttf\n./tlwg/Purisa-BoldOblique.ttf\n./tlwg/Waree-Oblique.ttf\n./tlwg/Sawasdee-Oblique.ttf\n./tlwg/Norasi-Oblique.ttf\n./tlwg/Loma.ttf\n./tlwg/TlwgTypewriter.ttf\n./tlwg/TlwgMono-BoldOblique.ttf\n./tlwg/Umpush.ttf\n./tlwg/TlwgTypo-Oblique.ttf\n./tlwg/Loma-BoldOblique.ttf\n./tlwg/Sawasdee.ttf\n./tlwg/Loma-Bold.ttf\n./tlwg/Waree-BoldOblique.ttf\n./tlwg/Waree.ttf\n./tlwg/Sawasdee-BoldOblique.ttf\n./ttf-khmeros-core/KhmerOSsys.ttf\n./ttf-khmeros-core/KhmerOS.ttf\n./padauk/Padauk.ttf\n./padauk/Padauk-bold.ttf\n./padauk/Padauk-book.ttf\n./padauk/Padauk-bookbold.ttf\n./nanum/NanumGothicBold.ttf\n./nanum/NanumGothic.ttf\n./nanum/NanumMyeongjoBold.ttf\n./nanum/NanumMyeongjo.ttf\n./nanum/NanumBarunGothic.ttf\n./nanum/NanumBarunGothicBold.ttf\n./droid/DroidSerif-BoldItalic.ttf\n./droid/DroidSerif-Bold.ttf\n./droid/DroidSerif-Italic.ttf\n./droid/DroidSans.ttf\n./droid/DroidNaskh-Bold.ttf\n./droid/DroidSansEthiopic-Regular.ttf\n./droid/DroidSansArmenian.ttf\n./droid/DroidSansFallbackFull.ttf\n./droid/DroidSans-Bold.ttf\n./droid/DroidSansHebrew-Bold.ttf\n./droid/DroidSansMono.ttf\n./droid/DroidSansGeorgian.ttf\n./droid/DroidNaskh-Regular.ttf\n./droid/DroidSansEthiopic-Bold.ttf\n./droid/DroidSansJapanese.ttf\n./droid/DroidSerif-Regular.ttf\n./droid/DroidSansThai.ttf\n./droid/DroidSansHebrew-Regular.ttf\n./openoffice/opens___.ttf\n./dejavu/DejaVuSerif.ttf\n./dejavu/DejaVuSans.ttf\n./dejavu/DejaVuSansMono-Bold.ttf\n./dejavu/DejaVuSans-Bold.ttf\n./dejavu/DejaVuSerif-Bold.ttf\n./dejavu/DejaVuSansMono.ttf\n./ubuntu-font-family/UbuntuMono-R.ttf\n./ubuntu-font-family/UbuntuMono-B.ttf\n./ubuntu-font-family/Ubuntu-RI.ttf\n./ubuntu-font-family/Ubuntu-LI.ttf\n./ubuntu-font-family/Ubuntu-MI.ttf\n./ubuntu-font-family/Ubuntu-C.ttf\n./ubuntu-font-family/Ubuntu-R.ttf\n./ubuntu-font-family/UbuntuMono-BI.ttf\n./ubuntu-font-family/Ubuntu-M.ttf\n./ubuntu-font-family/Ubuntu-L.ttf\n./ubuntu-font-family/Ubuntu-BI.ttf\n./ubuntu-font-family/Ubuntu-B.ttf\n./ubuntu-font-family/UbuntuMono-RI.ttf\n./ttf-indic-fonts-core/lohit_gu.ttf\n./ttf-indic-fonts-core/lohit_hi.ttf\n./ttf-indic-fonts-core/lohit_ta.ttf\n./ttf-indic-fonts-core/Vemana.ttf\n./ttf-indic-fonts-core/lohit_bn.ttf\n./ttf-indic-fonts-core/Malige-n.ttf\n./ttf-indic-fonts-core/utkal.ttf\n./ttf-indic-fonts-core/gargi.ttf\n./ttf-indic-fonts-core/Rekha.ttf\n./ttf-indic-fonts-core/Kedage-b.ttf\n./ttf-indic-fonts-core/Kedage-n.ttf\n./ttf-indic-fonts-core/Malige-b.ttf\n./ttf-indic-fonts-core/Rachana_04.ttf\n./ttf-indic-fonts-core/MuktiNarrow.ttf\n./ttf-indic-fonts-core/Pothana2000.ttf\n./ttf-indic-fonts-core/MuktiNarrowBold.ttf\n./ttf-indic-fonts-core/Meera_04.ttf\n``\n. @StefanSchroeder: I'd rather not if I can avoid it, because it requires accepting a Microsoft EULA. I'll leave it up to @ben-clayton -- if you want me to leave my machine in its current state to test a potential fix, I'll leave it alone. If you want me to install the Microsoft package so no further work is needed, I'll do that to save the effort, since it's not my effort.\n. Thanks for that info, @ben-clayton. I'm sure I can make it work by installing the font, using the workaround you suggested, or forking and adding a font I have as an option. Feel free to close this issue if you think it's a narrow part of the bigger--dataissue you're dealing with separately.\n. @ryanseys Please report the full path toArial.ttf. Did you check the things @ben-clayton suggested above in this thread? I happened to have a Mac lying around so I checked, and myArial.ttfis in/Library/Fonts/Arial.ttf, which isn't in theFontPathsslice mentioned above. I'm sure you can make it work by adding that/Librarypath toFontPaths`.\n. Confirmed: The progress_bar sample runs on my Xbuntu 14.04 machine, without the MS font package. Thanks!\n. ",
    "crawshaw": "@ShawnMilo please file a separate issue for the dockerfile. It may not happen soon, but it should be tracked separately.\n. FYI, my long-term plan for golang.org/x/mobile/app support on windows is https://code.google.com/p/angleproject/. You may want to track golang/go#9306.\n. Driver looks fine. The sample program will not display png/jpeg/etc images until https://github.com/google/gxui/pull/19 is applied.\n. You can also\nhg clone https://code.google.com/p/freetype-go\ninto your GOPATH.\n. A CLA is standard practice in open source projects to make sure ownership rights are clear. Ownership rights are important in minimizing risk. The lack of CLA on the Linux kernel let SCO exploit unclear ownership in their attacks in the past.\nOther free software organizations use even stricter requirements to minimize legal risk. For example, the FSF require ownership be assigned: https://www.gnu.org/licenses/why-assign.html\n. You'll need to install the appropriate OpenGL drivers. How to do that depends on the kind of hardware you have and on the linux you are using. Try doing a google search for \"  install opengl\".\n. A software version of modern OpenGL should be able to support the current driver. But it's also unusual to run into graphics cards that do not support modern gl.\n. Many getter/setter functions could be turned into exported fields. For example, SetRelayoutSuspended.\n. I'm not sure what googlebot is on about, my golang.org address is definitely on the Google CLA. (I'm a little reluctant to fill out the form through fear of breaking something. I'll send sop@ a message.)\ncc @ben-clayton \n. @dskinner agreed, the driver should do something cleverer. The download is just a 5-minute hack to make it easier for people to run samples. The main point of this CL is to shift the font decision to the driver.\nMy intention is to finish a driver I'm working on for golang.org/x/mobile/{app,gl,font}, which knows where android keeps its default, and knows how to query the system default on iOS.\n. Abandoning this in favor of #30 and #31.\n. Methods can be added to image/math if we can reach consensus on what they should be. We had a lot of trouble with it in early discussions. We could find common ground on types, so we started there.\n. Let's punt on this issue for a bit, I believe it will be useful but would like to demonstrate it with code.\nIt is also worth looking at https://godoc.org/github.com/go-gl/mathgl/mgl32 as@shurcooL mentioned, it has a lot of relevant machinery in it.\n. The design of GXUI is particular to Go and would not port well to another language.\nFurthermore, Dart would be an unusual target for an OpenGL-based UI library. Typically Dart runs in web browsers with access to the DOM, a full-featured standardized cross platform UI library. Attempting to reinvent that in a browser would be an enormous effort.\n. You are using a version of Go built with an android C compiler toolchain, but with a non-android GOOS value. You'll have to keep your android Go installation separate from your desktop installation.\nAlso: if you're trying to build GXUI for Android, it won't work yet. I hope to have support in a few weeks.\n. Removing the IDs and using equality on a user-defined type LGTM.\nA few other related thoughts I've been having:\n- I believe the Adaptor index is a flattened view of all of the children. Is this worth it? An adaptor could just index its direct children, and leave it up to the person querying the children to descend into the children.\n- Only doing direct descendants raises the possibility of making Adapter a concrete type with a linked list in it, and it containing a general interface with the element/theme-specific implementation. For example, see how the html package represents nodes: http://godoc.org/golang.org/x/net/html#Node\n- I can't think of a practical situation where you would want more than one theme operating in a process. That leads to a tempting simplification: create a global variable that holds the active theme. A lot of parameters could be removed.\nCurious to hear what you think, but none of these thoughts should block this change. (I would usually send this to a mailing list, but we seem to be using github issues like a mailing list. We can keep trying this new world.)\n. Just because the adaptor instances exist doesn't mean a heavier, app specific backing object needs to have fully loaded.\nIt seems like a significant investment to parameterize these designs by \"may be bigger than system memory\". Millions of items can be easily represented in tens of megabytes. It is not obviously worth it to me for a UI system to cater to more than that.\nConsidering this a little more: one case where bigger than system memory comes up is editing files. I expect any decent text editor to be able to open a 10GB file. However there is no concept in such an editor that would create an enormous Adaptor. You cannot even count lines in a file if you expect to be able to load one of arbitrary size. And where you could, you could create a lot of objects.\n. If you have a practical application of a streaming adaptor that obviously trumps any theoretical argument I can make.\n(I'm still, more broadly, hunting for a way to mixins.)\n. LGTM, will merge when the CLA is sorted.\n. With go build -race I see:\n```\nWARNING: DATA RACE\nRead by main goroutine:\n  github.com/google/gxui/drivers/gl.(refCounted).AssertAlive()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/refcounted.go:75 +0x48\n  github.com/google/gxui/drivers/gl.(Canvas).draw()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/canvas.go:57 +0x5a\n  github.com/google/gxui/drivers/gl.(Viewport).render()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/viewport.go:256 +0x381\n  github.com/google/gxui/drivers/gl.(Viewport).SetCanvas.func1()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/viewport.go:308 +0x113\n  github.com/google/gxui/drivers/gl.(*Driver).run()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/driver.go:85 +0x90\n  github.com/google/gxui/drivers/gl.StartDriver()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/driver.go:47 +0x300\n  main.main()\n      /Users/crawshaw/src/github.com/google/gxui/samples/progress_bar/main.go:50 +0x37\nPrevious write by goroutine 6:\n  sync/atomic.AddInt32()\n      /Users/crawshaw/go/src/runtime/race_amd64.s:255 +0xb\n  github.com/google/gxui/drivers/gl.(refCounted).release()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/refcounted.go:60 +0x6c\n  github.com/google/gxui/drivers/gl.(Canvas).Release()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/canvas.go:236 +0x40\n  github.com/google/gxui/mixins.(Window).Draw()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:92 +0x201\n  github.com/google/gxui/mixins.(Window).update()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:60 +0x144\n  github.com/google/gxui/mixins.(*Window).(github.com/google/gxui/mixins.update)-fm()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:47 +0x34\n  github.com/google/gxui.EventLoop()\n      /Users/crawshaw/src/github.com/google/gxui/event_loop.go:9 +0x88\n  main.appMain()\n      /Users/crawshaw/src/github.com/google/gxui/samples/progress_bar/main.go:46 +0x5ca\nGoroutine 6 (running) created at:\n  github.com/google/gxui/drivers/gl.StartDriver()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/driver.go:46 +0x2f2\n  main.main()\n      /Users/crawshaw/src/github.com/google/gxui/samples/progress_bar/main.go:50 +0x37\n==================\n==================\nWARNING: DATA RACE\nRead by goroutine 8:\n  github.com/google/gxui/themes/dark.CreateProgressBar.func1.1()\n      /Users/crawshaw/src/github.com/google/gxui/themes/dark/progress_bar.go:30 +0x4a\nPrevious write by goroutine 6:\n  github.com/google/gxui/themes/dark.(ProgressBar).Layout()\n      /Users/crawshaw/src/github.com/google/gxui/themes/dark/progress_bar.go:57 +0x33b\n  github.com/google/gxui/mixins/parts.(LinearLayout).LayoutChildren()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/parts/linear_layout.go:64 +0xb61\n  github.com/google/gxui/mixins.(LinearLayout).LayoutChildren()\n      :271 +0x5a\n  github.com/google/gxui/mixins/parts.callLayoutChildrenIfSupported()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/parts/utils.go:14 +0x99\n  github.com/google/gxui/mixins/parts.(Layoutable).Layout()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/parts/layoutable.go:59 +0x60d\n  github.com/google/gxui/mixins.(LinearLayout).Layout()\n      :258 +0x69\n  github.com/google/gxui/mixins.(Window).LayoutChildren()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:100 +0x6ac\n  github.com/google/gxui/themes/dark.(Window).LayoutChildren()\n      :1266 +0x52\n  github.com/google/gxui/mixins.(Window).update()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:56 +0xf5\n  github.com/google/gxui/mixins.(*Window).(github.com/google/gxui/mixins.update)-fm()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:47 +0x34\n  github.com/google/gxui.EventLoop()\n      /Users/crawshaw/src/github.com/google/gxui/event_loop.go:9 +0x88\n  main.appMain()\n      /Users/crawshaw/src/github.com/google/gxui/samples/progress_bar/main.go:46 +0x5ca\nGoroutine 8 (running) created at:\n  time.goFunc()\n      /Users/crawshaw/go/src/time/sleep.go:129 +0x75\nGoroutine 6 (running) created at:\n  github.com/google/gxui/drivers/gl.StartDriver()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/driver.go:46 +0x2f2\n  main.main()\n      /Users/crawshaw/src/github.com/google/gxui/samples/progress_bar/main.go:50 +0x37\n==================\n==================\nWARNING: DATA RACE\nWrite by goroutine 6:\n  sync/atomic.AddInt32()\n      /Users/crawshaw/go/src/runtime/race_amd64.s:255 +0xb\n  github.com/google/gxui/drivers/gl.(refCounted).release()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/refcounted.go:60 +0x6c\n  github.com/google/gxui/drivers/gl.(Canvas).Release()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/canvas.go:236 +0x40\n  github.com/google/gxui/mixins/parts.(DrawPaint).Draw()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/parts/draw_paint.go:73 +0x3da\n  github.com/google/gxui/mixins.(LinearLayout).Draw()\n      :214 +0x63\n  github.com/google/gxui/mixins/parts.(PaintChildren).PaintChild()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/parts/paint_children.go:38 +0x3e\n  github.com/google/gxui/themes/dark.(Window).PaintChild()\n      :1310 +0x8c\n  github.com/google/gxui/mixins/parts.(PaintChildren).Paint()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/parts/paint_children.go:31 +0x21a\n  github.com/google/gxui/themes/dark.(Window).Paint()\n      /Users/crawshaw/src/github.com/google/gxui/themes/dark/window.go:26 +0xcf\n  github.com/google/gxui/mixins.(Window).Draw()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:89 +0x176\n  github.com/google/gxui/mixins.(Window).update()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:60 +0x144\n  github.com/google/gxui/mixins.(*Window).(github.com/google/gxui/mixins.update)-fm()\n      /Users/crawshaw/src/github.com/google/gxui/mixins/window.go:47 +0x34\n  github.com/google/gxui.EventLoop()\n      /Users/crawshaw/src/github.com/google/gxui/event_loop.go:9 +0x88\n  main.appMain()\n      /Users/crawshaw/src/github.com/google/gxui/samples/progress_bar/main.go:46 +0x5ca\nPrevious read by main goroutine:\n  [failed to restore the stack]\nGoroutine 6 (running) created at:\n  github.com/google/gxui/drivers/gl.StartDriver()\n      /Users/crawshaw/src/github.com/google/gxui/drivers/gl/driver.go:46 +0x2f2\n  main.main()\n      /Users/crawshaw/src/github.com/google/gxui/samples/progress_bar/main.go:50 +0x37\n==================\n```\n...and more. (I have been wondering about that refcounting mechanism and if there is some other way.)\n. Nice.\nYou can tell I'm a supporter of a single GL ES 2 package that switches itself based on build tags. If you take a look at the internals of golang.org/x/mobile/gl, you'll see it is exactly that.\nhttps://github.com/golang/mobile/tree/master/gl\nRight now it can be compiled (with no dependencies other than cgo+having GL installed on your system on) android, linux, iOS, OS X. It also deliberately hides all cgo types from the exported API, as I have long been wondering about a WebGL backend.\nIf you wanted to use that package I'd be willing to add conditional build targets for web. The other major piece of work is windows, which is https://github.com/golang/go/issues/9306.\nThe more interesting question is a unified input event library. I've been effectively writing my own glfw (which would be impressive if I had done windows, but I haven't yet). You can compile and run golang.org/x/mobile/app on linux+os x desktops, and input events are faked as touches.\nIn retrospect, it was probably a mistake to do this for desktop. What the mobile/app package should do is, for android/iOS what it does now, and on desktop, it should depend on a standard package that uses glfw.\nThat same standard package could be used by a gxui driver. It could use glfw on linux/mac/windows, and custom event code on gopherjs. Weirdly, on android/iOS it could use the app package. (That leads to a really weird state where it inverts its dependencies: on android gxwt depends on mobile/app, on desktop app depends on gxwt. But it will work, because the cycle never exists in a single build.)\nProposal\n\nWe expand golang.org/x/mobile/gl to support WebGL and windows, and use it in the GXUI driver.\nWe introduce a gxwt package. It provides a pure-Go view of windowing events with no dependencies in its exported interface. It uses build tags to switch its implementations:\n  linux/windows/OS X: glfw\n  android/iOS: x/mobile/app\n  web: gopherjs?\nI modify x/mobile/app to use gxwt in its desktop configuration.\n\nThoughts?\n. I would be happy to have github.com/google/gxui/gxwt. The mobile/app package would depend on it when compiling for desktop, but would not use it for its primary purpose, building apps. That seems fine to me.\n(Ideally there would be a golang.org/x/ui, which would host mobile/gl and gxwt. But we are a very long way from knowing what to put in there.)\n. It's an acceptable dependency for the desktop development case. It does not introduce any notices or auditing burdens on apps, as that code will not be compiled (or even downloaded) when building for android/iOS. So gxui/gxwt is OK. \n. Hey @shurcooL your goglfw looks a lot like what I was thinking of for gxwt. One extra ideal I'd try to reach for: no external references to any gl packages. That way it could be used by other drivers (for example, html5 canvas, or one of the many GL replacement languages that are appearing).\nAs for golang.org/x/mobile/gl, it is generally go gettable today. You need to install an opengl header on a linux machine, but that is commonly done on any system with the compilers for cgo already. The headers come with OS X's compilers. Windows is the odd system out, but it is simply not done yet. If you ever find yourself unable to go get it, please file a bug.\n. Very cool. I'm excited to see how your goglfw turns out!\n. /cc @ben-clayton \n. Thanks Ben.\nI agree that this technique is effectively baking the fonts into the theme. It's a separate package just because it's conceptually isolated and these default fonts we can ship (thanks to their license) could be used be a \"light\" theme too.\nI'll look at expanding on this script later, but honestly it's so simple I'd rather that someone shipping their own fonts copied it and modified it as necessary. That might change later, as there are a bunch of things in the truetype font not used by freetype-go that we could strip out for compression.\n. LGTM\n. LGTM, that's definitely an improvement.\n. Thinking very high level for a moment,\nThe idea behind Adapters is that the logic for drawing the UI element can be backed by any number of models. An alternative would be to invert responsibilities. Have one fixed, concrete data model for a UI element that an unknown-to-the-UI backing model is meant to update, that is:\ntype Node struct {\n        Children []*Node\n        Control // or something that represents the thing to draw\n        ...\n}\nIf each of these data model values is represented by a *T, then the pointer acts as a unique identifier. It is then the responsibility of any arbitrary data structure that is being visually represented to understand these concrete types and manipulate them. When the UI wants to change these types, the change instruction is encoded (e.g. Action{Delete, nodeValue}) and sent to the backing code that is responsible for keeping the model up to date.\nSo something like a file dialog ends up with two models:\nfileNode -> Node -> UI\n(This is just a random idea. It's not even clear to me that it would work.)\n. Closes #53.\n. I'm still wrapping my head around adapters, but LGTM.\n. A material design theme would be lovely. It is a significant undertaking that I doubt any of us have time for yet, so if anyone wants to contribute work towards a material theme, please do.\n. Does x/mobile/gl support windows yet? (I can't remember if either Hana or I added it.) I hope it's not to hard to add, but I wouldn't want to break any gxui users on windows.\n. I have been extremely busy with android/iOS platform bugs, so I won't have time to look at windows support before 1.5. If someone can get GLOW working quickly, makes sense to me.\n. ",
    "ajstarks": "my build recipe (on Mac OS X)\n$ cd ~/Code\n$ git clone https://github.com/nigels-com/glew.git glew\n$ cd glew\n$ make extensions\n$ sudo make install\n. you can run the samples like this:\n$ ./polygon -data ~/Downloads\nif ~/Downloads contains SourceCodePro-Regular.ttf\n. ",
    "hajimehoshi": "Thank you for taking a look. I've just signed the Google CLA.\n\nI would need to look into whether the license would permit that first. What I'll probably do instead is add some platform dependent code to find a font in the OS's font directory instead. It's a bit rubbish requiring assets just to get some text on the screen.\n\nSure. That makes sense.\n. ",
    "ryadzenine": "Hi there, here is the ressource you are looking for \nSource Code Pro\n. ",
    "cnbuff410": "The one I downloaded from http://adobe-fonts.github.io/source-code-pro/ doesn't work. I have to download from online resource page(like this one )to make it work. Just FYI.\n. ",
    "googlebot": "Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. Thanks for your pull request.\nIt looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA) at https://cla.developers.google.com/.\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check the information on your CLA or see this help article on setting the email on your git commits.\nOnce you've done that, please reply here to let us know.  If you signed the CLA as a corporation, please let us know the company's name.\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project, in which case you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. CLAs look good, thanks!\n ok \n. Thanks for your pull request.  It looks like this may be your first contribution to a Google open source project. Before we can look at your pull request, you'll need to sign a Contributor License Agreement (CLA).\n:memo: Please visit https://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll verify.  Thanks.\n\n\nIf you've already signed a CLA, it's possible we don't have your GitHub username or you're using a different email address.  Check your existing CLA data and verify that your email is set on your git commits.\nIf you signed the CLA as a corporation, please let us know the company's name.\n\n need_sender_cla \n. ",
    "linquize": "\nIs this version of OpenGL OK? I got black screen.\nI run image_viewer --file path\\to\\image.png\n. ",
    "StefanSchroeder": "You should consider installing the ttf-mscorefonts package.\n. ",
    "ryanseys": "I am attempting to run on Mac 10.10.2 and getting the same error. I definitely have Arial on my machine.\n. I copied Arial.ttf into /Library/Fonts and that worked. However changing the FontPaths list to include /Library/Fonts/Microsoft/ (where Arial.ttf resides) didn't work. I'm not sure why that is the case.\n. I ran go get code.google.com/p/freetype-go/freetype and it worked for me.\n. ",
    "dc0d": "Crap; half of story was my fault. I had not hg in system path. Still the other half is \"code.google.com/p/freetype-go/freetype/raster\" does not exists.\n. Thanks; still no lock. Maybe this should wait until transition to GitHub gets completed(?) and packages be used with new paths - if so, this would work fine on Windows.\n. ",
    "AlekSi": "That's the standard 3-clause BSD license: http://opensource.org/licenses/BSD-3-Clause\n. And here is some info why this phrase is still commonly used in OSS: http://projects.opensource.org/pipermail/license-discuss/2013-June/001012.html\n. ",
    "snaggen": "Sorry my bad! But do you really need a CLA then? \n. SCO had nothing to do with singning a CLA or not. SCO bought the rights to UNIX, and claimed that there were code from that codebase in Linux. Which they could not show any occurance of. They could have done exactly the same thing even if Linux had a CLA. In fact some of the things around SCO was due to unclear licenses, much like a CLA. It is just one more paper that may be exploited. Now you have two legal documents instead of just one, and if there is any contradiction in them that might be exploited. \nAnd in case of the Kernel, a CLA would actually be harmful, since that would give the owner of the code more rights than the contributors. That might put some people off... \nBut if you like a CLA, have fun. I will not sign any, and I'm probably not the only one that thinks CLAs are rubbish. \n. ",
    "amitu": "I have signed the CLA.\n. @ben-clayton thanks for accepting the patch.\nI was not aware of the Texture.SetFlipY function.\nWhy do we have to use that? Why are we not fixing it internally? \nBMP is a legacy of past, it stores stuff upside down. Why does this library expect images upside down?\n. ",
    "dskinner": "Does it make sense to support non-accelerated rendering where possible? For example, mesa on linux and LIBGL_ALWAYS_SOFTWARE env flag.\nOr is it more suitable to expect such a thing to be configured at the OS level?\n. That 250K item list sounds great but I imagine there's a cap to the max garbage generated irregardless of actual adapter size and dependent on scroll speed. I am still concerned for more complex forms so will investigate the actual performance hit.\n. This is a slick idea but wouldn't it be more appropriate to query the system for a default font? On linux, the Fontconfig binary fc-match with no arguments will return a suitable default font, DejaVuSans.ttf in my case for example. I'd imagine OSX and Windows have similar facilities.\n. You're right. My rationale falls into the case of designing a look-alike theme (something I have no interest personally in doing), so the functionality should be there. I'll file an issue.\n. closing this in favor of https://github.com/google/gxui/pull/31 which states the issue better (plus code).\n. This is one of the things I was talking about in #26 and masking in interface{} is how I did this in https://github.com/dskinner/ui/blob/master/recycler.go#L35\nthough in that case, I masked the actual retrieval with a Selector interface that would be implemented on an adapter that is also composable with a Filterer interface (optionally implemented on the adapter).\nThe intent there is to trigger the filter action on the list and respond appropriately with animations and also be able to compose default implementations for some things with minimal developer input.\nIn the same breath, this could all be done on an adapter and the developer could keep around references for both the adapter and list, filter the adapter, and then notify the list.\nMy 2 cents\n. > Only doing direct descendants raises the possibility of making Adapter a\n\nconcrete type with a linked list in it\n\nI think its a mistake to assume that just b/c a developer writes an adapter\nthat reports N items, that all of those items are actually loaded into\nmemory.\nOn Fri, Mar 20, 2015 at 3:06 PM David Crawshaw notifications@github.com\nwrote:\n\nRemoving the IDs and using equality on a user-defined type LGTM.\nA few other related thoughts I've been having:\n-\nI believe the Adaptor index is a flattened view of all of the\n   children. Is this worth it? An adaptor could just index its direct\n   children, and leave it up to the person querying the children to descend\n   into the children.\n   -\nOnly doing direct descendants raises the possibility of making Adapter\n   a concrete type with a linked list in it, and it containing a general\n   interface with the element/theme-specific implementation. For example, see\n   how the html package represents nodes:\n   http://godoc.org/golang.org/x/net/html#Node\n   -\nI can't think of a practical situation where you would want more than\n   one theme operating in a process. That leads to a tempting simplification:\n   create a global variable that holds the active theme. A lot of parameters\n   could be removed.\nCurious to hear what you think, but none of these thoughts should block\nthis change. (I would usually send this to a mailing list, but we seem to\nbe using github issues like a mailing list. We can keep trying this new\nworld.)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/gxui/issues/46#issuecomment-84131387.\n. hundreds of megabytes is easily represented by tens of items. Exploring\nmobile, such concerns may be more valid when conflated with other UI, not\njust \"may be bigger than system memory\".\n\nOn Fri, Mar 20, 2015 at 3:16 PM David Crawshaw notifications@github.com\nwrote:\n\nJust because the adaptor instances exist doesn't mean a heavier, app\nspecific backing object needs to have fully loaded.\nIt seems like a significant investment to parameterize these designs by\n\"may be bigger than system memory\". Millions of items can be easily\nrepresented in tens of megabytes. It is not obviously worth it to me for a\nUI system to cater to more than that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/gxui/issues/46#issuecomment-84133658.\n. For what it's worth, +1 on global theme. Referencing multiple themes sounds\nwrong, but a theme that can reference multiple themes sound like how that\nshould go if the functionality was needed.\n\nOn Fri, Mar 20, 2015 at 4:08 PM Ben Clayton notifications@github.com\nwrote:\n\n\nI believe the Adaptor index is a flattened view of all of the\n  children. Is this worth it? An adaptor could just index its direct\n  children, and leave it up to the person querying the children to descend\n  into the children.\n\nI'm guessing you're referring to the TreeAdapterNode\n  https://github.com/google/gxui/blob/rm_itemids/tree_adapter.go#L11?\nIf so - no, the index parameter of ItemAt\nhttps://github.com/google/gxui/blob/rm_itemids/tree_adapter.go#L13 is\nthe index into the immediate descendants of that node [0 - Count\nhttps://github.com/google/gxui/blob/rm_itemids/tree_adapter.go#L12-1].\nItemIndex\nhttps://github.com/google/gxui/blob/rm_itemids/tree_adapter.go#L14 is a\nlittle more complicated, in that it will return the index of the immediate\ndescendants with that item or if that child contains the item\nindirectly.\n- Only doing direct descendants raises the possibility of making\n  Adapter a concrete type with a linked list in it, and it containing a\n  general interface with the element/theme-specific implementation. For\n  example, see how the html package represents nodes:\n  http://godoc.org/golang.org/x/net/html#Node\nIf I follow you correctly, this doesn't really seem much like my idea of\n  an Adapter, but more like another concrete wrapper around the dataset. I\n  agree with @dskinner https://github.com/dskinner on this - one of the\n  big wins with this interface is that data can be streamed. This is\n  something that we could really benefit from on our project that uses GXUI.\n- I can't think of a practical situation where you would want more\n  than one theme operating in a process. That leads to a tempting\n  simplification: create a global variable that holds the active theme. A lot\n  of parameters could be removed.\nHumm, interesting idea. I can't really think of one situation either.\n  I'll mull it over.\n(I would usually send this to a mailing list, but we seem to be using\ngithub issues like a mailing list. We can keep trying this new world.)\nOn my 4th day of using GitHub, I'm actually quite liking it. Some aspects\nof code-reviews is a bit clunky, but given how angry Gerrit has been making\nme recently, this is actually quite refreshing. I'm also liking the\nmarkdown links - it works really nicely.\nShall we give it another week and see?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/gxui/issues/46#issuecomment-84147440.\n. One approach I'm working on - on android - is to treat adapters as containing collated sets. So typically for large lists, there may be a db cursor containing a relevant data set. There may then be additional requirements for the display of the list including things like grouping headers, unique position views inlined, repetitive views not necessarily related to the cursor data itself located at offsets, etc.\n\nThe next step to that is to collate multiple cursors which is useful for expand and collapse of additional inlined data (tree view) and other currently unidentified scenarios.\nI think the key word here is inlined since the adapter is effectively about maintaining a flat list of items even though such items might be visually represented otherwise.\nThis would make the responsibilities of the adapter the following:\n- Determine true length of collated sets and any defined affixables as a single flat list\n- Determine control type at a given offset and be able to retrieve the correct (if relevant) data (such as moving a cursor to the correct position to pass on during binding)\n- Facilitate control binding (assuming adapter controls implemented something like type Binder interface { Bind() })\nOf course the last point isn't addressed very well in Go for binding from a specific set.\nReally, as long as the base adapter is general enough, all of this doesn't need to be written to write a tree view and could exist in a 3rd party lib, but I think a robust set of features similar to the above would facilitate things like a Tree view and even allow for variations on the Tree with minimal additional work while also facilitating lots of other possibilities for displaying various lists.\n. > It is my understanding that GLES on desktop GPUs is not commonly supported.\nOn linux, you normally need to be running a mesa driver (intel, nouveau) to get EGL support, otherwise it will likely fail. With the push towards wayland, which currently requires EGL to avoid pulling in X, we should start seeing support from proprietary drivers soon (if it's not there already, haven't been keeping up with it).\n. changes to files beyond textcursor.go were kept to a minimum to assist in identify any issues with the transition.\n. I signed it!\n. @ben-clayton I've pushed the updates previously discussed a few days ago but got sidelined before I got to detail some thoughts on this pull request.\nCurrently, I've left Index as an int instead of the suggested uint in your original comment. This was due to the Range function which would allow overflowing the uint and make an error less obvious. For example, TextCursor{Index: 0, Length: -5} is not valid, and being able to instantiate the struct directly skips any checks that might occur during construction.\nI've also added a constructor to help with working with methods such as WordAt and other funcs that return a range, though the name NewTextCursor doesn't feel quite right. The motivation for this is simply that typing TextCursor{Index: end, Length: start-end} is unnecessarily error prone. Somewhere along the way, I had myself accidentally typed TextCursor{e, e-s} and it took a good minute to find. This bothers me.\nIn retrospect, I'm actually more in favor of how you originally viewed the code as TextCursor{From, To}. This simplifies working with intervals and at worse, makes a single caret index verbose.\nAt the same time, this brings into question the interval/ package. This package would play an important role in multiple cursors/selections, syntax highlighting, indexing, etc. I looked through gxui and saw this package was only used for managing cursors/selections, and the code_syntax_layer and subsequent paints.\nThe package contains some oddities though such as the unused U64. It's also curious why the original TextSelection didn't simply make use of IntData, storing caret location at IntData.data and so on (via struct embedding or w/e).\nThere is another interval package from biogo: https://github.com/biogo/store/tree/master/interval\nI briefly looked at it, though the binary-tree/pointers approach in my experience is typically slower than a slice of struct literals. This may be important for syntax highlighting large files but it may be too soon to say. In general, inserts were five times slower than gxui/interval. I didn't measure GC pause for having all those pointers, not sure how relevant that will be in 1.5 even.\nRegardless, I'm not totally dismissive of a 3rd party package here considering the experimental vendor support coming in 1.5, but at the least I think it's a good model for cleaning up gxui/interval, removing a lot of the redundancy found in the text cursor code, and consider other cases the interval package will play a role in (i.e. indexing, bookmarking).\nSo right now I feel this pull request is premature.\n. Hey,\nNo worries about the long delay. My concerns still stand about this being premature. While agree the current pull request is an improvement over what's currently in master, it still doesn't address all concerns and that's just the facts. If we merge this, it's only due to be replaced by something more complete later on.\nMy main concern as expressed on gitter is still with a selection that displays carets on each end. With this current pull-request as is, that requires some hackery, but I don't think this should be an edge case at all. On mobile in fact, this is quite normal. On desktop, it should definitely be an option.\nI want to follow up with a pull request that actually addresses this issue but I'll also want time to benchmark differences between implementations so as to find the most suitable way to do this while still managing to do things like syntax highlighting in real time without much delay.\nIn regards to the interval package, I gave a cursory glance over the package from android-sdk that you linked and I think it'd be worthwhile to backport this to gxui, particularly since you mentioned spending time speeding it up and the fact that it's much more well documented.\n. A 3x2 grid should intuitively mean 3 across and 2 down. I'd either update the comment or change the name of the func to be representative of passing N rows as the first argument.\nThe breakdown in language occurs mostly b/c, I would guess, people aren't column oriented. They are considering row length, and number of rows. Once you are column oriented in thought, things get weird.\nIn short, update the comment.\n. Cursor.Index is the location of the caret. Given that the words cursor and caret refer to the same idea, the rationale for the field name Index is that a single cursor/caret can only exist at a single position.\nI am somewhat opposed to the names From and To as it conflates the idea of a cursor/caret and a selection. This is also why I omitted the Start and End methods. A selection is retrieved via TextCursor.Selection which is currently simple enough to be a pair of ordered indices, but still distinct from the cursor itself. Would TextCaret.Index be more obvious?\nRegarding Cursor.Mark, I'm not totally convinced on that name either. Mark is meant to represent storing a cursor position but is still volatile. During transforms, mark is never meant to be operated on independently. All transforms should either adjust only the cursor index, or apply the same change to cursor index and cursor mark. I've been considering how to enforce this contract through what methods are available on TextCursor as well.\nIf you look at the TextCursorSlice.Transform, this uniformly transforms index and mark, no special cases. This is essentially what TextCursor.Offset does as well, allowing the cursor, and any selection implied, to move around.\nIf you also look at TransformCarets (which I forgot to rename to TransformSelection, will follow up with that change), it only operates on the cursor index.\nSo those transform methods operate within the bounds of the contract I describe, but the TextCursor itself does not yet.\nWhat I've considered next to assure TextCursor makes this clear is to provide the following constructors instead in a follow up commit (since it will touch more code elsewhere). NewTextCursor(index int) Cursor and NewTextCursorSelection(start, end int).\nSo the distinction I'm trying to make here is that a TextCursor is not a half-closed interval up until the point you call TextCursor.Selection(). It's just happen-stance they are stored side by side in the same struct due to a selection being trivially represented by an additional index.\nI think this is an important distinction, particularly when you look at all the method on textboxcontroller working with selections and carets and all the ints going around everywhere. A new caret creates a hidden selection that could be retrieved with a selection method and other weirdness.\nI'm also against the redundancy of Cursor.Caret, as I hope I clarified what a TextCursor is above but perhaps renaming to TextCaret would make things totally obvious.\n\nI'm not sure it's worth bringing in the concept of selection into the TextCursor documentation \n\nI agree. That's more or less there due to maintaining a similar constructor to the old code.\nI love the ascii art :)\n. I've considered this as well but I'm not sure what the ramifications are for redrawing depending on someones expectations, whether pushing new controls to gxui or writing an app against gxui that does something novel.\nUltimately what I had in mind was to be able to retrieve an instance of TextCursor from a controller for read-only stuff, providing a more concrete type from method returns and replacing methods like TextBoxController.Selection(int) int TextBoxController.Caret(int) int and all those other (int) int methods with a smaller set that does the same thing.\nI'm pretty sure this would result in a simpler api for TextBoxController but I haven't finished thinking it all the way through yet.\n. SGTM\n. Range() does make sense if one conflates the idea of a TextCursor and Selection, otherwise if following what I outlined in an earlier comment about the contract the indices a TextCursor follows, some meaning is lost calling this Range()\n. SGTM\n. providing a bool to orient a TextCursor worries me. This ended up with some strange abuses in the old code that made things hard to follow and grasp, particularly with the lack of rigor in how start and end were set in combination with the use of a bool during transforms.\nAt the same time, I don't necessarily like having this as a method on TextCursor but stopped short of making a new function as I couldn't think of a name I liked and feeling like a low priority at the time.\nI've noted the idea of an orientation in some of the docs when you have the logical components of a cursor and a selection, but calling cursor.NewSelection as you say isn't immediately obvious why you would do that since the cursor itself is only used to inpect an orientation for the creation of something new not related to it.\nThe idea of an orientation could become a concrete type like\n``` go\ntype Orientation int\nconst (\n  Left Orientation = iota\n  Right\n)\n```\nwith a method to retrieve orientation and making the distinction more clear, but I didn't see the value in that at the time. But perhaps it does make sense? Function names get a bit silly at this point though, for example NewTextCursorSelectionOrient(start int, end int, orient Orientation) TextCursor\n. this is an unfortunate carry over from the old code. Ideally I'd like to completely remove this method.\n. SGTM, what about the use of New[...] ? I can change to Create[...] to stay consistent as well.\n. I was just mulling over removing mark (a second index) completely and this is a great idea\n. disregard my previous comment, Range() sounds good.\n. ",
    "nieware": "First of all, thanks for starting this project! I think there's a lot of promise in a native Go UI library and I'm looking forward to how it will develop!\nI don't know about you, but what I find disagreeable about the fonts in GXUI is the lack of subpixel rendering. This has become so commonplace nowadays that fonts rendered with \"conventional\" smoothing techniques look \"not quite right\", as you wrote, at least on low-DPI screens. I have investigated a bit, and unfortunately freetype-go doesn't support subpixel rendering at the moment - which makes sense considering that the initial application was drawing text into images, but is unfortunate when you want to use it for a UI library. I'd even volunteer to do it, but there's a lot of theory involved that I'm not familiar with, so the task is pretty daunting. Maybe looking at the subpixel rendering code of the original freetype library and porting that to go is more feasible?\n. ",
    "dmitshur": "Another factor to take into account is that anti-aliasing is turned on with 4 samples:\nhttps://github.com/google/gxui/blob/e60202108a86126a804f4ca9062aa0cacda092e7/drivers/gl/viewport.go#L71\nGo\nglfw.WindowHint(glfw.Samples, 4)\n. Ah, so each glyph is just a textured quad? I see; I hadn't looked into its details yet. In that case you are right, MSAA should not affect it.\n. :+1: to the idea.\nIf possible, I'd like to see github.com/go-gl/mathgl/mgl32 used too. Are there valid reasons why it isn't?\n. > Yup mgl32 looks like a pretty good replacement. It doesn't have my fantastic unicode art though. :)\nPlease feel free to make a PR, improvements to it are always welcome.\n. That bug is fixed in GLFW 3.1.1, and there's a PR to update the Go bindings to that version at https://github.com/go-gl/glfw/pull/133.\nCan you try that glfw3.1.1 branch (https://github.com/go-gl/glfw/tree/glfw3.1.1) and see if it fixes the issue?\nOur goal is to merge that branch within a day or two.\n. @weberc2 That commit isn't on the glfw3.1.1 branch. It should be commit go-gl/glfw@e2a72536141989e2443442660d2cd362d10b9e70.\n. I was just going to open an issue about this and more... Now I'm not sure if I should post here or new issue.\n. I'm working on this now (alongside with adding WebGL backend to x/mobile/gl, as discussed in #49).\n. Okay, I've got a working version of the driver that uses x/mobile/gl and runs both on desktop, and in browser (via the new WebGL backend).\nI ran into two more x/mobile/gl API issues while making this. One is described at https://github.com/golang/go/issues/10218#issuecomment-87332142.\nThe other has to do with with x/mobile/gl.BufferData:\nfunc BufferData(target Enum, src []byte, usage Enum)\ngxui currently tries to support multiple src types like []float32, []uint8, []uint16, []uint32. I'm only aware of f32.Bytes helper to convert []float32 data to []byte at this time.\nFor now, I did a quick hack to get it to run:\n`` Go\nfunc CreateIndexBuffer(ty PrimitiveType, data16 []uint16) *IndexBuffer {\n    // HACK: I know onlyUSHORT` PrimitiveType is being used atm,\n    //       so this was the quickest thing to get it to compile and run. Assumes LittleEndian.\n    data := make([]byte, len(data16)2)\n    for i, v := range data16 {\n        data[2i+0] = byte(v >> 0)\n        data[2*i+1] = byte(v >> 8)\n    }\n...\n\n```\nBut we need to think of the right long term solution. There's more than one option, each with tradeoffs (performance vs. generality of code and ability to run on platforms with different endianness, etc.).\n. I just need to clean up a little and rebase on top of latest master, then I can make a PR for review and potential merging.\nBut before I can do that, I need to know the following:\n- Would you prefer a PR that changes/replaces the current drivers/gl from using github.com/go-gl/gl/v2.1/gl to one that uses golang.org/x/mobile/gl (with only desktop and mobile support, WebGL to be added, and no Windows support yet)? Or would you prefer a PR that adds a 2nd driver that is a copy of the current gl driver with the only difference that it uses golang.org/x/mobile/gl?\nThe advantage of replacing current driver is that it will receive most thorough testing as everyone will be using it (and the samples don't need to be duplicated, one for each driver).\nThe disadvantage is that I expect golang.org/x/mobile/gl to be slightly slower since it's a higher level OpenGL/OpenGL ES/WebGL interface than github.com/go-gl/gl/v2.1/gl. Additionally, golang.org/x/mobile/gl currently does not support Windows (see issue https://github.com/golang/go/issues/9306). And it also needs a few more API fixes (see https://github.com/golang/go/issues/10218#issuecomment-86826910).\nI am guessing it's better to go for 2 separate drivers for now, so that will be my upcoming PR. But feel free to comment on that.\n. Thank you for the feedback. I'm really glad you liked this! :D\n\nThis is so figgin cool, I woke up my wife this morning and showed her. She had no idea what she was looking at, but I know she recognized it as figgin cool as I'd normally get punched for waking her that early on a Saturday.\n\nHaha, thanks!\n\nI think needing uint32 for indices is going to be pretty rare. I have no objections to making it uint16 by default.\n\nSounds good.\n\nThis surprised me, and I was even more surprised to find that actually this is completely correct behaviour. The GLES 2 spec (on which WebGL is based) states:\nThe matrix is specified in column-major order. transpose must be FALSE.\nWe can just make the transpose flag false and then flip the order of multiplies in the the shader to be VEC * MAT.\n\nIt's great that this is specified in the spec. However, I cannot find that statement in the OpenGL ES 2.0 spec, not WebGL 1.0 or 2.0 specs. Your link points to WebGL 2.0 spec (not yet implemented by most browsers), and I don't see it there either.\nIn any case, this is no longer an issue since it's been changed to use false in google/gxui@597c9ea32bd859b64c65ed3cc6572e92101f8135.\n\nlow_p is probably too low for high resolution mobile displays.\n\nI'm okay with that, we can use mediump or highp. I've used the lowest setting (highest performance) as an initial starting point, and I'm ready to increase it as soon as I notice precision issues. It just needs to be set to some value for the shader to compile in WebGL.\n\nGo way, way, back to Wednesday and we were using go-gl-legacy which has a similar set of APIs. I actually really liked this interface, but in order to drop the GLEW dependency that was giving so many people grief we switched to go-gl/v3.2-core.\nWe could switch again, but I'm guessing @crawshaw might want to get involved in this discussion first.\n\nI've seen that commit, and I think it's great you moved off of go-gl-legacy/gl, thus making this package go-gettable without manual GLEW installation being required.\nThe main change/advantage of go-gl/gl/... over go-gl-legacy/gl is that the former is go-gettable. I am fairly certain the type change was not a deliberate change. It's just that go-gl/gl/... packages are automatically generated via glow from XML specs for OpenGL, and so they follow the C spec quite closely. But at the time, we likely did not know which API style is best in the long run, so I think the existing go-gl/gl/... API is a starting point that can evolve if needed.\n(Please also note that packages in go-gl organization have been around since many years ago, and the goal has always been to make it easier for Go developers to use OpenGL and related tech. This was way before more official efforts like x/mobile/gl came around. As such, the packages in go-gl are always looking for a better home as more official Go packages and can be modified as needed. Don't think of them as something that cannot be changed and needs to be reinvented.)\n\n\nConsts like gl.TRIANGLE_STRIP are not const on all platforms.\n\nReally? Do you have any references to back this? I assume that's why you're copying all the GL constants into struct fields?\n\nSorry, let me rephrase that in a less confusing way.\nDue to implementation details of the WebGL backend, constant values such as TRIANGLE_STRIP and others are not available as Go constants. This is because they are fetched from the existing WebGLContext which is created later on. The desktop OpenGL packages tend to hardcode the constants from the OpenGL spec rather than fetching them dynamically from the OpenGL context. They are still constant values (as defined by the spec).\nBecause gxui tries to define them as Go consts, it couldn't work.\nMy suggestion here is the following. Either use gl.TRIANGLE_STRIP directly if its value is needed. Otherwise, just use own constants like const (TRIANGLE_STRIP = iota; ...). I don't see the advantage of doing const TRIANGLE_STRIP = gl.TRIANGLE_STRIP.\nBut I think the WebGL backend should be changed to define them as consts, and this problem goes away.\n\nMy thoughts are this is awesome and we should definitely discuss ways of making the gl driver more flexible to make this a thing. I'd like to wait for @crawshaw to share his thoughts, as he's been looking into what's involved in getting something running on mobile.\n\nI am really glad to hear this! This is exciting and I look forward to seeing this package become simpler and more cross platform.\n\n\nYou can tell I'm a supporter of a single GL ES 2 package that switches itself based on build tags.\nRight now it can be compiled (with no dependencies other than cgo+having GL installed on your system on) android, linux, iOS, OS X. It also deliberately hides all cgo types from the exported API, as I have long been wondering about a WebGL backend.\nIf you wanted to use that package I'd be willing to add conditional build targets for web.\n\nI think I'd be happy to use that package and add a web backend to it. That way it will support OS X, Linux, Windows (after golang/go#9306), iOS, Android and web.\nMy only reservation about it initially is that I didn't think it was go-gettable, unlike go-gl/gl/.... To me, having a Go package go-gettable (meaning there are no manual steps aside from go get -u; all Cgo dependencies are embedded) is extremely valuable, and once some functionality becomes go-gettable via some package, I refuse to \"go back\" to any other package that doesn't have this feature.\nAfter looking at it more closely now, it appears that it doesn't require manual dependencies to be installed (at least on OS X), any more so than go-gl/gl/.... If so, that is excellent!\n\nThe more interesting question is a unified input event library. I've been effectively writing my own glfw (which would be impressive if I had done windows, but I haven't yet). You can compile and run golang.org/x/mobile/app on linux+os x desktops, and input events are faked as touches.\n\nThe key realization about GLFW is that its value is not in that it can create a window with OpenGL contexts and get input on OS X, Linux and Windows. That is the \"easy\" part - relatively speaking. The hard part is the maintenance and support of all idiosyncrasies of the platforms and versions it supports.\nThe goal of GLFW is to abstract out those platform differences, bugs and problems, and create as consistent an environment as possible for your application.\nThe Windows, Cocoa, X11 and other OS APIs are extremely unpleasant to work with and have tons of issues, undocumented features, bugs, etc. The development history of GLFW spans more than a decade. Just version 3.0+ of GLFW is already at 2423 commits, with 285 issues closed. Most of that work is about resolving those platform-specific issues. Supporting those platforms, and especially multiple versions, is a very large amount of work, and thus it's best to centralize it in once place. When there's a new issue that requires a workaround, it's best to have to fix it just in GLFW, rather than multiple libraries that are all equally affected. GLFW is free and open source, so I really don't see a good technical reason to avoid using it (aside from NIH, but that's not a good reason).\nI like this blog post from Azul3D where it made the decision to drop a similar custom solution in favor of using GLFW.\n\nIn retrospect, it was probably a mistake to do this for desktop. What the mobile/app package should do is, for android/iOS what it does now, and on desktop, it should depend on a standard package that uses glfw.\n\nThe above is why I am very glad to hear this, and I fully support using GLFW (in the backend) for desktop rather than trying to replicate it! :)\nIt sounds very reasonable to use GLFW only for desktop (since that's what it supports), but the existing code for iOS and Android.\nOne additional (experimental) package that I used in making the above demo possible, that I haven't yet discussed, is:\ngithub.com/shurcooL/goglfw\n\nPackage goglfw experimentally provides a glfw-like API with desktop (via glfw) and browser (via canvas) backends.\nIt is used for creating a GL context and receiving events.\nUnstable, incomplete API: goglfw is currently in development. The API is incomplete and may change.\n\nThis package uses an approach similar to gogl. It effectively has two backends, one for desktop (OS X, Linux, Windows), and it's simply a copy of glfw. The other backend uses HTML5 APIs to implement the same glfw interface.\nFor instance, it uses things like document.AddEventListener(\"keydown\", ...) to implement the SetKeyCallback, \"mousedown\" and \"mouseup\" event listeners to implement SetMouseButtonCallback, \"wheel\" event listener to implement SetScrollCallback. It uses requestAnimationFrame to implement SwapBuffers. It's not completely finished, but it does work and can be developed further to fill in the missing pieces.\nMy goal with it was to build some prototypes and if it made sense, its web backend implementation could be moved into the Go glfw package. I am still unsure if it belongs there or not.\nBut it can be used to fill in the web backend for the suggested gxwt package.\n\nProposal\n\nWe expand golang.org/x/mobile/gl to support WebGL and windows, and use it in the GXUI driver.\n\n\nMy only ask is for golang.org/x/mobile/gl to satisfy the \"it should be go-gettable\" requirement (to the same degree that github.com/go-gl/gl/... is go-gettable). If that's the case, I am completely in favor. I support the decision to add the WebGL backend to it and can help out.\nMy github.com/shurcooL/gogl package was just an experimental package and I'd love for its functionality to be made available in a more official Go package.\n\n\nWe introduce a gxwt package. It provides a pure-Go view of windowing events with no dependencies in its exported interface. It uses build tags to switch its implementations:\n  linux/windows/OS X: glfw\n  android/iOS: x/mobile/app\n  web: gopherjs?\n\n\nAbsolutely in favor of using GLFW for the desktop backend.\nSounds good to use x/mobile/app for iOS and Android backends.\nCan use the approach demonstrated in github.com/shurcooL/goglfw for the web backend. Happy to help out here.\n\nSorry for the long winded comment, I wanted to reply to all points.\nOnce again, I appreciate the feedback and the I am really liking the suggested thoughts so far. :+1: Making gxui more general and capable of running on mobile and web is a huge win (and really cool if you ask me)! The best part: it's already so close!\nThank you!\n. I've ported GLFW's event linter program to Go so I can better test the remaining functionality of the web implementation of github.com/shurcooL/goglfw.\nI've put it up so you can try out the current version (open the console and watch for events; note that using keyboard shortcuts won't work since they get intercepted):\nhttp://dmitri.shuralyov.com/projects/glfw-events/index.html\nMany of events/keys are missing and there's some work to go. Up until now, I've only implemented things that I needed - so that I could test that it worked.\nAlso, there may be a better, concurrency-friendly interface for processing events in Go (for example, by sending them over channels), so glfw's callbacks mechanism may not be the most ideal. But it's a solid start.\n. > Hey @shurcooL your goglfw looks a lot like what I was thinking of for gxwt.\nSounds great!\nI am thinking, to start with, gxwt should go for the best public interface, and it can use github.com/go-gl/glfw/v3.1/glfw for its desktop backend,  x/mobile/app for mobile backend, and also glfw interface for web backend (implemented via goglfw initially). But later on, the web backend can be rewritten to avoid going through the glfw interface and be implemented more efficiently/directly.\nUntil then, using goglfw should be fine and it will allow me to test/develop goglfw and its implementation further before gxwt interface is ready.\n\nOne extra ideal I'd try to reach for: no external references to any gl packages. That way it could be used by other drivers (for example, html5 canvas, or one of the many GL replacement languages that are appearing).\n\nI agree. This is not currently the case, but I will start thinking about how to make that possible in the future. One non-ideal approach I can think of would be something that returns an interface{} and you can use type assertions to work with it (ala FileInfo.Sys()). Perhaps there are better ways.\nBut the current reason why goglfw imports and uses gogl is because goglfw.CreateWindow actually creates a canvas with WebGLContext and that WebGLContext is needed for gogl to work.\nAnyway, I agree and will work towards that goal.\n\nAs for golang.org/x/mobile/gl, it is generally go gettable today. You need to install an opengl header on a linux machine, but that is commonly done on any system with the compilers for cgo already. The headers come with OS X's compilers. Windows is the odd system out, but it is simply not done yet. If you ever find yourself unable to go get it, please file a bug.\n\nSounds good.\nIn that case, my plan will be the following. I'll work with x/mobile/gl on a branch (perhaps a fork on my github) and start adding a web backend to it, and see what issues I run into. Once everything works and I know what changes (if any) are required, I can start making a CL for x/mobile repo.\n. > ## Proposal\n\n\nWe expand golang.org/x/mobile/gl to support WebGL ...\n\n\nI've finally resolved everything needed to make this possible, and created a CL:\nhttps://go-review.googlesource.com/8793 - gl: Add WebGL backend.\n/cc @crawshaw It needs review. There is a single known TODO at this time, to finish implementing all remaining (but not used in any of my code or or gxui code) methods in the WebGL backend.\nThe corresponding change to goglfw to use ContextSwitcher is at https://github.com/shurcooL/goglfw/pull/1.\n. I've posted an update regarding the status in the CL.\n\nLooking at the current code, if I'm not mistaken, the only gl package test I see is in x/mobile/gl/glutil/glimage_test.go file, which renders to offscreen buffer texture and compares to expected image.\nBut it only seems to do it for linux and darwin, not android:\n```\n// +build darwin linux,!android\n// TODO(crawshaw): Run tests on other OSs when more contexts are supported.\n```\nIf so, can WebGL also be a \"TODO\" item?\nIf not, I am thinking about how it can be done now.\nPerhaps something like https://github.com/stackgl/headless-gl can be used. It's a gutted version of node-webgl with no external dependencies, DOM emulation or window handling. It can be used to create an offscreen framebuffer/WebGL contexts for server-side rendering in node.\nIt would require node as a dependency, which I'm unsure how to feel about (but I don't know of any other way). It would also require the GopherJS compiler, which is currently not versioned. So a failed test may mean either the code is failing, or node, or GopherJS compiler.\nI can also volunteer to maintain an out of tree fork of x/mobile/gl under my github or go-gl org (if others are okay) and try to keep it API compatible with the upstream x/mobile/gl. But I would want to do that with the hope that once required issues are resolved, it could be merged upstream.\nI have not seen any comments on the actual code changes, so I'm not sure if it's been reviewed aside from not having tests. Suggestions on how to proceed are highly welcome.\n. I think it's too early to close this. PR #86 was recently merged which adds a WebGL backend, but that is only a prerequisite for browser support. It still uses go-gl/glfw/v3.1/glfw which does not support browsers, so gxui cannot run in browsers as is.\n\nI'd like to wait a few days to make sure the new goxjs/gl backend works okay and there are no new issues reported. Then I'll open a second PR to switch to goxjs/glfw. Once that PR is merged, this issue will be resolved. Does that sound okay?\n. It's been a great journey from initial idea and prototype to final version and being merged into gxui. Thanks to everyone for helping make this happen. :)\nAfter 1.5 comes out, it's likely I will be playing with iOS support, and will see what it'll take to get gxui to run there also. The gl backend should support iOS as is, but there's no support on glfw side yet. There may be code organization changes that come up by then as well. But it's much closer now than before I opened this issue!\n. I just ran into this, glad it's already fixed. Thanks!\n. Note, I don't necessary intend for this to be outright merged. It's more for review, discussion (with code you can look at), code iterations, and to guide future development.\nI think having 2 separate drivers that are nearly identical at this early stage of gxui is probably counter-productive, so after you are sufficiently happy with the new driver, I expect the original desktopgl to be simply replaced with universalgl. That's why I didn't bother renaming the driver packages from gl to desktopgl/universalgl, as I expect that to be a temporary import path. \n. Okay, https://go-review.googlesource.com/#/c/8166/ has been merged. There were a few changes, I'll need to update this PR (primarily, the GL_RED const was not added; instead I think it may make sense to use GL_LUMINOSITY for grayscale images, see here).\nI'll do that shortly.\nAside from that, it seems to merge this, we'd want to get the x/mobile/gl driver up to feature parity with the current desktop driver, so that it can replace it entirely. The main missing feature is Windows support.\nIf the above is correct, then resolving https://github.com/golang/go/issues/9306 is next step for this PR to move forward.\n. Okay, I've removed the image.Gray support for now. It can always be re-added later when needed (using GL_LUMINOSITY instead of GL_RED).\nI will rebase the PR, and also change it to just modify the existing drivers/gl rather than creating two drivers/desktopgl and drivers/universalgl, since that is the direction we are heading in. There will still be more work before it can be merged.\n. Actually, I'll make it a separate PR (since the entire original PR description is no longer valid).\n. Closing this in favor of #86.\n. Hmm, Travis is failing because of:\n\nDisallowing packages: libgles2-mesa-dev\n\nAny ideas why it's disallowing that package (yet libgl1-mesa-dev was fine)?\nEdit: This other repo fetches it successfully, see here. Maybe it needs sudo?\nEdit 2: Ah, I stopped reading short. The next line explains it:\n\nDisallowing packages: libgles2-mesa-dev\nIf you require these packages, please review the package approval process at: https://github.com/travis-ci/apt-package-whitelist#package-approval-process\n. Fixed Travis by using the usual sudo apt-get install method of installing packages, since libgles2-mesa-dev is not whitelisted. Meanwhile, I've opened https://github.com/travis-ci/travis-ci/issues/3518 so once that's resolved, it'll be possible to go back to using apt_packages addon.\n. > Given that x/mobile/gl windows support recently got labelled unplanned, perhaps it would be simpler to add Android support to go-gl?\nWhat do you think?\n\nTo answer your question, I need to better understand what the end goal/motivation is. Can you elaborate on that please?\nNamely, are we looking to maintain current OS X/Linux/Windows support, but also add Android support? What about iOS support? What about web (browser) support?\n. The reason I'm asking for additional clarification here is because at this point, from the information I see above, my thoughts are that no, it would not be simpler to add Android support to go-gl than it would be to add Windows support to x/mobile/gl.\nThe main reason is that go-gl/gl is not a universal API with multiple backends (the way x/mobile/gl is). It is a collection of distinct low level specific OpenGL API bindings. So if you import go-gl/gl/v2.1/gl you get OpenGL 2.1, if you import go-gl/gl/v4.5-core/gl you get OpenGL 4.5 Core Profile, and if you import a hypothetical - it does not exist - go-gl/gles/2.0/gles package, you get OpenGL ES 2.0 bindings. So then gxui/drivers/gl would need to import multiple bindings depending on the environment and manage all that. x/mobile/gl already has that work done inside, it's just missing Windows support, which is a lot easier to add.\n. > My thought was that we could use the same OpenGL ES 2 bindings on Android and on desktop. I know there are subtle differences between GLES and OpenGL, but for what GXUI uses that difference is not substantial.\nDesktop Linux supports OpenGL ES, but OS X (10.10) does not support OpenGL ES. I'm not sure about the status of OpenGL ES support in Windows, but it may be mixed or unsupported. [1] [2]\nSo by switching to using OpenGL ES bindings, you would lose OS X and possibly Windows support, maintain Linux support, and gain Android support.\nAdditionally, it would become harder or impossible to add a web backend.\nAm I understanding things correctly?\n\nUnless there's something I'm missing, this would mean Windows, OSX, Linux and Android would all use this hypothetical GLES 2 go-gl\n\nIf you have references showing that OS X and Windows have support for OpenGL ES, please point me to it. As far as I know, on desktop side, only Linux has full support for OpenGL ES. Windows and OS X do not support OpenGL ES, only OpenGL.\n[1] http://www.g-truc.net/post-0457.html\n[2] https://github.com/glfw/glfw/blob/5733b0e4cb885c51b4ecb6c41bc2fb/src/nsgl_context.m#L68-L73\n. For reference, x/mobile/gl uses OpenGL ES on Linux (and Android), but OpenGL on OS X. /cc @crawshaw\n``` Go\n/*\ninclude \nifdef os_linux\ninclude \nendif\nifdef os_darwin_arm\ninclude \nendif\nifdef os_darwin_amd64\ninclude \nendif\n*/\nimport \"C\"\n``\n. I've rebased on latestmaster, and pushed commit cbf18e7 that changes to use a fork ofgolang.org/x/mobile/gl` with Windows and browser support added. See https://github.com/goxjs/gl. See last few comments at https://go-review.googlesource.com/#/c/8793/ for rationale why a that CL will not be merged as is (at this time), and therefore a temporary fork makes sense until a new upstream replacement package is available.\nTherefore, this PR is now:\n\nThis PR modifies the gl driver to use a fork of golang.org/x/mobile/gl package with Windows and browser support added. This package offers a slightly higher level interface, with desktop (OS X, Linux, Windows), mobile (iOS, Android) and desktop, mobile browsers backends.\n\nBecause Windows support is preserved with the new package, this PR may be viable to merge, and therefore I think it can be reviewed.\nI've tested most samples, everything continues to work for me (and everything should be completely go gettable).\n. Awesome, thank you @ben-clayton!\nI will provide instructions on how to do that soon!\n. I had to do a little work to implement creating fullscreen windows, since you've added a fullscreen sample and I wanted to make it work.\nI was able to get it to work in browser (via Fullscreen API), but with a caveat.\nhttp://virtivia.com:27080/3p0e9akjg1yj.mov\nThe caveat is that it works well when toggling the button with keyboard (tab to select, then enter or space). But not so well with the mouse... because by the time event is processed, the \"mouse up\" callback has returned and I can only use fullscreen API in user event handlers, so it has to wait until the next user event. Full details at https://github.com/goxjs/glfw/issues/3.\n. Ok, @ben-clayton, here are precise steps to run gxui samples in the browser via GopherJS.\nPreface\nTo allow gxui to run in browser, we need support for 3 things: window/context creation, user input, and GL bindings. This PR is to go from OpenGL 2.1 API (via github.com/go-gl/gl/v2.1/gl package) to an OpenGL ES 2-like API (via github.com/goxjs/gl package). However, this PR does not address window/context creation and user input (currently provided by the github.com/go-gl/glfw/v3.1/glfw package).\nSo, in order for OpenGL programs to run both on desktop and in browser, I've created github.com/goxjs/glfw package. By using build tags, it simply reuses github.com/go-gl/glfw/v3.1/glfw on OS X, Linux and Windows desktop platforms, but it implements window/context creation and user input by using browser APIs (HTML5, Canvas element, Fullscreen API, Mouse Lock API, etc.) in browsers (under js architecture build tag). Since this PR doesn't include that change (this PR is strictly about switching from using OpenGL 2.1 to OpenGL ES 2.0 to make it browser/mobile-compatible), you'll need to checkout a different branch. It's exactly one small commit ahead, see shurcooL/gxui@395cb0bc0c0febfdbb3f3c029cd917f39d8a4514.\nSteps\n\nInstall the latest GopherJS compiler.\n\nbash\n   go get -u github.com/gopherjs/gopherjs\n2. Get gxui and dependencies.\nbash\n   go get -u -d github.com/google/gxui\nHowever, since this isn't merged into gxui upstream yet, you'll need to fetch and checkout my use-goxjs-glfw branch, download dependencies.\n``` bash\n   # Go to the gxui folder.\n   cd $GOPATH/src/github.com/google/gxui\n# Fetch and checkout my use-goxjs-glfw branch.\n   git fetch https://github.com/shurcooL/gxui use-goxjs-glfw\n   git branch use-goxjs-glfw FETCH_HEAD\n   git checkout use-goxjs-glfw\n# Go get dependencies (there may be some additional ones under js build tag).\n   # Note that this is only needed because my work is on a different repository and branch,\n   # otherwise one could just do go get -u -d -tags js github.com/google/gxui and be done.\n   go get -u -d -tags js ./...\n# It'll give an error doing git pull --ff-only on gxui repo since there's no tracking info,\n   # it's fine because this just a temporary feature branch test.\n   ``\n3. Usegopherjs serve` as a convenience way to build Go packages using GopherJS and serve them.\nbash\n   # Run in some terminal and keep it open.\n   gopherjs serve\n(This is recommended because it's faster/easier. If you want to actually build the javascript file and bring your own HTML (just one that uses a ",
    "crr0004": "Any suggestions on what kind of format you want this in?\nShould we just start playing and documenting what we notice?\n. ",
    "sesteel": "Can you explain more what you are asking for?  I am considering submitting a pull request to pull over something like https://github.com/vizstra/ui/blob/master/layout/table.go from my project.\n. @ben-clayton  Sounds like a plan; I was pretty stoked to see your approach being similar.  Thankfully, this project looks much cleaner than mine.  Time permitting, I'd like to get heavily involved in this project as I am obviously fairly passionate about a library like this existing. \n. @ben-clayton Thanks for kind words.  With regards to issues, I wouldn't do it any other way; I am looking at this as an opportunity to not work alone in a vacuum anymore.  Plus, I was really struggling with text rendering performance :)\n. @ben-clayton Is the Control logic layout in a stable state such that it makes sense to begin creating layouts?\n. @nguyendangminh Not to be insulting, but have you moved your console and other windows around to make sure it is not rendering behind another window?\n. ",
    "thesyncim": "sry for the delay...\nI mean something like lxn/walk tableview https://github.com/lxn/walk/blob/master/tableview.go,\nhere is the example : \nhttps://github.com/lxn/walk/blob/master/examples/tableview/tableview.go\nthe concept of gxui adapter is very similar to this implementation\n. Textbox, portuguese keyboard.\nthanks\n. ",
    "nguyendangminh": "I can run glxgears (in mesa-utils package) successfully:\n\n. Yep, just like the first image.\n. Of course I did. I tried all the samples, not just the image_viewer.\n. Thanks @shurcooL, the commit works pretty well for me, all the samples run successfully.\n. Hi Hisum, I posted it in the wiki already: https://github.com/google/gxui/wiki/Installation\n. Yes, it should be. I've just created the wiki today.\n. @haisum you must specify the image, like this:\n$ image_viewer --file /path/to/your/image/file\nAs @ben-clayton mentioned, there's not much document.\n. ",
    "chilons": "@nguyendangminh where is the black screen? Or is it just, no window appears?\n. Is it a good idea to model the layouts after some other popular libraries? We could use Qt, Swing, GTK, .NET or something as a base for our design. I don't know which one has the best layout model, but we could do an investigation. I think we could save a lot of time and energy by doing that, after all, those people spent years refining the layouts.\n. ",
    "weberc2": "I'm seeing the same problem. Ubuntu 14.04 amd64. Forgot to mention, I'm on hash 165a3cc8c21e731ee88843166df2d427ea21ab88\n. in sample/polygon, it hangs at window := theme.CreateWindow(800, 600, \"Polygon\"); it seems to be blocking--CPU is 0. This happens 100% of the time.\nEDIT: I copied the wrong line earlier; it hangs on CreateWindow()\n. I traced it down to line ~62 in drivers/gl/viewport.go: wnd, err := glfw.CreateWindow(width, height, title, nil, nil)\nThis is with go-gl/glfw version d98ae09ed8c9482fc2ad4c235b1a32dc32b5dabd\n. Looks like it's this bug: https://github.com/glfw/glfw/issues/368 as explained by https://github.com/glfw/glfw/issues/373. It sounds like the Unity fix will ship with Ubuntu 15.04.\n. @shurcooL Hmm, I tried that branch (specifically rev d98ae09ed8c9482fc2ad4c235b1a32dc32b5dabd) but I'm still not seeing any windows rendering on the screen... I rmd my glfw.a file just to be sure, but still no avail.\n. @shurcooL Sorry, I'm not very git-savvy (checkout -b glfw3.1.1 doesn't checkout the glfw3.1.1 branch; silly me, I guess). Anyway, that worked perfectly. Thanks!\n. ",
    "codeskyblue": "Issue better to close, build was success today. wired. sorry about the bad issue.\n. ",
    "anidotnet": "I was running it in a remote x2go session.\n. ",
    "snoury": "According to http://wiki.x2go.org/doku.php/doc:de-compat, x2go is based on nxagent which supports GLX up to 1.2 while GLFW requires GLX 1.3 (http://www.glfw.org/docs/latest/compat.html#compat_glx). Until x2go implements support for GLX 1.3 (http://wiki.x2go.org/doku.php/wiki:development:new-feature-brainstorming#nx-libs), it's unlikely that gxui will be supported in its current form on x2go, due to its dependency on GLFW.\n. ",
    "haisum": "oh @nguyendangminh didn't notice the wiki. Nice work :) I was following readme.md may be Installation wiki should be linked from Readme.md?\n. ",
    "omac777": "I would prefer gotk3/gtkmm over gxgui. Layout and treeview are mature in gtkmm and map well over X-Window.  Gotk3 also helps to reduce the time relearning another api that already works on win64, Linux and osx.\n. ",
    "lunny": "+1\n. ",
    "abadojack": "I've just signed the CLA\nOn Sat, Mar 21, 2015 at 3:41 AM, David Crawshaw notifications@github.com\nwrote:\n\nLGTM, will merge when the CLA is sorted.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/gxui/pull/47#issuecomment-84167215.\n. \n",
    "gttp": "|| Since the three OpenGL APIs are similar enough, it's possible to create a Go package that has a single || OpenGL-like API, but using build tags, it can have three different backend implementations depending || on what is available on the given platform\nIs it good to have a gl.Api interface ?  so that we could implement it for GL, GLES, WebGL....\n. ",
    "cryptix": "Horray!\n. ",
    "awoland": "gxui looks fine ...\n. ",
    "tones111": "add Direction for these new constants. They're different concepts.\nI actually started by defining a direction type, but it adds a bit of additional complexity when validating the direction and orientation against each other.  What should happen if a client sets a horizontal orientation, then TopToBottom direction?  Or they set a LeftToRight direction followed by a vertical orientation.  You end up needing validation logic in both objects.  What do you do in the event of a discrepency?  Do you automatically adjust the other parameter to agree?  What's the point then to having two separate types?  Should an error be returned?  What if the default values for orientation and direction don't agree?\nI would actually argue that the the new orientation values are simply less generic versions of horizontal and vertical.  They solve the problem without inducing the complexity above or without the ambiguity of having a \"reverse\" method that fails to define the normal/default convention.\n. This would still be left / top aligned.\nIndeed.  This PR addresses the \"We should have an option to reverse the layout order.\" requirement.  I think there will need to be a bit more work thinking about different layout managers similar to issue #54 and I think that's a separate problem from layout ordering.\n. I don't think I fully understand what you're looking for with regard to the orientation / direction tweaks.  As mentioned, this PR really doesn't do much, so I recommend closing it.\n. I see what you were after now.  I'll play around with it a bit, but the sample really shows off the new functionality well.  One minor thing the demo did illustrate is that there could be some use to implementing the major axis alignment options.  For example TopToBottom with AlignMiddle.  I'll see about adding that.  Thanks.\n. I think this is a different from #48.  Running with the race detector the relevant info is...\nWARNING: DATA RACE\nRead by goroutine 47:\n  runtime.chansend()\n      /build/go/src/go-1.4.2/src/runtime/chan.go:83 +0x0\n  github.com/google/gxui/themes/dark.func\u00b7011()\n      /home/paul/src/gosrc/src/github.com/google/gxui/themes/dark/progress_bar.go:39 +0x312\nPrevious write by main goroutine:\n  runtime.closechan()\n      /build/go/src/go-1.4.2/src/runtime/chan.go:257 +0x0\n  github.com/google/gxui/drivers/gl.func\u00b7013()\n      /home/paul/src/gosrc/src/github.com/google/gxui/drivers/gl/driver.go:115 +0x1e3\n  github.com/google/gxui/drivers/gl.(*Driver).run()\n      /home/paul/src/gosrc/src/github.com/google/gxui/drivers/gl/driver.go:85 +0x90\n  github.com/google/gxui/drivers/gl.StartDriver()\n      /home/paul/src/gosrc/src/github.com/google/gxui/drivers/gl/driver.go:47 +0x23d\n  main.main()\n      /home/paul/src/gosrc/src/github.com/google/gxui/samples/progress_bar/main.go:50 +0x37\nGoroutine 47 (running) created at:\n  time.goFunc()\n      /build/go/src/go-1.4.2/src/time/sleep.go:129 +0x59\nThe problem is that there is no communication mechanism to notify the contols of impending termination.  The driver attempts to flush any outstanding events prior to closing the event channels, but it's useless because it never told the controls to stop sending events.\nThere probably needs to be some sort of onTerminate or onDestroy event implemented by any object in the system.  As parent objects (containers) are destroyed they would first propagate the signal to their children before then doing any necessary cleanup themselves.  After everything has had a chance to clean up then the flush and channel closing can be done.\n. Updated as suggested.  This appears to work by pushing the troublesome calculation to the render thread.  It's certainly more elegant then using a mutex.  It's worth noting that this does not resolve issue #59 as the detach is never getting called during termination.\n. I tried bringing in your suggestion without much luck.  OnDoubleClick is looking for a func that receives a MouseEvent, but modifying the signature of onItemDoubleClick to match made things really unhappy.  I suppose I'm still not understanding how that would prevent the list from sending the double click to the adapter.\nEven after having gone through some experimentation in the samples and driver code I'm still having a difficult time parsing the hierarchy of how the events travel through the various layers of components / mixins.  The organization is the perfect case for needing a debugger to track and track things down, but gdb has been out of order for some time and delve is still maturing.\nIn any event, this logic could be common enough to push into the core tree / list implementations, but with my lack of a good grasp on the system design I wouldn't put too much weight on it.\nThe other thought I had was that the client is going to want to do a type switch regardless to get the gxui objects into a workable type, so I don't see there being much opportunity to get rid of them from the adapter implementer's perspective.  That's the price you pay for the \"generic\" api (and it's well worth it).\n. Aha, I see what you did there in your sample.  Thanks for the docs, that helps clarify some of the corner cases I'd been experimenting with.  I'm looking forward to devising / helping support more advanced layouts but understand there's higher priority work to be done in the meantime.  Thanks for the suggestion above.\n. ",
    "xyproto": "I looked at #48 first, but the error messages are pretty different.\n. Thanks!\n. ",
    "sunwangme": "very good\n. btw,#version 150 should add to glsl code, if we use use the future of opengl3.2/glsl1.5. or opgl3.1/glsl1.4\n. why change gl driver\uff1flet us focus on ui for desktop first\u3002\n. @ben you are right,just as cocos2d-x do. we need not export all opengles api,we just export gxui api based on window&control&canvas&font. we should do more on layout,advanced control.\n. very good\n. ",
    "justay": "Intel(R) HD Graphics 3000 \ndrivers come for Intel and version is 9.17.10.3517 \nwindows 8.1\n\n. Here is the code, hope that can help u to find what's going on.\n``` golang\npackage main\nimport (\n    \"github.com/google/gxui\"\n    \"github.com/google/gxui/drivers/gl\"\n    \"github.com/google/gxui/math\"\n    \"github.com/google/gxui/themes/dark\"\n)\nfunc appMain(driver gxui.Driver) {\n    theme := dark.CreateTheme(driver)\n    items := []string{\"0123\", \"1456777\", \"2\", \"3weqwe\", \"4\", \"51231qweqweasd\"}\noverlay := theme.CreateBubbleOverlay()\n\nadpt := gxui.CreateDefaultAdapter()\nadpt.SetItems(items)\n\ndroplist := theme.CreateDropDownList()\ndroplist.SetAdapter(adpt)\ndroplist.SetBubbleOverlay(overlay)\n\nwindow := theme.CreateWindow(800, 600, \"Lists\")\n// window.SetScale(flags.DefaultScaleFactor)\nwindow.AddChild(droplist)\nwindow.AddChild(overlay)\nwindow.OnClose(driver.Terminate)\n\nwindow.SetPadding(math.Spacing{L: 10, T: 10, R: 10, B: 10})\n\n}\nfunc main() {\n    gl.StartDriver(appMain)\n}\n```\nmaybe window.SetPadding(math.Spacing{L: 10, T: 10, R: 10, B: 10}) cause it. when I remove this sentence it works fine.\n. I test again after update to the latest. and the panic still happens. so I check the subpackage, and run the go install in every sub package(cause I did it before), and then it works fine. \nThanks for your help. \n. follow you suggestion, I retry it, and  I found the DropDownList components didn't work as expect. the text fonts delay to change. and DropDownList havn't method SetFont(). \n. I have a little confused about the method SetStyleLabel, the parameter is a function func(theme,label), How to create the function? \nthe DefaultAdapteris a struct. and the DropDownList.Adept() is a interface and hasn't method SetStyleLabel, I create a interface for Assertion. \nthe interface is:\ngo\ntype setStyler interface {\n    SetStyleLabel(func(gxui.Theme, gxui.Label))\n}\nand the assertion code is:\ngo\nif ad, ok := droplist.Adapter().(setStyler); ok {\n    //this part is not right                \n    ad.SetStyleLabel(func(th gxui.Theme, lb gxui.Label) {})\n}\nof course, it doesn't work. I just don't how to solve it. Would you please give me  some suggestion. Ths!\n. there is other question, some fonts shows \npanic: truetype: hinting: unsupported IDEF instruction\nwhen I use driver.CreateFont(),It can return a gxui.Font, but when i set the font to it, then panic. In an other words,  how to detect the fonts is support or not.\n. congratulations\n. ",
    "shit386": "same problem.\nhow to solve it ?\n. it's working now.\n. ",
    "webmaster-gostec": "Same problem here, with an Intel Core i3 Sandy Bridge and integrated graphics card.\nI think the problem is due to the fact our hardware supports OpenGL up to 3.1 while gxui requires OpenGL 3.2.\n. ",
    "cookieo9": "I will. Also I'm using Go at tip, I'll try with the 1.4.2 compiler I use to build it as well.\n. Still happens at tip (commit 10848b980a5499c1576777fc52ebd8f4e03d28c7), but using go 1.4.2 doesn't cause a problem on darwin.\n. I have tested this with commit 10848b980a5499c1576777fc52ebd8f4e03d28c7 but at tip the race detector still causes an on-startup crash.\nUnlike in darwin (OSX) this problem can't be fixed going back to go-1.4 as I get a linker error trying to link the final executable. This may be a result of golang/go#8948 as we are linking the race detector and cgo packages into the same binary.\n. ",
    "bashtian": "Any update on the android support?\n. ",
    "sbinet": "shoot! here goes my evil hidden agenda :P \n. ",
    "kaly": "You can't right now. gxui is hard coded to be windowed. drivers/gl/viewport.go#L67\nhttp://www.glfw.org/docs/latest/window.html#window_full_screen\n. ",
    "zhangpy": "OK. will you consider to label it as feature or enhancement? \n. I could create fullscreen by changing gxui code \ndrivers/gl/viewport.go#L67\nwnd, err := glfw.CreateWindow(width, height, title, nil, nil)\nto \nwnd, err := glfw.CreateWindow(width, height, title, glfw.GetPrimaryMonitor(), nil)\nI hope a better way, but it is OK for now, thanks :)\n. Thanks to simplify it. I have to reopen it because of panic.\nIt will panic if I set full screen at beginning. Here is test code:\n```\npackage main\nimport (\n    \"github.com/google/gxui\"\n    \"github.com/google/gxui/drivers/gl\"\n    \"github.com/google/gxui/samples/flags\"\n    \"github.com/google/gxui/themes/dark\"\n)\nvar (\n    theme gxui.Theme\n)\nfunc appMain(driver gxui.Driver) {\n    theme = dark.CreateTheme(driver)\nwindow := theme.CreateWindow(400, 300, \"Progress bar\")\nwindow.SetScale(flags.DefaultScaleFactor)\nwindow.SetFullscreen(true)\nwindow.OnClose(driver.Terminate)\n\nlabel := theme.CreateLabel()\nlabel.SetText(\"test\")\n\nlayout := theme.CreateLinearLayout()\nlayout.AddChild(label)\n\nwindow.AddChild(layout)\n\n}\nfunc main() {\n    gl.StartDriver(appMain)\n}\n```\npanic: runtime error: invalid memory address or nil pointer dereference\n[signal 0xb code=0x1 addr=0x0 pc=0x4b1307]\ngoroutine 1 [running, locked to thread]:\ngithub.com/google/gxui/drivers/gl.(_canvas).release(0x0, 0xc2081d0600)\n    github.com/google/gxui/drivers/gl/canvas.go:85 +0x157\ngithub.com/google/gxui/drivers/gl.(_canvas).Release(0x0)\n    github.com/google/gxui/drivers/gl/canvas.go:249 +0x28\ngithub.com/google/gxui/drivers/gl.func\u00b7051()\n    github.com/google/gxui/drivers/gl/viewport.go:440 +0xd1\ngithub.com/google/gxui/drivers/gl.(*driver).driverLoop(0xc208020040)\n    github.com/google/gxui/drivers/gl/driver.go:82 +0x75\ngithub.com/google/gxui/drivers/gl.StartDriver(0xc443b0)\n    github.com/google/gxui/drivers/gl/driver.go:51 +0x2b9\nmain.main()\n    main.go:40 +0x2a\nIf I check canvas is nil in https://github.com/google/gxui/blob/master/drivers/gl/viewport.go#L439\nI can avoid the panic, but I am not sure this is right way.\n. I have same issue on ubuntu 14.04.\nWhen I set CGO_ENABLED=1, I got\n```\nruntime/cgo\ngcc: error: unrecognized command line option \u2018-mthreads\u2019\n```\nI didn't find good solution, so I decided to install in windows.\nI install mingw-w64 on windows and compile gxui successfully. FYI. \n. I try to show a rune(international word or char) to occupy the almost the whole screen. \nOne rune one screen.\nMy screen resolution is 1920x1080. 512 is OK but 768 looks better.\nMaybe I could change the resolution or scale, but not sure.\n. The limitation comes from font file or gxui?\nIf possible, could we remove the limitation?\n. Thanks ben. \nyes. I don't worry about the performance. I only show very few glyphs.\nPlease let me know if you have time to create the sample. :)\n. OK. thanks to confirm.\nI will change my design, then. \nIf you plan to add more layout, we could keep this issue open. \nOr please close it. thanks.\n. It works. thanks, ben.\n. thanks Drahoslav7. \n. ",
    "DoctorovEV": "There is an example Polygon. \nAll images are placed in a container Window. But it is inconvenient. I would like to have a container is to control. Let's call it like DrawCanvas. This control can be placed in any area, such as PanelHolder. This makes it possible to put into it is full of controls Image and other types of imaging.\nHave a similar class in C ++, - TCanvas, for outputting and storing graphic objects.\nFor example: https://msdn.microsoft.com/ru-ru/library/system.windows.controls.canvas(v=vs.110).aspx\n. Ben, tell me, I made it clear to you a question?\n. LinearLayout is a Container that lays out its child Controls into a column or row. \nLinearLayout does not allow to place items on top of each other as in a container Window.\nHow to make a simple graphical vector editor? What use container for imaging?\n. Ben, I made the following changes.These changes gave the desired result.\n1. gxui\\direction.go\n1.1 const (\n    TopToBottom Direction = iota\n    LeftToRight\n    BottomToTop\n    RightToLeft\n    TopToTop\n)\n1.2 func (d Direction) TopToTop() bool { return d == TopToTop }\n1.3 func (d Direction) Orientation() Orientation {\n    switch d {\n    case TopToBottom, BottomToTop, TopToTop:\n        return Vertical\n    case LeftToRight, RightToLeft:\n        return Horizontal\n    default:\n        panic(fmt.Errorf(\"Unknown direction %d\", d))\n    }\n}\n2. parts\\linear_layout\n2.1 section Perfom layout\n        case gxui.TopToTop:\n            c.Layout(c.DesiredSize(math.ZeroSize, s).Rect().Offset(o))\n. Yes, good, Control.OnAttach and Control.OnDetach and new interface solve the most problems.\nAlthough if you store a pointer to the Control name do not need to...\nWhat is the general event is used when replacing the panel to configure the environment ? For example, to clear the current action.\n. I need the MAIN EVENT(for ex: OnSwitch() EventSubscription) when switching between panels. Nothing more.\n. Control.OnAttach and Control.OnDetach must be specified in each panels. Is this not excessive if you want to produce one and the same operation when changing tabs ?\na simple example: a variable dragged = 1. When changing tabs must dragged = 0. How it can be easy to implement?\n. Thank Ben, if you believe that having a PanelSelected event will just encourage people to do the wrong thing, then I would agree with your professional opinion. I think more on this topic.\nUsing OnAttach and OnDetach everything works fine.\n. Thank you, Ben. I'll wait for the official implementation of the next week.\n. ",
    "EX0l0N": "When you use CGO_ENABLED=1 you also have to set CC and CXX to windows C(++) cross compilers. If you don't you'll be building and linking with your default host compilers.\nYou'll need some C(++) cross compiler suite to be installed.\nI don't know if CXX_FOR_TARGET exists, or if it's being used, but setting it won't hurt.\n```\nruntime/cgo\ngcc: error: unrecognized command line option \u2018-mthreads\u2019\n```\nIs a typical exception you get for using the hosts gcc. -mthreads is a windows only gcc option.\nI'm using\nCC=x86_64-w64-mingw32-gcc CXX=x86_64-w64-mingw32-g++ CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -v\n. ",
    "mathvav": "It would be more graceful to panic with a custom message--in this case, it's not immediately apparent that it's because the font size is too big.\nA simple if statement would add virtually no overhead but it would prove helpful\n. @ben-clayton you can just add them to the README (like this) using Markdown:\n![Alt text](rel/path/to/image.png)\nThen, they appear in the README\n. ",
    "bonly": "thanks to mattn! It works\n. ",
    "sinni800": "I would definitely like a GridLayout at least, or a layout that has pixel based positioning inside (probably not good though).\n. @Binaryblade Well, I like this because it allows me to cleanly seperate GUI and logic. Besides, HTML is basically the same. Presentation, Logic...\n. @Binaryblade How would you do this then? Go produces huge executables.\nI know what the answer is, \"just don't do it at all\", keep being boring and just send people more executables.\nAlso how does the qml implementation help any if I want a gui that isn't dependant on something like qt being casually there? IMHO while I know that go produces huge executables, that doesn't mean I have to pile on top to get a 50mb distribution.\n@ngrilly Is this suggesting that we lock out every NoScript user ever? I know that's not the topic, but man. It still makes sense, I would actually favor something different now (Yeah, yeah,, inner platform effect): An interface to mutate forms from an interpreted language, maybe http://github.com/robertkrimen/otto or rather https://github.com/robertkrimen/natto. \n. @ben-clayton \n\nBinding between the code and the UI is always kludgy and error prone. \n\nI can see that... Even Microsoft didn't do it at first (WinForms), but rather generated code all the time (.designer.cs) with a warning not to edit it. \n\nbut nearly always start feature-creeping with data-binding and inline event handling.\n\nWell, you'd have to limit yourself to controls and their properties... I can see how XAML really went wrong here.\n\nupdate your data without lengthy rebuilds of your code - this is simply not an issue with go.\n\nRight, but this always means a recompile. With some, especially permanently running applications or web services... \n\nDo you have any real-world examples of where you'd want to do this?\n\nWell I know some real world examples where it is executed really well. Maybe not with a language like XAML (I even tried doing this with XAML, it was very cumbersome... Not recommended, there's too much automatic coupling to redo it yourself), but rather just code. One would be SAP, one of the most successful ERP solutions ever. Their core is built around sending GUIs over the network and handling their events in a mix of server side logic and client side logic. \n\nI understand that GXUI requires a designer, and I had started experimenting on such a thing. \n\nThis would be cool too, and I think that would rectify most of the problem. I thought a declarative language like JSON would be better in creating GUI controls just because it's declarative and optimized around declaring data. \n\nRegular logic handling could then be placed in another .go file in the same package that implements the necessary methods on the generated struct. \n\nThis is basically how .NET WinForms does it, this is the file you write in and leave the generated one alone mostly because it's very hard to change it without the designer breaking :(\n\ngenerate (and parse) .go files\n\nThis would rectify the part where you have to leave it alone, it would actually read your additions.\n\nHave you seen @shurcooL's WebGL renderer?\n\nThat would be pretty cool, actually... Would still need an exit and a recompile to deliver a new functionality (okay, I am way too hurt about restarting an app :) ). But at least I don't have to deliver 13 MB of executable every time (because my target audience wouldn't go and recompile software).\nAnother idea I had (and actually executed, and kinda made to work!) is using otto (https://github.com/robertkrimen/otto) to do the UI and much of the client side event handling. It would really basically be an inner platform but Javascript can be sent and executed. I wish go had such a functionality (to dynamically add code in a running exeuctable, one way or another, dynamic binding or whatever), but that doesn't seem like it's in the pipeline anywhere close.\n. @knarfrank  I presume it would be a property in the TextBox called \"PasswordCharacter\", a rune which woukd be shown instead of every typed character if it is set not to the unicode null codepoint. I think either the driver or the theme would implement checking for this character (unsure about the logic in the toolkit here) in the drawing routine.\n. ",
    "yofu": "I signed it!\n2015\u5e744\u670821\u65e5(\u706b) 14:37 googlebot notifications@github.com:\n\nThanks for your pull request. It looks like this may be your first\ncontribution to a Google open source project, in which case you'll need to\nsign a Contributor License Agreement (CLA).\n[image: :memo:] Please visit https://cla.developers.google.com/\nhttps://cla.developers.google.com/ to sign.\nOnce you've signed, please reply here (e.g. I signed it!) and we'll\nverify. Thanks.\n\nIf you've already signed a CLA, it's possible we don't have your\n  GitHub username or you're using a different email address. Check your\n  existing CLA data https://cla.developers.google.com/clas and verify\n  that your email is set on your git commits\n  https://help.github.com/articles/setting-your-email-in-git/.\nIf you signed the CLA as a corporation, please let us know the\n  company's name.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/gxui/pull/107#issuecomment-94644704.\n. Thanks a lot for sparing time for reviewing!\n\nI fixed as below:\n- restore all the things associated with MouseButton\n- add MouseState instead\nI'm not sure whether I fixed well as you mentioned...\nI think InputEventHandler.isMouseDown can be gxui.MouseState like:\n``` golang\nfunc (m *InputEventHandler) MouseDown(ev gxui.MouseEvent) {\n    m.isMouseDown = ev.State\n    m.getOnMouseDown().Fire(ev)\n}\n...\nfunc (m *InputEventHandler) IsMouseDown(button gxui.MouseButton) bool {\n    return m.isMouseDown.IsDown(button)\n}\n```\nCould you take a look when you have time?\nRegards,\nyofu\n. Thank you for advice, and I've fixed!\n. ",
    "marben": "Ok, I see.\nThe fact that i could update texture by writing to rgba really confused me.\nSo I assume i need to call Release() on the old texture?\nAlso the image updates without calling Container's Redraw() method. Is that right?\nThanks,\nMartin\n. Ok,\nthank you. That answers all my questions.\nEnjoy your vacation.\n. ",
    "tpng": "Currently, if I don't call texture.Release() in case of repeated call to driver.CreateTexture(), memory will leak until GL_OUT_OF_MEMORY is thrown.\nhttps://github.com/tpng/emulator8080/commit/189a57703907f4e2a9f2e71a3e13f7d541841a3d\nRemoving last.Release() will cause OOM.\n. ",
    "squiidz": "great, thank you !\n. yes, i tried with go get with mercurial install on my machine and it didn't work. Even when i go too the url in the browser it says \"the page not longer exis\", i also tried in a droplet on digital ocean and same thing happen ... :/\n. this is weird ... it's working now, sorry about that !\n. ",
    "theGeekPirate": "@squiidz You'll need to figure out why you're unable to connect to https://code.google.com/p/freetype-go/source/browse/, as I can also verify that it's working splendidly.\ngo get code.google.com/p/freetype-go/freetype also worked.\n. ",
    "andrebq": "@ben-clayton Since I had that problem with the Textbox and didn't understand the code enough to come up with a patch, I made a custom control that uses TextBoxTextController but re-implements all the rendering  and key handling code.\nTo solve the scroll problem I made something like vim. For every Paint call I get: the position of the cursor; the size of the canvas; and a offset. Then I check if the cursor is visible in the canvas at the current offset. If not, the offset is adjusted to show the cursor.\nThen for every line that I render, instead of using a rect starting at (0,0), I use a rect starting at (-offset.X, -offset.Y).\nThis would work with singe line textboxes (which shouldn't have a scrollbar) and possibly to multi-line textboxes (but without the offset.Y since they already have a vertical scrollbar).\n. @thesyncim I am using gxui with a portuguese keyboard and the \"@\" works without any problems. I am not using the textbox component (writing a new textarea from the ground-up) but the KeyPress events is triggered with the right values. My \"@\" is typed by pressing \"Shift+2\".\nOne problem that I noticed is how deadkeys are handled. In my case typing the \"~\" plus \"a\" don't result in \"\u00e3\" but instead triggers two keypress events one with the \"~\" code and another with the \"a\" code. Your problem might be related to it.\nUsing Fedora22 here.\n. ",
    "RobertWHurst": "Perhaps something like Jade?\njade\npanel(id='pnl')\n  button(id='btn')\nhttp://jade-lang.com/\n. ",
    "JonathanFraser": "This sort of thing always seemed to me like the inner platform effect showing it's ugly head. Besides, there is a go-qml implementation already available.\n. @sinni800 I don't see why the introduction of a separate language is needed for this.\n. @ben-clayton Were you thinking something along the lines of this?  Doing the layouts is a bit clunky without a struct annotation as opposed to a struct field annotation. I think with perhaps a smarter use of annotations the Go type hierarchy can be the complete declarative description and used in much the same way as QML or others.\n. That actually looks pretty sexy.\n. ",
    "ngrilly": "@sinni800,\nI agree with @Binaryblade.\n\"Templates separate technologies, not concerns.\"\nhttp://fr.slideshare.net/floydophone/react-preso-v2\n. ",
    "pyros2097": "I think instead of using markup format we can just use structs like this library https://github.com/lxn/walk does .. seems easier to integrate and also has type checking ...\n. ",
    "jamesseanwright": "I'm thinking of setting some time aside to work on an XML view format for GXUI; I know a good developer will properly separate concerns regardless of technological choices but I love writing GUIs as declaratively as possible.\nI'll keep you posted!\n. I agree that it shouldn't be part of the core project though.\n. ",
    "knarfrank": "Would this be done by creating a whole new PasswordBox struct with the same kind of methods as TextBox or just setting a flag within the TextBox and having a visible text value plus an actual text value, then adding the wrapper CreatePasswordBox method within the theme that sets the flag?\n. There are also issues in the file dialog sample. But i think this is less of a problem.\nvar (\n    fileColor      = gxui.Color{R: 0.7, G: 0.8, B: 1.0, A: 1}\n    directoryColor = gxui.Color{R: 0.8, G: 1.0, B: 0.7, A: 1}\n)\n. ",
    "boljen": "thanks :)\n. ",
    "michael-schaller": "@shurcooL Thanks. That looks interesting and might be already enough for my use case.\n. ",
    "zeroshirts": "this would help with copy&paste symmetry; right now it's ctrl-C to copy from gxui apps and cmd-V to paste outside them.\n. ",
    "dj2": "For something like the text carat and selection, what would be the right solution to exposing the theme. Would it be to add a CreateCaratPen and CreateSelectionPen to Theme which just return the pens to use? Or is it better to do something like creating a Carat and Selection object which get created and painted?\nIt looks like it isn't, currently, possibly to just expose the Style as Style exists inside the theme itself. Would it be better to move Style up and have a call on theme for CaratStyle? Seems like we'd also want some kind of style exposed for things like text colour (which the fileColour about is doing)?\n. I've put put a CL that does the described and creates a basic theme that is inherited. I used the colours from this pull request in the light theme. The PR is #136. \n. Possibly, but then would need to duplicate the code that picks the theme based on the flag value. That could probably be generalized somewhere inside gxui itself so you just do something like\ntheme := CreateNamedTheme(flagTheme);\nand it does the right thing? But that sounds like a separate CL.\n. ",
    "myalexer": "Thanks , sorry for little information\nGo version : \ngo version go1.4.2 windows/amd64\ngcc version:\ngcc (tdm64-1) 4.9.2\nmy os : \nwindows 7 - 64 bit\n. ",
    "markb007": "Hi\nI have the same issue when I tried out the 'samples' today\nRunning on Windows 8.1 Pro\nGo 1.4.2\nTDM-GCC-64 4.9\ngxui commit 37777050f35a11a72d7d8bbfc52f34a2ae7232b2\nRegards\nMark\n. I'd say after much testing that my graphics card/driver does not support opengl as i ran on another machine successfully ... sorry about that .. Regards Mark\n. ",
    "Arnold1": "i want to test gxui on:\n- windows 7 x64\n- go version go1.4.2 windows/amd64\n- gxui commit: https://github.com/google/gxui/commit/32ccf12ac578803a00c7bef474f1a80cd3460dc0\nand get the following error...any idea? \nwhy cant \"go get\" find mercurial even when i can start it manually!?\n```\narnold MSYS ~/gxui/samples/hello_world\n$ go get -u github.com/google/gxui/...\ngo: missing Mercurial command. See http://golang.org/s/gogetcmd\npackage github.com/google/gxui\n        imports github.com/google/gxui/interval\n        imports github.com/google/gxui/math\n        imports github.com/google/gxui/drivers/gl\n        imports code.google.com/p/freetype-go/freetype/raster: exec: \"hg\": executable file not found in %PATH%\npackage github.com/google/gxui\n        imports github.com/google/gxui/interval\n        imports github.com/google/gxui/math\n        imports github.com/google/gxui/drivers/gl\n        imports code.google.com/p/freetype-go/freetype/truetype\n        imports code.google.com/p/freetype-go/freetype/truetype\n        imports code.google.com/p/freetype-go/freetype/truetype: cannot find package \"code.google.com/p/freetype-go/freetype/truetype\" in any of:\n        C:\\Go\\src\\code.google.com\\p\\freetype-go\\freetype\\truetype (from $GOROOT)\n        C:\\Gopath\\src\\code.google.com\\p\\freetype-go\\freetype\\truetype (from $GOPATH)\narnold MSYS ~/gxui/samples/hello_world\n$ which hg\n/usr/bin/hg\narnold MSYS ~/gxui/samples/hello_world\n$ echo $PATH\n/usr/local/bin:/usr/bin:/bin:/opt/bin:/c/Programs/ORANT/11.2.0.3.0/bin:/c/Program Files (x86)/Intel/iCLS Client:/c/Program Files/Intel/iCLS Client:/c/Windows/system32:/c/Windows:/c/Windows/System32/Wbem:/c/Windows/System32/WindowsPowerShell/v1.0:/c/Program Files/Intel/Intel(R) Management Engine Components/DAL:/c/Program Files/Intel/Intel(R) Management Engine Components/IPT:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/DAL:/c/Program Files (x86)/Intel/Intel(R) Management Engine Components/IPT:/c/Go/bin:/c/Program Files/MATLAB/R2014b/runtime/win64:/c/Program Files/MATLAB/R2014b/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl\narnold MSYS ~/gxui/samples/hello_world\n$ hg --version\nMercurial Distributed SCM (version 3.4)\n(see http://mercurial.selenic.com for more information)\nCopyright (C) 2005-2015 Matt Mackall and others\nThis is free software; see the source for copying conditions. There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n```\nedit: i additionally installed mercurial on windows. that fixed this issue.\n. @shurcooL it works fine on windows 7 x64\ninstall steps:\n1.) install msys2 (msys2-x86_64-20150512.exe) from: https://msys2.github.io/\n2.) start C:\\msys64\\msys2_shell.bat and install git + gcc:\n```\npacman -S git\ngit config --global http.sslverify \"false\"\npacman -S mingw-w64-x86_64-toolchain\n```\n3.) start msys2 via C:\\msys64\\mingw64_shell.bat:\ngo get -u github.com/google/gxui/...\n4.) build and run hello_world app\ngit clone https://github.com/google/gxui/\ncd samples/hello_world\ngo build main.go\n./main.exe\ni can build and execute /gxui/samples/hello_world without any problems :-)\nare there any limitations using gxui on windows?\n. ",
    "xeodou": "I got the same issue this morning. \ngo version\ngo version go1.5 windows/386\nI try build a windows app it crash with the same issue both 32bit and 64bit.\n. ",
    "warpfork": "Sounds reasonable to me.  Defense in depth and rapid detection :+1: \n. ",
    "waynenilsen": "I signed, I used the github username feature.\n. How about uploading these to imgur and change the readme to include external links to the images? \n. ",
    "andrewchambers": "Its possible to just make another repo called gxuiscreenshots then cross reference them in the readme.\n. ",
    "ghost": "Or a branch called screenshots.\n. > @ben-clayton you can just add them to the README (like this) using\n\nMarkdown:\n![Alt text](rel/path/to/image.png)\nThen, they appear in the README\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/google/gxui/pull/134#issuecomment-149044262\n\nDid you read what he said? People probably don't want to clone the\nscreenshot files.\n. ",
    "donatj": "I generally create an orphan \"images\" branch for images in Readme,s and what not.\n. ",
    "drahoslove": "Thanks for reviewing @ben-clayton,\nI commit some changes according to your comments.\n. ",
    "lomoalbert": "Now we can use \"import github.com/golang/freetype\" instead of \"import code.google.com/p/freetype-go\".\n. ",
    "nigeltao": "Dont switch over to the github version just yet. I intend to make breaking API changes over the next week or three.\n. golang-nuts post about the move to github.com/golang/freetype:\nhttps://groups.google.com/d/topic/golang-nuts/tr-MftD7kbo/discussion\n. BTW, you'll need to make another (simple) change for\nhttps://github.com/golang/freetype/commit/03bdcc0fe1c41fb81c28f5ad739241c1f0b6ec9b\n, , mask, maskp, \nwould become\n, mask, maskp, _, _\nSorry.\n. ",
    "wiyan": "Having the same problem like you,do you get the answer now?\n. you may need go version 1.6\n. ",
    "mr4x": "I signed it!\n. @ben-clayton fixed\n. @ben-clayton Yes, please, I have no idea how to remove remaining pixels. I hope I was helpful and I would like to see the roadmap, maybe I could help with something else ;)\n. ",
    "danmondy": "I submitted a fix to this, assuming thats how we wanted it to function. Please let me know if I did anything wrong along the way. This is my first time submitting a pull request.\n. I was mostly basing it on java swing which usually takes row, cols (new GridLayout(rows, cols)). Also the idea of x and y which are usually passed in that order (though one could argue that cols correlate to x more than rows.) If nothing else we can just change the comments in the samples, but it definitely misled me and then I didn't know if I could trust the SetChildAt orders as well.\n. I signed it!\n. ",
    "LrsK": "Congratulations Ben! I'm sure the community will continue to build towards\na similar solution and use GXUI as a stepping stone to that end.\nons. 28. okt. 2015 kl. 12.40 skrev justay notifications@github.com:\n\ncongratulations\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/google/gxui/issues/166#issuecomment-151812717.\n. \n",
    "stanluk": "I have recently discovered this project and it also becomes one of my favourite. Great job!\nThere is one  thing I would.like to asku You. Could You find some spare time to write post about 'lessons learned' from gxui development? If You would ever write this project again from scrach,what would You change? Did You consider using channels to manage events? Such feedback will be very valueable for next developers who would follow Your steps...\n. ",
    "carlTLR": "Thanks @ben-clayton and congratulations! :) Right now as far as I can tell, there is no other project that allows you to achieve the same look and feel across multiple operating systems and environments (apart form go-qml, but that has a dependency on QT).  Has anyone come forward to continue development?\n. ",
    "joeblew99": "I would like to see a project to  integrate gxui with shiny. Anyone's else ?\n. ",
    "jvkassi": "Anyone who can help on that ? i have no clues ( yet ) on go \n. ",
    "nelsam": "Sounds good.  I'm working at sticking the code editor in a ScrollLayout and just finding the longest line every edit, since that seems the simplest for the time being.  If/when it ends up being too slow, I'll worry about a more sophisticated solution.\n. I gave the ScrollLayout a shot, but my CodeEditor was having real trouble displaying files over a few hundred lines when it had to render the entire file on every Paint call.  I think I'd have to rely on the TextBox's vertical scrolling and turn off the vertical scroll on the ScrollLayout in order to make anything over a few hundred lines display correctly, and then the TextBox's scroll bar would be hidden from view unless you're scrolled all the way to the right.  I even tried disabling the logic that checks line lengths, hoping that it was just my inefficient line parsing that was the issue ... but it had no noticeable effect.\nI think I'll need to fall back to my previous plan, unless I want to spend ages optimizing my Paint calls.\n. @ben-clayton Err, right, I didn't mention things in chronological order, there.  I gave that a shot, but with that solution, the TextBox's vertical scroll bar gets scrolled out of frame.  So I tried making the ScrollLayout handle all the scrolling, and that's when I ran into performance issues.\n. ",
    "non-native": "Oh, that's a shame. ",
    "lukatendai": "I totally understand you... good luck with the parenting, I have been doing\nit for last 10 years and it is not easy ;)\nOn Thu, Oct 19, 2017 at 4:48 PM, Ben Clayton notifications@github.com\nwrote:\n\nI built GXUI to put together a proof of concept app and to learn Go. It\nended up being developed in my spare time, then I became a Dad. As most\nparents may tell you, between work and parenting you're lucky to find time\nto sleep, let alone keeping an experimental project going. :)\nMaybe one day I'll get some time to work on GXUI again - if I do, I'll be\nsure to give it a good reworking - since writing this library, I've learnt\na great deal on how to write Go properly... so please don't consider this\nquality example code!\nThanks for your interest,\nBen\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/google/gxui/issues/175#issuecomment-338033269, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADSFcoOeBv_3X24cDfDX3NjtdTob8jrMks5st7WhgaJpZM4P_04E\n.\n\n\n-- \nLukasz Ochoda\nEndai Worldwide http://www.endai.com/DeveloperTel: 646-561-6362\n. "
}