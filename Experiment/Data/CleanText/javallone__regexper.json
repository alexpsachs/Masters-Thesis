{
    "jakub-g": "Just asked myself this question :) \nI think this could be done with the color of the loop below the item; for instance, greedy match should have a red line color, and non-greedy could stay black, or something along those lines.\nA legend below could explain that.\n. ",
    "javallone": "Greedyness of the expression is displayed in the regexper rewrite that just went live. Code is available on https://github.com/javallone/regexper-static\n. dbr's increase to the nesting limit fixes all of these except for amirrajan's example (it even renders the email regexp now...see details below).\namirrajan's is using '+++' which seems to be an invalid syntax in JavaScript regular expressions. I've tried it in my browser and get a complaint for using any more than one '+' without something to match. Replacing the '+++' with a single '+' causes the expression to render.\nAs for the email regexp, the version given in issue #21 works. It looks like coping it directly from the linked page is causing problems due to the newlines that end up embedded. It does render eventually (I really need to adding a loading graphic), and the result is huge (be sure to scroll)!\n. From the HN comments, these are also returning \"Server Errors\":\n^/([^/]+)[/]?(_((site)?(edit|show|manager))(/|$))?([\\s\\S])\n^([^\\W]+)@((?:[a-zA-Z0-9-]+.)+(?:org|com|net|gov))$\n. Also this: ^((https?|ftp):\\/)?\\/?((.?)(:(.?)|)@)?((www.)?([^:\\/\\s]+))(:([^\\/]))?((\\/\\w+)\\/)([-\\w.]+[^#?\\s])?(\\?([^#]))?(#(.))?$\nThank you everyone for adding details to this. I won't have time to do more than comment on it until at least this evening, but more data points should make this easier to figure out.\n. dbr's change to increase the nesting limit fixed all of the mentioned expressions in this issue.\n. Periods in a regular expression are used to match any character. If you want to only match a literal \".\", you have to escape it with a backslash like so:\n(..csproj$)|(..sln$)\n. On further thought, it's probably a bad idea to use the URL hash for the \"bookmarkable\" regexps. They may get out of hand length-wise (I'm thinking of that infamous email regexp). I'm going to look storing them in a database and generating tinyurl-like URLs for sharing and bookmarking.\n. Changed the name of this issue to hopefully reduce the number of times a duplicate version of it is submitted\n. This has been resolved by #39\n. Icon added by #42\n. Include the \"Check if a number is prime\" example: ^1?$|^(11+?)\\1+$\n. In the time this site has been up, I've received more than a few bugs resulting from someone having trouble reading the diagram (or misinterpreting part of it). I think adding special cases just for the sake of the diagram looking prettier may lead to more issues like those. \nAlso, it would make it more difficult to document the visual conventions used in the images to help people with reading them, since all of the special cases would have to be accounted for.\n. I'm committing a fix for this.\nFrom my experiments in the browser, you are allowed to have unescaped \"{\" and \"}\" characters so long as they don't look like a specification for a repetition (so you can't do \"{1}\", \"{1,2}\", etc).\n. I'm definitely planning on looking into this. Right now the site is hosted on Heroku and \"the way\" to get a domain pointed at a Heroku app is with a CNAME record, which apparently cannot be done on the TLD. I just haven't had a chance to look into better/alternate solutions yet.\n. This is a duplicate of issue #7. The intent of that is to make the results sharable (and by extension, bookmarkable).\n. If you want to include the \"[\" and \"]\" characters in a character class, then you have to escape them with a backslash. JavaScript doesn't enclose ranges in character classes with brackets like some other regular expression syntaxes do, so the expression I think you're trying for is one of the following:\n[^a-z]* => \"Zero or more instances of any character that isn't a-z\"\nor\n[^[a-z]]* => \"Zero or more instances of any character that isn't a-z, [, or ]\"\n. forewer2000: The server error for your expression is now fixed, but it looks like there are several syntax errors, mostly \"*\" or \"+\" characters with nothing to repeat (the appear at the beginning of a parenthesized sub-expression).\n. Infocatcher: Your expression is now working. Be warned though that at this time you will see some incorrect results since you have included the \"/.../g\" syntax that JavaScript (and other languages) use to indicate a regular expression literal. This not currently supported (I will be adding support soon, probably today). See issue #5 for details on that.\n. This will be handled by issue #7\n. I'm going to merge this pull request, but in the future please keep the changes in a pull request related. I would have rather this be two pull requests, one for the font change and one for the nesting limit.\nI don't want to make a big deal about it since it's really my fault, I haven't put up any documentation about how I want to run this project...I really wasn't expecting the kind of reception it received!\nAt any rate, thanks for finding the fix. \n. This has been fixed by pull request #20\n. I don't expect this feature will be added in the near future, but I'm going to keep it around since it does sound like a good idea.\nAt this point, the expression is not being compiled into a state machine, it is merely being parsed enough to render the image. I haven't done any research into generating the state machine, or the difficulties that may be encountered with tracing the path through that machine, but from past reading I understand that it is not a trivial problem.\nI will keep this in mind though.\n. Rendering the partially parsed expression may be prohibitively difficult at this time (I'm using Treetop to do the parsing, and have limited access to handling errors), but I am going to work on improving the error reporting.\nAt the very least, I will highlight the offending section in the input.\n. Error messages are slightly better in the regexper rewrite that just went live. Code is available on https://github.com/javallone/regexper-static\n. This actually turns out to be a bad idea since literals can start or end with whitespace, which would be invisible without the quotes.\n. This will be covered by issue #7 \n. I haven't had the time to devote to regexper that I would like, but I do intend to continue maintaining it. I know there are several pull requests that both users and myself would like to see merged.\n. Thank you for your submission, but I have gone with a different implementation to address this functionality.\n. Duplicate items in character sets are no longer displayed in the regexper rewrite that just went live. Code is available on https://github.com/javallone/regexper-static\n. This definitely appears to be working.\n. It is now possible to download the rendered image in the regexper rewrite that just went live. Code is available on https://github.com/javallone/regexper-static\n. Thank you for the contribution, but I am not going to merge this change. I don't feel comfortable directly copying content from another site (even with the attribution), and I want to try to keep the interface on this site as simple as possible.\n. Regexper does support positive and negative lookahead. It looks like your negative lookahead expression is inside of a character class, which as far as I can tell is not supported by JavaScript-style regular expressions.\n. Thank you for your submission, but I have gone with a different implementation to address this functionality.\n. Thank you for this patch (and for introducing me to canopy). After spending far too long deciding if I wanted to do the parsing client-side or do the rendering server-side (to move all the work to one side or another), I ultimately decided to move it all client-side...and to rewrite the whole project in the process.\nSo, unfortunately I'm not merging this change, but it did point me in the direction I ended up going with the project. The new codebase is in http://github.com/javallone/regexper-static\n. Thank you for the contribution. I'm not going to merge this at this time, but I am going to keep it around.\nI was actually talking about how the processing on Regexper was split between server and client with a co-worker recently (and even that this change has been sitting in the pull requests). We were talking about the pros and cons of doing all the processing server-side vs. client-side.\nI might actually update the site to do all the processing server-side since that would lead to sending a bitmapped image to the client (as a PNG probably). This makes it much easier to save the image and embed it in other documents, which may be more useful than the instant processing that client-side rendering provides.\nI'm still thinking about the best course of action.\n. Icon added by #42\n. Thank you for the submission, but I have decided to use the icon from #42 \n. I agree with ForbesLindesay, the point of doing railroad diagrams is to indicate paths the can be taken to evaluate the expression and the added text does seem noisy. Thank you for the contribution, but I'm not going to merge it.\n. I'm not planning on changing the license. The currently license was chosen specifically so that others would not profit off of my work or the work of any contributors on this project.\n. This should work now\n. None of those are valid in the JavaScript version of regular expressions (which is the only syntax that Regexper currently supports). When it supports the syntax of other languages, then these will surely be included.\n. Could you please provide an example regular expression that is failing?\nI've tried a simple expression with a space at the beginning and end without a failure message, and that is valid syntax so it shouldn't just be trimmed.\n. I have revamped the labeling of loop iterations in the regexper rewrite that just went live, including this suggestion. Code is available on https://github.com/javallone/regexper-static\n. The ?<! syntax is not supported by JavaScript-style regular expressions.\n. The text \"one of\" is describing the choice of character from the character class. The repetition added by the + is indicated by the looping path in the railroad diagram. \nOn the left is [a-z] and on the right is [a-z]+:\n\n. Quotes around literals are less in-your-face in the regexper rewrite that just went live. Code is available on https://github.com/javallone/regexper-static\n. I've made some similar changes in the regexper rewrite at https://github.com/javallone/regexper-static\nI'm using the fancy quotes, but didn't mess with the character spacing. The quotes are displayed in a fairly light gray instead of the same black as the rest of the literal. Thanks for the patch though\n. Changed source code link in the regexper rewrite that just went live to just be a regular link in the header. Code is available on https://github.com/javallone/regexper-static\n. I'm amazed that this bug hung around for as long as it did (I can't recall anyone reporting that {,#} isn't valid in JS before...and it actually isn't). It has been addressed in the regexper rewrite that just went live. Code is available on https://github.com/javallone/regexper-static\n. The expression as you posted it (starting with ((,+) renders successfully. The expression you entered into rubular.com (starting with ((,*+) does not work and should not since that syntax is not valid in JavaScript. \nI'm not sure what the usefulness of using *+ would be since that would mean that the comma is repeated \"zero or more times, one or more times\". Since the * is greedy, then the + will only match once (all of the commas will be captured by the *, then ,* will be captured once by the +). Judging from the example you used on rubular, you might want ((,?[\\w\\s.\u00f1\u00e1\u00e9\u00ed\u00f3\u00fa]+,)|(,[\\w\\s.\u00f1\u00e1\u00e9\u00ed\u00f3\u00fa]+)) instead to indicate an optional leading comma or just use ((,*[\\w\\s.\u00f1\u00e1\u00e9\u00ed\u00f3\u00fa]+,)|(,[\\w\\s.\u00f1\u00e1\u00e9\u00ed\u00f3\u00fa]+)) if you need to handle any number of leading commas.\n. Named groups are not supported by JavaScript's regular expression syntax (which is the only syntax currently supported on regexper.com). Also, this project is deprecated, and is only kept for historical reference. The current version of regexper is in the regexper-static project, and work for adding support for other regular expression flavors is in javallone/regexper-static#4.\n. ",
    "amirrajan": "fails on this one too: \n^(([A-Za-z0-9]++)|([A-Za-z0-9]+-+)|([A-Za-z0-9]+.+)|([A-Za-z0-9]+++))[A-Za-z0-9]+@((\\w+-+)|(\\w+.))_\\w{1,63}.[a-zA-Z]{2,6}$\nUpdate:\nThis is an invalid regex in javascript, but is valid in C#...\n. Sorry about that, changing the regex (..csproj$)|(..sln$) displays the right result.\n. ",
    "srathbun": "And this one which I pulled from a jquery plugin:\n((?:\\((?:\\([^()]+\\)|[^()]+)+\\)|\\[(?:\\[[^\\[\\]]*\\]|['\"][^'\"]*['\"]|[^\\[\\]'\"]+)+\\]|\\\\.|[^ >+~,(\\[\\\\]+)+|[>+~])(\\s*,\\s*)?((?:.|\\r|\\n)*)\n. ",
    "jrunning": "Some or all of the above may be duplicates of #4.\n. ",
    "zookatron": "Fails on a URL regex pattern as well:\n/((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))?)/\n. ",
    "mlissner": "Passes the HTML5 regex! \n[a-zA-Z0-9.!#$%&'*+-/=?\\^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*\n. Agree. +1.\n. ",
    "clopez": "This regex also throws a server-error:\n\n^(ave|fenix(id([0-9]+)?))$\n\n. ",
    "dgreensp": "Ok:\n(((x)))\nError:\n(((x?)))\n(((x)?))\n(((x))?)\n(((x)))?\n. ",
    "spinningarrow": "So is this: ^=((?:\\d+(?:\\.\\d+)?|(?:\\.\\d+))(?:[+-](?:\\d+(?:\\.\\d+)?|(?:\\.\\d+)))*)$\n. ",
    "dbr": "Seems like it errors if the diagram gets too tall..?\nThis one is fine:\n(((x)))\nThis one errors:\n((((x))))\nSimilarly (((x?))) fails, maybe because \"skippable\" line makes the diagram taller\nEdit: Nope, was caused by the JSON module failing to serialize complex trees, see pull request #20\n. ",
    "tracker1": "+1\nThe first regex I tried was: /^[\\da-z]+$/i\nSo have to really agree on this one, would be nice to include the couple of options as well as the enclosing slashes.\n. ",
    "jakeonrails": "+1\n. +1\n. ",
    "lipis": "Something like jsFiddle.. you might want to have a bigger multiline input as well maybe.. \n. ",
    "MaxZhuravlev": "+1\n. @ForbesLindesay Thank you!\n. +1\n. ",
    "ForbesLindesay": "@MaxLord You may be interested in www.regexplained.co.uk\nIt generates very similar diagrams but is fully client side (so faster on a good computer).  It has support for permalinks, and it's more actively maintained.\nIt does just store the entire regexp in the url hash, but it uses tinyurl to avoid exposing that to the client.  It turns out that this approach is fine even for something like the infamous e-mail regexp.  You could probably have multi KB url query strings if you wanted to.\n. @felquis nope, I just haven't seen any comment from @javallone in months now and there are a number of outstanding issues/pull requests which would be clear instant wins in terms of functionality.  If you make a pull request to www.regexplained.co.uk that adds a useful feature you can expect a response within a week or so, typically much less.  Based on the current status of open pull requests on this repo, you'll may need to wait more in the region of months.\n. I'm intending to go down that route initially for http://regexplained.co.uk but it does have the downside of not being able to see the path taken through the railroad diagram.\n. See my comments in #7 re www.regexplained.co.uk which is a more actively maintained regular expression diagramming tool and supports permalinks\n. With the above fixes (and a slight special casing for long regexps) this is deployed to my fork at http://regexplained.co.uk/  Thanks for doing all the hard work\n. Would be cool to see as a separate pull request to https://github.com/ForbesLindesay/regexplained.co.uk as the code is pretty different (I've used a simple module system rather than your wacky dependency injection thingy and because you've used).  The other point I'd make is that we ought to be able to highlight the regex in the initial text-box, rather than displaying a separate copy of the regex.\n. For regexplained I now have a version that renders everything to an SVG string rather than using raphael.  It's actually a lot faster and it makes it possible to use SVG on the server.  As an added bonus, the renderer could easilly be sapped out to use Canvas instead of SVG at some point.\n. This is an awesome icon.  I'm using it on my fork (http://regexplained.co.uk/) hope that's OK.\n. Just so you know, I've published my fork of this as http://regexplained.co.uk/ It supports permalinks to the regular expressions.  Just type one in and wait about a second and the url will update.  You can also generate the URLs yourself, it's simply:\njavascript\nfunction getURL(regexp) {\n  return 'http://regexplained.co.uk/#' + base64.encode(JSON.stringify({pattern: regexp});\n}\ngetURL('foo\\\\((.+)\\\\)');\n//returns http://regexplained.co.uk/#eyJwYXR0ZXJuIjoiZm9vXFwoKC4rKVxcKSJ9\nbase64 encoding and JSON stringifying is available in most languages so that shouldn't be a problem.\n. You can also just type the regexp into the box and copy the url that appears in your browser a second or so after the image is generated.  Depends whether you need to be able to automate the process or not.\n. If you need to generate the URL inside a JavaScript environment you can use http://component.jit.su/ForbesLindesay/base64 which has very good cross browser support\n. If you know the regexp in advance, just type it in and copy the link from the url (or click permalink to get a shorturl)\n. Yes, mine is derived from that but packaged up with unit tests.  I also fixed a global leak (and you really don't want global leaks).\njavascript\nvar c = c1 = c2 = 0;\ncauses global leaks in that code.\n. https://github.com/ForbesLindesay/utf8-decode/commit/a3ac25b48c3f7491d515599f3c944bd30b0211d0\nrequireJS won't stop global leaks when people miss off a var statement.\nc1 and c2 get exposed globally in the above example.  The fix is to declare them with var first.\n. No, that's the subtlety.  Line 115 declares c to be equal to the result of the assignment c1 = c2 = 0 which, since c1 isn't declared, attaches c1 to the global scope and makes it equal to the result of the assignment c2 = 0 which, since c2 isn't declared, attaches c2 to the global scope and makes it equal to 0.\nThe net result is that window.c1 === 0 and window.c2 === 0 after running this function, which is bad news.  I'd probably never of caught it myself had it not been for unit tests in mocha which failed as a result of mocha checking for global variable leaks.\n. No problem.  If you tweet about regexplained etc. I'm @ForbesLindesay :smiley:\n. Looks pretty cool.  I'm hoping to have an update for regexplained done (probably over the summer) to include a regex cheat sheet and the ability to see whether/what it matches from sample inputs.  I want to make it the go to site to understand the behavior of regexes (because I hate having to visit more than one site)\n. @remybach I've made a small change to the regexplained site.  It still works fine with regexcavate, so no rush to do anything, but I've simplified the API slightly:\n1. It's now at http://www.regexplained.co.uk because that's easier to support in the DNS.  http://regexplained.co.uk will redirect as anyway, indefinitely.\n2. You can now pass the pattern using normal query string methods.  Base64 is still supported, and will be for the next year or so, but it isn't recommended.\nSo as the new API:\njavascript\nfunction getURL(regexp) {\n  return 'http://www.regexplained.co.uk/?pattern=' + encodeURIComponent(regexp);\n}\nThe nice thing is that encodeURIComponent is provided as a native function in the browser, so you don't need to implement base64 encoding :smile:\n. I'm not convinced these are needed, the whole point of the railway diagram is that these specifiers are implicit, you just see them from following the lines.  I think adding additional text is just noise really.\n. It's fine, I've re-written from the ground up under the MIT license and will be releasing soon :smile:\nI want a tool that can be integrated into other people's tooling, so that it can be as useful as possible.\n. I'd suggest regexplained.co.uk as an updated fork that I'm maintaining.  It has permalinks and renders on the client side and regexper doesn't seem to be being maintained.\n. This line causes an error, should be:\njavascript\nreturn {\n  start: parseInt(this.start.textValue),\n  stop: parseInt(this.stop.textValue)\n}\n. This should be:\njavascript\nstart: parseInt(this.start.textValue)\n. Something's wrong with this one, not sure exactly what is \"correct\" but a regexp of \\. results in the output \"\\.\" when it should output \".\"\n. ",
    "felquis": "@ForbesLindesay  This repo was discontinued?\n. See the #41 and #42\n. If merge this, close the issue #40 too\n. ",
    "rottina": "I'm all over it\n. No prob, Jeff. Saw it, looks great.\n. ",
    "rk": "+1 Otherwise the pipe symbol (|) looks identical to an uppercase I.\n. ",
    "dave1010": "Here's one that looks nice (matches URLs)\n^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n. ",
    "dvberkel": "-1\nI prefer the general case even when there is only one character.\n. I entered '1 | 2' and the spaces are rendered as can be seen in the screenshot below. Could you elaborate what is not working for you?\n\n. ",
    "olragon": "You can use naked domain redirect from wwwizer.\nhttp://wwwizer.com/naked-domain-redirect\n. ",
    "geoffreywiseman": "Yeah, if your DNS hosting provider doesn't support it directly (mine does), then something like wwwizer is a common workaround.\n. ",
    "danopia": "Or just add the three A records.\n. ",
    "logic": "Dupe of issue #7, perhaps?\n. ",
    "ananthb": "Also would it be possible to download the generated graphics as an image?\n. ",
    "katspaugh": "Invaluable for StackOverflow.\n. ",
    "fbiville": "Oops, my bad: sorry for the duplicate.\n. ",
    "palnes": "Yes, this needs fixing ASAP.\n. ",
    "versae": "Awesome! Thanks :)\n. ",
    "Infocatcher": "The same\n\nServer error\n\nfor\n/([=(\\[,&|?:!]\\s*((\\/\\/[^\\n\\r]*[\\n\\r]+|\\/\\*[\\s\\S]*?\\*\\/)\\s*)*)\\/([^*+?\\\\\\/\\n\\r]|\\\\[^\\n\\r])(\\\\\\/|[^\\/\\n\\r])*\\//g\n(a bit ugly way to match JavaScript's regular expressions)\n. ",
    "forewer2000": "Now it's working fine. There where another problem with email validation like this: ^(([^<>()[].,;:\\s@\\\"]+(.[^<>()[].,;:\\s@\\\"]+)*)|(\\\n\".+\\\"))@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}])|(([a-zA\n-Z-0-9]+.)+[a-zA-Z]{2,}))$\nBut it's ok now. Thanks\n. ",
    "havvg": ":+1: \n. ",
    "mantoni": ":+1: \n. ",
    "chillitom": ":+1: \n. ",
    "mustefa": "+1 for being able to test out the regex.\n. ",
    "paulproteus": "One simplistic way to implement this is to run client-side JS that executes the regex against a given string, rather than processing it via the state machine representation.\nThere are a few other regex demo sites on the web, and I think they just do the above. Might as well eat their lunch and win their users by gaining their features!!\n. @aldeka , curious if you'd be interested in hacking on this sometime.\n. ",
    "hughes": "The link icon is from the IcoMoon - Free pack and is licensed under CC-ASA 3.0\n. ",
    "mourner": "+1 for this, I'd like to share regular expressions through Regexper.\n. ",
    "potomak": "+1\n. ",
    "edouard-lopez": "Nice feature\n. ",
    "jbenet": "+1\n. ",
    "petems": "Hey @javallone, are you still maintaining this? Cos this would be an awesome feature to add :+1: \n. Cool, it's a really awesome app, just discovered it today :smile: \nIf you want any help like a repo collab or something I'd be down?\n. ",
    "ackerdev": "No, that's just how regex works.\nYou only need to use '[evry]', but it doesn't matter and regex will treat them as their own parts (though the result will of course act as if it ignored it).\n. ",
    "wenerme": "Sorry, forgot to close.\n. ",
    "Iftahh": "woo!  I did it and it works beautifully, zero delay.\nI'll clean up the code and make a pull request\nedit:  see the edited code here  https://github.com/Iftahh/regexper/\nI have trouble setting up require.js  (maybe because I have only static file serving running?)  so I loaded the files manually.  Other than that the code is as elegant as the original but only in javascript and no ruby.\n. I'm glad you chose the client side - I think it provides much better user experience. Instant feedback makes a tool feel so much better. \nYou can even show the diagram on the fly as the text is entered - no need for pressing \"submit\" or even hitting \"enter\".\nDid you check out the other modification I made?   Hovering over the diagram highlights the relevant text in the regex - I think it can be useful for the users of this tool (ie. learners of regexps).\n. Ok so I did it myself.  it looks really good !\ncheck out  https://github.com/Iftahh/regexper\n. Thanks for the testing the fixes and for setting it up!\n. @ForbesLindesay -  I updated the code to include the other feature I've suggested - highlight by hover. Would be great if you merge and deploy it also.\n. Well, if you do the rendering in a Canvas instead of SVG then you can\neasily export bitmap from it.\nBut then it will be more difficult to do the mouse hover on the nodes  (see\nthe other pull request I added).  Still possible just a bit more work.\nOn Sat, Sep 21, 2013 at 7:55 PM, Jeff Avallone notifications@github.comwrote:\n\nThank you for the contribution. I'm not going to merge this at this time,\nbut I am going to keep it around.\nI was actually talking about how the processing on Regexper was split\nbetween server and client with a co-worker recently (and even that this\nchange has been sitting in the pull requests). We were talking about the\npros and cons of doing all the processing server-side vs. client-side.\nI might actually update the site to do all the processing server-side\nsince that would lead to sending a bitmapped image to the client (as a PNG\nprobably). This makes it much easier to save the image and embed it in\nother documents, which may be more useful than the instant processing that\nclient-side rendering provides.\nI'm still thinking about the best course of action.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/javallone/regexper/pull/37#issuecomment-24866277\n.\n. \n",
    "jokeyrhyme": "Could be somewhat related to #37 ??\n. Could be somewhat related to #35 ??\n. ",
    "remybach": "Hmm... so all I'd need to do is get the base64 encode function and generate the url and it would work?\nI'll give that a go, thanks...\n. No, I need to pass an existing regex dynamically.\n. I was just going to use this one which seems similar enough to yours.\n. Yeah... sweet... that works pretty darn well! Thanks :+1: \n. We're looking to announce our project next Monday so I'll try remember to let you guys know here to check it out!\n. Oh, really? What was the fix?\n. I'm using RequireJS so I shouldn't have any issues with the global namespace actually (if that's what you mean).\n. It already seems to do that on line 115. :)\n. Thanks for the input... really appreciate it!\n. Just remembered I was going to let you know... I've launched that project: Regexcavate - a natural language \"translator\" for Regex.\n. Closing this as there seems to be no progress on it and @ForbesLindesay's fork already does what I need.\n. ",
    "blainesch": ":+1:\n. ",
    "dcardosods": "For me the lines aren't clear\n. :+1: \n. ",
    "nephiw": "Sure, at http://www.regexper.com/ if I type /.*/ into the field with leading white space and click on the 'display' button I get this result: \n\"Expected one of *, +, ?, {, {,, (, [, ., \\, $, | at line 1, column 3 (byte 3) after\"\nIf I remove the leading spaces I get a diagram. The same thing happens for trailing spaces. I can reproduce it consistently, but it looks like I can get it to show white space in the diagram if I leave the / characters off. To be honest, I didn't realize you could put regex into regexper without the / characters.\nBy the way, thanks for the tool.  I have shared it with all of the developers I work with and we all enjoy using it. \n. ",
    "AyrA": "Browser is Google chrome\n. "
}