{
    "rtomayko": "Looks great. Merged. Thanks!\nI'm shooting for another gem release within a few days.\n. Pfft. Should be better now. Thanks!\n. Thanks!\n. This looks like a good start to me and is definitely a case I'd like to handle. I wouldn't worry too much about naming in Replicate::AR -- it's all still kind of a mess in general.\nI'm wondering if we can get this information from the association reflection and model classes reliably instead of having to declare explicitly for replicate.\nI suspect there's a reason you aren't using set_primary_key on the Domain model. Doing so should make the example you gave a lot cleaner and remove the need for the special attributes. e.g.,\n``` ruby\nclass WebPage < ActiveRecord::Base\n  belongs_to :domain, :foreign_key => 'domain_host'\nend\nclass Domain < ActiveRecord::Base\n  set_primary_key :host\nend\n```\nIs there also a normal id primary key column on Domain that's making this a no go? Or maybe AR doesn't support non-integer PKs well?\n. Hey, what's your gem --version? I can't recreate the test:all failure.\n. Can you see if the case works for you on master now without the replicate_keymap_attribute macro calls? Check out:\nhttps://github.com/rtomayko/replicate/commit/10027d95ce42ff0288edefc61319935b8a49ad91\n. Can you give it a try now on master? Our constantize implementation was a little different from ActiveSupport's and may not have been causing the autoloader to kick in properly (I also hate autoloading!!!). I took the AS implementation more or less verbatim here:\nhttps://github.com/rtomayko/replicate/commit/615837c76de940e16a207613e05d3bf2f60b1989\n. Perfect. Thanks!\nOn Sep 19, 2011, at 10:21 AM, Myron Marstonreply@reply.github.com wrote:\n\nThanks for addressing this quickly!\nI updated to the latest commit and things are working fine without needing to pre-load GoogleAnalytics::Engine.  That said...before updating to your commit, I tried to trigger the same bug again and couldn't come up with a replicate command that reproduced it.  I forget what I was doing Friday that caused it.  So I'm not 100% the issue is fully solved but this looks like it should probably do the job.  I'll reopen this if I get the same error again.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/rtomayko/replicate/issues/5#issuecomment-2136126\n. Looks great!\n. Ha. I've been lucky enough to not have run into them yet :)\n\nThis looks good. Merging.\n. Thanks for this. I may change some of the option / methods names if that's cool.\n. Cool. I think I'd rather redirect it to stderr instead of /dev/null though.\n. Merged. Thanks!\n. Nope. Just missed this somehow. Sorry.\n. @ggrocco Sorry, I just haven't had a second to wrap my head around this.\n. Merged in #16. Thanks!\n. Uggh. Thanks!\n. Thanks! Sorry for the delay.\n. Merged thanks!\n. Yeah I think it would be good to have the equivalent of replication_associations available to dump scripts. Or perhaps since foo.my_habtm_association has a link back to foo, we can be a bit more comfortable about following the relationship in that direction. Let me know if you experiment with anything here.\n. :cool:\n. Looks great. Let me run the tests real quick and I'll merge.\n. Getting a failure under AR 2.3.14:\n``\n==> testing activerecord ~> 2.3.14\n/opt/github/rbenv/versions/1.9.3-p194/lib/ruby/1.9.1/rubygems/custom_require.rb:36:inrequire': iconv will \nbe deprecated in the future, use String#encode instead.\nUsing activerecord 2.3.14\nRun options:\nRunning tests:\n.......E...........................\nFinished tests in 0.127924s, 273.5999 tests/s, 1321.0969 assertions/s.\n1) Error:\ntest_dumping_many_associations_at_dump_time(ActiveRecordTest):\nNoMethodError: undefined method where' for #<Class:0x007f95ec9e9a38>\n    /Users/rtomayko/git/replicate/vendor/1.9.1/gems/activerecord-2.3.14/lib/active_record/base.rb:1998:inm\nethod_missing'\n    /Users/rtomayko/git/replicate/test/active_record_test.rb:329:in `test_dumping_many_associations_at_dump_\ntime'\n35 tests, 169 assertions, 0 failures, 1 errors, 0 skips\nrake aborted!\nCommand failed with status (1): [testrb test/*_test.rb...]\nTasks: TOP => test\n(See full trace by running task with --trace)\n```\nYou can get this locally with rake test:all or AR_VERSION=2.3.14 rake -s test.\nI'd like to retain AR 2.3 compatibility for a bit longer since we're still using it here at GitHub. Everything else looks great.\n. Perfect thanks! Merging.\n. Shit, I think I have to revert this. Sorry there are a few backward incompatibilities that make this a no go for a minor release. Sorry, I'm just now getting around to testing this out. I'm going to leave a couple diff comments.\n. I run into clumsiness trying to do stuff like this all the time. I think maybe making load_script available and possibly also making it search the load path would go a long way. Do experiment.\n. @iangreenleaf I was actually on the verge of merging it after reviewing the diff yesterday but misread the last comment as you saying the cleanup wasn't done yet.\nAnyway, looks fine. Merging now for the next release.\n. I'd very much be interested in seeing a patch. If its not too invasive and is fairly small LOC-wise I'd be happy to merge it.\n. Thanks @ejfinneran. Let me know when something materializes.\n. Nice. Sorry for the (massive) delay here.\n. We're also running this as part of a small replicate script that potentially dumps lots of objects:\ndiff\n   Replicate::Dumper.new do |dumper|\n     dumper.marshal_to out\n     dumper.log_to $stderr, verbose, quiet\n+\n+    count = 0\n+    dumper.listen do |type, id, attributes, object|\n+      if ((count += 1) % 50_000) == 0\n+        # reset query cache every 50K objects dumped to allow for GC\n+        ActiveRecord::Base.connection.clear_query_cache\n+      end\n+    end\n+\n     dumper.dump repository\n   end\nIt clears AR's query cache every 50K objects dumped so that GC can collect the query string and hash values in the query cache.\nI might bring this into replicate proper. Just wanted to drop it here for posterity and future reference.\n. Cool. Thanks for that!\n. Yep, totally forgot somehow. Just pushed a new 1.5.1 gem and tag.\n. Thanks for this. I've run into the problem a few times now.\nI need to do a bit closer review of the diff and approach but I'm definitely interested in landing something that fixes this.\n/cc @jbarnette\n. Oops, sorry. Totally missed this. Fixed in #29.\n. Noticed these warnings in rake test:all:\nDEPRECATION WARNING: Calling set_table_name is deprecated. Please use `self.table_name = 'the_name'` inste\nad. (called from <class:Namespaced> at /Users/rtomayko/github/replicate/test/active_record_test.rb:93)\nCan you fix that up and open another PR?\n. Strange indeed. Thanks for the report. Failing test is:\nhttps://github.com/rtomayko/replicate/blob/9181dce22ef/test/dumper_test.rb#L47-L54\nSmells like maybe a timestamp was added to the base marshal stuff but I haven't dug in too much to verify.\n. :cool:\n. lol\n. Blah, trying to get a 1.6 release together but hitting failures under AR 2.3 and I can't get sqlite3 to build under ruby 2.x. Can you script/vendor-gem this off of master for now?\n. :cool: Thanks!\n. Hmm, yeah it looks like redis_config is nil. Maybe try RAILS_ENV=production instead of \"prod\"? This smells like a general environment loading issue.\n. The way this is implemented is incompatible with the 1.5 release. The dump_replicant method can be overridden by models or other objects. Since none of those methods have been written to take opts, upgrading to this branch will blow up when the method by Replicate::Dumper with two arguments.\n. The @opts name bugs me a little here because this is mixed into ActiveRecord::Base. We should use a more explicit name like @replicate_opts.\n. Here's the backward incompatible call. We might be able to get away with checking the arity on the method but I dunno. Tricky.\n. Passing the local_id here is going to break backward compatibility unfortunately. Existing programs that implement custom load_replicant method will raise an ArgumentError.\n. :cool: I was going to say we shouldn't assume AS is present but I think it's fine in Replicate::ActiveRecord since AS will definitely be there.\n. ",
    "myronmarston": "Unfortunately, for the model in this app, the primary key is not host--it's id like any other normal rails model.  But some dev (who is now long gone) thought it would be clever to use web_pages.domain_host = domain.host as the join :(.\nI was trying to figure out a way to get this from the association/model metadata but I think it's only there in the association on the WebPage side.\n. \u279c  replicate git:(non_standard_foreign_keys) ruby --version\nruby 1.8.7 (2011-02-18 patchlevel 334) [i686-darwin10.6.0]\n\u279c  replicate git:(non_standard_foreign_keys) gem --version\n1.6.0\n. It works great.  Thanks!  I'm glad you found a way to make it work without the macro I added.\n. Thanks for addressing this quickly!\nI updated to the latest commit and things are working fine without needing to pre-load GoogleAnalytics::Engine.  That said...before updating to your commit, I tried to trigger the same bug again and couldn't come up with a replicate command that reproduced it.  I forget what I was doing Friday that caused it.  So I'm not 100% the issue is fully solved but this looks like it should probably do the job.  I'll reopen this if I get the same error again.\n. ",
    "MGPalmer": ":)\n. Oh, absolutely.\n. ",
    "dougcole": "I'm only a little embarrassed to admit to be working on an app that uses polymorphic joins.\n. ",
    "brainopia": "@rtomayko is there anything else I can do to help you to accept this pull-request?\n. ",
    "aderyabin": "+1\n. ",
    "ggrocco": "Has any plan for this issue become part of the the new version? I'm passing for the same problem...\n. ",
    "subelsky": "I had the same problem - seems to be related to how replicate uses autoload. Adding this to my dump.rb file forced replicate to load itself:\nruby\nReplicate::AR\n. ",
    "audionerd": "Thanks @subelsky. Replicate::AR worked for me. I didn't even need to include a require 'replicate' initializer.\n. ",
    "iangreenleaf": "Ok, looked at this with fresh eyes and it makes more sense. With 1-to-many, this style of dumping works because dump foo.my_assocs dumps all the belongs_to associations. When it's many-to-many, replicate is never comfortable dumping the association in either direction. Specifying replicate_association :my_habtm_association in the model works.\nI wonder if there's a good way to dump a HABTM without modifying the model. And if there's any way we could help people out with this situation.\n. I didn't come up with any clever way to do it automatically - too hard to know when someone is dumping a Habtm (it tends to just show up as an Array), and too hard to know if they want it dumped automatically otherwise. But I did implement a way to make some options available to dump scripts - see #20.\n. Silly me, fixed.\n. Yeah, I see what you mean. I'll take a look at it.\n. Awesome, made those changes. I like the load path idea too, so I took a shot at that, although I ended up implementing it myself, which seems weird.\n. Revisited this to discover that I was sloppy and had left a file out and included an extraneous commit. Rebased and fixed, take a look?\n. @rtomayko while you're updating this project, I'd certainly appreciate another look at this one :gift_heart: \n. I feel like I should put together a Rails 4.0 pull request now just to mess\nwith you ;)\nThanks for the merge, though.\n. ",
    "kevzettler": "I made a standalone dump script and dumped the dump ActsAsTaggableOn::Tagging.all directly\n. ",
    "ejfinneran": "I tried to stay out of the internals of replicate as much as possible.  The new code just gets in between stdin and the Marshal code when the user passes in certain options.  If you want anything done differently or anything let me know.\n. I just learned that Heroku silently truncates the output of 'heroku run' jobs if they output a lot of data so this solution might be not be the way to go.  I'm going to see what Heroku has to say about it and I'll get back to you.\n. Heroku is at least aware of this bug now (heroku/heroku#674) but doesn't seem to have a quick fix.  Until that is fixed, this PR isn't worth merging in.\n. ",
    "gogowill": "Is there going to be a minor version bump so that this code gets incorporated? Unless I\u2019m mistaken, the documentation here is for a version 1.6 that hasn\u2019t been released yet as a gem.\n. Thank you! It\u2019s working as expected, based on my testing.\n. ",
    "robink": "Any update on this? why not just giving a default nil value to local_id?\n. ",
    "jjbohn": "Anything new on this? I just cut a new fork where I've merged this into it, but would prefer to track the gem from the source.\n. If this does go forward, this should be a Hash so non Integer ids don't error.\n. ",
    "freng": "Trying to revive this, merged the rtomayko's current master branch and made two changes:\n- for backward compat when load_replicant overriden: check in load method the arity of the load_replicant method, if it's not -4, then we cannot reload (i.e. update the already loaded object when dependent foreign keys become available)  since method is overriden, no more ArgumentError (of course there will be missing foreign keys then)\n- use of a wait list now instead of single waiting element since multiple objects could wait for the same dependent object\nIt would be nice if you could test dump & restore in (non-critical ,-) environments of your real world applications.\n. ",
    "mrsimo": "I'd like to :+1:  this very hard.\n```\nLoading development environment (Rails 3.2.12)\n\n\nKernel.const_get \"ClientDocument::Invoice::Base\"\nNameError: wrong constant name ClientDocument::Invoice::Base\n    from (irb):1:in const_get'\n    from (irb):1\n    from /Users/albert/.rbenv/versions/1.9.3-p448/gemsets/harvestapp/bundler/gems/rails-441b7ed3311f/railties/lib/rails/commands/console.rb:47:instart'\n    from /Users/albert/.rbenv/versions/1.9.3-p448/gemsets/harvestapp/bundler/gems/rails-441b7ed3311f/railties/lib/rails/commands/console.rb:8:in start'\n    from /Users/albert/.rbenv/versions/1.9.3-p448/gemsets/harvestapp/bundler/gems/rails-441b7ed3311f/railties/lib/rails/commands.rb:41:in'\n    from script/rails:6:in require'\n    from script/rails:6:in'\n\"ClientDocument::Invoice::Base\".constantize\n=> ClientDocument::Invoice::Base(...)\n```\n\n\nFixes issues for us too, can't see any drawback.\n. ",
    "ktheory": "Cool. Would appreciate a rubygems release when you have a moment.\n. ",
    "zerowidth": "Done, see #30 \n. ",
    "tcrayford": "@rtomayko : thanks for the response. Do you know if this might affect the bug that we're actually seeing when replicating from prod (via a script that does things over ssh), where the steps look like the following:\n1. replicate some AR objects\n2. replicate says it's dumping objects to the db\n3. objects never appear in databas (even though replicate says it's writing them)\n. ",
    "atipugin": "+1\n. ",
    "arthurnn": "@rtomayko can you merge this?\nthanks\n. ",
    "stjohncj": "@rtomayko bump\n. ",
    "bkeepers": ":zap: Fastest merge ever.\n. I had a hard time getting the tests to run for 2.3 as well. Finally got them running for 3.0 by installing sqlite3 manually. \n\nCan you script/vendor-gem this off of master for now?\n\nYup, I don't need a release right now.  Thanks.\n. ",
    "rick": "\n. ",
    "rsanheim": "best gif of this week\nOn Thu, Jun 19, 2014 at 1:45 PM, Ryan Tomayko notifications@github.com\nwrote:\n\nlol\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/rtomayko/replicate/pull/35#issuecomment-46600642.\n\n\nEngineer @ GitHub\nhttp://github.com/rsanheim\n. ",
    "miensol": "Try this instead: User.all + Project.all + Page.all\n. ",
    "zinkkrysty": "I just saw this in the source code, does this mean it is automatically set to false?\nhttps://github.com/rtomayko/replicate/blob/master/lib/replicate/active_record.rb#L219\n``` ruby\n      # Set or retrieve whether replicated object should keep its original id.\n      # When not set, replicated objects will be created with new id.\n      def replicate_id(boolean=nil)\n        self.replicate_id = boolean unless boolean.nil?\n        @replicate_id.nil? ? superclass.replicate_id : @replicate_id\n      end\n  # Set flag for replicating original id.\n  def replicate_id=(boolean)\n    self.replicate_natural_key = [:id] if boolean\n    @replicate_id = boolean\n  end\n\n```\nhttps://github.com/rtomayko/replicate/blob/master/lib/replicate/active_record.rb#L384\nruby\n::ActiveRecord::Base.replicate_id           = false\nHow do I set it so it keeps the original ID?\n. ",
    "pirj": "Probably\nclass ActiveRecord::Base                                                                                                                                                                       \n  def self.replicate_id                                                                                                                                                                        \n    true                                                                                                                                                                                       \n  end                                                                                                                                                                                          \nend\nfor all, and for a specific model:\nclass Article < ActiveRecord::Base\n  replicate_id true\nend\n. ",
    "ankuriitk": "Any update on this? @rtomayko can you please help ?\n. Thanks @rtomayko for the quick response. My bad for the typo. After giving RAILS_ENV=production, I get the following error. Do I need to explicitly  give dump_replicants for each AR class? I thought replicate gem handles that automatically?\n/var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:85:in block in dump': Company must respond to #dump_replicant (NoMethodError)\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:78:ineach'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:78:in dump'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:60:inblock in load_script'\n    from config/replicate/dump.rb:4:in load_script'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:61:ininstance_eval'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:61:in load_script'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/bin/replicate:77:inblock in '\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:28:in block in initialize'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/emitter.rb:9:ininitialize'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/lib/replicate/dumper.rb:26:in initialize'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/bin/replicate:70:innew'\n    from /var/www/fbdash/shared/bundle/ruby/2.2.0/gems/replicate-1.5.1/bin/replicate:70:in <top (required)>'\n    from /home/deploy/.rvm/gems/ruby-2.2.2/bin/replicate:23:inload'\n    from /home/deploy/.rvm/gems/ruby-2.2.2/bin/replicate:23:in <main>'\n    from /home/deploy/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:ineval'\n    from /home/deploy/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in `'\n. ",
    "u007": "it requires to declare this method on all models,\nso ive added to my base model\ndef dump_replicant(dumper, opts={})\n    fields = attribute_names\n    dumper.write self.class, id, fields, self\nend\nbut for some reason, the data being exported and imported without values.\nive many rows without values in most of the fields\n. "
}